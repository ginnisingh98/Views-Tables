--------------------------------------------------------
--  DDL for Package Body OKS_COPY_CONTRACT_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OKS_COPY_CONTRACT_PVT" AS
/*$Header: OKSCOPYB.pls 120.113.12010000.6 2009/08/06 14:54:26 harlaksh ship $*/

  l_debug VARCHAR2(1) := 'Y'; -- NVL(FND_PROFILE.VALUE('AFLOG_ENABLED'),'N');
  g_count NUMBER;

  SUBTYPE oatv_rec_type  IS OKC_OUTCOME_PUB.oatv_rec_type;
  SUBTYPE ocev_rec_type  IS OKC_OUTCOME_PUB.ocev_rec_type;
  SUBTYPE scnv_rec_type  IS OKC_SECTIONS_PUB.scnv_rec_type;
  SUBTYPE gvev_rec_type  IS OKC_CONTRACT_PUB.gvev_rec_type;
  SUBTYPE pavv_rec_type         IS OKC_PRICE_ADJUSTMENT_PUB.pavv_rec_type;
  SUBTYPE patv_rec_type         IS OKC_PRICE_ADJUSTMENT_PUB.patv_rec_type;

  g_chrv_rec chrv_rec_type;

  g_pricelist              varchar2(100) := NULL; /* For Euro Conversion - Bug 2155930 */
  g_conversion_type        varchar2(40) := NULL; /* For Euro Conversion - Bug 2155930 */
  g_conversion_rate        number := NULL; /* For Euro Conversion - Bug 2155930 */
  g_conversion_date        date := NULL; /* For Euro Conversion - Bug 2155930 */

  /*The following Target header related package variables are used in the routines "create_bsch_using_PPSetup" and
    update_line_inv_and_acct_rule
   */
  G_TrgHdrStartDate   OKC_K_HEADERS_B.START_DATE%TYPE;
  G_TrgHdrEndDate     OKC_K_HEADERS_B.END_DATE%TYPE;
  G_TrgHdrInvRuleID   OKC_K_HEADERS_B.INV_RULE_ID%TYPE;
  G_TrgHdrAcctRuleID  OKS_K_HEADERS_B.ACCT_RULE_ID%TYPE;
  G_TrgHdrPeriodStart OKS_K_HEADERS_B.PERIOD_START%TYPE;
  G_TrgHdrPeriodType  OKS_K_HEADERS_B.PERIOD_TYPE%TYPE;
  G_TrgHdrPriceUOM    OKS_K_HEADERS_B.PRICE_UOM%TYPE;
  G_TrgHdrBillingScheduleType OKS_K_HEADERS_B.BILLING_SCHEDULE_TYPE%TYPE;

  ----------------------------------------------------------------------------
  --PL/SQL Table to check the party has already copied.
  --If Yes give the new cpl_id ----Begins
  ----------------------------------------------------------------------------
  TYPE party_rec_type IS RECORD (
    old_cpl_id          NUMBER := OKC_API.G_MISS_NUM,
    new_cpl_id          NUMBER := OKC_API.G_MISS_NUM);
  TYPE  party_tbl_type IS TABLE OF party_rec_type
  INDEX BY BINARY_INTEGER;
  g_party       party_tbl_type;


/******************************
  ----------------------------------------------------------------------------
  --Logic to check the event has already copied.
  --If Yes give the new cnh_id ----Begins
  ----------------------------------------------------------------------------
  TYPE events_rec_type IS RECORD (
    old_cnh_id		NUMBER := OKC_API.G_MISS_NUM,
    new_cnh_id		NUMBER := OKC_API.G_MISS_NUM);
  TYPE	events_tbl_type IS TABLE OF events_rec_type
  INDEX	BY BINARY_INTEGER;
  g_events	events_tbl_type;
*********************************/


  ----------------------------------------------------------------------------
  -- PL/SQL table to keep line/header id and corresponding ole_id
  -- This table will store the following combinations
  --                 Header Id  - OLE_ID for Header
  --                 Line ID    - OLE_ID for the Line
  -- To get PARENT_OLE_ID for top line, search for ID = header_id
  --                      for sub line, search for ID = Parent Line Id
  ----------------------------------------------------------------------------
  TYPE line_op_rec_type IS RECORD (
    id                           NUMBER := OKC_API.G_MISS_NUM,
    ole_id                       NUMBER := OKC_API.G_MISS_NUM);

  TYPE line_op_tbl_type IS TABLE OF line_op_rec_type
    INDEX BY BINARY_INTEGER;

  g_op_lines line_op_tbl_type;

 -------------------------------------------------------
   TYPE price_adjustments_rec_type IS RECORD (
    old_pat_id          NUMBER := OKC_API.G_MISS_NUM,
    new_pat_id          NUMBER := OKC_API.G_MISS_NUM);
  TYPE price_adjustments_tbl_type IS TABLE OF price_adjustments_rec_type
  INDEX BY BINARY_INTEGER;
  g_price_adjustments    price_adjustments_tbl_type;
  ----------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Procedure:           chk_line_effectivity
-- Purpose:             This procedure checks the effectivity dates of source
--                      contract line and target contract line
-- In Parameters:       p_new_cle_id        Target contract line id
-- Out Parameters:      x_return_status     standard return status
--                      x_flag              yes no flag
-----------------------------------------------------------------------------

 PROCEDURE chk_line_effectivity
(
p_new_cle_id 	      IN NUMBER,
x_flag                OUT NOCOPY VARCHAR2,
x_return_status       OUT NOCOPY VARCHAR2
)
IS

CURSOR l_target_line_csr (l_target_line_id NUMBER) IS
       SELECT start_date,end_date,orig_system_id1
       FROM   okc_k_lines_b
       WHERE  id = l_target_line_id;

l_target_line_rec    l_target_line_csr%ROWTYPE;

CURSOR l_source_line_csr (l_source_line_id NUMBER) IS
       SELECT start_date,end_date
       FROM   okc_k_lines_b
       WHERE  id = l_source_line_id;


l_source_line_rec    l_source_line_csr%ROWTYPE;
l_source_line_id               NUMBER;
l_source_line_duration		   NUMBER := 0;
l_source_line_time  	 	   VARCHAR2(450) ;
l_target_line_duration	   NUMBER := 0;
l_target_line_time  	 	   VARCHAR2(450) ;
l_return_status 	   VARCHAR2(1) := OKC_API.G_RET_STS_SUCCESS;

 BEGIN
                    x_flag   := 'T';
                    OPEN l_target_line_csr (p_new_cle_id);
                    FETCH l_target_line_csr INTO l_target_line_rec;
                    CLOSE l_target_line_csr;

                    l_source_line_id := l_target_line_rec.orig_system_id1;

                    If l_source_line_id is null Then
                        x_return_status := l_return_status;
                        oks_renew_pvt.Debug_Log(p_program_name => 'OKS_COPY_CONTRACT_PVT',
                        p_perf_msg   => 'Exiting chk_line_effectivity because orig_system_id1 was null');
                        return;
                    End If;

                    OPEN l_source_line_csr(l_source_line_id);
                    FETCH l_source_line_csr INTO l_source_line_rec;
                    CLOSE l_source_line_csr;

                    OKC_TIME_UTIL_PUB.get_duration(
                                  l_source_line_rec.start_date
                                  ,l_source_line_rec.end_date
                                  ,l_source_line_duration
                                  ,l_source_line_time
                                  ,l_return_status
			        );

                    IF l_return_status = 'S' Then

                         OKC_TIME_UTIL_PUB.get_duration(
                                  l_target_line_rec.start_date
                                  ,l_target_line_rec.end_date
                                  ,l_target_line_duration
                                  ,l_target_line_time
                                  ,l_return_status
			              );

                          IF l_return_status = 'S'
                          THEN
                               IF ((l_source_line_duration <> l_target_line_duration) OR
                                   (l_source_line_time <> l_target_line_time))
                               THEN
                                    x_flag := 'F';
                                ELSE
                                    x_flag := 'T';
                               END IF; -- IF ((l_source_line_time <> l_target_line_time) OR
                          END IF;
                    END IF;
                    x_return_status := l_return_status;
    Exception
        WHEN  Others  THEN
                  x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;
                  OKC_API.set_message(
                                    G_APP_NAME,
                                    G_UNEXPECTED_ERROR,
                                    G_SQLCODE_TOKEN,
                                    SQLCODE,
			            G_SQLERRM_TOKEN,
                                    SQLERRM
                                    );

 END chk_line_effectivity;

 Procedure printTemptable IS
 cursor gettemptablelines is
 select id,cle_id,lse_id,orig_system_id1
 from okc_k_lines_b_temp;
 l_id NUMBER;
 l_cle_id NUMBER;
 l_lse_id NUMBER;
 l_orig_system_id1 NUMBER;
 Begin
  OPEN gettemptablelines;
  LOOP
  FETCH gettemptablelines into
   l_id
  ,l_cle_id
  ,l_lse_id
  ,l_orig_system_id1;
    EXIT WHEN gettemptablelines%NOTFOUND;
      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
	   FND_LOG.string(FND_LOG.level_statement
	                ,'OKS.plsql.OKS_COPY_CONTRACT_PVT.printtemptable'
				 ,'ID:'||l_id||' : CLE_ID:'||l_cle_id||' : LSE_ID:'||l_lse_id||' : ORIG ID:'||l_orig_system_id1
				 );
	 END IF;
  END LOOP;

 End printTemptable;

 -----------------------------------------------------------------------------
  FUNCTION Is_Number(p_string VARCHAR2) Return BOOLEAN IS
    n NUMBER;
  BEGIN
    n := to_number(p_string);
    return TRUE;
  EXCEPTION
    WHEN OTHERS THEN
         return FALSE;
  END;

/**************************
  PROCEDURE add_events(	p_old_cnh_id IN NUMBER,
			p_new_cnh_id IN NUMBER) IS
    i 		NUMBER := 0;
  BEGIN
    IF g_events.COUNT > 0 THEN
      i := g_events.LAST;
    END IF;
    g_events(i+1).old_cnh_id	:= p_old_cnh_id;
    g_events(i+1).new_cnh_id	:= p_new_cnh_id;
  END add_events;

  FUNCTION get_new_cnh_id(	p_old_cnh_id IN NUMBER,
				p_new_cnh_id OUT NOCOPY NUMBER) RETURN BOOLEAN IS
    i 		NUMBER := 0;
  BEGIN
    IF g_events.COUNT > 0 THEN
      i := g_events.FIRST;
      LOOP
        IF g_events(i).old_cnh_id = p_old_cnh_id THEN
          p_new_cnh_id := g_events(i).new_cnh_id;
          RETURN TRUE;
        END IF;
        EXIT WHEN (i = g_events.LAST);
        i := g_events.NEXT(i);
      END LOOP;
      RETURN FALSE;
    END IF;
    RETURN FALSE;
  END get_new_cnh_id;

**************************/

/***************************************
  PROCEDURE add_price_adjustments(       p_old_pat_id IN NUMBER,
                        p_new_pat_id IN NUMBER) IS
    i           NUMBER := 0;
  BEGIN
    IF g_price_adjustments.COUNT > 0 THEN
      i := g_price_adjustments.LAST;
    END IF;
    g_price_adjustments(i+1).old_pat_id  := p_old_pat_id;
    g_price_adjustments(i+1).new_pat_id  := p_new_pat_id;
  END add_price_adjustments;

  FUNCTION get_new_pat_id(      p_old_pat_id IN NUMBER,
                                p_new_pat_id OUT NOCOPY NUMBER) RETURN BOOLEAN IS
    i           NUMBER := 0;
  BEGIN
    IF g_price_adjustments.COUNT > 0 THEN
      i := g_price_adjustments.FIRST;
      LOOP
        IF g_price_adjustments(i).old_pat_id = p_old_pat_id THEN
          p_new_pat_id := g_price_adjustments(i).new_pat_id;
          RETURN TRUE;
        END IF;
        EXIT WHEN (i = g_price_adjustments.LAST);
        i := g_price_adjustments.NEXT(i);
      END LOOP;
      RETURN FALSE;
    END IF;
    RETURN FALSE;
  END get_new_pat_id;
**************************************/

   ----------------------------------------------------------------------------
  --Logic to check the party has already copied.
  --If Yes give the new cpl_id ----Begins
  ----------------------------------------------------------------------------

  PROCEDURE add_party(  p_old_cpl_id IN NUMBER,
                        p_new_cpl_id IN NUMBER) IS
    i           NUMBER := 0;
  BEGIN
    IF g_party.COUNT > 0 THEN
      i := g_party.LAST;
    END IF;
    g_party(i+1).old_cpl_id     := p_old_cpl_id;
    g_party(i+1).new_cpl_id     := p_new_cpl_id;
  END add_party;

  FUNCTION get_new_cpl_id(      p_old_cpl_id IN NUMBER,
                                p_new_cpl_id OUT NOCOPY NUMBER) RETURN BOOLEAN IS
    i           NUMBER := 0;
  BEGIN
    IF g_party.COUNT > 0 THEN
      i := g_party.FIRST;
      LOOP
        IF g_party(i).old_cpl_id = p_old_cpl_id THEN
          p_new_cpl_id := g_party(i).new_cpl_id;
          RETURN TRUE;
        END IF;
        EXIT WHEN (i = g_party.LAST);
        i := g_party.NEXT(i);
      END LOOP;
      RETURN FALSE;
    END IF;
    RETURN FALSE;
  END get_new_cpl_id;

  ----------------------------------------------------------------------------
  --Logic to check the event has already copied.
  --If Yes give the new cnh_id ----Ends.
  ----------------------------------------------------------------------------
  ----------------------------------------------------------------------------
  --Function specs  to populate pl/sql record with database values begins
  ----------------------------------------------------------------------------
    FUNCTION    get_cimv_rec(p_cim_id IN NUMBER,
				x_cimv_rec OUT NOCOPY cimv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_cacv_rec(p_cac_id IN NUMBER,
				x_cacv_rec OUT NOCOPY cacv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_cplv_rec(p_cpl_id IN NUMBER,
                                x_cplv_rec OUT NOCOPY cplv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_cpsv_rec(p_cps_id IN NUMBER,
				x_cpsv_rec OUT NOCOPY cpsv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_cgcv_rec(p_cgc_id IN NUMBER,
				x_cgcv_rec OUT NOCOPY cgcv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_cnhv_rec(p_cnh_id IN NUMBER,
				x_cnhv_rec OUT NOCOPY cnhv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_cnlv_rec(p_cnl_id IN NUMBER,
				x_cnlv_rec OUT NOCOPY cnlv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_chrv_rec(p_chr_id IN NUMBER,
				x_chrv_rec OUT NOCOPY chrv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_ocev_rec(p_oce_id IN NUMBER,
				x_ocev_rec OUT NOCOPY ocev_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_oatv_rec(p_oat_id IN NUMBER,
				x_oatv_rec OUT NOCOPY oatv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_pavv_rec(p_pav_id IN NUMBER,
                                x_pavv_rec OUT NOCOPY pavv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_patv_rec(p_pat_id IN NUMBER,
                                x_patv_rec OUT NOCOPY patv_rec_type) RETURN  VARCHAR2;
    FUNCTION    get_ctcv_rec(p_ctc_id IN NUMBER,
                                x_ctcv_rec OUT NOCOPY ctcv_rec_type) RETURN  VARCHAR2;

  ----------------------------------------------------------------------------
  --Function specs  to populate pl/sql record with database values ends
  ----------------------------------------------------------------------------
  ----------------------------------------------------------------------------
  --Procedure  desides whether target contract is updateable or not
  ----------------------------------------------------------------------------

  FUNCTION is_copy_allowed(p_chr_id IN NUMBER,p_sts_code IN VARCHAR2 ) RETURN BOOLEAN IS
    l_count             NUMBER;
    l_dummy         VARCHAR2(1) := '?';
    l_template_yn       VARCHAR2(3);

    CURSOR c_template IS
    SELECT template_yn
    FROM okc_k_headers_b
    WHERE id = p_chr_id;

    CURSOR invalid_template IS
    SELECT '1'
    FROM okc_k_headers_b
    WHERE template_yn = 'Y'
        AND nvl(end_date, sysdate+1) >= trunc(sysdate)
        AND id = p_chr_id;
  BEGIN

    OPEN c_template;
    FETCH c_template INTO l_template_yn;
    CLOSE c_template;

    If l_template_yn = 'Y' Then
      OPEN invalid_template;
      FETCH invalid_template INTO l_dummy;
      CLOSE invalid_template;

      If l_dummy = '1' Then
           IF (l_debug = 'Y') THEN
           OKC_DEBUG.ReSet_Indentation;
           END IF;
           RETURN(TRUE);
      Else
           OKC_API.SET_MESSAGE('OKC', 'OKC_INVALID_TEMPLATE');
           IF (l_debug = 'Y') THEN
           OKC_DEBUG.ReSet_Indentation;
           END IF;
        RETURN(FALSE);
      End If;
    Else
         IF (l_debug = 'Y') THEN
         OKC_DEBUG.ReSet_Indentation;
         END IF;
         RETURN(TRUE);
    End If;


  END is_copy_allowed;
----------------------------------


  --------------------------------------------------------------------------
  --Proceudre copy_accesses - Makes a copy of the okc_k_accesses.
  --------------------------------------------------------------------------
  PROCEDURE copy_accesses(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_to_chr_id                    IN NUMBER) IS

    l_cacv_rec  cacv_rec_type;
    x_cacv_rec  cacv_rec_type;
    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

    CURSOR      c_access IS
    SELECT      id
    FROM        okc_k_accesses_v
    WHERE       chr_id = p_from_chr_id;

  BEGIN
    x_return_status := l_return_status;
    FOR l_c_access IN c_access LOOP
      l_return_status := get_cacv_rec(  p_cac_id        => l_c_access.id,
                                        x_cacv_rec      => l_cacv_rec);
      l_cacv_rec.chr_id := p_to_chr_id;

      OKC_CONTRACT_PUB.create_contract_access(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cacv_rec           => l_cacv_rec,
           x_cacv_rec           => x_cacv_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;
    END LOOP;

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_accesses;

  ----------------------------------------------------------------------------
  --Proceudre copy_processes - Makes a copy of the okc_k_processes.
  ----------------------------------------------------------------------------
  PROCEDURE copy_processes(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_to_chr_id                    IN NUMBER) IS

    l_cpsv_rec  cpsv_rec_type;
    x_cpsv_rec  cpsv_rec_type;
    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

    CURSOR      c_process IS
    SELECT      id
    FROM        okc_k_processes_v
    WHERE       chr_id = p_from_chr_id;

  BEGIN
    x_return_status := l_return_status;
    FOR l_c_process IN c_process LOOP
      l_return_status := get_cpsv_rec(  p_cps_id        => l_c_process.id,
                                        x_cpsv_rec      => l_cpsv_rec);
      l_cpsv_rec.chr_id := p_to_chr_id;
      l_cpsv_rec.process_id := NULL;

      OKC_CONTRACT_PUB.create_contract_process(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cpsv_rec           => l_cpsv_rec,
           x_cpsv_rec           => x_cpsv_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;
    END LOOP;

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_processes;

 ----------------------------------------------------------------------------
  --Proceudre copy_grpings - Makes a copy of the okc_k_grpings.
  ----------------------------------------------------------------------------
  PROCEDURE copy_grpings(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_to_chr_id                    IN NUMBER) IS

    l_cgcv_rec  cgcv_rec_type;
    x_cgcv_rec  cgcv_rec_type;
    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

    CURSOR      c_grpings IS
    SELECT      cgcv.id
    FROM             okc_k_grpings_v cgcv,
               okc_k_groups_b cgpv
    WHERE       cgcv.included_chr_id = p_from_chr_id
    AND        cgcv.cgp_parent_id = cgpv.id
    AND        (cgpv.public_yn = 'Y' OR cgpv.user_id = fnd_global.user_id);

  BEGIN
    x_return_status := l_return_status;
    FOR l_c_grpings IN c_grpings LOOP
      l_return_status := get_cgcv_rec(  p_cgc_id        => l_c_grpings.id,
                                        x_cgcv_rec      => l_cgcv_rec);
      l_cgcv_rec.included_chr_id := p_to_chr_id;

      OKC_CONTRACT_GROUP_PUB.create_contract_grpngs(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cgcv_rec           => l_cgcv_rec,
           x_cgcv_rec           => x_cgcv_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;
    END LOOP;

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_grpings;

/******
  ----------------------------------------------------------------------------
  --Proceudre copy_price_att_values - Makes a copy of the price attribute values.
  ----------------------------------------------------------------------------
  PROCEDURE copy_price_att_values(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_pav_id                       IN NUMBER,
    p_cle_id                       IN NUMBER ,
    p_chr_id                       IN NUMBER ,
    x_pav_id                       OUT NOCOPY NUMBER) IS

    l_pavv_rec  pavv_rec_type;
    x_pavv_rec  pavv_rec_type;

    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_cle_id                    NUMBER := OKC_API.G_MISS_NUM;

  BEGIN
    x_return_status := l_return_status;
    l_return_status := get_pavv_rec(    p_pav_id        => p_pav_id,
                                        x_pavv_rec      => l_pavv_rec);

    l_pavv_rec.chr_id := p_chr_id;
    l_pavv_rec.cle_id := p_cle_id;

    OKC_PRICE_ADJUSTMENT_PUB.create_price_att_value(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_pavv_rec           => l_pavv_rec,
           x_pavv_rec           => x_pavv_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;

    x_pav_id := x_pavv_rec.id; -- passes the new generated id to the caller.

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_price_att_values;

*****************************/

/*******************
  -------------------------------------------
--------copy price adjustments
------------------------------------
   PROCEDURE copy_price_adjustments(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_pat_id                       IN NUMBER,
    p_cle_id                       IN NUMBER ,
    p_chr_id                       IN NUMBER ,
    x_pat_id                       OUT NOCOPY NUMBER) IS

    l_patv_rec  patv_rec_type;
    x_patv_rec  patv_rec_type;

    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_cle_id                    NUMBER := OKC_API.G_MISS_NUM;

    l_new_pat_id  NUMBER;
  BEGIN
    x_return_status := l_return_status;
    l_return_status := get_patv_rec(    p_pat_id        => p_pat_id,
                                        x_patv_rec      => l_patv_rec);

    l_patv_rec.chr_id := p_chr_id;
    l_patv_rec.cle_id := p_cle_id;
    l_patv_rec.id := NULL;

   IF get_new_pat_id(l_patv_rec.pat_id,l_new_pat_id) THEN
        l_patv_rec.pat_id := l_new_pat_id;
   END IF;
    OKC_PRICE_ADJUSTMENT_PUB.create_price_adjustment(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_patv_rec           => l_patv_rec,
           x_patv_rec           => x_patv_rec);


           IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;

    x_pat_id := x_patv_rec.id; -- passes the new generated id to the caller.
   add_price_adjustments(p_pat_id,x_patv_rec.id);

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_price_adjustments;
************************************/
---------------------------------------------------------------------------------------------------

  ----------------------------------------------------------------------------
  --Function to populate the contract governance record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION get_gvev_rec(p_gve_id IN NUMBER,
				      x_gvev_rec OUT NOCOPY gvev_rec_type)
    RETURN  VARCHAR2 IS
      l_return_status VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_gvev_rec IS
      SELECT
	    DNZ_CHR_ID,
	    ISA_AGREEMENT_ID,
	    CHR_ID,
	    CLE_ID,
	    CHR_ID_REFERRED,
	    CLE_ID_REFERRED,
	    COPIED_ONLY_YN
	 FROM    OKC_GOVERNANCES
	 WHERE 	ID = p_gve_id;
    BEGIN
      OPEN c_gvev_rec;
      FETCH c_gvev_rec
      INTO x_gvev_rec.DNZ_CHR_ID,
		x_gvev_rec.ISA_AGREEMENT_ID,
		x_gvev_rec.CHR_ID,
		x_gvev_rec.CLE_ID,
		x_gvev_rec.CHR_ID_REFERRED,
		x_gvev_rec.CLE_ID_REFERRED,
		x_gvev_rec.COPIED_ONLY_YN;

      l_no_data_found := c_gvev_rec%NOTFOUND;
      CLOSE c_gvev_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_gvev_rec;

  --------------------------------------------------------------------------
  --Procedure copy_governances - Makes a copy of the okc_governances
  --------------------------------------------------------------------------
  PROCEDURE copy_governances(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_gvev_id                      IN NUMBER,
    p_cle_id                       IN NUMBER ,
    p_chr_id                       IN NUMBER ,
    x_gvev_id                      OUT NOCOPY NUMBER) IS


    l_gvev_rec  gvev_rec_type;
    x_gvev_rec  gvev_rec_type;

    l_return_status     VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

  BEGIN

    x_return_status := l_return_status;

    l_return_status := get_gvev_rec(p_gve_id   => p_gvev_id,
                                    x_gvev_rec => l_gvev_rec);

    IF p_cle_id IS NOT NULL AND p_cle_id <> OKC_API.G_MISS_NUM THEN
       --we are copying at line level so chr_id should be null
       l_gvev_rec.chr_id        :=   NULL;
    ELSE
       --we are copying at header level
       l_gvev_rec.chr_id        :=   p_chr_id;
    END IF;

    l_gvev_rec.dnz_chr_id    :=   p_chr_id;
    l_gvev_rec.cle_id        :=   p_cle_id;   --p_cle_id will be passed here as null if we are copying at header level


    OKC_CONTRACT_PUB.create_governance(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_gvev_rec           => l_gvev_rec,
           x_gvev_rec           => x_gvev_rec);

    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
            x_return_status := l_return_status;
        END IF;
    END IF;

    x_gvev_id := x_gvev_rec.id; -- passes the new generated id to the caller.

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_governances;

 ----------------------------------------------------------------------------
  --Proceudre copy_party_roles - Makes a copy of the party_roles.
  ----------------------------------------------------------------------------
  PROCEDURE copy_party_roles(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_cpl_id                       IN NUMBER,
    p_cle_id                       IN NUMBER ,
    p_chr_id                       IN NUMBER ,
    P_rle_code                     IN VARCHAR2,
    x_cpl_id                       OUT NOCOPY NUMBER) IS

    l_cplv_rec  cplv_rec_type;
    x_cplv_rec  cplv_rec_type;
    l_ctcv_rec  ctcv_rec_type;
    x_ctcv_rec  ctcv_rec_type;

    l_party_name                VARCHAR2(200);
    l_party_desc                VARCHAR2(2000);
    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_cle_id                    NUMBER := OKC_API.G_MISS_NUM;

    CURSOR c_dnz_chr_id(p_id IN NUMBER) IS
    SELECT dnz_chr_id
    FROM okc_k_lines_b
    WHERE id = p_id;

    CURSOR c_ctcv IS
    SELECT id
    FROM okc_contacts_v
    WHERE cpl_id = p_cpl_id;

  BEGIN
    x_return_status := l_return_status;
    l_return_status := get_cplv_rec(    p_cpl_id        => p_cpl_id,
                                        x_cplv_rec      => l_cplv_rec);

    IF p_chr_id IS NULL OR p_chr_id = OKC_API.G_MISS_NUM THEN
      OPEN c_dnz_chr_id(p_cle_id);
      FETCH c_dnz_chr_id INTO l_cplv_rec.dnz_chr_id;
      CLOSE c_dnz_chr_id;
    ELSE
      l_cplv_rec.dnz_chr_id := p_chr_id;
    END IF;

    l_cplv_rec.chr_id := p_chr_id;
    l_cplv_rec.cle_id := p_cle_id;
    IF p_rle_code IS NOT NULL THEN
      l_cplv_rec.rle_code := p_rle_code;
    END IF;

    OKC_CONTRACT_PARTY_PUB.create_k_party_role(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cplv_rec           => l_cplv_rec,
           x_cplv_rec           => x_cplv_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
      END IF;

    x_cpl_id := x_cplv_rec.id; -- passes the new generated id to the caller.

     --stores the new rul_id in a global pl/sql table.
     add_party(l_cplv_rec.id,x_cplv_rec.id);


    FOR l_c_ctcv IN c_ctcv LOOP
      l_return_status := get_ctcv_rec(  p_ctc_id        => l_c_ctcv.id,
                                        x_ctcv_rec      => l_ctcv_rec);

      l_ctcv_rec.dnz_chr_id := l_cplv_rec.dnz_chr_id;
      l_ctcv_rec.cpl_id := x_cplv_rec.id;

      OKC_CONTRACT_PARTY_PUB.create_contact(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_ctcv_rec           => l_ctcv_rec,
           x_ctcv_rec           => x_ctcv_rec);

     IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
          x_return_status := OKC_API.G_RET_STS_WARNING;
          okc_util.get_name_desc_from_jtfv( p_object_code  => x_cplv_rec.jtot_object1_code,
                                        p_id1          => x_cplv_rec.object1_id1,
                                        p_id2          => x_cplv_rec.object1_id2,
                                        x_name         => l_party_name,
                                        x_description  => l_party_desc);

          OKC_API.set_message(G_APP_NAME,'OKC_CONTACT_NOT_COPIED','PARTY_NAME',l_party_name);
        END IF;
      END IF;
    END LOOP;

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_party_roles;

/****************************
----------------------------------------------------------------------------
  --Proceudre copy_events - Makes a copy of the condition header and all condition lines under the header.
  ----------------------------------------------------------------------------
  PROCEDURE copy_events(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_cnh_id                       IN NUMBER,
    p_chr_id                       IN NUMBER ,
    p_to_template_yn               IN VARCHAR2,
    x_cnh_id                       OUT NOCOPY NUMBER) IS

    l_cnhv_rec  cnhv_rec_type;
    x_cnhv_rec  cnhv_rec_type;
    l_cnlv_rec  cnlv_rec_type;
    x_cnlv_rec  cnlv_rec_type;
    l_ocev_rec  ocev_rec_type;
    x_ocev_rec  ocev_rec_type;
    l_oatv_rec  oatv_rec_type;
    x_oatv_rec  oatv_rec_type;

    l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_cle_id                    NUMBER := OKC_API.G_MISS_NUM;
    l_new_cnh_id                NUMBER;

    CURSOR      c_cnlv IS
    SELECT      id
    FROM        okc_condition_lines_b
    WHERE       cnh_id = p_cnh_id;

    CURSOR      c_ocev IS
    SELECT      id
    FROM        okc_outcomes_b
    WHERE       cnh_id = p_cnh_id;

    CURSOR      c_oatv(p_oce_id IN NUMBER) IS
    SELECT      id
    FROM        okc_outcome_arguments_v
    WHERE       oce_id = p_oce_id;

  BEGIN
    x_return_status := l_return_status;
    IF get_new_cnh_id(p_cnh_id,l_new_cnh_id) THEN --If the events is already copied then return.
      x_cnh_id := l_new_cnh_id;
      RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;
    l_return_status := get_cnhv_rec(    p_cnh_id        => p_cnh_id,
                                        x_cnhv_rec      => l_cnhv_rec);

    l_cnhv_rec.dnz_chr_id := p_chr_id;
    l_cnhv_rec.object_id  := p_chr_id;
    l_cnhv_rec.jtot_object_code  := 'OKC_K_HEADER';
    IF p_to_template_yn = 'Y' THEN
      l_cnhv_rec.template_yn := 'Y';
    ELSIF p_to_template_yn = 'N' THEN
      l_cnhv_rec.template_yn := 'N';
    END IF;
    If (l_cnhv_rec.date_active < g_chrv_rec.start_date OR
           l_cnhv_rec.date_active > g_chrv_rec.end_date)
    Then
        l_cnhv_rec.date_active := g_chrv_rec.start_date;
    End If;
    If (l_cnhv_rec.date_inactive > g_chrv_rec.end_date OR
           l_cnhv_rec.date_inactive < g_chrv_rec.start_date)
    Then
        l_cnhv_rec.date_inactive := g_chrv_rec.end_date;
    End If;

    OKC_CONDITIONS_PUB.create_cond_hdrs(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cnhv_rec           => l_cnhv_rec,
           x_cnhv_rec           => x_cnhv_rec);


      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := OKC_API.G_RET_STS_WARNING;
             IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
               FND_LOG.string(FND_LOG.level_statement
                        ,'OKS.plsql.OKS_COPY_CONTRACT_PVT.copy_events'
                        ,'After call to OKC_CONDITIONS_PUB.create_cond_hdrs'
                         ||' x_return_status:'||l_return_status
                         ||' x_err_msg='||fnd_msg_pub.get(p_encoded=>'F')
                         );
             END IF;



          OKC_API.set_message(G_APP_NAME,'OKC_CONDITION_NOT_COPIED','CONDITION',l_cnhv_rec.name);
          RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
      END IF;

    x_cnh_id := x_cnhv_rec.id; -- passes the new generated id to the caller.

    FOR l_c_cnlv IN c_cnlv LOOP
      l_return_status := get_cnlv_rec(  p_cnl_id        => l_c_cnlv.id,
                                        x_cnlv_rec      => l_cnlv_rec);

      l_cnlv_rec.dnz_chr_id := l_cnhv_rec.dnz_chr_id;
      l_cnlv_rec.cnh_id := x_cnhv_rec.id;

      OKC_CONDITIONS_PUB.create_cond_lines(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cnlv_rec           => l_cnlv_rec,
           x_cnlv_rec           => x_cnlv_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;
    END LOOP;

   FOR l_c_ocev IN c_ocev LOOP
      l_return_status := get_ocev_rec(  p_oce_id        => l_c_ocev.id,
                                        x_ocev_rec      => l_ocev_rec);

      l_ocev_rec.dnz_chr_id := l_cnhv_rec.dnz_chr_id;
      l_ocev_rec.cnh_id := x_cnhv_rec.id;

      OKC_OUTCOME_PUB.create_outcome(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_ocev_rec           => l_ocev_rec,
           x_ocev_rec           => x_ocev_rec);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;

      FOR l_c_oatv IN c_oatv(l_ocev_rec.id) LOOP
        l_return_status := get_oatv_rec(        p_oat_id        => l_c_oatv.id,
                                        x_oatv_rec      => l_oatv_rec);

        l_oatv_rec.dnz_chr_id := l_cnhv_rec.dnz_chr_id;
        l_oatv_rec.oce_id := x_ocev_rec.id;

        OKC_OUTCOME_PUB.create_out_arg(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_oatv_rec           => l_oatv_rec,
           x_oatv_rec           => x_oatv_rec);

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
          ELSE
             x_return_status := l_return_status;
          END IF;
        END IF;
      END LOOP;

    END LOOP;

    add_events(p_cnh_id,x_cnhv_rec.id); --adds the new event id in the global PL/SQL table.

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_events;
***************************/
  ----------------------------------------------------------------------------
  --
  -- Procedure to set attachement session variables if they are null
  -- Currently set only set for OKCAUDET and OKSAUDET
  --
  -- If want to get rid of this hard coding, COPY should add
  -- parameters and user should pass attachement_funtion_name
  -- and attachment_funtion_type
  --
  PROCEDURE Set_Attach_Session_Vars(p_chr_id NUMBER) IS
    l_app_id NUMBER;
    Cursor l_chr_csr Is
	      SELECT application_id
	      FROM okc_k_headers_b
	      WHERE id = p_chr_id;
  BEGIN
    If (p_chr_id IS NOT NULL AND
	   FND_ATTACHMENT_UTIL_PKG.function_name IS NULL
	  )
    Then
      open l_chr_csr;
      fetch l_chr_csr into l_app_id;
      close l_chr_csr;

       -- Added for Bug 2384423
      If (l_app_id = 515) Then
	    FND_ATTACHMENT_UTIL_PKG.function_name := 'OKSAUDET';
	    FND_ATTACHMENT_UTIL_PKG.function_type := 'O';
      Else
	    FND_ATTACHMENT_UTIL_PKG.function_name := 'OKCAUDET';
	    FND_ATTACHMENT_UTIL_PKG.function_type := 'O';
      End If;

    End If;
  END;

  ----------------------------------------------------------------------------
  -- Function to return the major version of the contract
  -- Major version is required to while copying attachments for
  -- header and line
  ----------------------------------------------------------------------------
  FUNCTION Get_Major_Version(p_chr_id NUMBER) RETURN VARCHAR2 IS

    CURSOR l_cvm_csr IS
    SELECT to_char(major_version)
    FROM okc_k_vers_numbers
    WHERE chr_id = p_chr_id;

    x_from_version  FND_ATTACHED_DOCUMENTS.PK2_VALUE%TYPE := NULL;

  BEGIN
    open l_cvm_csr;
    fetch l_cvm_csr into x_from_version;
    close l_cvm_csr;

    return x_from_version;
  EXCEPTION
    WHEN OTHERS THEN
         OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
	    return FND_API.G_RET_STS_UNEXP_ERROR;

  END Get_Major_Version;

  PROCEDURE get_priced_line_rec(p_api_version    IN NUMBER
  						,p_init_msg_list   IN VARCHAR2
						,x_msg_count       OUT NOCOPY NUMBER
						,x_msg_data        OUT NOCOPY VARCHAR2
  						,p_clev_rec  IN clev_rec_type
                              ,x_clev_rec  OUT NOCOPY clev_rec_type) IS
      l_priced_yn VARCHAR2(3);
      l_cim_id    NUMBER;
      l_lty_code  VARCHAR2(90);
      l_clev_rec  clev_rec_type := p_clev_rec;
      l_cimv_rec 	cimv_rec_type;

      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

      CURSOR c_lse(p_id IN NUMBER) IS
      SELECT lty_code,
             priced_yn
      FROM   okc_line_styles_b
      WHERE  id = p_id;

      CURSOR c_cim(p_cle_id IN NUMBER) IS
      SELECT id
      FROM   okc_k_items_v
      WHERE  cle_id = p_cle_id
      AND    priced_item_yn = 'Y';

    BEGIN
      OPEN c_lse(l_clev_rec.lse_id);
      FETCH c_lse INTO l_lty_code,l_priced_yn;
      CLOSE c_lse;

      IF l_clev_rec.price_level_ind = 'N' THEN
        IF l_priced_yn = 'N' THEN
          l_clev_rec.price_negotiated := NULL;
        ELSE
          l_clev_rec.price_negotiated := NULL;
          IF l_lty_code <> 'FREE_FORM' THEN
            l_clev_rec.name := NULL;
          END IF;
        END IF;
      ELSE
        IF l_priced_yn = 'N' THEN
          l_clev_rec.price_negotiated := NULL;
          l_clev_rec.PRICE_UNIT := NULL;
          IF l_lty_code <> 'FREE_FORM' THEN
            l_clev_rec.name := NULL;
          END IF;
        ELSE
          OPEN c_cim(l_clev_rec.id);
          FETCH c_cim INTO l_cim_id;
          CLOSE c_cim;

          IF l_cim_id IS NOT NULL THEN
            l_return_status := get_cimv_rec(	p_cim_id 	=> l_cim_id,
    					x_cimv_rec 	=> l_cimv_rec);
            OKC_CONTRACT_ITEM_PUB.validate_contract_item(
      	          p_api_version	=> p_api_version,
                 p_init_msg_list	=> p_init_msg_list,
                 x_return_status 	=> l_return_status,
                 x_msg_count     	=> x_msg_count,
                 x_msg_data      	=> x_msg_data,
                 p_cimv_rec		=> l_cimv_rec);

             IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
               l_clev_rec.price_negotiated := NULL;
               l_clev_rec.PRICE_UNIT := NULL;
               l_clev_rec.name := NULL;
             END IF;
           END IF;
         END IF;
      END IF;
      x_clev_rec := l_clev_rec;
    exception when others then
      x_clev_rec := l_clev_rec;
    END get_priced_line_rec;

    PROCEDURE instantiate_counters_events (
         p_api_version    IN NUMBER,
         p_init_msg_list  IN VARCHAR2 ,
         x_return_status  OUT NOCOPY VARCHAR2,
         x_msg_count      OUT NOCOPY NUMBER,
         x_msg_data       OUT NOCOPY VARCHAR2,
         p_old_cle_id     IN  NUMBER,
         p_old_lse_id     IN  NUMBER,
         p_start_date     IN  DATE,
         p_end_date       IN  DATE,
         p_new_cle_id     IN  NUMBER,
         --npalepu added on 20-mar-2006 for bug # 5102052
         p_new_chr_id     IN  NUMBER
         ---end npalepu
         ) IS

      l_item_id             VARCHAR2(40);
      l_counter_grp_id	   NUMBER;
      l_found               BOOLEAN;
      l_return_status	   VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_ctr_grp_id_template NUMBER;
      l_ctr_grp_id_instance NUMBER;
      l_instcnd_inp_rec     OKC_INST_CND_PUB.instcnd_inp_rec;
      l_ac_rec OKS_COVERAGES_PUB.ac_rec_type;
      l_actual_coverage_id NUMBER;

      CURSOR c_item IS
      SELECT object1_id1
      FROM   okc_k_items
      WHERE  cle_id = p_old_cle_id;

      Cursor l_ctr_csr (p_id Number) Is
	 Select Counter_Group_id
	 From   CS_CTR_ASSOCIATIONS --OKX_CTR_ASSOCIATIONS_V
	 Where  Source_Object_Id = p_id;

    BEGIN
      x_return_status := l_return_status;

      OPEN c_item;
      FETCH c_item INTO l_item_id;
      CLOSE c_item;

      IF l_item_id IS NOT NULL AND Is_Number(l_item_id) THEN

	    -- Check whether counters are attached to the item
	    OPEN l_ctr_csr(l_item_id);
	    FETCH l_ctr_csr INTO l_counter_grp_id;
         l_found := l_ctr_csr%FOUND;
	    CLOSE l_ctr_csr;

        If (l_found) Then
		   CS_COUNTERS_PUB.AUTOINSTANTIATE_COUNTERS(
			 p_api_version               => p_api_version,
			 p_init_msg_list             => p_init_msg_list,
			 x_return_status             => l_return_status,
			 x_msg_count                 => x_msg_count,
			 x_msg_data             	    => x_msg_data,
			 p_commit                    => 'F',
			 p_source_object_id_template => l_item_id, --474 from c_item for old line
			 p_source_object_id_instance => p_new_cle_id,--new line id
			 x_ctr_grp_id_template       => l_ctr_grp_id_template,
			 x_ctr_grp_id_instance       => l_ctr_grp_id_instance);

    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      FND_LOG.string(FND_LOG.level_statement
                        ,'OKS.plsql.OKS_COPY_CONTRACT_PVT.instantiate_counters'
                        ,'After call to CS_COUNTERS_PUB.AUTOINSTANTIATE_COUNTERS'
		       ||'p_new_cle_id='||p_new_cle_id
                       ||'x_ctr_grp_id_template='||l_ctr_grp_id_template
                       ||'x_ctr_grp_id_instance='||l_ctr_grp_id_instance
                         );
    END IF;


		   IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
			x_return_status := l_return_status;
			RAISE G_EXCEPTION_HALT_VALIDATION;
		   END IF;

		   l_instcnd_inp_rec.ins_ctr_grp_id   := l_ctr_grp_id_instance;
		   l_instcnd_inp_rec.tmp_ctr_grp_id   := l_ctr_grp_id_template;
		   l_instcnd_inp_rec.jtot_object_code := 'OKC_K_LINE';
		   l_instcnd_inp_rec.cle_id           := p_new_cle_id;
		   l_instcnd_inp_rec.inv_item_id      := l_item_id;
                   --npalepu added on 20-mar-2006 for bug # 5102052
                   l_instcnd_inp_rec.chr_id           := p_new_chr_id;
                   --end npalepu

		   OKC_INST_CND_PUB.INST_CONDITION(
			 p_api_version               => p_api_version,
			 p_init_msg_list             => p_init_msg_list,
			 x_return_status             => l_return_status,
			 x_msg_count                 => x_msg_count,
			 x_msg_data             	    => x_msg_data,
			 p_instcnd_inp_rec           => l_instcnd_inp_rec);

		   IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
			x_return_status := l_return_status;
			RAISE G_EXCEPTION_HALT_VALIDATION;
		   END IF;
          End If;
      END IF;

    EXCEPTION
      WHEN G_EXCEPTION_HALT_VALIDATION THEN
        NULL;
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    END instantiate_counters_events;

    FUNCTION get_parent_date(p_from_start_date IN DATE,
                             p_from_end_date   IN DATE,
                             p_to_cle_id       IN NUMBER,
                             p_to_chr_id       IN NUMBER,
                             x_start_date      OUT NOCOPY DATE,
                             x_end_date        OUT NOCOPY DATE) RETURN BOOLEAN IS

      l_parent_start_date      DATE;
      l_parent_end_date        DATE;

	 CURSOR  c_cle IS
      SELECT  start_date,end_date
      FROM    okc_k_lines_b
      WHERE   id = p_to_cle_id;

	 CURSOR  c_chr IS
      SELECT  start_date,end_date
      FROM    okc_k_headers_b
      WHERE   id = p_to_chr_id;

    BEGIN
      IF (p_to_chr_id IS NULL OR p_to_chr_id = OKC_API.G_MISS_NUM) THEN
        OPEN c_cle;
        FETCH c_cle INTO l_parent_start_date,l_parent_end_date;
        CLOSE c_cle;
        IF (NVL(p_from_start_date,sysdate)
           BETWEEN NVL(l_parent_start_date,sysdate) AND NVL(l_parent_end_date,sysdate)) AND
           (NVL(p_from_end_date,sysdate)
           BETWEEN NVL(l_parent_start_date,sysdate) AND NVL(l_parent_end_date,sysdate)) THEN
           RETURN(TRUE);
        ELSE
           x_start_date := l_parent_start_date;
           x_end_date := l_parent_end_date;
           RETURN(FALSE);
        END IF;
      ELSE
        OPEN c_chr;
        FETCH c_chr INTO l_parent_start_date,l_parent_end_date;
        CLOSE c_chr;
        IF (NVL(p_from_start_date,sysdate)
           BETWEEN NVL(l_parent_start_date,sysdate) AND NVL(l_parent_end_date,sysdate)) AND
           (NVL(p_from_end_date,sysdate)
           BETWEEN NVL(l_parent_start_date,sysdate) AND NVL(l_parent_end_date,sysdate)) THEN
           RETURN(TRUE);
        ELSE
           x_start_date := l_parent_start_date;
           x_end_date := l_parent_end_date;
           RETURN(FALSE);
       END IF;
     END IF;
     RETURN(TRUE);
    END get_parent_date;

  ----------------------------------------------------------------------------
----------------------------------------------------------------------------
  -- Proceduere to create operation instance and operation lines for
  -- contract header in case of RENEW
  -- Parameters: p_chrv_rec    - in header record for object_chr_id and scs_code
  --             p_to_chr_id   - subject_chr_id
----------------------------------------------------------------------------
  PROCEDURE Create_Renewal_Header_Link (
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_chrv_rec                     IN OKC_CONTRACT_PUB.chrv_rec_type,
    p_to_chr_id                    IN NUMBER)
  IS
    -- Cursor to get class operation id
    Cursor cop_csr Is
		 SELECT id
		 FROM okc_class_operations
		 WHERE cls_code = ( SELECT cls_code
						FROM okc_subclasses_b
						WHERE code = p_chrv_rec.scs_code )
           AND opn_code = 'RENEWAL';

    l_cop_id        NUMBER;
    l_oiev_rec      OKC_OPER_INST_PUB.oiev_rec_type;
    lx_oiev_rec     OKC_OPER_INST_PUB.oiev_rec_type;
    l_olev_rec      OKC_OPER_INST_PUB.olev_rec_type;
    lx_olev_rec     OKC_OPER_INST_PUB.olev_rec_type;
    l_count         NUMBER := 0;
  BEGIN
    -- get class operation id
    open cop_csr;
    fetch cop_csr into l_cop_id;
    close cop_csr;

    l_oiev_rec.cop_id := l_cop_id;
    l_oiev_rec.target_chr_id := p_to_chr_id;
    --l_oiev_rec.status_code := 'ENTERED';
    l_oiev_rec.status_code := 'PROCESSED';

    OKC_OPER_INST_PUB.Create_Operation_Instance (
	 p_api_version		=> p_api_version,
	 p_init_msg_list	=> p_init_msg_list,
      x_return_status 	=> x_return_status,
      x_msg_count     	=> x_msg_count,
      x_msg_data      	=> x_msg_data,
      p_oiev_rec		=> l_oiev_rec,
      x_oiev_rec		=> lx_oiev_rec);

   If (x_return_status = FND_API.G_RET_STS_SUCCESS) Then
       l_olev_rec.SELECT_YN      := NULL;
       l_olev_rec.ACTIVE_YN      := 'Y';
       l_olev_rec.PROCESS_FLAG   := 'P';
	  l_olev_rec.OIE_ID         := lx_oiev_rec.id;
	  l_olev_rec.SUBJECT_CHR_ID := p_to_chr_id;
	  l_olev_rec.OBJECT_CHR_ID  := p_chrv_rec.id;

       OKC_OPER_INST_PUB.Create_Operation_Line (
	       p_api_version	=> p_api_version,
	       p_init_msg_list	=> p_init_msg_list,
            x_return_status 	=> x_return_status,
            x_msg_count     	=> x_msg_count,
            x_msg_data      	=> x_msg_data,
            p_olev_rec		=> l_olev_rec,
            x_olev_rec		=> lx_olev_rec);
	  If (x_return_status = FND_API.G_RET_STS_SUCCESS) Then
           -- set g_op_lines table
           l_count := g_op_lines.COUNT + 1;
           g_op_lines(l_count).id     := p_chrv_rec.ID;
           g_op_lines(l_count).ole_id := lx_olev_rec.ID;
       End if;
   End If;

  EXCEPTION
    when NO_DATA_FOUND then
	  -- store SQL error message on message stack
	  x_return_status := FND_API.G_RET_STS_ERROR;
  	  OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					  p_msg_name		=> 'OKC_NOT_FOUND',
					  p_token1		=> 'VALUE1',
					  p_token1_value	=> 'Status Code',
					  p_token2		=> 'VALUE2',
					  p_token2_value	=> 'OKC_CLASS_OPERATIONS_V');
    when OTHERS then
	  -- store SQL error message on message stack
  	  OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					  p_msg_name		=> g_unexpected_error,
					  p_token1		=> g_sqlcode_token,
					  p_token1_value	=> sqlcode,
					  p_token2		=> g_sqlerrm_token,
					  p_token2_value	=> sqlerrm);
	   -- notify caller of an error as UNEXPECTED error
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
  END Create_Renewal_Header_Link;

  ----------------------------------------------------------------------------
  --Proceudre copy_contract_header
  ----------------------------------------------------------------------------
  PROCEDURE copy_contract_header(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_contract_number		   IN VARCHAR2,
    p_contract_number_modifier     IN VARCHAR2,
    p_to_template_yn     	   IN VARCHAR2,
    p_renew_ref_yn                 IN VARCHAR2,
    x_to_chr_id		           OUT NOCOPY NUMBER) IS

    l_api_name        CONSTANT VARCHAR2(30) := 'COPY_CONTRACT_HEADER';
    l_module_name     VARCHAR2(256) := G_APP_NAME ||'.plsql.' || G_PKG_NAME || '.' || l_api_name;


    l_chrv_rec 	chrv_rec_type;
    x_chrv_rec 	chrv_rec_type;

    l_pat_id        NUMBER;
    l_pav_id        NUMBER;
    l_pac_id        NUMBER;
    l_paa_id        NUMBER;
    l_sts_code      VARCHAR2(30);
    l_status_type   VARCHAR2(30) := 'ENTERED';
    l_orig_system_source_code   VARCHAR2(30) := 'OKC_HDR';
    l_return_status	VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_from_version  FND_ATTACHED_DOCUMENTS.PK2_VALUE%TYPE;

    l_euro_currency          varchar2(15) := NULL; /* For Euro Conversion - Bug 2155930 */
    l_converted_amount       number := NULL; /* For Euro Conversion - Bug 2155930 */

    l_scrv_id       NUMBER;
    l_history_id    NUMBER;

    l_gvev_id       NUMBER;
    l_entity_name     VARCHAR2(30);
    l_from_entity_name VARCHAR2(30);
    l_to_entity_name   VARCHAR2(30);
    --variables created for bug 8361496
    l_conversion_rate  NUMBER;
    l_euro_rate     NUMBER;
    l_from_currency VARCHAR2(50);
    l_to_currency VARCHAR2(50);

    CURSOR c_pavv IS
    SELECT id
    FROM okc_price_att_values_V
    WHERE chr_id = p_from_chr_id;

    CURSOR c_patv IS
    SELECT id
    FROM okc_price_adjustments_V
    WHERE chr_id = p_from_chr_id
    AND  cle_id IS NULL; -- Added for Bug 2027165

    -- cursor for goverances
    CURSOR  c_governances IS
    SELECT  id
    FROM    okc_governances_v
    WHERE   dnz_chr_id = p_from_chr_id
    AND	    cle_id is null;
------------------------------------------
-- Cursor for status change history
   CURSOR history_csr(p_chr_id NUMBER) IS
   SELECT id
   FROM okc_k_history_b
   WHERE TO_CHAR(CREATION_DATE, 'DD-MON-YYYY HH:MI:SS') =
       (SELECT MAX(TO_CHAR(CREATION_DATE, 'DD-MON-YYYY HH:MI:SS'))
        FROM OKC_K_HISTORY_B
        WHERE CHR_ID = p_chr_id)
   AND CHR_ID = p_chr_id;


  BEGIN

    x_return_status := l_return_status;
    l_return_status := get_chrv_rec(	p_chr_id 	=> p_from_chr_id,
					x_chrv_rec 	=> l_chrv_rec);

     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.get_chrv_rec'
                        ,'Contract ID='||l_chrv_rec.ID||', Contract Number='||l_chrv_rec.contract_number
                         );
     END IF;

    /* The following logic of setting the context has been moved here from below becasue of the requirement of Euro Conversion - Bug 2155930 */
    -- Sets the context.
      okc_context.set_okc_org_context(l_chrv_rec.authoring_org_id,l_chrv_rec.inv_organization_id);
    --END IF;

    IF l_chrv_rec.authoring_org_id <> okc_context.get_okc_org_id OR
       l_chrv_rec.inv_organization_id <> okc_context.get_okc_organization_id THEN
      OKC_API.SET_MESSAGE('OKC','OKC_INCOMPATIBLE_ORG');
      x_return_status := OKC_API.G_RET_STS_ERROR;
      RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

   --moving the initialization of g_application_id up for Bug 3693912
   --  g_application_id := l_chrv_rec.application_id;


    /* Fixing Renewal for Euro Conversion - at Header Level - Bug 2155930 */
    if (p_renew_ref_yn = 'Y') then

       l_euro_currency := OKC_CURRENCY_API.GET_EURO_CURRENCY_CODE(l_chrv_rec.currency_code);

       if (l_euro_currency <> l_chrv_rec.currency_code) then
             If l_chrv_rec.application_id in (510,871) Then
               select CONVERSION_TYPE, CONVERSION_RATE, CONVERSION_DATE
               into   g_conversion_type, g_conversion_rate, g_conversion_date
               from   okc_conversion_attribs_v
               where  DNZ_CHR_ID = l_chrv_rec.id
               and    chr_id = l_chrv_rec.id;
             Else
            -- /Rules migration/
            --FOr other contracts classes, conversion data is now stored at the header level
             select CONVERSION_TYPE, CONVERSION_RATE, CONVERSION_rate_DATE
             into   g_conversion_type, g_conversion_rate, g_conversion_date
             from okc_k_headers_b
             where id = l_chrv_rec.id;
             End If;

           fnd_profile.get('OKC_EURO_DEFAULT_PRICELIST', g_pricelist);

           if (g_pricelist is NULL) then
              fnd_message.set_name('OKC','OKC_PROFILE_CHECK');
              fnd_message.set_token('PROFILE','OKC_EURO_DEFAULT_PRICELIST');
              FND_MSG_PUB.add;
              x_return_status := FND_API.G_RET_STS_ERROR;
              RAISE G_EXCEPTION_HALT_VALIDATION;
           end if;

   --/Rule Migration/
   --Update price list on the header instead of price rule
           If l_chrv_rec.application_id not in (510,871) Then
              l_chrv_rec.price_list_id := g_pricelist;
           End If;


           OKC_CURRENCY_API.CONVERT_AMOUNT
                         (p_FROM_CURRENCY => l_chrv_rec.currency_code,
                          p_TO_CURRENCY => l_euro_currency,
                          p_CONVERSION_DATE => g_conversion_date,
                          p_CONVERSION_TYPE => g_conversion_type,
                          p_AMOUNT => l_chrv_rec.estimated_amount,
                          x_CONVERSION_RATE => g_conversion_rate,
                          x_CONVERTED_AMOUNT => l_converted_amount
                         );
           l_chrv_rec.estimated_amount := l_converted_amount;
           l_chrv_rec.currency_code := l_euro_currency;

       end if;
    end if;

    l_chrv_rec.chr_id_response    		:= NULL;
    l_chrv_rec.chr_id_award       		:= NULL;
    l_chrv_rec.archived_yn        		:= 'N';
    l_chrv_rec.deleted_yn         		:= 'N';

    okc_assent_pub.get_default_status( x_return_status => l_return_status,
							    p_status_type  => l_status_type,
							    x_status_code  => l_sts_code);
    l_chrv_rec.sts_code                         := l_sts_code;
    l_chrv_rec.date_approved    		:= NULL;
    l_chrv_rec.datetime_cancelled    		:= NULL;
    l_chrv_rec.date_issued	    		:= NULL;
    l_chrv_rec.datetime_responded    		:= NULL;
    l_chrv_rec.non_response_reason    		:= NULL;
    l_chrv_rec.non_response_explain    		:= NULL;
    l_chrv_rec.rfp_type		    		:= NULL;
    l_chrv_rec.set_aside_reason    		:= NULL;
    l_chrv_rec.set_aside_percent    		:= NULL;
    l_chrv_rec.response_copies_req    		:= NULL;
    l_chrv_rec.date_close_projected    		:= NULL;
    l_chrv_rec.datetime_proposed    		:= NULL;
    l_chrv_rec.date_signed	    		:= NULL;
    l_chrv_rec.date_terminated    		:= NULL;
    -- Bug 1975070 - Date Approved should be Null after Copy
    l_chrv_rec.date_approved    		:= NULL;
    -- Bug 1975070
    l_chrv_rec.date_renewed	    		:= NULL;
    l_chrv_rec.trn_code    			:= NULL;
    l_chrv_rec.orig_system_source_code          := l_orig_system_source_code;
    l_chrv_rec.orig_system_id1 			:= p_from_chr_id;
    l_chrv_rec.orig_system_reference1           := NULL;
    l_chrv_rec.term_cancel_source 		:= NULL; -- Bug 4641561

    IF p_to_template_yn = 'Y' THEN
      IF l_chrv_rec.template_yn = 'N' THEN
        l_chrv_rec.template_yn := 'Y';
        l_chrv_rec.template_used := NULL;
      END IF;
    ELSIF p_to_template_yn = 'N' THEN
      IF l_chrv_rec.template_yn = 'Y' THEN
        l_chrv_rec.template_yn := 'N';
        l_chrv_rec.template_used := l_chrv_rec.contract_number;
      END IF;
    END IF;

    -- this needs to be assigned after the template used is assigned from the old contract number
    l_chrv_rec.contract_number			:= p_contract_number;
    l_chrv_rec.contract_number_modifier		:= p_contract_number_modifier;

    IF p_renew_ref_yn = 'Y' THEN
	  l_chrv_rec.ESTIMATED_AMOUNT_RENEWED := l_chrv_rec.ESTIMATED_AMOUNT;
	  l_chrv_rec.CURRENCY_CODE_RENEWED    := l_chrv_rec.CURRENCY_CODE;
    END IF;
    --l_chrv_rec.estimated_amount		:= NULL;
    -- Bug 2069569 When Copy called from renew donot nullify estimated amount
    --             Otherwise nullify estimated amount
-- Bug 2836000 start  commented out as copy api should copy header amoutn as well in all the cases
/*
    IF p_renew_ref_yn <> 'Y'  THEN
       l_chrv_rec.estimated_amount		:= NULL;
    END IF;
*/
-- Bug 2836000 end  commented out as copy api should copy header amoutn as well in all the cases
    -- Bug 2027165 - Added user_estimated amount as this is new column
    l_chrv_rec.user_estimated_amount	:= NULL;

     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.okc_contract_pub.create_contract_header'
                        ,'Before call to okc_contract_pub.create_contract_header:'
                         ||'l_Chrv_rec.ID='||l_chrv_rec.id
                         );
      END IF;
     END IF;

     /*cgopinee bugfix for 8361496*/
     IF p_renew_ref_yn = 'Y' then
       IF ((l_chrv_rec.conversion_type is not null)  and (upper(l_chrv_rec.conversion_type) <>'USER')) THEN
         IF FND_PROFILE.VALUE('OKS_CURR_CONV_DATE')='SYSDATE' then
            l_from_currency :=l_chrv_rec.currency_code;
            l_to_currency := OKC_CURRENCY_API.GET_OU_CURRENCY(l_chrv_rec.authoring_org_id);
            l_chrv_rec.conversion_rate_date := SYSDATE;
            okc_currency_api.get_rate
	               (P_FROM_CURRENCY => l_from_currency,
	                P_TO_CURRENCY  => l_to_currency,
	                P_CONVERSION_DATE => SYSDATE,
	                P_CONVERSION_TYPE => l_chrv_rec.conversion_type,
	                X_CONVERSION_RATE => l_conversion_rate,
	                X_EURO_RATE    => l_euro_rate ,
	                X_return_status => l_return_status);

             IF (l_return_status = FND_API.G_RET_STS_SUCCESS) THEN
	       l_chrv_rec.conversion_rate := l_conversion_rate;
	     ELSE
	       l_chrv_rec.conversion_rate := NULL;
             END IF;

        END IF;--END PROFILE
      END IF;--END CONVERSION TYPE
    END IF;
    /*The profile value is not checked for 'CONTRACT'since the current logic by default copies it from old contract*/

    /* end of bugfix for 8361496*/


    OKC_CONTRACT_PUB.create_contract_header(
	   p_api_version	     => p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_chrv_rec		=> l_chrv_rec,
           x_chrv_rec		=> x_chrv_rec);


     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.okc_contract_pub.create_contract_header'
                        ,'After call to okc_contract_pub.create_contract_header: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
      END IF;
     END IF;

    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        x_return_status := l_return_status;
        RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

    g_chrv_rec := x_chrv_rec;
    x_to_chr_id := x_chrv_rec.id; -- passes the new generated id to the caller.

    IF p_renew_ref_yn = 'Y' THEN
       --if the copy is for RENEW, create operation instance and operation lines
       Create_Renewal_Header_Link(
	      p_api_version	     => p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_chrv_rec		=> l_chrv_rec,
           p_to_chr_id		=> x_to_chr_id);
       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.create_renewal_header_link'
                        ,'After call to Create_Renewal_Header_Link: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
         END IF;
        END IF;
           x_return_status := l_return_status;
           RAISE G_EXCEPTION_HALT_VALIDATION;
       END IF;

    END IF;
/* 27-Apr-2006 hkamdar Commented code for copy attachment for bug #5173429.
    -- copy associated attachments
    l_from_version := Get_Major_Version(p_from_chr_id);

    IF (l_from_version = FND_API.G_RET_STS_UNEXP_ERROR) THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

    -- set attachement session variables
    -- before calling fnd_attachment_util_pkg.get_atchmt_exists
    Set_Attach_Session_Vars(p_from_chr_id);

     l_entity_name := 'OKC_K_HEADERS_V';
     l_from_entity_name := 'OKC_K_HEADERS_V';
     l_to_entity_name := 'OKC_K_HEADERS_V';

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        FND_LOG.string(FND_LOG.level_statement
         ,l_module_name||'.fnd_attachment_util_pkg.get_atchmt_exists'
         ,'Before call to fnd_attachment_util_pkg.get_atchmt_exists'
        	||' l_entity_name='||l_entity_name
        	||',l_pkey1='||p_from_chr_id
        	||',l_peky2='||l_from_version
		||',x_to_chr_id='||x_to_chr_id
		||',12_function_type='||FND_ATTACHMENT_UTIL_PKG.function_type
		||',12_function_name='||FND_ATTACHMENT_UTIL_PKG.function_name
          );
       END IF;
    If (fnd_attachment_util_pkg.get_atchmt_exists (
			  l_entity_name => l_entity_name,
			  l_pkey1 => p_from_chr_id
			  --l_pkey2 => l_from_version
			  ) = 'Y') then

			  -- The following line to be added to the code once
			  -- bug 1553916 completes
			  -- ,l_pkey2 => l_from_version) = 'Y')
			  -- also below remove the comments
			  -- in fnd_attached_documents2_pkg.copy_attachments call
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        FND_LOG.string(FND_LOG.level_statement
         ,l_module_name
         ,'After call to fnd_attachment_util_pkg.get_atchmt_exists'
          );
       END IF;

      Begin
        fnd_attached_documents2_pkg.copy_attachments(
                          x_from_entity_name => l_from_entity_name,
                          x_from_pk1_value   => p_from_chr_id,
                          --x_from_pk2_value   => l_from_version,
                          x_to_entity_name => l_to_entity_name,
                          x_to_pk1_value   => x_to_chr_id
                          --x_to_pk2_value   => '0'
					 );
		IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
		    FND_LOG.string(FND_LOG.level_statement
		   	            ,l_module_name
					  ,'After call to fnd_attached_documents2_pkg.copy_attachments'
					   );
		END IF;

            EXCEPTION
               WHEN OTHERS THEN
                 IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                  IF (FND_LOG.test(FND_LOG.level_unexpected, l_module_name)) THEN
                    FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.fnd_attached_documents2_pkg.copy_attachments'
                        ,'After call to fnd_attached_documents2_pkg.copy_attachments'
                         ||' '||SQLERRM
                         );
                  END IF;
                 END IF;
			  OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      End;
    End if;
End 27-Apr-2006 hkamdar Commented code for copy attachment for bug #5173429.*/
    copy_accesses(
	   p_api_version	=> p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_from_chr_id	=> p_from_chr_id,
	   p_to_chr_id 		=> x_chrv_rec.id);

    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_accesses'
                        ,'After call to copy_acceses: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
      END IF;
     END IF;
      IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
        x_return_status := l_return_status;
        RAISE G_EXCEPTION_HALT_VALIDATION;
      ELSE
        x_return_status := l_return_status;
      END IF;
    END IF;

    copy_processes(
	   p_api_version	=> p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_from_chr_id	=> p_from_chr_id,
	   p_to_chr_id 		=> x_chrv_rec.id);

    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_processes'
                        ,'After call to copy_processes : x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
      END IF;
     END IF;
      IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
        x_return_status := l_return_status;
        RAISE G_EXCEPTION_HALT_VALIDATION;
      ELSE
        x_return_status := l_return_status;
      END IF;
    END IF;

    copy_grpings(
	   p_api_version	=> p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_from_chr_id	=> p_from_chr_id,
	   p_to_chr_id 		=> x_chrv_rec.id);

    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_grpings'
                        ,'After call to copy_grpings: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
      END IF;
     END IF;
      IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
        x_return_status := l_return_status;
        RAISE G_EXCEPTION_HALT_VALIDATION;
      ELSE
        x_return_status := l_return_status;
      END IF;
    END IF;

/****** For Bug#3052910 ***********************************************************
--Following condn is added .IF (p_renew_ref_yn = 'Y') THEN before the loop.
--The condition " IF (p_renew_ref_yn = 'Y') THEN " is removed for price hold change
--Price hold changes are obsoleted hence reverting the changes.
******* For Bug#3052910 ***********************************************************/

   IF (p_renew_ref_yn = 'Y') THEN --Added for Bug#3052910

    FOR l_c_governances IN c_governances LOOP

      copy_governances (
	   p_api_version	=> p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_gvev_id            => l_c_governances.id,
           p_cle_id		=> NULL,
           p_chr_id		=> x_chrv_rec.id,
           x_gvev_id		=> l_gvev_id);


      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
         IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
             x_return_status := l_return_status;
             RAISE G_EXCEPTION_HALT_VALIDATION;
         ELSE
	     x_return_status := l_return_status;
         END IF;
      END IF;
    END LOOP;

  END IF; -- IF (p_renew_ref_yn = 'Y') THEN

/*
  FOR l_c_pavv IN c_pavv LOOP
      copy_price_att_values (
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_pav_id             => l_c_pavv.id,
           p_cle_id             => NULL,
           p_chr_id             => x_chrv_rec.id,
           x_pav_id             => l_pav_id);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;
  END LOOP;

  FOR l_c_patv IN c_patv LOOP
      copy_price_adjustments (
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => l_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_pat_id             => l_c_patv.id,
           p_cle_id             => NULL,
           p_chr_id             => x_chrv_rec.id,
           x_pat_id             => l_pat_id);

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status;
        END IF;
      END IF;

 END LOOP;
 */



  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

  END copy_contract_header;


  ----------------------------------------------------------------------------
  --Function to populate the contract items record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cimv_rec(p_cim_id IN NUMBER,
				x_cimv_rec OUT NOCOPY cimv_rec_type) RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cimv_rec IS
      SELECT	ID,
		CLE_ID,
		CHR_ID,
		CLE_ID_FOR,
		DNZ_CHR_ID,
		OBJECT1_ID1,
		OBJECT1_ID2,
		JTOT_OBJECT1_CODE,
		UOM_CODE,
		EXCEPTION_YN,
		NUMBER_OF_ITEMS,
                PRICED_ITEM_YN
	FROM    OKC_K_ITEMS_V
	WHERE 	ID = p_cim_id;
    BEGIN
      OPEN c_cimv_rec;
      FETCH c_cimv_rec
      INTO	x_cimv_rec.ID,
		x_cimv_rec.CLE_ID,
		x_cimv_rec.CHR_ID,
		x_cimv_rec.CLE_ID_FOR,
		x_cimv_rec.DNZ_CHR_ID,
		x_cimv_rec.OBJECT1_ID1,
		x_cimv_rec.OBJECT1_ID2,
		x_cimv_rec.JTOT_OBJECT1_CODE,
		x_cimv_rec.UOM_CODE,
		x_cimv_rec.EXCEPTION_YN,
		x_cimv_rec.NUMBER_OF_ITEMS,
		x_cimv_rec.PRICED_ITEM_YN;


      l_no_data_found := c_cimv_rec%NOTFOUND;
      CLOSE c_cimv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cimv_rec;
  ----------------------------------------------------------------------------
  --Function to populate the contract access record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cacv_rec(p_cac_id IN NUMBER,
				x_cacv_rec OUT NOCOPY cacv_rec_type) RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cacv_rec IS
      SELECT	ID,
		GROUP_ID,
		CHR_ID,
		RESOURCE_ID,
		ACCESS_LEVEL
	FROM    OKC_K_ACCESSES_V
	WHERE 	ID = p_cac_id;

    BEGIN
      OPEN c_cacv_rec;
      FETCH c_cacv_rec
      INTO	x_cacv_rec.ID,
		x_cacv_rec.GROUP_ID,
		x_cacv_rec.CHR_ID,
		x_cacv_rec.RESOURCE_ID,
		x_cacv_rec.ACCESS_LEVEL;

      l_no_data_found := c_cacv_rec%NOTFOUND;
      CLOSE c_cacv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cacv_rec;

  ----------------------------------------------------------------------------
  --Function to populate the contract party roles record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cplv_rec(p_cpl_id IN NUMBER,
                                x_cplv_rec OUT NOCOPY cplv_rec_type) RETURN  VARCHAR2 IS
      l_return_status           VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cplv_rec IS
      SELECT    ID,
                SFWT_FLAG,
                CHR_ID,
                CLE_ID,
                RLE_CODE,
                DNZ_CHR_ID,
                OBJECT1_ID1,
                OBJECT1_ID2,
                JTOT_OBJECT1_CODE,
                COGNOMEN,
                CODE,
                FACILITY,
                MINORITY_GROUP_LOOKUP_CODE,
                SMALL_BUSINESS_FLAG,
                WOMEN_OWNED_FLAG,
                ALIAS,
                ATTRIBUTE_CATEGORY,
                ATTRIBUTE1,
                ATTRIBUTE2,
                ATTRIBUTE3,
                ATTRIBUTE4,
                ATTRIBUTE5,
                ATTRIBUTE6,
                ATTRIBUTE7,
                ATTRIBUTE8,
                ATTRIBUTE9,
                ATTRIBUTE10,
                ATTRIBUTE11,
                ATTRIBUTE12,
                ATTRIBUTE13,
                ATTRIBUTE14,
                ATTRIBUTE15,
          PRIMARY_YN,    -- Bug 2374325
           --- new columns to replace rules
          CUST_ACCT_ID,
          BILL_TO_SITE_USE_ID

        FROM    OKC_K_PARTY_ROLES_V
        WHERE   ID = p_cpl_id;
/*          AND   G_COPY_HISTORY_YN = 'N'
  UNION ALL
     SELECT    ID,
                SFWT_FLAG,
                CHR_ID,
                CLE_ID,
                RLE_CODE,
                DNZ_CHR_ID,
                OBJECT1_ID1,
                OBJECT1_ID2,
                JTOT_OBJECT1_CODE,
                COGNOMEN,
                CODE,
                FACILITY,
                MINORITY_GROUP_LOOKUP_CODE,
                SMALL_BUSINESS_FLAG,
                WOMEN_OWNED_FLAG,
                ALIAS,
                ATTRIBUTE_CATEGORY,
                ATTRIBUTE1,
                ATTRIBUTE2,
                ATTRIBUTE3,
                ATTRIBUTE4,
                ATTRIBUTE5,
                ATTRIBUTE6,
                ATTRIBUTE7,
                ATTRIBUTE8,
                ATTRIBUTE9,
                ATTRIBUTE10,
                ATTRIBUTE11,
                ATTRIBUTE12,
                ATTRIBUTE13,
                ATTRIBUTE14,
                ATTRIBUTE15,
          PRIMARY_YN,    -- Bug 2374325
           --- new columns to replace rules
          CUST_ACCT_ID,
          BILL_TO_SITE_USE_ID

        FROM    OKC_K_PARTY_ROLES_HV
        WHERE   ID = p_cpl_id
          AND   major_version = G_FROM_VERSION_NUMBER
          AND   G_COPY_HISTORY_YN = 'Y';
*/
   BEGIN
      OPEN c_cplv_rec;
      FETCH c_cplv_rec
      INTO      x_cplv_rec.ID,
                x_cplv_rec.SFWT_FLAG,
                x_cplv_rec.CHR_ID,
                x_cplv_rec.CLE_ID,
                x_cplv_rec.RLE_CODE,
                x_cplv_rec.DNZ_CHR_ID,
                x_cplv_rec.OBJECT1_ID1,
                x_cplv_rec.OBJECT1_ID2,
                x_cplv_rec.JTOT_OBJECT1_CODE,
                x_cplv_rec.COGNOMEN,
                x_cplv_rec.CODE,
                x_cplv_rec.FACILITY,
                x_cplv_rec.MINORITY_GROUP_LOOKUP_CODE,
                x_cplv_rec.SMALL_BUSINESS_FLAG,
                x_cplv_rec.WOMEN_OWNED_FLAG,
                x_cplv_rec.ALIAS,
                x_cplv_rec.ATTRIBUTE_CATEGORY,
                x_cplv_rec.ATTRIBUTE1,
                x_cplv_rec.ATTRIBUTE2,
                x_cplv_rec.ATTRIBUTE3,
                x_cplv_rec.ATTRIBUTE4,
                x_cplv_rec.ATTRIBUTE5,
                x_cplv_rec.ATTRIBUTE6,
                x_cplv_rec.ATTRIBUTE7,
                x_cplv_rec.ATTRIBUTE8,
                x_cplv_rec.ATTRIBUTE9,
                x_cplv_rec.ATTRIBUTE10,
                x_cplv_rec.ATTRIBUTE11,
                x_cplv_rec.ATTRIBUTE12,
                x_cplv_rec.ATTRIBUTE13,
                x_cplv_rec.ATTRIBUTE14,
                x_cplv_rec.ATTRIBUTE15,
          x_cplv_rec.PRIMARY_YN,
          --new columns to replace rules
          x_cplv_rec.CUST_ACCT_ID,
          x_cplv_rec.BILL_TO_SITE_USE_ID;

      l_no_data_found := c_cplv_rec%NOTFOUND;
      CLOSE c_cplv_rec;
      IF l_no_data_found THEN
        l_return_status := OKC_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cplv_rec;


  ----------------------------------------------------------------------------
  --Function to populate the contract process record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cpsv_rec(p_cps_id IN NUMBER,
				x_cpsv_rec OUT NOCOPY cpsv_rec_type) RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cpsv_rec IS
      SELECT	ID,
		PDF_ID,
		CHR_ID,
		USER_ID,
		CRT_ID,
		PROCESS_ID,
		IN_PROCESS_YN,
		ATTRIBUTE_CATEGORY,
		ATTRIBUTE1,
		ATTRIBUTE2,
		ATTRIBUTE3,
		ATTRIBUTE4,
		ATTRIBUTE5,
		ATTRIBUTE6,
		ATTRIBUTE7,
		ATTRIBUTE8,
		ATTRIBUTE9,
		ATTRIBUTE10,
		ATTRIBUTE11,
		ATTRIBUTE12,
		ATTRIBUTE13,
		ATTRIBUTE14,
		ATTRIBUTE15
	FROM    OKC_K_PROCESSES_V
	WHERE 	ID = p_cps_id;
    BEGIN
      OPEN c_cpsv_rec;
      FETCH c_cpsv_rec
      INTO	x_cpsv_rec.ID,
		x_cpsv_rec.PDF_ID,
		x_cpsv_rec.CHR_ID,
		x_cpsv_rec.USER_ID,
		x_cpsv_rec.CRT_ID,
		x_cpsv_rec.PROCESS_ID,
		x_cpsv_rec.IN_PROCESS_YN,
		x_cpsv_rec.ATTRIBUTE_CATEGORY,
		x_cpsv_rec.ATTRIBUTE1,
		x_cpsv_rec.ATTRIBUTE2,
		x_cpsv_rec.ATTRIBUTE3,
		x_cpsv_rec.ATTRIBUTE4,
		x_cpsv_rec.ATTRIBUTE5,
		x_cpsv_rec.ATTRIBUTE6,
		x_cpsv_rec.ATTRIBUTE7,
		x_cpsv_rec.ATTRIBUTE8,
		x_cpsv_rec.ATTRIBUTE9,
		x_cpsv_rec.ATTRIBUTE10,
		x_cpsv_rec.ATTRIBUTE11,
		x_cpsv_rec.ATTRIBUTE12,
		x_cpsv_rec.ATTRIBUTE13,
		x_cpsv_rec.ATTRIBUTE14,
		x_cpsv_rec.ATTRIBUTE15;

      l_no_data_found := c_cpsv_rec%NOTFOUND;
      CLOSE c_cpsv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cpsv_rec;
  ----------------------------------------------------------------------------
  --Function to populate the contract group record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cgcv_rec(p_cgc_id IN NUMBER,
				x_cgcv_rec OUT NOCOPY cgcv_rec_type) RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cgcv_rec IS
      SELECT	ID,
		CGP_PARENT_ID,
		INCLUDED_CHR_ID,
		INCLUDED_CGP_ID
	FROM    OKC_K_GRPINGS_V
	WHERE 	ID = p_cgc_id;

    BEGIN
      OPEN c_cgcv_rec;
      FETCH c_cgcv_rec
      INTO	x_cgcv_rec.ID,
		x_cgcv_rec.CGP_PARENT_ID,
		x_cgcv_rec.INCLUDED_CHR_ID,
		x_cgcv_rec.INCLUDED_CGP_ID;
      l_no_data_found := c_cgcv_rec%NOTFOUND;
      CLOSE c_cgcv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cgcv_rec;
  ----------------------------------------------------------------------------
  --Function to populate the condition headers record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cnhv_rec(p_cnh_id IN NUMBER,
				x_cnhv_rec OUT NOCOPY cnhv_rec_type) RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cnhv_rec IS
      SELECT	ID,
		SFWT_FLAG,
		ACN_ID,
		COUNTER_GROUP_ID,
		DESCRIPTION,
		SHORT_DESCRIPTION,
		COMMENTS,
		ONE_TIME_YN,
		NAME,
		CONDITION_VALID_YN,
		BEFORE_AFTER,
		TRACKED_YN,
		CNH_VARIANCE,
		DNZ_CHR_ID,
		TEMPLATE_YN,
		DATE_ACTIVE,
		OBJECT_ID,
		DATE_INACTIVE,
		JTOT_OBJECT_CODE,
		TASK_OWNER_ID,
		CNH_TYPE,
	        ATTRIBUTE_CATEGORY,
		ATTRIBUTE1,
		ATTRIBUTE2,
		ATTRIBUTE3,
		ATTRIBUTE4,
		ATTRIBUTE5,
		ATTRIBUTE6,
		ATTRIBUTE7,
		ATTRIBUTE8,
		ATTRIBUTE9,
		ATTRIBUTE10,
		ATTRIBUTE11,
		ATTRIBUTE12,
		ATTRIBUTE13,
		ATTRIBUTE14,
		ATTRIBUTE15
	FROM    OKC_CONDITION_HEADERS_V
	WHERE 	ID = p_cnh_id;

    BEGIN
      OPEN c_cnhv_rec;
      FETCH c_cnhv_rec
      INTO	x_cnhv_rec.ID,
		x_cnhv_rec.SFWT_FLAG,
		x_cnhv_rec.ACN_ID,
		x_cnhv_rec.COUNTER_GROUP_ID,
		x_cnhv_rec.DESCRIPTION,
		x_cnhv_rec.SHORT_DESCRIPTION,
		x_cnhv_rec.COMMENTS,
		x_cnhv_rec.ONE_TIME_YN,
		x_cnhv_rec.NAME,
		x_cnhv_rec.CONDITION_VALID_YN,
		x_cnhv_rec.BEFORE_AFTER,
		x_cnhv_rec.TRACKED_YN,
		x_cnhv_rec.CNH_VARIANCE,
		x_cnhv_rec.DNZ_CHR_ID,
		x_cnhv_rec.TEMPLATE_YN,
		x_cnhv_rec.DATE_ACTIVE,
		x_cnhv_rec.OBJECT_ID,
		x_cnhv_rec.DATE_INACTIVE,
		x_cnhv_rec.JTOT_OBJECT_CODE,
		x_cnhv_rec.TASK_OWNER_ID,
		x_cnhv_rec.CNH_TYPE,
		x_cnhv_rec.ATTRIBUTE_CATEGORY,
		x_cnhv_rec.ATTRIBUTE1,
		x_cnhv_rec.ATTRIBUTE2,
		x_cnhv_rec.ATTRIBUTE3,
		x_cnhv_rec.ATTRIBUTE4,
		x_cnhv_rec.ATTRIBUTE5,
		x_cnhv_rec.ATTRIBUTE6,
		x_cnhv_rec.ATTRIBUTE7,
		x_cnhv_rec.ATTRIBUTE8,
		x_cnhv_rec.ATTRIBUTE9,
		x_cnhv_rec.ATTRIBUTE10,
		x_cnhv_rec.ATTRIBUTE11,
		x_cnhv_rec.ATTRIBUTE12,
		x_cnhv_rec.ATTRIBUTE13,
		x_cnhv_rec.ATTRIBUTE14,
		x_cnhv_rec.ATTRIBUTE15;

      l_no_data_found := c_cnhv_rec%NOTFOUND;
      CLOSE c_cnhv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cnhv_rec;
  ----------------------------------------------------------------------------
  --Function to populate the condition lines record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_cnlv_rec(p_cnl_id IN NUMBER,
				x_cnlv_rec OUT NOCOPY cnlv_rec_type) RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_cnlv_rec IS
      SELECT	ID,
		SFWT_FLAG,
		START_AT,
		CNH_ID,
		PDF_ID,
		AAE_ID,
		LEFT_CTR_MASTER_ID,
		RIGHT_CTR_MASTER_ID,
		LEFT_COUNTER_ID,
		RIGHT_COUNTER_ID,
		DNZ_CHR_ID,
		SORTSEQ,
		CNL_TYPE,
		DESCRIPTION,
		LEFT_PARENTHESIS,
		RELATIONAL_OPERATOR,
		RIGHT_PARENTHESIS,
		LOGICAL_OPERATOR,
		TOLERANCE,
		RIGHT_OPERAND,
		ATTRIBUTE_CATEGORY,
		ATTRIBUTE1,
		ATTRIBUTE2,
		ATTRIBUTE3,
		ATTRIBUTE4,
		ATTRIBUTE5,
		ATTRIBUTE6,
		ATTRIBUTE7,
		ATTRIBUTE8,
		ATTRIBUTE9,
		ATTRIBUTE10,
		ATTRIBUTE11,
		ATTRIBUTE12,
		ATTRIBUTE13,
		ATTRIBUTE14,
		ATTRIBUTE15
	FROM    OKC_CONDITION_LINES_V
	WHERE 	ID = p_cnl_id;
    BEGIN
      OPEN c_cnlv_rec;
      FETCH c_cnlv_rec
      INTO	x_cnlv_rec.ID,
		x_cnlv_rec.SFWT_FLAG,
		x_cnlv_rec.START_AT,
		x_cnlv_rec.CNH_ID,
		x_cnlv_rec.PDF_ID,
		x_cnlv_rec.AAE_ID,
		x_cnlv_rec.LEFT_CTR_MASTER_ID,
		x_cnlv_rec.RIGHT_CTR_MASTER_ID,
		x_cnlv_rec.LEFT_COUNTER_ID,
		x_cnlv_rec.RIGHT_COUNTER_ID,
		x_cnlv_rec.DNZ_CHR_ID,
		x_cnlv_rec.SORTSEQ,
		x_cnlv_rec.CNL_TYPE,
		x_cnlv_rec.DESCRIPTION,
		x_cnlv_rec.LEFT_PARENTHESIS,
		x_cnlv_rec.RELATIONAL_OPERATOR,
		x_cnlv_rec.RIGHT_PARENTHESIS,
		x_cnlv_rec.LOGICAL_OPERATOR,
		x_cnlv_rec.TOLERANCE,
		x_cnlv_rec.RIGHT_OPERAND,
		x_cnlv_rec.ATTRIBUTE_CATEGORY,
		x_cnlv_rec.ATTRIBUTE1,
		x_cnlv_rec.ATTRIBUTE2,
		x_cnlv_rec.ATTRIBUTE3,
		x_cnlv_rec.ATTRIBUTE4,
		x_cnlv_rec.ATTRIBUTE5,
		x_cnlv_rec.ATTRIBUTE6,
		x_cnlv_rec.ATTRIBUTE7,
		x_cnlv_rec.ATTRIBUTE8,
		x_cnlv_rec.ATTRIBUTE9,
		x_cnlv_rec.ATTRIBUTE10,
		x_cnlv_rec.ATTRIBUTE11,
		x_cnlv_rec.ATTRIBUTE12,
		x_cnlv_rec.ATTRIBUTE13,
		x_cnlv_rec.ATTRIBUTE14,
		x_cnlv_rec.ATTRIBUTE15;

      l_no_data_found := c_cnlv_rec%NOTFOUND;
      CLOSE c_cnlv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_cnlv_rec;
  ----------------------------------------------------------------------------
  --Function to populate the contacts record to be copied.
  ----------------------------------------------------------------------------

    FUNCTION    get_ctcv_rec(p_ctc_id IN NUMBER,
				x_ctcv_rec OUT NOCOPY ctcv_rec_type) RETURN  VARCHAR2 IS

      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_ctcv_rec IS
      SELECT	ID,
                CPL_ID,
                CRO_CODE,
                DNZ_CHR_ID,
                CONTACT_SEQUENCE,
                OBJECT1_ID1,
                OBJECT1_ID2,
                JTOT_OBJECT1_CODE,
			 RESOURCE_CLASS,--Bug#3038104
			 SALES_GROUP_ID, --Bug#2882737
                ATTRIBUTE_CATEGORY,
                ATTRIBUTE1,
                ATTRIBUTE2,
                ATTRIBUTE3,
                ATTRIBUTE4,
                ATTRIBUTE5,
                ATTRIBUTE6,
                ATTRIBUTE7,
                ATTRIBUTE8,
                ATTRIBUTE9,
                ATTRIBUTE10,
                ATTRIBUTE11,
                ATTRIBUTE12,
                ATTRIBUTE13,
                ATTRIBUTE14,
                ATTRIBUTE15,
                START_DATE,
                END_DATE,
                PRIMARY_YN  -- Bug 2374325

	FROM    OKC_CONTACTS_V
	WHERE 	ID = p_ctc_id;

    BEGIN
      OPEN c_ctcv_rec;
      FETCH c_ctcv_rec
      INTO	x_ctcv_rec.ID,
                x_ctcv_rec.CPL_ID,
                x_ctcv_rec.CRO_CODE,
                x_ctcv_rec.DNZ_CHR_ID,
                x_ctcv_rec.CONTACT_SEQUENCE,
                x_ctcv_rec.OBJECT1_ID1,
                x_ctcv_rec.OBJECT1_ID2,
                x_ctcv_rec.JTOT_OBJECT1_CODE,
			 x_ctcv_rec.resource_class,--Bug#3038104
			 x_ctcv_rec.SALES_GROUP_ID, --Bug#2882737
                x_ctcv_rec.ATTRIBUTE_CATEGORY,
                x_ctcv_rec.ATTRIBUTE1,
                x_ctcv_rec.ATTRIBUTE2,
                x_ctcv_rec.ATTRIBUTE3,
                x_ctcv_rec.ATTRIBUTE4,
                x_ctcv_rec.ATTRIBUTE5,
                x_ctcv_rec.ATTRIBUTE6,
                x_ctcv_rec.ATTRIBUTE7,
                x_ctcv_rec.ATTRIBUTE8,
                x_ctcv_rec.ATTRIBUTE9,
                x_ctcv_rec.ATTRIBUTE10,
                x_ctcv_rec.ATTRIBUTE11,
                x_ctcv_rec.ATTRIBUTE12,
                x_ctcv_rec.ATTRIBUTE13,
                x_ctcv_rec.ATTRIBUTE14,
                x_ctcv_rec.ATTRIBUTE15,
                x_ctcv_rec.START_DATE,
                x_ctcv_rec.END_DATE,
                x_ctcv_rec.PRIMARY_YN;
      l_no_data_found := c_ctcv_rec%NOTFOUND;
      CLOSE c_ctcv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_ctcv_rec;

  ----------------------------------------------------------------------------
  --Function to populate the Header record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_chrv_rec(p_chr_id IN NUMBER,
				x_chrv_rec OUT NOCOPY chrv_rec_type)
    				RETURN  VARCHAR2 IS
      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

-- Bug 1922121: Compilation errors on ktst115. Problem occurred
-- because application_id is defined as varchar2(240) in
-- okc_k_headers_bh/hv and as NUMBER in okc_k_headers_b/v. This gives
-- problems in the UNION ALL because it tries to combine datatypes
-- Fix: Put a to_char() around application_id in the first cursor

      CURSOR c_chrv_rec IS
      SELECT 	ID,
		SFWT_FLAG,
		CHR_ID_RESPONSE,
		CHR_ID_AWARD,
		INV_ORGANIZATION_ID,
		to_char(APPLICATION_ID),
		STS_CODE,
		QCL_ID,
		SCS_CODE,
		CONTRACT_NUMBER,
		CURRENCY_CODE,
		CONTRACT_NUMBER_MODIFIER,
		ARCHIVED_YN,
		DELETED_YN,
		CUST_PO_NUMBER_REQ_YN,
		PRE_PAY_REQ_YN,
		CUST_PO_NUMBER,
		SHORT_DESCRIPTION,
		COMMENTS,
		DESCRIPTION,
		DPAS_RATING,
		COGNOMEN,
		TEMPLATE_YN,
		TEMPLATE_USED,
		DATE_APPROVED,
		DATETIME_CANCELLED,
		AUTO_RENEW_DAYS,
		DATE_ISSUED,
		DATETIME_RESPONDED,
		NON_RESPONSE_REASON,
		NON_RESPONSE_EXPLAIN,
		RFP_TYPE,
		CHR_TYPE,
		KEEP_ON_MAIL_LIST,
		SET_ASIDE_REASON,
		SET_ASIDE_PERCENT,
		RESPONSE_COPIES_REQ,
		DATE_CLOSE_PROJECTED,
		DATETIME_PROPOSED,
		DATE_SIGNED,
		DATE_TERMINATED,
		DATE_RENEWED,
		TRN_CODE,
		START_DATE,
		END_DATE,
		AUTHORING_ORG_ID,
		BUY_OR_SELL,
		ISSUE_OR_RECEIVE,
		ESTIMATED_AMOUNT,
		PROGRAM_ID,
                REQUEST_ID,
                PRICE_LIST_ID,
                PRICING_DATE,
                SIGN_BY_DATE,
                PROGRAM_UPDATE_DATE,
                TOTAL_LINE_LIST_PRICE,
                PROGRAM_APPLICATION_ID,
		ATTRIBUTE_CATEGORY,
		ATTRIBUTE1,
		ATTRIBUTE2,
		ATTRIBUTE3,
		ATTRIBUTE4,
		ATTRIBUTE5,
		ATTRIBUTE6,
		ATTRIBUTE7,
		ATTRIBUTE8,
		ATTRIBUTE9,
		ATTRIBUTE10,
		ATTRIBUTE11,
		ATTRIBUTE12,
		ATTRIBUTE13,
		ATTRIBUTE14,
		ATTRIBUTE15,
          GOVERNING_CONTRACT_YN,
       -- new colums to replace rules
          CONVERSION_TYPE,
          CONVERSION_RATE,
          CONVERSION_RATE_DATE,
          CONVERSION_EURO_RATE,
          CUST_ACCT_ID,
          BILL_TO_SITE_USE_ID,
          INV_RULE_ID,
          RENEWAL_TYPE_CODE,
          RENEWAL_NOTIFY_TO,
          RENEWAL_END_DATE,
          SHIP_TO_SITE_USE_ID,
          PAYMENT_TERM_ID,
          APPROVAL_TYPE,
          TERM_CANCEL_SOURCE,
          PAYMENT_INSTRUCTION_TYPE,
          ORG_ID

      /*npalepu modified on 12-JUL-2007 for bug # 6085917 */
      /* FROM   OKC_K_HEADERS_V */
      FROM      OKC_K_HEADERS_ALL_V
      /*end bug # 6085917 */
      WHERE	id = p_chr_id;

    BEGIN
      OPEN c_chrv_rec;
      FETCH c_chrv_rec
      INTO	x_chrv_rec.ID,
		x_chrv_rec.SFWT_FLAG,
		x_chrv_rec.CHR_ID_RESPONSE,
		x_chrv_rec.CHR_ID_AWARD,
		x_chrv_rec.INV_ORGANIZATION_ID,
		x_chrv_rec.APPLICATION_ID,
		x_chrv_rec.STS_CODE,
		x_chrv_rec.QCL_ID,
		x_chrv_rec.SCS_CODE,
		x_chrv_rec.CONTRACT_NUMBER,
		x_chrv_rec.CURRENCY_CODE,
		x_chrv_rec.CONTRACT_NUMBER_MODIFIER,
		x_chrv_rec.ARCHIVED_YN,
		x_chrv_rec.DELETED_YN,
		x_chrv_rec.CUST_PO_NUMBER_REQ_YN,
		x_chrv_rec.PRE_PAY_REQ_YN,
		x_chrv_rec.CUST_PO_NUMBER,
		x_chrv_rec.SHORT_DESCRIPTION,
		x_chrv_rec.COMMENTS,
		x_chrv_rec.DESCRIPTION,
		x_chrv_rec.DPAS_RATING,
		x_chrv_rec.COGNOMEN,
		x_chrv_rec.TEMPLATE_YN,
		x_chrv_rec.TEMPLATE_USED,
		x_chrv_rec.DATE_APPROVED,
		x_chrv_rec.DATETIME_CANCELLED,
		x_chrv_rec.AUTO_RENEW_DAYS,
		x_chrv_rec.DATE_ISSUED,
		x_chrv_rec.DATETIME_RESPONDED,
		x_chrv_rec.NON_RESPONSE_REASON,
		x_chrv_rec.NON_RESPONSE_EXPLAIN,
		x_chrv_rec.RFP_TYPE,
		x_chrv_rec.CHR_TYPE,
		x_chrv_rec.KEEP_ON_MAIL_LIST,
		x_chrv_rec.SET_ASIDE_REASON,
		x_chrv_rec.SET_ASIDE_PERCENT,
		x_chrv_rec.RESPONSE_COPIES_REQ,
		x_chrv_rec.DATE_CLOSE_PROJECTED,
		x_chrv_rec.DATETIME_PROPOSED,
		x_chrv_rec.DATE_SIGNED,
		x_chrv_rec.DATE_TERMINATED,
		x_chrv_rec.DATE_RENEWED,
		x_chrv_rec.TRN_CODE,
		x_chrv_rec.START_DATE,
		x_chrv_rec.END_DATE,
		x_chrv_rec.AUTHORING_ORG_ID,
		x_chrv_rec.BUY_OR_SELL,
		x_chrv_rec.ISSUE_OR_RECEIVE,
		x_chrv_rec.ESTIMATED_AMOUNT,
		x_chrv_rec.PROGRAM_ID,
                x_chrv_rec.REQUEST_ID,
                x_chrv_rec.PRICE_LIST_ID,
                x_chrv_rec.PRICING_DATE,
                x_chrv_rec.SIGN_BY_DATE,
                x_chrv_rec.PROGRAM_UPDATE_DATE,
                x_chrv_rec.TOTAL_LINE_LIST_PRICE,
                x_chrv_rec.PROGRAM_APPLICATION_ID,
		x_chrv_rec.ATTRIBUTE_CATEGORY,
		x_chrv_rec.ATTRIBUTE1,
		x_chrv_rec.ATTRIBUTE2,
		x_chrv_rec.ATTRIBUTE3,
		x_chrv_rec.ATTRIBUTE4,
		x_chrv_rec.ATTRIBUTE5,
		x_chrv_rec.ATTRIBUTE6,
		x_chrv_rec.ATTRIBUTE7,
		x_chrv_rec.ATTRIBUTE8,
		x_chrv_rec.ATTRIBUTE9,
		x_chrv_rec.ATTRIBUTE10,
		x_chrv_rec.ATTRIBUTE11,
		x_chrv_rec.ATTRIBUTE12,
		x_chrv_rec.ATTRIBUTE13,
		x_chrv_rec.ATTRIBUTE14,
		x_chrv_rec.ATTRIBUTE15,
          x_chrv_rec.GOVERNING_CONTRACT_YN,
               -- new colums to replace rules
          x_chrv_rec.CONVERSION_TYPE,
          x_chrv_rec.CONVERSION_RATE,
          x_chrv_rec.CONVERSION_RATE_DATE,
          x_chrv_rec.CONVERSION_EURO_RATE,
          x_chrv_rec.CUST_ACCT_ID,
          x_chrv_rec.BILL_TO_SITE_USE_ID,
          x_chrv_rec.INV_RULE_ID,
          x_chrv_rec.RENEWAL_TYPE_CODE,
          x_chrv_rec.RENEWAL_NOTIFY_TO,
          x_chrv_rec.RENEWAL_END_DATE,
          x_chrv_rec.SHIP_TO_SITE_USE_ID,
          x_chrv_rec.PAYMENT_TERM_ID,
          x_chrv_rec.APPROVAL_TYPE,
          x_chrv_rec.TERM_CANCEL_SOURCE,
          x_chrv_rec.PAYMENT_INSTRUCTION_TYPE,
          x_chrv_rec.ORG_ID;

      l_no_data_found := c_chrv_rec%NOTFOUND;
      CLOSE c_chrv_rec;
      IF l_no_data_found THEN
         l_return_status := FND_API.G_RET_STS_ERROR;
         return(l_return_status);
      ELSE
         return(l_return_status);
      END IF;
     EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);
    END get_chrv_rec;

  ----------------------------------------------------------------------------
  --Function to populate the outcome record to be copied.
  ----------------------------------------------------------------------------

    FUNCTION    get_ocev_rec(p_oce_id IN NUMBER,
				x_ocev_rec OUT NOCOPY ocev_rec_type) RETURN  VARCHAR2 IS

      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_ocev_rec IS
      SELECT	ID,
                SFWT_FLAG,
                PDF_ID,
                CNH_ID,
                DNZ_CHR_ID,
                ENABLED_YN,
                COMMENTS,
                ATTRIBUTE_CATEGORY,
                ATTRIBUTE1,
                ATTRIBUTE2,
                ATTRIBUTE3,
                ATTRIBUTE4,
                ATTRIBUTE5,
                ATTRIBUTE6,
                ATTRIBUTE7,
                ATTRIBUTE8,
                ATTRIBUTE9,
                ATTRIBUTE10,
                ATTRIBUTE11,
                ATTRIBUTE12,
                ATTRIBUTE13,
                ATTRIBUTE14,
                ATTRIBUTE15
	FROM    OKC_OUTCOMES_V
	WHERE 	ID = p_oce_id;
    BEGIN
      OPEN c_ocev_rec;
      FETCH c_ocev_rec
      INTO	x_ocev_rec.ID,
                x_ocev_rec.SFWT_FLAG,
                x_ocev_rec.PDF_ID,
                x_ocev_rec.CNH_ID,
                x_ocev_rec.DNZ_CHR_ID,
                x_ocev_rec.ENABLED_YN,
                x_ocev_rec.COMMENTS,
                x_ocev_rec.ATTRIBUTE_CATEGORY,
                x_ocev_rec.ATTRIBUTE1,
                x_ocev_rec.ATTRIBUTE2,
                x_ocev_rec.ATTRIBUTE3,
                x_ocev_rec.ATTRIBUTE4,
                x_ocev_rec.ATTRIBUTE5,
                x_ocev_rec.ATTRIBUTE6,
                x_ocev_rec.ATTRIBUTE7,
                x_ocev_rec.ATTRIBUTE8,
                x_ocev_rec.ATTRIBUTE9,
                x_ocev_rec.ATTRIBUTE10,
                x_ocev_rec.ATTRIBUTE11,
                x_ocev_rec.ATTRIBUTE12,
                x_ocev_rec.ATTRIBUTE13,
                x_ocev_rec.ATTRIBUTE14,
                x_ocev_rec.ATTRIBUTE15;

      l_no_data_found := c_ocev_rec%NOTFOUND;
      CLOSE c_ocev_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);
    END get_ocev_rec;

  ----------------------------------------------------------------------------
  --Function to populate the outcome arguments record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION    get_oatv_rec(p_oat_id IN NUMBER,
				x_oatv_rec OUT NOCOPY oatv_rec_type) RETURN  VARCHAR2 IS

      l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_oatv_rec IS
      SELECT	ID,
                PDP_ID,
                OCE_ID,
                AAE_ID,
                DNZ_CHR_ID,
                VALUE
	FROM    OKC_OUTCOME_ARGUMENTS_V
	WHERE 	ID = p_oat_id;

    BEGIN
      OPEN c_oatv_rec;
      FETCH c_oatv_rec
      INTO	x_oatv_rec.ID,
                x_oatv_rec.PDP_ID,
                x_oatv_rec.OCE_ID,
                x_oatv_rec.AAE_ID,
                x_oatv_rec.DNZ_CHR_ID,
                x_oatv_rec.VALUE;

      l_no_data_found := c_oatv_rec%NOTFOUND;
      CLOSE c_oatv_rec;
      IF l_no_data_found THEN
        l_return_status := FND_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_oatv_rec;

--------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
    FUNCTION    get_pavv_rec(p_pav_id IN NUMBER,
                                x_pavv_rec OUT NOCOPY pavv_rec_type) RETURN  VARCHAR2 IS

      l_return_status           VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_pavv_rec IS
      SELECT    ID,
                CHR_ID,
                CLE_ID,
                FLEX_TITLE,
                PRICING_CONTEXT,
                PRICING_ATTRIBUTE1,
                PRICING_ATTRIBUTE2,
                PRICING_ATTRIBUTE3,
                PRICING_ATTRIBUTE4,
                PRICING_ATTRIBUTE5,
                PRICING_ATTRIBUTE6,
                PRICING_ATTRIBUTE7,
                PRICING_ATTRIBUTE8,
                PRICING_ATTRIBUTE9,
                PRICING_ATTRIBUTE10,
                PRICING_ATTRIBUTE11,
                PRICING_ATTRIBUTE12,
                PRICING_ATTRIBUTE13,
                PRICING_ATTRIBUTE14,
                PRICING_ATTRIBUTE15,
                PRICING_ATTRIBUTE16,
                PRICING_ATTRIBUTE17,
                PRICING_ATTRIBUTE18,
                PRICING_ATTRIBUTE19,
                PRICING_ATTRIBUTE20,
                PRICING_ATTRIBUTE21,
                PRICING_ATTRIBUTE22,
                PRICING_ATTRIBUTE23,
                PRICING_ATTRIBUTE24,
                PRICING_ATTRIBUTE25,
                PRICING_ATTRIBUTE26,
                PRICING_ATTRIBUTE27,
                PRICING_ATTRIBUTE28,
                PRICING_ATTRIBUTE29,
                PRICING_ATTRIBUTE30,
                PRICING_ATTRIBUTE31,
                PRICING_ATTRIBUTE32,
                PRICING_ATTRIBUTE33,
                PRICING_ATTRIBUTE34,
                PRICING_ATTRIBUTE35,
                PRICING_ATTRIBUTE36,
                PRICING_ATTRIBUTE37,
                PRICING_ATTRIBUTE38,
                PRICING_ATTRIBUTE39,
                PRICING_ATTRIBUTE40,
                PRICING_ATTRIBUTE41,
                PRICING_ATTRIBUTE42,
                PRICING_ATTRIBUTE43,
                PRICING_ATTRIBUTE44,
                PRICING_ATTRIBUTE45,
                PRICING_ATTRIBUTE46,
                PRICING_ATTRIBUTE47,
                PRICING_ATTRIBUTE48,
                PRICING_ATTRIBUTE49,
                PRICING_ATTRIBUTE50,
                PRICING_ATTRIBUTE51,
                PRICING_ATTRIBUTE52,
                PRICING_ATTRIBUTE53,
                PRICING_ATTRIBUTE54,
                PRICING_ATTRIBUTE55,
                PRICING_ATTRIBUTE56,
                PRICING_ATTRIBUTE57,
                PRICING_ATTRIBUTE58,
                PRICING_ATTRIBUTE59,
                PRICING_ATTRIBUTE60,
                PRICING_ATTRIBUTE61,
                PRICING_ATTRIBUTE62,
                PRICING_ATTRIBUTE63,
                PRICING_ATTRIBUTE64,
                PRICING_ATTRIBUTE65,
                PRICING_ATTRIBUTE66,
                PRICING_ATTRIBUTE67,
                PRICING_ATTRIBUTE68,
                PRICING_ATTRIBUTE69,
                PRICING_ATTRIBUTE70,
                PRICING_ATTRIBUTE71,
                PRICING_ATTRIBUTE72,
                PRICING_ATTRIBUTE73,
                PRICING_ATTRIBUTE74,
                PRICING_ATTRIBUTE75,
                PRICING_ATTRIBUTE76,
                PRICING_ATTRIBUTE77,
                PRICING_ATTRIBUTE78,
                PRICING_ATTRIBUTE79,
                PRICING_ATTRIBUTE80,
                PRICING_ATTRIBUTE81,
                PRICING_ATTRIBUTE82,
                PRICING_ATTRIBUTE83,
                PRICING_ATTRIBUTE84,
                PRICING_ATTRIBUTE85,
                PRICING_ATTRIBUTE86,
                PRICING_ATTRIBUTE87,
                PRICING_ATTRIBUTE88,
                PRICING_ATTRIBUTE89,
                PRICING_ATTRIBUTE90,
                PRICING_ATTRIBUTE91,
                PRICING_ATTRIBUTE92,
                PRICING_ATTRIBUTE93,
                PRICING_ATTRIBUTE94,
                PRICING_ATTRIBUTE95,
                PRICING_ATTRIBUTE96,
                PRICING_ATTRIBUTE97,
                PRICING_ATTRIBUTE98,
                PRICING_ATTRIBUTE99,
                PRICING_ATTRIBUTE100,
                QUALIFIER_CONTEXT,
                QUALIFIER_ATTRIBUTE1,
                QUALIFIER_ATTRIBUTE2,
                QUALIFIER_ATTRIBUTE3,
                QUALIFIER_ATTRIBUTE4,
                QUALIFIER_ATTRIBUTE5,
                QUALIFIER_ATTRIBUTE6,
                QUALIFIER_ATTRIBUTE7,
                QUALIFIER_ATTRIBUTE8,
                QUALIFIER_ATTRIBUTE9,
                QUALIFIER_ATTRIBUTE10,
                QUALIFIER_ATTRIBUTE11,
                QUALIFIER_ATTRIBUTE12,
                QUALIFIER_ATTRIBUTE13,
                QUALIFIER_ATTRIBUTE14,
                QUALIFIER_ATTRIBUTE15,
                QUALIFIER_ATTRIBUTE16,
                QUALIFIER_ATTRIBUTE17,
                QUALIFIER_ATTRIBUTE18,
                QUALIFIER_ATTRIBUTE19,
                QUALIFIER_ATTRIBUTE20,
                QUALIFIER_ATTRIBUTE21,
                QUALIFIER_ATTRIBUTE22,
                QUALIFIER_ATTRIBUTE23,
                QUALIFIER_ATTRIBUTE24,
                QUALIFIER_ATTRIBUTE25,
                QUALIFIER_ATTRIBUTE26,
                QUALIFIER_ATTRIBUTE27,
                QUALIFIER_ATTRIBUTE28,
                QUALIFIER_ATTRIBUTE29,
                QUALIFIER_ATTRIBUTE30,
                QUALIFIER_ATTRIBUTE31,
                QUALIFIER_ATTRIBUTE32,
                QUALIFIER_ATTRIBUTE33,
                QUALIFIER_ATTRIBUTE34,
                QUALIFIER_ATTRIBUTE35,
                QUALIFIER_ATTRIBUTE36,
                QUALIFIER_ATTRIBUTE37,
                QUALIFIER_ATTRIBUTE38,
                QUALIFIER_ATTRIBUTE39,
                QUALIFIER_ATTRIBUTE40,
                QUALIFIER_ATTRIBUTE41,
                QUALIFIER_ATTRIBUTE42,
                QUALIFIER_ATTRIBUTE43,
                QUALIFIER_ATTRIBUTE44,
                QUALIFIER_ATTRIBUTE45,
                QUALIFIER_ATTRIBUTE46,
                QUALIFIER_ATTRIBUTE47,
                QUALIFIER_ATTRIBUTE48,
                QUALIFIER_ATTRIBUTE49,
                QUALIFIER_ATTRIBUTE50,
                QUALIFIER_ATTRIBUTE51,
                QUALIFIER_ATTRIBUTE52,
                QUALIFIER_ATTRIBUTE53,
                QUALIFIER_ATTRIBUTE54,
                QUALIFIER_ATTRIBUTE55,
                QUALIFIER_ATTRIBUTE56,
                QUALIFIER_ATTRIBUTE57,
                QUALIFIER_ATTRIBUTE58,
                QUALIFIER_ATTRIBUTE59,
                QUALIFIER_ATTRIBUTE60,
                QUALIFIER_ATTRIBUTE61,
                QUALIFIER_ATTRIBUTE62,
                QUALIFIER_ATTRIBUTE63,
                QUALIFIER_ATTRIBUTE64,
                QUALIFIER_ATTRIBUTE65,
                QUALIFIER_ATTRIBUTE66,
                QUALIFIER_ATTRIBUTE67,
                QUALIFIER_ATTRIBUTE68,
                QUALIFIER_ATTRIBUTE69,
                QUALIFIER_ATTRIBUTE70,
                QUALIFIER_ATTRIBUTE71,
                QUALIFIER_ATTRIBUTE72,
                QUALIFIER_ATTRIBUTE73,
                QUALIFIER_ATTRIBUTE74,
                QUALIFIER_ATTRIBUTE75,
                QUALIFIER_ATTRIBUTE76,
                QUALIFIER_ATTRIBUTE77,
                QUALIFIER_ATTRIBUTE78,
                QUALIFIER_ATTRIBUTE79,
                QUALIFIER_ATTRIBUTE80,
                QUALIFIER_ATTRIBUTE81,
                QUALIFIER_ATTRIBUTE82,
                QUALIFIER_ATTRIBUTE83,
                QUALIFIER_ATTRIBUTE84,
                QUALIFIER_ATTRIBUTE85,
                QUALIFIER_ATTRIBUTE86,
                QUALIFIER_ATTRIBUTE87,
                QUALIFIER_ATTRIBUTE88,
                QUALIFIER_ATTRIBUTE89,
                QUALIFIER_ATTRIBUTE90,
                QUALIFIER_ATTRIBUTE91,
                QUALIFIER_ATTRIBUTE92,
                QUALIFIER_ATTRIBUTE93,
                QUALIFIER_ATTRIBUTE94,
                QUALIFIER_ATTRIBUTE95,
                QUALIFIER_ATTRIBUTE96,
                QUALIFIER_ATTRIBUTE97,
                QUALIFIER_ATTRIBUTE98,
                QUALIFIER_ATTRIBUTE99,
                QUALIFIER_ATTRIBUTE100
        FROM    OKC_PRICE_ATT_VALUES_V
        WHERE   ID = p_pav_id;
    BEGIN
      OPEN c_pavv_rec;
      FETCH c_pavv_rec
      INTO      x_pavv_rec.ID,
                x_pavv_rec.CHR_ID,
                x_pavv_rec.CLE_ID,
                x_pavv_rec.FLEX_TITLE,
                x_pavv_rec.PRICING_CONTEXT,
                x_pavv_rec.PRICING_ATTRIBUTE1,
                x_pavv_rec.PRICING_ATTRIBUTE2,
                x_pavv_rec.PRICING_ATTRIBUTE3,
                x_pavv_rec.PRICING_ATTRIBUTE4,
                x_pavv_rec.PRICING_ATTRIBUTE5,
                x_pavv_rec.PRICING_ATTRIBUTE6,
                x_pavv_rec.PRICING_ATTRIBUTE7,
                x_pavv_rec.PRICING_ATTRIBUTE8,
                x_pavv_rec.PRICING_ATTRIBUTE9,
                x_pavv_rec.PRICING_ATTRIBUTE10,
                x_pavv_rec.PRICING_ATTRIBUTE11,
                x_pavv_rec.PRICING_ATTRIBUTE12,
                x_pavv_rec.PRICING_ATTRIBUTE13,
                x_pavv_rec.PRICING_ATTRIBUTE14,
                x_pavv_rec.PRICING_ATTRIBUTE15,
                x_pavv_rec.PRICING_ATTRIBUTE16,
                x_pavv_rec.PRICING_ATTRIBUTE17,
                x_pavv_rec.PRICING_ATTRIBUTE18,
                x_pavv_rec.PRICING_ATTRIBUTE19,
                x_pavv_rec.PRICING_ATTRIBUTE20,
                x_pavv_rec.PRICING_ATTRIBUTE21,
                x_pavv_rec.PRICING_ATTRIBUTE22,
                x_pavv_rec.PRICING_ATTRIBUTE23,
                x_pavv_rec.PRICING_ATTRIBUTE24,
                x_pavv_rec.PRICING_ATTRIBUTE25,
                x_pavv_rec.PRICING_ATTRIBUTE26,
                x_pavv_rec.PRICING_ATTRIBUTE27,
                x_pavv_rec.PRICING_ATTRIBUTE28,
                x_pavv_rec.PRICING_ATTRIBUTE29,
                x_pavv_rec.PRICING_ATTRIBUTE30,
                x_pavv_rec.PRICING_ATTRIBUTE31,
                x_pavv_rec.PRICING_ATTRIBUTE32,
                x_pavv_rec.PRICING_ATTRIBUTE33,
                x_pavv_rec.PRICING_ATTRIBUTE34,
                x_pavv_rec.PRICING_ATTRIBUTE35,
                x_pavv_rec.PRICING_ATTRIBUTE36,
                x_pavv_rec.PRICING_ATTRIBUTE37,
                x_pavv_rec.PRICING_ATTRIBUTE38,
                x_pavv_rec.PRICING_ATTRIBUTE39,
                x_pavv_rec.PRICING_ATTRIBUTE40,
                x_pavv_rec.PRICING_ATTRIBUTE41,
                x_pavv_rec.PRICING_ATTRIBUTE42,
                x_pavv_rec.PRICING_ATTRIBUTE43,
                x_pavv_rec.PRICING_ATTRIBUTE44,
                x_pavv_rec.PRICING_ATTRIBUTE45,
                x_pavv_rec.PRICING_ATTRIBUTE46,
                x_pavv_rec.PRICING_ATTRIBUTE47,
                x_pavv_rec.PRICING_ATTRIBUTE48,
                x_pavv_rec.PRICING_ATTRIBUTE49,
                x_pavv_rec.PRICING_ATTRIBUTE50,
                x_pavv_rec.PRICING_ATTRIBUTE51,
                x_pavv_rec.PRICING_ATTRIBUTE52,
                x_pavv_rec.PRICING_ATTRIBUTE53,
                x_pavv_rec.PRICING_ATTRIBUTE54,
                x_pavv_rec.PRICING_ATTRIBUTE55,
                x_pavv_rec.PRICING_ATTRIBUTE56,
                x_pavv_rec.PRICING_ATTRIBUTE57,
                x_pavv_rec.PRICING_ATTRIBUTE58,
                x_pavv_rec.PRICING_ATTRIBUTE59,
                x_pavv_rec.PRICING_ATTRIBUTE60,
                x_pavv_rec.PRICING_ATTRIBUTE61,
                x_pavv_rec.PRICING_ATTRIBUTE62,
                x_pavv_rec.PRICING_ATTRIBUTE63,
                x_pavv_rec.PRICING_ATTRIBUTE64,
                x_pavv_rec.PRICING_ATTRIBUTE65,
                x_pavv_rec.PRICING_ATTRIBUTE66,
                x_pavv_rec.PRICING_ATTRIBUTE67,
                x_pavv_rec.PRICING_ATTRIBUTE68,
                x_pavv_rec.PRICING_ATTRIBUTE69,
                x_pavv_rec.PRICING_ATTRIBUTE70,
                x_pavv_rec.PRICING_ATTRIBUTE71,
                x_pavv_rec.PRICING_ATTRIBUTE72,
                x_pavv_rec.PRICING_ATTRIBUTE73,
                x_pavv_rec.PRICING_ATTRIBUTE74,
                x_pavv_rec.PRICING_ATTRIBUTE75,
                x_pavv_rec.PRICING_ATTRIBUTE76,
                x_pavv_rec.PRICING_ATTRIBUTE77,
                x_pavv_rec.PRICING_ATTRIBUTE78,
                x_pavv_rec.PRICING_ATTRIBUTE79,
                x_pavv_rec.PRICING_ATTRIBUTE80,
                x_pavv_rec.PRICING_ATTRIBUTE81,
                x_pavv_rec.PRICING_ATTRIBUTE82,
                x_pavv_rec.PRICING_ATTRIBUTE83,
                x_pavv_rec.PRICING_ATTRIBUTE84,
                x_pavv_rec.PRICING_ATTRIBUTE85,
                x_pavv_rec.PRICING_ATTRIBUTE86,
                x_pavv_rec.PRICING_ATTRIBUTE87,
                x_pavv_rec.PRICING_ATTRIBUTE88,
                x_pavv_rec.PRICING_ATTRIBUTE89,
                x_pavv_rec.PRICING_ATTRIBUTE90,
                x_pavv_rec.PRICING_ATTRIBUTE91,
                x_pavv_rec.PRICING_ATTRIBUTE92,
                x_pavv_rec.PRICING_ATTRIBUTE93,
                x_pavv_rec.PRICING_ATTRIBUTE94,
                x_pavv_rec.PRICING_ATTRIBUTE95,
                x_pavv_rec.PRICING_ATTRIBUTE96,
                x_pavv_rec.PRICING_ATTRIBUTE97,
                x_pavv_rec.PRICING_ATTRIBUTE98,
                x_pavv_rec.PRICING_ATTRIBUTE99,
                x_pavv_rec.PRICING_ATTRIBUTE100,
                x_pavv_rec.QUALIFIER_CONTEXT,
                x_pavv_rec.QUALIFIER_ATTRIBUTE1,
                x_pavv_rec.QUALIFIER_ATTRIBUTE2,
                x_pavv_rec.QUALIFIER_ATTRIBUTE3,
                x_pavv_rec.QUALIFIER_ATTRIBUTE4,
                x_pavv_rec.QUALIFIER_ATTRIBUTE5,
                x_pavv_rec.QUALIFIER_ATTRIBUTE6,
                x_pavv_rec.QUALIFIER_ATTRIBUTE7,
                x_pavv_rec.QUALIFIER_ATTRIBUTE8,
                x_pavv_rec.QUALIFIER_ATTRIBUTE9,
                x_pavv_rec.QUALIFIER_ATTRIBUTE10,
                x_pavv_rec.QUALIFIER_ATTRIBUTE11,
                x_pavv_rec.QUALIFIER_ATTRIBUTE12,
                x_pavv_rec.QUALIFIER_ATTRIBUTE13,
                x_pavv_rec.QUALIFIER_ATTRIBUTE14,
                x_pavv_rec.QUALIFIER_ATTRIBUTE15,
                x_pavv_rec.QUALIFIER_ATTRIBUTE16,
                x_pavv_rec.QUALIFIER_ATTRIBUTE17,
                x_pavv_rec.QUALIFIER_ATTRIBUTE18,
                x_pavv_rec.QUALIFIER_ATTRIBUTE19,
                x_pavv_rec.QUALIFIER_ATTRIBUTE20,
                x_pavv_rec.QUALIFIER_ATTRIBUTE21,
                x_pavv_rec.QUALIFIER_ATTRIBUTE22,
                x_pavv_rec.QUALIFIER_ATTRIBUTE23,
                x_pavv_rec.QUALIFIER_ATTRIBUTE24,
                x_pavv_rec.QUALIFIER_ATTRIBUTE25,
                x_pavv_rec.QUALIFIER_ATTRIBUTE26,
                x_pavv_rec.QUALIFIER_ATTRIBUTE27,
                x_pavv_rec.QUALIFIER_ATTRIBUTE28,
                x_pavv_rec.QUALIFIER_ATTRIBUTE29,
                x_pavv_rec.QUALIFIER_ATTRIBUTE30,
                x_pavv_rec.QUALIFIER_ATTRIBUTE31,
                x_pavv_rec.QUALIFIER_ATTRIBUTE32,
                x_pavv_rec.QUALIFIER_ATTRIBUTE33,
                x_pavv_rec.QUALIFIER_ATTRIBUTE34,
                x_pavv_rec.QUALIFIER_ATTRIBUTE35,
                x_pavv_rec.QUALIFIER_ATTRIBUTE36,
                x_pavv_rec.QUALIFIER_ATTRIBUTE37,
                x_pavv_rec.QUALIFIER_ATTRIBUTE38,
                x_pavv_rec.QUALIFIER_ATTRIBUTE39,
                x_pavv_rec.QUALIFIER_ATTRIBUTE40,
                x_pavv_rec.QUALIFIER_ATTRIBUTE41,
                x_pavv_rec.QUALIFIER_ATTRIBUTE42,
                x_pavv_rec.QUALIFIER_ATTRIBUTE43,
                x_pavv_rec.QUALIFIER_ATTRIBUTE44,
                x_pavv_rec.QUALIFIER_ATTRIBUTE45,
                x_pavv_rec.QUALIFIER_ATTRIBUTE46,
                x_pavv_rec.QUALIFIER_ATTRIBUTE47,
                x_pavv_rec.QUALIFIER_ATTRIBUTE48,
                x_pavv_rec.QUALIFIER_ATTRIBUTE49,
                x_pavv_rec.QUALIFIER_ATTRIBUTE50,
                x_pavv_rec.QUALIFIER_ATTRIBUTE51,
                x_pavv_rec.QUALIFIER_ATTRIBUTE52,
                x_pavv_rec.QUALIFIER_ATTRIBUTE53,
                x_pavv_rec.QUALIFIER_ATTRIBUTE54,
                x_pavv_rec.QUALIFIER_ATTRIBUTE55,
                x_pavv_rec.QUALIFIER_ATTRIBUTE56,
                x_pavv_rec.QUALIFIER_ATTRIBUTE57,
                x_pavv_rec.QUALIFIER_ATTRIBUTE58,
                x_pavv_rec.QUALIFIER_ATTRIBUTE59,
                x_pavv_rec.QUALIFIER_ATTRIBUTE60,
                x_pavv_rec.QUALIFIER_ATTRIBUTE61,
                x_pavv_rec.QUALIFIER_ATTRIBUTE62,
                x_pavv_rec.QUALIFIER_ATTRIBUTE63,
                x_pavv_rec.QUALIFIER_ATTRIBUTE64,
                x_pavv_rec.QUALIFIER_ATTRIBUTE65,
                x_pavv_rec.QUALIFIER_ATTRIBUTE66,
                x_pavv_rec.QUALIFIER_ATTRIBUTE67,
                x_pavv_rec.QUALIFIER_ATTRIBUTE68,
                x_pavv_rec.QUALIFIER_ATTRIBUTE69,
                x_pavv_rec.QUALIFIER_ATTRIBUTE70,
                x_pavv_rec.QUALIFIER_ATTRIBUTE71,
                x_pavv_rec.QUALIFIER_ATTRIBUTE72,
                x_pavv_rec.QUALIFIER_ATTRIBUTE73,
                x_pavv_rec.QUALIFIER_ATTRIBUTE74,
                x_pavv_rec.QUALIFIER_ATTRIBUTE75,
                x_pavv_rec.QUALIFIER_ATTRIBUTE76,
                x_pavv_rec.QUALIFIER_ATTRIBUTE77,
                x_pavv_rec.QUALIFIER_ATTRIBUTE78,
                x_pavv_rec.QUALIFIER_ATTRIBUTE79,
                x_pavv_rec.QUALIFIER_ATTRIBUTE80,
                x_pavv_rec.QUALIFIER_ATTRIBUTE81,
                x_pavv_rec.QUALIFIER_ATTRIBUTE82,
                x_pavv_rec.QUALIFIER_ATTRIBUTE83,
                x_pavv_rec.QUALIFIER_ATTRIBUTE84,
                x_pavv_rec.QUALIFIER_ATTRIBUTE85,
                x_pavv_rec.QUALIFIER_ATTRIBUTE86,
                x_pavv_rec.QUALIFIER_ATTRIBUTE87,
                x_pavv_rec.QUALIFIER_ATTRIBUTE88,
                x_pavv_rec.QUALIFIER_ATTRIBUTE89,
                x_pavv_rec.QUALIFIER_ATTRIBUTE90,
                x_pavv_rec.QUALIFIER_ATTRIBUTE91,
                x_pavv_rec.QUALIFIER_ATTRIBUTE92,
                x_pavv_rec.QUALIFIER_ATTRIBUTE93,
                x_pavv_rec.QUALIFIER_ATTRIBUTE94,
                x_pavv_rec.QUALIFIER_ATTRIBUTE95,
                x_pavv_rec.QUALIFIER_ATTRIBUTE96,
                x_pavv_rec.QUALIFIER_ATTRIBUTE97,
                x_pavv_rec.QUALIFIER_ATTRIBUTE98,
                x_pavv_rec.QUALIFIER_ATTRIBUTE99,
                x_pavv_rec.QUALIFIER_ATTRIBUTE100;

      l_no_data_found := c_pavv_rec%NOTFOUND;
      CLOSE c_pavv_rec;
      IF l_no_data_found THEN
        l_return_status := OKC_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_pavv_rec;

  ----------------------------------------------------------------------------
  --Function to populate the price_attributes record to be copied.
  ----------------------------------------------------------------------------
     FUNCTION    get_patv_rec(p_pat_id IN NUMBER,
                                x_patv_rec OUT NOCOPY patv_rec_type) RETURN  VARCHAR2 IS

      l_return_status           VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_patv_rec IS
      SELECT
              --ID,
            PAT_ID,
            CHR_ID,
            CLE_ID,
            BSL_ID,
            BCL_ID,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATED_BY,
            LAST_UPDATE_DATE,
            MODIFIED_FROM,
            MODIFIED_TO,
            MODIFIER_MECHANISM_TYPE_CODE,
            OPERAND,
            ARITHMETIC_OPERATOR,
            AUTOMATIC_FLAG,
            UPDATE_ALLOWED,
            UPDATED_FLAG,
            APPLIED_FLAG,
            ON_INVOICE_FLAG,
            PRICING_PHASE_ID,
           CONTEXT,
            PROGRAM_APPLICATION_ID,
            PROGRAM_ID,
            PROGRAM_UPDATE_DATE,
            REQUEST_ID,
            LIST_HEADER_ID,
            LIST_LINE_ID,
            LIST_LINE_TYPE_CODE,
            CHANGE_REASON_CODE,
            CHANGE_REASON_TEXT,
            ESTIMATED_FLAG,
            ADJUSTED_AMOUNT,
           CHARGE_TYPE_CODE,
           CHARGE_SUBTYPE_CODE,
           RANGE_BREAK_QUANTITY,
           ACCRUAL_CONVERSION_RATE,
           PRICING_GROUP_SEQUENCE,
           ACCRUAL_FLAG,
           LIST_LINE_NO,
           SOURCE_SYSTEM_CODE,
           BENEFIT_QTY,
           BENEFIT_UOM_CODE,
           EXPIRATION_DATE,
           MODIFIER_LEVEL_CODE,
           PRICE_BREAK_TYPE_CODE,
           SUBSTITUTION_ATTRIBUTE,
           PRORATION_TYPE_CODE,
           INCLUDE_ON_RETURNS_FLAG,
           OBJECT_VERSION_NUMBER,
            ATTRIBUTE1,
            ATTRIBUTE2,
            ATTRIBUTE3,
            ATTRIBUTE4,
            ATTRIBUTE5,
            ATTRIBUTE6,
            ATTRIBUTE7,
            ATTRIBUTE8,
            ATTRIBUTE9,
            ATTRIBUTE10,
            ATTRIBUTE11,
            ATTRIBUTE12,
            ATTRIBUTE13,
            ATTRIBUTE14,
            ATTRIBUTE15,
            LAST_UPDATE_LOGIN,
            REBATE_TRANSACTION_TYPE_CODE
             FROM    OKC_PRICE_ADJUSTMENTS_V
        WHERE   ID = p_pat_id;
    BEGIN
      OPEN c_patv_rec;
      FETCH c_patv_rec
      INTO
            --- x_patv_rec.ID,
              x_patv_rec.PAT_ID,
              x_patv_rec.CHR_ID,
              x_patv_rec.CLE_ID,
              x_patv_rec.BSL_ID,
              x_patv_rec.BCL_ID,
              x_patv_rec.CREATED_BY,
              x_patv_rec.CREATION_DATE,
              x_patv_rec.LAST_UPDATED_BY,
              x_patv_rec.LAST_UPDATE_DATE,
              x_patv_rec.MODIFIED_FROM,
              x_patv_rec.MODIFIED_TO,
              x_patv_rec.MODIFIER_MECHANISM_TYPE_CODE,
              x_patv_rec.OPERAND,
              x_patv_rec.ARITHMETIC_OPERATOR,
              x_patv_rec.AUTOMATIC_FLAG,
              x_patv_rec.UPDATE_ALLOWED,
              x_patv_rec.UPDATED_FLAG,
              x_patv_rec.APPLIED_FLAG,
              x_patv_rec.ON_INVOICE_FLAG,
              x_patv_rec.PRICING_PHASE_ID,
              x_patv_rec.CONTEXT,
           x_patv_rec.PROGRAM_APPLICATION_ID,
           x_patv_rec.PROGRAM_ID,
           x_patv_rec.PROGRAM_UPDATE_DATE,
           x_patv_rec.REQUEST_ID,
            x_patv_rec.LIST_HEADER_ID,
            x_patv_rec.LIST_LINE_ID,
           x_patv_rec.LIST_LINE_TYPE_CODE,
            x_patv_rec.CHANGE_REASON_CODE,
            x_patv_rec.CHANGE_REASON_TEXT,
            x_patv_rec.ESTIMATED_FLAG,
            x_patv_rec.ADJUSTED_AMOUNT,
           x_patv_rec.CHARGE_TYPE_CODE,
           x_patv_rec.CHARGE_SUBTYPE_CODE,
           x_patv_rec.RANGE_BREAK_QUANTITY,
           x_patv_rec.ACCRUAL_CONVERSION_RATE,
           x_patv_rec.PRICING_GROUP_SEQUENCE,
           x_patv_rec.ACCRUAL_FLAG,
            x_patv_rec.LIST_LINE_NO,
           x_patv_rec.SOURCE_SYSTEM_CODE,
           x_patv_rec.BENEFIT_QTY,
           x_patv_rec.BENEFIT_UOM_CODE,
           x_patv_rec.EXPIRATION_DATE,
           x_patv_rec.MODIFIER_LEVEL_CODE,
           x_patv_rec.PRICE_BREAK_TYPE_CODE,
           x_patv_rec.SUBSTITUTION_ATTRIBUTE,
           x_patv_rec.PRORATION_TYPE_CODE,
           x_patv_rec.INCLUDE_ON_RETURNS_FLAG,
           x_patv_rec.OBJECT_VERSION_NUMBER,
              x_patv_rec.ATTRIBUTE1,
              x_patv_rec.ATTRIBUTE2,
              x_patv_rec.ATTRIBUTE3,
              x_patv_rec.ATTRIBUTE4,
              x_patv_rec.ATTRIBUTE5,
              x_patv_rec.ATTRIBUTE6,
              x_patv_rec.ATTRIBUTE7,
              x_patv_rec.ATTRIBUTE8,
              x_patv_rec.ATTRIBUTE9,
              x_patv_rec.ATTRIBUTE10,
              x_patv_rec.ATTRIBUTE11,
              x_patv_rec.ATTRIBUTE12,
              x_patv_rec.ATTRIBUTE13,
              x_patv_rec.ATTRIBUTE14,
              x_patv_rec.ATTRIBUTE15,
              x_patv_rec.LAST_UPDATE_LOGIN,
              x_patv_rec.REBATE_TRANSACTION_TYPE_CODE;

               l_no_data_found := c_patv_rec%NOTFOUND;
      CLOSE c_patv_rec;
      IF l_no_data_found THEN
        l_return_status := OKC_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_patv_rec;
--------------------------------------------------------------------------------------------------

/*---------------------------------------------------------------------------------------*/
-- Procedure GenerateNewLineNumber: Used to generate line numbers for all lines and sublines
--                                  in the newly created contract in the same sequence as the
--                                  lines in the source contract
/*---------------------------------------------------------------------------------------*/

 Procedure GenerateNewLineNumber(P_To_Chr_ID IN NUMBER
			        ,P_Partial_Copy_YN IN VARCHAR2
				,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
 			        ,x_return_status OUT NOCOPY VARCHAR2) IS
 l_api_name        CONSTANT VARCHAR2(30) := 'GenerateNewLineNumber';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 cursor allLines IS
 select
  id
 ,line_number
 ,cle_id
 from okc_k_lines_b
 where dnz_chr_id = P_To_Chr_ID
 and (
      (cle_id is NOT NULL and lse_id in (7,8,9,10,11,13,25,35))
     OR
      (cle_id is NULL)
     )
 order by cle_id,to_number(line_number);

 cursor partialLines IS
 select
  b.id
 ,b.line_number
 ,b.cle_id
 from
  okc_k_lines_b_temp bt
 ,okc_k_lines_b b
 where b.dnz_chr_id = P_To_Chr_ID
 and (
      (b.cle_id is NOT NULL and b.lse_id in (7,8,9,10,11,13,25,35))
       OR
      (b.cle_id is NULL)
     )
 and b.id = bt.id
 order by bt.cle_id,to_number(bt.line_number);

 l_id NUMBER;
 l_line_number NUMBER;
 l_cle_id NUMBER;

 l_current_cle_id NUMBER := -99;
 l_subline_num_initialized VARCHAR2(1) := 'N';
 l_subline_no NUMBER := -99;

 l_topline_num_initialized VARCHAR2(1) := 'N';
 l_topline_no NUMBER := -99;

 BEGIN
  x_return_status := FND_API.G_RET_STS_SUCCESS;

  If (P_Partial_Copy_YN = 'N') then
   OPEN allLines;
  Elsif (P_Partial_Copy_YN = 'Y') then
   OPEN partialLines;
  End If;

  LOOP
  If (P_Partial_Copy_YN = 'N') then
/*
   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Inside GenerateNewLineNumber, FETCHing from allLines'
		    );
   End If;
*/
    FETCH allLines into l_id,l_line_number,l_cle_id;
  Elsif (P_Partial_Copy_YN = 'Y') then
/*
   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Inside GenerateNewLineNumber, FETCHing from partialLines'
		    );
   End If;
*/
    FETCH partialLines into l_id,l_line_number,l_cle_id;
  End If;

  If (P_Partial_Copy_YN = 'N') then
   EXIT WHEN allLines%NOTFOUND;
  Elsif (P_Partial_Copy_YN = 'Y') then
   EXIT WHEN partialLines%NOTFOUND;
  End If;

   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'ID='||l_id||',Line Num='||l_line_number||', Cle ID='||l_cle_id
                    );
   End If;

  IF (l_cle_id IS NULL) then
    IF (l_topline_num_initialized = 'N') then
     IF (P_Partial_Copy_YN = 'N') then
       l_topline_no := 1;
     ELSIF (P_Partial_Copy_YN = 'Y') then
      IF (P_Target_Contract_New_YN = 'Y') then
       l_topline_no := 1;
      ELSIF (P_Target_Contract_New_YN = 'N') then
        Begin
         SELECT nvl(max(to_number(line_number)),0)
         INTO
         l_topline_no
         FROM
         OKC_K_LINES_B
         WHERE CLE_ID IS NULL
         AND DNZ_CHR_ID = P_To_Chr_ID
	 AND ID NOT IN (Select a.id from OKC_K_LINES_B_TEMP a);
        End;
        l_topline_no := l_topline_no + 1;
      END IF;
     END IF;
     l_topline_num_initialized := 'Y';
    END IF;

    update okc_k_lines_b
    set line_number = l_topline_no
    where id = l_id;

     l_topline_no := l_topline_no + 1;

  ELSIF (l_cle_id IS NOT NULL) then
    IF (l_current_cle_id <> l_cle_id) then
      l_current_cle_id := l_cle_id;
      l_subline_num_initialized := 'N';
     IF (l_subline_num_initialized = 'N') then
      IF (P_Partial_Copy_YN = 'N') then
       l_subline_no := 1;
      ELSIF (P_Partial_Copy_YN = 'Y') then
       IF (P_Target_Contract_New_YN = 'Y') then
         l_subline_no := 1;
       ELSIF (P_Target_Contract_New_YN = 'N') then
         Begin
          SELECT nvl(max(to_number(line_number)),0)
          INTO
          l_subline_no
          FROM
          OKC_K_LINES_B
          WHERE CLE_ID = l_cle_id
          AND LSE_ID in (7,8,9,10,11,13,25,35)
          AND ID NOT IN (Select a.id from OKC_K_LINES_B_TEMP a);
         End;
         l_subline_no := l_subline_no + 1;
       END IF;
      END IF;
      l_subline_num_initialized := 'Y';
     END IF;
    END IF;

    update okc_k_lines_b
    set line_number = l_subline_no
    where id = l_id;

    l_subline_no := l_subline_no + 1;

  END IF;

  END LOOP;
  If (allLines%ISOPEN) then
   CLOSE allLines;
  Elsif (partialLines%ISOPEN) then
   CLOSE partialLines;
  End If;

    EXCEPTION
      WHEN OTHERS THEN
	  OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_unexpected, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.GenerateNewLineNumber'
                        ,'EXCEPTION in GenerateNewLineNumber '||SQLERRM
                         );
        END IF;
      END IF;

	  IF allLines%ISOPEN THEN
	    CLOSE allLines;
          Elsif partialLines%ISOPEN THEN
            CLOSE partialLines;
	  End If;
       OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
	  x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

 End GenerateNewLineNumber;

 --===================================================
 -- copy_okc_k_lines_tl
 -- Parameters: P_From_Chr_ID : Header ID of source contract
 --  	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
  --====================================================
 PROCEDURE copy_okc_k_lines_tl(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

 l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_K_LINES_TL';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOkcLinesTLFull(P_To_Chr_ID IN NUMBER) IS
 SELECT
   OkcTL.ID		AS OkcTL_OldID
  ,OkcB.ID		AS OkcTL_NewID
  ,OkcTL.LANGUAGE	AS OkcTL_LANGUAGE
  ,OkcTL.SOURCE_LANG	AS OkcTL_SOURCE_LANG
  ,OkcTL.SFWT_FLAG	AS OkcTL_SFWT_FLAG
  ,OkcTL.NAME		AS OkcTL_NAME
  ,OkcTL.COMMENTS	AS OkcTL_COMMENTS
  ,OkcTL.ITEM_DESCRIPTION AS OkcTL_ITEM_DESCRIPTION
  ,OkcTL.BLOCK23TEXT	AS OkcTL_BLOCK23TEXT
  ,OkcTL.SECURITY_GROUP_ID AS OkcTL_SECURITY_GROUP_ID
  ,OkcTL.OKE_BOE_DESCRIPTION AS OkcTL_OKE_BOE_DESCRIPTION
  ,OkcTL.COGNOMEN	AS OkcTL_COGNOMEN
 FROM
  OKC_K_LINES_TL okcTL
 ,OKC_K_LINES_B okcB
 where
 okcB.ORIG_SYSTEM_ID1 = okcTL.ID
 AND okcB.DNZ_CHR_ID = P_To_Chr_ID;

 CURSOR GetOkcLinesTLPartial(P_To_Chr_ID IN NUMBER) IS
  SELECT
   OkcTL.ID             AS OkcTL_OldID
  ,OkcBT.ID              AS OkcTL_NewID
  ,OkcTL.LANGUAGE       AS OkcTL_LANGUAGE
  ,OkcTL.SOURCE_LANG    AS OkcTL_SOURCE_LANG
  ,OkcTL.SFWT_FLAG      AS OkcTL_SFWT_FLAG
  ,OkcTL.NAME           AS OkcTL_NAME
  ,OkcTL.COMMENTS       AS OkcTL_COMMENTS
  ,OkcTL.ITEM_DESCRIPTION AS OkcTL_ITEM_DESCRIPTION
  ,OkcTL.BLOCK23TEXT    AS OkcTL_BLOCK23TEXT
  ,OkcTL.SECURITY_GROUP_ID AS OkcTL_SECURITY_GROUP_ID
  ,OkcTL.OKE_BOE_DESCRIPTION AS OkcTL_OKE_BOE_DESCRIPTION
  ,OkcTL.COGNOMEN       AS OkcTL_COGNOMEN
 FROM
  OKC_K_LINES_TL okcTL
 ,OKC_K_LINES_B_TEMP okcBT
 where
 okcBT.ORIG_SYSTEM_ID1 = okcTL.ID
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;


 Begin
  IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name
                        ,'begin: '
                         ||',P_From_Chr_ID='||P_From_Chr_ID
                         ||',P_To_Chr_ID='||P_To_Chr_ID
                         ||',P_Partial_Copy_YN='||P_Partial_Copy_YN
                         );
      END IF;
  END IF;
  x_return_status := l_return_status;

  IF (P_Partial_Copy_YN = 'N') THEN
   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
     FND_LOG.string(FND_LOG.level_statement,l_module_name,'Opening GetOkcLinesTLFull');
   End If;
   OPEN GetOkcLinesTLFull(P_To_Chr_ID => P_To_Chr_ID);
  ELSIF (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) THEN
   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
     FND_LOG.string(FND_LOG.level_statement,l_module_name,'Opening GetOkcLinesTLPartial');
   End If;
   OPEN GetOkcLinesTLPartial(P_To_Chr_ID => P_To_Chr_ID);
  END IF;

  LOOP
  IF (P_Partial_Copy_YN = 'N') THEN
   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
     FND_LOG.string(FND_LOG.level_statement,l_module_name,'FETCHing from GetOkcLinesTLFull');
   End If;
   FETCH GetOkcLinesTLFull BULK COLLECT INTO
   OKCLinesTLRecTab.OkcTL_OldID
  ,OKCLinesTLRecTab.OkcTL_NewID
  ,OKCLinesTLRecTab.OkcTL_LANGUAGE
  ,OkcLinesTLRecTab.OkcTL_SFWT_FLAG
  ,OKCLinesTLRecTab.OkcTL_SOURCE_LANG
  ,OKCLinesTLRecTab.OkcTL_NAME
  ,OKCLinesTLRecTab.OkcTL_COMMENTS
  ,OKCLinesTLRecTab.OkcTL_ITEM_DESCRIPTION
  ,OKCLinesTLRecTab.OkcTL_BLOCK23TEXT
  ,OKCLinesTLRecTab.OkcTL_SECURITY_GROUP_ID
  ,OKCLinesTLRecTab.OkcTL_OKE_BOE_DESCRIPTION
  ,OKCLinesTLRecTab.OkcTL_COGNOMEN LIMIT G_BULK_FETCH_LIMIT;
  ELSIF (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
     FND_LOG.string(FND_LOG.level_statement,l_module_name,'FETCHing from GetOkcLinesTLPartial');
   End If;
   FETCH GetOkcLinesTLPartial BULK COLLECT INTO
   OKCLinesTLRecTab.OkcTL_OldID
  ,OKCLinesTLRecTab.OkcTL_NewID
  ,OKCLinesTLRecTab.OkcTL_LANGUAGE
  ,OkcLinesTLRecTab.OkcTL_SFWT_FLAG
  ,OKCLinesTLRecTab.OkcTL_SOURCE_LANG
  ,OKCLinesTLRecTab.OkcTL_NAME
  ,OKCLinesTLRecTab.OkcTL_COMMENTS
  ,OKCLinesTLRecTab.OkcTL_ITEM_DESCRIPTION
  ,OKCLinesTLRecTab.OkcTL_BLOCK23TEXT
  ,OKCLinesTLRecTab.OkcTL_SECURITY_GROUP_ID
  ,OKCLinesTLRecTab.OkcTL_OKE_BOE_DESCRIPTION
  ,OKCLinesTLRecTab.OkcTL_COGNOMEN LIMIT G_BULK_FETCH_LIMIT;
  END IF;

  FORALL i IN OKCLinesTLRecTab.OkcTL_NewID.FIRST .. OKCLinesTLRecTab.OkcTL_NewID.LAST
  INSERT INTO OKC_K_LINES_TL
  (
    ID
   ,LANGUAGE
   ,SOURCE_LANG
   ,SFWT_FLAG
   ,NAME
   ,COMMENTS
   ,ITEM_DESCRIPTION
   ,BLOCK23TEXT
   ,CREATED_BY
   ,CREATION_DATE
   ,LAST_UPDATED_BY
   ,LAST_UPDATE_DATE
   ,LAST_UPDATE_LOGIN
   ,SECURITY_GROUP_ID
   ,OKE_BOE_DESCRIPTION
   ,COGNOMEN
   )
  SELECT
  OKCLinesTLRecTab.OkcTL_NewID(i)
 ,OKCLinesTLRecTab.OkcTL_LANGUAGE(i)
 ,OKCLinesTLRecTab.OkcTL_SOURCE_LANG(i)
 ,OKCLinesTLRecTab.OkcTL_SFWT_FLAG(i)
 ,OKCLinesTLRecTab.OkcTL_NAME(i)
 ,OKCLinesTLRecTab.OkcTL_COMMENTS(i)
 ,OKCLinesTLRecTab.OkcTL_ITEM_DESCRIPTION(i)
 ,OKCLinesTLRecTab.OkcTL_BLOCK23TEXT(i)
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.LOGIN_ID
 ,OKCLinesTLRecTab.OkcTL_SECURITY_GROUP_ID(i)
 ,OKCLinesTLRecTab.OkcTL_OKE_BOE_DESCRIPTION(i)
 ,OKCLinesTLRecTab.OkcTL_COGNOMEN(i)
  FROM DUAL;

   IF (P_Partial_Copy_YN = 'N') THEN
     EXIT WHEN GetOkcLinesTLFull%NOTFOUND;
   ELSIF (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) THEN
     EXIT WHEN GetOkcLinesTLPartial%NOTFOUND;
   END IF;

  END LOOP;

    IF GetOkcLinesTLFull%ISOPEN THEN
       CLOSE GetOkcLinesTLFull;
    ELSIF GetOkcLinesTLPartial%ISOPEN THEN
       CLOSE GetOkcLinesTLPartial;
    END IF;

      EXCEPTION
        WHEN OTHERS THEN
          IF GetOkcLinesTLFull%ISOPEN THEN
           CLOSE GetOkcLinesTLFull;
          ELSIF GetOkcLinesTLPartial%ISOPEN THEN
           CLOSE GetOkcLinesTLPartial;
          END IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
	  RAISE;

 End copy_okc_k_lines_tl;


--===================================================
--  copy_okc_price_att_values
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
--  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
--				    or as part of component copy from UI (value = 'Y')
--	      P_Target_Contract_New_YN : Flag to indicate if copy process was copying to an existing contract (value = 'N')
--					 or if a new contract header was created as part of the copy process (value = 'Y'). This
--					 flag gets set to 'Y' just before the call to copy_contract_header procedure in
--					 copy_components
--	      If (P_Partial_Copy_YN = 'N') rows for both Header and Lines are copied (Full Contract copy)
--		 use cursor GetOkcPAVFull
--	      If (P_Partial_Copy_YN = 'Y') then
--		If (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT = 0) then
--		  Only rows for only Header , use cursor GetOkcPAVPartial_H
--		Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT > 0) then
--		  Both rows for both Header and Lines need to be copied, use cursor GetOkcPAVPartial_HNL
--		Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Tbl.COUNT > 0) then
--		  Only rows for chosen Lines are copied, use cursor GetOkcPAVPartial_L
--		Elsif (P_Target_Contract_New_YN = 'N') and P_Lines_Tbl.COUNT = 0) then
--		  nothing needs to be copied, no copy needed
--		End If
--            End If
--====================================================
 PROCEDURE copy_okc_price_att_values(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

 l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_PRICE_ATT_VALUES';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 CURSOR GetOkcPAVFull IS
 SELECT
  okcPAV.ID AS okcPAV_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPAV_NewID
 ,okcPAV.FLEX_TITLE AS okcPAV_FLEX_TITLE
 ,okcPAV.PRICING_CONTEXT AS okcPAV_PRICING_CONTEXT
 ,okcPAV.PRICING_ATTRIBUTE1 AS okcPAV_PRICING_ATTRIBUTE1
 ,okcH.ID AS okcPAV_NewChrID
 ,okcPAV.PRICING_ATTRIBUTE2 AS okcPAV_PRICING_ATTRIBUTE2
 ,NULL AS okcPAV_NewCleID
 ,okcPAV.PRICING_ATTRIBUTE3 AS okcPAV_PRICING_ATTRIBUTE3
 ,okcPAV.PRICING_ATTRIBUTE4 AS okcPAV_PRICING_ATTRIBUTE4
 ,okcPAV.PRICING_ATTRIBUTE5 AS okcPAV_PRICING_ATTRIBUTE5
 ,okcPAV.PRICING_ATTRIBUTE6 AS okcPAV_PRICING_ATTRIBUTE6
 ,okcPAV.PRICING_ATTRIBUTE7 AS okcPAV_PRICING_ATTRIBUTE7
 ,okcPAV.PRICING_ATTRIBUTE8 AS okcPAV_PRICING_ATTRIBUTE8
 ,okcPAV.PRICING_ATTRIBUTE9 AS okcPAV_PRICING_ATTRIBUTE9
 ,okcPAV.PRICING_ATTRIBUTE10 AS okcPAV_PRICING_ATTRIBUTE10
 ,okcPAV.PRICING_ATTRIBUTE11 AS okcPAV_PRICING_ATTRIBUTE11
 ,okcPAV.PRICING_ATTRIBUTE12 AS okcPAV_PRICING_ATTRIBUTE12
 ,okcPAV.PRICING_ATTRIBUTE13 AS okcPAV_PRICING_ATTRIBUTE13
 ,okcPAV.PRICING_ATTRIBUTE14 AS okcPAV_PRICING_ATTRIBUTE14
 ,okcPAV.PRICING_ATTRIBUTE15 AS okcPAV_PRICING_ATTRIBUTE15
 ,okcPAV.PRICING_ATTRIBUTE16 AS okcPAV_PRICING_ATTRIBUTE16
 ,okcPAV.PRICING_ATTRIBUTE17 AS okcPAV_PRICING_ATTRIBUTE17
 ,okcPAV.PRICING_ATTRIBUTE18 AS okcPAV_PRICING_ATTRIBUTE18
 ,okcPAV.PRICING_ATTRIBUTE19 AS okcPAV_PRICING_ATTRIBUTE19
 ,okcPAV.PRICING_ATTRIBUTE20 AS okcPAV_PRICING_ATTRIBUTE20
 ,okcPAV.PRICING_ATTRIBUTE21 AS okcPAV_PRICING_ATTRIBUTE21
 ,okcPAV.PRICING_ATTRIBUTE22 AS okcPAV_PRICING_ATTRIBUTE22
 ,okcPAV.PRICING_ATTRIBUTE23 AS okcPAV_PRICING_ATTRIBUTE23
 ,okcPAV.PRICING_ATTRIBUTE24 AS okcPAV_PRICING_ATTRIBUTE24
 ,okcPAV.PRICING_ATTRIBUTE25 AS okcPAV_PRICING_ATTRIBUTE25
 ,okcPAV.PRICING_ATTRIBUTE26 AS okcPAV_PRICING_ATTRIBUTE26
 ,okcPAV.PRICING_ATTRIBUTE27 AS okcPAV_PRICING_ATTRIBUTE27
 ,okcPAV.PRICING_ATTRIBUTE28 AS okcPAV_PRICING_ATTRIBUTE28
 ,okcPAV.PRICING_ATTRIBUTE29 AS okcPAV_PRICING_ATTRIBUTE29
 ,okcPAV.PRICING_ATTRIBUTE30 AS okcPAV_PRICING_ATTRIBUTE30
 ,okcPAV.PRICING_ATTRIBUTE31 AS okcPAV_PRICING_ATTRIBUTE31
 ,okcPAV.PRICING_ATTRIBUTE32 AS okcPAV_PRICING_ATTRIBUTE32
 ,okcPAV.PRICING_ATTRIBUTE33 AS okcPAV_PRICING_ATTRIBUTE33
 ,okcPAV.PRICING_ATTRIBUTE34 AS okcPAV_PRICING_ATTRIBUTE34
 ,okcPAV.PRICING_ATTRIBUTE35 AS okcPAV_PRICING_ATTRIBUTE35
 ,okcPAV.PRICING_ATTRIBUTE36 AS okcPAV_PRICING_ATTRIBUTE36
 ,okcPAV.PRICING_ATTRIBUTE37 AS okcPAV_PRICING_ATTRIBUTE37
 ,okcPAV.PRICING_ATTRIBUTE38 AS okcPAV_PRICING_ATTRIBUTE38
 ,okcPAV.PRICING_ATTRIBUTE39 AS okcPAV_PRICING_ATTRIBUTE39
 ,okcPAV.PRICING_ATTRIBUTE40 AS okcPAV_PRICING_ATTRIBUTE40
 ,okcPAV.PRICING_ATTRIBUTE41 AS okcPAV_PRICING_ATTRIBUTE41
 ,okcPAV.PRICING_ATTRIBUTE42 AS okcPAV_PRICING_ATTRIBUTE42
 ,okcPAV.PRICING_ATTRIBUTE43 AS okcPAV_PRICING_ATTRIBUTE43
 ,okcPAV.PRICING_ATTRIBUTE44 AS okcPAV_PRICING_ATTRIBUTE44
 ,okcPAV.PRICING_ATTRIBUTE45 AS okcPAV_PRICING_ATTRIBUTE45
 ,okcPAV.PRICING_ATTRIBUTE46 AS okcPAV_PRICING_ATTRIBUTE46
 ,okcPAV.PRICING_ATTRIBUTE47 AS okcPAV_PRICING_ATTRIBUTE47
 ,okcPAV.PRICING_ATTRIBUTE48 AS okcPAV_PRICING_ATTRIBUTE48
 ,okcPAV.PRICING_ATTRIBUTE49 AS okcPAV_PRICING_ATTRIBUTE49
 ,okcPAV.PRICING_ATTRIBUTE50 AS okcPAV_PRICING_ATTRIBUTE50
 ,okcPAV.PRICING_ATTRIBUTE51 AS okcPAV_PRICING_ATTRIBUTE51
 ,okcPAV.PRICING_ATTRIBUTE52 AS okcPAV_PRICING_ATTRIBUTE52
 ,okcPAV.PRICING_ATTRIBUTE53 AS okcPAV_PRICING_ATTRIBUTE53
 ,okcPAV.PRICING_ATTRIBUTE54 AS okcPAV_PRICING_ATTRIBUTE54
 ,okcPAV.PRICING_ATTRIBUTE55 AS okcPAV_PRICING_ATTRIBUTE55
 ,okcPAV.PRICING_ATTRIBUTE56 AS okcPAV_PRICING_ATTRIBUTE56
 ,okcPAV.PRICING_ATTRIBUTE57 AS okcPAV_PRICING_ATTRIBUTE57
 ,okcPAV.PRICING_ATTRIBUTE58 AS okcPAV_PRICING_ATTRIBUTE58
 ,okcPAV.PRICING_ATTRIBUTE59 AS okcPAV_PRICING_ATTRIBUTE59
 ,okcPAV.PRICING_ATTRIBUTE60 AS okcPAV_PRICING_ATTRIBUTE60
 ,okcPAV.PRICING_ATTRIBUTE61 AS okcPAV_PRICING_ATTRIBUTE61
 ,okcPAV.PRICING_ATTRIBUTE62 AS okcPAV_PRICING_ATTRIBUTE62
 ,okcPAV.PRICING_ATTRIBUTE63 AS okcPAV_PRICING_ATTRIBUTE63
 ,okcPAV.PRICING_ATTRIBUTE64 AS okcPAV_PRICING_ATTRIBUTE64
 ,okcPAV.PRICING_ATTRIBUTE65 AS okcPAV_PRICING_ATTRIBUTE65
 ,okcPAV.PRICING_ATTRIBUTE66 AS okcPAV_PRICING_ATTRIBUTE66
 ,okcPAV.PRICING_ATTRIBUTE67 AS okcPAV_PRICING_ATTRIBUTE67
 ,okcPAV.PRICING_ATTRIBUTE68 AS okcPAV_PRICING_ATTRIBUTE68
 ,okcPAV.PRICING_ATTRIBUTE69 AS okcPAV_PRICING_ATTRIBUTE69
 ,okcPAV.PRICING_ATTRIBUTE70 AS okcPAV_PRICING_ATTRIBUTE70
 ,okcPAV.PRICING_ATTRIBUTE71 AS okcPAV_PRICING_ATTRIBUTE71
 ,okcPAV.PRICING_ATTRIBUTE72 AS okcPAV_PRICING_ATTRIBUTE72
 ,okcPAV.PRICING_ATTRIBUTE73 AS okcPAV_PRICING_ATTRIBUTE73
 ,okcPAV.PRICING_ATTRIBUTE74 AS okcPAV_PRICING_ATTRIBUTE74
 ,okcPAV.PRICING_ATTRIBUTE75 AS okcPAV_PRICING_ATTRIBUTE75
 ,okcPAV.PRICING_ATTRIBUTE76 AS okcPAV_PRICING_ATTRIBUTE76
 ,okcPAV.PRICING_ATTRIBUTE77 AS okcPAV_PRICING_ATTRIBUTE77
 ,okcPAV.PRICING_ATTRIBUTE78 AS okcPAV_PRICING_ATTRIBUTE78
 ,okcPAV.PRICING_ATTRIBUTE79 AS okcPAV_PRICING_ATTRIBUTE79
 ,okcPAV.PRICING_ATTRIBUTE80 AS okcPAV_PRICING_ATTRIBUTE80
 ,okcPAV.PRICING_ATTRIBUTE81 AS okcPAV_PRICING_ATTRIBUTE81
 ,okcPAV.PRICING_ATTRIBUTE82 AS okcPAV_PRICING_ATTRIBUTE82
 ,okcPAV.PRICING_ATTRIBUTE83 AS okcPAV_PRICING_ATTRIBUTE83
 ,okcPAV.PRICING_ATTRIBUTE84 AS okcPAV_PRICING_ATTRIBUTE84
 ,okcPAV.PRICING_ATTRIBUTE85 AS okcPAV_PRICING_ATTRIBUTE85
 ,okcPAV.PRICING_ATTRIBUTE86 AS okcPAV_PRICING_ATTRIBUTE86
 ,okcPAV.PRICING_ATTRIBUTE87 AS okcPAV_PRICING_ATTRIBUTE87
 ,okcPAV.PRICING_ATTRIBUTE88 AS okcPAV_PRICING_ATTRIBUTE88
 ,okcPAV.PRICING_ATTRIBUTE89 AS okcPAV_PRICING_ATTRIBUTE89
 ,okcPAV.PRICING_ATTRIBUTE90 AS okcPAV_PRICING_ATTRIBUTE90
 ,okcPAV.PRICING_ATTRIBUTE91 AS okcPAV_PRICING_ATTRIBUTE91
 ,okcPAV.PRICING_ATTRIBUTE92 AS okcPAV_PRICING_ATTRIBUTE92
 ,okcPAV.PRICING_ATTRIBUTE93 AS okcPAV_PRICING_ATTRIBUTE93
 ,okcPAV.PRICING_ATTRIBUTE94 AS okcPAV_PRICING_ATTRIBUTE94
 ,okcPAV.PRICING_ATTRIBUTE95 AS okcPAV_PRICING_ATTRIBUTE95
 ,okcPAV.PRICING_ATTRIBUTE96 AS okcPAV_PRICING_ATTRIBUTE96
 ,okcPAV.PRICING_ATTRIBUTE97 AS okcPAV_PRICING_ATTRIBUTE97
 ,okcPAV.PRICING_ATTRIBUTE98 AS okcPAV_PRICING_ATTRIBUTE98
 ,okcPAV.PRICING_ATTRIBUTE99 AS okcPAV_PRICING_ATTRIBUTE99
 ,okcPAV.PRICING_ATTRIBUTE100 AS okcPAV_PRICING_ATTRIBUTE100
 ,okcPAV.QUALIFIER_CONTEXT AS okcPAV_QUALIFIER_CONTEXT
 ,okcPAV.QUALIFIER_ATTRIBUTE1 AS okcPAV_QUALIFIER_ATTRIBUTE1
 ,okcPAV.QUALIFIER_ATTRIBUTE2 AS okcPAV_QUALIFIER_ATTRIBUTE2
 ,okcPAV.QUALIFIER_ATTRIBUTE3 AS okcPAV_QUALIFIER_ATTRIBUTE3
 ,okcPAV.QUALIFIER_ATTRIBUTE4 AS okcPAV_QUALIFIER_ATTRIBUTE4
 ,okcPAV.QUALIFIER_ATTRIBUTE5 AS okcPAV_QUALIFIER_ATTRIBUTE5
 ,okcPAV.QUALIFIER_ATTRIBUTE6 AS okcPAV_QUALIFIER_ATTRIBUTE6
 ,okcPAV.QUALIFIER_ATTRIBUTE7 AS okcPAV_QUALIFIER_ATTRIBUTE7
 ,okcPAV.QUALIFIER_ATTRIBUTE8 AS okcPAV_QUALIFIER_ATTRIBUTE8
 ,okcPAV.QUALIFIER_ATTRIBUTE9 AS okcPAV_QUALIFIER_ATTRIBUTE9
 ,okcPAV.QUALIFIER_ATTRIBUTE10 AS okcPAV_QUALIFIER_ATTRIBUTE10
 ,okcPAV.QUALIFIER_ATTRIBUTE11 AS okcPAV_QUALIFIER_ATTRIBUTE11
 ,okcPAV.QUALIFIER_ATTRIBUTE12 AS okcPAV_QUALIFIER_ATTRIBUTE12
 ,okcPAV.QUALIFIER_ATTRIBUTE13 AS okcPAV_QUALIFIER_ATTRIBUTE13
 ,okcPAV.QUALIFIER_ATTRIBUTE14 AS okcPAV_QUALIFIER_ATTRIBUTE14
 ,okcPAV.QUALIFIER_ATTRIBUTE15 AS okcPAV_QUALIFIER_ATTRIBUTE15
 ,okcPAV.QUALIFIER_ATTRIBUTE16 AS okcPAV_QUALIFIER_ATTRIBUTE16
 ,okcPAV.QUALIFIER_ATTRIBUTE17 AS okcPAV_QUALIFIER_ATTRIBUTE17
 ,okcPAV.QUALIFIER_ATTRIBUTE18 AS okcPAV_QUALIFIER_ATTRIBUTE18
 ,okcPAV.QUALIFIER_ATTRIBUTE19 AS okcPAV_QUALIFIER_ATTRIBUTE19
 ,okcPAV.QUALIFIER_ATTRIBUTE20 AS okcPAV_QUALIFIER_ATTRIBUTE20
 ,okcPAV.QUALIFIER_ATTRIBUTE21 AS okcPAV_QUALIFIER_ATTRIBUTE21
 ,okcPAV.QUALIFIER_ATTRIBUTE22 AS okcPAV_QUALIFIER_ATTRIBUTE22
 ,okcPAV.QUALIFIER_ATTRIBUTE23 AS okcPAV_QUALIFIER_ATTRIBUTE23
 ,okcPAV.QUALIFIER_ATTRIBUTE24 AS okcPAV_QUALIFIER_ATTRIBUTE24
 ,okcPAV.QUALIFIER_ATTRIBUTE25 AS okcPAV_QUALIFIER_ATTRIBUTE25
 ,okcPAV.QUALIFIER_ATTRIBUTE26 AS okcPAV_QUALIFIER_ATTRIBUTE26
 ,okcPAV.QUALIFIER_ATTRIBUTE27 AS okcPAV_QUALIFIER_ATTRIBUTE27
 ,okcPAV.QUALIFIER_ATTRIBUTE28 AS okcPAV_QUALIFIER_ATTRIBUTE28
 ,okcPAV.QUALIFIER_ATTRIBUTE29 AS okcPAV_QUALIFIER_ATTRIBUTE29
 ,okcPAV.QUALIFIER_ATTRIBUTE30 AS okcPAV_QUALIFIER_ATTRIBUTE30
 ,okcPAV.QUALIFIER_ATTRIBUTE31 AS okcPAV_QUALIFIER_ATTRIBUTE31
 ,okcPAV.QUALIFIER_ATTRIBUTE32 AS okcPAV_QUALIFIER_ATTRIBUTE32
 ,okcPAV.QUALIFIER_ATTRIBUTE33 AS okcPAV_QUALIFIER_ATTRIBUTE33
 ,okcPAV.QUALIFIER_ATTRIBUTE34 AS okcPAV_QUALIFIER_ATTRIBUTE34
 ,okcPAV.QUALIFIER_ATTRIBUTE35 AS okcPAV_QUALIFIER_ATTRIBUTE35
 ,okcPAV.QUALIFIER_ATTRIBUTE36 AS okcPAV_QUALIFIER_ATTRIBUTE36
 ,okcPAV.QUALIFIER_ATTRIBUTE37 AS okcPAV_QUALIFIER_ATTRIBUTE37
 ,okcPAV.QUALIFIER_ATTRIBUTE38 AS okcPAV_QUALIFIER_ATTRIBUTE38
 ,okcPAV.QUALIFIER_ATTRIBUTE39 AS okcPAV_QUALIFIER_ATTRIBUTE39
 ,okcPAV.QUALIFIER_ATTRIBUTE40 AS okcPAV_QUALIFIER_ATTRIBUTE40
 ,okcPAV.QUALIFIER_ATTRIBUTE41 AS okcPAV_QUALIFIER_ATTRIBUTE41
 ,okcPAV.QUALIFIER_ATTRIBUTE42 AS okcPAV_QUALIFIER_ATTRIBUTE42
 ,okcPAV.QUALIFIER_ATTRIBUTE43 AS okcPAV_QUALIFIER_ATTRIBUTE43
 ,okcPAV.QUALIFIER_ATTRIBUTE44 AS okcPAV_QUALIFIER_ATTRIBUTE44
 ,okcPAV.QUALIFIER_ATTRIBUTE45 AS okcPAV_QUALIFIER_ATTRIBUTE45
 ,okcPAV.QUALIFIER_ATTRIBUTE46 AS okcPAV_QUALIFIER_ATTRIBUTE46
 ,okcPAV.QUALIFIER_ATTRIBUTE47 AS okcPAV_QUALIFIER_ATTRIBUTE47
 ,okcPAV.QUALIFIER_ATTRIBUTE48 AS okcPAV_QUALIFIER_ATTRIBUTE48
 ,okcPAV.QUALIFIER_ATTRIBUTE49 AS okcPAV_QUALIFIER_ATTRIBUTE49
 ,okcPAV.QUALIFIER_ATTRIBUTE50 AS okcPAV_QUALIFIER_ATTRIBUTE50
 ,okcPAV.QUALIFIER_ATTRIBUTE51 AS okcPAV_QUALIFIER_ATTRIBUTE51
 ,okcPAV.QUALIFIER_ATTRIBUTE52 AS okcPAV_QUALIFIER_ATTRIBUTE52
 ,okcPAV.QUALIFIER_ATTRIBUTE53 AS okcPAV_QUALIFIER_ATTRIBUTE53
 ,okcPAV.QUALIFIER_ATTRIBUTE54 AS okcPAV_QUALIFIER_ATTRIBUTE54
 ,okcPAV.QUALIFIER_ATTRIBUTE55 AS okcPAV_QUALIFIER_ATTRIBUTE55
 ,okcPAV.QUALIFIER_ATTRIBUTE56 AS okcPAV_QUALIFIER_ATTRIBUTE56
 ,okcPAV.QUALIFIER_ATTRIBUTE57 AS okcPAV_QUALIFIER_ATTRIBUTE57
 ,okcPAV.QUALIFIER_ATTRIBUTE58 AS okcPAV_QUALIFIER_ATTRIBUTE58
 ,okcPAV.QUALIFIER_ATTRIBUTE59 AS okcPAV_QUALIFIER_ATTRIBUTE59
 ,okcPAV.QUALIFIER_ATTRIBUTE60 AS okcPAV_QUALIFIER_ATTRIBUTE60
 ,okcPAV.QUALIFIER_ATTRIBUTE61 AS okcPAV_QUALIFIER_ATTRIBUTE61
 ,okcPAV.QUALIFIER_ATTRIBUTE62 AS okcPAV_QUALIFIER_ATTRIBUTE62
 ,okcPAV.QUALIFIER_ATTRIBUTE63 AS okcPAV_QUALIFIER_ATTRIBUTE63
 ,okcPAV.QUALIFIER_ATTRIBUTE64 AS okcPAV_QUALIFIER_ATTRIBUTE64
 ,okcPAV.QUALIFIER_ATTRIBUTE65 AS okcPAV_QUALIFIER_ATTRIBUTE65
 ,okcPAV.QUALIFIER_ATTRIBUTE66 AS okcPAV_QUALIFIER_ATTRIBUTE66
 ,okcPAV.QUALIFIER_ATTRIBUTE67 AS okcPAV_QUALIFIER_ATTRIBUTE67
 ,okcPAV.QUALIFIER_ATTRIBUTE68 AS okcPAV_QUALIFIER_ATTRIBUTE68
 ,okcPAV.QUALIFIER_ATTRIBUTE69 AS okcPAV_QUALIFIER_ATTRIBUTE69
 ,okcPAV.QUALIFIER_ATTRIBUTE70 AS okcPAV_QUALIFIER_ATTRIBUTE70
 ,okcPAV.QUALIFIER_ATTRIBUTE71 AS okcPAV_QUALIFIER_ATTRIBUTE71
 ,okcPAV.QUALIFIER_ATTRIBUTE72 AS okcPAV_QUALIFIER_ATTRIBUTE72
 ,okcPAV.QUALIFIER_ATTRIBUTE73 AS okcPAV_QUALIFIER_ATTRIBUTE73
 ,okcPAV.QUALIFIER_ATTRIBUTE74 AS okcPAV_QUALIFIER_ATTRIBUTE74
 ,okcPAV.QUALIFIER_ATTRIBUTE75 AS okcPAV_QUALIFIER_ATTRIBUTE75
 ,okcPAV.QUALIFIER_ATTRIBUTE76 AS okcPAV_QUALIFIER_ATTRIBUTE76
 ,okcPAV.QUALIFIER_ATTRIBUTE77 AS okcPAV_QUALIFIER_ATTRIBUTE77
 ,okcPAV.QUALIFIER_ATTRIBUTE78 AS okcPAV_QUALIFIER_ATTRIBUTE78
 ,okcPAV.QUALIFIER_ATTRIBUTE79 AS okcPAV_QUALIFIER_ATTRIBUTE79
 ,okcPAV.QUALIFIER_ATTRIBUTE80 AS okcPAV_QUALIFIER_ATTRIBUTE80
 ,okcPAV.QUALIFIER_ATTRIBUTE81 AS okcPAV_QUALIFIER_ATTRIBUTE81
 ,okcPAV.QUALIFIER_ATTRIBUTE82 AS okcPAV_QUALIFIER_ATTRIBUTE82
 ,okcPAV.QUALIFIER_ATTRIBUTE83 AS okcPAV_QUALIFIER_ATTRIBUTE83
 ,okcPAV.QUALIFIER_ATTRIBUTE84 AS okcPAV_QUALIFIER_ATTRIBUTE84
 ,okcPAV.QUALIFIER_ATTRIBUTE85 AS okcPAV_QUALIFIER_ATTRIBUTE85
 ,okcPAV.QUALIFIER_ATTRIBUTE86 AS okcPAV_QUALIFIER_ATTRIBUTE86
 ,okcPAV.QUALIFIER_ATTRIBUTE87 AS okcPAV_QUALIFIER_ATTRIBUTE87
 ,okcPAV.QUALIFIER_ATTRIBUTE88 AS okcPAV_QUALIFIER_ATTRIBUTE88
 ,okcPAV.QUALIFIER_ATTRIBUTE89 AS okcPAV_QUALIFIER_ATTRIBUTE89
 ,okcPAV.QUALIFIER_ATTRIBUTE90 AS okcPAV_QUALIFIER_ATTRIBUTE90
 ,okcPAV.QUALIFIER_ATTRIBUTE91 AS okcPAV_QUALIFIER_ATTRIBUTE91
 ,okcPAV.QUALIFIER_ATTRIBUTE92 AS okcPAV_QUALIFIER_ATTRIBUTE92
 ,okcPAV.QUALIFIER_ATTRIBUTE93 AS okcPAV_QUALIFIER_ATTRIBUTE93
 ,okcPAV.QUALIFIER_ATTRIBUTE94 AS okcPAV_QUALIFIER_ATTRIBUTE94
 ,okcPAV.QUALIFIER_ATTRIBUTE95 AS okcPAV_QUALIFIER_ATTRIBUTE95
 ,okcPAV.QUALIFIER_ATTRIBUTE96 AS okcPAV_QUALIFIER_ATTRIBUTE96
 ,okcPAV.QUALIFIER_ATTRIBUTE97 AS okcPAV_QUALIFIER_ATTRIBUTE97
 ,okcPAV.QUALIFIER_ATTRIBUTE98 AS okcPAV_QUALIFIER_ATTRIBUTE98
 ,okcPAV.QUALIFIER_ATTRIBUTE99 AS okcPAV_QUALIFIER_ATTRIBUTE99
 ,okcPAV.QUALIFIER_ATTRIBUTE100 AS okcPAV_QUALIFIER_ATTRIBUTE100
 ,okcPAV.SECURITY_GROUP_ID AS okcPAV_SECURITY_GROUP_ID
 ,okcPAV.PROGRAM_APPLICATION_ID AS okcPAV_PROGRAM_APPLICATION_ID
 ,okcPAV.PROGRAM_ID AS okcPAV_PROGRAM_ID
 ,okcPAV.PROGRAM_UPDATE_DATE AS okcPAV_PROGRAM_UPDATE_DATE
 ,okcPAV.REQUEST_ID AS okcPAV_REQUEST_ID
 ,1 AS okcPAV_OBJECT_VERSION_NUMBER
 FROM
  OKC_PRICE_ATT_VALUES okcPAV
 ,OKC_K_HEADERS_B okcH
  WHERE okcPAV.CHR_ID = okcH.ORIG_SYSTEM_ID1
  and okcH.ID = P_To_Chr_ID
  and okcPAV.CLE_ID is NULL
  and okcPAV.CHR_ID = P_From_Chr_ID
  UNION
  SELECT
  okcPAV.ID AS okcPAV_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPAV_NewID
 ,okcPAV.FLEX_TITLE AS okcPAV_FLEX_TITLE
 ,okcPAV.PRICING_CONTEXT AS okcPAV_PRICING_CONTEXT
 ,okcPAV.PRICING_ATTRIBUTE1 AS okcPAV_PRICING_ATTRIBUTE1
 ,to_number(decode(okcPAV.CHR_ID,NULL,NULL,okcB.DNZ_CHR_ID)) AS okcPAV_NewChrID
 ,okcPAV.PRICING_ATTRIBUTE2 AS okcPAV_PRICING_ATTRIBUTE2
 ,okcB.ID AS okcPAV_NewCleID
 ,okcPAV.PRICING_ATTRIBUTE3 AS okcPAV_PRICING_ATTRIBUTE3
 ,okcPAV.PRICING_ATTRIBUTE4 AS okcPAV_PRICING_ATTRIBUTE4
 ,okcPAV.PRICING_ATTRIBUTE5 AS okcPAV_PRICING_ATTRIBUTE5
 ,okcPAV.PRICING_ATTRIBUTE6 AS okcPAV_PRICING_ATTRIBUTE6
 ,okcPAV.PRICING_ATTRIBUTE7 AS okcPAV_PRICING_ATTRIBUTE7
 ,okcPAV.PRICING_ATTRIBUTE8 AS okcPAV_PRICING_ATTRIBUTE8
 ,okcPAV.PRICING_ATTRIBUTE9 AS okcPAV_PRICING_ATTRIBUTE9
 ,okcPAV.PRICING_ATTRIBUTE10 AS okcPAV_PRICING_ATTRIBUTE10
 ,okcPAV.PRICING_ATTRIBUTE11 AS okcPAV_PRICING_ATTRIBUTE11
 ,okcPAV.PRICING_ATTRIBUTE12 AS okcPAV_PRICING_ATTRIBUTE12
 ,okcPAV.PRICING_ATTRIBUTE13 AS okcPAV_PRICING_ATTRIBUTE13
 ,okcPAV.PRICING_ATTRIBUTE14 AS okcPAV_PRICING_ATTRIBUTE14
 ,okcPAV.PRICING_ATTRIBUTE15 AS okcPAV_PRICING_ATTRIBUTE15
 ,okcPAV.PRICING_ATTRIBUTE16 AS okcPAV_PRICING_ATTRIBUTE16
 ,okcPAV.PRICING_ATTRIBUTE17 AS okcPAV_PRICING_ATTRIBUTE17
 ,okcPAV.PRICING_ATTRIBUTE18 AS okcPAV_PRICING_ATTRIBUTE18
 ,okcPAV.PRICING_ATTRIBUTE19 AS okcPAV_PRICING_ATTRIBUTE19
 ,okcPAV.PRICING_ATTRIBUTE20 AS okcPAV_PRICING_ATTRIBUTE20
 ,okcPAV.PRICING_ATTRIBUTE21 AS okcPAV_PRICING_ATTRIBUTE21
 ,okcPAV.PRICING_ATTRIBUTE22 AS okcPAV_PRICING_ATTRIBUTE22
 ,okcPAV.PRICING_ATTRIBUTE23 AS okcPAV_PRICING_ATTRIBUTE23
 ,okcPAV.PRICING_ATTRIBUTE24 AS okcPAV_PRICING_ATTRIBUTE24
 ,okcPAV.PRICING_ATTRIBUTE25 AS okcPAV_PRICING_ATTRIBUTE25
 ,okcPAV.PRICING_ATTRIBUTE26 AS okcPAV_PRICING_ATTRIBUTE26
 ,okcPAV.PRICING_ATTRIBUTE27 AS okcPAV_PRICING_ATTRIBUTE27
 ,okcPAV.PRICING_ATTRIBUTE28 AS okcPAV_PRICING_ATTRIBUTE28
 ,okcPAV.PRICING_ATTRIBUTE29 AS okcPAV_PRICING_ATTRIBUTE29
 ,okcPAV.PRICING_ATTRIBUTE30 AS okcPAV_PRICING_ATTRIBUTE30
 ,okcPAV.PRICING_ATTRIBUTE31 AS okcPAV_PRICING_ATTRIBUTE31
 ,okcPAV.PRICING_ATTRIBUTE32 AS okcPAV_PRICING_ATTRIBUTE32
 ,okcPAV.PRICING_ATTRIBUTE33 AS okcPAV_PRICING_ATTRIBUTE33
 ,okcPAV.PRICING_ATTRIBUTE34 AS okcPAV_PRICING_ATTRIBUTE34
 ,okcPAV.PRICING_ATTRIBUTE35 AS okcPAV_PRICING_ATTRIBUTE35
 ,okcPAV.PRICING_ATTRIBUTE36 AS okcPAV_PRICING_ATTRIBUTE36
 ,okcPAV.PRICING_ATTRIBUTE37 AS okcPAV_PRICING_ATTRIBUTE37
 ,okcPAV.PRICING_ATTRIBUTE38 AS okcPAV_PRICING_ATTRIBUTE38
 ,okcPAV.PRICING_ATTRIBUTE39 AS okcPAV_PRICING_ATTRIBUTE39
 ,okcPAV.PRICING_ATTRIBUTE40 AS okcPAV_PRICING_ATTRIBUTE40
 ,okcPAV.PRICING_ATTRIBUTE41 AS okcPAV_PRICING_ATTRIBUTE41
 ,okcPAV.PRICING_ATTRIBUTE42 AS okcPAV_PRICING_ATTRIBUTE42
 ,okcPAV.PRICING_ATTRIBUTE43 AS okcPAV_PRICING_ATTRIBUTE43
 ,okcPAV.PRICING_ATTRIBUTE44 AS okcPAV_PRICING_ATTRIBUTE44
 ,okcPAV.PRICING_ATTRIBUTE45 AS okcPAV_PRICING_ATTRIBUTE45
 ,okcPAV.PRICING_ATTRIBUTE46 AS okcPAV_PRICING_ATTRIBUTE46
 ,okcPAV.PRICING_ATTRIBUTE47 AS okcPAV_PRICING_ATTRIBUTE47
 ,okcPAV.PRICING_ATTRIBUTE48 AS okcPAV_PRICING_ATTRIBUTE48
 ,okcPAV.PRICING_ATTRIBUTE49 AS okcPAV_PRICING_ATTRIBUTE49
 ,okcPAV.PRICING_ATTRIBUTE50 AS okcPAV_PRICING_ATTRIBUTE50
 ,okcPAV.PRICING_ATTRIBUTE51 AS okcPAV_PRICING_ATTRIBUTE51
 ,okcPAV.PRICING_ATTRIBUTE52 AS okcPAV_PRICING_ATTRIBUTE52
 ,okcPAV.PRICING_ATTRIBUTE53 AS okcPAV_PRICING_ATTRIBUTE53
 ,okcPAV.PRICING_ATTRIBUTE54 AS okcPAV_PRICING_ATTRIBUTE54
 ,okcPAV.PRICING_ATTRIBUTE55 AS okcPAV_PRICING_ATTRIBUTE55
 ,okcPAV.PRICING_ATTRIBUTE56 AS okcPAV_PRICING_ATTRIBUTE56
 ,okcPAV.PRICING_ATTRIBUTE57 AS okcPAV_PRICING_ATTRIBUTE57
 ,okcPAV.PRICING_ATTRIBUTE58 AS okcPAV_PRICING_ATTRIBUTE58
 ,okcPAV.PRICING_ATTRIBUTE59 AS okcPAV_PRICING_ATTRIBUTE59
 ,okcPAV.PRICING_ATTRIBUTE60 AS okcPAV_PRICING_ATTRIBUTE60
 ,okcPAV.PRICING_ATTRIBUTE61 AS okcPAV_PRICING_ATTRIBUTE61
 ,okcPAV.PRICING_ATTRIBUTE62 AS okcPAV_PRICING_ATTRIBUTE62
 ,okcPAV.PRICING_ATTRIBUTE63 AS okcPAV_PRICING_ATTRIBUTE63
 ,okcPAV.PRICING_ATTRIBUTE64 AS okcPAV_PRICING_ATTRIBUTE64
 ,okcPAV.PRICING_ATTRIBUTE65 AS okcPAV_PRICING_ATTRIBUTE65
 ,okcPAV.PRICING_ATTRIBUTE66 AS okcPAV_PRICING_ATTRIBUTE66
 ,okcPAV.PRICING_ATTRIBUTE67 AS okcPAV_PRICING_ATTRIBUTE67
 ,okcPAV.PRICING_ATTRIBUTE68 AS okcPAV_PRICING_ATTRIBUTE68
 ,okcPAV.PRICING_ATTRIBUTE69 AS okcPAV_PRICING_ATTRIBUTE69
 ,okcPAV.PRICING_ATTRIBUTE70 AS okcPAV_PRICING_ATTRIBUTE70
 ,okcPAV.PRICING_ATTRIBUTE71 AS okcPAV_PRICING_ATTRIBUTE71
 ,okcPAV.PRICING_ATTRIBUTE72 AS okcPAV_PRICING_ATTRIBUTE72
 ,okcPAV.PRICING_ATTRIBUTE73 AS okcPAV_PRICING_ATTRIBUTE73
 ,okcPAV.PRICING_ATTRIBUTE74 AS okcPAV_PRICING_ATTRIBUTE74
 ,okcPAV.PRICING_ATTRIBUTE75 AS okcPAV_PRICING_ATTRIBUTE75
 ,okcPAV.PRICING_ATTRIBUTE76 AS okcPAV_PRICING_ATTRIBUTE76
 ,okcPAV.PRICING_ATTRIBUTE77 AS okcPAV_PRICING_ATTRIBUTE77
 ,okcPAV.PRICING_ATTRIBUTE78 AS okcPAV_PRICING_ATTRIBUTE78
 ,okcPAV.PRICING_ATTRIBUTE79 AS okcPAV_PRICING_ATTRIBUTE79
 ,okcPAV.PRICING_ATTRIBUTE80 AS okcPAV_PRICING_ATTRIBUTE80
 ,okcPAV.PRICING_ATTRIBUTE81 AS okcPAV_PRICING_ATTRIBUTE81
 ,okcPAV.PRICING_ATTRIBUTE82 AS okcPAV_PRICING_ATTRIBUTE82
 ,okcPAV.PRICING_ATTRIBUTE83 AS okcPAV_PRICING_ATTRIBUTE83
 ,okcPAV.PRICING_ATTRIBUTE84 AS okcPAV_PRICING_ATTRIBUTE84
 ,okcPAV.PRICING_ATTRIBUTE85 AS okcPAV_PRICING_ATTRIBUTE85
 ,okcPAV.PRICING_ATTRIBUTE86 AS okcPAV_PRICING_ATTRIBUTE86
 ,okcPAV.PRICING_ATTRIBUTE87 AS okcPAV_PRICING_ATTRIBUTE87
 ,okcPAV.PRICING_ATTRIBUTE88 AS okcPAV_PRICING_ATTRIBUTE88
 ,okcPAV.PRICING_ATTRIBUTE89 AS okcPAV_PRICING_ATTRIBUTE89
 ,okcPAV.PRICING_ATTRIBUTE90 AS okcPAV_PRICING_ATTRIBUTE90
 ,okcPAV.PRICING_ATTRIBUTE91 AS okcPAV_PRICING_ATTRIBUTE91
 ,okcPAV.PRICING_ATTRIBUTE92 AS okcPAV_PRICING_ATTRIBUTE92
 ,okcPAV.PRICING_ATTRIBUTE93 AS okcPAV_PRICING_ATTRIBUTE93
 ,okcPAV.PRICING_ATTRIBUTE94 AS okcPAV_PRICING_ATTRIBUTE94
 ,okcPAV.PRICING_ATTRIBUTE95 AS okcPAV_PRICING_ATTRIBUTE95
 ,okcPAV.PRICING_ATTRIBUTE96 AS okcPAV_PRICING_ATTRIBUTE96
 ,okcPAV.PRICING_ATTRIBUTE97 AS okcPAV_PRICING_ATTRIBUTE97
 ,okcPAV.PRICING_ATTRIBUTE98 AS okcPAV_PRICING_ATTRIBUTE98
 ,okcPAV.PRICING_ATTRIBUTE99 AS okcPAV_PRICING_ATTRIBUTE99
 ,okcPAV.PRICING_ATTRIBUTE100 AS okcPAV_PRICING_ATTRIBUTE100
 ,okcPAV.QUALIFIER_CONTEXT AS okcPAV_QUALIFIER_CONTEXT
 ,okcPAV.QUALIFIER_ATTRIBUTE1 AS okcPAV_QUALIFIER_ATTRIBUTE1
 ,okcPAV.QUALIFIER_ATTRIBUTE2 AS okcPAV_QUALIFIER_ATTRIBUTE2
 ,okcPAV.QUALIFIER_ATTRIBUTE3 AS okcPAV_QUALIFIER_ATTRIBUTE3
 ,okcPAV.QUALIFIER_ATTRIBUTE4 AS okcPAV_QUALIFIER_ATTRIBUTE4
 ,okcPAV.QUALIFIER_ATTRIBUTE5 AS okcPAV_QUALIFIER_ATTRIBUTE5
 ,okcPAV.QUALIFIER_ATTRIBUTE6 AS okcPAV_QUALIFIER_ATTRIBUTE6
 ,okcPAV.QUALIFIER_ATTRIBUTE7 AS okcPAV_QUALIFIER_ATTRIBUTE7
 ,okcPAV.QUALIFIER_ATTRIBUTE8 AS okcPAV_QUALIFIER_ATTRIBUTE8
 ,okcPAV.QUALIFIER_ATTRIBUTE9 AS okcPAV_QUALIFIER_ATTRIBUTE9
 ,okcPAV.QUALIFIER_ATTRIBUTE10 AS okcPAV_QUALIFIER_ATTRIBUTE10
 ,okcPAV.QUALIFIER_ATTRIBUTE11 AS okcPAV_QUALIFIER_ATTRIBUTE11
 ,okcPAV.QUALIFIER_ATTRIBUTE12 AS okcPAV_QUALIFIER_ATTRIBUTE12
 ,okcPAV.QUALIFIER_ATTRIBUTE13 AS okcPAV_QUALIFIER_ATTRIBUTE13
 ,okcPAV.QUALIFIER_ATTRIBUTE14 AS okcPAV_QUALIFIER_ATTRIBUTE14
 ,okcPAV.QUALIFIER_ATTRIBUTE15 AS okcPAV_QUALIFIER_ATTRIBUTE15
 ,okcPAV.QUALIFIER_ATTRIBUTE16 AS okcPAV_QUALIFIER_ATTRIBUTE16
 ,okcPAV.QUALIFIER_ATTRIBUTE17 AS okcPAV_QUALIFIER_ATTRIBUTE17
 ,okcPAV.QUALIFIER_ATTRIBUTE18 AS okcPAV_QUALIFIER_ATTRIBUTE18
 ,okcPAV.QUALIFIER_ATTRIBUTE19 AS okcPAV_QUALIFIER_ATTRIBUTE19
 ,okcPAV.QUALIFIER_ATTRIBUTE20 AS okcPAV_QUALIFIER_ATTRIBUTE20
 ,okcPAV.QUALIFIER_ATTRIBUTE21 AS okcPAV_QUALIFIER_ATTRIBUTE21
 ,okcPAV.QUALIFIER_ATTRIBUTE22 AS okcPAV_QUALIFIER_ATTRIBUTE22
 ,okcPAV.QUALIFIER_ATTRIBUTE23 AS okcPAV_QUALIFIER_ATTRIBUTE23
 ,okcPAV.QUALIFIER_ATTRIBUTE24 AS okcPAV_QUALIFIER_ATTRIBUTE24
 ,okcPAV.QUALIFIER_ATTRIBUTE25 AS okcPAV_QUALIFIER_ATTRIBUTE25
 ,okcPAV.QUALIFIER_ATTRIBUTE26 AS okcPAV_QUALIFIER_ATTRIBUTE26
 ,okcPAV.QUALIFIER_ATTRIBUTE27 AS okcPAV_QUALIFIER_ATTRIBUTE27
 ,okcPAV.QUALIFIER_ATTRIBUTE28 AS okcPAV_QUALIFIER_ATTRIBUTE28
 ,okcPAV.QUALIFIER_ATTRIBUTE29 AS okcPAV_QUALIFIER_ATTRIBUTE29
 ,okcPAV.QUALIFIER_ATTRIBUTE30 AS okcPAV_QUALIFIER_ATTRIBUTE30
 ,okcPAV.QUALIFIER_ATTRIBUTE31 AS okcPAV_QUALIFIER_ATTRIBUTE31
 ,okcPAV.QUALIFIER_ATTRIBUTE32 AS okcPAV_QUALIFIER_ATTRIBUTE32
 ,okcPAV.QUALIFIER_ATTRIBUTE33 AS okcPAV_QUALIFIER_ATTRIBUTE33
 ,okcPAV.QUALIFIER_ATTRIBUTE34 AS okcPAV_QUALIFIER_ATTRIBUTE34
 ,okcPAV.QUALIFIER_ATTRIBUTE35 AS okcPAV_QUALIFIER_ATTRIBUTE35
 ,okcPAV.QUALIFIER_ATTRIBUTE36 AS okcPAV_QUALIFIER_ATTRIBUTE36
 ,okcPAV.QUALIFIER_ATTRIBUTE37 AS okcPAV_QUALIFIER_ATTRIBUTE37
 ,okcPAV.QUALIFIER_ATTRIBUTE38 AS okcPAV_QUALIFIER_ATTRIBUTE38
 ,okcPAV.QUALIFIER_ATTRIBUTE39 AS okcPAV_QUALIFIER_ATTRIBUTE39
 ,okcPAV.QUALIFIER_ATTRIBUTE40 AS okcPAV_QUALIFIER_ATTRIBUTE40
 ,okcPAV.QUALIFIER_ATTRIBUTE41 AS okcPAV_QUALIFIER_ATTRIBUTE41
 ,okcPAV.QUALIFIER_ATTRIBUTE42 AS okcPAV_QUALIFIER_ATTRIBUTE42
 ,okcPAV.QUALIFIER_ATTRIBUTE43 AS okcPAV_QUALIFIER_ATTRIBUTE43
 ,okcPAV.QUALIFIER_ATTRIBUTE44 AS okcPAV_QUALIFIER_ATTRIBUTE44
 ,okcPAV.QUALIFIER_ATTRIBUTE45 AS okcPAV_QUALIFIER_ATTRIBUTE45
 ,okcPAV.QUALIFIER_ATTRIBUTE46 AS okcPAV_QUALIFIER_ATTRIBUTE46
 ,okcPAV.QUALIFIER_ATTRIBUTE47 AS okcPAV_QUALIFIER_ATTRIBUTE47
 ,okcPAV.QUALIFIER_ATTRIBUTE48 AS okcPAV_QUALIFIER_ATTRIBUTE48
 ,okcPAV.QUALIFIER_ATTRIBUTE49 AS okcPAV_QUALIFIER_ATTRIBUTE49
 ,okcPAV.QUALIFIER_ATTRIBUTE50 AS okcPAV_QUALIFIER_ATTRIBUTE50
 ,okcPAV.QUALIFIER_ATTRIBUTE51 AS okcPAV_QUALIFIER_ATTRIBUTE51
 ,okcPAV.QUALIFIER_ATTRIBUTE52 AS okcPAV_QUALIFIER_ATTRIBUTE52
 ,okcPAV.QUALIFIER_ATTRIBUTE53 AS okcPAV_QUALIFIER_ATTRIBUTE53
 ,okcPAV.QUALIFIER_ATTRIBUTE54 AS okcPAV_QUALIFIER_ATTRIBUTE54
 ,okcPAV.QUALIFIER_ATTRIBUTE55 AS okcPAV_QUALIFIER_ATTRIBUTE55
 ,okcPAV.QUALIFIER_ATTRIBUTE56 AS okcPAV_QUALIFIER_ATTRIBUTE56
 ,okcPAV.QUALIFIER_ATTRIBUTE57 AS okcPAV_QUALIFIER_ATTRIBUTE57
 ,okcPAV.QUALIFIER_ATTRIBUTE58 AS okcPAV_QUALIFIER_ATTRIBUTE58
 ,okcPAV.QUALIFIER_ATTRIBUTE59 AS okcPAV_QUALIFIER_ATTRIBUTE59
 ,okcPAV.QUALIFIER_ATTRIBUTE60 AS okcPAV_QUALIFIER_ATTRIBUTE60
 ,okcPAV.QUALIFIER_ATTRIBUTE61 AS okcPAV_QUALIFIER_ATTRIBUTE61
 ,okcPAV.QUALIFIER_ATTRIBUTE62 AS okcPAV_QUALIFIER_ATTRIBUTE62
 ,okcPAV.QUALIFIER_ATTRIBUTE63 AS okcPAV_QUALIFIER_ATTRIBUTE63
 ,okcPAV.QUALIFIER_ATTRIBUTE64 AS okcPAV_QUALIFIER_ATTRIBUTE64
 ,okcPAV.QUALIFIER_ATTRIBUTE65 AS okcPAV_QUALIFIER_ATTRIBUTE65
 ,okcPAV.QUALIFIER_ATTRIBUTE66 AS okcPAV_QUALIFIER_ATTRIBUTE66
 ,okcPAV.QUALIFIER_ATTRIBUTE67 AS okcPAV_QUALIFIER_ATTRIBUTE67
 ,okcPAV.QUALIFIER_ATTRIBUTE68 AS okcPAV_QUALIFIER_ATTRIBUTE68
 ,okcPAV.QUALIFIER_ATTRIBUTE69 AS okcPAV_QUALIFIER_ATTRIBUTE69
 ,okcPAV.QUALIFIER_ATTRIBUTE70 AS okcPAV_QUALIFIER_ATTRIBUTE70
 ,okcPAV.QUALIFIER_ATTRIBUTE71 AS okcPAV_QUALIFIER_ATTRIBUTE71
 ,okcPAV.QUALIFIER_ATTRIBUTE72 AS okcPAV_QUALIFIER_ATTRIBUTE72
 ,okcPAV.QUALIFIER_ATTRIBUTE73 AS okcPAV_QUALIFIER_ATTRIBUTE73
 ,okcPAV.QUALIFIER_ATTRIBUTE74 AS okcPAV_QUALIFIER_ATTRIBUTE74
 ,okcPAV.QUALIFIER_ATTRIBUTE75 AS okcPAV_QUALIFIER_ATTRIBUTE75
 ,okcPAV.QUALIFIER_ATTRIBUTE76 AS okcPAV_QUALIFIER_ATTRIBUTE76
 ,okcPAV.QUALIFIER_ATTRIBUTE77 AS okcPAV_QUALIFIER_ATTRIBUTE77
 ,okcPAV.QUALIFIER_ATTRIBUTE78 AS okcPAV_QUALIFIER_ATTRIBUTE78
 ,okcPAV.QUALIFIER_ATTRIBUTE79 AS okcPAV_QUALIFIER_ATTRIBUTE79
 ,okcPAV.QUALIFIER_ATTRIBUTE80 AS okcPAV_QUALIFIER_ATTRIBUTE80
 ,okcPAV.QUALIFIER_ATTRIBUTE81 AS okcPAV_QUALIFIER_ATTRIBUTE81
 ,okcPAV.QUALIFIER_ATTRIBUTE82 AS okcPAV_QUALIFIER_ATTRIBUTE82
 ,okcPAV.QUALIFIER_ATTRIBUTE83 AS okcPAV_QUALIFIER_ATTRIBUTE83
 ,okcPAV.QUALIFIER_ATTRIBUTE84 AS okcPAV_QUALIFIER_ATTRIBUTE84
 ,okcPAV.QUALIFIER_ATTRIBUTE85 AS okcPAV_QUALIFIER_ATTRIBUTE85
 ,okcPAV.QUALIFIER_ATTRIBUTE86 AS okcPAV_QUALIFIER_ATTRIBUTE86
 ,okcPAV.QUALIFIER_ATTRIBUTE87 AS okcPAV_QUALIFIER_ATTRIBUTE87
 ,okcPAV.QUALIFIER_ATTRIBUTE88 AS okcPAV_QUALIFIER_ATTRIBUTE88
 ,okcPAV.QUALIFIER_ATTRIBUTE89 AS okcPAV_QUALIFIER_ATTRIBUTE89
 ,okcPAV.QUALIFIER_ATTRIBUTE90 AS okcPAV_QUALIFIER_ATTRIBUTE90
 ,okcPAV.QUALIFIER_ATTRIBUTE91 AS okcPAV_QUALIFIER_ATTRIBUTE91
 ,okcPAV.QUALIFIER_ATTRIBUTE92 AS okcPAV_QUALIFIER_ATTRIBUTE92
 ,okcPAV.QUALIFIER_ATTRIBUTE93 AS okcPAV_QUALIFIER_ATTRIBUTE93
 ,okcPAV.QUALIFIER_ATTRIBUTE94 AS okcPAV_QUALIFIER_ATTRIBUTE94
 ,okcPAV.QUALIFIER_ATTRIBUTE95 AS okcPAV_QUALIFIER_ATTRIBUTE95
 ,okcPAV.QUALIFIER_ATTRIBUTE96 AS okcPAV_QUALIFIER_ATTRIBUTE96
 ,okcPAV.QUALIFIER_ATTRIBUTE97 AS okcPAV_QUALIFIER_ATTRIBUTE97
 ,okcPAV.QUALIFIER_ATTRIBUTE98 AS okcPAV_QUALIFIER_ATTRIBUTE98
 ,okcPAV.QUALIFIER_ATTRIBUTE99 AS okcPAV_QUALIFIER_ATTRIBUTE99
 ,okcPAV.QUALIFIER_ATTRIBUTE100 AS okcPAV_QUALIFIER_ATTRIBUTE100
 ,okcPAV.SECURITY_GROUP_ID AS okcPAV_SECURITY_GROUP_ID
 ,okcPAV.PROGRAM_APPLICATION_ID AS okcPAV_PROGRAM_APPLICATION_ID
 ,okcPAV.PROGRAM_ID AS okcPAV_PROGRAM_ID
 ,okcPAV.PROGRAM_UPDATE_DATE AS okcPAV_PROGRAM_UPDATE_DATE
 ,okcPAV.REQUEST_ID AS okcPAV_REQUEST_ID
 ,1 AS okcPAV_OBJECT_VERSION_NUMBER
 FROM
  OKC_PRICE_ATT_VALUES okcPAV
 ,OKC_K_LINES_B okcB
  WHERE okcPAV.CLE_ID = okcB.ORIG_SYSTEM_ID1
  AND okcB.DNZ_CHR_ID = P_To_Chr_ID;

--------------------------------------------------------------------------
--Cursor used during Component Copy to copy rows for both Header and Lines
--------------------------------------------------------------------------
 CURSOR GetOkcPAVPartial_HNL IS
 SELECT
  okcPAV.ID AS okcPAV_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPAV_NewID
 ,okcPAV.FLEX_TITLE AS okcPAV_FLEX_TITLE
 ,okcPAV.PRICING_CONTEXT AS okcPAV_PRICING_CONTEXT
 ,okcPAV.PRICING_ATTRIBUTE1 AS okcPAV_PRICING_ATTRIBUTE1
 ,okcH.ID AS okcPAV_NewChrID
 ,okcPAV.PRICING_ATTRIBUTE2 AS okcPAV_PRICING_ATTRIBUTE2
 ,NULL AS okcPAV_NewCleID
 ,okcPAV.PRICING_ATTRIBUTE3 AS okcPAV_PRICING_ATTRIBUTE3
 ,okcPAV.PRICING_ATTRIBUTE4 AS okcPAV_PRICING_ATTRIBUTE4
 ,okcPAV.PRICING_ATTRIBUTE5 AS okcPAV_PRICING_ATTRIBUTE5
 ,okcPAV.PRICING_ATTRIBUTE6 AS okcPAV_PRICING_ATTRIBUTE6
 ,okcPAV.PRICING_ATTRIBUTE7 AS okcPAV_PRICING_ATTRIBUTE7
 ,okcPAV.PRICING_ATTRIBUTE8 AS okcPAV_PRICING_ATTRIBUTE8
 ,okcPAV.PRICING_ATTRIBUTE9 AS okcPAV_PRICING_ATTRIBUTE9
 ,okcPAV.PRICING_ATTRIBUTE10 AS okcPAV_PRICING_ATTRIBUTE10
 ,okcPAV.PRICING_ATTRIBUTE11 AS okcPAV_PRICING_ATTRIBUTE11
 ,okcPAV.PRICING_ATTRIBUTE12 AS okcPAV_PRICING_ATTRIBUTE12
 ,okcPAV.PRICING_ATTRIBUTE13 AS okcPAV_PRICING_ATTRIBUTE13
 ,okcPAV.PRICING_ATTRIBUTE14 AS okcPAV_PRICING_ATTRIBUTE14
 ,okcPAV.PRICING_ATTRIBUTE15 AS okcPAV_PRICING_ATTRIBUTE15
 ,okcPAV.PRICING_ATTRIBUTE16 AS okcPAV_PRICING_ATTRIBUTE16
 ,okcPAV.PRICING_ATTRIBUTE17 AS okcPAV_PRICING_ATTRIBUTE17
 ,okcPAV.PRICING_ATTRIBUTE18 AS okcPAV_PRICING_ATTRIBUTE18
 ,okcPAV.PRICING_ATTRIBUTE19 AS okcPAV_PRICING_ATTRIBUTE19
 ,okcPAV.PRICING_ATTRIBUTE20 AS okcPAV_PRICING_ATTRIBUTE20
 ,okcPAV.PRICING_ATTRIBUTE21 AS okcPAV_PRICING_ATTRIBUTE21
 ,okcPAV.PRICING_ATTRIBUTE22 AS okcPAV_PRICING_ATTRIBUTE22
 ,okcPAV.PRICING_ATTRIBUTE23 AS okcPAV_PRICING_ATTRIBUTE23
 ,okcPAV.PRICING_ATTRIBUTE24 AS okcPAV_PRICING_ATTRIBUTE24
 ,okcPAV.PRICING_ATTRIBUTE25 AS okcPAV_PRICING_ATTRIBUTE25
 ,okcPAV.PRICING_ATTRIBUTE26 AS okcPAV_PRICING_ATTRIBUTE26
 ,okcPAV.PRICING_ATTRIBUTE27 AS okcPAV_PRICING_ATTRIBUTE27
 ,okcPAV.PRICING_ATTRIBUTE28 AS okcPAV_PRICING_ATTRIBUTE28
 ,okcPAV.PRICING_ATTRIBUTE29 AS okcPAV_PRICING_ATTRIBUTE29
 ,okcPAV.PRICING_ATTRIBUTE30 AS okcPAV_PRICING_ATTRIBUTE30
 ,okcPAV.PRICING_ATTRIBUTE31 AS okcPAV_PRICING_ATTRIBUTE31
 ,okcPAV.PRICING_ATTRIBUTE32 AS okcPAV_PRICING_ATTRIBUTE32
 ,okcPAV.PRICING_ATTRIBUTE33 AS okcPAV_PRICING_ATTRIBUTE33
 ,okcPAV.PRICING_ATTRIBUTE34 AS okcPAV_PRICING_ATTRIBUTE34
 ,okcPAV.PRICING_ATTRIBUTE35 AS okcPAV_PRICING_ATTRIBUTE35
 ,okcPAV.PRICING_ATTRIBUTE36 AS okcPAV_PRICING_ATTRIBUTE36
 ,okcPAV.PRICING_ATTRIBUTE37 AS okcPAV_PRICING_ATTRIBUTE37
 ,okcPAV.PRICING_ATTRIBUTE38 AS okcPAV_PRICING_ATTRIBUTE38
 ,okcPAV.PRICING_ATTRIBUTE39 AS okcPAV_PRICING_ATTRIBUTE39
 ,okcPAV.PRICING_ATTRIBUTE40 AS okcPAV_PRICING_ATTRIBUTE40
 ,okcPAV.PRICING_ATTRIBUTE41 AS okcPAV_PRICING_ATTRIBUTE41
 ,okcPAV.PRICING_ATTRIBUTE42 AS okcPAV_PRICING_ATTRIBUTE42
 ,okcPAV.PRICING_ATTRIBUTE43 AS okcPAV_PRICING_ATTRIBUTE43
 ,okcPAV.PRICING_ATTRIBUTE44 AS okcPAV_PRICING_ATTRIBUTE44
 ,okcPAV.PRICING_ATTRIBUTE45 AS okcPAV_PRICING_ATTRIBUTE45
 ,okcPAV.PRICING_ATTRIBUTE46 AS okcPAV_PRICING_ATTRIBUTE46
 ,okcPAV.PRICING_ATTRIBUTE47 AS okcPAV_PRICING_ATTRIBUTE47
 ,okcPAV.PRICING_ATTRIBUTE48 AS okcPAV_PRICING_ATTRIBUTE48
 ,okcPAV.PRICING_ATTRIBUTE49 AS okcPAV_PRICING_ATTRIBUTE49
 ,okcPAV.PRICING_ATTRIBUTE50 AS okcPAV_PRICING_ATTRIBUTE50
 ,okcPAV.PRICING_ATTRIBUTE51 AS okcPAV_PRICING_ATTRIBUTE51
 ,okcPAV.PRICING_ATTRIBUTE52 AS okcPAV_PRICING_ATTRIBUTE52
 ,okcPAV.PRICING_ATTRIBUTE53 AS okcPAV_PRICING_ATTRIBUTE53
 ,okcPAV.PRICING_ATTRIBUTE54 AS okcPAV_PRICING_ATTRIBUTE54
 ,okcPAV.PRICING_ATTRIBUTE55 AS okcPAV_PRICING_ATTRIBUTE55
 ,okcPAV.PRICING_ATTRIBUTE56 AS okcPAV_PRICING_ATTRIBUTE56
 ,okcPAV.PRICING_ATTRIBUTE57 AS okcPAV_PRICING_ATTRIBUTE57
 ,okcPAV.PRICING_ATTRIBUTE58 AS okcPAV_PRICING_ATTRIBUTE58
 ,okcPAV.PRICING_ATTRIBUTE59 AS okcPAV_PRICING_ATTRIBUTE59
 ,okcPAV.PRICING_ATTRIBUTE60 AS okcPAV_PRICING_ATTRIBUTE60
 ,okcPAV.PRICING_ATTRIBUTE61 AS okcPAV_PRICING_ATTRIBUTE61
 ,okcPAV.PRICING_ATTRIBUTE62 AS okcPAV_PRICING_ATTRIBUTE62
 ,okcPAV.PRICING_ATTRIBUTE63 AS okcPAV_PRICING_ATTRIBUTE63
 ,okcPAV.PRICING_ATTRIBUTE64 AS okcPAV_PRICING_ATTRIBUTE64
 ,okcPAV.PRICING_ATTRIBUTE65 AS okcPAV_PRICING_ATTRIBUTE65
 ,okcPAV.PRICING_ATTRIBUTE66 AS okcPAV_PRICING_ATTRIBUTE66
 ,okcPAV.PRICING_ATTRIBUTE67 AS okcPAV_PRICING_ATTRIBUTE67
 ,okcPAV.PRICING_ATTRIBUTE68 AS okcPAV_PRICING_ATTRIBUTE68
 ,okcPAV.PRICING_ATTRIBUTE69 AS okcPAV_PRICING_ATTRIBUTE69
 ,okcPAV.PRICING_ATTRIBUTE70 AS okcPAV_PRICING_ATTRIBUTE70
 ,okcPAV.PRICING_ATTRIBUTE71 AS okcPAV_PRICING_ATTRIBUTE71
 ,okcPAV.PRICING_ATTRIBUTE72 AS okcPAV_PRICING_ATTRIBUTE72
 ,okcPAV.PRICING_ATTRIBUTE73 AS okcPAV_PRICING_ATTRIBUTE73
 ,okcPAV.PRICING_ATTRIBUTE74 AS okcPAV_PRICING_ATTRIBUTE74
 ,okcPAV.PRICING_ATTRIBUTE75 AS okcPAV_PRICING_ATTRIBUTE75
 ,okcPAV.PRICING_ATTRIBUTE76 AS okcPAV_PRICING_ATTRIBUTE76
 ,okcPAV.PRICING_ATTRIBUTE77 AS okcPAV_PRICING_ATTRIBUTE77
 ,okcPAV.PRICING_ATTRIBUTE78 AS okcPAV_PRICING_ATTRIBUTE78
 ,okcPAV.PRICING_ATTRIBUTE79 AS okcPAV_PRICING_ATTRIBUTE79
 ,okcPAV.PRICING_ATTRIBUTE80 AS okcPAV_PRICING_ATTRIBUTE80
 ,okcPAV.PRICING_ATTRIBUTE81 AS okcPAV_PRICING_ATTRIBUTE81
 ,okcPAV.PRICING_ATTRIBUTE82 AS okcPAV_PRICING_ATTRIBUTE82
 ,okcPAV.PRICING_ATTRIBUTE83 AS okcPAV_PRICING_ATTRIBUTE83
 ,okcPAV.PRICING_ATTRIBUTE84 AS okcPAV_PRICING_ATTRIBUTE84
 ,okcPAV.PRICING_ATTRIBUTE85 AS okcPAV_PRICING_ATTRIBUTE85
 ,okcPAV.PRICING_ATTRIBUTE86 AS okcPAV_PRICING_ATTRIBUTE86
 ,okcPAV.PRICING_ATTRIBUTE87 AS okcPAV_PRICING_ATTRIBUTE87
 ,okcPAV.PRICING_ATTRIBUTE88 AS okcPAV_PRICING_ATTRIBUTE88
 ,okcPAV.PRICING_ATTRIBUTE89 AS okcPAV_PRICING_ATTRIBUTE89
 ,okcPAV.PRICING_ATTRIBUTE90 AS okcPAV_PRICING_ATTRIBUTE90
 ,okcPAV.PRICING_ATTRIBUTE91 AS okcPAV_PRICING_ATTRIBUTE91
 ,okcPAV.PRICING_ATTRIBUTE92 AS okcPAV_PRICING_ATTRIBUTE92
 ,okcPAV.PRICING_ATTRIBUTE93 AS okcPAV_PRICING_ATTRIBUTE93
 ,okcPAV.PRICING_ATTRIBUTE94 AS okcPAV_PRICING_ATTRIBUTE94
 ,okcPAV.PRICING_ATTRIBUTE95 AS okcPAV_PRICING_ATTRIBUTE95
 ,okcPAV.PRICING_ATTRIBUTE96 AS okcPAV_PRICING_ATTRIBUTE96
 ,okcPAV.PRICING_ATTRIBUTE97 AS okcPAV_PRICING_ATTRIBUTE97
 ,okcPAV.PRICING_ATTRIBUTE98 AS okcPAV_PRICING_ATTRIBUTE98
 ,okcPAV.PRICING_ATTRIBUTE99 AS okcPAV_PRICING_ATTRIBUTE99
 ,okcPAV.PRICING_ATTRIBUTE100 AS okcPAV_PRICING_ATTRIBUTE100
 ,okcPAV.QUALIFIER_CONTEXT AS okcPAV_QUALIFIER_CONTEXT
 ,okcPAV.QUALIFIER_ATTRIBUTE1 AS okcPAV_QUALIFIER_ATTRIBUTE1
 ,okcPAV.QUALIFIER_ATTRIBUTE2 AS okcPAV_QUALIFIER_ATTRIBUTE2
 ,okcPAV.QUALIFIER_ATTRIBUTE3 AS okcPAV_QUALIFIER_ATTRIBUTE3
 ,okcPAV.QUALIFIER_ATTRIBUTE4 AS okcPAV_QUALIFIER_ATTRIBUTE4
 ,okcPAV.QUALIFIER_ATTRIBUTE5 AS okcPAV_QUALIFIER_ATTRIBUTE5
 ,okcPAV.QUALIFIER_ATTRIBUTE6 AS okcPAV_QUALIFIER_ATTRIBUTE6
 ,okcPAV.QUALIFIER_ATTRIBUTE7 AS okcPAV_QUALIFIER_ATTRIBUTE7
 ,okcPAV.QUALIFIER_ATTRIBUTE8 AS okcPAV_QUALIFIER_ATTRIBUTE8
 ,okcPAV.QUALIFIER_ATTRIBUTE9 AS okcPAV_QUALIFIER_ATTRIBUTE9
 ,okcPAV.QUALIFIER_ATTRIBUTE10 AS okcPAV_QUALIFIER_ATTRIBUTE10
 ,okcPAV.QUALIFIER_ATTRIBUTE11 AS okcPAV_QUALIFIER_ATTRIBUTE11
 ,okcPAV.QUALIFIER_ATTRIBUTE12 AS okcPAV_QUALIFIER_ATTRIBUTE12
 ,okcPAV.QUALIFIER_ATTRIBUTE13 AS okcPAV_QUALIFIER_ATTRIBUTE13
 ,okcPAV.QUALIFIER_ATTRIBUTE14 AS okcPAV_QUALIFIER_ATTRIBUTE14
 ,okcPAV.QUALIFIER_ATTRIBUTE15 AS okcPAV_QUALIFIER_ATTRIBUTE15
 ,okcPAV.QUALIFIER_ATTRIBUTE16 AS okcPAV_QUALIFIER_ATTRIBUTE16
 ,okcPAV.QUALIFIER_ATTRIBUTE17 AS okcPAV_QUALIFIER_ATTRIBUTE17
 ,okcPAV.QUALIFIER_ATTRIBUTE18 AS okcPAV_QUALIFIER_ATTRIBUTE18
 ,okcPAV.QUALIFIER_ATTRIBUTE19 AS okcPAV_QUALIFIER_ATTRIBUTE19
 ,okcPAV.QUALIFIER_ATTRIBUTE20 AS okcPAV_QUALIFIER_ATTRIBUTE20
 ,okcPAV.QUALIFIER_ATTRIBUTE21 AS okcPAV_QUALIFIER_ATTRIBUTE21
 ,okcPAV.QUALIFIER_ATTRIBUTE22 AS okcPAV_QUALIFIER_ATTRIBUTE22
 ,okcPAV.QUALIFIER_ATTRIBUTE23 AS okcPAV_QUALIFIER_ATTRIBUTE23
 ,okcPAV.QUALIFIER_ATTRIBUTE24 AS okcPAV_QUALIFIER_ATTRIBUTE24
 ,okcPAV.QUALIFIER_ATTRIBUTE25 AS okcPAV_QUALIFIER_ATTRIBUTE25
 ,okcPAV.QUALIFIER_ATTRIBUTE26 AS okcPAV_QUALIFIER_ATTRIBUTE26
 ,okcPAV.QUALIFIER_ATTRIBUTE27 AS okcPAV_QUALIFIER_ATTRIBUTE27
 ,okcPAV.QUALIFIER_ATTRIBUTE28 AS okcPAV_QUALIFIER_ATTRIBUTE28
 ,okcPAV.QUALIFIER_ATTRIBUTE29 AS okcPAV_QUALIFIER_ATTRIBUTE29
 ,okcPAV.QUALIFIER_ATTRIBUTE30 AS okcPAV_QUALIFIER_ATTRIBUTE30
 ,okcPAV.QUALIFIER_ATTRIBUTE31 AS okcPAV_QUALIFIER_ATTRIBUTE31
 ,okcPAV.QUALIFIER_ATTRIBUTE32 AS okcPAV_QUALIFIER_ATTRIBUTE32
 ,okcPAV.QUALIFIER_ATTRIBUTE33 AS okcPAV_QUALIFIER_ATTRIBUTE33
 ,okcPAV.QUALIFIER_ATTRIBUTE34 AS okcPAV_QUALIFIER_ATTRIBUTE34
 ,okcPAV.QUALIFIER_ATTRIBUTE35 AS okcPAV_QUALIFIER_ATTRIBUTE35
 ,okcPAV.QUALIFIER_ATTRIBUTE36 AS okcPAV_QUALIFIER_ATTRIBUTE36
 ,okcPAV.QUALIFIER_ATTRIBUTE37 AS okcPAV_QUALIFIER_ATTRIBUTE37
 ,okcPAV.QUALIFIER_ATTRIBUTE38 AS okcPAV_QUALIFIER_ATTRIBUTE38
 ,okcPAV.QUALIFIER_ATTRIBUTE39 AS okcPAV_QUALIFIER_ATTRIBUTE39
 ,okcPAV.QUALIFIER_ATTRIBUTE40 AS okcPAV_QUALIFIER_ATTRIBUTE40
 ,okcPAV.QUALIFIER_ATTRIBUTE41 AS okcPAV_QUALIFIER_ATTRIBUTE41
 ,okcPAV.QUALIFIER_ATTRIBUTE42 AS okcPAV_QUALIFIER_ATTRIBUTE42
 ,okcPAV.QUALIFIER_ATTRIBUTE43 AS okcPAV_QUALIFIER_ATTRIBUTE43
 ,okcPAV.QUALIFIER_ATTRIBUTE44 AS okcPAV_QUALIFIER_ATTRIBUTE44
 ,okcPAV.QUALIFIER_ATTRIBUTE45 AS okcPAV_QUALIFIER_ATTRIBUTE45
 ,okcPAV.QUALIFIER_ATTRIBUTE46 AS okcPAV_QUALIFIER_ATTRIBUTE46
 ,okcPAV.QUALIFIER_ATTRIBUTE47 AS okcPAV_QUALIFIER_ATTRIBUTE47
 ,okcPAV.QUALIFIER_ATTRIBUTE48 AS okcPAV_QUALIFIER_ATTRIBUTE48
 ,okcPAV.QUALIFIER_ATTRIBUTE49 AS okcPAV_QUALIFIER_ATTRIBUTE49
 ,okcPAV.QUALIFIER_ATTRIBUTE50 AS okcPAV_QUALIFIER_ATTRIBUTE50
 ,okcPAV.QUALIFIER_ATTRIBUTE51 AS okcPAV_QUALIFIER_ATTRIBUTE51
 ,okcPAV.QUALIFIER_ATTRIBUTE52 AS okcPAV_QUALIFIER_ATTRIBUTE52
 ,okcPAV.QUALIFIER_ATTRIBUTE53 AS okcPAV_QUALIFIER_ATTRIBUTE53
 ,okcPAV.QUALIFIER_ATTRIBUTE54 AS okcPAV_QUALIFIER_ATTRIBUTE54
 ,okcPAV.QUALIFIER_ATTRIBUTE55 AS okcPAV_QUALIFIER_ATTRIBUTE55
 ,okcPAV.QUALIFIER_ATTRIBUTE56 AS okcPAV_QUALIFIER_ATTRIBUTE56
 ,okcPAV.QUALIFIER_ATTRIBUTE57 AS okcPAV_QUALIFIER_ATTRIBUTE57
 ,okcPAV.QUALIFIER_ATTRIBUTE58 AS okcPAV_QUALIFIER_ATTRIBUTE58
 ,okcPAV.QUALIFIER_ATTRIBUTE59 AS okcPAV_QUALIFIER_ATTRIBUTE59
 ,okcPAV.QUALIFIER_ATTRIBUTE60 AS okcPAV_QUALIFIER_ATTRIBUTE60
 ,okcPAV.QUALIFIER_ATTRIBUTE61 AS okcPAV_QUALIFIER_ATTRIBUTE61
 ,okcPAV.QUALIFIER_ATTRIBUTE62 AS okcPAV_QUALIFIER_ATTRIBUTE62
 ,okcPAV.QUALIFIER_ATTRIBUTE63 AS okcPAV_QUALIFIER_ATTRIBUTE63
 ,okcPAV.QUALIFIER_ATTRIBUTE64 AS okcPAV_QUALIFIER_ATTRIBUTE64
 ,okcPAV.QUALIFIER_ATTRIBUTE65 AS okcPAV_QUALIFIER_ATTRIBUTE65
 ,okcPAV.QUALIFIER_ATTRIBUTE66 AS okcPAV_QUALIFIER_ATTRIBUTE66
 ,okcPAV.QUALIFIER_ATTRIBUTE67 AS okcPAV_QUALIFIER_ATTRIBUTE67
 ,okcPAV.QUALIFIER_ATTRIBUTE68 AS okcPAV_QUALIFIER_ATTRIBUTE68
 ,okcPAV.QUALIFIER_ATTRIBUTE69 AS okcPAV_QUALIFIER_ATTRIBUTE69
 ,okcPAV.QUALIFIER_ATTRIBUTE70 AS okcPAV_QUALIFIER_ATTRIBUTE70
 ,okcPAV.QUALIFIER_ATTRIBUTE71 AS okcPAV_QUALIFIER_ATTRIBUTE71
 ,okcPAV.QUALIFIER_ATTRIBUTE72 AS okcPAV_QUALIFIER_ATTRIBUTE72
 ,okcPAV.QUALIFIER_ATTRIBUTE73 AS okcPAV_QUALIFIER_ATTRIBUTE73
 ,okcPAV.QUALIFIER_ATTRIBUTE74 AS okcPAV_QUALIFIER_ATTRIBUTE74
 ,okcPAV.QUALIFIER_ATTRIBUTE75 AS okcPAV_QUALIFIER_ATTRIBUTE75
 ,okcPAV.QUALIFIER_ATTRIBUTE76 AS okcPAV_QUALIFIER_ATTRIBUTE76
 ,okcPAV.QUALIFIER_ATTRIBUTE77 AS okcPAV_QUALIFIER_ATTRIBUTE77
 ,okcPAV.QUALIFIER_ATTRIBUTE78 AS okcPAV_QUALIFIER_ATTRIBUTE78
 ,okcPAV.QUALIFIER_ATTRIBUTE79 AS okcPAV_QUALIFIER_ATTRIBUTE79
 ,okcPAV.QUALIFIER_ATTRIBUTE80 AS okcPAV_QUALIFIER_ATTRIBUTE80
 ,okcPAV.QUALIFIER_ATTRIBUTE81 AS okcPAV_QUALIFIER_ATTRIBUTE81
 ,okcPAV.QUALIFIER_ATTRIBUTE82 AS okcPAV_QUALIFIER_ATTRIBUTE82
 ,okcPAV.QUALIFIER_ATTRIBUTE83 AS okcPAV_QUALIFIER_ATTRIBUTE83
 ,okcPAV.QUALIFIER_ATTRIBUTE84 AS okcPAV_QUALIFIER_ATTRIBUTE84
 ,okcPAV.QUALIFIER_ATTRIBUTE85 AS okcPAV_QUALIFIER_ATTRIBUTE85
 ,okcPAV.QUALIFIER_ATTRIBUTE86 AS okcPAV_QUALIFIER_ATTRIBUTE86
 ,okcPAV.QUALIFIER_ATTRIBUTE87 AS okcPAV_QUALIFIER_ATTRIBUTE87
 ,okcPAV.QUALIFIER_ATTRIBUTE88 AS okcPAV_QUALIFIER_ATTRIBUTE88
 ,okcPAV.QUALIFIER_ATTRIBUTE89 AS okcPAV_QUALIFIER_ATTRIBUTE89
 ,okcPAV.QUALIFIER_ATTRIBUTE90 AS okcPAV_QUALIFIER_ATTRIBUTE90
 ,okcPAV.QUALIFIER_ATTRIBUTE91 AS okcPAV_QUALIFIER_ATTRIBUTE91
 ,okcPAV.QUALIFIER_ATTRIBUTE92 AS okcPAV_QUALIFIER_ATTRIBUTE92
 ,okcPAV.QUALIFIER_ATTRIBUTE93 AS okcPAV_QUALIFIER_ATTRIBUTE93
 ,okcPAV.QUALIFIER_ATTRIBUTE94 AS okcPAV_QUALIFIER_ATTRIBUTE94
 ,okcPAV.QUALIFIER_ATTRIBUTE95 AS okcPAV_QUALIFIER_ATTRIBUTE95
 ,okcPAV.QUALIFIER_ATTRIBUTE96 AS okcPAV_QUALIFIER_ATTRIBUTE96
 ,okcPAV.QUALIFIER_ATTRIBUTE97 AS okcPAV_QUALIFIER_ATTRIBUTE97
 ,okcPAV.QUALIFIER_ATTRIBUTE98 AS okcPAV_QUALIFIER_ATTRIBUTE98
 ,okcPAV.QUALIFIER_ATTRIBUTE99 AS okcPAV_QUALIFIER_ATTRIBUTE99
 ,okcPAV.QUALIFIER_ATTRIBUTE100 AS okcPAV_QUALIFIER_ATTRIBUTE100
 ,okcPAV.SECURITY_GROUP_ID AS okcPAV_SECURITY_GROUP_ID
 ,okcPAV.PROGRAM_APPLICATION_ID AS okcPAV_PROGRAM_APPLICATION_ID
 ,okcPAV.PROGRAM_ID AS okcPAV_PROGRAM_ID
 ,okcPAV.PROGRAM_UPDATE_DATE AS okcPAV_PROGRAM_UPDATE_DATE
 ,okcPAV.REQUEST_ID AS okcPAV_REQUEST_ID
 ,1 AS okcPAV_OBJECT_VERSION_NUMBER
 FROM
  OKC_PRICE_ATT_VALUES okcPAV
 ,OKC_K_HEADERS_B okcH
  WHERE okcPAV.CHR_ID = okcH.ORIG_SYSTEM_ID1
  and okcH.ID = P_To_Chr_ID
  and okcPAV.CLE_ID is NULL
  and okcPAV.CHR_ID = P_From_Chr_ID
  UNION
  SELECT
  okcPAV.ID AS okcPAV_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPAV_NewID
 ,okcPAV.FLEX_TITLE AS okcPAV_FLEX_TITLE
 ,okcPAV.PRICING_CONTEXT AS okcPAV_PRICING_CONTEXT
 ,okcPAV.PRICING_ATTRIBUTE1 AS okcPAV_PRICING_ATTRIBUTE1
 ,to_number(decode(okcPAV.CHR_ID,NULL,NULL,okcBT.DNZ_CHR_ID)) AS okcPAV_NewChrID
 ,okcPAV.PRICING_ATTRIBUTE2 AS okcPAV_PRICING_ATTRIBUTE2
 ,okcBT.ID AS okcPAV_NewCleID
 ,okcPAV.PRICING_ATTRIBUTE3 AS okcPAV_PRICING_ATTRIBUTE3
 ,okcPAV.PRICING_ATTRIBUTE4 AS okcPAV_PRICING_ATTRIBUTE4
 ,okcPAV.PRICING_ATTRIBUTE5 AS okcPAV_PRICING_ATTRIBUTE5
 ,okcPAV.PRICING_ATTRIBUTE6 AS okcPAV_PRICING_ATTRIBUTE6
 ,okcPAV.PRICING_ATTRIBUTE7 AS okcPAV_PRICING_ATTRIBUTE7
 ,okcPAV.PRICING_ATTRIBUTE8 AS okcPAV_PRICING_ATTRIBUTE8
 ,okcPAV.PRICING_ATTRIBUTE9 AS okcPAV_PRICING_ATTRIBUTE9
 ,okcPAV.PRICING_ATTRIBUTE10 AS okcPAV_PRICING_ATTRIBUTE10
 ,okcPAV.PRICING_ATTRIBUTE11 AS okcPAV_PRICING_ATTRIBUTE11
 ,okcPAV.PRICING_ATTRIBUTE12 AS okcPAV_PRICING_ATTRIBUTE12
 ,okcPAV.PRICING_ATTRIBUTE13 AS okcPAV_PRICING_ATTRIBUTE13
 ,okcPAV.PRICING_ATTRIBUTE14 AS okcPAV_PRICING_ATTRIBUTE14
 ,okcPAV.PRICING_ATTRIBUTE15 AS okcPAV_PRICING_ATTRIBUTE15
 ,okcPAV.PRICING_ATTRIBUTE16 AS okcPAV_PRICING_ATTRIBUTE16
 ,okcPAV.PRICING_ATTRIBUTE17 AS okcPAV_PRICING_ATTRIBUTE17
 ,okcPAV.PRICING_ATTRIBUTE18 AS okcPAV_PRICING_ATTRIBUTE18
 ,okcPAV.PRICING_ATTRIBUTE19 AS okcPAV_PRICING_ATTRIBUTE19
 ,okcPAV.PRICING_ATTRIBUTE20 AS okcPAV_PRICING_ATTRIBUTE20
 ,okcPAV.PRICING_ATTRIBUTE21 AS okcPAV_PRICING_ATTRIBUTE21
 ,okcPAV.PRICING_ATTRIBUTE22 AS okcPAV_PRICING_ATTRIBUTE22
 ,okcPAV.PRICING_ATTRIBUTE23 AS okcPAV_PRICING_ATTRIBUTE23
 ,okcPAV.PRICING_ATTRIBUTE24 AS okcPAV_PRICING_ATTRIBUTE24
 ,okcPAV.PRICING_ATTRIBUTE25 AS okcPAV_PRICING_ATTRIBUTE25
 ,okcPAV.PRICING_ATTRIBUTE26 AS okcPAV_PRICING_ATTRIBUTE26
 ,okcPAV.PRICING_ATTRIBUTE27 AS okcPAV_PRICING_ATTRIBUTE27
 ,okcPAV.PRICING_ATTRIBUTE28 AS okcPAV_PRICING_ATTRIBUTE28
 ,okcPAV.PRICING_ATTRIBUTE29 AS okcPAV_PRICING_ATTRIBUTE29
 ,okcPAV.PRICING_ATTRIBUTE30 AS okcPAV_PRICING_ATTRIBUTE30
 ,okcPAV.PRICING_ATTRIBUTE31 AS okcPAV_PRICING_ATTRIBUTE31
 ,okcPAV.PRICING_ATTRIBUTE32 AS okcPAV_PRICING_ATTRIBUTE32
 ,okcPAV.PRICING_ATTRIBUTE33 AS okcPAV_PRICING_ATTRIBUTE33
 ,okcPAV.PRICING_ATTRIBUTE34 AS okcPAV_PRICING_ATTRIBUTE34
 ,okcPAV.PRICING_ATTRIBUTE35 AS okcPAV_PRICING_ATTRIBUTE35
 ,okcPAV.PRICING_ATTRIBUTE36 AS okcPAV_PRICING_ATTRIBUTE36
 ,okcPAV.PRICING_ATTRIBUTE37 AS okcPAV_PRICING_ATTRIBUTE37
 ,okcPAV.PRICING_ATTRIBUTE38 AS okcPAV_PRICING_ATTRIBUTE38
 ,okcPAV.PRICING_ATTRIBUTE39 AS okcPAV_PRICING_ATTRIBUTE39
 ,okcPAV.PRICING_ATTRIBUTE40 AS okcPAV_PRICING_ATTRIBUTE40
 ,okcPAV.PRICING_ATTRIBUTE41 AS okcPAV_PRICING_ATTRIBUTE41
 ,okcPAV.PRICING_ATTRIBUTE42 AS okcPAV_PRICING_ATTRIBUTE42
 ,okcPAV.PRICING_ATTRIBUTE43 AS okcPAV_PRICING_ATTRIBUTE43
 ,okcPAV.PRICING_ATTRIBUTE44 AS okcPAV_PRICING_ATTRIBUTE44
 ,okcPAV.PRICING_ATTRIBUTE45 AS okcPAV_PRICING_ATTRIBUTE45
 ,okcPAV.PRICING_ATTRIBUTE46 AS okcPAV_PRICING_ATTRIBUTE46
 ,okcPAV.PRICING_ATTRIBUTE47 AS okcPAV_PRICING_ATTRIBUTE47
 ,okcPAV.PRICING_ATTRIBUTE48 AS okcPAV_PRICING_ATTRIBUTE48
 ,okcPAV.PRICING_ATTRIBUTE49 AS okcPAV_PRICING_ATTRIBUTE49
 ,okcPAV.PRICING_ATTRIBUTE50 AS okcPAV_PRICING_ATTRIBUTE50
 ,okcPAV.PRICING_ATTRIBUTE51 AS okcPAV_PRICING_ATTRIBUTE51
 ,okcPAV.PRICING_ATTRIBUTE52 AS okcPAV_PRICING_ATTRIBUTE52
 ,okcPAV.PRICING_ATTRIBUTE53 AS okcPAV_PRICING_ATTRIBUTE53
 ,okcPAV.PRICING_ATTRIBUTE54 AS okcPAV_PRICING_ATTRIBUTE54
 ,okcPAV.PRICING_ATTRIBUTE55 AS okcPAV_PRICING_ATTRIBUTE55
 ,okcPAV.PRICING_ATTRIBUTE56 AS okcPAV_PRICING_ATTRIBUTE56
 ,okcPAV.PRICING_ATTRIBUTE57 AS okcPAV_PRICING_ATTRIBUTE57
 ,okcPAV.PRICING_ATTRIBUTE58 AS okcPAV_PRICING_ATTRIBUTE58
 ,okcPAV.PRICING_ATTRIBUTE59 AS okcPAV_PRICING_ATTRIBUTE59
 ,okcPAV.PRICING_ATTRIBUTE60 AS okcPAV_PRICING_ATTRIBUTE60
 ,okcPAV.PRICING_ATTRIBUTE61 AS okcPAV_PRICING_ATTRIBUTE61
 ,okcPAV.PRICING_ATTRIBUTE62 AS okcPAV_PRICING_ATTRIBUTE62
 ,okcPAV.PRICING_ATTRIBUTE63 AS okcPAV_PRICING_ATTRIBUTE63
 ,okcPAV.PRICING_ATTRIBUTE64 AS okcPAV_PRICING_ATTRIBUTE64
 ,okcPAV.PRICING_ATTRIBUTE65 AS okcPAV_PRICING_ATTRIBUTE65
 ,okcPAV.PRICING_ATTRIBUTE66 AS okcPAV_PRICING_ATTRIBUTE66
 ,okcPAV.PRICING_ATTRIBUTE67 AS okcPAV_PRICING_ATTRIBUTE67
 ,okcPAV.PRICING_ATTRIBUTE68 AS okcPAV_PRICING_ATTRIBUTE68
 ,okcPAV.PRICING_ATTRIBUTE69 AS okcPAV_PRICING_ATTRIBUTE69
 ,okcPAV.PRICING_ATTRIBUTE70 AS okcPAV_PRICING_ATTRIBUTE70
 ,okcPAV.PRICING_ATTRIBUTE71 AS okcPAV_PRICING_ATTRIBUTE71
 ,okcPAV.PRICING_ATTRIBUTE72 AS okcPAV_PRICING_ATTRIBUTE72
 ,okcPAV.PRICING_ATTRIBUTE73 AS okcPAV_PRICING_ATTRIBUTE73
 ,okcPAV.PRICING_ATTRIBUTE74 AS okcPAV_PRICING_ATTRIBUTE74
 ,okcPAV.PRICING_ATTRIBUTE75 AS okcPAV_PRICING_ATTRIBUTE75
 ,okcPAV.PRICING_ATTRIBUTE76 AS okcPAV_PRICING_ATTRIBUTE76
 ,okcPAV.PRICING_ATTRIBUTE77 AS okcPAV_PRICING_ATTRIBUTE77
 ,okcPAV.PRICING_ATTRIBUTE78 AS okcPAV_PRICING_ATTRIBUTE78
 ,okcPAV.PRICING_ATTRIBUTE79 AS okcPAV_PRICING_ATTRIBUTE79
 ,okcPAV.PRICING_ATTRIBUTE80 AS okcPAV_PRICING_ATTRIBUTE80
 ,okcPAV.PRICING_ATTRIBUTE81 AS okcPAV_PRICING_ATTRIBUTE81
 ,okcPAV.PRICING_ATTRIBUTE82 AS okcPAV_PRICING_ATTRIBUTE82
 ,okcPAV.PRICING_ATTRIBUTE83 AS okcPAV_PRICING_ATTRIBUTE83
 ,okcPAV.PRICING_ATTRIBUTE84 AS okcPAV_PRICING_ATTRIBUTE84
 ,okcPAV.PRICING_ATTRIBUTE85 AS okcPAV_PRICING_ATTRIBUTE85
 ,okcPAV.PRICING_ATTRIBUTE86 AS okcPAV_PRICING_ATTRIBUTE86
 ,okcPAV.PRICING_ATTRIBUTE87 AS okcPAV_PRICING_ATTRIBUTE87
 ,okcPAV.PRICING_ATTRIBUTE88 AS okcPAV_PRICING_ATTRIBUTE88
 ,okcPAV.PRICING_ATTRIBUTE89 AS okcPAV_PRICING_ATTRIBUTE89
 ,okcPAV.PRICING_ATTRIBUTE90 AS okcPAV_PRICING_ATTRIBUTE90
 ,okcPAV.PRICING_ATTRIBUTE91 AS okcPAV_PRICING_ATTRIBUTE91
 ,okcPAV.PRICING_ATTRIBUTE92 AS okcPAV_PRICING_ATTRIBUTE92
 ,okcPAV.PRICING_ATTRIBUTE93 AS okcPAV_PRICING_ATTRIBUTE93
 ,okcPAV.PRICING_ATTRIBUTE94 AS okcPAV_PRICING_ATTRIBUTE94
 ,okcPAV.PRICING_ATTRIBUTE95 AS okcPAV_PRICING_ATTRIBUTE95
 ,okcPAV.PRICING_ATTRIBUTE96 AS okcPAV_PRICING_ATTRIBUTE96
 ,okcPAV.PRICING_ATTRIBUTE97 AS okcPAV_PRICING_ATTRIBUTE97
 ,okcPAV.PRICING_ATTRIBUTE98 AS okcPAV_PRICING_ATTRIBUTE98
 ,okcPAV.PRICING_ATTRIBUTE99 AS okcPAV_PRICING_ATTRIBUTE99
 ,okcPAV.PRICING_ATTRIBUTE100 AS okcPAV_PRICING_ATTRIBUTE100
 ,okcPAV.QUALIFIER_CONTEXT AS okcPAV_QUALIFIER_CONTEXT
 ,okcPAV.QUALIFIER_ATTRIBUTE1 AS okcPAV_QUALIFIER_ATTRIBUTE1
 ,okcPAV.QUALIFIER_ATTRIBUTE2 AS okcPAV_QUALIFIER_ATTRIBUTE2
 ,okcPAV.QUALIFIER_ATTRIBUTE3 AS okcPAV_QUALIFIER_ATTRIBUTE3
 ,okcPAV.QUALIFIER_ATTRIBUTE4 AS okcPAV_QUALIFIER_ATTRIBUTE4
 ,okcPAV.QUALIFIER_ATTRIBUTE5 AS okcPAV_QUALIFIER_ATTRIBUTE5
 ,okcPAV.QUALIFIER_ATTRIBUTE6 AS okcPAV_QUALIFIER_ATTRIBUTE6
 ,okcPAV.QUALIFIER_ATTRIBUTE7 AS okcPAV_QUALIFIER_ATTRIBUTE7
 ,okcPAV.QUALIFIER_ATTRIBUTE8 AS okcPAV_QUALIFIER_ATTRIBUTE8
 ,okcPAV.QUALIFIER_ATTRIBUTE9 AS okcPAV_QUALIFIER_ATTRIBUTE9
 ,okcPAV.QUALIFIER_ATTRIBUTE10 AS okcPAV_QUALIFIER_ATTRIBUTE10
 ,okcPAV.QUALIFIER_ATTRIBUTE11 AS okcPAV_QUALIFIER_ATTRIBUTE11
 ,okcPAV.QUALIFIER_ATTRIBUTE12 AS okcPAV_QUALIFIER_ATTRIBUTE12
 ,okcPAV.QUALIFIER_ATTRIBUTE13 AS okcPAV_QUALIFIER_ATTRIBUTE13
 ,okcPAV.QUALIFIER_ATTRIBUTE14 AS okcPAV_QUALIFIER_ATTRIBUTE14
 ,okcPAV.QUALIFIER_ATTRIBUTE15 AS okcPAV_QUALIFIER_ATTRIBUTE15
 ,okcPAV.QUALIFIER_ATTRIBUTE16 AS okcPAV_QUALIFIER_ATTRIBUTE16
 ,okcPAV.QUALIFIER_ATTRIBUTE17 AS okcPAV_QUALIFIER_ATTRIBUTE17
 ,okcPAV.QUALIFIER_ATTRIBUTE18 AS okcPAV_QUALIFIER_ATTRIBUTE18
 ,okcPAV.QUALIFIER_ATTRIBUTE19 AS okcPAV_QUALIFIER_ATTRIBUTE19
 ,okcPAV.QUALIFIER_ATTRIBUTE20 AS okcPAV_QUALIFIER_ATTRIBUTE20
 ,okcPAV.QUALIFIER_ATTRIBUTE21 AS okcPAV_QUALIFIER_ATTRIBUTE21
 ,okcPAV.QUALIFIER_ATTRIBUTE22 AS okcPAV_QUALIFIER_ATTRIBUTE22
 ,okcPAV.QUALIFIER_ATTRIBUTE23 AS okcPAV_QUALIFIER_ATTRIBUTE23
 ,okcPAV.QUALIFIER_ATTRIBUTE24 AS okcPAV_QUALIFIER_ATTRIBUTE24
 ,okcPAV.QUALIFIER_ATTRIBUTE25 AS okcPAV_QUALIFIER_ATTRIBUTE25
 ,okcPAV.QUALIFIER_ATTRIBUTE26 AS okcPAV_QUALIFIER_ATTRIBUTE26
 ,okcPAV.QUALIFIER_ATTRIBUTE27 AS okcPAV_QUALIFIER_ATTRIBUTE27
 ,okcPAV.QUALIFIER_ATTRIBUTE28 AS okcPAV_QUALIFIER_ATTRIBUTE28
 ,okcPAV.QUALIFIER_ATTRIBUTE29 AS okcPAV_QUALIFIER_ATTRIBUTE29
 ,okcPAV.QUALIFIER_ATTRIBUTE30 AS okcPAV_QUALIFIER_ATTRIBUTE30
 ,okcPAV.QUALIFIER_ATTRIBUTE31 AS okcPAV_QUALIFIER_ATTRIBUTE31
 ,okcPAV.QUALIFIER_ATTRIBUTE32 AS okcPAV_QUALIFIER_ATTRIBUTE32
 ,okcPAV.QUALIFIER_ATTRIBUTE33 AS okcPAV_QUALIFIER_ATTRIBUTE33
 ,okcPAV.QUALIFIER_ATTRIBUTE34 AS okcPAV_QUALIFIER_ATTRIBUTE34
 ,okcPAV.QUALIFIER_ATTRIBUTE35 AS okcPAV_QUALIFIER_ATTRIBUTE35
 ,okcPAV.QUALIFIER_ATTRIBUTE36 AS okcPAV_QUALIFIER_ATTRIBUTE36
 ,okcPAV.QUALIFIER_ATTRIBUTE37 AS okcPAV_QUALIFIER_ATTRIBUTE37
 ,okcPAV.QUALIFIER_ATTRIBUTE38 AS okcPAV_QUALIFIER_ATTRIBUTE38
 ,okcPAV.QUALIFIER_ATTRIBUTE39 AS okcPAV_QUALIFIER_ATTRIBUTE39
 ,okcPAV.QUALIFIER_ATTRIBUTE40 AS okcPAV_QUALIFIER_ATTRIBUTE40
 ,okcPAV.QUALIFIER_ATTRIBUTE41 AS okcPAV_QUALIFIER_ATTRIBUTE41
 ,okcPAV.QUALIFIER_ATTRIBUTE42 AS okcPAV_QUALIFIER_ATTRIBUTE42
 ,okcPAV.QUALIFIER_ATTRIBUTE43 AS okcPAV_QUALIFIER_ATTRIBUTE43
 ,okcPAV.QUALIFIER_ATTRIBUTE44 AS okcPAV_QUALIFIER_ATTRIBUTE44
 ,okcPAV.QUALIFIER_ATTRIBUTE45 AS okcPAV_QUALIFIER_ATTRIBUTE45
 ,okcPAV.QUALIFIER_ATTRIBUTE46 AS okcPAV_QUALIFIER_ATTRIBUTE46
 ,okcPAV.QUALIFIER_ATTRIBUTE47 AS okcPAV_QUALIFIER_ATTRIBUTE47
 ,okcPAV.QUALIFIER_ATTRIBUTE48 AS okcPAV_QUALIFIER_ATTRIBUTE48
 ,okcPAV.QUALIFIER_ATTRIBUTE49 AS okcPAV_QUALIFIER_ATTRIBUTE49
 ,okcPAV.QUALIFIER_ATTRIBUTE50 AS okcPAV_QUALIFIER_ATTRIBUTE50
 ,okcPAV.QUALIFIER_ATTRIBUTE51 AS okcPAV_QUALIFIER_ATTRIBUTE51
 ,okcPAV.QUALIFIER_ATTRIBUTE52 AS okcPAV_QUALIFIER_ATTRIBUTE52
 ,okcPAV.QUALIFIER_ATTRIBUTE53 AS okcPAV_QUALIFIER_ATTRIBUTE53
 ,okcPAV.QUALIFIER_ATTRIBUTE54 AS okcPAV_QUALIFIER_ATTRIBUTE54
 ,okcPAV.QUALIFIER_ATTRIBUTE55 AS okcPAV_QUALIFIER_ATTRIBUTE55
 ,okcPAV.QUALIFIER_ATTRIBUTE56 AS okcPAV_QUALIFIER_ATTRIBUTE56
 ,okcPAV.QUALIFIER_ATTRIBUTE57 AS okcPAV_QUALIFIER_ATTRIBUTE57
 ,okcPAV.QUALIFIER_ATTRIBUTE58 AS okcPAV_QUALIFIER_ATTRIBUTE58
 ,okcPAV.QUALIFIER_ATTRIBUTE59 AS okcPAV_QUALIFIER_ATTRIBUTE59
 ,okcPAV.QUALIFIER_ATTRIBUTE60 AS okcPAV_QUALIFIER_ATTRIBUTE60
 ,okcPAV.QUALIFIER_ATTRIBUTE61 AS okcPAV_QUALIFIER_ATTRIBUTE61
 ,okcPAV.QUALIFIER_ATTRIBUTE62 AS okcPAV_QUALIFIER_ATTRIBUTE62
 ,okcPAV.QUALIFIER_ATTRIBUTE63 AS okcPAV_QUALIFIER_ATTRIBUTE63
 ,okcPAV.QUALIFIER_ATTRIBUTE64 AS okcPAV_QUALIFIER_ATTRIBUTE64
 ,okcPAV.QUALIFIER_ATTRIBUTE65 AS okcPAV_QUALIFIER_ATTRIBUTE65
 ,okcPAV.QUALIFIER_ATTRIBUTE66 AS okcPAV_QUALIFIER_ATTRIBUTE66
 ,okcPAV.QUALIFIER_ATTRIBUTE67 AS okcPAV_QUALIFIER_ATTRIBUTE67
 ,okcPAV.QUALIFIER_ATTRIBUTE68 AS okcPAV_QUALIFIER_ATTRIBUTE68
 ,okcPAV.QUALIFIER_ATTRIBUTE69 AS okcPAV_QUALIFIER_ATTRIBUTE69
 ,okcPAV.QUALIFIER_ATTRIBUTE70 AS okcPAV_QUALIFIER_ATTRIBUTE70
 ,okcPAV.QUALIFIER_ATTRIBUTE71 AS okcPAV_QUALIFIER_ATTRIBUTE71
 ,okcPAV.QUALIFIER_ATTRIBUTE72 AS okcPAV_QUALIFIER_ATTRIBUTE72
 ,okcPAV.QUALIFIER_ATTRIBUTE73 AS okcPAV_QUALIFIER_ATTRIBUTE73
 ,okcPAV.QUALIFIER_ATTRIBUTE74 AS okcPAV_QUALIFIER_ATTRIBUTE74
 ,okcPAV.QUALIFIER_ATTRIBUTE75 AS okcPAV_QUALIFIER_ATTRIBUTE75
 ,okcPAV.QUALIFIER_ATTRIBUTE76 AS okcPAV_QUALIFIER_ATTRIBUTE76
 ,okcPAV.QUALIFIER_ATTRIBUTE77 AS okcPAV_QUALIFIER_ATTRIBUTE77
 ,okcPAV.QUALIFIER_ATTRIBUTE78 AS okcPAV_QUALIFIER_ATTRIBUTE78
 ,okcPAV.QUALIFIER_ATTRIBUTE79 AS okcPAV_QUALIFIER_ATTRIBUTE79
 ,okcPAV.QUALIFIER_ATTRIBUTE80 AS okcPAV_QUALIFIER_ATTRIBUTE80
 ,okcPAV.QUALIFIER_ATTRIBUTE81 AS okcPAV_QUALIFIER_ATTRIBUTE81
 ,okcPAV.QUALIFIER_ATTRIBUTE82 AS okcPAV_QUALIFIER_ATTRIBUTE82
 ,okcPAV.QUALIFIER_ATTRIBUTE83 AS okcPAV_QUALIFIER_ATTRIBUTE83
 ,okcPAV.QUALIFIER_ATTRIBUTE84 AS okcPAV_QUALIFIER_ATTRIBUTE84
 ,okcPAV.QUALIFIER_ATTRIBUTE85 AS okcPAV_QUALIFIER_ATTRIBUTE85
 ,okcPAV.QUALIFIER_ATTRIBUTE86 AS okcPAV_QUALIFIER_ATTRIBUTE86
 ,okcPAV.QUALIFIER_ATTRIBUTE87 AS okcPAV_QUALIFIER_ATTRIBUTE87
 ,okcPAV.QUALIFIER_ATTRIBUTE88 AS okcPAV_QUALIFIER_ATTRIBUTE88
 ,okcPAV.QUALIFIER_ATTRIBUTE89 AS okcPAV_QUALIFIER_ATTRIBUTE89
 ,okcPAV.QUALIFIER_ATTRIBUTE90 AS okcPAV_QUALIFIER_ATTRIBUTE90
 ,okcPAV.QUALIFIER_ATTRIBUTE91 AS okcPAV_QUALIFIER_ATTRIBUTE91
 ,okcPAV.QUALIFIER_ATTRIBUTE92 AS okcPAV_QUALIFIER_ATTRIBUTE92
 ,okcPAV.QUALIFIER_ATTRIBUTE93 AS okcPAV_QUALIFIER_ATTRIBUTE93
 ,okcPAV.QUALIFIER_ATTRIBUTE94 AS okcPAV_QUALIFIER_ATTRIBUTE94
 ,okcPAV.QUALIFIER_ATTRIBUTE95 AS okcPAV_QUALIFIER_ATTRIBUTE95
 ,okcPAV.QUALIFIER_ATTRIBUTE96 AS okcPAV_QUALIFIER_ATTRIBUTE96
 ,okcPAV.QUALIFIER_ATTRIBUTE97 AS okcPAV_QUALIFIER_ATTRIBUTE97
 ,okcPAV.QUALIFIER_ATTRIBUTE98 AS okcPAV_QUALIFIER_ATTRIBUTE98
 ,okcPAV.QUALIFIER_ATTRIBUTE99 AS okcPAV_QUALIFIER_ATTRIBUTE99
 ,okcPAV.QUALIFIER_ATTRIBUTE100 AS okcPAV_QUALIFIER_ATTRIBUTE100
 ,okcPAV.SECURITY_GROUP_ID AS okcPAV_SECURITY_GROUP_ID
 ,okcPAV.PROGRAM_APPLICATION_ID AS okcPAV_PROGRAM_APPLICATION_ID
 ,okcPAV.PROGRAM_ID AS okcPAV_PROGRAM_ID
 ,okcPAV.PROGRAM_UPDATE_DATE AS okcPAV_PROGRAM_UPDATE_DATE
 ,okcPAV.REQUEST_ID AS okcPAV_REQUEST_ID
 ,1 AS okcPAV_OBJECT_VERSION_NUMBER
 FROM
  OKC_PRICE_ATT_VALUES okcPAV
 ,OKC_K_LINES_B_TEMP okcBT
  WHERE okcPAV.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;


--------------------------------------------------------------------------
--Cursor used during Component Copy to copy rows only for Header
--------------------------------------------------------------------------
 CURSOR GetOkcPAVPartial_H IS
 SELECT
  okcPAV.ID AS okcPAV_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPAV_NewID
 ,okcPAV.FLEX_TITLE AS okcPAV_FLEX_TITLE
 ,okcPAV.PRICING_CONTEXT AS okcPAV_PRICING_CONTEXT
 ,okcPAV.PRICING_ATTRIBUTE1 AS okcPAV_PRICING_ATTRIBUTE1
 ,okcH.ID AS okcPAV_NewChrID
 ,okcPAV.PRICING_ATTRIBUTE2 AS okcPAV_PRICING_ATTRIBUTE2
 ,NULL AS okcPAV_NewCleID
 ,okcPAV.PRICING_ATTRIBUTE3 AS okcPAV_PRICING_ATTRIBUTE3
 ,okcPAV.PRICING_ATTRIBUTE4 AS okcPAV_PRICING_ATTRIBUTE4
 ,okcPAV.PRICING_ATTRIBUTE5 AS okcPAV_PRICING_ATTRIBUTE5
 ,okcPAV.PRICING_ATTRIBUTE6 AS okcPAV_PRICING_ATTRIBUTE6
 ,okcPAV.PRICING_ATTRIBUTE7 AS okcPAV_PRICING_ATTRIBUTE7
 ,okcPAV.PRICING_ATTRIBUTE8 AS okcPAV_PRICING_ATTRIBUTE8
 ,okcPAV.PRICING_ATTRIBUTE9 AS okcPAV_PRICING_ATTRIBUTE9
 ,okcPAV.PRICING_ATTRIBUTE10 AS okcPAV_PRICING_ATTRIBUTE10
 ,okcPAV.PRICING_ATTRIBUTE11 AS okcPAV_PRICING_ATTRIBUTE11
 ,okcPAV.PRICING_ATTRIBUTE12 AS okcPAV_PRICING_ATTRIBUTE12
 ,okcPAV.PRICING_ATTRIBUTE13 AS okcPAV_PRICING_ATTRIBUTE13
 ,okcPAV.PRICING_ATTRIBUTE14 AS okcPAV_PRICING_ATTRIBUTE14
 ,okcPAV.PRICING_ATTRIBUTE15 AS okcPAV_PRICING_ATTRIBUTE15
 ,okcPAV.PRICING_ATTRIBUTE16 AS okcPAV_PRICING_ATTRIBUTE16
 ,okcPAV.PRICING_ATTRIBUTE17 AS okcPAV_PRICING_ATTRIBUTE17
 ,okcPAV.PRICING_ATTRIBUTE18 AS okcPAV_PRICING_ATTRIBUTE18
 ,okcPAV.PRICING_ATTRIBUTE19 AS okcPAV_PRICING_ATTRIBUTE19
 ,okcPAV.PRICING_ATTRIBUTE20 AS okcPAV_PRICING_ATTRIBUTE20
 ,okcPAV.PRICING_ATTRIBUTE21 AS okcPAV_PRICING_ATTRIBUTE21
 ,okcPAV.PRICING_ATTRIBUTE22 AS okcPAV_PRICING_ATTRIBUTE22
 ,okcPAV.PRICING_ATTRIBUTE23 AS okcPAV_PRICING_ATTRIBUTE23
 ,okcPAV.PRICING_ATTRIBUTE24 AS okcPAV_PRICING_ATTRIBUTE24
 ,okcPAV.PRICING_ATTRIBUTE25 AS okcPAV_PRICING_ATTRIBUTE25
 ,okcPAV.PRICING_ATTRIBUTE26 AS okcPAV_PRICING_ATTRIBUTE26
 ,okcPAV.PRICING_ATTRIBUTE27 AS okcPAV_PRICING_ATTRIBUTE27
 ,okcPAV.PRICING_ATTRIBUTE28 AS okcPAV_PRICING_ATTRIBUTE28
 ,okcPAV.PRICING_ATTRIBUTE29 AS okcPAV_PRICING_ATTRIBUTE29
 ,okcPAV.PRICING_ATTRIBUTE30 AS okcPAV_PRICING_ATTRIBUTE30
 ,okcPAV.PRICING_ATTRIBUTE31 AS okcPAV_PRICING_ATTRIBUTE31
 ,okcPAV.PRICING_ATTRIBUTE32 AS okcPAV_PRICING_ATTRIBUTE32
 ,okcPAV.PRICING_ATTRIBUTE33 AS okcPAV_PRICING_ATTRIBUTE33
 ,okcPAV.PRICING_ATTRIBUTE34 AS okcPAV_PRICING_ATTRIBUTE34
 ,okcPAV.PRICING_ATTRIBUTE35 AS okcPAV_PRICING_ATTRIBUTE35
 ,okcPAV.PRICING_ATTRIBUTE36 AS okcPAV_PRICING_ATTRIBUTE36
 ,okcPAV.PRICING_ATTRIBUTE37 AS okcPAV_PRICING_ATTRIBUTE37
 ,okcPAV.PRICING_ATTRIBUTE38 AS okcPAV_PRICING_ATTRIBUTE38
 ,okcPAV.PRICING_ATTRIBUTE39 AS okcPAV_PRICING_ATTRIBUTE39
 ,okcPAV.PRICING_ATTRIBUTE40 AS okcPAV_PRICING_ATTRIBUTE40
 ,okcPAV.PRICING_ATTRIBUTE41 AS okcPAV_PRICING_ATTRIBUTE41
 ,okcPAV.PRICING_ATTRIBUTE42 AS okcPAV_PRICING_ATTRIBUTE42
 ,okcPAV.PRICING_ATTRIBUTE43 AS okcPAV_PRICING_ATTRIBUTE43
 ,okcPAV.PRICING_ATTRIBUTE44 AS okcPAV_PRICING_ATTRIBUTE44
 ,okcPAV.PRICING_ATTRIBUTE45 AS okcPAV_PRICING_ATTRIBUTE45
 ,okcPAV.PRICING_ATTRIBUTE46 AS okcPAV_PRICING_ATTRIBUTE46
 ,okcPAV.PRICING_ATTRIBUTE47 AS okcPAV_PRICING_ATTRIBUTE47
 ,okcPAV.PRICING_ATTRIBUTE48 AS okcPAV_PRICING_ATTRIBUTE48
 ,okcPAV.PRICING_ATTRIBUTE49 AS okcPAV_PRICING_ATTRIBUTE49
 ,okcPAV.PRICING_ATTRIBUTE50 AS okcPAV_PRICING_ATTRIBUTE50
 ,okcPAV.PRICING_ATTRIBUTE51 AS okcPAV_PRICING_ATTRIBUTE51
 ,okcPAV.PRICING_ATTRIBUTE52 AS okcPAV_PRICING_ATTRIBUTE52
 ,okcPAV.PRICING_ATTRIBUTE53 AS okcPAV_PRICING_ATTRIBUTE53
 ,okcPAV.PRICING_ATTRIBUTE54 AS okcPAV_PRICING_ATTRIBUTE54
 ,okcPAV.PRICING_ATTRIBUTE55 AS okcPAV_PRICING_ATTRIBUTE55
 ,okcPAV.PRICING_ATTRIBUTE56 AS okcPAV_PRICING_ATTRIBUTE56
 ,okcPAV.PRICING_ATTRIBUTE57 AS okcPAV_PRICING_ATTRIBUTE57
 ,okcPAV.PRICING_ATTRIBUTE58 AS okcPAV_PRICING_ATTRIBUTE58
 ,okcPAV.PRICING_ATTRIBUTE59 AS okcPAV_PRICING_ATTRIBUTE59
 ,okcPAV.PRICING_ATTRIBUTE60 AS okcPAV_PRICING_ATTRIBUTE60
 ,okcPAV.PRICING_ATTRIBUTE61 AS okcPAV_PRICING_ATTRIBUTE61
 ,okcPAV.PRICING_ATTRIBUTE62 AS okcPAV_PRICING_ATTRIBUTE62
 ,okcPAV.PRICING_ATTRIBUTE63 AS okcPAV_PRICING_ATTRIBUTE63
 ,okcPAV.PRICING_ATTRIBUTE64 AS okcPAV_PRICING_ATTRIBUTE64
 ,okcPAV.PRICING_ATTRIBUTE65 AS okcPAV_PRICING_ATTRIBUTE65
 ,okcPAV.PRICING_ATTRIBUTE66 AS okcPAV_PRICING_ATTRIBUTE66
 ,okcPAV.PRICING_ATTRIBUTE67 AS okcPAV_PRICING_ATTRIBUTE67
 ,okcPAV.PRICING_ATTRIBUTE68 AS okcPAV_PRICING_ATTRIBUTE68
 ,okcPAV.PRICING_ATTRIBUTE69 AS okcPAV_PRICING_ATTRIBUTE69
 ,okcPAV.PRICING_ATTRIBUTE70 AS okcPAV_PRICING_ATTRIBUTE70
 ,okcPAV.PRICING_ATTRIBUTE71 AS okcPAV_PRICING_ATTRIBUTE71
 ,okcPAV.PRICING_ATTRIBUTE72 AS okcPAV_PRICING_ATTRIBUTE72
 ,okcPAV.PRICING_ATTRIBUTE73 AS okcPAV_PRICING_ATTRIBUTE73
 ,okcPAV.PRICING_ATTRIBUTE74 AS okcPAV_PRICING_ATTRIBUTE74
 ,okcPAV.PRICING_ATTRIBUTE75 AS okcPAV_PRICING_ATTRIBUTE75
 ,okcPAV.PRICING_ATTRIBUTE76 AS okcPAV_PRICING_ATTRIBUTE76
 ,okcPAV.PRICING_ATTRIBUTE77 AS okcPAV_PRICING_ATTRIBUTE77
 ,okcPAV.PRICING_ATTRIBUTE78 AS okcPAV_PRICING_ATTRIBUTE78
 ,okcPAV.PRICING_ATTRIBUTE79 AS okcPAV_PRICING_ATTRIBUTE79
 ,okcPAV.PRICING_ATTRIBUTE80 AS okcPAV_PRICING_ATTRIBUTE80
 ,okcPAV.PRICING_ATTRIBUTE81 AS okcPAV_PRICING_ATTRIBUTE81
 ,okcPAV.PRICING_ATTRIBUTE82 AS okcPAV_PRICING_ATTRIBUTE82
 ,okcPAV.PRICING_ATTRIBUTE83 AS okcPAV_PRICING_ATTRIBUTE83
 ,okcPAV.PRICING_ATTRIBUTE84 AS okcPAV_PRICING_ATTRIBUTE84
 ,okcPAV.PRICING_ATTRIBUTE85 AS okcPAV_PRICING_ATTRIBUTE85
 ,okcPAV.PRICING_ATTRIBUTE86 AS okcPAV_PRICING_ATTRIBUTE86
 ,okcPAV.PRICING_ATTRIBUTE87 AS okcPAV_PRICING_ATTRIBUTE87
 ,okcPAV.PRICING_ATTRIBUTE88 AS okcPAV_PRICING_ATTRIBUTE88
 ,okcPAV.PRICING_ATTRIBUTE89 AS okcPAV_PRICING_ATTRIBUTE89
 ,okcPAV.PRICING_ATTRIBUTE90 AS okcPAV_PRICING_ATTRIBUTE90
 ,okcPAV.PRICING_ATTRIBUTE91 AS okcPAV_PRICING_ATTRIBUTE91
 ,okcPAV.PRICING_ATTRIBUTE92 AS okcPAV_PRICING_ATTRIBUTE92
 ,okcPAV.PRICING_ATTRIBUTE93 AS okcPAV_PRICING_ATTRIBUTE93
 ,okcPAV.PRICING_ATTRIBUTE94 AS okcPAV_PRICING_ATTRIBUTE94
 ,okcPAV.PRICING_ATTRIBUTE95 AS okcPAV_PRICING_ATTRIBUTE95
 ,okcPAV.PRICING_ATTRIBUTE96 AS okcPAV_PRICING_ATTRIBUTE96
 ,okcPAV.PRICING_ATTRIBUTE97 AS okcPAV_PRICING_ATTRIBUTE97
 ,okcPAV.PRICING_ATTRIBUTE98 AS okcPAV_PRICING_ATTRIBUTE98
 ,okcPAV.PRICING_ATTRIBUTE99 AS okcPAV_PRICING_ATTRIBUTE99
 ,okcPAV.PRICING_ATTRIBUTE100 AS okcPAV_PRICING_ATTRIBUTE100
 ,okcPAV.QUALIFIER_CONTEXT AS okcPAV_QUALIFIER_CONTEXT
 ,okcPAV.QUALIFIER_ATTRIBUTE1 AS okcPAV_QUALIFIER_ATTRIBUTE1
 ,okcPAV.QUALIFIER_ATTRIBUTE2 AS okcPAV_QUALIFIER_ATTRIBUTE2
 ,okcPAV.QUALIFIER_ATTRIBUTE3 AS okcPAV_QUALIFIER_ATTRIBUTE3
 ,okcPAV.QUALIFIER_ATTRIBUTE4 AS okcPAV_QUALIFIER_ATTRIBUTE4
 ,okcPAV.QUALIFIER_ATTRIBUTE5 AS okcPAV_QUALIFIER_ATTRIBUTE5
 ,okcPAV.QUALIFIER_ATTRIBUTE6 AS okcPAV_QUALIFIER_ATTRIBUTE6
 ,okcPAV.QUALIFIER_ATTRIBUTE7 AS okcPAV_QUALIFIER_ATTRIBUTE7
 ,okcPAV.QUALIFIER_ATTRIBUTE8 AS okcPAV_QUALIFIER_ATTRIBUTE8
 ,okcPAV.QUALIFIER_ATTRIBUTE9 AS okcPAV_QUALIFIER_ATTRIBUTE9
 ,okcPAV.QUALIFIER_ATTRIBUTE10 AS okcPAV_QUALIFIER_ATTRIBUTE10
 ,okcPAV.QUALIFIER_ATTRIBUTE11 AS okcPAV_QUALIFIER_ATTRIBUTE11
 ,okcPAV.QUALIFIER_ATTRIBUTE12 AS okcPAV_QUALIFIER_ATTRIBUTE12
 ,okcPAV.QUALIFIER_ATTRIBUTE13 AS okcPAV_QUALIFIER_ATTRIBUTE13
 ,okcPAV.QUALIFIER_ATTRIBUTE14 AS okcPAV_QUALIFIER_ATTRIBUTE14
 ,okcPAV.QUALIFIER_ATTRIBUTE15 AS okcPAV_QUALIFIER_ATTRIBUTE15
 ,okcPAV.QUALIFIER_ATTRIBUTE16 AS okcPAV_QUALIFIER_ATTRIBUTE16
 ,okcPAV.QUALIFIER_ATTRIBUTE17 AS okcPAV_QUALIFIER_ATTRIBUTE17
 ,okcPAV.QUALIFIER_ATTRIBUTE18 AS okcPAV_QUALIFIER_ATTRIBUTE18
 ,okcPAV.QUALIFIER_ATTRIBUTE19 AS okcPAV_QUALIFIER_ATTRIBUTE19
 ,okcPAV.QUALIFIER_ATTRIBUTE20 AS okcPAV_QUALIFIER_ATTRIBUTE20
 ,okcPAV.QUALIFIER_ATTRIBUTE21 AS okcPAV_QUALIFIER_ATTRIBUTE21
 ,okcPAV.QUALIFIER_ATTRIBUTE22 AS okcPAV_QUALIFIER_ATTRIBUTE22
 ,okcPAV.QUALIFIER_ATTRIBUTE23 AS okcPAV_QUALIFIER_ATTRIBUTE23
 ,okcPAV.QUALIFIER_ATTRIBUTE24 AS okcPAV_QUALIFIER_ATTRIBUTE24
 ,okcPAV.QUALIFIER_ATTRIBUTE25 AS okcPAV_QUALIFIER_ATTRIBUTE25
 ,okcPAV.QUALIFIER_ATTRIBUTE26 AS okcPAV_QUALIFIER_ATTRIBUTE26
 ,okcPAV.QUALIFIER_ATTRIBUTE27 AS okcPAV_QUALIFIER_ATTRIBUTE27
 ,okcPAV.QUALIFIER_ATTRIBUTE28 AS okcPAV_QUALIFIER_ATTRIBUTE28
 ,okcPAV.QUALIFIER_ATTRIBUTE29 AS okcPAV_QUALIFIER_ATTRIBUTE29
 ,okcPAV.QUALIFIER_ATTRIBUTE30 AS okcPAV_QUALIFIER_ATTRIBUTE30
 ,okcPAV.QUALIFIER_ATTRIBUTE31 AS okcPAV_QUALIFIER_ATTRIBUTE31
 ,okcPAV.QUALIFIER_ATTRIBUTE32 AS okcPAV_QUALIFIER_ATTRIBUTE32
 ,okcPAV.QUALIFIER_ATTRIBUTE33 AS okcPAV_QUALIFIER_ATTRIBUTE33
 ,okcPAV.QUALIFIER_ATTRIBUTE34 AS okcPAV_QUALIFIER_ATTRIBUTE34
 ,okcPAV.QUALIFIER_ATTRIBUTE35 AS okcPAV_QUALIFIER_ATTRIBUTE35
 ,okcPAV.QUALIFIER_ATTRIBUTE36 AS okcPAV_QUALIFIER_ATTRIBUTE36
 ,okcPAV.QUALIFIER_ATTRIBUTE37 AS okcPAV_QUALIFIER_ATTRIBUTE37
 ,okcPAV.QUALIFIER_ATTRIBUTE38 AS okcPAV_QUALIFIER_ATTRIBUTE38
 ,okcPAV.QUALIFIER_ATTRIBUTE39 AS okcPAV_QUALIFIER_ATTRIBUTE39
 ,okcPAV.QUALIFIER_ATTRIBUTE40 AS okcPAV_QUALIFIER_ATTRIBUTE40
 ,okcPAV.QUALIFIER_ATTRIBUTE41 AS okcPAV_QUALIFIER_ATTRIBUTE41
 ,okcPAV.QUALIFIER_ATTRIBUTE42 AS okcPAV_QUALIFIER_ATTRIBUTE42
 ,okcPAV.QUALIFIER_ATTRIBUTE43 AS okcPAV_QUALIFIER_ATTRIBUTE43
 ,okcPAV.QUALIFIER_ATTRIBUTE44 AS okcPAV_QUALIFIER_ATTRIBUTE44
 ,okcPAV.QUALIFIER_ATTRIBUTE45 AS okcPAV_QUALIFIER_ATTRIBUTE45
 ,okcPAV.QUALIFIER_ATTRIBUTE46 AS okcPAV_QUALIFIER_ATTRIBUTE46
 ,okcPAV.QUALIFIER_ATTRIBUTE47 AS okcPAV_QUALIFIER_ATTRIBUTE47
 ,okcPAV.QUALIFIER_ATTRIBUTE48 AS okcPAV_QUALIFIER_ATTRIBUTE48
 ,okcPAV.QUALIFIER_ATTRIBUTE49 AS okcPAV_QUALIFIER_ATTRIBUTE49
 ,okcPAV.QUALIFIER_ATTRIBUTE50 AS okcPAV_QUALIFIER_ATTRIBUTE50
 ,okcPAV.QUALIFIER_ATTRIBUTE51 AS okcPAV_QUALIFIER_ATTRIBUTE51
 ,okcPAV.QUALIFIER_ATTRIBUTE52 AS okcPAV_QUALIFIER_ATTRIBUTE52
 ,okcPAV.QUALIFIER_ATTRIBUTE53 AS okcPAV_QUALIFIER_ATTRIBUTE53
 ,okcPAV.QUALIFIER_ATTRIBUTE54 AS okcPAV_QUALIFIER_ATTRIBUTE54
 ,okcPAV.QUALIFIER_ATTRIBUTE55 AS okcPAV_QUALIFIER_ATTRIBUTE55
 ,okcPAV.QUALIFIER_ATTRIBUTE56 AS okcPAV_QUALIFIER_ATTRIBUTE56
 ,okcPAV.QUALIFIER_ATTRIBUTE57 AS okcPAV_QUALIFIER_ATTRIBUTE57
 ,okcPAV.QUALIFIER_ATTRIBUTE58 AS okcPAV_QUALIFIER_ATTRIBUTE58
 ,okcPAV.QUALIFIER_ATTRIBUTE59 AS okcPAV_QUALIFIER_ATTRIBUTE59
 ,okcPAV.QUALIFIER_ATTRIBUTE60 AS okcPAV_QUALIFIER_ATTRIBUTE60
 ,okcPAV.QUALIFIER_ATTRIBUTE61 AS okcPAV_QUALIFIER_ATTRIBUTE61
 ,okcPAV.QUALIFIER_ATTRIBUTE62 AS okcPAV_QUALIFIER_ATTRIBUTE62
 ,okcPAV.QUALIFIER_ATTRIBUTE63 AS okcPAV_QUALIFIER_ATTRIBUTE63
 ,okcPAV.QUALIFIER_ATTRIBUTE64 AS okcPAV_QUALIFIER_ATTRIBUTE64
 ,okcPAV.QUALIFIER_ATTRIBUTE65 AS okcPAV_QUALIFIER_ATTRIBUTE65
 ,okcPAV.QUALIFIER_ATTRIBUTE66 AS okcPAV_QUALIFIER_ATTRIBUTE66
 ,okcPAV.QUALIFIER_ATTRIBUTE67 AS okcPAV_QUALIFIER_ATTRIBUTE67
 ,okcPAV.QUALIFIER_ATTRIBUTE68 AS okcPAV_QUALIFIER_ATTRIBUTE68
 ,okcPAV.QUALIFIER_ATTRIBUTE69 AS okcPAV_QUALIFIER_ATTRIBUTE69
 ,okcPAV.QUALIFIER_ATTRIBUTE70 AS okcPAV_QUALIFIER_ATTRIBUTE70
 ,okcPAV.QUALIFIER_ATTRIBUTE71 AS okcPAV_QUALIFIER_ATTRIBUTE71
 ,okcPAV.QUALIFIER_ATTRIBUTE72 AS okcPAV_QUALIFIER_ATTRIBUTE72
 ,okcPAV.QUALIFIER_ATTRIBUTE73 AS okcPAV_QUALIFIER_ATTRIBUTE73
 ,okcPAV.QUALIFIER_ATTRIBUTE74 AS okcPAV_QUALIFIER_ATTRIBUTE74
 ,okcPAV.QUALIFIER_ATTRIBUTE75 AS okcPAV_QUALIFIER_ATTRIBUTE75
 ,okcPAV.QUALIFIER_ATTRIBUTE76 AS okcPAV_QUALIFIER_ATTRIBUTE76
 ,okcPAV.QUALIFIER_ATTRIBUTE77 AS okcPAV_QUALIFIER_ATTRIBUTE77
 ,okcPAV.QUALIFIER_ATTRIBUTE78 AS okcPAV_QUALIFIER_ATTRIBUTE78
 ,okcPAV.QUALIFIER_ATTRIBUTE79 AS okcPAV_QUALIFIER_ATTRIBUTE79
 ,okcPAV.QUALIFIER_ATTRIBUTE80 AS okcPAV_QUALIFIER_ATTRIBUTE80
 ,okcPAV.QUALIFIER_ATTRIBUTE81 AS okcPAV_QUALIFIER_ATTRIBUTE81
 ,okcPAV.QUALIFIER_ATTRIBUTE82 AS okcPAV_QUALIFIER_ATTRIBUTE82
 ,okcPAV.QUALIFIER_ATTRIBUTE83 AS okcPAV_QUALIFIER_ATTRIBUTE83
 ,okcPAV.QUALIFIER_ATTRIBUTE84 AS okcPAV_QUALIFIER_ATTRIBUTE84
 ,okcPAV.QUALIFIER_ATTRIBUTE85 AS okcPAV_QUALIFIER_ATTRIBUTE85
 ,okcPAV.QUALIFIER_ATTRIBUTE86 AS okcPAV_QUALIFIER_ATTRIBUTE86
 ,okcPAV.QUALIFIER_ATTRIBUTE87 AS okcPAV_QUALIFIER_ATTRIBUTE87
 ,okcPAV.QUALIFIER_ATTRIBUTE88 AS okcPAV_QUALIFIER_ATTRIBUTE88
 ,okcPAV.QUALIFIER_ATTRIBUTE89 AS okcPAV_QUALIFIER_ATTRIBUTE89
 ,okcPAV.QUALIFIER_ATTRIBUTE90 AS okcPAV_QUALIFIER_ATTRIBUTE90
 ,okcPAV.QUALIFIER_ATTRIBUTE91 AS okcPAV_QUALIFIER_ATTRIBUTE91
 ,okcPAV.QUALIFIER_ATTRIBUTE92 AS okcPAV_QUALIFIER_ATTRIBUTE92
 ,okcPAV.QUALIFIER_ATTRIBUTE93 AS okcPAV_QUALIFIER_ATTRIBUTE93
 ,okcPAV.QUALIFIER_ATTRIBUTE94 AS okcPAV_QUALIFIER_ATTRIBUTE94
 ,okcPAV.QUALIFIER_ATTRIBUTE95 AS okcPAV_QUALIFIER_ATTRIBUTE95
 ,okcPAV.QUALIFIER_ATTRIBUTE96 AS okcPAV_QUALIFIER_ATTRIBUTE96
 ,okcPAV.QUALIFIER_ATTRIBUTE97 AS okcPAV_QUALIFIER_ATTRIBUTE97
 ,okcPAV.QUALIFIER_ATTRIBUTE98 AS okcPAV_QUALIFIER_ATTRIBUTE98
 ,okcPAV.QUALIFIER_ATTRIBUTE99 AS okcPAV_QUALIFIER_ATTRIBUTE99
 ,okcPAV.QUALIFIER_ATTRIBUTE100 AS okcPAV_QUALIFIER_ATTRIBUTE100
 ,okcPAV.SECURITY_GROUP_ID AS okcPAV_SECURITY_GROUP_ID
 ,okcPAV.PROGRAM_APPLICATION_ID AS okcPAV_PROGRAM_APPLICATION_ID
 ,okcPAV.PROGRAM_ID AS okcPAV_PROGRAM_ID
 ,okcPAV.PROGRAM_UPDATE_DATE AS okcPAV_PROGRAM_UPDATE_DATE
 ,okcPAV.REQUEST_ID AS okcPAV_REQUEST_ID
 ,1 AS okcPAV_OBJECT_VERSION_NUMBER
 FROM
  OKC_PRICE_ATT_VALUES okcPAV
 ,OKC_K_HEADERS_B okcH
  WHERE okcPAV.CHR_ID = okcH.ORIG_SYSTEM_ID1
  and okcH.ID = P_To_Chr_ID
  and okcPAV.CLE_ID is NULL
  and okcPAV.CHR_ID = P_From_Chr_ID;



--------------------------------------------------------------------------
--Cursor used during Component Copy to copy rows only for Lines
--------------------------------------------------------------------------
  CURSOR GetOkcPAVPartial_L IS
  SELECT
  okcPAV.ID AS okcPAV_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPAV_NewID
 ,okcPAV.FLEX_TITLE AS okcPAV_FLEX_TITLE
 ,okcPAV.PRICING_CONTEXT AS okcPAV_PRICING_CONTEXT
 ,okcPAV.PRICING_ATTRIBUTE1 AS okcPAV_PRICING_ATTRIBUTE1
 ,to_number(decode(okcPAV.CHR_ID,NULL,NULL,okcBT.DNZ_CHR_ID)) AS okcPAV_NewChrID
 ,okcPAV.PRICING_ATTRIBUTE2 AS okcPAV_PRICING_ATTRIBUTE2
 ,okcBT.ID AS okcPAV_NewCleID
 ,okcPAV.PRICING_ATTRIBUTE3 AS okcPAV_PRICING_ATTRIBUTE3
 ,okcPAV.PRICING_ATTRIBUTE4 AS okcPAV_PRICING_ATTRIBUTE4
 ,okcPAV.PRICING_ATTRIBUTE5 AS okcPAV_PRICING_ATTRIBUTE5
 ,okcPAV.PRICING_ATTRIBUTE6 AS okcPAV_PRICING_ATTRIBUTE6
 ,okcPAV.PRICING_ATTRIBUTE7 AS okcPAV_PRICING_ATTRIBUTE7
 ,okcPAV.PRICING_ATTRIBUTE8 AS okcPAV_PRICING_ATTRIBUTE8
 ,okcPAV.PRICING_ATTRIBUTE9 AS okcPAV_PRICING_ATTRIBUTE9
 ,okcPAV.PRICING_ATTRIBUTE10 AS okcPAV_PRICING_ATTRIBUTE10
 ,okcPAV.PRICING_ATTRIBUTE11 AS okcPAV_PRICING_ATTRIBUTE11
 ,okcPAV.PRICING_ATTRIBUTE12 AS okcPAV_PRICING_ATTRIBUTE12
 ,okcPAV.PRICING_ATTRIBUTE13 AS okcPAV_PRICING_ATTRIBUTE13
 ,okcPAV.PRICING_ATTRIBUTE14 AS okcPAV_PRICING_ATTRIBUTE14
 ,okcPAV.PRICING_ATTRIBUTE15 AS okcPAV_PRICING_ATTRIBUTE15
 ,okcPAV.PRICING_ATTRIBUTE16 AS okcPAV_PRICING_ATTRIBUTE16
 ,okcPAV.PRICING_ATTRIBUTE17 AS okcPAV_PRICING_ATTRIBUTE17
 ,okcPAV.PRICING_ATTRIBUTE18 AS okcPAV_PRICING_ATTRIBUTE18
 ,okcPAV.PRICING_ATTRIBUTE19 AS okcPAV_PRICING_ATTRIBUTE19
 ,okcPAV.PRICING_ATTRIBUTE20 AS okcPAV_PRICING_ATTRIBUTE20
 ,okcPAV.PRICING_ATTRIBUTE21 AS okcPAV_PRICING_ATTRIBUTE21
 ,okcPAV.PRICING_ATTRIBUTE22 AS okcPAV_PRICING_ATTRIBUTE22
 ,okcPAV.PRICING_ATTRIBUTE23 AS okcPAV_PRICING_ATTRIBUTE23
 ,okcPAV.PRICING_ATTRIBUTE24 AS okcPAV_PRICING_ATTRIBUTE24
 ,okcPAV.PRICING_ATTRIBUTE25 AS okcPAV_PRICING_ATTRIBUTE25
 ,okcPAV.PRICING_ATTRIBUTE26 AS okcPAV_PRICING_ATTRIBUTE26
 ,okcPAV.PRICING_ATTRIBUTE27 AS okcPAV_PRICING_ATTRIBUTE27
 ,okcPAV.PRICING_ATTRIBUTE28 AS okcPAV_PRICING_ATTRIBUTE28
 ,okcPAV.PRICING_ATTRIBUTE29 AS okcPAV_PRICING_ATTRIBUTE29
 ,okcPAV.PRICING_ATTRIBUTE30 AS okcPAV_PRICING_ATTRIBUTE30
 ,okcPAV.PRICING_ATTRIBUTE31 AS okcPAV_PRICING_ATTRIBUTE31
 ,okcPAV.PRICING_ATTRIBUTE32 AS okcPAV_PRICING_ATTRIBUTE32
 ,okcPAV.PRICING_ATTRIBUTE33 AS okcPAV_PRICING_ATTRIBUTE33
 ,okcPAV.PRICING_ATTRIBUTE34 AS okcPAV_PRICING_ATTRIBUTE34
 ,okcPAV.PRICING_ATTRIBUTE35 AS okcPAV_PRICING_ATTRIBUTE35
 ,okcPAV.PRICING_ATTRIBUTE36 AS okcPAV_PRICING_ATTRIBUTE36
 ,okcPAV.PRICING_ATTRIBUTE37 AS okcPAV_PRICING_ATTRIBUTE37
 ,okcPAV.PRICING_ATTRIBUTE38 AS okcPAV_PRICING_ATTRIBUTE38
 ,okcPAV.PRICING_ATTRIBUTE39 AS okcPAV_PRICING_ATTRIBUTE39
 ,okcPAV.PRICING_ATTRIBUTE40 AS okcPAV_PRICING_ATTRIBUTE40
 ,okcPAV.PRICING_ATTRIBUTE41 AS okcPAV_PRICING_ATTRIBUTE41
 ,okcPAV.PRICING_ATTRIBUTE42 AS okcPAV_PRICING_ATTRIBUTE42
 ,okcPAV.PRICING_ATTRIBUTE43 AS okcPAV_PRICING_ATTRIBUTE43
 ,okcPAV.PRICING_ATTRIBUTE44 AS okcPAV_PRICING_ATTRIBUTE44
 ,okcPAV.PRICING_ATTRIBUTE45 AS okcPAV_PRICING_ATTRIBUTE45
 ,okcPAV.PRICING_ATTRIBUTE46 AS okcPAV_PRICING_ATTRIBUTE46
 ,okcPAV.PRICING_ATTRIBUTE47 AS okcPAV_PRICING_ATTRIBUTE47
 ,okcPAV.PRICING_ATTRIBUTE48 AS okcPAV_PRICING_ATTRIBUTE48
 ,okcPAV.PRICING_ATTRIBUTE49 AS okcPAV_PRICING_ATTRIBUTE49
 ,okcPAV.PRICING_ATTRIBUTE50 AS okcPAV_PRICING_ATTRIBUTE50
 ,okcPAV.PRICING_ATTRIBUTE51 AS okcPAV_PRICING_ATTRIBUTE51
 ,okcPAV.PRICING_ATTRIBUTE52 AS okcPAV_PRICING_ATTRIBUTE52
 ,okcPAV.PRICING_ATTRIBUTE53 AS okcPAV_PRICING_ATTRIBUTE53
 ,okcPAV.PRICING_ATTRIBUTE54 AS okcPAV_PRICING_ATTRIBUTE54
 ,okcPAV.PRICING_ATTRIBUTE55 AS okcPAV_PRICING_ATTRIBUTE55
 ,okcPAV.PRICING_ATTRIBUTE56 AS okcPAV_PRICING_ATTRIBUTE56
 ,okcPAV.PRICING_ATTRIBUTE57 AS okcPAV_PRICING_ATTRIBUTE57
 ,okcPAV.PRICING_ATTRIBUTE58 AS okcPAV_PRICING_ATTRIBUTE58
 ,okcPAV.PRICING_ATTRIBUTE59 AS okcPAV_PRICING_ATTRIBUTE59
 ,okcPAV.PRICING_ATTRIBUTE60 AS okcPAV_PRICING_ATTRIBUTE60
 ,okcPAV.PRICING_ATTRIBUTE61 AS okcPAV_PRICING_ATTRIBUTE61
 ,okcPAV.PRICING_ATTRIBUTE62 AS okcPAV_PRICING_ATTRIBUTE62
 ,okcPAV.PRICING_ATTRIBUTE63 AS okcPAV_PRICING_ATTRIBUTE63
 ,okcPAV.PRICING_ATTRIBUTE64 AS okcPAV_PRICING_ATTRIBUTE64
 ,okcPAV.PRICING_ATTRIBUTE65 AS okcPAV_PRICING_ATTRIBUTE65
 ,okcPAV.PRICING_ATTRIBUTE66 AS okcPAV_PRICING_ATTRIBUTE66
 ,okcPAV.PRICING_ATTRIBUTE67 AS okcPAV_PRICING_ATTRIBUTE67
 ,okcPAV.PRICING_ATTRIBUTE68 AS okcPAV_PRICING_ATTRIBUTE68
 ,okcPAV.PRICING_ATTRIBUTE69 AS okcPAV_PRICING_ATTRIBUTE69
 ,okcPAV.PRICING_ATTRIBUTE70 AS okcPAV_PRICING_ATTRIBUTE70
 ,okcPAV.PRICING_ATTRIBUTE71 AS okcPAV_PRICING_ATTRIBUTE71
 ,okcPAV.PRICING_ATTRIBUTE72 AS okcPAV_PRICING_ATTRIBUTE72
 ,okcPAV.PRICING_ATTRIBUTE73 AS okcPAV_PRICING_ATTRIBUTE73
 ,okcPAV.PRICING_ATTRIBUTE74 AS okcPAV_PRICING_ATTRIBUTE74
 ,okcPAV.PRICING_ATTRIBUTE75 AS okcPAV_PRICING_ATTRIBUTE75
 ,okcPAV.PRICING_ATTRIBUTE76 AS okcPAV_PRICING_ATTRIBUTE76
 ,okcPAV.PRICING_ATTRIBUTE77 AS okcPAV_PRICING_ATTRIBUTE77
 ,okcPAV.PRICING_ATTRIBUTE78 AS okcPAV_PRICING_ATTRIBUTE78
 ,okcPAV.PRICING_ATTRIBUTE79 AS okcPAV_PRICING_ATTRIBUTE79
 ,okcPAV.PRICING_ATTRIBUTE80 AS okcPAV_PRICING_ATTRIBUTE80
 ,okcPAV.PRICING_ATTRIBUTE81 AS okcPAV_PRICING_ATTRIBUTE81
 ,okcPAV.PRICING_ATTRIBUTE82 AS okcPAV_PRICING_ATTRIBUTE82
 ,okcPAV.PRICING_ATTRIBUTE83 AS okcPAV_PRICING_ATTRIBUTE83
 ,okcPAV.PRICING_ATTRIBUTE84 AS okcPAV_PRICING_ATTRIBUTE84
 ,okcPAV.PRICING_ATTRIBUTE85 AS okcPAV_PRICING_ATTRIBUTE85
 ,okcPAV.PRICING_ATTRIBUTE86 AS okcPAV_PRICING_ATTRIBUTE86
 ,okcPAV.PRICING_ATTRIBUTE87 AS okcPAV_PRICING_ATTRIBUTE87
 ,okcPAV.PRICING_ATTRIBUTE88 AS okcPAV_PRICING_ATTRIBUTE88
 ,okcPAV.PRICING_ATTRIBUTE89 AS okcPAV_PRICING_ATTRIBUTE89
 ,okcPAV.PRICING_ATTRIBUTE90 AS okcPAV_PRICING_ATTRIBUTE90
 ,okcPAV.PRICING_ATTRIBUTE91 AS okcPAV_PRICING_ATTRIBUTE91
 ,okcPAV.PRICING_ATTRIBUTE92 AS okcPAV_PRICING_ATTRIBUTE92
 ,okcPAV.PRICING_ATTRIBUTE93 AS okcPAV_PRICING_ATTRIBUTE93
 ,okcPAV.PRICING_ATTRIBUTE94 AS okcPAV_PRICING_ATTRIBUTE94
 ,okcPAV.PRICING_ATTRIBUTE95 AS okcPAV_PRICING_ATTRIBUTE95
 ,okcPAV.PRICING_ATTRIBUTE96 AS okcPAV_PRICING_ATTRIBUTE96
 ,okcPAV.PRICING_ATTRIBUTE97 AS okcPAV_PRICING_ATTRIBUTE97
 ,okcPAV.PRICING_ATTRIBUTE98 AS okcPAV_PRICING_ATTRIBUTE98
 ,okcPAV.PRICING_ATTRIBUTE99 AS okcPAV_PRICING_ATTRIBUTE99
 ,okcPAV.PRICING_ATTRIBUTE100 AS okcPAV_PRICING_ATTRIBUTE100
 ,okcPAV.QUALIFIER_CONTEXT AS okcPAV_QUALIFIER_CONTEXT
 ,okcPAV.QUALIFIER_ATTRIBUTE1 AS okcPAV_QUALIFIER_ATTRIBUTE1
 ,okcPAV.QUALIFIER_ATTRIBUTE2 AS okcPAV_QUALIFIER_ATTRIBUTE2
 ,okcPAV.QUALIFIER_ATTRIBUTE3 AS okcPAV_QUALIFIER_ATTRIBUTE3
 ,okcPAV.QUALIFIER_ATTRIBUTE4 AS okcPAV_QUALIFIER_ATTRIBUTE4
 ,okcPAV.QUALIFIER_ATTRIBUTE5 AS okcPAV_QUALIFIER_ATTRIBUTE5
 ,okcPAV.QUALIFIER_ATTRIBUTE6 AS okcPAV_QUALIFIER_ATTRIBUTE6
 ,okcPAV.QUALIFIER_ATTRIBUTE7 AS okcPAV_QUALIFIER_ATTRIBUTE7
 ,okcPAV.QUALIFIER_ATTRIBUTE8 AS okcPAV_QUALIFIER_ATTRIBUTE8
 ,okcPAV.QUALIFIER_ATTRIBUTE9 AS okcPAV_QUALIFIER_ATTRIBUTE9
 ,okcPAV.QUALIFIER_ATTRIBUTE10 AS okcPAV_QUALIFIER_ATTRIBUTE10
 ,okcPAV.QUALIFIER_ATTRIBUTE11 AS okcPAV_QUALIFIER_ATTRIBUTE11
 ,okcPAV.QUALIFIER_ATTRIBUTE12 AS okcPAV_QUALIFIER_ATTRIBUTE12
 ,okcPAV.QUALIFIER_ATTRIBUTE13 AS okcPAV_QUALIFIER_ATTRIBUTE13
 ,okcPAV.QUALIFIER_ATTRIBUTE14 AS okcPAV_QUALIFIER_ATTRIBUTE14
 ,okcPAV.QUALIFIER_ATTRIBUTE15 AS okcPAV_QUALIFIER_ATTRIBUTE15
 ,okcPAV.QUALIFIER_ATTRIBUTE16 AS okcPAV_QUALIFIER_ATTRIBUTE16
 ,okcPAV.QUALIFIER_ATTRIBUTE17 AS okcPAV_QUALIFIER_ATTRIBUTE17
 ,okcPAV.QUALIFIER_ATTRIBUTE18 AS okcPAV_QUALIFIER_ATTRIBUTE18
 ,okcPAV.QUALIFIER_ATTRIBUTE19 AS okcPAV_QUALIFIER_ATTRIBUTE19
 ,okcPAV.QUALIFIER_ATTRIBUTE20 AS okcPAV_QUALIFIER_ATTRIBUTE20
 ,okcPAV.QUALIFIER_ATTRIBUTE21 AS okcPAV_QUALIFIER_ATTRIBUTE21
 ,okcPAV.QUALIFIER_ATTRIBUTE22 AS okcPAV_QUALIFIER_ATTRIBUTE22
 ,okcPAV.QUALIFIER_ATTRIBUTE23 AS okcPAV_QUALIFIER_ATTRIBUTE23
 ,okcPAV.QUALIFIER_ATTRIBUTE24 AS okcPAV_QUALIFIER_ATTRIBUTE24
 ,okcPAV.QUALIFIER_ATTRIBUTE25 AS okcPAV_QUALIFIER_ATTRIBUTE25
 ,okcPAV.QUALIFIER_ATTRIBUTE26 AS okcPAV_QUALIFIER_ATTRIBUTE26
 ,okcPAV.QUALIFIER_ATTRIBUTE27 AS okcPAV_QUALIFIER_ATTRIBUTE27
 ,okcPAV.QUALIFIER_ATTRIBUTE28 AS okcPAV_QUALIFIER_ATTRIBUTE28
 ,okcPAV.QUALIFIER_ATTRIBUTE29 AS okcPAV_QUALIFIER_ATTRIBUTE29
 ,okcPAV.QUALIFIER_ATTRIBUTE30 AS okcPAV_QUALIFIER_ATTRIBUTE30
 ,okcPAV.QUALIFIER_ATTRIBUTE31 AS okcPAV_QUALIFIER_ATTRIBUTE31
 ,okcPAV.QUALIFIER_ATTRIBUTE32 AS okcPAV_QUALIFIER_ATTRIBUTE32
 ,okcPAV.QUALIFIER_ATTRIBUTE33 AS okcPAV_QUALIFIER_ATTRIBUTE33
 ,okcPAV.QUALIFIER_ATTRIBUTE34 AS okcPAV_QUALIFIER_ATTRIBUTE34
 ,okcPAV.QUALIFIER_ATTRIBUTE35 AS okcPAV_QUALIFIER_ATTRIBUTE35
 ,okcPAV.QUALIFIER_ATTRIBUTE36 AS okcPAV_QUALIFIER_ATTRIBUTE36
 ,okcPAV.QUALIFIER_ATTRIBUTE37 AS okcPAV_QUALIFIER_ATTRIBUTE37
 ,okcPAV.QUALIFIER_ATTRIBUTE38 AS okcPAV_QUALIFIER_ATTRIBUTE38
 ,okcPAV.QUALIFIER_ATTRIBUTE39 AS okcPAV_QUALIFIER_ATTRIBUTE39
 ,okcPAV.QUALIFIER_ATTRIBUTE40 AS okcPAV_QUALIFIER_ATTRIBUTE40
 ,okcPAV.QUALIFIER_ATTRIBUTE41 AS okcPAV_QUALIFIER_ATTRIBUTE41
 ,okcPAV.QUALIFIER_ATTRIBUTE42 AS okcPAV_QUALIFIER_ATTRIBUTE42
 ,okcPAV.QUALIFIER_ATTRIBUTE43 AS okcPAV_QUALIFIER_ATTRIBUTE43
 ,okcPAV.QUALIFIER_ATTRIBUTE44 AS okcPAV_QUALIFIER_ATTRIBUTE44
 ,okcPAV.QUALIFIER_ATTRIBUTE45 AS okcPAV_QUALIFIER_ATTRIBUTE45
 ,okcPAV.QUALIFIER_ATTRIBUTE46 AS okcPAV_QUALIFIER_ATTRIBUTE46
 ,okcPAV.QUALIFIER_ATTRIBUTE47 AS okcPAV_QUALIFIER_ATTRIBUTE47
 ,okcPAV.QUALIFIER_ATTRIBUTE48 AS okcPAV_QUALIFIER_ATTRIBUTE48
 ,okcPAV.QUALIFIER_ATTRIBUTE49 AS okcPAV_QUALIFIER_ATTRIBUTE49
 ,okcPAV.QUALIFIER_ATTRIBUTE50 AS okcPAV_QUALIFIER_ATTRIBUTE50
 ,okcPAV.QUALIFIER_ATTRIBUTE51 AS okcPAV_QUALIFIER_ATTRIBUTE51
 ,okcPAV.QUALIFIER_ATTRIBUTE52 AS okcPAV_QUALIFIER_ATTRIBUTE52
 ,okcPAV.QUALIFIER_ATTRIBUTE53 AS okcPAV_QUALIFIER_ATTRIBUTE53
 ,okcPAV.QUALIFIER_ATTRIBUTE54 AS okcPAV_QUALIFIER_ATTRIBUTE54
 ,okcPAV.QUALIFIER_ATTRIBUTE55 AS okcPAV_QUALIFIER_ATTRIBUTE55
 ,okcPAV.QUALIFIER_ATTRIBUTE56 AS okcPAV_QUALIFIER_ATTRIBUTE56
 ,okcPAV.QUALIFIER_ATTRIBUTE57 AS okcPAV_QUALIFIER_ATTRIBUTE57
 ,okcPAV.QUALIFIER_ATTRIBUTE58 AS okcPAV_QUALIFIER_ATTRIBUTE58
 ,okcPAV.QUALIFIER_ATTRIBUTE59 AS okcPAV_QUALIFIER_ATTRIBUTE59
 ,okcPAV.QUALIFIER_ATTRIBUTE60 AS okcPAV_QUALIFIER_ATTRIBUTE60
 ,okcPAV.QUALIFIER_ATTRIBUTE61 AS okcPAV_QUALIFIER_ATTRIBUTE61
 ,okcPAV.QUALIFIER_ATTRIBUTE62 AS okcPAV_QUALIFIER_ATTRIBUTE62
 ,okcPAV.QUALIFIER_ATTRIBUTE63 AS okcPAV_QUALIFIER_ATTRIBUTE63
 ,okcPAV.QUALIFIER_ATTRIBUTE64 AS okcPAV_QUALIFIER_ATTRIBUTE64
 ,okcPAV.QUALIFIER_ATTRIBUTE65 AS okcPAV_QUALIFIER_ATTRIBUTE65
 ,okcPAV.QUALIFIER_ATTRIBUTE66 AS okcPAV_QUALIFIER_ATTRIBUTE66
 ,okcPAV.QUALIFIER_ATTRIBUTE67 AS okcPAV_QUALIFIER_ATTRIBUTE67
 ,okcPAV.QUALIFIER_ATTRIBUTE68 AS okcPAV_QUALIFIER_ATTRIBUTE68
 ,okcPAV.QUALIFIER_ATTRIBUTE69 AS okcPAV_QUALIFIER_ATTRIBUTE69
 ,okcPAV.QUALIFIER_ATTRIBUTE70 AS okcPAV_QUALIFIER_ATTRIBUTE70
 ,okcPAV.QUALIFIER_ATTRIBUTE71 AS okcPAV_QUALIFIER_ATTRIBUTE71
 ,okcPAV.QUALIFIER_ATTRIBUTE72 AS okcPAV_QUALIFIER_ATTRIBUTE72
 ,okcPAV.QUALIFIER_ATTRIBUTE73 AS okcPAV_QUALIFIER_ATTRIBUTE73
 ,okcPAV.QUALIFIER_ATTRIBUTE74 AS okcPAV_QUALIFIER_ATTRIBUTE74
 ,okcPAV.QUALIFIER_ATTRIBUTE75 AS okcPAV_QUALIFIER_ATTRIBUTE75
 ,okcPAV.QUALIFIER_ATTRIBUTE76 AS okcPAV_QUALIFIER_ATTRIBUTE76
 ,okcPAV.QUALIFIER_ATTRIBUTE77 AS okcPAV_QUALIFIER_ATTRIBUTE77
 ,okcPAV.QUALIFIER_ATTRIBUTE78 AS okcPAV_QUALIFIER_ATTRIBUTE78
 ,okcPAV.QUALIFIER_ATTRIBUTE79 AS okcPAV_QUALIFIER_ATTRIBUTE79
 ,okcPAV.QUALIFIER_ATTRIBUTE80 AS okcPAV_QUALIFIER_ATTRIBUTE80
 ,okcPAV.QUALIFIER_ATTRIBUTE81 AS okcPAV_QUALIFIER_ATTRIBUTE81
 ,okcPAV.QUALIFIER_ATTRIBUTE82 AS okcPAV_QUALIFIER_ATTRIBUTE82
 ,okcPAV.QUALIFIER_ATTRIBUTE83 AS okcPAV_QUALIFIER_ATTRIBUTE83
 ,okcPAV.QUALIFIER_ATTRIBUTE84 AS okcPAV_QUALIFIER_ATTRIBUTE84
 ,okcPAV.QUALIFIER_ATTRIBUTE85 AS okcPAV_QUALIFIER_ATTRIBUTE85
 ,okcPAV.QUALIFIER_ATTRIBUTE86 AS okcPAV_QUALIFIER_ATTRIBUTE86
 ,okcPAV.QUALIFIER_ATTRIBUTE87 AS okcPAV_QUALIFIER_ATTRIBUTE87
 ,okcPAV.QUALIFIER_ATTRIBUTE88 AS okcPAV_QUALIFIER_ATTRIBUTE88
 ,okcPAV.QUALIFIER_ATTRIBUTE89 AS okcPAV_QUALIFIER_ATTRIBUTE89
 ,okcPAV.QUALIFIER_ATTRIBUTE90 AS okcPAV_QUALIFIER_ATTRIBUTE90
 ,okcPAV.QUALIFIER_ATTRIBUTE91 AS okcPAV_QUALIFIER_ATTRIBUTE91
 ,okcPAV.QUALIFIER_ATTRIBUTE92 AS okcPAV_QUALIFIER_ATTRIBUTE92
 ,okcPAV.QUALIFIER_ATTRIBUTE93 AS okcPAV_QUALIFIER_ATTRIBUTE93
 ,okcPAV.QUALIFIER_ATTRIBUTE94 AS okcPAV_QUALIFIER_ATTRIBUTE94
 ,okcPAV.QUALIFIER_ATTRIBUTE95 AS okcPAV_QUALIFIER_ATTRIBUTE95
 ,okcPAV.QUALIFIER_ATTRIBUTE96 AS okcPAV_QUALIFIER_ATTRIBUTE96
 ,okcPAV.QUALIFIER_ATTRIBUTE97 AS okcPAV_QUALIFIER_ATTRIBUTE97
 ,okcPAV.QUALIFIER_ATTRIBUTE98 AS okcPAV_QUALIFIER_ATTRIBUTE98
 ,okcPAV.QUALIFIER_ATTRIBUTE99 AS okcPAV_QUALIFIER_ATTRIBUTE99
 ,okcPAV.QUALIFIER_ATTRIBUTE100 AS okcPAV_QUALIFIER_ATTRIBUTE100
 ,okcPAV.SECURITY_GROUP_ID AS okcPAV_SECURITY_GROUP_ID
 ,okcPAV.PROGRAM_APPLICATION_ID AS okcPAV_PROGRAM_APPLICATION_ID
 ,okcPAV.PROGRAM_ID AS okcPAV_PROGRAM_ID
 ,okcPAV.PROGRAM_UPDATE_DATE AS okcPAV_PROGRAM_UPDATE_DATE
 ,okcPAV.REQUEST_ID AS okcPAV_REQUEST_ID
 ,1 AS okcPAV_OBJECT_VERSION_NUMBER
 FROM
  OKC_PRICE_ATT_VALUES okcPAV
 ,OKC_K_LINES_B_TEMP okcBT
  WHERE okcPAV.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;

 Begin
  x_return_status := l_return_status;

 IF (P_Partial_Copy_YN = 'N') THEN
  IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAVFull'
                         );
  END IF;

  OPEN GetOkcPAVFull;
 ELSIF (P_Partial_Copy_YN = 'Y') THEN
  IF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAVPartial_H'
                         );
    END IF;
    OPEN GetOkcPAVPartial_H;
  ELSIF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAVPartial_HNL'
                         );
    END IF;
    OPEN GetOkcPAVPartial_HNL;
  ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAVPartial_L'
                         );
    END IF;
    OPEN GetOkcPAVPartial_L;
  ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count = 0) THEN
    RETURN;
  END IF;

 END IF;

 LOOP
 IF (P_Partial_Copy_YN = 'N') then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing GetOkcPAVFull'
                         );
    END IF;

  FETCH GetOkcPAVFull BULK COLLECT INTO
  OkcPAVRecTab.OkcPAV_OldID
 ,OkcPAVRecTab.OkcPAV_NewID
 ,OkcPAVRecTab.OkcPAV_FLEX_TITLE
 ,OkcPAVRecTab.OkcPAV_PRICING_CONTEXT
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_NewChrID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_NewCleID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_CONTEXT
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_SECURITY_GROUP_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_APPLICATION_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_UPDATE_DATE
 ,OkcPAVRecTab.OkcPAV_REQUEST_ID
 ,OkcPAVRecTab.OkcPAV_OBJECT_VERSION_NUMBER
 LIMIT G_BULK_FETCH_LIMIT;

 ELSIF (P_Partial_Copy_YN = 'Y') THEN
  IF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing GetOkcPAVPartial_H'
                         );
    END IF;

    FETCH GetOkcPAVPartial_H BULK COLLECT INTO
  OkcPAVRecTab.OkcPAV_OldID
 ,OkcPAVRecTab.OkcPAV_NewID
 ,OkcPAVRecTab.OkcPAV_FLEX_TITLE
 ,OkcPAVRecTab.OkcPAV_PRICING_CONTEXT
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_NewChrID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_NewCleID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_CONTEXT
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_SECURITY_GROUP_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_APPLICATION_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_UPDATE_DATE
 ,OkcPAVRecTab.OkcPAV_REQUEST_ID
 ,OkcPAVRecTab.OkcPAV_OBJECT_VERSION_NUMBER
 LIMIT G_BULK_FETCH_LIMIT;
  ELSIF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing GetOkcPAVPartial_HNL'
                         );
    END IF;

   FETCH GetOkcPAVPartial_HNL BULK COLLECT INTO
  OkcPAVRecTab.OkcPAV_OldID
 ,OkcPAVRecTab.OkcPAV_NewID
 ,OkcPAVRecTab.OkcPAV_FLEX_TITLE
 ,OkcPAVRecTab.OkcPAV_PRICING_CONTEXT
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_NewChrID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_NewCleID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_CONTEXT
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_SECURITY_GROUP_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_APPLICATION_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_UPDATE_DATE
 ,OkcPAVRecTab.OkcPAV_REQUEST_ID
 ,OkcPAVRecTab.OkcPAV_OBJECT_VERSION_NUMBER
 LIMIT G_BULK_FETCH_LIMIT;
  ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) THEN

    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing GetOkcPAVPartial_L'
                         );
    END IF;

   FETCH GetOkcPAVPartial_L BULK COLLECT INTO
  OkcPAVRecTab.OkcPAV_OldID
 ,OkcPAVRecTab.OkcPAV_NewID
 ,OkcPAVRecTab.OkcPAV_FLEX_TITLE
 ,OkcPAVRecTab.OkcPAV_PRICING_CONTEXT
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_NewChrID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_NewCleID
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_CONTEXT
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE1
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE2
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE3
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE4
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE5
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE6
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE7
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE8
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE9
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE10
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE11
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE12
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE13
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE14
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE15
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE16
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE17
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE18
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE19
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE20
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE21
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE22
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE23
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE24
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE25
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE26
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE27
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE28
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE29
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE30
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE31
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE32
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE33
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE34
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE35
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE36
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE37
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE38
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE39
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE40
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE41
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE42
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE43
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE44
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE45
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE46
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE47
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE48
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE49
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE50
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE51
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE52
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE53
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE54
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE55
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE56
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE57
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE58
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE59
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE60
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE61
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE62
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE63
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE64
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE65
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE66
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE67
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE68
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE69
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE70
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE71
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE72
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE73
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE74
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE75
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE76
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE77
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE78
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE79
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE80
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE81
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE82
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE83
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE84
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE85
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE86
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE87
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE88
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE89
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE90
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE91
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE92
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE93
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE94
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE95
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE96
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE97
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE98
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE99
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE100
 ,OkcPAVRecTab.OkcPAV_SECURITY_GROUP_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_APPLICATION_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_ID
 ,OkcPAVRecTab.OkcPAV_PROGRAM_UPDATE_DATE
 ,OkcPAVRecTab.OkcPAV_REQUEST_ID
 ,OkcPAVRecTab.OkcPAV_OBJECT_VERSION_NUMBER
 LIMIT G_BULK_FETCH_LIMIT;
  END IF;
 END IF;

 ---Bulk insert into okc_price_att_values---
 FORALL i in OkcPAVRecTab.OkcPAV_NewID.FIRST .. OkcPAVRecTab.OkcPAV_NewID.LAST
 INSERT INTO OKC_PRICE_ATT_VALUES(
 ID
 ,FLEX_TITLE
 ,PRICING_CONTEXT
 ,PRICING_ATTRIBUTE1
 ,CHR_ID
 ,PRICING_ATTRIBUTE2
 ,CLE_ID
 ,PRICING_ATTRIBUTE3
 ,PRICING_ATTRIBUTE4
 ,PRICING_ATTRIBUTE5
 ,PRICING_ATTRIBUTE6
 ,PRICING_ATTRIBUTE7
 ,PRICING_ATTRIBUTE8
 ,PRICING_ATTRIBUTE9
 ,PRICING_ATTRIBUTE10
 ,PRICING_ATTRIBUTE11
 ,PRICING_ATTRIBUTE12
 ,PRICING_ATTRIBUTE13
 ,PRICING_ATTRIBUTE14
 ,PRICING_ATTRIBUTE15
 ,PRICING_ATTRIBUTE16
 ,PRICING_ATTRIBUTE17
 ,PRICING_ATTRIBUTE18
 ,PRICING_ATTRIBUTE19
 ,PRICING_ATTRIBUTE20
 ,PRICING_ATTRIBUTE21
 ,PRICING_ATTRIBUTE22
 ,PRICING_ATTRIBUTE23
 ,PRICING_ATTRIBUTE24
 ,PRICING_ATTRIBUTE25
 ,PRICING_ATTRIBUTE26
 ,PRICING_ATTRIBUTE27
 ,PRICING_ATTRIBUTE28
 ,PRICING_ATTRIBUTE29
 ,PRICING_ATTRIBUTE30
 ,PRICING_ATTRIBUTE31
 ,PRICING_ATTRIBUTE32
 ,PRICING_ATTRIBUTE33
 ,PRICING_ATTRIBUTE34
 ,PRICING_ATTRIBUTE35
 ,PRICING_ATTRIBUTE36
 ,PRICING_ATTRIBUTE37
 ,PRICING_ATTRIBUTE38
 ,PRICING_ATTRIBUTE39
 ,PRICING_ATTRIBUTE40
 ,PRICING_ATTRIBUTE41
 ,PRICING_ATTRIBUTE42
 ,PRICING_ATTRIBUTE43
 ,PRICING_ATTRIBUTE44
 ,PRICING_ATTRIBUTE45
 ,PRICING_ATTRIBUTE46
 ,PRICING_ATTRIBUTE47
 ,PRICING_ATTRIBUTE48
 ,PRICING_ATTRIBUTE49
 ,PRICING_ATTRIBUTE50
 ,PRICING_ATTRIBUTE51
 ,PRICING_ATTRIBUTE52
 ,PRICING_ATTRIBUTE53
 ,PRICING_ATTRIBUTE54
 ,PRICING_ATTRIBUTE55
 ,PRICING_ATTRIBUTE56
 ,PRICING_ATTRIBUTE57
 ,PRICING_ATTRIBUTE58
 ,PRICING_ATTRIBUTE59
 ,PRICING_ATTRIBUTE60
 ,PRICING_ATTRIBUTE61
 ,PRICING_ATTRIBUTE62
 ,PRICING_ATTRIBUTE63
 ,PRICING_ATTRIBUTE64
 ,PRICING_ATTRIBUTE65
 ,PRICING_ATTRIBUTE66
 ,PRICING_ATTRIBUTE67
 ,PRICING_ATTRIBUTE68
 ,PRICING_ATTRIBUTE69
 ,PRICING_ATTRIBUTE70
 ,PRICING_ATTRIBUTE71
 ,PRICING_ATTRIBUTE72
 ,PRICING_ATTRIBUTE73
 ,PRICING_ATTRIBUTE74
 ,PRICING_ATTRIBUTE75
 ,PRICING_ATTRIBUTE76
 ,PRICING_ATTRIBUTE77
 ,PRICING_ATTRIBUTE78
 ,PRICING_ATTRIBUTE79
 ,PRICING_ATTRIBUTE80
 ,PRICING_ATTRIBUTE81
 ,PRICING_ATTRIBUTE82
 ,PRICING_ATTRIBUTE83
 ,PRICING_ATTRIBUTE84
 ,PRICING_ATTRIBUTE85
 ,PRICING_ATTRIBUTE86
 ,PRICING_ATTRIBUTE87
 ,PRICING_ATTRIBUTE88
 ,PRICING_ATTRIBUTE89
 ,PRICING_ATTRIBUTE90
 ,PRICING_ATTRIBUTE91
 ,PRICING_ATTRIBUTE92
 ,PRICING_ATTRIBUTE93
 ,PRICING_ATTRIBUTE94
 ,PRICING_ATTRIBUTE95
 ,PRICING_ATTRIBUTE96
 ,PRICING_ATTRIBUTE97
 ,PRICING_ATTRIBUTE98
 ,PRICING_ATTRIBUTE99
 ,PRICING_ATTRIBUTE100
 ,QUALIFIER_CONTEXT
 ,QUALIFIER_ATTRIBUTE1
 ,QUALIFIER_ATTRIBUTE2
 ,QUALIFIER_ATTRIBUTE3
 ,QUALIFIER_ATTRIBUTE4
 ,QUALIFIER_ATTRIBUTE5
 ,QUALIFIER_ATTRIBUTE6
 ,QUALIFIER_ATTRIBUTE7
 ,QUALIFIER_ATTRIBUTE8
 ,QUALIFIER_ATTRIBUTE9
 ,QUALIFIER_ATTRIBUTE10
 ,QUALIFIER_ATTRIBUTE11
 ,QUALIFIER_ATTRIBUTE12
 ,QUALIFIER_ATTRIBUTE13
 ,QUALIFIER_ATTRIBUTE14
 ,QUALIFIER_ATTRIBUTE15
 ,QUALIFIER_ATTRIBUTE16
 ,QUALIFIER_ATTRIBUTE17
 ,QUALIFIER_ATTRIBUTE18
 ,QUALIFIER_ATTRIBUTE19
 ,QUALIFIER_ATTRIBUTE20
 ,QUALIFIER_ATTRIBUTE21
 ,QUALIFIER_ATTRIBUTE22
 ,QUALIFIER_ATTRIBUTE23
 ,QUALIFIER_ATTRIBUTE24
 ,QUALIFIER_ATTRIBUTE25
 ,QUALIFIER_ATTRIBUTE26
 ,QUALIFIER_ATTRIBUTE27
 ,QUALIFIER_ATTRIBUTE28
 ,QUALIFIER_ATTRIBUTE29
 ,QUALIFIER_ATTRIBUTE30
 ,QUALIFIER_ATTRIBUTE31
 ,QUALIFIER_ATTRIBUTE32
 ,QUALIFIER_ATTRIBUTE33
 ,QUALIFIER_ATTRIBUTE34
 ,QUALIFIER_ATTRIBUTE35
 ,QUALIFIER_ATTRIBUTE36
 ,QUALIFIER_ATTRIBUTE37
 ,QUALIFIER_ATTRIBUTE38
 ,QUALIFIER_ATTRIBUTE39
 ,QUALIFIER_ATTRIBUTE40
 ,QUALIFIER_ATTRIBUTE41
 ,QUALIFIER_ATTRIBUTE42
 ,QUALIFIER_ATTRIBUTE43
 ,QUALIFIER_ATTRIBUTE44
 ,QUALIFIER_ATTRIBUTE45
 ,QUALIFIER_ATTRIBUTE46
 ,QUALIFIER_ATTRIBUTE47
 ,QUALIFIER_ATTRIBUTE48
 ,QUALIFIER_ATTRIBUTE49
 ,QUALIFIER_ATTRIBUTE50
 ,QUALIFIER_ATTRIBUTE51
 ,QUALIFIER_ATTRIBUTE52
 ,QUALIFIER_ATTRIBUTE53
 ,QUALIFIER_ATTRIBUTE54
 ,QUALIFIER_ATTRIBUTE55
 ,QUALIFIER_ATTRIBUTE56
 ,QUALIFIER_ATTRIBUTE57
 ,QUALIFIER_ATTRIBUTE58
 ,QUALIFIER_ATTRIBUTE59
 ,QUALIFIER_ATTRIBUTE60
 ,QUALIFIER_ATTRIBUTE61
 ,QUALIFIER_ATTRIBUTE62
 ,QUALIFIER_ATTRIBUTE63
 ,QUALIFIER_ATTRIBUTE64
 ,QUALIFIER_ATTRIBUTE65
 ,QUALIFIER_ATTRIBUTE66
 ,QUALIFIER_ATTRIBUTE67
 ,QUALIFIER_ATTRIBUTE68
 ,QUALIFIER_ATTRIBUTE69
 ,QUALIFIER_ATTRIBUTE70
 ,QUALIFIER_ATTRIBUTE71
 ,QUALIFIER_ATTRIBUTE72
 ,QUALIFIER_ATTRIBUTE73
 ,QUALIFIER_ATTRIBUTE74
 ,QUALIFIER_ATTRIBUTE75
 ,QUALIFIER_ATTRIBUTE76
 ,QUALIFIER_ATTRIBUTE77
 ,QUALIFIER_ATTRIBUTE78
 ,QUALIFIER_ATTRIBUTE79
 ,QUALIFIER_ATTRIBUTE80
 ,QUALIFIER_ATTRIBUTE81
 ,QUALIFIER_ATTRIBUTE82
 ,QUALIFIER_ATTRIBUTE83
 ,QUALIFIER_ATTRIBUTE84
 ,QUALIFIER_ATTRIBUTE85
 ,QUALIFIER_ATTRIBUTE86
 ,QUALIFIER_ATTRIBUTE87
 ,QUALIFIER_ATTRIBUTE88
 ,QUALIFIER_ATTRIBUTE89
 ,QUALIFIER_ATTRIBUTE90
 ,QUALIFIER_ATTRIBUTE91
 ,QUALIFIER_ATTRIBUTE92
 ,QUALIFIER_ATTRIBUTE93
 ,QUALIFIER_ATTRIBUTE94
 ,QUALIFIER_ATTRIBUTE95
 ,QUALIFIER_ATTRIBUTE96
 ,QUALIFIER_ATTRIBUTE97
 ,QUALIFIER_ATTRIBUTE98
 ,QUALIFIER_ATTRIBUTE99
 ,QUALIFIER_ATTRIBUTE100
 ,SECURITY_GROUP_ID
 ,PROGRAM_APPLICATION_ID
 ,PROGRAM_ID
 ,PROGRAM_UPDATE_DATE
 ,REQUEST_ID
 ,OBJECT_VERSION_NUMBER
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATE_LOGIN
 )
 SELECT
  OkcPAVRecTab.OkcPAV_NewID(i)
 ,OkcPAVRecTab.OkcPAV_FLEX_TITLE(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_CONTEXT(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE1(i)
 ,OkcPAVRecTab.OkcPAV_NewChrID(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE2(i)
 ,OkcPAVRecTab.OkcPAV_NewCleID(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE3(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE4(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE5(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE6(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE7(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE8(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE9(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE10(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE11(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE12(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE13(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE14(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE15(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE16(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE17(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE18(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE19(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE20(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE21(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE22(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE23(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE24(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE25(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE26(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE27(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE28(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE29(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE30(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE31(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE32(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE33(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE34(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE35(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE36(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE37(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE38(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE39(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE40(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE41(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE42(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE43(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE44(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE45(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE46(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE47(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE48(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE49(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE50(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE51(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE52(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE53(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE54(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE55(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE56(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE57(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE58(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE59(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE60(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE61(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE62(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE63(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE64(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE65(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE66(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE67(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE68(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE69(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE70(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE71(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE72(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE73(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE74(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE75(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE76(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE77(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE78(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE79(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE80(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE81(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE82(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE83(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE84(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE85(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE86(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE87(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE88(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE89(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE90(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE91(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE92(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE93(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE94(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE95(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE96(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE97(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE98(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE99(i)
 ,OkcPAVRecTab.OkcPAV_PRICING_ATTRIBUTE100(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_CONTEXT(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE1(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE2(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE3(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE4(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE5(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE6(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE7(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE8(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE9(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE10(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE11(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE12(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE13(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE14(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE15(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE16(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE17(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE18(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE19(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE20(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE21(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE22(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE23(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE24(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE25(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE26(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE27(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE28(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE29(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE30(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE31(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE32(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE33(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE34(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE35(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE36(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE37(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE38(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE39(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE40(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE41(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE42(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE43(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE44(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE45(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE46(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE47(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE48(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE49(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE50(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE51(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE52(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE53(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE54(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE55(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE56(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE57(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE58(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE59(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE60(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE61(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE62(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE63(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE64(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE65(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE66(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE67(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE68(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE69(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE70(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE71(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE72(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE73(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE74(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE75(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE76(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE77(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE78(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE79(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE80(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE81(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE82(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE83(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE84(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE85(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE86(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE87(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE88(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE89(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE90(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE91(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE92(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE93(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE94(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE95(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE96(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE97(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE98(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE99(i)
 ,OkcPAVRecTab.OkcPAV_QUALIFIER_ATTRIBUTE100(i)
 ,OkcPAVRecTab.OkcPAV_SECURITY_GROUP_ID(i)
 ,OkcPAVRecTab.OkcPAV_PROGRAM_APPLICATION_ID(i)
 ,OkcPAVRecTab.OkcPAV_PROGRAM_ID(i)
 ,OkcPAVRecTab.OkcPAV_PROGRAM_UPDATE_DATE(i)
 ,OkcPAVRecTab.OkcPAV_REQUEST_ID(i)
 ,OkcPAVRecTab.OkcPAV_OBJECT_VERSION_NUMBER(i)
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.LOGIN_ID
 from
 DUAL;

  If (P_Partial_Copy_YN = 'N') then
   EXIT WHEN GetOkcPAVFull%NOTFOUND;
  End If;

  IF (P_Partial_Copy_YN = 'N') THEN
   EXIT WHEN GetOkcPAVFull%NOTFOUND;
  ELSIF (P_Partial_Copy_YN = 'Y') THEN
   IF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) THEN
     EXIT WHEN GetOkcPAVPartial_H%NOTFOUND;
   ELSIF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) THEN
     EXIT WHEN GetOkcPAVPartial_HNL%NOTFOUND;
   ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) THEN
     EXIT WHEN GetOkcPAVPartial_L%NOTFOUND;
   END IF;
  END IF;

 END LOOP;


  IF GetOkcPAVFull%ISOPEN THEN
    CLOSE GetOkcPAVFull;
  ELSIF GetOkcPAVPartial_HNL%ISOPEN THEN
    CLOSE GetOkcPAVPartial_HNL;
  ELSIF GetOkcPAVPartial_H%ISOPEN THEN
    CLOSE GetOkcPAVPartial_H;
  ELSIF GetOkcPAVPartial_L%ISOPEN THEN
    CLOSE GetOkcPAVPartial_L;
  END IF;

    EXCEPTION
     WHEN OTHERS THEN
       IF GetOkcPAVFull%ISOPEN THEN
         CLOSE GetOkcPAVFull;
       ELSIF GetOkcPAVPartial_HNL%ISOPEN THEN
         CLOSE GetOkcPAVPartial_HNL;
       ELSIF GetOkcPAVPartial_H%ISOPEN THEN
         CLOSE GetOkcPAVPartial_H;
       ELSIF GetOkcPAVPartial_L%ISOPEN THEN
         CLOSE GetOkcPAVPartial_L;
       END IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_okc_price_att_values;

--===================================================
--  copy_okc_price_adjustments
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
--  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
--				    or as part of component copy from UI (value = 'Y')
--            P_Target_Contract_New_YN : Flag to indicate if copy process was copying to an existing contract (value = 'N')
--                                       or if a new contract header was created as part of the copy process (value = 'Y'). This
--                                       flag gets set to 'Y' just before the call to copy_contract_header procedure in
--                                       copy_components
--            If (P_Partial_Copy_YN = 'N') rows for both Header and Lines are copied (Full Contract copy)
--               use cursor GetOkcPAFull
--            If (P_Partial_Copy_YN = 'Y') then
--              If (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT = 0) then
--                Only rows for only Header , use cursor GetOkcPAPartial_H
--              Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT > 0) then
--                Both rows for both Header and Lines need to be copied, use cursor GetOkcPAPartial_HNL
--              Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Tbl.COUNT > 0) then
--                Only rows for chosen Lines are copied, use cursor GetOkcPAPartial_L
--              Elsif (P_Target_Contract_New_YN = 'N') and P_Lines_Tbl.COUNT = 0) then
--                nothing needs to be copied, no copy needed
--              End If
--            End If

--====================================================
 PROCEDURE copy_okc_price_adjustments(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
                            ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

 l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_PRICE_ADJUSTMENTS';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOkcPAFull IS
 SELECT
  okcPA.ID AS okcPA_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPA_NewID
 ,okcPA.PAT_ID AS okcPA_PAT_ID
 ,okcH.ID AS okcPA_NewChrID
 ,NULL AS okcPA_NewCleID
 ,okcPA.BSL_ID AS okcPA_BSL_ID
 ,okcPA.BCL_ID AS okcPA_BCL_ID
 ,okcPA.MODIFIED_FROM AS okcPA_MODIFIED_FROM
 ,okcPA.MODIFIED_TO AS okcPA_MODIFIED_TO
 ,okcPA.MODIFIER_MECHANISM_TYPE_CODE AS okcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPA.OPERAND AS okcPA_OPERAND
 ,okcPA.ARITHMETIC_OPERATOR AS okcPA_ARITHMETIC_OPERATOR
 ,okcPA.AUTOMATIC_FLAG AS okcPA_AUTOMATIC_FLAG
 ,okcPA.UPDATE_ALLOWED AS okcPA_UPDATE_ALLOWED
 ,okcPA.UPDATED_FLAG AS okcPA_UPDATED_FLAG
 ,okcPA.APPLIED_FLAG AS okcPA_APPLIED_FLAG
 ,okcPA.ON_INVOICE_FLAG AS okcPA_ON_INVOICE_FLAG
 ,okcPA.PRICING_PHASE_ID AS okcPA_PRICING_PHASE_ID
 ,okcPA.CONTEXT AS okcPA_CONTEXT
 ,okcPA.ATTRIBUTE1 AS okcPA_ATTRIBUTE1
 ,okcPA.ATTRIBUTE2 AS okcPA_ATTRIBUTE2
 ,okcPA.ATTRIBUTE3 AS okcPA_ATTRIBUTE3
 ,okcPA.ATTRIBUTE4 AS okcPA_ATTRIBUTE4
 ,okcPA.ATTRIBUTE5 AS okcPA_ATTRIBUTE5
 ,okcPA.ATTRIBUTE6 AS okcPA_ATTRIBUTE6
 ,okcPA.ATTRIBUTE7 AS okcPA_ATTRIBUTE7
 ,okcPA.ATTRIBUTE8 AS okcPA_ATTRIBUTE8
 ,okcPA.ATTRIBUTE9 AS okcPA_ATTRIBUTE9
 ,okcPA.ATTRIBUTE10 AS okcPA_ATTRIBUTE10
 ,okcPA.ATTRIBUTE11 AS okcPA_ATTRIBUTE11
 ,okcPA.ATTRIBUTE12 AS okcPA_ATTRIBUTE12
 ,okcPA.ATTRIBUTE13 AS okcPA_ATTRIBUTE13
 ,okcPA.ATTRIBUTE14 AS okcPA_ATTRIBUTE14
 ,okcPA.ATTRIBUTE15 AS okcPA_ATTRIBUTE15
 ,okcPA.SECURITY_GROUP_ID AS okcPA_SECURITY_GROUP_ID
 ,okcPA.PROGRAM_APPLICATION_ID AS okcPA_PROGRAM_APPLICATION_ID
 ,okcPA.PROGRAM_ID AS okcPA_PROGRAM_ID
 ,okcPA.PROGRAM_UPDATE_DATE AS okcPA_PROGRAM_UPDATE_DATE
 ,okcPA.REQUEST_ID AS okcPA_REQUEST_ID
 ,1 AS okcPA_OBJECT_VERSION_NUMBER
 ,okcPA.LIST_HEADER_ID AS okcPA_LIST_HEADER_ID
 ,okcPA.LIST_LINE_ID AS okcPA_LIST_LINE_ID
 ,okcPA.LIST_LINE_TYPE_CODE AS okcPA_LIST_LINE_TYPE_CODE
 ,okcPA.CHANGE_REASON_CODE AS okcPA_CHANGE_REASON_CODE
 ,okcPA.CHANGE_REASON_TEXT AS okcPA_CHANGE_REASON_TEXT
 ,okcPA.ESTIMATED_FLAG AS okcPA_ESTIMATED_FLAG
 ,okcPA.ADJUSTED_AMOUNT AS okcPA_ADJUSTED_AMOUNT
 ,okcPA.CHARGE_TYPE_CODE AS okcPA_CHARGE_TYPE_CODE
 ,okcPA.CHARGE_SUBTYPE_CODE AS okcPA_CHARGE_SUBTYPE_CODE
 ,okcPA.RANGE_BREAK_QUANTITY AS okcPA_RANGE_BREAK_QUANTITY
 ,okcPA.ACCRUAL_CONVERSION_RATE AS okcPA_ACCRUAL_CONVERSION_RATE
 ,okcPA.PRICING_GROUP_SEQUENCE AS okcPA_PRICING_GROUP_SEQUENCE
 ,okcPA.ACCRUAL_FLAG AS okcPA_ACCRUAL_FLAG
 ,okcPA.LIST_LINE_NO AS okcPA_LIST_LINE_NO
 ,okcPA.SOURCE_SYSTEM_CODE AS okcPA_SOURCE_SYSTEM_CODE
 ,okcPA.BENEFIT_QTY AS okcPA_BENEFIT_QTY
 ,okcPA.BENEFIT_UOM_CODE AS okcPA_BENEFIT_UOM_CODE
 ,okcPA.EXPIRATION_DATE AS okcPA_EXPIRATION_DATE
 ,okcPA.MODIFIER_LEVEL_CODE AS okcPA_MODIFIER_LEVEL_CODE
 ,okcPA.PRICE_BREAK_TYPE_CODE AS okcPA_PRICE_BREAK_TYPE_CODE
 ,okcPA.SUBSTITUTION_ATTRIBUTE AS okcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPA.PRORATION_TYPE_CODE AS okcPA_PRORATION_TYPE_CODE
 ,okcPA.INCLUDE_ON_RETURNS_FLAG AS okcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPA.REBATE_TRANSACTION_TYPE_CODE AS okcPA_REBATE_TRXN_TYPE_CODE
 FROM
   OKC_PRICE_ADJUSTMENTS okcPA
  ,OKC_K_HEADERS_B okcH
   WHERE okcPA.CHR_ID = okcH.ORIG_SYSTEM_ID1
   and okcH.ID = P_To_Chr_ID
   and okcPA.CLE_ID is NULL
   and okcPA.CHR_ID = P_From_Chr_ID
 UNION
 SELECT
  okcPA.ID AS okcPA_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPA_NewID
 ,okcPA.PAT_ID AS okcPA_PAT_ID
 ,to_number(decode(okcPA.CHR_ID,NULL,NULL,okcB.DNZ_CHR_ID)) AS okcPA_NewChrID
 ,okcB.ID AS okcPA_NewCleID
 ,okcPA.BSL_ID AS okcPA_BSL_ID
 ,okcPA.BCL_ID AS okcPA_BCL_ID
 ,okcPA.MODIFIED_FROM AS okcPA_MODIFIED_FROM
 ,okcPA.MODIFIED_TO AS okcPA_MODIFIED_TO
 ,okcPA.MODIFIER_MECHANISM_TYPE_CODE AS okcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPA.OPERAND AS okcPA_OPERAND
 ,okcPA.ARITHMETIC_OPERATOR AS okcPA_ARITHMETIC_OPERATOR
 ,okcPA.AUTOMATIC_FLAG AS okcPA_AUTOMATIC_FLAG
 ,okcPA.UPDATE_ALLOWED AS okcPA_UPDATE_ALLOWED
 ,okcPA.UPDATED_FLAG AS okcPA_UPDATED_FLAG
 ,okcPA.APPLIED_FLAG AS okcPA_APPLIED_FLAG
 ,okcPA.ON_INVOICE_FLAG AS okcPA_ON_INVOICE_FLAG
 ,okcPA.PRICING_PHASE_ID AS okcPA_PRICING_PHASE_ID
 ,okcPA.CONTEXT AS okcPA_CONTEXT
 ,okcPA.ATTRIBUTE1 AS okcPA_ATTRIBUTE1
 ,okcPA.ATTRIBUTE2 AS okcPA_ATTRIBUTE2
 ,okcPA.ATTRIBUTE3 AS okcPA_ATTRIBUTE3
 ,okcPA.ATTRIBUTE4 AS okcPA_ATTRIBUTE4
 ,okcPA.ATTRIBUTE5 AS okcPA_ATTRIBUTE5
 ,okcPA.ATTRIBUTE6 AS okcPA_ATTRIBUTE6
 ,okcPA.ATTRIBUTE7 AS okcPA_ATTRIBUTE7
 ,okcPA.ATTRIBUTE8 AS okcPA_ATTRIBUTE8
 ,okcPA.ATTRIBUTE9 AS okcPA_ATTRIBUTE9
 ,okcPA.ATTRIBUTE10 AS okcPA_ATTRIBUTE10
 ,okcPA.ATTRIBUTE11 AS okcPA_ATTRIBUTE11
 ,okcPA.ATTRIBUTE12 AS okcPA_ATTRIBUTE12
 ,okcPA.ATTRIBUTE13 AS okcPA_ATTRIBUTE13
 ,okcPA.ATTRIBUTE14 AS okcPA_ATTRIBUTE14
 ,okcPA.ATTRIBUTE15 AS okcPA_ATTRIBUTE15
 ,okcPA.SECURITY_GROUP_ID AS okcPA_SECURITY_GROUP_ID
 ,okcPA.PROGRAM_APPLICATION_ID AS okcPA_PROGRAM_APPLICATION_ID
 ,okcPA.PROGRAM_ID AS okcPA_PROGRAM_ID
 ,okcPA.PROGRAM_UPDATE_DATE AS okcPA_PROGRAM_UPDATE_DATE
 ,okcPA.REQUEST_ID AS okcPA_REQUEST_ID
 ,1 AS okcPA_OBJECT_VERSION_NUMBER
 ,okcPA.LIST_HEADER_ID AS okcPA_LIST_HEADER_ID
 ,okcPA.LIST_LINE_ID AS okcPA_LIST_LINE_ID
 ,okcPA.LIST_LINE_TYPE_CODE AS okcPA_LIST_LINE_TYPE_CODE
 ,okcPA.CHANGE_REASON_CODE AS okcPA_CHANGE_REASON_CODE
 ,okcPA.CHANGE_REASON_TEXT AS okcPA_CHANGE_REASON_TEXT
 ,okcPA.ESTIMATED_FLAG AS okcPA_ESTIMATED_FLAG
 ,okcPA.ADJUSTED_AMOUNT AS okcPA_ADJUSTED_AMOUNT
 ,okcPA.CHARGE_TYPE_CODE AS okcPA_CHARGE_TYPE_CODE
 ,okcPA.CHARGE_SUBTYPE_CODE AS okcPA_CHARGE_SUBTYPE_CODE
 ,okcPA.RANGE_BREAK_QUANTITY AS okcPA_RANGE_BREAK_QUANTITY
 ,okcPA.ACCRUAL_CONVERSION_RATE AS okcPA_ACCRUAL_CONVERSION_RATE
 ,okcPA.PRICING_GROUP_SEQUENCE AS okcPA_PRICING_GROUP_SEQUENCE
 ,okcPA.ACCRUAL_FLAG AS okcPA_ACCRUAL_FLAG
 ,okcPA.LIST_LINE_NO AS okcPA_LIST_LINE_NO
 ,okcPA.SOURCE_SYSTEM_CODE AS okcPA_SOURCE_SYSTEM_CODE
 ,okcPA.BENEFIT_QTY AS okcPA_BENEFIT_QTY
 ,okcPA.BENEFIT_UOM_CODE AS okcPA_BENEFIT_UOM_CODE
 ,okcPA.EXPIRATION_DATE AS okcPA_EXPIRATION_DATE
 ,okcPA.MODIFIER_LEVEL_CODE AS okcPA_MODIFIER_LEVEL_CODE
 ,okcPA.PRICE_BREAK_TYPE_CODE AS okcPA_PRICE_BREAK_TYPE_CODE
 ,okcPA.SUBSTITUTION_ATTRIBUTE AS okcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPA.PRORATION_TYPE_CODE AS okcPA_PRORATION_TYPE_CODE
 ,okcPA.INCLUDE_ON_RETURNS_FLAG AS okcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPA.REBATE_TRANSACTION_TYPE_CODE AS okcPA_REBATE_TRXN_TYPE_CODE
 FROM
  OKC_PRICE_ADJUSTMENTS okcPA
 ,OKC_K_LINES_B okcB
 WHERE okcPA.CLE_ID = okcB.ORIG_SYSTEM_ID1
 AND okcB.DNZ_CHR_ID = P_To_Chr_ID;

-----------------------------------------------------------------------
--Cursor to be used in component copy to copy rows for Header and Lines
-----------------------------------------------------------------------

 CURSOR GetOkcPAPartial_HNL IS
 SELECT
  okcPA.ID AS okcPA_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPA_NewID
 ,okcPA.PAT_ID AS okcPA_PAT_ID
 ,okcH.ID AS okcPA_NewChrID
 ,NULL AS okcPA_NewCleID
 ,okcPA.BSL_ID AS okcPA_BSL_ID
 ,okcPA.BCL_ID AS okcPA_BCL_ID
 ,okcPA.MODIFIED_FROM AS okcPA_MODIFIED_FROM
 ,okcPA.MODIFIED_TO AS okcPA_MODIFIED_TO
 ,okcPA.MODIFIER_MECHANISM_TYPE_CODE AS okcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPA.OPERAND AS okcPA_OPERAND
 ,okcPA.ARITHMETIC_OPERATOR AS okcPA_ARITHMETIC_OPERATOR
 ,okcPA.AUTOMATIC_FLAG AS okcPA_AUTOMATIC_FLAG
 ,okcPA.UPDATE_ALLOWED AS okcPA_UPDATE_ALLOWED
 ,okcPA.UPDATED_FLAG AS okcPA_UPDATED_FLAG
 ,okcPA.APPLIED_FLAG AS okcPA_APPLIED_FLAG
 ,okcPA.ON_INVOICE_FLAG AS okcPA_ON_INVOICE_FLAG
 ,okcPA.PRICING_PHASE_ID AS okcPA_PRICING_PHASE_ID
 ,okcPA.CONTEXT AS okcPA_CONTEXT
 ,okcPA.ATTRIBUTE1 AS okcPA_ATTRIBUTE1
 ,okcPA.ATTRIBUTE2 AS okcPA_ATTRIBUTE2
 ,okcPA.ATTRIBUTE3 AS okcPA_ATTRIBUTE3
 ,okcPA.ATTRIBUTE4 AS okcPA_ATTRIBUTE4
 ,okcPA.ATTRIBUTE5 AS okcPA_ATTRIBUTE5
 ,okcPA.ATTRIBUTE6 AS okcPA_ATTRIBUTE6
 ,okcPA.ATTRIBUTE7 AS okcPA_ATTRIBUTE7
 ,okcPA.ATTRIBUTE8 AS okcPA_ATTRIBUTE8
 ,okcPA.ATTRIBUTE9 AS okcPA_ATTRIBUTE9
 ,okcPA.ATTRIBUTE10 AS okcPA_ATTRIBUTE10
 ,okcPA.ATTRIBUTE11 AS okcPA_ATTRIBUTE11
 ,okcPA.ATTRIBUTE12 AS okcPA_ATTRIBUTE12
 ,okcPA.ATTRIBUTE13 AS okcPA_ATTRIBUTE13
 ,okcPA.ATTRIBUTE14 AS okcPA_ATTRIBUTE14
 ,okcPA.ATTRIBUTE15 AS okcPA_ATTRIBUTE15
 ,okcPA.SECURITY_GROUP_ID AS okcPA_SECURITY_GROUP_ID
 ,okcPA.PROGRAM_APPLICATION_ID AS okcPA_PROGRAM_APPLICATION_ID
 ,okcPA.PROGRAM_ID AS okcPA_PROGRAM_ID
 ,okcPA.PROGRAM_UPDATE_DATE AS okcPA_PROGRAM_UPDATE_DATE
 ,okcPA.REQUEST_ID AS okcPA_REQUEST_ID
 ,1 AS okcPA_OBJECT_VERSION_NUMBER
 ,okcPA.LIST_HEADER_ID AS okcPA_LIST_HEADER_ID
 ,okcPA.LIST_LINE_ID AS okcPA_LIST_LINE_ID
 ,okcPA.LIST_LINE_TYPE_CODE AS okcPA_LIST_LINE_TYPE_CODE
 ,okcPA.CHANGE_REASON_CODE AS okcPA_CHANGE_REASON_CODE
 ,okcPA.CHANGE_REASON_TEXT AS okcPA_CHANGE_REASON_TEXT
 ,okcPA.ESTIMATED_FLAG AS okcPA_ESTIMATED_FLAG
 ,okcPA.ADJUSTED_AMOUNT AS okcPA_ADJUSTED_AMOUNT
 ,okcPA.CHARGE_TYPE_CODE AS okcPA_CHARGE_TYPE_CODE
 ,okcPA.CHARGE_SUBTYPE_CODE AS okcPA_CHARGE_SUBTYPE_CODE
 ,okcPA.RANGE_BREAK_QUANTITY AS okcPA_RANGE_BREAK_QUANTITY
 ,okcPA.ACCRUAL_CONVERSION_RATE AS okcPA_ACCRUAL_CONVERSION_RATE
 ,okcPA.PRICING_GROUP_SEQUENCE AS okcPA_PRICING_GROUP_SEQUENCE
 ,okcPA.ACCRUAL_FLAG AS okcPA_ACCRUAL_FLAG
 ,okcPA.LIST_LINE_NO AS okcPA_LIST_LINE_NO
 ,okcPA.SOURCE_SYSTEM_CODE AS okcPA_SOURCE_SYSTEM_CODE
 ,okcPA.BENEFIT_QTY AS okcPA_BENEFIT_QTY
 ,okcPA.BENEFIT_UOM_CODE AS okcPA_BENEFIT_UOM_CODE
 ,okcPA.EXPIRATION_DATE AS okcPA_EXPIRATION_DATE
 ,okcPA.MODIFIER_LEVEL_CODE AS okcPA_MODIFIER_LEVEL_CODE
 ,okcPA.PRICE_BREAK_TYPE_CODE AS okcPA_PRICE_BREAK_TYPE_CODE
 ,okcPA.SUBSTITUTION_ATTRIBUTE AS okcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPA.PRORATION_TYPE_CODE AS okcPA_PRORATION_TYPE_CODE
 ,okcPA.INCLUDE_ON_RETURNS_FLAG AS okcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPA.REBATE_TRANSACTION_TYPE_CODE AS okcPA_REBATE_TRXN_TYPE_CODE
 FROM
   OKC_PRICE_ADJUSTMENTS okcPA
  ,OKC_K_HEADERS_B okcH
   WHERE okcPA.CHR_ID = okcH.ORIG_SYSTEM_ID1
   and okcH.ID = P_To_Chr_ID
   and okcPA.CLE_ID is NULL
   and okcPA.CHR_ID = P_From_Chr_ID
 UNION
 SELECT
  okcPA.ID AS okcPA_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPA_NewID
 ,okcPA.PAT_ID AS okcPA_PAT_ID
 ,to_number(decode(okcPA.CHR_ID,NULL,NULL,okcBT.DNZ_CHR_ID)) AS okcPA_NewChrID
 ,okcBT.ID AS okcPA_NewCleID
 ,okcPA.BSL_ID AS okcPA_BSL_ID
 ,okcPA.BCL_ID AS okcPA_BCL_ID
 ,okcPA.MODIFIED_FROM AS okcPA_MODIFIED_FROM
 ,okcPA.MODIFIED_TO AS okcPA_MODIFIED_TO
 ,okcPA.MODIFIER_MECHANISM_TYPE_CODE AS okcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPA.OPERAND AS okcPA_OPERAND
 ,okcPA.ARITHMETIC_OPERATOR AS okcPA_ARITHMETIC_OPERATOR
 ,okcPA.AUTOMATIC_FLAG AS okcPA_AUTOMATIC_FLAG
 ,okcPA.UPDATE_ALLOWED AS okcPA_UPDATE_ALLOWED
 ,okcPA.UPDATED_FLAG AS okcPA_UPDATED_FLAG
 ,okcPA.APPLIED_FLAG AS okcPA_APPLIED_FLAG
 ,okcPA.ON_INVOICE_FLAG AS okcPA_ON_INVOICE_FLAG
 ,okcPA.PRICING_PHASE_ID AS okcPA_PRICING_PHASE_ID
 ,okcPA.CONTEXT AS okcPA_CONTEXT
 ,okcPA.ATTRIBUTE1 AS okcPA_ATTRIBUTE1
 ,okcPA.ATTRIBUTE2 AS okcPA_ATTRIBUTE2
 ,okcPA.ATTRIBUTE3 AS okcPA_ATTRIBUTE3
 ,okcPA.ATTRIBUTE4 AS okcPA_ATTRIBUTE4
 ,okcPA.ATTRIBUTE5 AS okcPA_ATTRIBUTE5
 ,okcPA.ATTRIBUTE6 AS okcPA_ATTRIBUTE6
 ,okcPA.ATTRIBUTE7 AS okcPA_ATTRIBUTE7
 ,okcPA.ATTRIBUTE8 AS okcPA_ATTRIBUTE8
 ,okcPA.ATTRIBUTE9 AS okcPA_ATTRIBUTE9
 ,okcPA.ATTRIBUTE10 AS okcPA_ATTRIBUTE10
 ,okcPA.ATTRIBUTE11 AS okcPA_ATTRIBUTE11
 ,okcPA.ATTRIBUTE12 AS okcPA_ATTRIBUTE12
 ,okcPA.ATTRIBUTE13 AS okcPA_ATTRIBUTE13
 ,okcPA.ATTRIBUTE14 AS okcPA_ATTRIBUTE14
 ,okcPA.ATTRIBUTE15 AS okcPA_ATTRIBUTE15
 ,okcPA.SECURITY_GROUP_ID AS okcPA_SECURITY_GROUP_ID
 ,okcPA.PROGRAM_APPLICATION_ID AS okcPA_PROGRAM_APPLICATION_ID
 ,okcPA.PROGRAM_ID AS okcPA_PROGRAM_ID
 ,okcPA.PROGRAM_UPDATE_DATE AS okcPA_PROGRAM_UPDATE_DATE
 ,okcPA.REQUEST_ID AS okcPA_REQUEST_ID
 ,1 AS okcPA_OBJECT_VERSION_NUMBER
 ,okcPA.LIST_HEADER_ID AS okcPA_LIST_HEADER_ID
 ,okcPA.LIST_LINE_ID AS okcPA_LIST_LINE_ID
 ,okcPA.LIST_LINE_TYPE_CODE AS okcPA_LIST_LINE_TYPE_CODE
 ,okcPA.CHANGE_REASON_CODE AS okcPA_CHANGE_REASON_CODE
 ,okcPA.CHANGE_REASON_TEXT AS okcPA_CHANGE_REASON_TEXT
 ,okcPA.ESTIMATED_FLAG AS okcPA_ESTIMATED_FLAG
 ,okcPA.ADJUSTED_AMOUNT AS okcPA_ADJUSTED_AMOUNT
 ,okcPA.CHARGE_TYPE_CODE AS okcPA_CHARGE_TYPE_CODE
 ,okcPA.CHARGE_SUBTYPE_CODE AS okcPA_CHARGE_SUBTYPE_CODE
 ,okcPA.RANGE_BREAK_QUANTITY AS okcPA_RANGE_BREAK_QUANTITY
 ,okcPA.ACCRUAL_CONVERSION_RATE AS okcPA_ACCRUAL_CONVERSION_RATE
 ,okcPA.PRICING_GROUP_SEQUENCE AS okcPA_PRICING_GROUP_SEQUENCE
 ,okcPA.ACCRUAL_FLAG AS okcPA_ACCRUAL_FLAG
 ,okcPA.LIST_LINE_NO AS okcPA_LIST_LINE_NO
 ,okcPA.SOURCE_SYSTEM_CODE AS okcPA_SOURCE_SYSTEM_CODE
 ,okcPA.BENEFIT_QTY AS okcPA_BENEFIT_QTY
 ,okcPA.BENEFIT_UOM_CODE AS okcPA_BENEFIT_UOM_CODE
 ,okcPA.EXPIRATION_DATE AS okcPA_EXPIRATION_DATE
 ,okcPA.MODIFIER_LEVEL_CODE AS okcPA_MODIFIER_LEVEL_CODE
 ,okcPA.PRICE_BREAK_TYPE_CODE AS okcPA_PRICE_BREAK_TYPE_CODE
 ,okcPA.SUBSTITUTION_ATTRIBUTE AS okcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPA.PRORATION_TYPE_CODE AS okcPA_PRORATION_TYPE_CODE
 ,okcPA.INCLUDE_ON_RETURNS_FLAG AS okcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPA.REBATE_TRANSACTION_TYPE_CODE AS okcPA_REBATE_TRXN_TYPE_CODE
 FROM
  OKC_PRICE_ADJUSTMENTS okcPA
 ,OKC_K_LINES_B_TEMP okcBT
 WHERE okcPA.CLE_ID = okcBT.ORIG_SYSTEM_ID1
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;

----------------------------------------------------------------------------------------
--Cursor to be used in component copy to only copy rows for Header
--ie when no lines have been chosen by user to copy but Contract Header is being created
----------------------------------------------------------------------------------------
 CURSOR GetOkcPAPartial_H IS
 SELECT
  okcPA.ID AS okcPA_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPA_NewID
 ,okcPA.PAT_ID AS okcPA_PAT_ID
 ,okcH.ID AS okcPA_NewChrID
 ,NULL AS okcPA_NewCleID
 ,okcPA.BSL_ID AS okcPA_BSL_ID
 ,okcPA.BCL_ID AS okcPA_BCL_ID
 ,okcPA.MODIFIED_FROM AS okcPA_MODIFIED_FROM
 ,okcPA.MODIFIED_TO AS okcPA_MODIFIED_TO
 ,okcPA.MODIFIER_MECHANISM_TYPE_CODE AS okcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPA.OPERAND AS okcPA_OPERAND
 ,okcPA.ARITHMETIC_OPERATOR AS okcPA_ARITHMETIC_OPERATOR
 ,okcPA.AUTOMATIC_FLAG AS okcPA_AUTOMATIC_FLAG
 ,okcPA.UPDATE_ALLOWED AS okcPA_UPDATE_ALLOWED
 ,okcPA.UPDATED_FLAG AS okcPA_UPDATED_FLAG
 ,okcPA.APPLIED_FLAG AS okcPA_APPLIED_FLAG
 ,okcPA.ON_INVOICE_FLAG AS okcPA_ON_INVOICE_FLAG
 ,okcPA.PRICING_PHASE_ID AS okcPA_PRICING_PHASE_ID
 ,okcPA.CONTEXT AS okcPA_CONTEXT
 ,okcPA.ATTRIBUTE1 AS okcPA_ATTRIBUTE1
 ,okcPA.ATTRIBUTE2 AS okcPA_ATTRIBUTE2
 ,okcPA.ATTRIBUTE3 AS okcPA_ATTRIBUTE3
 ,okcPA.ATTRIBUTE4 AS okcPA_ATTRIBUTE4
 ,okcPA.ATTRIBUTE5 AS okcPA_ATTRIBUTE5
 ,okcPA.ATTRIBUTE6 AS okcPA_ATTRIBUTE6
 ,okcPA.ATTRIBUTE7 AS okcPA_ATTRIBUTE7
 ,okcPA.ATTRIBUTE8 AS okcPA_ATTRIBUTE8
 ,okcPA.ATTRIBUTE9 AS okcPA_ATTRIBUTE9
 ,okcPA.ATTRIBUTE10 AS okcPA_ATTRIBUTE10
 ,okcPA.ATTRIBUTE11 AS okcPA_ATTRIBUTE11
 ,okcPA.ATTRIBUTE12 AS okcPA_ATTRIBUTE12
 ,okcPA.ATTRIBUTE13 AS okcPA_ATTRIBUTE13
 ,okcPA.ATTRIBUTE14 AS okcPA_ATTRIBUTE14
 ,okcPA.ATTRIBUTE15 AS okcPA_ATTRIBUTE15
 ,okcPA.SECURITY_GROUP_ID AS okcPA_SECURITY_GROUP_ID
 ,okcPA.PROGRAM_APPLICATION_ID AS okcPA_PROGRAM_APPLICATION_ID
 ,okcPA.PROGRAM_ID AS okcPA_PROGRAM_ID
 ,okcPA.PROGRAM_UPDATE_DATE AS okcPA_PROGRAM_UPDATE_DATE
 ,okcPA.REQUEST_ID AS okcPA_REQUEST_ID
 ,1 AS okcPA_OBJECT_VERSION_NUMBER
 ,okcPA.LIST_HEADER_ID AS okcPA_LIST_HEADER_ID
 ,okcPA.LIST_LINE_ID AS okcPA_LIST_LINE_ID
 ,okcPA.LIST_LINE_TYPE_CODE AS okcPA_LIST_LINE_TYPE_CODE
 ,okcPA.CHANGE_REASON_CODE AS okcPA_CHANGE_REASON_CODE
 ,okcPA.CHANGE_REASON_TEXT AS okcPA_CHANGE_REASON_TEXT
 ,okcPA.ESTIMATED_FLAG AS okcPA_ESTIMATED_FLAG
 ,okcPA.ADJUSTED_AMOUNT AS okcPA_ADJUSTED_AMOUNT
 ,okcPA.CHARGE_TYPE_CODE AS okcPA_CHARGE_TYPE_CODE
 ,okcPA.CHARGE_SUBTYPE_CODE AS okcPA_CHARGE_SUBTYPE_CODE
 ,okcPA.RANGE_BREAK_QUANTITY AS okcPA_RANGE_BREAK_QUANTITY
 ,okcPA.ACCRUAL_CONVERSION_RATE AS okcPA_ACCRUAL_CONVERSION_RATE
 ,okcPA.PRICING_GROUP_SEQUENCE AS okcPA_PRICING_GROUP_SEQUENCE
 ,okcPA.ACCRUAL_FLAG AS okcPA_ACCRUAL_FLAG
 ,okcPA.LIST_LINE_NO AS okcPA_LIST_LINE_NO
 ,okcPA.SOURCE_SYSTEM_CODE AS okcPA_SOURCE_SYSTEM_CODE
 ,okcPA.BENEFIT_QTY AS okcPA_BENEFIT_QTY
 ,okcPA.BENEFIT_UOM_CODE AS okcPA_BENEFIT_UOM_CODE
 ,okcPA.EXPIRATION_DATE AS okcPA_EXPIRATION_DATE
 ,okcPA.MODIFIER_LEVEL_CODE AS okcPA_MODIFIER_LEVEL_CODE
 ,okcPA.PRICE_BREAK_TYPE_CODE AS okcPA_PRICE_BREAK_TYPE_CODE
 ,okcPA.SUBSTITUTION_ATTRIBUTE AS okcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPA.PRORATION_TYPE_CODE AS okcPA_PRORATION_TYPE_CODE
 ,okcPA.INCLUDE_ON_RETURNS_FLAG AS okcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPA.REBATE_TRANSACTION_TYPE_CODE AS okcPA_REBATE_TRXN_TYPE_CODE
 FROM
   OKC_PRICE_ADJUSTMENTS okcPA
  ,OKC_K_HEADERS_B okcH
   WHERE okcPA.CHR_ID = okcH.ORIG_SYSTEM_ID1
   and okcH.ID = P_To_Chr_ID
   and okcPA.CLE_ID is NULL
   and okcPA.CHR_ID = P_From_Chr_ID;


----------------------------------------------------------------------------------------
--Cursor to be used in component copy to only copy rows for Lines
--ie for the lines chosen by user to copy and copying to an existing contract so
--Header wasnt created.
----------------------------------------------------------------------------------------
 CURSOR GetOkcPAPartial_L IS
 SELECT
  okcPA.ID AS okcPA_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPA_NewID
 ,okcPA.PAT_ID AS okcPA_PAT_ID
 ,to_number(decode(okcPA.CHR_ID,NULL,NULL,okcBT.DNZ_CHR_ID)) AS okcPA_NewChrID
 ,okcBT.ID AS okcPA_NewCleID
 ,okcPA.BSL_ID AS okcPA_BSL_ID
 ,okcPA.BCL_ID AS okcPA_BCL_ID
 ,okcPA.MODIFIED_FROM AS okcPA_MODIFIED_FROM
 ,okcPA.MODIFIED_TO AS okcPA_MODIFIED_TO
 ,okcPA.MODIFIER_MECHANISM_TYPE_CODE AS okcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPA.OPERAND AS okcPA_OPERAND
 ,okcPA.ARITHMETIC_OPERATOR AS okcPA_ARITHMETIC_OPERATOR
 ,okcPA.AUTOMATIC_FLAG AS okcPA_AUTOMATIC_FLAG
 ,okcPA.UPDATE_ALLOWED AS okcPA_UPDATE_ALLOWED
 ,okcPA.UPDATED_FLAG AS okcPA_UPDATED_FLAG
 ,okcPA.APPLIED_FLAG AS okcPA_APPLIED_FLAG
 ,okcPA.ON_INVOICE_FLAG AS okcPA_ON_INVOICE_FLAG
 ,okcPA.PRICING_PHASE_ID AS okcPA_PRICING_PHASE_ID
 ,okcPA.CONTEXT AS okcPA_CONTEXT
 ,okcPA.ATTRIBUTE1 AS okcPA_ATTRIBUTE1
 ,okcPA.ATTRIBUTE2 AS okcPA_ATTRIBUTE2
 ,okcPA.ATTRIBUTE3 AS okcPA_ATTRIBUTE3
 ,okcPA.ATTRIBUTE4 AS okcPA_ATTRIBUTE4
 ,okcPA.ATTRIBUTE5 AS okcPA_ATTRIBUTE5
 ,okcPA.ATTRIBUTE6 AS okcPA_ATTRIBUTE6
 ,okcPA.ATTRIBUTE7 AS okcPA_ATTRIBUTE7
 ,okcPA.ATTRIBUTE8 AS okcPA_ATTRIBUTE8
 ,okcPA.ATTRIBUTE9 AS okcPA_ATTRIBUTE9
 ,okcPA.ATTRIBUTE10 AS okcPA_ATTRIBUTE10
 ,okcPA.ATTRIBUTE11 AS okcPA_ATTRIBUTE11
 ,okcPA.ATTRIBUTE12 AS okcPA_ATTRIBUTE12
 ,okcPA.ATTRIBUTE13 AS okcPA_ATTRIBUTE13
 ,okcPA.ATTRIBUTE14 AS okcPA_ATTRIBUTE14
 ,okcPA.ATTRIBUTE15 AS okcPA_ATTRIBUTE15
 ,okcPA.SECURITY_GROUP_ID AS okcPA_SECURITY_GROUP_ID
 ,okcPA.PROGRAM_APPLICATION_ID AS okcPA_PROGRAM_APPLICATION_ID
 ,okcPA.PROGRAM_ID AS okcPA_PROGRAM_ID
 ,okcPA.PROGRAM_UPDATE_DATE AS okcPA_PROGRAM_UPDATE_DATE
 ,okcPA.REQUEST_ID AS okcPA_REQUEST_ID
 ,1 AS okcPA_OBJECT_VERSION_NUMBER
 ,okcPA.LIST_HEADER_ID AS okcPA_LIST_HEADER_ID
 ,okcPA.LIST_LINE_ID AS okcPA_LIST_LINE_ID
 ,okcPA.LIST_LINE_TYPE_CODE AS okcPA_LIST_LINE_TYPE_CODE
 ,okcPA.CHANGE_REASON_CODE AS okcPA_CHANGE_REASON_CODE
 ,okcPA.CHANGE_REASON_TEXT AS okcPA_CHANGE_REASON_TEXT
 ,okcPA.ESTIMATED_FLAG AS okcPA_ESTIMATED_FLAG
 ,okcPA.ADJUSTED_AMOUNT AS okcPA_ADJUSTED_AMOUNT
 ,okcPA.CHARGE_TYPE_CODE AS okcPA_CHARGE_TYPE_CODE
 ,okcPA.CHARGE_SUBTYPE_CODE AS okcPA_CHARGE_SUBTYPE_CODE
 ,okcPA.RANGE_BREAK_QUANTITY AS okcPA_RANGE_BREAK_QUANTITY
 ,okcPA.ACCRUAL_CONVERSION_RATE AS okcPA_ACCRUAL_CONVERSION_RATE
 ,okcPA.PRICING_GROUP_SEQUENCE AS okcPA_PRICING_GROUP_SEQUENCE
 ,okcPA.ACCRUAL_FLAG AS okcPA_ACCRUAL_FLAG
 ,okcPA.LIST_LINE_NO AS okcPA_LIST_LINE_NO
 ,okcPA.SOURCE_SYSTEM_CODE AS okcPA_SOURCE_SYSTEM_CODE
 ,okcPA.BENEFIT_QTY AS okcPA_BENEFIT_QTY
 ,okcPA.BENEFIT_UOM_CODE AS okcPA_BENEFIT_UOM_CODE
 ,okcPA.EXPIRATION_DATE AS okcPA_EXPIRATION_DATE
 ,okcPA.MODIFIER_LEVEL_CODE AS okcPA_MODIFIER_LEVEL_CODE
 ,okcPA.PRICE_BREAK_TYPE_CODE AS okcPA_PRICE_BREAK_TYPE_CODE
 ,okcPA.SUBSTITUTION_ATTRIBUTE AS okcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPA.PRORATION_TYPE_CODE AS okcPA_PRORATION_TYPE_CODE
 ,okcPA.INCLUDE_ON_RETURNS_FLAG AS okcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPA.REBATE_TRANSACTION_TYPE_CODE AS okcPA_REBATE_TRXN_TYPE_CODE
 FROM
  OKC_PRICE_ADJUSTMENTS okcPA
 ,OKC_K_LINES_B_TEMP okcBT
 WHERE okcPA.CLE_ID = okcBT.ORIG_SYSTEM_ID1
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;


 Begin
  x_return_status := l_return_status;

 IF (P_Partial_Copy_YN = 'N') THEN
  IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAFull'
                         );
  END IF;
  OPEN GetOkcPAFull;
 ELSIF (P_Partial_Copy_YN = 'Y') THEN
   IF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) THEN
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAPartial_H'
                         );
     END IF;

     OPEN GetOkcPAPartial_H;
   ELSIF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAPartial_HNL'
                         );
     END IF;

     OPEN GetOkcPAPartial_HNL;
   ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OPENing GetOkcPAPartial_L'
                         );
     END IF;

     OPEN GetOkcPAPartial_L;
   ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count = 0) THEN
     RETURN;
   END IF;

 END IF;


 LOOP
 IF (P_Partial_Copy_YN = 'N') THEN
  IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPAFull'
                         );
  END IF;

  FETCH GetOkcPAFull BULK COLLECT INTO
  okcPARecTab.OkcPA_OldID
 ,okcPARecTab.OkcPA_NewID
 ,okcPARecTab.OkcPA_PAT_ID
 ,okcPARecTab.OkcPA_NewChrID
 ,okcPARecTab.OkcPA_NewCleID
 ,okcPARecTab.OkcPA_BSL_ID
 ,okcPARecTab.OkcPA_BCL_ID
 ,okcPARecTab.OkcPA_MODIFIED_FROM
 ,okcPARecTab.OkcPA_MODIFIED_TO
 ,okcPARecTab.OkcPA_MODIF_MECHNSM_TYPE_CODE
 ,okcPARecTab.OkcPA_OPERAND
 ,okcPARecTab.OkcPA_ARITHMETIC_OPERATOR
 ,okcPARecTab.OkcPA_AUTOMATIC_FLAG
 ,okcPARecTab.OkcPA_UPDATE_ALLOWED
 ,okcPARecTab.OkcPA_UPDATED_FLAG
 ,okcPARecTab.OkcPA_APPLIED_FLAG
 ,okcPARecTab.OkcPA_ON_INVOICE_FLAG
 ,okcPARecTab.OkcPA_PRICING_PHASE_ID
 ,okcPARecTab.OkcPA_CONTEXT
 ,okcPARecTab.OkcPA_ATTRIBUTE1
 ,okcPARecTab.OkcPA_ATTRIBUTE2
 ,okcPARecTab.OkcPA_ATTRIBUTE3
 ,okcPARecTab.OkcPA_ATTRIBUTE4
 ,okcPARecTab.OkcPA_ATTRIBUTE5
 ,okcPARecTab.OkcPA_ATTRIBUTE6
 ,okcPARecTab.OkcPA_ATTRIBUTE7
 ,okcPARecTab.OkcPA_ATTRIBUTE8
 ,okcPARecTab.OkcPA_ATTRIBUTE9
 ,okcPARecTab.OkcPA_ATTRIBUTE10
 ,okcPARecTab.OkcPA_ATTRIBUTE11
 ,okcPARecTab.OkcPA_ATTRIBUTE12
 ,okcPARecTab.OkcPA_ATTRIBUTE13
 ,okcPARecTab.OkcPA_ATTRIBUTE14
 ,okcPARecTab.OkcPA_ATTRIBUTE15
 ,okcPARecTab.OkcPA_SECURITY_GROUP_ID
 ,okcPARecTab.OkcPA_PROGRAM_APPLICATION_ID
 ,okcPARecTab.OkcPA_PROGRAM_ID
 ,okcPARecTab.OkcPA_PROGRAM_UPDATE_DATE
 ,okcPARecTab.OkcPA_REQUEST_ID
 ,okcPARecTab.OkcPA_OBJECT_VERSION_NUMBER
 ,okcPARecTab.OkcPA_LIST_HEADER_ID
 ,okcPARecTab.OkcPA_LIST_LINE_ID
 ,okcPARecTab.OkcPA_LIST_LINE_TYPE_CODE
 ,okcPARecTab.OkcPA_CHANGE_REASON_CODE
 ,okcPARecTab.OkcPA_CHANGE_REASON_TEXT
 ,okcPARecTab.OkcPA_ESTIMATED_FLAG
 ,okcPARecTab.OkcPA_ADJUSTED_AMOUNT
 ,okcPARecTab.OkcPA_CHARGE_TYPE_CODE
 ,okcPARecTab.OkcPA_CHARGE_SUBTYPE_CODE
 ,okcPARecTab.OkcPA_RANGE_BREAK_QUANTITY
 ,okcPARecTab.OkcPA_ACCRUAL_CONVERSION_RATE
 ,okcPARecTab.OkcPA_PRICING_GROUP_SEQUENCE
 ,okcPARecTab.OkcPA_ACCRUAL_FLAG
 ,okcPARecTab.OkcPA_LIST_LINE_NO
 ,okcPARecTab.OkcPA_SOURCE_SYSTEM_CODE
 ,okcPARecTab.OkcPA_BENEFIT_QTY
 ,okcPARecTab.OkcPA_BENEFIT_UOM_CODE
 ,okcPARecTab.OkcPA_EXPIRATION_DATE
 ,okcPARecTab.OkcPA_MODIFIER_LEVEL_CODE
 ,okcPARecTab.OkcPA_PRICE_BREAK_TYPE_CODE
 ,okcPARecTab.OkcPA_SUBSTITUTION_ATTRIBUTE
 ,okcPARecTab.OkcPA_PRORATION_TYPE_CODE
 ,okcPARecTab.OkcPA_INCLUDE_ON_RETURNS_FLAG
 ,okcPARecTab.OkcPA_REBATE_TRXN_TYPE_CODE LIMIT G_BULK_FETCH_LIMIT;

 ELSIF (P_Partial_Copy_YN = 'Y') THEN
   IF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) THEN
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPAPartial_H'
                         );
     END IF;

     FETCH GetOkcPAPartial_H BULK COLLECT INTO
     okcPARecTab.OkcPA_OldID
    ,okcPARecTab.OkcPA_NewID
    ,okcPARecTab.OkcPA_PAT_ID
    ,okcPARecTab.OkcPA_NewChrID
    ,okcPARecTab.OkcPA_NewCleID
    ,okcPARecTab.OkcPA_BSL_ID
    ,okcPARecTab.OkcPA_BCL_ID
    ,okcPARecTab.OkcPA_MODIFIED_FROM
    ,okcPARecTab.OkcPA_MODIFIED_TO
    ,okcPARecTab.OkcPA_MODIF_MECHNSM_TYPE_CODE
    ,okcPARecTab.OkcPA_OPERAND
    ,okcPARecTab.OkcPA_ARITHMETIC_OPERATOR
    ,okcPARecTab.OkcPA_AUTOMATIC_FLAG
    ,okcPARecTab.OkcPA_UPDATE_ALLOWED
    ,okcPARecTab.OkcPA_UPDATED_FLAG
    ,okcPARecTab.OkcPA_APPLIED_FLAG
    ,okcPARecTab.OkcPA_ON_INVOICE_FLAG
    ,okcPARecTab.OkcPA_PRICING_PHASE_ID
    ,okcPARecTab.OkcPA_CONTEXT
    ,okcPARecTab.OkcPA_ATTRIBUTE1
    ,okcPARecTab.OkcPA_ATTRIBUTE2
    ,okcPARecTab.OkcPA_ATTRIBUTE3
    ,okcPARecTab.OkcPA_ATTRIBUTE4
    ,okcPARecTab.OkcPA_ATTRIBUTE5
    ,okcPARecTab.OkcPA_ATTRIBUTE6
    ,okcPARecTab.OkcPA_ATTRIBUTE7
    ,okcPARecTab.OkcPA_ATTRIBUTE8
    ,okcPARecTab.OkcPA_ATTRIBUTE9
    ,okcPARecTab.OkcPA_ATTRIBUTE10
    ,okcPARecTab.OkcPA_ATTRIBUTE11
    ,okcPARecTab.OkcPA_ATTRIBUTE12
    ,okcPARecTab.OkcPA_ATTRIBUTE13
    ,okcPARecTab.OkcPA_ATTRIBUTE14
    ,okcPARecTab.OkcPA_ATTRIBUTE15
    ,okcPARecTab.OkcPA_SECURITY_GROUP_ID
    ,okcPARecTab.OkcPA_PROGRAM_APPLICATION_ID
    ,okcPARecTab.OkcPA_PROGRAM_ID
    ,okcPARecTab.OkcPA_PROGRAM_UPDATE_DATE
    ,okcPARecTab.OkcPA_REQUEST_ID
    ,okcPARecTab.OkcPA_OBJECT_VERSION_NUMBER
    ,okcPARecTab.OkcPA_LIST_HEADER_ID
    ,okcPARecTab.OkcPA_LIST_LINE_ID
    ,okcPARecTab.OkcPA_LIST_LINE_TYPE_CODE
    ,okcPARecTab.OkcPA_CHANGE_REASON_CODE
    ,okcPARecTab.OkcPA_CHANGE_REASON_TEXT
    ,okcPARecTab.OkcPA_ESTIMATED_FLAG
    ,okcPARecTab.OkcPA_ADJUSTED_AMOUNT
    ,okcPARecTab.OkcPA_CHARGE_TYPE_CODE
    ,okcPARecTab.OkcPA_CHARGE_SUBTYPE_CODE
    ,okcPARecTab.OkcPA_RANGE_BREAK_QUANTITY
    ,okcPARecTab.OkcPA_ACCRUAL_CONVERSION_RATE
    ,okcPARecTab.OkcPA_PRICING_GROUP_SEQUENCE
    ,okcPARecTab.OkcPA_ACCRUAL_FLAG
    ,okcPARecTab.OkcPA_LIST_LINE_NO
    ,okcPARecTab.OkcPA_SOURCE_SYSTEM_CODE
    ,okcPARecTab.OkcPA_BENEFIT_QTY
    ,okcPARecTab.OkcPA_BENEFIT_UOM_CODE
    ,okcPARecTab.OkcPA_EXPIRATION_DATE
    ,okcPARecTab.OkcPA_MODIFIER_LEVEL_CODE
    ,okcPARecTab.OkcPA_PRICE_BREAK_TYPE_CODE
    ,okcPARecTab.OkcPA_SUBSTITUTION_ATTRIBUTE
    ,okcPARecTab.OkcPA_PRORATION_TYPE_CODE
    ,okcPARecTab.OkcPA_INCLUDE_ON_RETURNS_FLAG
    ,okcPARecTab.OkcPA_REBATE_TRXN_TYPE_CODE LIMIT G_BULK_FETCH_LIMIT;

   ELSIF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPAPartial_HNL'
                         );
     END IF;

     FETCH GetOkcPAPartial_HNL BULK COLLECT INTO
     okcPARecTab.OkcPA_OldID
    ,okcPARecTab.OkcPA_NewID
    ,okcPARecTab.OkcPA_PAT_ID
    ,okcPARecTab.OkcPA_NewChrID
    ,okcPARecTab.OkcPA_NewCleID
    ,okcPARecTab.OkcPA_BSL_ID
    ,okcPARecTab.OkcPA_BCL_ID
    ,okcPARecTab.OkcPA_MODIFIED_FROM
    ,okcPARecTab.OkcPA_MODIFIED_TO
    ,okcPARecTab.OkcPA_MODIF_MECHNSM_TYPE_CODE
    ,okcPARecTab.OkcPA_OPERAND
    ,okcPARecTab.OkcPA_ARITHMETIC_OPERATOR
    ,okcPARecTab.OkcPA_AUTOMATIC_FLAG
    ,okcPARecTab.OkcPA_UPDATE_ALLOWED
    ,okcPARecTab.OkcPA_UPDATED_FLAG
    ,okcPARecTab.OkcPA_APPLIED_FLAG
    ,okcPARecTab.OkcPA_ON_INVOICE_FLAG
    ,okcPARecTab.OkcPA_PRICING_PHASE_ID
    ,okcPARecTab.OkcPA_CONTEXT
    ,okcPARecTab.OkcPA_ATTRIBUTE1
    ,okcPARecTab.OkcPA_ATTRIBUTE2
    ,okcPARecTab.OkcPA_ATTRIBUTE3
    ,okcPARecTab.OkcPA_ATTRIBUTE4
    ,okcPARecTab.OkcPA_ATTRIBUTE5
    ,okcPARecTab.OkcPA_ATTRIBUTE6
    ,okcPARecTab.OkcPA_ATTRIBUTE7
    ,okcPARecTab.OkcPA_ATTRIBUTE8
    ,okcPARecTab.OkcPA_ATTRIBUTE9
    ,okcPARecTab.OkcPA_ATTRIBUTE10
    ,okcPARecTab.OkcPA_ATTRIBUTE11
    ,okcPARecTab.OkcPA_ATTRIBUTE12
    ,okcPARecTab.OkcPA_ATTRIBUTE13
    ,okcPARecTab.OkcPA_ATTRIBUTE14
    ,okcPARecTab.OkcPA_ATTRIBUTE15
    ,okcPARecTab.OkcPA_SECURITY_GROUP_ID
    ,okcPARecTab.OkcPA_PROGRAM_APPLICATION_ID
    ,okcPARecTab.OkcPA_PROGRAM_ID
    ,okcPARecTab.OkcPA_PROGRAM_UPDATE_DATE
    ,okcPARecTab.OkcPA_REQUEST_ID
    ,okcPARecTab.OkcPA_OBJECT_VERSION_NUMBER
    ,okcPARecTab.OkcPA_LIST_HEADER_ID
    ,okcPARecTab.OkcPA_LIST_LINE_ID
    ,okcPARecTab.OkcPA_LIST_LINE_TYPE_CODE
    ,okcPARecTab.OkcPA_CHANGE_REASON_CODE
    ,okcPARecTab.OkcPA_CHANGE_REASON_TEXT
    ,okcPARecTab.OkcPA_ESTIMATED_FLAG
    ,okcPARecTab.OkcPA_ADJUSTED_AMOUNT
    ,okcPARecTab.OkcPA_CHARGE_TYPE_CODE
    ,okcPARecTab.OkcPA_CHARGE_SUBTYPE_CODE
    ,okcPARecTab.OkcPA_RANGE_BREAK_QUANTITY
    ,okcPARecTab.OkcPA_ACCRUAL_CONVERSION_RATE
    ,okcPARecTab.OkcPA_PRICING_GROUP_SEQUENCE
    ,okcPARecTab.OkcPA_ACCRUAL_FLAG
    ,okcPARecTab.OkcPA_LIST_LINE_NO
    ,okcPARecTab.OkcPA_SOURCE_SYSTEM_CODE
    ,okcPARecTab.OkcPA_BENEFIT_QTY
    ,okcPARecTab.OkcPA_BENEFIT_UOM_CODE
    ,okcPARecTab.OkcPA_EXPIRATION_DATE
    ,okcPARecTab.OkcPA_MODIFIER_LEVEL_CODE
    ,okcPARecTab.OkcPA_PRICE_BREAK_TYPE_CODE
    ,okcPARecTab.OkcPA_SUBSTITUTION_ATTRIBUTE
    ,okcPARecTab.OkcPA_PRORATION_TYPE_CODE
    ,okcPARecTab.OkcPA_INCLUDE_ON_RETURNS_FLAG
    ,okcPARecTab.OkcPA_REBATE_TRXN_TYPE_CODE LIMIT G_BULK_FETCH_LIMIT;

   ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing GetOkcPAPartial_L'
                         );
     END IF;

     FETCH GetOkcPAPartial_L BULK COLLECT INTO
     okcPARecTab.OkcPA_OldID
    ,okcPARecTab.OkcPA_NewID
    ,okcPARecTab.OkcPA_PAT_ID
    ,okcPARecTab.OkcPA_NewChrID
    ,okcPARecTab.OkcPA_NewCleID
    ,okcPARecTab.OkcPA_BSL_ID
    ,okcPARecTab.OkcPA_BCL_ID
    ,okcPARecTab.OkcPA_MODIFIED_FROM
    ,okcPARecTab.OkcPA_MODIFIED_TO
    ,okcPARecTab.OkcPA_MODIF_MECHNSM_TYPE_CODE
    ,okcPARecTab.OkcPA_OPERAND
    ,okcPARecTab.OkcPA_ARITHMETIC_OPERATOR
    ,okcPARecTab.OkcPA_AUTOMATIC_FLAG
    ,okcPARecTab.OkcPA_UPDATE_ALLOWED
    ,okcPARecTab.OkcPA_UPDATED_FLAG
    ,okcPARecTab.OkcPA_APPLIED_FLAG
    ,okcPARecTab.OkcPA_ON_INVOICE_FLAG
    ,okcPARecTab.OkcPA_PRICING_PHASE_ID
    ,okcPARecTab.OkcPA_CONTEXT
    ,okcPARecTab.OkcPA_ATTRIBUTE1
    ,okcPARecTab.OkcPA_ATTRIBUTE2
    ,okcPARecTab.OkcPA_ATTRIBUTE3
    ,okcPARecTab.OkcPA_ATTRIBUTE4
    ,okcPARecTab.OkcPA_ATTRIBUTE5
    ,okcPARecTab.OkcPA_ATTRIBUTE6
    ,okcPARecTab.OkcPA_ATTRIBUTE7
    ,okcPARecTab.OkcPA_ATTRIBUTE8
    ,okcPARecTab.OkcPA_ATTRIBUTE9
    ,okcPARecTab.OkcPA_ATTRIBUTE10
    ,okcPARecTab.OkcPA_ATTRIBUTE11
    ,okcPARecTab.OkcPA_ATTRIBUTE12
    ,okcPARecTab.OkcPA_ATTRIBUTE13
    ,okcPARecTab.OkcPA_ATTRIBUTE14
    ,okcPARecTab.OkcPA_ATTRIBUTE15
    ,okcPARecTab.OkcPA_SECURITY_GROUP_ID
    ,okcPARecTab.OkcPA_PROGRAM_APPLICATION_ID
    ,okcPARecTab.OkcPA_PROGRAM_ID
    ,okcPARecTab.OkcPA_PROGRAM_UPDATE_DATE
    ,okcPARecTab.OkcPA_REQUEST_ID
    ,okcPARecTab.OkcPA_OBJECT_VERSION_NUMBER
    ,okcPARecTab.OkcPA_LIST_HEADER_ID
    ,okcPARecTab.OkcPA_LIST_LINE_ID
    ,okcPARecTab.OkcPA_LIST_LINE_TYPE_CODE
    ,okcPARecTab.OkcPA_CHANGE_REASON_CODE
    ,okcPARecTab.OkcPA_CHANGE_REASON_TEXT
    ,okcPARecTab.OkcPA_ESTIMATED_FLAG
    ,okcPARecTab.OkcPA_ADJUSTED_AMOUNT
    ,okcPARecTab.OkcPA_CHARGE_TYPE_CODE
    ,okcPARecTab.OkcPA_CHARGE_SUBTYPE_CODE
    ,okcPARecTab.OkcPA_RANGE_BREAK_QUANTITY
    ,okcPARecTab.OkcPA_ACCRUAL_CONVERSION_RATE
    ,okcPARecTab.OkcPA_PRICING_GROUP_SEQUENCE
    ,okcPARecTab.OkcPA_ACCRUAL_FLAG
    ,okcPARecTab.OkcPA_LIST_LINE_NO
    ,okcPARecTab.OkcPA_SOURCE_SYSTEM_CODE
    ,okcPARecTab.OkcPA_BENEFIT_QTY
    ,okcPARecTab.OkcPA_BENEFIT_UOM_CODE
    ,okcPARecTab.OkcPA_EXPIRATION_DATE
    ,okcPARecTab.OkcPA_MODIFIER_LEVEL_CODE
    ,okcPARecTab.OkcPA_PRICE_BREAK_TYPE_CODE
    ,okcPARecTab.OkcPA_SUBSTITUTION_ATTRIBUTE
    ,okcPARecTab.OkcPA_PRORATION_TYPE_CODE
    ,okcPARecTab.OkcPA_INCLUDE_ON_RETURNS_FLAG
    ,okcPARecTab.OkcPA_REBATE_TRXN_TYPE_CODE LIMIT G_BULK_FETCH_LIMIT;

   END IF;
 END IF;



  FORALL i in okcPARecTab.OkcPA_NewID.FIRST .. okcPARecTab.OkcPA_NewID.LAST
  INSERT INTO OKC_PRICE_ADJUSTMENTS(
  ID
 ,PAT_ID
 ,CHR_ID
 ,CLE_ID
 ,BSL_ID
 ,BCL_ID
 ,MODIFIED_FROM
 ,MODIFIED_TO
 ,MODIFIER_MECHANISM_TYPE_CODE
 ,OPERAND
 ,ARITHMETIC_OPERATOR
 ,AUTOMATIC_FLAG
 ,UPDATE_ALLOWED
 ,UPDATED_FLAG
 ,APPLIED_FLAG
 ,ON_INVOICE_FLAG
 ,PRICING_PHASE_ID
 ,CONTEXT
 ,ATTRIBUTE1
 ,ATTRIBUTE2
 ,ATTRIBUTE3
 ,ATTRIBUTE4
 ,ATTRIBUTE5
 ,ATTRIBUTE6
 ,ATTRIBUTE7
 ,ATTRIBUTE8
 ,ATTRIBUTE9
 ,ATTRIBUTE10
 ,ATTRIBUTE11
 ,ATTRIBUTE12
 ,ATTRIBUTE13
 ,ATTRIBUTE14
 ,ATTRIBUTE15
 ,SECURITY_GROUP_ID
 ,PROGRAM_APPLICATION_ID
 ,PROGRAM_ID
 ,PROGRAM_UPDATE_DATE
 ,REQUEST_ID
 ,OBJECT_VERSION_NUMBER
 ,LIST_HEADER_ID
 ,LIST_LINE_ID
 ,LIST_LINE_TYPE_CODE
 ,CHANGE_REASON_CODE
 ,CHANGE_REASON_TEXT
 ,ESTIMATED_FLAG
 ,ADJUSTED_AMOUNT
 ,CHARGE_TYPE_CODE
 ,CHARGE_SUBTYPE_CODE
 ,RANGE_BREAK_QUANTITY
 ,ACCRUAL_CONVERSION_RATE
 ,PRICING_GROUP_SEQUENCE
 ,ACCRUAL_FLAG
 ,LIST_LINE_NO
 ,SOURCE_SYSTEM_CODE
 ,BENEFIT_QTY
 ,BENEFIT_UOM_CODE
 ,EXPIRATION_DATE
 ,MODIFIER_LEVEL_CODE
 ,PRICE_BREAK_TYPE_CODE
 ,SUBSTITUTION_ATTRIBUTE
 ,PRORATION_TYPE_CODE
 ,INCLUDE_ON_RETURNS_FLAG
 ,REBATE_TRANSACTION_TYPE_CODE
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATE_LOGIN
 )
 SELECT
 okcPARecTab.OkcPA_NewID(i)
,okcPARecTab.OkcPA_PAT_ID(i)
,okcPARecTab.OkcPA_NewChrID(i)
,okcPARecTab.OkcPA_NewCleID(i)
,okcPARecTab.OkcPA_BSL_ID(i)
,okcPARecTab.OkcPA_BCL_ID(i)
,okcPARecTab.OkcPA_MODIFIED_FROM(i)
,okcPARecTab.OkcPA_MODIFIED_TO(i)
,okcPARecTab.OkcPA_MODIF_MECHNSM_TYPE_CODE(i)
,okcPARecTab.OkcPA_OPERAND(i)
,okcPARecTab.OkcPA_ARITHMETIC_OPERATOR(i)
,okcPARecTab.OkcPA_AUTOMATIC_FLAG(i)
,okcPARecTab.OkcPA_UPDATE_ALLOWED(i)
,okcPARecTab.OkcPA_UPDATED_FLAG(i)
,okcPARecTab.OkcPA_APPLIED_FLAG(i)
,okcPARecTab.OkcPA_ON_INVOICE_FLAG(i)
,okcPARecTab.OkcPA_PRICING_PHASE_ID(i)
,okcPARecTab.OkcPA_CONTEXT(i)
,okcPARecTab.OkcPA_ATTRIBUTE1(i)
,okcPARecTab.OkcPA_ATTRIBUTE2(i)
,okcPARecTab.OkcPA_ATTRIBUTE3(i)
,okcPARecTab.OkcPA_ATTRIBUTE4(i)
,okcPARecTab.OkcPA_ATTRIBUTE5(i)
,okcPARecTab.OkcPA_ATTRIBUTE6(i)
,okcPARecTab.OkcPA_ATTRIBUTE7(i)
,okcPARecTab.OkcPA_ATTRIBUTE8(i)
,okcPARecTab.OkcPA_ATTRIBUTE9(i)
,okcPARecTab.OkcPA_ATTRIBUTE10(i)
,okcPARecTab.OkcPA_ATTRIBUTE11(i)
,okcPARecTab.OkcPA_ATTRIBUTE12(i)
,okcPARecTab.OkcPA_ATTRIBUTE13(i)
,okcPARecTab.OkcPA_ATTRIBUTE14(i)
,okcPARecTab.OkcPA_ATTRIBUTE15(i)
,okcPARecTab.OkcPA_SECURITY_GROUP_ID(i)
,okcPARecTab.OkcPA_PROGRAM_APPLICATION_ID(i)
,okcPARecTab.OkcPA_PROGRAM_ID(i)
,okcPARecTab.OkcPA_PROGRAM_UPDATE_DATE(i)
,okcPARecTab.OkcPA_REQUEST_ID(i)
,okcPARecTab.OkcPA_OBJECT_VERSION_NUMBER(i)
,okcPARecTab.OkcPA_LIST_HEADER_ID(i)
,okcPARecTab.OkcPA_LIST_LINE_ID(i)
,okcPARecTab.OkcPA_LIST_LINE_TYPE_CODE(i)
,okcPARecTab.OkcPA_CHANGE_REASON_CODE(i)
,okcPARecTab.OkcPA_CHANGE_REASON_TEXT(i)
,okcPARecTab.OkcPA_ESTIMATED_FLAG(i)
,okcPARecTab.OkcPA_ADJUSTED_AMOUNT(i)
,okcPARecTab.OkcPA_CHARGE_TYPE_CODE(i)
,okcPARecTab.OkcPA_CHARGE_SUBTYPE_CODE(i)
,okcPARecTab.OkcPA_RANGE_BREAK_QUANTITY(i)
,okcPARecTab.OkcPA_ACCRUAL_CONVERSION_RATE(i)
,okcPARecTab.OkcPA_PRICING_GROUP_SEQUENCE(i)
,okcPARecTab.OkcPA_ACCRUAL_FLAG(i)
,okcPARecTab.OkcPA_LIST_LINE_NO(i)
,okcPARecTab.OkcPA_SOURCE_SYSTEM_CODE(i)
,okcPARecTab.OkcPA_BENEFIT_QTY(i)
,okcPARecTab.OkcPA_BENEFIT_UOM_CODE(i)
,okcPARecTab.OkcPA_EXPIRATION_DATE(i)
,okcPARecTab.OkcPA_MODIFIER_LEVEL_CODE(i)
,okcPARecTab.OkcPA_PRICE_BREAK_TYPE_CODE(i)
,okcPARecTab.OkcPA_SUBSTITUTION_ATTRIBUTE(i)
,okcPARecTab.OkcPA_PRORATION_TYPE_CODE(i)
,okcPARecTab.OkcPA_INCLUDE_ON_RETURNS_FLAG(i)
,okcPARecTab.OkcPA_REBATE_TRXN_TYPE_CODE(i)
,FND_GLOBAL.USER_ID
,SYSDATE
,FND_GLOBAL.USER_ID
,SYSDATE
,FND_GLOBAL.LOGIN_ID
FROM
DUAL;


    IF (P_Partial_Copy_YN = 'N') THEN
      EXIT WHEN GetOkcPAFull%NOTFOUND;
    ELSIF (P_Partial_Copy_YN = 'Y') THEN
      IF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
        EXIT WHEN GetOkcPAPartial_H%NOTFOUND;
      ELSIF (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
        EXIT WHEN GetOkcPAPartial_HNL%NOTFOUND;
      ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
        EXIT WHEN GetOkcPAPartial_L%NOTFOUND;
      END IF;
    END IF;

 END LOOP;

  IF GetOkcPAFull%ISOPEN THEN
   CLOSE GetOkcPAFull;
  ELSIF GetOkcPAPartial_H%ISOPEN THEN
   CLOSE GetOkcPAPartial_H;
  ELSIF GetOkcPAPartial_HNL%ISOPEN THEN
   CLOSE GetOkcPAPartial_HNL;
  ELSIF GetOkcPAPartial_L%ISOPEN THEN
   CLOSE GetOkcPAPartial_L;
  END IF;

    EXCEPTION
        WHEN OTHERS THEN
          IF GetOkcPAFull%ISOPEN THEN
	   CLOSE GetOkcPAFull;
	  ELSIF GetOkcPAPartial_H%ISOPEN THEN
	   CLOSE GetOkcPAPartial_H;
	  ELSIF GetOkcPAPartial_HNL%ISOPEN THEN
	   CLOSE GetOkcPAPartial_HNL;
	  ELSIF GetOkcPAPartial_L%ISOPEN THEN
	   CLOSE GetOkcPAPartial_L;
	  END IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_okc_price_adjustments;


--===================================================
--  copy_okc_k_party_roles_b
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--	      P_Lines_Count : Count of rows in P_Lines_Tbl PLSQL Table
--====================================================
 PROCEDURE copy_okc_k_party_roles_b(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_PARTY_ROLES_B';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 CURSOR GetOkcPRBFull IS
 SELECT
  okcPRB.ID AS okcPRB_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPRB_NewID
 ,okcH.ID AS okcPRB_NewChrID
 ,NULL AS okcPRB_NewCleID
 ,okcH.ID AS okcPRB_NewDnzChrID
 ,okcPRB.RLE_CODE AS okcPRB_RLE_CODE
 ,okcPRB.OBJECT1_ID1 AS okcPRB_OBJECT1_ID1
 ,okcPRB.OBJECT1_ID2 AS okcPRB_OBJECT1_ID2
 ,okcPRB.JTOT_OBJECT1_CODE AS okcPRB_JTOT_OBJECT1_CODE
 ,1 AS okcPRB_OBJECT_VERSION_NUMBER
 ,okcPRB.CODE AS okcPRB_CODE
 ,okcPRB.FACILITY AS okcPRB_FACILITY
 ,okcPRB.MINORITY_GROUP_LOOKUP_CODE AS okcPRB_MINOR_GRP_LOOKUP_CODE
 ,okcPRB.SMALL_BUSINESS_FLAG AS okcPRB_SMALL_BUSINESS_FLAG
 ,okcPRB.WOMEN_OWNED_FLAG AS okcPRB_WOMEN_OWNED_FLAG
 ,okcPRB.ATTRIBUTE_CATEGORY AS okcPRB_ATTRIBUTE_CATEGORY
 ,okcPRB.ATTRIBUTE1 AS okcPRB_ATTRIBUTE1
 ,okcPRB.ATTRIBUTE2 AS okcPRB_ATTRIBUTE2
 ,okcPRB.ATTRIBUTE3 AS okcPRB_ATTRIBUTE3
 ,okcPRB.ATTRIBUTE4 AS okcPRB_ATTRIBUTE4
 ,okcPRB.ATTRIBUTE5 AS okcPRB_ATTRIBUTE5
 ,okcPRB.ATTRIBUTE6 AS okcPRB_ATTRIBUTE6
 ,okcPRB.ATTRIBUTE7 AS okcPRB_ATTRIBUTE7
 ,okcPRB.ATTRIBUTE8 AS okcPRB_ATTRIBUTE8
 ,okcPRB.ATTRIBUTE9 AS okcPRB_ATTRIBUTE9
 ,okcPRB.ATTRIBUTE10 AS okcPRB_ATTRIBUTE10
 ,okcPRB.ATTRIBUTE11 AS okcPRB_ATTRIBUTE11
 ,okcPRB.ATTRIBUTE12 AS okcPRB_ATTRIBUTE12
 ,okcPRB.ATTRIBUTE13 AS okcPRB_ATTRIBUTE13
 ,okcPRB.ATTRIBUTE14 AS okcPRB_ATTRIBUTE14
 ,okcPRB.ATTRIBUTE15 AS okcPRB_ATTRIBUTE15
 ,okcPRB.SECURITY_GROUP_ID AS okcPRB_SECURITY_GROUP_ID
 ,okcPRB.CPL_ID AS okcPRB_CPL_ID
 ,okcPRB.PRIMARY_YN AS okcPRB_PRIMARY_YN
 ,okcPRB.BILL_TO_SITE_USE_ID AS okcPRB_BILL_TO_SITE_USE_ID
 ,okcPRB.CUST_ACCT_ID AS okcPRB_CUST_ACCT_ID
 ,okcPRB.ID AS okcPRB_ORIG_SYSTEM_ID1
 ,'COPY' AS okcPRB_ORIG_SYSTEM_REFERENCE1
 ,NULL AS okcPRB_ORIG_SYSTEM_SOURCE_CODE
 FROM
   OKC_K_PARTY_ROLES_B okcPRB
  ,OKC_K_HEADERS_B okcH
  where okcPRB.DNZ_CHR_ID = okcH.ORIG_SYSTEM_ID1
  and okcPRB.CLE_ID is NULL
  and okcH.ID = P_To_Chr_ID
  and okcPRB.DNZ_CHR_ID = P_From_Chr_ID
 UNION
 SELECT
  okcPRB.ID AS okcPRB_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPRB_NewID
 ,NULL AS okcPRB_NewChrID
 ,okcB.ID AS okcPRB_NewCleID
 ,okcB.DNZ_CHR_ID AS okcPRB_NewDnzChrID
 ,okcPRB.RLE_CODE AS okcPRB_RLE_CODE
 ,okcPRB.OBJECT1_ID1 AS okcPRB_OBJECT1_ID1
 ,okcPRB.OBJECT1_ID2 AS okcPRB_OBJECT1_ID2
 ,okcPRB.JTOT_OBJECT1_CODE AS okcPRB_JTOT_OBJECT1_CODE
 ,1 AS okcPRB_OBJECT_VERSION_NUMBER
 ,okcPRB.CODE AS okcPRB_CODE
 ,okcPRB.FACILITY AS okcPRB_FACILITY
 ,okcPRB.MINORITY_GROUP_LOOKUP_CODE AS okcPRB_MINOR_GRP_LOOKUP_CODE
 ,okcPRB.SMALL_BUSINESS_FLAG AS okcPRB_SMALL_BUSINESS_FLAG
 ,okcPRB.WOMEN_OWNED_FLAG AS okcPRB_WOMEN_OWNED_FLAG
 ,okcPRB.ATTRIBUTE_CATEGORY AS okcPRB_ATTRIBUTE_CATEGORY
 ,okcPRB.ATTRIBUTE1 AS okcPRB_ATTRIBUTE1
 ,okcPRB.ATTRIBUTE2 AS okcPRB_ATTRIBUTE2
 ,okcPRB.ATTRIBUTE3 AS okcPRB_ATTRIBUTE3
 ,okcPRB.ATTRIBUTE4 AS okcPRB_ATTRIBUTE4
 ,okcPRB.ATTRIBUTE5 AS okcPRB_ATTRIBUTE5
 ,okcPRB.ATTRIBUTE6 AS okcPRB_ATTRIBUTE6
 ,okcPRB.ATTRIBUTE7 AS okcPRB_ATTRIBUTE7
 ,okcPRB.ATTRIBUTE8 AS okcPRB_ATTRIBUTE8
 ,okcPRB.ATTRIBUTE9 AS okcPRB_ATTRIBUTE9
 ,okcPRB.ATTRIBUTE10 AS okcPRB_ATTRIBUTE10
 ,okcPRB.ATTRIBUTE11 AS okcPRB_ATTRIBUTE11
 ,okcPRB.ATTRIBUTE12 AS okcPRB_ATTRIBUTE12
 ,okcPRB.ATTRIBUTE13 AS okcPRB_ATTRIBUTE13
 ,okcPRB.ATTRIBUTE14 AS okcPRB_ATTRIBUTE14
 ,okcPRB.ATTRIBUTE15 AS okcPRB_ATTRIBUTE15
 ,okcPRB.SECURITY_GROUP_ID AS okcPRB_SECURITY_GROUP_ID
 ,okcPRB.CPL_ID AS okcPRB_CPL_ID
 ,okcPRB.PRIMARY_YN AS okcPRB_PRIMARY_YN
 ,okcPRB.BILL_TO_SITE_USE_ID AS okcPRB_BILL_TO_SITE_USE_ID
 ,okcPRB.CUST_ACCT_ID AS okcPRB_CUST_ACCT_ID
 ,okcPRB.ID AS okcPRB_ORIG_SYSTEM_ID1
 ,'COPY' AS okcPRB_ORIG_SYSTEM_REFERENCE1
 ,NULL AS okcPRB_ORIG_SYSTEM_SOURCE_CODE
 FROM
   OKC_K_PARTY_ROLES_B okcPRB
  ,OKC_K_LINES_B okcB
 WHERE
   okcPRB.CLE_ID = okcB.ORIG_SYSTEM_ID1
   AND okcPRB.DNZ_CHR_ID = P_From_Chr_ID
   AND okcB.DNZ_CHR_ID = P_To_Chr_ID;

-----------------------------------------------------------------------------
--Cursor to be used in component copy to copy rows for the lines being copied
-----------------------------------------------------------------------------
 CURSOR GetOkcPRBPartial IS
 SELECT
  okcPRB.ID AS okcPRB_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcPRB_NewID
 ,NULL AS okcPRB_NewChrID
 ,okcBT.ID AS okcPRB_NewCleID
 ,okcBT.DNZ_CHR_ID AS okcPRB_NewDnzChrID
 ,okcPRB.RLE_CODE AS okcPRB_RLE_CODE
 ,okcPRB.OBJECT1_ID1 AS okcPRB_OBJECT1_ID1
 ,okcPRB.OBJECT1_ID2 AS okcPRB_OBJECT1_ID2
 ,okcPRB.JTOT_OBJECT1_CODE AS okcPRB_JTOT_OBJECT1_CODE
 ,1 AS okcPRB_OBJECT_VERSION_NUMBER
 ,okcPRB.CODE AS okcPRB_CODE
 ,okcPRB.FACILITY AS okcPRB_FACILITY
 ,okcPRB.MINORITY_GROUP_LOOKUP_CODE AS okcPRB_MINOR_GRP_LOOKUP_CODE
 ,okcPRB.SMALL_BUSINESS_FLAG AS okcPRB_SMALL_BUSINESS_FLAG
 ,okcPRB.WOMEN_OWNED_FLAG AS okcPRB_WOMEN_OWNED_FLAG
 ,okcPRB.ATTRIBUTE_CATEGORY AS okcPRB_ATTRIBUTE_CATEGORY
 ,okcPRB.ATTRIBUTE1 AS okcPRB_ATTRIBUTE1
 ,okcPRB.ATTRIBUTE2 AS okcPRB_ATTRIBUTE2
 ,okcPRB.ATTRIBUTE3 AS okcPRB_ATTRIBUTE3
 ,okcPRB.ATTRIBUTE4 AS okcPRB_ATTRIBUTE4
 ,okcPRB.ATTRIBUTE5 AS okcPRB_ATTRIBUTE5
 ,okcPRB.ATTRIBUTE6 AS okcPRB_ATTRIBUTE6
 ,okcPRB.ATTRIBUTE7 AS okcPRB_ATTRIBUTE7
 ,okcPRB.ATTRIBUTE8 AS okcPRB_ATTRIBUTE8
 ,okcPRB.ATTRIBUTE9 AS okcPRB_ATTRIBUTE9
 ,okcPRB.ATTRIBUTE10 AS okcPRB_ATTRIBUTE10
 ,okcPRB.ATTRIBUTE11 AS okcPRB_ATTRIBUTE11
 ,okcPRB.ATTRIBUTE12 AS okcPRB_ATTRIBUTE12
 ,okcPRB.ATTRIBUTE13 AS okcPRB_ATTRIBUTE13
 ,okcPRB.ATTRIBUTE14 AS okcPRB_ATTRIBUTE14
 ,okcPRB.ATTRIBUTE15 AS okcPRB_ATTRIBUTE15
 ,okcPRB.SECURITY_GROUP_ID AS okcPRB_SECURITY_GROUP_ID
 ,okcPRB.CPL_ID AS okcPRB_CPL_ID
 ,okcPRB.PRIMARY_YN AS okcPRB_PRIMARY_YN
 ,okcPRB.BILL_TO_SITE_USE_ID AS okcPRB_BILL_TO_SITE_USE_ID
 ,okcPRB.CUST_ACCT_ID AS okcPRB_CUST_ACCT_ID
 ,okcPRB.ID AS okcPRB_ORIG_SYSTEM_ID1
 ,'COPY' AS okcPRB_ORIG_SYSTEM_REFERENCE1
 ,NULL AS okcPRB_ORIG_SYSTEM_SOURCE_CODE
 FROM
   OKC_K_PARTY_ROLES_B okcPRB
  ,OKC_K_LINES_B_TEMP okcBT
 WHERE
   okcPRB.CLE_ID = okcBT.ORIG_SYSTEM_ID1
   AND okcPRB.CHR_ID IS NULL
   AND okcPRB.DNZ_CHR_ID = P_From_Chr_ID
   AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;


 Begin
  x_return_status := l_return_status;

  IF (P_Partial_Copy_YN = 'N') THEN
    OPEN GetOkcPRBFull;
  ELSIF (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0)  THEN
    OPEN GetOkcPRBPartial;
  END IF;

  LOOP
   IF (P_Partial_Copy_YN = 'N') THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPRBFull'
                         );
    END IF;

     FETCH GetOkcPRBFull BULK COLLECT INTO
     OkcPRBRecTab.OkcPRB_OldID
    ,OkcPRBRecTab.OkcPRB_NewID
    ,OkcPRBRecTab.OkcPRB_NewChrID
    ,OkcPRBRecTab.OkcPRB_NewCleID
    ,OkcPRBRecTab.OkcPRB_NewDnzChrID
    ,OkcPRBRecTab.OkcPRB_RLE_CODE
    ,OkcPRBRecTab.OkcPRB_OBJECT1_ID1
    ,OkcPRBRecTab.OkcPRB_OBJECT1_ID2
    ,OkcPRBRecTab.OkcPRB_JTOT_OBJECT1_CODE
    ,OkcPRBRecTab.OkcPRB_OBJECT_VERSION_NUMBER
    ,OkcPRBRecTab.OkcPRB_CODE
    ,OkcPRBRecTab.OkcPRB_FACILITY
    ,OkcPRBRecTab.OkcPRB_MINOR_GROUP_LOOKUP_CODE
    ,OkcPRBRecTab.OkcPRB_SMALL_BUSINESS_FLAG
    ,OkcPRBRecTab.OkcPRB_WOMEN_OWNED_FLAG
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE_CATEGORY
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE1
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE2
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE3
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE4
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE5
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE6
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE7
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE8
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE9
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE10
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE11
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE12
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE13
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE14
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE15
    ,OkcPRBRecTab.OkcPRB_SECURITY_GROUP_ID
    ,OkcPRBRecTab.OkcPRB_CPL_ID
    ,OkcPRBRecTab.OkcPRB_PRIMARY_YN
    ,OkcPRBRecTab.OkcPRB_BILL_TO_SITE_USE_ID
    ,OkcPRBRecTab.OkcPRB_CUST_ACCT_ID
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_ID1
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_REFERENCE1
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_SOURCE_CODE LIMIT G_BULK_FETCH_LIMIT;

  ELSIF (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPRBPartial'
                         );
    END IF;

     FETCH GetOkcPRBPartial BULK COLLECT INTO
     OkcPRBRecTab.OkcPRB_OldID
    ,OkcPRBRecTab.OkcPRB_NewID
    ,OkcPRBRecTab.OkcPRB_NewChrID
    ,OkcPRBRecTab.OkcPRB_NewCleID
    ,OkcPRBRecTab.OkcPRB_NewDnzChrID
    ,OkcPRBRecTab.OkcPRB_RLE_CODE
    ,OkcPRBRecTab.OkcPRB_OBJECT1_ID1
    ,OkcPRBRecTab.OkcPRB_OBJECT1_ID2
    ,OkcPRBRecTab.OkcPRB_JTOT_OBJECT1_CODE
    ,OkcPRBRecTab.OkcPRB_OBJECT_VERSION_NUMBER
    ,OkcPRBRecTab.OkcPRB_CODE
    ,OkcPRBRecTab.OkcPRB_FACILITY
    ,OkcPRBRecTab.OkcPRB_MINOR_GROUP_LOOKUP_CODE
    ,OkcPRBRecTab.OkcPRB_SMALL_BUSINESS_FLAG
    ,OkcPRBRecTab.OkcPRB_WOMEN_OWNED_FLAG
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE_CATEGORY
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE1
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE2
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE3
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE4
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE5
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE6
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE7
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE8
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE9
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE10
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE11
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE12
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE13
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE14
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE15
    ,OkcPRBRecTab.OkcPRB_SECURITY_GROUP_ID
    ,OkcPRBRecTab.OkcPRB_CPL_ID
    ,OkcPRBRecTab.OkcPRB_PRIMARY_YN
    ,OkcPRBRecTab.OkcPRB_BILL_TO_SITE_USE_ID
    ,OkcPRBRecTab.OkcPRB_CUST_ACCT_ID
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_ID1
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_REFERENCE1
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_SOURCE_CODE LIMIT G_BULK_FETCH_LIMIT;
   END IF;

   FORALL i in OkcPRBRecTab.OkcPRB_NewID.FIRST .. OkcPRBRecTab.OkcPRB_NewID.LAST
   INSERT INTO OKC_K_PARTY_ROLES_B(
      ID
     ,CHR_ID
     ,CLE_ID
     ,DNZ_CHR_ID
     ,RLE_CODE
     ,OBJECT1_ID1
     ,OBJECT1_ID2
     ,JTOT_OBJECT1_CODE
     ,OBJECT_VERSION_NUMBER
     ,CODE
     ,FACILITY
     ,MINORITY_GROUP_LOOKUP_CODE
     ,SMALL_BUSINESS_FLAG
     ,WOMEN_OWNED_FLAG
     ,ATTRIBUTE_CATEGORY
     ,ATTRIBUTE1
     ,ATTRIBUTE2
     ,ATTRIBUTE3
     ,ATTRIBUTE4
     ,ATTRIBUTE5
     ,ATTRIBUTE6
     ,ATTRIBUTE7
     ,ATTRIBUTE8
     ,ATTRIBUTE9
     ,ATTRIBUTE10
     ,ATTRIBUTE11
     ,ATTRIBUTE12
     ,ATTRIBUTE13
     ,ATTRIBUTE14
     ,ATTRIBUTE15
     ,SECURITY_GROUP_ID
     ,CPL_ID
     ,PRIMARY_YN
     ,BILL_TO_SITE_USE_ID
     ,CUST_ACCT_ID
     ,ORIG_SYSTEM_ID1
     ,ORIG_SYSTEM_REFERENCE1
     ,ORIG_SYSTEM_SOURCE_CODE
     ,CREATED_BY
     ,CREATION_DATE
     ,LAST_UPDATED_BY
     ,LAST_UPDATE_DATE
     ,LAST_UPDATE_LOGIN
   )
   SELECT
     OkcPRBRecTab.OkcPRB_NewID(i)
    ,OkcPRBRecTab.OkcPRB_NewChrID(i)
    ,OkcPRBRecTab.OkcPRB_NewCleID(i)
    ,OkcPRBRecTab.OkcPRB_NewDnzChrID(i)
    ,OkcPRBRecTab.OkcPRB_RLE_CODE(i)
    ,OkcPRBRecTab.OkcPRB_OBJECT1_ID1(i)
    ,OkcPRBRecTab.OkcPRB_OBJECT1_ID2(i)
    ,OkcPRBRecTab.OkcPRB_JTOT_OBJECT1_CODE(i)
    ,OkcPRBRecTab.OkcPRB_OBJECT_VERSION_NUMBER(i)
    ,OkcPRBRecTab.OkcPRB_CODE(i)
    ,OkcPRBRecTab.OkcPRB_FACILITY(i)
    ,OkcPRBRecTab.OkcPRB_MINOR_GROUP_LOOKUP_CODE(i)
    ,OkcPRBRecTab.OkcPRB_SMALL_BUSINESS_FLAG(i)
    ,OkcPRBRecTab.OkcPRB_WOMEN_OWNED_FLAG(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE_CATEGORY(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE1(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE2(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE3(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE4(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE5(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE6(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE7(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE8(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE9(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE10(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE11(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE12(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE13(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE14(i)
    ,OkcPRBRecTab.OkcPRB_ATTRIBUTE15(i)
    ,OkcPRBRecTab.OkcPRB_SECURITY_GROUP_ID(i)
    ,OkcPRBRecTab.OkcPRB_CPL_ID(i)
    ,OkcPRBRecTab.OkcPRB_PRIMARY_YN(i)
    ,OkcPRBRecTab.OkcPRB_BILL_TO_SITE_USE_ID(i)
    ,OkcPRBRecTab.OkcPRB_CUST_ACCT_ID(i)
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_ID1(i)
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_REFERENCE1(i)
    ,OkcPRBRecTab.OkcPRB_ORIG_SYSTEM_SOURCE_CODE(i)
    ,FND_GLOBAL.USER_ID
    ,SYSDATE
    ,FND_GLOBAL.USER_ID
    ,SYSDATE
    ,FND_GLOBAL.LOGIN_ID
    FROM DUAL;

   IF (P_Partial_Copy_YN = 'N') THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'EXITing from GetOkcPRBFull'
                         );
    END IF;

    EXIT WHEN GetOkcPRBFull%NOTFOUND;
   ELSIF (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) THEN
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'EXITing from GetOkcPRBPartial'
                         );
    END IF;

    EXIT WHEN GetOkcPRBPartial%NOTFOUND;
   END IF;

  END LOOP;
     IF GetOkcPRBFull%ISOPEN THEN
       CLOSE GetOkcPRBFull;
     ELSIF GetOkcPRBPartial%ISOPEN THEN
       CLOSE GetOkcPRBPartial;
     END IF;

    EXCEPTION
        WHEN OTHERS THEN
        IF GetOkcPRBFull%ISOPEN THEN
         CLOSE GetOkcPRBFull;
        ELSIF GetOkcPRBPartial%ISOPEN THEN
         CLOSE GetOkcPRBPartial;
        END IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_okc_k_party_roles_b;

---------------------------------------------------------------------------------

--==================================================
-- create_vendor_if_missing : Creates a record in okc_k_party_roles_b for the target contract based on the org_id of the target contract
-- Parameters: P_To_Chr_ID
--==================================================
 PROCEDURE create_vendor_if_missing(P_From_Chr_ID IN NUMBER
				   ,P_To_Chr_ID IN NUMBER
				   ,p_api_version IN NUMBER
				   ,p_init_msg_list IN VARCHAR2
				   ,x_msg_count OUT NOCOPY NUMBER
				   ,x_msg_data OUT NOCOPY VARCHAR2
			           ,x_return_status OUT NOCOPY VARCHAR2) IS

 l_api_name        CONSTANT VARCHAR2(30) := 'CREATE_VENDOR_IF_MISSING';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 l_cplv_rec cplv_rec_type;
 x_cplv_rec cplv_rec_type;
 l_vendor_role_id NUMBER;
 l_create_vendor_yn VARCHAR2(1) := 'N';
 l_return_status VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR getSourceHdrVendorPartyRoleID IS
 SELECT id
 FROM okc_k_party_roles_b
 WHERE dnz_chr_id = P_From_Chr_ID
 AND cle_id is NULL
 AND jtot_object1_code = 'OKX_OPERUNIT';
 l_Source_Vendor_PRole_ID NUMBER;

 Begin

  Begin
  /*modified the where clause for bug6667810*/
   select ID
   into l_vendor_role_id
   from okc_k_party_roles_b
   where dnz_chr_id = P_To_Chr_ID /*where chr_id = P_To_Chr_ID*/
   and jtot_object1_code = 'OKX_OPERUNIT';
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_create_vendor_yn := 'Y';
  End;

  IF (l_create_vendor_yn = 'Y') then

   Begin
    OPEN getSourceHdrVendorPartyRoleID;
    FETCH getSourceHdrVendorPartyRoleID INTO l_Source_Vendor_PRole_ID;
    CLOSE getSourceHdrVendorPartyRoleID;

    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
       FND_LOG.string(FND_LOG.level_statement
              ,l_module_name
              ,'After fetching from getSourceHdrVendorPartyRoleID :'||l_Source_Vendor_PRole_ID
               );
    END IF;

    x_return_status := get_cplv_rec(p_cpl_id  => l_Source_Vendor_PRole_ID
                                   ,x_cplv_rec => l_cplv_rec);

    l_cplv_rec.dnz_chr_id := P_To_Chr_ID;
    l_cplv_rec.chr_id := P_To_Chr_ID;
   End;

 --create a record in okc_k_party_roles_b--
   Begin
      OKC_CONTRACT_PARTY_PUB.create_k_party_role(
           p_api_version        => p_api_version,
           p_init_msg_list      => p_init_msg_list,
           x_return_status      => x_return_status,
           x_msg_count          => x_msg_count,
           x_msg_data           => x_msg_data,
           p_cplv_rec           => l_cplv_rec,
           x_cplv_rec           => x_cplv_rec);

          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                  ,l_module_name
                  ,'After call to OKC_CONTRACT_PARTY_PUB.create_k_party_role : x_return_status =' ||x_return_status
		  ||'K-ID:'||x_cplv_rec.dnz_chr_id
		  ||'Cpl ID:'||x_cplv_rec.id
                   );
          END IF;
     If (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
          FND_MSG_PUB.add_exc_msg(G_PKG_NAME
				 , l_api_name||':OKC_CONTRACT_PARTY_PUB.create_k_party_role'
                                 , substr(x_msg_data,1,240));
	  RETURN;
     End If;

	EXCEPTION
         WHEN OTHERS THEN
                IF getSourceHdrVendorPartyRoleID%ISOPEN THEN
                  CLOSE getSourceHdrVendorPartyRoleID;
                END IF;
                IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.EXCEPTION'
                        ,'Exception in create_vendor_if_missing: In call to OKC_CONTRACT_PARTY_PUB.create_k_party_role, x_return_status ='
			 ||x_return_status
                         ||'SQLERRM ='||SQLERRM
                         );
                END IF;

	  FND_MSG_PUB.add_exc_msg(G_PKG_NAME,l_api_name||':OKC_CONTRACT_PARTY_PUB.create_k_party_role', substr(SQLERRM,1,240));
          RAISE;

   End;

  END IF; --End If for l_create_vendor_yn check


 End create_vendor_if_missing;
---------------------------------------------------------------------------------
--===================================================
--  copy_okc_k_party_roles_tl
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================
 PROCEDURE copy_okc_k_party_roles_tl(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_PARTY_ROLES_TL';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 CURSOR GetOkcPRTLFull IS
 SELECT
  okcPRTL.ID AS okcPRTL_OldID
 ,okcPRB.ID AS okcPRTL_NewID
 ,okcPRTL.LANGUAGE AS okcPRTL_LANGUAGE
 ,okcPRTL.SOURCE_LANG AS okcPRTL_SOURCE_LANG
 ,okcPRTL.SFWT_FLAG AS okcPRTL_SFWT_FLAG
 ,okcPRTL.COGNOMEN AS okcPRTL_COGNOMEN
 ,okcPRTL.ALIAS AS okcPRTL_ALIAS
 ,okcPRTL.SECURITY_GROUP_ID AS okcPRTL_SECURITY_GROUP_ID
  FROM
  OKC_K_PARTY_ROLES_TL okcPRTL
  ,OKC_K_PARTY_ROLES_B okcPRB
  where okcPRTL.ID = okcPRB.ORIG_SYSTEM_ID1
  AND okcPRB.DNZ_CHR_ID = P_To_Chr_ID;

 CURSOR GetOkcPRTLPartial IS
 SELECT
  okcPRTL.ID AS okcPRTL_OldID
 ,okcPRB.ID AS okcPRTL_NewID
 ,okcPRTL.LANGUAGE AS okcPRTL_LANGUAGE
 ,okcPRTL.SOURCE_LANG AS okcPRTL_SOURCE_LANG
 ,okcPRTL.SFWT_FLAG AS okcPRTL_SFWT_FLAG
 ,okcPRTL.COGNOMEN AS okcPRTL_COGNOMEN
 ,okcPRTL.ALIAS AS okcPRTL_ALIAS
 ,okcPRTL.SECURITY_GROUP_ID AS okcPRTL_SECURITY_GROUP_ID
  FROM
   OKC_K_PARTY_ROLES_TL okcPRTL
  ,OKC_K_PARTY_ROLES_B okcPRB
  ,OKC_K_LINES_B_TEMP okcBT
  where okcPRTL.ID = okcPRB.ORIG_SYSTEM_ID1
  AND okcPRB.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
  AND okcPRB.CLE_ID = okcBT.ID
  AND okcPRB.DNZ_CHR_ID = P_To_Chr_ID;

 Begin
 x_return_status := l_return_status;
 IF (P_Partial_Copy_YN = 'N') THEN
  OPEN GetOkcPRTLFull;
 ELSIF (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) THEN
  OPEN GetOkcPRTLPartial;
 END IF;

 LOOP

  If (P_Partial_Copy_YN = 'N') then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPRTLFull'
                         );
    END IF;

   FETCH GetOkcPRTLFull BULK COLLECT INTO
   OkcPRTLRecTab.OkcPRTL_OldID
  ,OkcPRTLRecTab.OkcPRTL_NewID
  ,OkcPRTLRecTab.OkcPRTL_LANGUAGE
  ,OkcPRTLRecTab.OkcPRTL_SOURCE_LANG
  ,OkcPRTLRecTab.OkcPRTL_SFWT_FLAG
  ,OkcPRTLRecTab.OkcPRTL_COGNOMEN
  ,OkcPRTLRecTab.OkcPRTL_ALIAS
  ,OkcPRTLRecTab.OkcPRTL_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
  Elsif (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOkcPRTLPartial'
                         );
    END IF;

   FETCH GetOkcPRTLPartial BULK COLLECT INTO
   OkcPRTLRecTab.OkcPRTL_OldID
  ,OkcPRTLRecTab.OkcPRTL_NewID
  ,OkcPRTLRecTab.OkcPRTL_LANGUAGE
  ,OkcPRTLRecTab.OkcPRTL_SOURCE_LANG
  ,OkcPRTLRecTab.OkcPRTL_SFWT_FLAG
  ,OkcPRTLRecTab.OkcPRTL_COGNOMEN
  ,OkcPRTLRecTab.OkcPRTL_ALIAS
  ,OkcPRTLRecTab.OkcPRTL_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
  End If;

 FORALL i IN OkcPRTLRecTab.OkcPRTL_NewID.FIRST .. OkcPRTLRecTab.OkcPRTL_NewID.LAST
 INSERT INTO OKC_K_PARTY_ROLES_TL(
  ID
 ,LANGUAGE
 ,SOURCE_LANG
 ,SFWT_FLAG
 ,COGNOMEN
 ,ALIAS
 ,SECURITY_GROUP_ID
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATE_LOGIN
 )
 SELECT
  OkcPRTLRecTab.OkcPRTL_NewID(i)
 ,OkcPRTLRecTab.OkcPRTL_LANGUAGE(i)
 ,OkcPRTLRecTab.OkcPRTL_SOURCE_LANG(i)
 ,OkcPRTLRecTab.OkcPRTL_SFWT_FLAG(i)
 ,OkcPRTLRecTab.OkcPRTL_COGNOMEN(i)
 ,OkcPRTLRecTab.OkcPRTL_ALIAS(i)
 ,OkcPRTLRecTab.OkcPRTL_SECURITY_GROUP_ID(i)
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.LOGIN_ID
 FROM DUAL;

  If (P_Partial_Copy_YN = 'N') then
   EXIT WHEN GetOkcPRTLFull%NOTFOUND;
  Elsif (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
   EXIT WHEN GetOkcPRTLPartial%NOTFOUND;
  End If;

 END LOOP;
 If (GetOkcPRTLFull%ISOPEN) then
  CLOSE GetOkcPRTLFull;
 Elsif (GetOkcPRTLPartial%ISOPEN) then
  CLOSE GetOkcPRTLPartial;
 End If;

    EXCEPTION
        WHEN OTHERS THEN
        If GetOkcPRTLFull%ISOPEN then
          CLOSE GetOkcPRTLFull;
        Elsif GetOkcPRTLPartial%ISOPEN then
          CLOSE GetOkcPRTLPartial;
        End If;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_okc_k_party_roles_tl;


--===================================================
--  copy_okc_contacts
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================
 PROCEDURE copy_okc_contacts(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_CONTACTS';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 CURSOR GetOkcCFull IS
 SELECT
   okcC.ID AS okcC_OldID
 , To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcC_NewID
 , okcPRB.ID AS okcC_NewCplID
 , okcC.CRO_CODE AS okcC_CRO_CODE
 , okcPRB.DNZ_CHR_ID AS okcC_NewDnzChrID
 , okcC.OBJECT1_ID1 AS okcC_OBJECT1_ID1
 , okcC.OBJECT1_ID2 AS okcC_OBJECT1_ID2
 , okcC.JTOT_OBJECT1_CODE AS okcC_JTOT_OBJECT1_CODE
 , 1 AS okcC_OBJECT_VERSION_NUMBER
 , okcC.CONTACT_SEQUENCE AS okcC_CONTACT_SEQUENCE
 , okcC.ATTRIBUTE_CATEGORY AS okcC_ATTRIBUTE_CATEGORY
 , okcC.ATTRIBUTE1 AS okcC_ATTRIBUTE1
 , okcC.ATTRIBUTE2 AS okcC_ATTRIBUTE2
 , okcC.ATTRIBUTE3 AS okcC_ATTRIBUTE3
 , okcC.ATTRIBUTE4 AS okcC_ATTRIBUTE4
 , okcC.ATTRIBUTE5 AS okcC_ATTRIBUTE5
 , okcC.ATTRIBUTE6 AS okcC_ATTRIBUTE6
 , okcC.ATTRIBUTE7 AS okcC_ATTRIBUTE7
 , okcC.ATTRIBUTE8 AS okcC_ATTRIBUTE8
 , okcC.ATTRIBUTE9 AS okcC_ATTRIBUTE9
 , okcC.ATTRIBUTE10 AS okcC_ATTRIBUTE10
 , okcC.ATTRIBUTE11 AS okcC_ATTRIBUTE11
 , okcC.ATTRIBUTE12 AS okcC_ATTRIBUTE12
 , okcC.ATTRIBUTE13 AS okcC_ATTRIBUTE13
 , okcC.ATTRIBUTE14 AS okcC_ATTRIBUTE14
 , okcC.ATTRIBUTE15 AS okcC_ATTRIBUTE15
 , okcC.SECURITY_GROUP_ID AS okcC_SECURITY_GROUP_ID
 , okcC.START_DATE AS okcC_START_DATE
 , okcC.END_DATE AS okcC_END_DATE
 , okcC.PRIMARY_YN AS okcC_PRIMARY_YN
 , okcC.RESOURCE_CLASS AS okcC_RESOURCE_CLASS
 , okcC.SALES_GROUP_ID AS okcC_SALES_GROUP_ID
 FROM
   OKC_CONTACTS okcC
  ,OKC_K_PARTY_ROLES_B okcPRB
   WHERE okcC.CPL_ID = okcPRB.ORIG_SYSTEM_ID1
   AND okcPRB.DNZ_CHR_ID = P_To_Chr_ID
   AND okcC.DNZ_CHR_ID = P_From_Chr_ID;

 CURSOR GetOkcCPartial IS
 SELECT
   okcC.ID AS okcC_OldID
 , To_number(rawtohex(sys_guid()), HexFormatStr)   AS okcC_NewID
 , okcPRB.ID AS okcC_NewCplID
 , okcC.CRO_CODE AS okcC_CRO_CODE
 , okcPRB.DNZ_CHR_ID AS okcC_NewDnzChrID
 , okcC.OBJECT1_ID1 AS okcC_OBJECT1_ID1
 , okcC.OBJECT1_ID2 AS okcC_OBJECT1_ID2
 , okcC.JTOT_OBJECT1_CODE AS okcC_JTOT_OBJECT1_CODE
 , 1 AS okcC_OBJECT_VERSION_NUMBER
 , okcC.CONTACT_SEQUENCE AS okcC_CONTACT_SEQUENCE
 , okcC.ATTRIBUTE_CATEGORY AS okcC_ATTRIBUTE_CATEGORY
 , okcC.ATTRIBUTE1 AS okcC_ATTRIBUTE1
 , okcC.ATTRIBUTE2 AS okcC_ATTRIBUTE2
 , okcC.ATTRIBUTE3 AS okcC_ATTRIBUTE3
 , okcC.ATTRIBUTE4 AS okcC_ATTRIBUTE4
 , okcC.ATTRIBUTE5 AS okcC_ATTRIBUTE5
 , okcC.ATTRIBUTE6 AS okcC_ATTRIBUTE6
 , okcC.ATTRIBUTE7 AS okcC_ATTRIBUTE7
 , okcC.ATTRIBUTE8 AS okcC_ATTRIBUTE8
 , okcC.ATTRIBUTE9 AS okcC_ATTRIBUTE9
 , okcC.ATTRIBUTE10 AS okcC_ATTRIBUTE10
 , okcC.ATTRIBUTE11 AS okcC_ATTRIBUTE11
 , okcC.ATTRIBUTE12 AS okcC_ATTRIBUTE12
 , okcC.ATTRIBUTE13 AS okcC_ATTRIBUTE13
 , okcC.ATTRIBUTE14 AS okcC_ATTRIBUTE14
 , okcC.ATTRIBUTE15 AS okcC_ATTRIBUTE15
 , okcC.SECURITY_GROUP_ID AS okcC_SECURITY_GROUP_ID
 , okcC.START_DATE AS okcC_START_DATE
 , okcC.END_DATE AS okcC_END_DATE
 , okcC.PRIMARY_YN AS okcC_PRIMARY_YN
 , okcC.RESOURCE_CLASS AS okcC_RESOURCE_CLASS
 , okcC.SALES_GROUP_ID AS okcC_SALES_GROUP_ID
 FROM
   OKC_CONTACTS okcC
  ,OKC_K_PARTY_ROLES_B okcPRB
  ,OKC_K_LINES_B_TEMP okcBT
   WHERE okcC.CPL_ID = okcPRB.ORIG_SYSTEM_ID1
   AND okcPRB.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
   AND okcPRB.CLE_ID = okcBT.ID
   AND okcPRB.DNZ_CHR_ID = P_To_Chr_ID
   AND okcPRB.CHR_ID IS NULL
   AND okcC.DNZ_CHR_ID = P_From_Chr_ID;

 Begin
  x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
    OPEN GetOkcCFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    OPEN GetOkcCPartial;
  End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
     FETCH GetOkcCFull BULK COLLECT INTO
          OkcCRecTab.OkcC_OldID
     	, OkcCRecTab.OkcC_NewID
     	, OkcCRecTab.OkcC_NewCplID
	, OkcCRecTab.OkcC_CRO_CODE
	, OkcCRecTab.OkcC_NewDnzChrID
	, OkcCRecTab.OkcC_OBJECT1_ID1
	, OkcCRecTab.OkcC_OBJECT1_ID2
	, OkcCRecTab.OkcC_JTOT_OBJECT1_CODE
	, OkcCRecTab.OkcC_OBJECT_VERSION_NUMBER
	, OkcCRecTab.OkcC_CONTACT_SEQUENCE
	, OkcCRecTab.OkcC_ATTRIBUTE_CATEGORY
	, OkcCRecTab.OkcC_ATTRIBUTE1
	, OkcCRecTab.OkcC_ATTRIBUTE2
	, OkcCRecTab.OkcC_ATTRIBUTE3
	, OkcCRecTab.OkcC_ATTRIBUTE4
	, OkcCRecTab.OkcC_ATTRIBUTE5
	, OkcCRecTab.OkcC_ATTRIBUTE6
	, OkcCRecTab.OkcC_ATTRIBUTE7
	, OkcCRecTab.OkcC_ATTRIBUTE8
	, OkcCRecTab.OkcC_ATTRIBUTE9
	, OkcCRecTab.OkcC_ATTRIBUTE10
	, OkcCRecTab.OkcC_ATTRIBUTE11
	, OkcCRecTab.OkcC_ATTRIBUTE12
	, OkcCRecTab.OkcC_ATTRIBUTE13
	, OkcCRecTab.OkcC_ATTRIBUTE14
	, OkcCRecTab.OkcC_ATTRIBUTE15
	, OkcCRecTab.OkcC_SECURITY_GROUP_ID
	, OkcCRecTab.OkcC_START_DATE
	, OkcCRecTab.OkcC_END_DATE
	, OkcCRecTab.OkcC_PRIMARY_YN
	, OkcCRecTab.OkcC_RESOURCE_CLASS
	, OkcCRecTab.OkcC_SALES_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
     FETCH GetOkcCPartial BULK COLLECT INTO
          OkcCRecTab.OkcC_OldID
     	, OkcCRecTab.OkcC_NewID
     	, OkcCRecTab.OkcC_NewCplID
	, OkcCRecTab.OkcC_CRO_CODE
	, OkcCRecTab.OkcC_NewDnzChrID
	, OkcCRecTab.OkcC_OBJECT1_ID1
	, OkcCRecTab.OkcC_OBJECT1_ID2
	, OkcCRecTab.OkcC_JTOT_OBJECT1_CODE
	, OkcCRecTab.OkcC_OBJECT_VERSION_NUMBER
	, OkcCRecTab.OkcC_CONTACT_SEQUENCE
	, OkcCRecTab.OkcC_ATTRIBUTE_CATEGORY
	, OkcCRecTab.OkcC_ATTRIBUTE1
	, OkcCRecTab.OkcC_ATTRIBUTE2
	, OkcCRecTab.OkcC_ATTRIBUTE3
	, OkcCRecTab.OkcC_ATTRIBUTE4
	, OkcCRecTab.OkcC_ATTRIBUTE5
	, OkcCRecTab.OkcC_ATTRIBUTE6
	, OkcCRecTab.OkcC_ATTRIBUTE7
	, OkcCRecTab.OkcC_ATTRIBUTE8
	, OkcCRecTab.OkcC_ATTRIBUTE9
	, OkcCRecTab.OkcC_ATTRIBUTE10
	, OkcCRecTab.OkcC_ATTRIBUTE11
	, OkcCRecTab.OkcC_ATTRIBUTE12
	, OkcCRecTab.OkcC_ATTRIBUTE13
	, OkcCRecTab.OkcC_ATTRIBUTE14
	, OkcCRecTab.OkcC_ATTRIBUTE15
	, OkcCRecTab.OkcC_SECURITY_GROUP_ID
	, OkcCRecTab.OkcC_START_DATE
	, OkcCRecTab.OkcC_END_DATE
	, OkcCRecTab.OkcC_PRIMARY_YN
	, OkcCRecTab.OkcC_RESOURCE_CLASS
	, OkcCRecTab.OkcC_SALES_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
   End If;


   FORALL i IN OkcCRecTab.OkcC_NewID.FIRST .. OkcCRecTab.OkcC_NewID.LAST
   INSERT INTO OKC_CONTACTS(
     	  ID
	, CPL_ID
	, CRO_CODE
	, DNZ_CHR_ID
	, OBJECT1_ID1
	, OBJECT1_ID2
	, JTOT_OBJECT1_CODE
	, OBJECT_VERSION_NUMBER
	, CONTACT_SEQUENCE
	, ATTRIBUTE_CATEGORY
	, ATTRIBUTE1
	, ATTRIBUTE2
	, ATTRIBUTE3
	, ATTRIBUTE4
	, ATTRIBUTE5
	, ATTRIBUTE6
	, ATTRIBUTE7
	, ATTRIBUTE8
	, ATTRIBUTE9
	, ATTRIBUTE10
	, ATTRIBUTE11
	, ATTRIBUTE12
	, ATTRIBUTE13
	, ATTRIBUTE14
	, ATTRIBUTE15
	, SECURITY_GROUP_ID
	, START_DATE
	, END_DATE
	, PRIMARY_YN
	, RESOURCE_CLASS
	, SALES_GROUP_ID
	, CREATED_BY
	, CREATION_DATE
	, LAST_UPDATED_BY
	, LAST_UPDATE_DATE
	, LAST_UPDATE_LOGIN
      )
    SELECT
          OkcCRecTab.OkcC_NewID(i)
	, OkcCRecTab.OkcC_NewCplID(i)
	, OkcCRecTab.OkcC_CRO_CODE(i)
	, OkcCRecTab.OkcC_NewDnzChrID(i)
	, OkcCRecTab.OkcC_OBJECT1_ID1(i)
	, OkcCRecTab.OkcC_OBJECT1_ID2(i)
	, OkcCRecTab.OkcC_JTOT_OBJECT1_CODE(i)
	, OkcCRecTab.OkcC_OBJECT_VERSION_NUMBER(i)
	, OkcCRecTab.OkcC_CONTACT_SEQUENCE(i)
	, OkcCRecTab.OkcC_ATTRIBUTE_CATEGORY(i)
	, OkcCRecTab.OkcC_ATTRIBUTE1(i)
	, OkcCRecTab.OkcC_ATTRIBUTE2(i)
	, OkcCRecTab.OkcC_ATTRIBUTE3(i)
	, OkcCRecTab.OkcC_ATTRIBUTE4(i)
	, OkcCRecTab.OkcC_ATTRIBUTE5(i)
	, OkcCRecTab.OkcC_ATTRIBUTE6(i)
	, OkcCRecTab.OkcC_ATTRIBUTE7(i)
	, OkcCRecTab.OkcC_ATTRIBUTE8(i)
	, OkcCRecTab.OkcC_ATTRIBUTE9(i)
	, OkcCRecTab.OkcC_ATTRIBUTE10(i)
	, OkcCRecTab.OkcC_ATTRIBUTE11(i)
	, OkcCRecTab.OkcC_ATTRIBUTE12(i)
	, OkcCRecTab.OkcC_ATTRIBUTE13(i)
	, OkcCRecTab.OkcC_ATTRIBUTE14(i)
	, OkcCRecTab.OkcC_ATTRIBUTE15(i)
	, OkcCRecTab.OkcC_SECURITY_GROUP_ID(i)
	, OkcCRecTab.OkcC_START_DATE(i)
	, OkcCRecTab.OkcC_END_DATE(i)
	, OkcCRecTab.OkcC_PRIMARY_YN(i)
	, OkcCRecTab.OkcC_RESOURCE_CLASS(i)
	, OkcCRecTab.OkcC_SALES_GROUP_ID(i)
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.LOGIN_ID
	FROM DUAL;

        /*cgopinee Bug fix for 6882512*/
        OKC_CTC_PVT.update_contact_stecode(p_chr_id => P_To_Chr_ID,
                                  x_return_status=>l_return_status);
        IF l_return_status <> OKC_API.G_RET_STS_SUCCESS THEN
           RAISE OKC_API.G_EXCEPTION_ERROR;
        END IF;

        IF (P_Partial_Copy_YN = 'N') then
	  EXIT WHEN GetOkcCFull%NOTFOUND;
        ELSIF (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
          EXIT WHEN GetOkcCPartial%NOTFOUND;
        END IF;

    END LOOP;
    If (GetOkcCFull%ISOPEN) then
	CLOSE GetOkcCFull;
    Elsif (GetOkcCPartial%ISOPEN) then
        CLOSE GetOkcCPartial;
    End If;

    EXCEPTION
        WHEN OTHERS THEN
	If (GetOkcCFull%ISOPEN) then
	  CLOSE GetOkcCFull;
        Elsif (GetOkcCPartial%ISOPEN) then
          CLOSE GetOkcCPartial;
	End If;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_okc_contacts;


--===================================================
--  copy_okc_operation_lines
--  Parameters: P_From_Chr_ID : Header ID of source contract
--              P_To_Chr_ID   : Header ID of target contract
--====================================================
PROCEDURE copy_okc_operation_lines(P_From_Chr_ID IN NUMBER
				  ,P_To_Chr_ID IN NUMBER
				  ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKC_OPERATION_LINES';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  l_return_status VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

  CURSOR GetOIEID IS
  SELECT ID
  from OKC_OPERATION_INSTANCES
  WHERE TARGET_CHR_ID = P_To_Chr_ID;
  l_OIE_ID NUMBER;

  CURSOR GetOkcOLFull IS
  SELECT
   To_number(rawtohex(sys_guid()), HexFormatStr)   AS OkcOL_ID
  ,NULL AS OkcOL_SELECT_YN
  ,'P' AS OkcOL_PROCESS_FLAG
  ,l_OIE_ID AS OkcOL_OIE_ID
  ,P_To_Chr_ID AS OkcOL_SUBJECT_CHR_ID
  ,P_From_Chr_ID AS OkcOL_OBJECT_CHR_ID
  ,okcB.ID AS OkcOL_SUBJECT_CLE_ID
  ,okcB.ORIG_SYSTEM_ID1 AS OkcOL_OBJECT_CLE_ID
  ,1 AS OkcOL_OBJECT_VERSION_NUMBER
  ,NULL AS OkcOL_REQUEST_ID
  ,NULL AS OkcOL_PROGRAM_APPLICATION_ID
  ,NULL AS OkcOL_PROGRAM_ID
  ,NULL AS OkcOL_PROGRAM_UPDATE_DATE
  ,NULL AS OkcOK_SECURITY_GROUP_ID
  ,NULL AS OkcOL_MESSAGE_CODE
  ,NULL AS OkcOL_PARENT_OLE_ID
  ,'Y' AS OkcOL_ACTIVE_YN
  FROM
   OKC_K_LINES_B okcB
  WHERE
   okcB.DNZ_CHR_ID = P_To_Chr_ID;

 Begin
  x_return_status := l_return_status;

  OPEN GetOIEID;
  FETCH GetOIEID into l_OIE_ID;
  CLOSE GetOIEID;

  OPEN GetOkcOLFull;
  LOOP
  FETCH GetOkcOLFull BULK COLLECT INTO
   OkcOLRecTab.OkcOLID
  ,OkcOLRecTab.OkcOLSELECT_YN
  ,OkcOLRecTab.OkcOLPROCESS_FLAG
  ,OkcOLRecTab.OkcOLOIE_ID
  ,OkcOLRecTab.OkcOLSUBJECT_CHR_ID
  ,OkcOLRecTab.OkcOLOBJECT_CHR_ID
  ,OkcOLRecTab.OkcOLSUBJECT_CLE_ID
  ,OkcOLRecTab.OkcOLOBJECT_CLE_ID
  ,OkcOLRecTab.OkcOLOBJECT_VERSION_NUMBER
  ,OkcOLRecTab.OkcOLREQUEST_ID
  ,OkcOLRecTab.OkcOLPROGRAM_APPLICATION_ID
  ,OkcOLRecTab.OkcOLPROGRAM_ID
  ,OkcOLRecTab.OkcOLPROGRAM_UPDATE_DATE
  ,OkcOLRecTab.OkcOLSECURITY_GROUP_ID
  ,OkcOLRecTab.OkcOLMESSAGE_CODE
  ,OkcOLRecTab.OkcOLPARENT_OLE_ID
  ,OkcOLRecTab.OkcOLACTIVE_YN
  LIMIT G_BULK_FETCH_LIMIT;

   FORALL i in OkcOLRecTab.OkcOLID.FIRST .. OkcOLRecTab.OkcOLID.LAST
     INSERT INTO OKC_OPERATION_LINES(
      ID
     ,SELECT_YN
     ,PROCESS_FLAG
     ,OIE_ID
     ,SUBJECT_CHR_ID
     ,OBJECT_CHR_ID
     ,SUBJECT_CLE_ID
     ,OBJECT_CLE_ID
     ,OBJECT_VERSION_NUMBER
     ,REQUEST_ID
     ,PROGRAM_APPLICATION_ID
     ,PROGRAM_ID
     ,PROGRAM_UPDATE_DATE
     ,SECURITY_GROUP_ID
     ,MESSAGE_CODE
     ,PARENT_OLE_ID
     ,ACTIVE_YN
     ,CREATED_BY
     ,CREATION_DATE
     ,LAST_UPDATED_BY
     ,LAST_UPDATE_DATE
     ,LAST_UPDATE_LOGIN
    )
    SELECT
    OkcOLRecTab.OkcOLID(i)
   ,OkcOLRecTab.OkcOLSELECT_YN(i)
   ,OkcOLRecTab.OkcOLPROCESS_FLAG(i)
   ,OkcOLRecTab.OkcOLOIE_ID(i)
   ,OkcOLRecTab.OkcOLSUBJECT_CHR_ID(i)
   ,OkcOLRecTab.OkcOLOBJECT_CHR_ID(i)
   ,OkcOLRecTab.OkcOLSUBJECT_CLE_ID(i)
   ,OkcOLRecTab.OkcOLOBJECT_CLE_ID(i)
   ,OkcOLRecTab.OkcOLOBJECT_VERSION_NUMBER(i)
   ,OkcOLRecTab.OkcOLREQUEST_ID(i)
   ,OkcOLRecTab.OkcOLPROGRAM_APPLICATION_ID(i)
   ,OkcOLRecTab.OkcOLPROGRAM_ID(i)
   ,OkcOLRecTab.OkcOLPROGRAM_UPDATE_DATE(i)
   ,OkcOLRecTab.OkcOLSECURITY_GROUP_ID(i)
   ,OkcOLRecTab.OkcOLMESSAGE_CODE(i)
   ,OkcOLRecTab.OkcOLPARENT_OLE_ID(i)
   ,OkcOLRecTab.OkcOLACTIVE_YN(i)
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.LOGIN_ID
   FROM DUAL;
     EXIT WHEN GetOkcOLFull%NOTFOUND;
  END LOOP;

   CLOSE GetOkcOLFull;

   --------Update of PARENT_OLE_ID for Operation Lines created for Top Lines----------------
   UPDATE okc_operation_lines ola
   set ola.PARENT_OLE_ID = (select olb.ID
			  from okc_operation_lines olb
                          where olb.SUBJECT_CHR_ID = P_To_Chr_ID
			  and olb.SUBJECT_CLE_ID IS NULL)
   where
   ola.SUBJECT_CHR_ID = P_To_Chr_ID
   AND ola.SUBJECT_CLE_ID in (SELECT okcb.ID
			    from
                            OKC_K_LINES_B okcb
			    WHERE
			    okcb.DNZ_CHR_ID = P_To_Chr_ID
			    AND okcb.CLE_ID IS NULL);
   ------------------------------------------------------------------------------------------
   --------Update of PARENT_OLE_ID for Operation Lines created for Sub Lines Lines-----------
   UPDATE okc_operation_lines ola
   set ola.PARENT_OLE_ID = (select olb.ID
			    from okc_operation_lines olb
			    where olb.SUBJECT_CLE_ID = (select b.CLE_ID from
						        okc_k_lines_b b
							where b.ID = ola.SUBJECT_CLE_ID
                                                       )
                           )
   where
   ola.SUBJECT_CHR_ID = P_To_Chr_ID
   and ola.SUBJECT_CLE_ID in (select okcB.ID
			      from
			      OKC_K_LINES_B okcB
			      where okcB.ID = ola.SUBJECT_CLE_ID
                              and okcB.CLE_ID IS NOT NULL);
   ------------------------------------------------------------------------------------------

     EXCEPTION
       WHEN OTHERS THEN
         If GetOkcOLFull%ISOPEN then
           CLOSE GetOkcOLFull;
         End If;
         If GetOIEID%ISOPEN then
           CLOSE GetOIEID;
         End If;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_okc_operation_lines;


--===================================================
--  copy_oks_k_lines_tl
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	        P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================
 PROCEDURE copy_oks_k_lines_tl(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_K_LINES_TL';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
  CURSOR GetOksTLFull IS
  SELECT
	  oksTL.ID AS oksTL_OldID
    	, oksB.ID AS oksTL_NewID
	, oksTL.LANGUAGE AS oksTL_LANGUAGE
	, oksTL.SOURCE_LANG AS oksTL_SOURCE_LANG
	, oksTL.SFWT_FLAG AS oksTL_SFWT_FLAG
	, oksTL.INVOICE_TEXT AS oksTL_INVOICE_TEXT
	, oksTL.IB_TRX_DETAILS AS oksTL_IB_TRX_DETAILS
	, oksTL.STATUS_TEXT AS oksTL_STATUS_TEXT
	, oksTL.REACT_TIME_NAME AS oksTL_REACT_TIME_NAME
	, oksTL.SECURITY_GROUP_ID AS oksTL_SECURITY_GROUP_ID
  FROM
   OKS_K_LINES_TL oksTL
  ,OKS_K_LINES_B oksB
  WHERE oksTL.ID = oksB.ORIG_SYSTEM_ID1
  AND oksB.DNZ_CHR_ID = P_To_Chr_ID;

  CURSOR GetOksTLPartial IS
  SELECT
	  oksTL.ID AS oksTL_OldID
    	, oksB.ID AS oksTL_NewID
	, oksTL.LANGUAGE AS oksTL_LANGUAGE
	, oksTL.SOURCE_LANG AS oksTL_SOURCE_LANG
	, oksTL.SFWT_FLAG AS oksTL_SFWT_FLAG
	, oksTL.INVOICE_TEXT AS oksTL_INVOICE_TEXT
	, oksTL.IB_TRX_DETAILS AS oksTL_IB_TRX_DETAILS
	, oksTL.STATUS_TEXT AS oksTL_STATUS_TEXT
	, oksTL.REACT_TIME_NAME AS oksTL_REACT_TIME_NAME
	, oksTL.SECURITY_GROUP_ID AS oksTL_SECURITY_GROUP_ID
  FROM
   OKS_K_LINES_TL oksTL
  ,OKS_K_LINES_B oksB
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE oksTL.ID = oksB.ORIG_SYSTEM_ID1
  AND oksB.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
  AND oksB.CLE_ID = okcBT.ID
  AND oksB.DNZ_CHR_ID = P_To_Chr_ID;

  Begin
    x_return_status := l_return_status;

    If (P_Partial_Copy_YN = 'N') then
      OPEN GetOksTLFull;
    Elsif (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
      OPEN GetOksTLPartial;
    End If;

    LOOP
     If (P_Partial_Copy_YN = 'N') then
	FETCH GetOksTLFull BULK COLLECT INTO
 	  OksTLRecTab.OksTL_OldID
	, OksTLRecTab.OksTL_NewID
	, OksTLRecTab.OksTL_LANGUAGE
	, OksTLRecTab.OksTL_SOURCE_LANG
	, OksTLRecTab.OksTL_SFWT_FLAG
	, OksTLRecTab.OksTL_INVOICE_TEXT
	, OksTLRecTab.OksTL_IB_TRX_DETAILS
	, OksTLRecTab.OksTL_STATUS_TEXT
	, OksTLRecTab.OksTL_REACT_TIME_NAME
	, OksTLRecTab.OksTL_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
     Elsif (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
	FETCH GetOksTLPartial BULK COLLECT INTO
 	  OksTLRecTab.OksTL_OldID
	, OksTLRecTab.OksTL_NewID
	, OksTLRecTab.OksTL_LANGUAGE
	, OksTLRecTab.OksTL_SOURCE_LANG
	, OksTLRecTab.OksTL_SFWT_FLAG
	, OksTLRecTab.OksTL_INVOICE_TEXT
	, OksTLRecTab.OksTL_IB_TRX_DETAILS
	, OksTLRecTab.OksTL_STATUS_TEXT
	, OksTLRecTab.OksTL_REACT_TIME_NAME
	, OksTLRecTab.OksTL_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
     End If;

     FORALL i IN OksTLRecTab.OksTL_NewID.FIRST .. OksTLRecTab.OksTL_NewID.LAST
     INSERT INTO OKS_K_LINES_TL(
          ID
	, LANGUAGE
	, SOURCE_LANG
	, SFWT_FLAG
	, INVOICE_TEXT
	, IB_TRX_DETAILS
	, STATUS_TEXT
	, REACT_TIME_NAME
	, SECURITY_GROUP_ID
	, CREATED_BY
	, CREATION_DATE
	, LAST_UPDATED_BY
	, LAST_UPDATE_DATE
	, LAST_UPDATE_LOGIN
     )
     SELECT
	  OksTLRecTab.OksTL_NewID(i)
	, OksTLRecTab.OksTL_LANGUAGE(i)
	, OksTLRecTab.OksTL_SOURCE_LANG(i)
	, OksTLRecTab.OksTL_SFWT_FLAG(i)
	, OksTLRecTab.OksTL_INVOICE_TEXT(i)
	, OksTLRecTab.OksTL_IB_TRX_DETAILS(i)
	, OksTLRecTab.OksTL_STATUS_TEXT(i)
	, OksTLRecTab.OksTL_REACT_TIME_NAME(i)
	, OksTLRecTab.OksTL_SECURITY_GROUP_ID(i)
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.LOGIN_ID
     FROM DUAL;

     If (P_Partial_Copy_YN = 'N') then
	EXIT WHEN GetOksTLFull%NOTFOUND;
     Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
        EXIT WHEN GetOksTLPartial%NOTFOUND;
     End If;

    END LOOP;

    If GetOksTLFull%ISOPEN then
	CLOSE GetOksTLFull;
    Elsif GetOksTLPartial%ISOPEN then
        CLOSE GetOksTLPartial;
    End If;

	EXCEPTION
        WHEN OTHERS THEN
        If (GetOksTLFull%ISOPEN) then
          CLOSE GetOksTLFull;
	Elsif (GetOksTLPartial%ISOPEN) then
          CLOSE GetOksTLPartial;
        End If;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 END copy_oks_k_lines_tl;

--===================================================
--  copy_oks_rev_distributions
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================
 PROCEDURE copy_oks_rev_distributions(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_REV_DISTRIBUTIONS';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
  l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

  CURSOR GetOksRDFull IS
  SELECT
          oksRD.ID AS OksRD_OldID
        , To_number(rawtohex(sys_guid()), HexFormatStr) AS OksRD_NewID
	, okcB.DNZ_CHR_ID AS OksRD_NewChrID
	, okcB.ID AS OksRD_NewCleID
	, oksRD.ACCOUNT_CLASS AS OksRD_ACCOUNT_CLASS
	, oksRD.CODE_COMBINATION_ID AS OksRD_CODE_COMBINATION_ID
	, oksRD.PERCENT AS OksRD_PERCENT
	, 1 AS OksRD_OBJECT_VERSION_NUMBER
	, oksRD.SECURITY_GROUP_ID AS OksRD_SECURITY_GROUP_ID
  FROM
   OKS_REV_DISTRIBUTIONS oksRD
  ,OKC_K_LINES_B okcB
  WHERE oksRD.CLE_ID = okcB.ORIG_SYSTEM_ID1
  AND okcB.DNZ_CHR_ID = P_To_Chr_ID;

  CURSOR GetOksRDPartial IS
  SELECT
          oksRD.ID AS OksRD_OldID
        , To_number(rawtohex(sys_guid()), HexFormatStr) AS OksRD_NewID
	, okcBT.DNZ_CHR_ID AS OksRD_NewChrID
	, okcBT.ID AS OksRD_NewCleID
	, oksRD.ACCOUNT_CLASS AS OksRD_ACCOUNT_CLASS
	, oksRD.CODE_COMBINATION_ID AS OksRD_CODE_COMBINATION_ID
	, oksRD.PERCENT AS OksRD_PERCENT
	, 1 AS OksRD_OBJECT_VERSION_NUMBER
	, oksRD.SECURITY_GROUP_ID AS OksRD_SECURITY_GROUP_ID
  FROM
   OKS_REV_DISTRIBUTIONS oksRD
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE oksRD.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;

 Begin
   x_return_status := l_return_status;

   If (P_Partial_Copy_YN = 'N') then
    OPEN GetOksRDFull;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    OPEN GetOksRDPartial;
   End If;

   LOOP
    If (P_Partial_Copy_YN = 'N') then
      FETCH GetOksRDFull BULK COLLECT INTO
          OksRDRecTab.OksRD_OldID
       	, OksRDRecTab.OksRD_NewID
	, OksRDRecTab.OksRD_NewChrID
	, OksRDRecTab.OksRD_NewCleID
	, OksRDRecTab.OksRD_ACCOUNT_CLASS
	, OksRDRecTab.OksRD_CODE_COMBINATION_ID
	, OksRDRecTab.OksRD_PERCENT
	, OksRDRecTab.OksRD_OBJECT_VERSION_NUMBER
	, OksRDRecTab.OksRD_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;

   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
      FETCH GetOksRDPartial BULK COLLECT INTO
          OksRDRecTab.OksRD_OldID
        , OksRDRecTab.OksRD_NewID
        , OksRDRecTab.OksRD_NewChrID
        , OksRDRecTab.OksRD_NewCleID
        , OksRDRecTab.OksRD_ACCOUNT_CLASS
        , OksRDRecTab.OksRD_CODE_COMBINATION_ID
        , OksRDRecTab.OksRD_PERCENT
        , OksRDRecTab.OksRD_OBJECT_VERSION_NUMBER
        , OksRDRecTab.OksRD_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;

   End If;

   FORALL i IN OksRDRecTab.OksRD_NewID.FIRST .. OksRDRecTab.OksRD_NewID.LAST
     INSERT INTO OKS_REV_DISTRIBUTIONS
     (ID
    , CHR_ID
    , CLE_ID
    , ACCOUNT_CLASS
    , CODE_COMBINATION_ID
    , PERCENT
    , OBJECT_VERSION_NUMBER
    , SECURITY_GROUP_ID
    , CREATED_BY
    , CREATION_DATE
    , LAST_UPDATED_BY
    , LAST_UPDATE_DATE
    , LAST_UPDATE_LOGIN
    )
    SELECT
          OksRDRecTab.OksRD_NewID(i)
	, OksRDRecTab.OksRD_NewChrId(i)
	, OksRDRecTab.OksRD_NewCleID(i)
	, OksRDRecTab.OksRD_ACCOUNT_CLASS(i)
	, OksRDRecTab.OksRD_CODE_COMBINATION_ID(i)
	, OksRDRecTab.OksRD_PERCENT(i)
	, OksRDRecTab.OksRD_OBJECT_VERSION_NUMBER(i)
	, OksRDRecTab.OksRD_SECURITY_GROUP_ID(i)
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.LOGIN_ID
    FROM DUAL;

    If (P_Partial_Copy_YN = 'N') then
       EXIT WHEN GetOksRDFull%NOTFOUND;
    Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
       EXIT WHEN GetOksRDPartial%NOTFOUND;
    End If;

   END LOOP;

   If (GetOksRDFull%ISOPEN) then
     CLOSE GetOksRDFull;
   Elsif (GetOksRDPartial%ISOPEN) then
     CLOSE GetOksRDPartial;
   End If;

    EXCEPTION
        WHEN OTHERS THEN
        If (GetOksRDFull%ISOPEN) then
          CLOSE GetOksRDFull;
        Elsif (GetOksRDPartial%ISOPEN) then
          CLOSE GetOksRDPartial;
        End If;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_oks_rev_distributions;

--===================================================
--  copy_oks_qualifiers
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================
 PROCEDURE copy_oks_qualifiers(P_From_Chr_ID IN NUMBER
			    ,P_To_Chr_ID   IN NUMBER
			    ,P_Partial_Copy_YN IN VARCHAR2
			    ,P_Lines_Count IN NUMBER DEFAULT 0
			    ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_QUALIFIERS';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOksQFull IS
 SELECT
 	  oksQ.QUALIFIER_ID AS oksQ_OldQualifierID
        , To_number(rawtohex(sys_guid()), HexFormatStr) AS OksQ_NewQualifierID
	, oksQ.REQUEST_ID AS oksQ_REQUEST_ID
	, oksQ.PROGRAM_APPLICATION_ID AS oksQ_PROGRAM_APPLICATION_ID
	, oksQ.PROGRAM_ID AS oksQ_PROGRAM_ID
	, oksQ.PROGRAM_UPDATE_DATE AS oksQ_PROGRAM_UPDATE_DATE
	, oksQ.QUALIFIER_GROUPING_NO AS oksQ_QUALIF_GROUPING_NO
	, oksQ.QUALIFIER_CONTEXT AS oksQ_QUALIF_CONTEXT
	, oksQ.QUALIFIER_ATTRIBUTE AS oksQ_QUALIF_ATTRIBUTE
	, oksQ.QUALIFIER_ATTR_VALUE AS oksQ_QUALIF_ATTR_VALUE
	, oksQ.COMPARISON_OPERATOR_CODE AS oksQ_COMPARISON_OPERATOR_CODE
	, oksQ.EXCLUDER_FLAG AS oksQ_EXCLUDER_FLAG
	, oksQ.QUALIFIER_RULE_ID AS oksQ_QUALIFIER_RULE_ID
	, oksQ.START_DATE_ACTIVE AS oksQ_START_DATE_ACTIVE
	, oksQ.END_DATE_ACTIVE AS oksQ_END_DATE_ACTIVE
	, oksQ.CREATED_FROM_RULE_ID AS oksQ_CREATED_FROM_RULE_ID
	, oksQ.QUALIFIER_PRECEDENCE AS oksQ_QUALIFIER_PRECEDENCE
	, okcB.DNZ_CHR_ID AS oksQ_NewListHeaderID --*
	, okcB.ID AS oksQ_NewListLineID --*
	, oksQ.QUALIFIER_DATATYPE AS oksQ_QUALIFIER_DATATYPE
	, oksQ.QUALIFIER_ATTR_VALUE_TO AS oksQ_QUALIFIER_ATTR_VALUE_TO
	, oksQ.CONTEXT AS oksQ_CONTEXT
	, oksQ.ATTRIBUTE1 AS oksQ_ATTRIBUTE1
	, oksQ.ATTRIBUTE2 AS oksQ_ATTRIBUTE2
	, oksQ.ATTRIBUTE3 AS oksQ_ATTRIBUTE3
	, oksQ.ATTRIBUTE4 AS oksQ_ATTRIBUTE4
	, oksQ.ATTRIBUTE5 AS oksQ_ATTRIBUTE5
	, oksQ.ATTRIBUTE6 AS oksQ_ATTRIBUTE6
	, oksQ.ATTRIBUTE7 AS oksQ_ATTRIBUTE7
	, oksQ.ATTRIBUTE8 AS oksQ_ATTRIBUTE8
	, oksQ.ATTRIBUTE9 AS oksQ_ATTRIBUTE9
	, oksQ.ATTRIBUTE10 AS oksQ_ATTRIBUTE10
	, oksQ.ATTRIBUTE11 AS oksQ_ATTRIBUTE11
	, oksQ.ATTRIBUTE12 AS oksQ_ATTRIBUTE12
	, oksQ.ATTRIBUTE13 AS oksQ_ATTRIBUTE13
	, oksQ.ATTRIBUTE14 AS oksQ_ATTRIBUTE14
	, oksQ.ATTRIBUTE15 AS oksQ_ATTRIBUTE15
	, oksQ.ACTIVE_FLAG AS oksQ_ACTIVE_FLAG
	, oksQ.LIST_TYPE_CODE AS oksQ_LIST_TYPE_CODE
	, oksQ.QUAL_ATTR_VALUE_FROM_NUMBER AS oksQ_QUAL_ATTRVALUE_FROM_NUM
	, oksQ.QUAL_ATTR_VALUE_TO_NUMBER AS oksQ_QUAL_ATTRVALUE_TO_NUM
	, oksQ.SECURITY_GROUP_ID AS oksQ_SECURITY_GROUP_ID
        FROM
        OKS_QUALIFIERS oksQ
	,OKC_K_LINES_B okcB
	WHERE
	oksQ.LIST_LINE_ID = okcB.ORIG_SYSTEM_ID1
	AND okcB.CLE_ID IS NULL  --Qualifiers are only for Top Lines
	AND okcB.DNZ_CHR_ID  = P_To_Chr_ID;

 CURSOR GetOksQPartial IS
 SELECT
 	  oksQ.QUALIFIER_ID AS oksQ_OldQualifierID
        , To_number(rawtohex(sys_guid()), HexFormatStr) AS OksQ_NewQualifierID
	, oksQ.REQUEST_ID AS oksQ_REQUEST_ID
	, oksQ.PROGRAM_APPLICATION_ID AS oksQ_PROGRAM_APPLICATION_ID
	, oksQ.PROGRAM_ID AS oksQ_PROGRAM_ID
	, oksQ.PROGRAM_UPDATE_DATE AS oksQ_PROGRAM_UPDATE_DATE
	, oksQ.QUALIFIER_GROUPING_NO AS oksQ_QUALIF_GROUPING_NO
	, oksQ.QUALIFIER_CONTEXT AS oksQ_QUALIF_CONTEXT
	, oksQ.QUALIFIER_ATTRIBUTE AS oksQ_QUALIF_ATTRIBUTE
	, oksQ.QUALIFIER_ATTR_VALUE AS oksQ_QUALIF_ATTR_VALUE
	, oksQ.COMPARISON_OPERATOR_CODE AS oksQ_COMPARISON_OPERATOR_CODE
	, oksQ.EXCLUDER_FLAG AS oksQ_EXCLUDER_FLAG
	, oksQ.QUALIFIER_RULE_ID AS oksQ_QUALIFIER_RULE_ID
	, oksQ.START_DATE_ACTIVE AS oksQ_START_DATE_ACTIVE
	, oksQ.END_DATE_ACTIVE AS oksQ_END_DATE_ACTIVE
	, oksQ.CREATED_FROM_RULE_ID AS oksQ_CREATED_FROM_RULE_ID
	, oksQ.QUALIFIER_PRECEDENCE AS oksQ_QUALIFIER_PRECEDENCE
	, okcBT.DNZ_CHR_ID AS oksQ_NewListHeaderID
	, okcBT.ID AS oksQ_NewListLineID
	, oksQ.QUALIFIER_DATATYPE AS oksQ_QUALIFIER_DATATYPE
	, oksQ.QUALIFIER_ATTR_VALUE_TO AS oksQ_QUALIFIER_ATTR_VALUE_TO
	, oksQ.CONTEXT AS oksQ_CONTEXT
	, oksQ.ATTRIBUTE1 AS oksQ_ATTRIBUTE1
	, oksQ.ATTRIBUTE2 AS oksQ_ATTRIBUTE2
	, oksQ.ATTRIBUTE3 AS oksQ_ATTRIBUTE3
	, oksQ.ATTRIBUTE4 AS oksQ_ATTRIBUTE4
	, oksQ.ATTRIBUTE5 AS oksQ_ATTRIBUTE5
	, oksQ.ATTRIBUTE6 AS oksQ_ATTRIBUTE6
	, oksQ.ATTRIBUTE7 AS oksQ_ATTRIBUTE7
	, oksQ.ATTRIBUTE8 AS oksQ_ATTRIBUTE8
	, oksQ.ATTRIBUTE9 AS oksQ_ATTRIBUTE9
	, oksQ.ATTRIBUTE10 AS oksQ_ATTRIBUTE10
	, oksQ.ATTRIBUTE11 AS oksQ_ATTRIBUTE11
	, oksQ.ATTRIBUTE12 AS oksQ_ATTRIBUTE12
	, oksQ.ATTRIBUTE13 AS oksQ_ATTRIBUTE13
	, oksQ.ATTRIBUTE14 AS oksQ_ATTRIBUTE14
	, oksQ.ATTRIBUTE15 AS oksQ_ATTRIBUTE15
	, oksQ.ACTIVE_FLAG AS oksQ_ACTIVE_FLAG
	, oksQ.LIST_TYPE_CODE AS oksQ_LIST_TYPE_CODE
	, oksQ.QUAL_ATTR_VALUE_FROM_NUMBER AS oksQ_QUAL_ATTRVALUE_FROM_NUM
	, oksQ.QUAL_ATTR_VALUE_TO_NUMBER AS oksQ_QUAL_ATTRVALUE_TO_NUM
	, oksQ.SECURITY_GROUP_ID AS oksQ_SECURITY_GROUP_ID
        FROM
        OKS_QUALIFIERS oksQ
	,OKC_K_LINES_B_TEMP okcBT
	WHERE
	oksQ.LIST_LINE_ID = okcBT.ORIG_SYSTEM_ID1
	AND okcBT.CLE_ID IS NULL  --Qualifiers are only for Top Lines
	AND okcBT.DNZ_CHR_ID  = P_To_Chr_ID;
 Begin
  x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksQFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   OPEN GetOksQPartial;
  End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
   FETCH GetOksQFull BULK COLLECT INTO
     	  OksQRecTab.OksQ_OldQualifierID
   	, OksQRecTab.OksQ_NewQualifierID
	, OksQRecTab.OksQ_REQUEST_ID
	, OksQRecTab.OksQ_PROGRAM_APPLICATION_ID
	, OksQRecTab.OksQ_PROGRAM_ID
	, OksQRecTab.OksQ_PROGRAM_UPDATE_DATE
	, OksQRecTab.OksQ_QUALIFIER_GROUPING_NO
	, OksQRecTab.OksQ_QUALIFIER_CONTEXT
	, OksQRecTab.OksQ_QUALIFIER_ATTRIBUTE
	, OksQRecTab.OksQ_QUALIFIER_ATTR_VALUE
	, OksQRecTab.OksQ_COMPARISON_OPERATOR_CODE
	, OksQRecTab.OksQ_EXCLUDER_FLAG
	, OksQRecTab.OksQ_QUALIFIER_RULE_ID
	, OksQRecTab.OksQ_START_DATE_ACTIVE
	, OksQRecTab.OksQ_END_DATE_ACTIVE
	, OksQRecTab.OksQ_CREATED_FROM_RULE_ID
	, OksQRecTab.OksQ_QUALIFIER_PRECEDENCE
	, OksQRecTab.OksQ_NewListHeaderID
	, OksQRecTab.OksQ_NewListLineID
	, OksQRecTab.OksQ_QUALIFIER_DATATYPE
	, OksQRecTab.OksQ_QUALIFIER_ATTR_VALUE_TO
	, OksQRecTab.OksQ_CONTEXT
	, OksQRecTab.OksQ_ATTRIBUTE1
	, OksQRecTab.OksQ_ATTRIBUTE2
	, OksQRecTab.OksQ_ATTRIBUTE3
	, OksQRecTab.OksQ_ATTRIBUTE4
	, OksQRecTab.OksQ_ATTRIBUTE5
	, OksQRecTab.OksQ_ATTRIBUTE6
	, OksQRecTab.OksQ_ATTRIBUTE7
	, OksQRecTab.OksQ_ATTRIBUTE8
	, OksQRecTab.OksQ_ATTRIBUTE9
	, OksQRecTab.OksQ_ATTRIBUTE10
	, OksQRecTab.OksQ_ATTRIBUTE11
	, OksQRecTab.OksQ_ATTRIBUTE12
	, OksQRecTab.OksQ_ATTRIBUTE13
	, OksQRecTab.OksQ_ATTRIBUTE14
	, OksQRecTab.OksQ_ATTRIBUTE15
	, OksQRecTab.OksQ_ACTIVE_FLAG
	, OksQRecTab.OksQ_LIST_TYPE_CODE
	, OksQRecTab.OksQ_QUAL_ATTRVALUE_FROM_NUM
	, OksQRecTab.OksQ_QUAL_ATTRVALUE_TO_NUM
	, OksQRecTab.OksQ_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;

   Elsif (P_Partial_Copy_YN = 'Y' AND P_Lines_Count > 0) then
   FETCH GetOksQPartial BULK COLLECT INTO
     	  OksQRecTab.OksQ_OldQualifierID
   	, OksQRecTab.OksQ_NewQualifierID
	, OksQRecTab.OksQ_REQUEST_ID
	, OksQRecTab.OksQ_PROGRAM_APPLICATION_ID
	, OksQRecTab.OksQ_PROGRAM_ID
	, OksQRecTab.OksQ_PROGRAM_UPDATE_DATE
	, OksQRecTab.OksQ_QUALIFIER_GROUPING_NO
	, OksQRecTab.OksQ_QUALIFIER_CONTEXT
	, OksQRecTab.OksQ_QUALIFIER_ATTRIBUTE
	, OksQRecTab.OksQ_QUALIFIER_ATTR_VALUE
	, OksQRecTab.OksQ_COMPARISON_OPERATOR_CODE
	, OksQRecTab.OksQ_EXCLUDER_FLAG
	, OksQRecTab.OksQ_QUALIFIER_RULE_ID
	, OksQRecTab.OksQ_START_DATE_ACTIVE
	, OksQRecTab.OksQ_END_DATE_ACTIVE
	, OksQRecTab.OksQ_CREATED_FROM_RULE_ID
	, OksQRecTab.OksQ_QUALIFIER_PRECEDENCE
	, OksQRecTab.OksQ_NewListHeaderID
	, OksQRecTab.OksQ_NewListLineID
	, OksQRecTab.OksQ_QUALIFIER_DATATYPE
	, OksQRecTab.OksQ_QUALIFIER_ATTR_VALUE_TO
	, OksQRecTab.OksQ_CONTEXT
	, OksQRecTab.OksQ_ATTRIBUTE1
	, OksQRecTab.OksQ_ATTRIBUTE2
	, OksQRecTab.OksQ_ATTRIBUTE3
	, OksQRecTab.OksQ_ATTRIBUTE4
	, OksQRecTab.OksQ_ATTRIBUTE5
	, OksQRecTab.OksQ_ATTRIBUTE6
	, OksQRecTab.OksQ_ATTRIBUTE7
	, OksQRecTab.OksQ_ATTRIBUTE8
	, OksQRecTab.OksQ_ATTRIBUTE9
	, OksQRecTab.OksQ_ATTRIBUTE10
	, OksQRecTab.OksQ_ATTRIBUTE11
	, OksQRecTab.OksQ_ATTRIBUTE12
	, OksQRecTab.OksQ_ATTRIBUTE13
	, OksQRecTab.OksQ_ATTRIBUTE14
	, OksQRecTab.OksQ_ATTRIBUTE15
	, OksQRecTab.OksQ_ACTIVE_FLAG
	, OksQRecTab.OksQ_LIST_TYPE_CODE
	, OksQRecTab.OksQ_QUAL_ATTRVALUE_FROM_NUM
	, OksQRecTab.OksQ_QUAL_ATTRVALUE_TO_NUM
	, OksQRecTab.OksQ_SECURITY_GROUP_ID LIMIT G_BULK_FETCH_LIMIT;
   End If;

   FORALL i IN OksQRecTab.OksQ_NewQualifierID.FIRST .. OksQRecTab.OksQ_NewQualifierID.LAST
   INSERT INTO OKS_QUALIFIERS(
  	  QUALIFIER_ID
	, REQUEST_ID
	, PROGRAM_APPLICATION_ID
	, PROGRAM_ID
	, PROGRAM_UPDATE_DATE
	, QUALIFIER_GROUPING_NO
	, QUALIFIER_CONTEXT
	, QUALIFIER_ATTRIBUTE
	, QUALIFIER_ATTR_VALUE
	, COMPARISON_OPERATOR_CODE
	, EXCLUDER_FLAG
	, QUALIFIER_RULE_ID
	, START_DATE_ACTIVE
	, END_DATE_ACTIVE
	, CREATED_FROM_RULE_ID
	, QUALIFIER_PRECEDENCE
	, LIST_HEADER_ID
	, LIST_LINE_ID
	, QUALIFIER_DATATYPE
	, QUALIFIER_ATTR_VALUE_TO
	, CONTEXT
	, ATTRIBUTE1
	, ATTRIBUTE2
	, ATTRIBUTE3
	, ATTRIBUTE4
	, ATTRIBUTE5
	, ATTRIBUTE6
	, ATTRIBUTE7
	, ATTRIBUTE8
	, ATTRIBUTE9
	, ATTRIBUTE10
	, ATTRIBUTE11
	, ATTRIBUTE12
	, ATTRIBUTE13
	, ATTRIBUTE14
	, ATTRIBUTE15
	, ACTIVE_FLAG
	, LIST_TYPE_CODE
	, QUAL_ATTR_VALUE_FROM_NUMBER
	, QUAL_ATTR_VALUE_TO_NUMBER
	, SECURITY_GROUP_ID
	, CREATED_BY
	, CREATION_DATE
	, LAST_UPDATED_BY
	, LAST_UPDATE_LOGIN
	, LAST_UPDATE_DATE )
        SELECT
	  OksQRecTab.OksQ_NewQualifierID(i)
	, OksQRecTab.OksQ_REQUEST_ID(i)
	, OksQRecTab.OksQ_PROGRAM_APPLICATION_ID(i)
	, OksQRecTab.OksQ_PROGRAM_ID(i)
	, OksQRecTab.OksQ_PROGRAM_UPDATE_DATE(i)
	, OksQRecTab.OksQ_QUALIFIER_GROUPING_NO(i)
	, OksQRecTab.OksQ_QUALIFIER_CONTEXT(i)
	, OksQRecTab.OksQ_QUALIFIER_ATTRIBUTE(i)
	, OksQRecTab.OksQ_QUALIFIER_ATTR_VALUE(i)
	, OksQRecTab.OksQ_COMPARISON_OPERATOR_CODE(i)
	, OksQRecTab.OksQ_EXCLUDER_FLAG(i)
	, OksQRecTab.OksQ_QUALIFIER_RULE_ID(i)
	, OksQRecTab.OksQ_START_DATE_ACTIVE(i)
	, OksQRecTab.OksQ_END_DATE_ACTIVE(i)
	, OksQRecTab.OksQ_CREATED_FROM_RULE_ID(i)
	, OksQRecTab.OksQ_QUALIFIER_PRECEDENCE(i)
	, OksQRecTab.OksQ_NewListHeaderID(i)
	, OksQRecTab.OksQ_NewListLineID(i)
	, OksQRecTab.OksQ_QUALIFIER_DATATYPE(i)
	, OksQRecTab.OksQ_QUALIFIER_ATTR_VALUE_TO(i)
	, OksQRecTab.OksQ_CONTEXT(i)
	, OksQRecTab.OksQ_ATTRIBUTE1(i)
	, OksQRecTab.OksQ_ATTRIBUTE2(i)
	, OksQRecTab.OksQ_ATTRIBUTE3(i)
	, OksQRecTab.OksQ_ATTRIBUTE4(i)
	, OksQRecTab.OksQ_ATTRIBUTE5(i)
	, OksQRecTab.OksQ_ATTRIBUTE6(i)
	, OksQRecTab.OksQ_ATTRIBUTE7(i)
	, OksQRecTab.OksQ_ATTRIBUTE8(i)
	, OksQRecTab.OksQ_ATTRIBUTE9(i)
	, OksQRecTab.OksQ_ATTRIBUTE10(i)
	, OksQRecTab.OksQ_ATTRIBUTE11(i)
	, OksQRecTab.OksQ_ATTRIBUTE12(i)
	, OksQRecTab.OksQ_ATTRIBUTE13(i)
	, OksQRecTab.OksQ_ATTRIBUTE14(i)
	, OksQRecTab.OksQ_ATTRIBUTE15(i)
	, OksQRecTab.OksQ_ACTIVE_FLAG(i)
	, OksQRecTab.OksQ_LIST_TYPE_CODE(i)
	, OksQRecTab.OksQ_QUAL_ATTRVALUE_FROM_NUM(i)
	, OksQRecTab.OksQ_QUAL_ATTRVALUE_TO_NUM(i)
	, OksQRecTab.OksQ_SECURITY_GROUP_ID(i)
	, FND_GLOBAL.USER_ID
	, SYSDATE
	, FND_GLOBAL.USER_ID
	, FND_GLOBAL.LOGIN_ID
	, SYSDATE
        FROM DUAL;

        If (P_Partial_Copy_YN = 'N') then
	  EXIT WHEN GetOksQFull%NOTFOUND;
	Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
          EXIT WHEN GetOksQPartial%NOTFOUND;
 	End If;

   END LOOP;

       If (GetOksQFull%ISOPEN) then
        CLOSE GetOksQFull;
       Elsif (GetOksQPartial%ISOPEN) then
        CLOSE GetOksQPartial;
       End If;

    EXCEPTION
        WHEN OTHERS THEN
        If (GetOksQFull%ISOPEN) then
	  CLOSE GetOksQFull;
	Elsif (GetOksQPartial%ISOPEN) then
          CLOSE GetOksQPartial;
        End IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_oks_qualifiers;

-----------------------------------------------------------
--===================================================
--  copy_oks_coverage_timezones
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

 PROCEDURE copy_oks_coverage_timezones(P_From_Chr_ID IN NUMBER
                            	  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
				  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_COVERAGE_TIMEZONES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

   CURSOR GetOksCTZFull IS
   SELECT
      	  oksCTZ.ID AS oksCTZ_OldID --*
         ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS oksCTZ_NewID --*
	 ,okcB.ID AS oksCTZ_NewCleID --*
	 ,oksCTZ.DEFAULT_YN AS oksCTZ_DEFAULT_YN
	 ,oksCTZ.TIMEZONE_ID AS oksCTZ_TIMEZONE_ID
	 ,okcB.DNZ_CHR_ID AS oksCTZ_NewDnzChrID --*
	 ,oksCTZ.SECURITY_GROUP_ID AS oksCTZ_SECURITY_GROUP_ID
	 ,oksCTZ.PROGRAM_APPLICATION_ID AS oksCTZ_PROGRAM_APPLICATION_ID
	 ,oksCTZ.PROGRAM_ID AS oksCTZ_PROGRAM_ID
	 ,oksCTZ.PROGRAM_UPDATE_DATE AS oksCTZ_PROGRAM_UPDATE_DATE
	 ,oksCTZ.REQUEST_ID AS oksCTZ_REQUEST_ID
	 ,1 AS oksCTZ_OBJECT_VERSION_NUMBER
	 ,oksCTZ.ID AS oksCTZ_ORIG_SYSTEM_ID1 --*
	 ,NULL AS oksCTZ_ORIG_SYSTEM_SOURCE_CODE --*
	 ,'COPY' AS oksCTZ_ORIG_SYSTEM_REFERENCE1 --*
  FROM
   OKS_COVERAGE_TIMEZONES oksCTZ
  ,OKC_K_LINES_B okcB
  WHERE
    oksCTZ.CLE_ID = okcB.ORIG_SYSTEM_ID1
  AND oksCTZ.DNZ_CHR_ID = P_From_Chr_ID
  AND okcB.DNZ_CHR_ID = P_To_Chr_ID;

  CURSOR GetOksCTZPartial IS
  SELECT
          oksCTZ.ID AS oksCTZ_OldID --*
         ,To_number(rawtohex(sys_guid()), HexFormatStr)   AS oksCTZ_NewID --*
         ,okcBT.ID AS oksCTZ_NewCleID --*
         ,oksCTZ.DEFAULT_YN AS oksCTZ_DEFAULT_YN
         ,oksCTZ.TIMEZONE_ID AS oksCTZ_TIMEZONE_ID
         ,okcBT.DNZ_CHR_ID AS oksCTZ_NewDnzChrID --*
         ,oksCTZ.SECURITY_GROUP_ID AS oksCTZ_SECURITY_GROUP_ID
         ,oksCTZ.PROGRAM_APPLICATION_ID AS oksCTZ_PROGRAM_APPLICATION_ID
         ,oksCTZ.PROGRAM_ID AS oksCTZ_PROGRAM_ID
         ,oksCTZ.PROGRAM_UPDATE_DATE AS oksCTZ_PROGRAM_UPDATE_DATE
         ,oksCTZ.REQUEST_ID AS oksCTZ_REQUEST_ID
         ,1 AS oksCTZ_OBJECT_VERSION_NUMBER
         ,oksCTZ.ID AS oksCTZ_ORIG_SYSTEM_ID1 --*
         ,NULL AS oksCTZ_ORIG_SYSTEM_SOURCE_CODE --*
         ,'COPY' AS oksCTZ_ORIG_SYSTEM_REFERENCE1 --*
  FROM
   OKS_COVERAGE_TIMEZONES oksCTZ
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
    oksCTZ.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND oksCTZ.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID;

 Begin
   x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksCTZFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   OPEN GetOksCTZPartial;
  End If;

  LOOP
   IF (P_Partial_Copy_YN = 'N') then
     FETCH GetOksCTZFull BULK COLLECT INTO
          OksCTZRecTab.OksCTZ_OldID
         ,OksCTZRecTab.OksCTZ_NewID
	 ,OksCTZRecTab.OksCTZ_NewCleID
	 ,OksCTZRecTab.OksCTZ_DEFAULT_YN
	 ,OksCTZRecTab.OksCTZ_TIMEZONE_ID
	 ,OksCTZRecTab.OksCTZ_NewDnzChrID
	 ,OksCTZRecTab.OksCTZ_SECURITY_GROUP_ID
	 ,OksCTZRecTab.OksCTZ_PROGRAM_APPLICATION_ID
	 ,OksCTZRecTab.OksCTZ_PROGRAM_ID
	 ,OksCTZRecTab.OksCTZ_PROGRAM_UPDATE_DATE
	 ,OksCTZRecTab.OksCTZ_REQUEST_ID
	 ,OksCTZRecTab.OksCTZ_OBJECT_VERSION_NUMBER
	 ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_ID1
	 ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_SOURCE_CODE
	 ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_REFERENCE1
         LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
     FETCH GetOksCTZPartial BULK COLLECT INTO
          OksCTZRecTab.OksCTZ_OldID
         ,OksCTZRecTab.OksCTZ_NewID
         ,OksCTZRecTab.OksCTZ_NewCleID
         ,OksCTZRecTab.OksCTZ_DEFAULT_YN
         ,OksCTZRecTab.OksCTZ_TIMEZONE_ID
         ,OksCTZRecTab.OksCTZ_NewDnzChrID
         ,OksCTZRecTab.OksCTZ_SECURITY_GROUP_ID
         ,OksCTZRecTab.OksCTZ_PROGRAM_APPLICATION_ID
         ,OksCTZRecTab.OksCTZ_PROGRAM_ID
         ,OksCTZRecTab.OksCTZ_PROGRAM_UPDATE_DATE
         ,OksCTZRecTab.OksCTZ_REQUEST_ID
         ,OksCTZRecTab.OksCTZ_OBJECT_VERSION_NUMBER
         ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_ID1
         ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_SOURCE_CODE
         ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_REFERENCE1
         LIMIT G_BULK_FETCH_LIMIT;

   End If;

   FORALL i IN OksCTZRecTab.OksCTZ_NewID.FIRST .. OksCTZRecTab.OksCTZ_NewID.LAST
   INSERT INTO OKS_COVERAGE_TIMEZONES(
      	  ID
  	 ,CLE_ID
	 ,DEFAULT_YN
	 ,TIMEZONE_ID
	 ,DNZ_CHR_ID
	 ,SECURITY_GROUP_ID
	 ,PROGRAM_APPLICATION_ID
	 ,PROGRAM_ID
	 ,PROGRAM_UPDATE_DATE
	 ,REQUEST_ID
	 ,OBJECT_VERSION_NUMBER
	 ,ORIG_SYSTEM_ID1
	 ,ORIG_SYSTEM_SOURCE_CODE
	 ,ORIG_SYSTEM_REFERENCE1
 	 ,CREATED_BY
	 ,CREATION_DATE
	 ,LAST_UPDATED_BY
	 ,LAST_UPDATE_DATE
	 ,LAST_UPDATE_LOGIN
	 )
   SELECT
       OksCTZRecTab.OksCTZ_NewID(i)
      ,OksCTZRecTab.OksCTZ_NewCleID(i)
      ,OksCTZRecTab.OksCTZ_DEFAULT_YN(i)
      ,OksCTZRecTab.OksCTZ_TIMEZONE_ID(i)
      ,OksCTZRecTab.OksCTZ_NewDnzChrID(i)
      ,OksCTZRecTab.OksCTZ_SECURITY_GROUP_ID(i)
      ,OksCTZRecTab.OksCTZ_PROGRAM_APPLICATION_ID(i)
      ,OksCTZRecTab.OksCTZ_PROGRAM_ID(i)
      ,OksCTZRecTab.OksCTZ_PROGRAM_UPDATE_DATE(i)
      ,OksCTZRecTab.OksCTZ_REQUEST_ID(i)
      ,OksCTZRecTab.OksCTZ_OBJECT_VERSION_NUMBER(i)
      ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_ID1(i)
      ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_SOURCE_CODE(i)
      ,OksCTZRecTab.OksCTZ_ORIG_SYSTEM_REFERENCE1(i)
      ,FND_GLOBAL.USER_ID
      ,SYSDATE
      ,FND_GLOBAL.USER_ID
      ,SYSDATE
      ,FND_GLOBAL.LOGIN_ID
   FROM DUAL;

   If (P_Partial_Copy_YN = 'N') then
     EXIT WHEN GetOksCTZFull%NOTFOUND;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
     EXIT WHEN GetOksCTZPartial%NOTFOUND;
   End If;
 End LOOP;

  If GetOksCTZFull%ISOPEN THEN
    CLOSE GetOksCTZFull;
  Elsif GetOksCTZPartial%ISOPEN THEN
    CLOSE GetOksCTZPartial;
  End If;

  EXCEPTION
        WHEN OTHERS THEN
        If (GetOksCTZFull%ISOPEN) then
          CLOSE GetOksCTZFull;
        Elsif (GetOksCTZPartial%ISOPEN) then
          CLOSE GetOksCTZPartial;
        End IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_oks_coverage_timezones;


-----------------------------------------------------------
--===================================================
--  copy_oks_coverage_times
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

 PROCEDURE copy_oks_coverage_times(P_From_Chr_ID IN NUMBER
                                  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
				  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_COVERAGE_TIMES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

   CURSOR GetOksCTFull IS
	SELECT
	  oksCT.ID AS oksCT_OldID --*
	 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksCT_NewID --*
	 ,oksCTZ.DNZ_CHR_ID AS oksCT_NewDnzChrID --*
	 ,oksCTZ.ID AS oksCT_NewCovTzeLineID --*
	 ,oksCT.START_HOUR AS oksCT_START_HOUR
	 ,oksCT.START_MINUTE AS oksCT_START_MINUTE
	 ,oksCT.END_HOUR AS oksCT_END_HOUR
	 ,oksCT.END_MINUTE AS oksCT_END_MINUTE
	 ,oksCT.MONDAY_YN AS oksCT_MONDAY_YN
	 ,oksCT.TUESDAY_YN AS oksCT_TUESDAY_YN
	 ,oksCT.WEDNESDAY_YN AS oksCT_WEDNESDAY_YN
	 ,oksCT.THURSDAY_YN AS oksCT_THURSDAY_YN
	 ,oksCT.FRIDAY_YN AS oksCT_FRIDAY_YN
	 ,oksCT.SATURDAY_YN AS oksCT_SATURDAY_YN
	 ,oksCT.SUNDAY_YN AS oksCT_SUNDAY_YN
	 ,oksCT.SECURITY_GROUP_ID AS oksCT_SECURITY_GROUP_ID
	 ,oksCT.PROGRAM_APPLICATION_ID AS oksCT_PROGRAM_APPLICATION_ID
	 ,1 AS oksCT_OBJECT_VERSION_NUMBER
	 ,oksCT.PROGRAM_ID AS oksCT_PROGRAM_ID
	 ,oksCT.PROGRAM_UPDATE_DATE AS oksCT_PROGRAM_UPDATE_DATE
	 ,oksCT.REQUEST_ID AS oksCT_REQUEST_ID
	FROM
	OKS_COVERAGE_TIMES oksCT
	,OKS_COVERAGE_TIMEZONES oksCTZ
	WHERE
	OksCT.COV_TZE_LINE_ID = oksCTZ.ORIG_SYSTEM_ID1
	AND oksCTZ.DNZ_CHR_ID = P_To_Chr_ID
	AND oksCT.DNZ_CHR_ID = P_From_Chr_ID;

   CURSOR GetOksCTPartial IS
        SELECT
          oksCT.ID AS oksCT_OldID --*
         ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksCT_NewID --*
         ,oksCTZ.DNZ_CHR_ID AS oksCT_NewDnzChrID --*
         ,oksCTZ.ID AS oksCT_NewCovTzeLineID --*
         ,oksCT.START_HOUR AS oksCT_START_HOUR
         ,oksCT.START_MINUTE AS oksCT_START_MINUTE
         ,oksCT.END_HOUR AS oksCT_END_HOUR
         ,oksCT.END_MINUTE AS oksCT_END_MINUTE
         ,oksCT.MONDAY_YN AS oksCT_MONDAY_YN
         ,oksCT.TUESDAY_YN AS oksCT_TUESDAY_YN
         ,oksCT.WEDNESDAY_YN AS oksCT_WEDNESDAY_YN
         ,oksCT.THURSDAY_YN AS oksCT_THURSDAY_YN
         ,oksCT.FRIDAY_YN AS oksCT_FRIDAY_YN
         ,oksCT.SATURDAY_YN AS oksCT_SATURDAY_YN
         ,oksCT.SUNDAY_YN AS oksCT_SUNDAY_YN
         ,oksCT.SECURITY_GROUP_ID AS oksCT_SECURITY_GROUP_ID
         ,oksCT.PROGRAM_APPLICATION_ID AS oksCT_PROGRAM_APPLICATION_ID
         ,1 AS oksCT_OBJECT_VERSION_NUMBER
         ,oksCT.PROGRAM_ID AS oksCT_PROGRAM_ID
         ,oksCT.PROGRAM_UPDATE_DATE AS oksCT_PROGRAM_UPDATE_DATE
         ,oksCT.REQUEST_ID AS oksCT_REQUEST_ID
        FROM
         OKS_COVERAGE_TIMES oksCT
        ,OKS_COVERAGE_TIMEZONES oksCTZ
        ,OKC_K_LINES_B_TEMP okcBT
        WHERE
        OksCT.COV_TZE_LINE_ID = oksCTZ.ORIG_SYSTEM_ID1
        AND oksCTZ.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
        AND oksCTZ.CLE_ID = okcBT.ID
	AND oksCTZ.DNZ_CHR_ID = P_To_Chr_ID
        AND oksCT.DNZ_CHR_ID = P_From_Chr_ID;

  Begin
    x_return_status := l_return_status;
    If (P_Partial_Copy_YN = 'N') then
      OPEN GetOksCTFull;
    Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
      OPEN GetOksCTPartial;
    End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
    FETCH GetOksCTFull BULK COLLECT INTO
          OksCTRecTab.OksCT_OldID
     	 ,OksCTRecTab.OksCT_NewID
	 ,OksCTRecTab.OksCT_NewDnzChrID
	 ,OksCTRecTab.OksCT_NewCovTzeLineID
	 ,OksCTRecTab.OksCT_START_HOUR
	 ,OksCTRecTab.OksCT_START_MINUTE
	 ,OksCTRecTab.OksCT_END_HOUR
	 ,OksCTRecTab.OksCT_END_MINUTE
	 ,OksCTRecTab.OksCT_MONDAY_YN
	 ,OksCTRecTab.OksCT_TUESDAY_YN
	 ,OksCTRecTab.OksCT_WEDNESDAY_YN
	 ,OksCTRecTab.OksCT_THURSDAY_YN
	 ,OksCTRecTab.OksCT_FRIDAY_YN
	 ,OksCTRecTab.OksCT_SATURDAY_YN
	 ,OksCTRecTab.OksCT_SUNDAY_YN
	 ,OksCTRecTab.OksCT_SECURITY_GROUP_ID
	 ,OksCTRecTab.OksCT_PROGRAM_APPLICATION_ID
	 ,OksCTRecTab.OksCT_OBJECT_VERSION_NUMBER
	 ,OksCTRecTab.OksCT_PROGRAM_ID
	 ,OksCTRecTab.OksCT_PROGRAM_UPDATE_DATE
	 ,OksCTRecTab.OksCT_REQUEST_ID
 	  LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    FETCH GetOksCTPartial BULK COLLECT INTO
          OksCTRecTab.OksCT_OldID
         ,OksCTRecTab.OksCT_NewID
         ,OksCTRecTab.OksCT_NewDnzChrID
         ,OksCTRecTab.OksCT_NewCovTzeLineID
         ,OksCTRecTab.OksCT_START_HOUR
         ,OksCTRecTab.OksCT_START_MINUTE
         ,OksCTRecTab.OksCT_END_HOUR
         ,OksCTRecTab.OksCT_END_MINUTE
         ,OksCTRecTab.OksCT_MONDAY_YN
         ,OksCTRecTab.OksCT_TUESDAY_YN
         ,OksCTRecTab.OksCT_WEDNESDAY_YN
         ,OksCTRecTab.OksCT_THURSDAY_YN
         ,OksCTRecTab.OksCT_FRIDAY_YN
         ,OksCTRecTab.OksCT_SATURDAY_YN
         ,OksCTRecTab.OksCT_SUNDAY_YN
         ,OksCTRecTab.OksCT_SECURITY_GROUP_ID
         ,OksCTRecTab.OksCT_PROGRAM_APPLICATION_ID
         ,OksCTRecTab.OksCT_OBJECT_VERSION_NUMBER
         ,OksCTRecTab.OksCT_PROGRAM_ID
         ,OksCTRecTab.OksCT_PROGRAM_UPDATE_DATE
         ,OksCTRecTab.OksCT_REQUEST_ID
          LIMIT G_BULK_FETCH_LIMIT;

   End If;

   FORALL i in OksCTRecTab.OksCT_NewID.FIRST .. OksCTRecTab.OksCT_NewID.LAST
   INSERT INTO OKS_COVERAGE_TIMES(
	    ID
	 ,DNZ_CHR_ID
	 ,COV_TZE_LINE_ID
	 ,START_HOUR
	 ,START_MINUTE
	 ,END_HOUR
	 ,END_MINUTE
	 ,MONDAY_YN
	 ,TUESDAY_YN
	 ,WEDNESDAY_YN
	 ,THURSDAY_YN
	 ,FRIDAY_YN
	 ,SATURDAY_YN
	 ,SUNDAY_YN
	 ,SECURITY_GROUP_ID
	 ,PROGRAM_APPLICATION_ID
	 ,OBJECT_VERSION_NUMBER
	 ,PROGRAM_ID
	 ,PROGRAM_UPDATE_DATE
	 ,REQUEST_ID
	 ,CREATED_BY
	 ,CREATION_DATE
	 ,LAST_UPDATED_BY
	 ,LAST_UPDATE_DATE
	 ,LAST_UPDATE_LOGIN
   )
   SELECT
	  OksCTRecTab.OksCT_NewID(i)
	 ,OksCTRecTab.OksCT_NewDnzChrID(i)
	 ,OksCTRecTab.OksCT_NewCovTzeLineID(i)
	 ,OksCTRecTab.OksCT_START_HOUR(i)
	 ,OksCTRecTab.OksCT_START_MINUTE(i)
	 ,OksCTRecTab.OksCT_END_HOUR(i)
	 ,OksCTRecTab.OksCT_END_MINUTE(i)
	 ,OksCTRecTab.OksCT_MONDAY_YN(i)
	 ,OksCTRecTab.OksCT_TUESDAY_YN(i)
	 ,OksCTRecTab.OksCT_WEDNESDAY_YN(i)
	 ,OksCTRecTab.OksCT_THURSDAY_YN(i)
	 ,OksCTRecTab.OksCT_FRIDAY_YN(i)
	 ,OksCTRecTab.OksCT_SATURDAY_YN(i)
	 ,OksCTRecTab.OksCT_SUNDAY_YN(i)
	 ,OksCTRecTab.OksCT_SECURITY_GROUP_ID(i)
	 ,OksCTRecTab.OksCT_PROGRAM_APPLICATION_ID(i)
	 ,OksCTRecTab.OksCT_OBJECT_VERSION_NUMBER(i)
	 ,OksCTRecTab.OksCT_PROGRAM_ID(i)
	 ,OksCTRecTab.OksCT_PROGRAM_UPDATE_DATE(i)
	 ,OksCTRecTab.OksCT_REQUEST_ID(i)
	 ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.LOGIN_ID
	 FROM DUAL;

    If (P_Partial_Copy_YN = 'N') then
      EXIT WHEN GetOksCTFull%NOTFOUND;
    Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
      EXIT WHEN GetOksCTPartial%NOTFOUND;
    End If;

  END LOOP;

  If GetOksCTFull%ISOPEN THEN
   CLOSE GetOksCTFull;
  Elsif GetOksCTPartial%ISOPEN THEN
   CLOSE GetOksCTPartial;
  End If;

    EXCEPTION
        WHEN OTHERS THEN
        If (GetOksCTFull%ISOPEN) then
          CLOSE GetOksCTFull;
        Elsif (GetOksCTPartial%ISOPEN) then
          CLOSE GetOksCTPartial;
        End IF;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

  End copy_oks_coverage_times;

-----------------------------------------------------------
--===================================================
--  copy_oks_pm_activities
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

  PROCEDURE copy_oks_pm_activities(P_From_Chr_ID IN NUMBER
                                  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
				  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_PM_ACTIVITIES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

   CURSOR GetOksPMAFull IS
   SELECT
    	  oksPMA.ID	AS oksPMA_OldID --*
	 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMA_NewID --*
	 ,okcB.ID AS oksPMA_NewCleID --*
	 ,okcB.DNZ_CHR_ID AS oksPMA_NewDnzChrID --*
	 ,oksPMA.ACTIVITY_ID AS oksPMA_ACTIVITY_ID
	 ,oksPMA.SELECT_YN AS oksPMA_SELECT_YN
	 ,oksPMA.CONF_REQ_YN AS oksPMA_CONF_REQ_YN
	 ,oksPMA.SCH_EXISTS_YN AS oksPMA_SCH_EXISTS_YN
	 ,oksPMA.PROGRAM_APPLICATION_ID AS oksPMA_PROGRAM_APPLICATION_ID
	 ,oksPMA.PROGRAM_ID AS oksPMA_PROGRAM_ID
	 ,oksPMA.PROGRAM_UPDATE_DATE AS oksPMA_PROGRAM_UPDATE_DATE
	 ,1 AS oksPMA_OBJECT_VERSION_NUMBER
	 ,oksPMA.SECURITY_GROUP_ID AS oksPMA_SECURITY_GROUP_ID
	 ,oksPMA.REQUEST_ID AS oksPMA_REQUEST_ID
	 ,oksPMA.ID AS oksPMA_ORIG_SYSTEM_ID1 --*
	 ,NULL AS oksPMA_ORIG_SYSTEM_SOURCE_CODE --*
	 ,'COPY' AS oksPMA_ORIG_SYSTEM_REFERENCE1 --*
   FROM
   OKS_PM_ACTIVITIES oksPMA
  ,OKC_K_LINES_B okcB
  WHERE oksPMA.CLE_ID = okcB.ORIG_SYSTEM_ID1
  AND okcB.DNZ_CHR_ID = P_To_Chr_ID
  AND oksPMA.DNZ_CHR_ID = P_From_Chr_ID;

   CURSOR GetOksPMAPartial IS
   SELECT
          oksPMA.ID     AS oksPMA_OldID --*
         ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMA_NewID --*
         ,okcBT.ID AS oksPMA_NewCleID --*
         ,okcBT.DNZ_CHR_ID AS oksPMA_NewDnzChrID --*
         ,oksPMA.ACTIVITY_ID AS oksPMA_ACTIVITY_ID
         ,oksPMA.SELECT_YN AS oksPMA_SELECT_YN
         ,oksPMA.CONF_REQ_YN AS oksPMA_CONF_REQ_YN
         ,oksPMA.SCH_EXISTS_YN AS oksPMA_SCH_EXISTS_YN
         ,oksPMA.PROGRAM_APPLICATION_ID AS oksPMA_PROGRAM_APPLICATION_ID
         ,oksPMA.PROGRAM_ID AS oksPMA_PROGRAM_ID
         ,oksPMA.PROGRAM_UPDATE_DATE AS oksPMA_PROGRAM_UPDATE_DATE
         ,1 AS oksPMA_OBJECT_VERSION_NUMBER
         ,oksPMA.SECURITY_GROUP_ID AS oksPMA_SECURITY_GROUP_ID
         ,oksPMA.REQUEST_ID AS oksPMA_REQUEST_ID
         ,oksPMA.ID AS oksPMA_ORIG_SYSTEM_ID1 --*
         ,NULL AS oksPMA_ORIG_SYSTEM_SOURCE_CODE --*
         ,'COPY' AS oksPMA_ORIG_SYSTEM_REFERENCE1 --*
   FROM
   OKS_PM_ACTIVITIES oksPMA
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE oksPMA.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND oksPMA.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBT.DATES_CHANGED_YN = 'N'; --Added to handle Date Effectivity Fix. Do Bulk copy of oks_pm_schedules only for those lines whose dates
                                    --havent been changed from that on the Source Line

  Begin
   x_return_status := l_return_status;

  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksPMAFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   OPEN GetOksPMAPartial;
  End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
     FETCH GetOksPMAFull BULK COLLECT INTO
          OksPMARecTab.OksPMA_OldID
         ,OksPMARecTab.OksPMA_NewID
	 ,OksPMARecTab.OksPMA_NewCleID
	 ,OksPMARecTab.OksPMA_NewDnzChrID
	 ,OksPMARecTab.OksPMA_ACTIVITY_ID
	 ,OksPMARecTab.OksPMA_SELECT_YN
	 ,OksPMARecTab.OksPMA_CONF_REQ_YN
	 ,OksPMARecTab.OksPMA_SCH_EXISTS_YN
	 ,OksPMARecTab.OksPMA_PROGRAM_APPLICATION_ID
	 ,OksPMARecTab.OksPMA_PROGRAM_ID
	 ,OksPMARecTab.OksPMA_PROGRAM_UPDATE_DATE
	 ,OksPMARecTab.OksPMA_OBJECT_VERSION_NUMBER
	 ,OksPMARecTab.OksPMA_SECURITY_GROUP_ID
	 ,OksPMARecTab.OksPMA_REQUEST_ID
	 ,OksPMARecTab.OksPMA_ORIG_SYSTEM_ID1
	 ,OksPMARecTab.OksPMA_ORIG_SYSTEM_SOURCE_CODE
	 ,OksPMARecTab.OksPMA_ORIG_SYSTEM_REFERENCE1
     LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    FETCH GetOksPMAPartial BULK COLLECT INTO
          OksPMARecTab.OksPMA_OldID
         ,OksPMARecTab.OksPMA_NewID
         ,OksPMARecTab.OksPMA_NewCleID
         ,OksPMARecTab.OksPMA_NewDnzChrID
         ,OksPMARecTab.OksPMA_ACTIVITY_ID
         ,OksPMARecTab.OksPMA_SELECT_YN
         ,OksPMARecTab.OksPMA_CONF_REQ_YN
         ,OksPMARecTab.OksPMA_SCH_EXISTS_YN
         ,OksPMARecTab.OksPMA_PROGRAM_APPLICATION_ID
         ,OksPMARecTab.OksPMA_PROGRAM_ID
         ,OksPMARecTab.OksPMA_PROGRAM_UPDATE_DATE
         ,OksPMARecTab.OksPMA_OBJECT_VERSION_NUMBER
         ,OksPMARecTab.OksPMA_SECURITY_GROUP_ID
         ,OksPMARecTab.OksPMA_REQUEST_ID
         ,OksPMARecTab.OksPMA_ORIG_SYSTEM_ID1
         ,OksPMARecTab.OksPMA_ORIG_SYSTEM_SOURCE_CODE
         ,OksPMARecTab.OksPMA_ORIG_SYSTEM_REFERENCE1
     LIMIT G_BULK_FETCH_LIMIT;

   End If;
   FORALL i IN OksPMARecTab.OksPMA_NewID.FIRST .. OksPMARecTab.OksPMA_NewID.LAST
   INSERT INTO OKS_PM_ACTIVITIES(
	  ID
	 ,CLE_ID
	 ,DNZ_CHR_ID
	 ,ACTIVITY_ID
	 ,SELECT_YN
	 ,CONF_REQ_YN
	 ,SCH_EXISTS_YN
	 ,PROGRAM_APPLICATION_ID
	 ,PROGRAM_ID
	 ,PROGRAM_UPDATE_DATE
	 ,OBJECT_VERSION_NUMBER
	 ,SECURITY_GROUP_ID
	 ,REQUEST_ID
	 ,ORIG_SYSTEM_ID1
	 ,ORIG_SYSTEM_SOURCE_CODE
	 ,ORIG_SYSTEM_REFERENCE1
 	 ,CREATED_BY
	 ,CREATION_DATE
	 ,LAST_UPDATED_BY
	 ,LAST_UPDATE_DATE
	 ,LAST_UPDATE_LOGIN
   )
   SELECT
	  OksPMARecTab.OksPMA_NewID(i)
	 ,OksPMARecTab.OksPMA_NewCleID(i)
	 ,OksPMARecTab.OksPMA_NewDnzChrID(i)
	 ,OksPMARecTab.OksPMA_ACTIVITY_ID(i)
	 ,OksPMARecTab.OksPMA_SELECT_YN(i)
	 ,OksPMARecTab.OksPMA_CONF_REQ_YN(i)
	 ,OksPMARecTab.OksPMA_SCH_EXISTS_YN(i)
	 ,OksPMARecTab.OksPMA_PROGRAM_APPLICATION_ID(i)
	 ,OksPMARecTab.OksPMA_PROGRAM_ID(i)
	 ,OksPMARecTab.OksPMA_PROGRAM_UPDATE_DATE(i)
	 ,OksPMARecTab.OksPMA_OBJECT_VERSION_NUMBER(i)
	 ,OksPMARecTab.OksPMA_SECURITY_GROUP_ID(i)
	 ,OksPMARecTab.OksPMA_REQUEST_ID(i)
	 ,OksPMARecTab.OksPMA_ORIG_SYSTEM_ID1(i)
	 ,OksPMARecTab.OksPMA_ORIG_SYSTEM_SOURCE_CODE(i)
	 ,OksPMARecTab.OksPMA_ORIG_SYSTEM_REFERENCE1(i)
	 ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.LOGIN_ID
	 FROM DUAL;

    If (P_Partial_Copy_YN = 'N') then
     EXIT WHEN GetOksPMAFull%NOTFOUND;
    Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
     EXIT WHEN GetOksPMAPartial%NOTFOUND;
    End If;

  END LOOP;

  If GetOksPMAFull%ISOPEN then
    CLOSE GetOksPMAFull;
  Elsif GetOksPMAPartial%ISOPEN then
    CLOSE GetOksPMAPartial;
  End If;

      EXCEPTION
        WHEN OTHERS THEN
        If (GetOksPMAFull%ISOPEN) then
          CLOSE GetOksPMAFull;
	Elsif (GetOksPMAPartial%ISOPEN) then
	  CLOSE GetOksPMAPartial;
        End IF;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

  End copy_oks_pm_activities;

-----------------------------------------------------------
--===================================================
--  copy_oks_pm_stream_levels
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

 PROCEDURE copy_oks_pm_stream_levels(P_From_Chr_ID IN NUMBER
                                  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
				  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_PM_STREAM_LEVELS';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 CURSOR GetOksPMSLFull IS
 SELECT
   oksPMSL.ID AS oksPMSL_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMSL_NewID --*
  ,oksPMA.CLE_ID AS oksPMSL_NewCleID --*
  ,oksPMA.DNZ_CHR_ID AS oksPMSL_NewDnzChrID --*
  ,oksPMA.ID AS oksPMSL_NewActivityLineID --*
  ,oksPMSL.SEQUENCE_NUMBER AS oksPMSL_SEQUENCE_NUMBER
  ,oksPMSL.NUMBER_OF_OCCURENCES AS oksPMSL_NUMBER_OF_OCCURENCES
  ,oksPMSL.START_DATE AS oksPMSL_START_DATE
  ,oksPMSL.END_DATE AS oksPMSL_END_DATE
  ,oksPMSL.FREQUENCY AS oksPMSL_FREQUENCY
  ,oksPMSL.FREQUENCY_UOM AS oksPMSL_FREQUENCY_UOM
  ,oksPMSL.OFFSET_DURATION AS oksPMSL_OFFSET_DURATION
  ,oksPMSL.OFFSET_UOM AS oksPMSL_OFFSET_UOM
  ,oksPMSL.AUTOSCHEDULE_YN AS oksPMSL_AUTOSCHEDULE_YN
  ,oksPMSL.PROGRAM_APPLICATION_ID AS oksPMSL_PROGRAM_APPLICATION_ID
  ,oksPMSL.PROGRAM_ID AS oksPMSL_PROGRAM_ID
  ,oksPMSL.PROGRAM_UPDATE_DATE AS oksPMSL_PROGRAM_UPDATE_DATE
  ,1 AS oksPMSL_OBJECT_VERSION_NUMBER
  ,oksPMSL.SECURITY_GROUP_ID AS oksPMSL_SECURITY_GROUP_ID
  ,oksPMSL.REQUEST_ID AS oksPMSL_REQUEST_ID
  ,oksPMSL.ID AS oksPMSL_ORIG_SYSTEM_ID1 --*
  ,NULL AS oksPMSL_ORIG_SYS_SOURCE_CODE --*
  ,'COPY' AS oksPMSL_ORIG_SYS_REFERENCE1 --*
  FROM
   OKS_PM_STREAM_LEVELS oksPMSL
  ,OKS_PM_ACTIVITIES oksPMA
  WHERE
      oksPMSL.ACTIVITY_LINE_ID = oksPMA.ORIG_SYSTEM_ID1
  AND oksPMA.DNZ_CHR_ID  = P_To_Chr_ID
  AND oksPMSL.DNZ_CHR_ID = P_From_Chr_ID
 UNION
 SELECT
   oksPMSL.ID AS oksPMSL_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMSL_NewID --*
  ,okcB.ID AS oksPMSL_NewCleID --*
  ,okcB.DNZ_CHR_ID AS oksPMSL_NewDnzChrID --*
  ,NULL AS oksPMSL_NewActivityLineID --*
  ,oksPMSL.SEQUENCE_NUMBER AS oksPMSL_SEQUENCE_NUMBER
  ,oksPMSL.NUMBER_OF_OCCURENCES AS oksPMSL_NUMBER_OF_OCCURENCES
  ,oksPMSL.START_DATE AS oksPMSL_START_DATE
  ,oksPMSL.END_DATE AS oksPMSL_END_DATE
  ,oksPMSL.FREQUENCY AS oksPMSL_FREQUENCY
  ,oksPMSL.FREQUENCY_UOM AS oksPMSL_FREQUENCY_UOM
  ,oksPMSL.OFFSET_DURATION AS oksPMSL_OFFSET_DURATION
  ,oksPMSL.OFFSET_UOM AS oksPMSL_OFFSET_UOM
  ,oksPMSL.AUTOSCHEDULE_YN AS oksPMSL_AUTOSCHEDULE_YN
  ,oksPMSL.PROGRAM_APPLICATION_ID AS oksPMSL_PROGRAM_APPLICATION_ID
  ,oksPMSL.PROGRAM_ID AS oksPMSL_PROGRAM_ID
  ,oksPMSL.PROGRAM_UPDATE_DATE AS oksPMSL_PROGRAM_UPDATE_DATE
  ,oksPMSL.OBJECT_VERSION_NUMBER AS oksPMSL_OBJECT_VERSION_NUMBER
  ,oksPMSL.SECURITY_GROUP_ID AS oksPMSL_SECURITY_GROUP_ID
  ,oksPMSL.REQUEST_ID AS oksPMSL_REQUEST_ID
  ,oksPMSL.ID AS oksPMSL_ORIG_SYSTEM_ID1 --*
  ,NULL AS oksPMSL_ORIG_SYS_SOURCE_CODE --*
  ,'COPY' AS oksPMSL_ORIG_SYS_REFERENCE1 --*
  FROM
   OKS_PM_STREAM_LEVELS oksPMSL
  ,OKC_K_LINES_B okcB
  WHERE
      oksPMSL.CLE_ID = okcB.ORIG_SYSTEM_ID1
  AND oksPMSL.ACTIVITY_LINE_ID IS NULL
  AND okcB.DNZ_CHR_ID = P_To_Chr_ID
  AND oksPMSL.DNZ_CHR_ID = P_From_Chr_ID;

 CURSOR GetOksPMSLPartial IS
 SELECT
   oksPMSL.ID AS oksPMSL_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMSL_NewID --*
  ,oksPMA.CLE_ID AS oksPMSL_NewCleID --*
  ,oksPMA.DNZ_CHR_ID AS oksPMSL_NewDnzChrID --*
  ,oksPMA.ID AS oksPMSL_NewActivityLineID --*
  ,oksPMSL.SEQUENCE_NUMBER AS oksPMSL_SEQUENCE_NUMBER
  ,oksPMSL.NUMBER_OF_OCCURENCES AS oksPMSL_NUMBER_OF_OCCURENCES
  ,oksPMSL.START_DATE AS oksPMSL_START_DATE
  ,oksPMSL.END_DATE AS oksPMSL_END_DATE
  ,oksPMSL.FREQUENCY AS oksPMSL_FREQUENCY
  ,oksPMSL.FREQUENCY_UOM AS oksPMSL_FREQUENCY_UOM
  ,oksPMSL.OFFSET_DURATION AS oksPMSL_OFFSET_DURATION
  ,oksPMSL.OFFSET_UOM AS oksPMSL_OFFSET_UOM
  ,oksPMSL.AUTOSCHEDULE_YN AS oksPMSL_AUTOSCHEDULE_YN
  ,oksPMSL.PROGRAM_APPLICATION_ID AS oksPMSL_PROGRAM_APPLICATION_ID
  ,oksPMSL.PROGRAM_ID AS oksPMSL_PROGRAM_ID
  ,oksPMSL.PROGRAM_UPDATE_DATE AS oksPMSL_PROGRAM_UPDATE_DATE
  ,1 AS oksPMSL_OBJECT_VERSION_NUMBER
  ,oksPMSL.SECURITY_GROUP_ID AS oksPMSL_SECURITY_GROUP_ID
  ,oksPMSL.REQUEST_ID AS oksPMSL_REQUEST_ID
  ,oksPMSL.ID AS oksPMSL_ORIG_SYSTEM_ID1 --*
  ,NULL AS oksPMSL_ORIG_SYS_SOURCE_CODE --*
  ,'COPY' AS oksPMSL_ORIG_SYS_REFERENCE1 --*
  FROM
   OKS_PM_STREAM_LEVELS oksPMSL
  ,OKS_PM_ACTIVITIES oksPMA
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
      oksPMSL.ACTIVITY_LINE_ID = oksPMA.ORIG_SYSTEM_ID1
  AND oksPMA.DNZ_CHR_ID  = okcBT.DNZ_CHR_ID
  AND oksPMA.CLE_ID = okcBT.ID
  AND oksPMA.DNZ_CHR_ID  = P_To_Chr_ID
  AND oksPMSL.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBT.DATES_CHANGED_YN = 'N' --Added to handle Date Effectivity Fix. Do Bulk copy of oks_pm_schedules only for those lines whose dates
                                    --havent been changed from that on the Source Line
 UNION
 SELECT
   oksPMSL.ID AS oksPMSL_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMSL_NewID --*
  ,okcBT.ID AS oksPMSL_NewCleID --*
  ,okcBT.DNZ_CHR_ID AS oksPMSL_NewDnzChrID --*
  ,NULL AS oksPMSL_NewActivityLineID --*
  ,oksPMSL.SEQUENCE_NUMBER AS oksPMSL_SEQUENCE_NUMBER
  ,oksPMSL.NUMBER_OF_OCCURENCES AS oksPMSL_NUMBER_OF_OCCURENCES
  ,oksPMSL.START_DATE AS oksPMSL_START_DATE
  ,oksPMSL.END_DATE AS oksPMSL_END_DATE
  ,oksPMSL.FREQUENCY AS oksPMSL_FREQUENCY
  ,oksPMSL.FREQUENCY_UOM AS oksPMSL_FREQUENCY_UOM
  ,oksPMSL.OFFSET_DURATION AS oksPMSL_OFFSET_DURATION
  ,oksPMSL.OFFSET_UOM AS oksPMSL_OFFSET_UOM
  ,oksPMSL.AUTOSCHEDULE_YN AS oksPMSL_AUTOSCHEDULE_YN
  ,oksPMSL.PROGRAM_APPLICATION_ID AS oksPMSL_PROGRAM_APPLICATION_ID
  ,oksPMSL.PROGRAM_ID AS oksPMSL_PROGRAM_ID
  ,oksPMSL.PROGRAM_UPDATE_DATE AS oksPMSL_PROGRAM_UPDATE_DATE
  ,oksPMSL.OBJECT_VERSION_NUMBER AS oksPMSL_OBJECT_VERSION_NUMBER
  ,oksPMSL.SECURITY_GROUP_ID AS oksPMSL_SECURITY_GROUP_ID
  ,oksPMSL.REQUEST_ID AS oksPMSL_REQUEST_ID
  ,oksPMSL.ID AS oksPMSL_ORIG_SYSTEM_ID1 --*
  ,NULL AS oksPMSL_ORIG_SYS_SOURCE_CODE --*
  ,'COPY' AS oksPMSL_ORIG_SYS_REFERENCE1 --*
  FROM
   OKS_PM_STREAM_LEVELS oksPMSL
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
      oksPMSL.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND oksPMSL.ACTIVITY_LINE_ID IS NULL
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND oksPMSL.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBT.DATES_CHANGED_YN = 'N'; --Added to handle Date Effectivity Fix. Do Bulk copy of oks_pm_schedules only for those lines whose dates
                                    --havent been changed from that on the Source Line

 Begin
  x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksPMSLFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   OPEN GetOksPMSLPartial;
  End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
    FETCH GetOksPMSLFull BULK COLLECT INTO
          OksPMSLRecTab.OksPMSL_OldID
         ,OksPMSLRecTab.OksPMSL_NewID
	 ,OksPMSLRecTab.OksPMSL_NewCleID
	 ,OksPMSLRecTab.OksPMSL_NewDnzChrID
	 ,OksPMSLRecTab.OksPMSL_NewActivityLineID
	 ,OksPMSLRecTab.OksPMSL_SEQUENCE_NUMBER
	 ,OksPMSLRecTab.OksPMSL_NUMBER_OF_OCCURENCES
	 ,OksPMSLRecTab.OksPMSL_START_DATE
	 ,OksPMSLRecTab.OksPMSL_END_DATE
	 ,OksPMSLRecTab.OksPMSL_FREQUENCY
	 ,OksPMSLRecTab.OksPMSL_FREQUENCY_UOM
	 ,OksPMSLRecTab.OksPMSL_OFFSET_DURATION
	 ,OksPMSLRecTab.OksPMSL_OFFSET_UOM
	 ,OksPMSLRecTab.OksPMSL_AUTOSCHEDULE_YN
	 ,OksPMSLRecTab.OksPMSL_PROGRAM_APPLICATION_ID
	 ,OksPMSLRecTab.OksPMSL_PROGRAM_ID
	 ,OksPMSLRecTab.OksPMSL_PROGRAM_UPDATE_DATE
	 ,OksPMSLRecTab.OksPMSL_OBJECT_VERSION_NUMBER
	 ,OksPMSLRecTab.OksPMSL_SECURITY_GROUP_ID
	 ,OksPMSLRecTab.OksPMSL_REQUEST_ID
	 ,OksPMSLRecTab.OksPMSL_ORIG_SYSTEM_ID1
	 ,OksPMSLRecTab.OksPMSL_ORIG_SYS_SOURCE_CODE
	 ,OksPMSLRecTab.OksPMSL_ORIG_SYS_REFERENCE1
     LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    FETCH GetOksPMSLPartial BULK COLLECT INTO
          OksPMSLRecTab.OksPMSL_OldID
         ,OksPMSLRecTab.OksPMSL_NewID
         ,OksPMSLRecTab.OksPMSL_NewCleID
         ,OksPMSLRecTab.OksPMSL_NewDnzChrID
         ,OksPMSLRecTab.OksPMSL_NewActivityLineID
         ,OksPMSLRecTab.OksPMSL_SEQUENCE_NUMBER
         ,OksPMSLRecTab.OksPMSL_NUMBER_OF_OCCURENCES
         ,OksPMSLRecTab.OksPMSL_START_DATE
         ,OksPMSLRecTab.OksPMSL_END_DATE
         ,OksPMSLRecTab.OksPMSL_FREQUENCY
         ,OksPMSLRecTab.OksPMSL_FREQUENCY_UOM
         ,OksPMSLRecTab.OksPMSL_OFFSET_DURATION
         ,OksPMSLRecTab.OksPMSL_OFFSET_UOM
         ,OksPMSLRecTab.OksPMSL_AUTOSCHEDULE_YN
         ,OksPMSLRecTab.OksPMSL_PROGRAM_APPLICATION_ID
         ,OksPMSLRecTab.OksPMSL_PROGRAM_ID
         ,OksPMSLRecTab.OksPMSL_PROGRAM_UPDATE_DATE
         ,OksPMSLRecTab.OksPMSL_OBJECT_VERSION_NUMBER
         ,OksPMSLRecTab.OksPMSL_SECURITY_GROUP_ID
         ,OksPMSLRecTab.OksPMSL_REQUEST_ID
         ,OksPMSLRecTab.OksPMSL_ORIG_SYSTEM_ID1
         ,OksPMSLRecTab.OksPMSL_ORIG_SYS_SOURCE_CODE
         ,OksPMSLRecTab.OksPMSL_ORIG_SYS_REFERENCE1
     LIMIT G_BULK_FETCH_LIMIT;

   End If;

      FORALL i IN OksPMSLRecTab.OksPMSL_NewID.FIRST .. OksPMSLRecTab.OksPMSL_NewID.LAST
      INSERT INTO OKS_PM_STREAM_LEVELS (
          ID
	 ,CLE_ID
	 ,DNZ_CHR_ID
	 ,ACTIVITY_LINE_ID
	 ,SEQUENCE_NUMBER
	 ,NUMBER_OF_OCCURENCES
	 ,START_DATE
	 ,END_DATE
	 ,FREQUENCY
	 ,FREQUENCY_UOM
	 ,OFFSET_DURATION
	 ,OFFSET_UOM
	 ,AUTOSCHEDULE_YN
	 ,PROGRAM_APPLICATION_ID
	 ,PROGRAM_ID
	 ,PROGRAM_UPDATE_DATE
	 ,OBJECT_VERSION_NUMBER
	 ,SECURITY_GROUP_ID
	 ,REQUEST_ID
	 ,ORIG_SYSTEM_ID1
	 ,ORIG_SYSTEM_SOURCE_CODE
	 ,ORIG_SYSTEM_REFERENCE1
	 ,CREATED_BY
	 ,CREATION_DATE
	 ,LAST_UPDATED_BY
	 ,LAST_UPDATE_DATE
	 ,LAST_UPDATE_LOGIN
      )
     SELECT
    	  OksPMSLRecTab.OksPMSL_NewID(i)
	 ,OksPMSLRecTab.OksPMSL_NewCleID(i)
	 ,OksPMSLRecTab.OksPMSL_NewDnzChrID(i)
	 ,OksPMSLRecTab.OksPMSL_NewActivityLineID(i)
	 ,OksPMSLRecTab.OksPMSL_SEQUENCE_NUMBER(i)
	 ,OksPMSLRecTab.OksPMSL_NUMBER_OF_OCCURENCES(i)
	 ,OksPMSLRecTab.OksPMSL_START_DATE(i)
	 ,OksPMSLRecTab.OksPMSL_END_DATE(i)
	 ,OksPMSLRecTab.OksPMSL_FREQUENCY(i)
	 ,OksPMSLRecTab.OksPMSL_FREQUENCY_UOM(i)
	 ,OksPMSLRecTab.OksPMSL_OFFSET_DURATION(i)
	 ,OksPMSLRecTab.OksPMSL_OFFSET_UOM(i)
	 ,OksPMSLRecTab.OksPMSL_AUTOSCHEDULE_YN(i)
	 ,OksPMSLRecTab.OksPMSL_PROGRAM_APPLICATION_ID(i)
	 ,OksPMSLRecTab.OksPMSL_PROGRAM_ID(i)
	 ,OksPMSLRecTab.OksPMSL_PROGRAM_UPDATE_DATE(i)
	 ,OksPMSLRecTab.OksPMSL_OBJECT_VERSION_NUMBER(i)
	 ,OksPMSLRecTab.OksPMSL_SECURITY_GROUP_ID(i)
	 ,OksPMSLRecTab.OksPMSL_REQUEST_ID(i)
	 ,OksPMSLRecTab.OksPMSL_ORIG_SYSTEM_ID1(i)
	 ,OksPMSLRecTab.OksPMSL_ORIG_SYS_SOURCE_CODE(i)
	 ,OksPMSLRecTab.OksPMSL_ORIG_SYS_REFERENCE1(i)
         ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.LOGIN_ID
   FROM DUAL;

   IF (P_Partial_Copy_YN = 'N') then
    EXIT WHEN GetOksPMSLFull%NOTFOUND;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    EXIT WHEN GetOksPMSLPartial%NOTFOUND;
   End If;

  END LOOP;

  If (GetOksPMSLFull%ISOPEN) then
    CLOSE GetOksPMSLFull;
  Elsif (GetOksPMSLPartial%ISOPEN) then
    CLOSE GetOksPMSLPartial;
  End If;

        EXCEPTION
        WHEN OTHERS THEN
        If (GetOksPMSLFull%ISOPEN) then
          CLOSE GetOksPMSLFull;
        Elsif (GetOksPMSLPartial%ISOPEN) then
          CLOSE GetOksPMSLPartial;
        End IF;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_oks_pm_stream_levels;

-----------------------------------------------------------
--===================================================
--  copy_oks_pm_schedules
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

  PROCEDURE copy_oks_pm_schedules(P_From_Chr_ID IN NUMBER
                                  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
				  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_PM_SCHEDULES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 CURSOR GetOksPMSCHFull IS
 SELECT
   oksPMSCH.ID AS oksPMSCH_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMSCH_NewID --*
  ,oksPMSCH.RULE_ID AS oksPMSCH_RULE_ID
  ,1 AS oksPMSCH_OBJECT_VERSION_NUMBER
  ,oksPMSL.DNZ_CHR_ID AS oksPMSCH_NewDnzChrID --*
  ,oksPMSL.CLE_ID AS oksPMSCH_NewCleID --*
  ,oksPMSCH.SCH_SEQUENCE AS oksPMSCH_SCH_SEQUENCE
  ,oksPMSCH.SCHEDULE_DATE AS oksPMSCH_SCHEDULE_DATE
  ,oksPMSCH.SCHEDULE_DATE_FROM AS oksPMSCH_SCHEDULE_DATE_FROM
  ,oksPMSCH.SCHEDULE_DATE_TO AS oksPMSCH_SCHEDULE_DATE_TO
  ,oksPMSCH.PMA_RULE_ID AS oksPMSCH_PMA_RULE_ID
  ,oksPMSCH.PMP_RULE_ID AS oksPMSCH_PMP_RULE_ID
  ,oksPMSL.ACTIVITY_LINE_ID AS oksPMSCH_NewActivityLineID --*
  ,oksPMSL.ID AS oksPMSCH_NewStreamLineID --*
  ,oksPMSCH.SECURITY_GROUP_ID AS oksPMSCH_SECURITY_GROUP_ID
  ,oksPMSCH.PROGRAM_APPLICATION_ID AS oksPMSCH_PROG_APPLICATION_ID
  ,oksPMSCH.PROGRAM_ID AS oksPMSCH_PROGRAM_ID
  ,oksPMSCH.PROGRAM_UPDATE_DATE AS oksPMSCH_PROGRAM_UPDATE_DATE
  ,oksPMSCH.REQUEST_ID AS oksPMSCH_REQUEST_ID
 FROM
  OKS_PM_SCHEDULES oksPMSCH
 ,OKS_PM_STREAM_LEVELS oksPMSL
  WHERE
  oksPMSCH.STREAM_LINE_ID = oksPMSL.ORIG_SYSTEM_ID1
  AND oksPMSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksPMSCH.DNZ_CHR_ID = P_From_Chr_ID;

 CURSOR GetOksPMSCHPartial IS
 SELECT
   oksPMSCH.ID AS oksPMSCH_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksPMSCH_NewID --*
  ,oksPMSCH.RULE_ID AS oksPMSCH_RULE_ID
  ,1 AS oksPMSCH_OBJECT_VERSION_NUMBER
  ,oksPMSL.DNZ_CHR_ID AS oksPMSCH_NewDnzChrID --*
  ,oksPMSL.CLE_ID AS oksPMSCH_NewCleID --*
  ,oksPMSCH.SCH_SEQUENCE AS oksPMSCH_SCH_SEQUENCE
  ,oksPMSCH.SCHEDULE_DATE AS oksPMSCH_SCHEDULE_DATE
  ,oksPMSCH.SCHEDULE_DATE_FROM AS oksPMSCH_SCHEDULE_DATE_FROM
  ,oksPMSCH.SCHEDULE_DATE_TO AS oksPMSCH_SCHEDULE_DATE_TO
  ,oksPMSCH.PMA_RULE_ID AS oksPMSCH_PMA_RULE_ID
  ,oksPMSCH.PMP_RULE_ID AS oksPMSCH_PMP_RULE_ID
  ,oksPMSL.ACTIVITY_LINE_ID AS oksPMSCH_NewActivityLineID --*
  ,oksPMSL.ID AS oksPMSCH_NewStreamLineID --*
  ,oksPMSCH.SECURITY_GROUP_ID AS oksPMSCH_SECURITY_GROUP_ID
  ,oksPMSCH.PROGRAM_APPLICATION_ID AS oksPMSCH_PROG_APPLICATION_ID
  ,oksPMSCH.PROGRAM_ID AS oksPMSCH_PROGRAM_ID
  ,oksPMSCH.PROGRAM_UPDATE_DATE AS oksPMSCH_PROGRAM_UPDATE_DATE
  ,oksPMSCH.REQUEST_ID AS oksPMSCH_REQUEST_ID
 FROM
  OKS_PM_SCHEDULES oksPMSCH
 ,OKS_PM_STREAM_LEVELS oksPMSL
 ,OKC_K_LINES_B_TEMP okcBT
  WHERE
  oksPMSCH.STREAM_LINE_ID = oksPMSL.ORIG_SYSTEM_ID1
  AND oksPMSL.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
  AND oksPMSL.CLE_ID = okcBT.ID
  AND oksPMSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksPMSCH.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBT.DATES_CHANGED_YN = 'N'; --Added to handle Date Effectivity Fix. Do Bulk copy of oks_pm_schedules only for those lines whose dates
				    --havent been changed from that on the Source Line

 Begin
  x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksPMSCHFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   OPEN GetOksPMSCHPartial;
  End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
     FETCH GetOksPMSCHFull BULK COLLECT INTO
      OksPMSCHRecTab.OksPMSCH_OldID
     ,OksPMSCHRecTab.OksPMSCH_NewID
     ,OksPMSCHRecTab.OksPMSCH_RULE_ID
     ,OksPMSCHRecTab.OksPMSCH_OBJECT_VERSION_NUMBER
     ,OksPMSCHRecTab.OksPMSCH_NewDnzChrID
     ,OksPMSCHRecTab.OksPMSCH_NewCleID
     ,OksPMSCHRecTab.OksPMSCH_SCH_SEQUENCE
     ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE
     ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE_FROM
     ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE_TO
     ,OksPMSCHRecTab.OksPMSCH_PMA_RULE_ID
     ,OksPMSCHRecTab.OksPMSCH_PMP_RULE_ID
     ,OksPMSCHRecTab.OksPMSCH_NewActivityLineID
     ,OksPMSCHRecTab.OksPMSCH_NewStreamLineID
     ,OksPMSCHRecTab.OksPMSCH_SECURITY_GROUP_ID
     ,OksPMSCHRecTab.OksPMSCH_PROG_APPLICATION_ID
     ,OksPMSCHRecTab.OksPMSCH_PROGRAM_ID
     ,OksPMSCHRecTab.OksPMSCH_PROGRAM_UPDATE_DATE
     ,OksPMSCHRecTab.OksPMSCH_REQUEST_ID
     LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
     FETCH GetOksPMSCHPartial BULK COLLECT INTO
      OksPMSCHRecTab.OksPMSCH_OldID
     ,OksPMSCHRecTab.OksPMSCH_NewID
     ,OksPMSCHRecTab.OksPMSCH_RULE_ID
     ,OksPMSCHRecTab.OksPMSCH_OBJECT_VERSION_NUMBER
     ,OksPMSCHRecTab.OksPMSCH_NewDnzChrID
     ,OksPMSCHRecTab.OksPMSCH_NewCleID
     ,OksPMSCHRecTab.OksPMSCH_SCH_SEQUENCE
     ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE
     ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE_FROM
     ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE_TO
     ,OksPMSCHRecTab.OksPMSCH_PMA_RULE_ID
     ,OksPMSCHRecTab.OksPMSCH_PMP_RULE_ID
     ,OksPMSCHRecTab.OksPMSCH_NewActivityLineID
     ,OksPMSCHRecTab.OksPMSCH_NewStreamLineID
     ,OksPMSCHRecTab.OksPMSCH_SECURITY_GROUP_ID
     ,OksPMSCHRecTab.OksPMSCH_PROG_APPLICATION_ID
     ,OksPMSCHRecTab.OksPMSCH_PROGRAM_ID
     ,OksPMSCHRecTab.OksPMSCH_PROGRAM_UPDATE_DATE
     ,OksPMSCHRecTab.OksPMSCH_REQUEST_ID
     LIMIT G_BULK_FETCH_LIMIT;

   End If;

   FORALL i IN OksPMSCHRecTab.OksPMSCH_NewID.FIRST .. OksPMSCHRecTab.OksPMSCH_NewID.LAST
   INSERT INTO OKS_PM_SCHEDULES(
     ID
    ,RULE_ID
    ,OBJECT_VERSION_NUMBER
    ,DNZ_CHR_ID
    ,CLE_ID
    ,SCH_SEQUENCE
    ,SCHEDULE_DATE
    ,SCHEDULE_DATE_FROM
    ,SCHEDULE_DATE_TO
    ,PMA_RULE_ID
    ,PMP_RULE_ID
    ,ACTIVITY_LINE_ID
    ,STREAM_LINE_ID
    ,SECURITY_GROUP_ID
    ,PROGRAM_APPLICATION_ID
    ,PROGRAM_ID
    ,PROGRAM_UPDATE_DATE
    ,REQUEST_ID
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN
   )
  SELECT
     OksPMSCHRecTab.OksPMSCH_NewID(i)
    ,OksPMSCHRecTab.OksPMSCH_RULE_ID(i)
    ,OksPMSCHRecTab.OksPMSCH_OBJECT_VERSION_NUMBER(i)
    ,OksPMSCHRecTab.OksPMSCH_NewDnzChrID(i)
    ,OksPMSCHRecTab.OksPMSCH_NewCleID(i)
    ,OksPMSCHRecTab.OksPMSCH_SCH_SEQUENCE(i)
    ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE(i)
    ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE_FROM(i)
    ,OksPMSCHRecTab.OksPMSCH_SCHEDULE_DATE_TO(i)
    ,OksPMSCHRecTab.OksPMSCH_PMA_RULE_ID(i)
    ,OksPMSCHRecTab.OksPMSCH_PMP_RULE_ID(i)
    ,OksPMSCHRecTab.OksPMSCH_NewActivityLineID(i)
    ,OksPMSCHRecTab.OksPMSCH_NewStreamLineID(i)
    ,OksPMSCHRecTab.OksPMSCH_SECURITY_GROUP_ID(i)
    ,OksPMSCHRecTab.OksPMSCH_PROG_APPLICATION_ID(i)
    ,OksPMSCHRecTab.OksPMSCH_PROGRAM_ID(i)
    ,OksPMSCHRecTab.OksPMSCH_PROGRAM_UPDATE_DATE(i)
    ,OksPMSCHRecTab.OksPMSCH_REQUEST_ID(i)
    ,FND_GLOBAL.USER_ID
    ,SYSDATE
    ,FND_GLOBAL.USER_ID
    ,SYSDATE
    ,FND_GLOBAL.LOGIN_ID
   FROM DUAL;

   If (P_Partial_Copy_YN = 'N') then
     EXIT WHEN GetOksPMSCHFull%NOTFOUND;
   Elsif (P_Partial_Copy_YN = 'Y') then
     EXIT WHEN GetOksPMSCHPartial%NOTFOUND;
   End If;

  End LOOP;
  If (GetOksPMSCHFull%ISOPEN) then
    CLOSE GetOksPMSCHFull;
  Elsif (GetOksPMSCHPartial%ISOPEN) then
    CLOSE GetOksPMSCHPartial;
  End If;

 EXCEPTION
        WHEN OTHERS THEN
        If (GetOksPMSCHFull%ISOPEN) then
          CLOSE GetOksPMSCHFull;
	Elsif (GetOksPMSCHPartial%ISOPEN) then
          CLOSE GetOksPMSCHPartial;
        End IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_oks_pm_schedules;

-----------------------------------------------------------
--==============================================================
--Procedure copy_pm_for_SkippedLines: Used to create PM Stream levels and PM Schedules for those lines
--lines whose PM schedule related entities couldnt be bulk copied because their effective dates had to
--be changed.
--==============================================================
  Procedure copy_pm_for_SkippedLines(p_api_version           IN NUMBER
					,P_To_Chr_ID 		 IN NUMBER
        				,p_init_msg_list         IN VARCHAR2 DEFAULT OKC_API.G_FALSE
        				,x_return_status         OUT NOCOPY VARCHAR2
        				,x_msg_count             OUT NOCOPY NUMBER
        				,x_msg_data              OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'copy_pm_for_SkippedLines';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  CURSOR GetLinesWithDatesChanged IS
  SELECT
  a.ID as LINE_ID
  from
  OKC_K_LINES_B_TEMP a
  where a.DNZ_CHR_ID = P_To_Chr_ID
  and a.lse_id in (1,19)
  and a.DATES_CHANGED_YN = 'Y';

  TYPE lines_tbl_type IS TABLE OF GetLinesWithDatesChanged%ROWTYPE INDEX BY BINARY_INTEGER ;
  l_lines_tbl lines_tbl_type;

  --l_Target_Line_ID_WithDtsChngd NUMBER;

  Begin
        IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name
                        ,'Entered copy_pm_for_SkippedLines'
                         );
        END IF;

  OPEN GetLinesWithDatesChanged;
  LOOP
  FETCH GetLinesWithDatesChanged BULK COLLECT INTO l_lines_tbl LIMIT G_BULK_FETCH_LIMIT;
   IF (l_lines_tbl.COUNT > 0) then
    FOR i in l_lines_tbl.FIRST..l_lines_tbl.LAST LOOP
      Begin
         IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Target Line ID : '||l_lines_tbl(i).LINE_ID
                         );
         END IF;

        OKS_PM_PROGRAMS_PVT.RENEW_PM_PROGRAM_SCHEDULE(p_api_version => p_api_version
						     ,p_init_msg_list => p_init_msg_list
                                                     ,x_return_status => x_return_status
        					     ,x_msg_count => x_msg_count
        					     ,x_msg_data => x_msg_data
        					     ,p_contract_line_id => l_lines_tbl(i).LINE_ID);

            If (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
                IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Return status from OKS_PM_PROGRAMS_PVT.RENEW_PM_PROGRAM_SCHEDULE : x_return_status ='||x_return_status
                         );
                END IF;
              RETURN;
            End If;

            EXCEPTION
            WHEN OTHERS THEN
                IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.EXCEPTION'
                        ,'Exception in call to OKS_PM_PROGRAMS_PVT.RENEW_PM_PROGRAM_SCHEDULE, x_return_status ='||x_return_status
                         ||'SQLERRM ='||SQLERRM
                         );
                END IF;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
            FND_MSG_PUB.add_exc_msg(g_pkg_name, 'OKS_PM_PROGRAMS_PVT.RENEW_PM_PROGRAM_SCHEDULE', substr(SQLERRM,1,240));
            RAISE;
      End;
    END LOOP; --End LOOP for looping through l_lines_tbl rows
   END IF; --End of If check for l_lines_tbl.COUNT > 0

  EXIT WHEN GetLinesWithDatesChanged%NOTFOUND;
  END LOOP; --End LOOP for bulk fetch from GetLinesWithDatesChanged cursor
   If GetLinesWithDatesChanged%ISOPEN then
     CLOSE GetLinesWithDatesChanged;
   End If;

     EXCEPTION
        WHEN OTHERS THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          If GetLinesWithDatesChanged%ISOPEN then
           CLOSE GetLinesWithDatesChanged;
          End If;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;
  End copy_pm_for_SkippedLines;
--===================================================
--  copy_oks_pm_action_time_types
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

 PROCEDURE copy_oks_action_time_types(P_From_Chr_ID IN NUMBER
                                  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
				  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_ACTION_TIME_TYPES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOksATTFull IS
 SELECT
   oksATT.ID AS oksATT_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksATT_NewID --*
  ,okcB.ID AS oksATT_NewCleID--*
  ,okcB.DNZ_CHR_ID AS oksATT_NewDnzChrID--*
  ,oksATT.ACTION_TYPE_CODE AS oksATT_ACTION_TYPE_CODE
  ,oksATT.SECURITY_GROUP_ID AS oksATT_SECURITY_GROUP_ID
  ,oksATT.PROGRAM_APPLICATION_ID AS oksATT_PROGRAM_APPLICATION_ID
  ,oksATT.PROGRAM_ID AS oksATT_PROGRAM_ID
  ,oksATT.PROGRAM_UPDATE_DATE AS oksATT_PROGRAM_UPDATE_DATE
  ,oksATT.REQUEST_ID AS oksATT_REQUEST_ID
  ,1 AS oksATT_OBJECT_VERSION_NUMBER
  ,oksATT.ID AS oksATT_ORIG_SYSTEM_ID1--*
  ,NULL AS oksATT_ORIG_SYSTEM_SOURCE_CODE--*
  ,'COPY' AS oksATT_ORIG_SYSTEM_REFERENCE1--*
 FROM
  OKS_ACTION_TIME_TYPES oksATT
 ,OKC_K_LINES_B okcB
 WHERE oksATT.CLE_ID = okcB.ORIG_SYSTEM_ID1
 AND okcB.DNZ_CHR_ID = P_To_Chr_ID
 AND oksATT.DNZ_CHR_ID = P_From_Chr_ID;

 CURSOR GetOksATTPartial IS
 SELECT
   oksATT.ID AS oksATT_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksATT_NewID --*
  ,okcBT.ID AS oksATT_NewCleID--*
  ,okcBT.DNZ_CHR_ID AS oksATT_NewDnzChrID--*
  ,oksATT.ACTION_TYPE_CODE AS oksATT_ACTION_TYPE_CODE
  ,oksATT.SECURITY_GROUP_ID AS oksATT_SECURITY_GROUP_ID
  ,oksATT.PROGRAM_APPLICATION_ID AS oksATT_PROGRAM_APPLICATION_ID
  ,oksATT.PROGRAM_ID AS oksATT_PROGRAM_ID
  ,oksATT.PROGRAM_UPDATE_DATE AS oksATT_PROGRAM_UPDATE_DATE
  ,oksATT.REQUEST_ID AS oksATT_REQUEST_ID
  ,1 AS oksATT_OBJECT_VERSION_NUMBER
  ,oksATT.ID AS oksATT_ORIG_SYSTEM_ID1--*
  ,NULL AS oksATT_ORIG_SYSTEM_SOURCE_CODE--*
  ,'COPY' AS oksATT_ORIG_SYSTEM_REFERENCE1--*
 FROM
  OKS_ACTION_TIME_TYPES oksATT
 ,OKC_K_LINES_B_TEMP okcBT
 WHERE oksATT.CLE_ID = okcBT.ORIG_SYSTEM_ID1
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
 AND oksATT.DNZ_CHR_ID = P_From_Chr_ID;

 Begin
  x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
    OPEN GetOksATTFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    OPEN GetOksATTPartial;
  End If;
  LOOP
   If (P_Partial_Copy_YN = 'N') then
    FETCH GetOksATTFull BULK COLLECT INTO
          OksATTRecTab.OksATT_OldID
         ,OksATTRecTab.OksATT_NewID
	 ,OksATTRecTab.OksATT_NewCleID
	 ,OksATTRecTab.OksATT_NewDnzChrID
	 ,OksATTRecTab.OksATT_ACTION_TYPE_CODE
	 ,OksATTRecTab.OksATT_SECURITY_GROUP_ID
	 ,OksATTRecTab.OksATT_PROGRAM_APPLICATION_ID
	 ,OksATTRecTab.OksATT_PROGRAM_ID
	 ,OksATTRecTab.OksATT_PROGRAM_UPDATE_DATE
	 ,OksATTRecTab.OksATT_REQUEST_ID
	 ,OksATTRecTab.OksATT_OBJECT_VERSION_NUMBER
	 ,OksATTRecTab.OksATT_ORIG_SYSTEM_ID1
	 ,OksATTRecTab.OksATT_ORIG_SYSTEM_SOURCE_CODE
	 ,OksATTRecTab.OksATT_ORIG_SYSTEM_REFERENCE1
      LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    FETCH GetOksATTPartial BULK COLLECT INTO
          OksATTRecTab.OksATT_OldID
         ,OksATTRecTab.OksATT_NewID
         ,OksATTRecTab.OksATT_NewCleID
         ,OksATTRecTab.OksATT_NewDnzChrID
         ,OksATTRecTab.OksATT_ACTION_TYPE_CODE
         ,OksATTRecTab.OksATT_SECURITY_GROUP_ID
         ,OksATTRecTab.OksATT_PROGRAM_APPLICATION_ID
         ,OksATTRecTab.OksATT_PROGRAM_ID
         ,OksATTRecTab.OksATT_PROGRAM_UPDATE_DATE
         ,OksATTRecTab.OksATT_REQUEST_ID
         ,OksATTRecTab.OksATT_OBJECT_VERSION_NUMBER
         ,OksATTRecTab.OksATT_ORIG_SYSTEM_ID1
         ,OksATTRecTab.OksATT_ORIG_SYSTEM_SOURCE_CODE
         ,OksATTRecTab.OksATT_ORIG_SYSTEM_REFERENCE1
      LIMIT G_BULK_FETCH_LIMIT;

   End If;

   FORALL i IN OksATTRecTab.OksATT_NewID.FIRST .. OksATTRecTab.OksATT_NewID.LAST
   INSERT INTO OKS_ACTION_TIME_TYPES(
	  ID
	 ,CLE_ID
	 ,DNZ_CHR_ID
	 ,ACTION_TYPE_CODE
	 ,SECURITY_GROUP_ID
	 ,PROGRAM_APPLICATION_ID
	 ,PROGRAM_ID
	 ,PROGRAM_UPDATE_DATE
	 ,REQUEST_ID
	 ,OBJECT_VERSION_NUMBER
	 ,ORIG_SYSTEM_ID1
	 ,ORIG_SYSTEM_SOURCE_CODE
	 ,ORIG_SYSTEM_REFERENCE1
	 ,CREATED_BY
	 ,CREATION_DATE
	 ,LAST_UPDATED_BY
	 ,LAST_UPDATE_DATE
	 ,LAST_UPDATE_LOGIN
   )
   SELECT
          OksATTRecTab.OksATT_NewID(i)
	 ,OksATTRecTab.OksATT_NewCleID(i)
	 ,OksATTRecTab.OksATT_NewDnzChrID(i)
	 ,OksATTRecTab.OksATT_ACTION_TYPE_CODE(i)
	 ,OksATTRecTab.OksATT_SECURITY_GROUP_ID(i)
	 ,OksATTRecTab.OksATT_PROGRAM_APPLICATION_ID(i)
	 ,OksATTRecTab.OksATT_PROGRAM_ID(i)
	 ,OksATTRecTab.OksATT_PROGRAM_UPDATE_DATE(i)
	 ,OksATTRecTab.OksATT_REQUEST_ID(i)
	 ,OksATTRecTab.OksATT_OBJECT_VERSION_NUMBER(i)
	 ,OksATTRecTab.OksATT_ORIG_SYSTEM_ID1(i)
	 ,OksATTRecTab.OksATT_ORIG_SYSTEM_SOURCE_CODE(i)
	 ,OksATTRecTab.OksATT_ORIG_SYSTEM_REFERENCE1(i)
         ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.USER_ID
	 ,SYSDATE
	 ,FND_GLOBAL.LOGIN_ID
   FROM DUAL;

   If (P_Partial_Copy_YN = 'N') then
    EXIT WHEN GetOksATTFull%NOTFOUND;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    EXIT WHEN GetOksATTPartial%NOTFOUND;
   End If;

  END LOOP;

  If (GetOksATTFull%ISOPEN) then
    CLOSE GetOksATTFull;
  Elsif (GetOksATTPartial%ISOPEN) then
    CLOSE GetOksATTPartial;
  End If;
	EXCEPTION
       	  WHEN OTHERS THEN
	   If (GetOksATTFull%ISOPEN) then
	     CLOSE GetOksATTFull;
	   Elsif (GetOksATTPartial%ISOPEN) then
             CLOSE GetOksATTPartial;
       	   End IF;

           x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_oks_action_time_types;

-----------------------------------------------------
--===================================================
--  copy_oks_pm_action_times
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

 PROCEDURE copy_oks_action_times(P_From_Chr_ID IN NUMBER
                                ,P_To_Chr_ID   IN NUMBER
                                ,P_Partial_Copy_YN IN VARCHAR2
				,P_Lines_Count IN NUMBER DEFAULT 0
                                ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_ACTION_TIMES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOksATFull IS
 SELECT
  oksAT.ID AS oksAT_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksAT_NewID --*
 ,oksATT.ID AS oksAT_NewCovActionTypeID
 ,oksATT.CLE_ID AS oksAT_NewCleID
 ,oksATT.DNZ_CHR_ID AS oksAT_NewDnzChrID
 ,oksAT.UOM_CODE AS oksAT_UOM_CODE
 ,oksAT.SUN_DURATION AS oksAT_SUN_DURATION
 ,oksAT.MON_DURATION AS oksAT_MON_DURATION
 ,oksAT.TUE_DURATION AS oksAT_TUE_DURATION
 ,oksAT.WED_DURATION AS oksAT_WED_DURATION
 ,oksAT.THU_DURATION AS oksAT_THU_DURATION
 ,oksAT.FRI_DURATION AS oksAT_FRI_DURATION
 ,oksAT.SAT_DURATION AS oksAT_SAT_DURATION
 ,oksAT.SECURITY_GROUP_ID AS oksAT_SECURITY_GROUP_ID
 ,oksAT.PROGRAM_APPLICATION_ID AS oksAT_PROGRAM_APPLICATION_ID
 ,oksAT.PROGRAM_ID AS oksAT_PROGRAM_ID
 ,oksAT.PROGRAM_UPDATE_DATE AS oksAT_PROGRAM_UPDATE_DATE
 ,oksAT.REQUEST_ID AS oksAT_REQUEST_ID
 ,1 AS oksAT_OBJECT_VERSION_NUMBER
 FROM
  OKS_ACTION_TIMES oksAT
 ,OKS_ACTION_TIME_TYPES oksATT
 WHERE oksAT.COV_ACTION_TYPE_ID = oksATT.ORIG_SYSTEM_ID1
 AND oksATT.DNZ_CHR_ID = P_To_Chr_ID
 AND oksAT.DNZ_CHR_ID = P_From_Chr_ID;


  CURSOR GetOksATPartial IS
  SELECT
  oksAT.ID AS oksAT_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksAT_NewID --*
 ,oksATT.ID AS oksAT_NewCovActionTypeID
 ,oksATT.CLE_ID AS oksAT_NewCleID
 ,oksATT.DNZ_CHR_ID AS oksAT_NewDnzChrID
 ,oksAT.UOM_CODE AS oksAT_UOM_CODE
 ,oksAT.SUN_DURATION AS oksAT_SUN_DURATION
 ,oksAT.MON_DURATION AS oksAT_MON_DURATION
 ,oksAT.TUE_DURATION AS oksAT_TUE_DURATION
 ,oksAT.WED_DURATION AS oksAT_WED_DURATION
 ,oksAT.THU_DURATION AS oksAT_THU_DURATION
 ,oksAT.FRI_DURATION AS oksAT_FRI_DURATION
 ,oksAT.SAT_DURATION AS oksAT_SAT_DURATION
 ,oksAT.SECURITY_GROUP_ID AS oksAT_SECURITY_GROUP_ID
 ,oksAT.PROGRAM_APPLICATION_ID AS oksAT_PROGRAM_APPLICATION_ID
 ,oksAT.PROGRAM_ID AS oksAT_PROGRAM_ID
 ,oksAT.PROGRAM_UPDATE_DATE AS oksAT_PROGRAM_UPDATE_DATE
 ,oksAT.REQUEST_ID AS oksAT_REQUEST_ID
 ,1 AS oksAT_OBJECT_VERSION_NUMBER
 FROM
  OKS_ACTION_TIMES oksAT
 ,OKS_ACTION_TIME_TYPES oksATT
 ,OKC_K_LINES_B_TEMP okcBT
 WHERE oksAT.COV_ACTION_TYPE_ID = oksATT.ORIG_SYSTEM_ID1
 AND oksATT.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
 AND oksATT.CLE_ID = okcBT.ID
 AND oksATT.DNZ_CHR_ID = P_To_Chr_ID
 AND oksAT.DNZ_CHR_ID = P_From_Chr_ID;

 Begin
 x_return_status := l_return_status;

 If (P_Partial_Copy_YN = 'N') then
  OPEN GetOksATFull;
 Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
  OPEN GetOksATPartial;
 End If;

 LOOP
  If (P_Partial_Copy_YN = 'N') then
    FETCH GetOksATFull BULK COLLECT INTO
          OksATRecTab.OksAT_OldID
         ,OksATRecTab.OksAT_NewID
	 ,OksATRecTab.OksAT_NewCovActionTypeID
	 ,OksATRecTab.OksAT_NewCleID
	 ,OksATRecTab.OksAT_NewDnzChrID
	 ,OksATRecTab.OksAT_UOM_CODE
	 ,OksATRecTab.OksAT_SUN_DURATION
	 ,OksATRecTab.OksAT_MON_DURATION
	 ,OksATRecTab.OksAT_TUE_DURATION
	 ,OksATRecTab.OksAT_WED_DURATION
	 ,OksATRecTab.OksAT_THU_DURATION
	 ,OksATRecTab.OksAT_FRI_DURATION
	 ,OksATRecTab.OksAT_SAT_DURATION
	 ,OksATRecTab.OksAT_SECURITY_GROUP_ID
	 ,OksATRecTab.OksAT_PROGRAM_APPLICATION_ID
	 ,OksATRecTab.OksAT_PROGRAM_ID
	 ,OksATRecTab.OksAT_PROGRAM_UPDATE_DATE
	 ,OksATRecTab.OksAT_REQUEST_ID
	 ,OksATRecTab.OksAT_OBJECT_VERSION_NUMBER
         LIMIT G_BULK_FETCH_LIMIT;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    FETCH GetOksATPartial BULK COLLECT INTO
          OksATRecTab.OksAT_OldID
         ,OksATRecTab.OksAT_NewID
         ,OksATRecTab.OksAT_NewCovActionTypeID
         ,OksATRecTab.OksAT_NewCleID
         ,OksATRecTab.OksAT_NewDnzChrID
         ,OksATRecTab.OksAT_UOM_CODE
         ,OksATRecTab.OksAT_SUN_DURATION
         ,OksATRecTab.OksAT_MON_DURATION
         ,OksATRecTab.OksAT_TUE_DURATION
         ,OksATRecTab.OksAT_WED_DURATION
         ,OksATRecTab.OksAT_THU_DURATION
         ,OksATRecTab.OksAT_FRI_DURATION
         ,OksATRecTab.OksAT_SAT_DURATION
         ,OksATRecTab.OksAT_SECURITY_GROUP_ID
         ,OksATRecTab.OksAT_PROGRAM_APPLICATION_ID
         ,OksATRecTab.OksAT_PROGRAM_ID
         ,OksATRecTab.OksAT_PROGRAM_UPDATE_DATE
         ,OksATRecTab.OksAT_REQUEST_ID
         ,OksATRecTab.OksAT_OBJECT_VERSION_NUMBER
         LIMIT G_BULK_FETCH_LIMIT;

  End If;

  FORALL i IN OksATRecTab.OksAT_NewID.FIRST .. OksATRecTab.OksAT_NewID.LAST
  INSERT INTO OKS_ACTION_TIMES (
          ID
	 ,COV_ACTION_TYPE_ID
	 ,CLE_ID
	 ,DNZ_CHR_ID
	 ,UOM_CODE
	 ,SUN_DURATION
	 ,MON_DURATION
	 ,TUE_DURATION
	 ,WED_DURATION
	 ,THU_DURATION
	 ,FRI_DURATION
	 ,SAT_DURATION
	 ,SECURITY_GROUP_ID
	 ,PROGRAM_APPLICATION_ID
	 ,PROGRAM_ID
	 ,PROGRAM_UPDATE_DATE
	 ,REQUEST_ID
	 ,OBJECT_VERSION_NUMBER
	 ,CREATED_BY
	 , CREATION_DATE
	 ,LAST_UPDATED_BY
	 ,LAST_UPDATE_DATE
	 ,LAST_UPDATE_LOGIN
       )
  SELECT
    OksATRecTab.OksAT_NewID(i)
   ,OksATRecTab.OksAT_NewCovActionTypeID(i)
   ,OksATRecTab.OksAT_NewCleID(i)
   ,OksATRecTab.OksAT_NewDnzChrID(i)
   ,OksATRecTab.OksAT_UOM_CODE(i)
   ,OksATRecTab.OksAT_SUN_DURATION(i)
   ,OksATRecTab.OksAT_MON_DURATION(i)
   ,OksATRecTab.OksAT_TUE_DURATION(i)
   ,OksATRecTab.OksAT_WED_DURATION(i)
   ,OksATRecTab.OksAT_THU_DURATION(i)
   ,OksATRecTab.OksAT_FRI_DURATION(i)
   ,OksATRecTab.OksAT_SAT_DURATION(i)
   ,OksATRecTab.OksAT_SECURITY_GROUP_ID(i)
   ,OksATRecTab.OksAT_PROGRAM_APPLICATION_ID(i)
   ,OksATRecTab.OksAT_PROGRAM_ID(i)
   ,OksATRecTab.OksAT_PROGRAM_UPDATE_DATE(i)
   ,OksATRecTab.OksAT_REQUEST_ID(i)
   ,OksATRecTab.OksAT_OBJECT_VERSION_NUMBER(i)
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.LOGIN_ID
  FROM DUAL;

  If (P_Partial_Copy_YN = 'N') then
   EXIT WHEN GetOksATFull%NOTFOUND;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   EXIT WHEN GetOksATPartial%NOTFOUND;
  End If;

 END LOOP;
 If (GetOksATFull%ISOPEN) then
    CLOSE GetOksATFull;
 Elsif (GetOksATPartial%ISOPEN) then
    CLOSE GetOksATPartial;
 End If;

        EXCEPTION
          WHEN OTHERS THEN
           If (GetOksATFull%ISOPEN) then
             CLOSE GetOksATFull;
	   Elsif (GetOksATPartial%ISOPEN) then
	     CLOSE GetOksATPartial;
           End IF;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_oks_action_times;

--------------------------------------------------------
--===================================================
--  copy_oks_k_sales_credits
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--            If (P_Partial_Copy_YN = 'N') rows for both Header and Lines are copied (Full Contract copy)
--               use cursor GetOksSCFull
--            If (P_Partial_Copy_YN = 'Y') then
--              If (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT = 0) then
--                Only rows for only Header , use cursor GetOksSCPartial_H
--              Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT > 0) then
--                Both rows for both Header and Lines need to be copied, use cursor GetOksSCPartial_HNL
--              Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Tbl.COUNT > 0) then
--                Only rows for chosen Lines are copied, use cursor GetOksSCPartial_L
--              Elsif (P_Target_Contract_New_YN = 'N') and P_Lines_Tbl.COUNT = 0) then
--                nothing needs to be copied, no copy needed
--              End If
--            End If

--====================================================
 PROCEDURE copy_oks_k_sales_credits(P_From_Chr_ID IN NUMBER
                                 ,P_To_Chr_ID   IN NUMBER
                                 ,P_Partial_Copy_YN IN VARCHAR2
                                 ,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
                                 ,P_Lines_Count IN NUMBER DEFAULT 0
                                 ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_SALES_CREDITS';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOksSCFull IS
 SELECT
  oksSC.ID AS oksSC_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSC_NewID
 ,oksSC.PERCENT AS oksSC_PERCENT
 ,okcH.ID AS oksSC_NewChrID
 ,NULL AS oksSC_NewCleID
 ,oksSC.CTC_ID AS oksSC_CTC_ID
 ,oksSC.SALES_CREDIT_TYPE_ID1 AS oksSC_SALES_CREDIT_TYPE_ID1
 ,oksSC.SALES_CREDIT_TYPE_ID2 AS oksSC_SALES_CREDIT_TYPE_ID2
 ,1 AS oksSC_OBJECT_VERSION_NUMBER
 ,oksSC.SECURITY_GROUP_ID AS oksSC_SECURITY_GROUP_ID
 ,oksSC.SALES_GROUP_ID AS oksSC_SALES_GROUP_ID
 FROM
   OKS_K_SALES_CREDITS oksSC
  ,OKC_K_HEADERS_B okcH
 WHERE oksSC.CHR_ID = okcH.ORIG_SYSTEM_ID1
 AND oksSC.CLE_ID IS NULL
 AND okcH.ID = P_To_Chr_ID
 AND oksSC.CHR_ID = P_From_Chr_ID
 UNION
 SELECT
  oksSC.ID AS oksSC_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSC_NewID
 ,oksSC.PERCENT AS oksSC_PERCENT
 ,okcB.DNZ_CHR_ID AS oksSC_NewChrID
 ,okcB.ID AS oksSC_NewCleID
 ,oksSC.CTC_ID AS oksSC_CTC_ID
 ,oksSC.SALES_CREDIT_TYPE_ID1 AS oksSC_SALES_CREDIT_TYPE_ID1
 ,oksSC.SALES_CREDIT_TYPE_ID2 AS oksSC_SALES_CREDIT_TYPE_ID2
 ,1 AS oksSC_OBJECT_VERSION_NUMBER
 ,oksSC.SECURITY_GROUP_ID AS oksSC_SECURITY_GROUP_ID
 ,oksSC.SALES_GROUP_ID AS oksSC_SALES_GROUP_ID
 FROM
  OKS_K_SALES_CREDITS oksSC
 ,OKC_K_LINES_B okcB
 WHERE oksSC.CLE_ID = okcB.ORIG_SYSTEM_ID1
 AND okcB.DNZ_CHR_ID = P_To_Chr_ID
 AND oksSC.CHR_ID = P_From_Chr_ID;

 CURSOR GetOksSCPartial_H IS
 SELECT
  oksSC.ID AS oksSC_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSC_NewID
 ,oksSC.PERCENT AS oksSC_PERCENT
 ,okcH.ID AS oksSC_NewChrID
 ,NULL AS oksSC_NewCleID
 ,oksSC.CTC_ID AS oksSC_CTC_ID
 ,oksSC.SALES_CREDIT_TYPE_ID1 AS oksSC_SALES_CREDIT_TYPE_ID1
 ,oksSC.SALES_CREDIT_TYPE_ID2 AS oksSC_SALES_CREDIT_TYPE_ID2
 ,1 AS oksSC_OBJECT_VERSION_NUMBER
 ,oksSC.SECURITY_GROUP_ID AS oksSC_SECURITY_GROUP_ID
 ,oksSC.SALES_GROUP_ID AS oksSC_SALES_GROUP_ID
 FROM
   OKS_K_SALES_CREDITS oksSC
  ,OKC_K_HEADERS_B okcH
 WHERE oksSC.CHR_ID = okcH.ORIG_SYSTEM_ID1
 AND oksSC.CLE_ID IS NULL
 AND okcH.ID = P_To_Chr_ID
 AND oksSC.CHR_ID = P_From_Chr_ID;

 CURSOR GetOksSCPartial_L IS
 SELECT
  oksSC.ID AS oksSC_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSC_NewID
 ,oksSC.PERCENT AS oksSC_PERCENT
 ,okcBT.DNZ_CHR_ID AS oksSC_NewChrID
 ,okcBT.ID AS oksSC_NewCleID
 ,oksSC.CTC_ID AS oksSC_CTC_ID
 ,oksSC.SALES_CREDIT_TYPE_ID1 AS oksSC_SALES_CREDIT_TYPE_ID1
 ,oksSC.SALES_CREDIT_TYPE_ID2 AS oksSC_SALES_CREDIT_TYPE_ID2
 ,1 AS oksSC_OBJECT_VERSION_NUMBER
 ,oksSC.SECURITY_GROUP_ID AS oksSC_SECURITY_GROUP_ID
 ,oksSC.SALES_GROUP_ID AS oksSC_SALES_GROUP_ID
 FROM
   OKS_K_SALES_CREDITS oksSC
  ,OKC_K_LINES_B_TEMP okcBT
 WHERE
     oksSC.CLE_ID = okcBT.ORIG_SYSTEM_ID1
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
 AND oksSC.CHR_ID = P_From_Chr_ID;

 CURSOR GetOksSCPartial_HNL IS
  SELECT
  oksSC.ID AS oksSC_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSC_NewID
 ,oksSC.PERCENT AS oksSC_PERCENT
 ,okcH.ID AS oksSC_NewChrID
 ,NULL AS oksSC_NewCleID
 ,oksSC.CTC_ID AS oksSC_CTC_ID
 ,oksSC.SALES_CREDIT_TYPE_ID1 AS oksSC_SALES_CREDIT_TYPE_ID1
 ,oksSC.SALES_CREDIT_TYPE_ID2 AS oksSC_SALES_CREDIT_TYPE_ID2
 ,1 AS oksSC_OBJECT_VERSION_NUMBER
 ,oksSC.SECURITY_GROUP_ID AS oksSC_SECURITY_GROUP_ID
 ,oksSC.SALES_GROUP_ID AS oksSC_SALES_GROUP_ID
 FROM
   OKS_K_SALES_CREDITS oksSC
  ,OKC_K_HEADERS_B okcH
 WHERE oksSC.CHR_ID = okcH.ORIG_SYSTEM_ID1
 AND oksSC.CLE_ID IS NULL
 AND okcH.ID = P_To_Chr_ID
 AND oksSC.CHR_ID = P_From_Chr_ID
 UNION
  SELECT
  oksSC.ID AS oksSC_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSC_NewID
 ,oksSC.PERCENT AS oksSC_PERCENT
 ,okcBT.DNZ_CHR_ID AS oksSC_NewChrID
 ,okcBT.ID AS oksSC_NewCleID
 ,oksSC.CTC_ID AS oksSC_CTC_ID
 ,oksSC.SALES_CREDIT_TYPE_ID1 AS oksSC_SALES_CREDIT_TYPE_ID1
 ,oksSC.SALES_CREDIT_TYPE_ID2 AS oksSC_SALES_CREDIT_TYPE_ID2
 ,1 AS oksSC_OBJECT_VERSION_NUMBER
 ,oksSC.SECURITY_GROUP_ID AS oksSC_SECURITY_GROUP_ID
 ,oksSC.SALES_GROUP_ID AS oksSC_SALES_GROUP_ID
 FROM
   OKS_K_SALES_CREDITS oksSC
  ,OKC_K_LINES_B_TEMP okcBT
 WHERE
     oksSC.CLE_ID = okcBT.ORIG_SYSTEM_ID1
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
 AND oksSC.CHR_ID = P_From_Chr_ID;

 Begin
  x_return_status := l_return_status;

  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksSCFull;
  Elsif (P_Partial_Copy_YN = 'Y') then
   If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
    OPEN GetOksSCPartial_H;
   Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
    OPEN GetOksSCPartial_HNL;
   Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
    OPEN GetOksSCPartial_L;
   ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count = 0) THEN
    RETURN;
   End If;
  End If;

  LOOP
   IF (P_Partial_Copy_YN = 'N') then
    FETCH GetOksSCFull BULK COLLECT INTO
     OksSCRecTab.OksSC_OldID
    ,OksSCRecTab.OksSC_NewID
    ,OksSCRecTab.OksSC_PERCENT
    ,OksSCRecTab.OksSC_NewChrID
    ,OksSCRecTab.OksSC_NewCleID
    ,OksSCRecTab.OksSC_CTC_ID
    ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID1
    ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID2
    ,OksSCRecTab.OksSC_OBJECT_VERSION_NUMBER
    ,OksSCRecTab.OksSC_SECURITY_GROUP_ID
    ,OksSCRecTab.OksSC_SALES_GROUP_ID
    LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y') then
    If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
     FETCH GetOksSCPartial_H BULK COLLECT INTO
      OksSCRecTab.OksSC_OldID
     ,OksSCRecTab.OksSC_NewID
     ,OksSCRecTab.OksSC_PERCENT
     ,OksSCRecTab.OksSC_NewChrID
     ,OksSCRecTab.OksSC_NewCleID
     ,OksSCRecTab.OksSC_CTC_ID
     ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID1
     ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID2
     ,OksSCRecTab.OksSC_OBJECT_VERSION_NUMBER
     ,OksSCRecTab.OksSC_SECURITY_GROUP_ID
     ,OksSCRecTab.OksSC_SALES_GROUP_ID
     LIMIT G_BULK_FETCH_LIMIT;
    Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
     FETCH GetOksSCPartial_HNL BULK COLLECT INTO
      OksSCRecTab.OksSC_OldID
     ,OksSCRecTab.OksSC_NewID
     ,OksSCRecTab.OksSC_PERCENT
     ,OksSCRecTab.OksSC_NewChrID
     ,OksSCRecTab.OksSC_NewCleID
     ,OksSCRecTab.OksSC_CTC_ID
     ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID1
     ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID2
     ,OksSCRecTab.OksSC_OBJECT_VERSION_NUMBER
     ,OksSCRecTab.OksSC_SECURITY_GROUP_ID
     ,OksSCRecTab.OksSC_SALES_GROUP_ID
    LIMIT G_BULK_FETCH_LIMIT;

    Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
     FETCH GetOksSCPartial_L BULK COLLECT INTO
      OksSCRecTab.OksSC_OldID
     ,OksSCRecTab.OksSC_NewID
     ,OksSCRecTab.OksSC_PERCENT
     ,OksSCRecTab.OksSC_NewChrID
     ,OksSCRecTab.OksSC_NewCleID
     ,OksSCRecTab.OksSC_CTC_ID
     ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID1
     ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID2
     ,OksSCRecTab.OksSC_OBJECT_VERSION_NUMBER
     ,OksSCRecTab.OksSC_SECURITY_GROUP_ID
     ,OksSCRecTab.OksSC_SALES_GROUP_ID
    LIMIT G_BULK_FETCH_LIMIT;
    End If;
   End If;

   FORALL i IN OksSCRecTab.OksSC_NewID.FIRST .. OksSCRecTab.OksSC_NewID.LAST
   INSERT INTO OKS_K_SALES_CREDITS(
    ID
   ,PERCENT
   ,CHR_ID
   ,CLE_ID
   ,CTC_ID
   ,SALES_CREDIT_TYPE_ID1
   ,SALES_CREDIT_TYPE_ID2
   ,OBJECT_VERSION_NUMBER
   ,SECURITY_GROUP_ID
   ,SALES_GROUP_ID
   ,CREATED_BY
   ,CREATION_DATE
   ,LAST_UPDATED_BY
   ,LAST_UPDATE_DATE
   )
   SELECT
    OksSCRecTab.OksSC_NewID(i)
   ,OksSCRecTab.OksSC_PERCENT(i)
   ,OksSCRecTab.OksSC_NewChrID(i)
   ,OksSCRecTab.OksSC_NewCleID(i)
   ,OksSCRecTab.OksSC_CTC_ID(i)
   ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID1(i)
   ,OksSCRecTab.OksSC_SALES_CREDIT_TYPE_ID2(i)
   ,OksSCRecTab.OksSC_OBJECT_VERSION_NUMBER(i)
   ,OksSCRecTab.OksSC_SECURITY_GROUP_ID(i)
   ,OksSCRecTab.OksSC_SALES_GROUP_ID(i)
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   FROM DUAL;

   If (P_Partial_Copy_YN = 'N') then
    EXIT WHEN GetOksSCFull%NOTFOUND;
   Elsif (P_Partial_Copy_YN = 'Y') then
    If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
     EXIT WHEN GetOksSCPartial_H%NOTFOUND;
    Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
     EXIT WHEN GetOksSCPartial_HNL%NOTFOUND;
    Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
     EXIT WHEN GetOksSCPartial_L%NOTFOUND;
    End If;
   End If;

  END LOOP;

   If GetOksSCFull%ISOPEN then
    CLOSE GetOksSCFull;
   Elsif GetOksSCPartial_H%ISOPEN then
    CLOSE GetOksSCPartial_H;
   Elsif GetOksSCPartial_HNL%ISOPEN then
    CLOSE GetOksSCPartial_HNL;
   Elsif GetOksSCPartial_L%ISOPEN then
    CLOSE GetOksSCPartial_L;
   End If;

  EXCEPTION
          WHEN OTHERS THEN
	   If GetOksSCFull%ISOPEN then
	    CLOSE GetOksSCFull;
  	   Elsif GetOksSCPartial_H%ISOPEN then
   	    CLOSE GetOksSCPartial_H;
  	   Elsif GetOksSCPartial_HNL%ISOPEN then
   	    CLOSE GetOksSCPartial_HNL;
  	   Elsif GetOksSCPartial_L%ISOPEN then
   	    CLOSE GetOksSCPartial_L;
   	   End If;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

End copy_oks_k_sales_credits;

------------------------------------------------------------
--===================================================
--  copy_oks_billrate_schedules
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--====================================================

PROCEDURE copy_oks_billrate_schedules(P_From_Chr_ID IN NUMBER
                                     ,P_To_Chr_ID   IN NUMBER
                                     ,P_Partial_Copy_YN IN VARCHAR2
				     ,P_Lines_Count IN NUMBER DEFAULT 0
                                     ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_BILLRATE_SCHEDULES';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOksBSCHFull IS
 SELECT
  oksBSCH.ID AS oksBSCH_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksBSCH_NewID
 ,okcB.ID AS oksBSCH_NewCleID
 ,okcB.CLE_ID AS oksBSCH_NewBTCleID
 ,okcB.DNZ_CHR_ID AS oksBSCH_NewDnzChrID
 ,oksBSCH.START_HOUR AS oksBSCH_START_HOUR
 ,oksBSCH.START_MINUTE AS oksBSCH_START_MINUTE
 ,oksBSCH.END_HOUR AS oksBSCH_END_HOUR
 ,oksBSCH.END_MINUTE AS oksBSCH_END_MINUTE
 ,oksBSCH.MONDAY_FLAG AS oksBSCH_MONDAY_FLAG
 ,oksBSCH.TUESDAY_FLAG AS oksBSCH_TUESDAY_FLAG
 ,oksBSCH.WEDNESDAY_FLAG AS oksBSCH_WEDNESDAY_FLAG
 ,oksBSCH.THURSDAY_FLAG AS oksBSCH_THURSDAY_FLAG
 ,oksBSCH.FRIDAY_FLAG AS oksBSCH_FRIDAY_FLAG
 ,oksBSCH.SATURDAY_FLAG AS oksBSCH_SATURDAY_FLAG
 ,oksBSCH.SUNDAY_FLAG AS oksBSCH_SUNDAY_FLAG
 ,oksBSCH.OBJECT1_ID1 AS oksBSCH_OBJECT1_ID1
 ,oksBSCH.OBJECT1_ID2 AS oksBSCH_OBJECT1_ID2
 ,oksBSCH.JTOT_OBJECT1_CODE AS oksBSCH_JTOT_OBJECT1_CODE
 ,oksBSCH.BILL_RATE_CODE AS oksBSCH_BILL_RATE_CODE
 ,oksBSCH.FLAT_RATE AS oksBSCH_FLAT_RATE
 ,oksBSCH.UOM AS oksBSCH_UOM
 ,oksBSCH.HOLIDAY_YN AS oksBSCH_HOLIDAY_YN
 ,oksBSCH.PERCENT_OVER_LIST_PRICE AS oksBSCH_PCT_OVER_LIST_PRICE
 ,oksBSCH.PROGRAM_APPLICATION_ID AS oksBSCH_PRGRM_APPLICATION_ID
 ,oksBSCH.PROGRAM_ID AS oksBSCH_PROGRAM_ID
 ,oksBSCH.PROGRAM_UPDATE_DATE AS oksBSCH_PROGRAM_UPDATE_DATE
 ,oksBSCH.REQUEST_ID AS oksBSCH_REQUEST_ID
 ,oksBSCH.SECURITY_GROUP_ID AS oksBSCH_SECURITY_GROUP_ID
 ,1 AS oksBSCH_OBJECT_VERSION_NUMBER
 FROM
  OKS_BILLRATE_SCHEDULES oksBSCH
 ,OKC_K_LINES_B okcB
 WHERE oksBSCH.CLE_ID = okcB.ORIG_SYSTEM_ID1
 AND okcB.DNZ_CHR_ID = P_To_Chr_ID
 AND oksBSCH.DNZ_CHR_ID = P_From_Chr_ID;

 CURSOR GetOksBSCHPartial IS
 SELECT
  oksBSCH.ID AS oksBSCH_OldID
 ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksBSCH_NewID
 ,okcBT.ID AS oksBSCH_NewCleID
 ,okcBT.CLE_ID AS oksBSCH_NewBTCleID
 ,okcBT.DNZ_CHR_ID AS oksBSCH_NewDnzChrID
 ,oksBSCH.START_HOUR AS oksBSCH_START_HOUR
 ,oksBSCH.START_MINUTE AS oksBSCH_START_MINUTE
 ,oksBSCH.END_HOUR AS oksBSCH_END_HOUR
 ,oksBSCH.END_MINUTE AS oksBSCH_END_MINUTE
 ,oksBSCH.MONDAY_FLAG AS oksBSCH_MONDAY_FLAG
 ,oksBSCH.TUESDAY_FLAG AS oksBSCH_TUESDAY_FLAG
 ,oksBSCH.WEDNESDAY_FLAG AS oksBSCH_WEDNESDAY_FLAG
 ,oksBSCH.THURSDAY_FLAG AS oksBSCH_THURSDAY_FLAG
 ,oksBSCH.FRIDAY_FLAG AS oksBSCH_FRIDAY_FLAG
 ,oksBSCH.SATURDAY_FLAG AS oksBSCH_SATURDAY_FLAG
 ,oksBSCH.SUNDAY_FLAG AS oksBSCH_SUNDAY_FLAG
 ,oksBSCH.OBJECT1_ID1 AS oksBSCH_OBJECT1_ID1
 ,oksBSCH.OBJECT1_ID2 AS oksBSCH_OBJECT1_ID2
 ,oksBSCH.JTOT_OBJECT1_CODE AS oksBSCH_JTOT_OBJECT1_CODE
 ,oksBSCH.BILL_RATE_CODE AS oksBSCH_BILL_RATE_CODE
 ,oksBSCH.FLAT_RATE AS oksBSCH_FLAT_RATE
 ,oksBSCH.UOM AS oksBSCH_UOM
 ,oksBSCH.HOLIDAY_YN AS oksBSCH_HOLIDAY_YN
 ,oksBSCH.PERCENT_OVER_LIST_PRICE AS oksBSCH_PCT_OVER_LIST_PRICE
 ,oksBSCH.PROGRAM_APPLICATION_ID AS oksBSCH_PRGRM_APPLICATION_ID
 ,oksBSCH.PROGRAM_ID AS oksBSCH_PROGRAM_ID
 ,oksBSCH.PROGRAM_UPDATE_DATE AS oksBSCH_PROGRAM_UPDATE_DATE
 ,oksBSCH.REQUEST_ID AS oksBSCH_REQUEST_ID
 ,oksBSCH.SECURITY_GROUP_ID AS oksBSCH_SECURITY_GROUP_ID
 ,1 AS oksBSCH_OBJECT_VERSION_NUMBER
 FROM
  OKS_BILLRATE_SCHEDULES oksBSCH
 ,OKC_K_LINES_B_TEMP okcBT
 WHERE oksBSCH.CLE_ID = okcBT.ORIG_SYSTEM_ID1
 AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
 AND oksBSCH.DNZ_CHR_ID = P_From_Chr_ID;


 Begin
  x_return_status := l_return_status;
  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksBSCHFull;
  Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
   OPEN GetOksBSCHPartial;
  End If;

  LOOP
   If (P_Partial_Copy_YN = 'N') then
    FETCH GetOksBSCHFull BULK COLLECT INTO
          OksBSCHRecTab.OksBSCH_OldID
         ,OksBSCHRecTab.OksBSCH_NewID
	 ,OksBSCHRecTab.OksBSCH_NewCleID
	 ,OksBSCHRecTab.OksBSCH_NewBTCleID
	 ,OksBSCHRecTab.OksBSCH_NewDnzChrID
	 ,OksBSCHRecTab.OksBSCH_START_HOUR
	 ,OksBSCHRecTab.OksBSCH_START_MINUTE
	 ,OksBSCHRecTab.OksBSCH_END_HOUR
	 ,OksBSCHRecTab.OksBSCH_END_MINUTE
	 ,OksBSCHRecTab.OksBSCH_MONDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_TUESDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_WEDNESDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_THURSDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_FRIDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_SATURDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_SUNDAY_FLAG
	 ,OksBSCHRecTab.OksBSCH_OBJECT1_ID1
	 ,OksBSCHRecTab.OksBSCH_OBJECT1_ID2
	 ,OksBSCHRecTab.OksBSCH_JTOT_OBJECT1_CODE
	 ,OksBSCHRecTab.OksBSCH_BILL_RATE_CODE
	 ,OksBSCHRecTab.OksBSCH_FLAT_RATE
	 ,OksBSCHRecTab.OksBSCH_UOM
	 ,OksBSCHRecTab.OksBSCH_HOLIDAY_YN
	 ,OksBSCHRecTab.OksBSCH_PCT_OVER_LIST_PRICE
	 ,OksBSCHRecTab.OksBSCH_PRGRM_APPLICATION_ID
	 ,OksBSCHRecTab.OksBSCH_PROGRAM_ID
	 ,OksBSCHRecTab.OksBSCH_PROGRAM_UPDATE_DATE
	 ,OksBSCHRecTab.OksBSCH_REQUEST_ID
	 ,OksBSCHRecTab.OksBSCH_SECURITY_GROUP_ID
	 ,OksBSCHRecTab.OksBSCH_OBJECT_VERSION_NUMBER
     LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    FETCH GetOksBSCHPartial BULK COLLECT INTO
          OksBSCHRecTab.OksBSCH_OldID
         ,OksBSCHRecTab.OksBSCH_NewID
         ,OksBSCHRecTab.OksBSCH_NewCleID
         ,OksBSCHRecTab.OksBSCH_NewBTCleID
         ,OksBSCHRecTab.OksBSCH_NewDnzChrID
         ,OksBSCHRecTab.OksBSCH_START_HOUR
         ,OksBSCHRecTab.OksBSCH_START_MINUTE
         ,OksBSCHRecTab.OksBSCH_END_HOUR
         ,OksBSCHRecTab.OksBSCH_END_MINUTE
         ,OksBSCHRecTab.OksBSCH_MONDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_TUESDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_WEDNESDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_THURSDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_FRIDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_SATURDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_SUNDAY_FLAG
         ,OksBSCHRecTab.OksBSCH_OBJECT1_ID1
         ,OksBSCHRecTab.OksBSCH_OBJECT1_ID2
         ,OksBSCHRecTab.OksBSCH_JTOT_OBJECT1_CODE
         ,OksBSCHRecTab.OksBSCH_BILL_RATE_CODE
         ,OksBSCHRecTab.OksBSCH_FLAT_RATE
         ,OksBSCHRecTab.OksBSCH_UOM
         ,OksBSCHRecTab.OksBSCH_HOLIDAY_YN
         ,OksBSCHRecTab.OksBSCH_PCT_OVER_LIST_PRICE
         ,OksBSCHRecTab.OksBSCH_PRGRM_APPLICATION_ID
         ,OksBSCHRecTab.OksBSCH_PROGRAM_ID
         ,OksBSCHRecTab.OksBSCH_PROGRAM_UPDATE_DATE
         ,OksBSCHRecTab.OksBSCH_REQUEST_ID
         ,OksBSCHRecTab.OksBSCH_SECURITY_GROUP_ID
         ,OksBSCHRecTab.OksBSCH_OBJECT_VERSION_NUMBER
     LIMIT G_BULK_FETCH_LIMIT;

   End If;

   FORALL i IN OksBSCHRecTab.OksBSCH_NewID.FIRST .. OksBSCHRecTab.OksBSCH_NewID.LAST
   INSERT INTO OKS_BILLRATE_SCHEDULES (
      ID
     ,CLE_ID
     ,BT_CLE_ID
     ,DNZ_CHR_ID
     ,START_HOUR
     ,START_MINUTE
     ,END_HOUR
     ,END_MINUTE
     ,MONDAY_FLAG
     ,TUESDAY_FLAG
     ,WEDNESDAY_FLAG
     ,THURSDAY_FLAG
     ,FRIDAY_FLAG
     ,SATURDAY_FLAG
     ,SUNDAY_FLAG
     ,OBJECT1_ID1
     ,OBJECT1_ID2
     ,JTOT_OBJECT1_CODE
     ,BILL_RATE_CODE
     ,FLAT_RATE
     ,UOM
     ,HOLIDAY_YN
     ,PERCENT_OVER_LIST_PRICE
     ,PROGRAM_APPLICATION_ID
     ,PROGRAM_ID
     ,PROGRAM_UPDATE_DATE
     ,REQUEST_ID
     ,SECURITY_GROUP_ID
     ,OBJECT_VERSION_NUMBER
     ,CREATED_BY
     ,CREATION_DATE
     ,LAST_UPDATED_BY
     ,LAST_UPDATE_DATE
     ,LAST_UPDATE_LOGIN
  )
  SELECT
   OksBSCHRecTab.OksBSCH_NewID(i)
  ,OksBSCHRecTab.OksBSCH_NewCleID(i)
  ,OksBSCHRecTab.OksBSCH_NewBTCleID(i)
  ,OksBSCHRecTab.OksBSCH_NewDnzChrID(i)
  ,OksBSCHRecTab.OksBSCH_START_HOUR(i)
  ,OksBSCHRecTab.OksBSCH_START_MINUTE(i)
  ,OksBSCHRecTab.OksBSCH_END_HOUR(i)
  ,OksBSCHRecTab.OksBSCH_END_MINUTE(i)
  ,OksBSCHRecTab.OksBSCH_MONDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_TUESDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_WEDNESDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_THURSDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_FRIDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_SATURDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_SUNDAY_FLAG(i)
  ,OksBSCHRecTab.OksBSCH_OBJECT1_ID1(i)
  ,OksBSCHRecTab.OksBSCH_OBJECT1_ID2(i)
  ,OksBSCHRecTab.OksBSCH_JTOT_OBJECT1_CODE(i)
  ,OksBSCHRecTab.OksBSCH_BILL_RATE_CODE(i)
  ,OksBSCHRecTab.OksBSCH_FLAT_RATE(i)
  ,OksBSCHRecTab.OksBSCH_UOM(i)
  ,OksBSCHRecTab.OksBSCH_HOLIDAY_YN(i)
  ,OksBSCHRecTab.OksBSCH_PCT_OVER_LIST_PRICE(i)
  ,OksBSCHRecTab.OksBSCH_PRGRM_APPLICATION_ID(i)
  ,OksBSCHRecTab.OksBSCH_PROGRAM_ID(i)
  ,OksBSCHRecTab.OksBSCH_PROGRAM_UPDATE_DATE(i)
  ,OksBSCHRecTab.OksBSCH_REQUEST_ID(i)
  ,OksBSCHRecTab.OksBSCH_SECURITY_GROUP_ID(i)
  ,OksBSCHRecTab.OksBSCH_OBJECT_VERSION_NUMBER(i)
  ,FND_GLOBAL.USER_ID
  ,SYSDATE
  ,FND_GLOBAL.USER_ID
  ,SYSDATE
  ,FND_GLOBAL.LOGIN_ID
  FROM DUAL;

   If (P_Partial_Copy_YN = 'N') then
    EXIT WHEN GetOksBSCHFull%NOTFOUND;
   Elsif (P_Partial_Copy_YN = 'Y' and P_Lines_Count > 0) then
    EXIT WHEN GetOksBSCHPartial%NOTFOUND;
   End If;

  END LOOP;

  If (GetOksBSCHFull%ISOPEN) then
    CLOSE GetOksBSCHFull;
  Elsif (GetOksBSCHPartial%ISOPEN) then
    CLOSE GetOksBSCHPartial;
  End If;

   EXCEPTION
          WHEN OTHERS THEN
           If (GetOksBSCHFull%ISOPEN) then
             CLOSE GetOksBSCHFull;
	   Elsif (GetOksBSCHPartial%ISOPEN) then
	     CLOSE GetOksBSCHPartial;
           End IF;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_oks_billrate_schedules;

 ------------------------------------------------------------
--===================================================
--  copy_oks_stream_levels_b
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--            P_Target_Contract_New_YN : Flag to indicate if copy process was copying to an existing contract (value = 'N')
--                                       or if a new contract header was created as part of the copy process (value = 'Y'). This
--                                       flag gets set to 'Y' just before the call to copy_contract_header procedure in
--                                       copy_components
--            If (P_Partial_Copy_YN = 'N') rows for both Header and Lines are copied (Full Contract copy)
--               use cursor GetOksSLFull
--            If (P_Partial_Copy_YN = 'Y') then
--              If (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT = 0) then
--                Only rows for only Header , use cursor GetOksSLPartial_H
--              Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT > 0) then
--                Both rows for both Header and Lines need to be copied, use cursor GetOksSLPartial_HNL
--              Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Tbl.COUNT > 0) then
--                Only rows for chosen Lines are copied, use cursor GetOksSLPartial_L
--              Elsif (P_Target_Contract_New_YN = 'N') and P_Lines_Tbl.COUNT = 0) then
--                nothing needs to be copied, no copy needed
--              End If
--            End If
--====================================================

 PROCEDURE copy_oks_stream_levels_b(P_From_Chr_ID IN NUMBER
                                   ,P_To_Chr_ID   IN NUMBER
                                   ,P_Partial_Copy_YN IN VARCHAR2
				   ,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
				   ,P_Lines_Count IN NUMBER DEFAULT 0
                                   ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_STREAM_LEVELS_B';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

 CURSOR GetOksSLFull IS
 SELECT
   oksSL.ID AS oksSL_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSL_NewID
  ,okcH.ID AS oksSL_NewChrID
  ,NULL AS oksSL_NewCleID
  ,okcH.ID AS oksSL_NewDnzChrID
  ,oksSL.SEQUENCE_NO AS oksSL_SEQUENCE_NO
  ,oksSL.UOM_CODE AS oksSL_UOM_CODE
  ,oksSL.START_DATE AS oksSL_START_DATE
  ,oksSL.END_DATE AS oksSL_END_DATE
  ,oksSL.LEVEL_PERIODS AS oksSL_LEVEL_PERIODS
  ,oksSL.UOM_PER_PERIOD AS oksSL_UOM_PER_PERIOD
  ,oksSL.ADVANCE_PERIODS AS oksSL_ADVANCE_PERIODS
  ,oksSL.LEVEL_AMOUNT AS oksSL_LEVEL_AMOUNT
  ,oksSL.INVOICE_OFFSET_DAYS AS oksSL_INVOICE_OFFSET_DAYS
  ,oksSL.INTERFACE_OFFSET_DAYS AS oksSL_INTERFACE_OFFSET_DAYS
  ,oksSL.COMMENTS AS oksSL_COMMENTS
  ,oksSL.DUE_ARR_YN AS oksSL_DUE_ARR_YN
  ,oksSL.AMOUNT AS oksSL_AMOUNT
  ,oksSL.LINES_DETAILED_YN AS oksSL_LINES_DETAILED_YN
  ,1 AS oksSL_OBJECT_VERSION_NUMBER
  ,oksSL.SECURITY_GROUP_ID AS oksSL_SECURITY_GROUP_ID
  ,oksSL.REQUEST_ID AS oksSL_REQUEST_ID
  ,oksSL.ID AS oksSL_ORIG_SYSTEM_ID1
  ,NULL AS oksSL_ORIG_SYSTEM_SOURCE_CODE
  ,'COPY' AS oksSL_ORIG_SYSTEM_REFERENCE1
  FROM
    OKS_STREAM_LEVELS_B oksSL
   ,OKC_K_HEADERS_B okcH
  WHERE
  oksSL.DNZ_CHR_ID = okcH.ORIG_SYSTEM_ID1
  AND okcH.ID = P_To_Chr_ID
  AND oksSL.DNZ_CHR_ID = P_From_Chr_ID
  AND oksSL.CLE_ID IS NULL
  AND oksSL.CHR_ID IS NOT NULL
  UNION ALL
   SELECT
   oksSL.ID AS oksSL_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSL_NewID
  ,NULL AS oksSL_NewChrID
  ,okcBTarget.ID AS oksSL_NewCleID
  ,okcBTarget.DNZ_CHR_ID AS oksSL_NewDnzChrID
  ,oksSL.SEQUENCE_NO AS oksSL_SEQUENCE_NO
  ,oksSL.UOM_CODE AS oksSL_UOM_CODE
  ,oksSL.START_DATE AS oksSL_START_DATE
  ,oksSL.END_DATE AS oksSL_END_DATE
  ,oksSL.LEVEL_PERIODS AS oksSL_LEVEL_PERIODS
  ,oksSL.UOM_PER_PERIOD AS oksSL_UOM_PER_PERIOD
  ,oksSL.ADVANCE_PERIODS AS oksSL_ADVANCE_PERIODS
  ,oksSL.LEVEL_AMOUNT AS oksSL_LEVEL_AMOUNT
  ,oksSL.INVOICE_OFFSET_DAYS AS oksSL_INVOICE_OFFSET_DAYS
  ,oksSL.INTERFACE_OFFSET_DAYS AS oksSL_INTERFACE_OFFSET_DAYS
  ,oksSL.COMMENTS AS oksSL_COMMENTS
  ,oksSL.DUE_ARR_YN AS oksSL_DUE_ARR_YN
  ,oksSL.AMOUNT AS oksSL_AMOUNT
  ,oksSL.LINES_DETAILED_YN AS oksSL_LINES_DETAILED_YN
  ,1 AS oksSL_OBJECT_VERSION_NUMBER
  ,oksSL.SECURITY_GROUP_ID AS oksSL_SECURITY_GROUP_ID
  ,oksSL.REQUEST_ID AS oksSL_REQUEST_ID
  ,oksSL.ID AS oksSL_ORIG_SYSTEM_ID1
  ,NULL AS oksSL_ORIG_SYSTEM_SOURCE_CODE
  ,'COPY' AS oksSL_ORIG_SYSTEM_REFERENCE1
  FROM
   OKS_STREAM_LEVELS_B oksSL
  ,OKC_K_LINES_B okcBTarget
  ,OKC_K_LINES_B okcBSource
  WHERE
  oksSL.CLE_ID = okcBTarget.ORIG_SYSTEM_ID1
  AND oksSL.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBTarget.DNZ_CHR_ID = P_To_Chr_ID
  AND oksSL.CHR_ID IS NULL
  AND oksSL.CLE_ID IS NOT NULL
  AND okcBTarget.ORIG_SYSTEM_ID1 = okcBSource.ID
--AND okcB.DATE_TERMINATED IS NULL;
  AND (
         (okcBSource.CLE_ID IS NULL 					--Line being copied is a Topline that is:
          AND okcBSource.DATE_TERMINATED IS NULL			--a) Not Terminated
          AND NOT EXISTS (select b.ID from okc_k_lines_b b		--b) Has no sublines that are Terminated
                          where b.CLE_ID= okcBSource.ID
                          and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                          and b.DATE_TERMINATED IS NOT NULL
			 )
         )
      OR
         (okcBSource.CLE_ID IS NOT NULL				    --Line being copied is a Subline that is:
          AND okcBSource.DATE_TERMINATED IS NULL		    --a) Not Terminated
	  AND NOT EXISTS (select b.ID from okc_k_lines_b b	    --b) Has no peer sublines that are Terminated
                          where b.CLE_ID = okcBSource.CLE_ID
	 		 and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
	 		 and b.DATE_TERMINATED IS NOT NULL
                         )
         )
      )
  --npalepu added on 31-may-2006 for bug # 5178264
  And (
         (okcBSource.CLE_ID IS NULL                                     --Line being copied is a Topline that is:
          AND okcBSource.DATE_CANCELLED IS NULL                         --a) Not Cancelled
          AND NOT EXISTS (select b.ID from okc_k_lines_b b              --b) Has no sublines that are Cancelled
                          where b.CLE_ID= okcBSource.ID
                          and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                          and b.DATE_CANCELLED IS NOT NULL
                         )
         )
      OR
         (okcBSource.CLE_ID IS NOT NULL                             --Line being copied is a Subline that is:
          AND okcBSource.DATE_CANCELLED IS NULL                     --a) Not Cancelled
          AND NOT EXISTS (select b.ID from okc_k_lines_b b          --b) Has no peer sublines that are Cancelled
                          where b.CLE_ID = okcBSource.CLE_ID
                         and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                         and b.DATE_CANCELLED IS NOT NULL
                         )
         ))
  --end npalepu
      ;

----------------------------------------------------------------------------
--Cursor to be used in Component Copy to copy rows for both Header and Lines
----------------------------------------------------------------------------
 CURSOR GetOksSLPartial_HNL IS
 SELECT
   oksSL.ID AS oksSL_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSL_NewID
  ,okcH.ID AS oksSL_NewChrID
  ,NULL AS oksSL_NewCleID
  ,okcH.ID AS oksSL_NewDnzChrID
  ,oksSL.SEQUENCE_NO AS oksSL_SEQUENCE_NO
  ,oksSL.UOM_CODE AS oksSL_UOM_CODE
  ,oksSL.START_DATE AS oksSL_START_DATE
  ,oksSL.END_DATE AS oksSL_END_DATE
  ,oksSL.LEVEL_PERIODS AS oksSL_LEVEL_PERIODS
  ,oksSL.UOM_PER_PERIOD AS oksSL_UOM_PER_PERIOD
  ,oksSL.ADVANCE_PERIODS AS oksSL_ADVANCE_PERIODS
  ,oksSL.LEVEL_AMOUNT AS oksSL_LEVEL_AMOUNT
  ,oksSL.INVOICE_OFFSET_DAYS AS oksSL_INVOICE_OFFSET_DAYS
  ,oksSL.INTERFACE_OFFSET_DAYS AS oksSL_INTERFACE_OFFSET_DAYS
  ,oksSL.COMMENTS AS oksSL_COMMENTS
  ,oksSL.DUE_ARR_YN AS oksSL_DUE_ARR_YN
  ,oksSL.AMOUNT AS oksSL_AMOUNT
  ,oksSL.LINES_DETAILED_YN AS oksSL_LINES_DETAILED_YN
  ,1 AS oksSL_OBJECT_VERSION_NUMBER
  ,oksSL.SECURITY_GROUP_ID AS oksSL_SECURITY_GROUP_ID
  ,oksSL.REQUEST_ID AS oksSL_REQUEST_ID
  ,oksSL.ID AS oksSL_ORIG_SYSTEM_ID1
  ,NULL AS oksSL_ORIG_SYSTEM_SOURCE_CODE
  ,'COPY' AS oksSL_ORIG_SYSTEM_REFERENCE1
  FROM
    OKS_STREAM_LEVELS_B oksSL
   ,OKC_K_HEADERS_B okcH
  WHERE
  oksSL.DNZ_CHR_ID = okcH.ORIG_SYSTEM_ID1
  AND okcH.ID = P_To_Chr_ID
  AND oksSL.DNZ_CHR_ID = P_From_Chr_ID
  AND oksSL.CLE_ID IS NULL
  AND oksSL.CHR_ID IS NOT NULL
  UNION ALL
   SELECT
   oksSL.ID AS oksSL_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSL_NewID
  ,NULL AS oksSL_NewChrID
  ,okcBT.ID AS oksSL_NewCleID
  ,okcBT.DNZ_CHR_ID AS oksSL_NewDnzChrID
  ,oksSL.SEQUENCE_NO AS oksSL_SEQUENCE_NO
  ,oksSL.UOM_CODE AS oksSL_UOM_CODE
  ,oksSL.START_DATE AS oksSL_START_DATE
  ,oksSL.END_DATE AS oksSL_END_DATE
  ,oksSL.LEVEL_PERIODS AS oksSL_LEVEL_PERIODS
  ,oksSL.UOM_PER_PERIOD AS oksSL_UOM_PER_PERIOD
  ,oksSL.ADVANCE_PERIODS AS oksSL_ADVANCE_PERIODS
  ,oksSL.LEVEL_AMOUNT AS oksSL_LEVEL_AMOUNT
  ,oksSL.INVOICE_OFFSET_DAYS AS oksSL_INVOICE_OFFSET_DAYS
  ,oksSL.INTERFACE_OFFSET_DAYS AS oksSL_INTERFACE_OFFSET_DAYS
  ,oksSL.COMMENTS AS oksSL_COMMENTS
  ,oksSL.DUE_ARR_YN AS oksSL_DUE_ARR_YN
  ,oksSL.AMOUNT AS oksSL_AMOUNT
  ,oksSL.LINES_DETAILED_YN AS oksSL_LINES_DETAILED_YN
  ,1 AS oksSL_OBJECT_VERSION_NUMBER
  ,oksSL.SECURITY_GROUP_ID AS oksSL_SECURITY_GROUP_ID
  ,oksSL.REQUEST_ID AS oksSL_REQUEST_ID
  ,oksSL.ID AS oksSL_ORIG_SYSTEM_ID1
  ,NULL AS oksSL_ORIG_SYSTEM_SOURCE_CODE
  ,'COPY' AS oksSL_ORIG_SYSTEM_REFERENCE1
  FROM
   OKS_STREAM_LEVELS_B oksSL
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
  oksSL.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND oksSL.DNZ_CHR_ID = P_From_Chr_ID
  AND oksSL.CLE_ID IS NOT NULL
  AND oksSL.CHR_ID IS NULL
  --AND (okcBT.DATES_CHANGED_YN = 'N' AND okcBT.DATE_TERMINATED IS NULL);
  AND (
	(okcBT.CLE_ID IS NULL 					 --Line being copied is a Topline with
	 AND okcBT.DATES_CHANGED_YN = 'N' 			 --a) Dates not changed to honor target
         AND okcBT.DATE_TERMINATED IS NULL			 --b) Is not TERMINATED
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are TERMINATED
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_TERMINATED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
	 AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N' 		         --b) Subline's dates havent changed
	 AND okcBT.DATE_TERMINATED IS NULL			 --c) Subline is not TERMINATED
	 AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a	 --d) Has no peer sublines that TERMINATED
			 where 					 --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
		   	  and a.DATE_TERMINATED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )
       OR
        (okcBT.CLE_ID IS NOT NULL				 --Line being copied is a subline that is:
	 AND okcBT.LINE_EXISTS_YN = 'Y'				 --a) Being copied to an existing Target Topline
	 AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'			 --b) It is not TERMINATED
        )							 --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --npalepu added on 31-may-2006 for bug # 5178264
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_CANCELLED IS NULL                        --b) Is not Cancelled
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are Cancelled
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_CANCELLED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's dates havent changed
         AND okcBT.DATE_CANCELLED IS NULL                        --c) Subline is not Cancelled
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that Cancelled
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_CANCELLED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )

       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not Cancelled
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --end npalepu
      ;
--------------------------------------------------------------------------------------
--Cursor to copy rows for only Header ie when lines when chosen by user for copy in UI
--------------------------------------------------------------------------------------
 CURSOR GetOksSLPartial_H IS
 SELECT
   oksSL.ID AS oksSL_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSL_NewID
  ,okcH.ID AS oksSL_NewChrID
  ,NULL AS oksSL_NewCleID
  ,okcH.ID AS oksSL_NewDnzChrID
  ,oksSL.SEQUENCE_NO AS oksSL_SEQUENCE_NO
  ,oksSL.UOM_CODE AS oksSL_UOM_CODE
  ,oksSL.START_DATE AS oksSL_START_DATE
  ,oksSL.END_DATE AS oksSL_END_DATE
  ,oksSL.LEVEL_PERIODS AS oksSL_LEVEL_PERIODS
  ,oksSL.UOM_PER_PERIOD AS oksSL_UOM_PER_PERIOD
  ,oksSL.ADVANCE_PERIODS AS oksSL_ADVANCE_PERIODS
  ,oksSL.LEVEL_AMOUNT AS oksSL_LEVEL_AMOUNT
  ,oksSL.INVOICE_OFFSET_DAYS AS oksSL_INVOICE_OFFSET_DAYS
  ,oksSL.INTERFACE_OFFSET_DAYS AS oksSL_INTERFACE_OFFSET_DAYS
  ,oksSL.COMMENTS AS oksSL_COMMENTS
  ,oksSL.DUE_ARR_YN AS oksSL_DUE_ARR_YN
  ,oksSL.AMOUNT AS oksSL_AMOUNT
  ,oksSL.LINES_DETAILED_YN AS oksSL_LINES_DETAILED_YN
  ,1 AS oksSL_OBJECT_VERSION_NUMBER
  ,oksSL.SECURITY_GROUP_ID AS oksSL_SECURITY_GROUP_ID
  ,oksSL.REQUEST_ID AS oksSL_REQUEST_ID
  ,oksSL.ID AS oksSL_ORIG_SYSTEM_ID1
  ,NULL AS oksSL_ORIG_SYSTEM_SOURCE_CODE
  ,'COPY' AS oksSL_ORIG_SYSTEM_REFERENCE1
  FROM
    OKS_STREAM_LEVELS_B oksSL
   ,OKC_K_HEADERS_B okcH
  WHERE
  oksSL.DNZ_CHR_ID = okcH.ORIG_SYSTEM_ID1
  AND okcH.ID = P_To_Chr_ID
  AND oksSL.DNZ_CHR_ID = P_From_Chr_ID
  AND oksSL.CLE_ID IS NULL
  AND oksSL.CHR_ID IS NOT NULL;

--------------------------------------------------------------------------------------
--Cursor to copy rows for Lines ie when copying to an existing Target Contract
--------------------------------------------------------------------------------------
 CURSOR GetOksSLPartial_L IS
 SELECT
   oksSL.ID AS oksSL_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksSL_NewID
  ,NULL AS oksSL_NewChrID
  ,okcBT.ID AS oksSL_NewCleID
  ,okcBT.DNZ_CHR_ID AS oksSL_NewDnzChrID
  ,oksSL.SEQUENCE_NO AS oksSL_SEQUENCE_NO
  ,oksSL.UOM_CODE AS oksSL_UOM_CODE
  ,oksSL.START_DATE AS oksSL_START_DATE
  ,oksSL.END_DATE AS oksSL_END_DATE
  ,oksSL.LEVEL_PERIODS AS oksSL_LEVEL_PERIODS
  ,oksSL.UOM_PER_PERIOD AS oksSL_UOM_PER_PERIOD
  ,oksSL.ADVANCE_PERIODS AS oksSL_ADVANCE_PERIODS
  ,oksSL.LEVEL_AMOUNT AS oksSL_LEVEL_AMOUNT
  ,oksSL.INVOICE_OFFSET_DAYS AS oksSL_INVOICE_OFFSET_DAYS
  ,oksSL.INTERFACE_OFFSET_DAYS AS oksSL_INTERFACE_OFFSET_DAYS
  ,oksSL.COMMENTS AS oksSL_COMMENTS
  ,oksSL.DUE_ARR_YN AS oksSL_DUE_ARR_YN
  ,oksSL.AMOUNT AS oksSL_AMOUNT
  ,oksSL.LINES_DETAILED_YN AS oksSL_LINES_DETAILED_YN
  ,1 AS oksSL_OBJECT_VERSION_NUMBER
  ,oksSL.SECURITY_GROUP_ID AS oksSL_SECURITY_GROUP_ID
  ,oksSL.REQUEST_ID AS oksSL_REQUEST_ID
  ,oksSL.ID AS oksSL_ORIG_SYSTEM_ID1
  ,NULL AS oksSL_ORIG_SYSTEM_SOURCE_CODE
  ,'COPY' AS oksSL_ORIG_SYSTEM_REFERENCE1
  FROM
   OKS_STREAM_LEVELS_B oksSL
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
  oksSL.CLE_ID = okcBT.ORIG_SYSTEM_ID1
  AND oksSL.DNZ_CHR_ID = P_From_Chr_ID
  AND okcBT.DNZ_CHR_ID = P_To_Chr_ID
  --AND (okcBT.DATES_CHANGED_YN = 'N' AND okcBT.DATE_TERMINATED IS NULL);
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_TERMINATED IS NULL                       --b) Is not TERMINATED
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are TERMINATED
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_TERMINATED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's dates havent changed
         AND okcBT.DATE_TERMINATED IS NULL                       --c) Subline is not TERMINATED
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that TERMINATED
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_TERMINATED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not TERMINATED
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --npalepu added on 31-may-2006 for bug # 5178264
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_CANCELLED IS NULL                       --b) Is not cancelled
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are Cancelled
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_CANCELLED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's dates havent changed
         AND okcBT.DATE_CANCELLED IS NULL                        --c) Subline is not Cancelled
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that Cancelled
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_CANCELLED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )

       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not Cancelled
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
   --end npalepu
      ;

 Begin
  x_return_status := l_return_status;
--errorout_hk('Entered copy_oks_stream_levels_b');
  If (P_Partial_Copy_YN = 'N') then
   OPEN GetOksSLFull;
  ElsIf (P_Partial_Copy_YN = 'Y') then
   If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
    OPEN GetOksSLPartial_H;
   Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
    OPEN GetOksSLPartial_HNL;
   Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
   --errorout_hk('Opening GetOksSLPartial_L');
    OPEN GetOksSLPartial_L;
   ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count = 0) THEN
    RETURN;
   End If;
  End If;



  LOOP
   If (P_Partial_Copy_YN = 'N') then
    FETCH GetOksSLFull BULK COLLECT INTO
      OksSLRecTab.OksSL_OldID
     ,OksSLRecTab.OksSL_NewID
     ,OksSLRecTab.OksSL_NewChrID
     ,OksSLRecTab.OksSL_NewCleID
     ,OksSLRecTab.OksSL_NewDnzChrID
     ,OksSLRecTab.OksSL_SEQUENCE_NO
     ,OksSLRecTab.OksSL_UOM_CODE
     ,OksSLRecTab.OksSL_START_DATE
     ,OksSLRecTab.OksSL_END_DATE
     ,OksSLRecTab.OksSL_LEVEL_PERIODS
     ,OksSLRecTab.OksSL_UOM_PER_PERIOD
     ,OksSLRecTab.OksSL_ADVANCE_PERIODS
     ,OksSLRecTab.OksSL_LEVEL_AMOUNT
     ,OksSLRecTab.OksSL_INVOICE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_INTERFACE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_COMMENTS
     ,OksSLRecTab.OksSL_DUE_ARR_YN
     ,OksSLRecTab.OksSL_AMOUNT
     ,OksSLRecTab.OksSL_LINES_DETAILED_YN
     ,OksSLRecTab.OksSL_OBJECT_VERSION_NUMBER
     ,OksSLRecTab.OksSL_SECURITY_GROUP_ID
     ,OksSLRecTab.OksSL_REQUEST_ID
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_ID1
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_SOURCE_CODE
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_REFERENCE1
    LIMIT G_BULK_FETCH_LIMIT;
   Elsif (P_Partial_Copy_YN = 'Y') then
    If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
      FETCH GetOksSLPartial_H BULK COLLECT INTO
      OksSLRecTab.OksSL_OldID
     ,OksSLRecTab.OksSL_NewID
     ,OksSLRecTab.OksSL_NewChrID
     ,OksSLRecTab.OksSL_NewCleID
     ,OksSLRecTab.OksSL_NewDnzChrID
     ,OksSLRecTab.OksSL_SEQUENCE_NO
     ,OksSLRecTab.OksSL_UOM_CODE
     ,OksSLRecTab.OksSL_START_DATE
     ,OksSLRecTab.OksSL_END_DATE
     ,OksSLRecTab.OksSL_LEVEL_PERIODS
     ,OksSLRecTab.OksSL_UOM_PER_PERIOD
     ,OksSLRecTab.OksSL_ADVANCE_PERIODS
     ,OksSLRecTab.OksSL_LEVEL_AMOUNT
     ,OksSLRecTab.OksSL_INVOICE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_INTERFACE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_COMMENTS
     ,OksSLRecTab.OksSL_DUE_ARR_YN
     ,OksSLRecTab.OksSL_AMOUNT
     ,OksSLRecTab.OksSL_LINES_DETAILED_YN
     ,OksSLRecTab.OksSL_OBJECT_VERSION_NUMBER
     ,OksSLRecTab.OksSL_SECURITY_GROUP_ID
     ,OksSLRecTab.OksSL_REQUEST_ID
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_ID1
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_SOURCE_CODE
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_REFERENCE1
    LIMIT G_BULK_FETCH_LIMIT;
    Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
      FETCH GetOksSLPartial_HNL BULK COLLECT INTO
      OksSLRecTab.OksSL_OldID
     ,OksSLRecTab.OksSL_NewID
     ,OksSLRecTab.OksSL_NewChrID
     ,OksSLRecTab.OksSL_NewCleID
     ,OksSLRecTab.OksSL_NewDnzChrID
     ,OksSLRecTab.OksSL_SEQUENCE_NO
     ,OksSLRecTab.OksSL_UOM_CODE
     ,OksSLRecTab.OksSL_START_DATE
     ,OksSLRecTab.OksSL_END_DATE
     ,OksSLRecTab.OksSL_LEVEL_PERIODS
     ,OksSLRecTab.OksSL_UOM_PER_PERIOD
     ,OksSLRecTab.OksSL_ADVANCE_PERIODS
     ,OksSLRecTab.OksSL_LEVEL_AMOUNT
     ,OksSLRecTab.OksSL_INVOICE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_INTERFACE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_COMMENTS
     ,OksSLRecTab.OksSL_DUE_ARR_YN
     ,OksSLRecTab.OksSL_AMOUNT
     ,OksSLRecTab.OksSL_LINES_DETAILED_YN
     ,OksSLRecTab.OksSL_OBJECT_VERSION_NUMBER
     ,OksSLRecTab.OksSL_SECURITY_GROUP_ID
     ,OksSLRecTab.OksSL_REQUEST_ID
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_ID1
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_SOURCE_CODE
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_REFERENCE1
    LIMIT G_BULK_FETCH_LIMIT;
    Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
       --errorout_hk('Fetching GetOksSLPartial_L');
      FETCH GetOksSLPartial_L BULK COLLECT INTO
      OksSLRecTab.OksSL_OldID
     ,OksSLRecTab.OksSL_NewID
     ,OksSLRecTab.OksSL_NewChrID
     ,OksSLRecTab.OksSL_NewCleID
     ,OksSLRecTab.OksSL_NewDnzChrID
     ,OksSLRecTab.OksSL_SEQUENCE_NO
     ,OksSLRecTab.OksSL_UOM_CODE
     ,OksSLRecTab.OksSL_START_DATE
     ,OksSLRecTab.OksSL_END_DATE
     ,OksSLRecTab.OksSL_LEVEL_PERIODS
     ,OksSLRecTab.OksSL_UOM_PER_PERIOD
     ,OksSLRecTab.OksSL_ADVANCE_PERIODS
     ,OksSLRecTab.OksSL_LEVEL_AMOUNT
     ,OksSLRecTab.OksSL_INVOICE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_INTERFACE_OFFSET_DAYS
     ,OksSLRecTab.OksSL_COMMENTS
     ,OksSLRecTab.OksSL_DUE_ARR_YN
     ,OksSLRecTab.OksSL_AMOUNT
     ,OksSLRecTab.OksSL_LINES_DETAILED_YN
     ,OksSLRecTab.OksSL_OBJECT_VERSION_NUMBER
     ,OksSLRecTab.OksSL_SECURITY_GROUP_ID
     ,OksSLRecTab.OksSL_REQUEST_ID
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_ID1
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_SOURCE_CODE
     ,OksSLRecTab.OksSL_ORIG_SYSTEM_REFERENCE1
    LIMIT G_BULK_FETCH_LIMIT;
    End If;
   End If;
--errorout_hk('GetOksLEPartial_L count -'||OksLERecTab.OksLE_NewID.count);

   FORALL i IN OksSLRecTab.OksSL_NewID.FIRST .. OksSLRecTab.OksSL_NewID.LAST
   INSERT INTO OKS_STREAM_LEVELS_B (
     ID
    ,CHR_ID
    ,CLE_ID
    ,DNZ_CHR_ID
    ,SEQUENCE_NO
    ,UOM_CODE
    ,START_DATE
    ,END_DATE
    ,LEVEL_PERIODS
    ,UOM_PER_PERIOD
    ,ADVANCE_PERIODS
    ,LEVEL_AMOUNT
    ,INVOICE_OFFSET_DAYS
    ,INTERFACE_OFFSET_DAYS
    ,COMMENTS
    ,DUE_ARR_YN
    ,AMOUNT
    ,LINES_DETAILED_YN
    ,OBJECT_VERSION_NUMBER
    ,SECURITY_GROUP_ID
    ,REQUEST_ID
    ,ORIG_SYSTEM_ID1
    ,ORIG_SYSTEM_SOURCE_CODE
    ,ORIG_SYSTEM_REFERENCE1
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN
   )
   SELECT
    OksSLRecTab.OksSL_NewID(i)
   ,OksSLRecTab.OksSL_NewChrID(i)
   ,OksSLRecTab.OksSL_NewCleID(i)
   ,OksSLRecTab.OksSL_NewDnzChrID(i)
   ,OksSLRecTab.OksSL_SEQUENCE_NO(i)
   ,OksSLRecTab.OksSL_UOM_CODE(i)
   ,OksSLRecTab.OksSL_START_DATE(i)
   ,OksSLRecTab.OksSL_END_DATE(i)
   ,OksSLRecTab.OksSL_LEVEL_PERIODS(i)
   ,OksSLRecTab.OksSL_UOM_PER_PERIOD(i)
   ,OksSLRecTab.OksSL_ADVANCE_PERIODS(i)
   ,OksSLRecTab.OksSL_LEVEL_AMOUNT(i)
   ,OksSLRecTab.OksSL_INVOICE_OFFSET_DAYS(i)
   ,OksSLRecTab.OksSL_INTERFACE_OFFSET_DAYS(i)
   ,OksSLRecTab.OksSL_COMMENTS(i)
   ,OksSLRecTab.OksSL_DUE_ARR_YN(i)
   ,OksSLRecTab.OksSL_AMOUNT(i)
   ,OksSLRecTab.OksSL_LINES_DETAILED_YN(i)
   ,OksSLRecTab.OksSL_OBJECT_VERSION_NUMBER(i)
   ,OksSLRecTab.OksSL_SECURITY_GROUP_ID(i)
   ,OksSLRecTab.OksSL_REQUEST_ID(i)
   ,OksSLRecTab.OksSL_ORIG_SYSTEM_ID1(i)
   ,OksSLRecTab.OksSL_ORIG_SYSTEM_SOURCE_CODE(i)
   ,OksSLRecTab.OksSL_ORIG_SYSTEM_REFERENCE1(i)
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.LOGIN_ID
   FROM DUAL;

   If (P_Partial_Copy_YN = 'N') then
    EXIT WHEN GetOksSLFull%NOTFOUND;
   ElsIf (P_Partial_Copy_YN = 'Y') then
    If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
     EXIT WHEN GetOksSLPartial_H%NOTFOUND;
    Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
     EXIT WHEN GetOksSLPartial_HNL%NOTFOUND;
    Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
     EXIT WHEN GetOksSLPartial_L%NOTFOUND;
    End If;
   End If;


  END LOOP;

  If (GetOksSLFull%ISOPEN) then
   CLOSE GetOksSLFull;
  Elsif (GetOksSLPartial_H%ISOPEN) then
   CLOSE GetOksSLPartial_H;
  Elsif (GetOksSLPartial_HNL%ISOPEN) then
   CLOSE GetOksSLPartial_HNL;
  Elsif (GetOksSLPartial_L%ISOPEN) then
   CLOSE GetOksSLPartial_L;
  End If;

     EXCEPTION
          WHEN OTHERS THEN
  		  If (GetOksSLFull%ISOPEN) then
		   CLOSE GetOksSLFull;
		  Elsif (GetOksSLPartial_H%ISOPEN) then
		   CLOSE GetOksSLPartial_H;
		  Elsif (GetOksSLPartial_HNL%ISOPEN) then
		   CLOSE GetOksSLPartial_HNL;
		  Elsif (GetOksSLPartial_L%ISOPEN) then
		   CLOSE GetOksSLPartial_L;
		  End If;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

 End copy_oks_stream_levels_b;

 ------------------------------------------------
--===================================================
--  copy_oks_level_elements
--  Parameters: P_From_Chr_ID : Header ID of source contract
--   	      P_To_Chr_ID   : Header ID of target contract
 --  	      P_Partial_Copy_YN   : Flag to indicate whether the routine is being invoked as part of full contract copy (value = 'N')
 --				    or as part of component copy from UI (value = 'Y')
--            If (P_Partial_Copy_YN = 'N') rows for both Header and Lines are copied (Full Contract copy)
--               use cursor GetOksLEFull
--            If (P_Partial_Copy_YN = 'Y') then
--              If (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT = 0) then
--                Only rows for only Header , use cursor GetOksLEPartial_H
--              Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Tbl.COUNT > 0) then
--                Both rows for both Header and Lines need to be copied, use cursor GetOksLEPartial_HNL
--              Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Tbl.COUNT > 0) then
--                Only rows for chosen Lines are copied, use cursor GetOksLEPartial_L
--              Elsif (P_Target_Contract_New_YN = 'N') and P_Lines_Tbl.COUNT = 0) then
--                nothing needs to be copied, no copy needed
--              End If
--            End If

--====================================================

 PROCEDURE copy_oks_level_elements(P_From_Chr_ID IN NUMBER
                                  ,P_To_Chr_ID   IN NUMBER
                                  ,P_Partial_Copy_YN IN VARCHAR2
                                  ,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
                                  ,P_Lines_Count IN NUMBER DEFAULT 0
                                  ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_api_name        CONSTANT VARCHAR2(30) := 'COPY_OKS_LEVEL_ELEMENTS';
   l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_return_status             VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;

/******
 CURSOR GetOksLEFull IS
 SELECT
   oksLE.ID AS oksLE_OldID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID --*
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,oksSL.CLE_ID AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,decode(oksSL.CLE_ID,NULL,NULL,(select
                                  decode(a.CLE_ID,NULL,a.ID,a.CLE_ID)
    				  from okc_k_lines_b a
    				  where
        			  a.ID = oksSL.CLE_ID
    				  and a.DNZ_CHR_ID = P_To_Chr_ID )) AS oksLE_NewParentCleID --*
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID;
*******/

 CURSOR GetOksLEFull IS
 SELECT
   oksLE.ID AS oksLE_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID --*
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,NULL AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,NULL AS oksLE_NewParentCleID --*
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.CHR_ID IS NOT NULL
  AND oksSL.CLE_ID IS NULL
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID
 UNION ALL
  SELECT
   oksLE.ID AS oksLE_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID --*
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID --*
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,oksSL.CLE_ID AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,decode(okcBTarget.CLE_ID,NULL,okcBTarget.ID,okcBTarget.CLE_ID) AS NewParentCleID
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  ,OKC_K_LINES_B okcBTarget
  ,OKC_K_LINES_B okcBSource
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.CHR_ID IS NULL
  AND oksSL.CLE_ID IS NOT NULL
  AND oksSL.DNZ_CHR_ID = okcBTarget.DNZ_CHR_ID
  AND oksSL.CLE_ID = okcBTarget.ID
  AND okcBTarget.ORIG_SYSTEM_ID1 = okcBSource.ID
  --AND okcB.DATE_TERMINATED IS NULL;
  AND (
         (okcBSource.CLE_ID IS NULL                                     --Line being copied is a Topline that is:
          AND okcBSource.DATE_TERMINATED IS NULL                        --a) Not Terminated
          AND NOT EXISTS (select b.ID from okc_k_lines_b b              --b) Has no sublines that are Terminated
                          where b.CLE_ID= okcBSource.ID
                          and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                          and b.DATE_TERMINATED IS NOT NULL
                         )
         )
      OR
         (okcBSource.CLE_ID IS NOT NULL                             --Line being copied is a Subline that is:
          AND okcBSource.DATE_TERMINATED IS NULL                    --a) Not Terminated
          AND NOT EXISTS (select b.ID from okc_k_lines_b b          --b) Has no peer sublines that are Terminated
                          where b.CLE_ID = okcBSource.CLE_ID
                         and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                         and b.DATE_TERMINATED IS NOT NULL
                         )
         )
      )
  --npalepu added on 31-may-2006 for bug # 5178264
  AND (
         (okcBSource.CLE_ID IS NULL                                     --Line being copied is a Topline that is:
          AND okcBSource.DATE_CANCELLED IS NULL                        --a) Not Cancelled
          AND NOT EXISTS (select b.ID from okc_k_lines_b b              --b) Has no sublines that are Cancelled
                          where b.CLE_ID= okcBSource.ID
                          and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                          and b.DATE_CANCELLED IS NOT NULL
                         )
         )
      OR
         (okcBSource.CLE_ID IS NOT NULL                             --Line being copied is a Subline that is:
          AND okcBSource.DATE_CANCELLED IS NULL                    --a) Not Cancelled
          AND NOT EXISTS (select b.ID from okc_k_lines_b b          --b) Has no peer sublines that are Cancelled
                          where b.CLE_ID = okcBSource.CLE_ID
                         and b.DNZ_CHR_ID = okcBSource.DNZ_CHR_ID
                         and b.DATE_CANCELLED IS NOT NULL
                         )
         )
      )
  --end npalepu
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND okcBSource.DNZ_CHR_ID = P_From_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID;


 CURSOR GetOksLEPartial_H IS
 SELECT
   oksLE.ID AS oksLE_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID --*
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,NULL AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,NULL AS oksLE_NewParentCleID --*
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.CHR_ID IS NOT NULL
  AND oksSL.CLE_ID IS NULL
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID;

 CURSOR GetOksLEPartial_L IS
 SELECT
   oksLE.ID AS oksLE_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID --*
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID --*
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,oksSL.CLE_ID AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,decode(okcBT.CLE_ID,NULL,okcBT.ID,okcBT.CLE_ID) AS NewParentCleID
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.CHR_ID IS NULL
  AND oksSL.CLE_ID IS NOT NULL
  AND oksSL.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
  AND oksSL.CLE_ID = okcBT.ID
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID
--  AND (okcBT.DATES_CHANGED_YN = 'N' and okcBT.DATE_TERMINATED IS NULL);
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_TERMINATED IS NULL                       --b) Is not TERMINATED
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are TERMINATED
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_TERMINATED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's Dates havent changed with respect to Target
         AND okcBT.DATE_TERMINATED IS NULL                       --c) Subline is not TERMINATED
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that are TERMINATED
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_TERMINATED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not TERMINATED
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --npalepu added on 31-may-2006 for bug # 5178264
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_CANCELLED IS NULL                        --b) Is not Cancelled
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are Cancelled
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_CANCELLED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's Dates havent changed with respect to Target
         AND okcBT.DATE_CANCELLED IS NULL                        --c) Subline is not Cancelled
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that are Cancelled
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_CANCELLED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not Cancelled
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --end npalepu
      ;


 CURSOR GetOksLEPartial_HNL IS
 SELECT
   oksLE.ID AS oksLE_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID --*
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,NULL AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,NULL AS NewParentCleID --*
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.CHR_ID IS NOT NULL
  AND oksSL.CLE_ID IS NULL
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID
 UNION ALL
 SELECT
   oksLE.ID AS oksLE_OldID --*
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS oksLE_NewID --*
  ,oksLE.SEQUENCE_NUMBER AS oksLE_SEQUENCE_NUMBER
  ,oksLE.DATE_START AS oksLE_DATE_START
  ,oksLE.AMOUNT AS oksLE_AMOUNT
  ,oksLE.DATE_RECEIVABLE_GL AS oksLE_DATE_RECEIVABLE_GL
  ,oksLE.DATE_REVENUE_RULE_START AS oksLE_DATE_REVENUE_RULE_START
  ,oksLE.DATE_TRANSACTION AS oksLE_DATE_TRANSACTION
  ,oksLE.DATE_DUE AS oksLE_DATE_DUE
  ,oksLE.DATE_PRINT AS oksLE_DATE_PRINT
  ,oksLE.DATE_TO_INTERFACE AS oksLE_DATE_TO_INTERFACE
  ,NULL AS oksLE_DATE_COMPLETED
  ,1 AS oksLE_OBJECT_VERSION_NUMBER
  ,oksSL.ID AS oksLE_NewRulID --*
  ,oksLE.SECURITY_GROUP_ID AS oksLE_SECURITY_GROUP_ID
  ,oksSL.CLE_ID AS oksLE_NewCleID --*
  ,oksSL.DNZ_CHR_ID AS oksLE_NewDnzChrID --*
  ,decode(okcBT.CLE_ID,NULL,okcBT.ID,okcBT.CLE_ID) AS NewParentCleID
  ,oksLE.DATE_END AS oksLE_DATE_END
  FROM
   OKS_LEVEL_ELEMENTS oksLE
  ,OKS_STREAM_LEVELS_B oksSL
  ,OKC_K_LINES_B_TEMP okcBT
  WHERE
  oksLE.RUL_ID = oksSL.ORIG_SYSTEM_ID1
  AND oksSL.CHR_ID IS NULL
  AND oksSL.CLE_ID IS NOT NULL
  AND oksSL.DNZ_CHR_ID = okcBT.DNZ_CHR_ID
  AND oksSL.CLE_ID = okcBT.ID
  AND oksSL.DNZ_CHR_ID = P_To_Chr_ID
  AND oksLE.DNZ_CHR_ID = P_From_Chr_ID
--  AND (okcBT.DATES_CHANGED_YN = 'N' AND okcBT.DATE_TERMINATED IS NULL);
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_TERMINATED IS NULL                       --b) Is not TERMINATED
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are TERMINATED
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_TERMINATED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's Dates havent changed with respect to Target
         AND okcBT.DATE_TERMINATED IS NULL                       --c) Subline is not TERMINATED
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that are TERMINATED
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_TERMINATED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not TERMINATED
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --npalepu added on 21-may-2006 for bug # 5178264
  AND (
        (okcBT.CLE_ID IS NULL                                    --Line being copied is a Topline with
         AND okcBT.DATES_CHANGED_YN = 'N'                        --a) Dates not changed to honor target
         AND okcBT.DATE_CANCELLED IS NULL                       --b) Is not Cancelled
         AND NOT EXISTS (select b.id from okc_k_lines_b_temp b   --c) Has no sublines being copied that are Cancelled
                         where b.CLE_ID = okcBT.ID
                         and b.LINE_EXISTS_YN = 'N'
                         and b.DATE_CANCELLED is not null)
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline with
         AND okcBT.LINE_EXISTS_YN = 'N'                          --a) Top line being copied
         AND okcBT.DATES_CHANGED_YN = 'N'                        --b) Subline's Dates havent changed with respect to Target
         AND okcBT.DATE_CANCELLED IS NULL                       --c) Subline is not Cancelled
         AND NOT EXISTS (select a.ID from okc_k_lines_b_temp a   --d) Has no peer sublines that are Cancelled
                         where                                   --e) Its Top Line being copied doesnt have its Dates Changed
                          (a.CLE_ID = okcBT.CLE_ID
                          and a.LINE_EXISTS_YN = 'N'
                          and a.DATE_CANCELLED IS NOT NULL)
                         OR
                          (a.ID = okcBT.CLE_ID
                           and a.DATES_CHANGED_YN = 'Y'
                          )
                      )
        )
       OR
        (okcBT.CLE_ID IS NOT NULL                                --Line being copied is a subline that is:
         AND okcBT.LINE_EXISTS_YN = 'Y'                          --a) Being copied to an existing Target Topline
         AND okcBT.GEN_SUBLINE_BSCH_YN = 'N'                     --b) It is not Cancelled
        )                                                        --c) Its Dates haven't been changed with respect to Target TopLine
      )
  --end npalepu
      ;

l_count NUMBER;
 Begin
 If (P_Partial_Copy_YN = 'N') then
  OPEN GetOksLEFull;
 Elsif (P_Partial_Copy_YN = 'Y') then
  If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
    OPEN GetOksLEPartial_H;
  Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
    OPEN GetOksLEPartial_HNL;
  Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
  --errorout_hk('Open GetOksLEPartial_L');
    OPEN GetOksLEPartial_L;
  ELSIF (P_Target_Contract_New_YN = 'N' and P_Lines_Count = 0) THEN
    RETURN;
  End If;
 End If;

 LOOP
  If (P_Partial_Copy_YN = 'N') then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOksLEFull'
                         );
    END IF;

   FETCH GetOksLEFull BULK COLLECT INTO
      OksLERecTab.OksLE_OldID
     ,OksLERecTab.OksLE_NewID
     ,OksLERecTab.OksLE_SEQUENCE_NUMBER
     ,OksLERecTab.OksLE_DATE_START
     ,OksLERecTab.OksLE_AMOUNT
     ,OksLERecTab.OksLE_DATE_RECEIVABLE_GL
     ,OksLERecTab.OksLE_DATE_REVENUE_RULE_START
     ,OksLERecTab.OksLE_DATE_TRANSACTION
     ,OksLERecTab.OksLE_DATE_DUE
     ,OksLERecTab.OksLE_DATE_PRINT
     ,OksLERecTab.OksLE_DATE_TO_INTERFACE
     ,OksLERecTab.OksLE_DATE_COMPLETED
     ,OksLERecTab.OksLE_OBJECT_VERSION_NUMBER
     ,OksLERecTab.OksLE_NewRulID
     ,OksLERecTab.OksLE_SECURITY_GROUP_ID
     ,OksLERecTab.OksLE_NewCleID
     ,OksLERecTab.OksLE_NewDnzChrID
     ,OksLERecTab.OksLE_NewParentCleID
     ,OksLERecTab.OksLE_DATE_END
   LIMIT G_BULK_FETCH_LIMIT;
  Elsif (P_Partial_Copy_YN = 'Y') then
   If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOksLEPartial_H'
                         );
    END IF;

     FETCH GetOksLEPartial_H BULK COLLECT INTO
      OksLERecTab.OksLE_OldID
     ,OksLERecTab.OksLE_NewID
     ,OksLERecTab.OksLE_SEQUENCE_NUMBER
     ,OksLERecTab.OksLE_DATE_START
     ,OksLERecTab.OksLE_AMOUNT
     ,OksLERecTab.OksLE_DATE_RECEIVABLE_GL
     ,OksLERecTab.OksLE_DATE_REVENUE_RULE_START
     ,OksLERecTab.OksLE_DATE_TRANSACTION
     ,OksLERecTab.OksLE_DATE_DUE
     ,OksLERecTab.OksLE_DATE_PRINT
     ,OksLERecTab.OksLE_DATE_TO_INTERFACE
     ,OksLERecTab.OksLE_DATE_COMPLETED
     ,OksLERecTab.OksLE_OBJECT_VERSION_NUMBER
     ,OksLERecTab.OksLE_NewRulID
     ,OksLERecTab.OksLE_SECURITY_GROUP_ID
     ,OksLERecTab.OksLE_NewCleID
     ,OksLERecTab.OksLE_NewDnzChrID
     ,OksLERecTab.OksLE_NewParentCleID
     ,OksLERecTab.OksLE_DATE_END
     LIMIT G_BULK_FETCH_LIMIT;

   Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOksLEPartial_HNL'
                         );
    END IF;

     FETCH GetOksLEPartial_HNL BULK COLLECT INTO
      OksLERecTab.OksLE_OldID
     ,OksLERecTab.OksLE_NewID
     ,OksLERecTab.OksLE_SEQUENCE_NUMBER
     ,OksLERecTab.OksLE_DATE_START
     ,OksLERecTab.OksLE_AMOUNT
     ,OksLERecTab.OksLE_DATE_RECEIVABLE_GL
     ,OksLERecTab.OksLE_DATE_REVENUE_RULE_START
     ,OksLERecTab.OksLE_DATE_TRANSACTION
     ,OksLERecTab.OksLE_DATE_DUE
     ,OksLERecTab.OksLE_DATE_PRINT
     ,OksLERecTab.OksLE_DATE_TO_INTERFACE
     ,OksLERecTab.OksLE_DATE_COMPLETED
     ,OksLERecTab.OksLE_OBJECT_VERSION_NUMBER
     ,OksLERecTab.OksLE_NewRulID
     ,OksLERecTab.OksLE_SECURITY_GROUP_ID
     ,OksLERecTab.OksLE_NewCleID
     ,OksLERecTab.OksLE_NewDnzChrID
     ,OksLERecTab.OksLE_NewParentCleID
     ,OksLERecTab.OksLE_DATE_END
     LIMIT G_BULK_FETCH_LIMIT;

   Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHing from GetOksLEPartial_L'
                         );
    END IF;
--errorout_hk('Fetching GetOksLEPartial_L');
     FETCH GetOksLEPartial_L BULK COLLECT INTO
      OksLERecTab.OksLE_OldID
     ,OksLERecTab.OksLE_NewID
     ,OksLERecTab.OksLE_SEQUENCE_NUMBER
     ,OksLERecTab.OksLE_DATE_START
     ,OksLERecTab.OksLE_AMOUNT
     ,OksLERecTab.OksLE_DATE_RECEIVABLE_GL
     ,OksLERecTab.OksLE_DATE_REVENUE_RULE_START
     ,OksLERecTab.OksLE_DATE_TRANSACTION
     ,OksLERecTab.OksLE_DATE_DUE
     ,OksLERecTab.OksLE_DATE_PRINT
     ,OksLERecTab.OksLE_DATE_TO_INTERFACE
     ,OksLERecTab.OksLE_DATE_COMPLETED
     ,OksLERecTab.OksLE_OBJECT_VERSION_NUMBER
     ,OksLERecTab.OksLE_NewRulID
     ,OksLERecTab.OksLE_SECURITY_GROUP_ID
     ,OksLERecTab.OksLE_NewCleID
     ,OksLERecTab.OksLE_NewDnzChrID
     ,OksLERecTab.OksLE_NewParentCleID
     ,OksLERecTab.OksLE_DATE_END
     LIMIT G_BULK_FETCH_LIMIT;

   End If;
  End If;

--errorout_hk('GetOksLEPartial_L count -'||OksLERecTab.OksLE_NewID.count);

  FORALL i IN OksLERecTab.OksLE_NewID.FIRST .. OksLERecTab.OksLE_NewID.LAST
  INSERT INTO OKS_LEVEL_ELEMENTS(
   ID
  ,SEQUENCE_NUMBER
  ,DATE_START
  ,AMOUNT
  ,DATE_RECEIVABLE_GL
  ,DATE_REVENUE_RULE_START
  ,DATE_TRANSACTION
  ,DATE_DUE
  ,DATE_PRINT
  ,DATE_TO_INTERFACE
  ,DATE_COMPLETED
  ,OBJECT_VERSION_NUMBER
  ,RUL_ID
  ,SECURITY_GROUP_ID
  ,CLE_ID
  ,DNZ_CHR_ID
  ,PARENT_CLE_ID
  ,DATE_END
  ,CREATED_BY
  ,CREATION_DATE
  ,LAST_UPDATED_BY
  ,LAST_UPDATE_DATE
  )
  SELECT
   OksLERecTab.OksLE_NewID(i)
  ,OksLERecTab.OksLE_SEQUENCE_NUMBER(i)
  ,OksLERecTab.OksLE_DATE_START(i)
  ,OksLERecTab.OksLE_AMOUNT(i)
  ,OksLERecTab.OksLE_DATE_RECEIVABLE_GL(i)
  ,OksLERecTab.OksLE_DATE_REVENUE_RULE_START(i)
  ,OksLERecTab.OksLE_DATE_TRANSACTION(i)
  ,OksLERecTab.OksLE_DATE_DUE(i)
  ,OksLERecTab.OksLE_DATE_PRINT(i)
  ,OksLERecTab.OksLE_DATE_TO_INTERFACE(i)
  ,OksLERecTab.OksLE_DATE_COMPLETED(i)
  ,OksLERecTab.OksLE_OBJECT_VERSION_NUMBER(i)
  ,OksLERecTab.OksLE_NewRulID(i)
  ,OksLERecTab.OksLE_SECURITY_GROUP_ID(i)
  ,OksLERecTab.OksLE_NewCleID(i)
  ,OksLERecTab.OksLE_NewDnzChrID(i)
  ,OksLERecTab.OksLE_NewParentCleID(i)
  ,OksLERecTab.OksLE_DATE_END(i)
  ,FND_GLOBAL.USER_ID
  ,SYSDATE
  ,FND_GLOBAL.USER_ID
  ,SYSDATE
  FROM DUAL;

  IF (P_Partial_Copy_YN = 'N') then
   EXIT WHEN GetOksLEFull%NOTFOUND;
  Elsif (P_Partial_Copy_YN = 'Y') then
   If (P_Target_Contract_New_YN = 'Y' and P_Lines_Count = 0) then
     EXIT WHEN GetOksLEPartial_H%NOTFOUND;
   Elsif (P_Target_Contract_New_YN = 'Y' and P_Lines_Count > 0) then
     EXIT WHEN GetOksLEPartial_HNL%NOTFOUND;
   Elsif (P_Target_Contract_New_YN = 'N' and P_Lines_Count > 0) then
     EXIT WHEN GetOksLEPartial_L%NOTFOUND;
   End If;
  End If;


 End LOOP;

 If (GetOksLEFull%ISOPEN) then
  CLOSE GetOksLEFull;
 Elsif (GetOksLEPartial_H%ISOPEN) then
  CLOSE GetOksLEPartial_H;
 Elsif (GetOksLEPartial_HNL%ISOPEN) then
  CLOSE GetOksLEPartial_HNL;
 Elsif (GetOksLEPartial_L%ISOPEN) then
  CLOSE GetOksLEPartial_L;
 End If;


    EXCEPTION
          WHEN OTHERS THEN
		 If (GetOksLEFull%ISOPEN) then
		  CLOSE GetOksLEFull;
		 Elsif (GetOksLEPartial_H%ISOPEN) then
		  CLOSE GetOksLEPartial_H;
		 Elsif (GetOksLEPartial_HNL%ISOPEN) then
		  CLOSE GetOksLEPartial_HNL;
		 Elsif (GetOksLEPartial_L%ISOPEN) then
		  CLOSE GetOksLEPartial_L;
		 End If;

          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;


 End copy_oks_level_elements;


--==============================================================
--Procedure update_line_inv_and_acct_rule: This procedure will be called just before Billing Schedule copy
--to update the Invoice and Accounting Rules on the copied lines with the Target Header Invoice and
--Accounting Rules. This update is done ONLY IF the Invoice/Accounting Rule is NULL on the Line.
--Parameters:
--	P_To_Chr_ID   : Header ID of the Target Contract
--	P_Partial_Copy_YN : Flag to indicate if this is flow is Full Copy or Component Copy
--==============================================================
Procedure update_line_inv_and_acct_rule(P_To_Chr_ID IN NUMBER
				       ,P_Partial_Copy_YN IN VARCHAR2
				       ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'update_line_inv_and_acct_rule';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 /**Gets all Billing related attributes for the Target Contract and populates them in Package Varialbes.
    These will be used :
    a) In this routine to update the Inv and Acct Rules on the copied lines
    b) In the routine create_bsch_using_PPSetup to generate Billing Schedules for Target Header and all its copied top lines
  */
  CURSOR GetTrgHdrPPAttributes IS
  SELECT
   okcH.START_DATE
  ,okcH.END_DATE
  ,okcH.INV_RULE_ID
  ,oksH.ACCT_RULE_ID
  ,oksH.PERIOD_START
  ,oksH.PERIOD_TYPE
  ,oksH.PRICE_UOM
  ,oksH.BILLING_SCHEDULE_TYPE
  from
   OKC_K_HEADERS_B okcH
  ,OKS_K_HEADERS_B oksH
  where okcH.ID = P_To_Chr_ID
  AND oksH.CHR_ID = okcH.ID;

  CURSOR GetTargetLines_F IS
  Select
  a.ID
  FROM
  OKC_K_LINES_B a
  where a.DNZ_CHR_ID = P_To_Chr_ID
  and a.CLE_ID IS NULL;

  CURSOR GetTargetLines_P IS
  Select
  okcB.ID
  FROM
  OKC_K_LINES_B okcB
  ,OKC_K_LINES_B_TEMP okcBT
  where okcB.ID = okcBT.ID
  and okcB.DNZ_CHR_ID = P_To_Chr_ID
  and okcB.CLE_ID IS NULL;

  LineIDTab NumTabType;
Begin
  --Get Partial Period Attributes from Target Contract.
  OPEN GetTrgHdrPPAttributes;
  FETCH GetTrgHdrPPAttributes
  INTO
   G_TrgHdrStartDate
  ,G_TrgHdrEndDate
  ,G_TrgHdrInvRuleID
  ,G_TrgHdrAcctRuleID
  ,G_TrgHdrPeriodStart
  ,G_TrgHdrPeriodType
  ,G_TrgHdrPriceUOM
  ,G_TrgHdrBillingScheduleType;
  CLOSE GetTrgHdrPPAttributes;

  IF (P_Partial_Copy_YN = 'N') then
   OPEN GetTargetLines_F;
  ELSIF (P_Partial_Copy_YN = 'Y') then
   OPEN GetTargetLines_P;
  END IF;

  LOOP
  IF (P_Partial_Copy_YN = 'N') then
   FETCH GetTargetLines_F BULK COLLECT INTO LineIDTab LIMIT G_BULK_FETCH_LIMIT;
  ELSIF (P_Partial_Copy_YN = 'Y') then
   FETCH GetTargetLines_P BULK COLLECT INTO LineIDTab LIMIT G_BULK_FETCH_LIMIT;
  END IF;

  Begin
   FORALL i IN LineIDTab.FIRST..LineIDTab.LAST
    UPDATE OKC_K_LINES_B a
    SET a.INV_RULE_ID = nvl(a.INV_RULE_ID,G_TrgHdrInvRuleID)
    WHERE a.ID = LineIDTab(i);
  End;
  Begin
   FORALL j IN LineIDTab.FIRST..LineIDTab.LAST
    UPDATE OKS_K_LINES_B a
    SET a.ACCT_RULE_ID = nvl(a.ACCT_RULE_ID,G_TrgHdrAcctRuleID)
    WHERE a.DNZ_CHR_ID = P_To_Chr_ID
    and a.CLE_ID = LineIDTab(j);
  End;
    If P_Partial_Copy_YN = 'N' then
      EXIT WHEN GetTargetLines_F%NOTFOUND;
    Elsif P_Partial_Copy_YN = 'Y' then
      EXIT WHEN GetTargetLines_P%NOTFOUND;
    End If;

  END LOOP;

  IF GetTargetLines_F%ISOPEN THEN
    CLOSE GetTargetLines_F;
  ELSIF GetTargetLines_P%ISOPEN THEN
    CLOSE GetTargetLines_P;
  END IF;

 EXCEPTION
  WHEN OTHERS THEN
   x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
   IF GetTrgHdrPPAttributes%ISOPEN then
    CLOSE GetTrgHdrPPAttributes;
   End If;
   IF GetTargetLines_F%ISOPEN then
    CLOSE GetTargetLines_F;
   End IF;
   IF GetTargetLines_P%ISOPEN THEN
    CLOSE GetTargetLines_P;
   End IF;

   FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in update_line_inv_and_acct_rule', substr(SQLERRM,1,240));


End update_line_inv_and_acct_rule;

--==============================================================
--Procedure copy_bsch_for_SkippedLines: Used to create PM Stream levels and PM Schedules for those lines
--lines whose PM schedule related entities couldnt be bulk copied because their effective dates had to
--be changed.
--Parameters to be passed to Billing Schedule creation API
--Inv_Rule_ID : Value present only for top-line. Use that for subline also
--Billing Schedule Type: Value always present for top line. For subline if value is null, take it from top line
--StreamLvl_tbl:
--    id                  	   number,
--    CHR_ID	                   Number,
--    CLE_ID	                   Number,
--    DNZ_CHR_ID	                   Number,
--    Sequence_no	        	   Number,
--    uom_code	                   Varchar2 (3),
--    start_date	                   Date,
--    end_date                       date,
--    level_periods	           Number,
--    uom_per_period	           Number,
--    advance_periods	           Number,
--    level_amount	           Number,
--    invoice_offset_days	           Number,
--    interface_offset_days	   Number,
--    comments	                   Varchar2 (240),
--    due_ARR_YN	                   Varchar2 (1),
--    AMOUNT	                   Number,
--    LINES_DETAILED_YN	           Varchar2 (1),
--    Rule_Information1              Varchar2 (450),
--    Rule_Information2              Varchar2 (450),
--    Rule_Information3              Varchar2 (450),
--    Rule_Information4              Varchar2 (450),
--    Rule_Information_Category      Varchar2 (90),
--    Object1_Id1                    Varchar2 (40)
--==============================================================
  Procedure copy_bsch_for_SkippedLines(P_To_Chr_ID 	       IN NUMBER
				      ,P_From_Chr_ID	       IN NUMBER
				      ,P_Partial_Copy_YN       IN VARCHAR2
        			      ,p_init_msg_list         IN VARCHAR2 DEFAULT OKC_API.G_FALSE
        			      ,x_return_status         OUT NOCOPY VARCHAR2
        			      ,x_msg_count             OUT NOCOPY NUMBER
        			      ,x_msg_data              OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'copy_bsch_for_SkippedLines';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

  TYPE TargetLinesRecTabType IS RECORD
  ( LINE_ID NumTabType
   ,ORIG_SYSTEM_ID1 NumTabType
   ,CLE_ID NumTabType
   ,INV_RULE_ID NumTabType
   ,BILLING_SCHEDULE_TYPE OksB_BillScheduleTypeTabType
   ,START_DATE DateTabType
   ,END_DATE DateTabType
   ,SOURCE_LINE_DATE_TERMINATED DateTabType
   ,GEN_SUBLINE_BSCH_YN FlagTabType
  );

 TargetLinesRecTab TargetLinesRecTabType;

  --Gets all Top Lines whose DATE_TERMINATED IS NOT NULL or those which have a subline with DATE_TERMINATED as NOT NULL.
  --The Top Line API will be used to generate BSCHs for such Top Lines and its sublines.
  CURSOR GetTargetLinesForBSCHRegen_F IS
  SELECT
  okcB.ID as  LINE_ID
 ,okcB.ORIG_SYSTEM_ID1 as ORIG_SYSTEM_ID1
 ,okcB.CLE_ID CLE_ID
 ,decode(okcB.CLE_ID,NULL,okcB.INV_RULE_ID --its a topline
         ,(select a.INV_RULE_ID from okc_k_lines_b a where id = okcB.CLE_ID) --its a subline
        ) as INV_RULE_ID
 ,decode(okcB.CLE_ID,NULL,oksB.BILLING_SCHEDULE_TYPE --its a topline
        ,decode(oksB.BILLING_SCHEDULE_TYPE
		,NULL,(select a.BILLING_SCHEDULE_TYPE from oks_k_lines_b a where a.CLE_ID = okcB.CLE_ID)
                ,oksB.BILLING_SCHEDULE_TYPE
		) -- its a subline
        ) as BILLING_SCHEDULE_TYPE
 ,okcB.START_DATE as START_DATE
 ,okcB.END_DATE as END_DATE
 ,okcB_Source.DATE_TERMINATED as SOURCE_LINE_DATE_TERMINATED
 ,NULL as GEN_SUBLINE_BSCH_YN
  from
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_LINES_B okcB_Source
  where okcB.DNZ_CHR_ID = P_To_Chr_ID
  and okcB.ID = oksB.CLE_ID
  and okcB_Source.ID = okcB.ORIG_SYSTEM_ID1
  and okcB_Source.DNZ_CHR_ID = P_From_Chr_ID
  and okcB.CLE_ID IS NULL
  --npalepu modified on 31-may-2006 for bug # 5178264
  /* and (okcB_Source.DATE_TERMINATED IS NOT NULL
       OR
       (okcB_Source.DATE_TERMINATED IS NULL
        AND EXISTS (select b.ID from okc_k_lines_b b where b.CLE_ID= okcB_Source.ID and b.DATE_TERMINATED IS NOT NULL)
       )
      ); */
  and ((okcB_Source.DATE_TERMINATED IS NOT NULL
       OR
       (okcB_Source.DATE_TERMINATED IS NULL
        AND EXISTS (select b.ID from okc_k_lines_b b where b.CLE_ID= okcB_Source.ID and b.DATE_TERMINATED IS NOT NULL)
       )
      ) OR
      (okcB_Source.DATE_CANCELLED IS NOT NULL
       OR
       (okcB_Source.DATE_CANCELLED IS NULL
        AND EXISTS (select b.ID from okc_k_lines_b b where b.CLE_ID= okcB_Source.ID and b.DATE_CANCELLED IS NOT NULL)
       )
      ));
  --end npalepu


  CURSOR GetTargetLinesForBSCHRegen_P IS
  SELECT
  okcB.ID as  LINE_ID
 ,okcB.ORIG_SYSTEM_ID1 as ORIG_SYSTEM_ID1
 ,okcB.CLE_ID CLE_ID
 ,decode(okcB.CLE_ID,NULL,okcB.INV_RULE_ID --its a topline
         ,(select a.INV_RULE_ID from okc_k_lines_b a where id = okcB.CLE_ID) --its a subline
        ) as INV_RULE_ID
 ,decode(okcB.CLE_ID,NULL,oksB.BILLING_SCHEDULE_TYPE --its a topline
        ,decode(oksB.BILLING_SCHEDULE_TYPE
                ,NULL,(select a.BILLING_SCHEDULE_TYPE from oks_k_lines_b a where a.CLE_ID = okcB.CLE_ID)
                ,oksB.BILLING_SCHEDULE_TYPE
               ) -- its a subline
        ) as BILLING_SCHEDULE_TYPE
 ,okcB.START_DATE as START_DATE
 ,okcB.END_DATE as END_DATE
 ,okcBT.DATE_TERMINATED as SOURCE_LINE_DATE_TERMINATED
 ,okcBT.GEN_SUBLINE_BSCH_YN as GEN_SUBLINE_BSCH_YN
  from
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_LINES_B_TEMP okcBT
  where okcB.DNZ_CHR_ID = P_To_Chr_ID
  and okcB.ID = oksB.CLE_ID
  and okcBT.ID = okcB.ID
  --npalepu modified on 31-may-2006 for bug # 5178264
 /* and (
         (okcBT.CLE_ID IS NULL AND (okcBT.DATES_CHANGED_YN = 'Y'
                                   OR okcBT.DATE_TERMINATED IS NOT NULL
                                   OR (
                                       okcBT.DATE_TERMINATED IS NULL and EXISTS (select b.ID from okc_k_lines_b_temp b
                                                                                 where b.CLE_ID= okcBT.ID
                                                                                 and b.DATE_TERMINATED IS NOT NULL
                                                                                 and b.LINE_EXISTS_YN = 'N')
                                      )
                                  )
         )
      OR (okcBT.CLE_ID IS NOT NULL and okcBT.LINE_EXISTS_YN = 'Y' and okcBT.GEN_SUBLINE_BSCH_YN = 'Y')
      ); */
  and ((
         (okcBT.CLE_ID IS NULL AND (okcBT.DATES_CHANGED_YN = 'Y'
                                   OR okcBT.DATE_TERMINATED IS NOT NULL
                                   OR (
                                       okcBT.DATE_TERMINATED IS NULL and EXISTS (select b.ID from okc_k_lines_b_temp b
                                                                                 where b.CLE_ID= okcBT.ID
                                                                                 and b.DATE_TERMINATED IS NOT NULL
                                                                                 and b.LINE_EXISTS_YN = 'N')
                                      )
                                  )
         )
      OR (okcBT.CLE_ID IS NOT NULL and okcBT.LINE_EXISTS_YN = 'Y' and okcBT.GEN_SUBLINE_BSCH_YN = 'Y')
      )
      OR
      (
         (okcBT.CLE_ID IS NULL AND (okcBT.DATES_CHANGED_YN = 'Y'
                                   OR okcBT.DATE_CANCELLED IS NOT NULL
                                   OR (
                                       okcBT.DATE_CANCELLED IS NULL and EXISTS (select b.ID from okc_k_lines_b_temp b
                                                                                 where b.CLE_ID= okcBT.ID
                                                                                 and b.DATE_CANCELLED IS NOT NULL
                                                                                 and b.LINE_EXISTS_YN = 'N')
                                      )
                                  )
         )
      OR (okcBT.CLE_ID IS NOT NULL and okcBT.LINE_EXISTS_YN = 'Y' and okcBT.GEN_SUBLINE_BSCH_YN = 'Y')
      ));

    --end npalepu

  CURSOR GetStreamsForSourceTopLine(l_Source_Top_Line_ID IN NUMBER) IS
  SELECT
   SEQUENCE_NO
  ,UOM_CODE
  ,START_DATE
  ,END_DATE
  ,LEVEL_PERIODS
  ,UOM_PER_PERIOD
  ,ADVANCE_PERIODS
  ,LEVEL_AMOUNT
  ,INVOICE_OFFSET_DAYS
  ,INTERFACE_OFFSET_DAYS
  ,COMMENTS
  ,DUE_ARR_YN
  ,AMOUNT
  ,LINES_DETAILED_YN
  FROM
  OKS_STREAM_LEVELS_B where CLE_ID = l_Source_Top_Line_ID
  ORDER BY SEQUENCE_NO;

  TYPE l_SourceStreams_tbl_Type IS TABLE OF GetStreamsForSourceTopLine%ROWTYPE INDEX BY BINARY_INTEGER;
  l_SourceStreams_tbl l_SourceStreams_tbl_Type;

  l_TargetTopLineStreams_tbl OKS_BILL_SCH.StreamLvl_tbl;
  l_TargetTopLineStreams_tbl_Ctr NUMBER := 0;
  l_bil_sch_out_tbl   OKS_BILL_SCH.itembillsch_tbl;

  l_stage varchar2(100) := null;

  BEGIN --Main Begin
    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
             FND_LOG.string(FND_LOG.level_procedure
                    ,l_module_name
                    ,'Entered copy_bsch_for_SkippedLines'
		   ||' P_From_Chr_ID :'||P_From_Chr_ID
		   ||' P_To_Chr_ID :'||P_To_Chr_ID
		   ||' P_Partial_Copy_YN :'||P_Partial_Copy_YN
                     );
    END IF;

  IF (P_Partial_Copy_YN = 'Y') then
   OPEN GetTargetLinesForBSCHRegen_P;
  ELSIF (P_Partial_Copy_YN = 'N') then
   OPEN GetTargetLinesForBSCHRegen_F;
  END IF;

  LOOP --1)
   IF (P_Partial_Copy_YN = 'Y') then
    FETCH GetTargetLinesForBSCHRegen_P BULK COLLECT INTO
     TargetLinesRecTab.LINE_ID
    ,TargetLinesRecTab.ORIG_SYSTEM_ID1
    ,TargetLinesRecTab.CLE_ID
    ,TargetLinesRecTab.INV_RULE_ID
    ,TargetLinesRecTab.BILLING_SCHEDULE_TYPE
    ,TargetLinesRecTab.START_DATE
    ,TargetLinesRecTab.END_DATE
    ,TargetLinesRecTab.SOURCE_LINE_DATE_TERMINATED
    ,TargetLinesRecTab.GEN_SUBLINE_BSCH_YN LIMIT G_BULK_FETCH_LIMIT;

   ELSIF (P_Partial_Copy_YN = 'N') then
    FETCH GetTargetLinesForBSCHRegen_F BULK COLLECT INTO
     TargetLinesRecTab.LINE_ID
    ,TargetLinesRecTab.ORIG_SYSTEM_ID1
    ,TargetLinesRecTab.CLE_ID
    ,TargetLinesRecTab.INV_RULE_ID
    ,TargetLinesRecTab.BILLING_SCHEDULE_TYPE
    ,TargetLinesRecTab.START_DATE
    ,TargetLinesRecTab.END_DATE
    ,TargetLinesRecTab.SOURCE_LINE_DATE_TERMINATED
    ,TargetLinesRecTab.GEN_SUBLINE_BSCH_YN LIMIT G_BULK_FETCH_LIMIT;

   END IF;

   IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
    FND_LOG.string(FND_LOG.level_statement,l_module_name,' Lines Count :'||TargetLinesRecTab.LINE_ID.COUNT);
   END IF;

  IF (TargetLinesRecTab.LINE_ID.COUNT > 0) then
   BEGIN --Begin for looping through TargetLinesRecTab
    FOR i in TargetLinesRecTab.LINE_ID.FIRST..TargetLinesRecTab.LINE_ID.LAST LOOP --2)

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Target Line ID : '||TargetLinesRecTab.LINE_ID(i)
			||' Target Line Orig System ID1:'||TargetLinesRecTab.ORIG_SYSTEM_ID1(i)
			||' Target Line CLE_ID :'||TargetLinesRecTab.CLE_ID(i)
			||' Target line INV_RULE_ID:'||TargetLinesRecTab.INV_RULE_ID(i)
			||' Target Line BSCH_TYPE:'||TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i)
			||' Target Line Start Date:'||TargetLinesRecTab.START_DATE(i)
			||' Target Line End Date:'||TargetLinesRecTab.END_DATE(i)
			||' Target Line GEN_SUBLINE_BSCH_YN:'||TargetLinesRecTab.GEN_SUBLINE_BSCH_YN(i)
                         );
        END IF;

     IF (TargetLinesRecTab.CLE_ID(i) IS NULL) then
      l_SourceStreams_tbl.DELETE;
      l_TargetTopLineStreams_tbl.DELETE;
      l_TargetTopLineStreams_tbl_Ctr := 0;

        BEGIN --Begin of Fetch from GetStreamsForSourceTopLine
         OPEN GetStreamsForSourceTopLine(TargetLinesRecTab.ORIG_SYSTEM_ID1(i));
         LOOP --3)
         FETCH GetStreamsForSourceTopLine BULK COLLECT INTO l_SourceStreams_tbl LIMIT G_BULK_FETCH_LIMIT;
         IF (l_SourceStreams_tbl.COUNT > 0) then
          BEGIN --Begin of looping through l_SourceStreams_tbl
           FOR j IN l_SourceStreams_tbl.FIRST..l_SourceStreams_tbl.LAST LOOP --4)
            l_TargetTopLineStreams_tbl_Ctr := l_TargetTopLineStreams_tbl_Ctr + 1;

            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).id := FND_API.g_miss_num;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).chr_id := FND_API.g_miss_num;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).cle_id := TargetLinesRecTab.LINE_ID(i);
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).dnz_chr_id := P_To_Chr_ID;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).sequence_no := l_SourceStreams_tbl(j).sequence_no;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).uom_code := l_SourceStreams_tbl(j).uom_code;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).start_date := l_SourceStreams_tbl(j).start_date;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).end_date := l_SourceStreams_tbl(j).end_date;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).level_periods := l_SourceStreams_tbl(j).level_periods;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).uom_per_period := l_SourceStreams_tbl(j).uom_per_period;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).advance_periods := l_SourceStreams_tbl(j).advance_periods;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).level_amount := l_SourceStreams_tbl(j).level_amount;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).invoice_offset_days := l_SourceStreams_tbl(j).invoice_offset_days;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).interface_offset_days := l_SourceStreams_tbl(j).interface_offset_days;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).comments := l_SourceStreams_tbl(j).comments;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).due_arr_yn := l_SourceStreams_tbl(j).due_arr_yn;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).amount := l_SourceStreams_tbl(j).amount;
            l_TargetTopLineStreams_tbl(l_TargetTopLineStreams_tbl_Ctr).lines_detailed_yn := l_SourceStreams_tbl(j).lines_detailed_yn;
           END LOOP; --End LOOP for looping through Source Streams PLSQL table --4)
              EXCEPTION
   	    WHEN OTHERS THEN
                   x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                   l_stage := 'Looping through l_SourceStreams_tbl';
                   FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage , substr(SQLERRM,1,240));
          END; --End of looping through l_SourceStreams_tbl
         END IF; -- End of if check for l_SourceStreams_tbl.COUNT > 0

         EXIT WHEN GetStreamsForSourceTopLine%NOTFOUND;
         END LOOP; --End LOOP for BULK FETCH of Source Streams --3)
         IF (GetStreamsForSourceTopLine%ISOPEN) then
           CLOSE GetStreamsForSourceTopLine;
         End If;
            EXCEPTION
   	   WHEN OTHERS THEN
   		l_stage := 'Fetching from cursor GetStreamsForSourceTopLine';
   	        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                   FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage , substr(SQLERRM,1,240));

        END; --End of Fetch from GetStreamsForSourceTopLine

         ---------Begin of BSCH Creation for Top Line----------
        BEGIN
         --OKS_BILL_SCH.create_bill_sch_rules
           OKS_BILL_SCH.create_bill_sch_rules(
                            p_billing_type => TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i)
                           ,p_sll_tbl => l_TargetTopLineStreams_tbl
                           ,p_invoice_rule_id => TargetLinesRecTab.INV_RULE_ID(i)
                           ,x_bil_sch_out_tbl => l_bil_sch_out_tbl
                           ,x_return_status => x_return_status);

         IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'After call to OKS_BILL_SCH.create_bill_sch_rules'
                        ||',x_return_status='||x_return_status
                         );
         END IF;
         IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
          FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_rules', substr(SQLERRM,1,240));
          RETURN;
         END IF;


            EXCEPTION
            WHEN OTHERS THEN
                IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.EXCEPTION'
                        ,'Exception in call to OKS_BILL_SCH.create_bill_sch_rules, x_return_status ='||x_return_status
                         ||'SQLERRM ='||SQLERRM
                         );
                END IF;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
            FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_rules', substr(SQLERRM,1,240));
            RAISE;
       END;
       --------End of BSCH Creation for Top Line





     ELSIF (TargetLinesRecTab.CLE_ID(i) IS NOT NULL) then
       IF (TargetLinesRecTab.GEN_SUBLINE_BSCH_YN(i) = 'Y') then
        --------Begin of BSCH Creation for Subline------------

         BEGIN
            Oks_bill_sch.Create_Bill_Sch_CP(
                                          p_top_line_id      => TargetLinesRecTab.CLE_ID(i)
                                         ,p_cp_line_id       => TargetLinesRecTab.LINE_ID(i)
                                         ,p_cp_new           => 'Y'
                                         ,x_return_status    => x_return_status
                                         ,x_msg_count        => x_msg_count
                                         ,x_msg_data         => x_msg_data
                                          );
         IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'After call to OKS_BILL_SCH.Create_Bill_Sch_CP'
                        ||',x_return_status='||x_return_status
                         );
         END IF;
         IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
          FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_cp', substr(SQLERRM,1,240));
          RETURN;
         END IF;




              EXCEPTION
              WHEN OTHERS THEN
                  IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                   FND_LOG.string(FND_LOG.level_unexpected
                          ,l_module_name||'.EXCEPTION'
                          ,'Exception in call to OKS_BILL_SCH.create_bill_sch_cp, x_return_status ='||x_return_status
                           ||'SQLERRM ='||SQLERRM
                           );
                  END IF;
              x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
              FND_MSG_PUB.add_exc_msg(g_pkg_name, 'OKS_PM_PROGRAMS_PVT.RENEW_PM_PROGRAM_SCHEDULE', substr(SQLERRM,1,240));
              RAISE;
         END;
       --------End of BSCH Creation for Subline---------------

       END IF; --End If for GEN_SUBLINE_BSCH_YN = 'Y'

     END IF; --End If for CLE_ID is NULL check

       If (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
           ,l_module_name
           ,'Return status from OKS_BILL_SCH : x_return_status ='||x_return_status
            );
        END IF;
        RETURN;
       End If;

    END LOOP; --End LOOP for looping through TargetLinesRecTab PLSQL table --2)
	EXCEPTION WHEN OTHERS THEN
          l_stage := 'Looping through TargetLinesRecTab';
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage , substr(SQLERRM,1,240));
   END; --End of Begin for looping through TargetLinesRecTab
  END IF; --End of If check for TargetLinesRecTab.LINE_ID.COUNT > 0

   IF (P_Partial_Copy_YN = 'Y') then
    EXIT WHEN GetTargetLinesForBSCHRegen_P%NOTFOUND;
   ELSIF (P_Partial_Copy_YN = 'N') then
    EXIT WHEN GetTargetLinesForBSCHRegen_F%NOTFOUND;
   END IF;

  END LOOP; --End LOOP for BULK FETCH from GetTargetLinesForBSCHRegen_P cursor --1)
            --or GetTargetLinesForBSCHRegen_F cursor

  IF GetStreamsForSourceTopLine%ISOPEN THEN
    CLOSE GetStreamsForSourceTopLine;
  END IF;
  IF GetTargetLinesForBSCHRegen_P%ISOPEN THEN
    CLOSE GetTargetLinesForBSCHRegen_P;
  ELSIF GetTargetLinesForBSCHRegen_F%ISOPEN THEN
    CLOSE GetTargetLinesForBSCHRegen_F;
  END IF;



     EXCEPTION
        WHEN OTHERS THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          IF GetStreamsForSourceTopLine%ISOPEN THEN
           CLOSE GetStreamsForSourceTopLine;
          END IF;
          IF GetTargetLinesForBSCHRegen_P%ISOPEN THEN
           CLOSE GetTargetLinesForBSCHRegen_P;
          ELSIF GetTargetLinesForBSCHRegen_F%ISOPEN THEN
           CLOSE GetTargetLinesForBSCHRegen_F;
          END IF;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;
End copy_bsch_for_SkippedLines;

--------------------------------
Function GetSubscriptionFrequency(p_line_id IN NUMBER) RETURN VARCHAR2 IS
CURSOR getFrequency IS
SELECT frequency
FROM   OKS_SUBSCR_HEADER_B
WHERE  cle_id = p_line_id;

l_Frequency OKS_SUBSCR_HEADER_B.FREQUENCY%TYPE;

Begin
 OPEN getFrequency;
 FETCH getFrequency INTO l_Frequency;
 CLOSE getFrequency;
 RETURN l_Frequency;

End GetSubscriptionFrequency;

--This routine creates is a wrapper around the Billing Schedule APIs for creating Header and Line Billing Schedules.
--This would be used to create Header or Line Billing Schedules using the Partial Period Setup on the Target Contract header
--This routine gets called when copying a) To New Contract, to create the Billing Schedule for header. The PP Setup on Header would be used
--b) To an EXISTING contract, to create the Billing Schedules for lines that are copied , using the PP Setup on Header.
Procedure instantiate_bsch_using_PPSetup(P_To_Chr_ID IN NUMBER
					,P_To_Line_ID IN NUMBER
					,StartDate IN DATE
					,EndDate IN DATE
                                        ,PeriodStart IN VARCHAR2
					,HdrPriceUOM IN VARCHAR2
				        ,LinePriceUOM IN VARCHAR2
                                        ,InvoiceRuleID IN NUMBER
					,BillingScheduleType IN VARCHAR2
                                        -- npalepu added on 22-may-2006
                                        ,P_LSE_ID  NUMBER
                                        --end npalepu
					--NECHATUR 23-Jun-2006 Bug#5349539 Declaring Interface Offset Days and Invoice Offset Days parameters
                                        ,P_INTERFACE_OFFSET_DAYS NUMBER
                                        ,P_INVOICE_OFFSET_DAYS NUMBER
                                        --End NECHATUR Bug#5349539
                                        ,x_return_status OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'instantiate_bsch_using_PPSetup';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;


  l_HdrStreams_tbl     OKS_BILL_SCH.StreamLvl_tbl;
  l_HdrStreams_tbl_Ctr NUMBER := 0;

  l_LineStreams_tbl OKS_BILL_SCH.StreamLvl_tbl;
  l_LineStreams_tbl_Ctr NUMBER := 0;

  l_bil_sch_out_tbl   OKS_BILL_SCH.itembillsch_tbl;
  l_tce_code         VARCHAR2(100);
  l_uom_quantity     NUMBER;
  l_level_periods NUMBER;

  l_resultant_PriceUOM OKS_K_LINES_B.PRICE_UOM%TYPE;

Begin
             IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
              FND_LOG.string(FND_LOG.level_procedure
                            ,l_module_name
                            ,'Begin instantiate_bsch_using_PPSetup'
                           ||' P_To_Chr_ID : '||P_To_Chr_ID
			   ||' P_To_Line_ID : '||P_To_Line_ID
                           ||' Startdate : '||StartDate
                           ||' EndDate   : '||EndDate
                           ||' InvRuleID : '||InvoiceRuleID
                           ||' PeriodStart : '||PeriodStart
                           ||' HdrPriceUOM : '||HdrPriceUOM
			   ||' LinePriceUOM :'||LinePriceUOM
                           ||' BillingScheduleType : '||BillingScheduleType
                            );
             END IF;

    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   IF P_To_Line_ID IS NULL then
    l_resultant_PriceUOM := HdrPriceUOM;
   ELSIF P_To_Line_ID IS NOT NULL then
    l_resultant_PriceUOM := LinePriceUOM;
   End IF;

/* hkamdar 28-Aug-2006. Commentd for Bug# 5458842.
      --npalepu added on 22-may-2006 for bug # 5207620
      IF l_resultant_PriceUOM IS NOT NULL then
        IF P_LSE_ID = 46 AND P_To_Line_ID IS NOT NULL  THEN
           l_resultant_PriceUOM := OKS_SUBSCRIPTION_PVT.Map_Freq_Uom(l_resultant_PriceUOM);
        End IF;
      End IF;
      --end npalepu
*/
-- End hkamdar for Bug# 545882.

      IF l_resultant_PriceUOM IS NOT NULL then
       OKS_BILL_UTIL_PUB.get_seeded_timeunit(
                 p_timeunit      => l_resultant_PriceUOM
                ,x_quantity      => l_uom_quantity
                ,x_timeunit      => l_tce_code
                ,x_return_status => x_return_status);

       IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
        FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_UTIL_PUB.get_seeded_timeunit', substr(SQLERRM,1,240));
        RETURN;
       END IF;

       IF nvl(l_tce_code,'HOUR') NOT IN ('HOUR','MINUTE') THEN
      ---Get the periods to be used for creating the stream for the Top line--
          l_level_periods :=OKS_BILL_UTIL_PUB.Get_Periods
                            (
                             p_start_date   => StartDate
                            ,p_end_date     => EndDate
                            ,p_uom_code     => l_resultant_PriceUOM
                            ,p_period_start => PeriodStart
                            );

         IF (l_level_periods IS NOT NULL) THEN
          BEGIN
            IF P_To_Line_ID IS NULL then

             --Generating Header Schedule--
             l_HdrStreams_tbl.DELETE;
             --npalepu changing the counter value to 1 for bug # 5207620 on 23-may-2006
             /* l_HdrStreams_tbl_Ctr := 0; */
             l_HdrStreams_tbl_Ctr := 1;
             --end npalepu

              BEGIN --Begin of populating Stream Table for Target Header
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).level_periods := l_level_periods;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).id := FND_API.g_miss_num;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).chr_id := P_To_Chr_ID;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).cle_id := FND_API.g_miss_num;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).dnz_chr_id := P_To_Chr_ID;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).sequence_no := 1;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).uom_code := l_resultant_PriceUOM;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).start_date := StartDate;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).end_date := EndDate;
               l_HdrStreams_tbl(l_HdrStreams_tbl_Ctr).uom_per_period := 1;
              END; --End of populating Stream table for Target Header


                  --Generate Billing Schedule for Target Header--
                       OKS_BILL_SCH.Create_Header_Bill_Sch(
                                        p_billing_type => BillingScheduleType
                                       ,p_sll_tbl => l_HdrStreams_tbl
                                       ,p_invoice_rule_id => InvoiceRuleID
                                       ,x_bil_sch_out_tbl => l_bil_sch_out_tbl
                                       ,x_return_status => x_return_status);
                       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                         FND_LOG.string(FND_LOG.level_statement
                                      ,l_module_name
                                      ,'After call to OKS_BILL_SCH.create_hdr_bill_sch'
                                      ||',x_return_status='||x_return_status
                                       );
                       END IF;
                       IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
                        FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_hdr_bill_sch', substr(SQLERRM,1,240));
                        RETURN;
                       END IF;

            ELSIF P_To_Line_ID IS NOT NULL then
            --Generating Schedule for Top Line--

             l_LineStreams_tbl.DELETE;
             --npalepu changing the counter value to 1 for bug # 5207620 on 23-may-2006
             /* l_LineStreams_tbl_Ctr := 0; */
             l_LineStreams_tbl_Ctr := 1;
             --end npalepu

              BEGIN --Begin of populating Stream Table for Target Top Line
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).level_periods := l_level_periods;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).id := FND_API.g_miss_num;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).chr_id := FND_API.g_miss_num;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).cle_id := P_To_Line_ID;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).dnz_chr_id := P_To_Chr_ID;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).sequence_no := 1;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).uom_code := l_resultant_PriceUOM;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).start_date := StartDate;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).end_date := EndDate;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).uom_per_period := 1;
--NECHATUR 23-Jun-2006 Bug#5349539 Populating Invoice Offset Days and Interface Offset Days of Stream Table
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).invoice_offset_days := P_INVOICE_OFFSET_DAYS;
               l_LineStreams_tbl(l_LineStreams_tbl_Ctr).interface_offset_days := P_INTERFACE_OFFSET_DAYS;
-- End NECHATUR Bug#5349539
              END; --End of populating Stream table for Target Top Line

 	          --Generate Billing Schedule for Top Line--
       		       OKS_BILL_SCH.create_bill_sch_rules(
       		                        p_billing_type => BillingScheduleType
       		                       ,p_sll_tbl => l_LineStreams_tbl
       		                       ,p_invoice_rule_id => InvoiceRuleID
       		                       ,x_bil_sch_out_tbl => l_bil_sch_out_tbl
       		                       ,x_return_status => x_return_status);
       		       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
       		         FND_LOG.string(FND_LOG.level_statement
       		                      ,l_module_name
       		                      ,'After call to OKS_BILL_SCH.create_bill_sch_rules'
       		                      ||',x_return_status='||x_return_status
       		                       );
       		       END IF;
       		       IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
       		        FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_rules', substr(SQLERRM,1,240));
       		        RETURN;
       		       END IF;
            END IF;  --End of P_To_Line_ID check

             EXCEPTION
             WHEN OTHERS THEN
                 IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                  FND_LOG.string(FND_LOG.level_unexpected
                      ,l_module_name||'.EXCEPTION'
                      ,'Exception in instantiate_bsch_using_PPSetup, x_return_status ='||x_return_status
                       ||'SQLERRM ='||SQLERRM
                       );
                 END IF;
             x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
             FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in instantiate_bsch_using_PPSetup', substr(SQLERRM,1,240));
             RAISE;

           END;
         END IF; --End of If check for l_level_periods IS NOT NULL
       END IF; -- End of IF Check for l_tce_code NOT in HOUR,MINUTE
      END IF; --IF Check for PRICEUOM NOT NULL

End instantiate_bsch_using_PPSetup;

/*---------------------------------------------------------------------
--The following routine is used to generate Billing Schedules in the following situations:
--A)  During FULL Copy and PARTIAL COPY to a NEW Contract
-- If Partial period DOES NOT EXIST in Source Contract and EXISTS in GCD:
      i) Schedules are generated using GCD PPSetup for New Target Contract Header and all its lines

--B) During PARTIAL COPY to an EXISTING Contract
--    i) Schedules are generated for copied Top Lines as follows:
--	   a) Using Target Header Streams if they EXIST
--	   b) If Target header Streams DONT EXIST, use Partial Period Setup on Target Header to generate Streams for top lines
--	   c) If Partial Period Setup DOES NOT EXIST on Target Header, use GCD Partial Period Setup to generate Streams for top lines.
--	   d) If GCD Partial Period DOES NOT EXIST, using Streams of the Source Top Lines
--    ii) Schedules are generated for copied Sublines as follows
--	   a) Using the streams of corresponding target top lines
--
--Note: If the Partial Period Setup had existed on the Source Contract or if the Partial Period Setup was NULL on Both Source Contract
--      and in GCD,  the Billing Schedules for Target Header and Lines would have been bulk copied using
--	COPY_OKS_STREAM_LEVELS and COPY_OKS_LEVEL_ELEMENTS routines.
--------------------------------------------------------------------*/
Procedure create_bsch_using_PPSetup(P_To_Chr_ID 	       IN NUMBER
				   ,P_From_Chr_ID	       IN NUMBER
				   ,P_Partial_Copy_YN       IN VARCHAR2
				   ,P_Target_Contract_New_YN IN VARCHAR2 DEFAULT 'Y'
        			   ,p_init_msg_list         IN VARCHAR2 DEFAULT OKC_API.G_FALSE
        			   ,x_return_status         OUT NOCOPY VARCHAR2
        			   ,x_msg_count             OUT NOCOPY NUMBER
        			   ,x_msg_data              OUT NOCOPY VARCHAR2) IS

  l_api_name        CONSTANT VARCHAR2(30) := 'create_bsch_using_PPSetup';
  l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;


  -- hkamdar 04-Sep-2006 Added for bug# 5458842.
  -- Added usage_type and usage_period
  TYPE TargetLinesRecTabType IS RECORD
  ( LINE_ID NumTabType
   ,LSE_ID NumTabType
   ,ORIG_SYSTEM_ID1 NumTabType
   ,CLE_ID NumTabType
   ,INV_RULE_ID NumTabType
   ,BILLING_SCHEDULE_TYPE OksB_BillScheduleTypeTabType
   ,START_DATE DateTabType
   ,END_DATE DateTabType
   ,PRICE_UOM Varchar2_30_TabType
   ,USAGE_TYPE Varchar2_30_TabType
   ,USAGE_PERIOD Varchar2_30_TabType
  );

 TargetLinesRecTab TargetLinesRecTabType;

-- hkamdar added for bug # 5043015
/** Full contract copy: When source doesn't have PP setup, GCD has PP setup. Cursor to get all toplines
    created during copy for which Billing Schedule needs to be generated.
*/

  CURSOR GetTrgLinesDetails_PP IS
  SELECT
  okcB.ID as  LINE_ID
 ,okcB.LSE_ID as LSE_ID
 ,okcB.ORIG_SYSTEM_ID1 as ORIG_SYSTEM_ID1
 ,okcB.CLE_ID CLE_ID
 ,decode(okcB.CLE_ID,NULL,okcB.INV_RULE_ID --its a topline
         ,(select a.INV_RULE_ID from okc_k_lines_b a where id = okcB.CLE_ID) --its a subline
        ) as INV_RULE_ID
 ,decode(okcB.CLE_ID,NULL,oksB.BILLING_SCHEDULE_TYPE --its a topline
        ,decode(oksB.BILLING_SCHEDULE_TYPE
                ,NULL,(select a.BILLING_SCHEDULE_TYPE from oks_k_lines_b a where a.CLE_ID = okcB.CLE_ID)
                ,oksB.BILLING_SCHEDULE_TYPE
               ) -- its a subline
        ) as BILLING_SCHEDULE_TYPE
 ,okcB.START_DATE as START_DATE
 ,okcB.END_DATE as END_DATE
 ,decode(okcB.LSE_ID
        ,122
        ,oksB.USAGE_PERIOD
        ,46
        ,(SELECT frequency FROM OKS_SUBSCR_HEADER_B WHERE cle_id = okcB.ID)
        ,oksB.PRICE_UOM
        )AS PRICE_UOM
  -- hkamdar 04-Sep-2006 Added for bug# 5458842.
  ,oksB.USAGE_TYPE as USAGE_TYPE
  ,oksB.USAGE_PERIOD as USAGE_PERIOD
  from
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  where okcB.CHR_ID = P_To_Chr_ID
  and okcB.ID = oksB.CLE_ID;
-- End hkamdar

 /**Component Copy to an EXISTING Contract: Cursor to get Target Lines for which Billing Schedule needs to be generated.
 --This is used for generating schedules for lines copied to an existing Target Contract
 */
  CURSOR GetTrgLines_K_EXISTS_P IS
  SELECT
  okcB.ID as  LINE_ID
 ,okcB.LSE_ID as LSE_ID
 ,okcB.ORIG_SYSTEM_ID1 as ORIG_SYSTEM_ID1
 ,okcB.CLE_ID CLE_ID
 ,decode(okcB.CLE_ID,NULL,okcB.INV_RULE_ID --its a topline
         ,(select a.INV_RULE_ID from okc_k_lines_b a where id = okcB.CLE_ID) --its a subline
        ) as INV_RULE_ID
 ,decode(okcB.CLE_ID,NULL,oksB.BILLING_SCHEDULE_TYPE --its a topline
        ,decode(oksB.BILLING_SCHEDULE_TYPE
                ,NULL,(select a.BILLING_SCHEDULE_TYPE from oks_k_lines_b a where a.CLE_ID = okcB.CLE_ID)
                ,oksB.BILLING_SCHEDULE_TYPE
               ) -- its a subline
        ) as BILLING_SCHEDULE_TYPE
 ,okcB.START_DATE as START_DATE
 ,okcB.END_DATE as END_DATE
 ,decode(okcB.LSE_ID
        ,12
        ,oksB.USAGE_PERIOD
        ,46
        ,(SELECT frequency FROM OKS_SUBSCR_HEADER_B WHERE cle_id = okcB.ID)
        ,oksB.PRICE_UOM
        )AS PRICE_UOM
  -- hkamdar 04-Sep-2006 Added for bug# 5458842.
  ,oksB.USAGE_TYPE as USAGE_TYPE
  ,oksB.USAGE_PERIOD as USAGE_PERIOD
  from
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_LINES_B_TEMP okcBT
  where okcB.DNZ_CHR_ID = P_To_Chr_ID
  and okcB.ID = oksB.CLE_ID
  and okcBT.ID = okcB.ID
  and (okcBT.CLE_ID IS NULL  --Get all Top lines that are being copied
    OR (okcBT.CLE_ID IS NOT NULL and okcBT.LINE_EXISTS_YN = 'Y') --OR Sublines that are being copied to existing Top Lines
      );

  /**This is used to get the Target header Billing streams. Used to generate the Schedules for Lines copied to an existing target contract.
  --If this cursor fetches no rows, then the Partial period Setup on the Target header is used to generate the Billing schedules for the lines.
  --If the PPSetup on Target header is also NULL, then no schedule is generated for the lines.
  */
  CURSOR GetStreamsForTargetHeader(P_To_Chr_ID IN NUMBER) IS
  SELECT
   SEQUENCE_NO
  ,UOM_CODE
  ,START_DATE
  ,END_DATE
  ,LEVEL_PERIODS
  ,UOM_PER_PERIOD
  ,ADVANCE_PERIODS
  ,LEVEL_AMOUNT
  ,INVOICE_OFFSET_DAYS
  ,INTERFACE_OFFSET_DAYS
  ,COMMENTS
  ,DUE_ARR_YN
  ,AMOUNT
  ,LINES_DETAILED_YN
  FROM
  OKS_STREAM_LEVELS_B where CHR_ID = P_To_Chr_ID AND
  CLE_ID IS NULL
  ORDER BY SEQUENCE_NO;

  TYPE l_TrgHdrStreams_Tbl_Type IS TABLE OF GetStreamsForTargetHeader%ROWTYPE INDEX BY BINARY_INTEGER;
  l_TrgHdrStreams_Tbl l_TrgHdrStreams_Tbl_Type;
  l_TrgHdrStreams_Exists_YN VARCHAR2(1);

-- NECHATUR 23-Jun-2006 Bug#5349539 Cursor to get the Interface Offset Days and Invoice Offset Days of the Source Line Billing Stream
  CURSOR GetStreamsForLine(P_From_Cle_ID IN NUMBER) IS
  SELECT
   INVOICE_OFFSET_DAYS
  ,INTERFACE_OFFSET_DAYS
  FROM
  OKS_STREAM_LEVELS_B
  WHERE CLE_ID = P_From_Cle_ID
    AND dnz_chr_id = P_FROM_CHR_ID
  ORDER BY SEQUENCE_NO;
-- End NECHATUR Bug#5349539

-- hkamdar added on 24-Apr-2006. Based on Aaron's feedback on 07-Apr-2006. to PP CR03 ammendment.
  /**This is used to get the Source Line Billing streams. Used to generate the Schedules for Lines copied to an existing target contract.
  --If this cursor fetches no rows, then do not generate the Billing schedules for the lines.

  */
  CURSOR GetStreamsForSourceLine(P_From_Cle_ID IN NUMBER) IS
  SELECT
   SEQUENCE_NO
  ,UOM_CODE
  ,START_DATE
  ,END_DATE
  ,LEVEL_PERIODS
  ,UOM_PER_PERIOD
  ,ADVANCE_PERIODS
  ,LEVEL_AMOUNT
  ,INVOICE_OFFSET_DAYS
  ,INTERFACE_OFFSET_DAYS
  ,COMMENTS
  ,DUE_ARR_YN
  ,AMOUNT
  ,LINES_DETAILED_YN
  FROM
  OKS_STREAM_LEVELS_B
  WHERE CLE_ID = P_From_Cle_ID
    AND dnz_chr_id = P_FROM_CHR_ID
  ORDER BY SEQUENCE_NO;

  TYPE l_SrcLnStreams_Tbl_Type IS TABLE OF GetStreamsForSourceLine%ROWTYPE INDEX BY BINARY_INTEGER;
  l_SrcLnStreams_Tbl l_SrcLnStreams_Tbl_Type;
  l_SrcLnStreams_Exists_YN VARCHAR2(1);
-- end hkamdar
  l_stage varchar2(100) := null;

  l_resultant_price_uom OKS_K_LINES_B.PRICE_UOM%TYPE;
  l_tce_code         VARCHAR2(100);
  l_uom_quantity     NUMBER;
  l_level_periods NUMBER;

  l_LineStreams_tbl OKS_BILL_SCH.StreamLvl_tbl;
  l_LineStreams_tbl_Ctr NUMBER := 0;
  l_bil_sch_out_tbl   OKS_BILL_SCH.itembillsch_tbl;

 -- hkamdar 20-Apr-2006
 -- added to incorporate Aaron's feedback on 07-Apr-2006 about partial copy
 l_duration_match   VARCHAR2(1);
 -- end hkamdar

 --npalepu added on 22-may-2006 for bug # 5207620
 l_default_bsch_type VARCHAR2(1);
 --end npalepu

--NECHATUR 23-Jun-2006 Bug#5349539 Declaring Interface Offset Days and Invoice Offset Days Parameters
 L_INTERFACE_OFFSET_DAYS NUMBER;
 L_INVOICE_OFFSET_DAYS NUMBER;
--End NECHATUR Bug#5349539

-- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.

l_item_type          VARCHAR2(50);
l_price_uom          VARCHAR2(50);
l_pricing_method     VARCHAR2(50);
l_period_start       VARCHAR2(50);
l_period_type        VARCHAR2(50);

-- Flag to indicate whether to generate billing schedule or not
l_generate_bill_sch_yn VARCHAR2(1) := 'N';
-- End hkamdar for Bug# 5458842.

  BEGIN --Main Begin
    --errorout_hk('Entered create_bsch_using_ppsetup, P_Partial_Copy_YN :'||P_Partial_Copy_YN);
    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
             FND_LOG.string(FND_LOG.level_procedure
                    ,l_module_name
                    ,'Entered create_bsch_using_PPSetup'
		   ||' P_From_Chr_ID :'||P_From_Chr_ID
		   ||' P_To_Chr_ID :'||P_To_Chr_ID
		   ||' P_Partial_Copy_YN :'||P_Partial_Copy_YN
                     );
    END IF;


  --+++++++++++++++++++++++++++++Full Copy or Component Copy to a New Contract++++++++++++++++++++++++++++
  --IF Full Copy or Partial Copy to a new contract, generate schedule for header and all its lines
  --using Partial Period Setup on the Target header
  IF (P_Partial_Copy_YN = 'N' OR (P_Partial_Copy_YN = 'Y' AND P_Target_Contract_New_YN = 'Y')) then
   IF (    G_TrgHdrPeriodStart IS NOT NULL
       AND G_TrgHdrPeriodType IS NOT NULL
       AND G_TrgHdrPriceUOM IS NOT NULL) THEN
     --errorout_hk('Condition -I :Partial copy N or (partial copy Y and TRGT New)');
-- hkamdar 04-Sep-2006 Added USAGE_TYPE and USAGE_PERIOD for bug# 5458842.
  OPEN GetTrgLinesDetails_PP;
  LOOP --1)
  FETCH GetTrgLinesDetails_PP BULK COLLECT INTO
     TargetLinesRecTab.LINE_ID
    ,TargetLinesRecTab.LSE_ID
    ,TargetLinesRecTab.ORIG_SYSTEM_ID1
    ,TargetLinesRecTab.CLE_ID
    ,TargetLinesRecTab.INV_RULE_ID
    ,TargetLinesRecTab.BILLING_SCHEDULE_TYPE
    ,TargetLinesRecTab.START_DATE
    ,TargetLinesRecTab.END_DATE
    ,TargetLinesRecTab.PRICE_UOM
    ,TargetLinesRecTab.USAGE_TYPE
    ,TargetLinesRecTab.USAGE_PERIOD LIMIT G_BULK_FETCH_LIMIT;

    IF (TargetLinesRecTab.LINE_ID.COUNT > 0) THEN

       FOR i in TargetLinesRecTab.LINE_ID.FIRST..TargetLinesRecTab.LINE_ID.LAST LOOP --2)

  --Generate Header Schedule if copying to a new Contract. This will also generate schedule for all its lines
  /*  instantiate_bsch_using_PPSetup(P_To_Chr_ID => P_To_Chr_ID
                                  ,P_To_Line_ID => NULL
                                  ,StartDate => G_TrgHdrStartDate
                                  ,EndDate => G_TrgHdrEndDate
                                  ,HdrPriceUOM => G_TrgHdrPriceUOM
				  ,LinePriceUOM => NULL
                                  ,PeriodStart => G_TrgHdrPeriodStart
                                  ,InvoiceRuleID => G_TrgHdrInvRuleID
                                  ,BillingScheduleType => nvl(G_TrgHdrBillingScheduleType,'T')
                                  ,x_return_status => x_return_status);*/


             IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
              FND_LOG.string(FND_LOG.level_statement
                            ,l_module_name
                            ,'Before call to instantiate_bsch_using_PPSetup for HEADER'
                           ||' : Line_Id         : '||TargetLinesRecTab.LINE_ID(i)
                           ||' : TrgHdrStartdate : '||TargetLinesRecTab.start_date(i)
			   ||' : TrgHdrEndDate   : '||TargetLinesRecTab.end_date(i)
			   ||' : TrgHdrInvRuleID : '||G_TrgHdrInvRuleID
			   ||' : TrgHdrPeriodStart : '||G_TrgHdrPeriodStart
			   ||' : TrgHdrPeriodType : '||G_TrgHdrPeriodType
			   ||' : HdrPriceUOM : '||G_TrgHdrPriceUOM
                           ||' : LinePriceUOM     : '||TargetLinesRecTab.PRICE_UOM(i)
			   ||' : TrgHdrBillingScheduleType : '||G_TrgHdrBillingScheduleType
                            );
             END IF;
     --errorout_hk('Calling instantiate_bsch_using_PPSetup for Condition -I');
    --npalepu added on 23-may-2006 for bug # 5207620

    /* hkamdar 04-Sep-2006 commented for bug# 5458842.
    IF TargetLinesRecTab.LSE_ID(i) = 46 THEN
        l_default_bsch_type := 'E';
    ELSE
        l_default_bsch_type := 'T';
    END IF;
    --end npalepu
    */

-- NECHATUR 23-Jun-2006 Bug#5349539 Fetching the data from the cursor into the Offset Days variables
    Open GetStreamsForLine(TargetLinesRecTab.ORIG_SYSTEM_ID1(i));
    Fetch GetStreamsForLine into L_INVOICE_OFFSET_DAYS,L_INTERFACE_OFFSET_DAYS;
    Close GetStreamsForLine;
-- End NECHATUR Bug#5349539

-- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.

IF TargetLinesRecTab.LSE_ID(i) = 46 THEN
/* hkamdar 04-Sep-2006 Commented. For Subscription lines only Equal Amount billing schedule type is used for
-- which manual billing schedules are allowed.
   OPEN osh_cur(TargetLinesRecTab.LINE_ID(i));
   FETCH osh_cur INTO l_item_type,l_price_uom;
   CLOSE osh_cur;
   l_price_uom := OKS_SUBSCRIPTION_PVT.Map_Freq_Uom(l_price_uom);

   l_period_start := 'SERVICE';
*/
   l_generate_bill_sch_yn := 'N';

ELSIF TargetLinesRecTab.LSE_ID(i) = 12 THEN
-- hkamdar Bug# 5708505 8-Feb-07
-- Added outer if condition to check billing schedule type
  IF TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i) IS NOT NULL THEN
   IF TargetLinesRecTab.USAGE_TYPE(i) <> 'NPR' THEN
      l_price_uom := TargetLinesRecTab.USAGE_PERIOD(i);
      l_period_start := 'SERVICE';
      l_generate_bill_sch_yn := 'Y';
   ELSE
      l_generate_bill_sch_yn := 'N';
   END IF;
  ELSE
     l_generate_bill_sch_yn := 'N';
  END IF;
-- 29-Sep-2006. Bug# 5563412. Added sublines lse ids and Ext Warranty lse id check.
ELSIF TargetLinesRecTab.LSE_ID(i) IN (1,7,8,9,10,11,35,19,25) THEN
   IF TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i) =  'T' THEN
      l_period_start := G_TrgHdrPeriodStart;
      l_price_uom := TargetLinesRecTab.PRICE_UOM(i);
      l_generate_bill_sch_yn := 'Y';
   ELSE
      l_generate_bill_sch_yn := 'N';
   END IF;
ELSE
      l_generate_bill_sch_yn := 'N';
END IF; -- TargetLinesRecTab.LSE_ID(i) = 12

-- if generate billing schedule flag is Y only then call instantiate_bsch_using_PPSetup
IF l_generate_bill_sch_yn = 'Y' THEN
-- End hkamdar for Bug# 5458842.

    instantiate_bsch_using_PPSetup(P_To_Chr_ID => P_To_Chr_ID
                                  ,P_To_Line_ID => TargetLinesRecTab.LINE_ID(i)--NULL
                                  ,StartDate => TargetLinesRecTab.start_date(i)--G_TrgHdrStartDate
                                  ,EndDate => TargetLinesRecTab.end_date(i)--G_TrgHdrEndDate
                                  ,HdrPriceUOM => G_TrgHdrPriceUOM
				  -- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.
                                  --,LinePriceUOM => TargetLinesRecTab.PRICE_UOM(i)
                                  --,PeriodStart => G_TrgHdrPeriodStart
				  ,LinePriceUOM => l_price_uom
                                  ,PeriodStart => l_period_start
				  -- End hkamdar for Bug# 5458842.
                                  ,InvoiceRuleID => G_TrgHdrInvRuleID
                                  --npalepu changed for bug # 5207620 on 23-may-2006
                                  /* ,BillingScheduleType => nvl(G_TrgHdrBillingScheduleType,'T') */
                                  ,BillingScheduleType => TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i)
                                  --end npalepu
                                  --npalepu added on 22-may-2006
                                  ,p_LSE_ID =>TargetLinesRecTab.LSE_ID(i)
                                  --end npalepu
				  --NECHATUR 23-Jun-2006 Bug#5349539
                                  ,P_INVOICE_OFFSET_DAYS =>L_INVOICE_OFFSET_DAYS
                                  ,P_INTERFACE_OFFSET_DAYS =>L_INTERFACE_OFFSET_DAYS
                                  -- End NECHATUR Bug#5349539
                                  ,x_return_status => x_return_status);

            IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
             FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to instantiate_bsch_using_PPSetup', substr(SQLERRM,1,240));
             IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
              FND_LOG.string(FND_LOG.level_statement
                            ,l_module_name
                            ,'Return status from instantiate_bsch_using_PPSetup for HEADER : x_return_status ='||x_return_status
                            );
             END IF;
             RETURN;
            END IF;

             IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
              FND_LOG.string(FND_LOG.level_statement
                            ,l_module_name
                            ,'Before call to instantiate_bsch_using_PPSetup for HEADER'
                           ||' : Line_Id         : '||TargetLinesRecTab.LINE_ID(i)
                           ||' : TrgHdrStartdate : '||TargetLinesRecTab.start_date(i)
                           ||' : TrgHdrEndDate   : '||TargetLinesRecTab.end_date(i)
                           ||' : TrgHdrInvRuleID : '||G_TrgHdrInvRuleID
                           ||' : TrgHdrPeriodStart : '||G_TrgHdrPeriodStart
                           ||' : TrgHdrPeriodType : '||G_TrgHdrPeriodType
                           ||' : HdrPriceUOM : '||G_TrgHdrPriceUOM
                           ||' : LinePriceUOM     : '||TargetLinesRecTab.PRICE_UOM(i)
                           ||' : TrgHdrBillingScheduleType : '||G_TrgHdrBillingScheduleType
                            );
             END IF;
-- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.
-- Initializing local variables.
l_item_type       := NULL;
l_price_uom       := NULL;
l_pricing_method  := NULL;
l_period_start    := NULL;
l_period_type     := NULL;

l_generate_bill_sch_yn := 'N';

END IF; --l_generate_bill_sch_yn = 'Y'
-- End hkamdar for Bug# 5458842.

        END LOOP; --End LOOP for looping through Target header Streams PLSQL table
    END IF; -- TargetLinesRecTab.LINE_ID.COUNT > 0

    EXIT WHEN GetTrgLinesDetails_PP%NOTFOUND;

  END LOOP; --End LOOP for BULK FETCH from GetTrgLinesDetails_PP
  IF GetTrgLinesDetails_PP%ISOPEN THEN
    CLOSE GetTrgLinesDetails_PP;
  END IF;
-- End hkamdar

  --End of Billing Schedule Generation for Header
   END IF;

 --++++++++++++++++++++++++++++++++++++Component Copy to an Existing Contract+++++++++++++++++++++++++++++++++
  ELSIF (P_Partial_Copy_YN = 'Y' AND P_Target_Contract_New_YN = 'N') then
   -- When Copying Lines to an Existing Contract generate schedules for all the Top Lines using
   -- a) Header schedule on Target to generate schedules for Lines
   -- b) If Header schedule doesnt exist on Target use use Partial Period Setup on Target header to generate streams
   -- If Header streams dont exist and PPSetup doesnt exist on target header no schedule is generated for lines
     --errorout_hk('Condition -II :Partial copy Y and TRGT Not New)');
   --============Get Target header Streams===================
  OPEN GetStreamsForTargetHeader(P_To_Chr_ID);
  FETCH GetStreamsForTargetHeader BULK COLLECT INTO l_TrgHdrStreams_Tbl;
  IF l_TrgHdrStreams_Tbl.COUNT > 0 then
    l_TrgHdrStreams_Exists_YN := 'Y';
  ELSE
    l_TrgHdrStreams_Exists_YN := 'N';
  END IF;
  CLOSE GetStreamsForTargetHeader;
   --=======================================================

  OPEN GetTrgLines_K_EXISTS_P;
  LOOP --1)
-- hkamdar 04-Sep-2006 Added USAGE_TYPE and USAGE_PERIOD for bug# 5458842.
  FETCH GetTrgLines_K_EXISTS_P BULK COLLECT INTO
     TargetLinesRecTab.LINE_ID
    ,TargetLinesRecTab.LSE_ID
    ,TargetLinesRecTab.ORIG_SYSTEM_ID1
    ,TargetLinesRecTab.CLE_ID
    ,TargetLinesRecTab.INV_RULE_ID
    ,TargetLinesRecTab.BILLING_SCHEDULE_TYPE
    ,TargetLinesRecTab.START_DATE
    ,TargetLinesRecTab.END_DATE
    ,TargetLinesRecTab.PRICE_UOM
    ,TargetLinesRecTab.USAGE_TYPE
    ,TargetLinesRecTab.USAGE_PERIOD LIMIT G_BULK_FETCH_LIMIT;

  IF (TargetLinesRecTab.LINE_ID.COUNT > 0) THEN
   BEGIN --Begin for looping through TargetLinesRecTab
    FOR i in TargetLinesRecTab.LINE_ID.FIRST..TargetLinesRecTab.LINE_ID.LAST LOOP --2)


-- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.

IF TargetLinesRecTab.LSE_ID(i) = 46 THEN
/* hkamdar 04-Sep-2006 Commented. For Subscription lines only Equal Amount billing schedule type is used for
-- which manual billing schedules are allowed.
   OPEN osh_cur(TargetLinesRecTab.LINE_ID(i));
   FETCH osh_cur INTO l_item_type,l_price_uom;
   CLOSE osh_cur;
   l_price_uom := OKS_SUBSCRIPTION_PVT.Map_Freq_Uom(l_price_uom);
   l_period_start := 'SERVICE';
*/
   l_generate_bill_sch_yn := 'N';

ELSIF TargetLinesRecTab.LSE_ID(i) = 12 THEN
-- hkamdar Bug# 5708505 8-Feb-07
-- Added outer if condition to check billing schedule type
  IF TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i) IS NOT NULL THEN
   IF TargetLinesRecTab.USAGE_TYPE(i) <> 'NPR' THEN
      l_price_uom := TargetLinesRecTab.USAGE_PERIOD(i);
      l_period_start := 'SERVICE';
      l_generate_bill_sch_yn := 'Y';
   ELSE
      l_generate_bill_sch_yn := 'N';
   END IF;
  ELSE l_generate_bill_sch_yn := 'N';

  END IF;

-- 29-Sep-2006. Bug# 5563412. Added sublines lse ids and Ext Warranty lse id check.
ELSIF TargetLinesRecTab.LSE_ID(i) IN (1,7,8,9,10,11,35,19,25) THEN
   IF TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i) = 'T' THEN
      l_period_start := G_TrgHdrPeriodStart;
      l_price_uom := TargetLinesRecTab.PRICE_UOM(i);
      l_generate_bill_sch_yn := 'Y';
   ELSE
      l_generate_bill_sch_yn := 'N';
   END IF;
ELSE
      l_generate_bill_sch_yn := 'N';

END IF; -- TargetLinesRecTab.LSE_ID(i) = 12

-- if generate billing schedule flag is Y only then call instantiate_bsch_using_PPSetup
IF l_generate_bill_sch_yn = 'Y' THEN
-- End hkamdar for Bug# 5458842.

     IF (TargetLinesRecTab.CLE_ID(i) IS NULL) then --It is a Top Line
-- hkamdar  New Logic for Subscription and usage lines here
      --/*IF Header Billing Streams exists use them for generating the Top Line streams*/--
      IF (l_TrgHdrStreams_Exists_YN = 'Y') THEN
           --errorout_hk('Condition -II : If Target Header Streams Exists');
           --Resetting PLSQL table for populating line streams--
           l_LineStreams_tbl.DELETE;
           l_LineStreams_tbl_Ctr := 0;
       --Generate Schedule for Top Line using Header Streams--
          BEGIN --Begin of looping through l_TrgHdrStreams_Tbl
           FOR j IN l_TrgHdrStreams_Tbl.FIRST..l_TrgHdrStreams_Tbl.LAST LOOP --4)
            l_LineStreams_tbl_Ctr := l_LineStreams_tbl_Ctr + 1;

            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).id := FND_API.g_miss_num;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).chr_id := FND_API.g_miss_num;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).cle_id := TargetLinesRecTab.LINE_ID(i);
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).dnz_chr_id := P_To_Chr_ID;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).sequence_no := l_TrgHdrStreams_Tbl(j).sequence_no;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).uom_code := l_TrgHdrStreams_Tbl(j).uom_code;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).start_date := l_TrgHdrStreams_Tbl(j).start_date;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).end_date := l_TrgHdrStreams_Tbl(j).end_date;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).level_periods := l_TrgHdrStreams_Tbl(j).level_periods;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).uom_per_period := l_TrgHdrStreams_Tbl(j).uom_per_period;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).advance_periods := l_TrgHdrStreams_Tbl(j).advance_periods;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).level_amount := l_TrgHdrStreams_Tbl(j).level_amount;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).invoice_offset_days := l_TrgHdrStreams_Tbl(j).invoice_offset_days;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).interface_offset_days := l_TrgHdrStreams_Tbl(j).interface_offset_days;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).comments := l_TrgHdrStreams_Tbl(j).comments;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).due_arr_yn := l_TrgHdrStreams_Tbl(j).due_arr_yn;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).amount := l_TrgHdrStreams_Tbl(j).amount;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).lines_detailed_yn := l_TrgHdrStreams_Tbl(j).lines_detailed_yn;
           END LOOP; --End LOOP for looping through Target header Streams PLSQL table
              EXCEPTION
               WHEN OTHERS THEN
                   x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                   l_stage := 'Looping through l_TrgHdrStreams_Tbl';
                   FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage , substr(SQLERRM,1,240));
		   RAISE;
          END; --End of looping through l_TrgHdrStreams_Tbl

          BEGIN --Begin for calling OKS_BILL_SCH.Create_Bill_Sch_Rules
                  --Generate Billing Schedule for Top Line--
                       OKS_BILL_SCH.create_bill_sch_rules(
                                        p_billing_type => TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i)
                                       ,p_sll_tbl => l_LineStreams_tbl
                                       ,p_invoice_rule_id => TargetLinesRecTab.INV_RULE_ID(i)
                                       ,x_bil_sch_out_tbl => l_bil_sch_out_tbl
                                       ,x_return_status => x_return_status);
                       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                         FND_LOG.string(FND_LOG.level_statement
                                      ,l_module_name
                                      ,'After call to OKS_BILL_SCH.create_bill_sch_rules'
                                      ||',x_return_status='||x_return_status
                                       );
                       END IF;
                       IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
                        FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_rules', substr(SQLERRM,1,240));
                        RETURN;
                       END IF;
                 EXCEPTION
                  WHEN OTHERS THEN
                     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                     l_stage := 'OKS_BILL_SCH.create_bill_sch_rules';
                     FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage,substr(SQLERRM,1,240));
		     RAISE;
          END;

      ELSIF (l_TrgHdrStreams_Exists_YN = 'N') THEN
      --IF Header Billing Streams dont exist use Partial period Settings on Header--
      --to generate schedule for line--
           --errorout_hk('Condition -II : If Target Header Streams Not Exist');
       IF (G_TrgHdrPeriodStart IS NOT NULL
           AND G_TrgHdrPeriodType IS NOT NULL
           AND G_TrgHdrPriceUOM IS NOT NULL) THEN
                      --errorout_hk('Condition -II : If Target Header Streams Not Exist and Price UOM is not null call instantiate_bsch');
          Begin
           --npalepu added on 23-may-2006 for bug # 5207620

    /* hkamdar 04-Sep-2006 commented for bug# 5458842.
           IF TargetLinesRecTab.LSE_ID(i) = 46 THEN
                l_default_bsch_type := 'E';
           ELSE
                l_default_bsch_type := 'T';
           END IF;
           --end npalepu
  */
-- NECHATUR 23-Jun-2006 Bug#5349539 Fetching the data from the cursor into the Offset Days variables
           Open GetStreamsForLine(TargetLinesRecTab.ORIG_SYSTEM_ID1(i));
           Fetch GetStreamsForLine into L_INVOICE_OFFSET_DAYS,L_INTERFACE_OFFSET_DAYS;
           Close GetStreamsForLine;
--  End NECHATUR Bug#5349539
           instantiate_bsch_using_PPSetup(P_To_Chr_ID => P_To_Chr_ID
                                         ,P_To_Line_ID =>TargetLinesRecTab.LINE_ID(i)
                                         ,StartDate => TargetLinesRecTab.START_DATE(i)
                                         ,EndDate => TargetLinesRecTab.END_DATE(i)
                                         ,HdrPriceUOM => G_TrgHdrPriceUOM
				         -- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.
				         --,LinePriceUOM => TargetLinesRecTab.PRICE_UOM(i)
                                         --,PeriodStart => G_TrgHdrPeriodStart
				         ,LinePriceUOM => l_price_uom
                                         ,PeriodStart => l_period_start
					 -- End hkamdar for Bug# 5458842.
                                         ,InvoiceRuleID => TargetLinesRecTab.INV_RULE_ID(i)
                                         --npalepu changed for bug # 5207620 on 23-may-2006
                                         /* ,BillingScheduleType => nvl(TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i),'T') */
                                         ,BillingScheduleType => TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i)
                                         --end npalepu
                                         --npalepu added on 22-may-2006
                                         ,p_LSE_ID =>TargetLinesRecTab.LSE_ID(i)
                                         --end npalepu
					 --NECHATUR 23-Jun-2006 Bug#5349539
                                         ,P_INVOICE_OFFSET_DAYS =>L_INVOICE_OFFSET_DAYS
                                         ,P_INTERFACE_OFFSET_DAYS =>L_INTERFACE_OFFSET_DAYS
                                         -- End NECHATUR Bug#5349539
                                         ,x_return_status => x_return_status);
            IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
             FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to instantiate_bsch_using_PPSetup', substr(SQLERRM,1,240));
             IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
              FND_LOG.string(FND_LOG.level_statement
                            ,l_module_name
                            ,'Return status from instantiate_bsch_using_PPSetup for LINE : x_return_status ='||x_return_status
                            );
             END IF;
             RETURN;
            END IF;

                EXCEPTION
                  WHEN OTHERS THEN
                     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                     l_stage := 'instantiate_bsch_using_PPSetup';
                     FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage,substr(SQLERRM,1,240));
                     RAISE;
          End;
          -- hkamdar 20-Apr-2006 Added based on Aaron's feedback on 07-Apr-2006. to PP CR03 ammendment.
          -- IF no target header bill schedule exists and no PP attributes are present on Target Header then
          -- if duration of source line and target line are same then copy the source line billing schedule.
       ELSE  -- target header partial period attributes does not exist

            -- check for line duration match
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
            IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
                FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.chk_line_effectivity'
                        ,'Before call to chk_line_effectivity'
                         );
            END IF;
          END IF;
                     --errorout_hk('Condition -II : Check for line effectivity');
          chk_line_effectivity(TargetLinesRecTab.LINE_ID(i),l_duration_match, x_return_status);

          IF x_return_status <> 'S' Then
                        OKC_API.set_message
                                        (G_APP_NAME,
                                         G_UNEXPECTED_ERROR,
                                         G_SQLCODE_TOKEN,
                                         SQLCODE,
                                         G_SQLERRM_TOKEN,
                                         'Check Line Effectivity ERROR');

                         RAISE G_EXCEPTION_HALT_VALIDATION;
          End If;

          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
            IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
                FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.chk_line_effectivity'
                        ,'After call to chk_line_effectivity'
                         );
            END IF;
          END IF;

          IF l_duration_match = 'T' THEN
           --errorout_hk('Condition -II : If Duration matches copy bill schedules');
--errorout_hk('Source Line id-'||TargetLinesRecTab.ORIG_SYSTEM_ID1(i));
                 --============Get Source Line Streams===================
           OPEN GetStreamsForSourceLine(TargetLinesRecTab.ORIG_SYSTEM_ID1(i));
           FETCH GetStreamsForSourceLine BULK COLLECT INTO l_SrcLnStreams_Tbl;
           IF l_SrcLnStreams_Tbl.COUNT > 0 then
              l_SrcLnStreams_Exists_YN := 'Y';
           ELSE
              l_SrcLnStreams_Exists_YN := 'N';
           END IF;
           CLOSE GetStreamsForSourceLine;
                 --=======================================================
--errorout_hk('Src Stream Exists-'||l_SrcLnStreams_Exists_YN);
           IF l_SrcLnStreams_Exists_YN = 'Y' THEN

           --Resetting PLSQL table for populating line streams--
           l_LineStreams_tbl.DELETE;
           l_LineStreams_tbl_Ctr := 0;
       --Generate Schedule for Top Line using Header Streams--
          BEGIN --Begin of looping through l_TrgHdrStreams_Tbl
           FOR j IN l_SrcLnStreams_Tbl.FIRST..l_SrcLnStreams_Tbl.LAST LOOP --4)
            l_LineStreams_tbl_Ctr := l_LineStreams_tbl_Ctr + 1;

            --errorout_hk('l_LineStreams_tbl(l_LineStreams_tbl_Ctr).cle_id-'||TargetLinesRecTab.LINE_ID(i));
            --errorout_hk('dnz_chr_id-'||P_To_Chr_ID);
            --errorout_hk('sequence_no-'||l_SrcLnStreams_Tbl(j).sequence_no);
            --errorout_hk('uom_code-'|| l_SrcLnStreams_Tbl(j).uom_code);
            --errorout_hk('start_date-'||TargetLinesRecTab.start_date(i));
            --errorout_hk('end_date-'|| TargetLinesRecTab.end_date(i));
            --errorout_hk('level_periods-'||l_SrcLnStreams_Tbl(j).level_periods);
            --errorout_hk('uom_per_period-'|| l_SrcLnStreams_Tbl(j).uom_per_period);
            --errorout_hk('advance_periods-'||l_SrcLnStreams_Tbl(j).advance_periods);
            --errorout_hk('level_amount-'||l_SrcLnStreams_Tbl(j).level_amount);
            --errorout_hk('invoice_offset_days-'|| l_SrcLnStreams_Tbl(j).invoice_offset_days);
            --errorout_hk('interface_offset_days-'|| l_SrcLnStreams_Tbl(j).interface_offset_days);
            --errorout_hk('comments-'|| l_SrcLnStreams_Tbl(j).comments);
            --errorout_hk('due_arr_yn-'|| l_SrcLnStreams_Tbl(j).due_arr_yn);
            --errorout_hk('amount-'|| l_SrcLnStreams_Tbl(j).amount);
            --errorout_hk('lines_detailed_yn-'|| l_SrcLnStreams_Tbl(j).lines_detailed_yn);

            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).id := FND_API.g_miss_num;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).chr_id := FND_API.g_miss_num;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).cle_id := TargetLinesRecTab.LINE_ID(i);
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).dnz_chr_id := P_To_Chr_ID;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).sequence_no := l_SrcLnStreams_Tbl(j).sequence_no;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).uom_code := l_SrcLnStreams_Tbl(j).uom_code;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).start_date := TargetLinesRecTab.start_date(i);
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).end_date := TargetLinesRecTab.end_date(i);
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).level_periods := l_SrcLnStreams_Tbl(j).level_periods;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).uom_per_period := l_SrcLnStreams_Tbl(j).uom_per_period;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).advance_periods := l_SrcLnStreams_Tbl(j).advance_periods;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).level_amount := l_SrcLnStreams_Tbl(j).level_amount;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).invoice_offset_days := l_SrcLnStreams_Tbl(j).invoice_offset_days;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).interface_offset_days := l_SrcLnStreams_Tbl(j).interface_offset_days;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).comments := l_SrcLnStreams_Tbl(j).comments;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).due_arr_yn := l_SrcLnStreams_Tbl(j).due_arr_yn;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).amount := l_SrcLnStreams_Tbl(j).amount;
            l_LineStreams_tbl(l_LineStreams_tbl_Ctr).lines_detailed_yn := l_SrcLnStreams_Tbl(j).lines_detailed_yn;
           END LOOP; --End LOOP for looping through Target header Streams PLSQL table
              EXCEPTION
               WHEN OTHERS THEN
                   x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                   l_stage := 'Looping through l_SrcLnStreams_Tbl';
                   FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage , substr(SQLERRM,1,240));
		   RAISE;
          END; --End of looping through l_TrgHdrStreams_Tbl

          END IF; -- check for l_SrcLnStreams_Exists_YN = 'Y'
          BEGIN --Begin for calling OKS_BILL_SCH.Create_Bill_Sch_Rules
                  --Generate Billing Schedule for Top Line--
                       OKS_BILL_SCH.create_bill_sch_rules(
                                        p_billing_type => TargetLinesRecTab.BILLING_SCHEDULE_TYPE(i)
                                       ,p_sll_tbl => l_LineStreams_tbl
                                       ,p_invoice_rule_id => TargetLinesRecTab.INV_RULE_ID(i)
                                       ,x_bil_sch_out_tbl => l_bil_sch_out_tbl
                                       ,x_return_status => x_return_status);
                       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                         FND_LOG.string(FND_LOG.level_statement
                                      ,l_module_name
                                      ,'After call to OKS_BILL_SCH.create_bill_sch_rules'
                                      ||',x_return_status='||x_return_status
                                       );
                       END IF;
                       IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
                        FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_rules', substr(SQLERRM,1,240));
                        RETURN;
                       END IF;
                 EXCEPTION
                  WHEN OTHERS THEN
                     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
                     l_stage := 'OKS_BILL_SCH.create_bill_sch_rules';
                     FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage,substr(SQLERRM,1,240));
		     RAISE;
          END;
  --------------------------------------------------------------------
          END IF; -- l_duration_match check
       -- end hkamdar 20-Apr-2006
       END IF;

      END IF; --End of IF Check for l_TrgHdrStreams_Exists_YN

     ELSIF (TargetLinesRecTab.CLE_ID(i) IS NOT NULL) then

      --+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        --------Begin of BSCH Creation for Subline--------------------------
        --------For sublines, use topline schedules to generate schedule-----
      BEGIN
       Oks_bill_sch.Create_Bill_Sch_CP(
                                       p_top_line_id      => TargetLinesRecTab.CLE_ID(i)
                                      ,p_cp_line_id       => TargetLinesRecTab.LINE_ID(i)
                                      ,p_cp_new           => 'Y'
                                      ,x_return_status    => x_return_status
                                      ,x_msg_count        => x_msg_count
                                      ,x_msg_data         => x_msg_data
                                      );
         IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'After call to OKS_BILL_SCH.Create_Bill_Sch_CP'
                        ||',x_return_status='||x_return_status
                         );
         END IF;
         IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
          FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Exception in call to OKS_BILL_SCH.create_bill_sch_cp', substr(SQLERRM,1,240));
          RETURN;
         END IF;

              EXCEPTION
              WHEN OTHERS THEN
                  IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                   FND_LOG.string(FND_LOG.level_unexpected
                          ,l_module_name||'.EXCEPTION'
                          ,'Exception in call to OKS_BILL_SCH.create_bill_sch_cp, x_return_status ='||x_return_status
                           ||'SQLERRM ='||SQLERRM
                           );
                  END IF;
              x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
              FND_MSG_PUB.add_exc_msg(g_pkg_name, 'OKS_PM_PROGRAMS_PVT.RENEW_PM_PROGRAM_SCHEDULE', substr(SQLERRM,1,240));
              RAISE;
      END;
      --+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       --------End of BSCH Creation for Subline---------------
     END IF; --End If for CLE_ID is NULL check

     IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) then
      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
       FND_LOG.string(FND_LOG.level_statement
                     ,l_module_name
                     ,'Return status from OKS_BILL_SCH : x_return_status ='||x_return_status
                     );
      END IF;
      RETURN;
     END IF;
-- hkamdar 22-Aug-2006. Added for Bug# 5458842. Subscription and usage lines billing schedules.
-- Initializing local variables.
l_item_type       := NULL;
l_price_uom       := NULL;
l_pricing_method  := NULL;
l_period_start    := NULL;
l_period_type     := NULL;
-- End hkamdar for Bug# 5458842.
l_generate_bill_sch_yn := 'N';

END IF; --l_generate_bill_sch_yn = 'Y'
-- End hkamdar for Bug# 5458842.
    END LOOP; --End LOOP for looping through TargetLinesRecTab PLSQL table --2)
	EXCEPTION WHEN OTHERS THEN
          l_stage := 'Looping through TargetLinesRecTab';
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name,'OKS_COPY_CONTRACT_PVT: '||l_stage , substr(SQLERRM,1,240));
   END; --End of Begin for looping through TargetLinesRecTab
  END IF; --End of If check for TargetLinesRecTab.LINE_ID.COUNT > 0

    EXIT WHEN GetTrgLines_K_EXISTS_P%NOTFOUND;

  END LOOP; --End LOOP for BULK FETCH from GetTrgLines_K_EXISTS_P
  IF GetTrgLines_K_EXISTS_P%ISOPEN THEN
    CLOSE GetTrgLines_K_EXISTS_P;
  END IF;

  END IF; -- (P_Partial_Copy_YN = 'Y' AND P_Target_Contract_New_YN = 'N') then

     EXCEPTION
        WHEN OTHERS THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          IF GetTrgLines_K_EXISTS_P%ISOPEN THEN
           CLOSE GetTrgLines_K_EXISTS_P;
          END IF;
          IF GetStreamsForTargetHeader%ISOPEN THEN
           CLOSE GetStreamsForTargetHeader;
          END IF;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

End create_bsch_using_PPSetup;

---------------------------------------------------------------------

--This routine has been moved to OKS_UTIL_PUB. This routine is commented out here as it is no longer being used.
--The one in OKS_UTIL_PUB is being used.
/**********
Procedure create_transaction_extension(P_Api_Version IN NUMBER
				      ,P_Init_Msg_List IN VARCHAR2
				      ,P_Header_ID IN NUMBER
				      ,P_Line_ID IN NUMBER
				      ,P_Source_Trx_Ext_ID IN NUMBER
				      ,P_Cust_Acct_ID IN NUMBER
		                      ,P_Bill_To_Site_Use_ID IN NUMBER
				      ,x_entity_id OUT NOCOPY NUMBER
				      ,x_msg_data OUT NOCOPY VARCHAR2
				      ,x_msg_count OUT NOCOPY NUMBER
				      ,x_return_status OUT NOCOPY VARCHAR2) IS

 l_api_name        CONSTANT VARCHAR2(30) := 'create_transaction_extension';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

--Input parameters--
l_PayerContext_Rec	    IBY_FNDCPT_COMMON_PUB.PayerContext_rec_type;
l_Payer_Equivalency	    VARCHAR2(20);
l_Pmt_channel		    VARCHAR2(20);
l_instr_assignment	    NUMBER;
l_TrxnExtension_rec         IBY_FNDCPT_TRXN_PUB.TrxnExtension_rec_type;
l_ext_entity_tab        IBY_FNDCPT_COMMON_PUB.Id_tbl_type; --Used by copy_transaction_extension


--Output parameters--
l_response		    IBY_FNDCPT_COMMON_PUB.Result_rec_type;
l_entity_id		    NUMBER;

--Local Variables--
l_Authoring_Org_ID NUMBER;

l_Cust_Account_Site_ID NUMBER;
l_Cust_Account_ID	  NUMBER;
l_Party_ID	  NUMBER;

---Cursor to retrieve Account_Site_ID, Cust_Account_ID and Party_ID for Header
CURSOR GetAcctInfo IS
select
 cas.cust_account_id Cust_Account_ID
,ca.party_id Party_ID
from
 hz_cust_site_uses_all csu
,hz_cust_acct_sites_all cas
,hz_cust_accounts_all ca
where
csu.site_use_id = P_Bill_To_Site_Use_ID
and cas.cust_acct_site_id = csu.cust_acct_site_id
and ca.cust_account_id = cas.cust_account_id;

CURSOR GetCustAcctParty IS
select
 ca.party_id Party_ID
from
 hz_cust_accounts_all ca
where ca.cust_account_id = P_Cust_Acct_ID;

--Cursor to get Instrument_Assignment_ID
CURSOR GetInstrAssgnID IS
select
 instr_assignment_ID
,CARD_EXPIRYDATE
from
IBY_TRXN_EXTENSIONS_V
where
trxn_extension_ID = P_Source_Trx_Ext_ID;

l_Instrument_Assignment_ID NUMBER;
l_CC_Expiry_Date	   DATE;

Begin
    l_ext_entity_tab.DELETE;
    l_ext_entity_tab(0) := P_Source_Trx_Ext_ID;

    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Begin'
                        ,'P_Source_Trx_Ext_ID='||P_Source_Trx_Ext_ID
                       ||',P_Bill_To_Site_Use_ID='||P_Bill_To_Site_Use_ID
		       ||',P_Header_ID='||P_Header_ID
                       ||',P_Line_ID='||P_Line_ID
                         );
      END IF;
    END IF;

OPEN GetInstrAssgnID;
Fetch GetInstrAssgnID INTO l_Instrument_Assignment_ID,l_CC_Expiry_Date;
CLOSE GetInstrAssgnID;

IF ( to_number(to_char(l_CC_Expiry_Date,'YYYYMM')) <
     to_number(to_char(SYSDATE,'YYYYMM'))
   ) then
 x_entity_id := NULL;
 x_return_status := FND_API.G_RET_STS_SUCCESS;
ELSE

 l_Authoring_Org_ID := okc_context.get_okc_org_id;
 l_Cust_Account_Site_ID := P_Bill_To_Site_Use_ID;

 IF (P_Cust_Acct_ID IS NULL) THEN
  OPEN GetAcctInfo;
  FETCH GetAcctInfo INTO
   l_Cust_Account_ID
  ,l_Party_ID;
  CLOSE GetAcctInfo;

 ELSIF (P_Cust_Acct_ID IS NOT NULL) THEN
  l_Cust_Account_ID := P_Cust_Acct_ID;

  OPEN GetCustAcctParty;
  FETCH GetCustAcctParty INTO l_Party_ID;
  CLOSE GetCustAcctParty;

 END IF;




 --Setting values for l_PayerContext_Rec--
-- l_PayerContext_Rec.Org_Type          := 'OPERATING_UNIT';
-- l_PayerContext_Rec.Org_Id            := l_Authoring_Org_ID;
-- l_PayerContext_Rec.Account_Site_Id   := l_Cust_Account_Site_ID;
 l_PayerContext_Rec.Payment_Function  := 'CUSTOMER_PAYMENT';
 l_PayerContext_Rec.Party_Id          := l_Party_ID;
 l_PayerContext_Rec.Cust_Account_Id   := l_Cust_Account_ID;

 --Setting values for l_TrxnExtension_rec--
 If (P_Header_ID IS NOT NULL and P_Line_ID IS NULL) then
  l_TrxnExtension_rec.order_id := P_Header_ID;
 Elsif (P_Header_ID IS NULL and P_Line_ID IS NOT NULL) then
  l_TrxnExtension_rec.order_id := P_Line_ID;
 End If;

 l_TrxnExtension_rec.originating_application_id := G_APP_ID;
 l_TrxnExtension_rec.Trxn_Ref_Number1 := to_char(SYSDATE,'ddmmyyyyhhmmssss');

 l_Payer_Equivalency := IBY_FNDCPT_COMMON_PUB.G_PAYER_EQUIV_UPWARD;
 l_Pmt_Channel      := 'CREDIT_CARD';
 l_instr_assignment := l_Instrument_Assignment_ID;

                IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Org ID='||l_Authoring_Org_ID
		        ||'Party ID='||l_Party_ID
			||'Acct_Id ='||l_Cust_Account_ID
			||'Site_Id='||l_Cust_Account_Site_ID
                         );
                END IF;

     Begin

        IBY_FNDCPT_TRXN_PUB.Create_Transaction_Extension
                        (
                         p_api_version => P_api_version
			,p_init_msg_list => p_init_msg_list
			,p_commit => FND_API.G_FALSE
                        ,x_return_status => x_return_status
                        ,x_msg_count   => x_msg_count
                        ,x_msg_data    => x_msg_data
                        ,p_payer       => l_PayerContext_Rec
                        ,p_payer_equivalency => l_Payer_Equivalency
                        ,p_pmt_channel  => l_Pmt_channel
                        ,p_instr_assignment => l_instr_assignment
                        ,p_trxn_attribs     => l_TrxnExtension_rec
                        ,x_entity_id        => x_entity_id
                        ,x_response         => l_response
                         );


   --    IBY_FNDCPT_TRXN_PUB.Copy_Transaction_Extension
    --  (
    --   p_api_version        => p_api_version
    --  ,p_init_msg_list      => p_init_msg_list
    --  ,p_commit             => FND_API.G_FALSE
    --  ,x_return_status      => x_return_status
    --  ,x_msg_count          => x_msg_count
    --  ,x_msg_data           => x_msg_data
    --  ,p_payer              => l_PayerContext_Rec
    --  ,p_payer_equivalency  => l_Payer_Equivalency
    --  ,p_entities           => l_ext_entity_tab
    --  ,p_trxn_attribs       => l_TrxnExtension_rec
    --  ,x_entity_id          => x_entity_id
    --  ,x_response           => l_response
    --  );



         IF (x_return_status = FND_API.g_ret_sts_unexp_error) THEN
           fnd_message.set_name (g_app_name, 'OKS_IBY_API_ERROR');
           fnd_message.set_token
                          ('IBY_API_NAME',
                           'IBY_FNDCPT_TRXN_PUB.Create_Transaction_Extension : '||l_response.result_code);
           fnd_message.set_token ('ERROR_DTLS', l_response.result_message);
           fnd_msg_pub.ADD;
           RAISE fnd_api.g_exc_unexpected_error;
         ELSIF (x_return_status = FND_API.g_ret_sts_error) THEN
           fnd_message.set_name (g_app_name, 'OKS_IBY_API_ERROR');
           fnd_message.set_token
                          ('IBY_API_NAME',
                           'IBY_FNDCPT_TRXN_PUB.Create_Transaction_Extension :'||l_response.result_code);
           fnd_message.set_token ('ERROR_DTLS', l_response.result_message);
           fnd_msg_pub.ADD;
           RAISE fnd_api.g_exc_error;
         END IF;




         IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
		        ,l_module_name
		        ,'After call to IBY_FNDCPT_TRXN_PUB.Create_Transaction_Extension'
			||',x_return_status='||x_return_status
			||',Result Code ='||l_response.result_code
			||',Result Category='||l_response.result_category
			||',Result Message='||l_response.result_message
                         );
         END IF;


         EXCEPTION
            WHEN OTHERS THEN
	        IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.EXCEPTION'
                        ,'Exception in call to IBY_FNDCPT_TRXN_PUB.Create_Transaction_Extension, x_return_status ='||x_return_status
			 ||'SQLERRM ='||SQLERRM
                         );
                END IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, 'IBY_FNDCPT_TRXN_PUB.Create_Transaction_Extension', substr(SQLERRM,1,240));
          RAISE;

    End;

END IF; --End of IF Check for l_CC_Expiry_Date--------------------------------------

    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.End'
                        ,'x_return_status ='||x_return_status
                         );
      END IF;
    END IF;

         EXCEPTION
            WHEN OTHERS THEN
                IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
                 FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name||'.EXCEPTION'
                        ,'General Exception in Create_Transaction_Exception, x_return_status ='||x_return_status
                         ||'SQLERRM ='||SQLERRM
                         );
                END IF;
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          IF GetInstrAssgnID%ISOPEN then
           CLOSE GetInstrAssgnID;
          END IF;
          IF GetAcctInfo%ISOPEN then
           CLOSE GetAcctInfo;
          END IF;
          IF GetCustAcctParty%ISOPEN then
           CLOSE GetCustAcctParty;
          END IF;
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

End create_transaction_extension;

********************/


/*=====================================================================================
--Update_BP_StartDates: This procedure is used in Partial Copy to update the Start Dates of all the Business Process lines on the target contract
                        and its children based on the offset_period and offset_duration defined for the Business process lines
			on the source contract.
			Parameters:
				P_From_Chr_ID : Source Contract ID
				P_To_Chr_ID   : Target Contract ID
=======================================================================================*/
PROCEDURE Update_BP_StartDates(P_From_Chr_ID IN NUMBER
			      ,P_To_Chr_ID IN NUMBER
			      ,x_return_status OUT NOCOPY VARCHAR2) IS

 l_api_name        CONSTANT VARCHAR2(30) := 'Update_BP_StartDates';
 l_module_name     VARCHAR2(256) := G_APP_NAME ||'.plsql.' || G_PKG_NAME || '.' || l_api_name;


 CURSOR getBPOffsetInformation IS
 select
  a.id
 ,a.start_date
 ,a.end_date
 ,b.offset_duration
 ,b.offset_period
 from
   OKC_K_LINES_B_TEMP a
  ,OKS_K_LINES_B b
 where
  a.dnz_chr_id = P_To_Chr_ID
  and a.lse_id in (3,21)
  and a.orig_system_id1 = b.cle_id(+)
  and a.DATES_CHANGED_YN = 'Y';

 l_BP_ID NUMBER;
 l_BP_Start_Date DATE;
 l_BP_End_Date   DATE;
 l_BP_Offset_Duration OKS_K_LINES_B.OFFSET_DURATION%TYPE;
 l_BP_Offset_Period   OKS_K_LINES_B.OFFSET_PERIOD%TYPE;

 l_Resultant_Start_Date DATE;

 CURSOR getBPLineandChildren IS
 select
  a.ID
 from
  OKC_K_LINES_B_TEMP a
 where a.dnz_chr_id = P_To_Chr_ID
 start with a.id = l_BP_ID
 connect by prior a.id = a.cle_id;

 l_BP_Child_ID NUMBER;

Begin
 x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        FND_LOG.string(FND_LOG.level_statement
           ,l_module_name
           ,'In Update_BP: P_To_Chr_ID :'||P_To_Chr_ID
           );
    END IF;

 OPEN getBPOffsetInformation;
 LOOP
 FETCH getBPOffsetInformation INTO
  l_BP_ID
 ,l_BP_Start_Date
 ,l_BP_End_Date
 ,l_BP_Offset_Duration
 ,l_BP_Offset_Period;
  EXIT WHEN getBPOffsetInformation%NOTFOUND;
      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        FND_LOG.string(FND_LOG.level_statement
           ,l_module_name
           ,'OKS.plsql.OKS_COPY_CONTRACT_PVT.Update_BP'
	  ||' BP ID : '||l_BP_ID
          ||' BP Start Date: '||l_BP_Start_Date
          ||' BP End Date: '||l_BP_End_Date
	  ||' BP Offset Duration: '||l_BP_Offset_Duration
	  ||' BP Offset Period: '||l_BP_Offset_Period
           );
      END IF;

    l_Resultant_Start_Date := okc_time_util_pub.get_enddate(p_start_date => l_BP_Start_Date
							   ,p_timeunit => l_BP_Offset_Period
							   ,p_duration => l_BP_Offset_Duration);

    If (l_BP_Offset_Duration >0) then
       l_Resultant_Start_Date := l_Resultant_Start_Date +1;
    Elsif (l_BP_Offset_Duration is NULL) then
       l_Resultant_Start_Date := l_BP_Start_Date;
    End If;

    If (l_Resultant_Start_Date > l_BP_End_Date) then
      l_Resultant_Start_Date := l_BP_End_Date;
    End If;


    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        FND_LOG.string(FND_LOG.level_statement
           ,l_module_name
           ,'OKS.plsql.OKS_COPY_CONTRACT_PVT.Update_BP'
	   ||' Resultant Date : '||l_Resultant_Start_Date
           );
    END IF;

    OPEN getBPLineandChildren;
    LOOP
    FETCH getBPLineandChildren INTO l_BP_Child_ID;
     EXIT WHEN getBPLineandChildren%NOTFOUND;



       UPDATE OKC_K_LINES_B_TEMP SET START_DATE = l_Resultant_Start_Date
       WHERE DNZ_CHR_ID = P_To_Chr_ID
       AND ID = l_BP_Child_ID;

    END LOOP;
    If (getBPLineandChildren%ISOPEN) then
     CLOSE getBPLineandChildren;
    End If;
 END LOOP;
 If (getBPOffsetInformation%ISOPEN) then
  CLOSE getBPOffsetInformation;
 End If;

  EXCEPTION
   WHEN OTHERS THEN
       OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name
                        ,SQLERRM
                        );
       END IF;
       x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
       If (getBPLineandChildren%ISOPEN) then
        CLOSE getBPLineandChildren;
       End If;
       If (getBPOffsetInformation%ISOPEN) then
        CLOSE getBPOffsetInformation;
       End If;
       RAISE;
End Update_BP_StartDates;

/*======================================================================================
 Function ContractPPSetupEXISTS(P_Chr_ID IN NUMBER) RETURN VARCHAR2
 P_Chr_ID : ID of the Contract whose Partial Period Setup needs to be checked for existence.
 Returns 'Y' if the Partial Period Setup on the Contract is NOT NULL (ie Period_Start and Period_Type are NOT NULL) else 'N'
 ======================================================================================*/
 Function ContractPPSetupEXISTS(P_Chr_ID IN NUMBER) RETURN VARCHAR2 IS

 l_api_name        CONSTANT VARCHAR2(30) := 'ContractPPSetupEXISTS';
 l_module_name     VARCHAR2(256) := G_APP_NAME ||'.plsql.' || G_PKG_NAME || '.' || l_api_name;

 CURSOR getPPAttributes IS
 SELECT period_type, period_start
 FROM   oks_k_headers_b
 WHERE  chr_id = P_Chr_ID;
 l_period_type OKS_K_HEADERS_B.PERIOD_TYPE%TYPE;
 l_period_start OKS_K_HEADERS_B.PERIOD_START%TYPE;

 Begin
 OPEN getPPAttributes;
 FETCH getPPAttributes INTO l_period_type,l_period_start;
 CLOSE getPPAttributes;

 If (l_period_type IS NOT NULL) AND (l_period_start IS NOT NULL) then
   RETURN 'Y';
 Else
   RETURN 'N';
 End If;

    EXCEPTION
      WHEN OTHERS THEN
 	     OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
             IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
               FND_LOG.string(FND_LOG.level_unexpected
                             ,l_module_name
                             ,SQLERRM
                             );
             END IF;
             RAISE;


 End ContractPPSetupEXISTS;

 Function IsSourceContractTemplate(P_From_Chr_ID IN NUMBER) RETURN VARCHAR2 IS
 CURSOR GetTemplateYN IS
 select template_yn
 from okc_k_headers_b
 where id = P_From_Chr_ID;

 l_Template_YN VARCHAR2(1);
 Begin
  OPEN GetTemplateYN;
  FETCH GetTemplateYN INTO l_Template_YN;
  CLOSE GetTemplateYN;

  RETURN l_Template_YN;
   EXCEPTION
    WHEN OTHERS THEN
     IF GetTemplateYN%ISOPEN THEN
      CLOSE GetTemplateYN;
     End IF;

 End IsSourceContractTemplate;
/*======================================================================================
--Copy_Lines: This procedure copies all lines and its details for a given Contract Header
              This pricedure is used in COPY_CONTRACT API.
		                  Parameters:
					      P_From_Chr_ID: Header ID of the Source Contract
						 P_To_Chr_ID  : Header ID of the Target Contract
						 P_Renew_Ref_YN : Parameter to indicate if this routine is being called in
						 the context of Contract Renewal or regular Copy. Valid
						 values are 'Y' and 'N'
p_include_cancelled_lines is used to check whether to copy cancelled_lines or not
p_include_terminated_lines is used to check whether to copy terminated lines or not
=======================================================================================*/
PROCEDURE copy_lines(
       p_api_version      IN NUMBER
	 ,p_init_msg_list    IN VARCHAR2 DEFAULT OKC_API.G_FALSE
	 ,x_return_status    OUT NOCOPY VARCHAR2
	 ,x_msg_count        OUT NOCOPY NUMBER
	 ,x_msg_data         OUT NOCOPY VARCHAR2
	 ,P_From_Chr_ID      IN NUMBER
	 ,P_To_Chr_ID        IN NUMBER
	 ,P_Renew_Ref_YN     IN VARCHAR2
	 ,p_include_cancelled_lines IN VARCHAR2 DEFAULT 'Y'
	 ,p_include_terminated_lines IN VARCHAR2 DEFAULT 'Y') IS

 l_api_name        CONSTANT VARCHAR2(30) := 'COPY_LINES';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

 l_SrcContractPPSetupExists_YN VARCHAR2(1) := ContractPPSetupEXISTS(P_Chr_ID => P_From_Chr_ID);
 l_GCDPPSetupExists_YN VARCHAR2(1) ;

  -- 03-Nov-2006 hkamdar. Bug# 5623498.
 CURSOR get_toplvl_uom(p_line_id IN NUMBER) IS
 SELECT OEL.PRICING_QUANTITY_UOM
       FROM   OKC_K_LINES_B OKCLINE,
              OKC_K_REL_OBJS OKCREL,
              OE_ORDER_LINES_ALL OEL
       WHERE  OKCLINE.LSE_ID IN (7,9,25)
       AND    OKCLINE.id = p_line_id
       AND    OKCLINE.ID =  OKCREL.CLE_ID
       AND    OEL.LINE_ID = OKCREL.OBJECT1_ID1;

 l_toplvl_uom_code   OKS_K_LINES_B.toplvl_uom_code%TYPE;
 -- 03-Nov-2006 hkamdar. Bug# 5623498.

-- Bug# 5531198 hkamdar 21-Sep-2006
 ---------------------------------------------------------------------------
  ------------Cursor to get PRICE UOM of newly created contract--------
  CURSOR get_new_price_uom(P_To_Chr_ID IN NUMBER) IS
  select price_uom
  from oks_k_headers_b
  where chr_id = P_To_Chr_ID;

  l_TrgtHeaderPriceUom         OKS_K_HEADERS_B.PRICE_UOM%TYPE := NULL;
  l_TrgtHeaderPriceUomExists_YN VARCHAR2(1);
  ----------------------------------------------------------------------------
-- End Bug# 5531198 hkamdar 21-Sep-2006

/*if p_include_cancelled_lines 'Y' AND p_include_terminated_lines = 'Y' */
/* Cursor to get rows to be copied from:
	OKC_K_LINES_B
	OKS_K_LINES_B
	OKC_K_ITEMS
   for a specified Source Contract. This cursor is used when P_Renew_Ref_YN = 'N' */
  CURSOR GetOKCOKSLinesB_Copy(P_From_Chr_ID IN NUMBER
				  ,P_To_Chr_ID IN NUMBER) IS
  SELECT /*+ leading(okcB) use_nl(oksB,okcI) */
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcB.ID                                          AS OkcB_OldOKCLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)    AS OkcB_NewOKCLineID --Target Value
  ,okcB.LINE_NUMBER  				    AS OkcB_LINE_NUMBER
  ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID)        AS OkcB_NewChrID--Target Value
  ,okcB.CLE_ID 				 	    AS OkcB_CLE_ID
  ,P_To_Chr_ID                                      AS OkcB_NewDnzChrID --Target Value
  ,okcB.DISPLAY_SEQUENCE 			    AS OkcB_DISPLAY_SEQUENCE
  ,okcB.STS_CODE 				    AS OkcB_STS_CODE
  ,NULL				                    AS OkcB_TRN_CODE
  ,okcB.LSE_ID 					    AS OkcB_LSE_ID
  ,okcB.EXCEPTION_YN				    AS OkcB_EXCEPTION_YN
  ,1			    			    AS OkcB_OBJECT_VERSION_NUMBER
  ,okcB.HIDDEN_IND 				    AS OkcB_HIDDEN_IND
  ,(CASE WHEN  okcB.LSE_ID IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) AND okcB.DATE_CANCELLED IS NOT NULL THEN       /*Modified for bug:6765336*/
    okcB.CANCELLED_AMOUNT
    else
  decode(okcB.DATE_TERMINATED
         ,NULL
         ,decode(okcB.LSE_ID
                ,46
                ,decode(okcB.DATE_CANCELLED
                       ,NULL
                       ,okcB.PRICE_NEGOTIATED
                       ,okcB.CANCELLED_AMOUNT
                       )
                ,okcB.PRICE_NEGOTIATED
                )
         ,nvl(okcB.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         )
         END)			                    AS OkcB_PRICE_NEGOTIATED
  ,okcB.PRICE_LEVEL_IND				    AS OkcB_PRICE_LEVEL_IND
  ,okcB.PRICE_UNIT 				    AS OkcB_PRICE_UNIT
  ,okcB.PRICE_UNIT_PERCENT			    AS OkcB_PRICE_UNIT_PERCENT
  ,okcB.INVOICE_LINE_LEVEL_IND			    AS OkcB_INVOICE_LINE_LEVEL_IND
  ,okcB.DPAS_RATING				    AS OkcB_DPAS_RATING
  ,okcB.TEMPLATE_USED				    AS OkcB_TEMPLATE_USED
  ,okcB.PRICE_TYPE				    AS OkcB_PRICE_TYPE
  ,okcB.CURRENCY_CODE				    AS OkcB_CURRENCY_CODE
  ,NULL			                            AS OkcB_DATE_TERMINATED
  ,okcB.START_DATE                                  AS OkcB_START_DATE
  ,okcB.END_DATE                                    AS OkcB_END_DATE
  ,okcB.ATTRIBUTE_CATEGORY                          AS OkcB_ATTRIBUTE_CATEGORY
  ,okcB.ATTRIBUTE1                                  AS OkcB_ATTRIBUTE1
  ,okcB.ATTRIBUTE2                                  AS OkcB_ATTRIBUTE2
  ,okcB.ATTRIBUTE3				    AS OkcB_ATTRIBUTE3
  ,okcB.ATTRIBUTE4 				    AS OkcB_ATTRIBUTE4
  ,okcB.ATTRIBUTE5				    AS OkcB_ATTRIBUTE5
  ,okcB.ATTRIBUTE6				    AS OkcB_ATTRIBUTE6
  ,okcB.ATTRIBUTE7				    AS OkcB_ATTRIBUTE7
  ,okcB.ATTRIBUTE8				    AS OkcB_ATTRIBUTE8
  ,okcB.ATTRIBUTE9				    AS OkcB_ATTRIBUTE9
  ,okcB.ATTRIBUTE10				    AS OkcB_ATTRIBUTE10
  ,okcB.ATTRIBUTE11				    AS OkcB_ATTRIBUTE11
  ,okcB.ATTRIBUTE12				    AS OkcB_ATTRIBUTE12
  ,okcB.ATTRIBUTE13				    AS OkcB_ATTRIBUTE13
  ,okcB.ATTRIBUTE14				    AS OkcB_ATTRIBUTE14
  ,okcB.ATTRIBUTE15				    AS OkcB_ATTRIBUTE15
  ,okcB.SECURITY_GROUP_ID			    AS OkcB_SECURITY_GROUP_ID
  ,okcB.PRICE_NEGOTIATED_RENEWED		    AS OkcB_PRICE_NEGOTIATED_RENEWED
  ,okcB.CURRENCY_CODE_RENEWED			    AS OkcB_CURRENCY_CODE_RENEWED
  ,okcB.UPG_ORIG_SYSTEM_REF			    AS OkcB_UPG_ORIG_SYSTEM_REF
  ,okcB.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcB_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcB_DATE_RENEWED
  ,okcB.ID  					    AS OkcB_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcB_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS OkcB_ORIG_SYSTEM_SOURCE_CODE   --Target Value
  ,okcB.PROGRAM_APPLICATION_ID		    	    AS OkcB_PROGRAM_APPLICATION_ID
  ,okcB.PROGRAM_ID				    AS OkcB_PROGRAM_ID
  ,okcB.PROGRAM_UPDATE_DATE			    AS OkcB_PROGRAM_UPDATE_DATE
  ,okcB.REQUEST_ID				    AS OkcB_REQUEST_ID
  ,okcB.PRICE_LIST_ID				    AS OkcB_PRICE_LIST_ID
  ,okcB.PRICE_LIST_LINE_ID			    AS OkcB_PRICE_LIST_LINE_ID
  ,okcB.LINE_LIST_PRICE				    AS OkcB_LINE_LIST_PRICE
  ,okcB.ITEM_TO_PRICE_YN			    AS OkcB_ITEM_TO_PRICE_YN
  ,okcB.PRICING_DATE				    AS OkcB_PRICING_DATE
  ,okcB.PRICE_BASIS_YN				    AS OkcB_PRICE_BASIS_YN
  ,okcB.CONFIG_HEADER_ID			    AS OkcB_CONFIG_HEADER_ID
  ,okcB.CONFIG_REVISION_NUMBER			    AS OkcB_CONFIG_REVISION_NUMBER
  ,okcB.CONFIG_COMPLETE_YN			    AS OkcB_CONFIG_COMPLETE_YN
  ,okcB.CONFIG_VALID_YN				    AS OkcB_CONFIG_VALID_YN
  ,okcB.CONFIG_TOP_MODEL_LINE_ID		    AS OkcB_CONFIG_TOP_MODEL_LINE_ID
  ,okcB.CONFIG_ITEM_TYPE			    AS OkcB_CONFIG_ITEM_TYPE
  ,okcB.CONFIG_ITEM_ID				    AS OkcB_CONFIG_ITEM_ID
  ,okcB.SERVICE_ITEM_YN				    AS OkcB_SERVICE_ITEM_YN
  ,okcB.PH_PRICING_TYPE				    AS OkcB_PH_PRICING_TYPE
  ,okcB.PH_PRICE_BREAK_BASIS			    AS OkcB_PH_PRICE_BREAK_BASIS
  ,okcB.PH_MIN_QTY				    AS OkcB_PH_MIN_QTY
  ,okcB.PH_MIN_AMT				    AS OkcB_PH_MIN_AMT
  ,okcB.PH_QP_REFERENCE_ID			    AS OkcB_PH_QP_REFERENCE_ID
  ,okcB.PH_VALUE				    AS OkcB_PH_VALUE
  ,okcB.PH_ENFORCE_PRICE_LIST_YN		    AS OkcB_PH_ENFORCE_PRICE_LIST_YN
  ,okcB.PH_ADJUSTMENT				    AS OkcB_PH_ADJUSTMENT
  ,okcB.PH_INTEGRATED_WITH_QP			    AS OkcB_PH_INTEGRATED_WITH_QP
  ,okcB.CUST_ACCT_ID				    AS OkcB_CUST_ACCT_ID
  ,okcB.BILL_TO_SITE_USE_ID			    AS OkcB_BILL_TO_SITE_USE_ID
  ,okcB.INV_RULE_ID				    AS OkcB_INV_RULE_ID
  ,okcB.LINE_RENEWAL_TYPE_CODE			    AS OkcB_LINE_RENEWAL_TYPE_CODE
  ,okcB.SHIP_TO_SITE_USE_ID			    AS OkcB_SHIP_TO_SITE_USE_ID
  ,okcB.PAYMENT_TERM_ID				    AS OkcB_PAYMENT_TERM_ID
  ,NULL						    AS OkcB_DATE_CANCELLED
  ,NULL 					    AS OkcB_TERM_CANCEL_SOURCE --Bug 4641561
  ,okcB.ANNUALIZED_FACTOR			    AS OkcB_ANNUALIZED_FACTOR
  ,okcB.PAYMENT_INSTRUCTION_TYPE		    AS OkcB_PAYMENT_INSTRUCTION_TYPE
  ,NULL						    AS OkcB_CANCELLED_AMOUNT
  ,decode(okcB.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcB_LINE_CANCELLED_FLAG
  ,decode(okcB.DATE_TERMINATED,NULL,'N','Y')	    AS OkcB_LINE_TERMINATED_FLAG
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL                                                 AS OksB_CC_NO --Obsolete
  ,NULL 					        AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
  -- Bug# 5531198 hkamdar 21-Sep-2006
  /*
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)		AS OksB_PRICE_UOM */
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_TrgtHeaderPriceUom
		  ,oksB.PRICE_UOM))		AS OksB_PRICE_UOM
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcB.DNZ_CHR_ID = P_From_Chr_ID
  AND okcB.ID = oksB.CLE_ID(+)
  AND okcB.ID = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcI.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID;

---------------End of Cursor Definition for GetOKCOKSLinesB_Copy-----------------

/*if p_include_cancelled_lines ='Y' and p_include_terminated_lines = 'N'*/
/* Cursor to get rows to be copied from:
	OKC_K_LINES_B
	OKS_K_LINES_B
	OKC_K_ITEMS
   for a specified Source Contract. This cursor is used when P_Renew_Ref_YN = 'N' */
  CURSOR GetOKCOKSLinesB_Copy_CANCEL(P_From_Chr_ID IN NUMBER
				  ,P_To_Chr_ID IN NUMBER) IS
  SELECT /*+ leading(okcB) use_nl(oksB,okcI) */
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcB.ID                                          AS OkcB_OldOKCLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)    AS OkcB_NewOKCLineID --Target Value
  ,okcB.LINE_NUMBER  				    AS OkcB_LINE_NUMBER
  ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID)        AS OkcB_NewChrID--Target Value
  ,okcB.CLE_ID 				 	    AS OkcB_CLE_ID
  ,P_To_Chr_ID                                      AS OkcB_NewDnzChrID --Target Value
  ,okcB.DISPLAY_SEQUENCE 			    AS OkcB_DISPLAY_SEQUENCE
  ,okcB.STS_CODE 				    AS OkcB_STS_CODE
  ,NULL				                    AS OkcB_TRN_CODE
  ,okcB.LSE_ID 					    AS OkcB_LSE_ID
  ,okcB.EXCEPTION_YN				    AS OkcB_EXCEPTION_YN
  ,1			    			    AS OkcB_OBJECT_VERSION_NUMBER
  ,okcB.HIDDEN_IND 				    AS OkcB_HIDDEN_IND
  ,(CASE WHEN  okcB.LSE_ID IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) AND okcB.DATE_CANCELLED IS NOT NULL THEN       /*Modified for bug:6765336*/
    okcB.CANCELLED_AMOUNT
    else
  decode(okcB.DATE_TERMINATED
         ,NULL
         ,decode(okcB.LSE_ID
                ,46
                ,decode(okcB.DATE_CANCELLED
                       ,NULL
                       ,okcB.PRICE_NEGOTIATED
                       ,okcB.CANCELLED_AMOUNT
                       )
                ,okcB.PRICE_NEGOTIATED
                )
         ,nvl(okcB.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         )
         END)			                    AS OkcB_PRICE_NEGOTIATED
  ,okcB.PRICE_LEVEL_IND				    AS OkcB_PRICE_LEVEL_IND
  ,okcB.PRICE_UNIT 				    AS OkcB_PRICE_UNIT
  ,okcB.PRICE_UNIT_PERCENT			    AS OkcB_PRICE_UNIT_PERCENT
  ,okcB.INVOICE_LINE_LEVEL_IND			    AS OkcB_INVOICE_LINE_LEVEL_IND
  ,okcB.DPAS_RATING				    AS OkcB_DPAS_RATING
  ,okcB.TEMPLATE_USED				    AS OkcB_TEMPLATE_USED
  ,okcB.PRICE_TYPE				    AS OkcB_PRICE_TYPE
  ,okcB.CURRENCY_CODE				    AS OkcB_CURRENCY_CODE
  ,NULL			                            AS OkcB_DATE_TERMINATED
  ,okcB.START_DATE                                  AS OkcB_START_DATE
  ,okcB.END_DATE                                    AS OkcB_END_DATE
  ,okcB.ATTRIBUTE_CATEGORY                          AS OkcB_ATTRIBUTE_CATEGORY
  ,okcB.ATTRIBUTE1                                  AS OkcB_ATTRIBUTE1
  ,okcB.ATTRIBUTE2                                  AS OkcB_ATTRIBUTE2
  ,okcB.ATTRIBUTE3				    AS OkcB_ATTRIBUTE3
  ,okcB.ATTRIBUTE4 				    AS OkcB_ATTRIBUTE4
  ,okcB.ATTRIBUTE5				    AS OkcB_ATTRIBUTE5
  ,okcB.ATTRIBUTE6				    AS OkcB_ATTRIBUTE6
  ,okcB.ATTRIBUTE7				    AS OkcB_ATTRIBUTE7
  ,okcB.ATTRIBUTE8				    AS OkcB_ATTRIBUTE8
  ,okcB.ATTRIBUTE9				    AS OkcB_ATTRIBUTE9
  ,okcB.ATTRIBUTE10				    AS OkcB_ATTRIBUTE10
  ,okcB.ATTRIBUTE11				    AS OkcB_ATTRIBUTE11
  ,okcB.ATTRIBUTE12				    AS OkcB_ATTRIBUTE12
  ,okcB.ATTRIBUTE13				    AS OkcB_ATTRIBUTE13
  ,okcB.ATTRIBUTE14				    AS OkcB_ATTRIBUTE14
  ,okcB.ATTRIBUTE15				    AS OkcB_ATTRIBUTE15
  ,okcB.SECURITY_GROUP_ID			    AS OkcB_SECURITY_GROUP_ID
  ,okcB.PRICE_NEGOTIATED_RENEWED		    AS OkcB_PRICE_NEGOTIATED_RENEWED
  ,okcB.CURRENCY_CODE_RENEWED			    AS OkcB_CURRENCY_CODE_RENEWED
  ,okcB.UPG_ORIG_SYSTEM_REF			    AS OkcB_UPG_ORIG_SYSTEM_REF
  ,okcB.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcB_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcB_DATE_RENEWED
  ,okcB.ID  					    AS OkcB_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcB_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS OkcB_ORIG_SYSTEM_SOURCE_CODE   --Target Value
  ,okcB.PROGRAM_APPLICATION_ID		    	    AS OkcB_PROGRAM_APPLICATION_ID
  ,okcB.PROGRAM_ID				    AS OkcB_PROGRAM_ID
  ,okcB.PROGRAM_UPDATE_DATE			    AS OkcB_PROGRAM_UPDATE_DATE
  ,okcB.REQUEST_ID				    AS OkcB_REQUEST_ID
  ,okcB.PRICE_LIST_ID				    AS OkcB_PRICE_LIST_ID
  ,okcB.PRICE_LIST_LINE_ID			    AS OkcB_PRICE_LIST_LINE_ID
  ,okcB.LINE_LIST_PRICE				    AS OkcB_LINE_LIST_PRICE
  ,okcB.ITEM_TO_PRICE_YN			    AS OkcB_ITEM_TO_PRICE_YN
  ,okcB.PRICING_DATE				    AS OkcB_PRICING_DATE
  ,okcB.PRICE_BASIS_YN				    AS OkcB_PRICE_BASIS_YN
  ,okcB.CONFIG_HEADER_ID			    AS OkcB_CONFIG_HEADER_ID
  ,okcB.CONFIG_REVISION_NUMBER			    AS OkcB_CONFIG_REVISION_NUMBER
  ,okcB.CONFIG_COMPLETE_YN			    AS OkcB_CONFIG_COMPLETE_YN
  ,okcB.CONFIG_VALID_YN				    AS OkcB_CONFIG_VALID_YN
  ,okcB.CONFIG_TOP_MODEL_LINE_ID		    AS OkcB_CONFIG_TOP_MODEL_LINE_ID
  ,okcB.CONFIG_ITEM_TYPE			    AS OkcB_CONFIG_ITEM_TYPE
  ,okcB.CONFIG_ITEM_ID				    AS OkcB_CONFIG_ITEM_ID
  ,okcB.SERVICE_ITEM_YN				    AS OkcB_SERVICE_ITEM_YN
  ,okcB.PH_PRICING_TYPE				    AS OkcB_PH_PRICING_TYPE
  ,okcB.PH_PRICE_BREAK_BASIS			    AS OkcB_PH_PRICE_BREAK_BASIS
  ,okcB.PH_MIN_QTY				    AS OkcB_PH_MIN_QTY
  ,okcB.PH_MIN_AMT				    AS OkcB_PH_MIN_AMT
  ,okcB.PH_QP_REFERENCE_ID			    AS OkcB_PH_QP_REFERENCE_ID
  ,okcB.PH_VALUE				    AS OkcB_PH_VALUE
  ,okcB.PH_ENFORCE_PRICE_LIST_YN		    AS OkcB_PH_ENFORCE_PRICE_LIST_YN
  ,okcB.PH_ADJUSTMENT				    AS OkcB_PH_ADJUSTMENT
  ,okcB.PH_INTEGRATED_WITH_QP			    AS OkcB_PH_INTEGRATED_WITH_QP
  ,okcB.CUST_ACCT_ID				    AS OkcB_CUST_ACCT_ID
  ,okcB.BILL_TO_SITE_USE_ID			    AS OkcB_BILL_TO_SITE_USE_ID
  ,okcB.INV_RULE_ID				    AS OkcB_INV_RULE_ID
  ,okcB.LINE_RENEWAL_TYPE_CODE			    AS OkcB_LINE_RENEWAL_TYPE_CODE
  ,okcB.SHIP_TO_SITE_USE_ID			    AS OkcB_SHIP_TO_SITE_USE_ID
  ,okcB.PAYMENT_TERM_ID				    AS OkcB_PAYMENT_TERM_ID
  ,NULL						    AS OkcB_DATE_CANCELLED
  ,NULL 					    AS OkcB_TERM_CANCEL_SOURCE --Bug 4641561
  ,okcB.ANNUALIZED_FACTOR			    AS OkcB_ANNUALIZED_FACTOR
  ,okcB.PAYMENT_INSTRUCTION_TYPE		    AS OkcB_PAYMENT_INSTRUCTION_TYPE
  ,NULL						    AS OkcB_CANCELLED_AMOUNT
  ,decode(okcB.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcB_LINE_CANCELLED_FLAG
  ,decode(okcB.DATE_TERMINATED,NULL,'N','Y')	    AS OkcB_LINE_TERMINATED_FLAG
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL                                                 AS OksB_CC_NO --Obsolete
  ,NULL 					        AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
  -- Bug# 5531198 hkamdar 21-Sep-2006
  /*
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)		AS OksB_PRICE_UOM */
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_TrgtHeaderPriceUom
		  ,oksB.PRICE_UOM))		AS OksB_PRICE_UOM
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcB.DNZ_CHR_ID = P_From_Chr_ID
  AND okcB.ID = oksB.CLE_ID(+)
  AND okcB.ID = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcI.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcB.date_terminated IS NULL;

---------------End of Cursor Definition for GetOKCOKSLinesB_Copy_CANCEL-----------------

/*if p_include_cancelled_lines = 'N' and p_include_terminated_lines = 'Y' */
/* Cursor to get rows to be copied from:
	OKC_K_LINES_B
	OKS_K_LINES_B
	OKC_K_ITEMS
   for a specified Source Contract. This cursor is used when P_Renew_Ref_YN = 'N' */
  CURSOR GetOKCOKSLinesB_Copy_TERMN(P_From_Chr_ID IN NUMBER
				  ,P_To_Chr_ID IN NUMBER) IS
  SELECT /*+ leading(okcB) use_nl(oksB,okcI) */
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcB.ID                                          AS OkcB_OldOKCLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)    AS OkcB_NewOKCLineID --Target Value
  ,okcB.LINE_NUMBER  				    AS OkcB_LINE_NUMBER
  ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID)        AS OkcB_NewChrID--Target Value
  ,okcB.CLE_ID 				 	    AS OkcB_CLE_ID
  ,P_To_Chr_ID                                      AS OkcB_NewDnzChrID --Target Value
  ,okcB.DISPLAY_SEQUENCE 			    AS OkcB_DISPLAY_SEQUENCE
  ,okcB.STS_CODE 				    AS OkcB_STS_CODE
  ,NULL				                    AS OkcB_TRN_CODE
  ,okcB.LSE_ID 					    AS OkcB_LSE_ID
  ,okcB.EXCEPTION_YN				    AS OkcB_EXCEPTION_YN
  ,1			    			    AS OkcB_OBJECT_VERSION_NUMBER
  ,okcB.HIDDEN_IND 				    AS OkcB_HIDDEN_IND
  ,(CASE WHEN  okcB.LSE_ID IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) AND okcB.DATE_CANCELLED IS NOT NULL THEN       /*Modified for bug:6765336*/
    okcB.CANCELLED_AMOUNT
    else
  decode(okcB.DATE_TERMINATED
         ,NULL
         ,decode(okcB.LSE_ID
                ,46
                ,decode(okcB.DATE_CANCELLED
                       ,NULL
                       ,okcB.PRICE_NEGOTIATED
                       ,okcB.CANCELLED_AMOUNT
                       )
                ,okcB.PRICE_NEGOTIATED
                )
         ,nvl(okcB.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         )
         END)			                    AS OkcB_PRICE_NEGOTIATED
  ,okcB.PRICE_LEVEL_IND				    AS OkcB_PRICE_LEVEL_IND
  ,okcB.PRICE_UNIT 				    AS OkcB_PRICE_UNIT
  ,okcB.PRICE_UNIT_PERCENT			    AS OkcB_PRICE_UNIT_PERCENT
  ,okcB.INVOICE_LINE_LEVEL_IND			    AS OkcB_INVOICE_LINE_LEVEL_IND
  ,okcB.DPAS_RATING				    AS OkcB_DPAS_RATING
  ,okcB.TEMPLATE_USED				    AS OkcB_TEMPLATE_USED
  ,okcB.PRICE_TYPE				    AS OkcB_PRICE_TYPE
  ,okcB.CURRENCY_CODE				    AS OkcB_CURRENCY_CODE
  ,NULL			                            AS OkcB_DATE_TERMINATED
  ,okcB.START_DATE                                  AS OkcB_START_DATE
  ,okcB.END_DATE                                    AS OkcB_END_DATE
  ,okcB.ATTRIBUTE_CATEGORY                          AS OkcB_ATTRIBUTE_CATEGORY
  ,okcB.ATTRIBUTE1                                  AS OkcB_ATTRIBUTE1
  ,okcB.ATTRIBUTE2                                  AS OkcB_ATTRIBUTE2
  ,okcB.ATTRIBUTE3				    AS OkcB_ATTRIBUTE3
  ,okcB.ATTRIBUTE4 				    AS OkcB_ATTRIBUTE4
  ,okcB.ATTRIBUTE5				    AS OkcB_ATTRIBUTE5
  ,okcB.ATTRIBUTE6				    AS OkcB_ATTRIBUTE6
  ,okcB.ATTRIBUTE7				    AS OkcB_ATTRIBUTE7
  ,okcB.ATTRIBUTE8				    AS OkcB_ATTRIBUTE8
  ,okcB.ATTRIBUTE9				    AS OkcB_ATTRIBUTE9
  ,okcB.ATTRIBUTE10				    AS OkcB_ATTRIBUTE10
  ,okcB.ATTRIBUTE11				    AS OkcB_ATTRIBUTE11
  ,okcB.ATTRIBUTE12				    AS OkcB_ATTRIBUTE12
  ,okcB.ATTRIBUTE13				    AS OkcB_ATTRIBUTE13
  ,okcB.ATTRIBUTE14				    AS OkcB_ATTRIBUTE14
  ,okcB.ATTRIBUTE15				    AS OkcB_ATTRIBUTE15
  ,okcB.SECURITY_GROUP_ID			    AS OkcB_SECURITY_GROUP_ID
  ,okcB.PRICE_NEGOTIATED_RENEWED		    AS OkcB_PRICE_NEGOTIATED_RENEWED
  ,okcB.CURRENCY_CODE_RENEWED			    AS OkcB_CURRENCY_CODE_RENEWED
  ,okcB.UPG_ORIG_SYSTEM_REF			    AS OkcB_UPG_ORIG_SYSTEM_REF
  ,okcB.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcB_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcB_DATE_RENEWED
  ,okcB.ID  					    AS OkcB_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcB_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS OkcB_ORIG_SYSTEM_SOURCE_CODE   --Target Value
  ,okcB.PROGRAM_APPLICATION_ID		    	    AS OkcB_PROGRAM_APPLICATION_ID
  ,okcB.PROGRAM_ID				    AS OkcB_PROGRAM_ID
  ,okcB.PROGRAM_UPDATE_DATE			    AS OkcB_PROGRAM_UPDATE_DATE
  ,okcB.REQUEST_ID				    AS OkcB_REQUEST_ID
  ,okcB.PRICE_LIST_ID				    AS OkcB_PRICE_LIST_ID
  ,okcB.PRICE_LIST_LINE_ID			    AS OkcB_PRICE_LIST_LINE_ID
  ,okcB.LINE_LIST_PRICE				    AS OkcB_LINE_LIST_PRICE
  ,okcB.ITEM_TO_PRICE_YN			    AS OkcB_ITEM_TO_PRICE_YN
  ,okcB.PRICING_DATE				    AS OkcB_PRICING_DATE
  ,okcB.PRICE_BASIS_YN				    AS OkcB_PRICE_BASIS_YN
  ,okcB.CONFIG_HEADER_ID			    AS OkcB_CONFIG_HEADER_ID
  ,okcB.CONFIG_REVISION_NUMBER			    AS OkcB_CONFIG_REVISION_NUMBER
  ,okcB.CONFIG_COMPLETE_YN			    AS OkcB_CONFIG_COMPLETE_YN
  ,okcB.CONFIG_VALID_YN				    AS OkcB_CONFIG_VALID_YN
  ,okcB.CONFIG_TOP_MODEL_LINE_ID		    AS OkcB_CONFIG_TOP_MODEL_LINE_ID
  ,okcB.CONFIG_ITEM_TYPE			    AS OkcB_CONFIG_ITEM_TYPE
  ,okcB.CONFIG_ITEM_ID				    AS OkcB_CONFIG_ITEM_ID
  ,okcB.SERVICE_ITEM_YN				    AS OkcB_SERVICE_ITEM_YN
  ,okcB.PH_PRICING_TYPE				    AS OkcB_PH_PRICING_TYPE
  ,okcB.PH_PRICE_BREAK_BASIS			    AS OkcB_PH_PRICE_BREAK_BASIS
  ,okcB.PH_MIN_QTY				    AS OkcB_PH_MIN_QTY
  ,okcB.PH_MIN_AMT				    AS OkcB_PH_MIN_AMT
  ,okcB.PH_QP_REFERENCE_ID			    AS OkcB_PH_QP_REFERENCE_ID
  ,okcB.PH_VALUE				    AS OkcB_PH_VALUE
  ,okcB.PH_ENFORCE_PRICE_LIST_YN		    AS OkcB_PH_ENFORCE_PRICE_LIST_YN
  ,okcB.PH_ADJUSTMENT				    AS OkcB_PH_ADJUSTMENT
  ,okcB.PH_INTEGRATED_WITH_QP			    AS OkcB_PH_INTEGRATED_WITH_QP
  ,okcB.CUST_ACCT_ID				    AS OkcB_CUST_ACCT_ID
  ,okcB.BILL_TO_SITE_USE_ID			    AS OkcB_BILL_TO_SITE_USE_ID
  ,okcB.INV_RULE_ID				    AS OkcB_INV_RULE_ID
  ,okcB.LINE_RENEWAL_TYPE_CODE			    AS OkcB_LINE_RENEWAL_TYPE_CODE
  ,okcB.SHIP_TO_SITE_USE_ID			    AS OkcB_SHIP_TO_SITE_USE_ID
  ,okcB.PAYMENT_TERM_ID				    AS OkcB_PAYMENT_TERM_ID
  ,NULL						    AS OkcB_DATE_CANCELLED
  ,NULL 					    AS OkcB_TERM_CANCEL_SOURCE --Bug 4641561
  ,okcB.ANNUALIZED_FACTOR			    AS OkcB_ANNUALIZED_FACTOR
  ,okcB.PAYMENT_INSTRUCTION_TYPE		    AS OkcB_PAYMENT_INSTRUCTION_TYPE
  ,NULL						    AS OkcB_CANCELLED_AMOUNT
  ,decode(okcB.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcB_LINE_CANCELLED_FLAG
  ,decode(okcB.DATE_TERMINATED,NULL,'N','Y')	    AS OkcB_LINE_TERMINATED_FLAG
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL                                                 AS OksB_CC_NO --Obsolete
  ,NULL 					        AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
  -- Bug# 5531198 hkamdar 21-Sep-2006
  /*
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)		AS OksB_PRICE_UOM */
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_TrgtHeaderPriceUom
		  ,oksB.PRICE_UOM))		AS OksB_PRICE_UOM
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcB.DNZ_CHR_ID = P_From_Chr_ID
  AND okcB.ID = oksB.CLE_ID(+)
  AND okcB.ID = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcI.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcB.date_cancelled IS NULL;

---------------End of Cursor Definition for GetOKCOKSLinesB_Copy_termn-----------------

/*if p_include_cancelled_lines = 'N' and p_include_terminated_lines = 'N' */
/* Cursor to get rows to be copied from:
	OKC_K_LINES_B
	OKS_K_LINES_B
	OKC_K_ITEMS
   for a specified Source Contract. This cursor is used when P_Renew_Ref_YN = 'N' */
  CURSOR GetOKCOKSLinesB_Copy_exclude(P_From_Chr_ID IN NUMBER
				  ,P_To_Chr_ID IN NUMBER) IS
  SELECT /*+ leading(okcB) use_nl(oksB,okcI) */
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcB.ID                                          AS OkcB_OldOKCLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)    AS OkcB_NewOKCLineID --Target Value
  ,okcB.LINE_NUMBER  				    AS OkcB_LINE_NUMBER
  ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID)        AS OkcB_NewChrID--Target Value
  ,okcB.CLE_ID 				 	    AS OkcB_CLE_ID
  ,P_To_Chr_ID                                      AS OkcB_NewDnzChrID --Target Value
  ,okcB.DISPLAY_SEQUENCE 			    AS OkcB_DISPLAY_SEQUENCE
  ,okcB.STS_CODE 				    AS OkcB_STS_CODE
  ,NULL				                    AS OkcB_TRN_CODE
  ,okcB.LSE_ID 					    AS OkcB_LSE_ID
  ,okcB.EXCEPTION_YN				    AS OkcB_EXCEPTION_YN
  ,1			    			    AS OkcB_OBJECT_VERSION_NUMBER
  ,okcB.HIDDEN_IND 				    AS OkcB_HIDDEN_IND
  ,(CASE WHEN  okcB.LSE_ID IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) AND okcB.DATE_CANCELLED IS NOT NULL THEN       /*Modified for bug:6765336*/
    okcB.CANCELLED_AMOUNT
    else
  decode(okcB.DATE_TERMINATED
         ,NULL
         ,decode(okcB.LSE_ID
                ,46
                ,decode(okcB.DATE_CANCELLED
                       ,NULL
                       ,okcB.PRICE_NEGOTIATED
                       ,okcB.CANCELLED_AMOUNT
                       )
                ,okcB.PRICE_NEGOTIATED
                )
         ,nvl(okcB.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         )
         END)			                    AS OkcB_PRICE_NEGOTIATED
  ,okcB.PRICE_LEVEL_IND				    AS OkcB_PRICE_LEVEL_IND
  ,okcB.PRICE_UNIT 				    AS OkcB_PRICE_UNIT
  ,okcB.PRICE_UNIT_PERCENT			    AS OkcB_PRICE_UNIT_PERCENT
  ,okcB.INVOICE_LINE_LEVEL_IND			    AS OkcB_INVOICE_LINE_LEVEL_IND
  ,okcB.DPAS_RATING				    AS OkcB_DPAS_RATING
  ,okcB.TEMPLATE_USED				    AS OkcB_TEMPLATE_USED
  ,okcB.PRICE_TYPE				    AS OkcB_PRICE_TYPE
  ,okcB.CURRENCY_CODE				    AS OkcB_CURRENCY_CODE
  ,NULL			                            AS OkcB_DATE_TERMINATED
  ,okcB.START_DATE                                  AS OkcB_START_DATE
  ,okcB.END_DATE                                    AS OkcB_END_DATE
  ,okcB.ATTRIBUTE_CATEGORY                          AS OkcB_ATTRIBUTE_CATEGORY
  ,okcB.ATTRIBUTE1                                  AS OkcB_ATTRIBUTE1
  ,okcB.ATTRIBUTE2                                  AS OkcB_ATTRIBUTE2
  ,okcB.ATTRIBUTE3				    AS OkcB_ATTRIBUTE3
  ,okcB.ATTRIBUTE4 				    AS OkcB_ATTRIBUTE4
  ,okcB.ATTRIBUTE5				    AS OkcB_ATTRIBUTE5
  ,okcB.ATTRIBUTE6				    AS OkcB_ATTRIBUTE6
  ,okcB.ATTRIBUTE7				    AS OkcB_ATTRIBUTE7
  ,okcB.ATTRIBUTE8				    AS OkcB_ATTRIBUTE8
  ,okcB.ATTRIBUTE9				    AS OkcB_ATTRIBUTE9
  ,okcB.ATTRIBUTE10				    AS OkcB_ATTRIBUTE10
  ,okcB.ATTRIBUTE11				    AS OkcB_ATTRIBUTE11
  ,okcB.ATTRIBUTE12				    AS OkcB_ATTRIBUTE12
  ,okcB.ATTRIBUTE13				    AS OkcB_ATTRIBUTE13
  ,okcB.ATTRIBUTE14				    AS OkcB_ATTRIBUTE14
  ,okcB.ATTRIBUTE15				    AS OkcB_ATTRIBUTE15
  ,okcB.SECURITY_GROUP_ID			    AS OkcB_SECURITY_GROUP_ID
  ,okcB.PRICE_NEGOTIATED_RENEWED		    AS OkcB_PRICE_NEGOTIATED_RENEWED
  ,okcB.CURRENCY_CODE_RENEWED			    AS OkcB_CURRENCY_CODE_RENEWED
  ,okcB.UPG_ORIG_SYSTEM_REF			    AS OkcB_UPG_ORIG_SYSTEM_REF
  ,okcB.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcB_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcB_DATE_RENEWED
  ,okcB.ID  					    AS OkcB_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcB_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS OkcB_ORIG_SYSTEM_SOURCE_CODE   --Target Value
  ,okcB.PROGRAM_APPLICATION_ID		    	    AS OkcB_PROGRAM_APPLICATION_ID
  ,okcB.PROGRAM_ID				    AS OkcB_PROGRAM_ID
  ,okcB.PROGRAM_UPDATE_DATE			    AS OkcB_PROGRAM_UPDATE_DATE
  ,okcB.REQUEST_ID				    AS OkcB_REQUEST_ID
  ,okcB.PRICE_LIST_ID				    AS OkcB_PRICE_LIST_ID
  ,okcB.PRICE_LIST_LINE_ID			    AS OkcB_PRICE_LIST_LINE_ID
  ,okcB.LINE_LIST_PRICE				    AS OkcB_LINE_LIST_PRICE
  ,okcB.ITEM_TO_PRICE_YN			    AS OkcB_ITEM_TO_PRICE_YN
  ,okcB.PRICING_DATE				    AS OkcB_PRICING_DATE
  ,okcB.PRICE_BASIS_YN				    AS OkcB_PRICE_BASIS_YN
  ,okcB.CONFIG_HEADER_ID			    AS OkcB_CONFIG_HEADER_ID
  ,okcB.CONFIG_REVISION_NUMBER			    AS OkcB_CONFIG_REVISION_NUMBER
  ,okcB.CONFIG_COMPLETE_YN			    AS OkcB_CONFIG_COMPLETE_YN
  ,okcB.CONFIG_VALID_YN				    AS OkcB_CONFIG_VALID_YN
  ,okcB.CONFIG_TOP_MODEL_LINE_ID		    AS OkcB_CONFIG_TOP_MODEL_LINE_ID
  ,okcB.CONFIG_ITEM_TYPE			    AS OkcB_CONFIG_ITEM_TYPE
  ,okcB.CONFIG_ITEM_ID				    AS OkcB_CONFIG_ITEM_ID
  ,okcB.SERVICE_ITEM_YN				    AS OkcB_SERVICE_ITEM_YN
  ,okcB.PH_PRICING_TYPE				    AS OkcB_PH_PRICING_TYPE
  ,okcB.PH_PRICE_BREAK_BASIS			    AS OkcB_PH_PRICE_BREAK_BASIS
  ,okcB.PH_MIN_QTY				    AS OkcB_PH_MIN_QTY
  ,okcB.PH_MIN_AMT				    AS OkcB_PH_MIN_AMT
  ,okcB.PH_QP_REFERENCE_ID			    AS OkcB_PH_QP_REFERENCE_ID
  ,okcB.PH_VALUE				    AS OkcB_PH_VALUE
  ,okcB.PH_ENFORCE_PRICE_LIST_YN		    AS OkcB_PH_ENFORCE_PRICE_LIST_YN
  ,okcB.PH_ADJUSTMENT				    AS OkcB_PH_ADJUSTMENT
  ,okcB.PH_INTEGRATED_WITH_QP			    AS OkcB_PH_INTEGRATED_WITH_QP
  ,okcB.CUST_ACCT_ID				    AS OkcB_CUST_ACCT_ID
  ,okcB.BILL_TO_SITE_USE_ID			    AS OkcB_BILL_TO_SITE_USE_ID
  ,okcB.INV_RULE_ID				    AS OkcB_INV_RULE_ID
  ,okcB.LINE_RENEWAL_TYPE_CODE			    AS OkcB_LINE_RENEWAL_TYPE_CODE
  ,okcB.SHIP_TO_SITE_USE_ID			    AS OkcB_SHIP_TO_SITE_USE_ID
  ,okcB.PAYMENT_TERM_ID				    AS OkcB_PAYMENT_TERM_ID
  ,NULL						    AS OkcB_DATE_CANCELLED
  ,NULL 					    AS OkcB_TERM_CANCEL_SOURCE --Bug 4641561
  ,okcB.ANNUALIZED_FACTOR			    AS OkcB_ANNUALIZED_FACTOR
  ,okcB.PAYMENT_INSTRUCTION_TYPE		    AS OkcB_PAYMENT_INSTRUCTION_TYPE
  ,NULL						    AS OkcB_CANCELLED_AMOUNT
  ,decode(okcB.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcB_LINE_CANCELLED_FLAG
  ,decode(okcB.DATE_TERMINATED,NULL,'N','Y')	    AS OkcB_LINE_TERMINATED_FLAG
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL                                                 AS OksB_CC_NO --Obsolete
  ,NULL 					        AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
  -- Bug# 5531198 hkamdar 21-Sep-2006
  /*
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)		AS OksB_PRICE_UOM */
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_TrgtHeaderPriceUom
		  ,oksB.PRICE_UOM))		AS OksB_PRICE_UOM
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcB.DNZ_CHR_ID = P_From_Chr_ID
  AND okcB.ID = oksB.CLE_ID(+)
  AND okcB.ID = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcI.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcB.date_cancelled is null
  AND okcB.date_terminated is null;

---------------End of Cursor Definition for GetOKCOKSLinesB_Copy_EXCLUDE-----------------


/* Cursor to get rows to be copied from:
	OKC_K_LINES_B
	OKS_K_LINES_B
	OKC_K_ITEMS
   for a specified Source Contracti. This cursor is used when P_Renew_Ref_YN = 'Y'. It filters out
   the lines that have been renewed,cancelled or terminated or have been marked as 'DNR' (Do not renew) */

  CURSOR GetOKCOKSLinesB_Renew(P_From_Chr_ID IN NUMBER
				    ,P_To_Chr_ID IN NUMBER) IS
  SELECT /*+ leading(okcB) use_nl(oksB,okcI) */
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcB.ID							      AS OkcB_OldOKCLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr) AS OkcB_NewOKCLineID --Target Value
  ,okcB.LINE_NUMBER  				    AS OkcB_LINE_NUMBER
  ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID)        AS OkcB_NewChrID--Target Value
  ,okcB.CLE_ID 				 	    AS OkcB_CLE_ID
  ,P_To_Chr_ID                                      AS OkcB_NewDnzChrID --Target Value
  ,okcB.DISPLAY_SEQUENCE 			    AS OkcB_DISPLAY_SEQUENCE
  ,okcB.STS_CODE 				    AS OkcB_STS_CODE
  ,okcB.TRN_CODE			            AS OkcB_TRN_CODE
  ,okcB.LSE_ID 					    AS OkcB_LSE_ID
  ,okcB.EXCEPTION_YN				    AS OkcB_EXCEPTION_YN
  ,1						    AS OkcB_OBJECT_VERSION_NUMBER
  ,okcB.HIDDEN_IND 				    AS OkcB_HIDDEN_IND
  ,okcB.PRICE_NEGOTIATED 			    AS OkcB_PRICE_NEGOTIATED
  ,okcB.PRICE_LEVEL_IND				    AS OkcB_PRICE_LEVEL_IND
  ,okcB.PRICE_UNIT 				    AS OkcB_PRICE_UNIT
  ,okcB.PRICE_UNIT_PERCENT			    AS OkcB_PRICE_UNIT_PERCENT
  ,okcB.INVOICE_LINE_LEVEL_IND			    AS OkcB_INVOICE_LINE_LEVEL_IND
  ,okcB.DPAS_RATING				    AS OkcB_DPAS_RATING
  ,okcB.TEMPLATE_USED				    AS OkcB_TEMPLATE_USED
  ,okcB.PRICE_TYPE				    AS OkcB_PRICE_TYPE
  ,okcB.CURRENCY_CODE				    AS OkcB_CURRENCY_CODE
  ,NULL			                            AS OkcB_DATE_TERMINATED
  ,okcB.START_DATE                                  AS OkcB_START_DATE
  ,okcB.END_DATE                                    AS OkcB_END_DATE
  ,okcB.ATTRIBUTE_CATEGORY                          AS OkcB_ATTRIBUTE_CATEGORY
  ,okcB.ATTRIBUTE1                                  AS OkcB_ATTRIBUTE1
  ,okcB.ATTRIBUTE2                                  AS OkcB_ATTRIBUTE2
  ,okcB.ATTRIBUTE3				    AS OkcB_ATTRIBUTE3
  ,okcB.ATTRIBUTE4 				    AS OkcB_ATTRIBUTE4
  ,okcB.ATTRIBUTE5				    AS OkcB_ATTRIBUTE5
  ,okcB.ATTRIBUTE6				    AS OkcB_ATTRIBUTE6
  ,okcB.ATTRIBUTE7				    AS OkcB_ATTRIBUTE7
  ,okcB.ATTRIBUTE8				    AS OkcB_ATTRIBUTE8
  ,okcB.ATTRIBUTE9				    AS OkcB_ATTRIBUTE9
  ,okcB.ATTRIBUTE10				    AS OkcB_ATTRIBUTE10
  ,okcB.ATTRIBUTE11				    AS OkcB_ATTRIBUTE11
  ,okcB.ATTRIBUTE12				    AS OkcB_ATTRIBUTE12
  ,okcB.ATTRIBUTE13				    AS OkcB_ATTRIBUTE13
  ,okcB.ATTRIBUTE14				    AS OkcB_ATTRIBUTE14
  ,okcB.ATTRIBUTE15				    AS OkcB_ATTRIBUTE15
  ,okcB.SECURITY_GROUP_ID			    AS OkcB_SECURITY_GROUP_ID
  ,okcB.PRICE_NEGOTIATED_RENEWED		    AS OkcB_PRICE_NEGOTIATED_RENEWED
  ,okcB.CURRENCY_CODE_RENEWED			    AS OkcB_CURRENCY_CODE_RENEWED
  /*Commented and Modified by sjanakir for Bug# 7214731
  ,okcB.UPG_ORIG_SYSTEM_REF			    AS OkcB_UPG_ORIG_SYSTEM_REF
  ,okcB.UPG_ORIG_SYSTEM_REF_ID			    AS OkcB_UPG_ORIG_SYSTEM_REF_ID
  */
  ,NULL			    AS OkcB_UPG_ORIG_SYSTEM_REF
  ,NULL			    AS OkcB_UPG_ORIG_SYSTEM_REF_ID
  ,NULL						    AS OkcB_DATE_RENEWED
  ,okcB.ID  					    AS OkcB_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcB_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                                       AS OkcB_ORIG_SYSTEM_SOURCE_CODE   --Target Value
  ,okcB.PROGRAM_APPLICATION_ID			    AS OkcB_PROGRAM_APPLICATION_ID
  ,okcB.PROGRAM_ID				    AS OkcB_PROGRAM_ID
  ,okcB.PROGRAM_UPDATE_DATE			    AS OkcB_PROGRAM_UPDATE_DATE
  ,okcB.REQUEST_ID				    AS OkcB_REQUEST_ID
  ,okcB.PRICE_LIST_ID				    AS OkcB_PRICE_LIST_ID
  ,okcB.PRICE_LIST_LINE_ID			    AS OkcB_PRICE_LIST_LINE_ID
  ,okcB.LINE_LIST_PRICE				    AS OkcB_LINE_LIST_PRICE
  ,okcB.ITEM_TO_PRICE_YN			    AS OkcB_ITEM_TO_PRICE_YN
  ,okcB.PRICING_DATE				    AS OkcB_PRICING_DATE
  ,okcB.PRICE_BASIS_YN				    AS OkcB_PRICE_BASIS_YN
  ,okcB.CONFIG_HEADER_ID			    AS OkcB_CONFIG_HEADER_ID
  ,okcB.CONFIG_REVISION_NUMBER			    AS OkcB_CONFIG_REVISION_NUMBER
  ,okcB.CONFIG_COMPLETE_YN			    AS OkcB_CONFIG_COMPLETE_YN
  ,okcB.CONFIG_VALID_YN				    AS OkcB_CONFIG_VALID_YN
  ,okcB.CONFIG_TOP_MODEL_LINE_ID		    AS OkcB_CONFIG_TOP_MODEL_LINE_ID
  ,okcB.CONFIG_ITEM_TYPE			    AS OkcB_CONFIG_ITEM_TYPE
  ,okcB.CONFIG_ITEM_ID				    AS OkcB_CONFIG_ITEM_ID
  ,okcB.SERVICE_ITEM_YN				    AS OkcB_SERVICE_ITEM_YN
  ,okcB.PH_PRICING_TYPE				    AS OkcB_PH_PRICING_TYPE
  ,okcB.PH_PRICE_BREAK_BASIS			    AS OkcB_PH_PRICE_BREAK_BASIS
  ,okcB.PH_MIN_QTY				    AS OkcB_PH_MIN_QTY
  ,okcB.PH_MIN_AMT				    AS OkcB_PH_MIN_AMT
  ,okcB.PH_QP_REFERENCE_ID			    AS OkcB_PH_QP_REFERENCE_ID
  ,okcB.PH_VALUE				    AS OkcB_PH_VALUE
  ,okcB.PH_ENFORCE_PRICE_LIST_YN		    AS OkcB_PH_ENFORCE_PRICE_LIST_YN
  ,okcB.PH_ADJUSTMENT				    AS OkcB_PH_ADJUSTMENT
  ,okcB.PH_INTEGRATED_WITH_QP			    AS OkcB_PH_INTEGRATED_WITH_QP
  ,okcB.CUST_ACCT_ID				    AS OkcB_CUST_ACCT_ID
  ,okcB.BILL_TO_SITE_USE_ID			    AS OkcB_BILL_TO_SITE_USE_ID
  ,okcB.INV_RULE_ID				    AS OkcB_INV_RULE_ID
  ,okcB.LINE_RENEWAL_TYPE_CODE			    AS OkcB_LINE_RENEWAL_TYPE_CODE
  ,okcB.SHIP_TO_SITE_USE_ID			    AS OkcB_SHIP_TO_SITE_USE_ID
  ,okcB.PAYMENT_TERM_ID				    AS OkcB_PAYMENT_TERM_ID
  ,NULL						    AS OkcB_DATE_CANCELLED
  ,NULL			    			    AS OkcB_TERM_CANCEL_SOURCE
  ,okcB.ANNUALIZED_FACTOR			    AS OkcB_ANNUALIZED_FACTOR
  ,okcB.PAYMENT_INSTRUCTION_TYPE		    AS OkcB_PAYMENT_INSTRUCTION_TYPE
  ,NULL			    			    AS OkcB_CANCELLED_AMOUNT
  ,decode(okcB.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcB_LINE_CANCELLED_FLAG
  ,decode(okcB.DATE_TERMINATED,NULL,'N','Y')        AS OkcB_LINE_TERMINATED_FLAG
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID					    AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)    AS OksB_NewOksLineID
  ,oksB.CLE_ID  				    AS OksB_CLE_ID
  ,P_To_Chr_ID 					    AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST				    AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID				    AS OksB_ACCT_RULE_ID
  ,oksB.PAYMENT_TYPE				    AS OksB_PAYMENT_TYPE
  ,NULL						    AS OksB_CC_NO --Obsolete
  ,NULL						    AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL						    AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL						    AS OksB_CC_AUTH_CODE --Obsolete
  ,oksB.COMMITMENT_ID				    AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID			    AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN				    AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD			    AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE			    AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD				    AS OksB_TERMN_METHOD
  ,NULL						    AS OksB_UBT_AMOUNT
  ,NULL						    AS OksB_CREDIT_AMOUNT
  ,NULL 					    AS OksB_SUPPRESSED_CREDIT
  ,NULL						    AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN			    AS OksB_CUST_PO_NUMBER_REQ_YN
  ,oksB.CUST_PO_NUMBER				    AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION				    AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD				    AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG				    AS OksB_INV_PRINT_FLAG
  -- Bug# 5531198 hkamdar 21-Sep-2006
  /*
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)		AS OksB_PRICE_UOM */
  ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_TrgtHeaderPriceUom
		  ,oksB.PRICE_UOM))		AS OksB_PRICE_UOM
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT				    AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN			    AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS				    AS OksB_TAX_STATUS
  ,oksB.TAX_CODE				    AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID			    AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE				    AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE				    AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE				    AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE				    AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE				    AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY				    AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT			    AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE				    AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE			    AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL			    AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY				    AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE				    AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE			    AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY			    AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL			    AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL			    AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY			    AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY			    AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG				    AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY				    AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION				    AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD				    AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN				    AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE				    AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED				    AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING				    AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE			AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL						AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID		AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM				AS OksB_BREAK_UOM
  ,oksB.PRORATE					AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE				AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID			AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED			AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT				AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT			AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION				AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD				AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID			AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID					AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN				AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN				AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION				AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN				AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE			AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID				AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN				AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN			AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT			AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE			AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL			AS OksB_SYNC_DATE_INSTALL
  ,1						AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID			AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID				AS OksB_REQUEST_ID
  ,oksB.ID 					AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 					AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 					AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID			AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE                 AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER               AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE                      AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID                    		AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN                      	AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID					AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)AS OkcI_NewOkcItemID
  ,okcI.CLE_ID					AS OkcI_CLE_ID
  ,P_To_Chr_ID 					AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  	AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1				AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2				AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE			AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE				AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN				AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS				AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN				AS OkcI_PRICED_ITEM_YN
  ,1						AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID			AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF			AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID			AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID			AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID				AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE			AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID				AS OkcI_REQUEST_ID
  FROM
  OKC_K_LINES_B okcB
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  WHERE
  okcB.ID = oksB.CLE_ID(+)
  AND okcB.ID = okcI.CLE_ID(+)
  AND okcB.DNZ_CHR_ID = P_From_Chr_ID
  AND oksB.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND okcI.DNZ_CHR_ID(+) = okcB.DNZ_CHR_ID
  AND
    (
     NVL(okcB.LINE_RENEWAL_TYPE_CODE,'X') <> 'DNR'
     AND okcB.DATE_TERMINATED IS NULL
     AND okcB.DATE_CANCELLED IS NULL
     AND okcB.DATE_RENEWED IS NULL
     )
  AND (okcB.CLE_ID IS NULL
      OR
      (okcB.CLE_ID IS NOT NULL
       AND NOT EXISTS
          (SELECT 'X'
           FROM okc_k_lines_b lb2
           WHERE NVL(lb2.line_renewal_type_code,'X') = 'DNR'
           OR lb2.DATE_TERMINATED IS NOT NULL
           OR lb2.DATE_CANCELLED IS NOT NULL
           OR lb2.DATE_RENEWED IS NOT NULL
   	   START WITH lb2.id = okcB.cle_id
           CONNECT BY PRIOR lb2.cle_id = lb2.id
          )
     )
    );

  -------------End of Cursor definition for GetOKCOKSLinesB_Renew-------------

  -------------Cursor to get default status for line-------------------------
  CURSOR get_default_status IS
  select code
  from okc_statuses_b
  where ste_code = 'ENTERED'
  and default_yn = 'Y';

  l_Default_Sts_Code OKC_STATUSES_B.CODE%TYPE;
  ---------------------------------------------------------------------------
  ------------Cursor to get Contract Number of newly created contract--------
  CURSOR get_new_contract_number(P_To_Chr_ID IN NUMBER) IS
  select contract_number
  from okc_k_headers_b
  where id = P_To_Chr_ID;

  l_new_contract_number       OKC_K_HEADERS_B.CONTRACT_NUMBER%TYPE := NULL;
  ----------------------------------------------------------------------------

  l_return_status    VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
  l_euro_currency    VARCHAR2(15) := NULL;

  --OKC Line Attributes to be updated--
  l_converted_price_negotiated NUMBER := NULL;
  l_converted_price_unit NUMBER := NULL;
  l_tax_amount NUMBER := NULL;


  --OKS Line Attributes to be updated--
  l_locked_price_list_id      NUMBER := NULL;
  l_locked_price_list_line_id NUMBER := NULL;
  l_trxn_extension_id		NUMBER := NULL;

  lx_rail_rec OKS_TAX_UTIL_PVT.ra_rec_type;
Begin

    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Begin'
                        ,',P_From_Chr_ID='||P_From_Chr_ID
                         ||',P_To_Chr_ID='||P_To_Chr_ID
                         ||',p_renew_ref_yn='||p_renew_ref_yn
                         );
      END IF;
    END IF;

  x_return_status := l_return_status;

  --Setting Variable to indicate existence of Partial Period Setup in GCD--
  IF (OKS_SETUP_UTIL_PUB.G_GCD_PERIOD_START IS NOT NULL and OKS_SETUP_UTIL_PUB.G_GCD_PERIOD_TYPE IS NOT NULL) then
   l_GCDPPSetupExists_YN := 'Y';
  ELSE
   l_GCDPPSetupExists_YN := 'N';
  END IF;
  ------------------------------------------------------------------------

  ------------------------------------------------------------------------
  -- Bug# 5531198 hkamdar 21-Sep-2006
  --Get Price UOM of Target Contract--
  IF l_SrcContractPPSetupExists_YN = 'N' THEN
     Begin
         OPEN get_new_price_uom(P_To_Chr_ID);
         FETCH get_new_price_uom into l_TrgtHeaderPriceUom;
         CLOSE get_new_price_uom;
     End;

     IF l_TrgtHeaderPriceUom IS NOT NULL THEN
        l_TrgtHeaderPriceUomExists_YN := 'Y';
     ELSE
        l_TrgtHeaderPriceUomExists_YN := 'N';
     END IF;
  END IF;
  -- End Bug# 5531198 hkamdar 21-Sep-2006
 ------------------------------------------------------------------------

  --Get Contract Number of Target Contract--
  Begin
    OPEN get_new_contract_number(P_To_Chr_ID);
    FETCH get_new_contract_number into l_new_contract_number;
    CLOSE get_new_contract_number;
    If l_new_contract_number IS NULL then
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||':'||'Cursor get_new_contract_number'
                        ,'Contract number of Target Contract is NULL'
                        );
        END IF;
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
	RAISE G_EXCEPTION_HALT_VALIDATION;
    End If;
  End;
 -------------------------------------------
  --Get default status for lines------------
  Begin
    OPEN get_default_status;
    FETCH get_default_status into l_Default_Sts_Code;
    CLOSE get_default_status;
    If l_Default_Sts_Code IS NULL then
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||':'||'Cursor get_default_status'
                        ,'Default Status not found'
                        );
        END IF;
       l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
       RAISE G_EXCEPTION_HALT_VALIDATION;
    End If;
  End;
  ------------------------------------------

 IF (P_Renew_Ref_YN = 'N') then
  IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Opening GetOKCOKSLinesB_Copy'
                        );
  END IF;
/*MODIFIED FOR BUG6617044 COPY ENHANCEMENT */
  IF p_include_cancelled_lines = 'Y' AND
         p_include_terminated_lines = 'Y' THEN
        OPEN GetOKCOKSLinesB_Copy(P_From_Chr_ID, P_To_Chr_ID);
      ELSIF p_include_cancelled_lines = 'N' AND
            p_include_terminated_lines = 'Y' THEN
        OPEN GetOKCOKSLinesB_Copy_TERMN(P_From_Chr_ID, P_To_Chr_ID);
      ELSIF p_include_cancelled_lines = 'Y' AND
            p_include_terminated_lines = 'N' THEN
        OPEN GetOKCOKSLinesB_Copy_CANCEL(P_From_Chr_ID, P_To_Chr_ID);
      ELSIF p_include_cancelled_lines = 'N' AND
            p_include_terminated_lines = 'N' THEN
        OPEN GetOKCOKSLinesB_Copy_EXCLUDE(P_From_Chr_ID, P_To_Chr_ID);
      END IF;
 ELSIF (P_Renew_Ref_YN = 'Y') then
  IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Opening GetOKCOKSLinesB_Renew'
                        );
  END IF;
  OPEN GetOKCOKSLinesB_Renew(P_From_Chr_ID,P_To_Chr_ID);
 END IF;

 LOOP
  IF (P_Renew_Ref_YN = 'N') THEN
   IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHING from GetOKCOKSLinesB_Copy'
                        );
   END IF;

   IF p_include_cancelled_lines = 'Y' AND p_include_terminated_lines = 'Y' THEN
    FETCH GetOKCOKSLinesB_Copy BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;

   ELSIF p_include_cancelled_lines = 'Y' AND p_include_terminated_lines = 'N' THEN


    FETCH GetOKCOKSLinesB_Copy_CANCEL BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;

  ELSIF p_include_cancelled_lines = 'N' AND p_include_terminated_lines = 'Y' then

    FETCH GetOKCOKSLinesB_Copy_TERMN BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;
  ELSIF p_include_cancelled_lines = 'N' AND p_include_terminated_lines = 'N' THEN

    FETCH GetOKCOKSLinesB_Copy_EXCLUDE BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;
  END IF;

  ELSIF (P_Renew_Ref_YN = 'Y') then

   IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'FETCHING from GetOKCOKSLinesB_Renew'
                        );
   END IF;
    FETCH GetOKCOKSLinesB_Renew BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG -- pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
   -----------------End of record members for OKC_K_LINES_B columns
   -----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
   -----------------End of record members for OKS_K_LINES_B columns
   -----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;

   IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'After FETCH from GetOKCOKSLinesB_Renew'
                        );
   END IF;

  END IF;

   --Bulk Insert into OKC_K_LINES_B
 Begin

  FORALL i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST
  INSERT INTO OKC_K_LINES_B(
   ID
 , LINE_NUMBER
 , CHR_ID
 , CLE_ID
 , DNZ_CHR_ID
 , DISPLAY_SEQUENCE
 , STS_CODE
 , TRN_CODE
 , LSE_ID
 , EXCEPTION_YN
 , OBJECT_VERSION_NUMBER
 , HIDDEN_IND
 , PRICE_NEGOTIATED
 , PRICE_LEVEL_IND
 , PRICE_UNIT
 , PRICE_UNIT_PERCENT
 , INVOICE_LINE_LEVEL_IND
 , DPAS_RATING
 , TEMPLATE_USED
 , PRICE_TYPE
 , CURRENCY_CODE
 , DATE_TERMINATED
 , START_DATE
 , END_DATE
 , ATTRIBUTE_CATEGORY
 , ATTRIBUTE1
 , ATTRIBUTE2
 , ATTRIBUTE3
 , ATTRIBUTE4
 , ATTRIBUTE5
 , ATTRIBUTE6
 , ATTRIBUTE7
 , ATTRIBUTE8
 , ATTRIBUTE9
 , ATTRIBUTE10
 , ATTRIBUTE11
 , ATTRIBUTE12
 , ATTRIBUTE13
 , ATTRIBUTE14
 , ATTRIBUTE15
 , SECURITY_GROUP_ID
 , PRICE_NEGOTIATED_RENEWED
 , CURRENCY_CODE_RENEWED
 , UPG_ORIG_SYSTEM_REF
 , UPG_ORIG_SYSTEM_REF_ID
 , DATE_RENEWED
 , ORIG_SYSTEM_ID1
 , ORIG_SYSTEM_REFERENCE1
 , ORIG_SYSTEM_SOURCE_CODE
 , PROGRAM_APPLICATION_ID
 , PROGRAM_ID
 , PROGRAM_UPDATE_DATE
 , REQUEST_ID
 , PRICE_LIST_ID
 , PRICE_LIST_LINE_ID
 , LINE_LIST_PRICE
 , ITEM_TO_PRICE_YN
 , PRICING_DATE
 , PRICE_BASIS_YN
 , CONFIG_HEADER_ID
 , CONFIG_REVISION_NUMBER
 , CONFIG_COMPLETE_YN
 , CONFIG_VALID_YN
 , CONFIG_TOP_MODEL_LINE_ID
 , CONFIG_ITEM_TYPE
 , CONFIG_ITEM_ID
 , SERVICE_ITEM_YN
 , PH_PRICING_TYPE
 , PH_PRICE_BREAK_BASIS
 , PH_MIN_QTY
 , PH_MIN_AMT
 , PH_QP_REFERENCE_ID
 , PH_VALUE
 , PH_ENFORCE_PRICE_LIST_YN
 , PH_ADJUSTMENT
 , PH_INTEGRATED_WITH_QP
 , CUST_ACCT_ID
 , BILL_TO_SITE_USE_ID
 , INV_RULE_ID
 , LINE_RENEWAL_TYPE_CODE
 , SHIP_TO_SITE_USE_ID
 , PAYMENT_TERM_ID
 , DATE_CANCELLED
 , TERM_CANCEL_SOURCE
 , ANNUALIZED_FACTOR
 , PAYMENT_INSTRUCTION_TYPE -- hkamdar 29-Mar-2006 Bug # 4722452
 , CANCELLED_AMOUNT
 , CREATION_DATE
 , CREATED_BY
 , LAST_UPDATE_DATE
 , LAST_UPDATED_BY
 , LAST_UPDATE_LOGIN
  )
 SELECT
  OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
 ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER(i)
 ,OKCOKSLinesRecTab.OkcB_NewChrID(i)
 ,OKCOKSLinesRecTab.OkcB_CLE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_NewDnzChrID(i)
 ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE(i)
 ,l_Default_Sts_Code
 ,OKCOKSLinesRecTab.OkcB_TRN_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_LSE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN(i)
 ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER(i)
 ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT(i)
 ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND(i)
 ,OKCOKSLinesRecTab.OkcB_DPAS_RATING(i)
 ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE(i)
 ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED(i)
 ,OKCOKSLinesRecTab.OkcB_START_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_END_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15(i)
 ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED(i)
 ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED(i)
 ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF(i)
 ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID(i)
 ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED(i)
 ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1(i)
 ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1(i)
 ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_REQUEST_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE(i)
 ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN(i)
 ,OKCOKSLinesRecTab.OkcB_PRICING_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID(i)
 ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN(i)
 ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE(i)
 ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS(i)
 ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY(i)
 ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT(i)
 ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PH_VALUE(i)
 ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN(i)
 ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT(i)
 ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP(i)
 ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID(i)
 ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID(i)
 ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED(i)
 ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE(i)
 ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR(i)
 ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE(i) -- hkamdar 29-Mar-2006 Bug # 4722452
 ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT(i)
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,FND_GLOBAL.LOGIN_ID
  FROM
  DUAL;

      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'AFTER INSERT into OKC_K_LINES_B '
                        );
       END IF;

    EXCEPTION
      WHEN OTHERS THEN
	  OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name
                        ,'EXCEPTION during insert into OKC_K_LINES_B '||SQLERRM
                        );
       END IF;

        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        RAISE G_EXCEPTION_HALT_VALIDATION;

 End;

 Begin
  --Bulk Insert into OKS_K_LINES_B
  FORALL i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST
  INSERT INTO OKS_K_LINES_B(
   ID
  ,CLE_ID
  ,DNZ_CHR_ID
  ,DISCOUNT_LIST
  ,ACCT_RULE_ID
  ,PAYMENT_TYPE
  ,CC_NO
  ,CC_EXPIRY_DATE
  ,CC_BANK_ACCT_ID
  ,CC_AUTH_CODE
  ,COMMITMENT_ID
  ,LOCKED_PRICE_LIST_ID
  ,USAGE_EST_YN
  ,USAGE_EST_METHOD
  ,USAGE_EST_START_DATE
  ,TERMN_METHOD
  ,UBT_AMOUNT
  ,CREDIT_AMOUNT
  ,SUPPRESSED_CREDIT
  ,OVERRIDE_AMOUNT
  ,CUST_PO_NUMBER_REQ_YN
  ,CUST_PO_NUMBER
  ,GRACE_DURATION
  ,GRACE_PERIOD
  ,INV_PRINT_FLAG
  ,PRICE_UOM
  ,TAX_AMOUNT
  ,TAX_INCLUSIVE_YN
  ,TAX_STATUS
  ,TAX_CODE
  ,TAX_EXEMPTION_ID
  ,IB_TRANS_TYPE
  ,IB_TRANS_DATE
  ,PROD_PRICE
  ,SERVICE_PRICE
  ,CLVL_LIST_PRICE
  ,CLVL_QUANTITY
  ,CLVL_EXTENDED_AMT
  ,CLVL_UOM_CODE
  ,TOPLVL_OPERAND_CODE
  ,TOPLVL_OPERAND_VAL
  ,TOPLVL_QUANTITY
  ,TOPLVL_UOM_CODE
  ,TOPLVL_ADJ_PRICE
  ,TOPLVL_PRICE_QTY
  ,AVERAGING_INTERVAL
  ,SETTLEMENT_INTERVAL
  ,MINIMUM_QUANTITY
  ,DEFAULT_QUANTITY
  ,AMCV_FLAG
  ,FIXED_QUANTITY
  ,USAGE_DURATION
  ,USAGE_PERIOD
  ,LEVEL_YN
  ,USAGE_TYPE
  ,UOM_QUANTIFIED
  ,BASE_READING
  ,BILLING_SCHEDULE_TYPE
  ,FULL_CREDIT
  ,LOCKED_PRICE_LIST_LINE_ID
  ,BREAK_UOM
  ,PRORATE
  ,COVERAGE_TYPE
  ,EXCEPTION_COV_ID
  ,LIMIT_UOM_QUANTIFIED
  ,DISCOUNT_AMOUNT
  ,DISCOUNT_PERCENT
  ,OFFSET_DURATION
  ,OFFSET_PERIOD
  ,INCIDENT_SEVERITY_ID
  ,PDF_ID
  ,WORK_THRU_YN
  ,REACT_ACTIVE_YN
  ,TRANSFER_OPTION
  ,PROD_UPGRADE_YN
  ,INHERITANCE_TYPE
  ,PM_PROGRAM_ID
  ,PM_CONF_REQ_YN
  ,PM_SCH_EXISTS_YN
  ,ALLOW_BT_DISCOUNT
  ,APPLY_DEFAULT_TIMEZONE
  ,SYNC_DATE_INSTALL
  ,OBJECT_VERSION_NUMBER
  ,SECURITY_GROUP_ID
  ,REQUEST_ID
  ,ORIG_SYSTEM_ID1
  ,ORIG_SYSTEM_REFERENCE1
  ,ORIG_SYSTEM_SOURCE_CODE
  ,TRXN_EXTENSION_ID
  ,TAX_CLASSIFICATION_CODE
  ,EXEMPT_CERTIFICATE_NUMBER
  ,EXEMPT_REASON_CODE
  ,COVERAGE_ID
  ,STANDARD_COV_YN
  ,CREATION_DATE
  ,CREATED_BY
  ,LAST_UPDATE_DATE
  ,LAST_UPDATED_BY
  ,LAST_UPDATE_LOGIN
  )
  SELECT
   OKCOKSLinesRecTab.OksB_NewOksLineID(i)
  ,OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
  ,OKCOKSLinesRecTab.OksB_NewDnzChrID(i)
  ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST(i)
  ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID(i)
  ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_CC_NO(i)
  ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE(i)
  ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID(i)
  ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE(i)
  ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID(i)
  ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE(i)
  ,OKCOKSLinesRecTab.OksB_TERMN_METHOD(i)
  ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT(i)
  ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN(i)
  ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER(i)
  ,OKCOKSLinesRecTab.OksB_GRACE_DURATION(i)
  ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD(i)
  ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG(i)
  ,OKCOKSLinesRecTab.OksB_PRICE_UOM(i)
  ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN(i)
  ,OKCOKSLinesRecTab.OksB_TAX_STATUS(i)
  ,OKCOKSLinesRecTab.OksB_TAX_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID(i)
  ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE(i)
  ,OKCOKSLinesRecTab.OksB_PROD_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY(i)
  ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL(i)
  ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL(i)
  ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_AMCV_FLAG(i)
  ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_DURATION(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD(i)
  ,OKCOKSLinesRecTab.OksB_LEVEL_YN(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED(i)
  ,OKCOKSLinesRecTab.OksB_BASE_READING(i)
  ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_FULL_CREDIT(i)
  ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID(i)
  ,OKCOKSLinesRecTab.OksB_BREAK_UOM(i)
  ,OKCOKSLinesRecTab.OksB_PRORATE(i)
  ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID(i)
  ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED(i)
  ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT(i)
  ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION(i)
  ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD(i)
  ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID(i)
  ,OKCOKSLinesRecTab.OksB_PDF_ID(i)
  ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN(i)
  ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN(i)
  ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION(i)
  ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN(i)
  ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID(i)
  ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN(i)
  ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN(i)
  ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT(i)
  ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE(i)
  ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL(i)
  ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER(i)
  ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID(i)
  ,OKCOKSLinesRecTab.OksB_REQUEST_ID(i)
  ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1(i)
  ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1(i)
  ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i)
  ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE(i)
  ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER(i)
  ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE(i)
  ,OKCOKSLinesRecTab.OksB_COVERAGE_ID(i)
  ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN(i)
  ,SYSDATE
  ,FND_GLOBAL.USER_ID
  ,SYSDATE
  ,FND_GLOBAL.USER_ID
  ,FND_GLOBAL.LOGIN_ID
   FROM
   DUAL
   WHERE
   OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL;

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'AFTER INSERT into OKS_K_LINES_B '
                        );
       END IF;

  EXCEPTION
      WHEN OTHERS THEN
	  OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name
                        ,'EXCEPTION during insert into OKS_K_LINES_B '||SQLERRM
                        );
       END IF;

        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        RAISE G_EXCEPTION_HALT_VALIDATION;

 End;

  --Bulk Insert into OKC_K_ITEMS
 Begin


  FORALL i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST
  INSERT INTO OKC_K_ITEMS(
   ID
  ,CLE_ID
  ,DNZ_CHR_ID
  ,CHR_ID
  ,OBJECT1_ID1
  ,OBJECT1_ID2
  ,JTOT_OBJECT1_CODE
  ,UOM_CODE
  ,EXCEPTION_YN
  ,NUMBER_OF_ITEMS
  ,PRICED_ITEM_YN
  ,OBJECT_VERSION_NUMBER
  ,SECURITY_GROUP_ID
  ,UPG_ORIG_SYSTEM_REF
  ,UPG_ORIG_SYSTEM_REF_ID
  ,PROGRAM_APPLICATION_ID
  ,PROGRAM_ID
  ,PROGRAM_UPDATE_DATE
  ,REQUEST_ID
  ,CREATION_DATE
  ,CREATED_BY
  ,LAST_UPDATE_DATE
  ,LAST_UPDATED_BY
  ,LAST_UPDATE_LOGIN
  )
  SELECT
    OKCOKSLinesRecTab.OkcI_NewOkcItemID(i)
   ,OKCOKSLinesRecTab.OkcB_NewOkcLineID(i)
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID(i)
   ,OKCOKSLinesRecTab.OkcI_NewChrID(i)
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1(i)
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2(i)
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE(i)
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE(i)
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN(i)
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS(i)
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN(i)
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER(i)
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID(i)
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF(i)
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID(i)
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID(i)
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID(i)
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE(i)
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID(i)
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,FND_GLOBAL.LOGIN_ID
   FROM
   DUAL
   where OKCOKSLinesRecTab.OkcI_OldOkcItemID(i) IS NOT NULL;

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'AFTER INSERT into OKC_K_ITEMS '
                        );
       END IF;

  EXCEPTION
      WHEN OTHERS THEN
	  OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_unexpected
                        ,l_module_name
                        ,'EXCEPTION during insert into OKC_K_ITEMS '||SQLERRM
                        );
       END IF;

        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        RAISE; --RAISE G_EXCEPTION_HALT_VALIDATION;

 End;

  -----------------Start of row by row processing---------------------

   IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Before Start of Row by Row Processing , Count of rows being processed :'||OKCOKSLinesRecTab.OkcB_NewOKCLineID.COUNT
                         );
        END IF;
   END IF;

 If (OKCOKSLinesRecTab.OkcB_NewOKCLineID.COUNT > 0) then
  FOR i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST LOOP

  ---- If 'RENEW', then for each line fetched---------------------------------------
  --	   a) Update Price_Negotiated and Price_Unit columns based on converted currency
  ----------------------------------------------------------------------------------
   IF P_Renew_Ref_YN = 'Y' then

    Begin
     l_euro_currency := OKC_CURRENCY_API.GET_EURO_CURRENCY_CODE(OKCOKSLinesRecTab.OkcB_CURRENCY_CODE(i));

     IF (l_euro_currency <> OKCOKSLinesRecTab.OkcB_CURRENCY_CODE(i)) THEN
	   --Convert Price Negotiated--
         OKC_CURRENCY_API.CONVERT_AMOUNT
	                            (p_FROM_CURRENCY => OKCOKSLinesRecTab.OkcB_CURRENCY_CODE(i)
				    ,p_TO_CURRENCY => l_euro_currency
				    ,p_CONVERSION_DATE => g_conversion_date
				    ,p_CONVERSION_TYPE => g_conversion_type
				    ,p_AMOUNT => OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED(i)
                                    ,x_CONVERSION_RATE => g_conversion_rate
				    ,x_CONVERTED_AMOUNT => l_converted_price_negotiated
				    );
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKC_CURRENCY_API.CONVERT_AMOUNT'
                        ,'After call to convert_amount for Price_Negotiated: x_return_status:'||l_return_status
                         ||'Orig Price_Negotiated='||OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED(i)
                         ||'Converted Price Negotiated='||l_converted_price_negotiated
                         );
        END IF;
       END IF;

	   --Convert Price Unit--
         OKC_CURRENCY_API.CONVERT_AMOUNT
	                            (p_FROM_CURRENCY => OKCOKSLinesRecTab.OkcB_CURRENCY_CODE(i)
				    ,p_TO_CURRENCY => l_euro_currency
				    ,p_CONVERSION_DATE => g_conversion_date
				    ,p_CONVERSION_TYPE => g_conversion_type
				    ,p_AMOUNT =>OKCOKSLinesRecTab.OkcB_PRICE_UNIT(i)
                                    ,x_CONVERSION_RATE => g_conversion_rate
				    ,x_CONVERTED_AMOUNT => l_converted_price_unit
				    );

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKC_CURRENCY_API.CONVERT_AMOUNT'
                        ,'After call to convert_amount for Price_Unit: x_return_status:'||l_return_status
                         ||'Orig Price_Negotiated='||OKCOKSLinesRecTab.OkcB_PRICE_UNIT(i)
                         ||'Converted Price Unit='||l_converted_price_unit
                         );
        END IF;
       END IF;


        UPDATE OKC_K_LINES_B
	SET
	 PRICE_NEGOTIATED = l_converted_price_negotiated
	,PRICE_UNIT = l_converted_price_unit
                          ,CURRENCY_CODE= l_euro_currency/*bugfix for bug7580778*/
	WHERE ID = OKCOKSLinesRecTab.OkcB_NewOkcLineID(i)
        AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OkcB_OldOkcLineID(i);

        If SQL%NOTFOUND then
         l_return_status := FND_API.G_RET_STS_ERROR;
      	 RAISE G_EXCEPTION_HALT_VALIDATION;
	End If;

     END IF;
    End;

   END IF; --End of check P_Renew_Ref_YN = 'Y'

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'OKC LSE ID : '||OKCOKSLinesRecTab.OkcB_LSE_ID(i)
                         );
        END IF;

   ---If (LSE_ID in (1,19)--------------------------------------
   ---       a) Instantiate counter events
   ---	   b) Copy Line Notes
   --------------------------------------------------------------
   IF (OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 1 OR OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 19) THEN
    --Instantiate Counters Events

     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.instantiate_counters_events'
                        ,'Before call to instantiate_counters_events'
                         );
      END IF;
     END IF;


    instantiate_counters_events(
                     p_api_version   => p_api_version
	            ,p_init_msg_list => p_init_msg_list
		    ,x_return_status => l_return_status
		    ,x_msg_count     => x_msg_count
		    ,x_msg_data      => x_msg_data
		    ,p_old_cle_id    => OKCOKSLinesRecTab.OkcB_OldOKCLineID(i)
		    ,p_old_lse_id    => OKCOKSLinesRecTab.OkcB_LSE_ID(i)
		    ,p_start_date    => OKCOKSLinesRecTab.OkcB_START_DATE(i)
		    ,p_end_date      => OKCOKSLinesRecTab.OkcB_END_DATE(i)
	            ,p_new_cle_id    => OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
                    --npalepu added on 20-mar-2006 for bug # 5102052
                    ,p_new_chr_id    => P_To_Chr_ID
                    --end npalepu
                    );

		    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
		       RAISE G_EXCEPTION_HALT_VALIDATION;
		    END IF;


     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.instantiate_counters_events'
                        ,'After call to instantiate_counters_events x_return_status:'||l_return_status
                         );
      END IF;
     END IF;

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_COVERAGES_PVT.COPY_NOTES'
                        ,'Before call to copy_notes for line:'||OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
                         );
        END IF;
       END IF;

    IF (p_renew_ref_yn = 'N') then --Bug
        --Copy Line level notes
        OKS_COVERAGES_PVT.COPY_NOTES(p_api_version  =>  p_api_version
                          	    ,p_init_msg_list =>  p_init_msg_list
			            ,x_msg_count => x_msg_count
			            ,x_msg_data =>  x_msg_data
			            ,x_return_status =>  l_return_status
 			            ,p_line_id  => OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
			            );
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_COVERAGES_PVT.COPY_NOTES'
                        ,'After call to copy_notes for line: x_return_status:'||l_return_status
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;
    END IF; --End of p_renew_ref_yn IF check for Copy_Notes

   END IF; -----End of LSE_ID check in (1,19)

 ------------Re-compute TAX_AMOUNT for a subscription line if the line being copied is a cancelled line------------
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_TAX_UTIL_PVT.Get_Tax'
                        ,' LSE ID and LINE TERMINATED FLAG : '||OKCOKSLinesRecTab.OkcB_LSE_ID(i)||':'||OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG(i)
                         );
       END IF;

 IF (P_Renew_Ref_YN = 'N') then
  Begin
  --npalepu added condition lse_id IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) for bug # 5660131 on 15-Nov-2006
   If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OkcB_LSE_ID(i) IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) AND
       (
        (OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 46 AND OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG(i) = 'Y')
        OR
        (OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG(i) = 'Y')
       )
      ) OR ((OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OkcB_LSE_ID(i) IN (7, 8, 9, 10, 11, 13, 18, 25, 35) AND
          (   OKCOKSLinesRecTab.OksB_TAX_AMOUNT(i) = 0)) ) /*modified for bug:6765336*/
       then

    /*-Line below is not correct as it would be NULL. Also, it is not required as the Tax API derives the Price_Negotiated for the Line ID
    --lx_rail_rec.AMOUNT := OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT(i); --Price Negotiated would be stored in the CANCELLED_AMOUNT column
								      --for a cancelled Subscription Line
    */

     --npalepu added on 06-NOV-2006 for bug # 5636927
     lx_rail_rec.AMOUNT := NULL;
     --end npalepu

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Before call to OKS_TAX_UTIL_PVT.Get_Tax '
                         );
        END IF;
       END IF;

    OKS_TAX_UTIL_PVT.Get_Tax
     ( p_api_version => p_api_version
      ,p_init_msg_list => p_init_msg_list
      ,p_chr_id	=> P_To_Chr_ID
      ,p_cle_id  => OKCOKSLinesRecTab.OkcB_NewOkcLineID(i)
      ,px_rail_rec => lx_rail_rec
      ,x_msg_count => x_msg_count
      ,x_msg_data => x_msg_data
      ,x_return_status => l_return_status
     );
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_TAX_UTIL_PVT.Get_Tax'
                        ,'After call to Get Tax API for line: x_return_status :'||l_return_status
                        ||'Tax Amount '||lx_rail_rec.TAX_VALUE
                         );
        END IF;
       END IF;


       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

    UPDATE OKS_K_LINES_B
    SET
     TAX_AMOUNT = lx_rail_rec.TAX_VALUE
    WHERE ID = OKCOKSLinesRecTab.OksB_NewOksLineID(i)
    AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OksB_OldOksLineID(i);

    If SQL%NOTFOUND then
     l_return_status := FND_API.G_RET_STS_ERROR;
     RAISE G_EXCEPTION_HALT_VALIDATION;
    End If;

   End If;
  End;
 END IF; --End of check P_Renew_Ref_YN = 'N'
 ------------------------------------------------------------------------------------------------------------------
 -----------Generate new Locked_Price_List_Line_ID for line if a value currently exists----------

  IF (P_Renew_Ref_YN = 'N') THEN
   Begin
    If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID(i) IS NOT NULL) then
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'Before call to QP_LOCK_PRICELIST_GRP.Lock_Price'
                         );
          END IF;
     QP_LOCK_PRICELIST_GRP.Lock_Price(p_source_list_line_id     => OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID(i)
	                             ,p_list_source_code        => 'OKS'
				     ,p_orig_system_header_ref     => l_new_contract_number
				     ,p_org_id 			=>   okc_context.get_okc_org_id
				     ,x_locked_price_list_id       => l_locked_price_list_id
				     ,x_locked_list_line_id        => l_locked_price_list_line_id
				     ,x_return_status              => l_return_status
				     ,x_msg_count                  => x_msg_count
				     ,x_msg_data                   => x_msg_data);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.QP_LOCK_PRICELIST_GRP.Lock_Price'
                        ,'After call to Lock_Price API for line: x_return_status :'||l_return_status
                        ||'Old Locked Price List Line ID='||OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID(i)
			||'New Locked Price List Line ID='||l_locked_price_list_line_id
			||'New Locked Price List ID='||l_locked_price_list_id
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

	UPDATE OKS_K_LINES_B
	SET
	 LOCKED_PRICE_LIST_ID = l_locked_price_list_id
	,LOCKED_PRICE_LIST_LINE_ID = l_locked_price_list_line_id
	WHERE ID = OKCOKSLinesRecTab.OksB_NewOksLineID(i)
        AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OksB_OldOksLineID(i);

        If SQL%NOTFOUND then
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.QP_LOCK_PRICELIST_GRP.Lock_Price'
                        ,'After call to QP_LOCK_PRICELIST_GRP.Lock_Price, Error in Update OKS_K_LINES_B, row not found for update'
                         );
          END IF;

	  l_return_status := FND_API.G_RET_STS_ERROR;
	  RAISE G_EXCEPTION_HALT_VALIDATION;
	End If;
    End If;
   End;
  END IF; --End of P_Renew_Ref_YN check for Lock_Price call

 ----------------------------------------------------------------------------------------------------
 ------------Generate Transaction Extension for line if a value currently exists--------------------

   Begin
    If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i) IS NOT NULL) then
	--Generate new transaction extension id;
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'Before call to Create_Transaction_Extension for line in COPY_LINES'
                        ||'Old Trxn ID='||OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i)
                         );
        END IF;
       END IF;

 	OKS_UTIL_PUB.create_transaction_extension(P_Api_Version => p_api_version
                                      ,P_Init_Msg_List => p_init_msg_list
			              ,P_Header_ID => NULL
				      ,P_Line_ID => OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
                                      ,P_Source_Trx_Ext_ID => OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i)
				      ,P_Cust_Acct_ID => OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID(i)
                                      ,P_Bill_To_Site_Use_ID => OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID(i)
				      ,x_entity_id => l_trxn_extension_id
                                      ,x_msg_data => x_msg_data
                                      ,x_msg_count => x_msg_count
                                      ,x_return_status => l_return_status) ;



       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'After call to Create_Transaction_Extension for line: x_return_status :'||l_return_status
                        ||'New Trxn ID='||l_trxn_extension_id
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

        UPDATE OKS_K_LINES_B
        SET
         TRXN_EXTENSION_ID = l_trxn_extension_id
        WHERE ID = OKCOKSLinesRecTab.OksB_NewOksLineID(i)
        AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OksB_OldOksLineID(i);

        If SQL%NOTFOUND then
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'After call to Create_Transaction_Extension, Error in Update OKS_K_LINES_B, row not found for update'
                         );
          END IF;

          l_return_status := FND_API.G_RET_STS_ERROR;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        End If;

    End If;

   End;

   -- 03-Nov-2006 hkamdar. Bug# 5623498.
    IF OKCOKSLinesRecTab.OkcB_LSE_ID(i) in (7,9,25) AND OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE(i) IS NULL THEN


    OPEN get_toplvl_uom(OKCOKSLinesRecTab.OkcB_OldOKCLineID(i));
    FETCH get_toplvl_uom INTO l_toplvl_uom_code;
    CLOSE get_toplvl_uom;

    IF l_toplvl_uom_code IS NOT NULL then
      UPDATE OKS_K_LINES_B
      SET    toplvl_uom_code = l_toplvl_uom_code
      WHERE  id = OKCOKSLinesRecTab.OksB_NewOksLineID(i);
    END IF;

    END IF;
 -- 03-Nov-2006 hkamdar. Bug# 5623498.
 ------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------

  END LOOP;
 End If; --End of row count in OKCOKSLinesRecTab.OkcB_NewOKCLineID

  --------------------End of row by row processing------------------------
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'End of Row by Row processing'
                         );
        END IF;
       END IF;


   If (P_Renew_Ref_YN = 'N') THEN
      IF p_include_cancelled_lines = 'Y' AND
           p_include_terminated_lines = 'Y' THEN
          EXIT WHEN GetOKCOKSLinesB_Copy%NOTFOUND;
        ELSIF p_include_cancelled_lines = 'N' AND
              p_include_terminated_lines = 'Y' THEN
          EXIT WHEN GetOKCOKSLinesB_Copy_TERMN%NOTFOUND;
        ELSIF p_include_cancelled_lines = 'Y' AND
              p_include_terminated_lines = 'N' THEN
          EXIT WHEN GetOKCOKSLinesB_Copy_CANCEL%NOTFOUND;
        ELSIF p_include_cancelled_lines = 'N' AND
              p_include_terminated_lines = 'N' THEN
          EXIT WHEN GetOKCOKSLinesB_Copy_EXCLUDE%NOTFOUND;
        END IF;

   ELSIF (P_Renew_Ref_YN = 'Y') THEN
     EXIT WHEN GetOKCOKSLinesB_Renew%NOTFOUND;
   END IF;

 END LOOP; --End of Bulk fetch and insert into OKC_K_LINES_B,OKS_K_LINES_B,OKC_K_ITEMS

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name
                        ,'After BULK FETCH and BULK INSERT into OKC_K_LINES_B,OKS_K_LINES_B,OKC_K_ITEMS'
                         );
        END IF;
       END IF;


    IF GetOKCOKSLinesB_Copy%ISOPEN THEN
      CLOSE GetOKCOKSLinesB_Copy;
    ELSIF GetOKCOKSLinesB_Copy_TERMN%ISOPEN THEN
      CLOSE GetOKCOKSLinesB_Copy_TERMN;
    ELSIF GetOKCOKSLinesB_Copy_CANCEL%ISOPEN THEN
      CLOSE GetOKCOKSLinesB_Copy_CANCEL;
    ELSIF GetOKCOKSLinesB_Copy_EXCLUDE%ISOPEN THEN
      CLOSE GetOKCOKSLinesB_Copy_EXCLUDE;
    ELSIF GetOKCOKSLinesB_Renew%ISOPEN THEN
      CLOSE GetOKCOKSLinesB_Renew;
    END IF;

 ----------------------------------------------------------------------------
 -- Update of OKC_K_LINES_B
 --   i)  CLE_ID on OKC_K_LINES_B for sublines
 --  ii) PRICE_NEGOTIATED on OKC_K_LINES_B for toplines
 --
 -- Update of OKS_K_LINES_B
 -- iii) COVERAGE_ID on OKS_K_LINES_B for toplines with STANDARD_COV_YN = 'N'
 --  iv) TAX_AMOUNT on OKS_K_LINES_B for all toplines

  Begin

   UPDATE OKC_K_LINES_B a
   SET a.CLE_ID = (select b.ID
  		   FROM OKC_K_LINES_B b
		   WHERE
		   b.ORIG_SYSTEM_ID1 = a.CLE_ID
		   AND b.DNZ_CHR_ID = P_To_Chr_ID)
   WHERE
   a.DNZ_CHR_ID = P_To_Chr_ID
   AND a.CLE_ID IS NOT NULL;

   UPDATE OKC_K_LINES_B a
   SET a.PRICE_NEGOTIATED = (select sum(b.PRICE_NEGOTIATED)
                             from OKC_K_LINES_B b
			     where b.CLE_ID = a.ID
			     AND b.DNZ_CHR_ID = P_To_Chr_ID
			     AND b.DATE_CANCELLED IS NULL) --Cancelled sublines shouldn't be included in sum.
   WHERE
   a.DNZ_CHR_ID = P_To_Chr_ID
   AND a.CLE_ID IS NULL
   AND a.LSE_ID <> 46; -- Subscription Lines do not have sublines. So they shouldnt be updated.

   UPDATE OKS_K_LINES_B a
   SET a.COVERAGE_ID = (select b.ID
  			FROM OKC_K_LINES_B b
			WHERE
			b.CLE_ID = a.CLE_ID
			AND b.DNZ_CHR_ID = P_To_Chr_ID
			AND b.LSE_ID in (2,20))
   WHERE a.DNZ_CHR_ID = P_To_Chr_ID
   AND a.CLE_ID in (select c.ID from OKC_K_LINES_B c
                    where c.DNZ_CHR_ID = P_To_Chr_ID
		    and c.LSE_ID in (1,19))
   AND a.STANDARD_COV_YN = 'N';

   UPDATE OKS_K_LINES_B a
   SET a.TAX_AMOUNT = (select sum(b.TAX_AMOUNT)
                       FROM
		       OKS_K_LINES_B b
		      ,OKC_K_LINES_B c
		       WHERE
		       c.ID = b.CLE_ID
		       AND c.cle_id = a.cle_id
		       AND c.DATE_CANCELLED IS NULL) --Cancelled sublines shouldnt be included in sum
   WHERE a.dnz_chr_id = P_To_Chr_ID
   and a.CLE_ID = (select b.id
  		   FROM
		   OKC_K_LINES_B b
		   WHERE b.cle_id is NULL
		   AND b.id = a.cle_id
		   AND b.LSE_ID <> 46); --Subscription Lines do not have sublines. So they shouldnt be updated.


  -- hkamdar 05-Oct-2006. Bug# 5361663.
  -- Updating price_uom to NULL for Covered levels - Customer, Party and Site.

   Update OKS_K_LINES_B
   Set    PRICE_UOM = NULL
   WHERE  CLE_ID IN (SELECT ID FROM OKC_K_LINES_B WHERE DNZ_CHR_ID = P_To_Chr_ID
                          AND LSE_ID IN (8,10,35));
  -- End hkamdar 05-Oct-2006. Bug# 5361663.

  End;
 ---------------------------------------------------------------------------------
 --------------------------------------------------------------------------------
 --Update of OKC_K_HEADERS_B.ESTIMATED_AMOUNT and OKS_K_HEADERS_B.TAX_AMOUNT to equal
 --sum of OKC_K_LINES_B.PRICE_NEGOTIATED of all top lines and OKS_K_LINES_B.TAX_AMOUNT
 --of all top lines respectively
  Begin
   UPDATE OKC_K_HEADERS_B a
   SET a.ESTIMATED_AMOUNT = (select sum(b.PRICE_NEGOTIATED)
                             FROM OKC_K_LINES_B b
			     where b.DNZ_CHR_ID = a.ID
			     and b.CLE_ID IS NULL
                             AND b.DATE_CANCELLED IS NULL) --Cancelled toplines shouldn't be included in sum.
   WHERE a.ID = P_To_Chr_ID;

   UPDATE OKS_K_HEADERS_B a
   SET a.TAX_AMOUNT = (select sum(b.TAX_AMOUNT)
   		       FROM
		       OKS_K_LINES_B b
		      ,OKC_K_LINES_B c
		       where b.DNZ_CHR_ID = a.CHR_ID
		       and b.CLE_ID = c.ID
		       and c.CLE_ID IS NULL
		       and c.DATE_CANCELLED IS NULL) --Cancelled toplines shouldn't be included in sum
   WHERE a.CHR_ID = P_To_Chr_ID;

  End;
 --------------------------------------------------------------------------------

 -------------Generate new line numbers in OKC_K_LINES_B for newly created lines-----
 Begin
  GenerateNewLineNumber(P_To_Chr_ID => P_To_Chr_ID
                       ,P_Partial_Copy_YN => 'N'
                       ,x_return_status => l_return_Status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.GenerateNewLineNumber'
                        ,'After call to GenerateNewLineNumber for line: x_return_status :'||l_return_status
                         );
        END IF;
       END IF;

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
	     RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
 End;
 ------------------------------------------------------------------------------------

 ------------Copy of Subscription Schedules for all lines in target contract---------

 Begin
  If (P_Renew_Ref_YN = 'N') then

      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_SETUP_UTIL_PUB.copy_subscr_inst for all Subscription Lines'
                        ,'Before call to OKS_SETUP_UTIL_PUB.copy_subscr_inst for all Subscription Lines'
			||to_char(sysdate,'DD/MM/YYYY HH:MI:SS')
                         );
        END IF;
       END IF;

     OKS_SETUP_UTIL_PUB.copy_subscr_inst(p_new_chr_id => P_To_Chr_ID
	               			,p_cle_id => NULL
					,p_intent => 'COPY'
				        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_SETUP_UTIL_PUB.copy_subscr_inst'
                        ,'After call to OKS_SETUP_UTIL_PUB.copy_subscr_inst: x_return_status:'||l_return_status
			 ||to_char(sysdate,'DD/MM/YYYY HH:MI:SS')
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
  End If;
 End;

 ------------------------------------------------------------------------------------
 ------------Copy of OKC_K_LINES_TL--------------------------------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_lines_tl'
                        ,'Before call to copy_okc_k_lines_tl'
                         );
        END IF;
       END IF;
   copy_okc_k_lines_tl(P_From_Chr_ID => P_From_Chr_ID
                    ,P_To_Chr_ID   => P_To_Chr_ID
		    ,P_Partial_Copy_YN => 'N'
                    ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_lines_tl'
                        ,'After call to copy_okc_k_lines_tl: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
 ------------------------------------------------------------------------------------
 -----------Copy of OKC_PARTY_ROLES_B--------------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_party_roles_b'
                        ,'Before call to copy_okc_k_party_roles_b'
                         );
        END IF;
       END IF;

  copy_okc_k_party_roles_b(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_party_roles_b'
                        ,'After call to copy_okc_k_party_roles_b: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
---------------------------------------------------------------------
------------Copy of OKC_PARTY_ROLES_TL------------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_party_roles_tl'
                        ,'Before call to copy_okc_k_party_roles_tl'
                         );
        END IF;
       END IF;
  copy_okc_k_party_roles_tl(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_party_roles_tl'
                        ,'After call to copy_okc_party_roles_tl: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
----------------------------------------------------------------------
------------Copy of OKC_CONTACTS--------------------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_contacts'
                        ,'Before call to copy_okc_contacts'
                         );
        END IF;
       END IF;
  copy_okc_contacts(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_contacts'
                        ,'After call to copy_okc_contacts: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;
     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
-------------------------------------------------------------------------
------------Copy of OKC_PRICE_ATT_VALUES-----------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_att_values'
                        ,'Before call to copy_okc_price_att_values'
                         );
        END IF;
       END IF;
  copy_okc_price_att_values(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_att_values'
                        ,'After call to copy_okc_price_att_values: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
---------------------------------------------------------------------
 -----------Copy of OKC_PRICE_ADJUSTMENTS---------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_adjustments'
                        ,'Before call to copy_okc_price_adjustments'
                         );
        END IF;
       END IF;

   copy_okc_price_adjustments(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_adjustments'
                        ,'After call to copy_okc_price_adjustments: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
--------------------------------------------------------------------
------------Copy of OKS_K_LINES_TL---------------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_k_lines_tl'
                        ,'Before call to copy_oks_k_lines_tl'
                         );
        END IF;
       END IF;
  copy_oks_k_lines_tl(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_k_lines_tl'
                        ,'After call to copy_oks_k_lines_tl: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
---------------------------------------------------------------------
------------Copy of OKS_REV_DISTRIBUTIONS--------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_rev_distributions'
                        ,'Before call to copy_oks_rev_distributions'
                         );
        END IF;
       END IF;

  copy_oks_rev_distributions(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_rev_distributions'
                        ,'After call to copy_oks_rev_distributions: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
---------------------------------------------------------------------
-------------Copy of OKS_QUALIFIERS----------------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_qualifiers'
                        ,'Before call to copy_oks_qualifiers'
                         );
        END IF;
       END IF;

  copy_oks_qualifiers(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_qualifiers'
                        ,'After call to copy_oks_qualifiers: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
----------------------------------------------------------------------

--------------Copy of OKS_K_SALES_CREDITS-------------------------------
   Begin
   copy_oks_k_sales_credits(P_From_Chr_ID => P_From_Chr_ID
                           ,P_To_Chr_ID   => P_To_Chr_ID
                           ,P_Partial_Copy_YN => 'N'
                           ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
 ---------------------------------------------------------------------

----Create Operation Lines in case when P_Renew_Ref_YN = 'Y'----------

  If (P_Renew_Ref_YN = 'Y') then
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_operation_lines'
                        ,'Before call to copy_okc_operation_lines'
                         );
        END IF;
       END IF;

    copy_okc_operation_lines(P_From_Chr_ID => P_From_Chr_ID
                            ,P_To_Chr_ID => P_To_Chr_ID
                            ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_operation_lines'
                        ,'After call to copy_okc_operation_lines: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;

   End;
  End If;
----------------------------------------------------------------------
---------------------------------------------------------
--The following entities are copied only for regular Copy of a Contract, not during
--Renewal. These get regenerated during post-renewal process
---------------------------------------------------------
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_lines'
                        ,'Template YN:'||IsSourceContractTemplate(P_From_Chr_ID => P_From_Chr_ID)
                        ||', l_SrcContractPPSetupExists_YN :'||l_SrcContractPPSetupExists_YN
			||', l_GCDPPSetupExists_YN:'||l_GCDPPSetupExists_YN
                         );
       END IF;

 IF (P_Renew_Ref_YN = 'N') then

  --------------Update Invoice Rule ID and Accounting Rule ID on all copied top lines (if NULL)----
  --------------with that on header. This routine at the same populates the Package variables for
  --------------Header Billing attributes

  update_line_inv_and_acct_rule(P_To_Chr_ID => P_To_Chr_ID
 			       ,P_Partial_Copy_YN => 'N'
			       ,x_return_status => l_return_status
                               );

  -------------------------------------------------------------------------------------------------

  --Copy Billing schedules only if source contract is not a template. This is because
  --update_template_contract anyway deletes and recreates the schedules as per dates
  --specified by user.

--  IF (IsSourceContractTemplate(P_From_Chr_ID => P_From_Chr_ID) = 'N') THEN
   IF (
       (l_SrcContractPPSetupExists_YN = 'Y') OR
       (l_SrcContractPPSetupExists_YN = 'N' AND l_GCDPPSetupExists_YN = 'N')
     ) THEN -- Bulk Copy of Billing Schedule can be done from Source

  --================Start of Billing Schedule copy for Header and Lines==========

   -------------Copy of OKS_STREAM_LEVELS_B---------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_stream_levels_b'
                        ,'Before call to copy_oks_stream_levels_b'
                         );
        END IF;
       END IF;

   copy_oks_stream_levels_b(P_From_Chr_ID => P_From_Chr_ID
                           ,P_To_Chr_ID   => P_To_Chr_ID
                           ,P_Partial_Copy_YN => 'N'
                           ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_stream_levels_b'
                        ,'After call to copy_oks_stream_levels_b: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  -------------------------------------------------------------------
   -------------Copy of OKS_LEVEL_ELEMENTS---------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_level_elements'
                        ,'Before call to copy_oks_level_elements'
                         );
        END IF;
       END IF;

   copy_oks_level_elements(P_From_Chr_ID => P_From_Chr_ID
                          ,P_To_Chr_ID   => P_To_Chr_ID
                          ,P_Partial_Copy_YN => 'N'
                          ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_level_elements'
                        ,'After call to copy_oks_level_elements: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  --------------------------------------------------------------------

  --------------Copy of Billing schedules for Skipped Lines-----------
   Begin
      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
       IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
        FND_LOG.string(FND_LOG.level_statement
                       ,l_module_name||'.copy_bsch_for_SkippedLines'
                       ,'Before call to copy_bsch_for_SkippedLines'
                        );
       END IF;
      END IF;



   copy_bsch_for_SkippedLines(P_To_Chr_ID  => P_To_Chr_ID
			     ,P_From_Chr_ID => P_From_Chr_ID
			     ,P_Partial_Copy_YN => 'N'
                             ,p_init_msg_list => p_init_msg_list
                             ,x_return_status => l_return_status
                             ,x_msg_count => x_msg_count
                             ,x_msg_data => x_msg_data);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_bsch_for_SkippedLines'
                        ,'After call to copy_bsch_for_SkippedLines: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;



     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;

   End;
  --------------------------------------------------------------------


   ELSIF (l_SrcContractPPSetupExists_YN = 'N' AND l_GCDPPSetupExists_YN = 'Y') THEN
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.create_bsch_using_PPSetup'
                        ,'Before call to create_bsch_using_PPSetup'
                         );
        END IF;
       END IF;
    --Create Billing Schedule using Partial Period Setup in GCD----
    create_bsch_using_PPSetup(P_To_Chr_ID        => P_To_Chr_ID
                             ,P_From_Chr_ID      => P_From_Chr_ID
                             ,P_Partial_Copy_YN  => 'N'
                             ,p_init_msg_list    => p_init_msg_list
                             ,x_return_status    => l_return_status
                             ,x_msg_count   	 => x_msg_count
                             ,x_msg_data         => x_msg_data);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.create_bsch_using_PPSetup'
                        ,'After call to create_bsch_using_PPSetup: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;
     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;


   END IF; --End of IF Check for l_SrcContractPPSetupExists_YN = 'Y'
--  END IF; --End of IsSourceContractTemplate = 'N' check

  --================End of Billing Schedule copy===============================

   --================Start of Coverage Schedule copy for Lines==================

   -------------Copy of OKS_COVERAGE_TIMEZONES------------------------
   Begin
   copy_oks_coverage_timezones(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'N'
                              ,x_return_status => l_return_status);
     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------

   -------------Copy of OKS_COVERAGE_TIMES-----------------------------
   Begin
   copy_oks_coverage_times(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'N'
                              ,x_return_status => l_return_status);
     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  --=======================End of Coverage Schedule copy==========================


  --=======================Start of PM Schedule Copy for Line=====================

   -------------Copy of OKS_PM_ACTIVITIES-----------------------------
   Begin
   copy_oks_pm_activities(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'N'
                         ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  --------------Copy of OKS_PM_STREAM_LEVELS---------------------------
   Begin
   copy_oks_pm_stream_levels(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'N'
                         ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  -------------Copy of OKS_PM_SCHEDULES----------------------------------
   Begin
   copy_oks_pm_schedules(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'N'
                         ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------

 --=====================End of PM Schedule Copy=================================


 --=====================Start of Action Times copy for Lines====================

  --------------Copy of OKS_ACTION_TIME_TYPES-------------------------
   Begin
   copy_oks_action_time_types(P_From_Chr_ID => P_From_Chr_ID
                             ,P_To_Chr_ID   => P_To_Chr_ID
                             ,P_Partial_Copy_YN => 'N'
                             ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  --------------Copy of OKS_ACTION_TIMES-------------------------------
   Begin
   copy_oks_action_times(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'N'
                        ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------

 --=====================End of Action Times copy================================

 --=====================Start of BillRate Schedule copy for Lines===============

  --------------Copy of OKS_BILLRATE_SCHEDULES-------------------------------
   Begin
   copy_oks_billrate_schedules(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'N'
                              ,x_return_status => l_return_status);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------

 --=====================End of BillRate Schedule copy============================


    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.End'
                        ,',x_return_status='||x_return_status
                         );
      END IF;
    END IF;
  END IF; --End of check of P_Renew_Ref_YN='N'

 EXCEPTION
  WHEN G_EXCEPTION_HALT_VALIDATION then

      IF GetOKCOKSLinesB_Copy%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy;
      ELSIF GetOKCOKSLinesB_Copy_TERMN%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy_TERMN;
      ELSIF GetOKCOKSLinesB_Copy_CANCEL%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy_CANCEL;
      ELSIF GetOKCOKSLinesB_Copy_EXCLUDE%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy_EXCLUDE;
      ELSIF GetOKCOKSLinesB_Renew%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Renew;
      END IF;

    x_return_status := l_return_status;
      IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) then
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.EXCEPTION'
                        ,',x_return_status='||x_return_status
                        ||'Error Msg='||SQLERRM
                         );
      END IF;
    OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
    RETURN;
  WHEN OTHERS THEN

      IF GetOKCOKSLinesB_Copy%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy;
      ELSIF GetOKCOKSLinesB_Copy_TERMN%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy_TERMN;
      ELSIF GetOKCOKSLinesB_Copy_CANCEL%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy_CANCEL;
      ELSIF GetOKCOKSLinesB_Copy_EXCLUDE%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Copy_EXCLUDE;
      ELSIF GetOKCOKSLinesB_Renew%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Renew;
      END IF;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
    RAISE;

END copy_lines;
--=======================================End COPY_LINES=====================================


/*======================================================================================
--Copy_Line_Components: This procedure copies all lines that are selected by the user for Copy in the Copy UI
              and their details. This pricedure is used in COPY_COMPONENTS API.
		    Parameters:
		      P_From_Chr_ID: Header ID of the Source Contract
		      P_To_Chr_ID  : Header ID of the Target Contract
		      P_Target_Contract_New_YN: Flag to indicate if the Target Contract was just created as part of Copy
	                          or was already present and only lines were copied to an existing target
				  contract. Value for this parameter will be 'Y' if source contract is being
				  copied to a new contract, 'N' if the copy is happening into an existing
				  contract.  This parameter would be initialized in this API to 'N' and get set
			          to 'Y' immediately after the call to Copy_Contract_Header.
                     		  This parameter would be used in copy of:
					    Price Attribute Values
					    Price Adjustments
					    Sales Credits
					    Billing Schedules.
				  If value is 'N' these entities would be copied only for Lines
				  else they would be copied for both Header and Lines.
===============================================================================*/
PROCEDURE copy_line_components(
      p_api_version      IN NUMBER
     ,p_init_msg_list    IN VARCHAR2 DEFAULT OKC_API.G_FALSE
     ,x_return_status    OUT NOCOPY VARCHAR2
     ,x_msg_count        OUT NOCOPY NUMBER
     ,x_msg_data         OUT NOCOPY VARCHAR2
     ,P_From_Chr_ID      IN NUMBER
     ,P_To_Chr_ID        IN NUMBER
     ,P_Target_Contract_New_YN IN VARCHAR2
     ,P_Lines_Tbl        IN api_lines_tbl
     ,p_change_status_YN                IN VARCHAR2 --Added for Update_Service requirement(Bug 4747648)
                                                           --If 'Y', status of new line is default status
                                                           --If 'N', status from Source Line is retained
     ,p_return_new_top_line_ID_YN    IN VARCHAR2 --Added for Update_Service requirement(Bug 4747648)
                                                           --If 'Y' then the new line IDs of the copied top lines need to be
                                                           --published

,p_include_cancelled_lines IN VARCHAR2 DEFAULT 'Y'
,p_include_terminated_lines IN VARCHAR2 DEFAULT 'Y') IS

 l_api_name        CONSTANT VARCHAR2(30) := 'COPY_LINE_COMPONENTS';
 l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;
 l_return_status    VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
 l_euro_currency    VARCHAR2(15) := NULL;
 l_converted_price_negotiated NUMBER := NULL;
 l_converted_price_unit NUMBER := NULL;

 l_SrcContractPPSetupExists_YN VARCHAR2(1) := ContractPPSetupEXISTS(P_Chr_ID => P_From_Chr_ID);
 l_TrgContractPPSetupExists_YN VARCHAR2(1) := ContractPPSetupEXISTS(P_Chr_ID => P_To_Chr_ID);
 l_GCDPPSetupExists_YN VARCHAR2(1);

 l_locked_price_list_id      NUMBER := NULL;
 l_locked_price_list_line_id NUMBER := NULL;
 l_trxn_extension_id           NUMBER := NULL;

 lx_rail_rec OKS_TAX_UTIL_PVT.ra_rec_type;
 -- 03-Nov-2006 hkamdar. Bug# 5623498.
 CURSOR get_toplvl_uom(p_line_id IN NUMBER) IS
 SELECT OEL.PRICING_QUANTITY_UOM
       FROM   OKC_K_LINES_B OKCLINE,
              OKC_K_REL_OBJS OKCREL,
              OE_ORDER_LINES_ALL OEL
       WHERE  OKCLINE.LSE_ID IN (7,9,25)
       AND    OKCLINE.id = p_line_id
       AND    OKCLINE.ID =  OKCREL.CLE_ID
       AND    OEL.LINE_ID = OKCREL.OBJECT1_ID1;
 l_toplvl_uom_code   OKS_K_LINES_B.toplvl_uom_code%TYPE;
 -- 03-Nov-2006 hkamdar. Bug# 5623498.

  -------------Cursor to get default status for line-------------------------
  CURSOR get_default_status IS
  select code
  from okc_statuses_b
  where ste_code = 'ENTERED'
  and default_yn = 'Y';

  l_Default_Sts_Code OKC_STATUSES_B.CODE%TYPE;
  ---------------------------------------------------------------------------
  ------------Cursor to get Contract Number,Start Date and End Date of newly created contract--------
  CURSOR get_new_contract_num_and_Dates(P_To_Chr_ID IN NUMBER) IS
  select
   a.contract_number
  ,a.start_date
  ,a.end_date
  ,b.price_uom
  from okc_k_headers_b a
  ,oks_k_headers_b b
  where a.id = P_To_Chr_ID
  and a.id = b.chr_id;

  l_new_contract_number       OKC_K_HEADERS_B.CONTRACT_NUMBER%TYPE := NULL;
  l_Hdr_Start_Date DATE;
  l_Hdr_End_Date   DATE;
  l_Target_Hdr_Price_UOM  OKS_K_HEADERS_B.PRICE_UOM%TYPE := NULL;

  -- Bug# 5531198 hkamdar 21-Sep-2006
  l_TrgtHeaderPriceUomExists_YN VARCHAR2(1);
  -- End Bug# 5531198 hkamdar 21-Sep-2006


/*if p_include_cancelled_lines = 'Y' AND P_INCLUDE_TERMINATED_LINES = 'Y' */
  ----------------------------------------------------------------------------
  -- Cursor to get rows to be copied from:
  --	OKC_K_LINES_B_TEMP
  --	OKS_K_LINES_B
  --	OKC_K_ITEMS
  -- for a specified Source Contract and for the lines chosen by the user for copy.

  CURSOR GetOKCOKSLinesB_Temp(P_From_Chr_ID IN NUMBER
			     ,P_To_Chr_ID IN NUMBER) IS
  SELECT
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcBT.ORIG_SYSTEM_ID1                            AS OkcBT_OldOKCLineID
  ,okcBT.ID					    AS OkcBT_NewOKCLineID --Target Value
  ,okcBT.LINE_NUMBER  				    AS OkcBT_LINE_NUMBER
  ,okcBT.CHR_ID					    AS OkcBT_NewChrID--Target Value
  ,okcBT.CLE_ID 				    AS OkcBT_CLE_ID
  ,okcBT.DNZ_CHR_ID                                 AS OkcBT_NewDnzChrID --Target Value
  ,okcBT.DISPLAY_SEQUENCE 			    AS OkcBT_DISPLAY_SEQUENCE
  ,okcBT.STS_CODE 				    AS OkcBT_STS_CODE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TRN_CODE)
         )                                          AS OkcBT_TRN_CODE --Added the decode for bug 4747648
  ,okcBT.LSE_ID 				    AS OkcBT_LSE_ID
  ,okcBT.EXCEPTION_YN				    AS OkcBT_EXCEPTION_YN
  ,1			    			    AS OkcBT_OBJECT_VERSION_NUMBER
  ,okcBT.HIDDEN_IND 				    AS OkcBT_HIDDEN_IND
  ,decode(okcBT.DATE_TERMINATED
         ,NULL
         ,decode(okcBT.LSE_ID
                ,46
                ,decode(okcBT.DATE_CANCELLED
                       ,NULL
                       ,okcBT.PRICE_NEGOTIATED
                       ,okcBT.CANCELLED_AMOUNT
                       )
                ,okcBT.PRICE_NEGOTIATED
                )
         ,nvl(okcBT.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         ) 					    AS OkcBT_PRICE_NEGOTIATED
  ,okcBT.PRICE_LEVEL_IND			    AS OkcBT_PRICE_LEVEL_IND
  ,okcBT.PRICE_UNIT 				    AS OkcBT_PRICE_UNIT
  ,okcBT.PRICE_UNIT_PERCENT			    AS OkcBT_PRICE_UNIT_PERCENT
  ,okcBT.INVOICE_LINE_LEVEL_IND			    AS OkcBT_INVOICE_LINE_LEVEL_IND
  ,okcBT.DPAS_RATING				    AS OkcBT_DPAS_RATING
  ,okcBT.TEMPLATE_USED				    AS OkcBT_TEMPLATE_USED
  ,okcBT.PRICE_TYPE				    AS OkcBT_PRICE_TYPE
  ,okcBT.CURRENCY_CODE				    AS OkcBT_CURRENCY_CODE
  ,NULL			                            AS OkcBT_DATE_TERMINATED
  ,okcBT.START_DATE                                 AS OkcBT_START_DATE
  ,okcBT.END_DATE                                   AS OkcBT_END_DATE
  ,okcBT.ATTRIBUTE_CATEGORY                         AS OkcBT_ATTRIBUTE_CATEGORY
  ,okcBT.ATTRIBUTE1                                 AS OkcBT_ATTRIBUTE1
  ,okcBT.ATTRIBUTE2                                 AS OkcBT_ATTRIBUTE2
  ,okcBT.ATTRIBUTE3				    AS OkcBT_ATTRIBUTE3
  ,okcBT.ATTRIBUTE4 				    AS OkcBT_ATTRIBUTE4
  ,okcBT.ATTRIBUTE5				    AS OkcBT_ATTRIBUTE5
  ,okcBT.ATTRIBUTE6				    AS OkcBT_ATTRIBUTE6
  ,okcBT.ATTRIBUTE7				    AS OkcBT_ATTRIBUTE7
  ,okcBT.ATTRIBUTE8				    AS OkcBT_ATTRIBUTE8
  ,okcBT.ATTRIBUTE9				    AS OkcBT_ATTRIBUTE9
  ,okcBT.ATTRIBUTE10				    AS OkcBT_ATTRIBUTE10
  ,okcBT.ATTRIBUTE11				    AS OkcBT_ATTRIBUTE11
  ,okcBT.ATTRIBUTE12				    AS OkcBT_ATTRIBUTE12
  ,okcBT.ATTRIBUTE13				    AS OkcBT_ATTRIBUTE13
  ,okcBT.ATTRIBUTE14				    AS OkcBT_ATTRIBUTE14
  ,okcBT.ATTRIBUTE15				    AS OkcBT_ATTRIBUTE15
  ,okcBT.SECURITY_GROUP_ID			    AS OkcBT_SECURITY_GROUP_ID
  ,okcBT.PRICE_NEGOTIATED_RENEWED		    AS OkcBT_PRICE_NEGOTIATED_RENEWED
  ,okcBT.CURRENCY_CODE_RENEWED			    AS OkcBT_CURRENCY_CODE_RENEWED
  ,okcBT.UPG_ORIG_SYSTEM_REF			    AS OkcBT_UPG_ORIG_SYSTEM_REF
  ,okcBT.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcBT_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcBT_DATE_RENEWED
  ,okcBT.ORIG_SYSTEM_ID1 			    AS OkcBT_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcBT_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS ORIGT_SYSTEM_SOURCE_CODE   --Target Value
  ,okcBT.PROGRAM_APPLICATION_ID		    	    AS OkcBT_PROGRAM_APPLICATION_ID
  ,okcBT.PROGRAM_ID				    AS OkcBT_PROGRAM_ID
  ,okcBT.PROGRAM_UPDATE_DATE			    AS OkcBT_PROGRAM_UPDATE_DATE
  ,okcBT.REQUEST_ID				    AS OkcBT_REQUEST_ID
  ,okcBT.PRICE_LIST_ID				    AS OkcBT_PRICE_LIST_ID
  ,okcBT.PRICE_LIST_LINE_ID			    AS OkcBT_PRICE_LIST_LINE_ID
  ,okcBT.LINE_LIST_PRICE			    AS OkcBT_LINE_LIST_PRICE
  ,okcBT.ITEM_TO_PRICE_YN			    AS OkcBT_ITEM_TO_PRICE_YN
  ,okcBT.PRICING_DATE				    AS OkcBT_PRICING_DATE
  ,okcBT.PRICE_BASIS_YN				    AS OkcBT_PRICE_BASIS_YN
  ,okcBT.CONFIG_HEADER_ID			    AS OkcBT_CONFIG_HEADER_ID
  ,okcBT.CONFIG_REVISION_NUMBER			    AS OkcBT_CONFIG_REVISION_NUMBER
  ,okcBT.CONFIG_COMPLETE_YN			    AS OkcBT_CONFIG_COMPLETE_YN
  ,okcBT.CONFIG_VALID_YN			    AS OkcBT_CONFIG_VALID_YN
  ,okcBT.CONFIG_TOP_MODEL_LINE_ID		    AS OkcBT_CONFIG_TOP_MODEL_LINE_ID
  ,okcBT.CONFIG_ITEM_TYPE			    AS OkcBT_CONFIG_ITEM_TYPE
  ,okcBT.CONFIG_ITEM_ID				    AS OkcBT_CONFIG_ITEM_ID
  ,okcBT.SERVICE_ITEM_YN			    AS OkcBT_SERVICE_ITEM_YN
  ,okcBT.PH_PRICING_TYPE			    AS OkcBT_PH_PRICING_TYPE
  ,okcBT.PH_PRICE_BREAK_BASIS			    AS OkcBT_PH_PRICE_BREAK_BASIS
  ,okcBT.PH_MIN_QTY				    AS OkcBT_PH_MIN_QTY
  ,okcBT.PH_MIN_AMT				    AS OkcBT_PH_MIN_AMT
  ,okcBT.PH_QP_REFERENCE_ID			    AS OkcBT_PH_QP_REFERENCE_ID
  ,okcBT.PH_VALUE				    AS OkcBT_PH_VALUE
  ,okcBT.PH_ENFORCE_PRICE_LIST_YN		    AS OkcBT_PH_ENFORCE_PRICE_LIST_YN
  ,okcBT.PH_ADJUSTMENT				    AS OkcBT_PH_ADJUSTMENT
  ,okcBT.PH_INTEGRATED_WITH_QP			    AS OkcBT_PH_INTEGRATED_WITH_QP
  ,okcBT.CUST_ACCT_ID				    AS OkcBT_CUST_ACCT_ID
  ,okcBT.BILL_TO_SITE_USE_ID			    AS OkcBT_BILL_TO_SITE_USE_ID
  ,okcBT.INV_RULE_ID				    AS OkcBT_INV_RULE_ID
  ,okcBT.LINE_RENEWAL_TYPE_CODE			    AS OkcBT_LINE_RENEWAL_TYPE_CODE
  ,okcBT.SHIP_TO_SITE_USE_ID			    AS OkcBT_SHIP_TO_SITE_USE_ID
  ,okcBT.PAYMENT_TERM_ID			    AS OkcBT_PAYMENT_TERM_ID
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.DATE_CANCELLED)
         )					    AS OkcBT_DATE_CANCELLED --Added the decode for bug 4747648
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TERM_CANCEL_SOURCE)
         )					    AS OkcBT_TERM_CANCEL_SOURCE --Making it null for 4641561, Added the decode for bug 4747648
  ,decode(okcBT.DATES_CHANGED_YN
         ,'N'
         ,okcBT.ANNUALIZED_FACTOR
         ,OKS_SETUP_UTIL_PUB.Get_Annualized_Factor(okcBT.START_DATE
						  ,okcBT.END_DATE
						  ,okcBT.LSE_ID)
         )			    		    AS OkcBT_ANNUALIZED_FACTOR
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,okcBT.PAYMENT_INSTRUCTION_TYPE		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,NULL		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.CANCELLED_AMOUNT)
         )                                          AS OkcBT_CANCELLED_AMOUNT -- As part of fixing 4641561,Added decode for 4747648
  ,decode(okcBT.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcBT_LINE_CANCELLED_FLAG  --pseudo column
  ,decode(okcBT.DATE_TERMINATED,NULL,'N','Y')	    AS OkcBT_LINE_TERMINATED_FLAG --pseudo column
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL					        AS OksB_PAYMENT_TYPE
  ,NULL							AS OksB_CC_NO --Obsolete
  ,NULL							AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL                         AS OksB_COMMITMENT_ID
--  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL					        AS OksB_CUST_PO_NUMBER
--  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
 -- Bug# 5531198 hkamdar 21-Sep-2006
 /*
  ,decode(P_Target_Contract_New_YN
         ,'Y'
         ,decode(l_SrcContractPPSetupExists_YN
                ,'Y'
                ,oksB.PRICE_UOM
                ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)
         ,oksB.PRICE_UOM  --The value of Price_UOM when copying to an existing Target Contract
			  --is subsequently updated based on whether Partial Period Setup on
			  --Target Contract existed or not
         ) 						AS OksB_PRICE_UOM */
  ,decode(P_Target_Contract_New_YN
         ,'Y'
	 ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_Target_Hdr_Price_UOM
		  ,oksB.PRICE_UOM)),oksB.PRICE_UOM)		AS OksB_PRICE_UOM
		  --The value of Price_UOM when copying to an existing Target Contract
		  --is subsequently updated based on whether Partial Period Setup on
		  --Target Contract existed or not
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B_TEMP okcBT
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND okcBT.ORIG_SYSTEM_ID1 = oksB.CLE_ID(+)
  AND okcBT.ORIG_SYSTEM_ID1 = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcI.DNZ_CHR_ID(+) = P_From_Chr_ID;

/*IF p_include_cancelled_lines = 'Y' AND p_include_terminated_lines = 'N' */
  ----------------------------------------------------------------------------
  -- Cursor to get rows to be copied from:
  --	OKC_K_LINES_B_TEMP
  --	OKS_K_LINES_B
  --	OKC_K_ITEMS
  -- for a specified Source Contract and for the lines chosen by the user for copy.

  CURSOR GetOKCOKSLinesB_Temp_CANCEL(P_From_Chr_ID IN NUMBER
			     ,P_To_Chr_ID IN NUMBER) IS
  SELECT
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcBT.ORIG_SYSTEM_ID1                            AS OkcBT_OldOKCLineID
  ,okcBT.ID					    AS OkcBT_NewOKCLineID --Target Value
  ,okcBT.LINE_NUMBER  				    AS OkcBT_LINE_NUMBER
  ,okcBT.CHR_ID					    AS OkcBT_NewChrID--Target Value
  ,okcBT.CLE_ID 				    AS OkcBT_CLE_ID
  ,okcBT.DNZ_CHR_ID                                 AS OkcBT_NewDnzChrID --Target Value
  ,okcBT.DISPLAY_SEQUENCE 			    AS OkcBT_DISPLAY_SEQUENCE
  ,okcBT.STS_CODE 				    AS OkcBT_STS_CODE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TRN_CODE)
         )                                          AS OkcBT_TRN_CODE --Added the decode for bug 4747648
  ,okcBT.LSE_ID 				    AS OkcBT_LSE_ID
  ,okcBT.EXCEPTION_YN				    AS OkcBT_EXCEPTION_YN
  ,1			    			    AS OkcBT_OBJECT_VERSION_NUMBER
  ,okcBT.HIDDEN_IND 				    AS OkcBT_HIDDEN_IND
  ,decode(okcBT.DATE_TERMINATED
         ,NULL
         ,decode(okcBT.LSE_ID
                ,46
                ,decode(okcBT.DATE_CANCELLED
                       ,NULL
                       ,okcBT.PRICE_NEGOTIATED
                       ,okcBT.CANCELLED_AMOUNT
                       )
                ,okcBT.PRICE_NEGOTIATED
                )
         ,nvl(okcBT.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         ) 					    AS OkcBT_PRICE_NEGOTIATED
  ,okcBT.PRICE_LEVEL_IND			    AS OkcBT_PRICE_LEVEL_IND
  ,okcBT.PRICE_UNIT 				    AS OkcBT_PRICE_UNIT
  ,okcBT.PRICE_UNIT_PERCENT			    AS OkcBT_PRICE_UNIT_PERCENT
  ,okcBT.INVOICE_LINE_LEVEL_IND			    AS OkcBT_INVOICE_LINE_LEVEL_IND
  ,okcBT.DPAS_RATING				    AS OkcBT_DPAS_RATING
  ,okcBT.TEMPLATE_USED				    AS OkcBT_TEMPLATE_USED
  ,okcBT.PRICE_TYPE				    AS OkcBT_PRICE_TYPE
  ,okcBT.CURRENCY_CODE				    AS OkcBT_CURRENCY_CODE
  ,NULL			                            AS OkcBT_DATE_TERMINATED
  ,okcBT.START_DATE                                 AS OkcBT_START_DATE
  ,okcBT.END_DATE                                   AS OkcBT_END_DATE
  ,okcBT.ATTRIBUTE_CATEGORY                         AS OkcBT_ATTRIBUTE_CATEGORY
  ,okcBT.ATTRIBUTE1                                 AS OkcBT_ATTRIBUTE1
  ,okcBT.ATTRIBUTE2                                 AS OkcBT_ATTRIBUTE2
  ,okcBT.ATTRIBUTE3				    AS OkcBT_ATTRIBUTE3
  ,okcBT.ATTRIBUTE4 				    AS OkcBT_ATTRIBUTE4
  ,okcBT.ATTRIBUTE5				    AS OkcBT_ATTRIBUTE5
  ,okcBT.ATTRIBUTE6				    AS OkcBT_ATTRIBUTE6
  ,okcBT.ATTRIBUTE7				    AS OkcBT_ATTRIBUTE7
  ,okcBT.ATTRIBUTE8				    AS OkcBT_ATTRIBUTE8
  ,okcBT.ATTRIBUTE9				    AS OkcBT_ATTRIBUTE9
  ,okcBT.ATTRIBUTE10				    AS OkcBT_ATTRIBUTE10
  ,okcBT.ATTRIBUTE11				    AS OkcBT_ATTRIBUTE11
  ,okcBT.ATTRIBUTE12				    AS OkcBT_ATTRIBUTE12
  ,okcBT.ATTRIBUTE13				    AS OkcBT_ATTRIBUTE13
  ,okcBT.ATTRIBUTE14				    AS OkcBT_ATTRIBUTE14
  ,okcBT.ATTRIBUTE15				    AS OkcBT_ATTRIBUTE15
  ,okcBT.SECURITY_GROUP_ID			    AS OkcBT_SECURITY_GROUP_ID
  ,okcBT.PRICE_NEGOTIATED_RENEWED		    AS OkcBT_PRICE_NEGOTIATED_RENEWED
  ,okcBT.CURRENCY_CODE_RENEWED			    AS OkcBT_CURRENCY_CODE_RENEWED
  ,okcBT.UPG_ORIG_SYSTEM_REF			    AS OkcBT_UPG_ORIG_SYSTEM_REF
  ,okcBT.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcBT_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcBT_DATE_RENEWED
  ,okcBT.ORIG_SYSTEM_ID1 			    AS OkcBT_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcBT_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS ORIGT_SYSTEM_SOURCE_CODE   --Target Value
  ,okcBT.PROGRAM_APPLICATION_ID		    	    AS OkcBT_PROGRAM_APPLICATION_ID
  ,okcBT.PROGRAM_ID				    AS OkcBT_PROGRAM_ID
  ,okcBT.PROGRAM_UPDATE_DATE			    AS OkcBT_PROGRAM_UPDATE_DATE
  ,okcBT.REQUEST_ID				    AS OkcBT_REQUEST_ID
  ,okcBT.PRICE_LIST_ID				    AS OkcBT_PRICE_LIST_ID
  ,okcBT.PRICE_LIST_LINE_ID			    AS OkcBT_PRICE_LIST_LINE_ID
  ,okcBT.LINE_LIST_PRICE			    AS OkcBT_LINE_LIST_PRICE
  ,okcBT.ITEM_TO_PRICE_YN			    AS OkcBT_ITEM_TO_PRICE_YN
  ,okcBT.PRICING_DATE				    AS OkcBT_PRICING_DATE
  ,okcBT.PRICE_BASIS_YN				    AS OkcBT_PRICE_BASIS_YN
  ,okcBT.CONFIG_HEADER_ID			    AS OkcBT_CONFIG_HEADER_ID
  ,okcBT.CONFIG_REVISION_NUMBER			    AS OkcBT_CONFIG_REVISION_NUMBER
  ,okcBT.CONFIG_COMPLETE_YN			    AS OkcBT_CONFIG_COMPLETE_YN
  ,okcBT.CONFIG_VALID_YN			    AS OkcBT_CONFIG_VALID_YN
  ,okcBT.CONFIG_TOP_MODEL_LINE_ID		    AS OkcBT_CONFIG_TOP_MODEL_LINE_ID
  ,okcBT.CONFIG_ITEM_TYPE			    AS OkcBT_CONFIG_ITEM_TYPE
  ,okcBT.CONFIG_ITEM_ID				    AS OkcBT_CONFIG_ITEM_ID
  ,okcBT.SERVICE_ITEM_YN			    AS OkcBT_SERVICE_ITEM_YN
  ,okcBT.PH_PRICING_TYPE			    AS OkcBT_PH_PRICING_TYPE
  ,okcBT.PH_PRICE_BREAK_BASIS			    AS OkcBT_PH_PRICE_BREAK_BASIS
  ,okcBT.PH_MIN_QTY				    AS OkcBT_PH_MIN_QTY
  ,okcBT.PH_MIN_AMT				    AS OkcBT_PH_MIN_AMT
  ,okcBT.PH_QP_REFERENCE_ID			    AS OkcBT_PH_QP_REFERENCE_ID
  ,okcBT.PH_VALUE				    AS OkcBT_PH_VALUE
  ,okcBT.PH_ENFORCE_PRICE_LIST_YN		    AS OkcBT_PH_ENFORCE_PRICE_LIST_YN
  ,okcBT.PH_ADJUSTMENT				    AS OkcBT_PH_ADJUSTMENT
  ,okcBT.PH_INTEGRATED_WITH_QP			    AS OkcBT_PH_INTEGRATED_WITH_QP
  ,okcBT.CUST_ACCT_ID				    AS OkcBT_CUST_ACCT_ID
  ,okcBT.BILL_TO_SITE_USE_ID			    AS OkcBT_BILL_TO_SITE_USE_ID
  ,okcBT.INV_RULE_ID				    AS OkcBT_INV_RULE_ID
  ,okcBT.LINE_RENEWAL_TYPE_CODE			    AS OkcBT_LINE_RENEWAL_TYPE_CODE
  ,okcBT.SHIP_TO_SITE_USE_ID			    AS OkcBT_SHIP_TO_SITE_USE_ID
  ,okcBT.PAYMENT_TERM_ID			    AS OkcBT_PAYMENT_TERM_ID
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.DATE_CANCELLED)
         )					    AS OkcBT_DATE_CANCELLED --Added the decode for bug 4747648
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TERM_CANCEL_SOURCE)
         )					    AS OkcBT_TERM_CANCEL_SOURCE --Making it null for 4641561, Added the decode for bug 4747648
  ,decode(okcBT.DATES_CHANGED_YN
         ,'N'
         ,okcBT.ANNUALIZED_FACTOR
         ,OKS_SETUP_UTIL_PUB.Get_Annualized_Factor(okcBT.START_DATE
						  ,okcBT.END_DATE
						  ,okcBT.LSE_ID)
         )			    		    AS OkcBT_ANNUALIZED_FACTOR
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,okcBT.PAYMENT_INSTRUCTION_TYPE		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,NULL		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.CANCELLED_AMOUNT)
         )                                          AS OkcBT_CANCELLED_AMOUNT -- As part of fixing 4641561,Added decode for 4747648
  ,decode(okcBT.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcBT_LINE_CANCELLED_FLAG  --pseudo column
  ,decode(okcBT.DATE_TERMINATED,NULL,'N','Y')	    AS OkcBT_LINE_TERMINATED_FLAG --pseudo column
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL					        AS OksB_PAYMENT_TYPE
  ,NULL							AS OksB_CC_NO --Obsolete
  ,NULL							AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL                         AS OksB_COMMITMENT_ID
--  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL					        AS OksB_CUST_PO_NUMBER
--  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
 -- Bug# 5531198 hkamdar 21-Sep-2006
 /*
  ,decode(P_Target_Contract_New_YN
         ,'Y'
         ,decode(l_SrcContractPPSetupExists_YN
                ,'Y'
                ,oksB.PRICE_UOM
                ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)
         ,oksB.PRICE_UOM  --The value of Price_UOM when copying to an existing Target Contract
			  --is subsequently updated based on whether Partial Period Setup on
			  --Target Contract existed or not
         ) 						AS OksB_PRICE_UOM */
  ,decode(P_Target_Contract_New_YN
         ,'Y'
	 ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_Target_Hdr_Price_UOM
		  ,oksB.PRICE_UOM)),oksB.PRICE_UOM)		AS OksB_PRICE_UOM
		  --The value of Price_UOM when copying to an existing Target Contract
		  --is subsequently updated based on whether Partial Period Setup on
		  --Target Contract existed or not
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B_TEMP okcBT
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND okcBT.ORIG_SYSTEM_ID1 = oksB.CLE_ID(+)
  AND okcBT.ORIG_SYSTEM_ID1 = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcI.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcBT.date_terminated is null;

/*if p_include_cancelled_lines= 'N' AND p_include_terminated_lines = 'Y' */
  ----------------------------------------------------------------------------
  -- Cursor to get rows to be copied from:
  --	OKC_K_LINES_B_TEMP
  --	OKS_K_LINES_B
  --	OKC_K_ITEMS
  -- for a specified Source Contract and for the lines chosen by the user for copy.

  CURSOR GetOKCOKSLinesB_Temp_TERMN(P_From_Chr_ID IN NUMBER
			     ,P_To_Chr_ID IN NUMBER) IS
  SELECT
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcBT.ORIG_SYSTEM_ID1                            AS OkcBT_OldOKCLineID
  ,okcBT.ID					    AS OkcBT_NewOKCLineID --Target Value
  ,okcBT.LINE_NUMBER  				    AS OkcBT_LINE_NUMBER
  ,okcBT.CHR_ID					    AS OkcBT_NewChrID--Target Value
  ,okcBT.CLE_ID 				    AS OkcBT_CLE_ID
  ,okcBT.DNZ_CHR_ID                                 AS OkcBT_NewDnzChrID --Target Value
  ,okcBT.DISPLAY_SEQUENCE 			    AS OkcBT_DISPLAY_SEQUENCE
  ,okcBT.STS_CODE 				    AS OkcBT_STS_CODE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TRN_CODE)
         )                                          AS OkcBT_TRN_CODE --Added the decode for bug 4747648
  ,okcBT.LSE_ID 				    AS OkcBT_LSE_ID
  ,okcBT.EXCEPTION_YN				    AS OkcBT_EXCEPTION_YN
  ,1			    			    AS OkcBT_OBJECT_VERSION_NUMBER
  ,okcBT.HIDDEN_IND 				    AS OkcBT_HIDDEN_IND
  ,decode(okcBT.DATE_TERMINATED
         ,NULL
         ,decode(okcBT.LSE_ID
                ,46
                ,decode(okcBT.DATE_CANCELLED
                       ,NULL
                       ,okcBT.PRICE_NEGOTIATED
                       ,okcBT.CANCELLED_AMOUNT
                       )
                ,okcBT.PRICE_NEGOTIATED
                )
         ,nvl(okcBT.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         ) 					    AS OkcBT_PRICE_NEGOTIATED
  ,okcBT.PRICE_LEVEL_IND			    AS OkcBT_PRICE_LEVEL_IND
  ,okcBT.PRICE_UNIT 				    AS OkcBT_PRICE_UNIT
  ,okcBT.PRICE_UNIT_PERCENT			    AS OkcBT_PRICE_UNIT_PERCENT
  ,okcBT.INVOICE_LINE_LEVEL_IND			    AS OkcBT_INVOICE_LINE_LEVEL_IND
  ,okcBT.DPAS_RATING				    AS OkcBT_DPAS_RATING
  ,okcBT.TEMPLATE_USED				    AS OkcBT_TEMPLATE_USED
  ,okcBT.PRICE_TYPE				    AS OkcBT_PRICE_TYPE
  ,okcBT.CURRENCY_CODE				    AS OkcBT_CURRENCY_CODE
  ,NULL			                            AS OkcBT_DATE_TERMINATED
  ,okcBT.START_DATE                                 AS OkcBT_START_DATE
  ,okcBT.END_DATE                                   AS OkcBT_END_DATE
  ,okcBT.ATTRIBUTE_CATEGORY                         AS OkcBT_ATTRIBUTE_CATEGORY
  ,okcBT.ATTRIBUTE1                                 AS OkcBT_ATTRIBUTE1
  ,okcBT.ATTRIBUTE2                                 AS OkcBT_ATTRIBUTE2
  ,okcBT.ATTRIBUTE3				    AS OkcBT_ATTRIBUTE3
  ,okcBT.ATTRIBUTE4 				    AS OkcBT_ATTRIBUTE4
  ,okcBT.ATTRIBUTE5				    AS OkcBT_ATTRIBUTE5
  ,okcBT.ATTRIBUTE6				    AS OkcBT_ATTRIBUTE6
  ,okcBT.ATTRIBUTE7				    AS OkcBT_ATTRIBUTE7
  ,okcBT.ATTRIBUTE8				    AS OkcBT_ATTRIBUTE8
  ,okcBT.ATTRIBUTE9				    AS OkcBT_ATTRIBUTE9
  ,okcBT.ATTRIBUTE10				    AS OkcBT_ATTRIBUTE10
  ,okcBT.ATTRIBUTE11				    AS OkcBT_ATTRIBUTE11
  ,okcBT.ATTRIBUTE12				    AS OkcBT_ATTRIBUTE12
  ,okcBT.ATTRIBUTE13				    AS OkcBT_ATTRIBUTE13
  ,okcBT.ATTRIBUTE14				    AS OkcBT_ATTRIBUTE14
  ,okcBT.ATTRIBUTE15				    AS OkcBT_ATTRIBUTE15
  ,okcBT.SECURITY_GROUP_ID			    AS OkcBT_SECURITY_GROUP_ID
  ,okcBT.PRICE_NEGOTIATED_RENEWED		    AS OkcBT_PRICE_NEGOTIATED_RENEWED
  ,okcBT.CURRENCY_CODE_RENEWED			    AS OkcBT_CURRENCY_CODE_RENEWED
  ,okcBT.UPG_ORIG_SYSTEM_REF			    AS OkcBT_UPG_ORIG_SYSTEM_REF
  ,okcBT.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcBT_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcBT_DATE_RENEWED
  ,okcBT.ORIG_SYSTEM_ID1 			    AS OkcBT_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcBT_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS ORIGT_SYSTEM_SOURCE_CODE   --Target Value
  ,okcBT.PROGRAM_APPLICATION_ID		    	    AS OkcBT_PROGRAM_APPLICATION_ID
  ,okcBT.PROGRAM_ID				    AS OkcBT_PROGRAM_ID
  ,okcBT.PROGRAM_UPDATE_DATE			    AS OkcBT_PROGRAM_UPDATE_DATE
  ,okcBT.REQUEST_ID				    AS OkcBT_REQUEST_ID
  ,okcBT.PRICE_LIST_ID				    AS OkcBT_PRICE_LIST_ID
  ,okcBT.PRICE_LIST_LINE_ID			    AS OkcBT_PRICE_LIST_LINE_ID
  ,okcBT.LINE_LIST_PRICE			    AS OkcBT_LINE_LIST_PRICE
  ,okcBT.ITEM_TO_PRICE_YN			    AS OkcBT_ITEM_TO_PRICE_YN
  ,okcBT.PRICING_DATE				    AS OkcBT_PRICING_DATE
  ,okcBT.PRICE_BASIS_YN				    AS OkcBT_PRICE_BASIS_YN
  ,okcBT.CONFIG_HEADER_ID			    AS OkcBT_CONFIG_HEADER_ID
  ,okcBT.CONFIG_REVISION_NUMBER			    AS OkcBT_CONFIG_REVISION_NUMBER
  ,okcBT.CONFIG_COMPLETE_YN			    AS OkcBT_CONFIG_COMPLETE_YN
  ,okcBT.CONFIG_VALID_YN			    AS OkcBT_CONFIG_VALID_YN
  ,okcBT.CONFIG_TOP_MODEL_LINE_ID		    AS OkcBT_CONFIG_TOP_MODEL_LINE_ID
  ,okcBT.CONFIG_ITEM_TYPE			    AS OkcBT_CONFIG_ITEM_TYPE
  ,okcBT.CONFIG_ITEM_ID				    AS OkcBT_CONFIG_ITEM_ID
  ,okcBT.SERVICE_ITEM_YN			    AS OkcBT_SERVICE_ITEM_YN
  ,okcBT.PH_PRICING_TYPE			    AS OkcBT_PH_PRICING_TYPE
  ,okcBT.PH_PRICE_BREAK_BASIS			    AS OkcBT_PH_PRICE_BREAK_BASIS
  ,okcBT.PH_MIN_QTY				    AS OkcBT_PH_MIN_QTY
  ,okcBT.PH_MIN_AMT				    AS OkcBT_PH_MIN_AMT
  ,okcBT.PH_QP_REFERENCE_ID			    AS OkcBT_PH_QP_REFERENCE_ID
  ,okcBT.PH_VALUE				    AS OkcBT_PH_VALUE
  ,okcBT.PH_ENFORCE_PRICE_LIST_YN		    AS OkcBT_PH_ENFORCE_PRICE_LIST_YN
  ,okcBT.PH_ADJUSTMENT				    AS OkcBT_PH_ADJUSTMENT
  ,okcBT.PH_INTEGRATED_WITH_QP			    AS OkcBT_PH_INTEGRATED_WITH_QP
  ,okcBT.CUST_ACCT_ID				    AS OkcBT_CUST_ACCT_ID
  ,okcBT.BILL_TO_SITE_USE_ID			    AS OkcBT_BILL_TO_SITE_USE_ID
  ,okcBT.INV_RULE_ID				    AS OkcBT_INV_RULE_ID
  ,okcBT.LINE_RENEWAL_TYPE_CODE			    AS OkcBT_LINE_RENEWAL_TYPE_CODE
  ,okcBT.SHIP_TO_SITE_USE_ID			    AS OkcBT_SHIP_TO_SITE_USE_ID
  ,okcBT.PAYMENT_TERM_ID			    AS OkcBT_PAYMENT_TERM_ID
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.DATE_CANCELLED)
         )					    AS OkcBT_DATE_CANCELLED --Added the decode for bug 4747648
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TERM_CANCEL_SOURCE)
         )					    AS OkcBT_TERM_CANCEL_SOURCE --Making it null for 4641561, Added the decode for bug 4747648
  ,decode(okcBT.DATES_CHANGED_YN
         ,'N'
         ,okcBT.ANNUALIZED_FACTOR
         ,OKS_SETUP_UTIL_PUB.Get_Annualized_Factor(okcBT.START_DATE
						  ,okcBT.END_DATE
						  ,okcBT.LSE_ID)
         )			    		    AS OkcBT_ANNUALIZED_FACTOR
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,okcBT.PAYMENT_INSTRUCTION_TYPE		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,NULL		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.CANCELLED_AMOUNT)
         )                                          AS OkcBT_CANCELLED_AMOUNT -- As part of fixing 4641561,Added decode for 4747648
  ,decode(okcBT.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcBT_LINE_CANCELLED_FLAG  --pseudo column
  ,decode(okcBT.DATE_TERMINATED,NULL,'N','Y')	    AS OkcBT_LINE_TERMINATED_FLAG --pseudo column
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL					        AS OksB_PAYMENT_TYPE
  ,NULL							AS OksB_CC_NO --Obsolete
  ,NULL							AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL                         AS OksB_COMMITMENT_ID
--  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL					        AS OksB_CUST_PO_NUMBER
--  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
 -- Bug# 5531198 hkamdar 21-Sep-2006
 /*
  ,decode(P_Target_Contract_New_YN
         ,'Y'
         ,decode(l_SrcContractPPSetupExists_YN
                ,'Y'
                ,oksB.PRICE_UOM
                ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)
         ,oksB.PRICE_UOM  --The value of Price_UOM when copying to an existing Target Contract
			  --is subsequently updated based on whether Partial Period Setup on
			  --Target Contract existed or not
         ) 						AS OksB_PRICE_UOM */
  ,decode(P_Target_Contract_New_YN
         ,'Y'
	 ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_Target_Hdr_Price_UOM
		  ,oksB.PRICE_UOM)),oksB.PRICE_UOM)		AS OksB_PRICE_UOM
		  --The value of Price_UOM when copying to an existing Target Contract
		  --is subsequently updated based on whether Partial Period Setup on
		  --Target Contract existed or not
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B_TEMP okcBT
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND okcBT.ORIG_SYSTEM_ID1 = oksB.CLE_ID(+)
  AND okcBT.ORIG_SYSTEM_ID1 = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcI.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcBT.date_cancelled is null;

/*if p_include_cancelled_lines = 'N' AND p_include_terminated_lines = 'N'*/
  ----------------------------------------------------------------------------
  -- Cursor to get rows to be copied from:
  --	OKC_K_LINES_B_TEMP
  --	OKS_K_LINES_B
  --	OKC_K_ITEMS
  -- for a specified Source Contract and for the lines chosen by the user for copy.

  CURSOR GetOKCOKSLinesB_Temp_EXCLUDE(P_From_Chr_ID IN NUMBER
			     ,P_To_Chr_ID IN NUMBER) IS
  SELECT
  ------------------------------------------Begin of OKC_K_LINES_B columns---------------------
   okcBT.ORIG_SYSTEM_ID1                            AS OkcBT_OldOKCLineID
  ,okcBT.ID					    AS OkcBT_NewOKCLineID --Target Value
  ,okcBT.LINE_NUMBER  				    AS OkcBT_LINE_NUMBER
  ,okcBT.CHR_ID					    AS OkcBT_NewChrID--Target Value
  ,okcBT.CLE_ID 				    AS OkcBT_CLE_ID
  ,okcBT.DNZ_CHR_ID                                 AS OkcBT_NewDnzChrID --Target Value
  ,okcBT.DISPLAY_SEQUENCE 			    AS OkcBT_DISPLAY_SEQUENCE
  ,okcBT.STS_CODE 				    AS OkcBT_STS_CODE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TRN_CODE)
         )                                          AS OkcBT_TRN_CODE --Added the decode for bug 4747648
  ,okcBT.LSE_ID 				    AS OkcBT_LSE_ID
  ,okcBT.EXCEPTION_YN				    AS OkcBT_EXCEPTION_YN
  ,1			    			    AS OkcBT_OBJECT_VERSION_NUMBER
  ,okcBT.HIDDEN_IND 				    AS OkcBT_HIDDEN_IND
  ,decode(okcBT.DATE_TERMINATED
         ,NULL
         ,decode(okcBT.LSE_ID
                ,46
                ,decode(okcBT.DATE_CANCELLED
                       ,NULL
                       ,okcBT.PRICE_NEGOTIATED
                       ,okcBT.CANCELLED_AMOUNT
                       )
                ,okcBT.PRICE_NEGOTIATED
                )
         ,nvl(okcBT.PRICE_NEGOTIATED,0)
          +nvl(oksB.CREDIT_AMOUNT,0)
          +nvl(oksB.UBT_AMOUNT,0)
          +nvl(oksB.SUPPRESSED_CREDIT,0)
         ) 					    AS OkcBT_PRICE_NEGOTIATED
  ,okcBT.PRICE_LEVEL_IND			    AS OkcBT_PRICE_LEVEL_IND
  ,okcBT.PRICE_UNIT 				    AS OkcBT_PRICE_UNIT
  ,okcBT.PRICE_UNIT_PERCENT			    AS OkcBT_PRICE_UNIT_PERCENT
  ,okcBT.INVOICE_LINE_LEVEL_IND			    AS OkcBT_INVOICE_LINE_LEVEL_IND
  ,okcBT.DPAS_RATING				    AS OkcBT_DPAS_RATING
  ,okcBT.TEMPLATE_USED				    AS OkcBT_TEMPLATE_USED
  ,okcBT.PRICE_TYPE				    AS OkcBT_PRICE_TYPE
  ,okcBT.CURRENCY_CODE				    AS OkcBT_CURRENCY_CODE
  ,NULL			                            AS OkcBT_DATE_TERMINATED
  ,okcBT.START_DATE                                 AS OkcBT_START_DATE
  ,okcBT.END_DATE                                   AS OkcBT_END_DATE
  ,okcBT.ATTRIBUTE_CATEGORY                         AS OkcBT_ATTRIBUTE_CATEGORY
  ,okcBT.ATTRIBUTE1                                 AS OkcBT_ATTRIBUTE1
  ,okcBT.ATTRIBUTE2                                 AS OkcBT_ATTRIBUTE2
  ,okcBT.ATTRIBUTE3				    AS OkcBT_ATTRIBUTE3
  ,okcBT.ATTRIBUTE4 				    AS OkcBT_ATTRIBUTE4
  ,okcBT.ATTRIBUTE5				    AS OkcBT_ATTRIBUTE5
  ,okcBT.ATTRIBUTE6				    AS OkcBT_ATTRIBUTE6
  ,okcBT.ATTRIBUTE7				    AS OkcBT_ATTRIBUTE7
  ,okcBT.ATTRIBUTE8				    AS OkcBT_ATTRIBUTE8
  ,okcBT.ATTRIBUTE9				    AS OkcBT_ATTRIBUTE9
  ,okcBT.ATTRIBUTE10				    AS OkcBT_ATTRIBUTE10
  ,okcBT.ATTRIBUTE11				    AS OkcBT_ATTRIBUTE11
  ,okcBT.ATTRIBUTE12				    AS OkcBT_ATTRIBUTE12
  ,okcBT.ATTRIBUTE13				    AS OkcBT_ATTRIBUTE13
  ,okcBT.ATTRIBUTE14				    AS OkcBT_ATTRIBUTE14
  ,okcBT.ATTRIBUTE15				    AS OkcBT_ATTRIBUTE15
  ,okcBT.SECURITY_GROUP_ID			    AS OkcBT_SECURITY_GROUP_ID
  ,okcBT.PRICE_NEGOTIATED_RENEWED		    AS OkcBT_PRICE_NEGOTIATED_RENEWED
  ,okcBT.CURRENCY_CODE_RENEWED			    AS OkcBT_CURRENCY_CODE_RENEWED
  ,okcBT.UPG_ORIG_SYSTEM_REF			    AS OkcBT_UPG_ORIG_SYSTEM_REF
  ,okcBT.UPG_ORIG_SYSTEM_REF_ID		    	    AS OkcBT_UPG_ORIG_SYSTEM_REF_ID
  ,NULL				    		    AS OkcBT_DATE_RENEWED
  ,okcBT.ORIG_SYSTEM_ID1 			    AS OkcBT_ORIG_SYSTEM_ID1 --Target Value
  ,'COPY'   					    AS OkcBT_ORIG_SYSTEM_REFERENCE1 --Target Value
  ,'OKC_LINE'                               	    AS ORIGT_SYSTEM_SOURCE_CODE   --Target Value
  ,okcBT.PROGRAM_APPLICATION_ID		    	    AS OkcBT_PROGRAM_APPLICATION_ID
  ,okcBT.PROGRAM_ID				    AS OkcBT_PROGRAM_ID
  ,okcBT.PROGRAM_UPDATE_DATE			    AS OkcBT_PROGRAM_UPDATE_DATE
  ,okcBT.REQUEST_ID				    AS OkcBT_REQUEST_ID
  ,okcBT.PRICE_LIST_ID				    AS OkcBT_PRICE_LIST_ID
  ,okcBT.PRICE_LIST_LINE_ID			    AS OkcBT_PRICE_LIST_LINE_ID
  ,okcBT.LINE_LIST_PRICE			    AS OkcBT_LINE_LIST_PRICE
  ,okcBT.ITEM_TO_PRICE_YN			    AS OkcBT_ITEM_TO_PRICE_YN
  ,okcBT.PRICING_DATE				    AS OkcBT_PRICING_DATE
  ,okcBT.PRICE_BASIS_YN				    AS OkcBT_PRICE_BASIS_YN
  ,okcBT.CONFIG_HEADER_ID			    AS OkcBT_CONFIG_HEADER_ID
  ,okcBT.CONFIG_REVISION_NUMBER			    AS OkcBT_CONFIG_REVISION_NUMBER
  ,okcBT.CONFIG_COMPLETE_YN			    AS OkcBT_CONFIG_COMPLETE_YN
  ,okcBT.CONFIG_VALID_YN			    AS OkcBT_CONFIG_VALID_YN
  ,okcBT.CONFIG_TOP_MODEL_LINE_ID		    AS OkcBT_CONFIG_TOP_MODEL_LINE_ID
  ,okcBT.CONFIG_ITEM_TYPE			    AS OkcBT_CONFIG_ITEM_TYPE
  ,okcBT.CONFIG_ITEM_ID				    AS OkcBT_CONFIG_ITEM_ID
  ,okcBT.SERVICE_ITEM_YN			    AS OkcBT_SERVICE_ITEM_YN
  ,okcBT.PH_PRICING_TYPE			    AS OkcBT_PH_PRICING_TYPE
  ,okcBT.PH_PRICE_BREAK_BASIS			    AS OkcBT_PH_PRICE_BREAK_BASIS
  ,okcBT.PH_MIN_QTY				    AS OkcBT_PH_MIN_QTY
  ,okcBT.PH_MIN_AMT				    AS OkcBT_PH_MIN_AMT
  ,okcBT.PH_QP_REFERENCE_ID			    AS OkcBT_PH_QP_REFERENCE_ID
  ,okcBT.PH_VALUE				    AS OkcBT_PH_VALUE
  ,okcBT.PH_ENFORCE_PRICE_LIST_YN		    AS OkcBT_PH_ENFORCE_PRICE_LIST_YN
  ,okcBT.PH_ADJUSTMENT				    AS OkcBT_PH_ADJUSTMENT
  ,okcBT.PH_INTEGRATED_WITH_QP			    AS OkcBT_PH_INTEGRATED_WITH_QP
  ,okcBT.CUST_ACCT_ID				    AS OkcBT_CUST_ACCT_ID
  ,okcBT.BILL_TO_SITE_USE_ID			    AS OkcBT_BILL_TO_SITE_USE_ID
  ,okcBT.INV_RULE_ID				    AS OkcBT_INV_RULE_ID
  ,okcBT.LINE_RENEWAL_TYPE_CODE			    AS OkcBT_LINE_RENEWAL_TYPE_CODE
  ,okcBT.SHIP_TO_SITE_USE_ID			    AS OkcBT_SHIP_TO_SITE_USE_ID
  ,okcBT.PAYMENT_TERM_ID			    AS OkcBT_PAYMENT_TERM_ID
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.DATE_CANCELLED)
         )					    AS OkcBT_DATE_CANCELLED --Added the decode for bug 4747648
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.TERM_CANCEL_SOURCE)
         )					    AS OkcBT_TERM_CANCEL_SOURCE --Making it null for 4641561, Added the decode for bug 4747648
  ,decode(okcBT.DATES_CHANGED_YN
         ,'N'
         ,okcBT.ANNUALIZED_FACTOR
         ,OKS_SETUP_UTIL_PUB.Get_Annualized_Factor(okcBT.START_DATE
						  ,okcBT.END_DATE
						  ,okcBT.LSE_ID)
         )			    		    AS OkcBT_ANNUALIZED_FACTOR
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,okcBT.PAYMENT_INSTRUCTION_TYPE		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,NULL		    AS OkcBT_PAYMENT_INSTRUCTION_TYPE
  ,decode(p_change_status_YN
        ,'Y'
        ,NULL
        ,'N'
        ,decode(okcBT.CLE_ID
               ,NULL
               ,NULL
               ,okcBT.CANCELLED_AMOUNT)
         )                                          AS OkcBT_CANCELLED_AMOUNT -- As part of fixing 4641561,Added decode for 4747648
  ,decode(okcBT.DATE_CANCELLED,NULL,'N','Y') 	    AS OkcBT_LINE_CANCELLED_FLAG  --pseudo column
  ,decode(okcBT.DATE_TERMINATED,NULL,'N','Y')	    AS OkcBT_LINE_TERMINATED_FLAG --pseudo column
  ---------------------------------------End of OKC_K_LINES_B columns------------------------------------
  ---------------------------------------Begin of OKS_K_LINES_B columns----------------------------------
  ,oksB.ID                                		AS OksB_OldOksLineID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OksB_NewOksLineID
  ,oksB.CLE_ID  					AS OksB_CLE_ID
  ,P_To_Chr_ID 						AS OksB_NewDnzChrID
  ,oksB.DISCOUNT_LIST					AS OksB_DISCOUNT_LIST
  ,oksB.ACCT_RULE_ID					AS OksB_ACCT_RULE_ID
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
--  ,oksB.PAYMENT_TYPE					AS OksB_PAYMENT_TYPE
  ,NULL					        AS OksB_PAYMENT_TYPE
  ,NULL							AS OksB_CC_NO --Obsolete
  ,NULL							AS OksB_CC_EXPIRY_DATE --Obsolete
  ,NULL							AS OksB_CC_BANK_ACCT_ID --Obsolete
  ,NULL							AS OksB_CC_AUTH_CODE --Obsolete
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL                         AS OksB_COMMITMENT_ID
--  ,oksB.COMMITMENT_ID					AS OksB_COMMITMENT_ID
  ,oksB.LOCKED_PRICE_LIST_ID				AS OksB_LOCKED_PRICE_LIST_ID
  ,oksB.USAGE_EST_YN					AS OksB_USAGE_EST_YN
  ,oksB.USAGE_EST_METHOD				AS OksB_USAGE_EST_METHOD
  ,oksB.USAGE_EST_START_DATE				AS OksB_USAGE_EST_START_DATE
  ,oksB.TERMN_METHOD					AS OksB_TERMN_METHOD
  ,NULL							AS OksB_UBT_AMOUNT
  ,NULL							AS OksB_CREDIT_AMOUNT
  ,NULL							AS OksB_SUPPRESSED_CREDIT
  ,NULL							AS OksB_OVERRIDE_AMOUNT
  ,oksB.CUST_PO_NUMBER_REQ_YN				AS OksB_CUST_PO_NUMBER_REQ_YN
  -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL					        AS OksB_CUST_PO_NUMBER
--  ,oksB.CUST_PO_NUMBER					AS OksB_CUST_PO_NUMBER
  ,oksB.GRACE_DURATION					AS OksB_GRACE_DURATION
  ,oksB.GRACE_PERIOD					AS OksB_GRACE_PERIOD
  ,oksB.INV_PRINT_FLAG					AS OksB_INV_PRINT_FLAG
 -- Bug# 5531198 hkamdar 21-Sep-2006
 /*
  ,decode(P_Target_Contract_New_YN
         ,'Y'
         ,decode(l_SrcContractPPSetupExists_YN
                ,'Y'
                ,oksB.PRICE_UOM
                ,OKS_SETUP_UTIL_PUB.G_GCD_PRICE_UOM)
         ,oksB.PRICE_UOM  --The value of Price_UOM when copying to an existing Target Contract
			  --is subsequently updated based on whether Partial Period Setup on
			  --Target Contract existed or not
         ) 						AS OksB_PRICE_UOM */
  ,decode(P_Target_Contract_New_YN
         ,'Y'
	 ,decode(l_SrcContractPPSetupExists_YN
          ,'Y'
          ,oksB.PRICE_UOM
          ,decode(l_TrgtHeaderPriceUomExists_YN
	          ,'Y'
		  ,l_Target_Hdr_Price_UOM
		  ,oksB.PRICE_UOM)),oksB.PRICE_UOM)		AS OksB_PRICE_UOM
		  --The value of Price_UOM when copying to an existing Target Contract
		  --is subsequently updated based on whether Partial Period Setup on
		  --Target Contract existed or not
  -- End Bug# 5531198 hkamdar 21-Sep-2006
  ,oksB.TAX_AMOUNT					AS OksB_TAX_AMOUNT
  ,oksB.TAX_INCLUSIVE_YN				AS OksB_TAX_INCLUSIVE_YN
  ,oksB.TAX_STATUS					AS OksB_TAX_STATUS
  ,oksB.TAX_CODE					AS OksB_TAX_CODE
  ,oksB.TAX_EXEMPTION_ID				AS OksB_TAX_EXEMPTION_ID
  ,oksB.IB_TRANS_TYPE					AS OksB_IB_TRANS_TYPE
  ,oksB.IB_TRANS_DATE					AS OksB_IB_TRANS_DATE
  ,oksB.PROD_PRICE					AS OksB_PROD_PRICE
  ,oksB.SERVICE_PRICE					AS OksB_SERVICE_PRICE
  ,oksB.CLVL_LIST_PRICE					AS OksB_CLVL_LIST_PRICE
  ,oksB.CLVL_QUANTITY					AS OksB_CLVL_QUANTITY
  ,oksB.CLVL_EXTENDED_AMT				AS OksB_CLVL_EXTENDED_AMT
  ,oksB.CLVL_UOM_CODE					AS OksB_CLVL_UOM_CODE
  ,oksB.TOPLVL_OPERAND_CODE				AS OksB_TOPLVL_OPERAND_CODE
  ,oksB.TOPLVL_OPERAND_VAL				AS OksB_TOPLVL_OPERAND_VAL
  ,oksB.TOPLVL_QUANTITY					AS OksB_TOPLVL_QUANTITY
  ,oksB.TOPLVL_UOM_CODE					AS OksB_TOPLVL_UOM_CODE
  ,oksB.TOPLVL_ADJ_PRICE				AS OksB_TOPLVL_ADJ_PRICE
  ,oksB.TOPLVL_PRICE_QTY				AS OksB_TOPLVL_PRICE_QTY
  ,oksB.AVERAGING_INTERVAL				AS OksB_AVERAGING_INTERVAL
  ,oksB.SETTLEMENT_INTERVAL				AS OksB_SETTLEMENT_INTERVAL
  ,oksB.MINIMUM_QUANTITY				AS OksB_MINIMUM_QUANTITY
  ,oksB.DEFAULT_QUANTITY				AS OksB_DEFAULT_QUANTITY
  ,oksB.AMCV_FLAG					AS OksB_AMCV_FLAG
  ,oksB.FIXED_QUANTITY					AS OksB_FIXED_QUANTITY
  ,oksB.USAGE_DURATION					AS OksB_USAGE_DURATION
  ,oksB.USAGE_PERIOD					AS OksB_USAGE_PERIOD
  ,oksB.LEVEL_YN					AS OksB_LEVEL_YN
  ,oksB.USAGE_TYPE					AS OksB_USAGE_TYPE
  ,oksB.UOM_QUANTIFIED					AS OksB_UOM_QUANTIFIED
  ,oksB.BASE_READING					AS OksB_BASE_READING
  ,oksB.BILLING_SCHEDULE_TYPE				AS OksB_BILLING_SCHEDULE_TYPE
  ,NULL							AS OksB_FULL_CREDIT
  ,oksB.LOCKED_PRICE_LIST_LINE_ID			AS OksB_LOCKED_PRICE_LIST_LINE_ID
  ,oksB.BREAK_UOM					AS OksB_BREAK_UOM
  ,oksB.PRORATE						AS OksB_PRORATE
  ,oksB.COVERAGE_TYPE					AS OksB_COVERAGE_TYPE
  ,oksB.EXCEPTION_COV_ID				AS OksB_EXCEPTION_COV_ID
  ,oksB.LIMIT_UOM_QUANTIFIED				AS OksB_LIMIT_UOM_QUANTIFIED
  ,oksB.DISCOUNT_AMOUNT					AS OksB_DISCOUNT_AMOUNT
  ,oksB.DISCOUNT_PERCENT				AS OksB_DISCOUNT_PERCENT
  ,oksB.OFFSET_DURATION					AS OksB_OFFSET_DURATION
  ,oksB.OFFSET_PERIOD					AS OksB_OFFSET_PERIOD
  ,oksB.INCIDENT_SEVERITY_ID				AS OksB_INCIDENT_SEVERITY_ID
  ,oksB.PDF_ID						AS OksB_PDF_ID
  ,oksB.WORK_THRU_YN					AS OksB_WORK_THRU_YN
  ,oksB.REACT_ACTIVE_YN					AS OksB_REACT_ACTIVE_YN
  ,oksB.TRANSFER_OPTION					AS OksB_TRANSFER_OPTION
  ,oksB.PROD_UPGRADE_YN					AS OksB_PROD_UPGRADE_YN
  ,oksB.INHERITANCE_TYPE				AS OksB_INHERITANCE_TYPE
  ,oksB.PM_PROGRAM_ID					AS OksB_PM_PROGRAM_ID
  ,oksB.PM_CONF_REQ_YN					AS OksB_PM_CONF_REQ_YN
  ,oksB.PM_SCH_EXISTS_YN				AS OksB_PM_SCH_EXISTS_YN
  ,oksB.ALLOW_BT_DISCOUNT				AS OksB_ALLOW_BT_DISCOUNT
  ,oksB.APPLY_DEFAULT_TIMEZONE				AS OksB_APPLY_DEFAULT_TIMEZONE
  ,oksB.SYNC_DATE_INSTALL				AS OksB_SYNC_DATE_INSTALL
  ,1							AS OksB_OBJECT_VERSION_NUMBER
  ,oksB.SECURITY_GROUP_ID				AS OksB_SECURITY_GROUP_ID
  ,oksB.REQUEST_ID					AS OksB_REQUEST_ID
  ,oksB.ID 						AS OksB_ORIG_SYSTEM_ID1
  ,'COPY' 						AS OksB_ORIG_SYSTEM_REFERENCE1
  ,NULL 						AS OksB_ORIG_SYSTEM_SOURCE_CODE
  ,oksB.TRXN_EXTENSION_ID				AS OksB_TRXN_EXTENSION_ID
  ,oksB.TAX_CLASSIFICATION_CODE				AS OksB_TAX_CLASSIFICATION_CODE
  ,oksB.EXEMPT_CERTIFICATE_NUMBER			AS OksB_EXEMPT_CERTIFICATE_NUMBER
  ,oksB.EXEMPT_REASON_CODE				AS OksB_EXEMPT_REASON_CODE
  ,oksB.COVERAGE_ID					AS OksB_COVERAGE_ID
  ,oksB.STANDARD_COV_YN					AS OksB_STANDARD_COV_YN
  --------------------------------End of OKS_K_LINES_B columns-------------------------
  --------------------------------Start of OKC_K_ITEMS columns-------------------------
  ,okcI.ID                                     		AS OkcI_OldOkcItemID
  ,To_number(rawtohex(sys_guid()), HexFormatStr)  	AS OkcI_NewOkcItemID
  ,okcI.CLE_ID						AS OkcI_CLE_ID
  ,P_To_Chr_ID 						AS OkcI_NewDnzChrID
  ,decode(okcI.CHR_ID,NULL,NULL,P_To_Chr_ID)  		AS OkcI_NewChrID
  ,okcI.OBJECT1_ID1					AS OkcI_OBJECT1_ID1
  ,okcI.OBJECT1_ID2					AS OkcI_OBJECT1_ID2
  ,okcI.JTOT_OBJECT1_CODE				AS OkcI_JTOT_OBJECT1_CODE
  ,okcI.UOM_CODE					AS OkcI_UOM_CODE
  ,okcI.EXCEPTION_YN					AS OkcI_EXCEPTION_YN
  ,okcI.NUMBER_OF_ITEMS					AS OkcI_NUMBER_OF_ITEMS
  ,okcI.PRICED_ITEM_YN					AS OkcI_PRICED_ITEM_YN
  ,1							AS OkcI_OBJECT_VERSION_NUMBER
  ,okcI.SECURITY_GROUP_ID				AS OkcI_SECURITY_GROUP_ID
  ,okcI.UPG_ORIG_SYSTEM_REF				AS OkcI_UPG_ORIG_SYSTEM_REF
  ,okcI.UPG_ORIG_SYSTEM_REF_ID				AS OkcI_UPG_ORIG_SYSTEM_REF_ID
  ,okcI.PROGRAM_APPLICATION_ID				AS Okc_PROGRAM_APPLICATION_ID
  ,okcI.PROGRAM_ID					AS OkcI_PROGRAM_ID
  ,okcI.PROGRAM_UPDATE_DATE				AS OkcI_PROGRAM_UPDATE_DATE
  ,okcI.REQUEST_ID					AS OkcI_REQUEST_ID
  FROM
   OKC_K_LINES_B_TEMP okcBT
  ,OKS_K_LINES_B oksB
  ,OKC_K_ITEMS okcI
  Where okcBT.DNZ_CHR_ID = P_To_Chr_ID
  AND okcBT.ORIG_SYSTEM_ID1 = oksB.CLE_ID(+)
  AND okcBT.ORIG_SYSTEM_ID1 = okcI.CLE_ID(+)
  AND oksB.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcI.DNZ_CHR_ID(+) = P_From_Chr_ID
  AND okcBT.date_cancelled IS NULL
  AND okcBT.date_terminated IS NULL;

 j BINARY_INTEGER := 0;

Begin
  x_return_status := l_return_status;
  IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Begin'
                        ,' P_From_Chr_ID='||P_From_Chr_ID
                         ||',P_To_Chr_ID='||P_To_Chr_ID
			 ||',P_Lines_Tbl.COUNT ='||P_Lines_Tbl.COUNT
                         );
      END IF;
  END IF;
  --Setting Variable to indicate existence of Partial Period Setup in GCD , only checked if copying to a new contract in Component Copy--
   IF (P_Target_Contract_New_YN = 'Y') THEN
    IF (OKS_SETUP_UTIL_PUB.G_GCD_PERIOD_START IS NOT NULL and OKS_SETUP_UTIL_PUB.G_GCD_PERIOD_TYPE IS NOT NULL) then
       l_GCDPPSetupExists_YN := 'Y';
    ELSE
       l_GCDPPSetupExists_YN := 'N';
    END IF;
   END IF;

 If P_Lines_Tbl.COUNT > 0 then
   --Get Contract Number of Target Contract--
  Begin
    OPEN get_new_contract_num_and_Dates(P_To_Chr_ID);
    FETCH get_new_contract_num_and_Dates
    into
     l_new_contract_number
    ,l_Hdr_Start_Date
    ,l_Hdr_End_Date
    ,l_Target_Hdr_Price_UOM;
    CLOSE get_new_contract_num_and_Dates;
    If l_new_contract_number IS NULL then
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
         l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
         RAISE G_EXCEPTION_HALT_VALIDATION;
    End If;

    -- Bug# 5531198 hkamdar 21-Sep-2006
    IF l_Target_Hdr_Price_UOM IS NOT NULL THEN
       l_TrgtHeaderPriceUomExists_YN := 'Y';
    ELSE
       l_TrgtHeaderPriceUomExists_YN := 'N';
    END IF;
    -- End Bug# 5531198 hkamdar 21-Sep-2006
  End;


 -------------------------------------------
  --Get default status for lines------------
  Begin
    OPEN get_default_status;
    FETCH get_default_status into l_Default_Sts_Code;
    CLOSE get_default_status;
    If l_Default_Sts_Code IS NULL then
       OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
          RAISE G_EXCEPTION_HALT_VALIDATION;
    End If;
  End;
  ------------------------------------------
 -----Convert PLSQL table of records P_Lines_Tbl into PLSQL Record of tables------
  If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
              FND_LOG.string(FND_LOG.level_statement
		                 ,l_module_name
				       ,'Count of rows in P_Lines_Tbl='||P_Lines_Tbl.COUNT);
  End If;

  FOR i in P_Lines_Tbl.FIRST .. P_Lines_Tbl.LAST LOOP
   Begin
    ApiLinesRecTab.IDTab(j) := P_Lines_Tbl(i).id;
    ApiLinesRecTab.ToKTab(j) := P_Lines_Tbl(i).to_k;
    ApiLinesRecTab.ToLineTab(j) := P_Lines_Tbl(i).to_line;
    ApiLinesRecTab.LineExistsYNTab(j) := P_Lines_Tbl(i).line_exists_yn;
    ApiLinesRecTab.LineExpYNTab(j) := P_Lines_Tbl(i).line_exp_yn;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
     FND_LOG.string(FND_LOG.level_statement
                 ,l_module_name
                 ,'ID='||P_Lines_Tbl(i).id
              ||', TO_K='||P_Lines_Tbl(i).to_k
              ||', TO_LINE='||P_Lines_Tbl(i).to_line
              ||', LINE_EXISTS_YN='||P_Lines_Tbl(i).line_exists_yn
	      ||', LINE_EXP_YN='||P_Lines_Tbl(i).line_exp_yn
	      ||', LSE_ID='||P_Lines_Tbl(i).lse_id
                  );
    End If;
    j := j+1;

      EXCEPTION
         WHEN OTHERS THEN
              NULL;
	      If (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
		  FND_LOG.string(FND_LOG.level_unexpected
		                ,l_module_name
					 ,SQLERRM);
	      End If;
   End;
  End LOOP;

 End If; -- End of check for P_Lines_Tbl.COUNT to be > 0
 --------------------------------------------------------------------------------------

------------------------Start of BULK INSERT INTO OKC_K_LINES_B_TEMP-----------------
 IF (P_Lines_Tbl.COUNT > 0) then ---++++++++++++Start of Check of P_Lines_Tbl.COUNT for
			 	 ---++++++++++++Bulk insert into OKC_K_LINES_B_TEMP

 ------Loop through PLSQL Record of tables of the lines to do bulk inserts into--------
 ------OKC_K_LINES_B_TEMP global temporary table----------------------------------------
 -- a) Bulk insert for all lines in ApiLinesRecTab where TO_LINE is NULL and LINE_EXP_YN = 'Y'
 --    (Indicates that line being copied is a top line and that this line and all its sublines
 --	need to be queried explicitly from the database and copied)
 --

 Begin

 FORALL i in ApiLinesRecTab.IDTab.FIRST .. ApiLinesRecTab.IDTab.LAST
 INSERT INTO OKC_K_LINES_B_TEMP(
  ID
 ,LINE_NUMBER
 ,CHR_ID
 ,CLE_ID
 ,CLE_ID_RENEWED
 ,DNZ_CHR_ID
 ,DISPLAY_SEQUENCE
 ,STS_CODE
 ,TRN_CODE
 ,LSE_ID
 ,EXCEPTION_YN
 ,OBJECT_VERSION_NUMBER
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,HIDDEN_IND
 ,PRICE_NEGOTIATED
 ,PRICE_LEVEL_IND
 ,PRICE_UNIT
 ,PRICE_UNIT_PERCENT
 ,INVOICE_LINE_LEVEL_IND
 ,DPAS_RATING
 ,TEMPLATE_USED
 ,PRICE_TYPE
 ,CURRENCY_CODE
 ,LAST_UPDATE_LOGIN
 ,DATE_TERMINATED
 ,START_DATE
 ,END_DATE
 ,ATTRIBUTE_CATEGORY
 ,ATTRIBUTE1
 ,ATTRIBUTE2
 ,ATTRIBUTE3
 ,ATTRIBUTE4
 ,ATTRIBUTE5
 ,ATTRIBUTE6
 ,ATTRIBUTE7
 ,ATTRIBUTE8
 ,ATTRIBUTE9
 ,ATTRIBUTE10
 ,ATTRIBUTE11
 ,ATTRIBUTE12
 ,ATTRIBUTE13
 ,ATTRIBUTE14
 ,ATTRIBUTE15
 ,SECURITY_GROUP_ID
 ,CLE_ID_RENEWED_TO
 ,PRICE_NEGOTIATED_RENEWED
 ,CURRENCY_CODE_RENEWED
 ,UPG_ORIG_SYSTEM_REF
 ,UPG_ORIG_SYSTEM_REF_ID
 ,DATE_RENEWED
 ,ORIG_SYSTEM_SOURCE_CODE
 ,ORIG_SYSTEM_ID1
 ,ORIG_SYSTEM_REFERENCE1
 ,PROGRAM_APPLICATION_ID
 ,PROGRAM_ID
 ,PROGRAM_UPDATE_DATE
 ,REQUEST_ID
 ,PRICE_LIST_ID
 ,PRICE_LIST_LINE_ID
 ,LINE_LIST_PRICE
 ,ITEM_TO_PRICE_YN
 ,PRICING_DATE
 ,PRICE_BASIS_YN
 ,CONFIG_HEADER_ID
 ,CONFIG_REVISION_NUMBER
 ,CONFIG_COMPLETE_YN
 ,CONFIG_VALID_YN
 ,CONFIG_TOP_MODEL_LINE_ID
 ,CONFIG_ITEM_TYPE
 ,CONFIG_ITEM_ID
 ,SERVICE_ITEM_YN
 ,PH_PRICING_TYPE
 ,PH_PRICE_BREAK_BASIS
 ,PH_MIN_QTY
 ,PH_MIN_AMT
 ,PH_QP_REFERENCE_ID
 ,PH_VALUE
 ,PH_ENFORCE_PRICE_LIST_YN
 ,PH_ADJUSTMENT
 ,PH_INTEGRATED_WITH_QP
 ,CUST_ACCT_ID
 ,BILL_TO_SITE_USE_ID
 ,INV_RULE_ID
 ,LINE_RENEWAL_TYPE_CODE
 ,SHIP_TO_SITE_USE_ID
 ,PAYMENT_TERM_ID
 ,DATE_CANCELLED
 ,TERM_CANCEL_SOURCE
 ,ANNUALIZED_FACTOR
 ,PAYMENT_INSTRUCTION_TYPE -- hkamdar 29-Mar-2006 Bug # 4722452
 ,CANCELLED_AMOUNT
 ,LINE_EXISTS_YN
 ,DATES_CHANGED_YN
 ,GEN_SUBLINE_BSCH_YN
 )
 SELECT
  To_number(rawtohex(sys_guid()), HexFormatStr) AS okcB_NewID --*
 ,okcB.LINE_NUMBER AS okcB_LINE_NUMBER
 ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID) AS okcB_NewChrID --*
 ,okcB.CLE_ID AS okcB_CLE_ID
 ,okcB.CLE_ID_RENEWED AS okcB_CLE_ID_RENEWED
 ,P_To_Chr_ID AS okcB_NewDnzChrID --*
 ,okcB.DISPLAY_SEQUENCE AS okcB_DISPLAY_SEQUENCE
 ,okcB.STS_CODE AS okcB_STS_CODE
 ,okcB.TRN_CODE AS okcB_TRN_CODE
 ,okcB.LSE_ID AS okcB_LSE_ID
 ,okcB.EXCEPTION_YN AS okcB_EXCEPTION_YN
 ,okcB.OBJECT_VERSION_NUMBER AS okcB_OBJECT_VERSION_NUMBER
 ,okcB.CREATED_BY AS okcB_CREATED_BY
 ,okcB.CREATION_DATE AS okcB_CREATION_DATE
 ,okcB.LAST_UPDATED_BY AS okcB_LAST_UPDATED_BY
 ,okcB.LAST_UPDATE_DATE AS okcB_LAST_UPDATE_DATE
 ,okcB.HIDDEN_IND AS okcB_HIDDEN_IND
 ,okcB.PRICE_NEGOTIATED AS okcB_PRICE_NEGOTIATED
 ,okcB.PRICE_LEVEL_IND AS okcB_PRICE_LEVEL_IND
 ,okcB.PRICE_UNIT AS okcB_PRICE_UNIT
 ,okcB.PRICE_UNIT_PERCENT AS okcB_PRICE_UNIT_PERCENT
 ,okcB.INVOICE_LINE_LEVEL_IND AS okcB_INVOICE_LINE_LEVEL_IND
 ,okcB.DPAS_RATING AS okcB_DPAS_RATING
 ,okcB.TEMPLATE_USED AS okcB_TEMPLATE_USED
 ,okcB.PRICE_TYPE AS okcB_PRICE_TYPE
 ,okcB.CURRENCY_CODE AS okcB_CURRENCY_CODE
 ,okcB.LAST_UPDATE_LOGIN AS okcB_LAST_UPDATE_LOGIN
 ,okcB.DATE_TERMINATED AS okcB_DATE_TERMINATED
 ,(CASE
    WHEN (nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcB.START_DATE,sysdate)
    ELSE l_Hdr_Start_Date
    END
   ) AS okcB_START_DATE
 ,(CASE
    WHEN (nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcB.END_DATE,sysdate)
    ELSE l_Hdr_End_Date
    END
   ) AS okcB_END_DATE
 ,okcB.ATTRIBUTE_CATEGORY AS okcB_ATTRIBUTE_CATEGORY
 ,okcB.ATTRIBUTE1 AS okcB_ATTRIBUTE1
 ,okcB.ATTRIBUTE2 AS okcB_ATTRIBUTE2
 ,okcB.ATTRIBUTE3 AS okcB_ATTRIBUTE3
 ,okcB.ATTRIBUTE4 AS okcB_ATTRIBUTE4
 ,okcB.ATTRIBUTE5 AS okcB_ATTRIBUTE5
 ,okcB.ATTRIBUTE6 AS okcB_ATTRIBUTE6
 ,okcB.ATTRIBUTE7 AS okcB_ATTRIBUTE7
 ,okcB.ATTRIBUTE8 AS okcB_ATTRIBUTE8
 ,okcB.ATTRIBUTE9 AS okcB_ATTRIBUTE9
 ,okcB.ATTRIBUTE10 AS okcB_ATTRIBUTE10
 ,okcB.ATTRIBUTE11 AS okcB_ATTRIBUTE11
 ,okcB.ATTRIBUTE12 AS okcB_ATTRIBUTE12
 ,okcB.ATTRIBUTE13 AS okcB_ATTRIBUTE13
 ,okcB.ATTRIBUTE14 AS okcB_ATTRIBUTE14
 ,okcB.ATTRIBUTE15 AS okcB_ATTRIBUTE15
 ,okcB.SECURITY_GROUP_ID AS okcB_SECURITY_GROUP_ID
 ,okcB.CLE_ID_RENEWED_TO AS okcB_CLE_ID_RENEWED_TO
 ,okcB.PRICE_NEGOTIATED_RENEWED AS okcB_PRICE_NEGOTIATED_RENEWED
 ,okcB.CURRENCY_CODE_RENEWED AS okcB_CURRENCY_CODE_RENEWED
 ,okcB.UPG_ORIG_SYSTEM_REF AS okcB_UPG_ORIG_SYSTEM_REF
 ,okcB.UPG_ORIG_SYSTEM_REF_ID AS okcB_UPG_ORIG_SYSTEM_REF_ID
 ,okcB.DATE_RENEWED AS okcB_DATE_RENEWED
 ,okcB.ORIG_SYSTEM_SOURCE_CODE AS okcB_ORIG_SYSTEM_SOURCE_CODE --*
 ,okcB.ID AS okcB_ORIG_SYSTEM_ID1 --*
 ,okcB.ORIG_SYSTEM_REFERENCE1 AS okcB_ORIG_SYSTEM_REFERENCE1 --*
 ,okcB.PROGRAM_APPLICATION_ID AS okcB_PROGRAM_APPLICATION_ID
 ,okcB.PROGRAM_ID AS okcB_PROGRAM_ID
 ,okcB.PROGRAM_UPDATE_DATE AS okcB_PROGRAM_UPDATE_DATE
 ,okcB.REQUEST_ID AS okcB_REQUEST_ID
 ,okcB.PRICE_LIST_ID AS okcB_PRICE_LIST_ID
 ,okcB.PRICE_LIST_LINE_ID AS okcB_PRICE_LIST_LINE_ID
 ,okcB.LINE_LIST_PRICE AS okcB_LINE_LIST_PRICE
 ,okcB.ITEM_TO_PRICE_YN AS okcB_ITEM_TO_PRICE_YN
 ,okcB.PRICING_DATE AS okcB_PRICING_DATE
 ,okcB.PRICE_BASIS_YN AS okcB_PRICE_BASIS_YN
 ,okcB.CONFIG_HEADER_ID AS okcB_CONFIG_HEADER_ID
 ,okcB.CONFIG_REVISION_NUMBER AS okcB_CONFIG_REVISION_NUMBER
 ,okcB.CONFIG_COMPLETE_YN AS okcB_CONFIG_COMPLETE_YN
 ,okcB.CONFIG_VALID_YN AS okcB_CONFIG_VALID_YN
 ,okcB.CONFIG_TOP_MODEL_LINE_ID AS okcB_CONFIG_TOP_MODEL_LINE_ID
 ,okcB.CONFIG_ITEM_TYPE AS okcB_CONFIG_ITEM_TYPE
 ,okcB.CONFIG_ITEM_ID AS okcB_CONFIG_ITEM_ID
 ,okcB.SERVICE_ITEM_YN AS okcB_SERVICE_ITEM_YN
 ,okcB.PH_PRICING_TYPE AS okcB_PH_PRICING_TYPE
 ,okcB.PH_PRICE_BREAK_BASIS AS okcB_PH_PRICE_BREAK_BASIS
 ,okcB.PH_MIN_QTY AS okcB_PH_MIN_QTY
 ,okcB.PH_MIN_AMT AS okcB_PH_MIN_AMT
 ,okcB.PH_QP_REFERENCE_ID AS okcB_PH_QP_REFERENCE_ID
 ,okcB.PH_VALUE AS okcB_PH_VALUE
 ,okcB.PH_ENFORCE_PRICE_LIST_YN AS okcB_PH_ENFORCE_PRICE_LIST_YN
 ,okcB.PH_ADJUSTMENT AS okcB_PH_ADJUSTMENT
 ,okcB.PH_INTEGRATED_WITH_QP AS okcB_PH_INTEGRATED_WITH_QP
 ,okcB.CUST_ACCT_ID AS okcB_CUST_ACCT_ID
 ,okcB.BILL_TO_SITE_USE_ID AS okcB_BILL_TO_SITE_USE_ID
 ,okcB.INV_RULE_ID AS okcB_INV_RULE_ID
 ,okcB.LINE_RENEWAL_TYPE_CODE AS okcB_LINE_RENEWAL_TYPE_CODE
 ,okcB.SHIP_TO_SITE_USE_ID AS okcB_SHIP_TO_SITE_USE_ID
 ,okcB.PAYMENT_TERM_ID AS okcB_PAYMENT_TERM_ID
 ,okcB.DATE_CANCELLED AS okcB_DATE_CANCELLED
 ,okcB.TERM_CANCEL_SOURCE AS okcB_TERM_CANCEL_SOURCE
 ,okcB.ANNUALIZED_FACTOR AS okcB_ANNUALIZED_FACTOR
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
 ,NULL AS okcB_PAYMENT_INSTRUCTION_TYPE
 ,okcB.CANCELLED_AMOUNT AS okcB_CANCELLED_AMOUNT
 ,nvl(ApiLinesRecTab.LineExistsYNTab(i),'N')
 ,(CASE
    WHEN (
          nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date
         )
    THEN 'N'
    ELSE 'Y'
    END
   ) AS okcB_DATES_CHANGED_YN
 ,'N' AS okcB_GEN_SUBLINE_BSCH_YN
 FROM
 OKC_K_LINES_B okcB
 WHERE ApiLinesRecTab.ToLineTab(i) IS NULL
 AND ApiLinesRecTab.LineExpYNTab(i) = 'Y'
 AND okcB.DNZ_CHR_ID = P_From_Chr_ID
 CONNECT BY PRIOR okcB.ID = okcB.CLE_ID
 START WITH okcB.ID = ApiLinesRecTab.IDTab(i);

   EXCEPTION
    WHEN OTHERS THEN
              If (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
                  FND_LOG.string(FND_LOG.level_unexpected
                                ,l_module_name
                                ,'During Bulk Insert into OKC_K_LINES_B_TEMP :  a) :'||SQLERRM);
              End If;

     OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
     l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     RAISE G_EXCEPTION_HALT_VALIDATION;

 End;

 -- b) Bulk insert for all lines in ApiLinesRecTab where TO_LINE is NULL and LINE_EXP_YN = 'N'
 --    (Indicates that line being copied is a top line and that this line and only all its "Coverage"
 --    sublines  need to be queried explicitly from the database and copied. "Coverage" sublines
 --    are never shown on the UI so they always have to be queried from the DB and copied)
 --

 Begin
 FORALL i in ApiLinesRecTab.IDTab.FIRST .. ApiLinesRecTab.IDTab.LAST
 INSERT INTO OKC_K_LINES_B_TEMP(
  ID
 ,LINE_NUMBER
 ,CHR_ID
 ,CLE_ID
 ,CLE_ID_RENEWED
 ,DNZ_CHR_ID
 ,DISPLAY_SEQUENCE
 ,STS_CODE
 ,TRN_CODE
 ,LSE_ID
 ,EXCEPTION_YN
 ,OBJECT_VERSION_NUMBER
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,HIDDEN_IND
 ,PRICE_NEGOTIATED
 ,PRICE_LEVEL_IND
 ,PRICE_UNIT
 ,PRICE_UNIT_PERCENT
 ,INVOICE_LINE_LEVEL_IND
 ,DPAS_RATING
 ,TEMPLATE_USED
 ,PRICE_TYPE
 ,CURRENCY_CODE
 ,LAST_UPDATE_LOGIN
 ,DATE_TERMINATED
 ,START_DATE
 ,END_DATE
 ,ATTRIBUTE_CATEGORY
 ,ATTRIBUTE1
 ,ATTRIBUTE2
 ,ATTRIBUTE3
 ,ATTRIBUTE4
 ,ATTRIBUTE5
 ,ATTRIBUTE6
 ,ATTRIBUTE7
 ,ATTRIBUTE8
 ,ATTRIBUTE9
 ,ATTRIBUTE10
 ,ATTRIBUTE11
 ,ATTRIBUTE12
 ,ATTRIBUTE13
 ,ATTRIBUTE14
 ,ATTRIBUTE15
 ,SECURITY_GROUP_ID
 ,CLE_ID_RENEWED_TO
 ,PRICE_NEGOTIATED_RENEWED
 ,CURRENCY_CODE_RENEWED
 ,UPG_ORIG_SYSTEM_REF
 ,UPG_ORIG_SYSTEM_REF_ID
 ,DATE_RENEWED
 ,ORIG_SYSTEM_SOURCE_CODE
 ,ORIG_SYSTEM_ID1
 ,ORIG_SYSTEM_REFERENCE1
 ,PROGRAM_APPLICATION_ID
 ,PROGRAM_ID
 ,PROGRAM_UPDATE_DATE
 ,REQUEST_ID
 ,PRICE_LIST_ID
 ,PRICE_LIST_LINE_ID
 ,LINE_LIST_PRICE
 ,ITEM_TO_PRICE_YN
 ,PRICING_DATE
 ,PRICE_BASIS_YN
 ,CONFIG_HEADER_ID
 ,CONFIG_REVISION_NUMBER
 ,CONFIG_COMPLETE_YN
 ,CONFIG_VALID_YN
 ,CONFIG_TOP_MODEL_LINE_ID
 ,CONFIG_ITEM_TYPE
 ,CONFIG_ITEM_ID
 ,SERVICE_ITEM_YN
 ,PH_PRICING_TYPE
 ,PH_PRICE_BREAK_BASIS
 ,PH_MIN_QTY
 ,PH_MIN_AMT
 ,PH_QP_REFERENCE_ID
 ,PH_VALUE
 ,PH_ENFORCE_PRICE_LIST_YN
 ,PH_ADJUSTMENT
 ,PH_INTEGRATED_WITH_QP
 ,CUST_ACCT_ID
 ,BILL_TO_SITE_USE_ID
 ,INV_RULE_ID
 ,LINE_RENEWAL_TYPE_CODE
 ,SHIP_TO_SITE_USE_ID
 ,PAYMENT_TERM_ID
 ,DATE_CANCELLED
 ,TERM_CANCEL_SOURCE
 ,ANNUALIZED_FACTOR
 ,PAYMENT_INSTRUCTION_TYPE
 ,CANCELLED_AMOUNT
 ,LINE_EXISTS_YN
 ,DATES_CHANGED_YN
 ,GEN_SUBLINE_BSCH_YN
 )
 SELECT
  To_number(rawtohex(sys_guid()), HexFormatStr) AS okcB_NewID --*
 ,okcB.LINE_NUMBER AS okcB_LINE_NUMBER
 ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID) AS okcB_NewChrID --*
 ,okcB.CLE_ID AS okcB_CLE_ID
 ,okcB.CLE_ID_RENEWED AS okcB_CLE_ID_RENEWED
 ,P_To_Chr_ID AS okcB_NewDnzChrID --*
 ,okcB.DISPLAY_SEQUENCE AS okcB_DISPLAY_SEQUENCE
 ,okcB.STS_CODE AS okcB_STS_CODE
 ,okcB.TRN_CODE AS okcB_TRN_CODE
 ,okcB.LSE_ID AS okcB_LSE_ID
 ,okcB.EXCEPTION_YN AS okcB_EXCEPTION_YN
 ,okcB.OBJECT_VERSION_NUMBER AS okcB_OBJECT_VERSION_NUMBER
 ,okcB.CREATED_BY AS okcB_CREATED_BY
 ,okcB.CREATION_DATE AS okcB_CREATION_DATE
 ,okcB.LAST_UPDATED_BY AS okcB_LAST_UPDATED_BY
 ,okcB.LAST_UPDATE_DATE AS okcB_LAST_UPDATE_DATE
 ,okcB.HIDDEN_IND AS okcB_HIDDEN_IND
 ,okcB.PRICE_NEGOTIATED AS okcB_PRICE_NEGOTIATED
 ,okcB.PRICE_LEVEL_IND AS okcB_PRICE_LEVEL_IND
 ,okcB.PRICE_UNIT AS okcB_PRICE_UNIT
 ,okcB.PRICE_UNIT_PERCENT AS okcB_PRICE_UNIT_PERCENT
 ,okcB.INVOICE_LINE_LEVEL_IND AS okcB_INVOICE_LINE_LEVEL_IND
 ,okcB.DPAS_RATING AS okcB_DPAS_RATING
 ,okcB.TEMPLATE_USED AS okcB_TEMPLATE_USED
 ,okcB.PRICE_TYPE AS okcB_PRICE_TYPE
 ,okcB.CURRENCY_CODE AS okcB_CURRENCY_CODE
 ,okcB.LAST_UPDATE_LOGIN AS okcB_LAST_UPDATE_LOGIN
 ,okcB.DATE_TERMINATED AS okcB_DATE_TERMINATED
 ,(CASE
    WHEN (nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcB.START_DATE,sysdate)
    ELSE l_Hdr_Start_Date
    END
   ) AS okcB_START_DATE
,(CASE
    WHEN (nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcB.END_DATE,sysdate)
    ELSE l_Hdr_End_Date
    END
   ) AS okcB_END_DATE
 ,okcB.ATTRIBUTE_CATEGORY AS okcB_ATTRIBUTE_CATEGORY
 ,okcB.ATTRIBUTE1 AS okcB_ATTRIBUTE1
 ,okcB.ATTRIBUTE2 AS okcB_ATTRIBUTE2
 ,okcB.ATTRIBUTE3 AS okcB_ATTRIBUTE3
 ,okcB.ATTRIBUTE4 AS okcB_ATTRIBUTE4
 ,okcB.ATTRIBUTE5 AS okcB_ATTRIBUTE5
 ,okcB.ATTRIBUTE6 AS okcB_ATTRIBUTE6
 ,okcB.ATTRIBUTE7 AS okcB_ATTRIBUTE7
 ,okcB.ATTRIBUTE8 AS okcB_ATTRIBUTE8
 ,okcB.ATTRIBUTE9 AS okcB_ATTRIBUTE9
 ,okcB.ATTRIBUTE10 AS okcB_ATTRIBUTE10
 ,okcB.ATTRIBUTE11 AS okcB_ATTRIBUTE11
 ,okcB.ATTRIBUTE12 AS okcB_ATTRIBUTE12
 ,okcB.ATTRIBUTE13 AS okcB_ATTRIBUTE13
 ,okcB.ATTRIBUTE14 AS okcB_ATTRIBUTE14
 ,okcB.ATTRIBUTE15 AS okcB_ATTRIBUTE15
 ,okcB.SECURITY_GROUP_ID AS okcB_SECURITY_GROUP_ID
 ,okcB.CLE_ID_RENEWED_TO AS okcB_CLE_ID_RENEWED_TO
 ,okcB.PRICE_NEGOTIATED_RENEWED AS okcB_PRICE_NEGOTIATED_RENEWED
 ,okcB.CURRENCY_CODE_RENEWED AS okcB_CURRENCY_CODE_RENEWED
 ,okcB.UPG_ORIG_SYSTEM_REF AS okcB_UPG_ORIG_SYSTEM_REF
 ,okcB.UPG_ORIG_SYSTEM_REF_ID AS okcB_UPG_ORIG_SYSTEM_REF_ID
 ,okcB.DATE_RENEWED AS okcB_DATE_RENEWED
 ,okcB.ORIG_SYSTEM_SOURCE_CODE AS okcB_ORIG_SYSTEM_SOURCE_CODE
 ,okcB.ID AS okcB_ORIG_SYSTEM_ID1 --*
 ,okcB.ORIG_SYSTEM_REFERENCE1 AS okcB_ORIG_SYSTEM_REFERENCE1
 ,okcB.PROGRAM_APPLICATION_ID AS okcB_PROGRAM_APPLICATION_ID
 ,okcB.PROGRAM_ID AS okcB_PROGRAM_ID
 ,okcB.PROGRAM_UPDATE_DATE AS okcB_PROGRAM_UPDATE_DATE
 ,okcB.REQUEST_ID AS okcB_REQUEST_ID
 ,okcB.PRICE_LIST_ID AS okcB_PRICE_LIST_ID
 ,okcB.PRICE_LIST_LINE_ID AS okcB_PRICE_LIST_LINE_ID
 ,okcB.LINE_LIST_PRICE AS okcB_LINE_LIST_PRICE
 ,okcB.ITEM_TO_PRICE_YN AS okcB_ITEM_TO_PRICE_YN
 ,okcB.PRICING_DATE AS okcB_PRICING_DATE
 ,okcB.PRICE_BASIS_YN AS okcB_PRICE_BASIS_YN
 ,okcB.CONFIG_HEADER_ID AS okcB_CONFIG_HEADER_ID
 ,okcB.CONFIG_REVISION_NUMBER AS okcB_CONFIG_REVISION_NUMBER
 ,okcB.CONFIG_COMPLETE_YN AS okcB_CONFIG_COMPLETE_YN
 ,okcB.CONFIG_VALID_YN AS okcB_CONFIG_VALID_YN
 ,okcB.CONFIG_TOP_MODEL_LINE_ID AS okcB_CONFIG_TOP_MODEL_LINE_ID
 ,okcB.CONFIG_ITEM_TYPE AS okcB_CONFIG_ITEM_TYPE
 ,okcB.CONFIG_ITEM_ID AS okcB_CONFIG_ITEM_ID
 ,okcB.SERVICE_ITEM_YN AS okcB_SERVICE_ITEM_YN
 ,okcB.PH_PRICING_TYPE AS okcB_PH_PRICING_TYPE
 ,okcB.PH_PRICE_BREAK_BASIS AS okcB_PH_PRICE_BREAK_BASIS
 ,okcB.PH_MIN_QTY AS okcB_PH_MIN_QTY
 ,okcB.PH_MIN_AMT AS okcB_PH_MIN_AMT
 ,okcB.PH_QP_REFERENCE_ID AS okcB_PH_QP_REFERENCE_ID
 ,okcB.PH_VALUE AS okcB_PH_VALUE
 ,okcB.PH_ENFORCE_PRICE_LIST_YN AS okcB_PH_ENFORCE_PRICE_LIST_YN
 ,okcB.PH_ADJUSTMENT AS okcB_PH_ADJUSTMENT
 ,okcB.PH_INTEGRATED_WITH_QP AS okcB_PH_INTEGRATED_WITH_QP
 ,okcB.CUST_ACCT_ID AS okcB_CUST_ACCT_ID
 ,okcB.BILL_TO_SITE_USE_ID AS okcB_BILL_TO_SITE_USE_ID
 ,okcB.INV_RULE_ID AS okcB_INV_RULE_ID
 ,okcB.LINE_RENEWAL_TYPE_CODE AS okcB_LINE_RENEWAL_TYPE_CODE
 ,okcB.SHIP_TO_SITE_USE_ID AS okcB_SHIP_TO_SITE_USE_ID
 ,okcB.PAYMENT_TERM_ID AS okcB_PAYMENT_TERM_ID
 ,okcB.DATE_CANCELLED AS okcB_DATE_CANCELLED
 ,okcB.TERM_CANCEL_SOURCE AS okcB_TERM_CANCEL_SOURCE
 ,okcB.ANNUALIZED_FACTOR AS okcB_ANNUALIZED_FACTOR
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
 ,NULL AS okcB_PAYMENT_INSTRUCTION_TYPE
 ,okcB.CANCELLED_AMOUNT AS okcB_CANCELLED_AMOUNT
 ,nvl(ApiLinesRecTab.LineExistsYNTab(i),'N')
 ,(CASE
    WHEN (
          nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date
         )
    THEN 'N'
    ELSE 'Y'
    END
   ) AS okcB_DATES_CHANGED_YN
 ,'N' AS okcB_GEN_SUBLINE_BSCH_YN
 FROM
 OKC_K_LINES_B okcB
 WHERE okcB.ID = ApiLinesRecTab.IDTab(i)
 AND ApiLinesRecTab.ToLineTab(i) IS NULL
 AND ApiLinesRecTab.LineExpYNTab(i) = 'N'
 AND okcB.DNZ_CHR_ID = P_From_Chr_ID
 UNION
 SELECT
  To_number(rawtohex(sys_guid()), HexFormatStr) AS okcCL_NewID --*
 ,okcCL.LINE_NUMBER AS okcCL_LINE_NUMBER
 ,decode(okcCL.CHR_ID,NULL,NULL,P_To_Chr_ID) AS okcCL_NewChrID --*
 ,okcCL.CLE_ID AS okcCL_CLE_ID
 ,okcCL.CLE_ID_RENEWED AS okcCL_CLE_ID_RENEWED
 ,P_To_Chr_ID AS okcCL_NewDnzChrID --*
 ,okcCL.DISPLAY_SEQUENCE AS okcCL_DISPLAY_SEQUENCE
 ,okcCL.STS_CODE AS okcCL_STS_CODE
 ,okcCL.TRN_CODE AS okcCL_TRN_CODE
 ,okcCL.LSE_ID AS okcCL_LSE_ID
 ,okcCL.EXCEPTION_YN AS okcCL_EXCEPTION_YN
 ,okcCL.OBJECT_VERSION_NUMBER AS okcCL_OBJECT_VERSION_NUMBER
 ,okcCL.CREATED_BY AS okcCL_CREATED_BY
 ,okcCL.CREATION_DATE AS okcCL_CREATION_DATE
 ,okcCL.LAST_UPDATED_BY AS okcCL_LAST_UPDATED_BY
 ,okcCL.LAST_UPDATE_DATE AS okcCL_LAST_UPDATE_DATE
 ,okcCL.HIDDEN_IND AS okcCL_HIDDEN_IND
 ,okcCL.PRICE_NEGOTIATED AS okcCL_PRICE_NEGOTIATED
 ,okcCL.PRICE_LEVEL_IND AS okcCL_PRICE_LEVEL_IND
 ,okcCL.PRICE_UNIT AS okcCL_PRICE_UNIT
 ,okcCL.PRICE_UNIT_PERCENT AS okcCL_PRICE_UNIT_PERCENT
 ,okcCL.INVOICE_LINE_LEVEL_IND AS okcCL_INVOICE_LINE_LEVEL_IND
 ,okcCL.DPAS_RATING AS okcCL_DPAS_RATING
 ,okcCL.TEMPLATE_USED AS okcCL_TEMPLATE_USED
 ,okcCL.PRICE_TYPE AS okcCL_PRICE_TYPE
 ,okcCL.CURRENCY_CODE AS okcCL_CURRENCY_CODE
 ,okcCL.LAST_UPDATE_LOGIN AS okcCL_LAST_UPDATE_LOGIN
 ,okcCL.DATE_TERMINATED AS okcCL_DATE_TERMINATED
 ,(CASE
    WHEN (nvl(okcCL.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcCL.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcCL.START_DATE,sysdate)
    ELSE l_Hdr_Start_Date
    END
   ) AS okcCL_START_DATE
,(CASE
    WHEN (nvl(okcCL.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcCL.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcCL.END_DATE,sysdate)
    ELSE l_Hdr_End_Date
    END
   ) AS okcCL_END_DATE
 ,okcCL.ATTRIBUTE_CATEGORY AS okcCL_ATTRIBUTE_CATEGORY
 ,okcCL.ATTRIBUTE1 AS okcCL_ATTRIBUTE1
 ,okcCL.ATTRIBUTE2 AS okcCL_ATTRIBUTE2
 ,okcCL.ATTRIBUTE3 AS okcCL_ATTRIBUTE3
 ,okcCL.ATTRIBUTE4 AS okcCL_ATTRIBUTE4
 ,okcCL.ATTRIBUTE5 AS okcCL_ATTRIBUTE5
 ,okcCL.ATTRIBUTE6 AS okcCL_ATTRIBUTE6
 ,okcCL.ATTRIBUTE7 AS okcCL_ATTRIBUTE7
 ,okcCL.ATTRIBUTE8 AS okcCL_ATTRIBUTE8
 ,okcCL.ATTRIBUTE9 AS okcCL_ATTRIBUTE9
 ,okcCL.ATTRIBUTE10 AS okcCL_ATTRIBUTE10
 ,okcCL.ATTRIBUTE11 AS okcCL_ATTRIBUTE11
 ,okcCL.ATTRIBUTE12 AS okcCL_ATTRIBUTE12
 ,okcCL.ATTRIBUTE13 AS okcCL_ATTRIBUTE13
 ,okcCL.ATTRIBUTE14 AS okcCL_ATTRIBUTE14
 ,okcCL.ATTRIBUTE15 AS okcCL_ATTRIBUTE15
 ,okcCL.SECURITY_GROUP_ID AS okcCL_SECURITY_GROUP_ID
 ,okcCL.CLE_ID_RENEWED_TO AS okcCL_CLE_ID_RENEWED_TO
 ,okcCL.PRICE_NEGOTIATED_RENEWED AS okcCL_PRICE_NEGOTIATED_RENEWED
 ,okcCL.CURRENCY_CODE_RENEWED AS okcCL_CURRENCY_CODE_RENEWED
 ,okcCL.UPG_ORIG_SYSTEM_REF AS okcCL_UPG_ORIG_SYSTEM_REF
 ,okcCL.UPG_ORIG_SYSTEM_REF_ID AS okcCL_UPG_ORIG_SYSTEM_REF_ID
 ,okcCL.DATE_RENEWED AS okcCL_DATE_RENEWED
 ,okcCL.ORIG_SYSTEM_SOURCE_CODE AS okcCL_ORIG_SYSTEM_SOURCE_CODE
 ,okcCL.ID AS okcCL_ORIG_SYSTEM_ID1 --*
 ,okcCL.ORIG_SYSTEM_REFERENCE1 AS okcCL_ORIG_SYSTEM_REFERENCE1
 ,okcCL.PROGRAM_APPLICATION_ID AS okcCL_PROGRAM_APPLICATION_ID
 ,okcCL.PROGRAM_ID AS okcCL_PROGRAM_ID
 ,okcCL.PROGRAM_UPDATE_DATE AS okcCL_PROGRAM_UPDATE_DATE
 ,okcCL.REQUEST_ID AS okcCL_REQUEST_ID
 ,okcCL.PRICE_LIST_ID AS okcCL_PRICE_LIST_ID
 ,okcCL.PRICE_LIST_LINE_ID AS okcCL_PRICE_LIST_LINE_ID
 ,okcCL.LINE_LIST_PRICE AS okcCL_LINE_LIST_PRICE
 ,okcCL.ITEM_TO_PRICE_YN AS okcCL_ITEM_TO_PRICE_YN
 ,okcCL.PRICING_DATE AS okcCL_PRICING_DATE
 ,okcCL.PRICE_BASIS_YN AS okcCL_PRICE_BASIS_YN
 ,okcCL.CONFIG_HEADER_ID AS okcCL_CONFIG_HEADER_ID
 ,okcCL.CONFIG_REVISION_NUMBER AS okcCL_CONFIG_REVISION_NUMBER
 ,okcCL.CONFIG_COMPLETE_YN AS okcCL_CONFIG_COMPLETE_YN
 ,okcCL.CONFIG_VALID_YN AS okcCL_CONFIG_VALID_YN
 ,okcCL.CONFIG_TOP_MODEL_LINE_ID AS okcCL_CONFIG_TOP_MODEL_LINE_ID
 ,okcCL.CONFIG_ITEM_TYPE AS okcCL_CONFIG_ITEM_TYPE
 ,okcCL.CONFIG_ITEM_ID AS okcCL_CONFIG_ITEM_ID
 ,okcCL.SERVICE_ITEM_YN AS okcCL_SERVICE_ITEM_YN
 ,okcCL.PH_PRICING_TYPE AS okcCL_PH_PRICING_TYPE
 ,okcCL.PH_PRICE_BREAK_BASIS AS okcCL_PH_PRICE_BREAK_BASIS
 ,okcCL.PH_MIN_QTY AS okcCL_PH_MIN_QTY
 ,okcCL.PH_MIN_AMT AS okcCL_PH_MIN_AMT
 ,okcCL.PH_QP_REFERENCE_ID AS okcCL_PH_QP_REFERENCE_ID
 ,okcCL.PH_VALUE AS okcCL_PH_VALUE
 ,okcCL.PH_ENFORCE_PRICE_LIST_YN AS okcCL_PH_ENFORCE_PRICE_LIST_YN
 ,okcCL.PH_ADJUSTMENT AS okcCL_PH_ADJUSTMENT
 ,okcCL.PH_INTEGRATED_WITH_QP AS okcCL_PH_INTEGRATED_WITH_QP
 ,okcCL.CUST_ACCT_ID AS okcCL_CUST_ACCT_ID
 ,okcCL.BILL_TO_SITE_USE_ID AS okcCL_BILL_TO_SITE_USE_ID
 ,okcCL.INV_RULE_ID AS okcCL_INV_RULE_ID
 ,okcCL.LINE_RENEWAL_TYPE_CODE AS okcCL_LINE_RENEWAL_TYPE_CODE
 ,okcCL.SHIP_TO_SITE_USE_ID AS okcCL_SHIP_TO_SITE_USE_ID
 ,okcCL.PAYMENT_TERM_ID AS okcCL_PAYMENT_TERM_ID
 ,okcCL.DATE_CANCELLED AS okcCL_DATE_CANCELLED
 ,okcCL.TERM_CANCEL_SOURCE AS okcCL_TERM_CANCEL_SOURCE
 ,okcCL.ANNUALIZED_FACTOR AS okcCL_ANNUALIZED_FACTOR
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
 ,NULL AS okcCL_PAYMENT_INSTRUCTION_TYPE
 ,okcCL.CANCELLED_AMOUNT AS okcCL_CANCELLED_AMOUNT
 ,nvl(ApiLinesRecTab.LineExistsYNTab(i),'N')
 ,(CASE
    WHEN (
          nvl(okcCL.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcCL.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date
         )
    THEN 'N'
    ELSE 'Y'
    END
   ) AS okcCL_DATES_CHANGED_YN
 ,'N' AS okcCL_GEN_SUBLINE_BSCH_YN
 FROM
 OKC_K_LINES_B okcCL
 WHERE
 okcCL.DNZ_CHR_ID = P_From_Chr_ID
 AND ApiLinesRecTab.ToLineTab(i) IS NULL
 AND ApiLinesRecTab.LineExpYNTab(i) = 'N'
 CONNECT BY PRIOR okcCL.ID = okcCL.CLE_ID
 START WITH okcCL.ID = (select a.COVERAGE_ID
                             FROM
                             OKS_K_LINES_B a
                             where a.CLE_ID = ApiLinesRecTab.IDTab(i)
                            );

   EXCEPTION
    WHEN OTHERS THEN
              If (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
                  FND_LOG.string(FND_LOG.level_unexpected
                                ,l_module_name
                                ,'During Bulk Insert into OKC_K_LINES_B_TEMP :  b) :'||SQLERRM);
              End If;


     OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
     l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     RAISE G_EXCEPTION_HALT_VALIDATION;

 End;



 -- c) Bulk insert for all lines in ApiLinesRecTab where TO_LINE is NOT NULL and LINE_EXISTS_YN = 'N'
 --    (Indicates that line being copied is a subline and that its top line as indicated by TO_LINE
 --    is being copied as a separate line in ApiLinesRecTab.
 --

 Begin

 FORALL i in ApiLinesRecTab.IDTab.FIRST .. ApiLinesRecTab.IDTab.LAST
 INSERT INTO OKC_K_LINES_B_TEMP(
  ID
 ,LINE_NUMBER
 ,CHR_ID
 ,CLE_ID
 ,CLE_ID_RENEWED
 ,DNZ_CHR_ID
 ,DISPLAY_SEQUENCE
 ,STS_CODE
 ,TRN_CODE
 ,LSE_ID
 ,EXCEPTION_YN
 ,OBJECT_VERSION_NUMBER
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,HIDDEN_IND
 ,PRICE_NEGOTIATED
 ,PRICE_LEVEL_IND
 ,PRICE_UNIT
 ,PRICE_UNIT_PERCENT
 ,INVOICE_LINE_LEVEL_IND
 ,DPAS_RATING
 ,TEMPLATE_USED
 ,PRICE_TYPE
 ,CURRENCY_CODE
 ,LAST_UPDATE_LOGIN
 ,DATE_TERMINATED
 ,START_DATE
 ,END_DATE
 ,ATTRIBUTE_CATEGORY
 ,ATTRIBUTE1
 ,ATTRIBUTE2
 ,ATTRIBUTE3
 ,ATTRIBUTE4
 ,ATTRIBUTE5
 ,ATTRIBUTE6
 ,ATTRIBUTE7
 ,ATTRIBUTE8
 ,ATTRIBUTE9
 ,ATTRIBUTE10
 ,ATTRIBUTE11
 ,ATTRIBUTE12
 ,ATTRIBUTE13
 ,ATTRIBUTE14
 ,ATTRIBUTE15
 ,SECURITY_GROUP_ID
 ,CLE_ID_RENEWED_TO
 ,PRICE_NEGOTIATED_RENEWED
 ,CURRENCY_CODE_RENEWED
 ,UPG_ORIG_SYSTEM_REF
 ,UPG_ORIG_SYSTEM_REF_ID
 ,DATE_RENEWED
 ,ORIG_SYSTEM_SOURCE_CODE
 ,ORIG_SYSTEM_ID1
 ,ORIG_SYSTEM_REFERENCE1
 ,PROGRAM_APPLICATION_ID
 ,PROGRAM_ID
 ,PROGRAM_UPDATE_DATE
 ,REQUEST_ID
 ,PRICE_LIST_ID
 ,PRICE_LIST_LINE_ID
 ,LINE_LIST_PRICE
 ,ITEM_TO_PRICE_YN
 ,PRICING_DATE
 ,PRICE_BASIS_YN
 ,CONFIG_HEADER_ID
 ,CONFIG_REVISION_NUMBER
 ,CONFIG_COMPLETE_YN
 ,CONFIG_VALID_YN
 ,CONFIG_TOP_MODEL_LINE_ID
 ,CONFIG_ITEM_TYPE
 ,CONFIG_ITEM_ID
 ,SERVICE_ITEM_YN
 ,PH_PRICING_TYPE
 ,PH_PRICE_BREAK_BASIS
 ,PH_MIN_QTY
 ,PH_MIN_AMT
 ,PH_QP_REFERENCE_ID
 ,PH_VALUE
 ,PH_ENFORCE_PRICE_LIST_YN
 ,PH_ADJUSTMENT
 ,PH_INTEGRATED_WITH_QP
 ,CUST_ACCT_ID
 ,BILL_TO_SITE_USE_ID
 ,INV_RULE_ID
 ,LINE_RENEWAL_TYPE_CODE
 ,SHIP_TO_SITE_USE_ID
 ,PAYMENT_TERM_ID
 ,DATE_CANCELLED
 ,TERM_CANCEL_SOURCE
 ,ANNUALIZED_FACTOR
 ,PAYMENT_INSTRUCTION_TYPE
 ,CANCELLED_AMOUNT
 ,LINE_EXISTS_YN
 ,DATES_CHANGED_YN
 ,GEN_SUBLINE_BSCH_YN
 )
 SELECT
  To_number(rawtohex(sys_guid()), HexFormatStr) AS okcB_NewID --*
 ,okcB.LINE_NUMBER AS okcB_LINE_NUMBER
 ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID) AS okcB_NewChrID --*
 ,ApiLinesRecTab.ToLineTab(i) AS okcB_CLE_ID --*,okcB.CLE_ID AS okcB_CLE_ID
 ,okcB.CLE_ID_RENEWED AS okcB_CLE_ID_RENEWED
 ,P_To_Chr_ID AS okcB_NewDnzChrID --*
 ,okcB.DISPLAY_SEQUENCE AS okcB_DISPLAY_SEQUENCE
 ,okcB.STS_CODE AS okcB_STS_CODE
 ,okcB.TRN_CODE AS okcB_TRN_CODE
 ,okcB.LSE_ID AS okcB_LSE_ID
 ,okcB.EXCEPTION_YN AS okcB_EXCEPTION_YN
 ,okcB.OBJECT_VERSION_NUMBER AS okcB_OBJECT_VERSION_NUMBER
 ,okcB.CREATED_BY AS okcB_CREATED_BY
 ,okcB.CREATION_DATE AS okcB_CREATION_DATE
 ,okcB.LAST_UPDATED_BY AS okcB_LAST_UPDATED_BY
 ,okcB.LAST_UPDATE_DATE AS okcB_LAST_UPDATE_DATE
 ,okcB.HIDDEN_IND AS okcB_HIDDEN_IND
 ,okcB.PRICE_NEGOTIATED AS okcB_PRICE_NEGOTIATED
 ,okcB.PRICE_LEVEL_IND AS okcB_PRICE_LEVEL_IND
 ,okcB.PRICE_UNIT AS okcB_PRICE_UNIT
 ,okcB.PRICE_UNIT_PERCENT AS okcB_PRICE_UNIT_PERCENT
 ,okcB.INVOICE_LINE_LEVEL_IND AS okcB_INVOICE_LINE_LEVEL_IND
 ,okcB.DPAS_RATING AS okcB_DPAS_RATING
 ,okcB.TEMPLATE_USED AS okcB_TEMPLATE_USED
 ,okcB.PRICE_TYPE AS okcB_PRICE_TYPE
 ,okcB.CURRENCY_CODE AS okcB_CURRENCY_CODE
 ,okcB.LAST_UPDATE_LOGIN AS okcB_LAST_UPDATE_LOGIN
 ,okcB.DATE_TERMINATED AS okcB_DATE_TERMINATED
 ,(CASE
    WHEN (nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcB.START_DATE,sysdate)
    ELSE l_Hdr_Start_Date
    END
   ) AS okcB_START_DATE
 ,(CASE
    WHEN (nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date)
    THEN nvl(okcB.END_DATE,sysdate)
    ELSE l_Hdr_End_Date
    END
   ) AS okcB_END_DATE
 ,okcB.ATTRIBUTE_CATEGORY AS okcB_ATTRIBUTE_CATEGORY
 ,okcB.ATTRIBUTE1 AS okcB_ATTRIBUTE1
 ,okcB.ATTRIBUTE2 AS okcB_ATTRIBUTE2
 ,okcB.ATTRIBUTE3 AS okcB_ATTRIBUTE3
 ,okcB.ATTRIBUTE4 AS okcB_ATTRIBUTE4
 ,okcB.ATTRIBUTE5 AS okcB_ATTRIBUTE5
 ,okcB.ATTRIBUTE6 AS okcB_ATTRIBUTE6
 ,okcB.ATTRIBUTE7 AS okcB_ATTRIBUTE7
 ,okcB.ATTRIBUTE8 AS okcB_ATTRIBUTE8
 ,okcB.ATTRIBUTE9 AS okcB_ATTRIBUTE9
 ,okcB.ATTRIBUTE10 AS okcB_ATTRIBUTE10
 ,okcB.ATTRIBUTE11 AS okcB_ATTRIBUTE11
 ,okcB.ATTRIBUTE12 AS okcB_ATTRIBUTE12
 ,okcB.ATTRIBUTE13 AS okcB_ATTRIBUTE13
 ,okcB.ATTRIBUTE14 AS okcB_ATTRIBUTE14
 ,okcB.ATTRIBUTE15 AS okcB_ATTRIBUTE15
 ,okcB.SECURITY_GROUP_ID AS okcB_SECURITY_GROUP_ID
 ,okcB.CLE_ID_RENEWED_TO AS okcB_CLE_ID_RENEWED_TO
 ,okcB.PRICE_NEGOTIATED_RENEWED AS okcB_PRICE_NEGOTIATED_RENEWED
 ,okcB.CURRENCY_CODE_RENEWED AS okcB_CURRENCY_CODE_RENEWED
 ,okcB.UPG_ORIG_SYSTEM_REF AS okcB_UPG_ORIG_SYSTEM_REF
 ,okcB.UPG_ORIG_SYSTEM_REF_ID AS okcB_UPG_ORIG_SYSTEM_REF_ID
 ,okcB.DATE_RENEWED AS okcB_DATE_RENEWED
 ,okcB.ORIG_SYSTEM_SOURCE_CODE AS okcB_ORIG_SYSTEM_SOURCE_CODE
 ,okcB.ID AS okcB_ORIG_SYSTEM_ID1 --*
 ,okcB.ORIG_SYSTEM_REFERENCE1 AS okcB_ORIG_SYSTEM_REFERENCE1
 ,okcB.PROGRAM_APPLICATION_ID AS okcB_PROGRAM_APPLICATION_ID
 ,okcB.PROGRAM_ID AS okcB_PROGRAM_ID
 ,okcB.PROGRAM_UPDATE_DATE AS okcB_PROGRAM_UPDATE_DATE
 ,okcB.REQUEST_ID AS okcB_REQUEST_ID
 ,okcB.PRICE_LIST_ID AS okcB_PRICE_LIST_ID
 ,okcB.PRICE_LIST_LINE_ID AS okcB_PRICE_LIST_LINE_ID
 ,okcB.LINE_LIST_PRICE AS okcB_LINE_LIST_PRICE
 ,okcB.ITEM_TO_PRICE_YN AS okcB_ITEM_TO_PRICE_YN
 ,okcB.PRICING_DATE AS okcB_PRICING_DATE
 ,okcB.PRICE_BASIS_YN AS okcB_PRICE_BASIS_YN
 ,okcB.CONFIG_HEADER_ID AS okcB_CONFIG_HEADER_ID
 ,okcB.CONFIG_REVISION_NUMBER AS okcB_CONFIG_REVISION_NUMBER
 ,okcB.CONFIG_COMPLETE_YN AS okcB_CONFIG_COMPLETE_YN
 ,okcB.CONFIG_VALID_YN AS okcB_CONFIG_VALID_YN
 ,okcB.CONFIG_TOP_MODEL_LINE_ID AS okcB_CONFIG_TOP_MODEL_LINE_ID
 ,okcB.CONFIG_ITEM_TYPE AS okcB_CONFIG_ITEM_TYPE
 ,okcB.CONFIG_ITEM_ID AS okcB_CONFIG_ITEM_ID
 ,okcB.SERVICE_ITEM_YN AS okcB_SERVICE_ITEM_YN
 ,okcB.PH_PRICING_TYPE AS okcB_PH_PRICING_TYPE
 ,okcB.PH_PRICE_BREAK_BASIS AS okcB_PH_PRICE_BREAK_BASIS
 ,okcB.PH_MIN_QTY AS okcB_PH_MIN_QTY
 ,okcB.PH_MIN_AMT AS okcB_PH_MIN_AMT
 ,okcB.PH_QP_REFERENCE_ID AS okcB_PH_QP_REFERENCE_ID
 ,okcB.PH_VALUE AS okcB_PH_VALUE
 ,okcB.PH_ENFORCE_PRICE_LIST_YN AS okcB_PH_ENFORCE_PRICE_LIST_YN
 ,okcB.PH_ADJUSTMENT AS okcB_PH_ADJUSTMENT
 ,okcB.PH_INTEGRATED_WITH_QP AS okcB_PH_INTEGRATED_WITH_QP
 ,okcB.CUST_ACCT_ID AS okcB_CUST_ACCT_ID
 ,okcB.BILL_TO_SITE_USE_ID AS okcB_BILL_TO_SITE_USE_ID
 ,okcB.INV_RULE_ID AS okcB_INV_RULE_ID
 ,okcB.LINE_RENEWAL_TYPE_CODE AS okcB_LINE_RENEWAL_TYPE_CODE
 ,okcB.SHIP_TO_SITE_USE_ID AS okcB_SHIP_TO_SITE_USE_ID
 ,okcB.PAYMENT_TERM_ID AS okcB_PAYMENT_TERM_ID
 ,okcB.DATE_CANCELLED AS okcB_DATE_CANCELLED
 ,okcB.TERM_CANCEL_SOURCE AS okcB_TERM_CANCEL_SOURCE
 ,okcB.ANNUALIZED_FACTOR AS okcB_ANNUALIZED_FACTOR
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
 ,NULL AS okcB_PAYMENT_INSTRUCTION_TYPE
 ,okcB.CANCELLED_AMOUNT AS okcB_CANCELLED_AMOUNT
 ,nvl(ApiLinesRecTab.LineExistsYNTab(i),'N')
 ,(CASE
    WHEN (
          nvl(okcB.START_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date AND
          nvl(okcB.END_DATE,sysdate) BETWEEN l_Hdr_Start_Date and l_Hdr_End_Date
         )
    THEN 'N'
    ELSE 'Y'
    END
   ) AS okcB_DATES_CHANGED_YN
 ,'N' AS okcB_GEN_SUBLINE_BSCH_YN
 FROM
 OKC_K_LINES_B okcB
 WHERE okcB.ID = ApiLinesRecTab.IDTab(i)
 AND ApiLinesRecTab.ToLineTab(i) IS NOT NULL
 AND ApiLinesRecTab.LineExistsYNTab(i) = 'N'
 AND okcB.DNZ_CHR_ID = P_From_Chr_ID;

   EXCEPTION
    WHEN OTHERS THEN

        /*   IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
              FND_LOG.string(FND_LOG.level_unexpected
                                ,l_module_name
                                ,'During Bulk Insert into OKC_K_LINES_B_TEMP :  c) :'||SQLERRM);
           END IF; */



          OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
     l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     RAISE G_EXCEPTION_HALT_VALIDATION;

 End;

 -- d) Bulk insert for all lines in ApiLinesRecTab where TO_LINE is NOT NULL and LINE_EXISTS_YN = 'Y'
 --    (Indicates that line being copied is a subline and that its top line as indicated by TO_LINE
 --    already exists in the Target Contractis and is not being copied from the Source Contract
 --

 Begin

 FORALL i in ApiLinesRecTab.IDTab.FIRST .. ApiLinesRecTab.IDTab.LAST
 INSERT INTO OKC_K_LINES_B_TEMP(
  ID
 ,LINE_NUMBER
 ,CHR_ID
 ,CLE_ID
 ,CLE_ID_RENEWED
 ,DNZ_CHR_ID
 ,DISPLAY_SEQUENCE
 ,STS_CODE
 ,TRN_CODE
 ,LSE_ID
 ,EXCEPTION_YN
 ,OBJECT_VERSION_NUMBER
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,HIDDEN_IND
 ,PRICE_NEGOTIATED
 ,PRICE_LEVEL_IND
 ,PRICE_UNIT
 ,PRICE_UNIT_PERCENT
 ,INVOICE_LINE_LEVEL_IND
 ,DPAS_RATING
 ,TEMPLATE_USED
 ,PRICE_TYPE
 ,CURRENCY_CODE
 ,LAST_UPDATE_LOGIN
 ,DATE_TERMINATED
 ,START_DATE
 ,END_DATE
 ,ATTRIBUTE_CATEGORY
 ,ATTRIBUTE1
 ,ATTRIBUTE2
 ,ATTRIBUTE3
 ,ATTRIBUTE4
 ,ATTRIBUTE5
 ,ATTRIBUTE6
 ,ATTRIBUTE7
 ,ATTRIBUTE8
 ,ATTRIBUTE9
 ,ATTRIBUTE10
 ,ATTRIBUTE11
 ,ATTRIBUTE12
 ,ATTRIBUTE13
 ,ATTRIBUTE14
 ,ATTRIBUTE15
 ,SECURITY_GROUP_ID
 ,CLE_ID_RENEWED_TO
 ,PRICE_NEGOTIATED_RENEWED
 ,CURRENCY_CODE_RENEWED
 ,UPG_ORIG_SYSTEM_REF
 ,UPG_ORIG_SYSTEM_REF_ID
 ,DATE_RENEWED
 ,ORIG_SYSTEM_SOURCE_CODE
 ,ORIG_SYSTEM_ID1
 ,ORIG_SYSTEM_REFERENCE1
 ,PROGRAM_APPLICATION_ID
 ,PROGRAM_ID
 ,PROGRAM_UPDATE_DATE
 ,REQUEST_ID
 ,PRICE_LIST_ID
 ,PRICE_LIST_LINE_ID
 ,LINE_LIST_PRICE
 ,ITEM_TO_PRICE_YN
 ,PRICING_DATE
 ,PRICE_BASIS_YN
 ,CONFIG_HEADER_ID
 ,CONFIG_REVISION_NUMBER
 ,CONFIG_COMPLETE_YN
 ,CONFIG_VALID_YN
 ,CONFIG_TOP_MODEL_LINE_ID
 ,CONFIG_ITEM_TYPE
 ,CONFIG_ITEM_ID
 ,SERVICE_ITEM_YN
 ,PH_PRICING_TYPE
 ,PH_PRICE_BREAK_BASIS
 ,PH_MIN_QTY
 ,PH_MIN_AMT
 ,PH_QP_REFERENCE_ID
 ,PH_VALUE
 ,PH_ENFORCE_PRICE_LIST_YN
 ,PH_ADJUSTMENT
 ,PH_INTEGRATED_WITH_QP
 ,CUST_ACCT_ID
 ,BILL_TO_SITE_USE_ID
 ,INV_RULE_ID
 ,LINE_RENEWAL_TYPE_CODE
 ,SHIP_TO_SITE_USE_ID
 ,PAYMENT_TERM_ID
 ,DATE_CANCELLED
 ,TERM_CANCEL_SOURCE
 ,ANNUALIZED_FACTOR
 ,PAYMENT_INSTRUCTION_TYPE
 ,CANCELLED_AMOUNT
 ,LINE_EXISTS_YN
 ,DATES_CHANGED_YN
 ,GEN_SUBLINE_BSCH_YN
 )
 SELECT
  To_number(rawtohex(sys_guid()), HexFormatStr) AS okcB_NewID --*
 ,okcB.LINE_NUMBER AS okcB_LINE_NUMBER
 ,decode(okcB.CHR_ID,NULL,NULL,P_To_Chr_ID) AS okcB_NewChrID --*
 ,ApiLinesRecTab.ToLineTab(i) AS okcB_CLE_ID --*
 ,okcB.CLE_ID_RENEWED AS okcB_CLE_ID_RENEWED
 ,P_To_Chr_ID AS okcB_NewDnzChrID --*
 ,okcB.DISPLAY_SEQUENCE AS okcB_DISPLAY_SEQUENCE
 ,okcB.STS_CODE AS okcB_STS_CODE
 ,okcB.TRN_CODE AS okcB_TRN_CODE
 ,okcB.LSE_ID AS okcB_LSE_ID
 ,okcB.EXCEPTION_YN AS okcB_EXCEPTION_YN
 ,okcB.OBJECT_VERSION_NUMBER AS okcB_OBJECT_VERSION_NUMBER
 ,okcB.CREATED_BY AS okcB_CREATED_BY
 ,okcB.CREATION_DATE AS okcB_CREATION_DATE
 ,okcB.LAST_UPDATED_BY AS okcB_LAST_UPDATED_BY
 ,okcB.LAST_UPDATE_DATE AS okcB_LAST_UPDATE_DATE
 ,okcB.HIDDEN_IND AS okcB_HIDDEN_IND
 ,okcB.PRICE_NEGOTIATED AS okcB_PRICE_NEGOTIATED
 ,okcB.PRICE_LEVEL_IND AS okcB_PRICE_LEVEL_IND
 ,okcB.PRICE_UNIT AS okcB_PRICE_UNIT
 ,okcB.PRICE_UNIT_PERCENT AS okcB_PRICE_UNIT_PERCENT
 ,okcB.INVOICE_LINE_LEVEL_IND AS okcB_INVOICE_LINE_LEVEL_IND
 ,okcB.DPAS_RATING AS okcB_DPAS_RATING
 ,okcB.TEMPLATE_USED AS okcB_TEMPLATE_USED
 ,okcB.PRICE_TYPE AS okcB_PRICE_TYPE
 ,okcB.CURRENCY_CODE AS okcB_CURRENCY_CODE
 ,okcB.LAST_UPDATE_LOGIN AS okcB_LAST_UPDATE_LOGIN
 ,okcB.DATE_TERMINATED AS okcB_DATE_TERMINATED
 ,(CASE
    WHEN (
          (nvl(okcB.START_DATE,sysdate) BETWEEN
              (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          )
       AND
          (nvl(okcB.END_DATE,sysdate) BETWEEN
              (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          )
         )
    THEN nvl(okcB.START_DATE,sysdate)
    ELSE (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
    END
   ) AS okcB_START_DATE --okcB.START_DATE AS okcB_START_DATE
 ,(CASE
    WHEN (
          (nvl(okcB.START_DATE,sysdate) BETWEEN
              (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          )
       AND
          (nvl(okcB.END_DATE,sysdate) BETWEEN
              (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
          )
         )
    THEN nvl(okcB.END_DATE,sysdate)
    ELSE (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
    END
   ) AS okcB_END_DATE --okcB.END_DATE AS okcB_END_DATE
 ,okcB.ATTRIBUTE_CATEGORY AS okcB_ATTRIBUTE_CATEGORY
 ,okcB.ATTRIBUTE1 AS okcB_ATTRIBUTE1
 ,okcB.ATTRIBUTE2 AS okcB_ATTRIBUTE2
 ,okcB.ATTRIBUTE3 AS okcB_ATTRIBUTE3
 ,okcB.ATTRIBUTE4 AS okcB_ATTRIBUTE4
 ,okcB.ATTRIBUTE5 AS okcB_ATTRIBUTE5
 ,okcB.ATTRIBUTE6 AS okcB_ATTRIBUTE6
 ,okcB.ATTRIBUTE7 AS okcB_ATTRIBUTE7
 ,okcB.ATTRIBUTE8 AS okcB_ATTRIBUTE8
 ,okcB.ATTRIBUTE9 AS okcB_ATTRIBUTE9
 ,okcB.ATTRIBUTE10 AS okcB_ATTRIBUTE10
 ,okcB.ATTRIBUTE11 AS okcB_ATTRIBUTE11
 ,okcB.ATTRIBUTE12 AS okcB_ATTRIBUTE12
 ,okcB.ATTRIBUTE13 AS okcB_ATTRIBUTE13
 ,okcB.ATTRIBUTE14 AS okcB_ATTRIBUTE14
 ,okcB.ATTRIBUTE15 AS okcB_ATTRIBUTE15
 ,okcB.SECURITY_GROUP_ID AS okcB_SECURITY_GROUP_ID
 ,okcB.CLE_ID_RENEWED_TO AS okcB_CLE_ID_RENEWED_TO
 ,okcB.PRICE_NEGOTIATED_RENEWED AS okcB_PRICE_NEGOTIATED_RENEWED
 ,okcB.CURRENCY_CODE_RENEWED AS okcB_CURRENCY_CODE_RENEWED
 ,okcB.UPG_ORIG_SYSTEM_REF AS okcB_UPG_ORIG_SYSTEM_REF
 ,okcB.UPG_ORIG_SYSTEM_REF_ID AS okcB_UPG_ORIG_SYSTEM_REF_ID
 ,okcB.DATE_RENEWED AS okcB_DATE_RENEWED
 ,okcB.ORIG_SYSTEM_SOURCE_CODE AS okcB_ORIG_SYSTEM_SOURCE_CODE
 ,okcB.ID AS okcB_ORIG_SYSTEM_ID1 --*
 ,okcB.ORIG_SYSTEM_REFERENCE1 AS okcB_ORIG_SYSTEM_REFERENCE1
 ,okcB.PROGRAM_APPLICATION_ID AS okcB_PROGRAM_APPLICATION_ID
 ,okcB.PROGRAM_ID AS okcB_PROGRAM_ID
 ,okcB.PROGRAM_UPDATE_DATE AS okcB_PROGRAM_UPDATE_DATE
 ,okcB.REQUEST_ID AS okcB_REQUEST_ID
 ,okcB.PRICE_LIST_ID AS okcB_PRICE_LIST_ID
 ,okcB.PRICE_LIST_LINE_ID AS okcB_PRICE_LIST_LINE_ID
 ,okcB.LINE_LIST_PRICE AS okcB_LINE_LIST_PRICE
 ,okcB.ITEM_TO_PRICE_YN AS okcB_ITEM_TO_PRICE_YN
 ,okcB.PRICING_DATE AS okcB_PRICING_DATE
 ,okcB.PRICE_BASIS_YN AS okcB_PRICE_BASIS_YN
 ,okcB.CONFIG_HEADER_ID AS okcB_CONFIG_HEADER_ID
 ,okcB.CONFIG_REVISION_NUMBER AS okcB_CONFIG_REVISION_NUMBER
 ,okcB.CONFIG_COMPLETE_YN AS okcB_CONFIG_COMPLETE_YN
 ,okcB.CONFIG_VALID_YN AS okcB_CONFIG_VALID_YN
 ,okcB.CONFIG_TOP_MODEL_LINE_ID AS okcB_CONFIG_TOP_MODEL_LINE_ID
 ,okcB.CONFIG_ITEM_TYPE AS okcB_CONFIG_ITEM_TYPE
 ,okcB.CONFIG_ITEM_ID AS okcB_CONFIG_ITEM_ID
 ,okcB.SERVICE_ITEM_YN AS okcB_SERVICE_ITEM_YN
 ,okcB.PH_PRICING_TYPE AS okcB_PH_PRICING_TYPE
 ,okcB.PH_PRICE_BREAK_BASIS AS okcB_PH_PRICE_BREAK_BASIS
 ,okcB.PH_MIN_QTY AS okcB_PH_MIN_QTY
 ,okcB.PH_MIN_AMT AS okcB_PH_MIN_AMT
 ,okcB.PH_QP_REFERENCE_ID AS okcB_PH_QP_REFERENCE_ID
 ,okcB.PH_VALUE AS okcB_PH_VALUE
 ,okcB.PH_ENFORCE_PRICE_LIST_YN AS okcB_PH_ENFORCE_PRICE_LIST_YN
 ,okcB.PH_ADJUSTMENT AS okcB_PH_ADJUSTMENT
 ,okcB.PH_INTEGRATED_WITH_QP AS okcB_PH_INTEGRATED_WITH_QP
 ,okcB.CUST_ACCT_ID AS okcB_CUST_ACCT_ID
 ,okcB.BILL_TO_SITE_USE_ID AS okcB_BILL_TO_SITE_USE_ID
 ,okcB.INV_RULE_ID AS okcB_INV_RULE_ID
 ,okcB.LINE_RENEWAL_TYPE_CODE AS okcB_LINE_RENEWAL_TYPE_CODE
 ,okcB.SHIP_TO_SITE_USE_ID AS okcB_SHIP_TO_SITE_USE_ID
 ,okcB.PAYMENT_TERM_ID AS okcB_PAYMENT_TERM_ID
 ,okcB.DATE_CANCELLED AS okcB_DATE_CANCELLED
 ,okcB.TERM_CANCEL_SOURCE AS okcB_TERM_CANCEL_SOURCE
 ,okcB.ANNUALIZED_FACTOR AS okcB_ANNUALIZED_FACTOR
-- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
 ,NULL AS okcB_PAYMENT_INSTRUCTION_TYPE
 ,okcB.CANCELLED_AMOUNT AS okcB_CANCELLED_AMOUNT
 ,nvl(ApiLinesRecTab.LineExistsYNTab(i),'N')
 ,(CASE
    WHEN (
           (nvl(okcB.START_DATE,sysdate) BETWEEN
               (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
           AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i)))
       AND
           (nvl(okcB.END_DATE,sysdate) BETWEEN
               (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
           AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i)))
         )
    THEN 'N'
    ELSE 'Y'
    END
   ) AS okcB_DATES_CHANGED_YN
 ,(CASE
    WHEN (
	   (
            (nvl(okcB.START_DATE,sysdate) BETWEEN
                (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
            AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
            )
          AND
            (nvl(okcB.END_DATE,sysdate) BETWEEN
                (select nvl(b.START_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
            AND (select nvl(b.END_DATE,sysdate) from OKC_K_LINES_B b where b.ID = ApiLinesRecTab.ToLineTab(i))
            )
           )
        AND okcB.DATE_TERMINATED IS NULL
         )
    THEN 'N'
    ELSE 'Y'
    END
   ) AS okcB_GEN_SUBLINE_BSCH_YN
 FROM
 OKC_K_LINES_B okcB
 WHERE okcB.ID = ApiLinesRecTab.IDTab(i)
 AND ApiLinesRecTab.ToLineTab(i) IS NOT NULL
 AND ApiLinesRecTab.LineExistsYNTab(i) = 'Y'
 AND okcB.DNZ_CHR_ID = P_From_Chr_ID;

   EXCEPTION
    WHEN OTHERS THEN
           /*
              If (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
                  FND_LOG.string(FND_LOG.level_unexpected
                                ,l_module_name
                                ,'During Bulk Insert into OKC_K_LINES_B_TEMP :  d) :'||SQLERRM);
              End If;
           */


         OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
     l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     RAISE G_EXCEPTION_HALT_VALIDATION;
 End;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After Bulk Insert into OKC_K_LINES_B_TEMP'
                    );
    End If;

-----------------------------------------------------------------------------
-----Update of OKC_K_LINES_B_TEMP to set CLE_ID to point to the new IDs of
-----Target lines to be created
  printTemptable;

 Begin
  UPDATE OKC_K_LINES_B_TEMP a
   SET a.CLE_ID = (select b.ID
                   FROM OKC_K_LINES_B_TEMP b
                   WHERE
                   b.ORIG_SYSTEM_ID1 = a.CLE_ID
                   AND b.DNZ_CHR_ID = P_To_Chr_ID)
   WHERE
   a.DNZ_CHR_ID = P_To_Chr_ID
   AND a.CLE_ID IS NOT NULL
   AND a.LINE_EXISTS_YN = 'N';
     EXCEPTION
      WHEN OTHERS THEN
        If (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) then
                  FND_LOG.string(FND_LOG.level_unexpected
                                ,l_module_name
                                ,'During update of cle_id in OKC_K_LINES_B_TEMP :'
			       ||SQLERRM
                                );
        End If;
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        RAISE G_EXCEPTION_HALT_VALIDATION;


 End;

------------------------------------------------------------------------------

 -------------Update Dates of Business Process Lines and its children based on Offset Information------
 Begin
  Update_BP_StartDates(P_From_Chr_ID => P_From_Chr_ID
                      ,P_To_Chr_ID => P_To_Chr_ID
                      ,x_return_status => l_return_status);

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
             RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;

 End;
 ------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------

END IF; -----End of Check of P_Lines_Tbl.COUNT > 0+++++++++++++++++++++++
        -----for insert into OKC_K_LINES_B_TEMP +++++++++++++++++++++++++

---=============================-End of BULK INSERT INTO OKC_K_LINES_B_TEMP===================


 -----------------------------------------------------------------------------
 --Process rows in OKC_K_LINES_B_TEMP and do bulk inserts into OKC_K_LINES_B
 --OKS_K_LINES_B and OKC_K_ITEMS
 ----------------------------------------------------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then  ---Start of Check of P_Lines_Tbl.COUNT > 0 *****************
				 ---for bulk insert into OKC_K_LINES_B,	    *****************
                                 ---OKS_K_LINES_B,OKC_K_ITEMS		    *****************

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'Start of BULK FETCH from OKC_K_LINES_B_TEMP'
		   ||'Count of Lines in P_Lines_Tbl='||P_Lines_Tbl.COUNT
                    );
    End If;


--------Start of BULK FETCH FROM OKC_K_LINES_B_TEMP---------------
 Begin


	IF p_include_cancelled_lines = 'Y' AND
           p_include_terminated_lines = 'Y' THEN
          OPEN GetOKCOKSLinesB_Temp(P_From_Chr_ID, P_To_Chr_ID);
        ELSIF p_include_cancelled_lines = 'N' AND
              p_include_terminated_lines = 'Y' THEN
          OPEN GetOKCOKSLinesB_Temp_termn(P_From_Chr_ID, P_To_Chr_ID);
        ELSIF p_include_cancelled_lines = 'Y' AND
              p_include_terminated_lines = 'N' THEN
          OPEN GetOKCOKSLinesB_Temp_cancel(P_From_Chr_ID, P_To_Chr_ID);
        ELSIF p_include_cancelled_lines = 'N' AND
              p_include_terminated_lines = 'N' THEN
          OPEN GetOKCOKSLinesB_Temp_exclude(P_From_Chr_ID, P_To_Chr_ID);
        END IF;

  LOOP
   IF p_include_cancelled_lines = 'Y' AND p_include_terminated_lines = 'Y' THEN
   FETCH GetOKCOKSLinesB_Temp BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;

  ELSIF p_include_cancelled_lines = 'Y' AND p_include_terminated_lines = 'N' THEN
   FETCH GetOKCOKSLinesB_Temp_CANCEL BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;

  ELSIF p_include_cancelled_lines = 'N' AND p_include_terminated_lines = 'Y' THEN
   FETCH GetOKCOKSLinesB_Temp_TERMN BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;

  ELSIF p_include_cancelled_lines = 'N' AND p_include_terminated_lines = 'N' THEN
   FETCH GetOKCOKSLinesB_Temp_EXCLUDE BULK COLLECT INTO
    OKCOKSLinesRecTab.OkcB_OldOKCLineID
   ,OKCOKSLinesRecTab.OkcB_NewOKCLineID
   ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER
   ,OKCOKSLinesRecTab.OkcB_NewChrID
   ,OKCOKSLinesRecTab.OkcB_CLE_ID
   ,OKCOKSLinesRecTab.OkcB_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE
   ,OKCOKSLinesRecTab.OkcB_STS_CODE
   ,OKCOKSLinesRecTab.OkcB_TRN_CODE
   ,OKCOKSLinesRecTab.OkcB_LSE_ID
   ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED
   ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT
   ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT
   ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND
   ,OKCOKSLinesRecTab.OkcB_DPAS_RATING
   ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED
   ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE
   ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED
   ,OKCOKSLinesRecTab.OkcB_START_DATE
   ,OKCOKSLinesRecTab.OkcB_END_DATE
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14
   ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15
   ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED
   ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcB_REQUEST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE
   ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN
   ,OKCOKSLinesRecTab.OkcB_PRICING_DATE
   ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER
   ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN
   ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE
   ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID
   ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN
   ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE
   ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY
   ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT
   ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID
   ,OKCOKSLinesRecTab.OkcB_PH_VALUE
   ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN
   ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT
   ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP
   ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID
   ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID
   ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE
   ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID
   ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED
   ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE
   ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR
   ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE
   ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT
   ,OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG --pseudo column
   ,OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG --pseudo column
-----------------End of record members for OKC_K_LINES_B columns
-----------------Start of record members for OKS_K_LINES_B columns
   ,OKCOKSLinesRecTab.OksB_OldOksLineID
   ,OKCOKSLinesRecTab.OksB_NewOksLineID
   ,OKCOKSLinesRecTab.OksB_CLE_ID
   ,OKCOKSLinesRecTab.OksB_NewDnzChrID
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST
   ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID
   ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE
   ,OKCOKSLinesRecTab.OksB_CC_NO
   ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE
   ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID
   ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE
   ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD
   ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE
   ,OKCOKSLinesRecTab.OksB_TERMN_METHOD
   ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT
   ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN
   ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER
   ,OKCOKSLinesRecTab.OksB_GRACE_DURATION
   ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD
   ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG
   ,OKCOKSLinesRecTab.OksB_PRICE_UOM
   ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT
   ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN
   ,OKCOKSLinesRecTab.OksB_TAX_STATUS
   ,OKCOKSLinesRecTab.OksB_TAX_CODE
   ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE
   ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE
   ,OKCOKSLinesRecTab.OksB_PROD_PRICE
   ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE
   ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT
   ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL
   ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY
   ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE
   ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY
   ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL
   ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL
   ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY
   ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY
   ,OKCOKSLinesRecTab.OksB_AMCV_FLAG
   ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY
   ,OKCOKSLinesRecTab.OksB_USAGE_DURATION
   ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD
   ,OKCOKSLinesRecTab.OksB_LEVEL_YN
   ,OKCOKSLinesRecTab.OksB_USAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_BASE_READING
   ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE
   ,OKCOKSLinesRecTab.OksB_FULL_CREDIT
   ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID
   ,OKCOKSLinesRecTab.OksB_BREAK_UOM
   ,OKCOKSLinesRecTab.OksB_PRORATE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE
   ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID
   ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT
   ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT
   ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION
   ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD
   ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID
   ,OKCOKSLinesRecTab.OksB_PDF_ID
   ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN
   ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN
   ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION
   ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN
   ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE
   ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID
   ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN
   ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN
   ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT
   ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE
   ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL
   ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OksB_REQUEST_ID
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1
   ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE
   ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID
   ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE
   ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER
   ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE
   ,OKCOKSLinesRecTab.OksB_COVERAGE_ID
   ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN
-----------------End of record members for OKS_K_LINES_B columns
-----------------Start of record members for OKC_K_ITEMS columns
   ,OKCOKSLinesRecTab.OkcI_OldOkcItemID
   ,OKCOKSLinesRecTab.OkcI_NewOkcItemID
   ,OKCOKSLinesRecTab.OkcI_CLE_ID
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID
   ,OKCOKSLinesRecTab.OkcI_NewChrID
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID LIMIT G_BULK_FETCH_LIMIT;
  END IF;

  ---Bulk insert into OKC_K_LINES_B---

  FORALL i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST
  INSERT INTO OKC_K_LINES_B(
   ID
 , LINE_NUMBER
 , CHR_ID
 , CLE_ID
 , DNZ_CHR_ID
 , DISPLAY_SEQUENCE
 , STS_CODE
 , TRN_CODE
 , LSE_ID
 , EXCEPTION_YN
 , OBJECT_VERSION_NUMBER
 , HIDDEN_IND
 , PRICE_NEGOTIATED
 , PRICE_LEVEL_IND
 , PRICE_UNIT
 , PRICE_UNIT_PERCENT
 , INVOICE_LINE_LEVEL_IND
 , DPAS_RATING
 , TEMPLATE_USED
 , PRICE_TYPE
 , CURRENCY_CODE
 , DATE_TERMINATED
 , START_DATE
 , END_DATE
 , ATTRIBUTE_CATEGORY
 , ATTRIBUTE1
 , ATTRIBUTE2
 , ATTRIBUTE3
 , ATTRIBUTE4
 , ATTRIBUTE5
 , ATTRIBUTE6
 , ATTRIBUTE7
 , ATTRIBUTE8
 , ATTRIBUTE9
 , ATTRIBUTE10
 , ATTRIBUTE11
 , ATTRIBUTE12
 , ATTRIBUTE13
 , ATTRIBUTE14
 , ATTRIBUTE15
 , SECURITY_GROUP_ID
 , PRICE_NEGOTIATED_RENEWED
 , CURRENCY_CODE_RENEWED
 , UPG_ORIG_SYSTEM_REF
 , UPG_ORIG_SYSTEM_REF_ID
 , DATE_RENEWED
 , ORIG_SYSTEM_ID1
 , ORIG_SYSTEM_REFERENCE1
 , ORIG_SYSTEM_SOURCE_CODE
 , PROGRAM_APPLICATION_ID
 , PROGRAM_ID
 , PROGRAM_UPDATE_DATE
 , REQUEST_ID
 , PRICE_LIST_ID
 , PRICE_LIST_LINE_ID
 , LINE_LIST_PRICE
 , ITEM_TO_PRICE_YN
 , PRICING_DATE
 , PRICE_BASIS_YN
 , CONFIG_HEADER_ID
 , CONFIG_REVISION_NUMBER
 , CONFIG_COMPLETE_YN
 , CONFIG_VALID_YN
 , CONFIG_TOP_MODEL_LINE_ID
 , CONFIG_ITEM_TYPE
 , CONFIG_ITEM_ID
 , SERVICE_ITEM_YN
 , PH_PRICING_TYPE
 , PH_PRICE_BREAK_BASIS
 , PH_MIN_QTY
 , PH_MIN_AMT
 , PH_QP_REFERENCE_ID
 , PH_VALUE
 , PH_ENFORCE_PRICE_LIST_YN
 , PH_ADJUSTMENT
 , PH_INTEGRATED_WITH_QP
 , CUST_ACCT_ID
 , BILL_TO_SITE_USE_ID
 , INV_RULE_ID
 , LINE_RENEWAL_TYPE_CODE
 , SHIP_TO_SITE_USE_ID
 , PAYMENT_TERM_ID
 , DATE_CANCELLED
 , TERM_CANCEL_SOURCE
 , ANNUALIZED_FACTOR
 , PAYMENT_INSTRUCTION_TYPE -- hkamdar 29-Mar-2006 Bug # 4722452
 , CANCELLED_AMOUNT
 , CREATION_DATE
 , CREATED_BY
 , LAST_UPDATE_DATE
 , LAST_UPDATED_BY
 , LAST_UPDATE_LOGIN
  )
 SELECT
  OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
 ,OKCOKSLinesRecTab.OkcB_LINE_NUMBER(i)
 ,OKCOKSLinesRecTab.OkcB_NewChrID(i)
 ,OKCOKSLinesRecTab.OkcB_CLE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_NewDnzChrID(i)
 ,OKCOKSLinesRecTab.OkcB_DISPLAY_SEQUENCE(i)
 ,decode(p_change_status_YN
        ,'Y'
        ,l_Default_Sts_Code
        ,'N'
        ,decode(OKCOKSLinesRecTab.OkcB_CLE_ID(i)
               ,NULL
               ,l_Default_Sts_Code
	       ,OKCOKSLinesRecTab.OkcB_STS_CODE(i)
               )
        )
 ,OKCOKSLinesRecTab.OkcB_TRN_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_LSE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_EXCEPTION_YN(i)
 ,OKCOKSLinesRecTab.OkcB_OBJECT_VERSION_NUMBER(i)
 ,OKCOKSLinesRecTab.OkcB_HIDDEN_IND(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_LEVEL_IND(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_UNIT_PERCENT(i)
 ,OKCOKSLinesRecTab.OkcB_INVOICE_LINE_LEVEL_IND(i)
 ,OKCOKSLinesRecTab.OkcB_DPAS_RATING(i)
 ,OKCOKSLinesRecTab.OkcB_TEMPLATE_USED(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_TYPE(i)
 ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_DATE_TERMINATED(i)
 ,OKCOKSLinesRecTab.OkcB_START_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_END_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE_CATEGORY(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE1(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE2(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE3(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE4(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE5(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE6(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE7(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE8(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE9(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE10(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE11(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE12(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE13(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE14(i)
 ,OKCOKSLinesRecTab.OkcB_ATTRIBUTE15(i)
 ,OKCOKSLinesRecTab.OkcB_SECURITY_GROUP_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_NEGOTIATED_RENEWED(i)
 ,OKCOKSLinesRecTab.OkcB_CURRENCY_CODE_RENEWED(i)
 ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF(i)
 ,OKCOKSLinesRecTab.OkcB_UPG_ORIG_SYSTEM_REF_ID(i)
 ,OKCOKSLinesRecTab.OkcB_DATE_RENEWED(i)
 ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_ID1(i)
 ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_REFERENCE1(i)
 ,OKCOKSLinesRecTab.OkcB_ORIG_SYSTEM_SOURCE_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_PROGRAM_APPLICATION_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PROGRAM_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PROGRAM_UPDATE_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_REQUEST_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_LIST_LINE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_LINE_LIST_PRICE(i)
 ,OKCOKSLinesRecTab.OkcB_ITEM_TO_PRICE_YN(i)
 ,OKCOKSLinesRecTab.OkcB_PRICING_DATE(i)
 ,OKCOKSLinesRecTab.OkcB_PRICE_BASIS_YN(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_HEADER_ID(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_REVISION_NUMBER(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_COMPLETE_YN(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_VALID_YN(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_TOP_MODEL_LINE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_TYPE(i)
 ,OKCOKSLinesRecTab.OkcB_CONFIG_ITEM_ID(i)
 ,OKCOKSLinesRecTab.OkcB_SERVICE_ITEM_YN(i)
 ,OKCOKSLinesRecTab.OkcB_PH_PRICING_TYPE(i)
 ,OKCOKSLinesRecTab.OkcB_PH_PRICE_BREAK_BASIS(i)
 ,OKCOKSLinesRecTab.OkcB_PH_MIN_QTY(i)
 ,OKCOKSLinesRecTab.OkcB_PH_MIN_AMT(i)
 ,OKCOKSLinesRecTab.OkcB_PH_QP_REFERENCE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PH_VALUE(i)
 ,OKCOKSLinesRecTab.OkcB_PH_ENFORCE_PRICE_LIST_YN(i)
 ,OKCOKSLinesRecTab.OkcB_PH_ADJUSTMENT(i)
 ,OKCOKSLinesRecTab.OkcB_PH_INTEGRATED_WITH_QP(i)
 ,OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID(i)
 ,OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_INV_RULE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_LINE_RENEWAL_TYPE_CODE(i)
 ,OKCOKSLinesRecTab.OkcB_SHIP_TO_SITE_USE_ID(i)
 ,OKCOKSLinesRecTab.OkcB_PAYMENT_TERM_ID(i)
 ,OKCOKSLinesRecTab.OkcB_DATE_CANCELLED(i)
 ,OKCOKSLinesRecTab.OkcB_TERM_CANCEL_SOURCE(i)
 ,OKCOKSLinesRecTab.OkcB_ANNUALIZED_FACTOR(i)
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
-- ,OKCOKSLinesRecTab.OkcB_PAYMENT_INSTRUCTION_TYPE(i) -- hkamdar 29-Mar-2006 Bug # 4722452
 ,NULL
 ,OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT(i)
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,SYSDATE
 ,FND_GLOBAL.USER_ID
 ,FND_GLOBAL.LOGIN_ID
  FROM
  DUAL;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After BULK INSERT into OKC_K_LINES_B'
                    );
    End If;


 ---Bulk insert into OKS_K_LINES_B---

  FORALL i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST
  INSERT INTO OKS_K_LINES_B(
   ID
  ,CLE_ID
  ,DNZ_CHR_ID
  ,DISCOUNT_LIST
  ,ACCT_RULE_ID
  ,PAYMENT_TYPE
  ,CC_NO
  ,CC_EXPIRY_DATE
  ,CC_BANK_ACCT_ID
  ,CC_AUTH_CODE
  ,COMMITMENT_ID
  ,LOCKED_PRICE_LIST_ID
  ,USAGE_EST_YN
  ,USAGE_EST_METHOD
  ,USAGE_EST_START_DATE
  ,TERMN_METHOD
  ,UBT_AMOUNT
  ,CREDIT_AMOUNT
  ,SUPPRESSED_CREDIT
  ,OVERRIDE_AMOUNT
  ,CUST_PO_NUMBER_REQ_YN
  ,CUST_PO_NUMBER
  ,GRACE_DURATION
  ,GRACE_PERIOD
  ,INV_PRINT_FLAG
  ,PRICE_UOM
  ,TAX_AMOUNT
  ,TAX_INCLUSIVE_YN
  ,TAX_STATUS
  ,TAX_CODE
  ,TAX_EXEMPTION_ID
  ,IB_TRANS_TYPE
  ,IB_TRANS_DATE
  ,PROD_PRICE
  ,SERVICE_PRICE
  ,CLVL_LIST_PRICE
  ,CLVL_QUANTITY
  ,CLVL_EXTENDED_AMT
  ,CLVL_UOM_CODE
  ,TOPLVL_OPERAND_CODE
  ,TOPLVL_OPERAND_VAL
  ,TOPLVL_QUANTITY
  ,TOPLVL_UOM_CODE
  ,TOPLVL_ADJ_PRICE
  ,TOPLVL_PRICE_QTY
  ,AVERAGING_INTERVAL
  ,SETTLEMENT_INTERVAL
  ,MINIMUM_QUANTITY
  ,DEFAULT_QUANTITY
  ,AMCV_FLAG
  ,FIXED_QUANTITY
  ,USAGE_DURATION
  ,USAGE_PERIOD
  ,LEVEL_YN
  ,USAGE_TYPE
  ,UOM_QUANTIFIED
  ,BASE_READING
  ,BILLING_SCHEDULE_TYPE
  ,FULL_CREDIT
  ,LOCKED_PRICE_LIST_LINE_ID
  ,BREAK_UOM
  ,PRORATE
  ,COVERAGE_TYPE
  ,EXCEPTION_COV_ID
  ,LIMIT_UOM_QUANTIFIED
  ,DISCOUNT_AMOUNT
  ,DISCOUNT_PERCENT
  ,OFFSET_DURATION
  ,OFFSET_PERIOD
  ,INCIDENT_SEVERITY_ID
  ,PDF_ID
  ,WORK_THRU_YN
  ,REACT_ACTIVE_YN
  ,TRANSFER_OPTION
  ,PROD_UPGRADE_YN
  ,INHERITANCE_TYPE
  ,PM_PROGRAM_ID
  ,PM_CONF_REQ_YN
  ,PM_SCH_EXISTS_YN
  ,ALLOW_BT_DISCOUNT
  ,APPLY_DEFAULT_TIMEZONE
  ,SYNC_DATE_INSTALL
  ,OBJECT_VERSION_NUMBER
  ,SECURITY_GROUP_ID
  ,REQUEST_ID
  ,ORIG_SYSTEM_ID1
  ,ORIG_SYSTEM_REFERENCE1
  ,ORIG_SYSTEM_SOURCE_CODE
  ,TRXN_EXTENSION_ID
  ,TAX_CLASSIFICATION_CODE
  ,EXEMPT_CERTIFICATE_NUMBER
  ,EXEMPT_REASON_CODE
  ,COVERAGE_ID
  ,STANDARD_COV_YN
  ,CREATION_DATE
  ,CREATED_BY
  ,LAST_UPDATE_DATE
  ,LAST_UPDATED_BY
  ,LAST_UPDATE_LOGIN
  )
  SELECT
   OKCOKSLinesRecTab.OksB_NewOksLineID(i)
  ,OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
  ,OKCOKSLinesRecTab.OksB_NewDnzChrID(i)
  ,OKCOKSLinesRecTab.OksB_DISCOUNT_LIST(i)
  ,OKCOKSLinesRecTab.OksB_ACCT_RULE_ID(i)
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL
--  ,OKCOKSLinesRecTab.OksB_PAYMENT_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_CC_NO(i)
  ,OKCOKSLinesRecTab.OksB_CC_EXPIRY_DATE(i)
  ,OKCOKSLinesRecTab.OksB_CC_BANK_ACCT_ID(i)
  ,OKCOKSLinesRecTab.OksB_CC_AUTH_CODE(i)
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL
--  ,OKCOKSLinesRecTab.OksB_COMMITMENT_ID(i)
  ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_EST_YN(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_EST_METHOD(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_EST_START_DATE(i)
  ,OKCOKSLinesRecTab.OksB_TERMN_METHOD(i)
  ,OKCOKSLinesRecTab.OksB_UBT_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_CREDIT_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_SUPPRESSED_CREDIT(i)
  ,OKCOKSLinesRecTab.OksB_OVERRIDE_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER_REQ_YN(i)
 -- hkamdar 17-Apr-2006 Bug # 4722452 as per Aaron's feedback on 07-Apr-2006.
  ,NULL
--  ,OKCOKSLinesRecTab.OksB_CUST_PO_NUMBER(i)
  ,OKCOKSLinesRecTab.OksB_GRACE_DURATION(i)
  ,OKCOKSLinesRecTab.OksB_GRACE_PERIOD(i)
  ,OKCOKSLinesRecTab.OksB_INV_PRINT_FLAG(i)
  ,OKCOKSLinesRecTab.OksB_PRICE_UOM(i)
  ,OKCOKSLinesRecTab.OksB_TAX_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_TAX_INCLUSIVE_YN(i)
  ,OKCOKSLinesRecTab.OksB_TAX_STATUS(i)
  ,OKCOKSLinesRecTab.OksB_TAX_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TAX_EXEMPTION_ID(i)
  ,OKCOKSLinesRecTab.OksB_IB_TRANS_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_IB_TRANS_DATE(i)
  ,OKCOKSLinesRecTab.OksB_PROD_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_SERVICE_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_LIST_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_EXTENDED_AMT(i)
  ,OKCOKSLinesRecTab.OksB_CLVL_UOM_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_OPERAND_VAL(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_ADJ_PRICE(i)
  ,OKCOKSLinesRecTab.OksB_TOPLVL_PRICE_QTY(i)
  ,OKCOKSLinesRecTab.OksB_AVERAGING_INTERVAL(i)
  ,OKCOKSLinesRecTab.OksB_SETTLEMENT_INTERVAL(i)
  ,OKCOKSLinesRecTab.OksB_MINIMUM_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_DEFAULT_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_AMCV_FLAG(i)
  ,OKCOKSLinesRecTab.OksB_FIXED_QUANTITY(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_DURATION(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_PERIOD(i)
  ,OKCOKSLinesRecTab.OksB_LEVEL_YN(i)
  ,OKCOKSLinesRecTab.OksB_USAGE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_UOM_QUANTIFIED(i)
  ,OKCOKSLinesRecTab.OksB_BASE_READING(i)
  ,OKCOKSLinesRecTab.OksB_BILLING_SCHEDULE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_FULL_CREDIT(i)
  ,OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID(i)
  ,OKCOKSLinesRecTab.OksB_BREAK_UOM(i)
  ,OKCOKSLinesRecTab.OksB_PRORATE(i)
  ,OKCOKSLinesRecTab.OksB_COVERAGE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_EXCEPTION_COV_ID(i)
  ,OKCOKSLinesRecTab.OksB_LIMIT_UOM_QUANTIFIED(i)
  ,OKCOKSLinesRecTab.OksB_DISCOUNT_AMOUNT(i)
  ,OKCOKSLinesRecTab.OksB_DISCOUNT_PERCENT(i)
  ,OKCOKSLinesRecTab.OksB_OFFSET_DURATION(i)
  ,OKCOKSLinesRecTab.OksB_OFFSET_PERIOD(i)
  ,OKCOKSLinesRecTab.OksB_INCIDENT_SEVERITY_ID(i)
  ,OKCOKSLinesRecTab.OksB_PDF_ID(i)
  ,OKCOKSLinesRecTab.OksB_WORK_THRU_YN(i)
  ,OKCOKSLinesRecTab.OksB_REACT_ACTIVE_YN(i)
  ,OKCOKSLinesRecTab.OksB_TRANSFER_OPTION(i)
  ,OKCOKSLinesRecTab.OksB_PROD_UPGRADE_YN(i)
  ,OKCOKSLinesRecTab.OksB_INHERITANCE_TYPE(i)
  ,OKCOKSLinesRecTab.OksB_PM_PROGRAM_ID(i)
  ,OKCOKSLinesRecTab.OksB_PM_CONF_REQ_YN(i)
  ,OKCOKSLinesRecTab.OksB_PM_SCH_EXISTS_YN(i)
  ,OKCOKSLinesRecTab.OksB_ALLOW_BT_DISCOUNT(i)
  ,OKCOKSLinesRecTab.OksB_APPLY_DEFAULT_TIMEZONE(i)
  ,OKCOKSLinesRecTab.OksB_SYNC_DATE_INSTALL(i)
  ,OKCOKSLinesRecTab.OksB_OBJECT_VERSION_NUMBER(i)
  ,OKCOKSLinesRecTab.OksB_SECURITY_GROUP_ID(i)
  ,OKCOKSLinesRecTab.OksB_REQUEST_ID(i)
  ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_ID1(i)
  ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_REFERENCE1(i)
  ,OKCOKSLinesRecTab.OksB_ORIG_SYSTEM_SOURCE_CODE(i)
  ,OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i)
  ,OKCOKSLinesRecTab.OksB_TAX_CLASSIFICATION_CODE(i)
  ,OKCOKSLinesRecTab.OksB_EXEMPT_CERTIFICATE_NUMBER(i)
  ,OKCOKSLinesRecTab.OksB_EXEMPT_REASON_CODE(i)
  ,OKCOKSLinesRecTab.OksB_COVERAGE_ID(i)
  ,OKCOKSLinesRecTab.OksB_STANDARD_COV_YN(i)
  ,SYSDATE
  ,FND_GLOBAL.USER_ID
  ,SYSDATE
  ,FND_GLOBAL.USER_ID
  ,FND_GLOBAL.LOGIN_ID
   FROM
   DUAL
   WHERE
   OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After BULK INSERT into OKS_K_LINES_B'
                    );
    End If;

 ---Bulk insert into OKC_K_ITEMS---

  FORALL i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST
  INSERT INTO OKC_K_ITEMS(
   ID
  ,CLE_ID
  ,DNZ_CHR_ID
  ,CHR_ID
  ,OBJECT1_ID1
  ,OBJECT1_ID2
  ,JTOT_OBJECT1_CODE
  ,UOM_CODE
  ,EXCEPTION_YN
  ,NUMBER_OF_ITEMS
  ,PRICED_ITEM_YN
  ,OBJECT_VERSION_NUMBER
  ,SECURITY_GROUP_ID
  ,UPG_ORIG_SYSTEM_REF
  ,UPG_ORIG_SYSTEM_REF_ID
  ,PROGRAM_APPLICATION_ID
  ,PROGRAM_ID
  ,PROGRAM_UPDATE_DATE
  ,REQUEST_ID
  ,CREATION_DATE
  ,CREATED_BY
  ,LAST_UPDATE_DATE
  ,LAST_UPDATED_BY
  ,LAST_UPDATE_LOGIN
  )
  SELECT
    OKCOKSLinesRecTab.OkcI_NewOkcItemID(i)
   ,OKCOKSLinesRecTab.OkcB_NewOkcLineID(i)
   ,OKCOKSLinesRecTab.OkcI_NewDnzChrID(i)
   ,OKCOKSLinesRecTab.OkcI_NewChrID(i)
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID1(i)
   ,OKCOKSLinesRecTab.OkcI_OBJECT1_ID2(i)
   ,OKCOKSLinesRecTab.OkcI_JTOT_OBJECT1_CODE(i)
   ,OKCOKSLinesRecTab.OkcI_UOM_CODE(i)
   ,OKCOKSLinesRecTab.OkcI_EXCEPTION_YN(i)
   ,OKCOKSLinesRecTab.OkcI_NUMBER_OF_ITEMS(i)
   ,OKCOKSLinesRecTab.OkcI_PRICED_ITEM_YN(i)
   ,OKCOKSLinesRecTab.OkcI_OBJECT_VERSION_NUMBER(i)
   ,OKCOKSLinesRecTab.OkcI_SECURITY_GROUP_ID(i)
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF(i)
   ,OKCOKSLinesRecTab.OkcI_UPG_ORIG_SYSTEM_REF_ID(i)
   ,OKCOKSLinesRecTab.Okc_PROGRAM_APPLICATION_ID(i)
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_ID(i)
   ,OKCOKSLinesRecTab.OkcI_PROGRAM_UPDATE_DATE(i)
   ,OKCOKSLinesRecTab.OkcI_REQUEST_ID(i)
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,SYSDATE
   ,FND_GLOBAL.USER_ID
   ,FND_GLOBAL.LOGIN_ID
   FROM
   DUAL
   where OKCOKSLinesRecTab.OkcI_OldOkcItemID(i) IS NOT NULL;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After BULK INSERT into OKC_K_ITEMS'
                    );
    End If;


  -----------------Start of row by row processing---------------------
  FOR i IN OKCOKSLinesRecTab.OkcB_NewOKCLineID.FIRST .. OKCOKSLinesRecTab.OkcB_NewOKCLineID.LAST LOOP

   ------------Re-compute TAX_AMOUNT for a subscription line if the line being copied is a cancelled line------------
    BEGIN
     /*If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND
         OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 46 AND
         OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG(i) = 'Y') then*/

      --npalepu added condition lse_id IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) for bug # 5660131
      If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OkcB_LSE_ID(i) IN (7, 8, 9, 10, 11, 13, 18, 25, 35, 46) AND
          (
           (OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 46 AND OKCOKSLinesRecTab.OkcB_LINE_CANCELLED_FLAG(i) = 'Y')
           OR
           (OKCOKSLinesRecTab.OkcB_LINE_TERMINATED_FLAG(i) = 'Y')
          )
         )
       then

    /*-Line below is not correct as it would be NULL. Also, it is not required as the Tax API derives the Price_Negotiated for the Line ID
    --lx_rail_rec.AMOUNT := OKCOKSLinesRecTab.OkcB_CANCELLED_AMOUNT(i); --Price Negotiated would be stored in the CANCELLED_AMOUNT column
                                                                      --for a cancelled Subscription Line
    */

     --npalepu added on 06-NOV-2006 for bug # 5636927
     lx_rail_rec.AMOUNT := NULL;
     --end npalepu

      OKS_TAX_UTIL_PVT.Get_Tax
       ( p_api_version => p_api_version
        ,p_init_msg_list => p_init_msg_list
        ,p_chr_id	=> P_To_Chr_ID
        ,p_cle_id  => OKCOKSLinesRecTab.OkcB_NewOkcLineID(i)
        ,px_rail_rec => lx_rail_rec
        ,x_msg_count => x_msg_count
        ,x_msg_data => x_msg_data
        ,x_return_status => l_return_status
       );

         IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
                x_return_status := l_return_status;
                RAISE G_EXCEPTION_HALT_VALIDATION;
          END IF;
         END IF;

      UPDATE OKS_K_LINES_B
      SET
       TAX_AMOUNT = lx_rail_rec.TAX_VALUE
      WHERE ID = OKCOKSLinesRecTab.OksB_NewOksLineID(i)
      AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OksB_OldOksLineID(i);

      If SQL%NOTFOUND then
       l_return_status := FND_API.G_RET_STS_ERROR;
       RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;

     End If;
    END;
 ------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------

   ---If (LSE_ID in (1,19)--------------------------------------
   ---       a) Instantiate counter events
   ---	   b) Copy Line Notes
 --------------------------------------------------------------
   IF (OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 1 OR OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 19) THEN

    --Instantiate Counters Events

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'Before instantiate_counters_events'
                   ||' p_old_cle_id='||OKCOKSLinesRecTab.OkcB_OldOKCLineID(i)
		   ||',p_old_lse_id='||OKCOKSLinesRecTab.OkcB_LSE_ID(i)
		   ||',p_new_cle_id='||OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
                    );
    End If;

    instantiate_counters_events(
                     p_api_version   => p_api_version
	            ,p_init_msg_list => p_init_msg_list
		    ,x_return_status => l_return_status
		    ,x_msg_count     => x_msg_count
		    ,x_msg_data      => x_msg_data
		    ,p_old_cle_id    => OKCOKSLinesRecTab.OkcB_OldOKCLineID(i)
		    ,p_old_lse_id    => OKCOKSLinesRecTab.OkcB_LSE_ID(i)
		    ,p_start_date    => OKCOKSLinesRecTab.OkcB_START_DATE(i)
		    ,p_end_date      => OKCOKSLinesRecTab.OkcB_END_DATE(i)
	            ,p_new_cle_id    => OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
                    --npalepu added on 20-mar-2006 for bug # 5102052
                    ,p_new_chr_id    => P_To_Chr_ID
                    --end npalepu
                    );

		    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
		       RAISE G_EXCEPTION_HALT_VALIDATION;
		    END IF;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After instantiate_counters_events'
                   ||', x_return_status ='||l_return_status
                    );
    End If;


   --Copy Line level notes
    OKS_COVERAGES_PVT.COPY_NOTES(p_api_version  =>  p_api_version
                	        ,p_init_msg_list =>  p_init_msg_list
			        ,x_msg_count => x_msg_count
			        ,x_msg_data =>  x_msg_data
			        ,x_return_status =>  l_return_status
 			        ,p_line_id  => OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
			        );
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_COVERAGES_PVT.COPY_NOTES'
                        ,'After call to copy_notes for line: x_return_status:'||l_return_status
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

   END IF; -----End of LSE_ID check in (1,19)

   -----------Generate new Locked_Price_List_Line_ID for line if a value currently exists----------

   Begin
    If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_ID(i) IS NOT NULL) then
     QP_LOCK_PRICELIST_GRP.Lock_Price(p_source_list_line_id     => OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID(i)
	                             ,p_list_source_code        => 'OKS'
				     ,p_orig_system_header_ref     => l_new_contract_number
				     ,p_org_id 			=>   okc_context.get_okc_org_id
				     ,x_locked_price_list_id       => l_locked_price_list_id
				     ,x_locked_list_line_id        => l_locked_price_list_line_id
				     ,x_return_status              => l_return_status
				     ,x_msg_count                  => x_msg_count
				     ,x_msg_data                   => x_msg_data);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.QP_LOCK_PRICELIST_GRP.Lock_Price'
                        ,'After call to Lock_Price API for line: x_return_status :'||l_return_status
                        ||'Old Locked Price List Line ID='||OKCOKSLinesRecTab.OksB_LOCKED_PRICE_LIST_LINE_ID(i)
			||'New Locked Price List Line ID='||l_locked_price_list_line_id
			||'New Locked Price List ID='||l_locked_price_list_id
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

	UPDATE OKS_K_LINES_B
	SET
	 LOCKED_PRICE_LIST_ID = l_locked_price_list_id
	,LOCKED_PRICE_LIST_LINE_ID = l_locked_price_list_line_id
	WHERE ID = OKCOKSLinesRecTab.OksB_NewOksLineID(i)
        AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OksB_OldOksLineID(i);

        If SQL%NOTFOUND then
	  l_return_status := FND_API.G_RET_STS_ERROR;
	  RAISE G_EXCEPTION_HALT_VALIDATION;
	End If;
    End If;
   End;

 ----------------------------------------------------------------------------------------------------
 ------------Generate Transaction Extension for line if a value currently exists--------------------

   Begin
    If (OKCOKSLinesRecTab.OksB_OldOksLineID(i) IS NOT NULL AND OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i) IS NOT NULL) then
        --Generate new transaction extension id;
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'Before call to Create_Transaction_Extension for line in COPY_LINE_COMPONENTS'
                        ||'Old Trxn ID='||OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i)
                         );
        END IF;
       END IF;

        OKS_UTIL_PUB.create_transaction_extension(P_Api_Version => p_api_version
                                      ,P_Init_Msg_List => p_init_msg_list
                                      ,P_Header_ID => NULL
                                      ,P_Line_ID => OKCOKSLinesRecTab.OkcB_NewOKCLineID(i)
                                      ,P_Source_Trx_Ext_ID => OKCOKSLinesRecTab.OksB_TRXN_EXTENSION_ID(i)
				      ,P_Cust_Acct_ID => OKCOKSLinesRecTab.OkcB_CUST_ACCT_ID(i)
                                      ,P_Bill_To_Site_Use_ID => OKCOKSLinesRecTab.OkcB_BILL_TO_SITE_USE_ID(i)
                                      ,x_entity_id => l_trxn_extension_id
                                      ,x_msg_data => x_msg_data
                                      ,x_msg_count => x_msg_count
                                      ,x_return_status => l_return_status) ;



       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'After call to Create_Transaction_Extension for line: x_return_status :'||l_return_status
                        ||'New Trxn ID='||l_trxn_extension_id
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

        UPDATE OKS_K_LINES_B
        SET
         TRXN_EXTENSION_ID = l_trxn_extension_id
        WHERE ID = OKCOKSLinesRecTab.OksB_NewOksLineID(i)
        AND ORIG_SYSTEM_ID1 = OKCOKSLinesRecTab.OksB_OldOksLineID(i);

        If SQL%NOTFOUND then
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'After call to Create_Transaction_Extension, Error in Update OKS_K_LINES_B, row not found for update'
                         );
          END IF;

          l_return_status := FND_API.G_RET_STS_ERROR;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        End If;

    End If;

   End;

 -------------------------------------------------------------------------------------------------
 -----------Copy subscription schedules for subscription lines chosen by user--------
 If (OKCOKSLinesRecTab.OkcB_LSE_ID(i) = 46) then
   Begin
    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKS_SETUP_UTIL_PUB.copy_subscr_inst for Lines chosen by user'
                        ,'Before call to OKS_SETUP_UTIL_PUB.copy_subscr_inst for Lines chosen by user'
			||':'||to_char(sysdate,'DD/MM/YY HH:MI:SS')
                         );
        END IF;
    END IF;

    OKS_SETUP_UTIL_PUB.copy_subscr_inst(p_new_chr_id => P_To_Chr_ID
                                       ,p_cle_id => OKCOKSLinesRecTab.OkcB_NewOkcLineID(i)
				       ,p_intent => 'COPY'
                                       ,x_return_status => l_return_status);

    IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
     IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
      FND_LOG.string(FND_LOG.level_statement
                     ,l_module_name||'.OKS_SETUP_UTIL_PUB.copy_subscr_inst'
                     ,'After call to OKS_SETUP_UTIL_PUB.copy_subscr_inst: x_return_status:'||l_return_status
		      ||':'||to_char(sysdate,'DD/MM/YY HH:MI:SS')
                      ||' '||SQLERRM
                      );
     END IF;
    END IF;

    If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
    End If;

   End;
 End If;

 -- 03-Nov-2006 hkamdar. Bug# 5623498.
 IF OKCOKSLinesRecTab.OkcB_LSE_ID(i) in (7,9,25) AND OKCOKSLinesRecTab.OksB_TOPLVL_UOM_CODE(i) IS NULL THEN


    OPEN get_toplvl_uom(OKCOKSLinesRecTab.OkcB_OldOKCLineID(i));
    FETCH get_toplvl_uom INTO l_toplvl_uom_code;
    CLOSE get_toplvl_uom;

    IF l_toplvl_uom_code IS NOT NULL then
      UPDATE OKS_K_LINES_B
      SET    toplvl_uom_code = l_toplvl_uom_code
      WHERE  id = OKCOKSLinesRecTab.OksB_NewOksLineID(i);
    END IF;

 END IF;
 -- 03-Nov-2006 hkamdar. Bug# 5623498.
 ------------------------------------------------------------------------------------------------

 ------------------------------------------------------------------------------------------------

  END LOOP;
  --------------------End of row by row processing------------------------

          IF p_include_cancelled_lines = 'Y' AND
             p_include_terminated_lines = 'Y' THEN
            EXIT WHEN GetOKCOKSLinesB_Temp%NOTFOUND;
          ELSIF p_include_cancelled_lines = 'N' AND
                p_include_terminated_lines = 'Y' THEN
            EXIT WHEN GetOKCOKSLinesB_Temp_termn%NOTFOUND;
          ELSIF p_include_cancelled_lines = 'Y' AND
                p_include_terminated_lines = 'N' THEN
            EXIT WHEN GetOKCOKSLinesB_Temp_cancel%NOTFOUND;
          ELSIF p_include_cancelled_lines = 'N' AND
                p_include_terminated_lines = 'N' THEN
            EXIT WHEN GetOKCOKSLinesB_Temp_exclude%NOTFOUND;
          END IF;

 END LOOP;

        IF p_include_cancelled_lines = 'Y' AND
           p_include_terminated_lines = 'Y' THEN
          CLOSE GetOKCOKSLinesB_Temp;
        ELSIF p_include_cancelled_lines = 'N' AND
              p_include_terminated_lines = 'Y' THEN
          CLOSE GetOKCOKSLinesB_Temp_termn;
        ELSIF p_include_cancelled_lines = 'Y' AND
              p_include_terminated_lines = 'N' THEN
          CLOSE GetOKCOKSLinesB_Temp_cancel;
        ELSIF p_include_cancelled_lines = 'N' AND
              p_include_terminated_lines = 'N' THEN
          CLOSE GetOKCOKSLinesB_Temp_exclude;
        END IF;

 End;
--------End of BULK FETCH FROM OKC_K_LINES_B_TEMP---------------

END IF; ---End of Check of P_Lines_Tbl.COUNT > 0 *****************
        ---for bulk insert into OKC_K_LINES_B,     *****************
        ---OKS_K_LINES_B,OKC_K_ITEMS               *****************


 ----------------------------------------------------------------------------
 -- Update of OKC_K_LINES_B
 --  ii) PRICE_NEGOTIATED on OKC_K_LINES_B for toplines
 --
 -- Update of OKS_K_LINES_B
 -- iii) COVERAGE_ID on OKS_K_LINES_B for toplines with STANDARD_COV_YN = 'N'
 --  iv) TAX_AMOUNT on OKS_K_LINES_B for all toplines
 --   v) PRICE_UOM on OKS_K_LINES_B as per Partial Period uptake rules, when copying to an existing Target Contract
 ----------------------------------------------------------------------------
 Begin

   UPDATE OKC_K_LINES_B a
   SET a.PRICE_NEGOTIATED = (select sum(b.PRICE_NEGOTIATED)
                             from OKC_K_LINES_B b
			     where b.CLE_ID = a.ID
			     AND b.DNZ_CHR_ID = P_To_Chr_ID
                             AND b.DATE_CANCELLED IS NULL) --Cancelled sublines shouldn't be included in sum
   WHERE
   a.DNZ_CHR_ID = P_To_Chr_ID
   AND a.CLE_ID IS NULL
   AND a.LSE_ID <> 46; -- Subscription Lines do not have sublines. So they shouldnt be updated.


   UPDATE OKS_K_LINES_B a
   SET a.COVERAGE_ID = (select b.ID
  			FROM
                         OKC_K_LINES_B b
                        ,OKC_K_LINES_B_TEMP bt
			WHERE
                        b.ID = bt.ID
			AND b.CLE_ID = a.CLE_ID
			AND b.DNZ_CHR_ID = P_To_Chr_ID
			AND b.LSE_ID in (2,20))
   WHERE a.DNZ_CHR_ID = P_To_Chr_ID
   AND a.STANDARD_COV_YN = 'N'
   AND a.CLE_ID in (SELECT b.ID from OKC_K_LINES_B_TEMP b where b.LINE_EXISTS_YN = 'N'
                    and b.LSE_ID in (1,19));


   UPDATE OKS_K_LINES_B a
   SET a.TAX_AMOUNT = (select sum(b.TAX_AMOUNT)
                       FROM
		       OKS_K_LINES_B b
		      ,OKC_K_LINES_B c
		       WHERE
		       c.ID = b.CLE_ID
		       AND c.cle_id = a.cle_id
		       AND c.DATE_CANCELLED IS NULL) --Cancelled sublines shouldn't be included in sum
   WHERE a.dnz_chr_id = P_To_Chr_ID
   and a.CLE_ID = (select b.id
  		   FROM
		   OKC_K_LINES_B b
		   WHERE b.cle_id is NULL
		   AND b.id = a.cle_id
		   AND b.LSE_ID <> 46); --Subscription Lines do not have sublines. So they shouldnt be updated.

   --If copying to an existing contract:
   ----If the Target Contract has Partial Period Setup on it
        --a) Update Price_UOM of Top Lines and its sublines that were copied, with the Price_UOM of the target header.
        --b) Update Price_UOM of sublines that were copied to existing top lines with that of the Target top line.
   ----Else if the Target Contract doesnt have Partial Period Setup on it
        --Update the Price_UOM on the Top Lines/Sublines being copied with the Source Top Line/Subline PRICE_UOM
	--the Price UOM on the TargetHeader/Top Lines is NOT NULL, else retain the Price_UOM on Source TopLine/Sublines

   IF (P_Target_Contract_New_YN = 'N') then
    IF (l_TrgContractPPSetupExists_YN = 'Y') then --Partial Period Setup exists in Target Contract Header

     --Update price_uom of copied top lines and their sublines
     UPDATE OKS_K_LINES_B a
     SET a.PRICE_UOM = l_Target_Hdr_Price_UOM
     WHERE a.CLE_ID IN (select bt.id from okc_k_lines_b_temp bt
	                where
		        (bt.cle_id is null --Top Line
		         OR
                         (bt.cle_id is not null
                          and bt.line_exists_yn = 'N'
                          -- hkamdar 05-Oct-2006. Bug# 5361663. Removing Customer, Party and Site Covered levels
                          -- as the PRICE_UOM should be NULL for them.
                         -- and bt.lse_id in (7,8,9,10,11,13,25,35) --Covered Level Sublines copied with top line
                          and bt.lse_id in (7,9,11,13,25) --Covered Level Sublines copied with top line
                         -- End hkamdar 05-Oct-2006. Bug# 5361663.
                         )
                        )
                       );

      --Update of PRICE_UOM of Sublines that were copied to existing Top lines.
      UPDATE OKS_K_LINES_B a
      SET a.PRICE_UOM = (select b.price_uom from oks_k_lines_b b
                         where b.cle_id = (select c.cle_id from okc_k_lines_b c
                                           where c.id = a.CLE_ID)
                        )
      WHERE a.CLE_ID IN (select bt.ID from okc_k_lines_b_temp bt
		         where bt.CLE_ID IS NOT NULL
                         and bt.LINE_EXISTS_YN = 'Y'
      -- hkamdar 05-Oct-2006. Bug# 5361663. Removing Customer, Party and Site Covered levels
      -- as the PRICE_UOM should be NULL for them.
                         and bt.lse_id NOT IN (8,10,35)
      -- End hkamdar 05-Oct-2006. Bug# 5361663.
                         );

    ELSIF (l_TrgContractPPSetupExists_YN = 'N') then --Partial Period Setup does not exist in Target Contract Header

    /****Not required: If PPSetup DOES NOT EXIST on Target Header, then the Price UOM on
                       copied Top Lines and its sublines will be same as that of the Source Top Line/Sublines.
     --Update of PRICE_UOM on copied Top Lines and their Sublines
     UPDATE OKS_K_LINES_B a
     SET a.PRICE_UOM = nvl(l_Target_Hdr_Price_UOM,a.PRICE_UOM)
     WHERE a.CLE_ID IN (select bt.id from okc_k_lines_b_temp bt
                        where
                        (bt.cle_id is null --Top Line
                         OR
                         (bt.cle_id is not null
                          and bt.line_exists_yn = 'N'
                          and bt.lse_id in (7,8,9,10,11,13,25,35) --Covered Level Sublines copied with top line
                         )
                        )
                       );
    ******/

      --Update PRICE_UOM of Sub Lines that were copied to existing top lines
      UPDATE OKS_K_LINES_B a
      SET a.PRICE_UOM = nvl(
                            (select b.price_uom from oks_k_lines_b b
                             where b.cle_id = (select c.cle_id from okc_k_lines_b c
                                               where c.id = a.CLE_ID)
                            )
                           ,a.PRICE_UOM
                           )
      WHERE a.CLE_ID IN (select bt.ID from okc_k_lines_b_temp bt
                         where bt.CLE_ID IS NOT NULL
                         and bt.LINE_EXISTS_YN = 'Y'
      -- hkamdar 05-Oct-2006. Bug# 5361663. Removing Customer, Party and Site Covered levels
      -- as the PRICE_UOM should be NULL for them.
                         and bt.lse_id NOT IN (8,10,35)
      -- End hkamdar 05-Oct-2006. Bug# 5361663.
                         );



    END IF; -- End of check for l_TrgContractPPSetupExists_YN = 'Y'
   END IF; --End of check for P_Target_Contract_New_YN = 'N'

  End;
 --------------------------------------------------------------------------------
 --------------------------------------------------------------------------------
 --Update of OKC_K_HEADERS_B.ESTIMATED_AMOUNT and OKS_K_HEADERS_B.TAX_AMOUNT to equal
 --sum of OKC_K_LINES_B.PRICE_NEGOTIATED of all top lines and OKS_K_LINES_B.TAX_AMOUNT
 --of all top lines respectively
  Begin
   UPDATE OKC_K_HEADERS_B a
   SET a.ESTIMATED_AMOUNT = (select sum(b.PRICE_NEGOTIATED)
                             FROM OKC_K_LINES_B b
                             where b.DNZ_CHR_ID = a.ID
                             and b.CLE_ID IS NULL
                             AND b.DATE_CANCELLED IS NULL) --Cancelled toplines shouldn't be included in sum
   WHERE a.ID = P_To_Chr_ID;

   UPDATE OKS_K_HEADERS_B a
   SET a.TAX_AMOUNT = (select sum(b.TAX_AMOUNT)
                       FROM
                       OKS_K_LINES_B b
                      ,OKC_K_LINES_B c
                       where b.DNZ_CHR_ID = a.CHR_ID
                       and b.CLE_ID = c.ID
                       and c.CLE_ID IS NULL
		       and c.DATE_CANCELLED IS NULL) -- Cancelled toplines shouldn't be included in sum
   WHERE a.CHR_ID = P_To_Chr_ID;

  End;
 --------------------------------------------------------------------------------

 -------------Generate new line numbers in OKC_K_LINES_B for newly created lines-----
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
   GenerateNewLineNumber(P_To_Chr_ID => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'Y'
			,P_Target_Contract_New_YN => P_Target_Contract_New_YN
                        ,x_return_status => l_return_Status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.GenerateNewLineNumber'
                         ,'After call to GenerateNewLineNumber for line: x_return_status :'||l_return_status
                          );
         END IF;
        END IF;

       If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
              RAISE G_EXCEPTION_HALT_VALIDATION;
       End If;
  End;
 END IF;
 -------------------------------------------------------------------------------------

 ------------Copy of OKC_K_LINES_TL--------------------------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_k_lines_tl'
                         ,'Before call to copy_okc_k_lines_tl'
                          );
         END IF;
        END IF;
    copy_okc_k_lines_tl(P_From_Chr_ID => P_From_Chr_ID
                    ,P_To_Chr_ID   => P_To_Chr_ID
                    ,P_Partial_Copy_YN => 'Y'
                    ,P_Lines_Count => P_Lines_Tbl.COUNT
                     ,x_return_status => l_return_status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_k_lines_tl'
                         ,'After call to copy_okc_k_lines_tl: x_return_status:'||l_return_status
                          ||' '||SQLERRM
                          );
         END IF;
        END IF;

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
  End;
 END IF;

 --------------------------------------------------------------------------------------
 -----------Copy of OKC_PARTY_ROLES_B------------------------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_k_party_roles_b'
                         ,'Before call to copy_okc_k_party_roles_b'
                          );
         END IF;
        END IF;

   copy_okc_k_party_roles_b(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
   			 ,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_k_party_roles_b'
                         ,'After call to copy_okc_k_party_roles_b: x_return_status:'||l_return_status
                          ||' '||SQLERRM
                          );
         END IF;
        END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
  End;
 END IF;
-------------------------------------------------------------------------------------
------------Copy of OKC_PARTY_ROLES_TL------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_k_party_roles_tl'
                         ,'Before call to copy_okc_k_party_roles_tl'
                          );
         END IF;
        END IF;
   copy_okc_k_party_roles_tl(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
 			 ,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_k_party_roles_tl'
                        ,'After call to copy_okc_k_party_roles_tl: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
  End;
 END IF;
----------------------------------------------------------------------
------------Copy of OKC_CONTACTS--------------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_contacts'
                         ,'Before call to copy_okc_contacts'
                          );
         END IF;
        END IF;
   copy_okc_contacts(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
 			,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_okc_contacts'
                         ,'After call to copy_okc_contacts: x_return_status:'||l_return_status
                          ||' '||SQLERRM
                          );
         END IF;
        END IF;
      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
  End;
 END IF;
-------------------------------------------------------------------------
------------Copy of OKC_PRICE_ATT_VALUES-----------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_att_values'
                        ,'Before call to copy_okc_price_att_values'
                         );
        END IF;
       END IF;
  copy_okc_price_att_values(P_From_Chr_ID => P_From_Chr_ID
                            ,P_To_Chr_ID  => P_To_Chr_ID
                            ,P_Partial_Copy_YN => 'Y'
                            ,P_Target_Contract_New_YN => P_Target_Contract_New_YN
                            ,P_Lines_Count => P_Lines_Tbl.COUNT
                            ,x_return_status => l_return_status) ;

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_att_values'
                        ,'After call to copy_okc_price_att_values: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
---------------------------------------------------------------------
-----------Copy of OKC_PRICE_ADJUSTMENTS---------------------------
 Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_adjustments'
                        ,'Before call to copy_okc_price_adjustments'
                         );
        END IF;
       END IF;

   copy_okc_price_adjustments(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'Y'
			,P_Target_Contract_New_YN => P_Target_Contract_New_YN
                        ,P_Lines_Count => P_Lines_Tbl.COUNT
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_okc_price_adjustments'
                        ,'After call to copy_okc_price_adjustments: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
 End;
--------------------------------------------------------------------
------------Copy of OKS_K_LINES_TL---------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_oks_k_lines_tl'
                         ,'Before call to copy_oks_k_lines_tl'
                          );
         END IF;
        END IF;
   copy_oks_k_lines_tl(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
 			,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_oks_k_lines_tl'
                         ,'After call to copy_oks_k_lines_tl: x_return_status:'||l_return_status
                          ||' '||SQLERRM
                          );
         END IF;
        END IF;

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
  End;
 END IF;
---------------------------------------------------------------------
------------Copy of OKS_REV_DISTRIBUTIONS--------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_oks_rev_distributions'
                         ,'Before call to copy_oks_rev_distributions'
                          );
         END IF;
       END IF;

   copy_oks_rev_distributions(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
 			,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_oks_rev_distributions'
                         ,'After call to copy_oks_rev_distributions: x_return_status:'||l_return_status
                          ||' '||SQLERRM
                          );
         END IF;
        END IF;

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
  End;
 END IF;
---------------------------------------------------------------------
-------------Copy of OKS_QUALIFIERS----------------------------------
 IF (P_Lines_Tbl.COUNT > 0) then
  Begin
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_oks_qualifiers'
                         ,'Before call to copy_oks_qualifiers'
                          );
         END IF;
        END IF;

   copy_oks_qualifiers(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
 			,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                         ,l_module_name||'.copy_oks_qualifiers'
                         ,'After call to copy_oks_qualifiers: x_return_status:'||l_return_status
                          ||' '||SQLERRM
                          );
         END IF;
        END IF;

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
  End;
 END IF;
----------------------------------------------------------------------

--------------Update Invoice Rule ID and Accounting Rule ID on all copied top lines (if NULL)----
--------------with that on header. This routine at the same populates the Package variables for
--------------Header Billing attributes
  IF (P_Lines_Tbl.COUNT > 0) then
    update_line_inv_and_acct_rule(P_To_Chr_ID => P_To_Chr_ID
   			         ,P_Partial_Copy_YN => 'Y'
			         ,x_return_status => l_return_status
                                 );
  END IF;
-------------------------------------------------------------------------------------------------
--errorout_hk('Copy Line Components, P_Target_Contract_New_YN-'||P_Target_Contract_New_YN||',l_SrcContractPPSetupExists_YN-'||l_SrcContractPPSetupExists_YN);
--errorout_hk('Copy Line Components, l_GCDPPSetupExists_YN-'||l_GCDPPSetupExists_YN);
  --================Start of Billing Schedule copy for Header and Lines==========
  IF (P_Target_Contract_New_YN = 'Y') then
   IF ( (l_SrcContractPPSetupExists_YN = 'Y') OR (l_SrcContractPPSetupExists_YN = 'N' AND l_GCDPPSetupExists_YN = 'N')) THEN
        -- Bulk Copy of Billing Schedule can be done from Source
--errorout_hk('Copy Line Components, Copy of bill sch');
   -------------Copy of OKS_STREAM_LEVELS_B---------------------------
    Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_stream_levels_b'
                        ,'Before call to copy_oks_stream_levels_b'
                         );
        END IF;
       END IF;

      copy_oks_stream_levels_b(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'Y'
  	                      ,P_Target_Contract_New_YN => P_Target_Contract_New_YN
                              ,P_Lines_Count => P_Lines_Tbl.COUNT
                              ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_stream_levels_b'
                        ,'After call to copy_oks_stream_levels_b: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  -------------------------------------------------------------------

    -------------Copy of OKS_LEVEL_ELEMENTS---------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_level_elements'
                        ,'Before call to copy_oks_level_elements'
                         );
        END IF;
       END IF;

    copy_oks_level_elements(P_From_Chr_ID => P_From_Chr_ID
                          ,P_To_Chr_ID   => P_To_Chr_ID
                          ,P_Partial_Copy_YN => 'Y'
                          ,P_Target_Contract_New_YN => P_Target_Contract_New_YN
                          ,P_Lines_Count => P_Lines_Tbl.COUNT
                          ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_level_elements'
                        ,'After call to copy_oks_level_elements: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  --------------------------------------------------------------------
  --------------Copy of Billing schedules for Skipped Lines-----------
   Begin
      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
       IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
        FND_LOG.string(FND_LOG.level_statement
                       ,l_module_name||'.copy_bsch_for_SkippedLines'
                       ,'Before call to copy_bsch_for_SkippedLines'
                        );
       END IF;
      END IF;

    copy_bsch_for_SkippedLines(P_To_Chr_ID  => P_To_Chr_ID
            			     ,P_From_Chr_ID => P_From_Chr_ID
       			     ,P_Partial_Copy_YN => 'Y'
                             ,p_init_msg_list => p_init_msg_list
                             ,x_return_status => l_return_status
                             ,x_msg_count => x_msg_count
                             ,x_msg_data => x_msg_data);
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_bsch_for_SkippedLines'
                        ,'After call to copy_bsch_for_SkippedLines: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
         END IF;
        END IF;



      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;

   End;
  --------------------------------------------------------------------
  ELSIF (l_SrcContractPPSetupExists_YN = 'N' AND l_GCDPPSetupExists_YN = 'Y') THEN
  --errorout_hk('Copy Line Components, SRC PP Setup  N and GCD exists, calling create_bsch_using_ppsetup');
        create_bsch_using_PPSetup(P_To_Chr_ID        => P_To_Chr_ID
                                ,P_From_Chr_ID      => P_From_Chr_ID
                                ,P_Partial_Copy_YN  => 'Y'
                                ,P_Target_Contract_New_YN => 'Y'
                                ,p_init_msg_list    => p_init_msg_list
                                ,x_return_status    => l_return_status
                                ,x_msg_count        => x_msg_count
                                ,x_msg_data         => x_msg_data);

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;


  END IF; -- End of l_SrcContractPPSetupExists_YN check

 ELSIF (P_Target_Contract_New_YN = 'N') THEN

  IF (P_Lines_Tbl.COUNT > 0) then
  --errorout_hk('Copy Line Components, Target is Existing, calling create_bsch_using_ppsetup');
        create_bsch_using_PPSetup(P_To_Chr_ID        => P_To_Chr_ID
                                 ,P_From_Chr_ID      => P_From_Chr_ID
				 ,P_Partial_Copy_YN  => 'Y'
				 ,P_Target_Contract_New_YN => 'N'
				 ,p_init_msg_list    => p_init_msg_list
				 ,x_return_status    => l_return_status
				 ,x_msg_count        => x_msg_count
				 ,x_msg_data         => x_msg_data);

      If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
          RAISE G_EXCEPTION_HALT_VALIDATION;
      End If;
  END IF;

 END IF; --End of P_Target_Contract_New_YN check
 --================End of Billing Schedule copy===============================

 --================Start of Coverage Schedule copy for Lines==================

 IF (P_Lines_Tbl.COUNT > 0) then
   -------------Copy of OKS_COVERAGE_TIMEZONES------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_coverage_timezones'
                        ,'Before call to copy_oks_coverage_timezones'
                         );
        END IF;
       END IF;

   copy_oks_coverage_timezones(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'Y'
			      ,P_Lines_Count => P_Lines_Tbl.COUNT
                              ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_coverage_timezones'
                        ,'After call to copy_oks_coverage_timezones: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
   -------------Copy of OKS_COVERAGE_TIMES-----------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_coverage_times'
                        ,'Before call to copy_oks_coverage_times'
                         );
        END IF;
       END IF;

   copy_oks_coverage_times(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'Y'
	          	      ,P_Lines_Count => P_Lines_Tbl.COUNT
                              ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_coverage_times'
                        ,'After call to copy_oks_coverage_times: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
 END IF;
  --=======================End of Coverage Schedule copy==========================

 --=======================Start of PM Schedule Copy for Line=====================

 IF (P_Lines_Tbl.COUNT > 0) then
  -------------Copy of OKS_PM_ACTIVITIES-------------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_pm_activities'
                        ,'Before call to copy_oks_pm_activities'
                         );
        END IF;
       END IF;

   copy_oks_pm_activities(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
			 ,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_pm_activities'
                        ,'After call to copy_oks_pm_activities: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  --------------Copy of OKS_PM_STREAM_LEVELS---------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_pm_stream_levels'
                        ,'Before call to copy_oks_pm_stream_levels'
                         );
        END IF;
       END IF;

   copy_oks_pm_stream_levels(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
			 ,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_pm_stream_levels'
                        ,'After call to copy_oks_pm_stream_levels: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;

  ---------------------------------------------------------------------
  -------------Copy of OKS_PM_SCHEDULES--------------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_pm_schedules'
                        ,'Before call to copy_oks_pm_schedules'
                         );
        END IF;
       END IF;

   copy_oks_pm_schedules(P_From_Chr_ID => P_From_Chr_ID
                         ,P_To_Chr_ID   => P_To_Chr_ID
                         ,P_Partial_Copy_YN => 'Y'
			 ,P_Lines_Count => P_Lines_Tbl.COUNT
                         ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_pm_schedules'
                        ,'After call to copy_oks_pm_schedules: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  --------Creation of PM Stream Levels and PM Schedules for those lines whose dates were changed to fit the target-----
  Begin
  copy_pm_for_SkippedLines(p_api_version  => p_api_version
			      ,p_init_msg_list => p_init_msg_list
			      ,P_To_Chr_ID => P_To_Chr_ID
                              ,x_return_status => l_return_status
                              ,x_msg_count  => x_msg_count
                              ,x_msg_data   => x_msg_data);

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
  End;
 ----------------------------------------------------------------------

 END IF;
 --=====================End of PM Schedule Copy=================================

 --=====================Start of Action Times copy for Lines====================

 IF (P_Lines_Tbl.COUNT > 0) then
  --------------Copy of OKS_ACTION_TIME_TYPES-------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_action_time_types'
                        ,'Before call to copy_oks_action_time_types'
                         );
        END IF;
       END IF;


   copy_oks_action_time_types(P_From_Chr_ID => P_From_Chr_ID
                             ,P_To_Chr_ID   => P_To_Chr_ID
                             ,P_Partial_Copy_YN => 'Y'
			     ,P_Lines_Count => P_Lines_Tbl.COUNT
                             ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_action_time_types'
                        ,'After call to copy_oks_action_time_types: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
  --------------Copy of OKS_ACTION_TIMES-------------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_action_times'
                        ,'Before call to copy_oks_action_times'
                         );
        END IF;
       END IF;

   copy_oks_action_times(P_From_Chr_ID => P_From_Chr_ID
                        ,P_To_Chr_ID   => P_To_Chr_ID
                        ,P_Partial_Copy_YN => 'Y'
			,P_Lines_Count => P_Lines_Tbl.COUNT
                        ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_action_times'
                        ,'After call to copy_oks_action_times: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------
 END IF;

 --=====================End of Action Times copy================================

 --=====================Start of BillRate Schedule copy for Lines===============

 IF (P_Lines_Tbl.COUNT > 0) then
  --------------Copy of OKS_BILLRATE_SCHEDULES-------------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_bill_rate_schedules'
                        ,'Before call to copy_oks_bill_rate_schedules'
                         );
        END IF;
       END IF;

   copy_oks_billrate_schedules(P_From_Chr_ID => P_From_Chr_ID
                              ,P_To_Chr_ID   => P_To_Chr_ID
                              ,P_Partial_Copy_YN => 'Y'
			      ,P_Lines_Count => P_Lines_Tbl.COUNT
                              ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_bill_rate_schedules'
                        ,'After call to copy_oks_bill_rate_schedules: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;

  ---------------------------------------------------------------------
 END IF;

 --=====================End of BillRate Schedule copy============================


   ---------------Copy of OKS_K_SALES_CREDITS---------------------------
   Begin
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_k_sales_credits'
                        ,'Before call to copy_oks_k_sales_credits'
                         );
        END IF;
       END IF;

   copy_oks_k_sales_credits(P_From_Chr_ID => P_From_Chr_ID
                           ,P_To_Chr_ID   => P_To_Chr_ID
                           ,P_Partial_Copy_YN => 'Y'
			   ,P_Target_Contract_New_YN => P_Target_Contract_New_YN
                           ,P_Lines_Count => P_Lines_Tbl.COUNT
                           ,x_return_status => l_return_status);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_oks_k_sales_credits'
                        ,'After call to copy_oks_k_sales_credits: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

     If (l_return_status <> FND_API.G_RET_STS_SUCCESS) then
         RAISE G_EXCEPTION_HALT_VALIDATION;
     End If;
   End;
  ---------------------------------------------------------------------


    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.End'
                        ,',x_return_status='||x_return_status
			||', P_To_Chr_ID ='||P_To_Chr_ID
                         );
      END IF;
    END IF;



  EXCEPTION
  WHEN G_EXCEPTION_HALT_VALIDATION then
    x_return_status := l_return_status;
      IF GetOKCOKSLinesB_Temp%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Temp;
      ELSIF GetOKCOKSLinesB_Temp_termn%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Temp_termn;
      ELSIF GetOKCOKSLinesB_Temp_cancel%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Temp_cancel;
      ELSIF GetOKCOKSLinesB_Temp_exclude%ISOPEN THEN
        CLOSE GetOKCOKSLinesB_Temp_exclude;
      END IF;

    OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
    RETURN;

End copy_line_components;

--=================================End Copy_Line_Components=========================================

--===================================Start COPY_CONTRACT===========================================
  ----------------------------------------------------------------------------
  --Proceudre copy_contract. Copies the contract header and all its components.
  ----------------------------------------------------------------------------
  PROCEDURE copy_contract(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_commit			          IN VARCHAR2 ,
    p_chr_id                  	   IN NUMBER,
    p_contract_number		   IN VARCHAR2,
    p_contract_number_modifier     IN VARCHAR2,
    p_to_template_yn			   IN VARCHAR2,
    P_renew_ref_yn                 IN VARCHAR2,
    x_to_chr_id                       OUT NOCOPY NUMBER,
    p_include_cancelled_lines  IN VARCHAR2 DEFAULT 'Y',
    p_include_terminated_lines IN VARCHAR2 DEFAULT 'Y') IS

    l_api_name        CONSTANT VARCHAR2(30) := 'COPY_CONTRACT';
    l_module_name     VARCHAR2(256) := G_APP_NAME || '.plsql.' || G_PKG_NAME || '.' || l_api_name;

    l_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    --l_old_return_status	        VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_to_chr_id			NUMBER;
    l_cle_id_out		NUMBER;
    l_rgp_id			NUMBER;
    l_cat_id			NUMBER;
    l_cpl_id			NUMBER;
    l_cnh_id			NUMBER;
    l_result			BOOLEAN;
    l_category          VARCHAR2(200); --added for bug 3672759

    --11510
    l_source_doc_type VARCHAR2(60);
    l_source_doc_ID   NUMBER;
    l_target_doc_type VARCHAR2(60);
    l_target_doc_id   NUMBER;
    l_keep_version VARCHAR2(1);
    l_eff_date DATE;


    -- 11510 get chr start date for effective date for copy_doc
    CURSOR c_art_eff_date (p_doc_type VARCHAR2,p_doc_id NUMBER) IS
    SELECT article_effective_date
     FROM okc_template_usages_v
     WHERE document_type=p_doc_type AND document_id=p_doc_id;
---------------------------------------------------
    CURSOR GetHdrTrxnInfo IS
    SELECT
     oks.TRXN_EXTENSION_ID
    ,okc.BILL_TO_SITE_USE_ID
    FROM
     OKC_K_HEADERS_ALL_B okc
    ,OKS_K_HEADERS_B oks
    WHERE
    okc.id = oks.chr_id
    and okc.id = p_chr_id;

    l_Hdr_Bill_To_Site_Use_ID NUMBER;
    l_Hdr_Old_Trxn_Extn_ID NUMBER;
    l_Hdr_New_Trxn_Extn_ID NUMBER;


---------------------------------------------------

  BEGIN


    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
			,l_module_name||'.Begin'
			,'p_chr_id='|| p_chr_id
			 ||',p_contract_number='||p_contract_number
			 ||',p_contract_number_modifier='||p_contract_number_modifier
			 ||',p_renew_ref_yn='||p_renew_ref_yn
			 ||',p_to_template_yn='||p_to_template_yn
			 ||',p_commit='||p_commit);
      END IF;
    END IF;

    SAVEPOINT copy_contract;


----------------------------------------------------
    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'Before Is_Copy_Allowed'
                    );
    End If;

    l_result := IS_COPY_ALLOWED(p_chr_id, NULL);

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After Is_Copy_Allowed'
                    );
    End If;

    IF NOT l_result Then
	 -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_ERROR;
      RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

    -- Intitialize globals.
    /***
    IF g_events.COUNT > 0 THEN
       g_events.DELETE;
    END IF;
    ***/

    IF g_op_lines.COUNT > 0 THEN
	  g_op_lines.DELETE;
    END IF;



    x_return_status := l_return_status;

     IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Copy_Contract_Header'
                        ,'Before call to Copy_Contract_Header'
                         );
      END IF;
    END IF;

    copy_contract_header(
	      p_api_version		     => p_api_version,
           p_init_msg_list		=> p_init_msg_list,
           x_return_status 		=> l_return_status,
           x_msg_count     		=> x_msg_count,
           x_msg_data      		=> x_msg_data,
           p_from_chr_id	        => p_chr_id,
           p_contract_number		=> p_contract_number,
           p_contract_number_modifier	=> p_contract_number_modifier,
	      p_to_template_yn        => p_to_template_yn,
	      p_renew_ref_yn          => p_renew_ref_yn,
           x_to_chr_id	           => l_to_chr_id);

    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Copy_Contract_Header'
                        ,'After call to Copy_Contract_Header x_return_status='||l_return_status
                         );
      END IF;
    END IF;

    IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        x_return_status := l_return_status;
        RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

    x_to_chr_id := l_to_chr_id; --the new contract header id is passed out.

--===================================Start of Copy Events========================================
 --Header Level condition copy no longer supported
--=================================End of Copy Events============================================

--=================================Start of Copy Contract Document===============================
    l_keep_version := 'Y';
     OKC_TERMS_UTIL_GRP.Get_Contract_Document_Type_ID(
        p_api_version   => p_api_version,
        x_return_status => l_return_status,
        x_msg_data      => x_msg_data,
        x_msg_count     => x_msg_count,
        p_chr_id        => p_chr_id,
        x_doc_id        => l_source_doc_id,
        x_doc_type      => l_source_doc_type
    );

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        --  IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        --  ELSE
        --    IF l_old_return_status <> FND_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
        --      x_return_status := l_return_status;
        --    END IF;
        --  END IF;
        END IF;

     OKC_TERMS_UTIL_GRP.Get_Contract_Document_Type_ID(
        p_api_version   => p_api_version,
        x_return_status => l_return_status,
        x_msg_data      => x_msg_data,
        x_msg_count     => x_msg_count,
        p_chr_id        => l_to_chr_id,
        x_doc_id        => l_target_doc_id,
        x_doc_type      => l_target_doc_type);

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        --  IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        --  ELSE
        --    IF l_old_return_status <> FND_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
        --      x_return_status := l_return_status;
        --    END IF;
        --  END IF;
        END IF;
    OPEN c_art_eff_date(l_source_doc_type, l_source_doc_id);
    FETCH c_art_eff_date INTO l_eff_date;
    CLOSE c_art_eff_date;

      IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
       IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                       ,l_module_name||'.OKC_TERMS_COPY_GRP.copy_doc'
                       ,'Before call to OKC_TERMS_COPY_GRP.copy_doc'
		        );
       END IF;
      END IF;

      OKC_TERMS_COPY_GRP.copy_doc(
        p_api_version	     => p_api_version,
        x_return_status 	     => l_return_status,
        x_msg_count     	     => x_msg_count,
        x_msg_data      	     => x_msg_data,
        p_source_doc_type      => l_source_doc_type,
        p_source_doc_id        => l_source_doc_id,
        p_target_doc_type      => l_target_doc_type,
        p_target_doc_id        => l_target_doc_id,
        p_keep_version         => l_keep_version,
        p_article_effective_date => Nvl(l_eff_date,Sysdate),
        p_document_number      => p_contract_number,
        p_allow_duplicate_terms=>'Y');

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.OKC_TERMS_COPY_GRP.copy_doc'
                        ,'After call to OKC_TERMS_COPY_GRP.copy_doc: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        --  IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        --  ELSE
        --    IF l_old_return_status <> FND_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
        --      x_return_status := l_return_status;
        --    END IF;
        --  END IF;
        END IF;
--================================End of Copy Contract Document===================================

--===================-Start of Copy OKS Header attributes ========================================
      /*--Call to copy source contract record in OKS_K_HEADERS_B */
	  IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
	    IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
	      FND_LOG.string(FND_LOG.level_statement
	          ,l_module_name||'.oks_setup_util_pub.copy_hdr_attr'
	          ,'Before call to oks_setup_util_pub.copy_hdr_attr'
	        	 ||' P_From_Chr_ID = '||p_chr_id
			 ||',P_To_Chr_ID = '||l_to_chr_id
			       );
	    END IF;
	  END IF;

       OKS_SETUP_UTIL_PUB.copy_hdr_attr
	                       (p_chr_id        => p_chr_id --Source Contract Header ID
			       ,p_new_chr_id    => l_to_chr_id --Target Contract Header ID
			       ,p_duration_match => NULL
			       ,p_renew_ref_YN => P_Renew_Ref_YN
			       ,x_return_status => l_return_status);
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.oks_setup_util_pub.copy_hdr_attr'
                        ,'After call to oks_setup_util_pub.copy_hdr_attr: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

	  IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
	      x_return_status := l_return_status;
	      RAISE G_EXCEPTION_HALT_VALIDATION;
	  END IF;
--===================End of Copy OKS Header attributes===========================================

--==================Generate new transaction extension for Header================================

   Begin
   --Get Header Trxn ID and Bill_To_Site_Use_ID--

   OPEN GetHdrTrxnInfo;
   FETCH GetHdrTrxnInfo into l_Hdr_Old_Trxn_Extn_ID,l_Hdr_Bill_To_Site_Use_ID;
   CLOSE GetHdrTrxnInfo;

    If (l_Hdr_Old_Trxn_Extn_ID IS NOT NULL AND l_Hdr_Bill_To_Site_Use_ID IS NOT NULL) then

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'Before call to Create_Transaction_Extension for Header in COPY_CONTRACT'
			||'Bill to site use id='||l_Hdr_Bill_To_Site_Use_ID
                        ||'Old Trxn ID='||l_Hdr_Old_Trxn_Extn_ID
                         );
        END IF;
       END IF;

        OKS_UTIL_PUB.create_transaction_extension(P_Api_Version => p_api_version
                                      ,P_Init_Msg_List => p_init_msg_list
                                      ,P_Header_ID => l_to_chr_id
                                      ,P_Line_ID => NULL
                                      ,P_Source_Trx_Ext_ID => l_Hdr_Old_Trxn_Extn_ID
				      ,P_Cust_Acct_ID => NULL
                                      ,P_Bill_To_Site_Use_ID => l_Hdr_Bill_To_Site_Use_ID
                                      ,x_entity_id => l_Hdr_New_Trxn_Extn_ID
                                      ,x_msg_data => x_msg_data
                                      ,x_msg_count => x_msg_count
                                      ,x_return_status => l_return_status) ;


       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'After call to Create_Transaction_Extension for Header: x_return_status :'||l_return_status
                        ||'New Trxn ID='||l_Hdr_New_Trxn_Extn_ID
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

       UPDATE OKS_K_HEADERS_B
       SET TRXN_EXTENSION_ID = l_Hdr_New_Trxn_Extn_ID
       WHERE CHR_ID = l_to_chr_id;

        If SQL%NOTFOUND then
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'Error in Update OKS_K_HEADERS_B, row not found for update'
                         );
          END IF;
         l_return_status := FND_API.G_RET_STS_ERROR;
         RAISE G_EXCEPTION_HALT_VALIDATION;
        End If;


   End If;
  End;

--==================End of Generate new transaction extension for Header=========================

--===================Start of Copy OKS Header Notes=============================================
     /*--Call to copy Header notes -----*/
	IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
	 IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
	  FND_LOG.string(FND_LOG.level_statement
	  		     ,l_module_name||'.oks_coverages_pvt.copy_k_hdr_notes'
				,'Before call to oks_coverages_pvt.copy_k_hdr_notes'
				);
	 END IF;
	END IF;

     OKS_COVERAGES_PVT.COPY_K_HDR_NOTES(
	     p_api_version           => p_api_version,
		p_init_msg_list         => p_init_msg_list,
		p_chr_id                => l_to_chr_id, --Target Contract Header ID
		x_return_status         => l_return_status,
		x_msg_count             => x_msg_count,
		x_msg_data              => x_msg_data);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.oks_coverages_pvt.copy_k_hdr_notes'
                        ,'After call to oks_coverages_pvt.copy_k_hdr_notes: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR OR
            l_return_status = FND_API.G_RET_STS_ERROR) THEN
         x_return_status := l_return_status;
         RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
	     x_return_status := l_return_status; -- donot raise exception if l_return_status = 'W'
	END IF;
       END IF;
--=====================End of Copy OKS Header Notes=============================================

--=====================Start of Copy Lines=====================================================
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_lines'
                        ,'Before call to copy_lines , P_From_Chr_ID='||p_chr_id
                       ||' P_To_Chr_ID='||l_to_chr_id
		       ||' P_Renew_Ref_YN='||P_Renew_Ref_YN
		       ||'x_return_status ='||x_return_status
 		       ||'Time Stamp before copy_lines :'||to_char(sysdate,'DD-MON-YYYY HH:MI:SS')
                         );
        END IF;
       END IF;
       copy_lines(
          p_api_version      => p_api_version
         ,p_init_msg_list    => p_init_msg_list
         ,x_return_status    => l_return_status
         ,x_msg_count        => x_msg_count
         ,x_msg_data         => x_msg_data
         ,P_From_Chr_ID      => p_chr_id
         ,P_To_Chr_ID        => l_to_chr_id
         ,P_Renew_Ref_YN     => P_Renew_Ref_YN
	 ,p_include_cancelled_lines => p_include_cancelled_lines
	 ,p_include_terminated_lines => p_include_terminated_lines) ;

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_lines'
                        ,'After call to copy_lines: x_return_status:'||l_return_status
                         ||' '||SQLERRM
 		         ||'Time Stamp after copy_lines:'||to_char(sysdate,'DD-MON-YYYY HH:MI:SS')
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR OR
            l_return_status = FND_API.G_RET_STS_ERROR) THEN
         x_return_status := l_return_status;
         RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status; -- donot raise exception if l_return_status = 'W'
        END IF;
       END IF;
--=====================End of Copy Lines======================================================


  IF (l_debug = 'Y') THEN
     OKC_DEBUG.log('10000 : Exiting Copy_contract ', 2);
     OKC_DEBUG.ReSet_Indentation;
  END IF;

/*
 IF FND_API.to_boolean(p_commit) THEN
                    COMMIT;
 END IF;
*/



  IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
    IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.End'
                        ,'x_to_chr_id='||x_to_chr_id
                        ||',x_return_status='||x_return_status);
    END IF;
  END IF;

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
            ROLLBACK to copy_contract;
	    IF (l_debug = 'Y') THEN
              null;
   	    OKC_DEBUG.ReSet_Indentation;
	    END IF;

    WHEN OTHERS THEN
      ROLLBACK to copy_contract;
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
	 FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));

  END COPY_CONTRACT;
--=========================================End COPY_CONTRACT=============================================

--====================================================================
--Function StatusFitsQAHoldCriteria(p_current_status IN VARCHAR2)
--Function to check to see if the current status of the contract fits the criteria to be changed to QA_HOLD
--===================================================================
 Function SeedStatus(p_current_status IN VARCHAR2) RETURN VARCHAR2 IS
l_result OKC_STATUSES_B.STE_CODE%TYPE;
 Begin
   select ste_code
   into l_result
   from okc_statuses_b
   where code = p_current_status;

      RETURN l_result;

        EXCEPTION
          WHEN OTHERS THEN
	   l_result := NULL;
	   FND_MSG_PUB.add_exc_msg(g_pkg_name, 'Error in SeedStatus' , substr(SQLERRM,1,240));
           IF (FND_LOG.level_unexpected >= FND_LOG.g_current_runtime_level) THEN
            FND_LOG.string(FND_LOG.level_unexpected
                   ,'SeedStatus.EXCEPTION'
                   ,'Exception in call to SeedStatus : SQLERRM ='||SQLERRM
                         );
           END IF;
 End SeedStatus;

------------------------------------------------------------------------------

--=======================================================================================
--Procedure Party_Cleanup(P_To_Chr_ID IN NUMBER
--			 ,x_return_status OUT NOCOPY VARCHAR2)
--Nulls out all the accounts and other party related information at the Header and Line levels if no parties exist
--at the Contract Header level
--======================================================================================
  PROCEDURE Party_Cleanup(P_To_Chr_ID IN NUMBER
                         --npalepu added on 5/8/2006 for bug # 5116858
                         ,P_From_Chr_ID IN NUMBER
                         --end npalepu
		         ,P_Target_Contract_New_YN IN VARCHAR2
			 ,x_return_status OUT NOCOPY VARCHAR2) IS

   l_stage VARCHAR2(100);
   CURSOR l_party_csr(P_To_Chr_ID IN  NUMBER) IS
   SELECT count(ID)
   FROM okc_k_party_roles_b
   WHERE dnz_chr_id = P_To_Chr_ID
   AND jtot_object1_code = 'OKX_PARTY'
   --npalepu added on  for bug # 5116858
   AND RLE_CODE in ('CUSTOMER','SUBSCRIBER')
   --end npalepu
   AND cle_id is null;

   --npalepu added on 5/8/2006 for bug # 5116858
   CURSOR l_party_comp_csr IS
   SELECT COUNT(*) FROM
   (SELECT RLE_CODE,jtot_object1_code
   FROM okc_k_party_roles_b
   WHERE dnz_chr_id = P_From_Chr_ID
   AND cle_id is null
   MINUS
   SELECT RLE_CODE,jtot_object1_code
   FROM okc_k_party_roles_b
   WHERE dnz_chr_id = P_To_Chr_ID
   AND cle_id is null);

   l_party_comp_count NUMBER;
   --end npalepu

   l_api_name        CONSTANT VARCHAR2(30) := 'Party_Cleanup';
   l_module_name     VARCHAR2(256) := G_APP_NAME ||'.plsql.' || G_PKG_NAME || '.' || l_api_name;
   l_party_count NUMBER;

  Begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;

  OPEN l_party_csr(P_To_Chr_ID);
  FETCH l_party_csr into l_party_count;
  CLOSE l_party_csr;

  If l_party_count = 0 then
   Begin
   --Update OKC_K_HEADERS--

    l_stage := 'Updating OKC_K_HEADERS_ALL_B';

    UPDATE OKC_K_HEADERS_ALL_B
    SET
     CUST_ACCT_ID = NULL
    ,BILL_TO_SITE_USE_ID = NULL
    ,SHIP_TO_SITE_USE_ID = NULL
    ,CUST_PO_NUMBER = NULL
    ,CUST_PO_NUMBER_REQ_YN = NULL
    ,OBJECT_VERSION_NUMBER = decode(P_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
    --npalepu added on 5/17/2006 for bug # 5116858
    ,PAYMENT_INSTRUCTION_TYPE = NULL
    --end npalepu
    WHERE ID = P_To_Chr_ID;

    --Update OKS_K_HEADERS--
    l_stage := 'Updating OKS_K_HEADERS_B';
    UPDATE OKS_K_HEADERS_B
    SET
     quote_to_contact_id = NULL
    ,quote_to_site_id = NULL
    ,quote_to_email_id = NULL
    ,quote_to_phone_id = NULL
    ,quote_to_fax_id = NULL
    ,commitment_id = NULL
    ,payment_type = NULL
    --npalepu added on 23-may-2006 for bug # 5116858
    ,TRXN_EXTENSION_ID = NULL
    --end npalepu
    ,service_po_number = NULL
    ,service_po_required = NULL
    ,renewal_po_number = NULL
    ,renewal_po_required = NULL
    ,renewal_po_used = NULL
    ,object_version_number = decode(P_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
    WHERE CHR_ID = P_To_Chr_ID;

   --Update OKC_K_LINES_B--
    l_stage := 'Updating OKC_K_LINES_B';
    UPDATE OKC_K_LINES_B
    SET
     cust_acct_id = NULL
    ,bill_to_site_use_id = NULL
    ,ship_to_site_use_id = NULL
    ,object_version_number = decode(P_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
    --npalepu added on 5/17/2006 for bug # 5116858
    ,PAYMENT_INSTRUCTION_TYPE = NULL
    --end npalepu
    WHERE DNZ_CHR_ID = P_To_Chr_ID
    AND CLE_ID IS NULL;

   --Update OKS_K_LINES_B--
    l_stage := 'Updating OKS_K_LINES_B';
    UPDATE OKS_K_LINES_B
    SET
     commitment_id = null
    ,cust_po_number = null
    ,cust_po_number_req_yn = null
    ,payment_type = null
    ,CC_NO = null
    ,CC_EXPIRY_DATE = null
    ,CC_BANK_ACCT_ID = null
    ,CC_AUTH_CODE = null
    ,TRXN_EXTENSION_ID = null
    ,object_version_number = decode(P_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
    WHERE DNZ_CHR_ID = P_To_Chr_ID
    AND CLE_ID in (select ID from okc_k_lines_b where DNZ_CHR_ID = P_To_Chr_ID and CLE_ID IS NULL);

   --Delete line level party contacts--
    l_stage := 'Deleting from OKC_CONTACTS';
    DELETE from okc_contacts
    where cpl_id in (SELECT ID from OKC_K_PARTY_ROLES_B WHERE DNZ_CHR_ID = P_To_Chr_ID
                     --npalepu removed the condition on 5/8/2006 for bug # 5116858
                     /* and JTOT_OBJECT1_CODE = 'OKX_PARTY'  */
                     --end npalepu
                     and CLE_ID is NOT NULL);

   --Delete line level party roles--
    l_stage := 'Deleting from OKC_K_PARTY_ROLES_B';
    DELETE from okc_k_party_roles_b
    where dnz_chr_id = P_To_Chr_ID
    --npalepu removed the condition on 5/8/2006 for bug # 5116858
    /* and jtot_object1_code = 'OKX_PARTY' */
    --end npalepu
    and cle_id is not null;

   End;

  --npalepu added on 5/8/2006 for bug # 5116858
  ELSE
        OPEN l_party_comp_csr;
        FETCH l_party_comp_csr INTO l_party_comp_count;
        CLOSE l_party_comp_csr;

        IF l_party_comp_count > 0 THEN
          Begin
                --Update OKC_K_LINES_B--
                l_stage := 'Updating OKC_K_LINES_B';
                UPDATE OKC_K_LINES_B
                SET
                cust_acct_id = NULL
                ,bill_to_site_use_id = NULL
                ,ship_to_site_use_id = NULL
                ,object_version_number = decode(P_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
                ,PAYMENT_INSTRUCTION_TYPE = NULL
                WHERE DNZ_CHR_ID = P_To_Chr_ID
                AND CLE_ID IS NULL
                AND id in (SELECT ID FROM OKC_K_LINES_B_TEMP);

                --Update OKS_K_LINES_B--
                l_stage := 'Updating OKS_K_LINES_B';
                UPDATE OKS_K_LINES_B
                SET
                commitment_id = null
                ,cust_po_number = null
                ,cust_po_number_req_yn = null
                ,payment_type = null
                ,CC_NO = null
                ,CC_EXPIRY_DATE = null
                ,CC_BANK_ACCT_ID = null
                ,CC_AUTH_CODE = null
                ,TRXN_EXTENSION_ID = null
                ,object_version_number = decode(P_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
                WHERE DNZ_CHR_ID = P_To_Chr_ID
                AND CLE_ID in (select ID from okc_k_lines_b where DNZ_CHR_ID = P_To_Chr_ID and CLE_ID IS NULL
                               AND id in (SELECT ID FROM OKC_K_LINES_B_TEMP));

                --Delete line level party contacts--
                l_stage := 'Deleting from OKC_CONTACTS';
                DELETE from okc_contacts
                where cpl_id in (SELECT ID from OKC_K_PARTY_ROLES_B WHERE DNZ_CHR_ID = P_To_Chr_ID
                                and CLE_ID is NOT NULL
                                AND CLE_ID in (select ID from okc_k_lines_b where DNZ_CHR_ID = P_To_Chr_ID and CLE_ID IS NULL
                                               AND id in (SELECT ID FROM OKC_K_LINES_B_TEMP)));

                --Delete line level party roles--
                l_stage := 'Deleting from OKC_K_PARTY_ROLES_B';
                DELETE from okc_k_party_roles_b
                where dnz_chr_id = P_To_Chr_ID
                and cle_id is not null
                AND CLE_ID in (select ID from okc_k_lines_b where DNZ_CHR_ID = P_To_Chr_ID and CLE_ID IS NULL
                               AND id in (SELECT ID FROM OKC_K_LINES_B_TEMP));
          End;
        END IF;
  --end npalepu
  End If;
    EXCEPTION WHEN OTHERS THEN
     If (l_party_csr%ISOPEN) then
       CLOSE l_party_csr;
     End If;
     --npalepu added on 5/8/2006 for bug # 5116858
     If (l_party_comp_csr%ISOPEN) then
       CLOSE l_party_comp_csr;
     End If;
     --end npalepu
     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name||':'||l_stage, substr(SQLERRM,1,240));

END Party_Cleanup;

--==============================================================================
--Procedure PURGE_OKC_K_LINES_B_TEMP
--==============================================================================
  Procedure PURGE_OKC_K_LINES_B_TEMP IS PRAGMA AUTONOMOUS_TRANSACTION;
  l_api_name VARCHAR2(30) := 'PURGE_OKC_K_LINES_B_TEMP';
  l_schema_name VARCHAR2(3) := 'OKC';
  l_statement VARCHAR2(200) := 'TRUNCATE TABLE '
                            ||l_schema_name
                            ||'.'
                            ||'OKC_K_LINES_B_TEMP';

  Begin
   EXECUTE IMMEDIATE l_statement;
     EXCEPTION
       WHEN OTHERS THEN
          FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));
          RAISE;

  End PURGE_OKC_K_LINES_B_TEMP;

--=====================================================================================
--Procedure COPY_COMPONENTS
--====================================================================================

 PROCEDURE copy_components(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 ,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_to_chr_id                  IN NUMBER,
    p_contract_number		     IN VARCHAR2,
    p_contract_number_modifier     IN VARCHAR2,
    p_to_template_yn			IN VARCHAR2 ,
    p_components_tbl			IN api_components_tbl,
    p_lines_tbl				IN api_lines_tbl,
    p_change_status_YN                IN VARCHAR2 ,--Added for Update_Service requirement(Bug 4747648)
                                                           --If 'Y', status of new line is default status(DEFAULT value)
                                                           --If 'N', status from Source Line is retained
    p_return_new_top_line_ID_YN    IN VARCHAR2 , --Added for Update_Service requirement(Bug 4747648)
                                                           --If 'Y' then the new line IDs of the copied top lines need to be
                                                           --published
 							   --If 'N', then dont need to be published (DEFAULT value)
    x_to_chr_id                    OUT NOCOPY NUMBER,
    p_published_line_ids_tbl       OUT  NOCOPY published_line_ids_tbl,
    p_include_cancelled_lines IN VARCHAR2 DEFAULT 'Y',
    p_include_terminated_lines IN VARCHAR2 DEFAULT 'Y') IS

    l_components_tbl  api_components_tbl := p_components_tbl;
    l_lines_tbl       api_lines_tbl := p_lines_tbl;
    l_return_status	  VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_old_return_status	  VARCHAR2(1) := FND_API.G_RET_STS_SUCCESS;
    l_cle_id_out      NUMBER;
    l_to_chr_id          NUMBER;
    l_cnh_id          NUMBER;
    l_rgp_id          NUMBER;
    l_cat_id          NUMBER;
    l_cpl_id          NUMBER;
    l_from_cle_id     NUMBER;
    l_to_cle_id       NUMBER;
    i                 NUMBER := 0;
    j                 NUMBER := 0;
    l_old_lse_id      NUMBER;
    l_result		  BOOLEAN;

    --11510
    l_source_doc_type VARCHAR2(60);
    l_source_doc_ID   NUMBER;
    l_target_doc_type VARCHAR2(60);
    l_target_doc_ID   NUMBER;
    l_keep_version VARCHAR2(1);
    l_eff_date DATE;
    l_category          VARCHAR2(200); --added for bug 3764231

    -- 11510 get chr start date for effective date for copy_doc
    CURSOR c_art_eff_date (p_doc_type VARCHAR2,p_doc_id NUMBER) IS
    SELECT article_effective_date
     FROM okc_template_usages_v
     WHERE document_type=p_doc_type AND document_id=p_doc_id;



    CURSOR GetHdrTrxnInfo IS
    SELECT
     oks.TRXN_EXTENSION_ID
    ,okc.BILL_TO_SITE_USE_ID
    FROM
     OKC_K_HEADERS_ALL_B okc
    ,OKS_K_HEADERS_B oks
    WHERE
    okc.id = oks.chr_id
    and okc.id = p_from_chr_id;

    l_Hdr_Bill_To_Site_Use_ID NUMBER;
    l_Hdr_Old_Trxn_Extn_ID NUMBER;
    l_Hdr_New_Trxn_Extn_ID NUMBER;


    --Added for Update_Service requirement(Bug 4747648)
    --This cursor gets the IDs of the newly copied top lines along with its source line ids
    CURSOR GetTopLinesFromTemp IS
    SELECT
    ID      as NEW_LINE_ID
    ,ORIG_SYSTEM_ID1 as OLD_LINE_ID
    FROM
    OKC_K_LINES_B_TEMP
    where
    CLE_ID IS NULL;

    l_old_line_id number;
    l_new_line_id number;
    p_published_line_ids_ctr NUMBER := 0;

    l_Target_Contract_New_YN VARCHAR2(1):= 'N' ;

    l_api_name        CONSTANT VARCHAR2(30) := 'COPY_COMPONENTS';
    l_module_name     VARCHAR2(256) := G_APP_NAME ||'.plsql.' || G_PKG_NAME || '.' || l_api_name;

--npalepu added on 01-AUG-2006 for bug # 5402978
l_msg_count         NUMBER;
l_msg_data          VARCHAR2(2000):=null;
--end npalepu

  BEGIN

  SAVEPOINT copy_components;

--added for bug 2950549
 fnd_msg_pub.initialize;
IF (l_debug = 'Y') THEN
   OKC_DEBUG.log('200 : Calling IS_COPY_ALLOWED');
END IF;

    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Begin'
                        ,'p_from_chr_id='|| p_from_chr_id
                         ||',p_contract_number='||p_contract_number
                         ||',p_contract_number_modifier='||p_contract_number_modifier
                         ||',p_to_template_yn='||p_to_template_yn);
      END IF;
    END IF;

    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'Before Is_Copy_Allowed'
                    );
    End If;

	l_result := IS_COPY_ALLOWED(p_from_chr_id, NULL);


    If (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) then
      FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'After Is_Copy_Allowed'
                    );
    End If;


	If NOT l_result Then
	  -- notify caller of an UNEXPECTED error
	  x_return_status := FND_API.G_RET_STS_ERROR;
	  raise G_EXCEPTION_HALT_VALIDATION;
	End If;

    -- Intitialize globals.
   /***
    IF g_events.COUNT > 0 THEN
       g_events.DELETE;
    END IF;
   ***/

    IF g_party.COUNT > 0 THEN
       g_party.DELETE;
    END IF;


    x_return_status := l_return_status;

IF (l_debug = 'Y') THEN
   OKC_DEBUG.log('250 : x_return_status : '||x_return_status);
   OKC_DEBUG.log('250 : p_to_chr_id : '||p_to_chr_id);
END IF;

    IF p_to_chr_id IS NULL THEN
      l_Target_Contract_New_YN := 'Y'; --Indicates to copy_lines API
				       --whether the Target Contract being copied to
				       --was pre-existing or was created as part of Copy

    IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_procedure, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_procedure
                        ,l_module_name||'.Copy_Contract_Header'
                        ,'Before call to Copy_Contract_Header'
                         );
      END IF;
    END IF;

      copy_contract_header(
	   p_api_version		=> p_api_version,
           p_init_msg_list		=> p_init_msg_list,
           x_return_status 		=> l_return_status,
           x_msg_count     		=> x_msg_count,
           x_msg_data      		=> x_msg_data,
           p_from_chr_id		=> p_from_chr_id,
           p_contract_number		=> p_contract_number,
           p_contract_number_modifier	=> p_contract_number_modifier,
	   p_to_template_yn             => p_to_template_yn,
	   p_renew_ref_yn               => 'N',
           x_to_chr_id			=> l_to_chr_id);

     IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
      IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.copy_contract_header'
                        ,'After call to copy_contract_header: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
      END IF;
     END IF;

      IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
      END IF;

    ELSE
      l_return_status := get_chrv_rec(p_to_chr_id,g_chrv_rec);
      l_to_chr_id := p_to_chr_id;
    END IF;

    x_to_chr_id := l_to_chr_id;

IF (l_debug = 'Y') THEN
   OKC_DEBUG.log('300 : After copy_contract_header  ');
   OKC_DEBUG.log('300 : x_to_chr_id : '||x_to_chr_id);
   OKC_DEBUG.log('300 : x_return_status : '||l_return_status);
END IF;
-------------------------------------End of Copy Contract Header--------------------

  IF l_components_tbl.COUNT >0 THEN

-------------------------------------Start of Copy Events--------------------------
--Header level condition copy no longer supported
-------------------------------End of Copy Events---------------------------------

-------------------------------Start of Copy Party Roles-------------------------
    i := l_components_tbl.FIRST;
    LOOP
        -- IF l_components_tbl(i).component_type = 'Parties' THEN
        -- skekkar bug 2802203 ( base bug 2794662 )
        IF l_components_tbl(i).component_type = 'PARTIES' THEN
          l_old_return_status := l_return_status;
          copy_party_roles (
               p_api_version    => p_api_version,
               p_init_msg_list  => p_init_msg_list,
               x_return_status  => l_return_status,
               x_msg_count      => x_msg_count,
               x_msg_data       => x_msg_data,
               p_cpl_id         => l_components_tbl(i).id,
               p_cle_id         => NULL,
               p_chr_id         => l_to_chr_id,
               p_rle_code       => l_components_tbl(i).attribute1,
               x_cpl_id         => l_cpl_id);

          IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          --IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
          --  ELSE
          --    IF l_old_return_status <> OKC_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
          --      x_return_status := l_return_status;
          --    END IF;
          --  END IF;
          END IF;

        END IF;
        EXIT WHEN i = l_components_tbl.LAST;
        i := l_components_tbl.NEXT(i);
    END LOOP;

-------------------------------End of Copy Party Roles---------------------------
-------------------------------Start of Copy Doc----------------------------------
    --
    -- new 11510 code
    i := l_components_tbl.FIRST;
    l_old_return_status := l_return_status;
    LOOP
	IF l_components_tbl(i).component_type = 'ARTICLES' THEN
-- temporary: copy all document articles after one article component to copy found

    l_keep_version := 'Y'; -- keep version as was doing before

     OKC_TERMS_UTIL_GRP.Get_Contract_Document_Type_ID(
        p_api_version   => p_api_version,
        x_return_status => l_return_status,
        x_msg_data      => x_msg_data,
        x_msg_count     => x_msg_count,
        p_chr_id        => p_from_chr_id,
        x_doc_type      => l_source_doc_type,
        x_doc_id        => l_source_doc_id
    );

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        --  IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        --  ELSE
        --    IF l_old_return_status <> FND_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
        --      x_return_status := l_return_status;
        --    END IF;
        --  END IF;
        END IF;
     OKC_TERMS_UTIL_GRP.Get_Contract_Document_Type_ID(
        p_api_version   => p_api_version,
        x_return_status => l_return_status,
        x_msg_data      => x_msg_data,
        x_msg_count     => x_msg_count,
        p_chr_id        => x_to_chr_id,
        x_doc_type      => l_target_doc_type,
        x_doc_id        => l_target_doc_id
    );

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        --  IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        --  ELSE
        --    IF l_old_return_status <> FND_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
        --      x_return_status := l_return_status;
        --    END IF;
        --  END IF;
        END IF;
    OPEN c_art_eff_date(l_source_doc_type, l_source_doc_id);
    FETCH c_art_eff_date INTO l_eff_date;
    CLOSE c_art_eff_date;


    OKC_TERMS_COPY_GRP.copy_doc(
        p_api_version	     => p_api_version,
        x_return_status	     => l_return_status,
        x_msg_count    	     => x_msg_count,
        x_msg_data     	     => x_msg_data,
        p_source_doc_type    => l_source_doc_type,
        p_source_doc_id      => l_source_doc_id,
        p_target_doc_type    => l_target_doc_type,
        p_target_doc_id      => l_target_doc_id,
        p_keep_version       => l_keep_version,
        p_article_effective_date => Nvl(l_eff_date,Sysdate),
        p_document_number    => p_contract_number,
        p_allow_duplicate_terms=>'Y'
    );

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        --  IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) THEN
            x_return_status := l_return_status;
            RAISE G_EXCEPTION_HALT_VALIDATION;
        --  ELSE
        --    IF l_old_return_status <> FND_API.G_RET_STS_ERROR THEN -- do not overwrite error with warning.
        --      x_return_status := l_return_status;
        --    END IF;
        --  END IF;
        END IF;

       EXIT; -- exit after one article component to copy found
      ELSE
       EXIT WHEN i = l_components_tbl.LAST;
  	   i := l_components_tbl.NEXT(i);
	   END IF;
    END LOOP;
-- end of new 11510 code

  END IF; -- End of Check for l_components_tbl.COUNT > 0

----------------------------------End of Copy Doc----------------------------------

-------------------------------Start of Create Vendor if missing-----------------
   Begin
       create_vendor_if_missing(P_From_Chr_ID => P_From_Chr_ID
                               ,P_To_Chr_ID => l_to_chr_id
                               ,p_api_version => p_api_version
                               ,p_init_msg_list => p_init_msg_list
                               ,x_msg_count => x_msg_count
                               ,x_msg_data => x_msg_data
                               ,x_return_status => l_return_status);

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
       END IF;
   End;

-------------------------------End of Create Vendor if missing-------------------

-------------Copy of OKS Hdr Attributes and its components-----------------------
---This should happen only if new header is being created
 IF (l_Target_Contract_New_YN = 'Y') then

 --===================-Start of Copy OKS Header attributes ========================================
  Begin
      /*--Call to copy source contract record in OKS_K_HEADERS_B */
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
                 FND_LOG.string(FND_LOG.level_statement
                          ,l_module_name||'.oks_setup_util_pub.copy_hdr_attr'
                          ,'Before call to oks_setup_util_pub.copy_hdr_attr'
			 ||' P_From_Chr_ID = '||p_from_chr_id
			 ||',P_To_Chr_ID = '||l_to_chr_id
                          );
           END IF;
          END IF;

       OKS_SETUP_UTIL_PUB.copy_hdr_attr
                               (p_chr_id        => p_from_chr_id --Source Contract Header ID
                               ,p_new_chr_id    => l_to_chr_id --Target Contract Header ID
                               ,p_duration_match => NULL
			       ,p_renew_ref_YN => 'N'
                               ,x_return_status => l_return_status);
       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.oks_setup_util_pub.copy_hdr_attr'
                        ,'After call to oks_setup_util_pub.copy_hdr_attr: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
       END IF;
  End;
 --===================End of Copy OKS Header attributes===========================================


 --==================Generate new transaction extension for Header================================

  Begin
   --Get Header Trxn ID and Bill_To_Site_Use_ID--

   OPEN GetHdrTrxnInfo;
   FETCH GetHdrTrxnInfo into l_Hdr_Old_Trxn_Extn_ID,l_Hdr_Bill_To_Site_Use_ID;
   CLOSE GetHdrTrxnInfo;

    If (l_Hdr_Old_Trxn_Extn_ID IS NOT NULL AND l_Hdr_Bill_To_Site_Use_ID IS NOT NULL) then

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'Before call to Create_Transaction_Extension for Header in COPY_COMPONENTS'
                        ||'Bill to site use id='||l_Hdr_Bill_To_Site_Use_ID
                        ||'Old Trxn ID='||l_Hdr_Old_Trxn_Extn_ID
                         );
        END IF;
       END IF;

        OKS_UTIL_PUB.create_transaction_extension(P_Api_Version => p_api_version
                                      ,P_Init_Msg_List => p_init_msg_list
                                      ,P_Header_ID => l_to_chr_id
                                      ,P_Line_ID => NULL
                                      ,P_Source_Trx_Ext_ID => l_Hdr_Old_Trxn_Extn_ID
				      ,P_Cust_Acct_ID => NULL
                                      ,P_Bill_To_Site_Use_ID => l_Hdr_Bill_To_Site_Use_ID
                                      ,x_entity_id => l_Hdr_New_Trxn_Extn_ID
                                      ,x_msg_data => x_msg_data
                                      ,x_msg_count => x_msg_count
                                      ,x_return_status => l_return_status) ;


       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'After call to Create_Transaction_Extension for Header: x_return_status :'||l_return_status
                        ||'New Trxn ID='||l_Hdr_New_Trxn_Extn_ID
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_ERROR OR l_return_status = FND_API.G_RET_STS_UNEXP_ERROR) then
              x_return_status := l_return_status;
              RAISE G_EXCEPTION_HALT_VALIDATION;
        END IF;
       END IF;

       UPDATE OKS_K_HEADERS_B
       SET TRXN_EXTENSION_ID = l_Hdr_New_Trxn_Extn_ID
       WHERE CHR_ID = l_to_chr_id;

        If SQL%NOTFOUND then
          IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
           FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.Create_Transaction_Extension'
                        ,'Error in Update OKS_K_HEADERS_B, row not found for update'
                         );
          END IF;
         l_return_status := FND_API.G_RET_STS_ERROR;
         RAISE G_EXCEPTION_HALT_VALIDATION;
        End If;


   End If;
  End;

--==================End of Generate new transaction extension for Header=========================


 --===================Start of Copy OKS Header Notes=============================================
  Begin
     /*--Call to copy Header notes -----*/
        IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
         IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
          FND_LOG.string(FND_LOG.level_statement
                             ,l_module_name||'.oks_coverages_pvt.copy_k_hdr_notes'
                                ,'Before call to oks_coverages_pvt.copy_k_hdr_notes'
                                );
         END IF;
        END IF;

     OKS_COVERAGES_PVT.COPY_K_HDR_NOTES(
             p_api_version           => p_api_version,
                p_init_msg_list         => p_init_msg_list,
                p_chr_id                => l_to_chr_id, --Target Contract Header ID
                x_return_status         => l_return_status,
                x_msg_count             => x_msg_count,
                x_msg_data              => x_msg_data);

       IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
        IF (FND_LOG.test(FND_LOG.level_statement, l_module_name)) THEN
         FND_LOG.string(FND_LOG.level_statement
                        ,l_module_name||'.oks_coverages_pvt.copy_k_hdr_notes'
                        ,'After call to oks_coverages_pvt.copy_k_hdr_notes: x_return_status:'||l_return_status
                         ||' '||SQLERRM
                         );
        END IF;
       END IF;

       IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = FND_API.G_RET_STS_UNEXP_ERROR OR
            l_return_status = FND_API.G_RET_STS_ERROR) THEN
         x_return_status := l_return_status;
         RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
             x_return_status := l_return_status; -- donot raise exception if l_return_status = 'W'
        END IF;
       END IF;
  End;
--=====================End of Copy OKS Header Notes=============================================

 End If; -- End of check for l_Target_Contract_New_YN = 'Y'


------------End of Copy of OKS Hdr Attributes and its components------------------

 ------------If copying to an existing contract and status of contract is------------------
 ------------'Active','Signed', or 'Expired' change status to------------------
 ------------'QA_Hold'---------------------------------------------------------------------
 Begin
  IF (
      l_Target_Contract_New_YN <> 'Y' AND
      (l_lines_tbl.COUNT > 0 OR l_components_tbl.COUNT > 0)
     ) THEN
   IF (FND_LOG.level_statement >= FND_LOG.g_current_runtime_level) THEN
     FND_LOG.string(FND_LOG.level_statement
                    ,l_module_name
                    ,'Current Target Contract Status : '||g_chrv_rec.sts_code
                    );
   END IF;
   --npalepu modified below on 01-AUG-2006 for bug # 5402978. Added Hold status also.
   /* IF SeedStatus(p_current_status => g_chrv_rec.sts_code) in ('ACTIVE','SIGNED','EXPIRED') then */
   IF SeedStatus(p_current_status => g_chrv_rec.sts_code) in ('ACTIVE','SIGNED','EXPIRED','HOLD') then
    --npalepu added on 01-AUG-2006 for bug # 5402978
       BEGIN
                okc_version_pub.save_version
                        (p_chr_id         => P_To_Chr_ID,
                         p_api_version    => 1.0,
                         p_init_msg_list  => 'T',
                         x_return_status  => l_return_status,
                         x_msg_count      => l_msg_count,
                         x_msg_data       => l_msg_data,
                         p_commit         => 'F'
                        );

                IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
                        x_return_status := l_return_status;
                        RAISE G_EXCEPTION_HALT_VALIDATION;
                End If;

                oks_contract_hdr_pub.save_version
                               (p_api_version   => 1.0,
                                p_init_msg_list => 'T',
                                x_return_status => l_return_status,
                                x_msg_count     => l_msg_count,
                                x_msg_data      => l_msg_data,
                                p_chr_id        => P_To_Chr_ID);

                IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
                        x_return_status := l_return_status;
                        RAISE G_EXCEPTION_HALT_VALIDATION;
                End If;
       END;
     --end npalepu

    update okc_k_headers_all_b
    set sts_code = 'QA_HOLD'
   ,object_version_number = decode(l_Target_Contract_New_YN,'Y',object_version_number,object_version_number+1)
    where id = l_to_chr_id;

    --Update Status field in OKC_CONTACTS table.
    /*cgopinee Bug fix for 6882512*/
    OKC_CTC_PVT.update_contact_stecode(p_chr_id => l_to_chr_id,
                               x_return_status=>l_return_status);

    IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
          RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

   End If;

  End If;
 End;
-------------------------------------------------------------------------------------------
------------------------Copy Lines starts here -------------------------
 Begin
     copy_line_components(
      p_api_version   => p_api_version
     ,p_init_msg_list => p_init_msg_list
     ,x_return_status => l_return_status
     ,x_msg_count     => x_msg_count
     ,x_msg_data      => x_msg_data
     ,P_From_Chr_ID   => P_From_Chr_ID
     ,P_To_Chr_ID     => l_to_chr_id
     ,P_Target_Contract_New_YN => l_Target_Contract_New_YN
     ,P_Lines_Tbl     => l_lines_tbl
     ,p_change_status_YN => p_change_status_YN --Added for Update_Service requirement(Bug 4747648)
                                                           --If 'Y', status of new line is default status
                                                           --If 'N', status from Source Line is retained
     ,p_return_new_top_line_ID_YN => p_return_new_top_line_ID_YN --Added for Update_Service requirement(Bug 4747648)
								 --If 'Y', the new line IDs of copied Top Lines need to be
								 --published
      ,p_include_cancelled_lines => p_include_cancelled_lines
      ,p_include_terminated_lines => p_include_terminated_lines);

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        End If;

 End;
-----------------------Copy Lines ends here--------------------------
-----------------------Party Cleanup---------------------------------

 Begin
     Party_Cleanup(P_To_Chr_ID => l_to_chr_id
                  --npalepu added on 5/8/2006 for bug # 5116858
                  ,P_From_Chr_ID   => P_From_Chr_ID
                  --end npalepu
                  ,P_Target_Contract_New_YN => l_Target_Contract_New_YN
                  ,x_return_status => l_return_status);

        IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        End If;

 End;

---------------------------------------------------------------------
-----------------------Returning New Top Line IDs--------------------
--Added for Update_Service requirement(Bug 4747648)

 IF p_return_new_top_line_ID_YN = 'Y' then
   Begin
    OPEN GetTopLinesFromTemp;
    LOOP
    FETCH GetTopLinesFromTemp into
     l_New_Line_ID
    ,l_Old_Line_ID;
       EXIT WHEN GetTopLinesFromTemp%NOTFOUND;
       p_published_line_ids_tbl(p_published_line_ids_ctr).OLD_LINE_ID := l_Old_Line_ID;
       p_published_line_ids_tbl(p_published_line_ids_ctr).NEW_LINE_ID := l_New_Line_ID;
       p_published_line_ids_ctr := p_published_line_ids_ctr + 1;
    END LOOP;
     /*fix for bug6959607*/
     If (GetTopLinesFromTemp%ISOPEN) then
       CLOSE GetTopLinesFromTemp;
     End If;
   End;

   --Purge Global Temporary Table when called from Update Service
   --This is to support splitting of line into more than 2 lines
   --so that Update of CLE_ID in OKC_K_LINES_B_TEMP doesn't run into
   --multiple rows with same orig_system_id1
   Begin
    /*delete from okc_k_lines_b_temp;*/
    PURGE_OKC_K_LINES_B_TEMP;
   End;

 END IF;

--------------------------------------------------------------------
  IF (l_debug = 'Y') THEN
     OKC_DEBUG.log('10000 : Exiting Procedure OKS_COPY_CONTRACT_PVT.copy_components ', 2);
     OKC_DEBUG.ReSet_Indentation;
  END IF;

  IF (FND_LOG.level_procedure >= FND_LOG.g_current_runtime_level) THEN
   FND_LOG.string(FND_LOG.level_procedure
     ,l_module_name||'.END'
     ,'Exiting copy_components '
    ||', x_return_status='||x_return_status
    ||', x_to_chr_id = '||x_to_chr_id
      );
  END IF;


  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      ROLLBACK to copy_components;

    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
      ROLLBACK to copy_components;
     FND_MSG_PUB.add_exc_msg(g_pkg_name, l_api_name, substr(SQLERRM,1,240));

  END copy_components;

--===============================End Copy_Components=====================================


END OKS_COPY_CONTRACT_PVT;

/
