--------------------------------------------------------
--  DDL for Package Body ONT_OEXOEACK_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ONT_OEXOEACK_XMLP_PKG" AS
/* $Header: OEXOEACKB.pls 120.1 2008/05/30 05:44:04 dwkrishn noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in AFTER REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION P_ITEM_FLEX_CODEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_ITEM_FLEX_CODEVALIDTRIGGER;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    /*SRW.MESSAGE(99999
               ,'$Header: OEXOEACKB.pls 120.1 2008/05/30 05:44:04 dwkrishn noship $')*/NULL;
    BEGIN
      IF P_BOOKED_STATUS IS NOT NULL THEN
        IF P_BOOKED_STATUS = 'Y' THEN
          LP_BOOKED_STATUS := ' and h.booked_flag = ''Y'' ';
        ELSE
          LP_BOOKED_STATUS := ' and h.booked_flag = ''N'' ';
        END IF;
      ELSE
        LP_BOOKED_STATUS := ' ';
      END IF;
      IF (P_ORDER_DATE_LOW IS NOT NULL) AND (P_ORDER_DATE_HIGH IS NOT NULL) THEN
        LP_ORDER_DATE := ' and h.ordered_date between :p_order_date_low and (:p_order_date_high+1) ';
      ELSIF (P_ORDER_DATE_LOW IS NOT NULL) THEN
        LP_ORDER_DATE := ' and h.ordered_date  >= :p_order_date_low ';
      ELSIF (P_ORDER_DATE_HIGH IS NOT NULL) THEN
        LP_ORDER_DATE := ' and h.ordered_date <= (:p_order_date_high+1) ';
      END IF;
      IF (P_SCHEDULE_DATE_LOW IS NOT NULL) AND (P_SCHEDULE_DATE_HIGH IS NOT NULL) THEN
        LP_SCHEDULE_DATE := ' and (l.schedule_ship_date between :p_schedule_date_low and (:p_schedule_date_high+1)) ';
      ELSIF (P_SCHEDULE_DATE_LOW IS NOT NULL) THEN
        LP_SCHEDULE_DATE := ' and l.schedule_ship_date  >= :p_schedule_date_low ';
      ELSIF (P_SCHEDULE_DATE_HIGH IS NOT NULL) THEN
        LP_SCHEDULE_DATE := ' and l.schedule_ship_date <= (:p_schedule_date_high+1) ';
      END IF;
      IF (P_REQUEST_DATE_LOW IS NOT NULL) AND (P_REQUEST_DATE_HIGH IS NOT NULL) THEN
        LP_REQUEST_DATE := ' and (l.request_date between :p_request_date_low and (:p_request_date_high+1)) ';
      ELSIF (P_REQUEST_DATE_LOW IS NOT NULL) THEN
        LP_REQUEST_DATE := ' and l.request_date  >= :p_request_date_low ';
      ELSIF (P_REQUEST_DATE_HIGH IS NOT NULL) THEN
        LP_REQUEST_DATE := ' and l.request_date <= (:p_request_date_high+1) ';
      END IF;
      IF (P_PROMISE_DATE_LOW IS NOT NULL) AND (P_PROMISE_DATE_HIGH IS NOT NULL) THEN
        LP_PROMISE_DATE := ' and (l.promise_date between :p_promise_date_low and (:p_promise_date_high+1)) ';
      ELSIF (P_PROMISE_DATE_LOW IS NOT NULL) THEN
        LP_PROMISE_DATE := ' and l.promise_date  >= :p_promise_date_low ';
      ELSIF (P_PROMISE_DATE_HIGH IS NOT NULL) THEN
        LP_PROMISE_DATE := ' and l.promise_date  <= (:p_promise_date_high+1) ';
      END IF;
      IF (P_SHIP_TO_CUSTOMER_NAME_LO IS NOT NULL) AND (P_SHIP_TO_CUSTOMER_NAME_HI IS NOT NULL) THEN
        LP_SHIP_TO_CUSTOMER_NAME := ' and (ship_party.party_name between :p_ship_to_customer_name_lo and

                                    :p_ship_to_customer_name_hi) ';
      ELSIF (P_SHIP_TO_CUSTOMER_NAME_LO IS NOT NULL) THEN
        LP_SHIP_TO_CUSTOMER_NAME := ' and ship_party.party_name >= :p_ship_to_customer_name_lo ';
      ELSIF (P_SHIP_TO_CUSTOMER_NAME_HI IS NOT NULL) THEN
        LP_SHIP_TO_CUSTOMER_NAME := ' and ship_party.party_name <= :p_ship_to_customer_name_hi ';
      END IF;
      IF (P_BILL_TO_CUSTOMER_NAME_LO IS NOT NULL) AND (P_BILL_TO_CUSTOMER_NAME_HI IS NOT NULL) THEN
        LP_BILL_TO_CUSTOMER_NAME := ' and (bill_party.party_name between :p_bill_to_customer_name_lo and

                                    :p_bill_to_customer_name_hi) ';
      ELSIF (P_BILL_TO_CUSTOMER_NAME_LO IS NOT NULL) THEN
        LP_BILL_TO_CUSTOMER_NAME := ' and bill_party.party_name >= :p_bill_to_customer_name_lo ';
      ELSIF (P_BILL_TO_CUSTOMER_NAME_HI IS NOT NULL) THEN
        LP_BILL_TO_CUSTOMER_NAME := ' and bill_party.party_name <= :p_bill_to_customer_name_hi ';
      END IF;
      IF (P_DEL_TO_CUSTOMER_NAME_LO IS NOT NULL) AND (P_DEL_TO_CUSTOMER_NAME_HI IS NOT NULL) THEN
        LP_DEL_TO_CUSTOMER_NAME := ' and (del_party.party_name between :p_del_to_customer_name_lo and

                                   :p_del_to_customer_name_hi) ';
      ELSIF (P_DEL_TO_CUSTOMER_NAME_LO IS NOT NULL) THEN
        LP_DEL_TO_CUSTOMER_NAME := ' and del_party.party_name >= :p_del_to_customer_name_lo ';
      ELSIF (P_DEL_TO_CUSTOMER_NAME_HI IS NOT NULL) THEN
        LP_DEL_TO_CUSTOMER_NAME := ' and del_party.party_name <= :p_del_to_customer_name_hi ';
      END IF;
      IF (P_ORDER_NUM_LOW IS NOT NULL) AND (P_ORDER_NUM_HIGH IS NOT NULL) THEN
        IF (P_ORDER_NUM_LOW = P_ORDER_NUM_HIGH) THEN
          LP_ORDER_NUM := ' and h.order_number = :p_order_num_low ';
        ELSE
          LP_ORDER_NUM := ' and (h.order_number between to_number(:p_order_num_low) and to_number(:p_order_num_high)) ';
        END IF;
      ELSIF (P_ORDER_NUM_LOW IS NOT NULL) THEN
        LP_ORDER_NUM := ' and h.order_number >= to_number(:p_order_num_low) ';
      ELSIF (P_ORDER_NUM_HIGH IS NOT NULL) THEN
        LP_ORDER_NUM := ' and h.order_number <= to_number(:p_order_num_high) ';
      END IF;
      IF P_SALESREP IS NOT NULL THEN
        LP_SALESREP := ' and sr.name = :p_salesrep ';
      ELSE
        LP_SALESREP := ' ';
      END IF;
      IF P_CREATED_BY IS NOT NULL THEN
        LP_CREATED_BY := ' and u.user_name = :p_created_by ';
      ELSE
        LP_CREATED_BY := ' ';
      END IF;
      IF P_OPEN_ORDERS = 'Y' THEN
        LP_OPEN_ORDERS := 'and h.open_flag = ''Y''';
      ELSE
        LP_OPEN_ORDERS := ' ';
      END IF;
      IF P_ORDER_TYPE IS NOT NULL THEN
        LP_ORDER_TYPE := ' and h.order_type_id = :p_order_type ';
      ELSE
        LP_ORDER_TYPE := ' ';
      END IF;
      IF P_ORDER_NUM_LOW = P_ORDER_NUM_HIGH THEN
        NULL;
      ELSE
        IF P_ORDER_CATEGORY IS NOT NULL THEN
          IF P_ORDER_CATEGORY = 'SALES' THEN
            LP_ORDER_CATEGORY := 'and h.order_category_code in (''ORDER'', ''MIXED'') ';
          ELSIF P_ORDER_CATEGORY = 'CREDIT' THEN
            LP_ORDER_CATEGORY := 'and h.order_category_code in (''RETURN'', ''MIXED'') ';
          ELSIF P_ORDER_CATEGORY = 'ALL' THEN
            LP_ORDER_CATEGORY := NULL;
          END IF;
        ELSE
          LP_ORDER_CATEGORY := 'and h.order_category_code in (''ORDER'', ''MIXED'') ';
        END IF;
      END IF;
      IF P_LINE_CATEGORY IS NOT NULL THEN
        IF P_LINE_CATEGORY = 'SALES' THEN
          LP_LINE_CATEGORY := 'and l.line_category_code = ''ORDER'' ';
        ELSIF P_LINE_CATEGORY = 'CREDIT' THEN
          LP_LINE_CATEGORY := 'and l.line_category_code = ''RETURN'' ';
        ELSIF P_LINE_CATEGORY = 'ALL' THEN
          LP_LINE_CATEGORY := ' ';
        END IF;
      ELSE
        LP_LINE_CATEGORY := 'and l.line_category_code = ''ORDER'' ';
      END IF;
      SELECT
        USERENV('LANG')
      INTO P_USER_LANG
      FROM
        DUAL;
    END;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_LINE_SHIP_TO_CUSTFORMULA(LINE_SHIP_TO_ORG_ID IN NUMBER
                                     ,HDR_SHIP_TO_ORG_ID IN NUMBER
                                     ,LINE_S_CITY_ST_ZIP IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF LINE_SHIP_TO_ORG_ID IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(HDR_SHIP_TO_ORG_ID
         ,0) <> NVL(LINE_SHIP_TO_ORG_ID
         ,0) THEN
        RETURN (LINE_S_CITY_ST_ZIP);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_SHIP_TO_CUSTFORMULA;

  FUNCTION C_DATA_NOT_FOUNDFORMULA(ORDER_NUMBER IN NUMBER) RETURN NUMBER IS
  BEGIN
    RP_DATA_FOUND := TO_CHAR(ORDER_NUMBER);
    RETURN (0);
  END C_DATA_NOT_FOUNDFORMULA;

  FUNCTION C_EXTENDED_PRICEFORMULA(SELLING_PRICE IN NUMBER
                                  ,C_PRECISION IN NUMBER
                                  ,PRICING_QUANTITY IN NUMBER
                                  ,LINE_CATEGORY_CODE IN VARCHAR2
                                  ,ORDERED_QUANTITY IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(SELLING_PRICE)*/NULL;
    /*SRW.REFERENCE(C_PRECISION)*/NULL;
    /*SRW.REFERENCE(PRICING_QUANTITY)*/NULL;
    IF LINE_CATEGORY_CODE = 'RETURN' THEN
      RETURN (ROUND(NVL(SELLING_PRICE
                      ,0) * NVL(ORDERED_QUANTITY
                      ,0)
                  ,C_PRECISION) * (-1));
    ELSE
      RETURN (ROUND(NVL(SELLING_PRICE
                      ,0) * NVL(ORDERED_QUANTITY
                      ,0)
                  ,C_PRECISION));
    END IF;
  END C_EXTENDED_PRICEFORMULA;

  FUNCTION S_TAX_TOTAL_DSPFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END S_TAX_TOTAL_DSPFORMULA;

  FUNCTION C_PRECISIONFORMULA(CURRENCY1 IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    DECLARE
      W_PRECISION NUMBER;
    BEGIN
      SELECT
        PRECISION
      INTO W_PRECISION
      FROM
        FND_CURRENCIES
      WHERE CURRENCY_CODE = CURRENCY1;
      RETURN (W_PRECISION);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_PRECISION := 2;
        RETURN (W_PRECISION);
    END;
    RETURN NULL;
  END C_PRECISIONFORMULA;

  PROCEDURE POPULATE_MLS_LEXICALS IS
    SQLSTMT VARCHAR2(1000) := '';
    SESSION_LANGUAGE VARCHAR2(30) := '';
    BASE_LANGUAGE VARCHAR2(30) := '';
  BEGIN
    SQLSTMT := 'select multi_lingual_flag
                               into :mls_flag
                               from fnd_product_groups
                              where multi_lingual_flag = ''Y''';
    EXECUTE IMMEDIATE
      SQLSTMT;
    IF (MLS_FLAG = 'Y') THEN
      SELECT
        SUBSTR(USERENV('LANGUAGE')
              ,1
              ,INSTR(USERENV('LANGUAGE')
                   ,'_') - 1)
      INTO SESSION_LANGUAGE
      FROM
        DUAL;
      SELECT
        NLS_LANGUAGE
      INTO BASE_LANGUAGE
      FROM
        FND_LANGUAGES
      WHERE INSTALLED_FLAG = 'B';
      LP_LANGUAGE_WHERE := 'and nvl(bill_addr.language,' || '''' || BASE_LANGUAGE || ''') = ' || '''' || SESSION_LANGUAGE || '''';
      SQLSTMT := 'select alax.attribute_column_name
                                    into :att_column_name
                                    from ak_translated_columns atc,
                                         ak_language_attribute_xrefs alax
                                   where atc.table_name = ' || '''MTL_UNITS_OF_MEASURE''' || ' and atc.column_name = ' || '''UNIT_OF_MEASURE''' || ' and alax.translated_column_number = atc.translated_column_number
                                           and alax.language = ' || '''' || SESSION_LANGUAGE || '''';
      EXECUTE IMMEDIATE
        SQLSTMT;
      IF (ATT_COLUMN_NAME IS NOT NULL) THEN
        LP_UNIT_OF_MEASURE := 'uom.' || RTRIM(ATT_COLUMN_NAME
                                   ,' ');
      END IF;
    END IF;
  EXCEPTION
    WHEN /*SRW.DO_SQL_FAILURE*/OTHERS THEN
      /*SRW.MESSAGE(2000
                 ,'Failed in BEFORE REPORT trigger. populate mls lexical')*/NULL;
  END POPULATE_MLS_LEXICALS;

  FUNCTION C_USE_CURRENCYFORMULA(C_BASE_CURRENCY IN VARCHAR2
                                ,CURRENCY1 IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_BASE_CURRENCY)*/NULL;
    /*SRW.REFERENCE(CURRENCY1)*/NULL;
    IF P_FUNCTIONAL_CURRENCY = 'Y' THEN
      RETURN (C_BASE_CURRENCY);
    ELSIF CURRENCY1 IS NULL THEN
      RETURN (C_BASE_CURRENCY);
    ELSE
      RETURN (CURRENCY1);
    END IF;
    RETURN NULL;
  END C_USE_CURRENCYFORMULA;

  FUNCTION C_BASE_CURRENCYFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      BASE_CURRENCY VARCHAR2(30);
    BEGIN
      SELECT
        CURRENCY_CODE
      INTO BASE_CURRENCY
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = P_SOB_ID;
      RETURN (BASE_CURRENCY);
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN NULL;
  END C_BASE_CURRENCYFORMULA;

  FUNCTION C_GL_CONV_RATEFORMULA(CURRENCY1 IN VARCHAR2
                                ,C_BASE_CURRENCY IN VARCHAR2
                                ,CONVERSION_RATE IN NUMBER
                                ,ORDER_DATE IN DATE
                                ,CONVERSION_TYPE_CODE IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    DECLARE
      GL_RATE NUMBER;
    BEGIN
      IF P_FUNCTIONAL_CURRENCY = 'Y' THEN
        IF CURRENCY1 = C_BASE_CURRENCY THEN
          RETURN (1);
        ELSE
          IF CONVERSION_RATE IS NULL THEN
            GL_RATE := GET_RATE(P_SOB_ID
                               ,CURRENCY1
                               ,TRUNC(ORDER_DATE)
                               ,CONVERSION_TYPE_CODE);
            RETURN (GL_RATE);
          ELSE
            RETURN (CONVERSION_RATE);
          END IF;
        END IF;
      ELSE
        RETURN (1);
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (-1);
    END;
    RETURN NULL;
  END C_GL_CONV_RATEFORMULA;

  FUNCTION C_LINE_BILL_TO_CUSTFORMULA(LINE_BILL_TO_ORG_ID IN NUMBER
                                     ,HDR_BILL_TO_ORG_ID IN NUMBER
                                     ,LINE_B_CITY_ST_ZIP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_BILL_TO_ORG_ID IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(HDR_BILL_TO_ORG_ID
         ,0) <> NVL(LINE_BILL_TO_ORG_ID
         ,0) THEN
        RETURN (LINE_B_CITY_ST_ZIP);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_BILL_TO_CUSTFORMULA;

  FUNCTION C_LINE_DEL_TO_CUSTFORMULA(LINE_DEL_TO_ORG_ID IN NUMBER
                                    ,HDR_DEL_TO_ORG_ID IN NUMBER
                                    ,LINE_D_CITY_ST_ZIP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_DEL_TO_ORG_ID IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(HDR_DEL_TO_ORG_ID
         ,0) <> NVL(LINE_DEL_TO_ORG_ID
         ,0) THEN
        RETURN (LINE_D_CITY_ST_ZIP);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_DEL_TO_CUSTFORMULA;

  FUNCTION C_LINE_SALESREPFORMULA(LINE_SALESREP IN VARCHAR2
                                 ,SALES_PERSON IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_SALESREP IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(SALES_PERSON
         ,' ') = NVL(LINE_SALESREP
         ,' ') THEN
        RETURN (NULL);
      ELSE
        RETURN (LINE_SALESREP);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_SALESREPFORMULA;

  FUNCTION C_LINE_POFORMULA(LINE_PO IN VARCHAR2
                           ,PURCHASE_ORDER IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_PO IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(PURCHASE_ORDER
         ,' ') = NVL(LINE_PO
         ,' ') THEN
        RETURN (NULL);
      ELSE
        RETURN (LINE_PO);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_POFORMULA;

  FUNCTION C_LINE_TYPEFORMULA(LINE_TYPE_ID IN NUMBER
                             ,LINE_TYPE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_TYPE_ID IS NOT NULL THEN
        RETURN (LINE_TYPE);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_TYPEFORMULA;

  FUNCTION C_LINE_FREIGHT_TERMSFORMULA(LINE_FREIGHT_TERMS IN VARCHAR2
                                      ,FREIGHT_TERMS IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_FREIGHT_TERMS IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(FREIGHT_TERMS
         ,' ') = NVL(LINE_FREIGHT_TERMS
         ,' ') THEN
        RETURN (NULL);
      ELSE
        RETURN (LINE_FREIGHT_TERMS);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_FREIGHT_TERMSFORMULA;

  FUNCTION C_LINE_FOBFORMULA(LINE_FOB IN VARCHAR2
                            ,FOB IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_FOB IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(FOB
         ,' ') = NVL(LINE_FOB
         ,' ') THEN
        RETURN (NULL);
      ELSE
        RETURN (LINE_FOB);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_FOBFORMULA;

  FUNCTION C_LINE_CARRIERFORMULA(LINE_CARRIER IN VARCHAR2
                                ,CARRIER IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_CARRIER IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(CARRIER
         ,' ') <> NVL(LINE_CARRIER
         ,' ') THEN
        RETURN (LINE_CARRIER);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_CARRIERFORMULA;

  FUNCTION C_FC_EXTEND_PRICEFORMULA(C_GL_CONV_RATE IN NUMBER
                                   ,SVC_EXTENDED_PRICE IN NUMBER
                                   ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      FC_SVC_EXTENDED_PRICE NUMBER;
    BEGIN
      IF P_FUNCTIONAL_CURRENCY = 'Y' THEN
        SELECT
          C_GL_CONV_RATE * NVL(SVC_EXTENDED_PRICE
             ,0)
        INTO FC_SVC_EXTENDED_PRICE
        FROM
          DUAL;
        RETURN (ROUND(NVL(FC_SVC_EXTENDED_PRICE
                        ,0)
                    ,C_PRECISION));
      ELSE
        RETURN (ROUND(NVL(SVC_EXTENDED_PRICE
                        ,0)
                    ,C_PRECISION));
      END IF;
    END;
    RETURN NULL;
  END C_FC_EXTEND_PRICEFORMULA;

  FUNCTION C_FC_SALE_PRICEFORMULA(C_GL_CONV_RATE IN NUMBER
                                 ,SVC_SELLING_PRICE IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      FC_SVC_SELLING_PRICE NUMBER;
    BEGIN
      IF P_FUNCTIONAL_CURRENCY = 'Y' THEN
        SELECT
          C_GL_CONV_RATE * SVC_SELLING_PRICE
        INTO FC_SVC_SELLING_PRICE
        FROM
          DUAL;
        RETURN (FC_SVC_SELLING_PRICE);
      ELSE
        RETURN (SVC_SELLING_PRICE);
      END IF;
    END;
    RETURN NULL;
  END C_FC_SALE_PRICEFORMULA;

  FUNCTION C_LINE_AGREEMENTFORMULA(LINE_AGREEMENT IN VARCHAR2
                                  ,AGREEMENT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_AGREEMENT IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(AGREEMENT
         ,' ') <> NVL(LINE_AGREEMENT
         ,' ') THEN
        RETURN (LINE_AGREEMENT);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_AGREEMENTFORMULA;

  FUNCTION C_LINE_TERMSFORMULA(LINE_TERM IN VARCHAR2
                              ,PAYMENT_TERMS IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_TERM IS NULL THEN
        RETURN (NULL);
      END IF;
      IF NVL(PAYMENT_TERMS
         ,' ') = NVL(LINE_TERM
         ,' ') THEN
        RETURN (NULL);
      ELSE
        RETURN (LINE_TERM);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_TERMSFORMULA;

  FUNCTION C_FMT_TAX_ON_LINEFORMULA(LINE_CATEGORY_CODE IN VARCHAR2
                                   ,C_TOTAL_LINE_TAX IN NUMBER
                                   ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF LINE_CATEGORY_CODE = 'RETURN' THEN
      RETURN (ROUND(NVL(C_TOTAL_LINE_TAX
                      ,0)
                  ,C_PRECISION) * (-1));
    ELSE
      RETURN (ROUND(NVL(C_TOTAL_LINE_TAX
                      ,0)
                  ,C_PRECISION));
    END IF;
  END C_FMT_TAX_ON_LINEFORMULA;

  FUNCTION C_LINE_CATEGORYFORMULA(LINE_CATEGORY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      IF LINE_CATEGORY_CODE IS NOT NULL THEN
        RETURN (LINE_CATEGORY_CODE);
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_LINE_CATEGORYFORMULA;

  FUNCTION C_LINE_CHARGEFORMULA(LINE_CHARGE IN NUMBER
                               ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(LINE_CHARGE)*/NULL;
    /*SRW.REFERENCE(C_PRECISION)*/NULL;
    RETURN (ROUND(NVL(LINE_CHARGE
                    ,0)
                ,C_PRECISION));
  END C_LINE_CHARGEFORMULA;

  FUNCTION C_MASTER_ORGFORMULA RETURN CHAR IS
    V_MASTER_ORG VARCHAR2(20);
  BEGIN
    SELECT
      NVL(OE_SYS_PARAMETERS.VALUE('MASTER_ORGANIZATION_ID'
                                 ,MO_GLOBAL.GET_CURRENT_ORG_ID)
         ,0)
    INTO V_MASTER_ORG
    FROM
      DUAL;
    RETURN V_MASTER_ORG;
  END C_MASTER_ORGFORMULA;

  FUNCTION CF_1FORMULA(S_TAX_TOTAL IN NUMBER
                      ,S_LINE_CHARGE IN NUMBER
                      ,S_EXTENDED_PRICE IN NUMBER
                      ,S_SVC_EXTENDED_PRICE IN NUMBER
                      ,S_HEADER_CHARGE IN NUMBER
                      ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(NVL(S_TAX_TOTAL
                    ,0) + NVL(S_LINE_CHARGE
                    ,0) + NVL(S_EXTENDED_PRICE
                    ,0) + NVL(S_SVC_EXTENDED_PRICE
                    ,0) + NVL(S_HEADER_CHARGE
                    ,0)
                ,C_PRECISION));
  END CF_1FORMULA;

  FUNCTION C_TAX_ON_LINEFORMULA(LINE_CATEGORY_CODE IN VARCHAR2
                               ,C_TOTAL_LINE_TAX IN NUMBER
                               ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF LINE_CATEGORY_CODE = 'RETURN' THEN
      RETURN (ROUND(NVL(C_TOTAL_LINE_TAX
                      ,0)
                  ,C_PRECISION) * (-1));
    ELSE
      RETURN (ROUND(NVL(C_TOTAL_LINE_TAX
                      ,0)
                  ,C_PRECISION));
    END IF;
  END C_TAX_ON_LINEFORMULA;

  FUNCTION C_ORDERED_QUANTITY(LINE_CATEGORY_CODE IN VARCHAR2
                             ,ORDERED_QUANTITY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF LINE_CATEGORY_CODE = 'RETURN' THEN
      RETURN ((ORDERED_QUANTITY) * (-1));
    ELSE
      RETURN (ORDERED_QUANTITY);
    END IF;
  END C_ORDERED_QUANTITY;

  FUNCTION C_TOTAL_LINE_TAXFORMULA(TAX_ON_LINE IN NUMBER
                                  ,S_TOTAL_SVC_TAX IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(TAX_ON_LINE
              ,0) + NVL(S_TOTAL_SVC_TAX
              ,0));
  END C_TOTAL_LINE_TAXFORMULA;

  FUNCTION C_SVC_TAXFORMULA(TAX_ON_SVC_LINE IN NUMBER
                           ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(NVL(TAX_ON_SVC_LINE
                    ,0)
                ,C_PRECISION));
  END C_SVC_TAXFORMULA;

  FUNCTION C_CHARGE_PERIODICITYFORMULA(CHARGE_PERIODICITY_CODE IN VARCHAR2) RETURN CHAR IS
    L_PERIODICITY VARCHAR2(25);
  BEGIN
    IF CHARGE_PERIODICITY_CODE IS NOT NULL THEN
      SELECT
        UNIT_OF_MEASURE
      INTO L_PERIODICITY
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = CHARGE_PERIODICITY_CODE
        AND UOM_CLASS = FND_PROFILE.VALUE('ONT_UOM_CLASS_CHARGE_PERIODICITY');
      RETURN (L_PERIODICITY);
    ELSE
      RETURN (P_CHARGE_PERIODICITY);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END C_CHARGE_PERIODICITYFORMULA;

  FUNCTION G_GRAND_TOTALFORMULA(CHARGE_PERIODICITY_CODE IN VARCHAR2
                               ,C_TAX_TOTAL IN NUMBER
                               ,C_LINE_RECUR_CHARGE IN NUMBER
                               ,CF_EXTENDED_PRICE IN NUMBER
                               ,C_SVC_EXTENDED_PRICE IN NUMBER
                               ,C_HEADER_CHARGE_PERIODICITY IN NUMBER
                               ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CHARGE_PERIODICITY_CODE IS NULL THEN
      RETURN (ROUND(NVL(C_TAX_TOTAL
                      ,0) + NVL(C_LINE_RECUR_CHARGE
                      ,0) + NVL(CF_EXTENDED_PRICE
                      ,0) + NVL(C_SVC_EXTENDED_PRICE
                      ,0) + NVL(C_HEADER_CHARGE_PERIODICITY
                      ,0)
                  ,C_PRECISION));
    ELSE
      RETURN (ROUND(NVL(C_TAX_TOTAL
                      ,0) + NVL(C_LINE_RECUR_CHARGE
                      ,0) + NVL(CF_EXTENDED_PRICE
                      ,0) + NVL(C_SVC_EXTENDED_PRICE
                      ,0)
                  ,C_PRECISION));
    END IF;
  END G_GRAND_TOTALFORMULA;

  FUNCTION G_PRECISIONFORMULA(CURRENCY1 IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    DECLARE
      W_PRECISION NUMBER;
    BEGIN
      SELECT
        PRECISION
      INTO W_PRECISION
      FROM
        FND_CURRENCIES
      WHERE CURRENCY_CODE = CURRENCY1;
      RETURN (W_PRECISION);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_PRECISION := 2;
        RETURN (W_PRECISION);
    END;
    RETURN NULL;
  END G_PRECISIONFORMULA;

  FUNCTION C_HEADER_CHARGE_PERIODICITYFOR(CHARGE_PERIODICITY_CODE IN VARCHAR2
                                         ,C_HEADER_CHARGE IN NUMBER
                                         ,C_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CHARGE_PERIODICITY_CODE IS NULL THEN
      RETURN (ROUND(NVL(C_HEADER_CHARGE
                      ,0)
                  ,C_PRECISION));
    ELSE
      RETURN (ROUND(0.00
                  ,C_PRECISION));
    END IF;
  END C_HEADER_CHARGE_PERIODICITYFOR;

  FUNCTION C_HEADER_CHARGEFORMULA(HEADER_ID IN NUMBER) RETURN NUMBER IS
    L_HEADER_CHARGE NUMBER;
  BEGIN
    SELECT
      SUM(NVL(CHARGE_AMOUNT
             ,0))
    INTO L_HEADER_CHARGE
    FROM
      OE_CHARGE_LINES_V
    WHERE HEADER_ID =C_HEADER_CHARGEFORMULA.HEADER_ID
      AND LINE_ID is null;
    RETURN (L_HEADER_CHARGE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
    WHEN OTHERS THEN
      RETURN (0);
  END C_HEADER_CHARGEFORMULA;

  FUNCTION C_ACCEPT_REQUIREDFORMULA(CONTINGENCY_ID IN NUMBER) RETURN CHAR IS
    L_RETURN_VALUE VARCHAR(10);
  BEGIN
    IF CONTINGENCY_ID IS NULL THEN
      SELECT
        MEANING
      INTO L_RETURN_VALUE
      FROM
        OE_LOOKUPS
      WHERE LOOKUP_TYPE = 'OM_YES_NO'
        AND LOOKUP_CODE = 'NO';
    ELSE
      SELECT
        MEANING
      INTO L_RETURN_VALUE
      FROM
        OE_LOOKUPS
      WHERE LOOKUP_TYPE = 'OM_YES_NO'
        AND LOOKUP_CODE = 'YES';
    END IF;
    RETURN L_RETURN_VALUE;
  END C_ACCEPT_REQUIREDFORMULA;

  FUNCTION C_BILL_CONTACTFORMULA(INVOICE_TO_CONTACT_ID IN NUMBER) RETURN CHAR IS
    L_BILL_CONTACT VARCHAR2(300);
  BEGIN
    SELECT
      SUBSTRB(BILL_CT_PARTY.PERSON_FIRST_NAME
             ,1
             ,40) || ' ' || SUBSTRB(BILL_CT_PARTY.PERSON_LAST_NAME
             ,1
             ,50)
    INTO L_BILL_CONTACT
    FROM
      HZ_CUST_ACCOUNT_ROLES BILL_CT_ACCT_ROLE,
      HZ_PARTIES BILL_CT_PARTY,
      HZ_RELATIONSHIPS BILL_CT_REL,
      HZ_ORG_CONTACTS BILL_CT_ORG_CONT,
      HZ_PARTIES BILL_CT_REL_PARTY,
      HZ_CUST_ACCOUNTS BILL_CT_ROLE_ACCT
    WHERE BILL_CT_ACCT_ROLE.CUST_ACCOUNT_ROLE_ID = INVOICE_TO_CONTACT_ID
      AND BILL_CT_ACCT_ROLE.PARTY_ID = BILL_CT_REL.PARTY_ID
      AND BILL_CT_ACCT_ROLE.ROLE_TYPE = 'CONTACT'
      AND BILL_CT_REL.RELATIONSHIP_ID = BILL_CT_ORG_CONT.PARTY_RELATIONSHIP_ID
      AND BILL_CT_REL.SUBJECT_ID = BILL_CT_PARTY.PARTY_ID
      AND BILL_CT_REL.PARTY_ID = BILL_CT_REL_PARTY.PARTY_ID
      AND BILL_CT_REL.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND BILL_CT_REL.OBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND BILL_CT_ACCT_ROLE.CUST_ACCOUNT_ID = BILL_CT_ROLE_ACCT.CUST_ACCOUNT_ID
      AND BILL_CT_ROLE_ACCT.PARTY_ID = BILL_CT_REL.OBJECT_ID;
    RETURN (L_BILL_CONTACT);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END C_BILL_CONTACTFORMULA;

  FUNCTION C_SHIP_CONTACTFORMULA(SHIP_TO_CONTACT_ID IN NUMBER) RETURN CHAR IS
    L_SHIP_CONTACT VARCHAR2(300);
  BEGIN
    SELECT
      SUBSTRB(SHIP_CT_PARTY.PERSON_FIRST_NAME
             ,1
             ,40) || ' ' || SUBSTRB(SHIP_CT_PARTY.PERSON_LAST_NAME
             ,1
             ,50)
    INTO L_SHIP_CONTACT
    FROM
      HZ_CUST_ACCOUNT_ROLES SHIP_CT_ACCT_ROLE,
      HZ_PARTIES SHIP_CT_PARTY,
      HZ_RELATIONSHIPS SHIP_CT_REL,
      HZ_ORG_CONTACTS SHIP_CT_ORG_CONT,
      HZ_PARTIES SHIP_CT_REL_PARTY,
      HZ_CUST_ACCOUNTS SHIP_CT_ROLE_ACCT
    WHERE SHIP_CT_ACCT_ROLE.CUST_ACCOUNT_ROLE_ID = SHIP_TO_CONTACT_ID
      AND SHIP_CT_ACCT_ROLE.PARTY_ID = SHIP_CT_REL.PARTY_ID
      AND SHIP_CT_ACCT_ROLE.ROLE_TYPE = 'CONTACT'
      AND SHIP_CT_REL.RELATIONSHIP_ID = SHIP_CT_ORG_CONT.PARTY_RELATIONSHIP_ID
      AND SHIP_CT_REL.SUBJECT_ID = SHIP_CT_PARTY.PARTY_ID
      AND SHIP_CT_REL.PARTY_ID = SHIP_CT_REL_PARTY.PARTY_ID
      AND SHIP_CT_REL.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND SHIP_CT_REL.OBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND SHIP_CT_ACCT_ROLE.CUST_ACCOUNT_ID = SHIP_CT_ROLE_ACCT.CUST_ACCOUNT_ID
      AND SHIP_CT_ROLE_ACCT.PARTY_ID = SHIP_CT_REL.OBJECT_ID;
    RETURN (L_SHIP_CONTACT);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END C_SHIP_CONTACTFORMULA;

  FUNCTION C_DEL_CONTACTFORMULA(DELIVER_TO_CONTACT_ID IN NUMBER) RETURN CHAR IS
    L_DEL_CONTACT VARCHAR2(300);
  BEGIN
    SELECT
      SUBSTRB(DEL_CT_PARTY.PERSON_FIRST_NAME
             ,1
             ,40) || ' ' || SUBSTRB(DEL_CT_PARTY.PERSON_LAST_NAME
             ,1
             ,50)
    INTO L_DEL_CONTACT
    FROM
      HZ_CUST_ACCOUNT_ROLES DEL_CT_ACCT_ROLE,
      HZ_PARTIES DEL_CT_PARTY,
      HZ_RELATIONSHIPS DEL_CT_REL,
      HZ_ORG_CONTACTS DEL_CT_ORG_CONT,
      HZ_PARTIES DEL_CT_REL_PARTY,
      HZ_CUST_ACCOUNTS DEL_CT_ROLE_ACCT
    WHERE DEL_CT_ACCT_ROLE.CUST_ACCOUNT_ROLE_ID = DELIVER_TO_CONTACT_ID
      AND DEL_CT_ACCT_ROLE.PARTY_ID = DEL_CT_REL.PARTY_ID
      AND DEL_CT_ACCT_ROLE.ROLE_TYPE = 'CONTACT'
      AND DEL_CT_REL.RELATIONSHIP_ID = DEL_CT_ORG_CONT.PARTY_RELATIONSHIP_ID
      AND DEL_CT_REL.SUBJECT_ID = DEL_CT_PARTY.PARTY_ID
      AND DEL_CT_REL.PARTY_ID = DEL_CT_REL_PARTY.PARTY_ID
      AND DEL_CT_REL.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND DEL_CT_REL.OBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND DEL_CT_ACCT_ROLE.CUST_ACCOUNT_ID = DEL_CT_ROLE_ACCT.CUST_ACCOUNT_ID
      AND DEL_CT_ROLE_ACCT.PARTY_ID = DEL_CT_REL.OBJECT_ID;
    RETURN (L_DEL_CONTACT);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END C_DEL_CONTACTFORMULA;

  FUNCTION RP_DUMMY_ITEM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DUMMY_ITEM;
  END RP_DUMMY_ITEM_P;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

  FUNCTION RP_SUB_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_SUB_TITLE;
  END RP_SUB_TITLE_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  FUNCTION RP_FUNCTIONAL_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_FUNCTIONAL_CURRENCY;
  END RP_FUNCTIONAL_CURRENCY_P;

  FUNCTION RP_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND;
  END RP_DATA_FOUND_P;

  FUNCTION RP_ITEM_FLEX_ALL_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ITEM_FLEX_ALL_SEG;
  END RP_ITEM_FLEX_ALL_SEG_P;

  FUNCTION RP_PRINT_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_PRINT_DESCRIPTION;
  END RP_PRINT_DESCRIPTION_P;

  FUNCTION RP_CURR_PROFILE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CURR_PROFILE;
  END RP_CURR_PROFILE_P;

  FUNCTION RP_ITEM_FLEX_SEG_VAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ITEM_FLEX_SEG_VAL;
  END RP_ITEM_FLEX_SEG_VAL_P;

  FUNCTION RP_TAX_TOTAL_ROUNDED_P RETURN NUMBER IS
  BEGIN
    RETURN RP_TAX_TOTAL_ROUNDED;
  END RP_TAX_TOTAL_ROUNDED_P;

  FUNCTION RP_LINE_CHARGE_TOTAL_ROUNDED_P RETURN NUMBER IS
  BEGIN
    RETURN RP_LINE_CHARGE_TOTAL_ROUNDED;
  END RP_LINE_CHARGE_TOTAL_ROUNDED_P;

  FUNCTION RP_HDR_CHARGE_TOTAL_ROUNDED_P RETURN NUMBER IS
  BEGIN
    RETURN RP_HDR_CHARGE_TOTAL_ROUNDED;
  END RP_HDR_CHARGE_TOTAL_ROUNDED_P;

  FUNCTION RP_HDR_CHARGE_TOTAL_P RETURN NUMBER IS
  BEGIN
    RETURN RP_HDR_CHARGE_TOTAL;
  END RP_HDR_CHARGE_TOTAL_P;

  FUNCTION IS_FIXED_RATE(X_FROM_CURRENCY IN VARCHAR2
                        ,X_TO_CURRENCY IN VARCHAR2
                        ,X_EFFECTIVE_DATE IN DATE) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.IS_FIXED_RATE(:X_FROM_CURRENCY, :X_TO_CURRENCY, :X_EFFECTIVE_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_TO_CURRENCY);
    STPROC.BIND_I(X_EFFECTIVE_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.IS_FIXED_RATE(X_FROM_CURRENCY, X_TO_CURRENCY, X_EFFECTIVE_DATE);
    RETURN X0;
  END IS_FIXED_RATE;

  PROCEDURE GET_RELATION(X_FROM_CURRENCY IN VARCHAR2
                        ,X_TO_CURRENCY IN VARCHAR2
                        ,X_EFFECTIVE_DATE IN DATE
                        ,X_FIXED_RATE IN OUT NOCOPY BOOLEAN
                        ,X_RELATIONSHIP IN OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('declare X_FIXED_RATE BOOLEAN;
  begin X_FIXED_RATE := sys.diutil.int_to_bool(:X_FIXED_RATE);
  GL_CURRENCY_API.GET_RELATION(:X_FROM_CURRENCY, :X_TO_CURRENCY,
  :X_EFFECTIVE_DATE, X_FIXED_RATE, :X_RELATIONSHIP);
  :X_FIXED_RATE := sys.diutil.bool_to_int(X_FIXED_RATE); end;');
    STPROC.BIND_IO(X_FIXED_RATE);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_TO_CURRENCY);
    STPROC.BIND_I(X_EFFECTIVE_DATE);
    STPROC.BIND_IO(X_RELATIONSHIP);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X_FIXED_RATE);
    STPROC.RETRIEVE(5
                   ,X_RELATIONSHIP);*/
--X_FIXED_RATE := sys.diutil.int_to_bool(X_FIXED_RATE);
GL_CURRENCY_API.GET_RELATION(X_FROM_CURRENCY, X_TO_CURRENCY, X_EFFECTIVE_DATE, X_FIXED_RATE, X_RELATIONSHIP);
--X_FIXED_RATE := sys.diutil.bool_to_int(X_FIXED_RATE);
  END GET_RELATION;

  FUNCTION GET_EURO_CODE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.GET_EURO_CODE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.GET_EURO_CODE;
    RETURN X0;
  END GET_EURO_CODE;

  FUNCTION GET_RATE(X_FROM_CURRENCY IN VARCHAR2
                   ,X_TO_CURRENCY IN VARCHAR2
                   ,X_CONVERSION_DATE IN DATE
                   ,X_CONVERSION_TYPE IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.GET_RATE(:X_FROM_CURRENCY, :X_TO_CURRENCY, :X_CONVERSION_DATE, :X_CONVERSION_TYPE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_TO_CURRENCY);
    STPROC.BIND_I(X_CONVERSION_DATE);
    STPROC.BIND_I(X_CONVERSION_TYPE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.GET_RATE(X_FROM_CURRENCY, X_TO_CURRENCY, X_CONVERSION_DATE, X_CONVERSION_TYPE);
    RETURN X0;
  END GET_RATE;

  FUNCTION GET_RATE(X_SET_OF_BOOKS_ID IN NUMBER
                   ,X_FROM_CURRENCY IN VARCHAR2
                   ,X_CONVERSION_DATE IN DATE
                   ,X_CONVERSION_TYPE IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.GET_RATE(:X_SET_OF_BOOKS_ID, :X_FROM_CURRENCY, :X_CONVERSION_DATE, :X_CONVERSION_TYPE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_SET_OF_BOOKS_ID);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_CONVERSION_DATE);
    STPROC.BIND_I(X_CONVERSION_TYPE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.GET_RATE(X_SET_OF_BOOKS_ID, X_FROM_CURRENCY, X_CONVERSION_DATE, X_CONVERSION_TYPE);
    RETURN X0;
  END GET_RATE;

  FUNCTION CONVERT_AMOUNT(X_FROM_CURRENCY IN VARCHAR2
                         ,X_TO_CURRENCY IN VARCHAR2
                         ,X_CONVERSION_DATE IN DATE
                         ,X_CONVERSION_TYPE IN VARCHAR2
                         ,X_AMOUNT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.CONVERT_AMOUNT(:X_FROM_CURRENCY, :X_TO_CURRENCY, :X_CONVERSION_DATE, :X_CONVERSION_TYPE, :X_AMOUNT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_TO_CURRENCY);
    STPROC.BIND_I(X_CONVERSION_DATE);
    STPROC.BIND_I(X_CONVERSION_TYPE);
    STPROC.BIND_I(X_AMOUNT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.CONVERT_AMOUNT(X_FROM_CURRENCY, X_TO_CURRENCY, X_CONVERSION_DATE, X_CONVERSION_TYPE, X_AMOUNT);
    RETURN X0;
  END CONVERT_AMOUNT;

  FUNCTION CONVERT_AMOUNT(X_SET_OF_BOOKS_ID IN NUMBER
                         ,X_FROM_CURRENCY IN VARCHAR2
                         ,X_CONVERSION_DATE IN DATE
                         ,X_CONVERSION_TYPE IN VARCHAR2
                         ,X_AMOUNT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.CONVERT_AMOUNT(:X_SET_OF_BOOKS_ID, :X_FROM_CURRENCY, :X_CONVERSION_DATE, :X_CONVERSION_TYPE, :X_AMOUNT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_SET_OF_BOOKS_ID);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_CONVERSION_DATE);
    STPROC.BIND_I(X_CONVERSION_TYPE);
    STPROC.BIND_I(X_AMOUNT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.CONVERT_AMOUNT(X_SET_OF_BOOKS_ID, X_FROM_CURRENCY, X_CONVERSION_DATE, X_CONVERSION_TYPE, X_AMOUNT);
    RETURN X0;
  END CONVERT_AMOUNT;

  FUNCTION GET_DERIVE_TYPE(SOB_ID IN NUMBER
                          ,PERIOD IN VARCHAR2
                          ,CURR_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.GET_DERIVE_TYPE(:SOB_ID, :PERIOD, :CURR_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(SOB_ID);
    STPROC.BIND_I(PERIOD);
    STPROC.BIND_I(CURR_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.GET_DERIVE_TYPE(SOB_ID, PERIOD, CURR_CODE);
    RETURN X0;
  END GET_DERIVE_TYPE;

  FUNCTION RATE_EXISTS(X_FROM_CURRENCY IN VARCHAR2
                      ,X_TO_CURRENCY IN VARCHAR2
                      ,X_CONVERSION_DATE IN DATE
                      ,X_CONVERSION_TYPE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := GL_CURRENCY_API.RATE_EXISTS(:X_FROM_CURRENCY, :X_TO_CURRENCY, :X_CONVERSION_DATE, :X_CONVERSION_TYPE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_FROM_CURRENCY);
    STPROC.BIND_I(X_TO_CURRENCY);
    STPROC.BIND_I(X_CONVERSION_DATE);
    STPROC.BIND_I(X_CONVERSION_TYPE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := GL_CURRENCY_API.RATE_EXISTS(X_FROM_CURRENCY, X_TO_CURRENCY, X_CONVERSION_DATE, X_CONVERSION_TYPE);
    RETURN X0;
  END RATE_EXISTS;

FUNCTION BEFOREREPORT RETURN BOOLEAN IS
BEGIN

	DECLARE
	BEGIN

	/*  BEGIN
	  SRW.USER_EXIT('FND SRWINIT');
	  EXCEPTION
		 WHEN SRW.USER_EXIT_FAILURE THEN
		SRW.MESSAGE (1000,'Failed in BEFORE REPORT trigger - SRWINIT USER EXIT');
		 return (FALSE);
	  END;*/

	BEGIN  /*MOAC*/

	P_ORG_ID:= MO_GLOBAL.GET_CURRENT_ORG_ID();
	END;



/*------------------------------------------------------------------------------
Following PL/SQL block gets the company name, functional currency and precision.
------------------------------------------------------------------------------*/


	  DECLARE
	  l_company_name            VARCHAR2 (100);
	  l_functional_currency     VARCHAR2  (15);

	  BEGIN

	    SELECT sob.name                   ,
		   sob.currency_code
	    INTO
		   l_company_name ,
		   l_functional_currency
	    FROM    gl_sets_of_books sob,
		    fnd_currencies cur
	    WHERE  sob.set_of_books_id = p_sob_id
	    AND    sob.currency_code = cur.currency_code
	    ;

	    rp_company_name            := l_company_name;
	    rp_functional_currency     := l_functional_currency ;


	  EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	     /*srw.message(2000,'Failed in BEFORE REPORT trigger. get company, currency');*/null;
	    when OTHERS then
	    /*srw.message(2000,'Failed in BEFORE REPORT trigger. get company, currency'); */null;
	  END ;

/*------------------------------------------------------------------------------
Following PL/SQL block gets the report name for the passed concurrent request Id.
------------------------------------------------------------------------------*/
	  DECLARE
	      l_report_name  VARCHAR2(240);
	  BEGIN
	      SELECT cp.user_concurrent_program_name
	      INTO   l_report_name
	      FROM   FND_CONCURRENT_PROGRAMS_VL cp,
		     FND_CONCURRENT_REQUESTS cr
	      WHERE  cr.request_id     = P_CONC_REQUEST_ID
	      AND    cp.application_id = cr.program_application_id
	      AND    cp.concurrent_program_id = cr.concurrent_program_id
	      ;

	      RP_Report_Name := l_report_name;
	  EXCEPTION
	      WHEN NO_DATA_FOUND
	      THEN RP_REPORT_NAME := 'Sales Order Acknowledgement';
	      when OTHERS then
	      /*srw.message(2000,'Failed in BEFORE REPORT trigger. get company, currency'); */null;
	  END;

/*------------------------------------------------------------------------------
The following block retrieves the profile option value for standard vs
extended currency
-------------------------------------------------------------------------------*/

	/*  BEGIN
	    SRW.REFERENCE(:p_profile_name);
	    SRW.USER_EXIT('FND GETPROFILE NAME=":p_profile_name"
					  FIELD=":RP_CURR_PROFILE"
					  PRINT_ERROR="N"
					  ');


	  EXCEPTION
	    WHEN SRW.USER_EXIT_FAILURE THEN
	    srw.message(2000,'Failed in BEFORE REPORT trigger. FND GETPROFILE - CURR USER_EXIT');
	  END; */



/*------------------------------------------------------------------------------
Following PL/SQL block builds up the lexical parameters, to be used in the
WHERE clause of the query. This also populates the report level variables, used
to store the flexfield structure.
------------------------------------------------------------------------------*/
	  /*BEGIN
	    SRW.REFERENCE(:P_item_flex_code);
	    SRW.REFERENCE(:P_item_structure_num);


	    SRW.USER_EXIT('FND FLEXSQL CODE=":p_item_flex_code"
				   NUM=":p_item_structure_num"
				   APPL_SHORT_NAME="INV"
				   OUTPUT=":rp_item_flex_all_seg"
				   MODE="SELECT"
				   DISPLAY="ALL"
				   TABLEALIAS="SI"
				    ');

	  EXCEPTION
	    WHEN SRW.USER_EXIT_FAILURE THEN
	   srw.message(2000,'Failed in BEFORE REPORT trigger. FND FLEXSQL USER_EXIT');
	  END; */



	DECLARE
	    l_meaning       VARCHAR2 (80);
	  BEGIN
	    SELECT MEANING
	    INTO   l_meaning
	    FROM OE_LOOKUPS
	    WHERE LOOKUP_TYPE = 'ITEM_DISPLAY_CODE'
	    AND LOOKUP_CODE  = substr(upper(p_print_description),1,1)
	    ;

	    rp_print_description := l_meaning ;
	  EXCEPTION WHEN NO_DATA_FOUND THEN
	    rp_print_description := 'Internal Item Description';
	  when OTHERS then
	  /*srw.message(2000,'Failed in BEFORE REPORT trigger. Get Print Description'); */null;

	  END ;



	/* ----- The follwoing PL/SQL block populates the multi-lingual
	lexical parameters----- */
	  BEGIN
	    populate_mls_lexicals;
	  END;

	END ;
  RETURN (TRUE);
END;

function F_PeriodicityFormatTrigger return VARCHAR2 is
begin
  if OE_SYS_PARAMETERS.Value('RECURRING_CHARGES',mo_global.get_current_org_id()) = 'Y' THEN
    return('TRUE');
  else
    return ('FALSE');
  end if;
  return ('FALSE');
end;

END ONT_OEXOEACK_XMLP_PKG;



/
