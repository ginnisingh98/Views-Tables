--------------------------------------------------------
--  DDL for Package Body JE_JEPTAPER_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEPTAPER_XMLP_PKG" AS
/* $Header: JEPTAPERB.pls 120.1 2007/12/25 16:58:37 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    DECLARE
      COAID NUMBER;
      NAME VARCHAR2(30);
      FUNCTCURR VARCHAR2(15);
      ERRBUF VARCHAR2(2000);
      ERRBUF2 VARCHAR2(2000);
      L_PRECISION NUMBER;
      L_EXT_PRECISION NUMBER;
      L_MIN_ACCT_UNIT NUMBER;
      L_BOOLEAN BOOLEAN;
      CURSOR C_COUNTRY_CODE IS
        SELECT
          VAT_COUNTRY_CODE
        FROM
          FINANCIALS_SYSTEM_PARAMETERS
        WHERE SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID;
    BEGIN
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO PLACE_REP_TITLE
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;

	PLACE_REP_TITLE := substr(PLACE_REP_TITLE,1,instr(PLACE_REP_TITLE,' (XML)'));
      IF (P_SET_OF_BOOKS_ID IS NOT NULL) THEN
        GL_GET_LEDGER_INFO(P_SET_OF_BOOKS_ID
                          ,COAID
                          ,NAME
                          ,FUNCTCURR
                          ,ERRBUF);
        IF (ERRBUF IS NOT NULL) THEN
          SET_NAME('SQLGL'
                  ,'GL_PLL_ROUTINE_ERROR');
          SET_TOKEN('ROUTINE'
                   ,'gl_get_ledger_info'
                   ,FALSE);
          ERRBUF2 := GET;
          /*SRW.MESSAGE('00'
                     ,ERRBUF2)*/NULL;
          /*SRW.MESSAGE('00'
                     ,ERRBUF)*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END IF;
      END IF;
      PLACE_COA_ID := COAID;
      PLACE_SOB_NAME := NAME;
      PLACE_FUNCT_CURR := FUNCTCURR;
      IF P_BALANCING_SEGMENT IS NOT NULL THEN
        L_BOOLEAN := FND_FLEX_APIS.GET_SEGMENT_COLUMN(X_APPLICATION_ID => '101'
                                                     ,X_ID_FLEX_CODE => 'GL#'
                                                     ,X_ID_FLEX_NUM => P_CHART_OF_ACCT
                                                     ,X_SEG_ATTR_TYPE => 'GL_BALANCING'
                                                     ,X_APP_COLUMN_NAME => P_BAL_SEG_NAME);
        P_BAL_SEG_NAME := P_BAL_SEG_NAME || '=' || P_BALANCING_SEGMENT;
        IF NOT L_BOOLEAN THEN
          ERRBUF := GET;
          /*SRW.MESSAGE('00'
                     ,ERRBUF)*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END IF;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ERRBUF := GET;
        /*SRW.MESSAGE('00'
                   ,ERRBUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN OTHERS THEN
        ERRBUF := GET;
        /*SRW.MESSAGE('00'
                   ,ERRBUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_VAT_COUNTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_VAT_COUNTRY_CODE;
  END C_VAT_COUNTRY_CODE_P;

  FUNCTION PLACE_REP_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PLACE_REP_TITLE;
  END PLACE_REP_TITLE_P;

  FUNCTION PLACE_COA_ID_P RETURN NUMBER IS
  BEGIN
    RETURN PLACE_COA_ID;
  END PLACE_COA_ID_P;

  FUNCTION PLACE_SOB_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PLACE_SOB_NAME;
  END PLACE_SOB_NAME_P;

  FUNCTION PLACE_FUNCT_CURR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PLACE_FUNCT_CURR;
  END PLACE_FUNCT_CURR_P;

  PROCEDURE GL_GET_PERIOD_DATES(TSET_OF_BOOKS_ID IN NUMBER
                               ,TPERIOD_NAME IN VARCHAR2
                               ,TSTART_DATE OUT NOCOPY DATE
                               ,TEND_DATE OUT NOCOPY DATE
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin GL_INFO.GL_GET_PERIOD_DATES(:TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TSTART_DATE, :TEND_DATE, :ERRBUF); end;');
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TSTART_DATE);
    STPROC.BIND_O(TEND_DATE);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,TSTART_DATE);
    STPROC.RETRIEVE(4
                   ,TEND_DATE);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/
		   GL_INFO.GL_GET_PERIOD_DATES(TSET_OF_BOOKS_ID,TPERIOD_NAME,TSTART_DATE,TEND_DATE,ERRBUF);
  END GL_GET_PERIOD_DATES;

  PROCEDURE GL_GET_LEDGER_INFO(SOBID IN NUMBER
                              ,COAID OUT NOCOPY NUMBER
                              ,SOBNAME OUT NOCOPY VARCHAR2
                              ,FUNC_CURR OUT NOCOPY VARCHAR2
                              ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin GL_INFO.GL_GET_LEDGER_INFO(:SOBID, :COAID, :SOBNAME, :FUNC_CURR, :ERRBUF); end;');
    STPROC.BIND_I(SOBID);
    STPROC.BIND_O(COAID);
    STPROC.BIND_O(SOBNAME);
    STPROC.BIND_O(FUNC_CURR);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,COAID);
    STPROC.RETRIEVE(3
                   ,SOBNAME);
    STPROC.RETRIEVE(4
                   ,FUNC_CURR);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/
		   GL_INFO.GL_GET_LEDGER_INFO(SOBID,COAID,SOBNAME,FUNC_CURR,ERRBUF);
  END GL_GET_LEDGER_INFO;

  PROCEDURE GL_GET_BUD_OR_ENC_NAME(ACTUAL_TYPE IN VARCHAR2
                                  ,TYPE_ID IN NUMBER
                                  ,NAME OUT NOCOPY VARCHAR2
                                  ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
 /*   STPROC.INIT('begin GL_INFO.GL_GET_BUD_OR_ENC_NAME(:ACTUAL_TYPE, :TYPE_ID, :NAME, :ERRBUF); end;');
    STPROC.BIND_I(ACTUAL_TYPE);
    STPROC.BIND_I(TYPE_ID);
    STPROC.BIND_O(NAME);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,NAME);
    STPROC.RETRIEVE(4
                   ,ERRBUF);*/
		   GL_INFO.GL_GET_BUD_OR_ENC_NAME(ACTUAL_TYPE,TYPE_ID,NAME,ERRBUF);
  END GL_GET_BUD_OR_ENC_NAME;

  PROCEDURE GL_GET_LOOKUP_VALUE(LMODE IN VARCHAR2
                               ,CODE IN VARCHAR2
                               ,TYPE IN VARCHAR2
                               ,VALUE OUT NOCOPY VARCHAR2
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin GL_INFO.GL_GET_LOOKUP_VALUE(:LMODE, :CODE, :TYPE, :VALUE, :ERRBUF); end;');
    STPROC.BIND_I(LMODE);
    STPROC.BIND_I(CODE);
    STPROC.BIND_I(TYPE);
    STPROC.BIND_O(VALUE);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,VALUE);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/null;
  END GL_GET_LOOKUP_VALUE;

  PROCEDURE GL_GET_FIRST_PERIOD(TSET_OF_BOOKS_ID IN NUMBER
                               ,TPERIOD_NAME IN VARCHAR2
                               ,TFIRST_PERIOD OUT NOCOPY VARCHAR2
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
 /*   STPROC.INIT('begin GL_INFO.GL_GET_FIRST_PERIOD(:TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TFIRST_PERIOD, :ERRBUF); end;');
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TFIRST_PERIOD);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,TFIRST_PERIOD);
    STPROC.RETRIEVE(4
                   ,ERRBUF);*/null;
  END GL_GET_FIRST_PERIOD;

  PROCEDURE GL_GET_FIRST_PERIOD_OF_QUARTER(TSET_OF_BOOKS_ID IN NUMBER
                                          ,TPERIOD_NAME IN VARCHAR2
                                          ,TFIRST_PERIOD OUT NOCOPY VARCHAR2
                                          ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin GL_INFO.GL_GET_FIRST_PERIOD_OF_QUARTER(:TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TFIRST_PERIOD, :ERRBUF); end;');
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TFIRST_PERIOD);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,TFIRST_PERIOD);
    STPROC.RETRIEVE(4
                   ,ERRBUF);*/null;
  END GL_GET_FIRST_PERIOD_OF_QUARTER;

  PROCEDURE GL_GET_CONSOLIDATION_INFO(CONS_ID IN NUMBER
                                     ,CONS_NAME OUT NOCOPY VARCHAR2
                                     ,METHOD OUT NOCOPY VARCHAR2
                                     ,CURR_CODE OUT NOCOPY VARCHAR2
                                     ,FROM_SOBID OUT NOCOPY NUMBER
                                     ,TO_SOBID OUT NOCOPY NUMBER
                                     ,DESCRIPTION OUT NOCOPY VARCHAR2
                                     ,START_DATE OUT NOCOPY DATE
                                     ,END_DATE OUT NOCOPY DATE
                                     ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
/*    STPROC.INIT('begin GL_INFO.GL_GET_CONSOLIDATION_INFO(:CONS_ID, :CONS_NAME, :METHOD, :CURR_CODE, :FROM_SOBID, :TO_SOBID, :DESCRIPTION, :START_DATE, :END_DATE, :ERRBUF); end;');
    STPROC.BIND_I(CONS_ID);
    STPROC.BIND_O(CONS_NAME);
    STPROC.BIND_O(METHOD);
    STPROC.BIND_O(CURR_CODE);
    STPROC.BIND_O(FROM_SOBID);
    STPROC.BIND_O(TO_SOBID);
    STPROC.BIND_O(DESCRIPTION);
    STPROC.BIND_O(START_DATE);
    STPROC.BIND_O(END_DATE);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,CONS_NAME);
    STPROC.RETRIEVE(3
                   ,METHOD);
    STPROC.RETRIEVE(4
                   ,CURR_CODE);
    STPROC.RETRIEVE(5
                   ,FROM_SOBID);
    STPROC.RETRIEVE(6
                   ,TO_SOBID);
    STPROC.RETRIEVE(7
                   ,DESCRIPTION);
    STPROC.RETRIEVE(8
                   ,START_DATE);
    STPROC.RETRIEVE(9
                   ,END_DATE);
    STPROC.RETRIEVE(10
                   ,ERRBUF);*/null;
  END GL_GET_CONSOLIDATION_INFO;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/

    FND_MESSAGE.SET_NAME(APPLICATION,NAME);
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
		     TRANSLATE1 BOOLEAN;
  BEGIN
  /*  STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/

    FND_MESSAGE.SET_TOKEN(TOKEN,VALUE,TRANSLATE);
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/null;
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/null;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET_STRING;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/

		   X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
 /*   STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/null;
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/null;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/null;
  END RAISE_ERROR;

END JE_JEPTAPER_XMLP_PKG;



/
