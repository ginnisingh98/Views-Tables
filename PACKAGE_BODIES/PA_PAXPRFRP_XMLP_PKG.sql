--------------------------------------------------------
--  DDL for Package Body PA_PAXPRFRP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXPRFRP_XMLP_PKG" AS
/* $Header: PAXPRFRPB.pls 120.0 2008/01/02 11:51:26 krreddy noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    X_RETURN_STATUS VARCHAR2(1);
    X_MSG_COUNT NUMBER;
    X_MSG_DATA VARCHAR2(250);
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    PA_FUND_REVAL_PVT.CLEAR_DISTRIBUTION_WARNINGS(P_REQUEST_ID => P_CONC_REQUEST_ID
                                                 ,X_RETURN_STATUS => X_RETURN_STATUS
                                                 ,X_MSG_COUNT => X_MSG_COUNT
                                                 ,X_MSG_DATA => X_MSG_DATA);
    IF L_ERROR_FLAG = 'T' THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      RETURN (FALSE);
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    X_RETURN_STATUS VARCHAR2(1);
    X_MSG_COUNT NUMBER;
    X_MSG_DATA VARCHAR2(250);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

    P_THRU_DATE_DISP:= TO_CHAR(P_THRU_DATE,'DD-MON-YY');
    P_RATE_DATE_DISP:= TO_CHAR(P_RATE_DATE,'DD-MON-YY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.USER_EXIT('FND GETPROFILE
                      NAME="PA_DEBUG_MODE"
                      FIELD=":p_debug_mode"
                      PRINT_ERROR="N"')*/NULL;
    PA_FUND_REVAL_PVT.REVALUATE_FUNDING(P_PROJECT_ID => P_PROJECT_ID
                                       ,P_PROJECT_TYPE_ID => P_PROJECT_TYPE_ID
                                       ,P_FROM_PROJ_NUMBER => P_FROM_PROJ_NUMBER
                                       ,P_TO_PROJ_NUMBER => P_TO_PROJ_NUMBER
                                       ,P_THRU_DATE => P_THRU_DATE
                                       ,P_RATE_TYPE => P_RATE_TYPE
                                       ,P_RATE_DATE => P_RATE_DATE
                                       ,P_BASELINE_FLAG => P_BASELINE_FLAG
                                       ,P_DEBUG_MODE => P_DEBUG_MODE
                                       ,P_RUN_MODE => P_RUN_MODE
                                       ,X_RETURN_STATUS => X_RETURN_STATUS
                                       ,X_MSG_COUNT => X_MSG_COUNT
                                       ,X_MSG_DATA => X_MSG_DATA);
    IF X_RETURN_STATUS <> 'S' THEN
      L_ERROR_FLAG := 'T';
    END IF;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(1
                 ,'From When-Others in Before Report')*/NULL;
      /*SRW.MESSAGE(1
                 ,SQLERRM)*/NULL;
      L_ERROR_FLAG := 'T';
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END BEFOREREPORT;

  FUNCTION CF_COMPANY_NAMEFORMULA RETURN CHAR IS
    V_COMPANY_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GLB.NAME
    INTO V_COMPANY_NAME
    FROM
      GL_SETS_OF_BOOKS GLB,
      PA_IMPLEMENTATIONS PI
    WHERE GLB.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    CP_COMPANY_NAME := V_COMPANY_NAME;
    RETURN CP_COMPANY_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN CP_COMPANY_NAME;
  END CF_COMPANY_NAMEFORMULA;

  FUNCTION CF_BASELINE_FUNDINGFORMULA RETURN CHAR IS
    V_MEANING VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO V_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = P_BASELINE_FLAG;
    CP_BASELINE_FUNDING := V_MEANING;
    RETURN CP_BASELINE_FUNDING;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN CP_BASELINE_FUNDING;
  END CF_BASELINE_FUNDINGFORMULA;

  FUNCTION CF_PROJECT_TYPEFORMULA RETURN CHAR IS
    V_PROJECT_TYPE VARCHAR2(20);
  BEGIN
    SELECT
      PROJECT_TYPE
    INTO V_PROJECT_TYPE
    FROM
      PA_PROJECT_TYPES
    WHERE PROJECT_TYPE_ID = P_PROJECT_TYPE_ID
      AND DIRECT_FLAG = 'Y'
      AND SYSDATE between START_DATE_ACTIVE
      AND NVL(END_DATE_ACTIVE
       ,SYSDATE);
    CP_PROJECT_TYPE := V_PROJECT_TYPE;
    RETURN CP_PROJECT_TYPE;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN CP_PROJECT_TYPE;
  END CF_PROJECT_TYPEFORMULA;

  FUNCTION CF_RATE_TYPEFORMULA RETURN CHAR IS
    V_RATE_TYPE VARCHAR2(30);
  BEGIN
    SELECT
      USER_CONVERSION_TYPE
    INTO V_RATE_TYPE
    FROM
      PA_CONVERSION_TYPES_V
    WHERE CONVERSION_TYPE = P_RATE_TYPE;
    CP_RATE_TYPE := V_RATE_TYPE;
    RETURN CP_RATE_TYPE;
  EXCEPTION
    WHEN OTHERS THEN
      CP_RATE_TYPE := P_RATE_TYPE;
      RETURN CP_RATE_TYPE;
  END CF_RATE_TYPEFORMULA;

  FUNCTION CF_PROJECT_NUMBERFORMULA RETURN CHAR IS
    V_PROJECT_NUMBER VARCHAR2(25);
  BEGIN
    SELECT
      SEGMENT1
    INTO V_PROJECT_NUMBER
    FROM
      PA_PROJECTS
    WHERE PROJECT_ID = P_PROJECT_ID;
    CP_PROJECT_NUMBER := V_PROJECT_NUMBER;
    RETURN CP_PROJECT_NUMBER;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN CP_PROJECT_NUMBER;
  END CF_PROJECT_NUMBERFORMULA;

  FUNCTION CP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COMPANY_NAME;
  END CP_COMPANY_NAME_P;

  FUNCTION CP_NODATAFOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NODATAFOUND;
  END CP_NODATAFOUND_P;

  FUNCTION CP_PROJECT_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROJECT_NUMBER;
  END CP_PROJECT_NUMBER_P;

  FUNCTION CP_PROJECT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROJECT_TYPE;
  END CP_PROJECT_TYPE_P;

  FUNCTION CP_RATE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RATE_TYPE;
  END CP_RATE_TYPE_P;

  FUNCTION CP_BASELINE_FUNDING_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BASELINE_FUNDING;
  END CP_BASELINE_FUNDING_P;

END PA_PAXPRFRP_XMLP_PKG;


/
