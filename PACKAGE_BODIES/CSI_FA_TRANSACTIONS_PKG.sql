--------------------------------------------------------
--  DDL for Package Body CSI_FA_TRANSACTIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CSI_FA_TRANSACTIONS_PKG" as
/* $Header: csitfatb.pls 120.0 2005/06/17 15:06:59 brmanesh noship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_INTERFACE_LINE_ID in NUMBER,
  X_INTERFACE_HEADER_ID in NUMBER,
  X_DISTRIBUTION_ID in NUMBER,
  X_TRANSACTION_DATE in DATE,
  X_TRANSACTION_UNITS in NUMBER,
  X_TRANSACTION_COST in NUMBER,
  X_PARENT_MASS_ADDITION_ID in NUMBER,
  X_PA_ASSET_LINE_ID in NUMBER,
  X_TRANSFER_DISTRIBUTION_ID in NUMBER,
  X_RETIREMENT_ID in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_DATE_PROCESSED in DATE,
  X_DATE_NOTIFIED in DATE,
  X_ERROR_FLAG in VARCHAR2,
  X_ERROR_TEXT in VARCHAR2,
  X_TRANSACTION_SOURCE_TYPE in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  insert into CSI_FA_TRANSACTIONS (
    INTERFACE_HEADER_ID,
    INTERFACE_LINE_ID,
    TRANSACTION_SOURCE_TYPE,
    DISTRIBUTION_ID,
    TRANSACTION_DATE,
    TRANSACTION_UNITS,
    TRANSACTION_COST,
    PARENT_MASS_ADDITION_ID,
    PA_ASSET_LINE_ID,
    TRANSFER_DISTRIBUTION_ID,
    RETIREMENT_ID,
    STATUS_CODE,
    DATE_PROCESSED,
    DATE_NOTIFIED,
    ERROR_FLAG,
    ERROR_TEXT,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN
  ) select
    X_INTERFACE_HEADER_ID,
    X_INTERFACE_LINE_ID,
    X_TRANSACTION_SOURCE_TYPE,
    X_DISTRIBUTION_ID,
    X_TRANSACTION_DATE,
    X_TRANSACTION_UNITS,
    X_TRANSACTION_COST,
    X_PARENT_MASS_ADDITION_ID,
    X_PA_ASSET_LINE_ID,
    X_TRANSFER_DISTRIBUTION_ID,
    X_RETIREMENT_ID,
    X_STATUS_CODE,
    X_DATE_PROCESSED,
    X_DATE_NOTIFIED,
    X_ERROR_FLAG,
    X_ERROR_TEXT,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_LOGIN
  from SYS.dual;

end INSERT_ROW;

procedure LOCK_ROW (
  X_INTERFACE_LINE_ID in NUMBER,
  X_INTERFACE_HEADER_ID in NUMBER,
  X_DISTRIBUTION_ID in NUMBER,
  X_TRANSACTION_DATE in DATE,
  X_TRANSACTION_UNITS in NUMBER,
  X_TRANSACTION_COST in NUMBER,
  X_PARENT_MASS_ADDITION_ID in NUMBER,
  X_PA_ASSET_LINE_ID in NUMBER,
  X_TRANSFER_DISTRIBUTION_ID in NUMBER,
  X_RETIREMENT_ID in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_DATE_PROCESSED in DATE,
  X_DATE_NOTIFIED in DATE,
  X_ERROR_FLAG in VARCHAR2,
  X_ERROR_TEXT in VARCHAR2,
  X_TRANSACTION_SOURCE_TYPE in VARCHAR2
) is
  cursor c1 is select
      INTERFACE_HEADER_ID,
      DISTRIBUTION_ID,
      TRANSACTION_DATE,
      TRANSACTION_UNITS,
      TRANSACTION_COST,
      PARENT_MASS_ADDITION_ID,
      PA_ASSET_LINE_ID,
      TRANSFER_DISTRIBUTION_ID,
      RETIREMENT_ID,
      STATUS_CODE,
      DATE_PROCESSED,
      DATE_NOTIFIED,
      ERROR_FLAG,
      ERROR_TEXT,
      TRANSACTION_SOURCE_TYPE
    from CSI_FA_TRANSACTIONS
    where INTERFACE_LINE_ID = X_INTERFACE_LINE_ID
    for update of INTERFACE_LINE_ID nowait;
begin
  for tlinfo in c1 loop
    if (    (tlinfo.TRANSACTION_SOURCE_TYPE = X_TRANSACTION_SOURCE_TYPE)
        AND (tlinfo.INTERFACE_HEADER_ID = X_INTERFACE_HEADER_ID)
        AND (tlinfo.DISTRIBUTION_ID = X_DISTRIBUTION_ID)
        AND (tlinfo.TRANSACTION_DATE = X_TRANSACTION_DATE)
        AND (tlinfo.TRANSACTION_UNITS = X_TRANSACTION_UNITS)
        AND ((tlinfo.TRANSACTION_COST = X_TRANSACTION_COST)
             OR ((tlinfo.TRANSACTION_COST is null) AND (X_TRANSACTION_COST is null)))
        AND ((tlinfo.PARENT_MASS_ADDITION_ID = X_PARENT_MASS_ADDITION_ID)
             OR ((tlinfo.PARENT_MASS_ADDITION_ID is null) AND (X_PARENT_MASS_ADDITION_ID is null)))
        AND ((tlinfo.PA_ASSET_LINE_ID = X_PA_ASSET_LINE_ID)
             OR ((tlinfo.PA_ASSET_LINE_ID is null) AND (X_PA_ASSET_LINE_ID is null)))
        AND ((tlinfo.TRANSFER_DISTRIBUTION_ID = X_TRANSFER_DISTRIBUTION_ID)
             OR ((tlinfo.TRANSFER_DISTRIBUTION_ID is null) AND (X_TRANSFER_DISTRIBUTION_ID is null)))
        AND ((tlinfo.RETIREMENT_ID = X_RETIREMENT_ID)
             OR ((tlinfo.RETIREMENT_ID is null) AND (X_RETIREMENT_ID is null)))
        AND (tlinfo.STATUS_CODE = X_STATUS_CODE)
        AND ((tlinfo.DATE_PROCESSED = X_DATE_PROCESSED)
             OR ((tlinfo.DATE_PROCESSED is null) AND (X_DATE_PROCESSED is null)))
        AND ((tlinfo.DATE_NOTIFIED = X_DATE_NOTIFIED)
             OR ((tlinfo.DATE_NOTIFIED is null) AND (X_DATE_NOTIFIED is null)))
        AND (tlinfo.ERROR_FLAG = X_ERROR_FLAG)
        AND ((tlinfo.ERROR_TEXT = X_ERROR_TEXT)
             OR ((tlinfo.ERROR_TEXT is null) AND (X_ERROR_TEXT is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_INTERFACE_LINE_ID in NUMBER,
  X_INTERFACE_HEADER_ID in NUMBER,
  X_DISTRIBUTION_ID in NUMBER,
  X_TRANSACTION_DATE in DATE,
  X_TRANSACTION_UNITS in NUMBER,
  X_TRANSACTION_COST in NUMBER,
  X_PARENT_MASS_ADDITION_ID in NUMBER,
  X_PA_ASSET_LINE_ID in NUMBER,
  X_TRANSFER_DISTRIBUTION_ID in NUMBER,
  X_RETIREMENT_ID in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_DATE_PROCESSED in DATE,
  X_DATE_NOTIFIED in DATE,
  X_ERROR_FLAG in VARCHAR2,
  X_ERROR_TEXT in VARCHAR2,
  X_TRANSACTION_SOURCE_TYPE in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update CSI_FA_TRANSACTIONS set
    INTERFACE_HEADER_ID = X_INTERFACE_HEADER_ID,
    DISTRIBUTION_ID = X_DISTRIBUTION_ID,
    TRANSACTION_DATE = X_TRANSACTION_DATE,
    TRANSACTION_UNITS = X_TRANSACTION_UNITS,
    TRANSACTION_COST = X_TRANSACTION_COST,
    PARENT_MASS_ADDITION_ID = X_PARENT_MASS_ADDITION_ID,
    PA_ASSET_LINE_ID = X_PA_ASSET_LINE_ID,
    TRANSFER_DISTRIBUTION_ID = X_TRANSFER_DISTRIBUTION_ID,
    RETIREMENT_ID = X_RETIREMENT_ID,
    STATUS_CODE = X_STATUS_CODE,
    DATE_PROCESSED = X_DATE_PROCESSED,
    DATE_NOTIFIED = X_DATE_NOTIFIED,
    ERROR_FLAG = X_ERROR_FLAG,
    ERROR_TEXT = X_ERROR_TEXT,
    TRANSACTION_SOURCE_TYPE = X_TRANSACTION_SOURCE_TYPE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where INTERFACE_LINE_ID = X_INTERFACE_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_INTERFACE_LINE_ID in NUMBER
) is
begin
  delete from CSI_FA_TRANSACTIONS
  where INTERFACE_LINE_ID = X_INTERFACE_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;

end CSI_FA_TRANSACTIONS_PKG;

/
