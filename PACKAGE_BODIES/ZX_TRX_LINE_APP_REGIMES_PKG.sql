--------------------------------------------------------
--  DDL for Package Body ZX_TRX_LINE_APP_REGIMES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ZX_TRX_LINE_APP_REGIMES_PKG" AS
/* $Header: zxiflineappregb.pls 120.2 2005/05/11 18:18:17 vsidhart ship $ */
G_PKG_NAME                  CONSTANT VARCHAR2(30) := 'ZX_TRX_LINE_APP_REGIMES_PKG';
G_CURRENT_RUNTIME_LEVEL     CONSTANT NUMBER       := FND_LOG.G_CURRENT_RUNTIME_LEVEL;
G_LEVEL_UNEXPECTED          CONSTANT NUMBER       := FND_LOG.LEVEL_UNEXPECTED;
G_LEVEL_ERROR               CONSTANT NUMBER       := FND_LOG.LEVEL_ERROR;
G_LEVEL_EXCEPTION           CONSTANT NUMBER       := FND_LOG.LEVEL_EXCEPTION;
G_LEVEL_EVENT               CONSTANT NUMBER       := FND_LOG.LEVEL_EVENT;
G_LEVEL_PROCEDURE           CONSTANT NUMBER       := FND_LOG.LEVEL_PROCEDURE;
G_LEVEL_STATEMENT           CONSTANT NUMBER       := FND_LOG.LEVEL_STATEMENT;
G_MODULE_NAME               CONSTANT VARCHAR2(80) := 'ZX.PLSQL.ZX_TRX_LINE_APP_REGIMES_PKG.';

procedure INSERT_ROW (
  X_APPLICATION_ID in NUMBER,
  X_ENTITY_CODE in VARCHAR2,
  X_EVENT_CLASS_CODE in VARCHAR2,
  X_TRX_ID in NUMBER,
  X_TRX_LINE_ID in NUMBER,
  X_TRX_LEVEL_TYPE in VARCHAR2,
  X_TAX_REGIME_ID in NUMBER,
  X_TAX_REGIME_CODE in VARCHAR2,
  X_TAX_PROVIDER_ID in NUMBER,
  X_ALLOW_TAX_CALCULATION_FLAG in VARCHAR2,
  X_PSEUDO_TAX_ONLY_LINE_FLAG in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_RETURN_STATUS out nocopy VARCHAR2
) is
    l_api_name          CONSTANT  VARCHAR2(30) := 'INSERT_ROW';
BEGIN

  IF (G_LEVEL_PROCEDURE >= G_CURRENT_RUNTIME_LEVEL ) THEN
     FND_LOG.STRING(G_LEVEL_PROCEDURE,G_MODULE_NAME||l_api_name||'.BEGIN','ZX_TRX_LINE_APP_REGIMES_PKG: '||l_api_name||'()+');
  END IF;

  x_return_status :=  FND_API.G_RET_STS_SUCCESS;


  insert into ZX_TRX_LINE_APP_REGIMES (
    EVENT_CLASS_CODE,
    APPLICATION_ID,
    ENTITY_CODE,
    TRX_ID,
    TRX_LINE_ID,
    TRX_LEVEL_TYPE,
    TAX_REGIME_ID,
    TAX_REGIME_CODE,
    TAX_PROVIDER_ID,
    ALLOW_TAX_CALCULATION_FLAG,
    PSEUDO_TAX_ONLY_LINE_FLAG,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
    ) values
    (X_EVENT_CLASS_CODE,
    X_APPLICATION_ID,
    X_ENTITY_CODE,
    X_TRX_ID,
    X_TRX_LINE_ID,
    X_TRX_LEVEL_TYPE,
    X_TAX_REGIME_ID,
    X_TAX_REGIME_CODE,
    X_TAX_PROVIDER_ID,
    X_ALLOW_TAX_CALCULATION_FLAG,
    X_PSEUDO_TAX_ONLY_LINE_FLAG,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
    );

  if (sql%notfound) then
    x_return_status := FND_API.G_RET_STS_ERROR;
    raise no_data_found;
  end if;

  IF (G_LEVEL_PROCEDURE >= G_CURRENT_RUNTIME_LEVEL ) THEN
     FND_LOG.STRING(G_LEVEL_PROCEDURE,G_MODULE_NAME||l_api_name||'.END','ZX_TRX_LINE_APP_REGIMES_PKG: '||l_api_name||'()-');
  END IF;
end INSERT_ROW;

procedure UPDATE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_ENTITY_CODE in VARCHAR2,
  X_EVENT_CLASS_CODE in VARCHAR2,
  X_TRX_ID in NUMBER,
  X_TRX_LINE_ID in NUMBER,
  X_TRX_LEVEL_TYPE in VARCHAR2,
  X_TAX_REGIME_ID in NUMBER,
  X_TAX_REGIME_CODE in VARCHAR2,
  X_TAX_PROVIDER_ID in NUMBER,
  X_ALLOW_TAX_CALCULATION_FLAG in VARCHAR2,
  X_PSEUDO_TAX_ONLY_LINE_FLAG in VARCHAR2,
  X_UPDATE_FLAG in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_RETURN_STATUS out nocopy VARCHAR2
) is
    l_api_name          CONSTANT  VARCHAR2(30) := 'UPDATE_ROW';
begin
  IF (G_LEVEL_PROCEDURE >= G_CURRENT_RUNTIME_LEVEL ) THEN
     FND_LOG.STRING(G_LEVEL_PROCEDURE,G_MODULE_NAME||l_api_name||'.BEGIN','ZX_TRX_LINE_APP_REGIMES_PKG: '||l_api_name||'()+');
  END IF;

  x_return_status :=  FND_API.G_RET_STS_SUCCESS;

  update ZX_TRX_LINE_APP_REGIMES set
    TAX_REGIME_ID = X_TAX_REGIME_ID,
    TAX_REGIME_CODE = X_TAX_REGIME_CODE,
    TAX_PROVIDER_ID = X_TAX_PROVIDER_ID,
    ALLOW_TAX_CALCULATION_FLAG = X_ALLOW_TAX_CALCULATION_FLAG,
    PSEUDO_TAX_ONLY_LINE_FLAG = X_PSEUDO_TAX_ONLY_LINE_FLAG,
    UPDATE_FLAG = X_UPDATE_FLAG,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where APPLICATION_ID = X_APPLICATION_ID
  and ENTITY_CODE = X_ENTITY_CODE
  and EVENT_CLASS_CODE = X_EVENT_CLASS_CODE
  and TRX_ID = X_TRX_ID
  and TRX_LINE_ID = X_TRX_LINE_ID
  and TRX_LEVEL_TYPE = X_TRX_LEVEL_TYPE;

  if (sql%notfound) then
    x_return_status := FND_API.G_RET_STS_ERROR;
    raise no_data_found;
  end if;

  IF (G_LEVEL_PROCEDURE >= G_CURRENT_RUNTIME_LEVEL ) THEN
     FND_LOG.STRING(G_LEVEL_PROCEDURE,G_MODULE_NAME||l_api_name||'.BEGIN','ZX_TRX_LINE_APP_REGIMES_PKG: '||l_api_name||'()+');
  END IF;

end UPDATE_ROW;

end ZX_TRX_LINE_APP_REGIMES_PKG;

/
