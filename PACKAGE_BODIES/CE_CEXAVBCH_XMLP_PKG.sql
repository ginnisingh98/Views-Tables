--------------------------------------------------------
--  DDL for Package Body CE_CEXAVBCH_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CE_CEXAVBCH_XMLP_PKG" AS
/* $Header: CEXAVBCHB.pls 120.0.12010000.2 2008/08/10 14:26:05 csutaria ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
      L_PRECISION NUMBER;
      L_EXT_PRECISION NUMBER;
      L_MIN_ACCT_UNIT NUMBER;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      INIT_SECURITY;
      BEGIN
        SELECT
          A.BANK_ACCOUNT_NAME,
          A.BANK_ACCOUNT_NUM,
          B.BANK_NAME,
          B.BANK_BRANCH_NAME,
          A.CURRENCY_CODE,
          L.MEANING,
          L2.MEANING,
          A.BANK_ACCOUNT_TYPE
        INTO
          C_BANK_ACCOUNT_NAME
          ,C_BANK_ACCOUNT_NUM
          ,C_BANK_NAME
          ,C_BANK_BRANCH_NAME
          ,C_BANK_CURRENCY_CODE
          ,C_TRANSACTION_TYPE
          ,C_RECEIPT_TRANSLATION
          ,C_BANK_ACCOUNT_TYPE
        FROM
          CE_LOOKUPS L,
          CE_LOOKUPS L2,
          CE_BANK_BRANCHES_V B,
          CE_BANK_ACCTS_GT_V A
        WHERE L.LOOKUP_TYPE = 'BATCH_TYPE'
          AND L.LOOKUP_CODE = P_TYPE
          AND L2.LOOKUP_TYPE = 'TRX_TYPE'
          AND L2.LOOKUP_CODE = 'CASH'
          AND B.BRANCH_PARTY_ID = A.BANK_BRANCH_ID
          AND A.BANK_ACCOUNT_ID = P_BANK_ACCOUNT;
      EXCEPTION
        WHEN OTHERS THEN
          SET_NAME('CE'
                  ,'CE_INVALID_BANK_ACC');
          L_MESSAGE := GET;
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
      END;
      IF (P_TYPE in ('ALL','RECEIPT')) THEN
        P_QUERY_RECEIPTS := 'Y';
      END IF;
      IF (P_TYPE in ('ALL','PAYMENT')) THEN
        P_QUERY_PAYMENTS := 'Y';
      END IF;
      C_AMOUNT_WIDTH := 27;
      FND_CURRENCY.GET_INFO(C_BANK_CURRENCY_CODE
                           ,L_PRECISION
                           ,L_EXT_PRECISION
                           ,L_MIN_ACCT_UNIT);
      C_PRECISION := L_PRECISION;
      IF (P_DEBUG_MODE = 'Y') THEN
        NULL;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION G_TRANSACTION_TYPEGROUPFILTER(TYPE IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF TYPE = '' THEN
      C_THE_END := 'N';
    ELSE
      C_THE_END := 'Y';
    END IF;
    RETURN (TRUE);
    RETURN (TRUE);
  END G_TRANSACTION_TYPEGROUPFILTER;

  FUNCTION C_AMOUNTFORMULA(TYPE IN VARCHAR2
                          ,BATCH_ID_1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (TYPE = 'PAYMENT') THEN
      BEGIN
        SELECT
          SUM(NVL(AMOUNT
                 ,0)),
          SUM(NVL(BANK_ACCOUNT_AMOUNT
                 ,0))
        INTO
          C_BATCH_AMOUNT
          ,C_BATCH_BANK_ACCOUNT_AMOUNT
        FROM
          CE_200_TRANSACTIONS_V A
        WHERE TRX_TYPE in ( 'PAYMENT' , 'REFUND' )
          AND BATCH_ID = BATCH_ID_1
          AND NVL(STATUS
           ,'NEGOTIABLE') <> 'VOIDED';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    ELSE
      BEGIN
        SELECT
          SUM(NVL(A.AMOUNT
                 ,0)),
          SUM(NVL(A.BANK_ACCOUNT_AMOUNT
                 ,0))
        INTO
          C_BATCH_AMOUNT
          ,C_BATCH_BANK_ACCOUNT_AMOUNT
        FROM
          CE_222_TRANSACTIONS_V A
        WHERE A.TRX_TYPE IN ( 'MISC' , 'CASH' )
          AND A.BATCH_ID = BATCH_ID_1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    RETURN (C_BATCH_AMOUNT);
    RETURN NULL;
  END C_AMOUNTFORMULA;

  FUNCTION C_BANK_ACCOUNT_AMOUNTFORMULA(TYPE IN VARCHAR2
                                       ,BATCH_ID_1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (TYPE in ('PAYMENT','REFUND')) THEN
      BEGIN
        SELECT
          SUM(NVL(AMOUNT
                 ,0)),
          ROUND(SUM(NVL(BANK_ACCOUNT_AMOUNT
                       ,0))
               ,C_PRECISION)
        INTO
          C_BATCH_AMOUNT
          ,C_BATCH_BANK_ACCOUNT_AMOUNT
        FROM
          CE_200_TRANSACTIONS_V
        WHERE TRX_TYPE in ( 'PAYMENT' , 'REFUND' )
          AND BATCH_ID = BATCH_ID_1
          AND NVL(STATUS
           ,'NEGOTIABLE') <> 'VOIDED';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    ELSE
      BEGIN
        SELECT
          SUM(NVL(A.AMOUNT
                 ,0)),
          ROUND(SUM(NVL(A.BANK_ACCOUNT_AMOUNT
                       ,0))
               ,C_PRECISION)
        INTO
          C_BATCH_AMOUNT
          ,C_BATCH_BANK_ACCOUNT_AMOUNT
        FROM
          CE_222_TRANSACTIONS_V A
        WHERE A.TRX_TYPE IN ( 'MISC' , 'CASH' )
          AND A.BATCH_ID = BATCH_ID_1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    RETURN (C_BATCH_BANK_ACCOUNT_AMOUNT);
    RETURN NULL;
  END C_BANK_ACCOUNT_AMOUNTFORMULA;

  FUNCTION C_ACCOUNT_AMOUNTFORMULA(TYPE IN VARCHAR2
                                  ,BATCH_ID_1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (TYPE in ('PAYMENT','REFUND')) THEN
      BEGIN
        SELECT
          SUM(NVL(AMOUNT
                 ,0)),
          SUM(NVL(BANK_ACCOUNT_AMOUNT
                 ,0))
        INTO
          C_BATCH_AMOUNT
          ,C_BATCH_BANK_ACCOUNT_AMOUNT
        FROM
          CE_200_TRANSACTIONS_V
        WHERE TRX_TYPE in ( 'PAYMENT' , 'REFUND' )
          AND BATCH_ID = BATCH_ID_1
          AND NVL(STATUS
           ,'NEGOTIABLE') <> 'VOIDED';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    ELSE
      BEGIN
        SELECT
          SUM(NVL(A.AMOUNT
                 ,0)),
          SUM(NVL(A.BANK_ACCOUNT_AMOUNT
                 ,0))
        INTO
          C_BATCH_AMOUNT
          ,C_BATCH_BANK_ACCOUNT_AMOUNT
        FROM
          CE_222_TRANSACTIONS_V A
        WHERE A.TRX_TYPE IN ( 'MISC' , 'CASH' )
          AND A.BATCH_ID = BATCH_ID_1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    IF (TYPE in ('PAYMENT','REFUND')) THEN
      RETURN (-1 * (ROUND(C_BATCH_BANK_ACCOUNT_AMOUNT
                  ,2)));
    ELSE
      RETURN (ROUND(C_BATCH_BANK_ACCOUNT_AMOUNT
                  ,2));
    END IF;
    RETURN NULL;
  END C_ACCOUNT_AMOUNTFORMULA;

  FUNCTION C_DATEFORMATFORMULA(C_DATEFORMAT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_DATEFORMAT);
  END C_DATEFORMATFORMULA;

  FUNCTION C_ORDER_BYFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_ORDER_BY = 'AMOUNT' THEN
      RETURN ('ORDER BY 12 ASC,1 ASC,17 ASC ');
    ELSE
      --RETURN ('ORDER BY 12,1,17,13,14,2');
      RETURN ('ORDER BY 12 ASC,1 ASC,17 ASC , 9');
    END IF;
    RETURN NULL;
  END C_ORDER_BYFORMULA;

  FUNCTION P_SHOW_VOID_PAYMENT_FLAGVALIDT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_SHOW_VOID_PAYMENT_FLAGVALIDT;

  FUNCTION P_ORDER_BYVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_ORDER_BYVALIDTRIGGER;

  FUNCTION C_BATCH_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BATCH_AMOUNT;
  END C_BATCH_AMOUNT_P;

  FUNCTION C_BATCH_BANK_ACCOUNT_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BATCH_BANK_ACCOUNT_AMOUNT;
  END C_BATCH_BANK_ACCOUNT_AMOUNT_P;

  FUNCTION C_THE_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_THE_END;
  END C_THE_END_P;

  FUNCTION C_BANK_ACCOUNT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_NAME;
  END C_BANK_ACCOUNT_NAME_P;

  FUNCTION C_BANK_ACCOUNT_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_NUM;
  END C_BANK_ACCOUNT_NUM_P;

  FUNCTION C_BANK_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_NAME;
  END C_BANK_NAME_P;

  FUNCTION C_BANK_BRANCH_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_BRANCH_NAME;
  END C_BANK_BRANCH_NAME_P;

  FUNCTION C_BANK_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_CURRENCY_CODE;
  END C_BANK_CURRENCY_CODE_P;

  FUNCTION C_TRANSACTION_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TRANSACTION_TYPE;
  END C_TRANSACTION_TYPE_P;

  FUNCTION C_RECEIPT_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RECEIPT_TRANSLATION;
  END C_RECEIPT_TRANSLATION_P;

  FUNCTION C_AMOUNT_WIDTH_P RETURN NUMBER IS
  BEGIN
    RETURN C_AMOUNT_WIDTH;
  END C_AMOUNT_WIDTH_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BANK_ACCOUNT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_TYPE;
  END C_BANK_ACCOUNT_TYPE_P;

  FUNCTION C_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_PRECISION;
  END C_PRECISION_P;

  FUNCTION C_BATCH_PAY_SQL_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_PAY_SQL_LEX;
  END C_BATCH_PAY_SQL_LEX_P;

  FUNCTION C_BATCH_REC_SQL_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_REC_SQL_LEX;
  END C_BATCH_REC_SQL_LEX_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_NAME(APPLICATION, NAME);
  END SET_NAME;

  /*PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;
  END SET_TOKEN;
*/
  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/

    FND_MESSAGE.RETRIEVE(MSGOUT);

  END RETRIEVE;

 /*PROCEDURE CLEAR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;
  END CLEAR;*/

  /*FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STRING;
*/
  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
/*    STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;

 /* FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ENCODED;*/

  /*PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);
  END PARSE_ENCODED;*/

/*  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;
  END SET_ENCODED;
*/
/*  PROCEDURE RAISE_ERROR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;
  END RAISE_ERROR;*/

/*  PROCEDURE SET_101 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_101; end;');
    STPROC.EXECUTE;
  END SET_101;
*/
 /* PROCEDURE SET_200 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_200; end;');
    STPROC.EXECUTE;
  END SET_200;*/

/*  PROCEDURE SET_222 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_222; end;');
    STPROC.EXECUTE;
  END SET_222;*/

  /*PROCEDURE SET_260 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_260; end;');
    STPROC.EXECUTE;
  END SET_260;*/

 /* PROCEDURE SET_801 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_801; end;');
    STPROC.EXECUTE;
  END SET_801;*/

/*  PROCEDURE SET_999 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_999; end;');
    STPROC.EXECUTE;
  END SET_999;*/

 /* PROCEDURE SET_ALL IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_ALL; end;');
    STPROC.EXECUTE;
  END SET_ALL;*/

 /* PROCEDURE UNSET_101 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_101; end;');
    STPROC.EXECUTE;
  END UNSET_101;*/

  /*PROCEDURE UNSET_200 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_200; end;');
    STPROC.EXECUTE;
  END UNSET_200;*/

  /*PROCEDURE UNSET_222 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_222; end;');
    STPROC.EXECUTE;
  END UNSET_222;
*/
 /* PROCEDURE UNSET_260 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_260; end;');
    STPROC.EXECUTE;
  END UNSET_260;*/

 /* PROCEDURE UNSET_801 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_801; end;');
    STPROC.EXECUTE;
  END UNSET_801;*/

  /*PROCEDURE UNSET_999 IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_999; end;');
    STPROC.EXECUTE;
  END UNSET_999;*/

  /*PROCEDURE UNSET_ALL IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.UNSET_ALL; end;');
    STPROC.EXECUTE;
  END UNSET_ALL;*/

/*  FUNCTION GET_101 RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_101; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_101;*/

 /* FUNCTION GET_200 RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_200; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_200;*/

/*  FUNCTION GET_222 RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_222; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_222;*/

 /* FUNCTION GET_260 RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_260; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_260;*/

/*  FUNCTION GET_801 RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_801; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_801;*/

  /*FUNCTION GET_999 RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_999; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_999;*/

  /*PROCEDURE SET_INVERSE_RATE(INVERSE_RATE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.SET_INVERSE_RATE(:INVERSE_RATE); end;');
    STPROC.BIND_I(INVERSE_RATE);
    STPROC.EXECUTE;
  END SET_INVERSE_RATE;*/

 /* FUNCTION GET_INVERSE_RATE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_INVERSE_RATE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_INVERSE_RATE;*/

 /* FUNCTION GET_VAT_TAX_ID RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.GET_VAT_TAX_ID; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_VAT_TAX_ID;*/

  /*FUNCTION CONVERT_AMOUNT_TOLERANCE(AMOUNT_TO_CONVERT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := CE_AUTO_BANK_MATCH.CONVERT_AMOUNT_TOLERANCE(:AMOUNT_TO_CONVERT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(AMOUNT_TO_CONVERT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END CONVERT_AMOUNT_TOLERANCE;*/

 /* FUNCTION VALIDATE_PAYMENT_METHOD RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := CE_AUTO_BANK_MATCH.VALIDATE_PAYMENT_METHOD; :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END VALIDATE_PAYMENT_METHOD;
*/
 /* FUNCTION TRX_VALIDATION(NO_OF_CURRENCIES IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := CE_AUTO_BANK_MATCH.TRX_VALIDATION(:NO_OF_CURRENCIES); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(NO_OF_CURRENCIES);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);
    RETURN X0;
  END TRX_VALIDATION;*/

  /*PROCEDURE CALC_ACTUAL_TOLERANCE IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.CALC_ACTUAL_TOLERANCE; end;');
    STPROC.EXECUTE;
  END CALC_ACTUAL_TOLERANCE;*/

 /* PROCEDURE MATCH_PROCESS IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.MATCH_PROCESS; end;');
    STPROC.EXECUTE;
  END MATCH_PROCESS;*/

  /*PROCEDURE LOCK_TRANSACTION(X_RECONCILE_FLAG IN VARCHAR2
                            ,X_CALL_MODE IN VARCHAR2
                            ,X_TRX_TYPE IN VARCHAR2
                            ,X_CLEARING_TRX_TYPE IN VARCHAR2
                            ,X_TRX_ROWID IN VARCHAR2
                            ,X_BATCH_BA_AMOUNT IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin CE_AUTO_BANK_MATCH.LOCK_TRANSACTION(:X_RECONCILE_FLAG, :X_CALL_MODE, :X_TRX_TYPE, :X_CLEARING_TRX_TYPE, :X_TRX_ROWID, :X_BATCH_BA_AMOUNT); end;');
    STPROC.BIND_I(X_RECONCILE_FLAG);
    STPROC.BIND_I(X_CALL_MODE);
    STPROC.BIND_I(X_TRX_TYPE);
    STPROC.BIND_I(X_CLEARING_TRX_TYPE);
    STPROC.BIND_I(X_TRX_ROWID);
    STPROC.BIND_I(X_BATCH_BA_AMOUNT);
    STPROC.EXECUTE;
  END LOCK_TRANSACTION;*/

 /* PROCEDURE DEBUG(LINE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DEBUG(:LINE); end;');
    STPROC.BIND_I(LINE);
    STPROC.EXECUTE;
  END DEBUG;*/

 /* PROCEDURE ENABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.ENABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END ENABLE_DEBUG;*/

 /* PROCEDURE DISABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DISABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END DISABLE_DEBUG;
*/
 /* FUNCTION GET_WINDOW_SESSION_TITLE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_WINDOW_SESSION_TITLE;*/

/*  FUNCTION GET_EFFECTIVE_DATE(P_BANK_ACCOUNT_ID IN NUMBER
                             ,P_TRX_CODE IN VARCHAR2
                             ,P_RECEIPT_DATE IN DATE) RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_EFFECTIVE_DATE(:P_BANK_ACCOUNT_ID, :P_TRX_CODE, :P_RECEIPT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BANK_ACCOUNT_ID);
    STPROC.BIND_I(P_TRX_CODE);
    STPROC.BIND_I(P_RECEIPT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_EFFECTIVE_DATE;
*/
  PROCEDURE INIT_SECURITY IS
  BEGIN
   /* STPROC.INIT('begin cep_standard.init_security;  end;');
    STPROC.EXECUTE;*/
cep_standard.init_security;
  END INIT_SECURITY;

END CE_CEXAVBCH_XMLP_PKG;


/
