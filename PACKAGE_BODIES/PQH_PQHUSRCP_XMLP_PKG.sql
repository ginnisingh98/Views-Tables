--------------------------------------------------------
--  DDL for Package Body PQH_PQHUSRCP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PQH_PQHUSRCP_XMLP_PKG" AS
/* $Header: PQHUSRCPB.pls 120.2 2007/12/07 06:58:13 vjaganat noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('BEFORE REPORT');
    CP_BUSINESS_GROUP_NAME := GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_GETTENURECOUNTFORMULA RETURN NUMBER IS
    L_START_OF_TIME DATE := HR_GENERAL.START_OF_TIME;
  BEGIN
    CP_TENURED_CNT := PQH_TENURE_DETAIL.GETPERIODSTATUSCOUNT(P_SUPERVISOR_ID
                                                            ,'01'
                                                            ,L_START_OF_TIME
                                                            ,P_END_DATE);
    CP_TENELIGIBLE_CNT := PQH_TENURE_DETAIL.GETPERIODSTATUSCOUNT(P_SUPERVISOR_ID
                                                                ,'04'
                                                                ,L_START_OF_TIME
                                                                ,P_END_DATE);
    CP_TENDENIED_CNT := PQH_TENURE_DETAIL.GETPERIODSTATUSCOUNT(P_SUPERVISOR_ID
                                                              ,'05'
                                                              ,L_START_OF_TIME
                                                              ,P_END_DATE);
    CP_TENUREDPERIOD_CNT := PQH_TENURE_DETAIL.GETPERIODSTATUSCOUNT(P_SUPERVISOR_ID
                                                                  ,'01'
                                                                  ,P_START_DATE
                                                                  ,P_END_DATE);
    CP_TENELIGIBLEPERIOD_CNT := PQH_TENURE_DETAIL.GETPERIODSTATUSCOUNT(P_SUPERVISOR_ID
                                                                      ,'04'
                                                                      ,P_START_DATE
                                                                      ,P_END_DATE);
    CP_TENDENIEDPERIOD_CNT := PQH_TENURE_DETAIL.GETPERIODSTATUSCOUNT(P_SUPERVISOR_ID
                                                                    ,'05'
                                                                    ,P_START_DATE
                                                                    ,P_END_DATE);
    RETURN 0;
  END CF_GETTENURECOUNTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_DIRECT_OR_ALL = 'A' THEN
      P_AND_CLAUSE := NULL;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_JOB_NAMEFORMULA(JOB_ID IN NUMBER) RETURN CHAR IS
    CURSOR JOB_NM_CUR IS
      SELECT
        NAME
      FROM
        PER_JOBS_VL
      WHERE JOB_ID = JOB_ID
        AND BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND sysdate between NVL(DATE_FROM
         ,SYSDATE)
        AND NVL(DATE_TO
         ,SYSDATE);
    L_JOB_NAME VARCHAR2(240);
  BEGIN
    IF JOB_ID IS NOT NULL THEN
      OPEN JOB_NM_CUR;
      FETCH JOB_NM_CUR
       INTO
         L_JOB_NAME;
      CLOSE JOB_NM_CUR;
    END IF;
    RETURN (L_JOB_NAME);
  END CF_JOB_NAMEFORMULA;

  FUNCTION CF_ACADEMIC_RANKFORMULA(RANK_ID IN VARCHAR2) RETURN CHAR IS
    CURSOR ACADEMIC_RANK_CUR IS
      SELECT
        MEANING
      FROM
        HR_LOOKUPS
      WHERE LOOKUP_TYPE = 'PQH_ACADEMIC_RANK'
        AND LOOKUP_CODE = RANK_ID;
    L_ACADEMIC_RANK VARCHAR2(40);
  BEGIN
    IF RANK_ID IS NOT NULL THEN
      OPEN ACADEMIC_RANK_CUR;
      FETCH ACADEMIC_RANK_CUR
       INTO
         L_ACADEMIC_RANK;
      CLOSE ACADEMIC_RANK_CUR;
    END IF;
    RETURN (L_ACADEMIC_RANK);
  END CF_ACADEMIC_RANKFORMULA;

  FUNCTION CF_TENURE_STATUSFORMULA(TENURE_STATUS_CD IN VARCHAR2
                                  ,RANK_ID IN VARCHAR2) RETURN CHAR IS
    CURSOR TENURE_STATUS_CUR IS
      SELECT
        MEANING
      FROM
        HR_LOOKUPS
      WHERE LOOKUP_TYPE = 'PQH_TENURE_STATUS'
        AND LOOKUP_CODE = TENURE_STATUS_CD;
    L_TENURE_STATUS VARCHAR2(40);
  BEGIN
    IF RANK_ID IS NOT NULL THEN
      OPEN TENURE_STATUS_CUR;
      FETCH TENURE_STATUS_CUR
       INTO
         L_TENURE_STATUS;
      CLOSE TENURE_STATUS_CUR;
    END IF;
    RETURN (L_TENURE_STATUS);
  END CF_TENURE_STATUSFORMULA;

  FUNCTION CF_MANAGER_NAMEFORMULA(MANAGER_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN (GETMANAGERNAME(MANAGER_ID));
  END CF_MANAGER_NAMEFORMULA;

  FUNCTION CF_DIRECT_OR_HIERARCHIALFORMUL RETURN CHAR IS
  BEGIN
    IF P_DIRECT_OR_ALL = 'D' THEN
      RETURN ('Direct Report');
    ELSE
      RETURN ('Hierarchical Report');
    END IF;
  END CF_DIRECT_OR_HIERARCHIALFORMUL;

  FUNCTION GETMANAGERNAME(P_MANAGER_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR MGR_NM_CUR IS
      SELECT
        LAST_NAME || ', ' || FIRST_NAME
      FROM
        PER_ALL_PEOPLE_F
      WHERE PERSON_ID = P_MANAGER_ID
        AND sysdate between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE;
    L_MANAGER_NM VARCHAR2(240);
  BEGIN
    OPEN MGR_NM_CUR;
    FETCH MGR_NM_CUR
     INTO
       L_MANAGER_NM;
    CLOSE MGR_NM_CUR;
    RETURN (L_MANAGER_NM);
  END GETMANAGERNAME;

  FUNCTION CF_MGR_NAMEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (GETMANAGERNAME(P_SUPERVISOR_ID));
  END CF_MGR_NAMEFORMULA;

  FUNCTION CF_SET_TOTAL_FOR_PERIODFORMULA(TENURE_STATUS_CD IN VARCHAR2
                                         ,CS_STATUS_HEADCOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF TENURE_STATUS_CD = '01' THEN
      CP_TENURED_FOR_PERIOD := NVL(CP_TENURED_FOR_PERIOD
                                  ,0) + CS_STATUS_HEADCOUNT;
    ELSIF TENURE_STATUS_CD = '04' THEN
      CP_TENURE_ELIGIBLE_FOR_PERIOD := NVL(CP_TENURE_ELIGIBLE_FOR_PERIOD
                                          ,0) + CS_STATUS_HEADCOUNT;
    ELSIF TENURE_STATUS_CD = '05' THEN
      CP_TENURE_DENIED_FOR_PERIOD := NVL(CP_TENURE_DENIED_FOR_PERIOD
                                        ,0) + CS_STATUS_HEADCOUNT;
    END IF;
    RETURN 0;
  END CF_SET_TOTAL_FOR_PERIODFORMULA;

  FUNCTION CF_GETTENURECNTFORMULA(MANAGER_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_TENUREDMGR_CNT := PQH_TENURE_DETAIL.GETSUPSTATUSCOUNT(MANAGER_ID
                                                            ,'01'
                                                            ,P_END_DATE);
    CP_TENELIGIBLEMGR_CNT := PQH_TENURE_DETAIL.GETSUPSTATUSCOUNT(MANAGER_ID
                                                                ,'04'
                                                                ,P_END_DATE);
    CP_TENUREDENIED_CNT := PQH_TENURE_DETAIL.GETSUPSTATUSCOUNT(MANAGER_ID
                                                              ,'05'
                                                              ,P_END_DATE);
    RETURN 0;
  END CF_GETTENURECNTFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_TENUREDMGR_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENUREDMGR_CNT;
  END CP_TENUREDMGR_CNT_P;

  FUNCTION CP_TENELIGIBLEMGR_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENELIGIBLEMGR_CNT;
  END CP_TENELIGIBLEMGR_CNT_P;

  FUNCTION CP_TENUREDENIED_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENUREDENIED_CNT;
  END CP_TENUREDENIED_CNT_P;

  FUNCTION CP_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BUSINESS_GROUP_NAME;
  END CP_BUSINESS_GROUP_NAME_P;

  FUNCTION CP_TENURED_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENURED_CNT;
  END CP_TENURED_CNT_P;

  FUNCTION CP_TENELIGIBLE_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENELIGIBLE_CNT;
  END CP_TENELIGIBLE_CNT_P;

  FUNCTION CP_TENDENIED_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENDENIED_CNT;
  END CP_TENDENIED_CNT_P;

  FUNCTION CP_TENURED_FOR_PERIOD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENURED_FOR_PERIOD;
  END CP_TENURED_FOR_PERIOD_P;

  FUNCTION CP_TENURE_DENIED_FOR_PERIOD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENURE_DENIED_FOR_PERIOD;
  END CP_TENURE_DENIED_FOR_PERIOD_P;

  FUNCTION CP_TENUREDPERIOD_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENUREDPERIOD_CNT;
  END CP_TENUREDPERIOD_CNT_P;

  FUNCTION CP_TENELIGIBLEPERIOD_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENELIGIBLEPERIOD_CNT;
  END CP_TENELIGIBLEPERIOD_CNT_P;

  FUNCTION CP_TENDENIEDPERIOD_CNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TENDENIEDPERIOD_CNT;
  END CP_TENDENIEDPERIOD_CNT_P;

  FUNCTION GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    X0 := HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    RETURN X0;
  END GET_BUSINESS_GROUP;

END PQH_PQHUSRCP_XMLP_PKG;

/
