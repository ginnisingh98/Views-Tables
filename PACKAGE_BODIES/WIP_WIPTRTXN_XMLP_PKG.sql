--------------------------------------------------------
--  DDL for Package Body WIP_WIPTRTXN_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_WIPTRTXN_XMLP_PKG" AS
/* $Header: WIPTRTXNB.pls 120.1 2008/01/31 12:48:10 npannamp noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
    P_FROM_DATE1:=to_char(P_FROM_DATE,'DD-MON-YY');
     P_TO_DATE1:=to_char(P_TO_DATE,'DD-MON-YY');
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND FLEXSQL CODE="MSTK"
                    APPL_SHORT_NAME="INV" OUTPUT=":P_FLEXDATA"
                    MODE="SELECT" DISPLAY="ALL" TABLEALIAS="MSI"')*/NULL;
      IF (P_FROM_ASSEMBLY IS NOT NULL) THEN
        IF (P_TO_ASSEMBLY IS NOT NULL) THEN
          NULL;
        ELSE
          NULL;
        END IF;
      ELSE
        IF (P_TO_ASSEMBLY IS NOT NULL) THEN
          NULL;
        END IF;
      END IF;
      RETURN TRUE;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION LIMIT_DATES RETURN CHARACTER IS
    LIMIT_DATES VARCHAR2(150);
  BEGIN
    IF (P_FROM_DATE IS NOT NULL) THEN
      IF (P_TO_DATE IS NOT NULL) THEN
        LIMIT_DATES := ' AND WT.transaction_date >= TO_DATE(''' || TO_CHAR(P_FROM_DATE
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')' || ' AND WT.transaction_date < TO_DATE(''' || TO_CHAR(P_TO_DATE + 1
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')';
      ELSE
        LIMIT_DATES := ' AND WT.transaction_date >= TO_DATE(''' || TO_CHAR(P_FROM_DATE
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')';
      END IF;
    ELSE
      IF (P_TO_DATE IS NOT NULL) THEN
        LIMIT_DATES := ' AND WT.transaction_date < TO_DATE(''' || TO_CHAR(P_TO_DATE + 1
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')';
      ELSE
        LIMIT_DATES := '  ';
      END IF;
    END IF;
    RETURN (LIMIT_DATES);
  END LIMIT_DATES;

  FUNCTION LIMIT_EMPLOYEES RETURN CHARACTER IS
    LIMIT_EMPLOYEES VARCHAR2(510);
  BEGIN
    IF (P_FROM_EMPLOYEE IS NOT NULL) THEN
      IF (P_TO_EMPLOYEE IS NOT NULL) THEN
        LIMIT_EMPLOYEES := ' AND HRE.FULL_NAME BETWEEN ''' || P_FROM_EMPLOYEE || ''' AND ''' || P_TO_EMPLOYEE || ''' ';
      ELSE
        LIMIT_EMPLOYEES := ' AND HRE.FULL_NAME >= ''' || P_FROM_EMPLOYEE || ''' ';
      END IF;
    ELSE
      IF (P_TO_EMPLOYEE IS NOT NULL) THEN
        LIMIT_EMPLOYEES := ' AND HRE.FULL_NAME <= ''' || P_TO_EMPLOYEE || ''' ';
      ELSE
        LIMIT_EMPLOYEES := '   ';
      END IF;
    END IF;
    RETURN (LIMIT_EMPLOYEES);
  END LIMIT_EMPLOYEES;

  FUNCTION LIMIT_JOBS RETURN CHARACTER IS
    LIMIT_JOBS VARCHAR2(500);
  BEGIN
    IF (P_FROM_JOB IS NOT NULL) THEN
      IF (P_TO_JOB IS NOT NULL) THEN
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME BETWEEN ''' || P_FROM_JOB || ''' AND ''' || P_TO_JOB || '''';
      ELSE
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME  >= ''' || P_FROM_JOB || '''';
      END IF;
    ELSE
      IF (P_TO_JOB IS NOT NULL) THEN
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME <= ''' || P_TO_JOB || '''';
      ELSE
        LIMIT_JOBS := '   ';
      END IF;
    END IF;
    RETURN (LIMIT_JOBS);
  END LIMIT_JOBS;

  FUNCTION LIMIT_LINES RETURN CHARACTER IS
    LIMIT_LINES VARCHAR2(80);
  BEGIN
    IF (P_FROM_LINE IS NOT NULL) THEN
      IF (P_TO_LINE IS NOT NULL) THEN
        LIMIT_LINES := ' AND WL.LINE_CODE BETWEEN ''' || P_FROM_LINE || ''' AND ''' || P_TO_LINE || ''' ';
      ELSE
        LIMIT_LINES := ' AND WL.LINE_CODE  >= ''' || P_FROM_LINE || ''' ';
      END IF;
    ELSE
      IF (P_TO_LINE IS NOT NULL) THEN
        LIMIT_LINES := ' AND WL.LINE_CODE  <= ''' || P_TO_LINE || ''' ';
      ELSE
        LIMIT_LINES := '   ';
      END IF;
    END IF;
    RETURN (LIMIT_LINES);
  END LIMIT_LINES;

  FUNCTION LIMIT_REASONS RETURN CHARACTER IS
    LIMIT_REASONS VARCHAR2(150);
  BEGIN
    IF (P_FROM_REASON IS NOT NULL) THEN
      IF (P_TO_REASON IS NOT NULL) THEN
        LIMIT_REASONS := ' AND MTR.REASON_NAME BETWEEN ''' || P_FROM_REASON || ''' AND ''' || P_TO_REASON || ''' ';
      ELSE
        LIMIT_REASONS := ' AND MTR.REASON_NAME >= ''' || P_FROM_REASON || ''' ';
      END IF;
    ELSE
      IF (P_TO_REASON IS NOT NULL) THEN
        LIMIT_REASONS := ' AND MTR.REASON_NAME <= ''' || P_TO_REASON || ''' ';
      ELSE
        LIMIT_REASONS := '   ';
      END IF;
    END IF;
    RETURN (LIMIT_REASONS);
  END LIMIT_REASONS;

  FUNCTION LIMIT_ACTIVITIES RETURN CHARACTER IS
    LIMIT_ACTIVITIES VARCHAR2(80);
  BEGIN
    IF (P_FROM_ACTIVITY IS NOT NULL) THEN
      IF (P_TO_ACTIVITY IS NOT NULL) THEN
        LIMIT_ACTIVITIES := ' AND CA.ACTIVITY BETWEEN ''' || P_FROM_ACTIVITY || ''' AND ''' || P_TO_ACTIVITY || ''' ';
      ELSE
        LIMIT_ACTIVITIES := ' AND CA.ACTIVITY >= ''' || P_FROM_ACTIVITY || ''' ';
      END IF;
    ELSE
      IF (P_TO_ACTIVITY IS NOT NULL) THEN
        LIMIT_ACTIVITIES := ' AND CA.ACTIVITY <= ''' || P_TO_ACTIVITY || ''' ';
      ELSE
        LIMIT_ACTIVITIES := '   ';
      END IF;
    END IF;
    RETURN (LIMIT_ACTIVITIES);
  END LIMIT_ACTIVITIES;

  FUNCTION LIMIT_EMPLOYEE RETURN CHARACTER IS
    LIMIT_EMP VARCHAR2(520);
  BEGIN
    IF (P_FROM_EMPLOYEE IS NOT NULL) THEN
      IF (P_TO_EMPLOYEE IS NOT NULL) THEN
        LIMIT_EMP := 'AND hre.full_name between ''' || REPLACE(P_FROM_EMPLOYEE
                            ,''''
                            ,'''''') || ''' AND ''' || REPLACE(P_TO_EMPLOYEE
                            ,''''
                            ,'''''') || '''';
      ELSE
        LIMIT_EMP := 'AND hre.full_name >= ''' || REPLACE(P_FROM_EMPLOYEE
                            ,''''
                            ,'''''') || '''';
      END IF;
    ELSE
      IF (P_TO_EMPLOYEE IS NOT NULL) THEN
        LIMIT_EMP := 'AND hre.full_name <= ''' || REPLACE(P_TO_EMPLOYEE
                            ,''''
                            ,'''''') || '''';
      ELSE
        LIMIT_EMP := '   ';
      END IF;
    END IF;
    RETURN (LIMIT_EMP);
  END LIMIT_EMPLOYEE;

  FUNCTION C_LIMIT_DATESFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (LIMIT_DATES);
  END C_LIMIT_DATESFORMULA;

  FUNCTION C_LIMIT_ACTIVITIESFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (LIMIT_ACTIVITIES);
  END C_LIMIT_ACTIVITIESFORMULA;

  FUNCTION C_LIMIT_REASONSFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (LIMIT_REASONS);
  END C_LIMIT_REASONSFORMULA;

  FUNCTION C_LIMIT_LINESFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (LIMIT_LINES);
  END C_LIMIT_LINESFORMULA;

  FUNCTION C_LIMIT_JOBSFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (LIMIT_JOBS);
  END C_LIMIT_JOBSFORMULA;

  FUNCTION C_LIMIT_ASSEMBLIESFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF (P_FLEXWHERE IS NOT NULL) THEN
        RETURN ('AND ');
      ELSE
        RETURN ('  ');
      END IF;
    END;
    RETURN NULL;
  END C_LIMIT_ASSEMBLIESFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_FLEX_MASTER_SORTFORMULA(C_FLEX_MASTER_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_FLEX_MASTER_SORT);
  END C_FLEX_MASTER_SORTFORMULA;

  FUNCTION LIMIT_RESOURCE RETURN CHARACTER IS
    LIMIT_RES VARCHAR2(80);
  BEGIN
    IF (P_FROM_RESOURCE IS NOT NULL) THEN
      IF (P_TO_RESOURCE IS NOT NULL) THEN
        LIMIT_RES := 'AND BR.RESOURCE_CODE between  ''' || P_FROM_RESOURCE || ''' AND ''' || P_TO_RESOURCE || '''';
      ELSE
        LIMIT_RES := 'AND BR.RESOURCE_CODE >= ''' || P_FROM_RESOURCE || '''';
      END IF;
    ELSE
      IF (P_TO_RESOURCE IS NOT NULL) THEN
        LIMIT_RES := 'AND BR.RESOURCE_CODE <= ''' || P_TO_RESOURCE || '''';
      ELSE
        LIMIT_RES := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_RES);
  END LIMIT_RESOURCE;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

END WIP_WIPTRTXN_XMLP_PKG;


/
