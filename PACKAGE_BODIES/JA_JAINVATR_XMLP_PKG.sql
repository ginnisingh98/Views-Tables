--------------------------------------------------------
--  DDL for Package Body JA_JAINVATR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINVATR_XMLP_PKG" AS
/* $Header: JAINVATRB.pls 120.1 2007/12/25 16:33:28 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        NVL(B.SPID
           ,'')
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NVL(NAME
           ,'')
      FROM
        V$DATABASE;
    CURSOR LCU_TAX_TYPES IS
      SELECT
        DISTINCT
        JORRV.ATTRIBUTE_CODE
      FROM
        JAI_RGM_ORG_REGNS_V JORRV
      WHERE JORRV.REGIME_CODE = 'VAT'
        AND JORRV.REGISTRATION_TYPE = 'TAX_TYPES';
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    AUDSID NUMBER := USERENV('SESSIONID');
    SID NUMBER;
    SERIAL NUMBER;
    SPID VARCHAR2(9);
    NAME1 VARCHAR2(25);
    LC_TAX_TYPES VARCHAR2(4000);
  BEGIN
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO SID,SERIAL,SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO NAME1;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(1275
                   ,'TraceFile Name = ' || NVL(LOWER(NAME1)
                      ,'') || '_ora_' || NVL(SPID
                      ,'') || '.trc')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    /*SRW.MESSAGE(007
               ,'The Report Version is 120.0 and the Last Modified Date is 24/11/2006')*/NULL;
    P_FROM_DATE := FND_DATE.CANONICAL_TO_DATE(P_CAN_DATE_FROM);
    P_TO_DATE := FND_DATE.CANONICAL_TO_DATE(P_CAN_DATE_TO);
    FOR lr_tax_types IN LCU_TAX_TYPES LOOP
      LC_TAX_TYPES := LC_TAX_TYPES || '''' || LR_TAX_TYPES.ATTRIBUTE_CODE || ''',';
    END LOOP;
    IF (LC_TAX_TYPES IS NOT NULL) THEN
      LC_TAX_TYPES := ' AND jitx.tax_type IN ( ' || RTRIM(LC_TAX_TYPES
                           ,',') || ' )';
    END IF;
    P_REGIME_TAXES := LC_TAX_TYPES;
    /*SRW.MESSAGE(007
               ,'Tax Types = ' || P_REGIME_TAXES)*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_TURNOVER_ISO_SHIPMENTSFORMU(A_ORGANIZATION_ID IN NUMBER
                                         ,A_LOCATION_ID IN NUMBER) RETURN NUMBER IS
    LN_ISO_SHIPMENT_AMT NUMBER;
    CURSOR LCU_ISO_SHIPMENT_AMOUNT IS
      SELECT
        ROUND(SUM(JISPL.SELLING_PRICE * JISPL.QUANTITY)
             ,2)
      FROM
        JAI_OM_WSH_LINES_ALL JISPL,
        OE_ORDER_HEADERS_ALL OOHA
      WHERE OOHA.ORDER_SOURCE_ID = 10
        AND JISPL.ORDER_HEADER_ID = OOHA.HEADER_ID
        AND JISPL.ORDER_TYPE_ID = OOHA.ORDER_TYPE_ID
        AND JISPL.ORGANIZATION_ID = A_ORGANIZATION_ID
        AND JISPL.LOCATION_ID = A_LOCATION_ID
        AND TRUNC(JISPL.CREATION_DATE) BETWEEN P_FROM_DATE
        AND P_TO_DATE;
  BEGIN
    OPEN LCU_ISO_SHIPMENT_AMOUNT;
    FETCH LCU_ISO_SHIPMENT_AMOUNT
     INTO LN_ISO_SHIPMENT_AMT;
    CLOSE LCU_ISO_SHIPMENT_AMOUNT;
    RETURN (NVL(LN_ISO_SHIPMENT_AMT
              ,0));
  END CF_TURNOVER_ISO_SHIPMENTSFORMU;

  FUNCTION CF_TURNOVER_ISO_RECEIPTSFORMUL(A_ORGANIZATION_ID IN NUMBER
                                         ,A_LOCATION_ID IN NUMBER) RETURN NUMBER IS
    LN_ISO_RECEIPTS_AMT NUMBER;
    CURSOR LCU_ISO_RECEIPTS_AMOUNT IS
      SELECT
        SUM(PRLA.UNIT_PRICE * RT.PRIMARY_QUANTITY)
      FROM
        PO_REQUISITION_LINES_ALL PRLA,
        RCV_TRANSACTIONS RT
      WHERE PRLA.REQUISITION_LINE_ID = RT.REQUISITION_LINE_ID
        AND PRLA.DESTINATION_ORGANIZATION_ID = A_ORGANIZATION_ID
        AND PRLA.DELIVER_TO_LOCATION_ID = A_LOCATION_ID
        AND RT.SOURCE_DOCUMENT_CODE = 'REQ'
        AND RT.TRANSACTION_DATE BETWEEN P_FROM_DATE
        AND P_TO_DATE;
  BEGIN
    OPEN LCU_ISO_RECEIPTS_AMOUNT;
    FETCH LCU_ISO_RECEIPTS_AMOUNT
     INTO LN_ISO_RECEIPTS_AMT;
    CLOSE LCU_ISO_RECEIPTS_AMOUNT;
    RETURN (NVL(LN_ISO_RECEIPTS_AMT
              ,0));
  END CF_TURNOVER_ISO_RECEIPTSFORMUL;

  FUNCTION CF_SALES_TOTAL_BASE_AMTFORMULA(CS_SALES_NEX_BASE_AMT IN NUMBER
                                         ,CS_SALES_CST_BASE_AMT IN NUMBER
                                         ,CS_SALES_EX_BASE_AMT IN NUMBER
                                         ,CF_TURNOVER_ISO_SHIPMENTS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_SALES_NEX_BASE_AMT + CS_SALES_CST_BASE_AMT + CS_SALES_EX_BASE_AMT + CF_TURNOVER_ISO_SHIPMENTS);
  END CF_SALES_TOTAL_BASE_AMTFORMULA;

  FUNCTION CF_SALES_TOTAL_TAX_AMTFORMULA(CS_SALES_NEX_TAX_AMT IN NUMBER
                                        ,CS_SALES_CST_TAX_AMT IN NUMBER
                                        ,CS_SALES_VATREV_TAX_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_SALES_NEX_TAX_AMT + CS_SALES_CST_TAX_AMT + CS_SALES_VATREV_TAX_AMT);
  END CF_SALES_TOTAL_TAX_AMTFORMULA;

  FUNCTION CF_PUR_TOTAL_BASE_AMTFORMULA(CS_PUR_NCG_UNREG_BASE_AMT IN NUMBER
                                       ,CS_PUR_NCG_REG_BASE_AMT IN NUMBER
                                       ,CS_PUR_NCG_CST_BASE_AMT IN NUMBER
                                       ,CF_TURNOVER_ISO_RECEIPTS IN NUMBER
                                       ,CS_PUR_CG_BASE_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_PUR_NCG_UNREG_BASE_AMT + CS_PUR_NCG_REG_BASE_AMT + CS_PUR_NCG_CST_BASE_AMT + CF_TURNOVER_ISO_RECEIPTS + CS_PUR_CG_BASE_AMT);
  END CF_PUR_TOTAL_BASE_AMTFORMULA;

  FUNCTION CF_PUR_TOTAL_TAX_AMTFORMULA(CS_PUR_NCG_UNREG_TAX_AMT IN NUMBER
                                      ,CS_PUR_NCG_REG_TAX_AMT IN NUMBER
                                      ,CS_PUR_NCG_CST_TAX_AMT IN NUMBER
                                      ,CS_PUR_CG_TAX_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_PUR_NCG_UNREG_TAX_AMT + CS_PUR_NCG_REG_TAX_AMT + CS_PUR_NCG_CST_TAX_AMT + CS_PUR_CG_TAX_AMT);
  END CF_PUR_TOTAL_TAX_AMTFORMULA;

  FUNCTION CF_PUR_CG_TOTAL_TAX_CLAIMEDFOR(A_ORGANIZATION_ID IN NUMBER
                                         ,A_LOCATION_ID IN NUMBER) RETURN NUMBER IS
    LN_CG_TAX_CLAIMED NUMBER;
    CURSOR LCU_CG_TAX_CLAIMED IS
      SELECT
        SUM(JRRL.RECOVERED_AMOUNT)
      FROM
        JAI_RCV_RGM_LINES JRRL
      WHERE JRRL.REGIME_ITEM_CLASS = 'CG'
        AND JRRL.ORGANIZATION_ID = A_ORGANIZATION_ID
        AND JRRL.LOCATION_ID = A_LOCATION_ID
        AND TRUNC(JRRL.RECEIPT_DATE) BETWEEN P_FROM_DATE
        AND P_TO_DATE;
  BEGIN
    OPEN LCU_CG_TAX_CLAIMED;
    FETCH LCU_CG_TAX_CLAIMED
     INTO LN_CG_TAX_CLAIMED;
    CLOSE LCU_CG_TAX_CLAIMED;
    RETURN (NVL(LN_CG_TAX_CLAIMED
              ,0));
  END CF_PUR_CG_TOTAL_TAX_CLAIMEDFOR;

  FUNCTION CF_TAX_SUMMARYFORMULA(CF_SALES_TOTAL_TAX_AMT IN NUMBER
                                ,CF_INPUTTAX_CLAIMABLE IN NUMBER
                                ,CF_PUR_CG_TOTAL_TAX_CLAIMED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_SALES_TOTAL_TAX_AMT - CF_INPUTTAX_CLAIMABLE - CF_PUR_CG_TOTAL_TAX_CLAIMED);
  END CF_TAX_SUMMARYFORMULA;

  FUNCTION CF_INPUTTAX_CLAIMABLEFORMULA(CF_PUR_TOTAL_TAX_AMT IN NUMBER
                                       ,CS_TAX_INTERSTATE_PUR IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(CF_PUR_TOTAL_TAX_AMT
              ,0) - NVL(CS_TAX_INTERSTATE_PUR
              ,0));
  END CF_INPUTTAX_CLAIMABLEFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

END JA_JAINVATR_XMLP_PKG;



/
