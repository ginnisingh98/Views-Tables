--------------------------------------------------------
--  DDL for Package Body JA_JAINYEDE_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINYEDE_XMLP_PKG" AS
/* $Header: JAINYEDEB.pls 120.2 2008/01/22 11:06:33 dwkrishn noship $ */
  FUNCTION CF_1FORMULA RETURN VARCHAR2 IS
    N VARCHAR2(100);
  BEGIN
    SELECT
      COMPANY_NAME
    INTO N
    FROM
      FA_SYSTEM_CONTROLS;
    /*SRW.MESSAGE(1275
               ,'CF_1 company_name -> ' || N)*/NULL;
    RETURN (N);
  END CF_1FORMULA;

  FUNCTION CF_2FORMULA(OP_TOT IN NUMBER
                      ,COS_TOT IN NUMBER
                      ,CS_4 IN NUMBER) RETURN NUMBER IS
    N NUMBER;
  BEGIN
    N := NVL(OP_TOT
            ,0) + NVL(COS_TOT
            ,0) - NVL(CS_4
            ,0);
    /*SRW.MESSAGE(1275
               ,'CF_2 op_tot -> ' || OP_TOT || ', cos_tot -> ' || COS_TOT || ', cs_4 -> ' || CS_4 || ', n -> ' || N)*/NULL;
    IF N <= 0 THEN
      N := 0;
    END IF;
    RETURN (N);
  END CF_2FORMULA;

  FUNCTION CF_3FORMULA(ASSET_ID_v IN NUMBER
                      ,BLOCK_ID1 IN NUMBER
                      ,COST IN NUMBER
                      ,SLNO IN NUMBER
                      ,BLOCK_ID IN NUMBER
                      ,RATE IN NUMBER
                      ,TYPE1 IN VARCHAR2
                      ,OPENING_WDV IN NUMBER
                      ,CLOSING_WDV IN NUMBER
                      ,DEPN_OF_ASSETS IN NUMBER
                      ,TOTAL IN NUMBER
                      ,UNPLANNED_DEPN IN NUMBER) RETURN NUMBER IS
    V_SALE NUMBER;
    V_BLOCK_ID NUMBER;
    CURSOR SALE_CUR IS
      SELECT
        ( NVL(A.PROCEEDS_OF_SALE
           ,0) - NVL(A.COST_OF_REMOVAL
           ,0) ) SALE
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.ASSET_ID = B.ASSET_ID
        AND A.STATUS = 'PROCESSED'
        AND A.ASSET_ID = ASSET_ID_v
        AND B.BLOCK_ID = TO_CHAR(BLOCK_ID1)
        AND C.BOOK_TYPE_CODE = BOOK_NAME
        AND A.DATE_RETIRED BETWEEN C.START_DATE
        AND C.YEAR_ENDED
        AND C.START_DATE BETWEEN START_DATE
        AND END_DATE_N;
  BEGIN
    OPEN SALE_CUR;
    FETCH SALE_CUR
     INTO V_SALE;
    CLOSE SALE_CUR;
    NULL;
    RETURN (V_SALE);
  END CF_3FORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    V_END_DATE DATE;
    CURSOR YEAR_END_CUR IS
      SELECT
        YEAR_END
      FROM
        JAI_FA_AST_YEARS
      WHERE YEAR_START = START_DATE;
  BEGIN
    OPEN YEAR_END_CUR;
    FETCH YEAR_END_CUR
     INTO V_END_DATE;
    CLOSE YEAR_END_CUR;
   -- END_DATE := V_END_DATE;
    END_DATE_N := V_END_DATE;
    START_DATE_N := START_DATE;
    START_DATE_N1:=TO_CHAR(START_DATE,'DD/MON/YYYY');
    END_DATE_N1:=TO_CHAR(END_DATE_N,'DD/MON/YYYY');

    RUN_DEP(START_DATE
           ,V_END_DATE
           ,BOOK_NAME);
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_4FORMULA RETURN NUMBER IS
    V_TYPE JAI_FA_AST_BLOCKS.TYPE%TYPE;
    V_RATE NUMBER;
    V_SALE NUMBER;
    V_BLOCK_ID NUMBER;
    V_BLOCK_ID1 NUMBER;
    CURSOR BLOCK_RET_CUR IS
      SELECT
        A.BLOCK_ID
      FROM
        JAI_FA_AST_BLOCKS A,
        JAI_FA_AST_BLOCK_DTLS B,
        FA_RETIREMENTS C
      WHERE A.BLOCK_ID = B.BLOCK_ID
        AND B.ASSET_ID = C.ASSET_ID
      GROUP BY
        A.BLOCK_ID;
    CURSOR TYPE_RATE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        TYPE,
        RATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TO_CHAR(BLOCK_ID) = TO_CHAR(P_BLOCK_ID)
        AND BOOK_TYPE_CODE = BOOK_NAME;
    CURSOR BLOCK_ID_CUR_RET(P_TYPE IN VARCHAR2,P_RATE IN NUMBER) IS
      SELECT
        BLOCK_ID
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TYPE = P_TYPE
        AND RATE = P_RATE
        AND BOOK_TYPE_CODE = BOOK_NAME
        AND START_DATE BETWEEN START_DATE
        AND END_DATE_N;
    CURSOR SALE_CUR(P_BLOCK_ID IN NUMBER,P_TYPE IN VARCHAR2,P_RATE IN NUMBER) IS
      SELECT
        DISTINCT
        ( NVL(A.PROCEEDS_OF_SALE
           ,0) - NVL(A.COST_OF_REMOVAL
           ,0) ) SALE
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.ASSET_ID = B.ASSET_ID
        AND B.BLOCK_ID = P_BLOCK_ID
        AND C.TYPE = P_TYPE
        AND C.RATE = P_RATE
        AND A.DATE_RETIRED between START_DATE
        AND END_DATE_N;
  BEGIN
    OPEN BLOCK_RET_CUR;
    FETCH BLOCK_RET_CUR
     INTO V_BLOCK_ID;
    CLOSE BLOCK_RET_CUR;
    OPEN TYPE_RATE_CUR(V_BLOCK_ID);
    FETCH TYPE_RATE_CUR
     INTO V_TYPE,V_RATE;
    CLOSE TYPE_RATE_CUR;
    OPEN BLOCK_ID_CUR_RET(V_TYPE,V_RATE);
    FETCH BLOCK_ID_CUR_RET
     INTO V_BLOCK_ID1;
    CLOSE BLOCK_ID_CUR_RET;
    OPEN SALE_CUR(V_BLOCK_ID,V_TYPE,V_RATE);
    FETCH SALE_CUR
     INTO V_SALE;
    CLOSE SALE_CUR;
    NULL;
    RETURN (V_SALE);
  END CF_4FORMULA;

  FUNCTION CF_5FORMULA(BLOCK_ID IN NUMBER
                      ,TYPE1 IN VARCHAR2
                      ,RATE IN NUMBER) RETURN NUMBER IS
    V_TYPE JAI_FA_AST_BLOCKS.TYPE%TYPE;
    V_RATE NUMBER;
    V_SALE NUMBER;
    V_BLOCK_ID NUMBER;
    V_BLOCK_ID1 NUMBER;
    CURSOR TYPE_RATE_CUR IS
      SELECT
        TYPE,
        RATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = BLOCK_ID
        AND BOOK_TYPE_CODE = BOOK_NAME;
    CURSOR BLOCK_ID_CUR_RET IS
      SELECT
        BLOCK_ID
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TYPE = TYPE1
        AND RATE = RATE
        AND START_DATE < START_DATE;
    CURSOR SALE_CUR(CP_OWNED_LEASED IN FA_ADDITIONS.OWNED_LEASED%TYPE,CP_STATUS IN FA_RETIREMENTS.STATUS%TYPE) IS
      SELECT
        NVL(SUM(FAR.PROCEEDS_OF_SALE - FAR.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCK_DTLS JBA,
        FA_ADDITIONS FA,
        JAI_FA_AST_BLOCKS JABLOA,
        FA_RETIREMENTS FAR
      WHERE FA.OWNED_LEASED = CP_OWNED_LEASED
        AND FA.ASSET_ID = JBA.ASSET_ID
        AND JBA.BLOCK_ID = JABLOA.BLOCK_ID
        AND FAR.BOOK_TYPE_CODE = JABLOA.BOOK_TYPE_CODE
        AND JABLOA.BOOK_TYPE_CODE = BOOK_NAME
        AND JABLOA.TYPE = TYPE1
        AND JABLOA.RATE = RATE
        AND JBA.ASSET_ID = FAR.ASSET_ID
        AND FAR.STATUS = CP_STATUS
        AND FAR.DATE_RETIRED between START_DATE
        AND END_DATE_N;
  BEGIN
    OPEN TYPE_RATE_CUR;
    FETCH TYPE_RATE_CUR
     INTO V_TYPE,V_RATE;
    CLOSE TYPE_RATE_CUR;
    OPEN BLOCK_ID_CUR_RET;
    FETCH BLOCK_ID_CUR_RET
     INTO V_BLOCK_ID;
    CLOSE BLOCK_ID_CUR_RET;
    OPEN SALE_CUR('OWNED','PROCESSED');
    FETCH SALE_CUR
     INTO V_SALE;
    CLOSE SALE_CUR;
    IF NVL(V_SALE
       ,0) < 0 THEN
      V_SALE := 0;
    END IF;
    NULL;
    RETURN (V_SALE);
  END CF_5FORMULA;

  FUNCTION CF_6FORMULA(BLOCK_ID_v IN NUMBER
                      ,TYPE1 IN VARCHAR2
                      ,OP_TOT IN NUMBER
                      ,COS_TOT IN NUMBER
                      ,RATE IN NUMBER) RETURN NUMBER IS
    LV_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_EXPENSED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    START_DATE_T date;
    CURSOR CUR_GET_VALID_ASSETS IS
      SELECT
        '1'
      FROM
        JAI_FA_AST_BLOCK_DTLS JBA,
        FA_BOOKS FAB,
        JAI_FA_AST_BLOCKS JABOA
      WHERE JBA.ASSET_ID = FAB.ASSET_ID
        AND ( ( JBA.ASSET_TYPE = LV_CAPITALIZED
        AND FAB.CAPITALIZE_FLAG = LV_FLAG )
      OR JBA.ASSET_TYPE = LV_EXPENSED )
        AND JBA.DATE_OF_ACQUISITION BETWEEN JABOA.START_DATE
        AND NVL(JABOA.YEAR_ENDED
         ,END_DATE_N)
        AND FAB.DATE_INEFFECTIVE IS NULL
        AND FAB.TRANSACTION_HEADER_ID_OUT IS NULL
        AND FAB.PERIOD_COUNTER_FULLY_RETIRED IS NULL
        AND JBA.BLOCK_ID = JABOA.BLOCK_ID
        AND JABOA.BOOK_TYPE_CODE = FAB.BOOK_TYPE_CODE
        AND JABOA.BOOK_TYPE_CODE = BOOK_NAME
        AND JABOA.TYPE = (
        SELECT
          TYPE
        FROM
          JAI_FA_AST_BLOCKS
        WHERE BLOCK_ID = BLOCK_ID_v )
        AND ( JABOA.START_DATE <= NVL(START_DATE
         ,JABOA.START_DATE)
      OR JABOA.START_DATE BETWEEN NVL(START_DATE
         ,JABOA.START_DATE)
        AND NVL(END_DATE_N
         ,JABOA.YEAR_ENDED) );
    CURSOR CUR_GET_ST_OP_BAL(CP_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE) IS
      SELECT
        OPENING_WDV
      FROM
        JAI_FA_AST_BLOCKS JABOA
      WHERE JABOA.BOOK_TYPE_CODE = BOOK_NAME
        AND JABOA.TYPE = (
        SELECT
          TYPE
        FROM
          JAI_FA_AST_BLOCKS
        WHERE BLOCK_ID = CP_BLOCK_ID )
      ORDER BY
        START_DATE ASC;
    LV_EXISTS VARCHAR2(1);
    LN_OPENING_WDV JAI_FA_AST_BLOCKS.OPENING_WDV%TYPE;
    CURSOR DEPR_CUR1 IS
      SELECT
        A.ASSET_ID,
        A.COST,
        A.TRANSACTION_HEADER_ID_IN,
        A.DATE_EFFECTIVE
      FROM
        FA_BOOKS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_BLOCK_DTLS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE A.ASSET_ID = C.ASSET_ID
        AND ( ( C.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR C.ASSET_TYPE = LV_EXPENSED )
        AND B.BLOCK_ID = BLOCK_ID_v
        AND B.BLOCK_ID = C.BLOCK_ID
        AND A.BOOK_TYPE_CODE = B.BOOK_TYPE_CODE
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND C.DATE_OF_ACQUISITION between D.START_DATE
        AND D.END_DATE
        AND B.START_DATE between NVL(START_DATE_T,B.START_DATE)
        AND NVL(END_DATE_N ,B.YEAR_ENDED)
        AND D.START_DATE >= ADD_MONTHS(START_DATE_T,6)
        AND D.SLNO = 2
        AND A.DATE_INEFFECTIVE IS null
        AND A.TRANSACTION_HEADER_ID_OUT IS null;
    CURSOR BLOCK_RET_CUR_FIR(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_ADDITIONS B,
        FA_RETIREMENTS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE B.CONTEXT = P_CONTEXT_VALUE
        AND TO_CHAR(A.BLOCK_ID) = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND B.OWNED_LEASED = 'OWNED'
        AND B.ASSET_TYPE IN ( 'CAPITALIZED' , 'EXPENSED' )
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RRRR') between D.START_DATE
        AND D.END_DATE
        AND D.START_DATE < ADD_MONTHS(START_DATE_T
                ,6)
        AND D.SLNO = 1
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = 'PROCESSED'
        AND A.TYPE = P_BLOCK_TYPE
        AND A.BLOCK_ID = BLOCK_ID_V
        AND C.DATE_RETIRED BETWEEN START_DATE_T
        AND END_DATE_N;
    CURSOR BLOCK_RET_CUR_SEC(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_ADDITIONS B,
        FA_RETIREMENTS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE B.CONTEXT = P_CONTEXT_VALUE
        AND TO_CHAR(A.BLOCK_ID) = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND B.OWNED_LEASED = 'OWNED'
        AND B.ASSET_TYPE IN ( 'CAPITALIZED' , 'EXPENSED' )
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RRRR') between D.START_DATE
        AND D.END_DATE
        AND D.START_DATE >= ADD_MONTHS(START_DATE_T
                ,6)
        AND D.SLNO = 2
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = 'PROCESSED'
        AND A.TYPE = P_BLOCK_TYPE
        AND A.BLOCK_ID = BLOCK_ID_V
        AND C.DATE_RETIRED BETWEEN START_DATE_T
        AND END_DATE_N;
    V_COST NUMBER;
    V_TOTAL1 NUMBER;
    V_TOTAL2 NUMBER;
    V_DEPRN NUMBER;
    V_DEPRNAFTER NUMBER;
    V_DEPRNBEFORE NUMBER;
    LN_TOTAL_SEC_HF_COST NUMBER := 0;
    V_FIR_DEDUCTION NUMBER;
    V_SEC_DEDUCTION NUMBER;
  BEGIN
  START_DATE_t:=START_DATE;
    LV_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_EXPENSED := 'EXPENSED';
    OPEN CUR_GET_VALID_ASSETS;
    FETCH CUR_GET_VALID_ASSETS
     INTO LV_EXISTS;
    OPEN CUR_GET_ST_OP_BAL(CP_BLOCK_ID => BLOCK_ID_v);
    FETCH CUR_GET_ST_OP_BAL
     INTO LN_OPENING_WDV;
    CLOSE CUR_GET_ST_OP_BAL;
    IF CUR_GET_VALID_ASSETS%NOTFOUND AND LN_OPENING_WDV = 0 THEN
      /*SRW.MESSAGE(1275
                 ,'5.6.2 opening wdv for the first period record for the type and book name is 0')*/NULL;
      V_DEPRN := 0;
    ELSE
      LV_CAPITALIZED := 'CAPITALIZED';
      LV_FLAG := 'YES';
      LV_EXPENSED := 'EXPENSED';
      V_FIR_DEDUCTION := NULL;
      V_SEC_DEDUCTION := NULL;
      OPEN BLOCK_RET_CUR_FIR(TYPE1);
      FETCH BLOCK_RET_CUR_FIR
       INTO V_FIR_DEDUCTION;
      CLOSE BLOCK_RET_CUR_FIR;
      OPEN BLOCK_RET_CUR_SEC(TYPE1);
      FETCH BLOCK_RET_CUR_SEC
       INTO V_SEC_DEDUCTION;
      CLOSE BLOCK_RET_CUR_SEC;
      FOR rec_depr_cur IN DEPR_CUR1 LOOP
        LN_TOTAL_SEC_HF_COST := CALCULATE_ACTUAL_COST(P_TRANSACTION_HEADER_ID_IN => REC_DEPR_CUR.TRANSACTION_HEADER_ID_IN
                                                     ,P_DATE_EFFECTIVE => REC_DEPR_CUR.DATE_EFFECTIVE
                                                     ,P_BOOK_NAME => BOOK_NAME
                                                     ,P_ASSET_ID => REC_DEPR_CUR.ASSET_ID
                                                     ,P_COST => NVL(REC_DEPR_CUR.COST
                                                        ,0)) + LN_TOTAL_SEC_HF_COST;
      END LOOP;
      /*SRW.MESSAGE(1275
                 ,'CF_6 1.ln_total_sec_hf_cost ->' || LN_TOTAL_SEC_HF_COST)*/NULL;
      V_TOTAL2 := NVL(OP_TOT
                     ,0) + NVL(COS_TOT
                     ,0) - NVL(LN_TOTAL_SEC_HF_COST
                     ,0) - NVL(V_FIR_DEDUCTION
                     ,0);
      V_DEPRNBEFORE := V_TOTAL2 * (RATE / 100);
      /*SRW.MESSAGE(1275
                 ,'CF_6 2.1 V_Total2 -> ' || V_TOTAL2 || ', v_DeprnBefore -> ' || V_DEPRNBEFORE)*/NULL;
      IF V_TOTAL2 < 0 THEN
        V_DEPRNBEFORE := 0;
        LN_TOTAL_SEC_HF_COST := NVL(LN_TOTAL_SEC_HF_COST
                                   ,0) + V_TOTAL2;
      ELSE
        V_DEPRNBEFORE := V_TOTAL2 * (RATE / 100);
      END IF;
      LN_TOTAL_SEC_HF_COST := NVL(LN_TOTAL_SEC_HF_COST
                                 ,0) - NVL(V_SEC_DEDUCTION
                                 ,0);
      V_DEPRNAFTER := NVL(LN_TOTAL_SEC_HF_COST
                         ,0) * (RATE / 100) * 0.5;
      V_DEPRN := V_DEPRNBEFORE + V_DEPRNAFTER;
      IF V_DEPRN <= 0 THEN
        V_DEPRN := 0;
      END IF;
    END IF;
    CLOSE CUR_GET_VALID_ASSETS;
    NULL;
    RETURN (V_DEPRN);
  END CF_6FORMULA;

  PROCEDURE DEPRECIATION1(P_BLOCK_ID IN NUMBER
                         ,P_OPENING_WDV IN NUMBER
                         ,P_CLOSING_BALANCE IN NUMBER
                         ,P_OPENING_WDV_ADJ IN NUMBER
                         ,P_DEPN_ADJ IN NUMBER
                         ,P_YEAR_END IN DATE) IS
    V_BLOCK_HISTORY_ID NUMBER;
    V_COUNT NUMBER;
    CURSOR V_DEPN_ADJUSTMENT_CUR IS
      SELECT
        count(*)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE TO_CHAR(BLOCK_ID) = TO_CHAR(P_BLOCK_ID)
        AND SLNO = - 1;
  BEGIN
    /*SRW.MESSAGE(1051
               ,'Entered depreciation1 ....')*/NULL;
    OPEN V_DEPN_ADJUSTMENT_CUR;
    FETCH V_DEPN_ADJUSTMENT_CUR
     INTO V_COUNT;
    CLOSE V_DEPN_ADJUSTMENT_CUR;
    SELECT
      MAX(BLOCK_HISTORY_ID)
    INTO V_BLOCK_HISTORY_ID
    FROM
      JAI_FA_AST_BLOCK_H;
    IF V_BLOCK_HISTORY_ID IS NULL THEN
      V_BLOCK_HISTORY_ID := 1;
      /*SRW.MESSAGE(1052
                 ,'in the IF of v_block_history' || V_BLOCK_HISTORY_ID)*/NULL;
    ELSE
      V_BLOCK_HISTORY_ID := V_BLOCK_HISTORY_ID + 1;
    END IF;
    /*SRW.MESSAGE(1053
               ,'v_block_history   ' || V_BLOCK_HISTORY_ID)*/NULL;
    INSERT INTO JAI_FA_AST_BLOCK_H
      (BLOCK_HISTORY_ID
      ,BLOCK_ID
      ,OPENING_WDV
      ,CLOSING_WDV
      ,OPENING_WDV_ADJ
      ,DEPN_ADJ
      ,CREATION_DATE
      ,CREATED_BY
      ,LAST_UPDATE_DATE
      ,LAST_UPDATE_LOGIN
      ,LAST_UPDATED_BY)
    VALUES   (V_BLOCK_HISTORY_ID
      ,P_BLOCK_ID
      ,P_OPENING_WDV
      ,P_CLOSING_BALANCE
      ,P_OPENING_WDV_ADJ
      ,P_DEPN_ADJ
      ,SYSDATE
      ,UID
      ,SYSDATE
      ,UID
      ,UID);
    /*SRW.MESSAGE(1053
               ,'Before updating JAI_FA_AST_BLOCKS in DEPRECIATION1.. ')*/NULL;
    UPDATE
      JAI_FA_AST_BLOCKS
    SET
      OPENING_WDV = NVL(P_OPENING_WDV
         ,0) + NVL(P_OPENING_WDV_ADJ
         ,0)
    WHERE TO_CHAR(BLOCK_ID) = TO_CHAR(P_BLOCK_ID);
    /*SRW.MESSAGE(1054
               ,'updated JAI_FA_AST_BLOCKS...in DEPRECIATION1..')*/NULL;
    /*SRW.MESSAGE(1054
               ,'No of rows updated in JAI_FA_AST_BLOCKS.....' || SQL%ROWCOUNT)*/NULL;
    IF P_DEPN_ADJ IS NOT NULL THEN
      /*SRW.MESSAGE(1055
                 ,'p_depn_adj is not null...DEPRECIATION1')*/NULL;
      IF V_COUNT = 0 THEN
        /*SRW.MESSAGE(1056
                   ,'v_count is 0...DEPRECIATION1')*/NULL;
        INSERT INTO JAI_FA_DEP_BLOCKS
          (BLOCK_DEPN_ID
          ,BLOCK_ID
          ,SLNO
          ,DEPN_OF_ASSETS
          ,UNPLANNED_DEPN
          ,YEAR_ENDED
          ,CREATION_DATE
          ,CREATED_BY
          ,LAST_UPDATE_DATE
          ,LAST_UPDATE_LOGIN
          ,LAST_UPDATED_BY)
        VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
          ,P_BLOCK_ID
          ,-1
          ,NULL
          ,P_DEPN_ADJ
          ,P_YEAR_END
          ,SYSDATE
          ,UID
          ,SYSDATE
          ,UID
          ,UID);
        /*SRW.MESSAGE(1057
                   ,'inserted into JAI_FA_DEP_BLOCKS...DEPRECIATION1')*/NULL;
      ELSE
        UPDATE
          JAI_FA_DEP_BLOCKS
        SET
          UNPLANNED_DEPN = P_DEPN_ADJ
        WHERE TO_CHAR(BLOCK_ID) = TO_CHAR(P_BLOCK_ID)
          AND SLNO = - 1;
        /*SRW.MESSAGE(1058
                   ,'updating JAI_FA_DEP_BLOCKS..3...DEPRECIATION1')*/NULL;
        /*SRW.MESSAGE(1059
                   ,'no.of rows updated JAI_FA_DEP_BLOCKS...DEPRECIATION1' || SQL%ROWCOUNT)*/NULL;
      END IF;
    END IF;
  END DEPRECIATION1;

  FUNCTION CF_7FORMULA(ASSET_ID IN NUMBER
                      ,BLOCK_ID1 IN NUMBER) RETURN NUMBER IS
    CURSOR DEPN_OF_ASSET_CUR IS
      SELECT
        NVL(DEPN_OF_ASSETS
           ,0)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE UNPLANNED_DEPN = ASSET_ID
        AND TO_CHAR(BLOCK_ID) = TO_CHAR(BLOCK_ID1);
    V_DEPN_OF_ASSET NUMBER;
  BEGIN
    OPEN DEPN_OF_ASSET_CUR;
    FETCH DEPN_OF_ASSET_CUR
     INTO V_DEPN_OF_ASSET;
    CLOSE DEPN_OF_ASSET_CUR;
    /*SRW.MESSAGE(1275
               ,'CF_7 Asset_Id -> ' || ASSET_ID || ', block_id1 -> ' || BLOCK_ID1 || ', v_depn_of_asset -> ' || V_DEPN_OF_ASSET)*/NULL;
    RETURN (V_DEPN_OF_ASSET);
  END CF_7FORMULA;

  PROCEDURE RETIRE(P_YEAR_START IN DATE
                  ,P_YEAR_END IN DATE
                  ,P_BOOK_NAME IN VARCHAR2) IS
    LV_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_EXPENSED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_OWNED VARCHAR2(10);
    K NUMBER;
    I NUMBER := 0;
    V_COUNT1 NUMBER;
    V_COUNTER NUMBER;
    V_ASSET_ID NUMBER;
    V_OWNED_LEASED VARCHAR2(15);
    V_COST NUMBER;
    V_SLNO NUMBER;
    V_START_DATE DATE;
    V_END_DATE DATE;
    V_RATE NUMBER;
    V_OPENING_BALANCE NUMBER;
    V_BLOCK_ID NUMBER;
    V_PROCEEDS_OF_SALE NUMBER;
    V_AMOUNT NUMBER;
    V_BLOCK_RATE NUMBER;
    V_EXEMPT_UPTO NUMBER;
    V_COST_LESS NUMBER;
    V_AMOUNT1 NUMBER;
    V_CLOSING NUMBER;
    V_MORE_AMOUNT NUMBER;
    V_MORE_AMOUNT1 NUMBER;
    V_LESS_AMOUNT NUMBER;
    V_TYPE VARCHAR2(40);
    V_LEFT_AMOUNT NUMBER;
    V_LEFT_BLOCK_ID NUMBER;
    V_NEG_DEP NUMBER;
    V_ASSET_COUNT NUMBER;
    V_RETIRE_COUNT1 NUMBER;
    V_ORIGINAL_COUNT NUMBER;
    V_OPENING_WDV NUMBER;
    V_PERIOD_RATE NUMBER;
    V_BLOCK_ID1 NUMBER;
    V_DEPRECIATION NUMBER;
    V_CLOSING_BALANCE NUMBER;
    V_OPENING_WDV1 NUMBER;
    V_COUNT NUMBER;
    V_AQUISATION_DATE DATE;
    V_COUNT2 NUMBER;
    V_DATE_PLACED_IN_SERVICE DATE;
    V_RETIRE_COUNT NUMBER;
    V_BLOCK_ID2 NUMBER;
    V_CURRENT_UNITS NUMBER;
    V_CLOSING1 NUMBER;
    V_DEPRECIATION_COST NUMBER;
    V_DEPRECIATION_COST1 NUMBER;
    V_OLD_CLOSING_WDV NUMBER;
    V_OPENING_WDV_ADJ NUMBER;
    V_BLOCK_HISTORY_ID NUMBER;
    V_DEPN_ADJ NUMBER;
    V_YEAR_END DATE;
    V_PREV_CLOSING_BALANCE NUMBER;
    V_DEPN_SLNO NUMBER;
    V_SERIAL_NUM1 NUMBER;
    V_DEPN_AMOUNT NUMBER := 0;
    V_FLAG BOOLEAN := FALSE;
    V_CLOSING_BLOCK_ID NUMBER;
    V_UNPLANNED_DEPN NUMBER;
    V_RETIRED NUMBER;
    CURSOR ASSET_BLOCK_CUR IS
      SELECT
        DISTINCT
        A.ASSET_ID,
        B.BLOCK_ID,
        B.OPENING_WDV,
        B.RATE BLOCK_RATE,
        C.SLNO,
        C.START_DATE,
        C.END_DATE,
        C.RATE PERIOD_RATE,
        C.EXEMPT_UPTO,
        A.DATE_OF_ACQUISITION AQUISATION_DATE,
        D.DATE_PLACED_IN_SERVICE,
        E.CURRENT_UNITS
      FROM
        JAI_FA_AST_BLOCK_DTLS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C,
        FA_BOOKS D,
        FA_ADDITIONS E
      WHERE E.OWNED_LEASED = LV_OWNED
        AND E.ASSET_ID = A.ASSET_ID
        AND NVL(A.ASSET_ID
         ,0) = NVL(D.ASSET_ID
         ,0)
        AND D.DATE_PLACED_IN_SERVICE between C.START_DATE
        AND C.END_DATE
        AND B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START = P_YEAR_START
        AND C.YEAR_END = P_YEAR_END
        AND A.BLOCK_ID = B.BLOCK_ID
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND D.DATE_INEFFECTIVE is null
        AND D.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( A.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR A.ASSET_TYPE = LV_EXPENSED )
      ORDER BY
        A.ASSET_ID;
    CURSOR COUNT_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        JAI_FA_AST_BLOCK_DTLS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C,
        FA_BOOKS D,
        FA_ADDITIONS E
      WHERE E.OWNED_LEASED = 'OWNED'
        AND E.ASSET_ID = A.ASSET_ID
        AND NVL(A.ASSET_ID
         ,0) = NVL(D.ASSET_ID
         ,0)
        AND D.DATE_PLACED_IN_SERVICE between C.START_DATE
        AND C.END_DATE
        AND B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START = P_YEAR_START
        AND C.YEAR_END = P_YEAR_END
        AND A.BLOCK_ID = B.BLOCK_ID
        AND B.BLOCK_ID = P_BLOCK_ID
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND D.BOOK_TYPE_CODE = B.BOOK_TYPE_CODE
        AND NVL(B.CLOSING_WDV
         ,0) <> 0
        AND B.YEAR_ENDED is NOT null
        AND D.DATE_INEFFECTIVE is null
        AND D.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( A.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR A.ASSET_TYPE = LV_EXPENSED )
      ORDER BY
        A.ASSET_ID;
    CURSOR BLOCK_RET_CUR IS
      SELECT
        A.BLOCK_ID,
        NVL(SUM(C.PROCEEDS_OF_SALE)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        JAI_FA_AST_BLOCK_DTLS B,
        FA_RETIREMENTS C
      WHERE A.BLOCK_ID = B.BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.ASSET_ID = C.ASSET_ID
        AND C.DATE_RETIRED between P_YEAR_START
        AND P_YEAR_END
      GROUP BY
        A.BLOCK_ID;
    CURSOR TYPE_RATE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        TYPE,
        RATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TO_CHAR(BLOCK_ID) = TO_CHAR(P_BLOCK_ID)
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR BLOCK_ID_CUR_RET(P_TYPE IN VARCHAR2,P_RATE IN NUMBER) IS
      SELECT
        BLOCK_ID,
        OPENING_WDV,
        RATE,
        TYPE,
        OPENING_WDV_ADJ,
        DEPN_ADJ
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TYPE = P_TYPE
        AND RATE = P_RATE
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR FA_RETIREMENTS_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        SUM(NVL(A.PROCEEDS_OF_SALE
               ,0)) SALE
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.ASSET_ID = B.ASSET_ID
        AND B.BLOCK_ID = P_BLOCK_ID
        AND B.BLOCK_ID = C.BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND A.DATE_RETIRED between P_YEAR_START
        AND P_YEAR_END
      ORDER BY
        B.BLOCK_ID;
    CURSOR COST_LESS_EXEMPT_UPTO_CUR(P_ASSET_ID IN NUMBER,P_START_DATE IN DATE,P_END_DATE IN DATE,P_EXEMPT_UPTO IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(A.ORIGINAL_COST) COSTING,
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE
      FROM
        FA_BOOKS A,
        JAI_FA_AST_BLOCK_DTLS B,
        FA_ADDITIONS C
      WHERE A.ASSET_ID = P_ASSET_ID
        AND A.ASSET_ID = B.ASSET_ID
        AND A.DATE_INEFFECTIVE is null
        AND A.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND B.BLOCK_ID = P_BLOCK_ID
        AND A.ASSET_ID = C.ASSET_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND A.DATE_PLACED_IN_SERVICE between P_START_DATE
        AND P_END_DATE
        AND ( A.ORIGINAL_COST / C.CURRENT_UNITS ) <= NVL(P_EXEMPT_UPTO
         ,0)
      GROUP BY
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE;
    CURSOR COST_MORE_EXEMPT_UPTO_CUR(P_ASSET_ID IN NUMBER,P_START_DATE IN DATE,P_END_DATE IN DATE,P_EXEMPT_UPTO IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(A.ORIGINAL_COST) COSTING,
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE
      FROM
        FA_BOOKS A,
        JAI_FA_AST_BLOCK_DTLS B,
        FA_ADDITIONS C
      WHERE A.ASSET_ID = P_ASSET_ID
        AND A.ASSET_ID = B.ASSET_ID
        AND A.ASSET_ID = B.ASSET_ID
        AND A.DATE_INEFFECTIVE is null
        AND A.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND B.BLOCK_ID = P_BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND A.DATE_PLACED_IN_SERVICE between P_START_DATE
        AND P_END_DATE
        AND ( A.ORIGINAL_COST / C.CURRENT_UNITS ) > NVL(P_EXEMPT_UPTO
         ,0)
      GROUP BY
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE;
    CURSOR TEMP_TAB IS
      SELECT
        SUM(DEPN_OF_ASSETS) ASSETS,
        SUM(TOTAL_BALANCE) BALANCE,
        SUM(SLNO) COST,
        SUM(FULL_EXEMPT) COST_FULL,
        BLOCK_ID
      FROM
        JAI_FA_DEP_BLOCKS_T
      GROUP BY
        BLOCK_ID;
    CURSOR TYPE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        TYPE,
        RATE,
        OPENING_WDV,
        OPENING_WDV_ADJ,
        DEPN_ADJ
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR LEFT_AMOUNT(P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(EXEMPT_AMOUNT) L_AMOUNT,
        BLOCK_ID
      FROM
        JAI_FA_EXEMPTIONS
      WHERE BLOCK_ID = P_BLOCK_ID
      GROUP BY
        BLOCK_ID;
    CURSOR RETIRE_ASSET_CUR(P_ASSET_ID IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        A.UNITS,
        B.BLOCK_ID
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B
      WHERE A.DATE_RETIRED <= P_YEAR_END
        AND A.ASSET_ID = B.ASSET_ID
        AND A.STATUS = 'PROCESSED'
        AND A.ASSET_ID = P_ASSET_ID
        AND B.BLOCK_ID = TO_CHAR(P_BLOCK_ID);
    CURSOR ASSET_COUNT_CUR(P_ASSET_ID IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        H.UNITS,
        H.ASSET_ID
      FROM
        FA_ASSET_HISTORY H,
        JAI_FA_AST_BLOCK_DTLS A
      WHERE TRANSACTION_HEADER_ID_IN IN (
        SELECT
          MIN(TRANSACTION_HEADER_ID_IN)
        FROM
          FA_ASSET_HISTORY
        GROUP BY
          ASSET_ID )
        AND A.ASSET_ID = H.ASSET_ID
        AND A.BLOCK_ID = P_BLOCK_ID
        AND A.ASSET_ID = P_ASSET_ID;
    CURSOR BLOCK_ID_CUR IS
      SELECT
        BLOCK_ID
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TO_CHAR(BLOCK_ID) NOT IN (
        SELECT
          BLOCK_ID
        FROM
          JAI_FA_AST_BLOCK_DTLS )
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR CLOSING_BALANCE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        B.OPENING_WDV,
        B.OPENING_WDV_ADJ,
        B.DEPN_ADJ,
        B.RATE BLOCK_RATE,
        B.BLOCK_ID,
        B.TYPE
      FROM
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C
      WHERE B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START >= P_YEAR_START
        AND C.YEAR_END <= P_YEAR_END
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.BLOCK_ID = P_BLOCK_ID;
    CURSOR ASSET_COUNT_CUR1(P_BLOCK_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        JAI_FA_AST_BLOCKS
      WHERE CLOSING_WDV is not null
        AND YEAR_ENDED is not null
        AND BLOCK_ID = P_BLOCK_ID
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR RETIRE_COUNT IS
      SELECT
        COUNT(*)
      FROM
        FA_RETIREMENTS
      WHERE DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR RET_ASSET_BLOCK_CUR IS
      SELECT
        count(*)
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND A.ASSET_ID = B.ASSET_ID
        AND B.BLOCK_ID = C.BLOCK_ID
        AND C.START_DATE between P_YEAR_START
        AND P_YEAR_END;
    CURSOR ASSET_ID_CURSOR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        ASSET_ID
      FROM
        JAI_FA_AST_BLOCK_DTLS
      WHERE BLOCK_ID = P_BLOCK_ID;
    CURSOR OPENING_WDV_ADJ_CUR IS
      SELECT
        RATE,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND OPENING_WDV_ADJ is not null
      OR DEPN_ADJ is not null
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND TO_CHAR(BLOCK_ID) not in (
        SELECT
          BLOCK_ID
        FROM
          JAI_FA_AST_BLOCK_DTLS );
    CURSOR ASSET_ADD_PR_CUR IS
      SELECT
        RATE,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND CLOSING_WDV > 0
        AND TO_CHAR(BLOCK_ID) in (
        SELECT
          BLOCK_ID
        FROM
          JAI_FA_AST_BLOCK_DTLS );
    CURSOR ADJUST_OPEN_CUR(P_RATE IN NUMBER,P_TYPE IN VARCHAR2) IS
      SELECT
        BLOCK_ID,
        OPENING_WDV,
        CLOSING_WDV,
        RATE,
        START_DATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE RATE = P_RATE
        AND TYPE = P_TYPE
        AND START_DATE > P_YEAR_END
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR YEAR_END_CUR(P_START_DATE IN DATE) IS
      SELECT
        YEAR_END
      FROM
        JAI_FA_AST_YEARS
      WHERE YEAR_START = P_START_DATE;
    CURSOR COUNT_DEPN_CUR(P_BLOCK_ID IN NUMBER,P_SLNO IN NUMBER,P_ASSET_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE SLNO > 0
        AND BLOCK_ID = P_BLOCK_ID
        AND SLNO = P_SLNO
        AND UNPLANNED_DEPN = P_ASSET_ID;
    CURSOR UNPLANNED_DEPN_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        UNPLANNED_DEPN
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND SLNO = - 1;
  BEGIN
    LV_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_EXPENSED := 'EXPENSED';
    LV_OWNED := 'OWNED';
    FOR block_ret IN BLOCK_RET_CUR LOOP
      FOR type_rate IN TYPE_RATE_CUR(block_ret.block_id) LOOP
        FOR block_id_new IN BLOCK_ID_CUR_RET(type_rate.type,type_rate.rate) LOOP
          V_DEPRECIATION := NVL(NVL(BLOCK_ID_NEW.OPENING_WDV
                                   ,0) + NVL(BLOCK_ID_NEW.OPENING_WDV_ADJ
                                   ,0)
                               ,0) * (BLOCK_ID_NEW.RATE / 100);
          V_CLOSING_BALANCE := NVL(BLOCK_ID_NEW.OPENING_WDV
                                  ,0) + NVL(BLOCK_ID_NEW.OPENING_WDV_ADJ
                                  ,0) - NVL(V_DEPRECIATION
                                  ,0) - NVL(BLOCK_RET.SALE
                                  ,0) - NVL(BLOCK_ID_NEW.DEPN_ADJ
                                  ,0);
          V_DEPRECIATION := ROUND(V_DEPRECIATION
                                 ,2) + NVL(BLOCK_ID_NEW.DEPN_ADJ
                               ,0);
          V_CLOSING_BALANCE := ROUND(V_CLOSING_BALANCE
                                    ,2);
          OPEN ASSET_COUNT_CUR1(BLOCK_ID_NEW.BLOCK_ID);
          FETCH ASSET_COUNT_CUR1
           INTO V_COUNT2;
          CLOSE ASSET_COUNT_CUR1;
          OPEN UNPLANNED_DEPN_CUR(BLOCK_ID_NEW.BLOCK_ID);
          FETCH UNPLANNED_DEPN_CUR
           INTO V_UNPLANNED_DEPN;
          CLOSE UNPLANNED_DEPN_CUR;
          IF V_CLOSING_BALANCE > 0 THEN
            V_CLOSING_BALANCE := V_CLOSING_BALANCE;
          ELSE
            V_CLOSING_BALANCE := 0;
          END IF;
          IF NVL(V_COUNT2
             ,0) = 0 THEN
            UPDATE
              JAI_FA_AST_BLOCKS
            SET
              CLOSING_WDV = NVL(V_CLOSING_BALANCE
                 ,0) - NVL(BLOCK_ID_NEW.DEPN_ADJ
                 ,0)
              ,YEAR_ENDED = P_YEAR_END
            WHERE BLOCK_ID = BLOCK_ID_NEW.BLOCK_ID;
            SELECT
              JAI_FA_AST_BLOCKS_S.NEXTVAL
            INTO V_BLOCK_ID1
            FROM
              DUAL;
            INSERT INTO JAI_FA_AST_BLOCKS
              (BLOCK_ID
              ,TYPE
              ,RATE
              ,BOOK_TYPE_CODE
              ,OPENING_WDV
              ,START_DATE
              ,CREATION_DATE
              ,CREATED_BY
              ,LAST_UPDATE_DATE
              ,LAST_UPDATE_LOGIN
              ,LAST_UPDATED_BY)
            VALUES   (V_BLOCK_ID1
              ,BLOCK_ID_NEW.TYPE
              ,BLOCK_ID_NEW.RATE
              ,P_BOOK_NAME
              ,NVL(V_CLOSING_BALANCE
                 ,0) - NVL(BLOCK_ID_NEW.DEPN_ADJ
                 ,0)
              ,P_YEAR_END + 1
              ,SYSDATE
              ,UID
              ,SYSDATE
              ,UID
              ,UID);
            INSERT INTO JAI_FA_DEP_BLOCKS
              (BLOCK_DEPN_ID
              ,BLOCK_ID
              ,SLNO
              ,DEPN_OF_ASSETS
              ,YEAR_ENDED
              ,CREATION_DATE
              ,CREATED_BY
              ,LAST_UPDATE_DATE
              ,LAST_UPDATE_LOGIN
              ,LAST_UPDATED_BY)
            VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
              ,BLOCK_ID_NEW.BLOCK_ID
              ,0
              ,V_DEPRECIATION
              ,P_YEAR_END
              ,SYSDATE
              ,UID
              ,SYSDATE
              ,UID
              ,UID);
          ELSE
            UPDATE
              JAI_FA_DEP_BLOCKS
            SET
              DEPN_OF_ASSETS = V_DEPRECIATION
            WHERE BLOCK_ID = BLOCK_ID_NEW.BLOCK_ID
              AND SLNO = 0;
            UPDATE
              JAI_FA_AST_BLOCKS
            SET
              OPENING_WDV = NVL(V_CLOSING_BALANCE
                 ,0) - NVL(V_UNPLANNED_DEPN
                 ,0)
            WHERE START_DATE = P_YEAR_END + 1
              AND TYPE = BLOCK_ID_NEW.TYPE
              AND RATE = BLOCK_ID_NEW.RATE;
            UPDATE
              JAI_FA_AST_BLOCKS
            SET
              CLOSING_WDV = NVL(V_CLOSING_BALANCE
                 ,0) - NVL(V_UNPLANNED_DEPN
                 ,0)
              ,YEAR_ENDED = P_YEAR_END
            WHERE BLOCK_ID = BLOCK_ID_NEW.BLOCK_ID;
            IF BLOCK_ID_NEW.DEPN_ADJ IS NOT NULL THEN
              UPDATE
                JAI_FA_DEP_BLOCKS
              SET
                UNPLANNED_DEPN = BLOCK_ID_NEW.DEPN_ADJ
              WHERE BLOCK_ID = BLOCK_ID_NEW.BLOCK_ID
                AND SLNO = 0;
            END IF;
          END IF;
        END LOOP;
      END LOOP;
    END LOOP;
  END RETIRE;

  PROCEDURE RUN_DEP(P_YEAR_START IN DATE
                   ,P_YEAR_END IN DATE
                   ,P_BOOK_NAME IN VARCHAR2) IS
    LV_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_EXPENSED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_OWNED_LEASED FA_ADDITIONS.OWNED_LEASED%TYPE;
    LV_STATUS FA_RETIREMENTS.STATUS%TYPE;
    V_C NUMBER := 0;
    K NUMBER := 0;
    I NUMBER := 0;
    V_DEPR_VAL NUMBER;
    V_COUNT1 NUMBER;
    V_COUNTER NUMBER;
    V_ASSET_ID NUMBER;
    V_OWNED_LEASED VARCHAR2(15);
    V_COST NUMBER;
    V_SLNO NUMBER;
    V_START_DATE DATE;
    V_END_DATE DATE;
    V_RATE NUMBER;
    V_OPENING_BALANCE NUMBER;
    V_BLOCK_ID NUMBER;
    T_BLOCK_ID NUMBER;
    C_BLOCK_ID NUMBER;
    V_PROCEEDS_OF_SALE NUMBER;
    V_AMOUNT NUMBER;
    V_BLOCK_RATE NUMBER;
    V_EXEMPT_UPTO NUMBER;
    V_COST_LESS NUMBER;
    V_AMOUNT1 NUMBER;
    V_CLOSING NUMBER;
    V_MORE_AMOUNT NUMBER;
    V_MORE_AMOUNT1 NUMBER;
    V_LESS_AMOUNT NUMBER;
    V_TYPE JAI_FA_AST_BLOCKS.TYPE%TYPE;
    V_LEFT_AMOUNT NUMBER;
    V_LEFT_BLOCK_ID NUMBER;
    V_NEG_DEP NUMBER;
    V_ASSET_COUNT NUMBER;
    V_RETIRE_COUNT1 NUMBER;
    V_ORIGINAL_COUNT NUMBER;
    V_OPENING_WDV NUMBER;
    V_PERIOD_RATE NUMBER;
    V_BLOCK_ID1 NUMBER;
    V_DEPRECIATION NUMBER;
    V_CLOSING_BALANCE NUMBER;
    V_OPENING_WDV1 NUMBER;
    V_COUNT NUMBER;
    V_AQUISATION_DATE DATE;
    V_COUNT2 NUMBER;
    V_DATE_PLACED_IN_SERVICE DATE;
    V_RETIRE_COUNT NUMBER;
    V_BLOCK_ID2 NUMBER;
    V_CURRENT_UNITS NUMBER;
    V_CLOSING1 NUMBER;
    V_DEPRECIATION_COST NUMBER;
    V_DEPRECIATION_COST1 NUMBER;
    V_OLD_CLOSING_WDV NUMBER;
    V_OPENING_WDV_ADJ NUMBER;
    V_BLOCK_HISTORY_ID NUMBER;
    V_DEPN_ADJ NUMBER;
    V_YEAR_END DATE;
    V_PREV_CLOSING_BALANCE NUMBER;
    V_DEPN_SLNO NUMBER;
    V_SERIAL_NUM1 NUMBER;
    V_DEPN_AMOUNT NUMBER := 0;
    V_FLAG BOOLEAN := FALSE;
    V_CLOSING_BLOCK_ID NUMBER;
    V_UNPLANNED_DEPN NUMBER;
    V_RETIRED NUMBER;
    V_RETIRED1 NUMBER;
    LN_TRANSACTION_HEADER_ID_IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE;
    V_NO_ASSETS VARCHAR2(3);
    CURSOR ASSET_BLOCK_CUR IS
      SELECT
        DISTINCT
        A.ASSET_ID,
        B.BLOCK_ID,
        B.OPENING_WDV,
        B.RATE BLOCK_RATE,
        C.SLNO,
        C.START_DATE,
        C.END_DATE,
        C.RATE PERIOD_RATE,
        C.EXEMPT_UPTO,
        NVL(E.DATE_OF_ACQUISITION
           ,B.START_DATE) AQUISATION_DATE,
        D.DATE_PLACED_IN_SERVICE,
        A.CURRENT_UNITS
      FROM
        FA_ADDITIONS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C,
        FA_BOOKS D,
        JAI_FA_AST_BLOCK_DTLS E
      WHERE A.OWNED_LEASED = LV_OWNED_LEASED
        AND ( ( A.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR A.ASSET_TYPE = LV_EXPENSED )
        AND A.ASSET_ID = D.ASSET_ID
        AND A.ASSET_ID = E.ASSET_ID
        AND E.DATE_OF_ACQUISITION BETWEEN C.START_DATE
        AND C.END_DATE
        AND B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START = P_YEAR_START
        AND C.YEAR_END = P_YEAR_END
        AND E.BLOCK_ID = B.BLOCK_ID
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND D.DATE_INEFFECTIVE IS null
        AND D.TRANSACTION_HEADER_ID_OUT IS null;
    CURSOR BLOCK_ID_CUR IS
      SELECT
        BLOCK_ID,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID NOT IN (
        SELECT
          BLOCK_ID
        FROM
          JAI_FA_AST_BLOCK_DTLS
        WHERE DATE_OF_ACQUISITION BETWEEN P_YEAR_START
          AND P_YEAR_END )
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR CLOSING_BALANCE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        B.OPENING_WDV,
        B.OPENING_WDV_ADJ,
        B.DEPN_ADJ,
        B.RATE BLOCK_RATE,
        B.BLOCK_ID,
        B.TYPE
      FROM
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C
      WHERE B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START >= P_YEAR_START
        AND C.YEAR_END <= P_YEAR_END
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.BLOCK_ID = P_BLOCK_ID;
    CURSOR RET_CAL(P_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(A.PROCEEDS_OF_SALE - A.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C,
        FA_BOOKS D
      WHERE A.ASSET_ID = B.ASSET_ID
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND D.ASSET_ID = B.ASSET_ID
        AND C.BLOCK_ID = B.BLOCK_ID
        AND A.STATUS = LV_STATUS
        AND C.TYPE = P_TYPE
        AND A.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND A.RETIREMENT_ID = D.RETIREMENT_ID
        AND D.BOOK_TYPE_CODE = C.BOOK_TYPE_CODE
        AND C.BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR BLOCK_RET_CUR(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        JAI_FA_AST_BLOCK_DTLS B,
        FA_RETIREMENTS C
      WHERE A.BLOCK_ID = B.BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = LV_STATUS
        AND A.TYPE = P_BLOCK_TYPE
        AND C.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR FA_RETIREMENTS_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        SUM(NVL(A.PROCEEDS_OF_SALE
               ,0)) SALE
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.ASSET_ID = B.ASSET_ID
        AND B.ASSET_TYPE IN ( LV_CAPITALIZED , LV_EXPENSED )
        AND A.STATUS = LV_STATUS
        AND B.BLOCK_ID = P_BLOCK_ID
        AND B.BLOCK_ID = C.BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND A.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END
      ORDER BY
        B.BLOCK_ID;
    CURSOR COST_LESS_EXEMPT_UPTO_CUR(P_ASSET_ID IN NUMBER,P_START_DATE IN DATE,P_END_DATE IN DATE,P_EXEMPT_UPTO IN NUMBER,P_BLOCK_ID IN NUMBER,CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE) IS
      SELECT
        A.COST COSTING,
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE
      FROM
        FA_BOOKS A,
        FA_ADDITIONS B,
        JAI_FA_AST_BLOCK_DTLS C
      WHERE A.ASSET_ID = P_ASSET_ID
        AND A.ASSET_ID = C.ASSET_ID
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND A.ASSET_ID = B.ASSET_ID
        AND A.TRANSACTION_HEADER_ID_IN = CP_TRANSACTION_HEADER_ID_IN
        AND C.BLOCK_ID = TO_CHAR(P_BLOCK_ID)
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND C.DATE_OF_ACQUISITION BETWEEN P_START_DATE
        AND P_END_DATE
        AND ( A.COST / B.CURRENT_UNITS ) <= NVL(P_EXEMPT_UPTO
         ,0);
    CURSOR COST_MORE_EXEMPT_UPTO_CUR(P_ASSET_ID IN NUMBER,P_START_DATE IN DATE,P_END_DATE IN DATE,P_EXEMPT_UPTO IN NUMBER,P_BLOCK_ID IN NUMBER,CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE) IS
      SELECT
        A.COST COSTING,
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE
      FROM
        FA_BOOKS A,
        FA_ADDITIONS B,
        JAI_FA_AST_BLOCK_DTLS C
      WHERE A.ASSET_ID = P_ASSET_ID
        AND A.ASSET_ID = C.ASSET_ID
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND A.ASSET_ID = B.ASSET_ID
        AND A.TRANSACTION_HEADER_ID_IN = CP_TRANSACTION_HEADER_ID_IN
        AND C.BLOCK_ID = TO_CHAR(P_BLOCK_ID)
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND C.DATE_OF_ACQUISITION BETWEEN P_START_DATE
        AND P_END_DATE
        AND ( A.COST / B.CURRENT_UNITS ) > NVL(P_EXEMPT_UPTO
         ,0);
    EXEMPT COST_MORE_EXEMPT_UPTO_CUR%ROWTYPE;
    CURSOR TEMP_TAB IS
      SELECT
        BLOCK_ID BLOCKID,
        SUM(DEPN_OF_ASSETS) ASSETS,
        SUM(TOTAL_BALANCE) BALANCE,
        SUM(SLNO) COST,
        SUM(FULL_EXEMPT) COST_FULL,
        BLOCK_ID
      FROM
        JAI_FA_DEP_BLOCKS_T
      GROUP BY
        BLOCK_ID;
    CURSOR TYPE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        TYPE,
        RATE,
        OPENING_WDV,
        OPENING_WDV_ADJ,
        DEPN_ADJ
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR LEFT_AMOUNT(P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(EXEMPT_AMOUNT) L_AMOUNT,
        BLOCK_ID
      FROM
        JAI_FA_EXEMPTIONS
      WHERE BLOCK_ID = P_BLOCK_ID
      GROUP BY
        BLOCK_ID;
    CURSOR RETIRE_ASSET_CUR(P_ASSET_ID IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        A.UNITS,
        TO_NUMBER(B.BLOCK_ID)
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B
      WHERE A.DATE_RETIRED <= P_YEAR_END
        AND A.ASSET_ID = B.ASSET_ID
        AND A.STATUS = LV_STATUS
        AND A.ASSET_ID = P_ASSET_ID
        AND B.BLOCK_ID = P_BLOCK_ID;
    CURSOR ASSET_COUNT_CUR(P_ASSET_ID IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        H.UNITS,
        H.ASSET_ID
      FROM
        FA_ASSET_HISTORY H,
        JAI_FA_AST_BLOCK_DTLS A
      WHERE H.TRANSACTION_HEADER_ID_IN IN (
        SELECT
          MIN(TRANSACTION_HEADER_ID_IN)
        FROM
          FA_ASSET_HISTORY
        GROUP BY
          ASSET_ID )
        AND A.ASSET_ID = H.ASSET_ID
        AND A.BLOCK_ID = P_BLOCK_ID
        AND A.ASSET_ID = P_ASSET_ID;
    CURSOR COUNT_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        FA_ADDITIONS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C,
        FA_BOOKS D,
        JAI_FA_AST_BLOCK_DTLS E
      WHERE A.OWNED_LEASED = LV_OWNED_LEASED
        AND ( ( A.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR A.ASSET_TYPE = LV_EXPENSED )
        AND NVL(A.ASSET_ID
         ,0) = NVL(D.ASSET_ID
         ,0)
        AND NVL(A.ASSET_ID
         ,0) = E.ASSET_ID
        AND E.DATE_OF_ACQUISITION BETWEEN C.START_DATE
        AND C.END_DATE
        AND B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START = P_YEAR_START
        AND C.YEAR_END = P_YEAR_END
        AND E.BLOCK_ID = B.BLOCK_ID
        AND B.BLOCK_ID = P_BLOCK_ID
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND D.BOOK_TYPE_CODE = B.BOOK_TYPE_CODE
        AND B.CLOSING_WDV IS NOT NULL
        AND B.YEAR_ENDED IS NOT NULL
        AND D.DATE_INEFFECTIVE IS NULL
        AND D.TRANSACTION_HEADER_ID_OUT IS NULL
      ORDER BY
        1;
    CURSOR ASSET_COUNT_CUR1(P_BLOCK_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        JAI_FA_AST_BLOCKS
      WHERE CLOSING_WDV IS not null
        AND YEAR_ENDED IS not null
        AND BLOCK_ID = P_BLOCK_ID
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR RETIRE_COUNT IS
      SELECT
        count(*)
      FROM
        FA_RETIREMENTS
      WHERE DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR RET_ASSET_BLOCK_CUR IS
      SELECT
        COUNT(*)
      FROM
        FA_RETIREMENTS A,
        JAI_FA_AST_BLOCK_DTLS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND A.ASSET_ID = B.ASSET_ID
        AND B.BLOCK_ID = C.BLOCK_ID
        AND C.START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR ASSET_ID_CURSOR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        ASSET_ID
      FROM
        JAI_FA_AST_BLOCK_DTLS
      WHERE BLOCK_ID = P_BLOCK_ID;
    CURSOR OPENING_WDV_ADJ_CUR IS
      SELECT
        RATE,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND NVL(OPENING_WDV_ADJ
         ,DEPN_ADJ) IS NOT NULL
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR ASSET_ADD_PR_CUR IS
      SELECT
        JABOA.RATE,
        JABOA.TYPE
      FROM
        JAI_FA_AST_BLOCKS JABOA,
        JAI_FA_AST_BLOCK_DTLS JBA
      WHERE JABOA.START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND JABOA.BOOK_TYPE_CODE = P_BOOK_NAME
        AND JABOA.CLOSING_WDV > 0
        AND JABOA.BLOCK_ID = JBA.BLOCK_ID;
    CURSOR ADJUST_OPEN_CUR(P_RATE IN NUMBER,P_TYPE IN VARCHAR2) IS
      SELECT
        BLOCK_ID,
        OPENING_WDV,
        CLOSING_WDV,
        RATE,
        START_DATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE RATE = P_RATE
        AND TYPE = P_TYPE
        AND START_DATE > P_YEAR_END
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR YEAR_END_CUR(P_START_DATE IN DATE) IS
      SELECT
        YEAR_END
      FROM
        JAI_FA_AST_YEARS
      WHERE YEAR_START = P_START_DATE;
    CURSOR COUNT_DEPN_CUR(P_BLOCK_ID IN NUMBER,P_SLNO IN NUMBER,P_ASSET_ID IN NUMBER) IS
      SELECT
        COUNT(*)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE SLNO > 0
        AND BLOCK_ID = P_BLOCK_ID
        AND SLNO = P_SLNO
        AND UNPLANNED_DEPN = P_ASSET_ID;
    CURSOR UNPLANNED_DEPN_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        UNPLANNED_DEPN
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND SLNO = - 1;
    CURSOR COUNTER_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        COUNT(*)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND SLNO = 0;
  BEGIN
    LV_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_EXPENSED := 'EXPENSED';
    LV_OWNED_LEASED := 'OWNED';
    LV_STATUS := 'PROCESSED';
    OPEN RETIRE_COUNT;
    FETCH RETIRE_COUNT
     INTO V_COUNTER;
    CLOSE RETIRE_COUNT;
    /*SRW.MESSAGE(1000
               ,'1 RETIRE_COUNT ' || TO_CHAR(V_COUNTER))*/NULL;
    BEGIN
      /*SRW.MESSAGE(1001
                 ,'1.1 Before AsSET block Cur ' || TO_CHAR(V_COUNTER))*/NULL;
      OPEN RET_ASSET_BLOCK_CUR;
      FETCH RET_ASSET_BLOCK_CUR
       INTO V_RETIRE_COUNT1;
      CLOSE RET_ASSET_BLOCK_CUR;
      /*SRW.MESSAGE(1002
                 ,'1.2 After AsSET block Cur ' || TO_CHAR(V_COUNTER))*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1003
                   ,'1.3 In Message FIRST OTHERS ' || SQLERRM)*/NULL;
    END;
    /*SRW.MESSAGE(1004
               ,'2 ret_asset_block_cur -> ' || TO_CHAR(V_RETIRE_COUNT1))*/NULL;
    OPEN ASSET_BLOCK_CUR;
    V_COUNTER := 0;
    LOOP
      V_C := V_C + 1;
      EXEMPT := NULL;
      V_COST := NULL;
      V_COUNT := ASSET_BLOCK_CUR%ROWCOUNT;
      /*SRW.MESSAGE(1006
                 ,'2.1 v_count, v_counter -> ' || TO_CHAR(V_COUNT) || ', ' || V_C)*/NULL;
      FETCH ASSET_BLOCK_CUR
       INTO V_ASSET_ID,V_BLOCK_ID,V_OPENING_WDV,V_BLOCK_RATE,V_SLNO,V_START_DATE,V_END_DATE,V_PERIOD_RATE,V_EXEMPT_UPTO,V_AQUISATION_DATE,V_DATE_PLACED_IN_SERVICE,V_CURRENT_UNITS;
      NULL;
      IF ASSET_BLOCK_CUR%NOTFOUND THEN
        /*SRW.MESSAGE(1006
                   ,'2.1B No assets found in fa_additions_b')*/NULL;
        FOR block_id IN BLOCK_ID_CUR LOOP
        NULL;
          FOR closing IN CLOSING_BALANCE_CUR(block_id.block_id) LOOP
            NULL;
            V_RETIRED1 := NULL;
            /*SRW.MESSAGE(1007
                       ,'2.2 before ret Cal')*/NULL;
            OPEN RET_CAL(BLOCK_ID.TYPE);
            FETCH RET_CAL
             INTO V_RETIRED1;
            CLOSE RET_CAL;
            /*SRW.MESSAGE(10070
                       ,'2.21 value of v_retired1 is' || V_RETIRED1)*/NULL;
            V_DEPRECIATION := NVL(NVL(CLOSING.OPENING_WDV
                                     ,0) + NVL(CLOSING.OPENING_WDV_ADJ
                                     ,0) - NVL(V_RETIRED1
                                     ,0)
                                 ,0) * (CLOSING.BLOCK_RATE / 100);
            /*SRW.MESSAGE(1008
                       ,'2.3 v_depreciation -> ' || TO_CHAR(V_DEPRECIATION))*/NULL;
            V_CLOSING_BALANCE := NVL(NVL(CLOSING.OPENING_WDV
                                        ,0) + NVL(CLOSING.OPENING_WDV_ADJ
                                        ,0)
                                    ,0) - NVL(V_DEPRECIATION
                                    ,0) - NVL(V_RETIRED1
                                    ,0);
            /*SRW.MESSAGE(1009
                       ,'2.4 v_closing_balance -> ' || TO_CHAR(V_CLOSING_BALANCE))*/NULL;
            V_DEPRECIATION := ROUND(V_DEPRECIATION
                                   ,2);
            /*SRW.MESSAGE(1010
                       ,'2.5 v_depreciation after rounding-> ' || TO_CHAR(V_DEPRECIATION))*/NULL;
            V_CLOSING_BALANCE := ROUND(V_CLOSING_BALANCE
                                      ,2);
            /*SRW.MESSAGE(1011
                       ,'2.6 v_closing_balance after rounding-> ' || TO_CHAR(V_CLOSING_BALANCE) || ' value of v_depreciation after rounding is ' || V_DEPRECIATION)*/NULL;
            IF V_CLOSING_BALANCE > 0 THEN
              V_CLOSING_BALANCE := V_CLOSING_BALANCE;
            ELSE
              V_CLOSING_BALANCE := 0;
            END IF;
            V_COUNT2 := NULL;
            OPEN ASSET_COUNT_CUR1(CLOSING.BLOCK_ID);
            FETCH ASSET_COUNT_CUR1
             INTO V_COUNT2;
            CLOSE ASSET_COUNT_CUR1;
            /*SRW.MESSAGE(1275
                       ,'2.7 v_count2 -> ' || V_COUNT2 || ', owa -> ' || NVL(CLOSING.OPENING_WDV_ADJ
                          ,-1) || ', depna -> ' || NVL(CLOSING.DEPN_ADJ
                          ,-1))*/NULL;
            IF CLOSING.OPENING_WDV_ADJ IS NOT NULL OR CLOSING.DEPN_ADJ IS NOT NULL THEN
             NULL;
              DEPRECIATION1(CLOSING.BLOCK_ID
                           ,CLOSING.OPENING_WDV
                           ,V_CLOSING_BALANCE
                           ,CLOSING.OPENING_WDV_ADJ
                           ,CLOSING.DEPN_ADJ
                           ,P_YEAR_END);
            END IF;
            V_UNPLANNED_DEPN := NULL;
            OPEN UNPLANNED_DEPN_CUR(CLOSING.BLOCK_ID);
            FETCH UNPLANNED_DEPN_CUR
             INTO V_UNPLANNED_DEPN;
            CLOSE UNPLANNED_DEPN_CUR;
            /*SRW.MESSAGE(1275
                       ,'2.9 v_UNPLANNED_DEPN -> ' || V_UNPLANNED_DEPN)*/NULL;
            IF NVL(V_COUNT2
               ,0) = 0 THEN
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                CLOSING_WDV = NVL(V_CLOSING_BALANCE
                   ,0) - NVL(CLOSING.DEPN_ADJ
                   ,0)
                ,YEAR_ENDED = P_YEAR_END
              WHERE BLOCK_ID = CLOSING.BLOCK_ID;
              SELECT
                JAI_FA_AST_BLOCKS_S.NEXTVAL
              INTO V_BLOCK_ID1
              FROM
                DUAL;
              /*SRW.MESSAGE(1012
                         ,'2.10 closing.type -> ' || CLOSING.TYPE)*/NULL;
              INSERT INTO JAI_FA_AST_BLOCKS
                (BLOCK_ID
                ,TYPE
                ,RATE
                ,BOOK_TYPE_CODE
                ,OPENING_WDV
                ,START_DATE
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY)
              VALUES   (V_BLOCK_ID1
                ,CLOSING.TYPE
                ,CLOSING.BLOCK_RATE
                ,P_BOOK_NAME
                ,NVL(V_CLOSING_BALANCE
                   ,0) - NVL(CLOSING.DEPN_ADJ
                   ,0)
                ,P_YEAR_END + 1
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID);
              /*SRW.MESSAGE(1014
                         ,'2.11 INSERT INTO JAI_FA_AST_BLOCKS')*/NULL;
              INSERT INTO JAI_FA_DEP_BLOCKS
                (BLOCK_DEPN_ID
                ,BLOCK_ID
                ,SLNO
                ,DEPN_OF_ASSETS
                ,YEAR_ENDED
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY
                ,UNPLANNED_DEPN)
              VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
                ,CLOSING.BLOCK_ID
                ,0
                ,V_DEPRECIATION
                ,P_YEAR_END
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID
                ,CLOSING.DEPN_ADJ);
              /*SRW.MESSAGE(1015
                         ,'UPDATE INTO JAI_FA_DEP_BLOCKS')*/NULL;
            ELSE
              UPDATE
                JAI_FA_DEP_BLOCKS
              SET
                DEPN_OF_ASSETS = V_DEPRECIATION
              WHERE BLOCK_ID = CLOSING.BLOCK_ID
                AND SLNO = 0;
              /*SRW.MESSAGE(1016
                         ,'2.12 update JAI_FA_DEP_BLOCKS ')*/NULL;
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                OPENING_WDV = NVL(V_CLOSING_BALANCE
                   ,0) - NVL(V_UNPLANNED_DEPN
                   ,0)
              WHERE START_DATE = P_YEAR_END + 1
                AND TYPE = CLOSING.TYPE
                AND BOOK_TYPE_CODE = P_BOOK_NAME;
              /*SRW.MESSAGE(1017
                         ,'2.13 Update opening wdv JAI_FA_AST_BLOCKS -> ' || SQL%ROWCOUNT)*/NULL;
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                CLOSING_WDV = NVL(V_CLOSING_BALANCE
                   ,0) - NVL(V_UNPLANNED_DEPN
                   ,0)
                ,YEAR_ENDED = P_YEAR_END
              WHERE BLOCK_ID = CLOSING.BLOCK_ID;
              /*SRW.MESSAGE(1017
                         ,'2.14 Update closing wdv JAI_FA_AST_BLOCKS -> ' || SQL%ROWCOUNT)*/NULL;
              IF CLOSING.DEPN_ADJ IS NOT NULL THEN
                /*SRW.MESSAGE(1018
                           ,'2.15 IF closing.depn_adj IS NOT NULL THEN')*/NULL;
                UPDATE
                  JAI_FA_DEP_BLOCKS
                SET
                  UNPLANNED_DEPN = CLOSING.DEPN_ADJ
                WHERE BLOCK_ID = CLOSING.BLOCK_ID
                  AND SLNO = 0;
              END IF;
            END IF;
          END LOOP;
        END LOOP;
        CLOSE ASSET_BLOCK_CUR;
        EXIT;
        /*SRW.MESSAGE(1018
                   ,'2.16 Before EXIT statement')*/NULL;
      ELSE
        /*SRW.MESSAGE(1019
                   ,'3.0 Assets found for block_id ' || V_BLOCK_ID)*/NULL;
        OPEN COUNT_DEPN_CUR(V_BLOCK_ID,V_SLNO,V_ASSET_ID);
        FETCH COUNT_DEPN_CUR
         INTO V_DEPN_SLNO;
        CLOSE COUNT_DEPN_CUR;
        /*SRW.MESSAGE(1019
                   ,'3.1 entered v_depn_slno -> ' || V_DEPN_SLNO)*/NULL;
        LN_TRANSACTION_HEADER_ID_IN := GET_TRANSACTION_HEADER_ID(P_BOOK_NAME => P_BOOK_NAME
                                                                ,P_ASSET_ID => V_ASSET_ID
                                                                ,P_BLOCK_ID => V_BLOCK_ID);
        IF LN_TRANSACTION_HEADER_ID_IN IS NOT NULL THEN
          /*SRW.MESSAGE(1019
                     ,'3.1.1 actual transaction_header_id found -> ' || LN_TRANSACTION_HEADER_ID_IN)*/NULL;
          OPEN COST_MORE_EXEMPT_UPTO_CUR(V_ASSET_ID,V_START_DATE,V_END_DATE,NVL(V_EXEMPT_UPTO
             ,0),V_BLOCK_ID,LN_TRANSACTION_HEADER_ID_IN);
          FETCH COST_MORE_EXEMPT_UPTO_CUR
           INTO EXEMPT;
          CLOSE COST_MORE_EXEMPT_UPTO_CUR;
          V_COST := EXEMPT.COSTING;
          /*SRW.MESSAGE(1019
                     ,'3.1.2 v_cost is -> ' || V_COST)*/NULL;
        ELSE
          /*SRW.MESSAGE(1019
                     ,'3.1.3 ACTUAL TRANSACTION_HEADER_ID NOT FOUND  CLOSING BALANCE WOULD NOT GET POPULATED')*/NULL;
          V_COST := 0;
        END IF;
        LN_TRANSACTION_HEADER_ID_IN := NULL;
        /*SRW.MESSAGE(1020
                   ,'3.2 cost_more_exempt_upto_cur, v_depn_slno -> ' || V_DEPN_SLNO || ', v_serial_num1 -> ' || V_SERIAL_NUM1)*/NULL;
        IF V_DEPN_SLNO = 0 THEN
          IF V_SERIAL_NUM1 IS NULL THEN
            V_SERIAL_NUM1 := V_SLNO;
            I := 1;
            V_DEPN_AMOUNT := 0;
          ELSIF V_SERIAL_NUM1 <> V_SLNO THEN
            I := 0;
            /*SRW.MESSAGE(1022
                       ,'3.3 inserting INTO JAI_FA_DEP_BLOCKS, v_block_id -> ' || V_BLOCK_ID || ', v_depn_amount -> ' || NVL(V_DEPN_AMOUNT
                          ,0))*/NULL;
            INSERT INTO JAI_FA_DEP_BLOCKS
              (BLOCK_DEPN_ID
              ,BLOCK_ID
              ,SLNO
              ,DEPN_OF_ASSETS
              ,YEAR_ENDED
              ,CREATION_DATE
              ,CREATED_BY
              ,LAST_UPDATE_DATE
              ,LAST_UPDATE_LOGIN
              ,LAST_UPDATED_BY
              ,UNPLANNED_DEPN)
            VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
              ,V_BLOCK_ID
              ,V_SERIAL_NUM1
              ,NVL(V_DEPN_AMOUNT
                 ,0)
              ,P_YEAR_END
              ,SYSDATE
              ,UID
              ,SYSDATE
              ,UID
              ,UID
              ,V_ASSET_ID);
            V_DEPN_AMOUNT := 0;
            V_FLAG := TRUE;
            V_SERIAL_NUM1 := V_SLNO;
          END IF;
        END IF;
        NULL;
        IF NVL(V_AQUISATION_DATE
           ,SYSDATE) >= NVL(V_START_DATE
           ,SYSDATE) AND NVL(V_AQUISATION_DATE
           ,SYSDATE) <= NVL(V_END_DATE
           ,SYSDATE) THEN
          IF V_PERIOD_RATE = 100 THEN
            V_MORE_AMOUNT1 := NVL(V_COST
                                 ,0) * NVL(V_BLOCK_RATE
                                 ,0) / 100;
          END IF;
        END IF;
        IF NVL(V_AQUISATION_DATE
           ,V_DATE_PLACED_IN_SERVICE) <= NVL(P_YEAR_START
           ,SYSDATE) THEN
          V_MORE_AMOUNT := NVL(V_COST
                              ,0) * NVL(V_BLOCK_RATE
                              ,0) / 100;
        END IF;
        IF NVL(V_AQUISATION_DATE
           ,SYSDATE) >= NVL(V_START_DATE
           ,SYSDATE) AND NVL(V_AQUISATION_DATE
           ,SYSDATE) <= NVL(V_END_DATE
           ,SYSDATE) THEN
          IF NVL(V_DATE_PLACED_IN_SERVICE
             ,SYSDATE) >= NVL(P_YEAR_START
             ,SYSDATE) AND NVL(V_DATE_PLACED_IN_SERVICE
             ,SYSDATE) <= NVL(P_YEAR_END
             ,SYSDATE) THEN
            IF V_PERIOD_RATE <> 100 THEN
              V_MORE_AMOUNT := NVL((NVL(V_COST
                                      ,0) * NVL(V_BLOCK_RATE
                                      ,0) / 100 * NVL(V_PERIOD_RATE
                                      ,0) / 100)
                                  ,0);
            END IF;
          END IF;
        END IF;
        IF V_AQUISATION_DATE IS NULL AND (NVL(V_DATE_PLACED_IN_SERVICE
           ,SYSDATE) >= NVL(V_START_DATE
           ,SYSDATE) AND NVL(V_DATE_PLACED_IN_SERVICE
           ,SYSDATE) <= NVL(V_END_DATE
           ,SYSDATE)) THEN
          /*SRW.MESSAGE(1006
                     ,'3.5 v_aquisation_date IS NULL, v_period_rate -> ' || V_PERIOD_RATE)*/NULL;
          IF V_PERIOD_RATE <> 100 THEN
            V_MORE_AMOUNT := NVL((NVL(V_COST
                                    ,0) * NVL(V_BLOCK_RATE
                                    ,0) / 100 * NVL(V_PERIOD_RATE
                                    ,0) / 100)
                                ,0);
          END IF;
        END IF;
        IF NVL(V_AQUISATION_DATE
           ,V_DATE_PLACED_IN_SERVICE) >= NVL(V_START_DATE
           ,SYSDATE) AND NVL(V_AQUISATION_DATE
           ,V_DATE_PLACED_IN_SERVICE) <= NVL(V_END_DATE
           ,SYSDATE) THEN
          /*SRW.MESSAGE(1006
                     ,'3.6  v_period_rate -> ' || V_PERIOD_RATE)*/NULL;
          IF V_PERIOD_RATE = 0 THEN
            V_MORE_AMOUNT := 0;
          END IF;
        END IF;
        IF EXEMPT.ASSET_ID = V_ASSET_ID THEN
          /*SRW.MESSAGE(1275
                     ,'3.7  v_period_rate -> ' || V_PERIOD_RATE || ', v_asset_id -> ' || V_ASSET_ID)*/NULL;
          IF V_PERIOD_RATE = 100 THEN
            V_MORE_AMOUNT := NVL(V_MORE_AMOUNT1
                                ,0);
          ELSE
            V_MORE_AMOUNT := NVL(V_MORE_AMOUNT
                                ,0);
          END IF;
        END IF;
        V_DEPN_AMOUNT := V_DEPN_AMOUNT + V_MORE_AMOUNT;
        V_CLOSING_BALANCE := NVL(V_COST
                                ,0) - NVL(V_MORE_AMOUNT
                                ,0);
        /*SRW.MESSAGE(1275
                   ,'3.8  v_depn_amount -> ' || V_DEPN_AMOUNT || ', v_closing_balance -> ' || V_CLOSING_BALANCE || ', v_cost -> ' || V_COST || ', v_more_amount -> ' || V_MORE_AMOUNT)*/NULL;
        /*SRW.MESSAGE(1275
                   ,'3.81 Before insert into JAI_FA_DEP_BLOCKS_T block_id ' || V_BLOCK_ID || ' , ' || 'slno' || ROUND(NVL(V_COST
                            ,0)
                        ,2) || ' , ' || 'depn_of_assets ' || ROUND(NVL(V_MORE_AMOUNT
                            ,0)
                        ,2) || ' , ' || 'year_ended    ' || P_YEAR_END || ' , ' || 'full_exempt   ' || NVL(V_MORE_AMOUNT1
                      ,0) || ' , ' || 'total_balance ' || ROUND(NVL(V_CLOSING_BALANCE
                            ,0)
                        ,2) || ' , ' || 'unplanned_depn ' || V_SLNO || ' , ' || 'asset_id      ' || V_ASSET_ID)*/NULL;
        INSERT INTO JAI_FA_DEP_BLOCKS_T
          (BLOCK_ID
          ,SLNO
          ,DEPN_OF_ASSETS
          ,YEAR_ENDED
          ,FULL_EXEMPT
          ,CREATION_DATE
          ,CREATED_BY
          ,LAST_UPDATE_DATE
          ,LAST_UPDATE_LOGIN
          ,LAST_UPDATED_BY
          ,TOTAL_BALANCE
          ,UNPLANNED_DEPN
          ,ASSET_ID)
        VALUES   (V_BLOCK_ID
          ,ROUND(NVL(V_COST
                   ,0)
               ,2)
          ,ROUND(NVL(V_MORE_AMOUNT
                   ,0)
               ,2)
          ,P_YEAR_END
          ,NVL(V_MORE_AMOUNT1
             ,0)
          ,SYSDATE
          ,UID
          ,SYSDATE
          ,UID
          ,UID
          ,ROUND(NVL(V_CLOSING_BALANCE
                   ,0)
               ,2)
          ,V_SLNO
          ,V_ASSET_ID);
        /*SRW.MESSAGE(1275
                   ,'3.82 After insert into JAI_FA_DEP_BLOCKS_T')*/NULL;
        /*SRW.MESSAGE(1275
                   ,'3.9  v_depn_slno -> ' || V_DEPN_SLNO)*/NULL;
        IF V_DEPN_SLNO = 0 THEN
          IF V_FLAG OR I = 1 THEN
            /*SRW.MESSAGE(1275
                       ,'3.10  v_serial_num1 -> ' || V_SERIAL_NUM1)*/NULL;
            IF V_SERIAL_NUM1 = V_SLNO THEN
              /*SRW.MESSAGE(1275
                         ,'3.11 v_depn_amount -> ' || V_DEPN_AMOUNT)*/NULL;
              INSERT INTO JAI_FA_DEP_BLOCKS
                (BLOCK_DEPN_ID
                ,BLOCK_ID
                ,SLNO
                ,DEPN_OF_ASSETS
                ,YEAR_ENDED
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY
                ,UNPLANNED_DEPN)
              VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
                ,V_BLOCK_ID
                ,V_SERIAL_NUM1
                ,NVL(V_DEPN_AMOUNT
                   ,0)
                ,P_YEAR_END
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID
                ,V_ASSET_ID);
              V_SERIAL_NUM1 := NULL;
              V_DEPN_AMOUNT := 0;
            END IF;
          END IF;
          I := 0;
        END IF;
        /*SRW.MESSAGE(1275
                   ,'4.1 before cost_less_exempt_upto_cur')*/NULL;
        LN_TRANSACTION_HEADER_ID_IN := NULL;
        LN_TRANSACTION_HEADER_ID_IN := GET_TRANSACTION_HEADER_ID(P_BOOK_NAME => P_BOOK_NAME
                                                                ,P_ASSET_ID => V_ASSET_ID
                                                                ,P_BLOCK_ID => V_BLOCK_ID);
        /*SRW.MESSAGE(1019
                   ,'4.1 actual transaction_header_id is -> ' || LN_TRANSACTION_HEADER_ID_IN)*/NULL;
        FOR less_exempt IN COST_LESS_EXEMPT_UPTO_CUR( v_asset_id                   ,
                                                    v_start_date                 ,
                                                    v_end_date                   ,
                                                    nvl(v_exempt_upto,0)         ,
                                                    v_block_id                   ,
                                                    ln_transaction_header_id_in
                                                  )  LOOP
          V_COST_LESS := LESS_EXEMPT.COSTING;
          INSERT INTO JAI_FA_EXEMPTIONS
            (BLOCK_ID
            ,EXEMPT_AMOUNT
            ,FA_EXEMPTION_ID
            ,CREATED_BY
            ,CREATION_DATE
            ,LAST_UPDATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,OBJECT_VERSION_NUMBER)
          VALUES   (V_BLOCK_ID
            ,ROUND(NVL(V_COST_LESS
                     ,0)
                 ,2)
            ,JAI_FA_EXEMPTIONS_S.NEXTVAL
            ,FND_GLOBAL.USER_ID
            ,SYSDATE
            ,FND_GLOBAL.USER_ID
            ,SYSDATE
            ,FND_GLOBAL.LOGIN_ID
            ,NULL);
          /*SRW.MESSAGE(1275
                     ,'4.2  Inserted into JAI_FA_EXEMPTIONS, v_cost_less -> ' || V_COST_LESS || ', v_depn_slno -> ' || V_DEPN_SLNO)*/NULL;
          IF V_DEPN_SLNO = 0 THEN
            /*SRW.MESSAGE(1275
                       ,'4.3  Inserted into JAI_FA_DEP_BLOCKS, V_block_id -> ' || V_BLOCK_ID || ', v_cost_less -> ' || NVL(V_COST_LESS
                          ,0) || ', v_slno -> ' || V_SLNO)*/NULL;
            INSERT INTO JAI_FA_DEP_BLOCKS
              (BLOCK_DEPN_ID
              ,BLOCK_ID
              ,SLNO
              ,DEPN_OF_ASSETS
              ,FULL_EXEMPT
              ,YEAR_ENDED
              ,CREATION_DATE
              ,CREATED_BY
              ,LAST_UPDATE_DATE
              ,LAST_UPDATE_LOGIN
              ,LAST_UPDATED_BY
              ,UNPLANNED_DEPN)
            VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
              ,V_BLOCK_ID
              ,V_SLNO
              ,NVL(V_COST_LESS
                 ,0)
              ,NVL(V_COST_LESS
                 ,0)
              ,P_YEAR_END
              ,SYSDATE
              ,UID
              ,SYSDATE
              ,UID
              ,UID
              ,V_ASSET_ID);
          END IF;
        END LOOP;
        LN_TRANSACTION_HEADER_ID_IN := NULL;
        IF ASSET_BLOCK_CUR%FOUND IS NULL THEN
          CLOSE ASSET_BLOCK_CUR;
          EXIT;
        END IF;
      END IF;
    END LOOP;
    /*SRW.MESSAGE(1275
               ,'5.1  Start of processing tempoprary table JAI_FA_DEP_BLOCKS_T cursor temp_tab')*/NULL;
    FOR temp_rec IN TEMP_TAB LOOP
      V_CLOSING := 0;
      V_CLOSING1 := 0;
      V_CLOSING_BALANCE := 0;
      /*SRW.MESSAGE(1275
                 ,'5.2 V_block_id -> ' || TEMP_REC.BLOCK_ID || ', V_ASSET_ID -> ' || V_ASSET_ID)*/NULL;
      OPEN COUNTER_CUR(TEMP_REC.BLOCK_ID);
      FETCH COUNTER_CUR
       INTO V_COUNTER;
      CLOSE COUNTER_CUR;
      OPEN LEFT_AMOUNT(TEMP_REC.BLOCK_ID);
      FETCH LEFT_AMOUNT
       INTO V_LEFT_AMOUNT,V_LEFT_BLOCK_ID;
      CLOSE LEFT_AMOUNT;
      OPEN ASSET_ID_CURSOR(TEMP_REC.BLOCK_ID);
      FETCH ASSET_ID_CURSOR
       INTO V_ASSET_ID;
      CLOSE ASSET_ID_CURSOR;
      OPEN ASSET_COUNT_CUR(V_ASSET_ID,TEMP_REC.BLOCK_ID);
      FETCH ASSET_COUNT_CUR
       INTO V_ASSET_COUNT,V_BLOCK_ID1;
      CLOSE ASSET_COUNT_CUR;
      OPEN RETIRE_ASSET_CUR(V_ASSET_ID,TEMP_REC.BLOCK_ID);
      FETCH RETIRE_ASSET_CUR
       INTO V_RETIRE_COUNT,V_BLOCK_ID2;
      CLOSE RETIRE_ASSET_CUR;
      OPEN UNPLANNED_DEPN_CUR(TEMP_REC.BLOCK_ID);
      V_UNPLANNED_DEPN := NULL;
      FETCH UNPLANNED_DEPN_CUR
       INTO V_UNPLANNED_DEPN;
      CLOSE UNPLANNED_DEPN_CUR;
      NULL;
      IF V_BLOCK_ID1 = V_BLOCK_ID2 THEN
        V_ORIGINAL_COUNT := NVL(V_ASSET_COUNT
                               ,0) - NVL(V_RETIRE_COUNT
                               ,0);
      ELSE
        V_ORIGINAL_COUNT := NULL;
      END IF;
      IF TEMP_REC.BLOCK_ID = V_LEFT_BLOCK_ID THEN
        V_LEFT_AMOUNT := NVL(V_LEFT_AMOUNT
                            ,0);
      ELSE
        V_LEFT_AMOUNT := 0;
      END IF;
      OPEN COUNT_CUR(TEMP_REC.BLOCK_ID);
      FETCH COUNT_CUR
       INTO V_COUNT1;
      CLOSE COUNT_CUR;
      OPEN TYPE_CUR(TEMP_REC.BLOCK_ID);
      FETCH TYPE_CUR
       INTO V_TYPE,V_BLOCK_RATE,V_OPENING_WDV1,V_OPENING_WDV_ADJ,V_DEPN_ADJ;
      CLOSE TYPE_CUR;
      OPEN FA_RETIREMENTS_CUR(TEMP_REC.BLOCK_ID);
      FETCH FA_RETIREMENTS_CUR
       INTO V_PROCEEDS_OF_SALE;
      CLOSE FA_RETIREMENTS_CUR;
      V_RETIRED := NULL;
      OPEN BLOCK_RET_CUR(V_TYPE);
      FETCH BLOCK_RET_CUR
       INTO V_RETIRED;
      CLOSE BLOCK_RET_CUR;
      V_RETIRED1 := NULL;
      OPEN RET_CAL(V_TYPE);
      FETCH RET_CAL
       INTO V_RETIRED1;
      CLOSE RET_CAL;
      NULL;
      V_DEPR_VAL := TOTALDEPRN(P_BOOK_NAME
                              ,P_YEAR_START
                              ,P_YEAR_END
                              ,TEMP_REC.BLOCK_ID
                              ,V_NO_ASSETS);
      V_AMOUNT1 := NVL(NVL(V_OPENING_WDV1
                          ,0) + NVL(V_OPENING_WDV_ADJ
                          ,0) - NVL(V_RETIRED1
                          ,0)
                      ,0) * NVL(V_BLOCK_RATE
                      ,0) / 100;
      V_CLOSING := NVL(V_OPENING_WDV1
                      ,0) + NVL(TEMP_REC.COST
                      ,0) - NVL(V_RETIRED
                      ,0);
      V_CLOSING1 := NVL(V_OPENING_WDV1
                       ,0) + NVL(TEMP_REC.COST_FULL
                       ,0) - NVL(V_RETIRED
                       ,0);
      V_CLOSING_BALANCE := NVL(V_OPENING_WDV1
                              ,0) + NVL(V_OPENING_WDV_ADJ
                              ,0) + NVL(TEMP_REC.COST
                              ,0) + NVL(V_LEFT_AMOUNT
                              ,0) - NVL(V_LEFT_AMOUNT
                              ,0) - NVL(V_RETIRED
                              ,0) - NVL(V_DEPN_ADJ
                              ,0) - NVL(V_UNPLANNED_DEPN
                              ,0) - V_DEPR_VAL;
      IF NVL(V_DEPR_VAL
         ,0) <= 0 AND V_NO_ASSETS = 'YES' THEN
        V_CLOSING_BALANCE := 0;
      END IF;
      NULL;
      IF V_OPENING_WDV_ADJ IS NOT NULL OR V_DEPN_ADJ IS NOT NULL THEN
      NULL;
        DEPRECIATION1(TEMP_REC.BLOCK_ID
                     ,V_OPENING_WDV1
                     ,V_CLOSING_BALANCE
                     ,V_OPENING_WDV_ADJ
                     ,V_DEPN_ADJ
                     ,P_YEAR_END);
      END IF;
      IF V_AMOUNT1 > 0 THEN
        V_AMOUNT1 := V_AMOUNT1;
      ELSE
        V_AMOUNT1 := 0;
      END IF;
      DECLARE
        CURSOR CUR_GET_VALID_ASSETS(CP_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE) IS
          SELECT
            '1'
          FROM
            JAI_FA_AST_BLOCK_DTLS JBA,
            FA_BOOKS FAB,
            JAI_FA_AST_BLOCKS JABOA
          WHERE JBA.ASSET_ID = FAB.ASSET_ID
            AND ( ( JBA.ASSET_TYPE = 'CAPITALIZED'
            AND FAB.CAPITALIZE_FLAG = 'YES' )
          OR JBA.ASSET_TYPE = 'EXPENSED' )
            AND JBA.DATE_OF_ACQUISITION BETWEEN JABOA.START_DATE
            AND NVL(JABOA.YEAR_ENDED
             ,P_YEAR_END)
            AND FAB.DATE_INEFFECTIVE IS NULL
            AND FAB.TRANSACTION_HEADER_ID_OUT IS NULL
            AND FAB.PERIOD_COUNTER_FULLY_RETIRED IS NULL
            AND JBA.BLOCK_ID = JABOA.BLOCK_ID
            AND JABOA.BOOK_TYPE_CODE = FAB.BOOK_TYPE_CODE
            AND JABOA.BOOK_TYPE_CODE = P_BOOK_NAME
            AND JABOA.TYPE = (
            SELECT
              TYPE
            FROM
              JAI_FA_AST_BLOCKS
            WHERE BLOCK_ID = CP_BLOCK_ID )
            AND ( JABOA.START_DATE <= NVL(P_YEAR_START
             ,JABOA.START_DATE)
          OR JABOA.START_DATE BETWEEN NVL(P_YEAR_START
             ,JABOA.START_DATE)
            AND NVL(P_YEAR_END
             ,JABOA.YEAR_ENDED) );
        CURSOR CUR_GET_ST_OP_BAL(CP_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE) IS
          SELECT
            OPENING_WDV
          FROM
            JAI_FA_AST_BLOCKS JABOA
          WHERE JABOA.BOOK_TYPE_CODE = P_BOOK_NAME
            AND JABOA.TYPE = (
            SELECT
              TYPE
            FROM
              JAI_FA_AST_BLOCKS
            WHERE BLOCK_ID = CP_BLOCK_ID )
          ORDER BY
            START_DATE ASC;
        LV_EXISTS VARCHAR2(1);
        LN_OPENING_WDV JAI_FA_AST_BLOCKS.OPENING_WDV%TYPE;
      BEGIN
        OPEN CUR_GET_VALID_ASSETS(CP_BLOCK_ID => TEMP_REC.BLOCK_ID);
        FETCH CUR_GET_VALID_ASSETS
         INTO LV_EXISTS;
        /*SRW.MESSAGE(1275
                   ,'p_book_name -> ' || P_BOOK_NAME || ',p_year_start -> ' || P_YEAR_START || ',p_year_end -> ' || P_YEAR_END)*/NULL;
        IF CUR_GET_VALID_ASSETS%NOTFOUND THEN
          /*SRW.MESSAGE(1275
                     ,'5.6.1 all assets retired , temp_rec.block_id -> ' || TEMP_REC.BLOCK_ID)*/NULL;
          OPEN CUR_GET_ST_OP_BAL(CP_BLOCK_ID => TEMP_REC.BLOCK_ID);
          FETCH CUR_GET_ST_OP_BAL
           INTO LN_OPENING_WDV;
          CLOSE CUR_GET_ST_OP_BAL;
          /*SRW.MESSAGE(1275
                     ,'5.6.2 value of opening wdv ' || LN_OPENING_WDV)*/NULL;
          IF LN_OPENING_WDV = 0 THEN
            /*SRW.MESSAGE(1275
                       ,'5.6.3 opening wdv for the first period record for the type and book name is 0')*/NULL;
            V_CLOSING_BALANCE := 0;
            V_AMOUNT1 := 0;
          END IF;
        END IF;
        /*SRW.MESSAGE(1275
                   ,'5.6.4 v_closing_balance  ' || V_CLOSING_BALANCE || ' v_amount1 ' || V_AMOUNT1)*/NULL;
        CLOSE CUR_GET_VALID_ASSETS;
      END;
      IF V_CLOSING > 0 THEN
        IF NVL(V_COUNT1
           ,0) = 0 THEN
          UPDATE
            JAI_FA_AST_BLOCKS
          SET
            CLOSING_WDV = NVL(V_CLOSING_BALANCE
               ,0)
            ,YEAR_ENDED = P_YEAR_END
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
          /*SRW.MESSAGE(1275
                     ,'5.7 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
          INSERT INTO JAI_FA_DEP_BLOCKS
            (BLOCK_DEPN_ID
            ,BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,UNPLANNED_DEPN)
          VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
            ,TEMP_REC.BLOCK_ID
            ,0
            ,NVL(V_AMOUNT1
               ,0)
            ,P_YEAR_END
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,V_DEPN_ADJ);
          SELECT
            JAI_FA_AST_BLOCKS_S.NEXTVAL
          INTO V_BLOCK_ID
          FROM
            DUAL;
          NULL;
          INSERT INTO JAI_FA_AST_BLOCKS
            (BLOCK_ID
            ,TYPE
            ,RATE
            ,OPENING_WDV
            ,START_DATE
            ,BOOK_TYPE_CODE
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY)
          VALUES   (V_BLOCK_ID
            ,V_TYPE
            ,V_BLOCK_RATE
            ,NVL(V_CLOSING_BALANCE
               ,0)
            ,P_YEAR_END + 1
            ,P_BOOK_NAME
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID);
        ELSE
          UPDATE
            JAI_FA_AST_BLOCKS
          SET
            CLOSING_WDV = NVL(V_CLOSING_BALANCE
               ,0)
            ,YEAR_ENDED = P_YEAR_END
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
          /*SRW.MESSAGE(1275
                     ,'5.9 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
          UPDATE
            JAI_FA_DEP_BLOCKS
          SET
            DEPN_OF_ASSETS = NVL(V_AMOUNT1
               ,0)
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID
            AND SLNO = 0;
          /*SRW.MESSAGE(1275
                     ,'5.10 After update of JAI_FA_DEP_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
          UPDATE
            JAI_FA_AST_BLOCKS
          SET
            OPENING_WDV = NVL(V_CLOSING_BALANCE
               ,0)
          WHERE START_DATE = P_YEAR_END + 1
            AND TYPE = V_TYPE
            AND BOOK_TYPE_CODE = P_BOOK_NAME;
          K := 1;
          /*SRW.MESSAGE(1275
                     ,'5.11 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
          IF V_DEPN_ADJ IS NOT NULL THEN
            UPDATE
              JAI_FA_DEP_BLOCKS
            SET
              UNPLANNED_DEPN = V_DEPN_ADJ
            WHERE BLOCK_ID = TEMP_REC.BLOCK_ID
              AND SLNO = 0;
            /*SRW.MESSAGE(1275
                       ,'5.12 After update of JAI_FA_DEP_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
          END IF;
        END IF;
      END IF;
      IF V_CLOSING < 0 THEN
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          CLOSING_WDV = 0
          ,YEAR_ENDED = P_YEAR_END
          ,CAPITAL_GAINS = ABS(V_CLOSING)
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        /*SRW.MESSAGE(1275
                   ,'6.1 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
        IF NVL(V_COUNTER
           ,0) = 0 THEN
          /*SRW.MESSAGE(1275
                     ,'6.2  insert into JAI_FA_AST_BLOCKS, temp_rec.block_id -> ' || TEMP_REC.BLOCK_ID)*/NULL;
          INSERT INTO JAI_FA_DEP_BLOCKS
            (BLOCK_DEPN_ID
            ,BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,UNPLANNED_DEPN)
          VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
            ,TEMP_REC.BLOCK_ID
            ,0
            ,0
            ,P_YEAR_END
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,V_DEPN_ADJ);
        ELSE
          UPDATE
            JAI_FA_DEP_BLOCKS
          SET
            DEPN_OF_ASSETS = 0
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
          /*SRW.MESSAGE(1275
                     ,'6.3 After update of JAI_FA_DEP_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
        END IF;
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          OPENING_WDV = 0
        WHERE START_DATE = P_YEAR_END + 1
          AND BOOK_TYPE_CODE = P_BOOK_NAME
          AND TYPE = V_TYPE;
        /*SRW.MESSAGE(1275
                   ,'6.4 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
      ELSIF V_CLOSING = 0 THEN
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          CLOSING_WDV = 0
          ,YEAR_ENDED = P_YEAR_END
          ,CAPITAL_GAINS = NULL
          ,CAPITAL_LOSS = NULL
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        /*SRW.MESSAGE(1275
                   ,'6.5 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
        IF NVL(V_COUNTER
           ,0) = 0 THEN
          INSERT INTO JAI_FA_DEP_BLOCKS
            (BLOCK_DEPN_ID
            ,BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,UNPLANNED_DEPN)
          VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
            ,TEMP_REC.BLOCK_ID
            ,0
            ,0
            ,P_YEAR_END
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,V_DEPN_ADJ);
          /*SRW.MESSAGE(1275
                     ,'6.6 After insert into JAI_FA_DEP_BLOCKS')*/NULL;
        ELSE
          UPDATE
            JAI_FA_DEP_BLOCKS
          SET
            DEPN_OF_ASSETS = 0
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
          /*SRW.MESSAGE(1275
                     ,'6.7 After update of JAI_FA_DEP_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
        END IF;
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          OPENING_WDV = 0
        WHERE START_DATE = P_YEAR_END + 1
          AND BOOK_TYPE_CODE = P_BOOK_NAME
          AND TYPE = V_TYPE;
        /*SRW.MESSAGE(1275
                   ,'6.8 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
      END IF;
      IF V_CLOSING > 0 AND V_ORIGINAL_COUNT = 0 THEN
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          CLOSING_WDV = 0
          ,YEAR_ENDED = P_YEAR_END
          ,CAPITAL_GAINS = NULL
          ,CAPITAL_LOSS = V_CLOSING
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        /*SRW.MESSAGE(1275
                   ,'7.1 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
        UPDATE
          JAI_FA_DEP_BLOCKS
        SET
          DEPN_OF_ASSETS = 0
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        /*SRW.MESSAGE(1275
                   ,'7.2 After update of JAI_FA_DEP_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          OPENING_WDV = 0
        WHERE START_DATE = P_YEAR_END + 1
          AND BOOK_TYPE_CODE = P_BOOK_NAME
          AND TYPE = V_TYPE;
        /*SRW.MESSAGE(1275
                   ,'7.3 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
      END IF;
      K := 0;
      C_BLOCK_ID := TEMP_REC.BLOCKID;
    END LOOP;
    UPDATE
      JAI_FA_AST_BLOCKS
    SET
      OPENING_WDV_ADJ = NULL
      ,DEPN_ADJ = NULL
    WHERE START_DATE BETWEEN P_YEAR_START
      AND P_YEAR_END
      AND OPENING_WDV_ADJ IS NOT NULL
    OR DEPN_ADJ IS NOT NULL
      AND BOOK_TYPE_CODE = P_BOOK_NAME;
    /*SRW.MESSAGE(1275
               ,'8.1 After update of JAI_FA_AST_BLOCKS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
    DELETE FROM JAI_FA_EXEMPTIONS;
    /*SRW.MESSAGE(1275
               ,'8.2 before commit and after delete of JAI_FA_EXEMPTIONS, cnt -> ' || SQL%ROWCOUNT)*/NULL;
    COMMIT;
    /*SRW.MESSAGE(1275
               ,'Committed the records....RUN_DEP')*/NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(1050
                 ,'Last OTHERS  ' || SQLERRM)*/NULL;
      ROLLBACK;
  END RUN_DEP;

  PROCEDURE RUN_DEP_MASS(P_YEAR_START IN DATE
                        ,P_YEAR_END IN DATE
                        ,P_BOOK_NAME IN VARCHAR2) IS
    LV_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_EXPENSED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    K NUMBER := 0;
    I NUMBER := 0;
    V_COUNT1 NUMBER;
    V_COUNTER NUMBER;
    V_ASSET_ID NUMBER;
    V_OWNED_LEASED VARCHAR2(15);
    V_COST NUMBER;
    V_SLNO NUMBER;
    V_START_DATE DATE;
    V_END_DATE DATE;
    V_RATE NUMBER;
    V_OPENING_BALANCE NUMBER;
    V_BLOCK_ID NUMBER;
    T_BLOCK_ID NUMBER;
    C_BLOCK_ID NUMBER;
    V_PROCEEDS_OF_SALE NUMBER;
    V_AMOUNT NUMBER;
    V_BLOCK_RATE NUMBER;
    V_EXEMPT_UPTO NUMBER;
    V_COST_LESS NUMBER;
    V_AMOUNT1 NUMBER;
    V_CLOSING NUMBER;
    V_MORE_AMOUNT NUMBER;
    V_MORE_AMOUNT1 NUMBER;
    V_LESS_AMOUNT NUMBER;
    V_TYPE VARCHAR2(40);
    V_LEFT_AMOUNT NUMBER;
    V_LEFT_BLOCK_ID NUMBER;
    V_NEG_DEP NUMBER;
    V_ASSET_COUNT NUMBER;
    V_RETIRE_COUNT1 NUMBER;
    V_ORIGINAL_COUNT NUMBER;
    V_OPENING_WDV NUMBER;
    V_PERIOD_RATE NUMBER;
    V_BLOCK_ID1 NUMBER;
    V_DEPRECIATION NUMBER;
    V_CLOSING_BALANCE NUMBER;
    V_OPENING_WDV1 NUMBER;
    V_COUNT NUMBER;
    V_AQUISATION_DATE DATE;
    V_COUNT2 NUMBER;
    V_DATE_PLACED_IN_SERVICE DATE;
    V_RETIRE_COUNT NUMBER;
    V_BLOCK_ID2 NUMBER;
    V_CURRENT_UNITS NUMBER;
    V_CLOSING1 NUMBER;
    V_DEPRECIATION_COST NUMBER;
    V_DEPRECIATION_COST1 NUMBER;
    V_OLD_CLOSING_WDV NUMBER;
    V_OPENING_WDV_ADJ NUMBER;
    V_BLOCK_HISTORY_ID NUMBER;
    V_DEPN_ADJ NUMBER;
    V_YEAR_END DATE;
    V_PREV_CLOSING_BALANCE NUMBER;
    V_DEPN_SLNO NUMBER;
    V_SERIAL_NUM1 NUMBER;
    V_DEPN_AMOUNT NUMBER := 0;
    V_FLAG BOOLEAN := FALSE;
    V_CLOSING_BLOCK_ID NUMBER;
    V_UNPLANNED_DEPN NUMBER;
    V_RETIRED NUMBER;
    CURSOR ASSET_BLOCK_CUR IS
      SELECT
        DISTINCT
        A.MASS_ADDITION_ID,
        B.BLOCK_ID,
        B.OPENING_WDV,
        B.RATE BLOCK_RATE,
        C.SLNO,
        C.START_DATE,
        C.END_DATE,
        C.RATE PERIOD_RATE,
        C.EXEMPT_UPTO,
        NVL(TO_DATE(A.ATTRIBUTE1
                   ,'DD-MON-RR')
           ,B.START_DATE) AQUISATION_DATE,
        D.DATE_PLACED_IN_SERVICE,
        A.FIXED_ASSETS_UNITS
      FROM
        FA_MASS_ADDITIONS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C,
        FA_BOOKS D
      WHERE NVL(A.MASS_ADDITION_ID
         ,0) = NVL(D.ASSET_ID
         ,0)
        AND TO_DATE(A.ATTRIBUTE1
             ,'DD-MON-RR') between C.START_DATE
        AND C.END_DATE
        AND B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START = P_YEAR_START
        AND C.YEAR_END = P_YEAR_END
        AND A.ATTRIBUTE2 = TO_CHAR(B.BLOCK_ID)
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND D.DATE_INEFFECTIVE is null
        AND D.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( A.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR A.ASSET_TYPE = LV_EXPENSED )
      ORDER BY
        1;
    CURSOR COUNT_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        FA_MASS_ADDITIONS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C,
        FA_BOOKS D
      WHERE NVL(A.MASS_ADDITION_ID
         ,0) = NVL(D.ASSET_ID
         ,0)
        AND TO_DATE(A.ATTRIBUTE1
             ,'DD-MON-RR') between C.START_DATE
        AND C.END_DATE
        AND B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START = P_YEAR_START
        AND C.YEAR_END = P_YEAR_END
        AND A.ATTRIBUTE2 = TO_CHAR(B.BLOCK_ID)
        AND B.BLOCK_ID = P_BLOCK_ID
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND D.BOOK_TYPE_CODE = B.BOOK_TYPE_CODE
        AND NVL(B.CLOSING_WDV
         ,0) <> 0
        AND B.YEAR_ENDED is NOT null
        AND D.DATE_INEFFECTIVE is null
        AND D.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( A.ASSET_TYPE = LV_CAPITALIZED
        AND D.CAPITALIZE_FLAG = LV_FLAG )
      OR A.ASSET_TYPE = LV_EXPENSED )
      ORDER BY
        1;
    CURSOR BLOCK_RET_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        A.BLOCK_ID,
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_MASS_ADDITIONS B,
        FA_RETIREMENTS C
      WHERE A.BLOCK_ID = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.MASS_ADDITION_ID = C.ASSET_ID
        AND A.BLOCK_ID = P_BLOCK_ID
        AND C.DATE_RETIRED between P_YEAR_START
        AND P_YEAR_END
      GROUP BY
        A.BLOCK_ID;
    CURSOR FA_RETIREMENTS_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        SUM(NVL(A.PROCEEDS_OF_SALE
               ,0)) SALE
      FROM
        FA_RETIREMENTS A,
        FA_MASS_ADDITIONS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.ASSET_ID = B.MASS_ADDITION_ID
        AND B.ATTRIBUTE2 = P_BLOCK_ID
        AND B.ATTRIBUTE2 = C.BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND A.DATE_RETIRED between P_YEAR_START
        AND P_YEAR_END
      ORDER BY
        BLOCK_ID;
    CURSOR COST_LESS_EXEMPT_UPTO_CUR(P_ASSET_ID IN NUMBER,P_START_DATE IN DATE,P_END_DATE IN DATE,P_EXEMPT_UPTO IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(A.ORIGINAL_COST) COSTING,
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE
      FROM
        FA_BOOKS A,
        FA_MASS_ADDITIONS B
      WHERE A.ASSET_ID = P_ASSET_ID
        AND A.ASSET_ID = B.MASS_ADDITION_ID
        AND A.DATE_INEFFECTIVE is null
        AND A.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND B.ATTRIBUTE2 = P_BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RR') between P_START_DATE
        AND P_END_DATE
        AND ( A.ORIGINAL_COST / B.FIXED_ASSETS_UNITS ) <= NVL(P_EXEMPT_UPTO
         ,0)
      GROUP BY
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE;
    CURSOR COST_MORE_EXEMPT_UPTO_CUR(P_ASSET_ID IN NUMBER,P_START_DATE IN DATE,P_END_DATE IN DATE,P_EXEMPT_UPTO IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(A.ORIGINAL_COST) COSTING,
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE
      FROM
        FA_BOOKS A,
        FA_MASS_ADDITIONS B
      WHERE A.ASSET_ID = P_ASSET_ID
        AND A.ASSET_ID = B.MASS_ADDITION_ID
        AND A.DATE_INEFFECTIVE is null
        AND A.TRANSACTION_HEADER_ID_OUT is null
        AND ( ( B.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_EXPENSED )
        AND B.ATTRIBUTE2 = P_BLOCK_ID
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RR') between P_START_DATE
        AND P_END_DATE
        AND ( A.ORIGINAL_COST / B.FIXED_ASSETS_UNITS ) > NVL(P_EXEMPT_UPTO
         ,0)
      GROUP BY
        A.ASSET_ID,
        A.DATE_PLACED_IN_SERVICE;
    CURSOR TEMP_TAB IS
      SELECT
        BLOCK_ID BLOCKID,
        SUM(DEPN_OF_ASSETS) ASSETS,
        SUM(TOTAL_BALANCE) BALANCE,
        SUM(SLNO) COST,
        SUM(FULL_EXEMPT) COST_FULL,
        BLOCK_ID
      FROM
        JAI_FA_DEP_BLOCKS_T
      GROUP BY
        BLOCK_ID;
    CURSOR TYPE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        TYPE,
        RATE,
        OPENING_WDV,
        OPENING_WDV_ADJ,
        DEPN_ADJ
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR LEFT_AMOUNT(P_BLOCK_ID IN NUMBER) IS
      SELECT
        SUM(EXEMPT_AMOUNT) L_AMOUNT,
        BLOCK_ID
      FROM
        JAI_FA_EXEMPTIONS
      WHERE BLOCK_ID = P_BLOCK_ID
      GROUP BY
        BLOCK_ID;
    CURSOR RETIRE_ASSET_CUR(P_ASSET_ID IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        A.UNITS,
        TO_NUMBER(B.ATTRIBUTE2)
      FROM
        FA_RETIREMENTS A,
        FA_MASS_ADDITIONS B
      WHERE A.DATE_RETIRED <= P_YEAR_END
        AND A.ASSET_ID = B.MASS_ADDITION_ID
        AND A.STATUS = 'PROCESSED'
        AND A.ASSET_ID = P_ASSET_ID
        AND B.ATTRIBUTE2 = P_BLOCK_ID;
    CURSOR ASSET_COUNT_CUR(P_ASSET_ID IN NUMBER,P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        H.UNITS,
        H.ASSET_ID
      FROM
        FA_ASSET_HISTORY H,
        FA_MASS_ADDITIONS A
      WHERE TRANSACTION_HEADER_ID_IN IN (
        SELECT
          MIN(TRANSACTION_HEADER_ID_IN)
        FROM
          FA_ASSET_HISTORY
        GROUP BY
          ASSET_ID )
        AND A.MASS_ADDITION_ID = H.ASSET_ID
        AND A.ATTRIBUTE2 = P_BLOCK_ID
        AND A.MASS_ADDITION_ID = P_ASSET_ID;
    CURSOR BLOCK_ID_CUR IS
      SELECT
        BLOCK_ID
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID NOT IN (
        SELECT
          TO_NUMBER(NVL(ATTRIBUTE2
                       ,0))
        FROM
          FA_MASS_ADDITIONS )
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR CLOSING_BALANCE_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        DISTINCT
        B.OPENING_WDV,
        B.OPENING_WDV_ADJ,
        B.DEPN_ADJ,
        B.RATE BLOCK_RATE,
        B.BLOCK_ID,
        B.TYPE
      FROM
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_PERIOD_RATES C
      WHERE B.START_DATE >= P_YEAR_START
        AND B.START_DATE <= P_YEAR_END
        AND C.YEAR_START >= P_YEAR_START
        AND C.YEAR_END <= P_YEAR_END
        AND B.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.BLOCK_ID = P_BLOCK_ID;
    CURSOR ASSET_COUNT_CUR1(P_BLOCK_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        JAI_FA_AST_BLOCKS
      WHERE CLOSING_WDV is not null
        AND YEAR_ENDED is not null
        AND BLOCK_ID = P_BLOCK_ID
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND START_DATE >= P_YEAR_START
        AND START_DATE <= P_YEAR_END;
    CURSOR RETIRE_COUNT IS
      SELECT
        COUNT(*)
      FROM
        FA_RETIREMENTS
      WHERE DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR RET_ASSET_BLOCK_CUR IS
      SELECT
        count(*)
      FROM
        FA_RETIREMENTS A,
        FA_MASS_ADDITIONS B,
        JAI_FA_AST_BLOCKS C
      WHERE A.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND A.ASSET_ID = B.MASS_ADDITION_ID
        AND B.ATTRIBUTE2 = C.BLOCK_ID
        AND C.START_DATE between P_YEAR_START
        AND P_YEAR_END;
    CURSOR ASSET_ID_CURSOR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        MASS_ADDITION_ID
      FROM
        FA_MASS_ADDITIONS
      WHERE ATTRIBUTE2 = P_BLOCK_ID;
    CURSOR OPENING_WDV_ADJ_CUR IS
      SELECT
        RATE,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND NVL(OPENING_WDV_ADJ
         ,DEPN_ADJ) is not null
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR ASSET_ADD_PR_CUR IS
      SELECT
        RATE,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE START_DATE BETWEEN P_YEAR_START
        AND P_YEAR_END
        AND BOOK_TYPE_CODE = P_BOOK_NAME
        AND CLOSING_WDV > 0
        AND BLOCK_ID in (
        SELECT
          TO_NUMBER(ATTRIBUTE2)
        FROM
          FA_MASS_ADDITIONS );
    CURSOR ADJUST_OPEN_CUR(P_RATE IN NUMBER,P_TYPE IN VARCHAR2) IS
      SELECT
        BLOCK_ID,
        OPENING_WDV,
        CLOSING_WDV,
        RATE,
        START_DATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE RATE = P_RATE
        AND TYPE = P_TYPE
        AND START_DATE > P_YEAR_END
        AND BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR YEAR_END_CUR(P_START_DATE IN DATE) IS
      SELECT
        YEAR_END
      FROM
        JAI_FA_AST_YEARS
      WHERE YEAR_START = P_START_DATE;
    CURSOR COUNT_DEPN_CUR(P_BLOCK_ID IN NUMBER,P_SLNO IN NUMBER,P_ASSET_ID IN NUMBER) IS
      SELECT
        count(*)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE SLNO > 0
        AND BLOCK_ID = P_BLOCK_ID
        AND SLNO = P_SLNO
        AND UNPLANNED_DEPN = P_ASSET_ID;
    CURSOR UNPLANNED_DEPN_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        UNPLANNED_DEPN
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND SLNO = - 1;
    CURSOR COUNTER_CUR(P_BLOCK_ID IN NUMBER) IS
      SELECT
        COUNT(*)
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID
        AND SLNO = 0;
  BEGIN
    LV_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_EXPENSED := 'EXPENSED';
    OPEN RETIRE_COUNT;
    FETCH RETIRE_COUNT
     INTO V_COUNTER;
    CLOSE RETIRE_COUNT;
    OPEN RET_ASSET_BLOCK_CUR;
    FETCH RET_ASSET_BLOCK_CUR
     INTO V_RETIRE_COUNT1;
    CLOSE RET_ASSET_BLOCK_CUR;
    OPEN ASSET_BLOCK_CUR;
    LOOP
      V_COUNT := ASSET_BLOCK_CUR%ROWCOUNT;
      FETCH ASSET_BLOCK_CUR
       INTO V_ASSET_ID,V_BLOCK_ID,V_OPENING_WDV,V_BLOCK_RATE,V_SLNO,V_START_DATE,V_END_DATE,V_PERIOD_RATE,V_EXEMPT_UPTO,V_AQUISATION_DATE,V_DATE_PLACED_IN_SERVICE,V_CURRENT_UNITS;
      IF ASSET_BLOCK_CUR%NOTFOUND THEN
        FOR block_id IN BLOCK_ID_CUR LOOP
          FOR closing IN CLOSING_BALANCE_CUR(block_id.block_id) LOOP
            OPEN BLOCK_RET_CUR(BLOCK_ID.BLOCK_ID);
            FETCH BLOCK_RET_CUR
             INTO V_CLOSING_BLOCK_ID,V_RETIRED;
            CLOSE BLOCK_RET_CUR;
            V_DEPRECIATION := NVL(NVL(CLOSING.OPENING_WDV
                                     ,0) + NVL(CLOSING.OPENING_WDV_ADJ
                                     ,0) - NVL(V_RETIRED
                                     ,0)
                                 ,0) * (CLOSING.BLOCK_RATE / 100);
            V_CLOSING_BALANCE := NVL(NVL(CLOSING.OPENING_WDV
                                        ,0) + NVL(CLOSING.OPENING_WDV_ADJ
                                        ,0)
                                    ,0) - NVL(V_DEPRECIATION
                                    ,0) - NVL(V_RETIRED
                                    ,0);
            V_DEPRECIATION := ROUND(V_DEPRECIATION
                                   ,2);
            V_CLOSING_BALANCE := ROUND(V_CLOSING_BALANCE
                                      ,2);
            IF V_CLOSING_BALANCE > 0 THEN
              V_CLOSING_BALANCE := V_CLOSING_BALANCE;
            ELSE
              V_CLOSING_BALANCE := 0;
            END IF;
            OPEN ASSET_COUNT_CUR1(CLOSING.BLOCK_ID);
            FETCH ASSET_COUNT_CUR1
             INTO V_COUNT2;
            CLOSE ASSET_COUNT_CUR1;
            IF CLOSING.OPENING_WDV_ADJ IS NOT NULL OR CLOSING.DEPN_ADJ IS NOT NULL THEN
              DEPRECIATION1(CLOSING.BLOCK_ID
                           ,CLOSING.OPENING_WDV
                           ,V_CLOSING_BALANCE
                           ,CLOSING.OPENING_WDV_ADJ
                           ,CLOSING.DEPN_ADJ
                           ,P_YEAR_END);
            END IF;
            OPEN UNPLANNED_DEPN_CUR(CLOSING.BLOCK_ID);
            FETCH UNPLANNED_DEPN_CUR
             INTO V_UNPLANNED_DEPN;
            CLOSE UNPLANNED_DEPN_CUR;
            IF NVL(V_COUNT2
               ,0) = 0 THEN
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                CLOSING_WDV = NVL(V_CLOSING_BALANCE
                   ,0) - NVL(CLOSING.DEPN_ADJ
                   ,0)
                ,YEAR_ENDED = P_YEAR_END
              WHERE BLOCK_ID = CLOSING.BLOCK_ID;
              SELECT
                JAI_FA_AST_BLOCKS_S.NEXTVAL
              INTO V_BLOCK_ID1
              FROM
                DUAL;
              INSERT INTO JAI_FA_AST_BLOCKS
                (BLOCK_ID
                ,TYPE
                ,RATE
                ,BOOK_TYPE_CODE
                ,OPENING_WDV
                ,START_DATE
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY)
              VALUES   (V_BLOCK_ID1
                ,CLOSING.TYPE
                ,CLOSING.BLOCK_RATE
                ,P_BOOK_NAME
                ,NVL(V_CLOSING_BALANCE
                   ,0) - NVL(CLOSING.DEPN_ADJ
                   ,0)
                ,P_YEAR_END + 1
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID);
              INSERT INTO JAI_FA_DEP_BLOCKS
                (BLOCK_DEPN_ID
                ,BLOCK_ID
                ,SLNO
                ,DEPN_OF_ASSETS
                ,YEAR_ENDED
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY
                ,UNPLANNED_DEPN)
              VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
                ,CLOSING.BLOCK_ID
                ,0
                ,V_DEPRECIATION
                ,P_YEAR_END
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID
                ,CLOSING.DEPN_ADJ);
            ELSE
              UPDATE
                JAI_FA_DEP_BLOCKS
              SET
                DEPN_OF_ASSETS = V_DEPRECIATION
              WHERE BLOCK_ID = CLOSING.BLOCK_ID
                AND SLNO = 0;
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                OPENING_WDV = NVL(V_CLOSING_BALANCE
                   ,0) - NVL(V_UNPLANNED_DEPN
                   ,0)
              WHERE START_DATE = P_YEAR_END + 1
                AND TYPE = CLOSING.TYPE
                AND RATE = CLOSING.BLOCK_RATE;
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                CLOSING_WDV = NVL(V_CLOSING_BALANCE
                   ,0) - NVL(V_UNPLANNED_DEPN
                   ,0)
                ,YEAR_ENDED = P_YEAR_END
              WHERE BLOCK_ID = CLOSING.BLOCK_ID;
              IF CLOSING.DEPN_ADJ IS NOT NULL THEN
                UPDATE
                  JAI_FA_DEP_BLOCKS
                SET
                  UNPLANNED_DEPN = CLOSING.DEPN_ADJ
                WHERE BLOCK_ID = CLOSING.BLOCK_ID
                  AND SLNO = 0;
              END IF;
            END IF;
          END LOOP;
        END LOOP;
        CLOSE ASSET_BLOCK_CUR;
        EXIT;
      ELSE
        OPEN COUNT_DEPN_CUR(V_BLOCK_ID,V_SLNO,V_ASSET_ID);
        FETCH COUNT_DEPN_CUR
         INTO V_DEPN_SLNO;
        CLOSE COUNT_DEPN_CUR;
        FOR exempt IN COST_MORE_EXEMPT_UPTO_CUR(v_asset_id,v_start_date, v_end_date ,
                                                 nvl(v_exempt_upto,0),v_block_id )  LOOP
          V_COST := EXEMPT.COSTING;
          IF V_DEPN_SLNO = 0 THEN
            IF V_SERIAL_NUM1 IS NULL THEN
              V_SERIAL_NUM1 := V_SLNO;
              I := 1;
              V_DEPN_AMOUNT := 0;
            ELSIF V_SERIAL_NUM1 <> V_SLNO THEN
              I := 0;
              INSERT INTO JAI_FA_DEP_BLOCKS
                (BLOCK_DEPN_ID
                ,BLOCK_ID
                ,SLNO
                ,DEPN_OF_ASSETS
                ,YEAR_ENDED
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY
                ,UNPLANNED_DEPN)
              VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
                ,V_BLOCK_ID
                ,V_SERIAL_NUM1
                ,NVL(V_DEPN_AMOUNT
                   ,0)
                ,P_YEAR_END
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID
                ,V_ASSET_ID);
              V_DEPN_AMOUNT := 0;
              V_FLAG := TRUE;
              V_SERIAL_NUM1 := V_SLNO;
            END IF;
          END IF;
          IF NVL(V_AQUISATION_DATE
             ,SYSDATE) >= NVL(V_START_DATE
             ,SYSDATE) AND NVL(V_AQUISATION_DATE
             ,SYSDATE) <= NVL(V_END_DATE
             ,SYSDATE) THEN
            IF V_PERIOD_RATE = 100 THEN
              V_MORE_AMOUNT1 := NVL(V_COST
                                   ,0) * NVL(V_BLOCK_RATE
                                   ,0) / 100;
            END IF;
          END IF;
          IF NVL(V_AQUISATION_DATE
             ,V_DATE_PLACED_IN_SERVICE) <= NVL(P_YEAR_START
             ,SYSDATE) THEN
            V_MORE_AMOUNT := NVL(V_COST
                                ,0) * NVL(V_BLOCK_RATE
                                ,0) / 100;
          END IF;
          IF NVL(V_AQUISATION_DATE
             ,SYSDATE) >= NVL(V_START_DATE
             ,SYSDATE) AND NVL(V_AQUISATION_DATE
             ,SYSDATE) <= NVL(V_END_DATE
             ,SYSDATE) THEN
            IF NVL(V_DATE_PLACED_IN_SERVICE
               ,SYSDATE) >= NVL(P_YEAR_START
               ,SYSDATE) AND NVL(V_DATE_PLACED_IN_SERVICE
               ,SYSDATE) <= NVL(P_YEAR_END
               ,SYSDATE) THEN
              IF V_PERIOD_RATE <> 100 THEN
                V_MORE_AMOUNT := NVL((NVL(V_COST
                                        ,0) * NVL(V_BLOCK_RATE
                                        ,0) / 100 * NVL(V_PERIOD_RATE
                                        ,0) / 100)
                                    ,0);
              END IF;
            END IF;
          END IF;
          IF V_AQUISATION_DATE IS NULL AND (NVL(V_DATE_PLACED_IN_SERVICE
             ,SYSDATE) >= NVL(V_START_DATE
             ,SYSDATE) AND NVL(V_DATE_PLACED_IN_SERVICE
             ,SYSDATE) <= NVL(V_END_DATE
             ,SYSDATE)) THEN
            IF V_PERIOD_RATE <> 100 THEN
              V_MORE_AMOUNT := NVL((NVL(V_COST
                                      ,0) * NVL(V_BLOCK_RATE
                                      ,0) / 100 * NVL(V_PERIOD_RATE
                                      ,0) / 100)
                                  ,0);
            END IF;
          END IF;
          IF NVL(V_AQUISATION_DATE
             ,V_DATE_PLACED_IN_SERVICE) >= NVL(V_START_DATE
             ,SYSDATE) AND NVL(V_AQUISATION_DATE
             ,V_DATE_PLACED_IN_SERVICE) <= NVL(V_END_DATE
             ,SYSDATE) THEN
            IF V_PERIOD_RATE = 0 THEN
              V_MORE_AMOUNT := 0;
            END IF;
          END IF;
          IF EXEMPT.ASSET_ID = V_ASSET_ID THEN
            IF V_PERIOD_RATE = 100 THEN
              V_MORE_AMOUNT := NVL(V_MORE_AMOUNT1
                                  ,0);
            ELSE
              V_MORE_AMOUNT := NVL(V_MORE_AMOUNT
                                  ,0);
            END IF;
          END IF;
          V_DEPN_AMOUNT := V_DEPN_AMOUNT + V_MORE_AMOUNT;
          V_CLOSING_BALANCE := NVL(V_COST
                                  ,0) - NVL(V_MORE_AMOUNT
                                  ,0);
          INSERT INTO JAI_FA_DEP_BLOCKS_T
            (BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,FULL_EXEMPT
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,TOTAL_BALANCE
            ,UNPLANNED_DEPN)
          VALUES   (V_BLOCK_ID
            ,ROUND(NVL(V_COST
                     ,0)
                 ,2)
            ,ROUND(NVL(V_MORE_AMOUNT
                     ,0)
                 ,2)
            ,P_YEAR_END
            ,NVL(V_MORE_AMOUNT1
               ,0)
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,ROUND(NVL(V_CLOSING_BALANCE
                     ,0)
                 ,2)
            ,V_SLNO);
        END LOOP;
        IF V_DEPN_SLNO = 0 THEN
          IF V_FLAG OR I = 1 THEN
            IF V_SERIAL_NUM1 = V_SLNO THEN
              INSERT INTO JAI_FA_DEP_BLOCKS
                (BLOCK_DEPN_ID
                ,BLOCK_ID
                ,SLNO
                ,DEPN_OF_ASSETS
                ,YEAR_ENDED
                ,CREATION_DATE
                ,CREATED_BY
                ,LAST_UPDATE_DATE
                ,LAST_UPDATE_LOGIN
                ,LAST_UPDATED_BY
                ,UNPLANNED_DEPN)
              VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
                ,V_BLOCK_ID
                ,V_SERIAL_NUM1
                ,NVL(V_DEPN_AMOUNT
                   ,0)
                ,P_YEAR_END
                ,SYSDATE
                ,UID
                ,SYSDATE
                ,UID
                ,UID
                ,V_ASSET_ID);
              V_SERIAL_NUM1 := NULL;
              V_DEPN_AMOUNT := 0;
            END IF;
          END IF;
          I := 0;
        END IF;
        FOR less_exempt IN COST_LESS_EXEMPT_UPTO_CUR(v_asset_id,v_start_date,
                                           v_end_date ,nvl(v_exempt_upto,0),v_block_id ) LOOP
          V_COST_LESS := LESS_EXEMPT.COSTING;
          INSERT INTO JAI_FA_EXEMPTIONS
            (BLOCK_ID
            ,EXEMPT_AMOUNT
            ,FA_EXEMPTION_ID
            ,CREATED_BY
            ,CREATION_DATE
            ,LAST_UPDATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,OBJECT_VERSION_NUMBER)
          VALUES   (V_BLOCK_ID
            ,ROUND(NVL(V_COST_LESS
                     ,0)
                 ,2)
            ,JAI_FA_EXEMPTIONS_S.NEXTVAL
            ,FND_GLOBAL.USER_ID
            ,SYSDATE
            ,FND_GLOBAL.USER_ID
            ,SYSDATE
            ,FND_GLOBAL.LOGIN_ID
            ,NULL);
          IF V_DEPN_SLNO = 0 THEN
            INSERT INTO JAI_FA_DEP_BLOCKS
              (BLOCK_DEPN_ID
              ,BLOCK_ID
              ,SLNO
              ,DEPN_OF_ASSETS
              ,FULL_EXEMPT
              ,YEAR_ENDED
              ,CREATION_DATE
              ,CREATED_BY
              ,LAST_UPDATE_DATE
              ,LAST_UPDATE_LOGIN
              ,LAST_UPDATED_BY
              ,UNPLANNED_DEPN)
            VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
              ,V_BLOCK_ID
              ,V_SLNO
              ,NVL(V_COST_LESS
                 ,0)
              ,NVL(V_COST_LESS
                 ,0)
              ,P_YEAR_END
              ,SYSDATE
              ,UID
              ,SYSDATE
              ,UID
              ,UID
              ,V_ASSET_ID);
          END IF;
        END LOOP;
        IF ASSET_BLOCK_CUR%FOUND IS NULL THEN
          CLOSE ASSET_BLOCK_CUR;
          EXIT;
        END IF;
      END IF;
    END LOOP;
    FOR temp_rec IN TEMP_TAB LOOP
      V_CLOSING := 0;
      V_CLOSING1 := 0;
      V_CLOSING_BALANCE := 0;
      OPEN COUNTER_CUR(TEMP_REC.BLOCK_ID);
      FETCH COUNTER_CUR
       INTO V_COUNTER;
      CLOSE COUNTER_CUR;
      OPEN LEFT_AMOUNT(TEMP_REC.BLOCK_ID);
      FETCH LEFT_AMOUNT
       INTO V_LEFT_AMOUNT,V_LEFT_BLOCK_ID;
      CLOSE LEFT_AMOUNT;
      OPEN ASSET_ID_CURSOR(TEMP_REC.BLOCK_ID);
      FETCH ASSET_ID_CURSOR
       INTO V_ASSET_ID;
      CLOSE ASSET_ID_CURSOR;
      OPEN ASSET_COUNT_CUR(V_ASSET_ID,TEMP_REC.BLOCK_ID);
      FETCH ASSET_COUNT_CUR
       INTO V_ASSET_COUNT,V_BLOCK_ID1;
      CLOSE ASSET_COUNT_CUR;
      OPEN RETIRE_ASSET_CUR(V_ASSET_ID,TEMP_REC.BLOCK_ID);
      FETCH RETIRE_ASSET_CUR
       INTO V_RETIRE_COUNT,V_BLOCK_ID2;
      CLOSE RETIRE_ASSET_CUR;
      OPEN UNPLANNED_DEPN_CUR(TEMP_REC.BLOCK_ID);
      FETCH UNPLANNED_DEPN_CUR
       INTO V_UNPLANNED_DEPN;
      CLOSE UNPLANNED_DEPN_CUR;
      IF V_BLOCK_ID1 = V_BLOCK_ID2 THEN
        V_ORIGINAL_COUNT := NVL(V_ASSET_COUNT
                               ,0) - NVL(V_RETIRE_COUNT
                               ,0);
      ELSE
        V_ORIGINAL_COUNT := NULL;
      END IF;
      IF TEMP_REC.BLOCK_ID = V_LEFT_BLOCK_ID THEN
        V_LEFT_AMOUNT := NVL(V_LEFT_AMOUNT
                            ,0);
      ELSE
        V_LEFT_AMOUNT := 0;
      END IF;
      OPEN COUNT_CUR(TEMP_REC.BLOCK_ID);
      FETCH COUNT_CUR
       INTO V_COUNT1;
      CLOSE COUNT_CUR;
      OPEN TYPE_CUR(TEMP_REC.BLOCK_ID);
      FETCH TYPE_CUR
       INTO V_TYPE,V_BLOCK_RATE,V_OPENING_WDV1,V_OPENING_WDV_ADJ,V_DEPN_ADJ;
      CLOSE TYPE_CUR;
      OPEN FA_RETIREMENTS_CUR(TEMP_REC.BLOCK_ID);
      FETCH FA_RETIREMENTS_CUR
       INTO V_PROCEEDS_OF_SALE;
      CLOSE FA_RETIREMENTS_CUR;
      OPEN BLOCK_RET_CUR(TEMP_REC.BLOCK_ID);
      FETCH BLOCK_RET_CUR
       INTO V_CLOSING_BLOCK_ID,V_RETIRED;
      CLOSE BLOCK_RET_CUR;
      V_AMOUNT1 := NVL(NVL(V_OPENING_WDV1
                          ,0) + NVL(V_OPENING_WDV_ADJ
                          ,0) - NVL(V_PROCEEDS_OF_SALE
                          ,0) - NVL(V_RETIRED
                          ,0)
                      ,0) * NVL(V_BLOCK_RATE
                      ,0) / 100;
      V_CLOSING := NVL(V_OPENING_WDV1
                      ,0) + NVL(TEMP_REC.COST
                      ,0) - NVL(V_PROCEEDS_OF_SALE
                      ,0) - NVL(V_RETIRED
                      ,0);
      V_CLOSING1 := NVL(V_OPENING_WDV1
                       ,0) + NVL(TEMP_REC.COST_FULL
                       ,0) - NVL(V_PROCEEDS_OF_SALE
                       ,0) - NVL(V_RETIRED
                       ,0);
      V_CLOSING_BALANCE := NVL(V_OPENING_WDV1
                              ,0) + NVL(V_OPENING_WDV_ADJ
                              ,0) + NVL(TEMP_REC.BALANCE
                              ,0) + NVL(V_LEFT_AMOUNT
                              ,0) - NVL(V_LEFT_AMOUNT
                              ,0) - NVL(V_AMOUNT1
                              ,0) - NVL(V_PROCEEDS_OF_SALE
                              ,0) - NVL(V_DEPN_ADJ
                              ,0) - NVL(V_RETIRED
                              ,0) - NVL(V_UNPLANNED_DEPN
                              ,0);
      IF V_OPENING_WDV_ADJ IS NOT NULL OR V_DEPN_ADJ IS NOT NULL THEN
        DEPRECIATION1(TEMP_REC.BLOCK_ID
                     ,V_OPENING_WDV1
                     ,V_CLOSING_BALANCE
                     ,V_OPENING_WDV_ADJ
                     ,V_DEPN_ADJ
                     ,P_YEAR_END);
      END IF;
      IF V_AMOUNT1 > 0 THEN
        V_AMOUNT1 := V_AMOUNT1;
      ELSE
        V_AMOUNT1 := 0;
      END IF;
      IF V_CLOSING > 0 THEN
        IF NVL(V_COUNT1
           ,0) = 0 THEN
          UPDATE
            JAI_FA_AST_BLOCKS
          SET
            CLOSING_WDV = NVL(V_CLOSING_BALANCE
               ,0)
            ,YEAR_ENDED = P_YEAR_END
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
          INSERT INTO JAI_FA_DEP_BLOCKS
            (BLOCK_DEPN_ID
            ,BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,UNPLANNED_DEPN)
          VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
            ,TEMP_REC.BLOCK_ID
            ,0
            ,NVL(V_AMOUNT1
               ,0)
            ,P_YEAR_END
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,V_DEPN_ADJ);
          SELECT
            JAI_FA_AST_BLOCKS_S.NEXTVAL
          INTO V_BLOCK_ID
          FROM
            DUAL;
          INSERT INTO JAI_FA_AST_BLOCKS
            (BLOCK_ID
            ,TYPE
            ,RATE
            ,OPENING_WDV
            ,START_DATE
            ,BOOK_TYPE_CODE
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY)
          VALUES   (V_BLOCK_ID
            ,V_TYPE
            ,V_BLOCK_RATE
            ,NVL(V_CLOSING_BALANCE
               ,0)
            ,P_YEAR_END + 1
            ,P_BOOK_NAME
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID);
        ELSE
          UPDATE
            JAI_FA_AST_BLOCKS
          SET
            CLOSING_WDV = NVL(V_CLOSING_BALANCE
               ,0)
            ,YEAR_ENDED = P_YEAR_END
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
          UPDATE
            JAI_FA_DEP_BLOCKS
          SET
            DEPN_OF_ASSETS = NVL(V_AMOUNT1
               ,0)
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID
            AND SLNO = 0;
          UPDATE
            JAI_FA_AST_BLOCKS
          SET
            OPENING_WDV = NVL(V_CLOSING_BALANCE
               ,0)
          WHERE START_DATE = P_YEAR_END + 1
            AND RATE = V_BLOCK_RATE
            AND TYPE = V_TYPE;
          K := 1;
          IF V_DEPN_ADJ IS NOT NULL THEN
            UPDATE
              JAI_FA_DEP_BLOCKS
            SET
              UNPLANNED_DEPN = V_DEPN_ADJ
            WHERE BLOCK_ID = TEMP_REC.BLOCK_ID
              AND SLNO = 0;
          END IF;
        END IF;
      END IF;
      IF V_CLOSING < 0 THEN
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          CLOSING_WDV = 0
          ,YEAR_ENDED = P_YEAR_END
          ,CAPITAL_GAINS = ABS(V_CLOSING)
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        IF NVL(V_COUNTER
           ,0) = 0 THEN
          INSERT INTO JAI_FA_DEP_BLOCKS
            (BLOCK_DEPN_ID
            ,BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,UNPLANNED_DEPN)
          VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
            ,TEMP_REC.BLOCK_ID
            ,0
            ,0
            ,P_YEAR_END
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,V_DEPN_ADJ);
        ELSE
          UPDATE
            JAI_FA_DEP_BLOCKS
          SET
            DEPN_OF_ASSETS = 0
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        END IF;
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          OPENING_WDV = 0
        WHERE START_DATE = P_YEAR_END + 1
          AND RATE = V_BLOCK_RATE
          AND TYPE = V_TYPE;
      ELSIF V_CLOSING = 0 THEN
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          CLOSING_WDV = 0
          ,YEAR_ENDED = P_YEAR_END
          ,CAPITAL_GAINS = NULL
          ,CAPITAL_LOSS = NULL
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        IF NVL(V_COUNTER
           ,0) = 0 THEN
          INSERT INTO JAI_FA_DEP_BLOCKS
            (BLOCK_DEPN_ID
            ,BLOCK_ID
            ,SLNO
            ,DEPN_OF_ASSETS
            ,YEAR_ENDED
            ,CREATION_DATE
            ,CREATED_BY
            ,LAST_UPDATE_DATE
            ,LAST_UPDATE_LOGIN
            ,LAST_UPDATED_BY
            ,UNPLANNED_DEPN)
          VALUES   (JAI_FA_DEP_BLOCKS_S.NEXTVAL
            ,TEMP_REC.BLOCK_ID
            ,0
            ,0
            ,P_YEAR_END
            ,SYSDATE
            ,UID
            ,SYSDATE
            ,UID
            ,UID
            ,V_DEPN_ADJ);
        ELSE
          UPDATE
            JAI_FA_DEP_BLOCKS
          SET
            DEPN_OF_ASSETS = 0
          WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        END IF;
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          OPENING_WDV = 0
        WHERE START_DATE = P_YEAR_END + 1
          AND RATE = V_BLOCK_RATE
          AND TYPE = V_TYPE;
      END IF;
      IF V_CLOSING > 0 AND V_ORIGINAL_COUNT = 0 THEN
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          CLOSING_WDV = 0
          ,YEAR_ENDED = P_YEAR_END
          ,CAPITAL_GAINS = NULL
          ,CAPITAL_LOSS = V_CLOSING
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        UPDATE
          JAI_FA_DEP_BLOCKS
        SET
          DEPN_OF_ASSETS = 0
        WHERE BLOCK_ID = TEMP_REC.BLOCK_ID;
        UPDATE
          JAI_FA_AST_BLOCKS
        SET
          OPENING_WDV = 0
        WHERE START_DATE = P_YEAR_END + 1
          AND RATE = V_BLOCK_RATE
          AND TYPE = V_TYPE;
      END IF;
      IF K = 0 THEN
        FOR opening_adjust IN OPENING_WDV_ADJ_CUR LOOP
          V_PREV_CLOSING_BALANCE := NULL;
          FOR adjust IN ADJUST_OPEN_CUR(opening_adjust.rate,opening_adjust.type) LOOP
            OPEN YEAR_END_CUR(ADJUST.START_DATE);
            FETCH YEAR_END_CUR
             INTO V_YEAR_END;
            CLOSE YEAR_END_CUR;
            V_DEPRECIATION := NVL(V_PREV_CLOSING_BALANCE
                                 ,ADJUST.OPENING_WDV) * NVL(ADJUST.RATE
                                 ,0) / 100;
            V_CLOSING_BALANCE := NVL(V_PREV_CLOSING_BALANCE
                                    ,ADJUST.OPENING_WDV) - NVL(V_DEPRECIATION
                                    ,0);
            UPDATE
              JAI_FA_AST_BLOCKS
            SET
              OPENING_WDV = NVL(V_PREV_CLOSING_BALANCE
                 ,ADJUST.OPENING_WDV)
            WHERE START_DATE = ADJUST.START_DATE
              AND BLOCK_ID = ADJUST.BLOCK_ID;
            IF ADJUST.CLOSING_WDV IS NOT NULL THEN
              UPDATE
                JAI_FA_DEP_BLOCKS
              SET
                DEPN_OF_ASSETS = V_DEPRECIATION
              WHERE BLOCK_ID = ADJUST.BLOCK_ID
                AND SLNO = 0;
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                CLOSING_WDV = NVL(V_CLOSING_BALANCE
                   ,0)
                ,YEAR_ENDED = V_YEAR_END
              WHERE BLOCK_ID = ADJUST.BLOCK_ID;
            END IF;
            V_PREV_CLOSING_BALANCE := V_CLOSING_BALANCE;
          END LOOP;
        END LOOP;
      ELSIF K = 1 THEN
        FOR asset_add IN ASSET_ADD_PR_CUR LOOP
          V_PREV_CLOSING_BALANCE := NULL;
          FOR adjust IN ADJUST_OPEN_CUR(asset_add.rate,asset_add.type)  LOOP
            OPEN YEAR_END_CUR(ADJUST.START_DATE);
            FETCH YEAR_END_CUR
             INTO V_YEAR_END;
            CLOSE YEAR_END_CUR;
            V_DEPRECIATION := NVL(V_PREV_CLOSING_BALANCE
                                 ,ADJUST.OPENING_WDV) * NVL(ADJUST.RATE
                                 ,0) / 100;
            V_CLOSING_BALANCE := NVL(V_PREV_CLOSING_BALANCE
                                    ,ADJUST.OPENING_WDV) - NVL(V_DEPRECIATION
                                    ,0);
            UPDATE
              JAI_FA_AST_BLOCKS
            SET
              OPENING_WDV = NVL(V_PREV_CLOSING_BALANCE
                 ,ADJUST.OPENING_WDV)
            WHERE START_DATE = ADJUST.START_DATE
              AND BLOCK_ID = ADJUST.BLOCK_ID;
            IF ADJUST.CLOSING_WDV IS NOT NULL THEN
              UPDATE
                JAI_FA_DEP_BLOCKS
              SET
                DEPN_OF_ASSETS = V_DEPRECIATION
              WHERE BLOCK_ID = ADJUST.BLOCK_ID
                AND SLNO = 0;
              UPDATE
                JAI_FA_AST_BLOCKS
              SET
                CLOSING_WDV = NVL(V_CLOSING_BALANCE
                   ,0)
                ,YEAR_ENDED = V_YEAR_END
              WHERE BLOCK_ID = ADJUST.BLOCK_ID;
            END IF;
            V_PREV_CLOSING_BALANCE := V_CLOSING_BALANCE;
          END LOOP;
        END LOOP;
      END IF;
      K := 0;
      C_BLOCK_ID := TEMP_REC.BLOCKID;
    END LOOP;
    UPDATE
      JAI_FA_AST_BLOCKS
    SET
      OPENING_WDV_ADJ = NULL
      ,DEPN_ADJ = NULL
    WHERE START_DATE BETWEEN P_YEAR_START
      AND P_YEAR_END
      AND OPENING_WDV_ADJ is not null
    OR DEPN_ADJ is not null
      AND BOOK_TYPE_CODE = P_BOOK_NAME;
    DELETE FROM JAI_FA_EXEMPTIONS;
    COMMIT;
  END RUN_DEP_MASS;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DELETE FROM JAI_FA_DEP_BLOCKS_T;
    COMMIT;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_9FORMULA(BLOCK_ID IN NUMBER) RETURN NUMBER IS
    CURSOR ASSET_COST(CP_STATUS IN FA_RETIREMENTS.STATUS%TYPE) IS
      SELECT
        NVL(SUM(SLNO)
           ,0) COST
      FROM
        JAI_FA_DEP_BLOCKS_T
      WHERE ASSET_ID Not In (
        SELECT
          ASSET_ID
        FROM
          FA_RETIREMENTS
        WHERE BOOK_TYPE_CODE = BOOK_NAME
          AND STATUS = CP_STATUS
          AND DATE_RETIRED between START_DATE
          AND END_DATE_N )
        AND BLOCK_ID = BLOCK_ID
      GROUP BY
        BLOCK_ID;
    V_ASSET_COST NUMBER;
  BEGIN
    OPEN ASSET_COST('PROCESSED');
    FETCH ASSET_COST
     INTO V_ASSET_COST;
    CLOSE ASSET_COST;
    /*SRW.MESSAGE(1275
               ,'CF_9 book_name -> ' || BOOK_NAME || ', Block_id -> ' || BLOCK_ID || ', START_date -> ' || START_DATE || ', END_date -> ' || END_DATE || ', v_asset_cost -> ' || V_ASSET_COST)*/NULL;
    RETURN (V_ASSET_COST);
  END CF_9FORMULA;

  FUNCTION TOTALDEPRN(P_BOOK_NAME IN JAI_FA_AST_BLOCKS.BOOK_TYPE_CODE%TYPE
                     ,P_YEAR_START IN JAI_FA_AST_YEARS.YEAR_START%TYPE
                     ,P_YEAR_END IN JAI_FA_AST_YEARS.YEAR_END%TYPE
                     ,P_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE
                     ,P_NO_ASSETS OUT NOCOPY VARCHAR2) RETURN NUMBER IS
    LV_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_EXPENSED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_STATUS FA_RETIREMENTS.STATUS%TYPE;
    CURSOR CUR_GET_VALID_ASSETS IS
      SELECT
        '1'
      FROM
        JAI_FA_AST_BLOCK_DTLS JBA,
        FA_BOOKS FAB,
        JAI_FA_AST_BLOCKS JABOA
      WHERE JBA.ASSET_ID = FAB.ASSET_ID
        AND ( ( JBA.ASSET_TYPE = LV_CAPITALIZED
        AND FAB.CAPITALIZE_FLAG = LV_FLAG )
      OR JBA.ASSET_TYPE = LV_EXPENSED )
        AND JBA.DATE_OF_ACQUISITION BETWEEN JABOA.START_DATE
        AND NVL(JABOA.YEAR_ENDED
         ,P_YEAR_END)
        AND FAB.DATE_INEFFECTIVE IS NULL
        AND FAB.TRANSACTION_HEADER_ID_OUT IS NULL
        AND FAB.PERIOD_COUNTER_FULLY_RETIRED IS NULL
        AND JBA.BLOCK_ID = JABOA.BLOCK_ID
        AND JABOA.BOOK_TYPE_CODE = FAB.BOOK_TYPE_CODE
        AND JABOA.BOOK_TYPE_CODE = P_BOOK_NAME
        AND JABOA.TYPE = (
        SELECT
          TYPE
        FROM
          JAI_FA_AST_BLOCKS
        WHERE BLOCK_ID = P_BLOCK_ID )
        AND ( JABOA.START_DATE <= NVL(P_YEAR_START
         ,JABOA.START_DATE)
      OR JABOA.START_DATE BETWEEN NVL(P_YEAR_START
         ,JABOA.START_DATE)
        AND NVL(P_YEAR_END
         ,JABOA.YEAR_ENDED) );
    CURSOR CUR_GET_ST_OP_BAL(CP_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE) IS
      SELECT
        OPENING_WDV
      FROM
        JAI_FA_AST_BLOCKS JABOA
      WHERE JABOA.BOOK_TYPE_CODE = P_BOOK_NAME
        AND JABOA.TYPE = (
        SELECT
          TYPE
        FROM
          JAI_FA_AST_BLOCKS
        WHERE BLOCK_ID = CP_BLOCK_ID )
      ORDER BY
        START_DATE ASC;
    LV_EXISTS VARCHAR2(1);
    LN_OPENING_WDV JAI_FA_AST_BLOCKS.OPENING_WDV%TYPE;
    CURSOR DEPR_CUR1 IS
      SELECT
        A.ASSET_ID,
        A.COST,
        A.TRANSACTION_HEADER_ID_IN,
        A.DATE_EFFECTIVE
      FROM
        FA_BOOKS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_BLOCK_DTLS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE A.ASSET_ID = C.ASSET_ID
        AND ( ( C.ASSET_TYPE = LV_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR C.ASSET_TYPE = LV_EXPENSED )
        AND B.BLOCK_ID = P_BLOCK_ID
        AND B.BLOCK_ID = C.BLOCK_ID
        AND A.BOOK_TYPE_CODE = B.BOOK_TYPE_CODE
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND C.DATE_OF_ACQUISITION between D.START_DATE
        AND D.END_DATE
        AND B.START_DATE between NVL(P_YEAR_START
         ,B.START_DATE)
        AND NVL(P_YEAR_END
         ,B.YEAR_ENDED)
        AND D.START_DATE >= ADD_MONTHS(P_YEAR_START
                ,6)
        AND D.SLNO = 2
        AND A.DATE_INEFFECTIVE is null
        AND A.TRANSACTION_HEADER_ID_OUT is null;
    CURSOR GETRATE IS
      SELECT
        NVL(RATE
           ,0) RATE,
        TYPE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID;
    CURSOR BLOCK_RET_CUR_FIR(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_ADDITIONS B,
        FA_RETIREMENTS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE B.CONTEXT = P_CONTEXT_VALUE
        AND TO_CHAR(A.BLOCK_ID) = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.OWNED_LEASED = 'OWNED'
        AND B.ASSET_TYPE IN ( 'CAPITALIZED' , 'EXPENSED' )
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RRRR') between D.START_DATE
        AND D.END_DATE
        AND D.START_DATE < ADD_MONTHS(P_YEAR_START
                ,6)
        AND D.SLNO = 1
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = 'PROCESSED'
        AND A.TYPE = P_BLOCK_TYPE
        AND A.BLOCK_ID = P_BLOCK_ID
        AND C.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR BLOCK_RET_CUR_SEC(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_ADDITIONS B,
        FA_RETIREMENTS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE B.CONTEXT = P_CONTEXT_VALUE
        AND TO_CHAR(A.BLOCK_ID) = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = P_BOOK_NAME
        AND B.OWNED_LEASED = 'OWNED'
        AND B.ASSET_TYPE IN ( 'CAPITALIZED' , 'EXPENSED' )
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RRRR') between D.START_DATE
        AND D.END_DATE
        AND D.START_DATE >= ADD_MONTHS(P_YEAR_START
                ,6)
        AND D.SLNO = 2
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = 'PROCESSED'
        AND A.TYPE = P_BLOCK_TYPE
        AND A.BLOCK_ID = P_BLOCK_ID
        AND C.DATE_RETIRED BETWEEN P_YEAR_START
        AND P_YEAR_END;
    CURSOR TOTCOST_CUR IS
      SELECT
        NVL(SUM(SLNO)
           ,0) COST
      FROM
        JAI_FA_DEP_BLOCKS_T
      WHERE BLOCK_ID = P_BLOCK_ID;
    CURSOR TOTOPBAL_CUR IS
      SELECT
        NVL(OPENING_WDV
           ,0)
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID;
    CURSOR ADJ_AMOUNT_CUR IS
      SELECT
        NVL(OPENING_WDV_ADJ
           ,0)
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = P_BLOCK_ID;
    V_COST NUMBER;
    V_TOTAL1 NUMBER;
    V_TOTAL2 NUMBER;
    V_DEPRN NUMBER;
    V_DEPRNAFTER NUMBER;
    V_DEPRNBEFORE NUMBER;
    V_RATE NUMBER;
    V_FIR_DEDUCTION NUMBER;
    V_SEC_DEDUCTION NUMBER;
    V_DEDUCTION NUMBER;
    V_TOTCOST NUMBER;
    V_OPBAL NUMBER;
    V_TYPE JAI_FA_AST_BLOCKS.TYPE%TYPE;
    V_ADJ NUMBER;
    LN_TOTAL_BLK_SEC_HF_COST NUMBER := 0;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'1 in totaldeprn function ')*/NULL;
    LV_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_EXPENSED := 'EXPENSED';
    LV_STATUS := 'PROCESSED';
    P_NO_ASSETS := 'NO';
    V_COST := NULL;
    V_TOTAL1 := NULL;
    V_TOTAL2 := NULL;
    V_DEPRN := NULL;
    V_DEPRNAFTER := NULL;
    V_DEPRNBEFORE := NULL;
    V_RATE := NULL;
    V_DEDUCTION := NULL;
    V_TOTCOST := NULL;
    V_OPBAL := NULL;
    V_ADJ := NULL;
    OPEN CUR_GET_VALID_ASSETS;
    FETCH CUR_GET_VALID_ASSETS
     INTO LV_EXISTS;
    OPEN CUR_GET_ST_OP_BAL(CP_BLOCK_ID => P_BLOCK_ID);
    FETCH CUR_GET_ST_OP_BAL
     INTO LN_OPENING_WDV;
    CLOSE CUR_GET_ST_OP_BAL;
    IF CUR_GET_VALID_ASSETS%NOTFOUND AND LN_OPENING_WDV = 0 THEN
      /*SRW.MESSAGE(1275
                 ,'5.6.2 opening wdv for the first period record for the type and book name is 0')*/NULL;
      V_DEPRN := 0;
      P_NO_ASSETS := 'YES';
    ELSE
      /*SRW.MESSAGE(1275
                 ,'5.6.3 Some assets are active, so depreciation calculations can proceed ')*/NULL;
      OPEN GETRATE;
      FETCH GETRATE
       INTO V_RATE,V_TYPE;
      CLOSE GETRATE;
      OPEN BLOCK_RET_CUR_FIR(V_TYPE);
      FETCH BLOCK_RET_CUR_FIR
       INTO V_FIR_DEDUCTION;
      CLOSE BLOCK_RET_CUR_FIR;
      OPEN BLOCK_RET_CUR_SEC(V_TYPE);
      FETCH BLOCK_RET_CUR_SEC
       INTO V_SEC_DEDUCTION;
      CLOSE BLOCK_RET_CUR_SEC;
      OPEN TOTCOST_CUR;
      FETCH TOTCOST_CUR
       INTO V_TOTCOST;
      CLOSE TOTCOST_CUR;
      OPEN TOTOPBAL_CUR;
      FETCH TOTOPBAL_CUR
       INTO V_OPBAL;
      CLOSE TOTOPBAL_CUR;
      OPEN ADJ_AMOUNT_CUR;
      FETCH ADJ_AMOUNT_CUR
       INTO V_ADJ;
      CLOSE ADJ_AMOUNT_CUR;
      /*SRW.MESSAGE(1275
                 ,'5.6.4 values V_Rate -> ' || V_RATE || 'v_type -> ' || V_TYPE || ' v_deduction -> ' || V_DEDUCTION || ' v_totcost-> ' || V_TOTCOST || 'v_opbal -> ' || V_OPBAL || 'v_adj -> ' || V_ADJ)*/NULL;
      FOR rec_depr_cur IN DEPR_CUR1 LOOP
        LN_TOTAL_BLK_SEC_HF_COST := CALCULATE_ACTUAL_COST(P_TRANSACTION_HEADER_ID_IN => REC_DEPR_CUR.TRANSACTION_HEADER_ID_IN
                                                         ,P_DATE_EFFECTIVE => REC_DEPR_CUR.DATE_EFFECTIVE
                                                         ,P_BOOK_NAME => P_BOOK_NAME
                                                         ,P_ASSET_ID => REC_DEPR_CUR.ASSET_ID
                                                         ,P_COST => NVL(REC_DEPR_CUR.COST
                                                            ,0)) + LN_TOTAL_BLK_SEC_HF_COST;
      END LOOP;
      /*SRW.MESSAGE(1275
                 ,'5.6.7 ln_total_blk_sec_hf_cost      ->' || LN_TOTAL_BLK_SEC_HF_COST)*/NULL;
      V_TOTAL2 := NVL(V_OPBAL
                     ,0) + NVL(V_ADJ
                     ,0) + NVL(V_TOTCOST
                     ,0) - NVL(LN_TOTAL_BLK_SEC_HF_COST
                     ,0) - NVL(V_FIR_DEDUCTION
                     ,0);
      IF V_TOTAL2 < 0 THEN
        V_DEPRNBEFORE := 0;
        LN_TOTAL_BLK_SEC_HF_COST := NVL(LN_TOTAL_BLK_SEC_HF_COST
                                       ,0) + V_TOTAL2;
      ELSE
        V_DEPRNBEFORE := V_TOTAL2 * (V_RATE / 100);
      END IF;
      LN_TOTAL_BLK_SEC_HF_COST := NVL(LN_TOTAL_BLK_SEC_HF_COST
                                     ,0) - NVL(V_SEC_DEDUCTION
                                     ,0);
      V_DEPRNAFTER := NVL(LN_TOTAL_BLK_SEC_HF_COST
                         ,0) * (V_RATE / 100) * 0.5;
      V_DEPRN := V_DEPRNBEFORE + V_DEPRNAFTER;
      IF V_DEPRN <= 0 THEN
        V_DEPRN := 0;
      END IF;
      NULL;
    END IF;
    CLOSE CUR_GET_VALID_ASSETS;
    RETURN (V_DEPRN);
  END TOTALDEPRN;

  PROCEDURE DEL_ATTR1_NULL IS
    CURSOR GET_NULL_ATTR1 IS
      SELECT
        COUNT(*)
      FROM
        FA_ADDITIONS
      WHERE LENGTH(ATTRIBUTE1) = 1
        AND CONTEXT = P_CONTEXT_VALUE;
    V_COUNT NUMBER;
    CURSOR GET_VAL_ATTR1 IS
      SELECT
        count(*)
      FROM
        FA_ADDITIONS
      WHERE ATTRIBUTE1 IS NOT NULL
        AND LENGTH(ATTRIBUTE1) <> 0
        AND CONTEXT = P_CONTEXT_VALUE;
    V_COUNT_ATTR NUMBER;
  BEGIN
    OPEN GET_NULL_ATTR1;
    FETCH GET_NULL_ATTR1
     INTO V_COUNT;
    CLOSE GET_NULL_ATTR1;
    OPEN GET_VAL_ATTR1;
    FETCH GET_VAL_ATTR1
     INTO V_COUNT_ATTR;
    CLOSE GET_VAL_ATTR1;
    IF V_COUNT > 0 THEN
      UPDATE
        FA_ADDITIONS_B
      SET
        ATTRIBUTE1 = NULL
      WHERE LENGTH(ATTRIBUTE1) = 1
        AND CONTEXT = P_CONTEXT_VALUE;
      COMMIT;
    END IF;
    IF V_COUNT_ATTR > 0 THEN
      UPDATE
        FA_ADDITIONS_B
      SET
        ATTRIBUTE1 = TO_CHAR(TO_DATE(ATTRIBUTE1
                       ,'DD-MON-RRRR')
               ,'DD-MON-RRRR')
      WHERE ATTRIBUTE1 IS NOT NULL
        AND LENGTH(ATTRIBUTE1) <> 1
        AND CONTEXT = P_CONTEXT_VALUE;
      COMMIT;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END DEL_ATTR1_NULL;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  PROCEDURE UPD_FA_ADD_CONTXT IS
    CURSOR GET_ATTR_CONTEXT IS
      SELECT
        CONTEXT
      FROM
        FA_ADDITIONS_B
      WHERE ATTRIBUTE1 is NOT NULL
        AND ATTRIBUTE2 IN (
        SELECT
          DISTINCT
          TO_CHAR(BLOCK_ID)
        FROM
          JAI_FA_AST_BLOCKS );
    GET_ATTR_CONTEXT_REC GET_ATTR_CONTEXT%ROWTYPE;
  BEGIN
    OPEN GET_ATTR_CONTEXT;
    FETCH GET_ATTR_CONTEXT
     INTO GET_ATTR_CONTEXT_REC;
    IF GET_ATTR_CONTEXT%FOUND THEN
      UPDATE
        FA_ADDITIONS_B
      SET
        CONTEXT = 'India B Of Assets'
      WHERE ATTRIBUTE1 IS NOT NULL
        AND ATTRIBUTE2 IN (
        SELECT
          DISTINCT
          TO_CHAR(BLOCK_ID)
        FROM
          JAI_FA_AST_BLOCKS );
      COMMIT;
    END IF;
    CLOSE GET_ATTR_CONTEXT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(2000
                 ,'SORRY NO DATA')*/NULL;
    WHEN OTHERS THEN
      NULL;
  END UPD_FA_ADD_CONTXT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.5 Last modified date is 13/10/2005')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    P_CONTEXT_VALUE := 'India B Of Assets';
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_8FORMULA(COST IN NUMBER
                      ,TRANSACTION_HEADER_ID_IN IN NUMBER
                      ,DATE_EFFECTIVE IN DATE
                      ,ASSET_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE,CP_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE,CP_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE,CP_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE) IS
      SELECT
        TRANSACTION_HEADER_ID_IN,
        DATE_EFFECTIVE,
        FAB.COST
      FROM
        FA_BOOKS FAB
      WHERE FAB.TRANSACTION_HEADER_ID_OUT = CP_TRANSACTION_HEADER_ID_IN
        AND TRUNC(FAB.DATE_INEFFECTIVE) = TRUNC(CP_DATE_EFFECTIVE)
        AND FAB.BOOK_TYPE_CODE = CP_BOOK_NAME
        AND FAB.ASSET_ID = CP_ASSET_ID
        AND FAB.RETIREMENT_ID IS NOT NULL;
    REC_CUR_GET_ADDITION_COST CUR_GET_ADDITION_COST%ROWTYPE;
    LN_ADDITION_COST FA_BOOKS.COST%TYPE;
    LN_TRANSACTION_HEADER_ID_IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE;
    LD_DATE_EFFECTIVE FA_BOOKS.DATE_EFFECTIVE%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'in cf8 formula column processing')*/NULL;
    IF NVL(COST
       ,0) <> 0 THEN
      LN_ADDITION_COST := COST;
      LN_TRANSACTION_HEADER_ID_IN := TRANSACTION_HEADER_ID_IN;
      LD_DATE_EFFECTIVE := DATE_EFFECTIVE;
      LOOP
        OPEN CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN => LN_TRANSACTION_HEADER_ID_IN,CP_DATE_EFFECTIVE => LD_DATE_EFFECTIVE,CP_BOOK_NAME => BOOK_NAME,CP_ASSET_ID => ASSET_ID);
        FETCH CUR_GET_ADDITION_COST
         INTO REC_CUR_GET_ADDITION_COST;
        IF CUR_GET_ADDITION_COST%NOTFOUND THEN
          CLOSE CUR_GET_ADDITION_COST;
          EXIT;
        ELSE
          LN_TRANSACTION_HEADER_ID_IN := REC_CUR_GET_ADDITION_COST.TRANSACTION_HEADER_ID_IN;
          LD_DATE_EFFECTIVE := REC_CUR_GET_ADDITION_COST.DATE_EFFECTIVE;
          LN_ADDITION_COST := REC_CUR_GET_ADDITION_COST.COST;
          CLOSE CUR_GET_ADDITION_COST;
        END IF;
      END LOOP;
      /*SRW.MESSAGE(1275
                 ,'value of  ln_addition_cost is ' || LN_ADDITION_COST)*/NULL;
      RETURN (LN_ADDITION_COST);
    ELSE
      RETURN 0;
    END IF;
  END CF_8FORMULA;

  FUNCTION GET_TRANSACTION_HEADER_ID(P_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE
                                    ,P_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE
                                    ,P_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE) RETURN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE IS
    CURSOR CUR_GET_ACTIVE_TRANSACTION_ID IS
      SELECT
        FAB.TRANSACTION_HEADER_ID_IN,
        FAB.DATE_EFFECTIVE,
        FAB.COST
      FROM
        FA_BOOKS FAB,
        JAI_FA_AST_BLOCK_DTLS JBA
      WHERE FAB.ASSET_ID = JBA.ASSET_ID
        AND JBA.BLOCK_ID = P_BLOCK_ID
        AND JBA.ASSET_ID = P_ASSET_ID
        AND FAB.TRANSACTION_HEADER_ID_OUT IS NULL
        AND FAB.DATE_INEFFECTIVE IS NULL
        AND FAB.BOOK_TYPE_CODE = P_BOOK_NAME;
    CURSOR CUR_GET_TRANSACTION_ID_IN(CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE,CP_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE,CP_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE,CP_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE) IS
      SELECT
        TRANSACTION_HEADER_ID_IN,
        DATE_EFFECTIVE
      FROM
        FA_BOOKS FAB
      WHERE FAB.TRANSACTION_HEADER_ID_OUT = CP_TRANSACTION_HEADER_ID_IN
        AND TRUNC(FAB.DATE_INEFFECTIVE) = TRUNC(CP_DATE_EFFECTIVE)
        AND FAB.BOOK_TYPE_CODE = CP_BOOK_NAME
        AND FAB.ASSET_ID = CP_ASSET_ID
        AND FAB.RETIREMENT_ID IS NOT NULL;
    REC_CUR_GET_ACT_TRANS_ID CUR_GET_ACTIVE_TRANSACTION_ID%ROWTYPE;
    REC_CUR_GET_TRANS_ID_IN CUR_GET_TRANSACTION_ID_IN%ROWTYPE;
    LN_TRANSACTION_HEADER_ID_IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE;
    LD_DATE_EFFECTIVE FA_BOOKS.DATE_EFFECTIVE%TYPE;
  BEGIN
    OPEN CUR_GET_ACTIVE_TRANSACTION_ID;
    FETCH CUR_GET_ACTIVE_TRANSACTION_ID
     INTO REC_CUR_GET_ACT_TRANS_ID;
    IF CUR_GET_ACTIVE_TRANSACTION_ID%NOTFOUND THEN
      CLOSE CUR_GET_ACTIVE_TRANSACTION_ID;
      RETURN (NULL);
    END IF;
    CLOSE CUR_GET_ACTIVE_TRANSACTION_ID;
    LN_TRANSACTION_HEADER_ID_IN := REC_CUR_GET_ACT_TRANS_ID.TRANSACTION_HEADER_ID_IN;
    LD_DATE_EFFECTIVE := REC_CUR_GET_ACT_TRANS_ID.DATE_EFFECTIVE;
    LOOP
      /*SRW.MESSAGE(1275
                 ,'get_transaction_header_id 1 in loop 2 - transaction_header_id_in is ' || LN_TRANSACTION_HEADER_ID_IN)*/NULL;
      OPEN CUR_GET_TRANSACTION_ID_IN(CP_TRANSACTION_HEADER_ID_IN => LN_TRANSACTION_HEADER_ID_IN,CP_DATE_EFFECTIVE => LD_DATE_EFFECTIVE,CP_BOOK_NAME => P_BOOK_NAME,CP_ASSET_ID => P_ASSET_ID);
      FETCH CUR_GET_TRANSACTION_ID_IN
       INTO REC_CUR_GET_TRANS_ID_IN;
      IF CUR_GET_TRANSACTION_ID_IN%NOTFOUND THEN
        /*SRW.MESSAGE(1275
                   ,'get_transaction_header_id - 2 in loop 3 - abt to exit transaction_header_id_in is ' || LN_TRANSACTION_HEADER_ID_IN)*/NULL;
        CLOSE CUR_GET_TRANSACTION_ID_IN;
        EXIT;
      ELSE
        /*SRW.MESSAGE(1275
                   ,' get_transaction_header_id-3 loop 4 in else part, transaction_header_id ' || REC_CUR_GET_TRANS_ID_IN.TRANSACTION_HEADER_ID_IN)*/NULL;
        LN_TRANSACTION_HEADER_ID_IN := REC_CUR_GET_TRANS_ID_IN.TRANSACTION_HEADER_ID_IN;
        LD_DATE_EFFECTIVE := REC_CUR_GET_TRANS_ID_IN.DATE_EFFECTIVE;
        CLOSE CUR_GET_TRANSACTION_ID_IN;
      END IF;
    END LOOP;
    RETURN (LN_TRANSACTION_HEADER_ID_IN);
  END GET_TRANSACTION_HEADER_ID;

  FUNCTION CF_CLOSING_WDV_TOTFORMULA(CF_6 IN NUMBER
                                    ,CF_2 IN NUMBER) RETURN NUMBER IS
    LN_CLOSING_WDV_TOTAL JAI_FA_AST_BLOCKS.CLOSING_WDV%TYPE;
  BEGIN
    IF NVL(CF_6
       ,0) = 0 THEN
      LN_CLOSING_WDV_TOTAL := 0;
    ELSE
      LN_CLOSING_WDV_TOTAL := NVL(CF_2 - CF_6
                                 ,0);
    END IF;
    IF LN_CLOSING_WDV_TOTAL < 0 THEN
      LN_CLOSING_WDV_TOTAL := 0;
    END IF;
    RETURN (LN_CLOSING_WDV_TOTAL);
  END CF_CLOSING_WDV_TOTFORMULA;

  FUNCTION CALCULATE_ACTUAL_COST(P_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE
                                ,P_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE
                                ,P_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE
                                ,P_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE
                                ,P_COST IN FA_BOOKS.COST%TYPE) RETURN NUMBER IS
    CURSOR CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE,CP_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE,CP_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE,CP_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE) IS
      SELECT
        TRANSACTION_HEADER_ID_IN,
        DATE_EFFECTIVE,
        FAB.COST
      FROM
        FA_BOOKS FAB
      WHERE FAB.TRANSACTION_HEADER_ID_OUT = CP_TRANSACTION_HEADER_ID_IN
        AND TRUNC(FAB.DATE_INEFFECTIVE) = TRUNC(CP_DATE_EFFECTIVE)
        AND FAB.BOOK_TYPE_CODE = CP_BOOK_NAME
        AND FAB.ASSET_ID = CP_ASSET_ID
        AND FAB.RETIREMENT_ID IS NOT NULL;
    REC_CUR_GET_ADDITION_COST CUR_GET_ADDITION_COST%ROWTYPE;
    LN_ADDITION_COST FA_BOOKS.COST%TYPE;
    LN_TRANSACTION_HEADER_ID_IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE;
    LD_DATE_EFFECTIVE FA_BOOKS.DATE_EFFECTIVE%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'in function calculate_actual_cost for actual cost processing')*/NULL;
    LN_ADDITION_COST := P_COST;
    LN_TRANSACTION_HEADER_ID_IN := P_TRANSACTION_HEADER_ID_IN;
    LD_DATE_EFFECTIVE := P_DATE_EFFECTIVE;
    LOOP
      OPEN CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN => LN_TRANSACTION_HEADER_ID_IN,CP_DATE_EFFECTIVE => LD_DATE_EFFECTIVE,CP_BOOK_NAME => P_BOOK_NAME,CP_ASSET_ID => P_ASSET_ID);
      FETCH CUR_GET_ADDITION_COST
       INTO REC_CUR_GET_ADDITION_COST;
      IF CUR_GET_ADDITION_COST%NOTFOUND THEN
        CLOSE CUR_GET_ADDITION_COST;
        EXIT;
      ELSE
        LN_TRANSACTION_HEADER_ID_IN := REC_CUR_GET_ADDITION_COST.TRANSACTION_HEADER_ID_IN;
        LD_DATE_EFFECTIVE := REC_CUR_GET_ADDITION_COST.DATE_EFFECTIVE;
        LN_ADDITION_COST := REC_CUR_GET_ADDITION_COST.COST;
        CLOSE CUR_GET_ADDITION_COST;
      END IF;
    END LOOP;
    /*SRW.MESSAGE(1275
               ,'Asset ->' || P_ASSET_ID || ' Book_name ' || P_BOOK_NAME || 'value of ln_addition_cost is ' || LN_ADDITION_COST)*/NULL;
    RETURN (LN_ADDITION_COST);
  END CALCULATE_ACTUAL_COST;

END JA_JAINYEDE_XMLP_PKG;



/
