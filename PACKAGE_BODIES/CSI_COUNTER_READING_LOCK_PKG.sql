--------------------------------------------------------
--  DDL for Package Body CSI_COUNTER_READING_LOCK_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CSI_COUNTER_READING_LOCK_PKG" as
/* $Header: csitcrlb.pls 120.2 2006/02/06 14:42:28 epajaril noship $*/

G_PKG_NAME CONSTANT VARCHAR2(30):= 'CSI_COUNTER_READING_LOCK_PKG';
G_FILE_NAME CONSTANT VARCHAR2(12) := 'csitcrlb.pls';

PROCEDURE Insert_Row(
	px_READING_LOCK_ID                 IN OUT NOCOPY NUMBER
   	,p_COUNTER_ID                      NUMBER
   	,p_READING_LOCK_DATE               DATE
   	,p_OBJECT_VERSION_NUMBER           NUMBER
   	,p_LAST_UPDATE_DATE                DATE
   	,p_LAST_UPDATED_BY                  NUMBER
   	,p_CREATION_DATE                   DATE
   	,p_CREATED_BY                      NUMBER
   	,p_LAST_UPDATE_LOGIN               NUMBER
	,p_SOURCE_GROUP_REF_ID             NUMBER
	,p_SOURCE_GROUP_REF                VARCHAR2
	,p_SOURCE_HEADER_REF_ID            NUMBER
	,p_SOURCE_HEADER_REF               VARCHAR2
	,p_SOURCE_LINE_REF_ID              NUMBER
	,p_SOURCE_LINE_REF                 VARCHAR2
	,p_SOURCE_DIST_REF_ID1             NUMBER
	,p_SOURCE_DIST_REF_ID2             NUMBER
		) IS

	CURSOR C1 IS
	SELECT	CSI_CTR_READING_LOCKS_S.nextval
	FROM dual;
BEGIN
	IF (px_READING_LOCK_ID IS NULL) OR (px_READING_LOCK_ID = FND_API.G_MISS_NUM) THEN
		OPEN C1;
		FETCH C1 INTO px_READING_LOCK_ID;
		CLOSE C1;
	END IF;

	INSERT INTO CSI_COUNTER_READING_LOCKS(
		READING_LOCK_ID
   		,COUNTER_ID
   		,READING_LOCK_DATE
   		,OBJECT_VERSION_NUMBER
   		,LAST_UPDATE_DATE
   		,LAST_UPDATED_BY
   		,CREATION_DATE
   		,CREATED_BY
   		,LAST_UPDATE_LOGIN
		,SOURCE_GROUP_REF_ID
		,SOURCE_GROUP_REF
		,SOURCE_HEADER_REF_ID
		,SOURCE_HEADER_REF
		,SOURCE_LINE_REF_ID
		,SOURCE_LINE_REF
		,SOURCE_DIST_REF_ID1
		,SOURCE_DIST_REF_ID2
	)
	VALUES(
		px_READING_LOCK_ID
   		,decode(p_COUNTER_ID, FND_API.G_MISS_NUM, NULL, p_COUNTER_ID)
   		,decode(p_READING_LOCK_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), p_READING_LOCK_DATE)
   		,decode(p_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, p_OBJECT_VERSION_NUMBER)
   		,decode(p_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), p_LAST_UPDATE_DATE)
   		,decode(p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATED_BY)
   		,decode(p_CREATION_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), p_CREATION_DATE)
   		,decode(p_CREATED_BY, FND_API.G_MISS_NUM, NULL, p_CREATED_BY)
   		,decode(p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATE_LOGIN)
		,decode(p_SOURCE_GROUP_REF_ID, FND_API.G_MISS_NUM, NULL, p_SOURCE_GROUP_REF_ID)
		,decode(p_SOURCE_GROUP_REF, FND_API.G_MISS_CHAR, NULL, p_SOURCE_GROUP_REF)
		,decode(p_SOURCE_HEADER_REF_ID, FND_API.G_MISS_NUM, NULL, p_SOURCE_HEADER_REF_ID)
		,decode(p_SOURCE_HEADER_REF, FND_API.G_MISS_CHAR, NULL, p_SOURCE_HEADER_REF)
		,decode(p_SOURCE_LINE_REF_ID, FND_API.G_MISS_NUM, NULL, p_SOURCE_LINE_REF_ID)
		,decode(p_SOURCE_LINE_REF, FND_API.G_MISS_CHAR, NULL, p_SOURCE_LINE_REF)
		,decode(p_SOURCE_DIST_REF_ID1, FND_API.G_MISS_NUM, NULL, p_SOURCE_DIST_REF_ID1)
		,decode(p_SOURCE_DIST_REF_ID2, FND_API.G_MISS_NUM, NULL, p_SOURCE_DIST_REF_ID2)
	);
END	Insert_Row;

PROCEDURE Update_Row(
   p_READING_LOCK_ID                  NUMBER
   ,p_COUNTER_ID                      NUMBER
   ,p_READING_LOCK_DATE               DATE
   ,p_OBJECT_VERSION_NUMBER           NUMBER
   ,p_LAST_UPDATE_DATE                DATE
   ,p_LAST_UPDATED_BY                  NUMBER
   ,p_CREATION_DATE                   DATE
   ,p_CREATED_BY                      NUMBER
   ,p_LAST_UPDATE_LOGIN               NUMBER
   ,p_SOURCE_GROUP_REF_ID             NUMBER
   ,p_SOURCE_GROUP_REF                VARCHAR2
   ,p_SOURCE_HEADER_REF_ID            NUMBER
   ,p_SOURCE_HEADER_REF               VARCHAR2
   ,p_SOURCE_LINE_REF_ID              NUMBER
   ,p_SOURCE_LINE_REF                 VARCHAR2
   ,p_SOURCE_DIST_REF_ID1             NUMBER
   ,p_SOURCE_DIST_REF_ID2             NUMBER
   ) IS
BEGIN
   UPDATE CSI_COUNTER_READING_LOCKS
   SET
      COUNTER_ID = decode(p_COUNTER_ID, NULL, COUNTER_ID, FND_API.G_MISS_NUM, NULL, p_COUNTER_ID)
      ,READING_LOCK_DATE = decode(p_READING_LOCK_DATE, NULL, READING_LOCK_DATE, FND_API.G_MISS_DATE, NULL, p_READING_LOCK_DATE)
      ,OBJECT_VERSION_NUMBER = decode(p_OBJECT_VERSION_NUMBER, NULL, OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, p_OBJECT_VERSION_NUMBER)
      ,LAST_UPDATE_DATE = decode(p_LAST_UPDATE_DATE, NULL, LAST_UPDATE_DATE, FND_API.G_MISS_DATE, NULL, p_LAST_UPDATE_DATE)
      ,LAST_UPDATED_BY = decode(p_LAST_UPDATED_BY, NULL, LAST_UPDATED_BY, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATED_BY)
      ,CREATION_DATE = decode(p_CREATION_DATE, NULL, CREATION_DATE, FND_API.G_MISS_DATE, NULL, p_CREATION_DATE)
      ,CREATED_BY = decode(p_CREATED_BY, NULL, CREATED_BY, FND_API.G_MISS_NUM, NULL, p_CREATED_BY)
      ,LAST_UPDATE_LOGIN = decode(p_LAST_UPDATE_LOGIN, NULL, LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATE_LOGIN)
      ,SOURCE_GROUP_REF_ID = decode(p_SOURCE_GROUP_REF_ID, NULL, SOURCE_GROUP_REF_ID, FND_API.G_MISS_NUM, NULL, p_SOURCE_GROUP_REF_ID)
      ,SOURCE_GROUP_REF = decode(p_SOURCE_GROUP_REF, NULL, SOURCE_GROUP_REF, FND_API.G_MISS_CHAR, NULL, p_SOURCE_GROUP_REF)
      ,SOURCE_HEADER_REF_ID = decode(p_SOURCE_HEADER_REF_ID, NULL, SOURCE_HEADER_REF_ID, FND_API.G_MISS_NUM, NULL, p_SOURCE_HEADER_REF_ID)
      ,SOURCE_HEADER_REF = decode(p_SOURCE_HEADER_REF, NULL, SOURCE_HEADER_REF, FND_API.G_MISS_CHAR, NULL, p_SOURCE_HEADER_REF)
      ,SOURCE_LINE_REF_ID = decode(p_SOURCE_LINE_REF_ID, NULL, SOURCE_LINE_REF_ID, FND_API.G_MISS_NUM, NULL, p_SOURCE_LINE_REF_ID)
      ,SOURCE_LINE_REF = decode(p_SOURCE_LINE_REF, NULL, SOURCE_LINE_REF, FND_API.G_MISS_CHAR, NULL, p_SOURCE_LINE_REF)
      ,SOURCE_DIST_REF_ID1 = decode(p_SOURCE_DIST_REF_ID1, NULL, SOURCE_DIST_REF_ID1, FND_API.G_MISS_NUM, NULL, p_SOURCE_DIST_REF_ID1)
      ,SOURCE_DIST_REF_ID2 = decode(p_SOURCE_DIST_REF_ID2, NULL, SOURCE_DIST_REF_ID2, FND_API.G_MISS_NUM, NULL, p_SOURCE_DIST_REF_ID2)
   WHERE READING_LOCK_ID = p_READING_LOCK_ID;

   If (SQL%NOTFOUND) then
      RAISE NO_DATA_FOUND;
   End If;
END	Update_Row;

PROCEDURE Lock_Row(
	p_READING_LOCK_ID                  NUMBER
   	,p_COUNTER_ID                      NUMBER
   	,p_READING_LOCK_DATE               DATE
   	,p_OBJECT_VERSION_NUMBER           NUMBER
   	,p_LAST_UPDATE_DATE                DATE
   	,p_LAST_UPDATED_BY                  NUMBER
   	,p_CREATION_DATE                   DATE
   	,p_CREATED_BY                      NUMBER
   	,p_LAST_UPDATE_LOGIN               NUMBER
	,p_SOURCE_GROUP_REF_ID             NUMBER
	,p_SOURCE_GROUP_REF                VARCHAR2
	,p_SOURCE_HEADER_REF_ID            NUMBER
	,p_SOURCE_HEADER_REF               VARCHAR2
	,p_SOURCE_LINE_REF_ID              NUMBER
	,p_SOURCE_LINE_REF                 VARCHAR2
	,p_SOURCE_DIST_REF_ID1             NUMBER
	,p_SOURCE_DIST_REF_ID2             NUMBER
        ) IS

	CURSOR C1 IS
	SELECT *
	FROM CSI_COUNTER_READING_LOCKS
	WHERE READING_LOCK_ID = p_READING_LOCK_ID
	FOR UPDATE of READING_LOCK_ID NOWAIT;
	Recinfo C1%ROWTYPE;
BEGIN
	OPEN C1;
	FETCH C1 INTO Recinfo;
	IF (C1%NOTFOUND) THEN
		CLOSE C1;
		FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
		APP_EXCEPTION.RAISE_EXCEPTION;
	END IF;
	CLOSE C1;

	IF (
		(Recinfo.READING_LOCK_ID = p_READING_LOCK_ID)
   		AND ((Recinfo.COUNTER_ID = p_COUNTER_ID) OR ((Recinfo.COUNTER_ID IS NULL) AND (p_COUNTER_ID IS NULL)))
   		AND ((Recinfo.READING_LOCK_DATE = p_READING_LOCK_DATE) OR ((Recinfo.READING_LOCK_DATE IS NULL) AND (p_READING_LOCK_DATE IS NULL)))
   		AND ((Recinfo.OBJECT_VERSION_NUMBER = p_OBJECT_VERSION_NUMBER) OR ((Recinfo.OBJECT_VERSION_NUMBER IS NULL) AND (p_OBJECT_VERSION_NUMBER IS NULL)))
   		AND ((Recinfo.LAST_UPDATE_DATE = p_LAST_UPDATE_DATE) OR ((Recinfo.LAST_UPDATE_DATE IS NULL) AND (p_LAST_UPDATE_DATE IS NULL)))
   		AND ((Recinfo.LAST_UPDATED_BY = p_LAST_UPDATED_BY) OR ((Recinfo.LAST_UPDATED_BY IS NULL) AND (p_LAST_UPDATED_BY IS NULL)))
   		AND ((Recinfo.CREATION_DATE = p_CREATION_DATE) OR ((Recinfo.CREATION_DATE IS NULL) AND (p_CREATION_DATE IS NULL)))
   		AND ((Recinfo.CREATED_BY = p_CREATED_BY) OR ((Recinfo.CREATED_BY IS NULL) AND (p_CREATED_BY IS NULL)))
   		AND ((Recinfo.LAST_UPDATE_LOGIN = p_LAST_UPDATE_LOGIN) OR ((Recinfo.LAST_UPDATE_LOGIN IS NULL) AND (p_LAST_UPDATE_LOGIN IS NULL)))
		AND ((Recinfo.SOURCE_GROUP_REF_ID = p_SOURCE_GROUP_REF_ID) OR ((Recinfo.SOURCE_GROUP_REF_ID IS NULL) AND (p_SOURCE_GROUP_REF_ID IS NULL)))
		AND ((Recinfo.SOURCE_GROUP_REF = p_SOURCE_GROUP_REF) OR ((Recinfo.SOURCE_GROUP_REF IS NULL) AND (p_SOURCE_GROUP_REF IS NULL)))
		AND ((Recinfo.SOURCE_HEADER_REF_ID = p_SOURCE_HEADER_REF_ID) OR ((Recinfo.SOURCE_HEADER_REF_ID IS NULL) AND (p_SOURCE_HEADER_REF_ID IS NULL)))
		AND ((Recinfo.SOURCE_HEADER_REF = p_SOURCE_HEADER_REF) OR ((Recinfo.SOURCE_HEADER_REF IS NULL) AND (p_SOURCE_HEADER_REF IS NULL)))
		AND ((Recinfo.SOURCE_LINE_REF_ID = p_SOURCE_LINE_REF_ID) OR ((Recinfo.SOURCE_LINE_REF_ID IS NULL) AND (p_SOURCE_LINE_REF_ID IS NULL)))
		AND ((Recinfo.SOURCE_LINE_REF = p_SOURCE_LINE_REF) OR ((Recinfo.SOURCE_LINE_REF IS NULL) AND (p_SOURCE_LINE_REF IS NULL)))
		AND ((Recinfo.SOURCE_DIST_REF_ID1 = p_SOURCE_DIST_REF_ID1) OR ((Recinfo.SOURCE_DIST_REF_ID1 IS NULL) AND (p_SOURCE_DIST_REF_ID1 IS NULL)))
		AND ((Recinfo.SOURCE_DIST_REF_ID2 = p_SOURCE_DIST_REF_ID2) OR ((Recinfo.SOURCE_DIST_REF_ID2 IS NULL) AND (p_SOURCE_DIST_REF_ID2 IS NULL)))
	) THEN
		return;
	ELSE
      FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_CHANGED');
      APP_EXCEPTION.RAISE_EXCEPTION;
   END IF;
END	Lock_Row;

PROCEDURE Delete_Row(
	p_READING_LOCK_ID                  NUMBER
	) IS
BEGIN
	DELETE FROM CSI_COUNTER_READING_LOCKS
	WHERE READING_LOCK_ID = p_READING_LOCK_ID;

    If (SQL%NOTFOUND) then
        RAISE NO_DATA_FOUND;
    End If;
END	Delete_Row;

End CSI_COUNTER_READING_LOCK_PKG;

/
