--------------------------------------------------------
--  DDL for Package Body AP_APXIIWKF_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXIIWKF_XMLP_PKG" AS
/* $Header: APXIIWKFB.pls 120.0 2007/12/27 07:46:53 vjaganat noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      IF (SQLCODE < 0) THEN
        /*SRW.MESSAGE('999'
                   ,SQLERRM)*/NULL;
      END IF;
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_VOID AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_NA AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      LY.MEANING,
      LN.MEANING,
      L1.DISPLAYED_FIELD,
      L2.DISPLAYED_FIELD,
      L3.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_VOID,NLS_NA
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES L1,
      AP_LOOKUP_CODES L2,
      AP_LOOKUP_CODES L3
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND L1.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L1.LOOKUP_CODE = 'ALL'
      AND L2.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND L2.LOOKUP_CODE = 'VOID'
      AND L3.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L3.LOOKUP_CODE = 'NA';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_VOID := NLS_VOID;
    C_NLS_NA := NLS_NA;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
  --  C_NLS_NO_DATA_EXISTS := C_NLS_NO_DATA_EXISTS ;
 --   C_NLS_END_OF_REPORT := C_NLS_END_OF_REPORT ;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      CURRENT_CALLING_SEQUENCE VARCHAR2(2000);
      DEBUG_INFO VARCHAR2(200);
    BEGIN
      CURRENT_CALLING_SEQUENCE := 'Before Report Trigger<-AP_APXIIWKF_XMLP_PKG';
      C_REPORT_START_DATE := SYSDATE;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('1'
                   ,'(Before Report) After SRWINIT')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('2'
                   ,'(Before Report) After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('3'
                   ,'(Before Report) After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('4'
                   ,'(Before Report) After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (OPEN_INTERFACE_WORKFLOW(P_SOURCE
                             ,P_GROUP_ID
                             ,CURRENT_CALLING_SEQUENCE) <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('10'
                   ,'(Before Report) After Open_Interface_Workflow')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        IF (SQLCODE < 0) THEN
          /*SRW.MESSAGE('999'
                     ,SQLERRM)*/NULL;
        END IF;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_SOB_ID NUMBER;
  BEGIN
    IF P_SET_OF_BOOKS_ID IS NOT NULL THEN
      L_SOB_ID := P_SET_OF_BOOKS_ID;
      SELECT
        NAME,
        CHART_OF_ACCOUNTS_ID
      INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = L_SOB_ID;
      C_COMPANY_NAME_HEADER := L_NAME;
      C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION OPEN_INTERFACE_WORKFLOW(P_SOURCE IN VARCHAR2
                                  ,P_GROUP_ID IN VARCHAR2
                                  ,P_CALLING_SEQUENCE IN VARCHAR2) RETURN BOOLEAN IS
    CURSOR WORKFLOW_INVOICES IS
      SELECT
        INVOICE_ID
      FROM
        AP_INVOICES_INTERFACE
      WHERE SOURCE = P_SOURCE
        AND ( ( P_GROUP_ID IS NULL )
      OR ( GROUP_ID = P_GROUP_ID ) )
        AND NVL(WORKFLOW_FLAG
         ,'D') = 'Y';
    L_INVOICE_ID NUMBER;
    L_NUM_INVOICES NUMBER := 0;
    CURRENT_CALLING_SEQUENCE VARCHAR2(2000);
    DEBUG_INFO VARCHAR2(100);
  BEGIN
    CURRENT_CALLING_SEQUENCE := 'Import_Workflow<- ' || P_CALLING_SEQUENCE;
    DEBUG_INFO := 'Open workflow_invoices cursor';
    OPEN WORKFLOW_INVOICES;
    LOOP
      DEBUG_INFO := 'Fetch from workflow_invoices cursor';
      FETCH WORKFLOW_INVOICES
       INTO L_INVOICE_ID;
      EXIT WHEN WORKFLOW_INVOICES%NOTFOUND;
      DEBUG_INFO := 'Call workflow process for invoice_id ' || TO_CHAR(L_INVOICE_ID);
      START_INVOICE_PROCESS(L_INVOICE_ID);
    END LOOP;
    DEBUG_INFO := 'Close workflow_invoices cursor';
    CLOSE WORKFLOW_INVOICES;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('999'
                 ,DEBUG_INFO)*/NULL;
      IF (SQLCODE < 0) THEN
        /*SRW.MESSAGE('999'
                   ,SQLERRM)*/NULL;
      END IF;
      CLOSE WORKFLOW_INVOICES;
      RETURN (FALSE);
  END OPEN_INTERFACE_WORKFLOW;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_VOID;
  END C_NLS_VOID_P;

  FUNCTION C_NLS_NA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NA;
  END C_NLS_NA_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION INVOICE_IMPORT_WORKFLOW_P RETURN VARCHAR2 IS
  BEGIN
    RETURN INVOICE_IMPORT_WORKFLOW;
  END INVOICE_IMPORT_WORKFLOW_P;

  PROCEDURE CUSTOM_VALIDATE_INVOICE(P_ITEM_TYPE IN VARCHAR2
                                   ,P_ITEM_KEY IN VARCHAR2
                                   ,P_ACTID IN NUMBER
                                   ,P_FUNMODE IN VARCHAR2
                                   ,P_RESULT OUT NOCOPY VARCHAR2) IS
  BEGIN
 --   STPROC.INIT('begin AP_INTERFACE_WORKFLOW_PKG.CUSTOM_VALIDATE_INVOICE(:P_ITEM_TYPE, :P_ITEM_KEY, :P_ACTID, :P_FUNMODE, :P_RESULT); end;');
 --   STPROC.BIND_I(P_ITEM_TYPE);
 --   STPROC.BIND_I(P_ITEM_KEY);
 --   STPROC.BIND_I(P_ACTID);
 --   STPROC.BIND_I(P_FUNMODE);
 --   STPROC.BIND_O(P_RESULT);
 --   STPROC.EXECUTE;
 --   STPROC.RETRIEVE(5
  --                 ,P_RESULT);
  NULL;
  END CUSTOM_VALIDATE_INVOICE;

  PROCEDURE DO_CUSTOM_VALIDATION(P_INVOICE_ID IN NUMBER
                                ,P_RETURN_ERROR_MESSAGE OUT NOCOPY VARCHAR2) IS
  BEGIN
  --  STPROC.INIT('begin AP_INTERFACE_WORKFLOW_PKG.DO_CUSTOM_VALIDATION(:P_INVOICE_ID, :P_RETURN_ERROR_MESSAGE); end;');
   -- STPROC.BIND_I(P_INVOICE_ID);
   -- STPROC.BIND_O(P_RETURN_ERROR_MESSAGE);
   -- STPROC.EXECUTE;
    --STPROC.RETRIEVE(2
      --             ,P_RETURN_ERROR_MESSAGE);
      NULL;
  END DO_CUSTOM_VALIDATION;

  PROCEDURE START_INVOICE_PROCESS(P_INVOICE_ID IN NUMBER) IS
  BEGIN
  --  STPROC.INIT('begin AP_INTERFACE_WORKFLOW_PKG.START_INVOICE_PROCESS(:P_INVOICE_ID); end;');
  --  STPROC.BIND_I(P_INVOICE_ID);
 --   STPROC.EXECUTE;
 NULL;
  END START_INVOICE_PROCESS;

END AP_APXIIWKF_XMLP_PKG;


/
