--------------------------------------------------------
--  DDL for Package Body XTR_XTRFXEXP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRFXEXP_XMLP_PKG" AS
/* $Header: XTRFXEXPB.pls 120.1 2007/12/31 12:14:13 vjaganat noship $ */
  FUNCTION TOTAL_HEDGE1FORMULA RETURN VARCHAR2 IS
BEGIN
   /* EXECUTE IMMEDIATE
      'SELECT nvl(:FX_COVER,0) + nvl(:CF_COH_CABAL,0) INTO TOTAL_HEDGE from DUAL';
    COMMIT;*/
     RETURN (' ');
  END TOTAL_HEDGE1FORMULA;

  FUNCTION TOTAL_HEDGEFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END TOTAL_HEDGEFORMULA;

  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR CHK_LANG IS
      SELECT
        1
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRFXEXP';
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRFXEXP';
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1COMPANY' THEN
        Z1COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1CURRENCY' THEN
        Z1CURRENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AMOUNT_REQ' THEN
        Z2AMOUNT_REQ := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1AND_CALL_DEP_ADV' THEN
        Z1AND_CALL_DEP_ADV := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CCY' THEN
        Z2CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2COVER' THEN
        Z2COVER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CURR_AC_BALANCE' THEN
        Z2CURR_AC_BALANCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2FOR_POLICY' THEN
        Z2FOR_POLICY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2FX_OPTION' THEN
        Z2FX_OPTION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2FX_SPOT_FWDS' THEN
        Z2FX_SPOT_FWDS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NET_EXPOSURE' THEN
        Z2NET_EXPOSURE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NOTE_ALL_AMOUNTS' THEN
        Z2NOTE_ALL_AMOUNTS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL_EXPOSURE' THEN
        Z2TOTAL_EXPOSURE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL_HEDGE' THEN
        Z2TOTAL_HEDGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_FACTOR' THEN
        Z1P_FACTOR := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_EXPOSURE_TYPE' THEN
        Z1P_EXPOSURE_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_INCLUDE_IC' THEN
        Z1P_INCLUDE_IC := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    TEMP NUMBER(15) := 1000;
  BEGIN
    IF P_FACTOR IS NOT NULL THEN
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20),
        DECODE(SUBSTR(P_FACTOR
                     ,1
                     ,1)
              ,'U'
              ,1
              ,'T'
              ,1000
              ,'M'
              ,1000000
              ,'B'
              ,100000000)
      INTO
        LP_FACTOR_DESC
        ,TEMP
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = SUBSTR(P_FACTOR
            ,1
            ,1);
    ELSE
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20)
      INTO
        LP_FACTOR_DESC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = 'T';
      TEMP := 1000;
    END IF;
    AMT_UNIT2 := TEMP;
    COMPANY_CODE2 := P_COMPANY;
    CURRENCY_CODE2 := P_CURRENCY;
    IF P_EXPOSURE_TYPE = 'FIRM' THEN
      P_1 := 'and deal_subtype = ''FIRM''';
    ELSIF P_EXPOSURE_TYPE = 'INDICATIVE' THEN
      P_1 := 'and deal_subtype = ''INDIC''';
    ELSIF P_EXPOSURE_TYPE = 'NONE' THEN
      P_1 := 'and deal_subtype not in (''FIRM'',''INDIC'')';
    ELSIF P_EXPOSURE_TYPE = 'ALL' THEN
      P_1 := 'and deal_subtype in (''FIRM'',''INDIC'')';
    END IF;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME2
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = FND_GLOBAL.conc_request_id
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));
SELECT
      MEANING
    INTO
      P_EXPOSURE_TYPE_DSP
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'XTR_MISC'
      AND LOOKUP_CODE = P_EXPOSURE_TYPE;
    SELECT
      MEANING
    INTO
      P_FACTOR_DSP
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'XTR_MISC'
      AND LOOKUP_CODE = P_FACTOR;
    SELECT
      MEANING
    INTO
      P_YES_NO_DSP
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = NVL(P_INCLUDE_INTERCOMP
       ,'N');
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION CF_COH_CABALFORMULA(COMPANY IN VARCHAR2
                              ,CCY IN VARCHAR2
                              ,CASH_ON_HAND IN NUMBER) RETURN NUMBER IS
    L_COH_CABAL NUMBER := 0;
  BEGIN
    IF P_INCLUDE_INTERCOMP = 'Y' THEN
      SELECT
        NVL(SUM(AMOUNT)
           ,0) / AMT_UNIT2
      INTO
        L_COH_CABAL
      FROM
        XTR_DEAL_DATE_AMOUNTS DDA,
        XTR_BANK_ACCOUNTS BA
      WHERE DDA.COMPANY_CODE = COMPANY
        AND DDA.ACCOUNT_NO = BA.ACCOUNT_NUMBER
        AND DDA.CURRENCY = BA.CURRENCY
        AND BA.PARTY_TYPE = 'CP'
        AND DDA.DEAL_TYPE = 'CA'
        AND DDA.CURRENCY = CCY
        AND DDA.AMOUNT_TYPE = 'BAL';
    END IF;
    L_COH_CABAL := NVL(L_COH_CABAL
                      ,0) + NVL(CASH_ON_HAND
                      ,0);
    RETURN (L_COH_CABAL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NVL(L_COH_CABAL
                ,0) + NVL(CASH_ON_HAND
                ,0));
  END CF_COH_CABALFORMULA;

  FUNCTION CF_TEXP_IGBALFORMULA(COMPANY IN VARCHAR2
                               ,CCY IN VARCHAR2
                               ,TOTAL_EXP IN NUMBER) RETURN NUMBER IS
    L_TEXP_IGBAL NUMBER := 0;
  BEGIN
    IF P_INCLUDE_INTERCOMP = 'Y' THEN
      SELECT
        NVL(SUM(DECODE(ACTION_CODE
                      ,'REC'
                      ,AMOUNT
                      ,'PAY'
                      ,-AMOUNT))
           ,0) / AMT_UNIT2
      INTO
        L_TEXP_IGBAL
      FROM
        XTR_DEAL_DATE_AMOUNTS
      WHERE COMPANY_CODE = COMPANY
        AND DEAL_TYPE = 'IG'
        AND CURRENCY = CCY
        AND AMOUNT_TYPE = 'BAL'
        AND DATE_TYPE = 'BALANCE';
    END IF;
    L_TEXP_IGBAL := NVL(L_TEXP_IGBAL
                       ,0) + NVL(TOTAL_EXP
                       ,0);
    RETURN (L_TEXP_IGBAL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NVL(L_TEXP_IGBAL
                ,0) + NVL(TOTAL_EXP
                ,0));
  END CF_TEXP_IGBALFORMULA;

  FUNCTION CF_AMT_REQFORMULA(COVER IN VARCHAR2
                            ,MIN_HEDGE IN NUMBER
                            ,CF_TEXP_IGBAL IN NUMBER
                            ,MAX_HEDGE IN NUMBER
			    ,TOTAL_HEDGE IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF COVER < MIN_HEDGE THEN

      RETURN (-1 * (CF_TEXP_IGBAL * MIN_HEDGE / 100 + TOTAL_HEDGE));
    ELSIF COVER > MIN_HEDGE AND COVER <= MAX_HEDGE THEN
      RETURN 0;
    ELSE
      RETURN CF_TEXP_IGBAL * MAX_HEDGE / 100 + TOTAL_HEDGE;
    END IF;
  END CF_AMT_REQFORMULA;

  FUNCTION TOTAL_HEDGE_P RETURN NUMBER IS
  BEGIN
    RETURN TOTAL_HEDGE;
  END TOTAL_HEDGE_P;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRFXEXP_XMLP_PKG;


/
