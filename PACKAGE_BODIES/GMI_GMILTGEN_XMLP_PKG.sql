--------------------------------------------------------
--  DDL for Package Body GMI_GMILTGEN_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMI_GMILTGEN_XMLP_PKG" AS
/* $Header: GMILTGENB.pls 120.0 2007/12/24 13:14:29 nchinnam noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    COMP_NO NUMBER := 1;
    L_TRACE_ID NUMBER;
    CURSOR GET_ITEM_DATA IS
      SELECT
        IM.ITEM_ID,
        IL.LOT_ID
      FROM
        IC_ITEM_MST IM,
        IC_LOTS_MST IL
      WHERE IM.ITEM_NO = P_ITEM_NO
        AND IM.ITEM_ID = IL.ITEM_ID
        AND IL.LOT_NO = P_LOT_NO
        AND ( P_SUBLOT_NO IS NULL
      OR ( P_SUBLOT_NO IS NOT NULL
        AND P_SUBLOT_NO = SUBLOT_NO ) )
      ORDER BY
        IL.LOT_ID;
  BEGIN
    --GGM_TRACE.SET_TRACE_ON('GMI_GMILTGEN_XMLP_PKG');
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    IF FND_PROFILE.VALUE('GMI_LOTGENE_ENABLE_FMSEC') <> 'Y' THEN
      GMD_P_FS_CONTEXT.SET_ADDITIONAL_ATTR;
    END IF;
    FND_PROFILE.GET('LOT_GEN_DELIMITER'
                   ,P_DELIMIT);
    IF P_DELIMIT IS NULL THEN
      P_DELIMIT := '~';
    END IF;
    OPEN GET_ITEM_DATA;
    FETCH GET_ITEM_DATA
     INTO P_ITEM_ID,P_LOT_ID;
    CLOSE GET_ITEM_DATA;
    IF P_VIEW_BY = 1 THEN
      P_REP_TITLE := FND_MESSAGE.GET_STRING('GMI'
                                           ,'GMI_LOT_SOURCE');
      P_LOT_COMP_TITLE :=   FND_MESSAGE.GET_STRING('GMI'
                                                ,'GMI_LOT_INGD') ;
    ELSE
      P_REP_TITLE := FND_MESSAGE.GET_STRING('GMI'
                                           ,'GMI_LOT_WHERE_USED');
      P_LOT_COMP_TITLE := FND_MESSAGE.GET_STRING('GMI'
                                                ,'GMI_LOT_BYPRDS') ;
    END IF;
    SELECT
      GMI_LOT_TRACE_ID_S.NEXTVAL
    INTO P_TRACE_ID
    FROM
      DUAL;
    GMI_LOT_TRACE_PKG.EXP_LOT(P_ITEM_ID
                             ,P_LOT_ID
                             ,1
                             ,COMP_NO
                             ,P_VIEW_BY
                             ,P_TRACE_ID);
    COMMIT;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DELETE FROM GMI_LOT_TRACE
     WHERE LOT_TRACE_ID = P_TRACE_ID;
    COMMIT;
    --GGM_TRACE.SET_TRACE_OFF;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION ITEM_NOFORMULA(ITEM_ID IN NUMBER
                         ,LOT_ID IN NUMBER) RETURN CHAR IS
    L_ITEM_NO IC_ITEM_MST.ITEM_NO%TYPE;
    CURSOR CUR_DOCDTL IS
      SELECT
        TRANS_DATE,
        DOC_TYPE,
        ORGN_CODE,
        DOC_ID,
        LINE_ID,
        SUM(TRANS_QTY) TR_QTY,
        TRANS_UM
      FROM
        IC_TRAN_VW1
      WHERE ITEM_ID = ITEM_NOFORMULA.ITEM_ID
        AND LOT_ID = ITEM_NOFORMULA.LOT_ID
        AND COMPLETED_IND = 1
        AND DOC_TYPE not in ( 'GRDI' , 'GRDR' , 'TRNI' , 'TRNR' , 'STSI' , 'STSR' )
      GROUP BY
        TRANS_DATE,
        DOC_TYPE,
        ORGN_CODE,
        DOC_ID,
        LINE_ID,
        TRANS_UM
      ORDER BY
        TRANS_DATE ASC;
    REC_DOCDTL CUR_DOCDTL%ROWTYPE;
    CURSOR INVDTL IS
      SELECT
        IJM.ORGN_CODE,
        IJM.JOURNAL_NO
      FROM
        IC_JRNL_MST IJM,
        IC_ADJS_JNL IAJ
      WHERE IJM.JOURNAL_ID = IAJ.JOURNAL_ID
        AND IAJ.DOC_ID = REC_DOCDTL.DOC_ID;
    CURSOR PRODDTL IS
      SELECT
        PLANT_CODE,
        BATCH_NO
      FROM
        PM_BTCH_HDR
      WHERE BATCH_ID = REC_DOCDTL.DOC_ID;
    CURSOR CUR_PURCHDTL IS
      SELECT
        PRH.ORGN_CODE RECV_ORGN,
        PVM.VENDOR_NO VEND_NO,
        PVM.VENDOR_NAME VEND_NAME,
        PRH.RECV_NO RECV_NO,
        POH.PO_NO PO_NO,
        POH.ORGN_CODE PO_ORGN
      FROM
        PO_RECV_HDR PRH,
        PO_RECV_DTL PRD,
        PO_VEND_MST PVM,
        PO_ORDR_HDR POH
      WHERE PRH.RECV_ID = REC_DOCDTL.DOC_ID
        AND PRH.RECV_ID = PRD.RECV_ID
        AND PRD.LINE_ID = REC_DOCDTL.LINE_ID
        AND PRD.PO_ID = poh.po_id (+)
        AND PVM.VENDOR_ID = PRD.SHIPVEND_ID;
    CURSOR RCV_TRANSACTIONS_INFO IS
      SELECT
        SHIPMENT_HEADER_ID,
        PO_HEADER_ID,
        VENDOR_ID,
        VENDOR_SITE_ID
      FROM
        RCV_TRANSACTIONS
      WHERE SHIPMENT_HEADER_ID = REC_DOCDTL.DOC_ID
        AND TRANSACTION_ID = REC_DOCDTL.LINE_ID;
    REC_RCV_TRANSACTIONS RCV_TRANSACTIONS_INFO%ROWTYPE;
    CURSOR VENDOR_INFO IS
      SELECT
        VEND.SEGMENT1,
        VEND.VENDOR_NAME,
        SITE.VENDOR_SITE_CODE
      FROM
        PO_VENDORS VEND,
        PO_VENDOR_SITES_ALL SITE
      WHERE VEND.VENDOR_ID = REC_RCV_TRANSACTIONS.VENDOR_ID
        AND VEND.VENDOR_ID = SITE.VENDOR_ID
        AND SITE.VENDOR_SITE_ID = REC_RCV_TRANSACTIONS.VENDOR_SITE_ID;
    REC_VENDOR_INFO VENDOR_INFO%ROWTYPE;
    CURSOR RECV_INFO IS
      SELECT
        RECEIPT_NUM
      FROM
        RCV_SHIPMENT_HEADERS
      WHERE SHIPMENT_HEADER_ID = REC_RCV_TRANSACTIONS.SHIPMENT_HEADER_ID;
    CURSOR PO_INFO IS
      SELECT
        SEGMENT1,
        ATTRIBUTE15
      FROM
        PO_HEADERS_ALL
      WHERE PO_HEADER_ID = REC_RCV_TRANSACTIONS.PO_HEADER_ID;
    CURSOR CUR_VEND_NAME IS
      SELECT
        VENDOR_NO,
        VENDOR_NAME
      FROM
        PO_VEND_MST
      WHERE VENDOR_ID = (
        SELECT
          SHIPVEND_ID
        FROM
          IC_LOTS_MST
        WHERE ITEM_ID = ITEM_NOFORMULA.ITEM_ID
          AND LOT_ID = ITEM_NOFORMULA.LOT_ID );
  BEGIN
    BEGIN
      SELECT
        IM.ITEM_NO,
        IM.ITEM_DESC1,
        IM.SHELF_LIFE,
        IM.RETEST_INTERVAL,
        IL.LOT_NO,
        IL.SUBLOT_NO,
        IM.INV_CLASS,
        IM.INV_TYPE,
        IL.EXPIRE_DATE,
        IL.RETEST_DATE,
        IL.QC_GRADE,
        IL.VENDOR_LOT_NO
      INTO L_ITEM_NO,ITEM_DESC,SHELF_LIFE,RETEST_INTERVAL,LOT_NO,SUBLOT_NO,INV_CLASS,INV_TYPE,EXPIRE_DATE,RETEST_DATE,GRADE,VEND_LOT_NO
      FROM
        IC_ITEM_MST IM,
        IC_LOTS_MST IL
      WHERE IM.ITEM_ID = ITEM_NOFORMULA.ITEM_ID
        AND IL.LOT_ID = ITEM_NOFORMULA.LOT_ID
        AND IM.ITEM_ID = IL.ITEM_ID;
      OPEN CUR_DOCDTL;
      FETCH CUR_DOCDTL
       INTO REC_DOCDTL;
      IF CUR_DOCDTL%FOUND THEN
        CLOSE CUR_DOCDTL;
        CREATION_DATE := REC_DOCDTL.TRANS_DATE;
        LOT_CREATION_TYPE := REC_DOCDTL.DOC_TYPE;
        BEGINING_QTY := REC_DOCDTL.TR_QTY;
        TRANS_UM := REC_DOCDTL.TRANS_UM;
        IF REC_DOCDTL.DOC_TYPE in ('ADJI','ADJR','CREI','CRER') THEN
          OPEN INVDTL;
          FETCH INVDTL
           INTO JRNL_ORGN_CODE,JOURNAL_NO;
          CLOSE INVDTL;
          OPEN CUR_VEND_NAME;
          FETCH CUR_VEND_NAME
           INTO VEND_NO,VEND_NAME;
          CLOSE CUR_VEND_NAME;
        ELSIF REC_DOCDTL.DOC_TYPE in ('PROD') THEN
          OPEN PRODDTL;
          FETCH PRODDTL
           INTO PLANT_CODE,BATCH_NO;
          CLOSE PRODDTL;
        ELSIF REC_DOCDTL.DOC_TYPE = 'RECV' THEN
          OPEN CUR_PURCHDTL;
          FETCH CUR_PURCHDTL
           INTO RECV_ORGN_CODE,VEND_NO,VEND_NAME,RECV_NO,PO_NO,PO_ORGN_CODE;
          CLOSE CUR_PURCHDTL;
        ELSIF REC_DOCDTL.DOC_TYPE = 'PORC' THEN
          RECV_ORGN_CODE := REC_DOCDTL.ORGN_CODE;
          OPEN RCV_TRANSACTIONS_INFO;
          FETCH RCV_TRANSACTIONS_INFO
           INTO REC_RCV_TRANSACTIONS;
          CLOSE RCV_TRANSACTIONS_INFO;
          OPEN VENDOR_INFO;
          FETCH VENDOR_INFO
           INTO REC_VENDOR_INFO;
          CLOSE VENDOR_INFO;
          VEND_NAME := REC_VENDOR_INFO.VENDOR_NAME;
          VEND_NO := REC_VENDOR_INFO.SEGMENT1 || FND_PROFILE.VALUE('GL$VEND_DELIMITER') || REC_VENDOR_INFO.VENDOR_SITE_CODE;
          OPEN RECV_INFO;
          FETCH RECV_INFO
           INTO RECV_NO;
          CLOSE RECV_INFO;
          OPEN PO_INFO;
          FETCH PO_INFO
           INTO PO_NO,PO_ORGN_CODE;
          CLOSE PO_INFO;
        END IF;
      END IF;
      RETURN (L_ITEM_NO);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
  END ITEM_NOFORMULA;

  FUNCTION CF_1FORMULA(TRANS_DATE IN DATE) RETURN DATE IS
  BEGIN
    RETURN (TRANS_DATE);
  END CF_1FORMULA;

  FUNCTION I_ITEM_NOFORMULA(ITEM_ID2 IN NUMBER
                           ,LOT_ID3 IN NUMBER
                           ,CIR_FLG1 IN VARCHAR2
                           ,LEVEL_NO1 IN NUMBER) RETURN CHAR IS
    L_ITEM_NO IC_ITEM_MST.ITEM_NO%TYPE;
    I NUMBER := 1;
    L_LOT_NO IC_LOTS_MST.LOT_NO%TYPE;
    L_SUBLOT_NO IC_LOTS_MST.SUBLOT_NO%TYPE;
  BEGIN
    SELECT
      IM.ITEM_NO,
      IM.ITEM_DESC1,
      IL.LOT_NO,
      IL.SUBLOT_NO
    INTO L_ITEM_NO,I_ITEM_DESC,I_LOT_NO,I_SUBLOT_NO
    FROM
      IC_ITEM_MST IM,
      IC_LOTS_MST IL
    WHERE IM.ITEM_ID = ITEM_ID2
      AND IL.LOT_ID = LOT_ID3
      AND IM.ITEM_ID = IL.ITEM_ID;
    IF I_SUBLOT_NO IS NOT NULL THEN
      IND_KEY := CIR_FLG1 || L_ITEM_NO || P_DELIMIT || I_LOT_NO || P_DELIMIT || I_SUBLOT_NO;
    ELSIF I_LOT_NO IS NOT NULL THEN
      IND_KEY := CIR_FLG1 || L_ITEM_NO || P_DELIMIT || I_LOT_NO;
    ELSE
      IND_KEY := CIR_FLG1 || L_ITEM_NO;
    END IF;
    WHILE I < LEVEL_NO1 LOOP

      IND_KEY := '  ' || IND_KEY;
      I := I + 1;
    END LOOP;
    RETURN (L_ITEM_NO);
  END I_ITEM_NOFORMULA;

  FUNCTION DOC_NOFORMULA(DOC_ID IN NUMBER
                        ,LINE_ID IN NUMBER
                        ,ORGN_CODE IN VARCHAR2
                        ,DOC_TYPE IN VARCHAR2) RETURN CHAR IS
    CURSOR INVDTL IS
      SELECT
        IJM.JOURNAL_NO
      FROM
        IC_ADJS_JNL IAJ,
        IC_JRNL_MST IJM
      WHERE IAJ.JOURNAL_ID = IJM.JOURNAL_ID
        AND IAJ.DOC_ID = DOC_NOFORMULA.DOC_ID;
    CURSOR PRODDTL IS
      SELECT
        BATCH_NO
      FROM
        PM_BTCH_HDR
      WHERE BATCH_ID = DOC_ID;
    CURSOR CUR_PURCHDTL IS
      SELECT
        PRH.RECV_NO RECV_NO
      FROM
        PO_RECV_HDR PRH
      WHERE PRH.RECV_ID = DOC_ID;
    CURSOR PHYINVDTL IS
      SELECT
        CYCLE_NO
      FROM
        IC_CYCL_HDR
      WHERE CYCLE_ID = DOC_ID;
    CURSOR OPBOLDTL IS
      SELECT
        BOL_NO
      FROM
        OP_BILL_LAD
      WHERE BOL_ID = DOC_ID;
    CURSOR OPSHIPDTL IS
      SELECT
        ORDER_NO
      FROM
        OP_ORDR_HDR
      WHERE ORDER_ID = DOC_ID;
    CURSOR PODTL IS
      SELECT
        PO_NO
      FROM
        PO_ORDR_HDR
      WHERE PO_ID = DOC_ID;
    CURSOR PORTRNDTL IS
      SELECT
        RETURN_NO
      FROM
        PO_RTRN_HDR
      WHERE RETURN_ID = DOC_ID;
    CURSOR OMORDRDTL IS
      SELECT
        HDR.ORDER_NUMBER,
        ORG.NAME
      FROM
        OE_ORDER_HEADERS_ALL HDR,
        OE_ORDER_LINES_ALL DTL,
        HR_OPERATING_UNITS ORG
      WHERE ORG.ORGANIZATION_ID = HDR.ORG_ID
        AND DTL.LINE_ID = DOC_NOFORMULA.LINE_ID
        AND DTL.HEADER_ID = HDR.HEADER_ID;
    CURSOR RECV_INFO IS
      SELECT
        RECEIPT_NUM
      FROM
        RCV_SHIPMENT_HEADERS
      WHERE SHIPMENT_HEADER_ID = DOC_ID;
    L_DOC_NO VARCHAR2(32);
  BEGIN
    DISP_ORGN_CODE := ORGN_CODE;
    IF DOC_TYPE in ('ADJI','ADJR','CREI','CRER','GRDI','GRDR','STSI','STSR','TRNI','TRNR') THEN
      OPEN INVDTL;
      FETCH INVDTL
       INTO L_DOC_NO;
      CLOSE INVDTL;
    ELSIF DOC_TYPE in ('PROD') THEN
      OPEN PRODDTL;
      FETCH PRODDTL
       INTO L_DOC_NO;
      CLOSE PRODDTL;
    ELSIF DOC_TYPE in ('RECV','POSR') THEN
      OPEN CUR_PURCHDTL;
      FETCH CUR_PURCHDTL
       INTO L_DOC_NO;
      CLOSE CUR_PURCHDTL;
    ELSIF DOC_TYPE in ('PICY','PIPH') THEN
      OPEN PHYINVDTL;
      FETCH PHYINVDTL
       INTO L_DOC_NO;
      CLOSE PHYINVDTL;
    ELSIF DOC_TYPE in ('OPSP') THEN
      OPEN OPBOLDTL;
      FETCH OPBOLDTL
       INTO L_DOC_NO;
      CLOSE OPBOLDTL;
    ELSIF DOC_TYPE in ('OPSO') THEN
      OPEN OPSHIPDTL;
      FETCH OPSHIPDTL
       INTO L_DOC_NO;
      CLOSE OPSHIPDTL;
    ELSIF DOC_TYPE in ('OMSO') THEN
      OPEN OMORDRDTL;
      FETCH OMORDRDTL
       INTO L_DOC_NO,DISP_ORGN_CODE;
      CLOSE OMORDRDTL;
    ELSIF DOC_TYPE in ('PORD') THEN
      OPEN PODTL;
      FETCH PODTL
       INTO L_DOC_NO;
      CLOSE PODTL;
    ELSIF DOC_TYPE in ('RTRN') THEN
      OPEN PORTRNDTL;
      FETCH PORTRNDTL
       INTO L_DOC_NO;
      CLOSE PORTRNDTL;
    ELSIF DOC_TYPE = 'PORC' THEN
      OPEN RECV_INFO;
      FETCH RECV_INFO
       INTO L_DOC_NO;
      CLOSE RECV_INFO;
    END IF;
    RETURN (L_DOC_NO);
  END DOC_NOFORMULA;

  FUNCTION QC_SPECFORMULA(QCASSY_TYP_ID IN NUMBER
                         ,QC_SPEC_ID IN NUMBER
                         ,TEXT_RESULT IN VARCHAR2
                         ,NUM_RESULT IN NUMBER
                         ,ACCEPT_ANYWAY IN VARCHAR2) RETURN CHAR IS
    L_SPEC VARCHAR2(20);
    L_ASSAY_TYPE VARCHAR2(40);
    CURSOR CUR_ASSAY_DESC IS
      SELECT
        TEST_TYPE
      FROM
        GMD_QC_TESTS_B
      WHERE TEST_ID = QCASSY_TYP_ID;
    CURSOR CUR_SPEC_DATA IS
      SELECT
        DECODE(L_ASSAY_TYPE
              ,'U'
              ,A.TARGET_VALUE_CHAR
              ,'V'
              ,A.TARGET_VALUE_CHAR
              ,'N'
              ,TO_CHAR(A.TARGET_VALUE_NUM)),
        A.MIN_VALUE_NUM,
        A.MAX_VALUE_NUM
      FROM
        GMD_SPEC_TESTS_B A,
        GMD_QC_TESTS_B B
      WHERE A.SPEC_ID = QC_SPEC_ID
        AND A.TEST_ID = B.TEST_ID;
  BEGIN
    IF (QC_SPEC_ID IS NOT NULL) THEN
      OPEN CUR_SPEC_DATA;
      FETCH CUR_SPEC_DATA
       INTO L_SPEC,MIN_SPEC,MAX_SPEC;
      CLOSE CUR_SPEC_DATA;
    END IF;
    IF (TEXT_RESULT IS NOT NULL) THEN
      RESULT := TEXT_RESULT;
    ELSIF (NUM_RESULT IS NOT NULL) THEN
      RESULT := TO_CHAR(NUM_RESULT);
    END IF;
    IF ACCEPT_ANYWAY = '0' THEN
      ACCEPT_FLG := 'No';
    ELSIF ACCEPT_ANYWAY = '1' THEN
      ACCEPT_FLG := 'Yes';
    END IF;
    RETURN (L_SPEC);
  END QC_SPECFORMULA;

  FUNCTION UOMFORMULA(ITEM_ID1 IN NUMBER) RETURN CHAR IS
    L_UOM IC_ITEM_MST.ITEM_UM%TYPE;
  BEGIN
    SELECT
      ITEM_UM,
      ITEM_UM2
    INTO L_UOM,UOM2
    FROM
      IC_ITEM_MST
    WHERE ITEM_ID = ITEM_ID1;
    RETURN (L_UOM);
  END UOMFORMULA;

  FUNCTION IND_KEY2FORMULA(SUBLOT_NO2 IN VARCHAR2
                          ,ITEM_NO2 IN VARCHAR2
                          ,LOT_NO2 IN VARCHAR2) RETURN CHAR IS
    L_IND_KEY VARCHAR2(80);
    I NUMBER := 1;
  BEGIN
    IF SUBLOT_NO2 IS NOT NULL THEN
      L_IND_KEY := ITEM_NO2 || P_DELIMIT || LOT_NO2 || P_DELIMIT || SUBLOT_NO2;
    ELSIF LOT_NO2 IS NOT NULL THEN
      L_IND_KEY := ITEM_NO2 || P_DELIMIT || LOT_NO2;
    ELSE
      L_IND_KEY := ITEM_NO2;
    END IF;
    RETURN (L_IND_KEY);
  END IND_KEY2FORMULA;

  PROCEDURE HEADER IS
  BEGIN
    NULL;
  END HEADER;

  FUNCTION ITEM_DESC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEM_DESC;
  END ITEM_DESC_P;

  FUNCTION LOT_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOT_NO;
  END LOT_NO_P;

  FUNCTION SUBLOT_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SUBLOT_NO;
  END SUBLOT_NO_P;

  FUNCTION INV_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN INV_TYPE;
  END INV_TYPE_P;

  FUNCTION SHELF_LIFE_P RETURN NUMBER IS
  BEGIN
    RETURN SHELF_LIFE;
  END SHELF_LIFE_P;

  FUNCTION INV_CLASS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN INV_CLASS;
  END INV_CLASS_P;

  FUNCTION GRADE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN GRADE;
  END GRADE_P;

  FUNCTION RETEST_INTERVAL_P RETURN NUMBER IS
  BEGIN
    RETURN RETEST_INTERVAL;
  END RETEST_INTERVAL_P;

  FUNCTION LOT_CREATION_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOT_CREATION_TYPE;
  END LOT_CREATION_TYPE_P;

  FUNCTION LOT_CREATION_TYPE_DESC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOT_CREATION_TYPE_DESC;
  END LOT_CREATION_TYPE_DESC_P;

  FUNCTION BEGINING_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN BEGINING_QTY;
  END BEGINING_QTY_P;

  FUNCTION CREATION_DATE_P RETURN DATE IS
  BEGIN
    RETURN CREATION_DATE;
  END CREATION_DATE_P;

  FUNCTION EXPIRE_DATE_P RETURN DATE IS
  BEGIN
    RETURN EXPIRE_DATE;
  END EXPIRE_DATE_P;

  FUNCTION RETEST_DATE_P RETURN DATE IS
  BEGIN
    RETURN RETEST_DATE;
  END RETEST_DATE_P;

  FUNCTION PLANT_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PLANT_CODE;
  END PLANT_CODE_P;

  FUNCTION BATCH_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BATCH_NO;
  END BATCH_NO_P;

  FUNCTION VEND_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN VEND_NO;
  END VEND_NO_P;

  FUNCTION VEND_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN VEND_NAME;
  END VEND_NAME_P;

  FUNCTION TRANS_UM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TRANS_UM;
  END TRANS_UM_P;

  FUNCTION VEND_LOT_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN VEND_LOT_NO;
  END VEND_LOT_NO_P;

  FUNCTION PO_ORGN_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PO_ORGN_CODE;
  END PO_ORGN_CODE_P;

  FUNCTION PO_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PO_NO;
  END PO_NO_P;

  FUNCTION RECV_ORGN_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RECV_ORGN_CODE;
  END RECV_ORGN_CODE_P;

  FUNCTION RECV_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RECV_NO;
  END RECV_NO_P;

  FUNCTION JRNL_ORGN_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN JRNL_ORGN_CODE;
  END JRNL_ORGN_CODE_P;

  FUNCTION JOURNAL_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN JOURNAL_NO;
  END JOURNAL_NO_P;

  FUNCTION MIN_SPEC_P RETURN NUMBER IS
  BEGIN
    RETURN MIN_SPEC;
  END MIN_SPEC_P;

  FUNCTION MAX_SPEC_P RETURN NUMBER IS
  BEGIN
    RETURN MAX_SPEC;
  END MAX_SPEC_P;

  FUNCTION RESULT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RESULT;
  END RESULT_P;

  FUNCTION ACCEPT_FLG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCEPT_FLG;
  END ACCEPT_FLG_P;

  FUNCTION DISP_ORGN_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DISP_ORGN_CODE;
  END DISP_ORGN_CODE_P;

  FUNCTION I_ITEM_DESC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN I_ITEM_DESC;
  END I_ITEM_DESC_P;

  FUNCTION I_LOT_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN I_LOT_NO;
  END I_LOT_NO_P;

  FUNCTION I_SUBLOT_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN I_SUBLOT_NO;
  END I_SUBLOT_NO_P;

  FUNCTION IND_KEY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN IND_KEY;
  END IND_KEY_P;

  FUNCTION UOM2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN UOM2;
  END UOM2_P;

function M_6FormatTrigger(item_id number, lot_id number) return varchar2 is
n number;
begin
  select  count(*) into n
  from  gmd_results a, gmd_spec_results b, gmd_samples c
  where nvl(b.evaluation_ind,'N') in ('0A','1V')
   and a.result_id = b.result_id
   and a.sample_id = c.sample_id
   and a.sample_id not in (select sample_id from gmd_samples where
          (supplier_id is not null or cust_id is not null) or
          (batch_id is not null or formula_id is not null or
          routing_id is not null or oprn_id is not null))
    and a.delete_mark = 0
    and c.item_id = M_6FormatTrigger.item_id
    and c.lot_id = M_6FormatTrigger.lot_id;
 IF n <>0 THEN
  return 'FALSE';
 ELSE
  return 'TRUE';
 END IF;
end;

function M_5FormatTrigger(item_id number, lot_id number) return varchar2 is
n  number;
begin
  IF p_view_by = 1 then
    SELECT count(*) into n
    from  GMI_LOTS_COMP_v
    where product_item_id = M_5FormatTrigger.item_id
      and product_lot_id  = M_5FormatTrigger.lot_id;
  ELSE
    SELECT count(*) into n
    from  GMI_LOTS_DEST_v
    where ingred_item_id = M_5FormatTrigger.item_id
      and ingred_lot_id  = M_5FormatTrigger.lot_id;
  END IF;
  IF n <>0 then
    return 'FALSE';
  ELSE
    return 'TRUE';
  END IF;
end;
END GMI_GMILTGEN_XMLP_PKG;


/
