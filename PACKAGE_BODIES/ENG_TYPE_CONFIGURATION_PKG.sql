--------------------------------------------------------
--  DDL for Package Body ENG_TYPE_CONFIGURATION_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ENG_TYPE_CONFIGURATION_PKG" AS
/* $Header: ENGTYCONB.pls 120.1 2006/05/29 10:31:24 ninaraya noship $ */
/*---------------------------------------------------------------------------+
 | This package contains public API for Search Framework                     |
 +---------------------------------------------------------------------------*/

  G_PKG_NAME 	CONSTANT VARCHAR2(30):= 'ENG_TYPE_CONFIGURATION_PKG';
  g_current_user_id         NUMBER := FND_GLOBAL.User_Id;
  g_current_login_id        NUMBER := FND_GLOBAL.Login_Id;
  g_app_name                VARCHAR2(3) := 'ENG';
  g_null_value              VARCHAR2(6) := '*NULL*';


   PROCEDURE Check_Configuration_delete
  (
    X_CUSTOMIZATION_APPLICATION_ID IN NUMBER,
    X_CUSTOMIZATION_CODE           IN VARCHAR2,
    X_REGION_APPLICATION_ID        IN NUMBER,
    X_REGION_CODE                  IN VARCHAR2,
    X_INIT_MSG_LIST                IN VARCHAR2   := FND_API.G_FALSE,
    X_RETURN_STATUS                OUT NOCOPY VARCHAR2,
    X_ERRORCODE                    OUT NOCOPY NUMBER
  )
  IS

    l_count NUMBER;
    l_name  VARCHAR2(2000);

  BEGIN

    IF FND_API.To_Boolean(x_init_msg_list) THEN
     FND_MSG_PUB.Initialize;
    END IF;

    SELECT
      COUNT(*)
    INTO
      l_count
    FROM
      EGO_CUSTOMIZATION_EXT
    WHERE
      RF_CUSTOMIZATION_APPL_ID = X_CUSTOMIZATION_APPLICATION_ID
      AND RF_CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
      AND RF_REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
      AND RF_REGION_CODE = X_REGION_CODE;

    IF (l_count > 0) THEN

    SELECT
          property_varchar2_value INTO l_name
    FROM
          ak_custom_regions_tl
    WHERE
          property_name = 'RESULT_NAME'
          AND LANGUAGE = userenv('LANG')
          AND customization_application_id = x_customization_application_id
          AND customization_code = x_customization_code
          AND region_application_id = x_region_application_id
          AND region_code = x_region_code ;

    -- Perf Bug 5246103 : SQL id : 17432159 , old sql commented below
  /*

      SELECT
        NAME INTO l_name
      FROM
        EGO_RESULTS_FORMAT_V
      WHERE
        CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
        AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
        AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
        AND REGION_CODE = X_REGION_CODE;
 */
      FND_MESSAGE.Set_Name(g_app_name, 'EGO_RF_RF_EXISTS');
      FND_MESSAGE.Set_Token('NAME', l_name);
      FND_MSG_PUB.Add;

      X_RETURN_STATUS := FND_API.G_RET_STS_ERROR;

    ELSE

      X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;

    END IF;

  END Check_Configuration_delete;



  PROCEDURE create_type_config
  (
     X_CUSTOMIZATION_APPLICATION_ID IN     NUMBER,
     X_CUSTOMIZATION_CODE           IN     VARCHAR2,
     X_REGION_APPLICATION_ID        IN     NUMBER,
     X_REGION_CODE                  IN     VARCHAR2,
     X_NAME			    IN     VARCHAR2,
     X_CREATED_BY                   IN     NUMBER,
     X_CREATION_DATE                IN     DATE,
     X_LAST_UPDATED_BY              IN     NUMBER,
     X_LAST_UPDATE_DATE             IN     DATE,
     X_LAST_UPDATE_LOGIN            IN     NUMBER,
     X_CLASSIFICATION_1             IN     VARCHAR2 DEFAULT NULL,
     X_CLASSIFICATION_2             IN     VARCHAR2 DEFAULT NULL,
     X_CLASSIFICATION_3             IN     VARCHAR2 DEFAULT NULL,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT    NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT    NOCOPY NUMBER
  )
IS

  l_Sysdate                DATE := Sysdate;
  l_rowid                  VARCHAR2(255);

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

    --first check unique constraint

 /* IF (Results_Format_Name_Exists(X_NAME
                               ,X_WEB_USER_ID
                               ,NULL
                               ,X_CUSTOMIZATION_APPLICATION_ID
                               ,X_REGION_APPLICATION_ID
                               ,X_REGION_CODE
                               ,X_CUSTOMIZATION_LEVEL_ID
                               ,X_CLASSIFICATION_1
                               ,X_CLASSIFICATION_2
                               ,X_CLASSIFICATION_3) = FALSE) THEN  */

         AK_CUSTOM_REGIONS_PKG.INSERT_ROW(
X_ROWID                        => l_rowid,
X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
X_REGION_CODE                  => X_REGION_CODE,
X_PROPERTY_NAME                => 'CONFIG_NAME',
X_PROPERTY_VARCHAR2_VALUE      => X_NAME,
X_PROPERTY_NUMBER_VALUE        => NULL,
X_CRITERIA_JOIN_CONDITION      => NULL,
X_CREATED_BY                   => X_CREATED_BY,
X_CREATION_DATE                => X_CREATION_DATE,
X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
          );



  INSERT INTO EGO_CUSTOMIZATION_EXT
    (
  CUSTOMIZATION_APPLICATION_ID,
  CUSTOMIZATION_CODE,
  REGION_APPLICATION_ID,
  REGION_CODE,
  CLASSIFICATION1,
  CLASSIFICATION2,
  CLASSIFICATION3,
  CREATED_BY,
  CREATION_DATE,
  LAST_UPDATED_BY,
  LAST_UPDATE_DATE,
  LAST_UPDATE_LOGIN
   )
    VALUES
    (
  X_CUSTOMIZATION_APPLICATION_ID,
  X_CUSTOMIZATION_CODE,
  X_REGION_APPLICATION_ID,
  X_REGION_CODE,
  X_CLASSIFICATION_1,
  X_CLASSIFICATION_2,
  X_CLASSIFICATION_3,
  g_current_user_id,
  l_Sysdate,
  g_current_user_id,
  l_Sysdate,
  g_current_user_id
    );

      X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;

 /*  ELSE


      FND_MESSAGE.Set_Name(g_app_name, 'EGO_DUP_RESULTS_FORMAT');
      FND_MSG_PUB.Add;

      X_RETURN_STATUS := FND_API.G_RET_STS_ERROR;


    END IF;  */

  END create_type_config;

---------------------------------------------------------

  PROCEDURE update_type_Config
  (
     X_CUSTOMIZATION_APPLICATION_ID IN     NUMBER,
     X_CUSTOMIZATION_CODE           IN     VARCHAR2,
     X_REGION_APPLICATION_ID        IN     NUMBER,
     X_REGION_CODE                  IN     VARCHAR2,
     X_NAME                         IN     VARCHAR2,
     X_LAST_UPDATED_BY              IN     NUMBER,
     X_LAST_UPDATE_DATE             IN     DATE,
     X_LAST_UPDATE_LOGIN            IN     NUMBER,
     X_CLASSIFICATION_1             IN     VARCHAR2 DEFAULT NULL,
     X_CLASSIFICATION_2             IN     VARCHAR2 DEFAULT NULL,
     X_CLASSIFICATION_3             IN     VARCHAR2 DEFAULT NULL,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT    NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT    NOCOPY NUMBER
  )
 IS
    l_Sysdate                DATE := Sysdate;
    l_count                  NUMBER;
    l_rowid                  VARCHAR2(255);
    l_data_level             VARCHAR2(4000);

 BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

    /*IF (Results_Format_Name_Exists(X_NAME
                                  ,X_WEB_USER_ID
                                  ,X_CUSTOMIZATION_CODE
                                  ,X_CUSTOMIZATION_APPLICATION_ID
                                  ,X_REGION_APPLICATION_ID
                                  ,X_REGION_CODE
                                  ,X_CUSTOMIZATION_LEVEL_ID
                                  ,X_CLASSIFICATION_1
                                  ,X_CLASSIFICATION_2
                                  ,X_CLASSIFICATION_3) = FALSE) THEN   */

	AK_CUSTOM_REGIONS_PKG.UPDATE_ROW(
X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
X_REGION_CODE                  => X_REGION_CODE,
X_PROPERTY_NAME                => 'CONFIG_NAME',
X_PROPERTY_VARCHAR2_VALUE      => X_NAME,
X_PROPERTY_NUMBER_VALUE        => NULL,
X_CRITERIA_JOIN_CONDITION      => NULL,
X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
          );



    X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;

    /*ELSE

      FND_MESSAGE.Set_Name(g_app_name, 'EGO_DUP_RESULTS_FORMAT');
      FND_MSG_PUB.Add;

      X_RETURN_STATUS := FND_API.G_RET_STS_ERROR;

    END IF;*/

END update_type_Config;

-------------------------------------------------------------

 PROCEDURE delete_type_config
  (
     X_CUSTOMIZATION_APPLICATION_ID IN NUMBER,
     X_CUSTOMIZATION_CODE           IN VARCHAR2,
     X_REGION_APPLICATION_ID        IN NUMBER,
     X_REGION_CODE                  IN VARCHAR2,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT NOCOPY NUMBER
  )
  IS

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

    Check_Configuration_delete
     (
       X_CUSTOMIZATION_APPLICATION_ID,
       X_CUSTOMIZATION_CODE,
       X_REGION_APPLICATION_ID,
       X_REGION_CODE,
       FND_API.G_FALSE,
       X_RETURN_STATUS,
       X_ERRORCODE
     );

    IF (X_RETURN_STATUS = FND_API.G_RET_STS_SUCCESS) THEN

  DELETE FROM AK_CUSTOM_REGIONS
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE;

 DELETE FROM AK_CUSTOM_REGIONS_TL
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE;

  DELETE FROM EGO_CUSTOMIZATION_EXT
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE;

 DELETE FROM AK_CUSTOM_REGION_ITEMS
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE;

 DELETE FROM AK_CUSTOM_REGION_ITEMS_TL
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE;

  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;

  ELSE

  X_RETURN_STATUS := FND_API.G_RET_STS_ERROR;

  END IF;

  END delete_type_config;
---------------------------------------------------------


  PROCEDURE create_Primary_Attribute
  (
     X_CUSTOMIZATION_APPLICATION_ID IN     NUMBER,
     X_CUSTOMIZATION_CODE           IN     VARCHAR2,
     X_REGION_APPLICATION_ID        IN     NUMBER,
     X_REGION_CODE                  IN     VARCHAR2,
     X_ATTRIBUTE_APPLICATION_ID     IN     NUMBER,
     X_ATTRIBUTE_CODE               IN     VARCHAR2,
     X_DISPLAY_SEQUENCE             IN     NUMBER,
     X_ORDER_SEQUENCE               IN     NUMBER,
     X_ORDER_DIRECTION              IN     VARCHAR2,
     X_COLUMN_NAME		    IN     VARCHAR2 := NULL,
     X_SHOW_TOTAL                   IN     VARCHAR2 := NULL,
     X_CREATED_BY                   IN     NUMBER,
     X_CREATION_DATE                IN     DATE,
     X_LAST_UPDATED_BY              IN     NUMBER,
     X_LAST_UPDATE_DATE             IN     DATE,
     X_LAST_UPDATE_LOGIN            IN     NUMBER,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT    NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT    NOCOPY NUMBER
  )
IS

  l_Sysdate                DATE := Sysdate;
  l_rowid                  VARCHAR2(255);

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

  AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
    X_ROWID                        => l_rowid,
    X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
    X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
    X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
    X_REGION_CODE                  => X_REGION_CODE,
    X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
    X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
    X_PROPERTY_NAME                => 'DISPLAY_SEQUENCE',
    X_PROPERTY_VARCHAR2_VALUE      => null,
    X_PROPERTY_NUMBER_VALUE        => X_DISPLAY_SEQUENCE,
    X_PROPERTY_DATE_VALUE          => NULL,
    X_CREATED_BY                   => X_CREATED_BY,
    X_CREATION_DATE                => X_CREATION_DATE,
    X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
  );

  IF (X_ORDER_SEQUENCE IS NOT NULL) THEN

    AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
      X_ROWID                        => l_rowid,
      X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
      X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
      X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
      X_REGION_CODE                  => X_REGION_CODE,
      X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
      X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
      X_PROPERTY_NAME                => 'ORDER_SEQUENCE',
      X_PROPERTY_VARCHAR2_VALUE      => NULL,
      X_PROPERTY_NUMBER_VALUE        => X_ORDER_SEQUENCE,
      X_PROPERTY_DATE_VALUE          => NULL,
      X_CREATED_BY                   => X_CREATED_BY,
      X_CREATION_DATE                => X_CREATION_DATE,
      X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
      X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
      X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
    );

  END IF;

  IF (X_ORDER_DIRECTION IS NOT NULL) THEN

   AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
      X_ROWID                        => l_rowid,
      X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
      X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
      X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
      X_REGION_CODE                  => X_REGION_CODE,
      X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
      X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
      X_PROPERTY_NAME                => 'ORDER_DIRECTION',
      X_PROPERTY_VARCHAR2_VALUE      => X_ORDER_DIRECTION,
      X_PROPERTY_NUMBER_VALUE        => NULL,
      X_PROPERTY_DATE_VALUE          => NULL,
      X_CREATED_BY                   => X_CREATED_BY,
      X_CREATION_DATE                => X_CREATION_DATE,
      X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
      X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
      X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
    );
  END IF;

  IF (X_COLUMN_NAME IS NOT NULL) THEN

   AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
      X_ROWID                        => l_rowid,
      X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
      X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
      X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
      X_REGION_CODE                  => X_REGION_CODE,
      X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
      X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
      X_PROPERTY_NAME                => 'COLUMN_NAME',
      X_PROPERTY_VARCHAR2_VALUE      => X_COLUMN_NAME,
      X_PROPERTY_NUMBER_VALUE        => NULL,
      X_PROPERTY_DATE_VALUE          => NULL,
      X_CREATED_BY                   => X_CREATED_BY,
      X_CREATION_DATE                => X_CREATION_DATE,
      X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
      X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
      X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
    );
  END IF;

  IF (X_SHOW_TOTAL IS NOT NULL) THEN

   AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
      X_ROWID                        => l_rowid,
      X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
      X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
      X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
      X_REGION_CODE                  => X_REGION_CODE,
      X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
      X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
      X_PROPERTY_NAME                => 'SHOW_TOTAL',
      X_PROPERTY_VARCHAR2_VALUE      => X_SHOW_TOTAL,
      X_PROPERTY_NUMBER_VALUE        => NULL,
      X_PROPERTY_DATE_VALUE          => NULL,
      X_CREATED_BY                   => X_CREATED_BY,
      X_CREATION_DATE                => X_CREATION_DATE,
      X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
      X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
      X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
    );
  END IF;

--  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;
  X_RETURN_STATUS := 'T';


  END create_Primary_Attribute;


---------------------------------------------------------


  PROCEDURE update_Primary_Attribute
  (
     X_CUSTOMIZATION_APPLICATION_ID IN     NUMBER,
     X_CUSTOMIZATION_CODE           IN     VARCHAR2,
     X_REGION_APPLICATION_ID        IN     NUMBER,
     X_REGION_CODE                  IN     VARCHAR2,
     X_ATTRIBUTE_APPLICATION_ID     IN     NUMBER,
     X_ATTRIBUTE_CODE               IN     VARCHAR2,
     X_DISPLAY_SEQUENCE             IN     NUMBER,
     X_ORDER_SEQUENCE               IN     NUMBER,
     X_ORDER_DIRECTION              IN     VARCHAR2,
     X_COLUMN_NAME                  IN     VARCHAR2 := NULL,
     X_SHOW_TOTAL                   IN     VARCHAR2 := NULL,
     X_LAST_UPDATED_BY              IN     NUMBER,
     X_LAST_UPDATE_DATE             IN     DATE,
     X_LAST_UPDATE_LOGIN            IN     NUMBER,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT    NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT    NOCOPY NUMBER
  )
IS

  l_Sysdate                DATE := Sysdate;
  l_rowid                  VARCHAR2(255);
  l_count                  NUMBER;

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

   AK_CUSTOM_REGION_ITEMS_PKG.UPDATE_ROW(
     X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
     X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
     X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
     X_REGION_CODE                  => X_REGION_CODE,
     X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
     X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
     X_PROPERTY_NAME                => 'DISPLAY_SEQUENCE',
     X_PROPERTY_VARCHAR2_VALUE      => NULL,
     X_PROPERTY_NUMBER_VALUE        => X_DISPLAY_SEQUENCE,
     X_PROPERTY_DATE_VALUE          => NULL,
     X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
     X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
     X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
   );

  SELECT
    COUNT(*) INTO l_count
  FROM
    AK_CUSTOM_REGION_ITEMS
  WHERE
    CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
    AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
    AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
    AND REGION_CODE = X_REGION_CODE
    AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
    AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
    AND PROPERTY_NAME = 'ORDER_SEQUENCE';

  IF (X_ORDER_SEQUENCE IS NULL) THEN

    IF (l_count > 0) THEN
      DELETE FROM AK_CUSTOM_REGION_ITEMS
        WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
        AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
        AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
        AND REGION_CODE = X_REGION_CODE
        AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
        AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
        AND PROPERTY_NAME = 'ORDER_SEQUENCE';
    END IF;

  ELSE

    IF (l_count > 0) THEN

      AK_CUSTOM_REGION_ITEMS_PKG.UPDATE_ROW(
        X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
        X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
        X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
        X_REGION_CODE                  => X_REGION_CODE,
        X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
        X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
        X_PROPERTY_NAME                => 'ORDER_SEQUENCE',
        X_PROPERTY_VARCHAR2_VALUE      => NULL,
        X_PROPERTY_NUMBER_VALUE        => X_ORDER_SEQUENCE,
        X_PROPERTY_DATE_VALUE          => NULL,
        X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
        X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
        X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
      );

    ELSE

       AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
          X_ROWID                        => l_rowid,
          X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
          X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
          X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
          X_REGION_CODE                  => X_REGION_CODE,
          X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
          X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
          X_PROPERTY_NAME                => 'ORDER_SEQUENCE',
          X_PROPERTY_VARCHAR2_VALUE      => NULL,
          X_PROPERTY_NUMBER_VALUE        => X_ORDER_SEQUENCE,
          X_PROPERTY_DATE_VALUE          => NULL,
          X_CREATED_BY                   => X_LAST_UPDATED_BY,
          X_CREATION_DATE                => SYSDATE,
          X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
          X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
          X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
        );

    END IF;

  END IF;


  SELECT
    COUNT(*) INTO l_count
  FROM
    AK_CUSTOM_REGION_ITEMS
  WHERE
    CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
    AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
    AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
    AND REGION_CODE = X_REGION_CODE
    AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
    AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
    AND PROPERTY_NAME = 'ORDER_DIRECTION';

  IF (X_ORDER_DIRECTION IS NULL) THEN

    IF (l_count > 0) THEN
      DELETE FROM AK_CUSTOM_REGION_ITEMS
        WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
        AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
        AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
        AND REGION_CODE = X_REGION_CODE
        AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
        AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
        AND PROPERTY_NAME = 'ORDER_DIRECTION';
    END IF;

  ELSE

    IF (l_count > 0) THEN

      AK_CUSTOM_REGION_ITEMS_PKG.UPDATE_ROW(
        X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
        X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
        X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
        X_REGION_CODE                  => X_REGION_CODE,
        X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
        X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
        X_PROPERTY_NAME                => 'ORDER_DIRECTION',
        X_PROPERTY_VARCHAR2_VALUE      => X_ORDER_DIRECTION,
        X_PROPERTY_NUMBER_VALUE        => NULL,
        X_PROPERTY_DATE_VALUE          => NULL,
        X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
        X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
        X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
      );

    ELSE

       AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
          X_ROWID                        => l_rowid,
          X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
          X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
          X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
          X_REGION_CODE                  => X_REGION_CODE,
          X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
          X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
          X_PROPERTY_NAME                => 'ORDER_DIRECTION',
          X_PROPERTY_VARCHAR2_VALUE      => X_ORDER_DIRECTION,
          X_PROPERTY_NUMBER_VALUE        => NULL,
          X_PROPERTY_DATE_VALUE          => NULL,
          X_CREATED_BY                   => X_LAST_UPDATED_BY,
          X_CREATION_DATE                => SYSDATE,
          X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
          X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
          X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
        );

    END IF;

  END IF;

  SELECT
    COUNT(*) INTO l_count
  FROM
    AK_CUSTOM_REGION_ITEMS
  WHERE
    CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
    AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
    AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
    AND REGION_CODE = X_REGION_CODE
    AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
    AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
    AND PROPERTY_NAME = 'COLUMN_NAME';

  IF (X_COLUMN_NAME IS NULL) THEN

    IF (l_count > 0) THEN
      DELETE FROM AK_CUSTOM_REGION_ITEMS
        WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
        AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
        AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
        AND REGION_CODE = X_REGION_CODE
        AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
        AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
        AND PROPERTY_NAME = 'COLUMN_NAME';
    END IF;

  ELSE

    IF (l_count > 0) THEN

      AK_CUSTOM_REGION_ITEMS_PKG.UPDATE_ROW(
        X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
        X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
        X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
        X_REGION_CODE                  => X_REGION_CODE,
        X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
        X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
        X_PROPERTY_NAME                => 'COLUMN_NAME',
        X_PROPERTY_VARCHAR2_VALUE      => X_COLUMN_NAME,
        X_PROPERTY_NUMBER_VALUE        => NULL,
        X_PROPERTY_DATE_VALUE          => NULL,
        X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
        X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
        X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
      );

    ELSE

       AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
          X_ROWID                        => l_rowid,
          X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
          X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
          X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
          X_REGION_CODE                  => X_REGION_CODE,
          X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
          X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
          X_PROPERTY_NAME                => 'COLUMN_NAME',
          X_PROPERTY_VARCHAR2_VALUE      => X_COLUMN_NAME,
          X_PROPERTY_NUMBER_VALUE        => NULL,
          X_PROPERTY_DATE_VALUE          => NULL,
          X_CREATED_BY                   => X_LAST_UPDATED_BY,
          X_CREATION_DATE                => SYSDATE,
          X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
          X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
          X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
        );

    END IF;

  END IF;

  SELECT
    COUNT(*) INTO l_count
  FROM
    AK_CUSTOM_REGION_ITEMS
  WHERE
    CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
    AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
    AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
    AND REGION_CODE = X_REGION_CODE
    AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
    AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
    AND PROPERTY_NAME = 'SHOW_TOTAL';

  IF (X_SHOW_TOTAL IS NULL) THEN

    IF (l_count > 0) THEN
      DELETE FROM AK_CUSTOM_REGION_ITEMS
        WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
        AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
        AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
        AND REGION_CODE = X_REGION_CODE
        AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
        AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
        AND PROPERTY_NAME = 'SHOW_TOTAL';
    END IF;

  ELSE

    IF (l_count > 0) THEN

      AK_CUSTOM_REGION_ITEMS_PKG.UPDATE_ROW(
        X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
        X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
        X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
        X_REGION_CODE                  => X_REGION_CODE,
        X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
        X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
        X_PROPERTY_NAME                => 'SHOW_TOTAL',
        X_PROPERTY_VARCHAR2_VALUE      => X_SHOW_TOTAL,
        X_PROPERTY_NUMBER_VALUE        => NULL,
        X_PROPERTY_DATE_VALUE          => NULL,
        X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
        X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
        X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
      );

    ELSE

       AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
          X_ROWID                        => l_rowid,
          X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
          X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
          X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
          X_REGION_CODE                  => X_REGION_CODE,
          X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
          X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
          X_PROPERTY_NAME                => 'SHOW_TOTAL',
          X_PROPERTY_VARCHAR2_VALUE      => X_SHOW_TOTAL,
          X_PROPERTY_NUMBER_VALUE        => NULL,
          X_PROPERTY_DATE_VALUE          => NULL,
          X_CREATED_BY                   => X_LAST_UPDATED_BY,
          X_CREATION_DATE                => SYSDATE,
          X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
          X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
          X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
        );

    END IF;

  END IF;


--  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;
  X_RETURN_STATUS := 'T';


  END update_Primary_Attribute;

-------------------------------------------------------------

 PROCEDURE delete_Primary_Attribute
  (
     X_CUSTOMIZATION_APPLICATION_ID IN NUMBER,
     X_CUSTOMIZATION_CODE           IN VARCHAR2,
     X_REGION_APPLICATION_ID        IN NUMBER,
     X_REGION_CODE                  IN VARCHAR2,
     X_ATTRIBUTE_APPLICATION_ID     IN NUMBER,
     X_ATTRIBUTE_CODE               IN VARCHAR2,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT NOCOPY NUMBER
  )
  IS

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

 DELETE FROM AK_CUSTOM_REGION_ITEMS
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE
  AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
  AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE;

 DELETE FROM AK_CUSTOM_REGION_ITEMS_TL
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE
  AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
  AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE;

--  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;
  X_RETURN_STATUS := 'T';


  END delete_Primary_Attribute;
---------------------------------------------------------



  PROCEDURE create_config_section
  (
     X_CUSTOMIZATION_APPLICATION_ID IN     NUMBER,
     X_CUSTOMIZATION_CODE           IN     VARCHAR2,
     X_REGION_APPLICATION_ID        IN     NUMBER,
     X_REGION_CODE                  IN     VARCHAR2,
     X_ATTRIBUTE_APPLICATION_ID     IN     NUMBER,
     X_ATTRIBUTE_CODE               IN     VARCHAR2,
     X_DISPLAY_SEQUENCE             IN     NUMBER,
     X_CREATED_BY                   IN     NUMBER,
     X_CREATION_DATE                IN     DATE,
     X_LAST_UPDATED_BY              IN     NUMBER,
     X_LAST_UPDATE_DATE             IN     DATE,
     X_LAST_UPDATE_LOGIN            IN     NUMBER,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT    NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT    NOCOPY NUMBER
  )
IS

  l_Sysdate                DATE := Sysdate;
  l_rowid                  VARCHAR2(255);

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

         AK_CUSTOM_REGION_ITEMS_PKG.INSERT_ROW(
X_ROWID                        => l_rowid,
X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
X_REGION_CODE                  => X_REGION_CODE,
X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
X_PROPERTY_NAME                => 'SECTION_SEQUENCE',
X_PROPERTY_VARCHAR2_VALUE      => NULL,
X_PROPERTY_NUMBER_VALUE        => X_DISPLAY_SEQUENCE,
X_PROPERTY_DATE_VALUE          => NULL,
X_CREATED_BY                   => X_CREATED_BY,
X_CREATION_DATE                => X_CREATION_DATE,
X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
          );

--  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;
  X_RETURN_STATUS := 'T';


  END create_config_section;


---------------------------------------------------------


  PROCEDURE update_config_section
  (
     X_CUSTOMIZATION_APPLICATION_ID IN     NUMBER,
     X_CUSTOMIZATION_CODE           IN     VARCHAR2,
     X_REGION_APPLICATION_ID        IN     NUMBER,
     X_REGION_CODE                  IN     VARCHAR2,
     X_ATTRIBUTE_APPLICATION_ID     IN     NUMBER,
     X_ATTRIBUTE_CODE               IN     VARCHAR2,
     X_DISPLAY_SEQUENCE             IN     NUMBER,
     X_LAST_UPDATED_BY              IN     NUMBER,
     X_LAST_UPDATE_DATE             IN     DATE,
     X_LAST_UPDATE_LOGIN            IN     NUMBER,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT    NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT    NOCOPY NUMBER
  )
IS

  l_Sysdate                DATE := Sysdate;
  l_rowid                  VARCHAR2(255);

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

         AK_CUSTOM_REGION_ITEMS_PKG.UPDATE_ROW(
X_CUSTOMIZATION_APPLICATION_ID => X_CUSTOMIZATION_APPLICATION_ID,
X_CUSTOMIZATION_CODE           => X_CUSTOMIZATION_CODE,
X_REGION_APPLICATION_ID        => X_REGION_APPLICATION_ID,
X_REGION_CODE                  => X_REGION_CODE,
X_ATTRIBUTE_APPLICATION_ID     => X_ATTRIBUTE_APPLICATION_ID,
X_ATTRIBUTE_CODE               => X_ATTRIBUTE_CODE,
X_PROPERTY_NAME                => 'SECTION_SEQUENCE',
X_PROPERTY_VARCHAR2_VALUE      => NULL,
X_PROPERTY_NUMBER_VALUE        => X_DISPLAY_SEQUENCE,
X_PROPERTY_DATE_VALUE          => NULL,
X_LAST_UPDATED_BY              => X_LAST_UPDATED_BY,
X_LAST_UPDATE_DATE             => X_LAST_UPDATE_DATE,
X_LAST_UPDATE_LOGIN            => X_LAST_UPDATE_LOGIN
          );

--  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;
  X_RETURN_STATUS := 'T';


  END update_config_section;

-------------------------------------------------------------

 PROCEDURE delete_config_section
  (
     X_CUSTOMIZATION_APPLICATION_ID IN NUMBER,
     X_CUSTOMIZATION_CODE           IN VARCHAR2,
     X_REGION_APPLICATION_ID        IN NUMBER,
     X_REGION_CODE                  IN VARCHAR2,
     X_ATTRIBUTE_APPLICATION_ID     IN NUMBER,
     X_ATTRIBUTE_CODE               IN VARCHAR2,
     X_INIT_MSG_LIST                IN     VARCHAR2   := FND_API.G_FALSE,
     X_RETURN_STATUS                OUT NOCOPY VARCHAR2,
     X_ERRORCODE                    OUT NOCOPY NUMBER
  )
  IS

  BEGIN

  IF FND_API.To_Boolean(x_init_msg_list) THEN
   FND_MSG_PUB.Initialize;
  END IF;

 DELETE FROM AK_CUSTOM_REGION_ITEMS
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE
  AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
  AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE;

 DELETE FROM AK_CUSTOM_REGION_ITEMS_TL
  WHERE CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
  AND CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE
  AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  AND REGION_CODE = X_REGION_CODE
  AND ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
  AND ATTRIBUTE_CODE = X_ATTRIBUTE_CODE;

--  X_RETURN_STATUS := FND_API.G_RET_STS_SUCCESS;
  X_RETURN_STATUS := 'T';


  END delete_config_section;
---------------------------------------------------------

 /*

 FUNCTION CONFIG_NAME_EXISTS
  (
    X_NAME                          IN     VARCHAR2,
    X_WEB_USER_ID                   IN     NUMBER,
    X_CUSTOMIZATION_CODE            IN     VARCHAR2,
    X_CUSTOMIZATION_APPLICATION_ID  IN     NUMBER,
    X_REGION_APPLICATION_ID         IN     NUMBER,
    X_REGION_CODE                   IN     VARCHAR2,
    X_CUSTOMIZATION_LEVEL_ID        IN     NUMBER,
    X_CLASSIFICATION1               IN     VARCHAR2,
    X_CLASSIFICATION2               IN     VARCHAR2,
    X_CLASSIFICATION3               IN     VARCHAR2
  )
  RETURN BOOLEAN
  IS

    l_count    NUMBER;

  BEGIN

    IF (X_CUSTOMIZATION_CODE IS NOT NULL) THEN

      IF (X_CUSTOMIZATION_LEVEL_ID = 30) THEN

        SELECT
          COUNT(*)
        INTO
          l_count
        FROM
          EGO_RESULTS_FORMAT_V
        WHERE
          NAME = X_NAME
          AND CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
          AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
          AND REGION_CODE = X_REGION_CODE
          AND (CUSTOMIZATION_LEVEL_ID = 60 OR (CUSTOMIZATION_LEVEL_ID = 30 AND WEB_USER_ID = X_WEB_USER_ID))
          AND CUSTOMIZATION_CODE <> X_CUSTOMIZATION_CODE
          AND NVL(X_CLASSIFICATION1, g_null_value) = NVL(CLASSIFICATION1, g_null_value)
          AND NVL(X_CLASSIFICATION2, g_null_value) = NVL(CLASSIFICATION2, g_null_value)
          AND NVL(X_CLASSIFICATION3, g_null_value) = NVL(CLASSIFICATION3, g_null_value);

      ELSE

        SELECT
          COUNT(*)
        INTO
          l_count
        FROM
          EGO_RESULTS_FORMAT_V
        WHERE
          NAME = X_NAME
          AND CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
          AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
          AND REGION_CODE = X_REGION_CODE
          AND CUSTOMIZATION_CODE <> X_CUSTOMIZATION_CODE
          AND NVL(X_CLASSIFICATION1, g_null_value) = NVL(CLASSIFICATION1, g_null_value)
          AND NVL(X_CLASSIFICATION2, g_null_value) = NVL(CLASSIFICATION2, g_null_value)
          AND NVL(X_CLASSIFICATION3, g_null_value) = NVL(CLASSIFICATION3, g_null_value);


      END IF;

    ELSE

      IF (X_CUSTOMIZATION_LEVEL_ID = 30) THEN

        SELECT
          COUNT(*)
        INTO
          l_count
        FROM
          EGO_RESULTS_FORMAT_V
        WHERE
          NAME = X_NAME
          AND CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
          AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
          AND REGION_CODE = X_REGION_CODE
          AND (CUSTOMIZATION_LEVEL_ID = 60 OR (CUSTOMIZATION_LEVEL_ID = 30 AND WEB_USER_ID = X_WEB_USER_ID))
          AND NVL(X_CLASSIFICATION1, g_null_value) = NVL(CLASSIFICATION1, g_null_value)
          AND NVL(X_CLASSIFICATION2, g_null_value) = NVL(CLASSIFICATION2, g_null_value)
          AND NVL(X_CLASSIFICATION3, g_null_value) = NVL(CLASSIFICATION3, g_null_value);


      ELSE

        SELECT
          COUNT(*)
        INTO
          l_count
        FROM
          EGO_RESULTS_FORMAT_V
        WHERE
          NAME = X_NAME
          AND CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
          AND REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
          AND REGION_CODE = X_REGION_CODE
          AND NVL(X_CLASSIFICATION1, g_null_value) = NVL(CLASSIFICATION1, g_null_value)
          AND NVL(X_CLASSIFICATION2, g_null_value) = NVL(CLASSIFICATION2, g_null_value)
          AND NVL(X_CLASSIFICATION3, g_null_value) = NVL(CLASSIFICATION3, g_null_value);

      END IF;

    END IF;

    RETURN l_count > 0;

  END Results_Format_Name_Exists;
*/

END ENG_TYPE_CONFIGURATION_PKG;

/
