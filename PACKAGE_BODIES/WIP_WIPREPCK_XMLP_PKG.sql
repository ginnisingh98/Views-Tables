--------------------------------------------------------
--  DDL for Package Body WIP_WIPREPCK_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_WIPREPCK_XMLP_PKG" AS
/* $Header: WIPREPCKB.pls 120.1 2008/01/31 12:38:50 npannamp noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    QTY:= get_precision(P_QTY_PRECISION);
    P_START_DATE1:=to_char(P_START_DATE,'DD-MON-YY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.USER_EXIT('FND FLEXSQL CODE="MSTK"
                  APPL_SHORT_NAME="INV" OUTPUT=":P_COMP"
                  TABLEALIAS="MSI2"
                  MODE="SELECT" DISPLAY="ALL"')*/NULL;
    RETURN (TRUE);
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_LIMIT_SUPPLY_TYPEFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (P_SUPPLY_TYPE IS NOT NULL) THEN
      RETURN ('AND DECODE(WRO.WIP_SUPPLY_TYPE,3,2,WRO.WIP_SUPPLY_TYPE) = ' || TO_CHAR(P_SUPPLY_TYPE));
    ELSE
      RETURN (' ');
    END IF;
    RETURN NULL;
  END C_LIMIT_SUPPLY_TYPEFORMULA;

  FUNCTION C_LIMIT_SUBINVFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (P_SUPPLY_SUBINV IS NOT NULL) THEN
      RETURN ('AND WRO.SUPPLY_SUBINVENTORY = ''' || P_SUPPLY_SUBINV || '''');
    ELSE
      RETURN (' ');
    END IF;
    RETURN NULL;
  END C_LIMIT_SUBINVFORMULA;

  FUNCTION C_P_SUPPLY_TYPEFORMULA RETURN NUMBER IS
  BEGIN
    IF (P_SUPPLY_TYPE IS NOT NULL) THEN
      RETURN (P_SUPPLY_TYPE);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_P_SUPPLY_TYPEFORMULA;

  FUNCTION LIMIT_LINES RETURN CHARACTER IS
    LIMIT_LINES VARCHAR2(80);
  BEGIN
    IF (P_FROM_LINE IS NOT NULL) THEN
      IF (P_TO_LINE IS NOT NULL) THEN
        LIMIT_LINES := ' AND WL.LINE_CODE BETWEEN ''' || P_FROM_LINE || ''' AND ''' || P_TO_LINE || ''' ';
      ELSE
        LIMIT_LINES := ' AND WL.LINE_CODE  >= ''' || P_FROM_LINE || ''' ';
      END IF;
    ELSE
      IF (P_TO_LINE IS NOT NULL) THEN
        LIMIT_LINES := ' AND WL.LINE_CODE  <= ''' || P_TO_LINE || ''' ';
      ELSE
        LIMIT_LINES := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_LINES);
  END LIMIT_LINES;

  FUNCTION LIMIT_JOBS RETURN CHARACTER IS
    LIMIT_JOBS VARCHAR2(500);
  BEGIN
    IF (P_FROM_JOB IS NOT NULL) THEN
      IF (P_TO_JOB IS NOT NULL) THEN
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME BETWEEN ''' || P_FROM_JOB || ''' AND ''' || P_TO_JOB || '''';
      ELSE
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME  >= ''' || P_FROM_JOB || '''';
      END IF;
    ELSE
      IF (P_TO_JOB IS NOT NULL) THEN
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME <= ''' || P_TO_JOB || '''';
      ELSE
        LIMIT_JOBS := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_JOBS);
  END LIMIT_JOBS;

  FUNCTION ORDER_FUNC(OP_SEQ IN NUMBER
                     ,SUPPLY_SUBINV IN VARCHAR2
                     ,C_COMPONENT_DISP IN VARCHAR2
                     ,DEPARTMENT IN VARCHAR2
                     ,C_LOCATOR_DISP IN VARCHAR2
                     ,C_COMP_SORT IN VARCHAR2
                     ,C_LOC_SORT IN VARCHAR2) RETURN CHARACTER IS
    TEMP VARCHAR2(2000);
  BEGIN
    /*SRW.REFERENCE(OP_SEQ)*/NULL;
    /*SRW.REFERENCE(SUPPLY_SUBINV)*/NULL;
    /*SRW.REFERENCE(C_COMPONENT_DISP)*/NULL;
    /*SRW.REFERENCE(DEPARTMENT)*/NULL;
    /*SRW.REFERENCE(C_LOCATOR_DISP)*/NULL;
    /*SRW.REFERENCE(C_COMP_SORT)*/NULL;
    /*SRW.REFERENCE(C_LOC_SORT)*/NULL;
    IF (P_SORT_BY = 4) THEN
      TEMP := RPAD(SUPPLY_SUBINV
                  ,10) || C_LOC_SORT || C_COMP_SORT || RPAD(DEPARTMENT
                  ,10);
    ELSE
      IF (P_SORT_BY = 6) THEN
        TEMP := C_COMP_SORT || LPAD(TO_CHAR(OP_SEQ)
                    ,4
                    ,TO_CHAR(0)) || RPAD(DEPARTMENT
                    ,10) || RPAD(SUPPLY_SUBINV
                    ,10) || C_LOC_SORT;
      ELSE
        TEMP := C_COMP_SORT || RPAD(DEPARTMENT
                    ,10) || RPAD(SUPPLY_SUBINV
                    ,10) || C_LOC_SORT;
      END IF;
    END IF;
    RETURN (TEMP);
  END ORDER_FUNC;

  FUNCTION C_LIMIT_STATUSFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (P_TXN_ONLY = 2) THEN
      RETURN ('(1,3,4,6)');
    ELSE
      RETURN ('(3,4)');
    END IF;
    RETURN NULL;
  END C_LIMIT_STATUSFORMULA;

  FUNCTION ZEROFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (0);
  END ZEROFORMULA;

  FUNCTION C_COMP_SORTFORMULA(C_COMP_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_COMP_SORT);
  END C_COMP_SORTFORMULA;

  FUNCTION C_LOC_SORTFORMULA(LOCATOR_ID IN NUMBER
                            ,C_LOC_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (LOCATOR_ID > -1) THEN
      RETURN (C_LOC_SORT);
    ELSE
      RETURN ('          ');
    END IF;
    RETURN NULL;
  END C_LOC_SORTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  function get_precision(qty_precision in number) return VARCHAR2 is
  begin

  if qty_precision = 0 then return('999G999G999G990');

  elsif qty_precision = 1 then return('999G999G999G990D0');

  elsif qty_precision = 3 then return('999G999G999G990D000');

  elsif qty_precision = 4 then return('999G999G999G990D0000');

  elsif qty_precision = 5 then return('999G999G999G990D00000');

  elsif qty_precision = 6 then  return('999G999G999G990D000000');

  else return('999G999G999G990D00');

  end if;

end;

END WIP_WIPREPCK_XMLP_PKG;


/
