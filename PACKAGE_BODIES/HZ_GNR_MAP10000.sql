--------------------------------------------------------
--  DDL for Package Body HZ_GNR_MAP10000
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_GNR_MAP10000" AS

/*=======================================================================+
 |  Copyright (c) 2002 Oracle Corporation Redwood Shores, California, USA|
 |                          All rights reserved.                         |
 +=======================================================================+
 | NAME HZ_GNR_MAP10000
 |
 | DESCRIPTION
 |   This package body is generated by TCA for geoName referencing. 
 |
 | HISTORY
 |  08/30/2013 01:30:12      Generated.
 |
 *=======================================================================*/
 
  --------------------------------------
   -- declaration of private global varibles
   --------------------------------------
 
   g_debug_count        NUMBER := 0;
   g_country_geo_id     NUMBER;
   G_MAP_REC            HZ_GNR_UTIL_PKG.MAP_REC_TYPE;
   G_MAP_DTLS_TBL       HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
   G_USAGE_TBL          HZ_GNR_UTIL_PKG.USAGE_TBL_TYPE;
   G_USAGE_DTLS_TBL     HZ_GNR_UTIL_PKG.USAGE_DTLS_TBL_TYPE;
   G_MDU_TBL10000       HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
   G_MDU_TBL10006       HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
 
   --------------------------------------
   -- declaration of private procedures and functions
   --------------------------------------
 
   --------------------------------------
   -- private procedures and functions
   --------------------------------------
 
  FUNCTION get_usage_API(
    P_USAGE_CODE               VARCHAR2) RETURN VARCHAR2 IS
  i number;
  l_API_Name varchar2(30);
 
   BEGIN
     i := 0;
     IF G_USAGE_TBL.COUNT > 0 THEN
       i := G_USAGE_TBL.FIRST;
       LOOP
         IF G_USAGE_TBL(i).USAGE_CODE = P_USAGE_CODE THEN
           IF G_USAGE_TBL(i).USAGE_CODE = 'GEOGRAPHY' THEN
             l_API_Name := 'validateGeo';
           ELSIF G_USAGE_TBL(i).USAGE_CODE = 'TAX' THEN
             l_API_Name := 'validateTax';
           ELSE
             l_API_Name := 'validate'||G_USAGE_TBL(i).USAGE_ID;
           END IF;
         END IF;
         EXIT WHEN i = G_USAGE_TBL.LAST;
         i := G_USAGE_TBL.NEXT(i);
       END LOOP;
     END IF;
 
     RETURN l_API_Name;
 
  END get_usage_API;
 
 
  PROCEDURE validateForMap(
    p_loc_components_rec        IN HZ_GNR_UTIL_PKG.LOC_COMPONENTS_REC_TYPE,
    x_map_dtls_tbl              IN OUT NOCOPY HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE,
    X_CAUSE                     OUT NOCOPY VARCHAR2,
    X_STATUS                    OUT NOCOPY VARCHAR2) IS
 
 
    TYPE getGeo IS REF CURSOR;
    c_getGeo                getGeo;
    c_getGeo1               getGeo;
 
    l_multiple_parent_flag  VARCHAR2(1);
    l_sql                   VARCHAR2(9000);
    l_status                VARCHAR2(1);
    l_geography_type        VARCHAR2(30);
    l_geography_id          NUMBER;
    L_MAP_DTLS_TBL          HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
 
    l_module_prefix CONSTANT VARCHAR2(30) := 'HZ:ARHGNRGB:HZ_GNR_MAP10000';
    l_module        CONSTANT VARCHAR2(30) := 'ADDRESS_VALIDATION';
    l_debug_prefix           VARCHAR2(30);
 
    l_value1              VARCHAR2(360);
    l_type1               VARCHAR2(30);
    l_value2              VARCHAR2(360);
    l_type2               VARCHAR2(30);
    l_value3              VARCHAR2(360);
    l_type3               VARCHAR2(30);
    l_value4              VARCHAR2(360);
    l_type4               VARCHAR2(30);
    l_value5              VARCHAR2(360);
    l_type5               VARCHAR2(30);
 
  BEGIN 
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'Begin of Validate for Map',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_procedure,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
    --hk_debugl('Validate for Map Start');
    -- defaulting the sucess status
    x_status := FND_API.g_ret_sts_success;
 
    L_MAP_DTLS_TBL       := X_MAP_DTLS_TBL;
    --hk_debugl('The Map table passed in with loc comp values');
    --hk_debugt(L_MAP_DTLS_TBL);
 
    IF L_MAP_DTLS_TBL.COUNT = 1 THEN
      -- This means country is the only required mapped column for validation.
      -- and country is already populated in the L_MAP_DTLS_TBL in the initialization section of this package.
      x_status := FND_API.g_ret_sts_success;
      RETURN;
    END IF;
 
    IF HZ_GNR_UTIL_PKG.getLocCompCount(L_MAP_DTLS_TBL) = 0 THEN
      --hk_debugl('HZ_GNR_UTIL_PKG.getLocCompCount = 0');
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' HZ_GNR_UTIL_PKG.getLocCompCount = 0 ',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
      --No other location component value other than country is passed. 
      --Following call will try to derive missing lower level compoents  
      IF HZ_GNR_UTIL_PKG.fix_child(L_MAP_DTLS_TBL) = FALSE THEN
        x_cause  := 'MISSING_CHILD';
 
             IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
               hz_utility_v2pub.debug 
                    (p_message      => ' x_cause : '||x_cause,
                     p_prefix        => l_debug_prefix,
                     p_msg_level     => fnd_log.level_statement,
                     p_module_prefix => l_module_prefix,
                     p_module        => l_module
                    );
             END IF; 
 
        x_status := FND_API.G_RET_STS_ERROR;
        X_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
        RETURN;
      ELSE
 
             IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
               hz_utility_v2pub.debug 
                    (p_message      => ' Derived the missing lower level compoents ',
                     p_prefix        => l_debug_prefix,
                     p_msg_level     => fnd_log.level_statement,
                     p_module_prefix => l_module_prefix,
                     p_module        => l_module
                    );
             END IF; 
 
        x_status := FND_API.G_RET_STS_SUCCESS;
        X_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
        RETURN;
      END IF;
    END IF;
 
    l_value2 := NVL(L_MAP_DTLS_TBL(2).LOC_COMPVAL,'X') ;
    IF l_value2 = 'X' THEN
      l_type2 := 'X';
    ELSE
      l_type2 := L_MAP_DTLS_TBL(2).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type2;
    END IF;
 
    l_value3 := NVL(L_MAP_DTLS_TBL(3).LOC_COMPVAL,'X') ;
    IF l_value3 = 'X' THEN
      l_type3 := 'X';
    ELSE
      l_type3 := L_MAP_DTLS_TBL(3).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type3;
    END IF;
 
    l_value4 := NVL(L_MAP_DTLS_TBL(4).LOC_COMPVAL,'X') ;
    IF l_value4 = 'X' THEN
      l_type4 := 'X';
    ELSE
      l_type4 := L_MAP_DTLS_TBL(4).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type4;
    END IF;
 
    l_value5 := NVL(L_MAP_DTLS_TBL(5).LOC_COMPVAL,'X') ;
    IF l_value5 = 'X' THEN
      l_type5 := 'X';
    ELSE
      l_type5 := L_MAP_DTLS_TBL(5).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type5;
    END IF;
 
 
     l_sql := HZ_GNR_UTIL_PKG.getQuery(L_MAP_DTLS_TBL,L_MAP_DTLS_TBL,x_status);
    --hk_debugl('The SQL query');
    --hk_debugl(l_sql);
 
     IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
       hz_utility_v2pub.debug 
            (p_message      => ' The SQL query : '||l_sql,
             p_prefix        => l_debug_prefix,
             p_msg_level     => fnd_log.level_statement,
             p_module_prefix => l_module_prefix,
             p_module        => l_module
            );
     END IF; 
 
     OPEN  c_getGeo FOR l_sql USING G_MAP_REC.COUNTRY_CODE,g_country_geo_id
           ,l_type2,l_value2,l_type3,l_value3,l_type4,l_value4,l_type5,l_value5,l_geography_type;
     --hk_debugl('Before the first fetch');
 
     IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
       hz_utility_v2pub.debug 
            (p_message      => ' Before the first fetch',
             p_prefix        => l_debug_prefix,
             p_msg_level     => fnd_log.level_statement,
             p_module_prefix => l_module_prefix,
             p_module        => l_module
            );
     END IF; 
 
     --hk_debugt(L_MAP_DTLS_TBL);
     FETCH c_getGeo INTO l_geography_id,l_multiple_parent_flag,L_MAP_DTLS_TBL(1).GEOGRAPHY_ID
           ,L_MAP_DTLS_TBL(2).GEOGRAPHY_ID,L_MAP_DTLS_TBL(3).GEOGRAPHY_ID,L_MAP_DTLS_TBL(4).GEOGRAPHY_ID,L_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
     IF c_getGeo%NOTFOUND THEN  
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' NOT FOUND of the first fetch',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       --hk_debugl('NOT FOUND of the first fetch');
       --hk_debugt(L_MAP_DTLS_TBL);
       x_cause  := 'NO_MATCH';
       HZ_GNR_UTIL_PKG.fix_no_match(L_MAP_DTLS_TBL,x_status);
       --hk_debugl('Map_loc table after Fix');
       --hk_debugt(L_MAP_DTLS_TBL);
       x_status := FND_API.G_RET_STS_ERROR;
     ELSE 
       --Fetching once more to see where there are multiple records
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Fetching once more to see where there are multiple records ',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       FETCH c_getGeo INTO l_geography_id,l_multiple_parent_flag,L_MAP_DTLS_TBL(1).GEOGRAPHY_ID
           ,L_MAP_DTLS_TBL(2).GEOGRAPHY_ID,L_MAP_DTLS_TBL(3).GEOGRAPHY_ID,L_MAP_DTLS_TBL(4).GEOGRAPHY_ID,L_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
       IF c_getGeo%FOUND THEN -- not able to identify a unique record
 
         -- Get the query again with identifier type as NAME if multiple match found
         -- If it returns a record, we are able to derive a unique record for identifier type as NAME
         l_sql := HZ_GNR_UTIL_PKG.getQueryforMultiMatch(L_MAP_DTLS_TBL,L_MAP_DTLS_TBL,x_status);
         OPEN  c_getGeo1 FOR l_sql USING G_MAP_REC.COUNTRY_CODE,g_country_geo_id
               ,l_type2,l_value2,l_type3,l_value3,l_type4,l_value4,l_type5,l_value5,l_geography_type;
 
         IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
           hz_utility_v2pub.debug 
                (p_message      => 'Before the fetch of the query with identifier type as NAME after multiple match found',
                 p_prefix        => l_debug_prefix,
                 p_msg_level     => fnd_log.level_statement,
                 p_module_prefix => l_module_prefix,
                 p_module        => l_module
                );
         END IF; 
 
         --hk_debugt(L_MAP_DTLS_TBL);
         FETCH c_getGeo1 INTO l_geography_id,l_multiple_parent_flag,L_MAP_DTLS_TBL(1).GEOGRAPHY_ID
               ,L_MAP_DTLS_TBL(2).GEOGRAPHY_ID,L_MAP_DTLS_TBL(3).GEOGRAPHY_ID,L_MAP_DTLS_TBL(4).GEOGRAPHY_ID,L_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
         IF c_getGeo1%FOUND THEN  
           -- check if there is another row with same STANDARD_NAME, in that case it is error case 
           FETCH c_getGeo1 INTO l_geography_id,l_multiple_parent_flag,L_MAP_DTLS_TBL(1).GEOGRAPHY_ID 
                ,L_MAP_DTLS_TBL(2).GEOGRAPHY_ID,L_MAP_DTLS_TBL(3).GEOGRAPHY_ID,L_MAP_DTLS_TBL(4).GEOGRAPHY_ID,L_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
           IF c_getGeo1%NOTFOUND THEN  -- success (only 1 rec with same primary name exists)
 
             IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                    (p_message       => 'MAP-Able to found a unique record or a record with multiple parent flag = Y with identifier type as NAME',
                     p_prefix        => l_debug_prefix,
                     p_msg_level     => fnd_log.level_statement,
                     p_module_prefix => l_module_prefix,
                     p_module        => l_module
                    );
             END IF; 
 
           ELSE -- Not able to find a unique record with identifier type as NAME 
 
               IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
	                 hz_utility_v2pub.debug 
	                      (p_message      => 'MAP-Not able to find a record with with identifier type as NAME. '|| 
	                                         ' More than 1 rec exists with same STANDARD NAME', 
	                       p_prefix        => l_debug_prefix, 
	                       p_msg_level     => fnd_log.level_statement, 
	                       p_module_prefix => l_module_prefix, 
	                       p_module        => l_module 
	                      ); 
	               END IF; 
 
	               x_cause  := 'MULTIPLE_MATCH'; 
	               x_status := FND_API.G_RET_STS_ERROR; 
	               RETURN; 
	          END IF; 
 
         ELSE -- Not able to found a unique record with identifier type as NAME
           x_cause  := 'MULTIPLE_MATCH';
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' Not able to find a record with with identifier type as NAME. x_cause : '||x_cause,
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           x_status := FND_API.G_RET_STS_ERROR;
           RETURN;
         END IF; 
       CLOSE c_getGeo1;
 
       ELSE -- a unique record or a record with multiple parent flag = Y is found
 
         IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
           hz_utility_v2pub.debug 
                (p_message       => ' A unique record or a record with multiple parent flag = Y is found ',
                 p_prefix        => l_debug_prefix,
                 p_msg_level     => fnd_log.level_statement,
                 p_module_prefix => l_module_prefix,
                 p_module        => l_module
                );
         END IF; 
 
       END IF;
 
       IF l_multiple_parent_flag = 'Y' THEN
         IF HZ_GNR_UTIL_PKG.fix_multiparent(l_geography_id,L_MAP_DTLS_TBL) = TRUE THEN
           NULL; -- a unique record is found
         ELSE --  Multiple parent case not able to find a unique record 
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' Multiple parent case not able to find a unique record',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           x_cause  := 'MULTIPLE_PARENT';
           X_MAP_DTLS_TBL := L_MAP_DTLS_TBL;
           x_status := FND_API.G_RET_STS_ERROR;
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' x_cause : '||x_cause,
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           RETURN;
         END IF;
 
       ELSE -- a unique record is found
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => 'A unique record is found ',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
       END IF;
 
     END IF;
 
     CLOSE c_getGeo;
 
 
     IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
       hz_utility_v2pub.debug 
            (p_message      => ' Calling fix_child. This call will try to derive missing lower level compoents.',
             p_prefix        => l_debug_prefix,
             p_msg_level     => fnd_log.level_statement,
             p_module_prefix => l_module_prefix,
             p_module        => l_module
            );
     END IF; 
 
     --Following call will try to derive missing lower level compoents  
     IF HZ_GNR_UTIL_PKG.fix_child(L_MAP_DTLS_TBL) = FALSE THEN
       x_cause  := 'MISSING_CHILD';
 
             IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
               hz_utility_v2pub.debug 
                    (p_message      => ' x_cause : '||x_cause,
                     p_prefix        => l_debug_prefix,
                     p_msg_level     => fnd_log.level_statement,
                     p_module_prefix => l_module_prefix,
                     p_module        => l_module
                    );
             END IF; 
 
       x_status             := FND_API.G_RET_STS_ERROR;
       X_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
       RETURN;
     END IF;
 
     X_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'End of Validate for Map',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_procedure,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
 
  END validateForMap;
 
  PROCEDURE validateGeo(
    P_LOCATION_ID               IN NUMBER,
    P_COUNTRY                   IN VARCHAR2,
    P_STATE                     IN VARCHAR2,
    P_PROVINCE                  IN VARCHAR2,
    P_COUNTY                    IN VARCHAR2,
    P_CITY                      IN VARCHAR2,
    P_POSTAL_CODE               IN VARCHAR2,
    P_POSTAL_PLUS4_CODE         IN VARCHAR2,
    P_ATTRIBUTE1                IN VARCHAR2,
    P_ATTRIBUTE2                IN VARCHAR2,
    P_ATTRIBUTE3                IN VARCHAR2,
    P_ATTRIBUTE4                IN VARCHAR2,
    P_ATTRIBUTE5                IN VARCHAR2,
    P_ATTRIBUTE6                IN VARCHAR2,
    P_ATTRIBUTE7                IN VARCHAR2,
    P_ATTRIBUTE8                IN VARCHAR2,
    P_ATTRIBUTE9                IN VARCHAR2,
    P_ATTRIBUTE10               IN VARCHAR2,
    P_LOCK_FLAG                 IN VARCHAR2,
    X_CALL_MAP                  IN OUT NOCOPY VARCHAR2,
    P_CALLED_FROM               IN VARCHAR2,
    P_ADDR_VAL_LEVEL            IN VARCHAR2,
    X_ADDR_WARN_MSG             OUT NOCOPY VARCHAR2,
    X_ADDR_VAL_STATUS           OUT NOCOPY VARCHAR2,
    X_STATUS                    OUT NOCOPY VARCHAR2) IS
 
    l_loc_components_rec HZ_GNR_UTIL_PKG.LOC_COMPONENTS_REC_TYPE;
 
    TYPE getGeo IS REF CURSOR;
    c_getGeo                getGeo;
    c_getGeo1               getGeo;
 
    l_multiple_parent_flag  VARCHAR2(1);
    l_sql                   VARCHAR2(9000);
    l_cause                 VARCHAR2(30);
    l_usage_code            VARCHAR2(30);
    l_usage_id              NUMBER;
    l_status                VARCHAR2(1);
    l_get_addr_val          VARCHAR2(1);
    l_geography_type        VARCHAR2(30);
    l_geography_id          NUMBER;
    L_MDU_TBL               HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
    LL_MAP_DTLS_TBL         HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
    L_MAP_DTLS_TBL          HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
 
    l_module_prefix CONSTANT VARCHAR2(30) := 'HZ:ARHGNRGB:HZ_GNR_MAP10000';
    l_module        CONSTANT VARCHAR2(30) := 'ADDRESS_VALIDATION';
    l_debug_prefix           VARCHAR2(30) := p_location_id;
 
    l_value1              VARCHAR2(360);
    l_type1               VARCHAR2(30);
    l_value2              VARCHAR2(360);
    l_type2               VARCHAR2(30);
    l_value3              VARCHAR2(360);
    l_type3               VARCHAR2(30);
    l_value4              VARCHAR2(360);
    l_type4               VARCHAR2(30);
 
  BEGIN 
 
    -- defaulting the sucess status
    x_status := FND_API.g_ret_sts_success;
   --hk_debugl('Processing Location record with location_id :- '||nvl(to_char(p_location_id),'NULL_LOCATION_ID'));
    l_loc_components_rec.COUNTRY                 := P_COUNTRY;
    l_loc_components_rec.STATE                   := P_STATE;
    l_loc_components_rec.PROVINCE                := P_PROVINCE;
    l_loc_components_rec.COUNTY                  := P_COUNTY;
    l_loc_components_rec.CITY                    := P_CITY;
    l_loc_components_rec.POSTAL_CODE             := HZ_GNR_UTIL_PKG.postal_code_to_validate(P_COUNTRY,P_POSTAL_CODE);
    l_loc_components_rec.POSTAL_PLUS4_CODE       := P_POSTAL_PLUS4_CODE;
    l_loc_components_rec.ATTRIBUTE1              := P_ATTRIBUTE1;
    l_loc_components_rec.ATTRIBUTE2              := P_ATTRIBUTE2;
    l_loc_components_rec.ATTRIBUTE3              := P_ATTRIBUTE3;
    l_loc_components_rec.ATTRIBUTE4              := P_ATTRIBUTE4;
    l_loc_components_rec.ATTRIBUTE5              := P_ATTRIBUTE5;
    l_loc_components_rec.ATTRIBUTE6              := P_ATTRIBUTE6;
    l_loc_components_rec.ATTRIBUTE7              := P_ATTRIBUTE7;
    l_loc_components_rec.ATTRIBUTE8              := P_ATTRIBUTE8;
    l_loc_components_rec.ATTRIBUTE9              := P_ATTRIBUTE9;
    l_loc_components_rec.ATTRIBUTE10             := P_ATTRIBUTE10;
 
    L_USAGE_ID           := 10000;
    L_USAGE_CODE         := 'GEOGRAPHY';
    L_MDU_TBL            := G_MDU_TBL10000;
    L_MAP_DTLS_TBL       := G_MAP_DTLS_TBL;
    l_get_addr_val       := 'N';
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message       => 'Begin of validation for '||L_USAGE_CODE,
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_procedure,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
    IF P_LOCATION_ID IS NOT NULL AND P_CALLED_FROM <> 'GNR' THEN
      --hk_debugl('Before check_GNR_For_Usage');
      IF HZ_GNR_UTIL_PKG.check_GNR_For_Usage(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                             L_USAGE_CODE,L_MDU_TBL,x_status) = TRUE THEN
        --hk_debugl('After check_GNR_For_Usage  with status :- '||x_status);
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'There is already a procedded success record in GNR log table.',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
        x_status := FND_API.g_ret_sts_success;
        X_ADDR_VAL_STATUS := x_status;
        RETURN;
      END IF;
    END IF;
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'Not able to find an existing success record in GNR log table.',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
    -- After the following call L_MAP_DTLS_TBL will have the components value populated.
    HZ_GNR_UTIL_PKG.getLocCompValues(G_MAP_REC.LOC_TBL_NAME,L_LOC_COMPONENTS_REC,L_MAP_DTLS_TBL,x_status);
 
    -- Below code will overwrite the LOC_COMPVAL for COUNTRY to COUNTRY_CODE
    -- This change is to update COUNTRY column in locations table with COUNTRY_CODE 
    -- even if the table has Country name in this column and the validation is success 
    L_MAP_DTLS_TBL(1).LOC_COMPVAL := G_MAP_REC.COUNTRY_CODE;
 
    -- After the following call L_MDU_TBL will have the components value populated.
    HZ_GNR_UTIL_PKG.getLocCompValues(G_MAP_REC.LOC_TBL_NAME,L_LOC_COMPONENTS_REC,L_MDU_TBL,x_status);
 
    --hk_debugl(' value of X_CALL_MAP : '||X_CALL_MAP);
    IF X_CALL_MAP = 'Y' THEN
      LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
 
      IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
        hz_utility_v2pub.debug 
           (p_message      => 'Before calling validate for Map ',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
      END IF; 
 
      validateForMap(L_LOC_COMPONENTS_REC,LL_MAP_DTLS_TBL,l_cause,x_status);
      --hk_debugl('Back from Validate for Map  with status :- '||x_status||'.. and case :'||l_cause);
 
      IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
        hz_utility_v2pub.debug 
           (p_message      => 'Back from Validate for Map with status : .'||x_status||'.. and case :'||l_cause,
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
      END IF; 
 
      -- This usage level check is required upfront because usage level validation will ignore 
      -- some of the passed in parameters for the complete mapping and may result in wrong status 
      IF (x_status = FND_API.g_ret_sts_error) THEN 
 
        -- hk_debugl('Trying to check if usage level validation is success even with map validation as error..'); 
        -- hk_debugl('TABLE that is returned by Validate For Map'); 
        -- hk_debugt(LL_MAP_DTLS_TBL); 
        -- hk_debugl('Usage Map Table With loc comp values'); 
        -- hk_debugt(L_MDU_TBL); 
 
        IF HZ_GNR_UTIL_PKG.get_usage_val_status(LL_MAP_DTLS_TBL,L_MDU_TBL) = FND_API.G_RET_STS_SUCCESS THEN 
          -- hk_debugl('COMPLETE mapping is error but is sufficient for passed usage. So setting X_STATUS to success'); 
          x_status := FND_API.g_ret_sts_success; 
 
          IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                 (p_message      => 'COMPLETE mapping is error but is sufficient for passed usage. So setting X_STATUS to success',
                  p_prefix        => l_debug_prefix,
                  p_msg_level     => fnd_log.level_statement,
                  p_module_prefix => l_module_prefix,
                  p_module        => l_module
                 );
          END IF; 
 
        END IF; 
      END IF; 
      -------End of status check for usage level ----------+ 
 
      IF x_status = FND_API.g_ret_sts_success THEN
        --hk_debugt(LL_MAP_DTLS_TBL); ----- Code to display the output.
        -- Set the address validation status to success since x_statusis success 
        X_ADDR_VAL_STATUS := x_status;
        IF P_LOCATION_ID IS NOT NULL THEN
 
          IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
            hz_utility_v2pub.debug 
                 (p_message      => ' Location id is not null. Call fill_values, create_gnr and Return back.',
                  p_prefix        => l_debug_prefix,
                  p_msg_level     => fnd_log.level_statement,
                  p_module_prefix => l_module_prefix,
                  p_module        => l_module
                 );
          END IF; 
 
          HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
          HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                     L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
        END IF;
 
        X_CALL_MAP := 'N';
        RETURN;
 
      ELSE 
 
        IF P_LOCATION_ID IS NOT NULL THEN
          --hk_debugl('Table that is returned by Validate For Map');
          --hk_debugt(LL_MAP_DTLS_TBL);
          --hk_debugl('Usage Map Table With loc comp values');
          --hk_debugt(L_MDU_TBL);
          IF HZ_GNR_UTIL_PKG.do_usage_val(l_cause,L_MAP_DTLS_TBL,L_MDU_TBL,LL_MAP_DTLS_TBL,l_status) = FALSE THEN
 
            IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
              hz_utility_v2pub.debug 
                 (p_message      => ' No usage level validation is required. Call create_gnr with the map status',
                  p_prefix        => l_debug_prefix,
                  p_msg_level     => fnd_log.level_statement,
                  p_module_prefix => l_module_prefix,
                  p_module        => l_module
                 );
            END IF; 
 
            -- This means no usage level validation is required
            IF HZ_GNR_UTIL_PKG.get_usage_val_status(LL_MAP_DTLS_TBL,L_MDU_TBL) = FND_API.G_RET_STS_ERROR THEN
 
              HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
              -- This below call is to derive the address validation status and set the message 
              X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,'E',x_status);
              --hk_debugl('Calling create_gnr With Map_status "E"');
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status E.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
              HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                       L_USAGE_CODE,'E',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
              --hk_debugl('Status after create_gnr : '||l_status);
            ELSE 
 
              HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
              -- This below call is to derive the address validation status and set the message 
              X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,'S',x_status);
              --hk_debugl('Calling create_gnr With Map_status "S"');
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status S.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
              HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                       L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
              --hk_debugl('Status after create_gnr : '||l_status);
              x_status := FND_API.g_ret_sts_success;
            END IF;
 
            X_CALL_MAP := 'N';
            RETURN;
 
          ELSE 
            NULL; -- do_usage_val has concluded that usage level validation has to go through.
          END IF;
        END IF;
      END IF;
 
      l_get_addr_val := 'Y';
      X_CALL_MAP := 'N';
 
    END IF;
 
    IF L_MDU_TBL.COUNT = 1 THEN
 
      IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
        hz_utility_v2pub.debug 
             (p_message      => ' This means country is the only required mapped column for validation. Call create_gnr with map status S',
              p_prefix        => l_debug_prefix,
              p_msg_level     => fnd_log.level_statement,
              p_module_prefix => l_module_prefix,
              p_module        => l_module
             );
      END IF; 
 
      -- This means country is the only required mapped column for validation.
      -- and country is already populated in the L_MDU_TBL in the initialization section of this package.
      --hk_debugt(L_MDU_TBL); ----- Code to display the output.
      --hk_debugl('Calling create_gnr With Map_status "S"');
      -- This below call is to derive the address validation status and set the message 
      X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(L_MDU_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,'S',x_status);
 
      IF P_LOCATION_ID IS NOT NULL THEN
          HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                     L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,L_MDU_TBL,l_status);
      END IF;
 
      x_status := FND_API.g_ret_sts_success;
      RETURN;
    END IF;
    --hk_debugl('L_MDU_TBL has count count more than 1');
 
    l_value2 := NVL(L_MDU_TBL(2).LOC_COMPVAL,'X') ;
    IF l_value2 = 'X' THEN
      l_type2 := 'X';
    ELSE
      l_type2 := L_MDU_TBL(2).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type2;
    END IF;
 
    l_value3 := NVL(L_MDU_TBL(3).LOC_COMPVAL,'X') ;
    IF l_value3 = 'X' THEN
      l_type3 := 'X';
    ELSE
      l_type3 := L_MDU_TBL(3).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type3;
    END IF;
 
    l_value4 := NVL(L_MDU_TBL(4).LOC_COMPVAL,'X') ;
    IF l_value4 = 'X' THEN
      l_type4 := 'X';
    ELSE
      l_type4 := L_MDU_TBL(4).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type4;
    END IF;
 
 
     LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
     l_sql := HZ_GNR_UTIL_PKG.getQuery(L_MAP_DTLS_TBL,L_MDU_TBL,x_status);
     --hk_debugl('The SQL query');
     --hk_debugl(l_sql);
 
     IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
       hz_utility_v2pub.debug 
            (p_message      => ' The SQL query : '||l_sql,
             p_prefix        => l_debug_prefix,
             p_msg_level     => fnd_log.level_statement,
             p_module_prefix => l_module_prefix,
             p_module        => l_module
            );
     END IF; 
 
     OPEN  c_getGeo FOR l_sql USING G_MAP_REC.COUNTRY_CODE,g_country_geo_id
           ,l_type2,l_value2,l_type3,l_value3,l_type4,l_value4,l_geography_type;
     FETCH c_getGeo INTO l_geography_id,l_multiple_parent_flag,LL_MAP_DTLS_TBL(1).GEOGRAPHY_ID
           ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
     IF c_getGeo%NOTFOUND THEN 
       --hk_debugl('No Match found for the usage level search');
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' No Match found for the usage level search ',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       HZ_GNR_UTIL_PKG.fix_no_match(LL_MAP_DTLS_TBL,x_status);
       x_status := FND_API.G_RET_STS_ERROR;
     ELSE 
       --Fetching once more to see where there are multiple records
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Fetching once more to see where there are multiple records ',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       FETCH c_getGeo INTO l_geography_id,l_multiple_parent_flag,LL_MAP_DTLS_TBL(1).GEOGRAPHY_ID
           ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
       IF c_getGeo%FOUND THEN -- not able to identify a unique record
 
         -- Get the query again with identifier type as NAME if multiple match found
         -- If it returns a record, we are able to derive a unique record for identifier type as NAME
         l_sql := HZ_GNR_UTIL_PKG.getQueryforMultiMatch(L_MAP_DTLS_TBL,L_MDU_TBL,x_status);
         OPEN  c_getGeo1 FOR l_sql USING G_MAP_REC.COUNTRY_CODE,g_country_geo_id
               ,l_type2,l_value2,l_type3,l_value3,l_type4,l_value4,l_geography_type;
 
         IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
           hz_utility_v2pub.debug 
                (p_message      => 'Before the fetch of the query with identifier type as NAME after multiple match found',
                 p_prefix        => l_debug_prefix,
                 p_msg_level     => fnd_log.level_statement,
                 p_module_prefix => l_module_prefix,
                 p_module        => l_module
                );
         END IF; 
 
     --hk_debugt(LL_MAP_DTLS_TBL);
         FETCH c_getGeo1 INTO l_geography_id,l_multiple_parent_flag,LL_MAP_DTLS_TBL(1).GEOGRAPHY_ID
               ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
         IF c_getGeo1%FOUND THEN  
           -- check if there is another row with same STANDARD_NAME, in that case it is error case 
           FETCH c_getGeo1 INTO l_geography_id,l_multiple_parent_flag,L_MAP_DTLS_TBL(1).GEOGRAPHY_ID 
                ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
           IF c_getGeo1%NOTFOUND THEN  -- success (only 1 rec with same primary name exists)
 
             IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                    (p_message       => 'GEO-Able to find a unique record or a record with multiple parent flag = Y with identifier type as NAME',
                     p_prefix        => l_debug_prefix,
                     p_msg_level     => fnd_log.level_statement,
                     p_module_prefix => l_module_prefix,
                     p_module        => l_module
                    );
             END IF; 
 
           ELSE -- Not able to find a unique record with identifier type as NAME 
 
               IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
	                 hz_utility_v2pub.debug 
	                      (p_message      => 'GEO-Not able to find a record with with identifier type as NAME. '|| 
	                                         ' More than 1 rec exists with same STANDARD NAME', 
	                       p_prefix        => l_debug_prefix, 
	                       p_msg_level     => fnd_log.level_statement, 
	                       p_module_prefix => l_module_prefix, 
	                       p_module        => l_module 
	                      ); 
	               END IF; 
 
               LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL; 
               HZ_GNR_UTIL_PKG.fix_no_match(LL_MAP_DTLS_TBL,x_status); 
               x_status := FND_API.G_RET_STS_ERROR; 
	          END IF; 
 
         ELSE -- Not able to found a unique record with identifier type as NAME
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' Not able to find a record with with identifier type as NAME. ',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
           x_status := FND_API.G_RET_STS_ERROR;
         END IF; 
         CLOSE c_getGeo1;
 
       ELSE -- a unique record or a record with multiple parent flag = Y is found
 
         IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
           hz_utility_v2pub.debug 
                (p_message      => ' A unique record or a record with multiple parent flag = Y is found ',
                 p_prefix        => l_debug_prefix,
                 p_msg_level     => fnd_log.level_statement,
                 p_module_prefix => l_module_prefix,
                 p_module        => l_module
                );
         END IF; 
 
       END IF;
 
       IF l_multiple_parent_flag = 'Y'  AND x_status <> FND_API.G_RET_STS_ERROR THEN
         IF HZ_GNR_UTIL_PKG.fix_multiparent(l_geography_id,LL_MAP_DTLS_TBL) = TRUE THEN
           NULL;
         ELSE --  Multiple parent case not able to find a unique record 
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' Multiple parent case not able to find a unique record',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           x_status := FND_API.G_RET_STS_ERROR;
         END IF;
 
       ELSE -- a unique record is found
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' A unique record is found ',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
       END IF;
     END IF;
     CLOSE c_getGeo;
 
      --hk_debugl('Return STatus after first fetch : '||x_status);
     --Following call will try to derive missing lower level compoents  
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Return Status after first fetch : '||x_status,
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Calling fix_child. This call will try to derive missing lower level compoents.',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
     IF HZ_GNR_UTIL_PKG.fix_child(LL_MAP_DTLS_TBL) = FALSE THEN
       x_status := HZ_GNR_UTIL_PKG.get_usage_val_status(LL_MAP_DTLS_TBL,L_MDU_TBL);
     END IF;
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Return status after fix_child '||x_status,
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
      --hk_debugl('LL_MAP_DTLS_TBL before fill_values');
      --hk_debugt(LL_MAP_DTLS_TBL);
     HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
      --hk_debugl('LL_MAP_DTLS_TBL after fill_values');
      --hk_debugt(LL_MAP_DTLS_TBL);
 
    IF x_status = FND_API.g_ret_sts_success THEN
      -- We need to call the getAddrValStatus only once. All other cases we are looking into x_call_map 
      -- In some case the below code will execute with the x_call_map as N  
      IF l_get_addr_val = 'Y' THEN
         -- This below call is to derive the address validation status and set the message 
         X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,x_status,x_status);
      END IF;
 
      IF P_LOCATION_ID IS NOT NULL THEN
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status S.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
        HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                   L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
      --hk_debugl('Prceossed GNR With Status : S and returned with Status : '||l_status);
      END IF;
    ELSE 
      -- We need to call the getAddrValStatus only once. All other cases we are looking into x_call_map 
      -- In some case the below code will execute with the x_call_map as N  
      IF l_get_addr_val = 'Y' THEN
         -- This below call is to derive the address validation status and set the message 
         X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,x_status,x_status);
      END IF;
 
      IF P_LOCATION_ID IS NOT NULL THEN
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status E.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
        HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                     L_USAGE_CODE,'E',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
        --hk_debugl('Prceossed GNR With Status : E and returned with Status : '||l_status);
      END IF;
    END IF;
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'End of validation for '||L_USAGE_CODE,
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_procedure,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
            --hk_debugt(LL_MAP_DTLS_TBL); ----- Code to display the output.
 
  END validateGeo;
 
  PROCEDURE validateTax(
    P_LOCATION_ID               IN NUMBER,
    P_COUNTRY                   IN VARCHAR2,
    P_STATE                     IN VARCHAR2,
    P_PROVINCE                  IN VARCHAR2,
    P_COUNTY                    IN VARCHAR2,
    P_CITY                      IN VARCHAR2,
    P_POSTAL_CODE               IN VARCHAR2,
    P_POSTAL_PLUS4_CODE         IN VARCHAR2,
    P_ATTRIBUTE1                IN VARCHAR2,
    P_ATTRIBUTE2                IN VARCHAR2,
    P_ATTRIBUTE3                IN VARCHAR2,
    P_ATTRIBUTE4                IN VARCHAR2,
    P_ATTRIBUTE5                IN VARCHAR2,
    P_ATTRIBUTE6                IN VARCHAR2,
    P_ATTRIBUTE7                IN VARCHAR2,
    P_ATTRIBUTE8                IN VARCHAR2,
    P_ATTRIBUTE9                IN VARCHAR2,
    P_ATTRIBUTE10               IN VARCHAR2,
    P_LOCK_FLAG                 IN VARCHAR2,
    X_CALL_MAP                  IN OUT NOCOPY VARCHAR2,
    P_CALLED_FROM               IN VARCHAR2,
    P_ADDR_VAL_LEVEL            IN VARCHAR2,
    X_ADDR_WARN_MSG             OUT NOCOPY VARCHAR2,
    X_ADDR_VAL_STATUS           OUT NOCOPY VARCHAR2,
    X_STATUS                    OUT NOCOPY VARCHAR2) IS
 
    l_loc_components_rec HZ_GNR_UTIL_PKG.LOC_COMPONENTS_REC_TYPE;
 
    TYPE getGeo IS REF CURSOR;
    c_getGeo                getGeo;
    c_getGeo1               getGeo;
 
    l_multiple_parent_flag  VARCHAR2(1);
    l_sql                   VARCHAR2(9000);
    l_cause                 VARCHAR2(30);
    l_usage_code            VARCHAR2(30);
    l_usage_id              NUMBER;
    l_status                VARCHAR2(1);
    l_get_addr_val          VARCHAR2(1);
    l_geography_type        VARCHAR2(30);
    l_geography_id          NUMBER;
    L_MDU_TBL               HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
    LL_MAP_DTLS_TBL         HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
    L_MAP_DTLS_TBL          HZ_GNR_UTIL_PKG.MAPLOC_REC_TBL_TYPE;
 
    l_module_prefix CONSTANT VARCHAR2(30) := 'HZ:ARHGNRGB:HZ_GNR_MAP10000';
    l_module        CONSTANT VARCHAR2(30) := 'ADDRESS_VALIDATION';
    l_debug_prefix           VARCHAR2(30) := p_location_id;
 
    l_value1              VARCHAR2(360);
    l_type1               VARCHAR2(30);
    l_value2              VARCHAR2(360);
    l_type2               VARCHAR2(30);
    l_value3              VARCHAR2(360);
    l_type3               VARCHAR2(30);
    l_value4              VARCHAR2(360);
    l_type4               VARCHAR2(30);
 
  BEGIN 
 
    -- defaulting the sucess status
    x_status := FND_API.g_ret_sts_success;
   --hk_debugl('Processing Location record with location_id :- '||nvl(to_char(p_location_id),'NULL_LOCATION_ID'));
    l_loc_components_rec.COUNTRY                 := P_COUNTRY;
    l_loc_components_rec.STATE                   := P_STATE;
    l_loc_components_rec.PROVINCE                := P_PROVINCE;
    l_loc_components_rec.COUNTY                  := P_COUNTY;
    l_loc_components_rec.CITY                    := P_CITY;
    l_loc_components_rec.POSTAL_CODE             := HZ_GNR_UTIL_PKG.postal_code_to_validate(P_COUNTRY,P_POSTAL_CODE);
    l_loc_components_rec.POSTAL_PLUS4_CODE       := P_POSTAL_PLUS4_CODE;
    l_loc_components_rec.ATTRIBUTE1              := P_ATTRIBUTE1;
    l_loc_components_rec.ATTRIBUTE2              := P_ATTRIBUTE2;
    l_loc_components_rec.ATTRIBUTE3              := P_ATTRIBUTE3;
    l_loc_components_rec.ATTRIBUTE4              := P_ATTRIBUTE4;
    l_loc_components_rec.ATTRIBUTE5              := P_ATTRIBUTE5;
    l_loc_components_rec.ATTRIBUTE6              := P_ATTRIBUTE6;
    l_loc_components_rec.ATTRIBUTE7              := P_ATTRIBUTE7;
    l_loc_components_rec.ATTRIBUTE8              := P_ATTRIBUTE8;
    l_loc_components_rec.ATTRIBUTE9              := P_ATTRIBUTE9;
    l_loc_components_rec.ATTRIBUTE10             := P_ATTRIBUTE10;
 
    L_USAGE_ID           := 10006;
    L_USAGE_CODE         := 'TAX';
    L_MDU_TBL            := G_MDU_TBL10006;
    L_MAP_DTLS_TBL       := G_MAP_DTLS_TBL;
    l_get_addr_val       := 'N';
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message       => 'Begin of validation for '||L_USAGE_CODE,
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_procedure,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
    IF P_LOCATION_ID IS NOT NULL AND P_CALLED_FROM <> 'GNR' THEN
      --hk_debugl('Before check_GNR_For_Usage');
      IF HZ_GNR_UTIL_PKG.check_GNR_For_Usage(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                             L_USAGE_CODE,L_MDU_TBL,x_status) = TRUE THEN
        --hk_debugl('After check_GNR_For_Usage  with status :- '||x_status);
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'There is already a procedded success record in GNR log table.',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
        x_status := FND_API.g_ret_sts_success;
        X_ADDR_VAL_STATUS := x_status;
        RETURN;
      END IF;
    END IF;
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'Not able to find an existing success record in GNR log table.',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
    -- After the following call L_MAP_DTLS_TBL will have the components value populated.
    HZ_GNR_UTIL_PKG.getLocCompValues(G_MAP_REC.LOC_TBL_NAME,L_LOC_COMPONENTS_REC,L_MAP_DTLS_TBL,x_status);
 
    -- Below code will overwrite the LOC_COMPVAL for COUNTRY to COUNTRY_CODE
    -- This change is to update COUNTRY column in locations table with COUNTRY_CODE 
    -- even if the table has Country name in this column and the validation is success 
    L_MAP_DTLS_TBL(1).LOC_COMPVAL := G_MAP_REC.COUNTRY_CODE;
 
    -- After the following call L_MDU_TBL will have the components value populated.
    HZ_GNR_UTIL_PKG.getLocCompValues(G_MAP_REC.LOC_TBL_NAME,L_LOC_COMPONENTS_REC,L_MDU_TBL,x_status);
 
    --hk_debugl(' value of X_CALL_MAP : '||X_CALL_MAP);
    IF X_CALL_MAP = 'Y' THEN
      LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
 
      IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
        hz_utility_v2pub.debug 
           (p_message      => 'Before calling validate for Map ',
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
      END IF; 
 
      validateForMap(L_LOC_COMPONENTS_REC,LL_MAP_DTLS_TBL,l_cause,x_status);
      --hk_debugl('Back from Validate for Map  with status :- '||x_status||'.. and case :'||l_cause);
 
      IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
        hz_utility_v2pub.debug 
           (p_message      => 'Back from Validate for Map with status : .'||x_status||'.. and case :'||l_cause,
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_statement,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
      END IF; 
 
      -- This usage level check is required upfront because usage level validation will ignore 
      -- some of the passed in parameters for the complete mapping and may result in wrong status 
      IF (x_status = FND_API.g_ret_sts_error) THEN 
 
        -- hk_debugl('Trying to check if usage level validation is success even with map validation as error..'); 
        -- hk_debugl('TABLE that is returned by Validate For Map'); 
        -- hk_debugt(LL_MAP_DTLS_TBL); 
        -- hk_debugl('Usage Map Table With loc comp values'); 
        -- hk_debugt(L_MDU_TBL); 
 
        IF HZ_GNR_UTIL_PKG.get_usage_val_status(LL_MAP_DTLS_TBL,L_MDU_TBL) = FND_API.G_RET_STS_SUCCESS THEN 
          -- hk_debugl('COMPLETE mapping is error but is sufficient for passed usage. So setting X_STATUS to success'); 
          x_status := FND_API.g_ret_sts_success; 
 
          IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                 (p_message      => 'COMPLETE mapping is error but is sufficient for passed usage. So setting X_STATUS to success',
                  p_prefix        => l_debug_prefix,
                  p_msg_level     => fnd_log.level_statement,
                  p_module_prefix => l_module_prefix,
                  p_module        => l_module
                 );
          END IF; 
 
        END IF; 
      END IF; 
      -------End of status check for usage level ----------+ 
 
      IF x_status = FND_API.g_ret_sts_success THEN
        --hk_debugt(LL_MAP_DTLS_TBL); ----- Code to display the output.
        -- Set the address validation status to success since x_statusis success 
        X_ADDR_VAL_STATUS := x_status;
        IF P_LOCATION_ID IS NOT NULL THEN
 
          IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
            hz_utility_v2pub.debug 
                 (p_message      => ' Location id is not null. Call fill_values, create_gnr and Return back.',
                  p_prefix        => l_debug_prefix,
                  p_msg_level     => fnd_log.level_statement,
                  p_module_prefix => l_module_prefix,
                  p_module        => l_module
                 );
          END IF; 
 
          HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
          HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                     L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
        END IF;
 
        X_CALL_MAP := 'N';
        RETURN;
 
      ELSE 
 
        IF P_LOCATION_ID IS NOT NULL THEN
          --hk_debugl('Table that is returned by Validate For Map');
          --hk_debugt(LL_MAP_DTLS_TBL);
          --hk_debugl('Usage Map Table With loc comp values');
          --hk_debugt(L_MDU_TBL);
          IF HZ_GNR_UTIL_PKG.do_usage_val(l_cause,L_MAP_DTLS_TBL,L_MDU_TBL,LL_MAP_DTLS_TBL,l_status) = FALSE THEN
 
            IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
              hz_utility_v2pub.debug 
                 (p_message      => ' No usage level validation is required. Call create_gnr with the map status',
                  p_prefix        => l_debug_prefix,
                  p_msg_level     => fnd_log.level_statement,
                  p_module_prefix => l_module_prefix,
                  p_module        => l_module
                 );
            END IF; 
 
            -- This means no usage level validation is required
            IF HZ_GNR_UTIL_PKG.get_usage_val_status(LL_MAP_DTLS_TBL,L_MDU_TBL) = FND_API.G_RET_STS_ERROR THEN
 
              HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
              -- This below call is to derive the address validation status and set the message 
              X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,'E',x_status);
              --hk_debugl('Calling create_gnr With Map_status "E"');
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status E.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
              HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                       L_USAGE_CODE,'E',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
              --hk_debugl('Status after create_gnr : '||l_status);
            ELSE 
 
              HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
              -- This below call is to derive the address validation status and set the message 
              X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,'S',x_status);
              --hk_debugl('Calling create_gnr With Map_status "S"');
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status S.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
              HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                       L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
              --hk_debugl('Status after create_gnr : '||l_status);
              x_status := FND_API.g_ret_sts_success;
            END IF;
 
            X_CALL_MAP := 'N';
            RETURN;
 
          ELSE 
            NULL; -- do_usage_val has concluded that usage level validation has to go through.
          END IF;
        END IF;
      END IF;
 
      l_get_addr_val := 'Y';
      X_CALL_MAP := 'N';
 
    END IF;
 
    IF L_MDU_TBL.COUNT = 1 THEN
 
      IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
        hz_utility_v2pub.debug 
             (p_message      => ' This means country is the only required mapped column for validation. Call create_gnr with map status S',
              p_prefix        => l_debug_prefix,
              p_msg_level     => fnd_log.level_statement,
              p_module_prefix => l_module_prefix,
              p_module        => l_module
             );
      END IF; 
 
      -- This means country is the only required mapped column for validation.
      -- and country is already populated in the L_MDU_TBL in the initialization section of this package.
      --hk_debugt(L_MDU_TBL); ----- Code to display the output.
      --hk_debugl('Calling create_gnr With Map_status "S"');
      -- This below call is to derive the address validation status and set the message 
      X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(L_MDU_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,'S',x_status);
 
      IF P_LOCATION_ID IS NOT NULL THEN
          HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                     L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,L_MDU_TBL,l_status);
      END IF;
 
      x_status := FND_API.g_ret_sts_success;
      RETURN;
    END IF;
    --hk_debugl('L_MDU_TBL has count count more than 1');
 
    l_value2 := NVL(L_MDU_TBL(2).LOC_COMPVAL,'X') ;
    IF l_value2 = 'X' THEN
      l_type2 := 'X';
    ELSE
      l_type2 := L_MDU_TBL(2).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type2;
    END IF;
 
    l_value3 := NVL(L_MDU_TBL(3).LOC_COMPVAL,'X') ;
    IF l_value3 = 'X' THEN
      l_type3 := 'X';
    ELSE
      l_type3 := L_MDU_TBL(3).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type3;
    END IF;
 
    l_value4 := NVL(L_MDU_TBL(4).LOC_COMPVAL,'X') ;
    IF l_value4 = 'X' THEN
      l_type4 := 'X';
    ELSE
      l_type4 := L_MDU_TBL(4).GEOGRAPHY_TYPE;
      -- store the geography_type of the lowest address component that has a value passed in
      l_geography_type := l_type4;
    END IF;
 
 
     LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
     l_sql := HZ_GNR_UTIL_PKG.getQuery(L_MAP_DTLS_TBL,L_MDU_TBL,x_status);
     --hk_debugl('The SQL query');
     --hk_debugl(l_sql);
 
     IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
       hz_utility_v2pub.debug 
            (p_message      => ' The SQL query : '||l_sql,
             p_prefix        => l_debug_prefix,
             p_msg_level     => fnd_log.level_statement,
             p_module_prefix => l_module_prefix,
             p_module        => l_module
            );
     END IF; 
 
     OPEN  c_getGeo FOR l_sql USING G_MAP_REC.COUNTRY_CODE,g_country_geo_id
           ,l_type2,l_value2,l_type3,l_value3,l_type4,l_value4,l_geography_type;
     FETCH c_getGeo INTO l_geography_id,l_multiple_parent_flag,LL_MAP_DTLS_TBL(1).GEOGRAPHY_ID
           ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
     IF c_getGeo%NOTFOUND THEN 
       --hk_debugl('No Match found for the usage level search');
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' No Match found for the usage level search ',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       HZ_GNR_UTIL_PKG.fix_no_match(LL_MAP_DTLS_TBL,x_status);
       x_status := FND_API.G_RET_STS_ERROR;
     ELSE 
       --Fetching once more to see where there are multiple records
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Fetching once more to see where there are multiple records ',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       FETCH c_getGeo INTO l_geography_id,l_multiple_parent_flag,LL_MAP_DTLS_TBL(1).GEOGRAPHY_ID
           ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
       IF c_getGeo%FOUND THEN -- not able to identify a unique record
 
         -- Get the query again with identifier type as NAME if multiple match found
         -- If it returns a record, we are able to derive a unique record for identifier type as NAME
         l_sql := HZ_GNR_UTIL_PKG.getQueryforMultiMatch(L_MAP_DTLS_TBL,L_MDU_TBL,x_status);
         OPEN  c_getGeo1 FOR l_sql USING G_MAP_REC.COUNTRY_CODE,g_country_geo_id
               ,l_type2,l_value2,l_type3,l_value3,l_type4,l_value4,l_geography_type;
 
         IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
           hz_utility_v2pub.debug 
                (p_message      => 'Before the fetch of the query with identifier type as NAME after multiple match found',
                 p_prefix        => l_debug_prefix,
                 p_msg_level     => fnd_log.level_statement,
                 p_module_prefix => l_module_prefix,
                 p_module        => l_module
                );
         END IF; 
 
     --hk_debugt(LL_MAP_DTLS_TBL);
         FETCH c_getGeo1 INTO l_geography_id,l_multiple_parent_flag,LL_MAP_DTLS_TBL(1).GEOGRAPHY_ID
               ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
         IF c_getGeo1%FOUND THEN  
           -- check if there is another row with same STANDARD_NAME, in that case it is error case 
           FETCH c_getGeo1 INTO l_geography_id,l_multiple_parent_flag,L_MAP_DTLS_TBL(1).GEOGRAPHY_ID 
                ,LL_MAP_DTLS_TBL(2).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(3).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(4).GEOGRAPHY_ID,LL_MAP_DTLS_TBL(5).GEOGRAPHY_ID;
           IF c_getGeo1%NOTFOUND THEN  -- success (only 1 rec with same primary name exists)
 
             IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                    (p_message       => 'GEO-Able to find a unique record or a record with multiple parent flag = Y with identifier type as NAME',
                     p_prefix        => l_debug_prefix,
                     p_msg_level     => fnd_log.level_statement,
                     p_module_prefix => l_module_prefix,
                     p_module        => l_module
                    );
             END IF; 
 
           ELSE -- Not able to find a unique record with identifier type as NAME 
 
               IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
	                 hz_utility_v2pub.debug 
	                      (p_message      => 'GEO-Not able to find a record with with identifier type as NAME. '|| 
	                                         ' More than 1 rec exists with same STANDARD NAME', 
	                       p_prefix        => l_debug_prefix, 
	                       p_msg_level     => fnd_log.level_statement, 
	                       p_module_prefix => l_module_prefix, 
	                       p_module        => l_module 
	                      ); 
	               END IF; 
 
               LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL; 
               HZ_GNR_UTIL_PKG.fix_no_match(LL_MAP_DTLS_TBL,x_status); 
               x_status := FND_API.G_RET_STS_ERROR; 
	          END IF; 
 
         ELSE -- Not able to found a unique record with identifier type as NAME
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' Not able to find a record with with identifier type as NAME. ',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           LL_MAP_DTLS_TBL       := L_MAP_DTLS_TBL;
           x_status := FND_API.G_RET_STS_ERROR;
         END IF; 
         CLOSE c_getGeo1;
 
       ELSE -- a unique record or a record with multiple parent flag = Y is found
 
         IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
           hz_utility_v2pub.debug 
                (p_message      => ' A unique record or a record with multiple parent flag = Y is found ',
                 p_prefix        => l_debug_prefix,
                 p_msg_level     => fnd_log.level_statement,
                 p_module_prefix => l_module_prefix,
                 p_module        => l_module
                );
         END IF; 
 
       END IF;
 
       IF l_multiple_parent_flag = 'Y'  AND x_status <> FND_API.G_RET_STS_ERROR THEN
         IF HZ_GNR_UTIL_PKG.fix_multiparent(l_geography_id,LL_MAP_DTLS_TBL) = TRUE THEN
           NULL;
         ELSE --  Multiple parent case not able to find a unique record 
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' Multiple parent case not able to find a unique record',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
           x_status := FND_API.G_RET_STS_ERROR;
         END IF;
 
       ELSE -- a unique record is found
 
           IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
             hz_utility_v2pub.debug 
                  (p_message      => ' A unique record is found ',
                   p_prefix        => l_debug_prefix,
                   p_msg_level     => fnd_log.level_statement,
                   p_module_prefix => l_module_prefix,
                   p_module        => l_module
                  );
           END IF; 
 
       END IF;
     END IF;
     CLOSE c_getGeo;
 
      --hk_debugl('Return STatus after first fetch : '||x_status);
     --Following call will try to derive missing lower level compoents  
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Return Status after first fetch : '||x_status,
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Calling fix_child. This call will try to derive missing lower level compoents.',
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
     IF HZ_GNR_UTIL_PKG.fix_child(LL_MAP_DTLS_TBL) = FALSE THEN
       x_status := HZ_GNR_UTIL_PKG.get_usage_val_status(LL_MAP_DTLS_TBL,L_MDU_TBL);
     END IF;
 
       IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
         hz_utility_v2pub.debug 
              (p_message      => ' Return status after fix_child '||x_status,
               p_prefix        => l_debug_prefix,
               p_msg_level     => fnd_log.level_statement,
               p_module_prefix => l_module_prefix,
               p_module        => l_module
              );
       END IF; 
 
      --hk_debugl('LL_MAP_DTLS_TBL before fill_values');
      --hk_debugt(LL_MAP_DTLS_TBL);
     HZ_GNR_UTIL_PKG.fill_values(LL_MAP_DTLS_TBL);
      --hk_debugl('LL_MAP_DTLS_TBL after fill_values');
      --hk_debugt(LL_MAP_DTLS_TBL);
 
    IF x_status = FND_API.g_ret_sts_success THEN
      -- We need to call the getAddrValStatus only once. All other cases we are looking into x_call_map 
      -- In some case the below code will execute with the x_call_map as N  
      IF l_get_addr_val = 'Y' THEN
         -- This below call is to derive the address validation status and set the message 
         X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,x_status,x_status);
      END IF;
 
      IF P_LOCATION_ID IS NOT NULL THEN
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status S.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
        HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                   L_USAGE_CODE,'S',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
      --hk_debugl('Prceossed GNR With Status : S and returned with Status : '||l_status);
      END IF;
    ELSE 
      -- We need to call the getAddrValStatus only once. All other cases we are looking into x_call_map 
      -- In some case the below code will execute with the x_call_map as N  
      IF l_get_addr_val = 'Y' THEN
         -- This below call is to derive the address validation status and set the message 
         X_ADDR_VAL_STATUS := HZ_GNR_UTIL_PKG.getAddrValStatus(LL_MAP_DTLS_TBL,L_MDU_TBL,P_CALLED_FROM,P_ADDR_VAL_LEVEL,x_addr_warn_msg,x_status,x_status);
      END IF;
 
      IF P_LOCATION_ID IS NOT NULL THEN
 
              IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
                hz_utility_v2pub.debug 
                     (p_message      => ' Calling create_gnr with map status E.',
                      p_prefix        => l_debug_prefix,
                      p_msg_level     => fnd_log.level_statement,
                      p_module_prefix => l_module_prefix,
                      p_module        => l_module
                     );
              END IF; 
 
        HZ_GNR_UTIL_PKG.create_gnr(P_LOCATION_ID,G_MAP_REC.LOC_TBL_NAME,
                                     L_USAGE_CODE,'E',L_LOC_COMPONENTS_REC,p_lock_flag,LL_MAP_DTLS_TBL,l_status);
        --hk_debugl('Prceossed GNR With Status : E and returned with Status : '||l_status);
      END IF;
    END IF;
 
    IF (fnd_log.level_statement >= fnd_log.g_current_runtime_level) THEN 
      hz_utility_v2pub.debug 
           (p_message      => 'End of validation for '||L_USAGE_CODE,
            p_prefix        => l_debug_prefix,
            p_msg_level     => fnd_log.level_procedure,
            p_module_prefix => l_module_prefix,
            p_module        => l_module
           );
    END IF; 
 
            --hk_debugt(LL_MAP_DTLS_TBL); ----- Code to display the output.
 
  END validateTax;
 
BEGIN 
  G_COUNTRY_GEO_ID                    := 1;
  G_MAP_REC.MAP_ID                    := 10000;
  G_MAP_REC.COUNTRY_CODE              := 'US';
  G_MAP_REC.LOC_TBL_NAME              := 'HZ_LOCATIONS';
  G_MAP_REC.ADDRESS_STYLE             := 'NULL';
 
  G_MAP_DTLS_TBL(1).LOC_SEQ_NUM       := 1;
  G_MAP_DTLS_TBL(1).LOC_COMPONENT     := 'COUNTRY';
  G_MAP_DTLS_TBL(1).GEOGRAPHY_TYPE    := 'COUNTRY';
  G_MAP_DTLS_TBL(1).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT1';
  G_MAP_DTLS_TBL(1).GEOGRAPHY_ID    := 1;
  G_MAP_DTLS_TBL(2).LOC_SEQ_NUM       := 2;
  G_MAP_DTLS_TBL(2).LOC_COMPONENT     := 'STATE';
  G_MAP_DTLS_TBL(2).GEOGRAPHY_TYPE    := 'STATE';
  G_MAP_DTLS_TBL(2).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT2';
  G_MAP_DTLS_TBL(3).LOC_SEQ_NUM       := 3;
  G_MAP_DTLS_TBL(3).LOC_COMPONENT     := 'COUNTY';
  G_MAP_DTLS_TBL(3).GEOGRAPHY_TYPE    := 'COUNTY';
  G_MAP_DTLS_TBL(3).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT3';
  G_MAP_DTLS_TBL(4).LOC_SEQ_NUM       := 4;
  G_MAP_DTLS_TBL(4).LOC_COMPONENT     := 'CITY';
  G_MAP_DTLS_TBL(4).GEOGRAPHY_TYPE    := 'CITY';
  G_MAP_DTLS_TBL(4).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT4';
  G_MAP_DTLS_TBL(5).LOC_SEQ_NUM       := 5;
  G_MAP_DTLS_TBL(5).LOC_COMPONENT     := 'POSTAL_CODE';
  G_MAP_DTLS_TBL(5).GEOGRAPHY_TYPE    := 'POSTAL_CODE';
  G_MAP_DTLS_TBL(5).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT5';
 
  G_USAGE_TBL(1).USAGE_ID             := 10000;
  G_USAGE_TBL(1).MAP_ID               := 10000;
  G_USAGE_TBL(1).USAGE_CODE           := 'GEOGRAPHY';
  G_USAGE_DTLS_TBL(1).USAGE_ID        := 10000;
  G_USAGE_DTLS_TBL(1).GEOGRAPHY_TYPE  := 'CITY';
  G_USAGE_DTLS_TBL(2).USAGE_ID        := 10000;
  G_USAGE_DTLS_TBL(2).GEOGRAPHY_TYPE  := 'COUNTRY';
  G_USAGE_DTLS_TBL(3).USAGE_ID        := 10000;
  G_USAGE_DTLS_TBL(3).GEOGRAPHY_TYPE  := 'COUNTY';
  G_USAGE_DTLS_TBL(4).USAGE_ID        := 10000;
  G_USAGE_DTLS_TBL(4).GEOGRAPHY_TYPE  := 'STATE';
  G_MDU_TBL10000(1).LOC_SEQ_NUM       := 1;
  G_MDU_TBL10000(1).LOC_COMPONENT     := 'COUNTRY';
  G_MDU_TBL10000(1).GEOGRAPHY_TYPE    := 'COUNTRY';
  G_MDU_TBL10000(1).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT1';
  G_MDU_TBL10000(1).GEOGRAPHY_ID      := 1;
  G_MDU_TBL10000(2).LOC_SEQ_NUM       := 2;
  G_MDU_TBL10000(2).LOC_COMPONENT     := 'STATE';
  G_MDU_TBL10000(2).GEOGRAPHY_TYPE    := 'STATE';
  G_MDU_TBL10000(2).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT2';
  G_MDU_TBL10000(3).LOC_SEQ_NUM       := 3;
  G_MDU_TBL10000(3).LOC_COMPONENT     := 'COUNTY';
  G_MDU_TBL10000(3).GEOGRAPHY_TYPE    := 'COUNTY';
  G_MDU_TBL10000(3).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT3';
  G_MDU_TBL10000(4).LOC_SEQ_NUM       := 4;
  G_MDU_TBL10000(4).LOC_COMPONENT     := 'CITY';
  G_MDU_TBL10000(4).GEOGRAPHY_TYPE    := 'CITY';
  G_MDU_TBL10000(4).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT4';
 
  G_USAGE_TBL(2).USAGE_ID             := 10006;
  G_USAGE_TBL(2).MAP_ID               := 10000;
  G_USAGE_TBL(2).USAGE_CODE           := 'TAX';
  G_USAGE_DTLS_TBL(5).USAGE_ID        := 10006;
  G_USAGE_DTLS_TBL(5).GEOGRAPHY_TYPE  := 'CITY';
  G_USAGE_DTLS_TBL(6).USAGE_ID        := 10006;
  G_USAGE_DTLS_TBL(6).GEOGRAPHY_TYPE  := 'COUNTRY';
  G_USAGE_DTLS_TBL(7).USAGE_ID        := 10006;
  G_USAGE_DTLS_TBL(7).GEOGRAPHY_TYPE  := 'COUNTY';
  G_USAGE_DTLS_TBL(8).USAGE_ID        := 10006;
  G_USAGE_DTLS_TBL(8).GEOGRAPHY_TYPE  := 'STATE';
  G_MDU_TBL10006(1).LOC_SEQ_NUM       := 1;
  G_MDU_TBL10006(1).LOC_COMPONENT     := 'COUNTRY';
  G_MDU_TBL10006(1).GEOGRAPHY_TYPE    := 'COUNTRY';
  G_MDU_TBL10006(1).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT1';
  G_MDU_TBL10006(1).GEOGRAPHY_ID      := 1;
  G_MDU_TBL10006(2).LOC_SEQ_NUM       := 2;
  G_MDU_TBL10006(2).LOC_COMPONENT     := 'STATE';
  G_MDU_TBL10006(2).GEOGRAPHY_TYPE    := 'STATE';
  G_MDU_TBL10006(2).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT2';
  G_MDU_TBL10006(3).LOC_SEQ_NUM       := 3;
  G_MDU_TBL10006(3).LOC_COMPONENT     := 'COUNTY';
  G_MDU_TBL10006(3).GEOGRAPHY_TYPE    := 'COUNTY';
  G_MDU_TBL10006(3).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT3';
  G_MDU_TBL10006(4).LOC_SEQ_NUM       := 4;
  G_MDU_TBL10006(4).LOC_COMPONENT     := 'CITY';
  G_MDU_TBL10006(4).GEOGRAPHY_TYPE    := 'CITY';
  G_MDU_TBL10006(4).GEO_ELEMENT_COL   := 'GEOGRAPHY_ELEMENT4';
 
END HZ_GNR_MAP10000;

/
