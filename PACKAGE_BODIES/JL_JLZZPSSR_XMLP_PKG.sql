--------------------------------------------------------
--  DDL for Package Body JL_JLZZPSSR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLZZPSSR_XMLP_PKG" AS
/* $Header: JLZZPSSRB.pls 120.1 2007/12/25 16:54:32 dwkrishn noship $ */
FUNCTION  CUSTOM_INIT   RETURN BOOLEAN IS

 INIT EXCEPTION;

BEGIN

  IF (ACCEPT_PARAMETERS=FALSE) THEN
    RAISE INIT;
  END IF;

  GET_AWT_TIME;

  -- GET THE FORMAT MASK FOR DATES
 -- SRW.USER_EXIT('FND DATE4FORMAT
         --      RESULT=":CP_DATE4_FORMAT"');

  RETURN (TRUE);

EXCEPTION  WHEN   OTHERS  THEN
    RETURN (FALSE);

END;

  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_VOID AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_NA AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      LY.MEANING,
      LN.MEANING,
      L1.DISPLAYED_FIELD,
      L2.DISPLAYED_FIELD,
      L3.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_VOID,NLS_NA
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES L1,
      AP_LOOKUP_CODES L2,
      AP_LOOKUP_CODES L3
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND L1.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L1.LOOKUP_CODE = 'ALL'
      AND L2.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND L2.LOOKUP_CODE = 'VOID'
      AND L3.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L3.LOOKUP_CODE = 'NA';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_VOID := NLS_VOID;
    C_NLS_NA := NLS_NA;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    --C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    --C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      l_concurrent_program_name varchar2(1000);
    BEGIN
      C_REPORT_START_DATE := SYSDATE;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      CP_START_DATE := TO_CHAR(P_START_DATE,'DD-MON-YYYY');
      CP_END_DATE := TO_CHAR(P_END_DATE,'DD-MON-YYYY');

      SELECT CONCURRENT_PROGRAM_NAME
      INTO L_CONCURRENT_PROGRAM_NAME
      FROM FND_CONCURRENT_PROGRAMS_VL
      WHERE CONCURRENT_PROGRAM_ID = FND_GLOBAL.CONC_PROGRAM_ID;

      IF (L_CONCURRENT_PROGRAM_NAME = 'JLARPSSR_XML') THEN
         P_COUNTRY_CODE := 'AR';
      END IF;
      IF (L_CONCURRENT_PROGRAM_NAME = 'JLCLPSSR_XML') THEN
         P_COUNTRY_CODE := 'CL';
      END IF;


      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('2'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (CUSTOM_INIT <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('7'
                   ,'After Custom_Init')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);

  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_LEGAL_ENTITY_ID NUMBER;
  BEGIN
    IF P_REPORTING_LEVEL = '1000' THEN
      L_LEGAL_ENTITY_ID := P_LEGAL_ENTITY_ID;
    ELSIF P_REPORTING_LEVEL = '2000' THEN
      L_LEGAL_ENTITY_ID := P_REPORTING_CONTEXT;
    ELSE
      L_LEGAL_ENTITY_ID := XLE_UTILITIES_GRP.GET_DEFAULTLEGALCONTEXT_OU(P_REPORTING_CONTEXT);
    END IF;
    SELECT
      XLE.NAME
    INTO C_COMPANY_NAME_HEADER
    FROM
      XLE_FIRSTPARTY_INFORMATION_V XLE
    WHERE XLE.LEGAL_ENTITY_ID = L_LEGAL_ENTITY_ID;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION CF_REF_TRANS_DATEFORMULA(TRANS_TYPE IN VARCHAR2
                                   ,TRANS_ID IN NUMBER) RETURN DATE IS
    V_INVOICE_ID AP_INVOICES.INVOICE_ID%TYPE;
    V_INVOICE_DATE AP_INVOICES.INVOICE_NUM%TYPE;
    V_INVOICE_NUM AP_INVOICES.INVOICE_NUM%TYPE;
    V_CHECK_ID AP_CHECKS.CHECK_ID%TYPE;
    V_CHECK_DATE AP_CHECKS.CHECK_DATE%TYPE;
    V_CHECK_NUMBER AP_CHECKS.CHECK_NUMBER%TYPE;
    V_TRANS_TYPE VARCHAR2(25);
    CURSOR C_INV_REL_AWT IS
      SELECT
        INVOICE_DATE,
        INVOICE_NUM
      FROM
        AP_INVOICES_ALL
      WHERE INVOICE_ID = V_INVOICE_ID;
    CURSOR C_PMT_REL_AWT IS
      SELECT
        CHECK_DATE,
        CHECK_NUMBER
      FROM
        AP_CHECKS_ALL
      WHERE CHECK_ID = V_CHECK_ID;
  BEGIN
    IF TRANS_TYPE = 'AWT' THEN
      IF CP_CREATE_AWT_DISTS_TYPE = 'PAYMENT' THEN
        V_CHECK_ID := TRANS_ID;
        OPEN C_PMT_REL_AWT;
        FETCH C_PMT_REL_AWT
         INTO V_CHECK_DATE,V_CHECK_NUMBER;
        CLOSE C_PMT_REL_AWT;
        CP_REF_TRANS_NUM := V_CHECK_NUMBER;
        BEGIN
          SELECT
            L.MEANING
          INTO V_TRANS_TYPE
          FROM
            FND_LOOKUPS L
          WHERE L.LOOKUP_CODE = 'PMT'
            AND L.LOOKUP_TYPE = 'JLZZ_SUPPLIER_TRX_TYPE'
            AND NVL(L.START_DATE_ACTIVE
             ,SYSDATE) <= sysdate
            AND NVL(L.END_DATE_ACTIVE
             ,SYSDATE) >= sysdate
            AND L.ENABLED_FLAG = 'Y';
        EXCEPTION
          WHEN OTHERS THEN
            CP_REF_TRANS_TYPE := NULL;
        END;
        CP_REF_TRANS_TYPE := V_TRANS_TYPE;
        RETURN (V_CHECK_DATE);
      ELSIF CP_CREATE_AWT_DISTS_TYPE = 'APPROVAL' THEN
        V_INVOICE_ID := TRANS_ID;
        OPEN C_INV_REL_AWT;
        FETCH C_INV_REL_AWT
         INTO V_INVOICE_DATE,V_INVOICE_NUM;
        CLOSE C_INV_REL_AWT;
        CP_REF_TRANS_NUM := V_INVOICE_NUM;
        BEGIN
          SELECT
            L.MEANING
          INTO V_TRANS_TYPE
          FROM
            FND_LOOKUPS L
          WHERE L.LOOKUP_CODE = 'INV'
            AND L.LOOKUP_TYPE = 'JLZZ_SUPPLIER_TRX_TYPE'
            AND NVL(L.START_DATE_ACTIVE
             ,SYSDATE) <= sysdate
            AND NVL(L.END_DATE_ACTIVE
             ,SYSDATE) >= sysdate
            AND L.ENABLED_FLAG = 'Y';
        EXCEPTION
          WHEN OTHERS THEN
            CP_REF_TRANS_TYPE := NULL;
        END;
        CP_REF_TRANS_TYPE := V_TRANS_TYPE;
        RETURN (V_INVOICE_DATE);
      ELSE
        CP_REF_TRANS_NUM := NULL;
        CP_REF_TRANS_TYPE := NULL;
        RETURN (NULL);
      END IF;
    ELSE
      CP_REF_TRANS_NUM := NULL;
      CP_REF_TRANS_TYPE := NULL;
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END CF_REF_TRANS_DATEFORMULA;

  FUNCTION CF_AMOUNT_CURRENCYFORMULA(TRANS_AMT IN NUMBER
                                    ,TRANS_BASE_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF P_REPORT_CURRENCY = 'ORIGINAL' THEN
      RETURN (TRANS_AMT);
    ELSE
      RETURN (ROUND(TRANS_BASE_AMT
                  ,C_BASE_PRECISION));
    END IF;
    RETURN NULL;
  END CF_AMOUNT_CURRENCYFORMULA;

  FUNCTION CF_AMOUNT_DUE_CURRENCYFORMULA(TRANS_TYPE IN VARCHAR2
                                        ,TRANS_ID IN NUMBER
                                        ,TRANS_AMT IN NUMBER
                                        ,TRANS_BASE_AMT IN NUMBER
                                        ,SECTION IN VARCHAR2
                                        ,CF_TRX_PRECISION IN NUMBER) RETURN NUMBER IS
    V_REMAINING_AMOUNT NUMBER;
    V_AMOUNT_PAID NUMBER;
    V_BASE_AMOUNT_PAID NUMBER;
    V_PMT_AMOUNT NUMBER;
    V_PMT_BASE_AMOUNT NUMBER;
    V_INVOICE_ID AP_INVOICES.INVOICE_ID%TYPE;
    V_RATE NUMBER;
    V_AMOUNT NUMBER;
    V_PAYMENT_STATUS_FLAG VARCHAR2(1);
    V_DISC_AMT NUMBER;
    V_EXCH_RATE NUMBER;
    CURSOR C_PRPMT IS
      SELECT
        SUM(NVL(AID.PREPAY_AMOUNT_REMAINING
               ,AID.AMOUNT)) * - 1
      FROM
        AP_INVOICE_DISTRIBUTIONS_ALL AID
      WHERE AID.INVOICE_ID = V_INVOICE_ID
        AND AID.LINE_TYPE_LOOKUP_CODE = 'ITEM'
        AND AID.POSTED_FLAG = 'Y';
    CURSOR C_INVOICE IS
      SELECT
        NVL(SUM(AID.AMOUNT)
           ,0) * - 1,
        NVL(SUM(NVL(AID.BASE_AMOUNT
                   ,AID.AMOUNT))
           ,0) * - 1
      FROM
        AP_INVOICE_DISTRIBUTIONS_ALL AID
      WHERE AID.INVOICE_ID = V_INVOICE_ID
        AND ( AID.LINE_TYPE_LOOKUP_CODE = 'AWT'
      OR AID.LINE_TYPE_LOOKUP_CODE = 'PREPAY' )
        AND AID.POSTED_FLAG = 'Y';
    CURSOR C_PMT IS
      SELECT
        NVL(SUM(IP.AMOUNT)
           ,0),
        NVL(SUM(NVL(IP.INVOICE_BASE_AMOUNT
                   ,IP.AMOUNT))
           ,0)
      FROM
        AP_INVOICE_PAYMENTS_ALL IP
      WHERE IP.INVOICE_ID = V_INVOICE_ID
        AND IP.POSTED_FLAG = 'Y';
    CURSOR C_DISC_AMT IS
      SELECT
        NVL(DISCOUNT_AMOUNT_TAKEN
           ,0),
        NVL(EXCHANGE_RATE
           ,1)
      FROM
        AP_INVOICES_ALL AI
      WHERE AI.INVOICE_ID = V_INVOICE_ID;
  BEGIN
    IF TRANS_TYPE = 'INV' THEN
      V_INVOICE_ID := TRANS_ID;
      OPEN C_INVOICE;
      FETCH C_INVOICE
       INTO V_AMOUNT_PAID,V_BASE_AMOUNT_PAID;
      IF C_INVOICE%NOTFOUND THEN
        V_AMOUNT_PAID := 0;
        V_BASE_AMOUNT_PAID := 0;
      END IF;
      CLOSE C_INVOICE;
      OPEN C_PMT;
      FETCH C_PMT
       INTO V_PMT_AMOUNT,V_PMT_BASE_AMOUNT;
      IF C_PMT%NOTFOUND THEN
        V_PMT_AMOUNT := 0;
        V_PMT_BASE_AMOUNT := 0;
      END IF;
      CLOSE C_PMT;
      OPEN C_DISC_AMT;
      FETCH C_DISC_AMT
       INTO V_DISC_AMT,V_EXCH_RATE;
      CLOSE C_DISC_AMT;
      IF P_REPORT_CURRENCY = 'ORIGINAL' THEN
        RETURN (TRANS_AMT - (V_AMOUNT_PAID + V_PMT_AMOUNT) - V_DISC_AMT);
      ELSE
        V_AMOUNT := TRANS_BASE_AMT - (V_BASE_AMOUNT_PAID + V_PMT_BASE_AMOUNT) - (V_DISC_AMT * V_EXCH_RATE);
        RETURN (V_AMOUNT);
      END IF;
    ELSIF TRANS_TYPE = 'PRPMT' THEN
      IF SECTION = 'APPLIED' THEN
        RETURN (NULL);
      ELSE
        V_INVOICE_ID := TRANS_ID;
        OPEN C_PRPMT;
        FETCH C_PRPMT
         INTO V_REMAINING_AMOUNT;
        IF C_PRPMT%NOTFOUND THEN
          V_REMAINING_AMOUNT := 0;
        END IF;
        CLOSE C_PRPMT;
        IF P_REPORT_CURRENCY = 'ORIGINAL' THEN
          RETURN (V_REMAINING_AMOUNT);
        ELSE
          V_RATE := NVL(TRANS_BASE_AMT
                       ,0) / NVL(TRANS_AMT
                       ,999999);
          V_AMOUNT := ROUND(V_REMAINING_AMOUNT * V_RATE
                           ,CF_TRX_PRECISION);
          RETURN (V_AMOUNT);
        END IF;
      END IF;
    ELSE
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END CF_AMOUNT_DUE_CURRENCYFORMULA;

  PROCEDURE GET_AWT_TIME IS
  BEGIN
    IF P_COUNTRY_CODE = 'AR' THEN
      CP_CREATE_AWT_DISTS_TYPE := 'PAYMENT';
    ELSIF P_COUNTRY_CODE = 'CL' THEN
      CP_CREATE_AWT_DISTS_TYPE := 'APPROVAL';
    ELSE
      CP_CREATE_AWT_DISTS_TYPE := NULL;
    END IF;
  END GET_AWT_TIME;

  FUNCTION CF_SUPP_BBFORMULA(VENDOR_ID IN NUMBER
                            ,GROUP_CURRENCY IN VARCHAR2
                            ,CF_GROUP_PRECISION IN NUMBER) RETURN NUMBER IS
    L_BALANCE NUMBER;
    L_SOB NUMBER;
    L_PARTY_ID AP_SUPPLIERS.PARTY_ID%TYPE;
  BEGIN
    BEGIN
      SELECT
        PARTY_ID
      INTO L_PARTY_ID
      FROM
        AP_SUPPLIERS
      WHERE VENDOR_ID = CF_SUPP_BBFORMULA.VENDOR_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_PARTY_ID := NULL;
    END;
    IF P_REPORT_CURRENCY = 'ORIGINAL' THEN
      SELECT
        NVL(SUM(AEL.ENTERED_CR)
           ,0) - NVL(SUM(AEL.ENTERED_DR)
           ,0)
      INTO L_BALANCE
      FROM
        XLA_AE_LINES AEL,
        XLA_AE_HEADERS AEH,
        XLA_ACCT_CLASS_ASSGNS ACS,
        XLA_ASSIGNMENT_DEFNS_B ASD
      WHERE AEH.LEDGER_ID = L_SOB
        AND AEL.AE_HEADER_ID = AEH.AE_HEADER_ID
        AND AEH.ACCOUNTING_DATE < P_START_DATE
        AND AEL.PARTY_ID = L_PARTY_ID
        AND AEL.CURRENCY_CODE = GROUP_CURRENCY
        AND AEL.ACCOUNTING_CLASS_CODE = ACS.ACCOUNTING_CLASS_CODE
        AND ACS.PROGRAM_CODE = 'JL_POST_LIAB_REGISTER'
        AND ACS.PROGRAM_CODE = ASD.PROGRAM_CODE
        AND ASD.ASSIGNMENT_CODE = ACS.ASSIGNMENT_CODE
        AND ASD.ENABLED_FLAG = 'Y';
    ELSE
      SELECT
        NVL(SUM(AEL.ACCOUNTED_CR)
           ,0) - NVL(SUM(AEL.ACCOUNTED_DR)
           ,0)
      INTO L_BALANCE
      FROM
        XLA_AE_LINES AEL,
        XLA_AE_HEADERS AEH,
        XLA_ACCT_CLASS_ASSGNS ACS,
        XLA_ASSIGNMENT_DEFNS_B ASD
      WHERE AEH.LEDGER_ID = L_SOB
        AND AEL.AE_HEADER_ID = AEH.AE_HEADER_ID
        --AND AEL.LEDGER_ID = P_SOB_ID
        AND AEL.LEDGER_ID = CP_SOB_ID
        AND AEH.ACCOUNTING_DATE < P_START_DATE
        AND AEL.PARTY_ID = L_PARTY_ID
        AND AEL.CURRENCY_CODE = GROUP_CURRENCY
        AND AEL.ACCOUNTING_CLASS_CODE = ACS.ACCOUNTING_CLASS_CODE
        AND ACS.PROGRAM_CODE = 'JL_POST_LIAB_REGISTER'
        AND ACS.PROGRAM_CODE = ASD.PROGRAM_CODE
        AND ASD.ASSIGNMENT_CODE = ACS.ASSIGNMENT_CODE
        AND ASD.ENABLED_FLAG = 'Y';
    END IF;
    RETURN (ROUND(L_BALANCE
                ,CF_GROUP_PRECISION));
  END CF_SUPP_BBFORMULA;

  FUNCTION CF_GROUP_PRECISIONFORMULA(GROUP_CURRENCY IN VARCHAR2) RETURN NUMBER IS
    PREC FND_CURRENCIES.PRECISION%TYPE;
  BEGIN
    IF GROUP_CURRENCY = C_BASE_CURRENCY_CODE THEN
      RETURN (C_BASE_PRECISION);
    ELSE
      PREC := 0;
      SELECT
        C.PRECISION
      INTO PREC
      FROM
        FND_CURRENCIES C
      WHERE C.CURRENCY_CODE = GROUP_CURRENCY;
      RETURN (PREC);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(999
                 ,'Report did not find a definition for the currency ' || GROUP_CURRENCY)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CF_GROUP_PRECISIONFORMULA;

  FUNCTION CF_REMAIN_BALANCEFORMULA(CF_SUPP_BB IN NUMBER
                                   ,CS_AMOUNT_APPLIED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_SUPP_BB + CS_AMOUNT_APPLIED);
  END CF_REMAIN_BALANCEFORMULA;

  FUNCTION CF_TRX_PRECISIONFORMULA(TRANS_CURRENCY IN VARCHAR2) RETURN NUMBER IS
    PREC FND_CURRENCIES.PRECISION%TYPE;
  BEGIN
    IF TRANS_CURRENCY = C_BASE_CURRENCY_CODE THEN
      RETURN (C_BASE_PRECISION);
    ELSE
      PREC := 0;
      SELECT
        C.PRECISION
      INTO PREC
      FROM
        FND_CURRENCIES C
      WHERE C.CURRENCY_CODE = TRANS_CURRENCY;
      RETURN (PREC);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(999
                 ,'Report did not find a definition for the currency ' || TRANS_CURRENCY)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CF_TRX_PRECISIONFORMULA;

  FUNCTION CF_ENDING_BALANCEFORMULA(CF_SUPP_BB IN NUMBER
                                   ,CS_ACCUM_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_SUPP_BB + CS_ACCUM_BALANCE);
  END CF_ENDING_BALANCEFORMULA;

  FUNCTION ACCEPT_PARAMETERS RETURN BOOLEAN IS
  BEGIN
    IF (P_SUPPLIER_NAME_FROM IS NOT NULL AND P_SUPPLIER_NAME_TO IS NULL) OR (P_SUPPLIER_NAME_FROM IS NULL AND P_SUPPLIER_NAME_TO IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('JL'
                          ,'JL_ZZ_AP_SRS_SUPPL_NAME_RANGE');
      CP_MESSAGE := FND_MESSAGE.GET;
      /*SRW.MESSAGE('999'
                 ,CP_MESSAGE)*/NULL;
      RETURN (FALSE);
    END IF;
    IF P_SUPPLIER_NAME_FROM IS NOT NULL THEN
      IF P_SUPPLIER_TAX_ID IS NOT NULL THEN
        FND_MESSAGE.SET_NAME('JL'
                            ,'JL_ZZ_AP_SRS_INV_SUPPL_PARAM');
        CP_MESSAGE := FND_MESSAGE.GET;
        /*SRW.MESSAGE('999'
                   ,CP_MESSAGE)*/NULL;
        RETURN (FALSE);
      END IF;
    END IF;
    IF P_SUPPLIER_NAME_FROM IS NOT NULL THEN
      LP_SUPPLIER := ' WHERE pov.vendor_name BETWEEN ''' || P_SUPPLIER_NAME_FROM || ''' AND ''' || P_SUPPLIER_NAME_TO || '''';
      LP_SUPPLIER := LP_SUPPLIER || ' AND pov.vendor_id = pvs.vendor_id ';
    ELSIF P_SUPPLIER_TAX_ID IS NOT NULL THEN
      LP_SUPPLIER := ' WHERE pov.num_1099 = ''' || P_SUPPLIER_TAX_ID || '''';
      LP_SUPPLIER := LP_SUPPLIER || ' AND pov.vendor_id = pvs.vendor_id ';
    ELSE
      LP_SUPPLIER := ' WHERE  pov.vendor_id = pvs.vendor_id';
    END IF;
    RETURN (TRUE);
  END ACCEPT_PARAMETERS;

  FUNCTION CF_AMOUNT_TO_APPLYFORMULA(SECTION IN VARCHAR2
                                    ,CF_AMOUNT_CURRENCY IN NUMBER
                                    ,CF_AMOUNT_DUE_CURRENCY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF SECTION = 'APPLIED' THEN
      RETURN (CF_AMOUNT_CURRENCY);
    ELSE
      RETURN (CF_AMOUNT_DUE_CURRENCY);
    END IF;
  END CF_AMOUNT_TO_APPLYFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
  	CP_SOB_ID:=P_SOB_ID;
    IF P_COUNTRY_CODE = 'CL' AND P_CA_SET_OF_BOOKS_ID IS NOT NULL THEN
      CP_SOB_ID := P_CA_SET_OF_BOOKS_ID;
    END IF;
    IF P_REPORTING_LEVEL = '2000' THEN
      LP_AP_CHECKS_WH := 'AND ac.legal_entity_id = ' || P_REPORTING_CONTEXT;
      LP_AP_INVOICES_WH := 'AND ai.legal_entity_id = ' || P_REPORTING_CONTEXT;
    ELSE
      /*SRW.MESSAGE('124'
                 ,' Not 2000')*/NULL;
      FND_MO_REPORTING_API.INITIALIZE(P_REPORTING_LEVEL
                                     ,P_REPORTING_CONTEXT
                                     ,'AUTO');
      LP_AP_INVOICE_DISTRIBUTIONS_WH := FND_MO_REPORTING_API.GET_PREDICATE('DIS'
                                                                          ,NULL
                                                                          ,P_REPORTING_CONTEXT);
      LP_AP_CHECKS_WH := FND_MO_REPORTING_API.GET_PREDICATE('AC'
                                                           ,NULL
                                                           ,P_REPORTING_CONTEXT);
      LP_AP_INVOICES_WH := FND_MO_REPORTING_API.GET_PREDICATE('AI'
                                                             ,NULL
                                                             ,P_REPORTING_CONTEXT);
      LP_AP_INVOICE_PAYMENTS_WH := FND_MO_REPORTING_API.GET_PREDICATE('AIP'
                                                                     ,NULL
                                                                     ,P_REPORTING_CONTEXT);
    END IF;
    /*SRW.MESSAGE('125'
               ,'pass param')*/NULL;
    LP_AP_INVOICES := 'AP_INVOICES_ALL';
    LP_AP_INVOICE_DISTRIBUTIONS := 'AP_INVOICE_DISTRIBUTIONS_ALL';
    LP_AP_INVOICE_PAYMENTS := 'AP_INVOICE_PAYMENTS_ALL';
    /*SRW.MESSAGE('126'
               ,'pass param 2')*/NULL;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CP_REF_TRANS_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REF_TRANS_NUM;
  END CP_REF_TRANS_NUM_P;

  FUNCTION CP_REF_TRANS_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REF_TRANS_TYPE;
  END CP_REF_TRANS_TYPE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_VOID;
  END C_NLS_VOID_P;

  FUNCTION C_NLS_NA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NA;
  END C_NLS_NA_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION APPLICATIONS_TEMPLATE_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN APPLICATIONS_TEMPLATE_REPORT;
  END APPLICATIONS_TEMPLATE_REPORT_P;

  FUNCTION CP_CREATE_AWT_DISTS_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CREATE_AWT_DISTS_TYPE;
  END CP_CREATE_AWT_DISTS_TYPE_P;

  FUNCTION LP_SUPPLIER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_SUPPLIER;
  END LP_SUPPLIER_P;

  FUNCTION CP_DATE4_FORMAT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DATE4_FORMAT;
  END CP_DATE4_FORMAT_P;

  FUNCTION CP_MESSAGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_MESSAGE;
  END CP_MESSAGE_P;

END JL_JLZZPSSR_XMLP_PKG;




/
