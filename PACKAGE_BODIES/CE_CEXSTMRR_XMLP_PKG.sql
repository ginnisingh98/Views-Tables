--------------------------------------------------------
--  DDL for Package Body CE_CEXSTMRR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CE_CEXSTMRR_XMLP_PKG" AS
/* $Header: CEXSTMRRB.pls 120.0 2007/12/28 07:56:57 abraghun noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      P_STAT_DATE_FROM_T := to_char(P_STAT_DATE_FROM,FND_GLOBAL.NLS_DATE_FORMAT);
      P_STAT_DATE_TO_T := to_char(P_STAT_DATE_TO,FND_GLOBAL.NLS_DATE_FORMAT);
      INIT_SECURITY;
      IF (P_TEST_LAYOUT = 'Y') THEN
        RAISE NO_DATA_FOUND;
      END IF;
      BEGIN
        SELECT
          L.MEANING,
          L2.MEANING
        INTO
          C_ALL_TRANSLATION
          ,C_EXTERNAL_TRANSLATION
        FROM
          CE_LOOKUPS L,
          CE_LOOKUPS L2
        WHERE L.LOOKUP_TYPE = 'LITERAL'
          AND L.LOOKUP_CODE = 'ALL'
          AND L2.LOOKUP_TYPE = 'STATEMENT_LINE_STATUS'
          AND L2.LOOKUP_CODE = 'EXTERNAL';
      EXCEPTION
        WHEN OTHERS THEN
          SET_NAME('CE'
                  ,'CE_PURGE_NO_SOB');
          L_MESSAGE := GET;
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
      END;
      IF (P_BANK_ACCOUNT_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            ABB.BANK_NAME,
            ABB.BANK_BRANCH_NAME,
            ABA.BANK_ACCOUNT_NAME,
            ABA.BANK_ACCOUNT_NUM,
            ABA.CURRENCY_CODE
          INTO
            C_BANK_NAME_DSP
            ,C_BANK_BRANCH_DSP
            ,C_ACCOUNT_NAME_DSP
            ,C_ACCOUNT_NUMBER_DSP
            ,C_BANK_CURR_DSP
          FROM
            CE_BANK_BRANCHES_V ABB,
            CE_BANK_ACCTS_GT_V ABA
          WHERE ABA.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID
            AND ABB.BRANCH_PARTY_ID = ABA.BANK_BRANCH_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SET_NAME('CE'
                    ,'CE_INVALID_BANK');
            L_MESSAGE := GET;
            RAISE_APPLICATION_ERROR(-20101
                                   ,NULL);
        END;
      ELSE
        C_BANK_NAME_DSP := C_ALL_TRANSLATION;
        C_BANK_BRANCH_DSP := C_ALL_TRANSLATION;
        C_ACCOUNT_NAME_DSP := C_ALL_TRANSLATION;
        C_ACCOUNT_NUMBER_DSP := C_ALL_TRANSLATION;
        C_BANK_CURR_DSP := C_ALL_TRANSLATION;
      END IF;
      IF (P_STAT_DATE_FROM IS NOT NULL AND P_STAT_DATE_TO IS NOT NULL) THEN
        C_STAT_DATE_SQL_LEX := 'trunc(sh.statement_date) BETWEEN to_date(''' || TO_CHAR(P_STAT_DATE_FROM
                                      ,'DD-MON-YYYY') || ''',''DD-MON-YYYY'') AND to_date(''' || TO_CHAR(P_STAT_DATE_TO
                                      ,'DD-MON-YYYY') || ''',''DD-MON-YYYY'')';
      ELSIF (P_STAT_DATE_FROM IS NULL AND P_STAT_DATE_TO IS NOT NULL) THEN
        C_STAT_DATE_SQL_LEX := 'sh.statement_date <= to_date(''' || TO_CHAR(P_STAT_DATE_TO
                                      ,'DD-MON-YYYY') || ''',''DD-MON-YYYY'')';
      ELSIF (P_STAT_DATE_FROM IS NOT NULL AND P_STAT_DATE_TO IS NULL) THEN
        C_STAT_DATE_SQL_LEX := 'sh.statement_date >= to_date(''' || TO_CHAR(P_STAT_DATE_FROM
                                      ,'DD-MON-YYYY') || ''',''DD-MON-YYYY'')';
      END IF;
      IF (P_STAT_NUMBER_FROM IS NOT NULL AND P_STAT_NUMBER_TO IS NOT NULL) THEN
        C_STAT_NUMBER_SQL_LEX := 'sh.statement_number BETWEEN ''' || P_STAT_NUMBER_FROM || ''' AND ''' || P_STAT_NUMBER_TO || '''';
      ELSIF (P_STAT_NUMBER_FROM IS NULL AND P_STAT_NUMBER_TO IS NOT NULL) THEN
        C_STAT_NUMBER_SQL_LEX := 'sh.statement_number <= ''' || P_STAT_NUMBER_TO || '''';
      ELSIF (P_STAT_NUMBER_FROM IS NOT NULL AND P_STAT_NUMBER_TO IS NULL) THEN
        C_STAT_NUMBER_SQL_LEX := 'sh.statement_number >= ''' || P_STAT_NUMBER_FROM || '''';
      END IF;
      BEGIN
        SET_NAME('FND'
                ,'FND_MO_RPT_PARTIAL_LEDGER');
        L_MESSAGE := GET;
        C_DISPLAY_MESSAGE := L_MESSAGE;
      END;
      IF (P_DEBUG_MODE = 'Y') THEN
        NULL;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_STAT_SUM_LINE_AMOUNTFORMULA(C_STAT_HEADER_ID1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      AMOUNT CE_STATEMENT_LINES.AMOUNT%TYPE;
    BEGIN
      SELECT
        SUM(SL.AMOUNT)
      INTO
        AMOUNT
      FROM
        CE_STATEMENT_LINES SL
      WHERE SL.STATEMENT_HEADER_ID = C_STAT_HEADER_ID1
        AND exists (
        SELECT
          DISTINCT
          ART.STATEMENT_LINE_ID
        FROM
          CE_RECONCILED_TRANSACTIONS_V ART
        WHERE ART.STATEMENT_LINE_ID = SL.STATEMENT_LINE_ID );
      RETURN (NVL(AMOUNT
                ,0));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_STAT_SUM_LINE_AMOUNTFORMULA;

  FUNCTION C_STAT_CR_ERRORSFORMULA(C_STAT_HEADER_ID1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      AMOUNT CE_STATEMENT_LINES.AMOUNT%TYPE;
    BEGIN
      SELECT
        SUM(SL.AMOUNT)
      INTO
        AMOUNT
      FROM
        CE_STATEMENT_LINES SL
      WHERE SL.STATEMENT_HEADER_ID = C_STAT_HEADER_ID1
        AND SL.STATUS = 'ERROR'
        AND ( SL.TRX_TYPE = 'CREDIT'
      OR SL.TRX_TYPE = 'MISC_CREDIT'
      OR SL.TRX_TYPE = 'SWEEP_IN' );
      RETURN (NVL(AMOUNT
                ,0));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_STAT_CR_ERRORSFORMULA;

  FUNCTION C_STAT_DR_ERRORSFORMULA(C_STAT_HEADER_ID1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      AMOUNT CE_STATEMENT_LINES.AMOUNT%TYPE;
    BEGIN
      SELECT
        SUM(SL.AMOUNT)
      INTO
        AMOUNT
      FROM
        CE_STATEMENT_LINES SL
      WHERE SL.STATEMENT_HEADER_ID = C_STAT_HEADER_ID1
        AND SL.STATUS = 'ERROR'
        AND SL.TRX_TYPE in ( 'DEBIT' , 'MISC_DEBIT' , 'NSF' , 'REJECTED' , 'SWEEP_OUT' );
      RETURN (NVL(AMOUNT
                ,0));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_STAT_DR_ERRORSFORMULA;

  FUNCTION G_BANK_ACCOUNTGROUPFILTER(C_BANK_ACCOUNT_NAME IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF (C_BANK_ACCOUNT_NAME IS NULL) THEN
      C_THE_END := 'N';
    ELSE
      C_THE_END := 'Y';
    END IF;
    RETURN (TRUE);
  END G_BANK_ACCOUNTGROUPFILTER;

  FUNCTION C_TX_AMOUNT_FORFORMULA(C_TX_TYPE IN VARCHAR2
                                 ,C_SL_TYPE IN VARCHAR2
                                 ,C_TX_BA_AMOUNT IN NUMBER
                                 ,C_TX_DR_CR IN VARCHAR2
                                 ,C_TX_AMOUNT_CLEARED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_TX_TYPE = 'PAYMENT') THEN
      IF (C_SL_TYPE in ('DEBIT','MISC_DEBIT','STOP','SWEEP_OUT')) THEN
        RETURN (C_TX_BA_AMOUNT);
      ELSE
        RETURN (-C_TX_BA_AMOUNT);
      END IF;
    ELSIF (C_TX_TYPE = 'RECEIPT') THEN
      IF (C_SL_TYPE in ('CREDIT','MISC_CREDIT','NSF','REJECTED','SWEEP_IN')) THEN
        RETURN (C_TX_BA_AMOUNT);
      ELSE
        RETURN (-C_TX_BA_AMOUNT);
      END IF;
    ELSIF (C_TX_TYPE = 'JE_LINE') THEN
      IF (C_SL_TYPE in ('CREDIT','MISC_CREDIT','NSF','REJECTED','SWEEP_IN')) THEN
        IF (C_TX_DR_CR = 'DR') THEN
          RETURN (C_TX_BA_AMOUNT);
        ELSE
          RETURN (-C_TX_BA_AMOUNT);
        END IF;
      ELSE
        IF (C_TX_DR_CR = 'DR') THEN
          RETURN (-C_TX_BA_AMOUNT);
        ELSE
          RETURN (C_TX_BA_AMOUNT);
        END IF;
      END IF;
    ELSIF (C_TX_TYPE in ('ROI_LINE','XTR_LINE')) THEN
      IF (C_SL_TYPE in ('CREDIT','MISC_CREDIT','NSF','REJECTED','SWEEP_IN')) THEN
        IF (C_TX_DR_CR = 'CASH') THEN
          RETURN (C_TX_BA_AMOUNT);
        ELSE
          RETURN (-C_TX_BA_AMOUNT);
        END IF;
      ELSE
        IF (C_TX_DR_CR = 'CASH') THEN
          RETURN (-C_TX_BA_AMOUNT);
        ELSE
          RETURN (C_TX_BA_AMOUNT);
        END IF;
      END IF;
      RETURN (C_TX_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'STATEMENT') THEN
      IF (C_SL_TYPE = 'MISC_CREDIT') THEN
        IF (C_TX_DR_CR in ('CR','MD')) THEN
          RETURN (C_TX_AMOUNT_CLEARED);
        ELSE
          RETURN (-C_TX_AMOUNT_CLEARED);
        END IF;
      ELSIF (C_SL_TYPE = 'MISC_DEBIT') THEN
        IF (C_TX_DR_CR in ('DR','MD')) THEN
          RETURN (C_TX_AMOUNT_CLEARED);
        ELSE
          RETURN (-C_TX_AMOUNT_CLEARED);
        END IF;
      ELSE
        RETURN (C_TX_AMOUNT_CLEARED);
      END IF;
    ELSIF (C_TX_TYPE = 'PAY') THEN
      RETURN (C_TX_AMOUNT_CLEARED);
    ELSIF (C_TX_TYPE = 'PAY_EFT') THEN
      RETURN (C_TX_AMOUNT_CLEARED);
    END IF;
    RETURN NULL;
  END C_TX_AMOUNT_FORFORMULA;

  FUNCTION C_TX_AMOUNT_CLEARED_FORFORMULA(C_SL_TYPE IN VARCHAR2
                                         ,C_SL_AMOUNT_CLEARED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE in ('MISC_CREDIT','RECEIPT','CREDIT','SWEEP_IN')) THEN
      IF (C_TRX_REFERENCE_TYPE = 'PAYMENT') THEN
        RETURN (NVL(-C_SL_AMOUNT_CLEARED
                  ,0));
      ELSE
        RETURN (NVL(C_SL_AMOUNT_CLEARED
                  ,0));
      END IF;
    ELSIF (C_SL_TYPE in ('MISC_DEBIT','PAYMENT','DEBIT','SWEEP_OUT')) THEN
      IF (C_TRX_REFERENCE_TYPE = 'RECEIPT') THEN
        RETURN (NVL(-C_SL_AMOUNT_CLEARED
                  ,0));
      ELSE
        RETURN (NVL(C_SL_AMOUNT_CLEARED
                  ,0));
      END IF;
    ELSE
      RETURN (C_SL_AMOUNT_CLEARED);
    END IF;
  END C_TX_AMOUNT_CLEARED_FORFORMULA;

  FUNCTION C_TX_BANK_CHARGES_FORFORMULA(C_TX_BANK_CHARGES IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (C_TX_BANK_CHARGES);
    RETURN NULL;
  END C_TX_BANK_CHARGES_FORFORMULA;

  FUNCTION C_TX_BANK_ERRORS_FORFORMULA(C_TX_BANK_ERRORS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (C_TX_BANK_ERRORS);
    RETURN NULL;
  END C_TX_BANK_ERRORS_FORFORMULA;

  FUNCTION C_STAT_SUM_REC_LINEFORMULA(C_STAT_SUM_LINE_AMOUNT IN NUMBER
                                     ,C_STAT_UNREC_SUM_LINE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (C_STAT_SUM_LINE_AMOUNT - C_STAT_UNREC_SUM_LINE);
  END C_STAT_SUM_REC_LINEFORMULA;

  FUNCTION C_SL_REC_DRFORMULA(C_SL_TYPE IN VARCHAR2
                             ,C_STAT_LINE_STATUS IN VARCHAR2
                             ,C_SL_AMOUNT IN NUMBER
                             ,C_SL_UNREC_AMOUNT IN NUMBER
                             ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'DEBIT') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_DRFORMULA;

  FUNCTION C_SL_REC_DR_MISCFORMULA(C_SL_TYPE IN VARCHAR2
                                  ,C_STAT_LINE_STATUS IN VARCHAR2
                                  ,C_SL_AMOUNT IN NUMBER
                                  ,C_SL_UNREC_AMOUNT IN NUMBER
                                  ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'MISC_DEBIT') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_DR_MISCFORMULA;

  FUNCTION C_SL_REC_CRFORMULA(C_SL_TYPE IN VARCHAR2
                             ,C_STAT_LINE_STATUS IN VARCHAR2
                             ,C_SL_AMOUNT IN NUMBER
                             ,C_SL_UNREC_AMOUNT IN NUMBER
                             ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'CREDIT') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_CRFORMULA;

  FUNCTION C_SL_REC_CR_MISCFORMULA(C_SL_TYPE IN VARCHAR2
                                  ,C_STAT_LINE_STATUS IN VARCHAR2
                                  ,C_SL_AMOUNT IN NUMBER
                                  ,C_SL_UNREC_AMOUNT IN NUMBER
                                  ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'MISC_CREDIT') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_CR_MISCFORMULA;

  FUNCTION C_SL_REC_NSFFORMULA(C_SL_TYPE IN VARCHAR2
                              ,C_STAT_LINE_STATUS IN VARCHAR2
                              ,C_SL_AMOUNT IN NUMBER
                              ,C_SL_UNREC_AMOUNT IN NUMBER
                              ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'NSF') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_NSFFORMULA;

  FUNCTION C_SL_REC_REJECTEDFORMULA(C_SL_TYPE IN VARCHAR2
                                   ,C_STAT_LINE_STATUS IN VARCHAR2
                                   ,C_SL_AMOUNT IN NUMBER
                                   ,C_SL_UNREC_AMOUNT IN NUMBER
                                   ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'REJECTED') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_REJECTEDFORMULA;

  FUNCTION C_SL_REC_STOPFORMULA(C_SL_TYPE IN VARCHAR2
                               ,C_STAT_LINE_STATUS IN VARCHAR2
                               ,C_SL_AMOUNT IN NUMBER
                               ,C_SL_UNREC_AMOUNT IN NUMBER
                               ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'STOP') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_REC_STOPFORMULA;

  FUNCTION C_SL_UNREC_DRFORMULA(C_SL_TYPE IN VARCHAR2
                               ,C_STAT_TYPE IN VARCHAR2
                               ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'DEBIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_DRFORMULA;

  FUNCTION C_SL_UNREC_DR_MISCFORMULA(C_SL_TYPE IN VARCHAR2
                                    ,C_STAT_TYPE IN VARCHAR2
                                    ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'MISC_DEBIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_DR_MISCFORMULA;

  FUNCTION C_SL_UNREC_CRFORMULA(C_SL_TYPE IN VARCHAR2
                               ,C_STAT_TYPE IN VARCHAR2
                               ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'CREDIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_CRFORMULA;

  FUNCTION C_SL_UNREC_CR_MISCFORMULA(C_SL_TYPE IN VARCHAR2
                                    ,C_STAT_TYPE IN VARCHAR2
                                    ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'MISC_CREDIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_CR_MISCFORMULA;

  FUNCTION C_SL_UNREC_NSFFORMULA(C_SL_TYPE IN VARCHAR2
                                ,C_STAT_TYPE IN VARCHAR2
                                ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'NSF') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_NSFFORMULA;

  FUNCTION C_SL_UNREC_REJECTEDFORMULA(C_SL_TYPE IN VARCHAR2
                                     ,C_STAT_TYPE IN VARCHAR2
                                     ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'REJECTED') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_REJECTEDFORMULA;

  FUNCTION C_SL_UNREC_STOPFORMULA(C_SL_TYPE IN VARCHAR2
                                 ,C_STAT_TYPE IN VARCHAR2
                                 ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'STOP') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_STOPFORMULA;

  FUNCTION C_TX_SIGN_AMOUNT_FORFORMULA(C_TX_TYPE IN VARCHAR2
                                      ,C_TX_SIGN_BA_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_TX_TYPE = 'PAYMENT') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'STATEMENT') THEN
      RETURN (0);
    ELSIF (C_TX_TYPE = 'PAY') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'PAY_EFT') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    ELSE
      RETURN (C_TX_SIGN_BA_AMOUNT);
    END IF;
    RETURN NULL;
  END C_TX_SIGN_AMOUNT_FORFORMULA;

  FUNCTION C_TX_SIGN_AMOUNT_CLEARED_FORFO(C_TX_TYPE IN VARCHAR2
                                         ,C_SL_AMOUNT_CLEARED IN NUMBER
                                         ,C_TX_SIGN_AMOUNT_CLEARED IN NUMBER
                                         ,C_TX_SIGN_BA_AMOUNT IN NUMBER
                                         ,C_TX_DR_CR IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (C_TX_TYPE = 'PAYMENT') THEN
      RETURN (-C_SL_AMOUNT_CLEARED);
    ELSIF (C_TX_TYPE = 'RECEIPT') THEN
      RETURN (C_TX_SIGN_AMOUNT_CLEARED);
    ELSIF (C_TX_TYPE = 'JE_LINE') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'ROI_LINE') THEN
      IF (C_TX_DR_CR = 'PAYMENT') THEN
        RETURN (NVL(-C_SL_AMOUNT_CLEARED
                  ,0));
      ELSE
        RETURN (NVL(C_SL_AMOUNT_CLEARED
                  ,0));
      END IF;
    ELSIF (C_TX_TYPE = 'XTR_LINE') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'STATEMENT') THEN
      RETURN (0);
    ELSIF (C_TX_TYPE = 'PAY') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'PAY_EFT') THEN
      RETURN (C_TX_SIGN_BA_AMOUNT);
    END IF;
    RETURN NULL;
  END C_TX_SIGN_AMOUNT_CLEARED_FORFO;

  FUNCTION C_SL_UNREC_SIGNED_AMOUNTFORMUL(C_SL_SIGNED_AMOUNT IN NUMBER
                                         ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (C_SL_SIGNED_AMOUNT - C_SL_REC_AMOUNT);
  END C_SL_UNREC_SIGNED_AMOUNTFORMUL;

  FUNCTION C_TX_AMOUNT_FOR2FORMULA(C_TX_TYPE IN VARCHAR2
                                  ,C_TX_BA_AMOUNT IN NUMBER
                                  ,C_TX_AMOUNT_CLEARED IN NUMBER
                                  ,C_SL_TYPE IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (C_TX_TYPE = 'PAYMENT') THEN
      RETURN (C_TX_BA_AMOUNT);
    ELSIF (C_TX_TYPE = 'STATEMENT') THEN
      RETURN (C_TX_AMOUNT_CLEARED);
    ELSIF (C_SL_TYPE = 'MISC_DEBIT') THEN
      RETURN (-C_TX_BA_AMOUNT);
    END IF;
    RETURN (C_TX_BA_AMOUNT);
  END C_TX_AMOUNT_FOR2FORMULA;

  FUNCTION C_DATEFORMATFORMULA(C_DATEFORMAT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (FND_GLOBAL.NLS_DATE_FORMAT);
  END C_DATEFORMATFORMULA;

  FUNCTION C_SL_OVERREC_CRFORMULA(C_SL_TYPE IN VARCHAR2
                                 ,C_STAT_TYPE IN VARCHAR2
                                 ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'CREDIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_CRFORMULA;

  FUNCTION C_SL_OVERREC_CR_MISCFORMULA(C_SL_TYPE IN VARCHAR2
                                      ,C_STAT_TYPE IN VARCHAR2
                                      ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'MISC_CREDIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_CR_MISCFORMULA;

  FUNCTION C_SL_OVERREC_DRFORMULA(C_SL_TYPE IN VARCHAR2
                                 ,C_STAT_TYPE IN VARCHAR2
                                 ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'DEBIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_DRFORMULA;

  FUNCTION C_SL_OVERREC_DR_MISCFORMULA(C_SL_TYPE IN VARCHAR2
                                      ,C_STAT_TYPE IN VARCHAR2
                                      ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'MISC_DEBIT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_DR_MISCFORMULA;

  FUNCTION C_SL_OVERREC_NSFFORMULA(C_SL_TYPE IN VARCHAR2
                                  ,C_STAT_TYPE IN VARCHAR2
                                  ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'NSF') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_NSFFORMULA;

  FUNCTION C_SL_OVERREC_REJECTEDFORMULA(C_SL_TYPE IN VARCHAR2
                                       ,C_STAT_TYPE IN VARCHAR2
                                       ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'REJECTED') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_REJECTEDFORMULA;

  FUNCTION C_SL_OVERREC_STOPFORMULA(C_SL_TYPE IN VARCHAR2
                                   ,C_STAT_TYPE IN VARCHAR2
                                   ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'STOP') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_STOPFORMULA;

  FUNCTION C_SL_UNREC_POS_AMOUNTFORMULA(C_STAT_LINE_STATUS IN VARCHAR2
                                       ,C_SL_AMOUNT IN NUMBER
                                       ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
      RETURN (0);
    ELSIF (C_SL_AMOUNT - C_SL_REC_AMOUNT >= 0) THEN
      RETURN (C_SL_AMOUNT - C_SL_REC_AMOUNT);
    ELSE
      RETURN (C_SL_REC_AMOUNT - C_SL_AMOUNT);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_POS_AMOUNTFORMULA;

  FUNCTION C_SL_DR2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                          ,C_SL_DR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_DR);
    END IF;
    RETURN NULL;
  END C_SL_DR2FORMULA;

  FUNCTION C_SL_MISC_DR2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                               ,C_SL_MISC_DR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_MISC_DR);
    END IF;
    RETURN NULL;
  END C_SL_MISC_DR2FORMULA;

  FUNCTION C_SL_CR2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                          ,C_SL_CR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_CR);
    END IF;
    RETURN NULL;
  END C_SL_CR2FORMULA;

  FUNCTION C_SL_MISC_CR2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                               ,C_SL_MISC_CR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_MISC_CR);
    END IF;
    RETURN NULL;
  END C_SL_MISC_CR2FORMULA;

  FUNCTION C_SL_NSF2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                           ,C_SL_NSF IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_NSF);
    END IF;
    RETURN NULL;
  END C_SL_NSF2FORMULA;

  FUNCTION C_SL_REJECTED2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                                ,C_SL_REJECTED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_REJECTED);
    END IF;
    RETURN NULL;
  END C_SL_REJECTED2FORMULA;

  FUNCTION C_SL_STOP2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                            ,C_SL_STOP IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_STOP);
    END IF;
    RETURN NULL;
  END C_SL_STOP2FORMULA;

  FUNCTION C_TX_SIGN_SL_UNREC_AMOUNTFORMU(C_SL_TYPE IN VARCHAR2
                                         ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE in ('DEBIT','MISC_DEBIT','NSF','REJECTED','SWEEP_OUT')) THEN
      RETURN (-C_SL_UNREC_AMOUNT);
    ELSE
      RETURN (C_SL_UNREC_AMOUNT);
    END IF;
    RETURN (C_SL_UNREC_AMOUNT);
  END C_TX_SIGN_SL_UNREC_AMOUNTFORMU;

  FUNCTION C_SL_SWP_IN2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                              ,C_SL_SWP_IN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_SWP_IN);
    END IF;
  END C_SL_SWP_IN2FORMULA;

  FUNCTION C_SL_REC_SWP_INFORMULA(C_SL_TYPE IN VARCHAR2
                                 ,C_STAT_LINE_STATUS IN VARCHAR2
                                 ,C_SL_AMOUNT IN NUMBER
                                 ,C_SL_UNREC_AMOUNT IN NUMBER
                                 ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'SWEEP_IN') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
  END C_SL_REC_SWP_INFORMULA;

  FUNCTION C_SL_UNREC_SWP_INFORMULA(C_SL_TYPE IN VARCHAR2
                                   ,C_STAT_TYPE IN VARCHAR2
                                   ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'SWEEP_IN') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
  END C_SL_UNREC_SWP_INFORMULA;

  FUNCTION C_SL_OVERREC_SWP_INFORMULA(C_SL_TYPE IN VARCHAR2
                                     ,C_STAT_TYPE IN VARCHAR2
                                     ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'SWEEP_IN') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_SWP_INFORMULA;

  FUNCTION C_SL_SWP_OUT2FORMULA(C_SL_UNREC_AMOUNT IN NUMBER
                               ,C_SL_SWP_OUT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
      RETURN (0);
    ELSE
      RETURN (C_SL_SWP_OUT);
    END IF;
  END C_SL_SWP_OUT2FORMULA;

  FUNCTION C_SL_REC_SWP_OUTFORMULA(C_SL_TYPE IN VARCHAR2
                                  ,C_STAT_LINE_STATUS IN VARCHAR2
                                  ,C_SL_AMOUNT IN NUMBER
                                  ,C_SL_UNREC_AMOUNT IN NUMBER
                                  ,C_SL_REC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'SWEEP_OUT') THEN
      IF (C_STAT_LINE_STATUS = 'EXTERNAL') THEN
        RETURN (C_SL_AMOUNT);
      ELSIF (P_STMT_LINE_STATUS = 'UNRECONCILED' AND C_SL_UNREC_AMOUNT = 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_REC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
  END C_SL_REC_SWP_OUTFORMULA;

  FUNCTION C_SL_UNREC_SWP_OUTFORMULA(C_SL_TYPE IN VARCHAR2
                                    ,C_STAT_TYPE IN VARCHAR2
                                    ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'SWEEP_OUT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (0);
      ELSE
        RETURN (C_SL_UNREC_AMOUNT);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_UNREC_SWP_OUTFORMULA;

  FUNCTION C_SL_OVERREC_SWP_OUTFORMULA(C_SL_TYPE IN VARCHAR2
                                      ,C_STAT_TYPE IN VARCHAR2
                                      ,C_SL_UNREC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SL_TYPE = 'SWEEP_OUT') THEN
      IF (C_STAT_TYPE = 'RECONCILED' AND C_SL_UNREC_AMOUNT < 0) THEN
        RETURN (-C_SL_UNREC_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SL_OVERREC_SWP_OUTFORMULA;

  FUNCTION C_STAT_DATE_SQL_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_STAT_DATE_SQL_LEX;
  END C_STAT_DATE_SQL_LEX_P;

  FUNCTION C_BANK_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_NAME_DSP;
  END C_BANK_NAME_DSP_P;

  FUNCTION C_ACCOUNT_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ACCOUNT_NAME_DSP;
  END C_ACCOUNT_NAME_DSP_P;

  FUNCTION C_BANK_BRANCH_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_BRANCH_DSP;
  END C_BANK_BRANCH_DSP_P;

  FUNCTION C_EXTERNAL_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EXTERNAL_TRANSLATION;
  END C_EXTERNAL_TRANSLATION_P;

  FUNCTION C_ALL_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_TRANSLATION;
  END C_ALL_TRANSLATION_P;

  FUNCTION C_STAT_NUMBER_SQL_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_STAT_NUMBER_SQL_LEX;
  END C_STAT_NUMBER_SQL_LEX_P;

  FUNCTION C_THE_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_THE_END;
  END C_THE_END_P;

  FUNCTION C_GL_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_GL_CURRENCY_CODE;
  END C_GL_CURRENCY_CODE_P;

  FUNCTION C_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NAME;
  END C_NAME_P;

  FUNCTION C_SET_OF_BOOKS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SET_OF_BOOKS_ID;
  END C_SET_OF_BOOKS_ID_P;

  FUNCTION C_BANK_CURR_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_CURR_DSP;
  END C_BANK_CURR_DSP_P;

  FUNCTION C_ACCOUNT_NUMBER_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ACCOUNT_NUMBER_DSP;
  END C_ACCOUNT_NUMBER_DSP_P;

  FUNCTION C_DISPLAY_MESSAGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DISPLAY_MESSAGE;
  END C_DISPLAY_MESSAGE_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    begin FND_MESSAGE.SET_NAME(APPLICATION, NAME); end;
    --STPROC.BIND_I(APPLICATION);
    --STPROC.BIND_I(NAME);
    --STPROC.EXECUTE;
  END SET_NAME;
/*
  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STRING;*/

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    begin X0 := FND_MESSAGE.GET; end;
    --STPROC.BIND_O(X0);
    --STPROC.EXECUTE;
    --STPROC.RETRIEVE(1     ,X0);
    RETURN X0;
  END GET;

 /* FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;
  END RAISE_ERROR;

  PROCEDURE DEBUG(LINE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DEBUG(:LINE); end;');
    STPROC.BIND_I(LINE);
    STPROC.EXECUTE;
  END DEBUG;

  PROCEDURE ENABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.ENABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END ENABLE_DEBUG;

  PROCEDURE DISABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DISABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END DISABLE_DEBUG;*/

  PROCEDURE INIT_SECURITY IS
  BEGIN
    begin CEP_STANDARD.init_security; end;
    --STPROC.EXECUTE;
  END INIT_SECURITY;

/*  FUNCTION GET_WINDOW_SESSION_TITLE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_WINDOW_SESSION_TITLE;

  FUNCTION GET_EFFECTIVE_DATE(P_BANK_ACCOUNT_ID IN NUMBER
                             ,P_TRX_CODE IN VARCHAR2
                             ,P_RECEIPT_DATE IN DATE) RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_EFFECTIVE_DATE(:P_BANK_ACCOUNT_ID, :P_TRX_CODE, :P_RECEIPT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BANK_ACCOUNT_ID);
    STPROC.BIND_I(P_TRX_CODE);
    STPROC.BIND_I(P_RECEIPT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_EFFECTIVE_DATE;*/

END CE_CEXSTMRR_XMLP_PKG;


/
