--------------------------------------------------------
--  DDL for Package Body PSP_PSPLDDFA_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPLDDFA_XMLP_PKG" AS
/* $Header: PSPLDDFAB.pls 120.6 2007/10/29 07:23:44 amakrish noship $ */
  FUNCTION BEFOREPFORM(ORIENTATION IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
  --  ORIENTATION := 'LANDSCAPE';
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION P_TIME_PERIOD_STARTVALIDTRIGGE RETURN BOOLEAN IS
    D_TIME_PERIOD_START DATE;
    D_PRE_GEN_PERIOD_START DATE;
    D_DIST_LINES_START DATE;
  BEGIN
    IF P_TIME_PERIOD_START IS NULL THEN
      BEGIN
        SELECT
          MIN(DISTRIBUTION_DATE)
        INTO D_PRE_GEN_PERIOD_START
        FROM
          PSP_PRE_GEN_DIST_LINES_HISTORY;
      EXCEPTION
        WHEN OTHERS THEN
          D_PRE_GEN_PERIOD_START := NULL;
      END;
      BEGIN
        SELECT
          MIN(DISTRIBUTION_DATE)
        INTO D_DIST_LINES_START
        FROM
          PSP_DISTRIBUTION_LINES_HISTORY;
      EXCEPTION
        WHEN OTHERS THEN
          D_DIST_LINES_START := NULL;
      END;
      IF D_PRE_GEN_PERIOD_START IS NULL AND D_DIST_LINES_START IS NULL THEN
        RETURN (FALSE);
      ELSIF ((D_PRE_GEN_PERIOD_START IS NULL) OR (D_DIST_LINES_START <= D_PRE_GEN_PERIOD_START)) THEN
        P_TIME_PERIOD_START := D_DIST_LINES_START;
        RETURN (TRUE);
      ELSIF ((D_DIST_LINES_START IS NULL) OR (D_PRE_GEN_PERIOD_START <= D_DIST_LINES_START)) THEN
        P_TIME_PERIOD_START := D_PRE_GEN_PERIOD_START;
        RETURN (TRUE);
      END IF;
    END IF;
    RETURN (TRUE);
  END P_TIME_PERIOD_STARTVALIDTRIGGE;

  FUNCTION P_TIME_PERIOD_ENDVALIDTRIGGER RETURN BOOLEAN IS
    D_TIME_PERIOD_END DATE;
    D_PRE_GEN_PERIOD_END DATE;
    D_DIST_LINES_END DATE;
  BEGIN
    IF P_TIME_PERIOD_END IS NULL THEN
      BEGIN
        SELECT
          MAX(DISTRIBUTION_DATE)
        INTO D_PRE_GEN_PERIOD_END
        FROM
          PSP_PRE_GEN_DIST_LINES_HISTORY;
      EXCEPTION
        WHEN OTHERS THEN
          D_PRE_GEN_PERIOD_END := NULL;
      END;
      BEGIN
        SELECT
          MAX(DISTRIBUTION_DATE)
        INTO D_DIST_LINES_END
        FROM
          PSP_DISTRIBUTION_LINES_HISTORY;
      EXCEPTION
        WHEN OTHERS THEN
          D_DIST_LINES_END := NULL;
      END;
      IF D_PRE_GEN_PERIOD_END IS NULL AND D_DIST_LINES_END IS NULL THEN
        RETURN (FALSE);
      ELSIF ((D_PRE_GEN_PERIOD_END IS NULL) OR (D_DIST_LINES_END >= D_PRE_GEN_PERIOD_END)) THEN
        P_TIME_PERIOD_END := D_DIST_LINES_END;
        RETURN (TRUE);
      ELSIF ((D_DIST_LINES_END IS NULL) OR (D_PRE_GEN_PERIOD_END >= D_DIST_LINES_END)) THEN
        P_TIME_PERIOD_END := D_PRE_GEN_PERIOD_END;
        RETURN (TRUE);
      END IF;
    END IF;
    RETURN (TRUE);
  END P_TIME_PERIOD_ENDVALIDTRIGGER;

  FUNCTION CF_INSTITUTION_NAMEFORMULA RETURN VARCHAR2 IS
    V_INSTITUTION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    V_INSTITUTION_ID VARCHAR2(30);
  BEGIN
    V_INSTITUTION_ID := VALUE('PSP_ORG_REPORT');
    IF V_INSTITUTION_ID IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      DISTINCT
      NAME
    INTO V_INSTITUTION_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE ORGANIZATION_ID = TO_NUMBER(V_INSTITUTION_ID);
    RETURN V_INSTITUTION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_INSTITUTION_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
--    HR_STANDARD.EVENT('BEFORE REPORT');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR C1(P_LOOKUP_CODE IN VARCHAR2,P_TEMPLATE_ID IN NUMBER) IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = P_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = P_LOOKUP_CODE;
    L_NUM NUMBER;
    L_NUM2 NUMBER;
  BEGIN
    IF P_ORG_TEMPLATE_ID IS NULL THEN
      P_ORGANIZATION_ID := ' and 1 = 1 ';
    ELSE
      OPEN C1('ORG',P_ORG_TEMPLATE_ID);
      FETCH C1
       INTO L_NUM;
      CLOSE C1;
      IF L_NUM <> 0 THEN
        P_ORGANIZATION_ID := ' and organization_id  IN (select criteria_value1 from psp_report_template_details
                                   where template_id = ' || P_ORG_TEMPLATE_ID || '
                                   and   criteria_lookup_type = ''PSP_SELECTION_CRITERIA''
                                   and   criteria_lookup_code = ''ORG'' ' || ' ) ';
      ELSE
        P_ORGANIZATION_ID := ' and 1 = 1 ';
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_CURRENCY_FORMATFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN (FND_CURRENCY.GET_FORMAT_MASK(CURRENCY_CODE
                                       ,30));
  END CF_CURRENCY_FORMATFORMULA;

  FUNCTION CF_DISTRIBUTION_AMOUNT_DSPFORM(DISTRIBUTION_AMOUNT IN NUMBER
                                         ,CF_CURRENCY_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(DISTRIBUTION_AMOUNT)*/NULL;
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    RETURN (TO_CHAR(DISTRIBUTION_AMOUNT
                  ,CF_CURRENCY_FORMAT));
  END CF_DISTRIBUTION_AMOUNT_DSPFORM;

  FUNCTION CF_SUM_CURRENCYFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN ('(' || CURRENCY_CODE || ')');
  END CF_SUM_CURRENCYFORMULA;

  FUNCTION CF_SUM_DISTRIBUTION_AMOUNTFORM(CF_CURRENCY_FORMAT IN VARCHAR2
                                         ,CS_DISTRIBUTION_AMOUNT IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(CS_DISTRIBUTION_AMOUNT)*/NULL;
    RETURN (TO_CHAR(CS_DISTRIBUTION_AMOUNT
                  ,CF_CURRENCY_FORMAT));
  END CF_SUM_DISTRIBUTION_AMOUNTFORM;

  FUNCTION CF_ORGANIZATION_NAMEFORMULA(ORGANIZATION_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ORGANIZATION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    SELECT
      DISTINCT
      NAME
    INTO V_ORGANIZATION_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE ORGANIZATION_ID = CF_ORGANIZATION_NAMEFORMULA.ORGANIZATION_ID;
    RETURN V_ORGANIZATION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
      RETURN 'TOO_MANY_ROWS';
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_ORGANIZATION_NAMEFORMULA;

  FUNCTION CF_CHARGING_INSTRUCTIONSFORMUL(GL_CODE_COMBINATION_ID IN NUMBER
                                         ,PROJECT_ID IN NUMBER
                                         ,TASK_ID IN NUMBER
                                         ,AWARD_ID IN NUMBER
                                         ,EXPENDITURE_ORGANIZATION_ID IN NUMBER
                                         ,EXPENDITURE_TYPE IN VARCHAR2) RETURN CHAR IS
    V_RETCODE NUMBER;
    L_CHART_OF_ACCTS VARCHAR2(20);
    GL_FLEX_VALUES VARCHAR2(2000);
    L_PROJECT_NAME VARCHAR2(30);
    L_AWARD_NUMBER VARCHAR2(15);
    L_TASK_NUMBER VARCHAR2(25);
    L_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    L_POETA VARCHAR2(2000);
  BEGIN
    IF GL_CODE_COMBINATION_ID IS NOT NULL THEN
      V_RETCODE := PSP_GENERAL.FIND_CHART_OF_ACCTS(TO_NUMBER(P_SET_OF_BOOKS_ID)
                                                  ,L_CHART_OF_ACCTS);
      GL_FLEX_VALUES := FND_FLEX_EXT.GET_SEGS(APPLICATION_SHORT_NAME => 'SQLGL'
                                             ,KEY_FLEX_CODE => 'GL#'
                                             ,STRUCTURE_NUMBER => TO_NUMBER(L_CHART_OF_ACCTS)
                                             ,COMBINATION_ID => GL_CODE_COMBINATION_ID);
      RETURN (GL_FLEX_VALUES);
    ELSE
      IF PROJECT_ID IS NOT NULL THEN
        SELECT
          NAME
        INTO L_PROJECT_NAME
        FROM
          PA_PROJECTS_ALL
        WHERE PROJECT_ID = CF_CHARGING_INSTRUCTIONSFORMUL.PROJECT_ID;
        SELECT
          TASK_NUMBER
        INTO L_TASK_NUMBER
        FROM
          PA_TASKS
        WHERE TASK_ID = CF_CHARGING_INSTRUCTIONSFORMUL.TASK_ID;
        IF AWARD_ID IS NOT NULL THEN
          SELECT
            AWARD_NUMBER
          INTO L_AWARD_NUMBER
          FROM
            GMS_AWARDS_ALL
          WHERE AWARD_ID = CF_CHARGING_INSTRUCTIONSFORMUL.AWARD_ID;
        ELSE
          L_AWARD_NUMBER := '';
        END IF;
        SELECT
          NAME
        INTO L_ORG_NAME
        FROM
          HR_ALL_ORGANIZATION_UNITS
        WHERE ORGANIZATION_ID = CF_CHARGING_INSTRUCTIONSFORMUL.EXPENDITURE_ORGANIZATION_ID;
        L_POETA := L_PROJECT_NAME || ' ' || L_TASK_NUMBER || ' ' || L_AWARD_NUMBER || ' ' || L_ORG_NAME || ' ' || EXPENDITURE_TYPE;
      ELSE
        L_POETA := '';
      END IF;
      RETURN (L_POETA);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('NO_DATA_FOUND');
    WHEN OTHERS THEN
      RETURN ('OTHER ERROR OCCURED');
  END CF_CHARGING_INSTRUCTIONSFORMUL;

  FUNCTION CF_PERSON_NAMEFORMULA(PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    V_PERSON_NAME VARCHAR2(80);
  BEGIN
    IF P_TIME_PERIOD_END IS NOT NULL THEN
      SELECT
        DISTINCT
        FULL_NAME
      INTO V_PERSON_NAME
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = CF_PERSON_NAMEFORMULA.PERSON_ID
        AND ( P_TIME_PERIOD_END Between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE );
    ELSE
      SELECT
        DISTINCT
        FULL_NAME
      INTO V_PERSON_NAME
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = CF_PERSON_NAMEFORMULA.PERSON_ID;
    END IF;
    RETURN V_PERSON_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_PERSON_NAMEFORMULA;

  FUNCTION CF_ASSIGNMENT_NUMBERFORMULA(ASSIGNMENT_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ASSIGNMENT_NUMBER VARCHAR2(30);
  BEGIN
    IF P_TIME_PERIOD_END IS NOT NULL THEN
      SELECT
        DISTINCT
        ASSIGNMENT_NUMBER
      INTO V_ASSIGNMENT_NUMBER
      FROM
        PER_ASSIGNMENTS_F
      WHERE ASSIGNMENT_ID = CF_ASSIGNMENT_NUMBERFORMULA.ASSIGNMENT_ID
        AND ( P_TIME_PERIOD_END Between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE );
    ELSE
      SELECT
        DISTINCT
        ASSIGNMENT_NUMBER
      INTO V_ASSIGNMENT_NUMBER
      FROM
        PER_ASSIGNMENTS_F
      WHERE ASSIGNMENT_ID = CF_ASSIGNMENT_NUMBERFORMULA.ASSIGNMENT_ID;
    END IF;
    RETURN V_ASSIGNMENT_NUMBER;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'NO_DATA_FOUND';
    WHEN TOO_MANY_ROWS THEN
      RETURN 'TOO_MANY_ROWS';
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_ASSIGNMENT_NUMBERFORMULA;

  FUNCTION CF_ELEMENT_NAMEFORMULA(ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ELEMENT_NAME VARCHAR2(80);
  BEGIN
    IF P_TIME_PERIOD_END IS NOT NULL THEN
      SELECT
        DISTINCT
        ELEMENT_NAME
      INTO V_ELEMENT_NAME
      FROM
        PAY_ELEMENT_TYPES_F
      WHERE ELEMENT_TYPE_ID = CF_ELEMENT_NAMEFORMULA.ELEMENT_TYPE_ID
        AND ( P_TIME_PERIOD_END Between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE );
    ELSE
      SELECT
        DISTINCT
        ELEMENT_NAME
      INTO V_ELEMENT_NAME
      FROM
        PAY_ELEMENT_TYPES_F
      WHERE ELEMENT_TYPE_ID = CF_ELEMENT_NAMEFORMULA.ELEMENT_TYPE_ID;
    END IF;
    RETURN V_ELEMENT_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'NO_DATA_FOUND';
    WHEN TOO_MANY_ROWS THEN
      RETURN 'TOO_MANY_ROWS';
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_ELEMENT_NAMEFORMULA;

  FUNCTION CF_PERIOD_NAMEFORMULA(TIME_PERIOD_ID IN NUMBER) RETURN VARCHAR2 IS
    V_PERIOD_NAME VARCHAR2(35);
  BEGIN
    SELECT
      DISTINCT
      PERIOD_NAME
    INTO V_PERIOD_NAME
    FROM
      PER_TIME_PERIODS
    WHERE TIME_PERIOD_ID = CF_PERIOD_NAMEFORMULA.TIME_PERIOD_ID;
    RETURN V_PERIOD_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'NO_DATA_FOUND';
    WHEN TOO_MANY_ROWS THEN
      RETURN 'TOO_MANY_ROWS';
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_PERIOD_NAMEFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
--    HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_DATE_FORMATFORMULA RETURN CHAR IS
  BEGIN
    RETURN (VALUE('ICX_DATE_FORMAT_MASK'));
  END CF_DATE_FORMATFORMULA;

  FUNCTION CF_START_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_TIME_PERIOD_START)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_TIME_PERIOD_START
                  ,CF_DATE_FORMAT));
  END CF_START_DATE_DISPFORMULA;

  FUNCTION CF_END_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_TIME_PERIOD_END)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_TIME_PERIOD_END
                  ,CF_DATE_FORMAT));
  END CF_END_DATE_DISPFORMULA;

  FUNCTION CF_RUN_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SYSDATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SYSDATE
                  ,CF_DATE_FORMAT));
  END CF_RUN_DATE_DISPFORMULA;

  PROCEDURE CRT(ERRBUF OUT NOCOPY VARCHAR2
               ,RETCODE OUT NOCOPY NUMBER
               ,A_TEMPLATE_ID IN NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin PSP_EFFORTS_PKG.CRT(:ERRBUF, :RETCODE, :A_TEMPLATE_ID); end;');
    STPROC.BIND_O(ERRBUF);
    STPROC.BIND_O(RETCODE);
    STPROC.BIND_I(A_TEMPLATE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,ERRBUF);
    STPROC.RETRIEVE(2
                   ,RETCODE);*/null;
  END CRT;

  PROCEDURE INIT_WORKFLOW(A_TEMPLATE_ID IN NUMBER) IS
  BEGIN
 /*   STPROC.INIT('begin PSP_EFFORTS_PKG.INIT_WORKFLOW(:A_TEMPLATE_ID); end;');
    STPROC.BIND_I(A_TEMPLATE_ID);
    STPROC.EXECUTE;*/null;
  END INIT_WORKFLOW;

  PROCEDURE UPD_INCLUDE_FLAG(A_TEMPLATE_ID IN NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin PSP_EFFORTS_PKG.UPD_INCLUDE_FLAG(:A_TEMPLATE_ID); end;');
    STPROC.BIND_I(A_TEMPLATE_ID);
    STPROC.EXECUTE;*/null;
  END UPD_INCLUDE_FLAG;

  FUNCTION GET_GL_DESCRIPTION(A_CODE_COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := PSP_EFFORTS_PKG.GET_GL_DESCRIPTION(:A_CODE_COMBINATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(A_CODE_COMBINATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_GL_DESCRIPTION;

  PROCEDURE PUT(NAME IN VARCHAR2
               ,VAL IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_PROFILE.PUT(:NAME, :VAL); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(VAL);
    STPROC.EXECUTE;*/null;
  END PUT;

  FUNCTION DEFINED(NAME IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
   /* STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.DEFINED(:NAME); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);*/
    RETURN X0;
  END DEFINED;

  PROCEDURE GET(NAME IN VARCHAR2
               ,VAL OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin FND_PROFILE.GET(:NAME, :VAL); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_O(VAL);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,VAL);*/null;
  END GET;

  FUNCTION VALUE(NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_PROFILE.VALUE(:NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_PROFILE.VALUE(NAME);
    RETURN X0;
  END VALUE;

  FUNCTION SAVE_USER(X_NAME IN VARCHAR2
                    ,X_VALUE IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
 /*   STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE_USER(:X_NAME, :X_VALUE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,X0);*/
    RETURN X0;
  END SAVE_USER;

  FUNCTION SAVE(X_NAME IN VARCHAR2
               ,X_VALUE IN VARCHAR2
               ,X_LEVEL_NAME IN VARCHAR2
               ,X_LEVEL_VALUE IN VARCHAR2
               ,X_LEVEL_VALUE_APP_ID IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
 /*   STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE(:X_NAME, :X_VALUE, :X_LEVEL_NAME, :X_LEVEL_VALUE, :X_LEVEL_VALUE_APP_ID); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_I(X_LEVEL_NAME);
    STPROC.BIND_I(X_LEVEL_VALUE);
    STPROC.BIND_I(X_LEVEL_VALUE_APP_ID);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(6
                   ,X0);*/
    RETURN X0;
  END SAVE;

  PROCEDURE GET_SPECIFIC(NAME_Z IN VARCHAR2
                        ,USER_ID_Z IN NUMBER
                        ,RESPONSIBILITY_ID_Z IN NUMBER
                        ,APPLICATION_ID_Z IN NUMBER
                        ,VAL_Z OUT NOCOPY VARCHAR2
                        ,DEFINED_Z OUT NOCOPY BOOLEAN) IS
  BEGIN
 /*   STPROC.INIT('declare DEFINED_Z BOOLEAN; begin DEFINED_Z := sys.diutil.int_to_bool(:DEFINED_Z);
 FND_PROFILE.GET_SPECIFIC(:NAME_Z, :USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :VAL_Z, DEFINED_Z);
 :DEFINED_Z := sys.diutil.bool_to_int(DEFINED_Z); end;');
    STPROC.BIND_O(DEFINED_Z);
    STPROC.BIND_I(NAME_Z);
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_O(VAL_Z);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,DEFINED_Z);
    STPROC.RETRIEVE(6
                   ,VAL_Z);*/null;
  END GET_SPECIFIC;

  FUNCTION VALUE_SPECIFIC(NAME IN VARCHAR2
                         ,USER_ID IN NUMBER
                         ,RESPONSIBILITY_ID IN NUMBER
                         ,APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_PROFILE.VALUE_SPECIFIC(:NAME, :USER_ID, :RESPONSIBILITY_ID, :APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(USER_ID);
    STPROC.BIND_I(RESPONSIBILITY_ID);
    STPROC.BIND_I(APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END VALUE_SPECIFIC;

  PROCEDURE INITIALIZE(USER_ID_Z IN NUMBER
                      ,RESPONSIBILITY_ID_Z IN NUMBER
                      ,APPLICATION_ID_Z IN NUMBER
                      ,SITE_ID_Z IN NUMBER) IS
  BEGIN
    /*STPROC.INIT('begin FND_PROFILE.INITIALIZE(:USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :SITE_ID_Z); end;');
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_I(SITE_ID_Z);
    STPROC.EXECUTE;*/null;
  END INITIALIZE;

  PROCEDURE PUTMULTIPLE(NAMES IN VARCHAR2
                       ,VALS IN VARCHAR2
                       ,NUM IN NUMBER) IS
  BEGIN
  /*  STPROC.INIT('begin FND_PROFILE.PUTMULTIPLE(:NAMES, :VALS, :NUM); end;');
    STPROC.BIND_I(NAMES);
    STPROC.BIND_I(VALS);
    STPROC.BIND_I(NUM);
    STPROC.EXECUTE;*/null;
  END PUTMULTIPLE;

END PSP_PSPLDDFA_XMLP_PKG;

/
