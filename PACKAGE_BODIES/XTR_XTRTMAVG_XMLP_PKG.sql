--------------------------------------------------------
--  DDL for Package Body XTR_XTRTMAVG_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRTMAVG_XMLP_PKG" AS
/* $Header: XTRTMAVGB.pls 120.1 2007/12/28 13:01:23 npannamp noship $ */
  FUNCTION WAVG_RATE1FORMULA RETURN VARCHAR2 IS
  BEGIN
   /* EXECUTE IMMEDIATE
      'SELECT ((:SUM_WAVG_AMT / :SUM_BALANCE) * 100) INTO :WAVG_RATE FROM DUAL';
    COMMIT;*/
    RETURN ('');
  END WAVG_RATE1FORMULA;

  FUNCTION WAVG_RATEFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END WAVG_RATEFORMULA;

  FUNCTION AVG_AMOUNT1FORMULA RETURN VARCHAR2 IS
  BEGIN
 /*   EXECUTE IMMEDIATE
      'SELECT (:SUM_BALANCE / :NUM_TRANS) INTO :AVG_AMOUNT FROM DUAL';
    COMMIT;*/
    RETURN ('');
  END AVG_AMOUNT1FORMULA;

  FUNCTION AVG_AMOUNTFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END AVG_AMOUNTFORMULA;

  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRTMAVG';
  BEGIN
        BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1AS_AT_DATE' THEN
        Z1AS_AT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PRODUCT_TYPE' THEN
        Z1PRODUCT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SHOW_DETAILS' THEN
        Z1SHOW_DETAILS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SUBTYPE' THEN
        Z1SUBTYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2ACCRUED_INT' THEN
        Z2ACCRUED_INT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AVERAGE_BALANCE' THEN
        Z2AVERAGE_BALANCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AVERAGE_RATE' THEN
        Z2AVERAGE_RATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2BALANCE' THEN
        Z2BALANCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CCY' THEN
        Z2CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CLIENT' THEN
        Z2CLIENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_NOS' THEN
        Z2DEAL_NOS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEP_ADV' THEN
        Z2DEP_ADV := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2INT_RATE' THEN
        Z2INT_RATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NAME' THEN
        Z2NAME := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NOS_TRANS' THEN
        Z2NOS_TRANS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PREV_ROLLOVER' THEN
        Z2PREV_ROLLOVER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT' THEN
        Z2PRODUCT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2P_I_AMOUNT' THEN
        Z2P_I_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL_OUTSTANDINGS' THEN
        Z2TOTAL_OUTSTANDINGS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TRANS_NOS' THEN
        Z2TRANS_NOS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
  P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    P_AS_OF_DATE_1 := TO_CHAR(TO_DATE(P_AS_OF_DATE
                                   ,'YYYY/MM/DD HH24:MI:SS')
                           ,'DD-MON-YYYY');
    PRODUCT_TYPE2 := P_PRODUCT_TYPE;
    DEAL_SUBTYPE2 := P_DEPOSIT_ADVANCE;
    AS_AT_DATE2 := P_AS_OF_DATE_1;
    SHOW_DETAIL2 := P_SHOW_CONTRACTS;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME2
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
       REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));

    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION WAVG_RATE_P RETURN NUMBER IS
  BEGIN
    RETURN WAVG_RATE;
  END WAVG_RATE_P;

  FUNCTION AVG_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN AVG_AMOUNT;
  END AVG_AMOUNT_P;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRTMAVG_XMLP_PKG;


/
