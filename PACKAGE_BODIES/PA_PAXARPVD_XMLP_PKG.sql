--------------------------------------------------------
--  DDL for Package Body PA_PAXARPVD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXARPVD_XMLP_PKG" AS
/* $Header: PAXARPVDB.pls 120.0 2008/01/02 11:17:00 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      NDF CHAR(80);
      ERRBUF VARCHAR2(200);
      RET_CODE VARCHAR2(5);
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                    NAME="PA_DEBUG_MODE"
                    FIELD=":p_debug_mode"
                    PRINT_ERROR="N"')*/NULL;
      P_RULE_OPTIMIZER := FND_PROFILE.VALUE('PA_RULE_BASED_OPTIMIZER');
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        MEANING
      INTO NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      SELECT
        MEANING
      INTO C_YES
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = 'Y';
      SELECT
        MEANING
      INTO C_NO
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = 'N';
      SELECT
        DECODE(P_RUN_VALIDATION
              ,'Y'
              ,C_YES
              ,C_NO),
        DECODE(P_REPORT_ERRORS_ONLY
              ,'Y'
              ,C_YES
              ,C_NO)
      INTO C_RUN_VALIDATION,C_REPORT_ERRORS_ONLY
      FROM
        DUAL;
      IF P_RUN_VALIDATION = 'Y' THEN
        RET_CODE := '';
        PA_PURGE_VALIDATE.BATCHVAL(ERRBUF
                                  ,RET_CODE
                                  ,P_PURGE_BATCH_ID);
        IF (RET_CODE <> 0) THEN
          /*SRW.MESSAGE(1
                     ,ERRBUF)*/NULL;
        END IF;
      END IF;
      SELECT
        BAT.BATCH_NAME,
        BAT.DESCRIPTION,
        BAT.BATCH_STATUS_CODE,
        BAT.TXN_TO_DATE,
        BAT.ACTIVE_CLOSED_FLAG,
        LK.MEANING
      INTO C_BATCH_NAME,C_BATCH_DESCRIPTION,C_BATCH_STATUS,C_THROUGH_DATE,C_BATCH_ACTIVE_CLOSED,C_BATCH_STATUS_MEANING
      FROM
        PA_PURGE_BATCHES BAT,
        PA_LOOKUPS LK
      WHERE PURGE_BATCH_ID = P_PURGE_BATCH_ID
        AND LK.LOOKUP_TYPE = 'PURGE_BATCH_STATUS'
        AND LK.LOOKUP_CODE = BAT.BATCH_STATUS_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := NDF;
        C_DUMMY_DATA := 1;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      NUMBER_OF_MESSAGES NUMBER;
      MESSAGE_BUF VARCHAR2(256);
    BEGIN
      NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
      IF (P_DEBUG_MODE = 'Y' AND NUMBER_OF_MESSAGES > 0) THEN
        /*SRW.MESSAGE(1
                   ,'Debug Messages:')*/NULL;
        FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
          PA_DEBUG.GET_MESSAGE(I
                              ,MESSAGE_BUF);
          /*SRW.MESSAGE(1
                     ,MESSAGE_BUF)*/NULL;
        END LOOP;
      END IF;
    END;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_BATCH_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_NAME;
  END C_BATCH_NAME_P;

  FUNCTION C_BATCH_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_DESCRIPTION;
  END C_BATCH_DESCRIPTION_P;

  FUNCTION C_BATCH_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_STATUS;
  END C_BATCH_STATUS_P;

  FUNCTION C_THROUGH_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_THROUGH_DATE;
  END C_THROUGH_DATE_P;

  FUNCTION C_BATCH_STATUS_MEANING_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_STATUS_MEANING;
  END C_BATCH_STATUS_MEANING_P;

  FUNCTION C_BATCH_ACTIVE_CLOSED_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BATCH_ACTIVE_CLOSED;
  END C_BATCH_ACTIVE_CLOSED_P;

  FUNCTION C_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_YES;
  END C_YES_P;

  FUNCTION C_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO;
  END C_NO_P;

  FUNCTION C_RUN_VALIDATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RUN_VALIDATION;
  END C_RUN_VALIDATION_P;

  FUNCTION C_REPORT_ERRORS_ONLY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_ERRORS_ONLY;
  END C_REPORT_ERRORS_ONLY_P;

END PA_PAXARPVD_XMLP_PKG;


/
