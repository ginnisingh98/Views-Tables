--------------------------------------------------------
--  DDL for Package Body JA_JAINARDR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINARDR_XMLP_PKG" AS
/* $Header: JAINARDRB.pls 120.1 2007/12/25 16:12:13 dwkrishn noship $ */
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
    Y VARCHAR2(15);
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION OPEN_BAL_TRFORMULA(CUSTOMER_ID IN NUMBER
                             ,CURR_CODE IN VARCHAR2) RETURN NUMBER IS
    CURSOR GET_DEBIT_AMOUNT IS
      SELECT
        SUM((B.AMOUNT)) SUM_EXT_AMOUNT,
        SUM((B.AMOUNT) * NVL(A.EXCHANGE_RATE
               ,1))
      FROM
        RA_CUSTOMER_TRX_ALL A,
        AR_PAYMENT_SCHEDULES_ALL C,
        RA_CUST_TRX_LINE_GL_DIST_ALL B
      WHERE A.BILL_TO_CUSTOMER_ID = CUSTOMER_ID
        AND TRUNC(C.GL_DATE) < TRUNC(P_START_DATE)
        AND A.INVOICE_CURRENCY_CODE = CURR_CODE
        AND A.COMPLETE_FLAG = 'Y'
        AND B.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
        AND B.ACCOUNT_CLASS = LV_REC_ACCOUNT_CLASS
        AND B.LATEST_REC_FLAG = 'Y'
        AND A.CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID
        AND C.CLASS In ( LV_INV_CLASS , LV_DM_CLASS , LV_DEP_CLASS )
        AND A.ORG_ID = P_ORG_ID
        AND C.PAYMENT_SCHEDULE_ID IN (
        SELECT
          MIN(PAYMENT_SCHEDULE_ID)
        FROM
          AR_PAYMENT_SCHEDULES_ALL
        WHERE CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID );
    CURSOR GET_ADJUSTMENT_AMOUNT IS
      SELECT
        SUM((B.AMOUNT)) SUM_ADJ_AMOUNT,
        SUM((B.AMOUNT) * NVL(C.EXCHANGE_RATE
               ,1))
      FROM
        AR_ADJUSTMENTS_ALL B,
        RA_CUSTOMER_TRX_ALL C,
        AR_PAYMENT_SCHEDULES_ALL D,
        GL_CODE_COMBINATIONS E
      WHERE B.CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID
        AND C.BILL_TO_CUSTOMER_ID = CUSTOMER_ID
        AND E.CODE_COMBINATION_ID = B.CODE_COMBINATION_ID
        AND TRUNC(B.GL_DATE) < TRUNC(P_START_DATE)
        AND C.INVOICE_CURRENCY_CODE = CURR_CODE
        AND B.STATUS = 'A'
        AND B.CUSTOMER_TRX_ID = D.CUSTOMER_TRX_ID
        AND C.ORG_ID = P_ORG_ID
        AND D.PAYMENT_SCHEDULE_ID IN (
        SELECT
          MIN(PAYMENT_SCHEDULE_ID)
        FROM
          AR_PAYMENT_SCHEDULES_ALL
        WHERE CUSTOMER_TRX_ID = D.CUSTOMER_TRX_ID );
    CURSOR GET_CREDIT_AMOUNT IS
      SELECT
        SUM(A.AMOUNT) SUM_AMOUNT,
        SUM(A.AMOUNT * NVL(A.EXCHANGE_RATE
               ,1.00)) SUM_AMOUNT_EXCHANGE
      FROM
        AR_CASH_RECEIPTS_ALL A
      WHERE A.PAY_FROM_CUSTOMER = CUSTOMER_ID
        AND A.CURRENCY_CODE = CURR_CODE
        AND A.ORG_ID = P_ORG_ID
        AND EXISTS (
        SELECT
          1
        FROM
          AR_CASH_RECEIPT_HISTORY_ALL
        WHERE CASH_RECEIPT_ID = A.CASH_RECEIPT_ID
          AND ORG_ID = P_ORG_ID
          AND TRUNC(GL_DATE) < TRUNC(P_START_DATE) );
    CURSOR GET_REVERSAL_AMOUNT IS
      SELECT
        SUM(A.AMOUNT) SUM_AMOUNT,
        SUM(A.AMOUNT * NVL(A.EXCHANGE_RATE
               ,1.00)) SUM_AMOUNT_EXCHANGE
      FROM
        AR_CASH_RECEIPTS_ALL A,
        AR_CASH_RECEIPT_HISTORY_ALL B
      WHERE A.CASH_RECEIPT_ID = B.CASH_RECEIPT_ID
        AND A.PAY_FROM_CUSTOMER = CUSTOMER_ID
        AND TRUNC(B.GL_DATE) < TRUNC(P_START_DATE)
        AND A.REVERSAL_DATE is not null
        AND A.CURRENCY_CODE = CURR_CODE
        AND B.STATUS = LV_REV_STATUS
        AND A.ORG_ID = P_ORG_ID;
    CURSOR GET_DISCOUNT_CUR(CP_APP_TYPE IN AR_RECEIVABLE_APPLICATIONS_ALL.APPLICATION_TYPE%TYPE) IS
      SELECT
        NVL(SUM(ABS(NVL(D.EARNED_DISCOUNT_TAKEN
                       ,0)))
           ,0) SUM_AMOUNT,
        NVL(SUM(ABS(NVL(D.ACCTD_EARNED_DISCOUNT_TAKEN
                       ,0)))
           ,0) SUM_AMOUNT_EXCHANGE
      FROM
        RA_CUSTOMER_TRX_ALL B,
        AR_RECEIVABLE_APPLICATIONS_ALL D
      WHERE B.BILL_TO_CUSTOMER_ID = CUSTOMER_ID
        AND B.COMPLETE_FLAG = 'Y'
        AND TRUNC(D.GL_DATE) < TRUNC(P_START_DATE)
        AND D.APPLIED_CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE
        AND D.EARNED_DISCOUNT_TAKEN is not null
        AND D.EARNED_DISCOUNT_TAKEN <> 0
        AND B.ORG_ID = P_ORG_ID
        AND D.APPLICATION_TYPE = CP_APP_TYPE
        AND D.DISPLAY = 'Y';
    CURSOR C_EXCH_GAINLOSS_CR IS
      SELECT
        SUM(E.AMOUNT_CR) SUM_AMOUNT,
        SUM(E.ACCTD_AMOUNT_CR) SUM_EXCHANGE_AMOUNT
      FROM
        RA_CUSTOMER_TRX_ALL B,
        AR_CASH_RECEIPTS_ALL C,
        AR_RECEIVABLE_APPLICATIONS_ALL D,
        AR_DISTRIBUTIONS_ALL E
      WHERE B.CUSTOMER_TRX_ID = D.APPLIED_CUSTOMER_TRX_ID
        AND C.CASH_RECEIPT_ID = D.CASH_RECEIPT_ID
        AND E.SOURCE_ID = D.RECEIVABLE_APPLICATION_ID
        AND B.ORG_ID = P_ORG_ID
        AND E.SOURCE_TYPE IN ( LV_LOSS_SOURCE_TYPE , LV_GAIN_SOURCE_TYPE )
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE
        AND B.BILL_TO_CUSTOMER_ID = CUSTOMER_ID
        AND TRUNC(D.GL_DATE) < TRUNC(P_START_DATE);
    CURSOR C_EXCH_GAINLOSS_DR IS
      SELECT
        SUM(E.AMOUNT_DR) SUM_AMOUNT,
        SUM(E.ACCTD_AMOUNT_DR) SUM_EXCHANGE_AMOUNT
      FROM
        RA_CUSTOMER_TRX_ALL B,
        AR_CASH_RECEIPTS_ALL C,
        AR_RECEIVABLE_APPLICATIONS_ALL D,
        AR_DISTRIBUTIONS_ALL E
      WHERE B.CUSTOMER_TRX_ID = D.APPLIED_CUSTOMER_TRX_ID
        AND C.CASH_RECEIPT_ID = D.CASH_RECEIPT_ID
        AND E.SOURCE_ID = D.RECEIVABLE_APPLICATION_ID
        AND B.ORG_ID = P_ORG_ID
        AND E.SOURCE_TYPE IN ( LV_LOSS_SOURCE_TYPE , LV_GAIN_SOURCE_TYPE )
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE
        AND B.BILL_TO_CUSTOMER_ID = CUSTOMER_ID
        AND TRUNC(D.GL_DATE) < TRUNC(P_START_DATE);
    CURSOR C_RECEIPT_W_OFF IS
      SELECT
        SUM(C.AMOUNT_APPLIED) SUM_AMOUNT,
        SUM(C.AMOUNT_APPLIED * NVL(A.EXCHANGE_RATE
               ,1.00)) SUM_AMOUNT_EXCHANGE
      FROM
        AR_CASH_RECEIPTS_ALL A,
        AR_CASH_RECEIPT_HISTORY_ALL B,
        AR_RECEIVABLE_APPLICATIONS_ALL C
      WHERE A.PAY_FROM_CUSTOMER = CUSTOMER_ID
        AND TRUNC(B.GL_DATE) < TRUNC(P_START_DATE)
        AND A.CASH_RECEIPT_ID = B.CASH_RECEIPT_ID
        AND A.CASH_RECEIPT_ID = C.CASH_RECEIPT_ID
        AND C.CASH_RECEIPT_HISTORY_ID = B.CASH_RECEIPT_HISTORY_ID
        AND C.APPLIED_PAYMENT_SCHEDULE_ID = - 3
        AND C.STATUS = LV_ACT_STATUS
        AND A.CURRENCY_CODE = CURR_CODE
        AND B.REVERSAL_GL_DATE IS NULL
        AND B.CURRENT_RECORD_FLAG = 'Y'
        AND A.ORG_ID = P_ORG_ID
        AND not exists (
        SELECT
          1
        FROM
          AR_CASH_RECEIPT_HISTORY_ALL
        WHERE CASH_RECEIPT_ID = B.CASH_RECEIPT_ID
          AND STATUS = LV_REV_STATUS );
    V_TR_DR_AMT NUMBER;
    V_FUNC_DR_AMT NUMBER;
    V_TR_CR_AMT NUMBER;
    V_FUNC_CR_AMT NUMBER;
    V_TR_REV_AMT NUMBER;
    V_FUNC_REV_AMT NUMBER;
    V_TRAN_TOT_AMT NUMBER;
    V_FUNC_TOT_AMT NUMBER;
    V_TRAN_CL_BAL_DR NUMBER;
    V_CRE_MEMO_AMT NUMBER;
    V_CRE_MEMO_FUNC_AMT NUMBER;
    V_TR_ADJ_AMT NUMBER;
    V_FUNC_ADJ_AMT NUMBER;
    V_FUNC_GAIN_AMT NUMBER;
    V_FUNC_LOSS_AMT NUMBER;
    V_TRAN_LOSS_AMT NUMBER;
    V_TRAN_GAIN_AMT NUMBER;
    V_TRAN_RCP_W_OFF NUMBER;
    V_FUNC_RCP_W_OFF NUMBER;
    V_TR_DISC_CR_AMT NUMBER;
    V_FUNC_DISC_CR_AMT NUMBER;
  BEGIN
    SELECT
      SUM((B.AMOUNT)) SUM_EXT_AMOUNT,
      SUM((B.AMOUNT) * NVL(A.EXCHANGE_RATE
             ,1))
    INTO V_CRE_MEMO_AMT,V_CRE_MEMO_FUNC_AMT
    FROM
      RA_CUSTOMER_TRX_ALL A,
      AR_PAYMENT_SCHEDULES_ALL C,
      RA_CUST_TRX_LINE_GL_DIST_ALL B
    WHERE A.BILL_TO_CUSTOMER_ID = CUSTOMER_ID
      AND TRUNC(C.GL_DATE) < TRUNC(P_START_DATE)
      AND A.INVOICE_CURRENCY_CODE = CURR_CODE
      AND A.COMPLETE_FLAG = 'Y'
      AND B.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
      AND B.ACCOUNT_CLASS = LV_REC_ACCOUNT_CLASS
      AND B.LATEST_REC_FLAG = 'Y'
      AND A.CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID
      AND C.CLASS In ( LV_CM_CLASS )
      AND A.ORG_ID = P_ORG_ID
      AND C.PAYMENT_SCHEDULE_ID IN (
      SELECT
        MIN(PAYMENT_SCHEDULE_ID)
      FROM
        AR_PAYMENT_SCHEDULES_ALL
      WHERE CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID );
    OPEN GET_DEBIT_AMOUNT;
    FETCH GET_DEBIT_AMOUNT
     INTO V_TR_DR_AMT,V_FUNC_DR_AMT;
    CLOSE GET_DEBIT_AMOUNT;
    OPEN GET_CREDIT_AMOUNT;
    FETCH GET_CREDIT_AMOUNT
     INTO V_TR_CR_AMT,V_FUNC_CR_AMT;
    CLOSE GET_CREDIT_AMOUNT;
    OPEN GET_REVERSAL_AMOUNT;
    FETCH GET_REVERSAL_AMOUNT
     INTO V_TR_REV_AMT,V_FUNC_REV_AMT;
    CLOSE GET_REVERSAL_AMOUNT;
    OPEN GET_ADJUSTMENT_AMOUNT;
    FETCH GET_ADJUSTMENT_AMOUNT
     INTO V_TR_ADJ_AMT,V_FUNC_ADJ_AMT;
    CLOSE GET_ADJUSTMENT_AMOUNT;
    OPEN GET_DISCOUNT_CUR('CASH');
    FETCH GET_DISCOUNT_CUR
     INTO V_TR_DISC_CR_AMT,V_FUNC_DISC_CR_AMT;
    CLOSE GET_DISCOUNT_CUR;
    OPEN C_EXCH_GAINLOSS_DR;
    FETCH C_EXCH_GAINLOSS_DR
     INTO V_TRAN_GAIN_AMT,V_FUNC_GAIN_AMT;
    CLOSE C_EXCH_GAINLOSS_DR;
    OPEN C_EXCH_GAINLOSS_CR;
    FETCH C_EXCH_GAINLOSS_CR
     INTO V_TRAN_LOSS_AMT,V_FUNC_LOSS_AMT;
    CLOSE C_EXCH_GAINLOSS_CR;
    OPEN C_RECEIPT_W_OFF;
    FETCH C_RECEIPT_W_OFF
     INTO V_TRAN_RCP_W_OFF,V_FUNC_RCP_W_OFF;
    CLOSE C_RECEIPT_W_OFF;
    V_FUNC_TOT_AMT := (NVL(V_FUNC_DR_AMT
                         ,0) + NVL(V_CRE_MEMO_FUNC_AMT
                         ,0) + NVL(V_FUNC_REV_AMT
                         ,0) - NVL(V_FUNC_CR_AMT
                         ,0) + NVL(V_FUNC_RCP_W_OFF
                         ,0) + (NVL(V_FUNC_ADJ_AMT
                         ,0)) - NVL(V_FUNC_DISC_CR_AMT
                         ,0) - NVL(V_FUNC_GAIN_AMT
                         ,0) + NVL(V_FUNC_LOSS_AMT
                         ,0));
    V_TRAN_TOT_AMT := ((NVL(V_TR_DR_AMT
                         ,0)) + NVL(V_CRE_MEMO_AMT
                         ,0) + (NVL(V_TR_REV_AMT
                         ,0)) - NVL(V_TR_CR_AMT
                         ,0) + NVL(V_TRAN_RCP_W_OFF
                         ,0) - ABS(NVL(V_TR_ADJ_AMT
                             ,0)) - NVL(V_TR_DISC_CR_AMT
                         ,0));
    IF NVL(V_FUNC_TOT_AMT
       ,0) < 0 THEN
      FUNC_OPEN_BAL_CR := ABS(V_FUNC_TOT_AMT);
      FUNC_OPEN_BAL_DR := 0;
    ELSE
      FUNC_OPEN_BAL_CR := 0;
      FUNC_OPEN_BAL_DR := ABS(V_FUNC_TOT_AMT);
    END IF;
    IF NVL(V_TRAN_TOT_AMT
       ,0) < 0 THEN
      TRAN_OPEN_BAL_CR := ABS(NVL(V_TRAN_TOT_AMT
                                 ,0));
      RETURN (0);
    ELSE
      TRAN_OPEN_BAL_CR := 0;
      RETURN (ABS(NVL(V_TRAN_TOT_AMT
                    ,0)));
    END IF;
  END OPEN_BAL_TRFORMULA;
  FUNCTION FUNC_OPEN_BALFORMULA RETURN NUMBER IS
  BEGIN
    NULL;
  END FUNC_OPEN_BALFORMULA;
  FUNCTION CF_1FORMULA(CUSTOMER_ID2 IN NUMBER
                      ,CURR_CODE1 IN VARCHAR2) RETURN NUMBER IS
    CURSOR GET_DEBIT_AMOUNT IS
      SELECT
        SUM((B.AMOUNT)) SUM_EXT_AMOUNT,
        SUM((B.AMOUNT) * NVL(A.EXCHANGE_RATE
               ,1))
      FROM
        RA_CUSTOMER_TRX_ALL A,
        AR_PAYMENT_SCHEDULES_ALL C,
        RA_CUST_TRX_LINE_GL_DIST_ALL B
      WHERE A.BILL_TO_CUSTOMER_ID = CUSTOMER_ID2
        AND TRUNC(C.GL_DATE) <= TRUNC(P_END_DATE)
        AND A.INVOICE_CURRENCY_CODE = CURR_CODE1
        AND A.COMPLETE_FLAG = 'Y'
        AND B.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
        AND B.ACCOUNT_CLASS = LV_REC_ACCOUNT_CLASS
        AND B.LATEST_REC_FLAG = 'Y'
        AND A.CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID
        AND C.CLASS In ( LV_INV_CLASS , LV_DM_CLASS , LV_DEP_CLASS )
        AND A.ORG_ID = P_ORG_ID
        AND C.PAYMENT_SCHEDULE_ID IN (
        SELECT
          MIN(PAYMENT_SCHEDULE_ID)
        FROM
          AR_PAYMENT_SCHEDULES_ALL
        WHERE CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID );
    CURSOR GET_ADJUSTMENT_AMOUNT IS
      SELECT
        SUM((B.AMOUNT)) SUM_ADJ_AMOUNT,
        SUM((B.AMOUNT) * NVL(C.EXCHANGE_RATE
               ,1))
      FROM
        AR_ADJUSTMENTS_ALL B,
        RA_CUSTOMER_TRX_ALL C,
        AR_PAYMENT_SCHEDULES_ALL D,
        GL_CODE_COMBINATIONS E
      WHERE B.CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID
        AND E.CODE_COMBINATION_ID = B.CODE_COMBINATION_ID
        AND C.BILL_TO_CUSTOMER_ID = CUSTOMER_ID2
        AND TRUNC(B.GL_DATE) <= TRUNC(P_END_DATE)
        AND C.INVOICE_CURRENCY_CODE = CURR_CODE1
        AND B.STATUS = 'A'
        AND B.CUSTOMER_TRX_ID = D.CUSTOMER_TRX_ID
        AND C.ORG_ID = P_ORG_ID
        AND D.PAYMENT_SCHEDULE_ID IN (
        SELECT
          MIN(PAYMENT_SCHEDULE_ID)
        FROM
          AR_PAYMENT_SCHEDULES_ALL
        WHERE CUSTOMER_TRX_ID = D.CUSTOMER_TRX_ID );
    CURSOR GET_CREDIT_AMOUNT IS
      SELECT
        SUM(A.AMOUNT) SUM_AMOUNT,
        SUM(A.AMOUNT * NVL(A.EXCHANGE_RATE
               ,1.00)) SUM_AMOUNT_EXCHANGE
      FROM
        AR_CASH_RECEIPTS_ALL A
      WHERE A.PAY_FROM_CUSTOMER = CUSTOMER_ID2
        AND A.CURRENCY_CODE = CURR_CODE1
        AND A.ORG_ID = P_ORG_ID
        AND EXISTS (
        SELECT
          1
        FROM
          AR_CASH_RECEIPT_HISTORY_ALL
        WHERE CASH_RECEIPT_ID = A.CASH_RECEIPT_ID
          AND ORG_ID = P_ORG_ID
          AND TRUNC(GL_DATE) <= TRUNC(P_END_DATE) );
    CURSOR GET_REVERSAL_AMOUNT IS
      SELECT
        SUM(A.AMOUNT) SUM_AMOUNT,
        SUM(A.AMOUNT * NVL(A.EXCHANGE_RATE
               ,1.00)) SUM_AMOUNT_EXCHANGE
      FROM
        AR_CASH_RECEIPTS_ALL A,
        AR_CASH_RECEIPT_HISTORY_ALL B
      WHERE A.CASH_RECEIPT_ID = B.CASH_RECEIPT_ID
        AND A.PAY_FROM_CUSTOMER = CUSTOMER_ID2
        AND TRUNC(B.GL_DATE) <= TRUNC(P_END_DATE)
        AND A.REVERSAL_DATE is not null
        AND A.CURRENCY_CODE = CURR_CODE1
        AND B.STATUS = LV_REV_STATUS
        AND A.ORG_ID = P_ORG_ID;
    CURSOR GET_DISCOUNT_CUR(CP_APP_TYPE IN AR_RECEIVABLE_APPLICATIONS_ALL.APPLICATION_TYPE%TYPE) IS
      SELECT
        NVL(SUM(ABS(NVL(D.EARNED_DISCOUNT_TAKEN
                       ,0)))
           ,0) SUM_AMOUNT,
        NVL(SUM(ABS(NVL(D.ACCTD_EARNED_DISCOUNT_TAKEN
                       ,0)))
           ,0) SUM_AMOUNT_EXCHANGE
      FROM
        RA_CUSTOMER_TRX_ALL B,
        AR_RECEIVABLE_APPLICATIONS_ALL D
      WHERE B.BILL_TO_CUSTOMER_ID = CUSTOMER_ID2
        AND B.COMPLETE_FLAG = 'Y'
        AND TRUNC(D.GL_DATE) <= TRUNC(P_END_DATE)
        AND D.APPLIED_CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE1
        AND B.ORG_ID = P_ORG_ID
        AND D.EARNED_DISCOUNT_TAKEN is not null
        AND D.EARNED_DISCOUNT_TAKEN <> 0
        AND D.APPLICATION_TYPE = CP_APP_TYPE
        AND D.DISPLAY = 'Y';
    CURSOR C_EXCH_GAINLOSS_CR IS
      SELECT
        SUM(E.AMOUNT_CR) SUM_AMOUNT,
        SUM(E.ACCTD_AMOUNT_CR) SUM_EXCHANGE_AMOUNT
      FROM
        RA_CUSTOMER_TRX_ALL B,
        AR_CASH_RECEIPTS_ALL C,
        AR_RECEIVABLE_APPLICATIONS_ALL D,
        AR_DISTRIBUTIONS_ALL E
      WHERE B.CUSTOMER_TRX_ID = D.APPLIED_CUSTOMER_TRX_ID
        AND C.CASH_RECEIPT_ID = D.CASH_RECEIPT_ID
        AND E.SOURCE_ID = D.RECEIVABLE_APPLICATION_ID
        AND B.ORG_ID = P_ORG_ID
        AND E.SOURCE_TYPE IN ( LV_LOSS_SOURCE_TYPE , LV_GAIN_SOURCE_TYPE )
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE1
        AND B.BILL_TO_CUSTOMER_ID = CUSTOMER_ID2
        AND TRUNC(D.GL_DATE) <= TRUNC(P_END_DATE);
    CURSOR C_EXCH_GAINLOSS_DR IS
      SELECT
        SUM(E.AMOUNT_DR) SUM_AMOUNT,
        SUM(E.ACCTD_AMOUNT_DR) SUM_EXCHANGE_AMOUNT
      FROM
        RA_CUSTOMER_TRX_ALL B,
        AR_CASH_RECEIPTS_ALL C,
        AR_RECEIVABLE_APPLICATIONS_ALL D,
        AR_DISTRIBUTIONS_ALL E
      WHERE B.CUSTOMER_TRX_ID = D.APPLIED_CUSTOMER_TRX_ID
        AND C.CASH_RECEIPT_ID = D.CASH_RECEIPT_ID
        AND E.SOURCE_ID = D.RECEIVABLE_APPLICATION_ID
        AND B.ORG_ID = P_ORG_ID
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE1
        AND B.BILL_TO_CUSTOMER_ID = CUSTOMER_ID2
        AND TRUNC(D.GL_DATE) <= TRUNC(P_END_DATE)
        AND E.SOURCE_TYPE IN ( LV_LOSS_SOURCE_TYPE , LV_GAIN_SOURCE_TYPE );
    CURSOR C_RECEIPT_W_OFF IS
      SELECT
        SUM(C.AMOUNT_APPLIED) SUM_AMOUNT,
        SUM(C.AMOUNT_APPLIED * NVL(A.EXCHANGE_RATE
               ,1.00)) SUM_AMOUNT_EXCHANGE
      FROM
        AR_CASH_RECEIPTS_ALL A,
        AR_CASH_RECEIPT_HISTORY_ALL B,
        AR_RECEIVABLE_APPLICATIONS_ALL C
      WHERE A.PAY_FROM_CUSTOMER = CUSTOMER_ID2
        AND TRUNC(B.GL_DATE) <= TRUNC(P_END_DATE)
        AND A.CASH_RECEIPT_ID = B.CASH_RECEIPT_ID
        AND A.CASH_RECEIPT_ID = C.CASH_RECEIPT_ID
        AND C.CASH_RECEIPT_HISTORY_ID = B.CASH_RECEIPT_HISTORY_ID
        AND C.APPLIED_PAYMENT_SCHEDULE_ID = - 3
        AND C.STATUS = LV_ACT_STATUS
        AND A.CURRENCY_CODE = CURR_CODE1
        AND B.REVERSAL_GL_DATE IS NULL
        AND B.CURRENT_RECORD_FLAG = 'Y'
        AND A.ORG_ID = P_ORG_ID
        AND not exists (
        SELECT
          1
        FROM
          AR_CASH_RECEIPT_HISTORY_ALL
        WHERE CASH_RECEIPT_ID = B.CASH_RECEIPT_ID
          AND STATUS = LV_REV_STATUS );
    V_TR_DISC_CR_AMT NUMBER;
    V_FUNC_DISC_CR_AMT NUMBER;
    V_TR_DR_AMT NUMBER;
    V_FUNC_DR_AMT NUMBER;
    V_TR_CR_AMT NUMBER;
    V_FUNC_CR_AMT NUMBER;
    V_TR_REV_AMT NUMBER;
    V_FUNC_REV_AMT NUMBER;
    V_TRAN_TOT_AMT NUMBER;
    V_FUNC_TOT_AMT NUMBER;
    V_TRAN_CL_BAL_DR NUMBER;
    V_CRE_MEMO_AMT NUMBER;
    V_CRE_MEMO_FUNC_AMT NUMBER;
    V_TR_ADJ_AMT NUMBER;
    V_FUNC_ADJ_AMT NUMBER;
    V_FUNC_GAIN_AMT NUMBER;
    V_FUNC_LOSS_AMT NUMBER;
    V_TRAN_LOSS_AMT NUMBER;
    V_TRAN_GAIN_AMT NUMBER;
    V_TRAN_RCP_W_OFF NUMBER;
    V_FUNC_RCP_W_OFF NUMBER;
  BEGIN
    SELECT
      SUM((B.AMOUNT)) SUM_EXT_AMOUNT,
      SUM((B.AMOUNT) * NVL(A.EXCHANGE_RATE
             ,1))
    INTO V_CRE_MEMO_AMT,V_CRE_MEMO_FUNC_AMT
    FROM
      RA_CUSTOMER_TRX_ALL A,
      AR_PAYMENT_SCHEDULES_ALL C,
      RA_CUST_TRX_LINE_GL_DIST_ALL B
    WHERE A.BILL_TO_CUSTOMER_ID = CUSTOMER_ID2
      AND TRUNC(C.GL_DATE) <= TRUNC(P_END_DATE)
      AND A.INVOICE_CURRENCY_CODE = CURR_CODE1
      AND A.COMPLETE_FLAG = 'Y'
      AND B.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
      AND B.ACCOUNT_CLASS = LV_REC_ACCOUNT_CLASS
      AND B.LATEST_REC_FLAG = 'Y'
      AND A.CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID
      AND C.CLASS In ( LV_CM_CLASS )
      AND A.ORG_ID = P_ORG_ID
      AND C.PAYMENT_SCHEDULE_ID IN (
      SELECT
        MIN(PAYMENT_SCHEDULE_ID)
      FROM
        AR_PAYMENT_SCHEDULES_ALL
      WHERE CUSTOMER_TRX_ID = C.CUSTOMER_TRX_ID );
    OPEN GET_DEBIT_AMOUNT;
    FETCH GET_DEBIT_AMOUNT
     INTO V_TR_DR_AMT,V_FUNC_DR_AMT;
    CLOSE GET_DEBIT_AMOUNT;
    OPEN GET_CREDIT_AMOUNT;
    FETCH GET_CREDIT_AMOUNT
     INTO V_TR_CR_AMT,V_FUNC_CR_AMT;
    CLOSE GET_CREDIT_AMOUNT;
    OPEN GET_REVERSAL_AMOUNT;
    FETCH GET_REVERSAL_AMOUNT
     INTO V_TR_REV_AMT,V_FUNC_REV_AMT;
    CLOSE GET_REVERSAL_AMOUNT;
    OPEN GET_ADJUSTMENT_AMOUNT;
    FETCH GET_ADJUSTMENT_AMOUNT
     INTO V_TR_ADJ_AMT,V_FUNC_ADJ_AMT;
    CLOSE GET_ADJUSTMENT_AMOUNT;
    OPEN GET_DISCOUNT_CUR('CASH');
    FETCH GET_DISCOUNT_CUR
     INTO V_TR_DISC_CR_AMT,V_FUNC_DISC_CR_AMT;
    CLOSE GET_DISCOUNT_CUR;
    OPEN C_EXCH_GAINLOSS_DR;
    FETCH C_EXCH_GAINLOSS_DR
     INTO V_TRAN_GAIN_AMT,V_FUNC_GAIN_AMT;
    CLOSE C_EXCH_GAINLOSS_DR;
    OPEN C_EXCH_GAINLOSS_CR;
    FETCH C_EXCH_GAINLOSS_CR
     INTO V_TRAN_LOSS_AMT,V_FUNC_LOSS_AMT;
    CLOSE C_EXCH_GAINLOSS_CR;
    OPEN C_RECEIPT_W_OFF;
    FETCH C_RECEIPT_W_OFF
     INTO V_TRAN_RCP_W_OFF,V_FUNC_RCP_W_OFF;
    CLOSE C_RECEIPT_W_OFF;
    V_FUNC_TOT_AMT := ((NVL(V_FUNC_DR_AMT
                         ,0) + NVL(V_CRE_MEMO_FUNC_AMT
                         ,0) + NVL(V_FUNC_REV_AMT
                         ,0)) - NVL(V_FUNC_CR_AMT
                         ,0) + NVL(V_FUNC_RCP_W_OFF
                         ,0) + (NVL(V_FUNC_ADJ_AMT
                         ,0)) - NVL(V_FUNC_DISC_CR_AMT
                         ,0) - NVL(V_FUNC_GAIN_AMT
                         ,0) + NVL(V_FUNC_LOSS_AMT
                         ,0));
    V_TRAN_TOT_AMT := ((NVL(V_TR_DR_AMT
                         ,0)) + NVL(V_CRE_MEMO_AMT
                         ,0) + (NVL(V_TR_REV_AMT
                         ,0)) - NVL(V_TR_CR_AMT
                         ,0) + NVL(V_TRAN_RCP_W_OFF
                         ,0) - ABS(NVL(V_TR_ADJ_AMT
                             ,0)) - NVL(V_TR_DISC_CR_AMT
                         ,0));
    IF NVL(V_FUNC_TOT_AMT
       ,0) < 0 THEN
      FUNC_CLOSING_BAL_CR := ABS(V_FUNC_TOT_AMT);
      FUNC_CLOSING_BAL_DR := 0;
    ELSE
      FUNC_CLOSING_BAL_CR := 0;
      FUNC_CLOSING_BAL_DR := ABS(V_FUNC_TOT_AMT);
    END IF;
    IF NVL(V_TRAN_TOT_AMT
       ,0) < 0 THEN
      TRAN_CLOSING_BAL_CR := ABS(NVL(V_TRAN_TOT_AMT
                                    ,0));
      RETURN (0);
    ELSE
      TRAN_CLOSING_BAL_CR := 0;
      RETURN (ABS(NVL(V_TRAN_TOT_AMT
                    ,0)));
    END IF;
  END CF_1FORMULA;
  FUNCTION CF_1FORMULA0031(CUSTOMER_TRX_ID_1 IN NUMBER) RETURN CHAR IS
    CURSOR GET_ORDER_DETAILS IS
      SELECT
        INTERFACE_HEADER_ATTRIBUTE1
      FROM
        RA_CUSTOMER_TRX_ALL
      WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID_1
        AND NVL(CREATED_FROM
         ,'###') = 'RAXTRX';
    V_ORDER_NUMBER VARCHAR2(30);
  BEGIN
    IF CUSTOMER_TRX_ID_1 IS NOT NULL AND CUSTOMER_TRX_ID_1 <> 0 THEN
      OPEN GET_ORDER_DETAILS;
      FETCH GET_ORDER_DETAILS
       INTO V_ORDER_NUMBER;
      IF GET_ORDER_DETAILS%NOTFOUND THEN
        V_ORDER_NUMBER := ' ';
      END IF;
      CLOSE GET_ORDER_DETAILS;
    END IF;
    RETURN V_ORDER_NUMBER;
  END CF_1FORMULA0031;
  FUNCTION ACCOUNT_CODEFORMULA(ACCOUNT_ID IN NUMBER) RETURN CHAR IS
    V_ACCOUNT_CODE VARCHAR2(1000);
  BEGIN
    JAI_CMN_GL_PKG.GET_ACCOUNT_NUMBER(P_CHART_OF_ACCOUNTS_ID
                                     ,ACCOUNT_ID
                                     ,V_ACCOUNT_CODE);
    IF V_ACCOUNT_CODE IS NOT NULL THEN
      RETURN (V_ACCOUNT_CODE);
    ELSE
      RETURN ('N.A.');
    END IF;
  END ACCOUNT_CODEFORMULA;
  FUNCTION CF_1FORMULA0034(CUSTOMER_ID IN NUMBER) RETURN CHAR IS
    CURSOR GET_CREDIT_RATING IS
      SELECT
        DISTINCT
        CPC.NAME PROFILE_CLASS_NAME
      FROM
        HZ_CUST_ACCOUNTS CUST_ACCT,
        HZ_PARTIES CUST_PARTY,
        HZ_CUST_PROFILE_CLASSES CPC,
        HZ_CUSTOMER_PROFILES CP
      WHERE CUST_ACCT.PARTY_ID = CUST_PARTY.PARTY_ID
        AND CP.CUST_ACCOUNT_ID = CUST_ACCT.CUST_ACCOUNT_ID
        AND CP.PROFILE_CLASS_ID = CPC.PROFILE_CLASS_ID (+)
        AND CUST_ACCT.CUST_ACCOUNT_ID = CUSTOMER_ID;
    V_CREDIT_RATING VARCHAR2(30);
  BEGIN
    OPEN GET_CREDIT_RATING;
    FETCH GET_CREDIT_RATING
     INTO V_CREDIT_RATING;
    IF GET_CREDIT_RATING%NOTFOUND THEN
      V_CREDIT_RATING := '  ';
    END IF;
    CLOSE GET_CREDIT_RATING;
    RETURN V_CREDIT_RATING;
  END CF_1FORMULA0034;
  FUNCTION CF_1FORMULA0037(TYPE IN VARCHAR2
                          ,AMOUNT IN NUMBER
                          ,AMOUNT_OTHER_CURRENCY IN NUMBER
                          ,REMARKS IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF NVL(TYPE
       ,'##') in ('INV','DM','REV','DEP') AND AMOUNT > 0 THEN
      FUNC_DR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      TRAN_CR_AMT := 0;
      FUNC_CR_AMT := 0;
      RETURN (NVL(ABS(AMOUNT)
                ,0));
    ELSIF NVL(TYPE
       ,'##') in ('INV','DM','REV','DEP') AND AMOUNT <= 0 THEN
      FUNC_CR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      TRAN_CR_AMT := NVL(ABS(AMOUNT)
                        ,0);
      FUNC_DR_AMT := 0;
    ELSIF NVL(TYPE
       ,'##') in ('CM','REC') THEN
      TRAN_CR_AMT := NVL(ABS(AMOUNT)
                        ,0);
      FUNC_CR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      FUNC_DR_AMT := 0;
      RETURN (0);
    ELSIF NVL(TYPE
       ,'##') in ('ADJ') AND AMOUNT <= 0 THEN
      TRAN_CR_AMT := NVL(ABS(AMOUNT)
                        ,0);
      FUNC_CR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      FUNC_DR_AMT := 0;
      RETURN (0);
    ELSIF NVL(TYPE
       ,'##') in ('ADJ') AND AMOUNT > 0 THEN
      FUNC_DR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      FUNC_CR_AMT := 0;
      TRAN_CR_AMT := 0;
      RETURN (NVL(ABS(AMOUNT)
                ,0));
    ELSIF NVL(TYPE
       ,'##') in ('W/O') AND AMOUNT <= 0 THEN
      TRAN_CR_AMT := NVL(ABS(AMOUNT)
                        ,0);
      FUNC_CR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      FUNC_DR_AMT := 0;
      RETURN (0);
    ELSIF NVL(TYPE
       ,'##') in ('W/O') AND AMOUNT > 0 THEN
      FUNC_DR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      FUNC_CR_AMT := 0;
      TRAN_CR_AMT := 0;
      RETURN (NVL(ABS(AMOUNT)
                ,0));
    ELSIF NVL(TYPE
       ,'##') in ('DSC') THEN
      TRAN_CR_AMT := NVL(ABS(AMOUNT)
                        ,0);
      FUNC_CR_AMT := NVL(ABS(AMOUNT_OTHER_CURRENCY)
                        ,0);
      FUNC_DR_AMT := 0;
      RETURN (0);
    ELSIF NVL(TYPE
       ,'##') in ('EXCH_GAIN','EXCH_LOSS') THEN
      TRAN_CR_AMT := 0;
      IF REMARKS = 'CR' THEN
        FUNC_CR_AMT := 0;
        FUNC_DR_AMT := NVL(AMOUNT_OTHER_CURRENCY
                          ,0);
      ELSIF REMARKS = 'DR' THEN
        FUNC_DR_AMT := 0;
        FUNC_CR_AMT := NVL(AMOUNT_OTHER_CURRENCY
                          ,0);
      END IF;
      RETURN (0);
    END IF;
    RETURN (0);
  END CF_1FORMULA0037;
  FUNCTION CF_1FORMULA0040 RETURN CHAR IS
    CURSOR GET_ORGANIZATION_NAME IS
      SELECT
        ORGANIZATION_NAME
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = P_ORG_ID;
    CURSOR GET_LOCATION_DETAILS IS
      SELECT
        LOCATION_ID,
        ADDRESS_LINE_1,
        ADDRESS_LINE_2,
        ADDRESS_LINE_3,
        COUNTRY
      FROM
        HR_ORGANIZATION_UNITS_V
      WHERE ORGANIZATION_ID = P_ORG_ID;
    CURSOR GET_LOCATION_NAME(V_LOC_ID IN NUMBER) IS
      SELECT
        DESCRIPTION
      FROM
        HR_LOCATIONS
      WHERE LOCATION_ID = V_LOC_ID;
    V_ORG_NAME VARCHAR2(60);
    V_LOC_ID NUMBER;
  BEGIN
    OPEN GET_ORGANIZATION_NAME;
    FETCH GET_ORGANIZATION_NAME
     INTO V_ORG_NAME;
    CLOSE GET_ORGANIZATION_NAME;
    OPEN GET_LOCATION_DETAILS;
    FETCH GET_LOCATION_DETAILS
     INTO V_LOC_ID,ADD1,ADD2,ADD3,COUNTRY;
    CLOSE GET_LOCATION_DETAILS;
    OPEN GET_LOCATION_NAME(V_LOC_ID);
    FETCH GET_LOCATION_NAME
     INTO LOC_NAME;
    CLOSE GET_LOCATION_NAME;
    RETURN (V_ORG_NAME);
  END CF_1FORMULA0040;
  FUNCTION DESCRIPTIONFORMULA(ACCOUNT_ID IN NUMBER) RETURN CHAR IS
    CURSOR GET_APP_COLUMN_NAME(CP_ID_FLEX_CODE IN FND_SEGMENT_ATTRIBUTE_VALUES.ID_FLEX_CODE%TYPE,CP_SEG_ATT_TYPE IN FND_SEGMENT_ATTRIBUTE_VALUES.SEGMENT_ATTRIBUTE_TYPE%TYPE) IS
      SELECT
        DISTINCT
        APPLICATION_COLUMN_NAME
      FROM
        FND_SEGMENT_ATTRIBUTE_VALUES
      WHERE APPLICATION_ID = 101
        AND ID_FLEX_CODE = CP_ID_FLEX_CODE
        AND ID_FLEX_NUM = P_CHART_OF_ACCOUNTS_ID
        AND SEGMENT_ATTRIBUTE_TYPE = CP_SEG_ATT_TYPE
        AND ATTRIBUTE_VALUE = 'Y';
    CURSOR FLEX_VAL_SET_ID(V_COLUMN_NAME IN VARCHAR2,CP_ID_FLEX_CODE IN FND_SEGMENT_ATTRIBUTE_VALUES.ID_FLEX_CODE%TYPE) IS
      SELECT
        A.FLEX_VALUE_SET_ID
      FROM
        FND_ID_FLEX_SEGMENTS A
      WHERE A.APPLICATION_COLUMN_NAME = V_COLUMN_NAME
        AND A.APPLICATION_ID = 101
        AND A.ID_FLEX_CODE = CP_ID_FLEX_CODE
        AND A.ID_FLEX_NUM = P_CHART_OF_ACCOUNTS_ID;
    V_COLUMN_NAME VARCHAR2(30);
    V_COLUMN_VALUE VARCHAR2(30);
    V_FLEX_ID NUMBER;
    V_DESCRIPTION VARCHAR2(100);
    CURSOR GET_DESCRIPTION IS
      SELECT
        SUBSTR(DESCRIPTION
              ,1
              ,15)
      FROM
        FND_FLEX_VALUES_VL
      WHERE FLEX_VALUE_SET_ID = V_FLEX_ID
        AND FLEX_VALUE = V_COLUMN_VALUE;
  BEGIN
    OPEN GET_APP_COLUMN_NAME('GL#','GL_ACCOUNT');
    FETCH GET_APP_COLUMN_NAME
     INTO V_COLUMN_NAME;
    CLOSE GET_APP_COLUMN_NAME;
    IF V_COLUMN_NAME IS NULL THEN
      V_COLUMN_NAME := 'SEGMENT3';
    END IF;
    OPEN FLEX_VAL_SET_ID(V_COLUMN_NAME,'GL#');
    FETCH FLEX_VAL_SET_ID
     INTO V_FLEX_ID;
    CLOSE FLEX_VAL_SET_ID;
    EXECUTE IMMEDIATE
      	'select ' || V_COLUMN_NAME || ' from gl_code_combinations
      		where chart_of_accounts_id = :P_CHART_OF_ACCOUNTS_ID AND code_combination_id = :account_id'
	        INTO p_column_value
		USING P_CHART_OF_ACCOUNTS_ID,account_id  ;
    V_COLUMN_VALUE := P_COLUMN_VALUE;
    OPEN GET_DESCRIPTION;
    FETCH GET_DESCRIPTION
     INTO V_DESCRIPTION;
    CLOSE GET_DESCRIPTION;
    RETURN (V_DESCRIPTION);
  END DESCRIPTIONFORMULA;
  FUNCTION CF_1FORMULA0038(FUNC_OP_BAL_TOT_DR IN NUMBER
                          ,FUNC_OP_BAL_TOT_CR IN NUMBER) RETURN NUMBER IS
    V_BAL NUMBER := 0;
  BEGIN
    V_BAL := NVL(FUNC_OP_BAL_TOT_DR
                ,0) - NVL(FUNC_OP_BAL_TOT_CR
                ,0);
    IF V_BAL < 0 THEN
      OP_TOT_CR := ABS(V_BAL);
      RETURN (0);
    ELSE
      OP_TOT_CR := 0;
      RETURN (NVL(ABS(V_BAL)
                ,0));
    END IF;
  END CF_1FORMULA0038;
  FUNCTION CL_TOT_DRFORMULA(FUNC_CL_BAL_DR IN NUMBER
                           ,FUNC_CL_BAL_CR IN NUMBER) RETURN NUMBER IS
    V_BAL NUMBER := 0;
  BEGIN
    V_BAL := NVL(FUNC_CL_BAL_DR
                ,0) - NVL(FUNC_CL_BAL_CR
                ,0);
    IF V_BAL < 0 THEN
      CL_TOT_CR := ABS(V_BAL);
      RETURN (0);
    ELSE
      CL_TOT_CR := 0;
      RETURN (ABS(NVL(V_BAL
                    ,0)));
    END IF;
  END CL_TOT_DRFORMULA;
  FUNCTION CF_1FORMULA0057(CS_1 IN NUMBER
                          ,CS_2 IN NUMBER) RETURN NUMBER IS
    V_NET_TOTAL NUMBER;
  BEGIN
    V_NET_TOTAL := NVL(NVL(CS_1
                          ,0) - NVL(CS_2
                          ,0)
                      ,0);
    RETURN (NVL(V_NET_TOTAL
              ,0));
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(1
                 ,'NO DATA ')*/NULL;
  END CF_1FORMULA0057;
  FUNCTION CF_EXCISE_INVFORMULA(CUSTOMER_TRX_ID_1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      V_EXCISE_INV_NO VARCHAR2(100);
    BEGIN
      IF CUSTOMER_TRX_ID_1 <> 0 THEN
        SELECT
          A.EXCISE_INVOICE_NO
        INTO V_EXCISE_INV_NO
        FROM
          JAI_AR_TRX_LINES A
        WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID_1
          AND A.EXCISE_INVOICE_NO IS NOT NULL
          AND ROWNUM = 1;
        CP_EXCISE_INV_NO := V_EXCISE_INV_NO;
      ELSE
        CP_EXCISE_INV_NO := '';
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CP_EXCISE_INV_NO := '';
        RETURN (0);
      WHEN OTHERS THEN
        CP_EXCISE_INV_NO := '';
        RETURN (0);
    END;
    RETURN (0);
  END CF_EXCISE_INVFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    V_AUDSID NUMBER := USERENV('SESSIONID');
    V_SID NUMBER;
    V_SERIAL NUMBER;
    V_SPID VARCHAR2(9);
    V_DBNAME VARCHAR2(25);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
P_START_DATE1 := to_Char(P_START_DATE,'DD-MM-YYYY');
P_END_DATE1 := to_Char(P_END_DATE,'DD-MM-YYYY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.3 Last modified date is 02/09/2005')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO V_SID,V_SERIAL,V_SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO V_DBNAME;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(1275
                   ,'TraceFile Name = ' || LOWER(V_DBNAME) || '_ora_' || V_SPID || '.trc')*/NULL;
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION OP_TOT_CR_P RETURN NUMBER IS
  BEGIN
    RETURN OP_TOT_CR;
  END OP_TOT_CR_P;
  FUNCTION CL_TOT_CR_P RETURN NUMBER IS
  BEGIN
    RETURN CL_TOT_CR;
  END CL_TOT_CR_P;
  FUNCTION TRAN_OPEN_BAL_CR_P RETURN NUMBER IS
  BEGIN
    RETURN TRAN_OPEN_BAL_CR;
  END TRAN_OPEN_BAL_CR_P;
  FUNCTION FUNC_OPEN_BAL_DR_P RETURN NUMBER IS
  BEGIN
    RETURN FUNC_OPEN_BAL_DR;
  END FUNC_OPEN_BAL_DR_P;
  FUNCTION FUNC_OPEN_BAL_CR_P RETURN NUMBER IS
  BEGIN
    RETURN FUNC_OPEN_BAL_CR;
  END FUNC_OPEN_BAL_CR_P;
  FUNCTION CP_EXCISE_INV_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_EXCISE_INV_NO;
  END CP_EXCISE_INV_NO_P;
  FUNCTION TRAN_CR_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN TRAN_CR_AMT;
  END TRAN_CR_AMT_P;
  FUNCTION FUNC_DR_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN FUNC_DR_AMT;
  END FUNC_DR_AMT_P;
  FUNCTION FUNC_CR_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN FUNC_CR_AMT;
  END FUNC_CR_AMT_P;
  FUNCTION TRAN_CLOSING_BAL_CR_P RETURN NUMBER IS
  BEGIN
    RETURN TRAN_CLOSING_BAL_CR;
  END TRAN_CLOSING_BAL_CR_P;
  FUNCTION FUNC_CLOSING_BAL_DR_P RETURN NUMBER IS
  BEGIN
    RETURN FUNC_CLOSING_BAL_DR;
  END FUNC_CLOSING_BAL_DR_P;
  FUNCTION FUNC_CLOSING_BAL_CR_P RETURN NUMBER IS
  BEGIN
    RETURN FUNC_CLOSING_BAL_CR;
  END FUNC_CLOSING_BAL_CR_P;
  FUNCTION ADD1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ADD1;
  END ADD1_P;
  FUNCTION ADD2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ADD2;
  END ADD2_P;
  FUNCTION ADD3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ADD3;
  END ADD3_P;
  FUNCTION COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN COUNTRY;
  END COUNTRY_P;
  FUNCTION LOC_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOC_NAME;
  END LOC_NAME_P;
END JA_JAINARDR_XMLP_PKG;



/
