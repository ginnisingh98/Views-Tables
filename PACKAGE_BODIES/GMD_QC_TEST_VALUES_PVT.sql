--------------------------------------------------------
--  DDL for Package Body GMD_QC_TEST_VALUES_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_QC_TEST_VALUES_PVT" as
/* $Header: GMDVTVLB.pls 115.4 2002/12/03 17:13:24 cnagarba noship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy ROWID,
  X_TEST_VALUE_ID in out nocopy NUMBER,
  X_TEST_ID in NUMBER,
  X_MIN_NUM in NUMBER ,
  X_MAX_NUM in NUMBER ,
  X_VALUE_CHAR in VARCHAR2 ,
  X_TEXT_RANGE_SEQ in NUMBER ,
  X_EXPRESSION_REF_TEST_ID in NUMBER ,
  X_TEXT_CODE in NUMBER ,
  X_ATTRIBUTE_CATEGORY in VARCHAR2 ,
  X_ATTRIBUTE1 in VARCHAR2 ,
  X_ATTRIBUTE2 in VARCHAR2 ,
  X_ATTRIBUTE3 in VARCHAR2 ,
  X_ATTRIBUTE4 in VARCHAR2 ,
  X_ATTRIBUTE5 in VARCHAR2 ,
  X_ATTRIBUTE6 in VARCHAR2 ,
  X_ATTRIBUTE7 in VARCHAR2 ,
  X_ATTRIBUTE8 in VARCHAR2 ,
  X_ATTRIBUTE9 in VARCHAR2 ,
  X_ATTRIBUTE10 in VARCHAR2 ,
  X_ATTRIBUTE11 in VARCHAR2 ,
  X_ATTRIBUTE12 in VARCHAR2 ,
  X_ATTRIBUTE13 in VARCHAR2 ,
  X_ATTRIBUTE14 in VARCHAR2 ,
  X_ATTRIBUTE15 in VARCHAR2 ,
  X_ATTRIBUTE16 in VARCHAR2 ,
  X_ATTRIBUTE17 in VARCHAR2 ,
  X_ATTRIBUTE18 in VARCHAR2 ,
  X_ATTRIBUTE19 in VARCHAR2 ,
  X_ATTRIBUTE20 in VARCHAR2 ,
  X_ATTRIBUTE21 in VARCHAR2 ,
  X_ATTRIBUTE22 in VARCHAR2 ,
  X_ATTRIBUTE23 in VARCHAR2 ,
  X_ATTRIBUTE24 in VARCHAR2 ,
  X_ATTRIBUTE25 in VARCHAR2 ,
  X_ATTRIBUTE26 in VARCHAR2 ,
  X_ATTRIBUTE27 in VARCHAR2 ,
  X_ATTRIBUTE28 in VARCHAR2 ,
  X_ATTRIBUTE29 in VARCHAR2 ,
  X_ATTRIBUTE30 in VARCHAR2 ,
  X_DISPLAY_LABEL_NUMERIC_RANGE in VARCHAR2 ,
  X_TEST_VALUE_DESC in VARCHAR2 ,
  X_CREATION_DATE in DATE ,
  X_CREATED_BY in NUMBER ,
  X_LAST_UPDATE_DATE in DATE ,
  X_LAST_UPDATED_BY in NUMBER ,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from GMD_QC_TEST_VALUES_B
    where TEST_VALUE_ID = X_TEST_VALUE_ID
    ;
begin

  IF X_TEST_VALUE_ID IS NULL THEN
     SELECT GMD_QC_TEST_VALUE_ID_S.NEXTVAL INTO X_TEST_VALUE_ID FROM DUAL;
  END IF;

  insert into GMD_QC_TEST_VALUES_B (
    TEST_VALUE_ID,
    TEST_ID,
    MIN_NUM,
    MAX_NUM,
    VALUE_CHAR,
    TEXT_RANGE_SEQ,
    EXPRESSION_REF_TEST_ID,
    TEXT_CODE,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE16,
    ATTRIBUTE17,
    ATTRIBUTE18,
    ATTRIBUTE19,
    ATTRIBUTE20,
    ATTRIBUTE21,
    ATTRIBUTE22,
    ATTRIBUTE23,
    ATTRIBUTE24,
    ATTRIBUTE25,
    ATTRIBUTE26,
    ATTRIBUTE27,
    ATTRIBUTE28,
    ATTRIBUTE29,
    ATTRIBUTE30,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_TEST_VALUE_ID,
    X_TEST_ID,
    X_MIN_NUM,
    X_MAX_NUM,
    X_VALUE_CHAR,
    X_TEXT_RANGE_SEQ,
    X_EXPRESSION_REF_TEST_ID,
    X_TEXT_CODE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_ATTRIBUTE16,
    X_ATTRIBUTE17,
    X_ATTRIBUTE18,
    X_ATTRIBUTE19,
    X_ATTRIBUTE20,
    X_ATTRIBUTE21,
    X_ATTRIBUTE22,
    X_ATTRIBUTE23,
    X_ATTRIBUTE24,
    X_ATTRIBUTE25,
    X_ATTRIBUTE26,
    X_ATTRIBUTE27,
    X_ATTRIBUTE28,
    X_ATTRIBUTE29,
    X_ATTRIBUTE30,
    NVL(X_CREATION_DATE,SYSDATE),
    NVL(X_CREATED_BY,FND_GLOBAL.USER_ID),
    NVL(X_LAST_UPDATE_DATE,SYSDATE),
    NVL(X_LAST_UPDATED_BY,FND_GLOBAL.USER_ID),
    NVL(X_LAST_UPDATE_LOGIN,FND_GLOBAL.LOGIN_ID)
  );

  insert into GMD_QC_TEST_VALUES_TL (
    TEST_VALUE_ID,
    DISPLAY_LABEL_NUMERIC_RANGE,
    TEST_VALUE_DESC,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_TEST_VALUE_ID,
    X_DISPLAY_LABEL_NUMERIC_RANGE,
    X_TEST_VALUE_DESC,
    NVL(X_CREATION_DATE,SYSDATE),
    NVL(X_CREATED_BY,FND_GLOBAL.USER_ID),
    NVL(X_LAST_UPDATED_BY,FND_GLOBAL.USER_ID),
    NVL(X_LAST_UPDATE_DATE,SYSDATE),
    NVL(X_LAST_UPDATE_LOGIN,FND_GLOBAL.LOGIN_ID),
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from GMD_QC_TEST_VALUES_TL T
    where T.TEST_VALUE_ID = X_TEST_VALUE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

FUNCTION INSERT_ROW(p_qc_test_values_rec IN OUT NOCOPY GMD_QC_TEST_VALUES%ROWTYPE) RETURN BOOLEAN IS
l_rowid		ROWID;
BEGIN
  GMD_QC_TEST_VALUES_PVT.INSERT_ROW(
    X_ROWID => l_rowid,
    X_TEST_VALUE_ID => p_qc_test_values_rec.TEST_VALUE_ID,
    X_TEST_ID => p_qc_test_values_rec.TEST_ID,
    X_MIN_NUM => p_qc_test_values_rec.MIN_NUM,
    X_MAX_NUM => p_qc_test_values_rec.MAX_NUM,
    X_VALUE_CHAR => p_qc_test_values_rec.VALUE_CHAR,
    X_TEXT_RANGE_SEQ => p_qc_test_values_rec.TEXT_RANGE_SEQ,
    X_EXPRESSION_REF_TEST_ID => p_qc_test_values_rec.EXPRESSION_REF_TEST_ID,
    X_TEXT_CODE => p_qc_test_values_rec.TEXT_CODE,
    X_ATTRIBUTE_CATEGORY => p_qc_test_values_rec.ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1 => p_qc_test_values_rec.ATTRIBUTE1,
    X_ATTRIBUTE2 => p_qc_test_values_rec.ATTRIBUTE2,
    X_ATTRIBUTE3 => p_qc_test_values_rec.ATTRIBUTE3,
    X_ATTRIBUTE4 => p_qc_test_values_rec.ATTRIBUTE4,
    X_ATTRIBUTE5 => p_qc_test_values_rec.ATTRIBUTE5,
    X_ATTRIBUTE6 => p_qc_test_values_rec.ATTRIBUTE6,
    X_ATTRIBUTE7 => p_qc_test_values_rec.ATTRIBUTE7,
    X_ATTRIBUTE8 => p_qc_test_values_rec.ATTRIBUTE8,
    X_ATTRIBUTE9 => p_qc_test_values_rec.ATTRIBUTE9,
    X_ATTRIBUTE10 => p_qc_test_values_rec.ATTRIBUTE10,
    X_ATTRIBUTE11 => p_qc_test_values_rec.ATTRIBUTE11,
    X_ATTRIBUTE12 => p_qc_test_values_rec.ATTRIBUTE12,
    X_ATTRIBUTE13 => p_qc_test_values_rec.ATTRIBUTE13,
    X_ATTRIBUTE14 => p_qc_test_values_rec.ATTRIBUTE14,
    X_ATTRIBUTE15 => p_qc_test_values_rec.ATTRIBUTE15,
    X_ATTRIBUTE16 => p_qc_test_values_rec.ATTRIBUTE16,
    X_ATTRIBUTE17 => p_qc_test_values_rec.ATTRIBUTE17,
    X_ATTRIBUTE18 => p_qc_test_values_rec.ATTRIBUTE18,
    X_ATTRIBUTE19 => p_qc_test_values_rec.ATTRIBUTE19,
    X_ATTRIBUTE20 => p_qc_test_values_rec.ATTRIBUTE20,
    X_ATTRIBUTE21 => p_qc_test_values_rec.ATTRIBUTE21,
    X_ATTRIBUTE22 => p_qc_test_values_rec.ATTRIBUTE22,
    X_ATTRIBUTE23 => p_qc_test_values_rec.ATTRIBUTE23,
    X_ATTRIBUTE24 => p_qc_test_values_rec.ATTRIBUTE24,
    X_ATTRIBUTE25 => p_qc_test_values_rec.ATTRIBUTE25,
    X_ATTRIBUTE26 => p_qc_test_values_rec.ATTRIBUTE26,
    X_ATTRIBUTE27 => p_qc_test_values_rec.ATTRIBUTE27,
    X_ATTRIBUTE28 => p_qc_test_values_rec.ATTRIBUTE28,
    X_ATTRIBUTE29 => p_qc_test_values_rec.ATTRIBUTE29,
    X_ATTRIBUTE30 => p_qc_test_values_rec.ATTRIBUTE30,
    X_DISPLAY_LABEL_NUMERIC_RANGE => p_qc_test_values_rec.DISPLAY_LABEL_NUMERIC_RANGE,
    X_TEST_VALUE_DESC => p_qc_test_values_rec.TEST_VALUE_DESC,
    X_CREATION_DATE => p_qc_test_values_rec.CREATION_DATE,
    X_CREATED_BY => p_qc_test_values_rec.CREATED_BY,
    X_LAST_UPDATE_DATE => p_qc_test_values_rec.LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY => p_qc_test_values_rec.LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN => p_qc_test_values_rec.LAST_UPDATE_LOGIN);

RETURN TRUE;

EXCEPTION WHEN OTHERS THEN
    gmd_api_pub.log_message('GMD_API_ERROR','PACKAGE','GMD_QC_TEST_VALUES_PVT.INSERT_ROW','ERROR',SUBSTR(SQLERRM,1,100),'POSITION','010');
    RETURN FALSE;
end INSERT_ROW;


procedure LOCK_ROW (
  X_TEST_VALUE_ID in NUMBER,
  X_TEST_ID in NUMBER,
  X_MIN_NUM in NUMBER,
  X_MAX_NUM in NUMBER,
  X_VALUE_CHAR in VARCHAR2,
  X_TEXT_RANGE_SEQ in NUMBER,
  X_EXPRESSION_REF_TEST_ID in NUMBER,
  X_TEXT_CODE in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ATTRIBUTE16 in VARCHAR2,
  X_ATTRIBUTE17 in VARCHAR2,
  X_ATTRIBUTE18 in VARCHAR2,
  X_ATTRIBUTE19 in VARCHAR2,
  X_ATTRIBUTE20 in VARCHAR2,
  X_ATTRIBUTE21 in VARCHAR2,
  X_ATTRIBUTE22 in VARCHAR2,
  X_ATTRIBUTE23 in VARCHAR2,
  X_ATTRIBUTE24 in VARCHAR2,
  X_ATTRIBUTE25 in VARCHAR2,
  X_ATTRIBUTE26 in VARCHAR2,
  X_ATTRIBUTE27 in VARCHAR2,
  X_ATTRIBUTE28 in VARCHAR2,
  X_ATTRIBUTE29 in VARCHAR2,
  X_ATTRIBUTE30 in VARCHAR2,
  X_DISPLAY_LABEL_NUMERIC_RANGE in VARCHAR2,
  X_TEST_VALUE_DESC in VARCHAR2
) is
  cursor c is select
      TEST_ID,
      MIN_NUM,
      MAX_NUM,
      VALUE_CHAR,
      TEXT_RANGE_SEQ,
      EXPRESSION_REF_TEST_ID,
      TEXT_CODE,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      ATTRIBUTE16,
      ATTRIBUTE17,
      ATTRIBUTE18,
      ATTRIBUTE19,
      ATTRIBUTE20,
      ATTRIBUTE21,
      ATTRIBUTE22,
      ATTRIBUTE23,
      ATTRIBUTE24,
      ATTRIBUTE25,
      ATTRIBUTE26,
      ATTRIBUTE27,
      ATTRIBUTE28,
      ATTRIBUTE29,
      ATTRIBUTE30
    from GMD_QC_TEST_VALUES_B
    where TEST_VALUE_ID = X_TEST_VALUE_ID
    for update of TEST_VALUE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      DISPLAY_LABEL_NUMERIC_RANGE,
      TEST_VALUE_DESC,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from GMD_QC_TEST_VALUES_TL
    where TEST_VALUE_ID = X_TEST_VALUE_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of TEST_VALUE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    (recinfo.TEST_ID = X_TEST_ID)
      AND ((recinfo.MIN_NUM = X_MIN_NUM)
           OR ((recinfo.MIN_NUM is null) AND (X_MIN_NUM is null)))
      AND ((recinfo.MAX_NUM = X_MAX_NUM)
           OR ((recinfo.MAX_NUM is null) AND (X_MAX_NUM is null)))
      AND ((recinfo.VALUE_CHAR = X_VALUE_CHAR)
           OR ((recinfo.VALUE_CHAR is null) AND (X_VALUE_CHAR is null)))
      AND ((recinfo.TEXT_RANGE_SEQ = X_TEXT_RANGE_SEQ)
           OR ((recinfo.TEXT_RANGE_SEQ is null) AND (X_TEXT_RANGE_SEQ is null)))
      AND ((recinfo.EXPRESSION_REF_TEST_ID = X_EXPRESSION_REF_TEST_ID)
           OR ((recinfo.EXPRESSION_REF_TEST_ID is null) AND (X_EXPRESSION_REF_TEST_ID is null)))
      AND ((recinfo.TEXT_CODE = X_TEXT_CODE)
           OR ((recinfo.TEXT_CODE is null) AND (X_TEXT_CODE is null)))
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
      AND ((recinfo.ATTRIBUTE16 = X_ATTRIBUTE16)
           OR ((recinfo.ATTRIBUTE16 is null) AND (X_ATTRIBUTE16 is null)))
      AND ((recinfo.ATTRIBUTE17 = X_ATTRIBUTE17)
           OR ((recinfo.ATTRIBUTE17 is null) AND (X_ATTRIBUTE17 is null)))
      AND ((recinfo.ATTRIBUTE18 = X_ATTRIBUTE18)
           OR ((recinfo.ATTRIBUTE18 is null) AND (X_ATTRIBUTE18 is null)))
      AND ((recinfo.ATTRIBUTE19 = X_ATTRIBUTE19)
           OR ((recinfo.ATTRIBUTE19 is null) AND (X_ATTRIBUTE19 is null)))
      AND ((recinfo.ATTRIBUTE20 = X_ATTRIBUTE20)
           OR ((recinfo.ATTRIBUTE20 is null) AND (X_ATTRIBUTE20 is null)))
      AND ((recinfo.ATTRIBUTE21 = X_ATTRIBUTE21)
           OR ((recinfo.ATTRIBUTE21 is null) AND (X_ATTRIBUTE21 is null)))
      AND ((recinfo.ATTRIBUTE22 = X_ATTRIBUTE22)
           OR ((recinfo.ATTRIBUTE22 is null) AND (X_ATTRIBUTE22 is null)))
      AND ((recinfo.ATTRIBUTE23 = X_ATTRIBUTE23)
           OR ((recinfo.ATTRIBUTE23 is null) AND (X_ATTRIBUTE23 is null)))
      AND ((recinfo.ATTRIBUTE24 = X_ATTRIBUTE24)
           OR ((recinfo.ATTRIBUTE24 is null) AND (X_ATTRIBUTE24 is null)))
      AND ((recinfo.ATTRIBUTE25 = X_ATTRIBUTE25)
           OR ((recinfo.ATTRIBUTE25 is null) AND (X_ATTRIBUTE25 is null)))
      AND ((recinfo.ATTRIBUTE26 = X_ATTRIBUTE26)
           OR ((recinfo.ATTRIBUTE26 is null) AND (X_ATTRIBUTE26 is null)))
      AND ((recinfo.ATTRIBUTE27 = X_ATTRIBUTE27)
           OR ((recinfo.ATTRIBUTE27 is null) AND (X_ATTRIBUTE27 is null)))
      AND ((recinfo.ATTRIBUTE28 = X_ATTRIBUTE28)
           OR ((recinfo.ATTRIBUTE28 is null) AND (X_ATTRIBUTE28 is null)))
      AND ((recinfo.ATTRIBUTE29 = X_ATTRIBUTE29)
           OR ((recinfo.ATTRIBUTE29 is null) AND (X_ATTRIBUTE29 is null)))
      AND ((recinfo.ATTRIBUTE30 = X_ATTRIBUTE30)
           OR ((recinfo.ATTRIBUTE30 is null) AND (X_ATTRIBUTE30 is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.DISPLAY_LABEL_NUMERIC_RANGE = X_DISPLAY_LABEL_NUMERIC_RANGE)
               OR ((tlinfo.DISPLAY_LABEL_NUMERIC_RANGE is null) AND (X_DISPLAY_LABEL_NUMERIC_RANGE is null)))
          AND ((tlinfo.TEST_VALUE_DESC = X_TEST_VALUE_DESC)
               OR ((tlinfo.TEST_VALUE_DESC is null) AND (X_TEST_VALUE_DESC is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;


procedure UPDATE_ROW (
  X_TEST_VALUE_ID in NUMBER,
  X_TEST_ID in NUMBER,
  X_MIN_NUM in NUMBER,
  X_MAX_NUM in NUMBER,
  X_VALUE_CHAR in VARCHAR2,
  X_TEXT_RANGE_SEQ in NUMBER,
  X_EXPRESSION_REF_TEST_ID in NUMBER,
  X_TEXT_CODE in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ATTRIBUTE16 in VARCHAR2,
  X_ATTRIBUTE17 in VARCHAR2,
  X_ATTRIBUTE18 in VARCHAR2,
  X_ATTRIBUTE19 in VARCHAR2,
  X_ATTRIBUTE20 in VARCHAR2,
  X_ATTRIBUTE21 in VARCHAR2,
  X_ATTRIBUTE22 in VARCHAR2,
  X_ATTRIBUTE23 in VARCHAR2,
  X_ATTRIBUTE24 in VARCHAR2,
  X_ATTRIBUTE25 in VARCHAR2,
  X_ATTRIBUTE26 in VARCHAR2,
  X_ATTRIBUTE27 in VARCHAR2,
  X_ATTRIBUTE28 in VARCHAR2,
  X_ATTRIBUTE29 in VARCHAR2,
  X_ATTRIBUTE30 in VARCHAR2,
  X_DISPLAY_LABEL_NUMERIC_RANGE in VARCHAR2,
  X_TEST_VALUE_DESC in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update GMD_QC_TEST_VALUES_B set
    TEST_ID = X_TEST_ID,
    MIN_NUM = X_MIN_NUM,
    MAX_NUM = X_MAX_NUM,
    VALUE_CHAR = X_VALUE_CHAR,
    TEXT_RANGE_SEQ = X_TEXT_RANGE_SEQ,
    EXPRESSION_REF_TEST_ID = X_EXPRESSION_REF_TEST_ID,
    TEXT_CODE = X_TEXT_CODE,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    ATTRIBUTE16 = X_ATTRIBUTE16,
    ATTRIBUTE17 = X_ATTRIBUTE17,
    ATTRIBUTE18 = X_ATTRIBUTE18,
    ATTRIBUTE19 = X_ATTRIBUTE19,
    ATTRIBUTE20 = X_ATTRIBUTE20,
    ATTRIBUTE21 = X_ATTRIBUTE21,
    ATTRIBUTE22 = X_ATTRIBUTE22,
    ATTRIBUTE23 = X_ATTRIBUTE23,
    ATTRIBUTE24 = X_ATTRIBUTE24,
    ATTRIBUTE25 = X_ATTRIBUTE25,
    ATTRIBUTE26 = X_ATTRIBUTE26,
    ATTRIBUTE27 = X_ATTRIBUTE27,
    ATTRIBUTE28 = X_ATTRIBUTE28,
    ATTRIBUTE29 = X_ATTRIBUTE29,
    ATTRIBUTE30 = X_ATTRIBUTE30,
    LAST_UPDATE_DATE =  NVL(X_LAST_UPDATE_DATE,SYSDATE),
    LAST_UPDATED_BY =   NVL(X_LAST_UPDATED_BY,FND_GLOBAL.USER_ID),
    LAST_UPDATE_LOGIN = NVL(X_LAST_UPDATE_LOGIN,FND_GLOBAL.LOGIN_ID)
  where TEST_VALUE_ID = X_TEST_VALUE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update GMD_QC_TEST_VALUES_TL set
    DISPLAY_LABEL_NUMERIC_RANGE = X_DISPLAY_LABEL_NUMERIC_RANGE,
    TEST_VALUE_DESC = X_TEST_VALUE_DESC,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where TEST_VALUE_ID = X_TEST_VALUE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

FUNCTION DELETE_ROW (p_test_value_id in NUMBER) RETURN BOOLEAN IS
begin
  IF p_test_value_id IS NOT NULL THEN
     DELETE from GMD_QC_TEST_VALUES_TL
     where TEST_VALUE_ID = p_test_value_id ;

     if (sql%notfound) then
        raise no_data_found;
     end if;

     delete from GMD_QC_TEST_VALUES_B
     where TEST_VALUE_ID = p_test_value_id;

     if (sql%notfound) then
       raise no_data_found;
     end if;
  ELSE
    gmd_api_pub.log_message('GMD_NO_KEYS','TABLE_NAME', 'GMD_QC_TEST_VALUES');
    RETURN FALSE;
  END IF;

  RETURN TRUE;

EXCEPTION
 WHEN NO_DATA_FOUND
   THEN
     gmd_api_pub.log_message('GMD_NO_DATA_FOUND','TABLE_NAME', 'GMD_QC_TEST_VALUES');
     RETURN FALSE;
 WHEN OTHERS
   THEN
     gmd_api_pub.log_message('GMD_API_ERROR','PACKAGE','GMD_QC_TEST_VALUES_PVT.DELETE_ROW','ERROR',SUBSTR(SQLERRM,1,100),'POSITION','010');
     RETURN FALSE;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from GMD_QC_TEST_VALUES_TL T
  where not exists
    (select NULL
    from GMD_QC_TEST_VALUES_B B
    where B.TEST_VALUE_ID = T.TEST_VALUE_ID
    );

  update GMD_QC_TEST_VALUES_TL T set (
      DISPLAY_LABEL_NUMERIC_RANGE,
      TEST_VALUE_DESC
    ) = (select
      B.DISPLAY_LABEL_NUMERIC_RANGE,
      B.TEST_VALUE_DESC
    from GMD_QC_TEST_VALUES_TL B
    where B.TEST_VALUE_ID = T.TEST_VALUE_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.TEST_VALUE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.TEST_VALUE_ID,
      SUBT.LANGUAGE
    from GMD_QC_TEST_VALUES_TL SUBB, GMD_QC_TEST_VALUES_TL SUBT
    where SUBB.TEST_VALUE_ID = SUBT.TEST_VALUE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.DISPLAY_LABEL_NUMERIC_RANGE <> SUBT.DISPLAY_LABEL_NUMERIC_RANGE
      or (SUBB.DISPLAY_LABEL_NUMERIC_RANGE is null and SUBT.DISPLAY_LABEL_NUMERIC_RANGE is not null)
      or (SUBB.DISPLAY_LABEL_NUMERIC_RANGE is not null and SUBT.DISPLAY_LABEL_NUMERIC_RANGE is null)
      or SUBB.TEST_VALUE_DESC <> SUBT.TEST_VALUE_DESC
      or (SUBB.TEST_VALUE_DESC is null and SUBT.TEST_VALUE_DESC is not null)
      or (SUBB.TEST_VALUE_DESC is not null and SUBT.TEST_VALUE_DESC is null)
  ));

  insert into GMD_QC_TEST_VALUES_TL (
    TEST_VALUE_ID,
    DISPLAY_LABEL_NUMERIC_RANGE,
    TEST_VALUE_DESC,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.TEST_VALUE_ID,
    B.DISPLAY_LABEL_NUMERIC_RANGE,
    B.TEST_VALUE_DESC,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from GMD_QC_TEST_VALUES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from GMD_QC_TEST_VALUES_TL T
    where T.TEST_VALUE_ID = B.TEST_VALUE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

FUNCTION lock_row (
  p_test_value_id   IN  NUMBER)
RETURN BOOLEAN
IS
  dummy       NUMBER;
BEGIN

  IF (p_test_value_id IS NOT NULL) THEN
    SELECT test_value_id
    INTO   dummy
    FROM   gmd_qc_test_values_b
    WHERE  test_value_id = p_test_value_id
    FOR UPDATE OF test_value_id NOWAIT  ;
  ELSE
    gmd_api_pub.log_message('GMD_NO_KEYS','TABLE_NAME', 'GMD_QC_TEST_VALUES');
    RETURN FALSE;
  END IF;

  RETURN TRUE;

EXCEPTION
 WHEN NO_DATA_FOUND
   THEN
     gmd_api_pub.log_message('GMD_NO_DATA_FOUND','TABLE_NAME', 'GMD_QC_TEST_VALUES');
     RETURN FALSE;
 WHEN OTHERS
   THEN
     gmd_api_pub.log_message('GMD_API_ERROR','PACKAGE','GMD_QC_TEST_VALUES_PVT.LOCK_ROW','ERROR',SUBSTR(SQLERRM,1,100),'POSITION','010');
     RETURN FALSE;
END lock_row;


end GMD_QC_TEST_VALUES_PVT;

/
