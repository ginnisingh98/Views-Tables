--------------------------------------------------------
--  DDL for Package Body RLM_RLMSCHRL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."RLM_RLMSCHRL_XMLP_PKG" AS
/* $Header: RLMSCHRLB.pls 120.0 2008/01/25 09:42:56 krreddy noship $ */
  FUNCTION CF_CUSTOMER_NUMFORMULA(CUSTOMER_ID IN NUMBER) RETURN CHAR IS
    CNUM VARCHAR2(30);
  BEGIN
    SELECT
      CUST_ACCT.ACCOUNT_NUMBER
    INTO CNUM
    FROM
      HZ_PARTIES PARTY,
      HZ_CUST_ACCOUNTS CUST_ACCT
    WHERE PARTY.PARTY_ID = CUST_ACCT.PARTY_ID
      AND CUST_ACCT.CUST_ACCOUNT_ID = CUSTOMER_ID;
    RETURN (CNUM);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_CUSTOMER_NUMFORMULA;

  FUNCTION CF_SHIP_FROM_ORGFORMULA(SCHEDULE_SOURCE IN VARCHAR2
                                  ,SHIP_FROM_ORG_ID IN NUMBER
                                  ,CUST_SHIP_FROM_ORG_EXT IN VARCHAR2) RETURN VARCHAR IS
    CODE VARCHAR2(10);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        ORGANIZATION_CODE
      INTO CODE
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = SHIP_FROM_ORG_ID;
    ELSE
      CODE := CUST_SHIP_FROM_ORG_EXT;
    END IF;
    RETURN (CODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_FROM_ORGFORMULA;

  FUNCTION CF_SHIP_TO_LOCFORMULA(SCHEDULE_SOURCE IN VARCHAR2
                                ,SHIP_TO_ADDRESS_ID IN NUMBER
                                ,CUST_SHIP_TO_EXT IN VARCHAR2) RETURN VARCHAR IS
    LCODE VARCHAR2(10);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        ECE_TP_LOCATION_CODE
      INTO LCODE
      FROM
        HZ_CUST_ACCT_SITES
      WHERE CUST_ACCT_SITE_ID = SHIP_TO_ADDRESS_ID;
    ELSE
      LCODE := CUST_SHIP_TO_EXT;
    END IF;
    RETURN (LCODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_TO_LOCFORMULA;

  FUNCTION CF_CUST_ITEM_NUMFORMULA(SCHEDULE_SOURCE IN VARCHAR2
                                  ,CUSTOMER_ITEM_ID IN NUMBER
                                  ,CUSTOMER_ID IN NUMBER
                                  ,CUSTOMER_ITEM_EXT IN VARCHAR2) RETURN VARCHAR IS
    CNUM VARCHAR2(30);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        CUSTOMER_ITEM_NUMBER
      INTO CNUM
      FROM
        MTL_CUSTOMER_ITEMS
      WHERE CUSTOMER_ITEM_ID = CF_CUST_ITEM_NUMFORMULA.CUSTOMER_ITEM_ID
        AND CUSTOMER_ID = CF_CUST_ITEM_NUMFORMULA.CUSTOMER_ID;
    ELSE
      CNUM := CUSTOMER_ITEM_EXT;
    END IF;
    RETURN (CNUM);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_CUST_ITEM_NUMFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    STATEMENT0 VARCHAR2(100);
    STATEMENT9 VARCHAR2(100);
    STATEMENT1 VARCHAR2(1000);
    STATEMENT10 VARCHAR2(100);
    STATEMENT2 VARCHAR2(100);
    STATEMENT11 VARCHAR2(100);
    STATEMENT3 VARCHAR2(100);
    STATEMENT12 VARCHAR2(100);
    STATEMENT4 VARCHAR2(100);
    STATEMENT13 VARCHAR2(100);
    STATEMENT5 VARCHAR2(100);
    STATEMENT14 VARCHAR2(100);
    STATEMENT6 VARCHAR2(100);
    STATEMENT15 VARCHAR2(100);
    STATEMENT7 VARCHAR2(100);
    STATEMENT16 VARCHAR2(100);
    STATEMENT8 VARCHAR2(100);
    STATEMENT17 VARCHAR2(3000);
    V_ORIGIN_TABLE VARCHAR2(1);
    V_HEADER_ID NUMBER;
    CURSOR C_GET_SCHEDULE_REF_NUM(P_HEADER_ID IN NUMBER) IS
      SELECT
        SCHEDULE_REFERENCE_NUM
      FROM
        RLM_SCHEDULE_HEADERS_ALL
      WHERE HEADER_ID = P_HEADER_ID;
    CURSOR C_GET_SCHEDULE_REF_NUM_INT(P_HEADER_ID IN NUMBER) IS
      SELECT
        SCHEDULE_REFERENCE_NUM
      FROM
        RLM_INTERFACE_HEADERS_ALL
      WHERE HEADER_ID = P_HEADER_ID;
  BEGIN
    IF P_CUSTOMER IS NOT NULL THEN
      STATEMENT0 := ' And sih.customer_id = :P_CUSTOMER';
    ELSE
      STATEMENT0 := NULL;
    END IF;
    IF P_SCHEDULE_NUM IS NOT NULL THEN
      V_ORIGIN_TABLE := SUBSTR(P_SCHEDULE_NUM
                              ,1
                              ,1);
      V_HEADER_ID := TO_NUMBER(SUBSTR(P_SCHEDULE_NUM
                                     ,2));
      IF V_ORIGIN_TABLE = 'S' THEN
        OPEN C_GET_SCHEDULE_REF_NUM(V_HEADER_ID);
        FETCH C_GET_SCHEDULE_REF_NUM
         INTO P_REF_NUM;
        CLOSE C_GET_SCHEDULE_REF_NUM;
      ELSIF V_ORIGIN_TABLE = 'I' THEN
        OPEN C_GET_SCHEDULE_REF_NUM_INT(V_HEADER_ID);
        FETCH C_GET_SCHEDULE_REF_NUM_INT
         INTO P_REF_NUM;
        CLOSE C_GET_SCHEDULE_REF_NUM_INT;
      END IF;
      STATEMENT1 := ' And sih.schedule_reference_num = :P_REF_NUM ';
    ELSE
      STATEMENT1 := NULL;
    END IF;
    IF P_SHIP_FROM IS NOT NULL THEN
      STATEMENT2 := ' And sil.ship_from_org_id = :P_SHIP_FROM';
    ELSE
      STATEMENT2 := NULL;
    END IF;
    IF P_SHIP_TO IS NOT NULL THEN
      STATEMENT3 := ' And sil.ship_to_address_id = :P_SHIP_TO';
    ELSE
      STATEMENT3 := NULL;
    END IF;
    IF P_SCHEDULE_TYPE IS NOT NULL THEN
      STATEMENT4 := ' And sih.schedule_type = :P_SCHEDULE_TYPE';
    ELSE
      STATEMENT4 := NULL;
    END IF;
    IF P_SCHEDULE_SOURCE IS NOT NULL THEN
      STATEMENT5 := ' And sih.schedule_source = :P_SCHEDULE_SOURCE';
    ELSE
      STATEMENT5 := NULL;
    END IF;
    IF P_SCHEDULE_PURPOSE IS NOT NULL THEN
      STATEMENT6 := ' And sih.schedule_purpose = :P_SCHEDULE_PURPOSE';
    ELSE
      STATEMENT6 := NULL;
    END IF;
    IF P_PROCESS_DATE_FROM IS NOT NULL THEN
      STATEMENT7 := ' And sih.creation_date >= to_date(:P_PROCESS_DATE_FROM,''yyyy/MM/DD HH24:MI:SS'')';
    ELSE
      STATEMENT7 := NULL;
    END IF;
    IF P_PROCESS_DATE_TO IS NOT NULL THEN
      STATEMENT8 := ' And sih.creation_date <= to_date(:P_PROCESS_DATE_TO,''yyyy/MM/DD HH24:MI:SS'')';
    ELSE
      STATEMENT8 := NULL;
    END IF;
    IF P_ISSUE_DATE_FROM IS NOT NULL THEN
      STATEMENT9 := ' And sih.SCHED_GENERATION_DATE >= to_date(:P_ISSUE_DATE_FROM,''yyyy/MM/DD HH24:MI:SS'')';
    ELSE
      STATEMENT9 := NULL;
    END IF;
    IF P_ISSUE_DATE_TO IS NOT NULL THEN
      STATEMENT10 := ' And sih.SCHED_GENERATION_DATE <= to_date(:P_ISSUE_DATE_TO,''yyyy/MM/DD HH24:MI:SS'')';
    ELSE
      STATEMENT10 := NULL;
    END IF;
    IF P_TP_FROM IS NOT NULL THEN
      STATEMENT11 := ' And sih.ECE_TP_TRANSLATOR_CODE >= :P_TP_FROM';
    ELSE
      STATEMENT11 := NULL;
    END IF;
    IF (P_TP_TO IS NOT NULL) THEN
      STATEMENT12 := ' And sih.ECE_TP_TRANSLATOR_CODE <= :P_TP_TO';
    ELSE
      STATEMENT12 := NULL;
    END IF;
    IF (P_TP_LOC_FROM IS NOT NULL) THEN
      STATEMENT13 := ' And sih.ECE_TP_LOCATION_CODE_EXT >= :P_TP_LOC_FROM';
    ELSE
      STATEMENT13 := NULL;
    END IF;
    IF (P_TP_LOC_TO IS NOT NULL) THEN
      STATEMENT14 := ' And sih.ECE_TP_LOCATION_CODE_EXT <= :P_TP_LOC_TO';
    ELSE
      STATEMENT14 := NULL;
    END IF;
    IF P_HORIZON_START_DATE IS NOT NULL THEN
      STATEMENT15 := ' And sih.SCHED_HORIZON_START_DATE >= to_date(:P_HORIZON_START_DATE,''yyyy/MM/DD HH24:MI:SS'')';
    ELSE
      STATEMENT15 := NULL;
    END IF;
    IF P_HORIZON_END_DATE IS NOT NULL THEN
      STATEMENT16 := ' And sih.SCHED_HORIZON_END_DATE <= to_date(:P_HORIZON_END_DATE,''yyyy/MM/DD HH24:MI:SS'')';
    ELSE
      STATEMENT16 := NULL;
    END IF;
    IF P_PROCESS_STATUS IS NOT NULL THEN
      IF P_PROCESS_STATUS = 2 OR P_PROCESS_STATUS = 4 THEN
        STATEMENT17 := ' And sih.process_status  = :P_PROCESS_STATUS
                                                           and sih.origin_table = ''INTERFACE''
                                                           and sil.origin_table = ''INTERFACE'' ';
      ELSE
        IF P_PROCESS_STATUS = 5 THEN
          STATEMENT17 := ' And sih.process_status = :P_PROCESS_STATUS and sih.origin_table = ''SCHEDULE'' and sil.origin_table = ''SCHEDULE'' ';
        ELSE
          IF P_PROCESS_STATUS = 7 THEN
            STATEMENT17 := ' And sih.process_status = :P_PROCESS_STATUS';
          END IF;
        END IF;
      END IF;
    ELSE
      STATEMENT17 := ' and sih.origin_table = decode(sih.process_status,2,''INTERFACE'',4,''INTERFACE'',5,''SCHEDULE'',7,sih.origin_table)
                     		     and (sil.origin_table = decode(sil.process_status,2,''INTERFACE'',4,''INTERFACE'',5,''INTERFACE'')
                                             or sil.origin_table = decode(sil.process_status,2,''INTERFACE'',4,''INTERFACE'',5,''SCHEDULE''))
                     		     and sih.origin_table = decode(sih.process_status,2,sil.origin_table,4,sil.origin_table,5,sil.origin_table,7,sih.origin_table) ';
    END IF;
    P_WHERE_CLAUSE := STATEMENT0 || STATEMENT1 || STATEMENT2 || STATEMENT3 || STATEMENT4 || STATEMENT5 || STATEMENT6 || STATEMENT7 || STATEMENT8 || STATEMENT9 || STATEMENT10 || STATEMENT11 || STATEMENT12 || STATEMENT13 ||
	STATEMENT14 || STATEMENT15 || STATEMENT16 || STATEMENT17;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CNAME VARCHAR2(50);
    ORGCODE VARCHAR2(10);
    LCODE VARCHAR2(10);
    STYPE VARCHAR2(30);
    SPURPOSE VARCHAR2(30);
    PSTATUS VARCHAR2(40);
    PSCHREFNUM VARCHAR2(35);
    L_CURRENT_ORG_ID NUMBER;
    L_OU_NAME VARCHAR2(240);
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1000
                   ,'Failed in BEFORE REPORT trigger')*/NULL;
        RETURN (FALSE);
    END;
    L_CURRENT_ORG_ID := MO_GLOBAL.GET_CURRENT_ORG_ID;
    IF (L_CURRENT_ORG_ID IS NULL AND P_ORG_ID IS NOT NULL) THEN
      MO_GLOBAL.SET_POLICY_CONTEXT(P_ACCESS_MODE => 'S'
                                  ,P_ORG_ID => P_ORG_ID);
      L_CURRENT_ORG_ID := P_ORG_ID;
    END IF;
    L_OU_NAME := FND_ACCESS_CONTROL_UTIL.GET_ORG_NAME(L_CURRENT_ORG_ID);
    CP_DEFAULT_OU := L_OU_NAME;
    IF P_CUSTOMER IS NOT NULL THEN
      SELECT
        SUBSTRB(PARTY.PARTY_NAME
               ,1
               ,50)
      INTO CNAME
      FROM
        HZ_PARTIES PARTY
      WHERE PARTY.PARTY_ID = (
        SELECT
          CUST_ACCT.PARTY_ID
        FROM
          HZ_CUST_ACCOUNTS CUST_ACCT
        WHERE CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER );
      CP_CUSTOMER := CNAME;
    ELSE
      CP_CUSTOMER := P_CUSTOMER;
    END IF;
    IF P_SHIP_FROM IS NOT NULL THEN
      SELECT
        ORGANIZATION_CODE
      INTO ORGCODE
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = P_SHIP_FROM;
      CP_SHIP_FROM_ORG := ORGCODE;
    ELSE
      CP_SHIP_FROM_ORG := P_SHIP_FROM;
    END IF;
    IF P_SHIP_TO IS NOT NULL THEN
      SELECT
        ECE_TP_LOCATION_CODE
      INTO LCODE
      FROM
        HZ_CUST_ACCT_SITES
      WHERE CUST_ACCT_SITE_ID = P_SHIP_TO;
      CP_SHIP_TO := LCODE;
    ELSE
      CP_SHIP_TO := P_SHIP_TO;
    END IF;
    IF P_SCHEDULE_TYPE IS NOT NULL THEN
      SELECT
        MEANING
      INTO STYPE
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_SCHEDULE_TYPE'
        AND LOOKUP_CODE = P_SCHEDULE_TYPE;
      CP_SCHEDULE_TYPE := STYPE;
    ELSE
      CP_SCHEDULE_TYPE := NULL;
    END IF;
    IF P_SCHEDULE_PURPOSE IS NOT NULL THEN
      SELECT
        MEANING
      INTO SPURPOSE
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_SCHEDULE_PURPOSE'
        AND LOOKUP_CODE = P_SCHEDULE_PURPOSE;
      CP_SCHEDULE_PURPOSE := SPURPOSE;
    ELSE
      CP_SCHEDULE_PURPOSE := NULL;
    END IF;
    IF P_PROCESS_STATUS IS NOT NULL THEN
      SELECT
        MEANING
      INTO PSTATUS
      FROM
        FND_LOOKUP_VALUES_VL FLV
      WHERE FLV.LOOKUP_TYPE = 'RLM_PROCESS_STATUS'
        AND FLV.LOOKUP_CODE = P_PROCESS_STATUS;
      CP_PROCESS_STATUS := PSTATUS;
    ELSE
      CP_PROCESS_STATUS := NULL;
    END IF;
    CP_SCHEDULE_REF_NUM := P_REF_NUM;
    CP_SCHEDULE_SOURCE := P_SCHEDULE_SOURCE;
    CP_TITLE := P_TITLE;
    CP_HORIZON_START_DATE := P_HORIZON_START_DATE;
    CP_HORIZON_END_DATE := P_HORIZON_END_DATE;
    CP_ISSUE_DATE_FROM := P_ISSUE_DATE_FROM;
    CP_ISSUE_DATE_TO := P_ISSUE_DATE_TO;
    CP_TP_FROM := P_TP_FROM;
    CP_TP_TO := P_TP_TO;
    CP_TP_LOC_CODE_FROM := P_TP_LOC_FROM;
    CP_TP_LOC_CODE_TO := P_TP_LOC_TO;
    CP_PROCESS_DATE_FROM := P_PROCESS_DATE_FROM;
    CP_PROCESS_DATE_TO := P_PROCESS_DATE_TO;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END BEFOREREPORT;

  FUNCTION CF_TEST_INDICATORFORMULA(EDI_TEST_INDICATOR IN VARCHAR2) RETURN CHAR IS
    TEST_INDICATOR VARCHAR2(10);
  BEGIN
    IF EDI_TEST_INDICATOR = 'T' THEN
      SELECT
        MEANING
      INTO TEST_INDICATOR
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_CODE = 'Y'
        AND LOOKUP_TYPE = 'YES_NO';
    ELSE
      SELECT
        MEANING
      INTO TEST_INDICATOR
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_CODE = 'N'
        AND LOOKUP_TYPE = 'YES_NO';
    END IF;
    RETURN (TEST_INDICATOR);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_TEST_INDICATORFORMULA;

  FUNCTION CF_SHIP_DEL_PATTERNFORMULA(SHIP_DEL_PATTERN_EXT IN VARCHAR2) RETURN CHAR IS
    SDPDESC VARCHAR2(100);
  BEGIN
    SELECT
      DESCRIPTION
    INTO SDPDESC
    FROM
      RLM_SHIP_DELIVERY_CODES
    WHERE SHIP_DELIVERY_RULE_NAME = SHIP_DEL_PATTERN_EXT;
    RETURN (SDPDESC);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_DEL_PATTERNFORMULA;

  FUNCTION CF_INV_ITEM_CONC_SEGMENTFORMUL(INVENTORY_ITEM_ID IN NUMBER
                                         ,SHIP_FROM_ORG_ID IN NUMBER) RETURN CHAR IS
    CONC_SEG VARCHAR2(40);
  BEGIN
    SELECT
      CONCATENATED_SEGMENTS
    INTO CONC_SEG
    FROM
      MTL_SYSTEM_ITEMS_KFV MSI
    WHERE CF_INV_ITEM_CONC_SEGMENTFORMUL.INVENTORY_ITEM_ID = MSI.INVENTORY_ITEM_ID
      AND MSI.ORGANIZATION_ID = SHIP_FROM_ORG_ID;
    RETURN (CONC_SEG);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_INV_ITEM_CONC_SEGMENTFORMUL;

  FUNCTION CF_SHIP_FROM_ORG1FORMULA(SCHEDULE_SOURCE IN VARCHAR2
                                   ,SHIP_FROM_ORG_ID1 IN NUMBER
                                   ,CUST_SHIP_FROM_ORG_EXT1 IN VARCHAR2) RETURN VARCHAR IS
    CODE VARCHAR2(10);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        ORGANIZATION_CODE
      INTO CODE
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = SHIP_FROM_ORG_ID1;
    ELSE
      CODE := CUST_SHIP_FROM_ORG_EXT1;
    END IF;
    RETURN (CODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_FROM_ORG1FORMULA;

  FUNCTION CF_SHIP_TO_LOC1FORMULA(SCHEDULE_SOURCE IN VARCHAR2
                                 ,SHIP_TO_ADDRESS_ID1 IN NUMBER
                                 ,CUST_SHIP_TO_EXT1 IN VARCHAR2) RETURN VARCHAR IS
    LCODE VARCHAR2(10);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        ECE_TP_LOCATION_CODE
      INTO LCODE
      FROM
        HZ_CUST_ACCT_SITES
      WHERE CUST_ACCT_SITE_ID = SHIP_TO_ADDRESS_ID1;
    ELSE
      LCODE := CUST_SHIP_TO_EXT1;
    END IF;
    RETURN (LCODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_TO_LOC1FORMULA;

  FUNCTION CF_SHIP_DEL_PATTERN1FORMULA(SHIP_DEL_PATTERN_EXT1 IN VARCHAR2) RETURN CHAR IS
    SDPDESC VARCHAR2(100);
  BEGIN
    SELECT
      DESCRIPTION
    INTO SDPDESC
    FROM
      RLM_SHIP_DELIVERY_CODES
    WHERE SHIP_DELIVERY_RULE_NAME = SHIP_DEL_PATTERN_EXT1;
    RETURN (SDPDESC);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_DEL_PATTERN1FORMULA;

  FUNCTION CF_INV_CONC_SEGMENT1FORMULA(INVENTORY_ITEM_ID1 IN NUMBER
                                      ,SHIP_FROM_ORG_ID1 IN NUMBER) RETURN CHAR IS
    CONC_SEG VARCHAR2(40);
  BEGIN
    SELECT
      CONCATENATED_SEGMENTS
    INTO CONC_SEG
    FROM
      MTL_SYSTEM_ITEMS_KFV MSI
    WHERE INVENTORY_ITEM_ID1 = MSI.INVENTORY_ITEM_ID
      AND MSI.ORGANIZATION_ID = SHIP_FROM_ORG_ID1;
    RETURN (CONC_SEG);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_INV_CONC_SEGMENT1FORMULA;

  FUNCTION CF_CUST_ITEM_NUM1FORMULA(SCHEDULE_SOURCE IN VARCHAR2
                                   ,CUSTOMER_ITEM_ID1 IN NUMBER
                                   ,CUSTOMER_ID IN NUMBER
                                   ,CUSTOMER_ITEM_EXT1 IN VARCHAR2) RETURN CHAR IS
    CNUM VARCHAR2(30);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        CUSTOMER_ITEM_NUMBER
      INTO CNUM
      FROM
        MTL_CUSTOMER_ITEMS
      WHERE CUSTOMER_ITEM_ID = CUSTOMER_ITEM_ID1
        AND CUSTOMER_ID = CUSTOMER_ID;
    ELSE
      CNUM := CUSTOMER_ITEM_EXT1;
    END IF;
    RETURN (CNUM);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_CUST_ITEM_NUM1FORMULA;

  FUNCTION CF_BILL_TO_LOCFORMULA(BILL_TO_ADDRESS_ID IN NUMBER) RETURN CHAR IS
    LCODE VARCHAR2(10);
  BEGIN
    SELECT
      ECE_TP_LOCATION_CODE
    INTO LCODE
    FROM
      HZ_CUST_ACCT_SITES
    WHERE CUST_ACCT_SITE_ID = BILL_TO_ADDRESS_ID;
    RETURN (LCODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_BILL_TO_LOCFORMULA;

  FUNCTION CF_BILL_TO_LOC1FORMULA(BILL_TO_ADDRESS_ID1 IN NUMBER) RETURN CHAR IS
    LCODE VARCHAR2(10);
  BEGIN
    SELECT
      ECE_TP_LOCATION_CODE
    INTO LCODE
    FROM
      HZ_CUST_ACCT_SITES
    WHERE CUST_ACCT_SITE_ID = BILL_TO_ADDRESS_ID1;
    RETURN (LCODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_BILL_TO_LOC1FORMULA;

  FUNCTION CF_SCHEDULE_SOURCEFORMULA(SCHEDULE_SOURCE IN VARCHAR2) RETURN CHAR IS
    SSOURCE VARCHAR2(10);
  BEGIN
    IF SCHEDULE_SOURCE = 'MANUAL' THEN
      SELECT
        MEANING
      INTO SSOURCE
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_SCHEDULE_SOURCE'
        AND LOOKUP_CODE = 'MANUAL';
    ELSE
      SSOURCE := SCHEDULE_SOURCE;
    END IF;
    RETURN (SSOURCE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SCHEDULE_SOURCEFORMULA;

  FUNCTION CF_ADDRESS1FORMULA(CUST_ADDRESS_1_EXT IN VARCHAR2
                             ,CUST_ADDRESS_2_EXT IN VARCHAR2
                             ,CUST_ADDRESS_3_EXT IN VARCHAR2
                             ,CUST_ADDRESS_4_EXT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF CUST_ADDRESS_1_EXT IS NOT NULL THEN
      RETURN (CUST_ADDRESS_1_EXT);
    ELSIF CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL THEN
      RETURN (CUST_ADDRESS_2_EXT);
    ELSIF CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL THEN
      RETURN (CUST_ADDRESS_3_EXT);
    ELSIF CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NOT NULL THEN
      RETURN (CUST_ADDRESS_4_EXT);
    ELSE
      RETURN (NULL);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ADDRESS1FORMULA;

  FUNCTION CF_ADDRESS2FORMULA(CUST_ADDRESS_1_EXT IN VARCHAR2
                             ,CUST_ADDRESS_2_EXT IN VARCHAR2
                             ,CUST_ADDRESS_3_EXT IN VARCHAR2
                             ,CUST_ADDRESS_4_EXT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_2_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_3_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_4_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN (NULL);
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_3_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_4_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ADDRESS2FORMULA;

  FUNCTION CF_ADDRESS3FORMULA(CUST_ADDRESS_1_EXT IN VARCHAR2
                             ,CUST_ADDRESS_2_EXT IN VARCHAR2
                             ,CUST_ADDRESS_3_EXT IN VARCHAR2
                             ,CUST_ADDRESS_4_EXT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_3_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_4_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN (NULL);
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_4_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN CUST_ADDRESS_4_EXT;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSE
      RETURN (NULL);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ADDRESS3FORMULA;

  FUNCTION CF_ADDRESS4FORMULA(CUST_ADDRESS_1_EXT IN VARCHAR2
                             ,CUST_ADDRESS_2_EXT IN VARCHAR2
                             ,CUST_ADDRESS_3_EXT IN VARCHAR2
                             ,CUST_ADDRESS_4_EXT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN (CUST_ADDRESS_4_EXT);
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN (NULL);
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NOT NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NOT NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NOT NULL AND CUST_ADDRESS_4_EXT IS NOT NULL) THEN
      RETURN NULL;
    ELSIF (CUST_ADDRESS_1_EXT IS NULL AND CUST_ADDRESS_2_EXT IS NULL AND CUST_ADDRESS_3_EXT IS NULL AND CUST_ADDRESS_4_EXT IS NULL) THEN
      RETURN NULL;
    ELSE
      RETURN NULL;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ADDRESS4FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in AFTER REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_CUSTOMER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CUSTOMER;
  END CP_CUSTOMER_P;

  FUNCTION CP_SCHEDULE_REF_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SCHEDULE_REF_NUM;
  END CP_SCHEDULE_REF_NUM_P;

  FUNCTION CP_SHIP_FROM_ORG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_FROM_ORG;
  END CP_SHIP_FROM_ORG_P;

  FUNCTION CP_SHIP_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO;
  END CP_SHIP_TO_P;

  FUNCTION CP_SCHEDULE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SCHEDULE_TYPE;
  END CP_SCHEDULE_TYPE_P;

  FUNCTION CP_SCHEDULE_PURPOSE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SCHEDULE_PURPOSE;
  END CP_SCHEDULE_PURPOSE_P;

  FUNCTION CP_SCHEDULE_SOURCE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SCHEDULE_SOURCE;
  END CP_SCHEDULE_SOURCE_P;

  FUNCTION CP_PROCESS_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROCESS_STATUS;
  END CP_PROCESS_STATUS_P;

  FUNCTION CP_HORIZON_START_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_HORIZON_START_DATE;
  END CP_HORIZON_START_DATE_P;

  FUNCTION CP_HORIZON_END_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_HORIZON_END_DATE;
  END CP_HORIZON_END_DATE_P;

  FUNCTION CP_ISSUE_DATE_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ISSUE_DATE_FROM;
  END CP_ISSUE_DATE_FROM_P;

  FUNCTION CP_ISSUE_DATE_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ISSUE_DATE_TO;
  END CP_ISSUE_DATE_TO_P;

  FUNCTION CP_TP_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TP_FROM;
  END CP_TP_FROM_P;

  FUNCTION CP_TP_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TP_TO;
  END CP_TP_TO_P;

  FUNCTION CP_TP_LOC_CODE_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TP_LOC_CODE_FROM;
  END CP_TP_LOC_CODE_FROM_P;

  FUNCTION CP_TP_LOC_CODE_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TP_LOC_CODE_TO;
  END CP_TP_LOC_CODE_TO_P;

  FUNCTION CP_PROCESS_DATE_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROCESS_DATE_FROM;
  END CP_PROCESS_DATE_FROM_P;

  FUNCTION CP_PROCESS_DATE_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROCESS_DATE_TO;
  END CP_PROCESS_DATE_TO_P;

  FUNCTION CP_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TITLE;
  END CP_TITLE_P;

  FUNCTION CP_DEFAULT_OU_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEFAULT_OU;
  END CP_DEFAULT_OU_P;

END RLM_RLMSCHRL_XMLP_PKG;

/
