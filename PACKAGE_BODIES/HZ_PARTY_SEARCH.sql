--------------------------------------------------------
--  DDL for Package Body HZ_PARTY_SEARCH
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_PARTY_SEARCH" AS
/*=======================================================================+
 |  Copyright (c) 1999 Oracle Corporation Redwood Shores, California, USA|
 |                          All rights reserved.                         |
 +=======================================================================+
 | NAME
 |      HZ_PARTY_SEARCH
 |
 | DESCRIPTION
 |
 | Compiled by the HZ Match Rule Compiler
 | PUBLIC PROCEDURES
 |    find_parties
 |    get_matching_party_sites
 |    get_matching_contacts
 |    get_matching_contact_points
 |    get_party_score_details
 |    
 | HISTORY
 |      30-AUG-2013 Generated by HZ Match Rule Compiler
 |
 *=======================================================================*/
  g_debug_count                        NUMBER := 0;
  g_last_rule			    NUMBER := -1;
  g_last_rule_valid	 	    BOOLEAN := FALSE;
  PROCEDURE find_parties (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      x_rule_id               IN OUT  NUMBER,
      p_party_search_rec      IN      party_search_rec_type,
      p_party_site_list       IN      party_site_list,
      p_contact_list          IN      contact_list,
      p_contact_point_list    IN      contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         IN OUT  NUMBER,
      x_num_matches           IN OUT  NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties-1(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||x_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     find_parties(p_init_msg_list,x_rule_id,p_party_search_rec,
            p_party_site_list,p_contact_list,p_contact_point_list,
            p_restrict_sql,NULL,p_search_merged,x_search_ctx_id,
            x_num_matches,x_return_status,x_msg_count,x_msg_data);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties-1(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  END;

  PROCEDURE find_parties (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      party_search_rec_type,
      p_party_site_list       IN      party_site_list,
      p_contact_list          IN      contact_list,
      p_contact_point_list    IN      contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN

    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_parties(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',x_search_ctx_id,x_num_matches);
    END IF;
 -- User quality score 
 IF (fnd_profile.value('HZ_QUALITY_WEIGHTING_USER_HOOK') = 'Y')  THEN  
     HZ_DQM_SEARCH_UTIL.get_quality_score ( x_search_ctx_id, p_rule_id); 
  END IF; 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

  PROCEDURE find_persons (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      party_search_rec_type,
      p_party_site_list       IN      party_site_list,
      p_contact_list          IN      contact_list,
      p_contact_point_list    IN      contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2, 
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN

    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_persons(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_persons(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,'N',x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_persons(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

  PROCEDURE find_persons (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      party_search_rec_type,
      p_party_site_list       IN      party_site_list,
      p_contact_list          IN      contact_list,
      p_contact_point_list    IN      contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  BEGIN
  	find_persons (
      p_init_msg_list,p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list, 
      p_restrict_sql ,p_match_type,NULL,x_search_ctx_id,x_num_matches,x_return_status,
      x_msg_count,x_msg_data);
  END;

  PROCEDURE find_party_details (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      party_search_rec_type,
      p_party_site_list       IN      party_site_list,
      p_contact_list          IN      contact_list,
      p_contact_point_list    IN      contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_party_details(+)',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_party_details(
        p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,
        p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_party_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

  PROCEDURE find_duplicate_parties (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_dup_batch_id          IN      NUMBER,
      p_search_merged         IN      VARCHAR2,
      x_dup_set_id            OUT     NUMBER,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_parties(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    IF g_last_rule<>p_rule_id OR NOT g_last_rule_valid THEN
      OPEN c_match_rule;
      FETCH c_match_rule INTO l_cmp_flag;
      IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      g_last_rule := p_rule_id;
      g_last_rule_valid := TRUE;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_duplicate_parties(
        p_rule_id,p_party_id,
        p_restrict_sql,p_match_type,p_dup_batch_id,p_search_merged,x_dup_set_id, x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_parties(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;


  PROCEDURE find_duplicate_party_sites (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_party_site_id         IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_party_sites(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_duplicate_party_sites(
        p_rule_id,p_party_site_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_party_sites(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

  PROCEDURE find_duplicate_contacts (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_org_contact_id        IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contacts(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_duplicate_contacts(
        p_rule_id,p_org_contact_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contacts(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

  PROCEDURE find_duplicate_contact_points (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_contact_point_id      IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contact_points(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_duplicate_contact_points(
        p_rule_id,p_contact_point_id,p_party_id,
        p_restrict_sql,p_match_type,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contact_points(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;


  PROCEDURE find_parties_dynamic (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_attrib_id1            IN      NUMBER,
      p_attrib_id2            IN      NUMBER,
      p_attrib_id3            IN      NUMBER,
      p_attrib_id4            IN      NUMBER,
      p_attrib_id5            IN      NUMBER,
      p_attrib_id6            IN      NUMBER,
      p_attrib_id7            IN      NUMBER,
      p_attrib_id8            IN      NUMBER,
      p_attrib_id9            IN      NUMBER,
      p_attrib_id10           IN      NUMBER,
      p_attrib_id11           IN      NUMBER,
      p_attrib_id12           IN      NUMBER,
      p_attrib_id13           IN      NUMBER,
      p_attrib_id14           IN      NUMBER,
      p_attrib_id15           IN      NUMBER,
      p_attrib_id16           IN      NUMBER,
      p_attrib_id17           IN      NUMBER,
      p_attrib_id18           IN      NUMBER,
      p_attrib_id19           IN      NUMBER,
      p_attrib_id20           IN      NUMBER,
      p_attrib_val1           IN      VARCHAR2,
      p_attrib_val2           IN      VARCHAR2,
      p_attrib_val3           IN      VARCHAR2,
      p_attrib_val4           IN      VARCHAR2,
      p_attrib_val5           IN      VARCHAR2,
      p_attrib_val6           IN      VARCHAR2,
      p_attrib_val7           IN      VARCHAR2,
      p_attrib_val8           IN      VARCHAR2,
      p_attrib_val9           IN      VARCHAR2,
      p_attrib_val10          IN      VARCHAR2,
      p_attrib_val11          IN      VARCHAR2,
      p_attrib_val12          IN      VARCHAR2,
      p_attrib_val13          IN      VARCHAR2,
      p_attrib_val14          IN      VARCHAR2,
      p_attrib_val15          IN      VARCHAR2,
      p_attrib_val16          IN      VARCHAR2,
      p_attrib_val17          IN      VARCHAR2,
      p_attrib_val18          IN      VARCHAR2,
      p_attrib_val19          IN      VARCHAR2,
      p_attrib_val20          IN      VARCHAR2,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties_dynamic(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.find_parties_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_match_type,p_search_merged,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties_dynamic(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

  PROCEDURE call_api_dynamic (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_attrib_id1            IN      NUMBER,
      p_attrib_id2            IN      NUMBER,
      p_attrib_id3            IN      NUMBER,
      p_attrib_id4            IN      NUMBER,
      p_attrib_id5            IN      NUMBER,
      p_attrib_id6            IN      NUMBER,
      p_attrib_id7            IN      NUMBER,
      p_attrib_id8            IN      NUMBER,
      p_attrib_id9            IN      NUMBER,
      p_attrib_id10           IN      NUMBER,
      p_attrib_id11           IN      NUMBER,
      p_attrib_id12           IN      NUMBER,
      p_attrib_id13           IN      NUMBER,
      p_attrib_id14           IN      NUMBER,
      p_attrib_id15           IN      NUMBER,
      p_attrib_id16           IN      NUMBER,
      p_attrib_id17           IN      NUMBER,
      p_attrib_id18           IN      NUMBER,
      p_attrib_id19           IN      NUMBER,
      p_attrib_id20           IN      NUMBER,
      p_attrib_val1           IN      VARCHAR2,
      p_attrib_val2           IN      VARCHAR2,
      p_attrib_val3           IN      VARCHAR2,
      p_attrib_val4           IN      VARCHAR2,
      p_attrib_val5           IN      VARCHAR2,
      p_attrib_val6           IN      VARCHAR2,
      p_attrib_val7           IN      VARCHAR2,
      p_attrib_val8           IN      VARCHAR2,
      p_attrib_val9           IN      VARCHAR2,
      p_attrib_val10          IN      VARCHAR2,
      p_attrib_val11          IN      VARCHAR2,
      p_attrib_val12          IN      VARCHAR2,
      p_attrib_val13          IN      VARCHAR2,
      p_attrib_val14          IN      VARCHAR2,
      p_attrib_val15          IN      VARCHAR2,
      p_attrib_val16          IN      VARCHAR2,
      p_attrib_val17          IN      VARCHAR2,
      p_attrib_val18          IN      VARCHAR2,
      p_attrib_val19          IN      VARCHAR2,
      p_attrib_val20          IN      VARCHAR2,
      p_restrict_sql          IN      VARCHAR2,
      p_api_name              IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_party_id              IN      NUMBER,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties_dynamic(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- Find the match rule
      null;

      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.call_api_dynamic(
        p_rule_id,
        p_attrib_id1,p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
        p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
        p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
        p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
        p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
        p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
        p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
        p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
        p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END; 
 
 FUNCTION get_attrib_id(p_str VARCHAR2)  
   RETURN NUMBER IS  
   l_id NUMBER;  
   l_pl NUMBER;  
   l_token VARCHAR2(1);  
   BEGIN  
        l_token := '.';  
        l_pl := instrb(p_str, l_token);  
        select attribute_id into l_id  
        from hz_trans_attributes_b  
        where entity_name = substrb(p_str, 0, l_pl - 1)  
        and ATTRIBUTE_NAME = substrb(p_str, l_pl + 1);  
        RETURN l_id;  
   EXCEPTION WHEN NO_DATA_FOUND THEN  
             FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_NOATTRIB_ERROR' ); 
             FND_MESSAGE.SET_TOKEN('ENTITY_ATTRIBUTE' ,p_str); 
             FND_MSG_PUB.ADD; 
             RAISE FND_API.G_EXC_ERROR; 
   END get_attrib_id;  
  PROCEDURE call_api_dynamic_names (
      p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
      p_rule_id               IN      NUMBER,
      p_attrib_name1            IN      VARCHAR2,
      p_attrib_name2            IN      VARCHAR2,
      p_attrib_name3            IN      VARCHAR2,
      p_attrib_name4            IN      VARCHAR2,
      p_attrib_name5            IN      VARCHAR2,
      p_attrib_name6            IN      VARCHAR2,
      p_attrib_name7            IN      VARCHAR2,
      p_attrib_name8            IN      VARCHAR2,
      p_attrib_name9            IN      VARCHAR2,
      p_attrib_name10           IN      VARCHAR2,
      p_attrib_name11           IN      VARCHAR2,
      p_attrib_name12           IN      VARCHAR2,
      p_attrib_name13           IN      VARCHAR2,
      p_attrib_name14           IN      VARCHAR2,
      p_attrib_name15           IN      VARCHAR2,
      p_attrib_name16           IN      VARCHAR2,
      p_attrib_name17           IN      VARCHAR2,
      p_attrib_name18           IN      VARCHAR2,
      p_attrib_name19           IN      VARCHAR2,
      p_attrib_name20           IN      VARCHAR2,
      p_attrib_val1           IN      VARCHAR2,
      p_attrib_val2           IN      VARCHAR2,
      p_attrib_val3           IN      VARCHAR2,
      p_attrib_val4           IN      VARCHAR2,
      p_attrib_val5           IN      VARCHAR2,
      p_attrib_val6           IN      VARCHAR2,
      p_attrib_val7           IN      VARCHAR2,
      p_attrib_val8           IN      VARCHAR2,
      p_attrib_val9           IN      VARCHAR2,
      p_attrib_val10          IN      VARCHAR2,
      p_attrib_val11          IN      VARCHAR2,
      p_attrib_val12          IN      VARCHAR2,
      p_attrib_val13          IN      VARCHAR2,
      p_attrib_val14          IN      VARCHAR2,
      p_attrib_val15          IN      VARCHAR2,
      p_attrib_val16          IN      VARCHAR2,
      p_attrib_val17          IN      VARCHAR2,
      p_attrib_val18          IN      VARCHAR2,
      p_attrib_val19          IN      VARCHAR2,
      p_attrib_val20          IN      VARCHAR2,
      p_restrict_sql          IN      VARCHAR2,
      p_api_name              IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_party_id              IN      NUMBER,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER,
      x_return_status         OUT     VARCHAR2,
      x_msg_count             OUT     NUMBER,
      x_msg_data              OUT     VARCHAR2
 ) IS
     l_attrib_id1   NUMBER; 
       l_attrib_id2   NUMBER; 
       l_attrib_id3   NUMBER; 
       l_attrib_id4   NUMBER; 
       l_attrib_id5   NUMBER; 
       l_attrib_id6   NUMBER; 
       l_attrib_id7   NUMBER; 
       l_attrib_id8   NUMBER; 
       l_attrib_id9   NUMBER; 
       l_attrib_id10  NUMBER; 
       l_attrib_id11  NUMBER; 
       l_attrib_id12  NUMBER; 
       l_attrib_id13  NUMBER; 
       l_attrib_id14  NUMBER; 
       l_attrib_id15  NUMBER; 
       l_attrib_id16  NUMBER; 
       l_attrib_id17  NUMBER; 
       l_attrib_id18  NUMBER; 
       l_attrib_id19  NUMBER; 
       l_attrib_id20  NUMBER; 
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic_names(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id ,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
 
      IF (p_attrib_name1 IS NOT NULL) THEN  
           l_attrib_id1 := get_attrib_id(p_attrib_name1); 
      END IF; 
      IF (p_attrib_name2 IS NOT NULL) THEN 
           l_attrib_id2 := get_attrib_id(p_attrib_name2); 
      END IF; 
      IF (p_attrib_name3 IS NOT NULL) THEN 
           l_attrib_id3 := get_attrib_id(p_attrib_name3); 
      END IF; 
      IF (p_attrib_name4 IS NOT NULL) THEN 
           l_attrib_id4 := get_attrib_id(p_attrib_name4); 
      END IF; 
      IF (p_attrib_name5 IS NOT NULL) THEN 
           l_attrib_id5 := get_attrib_id(p_attrib_name5); 
      END IF; 
      IF (p_attrib_name6 IS NOT NULL) THEN 
           l_attrib_id6 := get_attrib_id(p_attrib_name6); 
      END IF; 
      IF (p_attrib_name7 IS NOT NULL) THEN 
           l_attrib_id7 := get_attrib_id(p_attrib_name7); 
      END IF; 
      IF (p_attrib_name8 IS NOT NULL) THEN 
           l_attrib_id8 := get_attrib_id(p_attrib_name8); 
      END IF; 
      IF (p_attrib_name9 IS NOT NULL) THEN 
           l_attrib_id9 := get_attrib_id(p_attrib_name9); 
      END IF; 
      IF (p_attrib_name10 IS NOT NULL) THEN 
           l_attrib_id10 := get_attrib_id(p_attrib_name10); 
      END IF; 
      IF (p_attrib_name11 IS NOT NULL) THEN 
           l_attrib_id11 := get_attrib_id(p_attrib_name11); 
      END IF; 
      IF (p_attrib_name12 IS NOT NULL) THEN 
           l_attrib_id12 := get_attrib_id(p_attrib_name12); 
      END IF; 
      IF (p_attrib_name13 IS NOT NULL) THEN 
           l_attrib_id13 := get_attrib_id(p_attrib_name13); 
      END IF; 
      IF (p_attrib_name14 IS NOT NULL) THEN 
           l_attrib_id14 := get_attrib_id(p_attrib_name14); 
      END IF; 
      IF (p_attrib_name15 IS NOT NULL) THEN 
           l_attrib_id15 := get_attrib_id(p_attrib_name15); 
      END IF; 
      IF (p_attrib_name16 IS NOT NULL) THEN 
           l_attrib_id16 := get_attrib_id(p_attrib_name16); 
      END IF; 
      IF (p_attrib_name17 IS NOT NULL) THEN 
           l_attrib_id17 := get_attrib_id(p_attrib_name17); 
      END IF; 
      IF (p_attrib_name18 IS NOT NULL) THEN 
           l_attrib_id18 := get_attrib_id(p_attrib_name18);  
      END IF; 
      IF (p_attrib_name19 IS NOT NULL) THEN 
           l_attrib_id19 := get_attrib_id(p_attrib_name19); 
      END IF; 
      IF (p_attrib_name20 IS NOT NULL) THEN 
           l_attrib_id20 := get_attrib_id(p_attrib_name20); 
      END IF; 
    hz_party_search.call_api_dynamic( 
            p_init_msg_list, p_rule_id, 
            l_attrib_id1,l_attrib_id2,l_attrib_id3,l_attrib_id4,l_attrib_id5, 
            l_attrib_id6,l_attrib_id7,l_attrib_id8,l_attrib_id9,l_attrib_id10, 
            l_attrib_id11,l_attrib_id12,l_attrib_id13,l_attrib_id14,l_attrib_id15, 
            l_attrib_id16,l_attrib_id17,l_attrib_id18,l_attrib_id19,l_attrib_id20, 
            p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5, 
            p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10, 
            p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15, 
            p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20, 
            p_restrict_sql,p_api_name,p_match_type,p_party_id,p_search_merged, 
            x_search_ctx_id,x_num_matches, x_return_status, x_msg_count, x_msg_data);  
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic_names(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END call_api_dynamic_names; 
PROCEDURE get_matching_party_sites (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_site_list	     IN	     PARTY_SITE_LIST,
        p_contact_point_list    IN	     CONTACT_POINT_LIST,
        x_search_ctx_id         OUT     NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  l_num_matches NUMBER;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites-1(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     get_matching_party_sites(p_init_msg_list,p_rule_id,p_party_id,
            p_party_site_list,p_contact_point_list,
            NULL,NULL,x_search_ctx_id,
            l_num_matches,x_return_status,x_msg_count,x_msg_data);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites-1(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  END;
PROCEDURE get_matching_party_sites (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_site_list       IN      PARTY_SITE_LIST,
        p_contact_point_list    IN      CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.get_matching_party_sites(
        p_rule_id, p_party_id,p_party_site_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

PROCEDURE get_matching_contacts (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_list          IN      CONTACT_LIST,
        p_contact_point_list    IN      CONTACT_POINT_LIST,
        x_search_ctx_id         OUT     NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  l_num_matches NUMBER;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts-1(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     get_matching_contacts(p_init_msg_list,p_rule_id,p_party_id,
            p_contact_list,p_contact_point_list,
            NULL,NULL,x_search_ctx_id,
            l_num_matches,x_return_status,x_msg_count,x_msg_data);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts-1(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  END;
PROCEDURE get_matching_contacts (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_list	     IN	     CONTACT_LIST,
        p_contact_point_list    IN	     CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.get_matching_contacts(
        p_rule_id, p_party_id,p_contact_list, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  END;

PROCEDURE get_matching_contact_points (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_point_list    IN	     CONTACT_POINT_LIST,
        x_search_ctx_id         OUT     NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  l_num_matches NUMBER;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points-1(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     get_matching_contact_points(p_init_msg_list,p_rule_id,p_party_id,
            p_contact_point_list,
            NULL,NULL,x_search_ctx_id,
            l_num_matches,x_return_status,x_msg_count,x_msg_data);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points-1(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  END;
PROCEDURE get_matching_contact_points (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_point_list    IN	     CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.get_matching_contact_points(
        p_rule_id, p_party_id, p_contact_point_list,
        p_restrict_sql, p_match_type,null,x_search_ctx_id,x_num_matches);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;

PROCEDURE get_party_score_details (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_search_ctx_id         IN      NUMBER,
      p_party_search_rec      IN      party_search_rec_type,
      p_party_site_list       IN      party_site_list,
      p_contact_list          IN      contact_list,
      p_contact_point_list    IN      contact_point_list,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  l_search_ctx_id NUMBER;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score_details(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_search_ctx_id:=p_search_ctx_id;
     get_score_details(p_init_msg_list,p_rule_id,p_party_id,
            p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list,
            l_search_ctx_id,x_return_status,x_msg_count,x_msg_data);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  END;
PROCEDURE get_score_details (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_search_rec      IN      party_search_rec_type,
        p_party_site_list       IN      party_site_list,
        p_contact_list          IN      contact_list,
        p_contact_point_list    IN      contact_point_list,
        x_search_ctx_id         IN OUT  NUMBER,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_score_details(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.get_score_details(
        p_rule_id,
        p_party_id, p_party_search_rec,p_party_site_list,
        p_contact_list, p_contact_point_list,x_search_ctx_id);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_score_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;
PROCEDURE get_party_for_search (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        x_party_search_rec      OUT NOCOPY party_search_rec_type,
        x_party_site_list       OUT NOCOPY party_site_list,
        x_contact_list          OUT NOCOPY contact_list,
        x_contact_point_list    OUT NOCOPY contact_point_list,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_for_search(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.get_party_for_search(
        p_party_id, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_for_search(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;
PROCEDURE get_search_criteria (
        p_init_msg_list         IN      VARCHAR2:= FND_API.G_FALSE,
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_site_ids        IN      IDList,
        p_contact_ids           IN      IDList,
        p_contact_pt_ids        IN      IDList,
        x_party_search_rec      OUT NOCOPY party_search_rec_type,
        x_party_site_list       OUT NOCOPY party_site_list,
        x_contact_list          OUT NOCOPY contact_list,
        x_contact_point_list    OUT NOCOPY contact_point_list,
        x_return_status         OUT     VARCHAR2,
        x_msg_count             OUT     NUMBER,
        x_msg_data              OUT     VARCHAR2
) IS
  CURSOR c_match_rule IS 
    SELECT COMPILATION_FLAG 
    FROM HZ_MATCH_RULES_VL 
    WHERE MATCH_RULE_ID = p_rule_id;
  l_cmp_flag VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_search_criteria(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Rule ID '||p_rule_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- Initialize return status and message stack
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    IF p_rule_id IS NULL OR p_rule_id = 0 THEN
      -- No MATCH RULE FOUND
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    OPEN c_match_rule;
    FETCH c_match_rule INTO l_cmp_flag;
    IF c_match_rule%NOTFOUND OR l_cmp_flag <> 'C' THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_INVALID_MATCH_RULE');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- Code for Match rule SAMPLE: ORGANIZATIONS_OPTIMIZED
    IF p_rule_id=2 THEN 
      IF NOT HZ_MATCH_RULE_2.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_2.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: PERSON_OPTIMIZED
    ELSIF p_rule_id=3 THEN 
      IF NOT HZ_MATCH_RULE_3.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_3.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: ADDRESS_ORGANIZATIONS
    ELSIF p_rule_id=4 THEN 
      IF NOT HZ_MATCH_RULE_4.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_4.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: ADDRESS_PERSONS
    ELSIF p_rule_id=5 THEN 
      IF NOT HZ_MATCH_RULE_5.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_5.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SIMILAR_ORGANIZATION
    ELSIF p_rule_id=6 THEN 
      IF NOT HZ_MATCH_RULE_6.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_6.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SIMILAR_PERSON
    ELSIF p_rule_id=7 THEN 
      IF NOT HZ_MATCH_RULE_7.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_7.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH
    ELSIF p_rule_id=8 THEN 
      IF NOT HZ_MATCH_RULE_8.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_8.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule RM SEARCH RULE
    ELSIF p_rule_id=32 THEN 
      IF NOT HZ_MATCH_RULE_32.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_32.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE:BASIC SEARCH RULE
    ELSIF p_rule_id=33 THEN 
      IF NOT HZ_MATCH_RULE_33.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_33.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE:ADVANCED SEARCH RULE
    ELSIF p_rule_id=34 THEN 
      IF NOT HZ_MATCH_RULE_34.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_34.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL SMART SEARCH
    ELSIF p_rule_id=35 THEN 
      IF NOT HZ_MATCH_RULE_35.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_35.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL ADDRESS AND RELATIONSHIP SEARCH
    ELSIF p_rule_id=36 THEN 
      IF NOT HZ_MATCH_RULE_36.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_36.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL ADDRESS DEFAULT
    ELSIF p_rule_id=37 THEN 
      IF NOT HZ_MATCH_RULE_37.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_37.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL RELATIONSHIP DEFAULT
    ELSIF p_rule_id=38 THEN 
      IF NOT HZ_MATCH_RULE_38.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_38.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH ADDRESS ORGANIZATIONS EXACT
    ELSIF p_rule_id=39 THEN 
      IF NOT HZ_MATCH_RULE_39.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_39.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR ORGANIZATION EXACT
    ELSIF p_rule_id=40 THEN 
      IF NOT HZ_MATCH_RULE_40.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_40.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH SIMILAR PERSON EXACT
    ELSIF p_rule_id=41 THEN 
      IF NOT HZ_MATCH_RULE_41.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_41.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule SAMPLE: SEARCH EXACT
    ELSIF p_rule_id=42 THEN 
      IF NOT HZ_MATCH_RULE_42.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_42.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule DL SYSTEM DUPLICATE IDENTIFICATION
    ELSIF p_rule_id=48 THEN 
      IF NOT HZ_MATCH_RULE_48.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_48.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule BULK MATCH: IDENTICAL ORGANIZATIONS
    ELSIF p_rule_id=50 THEN 
      IF NOT HZ_MATCH_RULE_50.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_50.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule BULK MATCH: IDENTICAL PERSONS
    ELSIF p_rule_id=51 THEN 
      IF NOT HZ_MATCH_RULE_51.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_51.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule BULK MATCH: IDENTICAL PARTIES
    ELSIF p_rule_id=52 THEN 
      IF NOT HZ_MATCH_RULE_52.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_52.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule CREDIT MANAGEMENT SEARCH
    ELSIF p_rule_id=53 THEN 
      IF NOT HZ_MATCH_RULE_53.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_53.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_PERSON_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=58 THEN 
      IF NOT HZ_MATCH_RULE_58.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_58.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_PERSON_ADVANCED_SEARCH_MATCH_RULE
    ELSIF p_rule_id=60 THEN 
      IF NOT HZ_MATCH_RULE_60.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_60.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_ORG_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=61 THEN 
      IF NOT HZ_MATCH_RULE_61.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_61.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_ORG_ADV_SEARCH_RULE
    ELSIF p_rule_id=62 THEN 
      IF NOT HZ_MATCH_RULE_62.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_62.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_CONTACT_SIMPLE_SEARCH_RULE
    ELSIF p_rule_id=98 THEN 
      IF NOT HZ_MATCH_RULE_98.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_98.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule HZ_CONTACT_ADV_SEARCH_MATCH_RULE
    ELSIF p_rule_id=99 THEN 
      IF NOT HZ_MATCH_RULE_99.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_99.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule Web Services: Identical Organizations
    ELSIF p_rule_id=238 THEN 
      IF NOT HZ_MATCH_RULE_238.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_238.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    -- Code for Match rule Web Services: Identical Persons
    ELSIF p_rule_id=240 THEN 
      IF NOT HZ_MATCH_RULE_240.check_staged THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_MATCH_RULE_TX_NOT_STAGED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
      HZ_MATCH_RULE_240.get_search_criteria(
        p_party_id, p_party_site_ids, p_contact_ids, p_contact_pt_ids, x_party_search_rec,x_party_site_list,
        x_contact_list, x_contact_point_list);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_search_criteria(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
  --Standard call to get message count and if count is 1, get message info
  FND_MSG_PUB.Count_And_Get(
    p_encoded => FND_API.G_FALSE,
    p_count => x_msg_count,
    p_data  => x_msg_data);
  EXCEPTION
       WHEN FND_API.G_EXC_ERROR THEN
               x_return_status := FND_API.G_RET_STS_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
       WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);

       WHEN OTHERS THEN
               x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
               FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
               FND_MESSAGE.SET_TOKEN('PROC' ,'HZ_PARTY_SEARCH');
               FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
               FND_MSG_PUB.ADD;

               FND_MSG_PUB.Count_And_Get(
                               p_encoded => FND_API.G_FALSE,
                               p_count => x_msg_count,
                               p_data  => x_msg_data);
  END;
END;

/
