--------------------------------------------------------
--  DDL for Package Body FND_FLEXBUILDER_PARAMS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."FND_FLEXBUILDER_PARAMS_PKG" as
/* $Header: AFFBFBPB.pls 120.2.12010000.1 2008/07/25 14:13:32 appldev ship $ */

procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_FUNCTION_CODE in VARCHAR2,
  X_SEQUENCE in NUMBER,
  X_PARAMETER_NAME in VARCHAR2,
  X_ASSIGNMENT_TYPE in VARCHAR2,
  X_PARAMETER_TYPE in VARCHAR2,
  X_PROTECTED_FLAG in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_APPLICATION_COLUMN_NAME in VARCHAR2,
  X_SEGMENT_ATTRIBUTE_TYPE in VARCHAR2,
  X_CONDITIONAL_PARAMETER in VARCHAR2,
  X_CONDITIONAL_VALUE in VARCHAR2,
  X_CONSTANT_VALUE in VARCHAR2,
  X_FLEXFIELD_APPLICATION_ID in NUMBER,
  X_FLEX_VALUE_SET_ID in NUMBER,
  X_ASSIGNMENT_VALUE_SET_ID in NUMBER,
  X_VALUE_SET_MATCH_REQUIRED_FLA in VARCHAR2,
  X_ID_FLEX_CODE in VARCHAR2,
  X_ID_FLEX_NUM in NUMBER,
  X_ID_PARAMETER in VARCHAR2,
  X_OUTPUT_COLUMN in VARCHAR2,
  X_SOURCE_PARAMETER in VARCHAR2,
  X_USER_PARAMETER_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from FND_FLEXBUILDER_PARAMETERS
    where APPLICATION_ID = X_APPLICATION_ID
    and FUNCTION_CODE = X_FUNCTION_CODE
    and SEQUENCE = X_SEQUENCE
    and PARAMETER_NAME = X_PARAMETER_NAME
    ;
begin
  insert into FND_FLEXBUILDER_PARAMETERS (
    APPLICATION_ID,
    FUNCTION_CODE,
    SEQUENCE,
    PARAMETER_NAME,
    ASSIGNMENT_TYPE,
    PARAMETER_TYPE,
    PROTECTED_FLAG,
    DESCRIPTION,
    APPLICATION_COLUMN_NAME,
    SEGMENT_ATTRIBUTE_TYPE,
    CONDITIONAL_PARAMETER,
    CONDITIONAL_VALUE,
    CONSTANT_VALUE,
    FLEXFIELD_APPLICATION_ID,
    FLEX_VALUE_SET_ID,
    ASSIGNMENT_VALUE_SET_ID,
    VALUE_SET_MATCH_REQUIRED_FLAG,
    ID_FLEX_CODE,
    ID_FLEX_NUM,
    ID_PARAMETER,
    OUTPUT_COLUMN,
    SOURCE_PARAMETER,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_APPLICATION_ID,
    X_FUNCTION_CODE,
    X_SEQUENCE,
    X_PARAMETER_NAME,
    X_ASSIGNMENT_TYPE,
    X_PARAMETER_TYPE,
    X_PROTECTED_FLAG,
    X_DESCRIPTION,
    X_APPLICATION_COLUMN_NAME,
    X_SEGMENT_ATTRIBUTE_TYPE,
    X_CONDITIONAL_PARAMETER,
    X_CONDITIONAL_VALUE,
    X_CONSTANT_VALUE,
    X_FLEXFIELD_APPLICATION_ID,
    X_FLEX_VALUE_SET_ID,
    X_ASSIGNMENT_VALUE_SET_ID,
    X_VALUE_SET_MATCH_REQUIRED_FLA,
    X_ID_FLEX_CODE,
    X_ID_FLEX_NUM,
    X_ID_PARAMETER,
    X_OUTPUT_COLUMN,
    X_SOURCE_PARAMETER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into FND_FLEXBUILDER_PARAMS_TL (
    APPLICATION_ID,
    FUNCTION_CODE,
    SEQUENCE,
    PARAMETER_NAME,
    USER_PARAMETER_NAME,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_APPLICATION_ID,
    X_FUNCTION_CODE,
    X_SEQUENCE,
    X_PARAMETER_NAME,
    X_USER_PARAMETER_NAME,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from FND_FLEXBUILDER_PARAMS_TL T
    where T.APPLICATION_ID = X_APPLICATION_ID
    and T.FUNCTION_CODE = X_FUNCTION_CODE
    and T.SEQUENCE = X_SEQUENCE
    and T.PARAMETER_NAME = X_PARAMETER_NAME
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_APPLICATION_ID in NUMBER,
  X_FUNCTION_CODE in VARCHAR2,
  X_SEQUENCE in NUMBER,
  X_PARAMETER_NAME in VARCHAR2,
  X_ASSIGNMENT_TYPE in VARCHAR2,
  X_PARAMETER_TYPE in VARCHAR2,
  X_PROTECTED_FLAG in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_APPLICATION_COLUMN_NAME in VARCHAR2,
  X_SEGMENT_ATTRIBUTE_TYPE in VARCHAR2,
  X_CONDITIONAL_PARAMETER in VARCHAR2,
  X_CONDITIONAL_VALUE in VARCHAR2,
  X_CONSTANT_VALUE in VARCHAR2,
  X_FLEXFIELD_APPLICATION_ID in NUMBER,
  X_FLEX_VALUE_SET_ID in NUMBER,
  X_ASSIGNMENT_VALUE_SET_ID in NUMBER,
  X_VALUE_SET_MATCH_REQUIRED_FLA in VARCHAR2,
  X_ID_FLEX_CODE in VARCHAR2,
  X_ID_FLEX_NUM in NUMBER,
  X_ID_PARAMETER in VARCHAR2,
  X_OUTPUT_COLUMN in VARCHAR2,
  X_SOURCE_PARAMETER in VARCHAR2,
  X_USER_PARAMETER_NAME in VARCHAR2
) is
  cursor c is select
      ASSIGNMENT_TYPE,
      PARAMETER_TYPE,
      PROTECTED_FLAG,
      DESCRIPTION,
      APPLICATION_COLUMN_NAME,
      SEGMENT_ATTRIBUTE_TYPE,
      CONDITIONAL_PARAMETER,
      CONDITIONAL_VALUE,
      CONSTANT_VALUE,
      FLEXFIELD_APPLICATION_ID,
      FLEX_VALUE_SET_ID,
      ASSIGNMENT_VALUE_SET_ID,
      VALUE_SET_MATCH_REQUIRED_FLAG,
      ID_FLEX_CODE,
      ID_FLEX_NUM,
      ID_PARAMETER,
      OUTPUT_COLUMN,
      SOURCE_PARAMETER
    from FND_FLEXBUILDER_PARAMETERS
    where APPLICATION_ID = X_APPLICATION_ID
    and FUNCTION_CODE = X_FUNCTION_CODE
    and SEQUENCE = X_SEQUENCE
    and PARAMETER_NAME = X_PARAMETER_NAME
    for update of APPLICATION_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      USER_PARAMETER_NAME
    from FND_FLEXBUILDER_PARAMS_TL
    where APPLICATION_ID = X_APPLICATION_ID
    and FUNCTION_CODE = X_FUNCTION_CODE
    and SEQUENCE = X_SEQUENCE
    and PARAMETER_NAME = X_PARAMETER_NAME
    and LANGUAGE = userenv('LANG')
    for update of APPLICATION_ID nowait;
  tlinfo c1%rowtype;

begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    (recinfo.ASSIGNMENT_TYPE = X_ASSIGNMENT_TYPE)
      AND (recinfo.PARAMETER_TYPE = X_PARAMETER_TYPE)
      AND (recinfo.PROTECTED_FLAG = X_PROTECTED_FLAG)
      AND ((recinfo.DESCRIPTION = X_DESCRIPTION)
           OR ((recinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      AND ((recinfo.APPLICATION_COLUMN_NAME = X_APPLICATION_COLUMN_NAME)
           OR ((recinfo.APPLICATION_COLUMN_NAME is null) AND (X_APPLICATION_COLUMN_NAME is null)))
      AND ((recinfo.SEGMENT_ATTRIBUTE_TYPE = X_SEGMENT_ATTRIBUTE_TYPE)
           OR ((recinfo.SEGMENT_ATTRIBUTE_TYPE is null) AND (X_SEGMENT_ATTRIBUTE_TYPE is null)))
      AND ((recinfo.CONDITIONAL_PARAMETER = X_CONDITIONAL_PARAMETER)
           OR ((recinfo.CONDITIONAL_PARAMETER is null) AND (X_CONDITIONAL_PARAMETER is null)))
      AND ((recinfo.CONDITIONAL_VALUE = X_CONDITIONAL_VALUE)
           OR ((recinfo.CONDITIONAL_VALUE is null) AND (X_CONDITIONAL_VALUE is null)))
      AND ((recinfo.CONSTANT_VALUE = X_CONSTANT_VALUE)
           OR ((recinfo.CONSTANT_VALUE is null) AND (X_CONSTANT_VALUE is null)))
      AND ((recinfo.FLEXFIELD_APPLICATION_ID = X_FLEXFIELD_APPLICATION_ID)
           OR ((recinfo.FLEXFIELD_APPLICATION_ID is null) AND (X_FLEXFIELD_APPLICATION_ID is null)))
      AND ((recinfo.FLEX_VALUE_SET_ID = X_FLEX_VALUE_SET_ID)
           OR ((recinfo.FLEX_VALUE_SET_ID is null) AND (X_FLEX_VALUE_SET_ID is null)))
      AND ((recinfo.ASSIGNMENT_VALUE_SET_ID = X_ASSIGNMENT_VALUE_SET_ID)
           OR ((recinfo.ASSIGNMENT_VALUE_SET_ID is null) AND (X_ASSIGNMENT_VALUE_SET_ID is null)))
      AND ((recinfo.VALUE_SET_MATCH_REQUIRED_FLAG = X_VALUE_SET_MATCH_REQUIRED_FLA)
           OR ((recinfo.VALUE_SET_MATCH_REQUIRED_FLAG is null) AND (X_VALUE_SET_MATCH_REQUIRED_FLA is null)))
      AND ((recinfo.ID_FLEX_CODE = X_ID_FLEX_CODE)
           OR ((recinfo.ID_FLEX_CODE is null) AND (X_ID_FLEX_CODE is null)))
      AND ((recinfo.ID_FLEX_NUM = X_ID_FLEX_NUM)
           OR ((recinfo.ID_FLEX_NUM is null) AND (X_ID_FLEX_NUM is null)))
      AND ((recinfo.ID_PARAMETER = X_ID_PARAMETER)
           OR ((recinfo.ID_PARAMETER is null) AND (X_ID_PARAMETER is null)))
      AND ((recinfo.OUTPUT_COLUMN = X_OUTPUT_COLUMN)
           OR ((recinfo.OUTPUT_COLUMN is null) AND (X_OUTPUT_COLUMN is null)))
      AND ((recinfo.SOURCE_PARAMETER = X_SOURCE_PARAMETER)
           OR ((recinfo.SOURCE_PARAMETER is null) AND (X_SOURCE_PARAMETER is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  open c1;
  fetch c1 into tlinfo;
  if (c1%notfound) then
    close c1;
    return;
  end if;
  close c1;

  if (    (tlinfo.USER_PARAMETER_NAME = X_USER_PARAMETER_NAME)
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_FUNCTION_CODE in VARCHAR2,
  X_SEQUENCE in NUMBER,
  X_PARAMETER_NAME in VARCHAR2,
  X_ASSIGNMENT_TYPE in VARCHAR2,
  X_PARAMETER_TYPE in VARCHAR2,
  X_PROTECTED_FLAG in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_APPLICATION_COLUMN_NAME in VARCHAR2,
  X_SEGMENT_ATTRIBUTE_TYPE in VARCHAR2,
  X_CONDITIONAL_PARAMETER in VARCHAR2,
  X_CONDITIONAL_VALUE in VARCHAR2,
  X_CONSTANT_VALUE in VARCHAR2,
  X_FLEXFIELD_APPLICATION_ID in NUMBER,
  X_FLEX_VALUE_SET_ID in NUMBER,
  X_ASSIGNMENT_VALUE_SET_ID in NUMBER,
  X_VALUE_SET_MATCH_REQUIRED_FLA in VARCHAR2,
  X_ID_FLEX_CODE in VARCHAR2,
  X_ID_FLEX_NUM in NUMBER,
  X_ID_PARAMETER in VARCHAR2,
  X_OUTPUT_COLUMN in VARCHAR2,
  X_SOURCE_PARAMETER in VARCHAR2,
  X_USER_PARAMETER_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update FND_FLEXBUILDER_PARAMETERS set
    ASSIGNMENT_TYPE = X_ASSIGNMENT_TYPE,
    PARAMETER_TYPE = X_PARAMETER_TYPE,
    PROTECTED_FLAG = X_PROTECTED_FLAG,
    DESCRIPTION = X_DESCRIPTION,
    APPLICATION_COLUMN_NAME = X_APPLICATION_COLUMN_NAME,
    SEGMENT_ATTRIBUTE_TYPE = X_SEGMENT_ATTRIBUTE_TYPE,
    CONDITIONAL_PARAMETER = X_CONDITIONAL_PARAMETER,
    CONDITIONAL_VALUE = X_CONDITIONAL_VALUE,
    CONSTANT_VALUE = X_CONSTANT_VALUE,
    FLEXFIELD_APPLICATION_ID = X_FLEXFIELD_APPLICATION_ID,
    FLEX_VALUE_SET_ID = X_FLEX_VALUE_SET_ID,
    ASSIGNMENT_VALUE_SET_ID = X_ASSIGNMENT_VALUE_SET_ID,
    VALUE_SET_MATCH_REQUIRED_FLAG = X_VALUE_SET_MATCH_REQUIRED_FLA,
    ID_FLEX_CODE = X_ID_FLEX_CODE,
    ID_FLEX_NUM = X_ID_FLEX_NUM,
    ID_PARAMETER = X_ID_PARAMETER,
    OUTPUT_COLUMN = X_OUTPUT_COLUMN,
    SOURCE_PARAMETER = X_SOURCE_PARAMETER,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where APPLICATION_ID = X_APPLICATION_ID
  and FUNCTION_CODE = X_FUNCTION_CODE
  and SEQUENCE = X_SEQUENCE
  and PARAMETER_NAME = X_PARAMETER_NAME;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update FND_FLEXBUILDER_PARAMS_TL set
    USER_PARAMETER_NAME = X_USER_PARAMETER_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where APPLICATION_ID = X_APPLICATION_ID
  and FUNCTION_CODE = X_FUNCTION_CODE
  and SEQUENCE = X_SEQUENCE
  and PARAMETER_NAME = X_PARAMETER_NAME
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_FUNCTION_CODE in VARCHAR2,
  X_SEQUENCE in NUMBER,
  X_PARAMETER_NAME in VARCHAR2
) is
begin
  delete from FND_FLEXBUILDER_PARAMETERS
  where APPLICATION_ID = X_APPLICATION_ID
  and FUNCTION_CODE = X_FUNCTION_CODE
  and SEQUENCE = X_SEQUENCE
  and PARAMETER_NAME = X_PARAMETER_NAME;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from FND_FLEXBUILDER_PARAMS_TL
  where APPLICATION_ID = X_APPLICATION_ID
  and FUNCTION_CODE = X_FUNCTION_CODE
  and SEQUENCE = X_SEQUENCE
  and PARAMETER_NAME = X_PARAMETER_NAME;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
 is
 begin
/* Mar/19/03 requested by Ric Ginsberg */
/* The following delete and update statements are commented out */
/* as a quick workaround to fix the time-consuming table handler issue */
/* Eventually we'll need to turn them into a separate fix_language procedure */
/*

   delete from FND_FLEXBUILDER_PARAMS_TL T
   where not exists
     (select NULL
     from FND_FLEXBUILDER_PARAMETERS B
     where B.APPLICATION_ID = T.APPLICATION_ID
     and B.FUNCTION_CODE = T.FUNCTION_CODE
     and B.SEQUENCE = T.SEQUENCE
     and B.PARAMETER_NAME = T.PARAMETER_NAME
     );

   update FND_FLEXBUILDER_PARAMS_TL T set (
       USER_PARAMETER_NAME
     ) = (select
       B.USER_PARAMETER_NAME
     from FND_FLEXBUILDER_PARAMS_TL B
     where B.APPLICATION_ID = T.APPLICATION_ID
     and B.FUNCTION_CODE = T.FUNCTION_CODE
     and B.SEQUENCE = T.SEQUENCE
     and B.PARAMETER_NAME = T.PARAMETER_NAME
     and B.LANGUAGE = T.SOURCE_LANG)
   where (
       T.APPLICATION_ID,
       T.FUNCTION_CODE,
       T.SEQUENCE,
       T.PARAMETER_NAME,
       T.LANGUAGE
   ) in (select
       SUBT.APPLICATION_ID,
       SUBT.FUNCTION_CODE,
       SUBT.SEQUENCE,
       SUBT.PARAMETER_NAME,
       SUBT.LANGUAGE
     from FND_FLEXBUILDER_PARAMS_TL SUBB, FND_FLEXBUILDER_PARAMS_TL SUBT
     where SUBB.APPLICATION_ID = SUBT.APPLICATION_ID
     and SUBB.FUNCTION_CODE = SUBT.FUNCTION_CODE
     and SUBB.SEQUENCE = SUBT.SEQUENCE
     and SUBB.PARAMETER_NAME = SUBT.PARAMETER_NAME
     and SUBB.LANGUAGE = SUBT.SOURCE_LANG
     and (SUBB.USER_PARAMETER_NAME <> SUBT.USER_PARAMETER_NAME
   ));
*/

   insert into FND_FLEXBUILDER_PARAMS_TL (
     APPLICATION_ID,
     FUNCTION_CODE,
     SEQUENCE,
     PARAMETER_NAME,
     USER_PARAMETER_NAME,
     LAST_UPDATE_DATE,
     LAST_UPDATED_BY,
     CREATION_DATE,
     CREATED_BY,
     LAST_UPDATE_LOGIN,
     LANGUAGE,
     SOURCE_LANG
   ) select
     B.APPLICATION_ID,
     B.FUNCTION_CODE,
     B.SEQUENCE,
     B.PARAMETER_NAME,
     B.USER_PARAMETER_NAME,
     B.LAST_UPDATE_DATE,
     B.LAST_UPDATED_BY,
     B.CREATION_DATE,
     B.CREATED_BY,
     B.LAST_UPDATE_LOGIN,
     L.LANGUAGE_CODE,
     B.SOURCE_LANG
   from FND_FLEXBUILDER_PARAMS_TL B, FND_LANGUAGES L
   where L.INSTALLED_FLAG in ('I', 'B')
   and B.LANGUAGE = userenv('LANG')
   and not exists
     (select NULL
     from FND_FLEXBUILDER_PARAMS_TL T
     where T.APPLICATION_ID = B.APPLICATION_ID
     and T.FUNCTION_CODE = B.FUNCTION_CODE
     and T.SEQUENCE = B.SEQUENCE
     and T.PARAMETER_NAME = B.PARAMETER_NAME
     and T.LANGUAGE = L.LANGUAGE_CODE);

end ADD_LANGUAGE;

end FND_FLEXBUILDER_PARAMS_PKG;

/
