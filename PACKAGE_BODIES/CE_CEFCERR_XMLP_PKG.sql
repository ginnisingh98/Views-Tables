--------------------------------------------------------
--  DDL for Package Body CE_CEFCERR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CE_CEFCERR_XMLP_PKG" AS
/* $Header: CEFCERRBB.pls 120.0 2007/12/28 10:33:00 abraghun noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      BEGIN
        SELECT
          L.MEANING
        INTO
          C_ALL_TRANSLATION
        FROM
          CE_LOOKUPS L
        WHERE L.LOOKUP_TYPE = 'LITERAL'
          AND L.LOOKUP_CODE = 'ALL';
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      IF (P_FORECAST_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            CFH.NAME,
            CF.FORECAST_CURRENCY,
            CF.NAME
          INTO
            C_TEMPLATE_NAME
            ,C_FORECAST_CURRENCY
            ,C_FORECAST_NAME
          FROM
            CE_FORECAST_HEADERS CFH,
            CE_FORECASTS CF,
            CE_LOOKUPS L
          WHERE L.LOOKUP_TYPE = 'FORECAST_AGING_TYPE'
            AND L.LOOKUP_CODE = CFH.AGING_TYPE
            AND CFH.FORECAST_HEADER_ID = CF.FORECAST_HEADER_ID
            AND CF.FORECAST_ID = P_FORECAST_ID;
        EXCEPTION
          WHEN OTHERS THEN
            SET_NAME('CE'
                    ,'CE_FC_NO_HEADER');
		    FND_MESSAGE.SET_NAME('CE', 'CE_FC_NO_HEADER');
            L_MESSAGE := GET;
            RAISE_APPLICATION_ERROR(-20101
                                   ,NULL);
        END;
      ELSE
        C_TEMPLATE_NAME := C_ALL_TRANSLATION;
        C_FORECAST_NAME := C_ALL_TRANSLATION;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_PRT_MESSAGE_NAMEFORMULA(APPLICATION_SHORT_NAME IN VARCHAR2
                                    ,MESSAGE_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      SET_NAME(APPLICATION_SHORT_NAME
              ,MESSAGE_NAME);
	      FND_MESSAGE.SET_NAME(APPLICATION_SHORT_NAME, MESSAGE_NAME);
      L_MESSAGE := GET;
      RETURN (L_MESSAGE);
    END;
    RETURN NULL;
  END C_PRT_MESSAGE_NAMEFORMULA;

  FUNCTION G_INTERFACEGROUPFILTER(FORECAST_NAME IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF FORECAST_NAME = '' THEN
      C_THE_END := 'N';
    ELSE
      C_THE_END := 'Y';
    END IF;
    RETURN (TRUE);
    RETURN (TRUE);
  END G_INTERFACEGROUPFILTER;

  FUNCTION C_DATEFORMATFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN null;
  END C_DATEFORMATFORMULA;

  FUNCTION C_THE_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_THE_END;
  END C_THE_END_P;

  FUNCTION C_ALL_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_TRANSLATION;
  END C_ALL_TRANSLATION_P;

  FUNCTION C_FORECAST_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FORECAST_CURRENCY;
  END C_FORECAST_CURRENCY_P;

  FUNCTION C_AGING_TYPE_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_AGING_TYPE_DSP;
  END C_AGING_TYPE_DSP_P;

  FUNCTION C_FORECAST_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FORECAST_NAME;
  END C_FORECAST_NAME_P;

  FUNCTION C_TEMPLATE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TEMPLATE_NAME;
  END C_TEMPLATE_NAME_P;

  FUNCTION C_AGING_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_AGING_TYPE;
  END C_AGING_TYPE_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_NAME(APPLICATION, NAME);
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN number) IS

  BEGIN
  declare
  TRANSLATE_1 boolean;
   /* STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/
    begin
TRANSLATE_1 := sys.diutil.int_to_bool(TRANSLATE);
end;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/
FND_MESSAGE.RETRIEVE(MSGOUT);
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/
FND_MESSAGE.CLEAR;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		  X0 := FND_MESSAGE.GET_STRING(APPIN, NAMEIN);
    RETURN X0;
  END GET_STRING;

  FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET_NUMBER(APPIN, NAMEIN);
    RETURN X0;
  END GET_NUMBER;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET_ENCODED;
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/
		   FND_MESSAGE.PARSE_ENCODED(ENCODED_MESSAGE, APP_SHORT_NAME, MESSAGE_NAME);
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/
FND_MESSAGE.SET_ENCODED(ENCODED_MESSAGE);
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/
FND_MESSAGE.RAISE_ERROR;
  END RAISE_ERROR;

END CE_CEFCERR_XMLP_PKG;


/
