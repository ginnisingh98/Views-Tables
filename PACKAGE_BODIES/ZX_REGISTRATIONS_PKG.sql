--------------------------------------------------------
--  DDL for Package Body ZX_REGISTRATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ZX_REGISTRATIONS_PKG" as
/* $Header: zxcregb.pls 120.10 2005/09/16 23:28:22 dbetanco ship $ */

procedure INSERT_ROW (
  P_REQUEST_ID in NUMBER,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_VALIDATION_RULE in VARCHAR2,
  P_ROUNDING_RULE_CODE in VARCHAR2,
  P_TAX_JURISDICTION_CODE in VARCHAR2,
  P_SELF_ASSESS_FLAG in VARCHAR2,
  P_REGISTRATION_STATUS_CODE in VARCHAR2,
  P_REGISTRATION_SOURCE_CODE in VARCHAR2,
  P_REGISTRATION_REASON_CODE in VARCHAR2,
  P_TAX in VARCHAR2,
  P_TAX_REGIME_CODE in VARCHAR2,
  P_INCLUSIVE_TAX_FLAG in VARCHAR2,
  P_EFFECTIVE_FROM in DATE,
  P_EFFECTIVE_TO in DATE,
  P_REP_PARTY_TAX_NAME in VARCHAR2,
  P_DEFAULT_REGISTRATION_FLAG in VARCHAR2,
  P_BANK_ACCOUNT_NUM in VARCHAR2,
  P_RECORD_TYPE_CODE in VARCHAR2,
  P_LEGAL_LOCATION_ID in NUMBER,
  P_TAX_AUTHORITY_ID in NUMBER,
  P_REP_TAX_AUTHORITY_ID in NUMBER,
  P_COLL_TAX_AUTHORITY_ID in NUMBER,
  P_REGISTRATION_TYPE_CODE in VARCHAR2,
  P_REGISTRATION_NUMBER in VARCHAR2,
  P_PARTY_TAX_PROFILE_ID in NUMBER,
  P_LEGAL_REGISTRATION_ID in NUMBER,
  P_BANK_ID in NUMBER,
  P_BANK_BRANCH_ID in NUMBER,
  P_ACCOUNT_SITE_ID in NUMBER,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_PROGRAM_LOGIN_ID in NUMBER,
  P_ACCOUNT_ID in NUMBER,
  P_TAX_CLASSIFICATION_CODE in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  X_RETURN_STATUS out NOCOPY VARCHAR2
) is
  L_REGISTRATION_ID	ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_DEF_REGISTRATION_ID	ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_REG_ID		ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_REG_ID1		ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_INCLUSIVE_TAX_FLAG  ZX_REGISTRATIONS.INCLUSIVE_TAX_FLAG%TYPE;
  L_SELF_ASSESS_FLAG	ZX_REGISTRATIONS.SELF_ASSESS_FLAG%TYPE;
  L_ROUNDING_RULE_CODE  ZX_REGISTRATIONS.ROUNDING_RULE_CODE%TYPE;
  L_COUNTRY_CODE	ZX_REGIMES_B.COUNTRY_CODE%TYPE;
  L_PARTY_TYPE_CODE	ZX_PARTY_TAX_PROFILE.PARTY_TYPE_CODE%TYPE;
  x_party_type_token    VARCHAR2(1000);
  x_party_name_token    VARCHAR2(5000);
  x_party_site_name_token  VARCHAR2(5000);
  x_error_buffer   	VARCHAR2(80);
  x_return_status1  	VARCHAR2(80);
  CURSOR reg_cur IS SELECT REGISTRATION_ID FROM ZX_REGISTRATIONS
  WHERE REGISTRATION_ID = L_REGISTRATION_ID;
  --Get Default Registration for current PTP_ID
  CURSOR default_reg_cur IS SELECT REGISTRATION_ID FROM ZX_REGISTRATIONS
  WHERE PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID
  AND DEFAULT_REGISTRATION_FLAG = 'Y';
begin
  --Initialise x_return_status variable
  X_RETURN_STATUS :=  FND_API.G_RET_STS_SUCCESS;
  --Inclusive_tax_flag, ROUNDING_RULE_CODE and self_assess_flag for tax registrations are defaulted primary from party tax profile.
  BEGIN
    select	INCLUSIVE_TAX_FLAG, SELF_ASSESS_FLAG, ROUNDING_RULE_CODE, PARTY_TYPE_CODE
    INTO	L_INCLUSIVE_TAX_FLAG, L_SELF_ASSESS_FLAG, L_ROUNDING_RULE_CODE, L_PARTY_TYPE_CODE
    from	ZX_PARTY_TAX_PROFILE
    where	PARTY_TAX_PROFILE_ID =  P_PARTY_TAX_PROFILE_ID;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
      arp_util_tax.debug('Error: "No Party created in ZX_PARTY_TAX_PROFILE for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END;
  --Effective From cannot be null
  IF P_EFFECTIVE_FROM IS NULL THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Effective From cannot be null for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  --Tax Regime Code cannot be null
  IF P_TAX_REGIME_CODE IS NULL THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Tax Regime Code cannot be null for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  IF (P_EFFECTIVE_FROM IS NOT NULL) AND (P_EFFECTIVE_FROM > P_EFFECTIVE_TO) THEN
      X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
      arp_util_tax.debug('Error: "The Effective To date must be the same as or after the Effective From date. for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  IF (P_TAX IS NULL) AND (P_TAX_JURISDICTION_CODE IS NOT NULL) THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Tax must be entered if the Tax Jursidiction Code has been specified for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  --Tax is mandatory when Jurisdiction is not null
  IF (P_TAX_REGIME_CODE IS NOT NULL) AND (P_PARTY_TAX_PROFILE_ID IS NOT NULL) THEN
    --Registration should be unique
    BEGIN
      SELECT  REGISTRATION_ID
      INTO    L_REG_ID
      FROM    ZX_REGISTRATIONS
      WHERE   ((P_EFFECTIVE_TO  is NULL AND  EFFECTIVE_TO  is NULL)
      OR      (P_EFFECTIVE_FROM   BETWEEN   EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO,P_EFFECTIVE_TO )  )
      OR      ( NVL(P_EFFECTIVE_TO, EFFECTIVE_TO+1)  BETWEEN                 EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO ,P_EFFECTIVE_TO )  )
      OR      (P_EFFECTIVE_FROM < EFFECTIVE_FROM
      AND     (NVL(P_EFFECTIVE_TO, EFFECTIVE_TO) > EFFECTIVE_TO OR P_EFFECTIVE_TO IS NULL)))
      AND     (REGISTRATION_NUMBER = P_REGISTRATION_NUMBER OR (P_REGISTRATION_NUMBER IS NULL and REGISTRATION_NUMBER is null))
      AND     TAX_REGIME_CODE = P_TAX_REGIME_CODE
      AND     (TAX = P_TAX OR (P_TAX IS NULL and TAX is null))
      AND     (TAX_JURISDICTION_CODE = P_TAX_JURISDICTION_CODE OR (P_TAX_JURISDICTION_CODE IS NULL and TAX_JURISDICTION_CODE is null))
      AND     PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    --Registration should be unique at each level
    BEGIN
      SELECT  REGISTRATION_ID
      INTO    L_REG_ID1
      FROM    ZX_REGISTRATIONS
      WHERE   ((P_EFFECTIVE_TO  is NULL AND  EFFECTIVE_TO  is NULL)
      OR      (P_EFFECTIVE_FROM   BETWEEN   EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO,P_EFFECTIVE_TO )  )
      OR      ( NVL(P_EFFECTIVE_TO, EFFECTIVE_TO+1)  BETWEEN                 EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO ,P_EFFECTIVE_TO )  )
      OR      (P_EFFECTIVE_FROM < EFFECTIVE_FROM
      AND     (NVL(P_EFFECTIVE_TO, EFFECTIVE_TO) > EFFECTIVE_TO OR P_EFFECTIVE_TO IS NULL)))
      AND     NOT(REGISTRATION_NUMBER = P_REGISTRATION_NUMBER OR (P_REGISTRATION_NUMBER IS NULL and REGISTRATION_NUMBER is null))
      AND     TAX_REGIME_CODE = P_TAX_REGIME_CODE
      AND     (TAX = P_TAX OR (P_TAX IS NULL and TAX is null))
      AND     (TAX_JURISDICTION_CODE = P_TAX_JURISDICTION_CODE OR (P_TAX_JURISDICTION_CODE IS NULL and TAX_JURISDICTION_CODE is null))
      AND     PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        NULL;
    END;
  END IF;
  IF L_REG_ID IS NOT NULL THEN
      X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
      arp_util_tax.debug('Error: "The registration details already exist for this party for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  IF L_REG_ID1 IS NOT NULL THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "This party already has a registration for this Jurisdiction for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  --If the registration is marked as default, then registration number must be entered.
  IF P_DEFAULT_REGISTRATION_FLAG = 'Y' AND P_REGISTRATION_NUMBER IS NULL THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Tax Registration Number is not valid for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  --Check RegistrationNumber validity
  ELSIF (P_REGISTRATION_NUMBER IS NOT NULL AND P_LEGAL_REGISTRATION_ID IS NULL) THEN
    BEGIN
      BEGIN
        SELECT 	COUNTRY_CODE
        INTO 	L_COUNTRY_CODE
        FROM 	ZX_REGIMES_B
        WHERE 	TAX_REGIME_CODE = P_TAX_REGIME_CODE;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
          arp_util_tax.debug('Error: "No CountryCOde exists in ZX_REGIMES_B for the Registration with Regime : "
           ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
      END;
/*
      ZX_TRN_VALIDATION_PKG.VALIDATE_TRN
	(l_country_code,
	p_registration_number,
	p_tax_regime_code,
	p_tax,
	p_party_tax_profile_id,
	l_party_type_code,
	p_registration_type_code,
	x_error_buffer,
	x_return_status1,
	x_party_type_token,
	x_party_name_token,
	x_party_site_name_token
      );
*/
      x_return_status1 := 'S'; -- P1
      IF   x_return_status1 <> 'S' THEN
        X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
        arp_util_tax.debug('Error: "Registration Number is invalid for the Registration with Regime : "
        ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
      END IF;
    END;
  END IF;
  -- Check the Default Registration status and accordingly populates corresponding
  -- Registration Number to PartyTaxProfile entity
  IF P_DEFAULT_REGISTRATION_FLAG = 'Y' THEN
    OPEN default_reg_cur;
    FETCH default_reg_cur INTO L_DEF_REGISTRATION_ID;
    --If this is the only defaulted registration then update PTP
    IF (default_reg_cur%notfound) AND (X_RETURN_STATUS = FND_API.G_RET_STS_SUCCESS) then
      --Update PTP
      UPDATE ZX_PARTY_TAX_PROFILE
	 SET Rep_Registration_Number = P_REGISTRATION_NUMBER,
	     Object_Version_Number = Object_Version_Number + 1
	WHERE PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID
	 ;
    ELSE
        X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
        arp_util_tax.debug('Error: "Already a Regiatration has been defaulted for Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
    END IF;
    CLOSE default_reg_cur;
  END IF;--end P_DEFAULT_REGISTRATION_FLAG
  --Insert only when there is no error
  IF X_RETURN_STATUS =  FND_API.G_RET_STS_SUCCESS THEN
    select ZX_REGISTRATIONS_S.nextval into L_REGISTRATION_ID from dual;
    insert into ZX_REGISTRATIONS (
    REQUEST_ID,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    VALIDATION_RULE,
    ROUNDING_RULE_CODE,
    TAX_JURISDICTION_CODE,
    SELF_ASSESS_FLAG,
    REGISTRATION_STATUS_CODE,
    REGISTRATION_SOURCE_CODE,
    REGISTRATION_REASON_CODE,
    TAX,
    TAX_REGIME_CODE,
    INCLUSIVE_TAX_FLAG,
    EFFECTIVE_FROM,
    EFFECTIVE_TO,
    REP_PARTY_TAX_NAME,
    DEFAULT_REGISTRATION_FLAG,
    BANK_ACCOUNT_NUM,
    RECORD_TYPE_CODE,
    REGISTRATION_ID,
    LEGAL_LOCATION_ID,
    TAX_AUTHORITY_ID,
    REP_TAX_AUTHORITY_ID,
    COLL_TAX_AUTHORITY_ID,
    REGISTRATION_TYPE_CODE,
    REGISTRATION_NUMBER,
    PARTY_TAX_PROFILE_ID,
    LEGAL_REGISTRATION_ID,
    BANK_ID,
    BANK_BRANCH_ID,
    ACCOUNT_SITE_ID,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE_CATEGORY,
    PROGRAM_LOGIN_ID,
    ACCOUNT_ID,
    TAX_CLASSIFICATION_CODE,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER
    ) values (
    P_REQUEST_ID,
    P_ATTRIBUTE1,
    P_ATTRIBUTE2,
    P_ATTRIBUTE3,
    P_ATTRIBUTE4,
    P_ATTRIBUTE5,
    P_ATTRIBUTE6,
    P_VALIDATION_RULE,
    NVL(P_ROUNDING_RULE_CODE, L_ROUNDING_RULE_CODE),
    P_TAX_JURISDICTION_CODE,
    NVL(P_SELF_ASSESS_FLAG, L_SELF_ASSESS_FLAG),
    P_REGISTRATION_STATUS_CODE,
    P_REGISTRATION_SOURCE_CODE,
    P_REGISTRATION_REASON_CODE,
    P_TAX,
    P_TAX_REGIME_CODE,
    NVL(P_INCLUSIVE_TAX_FLAG, L_INCLUSIVE_TAX_FLAG),
    NVL(P_EFFECTIVE_FROM, SYSDATE),
    P_EFFECTIVE_TO,
    P_REP_PARTY_TAX_NAME,
    P_DEFAULT_REGISTRATION_FLAG,
    P_BANK_ACCOUNT_NUM,
    P_RECORD_TYPE_CODE,
    L_REGISTRATION_ID,
    P_LEGAL_LOCATION_ID,
    P_TAX_AUTHORITY_ID,
    P_REP_TAX_AUTHORITY_ID,
    P_COLL_TAX_AUTHORITY_ID,
    P_REGISTRATION_TYPE_CODE,
    P_REGISTRATION_NUMBER,
    P_PARTY_TAX_PROFILE_ID,
    P_LEGAL_REGISTRATION_ID,
    P_BANK_ID,
    P_BANK_BRANCH_ID,
    P_ACCOUNT_SITE_ID,
    P_ATTRIBUTE14,
    P_ATTRIBUTE15,
    P_ATTRIBUTE_CATEGORY,
    P_PROGRAM_LOGIN_ID,
    P_ACCOUNT_ID,
    P_TAX_CLASSIFICATION_CODE,
    P_ATTRIBUTE7,
    P_ATTRIBUTE8,
    P_ATTRIBUTE9,
    P_ATTRIBUTE10,
    P_ATTRIBUTE11,
    P_ATTRIBUTE12,
    P_ATTRIBUTE13,
    sysdate,
    FND_GLOBAL.User_ID,
    sysdate,
    FND_GLOBAL.User_ID,
    FND_GLOBAL.Login_ID,
    1
    );
    OPEN reg_cur;
    FETCH reg_cur INTO L_REGISTRATION_ID;
    IF (reg_cur%notfound) then
      CLOSE reg_cur;
      --Set x_return_status param
      X_RETURN_STATUS := FND_API.G_RET_STS_UNEXP_ERROR;
      arp_util_tax.debug('Error: "The Registration row has not been inserted for Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
    END IF;--end reg_cur%notfound
    CLOSE reg_cur;
  END IF;--end X_RETURN_STATUS
  EXCEPTION
    --Index violation check
    WHEN DUP_VAL_ON_INDEX THEN
      --Set x_return_status param
      X_RETURN_STATUS := FND_API.G_RET_STS_UNEXP_ERROR;
      arp_util_tax.debug('Error: "The Registration row already exists for Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
end INSERT_ROW;

procedure UPDATE_ROW (
  P_REGISTRATION_ID in NUMBER,
  P_REQUEST_ID in NUMBER,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_VALIDATION_RULE in VARCHAR2,
  P_ROUNDING_RULE_CODE in VARCHAR2,
  P_TAX_JURISDICTION_CODE in VARCHAR2,
  P_SELF_ASSESS_FLAG in VARCHAR2,
  P_REGISTRATION_STATUS_CODE in VARCHAR2,
  P_REGISTRATION_SOURCE_CODE in VARCHAR2,
  P_REGISTRATION_REASON_CODE in VARCHAR2,
  P_TAX in VARCHAR2,
  P_TAX_REGIME_CODE in VARCHAR2,
  P_INCLUSIVE_TAX_FLAG in VARCHAR2,
  P_EFFECTIVE_FROM in DATE,
  P_EFFECTIVE_TO in DATE,
  P_REP_PARTY_TAX_NAME in VARCHAR2,
  P_DEFAULT_REGISTRATION_FLAG in VARCHAR2,
  P_BANK_ACCOUNT_NUM in VARCHAR2,
  P_RECORD_TYPE_CODE in VARCHAR2,
  P_LEGAL_LOCATION_ID in NUMBER,
  P_TAX_AUTHORITY_ID in NUMBER,
  P_REP_TAX_AUTHORITY_ID in NUMBER,
  P_COLL_TAX_AUTHORITY_ID in NUMBER,
  P_REGISTRATION_TYPE_CODE in VARCHAR2,
  P_REGISTRATION_NUMBER in VARCHAR2,
  P_PARTY_TAX_PROFILE_ID in NUMBER,
  P_LEGAL_REGISTRATION_ID in NUMBER,
  P_BANK_ID in NUMBER,
  P_BANK_BRANCH_ID in NUMBER,
  P_ACCOUNT_SITE_ID in NUMBER,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_PROGRAM_LOGIN_ID in NUMBER,
  P_ACCOUNT_ID in NUMBER,
  P_TAX_CLASSIFICATION_CODE in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  X_RETURN_STATUS out NOCOPY VARCHAR2
) is
  L_REGISTRATION_ID	ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_DEF_REGISTRATION_ID	ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_REG_ID		ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  L_REG_ID1		ZX_REGISTRATIONS.REGISTRATION_ID%TYPE;
  --If Registration has active exemptions then it cannot be end dated.
-----Commented out since exemption is not based on registrations
/*  CURSOR exempt_cur IS
  SELECT	EFFECTIVE_TO
  FROM 		ZX_EXEMPTIONS
  WHERE		TAX_REGISTRATION_ID = P_REGISTRATION_ID;
*/
-----Commented out since exemption is not based on registrations
  --Get Default Registration for current PTP_ID
  CURSOR default_reg_cur IS SELECT REGISTRATION_ID FROM ZX_REGISTRATIONS
  WHERE PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID
  AND 	DEFAULT_REGISTRATION_FLAG = 'Y'
  AND	REGISTRATION_ID <> P_REGISTRATION_ID;
begin
  --Initialise x_return_status variable
  X_RETURN_STATUS :=  FND_API.G_RET_STS_SUCCESS;
  --Effective From cannot be null
  IF P_EFFECTIVE_FROM IS NULL THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Effective From cannot be null for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  --Tax Regime Code cannot be null
  IF P_TAX_REGIME_CODE IS NULL THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Tax Regime Code cannot be null for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  IF (P_EFFECTIVE_FROM IS NOT NULL) AND (P_EFFECTIVE_FROM > P_EFFECTIVE_TO) THEN
      X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
      arp_util_tax.debug('Error: "The Effective To date must be the same as or after the Effective From date. for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  --Tax is mandatory when Jurisdiction is not null
  IF (P_TAX IS NULL) AND (P_TAX_JURISDICTION_CODE IS NOT NULL) THEN
    X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
    arp_util_tax.debug('Error: "Tax must be entered if the Tax Jursidiction Code has been specified for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  IF (P_TAX_REGIME_CODE IS NOT NULL) AND (P_PARTY_TAX_PROFILE_ID IS NOT NULL) THEN
    --Registration should be unique
    BEGIN
      SELECT  REGISTRATION_ID
      INTO    L_REG_ID
      FROM    ZX_REGISTRATIONS
      WHERE   ((P_EFFECTIVE_TO  is NULL AND  EFFECTIVE_TO  is NULL)
      OR      (P_EFFECTIVE_FROM   BETWEEN   EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO,P_EFFECTIVE_TO )  )
      OR      ( NVL(P_EFFECTIVE_TO, EFFECTIVE_TO+1)  BETWEEN                 EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO ,P_EFFECTIVE_TO )  )
      OR      (P_EFFECTIVE_FROM < EFFECTIVE_FROM
      AND     (NVL(P_EFFECTIVE_TO, EFFECTIVE_TO) > EFFECTIVE_TO OR P_EFFECTIVE_TO IS NULL)))
      AND     (REGISTRATION_NUMBER = P_REGISTRATION_NUMBER OR (P_REGISTRATION_NUMBER IS NULL and REGISTRATION_NUMBER is null))
      AND     TAX_REGIME_CODE = P_TAX_REGIME_CODE
      AND     (TAX = P_TAX OR (P_TAX IS NULL and TAX is null))
      AND     (TAX_JURISDICTION_CODE = P_TAX_JURISDICTION_CODE OR (P_TAX_JURISDICTION_CODE IS NULL and TAX_JURISDICTION_CODE is null))
      AND     PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID
      AND     REGISTRATION_ID <> P_REGISTRATION_ID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    --Registration should be unique at each level
    BEGIN
      SELECT  REGISTRATION_ID
      INTO    L_REG_ID1
      FROM    ZX_REGISTRATIONS
      WHERE   ((P_EFFECTIVE_TO  is NULL AND  EFFECTIVE_TO  is NULL)
      OR      (P_EFFECTIVE_FROM   BETWEEN   EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO,P_EFFECTIVE_TO )  )
      OR      ( NVL(P_EFFECTIVE_TO, EFFECTIVE_TO+1)  BETWEEN                 EFFECTIVE_FROM
      AND     NVL(EFFECTIVE_TO ,P_EFFECTIVE_TO )  )
      OR      (P_EFFECTIVE_FROM < EFFECTIVE_FROM
      AND     (NVL(P_EFFECTIVE_TO, EFFECTIVE_TO) > EFFECTIVE_TO OR P_EFFECTIVE_TO IS NULL)))
      AND     NOT(REGISTRATION_NUMBER = P_REGISTRATION_NUMBER OR (P_REGISTRATION_NUMBER IS NULL and REGISTRATION_NUMBER is null))
      AND     TAX_REGIME_CODE = P_TAX_REGIME_CODE
      AND     (TAX = P_TAX OR (P_TAX IS NULL and TAX is null))
      AND     (TAX_JURISDICTION_CODE = P_TAX_JURISDICTION_CODE OR (P_TAX_JURISDICTION_CODE IS NULL and TAX_JURISDICTION_CODE is null))
      AND     PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID
      AND     REGISTRATION_ID <> P_REGISTRATION_ID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        NULL;
    END;
  END IF;
  IF L_REG_ID IS NOT NULL THEN
      X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
      arp_util_tax.debug('Error: "The registration details already exist for this party for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  IF L_REG_ID1 IS NOT NULL THEN
      X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
      arp_util_tax.debug('Error: "This party already has a registration for this Jurisdiction for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
  END IF;
  --If Registration has active exemptions then it cannot be end dated.
-----Commented out since exemption is not based on registrations
  /*IF P_EFFECTIVE_TO IS NOT NULL THEN
    FOR exempt_rec IN exempt_cur LOOP
      IF exempt_rec.EFFECTIVE_TO IS NOT NULL THEN
        IF P_EFFECTIVE_TO < exempt_rec.EFFECTIVE_TO THEN
          X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
          arp_util_tax.debug('Error: "ZX_EXEMPT_EXISTS_FOR_REG for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
          EXIT;
        END IF;
      ELSE  --exempt_rec.EFFECTIVE_TO IS NULL
        X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
        arp_util_tax.debug('Error: "ZX_EXEMPT_EXISTS_FOR_REG for the Registration with Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
        EXIT;
      END IF; -- exempt_rec.EFFECTIVE_TO
    END LOOP;
  END IF; -- end P_EFFECTIVE_TO
*/
-----Commented out since exemption is not based on registrations
  --Check the Default Registration status and accordingly populates corresponding Registration Number to PartyTaxProfile entity
  IF P_DEFAULT_REGISTRATION_FLAG = 'Y' THEN
    OPEN default_reg_cur;
    FETCH default_reg_cur INTO L_DEF_REGISTRATION_ID;
    --If this is the only defaulted registration then update PTP
    IF (default_reg_cur%notfound) AND (X_RETURN_STATUS = FND_API.G_RET_STS_SUCCESS) then
      --Update PTP
     UPDATE ZX_PARTY_TAX_PROFILE SET Rep_Registration_Number = P_REGISTRATION_NUMBER,
			             Object_Version_Number = Object_Version_Number + 1
      WHERE PARTY_TAX_PROFILE_ID = P_PARTY_TAX_PROFILE_ID;

    ELSE
        X_RETURN_STATUS :=  FND_API.G_RET_STS_ERROR;
        arp_util_tax.debug('Error: "Already a Regiatration has been defaulted for Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
    END IF;
    CLOSE default_reg_cur;
  END IF;--end P_DEFAULT_REGISTRATION_FLAG
  --Update only when there is no error
  IF X_RETURN_STATUS =  FND_API.G_RET_STS_SUCCESS THEN
    update ZX_REGISTRATIONS set
    REQUEST_ID = DECODE( P_REQUEST_ID, NULL, REQUEST_ID, P_REQUEST_ID ),
    ATTRIBUTE1 = DECODE( P_ATTRIBUTE1, NULL, ATTRIBUTE1, P_ATTRIBUTE1 ),
    ATTRIBUTE2 = DECODE( P_ATTRIBUTE2, NULL, ATTRIBUTE2, P_ATTRIBUTE2 ),
    ATTRIBUTE3 = DECODE( P_ATTRIBUTE3, NULL, ATTRIBUTE3, P_ATTRIBUTE3 ),
    ATTRIBUTE4 = DECODE( P_ATTRIBUTE4, NULL, ATTRIBUTE4, P_ATTRIBUTE4 ),
    ATTRIBUTE5 = DECODE( P_ATTRIBUTE5, NULL, ATTRIBUTE5, P_ATTRIBUTE5 ),
    ATTRIBUTE6 = DECODE( P_ATTRIBUTE6, NULL, ATTRIBUTE6, P_ATTRIBUTE6 ),
    VALIDATION_RULE = DECODE( P_VALIDATION_RULE, NULL, VALIDATION_RULE, P_VALIDATION_RULE ),
    ROUNDING_RULE_CODE = DECODE( P_ROUNDING_RULE_CODE, NULL, ROUNDING_RULE_CODE, P_ROUNDING_RULE_CODE ),
    TAX_JURISDICTION_CODE = DECODE( P_TAX_JURISDICTION_CODE, NULL, TAX_JURISDICTION_CODE, P_TAX_JURISDICTION_CODE ),
    SELF_ASSESS_FLAG = DECODE( P_SELF_ASSESS_FLAG, NULL, SELF_ASSESS_FLAG, P_SELF_ASSESS_FLAG ),
    REGISTRATION_STATUS_CODE = DECODE( P_REGISTRATION_STATUS_CODE, NULL, REGISTRATION_STATUS_CODE, P_REGISTRATION_STATUS_CODE ),
    REGISTRATION_SOURCE_CODE = DECODE( P_REGISTRATION_SOURCE_CODE, NULL, REGISTRATION_SOURCE_CODE, P_REGISTRATION_SOURCE_CODE ),
    REGISTRATION_REASON_CODE = DECODE( P_REGISTRATION_REASON_CODE, NULL, REGISTRATION_REASON_CODE, P_REGISTRATION_REASON_CODE ),
    TAX = DECODE( P_TAX, NULL, TAX, P_TAX ),
    TAX_REGIME_CODE = DECODE( P_TAX_REGIME_CODE, NULL, TAX_REGIME_CODE, P_TAX_REGIME_CODE ),
    INCLUSIVE_TAX_FLAG = DECODE( P_INCLUSIVE_TAX_FLAG, NULL, INCLUSIVE_TAX_FLAG, P_INCLUSIVE_TAX_FLAG ),
    EFFECTIVE_FROM = DECODE( P_EFFECTIVE_FROM, NULL, EFFECTIVE_FROM, P_EFFECTIVE_FROM ),
    EFFECTIVE_TO = DECODE( P_EFFECTIVE_TO, NULL, EFFECTIVE_TO, P_EFFECTIVE_TO ),
    REP_PARTY_TAX_NAME = DECODE( P_REP_PARTY_TAX_NAME, NULL, REP_PARTY_TAX_NAME, P_REP_PARTY_TAX_NAME ),
    DEFAULT_REGISTRATION_FLAG = DECODE( P_DEFAULT_REGISTRATION_FLAG, NULL, DEFAULT_REGISTRATION_FLAG, P_DEFAULT_REGISTRATION_FLAG ),
    BANK_ACCOUNT_NUM = DECODE( P_BANK_ACCOUNT_NUM, NULL, BANK_ACCOUNT_NUM, P_BANK_ACCOUNT_NUM ),
    RECORD_TYPE_CODE = DECODE( P_RECORD_TYPE_CODE, NULL, RECORD_TYPE_CODE, P_RECORD_TYPE_CODE ),
    LEGAL_LOCATION_ID = DECODE( P_LEGAL_LOCATION_ID, NULL, LEGAL_LOCATION_ID, P_LEGAL_LOCATION_ID ),
    TAX_AUTHORITY_ID = DECODE( P_TAX_AUTHORITY_ID, NULL, TAX_AUTHORITY_ID, P_TAX_AUTHORITY_ID ),
    REP_TAX_AUTHORITY_ID = DECODE( P_REP_TAX_AUTHORITY_ID, NULL, REP_TAX_AUTHORITY_ID, P_REP_TAX_AUTHORITY_ID ),
    COLL_TAX_AUTHORITY_ID = DECODE( P_COLL_TAX_AUTHORITY_ID, NULL, COLL_TAX_AUTHORITY_ID, P_COLL_TAX_AUTHORITY_ID ),
    REGISTRATION_TYPE_CODE = DECODE( P_REGISTRATION_TYPE_CODE, NULL, REGISTRATION_TYPE_CODE, P_REGISTRATION_TYPE_CODE ),
    REGISTRATION_NUMBER = DECODE( P_REGISTRATION_NUMBER, NULL, REGISTRATION_NUMBER, P_REGISTRATION_NUMBER ),
    PARTY_TAX_PROFILE_ID = DECODE( P_PARTY_TAX_PROFILE_ID, NULL, PARTY_TAX_PROFILE_ID, P_PARTY_TAX_PROFILE_ID ),
    LEGAL_REGISTRATION_ID = DECODE( P_LEGAL_REGISTRATION_ID, NULL, LEGAL_REGISTRATION_ID, P_LEGAL_REGISTRATION_ID ),
    BANK_ID = DECODE( P_BANK_ID, NULL, BANK_ID, P_BANK_ID ),
    BANK_BRANCH_ID = DECODE( P_BANK_BRANCH_ID, NULL, BANK_BRANCH_ID, P_BANK_BRANCH_ID ),
    ACCOUNT_SITE_ID = DECODE( P_ACCOUNT_SITE_ID, NULL, ACCOUNT_SITE_ID, P_ACCOUNT_SITE_ID ),
    ATTRIBUTE14 = DECODE( P_ATTRIBUTE14, NULL, ATTRIBUTE14, P_ATTRIBUTE14 ),
    ATTRIBUTE15 = DECODE( P_ATTRIBUTE15, NULL, ATTRIBUTE15, P_ATTRIBUTE15 ),
    ATTRIBUTE_CATEGORY = DECODE( P_ATTRIBUTE_CATEGORY, NULL, ATTRIBUTE_CATEGORY, P_ATTRIBUTE_CATEGORY ),
    PROGRAM_LOGIN_ID = DECODE( P_PROGRAM_LOGIN_ID, NULL, PROGRAM_LOGIN_ID, P_PROGRAM_LOGIN_ID ),
    ACCOUNT_ID = DECODE( P_ACCOUNT_ID, NULL, ACCOUNT_ID, P_ACCOUNT_ID ),
    TAX_CLASSIFICATION_CODE = DECODE( P_TAX_CLASSIFICATION_CODE, NULL, TAX_CLASSIFICATION_CODE, P_TAX_CLASSIFICATION_CODE ),
    ATTRIBUTE7 = DECODE( P_ATTRIBUTE7, NULL, ATTRIBUTE7, P_ATTRIBUTE7 ),
    ATTRIBUTE8 = DECODE( P_ATTRIBUTE8, NULL, ATTRIBUTE8, P_ATTRIBUTE8 ),
    ATTRIBUTE9 = DECODE( P_ATTRIBUTE9, NULL, ATTRIBUTE9, P_ATTRIBUTE9 ),
    ATTRIBUTE10 = DECODE( P_ATTRIBUTE10, NULL, ATTRIBUTE10, P_ATTRIBUTE10 ),
    ATTRIBUTE11 = DECODE( P_ATTRIBUTE11, NULL, ATTRIBUTE11, P_ATTRIBUTE11 ),
    ATTRIBUTE12 = DECODE( P_ATTRIBUTE12, NULL, ATTRIBUTE12, P_ATTRIBUTE12 ),
    ATTRIBUTE13 = DECODE( P_ATTRIBUTE13, NULL, ATTRIBUTE13, P_ATTRIBUTE13 ),
    LAST_UPDATE_DATE = sysdate,
    LAST_UPDATED_BY = FND_GLOBAL.User_ID,
    LAST_UPDATE_LOGIN = FND_GLOBAL.Login_ID,
    Object_Version_Number = Object_Version_Number + 1
    where REGISTRATION_ID = P_REGISTRATION_ID;
    if (sql%notfound) then
      --Set x_return_status param
      X_RETURN_STATUS := FND_API.G_RET_STS_UNEXP_ERROR;
      arp_util_tax.debug('Error: "The Registration row has not been updated for Regime : " ' || P_TAX_REGIME_CODE || ' and Tax: ' ||P_TAX || ' and Jurisdiction: ' || P_TAX_JURISDICTION_CODE);
    end if;--end sql%notfound
  END IF;--end X_RETURN_STATUS
end UPDATE_ROW;

procedure DELETE_ROW (
  P_REGISTRATION_ID in NUMBER,
  X_RETURN_STATUS out NOCOPY VARCHAR2
) is
begin
  --Initialise x_return_status variable
  X_RETURN_STATUS :=  FND_API.G_RET_STS_SUCCESS;
  --Delete the row
  delete from ZX_REGISTRATIONS
  where REGISTRATION_ID = P_REGISTRATION_ID;

  if (sql%notfound) then
    --Set x_return_status param
    X_RETURN_STATUS := FND_API.G_RET_STS_UNEXP_ERROR;
    raise no_data_found;
  end if;
end DELETE_ROW;

end ZX_REGISTRATIONS_PKG;

/
