--------------------------------------------------------
--  DDL for Package Body IBW_PAGES_PUB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IBW_PAGES_PUB" AS
/* $Header: ibwpgb.pls 120.8 2005/12/15 00:56 vekancha noship $ */

-- Start of Comments
-- API name    :  INSERT_ROW
-- Type     :  Public
-- Prerequiste :  None
-- Function    :  Inserts a page record in Page Base and Translation Table.
-- Parameters  :
-- Version     :
-- Changes     :
-- 1. Changes made in INSERT_ROW API, X_PROGRAM_ID and X_PROGRAM_APPLICATION_ID
--    were present in the insert of Translation table, though these were not
--    part of the INSERT_ROW signature. So compiling the code as it is
--    generated by /fnddev/fnd/11.5/bin/AFTBLGEN gave compilation errors.
-- 2. PROGRAM_ID AND PROGRAM_APPLICATION_ID are part of insert in TL table but
--    were not present in the INSERT of BASE table (in AFTBLGEN generated
--    code.
-- End of Comments
   PROCEDURE INSERT_ROW (
      x_rowid                    IN OUT NOCOPY   VARCHAR2,
      x_page_id                  IN              NUMBER,
      x_page_code                IN              VARCHAR2,
      x_page_status              IN              VARCHAR2,
      x_application_context      IN              VARCHAR2,
      x_business_context         IN              VARCHAR2,
      x_reference                IN              VARCHAR2,
      x_page_matching_criteria   IN              VARCHAR2,
      x_site_area_id             IN              NUMBER,
      x_page_matching_value      IN              VARCHAR2,
      x_object_version_number    IN              NUMBER,
      x_program_login_id         IN              NUMBER,
      x_request_id               IN              NUMBER,
      x_page_name                IN              VARCHAR2,
      x_description              IN              VARCHAR2,
      x_creation_date            IN              DATE,
      x_created_by               IN              NUMBER,
      x_last_update_date         IN              DATE,
      x_last_updated_by          IN              NUMBER,
      x_last_update_login        IN              NUMBER
   )
   IS
      CURSOR c
      IS
         SELECT ROWID
           FROM ibw_pages_b
          WHERE page_id = x_page_id;

      l_prog_appl_id   ibw_pages_b.program_application_id%TYPE; -- Code Added, Notgenerated by AFTBLGEN
      l_program_id     ibw_pages_b.program_id%TYPE; -- Code Added, Not generated by AFTBLGEN
   BEGIN

	dbms_output.put_line('Insert row called');
      l_prog_appl_id := fnd_global.prog_appl_id; -- Code Added,Not generatedby AFTBLGEN
      l_program_id := fnd_global.conc_program_id; -- Code Added,Not generated by AFTBLGEN

      IF (IBW_PAGES_PUB.GET_SITEAREA_STATUS (x_site_area_id) = 'N')
      THEN
		dbms_output.put_line('Inside the sitearea condition');
         IBW_PAGES_PUB.FORCE_UPDATE_SITEAREA (x_site_area_id,
                                              x_last_update_date,
                                              x_last_updated_by,
                                              x_last_update_login
                                             );
      END IF;
	dbms_output.put_line('Site area found');
      INSERT INTO IBW_PAGES_B
                  (page_id, page_code, page_status,
                   application_context, business_context, REFERENCE,
                   page_matching_criteria, site_area_id,
                   page_matching_value, object_version_number,
                   program_login_id, request_id, creation_date,
                   created_by, last_update_date, last_updated_by,
                   last_update_login, program_id, -- Column Added,Not generated by AFTBLGEN
                   program_application_id -- Column Added,Not generated by AFTBLGEN
                  )
           VALUES (x_page_id, x_page_code, x_page_status,
                   x_application_context, x_business_context, x_reference,
                   x_page_matching_criteria, x_site_area_id,
                   x_page_matching_value, x_object_version_number,
                   x_program_login_id, x_request_id, x_creation_date,
                   x_created_by, x_last_update_date, x_last_updated_by,
                   x_last_update_login, l_program_id, -- Code Added,Not generated by AFTBLGEN
                   l_prog_appl_id -- Code Added,Not generated by AFTBLGEN
                  );


	INSERT INTO ibw_pages_tl(page_id, language, source_lang, page_name, description, created_by, creation_date,
						last_updated_by, last_update_date, last_update_login, object_version_number,
						program_id, program_login_id, program_application_id, request_id)
			SELECT M.page_id, l.language_code, b.language_code,  x_page_name, x_description, M.created_by, M.creation_date,
					M.last_updated_by, M.last_update_date, M.last_update_login, M.object_version_number,
					M.program_id, M.program_login_id, M.program_application_id, M.request_id
			FROM ibw_pages_b M, fnd_languages l, fnd_languages b
			WHERE l.installed_flag IN ('I','B') AND b.installed_flag='B' AND M.page_id=x_page_id;

	dbms_output.put_line('Site area found');

      OPEN c;
      FETCH c INTO x_rowid;

      IF (c%NOTFOUND)
      THEN
         CLOSE c;
         RAISE NO_DATA_FOUND;
      END IF;

      CLOSE c;
   END INSERT_ROW;

   PROCEDURE LOCK_ROW (
      x_page_id                  IN   NUMBER,
      x_page_code                IN   VARCHAR2,
      x_page_status              IN   VARCHAR2,
      x_application_context      IN   VARCHAR2,
      x_business_context         IN   VARCHAR2,
      x_reference                IN   VARCHAR2,
      x_page_matching_criteria   IN   VARCHAR2,
      x_site_area_id             IN   NUMBER,
      x_page_matching_value      IN   VARCHAR2,
      x_object_version_number    IN   NUMBER,
      x_program_login_id         IN   NUMBER,
      x_request_id               IN   NUMBER,
      x_page_name                IN   VARCHAR2,
      x_description              IN   VARCHAR2
   )
   IS
      CURSOR c
      IS
         SELECT        page_code, page_status, application_context,
                       business_context, REFERENCE, page_matching_criteria,
                       site_area_id, page_matching_value,
                       object_version_number, program_login_id, request_id
                  FROM IBW_PAGES_B
                 WHERE page_id = x_page_id
         FOR UPDATE OF page_id NOWAIT;

      recinfo   c%ROWTYPE;

      CURSOR c1
      IS
         SELECT        page_name, description,
                       DECODE (LANGUAGE,
                               USERENV ('LANG'), 'Y',
                               'N'
                              ) baselang
                  FROM IBW_PAGES_TL
                 WHERE page_id = x_page_id
                   AND USERENV ('LANG') IN (LANGUAGE, source_lang)
         FOR UPDATE OF page_id NOWAIT;
   BEGIN
      OPEN c;
      FETCH c INTO recinfo;

      IF (c%NOTFOUND)
      THEN
         CLOSE c;
         fnd_message.set_name ('FND', 'FORM_RECORD_DELETED');
         app_exception.raise_exception;
      END IF;

      CLOSE c;

      IF (    (recinfo.page_code = x_page_code)
          AND (recinfo.page_status = x_page_status)
          AND (recinfo.application_context = x_application_context)
          AND (   (recinfo.business_context = x_business_context)
               OR (    (recinfo.business_context IS NULL)
                   AND (x_business_context IS NULL)
                  )
              )
          AND (   (recinfo.REFERENCE = x_reference)
               OR ((recinfo.REFERENCE IS NULL) AND (x_reference IS NULL))
              )
          AND (recinfo.page_matching_criteria = x_page_matching_criteria)
          AND (   (recinfo.site_area_id = x_site_area_id)
               OR (    (recinfo.site_area_id IS NULL)
                   AND (x_site_area_id IS NULL)
                  )
              )
          AND (   (recinfo.page_matching_value = x_page_matching_value)
               OR (    (recinfo.page_matching_value IS NULL)
                   AND (x_page_matching_value IS NULL)
                  )
              )
          AND (recinfo.object_version_number = x_object_version_number)
          AND (   (recinfo.program_login_id = x_program_login_id)
               OR (    (recinfo.program_login_id IS NULL)
                   AND (x_program_login_id IS NULL)
                  )
              )
          AND (   (recinfo.request_id = x_request_id)
               OR ((recinfo.request_id IS NULL) AND (x_request_id IS NULL))
              )
         )
      THEN
         NULL;
      ELSE
         fnd_message.set_name ('FND', 'FORM_RECORD_CHANGED');
         app_exception.raise_exception;
      END IF;

      FOR tlinfo IN c1
      LOOP
         IF (tlinfo.baselang = 'Y')
         THEN
            IF (    (tlinfo.page_name = x_page_name)
                AND (   (tlinfo.description = x_description)
                     OR (    (tlinfo.description IS NULL)
                         AND (x_description IS NULL)
                        )
                    )
               )
            THEN
               NULL;
            ELSE
               fnd_message.set_name ('FND', 'FORM_RECORD_CHANGED');
               app_exception.raise_exception;
            END IF;
         END IF;
      END LOOP;

      RETURN;
   END LOCK_ROW;

   PROCEDURE UPDATE_ROW (
      x_page_id                  IN   NUMBER,
      x_page_code                IN   VARCHAR2,
      x_page_status              IN   VARCHAR2,
      x_application_context      IN   VARCHAR2,
      x_business_context         IN   VARCHAR2,
      x_reference                IN   VARCHAR2,
      x_page_matching_criteria   IN   VARCHAR2,
      x_site_area_id             IN   NUMBER,
      x_page_matching_value      IN   VARCHAR2,
      x_object_version_number    IN   NUMBER,
      x_program_login_id         IN   NUMBER,
      x_request_id               IN   NUMBER,
      x_page_name                IN   VARCHAR2,
      x_description              IN   VARCHAR2,
      x_last_update_date         IN   DATE,
      x_last_updated_by          IN   NUMBER,
      x_last_update_login        IN   NUMBER,
      x_custom_mode              IN   VARCHAR2
   )
   IS
   BEGIN
      IF (x_custom_mode = 'FORCE')
      THEN
         UPDATE IBW_PAGES_B
            SET REFERENCE = x_reference,
                object_version_number = x_object_version_number,
                program_login_id = x_program_login_id,
                request_id = x_request_id,
                last_update_date = x_last_update_date,
                last_updated_by = x_last_updated_by,
                last_update_login = x_last_update_login
          WHERE page_id = x_page_id;
      ELSE
         UPDATE IBW_PAGES_B
            SET page_code = x_page_code,
                page_status = x_page_status,
                application_context = x_application_context,
                business_context = x_business_context,
                REFERENCE = x_reference,
                page_matching_criteria = x_page_matching_criteria,
                site_area_id = x_site_area_id,
                page_matching_value = x_page_matching_value,
                object_version_number = x_object_version_number,
                program_login_id = x_program_login_id,
                request_id = x_request_id,
                last_update_date = x_last_update_date,
                last_updated_by = x_last_updated_by,
                last_update_login = x_last_update_login
          WHERE page_id = x_page_id;
      END IF;

      IF (SQL%NOTFOUND)
      THEN
         RAISE NO_DATA_FOUND;
      END IF;

      UPDATE IBW_PAGES_TL
         SET page_name = x_page_name,
             description = x_description,
             last_update_date = x_last_update_date,
             last_updated_by = x_last_updated_by,
             last_update_login = x_last_update_login,
             object_version_number = x_object_version_number,
             source_lang = USERENV ('LANG')
       WHERE page_id = x_page_id
             AND USERENV ('LANG') IN (LANGUAGE, source_lang);

      IF (SQL%NOTFOUND)
      THEN
         RAISE NO_DATA_FOUND;
      END IF;
   END UPDATE_ROW;

   PROCEDURE DELETE_ROW (x_page_id IN NUMBER)
   IS
   BEGIN
      DELETE FROM ibw_pages_tl
            WHERE page_id = x_page_id;

      IF (SQL%NOTFOUND)
      THEN
         RAISE NO_DATA_FOUND;
      END IF;

      DELETE FROM ibw_pages_b
            WHERE page_id = x_page_id;

      IF (SQL%NOTFOUND)
      THEN
         RAISE NO_DATA_FOUND;
      END IF;
   END DELETE_ROW;

   PROCEDURE ADD_LANGUAGE
   IS
   BEGIN
      DELETE FROM IBW_PAGES_TL t
            WHERE NOT EXISTS (SELECT NULL
                                FROM IBW_PAGES_B b
                               WHERE b.page_id = t.page_id);

      UPDATE IBW_PAGES_TL t
         SET (page_name, description) =
                (SELECT b.page_name, b.description
                   FROM IBW_PAGES_TL b
                  WHERE b.page_id = t.page_id AND b.LANGUAGE = t.source_lang)
       WHERE (t.page_id, t.LANGUAGE) IN (
                SELECT subt.page_id, subt.LANGUAGE
                  FROM IBW_PAGES_TL subb, IBW_PAGES_TL subt
                 WHERE subb.page_id = subt.page_id
                   AND subb.LANGUAGE = subt.source_lang
                   AND (   subb.page_name <> subt.page_name
                        OR subb.description <> subt.description
                        OR (    subb.description IS NULL
                            AND subt.description IS NOT NULL
                           )
                        OR (    subb.description IS NOT NULL
                            AND subt.description IS NULL
                           )
                       ));

      INSERT INTO IBW_PAGES_TL
                  (page_id, page_name, description, created_by, creation_date,
                   last_updated_by, last_update_date, last_update_login,
                   object_version_number, program_id, program_login_id,
                   program_application_id, request_id, LANGUAGE, source_lang)
         SELECT /*+ ORDERED */
                 b.page_id, b.page_name, b.description, b.created_by,
                 b.creation_date, b.last_updated_by, b.last_update_date,
                 b.last_update_login, b.object_version_number, b.program_id,
                 b.program_login_id, b.program_application_id, b.request_id,
                 l.language_code, b.source_lang
           FROM IBW_PAGES_TL b, FND_LANGUAGES l
          WHERE l.installed_flag IN ('I', 'B')
            AND b.LANGUAGE = USERENV ('LANG')
            AND NOT EXISTS (
                   SELECT NULL
                     FROM ibw_pages_tl t
                    WHERE t.page_id = b.page_id
                      AND t.LANGUAGE = l.language_code);
   END ADD_LANGUAGE;

   PROCEDURE TRANSLATE_ROW (
      x_page_id            IN   NUMBER,
      x_page_name          IN   VARCHAR2,
      x_description        IN   VARCHAR2,
      x_owner              IN   VARCHAR2,
      x_custom_mode        IN   VARCHAR2,
      x_last_update_date   IN   VARCHAR2
   )
   IS
      f_luby      NUMBER; -- entity owner in file
      f_ludate    DATE; -- entity update date in file
      db_luby     NUMBER; -- entity owner in db
      db_ludate   DATE; -- entity update date in db
   BEGIN
      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id (x_owner);
      -- Translate char last_update_date to date
      f_ludate := NVL (TO_DATE (x_last_update_date, 'YYYY/MM/DD'), SYSDATE);

      SELECT last_updated_by, last_update_date
        INTO db_luby, db_ludate
        FROM IBW_PAGES_TL
       WHERE page_id = x_page_id AND USERENV ('LANG') = LANGUAGE;

      IF (fnd_load_util.upload_test (f_luby,
                                     f_ludate,
                                     db_luby,
                                     db_ludate,
                                     x_custom_mode
                                    )
         )
      THEN
         UPDATE IBW_PAGES_TL
            SET page_name = x_page_name,
                description = x_description,
                last_update_date = f_ludate,
                last_updated_by = f_luby,
                last_update_login = 0,
                source_lang = USERENV ('LANG')
          WHERE page_id = x_page_id
            AND USERENV ('LANG') IN (LANGUAGE, source_lang);
      END IF;

      IF (SQL%NOTFOUND)
      THEN
         RAISE NO_DATA_FOUND;
      END IF;
   END TRANSLATE_ROW;

   PROCEDURE LOAD_ROW (
      x_page_id                  IN   NUMBER,
      x_page_code                IN   VARCHAR2,
      x_page_status              IN   VARCHAR2,
      x_application_context      IN   VARCHAR2,
      x_business_context         IN   VARCHAR2,
      x_reference                IN   VARCHAR2,
      x_page_matching_criteria   IN   VARCHAR2,
      x_site_area_id             IN   NUMBER,
      x_page_matching_value      IN   VARCHAR2,
      x_page_name                IN   VARCHAR2,
      x_description              IN   VARCHAR2,
      x_owner                    IN   VARCHAR2,
      x_custom_mode              IN   VARCHAR2,
      x_last_update_date         IN   VARCHAR2
   )
   IS
      pg_id       NUMBER;
      row_id      VARCHAR2 (64);
      f_luby      NUMBER; -- entity owner in file
      f_ludate    DATE; -- entity update date in file
      db_luby     NUMBER; -- entity owner in db
      db_ludate   DATE; -- entity update date in db
      obj_v_no    NUMBER;
   BEGIN
      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id (x_owner);
      -- Translate char last_update_date to date
      f_ludate := NVL (TO_DATE (x_last_update_date, 'YYYY/MM/DD'), SYSDATE);

      SELECT page_id, last_updated_by, last_update_date,
             object_version_number
        INTO pg_id, db_luby, db_ludate,
             obj_v_no
        FROM IBW_PAGES_B
       WHERE page_id = x_page_id;

      IF (fnd_load_util.upload_test (f_luby,
                                     f_ludate,
                                     db_luby,
                                     db_ludate,
                                     x_custom_mode
                                    )
         )
      THEN
         IBW_PAGES_PUB.UPDATE_ROW (x_page_id                     => pg_id,
                                   x_page_code                   => x_page_code,
                                   x_page_status                 => x_page_status,
                                   x_application_context         => x_application_context,
                                   x_business_context            => x_business_context,
                                   x_reference                   => x_reference,
                                   x_page_matching_criteria      => x_page_matching_criteria,
                                   x_site_area_id                => x_site_area_id,
                                   x_page_matching_value         => x_page_matching_value,
                                   x_object_version_number       =>   obj_v_no
                                                                    + 1,
                                   x_program_login_id            => NULL,
                                   x_request_id                  => NULL,
                                   x_page_name                   => x_page_name,
                                   x_description                 => x_description,
                                   x_last_update_date            => f_ludate,
                                   x_last_updated_by             => f_luby,
                                   x_last_update_login           => f_luby,
                                   x_custom_mode                 => x_custom_mode
                                  );
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         dbms_output.put_line('An Error Occured in load row');
         IBW_PAGES_PUB.INSERT_ROW (x_rowid                       => row_id,
                                   x_page_id                     => x_page_id,
                                   x_page_code                   => x_page_code,
                                   x_page_status                 => x_page_status,
                                   x_application_context         => x_application_context,
                                   x_business_context            => x_business_context,
                                   x_reference                   => x_reference,
                                   x_page_matching_criteria      => x_page_matching_criteria,
                                   x_site_area_id                => x_site_area_id,
                                   x_page_matching_value         => x_page_matching_value,
                                   x_object_version_number       => 1,
                                   x_program_login_id            => NULL,
                                   x_request_id                  => NULL,
                                   x_page_name                   => x_page_name,
                                   x_description                 => x_description,
                                   x_creation_date               => f_ludate,
                                   x_created_by                  => f_luby,
                                   x_last_update_date            => f_ludate,
                                   x_last_updated_by             => f_luby,
                                   x_last_update_login           => f_luby
                                  );
   END LOAD_ROW;

   PROCEDURE LOAD_SEED_ROW (
      x_upload_mode              IN   VARCHAR2,
      x_page_id                  IN   VARCHAR2,
      x_page_name                IN   VARCHAR2,
      x_description              IN   VARCHAR2,
      x_owner                    IN   VARCHAR2,
      x_custom_mode              IN   VARCHAR2,
      x_last_update_date         IN   VARCHAR2,
      x_page_code                IN   VARCHAR2,
      x_page_status              IN   VARCHAR2,
      x_application_context      IN   VARCHAR2,
      x_business_context         IN   VARCHAR2,
      x_reference                IN   VARCHAR2,
      x_page_matching_criteria   IN   VARCHAR2,
      x_site_area_id             IN   VARCHAR2,
      x_page_matching_value      IN   VARCHAR2
   )
   IS
   BEGIN
      IF (x_upload_mode = 'NLS')
      THEN
         IBW_PAGES_PUB.TRANSLATE_ROW (x_page_id,
                                      x_page_name,
                                      x_description,
                                      x_owner,
                                      x_custom_mode,
                                      x_last_update_date
                                     );
      ELSE
         IBW_PAGES_PUB.LOAD_ROW (x_page_id,
                                 x_page_code,
                                 x_page_status,
                                 x_application_context,
                                 x_business_context,
                                 x_reference,
                                 x_page_matching_criteria,
                                 x_site_area_id,
                                 x_page_matching_value,
                                 x_page_name,
                                 x_description,
                                 x_owner,
                                 x_custom_mode,
                                 x_last_update_date
                                );
      END IF;
   END LOAD_SEED_ROW;

   FUNCTION GET_SITEAREA_STATUS (x_site_area_id IN NUMBER)
      RETURN VARCHAR2
   IS
      status   VARCHAR2 (30);
   BEGIN
      SELECT enabled_flag
        INTO status
        FROM FND_LOOKUPS
       WHERE lookup_type = 'IBW_SITE_AREA'
         AND lookup_code = TO_CHAR (x_site_area_id);

         RETURN status;
      /*EXCEPTION
      	WHEN NO_DATA_FOUND THEN
      		RETURN '-1';
      	END;*/

    --  RETURN status;
   END GET_SITEAREA_STATUS;

   PROCEDURE FORCE_UPDATE_SITEAREA (
      x_site_area_id        IN   NUMBER,
      x_last_update_date    IN   DATE,
      x_last_updated_by     IN   NUMBER,
      x_last_update_login   IN   NUMBER
   )
   IS
      lookup_type           VARCHAR2 (30);
      security_group_id     NUMBER;
      view_application_id   NUMBER;
      lookup_code           VARCHAR2 (30);
      tag                   VARCHAR2 (30);
      attribute_category    VARCHAR2 (30);
      attribute1            VARCHAR2 (30);
      attribute2            VARCHAR2 (30);
      attribute3            VARCHAR2 (30);
      attribute4            VARCHAR2 (30);
      enabled_flag          VARCHAR2 (30);
      start_date_active     DATE;
      end_date_active       DATE;
      territory_code        VARCHAR2 (30);
      attribute5            VARCHAR2 (30);
      attribute6            VARCHAR2 (30);
      attribute7            VARCHAR2 (30);
      attribute8            VARCHAR2 (30);
      attribute9            VARCHAR2 (30);
      attribute10           VARCHAR2 (30);
      attribute11           VARCHAR2 (30);
      attribute12           VARCHAR2 (30);
      attribute13           VARCHAR2 (30);
      attribute14           VARCHAR2 (30);
      attribute15           VARCHAR2 (30);
      meaning               VARCHAR (80);
      description           VARCHAR2 (240);
      last_update_date      DATE;
      last_updated_by       NUMBER;
      last_update_login     NUMBER;
   BEGIN
	dbms_output.put_line('force update');
      SELECT lookup_type, security_group_id, view_application_id,
             lookup_code, tag, attribute_category, attribute1, attribute2,
             attribute3, attribute4, enabled_flag, start_date_active,
             end_date_active, territory_code, attribute5, attribute6,
             attribute7, attribute8, attribute9, attribute10, attribute11,
             attribute12, attribute13, attribute14, attribute15, meaning,
             description
        INTO lookup_type, security_group_id, view_application_id,
             lookup_code, tag, attribute_category, attribute1, attribute2,
             attribute3, attribute4, enabled_flag, start_date_active,
             end_date_active, territory_code, attribute5, attribute6,
             attribute7, attribute8, attribute9, attribute10, attribute11,
             attribute12, attribute13, attribute14, attribute15, meaning,
             description
        FROM FND_LOOKUP_VALUES
       WHERE lookup_type = 'IBW_SITE_AREA'
         AND lookup_code = TO_CHAR (x_site_area_id)
	    and language=userenv('Lang');
	   dbms_output.put_line('tryin to update lookups');
      FND_LOOKUP_VALUES_PKG.UPDATE_ROW (lookup_type,
                                        security_group_id,
                                        view_application_id,
                                        lookup_code,
                                        tag,
                                        attribute_category,
                                        attribute1,
                                        attribute2,
                                        attribute3,
                                        attribute4,
                                        'Y',
                                        start_date_active,
                                        end_date_active,
                                        territory_code,
                                        attribute5,
                                        attribute6,
                                        attribute7,
                                        attribute8,
                                        attribute9,
                                        attribute10,
                                        attribute11,
                                        attribute12,
                                        attribute13,
                                        attribute14,
                                        attribute15,
                                        meaning,
                                        description,
                                        x_last_update_date,
                                        x_last_updated_by,
                                        x_last_update_login
                                       );
   END FORCE_UPDATE_SITEAREA;
END IBW_PAGES_PUB;

/
