--------------------------------------------------------
--  DDL for Package Body HRDPP_CREATE_PRTT_ENRT_RESULT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_CREATE_PRTT_ENRT_RESULT" as
/*
 * Generated by hr_pump_meta_mapper at: 2007/01/04 13:01:55
 * Generated for API: ben_prtt_enrt_result_api.CREATE_PRTT_ENRT_RESULT
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_PRTT_ENRT_RSLT_USER_KEY in varchar2
,P_SSPNDD_FLAG in varchar2 default null
,P_PRTT_IS_CVRD_FLAG in varchar2 default null
,P_BNFT_AMT in number default null
,P_ORGNL_ENRT_DT in date default null
,P_ENRT_MTHD_CD in varchar2 default null
,P_NO_LNGR_ELIG_FLAG in varchar2 default null
,P_ENRT_OVRIDN_FLAG in varchar2 default null
,P_ENRT_OVRID_RSN_CD in varchar2 default null
,P_ERLST_DEENRT_DT in date default null
,P_ENRT_CVG_STRT_DT in date default null
,P_ENRT_CVG_THRU_DT in date default null
,P_ENRT_OVRID_THRU_DT in date default null
,P_PL_ORDR_NUM in number default null
,P_PLIP_ORDR_NUM in number default null
,P_PTIP_ORDR_NUM in number default null
,P_OIPL_ORDR_NUM in number default null
,P_PEN_ATTRIBUTE_CATEGORY in varchar2 default null
,P_PEN_ATTRIBUTE1 in varchar2 default null
,P_PEN_ATTRIBUTE2 in varchar2 default null
,P_PEN_ATTRIBUTE3 in varchar2 default null
,P_PEN_ATTRIBUTE4 in varchar2 default null
,P_PEN_ATTRIBUTE5 in varchar2 default null
,P_PEN_ATTRIBUTE6 in varchar2 default null
,P_PEN_ATTRIBUTE7 in varchar2 default null
,P_PEN_ATTRIBUTE8 in varchar2 default null
,P_PEN_ATTRIBUTE9 in varchar2 default null
,P_PEN_ATTRIBUTE10 in varchar2 default null
,P_PEN_ATTRIBUTE11 in varchar2 default null
,P_PEN_ATTRIBUTE12 in varchar2 default null
,P_PEN_ATTRIBUTE13 in varchar2 default null
,P_PEN_ATTRIBUTE14 in varchar2 default null
,P_PEN_ATTRIBUTE15 in varchar2 default null
,P_PEN_ATTRIBUTE16 in varchar2 default null
,P_PEN_ATTRIBUTE17 in varchar2 default null
,P_PEN_ATTRIBUTE18 in varchar2 default null
,P_PEN_ATTRIBUTE19 in varchar2 default null
,P_PEN_ATTRIBUTE20 in varchar2 default null
,P_PEN_ATTRIBUTE21 in varchar2 default null
,P_PEN_ATTRIBUTE22 in varchar2 default null
,P_PEN_ATTRIBUTE23 in varchar2 default null
,P_PEN_ATTRIBUTE24 in varchar2 default null
,P_PEN_ATTRIBUTE25 in varchar2 default null
,P_PEN_ATTRIBUTE26 in varchar2 default null
,P_PEN_ATTRIBUTE27 in varchar2 default null
,P_PEN_ATTRIBUTE28 in varchar2 default null
,P_PEN_ATTRIBUTE29 in varchar2 default null
,P_PEN_ATTRIBUTE30 in varchar2 default null
,P_PROGRAM_UPDATE_DATE in date default null
,P_BNFT_TYP_CD in varchar2 default null
,P_BNFT_ORDR_NUM in number default null
,P_PRTT_ENRT_RSLT_STAT_CD in varchar2 default null
,P_BNFT_NNMNTRY_UOM in varchar2 default null
,P_COMP_LVL_CD in varchar2 default null
,P_EFFECTIVE_DATE in date
,P_MULTI_ROW_VALIDATE in boolean default null
,P_OIPL_USER_KEY in varchar2 default null
,P_PERSON_USER_KEY in varchar2 default null
,P_ASSIGNMENT_USER_KEY in varchar2 default null
,P_PROGRAM in varchar2 default null
,P_PLAN in varchar2 default null
,P_RPLCS_SSPNDD_RSLT_USER_KEY in varchar2 default null
,P_PTIP_USER_KEY in varchar2 default null
,P_PLAN_TYPE in varchar2 default null
,P_LIFE_EVENT_REASON in varchar2 default null
,P_UOM in varchar2 default null
,P_PER_IN_LER_USER_KEY in varchar2 default null) is
blid number := p_data_pump_batch_line_id;
 L_MULTI_ROW_VALIDATE varchar2(5);
begin
if P_MULTI_ROW_VALIDATE is null then
 L_MULTI_ROW_VALIDATE := null;
elsif P_MULTI_ROW_VALIDATE then
 L_MULTI_ROW_VALIDATE := 'TRUE';
else 
 L_MULTI_ROW_VALIDATE := 'FALSE';
end if;
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025
,pval026
,pval027
,pval028
,pval029
,pval030
,pval031
,pval032
,pval033
,pval034
,pval035
,pval036
,pval037
,pval038
,pval039
,pval040
,pval041
,pval042
,pval043
,pval044
,pval045
,pval046
,pval047
,pval048
,pval049
,pval050
,pval051
,pval053
,pval054
,pval055
,pval056
,pval057
,pval058
,pval059
,pval060
,pval061
,pval062
,pval063
,pval064
,pval065
,pval066
,pval067
,pval068
,pval069
,pval070)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,617
,'U'
,p_user_sequence
,p_link_value
,P_PRTT_ENRT_RSLT_USER_KEY
,P_SSPNDD_FLAG
,P_PRTT_IS_CVRD_FLAG
,P_BNFT_AMT
,dc(P_ORGNL_ENRT_DT)
,P_ENRT_MTHD_CD
,P_NO_LNGR_ELIG_FLAG
,P_ENRT_OVRIDN_FLAG
,P_ENRT_OVRID_RSN_CD
,dc(P_ERLST_DEENRT_DT)
,dc(P_ENRT_CVG_STRT_DT)
,dc(P_ENRT_CVG_THRU_DT)
,dc(P_ENRT_OVRID_THRU_DT)
,P_PL_ORDR_NUM
,P_PLIP_ORDR_NUM
,P_PTIP_ORDR_NUM
,P_OIPL_ORDR_NUM
,P_PEN_ATTRIBUTE_CATEGORY
,P_PEN_ATTRIBUTE1
,P_PEN_ATTRIBUTE2
,P_PEN_ATTRIBUTE3
,P_PEN_ATTRIBUTE4
,P_PEN_ATTRIBUTE5
,P_PEN_ATTRIBUTE6
,P_PEN_ATTRIBUTE7
,P_PEN_ATTRIBUTE8
,P_PEN_ATTRIBUTE9
,P_PEN_ATTRIBUTE10
,P_PEN_ATTRIBUTE11
,P_PEN_ATTRIBUTE12
,P_PEN_ATTRIBUTE13
,P_PEN_ATTRIBUTE14
,P_PEN_ATTRIBUTE15
,P_PEN_ATTRIBUTE16
,P_PEN_ATTRIBUTE17
,P_PEN_ATTRIBUTE18
,P_PEN_ATTRIBUTE19
,P_PEN_ATTRIBUTE20
,P_PEN_ATTRIBUTE21
,P_PEN_ATTRIBUTE22
,P_PEN_ATTRIBUTE23
,P_PEN_ATTRIBUTE24
,P_PEN_ATTRIBUTE25
,P_PEN_ATTRIBUTE26
,P_PEN_ATTRIBUTE27
,P_PEN_ATTRIBUTE28
,P_PEN_ATTRIBUTE29
,P_PEN_ATTRIBUTE30
,dc(P_PROGRAM_UPDATE_DATE)
,P_BNFT_TYP_CD
,P_BNFT_ORDR_NUM
,P_PRTT_ENRT_RSLT_STAT_CD
,P_BNFT_NNMNTRY_UOM
,P_COMP_LVL_CD
,dc(P_EFFECTIVE_DATE)
,L_MULTI_ROW_VALIDATE
,P_OIPL_USER_KEY
,P_PERSON_USER_KEY
,P_ASSIGNMENT_USER_KEY
,P_PROGRAM
,P_PLAN
,P_RPLCS_SSPNDD_RSLT_USER_KEY
,P_PTIP_USER_KEY
,P_PLAN_TYPE
,P_LIFE_EVENT_REASON
,P_UOM
,P_PER_IN_LER_USER_KEY);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
l.pval001 p1,
decode(l.pval002,cn,dn,d(l.pval002)) p2,
decode(l.pval003,cn,dn,d(l.pval003)) p3,
decode(l.pval004,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval004,'YES_NO',d(l.pval058),vn)) p4,
l.pval004 d4,
decode(l.pval005,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval005,'YES_NO',d(l.pval058),vn)) p5,
l.pval005 d5,
decode(l.pval006,cn,nn,vn,nn,n(l.pval006)) p6,
l.pval006 d6,
decode(l.pval007,cn,dn,vn,dn,d(l.pval007)) p7,
l.pval007 d7,
decode(l.pval008,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval008,'BEN_ENRT_RSLT_MTHD',d(l.pval058),vn)) p8,
l.pval008 d8,
decode(l.pval009,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval009,'YES_NO',d(l.pval058),vn)) p9,
l.pval009 d9,
decode(l.pval010,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval010,'YES_NO',d(l.pval058),vn)) p10,
l.pval010 d10,
decode(l.pval011,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval011,'BEN_OVRID_RSN',d(l.pval058),vn)) p11,
l.pval011 d11,
decode(l.pval012,cn,dn,vn,dn,d(l.pval012)) p12,
l.pval012 d12,
decode(l.pval013,cn,dn,vn,dn,d(l.pval013)) p13,
l.pval013 d13,
decode(l.pval014,cn,dn,vn,dn,d(l.pval014)) p14,
l.pval014 d14,
decode(l.pval015,cn,dn,vn,dn,d(l.pval015)) p15,
l.pval015 d15,
decode(l.pval016,cn,nn,vn,nn,n(l.pval016)) p16,
l.pval016 d16,
decode(l.pval017,cn,nn,vn,nn,n(l.pval017)) p17,
l.pval017 d17,
decode(l.pval018,cn,nn,vn,nn,n(l.pval018)) p18,
l.pval018 d18,
decode(l.pval019,cn,nn,vn,nn,n(l.pval019)) p19,
l.pval019 d19,
decode(l.pval020,cn,vn,vn,vn,l.pval020) p20,
l.pval020 d20,
decode(l.pval021,cn,vn,vn,vn,l.pval021) p21,
l.pval021 d21,
decode(l.pval022,cn,vn,vn,vn,l.pval022) p22,
l.pval022 d22,
decode(l.pval023,cn,vn,vn,vn,l.pval023) p23,
l.pval023 d23,
decode(l.pval024,cn,vn,vn,vn,l.pval024) p24,
l.pval024 d24,
decode(l.pval025,cn,vn,vn,vn,l.pval025) p25,
l.pval025 d25,
decode(l.pval026,cn,vn,vn,vn,l.pval026) p26,
l.pval026 d26,
decode(l.pval027,cn,vn,vn,vn,l.pval027) p27,
l.pval027 d27,
decode(l.pval028,cn,vn,vn,vn,l.pval028) p28,
l.pval028 d28,
decode(l.pval029,cn,vn,vn,vn,l.pval029) p29,
l.pval029 d29,
decode(l.pval030,cn,vn,vn,vn,l.pval030) p30,
l.pval030 d30,
decode(l.pval031,cn,vn,vn,vn,l.pval031) p31,
l.pval031 d31,
decode(l.pval032,cn,vn,vn,vn,l.pval032) p32,
l.pval032 d32,
decode(l.pval033,cn,vn,vn,vn,l.pval033) p33,
l.pval033 d33,
decode(l.pval034,cn,vn,vn,vn,l.pval034) p34,
l.pval034 d34,
decode(l.pval035,cn,vn,vn,vn,l.pval035) p35,
l.pval035 d35,
decode(l.pval036,cn,vn,vn,vn,l.pval036) p36,
l.pval036 d36,
decode(l.pval037,cn,vn,vn,vn,l.pval037) p37,
l.pval037 d37,
decode(l.pval038,cn,vn,vn,vn,l.pval038) p38,
l.pval038 d38,
decode(l.pval039,cn,vn,vn,vn,l.pval039) p39,
l.pval039 d39,
decode(l.pval040,cn,vn,vn,vn,l.pval040) p40,
l.pval040 d40,
decode(l.pval041,cn,vn,vn,vn,l.pval041) p41,
l.pval041 d41,
decode(l.pval042,cn,vn,vn,vn,l.pval042) p42,
l.pval042 d42,
decode(l.pval043,cn,vn,vn,vn,l.pval043) p43,
l.pval043 d43,
decode(l.pval044,cn,vn,vn,vn,l.pval044) p44,
l.pval044 d44,
decode(l.pval045,cn,vn,vn,vn,l.pval045) p45,
l.pval045 d45,
decode(l.pval046,cn,vn,vn,vn,l.pval046) p46,
l.pval046 d46,
decode(l.pval047,cn,vn,vn,vn,l.pval047) p47,
l.pval047 d47,
decode(l.pval048,cn,vn,vn,vn,l.pval048) p48,
l.pval048 d48,
decode(l.pval049,cn,vn,vn,vn,l.pval049) p49,
l.pval049 d49,
decode(l.pval050,cn,vn,vn,vn,l.pval050) p50,
l.pval050 d50,
decode(l.pval051,cn,dn,vn,dn,d(l.pval051)) p51,
l.pval051 d51,
l.pval052 p52,
decode(l.pval053,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval053,'BEN_BNFT_TYP',d(l.pval058),vn)) p53,
l.pval053 d53,
decode(l.pval054,cn,nn,vn,nn,n(l.pval054)) p54,
l.pval054 d54,
decode(l.pval055,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval055,'BEN_PRTT_ENRT_RSLT_STAT',d(l.pval058),vn)) p55,
l.pval055 d55,
decode(l.pval056,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval056,'BEN_NNMNTRY_UOM',d(l.pval058),vn)) p56,
l.pval056 d56,
decode(l.pval057,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval057,'BEN_COMP_LVL',d(l.pval058),vn)) p57,
l.pval057 d57,
decode(l.pval058,cn,dn,d(l.pval058)) p58,
decode(l.pval059,cn,vn,vn,null,l.pval059) p59,
l.pval059 d59,
decode(l.pval060,cn,vn,vn,vn,l.pval060) p60,
l.pval060 d60,
decode(l.pval061,cn,vn,vn,vn,l.pval061) p61,
l.pval061 d61,
decode(l.pval062,cn,vn,vn,vn,l.pval062) p62,
l.pval062 d62,
decode(l.pval063,cn,vn,vn,vn,l.pval063) p63,
l.pval063 d63,
decode(l.pval064,cn,vn,vn,vn,l.pval064) p64,
l.pval064 d64,
decode(l.pval065,cn,vn,vn,vn,l.pval065) p65,
l.pval065 d65,
decode(l.pval066,cn,vn,vn,vn,l.pval066) p66,
l.pval066 d66,
decode(l.pval067,cn,vn,vn,vn,l.pval067) p67,
l.pval067 d67,
decode(l.pval068,cn,vn,vn,vn,l.pval068) p68,
l.pval068 d68,
decode(l.pval069,cn,vn,vn,vn,l.pval069) p69,
l.pval069 d69,
decode(l.pval070,cn,vn,vn,vn,l.pval070) p70,
l.pval070 d70
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_PRTT_ENRT_RSLT_ID number;
L_MULTI_ROW_VALIDATE boolean;
L_OIPL_ID number;
L_PERSON_ID number;
L_ASSIGNMENT_ID number;
L_PGM_ID number;
L_PL_ID number;
L_RPLCS_SSPNDD_RSLT_ID number;
L_PTIP_ID number;
L_PL_TYP_ID number;
L_LER_ID number;
L_UOM varchar2(2000);
L_REQUEST_ID number;
L_PROGRAM_APPLICATION_ID number;
L_PROGRAM_ID number;
L_PER_IN_LER_ID number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if upper(c.p59) = 'TRUE' then
L_MULTI_ROW_VALIDATE := true;
elsif upper(c.p59) = 'FALSE' then
L_MULTI_ROW_VALIDATE := false;
elsif c.p59 is not null then
hr_utility.set_message(800,'HR_50327_DP_TYPE_ERR');
hr_utility.set_message_token('TYPE','BOOLEAN');
hr_utility.set_message_token('PARAMETER','P_MULTI_ROW_VALIDATE');
hr_utility.set_message_token('VALUE',c.p59);
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.raise_error;
end if;
--
if c.p60 is null then
L_OIPL_ID:=nn;
else
L_OIPL_ID := 
hr_pump_get.get_oipl_id
(P_OIPL_USER_KEY => c.p60);
end if;
--
if c.p61 is null then
L_PERSON_ID:=nn;
else
L_PERSON_ID := 
hr_pump_get.get_person_id
(P_PERSON_USER_KEY => c.p61);
end if;
--
if c.p62 is null then
L_ASSIGNMENT_ID:=nn;
else
L_ASSIGNMENT_ID := 
hr_pump_get.get_assignment_id
(P_ASSIGNMENT_USER_KEY => c.p62);
end if;
--
if c.p63 is null or
c.p58 is null then
L_PGM_ID:=nn;
else
L_PGM_ID := 
hr_pump_get.get_pgm_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_PROGRAM => c.p63
,P_EFFECTIVE_DATE => c.p58);
end if;
--
if c.p64 is null or
c.p58 is null then
L_PL_ID:=nn;
else
L_PL_ID := 
hr_pump_get.get_pl_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_PLAN => c.p64
,P_EFFECTIVE_DATE => c.p58);
end if;
--
if c.p65 is null then
L_RPLCS_SSPNDD_RSLT_ID:=nn;
else
L_RPLCS_SSPNDD_RSLT_ID := 
hr_pump_get.get_rplcs_sspndd_rslt_id
(P_RPLCS_SSPNDD_RSLT_USER_KEY => c.p65);
end if;
--
if c.p66 is null then
L_PTIP_ID:=nn;
else
L_PTIP_ID := 
hr_pump_get.get_ptip_id
(P_PTIP_USER_KEY => c.p66);
end if;
--
if c.p67 is null or
c.p58 is null then
L_PL_TYP_ID:=nn;
else
L_PL_TYP_ID := 
hr_pump_get.get_pl_typ_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_PLAN_TYPE => c.p67
,P_EFFECTIVE_DATE => c.p58);
end if;
--
if c.p68 is null or
c.p58 is null then
L_LER_ID:=nn;
else
L_LER_ID := 
hr_pump_get.get_ler_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_LIFE_EVENT_REASON => c.p68
,P_EFFECTIVE_DATE => c.p58);
end if;
--
if c.p69 is null or
c.p58 is null then
L_UOM:=vn;
else
L_UOM := 
hr_pump_get.GET_UOM_CODE
(P_UOM => c.p69
,P_EFFECTIVE_DATE => c.p58);
end if;
--
L_REQUEST_ID := 
hr_pump_get.get_request_id;
--
L_PROGRAM_APPLICATION_ID := 
hr_pump_get.get_program_application_id;
--
L_PROGRAM_ID := 
hr_pump_get.get_program_id;
--
if c.p70 is null then
L_PER_IN_LER_ID:=nn;
else
L_PER_IN_LER_ID := 
hr_pump_get.get_per_in_ler_id
(P_PER_IN_LER_USER_KEY => c.p70);
end if;
--
hr_data_pump.api_trc_on;
ben_prtt_enrt_result_api.CREATE_PRTT_ENRT_RESULT
(p_validate => l_validate
,P_PRTT_ENRT_RSLT_ID => L_PRTT_ENRT_RSLT_ID
,P_EFFECTIVE_START_DATE => c.p2
,P_EFFECTIVE_END_DATE => c.p3
,p_business_group_id => p_business_group_id
,P_OIPL_ID => L_OIPL_ID
,P_PERSON_ID => L_PERSON_ID
,P_ASSIGNMENT_ID => L_ASSIGNMENT_ID
,P_PGM_ID => L_PGM_ID
,P_PL_ID => L_PL_ID
,P_RPLCS_SSPNDD_RSLT_ID => L_RPLCS_SSPNDD_RSLT_ID
,P_PTIP_ID => L_PTIP_ID
,P_PL_TYP_ID => L_PL_TYP_ID
,P_LER_ID => L_LER_ID
,P_SSPNDD_FLAG => c.p4
,P_PRTT_IS_CVRD_FLAG => c.p5
,P_BNFT_AMT => c.p6
,P_UOM => L_UOM
,P_ORGNL_ENRT_DT => c.p7
,P_ENRT_MTHD_CD => c.p8
,P_NO_LNGR_ELIG_FLAG => c.p9
,P_ENRT_OVRIDN_FLAG => c.p10
,P_ENRT_OVRID_RSN_CD => c.p11
,P_ERLST_DEENRT_DT => c.p12
,P_ENRT_CVG_STRT_DT => c.p13
,P_ENRT_CVG_THRU_DT => c.p14
,P_ENRT_OVRID_THRU_DT => c.p15
,P_PL_ORDR_NUM => c.p16
,P_PLIP_ORDR_NUM => c.p17
,P_PTIP_ORDR_NUM => c.p18
,P_OIPL_ORDR_NUM => c.p19
,P_PEN_ATTRIBUTE_CATEGORY => c.p20
,P_PEN_ATTRIBUTE1 => c.p21
,P_PEN_ATTRIBUTE2 => c.p22
,P_PEN_ATTRIBUTE3 => c.p23
,P_PEN_ATTRIBUTE4 => c.p24
,P_PEN_ATTRIBUTE5 => c.p25
,P_PEN_ATTRIBUTE6 => c.p26
,P_PEN_ATTRIBUTE7 => c.p27
,P_PEN_ATTRIBUTE8 => c.p28
,P_PEN_ATTRIBUTE9 => c.p29
,P_PEN_ATTRIBUTE10 => c.p30
,P_PEN_ATTRIBUTE11 => c.p31
,P_PEN_ATTRIBUTE12 => c.p32
,P_PEN_ATTRIBUTE13 => c.p33
,P_PEN_ATTRIBUTE14 => c.p34
,P_PEN_ATTRIBUTE15 => c.p35
,P_PEN_ATTRIBUTE16 => c.p36
,P_PEN_ATTRIBUTE17 => c.p37
,P_PEN_ATTRIBUTE18 => c.p38
,P_PEN_ATTRIBUTE19 => c.p39
,P_PEN_ATTRIBUTE20 => c.p40
,P_PEN_ATTRIBUTE21 => c.p41
,P_PEN_ATTRIBUTE22 => c.p42
,P_PEN_ATTRIBUTE23 => c.p43
,P_PEN_ATTRIBUTE24 => c.p44
,P_PEN_ATTRIBUTE25 => c.p45
,P_PEN_ATTRIBUTE26 => c.p46
,P_PEN_ATTRIBUTE27 => c.p47
,P_PEN_ATTRIBUTE28 => c.p48
,P_PEN_ATTRIBUTE29 => c.p49
,P_PEN_ATTRIBUTE30 => c.p50
,P_REQUEST_ID => L_REQUEST_ID
,P_PROGRAM_APPLICATION_ID => L_PROGRAM_APPLICATION_ID
,P_PROGRAM_ID => L_PROGRAM_ID
,P_PROGRAM_UPDATE_DATE => c.p51
,P_OBJECT_VERSION_NUMBER => c.p52
,P_PER_IN_LER_ID => L_PER_IN_LER_ID
,P_BNFT_TYP_CD => c.p53
,P_BNFT_ORDR_NUM => c.p54
,P_PRTT_ENRT_RSLT_STAT_CD => c.p55
,P_BNFT_NNMNTRY_UOM => c.p56
,P_COMP_LVL_CD => c.p57
,P_EFFECTIVE_DATE => c.p58
,P_MULTI_ROW_VALIDATE => L_MULTI_ROW_VALIDATE);
hr_data_pump.api_trc_off;
--
iuk(p_batch_line_id,c.p1,L_PRTT_ENRT_RSLT_ID);
--
update hr_pump_batch_lines l set
l.pval001 = decode(c.p1,null,cn,c.p1),
l.pval002 = decode(c.p2,null,cn,dc(c.p2)),
l.pval003 = decode(c.p3,null,cn,dc(c.p3)),
l.pval052 = decode(c.p52,null,cn,c.p52)
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_CREATE_PRTT_ENRT_RESULT;

/
