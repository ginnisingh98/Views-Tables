--------------------------------------------------------
--  DDL for Package Body HZ_PARTY_PREFERENCES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_PARTY_PREFERENCES_PKG" as
/*$Header: ARHPRFTB.pls 115.5 2003/02/04 06:51:00 ssmohan noship $ */

procedure INSERT_ROW (
  X_ROWID                 in out NOCOPY VARCHAR2,
  X_PARTY_PREFERENCE_ID   in     NUMBER,
  X_PARTY_ID              in     NUMBER,
  X_MODULE                in     VARCHAR2,
  X_CATEGORY              in     VARCHAR2,
  X_PREFERENCE_CODE       in     VARCHAR2,
  X_VALUE_VARCHAR2        in     VARCHAR2,
  X_VALUE_NUMBER          in     NUMBER,
  X_VALUE_DATE            in     DATE,
  X_VALUE_NAME            in     VARCHAR2,
  X_ADDITIONAL_VALUE1     in     VARCHAR2,
  X_ADDITIONAL_VALUE2     in     VARCHAR2,
  X_ADDITIONAL_VALUE3     in     VARCHAR2,
  X_ADDITIONAL_VALUE4     in     VARCHAR2,
  X_ADDITIONAL_VALUE5     in     VARCHAR2,
  X_OBJECT_VERSION_NUMBER in     NUMBER,
  X_CREATED_BY            in     NUMBER,
  X_CREATION_DATE         in     DATE,
  X_LAST_UPDATED_BY       in     NUMBER,
  X_LAST_UPDATE_DATE      in     DATE,
  X_LAST_UPDATE_LOGIN     in     NUMBER
) is
  cursor C is select ROWID from HZ_PARTY_PREFERENCES
    where PARTY_PREFERENCE_ID = X_PARTY_PREFERENCE_ID;
  l_rowid     ROWID;
begin
  insert into HZ_PARTY_PREFERENCES (
    PARTY_PREFERENCE_ID,
    PARTY_ID,
    MODULE,
    CATEGORY,
    PREFERENCE_CODE,
    VALUE_VARCHAR2,
    VALUE_NUMBER,
    VALUE_DATE,
    VALUE_NAME,
    ADDITIONAL_VALUE1,
    ADDITIONAL_VALUE2,
    ADDITIONAL_VALUE3,
    ADDITIONAL_VALUE4,
    ADDITIONAL_VALUE5,
    OBJECT_VERSION_NUMBER,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN
  )
    VALUES
 (  X_PARTY_PREFERENCE_ID
  , DECODE(X_PARTY_ID, FND_API.G_MISS_NUM, NULL, X_PARTY_ID)
  , DECODE(X_MODULE, FND_API.G_MISS_CHAR, NULL, X_MODULE)
  , DECODE(X_CATEGORY, FND_API.G_MISS_CHAR, NULL, X_CATEGORY)
  , DECODE(X_PREFERENCE_CODE,  FND_API.G_MISS_CHAR, NULL, X_PREFERENCE_CODE)
  , DECODE(X_VALUE_VARCHAR2, FND_API.G_MISS_CHAR, NULL, X_VALUE_VARCHAR2)
  , DECODE(X_VALUE_NUMBER, FND_API.G_MISS_NUM, NULL, X_VALUE_NUMBER)
  , DECODE(X_VALUE_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), X_VALUE_DATE)
  , DECODE(X_VALUE_NAME, FND_API.G_MISS_CHAR, NULL, X_VALUE_NAME)
  , DECODE(X_ADDITIONAL_VALUE1, FND_API.G_MISS_CHAR, NULL, X_ADDITIONAL_VALUE1)
  , DECODE(X_ADDITIONAL_VALUE2, FND_API.G_MISS_CHAR, NULL, X_ADDITIONAL_VALUE2)
  , DECODE(X_ADDITIONAL_VALUE3, FND_API.G_MISS_CHAR, NULL, X_ADDITIONAL_VALUE3)
  , DECODE(X_ADDITIONAL_VALUE4, FND_API.G_MISS_CHAR, NULL, X_ADDITIONAL_VALUE4)
  , DECODE(X_ADDITIONAL_VALUE5, FND_API.G_MISS_CHAR, NULL, X_ADDITIONAL_VALUE5)
  , DECODE(X_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, X_OBJECT_VERSION_NUMBER)
  , DECODE(X_CREATED_BY, FND_API.G_MISS_NUM, NULL, X_CREATED_BY)
  , DECODE(x_CREATION_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), x_CREATION_DATE)
  , DECODE(x_LAST_UPDATED_BY, FND_API.G_MISS_NUM, NULL, x_LAST_UPDATED_BY)
  , DECODE(x_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), x_LAST_UPDATE_DATE)
  , DECODE(x_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, NULL, x_LAST_UPDATE_LOGIN)
  ) returning ROWID into X_ROWID;

  -- Following is an old standard we used to use.
  -- Now we are trying to use returning rowid clause
  -- for returning the rowid back.
  /*
  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;
  */

end INSERT_ROW;

procedure LOCK_ROW (
  X_PARTY_PREFERENCE_ID    in NUMBER,
  X_PARTY_ID               in NUMBER,
  X_MODULE                 in VARCHAR2,
  X_CATEGORY               in VARCHAR2,
  X_PREFERENCE_CODE        in VARCHAR2,
  X_VALUE_VARCHAR2         in VARCHAR2,
  X_VALUE_NUMBER           in NUMBER,
  X_VALUE_DATE             in DATE,
  X_VALUE_NAME             in VARCHAR2,
  X_ADDITIONAL_VALUE1      in VARCHAR2,
  X_ADDITIONAL_VALUE2      in VARCHAR2,
  X_ADDITIONAL_VALUE3      in VARCHAR2,
  X_ADDITIONAL_VALUE4      in VARCHAR2,
  X_ADDITIONAL_VALUE5      in VARCHAR2,
  X_OBJECT_VERSION_NUMBER  in NUMBER
) is
  cursor c1 is select
      PARTY_ID,
      MODULE,
      CATEGORY,
      PREFERENCE_CODE,
      VALUE_VARCHAR2,
      VALUE_NUMBER,
      VALUE_DATE,
      VALUE_NAME,
      ADDITIONAL_VALUE1,
      ADDITIONAL_VALUE2,
      ADDITIONAL_VALUE3,
      ADDITIONAL_VALUE4,
      ADDITIONAL_VALUE5,
      OBJECT_VERSION_NUMBER
    from HZ_PARTY_PREFERENCES
    where PARTY_PREFERENCE_ID = X_PARTY_PREFERENCE_ID
    for update of PARTY_PREFERENCE_ID nowait;
begin
  for tlinfo in c1 loop
      if (    ((tlinfo.PARTY_ID = X_PARTY_ID)
               OR ((tlinfo.PARTY_ID is null) AND (X_PARTY_ID is null)))
          AND ((tlinfo.MODULE = X_MODULE)
               OR ((tlinfo.MODULE is null) AND (X_MODULE is null)))
          AND ((tlinfo.CATEGORY = X_CATEGORY)
               OR ((tlinfo.CATEGORY is null) AND (X_CATEGORY is null)))
          AND ((tlinfo.PREFERENCE_CODE = X_PREFERENCE_CODE)
               OR ((tlinfo.PREFERENCE_CODE is null) AND (X_PREFERENCE_CODE is null)))
          AND ((tlinfo.VALUE_VARCHAR2 = X_VALUE_VARCHAR2)
               OR ((tlinfo.VALUE_VARCHAR2 is null) AND (X_VALUE_VARCHAR2 is null)))
          AND ((tlinfo.VALUE_NUMBER = X_VALUE_NUMBER)
               OR ((tlinfo.VALUE_NUMBER is null) AND (X_VALUE_NUMBER is null)))
          AND ((tlinfo.VALUE_DATE = X_VALUE_DATE)
               OR ((tlinfo.VALUE_DATE is null) AND (X_VALUE_DATE is null)))
          AND ((tlinfo.VALUE_NAME = X_VALUE_NAME)
               OR ((tlinfo.VALUE_NAME is null) AND (X_VALUE_NAME is null)))
          AND ((tlinfo.ADDITIONAL_VALUE1 = X_ADDITIONAL_VALUE1)
               OR ((tlinfo.ADDITIONAL_VALUE1 is null) AND (X_ADDITIONAL_VALUE1 is null)))
          AND ((tlinfo.ADDITIONAL_VALUE2 = X_ADDITIONAL_VALUE2)
               OR ((tlinfo.ADDITIONAL_VALUE2 is null) AND (X_ADDITIONAL_VALUE2 is null)))
          AND ((tlinfo.ADDITIONAL_VALUE3 = X_ADDITIONAL_VALUE3)
               OR ((tlinfo.ADDITIONAL_VALUE3 is null) AND (X_ADDITIONAL_VALUE3 is null)))
          AND ((tlinfo.ADDITIONAL_VALUE4 = X_ADDITIONAL_VALUE4)
               OR ((tlinfo.ADDITIONAL_VALUE4 is null) AND (X_ADDITIONAL_VALUE4 is null)))
          AND ((tlinfo.ADDITIONAL_VALUE5 = X_ADDITIONAL_VALUE5)
               OR ((tlinfo.ADDITIONAL_VALUE5 is null) AND (X_ADDITIONAL_VALUE5 is null)))
          AND ((tlinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
               OR ((tlinfo.OBJECT_VERSION_NUMBER is null) AND (X_OBJECT_VERSION_NUMBER is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_PARTY_PREFERENCE_ID    in NUMBER,
  X_PARTY_ID               in NUMBER,
  X_MODULE                 in VARCHAR2,
  X_CATEGORY               in VARCHAR2,
  X_PREFERENCE_CODE        in VARCHAR2,
  X_VALUE_VARCHAR2         in VARCHAR2,
  X_VALUE_NUMBER           in NUMBER,
  X_VALUE_DATE             in DATE,
  X_VALUE_NAME             in VARCHAR2,
  X_ADDITIONAL_VALUE1      in VARCHAR2,
  X_ADDITIONAL_VALUE2      in VARCHAR2,
  X_ADDITIONAL_VALUE3      in VARCHAR2,
  X_ADDITIONAL_VALUE4      in VARCHAR2,
  X_ADDITIONAL_VALUE5      in VARCHAR2,
  X_OBJECT_VERSION_NUMBER  in NUMBER,
  X_LAST_UPDATED_BY        in NUMBER,
  X_LAST_UPDATE_DATE       in DATE,
  X_LAST_UPDATE_LOGIN      in NUMBER
) is
begin
  update HZ_PARTY_PREFERENCES set
    PARTY_ID = DECODE(X_PARTY_ID, FND_API.G_MISS_NUM, PARTY_ID, X_PARTY_ID),
    MODULE = DECODE(X_MODULE, FND_API.G_MISS_CHAR, MODULE, X_MODULE),
    CATEGORY = DECODE(X_CATEGORY, FND_API.G_MISS_CHAR, CATEGORY, X_CATEGORY),
    PREFERENCE_CODE = DECODE(X_PREFERENCE_CODE,FND_API.G_MISS_CHAR, PREFERENCE_CODE, X_PREFERENCE_CODE),
    VALUE_VARCHAR2 = DECODE(X_VALUE_VARCHAR2, FND_API.G_MISS_CHAR, VALUE_VARCHAR2, X_VALUE_VARCHAR2),
    VALUE_NUMBER = DECODE(X_VALUE_NUMBER, FND_API.G_MISS_NUM, VALUE_NUMBER, X_VALUE_NUMBER),
    VALUE_DATE = DECODE(X_VALUE_DATE, FND_API.G_MISS_DATE, VALUE_DATE, X_VALUE_DATE),
    VALUE_NAME = DECODE(X_VALUE_NAME, FND_API.G_MISS_CHAR, VALUE_NAME, X_VALUE_NAME),
    ADDITIONAL_VALUE1 = DECODE(X_ADDITIONAL_VALUE1, FND_API.G_MISS_CHAR, ADDITIONAL_VALUE1, X_ADDITIONAL_VALUE1),
    ADDITIONAL_VALUE2 = DECODE(X_ADDITIONAL_VALUE2, FND_API.G_MISS_CHAR, ADDITIONAL_VALUE2, X_ADDITIONAL_VALUE2),
    ADDITIONAL_VALUE3 = DECODE(X_ADDITIONAL_VALUE3, FND_API.G_MISS_CHAR, ADDITIONAL_VALUE3, X_ADDITIONAL_VALUE3),
    ADDITIONAL_VALUE4 = DECODE(X_ADDITIONAL_VALUE4, FND_API.G_MISS_CHAR, ADDITIONAL_VALUE4, X_ADDITIONAL_VALUE4),
    ADDITIONAL_VALUE5 = DECODE(X_ADDITIONAL_VALUE5, FND_API.G_MISS_CHAR, ADDITIONAL_VALUE5, X_ADDITIONAL_VALUE5),
    OBJECT_VERSION_NUMBER = DECODE(X_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, OBJECT_VERSION_NUMBER, X_OBJECT_VERSION_NUMBER),
    LAST_UPDATE_DATE = DECODE(X_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, LAST_UPDATE_DATE, X_LAST_UPDATE_DATE),
    LAST_UPDATED_BY = DECODE(X_LAST_UPDATED_BY, FND_API.G_MISS_NUM, LAST_UPDATED_BY, X_LAST_UPDATED_BY),
    LAST_UPDATE_LOGIN = DECODE(X_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, LAST_UPDATE_LOGIN, X_LAST_UPDATE_LOGIN)
  where PARTY_PREFERENCE_ID = X_PARTY_PREFERENCE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_PARTY_PREFERENCE_ID   in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER
) is
begin
  delete from HZ_PARTY_PREFERENCES
  where PARTY_PREFERENCE_ID = X_PARTY_PREFERENCE_ID
  and   OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;

end HZ_PARTY_PREFERENCES_PKG;

/
