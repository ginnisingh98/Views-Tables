--------------------------------------------------------
--  DDL for Package Body PA_PAXALRUN_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXALRUN_XMLP_PKG" AS
/* $Header: PAXALRUNB.pls 120.0 2008/01/02 11:14:09 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    X_PURGEABLE VARCHAR2(20);
    INVALID_TRX_SOURCE EXCEPTION;
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      NDF VARCHAR2(80);
      V_PROCESS_MODE VARCHAR2(20) := 'REPORT';
      X_RETCODE VARCHAR2(630) := NULL;
      X_ERRBUF VARCHAR2(630);
      V_RUN_ID NUMBER;
      V_REQUEST_ID NUMBER;
      V_RULE_NAME VARCHAR2(60);
      V_ORG_ID VARCHAR2(10);
      NUMBER_OF_MESSAGES NUMBER;
      MESSAGE_BUF VARCHAR2(2000);
    BEGIN
    P_EXPND_ITEM_DATE_1 := TO_CHAR(P_EXPND_ITEM_DATE,'DD-MON-YYYY');
      V_ORG_ID := PA_MOAC_UTILS.GET_CURRENT_ORG_ID;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      P_RULE_OPTIMIZER := FND_PROFILE.VALUE('PA_RULE_BASED_OPTIMIZER');
      V_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      V_ORG_ID := PA_MOAC_UTILS.GET_CURRENT_ORG_ID;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        MEANING
      INTO
        NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      IF (P_RUN_MODE <> 'A') THEN
        PA_ALLOC_RUN.ALLOCATION_RUN(V_PROCESS_MODE
                                   ,P_DEBUG_MODE
                                   ,P_RUN_MODE
                                   ,P_RULE_ID
                                   ,P_RUN_PERIOD
                                   ,P_EXPND_ITEM_DATE
                                   ,V_RUN_ID
                                   ,X_RETCODE
                                   ,X_ERRBUF);
        P_RUN_ID := V_RUN_ID;
        IF (X_RETCODE <> '0') THEN
          NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
          FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
            PA_DEBUG.GET_MESSAGE(I
                                ,MESSAGE_BUF);
          END LOOP;
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
        END IF;
      END IF;
      BEGIN
        SELECT
          RULE_NAME
        INTO
          C_RULE_NAME
        FROM
          PA_ALLOC_RULES
        WHERE RULE_ID = P_RULE_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
      BEGIN
        SELECT
          DECODE(P_RUN_MODE
                ,'G'
                ,DRAFT_REQUEST_ID
                ,'R'
                ,RELEASE_REQUEST_ID
                ,DRAFT_REQUEST_ID),
          RUN_STATUS_CODE,
          RUN_STATUS,
          EXPND_ITEM_DATE,
          RUN_PERIOD
        INTO
          C_REQUEST_ID
          ,P_RUN_STATUS_CODE
          ,C_RUN_STATUS
          ,C_EXPND_ITEM_DATE
          ,C_RUN_PERIOD
        FROM
          PA_ALLOC_RUNS_V
        WHERE RUN_ID = P_RUN_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          C_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
          C_RUN_PERIOD := P_RUN_PERIOD;
          C_EXPND_ITEM_DATE := P_EXPND_ITEM_DATE;
          BEGIN
            SELECT
              MEANING
            INTO
              C_RUN_STATUS
            FROM
              PA_LOOKUPS
            WHERE LOOKUP_TYPE = 'ALLOC_RUN_STATUS'
              AND LOOKUP_CODE = 'DF';
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              NULL;
          END;
      END;
      C_FUNC_CURRENCY := PA_CURRENCY.GET_CURRENCY_CODE;
      BEGIN
        SELECT
          PURGEABLE_FLAG
        INTO
          X_PURGEABLE
        FROM
          PA_TRANSACTION_SOURCES
        WHERE TRANSACTION_SOURCE = 'ALLOCATIONS';
        P_PURGEABLE := X_PURGEABLE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO
          NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := NDF;
        C_DUMMY_DATA := 1;
      WHEN INIT_FAILURE THEN
        NULL;
      WHEN INVALID_TRX_SOURCE THEN
        IF (P_RUN_MODE = 'R') THEN
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
        END IF;
      WHEN OTHERS THEN
        X_RETCODE := SQLCODE;
        X_ERRBUF := SQLERRM;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO
      L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      NUMBER_OF_MESSAGES NUMBER;
      MESSAGE_BUF VARCHAR2(2000);
      GEN_ERROR EXCEPTION;
    BEGIN
      NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
      FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
        PA_DEBUG.GET_MESSAGE(I
                            ,MESSAGE_BUF);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_RUN_STATUS_CODE in ('RS','RF')) THEN
      BEGIN
        IF (P_PURGEABLE = 'Y') THEN
          DELETE FROM PA_TRANSACTION_INTERFACE
           WHERE TRANSACTION_SOURCE = 'ALLOCATIONS'
             AND BATCH_NAME = TO_CHAR(P_RUN_ID);
        END IF;
        DELETE FROM PA_TRANSACTION_XFACE_CONTROL
         WHERE TRANSACTION_SOURCE = 'ALLOCATIONS'
           AND BATCH_NAME = TO_CHAR(P_RUN_ID);
        COMMIT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
        WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
      END;
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION DRAFT_EXCEPTION_EXISTS RETURN number IS
    DUMMY NUMBER;
  BEGIN
    SELECT
      1
    INTO
      DUMMY
    FROM
      DUAL
    WHERE exists (
      SELECT
        1
      FROM
        PA_ALLOC_EXCEPTIONS
      WHERE RUN_ID = P_RUN_ID );
    RETURN (DUMMY);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END DRAFT_EXCEPTION_EXISTS;

  FUNCTION ALLOC_TXN_EXISTS RETURN number IS
    DUMMY NUMBER;
  BEGIN
    SELECT
      1
    INTO
      DUMMY
    FROM
      DUAL
    WHERE exists (
      SELECT
        1
      FROM
        PA_ALLOC_TRANSACTIONS_V
      WHERE RUN_ID = P_RUN_ID );
    RETURN (DUMMY);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END ALLOC_TXN_EXISTS;

  FUNCTION RELEASE_EXCEPTION_EXISTS RETURN number IS
    DUMMY NUMBER;
  BEGIN
    SELECT
      1
    INTO
      DUMMY
    FROM
      DUAL
    WHERE exists (
      SELECT
        1
      FROM
        PA_ALLOC_TRANSACTIONS_V
      WHERE RUN_ID = P_RUN_ID
        AND REJECTION_CODE is not null );
    RETURN (DUMMY);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END RELEASE_EXCEPTION_EXISTS;

  FUNCTION C_FMT_MASKFORMULA RETURN VARCHAR2 IS
    TMP_FMT_MASK VARCHAR2(15);
  BEGIN
    TMP_FMT_MASK := PA_CURRENCY.CURRENCY_FMT_MASK(15);
    RETURN TMP_FMT_MASK;
  END C_FMT_MASKFORMULA;

  FUNCTION C_DSP_SUM_CURRENT_ALLOCATIONFO(SUM_CURRENT_ALLOCATION IN NUMBER
                                         ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(SUM_CURRENT_ALLOCATION
                  ,C_FMT_MASK);
  END C_DSP_SUM_CURRENT_ALLOCATIONFO;

  FUNCTION C_DSP_SUM_PREV_ALLOCATIONFORMU(SUM_PREVIOUS_ALLOCATION IN NUMBER
                                         ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(SUM_PREVIOUS_ALLOCATION
                  ,C_FMT_MASK);
  END C_DSP_SUM_PREV_ALLOCATIONFORMU;

  FUNCTION C_DSP_TOTAL_ALLOCATIONFORMULA(SUM_TOTAL_ALLOCATION IN NUMBER
                                        ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(SUM_TOTAL_ALLOCATION
                  ,C_FMT_MASK);
  END C_DSP_TOTAL_ALLOCATIONFORMULA;

  FUNCTION C_DSP_CURRENT_ALLOCATIONFORMUL(CURRENT_ALLOCATION IN NUMBER
                                         ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(CURRENT_ALLOCATION
                  ,C_FMT_MASK);
  END C_DSP_CURRENT_ALLOCATIONFORMUL;

  FUNCTION C_DSP_CURRENT_SUMFORMULA(CS_CURRENT_SUM IN NUMBER
                                   ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(CS_CURRENT_SUM
                  ,C_FMT_MASK);
  END C_DSP_CURRENT_SUMFORMULA;

  FUNCTION C_DSP_PREVIOUS_SUMFORMULA(CS_PREVIOUS_SUM IN NUMBER
                                    ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(CS_PREVIOUS_SUM
                  ,C_FMT_MASK);
  END C_DSP_PREVIOUS_SUMFORMULA;

  FUNCTION C_DSP_TOT_SUMFORMULA(CS_TOT_SUM IN NUMBER
                               ,C_FMT_MASK IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CHAR(CS_TOT_SUM
                  ,C_FMT_MASK);
  END C_DSP_TOT_SUMFORMULA;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_RULE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RULE_NAME;
  END C_RULE_NAME_P;

  FUNCTION C_REQUEST_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_REQUEST_ID;
  END C_REQUEST_ID_P;

  FUNCTION C_RUN_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RUN_STATUS;
  END C_RUN_STATUS_P;

  FUNCTION C_FUNC_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FUNC_CURRENCY;
  END C_FUNC_CURRENCY_P;

  FUNCTION C_RUN_PERIOD_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RUN_PERIOD;
  END C_RUN_PERIOD_P;

  FUNCTION C_EXPND_ITEM_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_EXPND_ITEM_DATE;
  END C_EXPND_ITEM_DATE_P;

END PA_PAXALRUN_XMLP_PKG;


/
