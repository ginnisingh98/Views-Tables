--------------------------------------------------------
--  DDL for Package Body AR_ARXKIR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_ARXKIR_XMLP_PKG" AS
/* $Header: ARXKIRB.pls 120.0 2007/12/27 13:54:51 abraghun noship $ */
  FUNCTION C_1FORMULA(CURRENT_PERIOD IN VARCHAR2
                     ,PRIOR_PERIOD IN VARCHAR2
                     ,CURRENT_YEAR IN NUMBER
                     ,SET_OF_BOOKS_ID_LP IN VARCHAR2
                     ,CURRENT_END_DATE IN DATE
                     ,CURRENT_START_DATE IN DATE
                     ,PRIOR_END_DATE IN DATE
                     ,PRIOR_START_DATE IN DATE) RETURN NUMBER IS
  BEGIN
    DECLARE
      CURRENT_CUSTOMER_COUNT NUMBER(9,2);
      PRIOR_CUSTOMER_COUNT NUMBER(9,2);
      CURRENT_YEAR_CUSTOMER_COUNT NUMBER(9,2);
      CURRENT_LOCATION_COUNT NUMBER(9,2);
      PRIOR_LOCATION_COUNT NUMBER(9,2);
      PRIOR_YEAR_COUNT NUMBER(9,2);
      CURRENT_ON_HOLD_Y_COUNT NUMBER(9,2);
      PRIOR_ON_HOLD_Y_COUNT NUMBER(9,2);
      YEAR_ON_HOLD_Y_COUNT NUMBER(9,2);
      CURRENT_ON_HOLD_N_COUNT NUMBER(9,2);
      PRIOR_ON_HOLD_N_COUNT NUMBER(9,2);
      YEAR_ON_HOLD_N_COUNT NUMBER(9,2);
      CURRENT_PAY_PER_DAY NUMBER(9,2);
      PRIOR_PAY_PER_DAY NUMBER(9,2);
      CURRENT_BATCH_PER_DAY NUMBER(9,2);
      PRIOR_BATCH_PER_DAY NUMBER(9,2);
      CURRENT_PAY_PER_BATCH NUMBER(9,2);
      PRIOR_PAY_PER_BATCH NUMBER(9,2);
    BEGIN
      SELECT
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,CURRENT_PERIOD
                      ,1
                      ,0))
           ,0) CURRENT_CUSTOMER_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,PRIOR_PERIOD
                      ,1
                      ,0))
           ,0) PRIOR_CUSTOMER_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_YEAR
                      ,CURRENT_YEAR
                      ,1
                      ,0))
           ,0) CURRENT_YEAR_CUSTOMER_COUNT
      INTO CURRENT_CUSTOMER_COUNT,PRIOR_CUSTOMER_COUNT,CURRENT_YEAR_CUSTOMER_COUNT
      FROM
        HZ_CUST_ACCOUNTS C,
        GL_PERIOD_STATUSES GPS
      WHERE C.CREATION_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE
        AND GPS.APPLICATION_ID = 222
        AND GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD )
        AND C.CREATION_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE;
      P_CURRENT_CUSTOMER_COUNT := CURRENT_CUSTOMER_COUNT;
      P_PRIOR_CUSTOMER_COUNT := PRIOR_CUSTOMER_COUNT;
      P_CURRENT_YEAR_CUSTOMER_COUNT := CURRENT_YEAR_CUSTOMER_COUNT;
      SELECT
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,CURRENT_PERIOD
                      ,1
                      ,0))
           ,0) CURRENT_LOCATION_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,PRIOR_PERIOD
                      ,1
                      ,0))
           ,0) PRIOR_LOCATION_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_YEAR
                      ,CURRENT_YEAR
                      ,1
                      ,0))
           ,0) PRIOR_YEAR_COUNT
      INTO CURRENT_LOCATION_COUNT,PRIOR_LOCATION_COUNT,PRIOR_YEAR_COUNT
      FROM
        HZ_CUST_ACCT_SITES A,
        GL_PERIOD_STATUSES GPS
      WHERE A.CREATION_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE
        AND GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND GPS.APPLICATION_ID = 222
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD );
      P_CURRENT_LOCATION_COUNT := CURRENT_LOCATION_COUNT;
      P_PRIOR_LOCATION_COUNT := PRIOR_LOCATION_COUNT;
      P_PRIOR_YEAR_COUNT := PRIOR_YEAR_COUNT;
      SELECT
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,CURRENT_PERIOD
                      ,1
                      ,0))
           ,0) CURRENT_ON_HOLD_Y_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,PRIOR_PERIOD
                      ,1
                      ,0))
           ,0) PRIOR_ON_HOLD_Y_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_YEAR
                      ,CURRENT_YEAR
                      ,1
                      ,0))
           ,0) YEAR_ON_HOLD_Y_COUNT
      INTO CURRENT_ON_HOLD_Y_COUNT,PRIOR_ON_HOLD_Y_COUNT,YEAR_ON_HOLD_Y_COUNT
      FROM
        AR_CREDIT_HISTORIES CH,
        GL_PERIOD_STATUSES GPS
      WHERE CH.CREATION_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE
        AND CH.ON_HOLD = 'Y'
        AND GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND GPS.APPLICATION_ID = 222
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD );
      P_CURRENT_ON_HOLD_Y_COUNT := CURRENT_ON_HOLD_Y_COUNT;
      P_PRIOR_ON_HOLD_Y_COUNT := PRIOR_ON_HOLD_Y_COUNT;
      P_YEAR_ON_HOLD_Y_COUNT := YEAR_ON_HOLD_Y_COUNT;
      SELECT
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,CURRENT_PERIOD
                      ,1
                      ,0))
           ,0) CURRENT_ON_HOLD_N_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_NAME
                      ,PRIOR_PERIOD
                      ,1
                      ,0))
           ,0) PRIOR_ON_HOLD_N_COUNT,
        NVL(SUM(DECODE(GPS.PERIOD_YEAR
                      ,CURRENT_YEAR
                      ,1
                      ,0))
           ,0) YEAR_ON_HOLD_N_COUNT
      INTO CURRENT_ON_HOLD_N_COUNT,PRIOR_ON_HOLD_N_COUNT,YEAR_ON_HOLD_N_COUNT
      FROM
        AR_CREDIT_HISTORIES CH,
        GL_PERIOD_STATUSES GPS
      WHERE CH.CREATION_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE
        AND CH.ON_HOLD = 'N'
        AND GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND GPS.APPLICATION_ID = 222
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD );
      P_CURRENT_ON_HOLD_N_COUNT := CURRENT_ON_HOLD_N_COUNT;
      P_PRIOR_ON_HOLD_N_COUNT := PRIOR_ON_HOLD_N_COUNT;
      P_YEAR_ON_HOLD_N_COUNT := YEAR_ON_HOLD_N_COUNT;
      SELECT
        ROUND(NVL(SUM(DECODE(GPS.PERIOD_NAME
                            ,CURRENT_PERIOD
                            ,1
                            ,0))
                 ,0) / ((CURRENT_END_DATE) - (CURRENT_START_DATE))
             ,1) CURRENT_PAY_PER_DAY,
        ROUND(NVL(SUM(DECODE(GPS.PERIOD_NAME
                            ,PRIOR_PERIOD
                            ,1
                            ,0))
                 ,0) / ((PRIOR_END_DATE) - (PRIOR_START_DATE))
             ,1) PRIOR_PAY_PER_DAY
      INTO CURRENT_PAY_PER_DAY,PRIOR_PAY_PER_DAY
      FROM
        AR_CASH_RECEIPTS CR,
        AR_RECEIPT_METHODS RM,
        AR_RECEIPT_CLASSES RC,
        AR_CASH_RECEIPT_HISTORY CRH,
        GL_PERIOD_STATUSES GPS
      WHERE CR.RECEIPT_METHOD_ID = RM.RECEIPT_METHOD_ID
        AND RM.RECEIPT_CLASS_ID = RC.RECEIPT_CLASS_ID
        AND CR.CASH_RECEIPT_ID = CRH.CASH_RECEIPT_ID
        AND CRH.FIRST_POSTED_RECORD_FLAG = 'Y'
        AND RC.CREATION_METHOD_CODE = 'MANUAL'
        AND GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND GPS.APPLICATION_ID = 222
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD )
        AND CRH.GL_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE
        AND CR.STATUS NOT IN ( 'NSF' , 'REV' , 'STOP' );
      P_CURRENT_PAY_PER_DAY := CURRENT_PAY_PER_DAY;
      P_PRIOR_PAY_PER_DAY := PRIOR_PAY_PER_DAY;
      SELECT
        NVL(ROUND(SUM(DECODE(GPS.PERIOD_NAME
                            ,CURRENT_PERIOD
                            ,1
                            ,0)) / ((CURRENT_END_DATE) - (CURRENT_START_DATE))
                 ,1)
           ,0) CURRENT_BATCH_PER_DAY,
        NVL(ROUND(SUM(DECODE(GPS.PERIOD_NAME
                            ,PRIOR_PERIOD
                            ,1
                            ,0)) / ((PRIOR_END_DATE) - (PRIOR_START_DATE))
                 ,1)
           ,0) PRIOR_BATCH_PER_DAY
      INTO CURRENT_BATCH_PER_DAY,PRIOR_BATCH_PER_DAY
      FROM
        AR_BATCHES B,
        GL_PERIOD_STATUSES GPS
      WHERE GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND GPS.APPLICATION_ID = 222
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD )
        AND B.TYPE = 'MANUAL'
        AND B.GL_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE;
      P_CURRENT_BATCH_PER_DAY := CURRENT_BATCH_PER_DAY;
      P_PRIOR_BATCH_PER_DAY := PRIOR_BATCH_PER_DAY;
      SELECT
        NVL(ROUND(AVG(DECODE(GPS.PERIOD_NAME
                            ,CURRENT_PERIOD
                            ,COUNT(CR.CASH_RECEIPT_ID)
                            ,NULL))
                 ,1)
           ,0) CURRENT_PAY_PER_BATCH,
        NVL(ROUND(AVG(DECODE(GPS.PERIOD_NAME
                            ,PRIOR_PERIOD
                            ,COUNT(CR.CASH_RECEIPT_ID)
                            ,NULL))
                 ,1)
           ,0) PRIOR_PAY_PER_BATCH
      INTO CURRENT_PAY_PER_BATCH,PRIOR_PAY_PER_BATCH
      FROM
        AR_CASH_RECEIPTS CR,
        AR_RECEIPT_METHODS RM,
        AR_RECEIPT_CLASSES RC,
        AR_CASH_RECEIPT_HISTORY CRH,
        AR_BATCHES B,
        GL_PERIOD_STATUSES GPS
      WHERE CR.RECEIPT_METHOD_ID = RM.RECEIPT_METHOD_ID
        AND RM.RECEIPT_CLASS_ID = RC.RECEIPT_CLASS_ID
        AND CR.CASH_RECEIPT_ID = CRH.CASH_RECEIPT_ID
        AND CRH.FIRST_POSTED_RECORD_FLAG = 'Y'
        AND RC.CREATION_METHOD_CODE = 'MANUAL'
        AND GPS.SET_OF_BOOKS_ID = SET_OF_BOOKS_ID_LP
        AND GPS.APPLICATION_ID = 222
        AND ( GPS.PERIOD_NAME = CURRENT_PERIOD
      OR GPS.PERIOD_NAME = PRIOR_PERIOD )
        AND CRH.BATCH_ID = B.BATCH_ID
        AND B.GL_DATE BETWEEN GPS.START_DATE
        AND GPS.END_DATE
      GROUP BY
        B.BATCH_ID,
        GPS.PERIOD_NAME;
      P_CURRENT_PAY_PER_BATCH := CURRENT_PAY_PER_BATCH;
      P_PRIOR_PAY_PER_BATCH := PRIOR_PAY_PER_BATCH;
      RETURN (1);
    END;
    RETURN NULL;
  END C_1FORMULA;

  FUNCTION PC_ON_HOLD_N_COUNTFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_ON_HOLD_N_COUNT)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_ON_HOLD_N_COUNT)*/NULL;
      SELECT
        DECODE(P_PRIOR_ON_HOLD_N_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_ON_HOLD_N_COUNT - P_PRIOR_ON_HOLD_N_COUNT) * 100 / P_PRIOR_ON_HOLD_N_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_ON_HOLD_N_COUNTFORMULA;

  FUNCTION PC_ON_HOLD_Y_COUNTFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_ON_HOLD_Y_COUNT)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_ON_HOLD_Y_COUNT)*/NULL;
      SELECT
        DECODE(P_PRIOR_ON_HOLD_Y_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_ON_HOLD_Y_COUNT - P_PRIOR_ON_HOLD_Y_COUNT) * 100 / P_PRIOR_ON_HOLD_Y_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_ON_HOLD_Y_COUNTFORMULA;

  FUNCTION PC_NEW_INVOICES_COUNTFORMULA(PRIOR_NEW_INVOICES_COUNT IN NUMBER
                                       ,CURRENT_NEW_INVOICES_COUN IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_NEW_INVOICES_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_NEW_INVOICES_COUN)*/NULL;
      SELECT
        DECODE(PRIOR_NEW_INVOICES_COUNT
              ,0
              ,'n/a'
              ,TO_CHAR((((CURRENT_NEW_INVOICES_COUN - PRIOR_NEW_INVOICES_COUNT) / PRIOR_NEW_INVOICES_COUNT)) * 100
                     ,'990D00'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_NEW_INVOICES_COUNTFORMULA;

  FUNCTION PC_NEW_INVOICES_AMOUNTFORMULA(PRIOR_NEW_INVOICES_AMOUNT IN NUMBER
                                        ,CURRENT_NEW_INVOICES_AMOU IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_NEW_INVOICES_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_NEW_INVOICES_AMOU)*/NULL;
      SELECT
        DECODE(PRIOR_NEW_INVOICES_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_NEW_INVOICES_AMOU - PRIOR_NEW_INVOICES_AMOUNT) * 100 / PRIOR_NEW_INVOICES_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_NEW_INVOICES_AMOUNTFORMULA;

  FUNCTION PC_NEW_CREDIT_COUNTFORMULA(PRIOR_NEW_CREDIT_COUNT IN NUMBER
                                     ,CURRENT_NEW_CREDIT_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_NEW_CREDIT_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_NEW_CREDIT_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_NEW_CREDIT_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_NEW_CREDIT_COUNT - PRIOR_NEW_CREDIT_COUNT) * 100 / PRIOR_NEW_CREDIT_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_NEW_CREDIT_COUNTFORMULA;

  FUNCTION PC_NEW_CREDIT_AMOUNTFORMULA(PRIOR_NEW_CREDIT_AMOUNT IN NUMBER
                                      ,CURRENT_NEW_CREDIT_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_NEW_CREDIT_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_NEW_CREDIT_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_NEW_CREDIT_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_NEW_CREDIT_AMOUNT - PRIOR_NEW_CREDIT_AMOUNT) * 100 / PRIOR_NEW_CREDIT_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_NEW_CREDIT_AMOUNTFORMULA;

  FUNCTION PC_DUE_COUNTFORMULA(PRIOR_DUE_COUNT IN NUMBER
                              ,CURRENT_DUE_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_DUE_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_DUE_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_DUE_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_DUE_COUNT - PRIOR_DUE_COUNT) * 100 / PRIOR_DUE_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_DUE_COUNTFORMULA;

  FUNCTION PC_DUE_AMOUNTFORMULA(PRIOR_DUE_AMOUNT IN NUMBER
                               ,CURRENT_DUE_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_DUE_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_DUE_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_DUE_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_DUE_AMOUNT - PRIOR_DUE_AMOUNT) * 100 / PRIOR_DUE_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_DUE_AMOUNTFORMULA;

  FUNCTION PC_PAST_DUE_AMOUNTFORMULA(CURRENT_PAST_DUE_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_PAST_DUE_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_PAST_DUE_AMOUNT)*/NULL;
      SELECT
        DECODE(P_PRIOR_PAST_DUE_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_PAST_DUE_AMOUNT - P_PRIOR_PAST_DUE_AMOUNT) * 100 / P_PRIOR_PAST_DUE_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_PAST_DUE_AMOUNTFORMULA;

  FUNCTION PC_PAST_DUE_COUNTFORMULA(CURRENT_PAST_DUE_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_PAST_DUE_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_PAST_DUE_COUNT)*/NULL;
      SELECT
        DECODE(P_PRIOR_PAST_DUE_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_PAST_DUE_COUNT - P_PRIOR_PAST_DUE_COUNT) * 100 / P_PRIOR_PAST_DUE_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_PAST_DUE_COUNTFORMULA;

  FUNCTION PC_QC_COUNTFORMULA(PRIOR_QC_COUNT IN NUMBER
                             ,CURRENT_QC_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_QC_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_QC_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_QC_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_QC_COUNT - PRIOR_QC_COUNT) * 100 / PRIOR_QC_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_QC_COUNTFORMULA;

  FUNCTION PC_QC_AMOUNTFORMULA(PRIOR_QC_AMOUNT IN NUMBER
                              ,CURRENT_QC_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_QC_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_QC_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_QC_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_QC_AMOUNT - PRIOR_QC_AMOUNT) * 100 / PRIOR_QC_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_QC_AMOUNTFORMULA;

  FUNCTION PC_C_COUNTFORMULA(PRIOR_C_COUNT IN NUMBER
                            ,CURRENT_C_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_C_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_C_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_C_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_C_COUNT - PRIOR_C_COUNT) * 100 / PRIOR_C_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_C_COUNTFORMULA;

  FUNCTION PC_C_AMOUNTFORMULA(PRIOR_C_AMOUNT IN NUMBER
                             ,CURRENT_C_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_C_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_C_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_C_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_C_AMOUNT - PRIOR_C_AMOUNT) * 100 / PRIOR_C_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_C_AMOUNTFORMULA;

  FUNCTION PC_CR_COUNTFORMULA(PRIOR_CR_COUNT IN NUMBER
                             ,CURRENT_CR_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_CR_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_CR_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_CR_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_CR_COUNT - PRIOR_CR_COUNT) * 100 / PRIOR_CR_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_CR_COUNTFORMULA;

  FUNCTION PC_CR_AMOUNTFORMULA(PRIOR_CR_AMOUNT IN NUMBER
                              ,CURRENT_CR_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_CR_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_CR_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_CR_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_CR_AMOUNT - PRIOR_CR_AMOUNT) * 100 / PRIOR_CR_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_CR_AMOUNTFORMULA;

  FUNCTION PC_ADJUST_COUNTFORMULA(PRIOR_ADJUST_COUNT IN NUMBER
                                 ,CURRENT_ADJUST_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_ADJUST_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_ADJUST_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_ADJUST_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_ADJUST_COUNT - PRIOR_ADJUST_COUNT) * 100 / PRIOR_ADJUST_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_ADJUST_COUNTFORMULA;

  FUNCTION PC_ADJUST_AMOUNTFORMULA(PRIOR_ADJUST_AMOUNT IN NUMBER
                                  ,CURRENT_ADJUST_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_ADJUST_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_ADJUST_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_ADJUST_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_ADJUST_AMOUNT - PRIOR_ADJUST_AMOUNT) * 100 / PRIOR_ADJUST_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_ADJUST_AMOUNTFORMULA;

  FUNCTION PC_TYPE_AMOUNTFORMULA(PRIOR_TYPE_AMOUNT IN NUMBER
                                ,CURRENT_TYPE_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_TYPE_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_TYPE_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_TYPE_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_TYPE_AMOUNT - PRIOR_TYPE_AMOUNT) * 100 / PRIOR_TYPE_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_TYPE_AMOUNTFORMULA;

  FUNCTION PC_PT_COUNTFORMULA(PRIOR_PT_COUNT IN NUMBER
                             ,CURRENT_PT_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_PT_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_PT_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_PT_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_PT_COUNT - PRIOR_PT_COUNT) * 100 / PRIOR_PT_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_PT_COUNTFORMULA;

  FUNCTION PC_NSF_COUNTFORMULA(PRIOR_NSF_COUNT IN NUMBER
                              ,CURRENT_NSF_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_NSF_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_NSF_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_NSF_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_NSF_COUNT - PRIOR_NSF_COUNT) * 100 / PRIOR_NSF_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_NSF_COUNTFORMULA;

  FUNCTION PC_NSF_AMOUNTFORMULA(PRIOR_NSF_AMOUNT IN NUMBER
                               ,CURRENT_NSF_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_NSF_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_NSF_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_NSF_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_NSF_AMOUNT - PRIOR_NSF_AMOUNT) * 100 / PRIOR_NSF_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_NSF_AMOUNTFORMULA;

  FUNCTION PC_OR_AMOUNTFORMULA(PRIOR_OR_AMOUNT IN NUMBER
                              ,CURRENT_OR_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_OR_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_OR_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_OR_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_OR_AMOUNT - PRIOR_OR_AMOUNT) * 100 / PRIOR_OR_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_OR_AMOUNTFORMULA;

  FUNCTION PC_OR_COUNTFORMULA(PRIOR_OR_COUNT IN NUMBER
                             ,CURRENT_OR_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_OR_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_OR_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_OR_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_OR_COUNT - PRIOR_OR_COUNT) * 100 / PRIOR_OR_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_OR_COUNTFORMULA;

  FUNCTION PC_EDT_COUNTFORMULA(PRIOR_EDT_COUNT IN NUMBER
                              ,CURRENT_EDT_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_EDT_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_EDT_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_EDT_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_EDT_COUNT - PRIOR_EDT_COUNT) * 100 / PRIOR_EDT_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_EDT_COUNTFORMULA;

  FUNCTION PC_EDT_AMOUNTFORMULA(PRIOR_EDT_AMOUNT IN NUMBER
                               ,CURRENT_EDT_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_EDT_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_EDT_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_EDT_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_EDT_AMOUNT - PRIOR_EDT_AMOUNT) * 100 / PRIOR_EDT_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_EDT_AMOUNTFORMULA;

  FUNCTION PC_UDT_COUNTFORMULA(PRIOR_UDT_COUNT IN NUMBER
                              ,CURRENT_UDT_COUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_UDT_COUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_UDT_COUNT)*/NULL;
      SELECT
        DECODE(PRIOR_UDT_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_UDT_COUNT - PRIOR_UDT_COUNT) * 100 / PRIOR_UDT_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_UDT_COUNTFORMULA;

  FUNCTION PC_UDT_AMOUNTFORMULA(PRIOR_UDT_AMOUNT IN NUMBER
                               ,CURRENT_UDT_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(PRIOR_UDT_AMOUNT)*/NULL;
      /*SRW.REFERENCE(CURRENT_UDT_AMOUNT)*/NULL;
      SELECT
        DECODE(PRIOR_UDT_AMOUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((CURRENT_UDT_AMOUNT - PRIOR_UDT_AMOUNT) * 100 / PRIOR_UDT_AMOUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC_UDT_AMOUNTFORMULA;

  FUNCTION PC1_CUSTOMER_COUNTFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_CUSTOMER_COUNT)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_CUSTOMER_COUNT)*/NULL;
      SELECT
        DECODE(P_PRIOR_CUSTOMER_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_CUSTOMER_COUNT - P_PRIOR_CUSTOMER_COUNT) * 100 / P_PRIOR_CUSTOMER_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      PC_CUSTOMER_COUNT := PERCENT_VALUE;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC1_CUSTOMER_COUNTFORMULA;

  FUNCTION PC1_LOCATION_COUNTFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_LOCATION_COUNT)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_LOCATION_COUNT)*/NULL;
      SELECT
        DECODE(P_PRIOR_LOCATION_COUNT
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_LOCATION_COUNT - P_PRIOR_LOCATION_COUNT) * 100 / P_PRIOR_LOCATION_COUNT)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      PC_LOCATION_COUNT := PERCENT_VALUE;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC1_LOCATION_COUNTFORMULA;

  FUNCTION PC1_PAY_PER_BATCHFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_PAY_PER_BATCH)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_PAY_PER_BATCH)*/NULL;
      SELECT
        DECODE(P_PRIOR_PAY_PER_BATCH
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_PAY_PER_BATCH - P_PRIOR_PAY_PER_BATCH) * 100 / P_PRIOR_PAY_PER_BATCH)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      PC_PAY_PER_BATCH := PERCENT_VALUE;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC1_PAY_PER_BATCHFORMULA;

  FUNCTION PC1_PAY_PER_DAYFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_PAY_PER_DAY)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_PAY_PER_DAY)*/NULL;
      SELECT
        DECODE(P_PRIOR_PAY_PER_DAY
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_PAY_PER_DAY - P_PRIOR_PAY_PER_DAY) * 100 / P_PRIOR_PAY_PER_DAY)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      PC_PAY_PER_DAY := PERCENT_VALUE;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC1_PAY_PER_DAYFORMULA;

  FUNCTION PC1_BATCH_PER_DAY_COUNTFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PERCENT_VALUE VARCHAR2(240);
    BEGIN
      /*SRW.REFERENCE(P_PRIOR_BATCH_PER_DAY)*/NULL;
      /*SRW.REFERENCE(P_CURRENT_BATCH_PER_DAY)*/NULL;
      SELECT
        DECODE(P_PRIOR_BATCH_PER_DAY
              ,0
              ,'n/a'
              ,NVL(TO_CHAR(((P_CURRENT_BATCH_PER_DAY - P_PRIOR_BATCH_PER_DAY) * 100 / P_PRIOR_BATCH_PER_DAY)
                         ,'990D00')
                 ,'n/a'))
      INTO PERCENT_VALUE
      FROM
        DUAL;
      IF PERCENT_VALUE = 'n/a' THEN
        PERCENT_VALUE := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_NA_LOWER');
      END IF;
      PC_BATCH_PER_DAY_COUNT := PERCENT_VALUE;
      RETURN (PERCENT_VALUE);
    END;
    RETURN NULL;
  END PC1_BATCH_PER_DAY_COUNTFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION PC_PRIOR_PAST_DUE_COUNTFORMULA RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(P_PRIOR_PAST_DUE_COUNT)*/NULL;
    RETURN (P_PRIOR_PAST_DUE_COUNT);
  END PC_PRIOR_PAST_DUE_COUNTFORMULA;

  FUNCTION C_COPY_VALUEFORMULA(PRIOR_PAST_DUE_COUNT IN NUMBER
                              ,PRIOR_PAST_DUE_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(PRIOR_PAST_DUE_COUNT)*/NULL;
      /*SRW.REFERENCE(PRIOR_PAST_DUE_AMOUNT)*/NULL;
      /*SRW.REFERENCE(P_PRIOR_PAST_DUE_COUNT)*/NULL;
      /*SRW.REFERENCE(P_PRIOR_PAST_DUE_AMOUNT)*/NULL;
      P_PRIOR_PAST_DUE_COUNT := PRIOR_PAST_DUE_COUNT;
      P_PRIOR_PAST_DUE_AMOUNT := PRIOR_PAST_DUE_AMOUNT;
      RETURN 0;
    END;
    RETURN NULL;
  END C_COPY_VALUEFORMULA;

  FUNCTION P_CURRENT_CUSTOMER_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_CUSTOMER_COUNT;
  END P_CURRENT_CUSTOMER_COUNT_P;

  FUNCTION P_PRIOR_CUSTOMER_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_CUSTOMER_COUNT;
  END P_PRIOR_CUSTOMER_COUNT_P;

  FUNCTION P_CURRENT_YEAR_CUSTOMER_COUNTF RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_YEAR_CUSTOMER_COUNT;
  END P_CURRENT_YEAR_CUSTOMER_COUNTF;

  FUNCTION P_CURRENT_LOCATION_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_LOCATION_COUNT;
  END P_CURRENT_LOCATION_COUNT_P;

  FUNCTION P_PRIOR_LOCATION_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_LOCATION_COUNT;
  END P_PRIOR_LOCATION_COUNT_P;

  FUNCTION P_PRIOR_YEAR_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_YEAR_COUNT;
  END P_PRIOR_YEAR_COUNT_P;

  FUNCTION P_CURRENT_ON_HOLD_Y_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_ON_HOLD_Y_COUNT;
  END P_CURRENT_ON_HOLD_Y_COUNT_P;

  FUNCTION P_PRIOR_ON_HOLD_Y_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_ON_HOLD_Y_COUNT;
  END P_PRIOR_ON_HOLD_Y_COUNT_P;

  FUNCTION P_YEAR_ON_HOLD_Y_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_YEAR_ON_HOLD_Y_COUNT;
  END P_YEAR_ON_HOLD_Y_COUNT_P;

  FUNCTION P_CURRENT_ON_HOLD_N_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_ON_HOLD_N_COUNT;
  END P_CURRENT_ON_HOLD_N_COUNT_P;

  FUNCTION P_PRIOR_ON_HOLD_N_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_ON_HOLD_N_COUNT;
  END P_PRIOR_ON_HOLD_N_COUNT_P;

  FUNCTION P_YEAR_ON_HOLD_N_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_YEAR_ON_HOLD_N_COUNT;
  END P_YEAR_ON_HOLD_N_COUNT_P;

  FUNCTION P_CURRENT_PAY_PER_DAY_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_PAY_PER_DAY;
  END P_CURRENT_PAY_PER_DAY_P;

  FUNCTION P_PRIOR_PAY_PER_DAY_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_PAY_PER_DAY;
  END P_PRIOR_PAY_PER_DAY_P;

  FUNCTION P_PRIOR_BATCH_PER_DAY_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_BATCH_PER_DAY;
  END P_PRIOR_BATCH_PER_DAY_P;

  FUNCTION P_CURRENT_BATCH_PER_DAY_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_BATCH_PER_DAY;
  END P_CURRENT_BATCH_PER_DAY_P;

  FUNCTION P_CURRENT_PAY_PER_BATCH_P RETURN NUMBER IS
  BEGIN
    RETURN P_CURRENT_PAY_PER_BATCH;
  END P_CURRENT_PAY_PER_BATCH_P;

  FUNCTION P_PRIOR_PAY_PER_BATCH_P RETURN NUMBER IS
  BEGIN
    RETURN P_PRIOR_PAY_PER_BATCH;
  END P_PRIOR_PAY_PER_BATCH_P;

  FUNCTION PC_LOCATION_COUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PC_LOCATION_COUNT;
  END PC_LOCATION_COUNT_P;

  FUNCTION PC_BATCH_PER_DAY_COUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PC_BATCH_PER_DAY_COUNT;
  END PC_BATCH_PER_DAY_COUNT_P;

  FUNCTION PC_PAY_PER_BATCH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PC_PAY_PER_BATCH;
  END PC_PAY_PER_BATCH_P;

  FUNCTION PC_PAY_PER_DAY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PC_PAY_PER_DAY;
  END PC_PAY_PER_DAY_P;

  FUNCTION PC_CUSTOMER_COUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PC_CUSTOMER_COUNT;
  END PC_CUSTOMER_COUNT_P;

  FUNCTION C_PRIOR_PAST_DUE_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PRIOR_PAST_DUE_COUNT;
  END C_PRIOR_PAST_DUE_COUNT_P;

  FUNCTION C_PRIOR_PAST_DUE_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PRIOR_PAST_DUE_AMOUNT;
  END C_PRIOR_PAST_DUE_AMOUNT_P;

END AR_ARXKIR_XMLP_PKG;


/
