--------------------------------------------------------
--  DDL for Package Body GMF_GLR17USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_GLR17USR_XMLP_PKG" AS
/* $Header: GLR17USRB.pls 120.0 2007/12/24 13:28:59 nchinnam noship $ */
  FUNCTION WHSE_CODECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(WHSE_CODECP)*/NULL;
    IF LFROM_WHSE IS NOT NULL AND LTO_WHSE IS NOT NULL THEN
      WHSE_CODECP := ' and b.whse_code >= ''' || LFROM_WHSE || ''' and b.whse_code <= ''' || LTO_WHSE || '''';
    ELSIF LFROM_WHSE IS NULL AND LTO_WHSE IS NULL THEN
      WHSE_CODECP := 'and 1=1';
      LFROM_WHSE := SY_ALL;
      LTO_WHSE := SY_ALL;
    ELSIF LFROM_WHSE IS NOT NULL AND LTO_WHSE IS NULL THEN
      WHSE_CODECP := ' and  b.whse_code >= ''' || LFROM_WHSE || '''';
      LTO_WHSE := SY_ALL;
    ELSIF LFROM_WHSE IS NULL AND LTO_WHSE IS NOT NULL THEN
      WHSE_CODECP := ' and  b.whse_code <= ''' || LTO_WHSE || '''';
      LFROM_WHSE := SY_ALL;
    END IF;
    RETURN NULL;
  END WHSE_CODECFFORMULA;
  FUNCTION ACCTG_UNITCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ACCTG_UNITCP)*/NULL;
    IF LFROM_ACCTG_UNIT IS NOT NULL AND LTO_ACCTG_UNIT IS NOT NULL THEN
      ACCTG_UNITCP := ' and a.acctg_unit_no >= ''' || LFROM_ACCTG_UNIT || ''' and a.acctg_unit_no <= ''' || LTO_ACCTG_UNIT || '''';
    ELSIF LFROM_ACCTG_UNIT IS NULL AND LTO_ACCTG_UNIT IS NULL THEN
      ACCTG_UNITCP := 'and 1=1';
      LFROM_ACCTG_UNIT := SY_ALL;
      LTO_ACCTG_UNIT := SY_ALL;
    ELSIF LFROM_ACCTG_UNIT IS NOT NULL AND LTO_ACCTG_UNIT IS NULL THEN
      ACCTG_UNITCP := ' and  a.acctg_unit_no >= ''' || LFROM_ACCTG_UNIT || '''';
      LTO_ACCTG_UNIT := SY_ALL;
    ELSIF LFROM_ACCTG_UNIT IS NULL AND LTO_ACCTG_UNIT IS NOT NULL THEN
      ACCTG_UNITCP := ' and  a.acctg_unit_no <= ''' || LTO_ACCTG_UNIT || '''';
      LFROM_ACCTG_UNIT := SY_ALL;
    END IF;
    RETURN NULL;
  END ACCTG_UNITCFFORMULA;
  FUNCTION ORGN_CODECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGN_CODECP)*/NULL;
    IF LFROM_ORGANIZATION IS NOT NULL AND LTO_ORGANIZATION IS NOT NULL THEN
      ORGN_CODECP := ' and b.Orgn_code >= ''' || LFROM_ORGANIZATION || ''' and b.Orgn_code <= ''' || LTO_ORGANIZATION || '''';
    ELSIF LFROM_ORGANIZATION IS NULL AND LTO_ORGANIZATION IS NULL THEN
      ORGN_CODECP := 'and 1=1';
      LFROM_ORGANIZATION := SY_ALL;
      LTO_ORGANIZATION := SY_ALL;
    ELSIF LFROM_ORGANIZATION IS NOT NULL AND LTO_ORGANIZATION IS NULL THEN
      ORGN_CODECP := ' and  b.orgn_code >= ''' || LFROM_ORGANIZATION || '''';
      LTO_ORGANIZATION := SY_ALL;
    ELSIF LFROM_ORGANIZATION IS NULL AND LTO_ORGANIZATION IS NOT NULL THEN
      ORGN_CODECP := ' and  b.orgn_code <= ''' || LTO_ORGANIZATION || '''';
      LFROM_ORGANIZATION := SY_ALL;
    END IF;
    RETURN NULL;
  END ORGN_CODECFFORMULA;
  FUNCTION ORGN_CODECPFORMULA(ORGN_CODECF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGN_CODECF)*/NULL;
    RETURN NULL;
  END ORGN_CODECPFORMULA;
  FUNCTION ACCTG_UNITCPFORMULA(ACCTG_UNITCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ACCTG_UNITCF)*/NULL;
    RETURN NULL;
  END ACCTG_UNITCPFORMULA;
  FUNCTION WHSE_CODECPFORMULA(WHSE_CODECF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(WHSE_CODECF)*/NULL;
    RETURN NULL;
  END WHSE_CODECPFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    BASE_CURR VARCHAR2(4);
    CURSOR CUR_CURRENCY_CODE IS
      SELECT
        BASE_CURRENCY_CODE
      FROM
        GL_PLCY_MST
      WHERE CO_CODE = COMPANY;
  BEGIN
    BEGIN
      IF (COMPANY IS NOT NULL) THEN
        OPEN CUR_CURRENCY_CODE;
        FETCH CUR_CURRENCY_CODE
         INTO BASE_CURR;
        IF (CUR_CURRENCY_CODE%NOTFOUND) THEN
          /*SRW.MESSAGE(100
                     ,'GL_NO_FISCAL_POLICY')*/NULL;
          CLOSE CUR_CURRENCY_CODE;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END IF;
        CLOSE CUR_CURRENCY_CODE;
      END IF;
    END;
    IF LFROM_ACCTG_UNIT > LTO_ACCTG_UNIT THEN
      /*SRW.MESSAGE(100
                 ,'GL_FROM_AU_NO_LTE_TO_AU_NO')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF LFROM_ORGANIZATION > LTO_ORGANIZATION THEN
      /*SRW.MESSAGE(100
                 ,'GL_FROM_ORGN_LTE_TO_ORGN')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF LFROM_WHSE > LTO_WHSE THEN
      /*SRW.MESSAGE(100
                 ,'GL_FR0M_WHSE_LTE_LTO_WHSE')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  PROCEDURE GLR19USR_HEADER IS
  BEGIN
    NULL;
  END GLR19USR_HEADER;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    LTO_WHSE:= TO_WHSE;
    LFROM_WHSE:=FROM_WHSE;
     LTO_ACCTG_UNIT:=TO_ACCTG_UNIT;
     LFROM_ACCTG_UNIT:=FROM_ACCTG_UNIT;
     LTO_ORGANIZATION:=TO_ORGANIZATION;
    LFROM_ORGANIZATION:=FROM_ORGANIZATION;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION ACCTG_UNITCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCTG_UNITCP;
  END ACCTG_UNITCP_P;
  FUNCTION ORGN_CODECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGN_CODECP;
  END ORGN_CODECP_P;
  FUNCTION WHSE_CODECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHSE_CODECP;
  END WHSE_CODECP_P;
END GMF_GLR17USR_XMLP_PKG;


/
