--------------------------------------------------------
--  DDL for Package Body JE_JEHUIAGE_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEHUIAGE_XMLP_PKG" AS
/* $Header: JEHUIAGEB.pls 120.2 2008/06/06 12:02:58 npannamp noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      NVL(C.MINIMUM_ACCOUNTABLE_UNIT
         ,0),
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := NVL(MIN_AU
                               ,0);
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
    MINDAY NUMBER(10);
    MAXDAY NUMBER(10);
    L_SORT_OPTION AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    L_SUMMARY_OPTION AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    L_FORMAT_OPTION AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    L_NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    L_INVOICE_TYPE AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    L_VENDOR_NAME PO_VENDORS.VENDOR_NAME%TYPE;
  BEGIN
    /*SRW.MESSAGE('260974'
               ,'One')*/NULL;
    BEGIN
      SELECT
        DISPLAYED_FIELD
      INTO L_SORT_OPTION
      FROM
        AP_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'AGING_SORT_OPTION'
        AND LOOKUP_CODE = P_SORT_OPTION;
      C_HEAD_SORT_OPTION := L_SORT_OPTION;
    END;
    /*SRW.MESSAGE('260974'
               ,'Two')*/NULL;
    BEGIN
      SELECT
        DISPLAYED_FIELD
      INTO L_SUMMARY_OPTION
      FROM
        AP_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'AGING_SUMMARY_OPTION'
        AND LOOKUP_CODE = P_SUMMARY_OPTION;
      C_HEAD_SUMMARY_OPTION := L_SUMMARY_OPTION;
    END;
    /*SRW.MESSAGE('260974'
               ,'Three')*/NULL;
    BEGIN
      SELECT
        DISPLAYED_FIELD
      INTO L_FORMAT_OPTION
      FROM
        AP_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'AGING_FORMAT_OPTION'
        AND LOOKUP_CODE = P_FORMAT_OPTION;
      C_HEAD_FORMAT_OPTION := L_FORMAT_OPTION;
    END;
    /*SRW.MESSAGE('260974'
               ,'Four')*/NULL;
    BEGIN
      SELECT
        DISPLAYED_FIELD
      INTO L_NLS_ALL
      FROM
        AP_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'NLS REPORT PARAMETER'
        AND LOOKUP_CODE = 'ALL';
    END;
    /*SRW.MESSAGE('260974'
               ,'Five')*/NULL;
    BEGIN
      IF (P_INVOICE_TYPE IS NULL) THEN
        C_INVOICE_TYPE_SELECT := '%';
        C_HEAD_INVOICE_TYPE := L_NLS_ALL;
      ELSE
        SELECT
          DISPLAYED_FIELD
        INTO L_INVOICE_TYPE
        FROM
          AP_LOOKUP_CODES
        WHERE LOOKUP_TYPE = 'INVOICE TYPE'
          AND LOOKUP_CODE = P_INVOICE_TYPE;
        C_HEAD_INVOICE_TYPE := L_INVOICE_TYPE;
        C_INVOICE_TYPE_SELECT := P_INVOICE_TYPE;
      END IF;
    END;
    /*SRW.MESSAGE('260974'
               ,'Six')*/NULL;
    BEGIN
      IF (P_VENDOR_ID IS NOT NULL) THEN
        SELECT
          VENDOR_NAME
        INTO L_VENDOR_NAME
        FROM
          PO_VENDORS
        WHERE VENDOR_ID = P_VENDOR_ID;
        C_VENDOR_NAME_SELECT := L_VENDOR_NAME;
        C_HEAD_VENDOR_NAME := L_VENDOR_NAME;
        P_VENDOR_PREDICATE := 'AND V.vendor_id = ' || P_VENDOR_ID;
      ELSE
	P_VENDOR_PREDICATE := ' ';
        C_VENDOR_NAME_SELECT := '%';
        C_HEAD_VENDOR_NAME := L_NLS_ALL;
      END IF;
    END;
    /*SRW.MESSAGE('260974'
               ,'Seven')*/NULL;
    BEGIN
      SELECT
        MIN(DAYS_START),
        MAX(DAYS_TO)
      INTO MINDAY,MAXDAY
      FROM
        AP_AGING_PERIOD_LINES AAPL,
        AP_AGING_PERIODS AAP
      WHERE AAPL.AGING_PERIOD_ID = AAP.AGING_PERIOD_ID
        AND UPPER(AAP.PERIOD_NAME) = UPPER(P_PERIOD_TYPE);
      C_MINDAYS := MINDAY;
      C_MAXDAYS := MAXDAY;
    END;
    /*SRW.MESSAGE('260974'
               ,'Eight')*/NULL;
    IF P_REPORT_TYPE = 'COMBINED' THEN
      IF P_AMOUNT_DUE_LOW IS NOT NULL AND P_AMOUNT_DUE_HIGH IS NOT NULL THEN
        P_AMOUNT_PREDICATE := 'AND (nvl(ps.amount_remaining, 0) * nvl(i.exchange_rate,1)) between ' || TO_CHAR(P_AMOUNT_DUE_LOW) || ' AND ' || TO_CHAR(P_AMOUNT_DUE_HIGH);
        P_CHECK_AMOUNT_PREDICATE := 'AND nvl(ip.payment_base_amount,ip.amount) between ' || TO_CHAR(P_AMOUNT_DUE_LOW) || ' AND ' || TO_CHAR(P_AMOUNT_DUE_HIGH);
      ELSIF P_AMOUNT_DUE_LOW IS NOT NULL AND P_AMOUNT_DUE_HIGH IS NULL THEN
        P_AMOUNT_PREDICATE := 'AND (nvl(ps.amount_remaining, 0) * nvl(i.exchange_rate,1)) >= ' || TO_CHAR(P_AMOUNT_DUE_LOW);
        P_CHECK_AMOUNT_PREDICATE := 'AND nvl(ip.payment_base_amount,ip.amount)  >= ' || TO_CHAR(P_AMOUNT_DUE_LOW);
      ELSIF P_AMOUNT_DUE_LOW IS NULL AND P_AMOUNT_DUE_HIGH IS NOT NULL THEN
        P_AMOUNT_PREDICATE := 'AND (nvl(ps.amount_remaining, 0) * nvl(i.exchange_rate,1)) <= ' || TO_CHAR(P_AMOUNT_DUE_HIGH);
        P_CHECK_AMOUNT_PREDICATE := 'AND nvl(ip.payment_base_amount,ip.amount) <= ' || TO_CHAR(P_AMOUNT_DUE_HIGH);
      ELSE
	P_CHECK_AMOUNT_PREDICATE := ' ';
	P_AMOUNT_PREDICATE := ' ';
      END IF;
      P_SELECT_CHECK_NUMBER := 'NULL';
    ELSE
      P_SELECT_CHECK_NUMBER := 'to_char(c.check_number)';
      P_AMOUNT_PREDICATE := 'AND 1 = 2';
    END IF;
    /*SRW.MESSAGE('260974'
               ,'Nine')*/NULL;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('260974'
                 ,'Yes it failed here')*/NULL;
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
    L_LEDGER_ID NUMBER;
    L_LEGAL_ENTITY_ID NUMBER;
    L_LEDGER_NAME GL_LEDGERS.NAME%TYPE;
    L_LEGAL_ENTITY_NAME XLE_ENTITY_PROFILES.NAME%TYPE;
    L_NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
  BEGIN
    L_LEDGER_ID := P_LEDGER_ID;
    L_LEGAL_ENTITY_ID := P_LEGAL_ENTITY_ID;
    L_NLS_ALL := C_NLS_ALL;
    SELECT
      NAME
    INTO L_LEDGER_NAME
    FROM
      GL_LEDGERS
    WHERE LEDGER_ID = L_LEDGER_ID;
    C_HEAD_LEDGER_NAME := L_LEDGER_NAME;
    IF L_LEGAL_ENTITY_ID <> NULL THEN
      SELECT
        NAME
      INTO L_LEGAL_ENTITY_NAME
      FROM
        XLE_ENTITY_PROFILES
      WHERE LEGAL_ENTITY_ID = L_LEGAL_ENTITY_ID;
      C_HEAD_LEGAL_ENTITY_NAME := L_LEGAL_ENTITY_NAME;
    ELSE
      C_HEAD_LEGAL_ENTITY_NAME := L_NLS_ALL;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    C_NLS_NO_DATA_EXISTS := C_NLS_NO_DATA_EXISTS;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    C_NLS_END_OF_REPORT := C_NLS_END_OF_REPORT;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('2'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (CUSTOM_INIT <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('5'
                   ,'After custom_init')*/NULL;
      END IF;
      IF (GET_COVER_PAGE_VALUES <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('5'
                   ,'After Get_Cover_Page_Values')*/NULL;
      END IF;
      SORT_BY_ALTERNATE_P;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE('7'
                   ,'After Selecting Sort By Alternate Field')*/NULL;
      END IF;
      IF (SET_ORDER_BY <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('8'
                   ,'After set_order_by')*/NULL;
      END IF;
      IF (GET_PERIOD_INFO <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('9'
                   ,'After Get_period_info')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.BREAK*/NULL;
      END IF;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE('1000'
                   ,'Ledger ID' || P_LEDGER_ID)*/NULL;
        /*SRW.MESSAGE('1001'
                   ,'Legal Entity ID' || P_LEGAL_ENTITY_ID)*/NULL;
        /*SRW.MESSAGE('1002'
                   ,'Vendor Select' || C_VENDOR_NAME_SELECT)*/NULL;
        /*SRW.MESSAGE('1003'
                   ,'Invoice Select' || C_INVOICE_TYPE_SELECT)*/NULL;
        /*SRW.MESSAGE('1004'
                   ,'Currency Base Precision' || C_BASE_PRECISION)*/NULL;
        /*SRW.MESSAGE('1005'
                   ,'Currency Acct' || C_BASE_MIN_ACCT_UNIT)*/NULL;
        /*SRW.MESSAGE('1006'
                   ,'Base Curr Code' || C_BASE_CURRENCY_CODE)*/NULL;
        /*SRW.MESSAGE('1007'
                   ,'Min Days' || C_MINDAYS)*/NULL;
        /*SRW.MESSAGE('1008'
                   ,'Max Days' || C_MAXDAYS)*/NULL;
        /*SRW.MESSAGE('1009'
                   ,' Chk Amt Predicate' || P_CHECK_AMOUNT_PREDICATE)*/NULL;
        /*SRW.MESSAGE('1010'
                   ,'Order By' || P_ORDER_BY)*/NULL;
        /*SRW.MESSAGE('1011'
                   ,'Vendor Predicate' || P_VENDOR_PREDICATE)*/NULL;
        /*SRW.MESSAGE('1012'
                   ,'Sort Option' || P_SORT_OPTION)*/NULL;
        /*SRW.MESSAGE('1013'
                   ,'Sort By alternate' || SORT_BY_ALTERNATE)*/NULL;
        /*SRW.MESSAGE('1014'
                   ,'Check Number' || P_SELECT_CHECK_NUMBER)*/NULL;
        /*SRW.MESSAGE('1015'
                   ,'Amount Predicate' || P_AMOUNT_PREDICATE)*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_LEDGERS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_LEDGERS.NAME%TYPE;
    L_LEDGER_ID NUMBER;
    L_REPORT_START_DATE DATE;
  BEGIN
    L_REPORT_START_DATE := SYSDATE;
    L_LEDGER_ID := P_LEDGER_ID;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID
    INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_LEDGERS
    WHERE LEDGER_ID = L_LEDGER_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    C_REPORT_START_DATE := L_REPORT_START_DATE;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION SET_ORDER_BY RETURN BOOLEAN IS
  BEGIN
    IF UPPER(P_SORT_OPTION) = 'VENDOR NAME' THEN
      IF C_VENDOR_NAME_SELECT = '%' THEN
        IF SORT_BY_ALTERNATE = 'Y' THEN
          P_ORDER_BY := 'ORDER BY 4,8,11,17,19,23,15';
        ELSE
          P_ORDER_BY := 'ORDER BY 2,8,10,17,19,23,15';
        END IF;
      ELSE
        IF SORT_BY_ALTERNATE = 'Y' THEN
          P_ORDER_BY := 'ORDER BY 3,8,11,17,19,23,15';
        ELSE
          P_ORDER_BY := 'ORDER BY 1,8,10,17,19,23,15';
        END IF;
      END IF;
    ELSIF UPPER(P_SORT_OPTION) = 'INVOICE_TYPE' THEN
      IF C_VENDOR_NAME_SELECT = '%' THEN
        IF SORT_BY_ALTERNATE = 'Y' THEN
          P_ORDER_BY := 'ORDER BY 17,4,8,11,17,19,23,15';
        ELSE
          P_ORDER_BY := 'ORDER BY 17,2,8,10,17,19,23,15';
        END IF;
      ELSE
        IF SORT_BY_ALTERNATE = 'Y' THEN
          P_ORDER_BY := 'ORDER BY 17,3,8,11,17,19,23,15';
        ELSE
          P_ORDER_BY := 'ORDER BY 17,1,8,10,17,19,23,15';
        END IF;
      END IF;
    ELSE
      P_ORDER_BY := 'ORDER BY 2,8,10,17,19,23,15';
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END SET_ORDER_BY;

  FUNCTION GET_PERIOD_INFO RETURN BOOLEAN IS
    L_PERIOD_DAYS_START AP_AGING_PERIOD_LINES.DAYS_START%TYPE;
    L_PERIOD_DAYS_TO AP_AGING_PERIOD_LINES.DAYS_TO%TYPE;
    L_PERIOD_SEQ_NUM AP_AGING_PERIOD_LINES.PERIOD_SEQUENCE_NUM%TYPE;
    L_PERIOD_TITLE1 AP_AGING_PERIOD_LINES.REPORT_HEADING1%TYPE;
    L_PERIOD_TITLE2 AP_AGING_PERIOD_LINES.REPORT_HEADING2%TYPE;
    CURSOR PERIOD_INFO IS
      SELECT
        LINES.DAYS_START,
        LINES.DAYS_TO,
        LINES.PERIOD_SEQUENCE_NUM,
        REPORT_HEADING1,
        REPORT_HEADING2
      FROM
        AP_AGING_PERIOD_LINES LINES,
        AP_AGING_PERIODS PERIODS
      WHERE LINES.AGING_PERIOD_ID = PERIODS.AGING_PERIOD_ID
        AND UPPER(PERIODS.PERIOD_NAME) = UPPER(P_PERIOD_TYPE)
      ORDER BY
        LINES.PERIOD_SEQUENCE_NUM;
  BEGIN
    OPEN PERIOD_INFO;
    LOOP
      FETCH PERIOD_INFO
       INTO L_PERIOD_DAYS_START,L_PERIOD_DAYS_TO,L_PERIOD_SEQ_NUM,L_PERIOD_TITLE1,L_PERIOD_TITLE2;
      EXIT WHEN (PERIOD_INFO%NOTFOUND);
      IF (L_PERIOD_SEQ_NUM = 1) THEN
        C_INV_DUE_1_HEAD_1 := L_PERIOD_TITLE1;
        C_INV_DUE_1_HEAD_2 := L_PERIOD_TITLE2;
        C_INV_DUE_1_RANGE_FR := L_PERIOD_DAYS_START;
        C_INV_DUE_1_RANGE_TO := L_PERIOD_DAYS_TO;
      END IF;
      IF (L_PERIOD_SEQ_NUM = 2) THEN
        C_INV_DUE_2_HEAD_1 := L_PERIOD_TITLE1;
        C_INV_DUE_2_HEAD_2 := L_PERIOD_TITLE2;
        C_INV_DUE_2_RANGE_FR := L_PERIOD_DAYS_START;
        C_INV_DUE_2_RANGE_TO := L_PERIOD_DAYS_TO;
      END IF;
      IF (L_PERIOD_SEQ_NUM = 3) THEN
        C_INV_DUE_3_HEAD_1 := L_PERIOD_TITLE1;
        C_INV_DUE_3_HEAD_2 := L_PERIOD_TITLE2;
        C_INV_DUE_3_RANGE_FR := L_PERIOD_DAYS_START;
        C_INV_DUE_3_RANGE_TO := L_PERIOD_DAYS_TO;
      END IF;
      IF (L_PERIOD_SEQ_NUM = 4) THEN
        C_INV_DUE_4_HEAD_1 := L_PERIOD_TITLE1;
        C_INV_DUE_4_HEAD_2 := L_PERIOD_TITLE2;
        C_INV_DUE_4_RANGE_FR := L_PERIOD_DAYS_START;
        C_INV_DUE_4_RANGE_TO := L_PERIOD_DAYS_TO;
      END IF;
    END LOOP;
    CLOSE PERIOD_INFO;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_PERIOD_INFO;

  FUNCTION C_CONTACT_LINEFORMULA(C_CONTACT_SITE_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_CONTACT_NAME VARCHAR2(160);
      L_FIRST_NAME VARCHAR2(4);
      L_LAST_NAME PO_VENDOR_CONTACTS.LAST_NAME%TYPE;
      L_PHONE PO_VENDOR_CONTACTS.PHONE%TYPE;
    BEGIN
      SELECT
        SUBSTR(FIRST_NAME
              ,1
              ,1),
        LAST_NAME,
        PHONE
      INTO L_FIRST_NAME,L_LAST_NAME,L_PHONE
      FROM
        PO_VENDOR_CONTACTS
      WHERE VENDOR_SITE_ID = C_CONTACT_SITE_ID
        AND ROWNUM = 1;
      IF (L_FIRST_NAME IS NOT NULL OR L_LAST_NAME IS NOT NULL OR L_PHONE IS NOT NULL) THEN
        L_CONTACT_NAME := L_FIRST_NAME || '. ' || L_LAST_NAME || ' ' || L_PHONE;
      END IF;
      RETURN (L_CONTACT_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    RETURN NULL;
  END C_CONTACT_LINEFORMULA;

  FUNCTION C_PERCENT_REMAININGFORMULA(C_AMT_DUE_ORIGINAL IN NUMBER
                                     ,C_AMT_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_CALCULATED_VALUE NUMBER(10,1);
    BEGIN
      IF (NVL(C_AMT_DUE_ORIGINAL
         ,0) > 0 OR NVL(C_AMT_DUE_ORIGINAL
         ,0) < 0) THEN
        L_CALCULATED_VALUE := ROUND((NVL(C_AMT_DUE_REMAINING
                                       ,0) / NVL(C_AMT_DUE_ORIGINAL
                                       ,1)) * 100
                                   ,1);
        RETURN (L_CALCULATED_VALUE);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_PERCENT_REMAININGFORMULA;

  FUNCTION C_INV_DUE_AMT_1FORMULA(C_DAYS_PAST_DUE IN NUMBER
                                 ,C_AMT_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (NVL(C_DAYS_PAST_DUE
         ,0) >= C_INV_DUE_1_RANGE_FR AND NVL(C_DAYS_PAST_DUE
         ,0) <= C_INV_DUE_1_RANGE_TO) THEN
        RETURN (C_AMT_DUE_REMAINING);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_INV_DUE_AMT_1FORMULA;

  FUNCTION C_INV_DUE_AMT_2FORMULA(C_DAYS_PAST_DUE IN NUMBER
                                 ,C_AMT_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (NVL(C_DAYS_PAST_DUE
         ,0) >= C_INV_DUE_2_RANGE_FR AND NVL(C_DAYS_PAST_DUE
         ,0) <= C_INV_DUE_2_RANGE_TO) THEN
        RETURN (C_AMT_DUE_REMAINING);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_INV_DUE_AMT_2FORMULA;

  FUNCTION C_INV_DUE_AMT_3FORMULA(C_DAYS_PAST_DUE IN NUMBER
                                 ,C_AMT_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (NVL(C_DAYS_PAST_DUE
         ,0) >= C_INV_DUE_3_RANGE_FR AND NVL(C_DAYS_PAST_DUE
         ,0) <= C_INV_DUE_3_RANGE_TO) THEN
        RETURN (C_AMT_DUE_REMAINING);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_INV_DUE_AMT_3FORMULA;

  FUNCTION C_INV_DUE_AMT_4FORMULA(C_DAYS_PAST_DUE IN NUMBER
                                 ,C_AMT_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (NVL(C_DAYS_PAST_DUE
         ,0) >= C_INV_DUE_4_RANGE_FR AND NVL(C_DAYS_PAST_DUE
         ,0) <= C_INV_DUE_4_RANGE_TO) THEN
        RETURN (C_AMT_DUE_REMAINING);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_INV_DUE_AMT_4FORMULA;

  FUNCTION C_PER_V_INV_AMT_1FORMULA(C_SUM_V_INV_AMT_1 IN NUMBER
                                   ,C_SUM_V_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := (ROUND((NVL(C_SUM_V_INV_AMT_1
                            ,0) * 100) / NVL(C_SUM_V_DUE_REMAINING
                            ,1)
                        ,2));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_V_INV_AMT_1FORMULA;

  FUNCTION C_PER_V_INV_AMT_2FORMULA(C_SUM_V_INV_AMT_2 IN NUMBER
                                   ,C_SUM_V_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := (ROUND((NVL(C_SUM_V_INV_AMT_2
                            ,0) * 100) / NVL(C_SUM_V_DUE_REMAINING
                            ,1)
                        ,2));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_V_INV_AMT_2FORMULA;

  FUNCTION C_PER_V_INV_AMT_3FORMULA(C_SUM_V_INV_AMT_3 IN NUMBER
                                   ,C_SUM_V_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := (ROUND((NVL(C_SUM_V_INV_AMT_3
                            ,0) * 100) / NVL(C_SUM_V_DUE_REMAINING
                            ,1)
                        ,2));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_V_INV_AMT_3FORMULA;

  FUNCTION C_PER_V_INV_AMT_4FORMULA(C_SUM_V_INV_AMT_4 IN NUMBER
                                   ,C_SUM_V_DUE_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := (ROUND((NVL(C_SUM_V_INV_AMT_4
                            ,0) * 100) / NVL(C_SUM_V_DUE_REMAINING
                            ,1)
                        ,2));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_V_INV_AMT_4FORMULA;

  FUNCTION C_CHECK_DATA_CONVERTEDFORMULA(C_DATA_CONVERTED IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (C_DATA_CONVERTED = '*') THEN
        C_REP_DATA_CONVERTED := '*';
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_CHECK_DATA_CONVERTEDFORMULA;

  FUNCTION C_PER_INV_DUE_AMT_1FORMULA(C_SUM_INV_DUE_AMT_1 IN NUMBER
                                     ,C_SUM_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_SUM_INV_DUE_AMT_1
                      ,0) * 100) / NVL(C_SUM_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_INV_DUE_AMT_1FORMULA;

  FUNCTION C_PER_INV_DUE_AMT_2FORMULA(C_SUM_INV_DUE_AMT_2 IN NUMBER
                                     ,C_SUM_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_SUM_INV_DUE_AMT_2
                      ,0) * 100) / NVL(C_SUM_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_INV_DUE_AMT_2FORMULA;

  FUNCTION C_PER_INV_DUE_AMT_3FORMULA(C_SUM_INV_DUE_AMT_3 IN NUMBER
                                     ,C_SUM_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_SUM_INV_DUE_AMT_3
                      ,0) * 100) / NVL(C_SUM_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_INV_DUE_AMT_3FORMULA;

  FUNCTION C_PER_INV_DUE_AMT_4FORMULA(C_SUM_INV_DUE_AMT_4 IN NUMBER
                                     ,C_SUM_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_SUM_INV_DUE_AMT_4
                      ,0) * 100) / NVL(C_SUM_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_PER_INV_DUE_AMT_4FORMULA;

  FUNCTION C_PGBRK_DATA_CONVERTEDFORMULA(C_SUM_DATA_CONVERTED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF (NVL(C_SUM_DATA_CONVERTED
         ,0) > 0) THEN
        RETURN ('*');
      ELSE
        RETURN (' ');
      END IF;
    END;
    RETURN NULL;
  END C_PGBRK_DATA_CONVERTEDFORMULA;

  FUNCTION C_V_DATA_CONVERTEDFORMULA(C_SUM_V_DATA_CONVERTED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF (NVL(C_SUM_V_DATA_CONVERTED
         ,0) > 0) THEN
        RETURN ('*');
      ELSE
        RETURN (' ');
      END IF;
    END;
    RETURN NULL;
  END C_V_DATA_CONVERTEDFORMULA;

  FUNCTION C_TOT_PER_INV_DUE_1FORMULA(C_TOT_INV_DUE_AMT_1 IN NUMBER
                                     ,C_TOT_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_TOT_INV_DUE_AMT_1
                      ,0) * 100) / NVL(C_TOT_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_TOT_PER_INV_DUE_1FORMULA;

  FUNCTION C_TOT_PER_INV_DUE_2FORMULA(C_TOT_INV_DUE_AMT_2 IN NUMBER
                                     ,C_TOT_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_TOT_INV_DUE_AMT_2
                      ,0) * 100) / NVL(C_TOT_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_TOT_PER_INV_DUE_2FORMULA;

  FUNCTION C_TOT_PER_INV_DUE_3FORMULA(C_TOT_INV_DUE_AMT_3 IN NUMBER
                                     ,C_TOT_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_TOT_INV_DUE_AMT_3
                      ,0) * 100) / NVL(C_TOT_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_TOT_PER_INV_DUE_3FORMULA;

  FUNCTION C_TOT_PER_INV_DUE_4FORMULA(C_TOT_INV_DUE_AMT_4 IN NUMBER
                                     ,C_TOT_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERCENT NUMBER(10) := 0;
    BEGIN
      L_PERCENT := ((NVL(C_TOT_INV_DUE_AMT_4
                      ,0) * 100) / NVL(C_TOT_AMT_REMAINING
                      ,1));
      RETURN (L_PERCENT);
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
        RETURN (0);
    END;
    RETURN NULL;
  END C_TOT_PER_INV_DUE_4FORMULA;

  FUNCTION CF_SYSDATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_DATE.DATE_TO_CHARDT(SYSDATE));
  END CF_SYSDATEFORMULA;

  FUNCTION CF_DUE_DATEFORMULA(C_DUE_DATE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    RETURN (FND_DATE.DATE_TO_CHARDATE(C_DUE_DATE));
  END CF_DUE_DATEFORMULA;

  FUNCTION CHECK_AP_PROFILE RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_PROFILE FND_PROFILE_OPTIONS.PROFILE_OPTION_NAME%TYPE;
      L_ENDDATE FND_PROFILE_OPTIONS.END_DATE_ACTIVE%TYPE;
    BEGIN
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(100
                   ,'In Check_AP_PRofile')*/NULL;
      END IF;
      SELECT
        NVL(PROFILE_OPTION_NAME
           ,''),
        END_DATE_ACTIVE
      INTO L_PROFILE,L_ENDDATE
      FROM
        FND_PROFILE_OPTIONS
      WHERE PROFILE_OPTION_NAME = 'AP_SORT_BY_ALTERNATE';
      IF L_PROFILE = '' THEN
        IF P_DEBUG_SWITCH = 'Y' THEN
          /*SRW.MESSAGE(108
                     ,'Profile Option is --')*/NULL;
        END IF;
        RETURN (FALSE);
      ELSE
        IF L_ENDDATE IS NULL THEN
          IF P_DEBUG_SWITCH = 'Y' THEN
            /*SRW.MESSAGE(105
                       ,'End date is null')*/NULL;
          END IF;
          RETURN (TRUE);
        ELSE
          IF P_DEBUG_SWITCH = 'Y' THEN
            /*SRW.MESSAGE(106
                       ,'End date is not null')*/NULL;
          END IF;
          RETURN (FALSE);
        END IF;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        IF P_DEBUG_SWITCH = 'Y' THEN
          /*SRW.MESSAGE(101
                     ,'No Profile Found')*/NULL;
        END IF;
        RETURN (FALSE);
      WHEN OTHERS THEN
        IF P_DEBUG_SWITCH = 'Y' THEN
          /*SRW.MESSAGE(107
                     ,'Others - No Profile Found')*/NULL;
        END IF;
        RETURN (FALSE);
    END;
  END CHECK_AP_PROFILE;

  PROCEDURE SORT_BY_ALTERNATE_P IS
  BEGIN
    DECLARE
      SQL_PROFILE VARCHAR2(1000);
    BEGIN
      IF CHECK_AP_PROFILE THEN
        IF P_DEBUG_SWITCH = 'Y' THEN
          /*SRW.MESSAGE(102
                     ,'AP Profile Exists')*/NULL;
        END IF;
        BEGIN
          /*SRW.REFERENCE(SORT_BY_ALTERNATE)*/NULL;
          SORT_BY_ALTERNATE := FND_PROFILE.VALUE('AP_SORT_BY_ALTERNATE');
        EXCEPTION
          WHEN OTHERS THEN
            SORT_BY_ALTERNATE := 'N';
        END;
      ELSE
        IF P_DEBUG_SWITCH = 'Y' THEN
          /*SRW.MESSAGE(103
                     ,'Sort BY Altenate - AP Profile does not Exists')*/NULL;
        END IF;
        BEGIN
          SQL_PROFILE := 'SELECT nvl(SORT_BY_ALTERNATE_FIELD ,' || '''N''' || ') INTO :SORT_BY_ALTERNATE FROM AP_SYSTEM_PARAMETERS';
          EXECUTE IMMEDIATE
            SQL_PROFILE;
          /*SRW.MESSAGE(110
                     ,'Sort By Alternate' || SORT_BY_ALTERNATE)*/NULL;
        EXCEPTION
          WHEN OTHERS THEN
            /*SRW.MESSAGE(104
                       ,' Error while retrieving sort_by_alternate value')*/NULL;
        END;
      END IF;
    END;
  END SORT_BY_ALTERNATE_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_VENDOR_NAME_SELECT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_VENDOR_NAME_SELECT;
  END C_VENDOR_NAME_SELECT_P;

  FUNCTION C_INVOICE_TYPE_SELECT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INVOICE_TYPE_SELECT;
  END C_INVOICE_TYPE_SELECT_P;

  FUNCTION C_MINDAYS_P RETURN NUMBER IS
  BEGIN
    RETURN C_MINDAYS;
  END C_MINDAYS_P;

  FUNCTION C_MAXDAYS_P RETURN NUMBER IS
  BEGIN
    RETURN C_MAXDAYS;
  END C_MAXDAYS_P;

  FUNCTION C_INV_DUE_1_HEAD_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_1_HEAD_1;
  END C_INV_DUE_1_HEAD_1_P;

  FUNCTION C_INV_DUE_1_HEAD_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_1_HEAD_2;
  END C_INV_DUE_1_HEAD_2_P;

  FUNCTION C_INV_DUE_2_HEAD_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_2_HEAD_1;
  END C_INV_DUE_2_HEAD_1_P;

  FUNCTION C_INV_DUE_2_HEAD_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_2_HEAD_2;
  END C_INV_DUE_2_HEAD_2_P;

  FUNCTION C_INV_DUE_3_HEAD_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_3_HEAD_1;
  END C_INV_DUE_3_HEAD_1_P;

  FUNCTION C_INV_DUE_3_HEAD_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_3_HEAD_2;
  END C_INV_DUE_3_HEAD_2_P;

  FUNCTION C_INV_DUE_4_HEAD_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_4_HEAD_1;
  END C_INV_DUE_4_HEAD_1_P;

  FUNCTION C_INV_DUE_4_HEAD_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_DUE_4_HEAD_2;
  END C_INV_DUE_4_HEAD_2_P;

  FUNCTION C_INV_DUE_1_RANGE_FR_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_1_RANGE_FR;
  END C_INV_DUE_1_RANGE_FR_P;

  FUNCTION C_INV_DUE_1_RANGE_TO_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_1_RANGE_TO;
  END C_INV_DUE_1_RANGE_TO_P;

  FUNCTION C_INV_DUE_2_RANGE_FR_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_2_RANGE_FR;
  END C_INV_DUE_2_RANGE_FR_P;

  FUNCTION C_INV_DUE_2_RANGE_TO_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_2_RANGE_TO;
  END C_INV_DUE_2_RANGE_TO_P;

  FUNCTION C_INV_DUE_3_RANGE_FR_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_3_RANGE_FR;
  END C_INV_DUE_3_RANGE_FR_P;

  FUNCTION C_INV_DUE_3_RANGE_TO_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_3_RANGE_TO;
  END C_INV_DUE_3_RANGE_TO_P;

  FUNCTION C_INV_DUE_4_RANGE_FR_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_4_RANGE_FR;
  END C_INV_DUE_4_RANGE_FR_P;

  FUNCTION C_INV_DUE_4_RANGE_TO_P RETURN NUMBER IS
  BEGIN
    RETURN C_INV_DUE_4_RANGE_TO;
  END C_INV_DUE_4_RANGE_TO_P;

  FUNCTION C_HEAD_INVOICE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_INVOICE_TYPE;
  END C_HEAD_INVOICE_TYPE_P;

  FUNCTION C_HEAD_SORT_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_SORT_OPTION;
  END C_HEAD_SORT_OPTION_P;

  FUNCTION C_HEAD_VENDOR_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_VENDOR_NAME;
  END C_HEAD_VENDOR_NAME_P;

  FUNCTION C_REP_DATA_CONVERTED_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REP_DATA_CONVERTED;
  END C_REP_DATA_CONVERTED_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_HEAD_SUMMARY_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_SUMMARY_OPTION;
  END C_HEAD_SUMMARY_OPTION_P;

  FUNCTION C_HEAD_FORMAT_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_FORMAT_OPTION;
  END C_HEAD_FORMAT_OPTION_P;

  FUNCTION C_HEAD_LEDGER_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_LEDGER_NAME;
  END C_HEAD_LEDGER_NAME_P;

  FUNCTION C_HEAD_LEGAL_ENTITY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEAD_LEGAL_ENTITY_NAME;
  END C_HEAD_LEGAL_ENTITY_NAME_P;

END JE_JEHUIAGE_XMLP_PKG;



/
