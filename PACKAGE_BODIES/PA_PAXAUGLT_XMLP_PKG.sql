--------------------------------------------------------
--  DDL for Package Body PA_PAXAUGLT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXAUGLT_XMLP_PKG" AS
/* $Header: PAXAUGLTB.pls 120.1 2008/01/03 11:12:11 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL
    WHERE GL.SET_OF_BOOKS_ID = P_CA_SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION ACCOUNT_IDFORMULA(CODE_COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN GET_SEGS('SQLGL'
                   ,'GL#'
                   ,P_COA_ID
                   ,CODE_COMBINATION_ID);
  END ACCOUNT_IDFORMULA;

  FUNCTION CF_FROM_DATEFORMULA RETURN DATE IS
  BEGIN
    RETURN P_FROM_INTERFACE_DATE;
  END CF_FROM_DATEFORMULA;

  FUNCTION CF_TO_DATEFORMULA RETURN DATE IS
  BEGIN
    RETURN P_TO_INTERFACE_DATE;
  END CF_TO_DATEFORMULA;

  FUNCTION CF_ACCT_CURRENCY_CODEFORMULA RETURN VARCHAR2 IS
    L_CURR_CODE VARCHAR2(30);
  BEGIN
    SELECT
      CURRENCY_CODE
    INTO L_CURR_CODE
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = P_CA_SET_OF_BOOKS_ID;
    RETURN (L_CURR_CODE);
  END CF_ACCT_CURRENCY_CODEFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CR_ACCOUNT_IDFORMULA(CR_CODE_COMBINATION_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN GET_SEGS('SQLGL'
                   ,'GL#'
                   ,P_COA_ID
                   ,CR_CODE_COMBINATION_ID);
  END CR_ACCOUNT_IDFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_WHERE;
  END C_WHERE_P;

  FUNCTION CP_USR_JE_SNAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_USR_JE_SNAME;
  END CP_USR_JE_SNAME_P;

  FUNCTION CP_GL_START_P RETURN DATE IS
  BEGIN
    RETURN CP_GL_START;
  END CP_GL_START_P;

  FUNCTION CP_GL_END_P RETURN DATE IS
  BEGIN
    RETURN CP_GL_END;
  END CP_GL_END_P;

  PROCEDURE SET_MODULE(MODULE_NAME IN VARCHAR2
                      ,ACTION_NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin DBMS_APPLICATION_INFO.SET_MODULE(:MODULE_NAME, :ACTION_NAME); end;');
    STPROC.BIND_I(MODULE_NAME);
    STPROC.BIND_I(ACTION_NAME);
    STPROC.EXECUTE;*/
    DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME, ACTION_NAME);
  END SET_MODULE;

  PROCEDURE SET_ACTION(ACTION_NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin DBMS_APPLICATION_INFO.SET_ACTION(:ACTION_NAME); end;');
    STPROC.BIND_I(ACTION_NAME);
    STPROC.EXECUTE;*/
    DBMS_APPLICATION_INFO.SET_ACTION(ACTION_NAME);
  END SET_ACTION;

  PROCEDURE READ_MODULE(MODULE_NAME OUT NOCOPY VARCHAR2
                       ,ACTION_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin DBMS_APPLICATION_INFO.READ_MODULE(:MODULE_NAME, :ACTION_NAME); end;');
    STPROC.BIND_O(MODULE_NAME);
    STPROC.BIND_O(ACTION_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MODULE_NAME);
    STPROC.RETRIEVE(2
                   ,ACTION_NAME);*/
    DBMS_APPLICATION_INFO.READ_MODULE(MODULE_NAME, ACTION_NAME);
  END READ_MODULE;

  PROCEDURE SET_CLIENT_INFO(CLIENT_INFO IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin DBMS_APPLICATION_INFO.SET_CLIENT_INFO(:CLIENT_INFO); end;');
    STPROC.BIND_I(CLIENT_INFO);
    STPROC.EXECUTE;*/
    DBMS_APPLICATION_INFO.SET_CLIENT_INFO(CLIENT_INFO);
  END SET_CLIENT_INFO;

  PROCEDURE READ_CLIENT_INFO(CLIENT_INFO OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin DBMS_APPLICATION_INFO.READ_CLIENT_INFO(:CLIENT_INFO); end;');
    STPROC.BIND_O(CLIENT_INFO);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,CLIENT_INFO);*/
    DBMS_APPLICATION_INFO.READ_CLIENT_INFO(CLIENT_INFO);
  END READ_CLIENT_INFO;

  /*PROCEDURE SET_SESSION_LONGOPS(HINT IN OUT NOCOPY BINARY_INTEGER
                               ,CONTEXT IN NUMBER
                               ,STEPID IN NUMBER
                               ,STEPSOFAR IN NUMBER
                               ,STEPTOTAL IN NUMBER
                               ,SOFAR IN NUMBER
                               ,TOTALWORK IN NUMBER
                               ,APPLICATION_DATA_1 IN NUMBER
                               ,APPLICATION_DATA_2 IN NUMBER
                               ,APPLICATION_DATA_3 IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS(:HINT, :CONTEXT, :STEPID, :STEPSOFAR, :STEPTOTAL, :SOFAR, :TOTALWORK, :APPLICATION_DATA_1, :APPLICATION_DATA_2, :APPLICATION_DATA_3); end;');
    STPROC.BIND_IO(HINT);
    STPROC.BIND_I(CONTEXT);
    STPROC.BIND_I(STEPID);
    STPROC.BIND_I(STEPSOFAR);
    STPROC.BIND_I(STEPTOTAL);
    STPROC.BIND_I(SOFAR);
    STPROC.BIND_I(TOTALWORK);
    STPROC.BIND_I(APPLICATION_DATA_1);
    STPROC.BIND_I(APPLICATION_DATA_2);
    STPROC.BIND_I(APPLICATION_DATA_3);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,HINT);
    DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS(HINT, CONTEXT, STEPID, STEPSOFAR, STEPTOTAL, SOFAR, TOTALWORK, APPLICATION_DATA_1, APPLICATION_DATA_2, APPLICATION_DATA_3);
  END SET_SESSION_LONGOPS;*/

  FUNCTION GET_CURRENCY_CODE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.GET_CURRENCY_CODE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := PA_CURRENCY.GET_CURRENCY_CODE;
    RETURN X0;
  END GET_CURRENCY_CODE;

  FUNCTION ROUND_CURRENCY_AMT(X_AMOUNT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.ROUND_CURRENCY_AMT(:X_AMOUNT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_AMOUNT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := PA_CURRENCY.ROUND_CURRENCY_AMT(X_AMOUNT);
    RETURN X0;
  END ROUND_CURRENCY_AMT;

  FUNCTION CURRENCY_FMT_MASK(X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.CURRENCY_FMT_MASK(:X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := PA_CURRENCY.CURRENCY_FMT_MASK(X_LENGTH);
    RETURN X0;
  END CURRENCY_FMT_MASK;

  FUNCTION RPT_CURRENCY_FMT_MASK(X_ORG_ID IN NUMBER
                                ,X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := PA_CURRENCY.RPT_CURRENCY_FMT_MASK(:X_ORG_ID, :X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_ORG_ID);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := PA_CURRENCY.RPT_CURRENCY_FMT_MASK(X_ORG_ID, X_LENGTH);
    RETURN X0;
  END RPT_CURRENCY_FMT_MASK;

  FUNCTION GET_DELIMITER(APPLICATION_SHORT_NAME IN VARCHAR2
                        ,KEY_FLEX_CODE IN VARCHAR2
                        ,STRUCTURE_NUMBER IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_FLEX_EXT.GET_DELIMITER(:APPLICATION_SHORT_NAME, :KEY_FLEX_CODE, :STRUCTURE_NUMBER); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(KEY_FLEX_CODE);
    STPROC.BIND_I(STRUCTURE_NUMBER);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := FND_FLEX_EXT.GET_DELIMITER(APPLICATION_SHORT_NAME, KEY_FLEX_CODE, STRUCTURE_NUMBER);
    RETURN X0;
  END GET_DELIMITER;

  FUNCTION GET_CCID(APPLICATION_SHORT_NAME IN VARCHAR2
                   ,KEY_FLEX_CODE IN VARCHAR2
                   ,STRUCTURE_NUMBER IN NUMBER
                   ,VALIDATION_DATE IN VARCHAR2
                   ,CONCATENATED_SEGMENTS IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_FLEX_EXT.GET_CCID(:APPLICATION_SHORT_NAME, :KEY_FLEX_CODE, :STRUCTURE_NUMBER, :VALIDATION_DATE, :CONCATENATED_SEGMENTS); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(KEY_FLEX_CODE);
    STPROC.BIND_I(STRUCTURE_NUMBER);
    STPROC.BIND_I(VALIDATION_DATE);
    STPROC.BIND_I(CONCATENATED_SEGMENTS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := FND_FLEX_EXT.GET_CCID(APPLICATION_SHORT_NAME, KEY_FLEX_CODE, STRUCTURE_NUMBER, VALIDATION_DATE, CONCATENATED_SEGMENTS);
    RETURN X0;
  END GET_CCID;

  FUNCTION GET_SEGS(APPLICATION_SHORT_NAME IN VARCHAR2
                   ,KEY_FLEX_CODE IN VARCHAR2
                   ,STRUCTURE_NUMBER IN NUMBER
                   ,COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_FLEX_EXT.GET_SEGS(:APPLICATION_SHORT_NAME, :KEY_FLEX_CODE, :STRUCTURE_NUMBER, :COMBINATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(KEY_FLEX_CODE);
    STPROC.BIND_I(STRUCTURE_NUMBER);
    STPROC.BIND_I(COMBINATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := FND_FLEX_EXT.GET_SEGS(APPLICATION_SHORT_NAME, KEY_FLEX_CODE, STRUCTURE_NUMBER, COMBINATION_ID);
    RETURN X0;
  END GET_SEGS;

FUNCTION BEFOREREPORT RETURN BOOLEAN IS
BEGIN

 DECLARE
	 init_failure exception;
	 ndf VARCHAR2(80);
	 tmp_usr_je_sname VARCHAR2(25);
	 tmp_gl_start  DATE;
	 tmp_gl_end    DATE;
	 tmp_period_set   VARCHAR2(15);
 BEGIN

	/*srw.user_exit('FND SRWINIT');*/

	/* R12 Changes : The code that used to set the currency context for
	reporting set of books is removed. */

	/*srw.user_exit('FND GETPROFILE
	NAME="PA_DEBUG_MODE"
	FIELD=":p_debug_mode"
	PRINT_ERROR="N"');

	srw.user_exit('FND GETPROFILE
	NAME="PA_RULE_BASED_OPTIMIZER"
	FIELD=":p_rule_optimizer"
	PRINT_ERROR="N"');*/

	/* #3304393 commented alter session calls */

	/* if rule-based optimization is desired */
	/*
	IF :p_rule_optimizer = 'Y' then
	   srw.do_sql('ALTER SESSION SET OPTIMIZER_GOAL = RULE');
	END IF;
	*/

	/* #3304393 commented alter session calls */

	/* if the debug mode is set, turn on trace mode */
	/*
	IF p_debug_mode = 'Y' then
	   execute_immidiate 'ALTER SESSION SET SQL_TRACE TRUE';
	END IF;
	*/
	  /* Get the organization name and SYSDATE from GL_SETS_OF_BOOKS */
	  IF (get_company_name <> TRUE) THEN  -- Call report level PL/SQL function
	     RAISE init_failure;
	  END IF;

	   select meaning into ndf from pa_lookups where
	    lookup_code = 'NO_DATA_FOUND' and
	    lookup_type = 'MESSAGE';
	  c_no_data_found := ndf;

	  SELECT user_je_source_name INTO tmp_usr_je_sname
	  FROM gl_je_sources WHERE
	  je_source_name = 'Project Accounting' ;
	  cp_usr_je_sname := tmp_usr_je_sname ;


	SELECT period_set_name INTO tmp_period_set
	FROM   gl_sets_of_books
	/*R12 Changes : As the parameter P_SOB_ID is removed , the parameter
	p_ca_set_of_books_id is used here. */
	WHERE  set_of_books_id = p_ca_set_of_books_id ;


	IF p_from_period IS NOT NULL THEN
		SELECT start_date INTO tmp_gl_start
		FROM   gl_periods
		WHERE  period_set_name = tmp_period_set
		AND    period_name = p_from_period ;
	END IF;
	cp_gl_start := tmp_gl_start ;

	IF p_to_period IS NOT NULL THEN
		SELECT end_date INTO tmp_gl_end
		FROM   gl_periods
		WHERE  period_set_name = tmp_period_set
		AND    period_name = p_to_period ;
	END IF;
	cp_gl_end := tmp_gl_end ;


	/* srw.user_exit('FND FLEXSQL CODE="GL#" NUM=":P_COA_ID"
			APPL_SHORT_NAME="SQLGL"
			OUTPUT=":C_WHERE" TABLEALIAS="CC"
			MODE="WHERE" DISPLAY="ALL"
			OPERATOR="BETWEEN"
			OPERAND1=":P_FROM_ACCOUNT"
			OPERAND2=":P_TO_ACCOUNT"');*/

	EXCEPTION
	  WHEN  NO_DATA_FOUND THEN
	   select meaning into ndf from pa_lookups where
	    lookup_code = 'NO_DATA_FOUND' and
	    lookup_type = 'MESSAGE';
	  c_no_data_found := ndf;
	   c_dummy_data := 1;
	  WHEN   OTHERS  THEN
	   /* RAISE SRW.PROGRAM_ABORT;*/null;
	END;  return (TRUE);
END;

END PA_PAXAUGLT_XMLP_PKG;


/
