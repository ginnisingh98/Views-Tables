--------------------------------------------------------
--  DDL for Package Body JA_JAINRG1_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINRG1_XMLP_PKG" AS
/* $Header: JAINRG1B.pls 120.1 2007/12/25 16:27:37 dwkrishn noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    FOLIOMONTH DATE;
    MAXENDDATE DATE;
    NL CONSTANT VARCHAR2(1) DEFAULT fnd_global.local_chr(10);
  BEGIN
    IF P_FISCAL_YEAR IS NOT NULL AND P_MONTH IS NOT NULL THEN
      FOLIOMONTH := TO_DATE('01-' || UPPER(P_MONTH) || TO_CHAR(P_FISCAL_YEAR
                                   ,'-YYYY')
                           ,'DD-MON-YYYY');
      IF TRUNC(FOLIOMONTH) < TRUNC(P_FISCAL_YEAR) THEN
        FOLIOMONTH := ADD_MONTHS(FOLIOMONTH
                                ,12);
      END IF;
      IF TRUNC(LAST_DAY(FOLIOMONTH)) < TRUNC(SYSDATE) THEN
        P_TRN_FROM_DATE := TO_DATE('01-' || TO_CHAR(FOLIOMONTH
                                          ,'MON-YYYY')
                                  ,'DD-MON-YYYY');
        P_TRN_TO_DATE := LAST_DAY(P_TRN_FROM_DATE);
        VALIDATION_FLAG := 'Y';
        IF PREV_PAGE = -1 THEN
          /*SRW.MESSAGE(999
                     ,'This Report is not run for the Previous Month')*/NULL;
          VALIDATION_FLAG := 'N';
        END IF;
      END IF;
    ELSE
      VALIDATION_FLAG := 'N';
    END IF;
    EXECUTE IMMEDIATE
      'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
    IF P_TRN_FROM_DATE IS NOT NULL AND P_TRN_TO_DATE IS NOT NULL THEN
      IF P_TRN_FROM_DATE = P_TRN_TO_DATE THEN
        P_QUERY_CONCAT := ' AND trunc(a.creation_date) = :p_trn_from_date ' || NL;
      ELSE
        P_QUERY_CONCAT := ' AND trunc(a.creation_date) between :p_trn_from_date and :p_trn_to_date' || NL;
      END IF;
    ELSIF P_TRN_FROM_DATE IS NOT NULL AND P_TRN_TO_DATE IS NULL THEN
      P_QUERY_CONCAT := ' AND trunc(a.creation_date) >= :p_trn_from_date ' || NL;
    ELSIF P_TRN_FROM_DATE IS NULL AND P_TRN_TO_DATE IS NOT NULL THEN
      P_QUERY_CONCAT := ' AND trunc(a.creation_date) <= :p_trn_to_date ' || NL;
      ELSIF P_TRN_FROM_DATE IS NULL AND P_TRN_TO_DATE IS  NULL THEN
	P_QUERY_CONCAT := 'AND 1=1 ';
    END IF;
    IF P_INVENTORY_ITEM_ID IS NOT NULL THEN
      P_QUERY_CONCAT := ' AND inventory_item_id = :p_inventory_item_id ' || NL;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION CF_OPEN_BALFORMULA RETURN NUMBER IS
  BEGIN
    IF (P_FIRST_REC = 'T') THEN
      P_FIRST_REC := 'F';
      RETURN (P_OPEN_BAL);
    ELSE
      RETURN (P_PREV_CLOSE_BAL);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_OPEN_BALFORMULA;
  FUNCTION CF_TOT_CR_BALFORMULA(TRANSACTION_TYPE IN VARCHAR2
                               ,CF_OPENBAL_PACKED IN NUMBER
                               ,MANUFACTURED_PACKED_QTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF TRANSACTION_TYPE not in ('I','IOI','IA','PI') THEN
      RETURN (NVL(CF_OPENBAL_PACKED
                ,0) + NVL(MANUFACTURED_PACKED_QTY
                ,0));
    ELSIF TRANSACTION_TYPE in ('I','IOI','IA','PI') THEN
      RETURN (NVL(CF_OPENBAL_PACKED
                ,0) + 0);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_TOT_CR_BALFORMULA;
  FUNCTION CF_PREV_BALFORMULA(CF_TOT_CR_BAL_PACKED IN NUMBER
                             ,CF_TOT_CR_BAL_LOOSE IN NUMBER
                             ,HOMEQTY IN NUMBER
                             ,EXPTQTY IN NUMBER
                             ,OTHERFACTQTY IN NUMBER
                             ,OTHERPURQTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    P_PREV_CLOSE_BAL := (NVL(CF_TOT_CR_BAL_PACKED
                           ,0) + NVL(CF_TOT_CR_BAL_LOOSE
                           ,0)) - (NVL(HOMEQTY
                           ,0) + NVL(EXPTQTY
                           ,0) + NVL(EXPTQTY
                           ,0) + NVL(OTHERFACTQTY
                           ,0) + NVL(OTHERPURQTY
                           ,0));
    RETURN (P_PREV_CLOSE_BAL);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_PREV_BALFORMULA;
  FUNCTION CF_1FORMULA(FIN_YEAR_1 IN NUMBER
                      ,INVENTORY_ITEM_ID_1 IN NUMBER
                      ,SLNO_1 IN NUMBER
                      ,QUERY_NO IN VARCHAR2
                      ,BALANCE_PACKED IN NUMBER) RETURN NUMBER IS
    CURSOR PACKED_CUR IS
      SELECT
        BALANCE_PACKED
      FROM
        JAI_CMN_RG_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND FIN_YEAR = FIN_YEAR_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND SLNO = SLNO_1 - 1;
    CURSOR C_PREV_YR_BAL(P_ORGN_ID IN NUMBER,P_LOC_ID IN NUMBER,P_FIN_YEAR IN NUMBER,P_ITEM_ID IN NUMBER) IS
      SELECT
        BALANCE_PACKED
      FROM
        JAI_CMN_RG_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGN_ID
        AND LOCATION_ID = P_LOC_ID
        AND FIN_YEAR = P_FIN_YEAR
        AND INVENTORY_ITEM_ID = P_ITEM_ID
        AND SLNO = (
        SELECT
          MAX(SLNO)
        FROM
          JAI_CMN_RG_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGN_ID
          AND LOCATION_ID = P_LOC_ID
          AND FIN_YEAR = P_FIN_YEAR
          AND INVENTORY_ITEM_ID = P_ITEM_ID );
    V_PACKED_QTY NUMBER := 0;
  BEGIN
    IF QUERY_NO = '2' THEN
      V_PACKED_QTY := BALANCE_PACKED;
    ELSE
      IF SLNO_1 = 1 THEN
        OPEN C_PREV_YR_BAL(P_ORGANIZATION_ID,P_LOCATION_ID,FIN_YEAR_1 - 1,INVENTORY_ITEM_ID_1);
        FETCH C_PREV_YR_BAL
         INTO V_PACKED_QTY;
        CLOSE C_PREV_YR_BAL;
      ELSE
        OPEN PACKED_CUR;
        FETCH PACKED_CUR
         INTO V_PACKED_QTY;
        CLOSE PACKED_CUR;
      END IF;
    END IF;
    RETURN (V_PACKED_QTY);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_1FORMULA;
  FUNCTION G_2GROUPFILTER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END G_2GROUPFILTER;
  FUNCTION CF_2FORMULA(MANUFACTURED_QTY IN NUMBER
                      ,HOMEQTY IN NUMBER
                      ,EXPTQTY2 IN NUMBER
                      ,EXPTQTY IN NUMBER
                      ,OTHERFACTQTY IN NUMBER
                      ,OTHERPURQTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(MANUFACTURED_QTY
              ,0) - (NVL(HOMEQTY
              ,0) + NVL(EXPTQTY2
              ,0) + NVL(EXPTQTY
              ,0) + NVL(OTHERFACTQTY
              ,0) + NVL(OTHERPURQTY
              ,0)));
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_2FORMULA;
  FUNCTION CF_OPENSECONDFORMULA(CS_CALC IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_CALC);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_OPENSECONDFORMULA;
  FUNCTION CF_1FORMULA0109(INVENTORY_ITEM_ID IN NUMBER
                          ,SLNO IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN (TO_CHAR(INVENTORY_ITEM_ID) || '/' || TO_CHAR(SLNO));
  END CF_1FORMULA0109;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    V_MONTH VARCHAR2(3);
    V_FINAL_FOLIO NUMBER;
  BEGIN
    V_MONTH := TO_CHAR(P_TRN_FROM_DATE
                      ,'MON');
    V_FINAL_FOLIO := PREV_PAGE + LAST_PAGE;
    IF VALIDATION_FLAG = 'Y' THEN
      NULL;
    END IF;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION CF_OPENBAL_PACKEDFORMULA(FIN_YEAR_1 IN NUMBER
                                   ,INVENTORY_ITEM_ID_1 IN NUMBER
                                   ,SLNO_1 IN NUMBER
                                   ,QUERY_NO IN VARCHAR2
                                   ,BALANCE_LOOSE IN NUMBER) RETURN NUMBER IS
    CURSOR PACKED_CUR IS
      SELECT
        BALANCE_LOOSE
      FROM
        JAI_CMN_RG_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND FIN_YEAR = FIN_YEAR_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND SLNO = SLNO_1 - 1;
    CURSOR C_PREV_YR_BAL(P_ORGN_ID IN NUMBER,P_LOC_ID IN NUMBER,P_FIN_YEAR IN NUMBER,P_ITEM_ID IN NUMBER) IS
      SELECT
        BALANCE_LOOSE
      FROM
        JAI_CMN_RG_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGN_ID
        AND LOCATION_ID = P_LOC_ID
        AND FIN_YEAR = P_FIN_YEAR
        AND INVENTORY_ITEM_ID = P_ITEM_ID
        AND SLNO = (
        SELECT
          MAX(SLNO)
        FROM
          JAI_CMN_RG_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGN_ID
          AND LOCATION_ID = P_LOC_ID
          AND FIN_YEAR = P_FIN_YEAR
          AND INVENTORY_ITEM_ID = P_ITEM_ID );
    V_LOOSE_QTY NUMBER := 0;
  BEGIN
    IF QUERY_NO = '2' THEN
      V_LOOSE_QTY := BALANCE_LOOSE;
    ELSE
      IF SLNO_1 = 1 THEN
        OPEN C_PREV_YR_BAL(P_ORGANIZATION_ID,P_LOCATION_ID,FIN_YEAR_1 - 1,INVENTORY_ITEM_ID_1);
        FETCH C_PREV_YR_BAL
         INTO V_LOOSE_QTY;
        CLOSE C_PREV_YR_BAL;
      ELSE
        OPEN PACKED_CUR;
        FETCH PACKED_CUR
         INTO V_LOOSE_QTY;
        CLOSE PACKED_CUR;
      END IF;
    END IF;
    RETURN (V_LOOSE_QTY);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_OPENBAL_PACKEDFORMULA;
  FUNCTION CF_1FORMULA0035(TRANSACTION_TYPE IN VARCHAR2
                          ,CF_OPENBAL_LOOSE IN NUMBER
                          ,MANUFACTURED_LOOSE_QTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF TRANSACTION_TYPE not in ('I','IOI','IA','PI') THEN
      RETURN (NVL(CF_OPENBAL_LOOSE
                ,0) + NVL(MANUFACTURED_LOOSE_QTY
                ,0));
    ELSIF TRANSACTION_TYPE in ('I','IOI','IA','PI') THEN
      RETURN (NVL(CF_OPENBAL_LOOSE
                ,0) + 0);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_1FORMULA0035;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    V_SID V$SESSION.SID%TYPE;
    V_SERIAL V$SESSION.SERIAL#%TYPE;
    V_SPID V$PROCESS.SPID%TYPE;
    V_NAME1 V$DATABASE.NAME%TYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 24/04/2007')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO V_SID,V_SERIAL,V_SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO V_NAME1;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(1275
                   ,'TraceFile Name = ' || LOWER(V_NAME1) || '_ora_' || V_SPID || '.trc')*/NULL;
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION P_SHOW_ALL_ITEMSVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    IF P_SHOW_ALL_ITEMS IS NULL THEN
      P_SHOW_ALL_ITEMS := 'N';
    END IF;
    RETURN (TRUE);
  END P_SHOW_ALL_ITEMSVALIDTRIGGER;
  FUNCTION CF_REMARKSFORMULA(REGISTER_ID_PART_II IN NUMBER
                            ,PAYMENT_REGISTER IN VARCHAR2
                            ,REMARKS IN VARCHAR2) RETURN CHAR IS
    V_REGISTER_KEY VARCHAR2(50);
    V_TEMP NUMBER;
    CURSOR C_RG23_SLNO(P_REGISTER_ID IN NUMBER) IS
      SELECT
        SLNO
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE REGISTER_ID = P_REGISTER_ID;
    CURSOR C_PLA_SLNO(P_REGISTER_ID IN NUMBER) IS
      SELECT
        SLNO
      FROM
        JAI_CMN_RG_PLA_TRXS
      WHERE REGISTER_ID = P_REGISTER_ID;
  BEGIN
    IF REGISTER_ID_PART_II IS NOT NULL AND PAYMENT_REGISTER IS NOT NULL THEN
      IF PAYMENT_REGISTER in ('RG23A','RG23C') THEN
        OPEN C_RG23_SLNO(REGISTER_ID_PART_II);
        FETCH C_RG23_SLNO
         INTO V_TEMP;
        CLOSE C_RG23_SLNO;
        V_REGISTER_KEY := PAYMENT_REGISTER || ':' || V_TEMP;
      ELSIF PAYMENT_REGISTER = 'PLA' THEN
        OPEN C_PLA_SLNO(REGISTER_ID_PART_II);
        FETCH C_PLA_SLNO
         INTO V_TEMP;
        CLOSE C_PLA_SLNO;
        V_REGISTER_KEY := PAYMENT_REGISTER || ':' || V_TEMP;
      END IF;
    END IF;
    IF V_REGISTER_KEY IS NULL THEN
      V_REGISTER_KEY := '-';
    END IF;
    RETURN (V_REGISTER_KEY || '/' || NVL(REMARKS
              ,'-'));
  END CF_REMARKSFORMULA;
  FUNCTION CF_CESS_AMTFORMULA(PAYMENT_REGISTER IN VARCHAR2
                             ,REGISTER_ID_PART_II IN NUMBER
                             ,REF_DOC_NO IN VARCHAR2
                             ,SOURCE IN VARCHAR2
                             ,CESS_AMT IN NUMBER
                             ,TRANSACTION_TYPE IN VARCHAR2) RETURN NUMBER IS
    LN_CESS_AMT NUMBER;
    LV_RG23A VARCHAR2(10);
    LV_RG23C VARCHAR2(10);
    LV_PLA VARCHAR2(10);
    CURSOR CUR_GET_CESS_AMT IS
      SELECT
        DECODE(SUM(CREDIT)
              ,NULL
              ,SUM(DEBIT)
              ,SUM(CREDIT)) CESS_AMT
      FROM
        JAI_CMN_RG_OTHERS RGOTH
      WHERE RGOTH.SOURCE_TYPE = DECODE(PAYMENT_REGISTER
            ,LV_RG23A
            ,1
            ,LV_RG23C
            ,1
            ,LV_PLA
            ,2)
        AND RGOTH.SOURCE_REGISTER_ID = REGISTER_ID_PART_II
        AND RGOTH.TAX_TYPE IN ( 'EXCISE_EDUCATION_CESS' , 'CVD_EDUCATION_CESS' );
    CURSOR C_SHIPMENT_CESS_AMT IS
      SELECT
        JSPTL.TAX_RATE CESS_RATE
      FROM
        JAI_OM_WSH_LINES_ALL JSPL,
        JAI_OM_WSH_LINE_TAXES JSPTL,
        JAI_CMN_TAXES_ALL JTC
      WHERE JSPL.DELIVERY_DETAIL_ID = JSPTL.DELIVERY_DETAIL_ID
        AND JSPTL.TAX_ID = JTC.TAX_ID
        AND UPPER(JTC.TAX_TYPE) IN ( 'EXCISE_EDUCATION_CESS' , 'CVD_EDUCATION_CESS' )
        AND JSPL.DELIVERY_DETAIL_ID = REF_DOC_NO;
    CURSOR C_TRX_CESS_AMT IS
      SELECT
        JRCTTL.TAX_RATE CESS_RATE
      FROM
        JAI_AR_TRX_LINES JRCTL,
        JAI_AR_TRX_TAX_LINES JRCTTL,
        JAI_CMN_TAXES_ALL JTC
      WHERE JRCTL.CUSTOMER_TRX_LINE_ID = JRCTTL.LINK_TO_CUST_TRX_LINE_ID
        AND JRCTTL.TAX_ID = JTC.TAX_ID
        AND UPPER(JTC.TAX_TYPE) IN ( 'EXCISE_EDUCATION_CESS' , 'CVD_EDUCATION_CESS' )
        AND JRCTL.CUSTOMER_TRX_ID = REF_DOC_NO;
  BEGIN
    LV_RG23A := 'RG23A';
    LV_RG23C := 'RG23C';
    LV_PLA := 'PLA';
    IF SOURCE in ('WSH','AR') THEN
      IF SOURCE = 'AR' THEN
        OPEN C_TRX_CESS_AMT;
        FETCH C_TRX_CESS_AMT
         INTO CP_CESS_RATE;
        CLOSE C_TRX_CESS_AMT;
      ELSIF SOURCE = 'WSH' THEN
        OPEN C_SHIPMENT_CESS_AMT;
        FETCH C_SHIPMENT_CESS_AMT
         INTO CP_CESS_RATE;
        CLOSE C_SHIPMENT_CESS_AMT;
      END IF;
      LN_CESS_AMT := CESS_AMT;
      /*SRW.MESSAGE(1275
                 ,'source-> ' || SOURCE || ', cess_amt-> ' || CESS_AMT)*/NULL;
    ELSE
      OPEN CUR_GET_CESS_AMT;
      FETCH CUR_GET_CESS_AMT
       INTO LN_CESS_AMT;
      CLOSE CUR_GET_CESS_AMT;
      /*SRW.MESSAGE(1275
                 ,'REGISTER_ID_PART_II:' || REGISTER_ID_PART_II || 'LN_CESS_AMT:' || NVL(LN_CESS_AMT
                    ,0))*/NULL;
    END IF;
    IF TRANSACTION_TYPE = 'CR' THEN
      RETURN (-NVL(LN_CESS_AMT
                ,0));
    ELSE
      RETURN (NVL(LN_CESS_AMT
                ,0));
    END IF;
  END CF_CESS_AMTFORMULA;
  FUNCTION CF_SH_CESS_AMTFORMULA(PAYMENT_REGISTER IN VARCHAR2
                                ,REGISTER_ID_PART_II IN NUMBER
                                ,REGISTER_ID_1 IN NUMBER
                                ,REF_DOC_NO IN VARCHAR2
                                ,SOURCE IN VARCHAR2
                                ,SH_CESS_AMT IN NUMBER
                                ,TRANSACTION_TYPE IN VARCHAR2) RETURN NUMBER IS
    LN_CESS_AMT NUMBER;
    CURSOR CUR_GET_CESS_AMT IS
      SELECT
        DECODE(SUM(CREDIT)
              ,NULL
              ,SUM(DEBIT)
              ,SUM(CREDIT)) CESS_AMT
      FROM
        JAI_CMN_RG_OTHERS RGOTH
      WHERE RGOTH.SOURCE_TYPE = DECODE(PAYMENT_REGISTER
            ,'RG23A'
            ,1
            ,'RG23C'
            ,1
            ,'PLA'
            ,2)
        AND RGOTH.SOURCE_REGISTER_ID = REGISTER_ID_PART_II
        AND RGOTH.TAX_TYPE IN ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' );
    CURSOR C_ISSUE_TYPE IS
      SELECT
        ISSUE_TYPE
      FROM
        JAI_CMN_RG_I_TRXS
      WHERE REGISTER_ID = REGISTER_ID_1;
    LV_ISSUE_TYPE JAI_CMN_RG_I_TRXS.ISSUE_TYPE%TYPE;
    CURSOR C_SHIPMENT_CESS_AMT IS
      SELECT
        JSPTL.TAX_RATE CESS_RATE
      FROM
        JAI_OM_WSH_LINES_ALL JSPL,
        JAI_OM_WSH_LINE_TAXES JSPTL,
        JAI_CMN_TAXES_ALL JTC
      WHERE JSPL.DELIVERY_DETAIL_ID = JSPTL.DELIVERY_DETAIL_ID
        AND JSPTL.TAX_ID = JTC.TAX_ID
        AND UPPER(JTC.TAX_TYPE) IN ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' )
        AND JSPL.DELIVERY_DETAIL_ID = REF_DOC_NO;
    CURSOR C_TRX_CESS_AMT IS
      SELECT
        JRCTTL.TAX_RATE CESS_RATE
      FROM
        JAI_AR_TRX_LINES JRCTL,
        JAI_AR_TRX_TAX_LINES JRCTTL,
        JAI_CMN_TAXES_ALL JTC
      WHERE JRCTL.CUSTOMER_TRX_LINE_ID = JRCTTL.LINK_TO_CUST_TRX_LINE_ID
        AND JRCTTL.TAX_ID = JTC.TAX_ID
        AND UPPER(JTC.TAX_TYPE) IN ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' )
        AND JRCTL.CUSTOMER_TRX_ID = REF_DOC_NO;
  BEGIN
    IF SOURCE in ('WSH','AR') THEN
      OPEN C_ISSUE_TYPE;
      FETCH C_ISSUE_TYPE
       INTO LV_ISSUE_TYPE;
      CLOSE C_ISSUE_TYPE;
      IF NVL(LV_ISSUE_TYPE
         ,'$$$') = 'ENE' THEN
        LN_CESS_AMT := NULL;
      ELSE
        LN_CESS_AMT := SH_CESS_AMT;
      END IF;
      IF SOURCE = 'AR' THEN
        OPEN C_TRX_CESS_AMT;
        FETCH C_TRX_CESS_AMT
         INTO CP_SH_CESS_RATE;
        CLOSE C_TRX_CESS_AMT;
      ELSIF SOURCE = 'WSH' THEN
        OPEN C_SHIPMENT_CESS_AMT;
        FETCH C_SHIPMENT_CESS_AMT
         INTO CP_SH_CESS_RATE;
        CLOSE C_SHIPMENT_CESS_AMT;
      END IF;
      /*SRW.MESSAGE(1275
                 ,'source-> ' || SOURCE || ', cess_amt-> ' || SH_CESS_AMT || ' cess rate ' || CP_SH_CESS_RATE)*/NULL;
    ELSE
      OPEN CUR_GET_CESS_AMT;
      FETCH CUR_GET_CESS_AMT
       INTO LN_CESS_AMT;
      CLOSE CUR_GET_CESS_AMT;
      /*SRW.MESSAGE(1275
                 ,'REGISTER_ID_PART_II:' || REGISTER_ID_PART_II || 'LN_CESS_AMT:' || NVL(LN_CESS_AMT
                    ,0))*/NULL;
    END IF;
    IF TRANSACTION_TYPE = 'CR' THEN
      RETURN (-NVL(LN_CESS_AMT
                ,0));
    ELSE
      RETURN (NVL(LN_CESS_AMT
                ,0));
    END IF;
  END CF_SH_CESS_AMTFORMULA;
  FUNCTION CF_EAMOUNTFORMULA(TRANSACTION_TYPE IN VARCHAR2
                            ,EAMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF TRANSACTION_TYPE = 'CR' THEN
      RETURN (-EAMOUNT);
    ELSE
      RETURN EAMOUNT;
    END IF;
  END CF_EAMOUNTFORMULA;
  FUNCTION CP_CESS_RATE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_RATE;
  END CP_CESS_RATE_P;
  FUNCTION CP_SH_CESS_RATE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SH_CESS_RATE;
  END CP_SH_CESS_RATE_P;
  FUNCTION CP_1_P RETURN NUMBER IS
  BEGIN
    RETURN CP_1;
  END CP_1_P;
END JA_JAINRG1_XMLP_PKG;



/
