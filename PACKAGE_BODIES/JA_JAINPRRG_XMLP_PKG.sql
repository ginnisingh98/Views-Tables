--------------------------------------------------------
--  DDL for Package Body JA_JAINPRRG_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINPRRG_XMLP_PKG" AS
/* $Header: JAINPRRGB.pls 120.1 2007/12/25 16:25:53 dwkrishn noship $ */
  FUNCTION CF_PO_NUM_N_RELEASEFORMULA(PO_NUMBER IN VARCHAR2
                                     ,PO_RELEASE_NUM IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN PO_NUMBER || '(' || PO_RELEASE_NUM || ')';
  END CF_PO_NUM_N_RELEASEFORMULA;

  FUNCTION CF_TOTAL_AMOUNTFORMULA(CS_LINE_AMOUNT IN NUMBER
                                 ,CS_EXCISE IN NUMBER
                                 ,CS_CVD IN NUMBER
                                 ,CS_ADDCVD IN NUMBER
                                 ,CS_CUSTOMS IN NUMBER
                                 ,CS_CST IN NUMBER
                                 ,CS_LST IN NUMBER
                                 ,CS_FREIGHT IN NUMBER
                                 ,CS_OCTROI IN NUMBER
                                 ,CS_OTHERS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_LINE_AMOUNT + CS_EXCISE + CS_CVD + CS_ADDCVD + CS_CUSTOMS + CS_CST + CS_LST + CS_FREIGHT + CS_OCTROI + CS_OTHERS);
  END CF_TOTAL_AMOUNTFORMULA;

  PROCEDURE P_ORG_ADDR1VALIDTRIGGER IS
    V_LOCATION_ID NUMBER;
    V_SET_OF_BOOKS_ID NUMBER;
    CURSOR C_ORG_ADDR1(P_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NAME,
        LOCATION_ID
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    CURSOR C_ADDRESS(P_LOCATION_ID IN NUMBER) IS
      SELECT
        ADDRESS_LINE_1 || ',' || ADDRESS_LINE_2 || ',' || ADDRESS_LINE_3 || ',' || TOWN_OR_CITY || ',' || COUNTRY || ',' || POSTAL_CODE || ',' || TELEPHONE_NUMBER_1 || ',' || TELEPHONE_NUMBER_2 || ',' || TELEPHONE_NUMBER_3
      FROM
        HR_LOCATIONS
      WHERE LOCATION_ID = P_LOCATION_ID;
    CURSOR C_SOB_ID(P_ORG_ID IN NUMBER) IS
      SELECT
        TO_NUMBER(SET_OF_BOOKS_ID)
      FROM
        HR_OPERATING_UNITS
      WHERE ORGANIZATION_ID = P_ORG_ID;
    CURSOR C_SOB_NAME(P_SOB_ID IN NUMBER) IS
      SELECT
        NAME
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = P_SOB_ID;
  BEGIN
    OPEN C_ORG_ADDR1(P_ORG_ID);
    FETCH C_ORG_ADDR1
     INTO P_ORG_NAME,V_LOCATION_ID;
    CLOSE C_ORG_ADDR1;
    OPEN C_ADDRESS(V_LOCATION_ID);
    FETCH C_ADDRESS
     INTO P_ORG_ADDR;
    CLOSE C_ADDRESS;
    OPEN C_SOB_ID(P_ORG_ID);
    FETCH C_SOB_ID
     INTO V_SET_OF_BOOKS_ID;
    CLOSE C_SOB_ID;
    OPEN C_SOB_NAME(V_SET_OF_BOOKS_ID);
    FETCH C_SOB_NAME
     INTO P_SOB_NAME;
    CLOSE C_SOB_NAME;

  END P_ORG_ADDR1VALIDTRIGGER;

  FUNCTION CF_VENDOR_NAMEFORMULA(VENDOR_ID IN NUMBER) RETURN CHAR IS
    V_VENDOR_NAME PO_VENDORS.VENDOR_NAME%TYPE;
    CURSOR C_VENDOR_NAME(P_VENDOR_ID IN NUMBER) IS
      SELECT
        VENDOR_NAME
      FROM
        PO_VENDORS
      WHERE VENDOR_ID = P_VENDOR_ID;
  BEGIN
    OPEN C_VENDOR_NAME(VENDOR_ID);
    FETCH C_VENDOR_NAME
     INTO V_VENDOR_NAME;
    CLOSE C_VENDOR_NAME;
    RETURN V_VENDOR_NAME;
  END CF_VENDOR_NAMEFORMULA;

  FUNCTION CF_VENDOR_SITE_CODEFORMULA(VENDOR_SITE_ID IN NUMBER) RETURN CHAR IS
    V_VENDOR_SITE_CODE PO_VENDOR_SITES_ALL.VENDOR_SITE_CODE%TYPE;
    CURSOR C_VENDOR_SITE_CODE(P_VENDOR_SITE_ID IN NUMBER) IS
      SELECT
        VENDOR_SITE_CODE
      FROM
        PO_VENDOR_SITES_ALL
      WHERE VENDOR_SITE_ID = P_VENDOR_SITE_ID;
  BEGIN
    OPEN C_VENDOR_SITE_CODE(VENDOR_SITE_ID);
    FETCH C_VENDOR_SITE_CODE
     INTO V_VENDOR_SITE_CODE;
    CLOSE C_VENDOR_SITE_CODE;
    RETURN V_VENDOR_SITE_CODE;
  END CF_VENDOR_SITE_CODEFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    V_ERROR_MESSAGE VARCHAR2(500);
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    AUDSID NUMBER := USERENV('SESSIONID');
    SID NUMBER;
    SERIAL NUMBER;
    SPID VARCHAR2(9);
    NAME1 VARCHAR2(25);
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.3 Last modified date is 22/11/2006')*/NULL;
    OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
    FETCH C_PROGRAM_ID
     INTO V_PROGRAM_ID,V_ENABLE_TRACE;
    CLOSE C_PROGRAM_ID;
    /*SRW.MESSAGE(1274
               ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
    IF V_ENABLE_TRACE = 'Y' THEN
      OPEN GET_AUDSID;
      FETCH GET_AUDSID
       INTO SID,SERIAL,SPID;
      CLOSE GET_AUDSID;
      OPEN GET_DBNAME;
      FETCH GET_DBNAME
       INTO NAME1;
      CLOSE GET_DBNAME;
      /*SRW.MESSAGE(1274
                 ,'TraceFile Name = ' || LOWER(NAME1) || '_ora_' || SPID || '.trc')*/NULL;
      EXECUTE IMMEDIATE
        'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
    END IF;
    JAI_AP_RPT_PRRG_PKG.PROCESS_REPORT(P_FROM_DATE
                                      ,P_TO_DATE
                                      ,P_VENDOR_ID
                                      ,P_VENDOR_SITE_ID
                                      ,P_ORG_ID
                                      ,P_RUN_NO
                                      ,V_ERROR_MESSAGE);
    /*SRW.MESSAGE(1274
               ,'Runno:' || P_RUN_NO)*/NULL;
    IF V_ERROR_MESSAGE IS NOT NULL THEN
      /*SRW.MESSAGE(1274
                 ,'Error in jai_ap_rpt_prrg_pkg.process_report:' || V_ERROR_MESSAGE)*/NULL;
    END IF;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(1274
                 ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
      RETURN TRUE;
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    IF P_COMMIT_DATA = 'Y' THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION G_INVOICEGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    P_LINE_NO := P_LINE_NO + 1;
    CP_SERIAL := P_LINE_NO;
    RETURN (TRUE);
  END G_INVOICEGROUPFILTER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    lp_run_no:=p_run_no;
    P_ORG_ADDR1VALIDTRIGGER;
    LP_ORG_ADDR:=P_ORG_ADDR;
    LP_ORG_NAME:=P_ORG_NAME;
    LP_SOB_NAME:=P_SOB_NAME;
    LP_FROM_DATE:=to_char(P_FROM_DATE,'DD-MON-YYYY');
    LP_TO_DATE:=to_char(P_TO_DATE,'DD-MON-YYYY');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CP_SERIAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SERIAL;
  END CP_SERIAL_P;

END JA_JAINPRRG_XMLP_PKG;



/
