--------------------------------------------------------
--  DDL for Package Body INV_INVRCWSR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVRCWSR_XMLP_PKG" AS
/* $Header: INVRCWSRB.pls 120.1 2007/12/25 10:48:52 dwkrishn noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    SELECT
      ORGANIZATION_CODE,
      ORGANIZATION_NAME
    INTO P_ORG_CODE,P_ORG_NAME
    FROM
      ORG_ORGANIZATION_DEFINITIONS
    WHERE ORGANIZATION_ID = P_ORG_ID;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Init')*/NULL;
    END;
    DECLARE
      L_REPORT_NAME VARCHAR2(240);
    BEGIN
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME,
        TO_CHAR(CR.REQUEST_DATE
               ,'DD-MON-YYYY HH24:MI'),
        TO_CHAR(CR.ACTUAL_START_DATE
               ,'DD-MON-YYYY HH24:MI'),
        CR.PRINTER
      INTO L_REPORT_NAME,P_REQUEST_DATE,P_ACTUAL_START_DATE,P_PRINTER
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
	l_report_name := substr(l_report_name,1,instr(l_report_name,' (XML)'));
      P_REPORT_NAME := L_REPORT_NAME;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_REPORT_NAME := 'PAR Replenishment Count Worksheet';
        P_REQUEST_DATE := '***';
        P_ACTUAL_START_DATE := '***';
        P_PRINTER := '***';
    END;
    BEGIN
      SELECT
        APPLICATION_NAME
      INTO P_APPLICATION_NAME
      FROM
        FND_CONCURRENT_REQUESTS FCR,
        FND_APPLICATION_VL FAV
      WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
        AND FAV.APPLICATION_ID = FCR.PROGRAM_APPLICATION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_APPLICATION_NAME := '***';
    END;
    BEGIN
      SELECT
        RESPONSIBILITY_NAME
      INTO P_RESPONSIBILITY_NAME
      FROM
        FND_CONCURRENT_REQUESTS FCR,
        FND_RESPONSIBILITY_VL FRV
      WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
        AND FRV.RESPONSIBILITY_ID = FCR.RESPONSIBILITY_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_RESPONSIBILITY_NAME := '***';
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Item Flex')*/NULL;
    END;
    SELECT
      CHART_OF_ACCOUNTS_ID
    INTO P_EXPENSEACCOUNT_FLEXNUM
    FROM
      ORG_ORGANIZATION_DEFINITIONS
    WHERE ORGANIZATION_ID = P_ORG_ID;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Expense Account Flex')*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_LOCATORFORMULA(LOCATOR_ID IN NUMBER
                            ,ORGANIZATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN (INV_PROJECT.GET_LOCSEGS(LOCATOR_ID
                                  ,ORGANIZATION_ID));
  END CF_LOCATORFORMULA;

  FUNCTION CF_PAR_LEVELFORMULA(LOCATOR_ID IN NUMBER
                              ,ITEM_ID IN NUMBER) RETURN NUMBER IS
    L_PAR_LEVEL NUMBER;
  BEGIN
    SELECT
      MAXIMUM_QUANTITY
    INTO L_PAR_LEVEL
    FROM
      MTL_SECONDARY_LOCATORS MSL
    WHERE MSL.ORGANIZATION_ID = P_ORG_ID
      AND MSL.SECONDARY_LOCATOR = LOCATOR_ID
      AND MSL.INVENTORY_ITEM_ID = ITEM_ID;
    P_ITEM_LOCATOR_FOUND := 1;
    RETURN (L_PAR_LEVEL);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_ITEM_LOCATOR_FOUND := 2;
      RETURN (NULL);
  END CF_PAR_LEVELFORMULA;

  FUNCTION CF_ERRORFORMULA(ERROR_CODE IN NUMBER
                          ,PROCESS_STATUS_CODE IN NUMBER
                          ,PLANNING_LEVEL IN NUMBER
                          ,QUANTITY_TRACKED IN NUMBER
                          ,COUNT_TYPE_CODE IN NUMBER
                          ,LOCATOR_ID IN NUMBER
                          ,CF_PAR_LEVEL IN NUMBER) RETURN CHAR IS
    L_MEANING VARCHAR2(80);
    L_ERROR_NUMBER NUMBER := NULL;
  BEGIN
    IF ERROR_CODE IS NOT NULL THEN
      L_ERROR_NUMBER := ERROR_CODE;
    ELSIF PROCESS_STATUS_CODE in (1,2,4) THEN
      IF PLANNING_LEVEL = 2 THEN
        L_ERROR_NUMBER := 19;
      ELSIF (QUANTITY_TRACKED = 1 AND COUNT_TYPE_CODE = 1) THEN
        L_ERROR_NUMBER := 13;
      ELSIF LOCATOR_ID IS NULL THEN
        L_ERROR_NUMBER := 19;
      ELSIF COUNT_TYPE_CODE = 3 THEN
        L_ERROR_NUMBER := 12;
      ELSIF P_ITEM_LOCATOR_FOUND = 2 THEN
        L_ERROR_NUMBER := 18;
      ELSIF (COUNT_TYPE_CODE in (1,4) AND CF_PAR_LEVEL IS NULL) THEN
        L_ERROR_NUMBER := 23;
      END IF;
    END IF;
    IF L_ERROR_NUMBER IS NOT NULL THEN
      SELECT
        MFG.MEANING
      INTO L_MEANING
      FROM
        MFG_LOOKUPS MFG
      WHERE MFG.LOOKUP_TYPE = 'MTL_REPLENISHMENT_ERROR'
        AND MFG.LOOKUP_CODE = L_ERROR_NUMBER;
    END IF;
    RETURN (L_MEANING);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('***');
  END CF_ERRORFORMULA;

  FUNCTION CF_PROCESS_STATUSFORMULA(PROCESS_STATUS_CODE IN NUMBER) RETURN CHAR IS
  BEGIN
    IF PROCESS_STATUS_CODE IS NULL OR PROCESS_STATUS_CODE not in (1,2,3,4,5) THEN
      RETURN ('***');
    ELSIF PROCESS_STATUS_CODE = 1 THEN
      RETURN (P_STATUS_HOLD);
    ELSIF PROCESS_STATUS_CODE = 2 THEN
      RETURN (P_STATUS_PENDING);
    ELSIF PROCESS_STATUS_CODE = 3 THEN
      RETURN (P_STATUS_PROCESSING);
    ELSIF PROCESS_STATUS_CODE = 4 THEN
      RETURN (P_STATUS_ERROR);
    ELSIF PROCESS_STATUS_CODE = 5 THEN
      RETURN (P_STATUS_COMPLETED);
    END IF;
  END CF_PROCESS_STATUSFORMULA;

  FUNCTION CF_SOURCE_TYPEFORMULA(SOURCE_TYPE_CODE IN NUMBER) RETURN CHAR IS
  BEGIN
    IF SOURCE_TYPE_CODE IS NULL OR SOURCE_TYPE_CODE not in (1,2,3) THEN
      RETURN ('');
    ELSIF SOURCE_TYPE_CODE = 1 THEN
      RETURN (P_SOURCE_TYPE_INV);
    ELSIF SOURCE_TYPE_CODE = 2 THEN
      RETURN (P_SOURCE_TYPE_SUPPLIER);
    ELSIF SOURCE_TYPE_CODE = 3 THEN
      RETURN (P_SOURCE_TYPE_SUB);
    END IF;
  END CF_SOURCE_TYPEFORMULA;

  FUNCTION CF_COUNT_TYPEFORMULA(COUNT_TYPE_CODE IN NUMBER) RETURN CHAR IS
  BEGIN
    IF COUNT_TYPE_CODE IS NULL OR COUNT_TYPE_CODE not in (1,2,4) THEN
      RETURN ('***');
    ELSIF COUNT_TYPE_CODE = 1 THEN
      RETURN (P_COUNT_TYPE_ONHAND);
    ELSIF COUNT_TYPE_CODE = 2 THEN
      RETURN (P_COUNT_TYPE_ORDER);
    ELSIF COUNT_TYPE_CODE = 4 THEN
      RETURN (P_COUNT_TYPE_PAR);
    END IF;
  END CF_COUNT_TYPEFORMULA;

  FUNCTION CF_SOURCE_ORG_CODEFORMULA(SOURCE_ORG_ID IN NUMBER) RETURN CHAR IS
    L_ORG_CODE VARCHAR2(3);
  BEGIN
    IF SOURCE_ORG_ID IS NULL THEN
      RETURN ('');
    ELSE
      SELECT
        ORGANIZATION_CODE
      INTO L_ORG_CODE
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = SOURCE_ORG_ID;
      RETURN (L_ORG_CODE);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('***');
  END CF_SOURCE_ORG_CODEFORMULA;

  FUNCTION IS_COUNT_PROCESSED(PROCESS_STATUS_CODE IN NUMBER) RETURN BOOLEAN IS
  BEGIN
    IF ((PROCESS_STATUS_CODE IS NOT NULL) AND (PROCESS_STATUS_CODE = 5)) THEN
      RETURN (TRUE);
    END IF;
    RETURN (FALSE);
  END IS_COUNT_PROCESSED;

  FUNCTION SETUP_ERROR(CF_ERROR IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF CF_ERROR IS NOT NULL THEN
      RETURN (TRUE);
    END IF;
    RETURN (FALSE);
  END SETUP_ERROR;

END INV_INVRCWSR_XMLP_PKG;


/
