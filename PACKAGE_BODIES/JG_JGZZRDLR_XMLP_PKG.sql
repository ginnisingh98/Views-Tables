--------------------------------------------------------
--  DDL for Package Body JG_JGZZRDLR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JG_JGZZRDLR_XMLP_PKG" AS
/* $Header: JGZZRDLRB.pls 120.0 2008/01/08 09:29:41 vjaganat noship $ */
  PROCEDURE FORMAT_CURRENCY(CURR_CODE IN  NUMBER
		   ,FLD_NAME IN  VARCHAR2
                   ,RAW_NUM IN VARCHAR2
                   ,CURRENCY_CODE  IN VARCHAR2) IS
	MIN_PRECISION   NUMBER;
        ROUND_AMOUNT    NUMBER;

BEGIN
	/*SRW.REFERENCE(:CURRENCY_CODE);*/

	SELECT NVL(PRECISION,2)
        INTO MIN_PRECISION
        FROM FND_CURRENCIES
        WHERE CURRENCY_CODE = CURR_CODE;

	 ROUND_AMOUNT := ROUND(RAW_NUM,MIN_PRECISION);



     /*SRW.USER_EXIT('FND FORMAT_CURRENCY
				CODE ="'||CURR_CODE||'"
				DISPLAY_WIDTH="18"
				AMOUNT="'||TO_CHAR(ROUND_AMOUNT)||'"
				DISPLAY=":'||FLD_NAME||'"
				');*/

END FORMAT_CURRENCY;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    DECLARE
      COAID NUMBER;
      SOBNAME VARCHAR2(30);
      FUNCTCURR VARCHAR2(15);
      ERRBUF VARCHAR2(132);
      ERRBUF2 VARCHAR2(132);
      DATE_FORMAT VARCHAR2(30);
    BEGIN
      P_SET_OF_BOOKS_ID := FND_PROFILE.VALUE('GL_SET_OF_BKS_ID');
      JG_GET_SET_OF_BOOKS_INFO(P_SET_OF_BOOKS_ID
                              ,COAID
                              ,SOBNAME
                              ,FUNCTCURR
                              ,ERRBUF);
      IF (ERRBUF IS NOT NULL) THEN
        SET_NAME('JE'
                ,'GL_PLL_ROUTINE_ERROR');
        ERRBUF2 := GET;
        /*SRW.MESSAGE('00'
                   ,ERRBUF2)*/NULL;
        /*SRW.MESSAGE('00'
                   ,ERRBUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
      C_CURRENCY_CODE := SUBSTR(FUNCTCURR
                               ,1
                               ,3);
      C_STRUCT_NUM := COAID;
      C_SET_OF_BOOKS_NAME := SUBSTR(SOBNAME
                                   ,1
                                   ,30);
      IF UPPER(P_INCL_RAR) = 'Y' THEN
        P_RISKVAR1 := 'rps.amount_due_original';
        P_RISKVAR2 := 'nvl(ara.amount_applied,0)';
        P_RISKVAR3 := 'nvl(rps.amount_due_remaining, 0) * -1';
      ELSE
        P_RISKVAR1 := '0';
        P_RISKVAR2 := '0';
        P_RISKVAR3 := '0';
      END IF;
      SELECT
        MEANING
      INTO C_RAR_YES_NO
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_INCL_RAR;
      P_DATE_TO := FND_DATE.CANONICAL_TO_DATE(P_AS_OF_DATE);
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE('110'
                   ,'As of date	  ' || P_AS_OF_DATE)*/NULL;
        /*SRW.MESSAGE('111'
                   ,'Date  converted 	' || P_AS_OF_DATE1)*/NULL;
      END IF;
      DATE_FORMAT := 'DD-MON-YY';
      P_AS_OF_DATE1 := TO_DATE(P_DATE_TO,DATE_FORMAT) ;
      IF TRUNC(P_DATE_TO) > SYSDATE THEN
        P_DATE_TO := SYSDATE;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_PRT_TOT_NET_FOREIGNFORMULA(C_TOT_NET_FOREIGN IN NUMBER
                                       ,CURRENCY_CODE IN VARCHAR2
                                       ,C_PRT_TOT_NET_FOREIGN IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_NET_FOREIGN)*/NULL;
   /* FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_NET_FOREIGN);
  END C_PRT_TOT_NET_FOREIGNFORMULA;

  FUNCTION C_PRT_TOT_NET_FOR_REMFORMULA(C_TOT_NET_FOR_REM IN NUMBER
                                       ,CURRENCY_CODE IN VARCHAR2
                                       ,C_PRT_TOT_NET_FOR_REM IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_NET_FOR_REM)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_NET_FOR_REM);
  END C_PRT_TOT_NET_FOR_REMFORMULA;

  FUNCTION C_PRT_TOT_O_FOREIGNFORMULA(C_TOT_O_FOREIGN IN NUMBER
                                     ,CURRENCY_CODE IN VARCHAR2
                                     ,C_PRT_TOT_O_FOREIGN IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_O_FOREIGN)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_O_FOREIGN);
  END C_PRT_TOT_O_FOREIGNFORMULA;

  FUNCTION C_PRT_TOT_R_FOREIGNFORMULA(C_TOT_R_FOREIGN IN NUMBER
                                     ,CURRENCY_CODE IN VARCHAR2
                                     ,C_PRT_TOT_R_FOREIGN IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_R_FOREIGN)*/NULL;
/*    FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_R_FOREIGN);
  END C_PRT_TOT_R_FOREIGNFORMULA;

  FUNCTION C_PRT_ORIG_FRGN_AMOUNTFORMULA(ORIGINAL_FRGN_AMOUNT IN NUMBER
                                        ,CURRENCY_CODE IN VARCHAR2
                                        ,C_PRT_ORIG_FRGN_AMOUNT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORIGINAL_FRGN_AMOUNT)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_ORIG_FRGN_AMOUNT);
  END C_PRT_ORIG_FRGN_AMOUNTFORMULA;

  FUNCTION C_PRT_ORIG_FUNC_AMOUNTFORMULA(ORIGINAL_FUNC_AMOUNT IN NUMBER
                                        ,C_PRT_ORIG_FUNC_AMOUNT IN VARCHAR2
                                        ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORIGINAL_FUNC_AMOUNT)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_ORIG_FUNC_AMOUNT);
  END C_PRT_ORIG_FUNC_AMOUNTFORMULA;

  FUNCTION C_PRT_FRGN_AMT_DUE_REMFORMULA(ORG_CUR_AMT_REM IN NUMBER
                                        ,CURRENCY_CODE IN VARCHAR2
                                        ,C_PRT_FRGN_AMT_DUE_REM IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORG_CUR_AMT_REM)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_FRGN_AMT_DUE_REM);
  END C_PRT_FRGN_AMT_DUE_REMFORMULA;

  FUNCTION C_PRT_FUNC_AMT_DUE_REMFORMULA(FUN_CUR_AMT_REM IN NUMBER
                                        ,C_PRT_FUNC_AMT_DUE_REM IN VARCHAR2
                                        ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FUN_CUR_AMT_REM)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_FUNC_AMT_DUE_REM);
  END C_PRT_FUNC_AMT_DUE_REMFORMULA;

  FUNCTION C_PRT_TOT_TAX_FUNCFORMULA(C_TOT_TAX_FUNC IN NUMBER
                                    ,C_PRT_TOT_TAX_FUNC IN VARCHAR2
                                    ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_TAX_FUNC)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_TAX_FUNC);
  END C_PRT_TOT_TAX_FUNCFORMULA;

  FUNCTION C_PRT_TOT_TAX_FUNC_REMFORMULA(C_TOT_TAX_FUNC_REM IN NUMBER
                                        ,C_PRT_TOT_TAX_FUNC_REM IN VARCHAR2
                                        ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_TAX_FUNC_REM)*/NULL;
  /*  FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_TAX_FUNC_REM);
  END C_PRT_TOT_TAX_FUNC_REMFORMULA;

  FUNCTION C_PRT_TOT_SITE_FUNCFORMULA(C_TOT_SITE_FUNC IN NUMBER
                                     ,C_PRT_TOT_SITE_FUNC IN VARCHAR2
                                     ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_SITE_FUNC)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_SITE_FUNC);
  END C_PRT_TOT_SITE_FUNCFORMULA;

  FUNCTION C_PRT_TOT_SITE_FUNC_REMFORMULA(C_TOT_SITE_FUNC_REM IN NUMBER
                                         ,C_PRT_TOT_SITE_FUNC_REM IN VARCHAR2
                                         ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_SITE_FUNC_REM)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_SITE_FUNC_REM);
  END C_PRT_TOT_SITE_FUNC_REMFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_PRT_TOT_CUR_FUNCFORMULA(C_TOT_CUR_FUNC IN NUMBER
                                    ,C_PRT_TOT_CUR_FUNC IN VARCHAR2
                                    ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_CUR_FUNC)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_CUR_FUNC);
  END C_PRT_TOT_CUR_FUNCFORMULA;

  FUNCTION C_PRT_TOT_CUR_FUNC_REMFORMULA(C_TOT_CUR_FUNC_REM IN NUMBER
                                        ,C_PRT_TOT_CUR_FUNC_REM IN VARCHAR2
                                        ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_CUR_FUNC_REM)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_CUR_FUNC_REM);
  END C_PRT_TOT_CUR_FUNC_REMFORMULA;

  FUNCTION C_OA_PRT_ORIG_FRGN_AMOUNTFORMU(ORIGINAL_FRGN_AMOUNT_OA IN NUMBER
                                         ,CURRENCY_CODE_OA IN VARCHAR2
                                         ,C_OA_PRT_ORIG_FRGN_AMOUNT IN VARCHAR2
                                         ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORIGINAL_FRGN_AMOUNT_OA)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_OA_PRT_ORIG_FRGN_AMOUNT);
  END C_OA_PRT_ORIG_FRGN_AMOUNTFORMU;

  FUNCTION C_OA_PRT_FRGN_AMT_DUE_REMFORMU(AMOUNT_FRGN_DUE_REM_OA IN NUMBER
                                         ,CURRENCY_CODE_OA IN VARCHAR2
                                         ,C_OA_PRT_FRGN_AMT_DUE_REM IN VARCHAR2
                                         ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(AMOUNT_FRGN_DUE_REM_OA)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_OA_PRT_FRGN_AMT_DUE_REM);
  END C_OA_PRT_FRGN_AMT_DUE_REMFORMU;

  FUNCTION C_OA_PRT_ORIG_FUNC_AMOUNTFORMU(ORIGINAL_FUNC_AMOUNT_OA IN NUMBER
                                         ,C_OA_PRT_ORIG_FUNC_AMOUNT IN VARCHAR2
                                         ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORIGINAL_FUNC_AMOUNT_OA)*/NULL;
    /*SRW.REFERENCE(C_CURRENCY_CODE)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                  ,CURRENCY_CODE);*/
    RETURN (C_OA_PRT_ORIG_FUNC_AMOUNT);
  END C_OA_PRT_ORIG_FUNC_AMOUNTFORMU;

  FUNCTION C_OA_PRT_FUNC_AMT_DUE_REMFORMU(AMOUNT_FUNC_DUE_REM_OA IN NUMBER
                                         ,C_OA_PRT_FUNC_AMT_DUE_REM IN VARCHAR2
                                         ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(AMOUNT_FUNC_DUE_REM_OA)*/NULL;
    /*SRW.REFERENCE(C_CURRENCY_CODE)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_OA_PRT_FUNC_AMT_DUE_REM);
  END C_OA_PRT_FUNC_AMT_DUE_REMFORMU;

  FUNCTION C_DISPLAY_TOTAL_ORIGINALFORMUL(C_OA_TOTAL_ORIGINAL IN NUMBER
                                         ,C_DISPLAY_TOTAL_ORIGINAL IN VARCHAR2
                                         ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(C_OA_TOTAL_ORIGINAL)*/NULL;
      /*FORMAT_CURRENCY(FLD_NAME
                     ,RAW_NUM
                     ,CURRENCY_CODE);*/
      RETURN (C_DISPLAY_TOTAL_ORIGINAL);
    END;
  END C_DISPLAY_TOTAL_ORIGINALFORMUL;

  FUNCTION C_DISPLAY_TOTAL_REMAINFORMULA(C_OA_TOTAL_REMAIN IN NUMBER
                                        ,C_DISPLAY_TOTAL_REMAIN IN VARCHAR2
                                        ,CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_OA_TOTAL_REMAIN)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_DISPLAY_TOTAL_REMAIN);
  END C_DISPLAY_TOTAL_REMAINFORMULA;

  FUNCTION CF_INVOICE_DATEFORMULA(INVOICE_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(INVOICE_DATE);
  END CF_INVOICE_DATEFORMULA;

  FUNCTION CF_DATE_TIMEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDT(SYSDATE);
  END CF_DATE_TIMEFORMULA;

  FUNCTION C_DUE_DATEFORMULA(DUE_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(DUE_DATE);
  END C_DUE_DATEFORMULA;

  FUNCTION C_PRT_TOT_NET_FUNCOFORMULA(C_TOT_NET_FUNCO IN NUMBER
                                     ,C_PRT_TOT_NET_FUNCO IN VARCHAR2
                                     ,CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_NET_FUNCO)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_NET_FUNCO);
  END C_PRT_TOT_NET_FUNCOFORMULA;

  FUNCTION C_PRT_TOT_NET_FUNCRFORMULA(C_TOT_NET_FUNCR IN NUMBER
                                     ,C_PRT_TOT_NET_FUNCR IN VARCHAR2
                                     ,CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_TOT_NET_FUNCR);
  END C_PRT_TOT_NET_FUNCRFORMULA;

  FUNCTION C_GRAND_TOTAL_ORIGFORMULA(C_TOT_NET_FUNCR IN NUMBER
                                    ,C_GRAND_ORIG1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(C_TOT_NET_FUNCR
              ,0) - (-1 * NVL(C_GRAND_ORIG1
              ,0)));
  END C_GRAND_TOTAL_ORIGFORMULA;

  FUNCTION C_PRT_GRAND_TOT_ORIGFORMULA(C_GRAND_TOTAL_ORIG IN NUMBER
                                      ,C_PRT_GRAND_TOT_ORIG IN VARCHAR2
                                      ,CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_GRAND_TOTAL_ORIG)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_GRAND_TOT_ORIG);
  END C_PRT_GRAND_TOT_ORIGFORMULA;

  FUNCTION C_PRT_GRAND_TOT_REMAINFORMULA(C_GRAND_TOT_REMAIN IN NUMBER
                                        ,C_PRT_GRAND_TOT_REMAIN IN VARCHAR2
                                        ,CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_GRAND_TOT_REMAIN)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (C_PRT_GRAND_TOT_REMAIN);
  END C_PRT_GRAND_TOT_REMAINFORMULA;

  FUNCTION C_GRAND_TOT_REMAINFORMULA(C_TOT_NET_FUNCO IN NUMBER
                                    ,C_GRAND_REMAIN1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(C_TOT_NET_FUNCO
              ,0) - (-1 * NVL(C_GRAND_REMAIN1
              ,0)));
  END C_GRAND_TOT_REMAINFORMULA;

  FUNCTION CF_TEXTFORMULA(PARAGRAPH_TEXT IN VARCHAR2
                         ,CF_AMOUNT IN VARCHAR2) RETURN VARCHAR IS
    L_BUFFER VARCHAR2(2000);
  BEGIN
    L_BUFFER := PARAGRAPH_TEXT;
    L_BUFFER := REPLACE(L_BUFFER
                       ,' F_TOTAL_BALANCE'
                       ,'(' || C_CURRENCY_CODE || ') ' || LTRIM(RTRIM(CF_AMOUNT)));
    L_BUFFER := REPLACE(L_BUFFER
                       ,' F_AS_OF_DATE'
                       ,TO_CHAR(P_DATE_TO
                              ,'DD-MON-YYYY'));
    RETURN (L_BUFFER);
  END CF_TEXTFORMULA;

  FUNCTION CF_DUNNING_NAMEFORMULA RETURN CHAR IS
    L_DUNNING_NAME VARCHAR2(100);
  BEGIN
    SELECT
      LETTER_NAME
    INTO L_DUNNING_NAME
    FROM
      AR_DUNNING_LETTERS
    WHERE DUNNING_LETTER_ID = P_DUNNING_LETTER_ID;
    RETURN (L_DUNNING_NAME);
  END CF_DUNNING_NAMEFORMULA;

  FUNCTION CF_AS_OF_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_AS_OF_DATE1);
  END CF_AS_OF_DATEFORMULA;

  FUNCTION CF_AMOUNTFORMULA(C_TOT_SITE_FUNC_REM IN NUMBER
                           ,CF_AMOUNT IN VARCHAR2
                           ,CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_TOT_SITE_FUNC_REM)*/NULL;
    /*FORMAT_CURRENCY(FLD_NAME
                   ,RAW_NUM
                   ,CURRENCY_CODE);*/
    RETURN (CF_AMOUNT);
  END CF_AMOUNTFORMULA;

  FUNCTION APPLIED_AMOUNTFORMULA(TRX_ID IN NUMBER) RETURN NUMBER IS
    L_AMOUNT NUMBER := 0;
  BEGIN
    BEGIN
      IF TRX_ID <> -1 THEN
        SELECT
          NVL(SUM(ARA.AMOUNT_APPLIED)
             ,0)
        INTO L_AMOUNT
        FROM
          AR_RECEIVABLE_APPLICATIONS ARA,
          AR_CASH_RECEIPTS RPT,
          AR_CASH_RECEIPT_HISTORY RTPH
        WHERE ARA.APPLIED_CUSTOMER_TRX_ID = TRX_ID
          AND ARA.CASH_RECEIPT_ID = RPT.CASH_RECEIPT_ID
          AND RPT.CASH_RECEIPT_ID = RTPH.CASH_RECEIPT_ID
          AND RTPH.CURRENT_RECORD_FLAG = 'Y'
          AND ( ( RTPH.TRX_DATE > '''' || P_AS_OF_DATE1 || ''''
          AND RTPH.STATUS = 'CLEARED' )
        OR RTPH.STATUS <> 'CLEARED'
        OR ( ARA.APPLY_DATE > '''' || P_AS_OF_DATE1 || ''''
          AND RTPH.STATUS = 'CLEARED' ) );
      END IF;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE('333'
                   ,'Applied Amount ' || L_AMOUNT)*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN L_AMOUNT;
  END APPLIED_AMOUNTFORMULA;

  FUNCTION ORG_CUR_AMT_REMFORMULA(AMOUNT_FRGN_DUE_REM IN NUMBER
                                 ,APPLIED_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (AMOUNT_FRGN_DUE_REM + APPLIED_AMOUNT);
  END ORG_CUR_AMT_REMFORMULA;

  FUNCTION FUN_CUR_AMT_REMFORMULA(EXCHANGE_RATE IN NUMBER
                                 ,ORG_CUR_AMT_REM IN NUMBER
                                 ,AMOUNT_FUNC_DUE_REM IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF EXCHANGE_RATE <> -1 THEN
      RETURN ORG_CUR_AMT_REM * EXCHANGE_RATE;
    ELSE
      RETURN AMOUNT_FUNC_DUE_REM;
    END IF;
  END FUN_CUR_AMT_REMFORMULA;

  FUNCTION ORG_CUR_AMOUNTFORMULA(ORG_CUR_AMT_REM IN NUMBER
                                ,ORIGINAL_FRGN_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF ORG_CUR_AMT_REM = 0 THEN
      RETURN 0;
    ELSE
      RETURN ORIGINAL_FRGN_AMOUNT;
    END IF;
  END ORG_CUR_AMOUNTFORMULA;

  FUNCTION FUN_CUR_AMOUNTFORMULA(ORG_CUR_AMT_REM IN NUMBER
                                ,ORIGINAL_FUNC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF ORG_CUR_AMT_REM = 0 THEN
      RETURN 0;
    ELSE
      RETURN ORIGINAL_FUNC_AMOUNT;
    END IF;
  END FUN_CUR_AMOUNTFORMULA;

  FUNCTION C_STRUCT_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_STRUCT_NUM;
  END C_STRUCT_NUM_P;

  FUNCTION C_SET_OF_BOOKS_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SET_OF_BOOKS_NAME;
  END C_SET_OF_BOOKS_NAME_P;

  FUNCTION C_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CURRENCY_CODE;
  END C_CURRENCY_CODE_P;

  FUNCTION C_RAR_YES_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RAR_YES_NO;
  END C_RAR_YES_NO_P;

  PROCEDURE JG_GET_SET_OF_BOOKS_INFO(SOBID IN NUMBER
                                    ,COAID OUT NOCOPY NUMBER
                                    ,SOBNAME OUT NOCOPY VARCHAR2
                                    ,FUNC_CURR OUT NOCOPY VARCHAR2
                                    ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin JG_INFO.JG_GET_SET_OF_BOOKS_INFO(:SOBID, :COAID, :SOBNAME, :FUNC_CURR, :ERRBUF); end;');
    STPROC.BIND_I(SOBID);
    STPROC.BIND_O(COAID);
    STPROC.BIND_O(SOBNAME);
    STPROC.BIND_O(FUNC_CURR);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,COAID);
    STPROC.RETRIEVE(3
                   ,SOBNAME);
    STPROC.RETRIEVE(4
                   ,FUNC_CURR);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/
		  JG_INFO.JG_GET_SET_OF_BOOKS_INFO(SOBID,COAID,SOBNAME,FUNC_CURR,ERRBUF);
  END JG_GET_SET_OF_BOOKS_INFO;

  PROCEDURE JG_GET_BUD_OR_ENC_NAME(ACTUAL_TYPE IN VARCHAR2
                                  ,TYPE_ID IN NUMBER
                                  ,NAME OUT NOCOPY VARCHAR2
                                  ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin JG_INFO.JG_GET_BUD_OR_ENC_NAME(:ACTUAL_TYPE, :TYPE_ID, :NAME, :ERRBUF); end;');
    STPROC.BIND_I(ACTUAL_TYPE);
    STPROC.BIND_I(TYPE_ID);
    STPROC.BIND_O(NAME);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,NAME);
    STPROC.RETRIEVE(4
                   ,ERRBUF);*/NULL;
  END JG_GET_BUD_OR_ENC_NAME;

  PROCEDURE JG_GET_LOOKUP_VALUE(LMODE IN VARCHAR2
                               ,CODE IN VARCHAR2
                               ,TYPE IN VARCHAR2
                               ,VALUE OUT NOCOPY VARCHAR2
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin JG_INFO.JG_GET_LOOKUP_VALUE(:LMODE, :CODE, :TYPE, :VALUE, :ERRBUF); end;');
    STPROC.BIND_I(LMODE);
    STPROC.BIND_I(CODE);
    STPROC.BIND_I(TYPE);
    STPROC.BIND_O(VALUE);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,VALUE);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/NULL;
  END JG_GET_LOOKUP_VALUE;

  PROCEDURE JG_GET_FIRST_PERIOD(APP_ID IN NUMBER
                               ,TSET_OF_BOOKS_ID IN NUMBER
                               ,TPERIOD_NAME IN VARCHAR2
                               ,TFIRST_PERIOD OUT NOCOPY VARCHAR2
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin JG_INFO.JG_GET_FIRST_PERIOD(:APP_ID, :TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TFIRST_PERIOD, :ERRBUF); end;');
    STPROC.BIND_I(APP_ID);
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TFIRST_PERIOD);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,TFIRST_PERIOD);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/NULL;
  END JG_GET_FIRST_PERIOD;

  PROCEDURE JG_GET_FIRST_PERIOD_OF_QUARTER(APP_ID IN NUMBER
                                          ,TSET_OF_BOOKS_ID IN NUMBER
                                          ,TPERIOD_NAME IN VARCHAR2
                                          ,TFIRST_PERIOD OUT NOCOPY VARCHAR2
                                          ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin JG_INFO.JG_GET_FIRST_PERIOD_OF_QUARTER(:APP_ID, :TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TFIRST_PERIOD, :ERRBUF); end;');
    STPROC.BIND_I(APP_ID);
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TFIRST_PERIOD);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,TFIRST_PERIOD);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/NULL;
  END JG_GET_FIRST_PERIOD_OF_QUARTER;

  FUNCTION JG_FORMAT_CURR_AMT(IN_PRECISION IN NUMBER
                             ,IN_AMOUNT_DISP IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := JG_INFO.JG_FORMAT_CURR_AMT(:IN_PRECISION, :IN_AMOUNT_DISP); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(IN_PRECISION);
    STPROC.BIND_I(IN_AMOUNT_DISP);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END JG_FORMAT_CURR_AMT;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/NULL;
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/NULL;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/NULL;
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/NULL;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN (NULL);
  END GET_STRING;

  FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET_NUMBER;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/NULL;
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/NULL;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/NULL;
  END RAISE_ERROR;


END JG_JGZZRDLR_XMLP_PKG;




/
