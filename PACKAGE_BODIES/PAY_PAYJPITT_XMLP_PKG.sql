--------------------------------------------------------
--  DDL for Package Body PAY_PAYJPITT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PAYJPITT_XMLP_PKG" AS
/* $Header: PAYJPITTB.pls 120.3 2008/04/24 11:22:20 amakrish noship $ */

FUNCTION BEFOREREPORT RETURN BOOLEAN IS
	L_SUBMISSION_REQUIRED_FLAG	VARCHAR2(1);
	L_CERTIFICATE_INFO		PAY_JP_WIC_PKG.T_TAX_INFO;
	L_WITHHOLDING_TAX_INFO		PAY_JP_WIC_PKG.T_TAX_INFO;
--	L_PREV_JOBS			PAY_JP_WIC_PKG.T_PREV_JOBS;
--	L_PREV_JOBS_COUNT		NUMBER;
--	L_WITHHOLDING_TAX		NUMBER;
		CURSOR CSR_ASSACT IS
		SELECT	ASSIGNMENT_ACTION_ID,
			ASSIGNMENT_ID,
			ACTION_SEQUENCE,
			EFFECTIVE_DATE,
			ITAX_CATEGORY,
			ITAX_YEA_CATEGORY,
			EMPLOYMENT_CATEGORY,
			SALARY_CATEGORY,
			BUSINESS_GROUP_ID,
			PERSON_ID,
			DATE_EARNED
		FROM	PAY_JP_WIC_ASSACTS_V
		WHERE	EFFECTIVE_DATE
			BETWEEN P_START_DATE AND P_END_DATE
		AND	BUSINESS_GROUP_ID + 0 = P_BUSINESS_GROUP_ID
		AND	ITAX_ORGANIZATION_ID = P_ITAX_ORGANIZATION_ID;
BEGIN
  --HR_STANDARD.EVENT('BEFORE REPORT');
				FND_MESSAGE.SET_NAME('PAY', 'PAY_JP_WIC_SUMMARY_TITLE');
	FND_MESSAGE.SET_TOKEN('YEAR', TO_JP_CHAR(P_END_DATE, 'EEYY'));
	CP_REPORT_TITLE := FND_MESSAGE.GET;
							SELECT	HOI2.ORG_INFORMATION1,
		HOI1.ORG_INFORMATION5,
		HOI1.ORG_INFORMATION6 || HOI1.ORG_INFORMATION7 || HOI1.ORG_INFORMATION8,
		HOI1.ORG_INFORMATION1,
		HOI1.ORG_INFORMATION12
	INTO	CP_TAX_OFFICE_NAME,
		CP_EMPLOYER_POSTAL_CODE,
		CP_EMPLOYER_ADDRESS,
		CP_EMPLOYER_NAME,
		CP_EMPLOYER_TELEPHONE_NUMBER
	FROM	HR_ORGANIZATION_INFORMATION	HOI2,
		HR_ORGANIZATION_INFORMATION	HOI1,
		HR_ALL_ORGANIZATION_UNITS	HOU
	WHERE	HOU.ORGANIZATION_ID = P_ITAX_ORGANIZATION_ID
	AND	HOI1.ORGANIZATION_ID(+) = HOU.ORGANIZATION_ID
	AND	HOI1.ORG_INFORMATION_CONTEXT(+) = 'JP_TAX_SWOT_INFO'
	AND	HOI2.ORGANIZATION_ID(+) = HOU.ORGANIZATION_ID
	AND	HOI2.ORG_INFORMATION_CONTEXT(+) = 'JP_ITAX_WITHHELD_INFO';
				FOR L_REC IN CSR_ASSACT LOOP
		PAY_JP_WIC_PKG.GET_CERTIFICATE_INFO(
			P_ASSIGNMENT_ACTION_ID		=> L_REC.ASSIGNMENT_ACTION_ID,
			P_ASSIGNMENT_ID			=> L_REC.ASSIGNMENT_ID,
			P_ACTION_SEQUENCE		=> L_REC.ACTION_SEQUENCE,
			P_EFFECTIVE_DATE		=> L_REC.EFFECTIVE_DATE,
			P_ITAX_ORGANIZATION_ID		=> P_ITAX_ORGANIZATION_ID,
			P_ITAX_CATEGORY			=> L_REC.ITAX_CATEGORY,
			P_ITAX_YEA_CATEGORY		=> L_REC.ITAX_YEA_CATEGORY,
			P_EMPLOYMENT_CATEGORY		=> L_REC.EMPLOYMENT_CATEGORY,
			P_PERSON_ID			=> L_REC.PERSON_ID,
			P_BUSINESS_GROUP_ID		=> L_REC.BUSINESS_GROUP_ID,
			P_DATE_EARNED			=> L_REC.DATE_EARNED,
			P_CERTIFICATE_INFO		=> L_CERTIFICATE_INFO,
			P_SUBMISSION_REQUIRED_FLAG	=> L_SUBMISSION_REQUIRED_FLAG,
			P_WITHHOLDING_TAX_INFO		=> L_WITHHOLDING_TAX_INFO);
--			P_PREV_JOBS			=> L_PREV_JOBS);


		/*								L_WITHHOLDING_TAX :=  L_WITHHOLDING_TAX_INFO.WITHHOLDING_ITAX;
		IF (L_CERTIFICATE_INFO.WITHHOLDING_ITAX = 0) AND (L_REC.SALARY_CATEGORY = 'YEA') THEN
			L_PREV_JOBS_COUNT := L_PREV_JOBS.COUNT;
			FOR I IN 1..L_PREV_JOBS_COUNT LOOP
				L_WITHHOLDING_TAX := L_WITHHOLDING_TAX + L_PREV_JOBS(I).ITAX;
			END LOOP;
		END IF;*/

		IF L_REC.ITAX_CATEGORY = 'D_HEI' THEN
			CP_A_HEI_COUNT			:= CP_A_HEI_COUNT + 1;
			CP_A_HEI_TAXABLE_INCOME	:= CP_A_HEI_TAXABLE_INCOME + L_WITHHOLDING_TAX_INFO.TAXABLE_INCOME;
			CP_A_HEI_ITAX			:= CP_A_HEI_ITAX + L_WITHHOLDING_TAX_INFO.WITHHOLDING_ITAX;
		--	IF L_WITHHOLDING_TAX = 0 THEN
			IF L_WITHHOLDING_TAX_INFO.WITHHOLDING_ITAX <= 0 THEN
				CP_A_HEI_ZERO_ITAX_COUNT := CP_A_HEI_ZERO_ITAX_COUNT + 1;
			END IF;
		ELSE
			CP_A_OTHER_COUNT		:= CP_A_OTHER_COUNT + 1;
			CP_A_OTHER_TAXABLE_INCOME	:= CP_A_OTHER_TAXABLE_INCOME + L_WITHHOLDING_TAX_INFO.TAXABLE_INCOME;
			CP_A_OTHER_ITAX		:= CP_A_OTHER_ITAX + L_WITHHOLDING_TAX_INFO.WITHHOLDING_ITAX;
		--	IF L_WITHHOLDING_TAX = 0 THEN
		IF L_WITHHOLDING_TAX_INFO.WITHHOLDING_ITAX <= 0 THEN
				CP_A_OTHER_ZERO_ITAX_COUNT := CP_A_OTHER_ZERO_ITAX_COUNT + 1;
			END IF;
		END IF;

				IF L_SUBMISSION_REQUIRED_FLAG = 'Y' THEN
			IF L_REC.ITAX_CATEGORY = 'D_HEI' THEN
				CP_B_HEI_COUNT			:= CP_B_HEI_COUNT + 1;
				CP_B_HEI_TAXABLE_INCOME	:= CP_B_HEI_TAXABLE_INCOME + L_CERTIFICATE_INFO.TAXABLE_INCOME;
				CP_B_HEI_ITAX			:= CP_B_HEI_ITAX + L_CERTIFICATE_INFO.WITHHOLDING_ITAX;
			ELSE
				CP_B_OTHER_COUNT		:= CP_B_OTHER_COUNT + 1;
				CP_B_OTHER_TAXABLE_INCOME	:= CP_B_OTHER_TAXABLE_INCOME + L_CERTIFICATE_INFO.TAXABLE_INCOME;
				CP_B_OTHER_ITAX		:= CP_B_OTHER_ITAX + L_CERTIFICATE_INFO.WITHHOLDING_ITAX;
			END IF;
						IF L_CERTIFICATE_INFO.DISASTER_TAX_REDUCTION <> 0 THEN
				CP_B_DISASTERED_COUNT		:= CP_B_DISASTERED_COUNT + 1;
				CP_B_DISASTER_TAX_REDUCTION	:= CP_B_DISASTER_TAX_REDUCTION + L_CERTIFICATE_INFO.DISASTER_TAX_REDUCTION;
			END IF;
		END IF;
	END LOOP;
		CP_A_COUNT		:= CP_A_OTHER_COUNT + CP_A_HEI_COUNT;
	CP_A_ZERO_ITAX_COUNT	:= CP_A_OTHER_ZERO_ITAX_COUNT + CP_A_HEI_ZERO_ITAX_COUNT;
	CP_A_TAXABLE_INCOME	:= CP_A_OTHER_TAXABLE_INCOME + CP_A_HEI_TAXABLE_INCOME;
	CP_A_ITAX		:= CP_A_OTHER_ITAX + CP_A_HEI_ITAX;
		CP_B_COUNT		:= CP_B_OTHER_COUNT + CP_B_HEI_COUNT;
	CP_B_TAXABLE_INCOME	:= CP_B_OTHER_TAXABLE_INCOME + CP_B_HEI_TAXABLE_INCOME;
	CP_B_ITAX		:= CP_B_OTHER_ITAX + CP_B_HEI_ITAX;
							SELECT	COUNT(PAA.ASSIGNMENT_ACTION_ID),
		NVL(SUM(PPT.TAXABLE_SAL_AMT + PPT.TAXABLE_MAT_AMT), 0),
		NVL(SUM(PPT.ITAX), 0)
	INTO	CP_TERM_COUNT,
		CP_TERM_TAXABLE_INCOME,
		CP_TERM_ITAX
	FROM	PAY_JP_PRE_TAX		PPT,
		PAY_ASSIGNMENT_ACTIONS	PAA,
		PAY_PAYROLL_ACTIONS	PPA
	WHERE	PPA.EFFECTIVE_DATE
		BETWEEN P_START_DATE AND P_END_DATE
	AND	PPA.BUSINESS_GROUP_ID + 0 = P_BUSINESS_GROUP_ID
	AND	PPA.ACTION_TYPE IN ('R', 'Q', 'B', 'I')
	AND	PAA.PAYROLL_ACTION_ID = PPA.PAYROLL_ACTION_ID
	AND	PAA.ACTION_STATUS = 'C'
	AND	PPT.ASSIGNMENT_ACTION_ID = PAA.ASSIGNMENT_ACTION_ID
	AND	PPT.ACTION_STATUS = 'C'
	AND	PPT.SALARY_CATEGORY = 'TERM'
	AND	PPT.ITAX_ORGANIZATION_ID = P_ITAX_ORGANIZATION_ID
	AND	NOT EXISTS(
			SELECT	NULL
			FROM	PAY_PAYROLL_ACTIONS	PPAV,
				PAY_ASSIGNMENT_ACTIONS	PAAV,
				PAY_ACTION_INTERLOCKS	PAI
			WHERE	PAI.LOCKED_ACTION_ID = PAA.ASSIGNMENT_ACTION_ID
			AND	PAAV.ASSIGNMENT_ACTION_ID = PAI.LOCKING_ACTION_ID
			AND	PPAV.PAYROLL_ACTION_ID = PAAV.PAYROLL_ACTION_ID
			AND	PPAV.ACTION_TYPE = 'V');
		RETURN (TRUE);
END;

FUNCTION TO_JP_CHAR(
	P_DATE		IN DATE,
	P_DATE_FORMAT	IN VARCHAR2) RETURN VARCHAR2
IS
	L_DUMMY		VARCHAR2(255);
BEGIN
					SELECT	TO_CHAR(P_DATE, P_DATE_FORMAT, 'NLS_CALENDAR=''JAPANESE IMPERIAL''')
	INTO	L_DUMMY
	FROM	DUAL;
		RETURN L_DUMMY;
END;

FUNCTION AFTERREPORT RETURN BOOLEAN IS
BEGIN
  --HR_STANDARD.EVENT('AFTER REPORT');
		RETURN (TRUE);
END;

FUNCTION AFTERPFORM RETURN BOOLEAN IS
BEGIN
	P_START_DATE	:= TO_DATE(TO_CHAR(P_YEAR, 'FM0999') || '0101', 'YYYYMMDD');
	P_END_DATE	:= ADD_MONTHS(P_START_DATE, 12) - 1;
		RETURN (TRUE);
END;

--FUNCTIONS TO REFER ORACLE REPORT PLACEHOLDERS--

 FUNCTION CP_A_OTHER_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_OTHER_COUNT;
	 END;
 FUNCTION CP_A_OTHER_ZERO_ITAX_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_OTHER_ZERO_ITAX_COUNT;
	 END;
 FUNCTION CP_A_OTHER_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_OTHER_TAXABLE_INCOME;
	 END;
 FUNCTION CP_A_OTHER_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_OTHER_ITAX;
	 END;
 FUNCTION CP_A_HEI_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_HEI_COUNT;
	 END;
 FUNCTION CP_A_HEI_ZERO_ITAX_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_HEI_ZERO_ITAX_COUNT;
	 END;
 FUNCTION CP_A_HEI_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_HEI_TAXABLE_INCOME;
	 END;
 FUNCTION CP_A_HEI_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_HEI_ITAX;
	 END;
 FUNCTION CP_A_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_COUNT;
	 END;
 FUNCTION CP_A_ZERO_ITAX_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_ZERO_ITAX_COUNT;
	 END;
 FUNCTION CP_A_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_TAXABLE_INCOME;
	 END;
 FUNCTION CP_A_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_A_ITAX;
	 END;
 FUNCTION CP_B_OTHER_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_OTHER_COUNT;
	 END;
 FUNCTION CP_B_OTHER_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_OTHER_TAXABLE_INCOME;
	 END;
 FUNCTION CP_B_OTHER_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_OTHER_ITAX;
	 END;
 FUNCTION CP_B_HEI_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_HEI_COUNT;
	 END;
 FUNCTION CP_B_HEI_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_HEI_TAXABLE_INCOME;
	 END;
 FUNCTION CP_B_HEI_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_HEI_ITAX;
	 END;
 FUNCTION CP_B_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_COUNT;
	 END;
 FUNCTION CP_B_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_TAXABLE_INCOME;
	 END;
 FUNCTION CP_B_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_ITAX;
	 END;
 FUNCTION CP_TERM_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_TERM_COUNT;
	 END;
 FUNCTION CP_TERM_TAXABLE_INCOME_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_TERM_TAXABLE_INCOME;
	 END;
 FUNCTION CP_TERM_ITAX_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_TERM_ITAX;
	 END;
 FUNCTION CP_REPORT_TITLE_P RETURN VARCHAR2 IS
	BEGIN
	 RETURN CP_REPORT_TITLE;
	 END;
 FUNCTION CP_B_DISASTERED_COUNT_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_DISASTERED_COUNT;
	 END;
 FUNCTION CP_B_DISASTER_TAX_REDUCTION_P RETURN NUMBER IS
	BEGIN
	 RETURN CP_B_DISASTER_TAX_REDUCTION;
	 END;
 FUNCTION CP_TAX_OFFICE_NAME_P RETURN VARCHAR2 IS
	BEGIN
	 RETURN CP_TAX_OFFICE_NAME;
	 END;
 FUNCTION CP_EMPLOYER_POSTAL_CODE_P RETURN VARCHAR2 IS
	BEGIN
	 RETURN CP_EMPLOYER_POSTAL_CODE;
	 END;
 FUNCTION CP_EMPLOYER_ADDRESS_P RETURN VARCHAR2 IS
	BEGIN
	 RETURN CP_EMPLOYER_ADDRESS;
	 END;
 FUNCTION CP_EMPLOYER_NAME_P RETURN VARCHAR2 IS
	BEGIN
	 RETURN CP_EMPLOYER_NAME;
	 END;
 FUNCTION CP_EMPLOYER_TELEPHONE_NUMBER_P RETURN VARCHAR2 IS
	BEGIN
	 RETURN CP_EMPLOYER_TELEPHONE_NUMBER;
	 END;
END PAY_PAYJPITT_XMLP_PKG ;

/
