--------------------------------------------------------
--  DDL for Package Body BSC_RESPONSIBILITY_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BSC_RESPONSIBILITY_PKG" as
/* $Header: BSCRESPB.pls 115.6 2003/02/12 14:29:09 adeulgao ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_RESPONSIBILITY_ID in NUMBER,
  X_RESPONSIBILITY_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from BSC_RESPONSIBILITY_TL
    where APPLICATION_ID = X_APPLICATION_ID
    and RESPONSIBILITY_ID = X_RESPONSIBILITY_ID
    and LANGUAGE = userenv('LANG')
    ;
begin
  insert into BSC_RESPONSIBILITY_TL (
    APPLICATION_ID,
    RESPONSIBILITY_ID,
    RESPONSIBILITY_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_APPLICATION_ID,
    X_RESPONSIBILITY_ID,
    X_RESPONSIBILITY_NAME,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_DESCRIPTION,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from BSC_RESPONSIBILITY_TL T
    where T.APPLICATION_ID = X_APPLICATION_ID
    and T.RESPONSIBILITY_ID = X_RESPONSIBILITY_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_APPLICATION_ID in NUMBER,
  X_RESPONSIBILITY_ID in NUMBER,
  X_RESPONSIBILITY_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2
) is
  cursor c1 is select
      RESPONSIBILITY_NAME,
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from BSC_RESPONSIBILITY_TL
    where APPLICATION_ID = X_APPLICATION_ID
    and RESPONSIBILITY_ID = X_RESPONSIBILITY_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of APPLICATION_ID nowait;
begin
  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.RESPONSIBILITY_NAME = X_RESPONSIBILITY_NAME)
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_RESPONSIBILITY_ID in NUMBER,
  X_RESPONSIBILITY_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update BSC_RESPONSIBILITY_TL set
    RESPONSIBILITY_NAME = X_RESPONSIBILITY_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where APPLICATION_ID = X_APPLICATION_ID
  and RESPONSIBILITY_ID = X_RESPONSIBILITY_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_RESPONSIBILITY_ID in NUMBER
) is
begin
  delete from BSC_RESPONSIBILITY_TL
  where APPLICATION_ID = X_APPLICATION_ID
  and RESPONSIBILITY_ID = X_RESPONSIBILITY_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  update BSC_RESPONSIBILITY_TL T set (
      RESPONSIBILITY_NAME,
      DESCRIPTION
    ) = (select
      B.RESPONSIBILITY_NAME,
      B.DESCRIPTION
    from BSC_RESPONSIBILITY_TL B
    where B.APPLICATION_ID = T.APPLICATION_ID
    and B.RESPONSIBILITY_ID = T.RESPONSIBILITY_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.APPLICATION_ID,
      T.RESPONSIBILITY_ID,
      T.LANGUAGE
  ) in (select
      SUBT.APPLICATION_ID,
      SUBT.RESPONSIBILITY_ID,
      SUBT.LANGUAGE
    from BSC_RESPONSIBILITY_TL SUBB, BSC_RESPONSIBILITY_TL SUBT
    where SUBB.APPLICATION_ID = SUBT.APPLICATION_ID
    and SUBB.RESPONSIBILITY_ID = SUBT.RESPONSIBILITY_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.RESPONSIBILITY_NAME <> SUBT.RESPONSIBILITY_NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into BSC_RESPONSIBILITY_TL (
    APPLICATION_ID,
    RESPONSIBILITY_ID,
    RESPONSIBILITY_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.APPLICATION_ID,
    B.RESPONSIBILITY_ID,
    B.RESPONSIBILITY_NAME,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.DESCRIPTION,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from BSC_RESPONSIBILITY_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from BSC_RESPONSIBILITY_TL T
    where T.APPLICATION_ID = B.APPLICATION_ID
    and T.RESPONSIBILITY_ID = B.RESPONSIBILITY_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end BSC_RESPONSIBILITY_PKG;

/
