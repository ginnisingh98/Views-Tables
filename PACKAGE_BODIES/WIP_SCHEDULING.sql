--------------------------------------------------------
--  DDL for Package Body WIP_SCHEDULING
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_SCHEDULING" AS
/* $Header: wipsildb.pls 115.8 2002/11/29 18:53:37 simishra ship $ */

PROCEDURE LOAD_INTERFACE (
P_WIP_ENTITY_ID         NUMBER,
P_ORGANIZATION_ID       NUMBER,
P_JOB_INTERFACE_GROUP_ID NUMBER,
P_GROUP_ID              NUMBER,
P_SCHEDULING_LEVEL      NUMBER) IS

BEGIN

    IF P_JOB_INTERFACE_GROUP_ID IS NULL THEN

	IF P_SCHEDULING_LEVEL = 1 THEN
		INSERT INTO WIP_SCHEDULING_INTERFACE
		(
		interface_id,
		group_id,
		wip_entity_id,
		organization_id,
		operation_seq_num,
		resource_seq_num,
		scheduling_level,
		operation_start_date,
		operation_completion_date,
		resource_start_date,
		resource_completion_date,
		process_phase,
		process_status,
		last_update_date,
		last_updated_by,
		last_update_login,
		creation_date,
		created_by,
		request_id,
		program_application_id,
		program_id,
		program_update_date
		)
		(SELECT WIP_INTERFACE_S.NEXTVAL,
			P_GROUP_ID,
			P_WIP_ENTITY_ID,
			P_ORGANIZATION_ID,
			OPERATION_SEQ_NUM,
			NULL,
			P_SCHEDULING_LEVEL,
			FIRST_UNIT_START_DATE,
			LAST_UNIT_COMPLETION_DATE,
			NULL,
			NULL,
			1,
			1,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.LOGIN_ID,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.CONC_REQUEST_ID,
			FND_GLOBAL.PROG_APPL_ID,
			FND_GLOBAL.CONC_PROGRAM_ID,
			SYSDATE
		FROM WIP_OPERATIONS
		WHERE WIP_ENTITY_ID = P_WIP_ENTITY_ID
		AND   ORGANIZATION_ID = P_ORGANIZATION_ID);

	ELSIF P_SCHEDULING_LEVEL = 2 THEN
		INSERT INTO WIP_SCHEDULING_INTERFACE
		(
		interface_id,
		group_id,
		wip_entity_id,
		organization_id,
		operation_seq_num,
		resource_seq_num,
		scheduling_level,
		operation_start_date,
		operation_completion_date,
		resource_start_date,
		resource_completion_date,
		usage_rate_or_amount,
		process_phase,
		process_status,
		last_update_date,
		last_updated_by,
		last_update_login,
		creation_date,
		created_by,
		request_id,
		program_application_id,
		program_id,
		program_update_date
		)
		(SELECT WIP_INTERFACE_S.NEXTVAL,
			P_GROUP_ID,
			P_WIP_ENTITY_ID,
			P_ORGANIZATION_ID,
			OPERATION_SEQ_NUM,
			RESOURCE_SEQ_NUM,
			P_SCHEDULING_LEVEL,
			NULL,
			NULL,
			START_DATE,
			COMPLETION_DATE,
			usage_rate_or_amount,
			1,
			1,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.LOGIN_ID,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.CONC_REQUEST_ID,
			FND_GLOBAL.PROG_APPL_ID,
			FND_GLOBAL.CONC_PROGRAM_ID,
			SYSDATE
		FROM WIP_OPERATION_RESOURCES
		WHERE WIP_ENTITY_ID = P_WIP_ENTITY_ID
		AND   ORGANIZATION_ID = P_ORGANIZATION_ID);
	END IF;

    ELSE

	IF P_SCHEDULING_LEVEL = 1 THEN
		INSERT INTO WIP_SCHEDULING_INTERFACE
		(
		interface_id,
		group_id,
		wip_entity_id,
		organization_id,
		operation_seq_num,
		resource_seq_num,
		scheduling_level,
		operation_start_date,
		operation_completion_date,
		resource_start_date,
		resource_completion_date,
		process_phase,
		process_status,
		last_update_date,
		last_updated_by,
		last_update_login,
		creation_date,
		created_by,
		request_id,
		program_application_id,
		program_id,
		program_update_date
		)
		(SELECT WIP_INTERFACE_S.NEXTVAL,
			P_GROUP_ID,
			WIP_ENTITY_ID,
			ORGANIZATION_ID,
			OPERATION_SEQ_NUM,
			NULL,
			P_SCHEDULING_LEVEL,
			FIRST_UNIT_START_DATE,
			LAST_UNIT_COMPLETION_DATE,
			NULL,
			NULL,
			1,
			1,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.LOGIN_ID,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.CONC_REQUEST_ID,
			FND_GLOBAL.PROG_APPL_ID,
			FND_GLOBAL.CONC_PROGRAM_ID,
			SYSDATE
		FROM WIP_OPERATIONS
		WHERE (WIP_ENTITY_ID, ORGANIZATION_ID) IN
		(SELECT WIP_ENTITY_ID,
			ORGANIZATION_ID
		 FROM   WIP_JOB_SCHEDULE_INTERFACE WJSI
		 WHERE  WJSI.GROUP_ID = P_JOB_INTERFACE_GROUP_ID
		 AND    WJSI.PROCESS_PHASE = WIP_CONSTANTS.ML_COMPLETE
		 AND    WJSI.PROCESS_STATUS = WIP_CONSTANTS.ML_COMPLETE));

	ELSIF P_SCHEDULING_LEVEL = 2 THEN
		INSERT INTO WIP_SCHEDULING_INTERFACE
		(
		interface_id,
		group_id,
		wip_entity_id,
		organization_id,
		operation_seq_num,
		resource_seq_num,
		scheduling_level,
		operation_start_date,
		operation_completion_date,
		resource_start_date,
		resource_completion_date,
		usage_rate_or_amount,
		process_phase,
		process_status,
		last_update_date,
		last_updated_by,
		last_update_login,
		creation_date,
		created_by,
		request_id,
		program_application_id,
		program_id,
		program_update_date
		)
		(SELECT WIP_INTERFACE_S.NEXTVAL,
			P_GROUP_ID,
			WIP_ENTITY_ID,
			ORGANIZATION_ID,
			OPERATION_SEQ_NUM,
			RESOURCE_SEQ_NUM,
			P_SCHEDULING_LEVEL,
			NULL,
			NULL,
			START_DATE,
			COMPLETION_DATE,
			USAGE_RATE_OR_AMOUNT,
			1,
			1,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.LOGIN_ID,
			SYSDATE,
			FND_GLOBAL.USER_ID,
			FND_GLOBAL.CONC_REQUEST_ID,
			FND_GLOBAL.PROG_APPL_ID,
			FND_GLOBAL.CONC_PROGRAM_ID,
			SYSDATE
		FROM WIP_OPERATION_RESOURCES
		WHERE (WIP_ENTITY_ID, ORGANIZATION_ID) IN
		(SELECT WIP_ENTITY_ID,
			ORGANIZATION_ID
		 FROM   WIP_JOB_SCHEDULE_INTERFACE WJSI
		 WHERE  WJSI.GROUP_ID = P_JOB_INTERFACE_GROUP_ID
		 AND    WJSI.PROCESS_PHASE = WIP_CONSTANTS.ML_COMPLETE
		 AND    WJSI.PROCESS_STATUS = WIP_CONSTANTS.ML_COMPLETE));
	END IF;
    END IF;

END LOAD_INTERFACE;

PROCEDURE LOAD_WIP(P_GROUP_ID NUMBER) IS

x_min_date DATE;
x_max_date DATE;

CURSOR CJOB IS
	SELECT DISTINCT WIP_ENTITY_ID, ORGANIZATION_ID, SCHEDULING_LEVEL
	  FROM WIP_SCHEDULING_INTERFACE
	 WHERE GROUP_ID = P_GROUP_ID
           AND PROCESS_PHASE = WIP_CONSTANTS.ML_VALIDATION
           AND PROCESS_STATUS = WIP_CONSTANTS.RUNNING;

CURSOR COP(we_id number, org_id number) IS
	SELECT OPERATION_SEQ_NUM
	FROM   WIP_OPERATIONS
	WHERE  WIP_ENTITY_ID = we_id
	AND    ORGANIZATION_ID = org_id;

BEGIN

	UPDATE WIP_SCHEDULING_INTERFACE
	SET PROCESS_STATUS = WIP_CONSTANTS.RUNNING
	WHERE GROUP_ID = P_GROUP_ID
	AND PROCESS_PHASE = WIP_CONSTANTS.ML_VALIDATION
	AND PROCESS_STATUS = WIP_CONSTANTS.PENDING;

	VALIDATE_JOBS(P_GROUP_ID);
	VALIDATE_SCHEDULING_LEVEL(P_GROUP_ID);
	VALIDATE_DATES(P_GROUP_ID);
	VALIDATE_USAGE_RATE(P_GROUP_ID);
	VALIDATE_OPS_RES_MATCH(P_GROUP_ID);

        -- This must come after all validation
        ERROR_ALL_IF_ANY(P_GROUP_ID);

	FOR C IN CJOB LOOP

		IF C.SCHEDULING_LEVEL = 1 THEN

			UPDATE WIP_OPERATIONS WO
			SET (WO.FIRST_UNIT_START_DATE,
			     WO.FIRST_UNIT_COMPLETION_DATE,
			     WO.LAST_UNIT_START_DATE,
			     WO.LAST_UNIT_COMPLETION_DATE,
			     WO.LAST_UPDATED_BY) =
			(SELECT OPERATION_START_DATE,
				OPERATION_COMPLETION_DATE,
				OPERATION_START_DATE,
				OPERATION_COMPLETION_DATE,
				LAST_UPDATED_BY
			   FROM WIP_SCHEDULING_INTERFACE WSI
			  WHERE WSI.WIP_ENTITY_ID = C.WIP_ENTITY_ID
			    AND WSI.OPERATION_SEQ_NUM = WO.OPERATION_SEQ_NUM
			    AND WSI.GROUP_ID = P_GROUP_ID),
			     LAST_UPDATE_DATE = SYSDATE
			WHERE WO.WIP_ENTITY_ID = C.WIP_ENTITY_ID
			AND   WO.ORGANIZATION_ID = C.ORGANIZATION_ID;

			UPDATE WIP_OPERATION_RESOURCES WOR
			SET    (START_DATE,
				COMPLETION_DATE,
				LAST_UPDATE_DATE,
				LAST_UPDATED_BY) =
			(SELECT FIRST_UNIT_START_DATE,
				LAST_UNIT_COMPLETION_DATE,
				LAST_UPDATE_DATE,
				LAST_UPDATED_BY
			   FROM WIP_OPERATIONS WO
			  WHERE WO.WIP_ENTITY_ID = WOR.WIP_ENTITY_ID
			    AND WO.ORGANIZATION_ID = WOR.ORGANIZATION_ID
			    AND WO.OPERATION_SEQ_NUM = WOR.OPERATION_SEQ_NUM)
			WHERE   WOR.WIP_ENTITY_ID = C.WIP_ENTITY_ID
                        AND     WOR.ORGANIZATION_ID = C.ORGANIZATION_ID;

		ELSIF C.SCHEDULING_LEVEL = 2 THEN

			UPDATE WIP_OPERATION_RESOURCES WOR
			SET (WOR.START_DATE,
			     WOR.COMPLETION_DATE,
			     WOR.USAGE_RATE_OR_AMOUNT,
			     WOR.LAST_UPDATED_BY) =
			(SELECT RESOURCE_START_DATE,
				RESOURCE_COMPLETION_DATE,
				USAGE_RATE_OR_AMOUNT,
				LAST_UPDATED_BY
			   FROM WIP_SCHEDULING_INTERFACE WSI
			  WHERE WSI.WIP_ENTITY_ID = C.WIP_ENTITY_ID
			    AND WSI.OPERATION_SEQ_NUM = WOR.OPERATION_SEQ_NUM
			    AND WSI.RESOURCE_SEQ_NUM = WOR.RESOURCE_SEQ_NUM
			    AND WSI.GROUP_ID = P_GROUP_ID),
			     LAST_UPDATE_DATE = SYSDATE
			WHERE WOR.WIP_ENTITY_ID = C.WIP_ENTITY_ID
			AND   WOR.ORGANIZATION_ID = C.ORGANIZATION_ID;

			FOR D IN COP(C.WIP_ENTITY_ID, C.ORGANIZATION_ID) LOOP

				SELECT MIN(START_DATE), MAX(COMPLETION_DATE)
				INTO   x_min_date, x_max_date
				FROM   WIP_OPERATION_RESOURCES WOR
				WHERE  WOR.WIP_ENTITY_ID = C.WIP_ENTITY_ID
				AND    WOR.OPERATION_SEQ_NUM = D.OPERATION_SEQ_NUM
				AND    WOR.ORGANIZATION_ID = C.ORGANIZATION_ID;

				UPDATE 	WIP_OPERATIONS WO
				SET    	FIRST_UNIT_START_DATE = x_min_date,
					 LAST_UNIT_START_DATE = x_min_date,
					 FIRST_UNIT_COMPLETION_DATE = x_max_date,
					 LAST_UNIT_COMPLETION_DATE = x_max_date,
					 LAST_UPDATE_DATE = SYSDATE,
					 LAST_UPDATED_BY = 1
				WHERE   WO.WIP_ENTITY_ID = C.WIP_ENTITY_ID
				AND     WO.ORGANIZATION_ID = C.ORGANIZATION_ID
				AND     WO.OPERATION_SEQ_NUM = D.OPERATION_SEQ_NUM;

			END LOOP;

		END IF;

		UPDATE_REQ_DATES(C.WIP_ENTITY_ID,
				 C.ORGANIZATION_ID);

		UPDATE_JOB_DATES(C.WIP_ENTITY_ID,
				 C.ORGANIZATION_ID);

	END LOOP;

	UPDATE WIP_SCHEDULING_INTERFACE
	SET PROCESS_STATUS = WIP_CONSTANTS.ML_COMPLETE,
	    PROCESS_PHASE = WIP_CONSTANTS.ML_COMPLETE
	WHERE GROUP_ID = P_GROUP_ID
	AND PROCESS_PHASE = WIP_CONSTANTS.ML_VALIDATION
	AND PROCESS_STATUS = WIP_CONSTANTS.RUNNING;

	DELETE FROM WIP_SCHEDULING_INTERFACE
	WHERE  GROUP_ID = P_GROUP_ID
	AND    PROCESS_STATUS = WIP_CONSTANTS.ML_COMPLETE
        AND    PROCESS_PHASE = WIP_CONSTANTS.ML_COMPLETE;

	COMMIT;

END LOAD_WIP;


PROCEDURE LOAD_WIP_CONCURRENT(	errbuf OUT NOCOPY VARCHAR2,
				retcode OUT NOCOPY NUMBER,
				p_group_id NUMBER) IS
	recCount NUMBER;
BEGIN
	-- checks if records are available in the interface table
	SELECT	count(*)
	INTO	recCount
	FROM	wip_scheduling_interface
	WHERE	group_id = p_group_id
		and process_phase = WIP_CONSTANTS.ML_VALIDATION
		and process_status = WIP_CONSTANTS.PENDING;

	if (recCount = 0) then
		retcode := 1;
		errbuf := 'LOAD_WIP: No schedules available in group '
			|| p_group_id || '.
Please make sure data are available in WIP_SCHEDULING_INTERFACE with PROCESS_PHASE = 2 and PROCESS_STATUS = 1';

		RETURN;
	end if;


	-- starts load_wip
	WIP_SCHEDULING.LOAD_WIP(p_group_id);


	-- checks if there are errors
	SELECT	count(*)
	INTO	recCount
	FROM	wip_scheduling_interface
	WHERE	group_id = p_group_id
		and process_status = WIP_CONSTANTS.ERROR;

	if (recCount > 0) then
		retcode := 2;
		errbuf := 'LOAD_WIP: Error occurred in loading interface.  Please refer to WIP_INTERFACE_ERRORS for more information.';

	end if;


EXCEPTION
  WHEN others then
	errbuf := 'LOAD_WIP: Encountered Oracle errors.  '
		|| substr(sqlerrm, 1, 100);
	retcode := 2;

END LOAD_WIP_CONCURRENT;



















PROCEDURE VALIDATE_JOBS(P_GROUP_ID NUMBER) IS
BEGIN

	-- Jobs must exist and be status 1,3,4,6

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' NOT EXISTS
                (SELECT 1
                   FROM WIP_DISCRETE_JOBS WDJ
                  WHERE WDJ.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
                    AND WDJ.ORGANIZATION_ID = WSI.ORGANIZATION_ID
                    AND WDJ.STATUS_TYPE IN (1,3,4,6)) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_JOB');

END VALIDATE_JOBS;

PROCEDURE VALIDATE_SCHEDULING_LEVEL(P_GROUP_ID NUMBER) IS
BEGIN

	-- Scheduling level must be 1 (operation) or 2 (resource)

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' SCHEDULING_LEVEL NOT IN (1,2) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_SCHED_LEVEL');

END VALIDATE_SCHEDULING_LEVEL;

PROCEDURE VALIDATE_USAGE_RATE(P_GROUP_ID NUMBER) IS
BEGIN

	-- Give Error if dates are null or if start date > comp date

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' ((WSI.SCHEDULING_LEVEL = 2
		    AND WSI.USAGE_RATE_OR_AMOUNT < 0)) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_RATE');

END VALIDATE_USAGE_RATE;

PROCEDURE VALIDATE_DATES(P_GROUP_ID NUMBER) IS
BEGIN

	-- Give Error if dates are null or if start date > comp date

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' ((WSI.SCHEDULING_LEVEL  = 1
		    AND(     (WSI.OPERATION_COMPLETION_DATE IS NULL
			      OR WSI.OPERATION_START_DATE IS NULL)
		        OR   (WSI.OPERATION_START_DATE >
			      WSI.OPERATION_COMPLETION_DATE)))
		    OR (WSI.SCHEDULING_LEVEL = 2
		    AND(     (WSI.RESOURCE_COMPLETION_DATE IS NULL
			      OR WSI.RESOURCE_START_DATE IS NULL)
		        OR   (WSI.RESOURCE_START_DATE >
			      WSI.RESOURCE_COMPLETION_DATE)))) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_DATES');

END VALIDATE_DATES;

PROCEDURE VALIDATE_OPS_RES_MATCH
(P_GROUP_ID NUMBER) IS
BEGIN
--  Need to worry about erroring out 1 ==> erroring out all
	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' WSI.SCHEDULING_LEVEL = 1
		  AND EXISTS (
			SELECT OPERATION_SEQ_NUM
			FROM WIP_SCHEDULING_INTERFACE SI2
			WHERE SI2.GROUP_ID = WSI.GROUP_ID
			AND   SI2.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   SI2.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			AND   SI2.PROCESS_PHASE = 2
			AND   SI2.PROCESS_STATUS = 2
			MINUS
			SELECT OPERATION_SEQ_NUM
			FROM WIP_OPERATIONS WO
			WHERE WO.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   WO.ORGANIZATION_ID = WSI.ORGANIZATION_ID) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_OPS');

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' WSI.SCHEDULING_LEVEL = 1
		  AND EXISTS (
			SELECT OPERATION_SEQ_NUM
			FROM WIP_OPERATIONS WO
			WHERE WO.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   WO.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			MINUS
			SELECT OPERATION_SEQ_NUM
			FROM WIP_SCHEDULING_INTERFACE SI2
			WHERE GROUP_ID = WSI.GROUP_ID
			AND   SI2.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   SI2.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			AND   SI2.PROCESS_PHASE = 2
			AND   SI2.PROCESS_STATUS = 2) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_OPS');

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' WSI.SCHEDULING_LEVEL = 2
		  AND EXISTS (
			SELECT OPERATION_SEQ_NUM, RESOURCE_SEQ_NUM
			FROM WIP_SCHEDULING_INTERFACE SI2
			WHERE GROUP_ID = WSI.GROUP_ID
			AND   SI2.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   SI2.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			AND   SI2.PROCESS_PHASE = 2
			AND   SI2.PROCESS_STATUS = 2
			MINUS
			SELECT OPERATION_SEQ_NUM, RESOURCE_SEQ_NUM
			FROM WIP_OPERATION_RESOURCES WOR
			WHERE WOR.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   WOR.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			) ',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_RES');

	WIP_MASS_LOAD_UTILITIES.Error
		(P_Group_Id,
		 'WIP_SCHEDULING_INTERFACE WSI',
		WIP_CONSTANTS.ERROR,
		' WSI.SCHEDULING_LEVEL = 2
		  AND EXISTS (
			SELECT OPERATION_SEQ_NUM, RESOURCE_SEQ_NUM
			FROM WIP_OPERATION_RESOURCES WOR
			WHERE WOR.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   WOR.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			MINUS
			SELECT OPERATION_SEQ_NUM, RESOURCE_SEQ_NUM
			FROM WIP_SCHEDULING_INTERFACE SI2
			WHERE GROUP_ID = WSI.GROUP_ID
			AND   SI2.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
			AND   SI2.ORGANIZATION_ID = WSI.ORGANIZATION_ID
			AND   SI2.PROCESS_PHASE = 2
			AND   SI2.PROCESS_STATUS = 2
			 )',
		WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
		'WIP_SI_INVALID_RES');

END VALIDATE_OPS_RES_MATCH;

/* If any record for a job is invalid, we must error out ALL records for that job */
PROCEDURE ERROR_ALL_IF_ANY
(P_GROUP_ID NUMBER) IS
BEGIN
        WIP_MASS_LOAD_UTILITIES.Error
                (P_Group_Id,
                 'WIP_SCHEDULING_INTERFACE WSI',
                WIP_CONSTANTS.ERROR,
                ' EXISTS (SELECT 1
                          FROM WIP_SCHEDULING_INTERFACE WSI2
                          WHERE WSI2.GROUP_ID = WSI.GROUP_ID
                          AND   WSI2.WIP_ENTITY_ID = WSI.WIP_ENTITY_ID
                          AND   WSI2.PROCESS_STATUS = 3) ',
                WIP_MASS_LOAD_UTILITIES.MSG_ERROR,
                'WIP_SI_OTHERS_FAILED');
END ERROR_ALL_IF_ANY;

PROCEDURE UPDATE_REQ_DATES(P_WIP_ENTITY_ID NUMBER,
			   P_ORGANIZATION_ID NUMBER) IS
BEGIN

	UPDATE WIP_REQUIREMENT_OPERATIONS WRO
	SET    (DATE_REQUIRED,
		LAST_UPDATE_DATE,
		LAST_UPDATED_BY) =
	(SELECT FIRST_UNIT_START_DATE,
		LAST_UPDATE_DATE,
		LAST_UPDATED_BY
	   FROM WIP_OPERATIONS WO
	  WHERE WO.WIP_ENTITY_ID = WRO.WIP_ENTITY_ID
	    AND WO.ORGANIZATION_ID = WRO.ORGANIZATION_ID
	    AND WO.OPERATION_SEQ_NUM = ABS(WRO.OPERATION_SEQ_NUM))
	WHERE   WRO.WIP_ENTITY_ID = P_WIP_ENTITY_ID
	AND     WRO.ORGANIZATION_ID = P_ORGANIZATION_ID;

END UPDATE_REQ_DATES;

PROCEDURE UPDATE_JOB_DATES(P_WIP_ENTITY_ID NUMBER,
			   P_ORGANIZATION_ID NUMBER) IS
BEGIN
	UPDATE 	WIP_DISCRETE_JOBS WDJ
	SET    	SCHEDULED_START_DATE =
	(SELECT MIN(FIRST_UNIT_START_DATE)
	   FROM	WIP_OPERATIONS WO
	  WHERE WO.WIP_ENTITY_ID = WDJ.WIP_ENTITY_ID
	    AND WO.ORGANIZATION_ID = WDJ.ORGANIZATION_ID),
		SCHEDULED_COMPLETION_DATE =
	(SELECT MAX(LAST_UNIT_COMPLETION_DATE)
	   FROM	WIP_OPERATIONS WO
	  WHERE WO.WIP_ENTITY_ID = WDJ.WIP_ENTITY_ID
	    AND WO.ORGANIZATION_ID = WDJ.ORGANIZATION_ID),
		(LAST_UPDATE_DATE,
		LAST_UPDATED_BY) =
	(SELECT LAST_UPDATE_DATE,
		LAST_UPDATED_BY
	   FROM WIP_OPERATIONS WO
	  WHERE WO.WIP_ENTITY_ID = WDJ.WIP_ENTITY_ID
	    AND WO.ORGANIZATION_ID = WDJ.ORGANIZATION_ID
	    AND WO.PREVIOUS_OPERATION_SEQ_NUM IS NULL)
	WHERE   WDJ.WIP_ENTITY_ID = P_WIP_ENTITY_ID
	AND     WDJ.ORGANIZATION_ID = P_ORGANIZATION_ID;

END UPDATE_JOB_DATES;

END WIP_SCHEDULING;

/
