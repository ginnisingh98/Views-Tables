--------------------------------------------------------
--  DDL for Package Body PAY_PAYGBTPL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PAYGBTPL_XMLP_PKG" AS
/* $Header: PAYGBTPLB.pls 120.0 2008/01/07 15:34:31 srikrish noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_PROC_PTD_DIM NUMBER;
    P_PERIOD_NAME VARCHAR2(60);
    P_START_DATE DATE;
    P_END_DATE DATE;
    CURSOR INPUT_VALUES IS
      SELECT
        PIV_SCON.INPUT_VALUE_ID SCON_IV,
        PIV_CAT.INPUT_VALUE_ID CAT_IV,
        PET.ELEMENT_TYPE_ID
      FROM
        PAY_INPUT_VALUES_F PIV_SCON,
        PAY_INPUT_VALUES_F PIV_CAT,
        PAY_ELEMENT_TYPES_F PET
      WHERE PET.ELEMENT_NAME = 'NI'
        AND PET.LEGISLATION_CODE = 'GB'
        AND PIV_SCON.NAME = 'SCON'
        AND PET.LEGISLATION_CODE = PIV_SCON.LEGISLATION_CODE
        AND PIV_SCON.ELEMENT_TYPE_ID = PET.ELEMENT_TYPE_ID
        AND PIV_CAT.NAME = 'Category'
        AND PET.LEGISLATION_CODE = PIV_CAT.LEGISLATION_CODE
        AND PIV_CAT.ELEMENT_TYPE_ID = PET.ELEMENT_TYPE_ID;
  BEGIN
    BEGIN
      --HR_STANDARD.EVENT('BEFORE REPORT');
      NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    BEGIN
      SELECT
        TO_DATE('06-04-' || TO_CHAR(TO_NUMBER(TO_CHAR(PTP.REGULAR_PAYMENT_DATE
                                         ,'YYYY')) + DECODE(SIGN(PTP.REGULAR_PAYMENT_DATE - TO_DATE('06-04-' || TO_CHAR(PTP.REGULAR_PAYMENT_DATE
                                                   ,'YYYY')
                                           ,'DD-MM-YYYY'))
                              ,-1
                              ,-1
                              ,0))
               ,'DD-MM-YYYY')
      INTO C_TY_START
      FROM
        PER_TIME_PERIODS PTP
      WHERE PTP.TIME_PERIOD_ID = P_PAYROLL_PERIOD_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    SELECT
      BALANCE_DIMENSION_ID
    INTO C_YTD_BAL_DIM_ID
    FROM
      PAY_BALANCE_DIMENSIONS
    WHERE DIMENSION_NAME = '_ASG_TD_YTD'
      AND LEGISLATION_CODE = 'GB';
    SELECT
      BALANCE_DIMENSION_ID
    INTO C_PTD_BAL_DIM_ID
    FROM
      PAY_BALANCE_DIMENSIONS
    WHERE DIMENSION_NAME = '_ASG_TRANSFER_PTD'
      AND LEGISLATION_CODE = 'GB';
    SELECT
      BALANCE_DIMENSION_ID
    INTO L_PROC_PTD_DIM
    FROM
      PAY_BALANCE_DIMENSIONS
    WHERE DIMENSION_NAME = '_ASG_PROC_PTD'
      AND LEGISLATION_CODE = 'GB';
    OPEN INPUT_VALUES;
    FETCH INPUT_VALUES
     INTO C_SCON_INPUT_VALUE_ID,C_CAT_INPUT_VALUE_ID,C_NI_ELEMENT_TYPE_ID;
    CLOSE INPUT_VALUES;
    C_GROSS_PAY_PTD_DBID := C_GET_DEF_BAL_ID('Gross Pay'
                                            ,L_PROC_PTD_DIM);
    C_GROSS_PAY_YTD_DBID := C_GET_DEF_BAL_ID('Gross Pay'
                                            ,C_YTD_BAL_DIM_ID);
    C_TAXABLE_PAY_PTD_DBID := C_GET_DEF_BAL_ID('Taxable Pay'
                                              ,C_PTD_BAL_DIM_ID);
    C_TAXABLE_PAY_YTD_DBID := C_GET_DEF_BAL_ID('Taxable Pay'
                                              ,C_YTD_BAL_DIM_ID);
    C_PENSION_PTD_DBID := C_GET_DEF_BAL_ID('Superannuation Total'
                                          ,L_PROC_PTD_DIM);
    C_PENSION_YTD_DBID := C_GET_DEF_BAL_ID('Superannuation Total'
                                          ,C_YTD_BAL_DIM_ID);
    C_PAYE_PTD_DBID := C_GET_DEF_BAL_ID('PAYE'
                                       ,C_PTD_BAL_DIM_ID);
    C_PAYE_YTD_DBID := C_GET_DEF_BAL_ID('PAYE'
                                       ,C_YTD_BAL_DIM_ID);
    C_SSP_PTD_DBID := C_GET_DEF_BAL_ID('SSP Total'
                                      ,C_PTD_BAL_DIM_ID);
    C_SSP_YTD_DBID := C_GET_DEF_BAL_ID('SSP Total'
                                      ,C_YTD_BAL_DIM_ID);
    C_SMP_PTD_DBID := C_GET_DEF_BAL_ID('SMP Total'
                                      ,C_PTD_BAL_DIM_ID);
    C_SMP_YTD_DBID := C_GET_DEF_BAL_ID('SMP Total'
                                      ,C_YTD_BAL_DIM_ID);
    C_SAP_PTD_DBID := C_GET_DEF_BAL_ID('SAP Total'
                                      ,C_PTD_BAL_DIM_ID);
    C_SAP_YTD_DBID := C_GET_DEF_BAL_ID('SAP Total'
                                      ,C_YTD_BAL_DIM_ID);
    C_SPPB_PTD_DBID := C_GET_DEF_BAL_ID('SPP Birth Total'
                                       ,C_PTD_BAL_DIM_ID);
    C_SPPB_YTD_DBID := C_GET_DEF_BAL_ID('SPP Birth Total'
                                       ,C_YTD_BAL_DIM_ID);
    C_SPPA_PTD_DBID := C_GET_DEF_BAL_ID('SPP Adoption Total'
                                       ,C_PTD_BAL_DIM_ID);
    C_SPPA_YTD_DBID := C_GET_DEF_BAL_ID('SPP Adoption Total'
                                       ,C_YTD_BAL_DIM_ID);
    C_STULN_PTD_DBID := C_GET_DEF_BAL_ID('Student Loan'
                                        ,C_PTD_BAL_DIM_ID);
    C_STULN_YTD_DBID := C_GET_DEF_BAL_ID('Student Loan'
                                        ,C_YTD_BAL_DIM_ID);
    C_TAXCR_PTD_DBID := C_GET_DEF_BAL_ID('Tax Credit'
                                        ,C_PTD_BAL_DIM_ID);
    C_TAXCR_YTD_DBID := C_GET_DEF_BAL_ID('Tax Credit'
                                        ,C_YTD_BAL_DIM_ID);
    C_WORKING_TAXCR_PTD_DBID := C_GET_DEF_BAL_ID('Working Tax Credit'
                                                ,C_PTD_BAL_DIM_ID);
    C_WORKING_TAXCR_YTD_DBID := C_GET_DEF_BAL_ID('Working Tax Credit'
                                                ,C_YTD_BAL_DIM_ID);
    C_BUSINESS_GROUP_NAME := RTRIM(SUBSTRB(HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID)
                                          ,1
                                          ,240));
    C_PAYROLL_NAME := HR_REPORTS.GET_PAYROLL_NAME(SYSDATE
                                                 ,P_PAYROLL_ID);
    HR_REPORTS.GET_TIME_PERIOD(P_PAYROLL_PERIOD_ID
                              ,P_PERIOD_NAME
                              ,P_START_DATE
                              ,P_END_DATE);
    C_PAYROLL_PERIOD := P_PERIOD_NAME;
    BEGIN
      SELECT
        CONSOLIDATION_SET_NAME
      INTO C_CONSOLIDATION_SET
      FROM
        PAY_CONSOLIDATION_SETS
      WHERE CONSOLIDATION_SET_ID = P_CONSOLIDATION_SET_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    IF P_SORT = 'EMP' THEN
      P_SORT_ORDER := 'ORDER BY nvl(ppf.order_name,ppf.full_name)';
      C_SORT_ORDER := 'Sort by Employee Name';
    ELSIF P_SORT = 'ASG' THEN
      P_SORT_ORDER := 'ORDER BY paf.assignment_number';
      C_SORT_ORDER := 'Sort by Assignment Number';
    END IF;
    IF P_SUMMARY_ONLY = 'Y' THEN
      C_SUMMARY_ONLY := 'Yes';
    ELSIF P_SUMMARY_ONLY = 'N' THEN
      C_SUMMARY_ONLY := 'No';
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_GET_TPL_DATAFORMULA0030(ASSIGNMENT_ID IN NUMBER
                                    ,REG_PAYMENT_DATE IN DATE
                                    ,END_DATE_P IN DATE) RETURN NUMBER IS
    L_ASSIGNMENT_ID NUMBER := ASSIGNMENT_ID;
    L_REGULAR_PAYMENT_DATE DATE := REG_PAYMENT_DATE;
    L_PAYE_ELEMENT_ID NUMBER;
    L_TAX_CODE_IPV_ID NUMBER;
    L_TAX_BASIS_IPV_ID NUMBER;
    L_PAY_PREVIOUS_IPV_ID NUMBER;
    L_TAX_PREVIOUS_IPV_ID NUMBER;
    L_MAX_RUN_RESULT_ID NUMBER;
    CURSOR CSR_PAYE_ELEMENT IS
      SELECT
        ELEMENT_TYPE_ID
      FROM
        PAY_ELEMENT_TYPES_F
      WHERE ELEMENT_NAME = 'PAYE';
    CURSOR CSR_INPUT_VALUE(P_IPV_NAME IN VARCHAR2) IS
      SELECT
        INPUT_VALUE_ID
      FROM
        PAY_INPUT_VALUES_F
      WHERE ELEMENT_TYPE_ID = L_PAYE_ELEMENT_ID
        AND NAME = P_IPV_NAME;
    CURSOR CSR_RESULT_VALUE(P_IPV_ID IN NUMBER) IS
      SELECT
        RESULT_VALUE
      FROM
        PAY_RUN_RESULT_VALUES
      WHERE RUN_RESULT_ID = L_MAX_RUN_RESULT_ID
        AND INPUT_VALUE_ID = P_IPV_ID;
    CURSOR CSR_MAX_RUN_RESULT IS
      SELECT
        TO_NUMBER(SUBSTR(MAX(LPAD(ASSACT2.ACTION_SEQUENCE
                                 ,15
                                 ,'0') || R2.SOURCE_TYPE || R2.RUN_RESULT_ID)
                        ,17))
      FROM
        PAY_ASSIGNMENT_ACTIONS ASSACT2,
        PAY_PAYROLL_ACTIONS PACT,
        PAY_RUN_RESULTS R2
      WHERE ASSACT2.ASSIGNMENT_ID = L_ASSIGNMENT_ID
        AND R2.ELEMENT_TYPE_ID + 0 = L_PAYE_ELEMENT_ID
        AND R2.ASSIGNMENT_ACTION_ID = ASSACT2.ASSIGNMENT_ACTION_ID
        AND R2.STATUS IN ( 'P' , 'PA' )
        AND PACT.PAYROLL_ACTION_ID = ASSACT2.PAYROLL_ACTION_ID
        AND PACT.ACTION_TYPE IN ( 'Q' , 'R' , 'B' , 'I' )
        AND ASSACT2.ACTION_STATUS = 'C'
        AND PACT.EFFECTIVE_DATE <= END_DATE_P
        AND PACT.EFFECTIVE_DATE >= ( TO_DATE('06-04-' || TO_CHAR(TO_NUMBER(TO_CHAR(L_REGULAR_PAYMENT_DATE
                                       ,'YYYY')) + DECODE(SIGN(L_REGULAR_PAYMENT_DATE - TO_DATE('06-04-' || TO_CHAR(L_REGULAR_PAYMENT_DATE
                                                 ,'YYYY')
                                         ,'DD-MM-YYYY'))
                            ,-1
                            ,-1
                            ,0))
             ,'DD-MM-YYYY') )
        AND NOT EXISTS (
        SELECT
          '1'
        FROM
          PAY_ACTION_INTERLOCKS PAI,
          PAY_ASSIGNMENT_ACTIONS ASSACT3,
          PAY_PAYROLL_ACTIONS PACT3
        WHERE PAI.LOCKED_ACTION_ID = ASSACT2.ASSIGNMENT_ACTION_ID
          AND PAI.LOCKING_ACTION_ID = ASSACT3.ASSIGNMENT_ACTION_ID
          AND PACT3.PAYROLL_ACTION_ID = ASSACT3.PAYROLL_ACTION_ID
          AND PACT3.ACTION_TYPE = 'V'
          AND ASSACT3.ACTION_STATUS = 'C' );
  BEGIN
    C_CURRENT_CAT := HR_GBNIDIR.ELEMENT_ENTRY_VALUE(L_ASSIGNMENT_ID
                                                   ,L_REGULAR_PAYMENT_DATE
                                                   ,'NI'
                                                   ,'Category');
    OPEN CSR_PAYE_ELEMENT;
    FETCH CSR_PAYE_ELEMENT
     INTO L_PAYE_ELEMENT_ID;
    CLOSE CSR_PAYE_ELEMENT;
    OPEN CSR_INPUT_VALUE('Tax Code');
    FETCH CSR_INPUT_VALUE
     INTO L_TAX_CODE_IPV_ID;
    CLOSE CSR_INPUT_VALUE;
    OPEN CSR_INPUT_VALUE('Tax Basis');
    FETCH CSR_INPUT_VALUE
     INTO L_TAX_BASIS_IPV_ID;
    CLOSE CSR_INPUT_VALUE;
    OPEN CSR_INPUT_VALUE('Pay Previous');
    FETCH CSR_INPUT_VALUE
     INTO L_PAY_PREVIOUS_IPV_ID;
    CLOSE CSR_INPUT_VALUE;
    OPEN CSR_INPUT_VALUE('Tax Previous');
    FETCH CSR_INPUT_VALUE
     INTO L_TAX_PREVIOUS_IPV_ID;
    CLOSE CSR_INPUT_VALUE;
    BEGIN
      OPEN CSR_MAX_RUN_RESULT;
      FETCH CSR_MAX_RUN_RESULT
       INTO L_MAX_RUN_RESULT_ID;
      IF CSR_MAX_RUN_RESULT%FOUND THEN
        OPEN CSR_RESULT_VALUE(L_TAX_CODE_IPV_ID);
        FETCH CSR_RESULT_VALUE
         INTO C_TAX_CODE;
        CLOSE CSR_RESULT_VALUE;
        OPEN CSR_RESULT_VALUE(L_TAX_BASIS_IPV_ID);
        FETCH CSR_RESULT_VALUE
         INTO C_BASIS;
        CLOSE CSR_RESULT_VALUE;
        OPEN CSR_RESULT_VALUE(L_PAY_PREVIOUS_IPV_ID);
        FETCH CSR_RESULT_VALUE
         INTO C_PREV_TAXABLE;
        CLOSE CSR_RESULT_VALUE;
        OPEN CSR_RESULT_VALUE(L_TAX_PREVIOUS_IPV_ID);
        FETCH CSR_RESULT_VALUE
         INTO C_PAID;
        CLOSE CSR_RESULT_VALUE;
      ELSE
        C_TAX_CODE := HR_GBNIDIR.ELEMENT_ENTRY_VALUE(L_ASSIGNMENT_ID
                                                    ,L_REGULAR_PAYMENT_DATE
                                                    ,'PAYE Details'
                                                    ,'Tax Code');
        C_BASIS := HR_GBNIDIR.ELEMENT_ENTRY_VALUE(L_ASSIGNMENT_ID
                                                 ,L_REGULAR_PAYMENT_DATE
                                                 ,'PAYE Details'
                                                 ,'Tax Basis');
        C_PREV_TAXABLE := HR_GBNIDIR.ELEMENT_ENTRY_VALUE(L_ASSIGNMENT_ID
                                                        ,L_REGULAR_PAYMENT_DATE
                                                        ,'PAYE Details'
                                                        ,'Pay Previous');
        C_PAID := HR_GBNIDIR.ELEMENT_ENTRY_VALUE(L_ASSIGNMENT_ID
                                                ,L_REGULAR_PAYMENT_DATE
                                                ,'PAYE Details'
                                                ,'Tax Previous');
      END IF;
    END;
    C_PREVIOUS_GROSS_TOT := C_PREVIOUS_GROSS_TOT + NVL(C_PREV_TAXABLE
                               ,0);
    C_PREVIOUS_TAX_TOT := C_PREVIOUS_TAX_TOT + NVL(C_PAID
                             ,0);
    RETURN (C_OUTPUT);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (C_OUTPUT);
  END C_GET_TPL_DATAFORMULA0030;

  FUNCTION C_GET_BALANCESFORMULA(ASG_ACTION_ID IN NUMBER) RETURN NUMBER IS
    L_PERIOD_FLAG VARCHAR2(1) := 'N';
    L_PERIOD_START DATE;
    L_PERIOD_END DATE;
    L_ACTION_EFFECTIVE DATE;
    L_TIME_PERIOD_ID NUMBER;
  BEGIN
    SELECT
      PPA.EFFECTIVE_DATE,
      PPA.TIME_PERIOD_ID
    INTO L_ACTION_EFFECTIVE,L_TIME_PERIOD_ID
    FROM
      PAY_PAYROLL_ACTIONS PPA,
      PAY_ASSIGNMENT_ACTIONS PAA
    WHERE PAA.ASSIGNMENT_ACTION_ID = ASG_ACTION_ID
      AND PPA.PAYROLL_ACTION_ID = PAA.PAYROLL_ACTION_ID;
    SELECT
      PTP.START_DATE,
      PTP.REGULAR_PAYMENT_DATE
    INTO L_PERIOD_START,L_PERIOD_END
    FROM
      PER_TIME_PERIODS PTP
    WHERE PTP.TIME_PERIOD_ID = P_PAYROLL_PERIOD_ID;
    IF (L_TIME_PERIOD_ID <> P_PAYROLL_PERIOD_ID) THEN
      L_PERIOD_FLAG := 'Y';
    END IF;
    C_GROSS_PAY_PTD_VALUE := 0;
    C_GROSS_PAY_YTD_VALUE := 0;
    C_GROSS_PAY_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                  ,C_GROSS_PAY_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_GROSS_PAY_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                    ,C_GROSS_PAY_PTD_DBID);
    END IF;
    C_GROSS_PAY_PTD_TOT := C_GROSS_PAY_PTD_TOT + C_GROSS_PAY_PTD_VALUE;
    C_GROSS_PAY_YTD_TOT := C_GROSS_PAY_YTD_TOT + C_GROSS_PAY_YTD_VALUE;
    C_TAXABLE_PAY_PTD_VALUE := 0;
    C_TAXABLE_PAY_YTD_VALUE := 0;
    C_TAXABLE_PAY_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                    ,C_TAXABLE_PAY_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_TAXABLE_PAY_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                      ,C_TAXABLE_PAY_PTD_DBID);
    END IF;
    C_TAXABLE_PAY_PTD_TOT := C_TAXABLE_PAY_PTD_TOT + C_TAXABLE_PAY_PTD_VALUE;
    C_TAXABLE_PAY_YTD_TOT := C_TAXABLE_PAY_YTD_TOT + C_TAXABLE_PAY_YTD_VALUE;
    C_PENSION_PTD_VALUE := 0;
    C_PENSION_YTD_VALUE := 0;
    C_PENSION_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                ,C_PENSION_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_PENSION_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                  ,C_PENSION_PTD_DBID);
    END IF;
    C_PAYE_PTD_VALUE := 0;
    C_PAYE_YTD_VALUE := 0;
    C_PAYE_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                             ,C_PAYE_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_PAYE_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                               ,C_PAYE_PTD_DBID);
    END IF;
    C_PAYE_PTD_TOT := C_PAYE_PTD_TOT + C_PAYE_PTD_VALUE;
    C_PAYE_YTD_TOT := C_PAYE_YTD_TOT + C_PAYE_YTD_VALUE;
    C_SSP_PTD_VALUE := 0;
    C_SSP_YTD_VALUE := 0;
    C_SSP_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                            ,C_SSP_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_SSP_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                              ,C_SSP_PTD_DBID);
    END IF;
    C_SSP_PTD_TOT := C_SSP_PTD_TOT + C_SSP_PTD_VALUE;
    C_SSP_YTD_TOT := C_SSP_YTD_TOT + C_SSP_YTD_VALUE;
    C_SMP_PTD_VALUE := 0;
    C_SMP_YTD_VALUE := 0;
    C_SMP_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                            ,C_SMP_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_SMP_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                              ,C_SMP_PTD_DBID);
    END IF;
    C_SMP_PTD_TOT := C_SMP_PTD_TOT + C_SMP_PTD_VALUE;
    C_SMP_YTD_TOT := C_SMP_YTD_TOT + C_SMP_YTD_VALUE;
    C_SAP_PTD_VALUE := 0;
    C_SAP_YTD_VALUE := 0;
    C_SAP_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                            ,C_SAP_YTD_DBID);
    C_SAP_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                            ,C_SAP_PTD_DBID);
    C_SAP_PTD_TOT := C_SAP_PTD_TOT + C_SAP_PTD_VALUE;
    C_SAP_YTD_TOT := C_SAP_YTD_TOT + C_SAP_YTD_VALUE;
    C_SPPA_PTD_VALUE := 0;
    C_SPPA_YTD_VALUE := 0;
    C_SPPA_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                             ,C_SPPA_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_SPPA_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                               ,C_SPPA_PTD_DBID);
    END IF;
    C_SPPA_PTD_TOT := C_SPPA_PTD_TOT + C_SPPA_PTD_VALUE;
    C_SPPA_YTD_TOT := C_SPPA_YTD_TOT + C_SPPA_YTD_VALUE;
    C_SPPB_PTD_VALUE := 0;
    C_SPPB_YTD_VALUE := 0;
    C_SPPB_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                             ,C_SPPB_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_SPPB_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                               ,C_SPPB_PTD_DBID);
    END IF;
    C_SPPB_PTD_TOT := C_SPPB_PTD_TOT + C_SPPB_PTD_VALUE;
    C_SPPB_YTD_TOT := C_SPPB_YTD_TOT + C_SPPB_YTD_VALUE;
    C_STULN_PTD_VALUE := 0;
    C_STULN_YTD_VALUE := 0;
    C_STULN_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                              ,C_STULN_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_STULN_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                ,C_STULN_PTD_DBID);
    END IF;
    C_STULN_PTD_TOT := C_STULN_PTD_TOT + C_STULN_PTD_VALUE;
    C_STULN_YTD_TOT := C_STULN_YTD_TOT + C_STULN_YTD_VALUE;
    C_WORKING_TAXCR_PTD_VALUE := 0;
    C_WORKING_TAXCR_YTD_VALUE := 0;
    C_WORKING_TAXCR_YTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                      ,C_WORKING_TAXCR_YTD_DBID);
    IF L_PERIOD_FLAG = 'N' THEN
      C_WORKING_TAXCR_PTD_VALUE := HR_DIRBAL.GET_BALANCE(ASG_ACTION_ID
                                                        ,C_WORKING_TAXCR_PTD_DBID);
    END IF;
    RETURN (0);
  END C_GET_BALANCESFORMULA;

  FUNCTION C_GET_DEF_BAL_ID(P_BALANCE_NAME IN VARCHAR2
                           ,P_DIMENSION_ID IN NUMBER) RETURN NUMBER IS
    T_DEF_BAL_ID NUMBER := 0;
  BEGIN
    SELECT
      PDB.DEFINED_BALANCE_ID
    INTO T_DEF_BAL_ID
    FROM
      PAY_DEFINED_BALANCES PDB,
      PAY_BALANCE_TYPES PBT
    WHERE PBT.BALANCE_TYPE_ID = PDB.BALANCE_TYPE_ID
      AND PBT.BALANCE_NAME = P_BALANCE_NAME
      AND PBT.LEGISLATION_CODE = 'GB'
      AND PBT.BUSINESS_GROUP_ID is null
      AND PDB.BALANCE_DIMENSION_ID = P_DIMENSION_ID
      AND PDB.BUSINESS_GROUP_ID is null
      AND PDB.LEGISLATION_CODE = 'GB';
    RETURN (T_DEF_BAL_ID);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END C_GET_DEF_BAL_ID;

  FUNCTION C_CALCULATE_TOTALSFORMULA(CAT_CODE IN VARCHAR2
                                    ,DIM IN VARCHAR2
                                    ,EMPLOYER IN NUMBER
                                    ,ABLE IN NUMBER
                                    ,EMPLOYEE IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CAT_CODE in ('C','S') THEN
      IF DIM = 'PTD' THEN
        C_NI_ERS_PTD_TOT := C_NI_ERS_PTD_TOT + EMPLOYER;
      ELSE
        C_NI_ERS_YTD_TOT := C_NI_ERS_YTD_TOT + EMPLOYER;
      END IF;
    ELSE
      IF DIM = 'PTD' THEN
        C_NI_EARNINGS_PTD_TOT := C_NI_EARNINGS_PTD_TOT + ABLE;
        C_NI_EES_PTD_TOT := C_NI_EES_PTD_TOT + EMPLOYEE;
        C_NI_ERS_PTD_TOT := C_NI_ERS_PTD_TOT + EMPLOYER;
      ELSE
        C_NI_EARNINGS_YTD_TOT := C_NI_EARNINGS_YTD_TOT + ABLE;
        C_NI_EES_YTD_TOT := C_NI_EES_YTD_TOT + EMPLOYEE;
        C_NI_ERS_YTD_TOT := C_NI_ERS_YTD_TOT + EMPLOYER;
      END IF;
    END IF;
    C_NET_INCOME_TAX := 0;
    C_GROSS_NIC := 0;
    C_NIC_REBATE := 0;
    C_NET_NI := 0;
    C_TOTAL_AMOUNT_DUE := 0;
    C_NET_INCOME_TAX := C_PAYE_PTD_TOT + C_STULN_PTD_TOT - C_TAXCR_PTD_TOT;
    C_GROSS_NIC := C_NI_EES_PTD_TOT + C_NI_ERS_PTD_TOT;
    C_NIC_REBATE := C_EES_REB_PTD_TOT + C_ERS_REB_PTD_TOT;
    C_NET_NI := C_GROSS_NIC - C_NIC_REBATE;
    C_TOTAL_AMOUNT_DUE := C_NET_INCOME_TAX + C_NET_NI;
    RETURN (0);
  END C_CALCULATE_TOTALSFORMULA;

  FUNCTION C_ESTABLISH_PERIODFORMULA RETURN NUMBER IS
    V_REG_PAY_DATE DATE;
    V_NO_PER_FISC NUMBER;
  BEGIN
    SELECT
      BPTP.REGULAR_PAYMENT_DATE,
      BPTPT.NUMBER_PER_FISCAL_YEAR
    INTO V_REG_PAY_DATE,V_NO_PER_FISC
    FROM
      PER_TIME_PERIODS BPTP,
      PER_TIME_PERIOD_TYPES BPTPT
    WHERE BPTP.TIME_PERIOD_ID = P_PAYROLL_PERIOD_ID
      AND BPTP.PERIOD_TYPE = BPTPT.PERIOD_TYPE;
    C_PERIOD_DATE := HR_GBBAL.SPAN_START(V_REG_PAY_DATE
                                        ,V_NO_PER_FISC
                                        ,'06-04');
    RETURN 0;
  END C_ESTABLISH_PERIODFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_CONSOLIDATION_SET_ID IS NOT NULL THEN
      P_CONSOLIDATION_SET_WHERE := ' and pact.consolidation_set_id = :P_CONSOLIDATION_SET_ID ';
      P_REVERSAL_CONSOLIDATION_SET := ' and pact2.consolidation_set_id = :P_CONSOLIDATION_SET_ID ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_TAX_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TAX_CODE;
  END C_TAX_CODE_P;

  FUNCTION C_BASIS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASIS;
  END C_BASIS_P;

  FUNCTION C_PREV_TAXABLE_P RETURN NUMBER IS
  BEGIN
    RETURN C_PREV_TAXABLE;
  END C_PREV_TAXABLE_P;

  FUNCTION C_PAID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAID;
  END C_PAID_P;

  FUNCTION C_CURRENT_CAT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CURRENT_CAT;
  END C_CURRENT_CAT_P;

  FUNCTION C_OUTPUT_P RETURN NUMBER IS
  BEGIN
    RETURN C_OUTPUT;
  END C_OUTPUT_P;

  FUNCTION C_GROSS_PAY_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_PAY_PTD_VALUE;
  END C_GROSS_PAY_PTD_VALUE_P;

  FUNCTION C_GROSS_PAY_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_PAY_YTD_VALUE;
  END C_GROSS_PAY_YTD_VALUE_P;

  FUNCTION C_TAXABLE_PAY_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXABLE_PAY_PTD_VALUE;
  END C_TAXABLE_PAY_PTD_VALUE_P;

  FUNCTION C_TAXABLE_PAY_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXABLE_PAY_YTD_VALUE;
  END C_TAXABLE_PAY_YTD_VALUE_P;

  FUNCTION C_SPPA_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPA_YTD_VALUE;
  END C_SPPA_YTD_VALUE_P;

  FUNCTION C_PENSION_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_PENSION_PTD_VALUE;
  END C_PENSION_PTD_VALUE_P;

  FUNCTION C_PENSION_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_PENSION_YTD_VALUE;
  END C_PENSION_YTD_VALUE_P;

  FUNCTION C_PAYE_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAYE_PTD_VALUE;
  END C_PAYE_PTD_VALUE_P;

  FUNCTION C_PAYE_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAYE_YTD_VALUE;
  END C_PAYE_YTD_VALUE_P;

  FUNCTION C_SPPA_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPA_PTD_VALUE;
  END C_SPPA_PTD_VALUE_P;

  FUNCTION C_SSP_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SSP_PTD_VALUE;
  END C_SSP_PTD_VALUE_P;

  FUNCTION C_SSP_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SSP_YTD_VALUE;
  END C_SSP_YTD_VALUE_P;

  FUNCTION C_SMP_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SMP_PTD_VALUE;
  END C_SMP_PTD_VALUE_P;

  FUNCTION C_SPPB_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPB_YTD_VALUE;
  END C_SPPB_YTD_VALUE_P;

  FUNCTION C_SMP_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SMP_YTD_VALUE;
  END C_SMP_YTD_VALUE_P;

  FUNCTION C_STULN_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_STULN_PTD_VALUE;
  END C_STULN_PTD_VALUE_P;

  FUNCTION C_WORKING_TAXCR_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_WORKING_TAXCR_YTD_VALUE;
  END C_WORKING_TAXCR_YTD_VALUE_P;

  FUNCTION C_SPPB_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPB_PTD_VALUE;
  END C_SPPB_PTD_VALUE_P;

  FUNCTION C_STULN_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_STULN_YTD_VALUE;
  END C_STULN_YTD_VALUE_P;

  FUNCTION C_WORKING_TAXCR_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_WORKING_TAXCR_PTD_VALUE;
  END C_WORKING_TAXCR_PTD_VALUE_P;

  FUNCTION C_SAP_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SAP_PTD_VALUE;
  END C_SAP_PTD_VALUE_P;

  FUNCTION C_TAXCR_PTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXCR_PTD_VALUE;
  END C_TAXCR_PTD_VALUE_P;

  FUNCTION C_SAP_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_SAP_YTD_VALUE;
  END C_SAP_YTD_VALUE_P;

  FUNCTION C_TAXCR_YTD_VALUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXCR_YTD_VALUE;
  END C_TAXCR_YTD_VALUE_P;

  FUNCTION C_NI_TOTAL_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_TOTAL;
  END C_NI_TOTAL_P;

  FUNCTION C_YTD_BAL_DIM_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_YTD_BAL_DIM_ID;
  END C_YTD_BAL_DIM_ID_P;

  FUNCTION C_PTD_BAL_DIM_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PTD_BAL_DIM_ID;
  END C_PTD_BAL_DIM_ID_P;

  FUNCTION C_SCON_INPUT_VALUE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SCON_INPUT_VALUE_ID;
  END C_SCON_INPUT_VALUE_ID_P;

  FUNCTION C_NI_ELEMENT_TYPE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_ELEMENT_TYPE_ID;
  END C_NI_ELEMENT_TYPE_ID_P;

  FUNCTION C_GROSS_PAY_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_PAY_PTD_DBID;
  END C_GROSS_PAY_PTD_DBID_P;

  FUNCTION C_GROSS_PAY_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_PAY_YTD_DBID;
  END C_GROSS_PAY_YTD_DBID_P;

  FUNCTION C_GROSS_PAY_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_PAY_PTD_TOT;
  END C_GROSS_PAY_PTD_TOT_P;

  FUNCTION C_GROSS_PAY_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_PAY_YTD_TOT;
  END C_GROSS_PAY_YTD_TOT_P;

  FUNCTION C_NI_EARNINGS_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_EARNINGS_PTD_TOT;
  END C_NI_EARNINGS_PTD_TOT_P;

  FUNCTION C_NI_EARNINGS_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_EARNINGS_YTD_TOT;
  END C_NI_EARNINGS_YTD_TOT_P;

  FUNCTION C_TAXABLE_PAY_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXABLE_PAY_PTD_DBID;
  END C_TAXABLE_PAY_PTD_DBID_P;

  FUNCTION C_TAXABLE_PAY_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXABLE_PAY_YTD_DBID;
  END C_TAXABLE_PAY_YTD_DBID_P;

  FUNCTION C_TAXABLE_PAY_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXABLE_PAY_PTD_TOT;
  END C_TAXABLE_PAY_PTD_TOT_P;

  FUNCTION C_TAXABLE_PAY_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXABLE_PAY_YTD_TOT;
  END C_TAXABLE_PAY_YTD_TOT_P;

  FUNCTION C_PENSION_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PENSION_PTD_DBID;
  END C_PENSION_PTD_DBID_P;

  FUNCTION C_PENSION_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PENSION_YTD_DBID;
  END C_PENSION_YTD_DBID_P;

  FUNCTION C_PENSION_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PENSION_PTD_TOT;
  END C_PENSION_PTD_TOT_P;

  FUNCTION C_PENSION_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PENSION_YTD_TOT;
  END C_PENSION_YTD_TOT_P;

  FUNCTION C_PAYE_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAYE_PTD_DBID;
  END C_PAYE_PTD_DBID_P;

  FUNCTION C_PAYE_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAYE_YTD_DBID;
  END C_PAYE_YTD_DBID_P;

  FUNCTION C_PAYE_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAYE_PTD_TOT;
  END C_PAYE_PTD_TOT_P;

  FUNCTION C_PAYE_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PAYE_YTD_TOT;
  END C_PAYE_YTD_TOT_P;

  FUNCTION C_SSP_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SSP_YTD_DBID;
  END C_SSP_YTD_DBID_P;

  FUNCTION C_SSP_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SSP_PTD_DBID;
  END C_SSP_PTD_DBID_P;

  FUNCTION C_SSP_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SSP_PTD_TOT;
  END C_SSP_PTD_TOT_P;

  FUNCTION C_SSP_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SSP_YTD_TOT;
  END C_SSP_YTD_TOT_P;

  FUNCTION C_SMP_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SMP_PTD_DBID;
  END C_SMP_PTD_DBID_P;

  FUNCTION C_SMP_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SMP_YTD_DBID;
  END C_SMP_YTD_DBID_P;

  FUNCTION C_SMP_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SMP_PTD_TOT;
  END C_SMP_PTD_TOT_P;

  FUNCTION C_SMP_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SMP_YTD_TOT;
  END C_SMP_YTD_TOT_P;

  FUNCTION C_NI_EES_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_EES_PTD_TOT;
  END C_NI_EES_PTD_TOT_P;

  FUNCTION C_NI_EES_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_EES_YTD_TOT;
  END C_NI_EES_YTD_TOT_P;

  FUNCTION C_NI_ERS_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_ERS_PTD_TOT;
  END C_NI_ERS_PTD_TOT_P;

  FUNCTION C_NI_ERS_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_NI_ERS_YTD_TOT;
  END C_NI_ERS_YTD_TOT_P;

  FUNCTION C_PREVIOUS_GROSS_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PREVIOUS_GROSS_TOT;
  END C_PREVIOUS_GROSS_TOT_P;

  FUNCTION C_PREVIOUS_TAX_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_PREVIOUS_TAX_TOT;
  END C_PREVIOUS_TAX_TOT_P;

  FUNCTION C_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BUSINESS_GROUP_NAME;
  END C_BUSINESS_GROUP_NAME_P;

  FUNCTION C_PAYROLL_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PAYROLL_NAME;
  END C_PAYROLL_NAME_P;

  FUNCTION C_PAYROLL_PERIOD_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PAYROLL_PERIOD;
  END C_PAYROLL_PERIOD_P;

  FUNCTION C_CONSOLIDATION_SET_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CONSOLIDATION_SET;
  END C_CONSOLIDATION_SET_P;

  FUNCTION C_SORT_ORDER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SORT_ORDER;
  END C_SORT_ORDER_P;

  FUNCTION C_PERIOD_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_PERIOD_DATE;
  END C_PERIOD_DATE_P;

  FUNCTION C_SUMMARY_ONLY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SUMMARY_ONLY;
  END C_SUMMARY_ONLY_P;

  FUNCTION C_STULN_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_STULN_PTD_DBID;
  END C_STULN_PTD_DBID_P;

  FUNCTION C_STULN_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_STULN_YTD_DBID;
  END C_STULN_YTD_DBID_P;

  FUNCTION C_STULN_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_STULN_PTD_TOT;
  END C_STULN_PTD_TOT_P;

  FUNCTION C_STULN_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_STULN_YTD_TOT;
  END C_STULN_YTD_TOT_P;

  FUNCTION C_EES_REB_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_EES_REB_PTD_TOT;
  END C_EES_REB_PTD_TOT_P;

  FUNCTION C_EES_REB_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_EES_REB_YTD_TOT;
  END C_EES_REB_YTD_TOT_P;

  FUNCTION C_TAXCR_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXCR_PTD_DBID;
  END C_TAXCR_PTD_DBID_P;

  FUNCTION C_TAXCR_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXCR_YTD_DBID;
  END C_TAXCR_YTD_DBID_P;

  FUNCTION C_TAXCR_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXCR_PTD_TOT;
  END C_TAXCR_PTD_TOT_P;

  FUNCTION C_TAXCR_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_TAXCR_YTD_TOT;
  END C_TAXCR_YTD_TOT_P;

  FUNCTION C_ERS_REB_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_ERS_REB_PTD_TOT;
  END C_ERS_REB_PTD_TOT_P;

  FUNCTION C_ERS_REB_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_ERS_REB_YTD_TOT;
  END C_ERS_REB_YTD_TOT_P;

  FUNCTION C_NET_INCOME_TAX_P RETURN NUMBER IS
  BEGIN
    RETURN C_NET_INCOME_TAX;
  END C_NET_INCOME_TAX_P;

  FUNCTION C_GROSS_NIC_P RETURN NUMBER IS
  BEGIN
    RETURN C_GROSS_NIC;
  END C_GROSS_NIC_P;

  FUNCTION C_NIC_REBATE_P RETURN NUMBER IS
  BEGIN
    RETURN C_NIC_REBATE;
  END C_NIC_REBATE_P;

  FUNCTION C_NET_NI_P RETURN NUMBER IS
  BEGIN
    RETURN C_NET_NI;
  END C_NET_NI_P;

  FUNCTION C_TOTAL_AMOUNT_DUE_P RETURN NUMBER IS
  BEGIN
    RETURN C_TOTAL_AMOUNT_DUE;
  END C_TOTAL_AMOUNT_DUE_P;

  FUNCTION C_SAP_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SAP_PTD_DBID;
  END C_SAP_PTD_DBID_P;

  FUNCTION C_SAP_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SAP_PTD_TOT;
  END C_SAP_PTD_TOT_P;

  FUNCTION C_SAP_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SAP_YTD_DBID;
  END C_SAP_YTD_DBID_P;

  FUNCTION C_SAP_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SAP_YTD_TOT;
  END C_SAP_YTD_TOT_P;

  FUNCTION C_SPPB_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPB_PTD_DBID;
  END C_SPPB_PTD_DBID_P;

  FUNCTION C_SPPB_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPB_PTD_TOT;
  END C_SPPB_PTD_TOT_P;

  FUNCTION C_SPPB_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPB_YTD_DBID;
  END C_SPPB_YTD_DBID_P;

  FUNCTION C_SPPB_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPB_YTD_TOT;
  END C_SPPB_YTD_TOT_P;

  FUNCTION C_SPPA_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPA_PTD_DBID;
  END C_SPPA_PTD_DBID_P;

  FUNCTION C_SPPA_PTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPA_PTD_TOT;
  END C_SPPA_PTD_TOT_P;

  FUNCTION C_SPPA_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPA_YTD_DBID;
  END C_SPPA_YTD_DBID_P;

  FUNCTION C_SPPA_YTD_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN C_SPPA_YTD_TOT;
  END C_SPPA_YTD_TOT_P;

  FUNCTION C_WORKING_TAXCR_PTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_WORKING_TAXCR_PTD_DBID;
  END C_WORKING_TAXCR_PTD_DBID_P;

  FUNCTION C_WORKING_TAXCR_YTD_DBID_P RETURN NUMBER IS
  BEGIN
    RETURN C_WORKING_TAXCR_YTD_DBID;
  END C_WORKING_TAXCR_YTD_DBID_P;

  FUNCTION C_CAT_INPUT_VALUE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CAT_INPUT_VALUE_ID;
  END C_CAT_INPUT_VALUE_ID_P;

  FUNCTION C_TY_START_P RETURN DATE IS
  BEGIN
    RETURN C_TY_START;
  END C_TY_START_P;

END PAY_PAYGBTPL_XMLP_PKG;

/
