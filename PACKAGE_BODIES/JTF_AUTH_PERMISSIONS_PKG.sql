--------------------------------------------------------
--  DDL for Package Body JTF_AUTH_PERMISSIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JTF_AUTH_PERMISSIONS_PKG" as
/* $Header: JTFSEAPB.pls 115.7 2002/06/11 22:06:16 sfazil ship $ */
procedure INSERT_ROW (
  X_JTF_AUTH_PERMISSION_ID in NUMBER,
  X_PERMISSION_DESC_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PERMISSION_NAME in VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_PERMISSION_CLASS_NAME in VARCHAR2,
  X_OWNERABLE_FLAG in NUMBER,
  X_IS_DAC_FLAG in NUMBER,
  X_MAINTENANCE_MODE_FLAG in NUMBER,
  X_PERMISSION_DESC in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from JTF_AUTH_PERMISSIONS_B
    where JTF_AUTH_PERMISSION_ID = X_JTF_AUTH_PERMISSION_ID
    ;
begin
  insert into JTF_AUTH_PERMISSIONS_B (
    JTF_AUTH_PERMISSION_ID,
    OBJECT_VERSION_NUMBER,
    PERMISSION_NAME,
    APPLICATION_ID,
    PERMISSION_CLASS_NAME,
    OWNERABLE_FLAG,
    PERMISSION_DESC_ID,
    IS_DAC_FLAG,
    MAINTENANCE_MODE_FLAG,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_JTF_AUTH_PERMISSION_ID,
    X_OBJECT_VERSION_NUMBER,
    X_PERMISSION_NAME,
    X_APPLICATION_ID,
    X_PERMISSION_CLASS_NAME,
    X_OWNERABLE_FLAG,
    X_PERMISSION_DESC_ID,
    X_IS_DAC_FLAG,
    X_MAINTENANCE_MODE_FLAG,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into JTF_AUTH_PERMISSIONS_TL (
    PERMISSION_DESC_ID,
    PERMISSION_DESC,
    DESCRIPTION,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_JTF_AUTH_PERMISSION_ID,
    X_PERMISSION_DESC,
    X_DESCRIPTION,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from JTF_AUTH_PERMISSIONS_TL T
    where T.PERMISSION_DESC_ID = X_JTF_AUTH_PERMISSION_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_JTF_AUTH_PERMISSION_ID in NUMBER,
  X_PERMISSION_DESC_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PERMISSION_NAME in VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_PERMISSION_CLASS_NAME in VARCHAR2,
  X_OWNERABLE_FLAG in NUMBER,
  X_IS_DAC_FLAG in NUMBER,
  X_MAINTENANCE_MODE_FLAG in NUMBER,
  X_PERMISSION_DESC in VARCHAR2,
  X_DESCRIPTION in VARCHAR2
) is
  cursor c is select
      PERMISSION_DESC_ID,
      OBJECT_VERSION_NUMBER,
      PERMISSION_NAME,
      APPLICATION_ID,
      PERMISSION_CLASS_NAME,
      OWNERABLE_FLAG,
      IS_DAC_FLAG,
      MAINTENANCE_MODE_FLAG
    from JTF_AUTH_PERMISSIONS_B
    where JTF_AUTH_PERMISSION_ID = X_JTF_AUTH_PERMISSION_ID
    for update of JTF_AUTH_PERMISSION_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      PERMISSION_DESC,
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from JTF_AUTH_PERMISSIONS_TL
    where PERMISSION_DESC_ID = X_JTF_AUTH_PERMISSION_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of PERMISSION_DESC_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (
       ((recinfo.PERMISSION_DESC_ID = X_PERMISSION_DESC_ID)
	   OR ((recinfo.PERMISSION_DESC_ID is null) AND (X_PERMISSION_DESC_ID is null)))
      AND (recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
      AND (recinfo.PERMISSION_NAME = X_PERMISSION_NAME)
      AND (recinfo.APPLICATION_ID = X_APPLICATION_ID)
      AND ((recinfo.PERMISSION_CLASS_NAME = X_PERMISSION_CLASS_NAME)
           OR ((recinfo.PERMISSION_CLASS_NAME is null) AND (X_PERMISSION_CLASS_NAME is null)))
      AND (recinfo.OWNERABLE_FLAG = X_OWNERABLE_FLAG)
      AND (recinfo.MAINTENANCE_MODE_FLAG = X_MAINTENANCE_MODE_FLAG)
      AND ((recinfo.IS_DAC_FLAG = X_IS_DAC_FLAG)
           OR ((recinfo.IS_DAC_FLAG is null) AND (X_IS_DAC_FLAG is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.PERMISSION_DESC = X_PERMISSION_DESC)
               OR ((tlinfo.PERMISSION_DESC is null) AND (X_PERMISSION_DESC is null)))
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_JTF_AUTH_PERMISSION_ID in NUMBER,
  X_PERMISSION_DESC_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PERMISSION_NAME in VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_PERMISSION_CLASS_NAME in VARCHAR2,
  X_OWNERABLE_FLAG in NUMBER,
  X_IS_DAC_FLAG in NUMBER,
  X_MAINTENANCE_MODE_FLAG in NUMBER,
  X_PERMISSION_DESC in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update JTF_AUTH_PERMISSIONS_B set
    PERMISSION_DESC_ID = X_PERMISSION_DESC_ID,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    PERMISSION_NAME = X_PERMISSION_NAME,
    APPLICATION_ID = X_APPLICATION_ID,
    PERMISSION_CLASS_NAME = X_PERMISSION_CLASS_NAME,
    OWNERABLE_FLAG = X_OWNERABLE_FLAG,
    IS_DAC_FLAG = X_IS_DAC_FLAG,
    MAINTENANCE_MODE_FLAG = X_MAINTENANCE_MODE_FLAG,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where JTF_AUTH_PERMISSION_ID = X_JTF_AUTH_PERMISSION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update JTF_AUTH_PERMISSIONS_TL set
    PERMISSION_DESC = X_PERMISSION_DESC,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where PERMISSION_DESC_ID = X_JTF_AUTH_PERMISSION_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_JTF_AUTH_PERMISSION_ID in NUMBER
) is
begin
  delete from JTF_AUTH_PERMISSIONS_TL
  where PERMISSION_DESC_ID = X_JTF_AUTH_PERMISSION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from JTF_AUTH_PERMISSIONS_B
  where JTF_AUTH_PERMISSION_ID = X_JTF_AUTH_PERMISSION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from JTF_AUTH_PERMISSIONS_TL T
  where not exists
    (select NULL
    from JTF_AUTH_PERMISSIONS_B B
    where B.JTF_AUTH_PERMISSION_ID = T.PERMISSION_DESC_ID
    );

  update JTF_AUTH_PERMISSIONS_TL T set (
      PERMISSION_DESC,
      DESCRIPTION
    ) = (select
      B.PERMISSION_DESC,
      B.DESCRIPTION
    from JTF_AUTH_PERMISSIONS_TL B
    where B.PERMISSION_DESC_ID = T.PERMISSION_DESC_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.PERMISSION_DESC_ID,
      T.LANGUAGE
  ) in (select
      SUBT.PERMISSION_DESC_ID,
      SUBT.LANGUAGE
    from JTF_AUTH_PERMISSIONS_TL SUBB, JTF_AUTH_PERMISSIONS_TL SUBT
    where SUBB.PERMISSION_DESC_ID = SUBT.PERMISSION_DESC_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.PERMISSION_DESC <> SUBT.PERMISSION_DESC
      or (SUBB.PERMISSION_DESC is null and SUBT.PERMISSION_DESC is not null)
      or (SUBB.PERMISSION_DESC is not null and SUBT.PERMISSION_DESC is null)
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into JTF_AUTH_PERMISSIONS_TL (
    PERMISSION_DESC_ID,
    PERMISSION_DESC,
    DESCRIPTION,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.PERMISSION_DESC_ID,
    B.PERMISSION_DESC,
    B.DESCRIPTION,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from JTF_AUTH_PERMISSIONS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from JTF_AUTH_PERMISSIONS_TL T
    where T.PERMISSION_DESC_ID = B.PERMISSION_DESC_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

-- NEW DEVELOPER ADDED PROCEDURES

procedure TRANSLATE_ROW (
  X_JTF_AUTH_PERMISSION_ID in NUMBER, -- key field
  X_PERMISSION_DESC in VARCHAR2, -- translated field
  X_DESCRIPTION in VARCHAR2, -- translated field
  X_OWNER in VARCHAR2 -- owner fields
) is

begin
	update JTF_AUTH_PERMISSIONS_TL set
            PERMISSION_DESC     = x_PERMISSION_DESC,
	    DESCRIPTION		= x_DESCRIPTION,
            LAST_UPDATE_DATE    = sysdate,
            LAST_UPDATED_BY     = decode(x_owner, 'SEED', 1, 0),
            LAST_UPDATE_LOGIN   = 0,
            SOURCE_LANG         = userenv('LANG')
        where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
          and PERMISSION_DESC_ID = X_JTF_AUTH_PERMISSION_ID;
end TRANSLATE_ROW;


procedure LOAD_ROW (
  X_JTF_AUTH_PERMISSION_ID in NUMBER, -- key fields
  X_PERMISSION_DESC_ID in NUMBER, -- data fields
  X_OBJECT_VERSION_NUMBER in NUMBER, -- data fields
  X_PERMISSION_NAME in VARCHAR2, -- data fields
  X_APPLICATION_ID in NUMBER, -- data fields
  X_PERMISSION_CLASS_NAME in VARCHAR2, -- data fields
  X_OWNERABLE_FLAG in NUMBER, -- data fields
  X_IS_DAC_FLAG in NUMBER, -- data fields
  X_MAINTENANCE_MODE_FLAG in NUMBER, -- data fields
  X_PERMISSION_DESC in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OWNER in VARCHAR2 -- owner fields
) is

l_rowid  VARCHAR2(64);
l_user_id NUMBER := 0;

begin
        if(x_owner = 'SEED') then
                l_user_id := 1;
        end if;

      -- Update row if present
      JTF_AUTH_PERMISSIONS_PKG.UPDATE_ROW (
        X_JTF_AUTH_PERMISSION_ID => X_JTF_AUTH_PERMISSION_ID,
        X_PERMISSION_DESC_ID    => X_PERMISSION_DESC_ID,
        X_OBJECT_VERSION_NUMBER => X_OBJECT_VERSION_NUMBER,
	X_PERMISSION_NAME	=> X_PERMISSION_NAME,
	X_APPLICATION_ID	=> X_APPLICATION_ID,
	X_PERMISSION_CLASS_NAME => X_PERMISSION_CLASS_NAME,
	X_OWNERABLE_FLAG	=> X_OWNERABLE_FLAG,
	X_IS_DAC_FLAG		=> X_IS_DAC_FLAG,
        X_MAINTENANCE_MODE_FLAG => X_MAINTENANCE_MODE_FLAG,
	X_PERMISSION_DESC	=> X_PERMISSION_DESC,
	X_DESCRIPTION		=> X_DESCRIPTION,
        X_LAST_UPDATE_DATE      => sysdate,
        X_LAST_UPDATED_BY       => l_user_id,
        X_LAST_UPDATE_LOGIN     => 0 );
   exception
   when NO_DATA_FOUND then
      -- Insert a row
      JTF_AUTH_PERMISSIONS_PKG.INSERT_ROW (
--      X_ROWID                 => l_rowid,
        X_JTF_AUTH_PERMISSION_ID => X_JTF_AUTH_PERMISSION_ID,
        X_PERMISSION_DESC_ID    => X_PERMISSION_DESC_ID,
        X_OBJECT_VERSION_NUMBER => X_OBJECT_VERSION_NUMBER,
	X_PERMISSION_NAME	=> X_PERMISSION_NAME,
	X_APPLICATION_ID	=> X_APPLICATION_ID,
	X_PERMISSION_CLASS_NAME => X_PERMISSION_CLASS_NAME,
	X_OWNERABLE_FLAG	=> X_OWNERABLE_FLAG,
	X_IS_DAC_FLAG		=> X_IS_DAC_FLAG,
        X_MAINTENANCE_MODE_FLAG => X_MAINTENANCE_MODE_FLAG,
	X_PERMISSION_DESC	=> X_PERMISSION_DESC,
	X_DESCRIPTION		=> X_DESCRIPTION,
        X_CREATION_DATE         => sysdate,
        X_CREATED_BY            => l_user_id,
        X_LAST_UPDATE_DATE      => sysdate,
        X_LAST_UPDATED_BY       => l_user_id,
        X_LAST_UPDATE_LOGIN     => 0 );

end LOAD_ROW;

end JTF_AUTH_PERMISSIONS_PKG;

/
