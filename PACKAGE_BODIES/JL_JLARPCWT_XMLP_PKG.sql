--------------------------------------------------------
--  DDL for Package Body JL_JLARPCWT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLARPCWT_XMLP_PKG" AS
/* $Header: JLARPCWTB.pls 120.1 2007/12/25 16:33:36 dwkrishn noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      ORG_ID NUMBER;
      V_PROFILE_COUNTRY_CODE VARCHAR2(10);
    BEGIN
      BEGIN
        P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
        /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
        IF (P_DEBUG_SWITCH = 'Y') THEN
          /*SRW.MESSAGE('1'
                     ,'After SRWINIT')*/NULL;
        END IF;
      EXCEPTION
        /*WHEN SRW.UNKNOWN_USER_EXIT THEN
          /*SRW.MESSAGE(01
                     ,'FND SRWINIT user exit is unknown.');
          RAISE;*/
        WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
          /*SRW.MESSAGE(02
                     ,'FND SRWINIT user exit failed.')*/NULL;
          RAISE;
      END;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('20'
                 ,'After SRWEXIT')*/NULL;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      RETURN (FALSE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_REPORT_START_DATE DATE;
  BEGIN
    L_REPORT_START_DATE := SYSDATE;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID
    INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS G,
      AP_SYSTEM_PARAMETERS A
    WHERE G.SET_OF_BOOKS_ID = A.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    C_REPORT_START_DATE := L_REPORT_START_DATE;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION CALCULATE_RUN_TIME RETURN BOOLEAN IS
    END_DATE DATE;
    START_DATE DATE;
  BEGIN
    END_DATE := SYSDATE;
    START_DATE := C_REPORT_START_DATE;
    C_REPORT_RUN_TIME := TO_CHAR(TO_DATE('01/01/0001'
                                        ,'DD/MM/YYYY') + ((END_DATE - START_DATE))
                                ,'HH24:MI:SS');
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CALCULATE_RUN_TIME;

  FUNCTION CF_1FORMULA(JURISDICTION_TYPE IN VARCHAR2
                      ,TAXABLE_BASE_AMOUNT_BASIS IN VARCHAR2
                      ,AWT_TYPE_CODE IN VARCHAR2
                      ,CREDIT_LETTER_FLAG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('220'
                 ,'Before trigger CF_1Formula return')*/NULL;
    END IF;
    IF JURISDICTION_TYPE = 'PROVINCIAL' THEN
      RETURN ('Turnover');
    ELSIF JURISDICTION_TYPE = 'FEDERAL' THEN
      IF TAXABLE_BASE_AMOUNT_BASIS = 'INVOICE' THEN
        RETURN ('VAT');
      ELSIF TAXABLE_BASE_AMOUNT_BASIS = 'PAYMENT' THEN
        RETURN ('Income');
      ELSE
        /*SRW.MESSAGE(100
                   ,'Error in ' || AWT_TYPE_CODE || ' Setup')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    ELSIF JURISDICTION_TYPE = 'ZONAL' THEN
      IF CREDIT_LETTER_FLAG = 'Y' THEN
        RETURN ('RS');
      ELSIF CREDIT_LETTER_FLAG = 'N' THEN
        RETURN ('SUSS');
      ELSE
        /*SRW.MESSAGE(101
                   ,'Error in ' || AWT_TYPE_CODE || ' Setup')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    ELSE
      /*SRW.MESSAGE(102
                 ,'Error in ' || AWT_TYPE_CODE || ' Setup')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('220'
                 ,'After trigger CF_1Formula return')*/NULL;
    END IF;
    RETURN NULL;
  END CF_1FORMULA;

  FUNCTION CF_PAYMENT_AMOUNTFORMULA(CHECK_NUMBER IN NUMBER) RETURN NUMBER IS
    V_AMOUNT NUMBER;
    USER_EXCEPTION EXCEPTION;
    CURSOR PAYMENT_AMOUNT IS
      SELECT
        PMT.PAYMENT_AMOUNT
      FROM
        IBY_FD_PAYMENTS_V PMT
      WHERE PMT.PAPER_DOCUMENT_NUMBER = CF_PAYMENT_AMOUNTFORMULA.CHECK_NUMBER;
  BEGIN
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('201'
                 ,'Before trigger  CF_Payment_amountFormula')*/NULL;
    END IF;
    OPEN PAYMENT_AMOUNT;
    FETCH PAYMENT_AMOUNT
     INTO V_AMOUNT;
    IF (PAYMENT_AMOUNT%NOTFOUND) THEN
      CLOSE PAYMENT_AMOUNT;
      /*SRW.MESSAGE('110'
                 ,'CURSOR payment_amount return NO DATA FOUND')*/NULL;
      /*SRW.MESSAGE('110'
                 ,'Checkrun_name: ' || P_CHECKRUN_NAME)*/NULL;
      /*SRW.MESSAGE('110'
                 ,'Check_number: ' || TO_CHAR(CHECK_NUMBER))*/NULL;
      RAISE USER_EXCEPTION;
    END IF;
    CLOSE PAYMENT_AMOUNT;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('201'
                 ,'After trigger  CF_Payment_amountFormula')*/NULL;
    END IF;
    RETURN (V_AMOUNT);
    RETURN NULL;
  EXCEPTION
    WHEN USER_EXCEPTION THEN
      RETURN NULL;
  END CF_PAYMENT_AMOUNTFORMULA;

  FUNCTION UPDATE_CERTIFICATE_STATUS(V_AWT_TYPE_CODE IN VARCHAR2
                                    ,V_CERTIFICATE_NUMBER IN NUMBER) RETURN BOOLEAN IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE
      JL_AR_AP_AWT_CERTIF jaac
    SET
      STATUS = DECODE(STATUS
            ,'NOT PRINTED'
            ,'PRINTED'
            ,DECODE(STATUS
                  ,'PRINTED '
                  ,'REPRINTED '
                  ,'REPRINTED'))
    WHERE AWT_TYPE_CODE = NVL(V_AWT_TYPE_CODE
       ,AWT_TYPE_CODE)
      AND CERTIFICATE_NUMBER = NVL(V_CERTIFICATE_NUMBER
       ,CERTIFICATE_NUMBER);
       COMMIT;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(120
                 ,'ERROR in function UPDATE_CERTIFICATE_STATUS')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,sqlcode || ' ' ||sqlerrm);
      RETURN (TRUE);
  END UPDATE_CERTIFICATE_STATUS;

  FUNCTION CF_COMP_NUM_AGENT_RETENCION7FO(CF_CERTIFICATE_TYPE IN VARCHAR2
                                         ,COMP_PRIMARY_ID_NUMBER IN VARCHAR2
                                         ,COMP_TAX_AUTHORITY_ID IN NUMBER
                                         ,COMP_TAX_AUTHORITY_TYPE IN VARCHAR2) RETURN VARCHAR2 IS
    L_PROVINCE_NAME VARCHAR2(50);
    L_COMPANY_NUM_AGENT_RET VARCHAR2(50);
    L_SUPPLIER_PROVINCE_NUMBER VARCHAR2(50);
  BEGIN
    IF CF_CERTIFICATE_TYPE = 'Turnover' THEN
      SELECT
        JGEA_C.ID_NUMBER
      INTO L_COMPANY_NUM_AGENT_RET
      FROM
        JG_ZZ_ENTITY_ASSOC JGEA_C
      WHERE JGEA_C.PRIMARY_ID_NUMBER = COMP_PRIMARY_ID_NUMBER
        AND JGEA_C.ASSOCIATED_ENTITY_ID = COMP_TAX_AUTHORITY_ID
        AND JGEA_C.ID_TYPE = COMP_TAX_AUTHORITY_TYPE;
      RETURN (L_COMPANY_NUM_AGENT_RET);
    ELSE
      RETURN ('');
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('7'
                 ,'The program can not obtain the Company Withholding Agent ID')*/NULL;
      /*SRW.MESSAGE('7'
                 ,'primary_id_number: ' || COMP_PRIMARY_ID_NUMBER)*/NULL;
      /*SRW.MESSAGE('7'
                 ,'associated_entity_id: ' || TO_CHAR(COMP_TAX_AUTHORITY_ID))*/NULL;
      /*SRW.MESSAGE('7'
                 ,'jgea_c.id_type: ' || COMP_TAX_AUTHORITY_TYPE)*/NULL;
      RETURN NULL;
  END CF_COMP_NUM_AGENT_RETENCION7FO;

  FUNCTION CF_SUPP_PROVINCE_NUMBERFORMULA(CF_CERTIFICATE_TYPE IN VARCHAR2
                                         ,SUPP_PRIMARY_ID_NUMBER IN VARCHAR2
                                         ,SUPP_TAX_AUTHORITY_ID IN NUMBER
                                         ,SUPP_TAX_AUTHORITY_TYPE IN VARCHAR2
                                         ,WITHHOLDING_DATE IN DATE) RETURN VARCHAR2 IS
    L_SUPPLIER_PROVINCE_NUMBER VARCHAR2(50);
  BEGIN
    IF CF_CERTIFICATE_TYPE = 'Turnover' THEN
      SELECT
        JGEA_S.ID_NUMBER SUPPLIER_PROVINCE_NUMBER
      INTO L_SUPPLIER_PROVINCE_NUMBER
      FROM
        JG_ZZ_ENTITY_ASSOC JGEA_S
      WHERE JGEA_S.PRIMARY_ID_NUMBER = SUPP_PRIMARY_ID_NUMBER
        AND JGEA_S.ASSOCIATED_ENTITY_ID = SUPP_TAX_AUTHORITY_ID
        AND JGEA_S.ID_TYPE = SUPP_TAX_AUTHORITY_TYPE
        AND WITHHOLDING_DATE between JGEA_S.EFFECTIVE_DATE
        AND NVL(JGEA_S.INEFFECTIVE_DATE
         ,SYSDATE);
      RETURN (L_SUPPLIER_PROVINCE_NUMBER);
    ELSE
      RETURN ('');
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('7'
                 ,'The program can not obtain the Supplier Province Number')*/NULL;
      /*SRW.MESSAGE('7'
                 ,'primary_id_number: ' || SUPP_PRIMARY_ID_NUMBER)*/NULL;
      /*SRW.MESSAGE('7'
                 ,'associated_entity_id: ' || TO_CHAR(SUPP_TAX_AUTHORITY_ID))*/NULL;
      /*SRW.MESSAGE('7'
                 ,'jgea_c.id_type: ' || SUPP_TAX_AUTHORITY_TYPE)*/NULL;
      RETURN NULL;
  END CF_SUPP_PROVINCE_NUMBERFORMULA;

  FUNCTION PROVINCE_NAMEFORMULA(CF_CERTIFICATE_TYPE IN VARCHAR2
                               ,PROVINCE_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    L_PROVINCE_NAME VARCHAR2(50);
  BEGIN
    IF PROVINCE_NAMEFORMULA.CF_CERTIFICATE_TYPE = 'Turnonver' THEN
      SELECT
        JAAP.PROVINCE_NAME || ' Turnover Withholding' PROVINCE_NAME1
      INTO L_PROVINCE_NAME
      FROM
        JL_AR_AP_PROVINCES JAAP
      WHERE JAAP.PROVINCE_CODE = PROVINCE_NAMEFORMULA.PROVINCE_CODE;
      RETURN (L_PROVINCE_NAME);
    ELSE
      RETURN ('');
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('7'
                 ,'The program can not obtain the Province Name')*/NULL;
      /*SRW.MESSAGE('7'
                 ,'Province Code: ' || PROVINCE_CODE)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END PROVINCE_NAMEFORMULA;

  FUNCTION P_SUPPLIER_IDVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (ACCEPT_PARAMETER('P_Supplier_Id'));
    RETURN (TRUE);
  END P_SUPPLIER_IDVALIDTRIGGER;

  FUNCTION ACCEPT_PARAMETER(PARAMETER_NAME IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF (PARAMETER_NAME = 'P_Supplier_Id') THEN
      IF (P_SUPPLIER_ID IS NOT NULL) THEN
        P_SUPPLIER_FROM := NULL;
        P_SUPPLIER_TO := NULL;
        P_SUPP_NUM_FROM := NULL;
        P_SUPP_NUM_TO := NULL;
      END IF;
    END IF;
    RETURN (TRUE);
  END ACCEPT_PARAMETER;

  FUNCTION FSELECTEDSUPPLIERS RETURN VARCHAR2 IS
    NL CONSTANT VARCHAR2(1) DEFAULT ' ';
    RET_TEXT VARCHAR2(2000):=' ';
  BEGIN
    IF (P_AWT_TYPE_CODE IS NULL AND P_CERTIFICATE_NUMBER IS NULL AND P_CHECKRUN_NAME IS NULL AND
    P_DATE_FROM IS NULL AND P_DATE_TO IS NULL AND P_SUPPLIER_ID IS NULL AND P_SUPPLIER_FROM IS NULL AND P_SUPPLIER_TO IS NULL AND
    P_SUPP_NUM_FROM IS NULL AND P_SUPP_NUM_TO IS NULL) THEN
      P_OK_PARAMETER_FLAG := 'N';
      /*SRW.MESSAGE('100'
                 ,P_PARAMETER_MSG)*/NULL;
    ELSE
      P_OK_PARAMETER_FLAG := 'Y';
    END IF;
    IF (P_SUPPLIER_ID IS NOT NULL) THEN
      RET_TEXT := 'and    pv1.vendor_id      =       :P_Supplier_Id';
    ELSE
      IF ((P_SUPPLIER_FROM IS NOT NULL) OR (P_SUPPLIER_TO IS NOT NULL)) THEN
        RET_TEXT := 'and    pv1.vendor_name    between nvl(:P_Supplier_From' || NL || '                                          ,
	pv1.vendor_name)' || NL || '                                   and nvl(:P_Supplier_To' || NL || '                                          ,
	pv1.vendor_name)';
      ELSE
        IF ((P_SUPP_NUM_FROM IS NOT NULL) OR (P_SUPP_NUM_TO IS NOT NULL)) THEN
          DECLARE
            SUP_NUM VARCHAR2(2000) := 'pv1.segment1';
            NUM_FROM VARCHAR2(2000) := 'nvl(:P_Supp_Num_From, pv1.segment1)';
            NUM_TO VARCHAR2(2000) := 'nvl(:P_Supp_Num_To, pv1.segment1)';
          BEGIN
            RET_TEXT := 'and  ' || SUP_NUM || ' between ' || NUM_FROM || ' and ' || NUM_TO;
          END;
        END IF;
      END IF;
    END IF;
    RETURN (RET_TEXT);
  END FSELECTEDSUPPLIERS;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_SELECTED_SUPPLIERS := FSELECTEDSUPPLIERS;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('1'
                 ,'Making Condition Where in After Form Trigger:' || P_SELECTED_SUPPLIERS)*/NULL;
    END IF;
    IF P_REPORTING_LEVEL = '2000' THEN
      LP_JL_AR_AP_AWT_CERTIF_ALL_WH := ' AND jaac.legal_entity_id = ' || P_REPORTING_CONTEXT;
    ELSE
      FND_MO_REPORTING_API.INITIALIZE(P_REPORTING_LEVEL
                                     ,P_REPORTING_CONTEXT
                                     ,'AUTO');
      LP_JL_AR_AP_AWT_CERTIF_ALL_WH := FND_MO_REPORTING_API.GET_PREDICATE('jaac'
                                                                         ,NULL
                                                                         ,P_REPORTING_CONTEXT);
    END IF;
    /*SRW.MESSAGE('1'
               ,'Condition Where in After Form Trigger:' || LP_JL_AR_AP_AWT_CERTIF_ALL_WH)*/NULL;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_1FORMULA0039(AWT_TYPE_CODE IN VARCHAR2
                          ,CERTIFICATE_NUMBER_NUM IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('1'
                 ,'Before UPDATE_CERTIFICATE_STATUS')*/NULL;
    END IF;
    IF (UPDATE_CERTIFICATE_STATUS(AWT_TYPE_CODE
                             ,CERTIFICATE_NUMBER_NUM) <> TRUE) THEN
      /*SRW.MESSAGE('1'
                 ,'Error Updating Certificate Status')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT */RAISE_APPLICATION_ERROR(-20101,SQLCODE ||'    '|| SQLERRM);
    END IF;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('1'
                 ,'After UPDATE_CERTIFICATE_STATUS')*/NULL;
    END IF;
    RETURN ('');
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('200'
                 ,'Error in CF_UPDATE_CERTIFICATES')*/NULL;
      /*SRW.MESSAGE('200'
                 ,SUBSTR(SQLERRM
                       ,1
                       ,100))*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,SQLCODE ||'    '|| SQLERRM);
  END CF_1FORMULA0039;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_PROFILE_COUNTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROFILE_COUNTRY_CODE;
  END C_PROFILE_COUNTRY_CODE_P;

END JL_JLARPCWT_XMLP_PKG;




/
