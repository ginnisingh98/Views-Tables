--------------------------------------------------------
--  DDL for Package Body ENG_ENGRCNDR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ENG_ENGRCNDR_XMLP_PKG" AS
/* $Header: ENGRCNDRB.pls 120.2.12010000.2 2010/02/01 22:31:30 vbrobbey ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
	C_DATE_FORMAT  varchar2(22);
  BEGIN
  	C_DATE_FORMAT := 'DD-MON-YY';
  CP_FROM_DATE := to_char(P_FROM_DATE,C_DATE_FORMAT);

  CP_TO_DATE := to_char(P_TO_DATE,C_DATE_FORMAT);

    DECLARE
      STATUS VARCHAR2(80);
      L_YES VARCHAR2(4);
      L_NO VARCHAR2(4);
    BEGIN
      SELECT
        SUBSTR(L1.MEANING
              ,1
              ,4),
        SUBSTR(L2.MEANING
              ,1
              ,4)
      INTO L_YES,L_NO
      FROM
        MFG_LOOKUPS L1,
        MFG_LOOKUPS L2
      WHERE L1.LOOKUP_TYPE = 'SYS_YES_NO'
        AND L1.LOOKUP_CODE = 1
        AND L2.LOOKUP_TYPE = 'SYS_YES_NO'
        AND L2.LOOKUP_CODE = 2;
      P_YES := L_YES;
      P_NO := L_NO;
      IF P_ADDITIONAL_DETAIL = 1 THEN
        P_ADDITIONAL_CODE := P_YES;
      ELSE
        P_ADDITIONAL_CODE := P_NO;
      END IF;
      IF P_ORDER_ENTRY_DETAIL = 1 THEN
        P_ORDER_ENTRY_CODE := P_YES;
      ELSE
        P_ORDER_ENTRY_CODE := P_NO;
      END IF;
      IF P_STATUS IS NOT NULL THEN
        SELECT
          MEANING
        INTO STATUS
        FROM
          MFG_LOOKUPS
        WHERE LOOKUP_CODE = P_STATUS
          AND LOOKUP_TYPE = 'ECG_ECN_STATUS';
        P_STATUS_CHAR := STATUS;
      END IF;
    END;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.USER_EXIT('FND FLEXSQL CODE="MSTK" NUM=":P_RI_STRUCT_NUM"
                                 APPL_SHORT_NAME="INV" OUTPUT=":P_RI_FLEXDATA"
                                 MODE="SELECT" DISPLAY="ALL" TABLEALIAS="msi1"')*/NULL;
    DECLARE
      L_ORG_ID NUMBER;
      L_INDEX NUMBER;
      L_ORG_CODE_LIST INV_ORGHIERARCHY_PVT.ORGID_TBL_TYPE;
      L_ORG_NAME VARCHAR2(60);
      L_RESP_ID NUMBER;
      L_RESP_APPL_ID NUMBER;
    BEGIN
      SELECT
        BOM_LISTS_S.NEXTVAL
      INTO P_SEQUENCE_ID
      FROM
        DUAL;
      IF P_ALL_ORGS = 1 THEN
        L_RESP_ID := FND_PROFILE.VALUE('RESP_ID');
        L_RESP_APPL_ID := FND_PROFILE.VALUE('RESP_APPL_ID');
        L_INDEX := 0;
        FOR c_org IN (SELECT
                        ORGANIZATION_ID
                      FROM
                        MTL_PARAMETERS MP
                      WHERE MP.MASTER_ORGANIZATION_ID = (
                        SELECT
                          MP1.MASTER_ORGANIZATION_ID
                        FROM
                          MTL_PARAMETERS MP1
                        WHERE MP1.ORGANIZATION_ID = P_ORG_ID )
                        AND MP.ORGANIZATION_ID IN (
                        SELECT
                          ORGANIZATION_ID
                        FROM
                          ORG_ACCESS_VIEW
                        WHERE RESPONSIBILITY_ID = L_RESP_ID
                          AND RESP_APPLICATION_ID = L_RESP_APPL_ID )) LOOP
          L_INDEX := L_INDEX + 1;
          INSERT INTO BOM_LISTS
            (SEQUENCE_ID
            ,ORGANIZATION_ID
            ,ALTERNATE_DESIGNATOR)
          VALUES   (P_SEQUENCE_ID
            ,C_ORG.ORGANIZATION_ID
            ,L_INDEX);
        END LOOP;
        DP_ALL_ORGS := 'Yes';
      ELSE
        IF (P_ORG_HIERARCHY IS NULL) THEN
          INSERT INTO BOM_LISTS
            (SEQUENCE_ID
            ,ORGANIZATION_ID
            ,ALTERNATE_DESIGNATOR)
          VALUES   (P_SEQUENCE_ID
            ,P_ORG_ID
            ,1);
        ELSE
          INV_ORGHIERARCHY_PVT.ORG_HIERARCHY_LIST(P_ORG_HIERARCHY
                                                 ,P_ORG_ID
                                                 ,L_ORG_CODE_LIST);
          IF (L_ORG_CODE_LIST.COUNT > 0) THEN
            FOR l_index IN 1 .. L_ORG_CODE_LIST.COUNT LOOP
              INSERT INTO BOM_LISTS
                (SEQUENCE_ID
                ,ORGANIZATION_ID
                ,ALTERNATE_DESIGNATOR)
              VALUES   (P_SEQUENCE_ID
                ,L_ORG_CODE_LIST(L_INDEX)
                ,L_INDEX);
            END LOOP;
          END IF;
        END IF;
        DP_ALL_ORGS := 'No';
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_REV(REVISED_ITEM_ID IN NUMBER) RETURN VARCHAR2 IS
    REV VARCHAR2(3);
    ORG_ID NUMBER := P_ORG_ID;
    ITEM_ID NUMBER := REVISED_ITEM_ID;
    EFF_DATE DATE := SYSDATE;
  BEGIN
    SELECT
      REV.REVISION
    INTO REV
    FROM
      MTL_ITEM_REVISIONS REV
    WHERE REV.INVENTORY_ITEM_ID = ITEM_ID
      AND REV.ORGANIZATION_ID = ORG_ID
      AND REV.EFFECTIVITY_DATE = (
      SELECT
        MAX(EFFECTIVITY_DATE)
      FROM
        MTL_ITEM_REVISIONS
      WHERE EFFECTIVITY_DATE <= EFF_DATE
        AND ORGANIZATION_ID = ORG_ID
        AND INVENTORY_ITEM_ID = ITEM_ID
        AND IMPLEMENTATION_DATE is not null )
      AND REV.IMPLEMENTATION_DATE is not null;
    RETURN (REV);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
      RETURN NULL;
  END GET_REV;

  FUNCTION LATEST_REV(REVISED_ITEM_ID IN NUMBER) RETURN VARCHAR2 IS
    LATE_REV VARCHAR2(3);
    ORG_ID NUMBER := P_ORG_ID;
    ITEM_ID NUMBER := REVISED_ITEM_ID;
  BEGIN
    SELECT
      REV.REVISION
    INTO LATE_REV
    FROM
      MTL_ITEM_REVISIONS REV
    WHERE REV.INVENTORY_ITEM_ID = ITEM_ID
      AND REV.ORGANIZATION_ID = ORG_ID
      AND REV.EFFECTIVITY_DATE = (
      SELECT
        MAX(EFFECTIVITY_DATE)
      FROM
        MTL_ITEM_REVISIONS
      WHERE ORGANIZATION_ID = ORG_ID
        AND INVENTORY_ITEM_ID = ITEM_ID );
    RETURN (LATE_REV);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
      RETURN NULL;
  END LATEST_REV;

  FUNCTION LIMIT_CHANGE_NOTICES RETURN CHARACTER IS
    LIMIT_CHANGE_NOTICES VARCHAR2(80);
  BEGIN
    IF (P_FROM_NOTICE IS NOT NULL) THEN
      IF (P_TO_NOTICE IS NOT NULL) THEN
        LIMIT_CHANGE_NOTICES := ' AND EEC.CHANGE_NOTICE BETWEEN ''' || P_FROM_NOTICE || ''' AND ''' || P_TO_NOTICE || '''';
      ELSE
        LIMIT_CHANGE_NOTICES := ' AND EEC.CHANGE_NOTICE >= ''' || P_FROM_NOTICE || '''';
      END IF;
    ELSE
      IF (P_TO_NOTICE IS NOT NULL) THEN
        LIMIT_CHANGE_NOTICES := ' AND EEC.CHANGE_NOTICE <= ''' || P_TO_NOTICE || '''';
      ELSE
        LIMIT_CHANGE_NOTICES := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_CHANGE_NOTICES);
  END LIMIT_CHANGE_NOTICES;

  FUNCTION OPTIONAL_DISPFORMULA(OPTIONAL IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF OPTIONAL = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END OPTIONAL_DISPFORMULA;

  FUNCTION COSTED_DISPFORMULA(COSTED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF COSTED = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END COSTED_DISPFORMULA;

  FUNCTION CHECK_ATP_DISPFORMULA(CHECK_ATP IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF CHECK_ATP = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END CHECK_ATP_DISPFORMULA;

  FUNCTION MUTUALLY_EXCLUSIVE_DISPFORMULA(MUTUALLY_EXCLUSIVE_OPTION IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF MUTUALLY_EXCLUSIVE_OPTION = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END MUTUALLY_EXCLUSIVE_DISPFORMULA;

  FUNCTION REQUIRED_TO_SHIP_DISPFORMULA(REQUIRED_TO_SHIP IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF REQUIRED_TO_SHIP = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END REQUIRED_TO_SHIP_DISPFORMULA;

  FUNCTION REQUIRED_FOR_REVENUE_DISPFORMU(REQUIRED_FOR_REVENUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF REQUIRED_FOR_REVENUE = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END REQUIRED_FOR_REVENUE_DISPFORMU;

  FUNCTION INCLUDE_ON_SHIP_DISPFORMULA(INCLUDE_ON_SHIPPING_DOCUM IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF INCLUDE_ON_SHIPPING_DOCUM = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END INCLUDE_ON_SHIP_DISPFORMULA;

  FUNCTION QUANTITY_RELATED_DISPFORMULA(QUANTITY_RELATED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF QUANTITY_RELATED = 1 THEN
      RETURN (P_YES);
    ELSE
      RETURN (P_NO);
    END IF;
    RETURN NULL;
  END QUANTITY_RELATED_DISPFORMULA;

  FUNCTION GET_NAME(EMPLOYEE_ID IN NUMBER
                   ,ORGANIZATION_ID IN NUMBER) RETURN VARCHAR2 IS
    EMP_NAME VARCHAR2(240);
    L_ORGANIZATION_ID NUMBER := ORGANIZATION_ID; -- Added for bug 7381270
    L_EMPLOYEE_ID NUMBER := EMPLOYEE_ID; -- Added for bug 7381270
  BEGIN
    IF L_EMPLOYEE_ID IS NULL THEN --Changed for bug 7381270
      NULL;
    ELSE
      SELECT
        FULL_NAME
      INTO EMP_NAME
      FROM
        MTL_EMPLOYEES_VIEW
      WHERE ORGANIZATION_ID = L_ORGANIZATION_ID --Changed for bug 7381270
        AND EMPLOYEE_ID = L_EMPLOYEE_ID; --Changed for bug 7381270
    END IF;
    RETURN (EMP_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
      RETURN NULL;
  END GET_NAME;

  FUNCTION GET_REQ_NAME(REQUESTOR_ID IN NUMBER) RETURN VARCHAR2 IS
    REQ_NAME VARCHAR2(240);
  BEGIN
    IF REQUESTOR_ID IS NULL THEN
      NULL;
    ELSE
      SELECT
        EMP.FULL_NAME
      INTO REQ_NAME
      FROM
        MTL_EMPLOYEES_CURRENT_VIEW EMP
      WHERE EMP.ORGANIZATION_ID = P_ORG_ID
        AND EMP.EMPLOYEE_ID = (
        SELECT
          HZ.PERSON_IDENTIFIER
        FROM
          HZ_PARTIES HZ
        WHERE HZ.PARTY_ID = REQUESTOR_ID )
        AND EMP.SYSTEM_PERSON_TYPE = 'EMP';
    END IF;
    RETURN (REQ_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
      RETURN NULL;
  END GET_REQ_NAME;

  FUNCTION GET_ITEM_TYPE(ITEM_TYPE IN VARCHAR2) RETURN VARCHAR2 IS
    ITEM_TYPE_NAME VARCHAR2(80);
  BEGIN
    IF ITEM_TYPE IS NULL THEN
      NULL;
    ELSE
      SELECT
        MEANING
      INTO ITEM_TYPE_NAME
      FROM
        FND_COMMON_LOOKUPS
      WHERE LOOKUP_CODE = ITEM_TYPE
        AND LOOKUP_TYPE = 'ITEM_TYPE';
    END IF;
    RETURN (ITEM_TYPE_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END GET_ITEM_TYPE;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

END ENG_ENGRCNDR_XMLP_PKG;


/
