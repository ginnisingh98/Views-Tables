--------------------------------------------------------
--  DDL for Package Body GMI_CMXFER02_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMI_CMXFER02_XMLP_PKG" AS
/* $Header: CMXFER02B.pls 120.2 2007/12/27 15:48:06 nchinnam noship $ */
  FUNCTION RELEASEDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_RELEASE_DATE IS NOT NULL AND P_TO_RELEASE_DATE IS NOT NULL THEN
      RELEASEDATECP := ' and trunc(xf.actual_release_date) between ''' || P_FROM_RELEASE_DATE || '''
                                          and  ''' || P_TO_RELEASE_DATE || '''';
    ELSIF P_FROM_RELEASE_DATE IS NULL AND P_TO_RELEASE_DATE IS NULL THEN
      RELEASEDATECP := '   ';
    ELSIF P_FROM_RELEASE_DATE IS NOT NULL AND P_TO_RELEASE_DATE IS NULL THEN
      RELEASEDATECP := ' and trunc(xf.actual_release_date) >= ''' || P_FROM_RELEASE_DATE || '''';
    ELSIF P_FROM_RELEASE_DATE IS NOT NULL AND P_TO_RELEASE_DATE IS NOT NULL THEN
      RELEASEDATECP := ' and trunc(xf.actual_release_date) <= ''' || P_TO_RELEASE_DATE || '''';
    END IF;
    RETURN NULL;
  END RELEASEDATECFFORMULA;

  FUNCTION SOURCEWAREHOUSECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_SOURCE_WAREHOUSE IS NOT NULL AND P_TO_SOURCE_WAREHOUSE IS NOT NULL THEN
      SOURCEWAREHOUSECP := ' and xf.from_warehouse between ''' || P_FROM_SOURCE_WAREHOUSE || '''
                                              and  ''' || P_TO_SOURCE_WAREHOUSE || '''';
    ELSIF P_FROM_SOURCE_WAREHOUSE IS NULL AND P_TO_SOURCE_WAREHOUSE IS NULL THEN
      SOURCEWAREHOUSECP := '   ';
      CP_FROM_SOURCE_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
      CP_TO_SOURCE_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF P_FROM_SOURCE_WAREHOUSE IS NOT NULL AND P_TO_SOURCE_WAREHOUSE IS NULL THEN
      SOURCEWAREHOUSECP := ' and xf.from_warehouse >= ''' || P_FROM_SOURCE_WAREHOUSE || '''';
      CP_TO_SOURCE_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF P_FROM_SOURCE_WAREHOUSE IS NOT NULL AND P_TO_SOURCE_WAREHOUSE IS NOT NULL THEN
      SOURCEWAREHOUSECP := ' and xf.from_warehouse <= ''' || P_TO_SOURCE_WAREHOUSE || '''';
      CP_FROM_SOURCE_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END SOURCEWAREHOUSECFFORMULA;

  FUNCTION DESTINATIONWAREHOUSECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_DESTINATION_WAREHOUSE IS NOT NULL AND P_TO_DESTINATION_WAREHOUSE IS NOT NULL THEN
      DESTINATIONWAREHOUSECP := ' and xf.to_warehouse between ''' || P_FROM_DESTINATION_WAREHOUSE || '''
                                                   and  ''' || P_TO_DESTINATION_WAREHOUSE || '''';
    ELSIF P_FROM_DESTINATION_WAREHOUSE IS NULL AND P_TO_DESTINATION_WAREHOUSE IS NULL THEN
      DESTINATIONWAREHOUSECP := '  ';
      CP_FROM_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
      CP_TO_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF P_FROM_DESTINATION_WAREHOUSE IS NOT NULL AND P_TO_DESTINATION_WAREHOUSE IS NULL THEN
      DESTINATIONWAREHOUSECP := ' and xf.to_warehouse >= ''' || P_FROM_DESTINATION_WAREHOUSE || '''';
      CP_TO_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF P_FROM_DESTINATION_WAREHOUSE IS NOT NULL AND P_TO_DESTINATION_WAREHOUSE IS NOT NULL THEN
      DESTINATIONWAREHOUSECP := ' and xf.to_warehouse <= ''' || P_TO_DESTINATION_WAREHOUSE || '''';
      CP_FROM_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END DESTINATIONWAREHOUSECFFORMULA;

  FUNCTION TREANSFERSTATUSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_TRANSFER_STATUS IS NOT NULL AND P_TO_TRANSFER_STATUS IS NOT NULL THEN
      TRANSFERSTATUSCP := ' and xf.transfer_status between ''' || P_FROM_TRANSFER_STATUS || '''
                                             and  ''' || P_TO_TRANSFER_STATUS || '''';
    ELSIF P_FROM_TRANSFER_STATUS IS NULL AND P_TO_TRANSFER_STATUS IS NULL THEN
      TRANSFERSTATUSCP := '  ';
      CP_FROM_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
      CP_TO_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
    ELSIF P_FROM_TRANSFER_STATUS IS NOT NULL AND P_TO_TRANSFER_STATUS IS NULL THEN
      TRANSFERSTATUSCP := ' and xf.transfer_status >= ''' || P_FROM_TRANSFER_STATUS || '''';
      CP_TO_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
    ELSIF P_FROM_TRANSFER_STATUS IS NOT NULL AND P_TO_TRANSFER_STATUS IS NOT NULL THEN
      TRANSFERSTATUSCP := ' and xf.transfer_status <= ''' || P_TO_TRANSFER_STATUS || '''';
      CP_FROM_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END TREANSFERSTATUSCFFORMULA;

  FUNCTION SCHEDULEDSHIPDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_SCHEDULED_RELEASE_DATE IS NOT NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NOT NULL THEN
      SCHEDULEDSHIPDATECP := ' and trunc(xf.scheduled_release_date) between ''' || P_FROM_SCHEDULED_RELEASE_DATE || '''
                                                and  ''' || P_TO_SCHEDULED_RELEASE_DATE || '''';
    ELSIF P_FROM_SCHEDULED_RELEASE_DATE IS NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NULL THEN
      SCHEDULEDSHIPDATECP := '  ';
    ELSIF P_FROM_SCHEDULED_RELEASE_DATE IS NOT NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NULL THEN
      SCHEDULEDSHIPDATECP := ' and trunc(xf.scheduled_release_date) >= ''' || P_FROM_SCHEDULED_RELEASE_DATE || '''';
    ELSIF P_FROM_SCHEDULED_RELEASE_DATE IS NOT NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NOT NULL THEN
      SCHEDULEDSHIPDATECP := ' and trunc(xf.scheduled_release_date) <= ''' || P_TO_SCHEDULED_RELEASE_DATE || '''';
    END IF;
    RETURN NULL;
  END SCHEDULEDSHIPDATECFFORMULA;

  FUNCTION CANCELDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_CANCEL_DATE IS NOT NULL AND P_TO_CANCEL_DATE IS NOT NULL THEN
      CANCELDATECP := ' and trunc(xf.cancel_date) between ''' || P_FROM_CANCEL_DATE || '''
                                         and ''' || P_TO_CANCEL_DATE || '''';
    ELSIF P_FROM_CANCEL_DATE IS NULL AND P_TO_CANCEL_DATE IS NULL THEN
      CANCELDATECP := '   ';
    ELSIF P_FROM_CANCEL_DATE IS NOT NULL AND P_TO_CANCEL_DATE IS NULL THEN
      CANCELDATECP := ' and trunc(xf.cancel_date) >= ''' || P_FROM_CANCEL_DATE || '''';
    ELSIF P_FROM_CANCEL_DATE IS NOT NULL AND P_TO_CANCEL_DATE IS NOT NULL THEN
      CANCELDATECP := ' and trunc(xf.cancel_date) <= ''' || P_TO_CANCEL_DATE || '''';
    END IF;
    RETURN NULL;
  END CANCELDATECFFORMULA;

  FUNCTION ACTUALRECEIVEDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_ACTUAL_RECEIVE_DATE IS NOT NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NOT NULL THEN
      ACTUALRECEIVEDATECP := ' and trunc(xf.actual_receive_date) between ''' || P_FROM_ACTUAL_RECEIVE_DATE || '''
                                                and  ''' || P_TO_ACTUAL_RECEIVE_DATE || '''';
    ELSIF P_FROM_ACTUAL_RECEIVE_DATE IS NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NULL THEN
      ACTUALRECEIVEDATECP := '   ';
    ELSIF P_FROM_ACTUAL_RECEIVE_DATE IS NOT NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NULL THEN
      ACTUALRECEIVEDATECP := ' and trunc(xf.actual_receive_date) >= ''' || P_FROM_ACTUAL_RECEIVE_DATE || '''';
    ELSIF P_FROM_ACTUAL_RECEIVE_DATE IS NOT NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NOT NULL THEN
      ACTUALRECEIVEDATECP := ' and trunc(xf.actual_receive_date) <= ''' || P_TO_ACTUAL_RECEIVE_DATE || '''';
    END IF;
    RETURN NULL;
  END ACTUALRECEIVEDATECFFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    V_USER_ID := FND_PROFILE.VALUE('USER_ID');
    SETUP_REPORT;
    lV_REPORT_TITLE:=substr(V_REPORT_TITLE,1,instr(V_REPORT_TITLE,' (XML)'));
    RETURN (TRUE);
  END BEFOREREPORT;

  PROCEDURE SETUP_REPORT IS
    V_DEF_SET_OF_BOOKS_ID NUMBER := 1;
    V_DEF_REPORT_TITLE VARCHAR2(240) := 'Inventory Transfer Report by Batch';
    V_SET_OF_BOOKS_ID NUMBER;
  BEGIN
    V_REPORT_NUMBER := 'CMXFER02';
    V_SUBTITLE := '';
    V_SET_OF_BOOKS_ID := NVL(FND_PROFILE.VALUE('GL_SET_OF_BKS_ID')
                            ,V_DEF_SET_OF_BOOKS_ID);
    SELECT
      MIN(NAME)
    INTO V_SET_OF_BOOKS_NAME
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = V_SET_OF_BOOKS_ID;
    SELECT
      NVL(MIN(FCP.USER_CONCURRENT_PROGRAM_NAME)
         ,V_DEF_REPORT_TITLE)
    INTO V_REPORT_TITLE
    FROM
      FND_CONCURRENT_PROGRAMS_VL FCP,
      FND_CONCURRENT_REQUESTS FCR
    WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
      AND FCP.APPLICATION_ID = FCR.PROGRAM_APPLICATION_ID
      AND FCP.CONCURRENT_PROGRAM_ID = FCR.CONCURRENT_PROGRAM_ID;
  END SETUP_REPORT;

  FUNCTION BATCHNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_BATCH_NUM IS NOT NULL AND P_TO_BATCH_NUM IS NOT NULL THEN
      BATCHNOCP := ' and xf.transfer_batch between ''' || P_FROM_BATCH_NUM || '''
                                      and  ''' || P_TO_BATCH_NUM || '''';
    ELSIF P_FROM_BATCH_NUM IS NULL AND P_TO_BATCH_NUM IS NULL THEN
      BATCHNOCP := '  ';
    ELSIF P_FROM_BATCH_NUM IS NOT NULL AND P_TO_BATCH_NUM IS NULL THEN
      BATCHNOCP := ' and xf.transfer_batch >= ''' || P_FROM_BATCH_NUM || '''';
    ELSIF P_FROM_BATCH_NUM IS NOT NULL AND P_TO_BATCH_NUM IS NOT NULL THEN
      BATCHNOCP := ' and xf.transfer_batch <= ''' || P_TO_BATCH_NUM || '''';
    END IF;
    RETURN NULL;
  END BATCHNOCFFORMULA;

  FUNCTION RELEASE_CFFORMULA(STAT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF STAT in (1,4) THEN
      RETURN ('(Scheduled)');
    ELSE
      RETURN ('(Actual)');
    END IF;
    RETURN NULL;
  END RELEASE_CFFORMULA;

  FUNCTION RECEIVE_CFFORMULA(STAT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF STAT in (1,2,4) THEN
      RETURN ('(Scheduled)');
    ELSIF STAT in (3) THEN
      RETURN ('(Actual)');
    ELSE
      RETURN ('(Cancel)');
    END IF;
    RETURN NULL;
  END RECEIVE_CFFORMULA;

  PROCEDURE HEADER IS
  BEGIN
    NULL;
  END HEADER;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION RELEASEDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RELEASEDATECP;
  END RELEASEDATECP_P;

  FUNCTION SOURCEWAREHOUSECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SOURCEWAREHOUSECP;
  END SOURCEWAREHOUSECP_P;

  FUNCTION DESTINATIONWAREHOUSECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DESTINATIONWAREHOUSECP;
  END DESTINATIONWAREHOUSECP_P;

  FUNCTION TRANSFERSTATUSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TRANSFERSTATUSCP;
  END TRANSFERSTATUSCP_P;

  FUNCTION SCHEDULEDSHIPDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SCHEDULEDSHIPDATECP;
  END SCHEDULEDSHIPDATECP_P;

  FUNCTION CANCELDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CANCELDATECP;
  END CANCELDATECP_P;

  FUNCTION ACTUALRECEIVEDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACTUALRECEIVEDATECP;
  END ACTUALRECEIVEDATECP_P;

  FUNCTION BATCHNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BATCHNOCP;
  END BATCHNOCP_P;

END GMI_CMXFER02_XMLP_PKG;


/
