--------------------------------------------------------
--  DDL for Package Body FND_CP_SERVICES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."FND_CP_SERVICES_PKG" as
/* $Header: AFCPSERB.pls 120.2 2005/08/19 14:34:23 susghosh ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_SERVICE_ID in NUMBER,
  X_DEBUG_TYPE in VARCHAR2,
  X_DEBUG_CHANGE_ACTION in VARCHAR2,
  X_ALLOW_MULTIPLE_PROC_SI in VARCHAR2,
  X_DEFAULT_DEBUG_LEVEL in VARCHAR2,
  X_ENABLED in VARCHAR2,
  X_CARTRIDGE_APPLICATION_ID in NUMBER,
  X_ALLOW_MULTIPLE_PROC_INSTANCE in VARCHAR2,
  X_ALLOW_MULTIPLE_PROC_NODE in VARCHAR2,
  X_MIGRATE_ON_FAILURE in VARCHAR2,
  X_SERVER_TYPE in VARCHAR2,
  X_ALLOW_SUSPEND in VARCHAR2,
  X_ALLOW_VERIFY in VARCHAR2,
  X_ALLOW_PARAMETER in VARCHAR2,
  X_ALLOW_START in VARCHAR2,
  X_ALLOW_EDIT in VARCHAR2,
  X_CARTRIDGE_HANDLE in VARCHAR2,
  X_SERVICE_HANDLE in VARCHAR2,
  X_ALLOW_CREATE in VARCHAR2,
  X_SERVICE_CLASS in VARCHAR2,
  X_SERVICE_INSTANCE_CLASS in VARCHAR2,
  X_ALLOW_RCG in VARCHAR2,
  X_OAM_DISPLAY_ORDER in NUMBER,
  X_ALLOW_RESTART in VARCHAR2,
  X_PARAMETER_CHANGE_ACTION in VARCHAR2,
  X_DEVELOPER_PARAMETERS in VARCHAR2,
  X_ENV_FILE_NAME in VARCHAR2,
  X_SERVICE_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SERVICE_PLURAL_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from FND_CP_SERVICES
    where SERVICE_ID = X_SERVICE_ID
    ;
begin
  insert into FND_CP_SERVICES (
    DEBUG_TYPE,
    DEBUG_CHANGE_ACTION,
    ALLOW_MULTIPLE_PROC_SI,
    DEFAULT_DEBUG_LEVEL,
    ENABLED,
    CARTRIDGE_APPLICATION_ID,
    ALLOW_MULTIPLE_PROC_INSTANCE,
    ALLOW_MULTIPLE_PROC_NODE,
    MIGRATE_ON_FAILURE,
    SERVER_TYPE,
    ALLOW_SUSPEND,
    ALLOW_VERIFY,
    ALLOW_PARAMETER,
    ALLOW_START,
    ALLOW_EDIT,
    CARTRIDGE_HANDLE,
    SERVICE_HANDLE,
    SERVICE_ID,
    ALLOW_CREATE,
    SERVICE_CLASS,
    SERVICE_INSTANCE_CLASS,
    ALLOW_RCG,
    OAM_DISPLAY_ORDER,
    ALLOW_RESTART,
    PARAMETER_CHANGE_ACTION,
    DEVELOPER_PARAMETERS,
    ENV_FILE_NAME,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_DEBUG_TYPE,
    X_DEBUG_CHANGE_ACTION,
    X_ALLOW_MULTIPLE_PROC_SI,
    X_DEFAULT_DEBUG_LEVEL,
    X_ENABLED,
    X_CARTRIDGE_APPLICATION_ID,
    X_ALLOW_MULTIPLE_PROC_INSTANCE,
    X_ALLOW_MULTIPLE_PROC_NODE,
    X_MIGRATE_ON_FAILURE,
    X_SERVER_TYPE,
    X_ALLOW_SUSPEND,
    X_ALLOW_VERIFY,
    X_ALLOW_PARAMETER,
    X_ALLOW_START,
    X_ALLOW_EDIT,
    X_CARTRIDGE_HANDLE,
    X_SERVICE_HANDLE,
    X_SERVICE_ID,
    X_ALLOW_CREATE,
    X_SERVICE_CLASS,
    X_SERVICE_INSTANCE_CLASS,
    X_ALLOW_RCG,
    X_OAM_DISPLAY_ORDER,
    X_ALLOW_RESTART,
    X_PARAMETER_CHANGE_ACTION,
    X_DEVELOPER_PARAMETERS,
    X_ENV_FILE_NAME,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into FND_CP_SERVICES_TL (
    SERVICE_PLURAL_NAME,
    CREATION_DATE,
    CREATED_BY,
    DESCRIPTION,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    SERVICE_ID,
    SERVICE_NAME,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_SERVICE_PLURAL_NAME,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_DESCRIPTION,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_SERVICE_ID,
    X_SERVICE_NAME,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from FND_CP_SERVICES_TL T
    where T.SERVICE_ID = X_SERVICE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_SERVICE_ID in NUMBER,
  X_DEBUG_TYPE in VARCHAR2,
  X_DEBUG_CHANGE_ACTION in VARCHAR2,
  X_ALLOW_MULTIPLE_PROC_SI in VARCHAR2,
  X_DEFAULT_DEBUG_LEVEL in VARCHAR2,
  X_ENABLED in VARCHAR2,
  X_CARTRIDGE_APPLICATION_ID in NUMBER,
  X_ALLOW_MULTIPLE_PROC_INSTANCE in VARCHAR2,
  X_ALLOW_MULTIPLE_PROC_NODE in VARCHAR2,
  X_MIGRATE_ON_FAILURE in VARCHAR2,
  X_SERVER_TYPE in VARCHAR2,
  X_ALLOW_SUSPEND in VARCHAR2,
  X_ALLOW_VERIFY in VARCHAR2,
  X_ALLOW_PARAMETER in VARCHAR2,
  X_ALLOW_START in VARCHAR2,
  X_ALLOW_EDIT in VARCHAR2,
  X_CARTRIDGE_HANDLE in VARCHAR2,
  X_SERVICE_HANDLE in VARCHAR2,
  X_ALLOW_CREATE in VARCHAR2,
  X_SERVICE_CLASS in VARCHAR2,
  X_SERVICE_INSTANCE_CLASS in VARCHAR2,
  X_ALLOW_RCG in VARCHAR2,
  X_OAM_DISPLAY_ORDER in NUMBER,
  X_ALLOW_RESTART in VARCHAR2,
  X_PARAMETER_CHANGE_ACTION in VARCHAR2,
  X_DEVELOPER_PARAMETERS in VARCHAR2,
  X_ENV_FILE_NAME in VARCHAR2,
  X_SERVICE_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SERVICE_PLURAL_NAME in VARCHAR2
) is
  cursor c is select
      DEBUG_TYPE,
      DEBUG_CHANGE_ACTION,
      ALLOW_MULTIPLE_PROC_SI,
      DEFAULT_DEBUG_LEVEL,
      ENABLED,
      CARTRIDGE_APPLICATION_ID,
      ALLOW_MULTIPLE_PROC_INSTANCE,
      ALLOW_MULTIPLE_PROC_NODE,
      MIGRATE_ON_FAILURE,
      SERVER_TYPE,
      ALLOW_SUSPEND,
      ALLOW_VERIFY,
      ALLOW_PARAMETER,
      ALLOW_START,
      ALLOW_EDIT,
      CARTRIDGE_HANDLE,
      SERVICE_HANDLE,
      ALLOW_CREATE,
      SERVICE_CLASS,
      SERVICE_INSTANCE_CLASS,
      ALLOW_RCG,
      OAM_DISPLAY_ORDER,
      ALLOW_RESTART,
      PARAMETER_CHANGE_ACTION,
      DEVELOPER_PARAMETERS,
      ENV_FILE_NAME
    from FND_CP_SERVICES
    where SERVICE_ID = X_SERVICE_ID
    for update of SERVICE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      SERVICE_NAME,
      DESCRIPTION,
      SERVICE_PLURAL_NAME,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from FND_CP_SERVICES_TL
    where SERVICE_ID = X_SERVICE_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of SERVICE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.DEBUG_TYPE = X_DEBUG_TYPE)
           OR ((recinfo.DEBUG_TYPE is null) AND (X_DEBUG_TYPE is null)))
      AND (recinfo.DEBUG_CHANGE_ACTION = X_DEBUG_CHANGE_ACTION)
      AND ((recinfo.ALLOW_MULTIPLE_PROC_SI = X_ALLOW_MULTIPLE_PROC_SI)
           OR ((recinfo.ALLOW_MULTIPLE_PROC_SI is null) AND (X_ALLOW_MULTIPLE_PROC_SI is null)))
      AND ((recinfo.DEFAULT_DEBUG_LEVEL = X_DEFAULT_DEBUG_LEVEL)
           OR ((recinfo.DEFAULT_DEBUG_LEVEL is null) AND (X_DEFAULT_DEBUG_LEVEL is null)))
      AND (recinfo.ENABLED = X_ENABLED)
      AND ((recinfo.CARTRIDGE_APPLICATION_ID = X_CARTRIDGE_APPLICATION_ID)
           OR ((recinfo.CARTRIDGE_APPLICATION_ID is null) AND (X_CARTRIDGE_APPLICATION_ID is null)))
      AND (recinfo.ALLOW_MULTIPLE_PROC_INSTANCE = X_ALLOW_MULTIPLE_PROC_INSTANCE)
      AND (recinfo.ALLOW_MULTIPLE_PROC_NODE = X_ALLOW_MULTIPLE_PROC_NODE)
      AND (recinfo.MIGRATE_ON_FAILURE = X_MIGRATE_ON_FAILURE)
      AND (recinfo.SERVER_TYPE = X_SERVER_TYPE)
      AND (recinfo.ALLOW_SUSPEND = X_ALLOW_SUSPEND)
      AND (recinfo.ALLOW_VERIFY = X_ALLOW_VERIFY)
      AND (recinfo.ALLOW_PARAMETER = X_ALLOW_PARAMETER)
      AND (recinfo.ALLOW_START = X_ALLOW_START)
      AND (recinfo.ALLOW_EDIT = X_ALLOW_EDIT)
      AND (recinfo.CARTRIDGE_HANDLE = X_CARTRIDGE_HANDLE)
      AND (recinfo.SERVICE_HANDLE = X_SERVICE_HANDLE)
      AND ((recinfo.ALLOW_CREATE = X_ALLOW_CREATE)
           OR ((recinfo.ALLOW_CREATE is null) AND (X_ALLOW_CREATE is null)))
      AND ((recinfo.SERVICE_CLASS = X_SERVICE_CLASS)
           OR ((recinfo.SERVICE_CLASS is null) AND (X_SERVICE_CLASS is null)))
      AND ((recinfo.SERVICE_INSTANCE_CLASS = X_SERVICE_INSTANCE_CLASS)
           OR ((recinfo.SERVICE_INSTANCE_CLASS is null) AND (X_SERVICE_INSTANCE_CLASS is null)))
      AND (recinfo.ALLOW_RCG = X_ALLOW_RCG)
      AND ((recinfo.OAM_DISPLAY_ORDER = X_OAM_DISPLAY_ORDER)
           OR ((recinfo.OAM_DISPLAY_ORDER is null) AND (X_OAM_DISPLAY_ORDER is null)))
      AND (recinfo.ALLOW_RESTART = X_ALLOW_RESTART)
      AND (recinfo.PARAMETER_CHANGE_ACTION = X_PARAMETER_CHANGE_ACTION)
      AND ((recinfo.DEVELOPER_PARAMETERS = X_DEVELOPER_PARAMETERS)
           OR ((recinfo.DEVELOPER_PARAMETERS is null) AND (X_DEVELOPER_PARAMETERS is null)))
      AND ((recinfo.ENV_FILE_NAME = X_ENV_FILE_NAME)
           OR ((recinfo.ENV_FILE_NAME is null) AND (X_ENV_FILE_NAME is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.SERVICE_NAME = X_SERVICE_NAME)
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
          AND ((tlinfo.SERVICE_PLURAL_NAME = X_SERVICE_PLURAL_NAME)
               OR ((tlinfo.SERVICE_PLURAL_NAME is null) AND (X_SERVICE_PLURAL_NAME is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_SERVICE_ID in NUMBER,
  X_DEBUG_TYPE in VARCHAR2,
  X_DEBUG_CHANGE_ACTION in VARCHAR2,
  X_ALLOW_MULTIPLE_PROC_SI in VARCHAR2,
  X_DEFAULT_DEBUG_LEVEL in VARCHAR2,
  X_ENABLED in VARCHAR2,
  X_CARTRIDGE_APPLICATION_ID in NUMBER,
  X_ALLOW_MULTIPLE_PROC_INSTANCE in VARCHAR2,
  X_ALLOW_MULTIPLE_PROC_NODE in VARCHAR2,
  X_MIGRATE_ON_FAILURE in VARCHAR2,
  X_SERVER_TYPE in VARCHAR2,
  X_ALLOW_SUSPEND in VARCHAR2,
  X_ALLOW_VERIFY in VARCHAR2,
  X_ALLOW_PARAMETER in VARCHAR2,
  X_ALLOW_START in VARCHAR2,
  X_ALLOW_EDIT in VARCHAR2,
  X_CARTRIDGE_HANDLE in VARCHAR2,
  X_SERVICE_HANDLE in VARCHAR2,
  X_ALLOW_CREATE in VARCHAR2,
  X_SERVICE_CLASS in VARCHAR2,
  X_SERVICE_INSTANCE_CLASS in VARCHAR2,
  X_ALLOW_RCG in VARCHAR2,
  X_OAM_DISPLAY_ORDER in NUMBER,
  X_ALLOW_RESTART in VARCHAR2,
  X_PARAMETER_CHANGE_ACTION in VARCHAR2,
  X_DEVELOPER_PARAMETERS in VARCHAR2,
  X_ENV_FILE_NAME in VARCHAR2,
  X_SERVICE_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SERVICE_PLURAL_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update FND_CP_SERVICES set
    DEBUG_TYPE = X_DEBUG_TYPE,
    DEBUG_CHANGE_ACTION = X_DEBUG_CHANGE_ACTION,
    ALLOW_MULTIPLE_PROC_SI = X_ALLOW_MULTIPLE_PROC_SI,
    DEFAULT_DEBUG_LEVEL = X_DEFAULT_DEBUG_LEVEL,
    ENABLED = X_ENABLED,
    CARTRIDGE_APPLICATION_ID = X_CARTRIDGE_APPLICATION_ID,
    ALLOW_MULTIPLE_PROC_INSTANCE = X_ALLOW_MULTIPLE_PROC_INSTANCE,
    ALLOW_MULTIPLE_PROC_NODE = X_ALLOW_MULTIPLE_PROC_NODE,
    MIGRATE_ON_FAILURE = X_MIGRATE_ON_FAILURE,
    SERVER_TYPE = X_SERVER_TYPE,
    ALLOW_SUSPEND = X_ALLOW_SUSPEND,
    ALLOW_VERIFY = X_ALLOW_VERIFY,
    ALLOW_PARAMETER = X_ALLOW_PARAMETER,
    ALLOW_START = X_ALLOW_START,
    ALLOW_EDIT = X_ALLOW_EDIT,
    CARTRIDGE_HANDLE = X_CARTRIDGE_HANDLE,
    SERVICE_HANDLE = X_SERVICE_HANDLE,
    ALLOW_CREATE = X_ALLOW_CREATE,
    SERVICE_CLASS = X_SERVICE_CLASS,
    SERVICE_INSTANCE_CLASS = X_SERVICE_INSTANCE_CLASS,
    ALLOW_RCG = X_ALLOW_RCG,
    OAM_DISPLAY_ORDER = X_OAM_DISPLAY_ORDER,
    ALLOW_RESTART = X_ALLOW_RESTART,
    PARAMETER_CHANGE_ACTION = X_PARAMETER_CHANGE_ACTION,
    DEVELOPER_PARAMETERS = X_DEVELOPER_PARAMETERS,
    ENV_FILE_NAME = X_ENV_FILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where SERVICE_ID = X_SERVICE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update FND_CP_SERVICES_TL set
    SERVICE_NAME = X_SERVICE_NAME,
    DESCRIPTION = X_DESCRIPTION,
    SERVICE_PLURAL_NAME = X_SERVICE_PLURAL_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SERVICE_ID = X_SERVICE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_SERVICE_ID in NUMBER
) is
begin
  delete from FND_CP_SERVICES_TL
  where SERVICE_ID = X_SERVICE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from FND_CP_SERVICES
  where SERVICE_ID = X_SERVICE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin

/* Mar/19/03 requested by Ric Ginsberg */
/* The following delete and update statements are commented out */
/* as a quick workaround to fix the time-consuming table handler issue */
/* Eventually we'll need to turn them into a separate fix_language procedure */
/*

  delete from FND_CP_SERVICES_TL T
  where not exists
    (select NULL
    from FND_CP_SERVICES B
    where B.SERVICE_ID = T.SERVICE_ID
    );

  update FND_CP_SERVICES_TL T set (
      SERVICE_NAME,
      DESCRIPTION,
      SERVICE_PLURAL_NAME
    ) = (select
      B.SERVICE_NAME,
      B.DESCRIPTION,
      B.SERVICE_PLURAL_NAME
    from FND_CP_SERVICES_TL B
    where B.SERVICE_ID = T.SERVICE_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SERVICE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.SERVICE_ID,
      SUBT.LANGUAGE
    from FND_CP_SERVICES_TL SUBB, FND_CP_SERVICES_TL SUBT
    where SUBB.SERVICE_ID = SUBT.SERVICE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SERVICE_NAME <> SUBT.SERVICE_NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
      or SUBB.SERVICE_PLURAL_NAME <> SUBT.SERVICE_PLURAL_NAME
      or (SUBB.SERVICE_PLURAL_NAME is null and SUBT.SERVICE_PLURAL_NAME is not null)
      or (SUBB.SERVICE_PLURAL_NAME is not null and SUBT.SERVICE_PLURAL_NAME is null)
  ));
*/

  insert into FND_CP_SERVICES_TL (
    SERVICE_PLURAL_NAME,
    CREATION_DATE,
    CREATED_BY,
    DESCRIPTION,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    SERVICE_ID,
    SERVICE_NAME,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.SERVICE_PLURAL_NAME,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.DESCRIPTION,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.SERVICE_ID,
    B.SERVICE_NAME,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from FND_CP_SERVICES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from FND_CP_SERVICES_TL T
    where T.SERVICE_ID = B.SERVICE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end FND_CP_SERVICES_PKG;

/
