--------------------------------------------------------
--  DDL for Package Body PA_PAXCPGAL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXCPGAL_XMLP_PKG" AS
/* $Header: PAXCPGALB.pls 120.2 2008/01/03 12:11:31 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      NDF VARCHAR2(80);
      ERRBUF VARCHAR2(525);
      PA_PERIOD_END_DATE DATE;
      PA_THRU_DATE DATE;
      PA_DPIS_THRU_DATE DATE;
      P_CONC_REQUEST_ID NUMBER;
    BEGIN
      /*SRW.MESSAGE(10000
                 ,'Hello')*/NULL;
      SELECT
        MEANING
      INTO NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      SELECT
        P_DPIS_THROUGH
      INTO PA_DPIS_THRU_DATE
      FROM
        DUAL;
      SELECT
        P_CONC_REQUEST_ID
      INTO P_CONC_REQUEST_ID
      FROM
        DUAL;
      CURR_CODE := PA_CURRENCY.GET_CURRENCY_CODE;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        MEANING
      INTO NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      /*SRW.MESSAGE(1
                 ,'Calling set_in_service_thru_date')*/NULL;
      PA_FAXFACE.SET_IN_SERVICE_THRU_DATE(PA_DPIS_THRU_DATE);
      /*SRW.MESSAGE(1
                 ,'PA Through date entered ' || P_PA_THROUGH_DATE)*/NULL;
      SELECT
        P_PA_THROUGH_DATE
      INTO PA_THRU_DATE
      FROM
        DUAL;
      SELECT
        MAX(END_DATE)
      INTO PA_PERIOD_END_DATE
      FROM
        PA_PERIODS
      WHERE TRUNC(END_DATE) <= TRUNC(PA_THRU_DATE);
      /*SRW.MESSAGE(1
                 ,'PA Period End date used for generating asset lines ' || TO_CHAR(PA_PERIOD_END_DATE))*/NULL;
      /*SRW.MESSAGE(1
                 ,'Calling summarize_proj')*/NULL;
      BEGIN
        IF P_CAPITAL_EVENT_ID IS NOT NULL THEN
          BEGIN
            SELECT
              CAPITAL_EVENT_NUMBER
            INTO P_CAPITAL_EVENT_NUMBER
            FROM
              PA_CAPITAL_EVENTS
            WHERE CAPITAL_EVENT_ID = P_CAPITAL_EVENT_ID
              AND ROWNUM = 1;
          EXCEPTION
            WHEN OTHERS THEN
              NULL;
          END;
        END IF;
        PA_FAXFACE.SET_REQUEST_ID(P_CONC_REQUEST_ID);
        PA_FAXFACE.SUMMARIZE_PROJ(ERRBUF => ERRBUF
                                 ,RETCODE => C_RETCODE
                                 ,X_PROJECT_NUM_FROM => P_FROM_PROJECT_NUMBER
                                 ,X_PROJECT_NUM_TO => P_TO_PROJECT_NUMBER
                                 ,X_IN_SERVICE_DATE_THROUGH => PA_DPIS_THRU_DATE
                                 ,X_COMMON_TASKS_FLAG => P_INCLUDE_COMMON_TASKS
                                 ,X_PA_DATE => PA_PERIOD_END_DATE
                                 ,X_CAPITAL_EVENT_ID => P_CAPITAL_EVENT_ID
                                 ,X_DEBUG_MODE => P_DEBUG_MODE);
        PA_PAXCPGAL_XMLP_PKG.P_CONC_REQUEST_ID := P_CONC_REQUEST_ID;
        IF (C_RETCODE <> 0) THEN
          /*SRW.MESSAGE(1
                     ,ERRBUF)*/NULL;
        END IF;
      EXCEPTION
        WHEN STORAGE_ERROR THEN
          C_RETCODE := -9999;
          /*SRW.MESSAGE(1
                     ,'Exception: Storage Error')*/NULL;
        WHEN TIMEOUT_ON_RESOURCE THEN
          C_RETCODE := -9999;
          /*SRW.MESSAGE(1
                     ,'Exception: Time Out Occured, waiting for a resource')*/NULL;
        WHEN OTHERS THEN
          C_RETCODE := -9999;
          /*SRW.MESSAGE(1
                     ,'Exception was generated by SummarizeProj  API')*/NULL;
      END;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := NDF;
        C_DUMMY_DATA := 1;
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,SQLERRM)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    LP_PA_THROUGH_DATE:=to_char(P_PA_THROUGH_DATE,'DD-MON-YYYY');
    LP_DPIS_THROUGH:=to_char(P_DPIS_THROUGH,'DD-MON-YYYY');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME VARCHAR2(30);
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION UNASSIGNEDFORMULA(ASSET_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF ASSET_NAME = 'UNASSIGNED' THEN
      RETURN ('*');
    ELSE
      RETURN (NULL);
    END IF;
  END UNASSIGNEDFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      NUMBER_OF_MESSAGES NUMBER;
      MESSAGE_BUF VARCHAR2(2000);
      GEN_ERROR EXCEPTION;
    BEGIN
      NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
      /*SRW.MESSAGE(1
                 ,'Debug Messages: sa')*/NULL;
      FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
        PA_DEBUG.GET_MESSAGE(I
                            ,MESSAGE_BUF);
        /*SRW.MESSAGE(1
                   ,MESSAGE_BUF)*/NULL;
      END LOOP;
      IF (C_RETCODE <> 0) THEN
        RAISE GEN_ERROR;
      END IF;
      BEGIN
        DELETE FROM PA_CAPITAL_EXCEPTIONS
         WHERE REQUEST_ID = P_CONC_REQUEST_ID;
        DELETE FROM PA_REPORTING_EXCEPTIONS
         WHERE REQUEST_ID = P_CONC_REQUEST_ID
           AND ATTRIBUTE8 = 'PROJECT EVENT ERRORS';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_FORMAT_MASKFORMULA RETURN CHAR IS
  BEGIN
    RETURN (PA_MULTI_CURRENCY.GET_ACCT_CURRENCY_CODE);
  END CF_FORMAT_MASKFORMULA;

  FUNCTION CF_RET_UNASSIGNEDFORMULA(RET_ASSET_NAME IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF RET_ASSET_NAME IS NOT NULL THEN
      RETURN NULL;
    ELSE
      RETURN '*';
    END IF;
  END CF_RET_UNASSIGNEDFORMULA;

  FUNCTION CURR_CODEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (LTRIM(RTRIM(CURR_CODE)));
  END CURR_CODEFORMULA;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_RETCODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RETCODE;
  END C_RETCODE_P;

  FUNCTION CURR_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURR_CODE;
  END CURR_CODE_P;

END PA_PAXCPGAL_XMLP_PKG;


/
