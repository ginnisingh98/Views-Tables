--------------------------------------------------------
--  DDL for Package Body OE_VERSION_HISTORY_UTIL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OE_VERSION_HISTORY_UTIL" AS
/* $Header: OEXHVERB.pls 120.7.12010000.2 2010/04/12 10:09:05 msundara ship $ */

-- This API will be used to create history records for entities.
-- 1. oe_order_header_history
-- 2. oe_order_lines_history
-- 3. oe_price_adjs_history
-- 4. oe_sales_credit_history
-- It will skip the records which already exists for the specified version.
--
-- If the API is called just for Phase_Change then p_version_number should
-- be sent in as NULL and p_phase_change_flag = 'Y'.

--start bug 9503990
FUNCTION get_status (p_line_id  IN NUMBER, p_flow_status_code IN VARCHAR2) RETURN VARCHAR2 AS
released_count           NUMBER;
total_count              NUMBER;
l_flow_status_code VARCHAR2(80);
BEGIN
   --IF l_debug_level > 0 THEN
       oe_debug_pub.add('Entering get_status');
       oe_debug_pub.add('Flow Status Code:'||p_flow_status_code);
    --END IF;

    l_flow_status_code  :=  p_flow_status_code;

    IF p_flow_status_code is null THEN
       SELECT  flow_status_code
         INTO  l_flow_status_code
         FROM  oe_order_lines_all
        WHERE  line_id=p_line_id;
    END IF;

    IF l_flow_status_code <> 'AWAITING_SHIPPING' AND
            l_flow_status_code <> 'PRODUCTION_COMPLETE' AND
            l_flow_status_code <> 'PICKED' AND
            l_flow_status_code <> 'PICKED_PARTIAL' AND
            l_flow_status_code <> 'PO_RECEIVED'
    THEN
         RETURN l_flow_status_code;
    ELSE
       SELECT sum(decode(released_status, 'Y', 1, 'C', 1, 0)), sum(1)
            INTO released_count, total_count
            FROM wsh_delivery_details
            WHERE source_line_id   =  p_line_id
            AND   source_code      = 'OE'
            AND   released_status  <> 'D';
       IF released_count = total_count THEN
         RETURN 'PICKED';
       ELSIF released_count < total_count and released_count <> 0 THEN
         RETURN 'PICKED_PARTIAL';
       ELSE
         RETURN l_flow_status_code;
       END IF;

    END IF;

END get_status;
-- end bug 9503990

PROCEDURE Create_Version_History
 (p_header_id          IN  NUMBER
  ,p_version_number    IN  NUMBER
  ,p_phase_change_flag IN  VARCHAR2
  ,p_changed_attribute IN  VARCHAR2 := NULL
  ,x_return_status     IN OUT NOCOPY VARCHAR2)
IS
  l_api_name    VARCHAR2(30) := 'Create_Version_History';
  l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;
  l_version_number NUMBER;
  l_version_flag   VARCHAR2(1);
  l_instrument_id      NUMBER;
  l_credit_card_number VARCHAR2(10);
  l_credit_card_code   VARCHAR2(10);
  l_credit_card_holder_name   VARCHAR2(10);
  l_credit_card_expiration_date   DATE;

BEGIN
   --  Initialize API return status to success
   x_return_status := FND_API.G_RET_STS_SUCCESS;

   -- If the call is made just to create PHASE_CHANGE history then caller will
   -- send in p_version_number as NULL.
   IF p_version_number IS NULL and p_phase_change_flag = 'Y' THEN

       SELECT version_number
       INTO l_version_number
       FROM oe_order_headers
       WHERE header_id = p_header_id;

       l_version_flag := 'N';
   ELSE
       l_version_number := p_version_number;
       l_version_flag := 'Y';
   END IF;

-- First Create History Records for Headers
   l_api_name := 'Create_Header_History';

   -- R12 CC encryption
   -- replaced the following query to join to base table for performance fix
   /*
   BEGIN
   SELECT ite.instrument_id
   INTO   l_instrument_id
   FROM   oe_payments op,
          iby_trxn_extensions_v ite
   WHERE  op.header_id = p_header_id
   AND    op.trxn_extension_id = ite.trxn_extension_id;
   EXCEPTION WHEN NO_DATA_FOUND THEN
     null;
   END;
   */

   BEGIN
   SELECT u.instrument_id
   INTO   l_instrument_id
   FROM   oe_payments op,
          iby_pmt_instr_uses_all u,
          iby_fndcpt_tx_extensions x
   WHERE  op.header_id = p_header_id
   AND    op.payment_type_code = 'CREDIT_CARD'
   AND    nvl(op.payment_collection_event, 'PREPAY') = 'INVOICE'
   AND    op.trxn_extension_id = x.trxn_extension_id
   AND    op.line_id is null
   AND     x.instr_assignment_id = u.instrument_payment_use_id;
   EXCEPTION WHEN NO_DATA_FOUND THEN
     null;
   END;


    -- for credit card orders, only instrument id is stored for credit card number
   -- and credit card code, need to set these two values to indicate the column
   -- instrument_id stores actual instrument_id, otherwise it stores the
   -- card history change id if other card attributes are being changed.
   IF l_instrument_id IS NOT NULL THEN
     IF p_changed_attribute IS NOT NULL  THEN

       IF l_debug_level  > 0 THEN
         oe_debug_pub.add(  'p_changed_attr is : ' || p_changed_attribute) ;
       END IF;

       -- store the instrument_id in column instruemnt_id
       -- if credit_card_number or credit_card_code is updated.
       IF instr(p_changed_attribute, 'CREDIT_CARD_NUMBER') > 0 THEN
         l_credit_card_number := '****';
       END IF;

       IF instr(p_changed_attribute, 'CREDIT_CARD_CODE') > 0 THEN
         l_credit_card_code := '****';
       END IF;

       IF instr(p_changed_attribute, 'CREDIT_CARD_HOLDER_NAME') > 0 THEN
         l_credit_card_holder_name := '****';
       END IF;

       IF instr(p_changed_attribute, 'CREDIT_CARD_EXPIRATION_DATE') > 0 THEN
         l_credit_card_expiration_date := sysdate;
       END IF;

       -- need to store card_history_change_id in column instrument_id
       -- if credit_card_expiration_date or credit_card_holder_name is updated

       IF l_credit_card_code IS NULL AND  l_credit_card_number IS NULL THEN
         BEGIN
           SELECT max(card_history_change_id)
           INTO   l_instrument_id
           FROM   iby_creditcard_h
           WHERE  instrid = l_instrument_id;
         EXCEPTION WHEN NO_DATA_FOUND THEN
           NULL;
         END;
      END IF;

     /**
     ELSIF p_changed_attribute IS NULL THEN
     -- need to store card_history_change_id in column instrument_id
     -- if credit_card_expiration_date or credit_card_holder_name is updated
       BEGIN
       SELECT max(card_history_change_id)
       INTO   l_instrument_id
       FROM   iby_creditcard_h
       WHERE  instrid = l_instrument_id;
       EXCEPTION WHEN NO_DATA_FOUND THEN
         NULL;
       END;
       **/

     END IF;
     IF l_debug_level  > 0 THEN
       oe_debug_pub.add(  'RECORDHEADERHIST:l_instrument_id is : ' || l_instrument_id) ;
     END IF;
   END IF;


   INSERT INTO OE_ORDER_HEADER_HISTORY
   (
   HEADER_ID,
   HIST_CREATION_DATE,
   ORG_ID,
   ORDER_TYPE_ID,
   ORDER_NUMBER,
   VERSION_NUMBER,
   EXPIRATION_DATE,
   ORDER_SOURCE_ID,
   SOURCE_DOCUMENT_TYPE_ID,
   ORIG_SYS_DOCUMENT_REF,
   SOURCE_DOCUMENT_ID,
   ORDERED_DATE,
   REQUEST_DATE,
   PRICING_DATE,
   SHIPMENT_PRIORITY_CODE,
   DEMAND_CLASS_CODE,
   PRICE_LIST_ID,
   TAX_EXEMPT_FLAG,
   TAX_EXEMPT_NUMBER,
   TAX_EXEMPT_REASON_CODE,
   CONVERSION_RATE,
   CONVERSION_TYPE_CODE,
   CONVERSION_RATE_DATE,
   PARTIAL_SHIPMENTS_ALLOWED,
   SHIP_TOLERANCE_ABOVE,
   SHIP_TOLERANCE_BELOW,
   TRANSACTIONAL_CURR_CODE,
   AGREEMENT_ID,
   TAX_POINT_CODE,
   CUST_PO_NUMBER,
   INVOICING_RULE_ID,
   ACCOUNTING_RULE_ID,
   PAYMENT_TERM_ID,
   SHIPPING_METHOD_CODE,
   FREIGHT_CARRIER_CODE,
   FOB_POINT_CODE,
   FREIGHT_TERMS_CODE,
   SOLD_FROM_ORG_ID,
   SOLD_TO_ORG_ID,
   SHIP_FROM_ORG_ID,
   SHIP_TO_ORG_ID,
   INVOICE_TO_ORG_ID,
   DELIVER_TO_ORG_ID,
   SOLD_TO_CONTACT_ID,
   SHIP_TO_CONTACT_ID,
   INVOICE_TO_CONTACT_ID,
   DELIVER_TO_CONTACT_ID,
   CREATION_DATE,
   CREATED_BY,
   LAST_UPDATED_BY,
   LAST_UPDATE_DATE,
   LAST_UPDATE_LOGIN,
   PROGRAM_APPLICATION_ID,
   PROGRAM_ID,
   PROGRAM_UPDATE_DATE,
   REQUEST_ID,
   CONTEXT,
   ATTRIBUTE1,
   ATTRIBUTE2,
   ATTRIBUTE3,
   ATTRIBUTE4,
   ATTRIBUTE5,
   ATTRIBUTE6,
   ATTRIBUTE7,
   ATTRIBUTE8,
   ATTRIBUTE9,
   ATTRIBUTE10,
   ATTRIBUTE11,
   ATTRIBUTE12,
   ATTRIBUTE13,
   ATTRIBUTE14,
   ATTRIBUTE15,
   GLOBAL_ATTRIBUTE_CATEGORY,
   GLOBAL_ATTRIBUTE1,
   GLOBAL_ATTRIBUTE2,
   GLOBAL_ATTRIBUTE3,
   GLOBAL_ATTRIBUTE4,
   GLOBAL_ATTRIBUTE5,
   GLOBAL_ATTRIBUTE6,
   GLOBAL_ATTRIBUTE7,
   GLOBAL_ATTRIBUTE8,
   GLOBAL_ATTRIBUTE9,
   GLOBAL_ATTRIBUTE10,
   GLOBAL_ATTRIBUTE11,
   GLOBAL_ATTRIBUTE12,
   GLOBAL_ATTRIBUTE13,
   GLOBAL_ATTRIBUTE14,
   GLOBAL_ATTRIBUTE15,
   GLOBAL_ATTRIBUTE16,
   GLOBAL_ATTRIBUTE17,
   GLOBAL_ATTRIBUTE18,
   GLOBAL_ATTRIBUTE19,
   GLOBAL_ATTRIBUTE20,
   CANCELLED_FLAG,
   OPEN_FLAG,
   BOOKED_FLAG,
   SALESREP_ID,
   RETURN_REASON_CODE,
   ORDER_DATE_TYPE_CODE,
   EARLIEST_SCHEDULE_LIMIT,
   LATEST_SCHEDULE_LIMIT,
   PAYMENT_TYPE_CODE,
   PAYMENT_AMOUNT,
   CHECK_NUMBER,
   CREDIT_CARD_NUMBER,
   CREDIT_CARD_CODE,
   CREDIT_CARD_HOLDER_NAME,
   CREDIT_CARD_EXPIRATION_DATE,
   -- CREDIT_CARD_APPROVAL_CODE,
   SALES_CHANNEL_CODE,
   FIRST_ACK_CODE,
   FIRST_ACK_DATE,
   LAST_ACK_CODE,
   LAST_ACK_DATE,
   ORDER_CATEGORY_CODE,
   CHANGE_SEQUENCE,
   SHIPPING_INSTRUCTIONS,
   PACKING_INSTRUCTIONS,
   TP_CONTEXT,
   TP_ATTRIBUTE1,
   TP_ATTRIBUTE2,
   TP_ATTRIBUTE3,
   TP_ATTRIBUTE4,
   TP_ATTRIBUTE5,
   TP_ATTRIBUTE6,
   TP_ATTRIBUTE7,
   TP_ATTRIBUTE8,
   TP_ATTRIBUTE9,
   TP_ATTRIBUTE10,
   TP_ATTRIBUTE11,
   TP_ATTRIBUTE12,
   TP_ATTRIBUTE13,
   TP_ATTRIBUTE14,
   TP_ATTRIBUTE15,
   FLOW_STATUS_CODE,
   MARKETING_SOURCE_CODE_ID,
   CREDIT_CARD_APPROVAL_DATE,
   UPGRADED_FLAG,
   CUSTOMER_PREFERENCE_SET_CODE,
   BOOKED_DATE,
   LOCK_CONTROL,
   REASON_CODE,
   HIST_COMMENTS,
   HIST_TYPE_CODE,
   HIST_CREATED_BY,
   RESPONSIBILITY_ID,
   PRICE_REQUEST_CODE,
   ACCOUNTING_RULE_DURATION,
   ATTRIBUTE16,
   ATTRIBUTE17,
   ATTRIBUTE18,
   ATTRIBUTE19,
   ATTRIBUTE20,
   ITEM_RELATIONSHIP_TYPE,
   BLANKET_NUMBER,
   SALES_DOCUMENT_TYPE_CODE,
   SOLD_TO_PHONE_ID,
   QUOTE_NUMBER,
   SALES_DOCUMENT_NAME,
   TRANSACTION_PHASE_CODE,
   USER_STATUS_CODE,
   DRAFT_SUBMITTED_FLAG,
   SOURCE_DOCUMENT_VERSION_NUMBER,
   SOLD_TO_SITE_USE_ID,
   QUOTE_DATE,
   SUPPLIER_SIGNATURE,
   SUPPLIER_SIGNATURE_DATE,
   CUSTOMER_SIGNATURE,
   CUSTOMER_SIGNATURE_DATE,
   AUDIT_FLAG,
   VERSION_FLAG,
   PHASE_CHANGE_FLAG,
--key Transaction Dates
   ORDER_FIRMED_DATE,
   INSTRUMENT_ID
   )
 SELECT
   HEADER_ID,
   sysdate,
   ORG_ID,
   ORDER_TYPE_ID,
   ORDER_NUMBER,
   VERSION_NUMBER,
   EXPIRATION_DATE,
   ORDER_SOURCE_ID,
   SOURCE_DOCUMENT_TYPE_ID,
   ORIG_SYS_DOCUMENT_REF,
   SOURCE_DOCUMENT_ID,
   ORDERED_DATE,
   REQUEST_DATE,
   PRICING_DATE,
   SHIPMENT_PRIORITY_CODE,
   DEMAND_CLASS_CODE,
   PRICE_LIST_ID,
   TAX_EXEMPT_FLAG,
   TAX_EXEMPT_NUMBER,
   TAX_EXEMPT_REASON_CODE,
   CONVERSION_RATE,
   CONVERSION_TYPE_CODE,
   CONVERSION_RATE_DATE,
   PARTIAL_SHIPMENTS_ALLOWED,
   SHIP_TOLERANCE_ABOVE,
   SHIP_TOLERANCE_BELOW,
   TRANSACTIONAL_CURR_CODE,
   AGREEMENT_ID,
   TAX_POINT_CODE,
   CUST_PO_NUMBER,
   INVOICING_RULE_ID,
   ACCOUNTING_RULE_ID,
   PAYMENT_TERM_ID,
   SHIPPING_METHOD_CODE,
   FREIGHT_CARRIER_CODE,
   FOB_POINT_CODE,
   FREIGHT_TERMS_CODE,
   SOLD_FROM_ORG_ID,
   SOLD_TO_ORG_ID,
   SHIP_FROM_ORG_ID,
   SHIP_TO_ORG_ID,
   INVOICE_TO_ORG_ID,
   DELIVER_TO_ORG_ID,
   SOLD_TO_CONTACT_ID,
   SHIP_TO_CONTACT_ID,
   INVOICE_TO_CONTACT_ID,
   DELIVER_TO_CONTACT_ID,
   CREATION_DATE,
   CREATED_BY,
   LAST_UPDATED_BY,
   LAST_UPDATE_DATE,
   LAST_UPDATE_LOGIN,
   PROGRAM_APPLICATION_ID,
   PROGRAM_ID,
   PROGRAM_UPDATE_DATE,
   REQUEST_ID,
   CONTEXT,
   ATTRIBUTE1,
   ATTRIBUTE2,
   ATTRIBUTE3,
   ATTRIBUTE4,
   ATTRIBUTE5,
   ATTRIBUTE6,
   ATTRIBUTE7,
   ATTRIBUTE8,
   ATTRIBUTE9,
   ATTRIBUTE10,
   ATTRIBUTE11,
   ATTRIBUTE12,
   ATTRIBUTE13,
   ATTRIBUTE14,
   ATTRIBUTE15,
   GLOBAL_ATTRIBUTE_CATEGORY,
   GLOBAL_ATTRIBUTE1,
   GLOBAL_ATTRIBUTE2,
   GLOBAL_ATTRIBUTE3,
   GLOBAL_ATTRIBUTE4,
   GLOBAL_ATTRIBUTE5,
   GLOBAL_ATTRIBUTE6,
   GLOBAL_ATTRIBUTE7,
   GLOBAL_ATTRIBUTE8,
   GLOBAL_ATTRIBUTE9,
   GLOBAL_ATTRIBUTE10,
   GLOBAL_ATTRIBUTE11,
   GLOBAL_ATTRIBUTE12,
   GLOBAL_ATTRIBUTE13,
   GLOBAL_ATTRIBUTE14,
   GLOBAL_ATTRIBUTE15,
   GLOBAL_ATTRIBUTE16,
   GLOBAL_ATTRIBUTE17,
   GLOBAL_ATTRIBUTE18,
   GLOBAL_ATTRIBUTE19,
   GLOBAL_ATTRIBUTE20,
   CANCELLED_FLAG,
   OPEN_FLAG,
   BOOKED_FLAG,
   SALESREP_ID,
   RETURN_REASON_CODE,
   ORDER_DATE_TYPE_CODE,
   EARLIEST_SCHEDULE_LIMIT,
   LATEST_SCHEDULE_LIMIT,
   PAYMENT_TYPE_CODE,
   PAYMENT_AMOUNT,
   CHECK_NUMBER,
   L_CREDIT_CARD_NUMBER,
   L_CREDIT_CARD_CODE,
   L_CREDIT_CARD_HOLDER_NAME,
   L_CREDIT_CARD_EXPIRATION_DATE,
   -- CREDIT_CARD_APPROVAL_CODE,
   SALES_CHANNEL_CODE,
   FIRST_ACK_CODE,
   FIRST_ACK_DATE,
   LAST_ACK_CODE,
   LAST_ACK_DATE,
   ORDER_CATEGORY_CODE,
   CHANGE_SEQUENCE,
   SHIPPING_INSTRUCTIONS,
   PACKING_INSTRUCTIONS,
   TP_CONTEXT,
   TP_ATTRIBUTE1,
   TP_ATTRIBUTE2,
   TP_ATTRIBUTE3,
   TP_ATTRIBUTE4,
   TP_ATTRIBUTE5,
   TP_ATTRIBUTE6,
   TP_ATTRIBUTE7,
   TP_ATTRIBUTE8,
   TP_ATTRIBUTE9,
   TP_ATTRIBUTE10,
   TP_ATTRIBUTE11,
   TP_ATTRIBUTE12,
   TP_ATTRIBUTE13,
   TP_ATTRIBUTE14,
   TP_ATTRIBUTE15,
   FLOW_STATUS_CODE,
   MARKETING_SOURCE_CODE_ID,
   CREDIT_CARD_APPROVAL_DATE,
   UPGRADED_FLAG,
   CUSTOMER_PREFERENCE_SET_CODE,
   BOOKED_DATE,
   LOCK_CONTROL,
   NULL, --REASON_CODE,
   NULL, --HIST_COMMENTS,
   NULL, --HIST_TYPE_CODE,
   nvl(FND_GLOBAL.USER_ID, -1), --HIST_CREATED_BY,
   nvl(FND_GLOBAL.RESP_ID, -1), --RESPONSIBILITY_ID,
   PRICE_REQUEST_CODE,
   ACCOUNTING_RULE_DURATION,
   ATTRIBUTE16,
   ATTRIBUTE17,
   ATTRIBUTE18,
   ATTRIBUTE19,
   ATTRIBUTE20,
   NULL, --ITEM_RELATIONSHIP_TYPE,
   BLANKET_NUMBER,
   SALES_DOCUMENT_TYPE_CODE,
   SOLD_TO_PHONE_ID,
   QUOTE_NUMBER,
   SALES_DOCUMENT_NAME,
   TRANSACTION_PHASE_CODE,
   USER_STATUS_CODE,
   DRAFT_SUBMITTED_FLAG,
   SOURCE_DOCUMENT_VERSION_NUMBER,
   SOLD_TO_SITE_USE_ID,
   QUOTE_DATE,
   SUPPLIER_SIGNATURE,
   SUPPLIER_SIGNATURE_DATE,
   CUSTOMER_SIGNATURE,
   CUSTOMER_SIGNATURE_DATE,
   'N', -- AUDIT_FLAG,
   l_version_flag, -- VERSION_FLAG,
   p_phase_change_flag, --PHASE_CHANGE_FLAG
--key Transaction Dates
   order_firmed_date,
   l_instrument_id
 FROM OE_ORDER_HEADERS a
 WHERE a.header_id = p_header_id
 AND NOT EXISTS (SELECT b.header_id
                 FROM OE_ORDER_HEADER_HISTORY b
                 WHERE a.header_id = b.header_id
                 AND b.version_number = l_version_number
                 AND b.version_flag = l_version_flag);
  IF l_debug_level > 0 THEN
      oe_debug_pub.add(' No. of History Records for Header ' ||SQL%ROWCOUNT);
  END IF;

-- Create History Records for Lines
   l_api_name := 'Create_Line_History';

   INSERT INTO oe_order_lines_history
   (
   LINE_ID,
   ORG_ID,
   HEADER_ID,
   LINE_TYPE_ID,
   LINE_NUMBER,
   REQUEST_DATE,
   PROMISE_DATE,
   SCHEDULE_SHIP_DATE,
   ORDER_QUANTITY_UOM,
   PRICING_QUANTITY,
   PRICING_QUANTITY_UOM,
   CANCELLED_QUANTITY,
   SHIPPED_QUANTITY,
   ORDERED_QUANTITY,
   FULFILLED_QUANTITY,
   SHIPPING_QUANTITY,
   SHIPPING_QUANTITY_UOM,
   DELIVERY_LEAD_TIME,
   TAX_EXEMPT_FLAG,
   TAX_EXEMPT_NUMBER,
   TAX_EXEMPT_REASON_CODE,
   SHIP_FROM_ORG_ID,
   SHIP_TO_ORG_ID,
   INVOICE_TO_ORG_ID,
   DELIVER_TO_ORG_ID,
   SHIP_TO_CONTACT_ID,
   DELIVER_TO_CONTACT_ID,
   INVOICE_TO_CONTACT_ID,
   SOLD_FROM_ORG_ID,
   SOLD_TO_ORG_ID,
   CUST_PO_NUMBER,
   SHIP_TOLERANCE_ABOVE,
   SHIP_TOLERANCE_BELOW,
   DEMAND_BUCKET_TYPE_CODE,
   VEH_CUS_ITEM_CUM_KEY_ID,
   RLA_SCHEDULE_TYPE_CODE,
   CUSTOMER_DOCK_CODE,
   CUSTOMER_JOB,
   CUSTOMER_PRODUCTION_LINE,
   CUST_MODEL_SERIAL_NUMBER,
   PROJECT_ID,
   TASK_ID,
   INVENTORY_ITEM_ID,
   TAX_DATE,
   TAX_CODE,
   TAX_RATE,
   DEMAND_CLASS_CODE,
   PRICE_LIST_ID,
   PRICING_DATE,
   SHIPMENT_NUMBER,
   AGREEMENT_ID,
   SHIPMENT_PRIORITY_CODE,
   SHIPPING_METHOD_CODE,
   FREIGHT_CARRIER_CODE,
   FREIGHT_TERMS_CODE,
   FOB_POINT_CODE,
   TAX_POINT_CODE,
   PAYMENT_TERM_ID,
   INVOICING_RULE_ID,
   ACCOUNTING_RULE_ID,
   SOURCE_DOCUMENT_TYPE_ID,
   ORIG_SYS_DOCUMENT_REF,
   SOURCE_DOCUMENT_ID,
   ORIG_SYS_LINE_REF,
   SOURCE_DOCUMENT_LINE_ID,
   REFERENCE_LINE_ID,
   REFERENCE_TYPE,
   REFERENCE_HEADER_ID,
   ITEM_REVISION,
   UNIT_SELLING_PRICE,
   UNIT_LIST_PRICE,
   TAX_VALUE,
   CONTEXT,
   ATTRIBUTE1,
   ATTRIBUTE2,
   ATTRIBUTE3,
   ATTRIBUTE4,
   ATTRIBUTE5,
   ATTRIBUTE6,
   ATTRIBUTE7,
   ATTRIBUTE8,
   ATTRIBUTE9,
   ATTRIBUTE10,
   ATTRIBUTE11,
   ATTRIBUTE12,
   ATTRIBUTE13,
   ATTRIBUTE14,
   ATTRIBUTE15,
   GLOBAL_ATTRIBUTE_CATEGORY,
   GLOBAL_ATTRIBUTE1,
   GLOBAL_ATTRIBUTE2,
   GLOBAL_ATTRIBUTE3,
   GLOBAL_ATTRIBUTE4,
   GLOBAL_ATTRIBUTE5,
   GLOBAL_ATTRIBUTE6,
   GLOBAL_ATTRIBUTE7,
   GLOBAL_ATTRIBUTE8,
   GLOBAL_ATTRIBUTE9,
   GLOBAL_ATTRIBUTE10,
   GLOBAL_ATTRIBUTE11,
   GLOBAL_ATTRIBUTE12,
   GLOBAL_ATTRIBUTE13,
   GLOBAL_ATTRIBUTE14,
   GLOBAL_ATTRIBUTE15,
   GLOBAL_ATTRIBUTE16,
   GLOBAL_ATTRIBUTE17,
   GLOBAL_ATTRIBUTE18,
   GLOBAL_ATTRIBUTE19,
   GLOBAL_ATTRIBUTE20,
   PRICING_CONTEXT,
   PRICING_ATTRIBUTE1,
   PRICING_ATTRIBUTE2,
   PRICING_ATTRIBUTE3,
   PRICING_ATTRIBUTE4,
   PRICING_ATTRIBUTE5,
   PRICING_ATTRIBUTE6,
   PRICING_ATTRIBUTE7,
   PRICING_ATTRIBUTE8,
   PRICING_ATTRIBUTE9,
   PRICING_ATTRIBUTE10,
   INDUSTRY_CONTEXT,
   INDUSTRY_ATTRIBUTE1,
   INDUSTRY_ATTRIBUTE2,
   INDUSTRY_ATTRIBUTE3,
   INDUSTRY_ATTRIBUTE4,
   INDUSTRY_ATTRIBUTE5,
   INDUSTRY_ATTRIBUTE6,
   INDUSTRY_ATTRIBUTE7,
   INDUSTRY_ATTRIBUTE8,
   INDUSTRY_ATTRIBUTE9,
   INDUSTRY_ATTRIBUTE10,
   INDUSTRY_ATTRIBUTE11,
   INDUSTRY_ATTRIBUTE13,
   INDUSTRY_ATTRIBUTE12,
   INDUSTRY_ATTRIBUTE14,
   INDUSTRY_ATTRIBUTE15,
   INDUSTRY_ATTRIBUTE16,
   INDUSTRY_ATTRIBUTE17,
   INDUSTRY_ATTRIBUTE18,
   INDUSTRY_ATTRIBUTE19,
   INDUSTRY_ATTRIBUTE20,
   INDUSTRY_ATTRIBUTE21,
   INDUSTRY_ATTRIBUTE22,
   INDUSTRY_ATTRIBUTE23,
   INDUSTRY_ATTRIBUTE24,
   INDUSTRY_ATTRIBUTE25,
   INDUSTRY_ATTRIBUTE26,
   INDUSTRY_ATTRIBUTE27,
   INDUSTRY_ATTRIBUTE28,
   INDUSTRY_ATTRIBUTE29,
   INDUSTRY_ATTRIBUTE30,
   CREATION_DATE,
   CREATED_BY,
   LAST_UPDATE_DATE,
   LAST_UPDATED_BY,
   LAST_UPDATE_LOGIN,
   PROGRAM_APPLICATION_ID,
   PROGRAM_ID,
   PROGRAM_UPDATE_DATE,
   REQUEST_ID,
   CONFIGURATION_ID,
   LINK_TO_LINE_ID,
   COMPONENT_SEQUENCE_ID,
   COMPONENT_CODE,
   CONFIG_DISPLAY_SEQUENCE,
   SORT_ORDER,
   ITEM_TYPE_CODE,
   OPTION_NUMBER,
   OPTION_FLAG,
   DEP_PLAN_REQUIRED_FLAG,
   VISIBLE_DEMAND_FLAG,
   LINE_CATEGORY_CODE,
   ACTUAL_SHIPMENT_DATE,
   CUSTOMER_TRX_LINE_ID,
   RETURN_CONTEXT,
   RETURN_ATTRIBUTE1,
   RETURN_ATTRIBUTE2,
   RETURN_ATTRIBUTE3,
   RETURN_ATTRIBUTE4,
   RETURN_ATTRIBUTE5,
   RETURN_ATTRIBUTE6,
   RETURN_ATTRIBUTE7,
   RETURN_ATTRIBUTE8,
   RETURN_ATTRIBUTE9,
   RETURN_ATTRIBUTE10,
   RETURN_ATTRIBUTE11,
   RETURN_ATTRIBUTE12,
   RETURN_ATTRIBUTE13,
   RETURN_ATTRIBUTE14,
   RETURN_ATTRIBUTE15,
   INTMED_SHIP_TO_ORG_ID,
   INTMED_SHIP_TO_CONTACT_ID,
   ACTUAL_ARRIVAL_DATE,
   ATO_LINE_ID,
   AUTO_SELECTED_QUANTITY,
   COMPONENT_NUMBER,
   EARLIEST_ACCEPTABLE_DATE,
   EXPLOSION_DATE,
   LATEST_ACCEPTABLE_DATE,
   MODEL_GROUP_NUMBER,
   SCHEDULE_ARRIVAL_DATE,
   SHIP_MODEL_COMPLETE_FLAG,
   SCHEDULE_STATUS_CODE,
   SOURCE_TYPE_CODE,
   TOP_MODEL_LINE_ID,
   BOOKED_FLAG,
   CANCELLED_FLAG,
   OPEN_FLAG,
   LOAD_SEQ_NUMBER,
   DELIVERY_ID,
   SALESREP_ID,
   RETURN_REASON_CODE,
   WF_ACTIVITY_CODE,
   WF_RESULT_CODE,
   REASON_CODE,
   HIST_COMMENTS,
   HIST_TYPE_CODE,
   HIST_CREATION_DATE,
   HIST_CREATED_BY,
   CUST_PRODUCTION_SEQ_NUM,
   AUTHORIZED_TO_SHIP_FLAG,
   SPLIT_FROM_LINE_ID,
   OVER_SHIP_REASON_CODE,
   OVER_SHIP_RESOLVED_FLAG,
   ITEM_IDENTIFIER_TYPE,
   ARRIVAL_SET_ID,
   SHIP_SET_ID,
   COMMITMENT_ID,
   SHIPPING_INTERFACED_FLAG,
   CREDIT_INVOICE_LINE_ID,
   MFG_COMPONENT_SEQUENCE_ID,
   TP_CONTEXT,
   TP_ATTRIBUTE1,
   TP_ATTRIBUTE2,
   TP_ATTRIBUTE3,
   TP_ATTRIBUTE4,
   TP_ATTRIBUTE5,
   TP_ATTRIBUTE6,
   TP_ATTRIBUTE7,
   TP_ATTRIBUTE8,
   TP_ATTRIBUTE9,
   TP_ATTRIBUTE10,
   TP_ATTRIBUTE11,
   TP_ATTRIBUTE12,
   TP_ATTRIBUTE13,
   TP_ATTRIBUTE14,
   TP_ATTRIBUTE15,
   FULFILLMENT_METHOD_CODE,
   SERVICE_REFERENCE_TYPE_CODE,
   SERVICE_REFERENCE_LINE_ID,
   SERVICE_REFERENCE_SYSTEM_ID,
   INVOICE_INTERFACE_STATUS_CODE,
   ORDERED_ITEM,
   ORDERED_ITEM_ID,
   SERVICE_NUMBER,
   SERVICED_LINE_ID,
   SERVICE_DURATION,
   SERVICE_START_DATE,
   RE_SOURCE_FLAG,
   FLOW_STATUS_CODE,
   SERVICE_END_DATE,
   SERVICE_COTERMINATE_FLAG,
   SHIPPABLE_FLAG,
   ORDER_SOURCE_ID,
   ORIG_SYS_SHIPMENT_REF,
   CHANGE_SEQUENCE,
   DROP_SHIP_FLAG,
   CUSTOMER_LINE_NUMBER,
   CUSTOMER_SHIPMENT_NUMBER,
   CUSTOMER_ITEM_NET_PRICE,
   CUSTOMER_PAYMENT_TERM_ID,
   FIRST_ACK_DATE,
   FIRST_ACK_CODE,
   LAST_ACK_CODE,
   LAST_ACK_DATE,
   PLANNING_PRIORITY,
   SERVICE_TXN_COMMENTS,
   SERVICE_PERIOD,
   UNIT_SELLING_PERCENT,
   UNIT_LIST_PERCENT,
   UNIT_PERCENT_BASE_PRICE,
   MODEL_REMNANT_FLAG,
   SERVICE_TXN_REASON_CODE,
   CALCULATE_PRICE_FLAG,
   ITEM_INPUT,
   CUSTOMER_ITEM_ID,
   CUSTOMER_ITEM_REVISION,
   ITEM_ID,
   INVOICE_COMPLETE_FLAG,
   END_ITEM_UNIT_NUMBER,
   FULFILLED_FLAG,
   CONFIG_HEADER_ID,
   CONFIG_REV_NBR,
   SHIPPING_INSTRUCTIONS,
   PACKING_INSTRUCTIONS,
   INVOICED_QUANTITY,
   REFERENCE_CUSTOMER_TRX_LINE_ID,
   SPLIT_BY,
   LINE_SET_ID,
   REVENUE_AMOUNT,
   FULFILLMENT_DATE,
   PREFERRED_GRADE,
   ORDERED_QUANTITY2,
   ORDERED_QUANTITY_UOM2,
   SHIPPED_QUANTITY2,
   CANCELLED_QUANTITY2,
   SHIPPING_QUANTITY2,
   SHIPPING_QUANTITY_UOM2,
   FULFILLED_QUANTITY2,
   SUBINVENTORY,
   RESPONSIBILITY_ID,
   UNIT_LIST_PRICE_PER_PQTY,
   UNIT_SELLING_PRICE_PER_PQTY,
   LATEST_CANCELLED_QUANTITY,
   PRICE_REQUEST_CODE,
   LATE_DEMAND_PENALTY_FACTOR,
   OVERRIDE_ATP_DATE_CODE,
   ITEM_SUBSTITUTION_TYPE_CODE,
   ORIGINAL_ITEM_IDENTIFIER_TYPE,
   ORIGINAL_ORDERED_ITEM,
   ORIGINAL_ORDERED_ITEM_ID,
   ORIGINAL_INVENTORY_ITEM_ID,
   ACCOUNTING_RULE_DURATION,
   ATTRIBUTE16,
   ATTRIBUTE17,
   ATTRIBUTE18,
   ATTRIBUTE19,
   ATTRIBUTE20,
   USER_ITEM_DESCRIPTION,
   ITEM_RELATIONSHIP_TYPE,
   BLANKET_NUMBER,
   BLANKET_LINE_NUMBER,
   BLANKET_VERSION_NUMBER,
   VERSION_NUMBER,
   SALES_DOCUMENT_TYPE_CODE,
   AUDIT_FLAG,
   VERSION_FLAG,
   PHASE_CHANGE_FLAG,
   TRANSACTION_PHASE_CODE,
   SOURCE_DOCUMENT_VERSION_NUMBER,
--key Transaction Dates
   ORDER_FIRMED_DATE,
   CHARGE_PERIODICITY_CODE,
   ACTUAL_FULFILLMENT_DATE
)
SELECT
   LINE_ID,
   ORG_ID,
   HEADER_ID,
   LINE_TYPE_ID,
   LINE_NUMBER,
   REQUEST_DATE,
   PROMISE_DATE,
   SCHEDULE_SHIP_DATE,
   ORDER_QUANTITY_UOM,
   PRICING_QUANTITY,
   PRICING_QUANTITY_UOM,
   CANCELLED_QUANTITY,
   SHIPPED_QUANTITY,
   ORDERED_QUANTITY,
   FULFILLED_QUANTITY,
   SHIPPING_QUANTITY,
   SHIPPING_QUANTITY_UOM,
   DELIVERY_LEAD_TIME,
   TAX_EXEMPT_FLAG,
   TAX_EXEMPT_NUMBER,
   TAX_EXEMPT_REASON_CODE,
   SHIP_FROM_ORG_ID,
   SHIP_TO_ORG_ID,
   INVOICE_TO_ORG_ID,
   DELIVER_TO_ORG_ID,
   SHIP_TO_CONTACT_ID,
   DELIVER_TO_CONTACT_ID,
   INVOICE_TO_CONTACT_ID,
   SOLD_FROM_ORG_ID,
   SOLD_TO_ORG_ID,
   CUST_PO_NUMBER,
   SHIP_TOLERANCE_ABOVE,
   SHIP_TOLERANCE_BELOW,
   DEMAND_BUCKET_TYPE_CODE,
   VEH_CUS_ITEM_CUM_KEY_ID,
   RLA_SCHEDULE_TYPE_CODE,
   CUSTOMER_DOCK_CODE,
   CUSTOMER_JOB,
   CUSTOMER_PRODUCTION_LINE,
   CUST_MODEL_SERIAL_NUMBER,
   PROJECT_ID,
   TASK_ID,
   INVENTORY_ITEM_ID,
   TAX_DATE,
   TAX_CODE,
   TAX_RATE,
   DEMAND_CLASS_CODE,
   PRICE_LIST_ID,
   PRICING_DATE,
   SHIPMENT_NUMBER,
   AGREEMENT_ID,
   SHIPMENT_PRIORITY_CODE,
   SHIPPING_METHOD_CODE,
   FREIGHT_CARRIER_CODE,
   FREIGHT_TERMS_CODE,
   FOB_POINT_CODE,
   TAX_POINT_CODE,
   PAYMENT_TERM_ID,
   INVOICING_RULE_ID,
   ACCOUNTING_RULE_ID,
   SOURCE_DOCUMENT_TYPE_ID,
   ORIG_SYS_DOCUMENT_REF,
   SOURCE_DOCUMENT_ID,
   ORIG_SYS_LINE_REF,
   SOURCE_DOCUMENT_LINE_ID,
   REFERENCE_LINE_ID,
   REFERENCE_TYPE,
   REFERENCE_HEADER_ID,
   ITEM_REVISION,
   UNIT_SELLING_PRICE,
   UNIT_LIST_PRICE,
   TAX_VALUE,
   CONTEXT,
   ATTRIBUTE1,
   ATTRIBUTE2,
   ATTRIBUTE3,
   ATTRIBUTE4,
   ATTRIBUTE5,
   ATTRIBUTE6,
   ATTRIBUTE7,
   ATTRIBUTE8,
   ATTRIBUTE9,
   ATTRIBUTE10,
   ATTRIBUTE11,
   ATTRIBUTE12,
   ATTRIBUTE13,
   ATTRIBUTE14,
   ATTRIBUTE15,
   GLOBAL_ATTRIBUTE_CATEGORY,
   GLOBAL_ATTRIBUTE1,
   GLOBAL_ATTRIBUTE2,
   GLOBAL_ATTRIBUTE3,
   GLOBAL_ATTRIBUTE4,
   GLOBAL_ATTRIBUTE5,
   GLOBAL_ATTRIBUTE6,
   GLOBAL_ATTRIBUTE7,
   GLOBAL_ATTRIBUTE8,
   GLOBAL_ATTRIBUTE9,
   GLOBAL_ATTRIBUTE10,
   GLOBAL_ATTRIBUTE11,
   GLOBAL_ATTRIBUTE12,
   GLOBAL_ATTRIBUTE13,
   GLOBAL_ATTRIBUTE14,
   GLOBAL_ATTRIBUTE15,
   GLOBAL_ATTRIBUTE16,
   GLOBAL_ATTRIBUTE17,
   GLOBAL_ATTRIBUTE18,
   GLOBAL_ATTRIBUTE19,
   GLOBAL_ATTRIBUTE20,
   PRICING_CONTEXT,
   PRICING_ATTRIBUTE1,
   PRICING_ATTRIBUTE2,
   PRICING_ATTRIBUTE3,
   PRICING_ATTRIBUTE4,
   PRICING_ATTRIBUTE5,
   PRICING_ATTRIBUTE6,
   PRICING_ATTRIBUTE7,
   PRICING_ATTRIBUTE8,
   PRICING_ATTRIBUTE9,
   PRICING_ATTRIBUTE10,
   INDUSTRY_CONTEXT,
   INDUSTRY_ATTRIBUTE1,
   INDUSTRY_ATTRIBUTE2,
   INDUSTRY_ATTRIBUTE3,
   INDUSTRY_ATTRIBUTE4,
   INDUSTRY_ATTRIBUTE5,
   INDUSTRY_ATTRIBUTE6,
   INDUSTRY_ATTRIBUTE7,
   INDUSTRY_ATTRIBUTE8,
   INDUSTRY_ATTRIBUTE9,
   INDUSTRY_ATTRIBUTE10,
   INDUSTRY_ATTRIBUTE11,
   INDUSTRY_ATTRIBUTE13,
   INDUSTRY_ATTRIBUTE12,
   INDUSTRY_ATTRIBUTE14,
   INDUSTRY_ATTRIBUTE15,
   INDUSTRY_ATTRIBUTE16,
   INDUSTRY_ATTRIBUTE17,
   INDUSTRY_ATTRIBUTE18,
   INDUSTRY_ATTRIBUTE19,
   INDUSTRY_ATTRIBUTE20,
   INDUSTRY_ATTRIBUTE21,
   INDUSTRY_ATTRIBUTE22,
   INDUSTRY_ATTRIBUTE23,
   INDUSTRY_ATTRIBUTE24,
   INDUSTRY_ATTRIBUTE25,
   INDUSTRY_ATTRIBUTE26,
   INDUSTRY_ATTRIBUTE27,
   INDUSTRY_ATTRIBUTE28,
   INDUSTRY_ATTRIBUTE29,
   INDUSTRY_ATTRIBUTE30,
   CREATION_DATE,
   CREATED_BY,
   LAST_UPDATE_DATE,
   LAST_UPDATED_BY,
   LAST_UPDATE_LOGIN,
   PROGRAM_APPLICATION_ID,
   PROGRAM_ID,
   PROGRAM_UPDATE_DATE,
   REQUEST_ID,
   CONFIGURATION_ID,
   LINK_TO_LINE_ID,
   COMPONENT_SEQUENCE_ID,
   COMPONENT_CODE,
   CONFIG_DISPLAY_SEQUENCE,
   SORT_ORDER,
   ITEM_TYPE_CODE,
   OPTION_NUMBER,
   OPTION_FLAG,
   DEP_PLAN_REQUIRED_FLAG,
   VISIBLE_DEMAND_FLAG,
   LINE_CATEGORY_CODE,
   ACTUAL_SHIPMENT_DATE,
   CUSTOMER_TRX_LINE_ID,
   RETURN_CONTEXT,
   RETURN_ATTRIBUTE1,
   RETURN_ATTRIBUTE2,
   RETURN_ATTRIBUTE3,
   RETURN_ATTRIBUTE4,
   RETURN_ATTRIBUTE5,
   RETURN_ATTRIBUTE6,
   RETURN_ATTRIBUTE7,
   RETURN_ATTRIBUTE8,
   RETURN_ATTRIBUTE9,
   RETURN_ATTRIBUTE10,
   RETURN_ATTRIBUTE11,
   RETURN_ATTRIBUTE12,
   RETURN_ATTRIBUTE13,
   RETURN_ATTRIBUTE14,
   RETURN_ATTRIBUTE15,
   INTMED_SHIP_TO_ORG_ID,
   INTMED_SHIP_TO_CONTACT_ID,
   ACTUAL_ARRIVAL_DATE,
   ATO_LINE_ID,
   AUTO_SELECTED_QUANTITY,
   COMPONENT_NUMBER,
   EARLIEST_ACCEPTABLE_DATE,
   EXPLOSION_DATE,
   LATEST_ACCEPTABLE_DATE,
   MODEL_GROUP_NUMBER,
   SCHEDULE_ARRIVAL_DATE,
   SHIP_MODEL_COMPLETE_FLAG,
   SCHEDULE_STATUS_CODE,
   SOURCE_TYPE_CODE,
   TOP_MODEL_LINE_ID,
   BOOKED_FLAG,
   CANCELLED_FLAG,
   OPEN_FLAG,
   NULL, --LOAD_SEQ_NUMBER,
   NULL, --DELIVERY_ID,
   SALESREP_ID,
   RETURN_REASON_CODE,
   NULL, --WF_ACTIVITY_CODE,
   NULL, --WF_RESULT_CODE,
   NULL, --REASON_CODE,
   NULL, --HIST_COMMENTS,
   'VERSIONING', --HIST_TYPE_CODE,
   sysdate, --HIST_CREATION_DATE,
   nvl(FND_GLOBAL.USER_ID, -1), -- HIST_CREATED_BY,
   CUST_PRODUCTION_SEQ_NUM,
   AUTHORIZED_TO_SHIP_FLAG,
   SPLIT_FROM_LINE_ID,
   OVER_SHIP_REASON_CODE,
   OVER_SHIP_RESOLVED_FLAG,
   ITEM_IDENTIFIER_TYPE,
   ARRIVAL_SET_ID,
   SHIP_SET_ID,
   COMMITMENT_ID,
   SHIPPING_INTERFACED_FLAG,
   CREDIT_INVOICE_LINE_ID,
   MFG_COMPONENT_SEQUENCE_ID,
   TP_CONTEXT,
   TP_ATTRIBUTE1,
   TP_ATTRIBUTE2,
   TP_ATTRIBUTE3,
   TP_ATTRIBUTE4,
   TP_ATTRIBUTE5,
   TP_ATTRIBUTE6,
   TP_ATTRIBUTE7,
   TP_ATTRIBUTE8,
   TP_ATTRIBUTE9,
   TP_ATTRIBUTE10,
   TP_ATTRIBUTE11,
   TP_ATTRIBUTE12,
   TP_ATTRIBUTE13,
   TP_ATTRIBUTE14,
   TP_ATTRIBUTE15,
   FULFILLMENT_METHOD_CODE,
   SERVICE_REFERENCE_TYPE_CODE,
   SERVICE_REFERENCE_LINE_ID,
   SERVICE_REFERENCE_SYSTEM_ID,
   INVOICE_INTERFACE_STATUS_CODE,
   ORDERED_ITEM,
   ORDERED_ITEM_ID,
   SERVICE_NUMBER,
   NULL, -- SERVICED_LINE_ID,
   SERVICE_DURATION,
   SERVICE_START_DATE,
   RE_SOURCE_FLAG,
   OE_VERSION_HISTORY_UTIL.get_status(line_id,flow_status_code),-- bug 9503990 FLOW_STATUS_CODE,
   SERVICE_END_DATE,
   SERVICE_COTERMINATE_FLAG,
   SHIPPABLE_FLAG,
   ORDER_SOURCE_ID,
   ORIG_SYS_SHIPMENT_REF,
   CHANGE_SEQUENCE,
   DROP_SHIP_FLAG,
   CUSTOMER_LINE_NUMBER,
   CUSTOMER_SHIPMENT_NUMBER,
   CUSTOMER_ITEM_NET_PRICE,
   CUSTOMER_PAYMENT_TERM_ID,
   FIRST_ACK_DATE,
   FIRST_ACK_CODE,
   LAST_ACK_CODE,
   LAST_ACK_DATE,
   PLANNING_PRIORITY,
   SERVICE_TXN_COMMENTS,
   SERVICE_PERIOD,
   UNIT_SELLING_PERCENT,
   UNIT_LIST_PERCENT,
   UNIT_PERCENT_BASE_PRICE,
   MODEL_REMNANT_FLAG,
   SERVICE_TXN_REASON_CODE,
   CALCULATE_PRICE_FLAG,
   NULL, -- ITEM_INPUT,
   NULL, -- CUSTOMER_ITEM_ID,
   NULL, -- CUSTOMER_ITEM_REVISION,
   NULL, -- ITEM_ID ?? check the source
   NULL, -- INVOICE_COMPLETE_FLAG ?? check the source
   END_ITEM_UNIT_NUMBER,
   FULFILLED_FLAG,
   CONFIG_HEADER_ID,
   CONFIG_REV_NBR,
   SHIPPING_INSTRUCTIONS,
   PACKING_INSTRUCTIONS,
   INVOICED_QUANTITY,
   REFERENCE_CUSTOMER_TRX_LINE_ID,
   SPLIT_BY,
   LINE_SET_ID,
   REVENUE_AMOUNT,
   FULFILLMENT_DATE,
   PREFERRED_GRADE,
   ORDERED_QUANTITY2,
   ORDERED_QUANTITY_UOM2,
   SHIPPED_QUANTITY2,
   CANCELLED_QUANTITY2,
   SHIPPING_QUANTITY2,
   SHIPPING_QUANTITY_UOM2,
   FULFILLED_QUANTITY2,
   SUBINVENTORY,
   nvl(FND_GLOBAL.RESP_ID, -1), --RESPONSIBILITY_ID
   UNIT_LIST_PRICE_PER_PQTY,
   UNIT_SELLING_PRICE_PER_PQTY,
   NULL, -- LATEST_CANCELLED_QUANTITY
   PRICE_REQUEST_CODE,
   LATE_DEMAND_PENALTY_FACTOR,
   OVERRIDE_ATP_DATE_CODE,
   ITEM_SUBSTITUTION_TYPE_CODE,
   ORIGINAL_ITEM_IDENTIFIER_TYPE,
   ORIGINAL_ORDERED_ITEM,
   ORIGINAL_ORDERED_ITEM_ID,
   ORIGINAL_INVENTORY_ITEM_ID,
   ACCOUNTING_RULE_DURATION,
   ATTRIBUTE16,
   ATTRIBUTE17,
   ATTRIBUTE18,
   ATTRIBUTE19,
   ATTRIBUTE20,
   USER_ITEM_DESCRIPTION,
   ITEM_RELATIONSHIP_TYPE,
   BLANKET_NUMBER,
   BLANKET_LINE_NUMBER,
   BLANKET_VERSION_NUMBER,
   l_version_number, -- VERSION_NUMBER,
   SALES_DOCUMENT_TYPE_CODE,
   'N', -- AUDIT_FLAG
   l_version_flag, -- VERSION_FLAG
   p_phase_change_flag, --PHASE_CHANGE_FLAG,
   TRANSACTION_PHASE_CODE,
   SOURCE_DOCUMENT_VERSION_NUMBER,
--key Transaction Dates
   order_firmed_date,
   CHARGE_PERIODICITY_CODE,
   actual_fulfillment_date
 FROM OE_ORDER_LINES_ALL a
 WHERE header_id = p_header_id
 AND NOT EXISTS (select b.line_id
                FROM oe_order_lines_history b
                WHERE a.line_id = b.line_id
                AND a.header_id = b.header_id
                AND b.version_number = l_version_number
                AND b.version_flag = l_version_flag);
  IF l_debug_level > 0 THEN
      oe_debug_pub.add(' No. of History Records for Lines ' ||SQL%ROWCOUNT);
  END IF;

-- Create History Records for Adjustments
   l_api_name := 'Create_Price_Adjs_History';

 INSERT INTO OE_PRICE_ADJS_HISTORY(
   PRICE_ADJUSTMENT_ID,
   HEADER_ID,
   HIST_CREATION_DATE,
   CREATION_DATE,
   CREATED_BY,
   LAST_UPDATE_DATE,
   LAST_UPDATED_BY,
   LAST_UPDATE_LOGIN,
   PROGRAM_APPLICATION_ID,
   PROGRAM_ID,
   PROGRAM_UPDATE_DATE,
   REQUEST_ID,
   DISCOUNT_ID,
   DISCOUNT_LINE_ID,
   AUTOMATIC_FLAG,
   PERCENT,
   LINE_ID,
   CONTEXT,
   ATTRIBUTE1,
   ATTRIBUTE2,
   ATTRIBUTE3,
   ATTRIBUTE4,
   ATTRIBUTE5,
   ATTRIBUTE6,
   ATTRIBUTE7,
   ATTRIBUTE8,
   ATTRIBUTE9,
   ATTRIBUTE10,
   ATTRIBUTE11,
   ATTRIBUTE12,
   ATTRIBUTE13,
   ATTRIBUTE14,
   ATTRIBUTE15,
   ORIG_SYS_DISCOUNT_REF,
   CHANGE_SEQUENCE,
   LIST_HEADER_ID,
   LIST_LINE_ID,
   LIST_LINE_TYPE_CODE,
   MODIFIED_FROM,
   MODIFIED_TO,
   UPDATE_ALLOWED,
   CHANGE_REASON_CODE,
   CHANGE_REASON_TEXT,
   MODIFIER_MECHANISM_TYPE_CODE,
   UPDATED_FLAG,
   APPLIED_FLAG,
   OPERAND,
   ARITHMETIC_OPERATOR,
   COST_ID,
   TAX_CODE,
   TAX_EXEMPT_FLAG,
   TAX_EXEMPT_NUMBER,
   TAX_EXEMPT_REASON_CODE,
   PARENT_ADJUSTMENT_ID,
   INVOICED_FLAG,
   ESTIMATED_FLAG,
   INC_IN_SALES_PERFORMANCE,
   SPLIT_ACTION_CODE,
   ADJUSTED_AMOUNT,
   PRICING_PHASE_ID,
   CHARGE_TYPE_CODE,
   CHARGE_SUBTYPE_CODE,
   RANGE_BREAK_QUANTITY,
   ACCRUAL_CONVERSION_RATE,
   PRICING_GROUP_SEQUENCE,
   ACCRUAL_FLAG,
   LIST_LINE_NO,
   SOURCE_SYSTEM_CODE,
   BENEFIT_QTY,
   BENEFIT_UOM_CODE,
   PRINT_ON_INVOICE_FLAG,
   EXPIRATION_DATE,
   REBATE_TRANSACTION_TYPE_CODE,
   REBATE_TRANSACTION_REFERENCE,
   REBATE_PAYMENT_SYSTEM_CODE,
   REDEEMED_DATE,
   REDEEMED_FLAG,
   MODIFIER_LEVEL_CODE,
   PRICE_BREAK_TYPE_CODE,
   SUBSTITUTION_ATTRIBUTE,
   PRORATION_TYPE_CODE,
   INCLUDE_ON_RETURNS_FLAG,
   CREDIT_OR_CHARGE_FLAG,
   AC_CONTEXT,
   AC_ATTRIBUTE1,
   AC_ATTRIBUTE2,
   AC_ATTRIBUTE3,
   AC_ATTRIBUTE4,
   AC_ATTRIBUTE5,
   AC_ATTRIBUTE6,
   AC_ATTRIBUTE7,
   AC_ATTRIBUTE8,
   AC_ATTRIBUTE9,
   AC_ATTRIBUTE10,
   AC_ATTRIBUTE11,
   AC_ATTRIBUTE12,
   AC_ATTRIBUTE13,
   AC_ATTRIBUTE14,
   AC_ATTRIBUTE15,
   LOCK_CONTROL,
   HIST_TYPE_CODE,
   HIST_CREATED_BY,
   RESPONSIBILITY_ID,
   VERSION_NUMBER,
   AUDIT_FLAG,
   VERSION_FLAG,
   PHASE_CHANGE_FLAG
   )
 SELECT
   PRICE_ADJUSTMENT_ID,
   HEADER_ID,
   sysdate,
   CREATION_DATE,
   CREATED_BY,
   LAST_UPDATE_DATE,
   LAST_UPDATED_BY,
   LAST_UPDATE_LOGIN,
   PROGRAM_APPLICATION_ID,
   PROGRAM_ID,
   PROGRAM_UPDATE_DATE,
   REQUEST_ID,
   DISCOUNT_ID,
   DISCOUNT_LINE_ID,
   AUTOMATIC_FLAG,
   PERCENT,
   LINE_ID,
   CONTEXT,
   ATTRIBUTE1,
   ATTRIBUTE2,
   ATTRIBUTE3,
   ATTRIBUTE4,
   ATTRIBUTE5,
   ATTRIBUTE6,
   ATTRIBUTE7,
   ATTRIBUTE8,
   ATTRIBUTE9,
   ATTRIBUTE10,
   ATTRIBUTE11,
   ATTRIBUTE12,
   ATTRIBUTE13,
   ATTRIBUTE14,
   ATTRIBUTE15,
   ORIG_SYS_DISCOUNT_REF,
   CHANGE_SEQUENCE,
   LIST_HEADER_ID,
   LIST_LINE_ID,
   LIST_LINE_TYPE_CODE,
   MODIFIED_FROM,
   MODIFIED_TO,
   UPDATE_ALLOWED,
   CHANGE_REASON_CODE,
   CHANGE_REASON_TEXT,
   MODIFIER_MECHANISM_TYPE_CODE,
   UPDATED_FLAG,
   APPLIED_FLAG,
   OPERAND,
   ARITHMETIC_OPERATOR,
   COST_ID,
   TAX_CODE,
   TAX_EXEMPT_FLAG,
   TAX_EXEMPT_NUMBER,
   TAX_EXEMPT_REASON_CODE,
   PARENT_ADJUSTMENT_ID,
   INVOICED_FLAG,
   ESTIMATED_FLAG,
   INC_IN_SALES_PERFORMANCE,
   SPLIT_ACTION_CODE,
   ADJUSTED_AMOUNT,
   PRICING_PHASE_ID,
   CHARGE_TYPE_CODE,
   CHARGE_SUBTYPE_CODE,
   RANGE_BREAK_QUANTITY,
   ACCRUAL_CONVERSION_RATE,
   PRICING_GROUP_SEQUENCE,
   ACCRUAL_FLAG,
   LIST_LINE_NO,
   SOURCE_SYSTEM_CODE,
   BENEFIT_QTY,
   BENEFIT_UOM_CODE,
   PRINT_ON_INVOICE_FLAG,
   EXPIRATION_DATE,
   REBATE_TRANSACTION_TYPE_CODE,
   REBATE_TRANSACTION_REFERENCE,
   REBATE_PAYMENT_SYSTEM_CODE,
   REDEEMED_DATE,
   REDEEMED_FLAG,
   MODIFIER_LEVEL_CODE,
   PRICE_BREAK_TYPE_CODE,
   SUBSTITUTION_ATTRIBUTE,
   PRORATION_TYPE_CODE,
   INCLUDE_ON_RETURNS_FLAG,
   CREDIT_OR_CHARGE_FLAG,
   AC_CONTEXT,
   AC_ATTRIBUTE1,
   AC_ATTRIBUTE2,
   AC_ATTRIBUTE3,
   AC_ATTRIBUTE4,
   AC_ATTRIBUTE5,
   AC_ATTRIBUTE6,
   AC_ATTRIBUTE7,
   AC_ATTRIBUTE8,
   AC_ATTRIBUTE9,
   AC_ATTRIBUTE10,
   AC_ATTRIBUTE11,
   AC_ATTRIBUTE12,
   AC_ATTRIBUTE13,
   AC_ATTRIBUTE14,
   AC_ATTRIBUTE15,
   LOCK_CONTROL,
   NULL, --HIST_TYPE_CODE,
   nvl(FND_GLOBAL.USER_ID, -1), --HIST_CREATED_BY,
   nvl(FND_GLOBAL.RESP_ID, -1), --RESPONSIBILITY_ID,
   l_version_number, --VERSION_NUMBER,
   'N', --AUDIT_FLAG,
   l_version_flag, --VERSION_FLAG,
   p_phase_change_flag --PHASE_CHANGE_FLAG
 FROM OE_PRICE_ADJUSTMENTS a
 WHERE a.header_id = p_header_id
 AND NOT EXISTS ( SELECT price_adjustment_id
                  FROM  OE_PRICE_ADJS_HISTORY b
                  WHERE b.price_adjustment_id = a.price_adjustment_id
                  AND a.header_id = b.header_id
                  AND b.version_number = l_version_number
                  AND b.version_flag = l_version_flag);

  IF l_debug_level > 0 THEN
      oe_debug_pub.add(' No. of History Records for PrcAdjs ' ||SQL%ROWCOUNT);
  END IF;

-- Create History Records for SalesCredits
   l_api_name := 'Create_Sales_Credits_History';

 INSERT INTO OE_SALES_CREDIT_HISTORY (
    SALES_CREDIT_ID,
    HEADER_ID,
    HIST_CREATION_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    SALESREP_ID,
    PERCENT,
    LINE_ID,
    CONTEXT,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    DW_UPDATE_ADVICE_FLAG,
    WH_UPDATE_DATE,
    ORIG_SYS_CREDIT_REF,
    SALES_CREDIT_TYPE_ID,
    LOCK_CONTROL,
    REASON_CODE,
    HIST_COMMENTS,
    HIST_TYPE_CODE,
    HIST_CREATED_BY,
    RESPONSIBILITY_ID,
    VERSION_NUMBER,
    AUDIT_FLAG,
    VERSION_FLAG,
    PHASE_CHANGE_FLAG
   )
   SELECT
    SALES_CREDIT_ID,
    HEADER_ID,
    sysdate,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    SALESREP_ID,
    PERCENT,
    LINE_ID,
    CONTEXT,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    DW_UPDATE_ADVICE_FLAG,
    WH_UPDATE_DATE,
    ORIG_SYS_CREDIT_REF,
    SALES_CREDIT_TYPE_ID,
    LOCK_CONTROL,
    NULL, --REASON_CODE,
    NULL, --HIST_COMMENTS,
    NULL, --HIST_TYPE_CODE,
    nvl(FND_GLOBAL.USER_ID, -1), --HIST_CREATED_BY,
    nvl(FND_GLOBAL.RESP_ID, -1), --RESPONSIBILITY_ID,
    l_version_number, --VERSION_NUMBER,
    'N', --AUDIT_FLAG,
    l_version_flag, --VERSION_FLAG,
    p_phase_change_flag --PHASE_CHANGE_FLAG,
   FROM oe_sales_credits a
   WHERE a.header_id = p_header_id
   AND NOT EXISTS ( SELECT b.SALES_CREDIT_ID
                    FROM OE_SALES_CREDIT_HISTORY b
                    WHERE b.SALES_CREDIT_ID = a.SALES_CREDIT_ID
                    AND a.header_id = b.header_id
                    AND b.VERSION_NUMBER = l_version_number
                    AND b.version_flag = l_version_flag);

  IF l_debug_level > 0 THEN
      oe_debug_pub.add(' No. of History Records for Sales Credits '||SQL%ROWCOUNT);
  END IF;

EXCEPTION
  WHEN OTHERS THEN

    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
    THEN
            OE_MSG_PUB.Add_Exc_Msg
            (   G_PKG_NAME
            , l_api_name
            );
    END IF;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

END Create_Version_History;


Function Get_Version_Number
(p_header_id IN NUMBER := NULL,
 p_line_id IN NUMBER := NULL,
 p_price_adjustment_id IN NUMBER := NULL,
 p_sales_credit_id IN NUMBER := NULL) RETURN NUMBER
IS

l_current_version_number NUMBER := NULL;
BEGIN

  IF p_price_adjustment_id <> FND_API.G_MISS_NUM THEN

   BEGIN
    SELECT h.version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL h, OE_PRICE_ADJUSTMENTS p
    WHERE h.header_id = p.header_id
    AND p.price_adjustment_id = p_price_adjustment_id;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    SELECT h.version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL h, OE_PRICE_ADJS_HISTORY p
    WHERE h.header_id = p.header_id
    AND p.price_adjustment_id = p_price_adjustment_id
    AND rownum = 1;
   END;

  ELSIF p_sales_credit_id <> FND_API.G_MISS_NUM  THEN

   BEGIN
    SELECT h.version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL h, OE_SALES_CREDITS s
    WHERE h.header_id = s.header_id
    AND s.sales_credit_id = p_sales_credit_id;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    SELECT h.version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL h, OE_SALES_CREDIT_HISTORY s
    WHERE h.header_id = s.header_id
    AND s.sales_credit_id = p_sales_credit_id
    AND rownum = 1;
   END;
  ELSIF p_line_id <> FND_API.G_MISS_NUM THEN

   BEGIN
    SELECT h.version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL h, OE_ORDER_LINES_ALL l
    WHERE h.header_id = l.header_id
    AND l.line_id = p_line_id;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    SELECT h.version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL h, OE_ORDER_LINES_HISTORY l
    WHERE h.header_id = l.header_id
    AND l.line_id = p_line_id
    AND rownum = 1;
   END;

  ELSIF p_header_id <> FND_API.G_MISS_NUM  THEN

    SELECT version_number INTO l_current_version_number
    FROM OE_ORDER_HEADERS_ALL WHERE header_id = p_header_id;

  END IF;

  RETURN l_current_version_number;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Get_Version_Number'
        );
    END IF;
END Get_Version_Number;

-- Moving Query_Rows from Versioning Util to Version History Util
-- to reduce overall size of Versioning Util

Procedure Get_Transaction_Version(
p_header_id              IN NUMBER,
p_version_number         IN NUMBER := NULL,
p_phase_change_flag      IN VARCHAR2 := NULL,
x_header_rec             OUT NOCOPY OE_ORDER_PUB.Header_Rec_Type,
x_header_adj_tbl         OUT NOCOPY OE_ORDER_PUB.Header_Adj_Tbl_Type,
x_header_scredit_tbl     OUT NOCOPY OE_ORDER_PUB.Header_Scredit_Tbl_Type,
x_line_tbl               OUT NOCOPY OE_ORDER_PUB.Line_Tbl_Type,
x_line_adj_tbl           OUT NOCOPY OE_ORDER_PUB.Line_Adj_Tbl_Type,
x_line_scredit_tbl       OUT NOCOPY OE_ORDER_PUB.Line_Scredit_Tbl_Type,
x_return_status          OUT NOCOPY VARCHAR2)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;

BEGIN

   IF p_version_number IS NOT NULL THEN
    l_current_version_number := Get_Version_Number(p_header_id => p_header_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   G_INTERNAL_QUERY := TRUE;

   Query_Row(p_header_id => p_header_id,
             p_version_number => l_version_number,
             p_phase_change_flag => p_phase_change_flag,
             x_header_rec => x_header_rec);

   Query_Rows(p_header_id => p_header_id,
              p_version_number => l_version_number,
              p_phase_change_flag => p_phase_change_flag,
              x_header_adj_tbl => x_header_adj_tbl);

   Query_Rows(p_header_id => p_header_id,
              p_version_number => l_version_number,
              p_phase_change_flag => p_phase_change_flag,
              x_header_scredit_tbl => x_header_scredit_tbl);

   Query_Rows(p_header_id => p_header_id,
              p_version_number => l_version_number,
              p_phase_change_flag => p_phase_change_flag,
              x_line_tbl => x_line_tbl);

   Query_Rows(p_header_id => p_header_id,
              p_version_number => l_version_number,
              p_phase_change_flag => p_phase_change_flag,
              x_line_adj_tbl => x_line_adj_tbl);

   Query_Rows(p_header_id => p_header_id,
              p_version_number => l_version_number,
              p_phase_change_flag => p_phase_change_flag,
              x_line_scredit_tbl => x_line_scredit_tbl);

   G_INTERNAL_QUERY := FALSE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      G_INTERNAL_QUERY := FALSE;
      RAISE FND_API.G_EXC_ERROR;

   WHEN OTHERS THEN
      G_INTERNAL_QUERY := FALSE;

    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
        , 'Get_Transaction_Version'
        );
    END IF;
      RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END Get_Transaction_Version;

--  Query_Rows with version_number to query from history tables
-- Header Query_Row
PROCEDURE Query_Row
(   p_header_id                     IN  NUMBER,
    p_version_number                IN  NUMBER := NULL,
    p_phase_change_flag             IN VARCHAR2 := NULL,
    x_header_rec                    IN OUT NOCOPY OE_Order_PUB.Header_Rec_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;

BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_header_id => p_header_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Header_Util.Query_Row(p_header_id => p_header_id, x_header_rec => x_header_rec);
   ELSE

    oe_debug_pub.add('Entering OE_VERSIONING_UTIL.QUERY_ROW for header', 1);

SELECT  ACCOUNTING_RULE_ID
  , ACCOUNTING_RULE_DURATION
  , AGREEMENT_ID
  , ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE16   --For bug 2184255
  , ATTRIBUTE17
  , ATTRIBUTE18
  , ATTRIBUTE19
  , ATTRIBUTE2
  , ATTRIBUTE20
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , BLANKET_NUMBER
  , BOOKED_FLAG
  , BOOKED_DATE
  , CANCELLED_FLAG
  , CONTEXT
  , CONVERSION_RATE
  , CONVERSION_RATE_DATE
  , CONVERSION_TYPE_CODE
  , CUSTOMER_PREFERENCE_SET_CODE
  , CREATED_BY
  , CREATION_DATE
  , CUST_PO_NUMBER
  , DELIVER_TO_CONTACT_ID
  , DELIVER_TO_ORG_ID
  , DEMAND_CLASS_CODE
  , FIRST_ACK_CODE
  , FIRST_ACK_DATE
  , EXPIRATION_DATE
  , EARLIEST_SCHEDULE_LIMIT
  , FOB_POINT_CODE
  , FREIGHT_CARRIER_CODE
  , FREIGHT_TERMS_CODE
  , GLOBAL_ATTRIBUTE1
  , GLOBAL_ATTRIBUTE10
  , GLOBAL_ATTRIBUTE11
  , GLOBAL_ATTRIBUTE12
  , GLOBAL_ATTRIBUTE13
  , GLOBAL_ATTRIBUTE14
  , GLOBAL_ATTRIBUTE15
  , GLOBAL_ATTRIBUTE16
  , GLOBAL_ATTRIBUTE17
  , GLOBAL_ATTRIBUTE18
  , GLOBAL_ATTRIBUTE19
  , GLOBAL_ATTRIBUTE2
  , GLOBAL_ATTRIBUTE20
  , GLOBAL_ATTRIBUTE3
  , GLOBAL_ATTRIBUTE4
  , GLOBAL_ATTRIBUTE5
  , GLOBAL_ATTRIBUTE6
  , GLOBAL_ATTRIBUTE7
  , GLOBAL_ATTRIBUTE8
  , GLOBAL_ATTRIBUTE9
  , GLOBAL_ATTRIBUTE_CATEGORY
  , HEADER_ID
  , INVOICE_TO_CONTACT_ID
  , INVOICE_TO_ORG_ID
  , INVOICING_RULE_ID
  , LAST_ACK_CODE
  , LAST_ACK_DATE
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LATEST_SCHEDULE_LIMIT
  , OPEN_FLAG
  , ORDERED_DATE
  , ORDER_DATE_TYPE_CODE
  , ORDER_NUMBER
  , ORDER_SOURCE_ID
  , ORDER_TYPE_ID
  , ORDER_CATEGORY_CODE
  , ORG_ID
  , ORIG_SYS_DOCUMENT_REF
  , PARTIAL_SHIPMENTS_ALLOWED
  , PAYMENT_TERM_ID
  , PRICE_LIST_ID
  , PRICE_REQUEST_CODE                    -- PROMOTIONS SEP/01
  , PRICING_DATE
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , REQUEST_DATE
  , REQUEST_ID
  , RETURN_REASON_CODE
  , SALESREP_ID
  , SALES_CHANNEL_CODe
  , SHIPMENT_PRIORITY_CODE
  , SHIPPING_METHOD_CODE
  , SHIP_FROM_ORG_ID
  , SHIP_TOLERANCE_ABOVE
  , SHIP_TOLERANCE_BELOW
  , SHIP_TO_CONTACT_ID
  , SHIP_TO_ORG_ID
  ,   SOLD_FROM_ORG_ID
  , SOLD_TO_CONTACT_ID
  , SOLD_TO_ORG_ID
  , SOLD_TO_PHONE_ID
  , SOURCE_DOCUMENT_ID
  , SOURCE_DOCUMENT_TYPE_ID
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , TAX_POINT_CODE
  , TRANSACTIONAL_CURR_CODE
  , VERSION_NUMBER
  , PAYMENT_TYPE_CODE
  , PAYMENT_AMOUNT
  , CHECK_NUMBER
  , CREDIT_CARD_CODE
  , CREDIT_CARD_HOLDER_NAME
  , CREDIT_CARD_NUMBER
  , CREDIT_CARD_EXPIRATION_DATE
  , CREDIT_CARD_APPROVAL_DATE
  , CREDIT_CARD_APPROVAL_CODE
  , SHIPPING_INSTRUCTIONS
  , PACKING_INSTRUCTIONS
  , FLOW_STATUS_CODE
  , MARKETING_SOURCE_CODE_ID
  , NULL --DEFAULT_FULFILLMENT_SET
  , NULL --FULFILLMENT_SET_NAME
  , NULL --LINE_SET_NAME
  , TP_ATTRIBUTE1
  , TP_ATTRIBUTE10
  , TP_ATTRIBUTE11
  , TP_ATTRIBUTE12
  , TP_ATTRIBUTE13
  , TP_ATTRIBUTE14
  , TP_ATTRIBUTE15
  , TP_ATTRIBUTE2
  , TP_ATTRIBUTE3
  , TP_ATTRIBUTE4
  , TP_ATTRIBUTE5
  , TP_ATTRIBUTE6
  , TP_ATTRIBUTE7
  , TP_ATTRIBUTE8
  , TP_ATTRIBUTE9
  , TP_CONTEXT
  , NULL --XML_MESSAGE_ID
  , upgraded_flag
  , LOCK_CONTROL
  ,   quote_date
  , quote_number
  , sales_document_name
  , transaction_phase_code
  , user_status_code
  , draft_submitted_flag
  , source_document_version_number
  , sold_to_site_use_id
--key Transaction Dates
  ,  order_firmed_date
    INTO    x_header_rec.accounting_rule_id
  , x_header_rec.accounting_rule_duration
  , x_header_rec.agreement_id
  , x_header_rec.attribute1
  , x_header_rec.attribute10
  , x_header_rec.attribute11
  , x_header_rec.attribute12
  , x_header_rec.attribute13
  , x_header_rec.attribute14
  , x_header_rec.attribute15
  , x_header_rec.attribute16   --For bug 2184255
  , x_header_rec.attribute17
  , x_header_rec.attribute18
  , x_header_rec.attribute19
  , x_header_rec.attribute2
  , x_header_rec.attribute20
  , x_header_rec.attribute3
  , x_header_rec.attribute4
  , x_header_rec.attribute5
  , x_header_rec.attribute6
  , x_header_rec.attribute7
  , x_header_rec.attribute8
  , x_header_rec.attribute9
  , x_header_rec.Blanket_Number
  , x_header_rec.booked_flag
  , x_header_rec.booked_date
  , x_header_rec.cancelled_flag
  , x_header_rec.context
  , x_header_rec.conversion_rate
  , x_header_rec.conversion_rate_date
  , x_header_rec.conversion_type_code
  , x_header_rec.CUSTOMER_PREFERENCE_SET_CODE
  , x_header_rec.created_by
  , x_header_rec.creation_date
  , x_header_rec.cust_po_number
  , x_header_rec.deliver_to_contact_id
  , x_header_rec.deliver_to_org_id
  , x_header_rec.demand_class_code
  , x_header_rec.first_ack_code
  , x_header_rec.first_ack_date
  , x_header_rec.expiration_date
  , x_header_rec.earliest_schedule_limit
  , x_header_rec.fob_point_code
  , x_header_rec.freight_carrier_code
  , x_header_rec.freight_terms_code
  , x_header_rec.global_attribute1
  , x_header_rec.global_attribute10
  , x_header_rec.global_attribute11
  , x_header_rec.global_attribute12
  , x_header_rec.global_attribute13
  , x_header_rec.global_attribute14
  , x_header_rec.global_attribute15
  , x_header_rec.global_attribute16
  , x_header_rec.global_attribute17
  , x_header_rec.global_attribute18
  , x_header_rec.global_attribute19
  , x_header_rec.global_attribute2
  , x_header_rec.global_attribute20
  , x_header_rec.global_attribute3
  , x_header_rec.global_attribute4
  , x_header_rec.global_attribute5
  , x_header_rec.global_attribute6
  , x_header_rec.global_attribute7
  , x_header_rec.global_attribute8
  , x_header_rec.global_attribute9
  , x_header_rec.global_attribute_category
  , x_header_rec.header_id
  , x_header_rec.invoice_to_contact_id
  , x_header_rec.invoice_to_org_id
  , x_header_rec.invoicing_rule_id
  , x_header_rec.last_ack_code
  , x_header_rec.last_ack_date
  , x_header_rec.last_updated_by
  , x_header_rec.last_update_date
  , x_header_rec.last_update_login
  , x_header_rec.latest_schedule_limit
  , x_header_rec.open_flag
  , x_header_rec.ordered_date
  , x_header_rec.order_date_type_code
  , x_header_rec.order_number
  , x_header_rec.order_source_id
  , x_header_rec.order_type_id
  , x_header_rec.order_category_code
  , x_header_rec.org_id
  , x_header_rec.orig_sys_document_ref
  , x_header_rec.partial_shipments_allowed
  , x_header_rec.payment_term_id
  , x_header_rec.price_list_id
  , x_header_rec.price_request_code           -- PROMOTIONS SEP/01
  , x_header_rec.pricing_date
  , x_header_rec.program_application_id
  , x_header_rec.program_id
  , x_header_rec.program_update_date
  , x_header_rec.request_date
  , x_header_rec.request_id
  , x_header_rec.return_reason_code
  , x_header_rec.salesrep_id
  , x_header_rec.sales_channel_code
  , x_header_rec.shipment_priority_code
  , x_header_rec.shipping_method_code
  , x_header_rec.ship_from_org_id
  , x_header_rec.ship_tolerance_above
  , x_header_rec.ship_tolerance_below
  , x_header_rec.ship_to_contact_id
  , x_header_rec.ship_to_org_id
  , x_header_rec.sold_from_org_id
  , x_header_rec.sold_to_contact_id
  , x_header_rec.sold_to_org_id
  , x_header_rec.sold_to_phone_id
  , x_header_rec.source_document_id
  , x_header_rec.source_document_type_id
  , x_header_rec.tax_exempt_flag
  , x_header_rec.tax_exempt_number
  , x_header_rec.tax_exempt_reason_code
  , x_header_rec.tax_point_code
  , x_header_rec.transactional_curr_code
  , x_header_rec.version_number
  , x_header_rec.payment_type_code
  , x_header_rec.payment_amount
  , x_header_rec.check_number
  , x_header_rec.credit_card_code
  , x_header_rec.credit_card_holder_name
  , x_header_rec.credit_card_number
  , x_header_rec.credit_card_expiration_date
  , x_header_rec.credit_card_approval_date
  , x_header_rec.credit_card_approval_code
  , x_header_rec.shipping_instructions
  , x_header_rec.packing_instructions
  , x_header_rec.flow_status_code
  , x_header_rec.marketing_source_code_id
  , x_header_rec.default_fulfillment_set
  , x_header_rec.fulfillment_set_name
  , x_header_rec.line_set_name
  , x_header_rec.tp_attribute1
  , x_header_rec.tp_attribute10
  , x_header_rec.tp_attribute11
  , x_header_rec.tp_attribute12
  , x_header_rec.tp_attribute13
  , x_header_rec.tp_attribute14
  , x_header_rec.tp_attribute15
  , x_header_rec.tp_attribute2
  , x_header_rec.tp_attribute3
  , x_header_rec.tp_attribute4
  , x_header_rec.tp_attribute5
  , x_header_rec.tp_attribute6
  , x_header_rec.tp_attribute7
  , x_header_rec.tp_attribute8
  , x_header_rec.tp_attribute9
  , x_header_rec.tp_context
  , x_header_rec.xml_message_id
  , x_header_rec.upgraded_flag
  , x_header_rec.lock_control
  , x_header_rec.quote_date
  , x_header_rec.quote_number
  , x_header_rec.sales_document_name
  , x_header_rec.transaction_phase_code
  , x_header_rec.user_status_code
  , x_header_rec.draft_submitted_flag
  , x_header_rec.source_document_version_number
  , x_header_rec.sold_to_site_use_id
--key Transaction Dates
  , x_header_rec.order_firmed_date
    FROM    OE_ORDER_HEADER_HISTORY
    WHERE   HEADER_ID = p_header_id
     AND    VERSION_NUMBER = l_version_number
     AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));
   END IF;

    --R12 CC Encryption
    --Need to call query card details procedure to get the credit card
    --details as the OM tables would not have these values in R12
    IF x_header_rec.payment_type_code IS NOT NULL AND
    x_header_rec.payment_type_code = 'CREDIT_CARD'
    AND x_header_rec.credit_card_number is null THEN
        if l_debug_level > 0 then
                oe_debug_pub.add('Calling query card details...');
        end if;
                OE_Header_Util.Query_card_details
               ( p_header_id    => x_header_rec.header_id,
                 p_credit_card_code => x_header_rec.credit_card_code,
                 p_credit_card_holder_name => x_header_rec.credit_card_holder_name,
                 p_credit_card_number => x_header_rec.credit_card_number,
                 p_credit_Card_expiration_date => x_header_rec.credit_card_expiration_date,
                 p_credit_card_approval_code => x_header_rec.credit_card_approval_code,
                 p_credit_card_approval_Date => x_header_rec.credit_card_approval_date,
                 p_instrument_security_code => x_header_rec.instrument_security_code,
                 p_instrument_id => x_header_rec.cc_instrument_id,
                 p_instrument_assignment_id => x_header_rec.cc_instrument_assignment_id
                );
    END IF;
    --R12 CC Encryption

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Header Query_Row'
        );
    END IF;
END;

-- Header Adj Query_Row
PROCEDURE Query_Row
(   p_price_adjustment_id           IN  NUMBER
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Header_Adj_Rec			 IN OUT NOCOPY OE_Order_PUB.Header_Adj_Rec_Type
)
IS
  l_Header_Adj_Tbl			OE_Order_PUB.Header_Adj_Tbl_Type;

l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
  --
  l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;
  --
BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_price_adjustment_id => p_price_adjustment_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Header_Adj_Util.Query_Row(p_price_adjustment_id => p_price_adjustment_id, x_header_adj_rec => x_header_adj_rec);
   ELSE
    IF l_debug_level  > 0 THEN
        oe_debug_pub.add(  'ENTERING OE_HEADER_ADJ_UTIL.QUERY_ROW' , 1 ) ;
    END IF;

    G_INTERNAL_QUERY := TRUE;
    Query_Rows
        (   p_price_adjustment_id         => p_price_adjustment_id
         , p_version_number           => l_version_number
	   , x_Header_Adj_Tbl			  => l_Header_Adj_Tbl
	   );
    x_Header_Adj_Rec := l_Header_Adj_Tbl(1);
    G_INTERNAL_QUERY := FALSE;

    IF l_debug_level  > 0 THEN
        oe_debug_pub.add(  'EXITING OE_HEADER_ADJ_UTIL.QUERY_ROW' , 1 ) ;
    END IF;

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Header Adj Query_Row'
        );
    END IF;

END;

-- Header Adj Query_Rows
PROCEDURE Query_Rows
(   p_price_adjustment_id           IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_header_id                     IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Header_Adj_Tbl			 IN OUT NOCOPY OE_Order_PUB.Header_Adj_Tbl_Type
)
IS
l_count			NUMBER;
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;

CURSOR l_Header_Adj_csr_p IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTOMATIC_FLAG
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DISCOUNT_ID
  , DISCOUNT_LINE_ID
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , PRICE_ADJUSTMENT_ID
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , REQUEST_ID
  , LIST_HEADER_ID
  , LIST_LINE_ID
  , LIST_LINE_TYPE_CODE
  , MODIFIER_MECHANISM_TYPE_CODE
  , MODIFIED_FROM
  , MODIFIED_TO
  , UPDATED_FLAG
  , UPDATE_ALLOWED
  , APPLIED_FLAG
  , CHANGE_REASON_CODE
  , CHANGE_REASON_TEXT
  , operand
  , arithmetic_operator
  , COST_ID
  , TAX_CODE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , PARENT_ADJUSTMENT_ID
  , INVOICED_FLAG
  , ESTIMATED_FLAG
  , INC_IN_SALES_PERFORMANCE
  , SPLIT_ACTION_CODE
  , ADJUSTED_AMOUNT
  , PRICING_PHASE_ID
  , CHARGE_TYPE_CODE
  , CHARGE_SUBTYPE_CODE
  , list_line_no
  , source_system_code
  , benefit_qty
  , benefit_uom_code
  , print_on_invoice_flag
  , expiration_date
  , rebate_transaction_type_code
  , rebate_transaction_reference
  , rebate_payment_system_code
  , redeemed_date
  , redeemed_flag
  , accrual_flag
  , range_break_quantity
  , accrual_conversion_rate
  , pricing_group_sequence
  , modifier_level_code
  , price_break_type_code
  , substitution_attribute
  , proration_type_code
  , CREDIT_OR_CHARGE_FLAG
  , INCLUDE_ON_RETURNS_FLAG
  , AC_ATTRIBUTE1
  , AC_ATTRIBUTE10
  , AC_ATTRIBUTE11
  , AC_ATTRIBUTE12
  , AC_ATTRIBUTE13
  , AC_ATTRIBUTE14
  , AC_ATTRIBUTE15
  , AC_ATTRIBUTE2
  , AC_ATTRIBUTE3
  , AC_ATTRIBUTE4
  , AC_ATTRIBUTE5
  , AC_ATTRIBUTE6
  , AC_ATTRIBUTE7
  , AC_ATTRIBUTE8
  , AC_ATTRIBUTE9
  , AC_CONTEXT
 --uom begin
--  , OPERAND_PER_PQTY
--  , ADJUSTED_AMOUNT_PER_PQTY
    --uom end
  , LOCK_CONTROL
    FROM    OE_PRICE_ADJS_HISTORY
    WHERE   PRICE_ADJUSTMENT_ID = p_price_adjustment_id
    AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

CURSOR l_Header_Adj_csr_h IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTOMATIC_FLAG
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DISCOUNT_ID
  , DISCOUNT_LINE_ID
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , PRICE_ADJUSTMENT_ID
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , REQUEST_ID
  , LIST_HEADER_ID
  , LIST_LINE_ID
  , LIST_LINE_TYPE_CODE
  , MODIFIER_MECHANISM_TYPE_CODE
  , MODIFIED_FROM
  , MODIFIED_TO
  , UPDATED_FLAG
  , UPDATE_ALLOWED
  , APPLIED_FLAG
  , CHANGE_REASON_CODE
  , CHANGE_REASON_TEXT
  , operand
  , arithmetic_operator
  , COST_ID
  , TAX_CODE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , PARENT_ADJUSTMENT_ID
  , INVOICED_FLAG
  , ESTIMATED_FLAG
  , INC_IN_SALES_PERFORMANCE
  , SPLIT_ACTION_CODE
  , ADJUSTED_AMOUNT
  , PRICING_PHASE_ID
  , CHARGE_TYPE_CODE
  , CHARGE_SUBTYPE_CODE
  , list_line_no
  , source_system_code
  , benefit_qty
  , benefit_uom_code
  , print_on_invoice_flag
  , expiration_date
  , rebate_transaction_type_code
  , rebate_transaction_reference
  , rebate_payment_system_code
  , redeemed_date
  , redeemed_flag
  , accrual_flag
  , range_break_quantity
  , accrual_conversion_rate
  , pricing_group_sequence
  , modifier_level_code
  , price_break_type_code
  , substitution_attribute
  , proration_type_code
  , CREDIT_OR_CHARGE_FLAG
  , INCLUDE_ON_RETURNS_FLAG
  , AC_ATTRIBUTE1
  , AC_ATTRIBUTE10
  , AC_ATTRIBUTE11
  , AC_ATTRIBUTE12
  , AC_ATTRIBUTE13
  , AC_ATTRIBUTE14
  , AC_ATTRIBUTE15
  , AC_ATTRIBUTE2
  , AC_ATTRIBUTE3
  , AC_ATTRIBUTE4
  , AC_ATTRIBUTE5
  , AC_ATTRIBUTE6
  , AC_ATTRIBUTE7
  , AC_ATTRIBUTE8
  , AC_ATTRIBUTE9
  , AC_CONTEXT
 --uom begin
--  , OPERAND_PER_PQTY
--  , ADJUSTED_AMOUNT_PER_PQTY
    --uom end
  , LOCK_CONTROL
    FROM    OE_PRICE_ADJS_HISTORY
    WHERE   HEADER_ID = p_header_id AND LINE_ID IS NULL
    AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

  l_rec l_header_adj_csr_p%ROWTYPE;
  l_entity NUMBER;

BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_header_id => p_header_id, p_price_adjustment_id => p_price_adjustment_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Header_Adj_Util.Query_Rows(p_price_adjustment_id => p_price_adjustment_id, p_header_id => p_header_id, x_header_adj_tbl => x_header_adj_tbl);
   ELSE

    IF
    (p_price_adjustment_id IS NOT NULL
     AND
     p_price_adjustment_id <> FND_API.G_MISS_NUM)
    AND
    (p_header_id IS NOT NULL
     AND
     p_header_id <> FND_API.G_MISS_NUM)
    THEN

        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;

    END IF;

    IF nvl(p_price_adjustment_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 1;
           OPEN l_header_adj_csr_p;
    ELSIF nvl(p_header_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 2;
           OPEN l_header_adj_csr_h;
    END IF;

    --  Loop over fetched records
    l_count := 1;
    LOOP
      IF l_entity = 1 THEN
        FETCH l_header_adj_csr_p INTO l_rec;
        EXIT WHEN l_header_adj_csr_p%NOTFOUND;
      ELSIF l_entity = 2 THEN
        FETCH l_header_adj_csr_h INTO l_rec;
        EXIT WHEN l_header_adj_csr_h%NOTFOUND;
      ELSE
        EXIT;
      END IF;

      x_Header_Adj_tbl(l_count).attribute1    := l_rec.ATTRIBUTE1;
      x_Header_Adj_tbl(l_count).attribute10   := l_rec.ATTRIBUTE10;
      x_Header_Adj_tbl(l_count).attribute11   := l_rec.ATTRIBUTE11;
      x_Header_Adj_tbl(l_count).attribute12   := l_rec.ATTRIBUTE12;
      x_Header_Adj_tbl(l_count).attribute13   := l_rec.ATTRIBUTE13;
      x_Header_Adj_tbl(l_count).attribute14   := l_rec.ATTRIBUTE14;
      x_Header_Adj_tbl(l_count).attribute15   := l_rec.ATTRIBUTE15;
      x_Header_Adj_tbl(l_count).attribute2    := l_rec.ATTRIBUTE2;
      x_Header_Adj_tbl(l_count).attribute3    := l_rec.ATTRIBUTE3;
      x_Header_Adj_tbl(l_count).attribute4    := l_rec.ATTRIBUTE4;
      x_Header_Adj_tbl(l_count).attribute5    := l_rec.ATTRIBUTE5;
      x_Header_Adj_tbl(l_count).attribute6    := l_rec.ATTRIBUTE6;
      x_Header_Adj_tbl(l_count).attribute7    := l_rec.ATTRIBUTE7;
      x_Header_Adj_tbl(l_count).attribute8    := l_rec.ATTRIBUTE8;
      x_Header_Adj_tbl(l_count).attribute9    := l_rec.ATTRIBUTE9;
      x_Header_Adj_tbl(l_count).automatic_flag := l_rec.AUTOMATIC_FLAG;
      x_Header_Adj_tbl(l_count).context       := l_rec.CONTEXT;
      x_Header_Adj_tbl(l_count).created_by    := l_rec.CREATED_BY;
      x_Header_Adj_tbl(l_count).creation_date := l_rec.CREATION_DATE;
      x_Header_Adj_tbl(l_count).discount_id   := l_rec.DISCOUNT_ID;
      x_Header_Adj_tbl(l_count).discount_line_id := l_rec.DISCOUNT_LINE_ID;
      x_Header_Adj_tbl(l_count).header_id     := l_rec.HEADER_ID;
      x_Header_Adj_tbl(l_count).last_updated_by := l_rec.LAST_UPDATED_BY;
      x_Header_Adj_tbl(l_count).last_update_date := l_rec.LAST_UPDATE_DATE;
      x_Header_Adj_tbl(l_count).last_update_login := l_rec.LAST_UPDATE_LOGIN;
      x_Header_Adj_tbl(l_count).line_id       := l_rec.LINE_ID;
      x_Header_Adj_tbl(l_count).percent       := l_rec.PERCENT;
      x_Header_Adj_tbl(l_count).price_adjustment_id := l_rec.PRICE_ADJUSTMENT_ID;
      x_Header_Adj_tbl(l_count).program_application_id := l_rec.PROGRAM_APPLICATION_ID;
      x_Header_Adj_tbl(l_count).program_id    := l_rec.PROGRAM_ID;
      x_Header_Adj_tbl(l_count).program_update_date := l_rec.PROGRAM_UPDATE_DATE;
      x_Header_Adj_tbl(l_count).adjusted_amount   := l_rec.adjusted_amount;
      x_Header_Adj_tbl(l_count).pricing_phase_id  := l_rec.pricing_phase_id;
      x_Header_Adj_tbl(l_count).list_header_id    := l_rec.list_header_id;
      x_Header_Adj_tbl(l_count).list_line_id    := l_rec.list_line_id;
      x_Header_Adj_tbl(l_count).list_line_type_code    := l_rec.list_line_type_code;
      x_Header_Adj_tbl(l_count).modifier_mechanism_type_code :=
					 l_rec.modifier_mechanism_type_code;
     x_Header_Adj_tbl(l_count).modified_from    := l_rec.modified_from;
     x_Header_Adj_tbl(l_count).modified_to    := l_rec.modified_to;
     x_Header_Adj_tbl(l_count).updated_flag    := l_rec.updated_flag;
     x_Header_Adj_tbl(l_count).update_allowed    := l_rec.update_allowed;
     x_Header_Adj_tbl(l_count).applied_flag    := l_rec.applied_flag;
     x_Header_Adj_tbl(l_count).change_reason_code := l_rec.change_reason_code;
     x_Header_Adj_tbl(l_count).change_reason_text  := l_rec.change_reason_text;
     x_Header_Adj_tbl(l_count).operand  := l_rec.operand;
     x_Header_Adj_tbl(l_count).arithmetic_operator  := l_rec.arithmetic_operator;

     x_Header_Adj_tbl(l_count).request_id    := l_rec.REQUEST_ID;

     x_Header_Adj_tbl(l_count).cost_id := l_rec.cost_id;
     x_Header_Adj_tbl(l_count).tax_code := l_rec.tax_code;
     x_Header_Adj_tbl(l_count).tax_exempt_flag := l_rec.tax_exempt_flag;
     x_Header_Adj_tbl(l_count).tax_exempt_number := l_rec.tax_exempt_number;
     x_Header_Adj_tbl(l_count).tax_exempt_reason_code := l_rec.tax_exempt_reason_code;
     x_Header_Adj_tbl(l_count).parent_adjustment_id := l_rec.parent_adjustment_id;
     x_Header_Adj_tbl(l_count).invoiced_flag := l_rec.invoiced_flag;
     x_Header_Adj_tbl(l_count).estimated_flag := l_rec.estimated_flag;
     x_Header_Adj_tbl(l_count).inc_in_sales_performance := l_rec.inc_in_sales_performance;
     x_Header_Adj_tbl(l_count).split_action_code := l_rec.split_action_code;
     x_Header_Adj_tbl(l_count).charge_type_code := l_rec.charge_type_code;
     x_Header_Adj_tbl(l_count).charge_subtype_code := l_rec.charge_subtype_code;
     x_Header_Adj_tbl(l_count).list_line_no := l_rec.list_line_no;
     x_Header_Adj_tbl(l_count).source_system_code := l_rec.source_system_code;
     x_Header_Adj_tbl(l_count).benefit_qty := l_rec.benefit_qty;
     x_Header_Adj_tbl(l_count).benefit_uom_code := l_rec.benefit_uom_code;
     x_Header_Adj_tbl(l_count).print_on_invoice_flag := l_rec.print_on_invoice_flag;
     x_Header_Adj_tbl(l_count).expiration_date := l_rec.expiration_date;
     x_Header_Adj_tbl(l_count).rebate_transaction_type_code := l_rec.rebate_transaction_type_code;
     x_Header_Adj_tbl(l_count).rebate_transaction_reference := l_rec.rebate_transaction_reference;
     x_Header_Adj_tbl(l_count).rebate_payment_system_code := l_rec.rebate_payment_system_code;
     x_Header_Adj_tbl(l_count).redeemed_date := l_rec.redeemed_date;
     x_Header_Adj_tbl(l_count).redeemed_flag := l_rec.redeemed_flag;
     x_Header_Adj_tbl(l_count).accrual_flag := l_rec.accrual_flag;
     x_Header_Adj_tbl(l_count).range_break_quantity := l_rec.range_break_quantity;
     x_Header_Adj_tbl(l_count).accrual_conversion_rate := l_rec.accrual_conversion_rate;
     x_Header_Adj_tbl(l_count).pricing_group_sequence := l_rec.pricing_group_sequence;
     x_Header_Adj_tbl(l_count).modifier_level_code := l_rec.modifier_level_code;
     x_Header_Adj_tbl(l_count).price_break_type_code := l_rec.price_break_type_code;
     x_Header_Adj_tbl(l_count).substitution_attribute := l_rec.substitution_attribute;
     x_Header_Adj_tbl(l_count).proration_type_code := l_rec.proration_type_code;
     x_Header_Adj_tbl(l_count).credit_or_charge_flag := l_rec.credit_or_charge_flag;
     x_Header_Adj_tbl(l_count).include_on_returns_flag := l_rec.include_on_returns_flag;
      x_Header_Adj_tbl(l_count).ac_attribute1    := l_rec.AC_ATTRIBUTE1;
      x_Header_Adj_tbl(l_count).ac_attribute10   := l_rec.AC_ATTRIBUTE10;
      x_Header_Adj_tbl(l_count).ac_attribute11   := l_rec.AC_ATTRIBUTE11;
      x_Header_Adj_tbl(l_count).ac_attribute12   := l_rec.AC_ATTRIBUTE12;
      x_Header_Adj_tbl(l_count).ac_attribute13   := l_rec.AC_ATTRIBUTE13;
      x_Header_Adj_tbl(l_count).ac_attribute14   := l_rec.AC_ATTRIBUTE14;
      x_Header_Adj_tbl(l_count).ac_attribute15   := l_rec.AC_ATTRIBUTE15;
      x_Header_Adj_tbl(l_count).ac_attribute2    := l_rec.AC_ATTRIBUTE2;
      x_Header_Adj_tbl(l_count).ac_attribute3    := l_rec.AC_ATTRIBUTE3;
      x_Header_Adj_tbl(l_count).ac_attribute4    := l_rec.AC_ATTRIBUTE4;
      x_Header_Adj_tbl(l_count).ac_attribute5    := l_rec.AC_ATTRIBUTE5;
      x_Header_Adj_tbl(l_count).ac_attribute6    := l_rec.AC_ATTRIBUTE6;
      x_Header_Adj_tbl(l_count).ac_attribute7    := l_rec.AC_ATTRIBUTE7;
      x_Header_Adj_tbl(l_count).ac_attribute8    := l_rec.AC_ATTRIBUTE8;
      x_Header_Adj_tbl(l_count).ac_attribute9    := l_rec.AC_ATTRIBUTE9;
      x_Header_Adj_tbl(l_count).ac_context       := l_rec.AC_CONTEXT;
        --uom begin
--      x_Header_Adj_tbl(l_count).OPERAND_PER_PQTY      :=l_rec.operand_per_pqty;
--     x_Header_Adj_tbl(l_count).ADJUSTED_AMOUNT_PER_PQTY :=l_rec.adjusted_amount_per_pqty;
        --uom end

      x_Header_Adj_tbl(l_count).lock_control      := l_rec.LOCK_CONTROL;

        -- set values for non-DB fields
      x_Header_Adj_tbl(l_count).db_flag          := FND_API.G_TRUE;
      x_Header_Adj_tbl(l_count).operation        := FND_API.G_MISS_CHAR;
      x_Header_Adj_tbl(l_count).return_status    := FND_API.G_MISS_CHAR;

        l_count := l_count + 1;
    END LOOP;

    IF l_entity = 1 THEN
        CLOSE l_header_adj_csr_p;
    ELSIF l_entity = 2 THEN
        CLOSE l_header_adj_csr_h;
    END IF;

    --  PK sent and no rows found

    IF
    (p_price_adjustment_id IS NOT NULL
     AND
     p_price_adjustment_id <> FND_API.G_MISS_NUM)
    AND
    (x_Header_Adj_tbl.COUNT = 0)
    THEN
        RAISE NO_DATA_FOUND;
    END IF;



   END IF;

EXCEPTION

    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN

        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;

    WHEN OTHERS THEN

    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Header Adj Query_Rows'
        );
    END IF;
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;

END;


-- Header SCredit Query_Row
PROCEDURE Query_Row
(   p_sales_credit_id               IN  NUMBER,
    p_version_number                IN  NUMBER := NULL,
    p_phase_change_flag             IN VARCHAR2 := NULL,
    x_Header_Scredit_Rec      IN OUT NOCOPY OE_Order_PUB.Header_Scredit_Rec_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
x_Header_Scredit_tbl OE_Order_PUB.Header_Scredit_Tbl_Type;
--
l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;
--
BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_sales_credit_id => p_sales_credit_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Header_Scredit_Util.Query_Row(p_sales_credit_id => p_sales_credit_id, x_header_scredit_rec => x_header_scredit_rec);
   ELSE
    G_INTERNAL_QUERY := TRUE;
     Query_Rows
        (   p_sales_credit_id             => p_sales_credit_id,
            p_version_number              => l_version_number,
	   x_Header_Scredit_tbl  => x_Header_Scredit_tbl
        );
        x_Header_Scredit_rec := x_Header_Scredit_tbl(1);
    G_INTERNAL_QUERY := FALSE;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Header Scredit Query_Row'
        );
    END IF;
END;


-- Header SCredit Query_Rows
PROCEDURE Query_Rows
(   p_sales_credit_id               IN  NUMBER :=
                                    FND_API.G_MISS_NUM
, p_header_id                     IN  NUMBER :=
                                    FND_API.G_MISS_NUM
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Header_Scredit_tbl   IN OUT NOCOPY OE_Order_PUB.Header_Scredit_tbl_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
l_count NUMBER;

CURSOR l_Header_Scredit_csr_s IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DW_UPDATE_ADVICE_FLAG
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , SALESREP_ID
  , sales_credit_type_id
  , SALES_CREDIT_ID
  , WH_UPDATE_DATE
    --SG {
--  , SALES_GROUP_ID
--  , SALES_GROUP_UPDATED
    --SG }
  , LOCK_CONTROL
    FROM    OE_SALES_CREDIT_HISTORY
    WHERE   SALES_CREDIT_ID = p_sales_credit_id
     AND    VERSION_NUMBER = l_version_number
     AND   (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR    (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND    VERSION_FLAG = 'Y'));

CURSOR l_Header_Scredit_csr_h IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DW_UPDATE_ADVICE_FLAG
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , SALESREP_ID
  , sales_credit_type_id
  , SALES_CREDIT_ID
  , WH_UPDATE_DATE
    --SG {
--  , SALES_GROUP_ID
--  , SALES_GROUP_UPDATED
    --SG }
  , LOCK_CONTROL
    FROM    OE_SALES_CREDIT_HISTORY
    WHERE   HEADER_ID = p_header_id
    	AND LINE_ID IS NULL
        AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

  l_rec l_header_scredit_csr_s%ROWTYPE;
  l_entity NUMBER;

BEGIN
   IF p_version_number IS NOT NULL AND G_INTERNAL_QUERY = FALSE THEN
    l_current_version_number := Get_Version_Number(p_header_id => p_header_id, p_sales_credit_id => p_sales_credit_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
      OE_Header_Scredit_Util.Query_Rows(p_sales_credit_id => p_sales_credit_id, p_header_id => p_header_id, x_header_scredit_tbl => x_header_scredit_tbl);
   ELSE

    IF
    (p_sales_credit_id IS NOT NULL
     AND
     p_sales_credit_id <> FND_API.G_MISS_NUM)
    AND
    (p_header_id IS NOT NULL
     AND
     p_header_id <> FND_API.G_MISS_NUM)
    THEN
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;

    END IF;

    IF nvl(p_sales_credit_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 1;
           OPEN l_header_scredit_csr_s;
    ELSIF nvl(p_header_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 2;
           OPEN l_header_scredit_csr_h;
    END IF;

    --  Loop over fetched records

    l_count := 1;

    LOOP
      IF l_entity = 1 THEN
        FETCH l_header_scredit_csr_s INTO l_rec;
        EXIT WHEN l_header_scredit_csr_s%NOTFOUND;
      ELSIF l_entity = 2 THEN
        FETCH l_header_scredit_csr_h INTO l_rec;
        EXIT WHEN l_header_scredit_csr_h%NOTFOUND;
      ELSE
        EXIT;
      END IF;

      x_header_scredit_tbl(l_count).attribute1 := l_rec.ATTRIBUTE1;
      x_header_scredit_tbl(l_count).attribute10 := l_rec.ATTRIBUTE10;
      x_header_scredit_tbl(l_count).attribute11 := l_rec.ATTRIBUTE11;
      x_header_scredit_tbl(l_count).attribute12 := l_rec.ATTRIBUTE12;
      x_header_scredit_tbl(l_count).attribute13 := l_rec.ATTRIBUTE13;
      x_header_scredit_tbl(l_count).attribute14 := l_rec.ATTRIBUTE14;
      x_header_scredit_tbl(l_count).attribute15 := l_rec.ATTRIBUTE15;
      x_header_scredit_tbl(l_count).attribute2 := l_rec.ATTRIBUTE2;
      x_header_scredit_tbl(l_count).attribute3 := l_rec.ATTRIBUTE3;
      x_header_scredit_tbl(l_count).attribute4 := l_rec.ATTRIBUTE4;
      x_header_scredit_tbl(l_count).attribute5 := l_rec.ATTRIBUTE5;
      x_header_scredit_tbl(l_count).attribute6 := l_rec.ATTRIBUTE6;
      x_header_scredit_tbl(l_count).attribute7 := l_rec.ATTRIBUTE7;
      x_header_scredit_tbl(l_count).attribute8 := l_rec.ATTRIBUTE8;
      x_header_scredit_tbl(l_count).attribute9 := l_rec.ATTRIBUTE9;
      x_header_scredit_tbl(l_count).context   := l_rec.CONTEXT;
      x_header_scredit_tbl(l_count).created_by := l_rec.CREATED_BY;
      x_header_scredit_tbl(l_count).creation_date := l_rec.CREATION_DATE;
      x_header_scredit_tbl(l_count).dw_update_advice_flag := l_rec.DW_UPDATE_ADVICE_FLAG;
      x_header_scredit_tbl(l_count).header_id := l_rec.HEADER_ID;
      x_header_scredit_tbl(l_count).last_updated_by := l_rec.LAST_UPDATED_BY;
      x_header_scredit_tbl(l_count).last_update_date := l_rec.LAST_UPDATE_DATE;
      x_header_scredit_tbl(l_count).last_update_login := l_rec.LAST_UPDATE_LOGIN;
      x_header_scredit_tbl(l_count).line_id   := l_rec.LINE_ID;
      x_header_scredit_tbl(l_count).percent   := l_rec.PERCENT;
      x_header_scredit_tbl(l_count).salesrep_id := l_rec.SALESREP_ID;
      x_header_scredit_tbl(l_count).sales_credit_type_id := l_rec.sales_credit_type_id;
      x_header_scredit_tbl(l_count).sales_credit_id := l_rec.SALES_CREDIT_ID;
      x_header_scredit_tbl(l_count).wh_update_date := l_rec.WH_UPDATE_DATE;
        --SG{
--      x_header_scredit_tbl(l_count).sales_group_id := l_rec.sales_group_id;
--      x_header_scredit_tbl(l_count).sales_group_updated:=l_rec.sales_group_updated;
        --SG}
      x_header_scredit_tbl(l_count).lock_control   := l_rec.LOCK_CONTROL;

        l_count := l_count + 1;
    END LOOP;

    IF l_entity = 1 THEN
        CLOSE l_header_scredit_csr_s;
    ELSIF l_entity = 2 THEN
        CLOSE l_header_scredit_csr_h;
    END IF;

    --  PK sent and no rows found

    IF
    (p_sales_credit_id IS NOT NULL
     AND
     p_sales_credit_id <> FND_API.G_MISS_NUM)
    AND
    (x_Header_Scredit_tbl.COUNT = 0)
    THEN
        RAISE NO_DATA_FOUND;
    END IF;

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Header Scredit Query_Rows'
        );
    END IF;
END;


-- Line Query_Row
PROCEDURE Query_Row
(   p_line_id                       IN  NUMBER
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_line_rec                      IN OUT NOCOPY OE_Order_PUB.Line_Rec_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
l_line_tbl               OE_Order_PUB.Line_Tbl_Type;
BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
      l_current_version_number := Get_Version_Number(p_line_id => p_line_id);
    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Line_Util.Query_Row(p_line_id => p_line_id, x_line_rec => x_line_rec);
   ELSE

    G_INTERNAL_QUERY := TRUE;
    Query_Rows
        (   p_line_id                     => p_line_id
         , p_version_number              => l_version_number
	   , x_line_tbl                    => l_line_tbl
        );

	x_line_rec := l_line_tbl(1);
    G_INTERNAL_QUERY := FALSE;

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Line Query_Row'
        );
    END IF;
END;


-- Line Query_Rows
PROCEDURE Query_Rows
(   p_line_id                       IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_header_id                     IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_line_set_id                   IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_line_tbl                      IN OUT NOCOPY OE_Order_PUB.Line_Tbl_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;

l_org_id 		      	NUMBER;
l_count				NUMBER;
l_entity                        NUMBER;

CURSOR l_line_csr_l IS
SELECT  ACCOUNTING_RULE_ID
  , ACCOUNTING_RULE_DURATION
  , ACTUAL_ARRIVAL_DATE
  , ACTUAL_SHIPMENT_DATE
  , AGREEMENT_ID
  , ARRIVAL_SET_ID
  , ATO_LINE_ID
  , ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE16   --For bug 2184255
  , ATTRIBUTE17
  , ATTRIBUTE18
  , ATTRIBUTE19
  , ATTRIBUTE2
  , ATTRIBUTE20
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTO_SELECTED_QUANTITY
  , AUTHORIZED_TO_SHIP_FLAG
  , BOOKED_FLAG
  , CANCELLED_FLAG
  , CANCELLED_QUANTITY
  , COMPONENT_CODE
  , COMPONENT_NUMBER
  , COMPONENT_SEQUENCE_ID
  , CONFIG_HEADER_ID
  , CONFIG_REV_NBR
  , CONFIG_DISPLAY_SEQUENCE
  , CONFIGURATION_ID
  , CONTEXT

  , CREATED_BY
  , CREATION_DATE
  , CREDIT_INVOICE_LINE_ID
  , CUSTOMER_DOCK_CODE
  , CUSTOMER_JOB
  , CUSTOMER_PRODUCTION_LINE
  , CUST_PRODUCTION_SEQ_NUM
  , CUSTOMER_TRX_LINE_ID
  , CUST_MODEL_SERIAL_NUMBER
  , CUST_PO_NUMBER
  , CUSTOMER_LINE_NUMBER
  , DELIVERY_LEAD_TIME
  , DELIVER_TO_CONTACT_ID
  , DELIVER_TO_ORG_ID
  , DEMAND_BUCKET_TYPE_CODE
  , DEMAND_CLASS_CODE
  , DEP_PLAN_REQUIRED_FLAG

  , EARLIEST_ACCEPTABLE_DATE
  , END_ITEM_UNIT_NUMBER
  , EXPLOSION_DATE
  , FIRST_ACK_CODE
  , FIRST_ACK_DATE
  , FOB_POINT_CODE
  , FREIGHT_CARRIER_CODE
  , FREIGHT_TERMS_CODE
  , FULFILLED_QUANTITY
  , FULFILLED_FLAG
  , FULFILLMENT_METHOD_CODE
  , FULFILLMENT_DATE
  , GLOBAL_ATTRIBUTE1
  , GLOBAL_ATTRIBUTE10
  , GLOBAL_ATTRIBUTE11
  , GLOBAL_ATTRIBUTE12
  , GLOBAL_ATTRIBUTE13
  , GLOBAL_ATTRIBUTE14
  , GLOBAL_ATTRIBUTE15
  , GLOBAL_ATTRIBUTE16
  , GLOBAL_ATTRIBUTE17
  , GLOBAL_ATTRIBUTE18
  , GLOBAL_ATTRIBUTE19
  , GLOBAL_ATTRIBUTE2
  , GLOBAL_ATTRIBUTE20
  , GLOBAL_ATTRIBUTE3
  , GLOBAL_ATTRIBUTE4
  , GLOBAL_ATTRIBUTE5
  , GLOBAL_ATTRIBUTE6
  , GLOBAL_ATTRIBUTE7
  , GLOBAL_ATTRIBUTE8
  , GLOBAL_ATTRIBUTE9
  , GLOBAL_ATTRIBUTE_CATEGORY
  , HEADER_ID
  , INDUSTRY_ATTRIBUTE1
  , INDUSTRY_ATTRIBUTE10
  , INDUSTRY_ATTRIBUTE11
  , INDUSTRY_ATTRIBUTE12
  , INDUSTRY_ATTRIBUTE13
  , INDUSTRY_ATTRIBUTE14
  , INDUSTRY_ATTRIBUTE15
  , INDUSTRY_ATTRIBUTE16
  , INDUSTRY_ATTRIBUTE17
  , INDUSTRY_ATTRIBUTE18
  , INDUSTRY_ATTRIBUTE19
  , INDUSTRY_ATTRIBUTE20
  , INDUSTRY_ATTRIBUTE21
  , INDUSTRY_ATTRIBUTE22
  , INDUSTRY_ATTRIBUTE23
  , INDUSTRY_ATTRIBUTE24
  , INDUSTRY_ATTRIBUTE25
  , INDUSTRY_ATTRIBUTE26
  , INDUSTRY_ATTRIBUTE27
  , INDUSTRY_ATTRIBUTE28
  , INDUSTRY_ATTRIBUTE29
  , INDUSTRY_ATTRIBUTE30
  , INDUSTRY_ATTRIBUTE2
  , INDUSTRY_ATTRIBUTE3
  , INDUSTRY_ATTRIBUTE4
  , INDUSTRY_ATTRIBUTE5
  , INDUSTRY_ATTRIBUTE6
  , INDUSTRY_ATTRIBUTE7
  , INDUSTRY_ATTRIBUTE8
  , INDUSTRY_ATTRIBUTE9
  , INDUSTRY_CONTEXT
  , INTMED_SHIP_TO_CONTACT_ID
  , INTMED_SHIP_TO_ORG_ID
  , INVENTORY_ITEM_ID
  , INVOICE_INTERFACE_STATUS_CODE



  , INVOICE_TO_CONTACT_ID
  , INVOICE_TO_ORG_ID
  , INVOICED_QUANTITY
  , INVOICING_RULE_ID
  , ORDERED_ITEM_ID
  , ITEM_IDENTIFIER_TYPE
  , ORDERED_ITEM
  , ITEM_REVISION
  , ITEM_TYPE_CODE
  , LAST_ACK_CODE
  , LAST_ACK_DATE
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LATEST_ACCEPTABLE_DATE
  , LINE_CATEGORY_CODE
  , LINE_ID
  , LINE_NUMBER
  , LINE_TYPE_ID
  , LINK_TO_LINE_ID

  , MODEL_GROUP_NUMBER
  --  , MFG_COMPONENT_SEQUENCE_ID
  --  , MFG_LEAD_TIME
  , OPEN_FLAG
  , OPTION_FLAG
  , OPTION_NUMBER
  , ORDERED_QUANTITY
  , ORDERED_QUANTITY2              --OPM 02/JUN/00
  , ORDER_QUANTITY_UOM
  , ORDERED_QUANTITY_UOM2          --OPM 02/JUN/00
  , ORG_ID
  , ORIG_SYS_DOCUMENT_REF
  , ORIG_SYS_LINE_REF
  , ORIG_SYS_SHIPMENT_REF
  , OVER_SHIP_REASON_CODE
  , OVER_SHIP_RESOLVED_FLAG
  , PAYMENT_TERM_ID
  , PLANNING_PRIORITY
  , PREFERRED_GRADE                --OPM 02/JUN/00
  , PRICE_LIST_ID
  , PRICE_REQUEST_CODE             --PROMOTIONS MAY/01
  , PRICING_ATTRIBUTE1
  , PRICING_ATTRIBUTE10
  , PRICING_ATTRIBUTE2
  , PRICING_ATTRIBUTE3
  , PRICING_ATTRIBUTE4
  , PRICING_ATTRIBUTE5
  , PRICING_ATTRIBUTE6
  , PRICING_ATTRIBUTE7
  , PRICING_ATTRIBUTE8
  , PRICING_ATTRIBUTE9
  , PRICING_CONTEXT
  , PRICING_DATE
  , PRICING_QUANTITY
  , PRICING_QUANTITY_UOM
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , PROJECT_ID
  , PROMISE_DATE
  , RE_SOURCE_FLAG
  , REFERENCE_CUSTOMER_TRX_LINE_ID
  , REFERENCE_HEADER_ID
  , REFERENCE_LINE_ID
  , REFERENCE_TYPE

  , REQUEST_DATE
  , REQUEST_ID
  , RETURN_ATTRIBUTE1
  , RETURN_ATTRIBUTE10
  , RETURN_ATTRIBUTE11
  , RETURN_ATTRIBUTE12
  , RETURN_ATTRIBUTE13
  , RETURN_ATTRIBUTE14
  , RETURN_ATTRIBUTE15
  , RETURN_ATTRIBUTE2
  , RETURN_ATTRIBUTE3
  , RETURN_ATTRIBUTE4
  , RETURN_ATTRIBUTE5
  , RETURN_ATTRIBUTE6
  , RETURN_ATTRIBUTE7
  , RETURN_ATTRIBUTE8
  , RETURN_ATTRIBUTE9
  , RETURN_CONTEXT
  , RETURN_REASON_CODE
  , RLA_SCHEDULE_TYPE_CODE
  , SALESREP_ID
  , SCHEDULE_ARRIVAL_DATE
  , SCHEDULE_SHIP_DATE
  , SCHEDULE_STATUS_CODE
  , SHIPMENT_NUMBER
  , SHIPMENT_PRIORITY_CODE
  , SHIPPED_QUANTITY
  , SHIPPED_QUANTITY2 -- OPM B1661023 04/02/01
  , SHIPPING_METHOD_CODE
  , SHIPPING_QUANTITY
  , SHIPPING_QUANTITY2 -- OPM B1661023 04/02/01
  , SHIPPING_QUANTITY_UOM
  , SHIP_FROM_ORG_ID
  , SUBINVENTORY
  , SHIP_SET_ID
  , SHIP_TOLERANCE_ABOVE
  , SHIP_TOLERANCE_BELOW
  , SHIPPABLE_FLAG
  , SHIPPING_INTERFACED_FLAG
  , SHIP_TO_CONTACT_ID
  , SHIP_TO_ORG_ID
  , SHIP_MODEL_COMPLETE_FLAG
  , SOLD_TO_ORG_ID
  , SOLD_FROM_ORG_ID
  , SORT_ORDER
  , SOURCE_DOCUMENT_ID
  , SOURCE_DOCUMENT_LINE_ID
  , SOURCE_DOCUMENT_TYPE_ID
  , SOURCE_TYPE_CODE
  , SPLIT_FROM_LINE_ID
  , LINE_SET_ID
  , SPLIT_BY
  , MODEL_REMNANT_FLAG
  , TASK_ID
  , TAX_CODE
  , TAX_DATE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , TAX_POINT_CODE
  , TAX_RATE
  , TAX_VALUE
  , TOP_MODEL_LINE_ID
  , UNIT_LIST_PRICE
  , UNIT_LIST_PRICE_PER_PQTY
  , UNIT_SELLING_PRICE
  , UNIT_SELLING_PRICE_PER_PQTY
  , VISIBLE_DEMAND_FLAG
  , VEH_CUS_ITEM_CUM_KEY_ID
  , SHIPPING_INSTRUCTIONS
  , PACKING_INSTRUCTIONS
  , SERVICE_TXN_REASON_CODE
  , SERVICE_TXN_COMMENTS
  , SERVICE_DURATION
  , SERVICE_PERIOD
  , SERVICE_START_DATE
  , SERVICE_END_DATE
  , SERVICE_COTERMINATE_FLAG
  , UNIT_LIST_PERCENT
  , UNIT_SELLING_PERCENT
  , UNIT_PERCENT_BASE_PRICE
  , SERVICE_NUMBER
  , SERVICE_REFERENCE_TYPE_CODE
  , SERVICE_REFERENCE_LINE_ID
  , SERVICE_REFERENCE_SYSTEM_ID
  , TP_CONTEXT
  , TP_ATTRIBUTE1
  , TP_ATTRIBUTE2
  , TP_ATTRIBUTE3
  , TP_ATTRIBUTE4
  , TP_ATTRIBUTE5
  , TP_ATTRIBUTE6
  , TP_ATTRIBUTE7
  , TP_ATTRIBUTE8
  , TP_ATTRIBUTE9
  , TP_ATTRIBUTE10
  , TP_ATTRIBUTE11
  , TP_ATTRIBUTE12
  , TP_ATTRIBUTE13
  , TP_ATTRIBUTE14
  , TP_ATTRIBUTE15
  , FLOW_STATUS_CODE
  --  , MARKETING_SOURCE_CODE_ID
  , CALCULATE_PRICE_FLAG
  , COMMITMENT_ID
  , ORDER_SOURCE_ID        -- aksingh
  --  , UPGRADED_FLAG
  , ORIGINAL_INVENTORY_ITEM_ID
  , ORIGINAL_ITEM_IDENTIFIER_TYPE
  , ORIGINAL_ORDERED_ITEM_ID
  , ORIGINAL_ORDERED_ITEM
  , ITEM_RELATIONSHIP_TYPE
  , ITEM_SUBSTITUTION_TYPE_CODE
  , LATE_DEMAND_PENALTY_FACTOR
  , OVERRIDE_ATP_DATE_CODE
  --  , FIRM_DEMAND_FLAG
  --  , EARLIEST_SHIP_DATE
  , USER_ITEM_DESCRIPTION
  , BLANKET_NUMBER
  , BLANKET_LINE_NUMBER
  , BLANKET_VERSION_NUMBER
    --MRG B
  --  , UNIT_COST
    --MRG E
  --  , LOCK_CONTROL
  , NVL(OPTION_NUMBER, -1)  OPN
  , NVL(COMPONENT_NUMBER, -1)  CPN
  , NVL(SERVICE_NUMBER, -1)  SVN
  , CHANGE_SEQUENCE
--key Transaction Dates
  , order_firmed_date
  , actual_fulfillment_date
    FROM    OE_ORDER_LINES_HISTORY
    WHERE LINE_ID = p_line_id
      AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

CURSOR l_line_csr_h IS
SELECT  ACCOUNTING_RULE_ID
  , ACCOUNTING_RULE_DURATION
  , ACTUAL_ARRIVAL_DATE
  , ACTUAL_SHIPMENT_DATE
  , AGREEMENT_ID
  , ARRIVAL_SET_ID
  , ATO_LINE_ID
  , ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE16   --For bug 2184255
  , ATTRIBUTE17
  , ATTRIBUTE18
  , ATTRIBUTE19
  , ATTRIBUTE2
  , ATTRIBUTE20
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTO_SELECTED_QUANTITY
  , AUTHORIZED_TO_SHIP_FLAG
  , BOOKED_FLAG
  , CANCELLED_FLAG
  , CANCELLED_QUANTITY
  , COMPONENT_CODE
  , COMPONENT_NUMBER
  , COMPONENT_SEQUENCE_ID
  , CONFIG_HEADER_ID
  , CONFIG_REV_NBR
  , CONFIG_DISPLAY_SEQUENCE
  , CONFIGURATION_ID
  , CONTEXT

  , CREATED_BY
  , CREATION_DATE
  , CREDIT_INVOICE_LINE_ID
  , CUSTOMER_DOCK_CODE
  , CUSTOMER_JOB
  , CUSTOMER_PRODUCTION_LINE
  , CUST_PRODUCTION_SEQ_NUM
  , CUSTOMER_TRX_LINE_ID
  , CUST_MODEL_SERIAL_NUMBER
  , CUST_PO_NUMBER
  , CUSTOMER_LINE_NUMBER
  , DELIVERY_LEAD_TIME
  , DELIVER_TO_CONTACT_ID
  , DELIVER_TO_ORG_ID
  , DEMAND_BUCKET_TYPE_CODE
  , DEMAND_CLASS_CODE
  , DEP_PLAN_REQUIRED_FLAG

  , EARLIEST_ACCEPTABLE_DATE
  , END_ITEM_UNIT_NUMBER
  , EXPLOSION_DATE
  , FIRST_ACK_CODE
  , FIRST_ACK_DATE
  , FOB_POINT_CODE
  , FREIGHT_CARRIER_CODE
  , FREIGHT_TERMS_CODE
  , FULFILLED_QUANTITY
  , FULFILLED_FLAG
  , FULFILLMENT_METHOD_CODE
  , FULFILLMENT_DATE
  , GLOBAL_ATTRIBUTE1
  , GLOBAL_ATTRIBUTE10
  , GLOBAL_ATTRIBUTE11
  , GLOBAL_ATTRIBUTE12
  , GLOBAL_ATTRIBUTE13
  , GLOBAL_ATTRIBUTE14
  , GLOBAL_ATTRIBUTE15
  , GLOBAL_ATTRIBUTE16
  , GLOBAL_ATTRIBUTE17
  , GLOBAL_ATTRIBUTE18
  , GLOBAL_ATTRIBUTE19
  , GLOBAL_ATTRIBUTE2
  , GLOBAL_ATTRIBUTE20
  , GLOBAL_ATTRIBUTE3
  , GLOBAL_ATTRIBUTE4
  , GLOBAL_ATTRIBUTE5
  , GLOBAL_ATTRIBUTE6
  , GLOBAL_ATTRIBUTE7
  , GLOBAL_ATTRIBUTE8
  , GLOBAL_ATTRIBUTE9
  , GLOBAL_ATTRIBUTE_CATEGORY
  , HEADER_ID
  , INDUSTRY_ATTRIBUTE1
  , INDUSTRY_ATTRIBUTE10
  , INDUSTRY_ATTRIBUTE11
  , INDUSTRY_ATTRIBUTE12
  , INDUSTRY_ATTRIBUTE13
  , INDUSTRY_ATTRIBUTE14
  , INDUSTRY_ATTRIBUTE15
  , INDUSTRY_ATTRIBUTE16
  , INDUSTRY_ATTRIBUTE17
  , INDUSTRY_ATTRIBUTE18
  , INDUSTRY_ATTRIBUTE19
  , INDUSTRY_ATTRIBUTE20
  , INDUSTRY_ATTRIBUTE21
  , INDUSTRY_ATTRIBUTE22
  , INDUSTRY_ATTRIBUTE23
  , INDUSTRY_ATTRIBUTE24
  , INDUSTRY_ATTRIBUTE25
  , INDUSTRY_ATTRIBUTE26
  , INDUSTRY_ATTRIBUTE27
  , INDUSTRY_ATTRIBUTE28
  , INDUSTRY_ATTRIBUTE29
  , INDUSTRY_ATTRIBUTE30
  , INDUSTRY_ATTRIBUTE2
  , INDUSTRY_ATTRIBUTE3
  , INDUSTRY_ATTRIBUTE4
  , INDUSTRY_ATTRIBUTE5
  , INDUSTRY_ATTRIBUTE6
  , INDUSTRY_ATTRIBUTE7
  , INDUSTRY_ATTRIBUTE8
  , INDUSTRY_ATTRIBUTE9
  , INDUSTRY_CONTEXT
  , INTMED_SHIP_TO_CONTACT_ID
  , INTMED_SHIP_TO_ORG_ID
  , INVENTORY_ITEM_ID
  , INVOICE_INTERFACE_STATUS_CODE



  , INVOICE_TO_CONTACT_ID
  , INVOICE_TO_ORG_ID
  , INVOICED_QUANTITY
  , INVOICING_RULE_ID
  , ORDERED_ITEM_ID
  , ITEM_IDENTIFIER_TYPE
  , ORDERED_ITEM
  , ITEM_REVISION
  , ITEM_TYPE_CODE
  , LAST_ACK_CODE
  , LAST_ACK_DATE
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LATEST_ACCEPTABLE_DATE
  , LINE_CATEGORY_CODE
  , LINE_ID
  , LINE_NUMBER
  , LINE_TYPE_ID
  , LINK_TO_LINE_ID

  , MODEL_GROUP_NUMBER
  --  , MFG_COMPONENT_SEQUENCE_ID
  --  , MFG_LEAD_TIME
  , OPEN_FLAG
  , OPTION_FLAG
  , OPTION_NUMBER
  , ORDERED_QUANTITY
  , ORDERED_QUANTITY2              --OPM 02/JUN/00
  , ORDER_QUANTITY_UOM
  , ORDERED_QUANTITY_UOM2          --OPM 02/JUN/00
  , ORG_ID
  , ORIG_SYS_DOCUMENT_REF
  , ORIG_SYS_LINE_REF
  , ORIG_SYS_SHIPMENT_REF
  , OVER_SHIP_REASON_CODE
  , OVER_SHIP_RESOLVED_FLAG
  , PAYMENT_TERM_ID
  , PLANNING_PRIORITY
  , PREFERRED_GRADE                --OPM 02/JUN/00
  , PRICE_LIST_ID
  , PRICE_REQUEST_CODE             --PROMOTIONS SEP/01
  , PRICING_ATTRIBUTE1
  , PRICING_ATTRIBUTE10
  , PRICING_ATTRIBUTE2
  , PRICING_ATTRIBUTE3
  , PRICING_ATTRIBUTE4
  , PRICING_ATTRIBUTE5
  , PRICING_ATTRIBUTE6
  , PRICING_ATTRIBUTE7
  , PRICING_ATTRIBUTE8
  , PRICING_ATTRIBUTE9
  , PRICING_CONTEXT
  , PRICING_DATE
  , PRICING_QUANTITY
  , PRICING_QUANTITY_UOM
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , PROJECT_ID
  , PROMISE_DATE
  , RE_SOURCE_FLAG
  , REFERENCE_CUSTOMER_TRX_LINE_ID
  , REFERENCE_HEADER_ID
  , REFERENCE_LINE_ID
  , REFERENCE_TYPE

  , REQUEST_DATE
  , REQUEST_ID
  , RETURN_ATTRIBUTE1
  , RETURN_ATTRIBUTE10
  , RETURN_ATTRIBUTE11
  , RETURN_ATTRIBUTE12
  , RETURN_ATTRIBUTE13
  , RETURN_ATTRIBUTE14
  , RETURN_ATTRIBUTE15
  , RETURN_ATTRIBUTE2
  , RETURN_ATTRIBUTE3
  , RETURN_ATTRIBUTE4
  , RETURN_ATTRIBUTE5
  , RETURN_ATTRIBUTE6
  , RETURN_ATTRIBUTE7
  , RETURN_ATTRIBUTE8
  , RETURN_ATTRIBUTE9
  , RETURN_CONTEXT
  , RETURN_REASON_CODE
  , RLA_SCHEDULE_TYPE_CODE
  , SALESREP_ID
  , SCHEDULE_ARRIVAL_DATE
  , SCHEDULE_SHIP_DATE
  , SCHEDULE_STATUS_CODE
  , SHIPMENT_NUMBER
  , SHIPMENT_PRIORITY_CODE
  , SHIPPED_QUANTITY
  , SHIPPED_QUANTITY2 -- OPM B1661023 04/02/01
  , SHIPPING_METHOD_CODE
  , SHIPPING_QUANTITY
  , SHIPPING_QUANTITY2 -- OPM B1661023 04/02/01
  , SHIPPING_QUANTITY_UOM
  , SHIP_FROM_ORG_ID
  , SUBINVENTORY
  , SHIP_SET_ID
  , SHIP_TOLERANCE_ABOVE
  , SHIP_TOLERANCE_BELOW
  , SHIPPABLE_FLAG
  , SHIPPING_INTERFACED_FLAG
  , SHIP_TO_CONTACT_ID
  , SHIP_TO_ORG_ID
  , SHIP_MODEL_COMPLETE_FLAG
  , SOLD_TO_ORG_ID
  , SOLD_FROM_ORG_ID
  , SORT_ORDER
  , SOURCE_DOCUMENT_ID
  , SOURCE_DOCUMENT_LINE_ID
  , SOURCE_DOCUMENT_TYPE_ID
  , SOURCE_TYPE_CODE
  , SPLIT_FROM_LINE_ID
  , LINE_SET_ID
  , SPLIT_BY
  , MODEL_REMNANT_FLAG
  , TASK_ID
  , TAX_CODE
  , TAX_DATE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , TAX_POINT_CODE
  , TAX_RATE
  , TAX_VALUE
  , TOP_MODEL_LINE_ID
  , UNIT_LIST_PRICE
  , UNIT_LIST_PRICE_PER_PQTY
  , UNIT_SELLING_PRICE
  , UNIT_SELLING_PRICE_PER_PQTY
  , VISIBLE_DEMAND_FLAG
  , VEH_CUS_ITEM_CUM_KEY_ID
  , SHIPPING_INSTRUCTIONS
  , PACKING_INSTRUCTIONS
  , SERVICE_TXN_REASON_CODE
  , SERVICE_TXN_COMMENTS
  , SERVICE_DURATION
  , SERVICE_PERIOD
  , SERVICE_START_DATE
  , SERVICE_END_DATE
  , SERVICE_COTERMINATE_FLAG
  , UNIT_LIST_PERCENT
  , UNIT_SELLING_PERCENT
  , UNIT_PERCENT_BASE_PRICE
  , SERVICE_NUMBER
  , SERVICE_REFERENCE_TYPE_CODE
  , SERVICE_REFERENCE_LINE_ID
  , SERVICE_REFERENCE_SYSTEM_ID
  , TP_CONTEXT
  , TP_ATTRIBUTE1
  , TP_ATTRIBUTE2
  , TP_ATTRIBUTE3
  , TP_ATTRIBUTE4
  , TP_ATTRIBUTE5
  , TP_ATTRIBUTE6
  , TP_ATTRIBUTE7
  , TP_ATTRIBUTE8
  , TP_ATTRIBUTE9
  , TP_ATTRIBUTE10
  , TP_ATTRIBUTE11
  , TP_ATTRIBUTE12
  , TP_ATTRIBUTE13
  , TP_ATTRIBUTE14
  , TP_ATTRIBUTE15
  , FLOW_STATUS_CODE
  --  , MARKETING_SOURCE_CODE_ID
  , CALCULATE_PRICE_FLAG
  , COMMITMENT_ID
  , ORDER_SOURCE_ID        -- aksingh
  --  , upgraded_flag
  , ORIGINAL_INVENTORY_ITEM_ID
  , ORIGINAL_ITEM_IDENTIFIER_TYPE
  , ORIGINAL_ORDERED_ITEM_ID
  , ORIGINAL_ORDERED_ITEM
  , ITEM_RELATIONSHIP_TYPE
  , ITEM_SUBSTITUTION_TYPE_CODE
  , LATE_DEMAND_PENALTY_FACTOR
  , OVERRIDE_ATP_DATE_CODE
  --  , FIRM_DEMAND_FLAG
  --  , EARLIEST_SHIP_DATE
  , USER_ITEM_DESCRIPTION
  , BLANKET_NUMBER
  , BLANKET_LINE_NUMBER
  , BLANKET_VERSION_NUMBER
    --MRG B
  --  , UNIT_COST
    --MRG E
  --  , LOCK_CONTROL
  , NVL(OPTION_NUMBER, -1)  OPN
  , NVL(COMPONENT_NUMBER, -1)  CPN
  , NVL(SERVICE_NUMBER, -1)  SVN
  , CHANGE_SEQUENCE
--key Transaction Dates
  , order_firmed_date
  , actual_fulfillment_date
    FROM    OE_ORDER_LINES_HISTORY
    WHERE HEADER_ID = p_header_id
      AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'))
    ORDER BY LINE_NUMBER,SHIPMENT_NUMBER,OPN, CPN, SVN;


CURSOR l_line_csr_s IS
SELECT  ACCOUNTING_RULE_ID
  , ACCOUNTING_RULE_DURATION
  , ACTUAL_ARRIVAL_DATE
  , ACTUAL_SHIPMENT_DATE
  , AGREEMENT_ID
  , ARRIVAL_SET_ID
  , ATO_LINE_ID
  , ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE16   --For bug 2184255
  , ATTRIBUTE17
  , ATTRIBUTE18
  , ATTRIBUTE19
  , ATTRIBUTE2
  , ATTRIBUTE20
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTO_SELECTED_QUANTITY
  , AUTHORIZED_TO_SHIP_FLAG
  , BOOKED_FLAG
  , CANCELLED_FLAG
  , CANCELLED_QUANTITY
  , COMPONENT_CODE
  , COMPONENT_NUMBER
  , COMPONENT_SEQUENCE_ID
  , CONFIG_HEADER_ID
  , CONFIG_REV_NBR
  , CONFIG_DISPLAY_SEQUENCE
  , CONFIGURATION_ID
  , CONTEXT

  , CREATED_BY
  , CREATION_DATE
  , CREDIT_INVOICE_LINE_ID
  , CUSTOMER_DOCK_CODE
  , CUSTOMER_JOB
  , CUSTOMER_PRODUCTION_LINE
  , CUST_PRODUCTION_SEQ_NUM
  , CUSTOMER_TRX_LINE_ID
  , CUST_MODEL_SERIAL_NUMBER
  , CUST_PO_NUMBER
  , CUSTOMER_LINE_NUMBER
  , DELIVERY_LEAD_TIME
  , DELIVER_TO_CONTACT_ID
  , DELIVER_TO_ORG_ID
  , DEMAND_BUCKET_TYPE_CODE
  , DEMAND_CLASS_CODE
  , DEP_PLAN_REQUIRED_FLAG

  , EARLIEST_ACCEPTABLE_DATE
  , END_ITEM_UNIT_NUMBER
  , EXPLOSION_DATE
  , FIRST_ACK_CODE
  , FIRST_ACK_DATE
  , FOB_POINT_CODE
  , FREIGHT_CARRIER_CODE
  , FREIGHT_TERMS_CODE
  , FULFILLED_QUANTITY
  , FULFILLED_FLAG
  , FULFILLMENT_METHOD_CODE
  , FULFILLMENT_DATE
  , GLOBAL_ATTRIBUTE1
  , GLOBAL_ATTRIBUTE10
  , GLOBAL_ATTRIBUTE11
  , GLOBAL_ATTRIBUTE12
  , GLOBAL_ATTRIBUTE13
  , GLOBAL_ATTRIBUTE14
  , GLOBAL_ATTRIBUTE15
  , GLOBAL_ATTRIBUTE16
  , GLOBAL_ATTRIBUTE17
  , GLOBAL_ATTRIBUTE18
  , GLOBAL_ATTRIBUTE19
  , GLOBAL_ATTRIBUTE2
  , GLOBAL_ATTRIBUTE20
  , GLOBAL_ATTRIBUTE3
  , GLOBAL_ATTRIBUTE4
  , GLOBAL_ATTRIBUTE5
  , GLOBAL_ATTRIBUTE6
  , GLOBAL_ATTRIBUTE7
  , GLOBAL_ATTRIBUTE8
  , GLOBAL_ATTRIBUTE9
  , GLOBAL_ATTRIBUTE_CATEGORY
  , HEADER_ID
  , INDUSTRY_ATTRIBUTE1
  , INDUSTRY_ATTRIBUTE10
  , INDUSTRY_ATTRIBUTE11
  , INDUSTRY_ATTRIBUTE12
  , INDUSTRY_ATTRIBUTE13
  , INDUSTRY_ATTRIBUTE14
  , INDUSTRY_ATTRIBUTE15
  , INDUSTRY_ATTRIBUTE16
  , INDUSTRY_ATTRIBUTE17
  , INDUSTRY_ATTRIBUTE18
  , INDUSTRY_ATTRIBUTE19
  , INDUSTRY_ATTRIBUTE20
  , INDUSTRY_ATTRIBUTE21
  , INDUSTRY_ATTRIBUTE22
  , INDUSTRY_ATTRIBUTE23
  , INDUSTRY_ATTRIBUTE24
  , INDUSTRY_ATTRIBUTE25
  , INDUSTRY_ATTRIBUTE26
  , INDUSTRY_ATTRIBUTE27
  , INDUSTRY_ATTRIBUTE28
  , INDUSTRY_ATTRIBUTE29
  , INDUSTRY_ATTRIBUTE30
  , INDUSTRY_ATTRIBUTE2
  , INDUSTRY_ATTRIBUTE3
  , INDUSTRY_ATTRIBUTE4
  , INDUSTRY_ATTRIBUTE5
  , INDUSTRY_ATTRIBUTE6
  , INDUSTRY_ATTRIBUTE7
  , INDUSTRY_ATTRIBUTE8
  , INDUSTRY_ATTRIBUTE9
  , INDUSTRY_CONTEXT
  , INTMED_SHIP_TO_CONTACT_ID
  , INTMED_SHIP_TO_ORG_ID
  , INVENTORY_ITEM_ID
  , INVOICE_INTERFACE_STATUS_CODE



  , INVOICE_TO_CONTACT_ID
  , INVOICE_TO_ORG_ID
  , INVOICED_QUANTITY
  , INVOICING_RULE_ID
  , ORDERED_ITEM_ID
  , ITEM_IDENTIFIER_TYPE
  , ORDERED_ITEM
  , ITEM_REVISION
  , ITEM_TYPE_CODE
  , LAST_ACK_CODE
  , LAST_ACK_DATE
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LATEST_ACCEPTABLE_DATE
  , LINE_CATEGORY_CODE
  , LINE_ID
  , LINE_NUMBER
  , LINE_TYPE_ID
  , LINK_TO_LINE_ID

  , MODEL_GROUP_NUMBER
  --  , MFG_COMPONENT_SEQUENCE_ID
  --  , MFG_LEAD_TIME
  , OPEN_FLAG
  , OPTION_FLAG
  , OPTION_NUMBER
  , ORDERED_QUANTITY
  , ORDERED_QUANTITY2              --OPM 02/JUN/00
  , ORDER_QUANTITY_UOM
  , ORDERED_QUANTITY_UOM2          --OPM 02/JUN/00
  , ORG_ID
  , ORIG_SYS_DOCUMENT_REF
  , ORIG_SYS_LINE_REF
  , ORIG_SYS_SHIPMENT_REF
  , OVER_SHIP_REASON_CODE
  , OVER_SHIP_RESOLVED_FLAG
  , PAYMENT_TERM_ID
  , PLANNING_PRIORITY
  , PREFERRED_GRADE                --OPM 02/JUN/00
  , PRICE_LIST_ID
  , PRICE_REQUEST_CODE             --PROMOTIONS SEP/01
  , PRICING_ATTRIBUTE1
  , PRICING_ATTRIBUTE10
  , PRICING_ATTRIBUTE2
  , PRICING_ATTRIBUTE3
  , PRICING_ATTRIBUTE4
  , PRICING_ATTRIBUTE5
  , PRICING_ATTRIBUTE6
  , PRICING_ATTRIBUTE7
  , PRICING_ATTRIBUTE8
  , PRICING_ATTRIBUTE9
  , PRICING_CONTEXT
  , PRICING_DATE
  , PRICING_QUANTITY
  , PRICING_QUANTITY_UOM
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , PROJECT_ID
  , PROMISE_DATE
  , RE_SOURCE_FLAG
  , REFERENCE_CUSTOMER_TRX_LINE_ID
  , REFERENCE_HEADER_ID
  , REFERENCE_LINE_ID
  , REFERENCE_TYPE

  , REQUEST_DATE
  , REQUEST_ID
  , RETURN_ATTRIBUTE1
  , RETURN_ATTRIBUTE10
  , RETURN_ATTRIBUTE11
  , RETURN_ATTRIBUTE12
  , RETURN_ATTRIBUTE13
  , RETURN_ATTRIBUTE14
  , RETURN_ATTRIBUTE15
  , RETURN_ATTRIBUTE2
  , RETURN_ATTRIBUTE3
  , RETURN_ATTRIBUTE4
  , RETURN_ATTRIBUTE5
  , RETURN_ATTRIBUTE6
  , RETURN_ATTRIBUTE7
  , RETURN_ATTRIBUTE8
  , RETURN_ATTRIBUTE9
  , RETURN_CONTEXT
  , RETURN_REASON_CODE
  , RLA_SCHEDULE_TYPE_CODE
  , SALESREP_ID
  , SCHEDULE_ARRIVAL_DATE
  , SCHEDULE_SHIP_DATE
  , SCHEDULE_STATUS_CODE
  , SHIPMENT_NUMBER
  , SHIPMENT_PRIORITY_CODE
  , SHIPPED_QUANTITY
  , SHIPPED_QUANTITY2 -- OPM B1661023 04/02/01
  , SHIPPING_METHOD_CODE
  , SHIPPING_QUANTITY
  , SHIPPING_QUANTITY2 -- OPM B1661023 04/02/01
  , SHIPPING_QUANTITY_UOM
  , SHIP_FROM_ORG_ID
  , SUBINVENTORY
  , SHIP_SET_ID
  , SHIP_TOLERANCE_ABOVE
  , SHIP_TOLERANCE_BELOW
  , SHIPPABLE_FLAG
  , SHIPPING_INTERFACED_FLAG
  , SHIP_TO_CONTACT_ID
  , SHIP_TO_ORG_ID
  , SHIP_MODEL_COMPLETE_FLAG
  , SOLD_TO_ORG_ID
  , SOLD_FROM_ORG_ID
  , SORT_ORDER
  , SOURCE_DOCUMENT_ID
  , SOURCE_DOCUMENT_LINE_ID
  , SOURCE_DOCUMENT_TYPE_ID
  , SOURCE_TYPE_CODE
  , SPLIT_FROM_LINE_ID
  , LINE_SET_ID
  , SPLIT_BY
  , MODEL_REMNANT_FLAG
  , TASK_ID
  , TAX_CODE
  , TAX_DATE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , TAX_POINT_CODE
  , TAX_RATE
  , TAX_VALUE
  , TOP_MODEL_LINE_ID
  , UNIT_LIST_PRICE
  , UNIT_LIST_PRICE_PER_PQTY
  , UNIT_SELLING_PRICE
  , UNIT_SELLING_PRICE_PER_PQTY
  , VISIBLE_DEMAND_FLAG
  , VEH_CUS_ITEM_CUM_KEY_ID
  , SHIPPING_INSTRUCTIONS
  , PACKING_INSTRUCTIONS
  , SERVICE_TXN_REASON_CODE
  , SERVICE_TXN_COMMENTS
  , SERVICE_DURATION
  , SERVICE_PERIOD
  , SERVICE_START_DATE
  , SERVICE_END_DATE
  , SERVICE_COTERMINATE_FLAG
  , UNIT_LIST_PERCENT
  , UNIT_SELLING_PERCENT
  , UNIT_PERCENT_BASE_PRICE
  , SERVICE_NUMBER
  , SERVICE_REFERENCE_TYPE_CODE
  , SERVICE_REFERENCE_LINE_ID
  , SERVICE_REFERENCE_SYSTEM_ID
  , TP_CONTEXT
  , TP_ATTRIBUTE1
  , TP_ATTRIBUTE2
  , TP_ATTRIBUTE3
  , TP_ATTRIBUTE4
  , TP_ATTRIBUTE5
  , TP_ATTRIBUTE6
  , TP_ATTRIBUTE7
  , TP_ATTRIBUTE8
  , TP_ATTRIBUTE9
  , TP_ATTRIBUTE10
  , TP_ATTRIBUTE11
  , TP_ATTRIBUTE12
  , TP_ATTRIBUTE13
  , TP_ATTRIBUTE14
  , TP_ATTRIBUTE15
  , FLOW_STATUS_CODE
  --  , MARKETING_SOURCE_CODE_ID
  , CALCULATE_PRICE_FLAG
  , COMMITMENT_ID
  , ORDER_SOURCE_ID        -- aksingh
  --  , upgraded_flag
  , ORIGINAL_INVENTORY_ITEM_ID
  , ORIGINAL_ITEM_IDENTIFIER_TYPE
  , ORIGINAL_ORDERED_ITEM_ID
  , ORIGINAL_ORDERED_ITEM
  , ITEM_RELATIONSHIP_TYPE
  , ITEM_SUBSTITUTION_TYPE_CODE
  , LATE_DEMAND_PENALTY_FACTOR
  , OVERRIDE_ATP_DATE_CODE
  --  , FIRM_DEMAND_FLAG
  --  , EARLIEST_SHIP_DATE
  , USER_ITEM_DESCRIPTION
  , BLANKET_NUMBER
  , BLANKET_LINE_NUMBER
  , BLANKET_VERSION_NUMBER
--MRG B
  --  , UNIT_COST
--MRG E
  --  , LOCK_CONTROL
  , NVL(OPTION_NUMBER, -1)  OPN
  , NVL(COMPONENT_NUMBER, -1)  CPN
  , NVL(SERVICE_NUMBER, -1)  SVN
  , CHANGE_SEQUENCE
--key Transaction Dates
  , order_firmed_date
  , actual_fulfillment_date
    FROM    OE_ORDER_LINES_HISTORY
    WHERE LINE_SET_ID = p_line_set_id
      AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'))
    ORDER BY LINE_NUMBER,SHIPMENT_NUMBER,OPN, CPN, SVN;

    l_rec l_line_csr_l%ROWTYPE;
BEGIN

   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
      l_current_version_number := Get_Version_Number(p_header_id => p_header_id, p_line_id => p_line_id);

      IF l_version_number >= l_current_version_number THEN
         l_version_number := NULL;
      END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Line_Util.Query_Rows(p_header_id => p_header_id, p_line_id => p_line_id, x_line_tbl => x_line_tbl);
   ELSE

    IF
    (p_line_id IS NOT NULL
     AND
     p_line_id <> FND_API.G_MISS_NUM)
    AND
    (p_header_id IS NOT NULL
     AND
     p_header_id <> FND_API.G_MISS_NUM)
    THEN

        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;

    END IF;

    -----------------------------------------------------------------
    -- Fix bug 1275972: Setup the l_entity variable based on the ID
    -- variable that is passed.
    -----------------------------------------------------------------

    IF nvl(p_line_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 1;
           OPEN l_line_csr_l;
    ELSIF nvl(p_header_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 2;
           OPEN l_line_csr_h;
    ELSIF nvl(p_line_set_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 3;
           OPEN l_line_csr_s;
    END IF;

    l_org_id := OE_GLOBALS.G_ORG_ID;
    if l_org_id IS NULL THEN
       OE_GLOBALS.Set_Context;
       l_org_id := OE_GLOBALS.G_ORG_ID;
    end if;

    oe_debug_pub.add('Entering '||to_char(l_org_id), 1);


    --  Loop over fetched records

    l_count := 1;

    LOOP

      IF l_entity = 1 THEN
         FETCH l_line_csr_l INTO l_rec;
         EXIT WHEN l_line_csr_l%NOTFOUND;
      ELSIF l_entity = 2 THEN
         FETCH l_line_csr_h INTO l_rec;
         EXIT WHEN l_line_csr_h%NOTFOUND;
      ELSIF l_entity = 3 THEN
         FETCH l_line_csr_s INTO l_rec;
         EXIT WHEN l_line_csr_s%NOTFOUND;
      ELSE
         EXIT;
      END IF;

        x_line_tbl(l_count).accounting_rule_id  := l_rec.ACCOUNTING_RULE_ID;
      x_line_tbl(l_count).accounting_rule_duration  := l_rec.ACCOUNTING_RULE_DURATION;
      x_line_tbl(l_count).actual_arrival_date := l_rec.ACTUAL_ARRIVAL_DATE;
      x_line_tbl(l_count).actual_shipment_date := l_rec.ACTUAL_SHIPMENT_DATE;
      x_line_tbl(l_count).agreement_id        := l_rec.AGREEMENT_ID;
      x_line_tbl(l_count).arrival_Set_id      := l_rec.ARRIVAL_SET_ID;
      x_line_tbl(l_count).ato_line_id         := l_rec.ATO_LINE_ID;
      x_line_tbl(l_count).attribute1          := l_rec.ATTRIBUTE1;
      x_line_tbl(l_count).attribute10         := l_rec.ATTRIBUTE10;
      x_line_tbl(l_count).attribute11         := l_rec.ATTRIBUTE11;
      x_line_tbl(l_count).attribute12         := l_rec.ATTRIBUTE12;
      x_line_tbl(l_count).attribute13         := l_rec.ATTRIBUTE13;
      x_line_tbl(l_count).attribute14         := l_rec.ATTRIBUTE14;
      x_line_tbl(l_count).attribute15         := l_rec.ATTRIBUTE15;
      x_line_tbl(l_count).attribute16         := l_rec.ATTRIBUTE16;   --For bug 2184255
      x_line_tbl(l_count).attribute17         := l_rec.ATTRIBUTE17;
      x_line_tbl(l_count).attribute18         := l_rec.ATTRIBUTE18;
      x_line_tbl(l_count).attribute19         := l_rec.ATTRIBUTE19;
      x_line_tbl(l_count).attribute2          := l_rec.ATTRIBUTE2;
      x_line_tbl(l_count).attribute20         := l_rec.ATTRIBUTE20;
      x_line_tbl(l_count).attribute3          := l_rec.ATTRIBUTE3;
      x_line_tbl(l_count).attribute4          := l_rec.ATTRIBUTE4;
      x_line_tbl(l_count).attribute5          := l_rec.ATTRIBUTE5;
      x_line_tbl(l_count).attribute6          := l_rec.ATTRIBUTE6;
      x_line_tbl(l_count).attribute7          := l_rec.ATTRIBUTE7;
      x_line_tbl(l_count).attribute8          := l_rec.ATTRIBUTE8;
      x_line_tbl(l_count).attribute9          := l_rec.ATTRIBUTE9;
      x_line_tbl(l_count).auto_selected_quantity  := l_rec.AUTO_SELECTED_QUANTITY;
      x_line_tbl(l_count).Authorized_to_ship_flag  := l_rec.Authorized_to_ship_flag;
      x_line_tbl(l_count).booked_flag          := l_rec.booked_flag;
      x_line_tbl(l_count).cancelled_flag       := l_rec.cancelled_flag;
      x_line_tbl(l_count).cancelled_quantity  := l_rec.CANCELLED_QUANTITY;
      x_line_tbl(l_count).component_code      := l_rec.COMPONENT_CODE;
      x_line_tbl(l_count).component_number    := l_rec.COMPONENT_NUMBER;
      x_line_tbl(l_count).component_sequence_id := l_rec.COMPONENT_SEQUENCE_ID;
      x_line_tbl(l_count).config_header_id := l_rec.CONFIG_HEADER_ID;
      x_line_tbl(l_count).config_rev_nbr := l_rec.CONFIG_REV_NBR;
      x_line_tbl(l_count).config_display_sequence := l_rec.CONFIG_DISPLAY_SEQUENCE;
      x_line_tbl(l_count).configuration_id    := l_rec.CONFIGURATION_ID;
      x_line_tbl(l_count).context             := l_rec.CONTEXT;

      x_line_tbl(l_count).created_by          := l_rec.CREATED_BY;
      x_line_tbl(l_count).creation_date       := l_rec.CREATION_DATE;
      x_line_tbl(l_count).credit_invoice_line_id  := l_rec.CREDIT_INVOICE_LINE_ID;
      x_line_tbl(l_count).customer_dock_code  := l_rec.CUSTOMER_DOCK_CODE;
      x_line_tbl(l_count).customer_job        := l_rec.CUSTOMER_JOB;
      x_line_tbl(l_count).customer_production_line := l_rec.CUSTOMER_PRODUCTION_LINE;
      x_line_tbl(l_count).cust_production_seq_num := l_rec.CUST_PRODUCTION_SEQ_NUM;
      x_line_tbl(l_count).customer_trx_line_id := l_rec.CUSTOMER_TRX_LINE_ID;
      x_line_tbl(l_count).cust_model_serial_number := l_rec.CUST_MODEL_SERIAL_NUMBER;
      x_line_tbl(l_count).cust_po_number      := l_rec.CUST_PO_NUMBER;
      x_line_tbl(l_count).customer_line_number      := l_rec.CUSTOMER_LINE_NUMBER;
      x_line_tbl(l_count).delivery_lead_time  := l_rec.DELIVERY_LEAD_TIME;
      x_line_tbl(l_count).deliver_to_contact_id := l_rec.DELIVER_TO_CONTACT_ID;
      x_line_tbl(l_count).deliver_to_org_id   := l_rec.DELIVER_TO_ORG_ID;
      x_line_tbl(l_count).demand_bucket_type_code := l_rec.DEMAND_BUCKET_TYPE_CODE;
      x_line_tbl(l_count).demand_class_code   := l_rec.DEMAND_CLASS_CODE;
      x_line_tbl(l_count).dep_plan_required_flag := l_rec.DEP_PLAN_REQUIRED_FLAG;

      x_line_tbl(l_count).earliest_acceptable_date   := l_rec.EARLIEST_ACCEPTABLE_DATE;
	   x_line_tbl(l_count).end_item_unit_number       := l_rec.END_ITEM_UNIT_NUMBER;
      x_line_tbl(l_count).explosion_date   := l_rec.EXPLOSION_DATE;
      x_line_tbl(l_count).first_ack_code   := l_rec.FIRST_ACK_CODE;
      x_line_tbl(l_count).first_ack_date   := l_rec.FIRST_ACK_DATE;
      x_line_tbl(l_count).fob_point_code      := l_rec.FOB_POINT_CODE;
      x_line_tbl(l_count).freight_carrier_code  := l_rec.FREIGHT_CARRIER_CODE;
      x_line_tbl(l_count).freight_terms_code  := l_rec.FREIGHT_TERMS_CODE;
      x_line_tbl(l_count).fulfilled_quantity  := l_rec.FULFILLED_QUANTITY;
      x_line_tbl(l_count).fulfilled_flag  := l_rec.FULFILLED_FLAG;
      x_line_tbl(l_count).fulfillment_method_code  := l_rec.FULFILLMENT_METHOD_CODE;
      x_line_tbl(l_count).fulfillment_date    := l_rec.FULFILLMENT_DATE;
      x_line_tbl(l_count).global_attribute1   := l_rec.GLOBAL_ATTRIBUTE1;
      x_line_tbl(l_count).global_attribute10  := l_rec.GLOBAL_ATTRIBUTE10;
      x_line_tbl(l_count).global_attribute11  := l_rec.GLOBAL_ATTRIBUTE11;
      x_line_tbl(l_count).global_attribute12  := l_rec.GLOBAL_ATTRIBUTE12;
      x_line_tbl(l_count).global_attribute13  := l_rec.GLOBAL_ATTRIBUTE13;
      x_line_tbl(l_count).global_attribute14  := l_rec.GLOBAL_ATTRIBUTE14;
      x_line_tbl(l_count).global_attribute15  := l_rec.GLOBAL_ATTRIBUTE15;
      x_line_tbl(l_count).global_attribute16  := l_rec.GLOBAL_ATTRIBUTE16;
      x_line_tbl(l_count).global_attribute17  := l_rec.GLOBAL_ATTRIBUTE17;
      x_line_tbl(l_count).global_attribute18  := l_rec.GLOBAL_ATTRIBUTE18;
      x_line_tbl(l_count).global_attribute19  := l_rec.GLOBAL_ATTRIBUTE19;
      x_line_tbl(l_count).global_attribute2   := l_rec.GLOBAL_ATTRIBUTE2;
      x_line_tbl(l_count).global_attribute20  := l_rec.GLOBAL_ATTRIBUTE20;
      x_line_tbl(l_count).global_attribute3   := l_rec.GLOBAL_ATTRIBUTE3;
      x_line_tbl(l_count).global_attribute4   := l_rec.GLOBAL_ATTRIBUTE4;
      x_line_tbl(l_count).global_attribute5   := l_rec.GLOBAL_ATTRIBUTE5;
      x_line_tbl(l_count).global_attribute6   := l_rec.GLOBAL_ATTRIBUTE6;
      x_line_tbl(l_count).global_attribute7   := l_rec.GLOBAL_ATTRIBUTE7;
      x_line_tbl(l_count).global_attribute8   := l_rec.GLOBAL_ATTRIBUTE8;
      x_line_tbl(l_count).global_attribute9   := l_rec.GLOBAL_ATTRIBUTE9;
      x_line_tbl(l_count).global_attribute_category := l_rec.GLOBAL_ATTRIBUTE_CATEGORY;
      x_line_tbl(l_count).header_id           := l_rec.HEADER_ID;
      x_line_tbl(l_count).industry_attribute1 := l_rec.INDUSTRY_ATTRIBUTE1;
      x_line_tbl(l_count).industry_attribute10 := l_rec.INDUSTRY_ATTRIBUTE10;
      x_line_tbl(l_count).industry_attribute11 := l_rec.INDUSTRY_ATTRIBUTE11;
      x_line_tbl(l_count).industry_attribute12 := l_rec.INDUSTRY_ATTRIBUTE12;
      x_line_tbl(l_count).industry_attribute13 := l_rec.INDUSTRY_ATTRIBUTE13;
      x_line_tbl(l_count).industry_attribute14 := l_rec.INDUSTRY_ATTRIBUTE14;
      x_line_tbl(l_count).industry_attribute15 := l_rec.INDUSTRY_ATTRIBUTE15;
       x_line_tbl(l_count).industry_attribute16 := l_rec.INDUSTRY_ATTRIBUTE16;
       x_line_tbl(l_count).industry_attribute17 := l_rec.INDUSTRY_ATTRIBUTE17;
      x_line_tbl(l_count).industry_attribute18 := l_rec.INDUSTRY_ATTRIBUTE18;
      x_line_tbl(l_count).industry_attribute19 := l_rec.INDUSTRY_ATTRIBUTE19;
      x_line_tbl(l_count).industry_attribute20 := l_rec.INDUSTRY_ATTRIBUTE20;
      x_line_tbl(l_count).industry_attribute21 := l_rec.INDUSTRY_ATTRIBUTE21;
      x_line_tbl(l_count).industry_attribute22 := l_rec.INDUSTRY_ATTRIBUTE22;
      x_line_tbl(l_count).industry_attribute23:= l_rec.INDUSTRY_ATTRIBUTE23;
      x_line_tbl(l_count).industry_attribute24 := l_rec.INDUSTRY_ATTRIBUTE24;
      x_line_tbl(l_count).industry_attribute25 := l_rec.INDUSTRY_ATTRIBUTE25;
      x_line_tbl(l_count).industry_attribute26 := l_rec.INDUSTRY_ATTRIBUTE26;
      x_line_tbl(l_count).industry_attribute27 := l_rec.INDUSTRY_ATTRIBUTE27;
      x_line_tbl(l_count).industry_attribute28 := l_rec.INDUSTRY_ATTRIBUTE28;
      x_line_tbl(l_count).industry_attribute29 := l_rec.INDUSTRY_ATTRIBUTE29;
      x_line_tbl(l_count).industry_attribute30 := l_rec.INDUSTRY_ATTRIBUTE30;
      x_line_tbl(l_count).industry_attribute2 := l_rec.INDUSTRY_ATTRIBUTE2;
      x_line_tbl(l_count).industry_attribute3 := l_rec.INDUSTRY_ATTRIBUTE3;
      x_line_tbl(l_count).industry_attribute4 := l_rec.INDUSTRY_ATTRIBUTE4;
      x_line_tbl(l_count).industry_attribute5 := l_rec.INDUSTRY_ATTRIBUTE5;
      x_line_tbl(l_count).industry_attribute6 := l_rec.INDUSTRY_ATTRIBUTE6;
      x_line_tbl(l_count).industry_attribute7 := l_rec.INDUSTRY_ATTRIBUTE7;
      x_line_tbl(l_count).industry_attribute8 := l_rec.INDUSTRY_ATTRIBUTE8;
      x_line_tbl(l_count).industry_attribute9 := l_rec.INDUSTRY_ATTRIBUTE9;
      x_line_tbl(l_count).industry_context    := l_rec.INDUSTRY_CONTEXT;
      x_line_tbl(l_count).intermed_ship_to_contact_id := l_rec.INTMED_SHIP_TO_CONTACT_ID;
      x_line_tbl(l_count).intermed_ship_to_org_id := l_rec.INTMED_SHIP_TO_ORG_ID;
      x_line_tbl(l_count).inventory_item_id   := l_rec.INVENTORY_ITEM_ID;
      x_line_tbl(l_count).invoice_interface_status_code := l_rec.INVOICE_INTERFACE_STATUS_CODE;

      x_line_tbl(l_count).invoice_to_contact_id := l_rec.INVOICE_TO_CONTACT_ID;
      x_line_tbl(l_count).invoice_to_org_id   := l_rec.INVOICE_TO_ORG_ID;
      x_line_tbl(l_count).invoiced_quantity   := l_rec.INVOICED_QUANTITY;
      x_line_tbl(l_count).invoicing_rule_id   := l_rec.INVOICING_RULE_ID;
      x_line_tbl(l_count).ordered_item_id             := l_rec.ORDERED_ITEM_ID;
      x_line_tbl(l_count).item_identifier_type := l_rec.ITEM_IDENTIFIER_TYPE;
      x_line_tbl(l_count).ordered_item          := l_rec.ORDERED_ITEM;
      x_line_tbl(l_count).item_revision       := l_rec.ITEM_REVISION;
      x_line_tbl(l_count).item_type_code      := l_rec.ITEM_TYPE_CODE;
      x_line_tbl(l_count).last_ack_code       := l_rec.LAST_ACK_CODE;
      x_line_tbl(l_count).last_ack_date       := l_rec.LAST_ACK_DATE;
      x_line_tbl(l_count).last_updated_by     := l_rec.LAST_UPDATED_BY;
      x_line_tbl(l_count).last_update_date    := l_rec.LAST_UPDATE_DATE;
      x_line_tbl(l_count).last_update_login   := l_rec.LAST_UPDATE_LOGIN;
      x_line_tbl(l_count).latest_acceptable_date   := l_rec.LATEST_ACCEPTABLE_DATE;
      x_line_tbl(l_count).line_category_code  := l_rec.LINE_CATEGORY_CODE;
      x_line_tbl(l_count).line_id             := l_rec.LINE_ID;
      x_line_tbl(l_count).line_number         := l_rec.LINE_NUMBER;
      x_line_tbl(l_count).line_type_id        := l_rec.LINE_TYPE_ID;
      x_line_tbl(l_count).link_to_line_id     := l_rec.LINK_TO_LINE_ID;

      x_line_tbl(l_count).model_group_number := l_rec.MODEL_GROUP_NUMBER;
       -- x_line_tbl(l_count).mfg_component_sequence_id := l_rec.MFG_COMPONENT_SEQUENCE_ID;
       -- x_line_tbl(l_count).mfg_lead_time       := l_rec.MFG_LEAD_TIME;
      x_line_tbl(l_count).open_flag           := l_rec.open_flag;
      x_line_tbl(l_count).option_flag         := l_rec.OPTION_FLAG;
      x_line_tbl(l_count).option_number       := l_rec.OPTION_NUMBER;
      x_line_tbl(l_count).ordered_quantity    := l_rec.ORDERED_QUANTITY;
      x_line_tbl(l_count).ordered_quantity2   := l_rec.ORDERED_QUANTITY2; -- OPM
      x_line_tbl(l_count).order_quantity_uom  := l_rec.ORDER_QUANTITY_UOM;
      x_line_tbl(l_count).ordered_quantity_uom2 := l_rec.ORDERED_QUANTITY_UOM2;  -- OPM
      x_line_tbl(l_count).org_id              := l_rec.ORG_ID;
      x_line_tbl(l_count).orig_sys_document_ref := l_rec.ORIG_SYS_DOCUMENT_REF;
      x_line_tbl(l_count).orig_sys_line_ref := l_rec.ORIG_SYS_LINE_REF;
      x_line_tbl(l_count).orig_sys_shipment_ref := l_rec.ORIG_SYS_SHIPMENT_REF;
       x_line_tbl(l_count).over_ship_reason_code := l_rec.OVER_SHIP_REASON_CODE;
      x_line_tbl(l_count).over_ship_resolved_flag := l_rec.OVER_SHIP_RESOLVED_FLAG;
      x_line_tbl(l_count).source_document_line_id := l_rec.SOURCE_DOCUMENT_LINE_ID;
      x_line_tbl(l_count).payment_term_id     := l_rec.PAYMENT_TERM_ID;
      x_line_tbl(l_count).planning_priority     := l_rec.PLANNING_PRIORITY;
      x_line_tbl(l_count).preferred_grade     := l_rec.PREFERRED_GRADE;  -- OPM
      x_line_tbl(l_count).price_list_id       := l_rec.PRICE_LIST_ID;
      x_line_tbl(l_count).price_request_code  := l_rec.PRICE_REQUEST_CODE; -- PROMOTIONS SEP/01
      x_line_tbl(l_count).pricing_attribute1  := l_rec.PRICING_ATTRIBUTE1;
      x_line_tbl(l_count).pricing_attribute10 := l_rec.PRICING_ATTRIBUTE10;
      x_line_tbl(l_count).pricing_attribute2  := l_rec.PRICING_ATTRIBUTE2;
      x_line_tbl(l_count).pricing_attribute3  := l_rec.PRICING_ATTRIBUTE3;
      x_line_tbl(l_count).pricing_attribute4  := l_rec.PRICING_ATTRIBUTE4;
      x_line_tbl(l_count).pricing_attribute5  := l_rec.PRICING_ATTRIBUTE5;
      x_line_tbl(l_count).pricing_attribute6  := l_rec.PRICING_ATTRIBUTE6;
      x_line_tbl(l_count).pricing_attribute7  := l_rec.PRICING_ATTRIBUTE7;
      x_line_tbl(l_count).pricing_attribute8  := l_rec.PRICING_ATTRIBUTE8;
      x_line_tbl(l_count).pricing_attribute9  := l_rec.PRICING_ATTRIBUTE9;
      x_line_tbl(l_count).pricing_context     := l_rec.PRICING_CONTEXT;
      x_line_tbl(l_count).pricing_date        := l_rec.PRICING_DATE;
      x_line_tbl(l_count).pricing_quantity    := l_rec.PRICING_QUANTITY;
      x_line_tbl(l_count).pricing_quantity_uom := l_rec.PRICING_QUANTITY_UOM;
      x_line_tbl(l_count).program_application_id := l_rec.PROGRAM_APPLICATION_ID;
      x_line_tbl(l_count).program_id          := l_rec.PROGRAM_ID;
      x_line_tbl(l_count).program_update_date := l_rec.PROGRAM_UPDATE_DATE;
      x_line_tbl(l_count).project_id          := l_rec.PROJECT_ID;
      x_line_tbl(l_count).promise_date        := l_rec.PROMISE_DATE;
      x_line_tbl(l_count).re_source_flag      := l_rec.RE_SOURCE_FLAG;
      x_line_tbl(l_count).reference_customer_trx_line_id := l_rec.reference_customer_trx_line_id;
      x_line_tbl(l_count).reference_header_id := l_rec.REFERENCE_HEADER_ID;
      x_line_tbl(l_count).reference_line_id   := l_rec.REFERENCE_LINE_ID;
      x_line_tbl(l_count).reference_type      := l_rec.REFERENCE_TYPE;

      x_line_tbl(l_count).request_date        := l_rec.REQUEST_DATE;
      x_line_tbl(l_count).request_id          := l_rec.REQUEST_ID;
      x_line_tbl(l_count).return_attribute1   := l_rec.RETURN_ATTRIBUTE1;
      x_line_tbl(l_count).return_attribute10  := l_rec.RETURN_ATTRIBUTE10;
      x_line_tbl(l_count).return_attribute11  := l_rec.RETURN_ATTRIBUTE11;
      x_line_tbl(l_count).return_attribute12  := l_rec.RETURN_ATTRIBUTE12;
      x_line_tbl(l_count).return_attribute13  := l_rec.RETURN_ATTRIBUTE13;
      x_line_tbl(l_count).return_attribute14  := l_rec.RETURN_ATTRIBUTE14;
      x_line_tbl(l_count).return_attribute15  := l_rec.RETURN_ATTRIBUTE15;
      x_line_tbl(l_count).return_attribute2   := l_rec.RETURN_ATTRIBUTE2;
      x_line_tbl(l_count).return_attribute3   := l_rec.RETURN_ATTRIBUTE3;
      x_line_tbl(l_count).return_attribute4   := l_rec.RETURN_ATTRIBUTE4;
      x_line_tbl(l_count).return_attribute5   := l_rec.RETURN_ATTRIBUTE5;
      x_line_tbl(l_count).return_attribute6   := l_rec.RETURN_ATTRIBUTE6;
      x_line_tbl(l_count).return_attribute7   := l_rec.RETURN_ATTRIBUTE7;
      x_line_tbl(l_count).return_attribute8   := l_rec.RETURN_ATTRIBUTE8;
      x_line_tbl(l_count).return_attribute9   := l_rec.RETURN_ATTRIBUTE9;
      x_line_tbl(l_count).return_context      := l_rec.RETURN_CONTEXT;
      x_line_tbl(l_count).return_reason_code      := l_rec.RETURN_REASON_CODE;
       x_line_tbl(l_count).salesrep_id      := l_rec.SALESREP_ID;
      x_line_tbl(l_count).rla_schedule_type_code := l_rec.RLA_SCHEDULE_TYPE_CODE;
      x_line_tbl(l_count).schedule_arrival_date      := l_rec.SCHEDULE_ARRIVAL_DATE;
      x_line_tbl(l_count).schedule_ship_date       := l_rec.SCHEDULE_SHIP_DATE;
      x_line_tbl(l_count).schedule_status_code       := l_rec.SCHEDULE_STATUS_CODE;
      x_line_tbl(l_count).shipment_number     := l_rec.SHIPMENT_NUMBER;
      x_line_tbl(l_count).shipment_priority_code := l_rec.SHIPMENT_PRIORITY_CODE;
      x_line_tbl(l_count).shipped_quantity    := l_rec.SHIPPED_QUANTITY;
      x_line_tbl(l_count).shipped_quantity2   := l_rec.SHIPPED_QUANTITY2; -- OPM B1661023 04/02/01
      x_line_tbl(l_count).shipping_method_code := l_rec.SHIPPING_METHOD_CODE;
      x_line_tbl(l_count).shipping_quantity   := l_rec.SHIPPING_QUANTITY;
      x_line_tbl(l_count).shipping_quantity2   := l_rec.SHIPPING_QUANTITY2; -- OPM B1661023 04/02/01
      x_line_tbl(l_count).shipping_quantity_uom := l_rec.SHIPPING_QUANTITY_UOM;
      x_line_tbl(l_count).ship_from_org_id    := l_rec.SHIP_FROM_ORG_ID;
      x_line_tbl(l_count).subinventory        := l_rec.SUBINVENTORY;
      x_line_tbl(l_count).ship_set_id    := l_rec.SHIP_SET_ID;
      x_line_tbl(l_count).ship_tolerance_above := l_rec.SHIP_TOLERANCE_ABOVE;
      x_line_tbl(l_count).ship_tolerance_below := l_rec.SHIP_TOLERANCE_BELOW;
      x_line_tbl(l_count).shippable_flag := l_rec.SHIPPABLE_FLAG;
      x_line_tbl(l_count).shipping_interfaced_flag := l_rec.SHIPPING_INTERFACED_FLAG;
      x_line_tbl(l_count).ship_to_contact_id  := l_rec.SHIP_TO_CONTACT_ID;
      x_line_tbl(l_count).ship_to_org_id      := l_rec.SHIP_TO_ORG_ID;
      x_line_tbl(l_count).ship_model_complete_flag      := l_rec.SHIP_MODEL_COMPLETE_FLAG;

      x_line_tbl(l_count).sold_to_org_id      := l_rec.SOLD_TO_ORG_ID;
      x_line_tbl(l_count).sold_from_org_id      := l_rec.SOLD_FROM_ORG_ID;
      x_line_tbl(l_count).sort_order          := l_rec.SORT_ORDER;
      x_line_tbl(l_count).source_document_id := l_rec.SOURCE_DOCUMENT_ID;
      x_line_tbl(l_count).source_document_line_id := l_rec.SOURCE_DOCUMENT_LINE_ID;
      x_line_tbl(l_count).source_document_type_id := l_rec.SOURCE_DOCUMENT_TYPE_ID;
      x_line_tbl(l_count).source_type_code        := l_rec.SOURCE_TYPE_CODE;
      x_line_tbl(l_count).split_from_line_id      := l_rec.SPLIT_FROM_LINE_ID;
      x_line_tbl(l_count).line_set_id             := l_rec.LINE_SET_ID;
      x_line_tbl(l_count).split_by      := l_rec.SPLIT_BY;
      x_line_tbl(l_count).model_remnant_flag := l_rec.MODEL_REMNANT_FLAG;
      x_line_tbl(l_count).task_id             := l_rec.TASK_ID;
      x_line_tbl(l_count).tax_code            := l_rec.TAX_CODE;
      x_line_tbl(l_count).tax_date            := l_rec.TAX_DATE;
      x_line_tbl(l_count).tax_exempt_flag     := l_rec.TAX_EXEMPT_FLAG;
      x_line_tbl(l_count).tax_exempt_number   := l_rec.TAX_EXEMPT_NUMBER;
      x_line_tbl(l_count).tax_exempt_reason_code := l_rec.TAX_EXEMPT_REASON_CODE;
      x_line_tbl(l_count).tax_point_code      := l_rec.TAX_POINT_CODE;
      x_line_tbl(l_count).tax_rate            := l_rec.TAX_RATE;
      x_line_tbl(l_count).tax_value           := l_rec.TAX_VALUE;
      x_line_tbl(l_count).top_model_line_id   := l_rec.TOP_MODEL_LINE_ID;
      x_line_tbl(l_count).unit_list_price     := l_rec.UNIT_LIST_PRICE;
      x_line_tbl(l_count).unit_list_price_per_pqty     := l_rec.UNIT_LIST_PRICE_PER_PQTY;
      x_line_tbl(l_count).unit_selling_price  := l_rec.UNIT_SELLING_PRICE;
      x_line_tbl(l_count).unit_selling_price_per_pqty  := l_rec.UNIT_SELLING_PRICE_PER_PQTY;
      x_line_tbl(l_count).visible_demand_flag := l_rec.VISIBLE_DEMAND_FLAG;
      x_line_tbl(l_count).veh_cus_item_cum_key_id := l_rec.VEH_CUS_ITEM_CUM_KEY_ID;
      x_line_tbl(l_count).shipping_instructions := l_rec.shipping_instructions;
      x_line_tbl(l_count).packing_instructions := l_rec.packing_instructions;
	   x_line_tbl(l_count).service_txn_reason_code := l_rec.service_txn_reason_code;
      x_line_tbl(l_count).service_txn_comments := l_rec.service_txn_comments;
	   x_line_tbl(l_count).service_duration := l_rec.service_duration;
	x_line_tbl(l_count).service_period := l_rec.service_period;
	x_line_tbl(l_count).service_start_date := l_rec.service_start_date;
	x_line_tbl(l_count).service_end_date := l_rec.service_end_date;
	x_line_tbl(l_count).service_coterminate_flag := l_rec.service_coterminate_flag;
	x_line_tbl(l_count).unit_list_percent := l_rec.unit_list_percent;
	x_line_tbl(l_count).unit_selling_percent := l_rec.unit_selling_percent;
	x_line_tbl(l_count).unit_percent_base_price := l_rec.unit_percent_base_price;
	x_line_tbl(l_count).service_number := l_rec.service_number;
	x_line_tbl(l_count).service_reference_type_code := l_rec.service_reference_type_code;
	x_line_tbl(l_count).service_reference_line_id:= l_rec.service_reference_line_id;
	x_line_tbl(l_count).service_reference_system_id:= l_rec.service_reference_system_id;

	x_line_tbl(l_count).tp_context := l_rec.tp_context;
	x_line_tbl(l_count).tp_attribute1 := l_rec.tp_attribute1;
	x_line_tbl(l_count).tp_attribute2 := l_rec.tp_attribute2;
	x_line_tbl(l_count).tp_attribute3 := l_rec.tp_attribute3;
	x_line_tbl(l_count).tp_attribute4 := l_rec.tp_attribute4;
	x_line_tbl(l_count).tp_attribute5 := l_rec.tp_attribute5;
	x_line_tbl(l_count).tp_attribute6 := l_rec.tp_attribute6;
	x_line_tbl(l_count).tp_attribute7 := l_rec.tp_attribute7;
	x_line_tbl(l_count).tp_attribute8 := l_rec.tp_attribute8;
	x_line_tbl(l_count).tp_attribute9 := l_rec.tp_attribute9;
	x_line_tbl(l_count).tp_attribute10:= l_rec.tp_attribute10;
	x_line_tbl(l_count).tp_attribute11:= l_rec.tp_attribute11;
	x_line_tbl(l_count).tp_attribute12:= l_rec.tp_attribute12;
	x_line_tbl(l_count).tp_attribute13:= l_rec.tp_attribute13;
	x_line_tbl(l_count).tp_attribute14:= l_rec.tp_attribute14;
	x_line_tbl(l_count).tp_attribute15:= l_rec.tp_attribute15;
	x_line_tbl(l_count).flow_status_code := l_rec.flow_status_code;
	 --  x_line_tbl(l_count).marketing_source_code_id := l_rec.marketing_source_code_id;
	x_line_tbl(l_count).calculate_price_flag := l_rec.calculate_price_flag;
       x_line_tbl(l_count).commitment_id        := l_rec.commitment_id;
  --  oe_debug_pub.add('OEXULINB -aksingh -- assigning order_source_id value ' || l_rec.order_source_id);
       x_line_tbl(l_count).order_source_id        := l_rec.order_source_id;
     --  x_line_tbl(l_count).upgraded_flag       := l_rec.upgraded_flag ;
       x_line_tbl(l_count).Original_Inventory_Item_Id  := l_rec.Original_Inventory_Item_Id ;
       x_line_tbl(l_count).Original_item_identifier_Type  := l_rec.Original_item_identifier_Type ;
       x_line_tbl(l_count).Original_ordered_item_id  := l_rec.Original_ordered_item_id ;
       x_line_tbl(l_count).Original_ordered_item  := l_rec.Original_ordered_item ;
       x_line_tbl(l_count).Item_Relationship_Type  := l_rec.Item_Relationship_Type ;
       x_line_tbl(l_count).Item_substitution_type_code  := l_rec.Item_substitution_type_code ;
       x_line_tbl(l_count).Late_Demand_Penalty_Factor  := l_rec.Late_Demand_Penalty_Factor ;
       x_line_tbl(l_count).Override_atp_date_code  := l_rec.Override_atp_date_code ;
     --  x_line_tbl(l_count).Firm_Demand_Flag  := l_rec.Firm_Demand_Flag ;
     --  x_line_tbl(l_count).Earliest_ship_Date  := l_rec.Earliest_ship_Date ;
       x_line_tbl(l_count).user_item_description  := l_rec.user_item_description ;

       -- Changes for Blanket Orders
       x_line_tbl(l_count).Blanket_Number         := l_rec.Blanket_Number;
       x_line_tbl(l_count).Blanket_Line_Number    := l_rec.Blanket_Line_Number;
       x_line_tbl(l_count).Blanket_Version_Number := l_rec.Blanket_Version_Number;

      -- Adding change sequence

       x_line_tbl(l_count).change_sequence        := l_rec.change_sequence;
      --Key Transaction Dates
       x_line_tbl(l_count).order_firmed_date      := l_rec.order_firmed_date;
       x_line_tbl(l_count).actual_fulfillment_date:= l_rec.actual_fulfillment_date;
     --end

--  oe_debug_pub.add('outside margin x_line_tbl',1);
--MRG B
--If OE_FEATURES_PVT.Is_Margin_Avail Then
--   oe_debug_pub.add('inside margin x_line_tbl',1);
--x_line_tbl(l_count).unit_cost:=l_rec.unit_cost;
--End If;
--MRG E
--       x_line_tbl(l_count).lock_control:= l_rec.lock_control;

       -- Added for COPY ER 1480867
       --l_OPN := l_rec.OPN;
       --l_CPN := l_rec.CPN;
       --l_SVN := l_rec.SVN;


	   -- set values for non-DB fields
	x_line_tbl(l_count).db_flag 		:= FND_API.G_TRUE;
	x_line_tbl(l_count).operation 		:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).return_status 	:= FND_API.G_MISS_CHAR;

	x_line_tbl(l_count).schedule_action_code 	:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).reserved_quantity 	:= FND_API.G_MISS_NUM;
	x_line_tbl(l_count).change_reason 		:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).change_comments 		:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).arrival_set 		:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).ship_set 			:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).fulfillment_set 		:= FND_API.G_MISS_CHAR;
	x_line_tbl(l_count).split_action_code 	:= FND_API.G_MISS_CHAR;
	   l_count := l_count + 1;

    END LOOP;

    IF l_entity = 1 THEN
        CLOSE l_line_csr_l;
    ELSIF l_entity = 2 THEN
        CLOSE l_line_csr_h;
    ELSIF l_entity = 3 THEN
        CLOSE l_line_csr_s;
    END IF;

    --  PK sent and no rows found

    IF
    (p_line_id IS NOT NULL
     AND
     p_line_id <> FND_API.G_MISS_NUM)
    AND
    (x_line_tbl.COUNT = 0)
    THEN
        RAISE NO_DATA_FOUND;
    END IF;

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Line Query_Rows'
        );
    END IF;
END;


-- Line Adj Query_Row
PROCEDURE Query_Row
(   p_price_adjustment_id           IN  NUMBER
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Line_Adj_Rec				 IN OUT NOCOPY  OE_Order_PUB.Line_Adj_Rec_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
  l_Line_Adj_Tbl		OE_Order_PUB.Line_Adj_Tbl_Type;
BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_price_adjustment_id => p_price_adjustment_id);
    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Line_Adj_Util.Query_Row(p_price_adjustment_id => p_price_adjustment_id, x_line_adj_rec => x_line_adj_rec);
   ELSE
    G_INTERNAL_QUERY := TRUE;
    Query_Rows
        (   p_price_adjustment_id        => p_price_adjustment_id
         , p_version_number             => l_version_number
	   , x_Line_Adj_Tbl			 => l_Line_Adj_Tbl
	   );
    x_Line_Adj_Rec := l_Line_Adj_Tbl(1);

    G_INTERNAL_QUERY := FALSE;

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Line Adj Query_Row'
        );
    END IF;
END;


-- Line Adj Query_Rows
PROCEDURE Query_Rows
(   p_price_adjustment_id          IN  NUMBER :=
                                       FND_API.G_MISS_NUM
, p_line_id                      IN  NUMBER :=
                                       FND_API.G_MISS_NUM
, p_Header_id                    IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Line_Adj_Tbl				IN OUT NOCOPY OE_Order_PUB.Line_Adj_Tbl_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;
l_count			NUMBER;
l_entity                        NUMBER;

CURSOR l_Line_Adj_csr_p IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTOMATIC_FLAG
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DISCOUNT_ID
  , DISCOUNT_LINE_ID
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , PRICE_ADJUSTMENT_ID
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , REQUEST_ID
  , LIST_HEADER_ID
  , LIST_LINE_ID
  , LIST_LINE_TYPE_CODE
  , MODIFIER_MECHANISM_TYPE_CODE
  , MODIFIED_FROM
  , MODIFIED_TO
  , UPDATED_FLAG
  , UPDATE_ALLOWED
  , APPLIED_FLAG
  , CHANGE_REASON_CODE
  , CHANGE_REASON_TEXT
  , operand
  , Arithmetic_operator
  , COST_ID
  , TAX_CODE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , PARENT_ADJUSTMENT_ID
  , INVOICED_FLAG
  , ESTIMATED_FLAG
  , INC_IN_SALES_PERFORMANCE
  , SPLIT_ACTION_CODE
  , ADJUSTED_AMOUNT
  , PRICING_PHASE_ID
  , CHARGE_TYPE_CODE
  , CHARGE_SUBTYPE_CODE
  , list_line_no
  , source_system_code
  , benefit_qty
  , benefit_uom_code
  , print_on_invoice_flag
  , expiration_date
  , rebate_transaction_type_code
  , rebate_transaction_reference
  , rebate_payment_system_code
  , redeemed_date
  , redeemed_flag
  , accrual_flag
  , range_break_quantity
  , accrual_conversion_rate
  , pricing_group_sequence
  , modifier_level_code
  , price_break_type_code
  , substitution_attribute
  , proration_type_code
  , credit_or_charge_flag
  , include_on_returns_flag
  , AC_ATTRIBUTE1
  , AC_ATTRIBUTE10
  , AC_ATTRIBUTE11
  , AC_ATTRIBUTE12
  , AC_ATTRIBUTE13
  , AC_ATTRIBUTE14
  , AC_ATTRIBUTE15
  , AC_ATTRIBUTE2
  , AC_ATTRIBUTE3
  , AC_ATTRIBUTE4
  , AC_ATTRIBUTE5
  , AC_ATTRIBUTE6
  , AC_ATTRIBUTE7
  , AC_ATTRIBUTE8
  , AC_ATTRIBUTE9
  , AC_CONTEXT
--uom begin
--  , OPERAND_PER_PQTY
--  , ADJUSTED_AMOUNT_PER_PQTY
--uom end
  , LOCK_CONTROL
 -- eBTax changes
  , TAX_RATE_ID
    FROM  OE_PRICE_ADJS_HISTORY
    WHERE PRICE_ADJUSTMENT_ID = p_price_adjustment_id
    and   version_number = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

CURSOR l_Line_Adj_csr_l IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTOMATIC_FLAG
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DISCOUNT_ID
  , DISCOUNT_LINE_ID
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , PRICE_ADJUSTMENT_ID
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , REQUEST_ID
  , LIST_HEADER_ID
  , LIST_LINE_ID
  , LIST_LINE_TYPE_CODE
  , MODIFIER_MECHANISM_TYPE_CODE
  , MODIFIED_FROM
  , MODIFIED_TO
  , UPDATED_FLAG
  , UPDATE_ALLOWED
  , APPLIED_FLAG
  , CHANGE_REASON_CODE
  , CHANGE_REASON_TEXT
  , operand
  , Arithmetic_operator
  , COST_ID
  , TAX_CODE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , PARENT_ADJUSTMENT_ID
  , INVOICED_FLAG
  , ESTIMATED_FLAG
  , INC_IN_SALES_PERFORMANCE
  , SPLIT_ACTION_CODE
  , ADJUSTED_AMOUNT
  , PRICING_PHASE_ID
  , CHARGE_TYPE_CODE
  , CHARGE_SUBTYPE_CODE
  , list_line_no
  , source_system_code
  , benefit_qty
  , benefit_uom_code
  , print_on_invoice_flag
  , expiration_date
  , rebate_transaction_type_code
  , rebate_transaction_reference
  , rebate_payment_system_code
  , redeemed_date
  , redeemed_flag
  , accrual_flag
  , range_break_quantity
  , accrual_conversion_rate
  , pricing_group_sequence
  , modifier_level_code
  , price_break_type_code
  , substitution_attribute
  , proration_type_code
  , credit_or_charge_flag
  , include_on_returns_flag
  , AC_ATTRIBUTE1
  , AC_ATTRIBUTE10
  , AC_ATTRIBUTE11
  , AC_ATTRIBUTE12
  , AC_ATTRIBUTE13
  , AC_ATTRIBUTE14
  , AC_ATTRIBUTE15
  , AC_ATTRIBUTE2
  , AC_ATTRIBUTE3
  , AC_ATTRIBUTE4
  , AC_ATTRIBUTE5
  , AC_ATTRIBUTE6
  , AC_ATTRIBUTE7
  , AC_ATTRIBUTE8
  , AC_ATTRIBUTE9
  , AC_CONTEXT
--uom begin
--  , OPERAND_PER_PQTY
--  , ADJUSTED_AMOUNT_PER_PQTY
--uom end
  , LOCK_CONTROL
-- eBTax changes
  , TAX_RATE_ID

    FROM    OE_PRICE_ADJS_HISTORY
    WHERE line_id = p_line_id
    and   version_number = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

CURSOR l_Line_Adj_csr_h IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , AUTOMATIC_FLAG
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DISCOUNT_ID
  , DISCOUNT_LINE_ID
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , PRICE_ADJUSTMENT_ID
  , PROGRAM_APPLICATION_ID
  , PROGRAM_ID
  , PROGRAM_UPDATE_DATE
  , REQUEST_ID
  , LIST_HEADER_ID
  , LIST_LINE_ID
  , LIST_LINE_TYPE_CODE
  , MODIFIER_MECHANISM_TYPE_CODE
  , MODIFIED_FROM
  , MODIFIED_TO
  , UPDATED_FLAG
  , UPDATE_ALLOWED
  , APPLIED_FLAG
  , CHANGE_REASON_CODE
  , CHANGE_REASON_TEXT
  , operand
  , Arithmetic_operator
  , COST_ID
  , TAX_CODE
  , TAX_EXEMPT_FLAG
  , TAX_EXEMPT_NUMBER
  , TAX_EXEMPT_REASON_CODE
  , PARENT_ADJUSTMENT_ID
  , INVOICED_FLAG
  , ESTIMATED_FLAG
  , INC_IN_SALES_PERFORMANCE
  , SPLIT_ACTION_CODE
  , ADJUSTED_AMOUNT
  , PRICING_PHASE_ID
  , CHARGE_TYPE_CODE
  , CHARGE_SUBTYPE_CODE
  , list_line_no
  , source_system_code
  , benefit_qty
  , benefit_uom_code
  , print_on_invoice_flag
  , expiration_date
  , rebate_transaction_type_code
  , rebate_transaction_reference
  , rebate_payment_system_code
  , redeemed_date
  , redeemed_flag
  , accrual_flag
  , range_break_quantity
  , accrual_conversion_rate
  , pricing_group_sequence
  , modifier_level_code
  , price_break_type_code
  , substitution_attribute
  , proration_type_code
  , credit_or_charge_flag
  , include_on_returns_flag
  , AC_ATTRIBUTE1
  , AC_ATTRIBUTE10
  , AC_ATTRIBUTE11
  , AC_ATTRIBUTE12
  , AC_ATTRIBUTE13
  , AC_ATTRIBUTE14
  , AC_ATTRIBUTE15
  , AC_ATTRIBUTE2
  , AC_ATTRIBUTE3
  , AC_ATTRIBUTE4
  , AC_ATTRIBUTE5
  , AC_ATTRIBUTE6
  , AC_ATTRIBUTE7
  , AC_ATTRIBUTE8
  , AC_ATTRIBUTE9
  , AC_CONTEXT
--uom begin
--  , OPERAND_PER_PQTY
--  , ADJUSTED_AMOUNT_PER_PQTY
--uom end
  , LOCK_CONTROL
   -- eBTax changes
  , TAX_RATE_ID
    FROM    OE_PRICE_ADJS_HISTORY
    WHERE header_id = p_header_id
    and   line_id is not null
    and   version_number = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

    l_rec l_line_adj_csr_p%ROWTYPE;

--
l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;
--

BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_header_id => p_header_id, p_line_id => p_line_id, p_price_adjustment_id => p_price_adjustment_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       --bug3392650 (passing the parameter p_header_id instead of p_line_level_header_id)
       OE_Line_Adj_Util.Query_Rows(p_price_adjustment_id => p_price_adjustment_id, p_line_id => p_line_id, p_header_id => p_header_id, x_line_adj_tbl => x_line_adj_tbl);
   ELSE

    IF nvl(p_price_adjustment_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 1;
           OPEN l_line_adj_csr_p;
    ELSIF nvl(p_line_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 2;
           OPEN l_line_adj_csr_l;
    ELSIF nvl(p_header_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 3;
           OPEN l_line_adj_csr_h;
    END IF;

    --  Loop over fetched records

    l_count := 1;

    LOOP

        IF l_entity = 1 THEN
             FETCH l_line_adj_csr_p INTO l_rec;
             EXIT WHEN l_line_adj_csr_p%NOTFOUND;
        ELSIF l_entity = 2 THEN
             FETCH l_line_adj_csr_l INTO l_rec;
             EXIT WHEN l_line_adj_csr_l%NOTFOUND;
        ELSIF l_entity = 3 THEN
             FETCH l_line_adj_csr_h INTO l_rec;
             EXIT WHEN l_line_adj_csr_h%NOTFOUND;
        ELSE
          EXIT;
        END IF;

        x_Line_Adj_tbl(l_count).attribute1      := l_rec.ATTRIBUTE1;
      x_Line_Adj_tbl(l_count).attribute10     := l_rec.ATTRIBUTE10;
      x_Line_Adj_tbl(l_count).attribute11     := l_rec.ATTRIBUTE11;
      x_Line_Adj_tbl(l_count).attribute12     := l_rec.ATTRIBUTE12;
      x_Line_Adj_tbl(l_count).attribute13     := l_rec.ATTRIBUTE13;
      x_Line_Adj_tbl(l_count).attribute14     := l_rec.ATTRIBUTE14;
      x_Line_Adj_tbl(l_count).attribute15     := l_rec.ATTRIBUTE15;
      x_Line_Adj_tbl(l_count).attribute2      := l_rec.ATTRIBUTE2;
      x_Line_Adj_tbl(l_count).attribute3      := l_rec.ATTRIBUTE3;
      x_Line_Adj_tbl(l_count).attribute4      := l_rec.ATTRIBUTE4;
      x_Line_Adj_tbl(l_count).attribute5      := l_rec.ATTRIBUTE5;
      x_Line_Adj_tbl(l_count).attribute6      := l_rec.ATTRIBUTE6;
      x_Line_Adj_tbl(l_count).attribute7      := l_rec.ATTRIBUTE7;
      x_Line_Adj_tbl(l_count).attribute8      := l_rec.ATTRIBUTE8;
      x_Line_Adj_tbl(l_count).attribute9      := l_rec.ATTRIBUTE9;
      x_Line_Adj_tbl(l_count).automatic_flag  := l_rec.AUTOMATIC_FLAG;
      x_Line_Adj_tbl(l_count).context         := l_rec.CONTEXT;
      x_Line_Adj_tbl(l_count).created_by      := l_rec.CREATED_BY;
      x_Line_Adj_tbl(l_count).creation_date   := l_rec.CREATION_DATE;
      x_Line_Adj_tbl(l_count).discount_id     := l_rec.DISCOUNT_ID;
      x_Line_Adj_tbl(l_count).discount_line_id := l_rec.DISCOUNT_LINE_ID;
      x_Line_Adj_tbl(l_count).header_id       := l_rec.HEADER_ID;
      x_Line_Adj_tbl(l_count).last_updated_by := l_rec.LAST_UPDATED_BY;
      x_Line_Adj_tbl(l_count).last_update_date := l_rec.LAST_UPDATE_DATE;
      x_Line_Adj_tbl(l_count).last_update_login := l_rec.LAST_UPDATE_LOGIN;
      x_Line_Adj_tbl(l_count).line_id         := l_rec.LINE_ID;
      x_Line_Adj_tbl(l_count).percent         := l_rec.PERCENT;
      x_Line_Adj_tbl(l_count).price_adjustment_id := l_rec.PRICE_ADJUSTMENT_ID;
      x_Line_Adj_tbl(l_count).program_application_id := l_rec.PROGRAM_APPLICATION_ID;
      x_Line_Adj_tbl(l_count).program_id      := l_rec.PROGRAM_ID;
      x_Line_Adj_tbl(l_count).program_update_date := l_rec.PROGRAM_UPDATE_DATE;
      x_Line_Adj_tbl(l_count).request_id      := l_rec.REQUEST_ID;
      x_Line_Adj_tbl(l_count).list_header_id      := l_rec.list_header_id;
      x_Line_Adj_tbl(l_count).list_line_id      := l_rec.list_line_id;
      x_Line_Adj_tbl(l_count).list_line_type_code      := l_rec.list_line_type_code;
      x_Line_Adj_tbl(l_count).modifier_mechanism_type_code := l_rec.modifier_mechanism_type_code;
      x_Line_Adj_tbl(l_count).modified_from      := l_rec.modified_from;
      x_Line_Adj_tbl(l_count).modified_to      := l_rec.modified_to;
      x_Line_Adj_tbl(l_count).updated_flag      := l_rec.updated_flag;
      x_Line_Adj_tbl(l_count).update_allowed    := l_rec.update_allowed;
      x_Line_Adj_tbl(l_count).applied_flag      := l_rec.applied_flag;
      x_Line_Adj_tbl(l_count).change_reason_code := l_rec.change_reason_code;
      x_Line_Adj_tbl(l_count).change_reason_text := l_rec.change_reason_text;
      x_Line_Adj_tbl(l_count).operand := l_rec.operand;
      x_Line_Adj_tbl(l_count).arithmetic_operator := l_rec.arithmetic_operator;
      x_Line_Adj_tbl(l_count).adjusted_amount := l_rec.adjusted_amount;
      x_Line_Adj_tbl(l_count).pricing_phase_id := l_rec.pricing_phase_id;
      x_Line_Adj_tbl(l_count).cost_id := l_rec.cost_id;
      x_Line_Adj_tbl(l_count).tax_code := l_rec.tax_code;
      x_Line_Adj_tbl(l_count).tax_exempt_flag := l_rec.tax_exempt_flag;
      x_Line_Adj_tbl(l_count).tax_exempt_number := l_rec.tax_exempt_number;
      x_Line_Adj_tbl(l_count).tax_exempt_reason_code := l_rec.tax_exempt_reason_code;
      x_Line_Adj_tbl(l_count).parent_adjustment_id := l_rec.parent_adjustment_id;
      x_Line_Adj_tbl(l_count).invoiced_flag := l_rec.invoiced_flag;
      x_Line_Adj_tbl(l_count).estimated_flag := l_rec.estimated_flag;
      x_Line_Adj_tbl(l_count).inc_in_sales_performance := l_rec.inc_in_sales_performance;
      x_Line_Adj_tbl(l_count).split_action_code := l_rec.split_action_code;
      x_Line_Adj_tbl(l_count).charge_type_code := l_rec.charge_type_code;
      x_Line_Adj_tbl(l_count).charge_subtype_code := l_rec.charge_subtype_code;
      x_Line_Adj_tbl(l_count).list_line_no := l_rec.list_line_no;
      x_Line_Adj_tbl(l_count).source_system_code := l_rec.source_system_code;
      x_Line_Adj_tbl(l_count).benefit_qty := l_rec.benefit_qty;
      x_Line_Adj_tbl(l_count).benefit_uom_code := l_rec.benefit_uom_code;
      x_Line_Adj_tbl(l_count).print_on_invoice_flag := l_rec.print_on_invoice_flag;
      x_Line_Adj_tbl(l_count).expiration_date := l_rec.expiration_date;
      x_Line_Adj_tbl(l_count).rebate_transaction_type_code := l_rec.rebate_transaction_type_code;
      x_Line_Adj_tbl(l_count).rebate_transaction_reference := l_rec.rebate_transaction_reference;
      x_Line_Adj_tbl(l_count).rebate_payment_system_code := l_rec.rebate_payment_system_code;
      x_Line_Adj_tbl(l_count).redeemed_date := l_rec.redeemed_date;
      x_Line_Adj_tbl(l_count).redeemed_flag := l_rec.redeemed_flag;
      x_Line_Adj_tbl(l_count).accrual_flag := l_rec.accrual_flag;
     x_Line_Adj_tbl(l_count).range_break_quantity := l_rec.range_break_quantity;
     x_Line_Adj_tbl(l_count).accrual_conversion_rate := l_rec.accrual_conversion_rate;
     x_Line_Adj_tbl(l_count).pricing_group_sequence := l_rec.pricing_group_sequence;
     x_Line_Adj_tbl(l_count).modifier_level_code := l_rec.modifier_level_code;
     x_Line_Adj_tbl(l_count).price_break_type_code := l_rec.price_break_type_code;
     x_Line_Adj_tbl(l_count).substitution_attribute := l_rec.substitution_attribute;
     x_Line_Adj_tbl(l_count).proration_type_code := l_rec.proration_type_code;
     x_Line_Adj_tbl(l_count).credit_or_charge_flag := l_rec.credit_or_charge_flag;
     x_Line_Adj_tbl(l_count).include_on_returns_flag := l_rec.include_on_returns_flag;
      x_Line_Adj_tbl(l_count).ac_attribute1    := l_rec.AC_ATTRIBUTE1;
      x_Line_Adj_tbl(l_count).ac_attribute10   := l_rec.AC_ATTRIBUTE10;
      x_Line_Adj_tbl(l_count).ac_attribute11   := l_rec.AC_ATTRIBUTE11;
      x_Line_Adj_tbl(l_count).ac_attribute12   := l_rec.AC_ATTRIBUTE12;
      x_Line_Adj_tbl(l_count).ac_attribute13   := l_rec.AC_ATTRIBUTE13;
      x_Line_Adj_tbl(l_count).ac_attribute14   := l_rec.AC_ATTRIBUTE14;
      x_Line_Adj_tbl(l_count).ac_attribute15   := l_rec.AC_ATTRIBUTE15;
      x_Line_Adj_tbl(l_count).ac_attribute2    := l_rec.AC_ATTRIBUTE2;
      x_Line_Adj_tbl(l_count).ac_attribute3    := l_rec.AC_ATTRIBUTE3;
      x_Line_Adj_tbl(l_count).ac_attribute4    := l_rec.AC_ATTRIBUTE4;
      x_Line_Adj_tbl(l_count).ac_attribute5    := l_rec.AC_ATTRIBUTE5;
      x_Line_Adj_tbl(l_count).ac_attribute6    := l_rec.AC_ATTRIBUTE6;
      x_Line_Adj_tbl(l_count).ac_attribute7    := l_rec.AC_ATTRIBUTE7;
      x_Line_Adj_tbl(l_count).ac_attribute8    := l_rec.AC_ATTRIBUTE8;
      x_Line_Adj_tbl(l_count).ac_attribute9    := l_rec.AC_ATTRIBUTE9;
      x_Line_Adj_tbl(l_count).ac_context       := l_rec.AC_CONTEXT;
--uom begin
--       x_Line_Adj_tbl(l_count).operand_per_pqty := l_rec.operand_per_pqty;
--       x_Line_Adj_tbl(l_count).adjusted_amount_per_pqty := l_rec.adjusted_amount_per_pqty;
--uom end
      x_Line_Adj_tbl(l_count).lock_control      := l_rec.LOCK_CONTROL;

        -- set values for non-DB fields
      x_Line_Adj_tbl(l_count).db_flag          := FND_API.G_TRUE;
      x_Line_Adj_tbl(l_count).operation        := FND_API.G_MISS_CHAR;
      x_Line_Adj_tbl(l_count).return_status    := FND_API.G_MISS_CHAR;
-- eBTax changes
      x_Line_Adj_tbl(l_count).tax_rate_id    := l_rec.tax_rate_id;

	   l_count := l_count + 1;

    END LOOP;

    IF l_entity = 1 THEN
        CLOSE l_line_adj_csr_p;
    ELSIF l_entity = 2 THEN
        CLOSE l_line_adj_csr_l;
    ELSIF l_entity = 3 THEN
        CLOSE l_line_adj_csr_h;
    END IF;

    --  PK sent and no rows found

    IF
    (p_price_adjustment_id IS NOT NULL
     AND
     p_price_adjustment_id <> FND_API.G_MISS_NUM)
    AND
    (x_Line_Adj_tbl.COUNT = 0)
    THEN
        RAISE NO_DATA_FOUND;
    END IF;

    --  Return fetched table

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Line Adj Query_Rows'
        );
    END IF;
END;


-- Line Scredit Query_Row
PROCEDURE Query_Row
(   p_sales_credit_id               IN  NUMBER
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Line_Scredit_rec              IN OUT NOCOPY OE_Order_PUB.Line_Scredit_Rec_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;

l_Line_Scredit_tbl OE_Order_PUB.Line_Scredit_Tbl_Type;
--
l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;
--
BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_sales_credit_id => p_sales_credit_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Line_Scredit_Util.Query_Row(p_sales_credit_id => p_sales_credit_id, x_line_scredit_rec => x_line_scredit_rec);
   ELSE

    IF l_debug_level  > 0 THEN
        oe_debug_pub.add(  'ENTERING OE_LINE_SCREDIT_UTIL.QUERY_ROW' , 1 ) ;
    END IF;

    G_INTERNAL_QUERY := TRUE;
    Query_Rows
        (   p_sales_credit_id             => p_sales_credit_id
            ,x_Line_Scredit_tbl => l_Line_Scredit_tbl
        );
    G_INTERNAL_QUERY := FALSE;
    x_Line_Scredit_rec := l_Line_Scredit_tbl(1);

   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Line Scredit Query_Row'
        );
    END IF;
END;


-- Line Scredit Query_Rows
PROCEDURE Query_Rows
(   p_sales_credit_id               IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_line_id                       IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_header_id                     IN  NUMBER :=
                                        FND_API.G_MISS_NUM
, p_version_number                IN  NUMBER := NULL
, p_phase_change_flag             IN VARCHAR2 := NULL
, x_Line_Scredit_tbl              IN OUT NOCOPY OE_Order_PUB.Line_Scredit_Tbl_Type
)
IS
l_version_number NUMBER := p_version_number;
l_current_version_number NUMBER;

CURSOR l_Line_Scredit_csr_s IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DW_UPDATE_ADVICE_FLAG
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , SALESREP_ID
  , sales_credit_type_id
  , SALES_CREDIT_ID
  , WH_UPDATE_DATE
  , LOCK_CONTROL
    FROM    OE_SALES_CREDIT_HISTORY
    WHERE   SALES_CREDIT_ID = p_sales_credit_id
    AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

CURSOR l_Line_Scredit_csr_l IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DW_UPDATE_ADVICE_FLAG
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , SALESREP_ID
  , sales_credit_type_id
  , SALES_CREDIT_ID
  , WH_UPDATE_DATE
  , LOCK_CONTROL
    FROM    OE_SALES_CREDIT_HISTORY
    WHERE   LINE_ID = p_line_id
     AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

CURSOR l_Line_Scredit_csr_h IS
SELECT  ATTRIBUTE1
  , ATTRIBUTE10
  , ATTRIBUTE11
  , ATTRIBUTE12
  , ATTRIBUTE13
  , ATTRIBUTE14
  , ATTRIBUTE15
  , ATTRIBUTE2
  , ATTRIBUTE3
  , ATTRIBUTE4
  , ATTRIBUTE5
  , ATTRIBUTE6
  , ATTRIBUTE7
  , ATTRIBUTE8
  , ATTRIBUTE9
  , CONTEXT
  , CREATED_BY
  , CREATION_DATE
  , DW_UPDATE_ADVICE_FLAG
  , HEADER_ID
  , LAST_UPDATED_BY
  , LAST_UPDATE_DATE
  , LAST_UPDATE_LOGIN
  , LINE_ID
  , PERCENT
  , SALESREP_ID
  , sales_credit_type_id
  , SALES_CREDIT_ID
  , WH_UPDATE_DATE
  , LOCK_CONTROL
    FROM    OE_SALES_CREDIT_HISTORY
    WHERE HEADER_ID = p_header_id
      AND LINE_ID IS NOT NULL
      AND VERSION_NUMBER = l_version_number
    AND    (PHASE_CHANGE_FLAG = p_phase_change_flag
     OR     (nvl(p_phase_change_flag, 'NULL') <> 'Y'
     AND     VERSION_FLAG = 'Y'));

  l_rec l_line_scredit_csr_s%ROWTYPE;
  l_entity NUMBER;
  l_count  NUMBER;

--
l_debug_level CONSTANT NUMBER := oe_debug_pub.g_debug_level;
--
BEGIN
   IF p_version_number IS NOT NULL AND NOT G_INTERNAL_QUERY THEN
    l_current_version_number := Get_Version_Number(p_header_id => p_header_id, p_line_id => p_line_id, p_sales_credit_id => p_sales_credit_id);

    IF l_version_number >= l_current_version_number THEN
      l_version_number := NULL;
    END IF;
   END IF;

   IF l_version_number IS NULL THEN
       OE_Line_Scredit_Util.Query_Rows(p_sales_credit_id => p_sales_credit_id, p_line_id => p_line_id, p_header_id => p_header_id, x_line_scredit_tbl => x_line_scredit_tbl);
   ELSE

    IF
    (p_sales_credit_id IS NOT NULL
     AND
     p_sales_credit_id <> FND_API.G_MISS_NUM)
    AND
    (p_line_id IS NOT NULL
     AND
     p_line_id <> FND_API.G_MISS_NUM)
    THEN

        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;

    END IF;


    IF nvl(p_sales_credit_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 1;
           OPEN l_line_scredit_csr_s;
    ELSIF nvl(p_line_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 2;
           OPEN l_line_scredit_csr_l;
    ELSIF nvl(p_header_id,FND_API.G_MISS_NUM) <> FND_API.G_MISS_NUM THEN
	   l_entity := 3;
           OPEN l_line_scredit_csr_h;
    END IF;

    --  Loop over fetched records
    l_count := 1;

    LOOP
        IF l_entity = 1 THEN
             FETCH l_line_scredit_csr_s INTO l_rec;
             EXIT WHEN l_line_scredit_csr_s%NOTFOUND;
        ELSIF l_entity = 2 THEN
             FETCH l_line_scredit_csr_l INTO l_rec;
             EXIT WHEN l_line_scredit_csr_l%NOTFOUND;
        ELSIF l_entity = 3 THEN
             FETCH l_line_scredit_csr_h INTO l_rec;
             EXIT WHEN l_line_scredit_csr_h%NOTFOUND;
        ELSE
          EXIT;
        END IF;

      x_line_scredit_tbl(l_count).attribute1  := l_rec.ATTRIBUTE1;
      x_line_scredit_tbl(l_count).attribute10 := l_rec.ATTRIBUTE10;
      x_line_scredit_tbl(l_count).attribute11 := l_rec.ATTRIBUTE11;
      x_line_scredit_tbl(l_count).attribute12 := l_rec.ATTRIBUTE12;
      x_line_scredit_tbl(l_count).attribute13 := l_rec.ATTRIBUTE13;
      x_line_scredit_tbl(l_count).attribute14 := l_rec.ATTRIBUTE14;
      x_line_scredit_tbl(l_count).attribute15 := l_rec.ATTRIBUTE15;
      x_line_scredit_tbl(l_count).attribute2  := l_rec.ATTRIBUTE2;
      x_line_scredit_tbl(l_count).attribute3  := l_rec.ATTRIBUTE3;
      x_line_scredit_tbl(l_count).attribute4  := l_rec.ATTRIBUTE4;
      x_line_scredit_tbl(l_count).attribute5  := l_rec.ATTRIBUTE5;
      x_line_scredit_tbl(l_count).attribute6  := l_rec.ATTRIBUTE6;
      x_line_scredit_tbl(l_count).attribute7  := l_rec.ATTRIBUTE7;
      x_line_scredit_tbl(l_count).attribute8  := l_rec.ATTRIBUTE8;
      x_line_scredit_tbl(l_count).attribute9  := l_rec.ATTRIBUTE9;
      x_line_scredit_tbl(l_count).context     := l_rec.CONTEXT;
      x_line_scredit_tbl(l_count).created_by  := l_rec.CREATED_BY;
      x_line_scredit_tbl(l_count).creation_date := l_rec.CREATION_DATE;
      x_line_scredit_tbl(l_count).dw_update_advice_flag := l_rec.DW_UPDATE_ADVICE_FLAG;
      x_line_scredit_tbl(l_count).header_id   := l_rec.HEADER_ID;
      x_line_scredit_tbl(l_count).last_updated_by := l_rec.LAST_UPDATED_BY;
      x_line_scredit_tbl(l_count).last_update_date := l_rec.LAST_UPDATE_DATE;
      x_line_scredit_tbl(l_count).last_update_login := l_rec.LAST_UPDATE_LOGIN;
      x_line_scredit_tbl(l_count).line_id     := l_rec.LINE_ID;
      x_line_scredit_tbl(l_count).percent     := l_rec.PERCENT;
      x_line_scredit_tbl(l_count).salesrep_id := l_rec.SALESREP_ID;
      x_line_scredit_tbl(l_count).sales_credit_type_id := l_rec.sales_credit_type_id;
      x_line_scredit_tbl(l_count).sales_credit_id := l_rec.SALES_CREDIT_ID;
      x_line_scredit_tbl(l_count).wh_update_date := l_rec.WH_UPDATE_DATE;
      x_line_scredit_tbl(l_count).lock_control := l_rec.LOCK_CONTROL;

	l_count := l_count + 1;

    END LOOP;

    IF l_entity = 1 THEN
        CLOSE l_line_scredit_csr_s;
    ELSIF l_entity = 2 THEN
        CLOSE l_line_scredit_csr_l;
    ELSIF l_entity = 3 THEN
        CLOSE l_line_scredit_csr_h;
    END IF;

    --  PK sent and no rows found

    IF
    (p_sales_credit_id IS NOT NULL
     AND
     p_sales_credit_id <> FND_API.G_MISS_NUM)
    AND
    (x_Line_Scredit_tbl.COUNT = 0)
    THEN
        RAISE NO_DATA_FOUND;
    END IF;


    --  Return fetched table

    IF l_debug_level  > 0 THEN
        oe_debug_pub.add(  'EXITING OE_LINE_SCREDIT_UTIL.QUERY_ROWS' , 1 ) ;
    END IF;


   END IF;

EXCEPTION
   WHEN OTHERS THEN
    IF OE_MSG_PUB.Check_Msg_Level(OE_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
        OE_MSG_PUB.Add_Exc_Msg
        (   G_PKG_NAME
      , 'Line Scredit Query_Row'
        );
    END IF;
END;


END OE_VERSION_HISTORY_UTIL;

/
