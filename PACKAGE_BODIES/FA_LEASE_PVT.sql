--------------------------------------------------------
--  DDL for Package Body FA_LEASE_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."FA_LEASE_PVT" AS
/* $Header: FAVLEAB.pls 120.3.12010000.2 2009/07/19 11:24:41 glchen ship $ */

-----------------------------------------------
-- CHECK FOR LESSOR_ID
-----------------------------------------------
FUNCTION CHECK_LESSOR_ID  (
	P_VENDOR_ID 			IN     PO_VENDORS.VENDOR_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
	) RETURN BOOLEAN AS

	   CURSOR C_VENDOR_ID IS
	   SELECT VENDOR_ID
	   FROM PO_VENDORS
	   WHERE VENDOR_ID= P_VENDOR_ID;

	   L_VENDOR_ID NUMBER:=NULL;

BEGIN

	FOR C_VENDOR_ID_REC IN C_VENDOR_ID
	LOOP
	 L_VENDOR_ID := C_VENDOR_ID_REC.VENDOR_ID;
	END LOOP;

	IF L_VENDOR_ID IS NULL THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LESSOR_ID');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LESSOR_ID');
	    FND_MSG_PUB.ADD;
	    RETURN (FALSE);
	ELSE
	    RETURN (TRUE);
	END IF;

EXCEPTION
 WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LESSOR_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LESSOR_ID ;

---------------------------------------------------------
-- CHECK FOR LESSOR_NAME
---------------------------------------------------------
FUNCTION CHECK_LESSOR_NAME  (
	  P_VENDOR_NAME			IN     PO_VENDORS.VENDOR_NAME%TYPE,
	  X_VENDOR_ID			OUT NOCOPY PO_VENDORS.VENDOR_ID%TYPE,
p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	   CURSOR C_VENDOR_NAME IS
	   SELECT VENDOR_ID
	   FROM PO_VENDORS
	   WHERE VENDOR_NAME= P_VENDOR_NAME;

	   L_VENDOR_ID NUMBER:=NULL;

BEGIN

	FOR C_VENDOR_NAME_REC IN C_VENDOR_NAME
	LOOP
	 L_VENDOR_ID := C_VENDOR_NAME_REC.VENDOR_ID;
	END LOOP;

	IF L_VENDOR_ID IS NULL THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LESSOR_ID');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LESSOR_NAME');
	    FND_MSG_PUB.ADD;
    	    RETURN (FALSE);
	ELSE
	    X_VENDOR_ID:=L_VENDOR_ID;
	    RETURN (TRUE);
	END IF;

EXCEPTION
 WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LESSOR_NAME', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LESSOR_NAME ;

---------------------------------------
-- CHECK FOR PAYMENT SCHEDULE ID
---------------------------------------
FUNCTION CHECK_PAYMENT_SCHEDULE_ID (
   P_PAYMENT_SCHEDULE_ID 	IN FA_LEASE_SCHEDULES.PAYMENT_SCHEDULE_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null

) RETURN BOOLEAN AS

	CURSOR C_PAYMENT_SCHEDULE_ID IS
	SELECT PAYMENT_SCHEDULE_ID
	FROM FA_LEASE_SCHEDULES
	WHERE PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID;

	L_PAYMENT_SCHEDULE_ID FA_LEASE_PAYMENTS.PAYMENT_SCHEDULE_ID%TYPE:=NULL;

BEGIN

	FOR C_PAYMENT_SCHEDULE_ID_REC IN C_PAYMENT_SCHEDULE_ID
	LOOP
	 L_PAYMENT_SCHEDULE_ID := C_PAYMENT_SCHEDULE_ID_REC.PAYMENT_SCHEDULE_ID ;
	END LOOP;

	IF L_PAYMENT_SCHEDULE_ID IS NULL THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_SCHEDULE_NOT_FOUND');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_PAYMENT_SCHEDULE_ID');
	    FND_MSG_PUB.ADD;
	    RETURN (FALSE);
	ELSE
	   RETURN (TRUE);
	END IF;

EXCEPTION
 WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_PAYMENT_SCHEDULE_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_PAYMENT_SCHEDULE_ID;

----------------------------------------
-- CHECK FOR PAYMENT SCHEDULE NAME
----------------------------------------
FUNCTION CHECK_PAYMENT_SCHEDULE_NAME (
 P_PAYMENT_SCHEDULE_NAME		IN     FA_LEASE_SCHEDULES.PAYMENT_SCHEDULE_NAME%TYPE,
 X_PAYMENT_SCHEDULE_ID			OUT NOCOPY FA_LEASE_SCHEDULES.PAYMENT_SCHEDULE_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	   CURSOR C_PAYMENT_SCHEDULE_NAME IS
	   SELECT PAYMENT_SCHEDULE_ID
	   FROM FA_LEASE_SCHEDULES
	   WHERE PAYMENT_SCHEDULE_NAME = P_PAYMENT_SCHEDULE_NAME;

	   L_PAYMENT_SCHEDULE_ID NUMBER:=NULL;

BEGIN

	FOR C_PAYMENT_SCHEDULE_NAME_REC IN C_PAYMENT_SCHEDULE_NAME
	LOOP
	 L_PAYMENT_SCHEDULE_ID := C_PAYMENT_SCHEDULE_NAME_REC.PAYMENT_SCHEDULE_ID ;
	END LOOP;

	IF L_PAYMENT_SCHEDULE_ID IS NULL THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_SCHEDULE_NOT_FOUND');
 	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_PAYMENT_SCHEDULE_NAME');
	    FND_MSG_PUB.ADD;
	    RETURN (FALSE);
	ELSE
	   X_PAYMENT_SCHEDULE_ID :=L_PAYMENT_SCHEDULE_ID ;
	   RETURN (TRUE);
	END IF;

EXCEPTION
 WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_PAYMENT_SCHEDULE_NAME', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_PAYMENT_SCHEDULE_NAME;

--------------------------------
-- CHECK FOR CHECK TERMS
--------------------------------
FUNCTION CHECK_TERMS_ID (
 P_TERMS_ID 		IN 	 AP_TERMS.TERM_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	  CURSOR C_CHECK_TERMS_ID IS
	  SELECT TERM_ID FROM
	  AP_TERMS_BAT_PAY_TERMS_V
	  WHERE TERM_ID = P_TERMS_ID;

	  L_TERMS_ID NUMBER:=NULL;

BEGIN

	FOR C_CHECK_TERMS_ID_REC IN C_CHECK_TERMS_ID
	LOOP
	 L_TERMS_ID := C_CHECK_TERMS_ID_REC.TERM_ID ;
	END LOOP;

	IF L_TERMS_ID IS NULL THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PAYMENT_TERM');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_TERMS_ID');
	    FND_MSG_PUB.ADD;
	    RETURN(FALSE);
	ELSE
	   RETURN(TRUE);
	END IF;

EXCEPTION
 WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_TERMS_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_TERMS_ID ;

---------------------------------------
-- CHECK FOR CHECK PAYMENT TERMS
---------------------------------------
FUNCTION CHECK_PAYMENT_TERMS(
P_PAYMENT_TERMS		IN     AP_TERMS.NAME%TYPE,
X_TERMS_ID 		OUT NOCOPY AP_TERMS.TERM_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	  CURSOR C_CHECK_PAYMENT_TERMS IS
	  SELECT TERM_ID FROM
	  AP_TERMS_BAT_PAY_TERMS_V
	  WHERE TERMS = P_PAYMENT_TERMS;

	  L_TERMS_ID NUMBER:=NULL;

BEGIN

	FOR C_CHECK_PAYMENT_TERMS_REC IN C_CHECK_PAYMENT_TERMS
	LOOP
	 L_TERMS_ID := C_CHECK_PAYMENT_TERMS_REC.TERM_ID ;
	END LOOP;

	IF L_TERMS_ID IS NULL THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PAYMENT_TERM');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_PAYMENT_TERMS');
	    FND_MSG_PUB.ADD;
	    RETURN (FALSE);
	ELSE
	   X_TERMS_ID := L_TERMS_ID ;
	   RETURN (TRUE);
	END IF;

EXCEPTION
 WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_PAYMENT_TERMS', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_PAYMENT_TERMS;

-------------------------------------------
-- CHECK FOR CHECK LESSOR SITE
-------------------------------------------
FUNCTION CHECK_LESSOR_SITE_ID (
 P_VENDOR_SITE_ID		IN 	 PO_VENDOR_SITES_ALL.VENDOR_SITE_ID%TYPE,
 P_VENDOR_ID      		IN	 PO_VENDOR_SITES_ALL.VENDOR_ID%TYPE,
 X_CHART_OF_ACCOUNTS_ID 	OUT NOCOPY GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE,
 X_LESSOR_SITE_ORG_ID		OUT NOCOPY  NUMBER
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	CURSOR C_LESSOR_SITE_ID IS
      	SELECT
	PVS.VENDOR_SITE_ID
	,SOB.CHART_OF_ACCOUNTS_ID COA_ID
        ,PVS.ORG_ID LESSOR_SITE_ORG_ID
	FROM GL_SETS_OF_BOOKS SOB
	,HR_ALL_ORGANIZATION_UNITS HAO
	,PO_VENDOR_SITES_ALL PVS
	,AP_SYSTEM_PARAMETERS_ALL AP
	WHERE PVS.VENDOR_ID = P_VENDOR_ID
        AND PVS.VENDOR_SITE_ID = P_VENDOR_SITE_ID
	AND PVS.ORG_ID IS NOT NULL
	AND AP.ORG_ID = PVS.ORG_ID
	AND SOB.SET_OF_BOOKS_ID = AP.SET_OF_BOOKS_ID
	AND HAO.ORGANIZATION_ID = PVS.ORG_ID
	UNION
	SELECT PVS.VENDOR_SITE_ID
	,SOB.CHART_OF_ACCOUNTS_ID COA_ID
        ,PVS.ORG_ID LESSOR_SITE_ORG_ID
	FROM GL_SETS_OF_BOOKS SOB
	,AP_SYSTEM_PARAMETERS_ALL AP
	,PO_VENDOR_SITES_ALL PVS
	WHERE PVS.VENDOR_ID = P_VENDOR_ID
  	AND PVS.VENDOR_SITE_ID = P_VENDOR_SITE_ID
	AND PVS.ORG_ID IS NULL
	AND AP.ORG_ID IS NULL
	AND SOB.SET_OF_BOOKS_ID = AP.SET_OF_BOOKS_ID;

	L_VENDOR_SITE_ID NUMBER:=NULL;
	L_CHART_OF_ACCOUNTS_ID   NUMBER:=NULL;
	L_LESSOR_SITE_ORG_ID NUMBER:=NULL;

BEGIN

	FOR C_LESSOR_SITE_ID_REC IN C_LESSOR_SITE_ID
	LOOP
	 L_VENDOR_SITE_ID := C_LESSOR_SITE_ID_REC.VENDOR_SITE_ID;
	 L_CHART_OF_ACCOUNTS_ID   := C_LESSOR_SITE_ID_REC.COA_ID;
	 L_LESSOR_SITE_ORG_ID := C_LESSOR_SITE_ID_REC.LESSOR_SITE_ORG_ID;
	END LOOP;

	IF L_VENDOR_SITE_ID IS NULL OR L_CHART_OF_ACCOUNTS_ID IS NULL THEN
	   FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PO_VENDOR_SITE');
	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LESSOR_SITE_ID');
	   FND_MSG_PUB.ADD;
	   RETURN (FALSE);
	ELSE
 	  X_CHART_OF_ACCOUNTS_ID:=L_CHART_OF_ACCOUNTS_ID;
	   X_LESSOR_SITE_ORG_ID :=L_LESSOR_SITE_ORG_ID ;
	   RETURN (TRUE);
	END IF;

EXCEPTION
     WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('cHECK_LESSOR_SITE_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LESSOR_SITE_ID ;

------------------------------------------
-- CHECK FOR CHECK LESSOR SITE CODE
------------------------------------------
FUNCTION CHECK_LESSOR_SITE_CODE (
 P_VENDOR_SITE_CODE		IN 	 PO_VENDOR_SITES_ALL.VENDOR_SITE_CODE%TYPE,
 P_VENDOR_ID      		IN	 PO_VENDOR_SITES_ALL.VENDOR_ID%TYPE,
 P_VENDOR_SITE_ORG_ID		IN     	PO_VENDOR_SITES_ALL.ORG_ID%TYPE,
 X_VENDOR_SITE_ID		OUT NOCOPY PO_VENDOR_SITES_ALL.VENDOR_SITE_ID%TYPE,
 X_CHART_OF_ACCOUNTS_ID 	OUT NOCOPY GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
 ) RETURN BOOLEAN AS

	CURSOR C_LESSOR_SITE_CODE IS
      	SELECT
	PVS.VENDOR_SITE_ID
	,SOB.CHART_OF_ACCOUNTS_ID COA_ID
	FROM GL_SETS_OF_BOOKS SOB
	,HR_ALL_ORGANIZATION_UNITS HAO
	,PO_VENDOR_SITES_ALL PVS
	,AP_SYSTEM_PARAMETERS_ALL AP
	WHERE PVS.VENDOR_ID = P_VENDOR_ID
      	AND PVS.VENDOR_SITE_CODE = P_VENDOR_SITE_CODE
	AND PVS.ORG_ID IS NOT NULL
	AND AP.ORG_ID = PVS.ORG_ID
	AND SOB.SET_OF_BOOKS_ID = AP.SET_OF_BOOKS_ID
	AND HAO.ORGANIZATION_ID = PVS.ORG_ID
      	AND PVS.ORG_ID = P_VENDOR_SITE_ORG_ID
	UNION
	SELECT PVS.VENDOR_SITE_ID
	,SOB.CHART_OF_ACCOUNTS_ID COA_ID
	FROM GL_SETS_OF_BOOKS SOB
	,AP_SYSTEM_PARAMETERS_ALL AP
	,PO_VENDOR_SITES_ALL PVS
	WHERE PVS.VENDOR_ID = P_VENDOR_ID
  	AND PVS.VENDOR_SITE_CODE = P_VENDOR_SITE_CODE
	AND PVS.ORG_ID IS NULL
	AND AP.ORG_ID IS NULL
	AND SOB.SET_OF_BOOKS_ID = AP.SET_OF_BOOKS_ID;

	L_VENDOR_SITE_ID NUMBER:=NULL;
	L_CHART_OF_ACCOUNTS_ID   NUMBER:=NULL;

BEGIN

	FOR C_LESSOR_SITE_CODE_REC IN C_LESSOR_SITE_CODE
	LOOP
	 L_VENDOR_SITE_ID := C_LESSOR_SITE_CODE_REC.VENDOR_SITE_ID;
	 L_CHART_OF_ACCOUNTS_ID   := C_LESSOR_SITE_CODE_REC.COA_ID;
END LOOP;

	IF L_VENDOR_SITE_ID IS NULL OR L_CHART_OF_ACCOUNTS_ID IS NULL THEN
	   FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PO_VENDOR_SITE');
	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LESSOR_SITE_CODE');
	   FND_MSG_PUB.ADD;
	   RETURN (FALSE);
	ELSE
	   X_CHART_OF_ACCOUNTS_ID:=L_CHART_OF_ACCOUNTS_ID;
	   X_VENDOR_SITE_ID:=L_VENDOR_SITE_ID;
	   RETURN (TRUE);
	END IF;

EXCEPTION
     WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LESSOR_SITE_CODE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LESSOR_SITE_CODE ;

----------------------------------------------
-- CHECK FOR CHECK DISTRIBUTION CODE ID
----------------------------------------------

FUNCTION CHECK_DIST_CODE_COMBINATION_ID(
	 P_DIST_CODE_COMBINATION_ID 		IN GL_CODE_COMBINATIONS.CODE_COMBINATION_ID%TYPE,
	 P_COA_ID 			    	IN GL_CODE_COMBINATIONS.CHART_OF_ACCOUNTS_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
)  RETURN BOOLEAN AS

	CURSOR C_CODE_COMBINATION_ID IS
      	SELECT
	CODE_COMBINATION_ID
	FROM GL_CODE_COMBINATIONS_V
	WHERE CODE_COMBINATION_ID = P_DIST_CODE_COMBINATION_ID
      	AND CHART_OF_ACCOUNTS_ID = P_COA_ID
      	AND ENABLED_FLAG = 'Y';

	L_CODE_COMBINATION_ID NUMBER:=NULL;

BEGIN
	FOR C_CODE_COMBINATION_ID_REC IN C_CODE_COMBINATION_ID
	LOOP
	 L_CODE_COMBINATION_ID := C_CODE_COMBINATION_ID_REC.CODE_COMBINATION_ID;
	END LOOP;

	IF L_CODE_COMBINATION_ID IS NULL THEN
	   FND_MESSAGE.SET_NAME ('OFA','FA_INV_CODE_COMBINATION');
	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_DIST_CODE_COMBINATION_ID');
	   FND_MSG_PUB.ADD;
	   RETURN (FALSE);
	ELSE
	   RETURN (TRUE);
	END IF;
EXCEPTION
 	WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_DIST_CODE_COMBINATION_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_DIST_CODE_COMBINATION_ID;

-------------------------------------------------------
-- CHECK FOR CHECK DISTRIBUTION CODE COMBINATION
-------------------------------------------------------
FUNCTION CHECK_CODE_COMBINATION
(P_CON_CODE_COMBINATION IN VARCHAR2,
 P_COA_ID IN GL_CODE_COMBINATIONS.CHART_OF_ACCOUNTS_ID%TYPE,
 X_CODE_COMBINATION_ID OUT NOCOPY GL_CODE_COMBINATIONS.CODE_COMBINATION_ID%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
)  RETURN BOOLEAN AS

	L_CODE_COMBINATION_ID  NUMBER:=NULL;

BEGIN

	L_CODE_COMBINATION_ID  := FND_FLEX_EXT.GET_CCID ('SQLGL', 'GL#',P_COA_ID,SYSDATE,P_CON_CODE_COMBINATION);

	IF L_CODE_COMBINATION_ID = 0 THEN
	   FND_MESSAGE.SET_NAME ('OFA','FA_INV_CODE_COMBINATION');
	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_CODE_COMBINATION');
	   FND_MSG_PUB.ADD;
	   RETURN (FALSE);
	ELSE
	   X_CODE_COMBINATION_ID :=L_CODE_COMBINATION_ID;
	   RETURN (TRUE);
	END IF;
EXCEPTION
     WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_CODE_COMBINATION', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_CODE_COMBINATION;

---------------------------------------------------
-- CHECK FOR CHECK LEASE LESSOR COMBINATION
---------------------------------------------------
FUNCTION CHECK_LEASE_LESSOR_COMBINATION (
P_LESSOR_ID 	IN NUMBER,
P_LEASE_NUMBER 	IN VARCHAR2
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)  RETURN BOOLEAN AS

	 CURSOR C_LEASE_LESSOR IS
	      SELECT  LEASE_ID
	      FROM    FA_LEASES
	      WHERE   LEASE_NUMBER = P_LEASE_NUMBER
	      AND     LESSOR_ID = P_LESSOR_ID;

	L_LEASE_ID NUMBER:=NULL;
	DUP_FOUND EXCEPTION;

BEGIN

	OPEN C_LEASE_LESSOR ;
	    FETCH C_LEASE_LESSOR
	    INTO L_LEASE_ID;
	    IF C_LEASE_LESSOR%FOUND THEN
	         RAISE DUP_FOUND;
	    END IF;
	    CLOSE C_LEASE_LESSOR;

	RETURN (TRUE);

EXCEPTION
    WHEN DUP_FOUND THEN
      CLOSE C_LEASE_LESSOR;
      FND_MESSAGE.SET_NAME ('OFA','FA_DUPLICATE_LEASE');
      FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LEASE_LESSOR_COMBINATION');
      FND_MSG_PUB.ADD;
      RETURN (FALSE);
     WHEN OTHERS THEN
	CLOSE C_LEASE_LESSOR;
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LEASE_LESSOR_COMBINATION', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LEASE_LESSOR_COMBINATION ;

----------------------------------------
-- CHECK FOR CHECK CURRENCY CODE
----------------------------------------
FUNCTION CHECK_CURRENCY_CODE (
P_CURRENCY_CODE VARCHAR2,
P_PAYMENT_SCHEDULE_ID NUMBER
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)  RETURN BOOLEAN AS

	CURSOR C_CURRENCY_CODE IS
       	SELECT CURRENCY_CODE
       	FROM FA_LEASE_SCHEDULES
       	WHERE PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID;

	L_CURRENCY_CODE VARCHAR2(5):=NULL;

BEGIN

	OPEN C_CURRENCY_CODE ;
	FETCH C_CURRENCY_CODE  INTO L_CURRENCY_CODE;

	IF (C_CURRENCY_CODE %NOTFOUND) THEN
	    CLOSE C_CURRENCY_CODE;
	    FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_SCHEDULE_NOT_FOUND');
      	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_CURRENCY_CODE');
	    FND_MSG_PUB.ADD;
	    RETURN (FALSE);
	END IF;

	CLOSE C_CURRENCY_CODE ;

	IF P_CURRENCY_CODE <> L_CURRENCY_CODE THEN
	    FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_CURRENCY_NOT_MATCH');
      	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_CURRENCY_CODE');
	    FND_MSG_PUB.ADD;
	    RETURN (FALSE);
	ELSE
	    RETURN (TRUE);
	END IF;

EXCEPTION
     WHEN OTHERS THEN
      FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_CURRENCY_CODE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_CURRENCY_CODE ;

-----------------------------------
-- CHECK FOR CHECK LEASE TYPE
-----------------------------------
FUNCTION CHECK_LEASE_TYPE(
P_LEASE_TYPE VARCHAR2
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	CURSOR C_LEASE_TYPE IS
	SELECT LOOKUP_CODE
	FROM FA_LOOKUPS WHERE
	LOOKUP_TYPE='LEASE TYPES'
	AND LOOKUP_CODE = UPPER(P_LEASE_TYPE)
	AND ENABLED_FLAG = 'Y'
	AND SYSDATE BETWEEN NVL(START_DATE_ACTIVE,SYSDATE) AND NVL(END_DATE_ACTIVE,SYSDATE);

	L_LEASE_TYPE VARCHAR2(15):=NULL;

BEGIN

	FOR C_LEASE_TYPE_REC IN C_LEASE_TYPE
	LOOP
	 L_LEASE_TYPE := C_LEASE_TYPE_REC.LOOKUP_CODE;
	END LOOP;

	IF L_LEASE_TYPE IS NULL THEN
	   FND_MESSAGE.SET_NAME ('OFA','FA_INV_LEASE_TYPE');
      	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LEASE_TYPE');
	   FND_MSG_PUB.ADD;
	   RETURN (FALSE);
	ELSE
	   RETURN (TRUE);
	END IF;

EXCEPTION
     WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LEASE_TYPE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LEASE_TYPE;

-------------------------------------
-- VALIDATE LESSOR
-------------------------------------
FUNCTION VALIDATE_LESSOR
(P_VENDOR_ID IN NUMBER,
 P_VENDOR_NAME IN VARCHAR2,
 X_VENDOR_ID OUT NOCOPY NUMBER
 , p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	   CURSOR C_VENDOR_NAME IS
	   SELECT VENDOR_ID
	   FROM PO_VENDORS
	   WHERE VENDOR_NAME= P_VENDOR_NAME ;

	   CURSOR C_VENDOR_ID IS
	   SELECT VENDOR_ID
	   FROM PO_VENDORS
	   WHERE VENDOR_ID= P_VENDOR_ID ;

	   L_VENDOR_ID NUMBER:=NULL;

BEGIN

	IF P_VENDOR_ID IS NOT NULL THEN
	  FOR C_VENDOR_ID_REC IN C_VENDOR_ID
	  LOOP
	   L_VENDOR_ID := C_VENDOR_ID_REC.VENDOR_ID;
	  END LOOP;
	ELSIF P_VENDOR_NAME IS NOT NULL THEN
	 FOR C_VENDOR_NAME_REC IN C_VENDOR_NAME
	 LOOP
	  L_VENDOR_ID := C_VENDOR_NAME_REC.VENDOR_ID;
	 END LOOP;
	ELSE
	   FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PO_VENDOR_NAME');
	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_LESSOR');
	   FND_MSG_PUB.ADD;
   	   RETURN (FALSE);
	END IF;

	IF L_VENDOR_ID IS NOT NULL THEN
	  X_VENDOR_ID:=L_VENDOR_ID;
	  RETURN (TRUE);
	ELSE
	 FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PO_VENDOR_NAME');
	 FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_LESSOR');
	 FND_MSG_PUB.ADD;
	 RETURN (FALSE);
	END IF;

EXCEPTION
     WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('VALIDATE_LESSOR', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END VALIDATE_LESSOR;

------------------------------------
-- GET LEASE ID
------------------------------------
FUNCTION GET_LEASE_ID
(P_LESSOR_ID IN NUMBER,
 P_LEASE_NUMBER IN VARCHAR2,
 X_LEASE_ID OUT NOCOPY NUMBER
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	CURSOR C_LEASE_LESSOR IS
      	SELECT  LEASE_ID
      	FROM    FA_LEASES
      	WHERE   LEASE_NUMBER = P_LEASE_NUMBER
	AND     LESSOR_ID = P_LESSOR_ID;

	L_LEASE_ID NUMBER:=NULL;
	COMB_NOT_FOUND EXCEPTION;

BEGIN

	OPEN C_LEASE_LESSOR ;
	    FETCH C_LEASE_LESSOR
	    INTO L_LEASE_ID;
	    IF C_LEASE_LESSOR%NOTFOUND THEN
        	 RAISE COMB_NOT_FOUND;
	    END IF;
	    CLOSE C_LEASE_LESSOR;

	X_LEASE_ID:=L_LEASE_ID;
	RETURN (TRUE);

EXCEPTION
    WHEN COMB_NOT_FOUND THEN
      CLOSE C_LEASE_LESSOR;
      FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_INCORRECT_LEASE_ID');
      FND_MESSAGE.SET_TOKEN ('CALLING_FN','GET_LEASE_ID');
      FND_MSG_PUB.ADD;
      RETURN (FALSE);
    WHEN OTHERS THEN
	CLOSE C_LEASE_LESSOR;
       FA_SRVR_MSG.ADD_SQL_ERROR('GET_LEASE_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END GET_LEASE_ID;

------------------------------
-- VALIDATE LEASE
------------------------------
FUNCTION VALIDATE_LEASE_ID
(P_LEASE_ID IN NUMBER
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	L_LEASE_ID NUMBER:=NULL;

BEGIN

	SELECT LEASE_ID INTO L_LEASE_ID
	FROM FA_LEASES
	WHERE LEASE_ID = P_LEASE_ID;

	RETURN (TRUE);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
      FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_INCORRECT_LEASE_ID');
      FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_LEASE_ID');
      FND_MSG_PUB.ADD;
      RETURN (FALSE);
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('VALIDATE_LEASE_ID', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END VALIDATE_LEASE_ID;

-----------------------------------
-- CHECK LEASE UPDATE
-----------------------------------
FUNCTION CHECK_LEASE_UPDATE
(P_LEASE_ID IN NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
RETURN VARCHAR2 AS

	L_COUNT NUMBER:=0;

BEGIN

	SELECT COUNT(*) INTO L_COUNT
	FROM FA_ADDITIONS_B
	WHERE LEASE_ID = P_LEASE_ID;

	IF L_COUNT > 0 THEN
	  RETURN ('N');
	ELSE
	  RETURN('Y');
	END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
      FND_MESSAGE.SET_NAME ('OFA','FA_DUPLICATE_LEASE');
      FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LEASE_UPDATE');
      FND_MSG_PUB.ADD;
      RETURN ('N');
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LEASE_UPDATE', p_log_level_rec => p_log_level_rec);
       RETURN ('N');
END CHECK_LEASE_UPDATE;

-----------------------------------------
-- CHECK VALIDATE LEASE LESSOR
-----------------------------------------
FUNCTION VALIDATE_LEASE_LESSOR
(P_LEASE_ID 		IN NUMBER
,P_LESSOR_ID 		IN NUMBER
,P_LESSOR_SITE_ID 	IN NUMBER
,P_LESSOR_SITE_ORG_ID 	IN NUMBER
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	L_LEASE_NUMBER VARCHAR2(15):=NULL;
	L_LESSOR_ID NUMBER:=NULL;
	L_LESSOR_SITE_ID NUMBER:=NULL;
	L_LESSOR_SITE_ORG_ID NUMBER:=NULL;

BEGIN

	   SELECT
	    LEASE_NUMBER,
	    LESSOR_ID,
	    LESSOR_SITE_ID,
	    B.ORG_ID LESSOR_SITE_ORG_ID
	   INTO
	    L_LEASE_NUMBER,
	    L_LESSOR_ID,
	    L_LESSOR_SITE_ID,
	    L_LESSOR_SITE_ORG_ID
	   FROM FA_LEASES A,
	   PO_VENDOR_SITES_ALL B
	   WHERE A.LEASE_ID = P_LEASE_ID
	   AND A.LESSOR_SITE_ID = B.VENDOR_SITE_ID;

	IF P_LESSOR_SITE_ORG_ID = L_LESSOR_SITE_ORG_ID THEN
	 IF L_LESSOR_ID = P_LESSOR_ID  AND
	   L_LESSOR_SITE_ID =P_LESSOR_SITE_ID THEN
	   RETURN(FALSE);
	 ELSIF CHECK_LEASE_LESSOR_COMBINATION
                  (P_LESSOR_ID,L_LEASE_NUMBER,p_log_level_rec) THEN
	    RETURN(TRUE);
	 ELSE
	    RETURN(FALSE);
	 END IF;
	ELSE
	   RETURN(FALSE);
	END IF;

EXCEPTION
    WHEN OTHERS THEN
     RETURN (FALSE);
END VALIDATE_LEASE_LESSOR;

--------------------------------------
-- VALIDATE CREATE LEASE PARAMETERS
--------------------------------------
FUNCTION VALIDATION_CREATE_LEASE  (
   PX_LEASE_DETAILS_REC	      IN OUT  NOCOPY FA_API_TYPES.LEASE_DETAILS_REC_TYPE
 , p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

   	   VALUE_ERROR_EXCEPTION  	      	EXCEPTION;
	   L_LESSOR_ID 			NUMBER:=NULL;
	   L_PAYMENT_SCHEDULE_ID 	NUMBER:=NULL;
	   L_TERMS_ID 			NUMBER:=NULL;
	   L_LESSOR_SITE_ID 		NUMBER:=NULL;
	   L_COA_ID 			NUMBER:=NULL;
	   L_DIST_CODE_COMBINATION_ID NUMBER:=NULL;
	   L_LEASE_NUMBER 		VARCHAR2(15):=NULL;
	   L_FAIR_VALUE 		NUMBER:=NULL;
	   L_CURRENCY_CODE              VARCHAR2(5):=NULL;
	   L_DESCRIPTION		VARCHAR2(30):=NULL;
	   L_BARGAIN_PURCHASE_OPTION    VARCHAR2(1):=NULL;
	   L_TRANSFER_OWNERSHIP 	VARCHAR2(1):=NULL;
	   L_ASSET_LIFE			NUMBER:=NULL;
	   L_LEASE_TERM			NUMBER:=NULL;
	   L_LEASE_TYPE 		VARCHAR2(15):=NULL;
	   L_ROWID			VARCHAR2(100):=NULL;
	   L_LEASE_ID			NUMBER:=NULL;
	   L_PRESENT_VALUE 		NUMBER:=NULL;
	   L_ECONOMIC_TEST 		VARCHAR2(1):=NULL;
	   L_PRESENT_TEST 		VARCHAR2(1):=NULL;
	   L_FASB_LEASE_TYPE 		VARCHAR2(15):=NULL;
	   L_COST_CAPITALIZED		NUMBER:=NULL;
	   L_LESSOR_SITE_ORG_ID		NUMBER:=NULL;

	   CURSOR C_PRESENT_VALUE IS
	   SELECT PRESENT_VALUE
	   FROM FA_LEASE_SCHEDULES
	   WHERE PAYMENT_SCHEDULE_ID= L_PAYMENT_SCHEDULE_ID;

	   PRESENT_VALUE_NOT_FOUND EXCEPTION;

BEGIN

	---------------------------------------
	-- CHECK FOR LESSOR INFORMATION
	---------------------------------------
	 IF PX_LEASE_DETAILS_REC.LESSOR_ID IS NULL THEN
	    IF 	PX_LEASE_DETAILS_REC.LESSOR_NAME IS NULL THEN
 		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LESSOR_ID');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
	    ELSE
		 IF CHECK_LESSOR_NAME(PX_LEASE_DETAILS_REC.LESSOR_NAME,L_LESSOR_ID) THEN
	        	PX_LEASE_DETAILS_REC.LESSOR_ID:=L_LESSOR_ID;
	     	 ELSE
	        	RAISE VALUE_ERROR_EXCEPTION;
	     	 END IF;
	    END IF;
	  ELSE
	     IF NOT CHECK_LESSOR_ID(PX_LEASE_DETAILS_REC.LESSOR_ID) THEN
	        RAISE VALUE_ERROR_EXCEPTION;
	     END IF;
	  END IF;

	---------------------------------------
	-- CHECK FOR LESSOR SITE INFORMATION
	---------------------------------------

	 IF PX_LEASE_DETAILS_REC.LESSOR_SITE_ID IS NULL THEN
	    IF PX_LEASE_DETAILS_REC.LESSOR_SITE IS NULL OR
	       PX_LEASE_DETAILS_REC.LESSOR_SITE_ORG_ID IS NULL THEN
 		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PO_VENDOR_SITE');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
	    ELSE
		 IF CHECK_LESSOR_SITE_CODE (PX_LEASE_DETAILS_REC.LESSOR_SITE,PX_LEASE_DETAILS_REC.LESSOR_ID,PX_LEASE_DETAILS_REC.LESSOR_SITE_ORG_ID ,L_LESSOR_SITE_ID,L_COA_ID) THEN
	        	PX_LEASE_DETAILS_REC.LESSOR_SITE_ID:=L_LESSOR_SITE_ID;
	     	 ELSE
	        	RAISE VALUE_ERROR_EXCEPTION;
	     	 END IF;
	    END IF;
	  ELSE
	     IF NOT CHECK_LESSOR_SITE_ID (PX_LEASE_DETAILS_REC.LESSOR_SITE_ID,PX_LEASE_DETAILS_REC.LESSOR_ID,L_COA_ID,L_LESSOR_SITE_ORG_ID) THEN
	        RAISE VALUE_ERROR_EXCEPTION;
	     END IF;
	  END IF;

	-----------------------------------
	-- CHECK FOR PAYMENT SCHDULE
	-----------------------------------

	 IF PX_LEASE_DETAILS_REC.PAYMENT_SCHEDULE_ID IS NULL THEN
	    IF 	PX_LEASE_DETAILS_REC.PAYMENT_SCHEDULE_NAME IS NULL THEN
 		FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_SCHEDULE_NOT_FOUND');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
	    ELSE
		 IF CHECK_PAYMENT_SCHEDULE_NAME(PX_LEASE_DETAILS_REC.PAYMENT_SCHEDULE_NAME ,L_PAYMENT_SCHEDULE_ID)  THEN
	        	PX_LEASE_DETAILS_REC.PAYMENT_SCHEDULE_ID:=L_PAYMENT_SCHEDULE_ID;
	     	 ELSE
	        	RAISE VALUE_ERROR_EXCEPTION;
	     	 END IF;
	    END IF;
	  ELSE
	     IF NOT CHECK_PAYMENT_SCHEDULE_ID (PX_LEASE_DETAILS_REC.PAYMENT_SCHEDULE_ID) THEN
	        RAISE VALUE_ERROR_EXCEPTION;
	     END IF;
	  END IF;

	-----------------------------------
	-- CHECK FOR PAYMENT TERMS
	-----------------------------------
	 IF PX_LEASE_DETAILS_REC.TERMS_ID IS NULL THEN
	    IF 	PX_LEASE_DETAILS_REC.PAYMENT_TERMS IS NULL THEN
 		NULL;
	    ELSE
		 IF CHECK_PAYMENT_TERMS(PX_LEASE_DETAILS_REC.PAYMENT_TERMS,L_TERMS_ID)  THEN
	        	PX_LEASE_DETAILS_REC.TERMS_ID:=L_TERMS_ID;
	     	 ELSE
	        	RAISE VALUE_ERROR_EXCEPTION;
	     	 END IF;
	    END IF;
	  ELSE
	     IF NOT CHECK_TERMS_ID (PX_LEASE_DETAILS_REC.TERMS_ID) THEN
	        RAISE VALUE_ERROR_EXCEPTION;
	     END IF;
	  END IF;


	--------------------------------------------------------------------------------------------------
	-- CHECK FOR CODE COMBINATION, IF DYNAMIC INSERT IS ON AND IF CODE COMBINATION DOES NOT EXISTS, IT
	-- WILL INSERT A NEW CODE COMBINATION
	--------------------------------------------------------------------------------------------------

	 IF PX_LEASE_DETAILS_REC.DIST_CODE_COMBINATION_ID IS NULL THEN
	    IF  PX_LEASE_DETAILS_REC.CON_DIST_CODE_COMBINATION IS NULL THEN
 		FND_MESSAGE.SET_NAME ('OFA','FA_INV_CODE_COMBINATION');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
	    ELSE
		 IF CHECK_CODE_COMBINATION (PX_LEASE_DETAILS_REC.CON_DIST_CODE_COMBINATION,L_COA_ID,L_DIST_CODE_COMBINATION_ID) THEN
	        	PX_LEASE_DETAILS_REC.DIST_CODE_COMBINATION_ID:=L_DIST_CODE_COMBINATION_ID;
	     	 ELSE
	        	RAISE VALUE_ERROR_EXCEPTION;
	     	 END IF;
	    END IF;
	  ELSE
	     IF NOT CHECK_DIST_CODE_COMBINATION_ID( PX_LEASE_DETAILS_REC.DIST_CODE_COMBINATION_ID,L_COA_ID)  THEN
	        RAISE VALUE_ERROR_EXCEPTION;
	     END IF;
	  END IF;

	-----------------------------------------------------------------------
	-- CHECK IF LEASE NUMBER AND LESSOR SHOULD HAVE A UNIQUE COMBINATION
	-----------------------------------------------------------------------

        IF PX_LEASE_DETAILS_REC.LEASE_NUMBER IS NULL THEN
  		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LEASE_NUMBER');
	      FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	      FND_MSG_PUB.ADD;
	      RAISE VALUE_ERROR_EXCEPTION;
	  END IF;

	 IF NOT CHECK_LEASE_LESSOR_COMBINATION (PX_LEASE_DETAILS_REC.LESSOR_ID,PX_LEASE_DETAILS_REC.LEASE_NUMBER,p_log_level_rec) THEN
 	     RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	-----------------------------------------------------------------------
	-- CHECK IF FAIR VALUE >= 0
	-----------------------------------------------------------------------

	 IF PX_LEASE_DETAILS_REC.FAIR_VALUE IS NULL THEN
 	      FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_FAIR_VALUE');
	      FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	      FND_MSG_PUB.ADD;
	      RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	 IF PX_LEASE_DETAILS_REC.FAIR_VALUE < 1 THEN
	      FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_FAIR_VALUE');
	      FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	      FND_MSG_PUB.ADD;
	      RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	---------------------------------
	-- CHECK FOR CURRENCY CODE
	---------------------------------

 	IF PX_LEASE_DETAILS_REC.CURRENCY_CODE IS NULL THEN
		FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_CURRENCY_NOT_MATCH');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	  	FND_MSG_PUB.ADD;
	  	RAISE VALUE_ERROR_EXCEPTION;
	ELSE
	  IF NOT CHECK_CURRENCY_CODE (PX_LEASE_DETAILS_REC.CURRENCY_CODE,PX_LEASE_DETAILS_REC.PAYMENT_SCHEDULE_ID,p_log_level_rec) THEN
	     RAISE VALUE_ERROR_EXCEPTION;
	  END IF;
	 END IF;

	-------------------------------------------------
	-- CHECK FOR DESCRIPTION SHOULD NOT BE NULL
	-------------------------------------------------

 	IF PX_LEASE_DETAILS_REC.DESCRIPTION IS NULL THEN
            	FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_DESCRIPTION_NULL');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	  	FND_MSG_PUB.ADD;
	  	RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	--------------------------------------------------------
	-- CHECK FOR TRANSFER OWNERSHIP CAN BE NULL,Y OR N
	--------------------------------------------------------

	 IF (PX_LEASE_DETAILS_REC.TRANSFER_OWNERSHIP IS NULL OR
	    PX_LEASE_DETAILS_REC.TRANSFER_OWNERSHIP = 'Y' OR
	    PX_LEASE_DETAILS_REC.TRANSFER_OWNERSHIP = 'N' ) THEN
	    L_TRANSFER_OWNERSHIP:= NVL(PX_LEASE_DETAILS_REC.TRANSFER_OWNERSHIP,'N') ;
	    PX_LEASE_DETAILS_REC.TRANSFER_OWNERSHIP:=L_TRANSFER_OWNERSHIP;
	 ELSE
	  FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_TRANSFER_OWNER');
	  FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	  FND_MSG_PUB.ADD;
	  RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	----------------------------------------------------------
	-- CHECK FOR BARGAIN PURCHASE OPTION CAN BE NULL,Y OR N
	----------------------------------------------------------

	 IF (PX_LEASE_DETAILS_REC.BARGAIN_PURCHASE_OPTION IS NULL OR
	    PX_LEASE_DETAILS_REC.BARGAIN_PURCHASE_OPTION = 'Y' OR
	    PX_LEASE_DETAILS_REC.BARGAIN_PURCHASE_OPTION = 'N' ) THEN
	    L_BARGAIN_PURCHASE_OPTION:= NVL(PX_LEASE_DETAILS_REC.BARGAIN_PURCHASE_OPTION,'N') ;
 	    PX_LEASE_DETAILS_REC.BARGAIN_PURCHASE_OPTION:=L_BARGAIN_PURCHASE_OPTION;
	 ELSE
	  FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_BARGAIN_PURCHASE');
	  FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	  FND_MSG_PUB.ADD;
	  RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	----------------------------------------------------------
	-- CHECK FOR IF ASSET_LIFE IS NOT NULL, IT CAN BE => 0
	----------------------------------------------------------


 	IF PX_LEASE_DETAILS_REC.ASSET_LIFE IS NULL THEN
		PX_LEASE_DETAILS_REC.ASSET_LIFE:=NULL;
	ELSE
	    IF PX_LEASE_DETAILS_REC.ASSET_LIFE < 0 THEN
	       FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_ASSET_LIFE');
	       FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	       FND_MSG_PUB.ADD;
	       RAISE VALUE_ERROR_EXCEPTION;
	    END IF;
	END IF;

	-------------------------------------------------------------
	-- CHECK FOR IF LEASE_TERM IS NOT NULL, IT CAN BE => 0
	-------------------------------------------------------------

	IF PX_LEASE_DETAILS_REC.LEASE_TERM IS NULL THEN
		PX_LEASE_DETAILS_REC.LEASE_TERM:=NULL;
	ELSE
	    IF PX_LEASE_DETAILS_REC.LEASE_TERM < 0 THEN
	       FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LEASE_TERM');
	       FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
	       FND_MSG_PUB.ADD;
	       RAISE VALUE_ERROR_EXCEPTION;
	    END IF;
	END IF;

	-------------------------------------------------------------------------
	-- CHECK FOR IF LEASE_TERM IS IS PROVIDED MAKE SURE THAT ASSET LIFE IS
	--   ALSO PROVIDED
	-------------------------------------------------------------------------

	 IF PX_LEASE_DETAILS_REC.ASSET_LIFE IS NOT NULL AND
	     PX_LEASE_DETAILS_REC.LEASE_TERM IS NOT NULL THEN
	     NULL;
	 ELSIF PX_LEASE_DETAILS_REC.ASSET_LIFE IS NULL AND
	     PX_LEASE_DETAILS_REC.LEASE_TERM IS NULL THEN
	     NULL;
	 ELSE
 	    FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_ALIFE_LEASE_TERM');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
 	    FND_MSG_PUB.ADD;
 	    RAISE VALUE_ERROR_EXCEPTION;
	 END IF;

	--------------------------------------
	-- CHECK FOR LEASE TYPE
	--------------------------------------

	IF PX_LEASE_DETAILS_REC.LEASE_TYPE IS NULL THEN
	   FND_MESSAGE.SET_NAME ('OFA','FA_INV_LEASE_TYPE');
      	   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LEASE_TYPE');
	   FND_MSG_PUB.ADD;
        ELSE
	 IF NOT CHECK_LEASE_TYPE(PX_LEASE_DETAILS_REC.LEASE_TYPE,p_log_level_rec) THEN
	    RAISE VALUE_ERROR_EXCEPTION;
	 END IF;
	END IF;

	RETURN(TRUE);

EXCEPTION
      WHEN PRESENT_VALUE_NOT_FOUND  THEN
  	  ROLLBACK TO CREATE_LEASE;
	  FND_MESSAGE.SET_NAME ('OFA','FA_PRESENT_VALUE_NOT_FOUND');
      	  FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_CREATE_LEASE');
    	  FND_MSG_PUB.ADD;
          RETURN(FALSE);
      WHEN VALUE_ERROR_EXCEPTION THEN
          RETURN(FALSE);
      WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('VALIDATION_CREATE_LEASE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END VALIDATION_CREATE_LEASE;

-----------------------------------------
-- VALIDATE UPDATE LEASE API PARAMETERS
-----------------------------------------
FUNCTION VALIDATION_UPDATE_LEASE  (
   PX_LEASE_DETAILS_REC_NEW	      	IN  OUT NOCOPY FA_API_TYPES.LEASE_DETAILS_REC_TYPE,
   X_OK_TO_UPDATE_FLAG			OUT NOCOPY VARCHAR2
  , p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	VALUE_ERROR_EXCEPTION               	EXCEPTION;
	L_LEASE_ID				NUMBER:=NULL;
	L_LESSOR_ID				NUMBER:=NULL;
	L_UPDATE_FLAG 				VARCHAR2(1):=NULL;
	L_LESSOR_SITE_ID   			NUMBER:=NULL;
	L_COA_ID 		   		NUMBER:=NULL;
	L_UPDATE_STATEMET			VARCHAR2(3000):=NULL;
	L_OK_TO_UPDATE_LESSOR			VARCHAR2(1):=NULL;
	L_LESSOR_SITE_ORG_ID			NUMBER:=NULL;
	L_ATLEAST_ONE_UPDATE			NUMBER:=0;

BEGIN

	--------------------------------
	-- VALIDATE LESSOR INFORMATION
	---------------------------------
	IF PX_LEASE_DETAILS_REC_NEW.LESSOR_ID IS NULL THEN
	    IF PX_LEASE_DETAILS_REC_NEW.LESSOR_NAME IS NULL THEN
		 NULL;
	    ELSE
		IF VALIDATE_LESSOR(NULL,PX_LEASE_DETAILS_REC_NEW.LESSOR_NAME,L_LESSOR_ID,p_log_level_rec) THEN
		   PX_LEASE_DETAILS_REC_NEW.LESSOR_ID:=L_LESSOR_ID;
		ELSE
		   RAISE VALUE_ERROR_EXCEPTION;
		END IF;
	     END IF;
	ELSE
	  	IF VALIDATE_LESSOR(PX_LEASE_DETAILS_REC_NEW.LESSOR_ID,NULL,L_LESSOR_ID,p_log_level_rec) THEN
		   PX_LEASE_DETAILS_REC_NEW.LESSOR_ID:=L_LESSOR_ID;
		ELSE
		   RAISE VALUE_ERROR_EXCEPTION;
		END IF;
	END IF;

	--------------------------
	-- VALIDATE LEASE ID
	--------------------------
	IF PX_LEASE_DETAILS_REC_NEW.LEASE_ID IS NULL THEN
	    IF PX_LEASE_DETAILS_REC_NEW.LEASE_NUMBER IS NULL THEN
     			FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_INCORRECT_LEASE_ID');
      	  		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_UPDATE_LEASE');
	     		FND_MSG_PUB.ADD;
	     		RAISE VALUE_ERROR_EXCEPTION;
	    ELSE
		IF GET_LEASE_ID(L_LESSOR_ID,PX_LEASE_DETAILS_REC_NEW.LEASE_NUMBER,L_LEASE_ID,p_log_level_rec) THEN
	        	PX_LEASE_DETAILS_REC_NEW.LEASE_ID:=L_LEASE_ID;
		ELSE
	        	RAISE VALUE_ERROR_EXCEPTION;
	      END IF;
	    END IF;
	ELSE
	  IF VALIDATE_LEASE_ID(PX_LEASE_DETAILS_REC_NEW.LEASE_ID,p_log_level_rec) THEN
	     L_LEASE_ID:=PX_LEASE_DETAILS_REC_NEW.LEASE_ID;
	  ELSE
	     RAISE VALUE_ERROR_EXCEPTION;
	  END IF;
	END IF;

	-----------------------------
	-- VALIDATE LESSOR SITE
	-----------------------------

	IF  PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE_ID IS NULL THEN
	    IF PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE IS NULL THEN
  		 NULL;
	    ELSE
		 IF CHECK_LESSOR_SITE_CODE (PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE,L_LESSOR_ID,PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE_ORG_ID ,L_LESSOR_SITE_ID,L_COA_ID,p_log_level_rec) THEN
	        	L_LESSOR_SITE_ORG_ID:=PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE_ORG_ID ;
			PX_LEASE_DETAILS_REC_NEW.LESSOR_site_ID:=L_LESSOR_SITE_ID;
 	    	 ELSE
 	       	RAISE VALUE_ERROR_EXCEPTION;
	       END IF;
	    END IF;
	ELSE
	  IF CHECK_LESSOR_SITE_ID (PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE_ID,L_LESSOR_ID,L_COA_ID,L_LESSOR_SITE_ORG_ID,p_log_level_rec) THEN
		 L_LESSOR_SITE_ID := PX_LEASE_DETAILS_REC_NEW.LESSOR_SITE_ID;
	     ELSE
	       RAISE VALUE_ERROR_EXCEPTION;
	  END IF;
	END IF;

	---------------------------------------
	-- CHECK IF LEASE CAN BE UPDATED
	---------------------------------------

	L_UPDATE_FLAG :=CHECK_LEASE_UPDATE(PX_LEASE_DETAILS_REC_NEW.LEASE_ID
                                          ,p_log_level_rec);

	----------------------------------------------------------------------------------------------
	-- CHECK IF LESSOR AND SITE IS SAME AS IN THE DATABASE DO NOT BOTHER TO UPDATE, IF NOT MAKE
	-- SURE THAT THEY ARE IN THE SAME OPERATING UNIT AS PREVIOUS LESSOR AND  LESSOR SITE
	----------------------------------------------------------------------------------------------
	L_OK_TO_UPDATE_LESSOR :='N';

	IF L_LESSOR_ID IS NOT NULL
	   AND L_LESSOR_SITE_ID IS NOT NULL THEN
	   IF  L_UPDATE_FLAG = 'Y' THEN
	   	IF VALIDATE_LEASE_LESSOR(L_LEASE_ID,L_LESSOR_ID,L_LESSOR_SITE_ID,L_LESSOR_SITE_ORG_ID,p_log_level_rec)  THEN
	       L_OK_TO_UPDATE_LESSOR :='Y';
		ELSE
	       FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_CANNOT_BE_UPDATED');
      	 FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_UPDATE_LEASE');
	       FND_MSG_PUB.ADD;
		 RAISE VALUE_ERROR_EXCEPTION;
	    	END IF;
	    ELSE
		 FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_CANNOT_BE_UPDATED');
      	 FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATION_UPDATE_LEASE');
	       FND_MSG_PUB.ADD;
		 RAISE VALUE_ERROR_EXCEPTION;
	    END IF;
	END IF;

	X_OK_TO_UPDATE_FLAG:=L_OK_TO_UPDATE_LESSOR;

	RETURN(TRUE);

EXCEPTION
	WHEN VALUE_ERROR_EXCEPTION THEN
        RETURN(FALSE);
       WHEN OTHERS THEN
       RETURN(FALSE);
END VALIDATION_UPDATE_LEASE;

PROCEDURE UPDATE_ROW (
	X_ROWID                         IN 		VARCHAR2 DEFAULT NULL,
      	X_LEASE_ID                      IN            	NUMBER,
	X_LESSOR_ID                     IN            	NUMBER,
	X_LESSOR_SITE_ID                IN              NUMBER,
	X_DESCRIPTION                   IN            	VARCHAR2,
	X_LAST_UPDATE_DATE              IN            	DATE,
	X_LAST_UPDATED_BY               IN            	NUMBER,
	X_ATTRIBUTE1                    IN              VARCHAR2,
	X_ATTRIBUTE2                    IN              VARCHAR2,
	X_ATTRIBUTE3                    IN              VARCHAR2,
	X_ATTRIBUTE4                    IN              VARCHAR2,
	X_ATTRIBUTE5                    IN              VARCHAR2,
	X_ATTRIBUTE6                    IN              VARCHAR2,
	X_ATTRIBUTE7                    IN              VARCHAR2,
	X_ATTRIBUTE8                    IN              VARCHAR2,
	X_ATTRIBUTE9                    IN              VARCHAR2,
	X_ATTRIBUTE10                   IN              VARCHAR2,
	X_ATTRIBUTE11                   IN              VARCHAR2,
	X_ATTRIBUTE12                   IN              VARCHAR2,
	X_ATTRIBUTE13                   IN              VARCHAR2,
	X_ATTRIBUTE14                   IN              VARCHAR2,
	X_ATTRIBUTE15                   IN              VARCHAR2,
	X_ATTRIBUTE_CATEGORY_CODE       IN              VARCHAR2, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
 IS
  BEGIN
    IF X_ROWID IS NOT NULL THEN
     UPDATE FA_LEASES
     	SET
	LESSOR_ID                         = NVL(X_LESSOR_ID,LESSOR_ID),
	DESCRIPTION                    	  = NVL(X_DESCRIPTION,DESCRIPTION),
	LAST_UPDATE_DATE               	  = DECODE(X_LAST_UPDATE_DATE,NULL,LAST_UPDATE_DATE,X_LAST_UPDATE_DATE),
	LAST_UPDATED_BY                	  = DECODE(X_LAST_UPDATED_BY,NULL,LAST_UPDATED_BY,FND_API.G_MISS_NUM,NULL,X_LAST_UPDATED_BY),
	ATTRIBUTE1                     	  = DECODE(X_ATTRIBUTE1,NULL,ATTRIBUTE1,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE1),
	ATTRIBUTE2                     	  = DECODE(X_ATTRIBUTE2,NULL,ATTRIBUTE2,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE2),
	ATTRIBUTE3                     	  = DECODE(X_ATTRIBUTE3,NULL,ATTRIBUTE3,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE3),
	ATTRIBUTE4                     	  = DECODE(X_ATTRIBUTE4,NULL,ATTRIBUTE4,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE4),
	ATTRIBUTE5                     	  = DECODE(X_ATTRIBUTE5,NULL,ATTRIBUTE5,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE5),
	ATTRIBUTE6                     	  = DECODE(X_ATTRIBUTE6,NULL,ATTRIBUTE6,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE6),
	ATTRIBUTE7                     	  = DECODE(X_ATTRIBUTE7,NULL,ATTRIBUTE7,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE7),
	ATTRIBUTE8                     	  = DECODE(X_ATTRIBUTE8,NULL,ATTRIBUTE8,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE8),
	ATTRIBUTE9                     	  = DECODE(X_ATTRIBUTE9,NULL,ATTRIBUTE9,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE9),
	ATTRIBUTE10                    	  = DECODE(X_ATTRIBUTE10,NULL,ATTRIBUTE10,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE10),
	ATTRIBUTE11                    	  = DECODE(X_ATTRIBUTE11,NULL,ATTRIBUTE11,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE11),
	ATTRIBUTE12                    	  = DECODE(X_ATTRIBUTE12,NULL,ATTRIBUTE12,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE12),
	ATTRIBUTE13                    	  = DECODE(X_ATTRIBUTE13,NULL,ATTRIBUTE13,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE13),
	ATTRIBUTE14                    	  = DECODE(X_ATTRIBUTE14,NULL,ATTRIBUTE14,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE14),
	ATTRIBUTE15                    	  = DECODE(X_ATTRIBUTE15,NULL,ATTRIBUTE15,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE15),
	ATTRIBUTE_CATEGORY_CODE        	  = DECODE(X_ATTRIBUTE_CATEGORY_CODE,NULL,ATTRIBUTE_CATEGORY_CODE,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE_CATEGORY_CODE),
	LESSOR_SITE_ID                 	  = NVL(X_LESSOR_SITE_ID,LESSOR_SITE_ID)
	WHERE ROWID = X_ROWID;
    ELSE
      UPDATE FA_LEASES
     	SET
	LESSOR_ID                         = NVL(X_LESSOR_ID,LESSOR_ID),
	DESCRIPTION                    	  = NVL(X_DESCRIPTION,DESCRIPTION),
	LAST_UPDATE_DATE               	  = DECODE(X_LAST_UPDATE_DATE,NULL,LAST_UPDATE_DATE,X_LAST_UPDATE_DATE),
	LAST_UPDATED_BY                	  = DECODE(X_LAST_UPDATED_BY,NULL,LAST_UPDATED_BY,FND_API.G_MISS_NUM,NULL,X_LAST_UPDATED_BY),
	ATTRIBUTE1                     	  = DECODE(X_ATTRIBUTE1,NULL,ATTRIBUTE1,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE1),
	ATTRIBUTE2                     	  = DECODE(X_ATTRIBUTE2,NULL,ATTRIBUTE2,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE2),
	ATTRIBUTE3                     	  = DECODE(X_ATTRIBUTE3,NULL,ATTRIBUTE3,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE3),
	ATTRIBUTE4                     	  = DECODE(X_ATTRIBUTE4,NULL,ATTRIBUTE4,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE4),
	ATTRIBUTE5                     	  = DECODE(X_ATTRIBUTE5,NULL,ATTRIBUTE5,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE5),
	ATTRIBUTE6                     	  = DECODE(X_ATTRIBUTE6,NULL,ATTRIBUTE6,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE6),
	ATTRIBUTE7                     	  = DECODE(X_ATTRIBUTE7,NULL,ATTRIBUTE7,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE7),
	ATTRIBUTE8                     	  = DECODE(X_ATTRIBUTE8,NULL,ATTRIBUTE8,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE8),
	ATTRIBUTE9                     	  = DECODE(X_ATTRIBUTE9,NULL,ATTRIBUTE9,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE9),
	ATTRIBUTE10                    	  = DECODE(X_ATTRIBUTE10,NULL,ATTRIBUTE10,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE10),
	ATTRIBUTE11                    	  = DECODE(X_ATTRIBUTE11,NULL,ATTRIBUTE11,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE11),
	ATTRIBUTE12                    	  = DECODE(X_ATTRIBUTE12,NULL,ATTRIBUTE12,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE12),
	ATTRIBUTE13                    	  = DECODE(X_ATTRIBUTE13,NULL,ATTRIBUTE13,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE13),
	ATTRIBUTE14                    	  = DECODE(X_ATTRIBUTE14,NULL,ATTRIBUTE14,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE14),
	ATTRIBUTE15                    	  = DECODE(X_ATTRIBUTE15,NULL,ATTRIBUTE15,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE15),
	ATTRIBUTE_CATEGORY_CODE        	  = DECODE(X_ATTRIBUTE_CATEGORY_CODE,NULL,ATTRIBUTE_CATEGORY_CODE,FND_API.G_MISS_CHAR,NULL,X_ATTRIBUTE_CATEGORY_CODE),
	LESSOR_SITE_ID                 	  = NVL(X_LESSOR_SITE_ID,LESSOR_SITE_ID)
	WHERE LEASE_ID = X_LEASE_ID;
    END IF;
    --
    IF (SQL%NOTFOUND) THEN
      RAISE NO_DATA_FOUND;
    END IF;

  EXCEPTION
    WHEN OTHERS THEN
	FA_SRVR_MSG.ADD_SQL_ERROR(
		CALLING_FN => 'FA_LEASE_PVT.UPDATE_ROW',  p_log_level_rec => p_log_level_rec);
	RAISE;
END UPDATE_ROW;

END FA_LEASE_PVT;

/
