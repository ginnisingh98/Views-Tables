--------------------------------------------------------
--  DDL for Package Body INV_RCV_INTEGRATION_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_RCV_INTEGRATION_PVT" AS
/* $Header: INVRCVVB.pls 120.92.12010000.116 2013/01/29 18:30:56 ssingams ship $*/

--  Global constant holding the package name
g_pkg_name CONSTANT VARCHAR2(30) := 'INV_RCV_INTEGRATION_PVT';

-- Define the LPN CONTEXTS
-- Resides in Inventory
G_LPN_CONTEXT_INV CONSTANT NUMBER := 1;
-- Resides in WIP
G_LPN_CONTEXT_WIP CONSTANT NUMBER := 2;
-- Resides in Receiving
G_LPN_CONTEXT_RCV CONSTANT NUMBER := 3;
-- Issued out of Stores
G_LPN_CONTEXT_STORES CONSTANT NUMBER := 4;
-- Pre-generated
G_LPN_CONTEXT_PREGENERATED CONSTANT NUMBER := 5;
-- Resides in intransit
G_LPN_CONTEXT_INTRANSIT CONSTANT NUMBER := 6;
-- Resides at vendor site
G_LPN_CONTEXT_VENDOR  CONSTANT NUMBER := 7;
-- Packing context, used as a temporary context value
-- when the user wants to reassociate the LPN with a
-- different license plate number and/or container item ID
G_LPN_CONTEXT_PACKING CONSTANT NUMBER := 8;
-- Loaded for shipment
G_LPN_LOADED_FOR_SHIPMENT CONSTANT NUMBER := 9;
-- Prepack of WIP
G_LPN_PREPACK_FOR_WIP CONSTANT NUMBER := 10;
-- LPN Picked
G_LPN_CONTEXT_PICKED CONSTANT NUMBER := 11;


G_RET_STS_ERROR	       CONSTANT	VARCHAR2(1) := fnd_api.g_ret_sts_error;
G_RET_STS_UNEXP_ERROR  CONSTANT	VARCHAR2(1) := fnd_api.g_ret_sts_unexp_error;
G_RET_STS_SUCCESS      CONSTANT	VARCHAR2(1) := FND_API.g_ret_sts_success;
G_TRUE		       CONSTANT	VARCHAR2(1) := fnd_api.g_true;
G_FALSE		       CONSTANT	VARCHAR2(1) := fnd_api.g_false;

G_RTV CONSTANT VARCHAR2(25) := 'RETURN TO VENDOR';
G_RTC CONSTANT VARCHAR2(25) := 'RETURN TO CUSTOMER';
G_RTR CONSTANT VARCHAR2(25) := 'RETURN TO RECEIVING';

g_lpn_group_id NUMBER;
g_epc_group_id NUMBER;

g_mixed_expense_lpn_id  NUMBER  := -999 ;  --Bug#8662279
g_mixed_expense_result  BOOLEAN := FALSE ; --Bug#8662279

g_org_wms_enabled boolean;--Bug#8731994
g_org_id          number; --Bug#8731994


PROCEDURE print_debug(p_err_msg VARCHAR2, p_level NUMBER) IS
   l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
   l_pkg_name VARCHAR2(100) := g_pkg_name||'($Revision: 120.92.12010000.116 $)';
BEGIN
   IF (l_debug = 1) THEN
      inv_mobile_helper_functions.tracelog(p_err_msg => p_err_msg, p_module => l_pkg_name, p_level => p_level);
   END IF;
END print_debug;

PROCEDURE print_stacked_messages IS
   l_error_message VARCHAR2(4000) := '';
BEGIN
   inv_mobile_helper_functions.get_stacked_messages(l_error_message);

   print_debug('STACKED ERROR MESSAGES : '||l_error_message,1);
END print_stacked_messages;

PROCEDURE get_epc_info(p_mode          IN NUMBER
		       ,p_lpn          IN VARCHAR2 DEFAULT NULL
		       ,p_src_grp_id   IN NUMBER   DEFAULT NULL
		       ,p_ser_if_rowid IN ROWID    DEFAULT NULL
		       ,x_epc_column   OUT nocopy VARCHAR2
		       ,x_epc_value    OUT nocopy VARCHAR2
		       ) IS
   l_debug NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
   l_epc_column	    VARCHAR2(30);
   l_epc_value      VARCHAR2(100);
   l_epc_sql        VARCHAR2(1000);
   l_epc_cursor         NUMBER;
   l_last_error_pos NUMBER;
   l_temp_str       VARCHAR2(100);
   l_return         NUMBER;
   l_progress       VARCHAR2(10);
BEGIN

   IF (p_mode = 1) THEN --LPN
      l_epc_column := fnd_profile.value('WMS_EPC_LASN_COL');
    ELSIF (p_mode = 2) THEN   -- Serial
      l_epc_column := fnd_profile.value('WMS_EPC_SASN_COL');
    ELSE
      IF l_debug = 1 THEN
	 print_debug('Unsupported mode',4);
      END IF;
      RAISE fnd_api.g_exc_error;
   END IF;

   x_epc_column := l_epc_column;

   IF (l_epc_column IS NULL) THEN
      x_epc_column := NULL;
      x_epc_value  := NULL;
    ELSE
      IF (p_mode = 1) THEN
	 l_epc_sql := 'SELECT ' || l_epc_column;
	 l_epc_sql := l_epc_sql || ' FROM wms_lpn_interface';
	 l_epc_sql := l_epc_sql || ' WHERE license_plate_number = :lpn';
	 l_epc_sql := l_epc_sql || ' AND   source_group_id = :src_grp_id';

	 IF (l_debug = 1) THEN
	    print_debug('l_epc_sql: '||l_epc_sql,4);
	 END IF;

	 l_epc_cursor := dbms_sql.open_cursor;
         BEGIN
	    dbms_sql.parse(l_epc_cursor,l_epc_sql,dbms_sql.v7);
	 EXCEPTION
	    WHEN OTHERS THEN
	       l_last_error_pos := dbms_sql.last_error_position();
	       l_temp_str := Substr(l_epc_sql, l_last_error_pos-5, 50);
	       IF l_debug = 1 THEN
		  print_debug('Error in parse sql statement, at '||l_temp_str,4);
	       END IF;
	       RAISE fnd_api.g_exc_unexpected_error;
	 END;

	 dbms_sql.bind_variable(l_epc_cursor,':lpn', p_lpn);
	 dbms_sql.bind_variable(l_epc_cursor,':src_grp_id', p_src_grp_id);
	 dbms_sql.define_column(l_epc_cursor, 1, l_epc_value, 30);
	 l_return := dbms_sql.execute(l_epc_cursor);

	 IF dbms_sql.fetch_rows(l_epc_cursor) <> 0 THEN
	    dbms_sql.column_value(l_epc_cursor, 1, l_epc_value);
	    IF (l_debug = 1) THEN
	       print_debug('l_epc_value: '||l_epc_value,4);
	    END IF;
	    x_epc_value := l_epc_value;
	  ELSE
	    x_epc_value := NULL;
	 END IF;

	 dbms_sql.close_cursor(l_epc_cursor);
       ELSE --Serial
	 l_epc_sql := 'SELECT ' || l_epc_column;
	 l_epc_sql := l_epc_sql || ' FROM mtl_serial_numbers_temp';
	 l_epc_sql := l_epc_sql || ' WHERE rowid = :row_id';

	 IF (l_debug = 1) THEN
	    print_debug('l_epc_sql: '||l_epc_sql,4);
	 END IF;

	 l_epc_cursor := dbms_sql.open_cursor;
         BEGIN
	    dbms_sql.parse(l_epc_cursor,l_epc_sql,dbms_sql.v7);
	 EXCEPTION
	    WHEN OTHERS THEN
	       l_last_error_pos := dbms_sql.last_error_position();
	       l_temp_str := Substr(l_epc_sql, l_last_error_pos-10, 50);
	       IF l_debug = 1 THEN
		  print_debug('Error in parse sql statement, at '||l_temp_str,4);
		  print_debug('ERROR CODE = '||SQLCODE||' ERROR MESSAGE = '||Sqlerrm,4);
	       END IF;
	       RAISE fnd_api.g_exc_unexpected_error;
	 END;

	 dbms_sql.bind_variable(l_epc_cursor,':row_id', p_ser_if_rowid);
	 dbms_sql.define_column(l_epc_cursor, 1, l_epc_value, 30);

	 l_return := dbms_sql.execute(l_epc_cursor);

	 IF dbms_sql.fetch_rows(l_epc_cursor) <> 0 THEN
	    dbms_sql.column_value(l_epc_cursor, 1, l_epc_value);
	    IF (l_debug = 1) THEN
	       print_debug('l_epc_value: '||l_epc_value,4);
	    END IF;
	    x_epc_value := l_epc_value;
	  ELSE
	    x_epc_value := NULL;
	 END IF;
	 dbms_sql.close_cursor(l_epc_cursor);
      END IF;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      IF l_debug = 1 THEN
	 print_debug('Error in get_epc_info at progress:'||l_progress,4);
	 print_debug('ERROR CODE = '||SQLCODE||' ERROR MESSAGE = '||Sqlerrm,4);
      END IF;
      dbms_sql.close_cursor(l_epc_cursor);
END get_epc_info;


/*****bug4187663, comment out the call to serial uniqueness api
--Following function calls the serial uniqueness api with txn_source and
--txn_action. It will return 0 on success and 1 on error.

FUNCTION is_sernum_unique(p_org_id IN NUMBER,
			  p_item_id IN NUMBER,
			  p_serial IN VARCHAR2,
			  p_txn_src_type IN NUMBER,
			  p_txn_action IN NUMBER,
			  x_proc_msg OUT NOCOPY VARCHAR2)
  RETURN NUMBER AS
LANGUAGE JAVA
  NAME 'oracle.apps.inv.transaction.server.TrxProcessor.isSerialNumberUnique(java.lang.Long,
  java.lang.Long,
  java.lang.String,
  java.lang.Integer,
  java.lang.Integer,
  java.lang.String[]) return java.lang.Integer';

****end of bug4187663*****/

PROCEDURE check_lpn_in_wlpni(p_license_plate_number IN VARCHAR2,
                             p_lpn_id               IN NUMBER,
                             p_lpn_group_id         IN NUMBER,
                             x_exists OUT NOCOPY NUMBER )
  is
BEGIN
   x_exists := 0;
   select 1 into x_exists
     from wms_lpn_interface
     where ( ( license_plate_number = p_license_plate_number ) or ( lpn_id = p_lpn_id ))
     and source_group_id = p_lpn_group_id
     and rownum = 1;
EXCEPTION
   WHEN OTHERS THEN
      x_exists := 0;
END check_lpn_in_wlpni;

function get_primary_qty(
			 p_organization_id       IN      NUMBER,
			 p_inventory_item_id     IN      NUMBER,
			 p_uom                   IN      VARCHAR2,
			 p_quantity              IN      NUMBER,
			 p_lot_number            IN      VARCHAR2 DEFAULT NULL) return number IS --Bug#9570776

			    -- local variables
			    l_primary_uom         VARCHAR2(10);

BEGIN
   -- if input qty is null, assume 0, in which case we return 0 as converted
   -- qty also
   if ( ( p_quantity IS NULL ) OR (p_quantity = 0) ) then
      return 0;
   end if;

   l_primary_uom := inv_rcv_cache.get_primary_uom_code(p_organization_id,p_inventory_item_id);

   return( inv_rcv_cache.convert_qty(p_inventory_item_id => p_inventory_item_id
		       ,p_from_qty         => p_quantity
		       ,p_from_uom_code    => p_uom
		       ,p_to_uom_code      => l_primary_uom
		       ,p_precision        => 5--BUG 4939647
		       ,p_organization_id  => p_organization_id --Bug#9570776
		       ,p_lot_number       => p_lot_number --Bug#9570776
		       ) );


Exception
   When Others then
      return 0;
end get_primary_qty ;

FUNCTION validate_pjm_commingle(p_org_id IN NUMBER,
				   p_lpn_id IN NUMBER,
				   p_project_id IN NUMBER,
				   p_task_id IN NUMBER)
  RETURN BOOLEAN
  IS
     l_dummy VARCHAR2(1);

BEGIN
   SELECT '1'
     INTO l_dummy
     FROM dual
     WHERE exists (SELECT '1'
		   FROM mtl_txn_request_lines mtrl
		   WHERE mtrl.lpn_id = p_lpn_id
		   AND mtrl.organization_id = p_org_id
		   AND (Nvl(mtrl.project_id,-1) <> Nvl(p_project_id,-1)
			OR Nvl(mtrl.task_id,-1) <> Nvl(p_task_id,-1))
		   AND line_status <> inv_globals.G_TO_STATUS_CLOSED
		   AND (mtrl.quantity - Nvl(mtrl.quantity_delivered, 0)) > 0);

   RETURN TRUE;

EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN OTHERS THEN
      RETURN TRUE;

END validate_pjm_commingle;


FUNCTION validate_mixed_expense_items(p_org_id IN NUMBER,
				      p_lpn_id IN NUMBER,
				      p_transactions_enabled_flag IN VARCHAR2)
  RETURN BOOLEAN
  IS
     l_dummy VARCHAR2(1);
BEGIN
   /*Bug8662279. Performance fix. Added the following
    1)Enabled cahche for one LPN_ID
    2)Moved WLPN query to form clause by adding org_id and context restrictions
    3)Eliminated need for extra WLPN
    4)Removed reference to DUAL and used ROWNUM<2
   */
   IF (p_lpn_id = g_mixed_expense_lpn_id )  THEN
      RETURN g_mixed_expense_result;
   ELSE
        g_mixed_expense_lpn_id := p_lpn_id ;
   END IF;
   SELECT '1' INTO l_dummy
     FROM  wms_lpn_contents wlc
         , mtl_system_items msi
         , (SELECT lpn_id
             FROM wms_license_plate_numbers wlpn2
             WHERE wlpn2.organization_id = p_org_id
                AND wlpn2.lpn_context <> G_LPN_CONTEXT_STORES
                CONNECT BY PRIOR wlpn2.lpn_id = wlpn2.parent_lpn_id
                START WITH wlpn2.lpn_id = p_lpn_id
              UNION ALL
              SELECT lpn_id
              FROM wms_license_plate_numbers wlpn3
              WHERE wlpn3.organization_id = p_org_id
                 AND wlpn3.lpn_context <> G_LPN_CONTEXT_STORES
                 CONNECT BY PRIOR wlpn3.parent_lpn_id = wlpn3.lpn_id
                 START WITH wlpn3.parent_lpn_id = p_lpn_id) wlpn
     WHERE wlc.parent_lpn_id = wlpn.lpn_id
      AND wlc.inventory_item_id = msi.inventory_item_id
      AND msi.organization_id = p_org_id
      AND msi.mtl_transactions_enabled_flag <> p_transactions_enabled_flag
      AND ROWNUM<2;
   g_mixed_expense_result := TRUE;

   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      g_mixed_expense_result := FALSE;
      RETURN FALSE;
   WHEN OTHERS THEN
      g_mixed_expense_result := TRUE;
      RETURN TRUE;
END validate_mixed_expense_items;

--procedure to call appropriate atf api.

PROCEDURE call_atf_api(x_return_status OUT nocopy VARCHAR2,
		       x_msg_data OUT nocopy VARCHAR2,
		       x_msg_count OUT nocopy NUMBER,
		       x_error_code OUT nocopy NUMBER,
		       p_source_task_id IN NUMBER,
		       p_activity_type_id IN NUMBER,
		       p_operation_type_id IN NUMBER,
		       p_mol_id IN NUMBER,
		       p_atf_api_name IN NUMBER,
		       p_mmtt_error_code   IN   VARCHAR2,
		       p_mmtt_error_explanation   IN   VARCHAR2,
		       p_retain_mmtt IN VARCHAR2)
  IS
     -- Bug 5231114: Added the condition on transaction_source_type_id and
     -- transaction_action_id for the following combinations:13/12 and 4/27
     CURSOR c_mmtt IS
	SELECT transaction_temp_id
	  FROM mtl_material_transactions_temp
	  WHERE move_order_line_id = p_mol_id
	  AND ((transaction_source_type_id = 1 AND transaction_action_id = 27)
	       OR (transaction_source_type_id = 7 AND transaction_action_id = 12)
	       OR (transaction_source_type_id = 12 AND transaction_action_id = 27)
	       OR (transaction_source_type_id = 13 AND transaction_action_id = 12)
	       OR (transaction_source_type_id = 4 AND transaction_action_id = 27));

     l_transaction_temp_id NUMBER;

     l_debug NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
BEGIN

   IF p_source_task_id IS NOT NULL THEN
      IF (p_atf_api_name = g_atf_api_complete) THEN
	 wms_atf_runtime_pub_apis.complete_operation_instance(x_return_status => x_return_status
							      ,x_msg_data => x_msg_data
							      ,x_msg_count => x_msg_count
							      ,x_error_code => x_error_code
							      ,p_source_task_id => p_source_task_id
							      ,p_activity_id => p_activity_type_id
							      ,p_operation_type_id => p_operation_type_id);
       ELSIF (p_atf_api_name = g_atf_api_cancel) THEN
	 wms_atf_runtime_pub_apis.cancel_operation_plan(x_return_status => x_return_status
							,x_msg_data => x_msg_data
							,x_msg_count => x_msg_count
							,x_error_code => x_error_code
							,p_source_task_id => p_source_task_id
							,p_activity_type_id=> p_activity_type_id
							,p_mmtt_error_code => p_mmtt_error_code
							,p_mmtt_error_explanation => p_mmtt_error_explanation
							,p_retain_mmtt => p_retain_mmtt);
       ELSIF (p_atf_api_name = g_atf_api_abort) THEN
	 wms_atf_runtime_pub_apis.abort_operation_plan(x_return_status => x_return_status
						       ,x_msg_data => x_msg_data
						       ,x_msg_count => x_msg_count
						       ,x_error_code => x_error_code
						       ,p_source_task_id => p_source_task_id
						       ,p_activity_type_id => p_activity_type_id);
       ELSIF (p_atf_api_name = g_atf_api_cleanup) THEN
	 wms_atf_runtime_pub_apis.cleanup_operation_instance(x_return_status => x_return_status
							     ,x_msg_data => x_msg_data
							     ,x_msg_count => x_msg_count
							     ,x_error_code => x_error_code
							     ,p_source_task_id => p_source_task_id
							     ,p_activity_type_id => p_activity_type_id);
      END IF;--ELSIF (p_atf_api_name = g_atf_api_cleanup) THEN
    ELSE --IF p_source_task_id IS NOT NULL THEN
      FOR l_mmtt IN c_mmtt LOOP
	 IF (p_atf_api_name = g_atf_api_complete) THEN
	    wms_atf_runtime_pub_apis.complete_operation_instance(x_return_status => x_return_status
								 ,x_msg_data => x_msg_data
								 ,x_msg_count => x_msg_count
								 ,x_error_code => x_error_code
								 ,p_source_task_id => l_mmtt.transaction_temp_id
								 ,p_activity_id => p_activity_type_id
								 ,p_operation_type_id => p_operation_type_id);
	  ELSIF (p_atf_api_name = g_atf_api_cancel) THEN
	    wms_atf_runtime_pub_apis.cancel_operation_plan(x_return_status => x_return_status
							   ,x_msg_data => x_msg_data
							   ,x_msg_count => x_msg_count
							   ,x_error_code => x_error_code
							   ,p_source_task_id => l_mmtt.transaction_temp_id
							   ,p_activity_type_id => p_activity_type_id
							   ,p_mmtt_error_code => p_mmtt_error_code
							   ,p_mmtt_error_explanation => p_mmtt_error_explanation
							   ,p_retain_mmtt => p_retain_mmtt);
	  ELSIF (p_atf_api_name = g_atf_api_abort) THEN
	    wms_atf_runtime_pub_apis.abort_operation_plan(x_return_status => x_return_status
							  ,x_msg_data => x_msg_data
							  ,x_msg_count => x_msg_count
							  ,x_error_code => x_error_code
							  ,p_source_task_id => l_mmtt.transaction_temp_id
							  ,p_activity_type_id => p_activity_type_id);
	  ELSIF (p_atf_api_name = g_atf_api_cleanup) THEN
	    wms_atf_runtime_pub_apis.cleanup_operation_instance(x_return_status => x_return_status
								,x_msg_data => x_msg_data
								,x_msg_count => x_msg_count
								,x_error_code => x_error_code
								,p_source_task_id => l_mmtt.transaction_temp_id
								,p_activity_type_id => p_activity_type_id);
	 END IF;--ELSIF (p_atf_api_name = g_atf_api_cleanup) THEN
      END LOOP; --FOR l_mmtt IN (c_mmtt) LOOP
   END IF; --IF p_source_task_id IS NOT NULL THEN

END call_atf_api;

--Procedure to get the lot/serial controls in the source or for int shp/req rcpt.
PROCEDURE get_serial_lot_ctrl_in_src_org
  (p_shipment_line_id IN NUMBER,
   p_org_id IN NUMBER,
   x_serial_control_code OUT nocopy NUMBER,
   x_lot_control_code OUT nocopy NUMBER,
   x_revision_control_code OUT nocopy NUMBER,
   x_return_status OUT nocopy VARCHAR2,
   x_msg_count OUT nocopy NUMBER,
   x_msg_data OUT nocopy VARCHAR2)
  IS
     l_debug NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
BEGIN
   x_return_status := g_ret_sts_success;

   SELECT msi.lot_control_code
     , msi.serial_number_control_code
     , msi.revision_qty_control_code
     INTO x_lot_control_code
     , x_serial_control_code
     , x_revision_control_code
     FROM mtl_system_items msi, rcv_shipment_lines rsl
     WHERE rsl.shipment_line_id = p_shipment_line_id
     AND rsl.to_organization_id = p_org_id
     AND msi.inventory_item_id = rsl.item_id
     AND msi.organization_id = rsl.from_organization_id;

EXCEPTION
   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('get_serial_lot_ctrl_in_src_org - other exception: '||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.get_serial_lot_ctrl_in_src_org',Sqlerrm,SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);
END get_serial_lot_ctrl_in_src_org;

PROCEDURE create_lot_serial_history(p_prod_txn_tmp_id IN NUMBER
				    ,p_prod_txn_id      IN NUMBER
				    ,x_return_status       OUT NOCOPY VARCHAR2
				    ,x_msg_count           OUT NOCOPY NUMBER
				    ,x_msg_data            OUT NOCOPY VARCHAR2)
  IS
     TYPE varchar30_tb_tp IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;

     l_temp_prefix VARCHAR2(30);
     l_from_ser_number NUMBER;
     l_to_ser_number NUMBER;
     l_cur_ser_number NUMBER;
     l_range_numbers NUMBER;
     l_cur_serial_number VARCHAR2(30);
     l_serial_numbers varchar30_tb_tp;
     l_sysdate DATE := Sysdate;

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15);

     CURSOR msnt_cur IS
	SELECT
	  msnt.transaction_temp_id transaction_temp_id
	  ,msnt.last_updated_by last_updated_by
	  ,msnt.created_by created_by
	  ,rti.item_id inventory_item_id
	  ,rti.to_organization_id organization_id
	  ,msnt.fm_serial_number fm_serial_number
	  ,msnt.to_serial_number to_serial_number
	  ,rti.transaction_date transaction_date
	  ,Decode(rti.source_document_code,
		  'INVENTORY',
		  13,
		  Decode(rti.source_document_code,
			 'PO',
			 1,
			 Decode(rti.source_document_code,
				'REQ',
				7,
				Decode(rti.source_document_code,
				       'RMA',
				       12,
				       -1)))) transaction_source_type_id
	  -- What to do in error condition?
	  ,rti.source_document_code transaction_source_name
	  ,Decode(rti.transaction_type,
		  'RETURN TO RECEIVING',
		  1,
		  Decode(rti.transaction_type,
			 'RETURN TO VENDOR',
			 1,
			 Decode(rti.transaction_type,
				'RETURN TO CUSTOMER',
				1,
				2))) receipt_issue_type
	  ,msnt.serial_attribute_category serial_attribute_category
	  ,msnt.origination_date origination_date
	  ,msnt.c_attribute1 c_attribute1
	  ,msnt.c_attribute2 c_attribute2
	  ,msnt.c_attribute3 c_attribute3
	  ,msnt.c_attribute4 c_attribute4
	  ,msnt.c_attribute5 c_attribute5
	  ,msnt.c_attribute6 c_attribute6
	  ,msnt.c_attribute7 c_attribute7
	  ,msnt.c_attribute8 c_attribute8
	  ,msnt.c_attribute9 c_attribute9
	  ,msnt.c_attribute10 c_attribute10
	  ,msnt.c_attribute11 c_attribute11
	  ,msnt.c_attribute12 c_attribute12
	  ,msnt.c_attribute13 c_attribute13
	  ,msnt.c_attribute14 c_attribute14
	  ,msnt.c_attribute15 c_attribute15
	  ,msnt.c_attribute16 c_attribute16
	  ,msnt.c_attribute17 c_attribute17
	  ,msnt.c_attribute18 c_attribute18
	  ,msnt.c_attribute19 c_attribute19
	  ,msnt.c_attribute20 c_attribute20
	  ,msnt.d_attribute1 d_attribute1
	  ,msnt.d_attribute2 d_attribute2
	  ,msnt.d_attribute3 d_attribute3
	  ,msnt.d_attribute4 d_attribute4
	  ,msnt.d_attribute5 d_attribute5
	  ,msnt.d_attribute6 d_attribute6
	  ,msnt.d_attribute7 d_attribute7
	  ,msnt.d_attribute8 d_attribute8
	  ,msnt.d_attribute9 d_attribute9
	  ,msnt.d_attribute10 d_attribute10
	  ,msnt.n_attribute1 n_attribute1
	  ,msnt.n_attribute2 n_attribute2
	  ,msnt.n_attribute3 n_attribute3
	  ,msnt.n_attribute4 n_attribute4
	  ,msnt.n_attribute5 n_attribute5
	  ,msnt.n_attribute6 n_attribute6
	  ,msnt.n_attribute7 n_attribute7
	  ,msnt.n_attribute8 n_attribute8
	  ,msnt.n_attribute9 n_attribute9
	  ,msnt.n_attribute10 n_attribute10
	  ,msnt.status_id status_id
	  ,msnt.territory_code territory_code
	  ,msnt.time_since_new time_since_new
	  ,msnt.cycles_since_new cycles_since_new
	  ,msnt.time_since_overhaul time_since_overhaul
	  ,msnt.cycles_since_overhaul cycles_since_overhaul
	  ,msnt.time_since_repair time_since_repair
	  ,msnt.cycles_since_repair cycles_since_repair
	  ,msnt.time_since_visit time_since_visit
	  ,msnt.cycles_since_visit cycles_since_visit
	  ,msnt.time_since_mark time_since_mark
	  ,msnt.cycles_since_mark cycles_since_mark
	  ,msnt.number_of_repairs number_of_repairs
	  from
	  mtl_serial_numbers_temp msnt
	  ,rcv_transactions_interface rti
	  where
	  msnt.product_code = 'RCV'
	  AND msnt.product_transaction_id = p_prod_txn_tmp_id
	  AND rti.interface_transaction_id = msnt.product_transaction_id;
BEGIN

   IF (l_debug = 1) THEN
      print_debug('CREATE_LOT_SERIAL_HISTORY: Entered with the following paramenters -', 1);
      print_debug('  p_prod_txn_tmp_id => ' || p_prod_txn_tmp_id, 1);
      print_debug('  p_prod_txn_id     => ' || p_prod_txn_id, 1);
   END IF;

   SAVEPOINT process_lot_serial_pub;

   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-10431';

   IF (l_debug = 1) THEN
      print_debug('CREATE_LOT_SERIAL_HISTORY: Processing MTLT...',1);
   END IF;

   INSERT INTO mtl_transaction_lot_numbers
     (
      transaction_id
      ,last_update_date
      ,last_updated_by
      ,creation_date
      ,created_by
      ,last_update_login
      ,inventory_item_id
      ,organization_id
      ,transaction_date
      ,transaction_source_id
      ,transaction_source_type_id
      ,transaction_source_name
      ,transaction_quantity
      ,primary_quantity
      ,lot_number
      ,serial_transaction_id
      ,description
      ,vendor_name
      ,supplier_lot_number
      ,origination_date
      ,date_code
      ,grade_code
      ,change_date
      ,maturity_date
      ,status_id
      ,retest_date
      ,age
      ,item_size
      ,color
      ,volume
      ,volume_uom
      ,place_of_origin
      ,best_by_date
      ,length
      ,length_uom
      ,width
      ,width_uom
      ,recycled_content
      ,thickness
      ,thickness_uom
      ,curl_wrinkle_fold
      ,lot_attribute_category
      ,c_attribute1
      ,c_attribute2
      ,c_attribute3
      ,c_attribute4
      ,c_attribute5
      ,c_attribute6
     ,c_attribute7
     ,c_attribute8
     ,c_attribute9
     ,c_attribute10
     ,c_attribute11
     ,c_attribute12
     ,c_attribute13
     ,c_attribute14
     ,c_attribute15
     ,c_attribute16
     ,c_attribute17
     ,c_attribute18
     ,c_attribute19
     ,c_attribute20
     ,d_attribute1
     ,d_attribute2
     ,d_attribute3
     ,d_attribute4
     ,d_attribute5
     ,d_attribute6
     ,d_attribute7
     ,d_attribute8
     ,d_attribute9
     ,d_attribute10
     ,n_attribute1
     ,n_attribute2
     ,n_attribute3
     ,n_attribute4
     ,n_attribute5
     ,n_attribute6
     ,n_attribute7
     ,n_attribute8
     ,n_attribute9
     ,n_attribute10
     ,vendor_id
     ,territory_code
     ,product_code
     ,product_transaction_id
     ,attribute_category
     ,attribute1
     ,attribute2
     ,attribute3
     ,attribute4
     ,attribute5
     ,attribute6
     ,attribute7
     ,attribute8
     ,attribute9
     ,attribute10
     ,attribute11
     ,attribute12
     ,attribute13
     ,attribute14
     ,attribute15 )
     SELECT
     mtlt.transaction_temp_id
     ,l_sysdate
     ,mtlt.last_updated_by
     ,l_sysdate
     ,mtlt.created_by
     ,-1
     ,rti.item_id
     ,rti.to_organization_id
     ,rti.transaction_date
     ,NULL
     ,Decode(rti.source_document_code,
	     'INVENTORY',
	     13,
	     Decode(rti.source_document_code,
		    'PO',
		    1,
		    Decode(rti.source_document_code,
			   'REQ',
			   7,
			   Decode(rti.source_document_code,
				  'RMA',
				  12,
				  -1))))
     ,rti.source_document_code
     ,mtlt.transaction_quantity
     ,mtlt.primary_quantity
     ,Ltrim(Rtrim(mtlt.lot_number))
     ,mtlt.serial_transaction_temp_id
     ,mtlt.description
     ,mtlt.vendor_name
     ,mtlt.supplier_lot_number
     ,mtlt.origination_date
     ,mtlt.date_code
     ,mtlt.grade_code
     ,mtlt.change_date
     ,mtlt.maturity_date
     ,mtlt.status_id
     ,mtlt.retest_date
     ,mtlt.age
     ,mtlt.item_size
     ,mtlt.color
     ,mtlt.volume
     ,mtlt.volume_uom
     ,mtlt.place_of_origin
     ,mtlt.best_by_date
     ,mtlt.length
     ,mtlt.length_uom
     ,mtlt.recycled_content
     ,mtlt.thickness
     ,mtlt.thickness_uom
     ,mtlt.width
     ,mtlt.width_uom
     ,mtlt.curl_wrinkle_fold
     ,mtlt.lot_attribute_category
     ,mtlt.c_attribute1
     ,mtlt.c_attribute2
     ,mtlt.c_attribute3
     ,mtlt.c_attribute4
     ,mtlt.c_attribute5
     ,mtlt.c_attribute6
     ,mtlt.c_attribute7
     ,mtlt.c_attribute8
     ,mtlt.c_attribute9
     ,mtlt.c_attribute10
     ,mtlt.c_attribute11
     ,mtlt.c_attribute12
     ,mtlt.c_attribute13
     ,mtlt.c_attribute14
     ,mtlt.c_attribute15
     ,mtlt.c_attribute16
     ,mtlt.c_attribute17
     ,mtlt.c_attribute18
     ,mtlt.c_attribute19
     ,mtlt.c_attribute20
     ,mtlt.d_attribute1
     ,mtlt.d_attribute2
     ,mtlt.d_attribute3
     ,mtlt.d_attribute4
     ,mtlt.d_attribute5
     ,mtlt.d_attribute6
     ,mtlt.d_attribute7
     ,mtlt.d_attribute8
     ,mtlt.d_attribute9
     ,mtlt.d_attribute10
     ,mtlt.n_attribute1
     ,mtlt.n_attribute2
     ,mtlt.n_attribute3
     ,mtlt.n_attribute4
     ,mtlt.n_attribute5
     ,mtlt.n_attribute6
     ,mtlt.n_attribute7
     ,mtlt.n_attribute8
     ,mtlt.n_attribute9
     ,mtlt.n_attribute10
     ,mtlt.vendor_id
     ,mtlt.territory_code
     ,'RCV'
     ,p_prod_txn_id
     ,mtlt.attribute_category
     ,mtlt.attribute1
     ,mtlt.attribute2
     ,mtlt.attribute3
     ,mtlt.attribute4
     ,mtlt.attribute5
     ,mtlt.attribute6
     ,mtlt.attribute7
     ,mtlt.attribute8
     ,mtlt.attribute9
     ,mtlt.attribute10
     ,mtlt.attribute11
     ,mtlt.attribute12
     ,mtlt.attribute13
     ,mtlt.attribute14
     ,mtlt.attribute15
     FROM
     mtl_transaction_lots_temp mtlt
     ,rcv_transactions_interface rti
     WHERE
     mtlt.product_transaction_id = p_prod_txn_tmp_id AND
     mtlt.product_code = 'RCV' AND
     rti.interface_transaction_id = p_prod_txn_tmp_id;

   l_progress := 'WMSINB-10664';

   IF (l_debug = 1) THEN
      print_debug('CREATE_LOT_SERIAL_HISTORY: MTLNs inserted.',1);
   END IF;

   FOR l_msnt IN msnt_cur LOOP
      IF (l_debug = 1) THEN
	 print_debug('CREATE_LOT_SERIAL_HISTORY:   Processing MSNT with fm_serial_number = '
		     || l_msnt.fm_serial_number ||
		     ' to_serial_number = ' || l_msnt.to_serial_number,1);
      END IF;

      l_progress := 'WMSINB-10677';
      inv_validate.number_from_sequence(l_msnt.fm_serial_number, l_temp_prefix, l_from_ser_number);
      l_progress := 'WMSINB-10679';
      inv_validate.number_from_sequence(l_msnt.to_serial_number
					,l_temp_prefix
					,l_to_ser_number);
      l_progress := 'WMSINB-10683';
      l_range_numbers  := l_to_ser_number - l_from_ser_number + 1;

      l_progress := 'WMSINB-10686';
      IF (l_serial_numbers.COUNT > 0) THEN
	 l_serial_numbers.DELETE;
      END IF;

      l_progress := 'WMSINB-10691';

      for j in 1 .. l_range_numbers loop
	 l_cur_ser_number  := l_from_ser_number + j - 1;

	 -- concatenate the serial number to be inserted
	 if (l_from_ser_number = -1
	     and l_to_ser_number = -1) then
	    l_cur_serial_number  := l_msnt.fm_serial_number;
	  else
	    l_cur_serial_number  := substr(l_msnt.fm_serial_number, 1, length(l_msnt.fm_serial_number) -
					   length(l_cur_ser_number)) || l_cur_ser_number;
	 end if;

	 IF (l_debug = 1) THEN
	    print_debug('CREATE_LOT_SERIAL_HISTORY:    Cancatenated serial_number '
			|| l_cur_serial_number,1);
	 END IF;

	 l_serial_numbers(j) := l_cur_serial_number;

      end loop;

      l_progress := 'WMSINB-10714';

      forall  j IN 1 .. l_serial_numbers.COUNT
	INSERT INTO mtl_unit_transactions
	( transaction_id
	  ,last_update_date
	  ,last_updated_by
	  ,creation_date
	  ,created_by
	  ,last_update_login
	  ,serial_number
	  ,inventory_item_id
	  ,organization_id
	  ,subinventory_code
	  ,locator_id
	  ,transaction_date
	  ,transaction_source_id
	  ,transaction_source_type_id
	  ,transaction_source_name
	  ,receipt_issue_type
	  ,customer_id
	  ,ship_id
	  ,serial_attribute_category
	  ,origination_date
	  ,c_attribute1
	  ,c_attribute2
	  ,c_attribute3
	  ,c_attribute4
	  ,c_attribute5
	  ,c_attribute6
	  ,c_attribute7
	  ,c_attribute8
	  ,c_attribute9
	  ,c_attribute10
	  ,c_attribute11
	  ,c_attribute12
	  ,c_attribute13
	  ,c_attribute14
	  ,c_attribute15
	  ,c_attribute16
	  ,c_attribute17
	  ,c_attribute18
	  ,c_attribute19
	  ,c_attribute20
	  ,d_attribute1
	  ,d_attribute2
	  ,d_attribute3
	  ,d_attribute4
	  ,d_attribute5
	  ,d_attribute6
	  ,d_attribute7
	  ,d_attribute8
	  ,d_attribute9
	  ,d_attribute10
	  ,n_attribute1
	  ,n_attribute2
	  ,n_attribute3
	  ,n_attribute4
	,n_attribute5
	,n_attribute6
	,n_attribute7
	,n_attribute8
	,n_attribute9
	,n_attribute10
	,status_id
	,territory_code
	,time_since_new
	,cycles_since_new
	,time_since_overhaul
	,cycles_since_overhaul
	,time_since_repair
	,cycles_since_repair
	,time_since_visit
	,cycles_since_visit
	,time_since_mark
	,cycles_since_mark
	,number_of_repairs
	,product_code
	,product_transaction_id )
	VALUES
	( l_msnt.transaction_temp_id
	  ,l_sysdate
	  ,l_msnt.last_updated_by
	  ,l_sysdate
	  ,l_msnt.created_by
	  ,-1
	  ,l_serial_numbers(j)
	  ,l_msnt.inventory_item_id
	  ,l_msnt.organization_id
	  ,NULL  -- sub
	  ,NULL  -- loc
	  ,l_msnt.transaction_date
	  ,NULL  -- txn souce id
	  ,l_msnt.transaction_source_type_id
	  ,l_msnt.transaction_source_name
	  ,l_msnt.receipt_issue_type
	  ,NULL  -- customer id
	  ,NULL  -- ship_id
	  ,l_msnt.serial_attribute_category
	  ,l_msnt.origination_date
	  ,l_msnt.c_attribute1
	  ,l_msnt.c_attribute2
	  ,l_msnt.c_attribute3
	  ,l_msnt.c_attribute4
	  ,l_msnt.c_attribute5
	  ,l_msnt.c_attribute6
	  ,l_msnt.c_attribute7
	  ,l_msnt.c_attribute8
	  ,l_msnt.c_attribute9
	  ,l_msnt.c_attribute10
	  ,l_msnt.c_attribute11
	  ,l_msnt.c_attribute12
	  ,l_msnt.c_attribute13
	  ,l_msnt.c_attribute14
	  ,l_msnt.c_attribute15
	  ,l_msnt.c_attribute16
	  ,l_msnt.c_attribute17
	  ,l_msnt.c_attribute18
	  ,l_msnt.c_attribute19
	  ,l_msnt.c_attribute20
	  ,l_msnt.d_attribute1
	,l_msnt.d_attribute2
	,l_msnt.d_attribute3
	,l_msnt.d_attribute4
	,l_msnt.d_attribute5
	,l_msnt.d_attribute6
	,l_msnt.d_attribute7
	,l_msnt.d_attribute8
	,l_msnt.d_attribute9
	,l_msnt.d_attribute10
	,l_msnt.n_attribute1
	,l_msnt.n_attribute2
	,l_msnt.n_attribute3
	,l_msnt.n_attribute4
	,l_msnt.n_attribute5
	,l_msnt.n_attribute6
	,l_msnt.n_attribute7
	,l_msnt.n_attribute8
	,l_msnt.n_attribute9
	,l_msnt.n_attribute10
	,l_msnt.status_id
	,l_msnt.territory_code
	,l_msnt.time_since_new
	,l_msnt.cycles_since_new
	,l_msnt.time_since_overhaul
	,l_msnt.cycles_since_overhaul
	,l_msnt.time_since_repair
	,l_msnt.cycles_since_repair
	,l_msnt.time_since_visit
	,l_msnt.cycles_since_visit
	,l_msnt.time_since_mark
	,l_msnt.cycles_since_mark
	,l_msnt.number_of_repairs
	,'RCV'
	,p_prod_txn_id );

      l_progress := 'WMSINB-10870';

   END LOOP;

   IF (l_debug = 1) THEN
      print_debug('CREATE_LOT_SERIAL_HISTORY: Deleting MTLI/MSNT',1);
   END IF;

   --Delete MTLT/MSNT here
   DELETE FROM mtl_transaction_lots_temp
     WHERE product_code = 'RCV'
     AND product_transaction_id = p_prod_txn_tmp_id;

   l_progress := 'WMSINB-10883';

   DELETE FROM mtl_serial_numbers_temp
     WHERE product_code = 'RCV'
     AND product_transaction_id = p_prod_txn_tmp_id;

   IF (l_debug = 1) THEN
      print_debug('CREATE_LOT_SERIAL_HISTORY: Exited',1);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      IF (l_debug = 1) THEN
	 print_debug('CREATE_LOT_SERIAL_HISTORY: Exception occured aftr l_progress = '
		     || l_progress,1);
      END IF;
      x_return_status := g_ret_sts_unexp_error;
      --fnd_msg_pub.count_and_get
      --  (   p_count                       => x_msg_count
      --      ,p_data                       => x_msg_data
      --      );
      ROLLBACK TO process_lot_serial_pub;
END create_lot_serial_history;

PROCEDURE cancel_asn
  (x_return_status OUT nocopy VARCHAR2
   ,x_msg_count OUT nocopy NUMBER
   ,x_msg_data OUT nocopy VARCHAR2
   ,p_shipment_header_id IN NUMBER
   ,p_shipment_line_id IN NUMBER
   ,p_primary_quantity IN NUMBER
)
  IS
-- Increased lot size to 80 Char - Mercy Thomas - B4625329
     TYPE varchar30_tb_tp IS TABLE OF VARCHAR2(80) INDEX BY BINARY_INTEGER;
     TYPE number_tb_tp IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
     l_serial_numbers varchar30_tb_tp;
     l_lot_numbers varchar30_tb_tp;
     l_quantitys number_tb_tp;

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR (15) := '0';
     l_asn_lpn_id NUMBER;
     l_item_id NUMBER;
     l_quantity_to_unpack NUMBER;
     l_lot_control_code NUMBER;
     l_serial_number_control_code NUMBER;
     l_lpn_context NUMBER;
     l_org_id NUMBER;
     l_uom_code VARCHAR2(3);
     l_quantity_received NUMBER;
     l_unit_of_measure VARCHAR2(25);
     l_prim_uom_code VARCHAR2(3);
     l_revision VARCHAR2(3);

     -- OPMConvergence
     l_sec_lot_qty            number_tb_tp;
     l_sec_uom_code           VARCHAR2(3);
     l_sec_uom_code_2         VARCHAR2(3);
     l_sec_quantity_to_unpack NUMBER;
     l_sec_unit_of_measure    VARCHAR2(25);
     -- OPMConvergence

     l_mol_res_in  cas_mol_rec_tb_tp;
     l_mol_res_out cas_mol_rec_tb_tp;
     l_po_header_id NUMBER;
     l_po_line_location_id NUMBER;
     l_prim_qty_to_unpack NUMBER;
     l_procedure_name         VARCHAR2(30) := 'CANCEL_ASN';
     l_serials_count    NUMBER := 0; --added for bug 6708102
     l_lots_count       NUMBER := 0; --added for bug 6708102
BEGIN
   IF (l_debug = 1) THEN
      print_debug('CANCEL_ASN: Entering...', 1);
      print_debug('             p_shipment_header_id => '||
		  p_shipment_header_id,1);
      print_debug('             p_shipment_lind_id   => '||
		  p_shipment_line_id,1);
   END IF;

   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-10945';

   BEGIN
      SELECT
	rsl.asn_lpn_id asn_lpn_id
	,rsl.item_id item_id
	,rsl.item_revision revision
	,rsl.to_organization_id organization_id
	,rsl.unit_of_measure unit_of_measure
	,msi.primary_uom_code prim_uom_code
	,(Nvl(rsl.quantity_shipped,0) - Nvl(rsl.quantity_received,0)) quantity_to_unpack
   -- OPMConvergence
	,rsl.secondary_unit_of_measure sec_unit_of_measure
	,msi.secondary_uom_code sec_uom_code
	,(Nvl(rsl.secondary_quantity_shipped,0) - Nvl(rsl.secondary_quantity_received,0)) sec_quantity_to_unpack
        -- OPMConvergence
	,Nvl(rsl.quantity_received,0)
    ,msi.lot_control_code lot_control_code
	,msi.serial_number_control_code serial_number_control_code
--	,wlpn.lpn_context lpn_context
	,rsl.po_line_location_id
	,rsl.po_header_id
	INTO
	l_asn_lpn_id
	,l_item_id
	,l_revision
	,l_org_id
	,l_unit_of_measure
	,l_prim_uom_code
	,l_quantity_to_unpack
         -- OPMConvergence
	,l_sec_unit_of_measure
	,l_sec_uom_code
	,l_sec_quantity_to_unpack
         -- OPMConvergence
	,l_quantity_received
    ,l_lot_control_code
	,l_serial_number_control_code
--	,l_lpn_context
	,l_po_line_location_id
	,l_po_header_id
	FROM
	rcv_shipment_lines rsl
	,mtl_system_items msi
	WHERE
	rsl.shipment_line_id = p_shipment_line_id
	AND rsl.shipment_header_id = p_shipment_header_id
	AND msi.inventory_item_id = rsl.item_id
	AND msi.organization_id = rsl.to_organization_id;
   EXCEPTION
      --BUG 3387020
      WHEN no_data_found THEN
	 IF (l_debug = 1) THEN
	    print_debug('No data found for shipment_line_id: ' ||
			p_shipment_line_id, 1);
	 END IF;
	 l_progress := 'WMSINB-10985';
	 l_asn_lpn_id := NULL;
      WHEN OTHERS THEN
	 IF (l_debug = 1) THEN
	    print_debug('Error retrieving shipment line with id: ' ||
			p_shipment_line_id, 1);
	 END IF;
	 l_progress := 'WMSINB-10986';
	 RAISE fnd_api.g_exc_error;
   END;

   l_progress := 'WMSINB-10990';

   --BUG 3387020
   IF l_asn_lpn_id IS NOT NULL THEN
      BEGIN
	 SELECT lpn_context
	   INTO l_lpn_context
	   FROM wms_license_plate_numbers
	   WHERE lpn_id = l_asn_lpn_id;
      EXCEPTION
	 WHEN OTHERS THEN
	    IF (l_debug = 1) THEN
	       print_debug('Error retrieving LPN context!',1);
	    END IF;
	    l_progress := 'WMSINB-10009';
	    RAISE fnd_api.g_exc_error;
      END;
    ELSE
      l_lpn_context := NULL;
   END IF;

   IF (Nvl(l_lpn_context,-1) = 7) THEN
      IF (l_debug = 1) THEN
	 print_debug('CANCEL_ASN: LPN Context is 7',
		     1);
      END IF;

      IF (l_serial_number_control_code IN (2, 5)) THEN

	 l_progress := 'WMSINB-11000';
	 IF (l_debug = 1) THEN
	    print_debug('CANCEL_ASN: item is serial_controlled', 1);
	 END IF;

	 BEGIN
	    SELECT
	      serial_num
	      ,lot_num
	      BULK collect INTO
	      l_serial_numbers
	      ,l_lot_numbers
	      FROM
	      rcv_serials_supply
	      WHERE
	      shipment_line_id = p_shipment_line_id
	      AND supply_type_code = 'SHIPMENT';
	 EXCEPTION
	    WHEN OTHERS THEN
	       IF (l_debug = 1) THEN
		  print_debug('CANCEL_ASN: Error retrieving serial numbers'
			      ,1);
	       END IF;
	 END;

	 l_progress := 'WMSINB-11025';

	 FOR i IN 1 .. l_serial_numbers.COUNT LOOP
	    wms_container_pvt.packunpack_container
	      (p_api_version       =>   1.0
	       ,p_validation_level =>  fnd_api.g_valid_level_none
	       ,p_lpn_id           =>   l_asn_lpn_id
	       ,p_operation        =>   2 -- UNPACK
	       ,p_organization_id  =>   l_org_id
	       ,p_content_item_id  =>   l_item_id
	       ,p_revision         =>   l_revision
	       ,p_lot_number       =>   l_lot_numbers(i)
	       ,p_from_serial_number => l_serial_numbers(i)
	       ,p_to_serial_number =>   l_serial_numbers(i)
	       ,p_uom              =>   l_prim_uom_code
	       ,p_commit           =>   fnd_api.g_true --??
	       ,x_return_status    =>   x_return_status
	       ,x_msg_count        =>   x_msg_count
	       ,x_msg_data         =>   x_msg_data
	       );
	    IF (x_return_status <> g_ret_sts_success) THEN
	       IF (l_debug = 1) THEN
		  print_debug('CANCEL_ASN: packunpack failed, but continue anyway', 1);
	       END IF;
	    END IF;
	 END LOOP;

	 IF (l_serial_numbers.COUNT = 0) THEN
	    l_progress := 'WMSINB-11052';
	    BEGIN
	       SELECT uom_code
		 into l_uom_code
		 FROM mtl_item_uoms_view
		 WHERE organization_id = l_org_id
		 AND inventory_item_id = l_item_id
		 AND unit_of_measure = l_unit_of_measure;
	    EXCEPTION
	       WHEN OTHERS THEN
		  IF (l_debug = 1) THEN
		     print_debug('CANCEL_ASN: Error retrieving uom_code', 1);
		  END IF;
		  l_progress := 'WMSINB-11065';
		  RAISE fnd_api.g_exc_error;
	    END;

	    l_progress := 'WMSINB-11068';
	    IF (l_debug = 1) THEN
	       print_debug('CANCEL_ASN: Serial controlled, but no serial '
			   || 'Calling pup ',1);
	    END IF;

	    wms_container_pvt.packunpack_container
	      (p_api_version       =>   1.0
	       ,p_validation_level =>  fnd_api.g_valid_level_none
	       ,p_lpn_id           =>   l_asn_lpn_id
	       ,p_operation        =>   2 -- UNPACK
	       ,p_organization_id  =>   l_org_id
	       ,p_content_item_id  =>   l_item_id
	       ,p_revision         =>   l_revision
	       ,p_quantity         =>   l_quantity_to_unpack
	       ,p_uom              =>   l_uom_code
	       ,p_commit           =>   fnd_api.g_true --??
	       ,x_return_status    =>   x_return_status
	       ,x_msg_count        =>   x_msg_count
	       ,x_msg_data         =>   x_msg_data
	       );
	    IF (x_return_status <> g_ret_sts_success) THEN
	       IF (l_debug = 1) THEN
		  print_debug('CANCEL_ASN: packunpack failed, but continue anyway', 1);
	       END IF;
	    END IF;
	 END IF;
       ELSIF (l_lot_control_code = 2) THEN
	    l_progress := 'WMSINB-11096';
	    IF (l_debug = 1) THEN
	       print_debug('CANCEL_ASN: Item is lot controlled',1);
	    END IF;

	    BEGIN
	       SELECT
		 lot_num
		 ,SUM(quantity)
                  -- OPMConvergence
		 ,SUM(secondary_quantity)
                  -- OPMConvergence
		 bulk collect INTO
		 l_lot_numbers
		 ,l_quantitys
                  -- OPMConvergence
                 ,l_sec_lot_qty
                  -- OPMConvergence
		 FROM
		 rcv_lots_supply
		 WHERE
		 shipment_line_id = p_shipment_line_id
		 AND supply_type_code = 'SHIPMENT'
		 GROUP BY lot_num;
	    EXCEPTION
	       WHEN OTHERS THEN
		  IF (l_debug = 1) THEN
		     print_debug('CANCEL_ASN: Error retrieving lot numbers'
				 ,1);
		  END IF;
	    END;

	    l_progress := 'WMSINB-11121';

	    FOR i IN 1 .. l_lot_numbers.COUNT LOOP
	       wms_container_pvt.packunpack_container
		 (p_api_version       =>   1.0
		  ,p_validation_level =>  fnd_api.g_valid_level_none
		  ,p_lpn_id           =>   l_asn_lpn_Id
		  ,p_operation        =>   2 -- UNPACK
		  ,p_organization_id  =>   l_org_id
		  ,p_content_item_id  =>   l_item_id
		  ,p_revision         =>   l_revision
		  ,p_lot_number       =>   l_lot_numbers(i)
		  ,p_quantity         =>   l_quantitys(i)
		  ,p_uom              =>   l_prim_uom_code
		  ,p_commit           =>   fnd_api.g_true
		  ,x_return_status    =>   x_return_status
		  ,x_msg_count        =>   x_msg_count
		  ,x_msg_data         =>   x_msg_data
                   -- OPMConvergence
                  ,p_sec_uom          =>   l_sec_uom_code
                  ,p_sec_quantity     =>   l_sec_lot_qty(i)
                   -- OPMConvergence
		  );
	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('CANCEL_ASN: packunpack failed, but continue anyway', 1);
		  END IF;
	       END IF;
	    END LOOP;

	    IF (l_lot_numbers.COUNT = 0) THEN
	       l_progress := 'WMSINB-11148';
	       BEGIN
		  SELECT uom_code
		    into l_uom_code
		    FROM mtl_item_uoms_view
		    WHERE organization_id = l_org_id
		    AND inventory_item_id = l_item_id
		    AND unit_of_measure = l_unit_of_measure;
	       EXCEPTION
		  WHEN OTHERS THEN
		     IF (l_debug = 1) THEN
			print_debug('CANCEL_ASN: Error retrieving uom_code', 1);
		     END IF;
		     l_progress := 'WMSINB-11161';
		     RAISE fnd_api.g_exc_error;
	       END;

               -- OPMConvergence
          IF l_sec_unit_of_measure IS NOT NULL THEN

	          BEGIN
	             SELECT uom_code
		          INTO   l_sec_uom_code_2
		          FROM   mtl_item_uoms_view
		          WHERE  organization_id = l_org_id
		          AND    inventory_item_id = l_item_id
		          AND    unit_of_measure = l_sec_unit_of_measure;
	          EXCEPTION
	             WHEN OTHERS THEN
		            IF (l_debug = 1) THEN
		               print_debug('CANCEL_ASN: Error retrieving sec_uom_code'||sqlerrm, 1);
		            END IF;
		          l_progress := 'WMSINB-11161';
		          RAISE fnd_api.g_exc_error;
	          END;

          END IF;
               -- OPMConvergence

	       l_progress := 'WMSINB-11164';
	       IF (l_debug =1 ) THEN
		  print_debug('CANCEL_ASN: Lot controlled, but no lot row',1);
	       END IF;

	       wms_container_pvt.packunpack_container
		 (p_api_version       =>   1.0
		  ,p_validation_level =>  fnd_api.g_valid_level_none
		  ,p_lpn_id           =>   l_asn_lpn_id
		  ,p_operation        =>   2 -- UNPACK
		  ,p_organization_id  =>   l_org_id
		  ,p_content_item_id  =>   l_item_id
		  ,p_revision         =>   l_revision
		  ,p_quantity         =>   l_quantity_to_unpack
		  ,p_uom              =>   l_uom_code
		  ,p_commit           =>   fnd_api.g_true --??
		  ,x_return_status    =>   x_return_status
		  ,x_msg_count        =>   x_msg_count
		  ,x_msg_data         =>   x_msg_data
                  -- OPMConvergence
		  ,p_sec_quantity     =>   l_sec_quantity_to_unpack
		  ,p_sec_uom          =>   l_sec_uom_code_2
                  -- OPMConvergence
		  );
	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('CANCEL_ASN: packunpack failed, but continue anyway', 1);
		  END IF;
	       END IF;
	    END IF;

       ELSE -- neither lot/serial controlled
	       IF (l_debug = 1) THEN
		  print_debug('CANCEL_ASN: Item is neither lot or serial controlled',
			      1);
	       END IF;

	       l_progress := 'WMSINB-11197';

	       BEGIN
		  SELECT uom_code
		    into l_uom_code
		    FROM mtl_item_uoms_view
		    WHERE organization_id = l_org_id
		    AND inventory_item_id = l_item_id
		    AND unit_of_measure = l_unit_of_measure;
	       EXCEPTION
		  WHEN OTHERS THEN
		     IF (l_debug = 1) THEN
			print_debug('CANCEL_ASN: Error retrieving uom_code', 1);
		     END IF;
		     l_progress := 'WMSINB-11211';
		     RAISE fnd_api.g_exc_error;
	       END;

               -- OPMConvergence
          IF l_sec_unit_of_measure IS NOT NULL THEN

	          BEGIN
	             SELECT uom_code
		          INTO   l_sec_uom_code_2
		          FROM   mtl_item_uoms_view
		          WHERE  organization_id = l_org_id
		          AND    inventory_item_id = l_item_id
		          AND    unit_of_measure = l_sec_unit_of_measure;
	          EXCEPTION
	             WHEN OTHERS THEN
		          IF (l_debug = 1) THEN
		            print_debug('CANCEL_ASN: Error retrieving sec_uom_code'||sqlerrm, 1);
		          END IF;
		          l_progress := 'WMSINB-11211';
		          RAISE fnd_api.g_exc_error;
	          END;

          END IF;
               -- OPMConvergence
           l_quantity_to_unpack := p_primary_quantity - l_quantity_received;
	       l_progress := 'WMSINB-11215';

	       wms_container_pvt.packunpack_container
		 (p_api_version       =>   1.0
		  ,p_validation_level =>  fnd_api.g_valid_level_none
		  ,p_lpn_id           =>   l_asn_lpn_id
		  ,p_operation        =>   2 -- UNPACK
		  ,p_organization_id  =>   l_org_id
		  ,p_content_item_id  =>   l_item_id
		  ,p_revision         =>   l_revision
		  ,p_quantity         =>   l_quantity_to_unpack
		  ,p_uom              =>   l_uom_code
		  ,p_commit           =>   fnd_api.g_true --??
		  ,x_return_status    =>   x_return_status
		  ,x_msg_count        =>   x_msg_count
		  ,x_msg_data         =>   x_msg_data
                  -- OPMConvergence
		  ,p_sec_quantity     =>   l_sec_quantity_to_unpack
		  ,p_sec_uom          =>   l_sec_uom_code_2
                  -- OPMConvergence
		  );
	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('CANCEL_ASN: packunpack failed, but continue anyway', 1);
		  END IF;
	       END IF;
      END IF; -- end if l_serial_control in ( 2, 5)
   END IF;  -- end if (l_lpn_context = 7)

   IF (l_debug = 1) THEN
      print_debug('CANCEL_ASN: CALLING RSV API',1);
      print_debug('l_org_id               => '||l_org_id,1);
      print_debug('l_item_id              => '||l_item_id,1);
      print_debug('l_revision             => '||l_revision,1);
      print_debug('l_primary_uom          => '||l_prim_uom_code,1);
      print_debug('l_po_header_id         => '||l_po_header_id,1);
      print_debug('l_po_line_location_id  => '||l_po_line_location_id,1);
      print_debug('p_shipment_line_id     => '||p_shipment_line_id,1);
   END IF;

   l_mol_res_in(1).transaction_type       := 'CANCEL';
   l_mol_res_in(1).organization_id        := l_org_id;
   l_mol_res_in(1).inventory_item_id      := l_item_id;
   l_mol_res_in(1).item_revision          := l_revision;
   l_mol_res_in(1).primary_uom_code       := l_prim_uom_code;
   l_mol_res_in(1).po_header_id           := l_po_header_id;
   l_mol_res_in(1).po_line_location_id    := l_po_line_location_id;
   l_mol_res_in(1).shipment_line_id       := p_shipment_line_id;

   INV_RCV_RESERVATION_UTIL.maintain_reservations
     (x_return_status => x_return_status
      ,x_msg_count     => x_msg_count
      ,x_msg_data      => x_msg_data
      ,x_mol_tb        => l_mol_res_out
      ,p_cas_mol_tb    => l_mol_res_in
      );

   IF (l_debug = 1) THEN
      print_debug('CANCEL_ASN - rsv api returns:'||x_return_status,1);
   END IF;

   IF (x_return_status <> g_ret_sts_success) THEN
      l_progress := 'WMSINB-14998';
      RAISE FND_API.G_EXC_ERROR;
   END IF;

   /* ******************************************************
     BUG 6708102 by kagupta

     Description: Following code added to handle the proper
                  deletion of the serials and lots
                  from rcv and updation of msn.
    *******************************************************
   */
  IF (l_debug = 1) THEN
     l_progress := 'WMSINB-14999';
     print_debug('CANCEL_ASN - serial/lot updation:'||l_progress,1);
  END IF;

   SELECT Count(*)
   INTO l_serials_count
   FROM rcv_serials_supply
   WHERE shipment_line_id = p_shipment_line_id
   AND supply_type_code = 'SHIPMENT';

   SELECT Count(*)
   INTO l_lots_count
   FROM rcv_lots_supply
   WHERE shipment_line_id = p_shipment_line_id
   AND supply_type_code = 'SHIPMENT';

   IF (l_debug = 1) THEN
       l_progress := 'WMSINB-15000';
       print_debug('CANCEL_ASN - serial/lot updation:'||l_progress,1);
   END IF;

   IF l_serials_count > 0  THEN

    UPDATE mtl_serial_numbers
    SET current_status  = 1,
    group_mark_id = NULL,
    line_mark_id = NULL,
    lot_line_mark_id = NULL
    WHERE inventory_item_id = l_item_id
    AND current_organization_id = l_org_id
    AND serial_number IN (SELECT serial_number
                          FROM rcv_serials_supply
                          WHERE shipment_line_id = p_shipment_line_id
                          AND supply_type_code = 'SHIPMENT')
    AND current_status = 5;


    DELETE FROM rcv_serials_supply
    WHERE shipment_line_id = p_shipment_line_id
    AND supply_type_code = 'SHIPMENT';
   END IF;

    IF (l_debug = 1) THEN
        l_progress := 'WMSINB-15001';
        print_debug('CANCEL_ASN - serial/lot updation:'||l_progress,1);
    END IF;

   IF l_lots_count > 0  THEN

    DELETE FROM rcv_lots_supply
    WHERE shipment_line_id = p_shipment_line_id
    AND supply_type_code = 'SHIPMENT';

   END IF;

   IF (l_debug = 1) THEN
       l_progress := 'WMSINB-15002';
       print_debug('CANCEL_ASN - serial/lot updation:'||l_progress,1);
   END IF;
   /* ****************BUG 6708071 ENDS ********************/

   IF (l_debug = 1) THEN
      print_debug('CANCEL_ASN: Exiting cancel_asn',1);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      IF (l_debug = 1) THEN
	 print_debug('CANCEL_ASN: Exception ocurred after l_progress = ' ||
		     l_progress,1);
      END IF;
      fnd_message.set_name('INV', 'INV_CANCEL_ASN_FAIL');
      fnd_msg_pub.ADD;
      ROLLBACK TO cancel_asn_pub;
      --	fnd_msg_pub.count_and_get(p_count => x_msg_count, p_data =>
      --				  x_msg_data);
      x_return_status  := g_ret_sts_unexp_error;
END cancel_asn;

--
-- This Procedue Packs Marterial into LPN
-- IF ( l_lot_control_code > 1 AND l_serial_control_code <> 1 ) THEN -- CASE FOR LOT/SERIAL CONTROLLED
-- Elsif ( l_lot_control_code > 1 and l_serial_control_code <> 1)  THEN -- CASE FOR LOT CONTROLLED ONLY
-- Elsif (l_lot_control_code =1 and l_serial_control_code <> 1 ) -- CASE FOR SERIAL CONTROLLED ONLY
-- ELse -- CASE FOR VANILA ITEM
-- End if;

Procedure PackUnpack_wrapper( x_return_status               OUT NOCOPY VARCHAR2
			      ,x_msg_count                   OUT NOCOPY NUMBER
			      ,x_msg_data                    OUT NOCOPY VARCHAR2
			      ,p_lot_control_code            IN NUMBER default NULL
			      ,p_serial_control_code         IN NUMBER default NULL
			      ,p_product_txn_id              IN NUMBER
			      ,p_product_code                IN VARCHAR2
			      ,p_lpn_id                      IN NUMBER
			      ,p_content_lpn_id              IN NUMBER
			      ,p_content_item_id             IN NUMBER
			      ,p_content_item_desc           IN VARCHAR2
			      ,p_revision                    IN VARCHAR2
			      ,p_primary_quantity            IN NUMBER
			      ,p_primary_uom                 IN VARCHAR2
			      ,p_organization_id             IN NUMBER
			      ,p_operation                   IN NUMBER default 1
			      ,p_cost_group_id               IN NUMBER
			      ,p_source_type_id              IN NUMBER
			      ,p_source_header_id            IN NUMBER
                              ,p_source_name                 IN VARCHAR2
                              ,p_source_line_id              IN NUMBER
                              ,p_source_line_detail_id       IN NUMBER
                              ,p_auto_unnest_empty_lpns      IN NUMBER DEFAULT 1
                               -- OPMConvergence
                              ,p_sec_quantity                IN NUMBER DEFAULT NULL
                              ,p_sec_uom                     IN VARCHAR2 DEFAULT NULL
                               -- OPMConvergence
                               -- R12
                              ,p_txn_quantity                IN NUMBER DEFAULT NULL
                              ,p_txn_uom_code                IN VARCHAR2 DEFAULT NULL
							  ,p_ignore_item_controls        IN  NUMBER :=2 -- 12610461
                              ) is
     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';

     l_total_lot_qty    NUMBER := 0;
     l_total_ser_qty NUMBER := 0;

     l_procedure_name VARCHAR2(30) := 'PACKUNPACK_WRAPPER';

BEGIN

   -- Initialize API return status to success

   x_return_status  := g_ret_sts_success;

   l_progress := 'WMSINB-11301';

   -- GET the TOTAL LOT QTY
   if p_lot_control_code > 1 then
BEGIN
   l_progress := 'WMSINB-11306';
   SELECT Nvl(SUM(transaction_quantity),0)
     INTO l_total_lot_qty
     FROM mtl_transaction_lots_temp
     WHERE product_code = p_product_code
     AND product_transaction_id = p_product_txn_id;
END;
   End if;

   IF (l_debug = 1) THEN
      print_debug('PACKUNPACK_WRAPPER - Lot Control code:'||p_lot_control_code,1);
      print_debug('PACKUNPACK_WRAPPER - Total Lot Qty:'||l_total_lot_qty,1);
   END IF;

   -- GET the TOTAL SERIAL QTY

   if nvl(p_serial_control_code,1) <> 1 then
      BEGIN
	 l_progress := 'WMSINB-11324';
	 SELECT Nvl(SUM(inv_serial_number_pub.get_serial_diff(fm_serial_number,to_serial_number)),0)
	   INTO l_total_ser_qty
	   FROM mtl_serial_numbers_temp
	   WHERE product_code = p_product_code
	   AND product_transaction_id = p_product_txn_id;
      END;
   End if;

   IF (l_debug = 1) THEN
      print_debug('PACKUNPACK_WRAPPER - Serial Control code:'||p_serial_control_code,1);
      print_debug('PACKUNPACK_WRAPPER - Total Serial Qty:'||l_total_ser_qty,1);
   END IF;

   IF ( p_lot_control_code > 1 and l_total_lot_qty > 0 ) then
      l_progress := 'WMSINB-11339';
      if ( nvl(p_serial_control_code,1) <> 1 and l_total_ser_qty > 0 ) then -- CASE FOR BOTH LOT and SERIAL CONTROLLED ITEM
	 -- Loop Through MTLT MSNT and INSERT
	 l_progress := 'WMSINB-11342';
	 For l_lot_rec in ( select Ltrim(Rtrim(lot_number)) lot_number
			    , primary_quantity
			    , serial_transaction_temp_id
			    from mtl_transaction_lots_temp mtlt
			    where mtlt.product_transaction_id = p_product_txn_id
			    and mtlt.product_code = 'RCV'
			    )
	   Loop
	      l_progress := 'WMSINB-11351';
	      For l_serial_rec in ( select fm_serial_number
				    , to_serial_number
				    , inv_serial_number_pub.get_serial_diff(fm_serial_number,to_serial_number) serial_quantity
				    from mtl_serial_numbers_temp msnt
				    where msnt.transaction_temp_id = l_lot_rec.serial_transaction_temp_id
				    and msnt.product_transaction_id = p_product_txn_id
				    and msnt.product_code = 'RCV'
				    )
		Loop
		   l_progress := 'WMSINB-11361';
		   wms_container_pvt.packunpack_container(p_api_version  => 1.0
							  ,x_return_status               => x_return_status
							  ,x_msg_count                   => x_msg_count
							  ,x_msg_data                    => x_msg_data
							  ,p_lpn_id                      => p_lpn_id
							  ,p_content_lpn_id              => p_content_lpn_id
							  ,p_content_item_id             => p_content_item_id
							  ,p_content_item_desc           => p_content_item_desc
							  ,p_revision                    => p_revision
							  ,p_lot_number                  => l_lot_rec.lot_number
							  ,p_from_serial_number          => l_serial_rec.fm_serial_number
							  ,p_to_serial_number            => l_serial_rec.to_serial_number
							  ,p_quantity                    => l_serial_rec.serial_quantity
							  ,p_uom                         => p_primary_uom
							  ,p_organization_id             => p_organization_id
							  ,p_subinventory                => null
							  ,p_locator_id                  => null
							  ,p_enforce_wv_constraints      => null
		     ,p_operation                   => p_operation
		     ,p_cost_group_id               => p_cost_group_id
		     ,p_source_type_id              => p_source_type_id
		     ,p_source_header_id            => p_source_header_id
		     ,p_source_name                 => p_source_name
		     ,p_source_line_id              => p_source_line_id
		     ,p_source_line_detail_id       => p_source_line_detail_id
		     ,p_validation_level            => fnd_api.g_valid_level_none
   --Bug #3457106    ,p_concurrent_pack             => 1
		     ,p_auto_unnest_empty_lpns => p_auto_unnest_empty_lpns
			 ,p_ignore_item_controls   => p_ignore_item_controls);

		   l_progress := 'WMSINB-11390';

		   if x_return_status <> G_RET_STS_SUCCESS Then
		      -- MSG no new message just add the one on stack
		      -- Check the Error Status from this call
		      l_progress := 'WMSINB-11395';
		      RAISE FND_API.G_EXC_ERROR;
		   End if;

		End Loop;
	   End Loop;

       else -- CASE FOR JUST LOT CONTROLLED ITEM
	 -- Loop Through MTLT And INSERT
	 l_progress := 'WMSINB-11404';
	 For l_lot_rec in ( select Ltrim(Rtrim(lot_number)) lot_number
			    , primary_quantity
                            -- R12
                            , transaction_quantity
                            -- R12
                            -- OPMConvergence
                            , secondary_quantity
                             -- OPMConvergence
			    from mtl_transaction_lots_temp mtlt
			    where mtlt.product_transaction_id = p_product_txn_id
			    and mtlt.product_code = 'RCV'
			    )
	   Loop
	      l_progress := 'WMSINB-11412';
	      wms_container_pvt.packunpack_container(p_api_version  => 1.0
						     ,x_return_status               => x_return_status
						     ,x_msg_count                   => x_msg_count
						     ,x_msg_data                    => x_msg_data
						     ,p_lpn_id                      => p_lpn_id
						     ,p_content_lpn_id              => p_content_lpn_id
						     ,p_content_item_id             => p_content_item_id
						     ,p_content_item_desc           => p_content_item_desc
						     ,p_revision                    => p_revision
						     ,p_lot_number                  => l_lot_rec.lot_number
						     ,p_from_serial_number          => null
						     ,p_to_serial_number            => null
						     ,p_quantity                    => l_lot_rec.transaction_quantity
                                                     ,p_primary_quantity            => Round(l_lot_rec.primary_quantity,5) --Added by 13591755 for GRUPO *R12*--
						     ,p_uom                         => p_txn_uom_code
                                                                                       -- p_primary_uom --*R12*--
						     ,p_organization_id             => p_organization_id
						     ,p_subinventory                => null
						     ,p_locator_id                  => null
						     ,p_enforce_wv_constraints      => null
		                                     ,p_operation                   => p_operation
		                                     ,p_cost_group_id               => p_cost_group_id
		                                     ,p_source_type_id              => p_source_type_id
		                                     ,p_source_header_id            => p_source_header_id
		                                     ,p_source_name                 => p_source_name
		                                     ,p_source_line_id              => p_source_line_id
		                                     ,p_source_line_detail_id       => p_source_line_detail_id
		                                     ,p_validation_level            => fnd_api.g_valid_level_none
                                      --Bug #3457106 ,p_concurrent_pack             => 1
		                                     ,p_auto_unnest_empty_lpns => p_auto_unnest_empty_lpns
                                                     -- OPMConvergence
                                                     ,p_sec_quantity                => l_lot_rec.secondary_quantity
                                                     ,p_sec_uom                     => p_sec_uom
                                                     -- OPMConvergence
													 ,p_ignore_item_controls        => p_ignore_item_controls
                );

	      if x_return_status <> G_RET_STS_SUCCESS Then
		 -- MSG no new message just add the one on stack
		 -- Check the Error Status from this call
		 l_progress := 'WMSINB-11444';
		 RAISE FND_API.G_EXC_ERROR;
	      End if;

	   End Loop;
      End if;
    Elsif ( (nvl(p_lot_control_code,1) = 1 and
	     nvl(p_serial_control_code,1) <> 1) and l_total_ser_qty > 0 )  then -- CASE FOR SERIAL CONTROLLED ITEM

      l_progress := 'WMSINB-11453';
      For l_serial_rec in ( select fm_serial_number
			    ,to_serial_number
			    ,inv_serial_number_pub.get_serial_diff(fm_serial_number,to_serial_number) serial_quantity
			    from mtl_serial_numbers_temp msnt
			    where msnt.product_transaction_id = p_product_txn_id
			    and msnt.product_code = 'RCV'
			    )
	Loop
	   -- Calculate the Quantity
	   IF (l_debug = 1) THEN
	      print_debug('PACKUNPACK_WRAPPER: packing fm serial :'||l_serial_rec.fm_serial_number,1);
	      print_debug('PACKUNPACK_WRAPPER: packing to serial :'||l_serial_rec.to_serial_number,1);
	   END IF;

	   l_progress := 'WMSINB-11464';

	   wms_container_pvt.packunpack_container(p_api_version                 => 1.0
						  ,x_return_status               => x_return_status
						  ,x_msg_count                   => x_msg_count
						  ,x_msg_data                    => x_msg_data
						  ,p_lpn_id                      => p_lpn_id
						  ,p_content_lpn_id              => p_content_lpn_id
						  ,p_content_item_id             => p_content_item_id
						  ,p_content_item_desc           => p_content_item_desc
						  ,p_revision                    => p_revision
						  ,p_lot_number                  => null
						  ,p_from_serial_number          => l_serial_rec.fm_serial_number
						  ,p_to_serial_number            => l_serial_rec.to_serial_number
						  ,p_quantity                    => l_serial_rec.serial_quantity
						  ,p_uom                         => p_primary_uom
						  ,p_organization_id             => p_organization_id
						  ,p_subinventory                => null
						  ,p_locator_id                  => null
						  ,p_enforce_wv_constraints      => null
	     ,p_operation                   => p_operation
	     ,p_cost_group_id               => p_cost_group_id
	     ,p_source_type_id              => p_source_type_id
	     ,p_source_header_id            => p_source_header_id
	     ,p_source_name                 => p_source_name
	     ,p_source_line_id              => p_source_line_id
	     ,p_source_line_detail_id       => p_source_line_detail_id
	     ,p_validation_level            => fnd_api.g_valid_level_none
--Bug#3457106,p_concurrent_pack             => 1
	     ,p_auto_unnest_empty_lpns => p_auto_unnest_empty_lpns
		 ,p_ignore_item_controls   => p_ignore_item_controls);

	   if x_return_status <> G_RET_STS_SUCCESS Then
	      -- MSG no new message just add the one on stack
	      -- Check the Error Status from this call
	      l_progress := 'WMSINB-11497';
	      RAISE FND_API.G_EXC_ERROR;
	   End if;

	End Loop;
    Else -- CASE FOR VANILA ITEM
      -- Call container PUb PACkUNPACK

      l_progress := 'WMSINB-11505';

      wms_container_pvt.packunpack_container(p_api_version                 => 1.0
					     ,x_return_status               => x_return_status
					     ,x_msg_count                   => x_msg_count
					     ,x_msg_data                    => x_msg_data
					     ,p_lpn_id                      => p_lpn_id
					     ,p_content_lpn_id              => p_content_lpn_id
					     ,p_content_item_id             => p_content_item_id
					     ,p_content_item_desc           => p_content_item_desc
					     ,p_revision                    => p_revision
					     ,p_lot_number                  => null
					     ,p_from_serial_number          => null
					     ,p_to_serial_number            => null
					     ,p_quantity                    => p_txn_quantity
                         ,p_primary_quantity            => Round(p_primary_quantity,5) --Added by 13591755 for GRUPO *R12*--
					     ,p_uom                         => p_txn_uom_code
                                                                               -- p_primary_uom --*R12* --
					     ,p_organization_id             => p_organization_id
					     ,p_subinventory                => null
					     ,p_locator_id                  => null
					     ,p_enforce_wv_constraints      => null
					     ,p_operation                   => p_operation
	                                     ,p_cost_group_id               => p_cost_group_id
	                                     ,p_source_type_id              => p_source_type_id
	                                     ,p_source_header_id            => p_source_header_id
	                                     ,p_source_name                 => p_source_name
	                                     ,p_source_line_id              => p_source_line_id
	                                     ,p_source_line_detail_id       => p_source_line_detail_id
	                                     ,p_validation_level            => fnd_api.g_valid_level_none
                                     --Bug #3457106	,p_concurrent_pack             => 1
	                                     ,p_auto_unnest_empty_lpns => p_auto_unnest_empty_lpns
                                             -- OPMConvergence
                                             ,p_sec_quantity                => p_sec_quantity
                                             ,p_sec_uom                     => p_sec_uom
                                             -- OPMConvergence
                                             );

      IF (l_debug = 1) THEN
	 print_debug('PACKUNPACK_WRAPPER: x_return_status:'||x_return_status,1);
      END IF;

      if x_return_status <> G_RET_STS_SUCCESS Then
	 -- MSG no new message just add the one on stack
	 -- Check the Error Status from this call
	 l_progress := 'WMSINB-11542';
	 RAISE FND_API.G_EXC_ERROR;
      End if;

   End if;

EXCEPTION

   when fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;

      IF (l_debug = 1) THEN
	 print_debug('PACKUNPACK_WRAPPER : - Error :'|| l_progress ,1);
      END IF;

   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;

      IF (l_debug = 1) THEN
         print_debug('PACKUNPACK_WRAPPER : - OTHER Exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;

End PackUnpack_wrapper;



-- Description
-- This just returns the LPN_ID for the License_plate_number passed
-- if the license_plate_number exists in the system
Function get_lpn_id(x_lpn_id               IN OUT NOCOPY NUMBER ,
		    x_license_plate_number IN OUT NOCOPY VARCHAR2 ,
		    x_lpn_context          OUT NOCOPY NUMBER,
		    x_parent_lpn_id        OUT NOCOPY NUMBER,
		    x_source_header_id     OUT nocopy NUMBER) return boolean
  is
BEGIN

   -- print_debug('get LPN ID: 10 ', 1);

   -- Bug 4507808
   -- Performance Fix to get rid of NVLS

   if ( x_lpn_id is not null or x_license_plate_number is not null) then
      -- print_debug('get LPN ID: 20 ', 1);
      if ( x_lpn_id is not null and x_license_plate_number is not null) Then
         select lpn_id,
           license_plate_number,
           lpn_context,
           parent_lpn_id,
           source_header_id
           into x_lpn_id,
           x_license_plate_number,
           x_lpn_context,
           x_parent_lpn_id,
           x_source_header_id
           from wms_license_plate_numbers
           where lpn_id = x_lpn_id
           and license_plate_number = x_license_plate_number
           ;
         return TRUE;
      Elsif (x_lpn_id is not null and x_license_plate_number is null ) Then
         select lpn_id,
           license_plate_number,
           lpn_context,
           parent_lpn_id,
           source_header_id
           into x_lpn_id,
           x_license_plate_number,
           x_lpn_context,
           x_parent_lpn_id,
           x_source_header_id
           from wms_license_plate_numbers
           where lpn_id = x_lpn_id
           ;
         return TRUE;
      Elsif (x_lpn_id is null and x_license_plate_number is not null ) Then
         select lpn_id,
           license_plate_number,
           lpn_context,
           parent_lpn_id,
           source_header_id
           into x_lpn_id,
           x_license_plate_number,
           x_lpn_context,
           x_parent_lpn_id,
           x_source_header_id
           from wms_license_plate_numbers
           where license_plate_number = x_license_plate_number
           ;
         return TRUE;
      End if;
    else
      -- print_debug('get LPN ID: 30 ', 1);
      x_license_plate_number := null;
      x_lpn_id := to_number(null);
      x_lpn_context := to_number(null);
      x_parent_lpn_id := to_number(null);
      x_source_header_id := To_number(NULL);
      return TRUE;
   end if;
EXCEPTION
   WHEN OTHERS THEN
      if x_lpn_id is not null then -- CASE WHERE LPN_ID is present and its an invalid ID
	 --MSG WMS_CONT_INVALID_LPN
	 -- print_debug('get LPN ID: Error =' || SQLCODE , 1);

	 fnd_message.set_name('WMS', 'WMS_CONT_INVALID_LPN');
	 fnd_msg_pub.ADD;

	 x_lpn_context := to_number(null);
	 x_parent_lpn_id := to_number(null);
	 x_source_header_id := To_number(NULL);
	 return FALSE;
       else -- MAY BE A CASE FOR NEW LPN
	 x_lpn_context := to_number(null);
	 x_parent_lpn_id := to_number(null);
	 x_source_header_id := To_number(NULL);
	 return TRUE;
      End if;
END get_lpn_id;

PROCEDURE modify_edi_xml_asn( p_group_id IN NUMBER
			      ,x_return_status OUT nocopy VARCHAR2
			      ,x_msg_count OUT nocopy NUMBER
			      ,x_msg_data OUT nocopy VARCHAR2 )
  IS

     CURSOR rti_cur (l_grp_id NUMBER) IS
	SELECT
	  interface_transaction_id
	  ,to_organization_id
	  ,to_organization_code
	  ,item_id
	  ,item_num
	  ,lpn_group_id
	  ,quantity
	  ,primary_quantity
	  ,document_num
	  FROM
	  rcv_transactions_interface
	  WHERE
	  group_id = l_grp_id AND
	  transaction_type = 'SHIP';

     CURSOR wlpnci_cur (l_intf_txn_id NUMBER) IS
	SELECT
	  wmslpnci.interface_transaction_id interface_transaction_id,
	  wmslpn.lpn_id lpn_id,
	  wmslpnci.license_plate_number license_plate_number,
	  wmslpn.organization_id organization_id,
	  wmslpnci.serial_transaction_intf_id,
	  wmslpnci.lot_number lot_number,
	  wmslpnci.quantity quantity,
	  wmslpnci.uom_code uom_code,
	  wmslpnci.expiration_date expiration_date,
	  wmslpnci.status_id status_id,
	  wmslpnci.item_description item_description,
	  wmslpnci.vendor_item_num vendor_item_num,
	  wmslpnci.supplier_lot_number supplier_lot_number,
	  wmslpnci.origination_date origination_date,
	  wmslpnci.date_code date_code,
	  wmslpnci.grade_code grade_code,
	  wmslpnci.change_date change_date,
	  wmslpnci.maturity_date maturity_date,
	  wmslpnci.retest_date retest_date,
	  wmslpnci.age age,
	  wmslpnci.item_size item_size,
	  wmslpnci.color color,
	  wmslpnci.volume volume,
	  wmslpnci.place_of_origin place_of_origin,
	  wmslpnci.best_by_date best_by_date,
	  wmslpnci.length length,
	  wmslpnci.length_uom_code length_uom_code,
	  wmslpnci.recycled_content recycled_content,
	  wmslpnci.thickness thickness,
	  wmslpnci.thickness thickness_uom_code,
	  wmslpnci.width width,
	  wmslpnci.width_uom_code width_uom_code,
	  wmslpnci.curl_wrinkle_fold curl_wrinkle_fold,
	  wmslpnci.c_attribute1 c_attribute1,
	  wmslpnci.c_attribute2 c_attribute2,
	  wmslpnci.c_attribute3 c_attribute3,
	  wmslpnci.c_attribute4 c_attribute4,
	  wmslpnci.c_attribute5 c_attribute5,
	  wmslpnci.c_attribute6 c_attribute6,
	  wmslpnci.c_attribute7 c_attribute7,
	  wmslpnci.c_attribute8 c_attribute8,
	  wmslpnci.c_attribute9 c_attribute9,
	  wmslpnci.c_attribute10 c_attribute10,
	  wmslpnci.c_attribute11 c_attribute11,
	  wmslpnci.c_attribute12 c_attribute12,
	  wmslpnci.c_attribute13 c_attribute13,
	  wmslpnci.c_attribute14 c_attribute14,
	  wmslpnci.c_attribute15 c_attribute15,
	  wmslpnci.c_attribute16 c_attribute16,
	  wmslpnci.c_attribute17 c_attribute17,
	  wmslpnci.c_attribute18 c_attribute18,
	  wmslpnci.c_attribute19 c_attribute19,
	  wmslpnci.c_attribute20 c_attribute20,
	  wmslpnci.d_attribute1 d_attribute1,
	  wmslpnci.d_attribute2 d_attribute2,
	  wmslpnci.d_attribute3 d_attribute3,
	  wmslpnci.d_attribute4 d_attribute4,
	  wmslpnci.d_attribute5 d_attribute5,
	  wmslpnci.d_attribute6 d_attribute6,
	  wmslpnci.d_attribute7 d_attribute7,
	  wmslpnci.d_attribute8 d_attribute8,
	  wmslpnci.d_attribute9 d_attribute9,
	  wmslpnci.d_attribute10 d_attribute10,
	  wmslpnci.n_attribute1 n_attribute1,
	  wmslpnci.n_attribute2 n_attribute2,
	  wmslpnci.n_attribute3 n_attribute3,
	  wmslpnci.n_attribute4 n_attribute4,
	  wmslpnci.n_attribute5 n_attribute5,
	  wmslpnci.n_attribute6 n_attribute6,
	  wmslpnci.n_attribute7 n_attribute7,
	  wmslpnci.n_attribute8 n_attribute8,
	  wmslpnci.n_attribute9 n_attribute9,
	  wmslpnci.n_attribute10 n_attribute10,
	  wmslpnci.attribute_category attribute_category,
	  wmslpnci.attribute1 attribute1,
	  wmslpnci.attribute2 attribute2,
	  wmslpnci.attribute3 attribute3,
	  wmslpnci.attribute4 attribute4,
	  wmslpnci.attribute5 attribute5,
	  wmslpnci.attribute6 attribute6,
	  wmslpnci.attribute7 attribute7,
	  wmslpnci.attribute8 attribute8,
	  wmslpnci.attribute9 attribute9,
	  wmslpnci.attribute10 attribute10,
	  wmslpnci.attribute11 attribute11,
	  wmslpnci.attribute12 attribute12,
	  wmslpnci.attribute13 attribute13,
	  wmslpnci.attribute14 attribute14,
	  wmslpnci.attribute15 attribute15
	  FROM
	  wms_lpn_contents_interface wmslpnci,
	  wms_license_plate_numbers wmslpn
	  WHERE
	  wmslpnci.interface_transaction_id = l_intf_txn_id AND
	  wmslpn.license_plate_number (+)= wmslpnci.license_plate_number;

     CURSOR msni_cur (l_intf_txn_id NUMBER) IS
	SELECT
	  fm_serial_number,
	  to_serial_number
	  FROM
	  mtl_serial_numbers_interface
	  WHERE l_intf_txn_id = transaction_interface_id;

     l_wlpnci_total_qty NUMBER;
     l_msni_total_qty NUMBER := 0;
     l_serial_qty NUMBER := 0;
     l_tmp_ser_txn_id NUMBER := NULL;
     l_serial_txn_intf_id NUMBER;
     l_txn_intf_id NUMBER;
     l_prim_qty NUMBER;
     l_exists NUMBER;
     l_prim_uom_code VARCHAR2(3);

     l_progress VARCHAR2(15) := '0';
     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);

     l_item_id number;
     l_to_organization_id number;

BEGIN

   SAVEPOINT modify_edi_asn_pub;

   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-11771';

   IF (l_debug = 1) THEN
      print_debug('MODIFY_EDI_XML_ASN: Entering modify_edi_asn', 1);
      print_debug('                 (p_group_id => ' || p_group_id, 1);
   END IF;

   -- Look at each RTI that has p_group_id
   FOR l_rti_rec IN rti_cur(p_group_id) LOOP

      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: ORGANIZATION ID:'||l_rti_rec.to_organization_id, 1);
	 print_debug('MODIFY_EDI_XML_ASN: ORGANIZATION CODE:'||l_rti_rec.to_organization_code, 1);
	 print_debug('MODIFY_EDI_XML_ASN: ITEM ID:'||l_rti_rec.item_id, 1);
	 print_debug('MODIFY_EDI_XML_ASN: ITEM NUM:'||l_rti_rec.item_num, 1);
      END IF;

      IF (l_rti_rec.to_organization_code IS NULL AND l_rti_rec.to_organization_id IS NULL) THEN
	 BEGIN
	    --performace fix. Bug 3444172. Modified the query below.
	    SELECT DISTINCT pll.ship_to_organization_id
	      INTO l_rti_rec.to_organization_id
	      FROM po_line_locations pll, po_headers ph, po_lines pl,
	      mtl_system_items_kfv msik
	      WHERE ph.segment1 = l_rti_rec.document_num
	      AND ((msik.inventory_item_id = l_rti_rec.item_id)
		   OR (msik.concatenated_segments = l_rti_rec.item_num
		       AND l_rti_rec.item_id IS NULL))
			 AND pl.item_id = msik.inventory_item_id
			 AND pll.po_line_id = pl.po_line_id
			 AND pl.po_header_id = ph.po_header_id
			 AND pll.po_header_id = ph.po_header_id
			 AND ph.type_lookup_code in ('STANDARD','BLANKET','PLANNED')
			 AND ROWNUM = 1;
	 EXCEPTION
	    WHEN OTHERS THEN
	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: Failed to get ship_to_org_id',1);
	       END IF;
	       --review later
	       l_progress := 'WMSINB-11812';
	       RAISE fnd_api.g_exc_error;
	 END;
      END IF; --IF (l_rti_rec.to_organization_code IS NULL AND l_rti_rec.to_organization_id IS NULL) THEN

      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: AFTER ORGANIZATION ID:'||l_rti_rec.to_organization_id, 1);
	 print_debug('MODIFY_EDI_XML_ASN: AFTER ORGANIZATION CODE:'||l_rti_rec.to_organization_code, 1);
      END IF;

      BEGIN

	--following is fix of performance issue 8113225 / bug 3631289

	IF (L_RTI_REC.TO_ORGANIZATION_ID IS NOT NULL) THEN

	       IF (L_RTI_REC.ITEM_ID IS NOT NULL) THEN
                        SELECT DISTINCT msik.primary_uom_code,
                            msik.inventory_item_id,
			  mp.organization_id
			  INTO l_prim_uom_code,
			  l_item_id,
			  l_to_organization_id
                        FROM  mtl_system_items_kfv msik,
                                mtl_parameters mp
                      WHERE mp.organization_id = l_rti_rec.to_organization_id
                      AND msik.inventory_item_id = l_rti_rec.item_id
                    AND mp.organization_id = msik.organization_id;

	        ELSE --IF (L_RTI_REC.ITEM_ID IS NOT NULL) THEN
                        SELECT DISTINCT msik.primary_uom_code,
                            msik.inventory_item_id,
                            mp.organization_id
			  INTO l_prim_uom_code,
			  l_item_id,
			  l_to_organization_id
			FROM  mtl_system_items_kfv msik,
                                mtl_parameters mp
                      WHERE mp.organization_id = l_rti_rec.to_organization_id
                        AND msik.concatenated_segments = l_rti_rec.item_num
                    AND mp.organization_id = msik.organization_id;
                END IF; --IF (L_RTI_REC.ITEM_ID IS NOT NULL) THEN

	 ELSE --IF (L_RTI_REC.TO_ORGANIZATION_ID IS NOT NULL) THEN

	        IF (L_RTI_REC.ITEM_ID IS NOT NULL) THEN
                        SELECT DISTINCT msik.primary_uom_code,
                            msik.inventory_item_id,
			  mp.organization_id
			  INTO l_prim_uom_code,
			  l_item_id,
			  l_to_organization_id
                        FROM  mtl_system_items_kfv msik,
                                mtl_parameters mp
                      WHERE mp.organization_code = l_rti_rec.to_organization_code
                      AND msik.inventory_item_id = l_rti_rec.item_id
                    AND mp.organization_id = msik.organization_id;

		ELSE --IF (L_RTI_REC.ITEM_ID IS NOT NULL) THEN
                        SELECT DISTINCT msik.primary_uom_code,
                            msik.inventory_item_id,
			  mp.organization_id
			  INTO l_prim_uom_code,
			  l_item_id,
			  l_to_organization_id
                        FROM  mtl_system_items_kfv msik,
                                mtl_parameters mp
                      WHERE mp.organization_code = l_rti_rec.to_organization_code
                        AND msik.concatenated_segments = l_rti_rec.item_num
                    AND mp.organization_id = msik.organization_id;

		END IF; --IF (L_RTI_REC.ITEM_ID IS NOT NULL) THEN

	END IF; --IF (L_RTI_REC.TO_ORGANIZATION_ID IS NOT NULL) THEN


		    --performace fix. Bug 3444172
		    --WHERE ((msik.inventory_item_id = l_rti_rec.item_id)
		    --  OR (msik.concatenated_segments = l_rti_rec.item_num
		    --    AND l_rti_rec.item_id IS NULL))
		    --AND ((msik.organization_id = l_rti_rec.to_organization_id)
		    --   OR (mp.organization_code = l_rti_rec.to_organization_code
		    -- AND l_rti_rec.to_organization_id IS NULL))
		    -- AND mp.organization_id = msik.organization_id;

	  -- Set the ITEM ID and Organization ID here
          If l_rti_rec.item_id is null then
             l_rti_rec.item_id := l_item_id;
          End if;

          If l_rti_rec.to_organization_id is null then
             l_rti_rec.to_organization_id := l_to_organization_id;
          End if;

      EXCEPTION
	 WHEN OTHERS THEN
	    IF (l_debug = 1) THEN
	       print_debug('MODIFY_EDI_XML_ASN: Error retrieving primary uom', 1);
	    END IF;
	    l_progress := 'WMSINB-11843';
	    RAISE fnd_api.g_exc_error;
      END ;

      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: ORGANIZATION ID:'||l_rti_rec.to_organization_id, 1);
	 print_debug('MODIFY_EDI_XML_ASN: ITEM ID:'||l_rti_rec.item_id, 1);
      END IF;


      l_progress := 'WMSINB-11848';

      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: Looking at RTI:' ||
		     l_rti_rec.interface_transaction_id, 1);
      END IF;

      l_wlpnci_total_qty := 0;

      --WLPNI will have rti.group_id
      --Update them to RTI.LPN_GROUP_ID so that it will get
      --picked up when the transaction is processed
      BEGIN
	 UPDATE wms_lpn_interface
	   SET  source_group_id = l_rti_rec.lpn_group_id
	       ,organization_id = l_rti_rec.to_organization_id
	   WHERE source_group_id = p_group_id
	   AND   EXISTS (SELECT 1  --Only for EDI TXN we are doing this
			           --And EDI TXN will have WLPNCI
			 FROM   wms_lpn_contents_interface
			 WHERE  group_id = p_group_id);
      EXCEPTION
	 WHEN OTHERS THEN
	 IF (l_debug = 1) THEN
	    print_debug('MODIFY_EDI_XML_ASN: Error update source_group_id OF WLPNI',1);
	 END IF;
      END;

      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: NUMBER OF WLPNI ROWS :' ||
		     SQL%ROWCOUNT, 1);
      END IF;

      -- WLPNCI links to RTI through interface_transaction_id
      FOR l_wlpnci_rec IN wlpnci_cur(l_rti_rec.interface_transaction_id) LOOP

	 l_progress := 'WMSINB-11860';

	 IF (l_debug = 1) THEN
	    print_debug('MODIFY_EDI_XML_ASN: Looking at WLPNCI:' ||
			l_wlpnci_rec.interface_transaction_id, 1);
	 END IF;

	 -- Only insert wlpni if lpn_id is NULL
	 IF (l_wlpnci_rec.lpn_id IS NULL) THEN
	    check_lpn_in_wlpni
	      (p_license_plate_number => l_wlpnci_rec.license_plate_number
               ,p_lpn_id => l_wlpnci_rec.lpn_id
	       ,p_lpn_group_id => l_rti_rec.lpn_group_id
	       ,x_exists  => l_exists);

	    IF (l_exists <> 1) THEN
	       -- All wlpnci will have the same lpn_id.  So just insert_wlpni once

	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: Calling insert_wlpni(', 1);
		  print_debug('                 p_organization_id => '||l_wlpnci_rec.organization_id,1);
		  print_debug('                 p_lpn_id          => '||l_wlpnci_rec.lpn_id,1);
		  print_debug('                 p_license_plate_number=> '||l_wlpnci_rec.license_plate_number,1);
		  print_debug('                 p_lpn_group_id    => '||p_group_id,1);
	       END IF;

	       l_progress := 'WMSINB-11886';

	       inv_rcv_integration_apis.insert_wlpni
		 (p_api_version           => 1.0
		  ,x_return_status        => x_return_status
		  ,x_msg_count            => x_msg_count
		  ,x_msg_data             => x_msg_data
		  ,p_organization_id      => l_rti_rec.to_organization_id
		  ,p_lpn_id               => l_wlpnci_rec.lpn_id
		  ,p_license_plate_number => l_wlpnci_rec.license_plate_number
		  --,p_lpn_group_id         => p_group_id --??
		  ,p_lpn_group_id         => l_rti_rec.lpn_group_id --Changed to pass the lpn_group_id otherwise it would fail in validate_lpn_info
		  );
	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('MODIFY_EDI_XML_ASN: Error in insert_wlpni', 1);
		  END IF;

		  l_progress := 'WMSINB-11903';
		  RAISE fnd_api.g_exc_error;
	       END IF;

	       l_progress := 'WMSINB-11907';

	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: WLPNI:' ||
			      l_wlpnci_rec.lpn_id ||' inserted successfully', 1);
	       END IF;

	    END IF; --IF (l_exists <> 1) THEN
	 END IF; --IF (l_wlpnci_rec.lpn_id IS NULL) THEN

	 l_progress := 'WMSINB-11917';

	 BEGIN
	    UPDATE rcv_transactions_interface
	      SET lpn_id = l_wlpnci_rec.lpn_id,
	      license_plate_number = l_wlpnci_rec.license_plate_number
	      WHERE interface_transaction_id = l_rti_rec.interface_transaction_id;
	 EXCEPTION
	    WHEN OTHERS THEN
	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: Error updating RTI', 1);
	       END IF;
	       l_progress := 'WMSINB-11929';
	       RAISE fnd_api.g_exc_error;
	 END;

	 l_progress := 'WMSINB-11933';

	 IF (l_wlpnci_rec.uom_code <> l_prim_uom_code) THEN
	    l_prim_qty := inv_rcv_cache.convert_qty(p_inventory_item_id => l_rti_rec.item_id
				      ,p_from_qty         => l_wlpnci_rec.quantity
				      ,p_from_uom_code    => l_wlpnci_rec.uom_code
				      ,p_to_uom_code      => l_prim_uom_code);
	  ELSE
	    l_prim_qty := l_wlpnci_rec.quantity;
	 END IF;

	 l_wlpnci_total_qty := l_wlpnci_total_qty + l_prim_qty;
	 -- l_serial_txn_intf_id will be updated if item is lot controlled
	 -- otherwise, use the same one in wlpnci
	 l_serial_txn_intf_id := l_wlpnci_rec.serial_transaction_intf_id;

	 IF (l_wlpnci_rec.lot_number IS NOT NULL) THEN

	    l_progress := 'WMSINB-11957';

	    IF (l_debug = 1) THEN
	       print_debug('MODIFY_EDI_XML_ASN: Lot number is not null in WLPNCI. inserting MTLI',1);
	    END IF;

	    inv_rcv_integration_apis.insert_mtli
	      (p_api_version     => 1.0
	       ,x_return_status  => x_return_status
	       ,x_msg_count      => x_msg_count
	       ,x_msg_data       => x_msg_data
	       ,p_transaction_interface_id => l_txn_intf_id
	       ,p_lot_number     => ltrim(rtrim(l_wlpnci_rec.lot_number))
	       ,p_transaction_quantity => l_wlpnci_rec.quantity
	       ,p_primary_quantity     => l_prim_qty
	       ,p_organization_id   =>  l_rti_rec.to_organization_id -- l_wlpnci_rec.organization_id
	       ,p_inventory_item_id =>  l_rti_rec.item_id
	       ,p_expiration_date   =>  l_wlpnci_rec.expiration_date
	       ,p_status_id         =>  l_wlpnci_rec.status_id
	       ,x_serial_transaction_temp_id => l_tmp_ser_txn_id -- update
	       ,p_product_transaction_id => l_rti_rec.interface_transaction_id
	       ,p_product_code      => 'RCV'
	       ,p_description       =>  l_wlpnci_rec.item_description --??
	       ,p_vendor_name       =>  l_wlpnci_rec.vendor_item_num --??
	       ,p_supplier_lot_number => l_wlpnci_rec.supplier_lot_number
	       ,p_origination_date  =>  l_wlpnci_rec.origination_date
	      ,p_date_code          =>  l_wlpnci_rec.date_code
	      ,p_grade_code         =>  l_wlpnci_rec.grade_code
	      ,p_change_date        =>  l_wlpnci_rec.change_date
	      ,p_maturity_date      =>  l_wlpnci_rec.maturity_date
	      ,p_retest_date        =>  l_wlpnci_rec.retest_date
	      ,p_age                =>  l_wlpnci_rec.age
	      ,p_item_size          =>  l_wlpnci_rec.item_size
	      ,p_color              =>  l_wlpnci_rec.color
	      ,p_volume             =>  l_wlpnci_rec.volume
	      ,p_place_of_origin    =>  l_wlpnci_rec.place_of_origin
	      ,p_best_by_date       =>  l_wlpnci_rec.best_by_date
	      ,p_length             =>  l_wlpnci_rec.length
	      ,p_length_uom         =>  l_wlpnci_rec.length_uom_code
	      ,p_recycled_content   =>  l_wlpnci_rec.recycled_content
	      ,p_thickness          =>  l_wlpnci_rec.thickness
	      ,p_thickness_uom      =>  l_wlpnci_rec.thickness_uom_code
	      ,p_width              =>  l_wlpnci_rec.width
	      ,p_width_uom          =>  l_wlpnci_rec.width_uom_code
	      ,p_curl_wrinkle_fold  =>  l_wlpnci_rec.curl_wrinkle_fold
	      ,p_c_attribute1       =>  l_wlpnci_rec.c_attribute1
	      ,p_c_attribute2       =>  l_wlpnci_rec.c_attribute2
	      ,p_c_attribute3       =>  l_wlpnci_rec.c_attribute3
	      ,p_c_attribute4       =>  l_wlpnci_rec.c_attribute4
	      ,p_c_attribute5       =>  l_wlpnci_rec.c_attribute5
	      ,p_c_attribute6       =>  l_wlpnci_rec.c_attribute6
	      ,p_c_attribute7       =>  l_wlpnci_rec.c_attribute7
	      ,p_c_attribute8       =>  l_wlpnci_rec.c_attribute8
	      ,p_c_attribute9       =>  l_wlpnci_rec.c_attribute9
	      ,p_c_attribute10      =>  l_wlpnci_rec.c_attribute10
	      ,p_c_attribute11      =>  l_wlpnci_rec.c_attribute11
	      ,p_c_attribute12      =>  l_wlpnci_rec.c_attribute12
	      ,p_c_attribute13      =>  l_wlpnci_rec.c_attribute13
	      ,p_c_attribute14      =>  l_wlpnci_rec.c_attribute14
	      ,p_c_attribute15      =>  l_wlpnci_rec.c_attribute15
	      ,p_c_attribute16      =>  l_wlpnci_rec.c_attribute16
	      ,p_c_attribute17      =>  l_wlpnci_rec.c_attribute17
	      ,p_c_attribute18      =>  l_wlpnci_rec.c_attribute18
	      ,p_c_attribute19      =>  l_wlpnci_rec.c_attribute19
	      ,p_c_attribute20      =>  l_wlpnci_rec.c_attribute20
	      ,p_d_attribute1       =>  l_wlpnci_rec.d_attribute1
	      ,p_d_attribute2       =>  l_wlpnci_rec.d_attribute2
	      ,p_d_attribute3       =>  l_wlpnci_rec.d_attribute3
	      ,p_d_attribute4       =>  l_wlpnci_rec.d_attribute4
	      ,p_d_attribute5       =>  l_wlpnci_rec.d_attribute5
	      ,p_d_attribute6       =>  l_wlpnci_rec.d_attribute6
	      ,p_d_attribute7       =>  l_wlpnci_rec.d_attribute7
	      ,p_d_attribute8       =>  l_wlpnci_rec.d_attribute8
	      ,p_d_attribute9       =>  l_wlpnci_rec.d_attribute9
	      ,p_d_attribute10      =>  l_wlpnci_rec.d_attribute10
	      ,p_n_attribute1       =>  l_wlpnci_rec.n_attribute1
	      ,p_n_attribute2       =>  l_wlpnci_rec.n_attribute2
	      ,p_n_attribute3       =>  l_wlpnci_rec.n_attribute3
	      ,p_n_attribute4       =>  l_wlpnci_rec.n_attribute4
	      ,p_n_attribute5       =>  l_wlpnci_rec.n_attribute5
	      ,p_n_attribute6       =>  l_wlpnci_rec.n_attribute6
	      ,p_n_attribute7       =>  l_wlpnci_rec.n_attribute7
	      ,p_n_attribute8       =>  l_wlpnci_rec.n_attribute8
	      ,p_n_attribute9       =>  l_wlpnci_rec.n_attribute9
	      ,p_n_attribute10      =>  l_wlpnci_rec.n_attribute10
	      ,p_attribute_category =>  l_wlpnci_rec.attribute_category
	      ,p_attribute1         =>  l_wlpnci_rec.attribute1
	      ,p_attribute2         =>  l_wlpnci_rec.attribute2
	      ,p_attribute3         =>  l_wlpnci_rec.attribute3
	      ,p_attribute4         =>  l_wlpnci_rec.attribute4
	      ,p_attribute5         =>  l_wlpnci_rec.attribute5
	      ,p_attribute6         =>  l_wlpnci_rec.attribute6
	      ,p_attribute7         =>  l_wlpnci_rec.attribute7
	      ,p_attribute8         =>  l_wlpnci_rec.attribute8
	      ,p_attribute9         =>  l_wlpnci_rec.attribute9
	      ,p_attribute10        =>  l_wlpnci_rec.attribute10
	      ,p_attribute11        =>  l_wlpnci_rec.attribute11
	      ,p_attribute12        =>  l_wlpnci_rec.attribute12
	      ,p_attribute13        =>  l_wlpnci_rec.attribute13
	      ,p_attribute14        =>  l_wlpnci_rec.attribute14
	      ,p_attribute15        =>  l_wlpnci_rec.attribute15
	      );

	    IF (x_return_status <> g_ret_sts_success) THEN
	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: Error in insert_mtli', 1);
	       END IF;
	       l_progress := 'WMSINB-12064';
	       RAISE fnd_api.g_exc_error;
	    END IF;
	 END IF;

	 l_progress := 'WMSINB-12069';

	 IF (l_wlpnci_rec.serial_transaction_intf_id IS NOT NULL) THEN
	    -- for serial controlled only items, do they all have have
	    -- different transaction_intf_id, or can they use the same?
	    l_progress := 'WMSINB-12074';

	    IF (l_debug = 1) THEN
	       print_debug('MODIFY_EDI_XML_ASN: Looking at MSNIs with ID:' ||
			   l_wlpnci_rec.serial_transaction_intf_id, 1);
	    END IF;

	    l_msni_total_qty := 0;

	    FOR l_msni_rec IN msni_cur(l_wlpnci_rec.serial_transaction_intf_id) LOOP
	       l_progress := 'WMSINB-12084';

	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: Looping MSNIs',1);
	       END IF;

	       l_progress := 'WMSINB-12090';
	       l_serial_qty :=
		 inv_serial_number_pub.get_serial_diff
		 (p_fm_serial => l_msni_rec.fm_serial_number
		  ,p_to_serial=> l_msni_rec.to_serial_number
		  );
	       l_progress := 'WMSINB-12096';
	       l_msni_total_qty := l_msni_total_qty + l_serial_qty;

	    END LOOP;


	    IF (l_debug = 1) THEN
	       print_debug('MODIFY_EDI_XML_ASN: MSNI loop exited',1);
	    END IF;

	    l_progress := 'WMSINB-12106';

	    IF (l_msni_total_qty > 0 AND l_msni_total_qty <> l_wlpnci_rec.quantity) THEN
	       -- this message is OK?
	       fnd_message.set_name('INV', 'INV_SERQTY_NOTMATCH');
	       fnd_msg_pub.ADD;
	       IF (l_debug = 1) THEN
		  print_debug('MODIFY_EDI_XML_ASN: MSNIs total quantity does not match WLPNCI quantity',1);
	       END IF;
	       l_progress := 'WMSINB-12115';
	       RAISE fnd_api.g_exc_error;
	    END IF;

	    l_progress := 'WMSINB-12119';

	    -- Now update the product code and product_intf_id
	    IF (l_msni_total_qty > 0) THEN
	       BEGIN
		  UPDATE mtl_serial_numbers_interface
		    SET product_code = 'RCV',
		    product_transaction_id=l_rti_rec.interface_transaction_id,
		    transaction_interface_id = l_serial_txn_intf_id
		    --WHERE transaction_interface_id = l_wlpnci_rec.interface_transaction_id;
		    WHERE transaction_interface_id = l_wlpnci_rec.serial_transaction_intf_id;

        --Bug 9226468 To update mtli we need to check based on the serial_transaction_temp_id but not based on product transaction id
        --so that it will not fetch the already processed lots.
		  UPDATE mtl_transaction_lots_interface
		    SET serial_transaction_temp_id = l_serial_txn_intf_id
		    WHERE product_code = 'RCV'
          AND serial_transaction_temp_id=l_tmp_ser_txn_id;
		    --AND product_transaction_id = l_wlpnci_rec.interface_transaction_id;

	       EXCEPTION
		  WHEN OTHERS THEN
		     IF (l_debug = 1) THEN
			print_debug('MODIFY_EDI_XML_ASN: Error updating MSNI',1);
		     END IF;
		     l_progress := 'WMSINB-12141';
		     RAISE fnd_api.g_exc_error;
	       END;
	    END IF; --IF (l_msni_total_qty > 0) THEN
	    l_progress := 'WMSINB-12145';
	 END IF;

	 IF (l_debug = 1) THEN
	    l_progress := 'WMSINB-12149';
	    print_debug('MODIFY_EDI_XML_ASN: WLPNCI loop exited',1);
	 END IF;

      END LOOP;

      IF ((l_wlpnci_total_qty > 0) AND (l_wlpnci_total_qty <> l_rti_rec.primary_quantity)) THEN
	 IF (l_debug = 1) THEN
	    print_debug('MODIFY_EDI_XML_ASN: WLPNCIs total quantity does not match RTI quantity', 1);
	 END IF;
	 -- message to be added
	 fnd_message.set_name('INV', 'INV_WLPNCI_RTI_QTY_NOTMATCH');
	 fnd_msg_pub.ADD;
	 l_progress := 'WMSINB-12162';
	 RAISE fnd_api.g_exc_error;
      END IF;


      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: Updating RTI row',1);
      END IF;

      l_progress := 'WMSINB-12171';
   END LOOP;

   l_progress := 'WMSINB-12174';

   IF (l_debug = 1) THEN
      print_debug('MODIFY_EDI_XML_ASN: RTI loop exited.  Procedure returns',1);
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      IF (l_debug = 1) THEN
	 print_debug('MODIFY_EDI_XML_ASN: Exception after l_progress = ' ||
		     l_progress,1);
      END IF;
      x_return_status := g_ret_sts_unexp_error ;
      --      fnd_msg_pub.count_and_get
      --        (   p_count        => x_msg_count
      --	    ,p_data     => x_msg_data
      --	    );
      IF (rti_cur%isopen) THEN
	 CLOSE rti_cur;
      END IF;
      IF (wlpnci_cur%isopen) THEN
	 CLOSE wlpnci_cur;
      END IF;
      IF (msni_cur%isopen) THEN
	 CLOSE msni_cur;
      END IF;
      ROLLBACK TO modify_edi_asn_pub;
END modify_edi_xml_asn;

PROCEDURE Explode_lpn(p_request_id       IN         NUMBER,
                      p_group_id         IN  NUMBER ) is

			 l_errorneous_rows NUMBER := 0;
			 l_msg_count number;
			 l_msg_data VARCHAR2(2000);
			 l_return_status VARCHAR2(1);
			 l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
			 l_progress VARCHAR2(15) := '10';

			 l_lpn_grp_id NUMBER;

			 l_dummy NUMBER := NULL;

BEGIN

   -- Check for Erroneous rows in RTI
   --

   l_progress := 'WMSINB-12221';

   IF (l_debug = 1) THEN
      print_debug('Explode_LPN : '|| l_progress ,1);
      print_debug('Explode_LPN group_id: '|| p_group_id ,1);
      print_debug('Explode_LPN request_id: '|| p_request_id ,1);
   END IF;

   IF (Nvl(p_group_id,0) = 0 AND Nvl(p_request_id,0) = 0) THEN
      --raise error review later
      l_progress := 'WMSINB-12231';
      RAISE fnd_api.g_exc_error;
   END IF;

   l_progress := 'WMSINB-12235';

   /*************************** We do not need to do this check as PO will*
   *********************** update the lpn_group_id for all RTIs with LPNs*
     for l_error_row in ( select interface_transaction_id,
     group_id
     from rcv_transactions_interface
     where lpn_group_id is null
     and (   lpn_id is not null
     or license_plate_number is not null
     or transfer_lpn_id is not null
     or transfer_license_plate_number is not null
     )
     and processing_status_code in ('RUNNING')
     AND (processing_request_id IS NULL
     OR processing_request_id = p_request_id)
     AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id)
     ) Loop
     -- Call PO's API to mark the Error
     IF (l_debug = 1) THEN
     print_debug('Explode_LPN failed for interface_transaction_id : '|| l_error_row.interface_transaction_id ,1);
     print_debug('Explode_LPN failed for group_id: '|| p_group_id ,1);
     print_debug('Explode_LPN request_id failed for request_id : '|| p_request_id ,1);
     END IF;
     rcv_roi_preprocessor.explode_lpn_failed
     (x_interface_txn_id => l_error_row.interface_transaction_id,
     x_group_id => l_error_row.group_id,
     x_lpn_group_id => NULL);
     End Loop;
     *************************************************************************************/
     -- ** The update part is commented after discussion with po team
     -- ** Instead of Finding Errorneous Rows we will update the LPN GROUP_ID HERE *******

     l_progress := 'WMSINB-12268';

   -- See if there are any rtis which require explosion but have null
   -- lpn_group_id and update the lpn_group_id for such cases

   FOR l_lpn_grp_null IN (SELECT interface_transaction_id
			  FROM rcv_transactions_interface
			  WHERE Nvl(item_id, -1) = -1
			  AND item_num IS NULL
			  AND item_description IS NULL
			  AND lpn_group_id IS NULL
			  AND (lpn_id IS NOT NULL
			       OR license_plate_number IS NOT NULL)
			  AND transaction_type <> 'SHIP'
			  AND processing_status_code in ('RUNNING')
			  AND (processing_request_id IS NULL
			       OR processing_request_id = p_request_id)
			  AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id))
			    LOOP
			       IF (l_debug = 1) THEN
				  print_debug('EXPLODE_LPN - Case for explosion without LPN_GROUP_ID. Updating for RTI: '||l_lpn_grp_null.interface_transaction_id,1);
			       END IF;

			       SELECT RCV_INTERFACE_GROUPS_S.NEXTVAL
				 INTO l_lpn_grp_id
				 FROM DUAL;

			       UPDATE rcv_transactions_interface
				 SET lpn_group_id = l_lpn_grp_id
				 WHERE interface_transaction_id = l_lpn_grp_null.interface_transaction_id;

			    END LOOP;

			    -- Following will be removed after po gives us the patch for corrections/returns.
			    /************************************************************************/
			    --UPDATE rcv_transactions_interface SET lpn_group_id = group_id
			    --WHERE lpn_group_id IS NULL
			    --AND (lpn_id IS NOT NULL
			    --   OR license_plate_number IS NOT NULL
			    -- OR transfer_lpn_id IS NOT NULL
			    -- OR transfer_license_plate_number IS NOT NULL
			    -- )
			    -- AND processing_status_code = 'RUNNING'
			    -- AND (processing_request_id IS NULL
			    --    OR processing_request_id = p_request_id)
			    -- AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id);
			    /***********************************************************************/
				       l_progress := 'WMSINB-12314';

				       FOR l_rti_rec IN ( SELECT DISTINCT lpn_group_id, group_id
							  FROM rcv_transactions_interface rti
							  WHERE lpn_group_id IS NOT NULL
							  AND Nvl(item_id, -1) = -1
							  AND item_num IS NULL
							  AND item_description IS NULL
							  AND transaction_type <> 'SHIP'
							  AND processing_status_code in ('RUNNING')
							  AND (processing_request_id IS NULL
							       OR processing_request_id = p_request_id)
							  AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id)) LOOP
							     IF (l_debug = 1) THEN
								print_debug('Explode_LPN_contents called for LPN_GROUP = '||l_rti_rec.lpn_group_id  ,1);
							     END IF;
							     Explode_lpn_contents(l_rti_rec.lpn_group_id,l_return_status,l_msg_count, l_msg_data);
							     IF (l_return_status <> g_ret_sts_success) then
								IF (l_debug = 1) THEN
								   print_debug('Explode_LPN_contents FAILURE for LPN_GROUP = '||l_rti_rec.lpn_group_id  ,1);
								END IF;
								-- Call PO's API to mark the Error
								rcv_roi_preprocessor.explode_lpn_failed(x_interface_txn_id => l_dummy,
													x_group_id => l_rti_rec.group_id,
													x_lpn_group_id => l_rti_rec.lpn_group_id);
							     END IF;
							  END LOOP;

							  --See if there are any rows for ASN SHIP txn
							  --which need updation of lpn_group_id
                                                          --Instead of shipment use interface_transaction_id as the shipment_num in rti may be null
							  --FOR l_asn_lpn_grp_null IN (SELECT DISTINCT shipment_num

							  FOR l_asn_lpn_grp_null IN (SELECT DISTINCT header_interface_id,
                                                                                                     shipment_num
										     FROM rcv_transactions_interface rti
										     WHERE rti.lpn_group_id IS NULL
										     AND ( ( (rti.lpn_id IS NOT NULL
											    OR rti.license_plate_number IS NOT NULL)
                                                                                           ) or
                                                                                           (exists ( select 'x' from wms_lpn_contents_interface wlc
                                                                                                    where wlc.interface_transaction_id =
                                                                                                        rti.interface_transaction_id
                                                                                                   )
                                                                                           )
                                                                                         )
										     AND rti.processing_status_code = 'RUNNING'
										     AND (rti.processing_request_id IS NULL
											  OR rti.processing_request_id = p_request_id)
										     AND rti.transaction_type = 'SHIP'
										     AND rti.source_document_code = 'PO'
										     AND (rti.item_id IS NOT NULL
											  OR rti.item_num IS NOT NULL)
										     AND rti.group_id = Decode(p_group_id,0,rti.group_id,NULL,rti.group_id,p_group_id))
											    LOOP
											       IF (l_debug = 1) THEN
												  print_debug('EXPLODE_LPN - SHIP  Updating lpn_group for SHIPMENT: '||l_asn_lpn_grp_null.shipment_num,1);
											       END IF;

											       SELECT RCV_INTERFACE_GROUPS_S.NEXTVAL
												 INTO l_lpn_grp_id
												 FROM DUAL;

											       UPDATE rcv_transactions_interface
												 SET lpn_group_id = l_lpn_grp_id
                                                                                                 -- don't use shipment_num see update above ****
												 -- WHERE shipment_num = l_asn_lpn_grp_null.shipment_num
												 WHERE header_interface_id = l_asn_lpn_grp_null.header_interface_id
                                                                                                 AND lpn_group_id is null
												 AND processing_status_code = 'RUNNING'
												 AND (processing_request_id IS NULL
												      OR processing_request_id = p_request_id)
												   AND transaction_type = 'SHIP'
												   AND source_document_code = 'PO'
												   AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id);
											    END LOOP;

											    -- This PART Below is for ASN creation only
											    FOR l_asn_rec IN ( SELECT DISTINCT group_id,processing_mode_code
													       FROM rcv_transactions_interface rti
													       WHERE processing_status_code = 'RUNNING'
													       AND (processing_request_id IS NULL
														    OR processing_request_id = p_request_id)
													       AND transaction_type = 'SHIP'
													       AND source_document_code = 'PO'
													       AND lpn_group_id IS NOT NULL
													       AND (item_id IS NOT NULL OR
														    item_num IS NOT NULL)
													       AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id)) LOOP
														  IF (l_debug = 1) THEN
														     print_debug('Modify_edi_xml_asn called for GROUP = '||l_asn_rec.group_id  ,1);
														  END IF;
														  modify_edi_xml_asn(l_asn_rec.group_id,l_return_status,l_msg_count, l_msg_data);
														  IF (l_return_status <> g_ret_sts_success) then
														     IF (l_debug = 1) THEN
															print_debug('modify_edi_xml_asn FAILURE for GROUP = '||l_asn_rec.group_id  ,1);
														     END IF;
														     -- Call POs API to mark the Error
														     IF (l_asn_rec.processing_mode_code='ONLINE') THEN
															rcv_roi_preprocessor.explode_lpn_failed
															  (x_interface_txn_id => l_dummy,
															   x_group_id => l_asn_rec.group_id,
															   x_lpn_group_id => NULL);
														      ELSE
															FOR l_err_row IN (SELECT interface_transaction_id
																	  FROM rcv_transactions_interface
																	  WHERE group_id = l_asn_rec.group_id) LOOP
																	     -- Call PO's API to mark the Error
																	     rcv_roi_preprocessor.explode_lpn_failed
																	       (x_interface_txn_id => l_err_row.interface_transaction_id,
																		x_group_id => l_asn_rec.group_id,
																		x_lpn_group_id => NULL);
																	  END LOOP;
														     END IF; --IF (l_asn_rec.processing_mode_code='ONLINE') THEN
														  END IF; --IF (l_return_status <> g_ret_sts_success) then
													       END LOOP;

													       -- Delete the Original row for Explosion
                                                                                                               -- Bug 3618348. The code below is changed from performance reasons
                                                                                                               /*
													       DELETE FROM rcv_transactions_interface
														 WHERE Nvl(item_id, -1)  = -1
														 AND item_description IS NULL
														   AND Nvl(quantity,0) = 0
														   AND lpn_group_id IS NOT NULL
														     AND processing_status_code = 'RUNNING'
														     AND (processing_request_id IS NULL
															  OR processing_request_id = p_request_id)
														       AND group_id = Decode(p_group_id,0,group_id,NULL,group_id,p_group_id);
                                                                                                               */
if nvl(p_group_id,0) = 0 then
   DELETE FROM rcv_transactions_interface
     WHERE Nvl(item_id, -1)  = -1
       AND item_description IS NULL
       AND Nvl(quantity,0) = 0
       AND lpn_group_id IS NOT NULL
       AND processing_status_code = 'RUNNING'
       -- Bug 3714354
       and ( lpn_id is not null or license_plate_number is not null )
       AND (processing_request_id IS NULL
             OR processing_request_id = p_request_id) ;
Else
   DELETE FROM rcv_transactions_interface
     WHERE Nvl(item_id, -1)  = -1
       AND item_description IS NULL
       AND Nvl(quantity,0) = 0
       AND lpn_group_id IS NOT NULL
       AND processing_status_code = 'RUNNING'
       -- Bug 3714354
       and ( lpn_id is not null or license_plate_number is not null )
       AND (processing_request_id IS NULL
             OR processing_request_id = p_request_id)
       AND group_id = p_group_id;
End if;

END Explode_lpn;

FUNCTION get_inspection_status(p_transaction_type IN VARCHAR2
			       , p_routing_header_id IN NUMBER DEFAULT NULL
			       , p_parent_transaction_type IN VARCHAR2 DEFAULT NULL
			       , p_parent_parent_txn_type IN VARCHAR2 DEFAULT NULL
			       , p_quantity IN NUMBER DEFAULT NULL) return NUMBER
  IS
     l_inspect_status NUMBER;
	 l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
BEGIN
   l_inspect_status := NULL;

   IF (p_transaction_type = 'RECEIVE' AND
       p_routing_header_id = 2) THEN
      l_inspect_status := 1;
    ELSIF (p_transaction_type = 'ACCEPT') THEN
      l_inspect_status := 2;
    ELSIF (p_transaction_type = 'REJECT') THEN
      l_inspect_status := 3;
    ELSIF (p_transaction_type = 'TRANSFER') THEN
      l_inspect_status := -9999;
   END IF;

   --bug 12864098
   IF (l_debug = 1) THEN
     print_debug('get_inspection_status  : p_parent_transaction_type: '|| p_parent_transaction_type,1);
     print_debug('get_inspection_status  : p_transaction_type: '|| p_transaction_type,1);
     print_debug('get_inspection_status  : p_quantity: '|| p_quantity,1);
   END IF;
   IF (p_transaction_type = 'CORRECT') THEN
     IF (p_parent_transaction_type = 'ACCEPT') THEN
      l_inspect_status := 1;
     ELSIF (p_parent_transaction_type = 'REJECT') THEN
      l_inspect_status := 1;
     ELSIF (p_parent_transaction_type = 'RECEIVE' AND p_quantity>0) THEN
      l_inspect_status := 1;
    --14811374
     ELSIF (p_parent_transaction_type = 'TRANSFER' ) THEN
      l_inspect_status := -9999;
    --14811374 The Inspection status was stamped as NULL after performing Correction on TRANSFER Record
     END IF;
   END IF;
   --bug 12864098

   RETURN l_inspect_status;

END get_inspection_status;

Function get_serial_status(p_transaction_type IN VARCHAR2
         , p_auto_transact_code IN VARCHAR2 DEFAULT NULL
         , p_parent_transaction_type IN VARCHAR2 DEFAULT NULL
         , p_parent_parent_txn_type IN VARCHAR2 DEFAULT NULL
         , p_quantity IN NUMBER DEFAULT NULL
         ) return NUMBER
  is

     -- 1 defined But not used
     -- 3 Resides in Stores
     -- 4 Issued out of Stores
     -- 5 Resides in Intransit

     l_serial_status_new constant NUMBER := 1;
     l_serial_status_rcv constant NUMBER := 7;
     l_serial_status_inv constant NUMBER := 3;
     l_serial_status_intransit constant NUMBER := 5;
     l_serial_status_issued constant NUMBER := 4;

Begin
   if p_transaction_type is null then
      return l_serial_status_new;
    elsif p_transaction_type = 'ACCEPT' then
      return l_serial_status_rcv;
    elsif p_transaction_type = 'REJECT' then
      return l_serial_status_rcv;
    elsif p_transaction_type = 'RECEIVE' THEN
      --Bug 7129718, we will always change the org of serial
      --   to receiving org and status to 'In Receiving' after receipt transaction.
      --   If its direct routing, then in the same session INV TM
      --   updates serial status to 'Resides in Stores'.
      --   Now, the LPN and the Serials will be in sync with each other.
      return l_serial_status_rcv;

      --IF (Nvl(p_auto_transact_code,'@@@@') <> 'DELIVER') THEN
      --   return l_serial_status_rcv;
      --ELSE
      --   -- Returns the status as -9999 otherwise fails for
      --   -- Direct routing cases in INV Txn Manager.
      --   -- and in update_serial_status when the values is -9999 don't
      --   -- update the status
      --   -- RETURN l_serial_status_inv;
      --   -- Bug 3184500
      --   return -9999;
      --END IF;

    elsif p_transaction_type = 'TRANSFER' then
      return l_serial_status_rcv;
    elsif p_transaction_type = 'DELIVER' then
      return l_serial_status_inv;
    elsif p_transaction_type = 'SHIP' then
      --Bug 4337726. A ship transaction with auto transact code as receive
      --should be treated like a receipt transaction
      IF (Nvl(p_auto_transact_code, 'SHIP') = 'RECEIVE') THEN
         RETURN l_serial_status_rcv;
       ELSE
         return l_serial_status_intransit;
      END IF;
    ELSIF p_transaction_type = 'RETURN TO RECEIVING' THEN
      RETURN l_serial_status_rcv;
    ELSIF p_transaction_type IN ('RETURN TO VENDOR', 'RETURN TO CUSTOMER') THEN
      RETURN l_serial_status_issued;
    ELSIF p_transaction_type = 'CORRECT' THEN
      IF (Nvl(p_parent_transaction_type,'@@@') IN ('ACCEPT','REJECT','TRANSFER')) THEN
	 RETURN l_serial_status_rcv;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') = 'DELIVER') THEN
	 IF (Nvl(p_quantity, 0) < 0) THEN
	    RETURN l_serial_status_rcv;
	  ELSIF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN l_serial_status_inv;
	  ELSE
	    RETURN l_serial_status_new;
	 END IF;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') = 'RECEIVE') THEN
	 IF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN l_serial_status_rcv;
	  ELSE
	    RETURN l_serial_status_new;
	 END IF;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') = 'RETURN TO RECEIVING') THEN
	 IF (Nvl(p_quantity, 0) < 0) THEN
	    RETURN l_serial_status_inv;
	  ELSIF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN l_serial_status_rcv;
	  ELSE
	    RETURN l_serial_status_new;
	 END IF;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') IN ('RETURN TO VENDOR','RETURN TO CUSTOMER')) THEN
	 IF(Nvl(p_quantity, 0) < 0) THEN
	    IF (Nvl(p_parent_parent_txn_type,'@@@@') = 'DELIVER') THEN
	       RETURN l_serial_status_inv;
	     ELSIF p_parent_parent_txn_type IS NOT NULL THEN
	       RETURN l_serial_status_rcv;
	     ELSE
	       RETURN l_serial_status_new;
	    END IF;
	  ELSIF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN l_serial_status_issued;
	  ELSE
	    RETURN l_serial_status_new;
         END IF;
       ELSE
	 RETURN l_serial_status_new;
      END IF;
    else
      return l_serial_status_new;
   end if;
Exception
   when others then
      return l_serial_status_new;
End get_serial_status;

-- Description
-- THIS procedure updates the serial Status
--
PROCEDURE update_serial_status (  p_product_txn_id           IN NUMBER
				  ,p_item_id                  IN NUMBER
				  ,p_organization_id          IN NUMBER
				  ,p_serial_status            IN NUMBER
				  ,p_inspection_status        IN NUMBER
				  ,p_sub                      IN VARCHAR2 default null
				  ,p_locator_id               IN NUMBER default null
				  ,x_return_status            OUT NOCOPY VARCHAR2
				  ,x_msg_count                OUT NOCOPY NUMBER
				  ,x_msg_data                 OUT NOCOPY VARCHAR2 ) IS

				     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
				     l_progress VARCHAR2(15) := '10';
			             l_count NUMBER; --bug 5008139
				     l_comms_nl_trackable_flag mtl_system_items.comms_nl_trackable_flag%type;--Bug6374074
				     l_destination_type        rcv_transactions_interface.destination_type_code%type;--Bug6374074
				     l_clear_line_mark_id      number;--Bug6374074( if l_clear_line_mark_id = 1 then clear the line_mark_id field
				                                      --            else preserve the line_mark_id field


Begin

   x_return_status  := g_ret_sts_success;
   l_progress := 'WMSINB-12562';

   --BUG 5008139 -- Getting the count of serial records in MSNT
   select count(*)
   into   l_count
   from   mtl_serial_numbers_temp
   where  product_code = 'RCV'
   and    product_transaction_id = p_product_txn_id;

   IF (l_debug = 1) THEN
      print_debug('update_serial_status : l_count = '||l_count, 1);
   END IF;

   --Bug 7129718, we will always change the org of serial
   --   to receiving org after receipt transaction.
   --   If its direct routing, then in the same session INV TM
   --   updates serial status to 'Resides in Stores'.
   --   Now, the LPN and the Serials will be in sync with each other.

   --Bug: 5524134
   -- For direct deliver case we need not update the columns, if the serial
   -- status is -9999. This would ensure that the serial number uniqueness
   -- checks from inventory side goes through fine. These columns would be
   -- updated by the INV TM after serial uniqueness check.
   --

   --Bug#6374074:
   -- While receiving eIB tracked, 'Serial' or 'Lot and Serial' controlled items
   -- with Expense destination, hook maintained between Instal base and
   -- Receiving lost and because of this 'Instal base' is not able to view
   -- the Serial numbers in their forms.
   -- If the item is instalbased item and the transaction is for 'EXPENSE'
   -- destination, then dont clear the line_mark_id else we can clear the
   -- line_mark_id. Modified the update statments based on the above said condition.

   --Bug 5008139, running below update only if there are serial records in MSNT

   IF (l_count > 0) THEN
      --Bug 6374074, Checking whether the item is instal based tracked
      SELECT Nvl(comms_nl_trackable_flag,'N')
        INTO l_comms_nl_trackable_flag
        FROM mtl_system_items
       WHERE inventory_item_id = p_item_id
         AND organization_id= p_organization_id;

       IF l_comms_nl_trackable_flag = 'Y' THEN
         --Check whether this transaction is for EXPENSE destination
         --Then we have to preserve the line_mark_id and lot_line_mark_id
         SELECT nvl(destination_type_code,'dummy')
           INTO l_destination_type
           FROM rcv_transactions_interface
          WHERE interface_transaction_id = p_product_txn_id;

          IF l_destination_type = 'EXPENSE' THEN
             --Don't clear the line_mark_id and lot_line_mark_id
              l_clear_line_mark_id := 0;
          ELSE
              --Clear the line_mark_id and lot_line_mark_id
              l_clear_line_mark_id := 1;
          END IF;
       ELSE--IF l_comms_nl_trackable_flag = 'Y' THEN
          l_clear_line_mark_id := 1;
       END IF;--IF l_comms_nl_trackable_flag = 'Y' THEN

       -- Bug 7129718, Replacing all the branching by a single update.
       --    serial status of -9999 won't come into picture now as even during direct routing,
       --    we set serial status to 'In Receiving'. INV TM will change the status to
       --    'Resides in Stores' in the same session.

       -- Bug 7427382 Updating columns owning org and planning org also.

       update mtl_serial_numbers msn
          set msn.current_status = p_serial_status
            , inspection_status = p_inspection_status
            , group_mark_id = NULL
            , line_mark_id = decode(l_clear_line_mark_id, 1, NULL, line_mark_id)
            , lot_line_mark_id = decode(l_clear_line_mark_id, 1, NULL, lot_line_mark_id)
            , current_organization_id = p_organization_id
            , owning_organization_id = decode(owning_tp_type, 2, p_organization_id, owning_organization_id)
            , planning_organization_id = decode(planning_tp_type, 2, p_organization_id, planning_organization_id)
            , current_subinventory_code = p_sub
            , current_locator_id = p_locator_id
        where
           -- msn.inventory_item_id       = p_item_id
           -- and msn.current_organization_id = p_organization_id -- this part is not needed as this was causing INTSHIP RECEIVE to fail
           -- BUG 5611567
              msn.ROWID in (
                   select msn1.ROWID
                     from mtl_serial_numbers msn1
                        , mtl_serial_numbers_temp msnt
                    where msn1.inventory_item_id = p_item_id
                      and msnt.product_code = 'RCV'
                      and msnt.product_transaction_id = p_product_txn_id
                      and msn1.serial_number between msnt.fm_serial_number and msnt.to_serial_number
                      AND Length(msn1.serial_number) = Length(msnt.fm_serial_number)
                      AND length(msnt.fm_serial_number)=Length(nvl(msnt.to_serial_number,msnt.fm_serial_number))  --BUG 3818544
                           );


--      --BEGIN Bug: 5524134
--      IF p_serial_status = -9999 THEN
--         IF l_clear_line_mark_id = 1  THEN --{
--            update mtl_serial_numbers msn
--            set
--             group_mark_id = NULL,
--             line_mark_id = NULL,
--             lot_line_mark_id = NULL
--            where msn.inventory_item_id       = p_item_id
--            -- and msn.current_organization_id = p_organization_id -- this part is not needed as this was causing INTSHIP RECEIVE to fail
--            and exists ( select 1
--                     from mtl_serial_numbers_temp msnt
--                     where msnt.product_code = 'RCV'
--                     and msnt.product_transaction_id = p_product_txn_id
--                     and msn.serial_number between msnt.fm_serial_number and msnt.to_serial_number
--                     AND Length(msn.serial_number) = Length(msnt.fm_serial_number)
--                     AND length(msnt.fm_serial_number)=Length(Nvl(msnt.to_serial_number,msnt.fm_serial_number))  --BUG 3818544
--                     )
--            ;
--         ELSE --l_clear_line_mark_id = 1 }{
--            update mtl_serial_numbers msn
--            set
--             group_mark_id = NULL
--            where msn.inventory_item_id       = p_item_id
--            -- and msn.current_organization_id = p_organization_id -- this part is not needed as this was causing INTSHIP RECEIVE to fail
--            and exists ( select 1
--                     from mtl_serial_numbers_temp msnt
--                     where msnt.product_code = 'RCV'
--                     and msnt.product_transaction_id = p_product_txn_id
--                     and msn.serial_number between msnt.fm_serial_number and msnt.to_serial_number
--                     AND Length(msn.serial_number) = Length(msnt.fm_serial_number)
--                     AND length(msnt.fm_serial_number)=Length(Nvl(msnt.to_serial_number,msnt.fm_serial_number))  --BUG 3818544
--                     )
--            ;
--         END IF;--l_clear_line_mark_id = 1 }
--      ELSE
--      --END Bug: 5524134
--         IF l_clear_line_mark_id = 1  THEN --{
--            update mtl_serial_numbers msn
--              set msn.current_status = p_serial_status
--              , inspection_status = p_inspection_status
--              , group_mark_id = NULL
--              , line_mark_id = NULL
--              , lot_line_mark_id = NULL
--              , current_organization_id = p_organization_id
--              , current_subinventory_code = p_sub
--              , current_locator_id = p_locator_id
--                where
--              -- msn.inventory_item_id       = p_item_id
--              -- and msn.current_organization_id = p_organization_id -- this part is not needed as this was causing INTSHIP RECEIVE to fail
--                      -- BUG 5611567
--                      msn.ROWID in ( select msn1.ROWID
--                           from mtl_serial_numbers msn1 ,
--                           mtl_serial_numbers_temp msnt
--                           where msn1.inventory_item_id = p_item_id
--                           and msnt.product_code = 'RCV'
--                           and msnt.product_transaction_id = p_product_txn_id
--                           and msn1.serial_number between msnt.fm_serial_number and msnt.to_serial_number
--                           AND Length(msn1.serial_number) = Length(msnt.fm_serial_number)
--                           AND length(msnt.fm_serial_number)=Length(nvl(msnt.to_serial_number,msnt.fm_serial_number))  --BUG 3818544
--                           )
--            ;
--         ELSE--l_clear_line_mark_id = 1 }{
--            update mtl_serial_numbers msn
--              set msn.current_status = p_serial_status
--              , inspection_status = p_inspection_status
--              , group_mark_id = NULL
--              , current_organization_id = p_organization_id
--              , current_subinventory_code = p_sub
--              , current_locator_id = p_locator_id
--                where
--              -- msn.inventory_item_id       = p_item_id
--              -- and msn.current_organization_id = p_organization_id -- this part is not needed as this was causing INTSHIP RECEIVE to fail
--                      -- BUG 5611567
--                      msn.ROWID in ( select msn1.ROWID
--                           from mtl_serial_numbers msn1 ,
--                           mtl_serial_numbers_temp msnt
--                           where msn1.inventory_item_id = p_item_id
--                           and msnt.product_code = 'RCV'
--                           and msnt.product_transaction_id = p_product_txn_id
--                           and msn1.serial_number between msnt.fm_serial_number and msnt.to_serial_number
--                           AND Length(msn1.serial_number) = Length(msnt.fm_serial_number)
--                           AND length(msnt.fm_serial_number)=Length(nvl(msnt.to_serial_number,msnt.fm_serial_number))  --BUG 3818544
--                           )
--            ;
--         END IF;--l_clear_line_mark_id = 1 }
--      --End of bug 6374074
--    END IF; --BUG 5524134
    END IF; --BUG 5008139
   l_progress := 'WMSINB-12577';
Exception
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('update_serial_status  : - other exception:'|| l_progress || ' ' ||
                     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
         inv_mobile_helper_functions.sql_error('inv_rcv_integration_pvt.update_serial_status',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);

End update_serial_status;


-- Description
-- THIS procedure updates the context/ org/ sub/ locator of LPN
--
PROCEDURE update_lpn_location_context ( p_organization_id          IN NUMBER
					,p_sub                      IN VARCHAR2
					,p_locator                  IN NUMBER
					,p_lpn_context              IN NUMBER
					,p_lpn_id                   IN NUMBER
					,x_return_status            OUT NOCOPY VARCHAR2
					,x_msg_count                OUT NOCOPY NUMBER
					,x_msg_data                 OUT NOCOPY VARCHAR2
					,p_source_name              IN VARCHAR2 DEFAULT NULL
					,p_source_header_id         IN NUMBER DEFAULT NULL
					,p_source_type_id           IN NUMBER DEFAULT NULL) IS

					   l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
					   l_progress VARCHAR2(15) := '10';
					   l_lpn_rec WMS_LICENSE_PLATE_NUMBERS%rowtype;

BEGIN

   -- Initialize API return status to success
   x_return_status  := g_ret_sts_success;

   l_progress := 'WMSINB-12617';

   l_lpn_rec.lpn_id := p_lpn_id;

   if p_lpn_context is not null then
      l_lpn_rec.lpn_context := p_lpn_context;
   End if;

   l_lpn_rec.SUBINVENTORY_CODE := p_sub;
   l_lpn_rec.LOCATOR_ID := p_locator;
   l_lpn_rec.ORGANIZATION_ID := p_organization_id ;
   l_lpn_rec.source_header_id := Nvl(p_source_header_id, FND_API.G_MISS_NUM); -- Modified by 13591755 for GRUPO
   l_lpn_rec.source_name := Nvl(p_source_name, FND_API.G_MISS_CHAR); -- Modified by 13591755 for GRUPO
   l_lpn_rec.source_type_id := Nvl(p_source_type_id, FND_API.G_MISS_NUM); -- Modified by 13591755 for GRUPO

   IF (l_debug = 1) THEN
      print_debug(' update_lpn_location_context : lpn_id = '||p_lpn_id,1);
      print_debug(' update_lpn_location_context : lpn_context = '|| p_lpn_context , 1);
      print_debug(' update_lpn_location_context : sub = '|| p_sub , 1);
      print_debug(' update_lpn_location_context : locator = '|| p_locator , 1);
      print_debug(' update_lpn_location_context : organization_id = '|| p_organization_id , 1);
      print_debug(' update_lpn_location_context : source_header_id = '|| p_source_header_id , 1);
      print_debug(' update_lpn_location_context : source_name = '|| p_source_name , 1);
      print_debug(' update_lpn_location_context : source_type_id = '|| p_source_type_id , 1);
   END IF;

   wms_container_pvt.modify_lpn ( p_api_version           => 1.0,
				  x_return_status         =>    x_return_status ,
				  x_msg_count             =>    x_msg_count ,
				  x_msg_data              =>    x_msg_data,
				  p_validation_level      =>    fnd_api.g_valid_level_none,
				  p_lpn                   =>    l_lpn_rec);

   l_progress := 'WMSINB-12645';

   -- Check the error status from the above call
   if x_return_status <> G_RET_STS_SUCCESS Then
      --  Review Late Set Appropiate Message
      l_progress := 'WMSINB-12650';
      RAISE FND_API.G_EXC_ERROR;
   End if;

Exception
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('update_lpn_location_context : - other exception:'|| l_progress || ' ' ||
                     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
         inv_mobile_helper_functions.sql_error('inv_rcv_integration_pvt.update_lpn_location_context',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);

END update_lpn_location_context ;

Function get_lpn_context(p_transaction_type IN VARCHAR2
			 , p_routing_header_id IN NUMBER DEFAULT NULL
			 , p_parent_transaction_type IN VARCHAR2 DEFAULT NULL
			 , p_parent_parent_txn_type IN VARCHAR2 DEFAULT NULL
			 , p_quantity IN NUMBER DEFAULT NULL
			 , p_auto_transact_code IN VARCHAR2 DEFAULT NULL
			 ) return NUMBER
  is
Begin
   if p_transaction_type is null then
      return G_LPN_CONTEXT_PREGENERATED;
    elsif p_transaction_type = 'ACCEPT' then
      return G_LPN_CONTEXT_RCV;
    elsif p_transaction_type = 'REJECT' then
      return G_LPN_CONTEXT_RCV;
    elsif p_transaction_type = 'RECEIVE' THEN
      IF (Nvl(p_auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN
	 return G_LPN_CONTEXT_RCV;
       ELSE
	 RETURN g_lpn_context_inv;
      END IF;
    elsif p_transaction_type = 'TRANSFER' then
      return G_LPN_CONTEXT_RCV;
    elsif p_transaction_type = 'DELIVER' then
      return G_LPN_CONTEXT_INV;
    elsif p_transaction_type = 'SHIP' then
      --Bug 4337726. A ship transaction with auto transact code as receive
      --should be treated like a receipt transaction
      IF (Nvl(p_auto_transact_code, 'SHIP') = 'RECEIVE') THEN
         RETURN g_lpn_context_rcv;
       ELSE
         RETURN G_LPN_CONTEXT_VENDOR;
      END IF;
    ELSIF p_transaction_type = 'RETURN TO RECEIVING' THEN
      RETURN g_lpn_context_rcv;
    ELSIF p_transaction_type IN ('RETURN TO VENDOR', 'RETURN TO CUSTOMER') THEN
      RETURN g_lpn_context_stores;
    ELSIF p_transaction_type = 'CORRECT' THEN
      IF (Nvl(p_parent_transaction_type,'@@@') IN ('ACCEPT','REJECT','TRANSFER')) THEN
	 RETURN g_lpn_context_rcv;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') = 'DELIVER') THEN
	 IF (Nvl(p_quantity, 0) < 0) THEN
	    RETURN g_lpn_context_rcv;
	  ELSIF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN g_lpn_context_inv;
	  ELSE
	    RETURN g_lpn_context_pregenerated;
	 END IF;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') = 'RECEIVE') THEN
	 IF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN g_lpn_context_rcv;
	  ELSE
	    RETURN g_lpn_context_pregenerated;
	 END IF;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') = 'RETURN TO RECEIVING') THEN
	 IF (Nvl(p_quantity, 0) < 0) THEN
	    RETURN g_lpn_context_inv;
	  ELSIF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN g_lpn_context_rcv;
	  ELSE
	    RETURN g_lpn_context_pregenerated;
	 END IF;
       ELSIF (Nvl(p_parent_transaction_type,'@@@') IN ('RETURN TO VENDOR','RETURN TO CUSTOMER')) THEN
	 IF(Nvl(p_quantity, 0) < 0) THEN
	    IF (Nvl(p_parent_parent_txn_type,'@@@@') = 'DELIVER') THEN
	       RETURN g_lpn_context_inv;
	     ELSIF p_parent_parent_txn_type IS NOT NULL THEN
	       RETURN g_lpn_context_rcv;
	     ELSE
	       RETURN g_lpn_context_pregenerated;
	    END IF;
	  ELSIF (Nvl(p_quantity, 0) > 0) THEN
	    RETURN g_lpn_context_stores;
	  ELSE
	    RETURN g_lpn_context_pregenerated;
         END IF;
       ELSE
	 RETURN g_lpn_context_pregenerated;
      END IF;
    else
      return G_LPN_CONTEXT_PREGENERATED;
   end if;
Exception
   when others then
      return G_LPN_CONTEXT_PREGENERATED;
End get_lpn_context;

-- R12
PROCEDURE  check_reference(
                            p_old_reference           IN VARCHAR2
                           ,p_old_reference_type_code IN NUMBER
                           ,p_old_reference_id        IN NUMBER
                           ,p_new_reference           IN VARCHAR2
                           ,p_new_reference_type_code IN NUMBER
                           ,p_new_reference_id        IN NUMBER
                           ,x_reference               OUT NOCOPY  VARCHAR2
                           ,x_reference_type_code     OUT NOCOPY NUMBER
                           ,x_reference_id            OUT NOCOPY NUMBER
                           ,x_transaction_type_id     OUT NOCOPY NUMBER
                           ,x_txn_source_type_id      OUT NOCOPY NUMBER
                           ,x_return_status           OUT NOCOPY VARCHAR2
                           ,x_msg_count               OUT NOCOPY NUMBER
                           ,x_msg_data                OUT NOCOPY VARCHAR2
                          ) is

L_DEBUG NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
l_progress      VARCHAR2(15) := '40400';
l_proc_name     VARCHAR2(30) := 'CHECK_REFERENCE';
l_same_doc      NUMBER;
l_asn_line_flag VARCHAR2(1);

Begin

   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('Entering '||l_proc_name||':'|| l_progress,1);
      print_debug('p_old_reference           = '||p_old_reference ,1);
      print_debug('p_old_reference_type_code = '||p_old_reference_type_code ,1);
      print_debug('p_old_reference_id        = '||p_old_reference_id ,1);
      print_debug('p_new_reference           = '||p_new_reference ,1);
      print_debug('p_new_reference_type_code = '||p_new_reference_type_code ,1);
      print_debug('p_new_reference_id        = '||p_new_reference_id ,1);
      l_progress := 'WMSINB-40400';
   END IF;

   x_reference           := p_new_reference;
   x_reference_type_code := p_new_reference_type_code;
   x_reference_id        := p_new_reference_id;

   l_progress := 'WMSINB-40401';

   if nvl(p_old_reference,'@#$') = nvl(p_new_reference,'@#$') then
      if nvl(p_old_reference_id,-9999) = nvl(p_new_reference_id,-9999) then
           IF (l_debug = 1) THEN
              print_debug(l_proc_name||' Reference Ids are same '|| l_progress,1);
           End if;
       Else
           IF (l_debug = 1) THEN
              print_debug(l_proc_name||' Reference Ids are different '|| l_progress,1);
           End if;

           l_progress := 'WMSINB-40404';

           -- REFERENCE INFO IS FROM THE SAME DOC TYPE BUT FROM DIFF DOCS

           -- KEEP THE SAME DOC TYPE BUT PUT THE ID's AS NULL IF THEY
           -- POINT TO DIFF DOCS.
/*
 Commenting for bug 13613257

           If p_new_reference = 'PO_LINE_LOCATION_ID' then
              IF (l_debug = 1) THEN
                 print_debug(l_proc_name||' CHECK FOR PO '|| l_progress,1);
              End if;
              BEGIN
                 select 1
                   into l_same_doc
                   from PO_LINE_LOCATIONS_ALL POLL
                  where POLL.LINE_LOCATION_ID = p_old_reference_id
                    and POLL.PO_HEADER_ID in ( select POLL1.PO_HEADER_ID
                                              from PO_LINE_LOCATIONS_ALL POLL1
                                             where POLL1.LINE_LOCATION_ID
                                                     = p_new_reference_id )
                    and rownum < 2;

                    l_progress := 'WMSINB-40405';

              EXCEPTION
                WHEN OTHERS THEN
                    l_progress := 'WMSINB-40406';
                    IF (l_debug = 1) THEN
                       print_debug(l_proc_name||' POs  are different '|| l_progress,1);
                    End if;
                    x_reference_id        := NULL;
              END;
           End if;

           If p_new_reference = 'ORDER_LINE_ID' then
               l_progress := 'WMSINB-40407';
               IF (l_debug = 1) THEN
                 print_debug(l_proc_name||' CHECK FOR RMA '|| l_progress,1);
               End if;
               BEGIN
                 select 1
                   into l_same_doc
                   from OE_ORDER_LINES_ALL OEL
                  where OEL.LINE_ID = p_old_reference_id
                    and OEL.HEADER_ID in ( select OEL1.HEADER_ID
                                              from OE_ORDER_LINES_ALL OEL1
                                             where OEL1.LINE_ID
                                                     = p_new_reference_id )
                    and rownum < 2;
                  l_progress := 'WMSINB-40408';
              EXCEPTION
                WHEN OTHERS THEN
                    l_progress := 'WMSINB-40409';
                    IF (l_debug = 1) THEN
                       print_debug(l_proc_name||' ORDERS are different '|| l_progress,1);
                    End if;
                    x_reference_id        := NULL;
               END;
           End if;

           If p_new_reference = 'SHIPMENT_LINE_ID' then
              BEGIN
                 l_progress := 'WMSINB-40410';

                 select nvl(asn_line_flag,'N')
                   into l_asn_line_flag
                   from rcv_shipment_lines rsl
                  where rsl.shipment_line_id = p_old_reference_id
                  ;

                 If l_asn_line_flag = 'Y' then
                   -- CASE FOR ASN
                     SELECT 1
                       INTO l_same_doc
                       FROM rcv_shipment_lines rsl, po_line_locations_all poll
                      WHERE rsl.shipment_line_id = p_old_reference_id
                        AND poll.line_location_id = rsl.po_line_location_id
                        AND poll.po_header_id in ( select poll1.po_header_id
                                                     from rcv_shipment_lines rsl1, po_line_locations_all poll1
                                                    where rsl1.shipment_line_id = p_new_reference_id
                                                      and poll1.line_location_id = rsl1.po_line_location_id )
                        AND rownum < 2;
                        l_progress := 'WMSINB-40411';
                  Else
                    -- CASE FOR INTSHIP/INTREQ
                    l_progress := 'WMSINB-40412';
                       SELECT 1
                       INTO l_same_doc
                       FROM rcv_shipment_lines rsl
                      WHERE rsl.shipment_line_id = p_old_reference_id
                        AND rsl.shipment_header_id in ( select rsl1.shipment_header_id
                                                          from rcv_shipment_lines rsl1
                                                         where rsl1.shipment_line_id = p_new_reference_id
                                                      )
                        AND rownum < 2;
                        l_progress := 'WMSINB-40413';
                  End if;
              EXCEPTION
                WHEN OTHERS THEN
                    l_progress := 'WMSINB-40414';
                    IF (l_debug = 1) THEN
                       print_debug(l_proc_name||' SHIPMENT DIFFERENT '|| l_progress,1);
                    End if;
                    x_reference_id        := NULL;
              END;
           End if;
*/
           x_reference_id        := NULL;
       End if;
   Else
       IF (l_debug = 1) THEN
           print_debug(l_proc_name||' Reference Types are different '|| l_progress,1);
       End if;
       l_progress := 'WMSINB-40415';
       x_reference           := null;
       x_reference_type_code := null;
       x_reference_id        := null;

       x_transaction_type_id := 81;   -- CHANGE IT WITH THE RIGHT TXN TYPE -- VISHY ?????
       x_txn_source_type_id  := 4;
   End if;

   IF (l_debug = 1) THEN
         print_debug(l_proc_name||' x_reference = '|| x_reference,1);
         print_debug(l_proc_name||' x_reference_type_code = '|| x_reference_type_code,1);
         print_debug(l_proc_name||' x_reference_id = '|| x_reference_id,1);
         print_debug(l_proc_name||' x_transaction_type_id = '|| x_transaction_type_id,1);
         print_debug(l_proc_name||' x_txn_source_type_id = '|| x_txn_source_type_id,1);
   End if;

EXCEPTION
   WHEN OTHERS THEN
      IF (l_debug = 1) THEN
         print_debug('CHECK_REFERENCE: Exception occured aftr l_progress = '
                     || l_progress,1);
      END IF;
      x_return_status := g_ret_sts_unexp_error;
End check_reference;
-- R12

-- R12
PROCEDURE maintain_mo_con(p_rti_id IN NUMBER,
		      p_primary_quantity IN NUMBER,
		      p_primary_uom_code IN VARCHAR2,
		      p_mmtt_temp_id IN NUMBER,
		      p_org_id IN NUMBER,
		      p_item_id IN NUMBER,
		      p_revision IN VARCHAR2,
		      p_qty IN NUMBER,
		      p_uom_code IN VARCHAR2,
		      p_lpn_id IN NUMBER,
		      p_transfer_lpn_id IN NUMBER,
		      p_lot_control_code IN NUMBER,
		      p_serial_number_control_code IN NUMBER,
		      p_lot_number IN VARCHAR2,
		      p_po_line_location_id IN NUMBER,
		      p_po_distribution_id IN NUMBER,
		      p_shipment_line_id IN NUMBER,
		      p_oe_order_line_id IN NUMBER,
		      p_routing_header_id IN NUMBER,
		      p_subinventory IN VARCHAR2,
		      p_locator_id IN NUMBER,
		      p_from_subinventory IN VARCHAR2,
		      p_from_locator_id IN NUMBER,
		      p_project_id IN NUMBER DEFAULT NULL,
		      p_task_id IN NUMBER DEFAULT NULL,
		      x_transaction_id OUT nocopy NUMBER,
		      x_return_status OUT nocopy VARCHAR2,
		      x_msg_count OUT nocopy NUMBER,
		      x_msg_data OUT nocopy VARCHAR2,
                      -- OPMConvergence
                      p_sec_qty IN NUMBER DEFAULT NULL,
                      p_sec_uom IN VARCHAR DEFAULT NULL,
                      -- OPMConvergence
                      p_auto_transact_code IN VARCHAR2 DEFAULT NULL,
                      p_asn_line_flag IN VARCHAR2 DEFAULT NULL ,
                      p_validation_flag IN VARCHAR2 DEFAULT NULL,
                      -- Bug# 7154105
                      p_req_distribution_id IN NUMBER DEFAULT NULL
  )
  IS
     /* Bug: 5064782: Modified the where clause condition for project_id and task_id
                      for the cursors c_mol_mmtt and c_mol_no_mmtt */

     CURSOR c_mol_mmtt (
                        p_mmtt_id NUMBER,
                        p_item NUMBER,
                        p_lpn NUMBER,
			p_lot VARCHAR2,
                        p_rev VARCHAR2,
                        p_from_sub varchar2,
                        p_from_locator_id NUMBER,
                        p_project_id NUMBER,
                        p_task_id NUMBER,
                        p_inspection_status NUMBER
     ) IS
	SELECT DISTINCT mtrl.line_id
          , 1 UOM_ORDERING
	  , mmtt.transaction_temp_id
	  , mtrl.wms_process_flag
	  , 1 quantity_ordering
	  , (mtrl.quantity - Nvl(mtrl.quantity_delivered, 0)) quantity
	  , mtrl.primary_quantity
	  , mtrl.uom_code
	  , mtrl.lpn_id
	  , mtrl.inventory_item_id
	  , mtrl.lot_number
          -- OPMConvergence
          , (mtrl.secondary_quantity - Nvl(mtrl.secondary_quantity_delivered, 0)) secondary_quantity_2
	  , mtrl.secondary_quantity
	  , mtrl.secondary_uom_code
          , mtrl.crossdock_type
          -- OPMConvergence
          , mtrl.backorder_delivery_detail_id
          , mmtt.wip_supply_type
          , mtrl.reference
          , mtrl.reference_type_code
          , mtrl.reference_id
	  , mtrl.quantity txn_qty
	  , mtrl.quantity_detailed quantity_detailed
	  , mtrl.quantity_delivered quantity_delivered
	  FROM mtl_txn_request_lines mtrl
	  , mtl_material_transactions_temp mmtt
	WHERE mtrl.organization_id = p_org_id
          AND nvl(mtrl.from_subinventory_code,'@$#_') = nvl(p_from_sub,'@$#_')
          AND nvl(mtrl.from_locator_id,-1) = nvl(p_from_locator_id,-1)
          AND ( nvl(mtrl.project_id,-1) = nvl(p_project_id,-1) OR p_project_id IS NULL )
          AND ( nvl(mtrl.task_id,-1) = nvl(p_task_id,-1) OR p_task_id IS NULL )
          AND Nvl(inspection_status,-1)    = Nvl(p_inspection_status,-1)
          AND mtrl.inventory_item_id = p_item
          AND Nvl(mtrl.revision, Nvl(p_rev, '@@@@')) = Nvl(p_rev, '@@@@')
          AND Nvl(mtrl.lpn_id, -1) = Nvl(p_lpn, -1)
          AND Nvl(mtrl.lot_number, Nvl(p_lot,'@$#_')) = Nvl(p_lot, '@$#_')
	  AND mmtt.transaction_temp_id = p_mmtt_id
	  AND mmtt.move_order_line_id = mtrl.line_id
	  AND (mtrl.quantity - Nvl(mtrl.quantity_delivered, 0)) > 0
	  AND mtrl.line_status <> inv_globals.G_TO_STATUS_CLOSED
	  AND exists (SELECT 1
		      FROM  mtl_txn_request_headers mtrh
		      WHERE mtrh.move_order_type = inv_globals.g_move_order_put_away
		      AND   mtrh.header_id = mtrl.header_id)
	  ORDER BY 3 DESC;

     l_mol_rec c_mol_mmtt%ROWTYPE;
     -- Bug 7460491 Removed the OR project id, task id is null in the where clause
     -- Bug 8463898, Modified the cursor to by-pass the check for MTRL project/task when p_lpn is NULL
     CURSOR c_mol_no_mmtt (
                           p_item NUMBER,
                           p_lpn NUMBER,
			   p_lot VARCHAR2,
                           p_rev VARCHAR2,
                           p_from_sub varchar2,
                           p_from_locator_id NUMBER,
                           -- p_cost_group_id NUMBER, ????
                           p_project_id NUMBER,
                           p_task_id NUMBER,
                           p_inspection_status NUMBER ,
                           p_uom_code varchar2,
						   p_new_reference_id NUMBER  ----14133874
                   ) IS
 		              --Bug 5231114:Added the condition on transaction_source_type_id and
                              -- transaction_action_id for the following combinations:13/12 and 4/27
			      SELECT DISTINCT mtrl.line_id
                                , Decode(p_uom_code,mtrl.uom_code,2,1)
				uom_ordering --changed the order
		                -- we are doing a order by desc
				, Decode(mmtt.transaction_source_type_id||'#'||mmtt.transaction_action_id,'1#27',1,
					 '7#12',1,'12#27',1,'13#12',1,'4#27',1, null) transaction_temp_id
				, Nvl(mtrl.wms_process_flag,1)--when ordering by DESC, NULL would come first;
				                              --just do an NVL here
				, Decode(mtrl.primary_quantity
					 ,p_primary_quantity
					 ,1
					 ,2) quantity_ordering
				, (mtrl.quantity - Nvl(mtrl.quantity_delivered, 0)) quantity
				, mtrl.primary_quantity
				, mtrl.uom_code
				, mtrl.lpn_id
				, mtrl.inventory_item_id
				, mtrl.lot_number
                                -- OPMConvergence
				, (mtrl.secondary_quantity - Nvl(mtrl.secondary_quantity_delivered, 0)) secondary_quantity_2
	                        , mtrl.secondary_quantity
	                        , mtrl.secondary_uom_code
                                -- OPMConvergence
                                , mtrl.crossdock_type
                                , mtrl.backorder_delivery_detail_id
                                , mmtt.wip_supply_type
                                , mtrl.reference
                                , mtrl.reference_type_code
                                , mtrl.reference_id
				, mtrl.quantity txn_qty
				, mtrl.quantity_detailed quantity_detailed
				, mtrl.quantity_delivered quantity_delivered
				FROM mtl_txn_request_lines mtrl
				, mtl_material_transactions_temp mmtt
				WHERE mtrl.organization_id = p_org_id
                                AND nvl(mtrl.from_subinventory_code,'@$#_') = nvl(p_from_sub,'@$#_')
                                AND nvl(mtrl.from_locator_id,-1) = nvl(p_from_locator_id,-1)
                                AND ( nvl(mtrl.project_id,-1) = nvl(p_project_id,-1) OR p_lpn IS NULL)
                                AND ( nvl(mtrl.task_id,-1) = nvl(p_task_id,-1) OR p_lpn IS NULL)
                                AND Nvl(inspection_status,-1)    = Nvl(p_inspection_status,-1)
				AND mtrl.inventory_item_id = p_item
				AND Nvl(mtrl.revision, Nvl(p_rev, '@@@@')) = Nvl(p_rev, '@@@@')
				AND Nvl(mtrl.lpn_id, -1)=Decode(Nvl(p_lpn,-1),-1,Nvl(mtrl.lpn_id, -1),p_lpn) --bug 9578275
				AND Nvl(mtrl.lot_number, Nvl(p_lot,'@$#_')) = Nvl(p_lot, '@$#_')
				AND (mtrl.quantity - Nvl(mtrl.quantity_delivered, 0)) > 0
				AND mmtt.move_order_line_id (+) = mtrl.line_id
				AND mtrl.reference_id = p_new_reference_id  --14133874
				AND mmtt.organization_id (+) = mtrl.organization_id
				AND mtrl.line_status <> inv_globals.G_TO_STATUS_CLOSED
				AND exists (SELECT 1
					    FROM  mtl_txn_request_headers mtrh
					    WHERE mtrh.move_order_type = inv_globals.g_move_order_put_away
					    AND   mtrh.header_id = mtrl.header_id)
				ORDER BY 2, 3 DESC, 4 DESC, 5;--order on 3 should be DESC because,
                                                              --if it is not, NULL values wouuld come last

     CURSOR c_transfer_mol ( p_lpn NUMBER
                            ,p_item NUMBER
                            ,p_lot VARCHAR2
                            ,p_rev VARCHAR2
                            ,p_from_sub VARCHAR2
                            ,p_from_locator_id NUMBER
                            -- ,p_cost_group_id NUMBER
                            ,p_project_id    NUMBER
                            ,p_task_id NUMBER
                            ,p_uom_code varchar2
                            ,p_backorder_delivery_detail_id NUMBER
                            ,p_crossdock_type varchar2
                            ,p_transfer_inspection_status NUMBER
							,p_reference VARCHAR2   --13935217
                            ,p_reference_id NUMBER  --13935217
                            ) IS
                              SELECT
                                  mtrl.line_id                 line_id
				 ,mtrl.uom_code   uom_code  --added for bug8283511
                                -- Added columns below to make ordering same for both
                                -- from and transfer cursor
                                , Decode(p_uom_code,mtrl.uom_code,2,1) uom_ordering
				, mtrl.wms_process_flag
				, Decode(mtrl.primary_quantity
					 ,p_primary_quantity
					 ,1
					 ,2) quantity_ordering
                                ,mtrl.reference               reference
                                ,mtrl.reference_type_code     reference_type_code
                                ,mtrl.reference_id            reference_id
                                FROM mtl_txn_request_lines mtrl
                                WHERE  mtrl.organization_id = p_org_id
                                AND mtrl.inventory_item_id = p_item
                                AND mtrl.uom_code = p_uom_code
                                AND Nvl(mtrl.revision, Nvl(p_rev, '@@@')) = Nvl(p_rev, '@@@')
                                AND Nvl(mtrl.lpn_id, -1) = Nvl(p_lpn, -1)
                                AND Nvl(mtrl.lot_number, Nvl(p_lot,'@$#_')) = Nvl(p_lot, '@$#_')
                                AND (mtrl.quantity - Nvl(mtrl.quantity_delivered, 0)) > 0
                                --
                                AND Nvl(inspection_status,-1)    =
				Nvl(p_transfer_inspection_status,-1)
                                AND Nvl(from_subinventory_code,'@$#_') = Nvl(p_from_sub,'@$#_')
                                AND Nvl(from_locator_id,-1)            = Nvl(p_from_locator_id,-1)
								AND mtrl.reference                     = p_reference  --13935217
                                AND mtrl.reference_id                  = p_reference_id  --13935217
                                AND Nvl(project_id,-1)                 = Nvl(p_project_id,-1)
                                AND Nvl(task_id,-1)                    = Nvl(p_task_id,-1)
                                AND Nvl(backorder_delivery_detail_id,-1) = Nvl(p_backorder_delivery_detail_id,-1)
                                AND Nvl(crossdock_type,-1)               = Nvl(p_crossdock_type,-1)
                                -- AND Nvl(from_cost_group_id,-1)           = Nvl(p_cost_group_id,-1) ????
                                AND mtrl.line_status <> inv_globals.G_TO_STATUS_CLOSED
				AND exists (SELECT 1
					    FROM  mtl_txn_request_headers mtrh
					    WHERE mtrh.move_order_type = inv_globals.g_move_order_put_away
					    AND   mtrh.header_id = mtrl.header_id)
                                ORDER BY 2,3 DESC, 4 ;

     l_transfer_mol_rec c_transfer_mol%rowtype;

     l_transaction_id NUMBER;
     l_transaction_type VARCHAR2(25);
     l_parent_transaction_id NUMBER;
     l_source_document_code VARCHAR2(25);
     l_grand_parent_txn_id NUMBER;
     l_great_grand_parent_txn_id NUMBER;
     l_parent_txn_type VARCHAR2(25);
     l_grand_parent_txn_type VARCHAR2(25);

     l_from_sub VARCHAR2(30);
     l_from_loc_id NUMBER;

     l_remaining_primary_quantity NUMBER;
     l_mol_qty_in_puom NUMBER;
     l_quantity_delivered NUMBER;

     l_move_order_header_id NUMBER;
     l_move_order_line_id NUMBER;
     l_inspect NUMBER := NULL;
     l_transfer_org_id NUMBER := NULL;

     l_project_id NUMBER := NULL;
     l_task_id NUMBER := NULL;

     l_mo_split_tb inv_rcv_integration_apis.mo_in_tb_tp;

     l_call_pregeneration BOOLEAN := TRUE;

     l_mol_txn_id NUMBER;
     l_mol_lpn_id NUMBER;

     l_error_code NUMBER;
     l_operation_type NUMBER;

     l_dummy VARCHAR2(1);

     L_DEBUG NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '00';
     l_proc_name VARCHAR2(30) := 'MAINTAIN_MO_CON';

     -- OPMConvergence
     l_remaining_secondary_quantity NUMBER;
     l_sec_quantity_delivered       NUMBER;
     -- OPMConvergence

    l_po_line_location_id NUMBER := NULL;
    l_po_distribution_id  NUMBER := NULL;

    l_new_reference           VARCHAR2(2000);
    l_new_reference_type_code NUMBER;
    l_new_reference_id        NUMBER;

    l_reference           VARCHAR2(2000);
    l_reference_type_code NUMBER;
    l_reference_id        NUMBER;

    l_transfer_inspection_status NUMBER;
    l_from_mol_inspection_status NUMBER;
    l_rti_inspection_status_code varchar2(80);
    l_mol_res_in  cas_mol_rec_tb_tp;
    l_mol_res_out cas_mol_rec_tb_tp;

    l_transaction_type_id NUMBER;
    l_txn_source_type_id NUMBER;
    l_backorder_delivery_detail_id NUMBER;
    l_loaded NUMBER;

    l_requisition_line_id    NUMBER;
    l_po_header_id           NUMBER;
    l_auto_transact_code     VARCHAR2(25);

    l_mol_consumed_full NUMBER;
    l_split_sec_qty     NUMBER;
    l_split_qty     NUMBER;

    l_pt_inspection_status_code VARCHAR2(20);
    l_grand_pt_insp_status_code VARCHAR2(20);
    l_grt_gr_parent_insp_stat_code VARCHAR2(20);
    l_grt_gr_routing_id      NUMBER;

    l_pt_routing_id NUMBER;
    l_grand_pt_routing_id NUMBER;

    l_transfer_sub   VARCHAR2(30);
    l_transfer_locator_id NUMBER;
    l_mol_transfer_lpn_id NUMBER;
    l_qty_detailed        NUMBER;

    L_UPDATE_OR_CLOSE  VARCHAR2(1);

    l_loop_index NUMBER;
    l_is_asn     VARCHAR2(1);
    l_is_req     VARCHAR2(1) := 'N'; -- Bug 5460505

    l_tmp_qty NUMBER;
    l_tmp_qty_dlvd NUMBER;
    l_tmp_qty_dtld NUMBER;
    l_tmp_uom_code VARCHAR2(3);

    --For calling delete_reservation in REJECT cases
    l_rsv_rec      inv_reservation_global.mtl_reservation_rec_type;
    l_dummy_serial inv_reservation_global.serial_number_tbl_type;
    l_msg_count number;
    l_msg_data VARCHAR2(2000);
    l_return_status VARCHAR2(1);

    l_conversion_rate NUMBER;  -- Bug 5632202
    l_uom_code VARCHAR2(3);  -- bug8283511
    l_reason_id NUMBER ; -- Bug No.9099299
    l_discrepancy_exist VARCHAR2(1); --13395566
    l_mol_sub VARCHAR2(240);--13395566
	l_mol_loc_id NUMBER;--13395566
BEGIN

   x_return_status := g_ret_sts_success;

   x_transaction_id := -1;

   IF (l_debug = 1) THEN
      print_debug('Entering MAINTAIN_MO_CON:'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - MMTT TEMP ID:'||p_mmtt_temp_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_from_subinventory:'||p_from_subinventory||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_from_locator_id:'||p_from_locator_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_subinventory:'||p_subinventory||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_locator_id:'||p_locator_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_project_id:'||p_project_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_task_id:'||p_task_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_line_location_id:'||p_po_line_location_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_po_distribution_id:'||p_po_distribution_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_shipment_line_id:'||p_shipment_line_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_asn_line_flag:'||p_asn_line_flag||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - p_uom_code:'||p_uom_code||':'||l_progress,1);
      l_progress := 'WMSINB-40000';
   END IF;

   --QUERY RT
   BEGIN
      l_reason_id  := NULL;  -- Bug No.9099299
      SELECT transaction_id
	, transaction_type
	, parent_transaction_id
	, source_document_code
        , INSPECTION_STATUS_CODE
        , requisition_line_id
        , po_header_id
        , reason_id  -- Bug No.9099299
	INTO l_transaction_id
	, l_transaction_type
	, l_parent_transaction_id
	, l_source_document_code
        , l_rti_inspection_status_code
        , l_requisition_line_id
        , l_po_header_id
        , l_reason_id  -- Bug No.9099299
	FROM rcv_transactions
	WHERE interface_transaction_id = p_rti_id;

   EXCEPTION
      WHEN no_data_found THEN
	 --raise error
	 l_progress := 'WMSINB-40010';
	 RAISE fnd_api.g_exc_error;
      WHEN OTHERS THEN
	 --raise error
	 l_progress := 'WMSINB-40020';
	 RAISE fnd_api.g_exc_error;
   END;

   x_transaction_id := l_transaction_id;

   IF (l_debug = 1) THEN
      print_debug('MAINTAIN_MO_CON - TRANSACTION TYPE:'||l_transaction_type||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - SOURCE DOC CODE:'||l_source_document_code||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - TRANSACTION ID:'||l_transaction_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - PARENT TRANSACTION ID:'||l_parent_transaction_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - PRIMARY QUANTITY:'||p_primary_quantity||':'||l_progress,1);
      -- OPMConvergence
      print_debug(l_proc_name||'SECONDARY QUANTITY: '||p_sec_qty||':'||l_progress,1);
      print_debug(l_proc_name||'SECONDARY UOM: '||p_sec_uom||':'||l_progress,1);
      -- OPMConvergence
      l_progress := 'WMSINB-40030';
   END IF;

   --QUERY RT TO GET THE GRAND PARENT
   IF (l_transaction_type IN ('CORRECT', 'RETURN TO RECEIVING',
			      'RETURN TO VENDOR','RETURN TO CUSTOMER','ACCEPT','REJECT','TRANSFER',
                              'DELIVER')) THEN
      BEGIN
	 SELECT parent_transaction_id
	   , transaction_type
	   , subinventory
	   , locator_id
	   , inspection_status_code
           , routing_header_id
	   INTO l_grand_parent_txn_id
	   , l_parent_txn_type
	   , l_from_sub
	   , l_from_loc_id
	   , l_pt_inspection_status_code
           , l_pt_routing_id
	   FROM rcv_transactions
	   WHERE transaction_id = l_parent_transaction_id;
      EXCEPTION
	 WHEN no_data_found THEN
	    l_from_sub := NULL; --Review I think no data found in this
	    --case must raise an error.
	    l_from_loc_id := NULL;
	    l_parent_txn_type := '';
	    l_grand_parent_txn_id := -1;
      END;

      IF (l_debug = 1) THEN
         print_debug('l_pt_inspection_status_code := '||l_pt_inspection_status_code,1);
      END IF;

      IF (l_parent_txn_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER',
             'RETURN TO RECEIVING','CORRECT','ACCEPT','REJECT','DELIVER','TRANSFER')) THEN
	 BEGIN
	    SELECT parent_transaction_id
	      , transaction_type
              , inspection_status_code
              , routing_header_id
	      INTO l_great_grand_parent_txn_id
	      , l_grand_parent_txn_type
              , l_grand_pt_insp_status_code
              , l_grand_pt_routing_id
	      FROM rcv_transactions
	      WHERE transaction_id = l_grand_parent_txn_id;
	 EXCEPTION
	    WHEN no_data_found THEN
	       l_grand_parent_txn_type := '';
	       l_great_grand_parent_txn_id := -1;
               l_grand_pt_insp_status_code := null;
               l_grand_pt_routing_id := null;
	 END;

         --  Only for this case the inspection status code needs to be fetched
         --  For Great grand parent
         IF ( l_transaction_type = 'CORRECT' and
              l_parent_txn_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER',
				'RETURN TO RECEIVING') ) THEN
	    BEGIN
                select inspection_status_code
                      ,routing_header_id
                  into l_grt_gr_parent_insp_stat_code
                      ,l_grt_gr_routing_id
                  from rcv_transactions
                 where transaction_id = l_great_grand_parent_txn_id;
            EXCEPTION
	       WHEN no_data_found THEN
                  l_grt_gr_parent_insp_stat_code := null;
                  l_grt_gr_routing_id := null;
            END;
         END IF;
       ELSE
	       l_grand_parent_txn_type := '';
	       l_great_grand_parent_txn_id := -1;
               l_grand_pt_insp_status_code := null;
               l_grt_gr_parent_insp_stat_code := null;
               l_grt_gr_routing_id := null;
      END IF; --IF (l_parent_txn_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER',
    ELSE
	 BEGIN
	    SELECT parent_transaction_id
	      , transaction_type
	      , subinventory
	      , locator_id
	      INTO l_grand_parent_txn_id
	      , l_parent_txn_type
	      , l_from_sub
	      , l_from_loc_id
	      FROM rcv_transactions
	      WHERE transaction_id = l_parent_transaction_id;
	 EXCEPTION
	    WHEN no_data_found THEN
	       l_from_sub := NULL;
	       l_from_loc_id := NULL;
	       l_parent_txn_type := '';
	       l_grand_parent_txn_id := -1;
	 END;
   END IF; --IF (l_transaction_type IN ('CORRECT', 'RETURN TO RECEIVING')) THEN

   IF (l_debug = 1) THEN
      print_debug('MAINTAIN_MO_CON - PARENT TRANSACTION TYPE:'||l_parent_txn_type||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - GRAND PARENT TRANSACTION ID:'||l_grand_parent_txn_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - GRAND PARENT TRANSACTION TYPE:'||l_grand_parent_txn_type||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - GREAT GRAND PARENT TRANSACTION ID:'||l_great_grand_parent_txn_id||':'||l_progress,1);
      print_debug('MAINTAIN_MO_CON - GRAND PARENT INSPECTION STATUS CODE:'||l_grand_pt_insp_status_code||':'||l_progress,1);
      l_progress := 'WMSINB-40035';
   END IF;

   --update mmtt with the sub/locator etc.
   IF (p_mmtt_temp_id IS NOT NULL) THEN
      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_CON - Updating MMTT with following values:',1);
	 print_debug('MAINTAIN_MO_CON - Loc ID:'||p_locator_id,1);
	 print_debug('MAINTAIN_MO_CON = Sub:'||p_subinventory,1);
	 print_debug('MAINTAIN_MO_CON = Xfr LPN ID:'||p_transfer_lpn_id,1);
      END IF;

      --For DBI purpose

      --{{
      --After TRANSFER and DELIVER, make sure MMT for the transaction are
      --updated with the correct values }}
      UPDATE mtl_material_transactions_temp
	SET rcv_transaction_id = l_transaction_id
	, transfer_to_location = Decode(transfer_to_location,NULL,transfer_to_location,p_locator_id)
	, transfer_subinventory = Decode(transfer_to_location,NULL,transfer_subinventory,p_subinventory)
	, locator_id = Decode(transfer_to_location,NULL,p_locator_id,locator_id)
	, subinventory_code = Decode(transfer_to_location,NULL,p_subinventory,subinventory_code)

	--Bug 4082607.. commenting the following line as it is causing data
	--corruption AND IS NOT required.
	--	, lpn_id = Decode(l_transaction_type,'TRANSFER',Decode(p_transfer_lpn_id,NULL,lpn_id,p_transfer_lpn_id),lpn_id)
	, transfer_lpn_id = decode(l_transaction_type,'TRANSFER',p_transfer_lpn_id,'DELIVER',p_transfer_lpn_id,transfer_lpn_id)
	WHERE transaction_temp_id = p_mmtt_temp_id;
   END IF;

   l_progress := 'WMSINB-40039';

   -- FETCH THE REFERENCE INFORMATION
   --Bug 13891514 Adding ASBN as well because the validations/processing is same for ASN/ASBN
   IF p_shipment_line_id IS NOT NULL THEN
       BEGIN
	  SELECT rsl.po_line_location_id,rsl.po_distribution_id,
	    Decode(rsh.asn_type,'ASN','Y', 'ASBN','Y','N'),Decode(rsh.receipt_source_code,'INTERNAL ORDER','Y','N')
	    INTO l_po_line_location_id,l_po_distribution_id,l_is_asn,l_is_req
	    FROM rcv_shipment_lines rsl, rcv_shipment_headers rsh
	    WHERE rsl.shipment_line_id = p_shipment_line_id
	    AND   rsl.shipment_header_id = rsh.shipment_header_id;
       EXCEPTION
	  WHEN OTHERS THEN
	     IF (l_debug = 1) THEN
		print_debug( 'MAINTAIN_MO_CON: RAISE FND_API.G_EXC_ERROR',4);
	     END IF;
	     RAISE fnd_api.g_exc_error;
       END;

       print_debug( 'MAINTAIN_MO_CON PLL ID : '||l_po_line_location_id ||
		    '  POD ID : ' || l_po_distribution_id ||
		    '  IS ASN?: ' || l_is_asn,4);
   END IF;

   IF (p_po_line_location_id IS NOT NULL AND l_is_asn = 'N') THEN
      --{{
      --Test PO transactions.  Also test for ASN transactions and see if
      --p_po_line_location_id is passed }}
      IF (l_debug = 1) THEN
        print_debug('MAINTAIN_MO_CON SETTING REFERENCE INFO for PO_LINE_LOCATION_ID '  , 4);
      END IF;

      l_new_reference_id := p_po_line_location_id;
      l_new_reference := 'PO_LINE_LOCATION_ID';
      l_new_reference_type_code := 4; -- for purchase orders
    --14730177 Commenting this code. Now PO_DISTRIBUTION_ID will not be stamped
	--on the MO LINE.
   /*ELSIF p_po_distribution_id IS NOT NULL THEN
      --{{
      --Test direct receipt, MSCA deliver cases, putaway to inventory,
      --negative correction of deliver for all items}}

      IF (l_debug = 1) THEN
        print_debug('MAINTAIN_MO_CON  SETTING REFERENCE INFO for PO_DISTRIBUTION_ID '  , 4);
      END IF;

      l_new_reference_id := p_po_distribution_id;
      l_new_reference := 'PO_DISTRIBUTION_ID';
      l_new_reference_type_code := 4; -- for purchase orders
   */--14730177
   ELSIF p_oe_order_line_id IS NOT NULL AND l_is_req = 'N' THEN
      --{{
      --Test RMA transactions}}

      IF (l_debug = 1) THEN
        print_debug('MAINTAIN_MO_CON  SETTING REFERENCE INFO for ORDER_LINE_ID '  , 4);
      END IF;

      l_new_reference_id := p_oe_order_line_id;
      l_new_reference_type_code := 7; -- for RMA
      l_new_reference := 'ORDER_LINE_ID';
    ELSIF p_shipment_line_id IS NOT NULL THEN

      --{{
      --Test intrasit shipment, internal req.  For ASN, make sure that
      --the correct reference type code is stamped}}
      IF (l_debug = 1) THEN
        print_debug('MAINTAIN_MO_CON  SETTING REFERENCE INFO for SHIPMENT_LINE_ID '  , 4);
      END IF;

      l_new_reference_id := p_shipment_line_id;

      IF l_po_line_location_id IS NOT NULL OR l_po_distribution_id IS NOT NULL THEN
        l_new_reference_type_code := 4; --Considering the ASN
      ELSE
        l_new_reference_type_code := 8;
      END IF;
      l_new_reference := 'SHIPMENT_LINE_ID';

   END IF;

  l_progress := 'WMSINB-40047';

  -- ****************************************************
  -- FETCH THE TRANSFER INSPECTION STATUS
  -- ***************************************************

  IF (l_debug = 1) THEN
      print_debug( 'MAINTAIN_MO_CON p_routing_header_id = ' ||  p_routing_header_id , 4 );
  END if;

  if l_transaction_type = 'ACCEPT' then
     --{{
     --Inspect materials in a LPN that has already some inspected materials}}
     l_transfer_inspection_status := 2;
  Elsif l_transaction_type = 'REJECT' then
     l_transfer_inspection_status := 3;
  Else
     --IF (p_routing_header_id = 2) THEN
     IF (l_transaction_type <> 'RECEIVE') THEN
	--{{
	--Do receipt/transfer of materials whose source is a document
	--with inspection routing into an LPN that have material with
	--mixed inspection status.  Make sure that the correct MOL is
	--picked up}}

         -- Txn TYPE CORRECT THEN TRANSFER INSPECTION STATUS
         -- SHOULD BE THE INSPECTION STATUS OF THE PARENT TXN.
         -- i,e MATERIAL SHOULD GO BACK TO THE ORIGINAL STATUS
         -- of PARENT TXN.

         IF ( (l_transaction_type IN ('CORRECT') and p_qty < 0 )
              AND l_parent_txn_type not in ('RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING')
            )  THEN

             IF (l_debug = 1) THEN
                 print_debug( 'transfer insp stat correct and qty < 0 and parent txn not in RTV/ RTR/ RTC ', 4 );
             END if;

             IF l_grand_pt_insp_status_code is not null THEN
	        IF    ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_grand_pt_routing_id = 2) THEN
	           l_transfer_inspection_status := 1;
	        ELSIF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_grand_pt_routing_id <> 2) THEN
	           l_transfer_inspection_status := null;
	        ELSIF l_grand_pt_insp_status_code = 'ACCEPTED' THEN
	           l_transfer_inspection_status := 2;
	        ELSIF l_grand_pt_insp_status_code = 'REJECTED' THEN
	           l_transfer_inspection_status := 3;
                END IF;
             ELSE
                -- There may not be any grand parent existing for this txn
                -- So pick up the inspection status from the Parent txn.
                IF (l_debug = 1) THEN
                  print_debug( 'l_grand_pt_insp_status_code is null  ', 4 );
                END if;

	        l_transfer_inspection_status := null;
             END IF;
         ELSIF ( ( l_transaction_type IN ('CORRECT') and p_qty > 0 )
              AND l_parent_txn_type not in ('RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING')
               ) THEN

             IF (l_debug = 1) THEN
                print_debug( 'MAINTAIN_MO_CON Setting transfer insp correct and qty > 0 and parent not in RTV / RTR / RTC ', 4 );
             END if;

	     IF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	        l_transfer_inspection_status := 1;
	     ELSIF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	        l_transfer_inspection_status := null;
	     ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	        l_transfer_inspection_status := 2;
	     ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	        l_transfer_inspection_status := 3;
             END IF;

         ELSIF ( (l_transaction_type IN ('CORRECT') and p_qty < 0 )
              AND l_parent_txn_type in ('RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING')
               ) THEN
             IF (l_debug = 1) THEN
                 print_debug( 'Setting xfr insp correct and qty < 0 and parent in RTV / RTR / RTC ', 4 );
             END IF;

	     IF (l_grt_gr_parent_insp_stat_code = 'NOT INSPECTED' and l_grt_gr_routing_id = 2) THEN
	        l_transfer_inspection_status := 1;
	     ELSIF (l_grt_gr_parent_insp_stat_code = 'NOT INSPECTED' and l_grt_gr_routing_id <> 2) THEN
	        l_transfer_inspection_status := null;
	     ELSIF l_grt_gr_parent_insp_stat_code = 'ACCEPTED' THEN
	        l_transfer_inspection_status := 2;
	     ELSIF  l_grt_gr_parent_insp_stat_code = 'REJECTED' THEN
	        l_transfer_inspection_status := 3;
             END IF;

         ELSIF ( (l_transaction_type IN ('CORRECT') and p_qty > 0 )
              AND l_parent_txn_type in ('RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING')
               ) THEN
             IF (l_debug = 1) THEN
                 print_debug( 'Setting xfr insp correct and qty > 0 and parent in RTV / RTR / RTC ', 4 );
             END if;

             l_transfer_inspection_status := null;

         ELSIF l_transaction_type IN ( 'RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING' ) THEN

             IF (l_debug = 1) THEN
                 print_debug( 'MAINTAIN_MO_CON Setting xfr insp for RTV/ RTR/ RTC ', 4 );
             END if;

	     IF (l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2 ) THEN
	        l_transfer_inspection_status := 1;
	     ELSIF (l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2 ) THEN
	        l_transfer_inspection_status := null;
	     ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	        l_transfer_inspection_status := 2;
	     ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	        l_transfer_inspection_status := 3;
             END IF;
         ELSIF l_transaction_type IN ( 'TRANSFER') THEN
             IF (l_debug = 1) THEN
                 print_debug( 'MAINTAIN_MO_CON Setting xfr insp for TRANSFER TXN ', 4 );
             END if;

	     IF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	        l_transfer_inspection_status := 1;
	     ELSIF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	        l_transfer_inspection_status := null;
	     ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	        l_transfer_inspection_status := 2;
	     ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	        l_transfer_inspection_status := 3;
             END IF;
         ELSIF l_transaction_type IN ( 'DELIVER') THEN
             IF (l_debug = 1) THEN
                 print_debug( 'MAINTAIN_MO_CON DELIVER TXN Setting xfr inspection status ', 4 );
             END if;
	     l_transfer_inspection_status := null;
         ELSE
            IF ( l_rti_inspection_status_code = 'NOT INSPECTED' and p_routing_header_id = 2) THEN
              l_transfer_inspection_status := 1;
            ELSIF ( l_rti_inspection_status_code = 'NOT INSPECTED' and p_routing_header_id <> 2) THEN
              l_transfer_inspection_status := null;
            ELSIF l_rti_inspection_status_code = 'ACCEPTED' THEN
              l_transfer_inspection_status := 2;
            ELSIF l_rti_inspection_status_code = 'REJECTED' THEN
              l_transfer_inspection_status := 3;
            END IF;
         END IF;
      ELSE
        -- Setting Inspection Status for RECEIVE CASE
	--{{
	--Do receipt/transfer of materials whose source is a document
	--with standard routing into an LPN that have material with
	--mixed inspection status.  Make sure that the correct MOL is
	--picked up}}

        IF (l_debug = 1) THEN
            print_debug( 'MAINTAIN_MO_CON Setting xfr insp for RECEIVE ', 4 );
        END if;

        IF (p_routing_header_id = 2) THEN
	   l_transfer_inspection_status := 1;
        ELSE
	   l_transfer_inspection_status := null;
        END IF;
      END IF;
  End if;

--Review need to discuss the above. This is not right because if the
--transaction type is anything but accept or reject then we cannot blindly
--  SET it based on the routing. it will also depend on the inspection
--  status the rti/rt.
-- ************************************************
-- FETCH THE FROM INSPECTION STATUS
-- ***********************************************

     IF (l_debug = 1) THEN
         print_debug( 'MAINTAIN_MO_CON Setting FROM MOL INSP STATUS', 4 );
     END if;

     IF (l_transaction_type IN ('ACCEPT','REJECT')) THEN
	IF (l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	   l_from_mol_inspection_status := 1;
	ELSIF (l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	   l_from_mol_inspection_status := null;
	ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	   l_from_mol_inspection_status := 2;
	ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	   l_from_mol_inspection_status := 3;
	END IF;
     ELSE --RECEIVE/RTV/RTR/TRANSFER/DELIVER/CORRECT txn
         IF (l_transaction_type <> 'RECEIVE') THEN

            IF ( (l_transaction_type IN ('CORRECT') and p_qty < 0 )
              AND l_parent_txn_type not in ('RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING')
            )  THEN

                IF (l_debug = 1) THEN
                    print_debug( 'from mol insp stat correct and qty < 0 and parent txn not in RTV/ RTR/ RTC ', 4 );
                END IF;

	        IF (l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	           l_from_mol_inspection_status := 1;
	        ELSIF (l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	           l_from_mol_inspection_status := null;
	        ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	           l_from_mol_inspection_status := 2;
	        ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	           l_from_mol_inspection_status := 3;
	        END IF;
            ELSIF ( (l_transaction_type IN ('CORRECT') and p_qty > 0 )
              AND l_parent_txn_type not in ('RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING')
                  ) THEN
                IF l_grand_pt_insp_status_code is not null THEN
	           IF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_grand_pt_routing_id = 2) THEN
	              l_from_mol_inspection_status := 1;
	           ELSIF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_grand_pt_routing_id <> 2) THEN
	              l_from_mol_inspection_status := null;
	           ELSIF l_grand_pt_insp_status_code = 'ACCEPTED' THEN
	              l_from_mol_inspection_status := 2;
	           ELSIF l_grand_pt_insp_status_code = 'REJECTED' THEN
	              l_from_mol_inspection_status := 3;
                   END IF;
                ELSE
                   -- There may not be any grand parent existing for this txn
                   -- So pick up the inspection status from the Parent txn.
                   IF (l_debug = 1) THEN
                     print_debug( 'l_grand_pt_insp_status_code is null  ', 4 );
                   END if;

	           l_from_mol_inspection_status := null;
                END IF;
            ELSIF l_transaction_type IN ( 'RETURN TO VENDOR',
                              'RETURN TO CUSTOMER','RETURN TO RECEIVING' ) THEN

                IF (l_debug = 1) THEN
                    print_debug( 'MAINTAIN_MO_CON Setting xfr insp for RTV/ RTR/ RTC ', 4 );
                END if;

                IF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
                   l_from_mol_inspection_status := 1;
                ELSIF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
                   l_from_mol_inspection_status := null;
                ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
                   l_from_mol_inspection_status := 2;
                ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
                   l_from_mol_inspection_status := 3;
                END IF;

            ELSIF ( (l_transaction_type IN ('CORRECT') and p_qty < 0 )
                 AND l_parent_txn_type in ('RETURN TO VENDOR',
                                 'RETURN TO CUSTOMER','RETURN TO RECEIVING')
                  ) THEN
                IF (l_debug = 1) THEN
                    print_debug( 'Setting from mol insp correct and qty < 0 and parent in RTV / RTR / RTC ', 4 );
                END IF;
          -- bug 8201074
          /*
	        IF ( l_grt_gr_parent_insp_stat_code = 'NOT INSPECTED' and l_grt_gr_routing_id = 2) THEN
	           l_transfer_inspection_status := 1;
	        ELSIF ( l_grt_gr_parent_insp_stat_code = 'NOT INSPECTED' and l_grt_gr_routing_id <> 2) THEN
	           l_transfer_inspection_status := null;
	        ELSIF l_grt_gr_parent_insp_stat_code = 'ACCEPTED' THEN
	           l_transfer_inspection_status := 2;
	        ELSIF  l_grt_gr_parent_insp_stat_code = 'REJECTED' THEN
	           l_transfer_inspection_status := 3;
                END IF;
          */
          IF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_grand_pt_routing_id = 2) THEN
	           l_transfer_inspection_status := 1;
	        ELSIF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_grand_pt_routing_id <> 2) THEN
	           l_transfer_inspection_status := null;
	        ELSIF l_grand_pt_insp_status_code = 'ACCEPTED' THEN
	           l_transfer_inspection_status := 2;
	        ELSIF  l_grand_pt_insp_status_code = 'REJECTED' THEN
	           l_transfer_inspection_status := 3;
               END IF;
          -- end bug 8201074

            ELSIF ( (l_transaction_type IN ('CORRECT') and p_qty > 0 )
                 AND l_parent_txn_type in ('RETURN TO VENDOR',
                                 'RETURN TO CUSTOMER','RETURN TO RECEIVING')
                  ) THEN
                IF (l_debug = 1) THEN
                    print_debug( 'Setting from mol insp correct and qty > 0 and parent in RTV / RTR / RTC ', 4 );
                END IF;
                -- Bug 7355205
                -- l_from_mol_inspection_status := null;
                IF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	           l_from_mol_inspection_status := 1;
	        ELSIF ( l_grand_pt_insp_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	           l_from_mol_inspection_status := null;
	        ELSIF l_grand_pt_insp_status_code = 'ACCEPTED' THEN
	           l_from_mol_inspection_status := 2;
	        ELSIF l_grand_pt_insp_status_code = 'REJECTED' THEN
	           l_from_mol_inspection_status := 3;
                END IF;
            ELSIF l_transaction_type IN ( 'TRANSFER') THEN
                IF (l_debug = 1) THEN
                    print_debug( 'MAINTAIN_MO_CON Setting from insp for TRANSFER TXN ', 4 );
                END if;
	        IF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	           l_from_mol_inspection_status := 1;
	        ELSIF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	           l_from_mol_inspection_status := null;
	        ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	           l_from_mol_inspection_status := 2;
	        ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	           l_from_mol_inspection_status := 3;
                END IF;
            ELSIF l_transaction_type IN ( 'DELIVER') THEN
                IF (l_debug = 1) THEN
                    print_debug( 'MAINTAIN_MO_CON DELIVER TXN Setting from inspection status ', 4 );
                END if;
	        IF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id = 2) THEN
	           l_from_mol_inspection_status := 1;
	        ELSIF ( l_pt_inspection_status_code = 'NOT INSPECTED' and l_pt_routing_id <> 2) THEN
	           l_from_mol_inspection_status := null;
	        ELSIF l_pt_inspection_status_code = 'ACCEPTED' THEN
	           l_from_mol_inspection_status := 2;
	        ELSIF l_pt_inspection_status_code = 'REJECTED' THEN
	           l_from_mol_inspection_status := 3;
                END IF;
            END IF;
         ELSE
             IF (l_debug = 1) THEN
                 print_debug( 'MAINTAIN_MO_CON Txn is Receive Setting FROM MOL INSP STATUS TO NULL', 4 );
             END if;
             l_from_mol_inspection_status := null;
         END IF;
     END IF;

  --Why are we doing a if on transaction type when the code is
  --exactly same for if and else blocks.

  IF (l_debug = 1) THEN
      print_debug( 'MAINTAIN_MO_CON l_from_mol_inspection_status = ' ||  l_from_mol_inspection_status , 4 );
      print_debug( 'MAINTAIN_MO_CON l_transfer_inspection_status = ' ||  l_transfer_inspection_status , 4 );
  END IF;

   -- Now maintain MO
   IF (l_transaction_type in ('RECEIVE','MATCH') OR
       (l_transaction_type = 'CORRECT' AND
	p_primary_quantity > 0 AND
	l_parent_txn_type = 'RECEIVE')) THEN

      IF (l_debug = 1) THEN
          print_debug( 'MAINTAIN_MO_CON l_transfer_inspection_status = ' ||  l_transfer_inspection_status , 4 );
      END IF;

      --This is not used in INVRUTLB.  Make sure that this is OK
      IF l_source_document_code IN ('INVENTORY','REQ') THEN
	 l_transfer_org_id := p_org_id;
      END IF;

      --Get the project and task information

      --{{
      --Test receipt and deliver in PJM org}}
      IF (p_project_id IS NULL) THEN

	 --{{
	 --Test receipt and deliver of PO with project/task distribution}}
	 IF (p_po_distribution_id IS NOT NULL) THEN
	    BEGIN
	       SELECT project_id,
	              task_id              -- bug 7218830
		 INTO l_project_id,
		 l_task_id
		 FROM po_distributions_all
		 WHERE po_distribution_id = p_po_distribution_id;
	    EXCEPTION
	       WHEN no_data_found THEN
		  l_project_id := NULL;
		  l_task_id := NULL;
	    END ;
            ELSIF (p_po_line_location_id IS NOT NULL) then  -- Bug 6830559
            inv_rcv_std_rcpt_apis.get_project_task(
                 p_po_line_location_id     => p_po_line_location_id
               , p_oe_order_line_id        => NULL
               , x_project_id              => l_project_id
               , x_task_id                 => l_task_id
            );
	 --{{
	 --Test receipt and deliver of RMA with project/task distribution}}
	  ELSIF (p_oe_order_line_id IS NOT NULL) THEN
               BEGIN
		  SELECT project_id,
		         task_id                -- bug 7218830
		    INTO l_project_id
		    , l_task_id
		    FROM oe_order_lines_all
		    WHERE line_id = p_oe_order_line_id;
	       EXCEPTION
		  WHEN no_data_found THEN
		     l_project_id := NULL;
		     l_task_id := NULL;
	       END;
       -- Bug# 7154105 Picking up the Praject and Task from po_req_distributions_all when
       -- a distribution is specified in the Internal Requisition. There can be just one
       -- distribution for internally sourced documents
       ELSIF p_req_distribution_id IS NOT NULL THEN
         BEGIN
           select project_id, task_id
           into   l_project_id, l_task_id
           from   po_req_distributions_all
           where  distribution_id = p_req_distribution_id;

           print_debug('MAINTAIN_MOC_CON - Proj Task Pickup for distributions: Project: '||l_project_id || ' Task :  ' ||l_task_id || ' Distibution_id : ' ||p_req_distribution_id,1);
         EXCEPTION
		   WHEN no_data_found THEN
		     l_project_id := NULL;
		     l_task_id := NULL;
            when too_many_rows then
             print_debug('MAINTAIN_MOC_CON - Proj Task Pickup for distributions fetches too many rows : ' || sqlerrm,1);
             raise fnd_api.g_exc_unexpected_error;
	     END;
         -- End of Bug# 7154105
	 END IF;
       ELSE --IF (p_project_id IS NULL) THEN
		  l_project_id := p_project_id;
		  l_task_id := p_task_id;
      END IF; --IF (p_project_id IS NULL) THEN

      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MOC_CON - Before calling Reservation API:'||l_progress,1);
	 l_progress := 'WMSINB-45050';
      END IF;

      -- ******************************************************************
      -- CALL THE RESERVATION API HERE
      -- l_mol_res_in is returned from the reservation API
      -- CHANGE THIS PART ONCE THE RESERVATION API IS COMPLETED.
      -- ******************************************************************

      l_mol_res_in(1).transaction_type       := l_transaction_type;
      l_mol_res_in(1).organization_id        := p_org_id;
      l_mol_res_in(1).lpn_id                 := p_transfer_lpn_id;
      l_mol_res_in(1).inventory_item_id      := p_item_id;
      l_mol_res_in(1).lot_number             := p_lot_number;
      l_mol_res_in(1).item_revision          := p_revision;
      l_mol_res_in(1).from_subinventory_code := p_subinventory;
      l_mol_res_in(1).from_locator_id        := p_locator_id;

      -- l_mol_res_in(1).cost_group_id          := null; ????

      l_mol_res_in(1).project_id             := l_project_id;
      l_mol_res_in(1).task_id                := l_task_id;
      l_mol_res_in(1).uom_code               := p_uom_code;
      l_mol_res_in(1).quantity               := p_qty;
      l_mol_res_in(1).backorder_delivery_detail_id := null;
      l_mol_res_in(1).crossdock_type         := null;
      l_mol_res_in(1).transfer_org_id        := l_transfer_org_id;
      l_mol_res_in(1).secondary_quantity     := p_sec_qty;
      l_mol_res_in(1).secondary_uom          := p_sec_uom;
      l_mol_res_in(1).inspection_status      := l_transfer_inspection_status ;
      l_mol_res_in(1).line_id                := null;
      l_mol_res_in(1).primary_uom_code       := p_primary_uom_code;
      l_mol_res_in(1).primary_qty            := p_primary_quantity;
      l_mol_res_in(1).po_header_id           := l_po_header_id;
      l_mol_res_in(1).po_line_location_id    := p_po_line_location_id;
      l_mol_res_in(1).shipment_line_id       := p_shipment_line_id;
      l_mol_res_in(1).requisition_line_id    := l_requisition_line_id;
      l_mol_res_in(1).auto_transact_code     := p_auto_transact_code;
      l_mol_res_in(1).wip_supply_type        := null;
      l_mol_res_in(1).routing_header_id      := p_routing_header_id;
      l_mol_res_in(1).source_document_code   := l_source_document_code;
      l_mol_res_in(1).parent_transaction_id  := null;
      l_mol_res_in(1).asn_line_flag          := p_asn_line_flag;
      l_mol_res_in(1).parent_txn_type        := l_parent_txn_type;

      INV_RCV_RESERVATION_UTIL.maintain_reservations
                 (x_return_status => x_return_status
                 ,x_msg_count     => x_msg_count
                 ,x_msg_data      => x_msg_data
                 ,x_mol_tb        => l_mol_res_out
                 ,p_cas_mol_tb    => l_mol_res_in
       );

       IF (l_debug = 1) THEN
                print_debug(' maintain_reservations - After calling maintain_reservations :'||x_return_status||':'||l_progress,1);
                l_progress := 'WMSINB-45051';
       END IF;

       IF (x_return_status <> 'S') THEN
              l_progress := 'WMSINB-45052';
              RAISE fnd_api.g_exc_error;
       END IF;

      l_progress := 'WMSINB-45053';

      l_loop_index := l_mol_res_out.first;

      LOOP

	 EXIT WHEN l_loop_index IS NULL;

         IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MOC_CON -Inside MOL CONSL LOOP ',1);
	    print_debug(' l_mol_res_out('||l_loop_index||').lpn_id                       => ' ||l_mol_res_out(l_loop_index).lpn_id,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').inventory_item_id            => ' ||l_mol_res_out(l_loop_index).inventory_item_id,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').lot_number                   => ' ||l_mol_res_out(l_loop_index).lot_number,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').item_revision                => ' ||l_mol_res_out(l_loop_index).item_revision,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').from_subinventory_code       => ' ||l_mol_res_out(l_loop_index).from_subinventory_code,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').from_locator_id              => ' ||l_mol_res_out(l_loop_index).from_locator_id,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').project_id                   => ' ||l_mol_res_out(l_loop_index).project_id,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').task_id                      => ' ||l_mol_res_out(l_loop_index).task_id,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').uom_code                     => ' ||l_mol_res_out(l_loop_index).uom_code,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').quantity                     => ' ||l_mol_res_out(l_loop_index).quantity,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').backorder_delivery_detail_id => ' ||l_mol_res_out(l_loop_index).backorder_delivery_detail_id,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').crossdock_type               => ' ||l_mol_res_out(l_loop_index).crossdock_type,1);
	    print_debug(' l_mol_res_out('||l_loop_index||').inspection_status            => ' ||l_mol_res_out(l_loop_index).inspection_status,1);
	 END IF;

	 --{{
	 --Do multiple receipt with the same conolidation critieria:
	 --1) LPN 2) Item 3) Lot 4)Rev 5) From Sub 6) From Loc
	 --7) Project ID 8) Task_Id 9) Uom_code 10) BDD_ID
	 --11) Crossdock_type 12) Inspection Status }}
         open c_transfer_mol(
                             l_mol_res_out(l_loop_index).lpn_id
                            ,l_mol_res_out(l_loop_index).inventory_item_id
                            ,l_mol_res_out(l_loop_index).lot_number
                            ,l_mol_res_out(l_loop_index).item_revision
                            ,l_mol_res_out(l_loop_index).from_subinventory_code
                            ,l_mol_res_out(l_loop_index).from_locator_id
                             -- ,l_mol_res_out(l_loop_index).cost_group_id ???
                            ,l_mol_res_out(l_loop_index).project_id
                            ,l_mol_res_out(l_loop_index).task_id
                            ,l_mol_res_out(l_loop_index).uom_code
                            ,l_mol_res_out(l_loop_index).backorder_delivery_detail_id
                            ,l_mol_res_out(l_loop_index).crossdock_type
                            ,l_mol_res_out(l_loop_index).inspection_status
							,l_new_reference   --13935217
                            ,l_new_reference_id --13935217
                            );
        Fetch c_transfer_mol into l_transfer_mol_rec;
        close c_transfer_mol;

	IF (l_debug = 1) THEN
	   print_debug('MAINTAIN_MOC_CON - Move Order Line Found line Id = '|| l_transfer_mol_rec.line_id,1);
	END IF;

        if l_transfer_mol_rec.line_id is not null
        then
           -- Move Order Line found
           -- Check whether MOL is from the same SOURCE
           IF (l_debug = 1) THEN
	      print_debug('MAINTAIN_MOC_CON - Move Order Line Found line Id = '|| l_transfer_mol_rec.line_id,1);
           END IF;

           check_reference(
                            p_old_reference           => l_transfer_mol_rec.reference
                           ,p_old_reference_type_code => l_transfer_mol_rec.reference_type_code
                           ,p_old_reference_id        => l_transfer_mol_rec.reference_id
                           ,p_new_reference           => l_new_reference
                           ,p_new_reference_type_code => l_new_reference_type_code
                           ,p_new_reference_id        => l_new_reference_id
                           ,x_reference               => l_reference
                           ,x_reference_type_code     => l_reference_type_code
                           ,x_reference_id            => l_reference_id
                           ,x_transaction_type_id     => l_transaction_type_id
                           ,x_txn_source_type_id      => l_txn_source_type_id
                           ,x_return_status           => x_return_status
                           ,x_msg_count               => x_msg_count
                           ,x_msg_data                => x_msg_data
                          );

           IF (l_debug = 1) THEN
                print_debug('CHECK_REFERENCE - After calling check_reference :'||x_return_status||':'||l_progress,1);
                l_progress := 'WMSINB-45056';
           END IF;

           IF (x_return_status <> 'S') THEN
              l_progress := 'WMSINB-45058';
              RAISE fnd_api.g_exc_error;
           END IF;


	   --{{
	   --Test the case where a matching MOL is found.  Make sure
	   --that l_mol_res_out(l_loop_index).quantity is in the correct
	   --uom -- It should be because of the cosolidation critieria}}

           --
           -- UPDATE THE MOVE ORDER LINE HERE
           --
           update mtl_txn_request_lines
	     set reference = l_reference
	     ,reference_type_code = l_reference_type_code
	     ,reference_id = l_reference_id
	     ,quantity = quantity + l_mol_res_out(l_loop_index).quantity
	     --Review how are you ensuring that this quantity is in the
	     --right uom
	     ,primary_quantity = primary_quantity + l_mol_res_out(l_loop_index).primary_qty
	     ,secondary_quantity = secondary_quantity + l_mol_res_out(l_loop_index).secondary_quantity
	     ,transaction_type_id = nvl(l_transaction_type_id,transaction_type_id)
	     ,transaction_source_type_id = nvl(l_txn_source_type_id,transaction_source_type_id)
             where line_id = l_transfer_mol_rec.line_id
	     ;

           l_progress := 'WMSINB-45060';

           --
           -- CANCEL THE OPERATION PLAN
           -- IF THE LPN IS LOADED AND TASK IS DISPATCHED
           -- WE NEED TO FAIL HERE
           --

           l_loaded := 0;

	   --{{
	   --Try to receive into a LPN that is loaded.  This should have
	   --been validated by the ui already}}
           BEGIN
                    SELECT 1
                    INTO l_loaded
                    FROM dual
                    WHERE exists
                    (SELECT 1
                     FROM wms_dispatched_tasks wdt
                     , mtl_material_transactions_temp mmtt
                     WHERE mmtt.move_order_line_id =  l_transfer_mol_rec.line_id
                     AND wdt.transaction_temp_id = mmtt.transaction_temp_id
                     AND wdt.status IN (3, 4) -- dispached or loaded
                     AND wdt.task_type = 2 -- putaway
                     );

                  IF (l_debug = 1) THEN
                     print_debug('MAINTAIN_MO_CON - TASK ALREADY LOADED FOR '||l_transfer_mol_rec.line_id || ' FAILURE' ,1);
                  END IF;

                  l_progress := 'WMSINB-45063';
                  RAISE fnd_api.g_exc_error;

           EXCEPTION
             WHEN NO_DATA_FOUND THEN
                  l_progress := 'WMSINB-45064';
                  null;
           END;

	   --{{
	   --Complete 1 step of a multi-step ATF plan.  Receive into that LPN.
	   --Make sure that the operation instance is cancelled for that LPN.}}
           call_atf_api(x_return_status => x_return_status,
                            x_msg_data => x_msg_data,
                            x_msg_count => x_msg_count,
                            x_error_code => l_error_code,
                            p_source_task_id => NULL,
                            p_activity_type_id => 1,
                            p_operation_type_id => NULL,
                            p_mol_id => l_transfer_mol_rec.line_id,
                            p_atf_api_name => g_atf_api_cancel);

           IF (x_return_status <> g_ret_sts_success) THEN
                  IF (l_debug = 1) THEN
                     print_debug('MAINTAIN_MO_CON - call_atf_api failed:'||l_transfer_mol_rec.line_id,1);
                     l_progress := 'WMSINB-45063';
                  END IF;
                  --raise error
                  l_progress := 'WMSINB-45064';
                  RAISE fnd_api.g_exc_error;
           END IF;

        Else

           -- Move Order Line Not Found Create Move Order

           IF (l_debug = 1) THEN
	      print_debug('MAINTAIN_MOC_CON - Move Order Line Not Found line Id ',1);
           END IF;

           --create mol
           inv_rcv_std_rcpt_apis.create_move_order(p_move_order_header_id => l_move_order_header_id
                                              ,p_po_line_location_id      => p_po_line_location_id
                                              ,p_po_distribution_id       => p_po_distribution_id
                                              ,p_shipment_line_id         => p_shipment_line_id
                                              ,p_oe_order_line_id         => p_oe_order_line_id
                                              ,p_routing                  => p_routing_header_id
                                              ,p_lot_control_code         => p_lot_control_code
                                              ,p_org_id                   => l_mol_res_out(l_loop_index).organization_id
                                              ,p_item_id                  => l_mol_res_out(l_loop_index).inventory_item_id
                                              ,p_qty                      => l_mol_res_out(l_loop_index).quantity
                                              ,p_uom_code                 => l_mol_res_out(l_loop_index).uom_code
                                              ,p_lpn                      => l_mol_res_out(l_loop_index).lpn_id
                                              ,p_project_id               => l_mol_res_out(l_loop_index).project_id
                                              ,p_task_id                  => l_mol_res_out(l_loop_index).task_id
                                              ,p_revision                 => l_mol_res_out(l_loop_index).item_revision
                                              ,p_inspect                  => l_mol_res_out(l_loop_index).inspection_status
                                              ,p_txn_source_id            => null
                                              ,x_status                   => x_return_status
                                              ,x_message                  => x_msg_data
                                              ,p_transfer_org_id          => l_mol_res_out(l_loop_index).transfer_org_id
                                              ,p_wms_process_flag         => 1
                                              ,p_lot_number               => l_mol_res_out(l_loop_index).lot_number
                                              ,p_secondary_quantity       => l_mol_res_out(l_loop_index).secondary_quantity
                                              ,p_secondary_uom            => l_mol_res_out(l_loop_index).secondary_uom
                                              ,x_line_id                  => l_move_order_line_id
                                              );
            IF (l_debug = 1) THEN
                 print_debug('MAINTAIN_MO_CON - After calling create_move_order:'||x_return_status||':'||l_progress,1);
                 print_debug('MAINTAIN_MO_CON - Move Order Header ID:'||l_move_order_header_id||':'||l_progress,1);
                 print_debug('MAINTAIN_MO_CON - Move Order Line ID:'||l_move_order_line_id||':'||l_progress,1);
            END IF;

            IF (x_return_status <> 'S') THEN
               l_progress := 'WMSINB-45064';
               RAISE fnd_api.g_exc_error;
            END IF;

           --update mol for the sub and loc
	   --{{
	   --Receive into a RCV sub/loc.  Check MOL has these columns
	   --stamped afterwards}}
           UPDATE mtl_txn_request_lines
              SET from_subinventory_code = Nvl(p_subinventory,from_subinventory_code)
              , from_locator_id = Nvl(p_locator_id, from_locator_id)
	      , backorder_delivery_detail_id = l_mol_res_out(l_loop_index).backorder_delivery_detail_id
	      , crossdock_type = l_mol_res_out(l_loop_index).crossdock_type
	     WHERE header_id = l_move_order_header_id
                and line_id = l_move_order_line_id
                and organization_id = p_org_id
                AND inventory_item_id = p_item_id;

	   -- Call to UPDATE WDD
	   --Review. Shoudn't this be outside the if mol not found block???
	   --{{
	   --Create xdock reservation for the item.  Do receipt.  Make
	   --sure that WDD is updated with the MOL}}
	   IF (l_mol_res_out(l_loop_index).backorder_delivery_detail_id IS NOT NULL
		and l_mol_res_out(l_loop_index).crossdock_type = 1) THEN --bug 9706800 No need to update wdd for OPM batch/WIP; Update only for Sales/Internal Orders
	      inv_rcv_reservation_util.update_wdd
		(x_return_status => x_return_status
		 ,x_msg_count    => x_msg_count
		 ,x_msg_data     => x_msg_data
		 ,p_wdd_id       => l_mol_res_out(l_loop_index).backorder_delivery_detail_id
		 ,p_released_status => null
		 ,p_mol_id          => l_move_order_line_id
		 );
	   END IF;


           IF (l_debug = 1) THEN
                 print_debug('MAINTAIN_MO_CON - After calling update_wdd '||x_return_status||':'||l_progress,1);
                 print_debug('MAINTAIN_MO_CON - Move Order Header ID:'||l_move_order_header_id||':'||l_progress,1);
           END IF;

           IF (x_return_status <> 'S') THEN
               l_progress := 'WMSINB-45064';
               RAISE fnd_api.g_exc_error;
           END IF;


        End if;


	l_loop_index := l_mol_res_out.next(l_loop_index);
      END LOOP;

      --call upd_empty_mixed_flag
      IF p_locator_id IS NOT NULL THEN
	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - Calling upd_empty_mixed_flag for	CURRENT sub',1);
	 END IF;

	 inv_loc_wms_utils.upd_empty_mixed_flag_rcv_loc ( x_return_status  => x_return_status
							  ,x_msg_count    => x_msg_count
							  ,x_msg_data     => x_msg_data
							  ,p_subinventory => p_subinventory
							  ,p_locator_id   => p_locator_id
							  ,p_org_id       => p_org_id
							  );
	 IF (x_return_status <> 'S') THEN
	    l_progress := 'WMSINB-45067';
      -- Bug 5393727: do not raise an exception if locator API returns an error
	    -- RAISE fnd_api.g_exc_error;
	 END IF;

	 -- update curr capacity
	 IF (l_debug = 1) THEN
	     print_debug('MAINTAIN_MO_CON - Calling update_loc_curr_capacity FOR CURRENT sub',1);--bug13451495
	 END IF;

	 --bug13451495
	 inv_loc_wms_utils.update_loc_current_capacity
	   ( x_return_status           => x_return_status
	     ,x_msg_count               => x_msg_count
	     ,x_msg_data                => x_msg_data
	     ,p_organization_id         => p_org_id
	     ,p_inventory_location_id   => p_locator_id
	     ,p_inventory_item_id       => p_item_id
	     ,p_primary_uom_flag        => 'N'
	     ,p_transaction_uom_code    => p_uom_code
	     ,p_quantity                => p_qty
	     ,p_issue_flag              => 'N'
	     );
	 IF (x_return_status <> 'S') THEN
	    l_progress := 'WMSINB-45070';
	    -- Bug 5393727: do not raise an exception if locator API returns an error
	    -- RAISE fnd_api.g_exc_error;
	 END IF;
      END IF; --IF p_subinventory IS NOT NULL THEN

--pregeneration
--Review. Move this pregeneration call to complete_lpn_group !!!
-- R12 commented this call
-- As this has been moved to complete_lpn_group procedure
-- l_call_pregeneration := TRUE;

--     IF (p_transfer_lpn_id IS NULL) THEN
--	 l_call_pregeneration := FALSE;
--      ELSE
--	 IF p_lot_control_code > 1 THEN
--	    IF p_lot_number IS NULL THEN
--	       l_call_pregeneration := FALSE;
--	    END IF;
--	  ELSIF p_serial_number_control_code IN (2,5,6) THEN
--	    BEGIN
--	       SELECT '1'
--		 INTO l_dummy
--		 FROM mtl_serial_numbers_temp
--		 WHERE product_code = 'RCV'
--		 AND product_transaction_id = p_rti_id
--		 AND ROWNUM < 2;
--	    EXCEPTION
--	       WHEN OTHERS THEN
--		  l_call_pregeneration := FALSE;
--	    END;
--	 END IF;
--    END IF; --IF (p_lpn_id IS NULL) THEN

--call pregeneration
--     IF l_call_pregeneration THEN
--	 IF (l_debug = 1) THEN
--	    print_debug('MAINTAIN_MO_CON - Before calling start_pregenerate_program:'||l_progress,1);
--	    l_progress := 'WMSINB-45072';
--	 END IF;
--	 wms_putaway_suggestions.start_pregenerate_program
--	   (p_org_id => p_org_id,
--	    p_lpn_id => p_transfer_lpn_id,
--	    x_return_status => x_return_status,
--	    x_msg_count => x_msg_count,
--	    x_msg_data => x_msg_data);
--
--	 IF (l_debug = 1) THEN
--	    print_debug('MAINTAIN_MO_CON - After calling start_pregenerate_program:'||x_return_status||':'||l_progress,1);
--	    l_progress := 'WMSINB-45073';
--	 END IF;
--
--	 IF (x_return_status <> 'S') THEN
--	    x_return_status := 'S';
--  	 END IF;
-- END IF; --IF l_call_pregeneration THEN
-- R12
-- Commented the above call

   END IF; --IF l_transaction_type = 'RECEIVE' THEN

   IF l_transaction_type IN ('ACCEPT','REJECT','TRANSFER') THEN
      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_CON - CASE FOR ACCEP, TREJECT,TRANSFER',1);
      END IF;


      /* Bug 6830559 */
      IF (p_project_id IS NULL) THEN
	 IF (p_po_distribution_id IS NOT NULL) THEN
	    BEGIN
	       SELECT project_id,
		 Nvl(task_id, -1)
		 INTO l_project_id,
		 l_task_id
		 FROM po_distributions_all
		 WHERE po_distribution_id = p_po_distribution_id;
	    EXCEPTION
	       WHEN no_data_found THEN
		  l_project_id := NULL;
		  l_task_id := NULL;
	    END ;
         ELSIF (p_po_line_location_id IS NOT NULL) then
            inv_rcv_std_rcpt_apis.get_project_task(
                 p_po_line_location_id     => p_po_line_location_id
               , p_oe_order_line_id        => NULL
               , x_project_id              => l_project_id
               , x_task_id                 => l_task_id
            );
	 END IF;
       ELSE --IF (p_project_id IS NULL) THEN
		  l_project_id := p_project_id;
		  l_task_id := p_task_id;
       END IF; --IF (p_project_id IS NULL) THEN



      --{{
      --Test:
      --1) mobile putaway (there is always have MMTT)
      --2) Desktop transfer/deliver (turn pregen off so there is no MMTT)
      --3) Mobile inspect (there may or may not have MMTT)
      --4) Desktop inspect }}

      IF (p_mmtt_temp_id IS NOT NULL) THEN

	 OPEN c_mol_mmtt(p_mmtt_temp_id,
                         p_item_id,
                         p_lpn_id,
			 p_lot_number,
                         p_revision,
                         p_from_subinventory,
                         p_from_locator_id,
                         l_project_id, -- p_project_id, /* Bug 6830559 */
                         l_task_id, -- p_task_id, /* Bug 6830559 */
                         l_from_mol_inspection_status
                        );
       ELSE
	 OPEN c_mol_no_mmtt(
                            p_item_id,
                            p_lpn_id,
			    p_lot_number,
                            p_revision,
                            p_from_subinventory,
                            p_from_locator_id,
                            -- ,p_cost_group_id ????
                            l_project_id, -- p_project_id, -- Bug 6830559
                            l_task_id, -- p_task_id, -- Bug 6830559
                            l_from_mol_inspection_status ,
                            p_uom_code,
							l_new_reference_id  --14133874
                           );
      END IF;

      --Maneesh
      l_mol_res_in(1).transaction_type       := l_transaction_type;
      l_mol_res_in(1).organization_id        := p_org_id;
      l_mol_res_in(1).lpn_id                 := p_transfer_lpn_id;
      l_mol_res_in(1).inventory_item_id      := p_item_id;
      l_mol_res_in(1).lot_number             := p_lot_number;
      l_mol_res_in(1).item_revision          := p_revision;
      l_mol_res_in(1).from_subinventory_code := p_subinventory;
      l_mol_res_in(1).from_locator_id        := p_locator_id;
      -- l_mol_res_in(1).cost_group_id          := p_cost_group_id; ????
      l_mol_res_in(1).project_id             := l_project_id;
      l_mol_res_in(1).task_id                := l_task_id;
      l_mol_res_in(1).uom_code               := p_uom_code;
      l_mol_res_in(1).backorder_delivery_detail_id := null;
      l_mol_res_in(1).crossdock_type         := null;
      l_mol_res_in(1).transfer_org_id        := l_transfer_org_id;
      l_mol_res_in(1).secondary_uom          := p_sec_uom;
      l_mol_res_in(1).inspection_status      := l_transfer_inspection_status ;

      -- CHANGES FOR  FROM MOL AND TRANSFER MOL POINTS TO THE SAME MOL
      -- IF FROM AND TRANSFER MOL POINTS TO THE SAME MOL LINE i,e NO
      -- CHANGES IN THE CONSOLIDATING CRITERIA THEN DON'T DO ANYTHING
      -- FOR THE MOVE ORDER LINE FOR THE ABOVE TXNS.

      IF (  nvl(l_mol_res_in(1).lpn_id,-1) = nvl(p_lpn_id ,-1)
        and nvl(l_mol_res_in(1).inventory_item_id,-1) = nvl(p_item_id,-1)
        and nvl(l_mol_res_in(1).lot_number,'@$#_') = nvl(p_lot_number,'@$#_')
        and nvl(l_mol_res_in(1).item_revision,'@$#_') = nvl(p_revision,'@$#_')
        and nvl(l_mol_res_in(1).from_subinventory_code,'@$#_') =  nvl(p_from_subinventory,'@$#_')
        and nvl(l_mol_res_in(1).from_locator_id,-1) = nvl(p_from_locator_id,-1)
        and nvl(l_mol_res_in(1).project_id,-1) = nvl(l_project_id,-1) /* Bug 6830559 */
        and nvl(l_mol_res_in(1).task_id,-1) = nvl(l_task_id,-1) /* Bug 6830559 */
        and l_mol_res_in(1).uom_code = p_uom_code
        and nvl(l_mol_res_in(1).inspection_status,-1) =  nvl(l_from_mol_inspection_status,-1) )
     THEN
        -- CONSOLIDATING CRITERIA SAME NO CHANGES FOR MOL LINE FOR THIS CASE.
        l_update_or_close := 'N';
        IF (l_debug = 1) THEN
            print_debug('MAINTAIN_MO_CON - UPDATE OR CLOSE: '||l_update_or_close,1);
        END IF;
     END IF;


      --{{
      --Test cases where there is or is not a MOL line}}

      IF l_update_or_close = 'N' THEN
        IF (l_debug = 1) THEN
            print_debug('MAINTAIN_MO_CON - NO NEED TO PROCESS FOR THIS CASE',1);
        END IF;
      ELSE
        IF (l_debug = 1) THEN
            print_debug('MAINTAIN_MO_CON - OPENING TRANSFER MOL FOR THIS CASE',1);
        END IF;
        open c_transfer_mol(
			  l_mol_res_in(1).lpn_id
			  ,l_mol_res_in(1).inventory_item_id
			  ,l_mol_res_in(1).lot_number
			  ,l_mol_res_in(1).item_revision
			  ,l_mol_res_in(1).from_subinventory_code
			  ,l_mol_res_in(1).from_locator_id
			  ,l_mol_res_in(1).project_id
			  ,l_mol_res_in(1).task_id
			  ,l_mol_res_in(1).uom_code
			  ,l_mol_res_in(1).backorder_delivery_detail_id
			  ,l_mol_res_in(1).crossdock_type
			  ,l_mol_res_in(1).inspection_status
			  , l_new_reference  --13935217
			  , l_new_reference_id  --13935217
			  );

        Fetch c_transfer_mol into l_transfer_mol_rec;
        close c_transfer_mol;

        IF l_transfer_mol_rec.line_id IS NOT NULL THEN
         	 l_update_or_close := 'C';

	 --Move the check to here so that it is done before we
	 --tie MMTT/WDT to the transfer MOL.  This is needed
	 --because we won't call complete_operation_instance
	 --for the MMTT until the end of the API.  Therefore,
	 --the check below would fail if it is done after we
	 --tie MMTT/WDT

	 --Also, this check is not needed because we should allow
	 --loading materials into a loaded LPN
	   IF (l_transaction_type <> 'TRANSFER') THEN
	      l_loaded := 0;

              BEGIN
	         SELECT 1
	  	 INTO l_loaded
	  	 FROM dual
	  	 WHERE exists
	  	 (SELECT 1
	  	  FROM wms_dispatched_tasks wdt
	  	  , mtl_material_transactions_temp mmtt
	  	  WHERE mmtt.move_order_line_id =  l_transfer_mol_rec.line_id
	  	  AND wdt.transaction_temp_id = mmtt.transaction_temp_id
	  	  AND wdt.status IN (3, 4) -- dispached or loaded
	  	  AND wdt.task_type = 2 -- putaway
		  );

	         IF (l_debug = 1) THEN
	  	  print_debug('MAINTAIN_MO_CON - TASK ALREADY LOADED FOR '||l_transfer_mol_rec.line_id || ' FAILURE ' ,1);
	         END IF;

	         l_progress := 'WMSINB-45129';
	         RAISE fnd_api.g_exc_error;

	      EXCEPTION
	         WHEN NO_DATA_FOUND THEN
	  	  l_progress := 'WMSINB-45130';
	  	  null;
	      END;
	   END IF;

        ELSE
  	   l_update_or_close := 'U';
        END IF;
      END IF; -- IF l_update_or_close = 'N' THEN

      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_CON - UPDATE OR CLOSE: '||l_update_or_close,1);
      END IF;


    IF l_update_or_close = 'N' THEN
       --
       IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_CON - NO PROCESSING!!',1);
         print_debug('MAINTAIN_MO_CON - UPDATING WMS_PROCESS_FLAG TO 1',1);
       END IF;
        -- bug 8938083 added code to update wms_process_flag to 1
	LOOP
	 IF (p_mmtt_temp_id IS NOT NULL) THEN
	    FETCH c_mol_mmtt INTO l_mol_rec;
	    EXIT WHEN c_mol_mmtt%notfound;
	  ELSE
	       FETCH c_mol_no_mmtt INTO l_mol_rec;
	       EXIT WHEN c_mol_no_mmtt%notfound;
	 END IF;
         UPDATE mtl_txn_request_lines
         SET wms_process_flag = 1
         WHERE line_id = l_mol_rec.line_id;
       END LOOP;

    ELSE

      l_remaining_primary_quantity := p_primary_quantity;
      l_remaining_secondary_quantity :=p_sec_qty;--bug12790652
      --{{
      --For cases where there is no MMTT, make sure that the correct MOL is returned.  }}


      LOOP
	 IF (p_mmtt_temp_id IS NOT NULL) THEN
	    FETCH c_mol_mmtt INTO l_mol_rec;
	    EXIT WHEN c_mol_mmtt%notfound;
	  ELSE
	       FETCH c_mol_no_mmtt INTO l_mol_rec;
	       EXIT WHEN c_mol_no_mmtt%notfound;
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - REMAINING QUANTITY:'||l_remaining_primary_quantity||':'||l_progress,1);
	    print_debug('MAINTAIN_MO_CON - REMAINING SECONDARY QUANTITY:'||l_remaining_secondary_quantity||':'||l_progress,1);--bug12790652
	    print_debug('MAINTAIN_MO_CON - LINE_ID:'||l_mol_rec.line_id||' WMS_PROCESS_FLAG:'||l_mol_rec.wms_process_flag,1);
	    l_progress := 'WMSINB-45075';
	 END IF;

	 --BUG 4766810: Always add before rounding.  Also, when comparing
	 -- for equality, check if the two number differs by 0.000005
	 -- (round to 5 digits).
	 IF (l_mol_rec.uom_code <> p_primary_uom_code) THEN
	 --commenting below code for bug 13484877--Here the primary mol qty is derived by multiplying the conv factor with trx qty
     --But if the trx qty is a rounded off qty, then qty mistmatch will happen. So to avoid that,the  l_mol_qty_in_puom
     --can be direectly derived from  l_mol_rec.primary_quantity
	    l_conversion_rate := inv_rcv_cache.get_conversion_rate(l_mol_rec.inventory_item_id,
								   l_mol_rec.uom_code,
								   p_primary_uom_code);
	    --l_mol_qty_in_puom := l_mol_rec.quantity * l_conversion_rate;
		--Added for bug 13484877 START
		l_mol_qty_in_puom := l_mol_rec.primary_quantity;
		IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - MOL l_mol_rec.primary_quantity:'||l_mol_rec.primary_quantity||':'||l_progress,1);
	    END IF;
		--Added for bug 13484877 END
	  ELSE
	    l_mol_qty_in_puom := l_mol_rec.quantity;
	    l_conversion_rate := 1;
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO - MOL QTY IN PUOM:'||l_mol_qty_in_puom||':'||l_progress,1);
	 END IF;

         l_backorder_delivery_detail_id := null;
         l_mol_consumed_full            := 0;

         -- SET THE REFERENCE INFORMATION HERE
         l_new_reference           := l_mol_rec.reference;
         l_new_reference_type_code := l_mol_rec.reference_type_code;
         l_new_reference_id        := l_mol_rec.reference_id;

	 --BUG 4766810, always round to 5 digits when comparing because
	 --quantity is stored in 5 digits in Inventory
	 IF Round(l_mol_qty_in_puom,5) <= Round(l_remaining_primary_quantity,5) THEN

            -- ***************************************************
            -- IF THE LINE IS NOT BACKORDERD THEN CLOSE THE LINE
            -- IF THE LINE IS BACKORDERD THEN UPDATED THE LINE
            -- ***************************************************
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO_CON - mol consumed full ',1);
	    END IF;

            l_backorder_delivery_detail_id := l_mol_rec.backorder_delivery_detail_id;
            l_mol_consumed_full            := 1;

            IF (l_backorder_delivery_detail_id is not NULL AND l_transaction_type = 'REJECT') THEN
	       IF (l_debug = 1) THEN
		  print_debug('Reject xdock materials.  Calling inv_reservation_pub.delete_reservation',4);
	       END IF;

	       l_rsv_rec.demand_source_line_detail := l_backorder_delivery_detail_id;
	       l_rsv_rec.organization_id           := p_org_id;
	       l_rsv_rec.inventory_item_id         := l_mol_rec.inventory_item_id;

	       inv_reservation_pub.delete_reservation
		 (p_api_version_number       => 1.0
		  , x_return_status          => l_return_status
		  , x_msg_count              => l_msg_count
		  , x_msg_data               => l_msg_data
		  , p_rsv_rec                => l_rsv_rec
		  , p_serial_number          => l_dummy_serial
		  );

	       IF (l_debug = 1) THEN
		  print_debug('Returned from inv_reservation_pub.delete_reservation',4);
		  print_debug('x_return_status =>'||l_return_status,4);
	       END IF;

	       IF (l_return_status <> fnd_api.g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('x_msg_data:  '||l_msg_data,4);
		     print_debug('x_msg_count: '||l_msg_count,4);
			 print_debug('SQLCODE:'||SQLCODE||' SQLERRM:'||SQLERRM,4);
			 print_debug('Raising Exception!!!',4);
		  END IF;
		  l_progress := '@@@';
		  RAISE fnd_api.g_exc_unexpected_error;
	       END IF;

	       l_backorder_delivery_detail_id := NULL;
	    END IF; --IF (l_backorder_delivery_detail_id is not NULL AND l_transaction_type = 'REJECT') THEN

	    IF l_backorder_delivery_detail_id IS NOT NULL THEN
		l_progress := 'WMSINB-45078';
	        --update the mol

	        IF (l_debug = 1) THEN
	           print_debug('MAINTAIN_MO_CON - l_backorder_delivery_detail_id = '|| l_backorder_delivery_detail_id,1);
	        END IF;

		--Update quantity with the quantity converted to the UOM in the RTI.  This is changed so
		--that the we honor the UOM entered by the user during
		--Transfer
		IF (l_mol_rec.uom_code <> p_uom_code) THEN
		   l_tmp_qty := inv_rcv_cache.convert_qty(l_mol_rec.inventory_item_id
							  ,l_mol_rec.txn_qty
							  ,l_mol_rec.uom_code
							  ,p_uom_code);
		   l_tmp_qty_dtld := inv_rcv_cache.convert_qty(l_mol_rec.inventory_item_id
							       ,l_mol_rec.quantity_detailed
							       ,l_mol_rec.uom_code
							       ,p_uom_code);
		   l_tmp_qty_dlvd := inv_rcv_cache.convert_qty(l_mol_rec.inventory_item_id
							       ,l_mol_rec.quantity_delivered
							       ,l_mol_rec.uom_code
							       ,p_uom_code);
		   l_tmp_uom_code := p_uom_code;
		 ELSE
		   l_tmp_qty := l_mol_rec.txn_qty;
		   l_tmp_qty_dtld := l_mol_rec.quantity_detailed;
		   l_tmp_qty_dlvd := l_mol_rec.quantity_delivered;
		   l_tmp_uom_code := l_mol_rec.uom_code;
		END IF;

	        IF (l_debug = 1) THEN
	           print_debug('MAINTAIN_MO_CON - l_tmp_qty:'||l_tmp_qty,4);
		   print_debug('MAINTAIN_MO_CON - l_tmp_qty_dtld:'||l_tmp_qty_dtld,4);
		   print_debug('MAINTAIN_MO_CON - l_tmp_qty_dlvd:'||l_tmp_qty_dlvd,4);
		   print_debug('MAINTAIN_MO_CON - l_tmp_uom_code:'||l_tmp_uom_code,4);
	        END IF;

		UPDATE mtl_txn_request_lines
	          SET inspection_status = Decode(l_transaction_type,'ACCEPT',2,'REJECT',3,inspection_status)
	          , lpn_id = p_transfer_lpn_id
		  , quantity = l_tmp_qty
	          , quantity_detailed = Decode(l_transaction_type,'TRANSFER',l_tmp_qty_dtld,NULL)
	          , quantity_delivered = Decode(l_transaction_type,'TRANSFER',l_tmp_qty_dlvd,NULL)
		  , uom_code = l_tmp_uom_code
                  -- OPMConvergence
	          , secondary_quantity_detailed = Decode(l_transaction_type,'TRANSFER',secondary_quantity_detailed,NULL)
                  -- OPMConvergence
	          , lot_number = p_lot_number
	          , revision = p_revision
	          , from_subinventory_code = Nvl(p_subinventory, from_subinventory_code)
	          , from_locator_id = Nvl(p_locator_id, from_locator_id)
	          , wms_process_flag = 1
	          WHERE line_id = l_mol_rec.line_id;
            else
	        IF (l_debug = 1) THEN
	           print_debug('MAINTAIN_MO_CON - backorder_delivery_detail_id is null ',1);
	        END IF;
		l_progress := 'WMSINB-45079';
		--If p_mmtt_temp_id is not null then the move order line should
		--not be closed because this unnecessarily leads to
		--cancelling of operation plan. The line should be closed
		--if and only if there is a transfer mol present with the
		--same consolidation criteria. Otherwise it should be
		--updated just like the crossdock mols.
		--Add an extra parameter to transfer_mol cursor. This new
		--parameter will be the current mol id. Transfer mol cursor
		--should not pickup the lines which have line_id = new
		--prameter. Open the transfer mol cursor

		IF (l_update_or_close = 'C') THEN

	           IF (l_debug = 1) THEN
	              print_debug('MAINTAIN_MO_CON - before updating mol update or close = C ',1);
	           END IF;

		   UPDATE mtl_txn_request_lines
		     SET   line_status = inv_globals.G_TO_STATUS_CLOSED
		     , quantity = Nvl(quantity_delivered,0)
		     , quantity_detailed = quantity_delivered
		     , secondary_quantity_detailed = SECONDARY_QUANTITY_DELIVERED
		     --BDD_ID will get NULL out for REJECT cases
		     , backorder_delivery_detail_id = l_backorder_delivery_detail_id
		     , crossdock_type = Decode(l_backorder_delivery_detail_id,NULL,NULL,crossdock_type)
		     , wms_process_flag = 1
		     WHERE line_id = l_mol_rec.line_id;

		 ELSE

		   --Update quantity with the quantity converted to the UOM in the RTI.  This is changed so
		   --that the we honor the UOM entered by the user during
		   --Transfer
		   IF (l_mol_rec.uom_code <> p_uom_code) THEN
		   -- Bug 13484877 Start
		        IF (p_primary_uom_code = p_uom_code) THEN
					  l_tmp_qty := l_mol_rec.primary_quantity;
					  IF (l_debug = 1) THEN
							print_debug('MAINTAIN_MO_CON - l_tmp_qty derived from l_mol_rec.primary_quantity'|| l_tmp_qty,1);
					  END IF;
                ELSE   -- End Bug 13484877
					  l_tmp_qty := inv_rcv_cache.convert_qty(l_mol_rec.inventory_item_id
										 ,l_mol_rec.txn_qty
										 ,l_mol_rec.uom_code
										 ,p_uom_code);
				END IF; -- 13484877
		      l_tmp_qty_dtld := inv_rcv_cache.convert_qty(l_mol_rec.inventory_item_id
								  ,l_mol_rec.quantity_detailed
								  ,l_mol_rec.uom_code
								  ,p_uom_code);
		      l_tmp_qty_dlvd := inv_rcv_cache.convert_qty(l_mol_rec.inventory_item_id
								  ,l_mol_rec.quantity_delivered
								  ,l_mol_rec.uom_code
								  ,p_uom_code);
		      l_tmp_uom_code := p_uom_code;
		    ELSE
		      l_tmp_qty := l_mol_rec.txn_qty;
		      l_tmp_qty_dtld := l_mol_rec.quantity_detailed;
		      l_tmp_qty_dlvd := l_mol_rec.quantity_delivered;
		      l_tmp_uom_code := l_mol_rec.uom_code;
		   END IF;

		   IF (l_debug = 1) THEN
		      print_debug('MAINTAIN_MO_CON - l_tmp_qty:'||l_tmp_qty,4);
		      print_debug('MAINTAIN_MO_CON - l_tmp_qty_dtld:'||l_tmp_qty_dtld,4);
		      print_debug('MAINTAIN_MO_CON - l_tmp_qty_dlvd:'||l_tmp_qty_dlvd,4);
		      print_debug('MAINTAIN_MO_CON - l_tmp_uom_code:'||l_tmp_uom_code,4);
		   END IF;

	           IF (l_debug = 1) THEN
	              print_debug('MAINTAIN_MO_CON - before updating mol update or clode <> C ',1);
	           END IF;

		   UPDATE mtl_txn_request_lines
		     SET inspection_status = Decode(l_transaction_type,'ACCEPT',2,'REJECT',3,inspection_status)
		     , lpn_id = p_transfer_lpn_id
		     , quantity = l_tmp_qty
		     , quantity_detailed = Decode(l_transaction_type,'TRANSFER',l_tmp_qty_dtld,NULL)
		     , quantity_delivered = l_tmp_qty_dlvd
		     , uom_code = l_tmp_uom_code
		     -- OPMConvergence
		     , secondary_quantity_detailed = Decode(l_transaction_type,'TRANSFER',secondary_quantity_detailed,NULL)
		     -- OPMConvergence
		     , lot_number = p_lot_number
		     , revision = p_revision
		     , from_subinventory_code = Nvl(p_subinventory, from_subinventory_code)
		     , from_locator_id = Nvl(p_locator_id, from_locator_id)
		     --BDD_ID will get NULL out for REJECT cases
		     , backorder_delivery_detail_id = l_backorder_delivery_detail_id
		     , crossdock_type = Decode(l_backorder_delivery_detail_id,NULL,NULL,crossdock_type)
		     , reason_id = l_reason_id -- Bug No. 9099299
                     , wms_process_flag = 1
		     WHERE line_id = l_mol_rec.line_id;
		END IF;

            end if; --  if l_backorder_delivery_detail_id  is not null

	    l_remaining_primary_quantity := l_remaining_primary_quantity - l_mol_qty_in_puom;
	    l_remaining_secondary_quantity := l_remaining_secondary_quantity - l_mol_rec.secondary_quantity_2;--bug12790652
	    -- Bug 5632202 : Set l_remaining_primary_quantity to zero if it differs from MOL
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO_CON -l_remaining_primary_quantity :'||l_remaining_primary_quantity,4);	--bug12790652
	       print_debug('MAINTAIN_MO_CON -l_remaining_secondary_quantity:'||l_remaining_secondary_quantity,4);--bug12790652
	    END IF;--               quantity in sixth decimal place

	    IF trunc(( l_remaining_primary_quantity/ l_conversion_rate ),5) = 0 THEN
	      l_remaining_primary_quantity := 0;
	      l_remaining_secondary_quantity :=0;--bug12790652
	      IF (l_debug = 1) THEN
		print_debug('MAINTAIN_MO_CON - Setting l_remaining_primary_quantity to zero',1);
	      END IF;
	    END IF;

	    --cancel_operation_instance should be called only if
	    --p_mmtt_temp_id is NULL
	    IF (p_mmtt_temp_id IS NULL) THEN
	       IF (l_debug = 1) THEN
		  print_debug('MAINTAIN_MO_CON - calling call_atf_api:'||l_mol_rec.line_id,1);
		  l_progress := 'WMSINB-45080';
	       END IF;

	       call_atf_api(x_return_status => x_return_status,
			    x_msg_data => x_msg_data,
			    x_msg_count => x_msg_count,
			    x_error_code => l_error_code,
			    p_source_task_id => NULL,
			    p_activity_type_id => 1,
			    p_operation_type_id => NULL,
			    p_mol_id => l_mol_rec.line_id,
			    p_atf_api_name => g_atf_api_cancel);

	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('MAINTAIN_MO - call_atf_api failed:'||l_mol_rec.line_id,1);
		     l_progress := 'WMSINB-45085';
		  END IF;
		  --raise error
		  l_progress := 'WMSINB-45090';
		  RAISE fnd_api.g_exc_error;
	       END IF;
	    END IF;
	  ELSE --IF  l_mol_qty_in_puom <= l_remaining_primary_quantity THEN
	    --split_mol

	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO_CON - CALLING SPLIT_MO:'||l_remaining_primary_quantity||':'||l_progress,1);
	       print_debug('MAINTAIN_MO_CON - CALLING SPLIT_MO:'||l_remaining_secondary_quantity||':'||l_progress,1);--bug12790652
	       l_progress := 'WMSINB-45108';
	    END IF;

	    l_mo_split_tb(1).prim_qty := l_remaining_primary_quantity;
            -- OPMConvergence
            -- Do we need to assign secondary quantity too ?
            -- OPMConvergence
	    l_mo_split_tb(1).sec_qty  := l_remaining_secondary_quantity;--bug12790652
	    l_mo_split_tb(1).line_id := NULL;

	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - Finally Calling split_mo',1);
	       l_progress := 'WMSINB-45110';
	    END IF;

	    IF p_mmtt_temp_id IS NOT NULL THEN
	       -- Call split mo with operation_type DELIVER
	       -- This will split the MO and tied the mmtt
	       -- to the new MO
	       inv_rcv_integration_apis.split_mo
		 (p_orig_mol_id => l_mol_rec.line_id,
		  p_mo_splt_tb => l_mo_split_tb,
		  p_operation_type => 'DELIVER',
		  p_txn_header_id => p_mmtt_temp_id,
		  x_return_status => x_return_status,
		  x_msg_count => x_msg_count,
		  x_msg_data => x_msg_data);
	     ELSE
	       inv_rcv_integration_apis.split_mo
		 (p_orig_mol_id => l_mol_rec.line_id,
		  p_mo_splt_tb => l_mo_split_tb,
		  x_return_status => x_return_status,
		  x_msg_count => x_msg_count,
		  x_msg_data => x_msg_data);
	    END IF;

	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-45112';
	       RAISE fnd_api.g_exc_error;
	    END IF;


	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO_CON - NEW LINE ID:'||l_mo_split_tb(1).line_id||':'||l_progress,1);
	       l_progress := 'WMSINB-45114';
	    END IF;


            l_mol_consumed_full            := 0;
            l_split_qty                    := 0;
            l_split_sec_qty                := 0;

            BEGIN
                  select  backorder_delivery_detail_id
                         ,(mtrl.quantity - Nvl(mtrl.quantity_delivered, 0))
                         ,(mtrl.secondary_quantity - Nvl(mtrl.secondary_quantity_delivered, 0))
			 ,uom_code -- bug8283511
                    into l_backorder_delivery_detail_id
                         ,l_split_qty
			 ,l_split_sec_qty
			 ,l_uom_code -- bug8283511
                    from MTL_TXN_REQUEST_LINES mtrl
                   where mtrl.line_id = l_mo_split_tb(1).line_id;

	       l_progress := 'WMSINB-45115';
	       IF (l_debug = 1) THEN
	           print_debug('MAINTAIN_MO_CON - CHECK WHETHER SPLITTED LINE IS BACKORDERD backorder_delivery_detail_id :'||l_backorder_delivery_detail_id,1);
	       END IF;

            EXCEPTION
                 WHEN OTHERS THEN
                      l_backorder_delivery_detail_id := null;
            END;


            IF (l_backorder_delivery_detail_id is not null AND l_transaction_type = 'REJECT') THEN
	       IF (l_debug = 1) THEN
		  print_debug('Calling inv_reservation_pub.delete_reservation',4);
	       END IF;

	       l_rsv_rec.demand_source_line_detail := l_backorder_delivery_detail_id;
	       l_rsv_rec.organization_id           := p_org_id;
	       l_rsv_rec.inventory_item_id         := l_mol_rec.inventory_item_id;

	       inv_reservation_pub.delete_reservation
		 (p_api_version_number       => 1.0
		  , x_return_status          => l_return_status
		  , x_msg_count              => l_msg_count
		  , x_msg_data               => l_msg_data
		  , p_rsv_rec                => l_rsv_rec
		     , p_serial_number          => l_dummy_serial
		  );

	       IF (l_debug = 1) THEN
		  print_debug('Returned from inv_reservation_pub.delete_reservation',4);
		  print_debug('x_return_status =>'||l_return_status,4);
	       END IF;

	       IF (l_return_status <> fnd_api.g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('x_msg_data:  '||l_msg_data,4);
		     print_debug('x_msg_count: '||l_msg_count,4);
		     print_debug('SQLCODE:'||SQLCODE||' SQLERRM:'||SQLERRM,4);
		     print_debug('Raising Exception!!!',4);
		  END IF;
		  l_progress := '@@@';
		  RAISE fnd_api.g_exc_unexpected_error;
	       END IF;

	       l_backorder_delivery_detail_id := NULL;
	    END IF;--IF l_backorder_delivery_detail_id is not null AND l_transaction_type = 'REJECT') THEN

	    IF (l_backorder_delivery_detail_id IS NOT NULL) THEN
	       -- update the txn_source_id and inspection_status,
	       -- lpn_id, wms_process_flag for the new row.
	       -- and wms_process_flag for the old row.

	       --Update quantity with the quantity converted to the UOM in the RTI.  This is changed so
	       --that the we honor the UOM entered by the user during
	       --Transfer
	       UPDATE mtl_txn_request_lines
	         SET inspection_status = Decode(l_transaction_type,'ACCEPT',2,'REJECT',3,inspection_status)
	         , lpn_id = p_transfer_lpn_id
		 , quantity = Decode(uom_code
				     ,p_uom_code
				     ,quantity
				     ,inv_rcv_cache.convert_qty(inventory_item_id
								,quantity
								,uom_code
								,p_uom_code)
				     )
		 , quantity_detailed = Decode(l_transaction_type
					      ,'TRANSFER'
					      ,Decode(uom_code
						      ,p_uom_code
						      ,quantity_detailed
						      ,inv_rcv_cache.convert_qty(inventory_item_id
										 ,quantity_detailed
										 ,uom_code
										 ,p_uom_code))
					      ,NULL)
		 , quantity_delivered = Decode(l_transaction_type
					       ,'TRANSFER'
					       ,Decode(uom_code
						       ,p_uom_code
						       ,quantity_delivered
						       ,inv_rcv_cache.convert_qty(inventory_item_id
										  ,quantity_delivered
										  ,uom_code
										  ,p_uom_code))
					       ,NULL)
		 , uom_code = p_uom_code
                 -- OPMConvergence
	         , secondary_quantity_detailed = Decode(l_transaction_type,'TRANSFER',secondary_quantity_detailed,NULL)
                 -- OPMConvergence
	         , lot_number = p_lot_number
	         , revision = p_revision
	         , from_subinventory_code = Nvl(p_subinventory, from_subinventory_code)
	         , from_locator_id = Nvl(p_locator_id, from_locator_id)
	         , wms_process_flag = 1
	         WHERE line_id = l_mo_split_tb(1).line_id;
            ELSE
	       -- CLOSE THE SPLITTED LINE IF NOT BACKORDERED


	       --???? Should we also update the primary qty here????
	       --If p_mmtt_temp_id is not null then the move order line should
	       --not be closed because this unnecessarily leads to
	       --cancelling of operation plan. The line should be closed
	       --if and only if there is a transfer mol present with the
	       --same consolidation criteria. Otherwise it should be
	       --updated just like the crossdock mols.

	       IF (l_update_or_close = 'C') THEN
		  UPDATE mtl_txn_request_lines
		    SET   line_status = inv_globals.G_TO_STATUS_CLOSED
		    , quantity = quantity_delivered
		    , quantity_detailed = quantity_delivered
		    , secondary_quantity_detailed = SECONDARY_QUANTITY_DELIVERED
		    , wms_process_flag = 1
		    , backorder_delivery_detail_id = l_backorder_delivery_detail_id
		    , crossdock_type = Decode(l_backorder_delivery_detail_id,NULL,NULL,crossdock_type)
		    WHERE line_id = l_mo_split_tb(1).line_id;
		ELSE
		  UPDATE mtl_txn_request_lines
		    SET inspection_status = Decode(l_transaction_type,'ACCEPT',2,'REJECT',3,inspection_status)
		    , lpn_id = p_transfer_lpn_id
		    , quantity = Decode(p_uom_code,p_primary_uom_code,primary_quantity,uom_code--bug 13484877
					--commenting for bug 13484877,p_uom_code
					,quantity
					,inv_rcv_cache.convert_qty(inventory_item_id
								   ,quantity
								   ,uom_code
								   ,p_uom_code)
					)
		    , quantity_detailed = Decode(l_transaction_type
						 ,'TRANSFER'
						 ,Decode(uom_code
							 ,p_uom_code
							 ,quantity_detailed
							 ,inv_rcv_cache.convert_qty(inventory_item_id
										    ,quantity_detailed
										    ,uom_code
										    ,p_uom_code))
						 ,NULL)
		    , quantity_delivered = Decode(l_transaction_type
						  ,'TRANSFER'
						  ,Decode(uom_code
							 ,p_uom_code
							  ,quantity_delivered
							  ,inv_rcv_cache.convert_qty(inventory_item_id
										     ,quantity_delivered
										     ,uom_code
										     ,p_uom_code))
						  ,NULL)
		    , uom_code = p_uom_code
		    -- OPMConvergence
		    , secondary_quantity_detailed = Decode(l_transaction_type,'TRANSFER',secondary_quantity_detailed,NULL)
		    -- OPMConvergence
		    , lot_number = p_lot_number
		    , revision = p_revision
		    , from_subinventory_code = Nvl(p_subinventory, from_subinventory_code)
		    , from_locator_id = Nvl(p_locator_id, from_locator_id)
		    , wms_process_flag = 1
		    , backorder_delivery_detail_id = l_backorder_delivery_detail_id
		    , crossdock_type = Decode(l_backorder_delivery_detail_id,NULL,NULL,crossdock_type)
		    WHERE line_id = l_mo_split_tb(1).line_id;
	       END IF;
	    END IF;--IF (l_backorder_delivery_detail_id IS NOT NULL) THEN

	    /* EG. MOL has 6.  RS has 3 and 3.  You do LPN split of 4.
	     * PWB will split MOL into 4 and 2, and the line with 4
	     * will have wms_process_flag of 2.  maintain_mo_con will be
	     * called twice, 1 for 3, the other for 1.  You do not want
	     * to update the wms_process_flag MOL with 4 the first time
	     * time you reach here.  You should only update it when the
	     * qty being processing match the MOL qty (which will done
	     * when maintain_mo_con is called with qty 1 */
	       --UPDATE mtl_txn_request_lines
	       --SET wms_process_flag = 1
	       --WHERE line_id = l_mol_rec.line_id;

	    l_remaining_primary_quantity := 0;

	    IF (l_debug = 1) THEN
		  print_debug('MAINTAIN_MO_CON - calling call_atf_api:'||l_mo_split_tb(1).line_id,1);
		  l_progress := 'WMSINB-45116';
	    END IF;

	    --cancel_operation_instance should be called only if
	    --p_mmtt_temp_id is NULL
	    IF (p_mmtt_temp_id IS NULL) THEN
	       call_atf_api(x_return_status => x_return_status,
			    x_msg_data => x_msg_data,
			    x_msg_count => x_msg_count,
			    x_error_code => l_error_code,
			    p_source_task_id => NULL,
			    p_activity_type_id => 1,
			    p_operation_type_id => NULL,
			    p_mol_id => l_mo_split_tb(1).line_id,
			    p_atf_api_name => g_atf_api_cancel);

	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('MAINTAIN_MO_CON - call_atf_api failed:'||l_mo_split_tb(1).line_id,1);
		     l_progress := 'WMSINB-45118';
		  END IF;
		  --raise error
		  l_progress := 'WMSINB-45120';
		  RAISE fnd_api.g_exc_error;
	       END IF;
	    END IF;

	 END IF; --IF  l_mol_qty_in_puom <= l_remaining_primary_quantity THEN

         --
         -- Consolidate THE LINES FOR THE TRANSFER LPN.
         --
         if l_backorder_delivery_detail_id is null
	 Then

	    l_progress := 'WMSINB-45122';
	    -- POPULATE THE RECORD FOR TRANSFER MOL

	    IF (l_debug = 1) THEN
	        print_debug('MAINTAIN_MO_CON - consolidate lines l_progess =  '|| l_progress,1);
	    END IF;

	    --.. Moved the open and fetch call above the loop

	    -- ** SET THE MOL REC QTY HERE ***
	    IF l_mol_consumed_full = 1 then

	       IF (l_debug = 1) THEN
	           print_debug('MAINTAIN_MO_CON - Setting qty at case 1 ',1);
		   print_debug('l_transfer_mol_rec.uom_code:'||l_transfer_mol_rec.uom_code,1);
		   print_debug('l_mol_rec.uom_code '||l_mol_rec.uom_code,1);
		   print_debug('l_mol_rec.quantity '||l_mol_rec.quantity,1);

	       END IF;
                --started changes for  bug8283511
               IF(l_transfer_mol_rec.uom_code <> l_mol_rec.uom_code) THEN
	            l_mol_res_in(1).quantity := inv_rcv_cache.convert_qty(p_inventory_item_id => p_item_id
		       ,p_from_qty         => l_mol_rec.quantity
		       ,p_from_uom_code    => l_mol_rec.uom_code
		       ,p_to_uom_code      => l_transfer_mol_rec.uom_code
		       ,p_precision        => 5--BUG 4939647
		       );

                      print_debug('l_mol_res_in(1).quantity in if block'||l_mol_res_in(1).quantity,1);
                ELSE
	              l_mol_res_in(1).quantity               := l_mol_rec.quantity;
	              print_debug('l_mol_res_in(1).quantity in else block '||l_mol_res_in(1).quantity,1);
	        END IF;
	        --end changes for  bug8283511
	        -- l_mol_res_in(1).quantity               := l_mol_rec.quantity; --added in upper if-else block for bug8283511
	        l_mol_res_in(1).primary_qty            := l_mol_rec.primary_quantity;
	        l_mol_res_in(1).secondary_quantity     := l_mol_rec.secondary_quantity_2; -- This is the QTY to be transacted
	    ELSE
	       IF (l_debug = 1) THEN
	           print_debug('MAINTAIN_MO_CON - Setting qty at case 2 ',1);
		   print_debug('l_transfer_mol_rec.uom_code:'||l_transfer_mol_rec.uom_code,1);
		   print_debug('l_uom_code '||l_uom_code,1);
		   print_debug('l_split_qty '||l_split_qty,1);
	       END IF;
              --started changes for  bug8283511
	       IF(l_transfer_mol_rec.uom_code <>l_uom_code) THEN
	       l_mol_res_in(1).quantity := inv_rcv_cache.convert_qty(p_inventory_item_id => p_item_id
		       ,p_from_qty         => l_split_qty
		       ,p_from_uom_code    => l_uom_code
		       ,p_to_uom_code      => l_transfer_mol_rec.uom_code
		       ,p_precision        => 5--BUG 4939647
		       );
               print_debug('l_mol_res_in(1).quantity in if block'||l_mol_res_in(1).quantity,1);
               ELSE
	       l_mol_res_in(1).quantity               := l_split_qty;
	       print_debug('l_mol_res_in(1).quantity in else block '||l_mol_res_in(1).quantity,1);
	       END IF;
	       --end changes for  bug8283511
	       --l_mol_res_in(1).quantity               := l_split_qty;--added in upper if-else block for bug8283511
	       l_mol_res_in(1).secondary_quantity     := l_split_sec_qty;
	       l_mol_res_in(1).primary_qty            := get_primary_qty(p_org_id,p_item_id,l_mol_rec.uom_code,l_split_qty);
	    END IF;

	    if l_transfer_mol_rec.line_id is not null
	    then
	       -- Move Order Line found
	       -- Check whether MOL is from the same SOURCE

	       l_progress := 'WMSINB-45124';

	       IF (l_debug = 1) THEN
		  print_debug('MAINTAIN_MOC_CON - Move Order Line Found line Id = '|| l_transfer_mol_rec.line_id,1);
	       END IF;

	       check_reference(
			       p_old_reference           => l_transfer_mol_rec.reference
			       ,p_old_reference_type_code => l_transfer_mol_rec.reference_type_code
			       ,p_old_reference_id        => l_transfer_mol_rec.reference_id
			       ,p_new_reference           => l_new_reference
			       ,p_new_reference_type_code => l_new_reference_type_code
			       ,p_new_reference_id        => l_new_reference_id
			       ,x_reference               => l_reference
			       ,x_reference_type_code     => l_reference_type_code
			       ,x_reference_id            => l_reference_id
			       ,x_transaction_type_id     => l_transaction_type_id
			       ,x_txn_source_type_id      => l_txn_source_type_id
			       ,x_return_status           => x_return_status
			       ,x_msg_count               => x_msg_count
			       ,x_msg_data                => x_msg_data
			       );


	       IF (l_debug = 1) THEN
		  print_debug('CHECK_REFERENCE - After calling check_reference :'||x_return_status||':'||l_progress,1);
		  l_progress := 'WMSINB-45126';
	       END IF;

	       IF (x_return_status <> 'S') THEN
		  l_progress := 'WMSINB-45127';
		  RAISE fnd_api.g_exc_error;
	       END IF;

	       --
	       -- UPDATE THE MOVE ORDER LINE HERE
	       --
	       IF (p_mmtt_temp_id IS NOT NULL) THEN
		  UPDATE mtl_material_transactions_temp
		    SET  move_order_line_id = l_transfer_mol_rec.line_id
		    WHERE transaction_temp_id = p_mmtt_temp_id;

		  l_qty_detailed := l_mol_res_in(1).quantity;


		  IF (l_debug = 1) THEN
		     print_debug('NUMBER OF MMTT UPDATED: '||SQL%rowcount,1);
		  END IF;
		ELSE
		  l_qty_detailed := 0;
	       END IF;

	       update mtl_txn_request_lines
		 set reference = l_reference
		 ,reference_type_code = l_reference_type_code
		 ,reference_id = l_reference_id
		 ,quantity = quantity + l_mol_res_in(1).quantity
		 ,quantity_detailed = quantity_detailed + l_qty_detailed
		 ,primary_quantity = primary_quantity + l_mol_res_in(1).primary_qty
		 ,secondary_quantity = secondary_quantity + l_mol_res_in(1).secondary_quantity
		 ,transaction_type_id = nvl(l_transaction_type_id,transaction_type_id)
		 ,transaction_source_type_id = nvl(l_txn_source_type_id,transaction_source_type_id)
		 ,wms_process_flag = 1
		 where line_id = l_transfer_mol_rec.line_id
		 ;

	       l_progress := 'WMSINB-45128';

	       /* Need to modify validate_lpN_info first.  Will revisit
	       call_atf_api(x_return_status => x_return_status,
			    x_msg_data => x_msg_data,
			    x_msg_count => x_msg_count,
			    x_error_code => l_error_code,
			    p_source_task_id => NULL,
			    p_activity_type_id => 1,
			    p_operation_type_id => NULL,
			    p_mol_id => l_transfer_mol_rec.line_id,
			    p_atf_api_name => g_atf_api_cancel);
*/
	       IF (x_return_status <> g_ret_sts_success) THEN
		  IF (l_debug = 1) THEN
		     print_debug('MAINTAIN_MO_CON - call_atf_api failed:'||l_transfer_mol_rec.line_id,1);
		     l_progress := 'WMSINB-45131';
		  END IF;
		  l_progress := 'WMSINB-45064';
		  RAISE fnd_api.g_exc_error;
	       END IF;
	    END IF;  --l_transfer_mol_rec.line_id is not null

	       --... The following code should be commented because
	       --there was no transfer MOL, we would have updated the orig
	       --mol


	    -- Else
	    -- Move Order Line Not Found Create Move Order
	    --     IF (l_debug = 1) THEN
	    --print_debug('MAINTAIN_MOC_CON - Move Order Line Not Found line Id ',1);
	    --		     END IF;

	    --create mol
	    --	     inv_rcv_std_rcpt_apis.create_move_order(p_move_order_header_id => l_move_order_header_id
	    --					     ,p_po_line_location_id      => p_po_line_location_id
	    --				     ,p_po_distribution_id       => p_po_distribution_id
	    --			     ,p_shipment_line_id         => p_shipment_line_id
	    --		     ,p_oe_order_line_id         => p_oe_order_line_id
	    --	     ,p_routing                  => p_routing_header_id
	    --     ,p_lot_control_code         => p_lot_control_code
	    --   ,p_org_id                   => l_mol_res_in(1).organization_id
	    -- ,p_item_id                  => l_mol_res_in(1).inventory_item_id
	    --							     ,p_qty                      => l_mol_res_in(1).quantity
	    --						     ,p_uom_code                 => l_mol_res_in(1).uom_code
	    --					     ,p_lpn                      => l_mol_res_in(1).lpn_id
	    --				     ,p_project_id               => l_mol_res_in(1).project_id
	    --			     ,p_task_id                  => l_mol_res_in(1).task_id
	    --		     ,p_revision                 => l_mol_res_in(1).item_revision
	    --		       ,p_inspect                  => l_mol_res_in(1).inspection_status
	    ---	       ,p_txn_source_id            => null
	    --       ,x_status                   => x_return_status
	    --     ,x_message                  => x_msg_data
	    --   ,p_transfer_org_id          => l_mol_res_in(1).transfer_org_id
	    -- ,p_wms_process_flag         => 1
	    --		       ,p_lot_number               => l_mol_res_in(1).lot_number
	    --	       ,p_secondary_quantity       => l_mol_res_in(1).secondary_quantity
	    --       ,p_secondary_uom            => l_mol_res_in(1).secondary_uom
	    --     ,x_line_id                  => l_move_order_line_id
	    --   );

	    --		     IF (l_debug = 1) THEN
	    --print_debug('MAINTAIN_MO_CON - After calling create_move_order:'||x_return_status||':'||l_progress,1);
	    --print_debug('MAINTAIN_MO_CON - Move Order Header ID:'||l_move_order_header_id||':'||l_progress,1);
	    --	     END IF;
	    --
	    --   IF (x_return_status <> 'S') THEN
	    --l_progress := 'WMSINB-45070';
	    --			RAISE fnd_api.g_exc_error;
	    --	     END IF;
	    --
	    --   --update mol for the sub and loc
	    -- UPDATE mtl_txn_request_lines
	    -- SET from_subinventory_code = Nvl(p_subinventory,from_subinventory_code)
	    --		       , from_locator_id = Nvl(p_locator_id, from_locator_id)
	    --	       WHERE header_id = l_move_order_header_id
	    --             and organization_id = p_org_id
	    --       AND inventory_item_id = p_item_id;

	 End if; -- l_backorder_delivery_detail_id is null

	 IF l_remaining_primary_quantity <= 0 THEN
	       EXIT;
	 END IF;
      END LOOP;

      IF c_mol_mmtt%isopen THEN
	 CLOSE c_mol_mmtt;
      END IF;

      IF c_mol_no_mmtt%isopen THEN
	 CLOSE c_mol_no_mmtt;
      END IF;

      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO - l_remaining_primary_quantity:'||l_remaining_primary_quantity,1);
      END IF;

      IF (Round(l_remaining_primary_quantity,5) > 0) THEN
	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO - QTY STILL REMAINING !!!'||l_remaining_primary_quantity||':'||l_progress,1);
	    l_progress := 'WMSINB-13244';
	 END IF;
	 --raise error
	 l_progress := 'WMSINB-13247';
	 RAISE fnd_api.g_exc_error;
      END IF;

      --update capacity and empty flag for locators
      IF (Nvl(p_locator_id, Nvl(l_from_loc_id, -1)) <> Nvl(l_from_loc_id, -1)) THEN
	 --call upd_empty_mixed_flag
	 IF p_locator_id IS NOT NULL THEN
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - Calling upd_empty_mixed_flag for	CURRENT sub',1);
	    END IF;

	    inv_loc_wms_utils.upd_empty_mixed_flag_rcv_loc ( x_return_status  => x_return_status
							     ,x_msg_count    => x_msg_count
							     ,x_msg_data     => x_msg_data
							     ,p_subinventory => p_subinventory
							     ,p_locator_id   => p_locator_id
							     ,p_org_id       => p_org_id
							     );
	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-13250';
	       -- Bug 5393727: do not raise an exception if locator API returns an error
	       -- RAISE fnd_api.g_exc_error;
	    END IF;

	    -- update curr capacity
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - Calling update_loc_curr_capacity FOR CURRENT sub',1); --bug13451495
	    END IF;

	    --bug13451495
            inv_loc_wms_utils.update_loc_current_capacity
	      ( x_return_status           => x_return_status
		,x_msg_count               => x_msg_count
		,x_msg_data                => x_msg_data
		,p_organization_id         => p_org_id
		,p_inventory_location_id   => p_locator_id
		,p_inventory_item_id       => p_item_id
		,p_primary_uom_flag        => 'N'
		,p_transaction_uom_code    => p_uom_code
		,p_quantity                => p_qty
		,p_issue_flag              => 'N'
		);
	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-13252';
	       -- Bug 5393727: do not raise an exception if locator API returns an error
	       -- RAISE fnd_api.g_exc_error;
	    END IF;
	 END IF; --IF p_subinventory IS NOT NULL THEN

	 IF l_from_loc_id IS NOT NULL THEN
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - Calling upd_empty_mixed_flag for FROM sub',1);
	    END IF;

	    inv_loc_wms_utils.upd_empty_mixed_flag_rcv_loc ( x_return_status  => x_return_status
							     ,x_msg_count    => x_msg_count
							     ,x_msg_data     => x_msg_data
							     ,p_subinventory => l_from_sub
							     ,p_locator_id   => l_from_loc_id
							     ,p_org_id       => p_org_id
							     );
	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-13255';
	       -- Bug 5393727: do not raise an exception if locator API returns an error
	       -- RAISE fnd_api.g_exc_error;
	    END IF;

	    -- update curr capacity
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - Calling update_loc_curr_capacity_nauto FOR FROM sub',1);
	    END IF;

	    inv_loc_wms_utils.update_loc_curr_capacity_nauto
	      ( x_return_status           => x_return_status
		,x_msg_count               => x_msg_count
		,x_msg_data                => x_msg_data
		,p_organization_id         => p_org_id
		,p_inventory_location_id   => l_from_loc_id
		,p_inventory_item_id       => p_item_id
		,p_primary_uom_flag        => 'N'
		,p_transaction_uom_code    => p_uom_code
		,p_quantity                => p_qty
		,p_issue_flag              => 'Y'
		);
	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-13257';
	       -- Bug 5393727: do not raise an exception if locator API returns an error
	       -- RAISE fnd_api.g_exc_error;
	    END IF;
	 END IF; --IF l_from_sub IS NOT NULL THEN
      END IF; --IF (Nvl(p_locator_id, Nvl(l_from_loc_id, -1)) <> Nvl(l_from_loc_id, -1)) THEN

    END IF;--  IF l_update_or_close = 'N' THEN

--Call pregeneration again for accept/reject transactions
-- ... move the pregeneration call to complete lpn group.
--      IF l_transaction_type IN ('ACCEPT', 'REJECT') THEN
--	 l_call_pregeneration := TRUE;

-- R12 Commented the call to pregeneration
-- As this has been moved to complete_lpn_group
--
--	 IF (p_transfer_lpn_id IS NULL) THEN
--	    l_call_pregeneration := FALSE;
--	  ELSE
--	    IF p_lot_control_code > 1 THEN
--	       IF p_lot_number IS NULL THEN
--		  l_call_pregeneration := FALSE;
--	       END IF;
--	     ELSIF p_serial_number_control_code IN (2,5,6) THEN
--	       BEGIN
--		  SELECT '1'
--		    INTO l_dummy
--		    FROM mtl_serial_numbers_temp
--		    WHERE product_code = 'RCV'
--		    AND product_transaction_id = p_rti_id
--		    AND ROWNUM < 2;
--	       EXCEPTION
--		  WHEN OTHERS THEN
--		     l_call_pregeneration := FALSE;
--	       END;
--	    END IF;
--	 END IF; --IF (p_lpn_id IS NULL) THEN

	 --call pregeneration
--	 IF l_call_pregeneration THEN
--	    IF (l_debug = 1) THEN
--	       print_debug('MAINTAIN_MO - Before calling start_pregenerate_program:'||l_progress,1);
--	       l_progress := 'WMSINB-13260';
--	    END IF;
--	    wms_putaway_suggestions.start_pregenerate_program
--	      (p_org_id => p_org_id,
--	       p_lpn_id => p_transfer_lpn_id,
--	       x_return_status => x_return_status,
--	       x_msg_count => x_msg_count,
--	       x_msg_data => x_msg_data);
--
--	    IF (l_debug = 1) THEN
--	       print_debug('MAINTAIN_MO - After calling start_pregenerate_program:'||x_return_status||':'||l_progress,1);
--	       l_progress := 'WMSINB-13262';
--	    END IF;
--
--	    IF (x_return_status <> 'S') THEN
--	       x_return_status := 'S';
--	    END IF;
--	 END IF; --IF l_call_pregeneration THEN

--      END IF; --IF l_transaction_type IN ('ACCEPT','REJECT') THEN

   END IF; --IF l_transaction_type IN ('ACCEPT','REJECT','TRANSFER') THEN


   IF (l_transaction_type = 'DELIVER' OR
       (l_transaction_type = 'CORRECT' AND
	p_primary_quantity > 0 AND
	l_parent_txn_type = 'DELIVER')) THEN
      IF (p_mmtt_temp_id IS NOT NULL) THEN
         OPEN c_mol_mmtt(p_mmtt_temp_id,
                         p_item_id,
                         p_lpn_id,
                         p_lot_number,
                         p_revision,
                         p_from_subinventory,
                         p_from_locator_id,
                         p_project_id,
                         p_task_id,
                         l_from_mol_inspection_status
                        );
       ELSE
	 OPEN c_mol_no_mmtt(p_item_id,
                            p_lpn_id,
			    p_lot_number,
                            p_revision,
                            p_from_subinventory,
                            p_from_locator_id,
                            p_project_id ,
                            p_task_id ,
                            l_from_mol_inspection_status,
                            p_uom_code,
							l_new_reference_id  --14133874

                          );
      END IF;

      l_remaining_primary_quantity := p_primary_quantity;

      -- OPMConvergence
      l_remaining_secondary_quantity := p_sec_qty;
      -- OPMConvergence

      LOOP
	 IF (p_mmtt_temp_id IS NOT NULL) THEN
	    FETCH c_mol_mmtt INTO l_mol_rec;
	    EXIT WHEN c_mol_mmtt%notfound;
	  ELSE
	       FETCH c_mol_no_mmtt INTO l_mol_rec;
	       EXIT WHEN c_mol_no_mmtt%notfound;
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO - REMAINING QUANTITY:'||l_remaining_primary_quantity||':'||l_progress,1);

	    l_progress := 'WMSINB-13273';
	 END IF;

	 --BUG 4766810: Always add before rounding.  Also, when comparing
	 -- for equality, check if the two number differs by 0.000005
	 -- (round to 5 digits).
	 IF (l_mol_rec.uom_code <> p_primary_uom_code) THEN
	    l_conversion_rate := inv_rcv_cache.get_conversion_rate(l_mol_rec.inventory_item_id,
								   l_mol_rec.uom_code,
								   p_primary_uom_code);
	    l_mol_qty_in_puom := l_mol_rec.quantity * l_conversion_rate;
	  ELSE
	    l_mol_qty_in_puom := l_mol_rec.quantity;
	    l_conversion_rate := 1;
	 END IF;

	 l_quantity_delivered := inv_rcv_cache.convert_qty(p_inventory_item_id => l_mol_rec.inventory_item_id
					     ,p_from_qty         => l_remaining_primary_quantity
					     ,p_from_uom_code    => p_primary_uom_code
					     ,p_to_uom_code      => l_mol_rec.uom_code);

         -- OPMConvergence

         IF l_mol_rec.secondary_uom_code <> p_sec_uom THEN

            l_sec_quantity_delivered := inv_rcv_cache.convert_qty(p_inventory_item_id => l_mol_rec.inventory_item_id
						    ,p_from_qty         => l_remaining_primary_quantity
						    ,p_from_uom_code    => p_sec_uom
						    ,p_to_uom_code      => l_mol_rec.secondary_uom_code);
         ELSE

           l_sec_quantity_delivered := l_remaining_secondary_quantity;

         END IF;

         -- OPMConvergence

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - MOL QTY IN PUOM:'||l_mol_qty_in_puom||':'||l_progress,1);
	    print_debug('MAINTAIN_MO_CON - QUANTITY DELIVERED:'||l_quantity_delivered||':'||l_progress,1);
            -- OPMConvergence
	    print_debug(l_proc_name||' SEC QUANTITY DELIVERED:'||l_sec_quantity_delivered||':'||l_progress,1);
            -- OPMConvergence
	    l_progress := 'WMSINB-13295';
	 END IF;

	 IF (p_mmtt_temp_id IS NULL AND l_mol_rec.transaction_temp_id IS NOT NULL) THEN
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO - calling call_atf_api:'||l_mol_rec.line_id,1);
	       l_progress := 'WMSINB-13305';
	    END IF;

	    call_atf_api(x_return_status => x_return_status,
			 x_msg_data => x_msg_data,
			 x_msg_count => x_msg_count,
			 x_error_code => l_error_code,
			 p_source_task_id => NULL,
			 p_activity_type_id => 1,
			 p_operation_type_id => NULL,
			 p_mol_id => l_mol_rec.line_id,
			 p_atf_api_name => g_atf_api_cancel);
	 END IF;

	 --BUG 4766810, always round to 5 digits when comparing because
	 --quantity is stored in 5 digits in Inventory
	 IF (Round(l_remaining_primary_quantity,5) < Round(l_mol_qty_in_puom,5)) THEN
	    IF (l_debug = 1) THEN
	       print_debug('MAINTAIN_MO_CON - Updating MOL:'||l_mol_rec.line_id||':'||l_progress,1);
	       l_progress := 'WMSINB-13301';
	    END IF;

	    l_mo_split_tb(1).prim_qty := l_remaining_primary_quantity;

	    -- OPMConvergence
            -- Do we need to assign secondary quantity too ?
            -- OPMConvergence
	    l_mo_split_tb(1).line_id := NULL;

	    IF p_mmtt_temp_id IS NOT NULL THEN
	       -- Call split mo with operation_type DELIVER
	       -- This will split the MO and tied the mmtt
	       -- to the new MO
	       inv_rcv_integration_apis.split_mo
		 (p_orig_mol_id => l_mol_rec.line_id,
		  p_mo_splt_tb => l_mo_split_tb,
		  p_operation_type => 'DELIVER',
		  p_txn_header_id => p_mmtt_temp_id,
		  x_return_status => x_return_status,
		  x_msg_count => x_msg_count,
		  x_msg_data => x_msg_data);
	     ELSE
	       inv_rcv_integration_apis.split_mo
		 (p_orig_mol_id => l_mol_rec.line_id,
		  p_mo_splt_tb => l_mo_split_tb,
		  x_return_status => x_return_status,
		  x_msg_count => x_msg_count,
		  x_msg_data => x_msg_data);
	    END IF;

	    --Call Reservations
            --R12
	    /* Bug 5627083.
	     * We need to pass in the transfer_lpn_id to update the reservation record.
	    */
            l_mol_res_in(1).transaction_type       := l_transaction_type;
            l_mol_res_in(1).organization_id        := p_org_id;
            l_mol_res_in(1).lpn_id                 := p_transfer_lpn_id;
            l_mol_res_in(1).inventory_item_id      := p_item_id;
	    l_mol_res_in(1).lot_number             := p_lot_number;
            l_mol_res_in(1).item_revision          := p_revision;
            l_mol_res_in(1).project_id             := p_project_id;
            l_mol_res_in(1).task_id                := p_task_id;
            l_mol_res_in(1).uom_code               := NULL;
            l_mol_res_in(1).quantity               := 0;
            l_mol_res_in(1).backorder_delivery_detail_id := l_mo_split_tb(1).wdd_id;--New field in l_mo_split_tb
            l_mol_res_in(1).crossdock_type         := NULL;
            l_mol_res_in(1).secondary_quantity     := 0;
            l_mol_res_in(1).secondary_uom          := NULL;
            l_mol_res_in(1).line_id                := l_mo_split_tb(1).line_id;
            l_mol_res_in(1).primary_qty            := l_remaining_primary_quantity;
            l_mol_res_in(1).primary_uom_code       := p_primary_uom_code;
            l_mol_res_in(1).primary_qty            := l_remaining_primary_quantity;
            l_mol_res_in(1).wip_supply_type        := l_mol_rec.wip_supply_type;
            l_mol_res_in(1).crossdock_type         := l_mol_rec.crossdock_type;
            l_mol_res_in(1).inspection_status      := l_from_mol_inspection_status;
	    l_mol_res_in(1).subinventory_code      := p_subinventory;
	    l_mol_res_in(1).locator_id             := p_locator_id;
	    l_mol_res_in(1).parent_txn_type        := l_parent_txn_type;

	    INV_RCV_RESERVATION_UTIL.maintain_reservations
	      (x_return_status => x_return_status
	       ,x_msg_count     => x_msg_count
	       ,x_msg_data      => x_msg_data
	       ,x_mol_tb        => l_mol_res_out
	       ,p_cas_mol_tb    => l_mol_res_in
	       );

	    IF (l_debug = 1) THEN
	       print_debug(' maintain_reservations - After calling maintain_reservations :'||x_return_status||':'||l_progress,1);
	       l_progress := 'WMSINB-45051';
	    END IF;

	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-45052';
	       RAISE fnd_api.g_exc_error;
	    END IF;

	    l_progress := 'WMSINB-45053';


	    --Close line
	    UPDATE mtl_txn_request_lines
	      SET quantity_delivered = Decode(p_mmtt_temp_id,NULL,
					      Nvl(quantity_delivered,0)+l_quantity_delivered,quantity_delivered)
	      ,secondary_quantity_delivered = Decode(p_mmtt_temp_id,NULL,
						     Nvl(secondary_quantity_delivered,0)+l_sec_quantity_delivered,quantity_delivered)
	      , line_status = Decode(p_mmtt_temp_id,NULL,
				     Decode((Nvl(quantity_delivered,0)+l_quantity_delivered),quantity,
					    inv_globals.G_TO_STATUS_CLOSED,line_status),line_status)
	      , wms_process_flag = 1
	      WHERE line_id = l_mo_split_tb(1).line_id;

	    -- R12

	    l_remaining_primary_quantity := 0;

            -- OPMConvergence
	    l_remaining_secondary_quantity := 0;
            -- OPMConvergence

	  ELSE --IF (l_remaining_primary_quantity < l_mol_qty_in_puom) THEN

            -- R12

	    /* Bug 5627083.
	     * We need to pass in the transfer_lpn_id to update the reservation record.
	    */
            l_mol_res_in(1).transaction_type       := l_transaction_type;
            l_mol_res_in(1).organization_id        := p_org_id;
            l_mol_res_in(1).lpn_id                 := p_transfer_lpn_id;
            l_mol_res_in(1).inventory_item_id      := p_item_id;
	    l_mol_res_in(1).lot_number             := p_lot_number;
	    l_mol_res_in(1).item_revision          := p_revision;
            l_mol_res_in(1).project_id             := p_project_id;
            l_mol_res_in(1).task_id                := p_task_id;
            l_mol_res_in(1).uom_code               := null;
            l_mol_res_in(1).quantity               := 0;
            l_mol_res_in(1).backorder_delivery_detail_id := l_mol_rec.backorder_delivery_detail_id;
            l_mol_res_in(1).secondary_quantity     := 0;
            l_mol_res_in(1).secondary_uom          := null;
            l_mol_res_in(1).line_id                := l_mol_rec.line_id;
            l_mol_res_in(1).primary_qty            := l_mol_qty_in_puom;
            l_mol_res_in(1).primary_uom_code       := p_primary_uom_code;
            l_mol_res_in(1).primary_qty            := l_remaining_primary_quantity;
            l_mol_res_in(1).inspection_status      := l_from_mol_inspection_status;

            -- Added the below two line also
            l_mol_res_in(1).wip_supply_type        := l_mol_rec.wip_supply_type;
            l_mol_res_in(1).crossdock_type         := l_mol_rec.crossdock_type;

	    l_mol_res_in(1).subinventory_code      := p_subinventory;
	    l_mol_res_in(1).locator_id             := p_locator_id;
	    l_mol_res_in(1).parent_txn_type        := l_parent_txn_type;

	    INV_RCV_RESERVATION_UTIL.maintain_reservations
	      (x_return_status => x_return_status
	       ,x_msg_count     => x_msg_count
	       ,x_msg_data      => x_msg_data
	       ,x_mol_tb        => l_mol_res_out
	       ,p_cas_mol_tb    => l_mol_res_in
	       );

	    IF (l_debug = 1) THEN
	       print_debug(' maintain_reservations - After calling maintain_reservations :'||x_return_status||':'||l_progress,1);
	       l_progress := 'WMSINB-45051';
	    END IF;

	    IF (x_return_status <> 'S') THEN
	       l_progress := 'WMSINB-45052';
	       RAISE fnd_api.g_exc_error;
	    END IF;

	    l_progress := 'WMSINB-45053';

	    UPDATE mtl_txn_request_lines
	      SET quantity_delivered = Decode(p_mmtt_temp_id,NULL,quantity,quantity_delivered)
              -- OPMConvergence
	      , secondary_quantity_delivered = Decode(p_mmtt_temp_id,NULL,secondary_quantity,secondary_quantity_delivered)
              -- OPMConvergence
	      , line_status = Decode(p_mmtt_temp_id,NULL,inv_globals.g_to_status_closed,line_status)
	      , wms_process_flag = 1
	      WHERE line_id = l_mol_rec.line_id;

            -- OPMConvergence
            l_remaining_secondary_quantity := (l_remaining_primary_quantity - l_mol_qty_in_puom )*
                                              (l_remaining_secondary_quantity / l_remaining_primary_quantity );

            -- OPMConvergence
	    l_remaining_primary_quantity := l_remaining_primary_quantity - l_mol_qty_in_puom;

	    -- Bug 5632202 : Set l_remaining_primary_quantity to zero if it differs from MOL
	    --               quantity in sixth decimal place
	    IF trunc(( l_remaining_primary_quantity/ l_conversion_rate ),5) = 0 THEN
	      l_remaining_primary_quantity := 0;
	      l_remaining_secondary_quantity := 0;
	      IF (l_debug = 1) THEN
		print_debug('MAINTAIN_MO_CON - Setting l_remaining_primary_quantity to zero',1);
	      END IF;
	    END IF;

	 END IF; --IF (l_remaining_primary_quantity <= l_mol_qty_in_puom) THEN

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - l_remaining_primary_quantity:'||l_remaining_primary_quantity,1);
	 END IF;

	 IF (Round(l_remaining_primary_quantity,5) <= 0) THEN
	    EXIT;
	 END IF;

      END LOOP;

      IF c_mol_mmtt%isopen THEN
	 CLOSE c_mol_mmtt;
      END IF;

      IF c_mol_no_mmtt%isopen THEN
	 CLOSE c_mol_no_mmtt;
      END IF;

      IF (Round(l_remaining_primary_quantity,5) > 0.00005) THEN
	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - QTY STILL REMAINING *** HOW ???:'||l_remaining_primary_quantity||':'||l_progress,1);
	    l_progress := 'WMSINB-13342';
	 END IF;
	 --raise error
	 l_progress := 'WMSINB-13345';
	 RAISE fnd_api.g_exc_error;
      END IF;

      --call upd_empty_mixed_flag
      IF l_from_loc_id IS NOT NULL THEN
	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - Calling upd_empty_mixed_flag for	FROM sub',1);
	 END IF;

	 inv_loc_wms_utils.upd_empty_mixed_flag_rcv_loc ( x_return_status  => x_return_status
							  ,x_msg_count    => x_msg_count
							  ,x_msg_data     => x_msg_data
							  ,p_subinventory => l_from_sub
							  ,p_locator_id   => l_from_loc_id
							  ,p_org_id       => p_org_id
							  );
	 IF (x_return_status <> 'S') THEN
	    l_progress := 'WMSINB-13350';
	    -- Bug 5393727: do not raise an exception if locator API returns an error
	    -- RAISE fnd_api.g_exc_error;
	 END IF;

	 -- update curr capacity
	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - Calling update_loc_curr_capacity_nauto FOR FROM sub',1);
	 END IF;

	 inv_loc_wms_utils.update_loc_curr_capacity_nauto
	   ( x_return_status           => x_return_status
	     ,x_msg_count               => x_msg_count
	     ,x_msg_data                => x_msg_data
	     ,p_organization_id         => p_org_id
	     ,p_inventory_location_id   => l_from_loc_id
	     ,p_inventory_item_id       => p_item_id
	     ,p_primary_uom_flag        => 'N'
	     ,p_transaction_uom_code    => p_uom_code
	     ,p_quantity                => p_qty
	     ,p_issue_flag              => 'Y'
	     );
	 IF (x_return_status <> 'S') THEN
	    l_progress := 'WMSINB-13357';
	    -- Bug 5393727: do not raise an exception if locator API returns an error
	    -- RAISE fnd_api.g_exc_error;
	 END IF;
      END IF; --IF l_from_sub IS NOT NULL THEN

      IF (l_transaction_type = 'CORRECT') THEN
	 --We need to update the wms_process_flag on mol for all the lines for the given lpn as
	 --we update all the mols for the given lpn to 2 in mark_returns
	 UPDATE mtl_txn_request_lines
	   SET wms_process_flag = 1
	   WHERE (lpn_id = p_lpn_id
		  OR lpn_id = p_transfer_lpn_id);
      END IF;
   END IF; --IF (l_transaction_type = 'DELIVER') THEN


   IF (l_transaction_type IN ('CORRECT','RETURN TO VENDOR',
			      'RETURN TO CUSTOMER','RETURN TO RECEIVING')
       --Treat + Corr of Deliver as DELIVER above
       AND (NOT (l_transaction_type = 'CORRECT'
		 AND p_primary_quantity > 0
		 AND l_parent_txn_type = 'DELIVER'))
       --Treat + Corr of Receive as RECEIVE above
       AND (NOT (l_transaction_type = 'CORRECT'
		 AND p_primary_quantity > 0
		 AND l_parent_txn_type = 'RECEIVE'))
       ) THEN

      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_CON - Case of Return/Correct',1);
      END IF;

      /* Bug 6830559 */
      IF (p_project_id IS NULL) THEN
	 IF (p_po_distribution_id IS NOT NULL) THEN
	    BEGIN
	       SELECT project_id,
		 Nvl(task_id, '')  -- Bug 7355205
		 INTO l_project_id,
		 l_task_id
		 FROM po_distributions_all
		 WHERE po_distribution_id = p_po_distribution_id;
	    EXCEPTION
	       WHEN no_data_found THEN
		  l_project_id := NULL;
		  l_task_id := NULL;
	    END ;
         ELSIF (p_po_line_location_id IS NOT NULL) then
            inv_rcv_std_rcpt_apis.get_project_task(
                 p_po_line_location_id     => p_po_line_location_id
               , p_oe_order_line_id        => NULL
               , x_project_id              => l_project_id
               , x_task_id                 => l_task_id
            );
	 END IF;
      ELSE --IF (p_project_id IS NULL) THEN
		  l_project_id := p_project_id;
		  l_task_id := p_task_id;
      END IF; --IF (p_project_id IS NULL) THEN

      -- PUT THE VALUES IN THE STRUCTURE HERE
      l_mol_res_in(1).transaction_type       := l_transaction_type;
      l_mol_res_in(1).organization_id        := p_org_id;
      l_mol_res_in(1).inventory_item_id      := p_item_id;
      l_mol_res_in(1).lot_number             := p_lot_number;
      l_mol_res_in(1).item_revision          := p_revision;

      -- l_mol_res_in(1).cost_group_id          := null; ????

      l_mol_res_in(1).project_id             := l_project_id;
      l_mol_res_in(1).task_id                := l_task_id;
      l_mol_res_in(1).uom_code               := p_uom_code;
      l_mol_res_in(1).quantity               := p_qty;
      l_mol_res_in(1).backorder_delivery_detail_id := null;
      l_mol_res_in(1).crossdock_type         := null;
      l_mol_res_in(1).transfer_org_id        := l_transfer_org_id;
      l_mol_res_in(1).secondary_quantity     := p_sec_qty;
      l_mol_res_in(1).secondary_uom          := p_sec_uom;

      l_mol_res_in(1).inspection_status      := l_from_mol_inspection_status ;
      l_mol_res_in(1).line_id                := null;

      l_mol_res_in(1).primary_uom_code       := p_primary_uom_code;
      l_mol_res_in(1).primary_qty            := p_primary_quantity;
      l_mol_res_in(1).po_header_id           := l_po_header_id;
      l_mol_res_in(1).po_line_location_id    := p_po_line_location_id;
      l_mol_res_in(1).shipment_line_id       := p_shipment_line_id;
      l_mol_res_in(1).requisition_line_id    := l_requisition_line_id;
      l_mol_res_in(1).auto_transact_code     := p_auto_transact_code;
      l_mol_res_in(1).wip_supply_type        := null;
      l_mol_res_in(1).routing_header_id      := p_routing_header_id;
      l_mol_res_in(1).source_document_code   := l_source_document_code;
      l_mol_res_in(1).parent_transaction_id  := l_transaction_id;
      l_mol_res_in(1).parent_txn_type        := l_parent_txn_type;
      l_mol_res_in(1).grand_parent_txn_type  := l_grand_parent_txn_type;
      l_mol_res_in(1).asn_line_flag          := p_asn_line_flag;


      IF ((l_transaction_type = 'CORRECT'
	   AND ((p_primary_quantity < 0 AND l_parent_txn_type IN ('RECEIVE','ACCEPT','REJECT','TRANSFER','RETURN TO RECEIVING'))
		OR (p_primary_quantity > 0 AND ((l_parent_txn_type IN ('ACCEPT','REJECT','TRANSFER','DELIVER'))
						OR (l_parent_txn_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER')
						    AND l_grand_parent_txn_type <> 'DELIVER')))))
	  OR (l_transaction_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER') AND l_parent_txn_type <> 'DELIVER')) THEN

         IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 1',1);
         END IF;

	 IF (l_parent_txn_type = 'RETURN TO RECEIVING') THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 2',1);
            END IF;

            l_mol_res_in(1).lpn_id          := p_lpn_id;
            -- FROM SUB
            l_mol_res_in(1).from_subinventory_code := p_from_subinventory;
            l_mol_res_in(1).from_locator_id        := p_from_locator_id;
            -- DEST SUB/LOC
            --l_transfer_sub        := p_subinventory;
            --l_transfer_locator_id := p_locator_id ;
            --l_mol_transfer_lpn_id := p_transfer_lpn_id;

	  ELSIF ((l_transaction_type = 'CORRECT' AND p_primary_quantity < 0)
		 AND l_parent_txn_type <> 'RETURN TO RECEIVING') THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 3',1);
            END IF;

            l_mol_res_in(1).lpn_id          := p_transfer_lpn_id;

	    --See BUG 4502518 Issue 32
            l_mol_res_in(1).from_subinventory_code := p_from_subinventory;
            l_mol_res_in(1).from_locator_id        := p_from_locator_id;

            -- DEST SUB/LOC
            --l_transfer_sub        := p_from_subinventory;
            --l_transfer_locator_id := p_from_locator_id ;
            --l_mol_transfer_lpn_id :=  p_lpn_id;


	  ELSIF (l_transaction_type IN ('RETURN TO CUSTOMER','RETURN TO VENDOR')) THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 4',1);
            END IF;

            l_mol_res_in(1).lpn_id          := p_lpn_id;

            -- FROM SUB
            l_mol_res_in(1).from_subinventory_code := p_from_subinventory;
            l_mol_res_in(1).from_locator_id        := p_from_locator_id;
            -- DEST SUB/LOC
            --l_transfer_sub        := p_subinventory;
            --l_transfer_locator_id := p_locator_id ;
            --l_mol_transfer_lpn_id := p_transfer_lpn_id;

	  ELSIF (l_transaction_type = 'CORRECT' AND p_primary_quantity > 0) THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 5',1);
            END IF;

            l_mol_res_in(1).lpn_id          := p_lpn_id;
            -- FROM SUB
            l_mol_res_in(1).from_subinventory_code := p_from_subinventory;
            l_mol_res_in(1).from_locator_id        := p_from_locator_id;
            -- DEST SUB/LOC
            --l_transfer_sub        := p_subinventory;
            --l_transfer_locator_id := p_locator_id ;
            --l_mol_transfer_lpn_id := p_transfer_lpn_id;

	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - Txn ID to Consume MOL:'||l_mol_txn_id,1);
	    print_debug('MAINTAIN_MO_CON - LPN ID to Consume MOL:'||l_mol_lpn_id,1);
	    l_progress := 'WMSINB-00000';
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - Primary Quantity: = ',1);
	    l_progress := 'WMSINB-13391';
	 END IF;
      END IF; --IF ((p_primary_quantity < 0 AND l_parent_txn_type IN

      IF ((l_transaction_type = 'CORRECT'
	   AND ((p_primary_quantity < 0 AND (l_parent_txn_type IN ('ACCEPT','REJECT','TRANSFER','DELIVER')
					     OR (l_parent_txn_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER')
						 AND l_grand_parent_txn_type <> 'DELIVER')))
		OR (p_primary_quantity > 0 AND l_parent_txn_type IN
		    ('RECEIVE','ACCEPT','REJECT','TRANSFER','RETURN TO RECEIVING'))))
	  OR (l_transaction_type = 'RETURN TO RECEIVING')) THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 6',1);
            END IF;

	 IF (l_parent_txn_type = 'RETURN TO RECEIVING') THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 7',1);
            END IF;

            l_mol_res_in(1).lpn_id          := null;
            -- FROM SUB
            l_mol_res_in(1).from_subinventory_code := null;
            l_mol_res_in(1).from_locator_id        := null;
            -- DEST SUB/LOC
            l_transfer_sub        := p_subinventory;
            l_transfer_locator_id := p_locator_id ;
            l_mol_transfer_lpn_id := p_transfer_lpn_id;

	  ELSIF (l_transaction_type = 'CORRECT' AND p_primary_quantity < 0) THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 8',1);
            END IF;

            --l_mol_res_in(1).lpn_id          := p_transfer_lpn_id;
            -- FROM SUB
            --l_mol_res_in(1).from_subinventory_code := p_subinventory;
            --l_mol_res_in(1).from_locator_id        := p_locator_id;

            -- DEST SUB/LOC
            -- This does not need to be set if it's a deliver txn.
          /*  if l_parent_txn_type = 'DELIVER' then -- 14547482
               l_transfer_sub        := null;
               l_transfer_locator_id := null ;
            else */ --Commented the code to set the sub-inventory and locator in case for -ve correction on delivery transaction also.
	       --See bug 4502518 issue 32
               l_transfer_sub        := p_subinventory;
               l_transfer_locator_id := p_locator_id;
           -- end if;

            l_mol_transfer_lpn_id := p_lpn_id;

	  ELSIF (l_transaction_type = 'RETURN TO RECEIVING') THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 9',1);
            END IF;

            --l_mol_res_in(1).lpn_id          := p_lpn_id;
            -- FROM SUB
            --l_mol_res_in(1).from_subinventory_code := p_from_subinventory;
            --l_mol_res_in(1).from_locator_id        := p_from_locator_id;

            -- DEST SUB/LOC
            l_transfer_sub        := p_subinventory;
            l_transfer_locator_id := p_locator_id ;
            l_mol_transfer_lpn_id := p_transfer_lpn_id;

	  ELSIF (l_transaction_type = 'CORRECT' AND p_primary_quantity > 0
		 AND l_parent_txn_type <> 'RETURN TO RECEIVING') THEN

            IF (l_debug = 1) THEN
               print_debug('MAINTAIN_MO_CON - Case of Return/Correct Case 10',1);
            END IF;

            --l_mol_res_in(1).lpn_id          := p_lpn_id;
            -- FROM SUB
            --l_mol_res_in(1).from_subinventory_code := p_from_subinventory;
            --l_mol_res_in(1).from_locator_id        := p_from_locator_id;

            -- DEST SUB/LOC
            l_transfer_sub        := p_subinventory;
            l_transfer_locator_id := p_locator_id ;
            l_mol_transfer_lpn_id := p_transfer_lpn_id;

	 END IF;
      END IF; --IF ((p_quantity < 0 AND l_parent_txn_type IN

      IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO_CON - BEFORE CALLING RESERVATION API' ,1);

	    print_debug('MAINTAIN_MO_CON - LPN ID :='      || l_mol_res_in(1).lpn_id,1);
	    print_debug('MAINTAIN_MO_CON - FROM SUB :='    || l_mol_res_in(1).from_subinventory_code,1);
	    print_debug('MAINTAIN_MO_CON - FROM LOCATOR :='|| l_mol_res_in(1).from_locator_id,1);

	    print_debug('MAINTAIN_MO_CON - TRANSFER LPN ID := '||  l_mol_transfer_lpn_id,1);

	    print_debug('MAINTAIN_MO_CON - DESTINATION SUB :='||l_transfer_sub,1);
	    print_debug('MAINTAIN_MO_CON - DESTINATION LOCATOR :='||l_transfer_locator_id,1);
      END IF;

      IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO - Before calling RSERVATION'||l_progress,1);
	    l_progress := 'WMSINB-13616';
      END IF;

      INV_RCV_RESERVATION_UTIL.maintain_reservations
	(x_return_status => x_return_status
	 ,x_msg_count     => x_msg_count
	 ,x_msg_data      => x_msg_data
	 ,x_mol_tb        => l_mol_res_out
	 ,p_cas_mol_tb    => l_mol_res_in
	 );

      IF (l_debug = 1) THEN
	 print_debug(' maintain_reservations - After calling maintain_reservations :'||x_return_status||':'||l_progress,1);
	 print_debug(' maintain_reservations - l_mol_res_out.count: '||l_mol_res_out.COUNT,1);
	 l_progress := 'WMSINB-45051';
      END IF;

      IF (x_return_status <> 'S') THEN
	 l_progress := 'WMSINB-45052';
	 RAISE fnd_api.g_exc_error;
      END IF;

      l_progress := 'WMSINB-45053';

      l_loop_index := l_mol_res_out.first;
      LOOP

	EXIT WHEN l_loop_index IS NULL;

        IF (l_debug = 1) THEN
                   print_debug('MAINTAIN_MOC_CON -Inside MOL CONSL LOOP ',1);
        END IF;

	--Bug 4286172...BEGIN CHANGES... Null out the lot_number if the transaction is a
	--desktop txn without lpn.

	IF (p_validation_flag = 'N' AND l_mol_transfer_lpn_id IS NULL) THEN
	   l_mol_res_out(l_loop_index).lot_number := NULL;
	END IF;

	IF (l_debug = 1) THEN
	   print_debug('MAINTAIN_MO - Lot to Query/Create MOL:'||l_mol_res_out(l_loop_index).lot_number,1);
	END IF;

	--Bug 4286172...END CHANGES...

        open c_transfer_mol(
                             l_mol_transfer_lpn_id
                            ,l_mol_res_out(l_loop_index).inventory_item_id
                            ,l_mol_res_out(l_loop_index).lot_number
                            ,l_mol_res_out(l_loop_index).item_revision
                            ,l_transfer_sub
                            ,l_transfer_locator_id
                            ,l_mol_res_out(l_loop_index).project_id
                            ,l_mol_res_out(l_loop_index).task_id
                            ,l_mol_res_out(l_loop_index).uom_code
                            ,l_mol_res_out(l_loop_index).backorder_delivery_detail_id
                            ,l_mol_res_out(l_loop_index).crossdock_type
                            ,l_transfer_inspection_status
							, l_new_reference --13935217
							, l_new_reference_id --13935217
                            );
        Fetch c_transfer_mol into l_transfer_mol_rec;
        close c_transfer_mol;

        if l_transfer_mol_rec.line_id is not null
        then
           -- Move Order Line found
           -- Check whether MOL is from the same SOURCE
           IF (l_debug = 1) THEN
	      print_debug('MAINTAIN_MOC_CON - Move Order Line Found line Id = '|| l_transfer_mol_rec.line_id,1);
           END IF;

           check_reference(
                            p_old_reference           => l_transfer_mol_rec.reference
                           ,p_old_reference_type_code => l_transfer_mol_rec.reference_type_code
                           ,p_old_reference_id        => l_transfer_mol_rec.reference_id
                           ,p_new_reference           => l_new_reference
                           ,p_new_reference_type_code => l_new_reference_type_code
                           ,p_new_reference_id        => l_new_reference_id
                           ,x_reference               => l_reference
                           ,x_reference_type_code     => l_reference_type_code
                           ,x_reference_id            => l_reference_id
                           ,x_transaction_type_id     => l_transaction_type_id
                           ,x_txn_source_type_id      => l_txn_source_type_id
                           ,x_return_status           => x_return_status
                           ,x_msg_count               => x_msg_count
                           ,x_msg_data                => x_msg_data
                          );

           IF (l_debug = 1) THEN
                print_debug('CHECK_REFERENCE - After calling check_reference :'||x_return_status||':'||l_progress,1);
                l_progress := 'WMSINB-45056';
           END IF;

           IF (x_return_status <> 'S') THEN
              l_progress := 'WMSINB-45058';
              RAISE fnd_api.g_exc_error;
           END IF;

           --
           -- UPDATE THE MOVE ORDER LINE HERE
           --
           update mtl_txn_request_lines
               set reference = l_reference
                  ,reference_type_code = l_reference_type_code
                  ,reference_id = l_reference_id
                  ,quantity = quantity + ABS(l_mol_res_out(l_loop_index).quantity)
	          ,primary_quantity = primary_quantity + ABS(l_mol_res_out(l_loop_index).primary_qty)
                  ,secondary_quantity = secondary_quantity + ABS(l_mol_res_out(l_loop_index).secondary_quantity)
                  ,transaction_type_id = nvl(l_transaction_type_id,transaction_type_id)
                  ,transaction_source_type_id = nvl(l_txn_source_type_id,transaction_source_type_id)
             where line_id = l_transfer_mol_rec.line_id
           ;

           l_progress := 'WMSINB-45060';

           --
           -- CANCEL THE OPERATION PLAN
           -- IF THE LPN IS LOADED AND TASK IS DISPATCHED
           -- WE NEED TO FAIL HERE
           --

           l_loaded := 0;

           BEGIN
                    SELECT 1
                    INTO l_loaded
                    FROM dual
                    WHERE exists
                    (SELECT 1
                     FROM wms_dispatched_tasks wdt
                     , mtl_material_transactions_temp mmtt
                     WHERE mmtt.move_order_line_id =  l_transfer_mol_rec.line_id
                     AND wdt.transaction_temp_id = mmtt.transaction_temp_id
                     AND wdt.status IN (3, 4) -- dispached or loaded
                     AND wdt.task_type = 2 -- putaway
                     );

                  IF (l_debug = 1) THEN
                     print_debug('MAINTAIN_MO_CON - TASK ALREADY LOADED FOR '||l_transfer_mol_rec.line_id || ' FAILURE' ,1);
                  END IF;

                  l_progress := 'WMSINB-45063';
                  RAISE fnd_api.g_exc_error;

           EXCEPTION
             WHEN NO_DATA_FOUND THEN
                  l_progress := 'WMSINB-45064';
                  null;
           END;

           call_atf_api(x_return_status => x_return_status,
                            x_msg_data => x_msg_data,
                            x_msg_count => x_msg_count,
                            x_error_code => l_error_code,
                            p_source_task_id => NULL,
                            p_activity_type_id => 1,
                            p_operation_type_id => NULL,
                            p_mol_id => l_transfer_mol_rec.line_id,
                            p_atf_api_name => g_atf_api_cancel);

           IF (x_return_status <> g_ret_sts_success) THEN
                  IF (l_debug = 1) THEN
                     print_debug('MAINTAIN_MO_CON - call_atf_api failed:'||l_transfer_mol_rec.line_id,1);
                     l_progress := 'WMSINB-45063';
                  END IF;
                  --raise error
                  l_progress := 'WMSINB-45064';
                  RAISE fnd_api.g_exc_error;
           END IF;

        Else

           -- Move Order Line Not Found Create Move Order

           IF (l_debug = 1) THEN
	      print_debug('MAINTAIN_MOC_CON - Move Order Line Not Found line Id ',1);
           END IF;

           --create mol
           -- Bug 4508608. Abs of Qty is passed for negative correction when creating MOL

           inv_rcv_std_rcpt_apis.create_move_order(p_move_order_header_id => l_move_order_header_id
                                              ,p_po_line_location_id      => p_po_line_location_id
                                              ,p_po_distribution_id       => p_po_distribution_id
                                              ,p_shipment_line_id         => p_shipment_line_id
                                              ,p_oe_order_line_id         => p_oe_order_line_id
                                              ,p_routing                  => p_routing_header_id
                                              ,p_lot_control_code         => p_lot_control_code
                                              ,p_org_id                   => l_mol_res_out(l_loop_index).organization_id
                                              ,p_item_id                  => l_mol_res_out(l_loop_index).inventory_item_id
                                              ,p_qty                      => ABS(l_mol_res_out(l_loop_index).quantity)
                                              ,p_uom_code                 => l_mol_res_out(l_loop_index).uom_code
                                              ,p_lpn                      => l_mol_transfer_lpn_id
                                              ,p_project_id               => l_mol_res_out(l_loop_index).project_id
                                              ,p_task_id                  => l_mol_res_out(l_loop_index).task_id
                                              ,p_revision                 => l_mol_res_out(l_loop_index).item_revision
                                              ,p_inspect                  => l_transfer_inspection_status
                                              ,p_txn_source_id            => null
                                              ,x_status                   => x_return_status
                                              ,x_message                  => x_msg_data
                                              ,p_transfer_org_id          => l_mol_res_out(l_loop_index).transfer_org_id
                                              ,p_wms_process_flag         => 1
                                              ,p_lot_number               => l_mol_res_out(l_loop_index).lot_number
                                              ,p_secondary_quantity       => ABS(l_mol_res_out(l_loop_index).secondary_quantity)
                                              ,p_secondary_uom            => l_mol_res_out(l_loop_index).secondary_uom
                                              ,x_line_id                  => l_move_order_line_id
                                              );
            IF (l_debug = 1) THEN
                 print_debug('MAINTAIN_MO_CON - After calling create_move_order:'||x_return_status||':'||l_progress,1);
                 print_debug('MAINTAIN_MO_CON - Move Order Header ID:'||l_move_order_header_id||':'||l_progress,1);
                 print_debug('MAINTAIN_MO_CON - Move Order Line ID:'||l_move_order_line_id||':'||l_progress,1);
            END IF;

            IF (x_return_status <> 'S') THEN
               l_progress := 'WMSINB-45064';
               RAISE fnd_api.g_exc_error;
            END IF;

           --update mol for the sub and loc
           UPDATE mtl_txn_request_lines
              SET from_subinventory_code = Nvl(l_transfer_sub,from_subinventory_code)
              , from_locator_id = Nvl(l_transfer_locator_id, from_locator_id)
              WHERE header_id = l_move_order_header_id
                and line_id = l_move_order_line_id
                and organization_id = p_org_id
                AND inventory_item_id = p_item_id;

	   -- Call to UPDATE WDD
	   IF (l_mol_res_out(l_loop_index).backorder_delivery_detail_id IS NOT NULL) THEN
	      inv_rcv_reservation_util.update_wdd
		(x_return_status => x_return_status
		 ,x_msg_count    => x_msg_count
		 ,x_msg_data     => x_msg_data
		 ,p_wdd_id       => l_mol_res_out(l_loop_index).backorder_delivery_detail_id
		 ,p_released_status => null
		 ,p_mol_id          => l_move_order_line_id
		 );
	   END IF;


           IF (l_debug = 1) THEN
                 print_debug('MAINTAIN_MO_CON - After calling update_wdd '||x_return_status||':'||l_progress,1);
                 print_debug('MAINTAIN_MO_CON - Move Order Header ID:'||l_move_order_header_id||':'||l_progress,1);
           END IF;

           IF (x_return_status <> 'S') THEN
               l_progress := 'WMSINB-45064';
               RAISE fnd_api.g_exc_error;
           END IF;
        End if;

	l_loop_index := l_mol_res_out.next(l_loop_index);
      End Loop;


      --We need to update the wms_process_flag on mol for all the lines for the given lpn as
      --we update all the mols for the given lpn to 2 in mark_returns

      UPDATE mtl_txn_request_lines
	SET wms_process_flag = 1
	WHERE (lpn_id = p_lpn_id
	       OR lpn_id = p_transfer_lpn_id);

   END IF; --IF (l_transaction_type = 'CORRECT') THEN


   -- The transaction is complete so call the complete op instance now
   IF (l_transaction_type <> 'DELIVER') THEN
      IF p_mmtt_temp_id IS NOT NULL THEN
	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO - calling call_atf_api:'||p_mmtt_temp_id,1);
	    l_progress := 'WMSINB-13721';
	 END IF;

	 IF (l_transaction_type IN ('ACCEPT','REJECT')) THEN
	    l_operation_type := wms_globals.g_op_type_inspect;
	  ELSE
	    l_operation_type := NULL;
	 END IF;

	 call_atf_api(x_return_status => x_return_status,
		      x_msg_data => x_msg_data,
		      x_msg_count => x_msg_count,
		      x_error_code => l_error_code,
		      p_source_task_id => p_mmtt_temp_id,
		      p_activity_type_id => 1,
		      p_operation_type_id => l_operation_type,
		      p_mol_id => NULL,
		      p_atf_api_name => g_atf_api_complete);

	 IF (l_debug = 1) THEN
	    print_debug('MAINTAIN_MO - Error Code from ATF API:'||l_error_code,1);
	 END IF;

	 IF (x_return_status <> g_ret_sts_success) THEN
	    IF (l_error_code <> 15 OR l_error_code IS NULL) THEN
	       IF (l_debug = 1) THEN
		  print_debug('MAINTAIN_MO - call_atf_api failed:'||p_mmtt_temp_id,1);
	       END IF;
	       --raise error
	       l_progress := 'WMSINB-13750';
	       RAISE fnd_api.g_exc_error;
	     ELSE --IF (l_error_code <> 15) THEN
	       x_return_status := g_ret_sts_success;
	    END IF; --IF (l_error_code <> 15) THEN
	 END IF;
      END IF; --IF p_mmtt_temp_id IS NOT NULL THEN
   END IF; --IF (l_transaction_type <> 'DELIVER') THEN

--Added for 13395566
-- By this time the LPN has been created and the RT and RLS have been posted.
-- We would error out the transaction if the MO Line has quantity <= 0
-- or MTRL Sub/Loc is not same as that stamped on WLPN. The api TXN_COMPLETE
-- will be called with a status FALSE and would Rollback any work done by the TM.
   IF p_transfer_lpn_id IS NOT NULL AND l_transaction_type IN ('ACCEPT','REJECT','RECEIVE')--14137465
   THEN
      BEGIN
         IF (l_debug = 1)
         THEN
            print_debug ('MAINTAIN_MO - p_transfer_lpn_id :'|| p_transfer_lpn_id,1);
            print_debug ('MAINTAIN_MO - p_org_id :' || p_org_id, 1);
            print_debug ('MAINTAIN_MO - p_lpn_id :' || p_lpn_id, 1);
            print_debug ('MAINTAIN_MO - p_subinventory :' || p_subinventory,1);
            print_debug ('MAINTAIN_MO - p_locator_id :' || p_locator_id, 1);
            print_debug ('MAINTAIN_MO - p_from_subinventory :'|| p_from_subinventory,1);
            print_debug ('MAINTAIN_MO - p_from_locator_id :'|| p_from_locator_id,1);
         END IF;

         SELECT 'Y', mtrl.from_subinventory_code, mtrl.from_locator_id,
                mtrl.quantity
           INTO l_discrepancy_exist, l_mol_sub, l_mol_loc_id,
                l_mol_qty_in_puom
           FROM wms_license_plate_numbers wlpn, mtl_txn_request_lines mtrl
          WHERE wlpn.lpn_id = p_transfer_lpn_id
            AND wlpn.lpn_context = 3
            AND wlpn.organization_id = p_org_id
            AND wlpn.organization_id = mtrl.organization_id
            AND wlpn.lpn_id = mtrl.lpn_id
            AND mtrl.line_status = 7
            AND (   (    NVL (wlpn.subinventory_code, '@@@') <>
                                      NVL (mtrl.from_subinventory_code, '@@@')
                     AND NVL (wlpn.locator_id, -999) <>
                                               NVL (mtrl.from_locator_id,
                                                    -999)
                    )
                 OR mtrl.quantity <= 0
                )
            AND ROWNUM = 1;
      EXCEPTION
         WHEN OTHERS
         THEN
            l_discrepancy_exist := 'N';
            l_mol_sub := NULL;
            l_mol_loc_id := NULL;
            l_mol_qty_in_puom := NULL;
      END;

      IF (l_debug = 1)
      THEN
         print_debug ('MAINTAIN_MO - Discrepancy? ' || l_discrepancy_exist,1);
      END IF;

      IF l_discrepancy_exist = 'Y'
      THEN
         IF (l_debug = 1)
         THEN
            print_debug ('MAINTAIN_MO - MOL Subinventory :'|| l_mol_sub, 1);
            print_debug ('MAINTAIN_MO - MOL Locator      :'|| l_mol_loc_id, 1);
            print_debug ('MAINTAIN_MO - MOL Quantity     :'|| l_mol_qty_in_puom,1);
            print_debug ('MAINTAIN_MO - Discrepancy in MTRL/WLPN - Sub/Loc or MTRL qty <=0. Error Out the Transaction',1);
         END IF;

         l_progress := 'WMSINB:MOMIS001';
         fnd_message.set_name ('WMS', 'WMS_LPN_SUBLOC_MISMATCH');
         fnd_msg_pub.ADD;
         RAISE fnd_api.g_exc_error;
      END IF;
   END IF;
 --13395566


   /* You do not want to update the wms_process_flag here because
      another RTI within the same group may want to process the
      same MOL, which has been marked by the UI.  Updating the MOL
      should have been performed in the logic above.  Note that this
      assumes that the UI have marked the correct MOL for processing

   --Update the wms_process_flag for all MOLs for the fiven lpns
   UPDATE mtl_txn_request_lines
     SET wms_process_flag = 1
     WHERE lpn_id = p_lpn_id;

   UPDATE mtl_txn_request_lines
     SET wms_process_flag = 1
     WHERE lpn_id = p_transfer_lpn_id;
     */
EXCEPTION
   WHEN fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;
      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO - execution error:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
      END IF;
   WHEN fnd_api.g_exc_unexpected_error THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO - unexpected error:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
      END IF;
   WHEN OTHERS THEN
      X_RETURN_STATUS  := G_RET_STS_UNEXP_ERROR;
      IF (L_DEBUG = 1) THEN
	 PRINT_DEBUG('MAINTAIN_MO - OTHER EXCEPTION:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
      END IF;

      IF SQLCODE IS NOT NULL THEN
	 INV_MOBILE_HELPER_FUNCTIONS.SQL_ERROR('INV_RCV_INTERFACE_PVT.MAINTAIN_MO', l_progress,SQLCODE);
      END IF;
      -- GET MESSAGE COUNT AND DATA
      -- FND_MSG_PUB.COUNT_AND_GET(P_ENCODED => G_FALSE, P_COUNT => X_MSG_COUNT, P_DATA => X_MSG_DATA);
END maintain_mo_con;
-- R12

--bug8731994 check whether the org is wms org or not
Function is_wms_enabled(
        p_org_id                IN  NUMBER
        ) return boolean
IS
l_wms_enabled  varchar2(1);
success        boolean :=false;
BEGIN

  SELECT NVL(wms_enabled_flag,'N')
  INTO   l_wms_enabled
  FROM   mtl_parameters
  WHERE  organization_id = p_org_id ;

  IF l_wms_enabled <> 'N' THEN
    success := true;
  END IF;
  return success;

  EXCEPTION
    WHEN OTHERS then
      success := false;
      RETURN success;
END is_wms_enabled ;

PROCEDURE maintain_mo_wrapper(
                      p_rti_id IN NUMBER,
       		      p_primary_quantity IN NUMBER,
       		      p_primary_uom_code IN VARCHAR2,
       		      p_mmtt_temp_id IN NUMBER,
       		      p_org_id IN NUMBER,
       		      p_item_id IN NUMBER,
       		      p_revision IN VARCHAR2,
       		      p_qty IN NUMBER,
       		      p_uom_code IN VARCHAR2,
       		      p_lpn_id IN NUMBER,
       		      p_transfer_lpn_id IN NUMBER,
       		      p_lot_control_code IN NUMBER,
       		      p_serial_number_control_code IN NUMBER,
       		      p_po_line_location_id IN NUMBER,
       		      p_po_distribution_id IN NUMBER,
       		      p_shipment_line_id IN NUMBER,
       		      p_oe_order_line_id IN NUMBER,
       		      p_routing_header_id IN NUMBER,
       		      p_subinventory IN VARCHAR2,
       		      p_locator_id IN NUMBER,
       		      p_from_subinventory IN VARCHAR2,
       		      p_from_locator_id IN NUMBER,
       		      p_project_id IN NUMBER DEFAULT NULL,
       		      p_task_id IN NUMBER DEFAULT NULL,
       		      x_transaction_id OUT nocopy NUMBER,
       		      x_return_status OUT nocopy VARCHAR2,
       		      x_msg_count OUT nocopy NUMBER,
       		      x_msg_data OUT nocopy VARCHAR2,
                      -- OPMConvergence
                      p_sec_qty IN NUMBER DEFAULT NULL,
                      p_sec_uom IN VARCHAR2 DEFAULT NULL,
                      -- OPMConvergence
                      p_auto_transact_code IN VARCHAR2 DEFAULT NULL,
                      p_asn_line_flag IN VARCHAR2 DEFAULT NULL ,
                      p_validation_flag IN VARCHAR2 DEFAULT NULL,
                      -- Bug# 7154105
                      p_req_distribution_id IN NUMBER DEFAULT NULL
  )
  IS
     CURSOR c_mtlt(p_product_txn_id NUMBER) IS
	SELECT Ltrim(Rtrim(lot_number)) lot_number,
	  transaction_quantity,
	  primary_quantity,
          -- OPMConvergence
          secondary_quantity
          -- OPMConvergence
	  FROM mtl_transaction_lots_temp
	  WHERE product_code = 'RCV'
	  AND product_transaction_id = p_product_txn_id;

     l_mtlt_rec c_mtlt%ROWTYPE;

     l_num_lot_recs NUMBER := 0;

     l_lot_primary_qty NUMBER := 0;
     l_lot_txn_qty NUMBER := 0;

     l_progress VARCHAR2(15) := '00';
     L_DEBUG NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_proc_name  VARCHAR2(30) := 'MAINTAIN_MO_WRAPPER';

     -- OPMConvergence
     l_lot_sec_qty  NUMBER;
     -- OPMConvergence
BEGIN
   x_return_status := g_ret_sts_success;

   --bug8731994,if non-wms org ,stop move order creation
   IF(nvl(g_org_id,-1)=p_org_id and g_org_wms_enabled=false) THEN
     IF (l_debug = 1) THEN
       PRINT_DEBUG('NON-WMS ORG,STOP CREATING MO', 1);
     END IF;
     return;
   ELSE IF(nvl(g_org_id,-1)<>p_org_id) THEN
     g_org_id := p_org_id;
     g_org_wms_enabled := is_wms_enabled(p_org_id);
     IF(NOT g_org_wms_enabled) THEN
       IF (l_debug = 1) THEN
         PRINT_DEBUG('NON-WMS ORG,STOP CREATING MO', 1);
       END IF;
       return;
     END IF;
    END IF;
   END IF;

   IF (l_debug = 1) THEN
      PRINT_DEBUG('Entering MAINTAIN_MO_WRAPPER:'||l_progress, 1);
      PRINT_DEBUG('MAINTAIN_MO_WRAPPER - LOT CONTROL CODE:'||p_lot_control_code||':'||l_progress, 1);
      l_progress := 'WMSINB-13832';
   END IF;

   IF p_lot_control_code > 1 THEN
      IF (l_debug = 1) THEN
	 PRINT_DEBUG('MAINTAIN_MO_WRAPPER - LOT CONTROLLED:'||l_progress, 1);
	 l_progress := 'WMSINB-13838';
      END IF;

      OPEN c_mtlt(p_rti_id);

      l_num_lot_recs := 0;
      LOOP
	 FETCH c_mtlt INTO l_mtlt_rec;
	 EXIT WHEN c_mtlt%notfound;

	 IF (l_debug = 1) THEN
	    PRINT_DEBUG('MAINTAIN_MO_WRAPPER - LOT NUMBER:'||l_mtlt_rec.lot_number||':'||l_progress, 1);
	    PRINT_DEBUG('MAINTAIN_MO_WRAPPER - LOT PRIMARY QTY:'||l_mtlt_rec.primary_quantity||':'||l_progress, 1);
            -- OPMConvergence
	    PRINT_DEBUG(l_proc_name||'- LOT SEC QTY:'||l_mtlt_rec.secondary_quantity||':'||l_progress, 1);
	    -- OPMConvergence
	    l_progress := 'WMSINB-13851';
	 END IF;

	 l_lot_primary_qty := (Sign(p_primary_quantity)) * l_mtlt_rec.primary_quantity;
	 l_lot_txn_qty := (Sign(p_primary_quantity)) * l_mtlt_rec.transaction_quantity;
         -- OPMConvergence
	 l_lot_sec_qty := (sign(p_primary_quantity)) * l_mtlt_rec.secondary_quantity;
         -- OPMConvergence
	 l_num_lot_recs := l_num_lot_recs + 1;



         maintain_mo_con(
             p_rti_id => p_rti_id,
             p_primary_quantity => l_lot_primary_qty,
             p_primary_uom_code => p_primary_uom_code,
             p_mmtt_temp_id => p_mmtt_temp_id,
             p_org_id => p_org_id,
             p_item_id => p_item_id,
             p_revision => p_revision,
             p_qty => l_lot_txn_qty,
             p_uom_code => p_uom_code,
             p_lpn_id => p_lpn_id,
             p_transfer_lpn_id => p_transfer_lpn_id,
             p_lot_control_code => p_lot_control_code,
             p_serial_number_control_code => p_serial_number_control_code,
             p_lot_number => l_mtlt_rec.lot_number,
             p_po_line_location_id => p_po_line_location_id,
             p_po_distribution_id => p_po_distribution_id,
             p_shipment_line_id => p_shipment_line_id,
             p_oe_order_line_id => p_oe_order_line_id,
             p_routing_header_id => p_routing_header_id,
             p_subinventory => p_subinventory,
             p_locator_id => p_locator_id,
             p_from_subinventory => p_from_subinventory,
             p_from_locator_id => p_from_locator_id,
             p_project_id => p_project_id,
             p_task_id => p_task_id,
             x_transaction_id => x_transaction_id,
             x_return_status => x_return_status,
             x_msg_count => x_msg_count,
             x_msg_data => x_msg_data,
             -- OPMConvergence
             p_sec_uom => p_sec_uom,
             p_sec_qty => l_lot_sec_qty,
             -- OPMConvergence
	     p_auto_transact_code => p_auto_transact_code,
	     p_asn_line_flag => p_asn_line_flag,
	     p_validation_flag => p_validation_flag,
         -- Bug# 7154105
         p_req_distribution_id => p_req_distribution_id
	   );

	 IF (l_debug = 1) THEN
	    PRINT_DEBUG('MAINTAIN_MO_WRAPPER - MAINTAIN_MO RETURNED:'||x_return_status||':'||l_progress, 1);
	    l_progress := 'WMSINB-13889';
	 END IF;

	 IF (x_return_status <> 'S') THEN
	    l_progress := 'WMSINB-13893';
	    RAISE fnd_api.g_exc_error;
	 END IF;
      END LOOP;

      CLOSE c_mtlt;
   END IF;

   IF (l_debug = 1) THEN
      PRINT_DEBUG('MAINTAIN_MO_WRAPPER - NUM OF LOT RECS:'||l_num_lot_recs||':'||l_progress, 1);
      l_progress := 'WMSINB-13903';
   END IF;

   IF (p_lot_control_code = 1 OR l_num_lot_recs = 0) THEN
      maintain_mo_con(p_rti_id => p_rti_id,
        	  p_primary_quantity => p_primary_quantity,
        	  p_primary_uom_code => p_primary_uom_code,
        	  p_mmtt_temp_id => p_mmtt_temp_id,
        	  p_org_id => p_org_id,
        	  p_item_id => p_item_id,
        	  p_revision => p_revision,
        	  p_qty => p_qty,
        	  p_uom_code => p_uom_code,
        	  p_lpn_id => p_lpn_id,
        	  p_transfer_lpn_id => p_transfer_lpn_id,
        	  p_lot_control_code => p_lot_control_code,
        	  p_serial_number_control_code => p_serial_number_control_code,
        	  p_lot_number => NULL,
        	  p_po_line_location_id => p_po_line_location_id,
        	  p_po_distribution_id => p_po_distribution_id,
        	  p_shipment_line_id => p_shipment_line_id,
        	  p_oe_order_line_id => p_oe_order_line_id,
        	  p_routing_header_id => p_routing_header_id,
        	  p_subinventory => p_subinventory,
        	  p_locator_id => p_locator_id,
        	  p_from_subinventory => p_from_subinventory,
        	  p_from_locator_id => p_from_locator_id,
        	  p_project_id => p_project_id,
        	  p_task_id => p_task_id,
        	  x_transaction_id => x_transaction_id,
        	  x_return_status => x_return_status,
        	  x_msg_count => x_msg_count,
                  x_msg_data => x_msg_data,
                  -- OPMConvergence
                  p_sec_uom => p_sec_uom,
                  p_sec_qty => p_sec_qty,
                  -- OPMConvergence
	          p_auto_transact_code => p_auto_transact_code,
	          p_asn_line_flag => p_asn_line_flag,
	          p_validation_flag => p_validation_flag,
              -- Bug# 7154105
              p_req_distribution_id => p_req_distribution_id
                  );
      IF (l_debug = 1) THEN
	 PRINT_DEBUG('MAINTAIN_MO_WRAPPER - MAINTAIN_MO RETURNED:'||x_return_status||':'||l_progress, 1);
	 l_progress := 'WMSINB-13937';
      END IF;

      IF (x_return_status <> 'S') THEN
	 l_progress := 'WMSINB-13941';
	 RAISE fnd_api.g_exc_error;
      END IF;
   END IF;

   IF (l_debug = 1) THEN
      print_debug('MAINTAIN_MO_WRAPPER - Sucessfull:'||':'||l_progress, 1);
   END IF;

EXCEPTION
   WHEN fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;
      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_WRAPPER - execution error:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
      END IF;
   WHEN fnd_api.g_exc_unexpected_error THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
	 print_debug('MAINTAIN_MO_WRAPPER - unexpected error:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
      END IF;
   WHEN OTHERS THEN
      X_RETURN_STATUS  := G_RET_STS_UNEXP_ERROR;
      IF (L_DEBUG = 1) THEN
	 PRINT_DEBUG('MAINTAIN_MO_WRAPPER - OTHER EXCEPTION:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
      END IF;

      IF SQLCODE IS NOT NULL THEN
	 INV_MOBILE_HELPER_FUNCTIONS.SQL_ERROR('INV_RCV_INTERFACE_PVT.MAINTAIN_MO',l_progress, SQLCODE);
      END IF;
      -- GET MESSAGE COUNT AND DATA
      -- FND_MSG_PUB.COUNT_AND_GET(P_ENCODED => G_FALSE, P_COUNT => X_MSG_COUNT, P_DATA => X_MSG_DATA);
END maintain_mo_wrapper;


PROCEDURE process_txn(p_txn_id             IN NUMBER,
                      x_return_status            OUT NOCOPY VARCHAR2,
                      x_msg_count                OUT NOCOPY NUMBER,
                      x_msg_data                 OUT NOCOPY VARCHAR2
		      ) IS

			 l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
			 l_progress VARCHAR2(15) := '10';


			 l_primary_uom VARCHAR2(3);
			 l_primary_unit_of_measure VARCHAR2(30);
			 l_lot_control_code NUMBER;
			 l_serial_control_code NUMBER;
			 l_revision_control_flag VARCHAR2(10);
                         -- OPMConvergence
			 l_sec_uom_code VARCHAR2(3);
                         -- OPMConvergence
			  l_proc_name VARCHAR2(30) := 'PROCESS_TXN';
			  -- 10396979 addition
			  l_wms_return_status VARCHAR2(1);
			  l_wms_msg_count NUMBER;
			  l_wms_msg_data VARCHAR2(2000);
			  l_wms_lot number := 1;
			  l_wms_lot_number varchar2(20);
			  -- 10396979 addition
                          l_operation_val NUMBER; --add one variable for bug 13241074
                          l_express_receipt_flag VARCHAR2(1) := 'N'; --add one variable for bug 13241074
			 cursor c_rti is
			    select interface_transaction_id
			      ,transaction_type
			      ,item_id
			      ,item_description
                  ,item_revision
			      ,lpn_id
			      ,transfer_lpn_id
			      ,license_plate_number
			      ,transfer_license_plate_number
			      ,quantity
                  ,uom_code
                  ,unit_of_measure
			      ,shipment_header_id
                  ,shipment_num
			      ,routing_header_id
			      ,to_organization_id
			      ,from_organization_id
			      ,subinventory
			      ,locator_id
			      ,from_subinventory
			      ,from_locator_id
			      ,parent_transaction_id
			      ,source_document_code
                  ,group_id
                  ,primary_quantity
                  ,mmtt_temp_id
			      ,po_line_location_id
			      ,po_distribution_id
			      ,shipment_line_id
			      ,oe_order_line_id
                              ,auto_transact_code
			      ,Nvl(validation_flag,'N') validation_flag
			      ,project_id
			      ,task_id
			      ,Nvl(mobile_txn, 'N') mobile_txn
			      ,inv_transaction_id
			      ,processing_mode_code
                              -- OPMConvergence
                  ,secondary_quantity
                  ,secondary_unit_of_measure
                  ,secondary_uom_code
                              -- OPMConvergence
			      ,requisition_line_id
                  ,EXPRESS_TRANSACTION   --for bug 14235799
                  -- Bug# 7154105
                  ,req_distribution_id
				  ,lpn_group_id    --14408061
			      from rcv_transactions_interface rti
			      where rti.interface_transaction_id = p_txn_id;

			 l_rti_rec c_rti%rowtype;

			 l_parent_txn_type varchar2(30);
			 l_parent_parent_txn_type varchar2(30);
			 l_parent_parent_txn_id NUMBER;

			 l_from_lpn_state boolean;
			 l_to_lpn_state boolean;

			 l_lpn_context NUMBER;
			 l_transfer_lpn_context NUMBER;

			 l_cur_from_parent_lpn_id NUMBER;
			 l_cur_to_parent_lpn_id NUMBER;

			 l_serial_status NUMBER;
			 l_inspection_status NUMBER;

			 l_unpack_org_id NUMBER;

			 l_rt_transaction_id NUMBER;

			 l_from_org_serial_control NUMBER;
			 l_from_org_lot_control NUMBER;
			 l_from_org_rev_control NUMBER;
			 l_full_unpack BOOLEAN := FALSE;

			 l_total_lot_qty NUMBER;
			 l_total_serial_qty NUMBER;

			 l_asn_line_flag VARCHAR2(1) := 'N';

			 l_trx_type_for_unpack VARCHAR2(30) := NULL;
			 l_int_trx_id_for_unpack NUMBER := NULL;

			 l_transactions_enabled_flag VARCHAR2(1);

			 l_sec_txn_for_rtv VARCHAR2(1) := 'N';

                         l_lpn_org NUMBER;

                         l_parent_project_id NUMBER;
                         l_parent_task_id    NUMBER;

			 l_wlpn_source_header_id NUMBER;
			 l_xfr_wlpn_source_header_id NUMBER;

			 l_intransit_type NUMBER :=0;
			 l_auto_unnest_empty_lpns NUMBER := 1;

			 --R12
			 l_mol_res_in  cas_mol_rec_tb_tp;
			 l_mol_res_out cas_mol_rec_tb_tp;
			 l_po_header_id NUMBER;
			 l_shipment_header_id NUMBER;
			 l_requisition_line_id NUMBER;
			 --6168447
			 l_current_lpn_context NUMBER;
			 l_count               NUMBER;  -- 12610461
			 l_ignore_item_controls NUMBER :=2;  -- 12610461
			 l_unpack BOOLEAN := TRUE;--14408061
BEGIN
   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('Inside PROCESS_TXN', 4);
   END IF;

   open c_rti;
   Fetch c_rti into l_rti_rec;
   Close c_rti;

   IF (l_debug = 1) THEN
      print_debug('TRANSACTION_TYPE: '||l_rti_rec.transaction_type,1);
      print_debug('VALIDATION_FLAG:  '||l_rti_rec.validation_flag,1);

   END IF;

   IF (l_rti_rec.item_id IS NULL) THEN
      IF (l_debug = 1) THEN
         print_debug('PROCESS_TXN - One Time Item Exiting...',1);
         l_progress := 'WMSINB-14075';
      END IF;
      RETURN;
   END IF;

   IF (l_rti_rec.transaction_type = 'UNORDERED') THEN
      IF (l_debug = 1) THEN
         print_debug('PROCESS_TXN - Unordered Transaction Exit with success...',1);
         l_progress := 'WMSINB-14076';
      END IF;
      RETURN;
   END IF;

   --If the source document is 'REQ' then of the intransit_type in
   --mtl_interorg_parameters is set to 'Direct' then exit from this api.
   IF (l_rti_rec.source_document_code = 'REQ'
       AND l_rti_rec.mobile_txn = 'N'
       AND l_rti_rec.transaction_type = 'RECEIVE'
       AND l_rti_rec.inv_transaction_id IS NOT NULL
       AND l_rti_rec.processing_mode_code = 'ONLINE') THEN
      BEGIN
         SELECT intransit_type
           INTO l_intransit_type
           FROM mtl_interorg_parameters
          WHERE from_organization_id = l_rti_rec.from_organization_id
            AND to_organization_id = l_rti_rec.to_organization_id;

      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;

      IF (l_intransit_type = 1) THEN
          SELECT primary_uom_code
            INTO  l_primary_uom
            FROM mtl_system_items
            WHERE inventory_item_id = l_rti_rec.item_id
            AND organization_id = l_rti_rec.to_organization_id;

          IF (l_debug = 1) THEN
             print_debug('PROCESS_TXN - DIRECT REQ RECEIPT. CALLING RSV API',1);
             print_debug('l_rti_rec.transaction_type     => '||l_rti_rec.transaction_type,1);
             print_debug('l_rti_rec.to_organization_id   => '||l_rti_rec.to_organization_id,1);
             print_debug('l_rti_rec.item_id              => '||l_rti_rec.item_id,1);
             print_debug('l_rti_rec.item_revision        => '||l_rti_rec.item_revision,1);
             print_debug('l_rti_rec.project_id           => '||l_rti_rec.project_id,1);
             print_debug('l_rti_rec.task_id              => '||l_rti_rec.task_id,1);
             print_debug('l_rti_rec.primary_uom_code     => '||l_primary_uom,1);
             print_debug('l_rti_rec.primary_quantity     => '||l_rti_rec.primary_quantity,1);
             print_debug('l_rti_rec.requisition_line_id  => '||l_rti_rec.requisition_line_id,1);
             print_debug('l_rti_rec.auto_transact_code   => '||'DELIVER',1);
          END IF;

          l_mol_res_in(1).transaction_type       := l_rti_rec.transaction_type;
          l_mol_res_in(1).organization_id        := l_rti_rec.to_organization_id;
          l_mol_res_in(1).inventory_item_id      := l_rti_rec.item_id;
          l_mol_res_in(1).item_revision          := l_rti_rec.item_revision;
          l_mol_res_in(1).project_id             := l_rti_rec.project_id;
          l_mol_res_in(1).task_id                := l_rti_rec.task_id;
          l_mol_res_in(1).primary_uom_code       := l_primary_uom;
          l_mol_res_in(1).primary_qty            := l_rti_rec.primary_quantity;
          l_mol_res_in(1).requisition_line_id    := l_rti_rec.requisition_line_id;
          l_mol_res_in(1).auto_transact_code     := 'DELIVER';

          INV_RCV_RESERVATION_UTIL.maintain_reservations
            (x_return_status => x_return_status
             ,x_msg_count     => x_msg_count
             ,x_msg_data      => x_msg_data
             ,x_mol_tb        => l_mol_res_out
             ,p_cas_mol_tb    => l_mol_res_in
             );

          IF (l_debug = 1) THEN
             print_debug('PROCESS_TXN - rsv api returns:'||x_return_status,1);
          END IF;

          IF (x_return_status <> g_ret_sts_success) THEN
             l_progress := 'WMSINB-14998';
             RAISE FND_API.G_EXC_ERROR;
          END IF;

          RETURN;
      END IF;

   END IF; --IF (l_rti_rec.source_document_code = 'REQ') THEN


   l_progress := 'WMSINB-14080';

   -- Get The Parent Txn Details
   BEGIN
      select transaction_type,
             parent_transaction_id,
             project_id,
             task_id
        into l_parent_txn_type,
             l_parent_parent_txn_id,
             l_parent_project_id,
             l_parent_task_id
        from rcv_transactions rt
       where rt.transaction_id = l_rti_rec.parent_transaction_id;
   Exception
      When others then
          -- Review Later
          -- Set appropiate Message
          --
          l_progress := 'WMSINB-14095';
          null;
   End;

   --Bug No.      :  3159152/3101512
   --Description  :  The problem was receiving calls process_txn twice for a RTV txn on
   --top of a deliver txn - one for the RTR txn they create on
   --top of the deliver txn and other time for the RTV txn
   --created on top of the RTR txn. This was throwing too many
   --rows exception at WMSINB-12888.
   --The fix is to return from process_txn for the second time
   --they call us and do all the processing the first time itself.
   BEGIN
      IF l_rti_rec.transaction_type in ('RETURN TO VENDOR','RETURN TO CUSTOMER') AND
         l_parent_txn_type = 'DELIVER' THEN
          SELECT 'Y'
            INTO l_sec_txn_for_rtv
            FROM rcv_transactions
            WHERE transaction_type = 'RETURN TO RECEIVING'
            AND interface_transaction_id = p_txn_id
            AND exists (SELECT 1
                   FROM rcv_transactions
                   WHERE transaction_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER')
                   AND interface_transaction_id = p_txn_id);
      END IF;
   EXCEPTION
      WHEN no_data_found THEN
          l_sec_txn_for_rtv := 'N';
          l_progress := 'WMSINB-14097';
      WHEN OTHERS THEN
          l_progress := 'WMSINB-14098';
          RAISE fnd_api.g_exc_error;
   END;
   IF l_sec_txn_for_rtv = 'Y' THEN
      l_progress := 'WMSINB-14099';
      x_return_status := g_ret_sts_success;
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN returned with success for one step rtv on dlvr txn', 4);
      END IF;
      RETURN;
   END IF;

   -- Get The grand Parent Txn Details
   Begin
      select transaction_type
        into l_parent_parent_txn_type
        from rcv_transactions rt
       where rt.transaction_id = l_parent_parent_txn_id;
   Exception
      When others then
         -- Review Later
         -- Set appropiate Message
         --
         l_progress := 'WMSINB-14110';
         null;
   End;

   --bug 4201926 and bug 4286203 code fix begin
   IF (l_rti_rec.transaction_type IN ('CORRECT','RETURN TO VENDOR',
                                      'RETURN TO CUSTOMER','RETURN TO RECEIVING')
       AND (l_parent_txn_type = 'UNORDERED' OR l_parent_parent_txn_type = 'UNORDERED')) THEN
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - Unordered Transaction Exit with success...',1);
          l_progress := 'WMSINB-14115';
      END IF;
      RETURN;
   END IF;
   --bug 4201926 and bug 4286203 code fix end

   -- ASN_LINE_FLAG indicates whether it's an ASN or not

   IF (l_rti_rec.shipment_line_id IS NOT NULL
       AND l_rti_rec.transaction_type = 'RECEIVE') THEN
      BEGIN
         -- This part of code is changed to take into account ASN_TYPE
         --SELECT Nvl(asn_line_flag, 'N')
         --  INTO l_asn_line_flag
         --  FROM rcv_shipment_lines
         --  WHERE shipment_line_id = l_rti_rec.shipment_line_id;
         --
        --Bug 13891514 Adding ASBN as well because the validations/processing is same for ASN/ASBN
          select decode(ASN_TYPE,'ASN','Y', 'ASBN','Y','N')
           into l_asn_line_flag
           from rcv_shipment_headers
          WHERE shipment_header_id =  l_rti_rec.shipment_header_id;
      EXCEPTION
          WHEN OTHERS THEN
             l_asn_line_flag := 'N';
      END;
   END IF;

   l_progress := 'WMSINB-14127';

   l_from_lpn_state := get_lpn_id(l_rti_rec.lpn_id,
                       l_rti_rec.license_plate_number,
                       l_lpn_context,l_cur_from_parent_lpn_id,l_wlpn_source_header_id);

   l_progress := 'WMSINB-14131';

   if (l_from_lpn_state <> TRUE ) then
      l_progress := 'WMSINB-14134';
      IF (l_debug = 1) THEN
         print_debug('Process_txn: lpn_id and license_plate number does not exist' , 1);
      END If;
      -- MSG no new message just add the one on stack
      -- Review Later.
      -- Set Appropiate MESSAGE For ERROR
      --
      l_progress := 'WMSINB-14142';
      RAISE FND_API.G_EXC_ERROR;
   end if;

   l_progress := 'WMSINB-14146';

   l_to_lpn_state := get_lpn_id(l_rti_rec.transfer_lpn_id,
                                l_rti_rec.transfer_license_plate_number,
                                l_transfer_lpn_context,
                                l_cur_to_parent_lpn_id,
                                l_xfr_wlpn_source_header_id);

   l_progress := 'WMSINB-14153';

   if (l_to_lpn_state <> TRUE ) then
      l_progress := 'WMSINB-14156';
      IF (l_debug = 1) THEN
         print_debug('Process_txn: transfer_lpn_id and transfer_license_plate number does not exist' , 1);
      END If;
      -- MSG no new message just add the one on stack
      -- EXISTING LPN_ID and LICENSE_PLATE_NUMBER COMBINATION IS INVALID
      -- Review Later.
      -- Set Appropiate MESSAGE For ERROR
      --
      l_progress := 'WMSINB-14165';
      RAISE FND_API.G_EXC_ERROR;
   End if;

   l_progress := 'WMSINB-14169';

   SELECT primary_uom_code,
     primary_unit_of_measure,
     mtl_transactions_enabled_flag,
     lot_control_code,
     serial_number_control_code,
     decode(revision_qty_control_code
       ,1, 'N'
       ,2, 'Y'
       ,'N') item_rev_control_flag,
     secondary_uom_code
   INTO  l_primary_uom,
     l_primary_unit_of_measure,
     l_transactions_enabled_flag,
     l_lot_control_code,
     l_serial_control_code,
     l_revision_control_flag,
     -- OPMConvergence
     l_sec_uom_code
     -- OPMConvergence
   FROM mtl_system_items
   WHERE inventory_item_id = l_rti_rec.item_id
     AND organization_id = l_rti_rec.to_organization_id;

   l_progress := 'WMSINB-14190';

   --PO tracks the revision information for non revision controlled items.
   --We cannot track revision if revision controll is not on, hence nulling
   --it OUT.
   IF (l_revision_control_flag = 'N') THEN
      l_rti_rec.item_revision := NULL;
   END IF;

   IF (l_rti_rec.transaction_type = 'CANCEL') THEN
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - Calling cancel_asn',1);
      END IF;

      cancel_asn(x_return_status => x_return_status
                ,x_msg_count => x_msg_count
                ,x_msg_data => x_msg_data
                ,p_shipment_header_id => l_rti_rec.shipment_header_id
                ,p_shipment_line_id => l_rti_rec.shipment_line_id
                ,p_primary_quantity => l_rti_rec.primary_quantity
      );
      IF (x_return_status <> g_ret_sts_success) THEN
          IF (l_debug = 1) THEN
             print_debug('PROCESS_TXN - Cancel ASN Failed...:'||x_return_status,1);
          END IF;
          --raise an error
          --review later
          l_progress := 'WMSINB-14209';
          RAISE fnd_api.g_exc_error;
      END IF;

      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - Done calling cancel_asn',1);
      END IF;
   END IF; --IF (l_rti_rec.transaction_type = 'CANCEL') THEN

   IF (l_rti_rec.validation_flag = 'N'
       AND l_rti_rec.transaction_type IN ('CORRECT','RETURN TO VENDOR',
                                          'RETURN TO CUSTOMER','RETURN TO RECEIVING')) THEN
      l_trx_type_for_unpack := l_rti_rec.transaction_type;
      l_int_trx_id_for_unpack := l_rti_rec.interface_transaction_id;
    ELSE
      l_trx_type_for_unpack := NULL;
      l_int_trx_id_for_unpack := NULL;
   END IF;

   -- Validating Project and Task
   -- Currently Validate Project/Task for Deliver
   l_progress := 'WMSINB-14210';

   IF ( l_rti_rec.transaction_type in( 'DELIVER','ACCEPT','REJECT','TRANSFER') ) then
     IF ( (l_rti_rec.project_id is null and l_parent_project_id is not null) or
          (l_rti_rec.task_id is null and l_parent_task_id is not null)
        ) then
       l_progress := 'WMSINB-14211';
       IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - parent rti has proj/task info and txn has no proj/task info ',1);
       END IF;
       -- Raise Failure
       RAISE fnd_api.g_exc_error;
     ELSIF (l_rti_rec.project_id is not null or l_rti_rec.task_id is not null) then
        if ( (l_parent_project_id is null and l_parent_task_id is null )
             or (l_parent_txn_type = 'RECEIVE' and l_rti_rec.transaction_type = 'DELIVER') ) then  -- Bug 14127493 added
           l_progress := 'WMSINB-14212';
           IF (l_debug = 1) THEN
               print_debug('PROCESS_TXN - parent rti has no proj/task info ',1);
           END IF;
           -- This is ok
        Else
           if ( ( nvl(l_rti_rec.project_id,0) <> nvl(l_parent_project_id,0) ) or
             ( nvl(l_rti_rec.task_id,0) <> nvl(l_parent_task_id,0))
              ) then
              -- Raise Failure
              l_progress := 'WMSINB-14213';
              IF (l_debug = 1) THEN
                 print_debug('PROCESS_TXN - parent rti has different proj/task info than rti ',1);
              END IF;
              RAISE fnd_api.g_exc_error;
           End if;
        End if;
     END IF;
   END IF;

   l_progress := 'WMSINB-14228';

   IF ( ( l_rti_rec.transaction_type NOT IN
        ('SHIP','CORRECT','CANCEL','DELIVER','RETURN TO RECEIVING') )
        AND NOT ( l_rti_rec.transaction_type in ('RETURN TO VENDOR','RETURN TO CUSTOMER') and l_parent_txn_type = 'DELIVER' )
   )  THEN -- CASE FOR RTV, RTC for a parent RECEIVE TXN, CASE FOR RECEIVE TXN
      l_progress := 'WMSINB-14234';

      IF (l_asn_line_flag = 'Y' AND l_rti_rec.transaction_type = 'RECEIVE' ) THEN

         IF (l_debug = 1) THEN
            print_debug('PROCESS_TXN - ASN RECEIVE TXN ',1);
         END IF;
         IF (l_debug = 1) THEN   --add more log when fix bug 14235799
                    print_debug('PROCESS_TXN - l_rti_rec.lpn_id = '|| l_rti_rec.lpn_id ,1);
                    print_debug('PROCESS_TXN - l_rti_rec.transfer_lpn_id = '|| l_rti_rec.transfer_lpn_id ,1);
                    print_debug('PROCESS_TXN - l_rti_rec.EXPRESS_TRANSACTION  = '|| l_rti_rec.EXPRESS_TRANSACTION ,1);
         END IF;

         IF (l_rti_rec.lpn_id = Nvl(l_rti_rec.transfer_lpn_id,-1) AND l_rti_rec.EXPRESS_TRANSACTION='Y') THEN -- add the last condition for bug 14235799
              l_auto_unnest_empty_lpns := 2;
              l_express_receipt_flag := 'Y';
         ELSE
             l_auto_unnest_empty_lpns := 1;
         END IF;

         l_progress := 'WMSINB-14237';
       IF (l_express_receipt_flag <>'Y') THEN  -- for bug 14235799
         IF l_rti_rec.lpn_id IS NOT NULL THEN
            -- Review Later
            l_progress := 'WMSINB-14241';

            -- Don't do unpack all but only unpack the REQUIRED QTY /ITEM from here also.
            -- This is needed to keep the Nesting
            --wms_container_pvt.packunpack_container(
            --   p_api_version            => 1.0,
            --   p_init_msg_list          => g_false,
            --   p_commit                 => g_false,
            --   p_validation_level       => fnd_api.g_valid_level_none,
            --   x_return_status          => x_return_status,
            --   x_msg_count              => x_msg_count,
            --   x_msg_data               => x_msg_data,
            --   p_lpn_id                 => l_rti_rec.lpn_id,
            --   p_organization_id        => l_rti_rec.to_organization_id,
            --   p_operation              => 2, --- TO UNPACK
            --   p_unpack_all            => 1
            --   );
            Begin
               -- Get the LPN's Org Here
               select organization_id
                 into l_lpn_org
                 from wms_license_plate_numbers wlpn
                where wlpn.lpn_id = l_rti_rec.lpn_id;
               --
               l_progress := 'WMSINB-14465';
            Exception
               when others then
                 l_progress := 'WMSINB-14466';
                 l_lpn_org := null;
            End;

            IF (l_rti_rec.lpn_id = Nvl(l_rti_rec.transfer_lpn_id,-1)) THEN
               l_auto_unnest_empty_lpns := 2;
            ELSE
               l_auto_unnest_empty_lpns := 1;
			   /* Start 12610461 */
			   BEGIN

			   select count(distinct lot_number)
			   into l_count
			   from wms_lpn_contents
			   where parent_lpn_id = l_rti_rec.lpn_id
			   and  inventory_item_id = l_rti_rec.item_id
			   and  lot_number is not null;

			   EXCEPTION
			   WHEN OTHERS THEN
			   l_count := 0;
			   END;

			   IF (l_debug = 1) THEN
                 print_debug('PROCESS_TXN - l_count:'||l_count,1);
               END IF;

			   IF l_count = 1 THEN
			   l_ignore_item_controls := 1;
			   END IF;
			   /* End 12610461 */
            END IF;

            -- 14408061
            l_unpack := TRUE;
            IF g_lpn_tbl.EXISTS(l_rti_rec.lpn_id) THEN
             IF g_lpn_tbl(l_rti_rec.lpn_id) = l_rti_rec.lpn_group_id THEN
               IF (l_debug = 1) THEN
                 print_debug('No Need To Unpack ',1);
                 print_debug('l_rti_rec.lpn_id '||l_rti_rec.lpn_id,1);
                 print_debug('l_rti_rec.lpn_group_id '||l_rti_rec.lpn_group_id,1);
               END IF;
               l_unpack := FALSE;
             END IF;
            END IF;
            -- 14408061

            IF l_unpack THEN
            PackUnpack_wrapper( x_return_status              => x_return_status
                              ,x_msg_count                   => x_msg_count
                              ,x_msg_data                    => x_msg_data
                              ,p_lot_control_code            => l_lot_control_code
                              ,p_serial_control_code         => l_serial_control_code
                              ,p_product_txn_id              => p_txn_id
                              ,p_product_code                => 'RCV'
                              ,p_lpn_id                      => l_rti_rec.lpn_id
                              ,p_content_lpn_id              => null
                              ,p_content_item_id             => l_rti_rec.item_id
                              ,p_content_item_desc           => l_rti_rec.item_description
                              ,p_revision                    => l_rti_rec.item_revision
                              ,p_primary_quantity            => l_rti_rec.primary_quantity
                              ,p_primary_uom                 => l_primary_uom
                              ,p_organization_id             => l_lpn_org
                              ,p_operation                   => 2
                              ,p_cost_group_id               => null
                              ,p_source_type_id              => null
                              ,p_source_header_id            => NULL --l_rti_rec.group_id
                              ,p_source_name                 => null
                              ,p_source_line_id            => NULL
                              ,p_source_line_detail_id     => NULL
                              ,p_auto_unnest_empty_lpns    => l_auto_unnest_empty_lpns
                              -- OPMConvergence
                              ,p_sec_quantity          => l_rti_rec.secondary_quantity
                              ,p_sec_uom               => l_sec_uom_code
                              -- OPMConvergence
                              -- *R12* --
                              ,p_txn_quantity          => l_rti_rec.quantity
                              ,p_txn_uom_code          => l_rti_rec.uom_code
                              -- *R12 *--
							  ,p_ignore_item_controls  =>  l_ignore_item_controls -- 12610461
            );


            -- Check the error status from the above call
            if x_return_status <> G_RET_STS_SUCCESS Then
               --  Review Late Set Appropiate Message
               l_progress := 'WMSINB-14258';
               -- Do not error out for ASNs
               x_return_status := g_ret_sts_success;
               --RAISE FND_API.G_EXC_ERROR;
            End if;

            END IF;-- 14408061

         End if; --l_rti_rec.lpn_id is not null

         l_progress := 'WMSINB-14266';

         IF l_rti_rec.transfer_lpn_id IS NOT NULL THEN
            --
            l_progress := 'WMSINB-14270';

            IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                          l_rti_rec.transfer_lpn_id,
                          l_transactions_enabled_flag))
            THEN
               IF (l_debug = 1) THEN
                  print_debug('PROCESS_TXN - Expense and Non Expense Items cannot be Mixed in an LPN',1);
                  print_debug('PROCESS_TXN - ORG:LPN:TXNENABLEDFLAG::'||
                     l_rti_rec.to_organization_id||':'||l_rti_rec.transfer_lpn_id||
                     ':'||l_transactions_enabled_flag,1);
               END IF;
               l_progress := 'WMSINB-14282';

               --review later
               RAISE fnd_api.g_exc_error;
            END IF; --IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,

            IF (validate_pjm_commingle(l_rti_rec.to_organization_id,
                     l_rti_rec.transfer_lpn_id,
                     l_rti_rec.project_id,
                     l_rti_rec.task_id))
            THEN
               IF (l_debug = 1) THEN
                  print_debug('PROCESS_TXN - Project/Task commingling not allowed in LPN:'||l_rti_rec.transfer_lpn_id,1);
               END IF;
               l_progress := 'WMSINB-14288';

               RAISE fnd_api.g_exc_error;
            END IF; --IF (!validate_pjm_commingle(l_rti_rec.to_organization_id,

            IF (l_debug = 1) THEN
               print_debug('PROCESS_TXN - Organization ID:'||l_rti_rec.to_organization_id,1);
            END IF;

            --
            -- CALL UPDATE TLPN ORGANIZATION LOCATOR FOR WLPN/WLPNC
            --

            l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                             , p_routing_header_id => l_rti_rec.routing_header_id
                             , p_parent_transaction_type => l_parent_txn_type
                             , p_parent_parent_txn_type => l_parent_parent_txn_type
                             , p_quantity => l_rti_rec.primary_quantity
                             , p_auto_transact_code => l_rti_rec.auto_transact_code);


            l_progress := 'WMSINB-14305';

            update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                                        ,p_sub             => l_rti_rec.SUBINVENTORY
                                        ,p_locator         => l_rti_rec.LOCATOR_ID
                                        ,p_lpn_context     => l_lpn_context
                                        ,p_lpn_id          => l_rti_rec.transfer_lpn_id
                                        ,x_return_status   => x_return_status
                                        ,x_msg_count       => x_msg_count
                                        ,x_msg_data        => x_msg_data ) ;

            l_progress := 'WMSINB-14316';

            -- Check the error status from the above call
            if x_return_status <> G_RET_STS_SUCCESS Then
               --  Review Late Set Appropiate Message
               l_progress := 'WMSINB-14321';
               RAISE FND_API.G_EXC_ERROR;
            End if;


            PackUnpack_wrapper( x_return_status               => x_return_status
                              ,x_msg_count                   => x_msg_count
                              ,x_msg_data                    => x_msg_data
                              ,p_lot_control_code            => l_lot_control_code
                              ,p_serial_control_code         => l_serial_control_code
                              ,p_product_txn_id              => p_txn_id
                              ,p_product_code                => 'RCV'
                              ,p_lpn_id                      => l_rti_rec.transfer_lpn_id
                              ,p_content_lpn_id              => null
                              ,p_content_item_id             => l_rti_rec.item_id
                              ,p_content_item_desc           => l_rti_rec.item_description
                              ,p_revision                    => l_rti_rec.item_revision
                              ,p_primary_quantity            => l_rti_rec.primary_quantity
                              ,p_primary_uom                 => l_primary_uom
                              ,p_organization_id             => l_rti_rec.to_organization_id
                              ,p_operation                   => 1
                              ,p_cost_group_id               => null
                              ,p_source_type_id              => null
                              ,p_source_header_id            => null -- l_rti_rec.group_id
                              ,p_source_name                 => null
                              ,p_source_line_id              => NULL
                              ,p_source_line_detail_id     => NULL
                              -- OPMConvergence
                              ,p_sec_quantity          => l_rti_rec.secondary_quantity
                              ,p_sec_uom               => l_sec_uom_code
                              -- OPMConvergence
                              -- *R12* --
                              ,p_txn_quantity          => l_rti_rec.quantity
                              ,p_txn_uom_code          => l_rti_rec.uom_code
                              -- *R12 *--
            );

            -- Check the error status from the above call
            if x_return_status <> G_RET_STS_SUCCESS Then
               --  Review Late Set Appropiate Message
               l_progress := 'WMSINB-14353';
               RAISE FND_API.G_EXC_ERROR;
            End if;

         END IF; --if l_rti_rec.transfer_lpn_id is not null then
       ELSE  -- add for bug 14235799
          IF (l_debug = 1) THEN
                print_debug('l_express_receipt_flag= '||l_express_receipt_flag ,1);
          END IF;
          l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                             , p_routing_header_id => l_rti_rec.routing_header_id
                             , p_parent_transaction_type => l_parent_txn_type
                             , p_parent_parent_txn_type => l_parent_parent_txn_type
                             , p_quantity => l_rti_rec.primary_quantity
                             , p_auto_transact_code => l_rti_rec.auto_transact_code);


          l_progress := 'WMSINB-14305';

          update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                                        ,p_sub             => l_rti_rec.SUBINVENTORY
                                        ,p_locator         => l_rti_rec.LOCATOR_ID
                                        ,p_lpn_context     => l_lpn_context
                                        ,p_lpn_id          => l_rti_rec.transfer_lpn_id
                                        ,x_return_status   => x_return_status
                                        ,x_msg_count       => x_msg_count
                                        ,x_msg_data        => x_msg_data ) ;
                -- Check the error status from the above call
          if x_return_status <> G_RET_STS_SUCCESS Then
               --  Review Late Set Appropiate Message
               l_progress := 'WMSINB-14321';
               RAISE FND_API.G_EXC_ERROR;

          END IF;

      END IF;--14235799
         --
         -- **** UPDATE CURRENT STATUS/INSPECTION STATUS/ SUB /LOC/ORG  OF MSN ******

         if l_serial_control_code not in (1,6) then
             l_progress := 'WMSINB-14362';
             l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                         , p_auto_transact_code  => l_rti_rec.auto_transact_code
                         , p_parent_transaction_type => l_parent_txn_type
                         , p_parent_parent_txn_type  => l_parent_parent_txn_type
                         , p_quantity => l_rti_rec.primary_quantity);

             l_progress := 'WMSINB-14369';
             l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                         , p_routing_header_id  => l_rti_rec.routing_header_id
                         , p_parent_transaction_type => l_parent_txn_type
                         , p_parent_parent_txn_type  => l_parent_parent_txn_type
                         , p_quantity => l_rti_rec.primary_quantity);

             l_progress := 'WMSINB-14376';
             update_serial_status ( p_product_txn_id => p_txn_id
                        ,p_item_id => l_rti_rec.item_id
                        ,p_organization_id => l_rti_rec.to_organization_id
                        ,p_serial_status => l_serial_status
                        ,p_inspection_status => l_inspection_status
                        ,p_sub => l_rti_rec.subinventory
                        ,p_locator_id => l_rti_rec.locator_id
                        ,x_return_status => x_return_status
                        ,x_msg_count => x_msg_count
                        ,x_msg_data => x_msg_data );

             -- Check the error status from the above call
             if x_return_status <> G_RET_STS_SUCCESS Then
                --  Review Late Set Appropiate Message
                l_progress := 'WMSINB-14389';
                RAISE FND_API.G_EXC_ERROR;
             End if;
         End if;

      ELSIF (l_rti_rec.source_document_code IN ('INVENTORY','REQ') AND
             l_rti_rec.transaction_type = 'RECEIVE') THEN
          l_progress := 'WMSINB-14396';

          IF (l_debug = 1) THEN
             print_debug('PROCESS_TXN - Case for Intship/REQ Receive ' ,1);
             print_debug('PROCESS_TXN - Case for Intship/REQ Receive lpn_id=  '|| l_rti_rec.lpn_id ,1);
             print_debug('PROCESS_TXN - Case for Intship/REQ Receive transfer_lpn_id=  '|| l_rti_rec.transfer_lpn_id ,1);
          END IF;

          if l_rti_rec.lpn_id is not null then
             -- Review Later
             l_progress := 'WMSINB-14400';

             get_serial_lot_ctrl_in_src_org
                (p_shipment_line_id => l_rti_rec.shipment_line_id,
                 p_org_id => l_rti_rec.to_organization_id,
                 x_serial_control_code => l_from_org_serial_control,
                 x_lot_control_code => l_from_org_lot_control,
                 x_revision_control_code => l_from_org_rev_control,
                 x_return_status => x_return_status,
                 x_msg_count => x_msg_count,
                 x_msg_data => x_msg_data);

             IF (x_return_status <> g_ret_sts_success) THEN
                 --Review Later
                 l_progress := 'WMSINB-14413';
                 RAISE fnd_api.g_exc_error;
             END IF;

             IF ((l_lot_control_code = 2 AND l_from_org_lot_control <> 2)
               OR (l_lot_control_code <> 2 AND l_from_org_lot_control = 2)
               OR (l_serial_control_code > 1
               AND l_from_org_serial_control = 1)
               OR (l_serial_control_code IN (1,6)   --Bug 6733277
                   AND l_from_org_serial_control > 1)
               OR (l_from_org_rev_control = 1
                   AND l_revision_control_flag = 'Y')
               OR (l_from_org_rev_control = 2
                   AND l_revision_control_flag = 'N')) THEN
              l_progress := 'WMSINB-14423';
              l_full_unpack := TRUE;
             END IF;

             IF ((l_from_org_lot_control = 2 AND l_lot_control_code = 2)
                  OR (l_from_org_serial_control > 1
                      AND l_serial_control_code > 1)) THEN
                 -- Get total lot qty
                 l_progress := 'WMSINB-14431';
                 SELECT Nvl(SUM(transaction_quantity),0)
                   INTO l_total_lot_qty
                   FROM mtl_transaction_lots_temp
                   WHERE product_code = 'RCV'
                   AND product_transaction_id = l_rti_rec.interface_transaction_id;

                 -- GET the TOTAL SERIAL QTY
                 l_progress := 'WMSINB-14439';
                 SELECT Nvl(SUM(inv_serial_number_pub.get_serial_diff(fm_serial_number,to_serial_number)),0)
                   INTO l_total_serial_qty
                   FROM mtl_serial_numbers_temp
                   WHERE product_code = 'RCV'
                   AND product_transaction_id = l_rti_rec.interface_transaction_id;

                 IF (l_total_lot_qty = 0 AND l_total_serial_qty = 0) THEN
                    l_progress := 'WMSINB-14447';
                    l_full_unpack := TRUE;
                 END IF;

             END IF; --IF ((l_from_org_lot_control = 2 AND l_lot_control_code = 2)

             -- if transfer lpn id is same as LPN Id then we need to do full unpack here
             -- otherwise for Express Receipt if you have multiple items in the same lpn then subsequent
             -- unpack for next transactions would fail as the LPN's org get changed after the
             -- first transaction.
             --if (l_rti_rec.lpn_id = nvl(l_rti_rec.transfer_lpn_id,-9999) ) then
             --   l_progress := 'WMSINB-14448';
             --   l_full_unpack := TRUE;
             --   IF (l_debug = 1) THEN
             --	    print_debug('PROCESS_TXN - full unpack Flag coming here ' ,1);
             --   END IF;
             --End if;

             Begin
                -- Get the LPN's Org Here
                select organization_id
                  into l_lpn_org
                  from wms_license_plate_numbers wlpn
                 where wlpn.lpn_id = l_rti_rec.lpn_id;
                --
                l_progress := 'WMSINB-14465';
             Exception
                when others then
                   l_progress := 'WMSINB-14466';
                   l_lpn_org := null;
             End;

             IF (l_debug = 1) THEN   --add more log when fix bug 14235799
                    print_debug('PROCESS_TXN - l_rti_rec.lpn_id = '|| l_rti_rec.lpn_id ,1);
                    print_debug('PROCESS_TXN - l_rti_rec.transfer_lpn_id = '|| l_rti_rec.transfer_lpn_id ,1);
                    print_debug('PROCESS_TXN - l_rti_rec.EXPRESS_TRANSACTION  = '|| l_rti_rec.EXPRESS_TRANSACTION ,1);
              END IF;

             IF (l_rti_rec.lpn_id = Nvl(l_rti_rec.transfer_lpn_id,-1) AND l_rti_rec.EXPRESS_TRANSACTION='Y') THEN -- add the last condition for bug 14235799
                l_auto_unnest_empty_lpns := 2;
                l_express_receipt_flag := 'Y';  -- add for 13241074
             ELSE
                l_auto_unnest_empty_lpns := 1;
             END IF;


             IF l_full_unpack THEN
                 IF (l_debug = 1) THEN
                    print_debug('PROCESS_TXN - Performing item unpack of LPN = '|| l_rti_rec.lpn_id ,1);
                 END IF;

                 -- CASE FOR EXPRESS RECEIPT FOR MULTIPLE ITEMS
                 -- For the First Time for rti rows within the same group this API
                 -- Gets called the LPN org and the rti from ORG is same so LPN will
                 -- get fully unpacked..
                 -- For the second time when it comes the LPN org
                 -- and the from ORG of rti will be different and we don't need to
                 -- unpack in that case as it already got unpacked once before.
                 -- if l_rti_rec.from_organization_id = nvl(l_lpn_org,0) then
                 -- Don't need the above case anymore here'

                 -- We should not be doing full unpack. Instead if one of
                 -- the conditions used to set l_full_unpack to true is
                 -- met then we should null out the lot_number on
                 -- wms_lpn_contents and null out the lpn_id on mtl_serial_numbers

                 UPDATE wms_lpn_contents
                   SET lot_number = NULL,
                   revision = NULL
                   WHERE parent_lpn_id = l_rti_rec.lpn_id
                   AND inventory_item_id = l_rti_rec.item_id;

                 UPDATE mtl_serial_numbers
                   SET lpn_id = NULL
                   WHERE inventory_item_id = l_rti_rec.item_id
                   AND lpn_id = l_rti_rec.lpn_id
		   AND current_status <> 7;  -- Bug 6902368

                 l_progress := 'WMSINB-14468';
                 PackUnpack_wrapper( x_return_status                => x_return_status
                              ,x_msg_count                   => x_msg_count
                              ,x_msg_data                    => x_msg_data
                              ,p_lot_control_code            => 1
                              ,p_serial_control_code         => 1
                              ,p_product_txn_id              => p_txn_id
                              ,p_product_code                => 'RCV'
                              ,p_lpn_id                      => l_rti_rec.lpn_id
                              ,p_content_lpn_id              => null
                              ,p_content_item_id             => l_rti_rec.item_id
                              ,p_content_item_desc           => l_rti_rec.item_description
                              ,p_revision                    => NULL
                              ,p_primary_quantity            => l_rti_rec.primary_quantity
                              ,p_primary_uom                 => l_primary_uom
                              ,p_organization_id             => l_lpn_org
                              ,p_operation                   => 2
                              ,p_cost_group_id               => null
                              ,p_source_type_id              => null
                              ,p_source_header_id            => NULL --l_rti_rec.group_id
                              ,p_source_name                 => null
                              ,p_source_line_id              => NULL
                              ,p_source_line_detail_id       => NULL
                              ,p_auto_unnest_empty_lpns      => l_auto_unnest_empty_lpns
                              -- OPMConvergence
                              ,p_sec_quantity          => l_rti_rec.secondary_quantity
                              ,p_sec_uom               => l_sec_uom_code
                              -- OPMConvergence
                              -- Following 2 line were added for bugfix 5488003
                              ,p_txn_quantity          => l_rti_rec.quantity
                              ,p_txn_uom_code          => l_rti_rec.uom_code
                 );
                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                    --  Review Late Set Appropiate Message
                    l_progress := 'WMSINB-14469';
                    --Do not error out for Int receipts
                    x_return_status := g_ret_sts_success;
                    --RAISE FND_API.G_EXC_ERROR;
                 End if;

             ELSE

                 -- Always pass the LPN's org in this case for UNPACK
                 -- Otherwise multiple items packed in the same LPN
                 -- Causing issues

                 l_progress := 'WMSINB-14500';

                 if l_lpn_org is null then
                    l_lpn_org :=  l_rti_rec.from_organization_id;
                 End if;
                 print_debug('before PackUnpack_wrapper l_auto_unnest_empty_lpns='||l_auto_unnest_empty_lpns,1); -- for bug 13241074 start if
                 print_debug('before unpack through PackUnpack_wrapper l_express_receipt_flag='||l_express_receipt_flag,1); -- for bug 13241074
                 -- for bug 13241074 we do not need to call the unpack operation for express receipt when both lpn and transfer_lpn are same
                  -- and if the lot / serial / revision control flag is same in both orgs.
                 IF l_express_receipt_flag <> 'Y' THEN
                         PackUnpack_wrapper( x_return_status               => x_return_status
                                    ,x_msg_count                   => x_msg_count
                                    ,x_msg_data                    => x_msg_data
                                    ,p_lot_control_code            => l_lot_control_code
                                    ,p_serial_control_code         => l_serial_control_code
                                    ,p_product_txn_id              => p_txn_id
                                    ,p_product_code                => 'RCV'
                                    ,p_lpn_id                      => l_rti_rec.lpn_id
                                    ,p_content_lpn_id              => null
                                    ,p_content_item_id             => l_rti_rec.item_id
                                    ,p_content_item_desc           => l_rti_rec.item_description
                                    ,p_revision                    => l_rti_rec.item_revision
                                    ,p_primary_quantity            => l_rti_rec.primary_quantity
                                    ,p_primary_uom                 => l_primary_uom
                                    ,p_organization_id             => l_lpn_org
                                    ,p_operation                   => 2
                                    ,p_cost_group_id               => null
                                    ,p_source_type_id              => null
                                    ,p_source_header_id            => NULL --l_rti_rec.group_id
                                    ,p_source_name                 => null
                                    ,p_source_line_id              => NULL
                                    ,p_source_line_detail_id       => NULL
                                    ,p_auto_unnest_empty_lpns      => l_auto_unnest_empty_lpns
                                    -- OPMConvergence
                                    ,p_sec_quantity          => l_rti_rec.secondary_quantity
                                    ,p_sec_uom               => l_sec_uom_code
                                    -- OPMConvergence
                                    -- *R12* --
                                    ,p_txn_quantity          => l_rti_rec.quantity
                                    ,p_txn_uom_code          => l_rti_rec.uom_code
                                    -- *R12 *--
                          );
                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                    --  Review Late Set Appropiate Message
                    l_progress := 'WMSINB-14501';
                    --Do not error out for Int Receipts
                    x_return_status := g_ret_sts_success;
                    --RAISE FND_API.G_EXC_ERROR;
                 End if;
               END IF; -- for bug 13241074 end if
             END IF; --IF l_full_unpack THEN

          End if; --l_rti_rec.lpn_id is not null

          l_progress := 'WMSINB-14510';

          if l_rti_rec.transfer_lpn_id is not null then
             --
             l_progress := 'WMSINB-14514';

             IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                     l_rti_rec.transfer_lpn_id,
                     l_transactions_enabled_flag))
             THEN
                 IF (l_debug = 1) THEN
                    print_debug('PROCESS_TXN - Expense and Non Expense Items cannot be Mixed in an LPN',1);
                    print_debug('PROCESS_TXN - ORG:LPN:TXNENABLEDFLAG::'||
                         l_rti_rec.to_organization_id||':'||l_rti_rec.transfer_lpn_id||
                         ':'||l_transactions_enabled_flag,1);
                 END IF;
                 l_progress := 'WMSINB-14526';

                 --review later
                 RAISE fnd_api.g_exc_error;
             END IF; --IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,

             IF (validate_pjm_commingle(l_rti_rec.to_organization_id,
                       l_rti_rec.transfer_lpn_id,
                       l_rti_rec.project_id,
                       l_rti_rec.task_id))
             THEN
                 IF (l_debug = 1) THEN
                    print_debug('PROCESS_TXN - Project/Task commingling not allowed in LPN:'||l_rti_rec.transfer_lpn_id,1);
                 END IF;
                 l_progress := 'WMSINB-14532';

                 RAISE fnd_api.g_exc_error;
             END IF; --IF (!validate_pjm_commingle(l_rti_rec.to_organization_id,

             IF (l_debug = 1) THEN
                 print_debug('PROCESS_TXN - Organization ID:'||l_rti_rec.to_organization_id,1);
             END IF;

             --
             -- CALL UPDATE TLPN ORGANIZATION LOCATOR FOR WLPN/WLPNC
             --

             l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                     , p_routing_header_id => l_rti_rec.routing_header_id
                     , p_parent_transaction_type => l_parent_txn_type
                     , p_parent_parent_txn_type => l_parent_parent_txn_type
                     , p_quantity =>	l_rti_rec.primary_quantity
                     , p_auto_transact_code => l_rti_rec.auto_transact_code);

             l_progress := 'WMSINB-14548';

             update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                     ,p_sub             => l_rti_rec.SUBINVENTORY
                     ,p_locator         => l_rti_rec.LOCATOR_ID
                     ,p_lpn_context     => l_lpn_context
                     ,p_lpn_id          => l_rti_rec.transfer_lpn_id
                     ,x_return_status   => x_return_status
                     ,x_msg_count       => x_msg_count
                     ,x_msg_data        => x_msg_data ) ;

             l_progress := 'WMSINB-14559';

             -- Check the error status from the above call
             if x_return_status <> G_RET_STS_SUCCESS Then
                 --  Review Late Set Appropiate Message
                 l_progress := 'WMSINB-14564';
                 RAISE FND_API.G_EXC_ERROR;
             End if;

          END IF; --if l_rti_rec.transfer_lpn_id is not null then

	  -- Bug 7534906 : Kept outside the if l_rti_rec.transfer_lpn_id is not null condition
	  IF ( nvl(l_rti_rec.lpn_id,0)  > 0 ) THEN  --6612300
		--Bug 6168447:Update the org of the FROM LPN to that of receiving org.
		--Also null out source_name and source_header_id.
		--This needs to be done only if the LPN is getting unpacked completely.
		SELECT lpn_context
		INTO l_current_lpn_context
		FROM wms_license_plate_numbers
		WHERE lpn_id = l_rti_rec.lpn_id;

		IF (l_current_lpn_context = 5) THEN
		   IF (l_debug = 1) THEN
		      print_debug('PROCESS_TXN - Updating the oranization of from lpn to that of receiving org',1);
		   END IF;

		   update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
					,p_sub             => NULL
					,p_locator         => NULL
					,p_lpn_context     => 5
					,p_source_name     => FND_API.G_MISS_CHAR
					,p_lpn_id          => l_rti_rec.lpn_id
					,x_return_status   => x_return_status
					,x_msg_count       => x_msg_count
					,x_msg_data        => x_msg_data ) ;
		   -- Check the error status from the above call
		   if x_return_status <> G_RET_STS_SUCCESS Then
		       --  Review Late Set Appropiate Message
		       l_progress := 'WMSINB-14564a';
		       RAISE FND_API.G_EXC_ERROR;
		   End if;
		END IF;
		--6168447:end
	  END IF;


          -- **** This needs to be done before packunpack as the
          -- **** serials are accessed using the current_organization_id = to_organization_id in the
          -- **** in wms_container_pvt.packunpack_container
          -- **** and it was unable to  fetch serials
          -- **** UPDATE CURRENT STATUS/INSPECTION STATUS/ SUB /LOC/ORG  OF MSN ******

          if l_serial_control_code <> 1 then
             l_progress := 'WMSINB-14604';
             l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                               , p_auto_transact_code  => l_rti_rec.auto_transact_code
                               , p_parent_transaction_type => l_parent_txn_type
                               , p_parent_parent_txn_type  => l_parent_parent_txn_type
                               , p_quantity => l_rti_rec.primary_quantity);

             l_progress := 'WMSINB-14611';
             l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                               , p_routing_header_id  => l_rti_rec.routing_header_id
                               , p_parent_transaction_type => l_parent_txn_type
                               , p_parent_parent_txn_type  => l_parent_parent_txn_type
                               , p_quantity => l_rti_rec.primary_quantity);

             l_progress := 'WMSINB-14618';
             update_serial_status ( p_product_txn_id => p_txn_id
                              ,p_item_id => l_rti_rec.item_id
                              ,p_organization_id => l_rti_rec.to_organization_id
                              ,p_serial_status => l_serial_status
                              ,p_inspection_status => l_inspection_status
                              ,p_sub => l_rti_rec.subinventory
                              ,p_locator_id => l_rti_rec.locator_id
                              ,x_return_status => x_return_status
                              ,x_msg_count => x_msg_count
                              ,x_msg_data => x_msg_data );

             -- Check the error status from the above call
             if x_return_status <> G_RET_STS_SUCCESS Then
                --  Review Late Set Appropiate Message
                l_progress := 'WMSINB-14631';
                RAISE FND_API.G_EXC_ERROR;
             End if;
          End if; -- l_serial_control_code not in (1,6) then
          print_debug('secondly PackUnpack_wrapper l_auto_unnest_empty_lpns='||l_auto_unnest_empty_lpns,1); -- for bug 13241074
          print_debug('before pack / correct through PackUnpack_wrapper l_express_receipt_flag='||l_express_receipt_flag,1); -- for bug 13241074
          if l_rti_rec.transfer_lpn_id is not null then
             IF l_express_receipt_flag = 'Y'   -- for bug 13241074/13976923
			 AND NOT ((l_lot_control_code = 2 AND l_from_org_lot_control <> 2) --14459255 begin
               OR (l_lot_control_code <> 2 AND l_from_org_lot_control = 2)
               OR (l_serial_control_code > 1
               AND l_from_org_serial_control = 1)
               OR (l_serial_control_code IN (1,6)
                   AND l_from_org_serial_control > 1)
               OR (l_from_org_rev_control = 1
                   AND l_revision_control_flag = 'Y')
               OR (l_from_org_rev_control = 2
                   AND l_revision_control_flag = 'N')) THEN   -- 14459255  end
                print_debug('Do not call Pack Unpack as it is express receipt case and LPN orgs have already been updated by ModifyLPN call Express Receipt - '||l_express_receipt_flag,1);
             ELSE
				print_debug('Call Pack Unpack in Correct Mode as Express Receipt Flag is - '||l_express_receipt_flag,1);
             PackUnpack_wrapper( x_return_status               => x_return_status
                               ,x_msg_count                   => x_msg_count
                               ,x_msg_data                    => x_msg_data
                               ,p_lot_control_code            => l_lot_control_code
                               ,p_serial_control_code         => l_serial_control_code
                               ,p_product_txn_id              => p_txn_id
                               ,p_product_code                => 'RCV'
                               ,p_lpn_id                      => l_rti_rec.transfer_lpn_id
                               ,p_content_lpn_id              => null
                               ,p_content_item_id             => l_rti_rec.item_id
                               ,p_content_item_desc           => l_rti_rec.item_description
                               ,p_revision                    => l_rti_rec.item_revision
                               ,p_primary_quantity            => l_rti_rec.primary_quantity
                               ,p_primary_uom                 => l_primary_uom
                               ,p_organization_id             => l_rti_rec.to_organization_id
                               ,p_operation                   => 1
                               ,p_cost_group_id               => null
                               ,p_source_type_id              => null
                               ,p_source_header_id            => null -- l_rti_rec.group_id
                               ,p_source_name                 => null
                               ,p_source_line_id              => NULL
                               ,p_source_line_detail_id     => NULL
                               -- OPMConvergence
                               ,p_sec_quantity          => l_rti_rec.secondary_quantity
                               ,p_sec_uom               => l_sec_uom_code
                               -- OPMConvergence
                               -- *R12* --
                               ,p_txn_quantity          => l_rti_rec.quantity
                               ,p_txn_uom_code          => l_rti_rec.uom_code
                               -- *R12 *--
								);
			END IF;

             -- Check the error status from the above call
             if x_return_status <> G_RET_STS_SUCCESS Then
                 --  Review Late Set Appropiate Message
                 l_progress := 'WMSINB-14634';
                 RAISE FND_API.G_EXC_ERROR;
             End if;

          END IF; --if l_rti_rec.transfer_lpn_id is not null then
          --
          -- **** UPDATE CURRENT STATUS/INSPECTION STATUS/ SUB /LOC/ORG  OF MSN ******
          -- **** This part is done above now

      Else --if (l_lpn_context = G_LPN_CONTEXT_VENDOR and l_rti_rec.transaction_type = 'RECEIVE' ) then

          IF (l_debug = 1) THEN
              print_debug('PROCESS_TXN - CASE FOR  RECEIVE TXN ',1);
          END IF;

          l_progress := 'WMSINB-14637';

	 /* Bug 7410777 */
	  IF l_rti_rec.transaction_type IN ('ACCEPT', 'REJECT') THEN
	       IF l_rti_rec.uom_code is null then
		  IF (l_debug = 1) THEN
		    print_debug('PROCESS_TXN - Before Pack Unpack Get uom_code from unit_of_measure as Uom_code is null in rti',1);
		    print_debug('PROCESS_TXN - Before Pack Unpack Unit_of_measure = '|| l_rti_rec.unit_of_measure,1);
		  END IF;

	          BEGIN
		    SELECT uom_code
		    into l_rti_rec.uom_code
		    FROM mtl_item_uoms_view
		    WHERE organization_id = l_rti_rec.to_organization_id
		    AND inventory_item_id =  l_rti_rec.item_id
		    AND unit_of_measure = l_rti_rec.unit_of_measure;
	          EXCEPTION
		    WHEN OTHERS THEN
		    IF (l_debug = 1) THEN
		       print_debug('PROCESS_TXN : Error retrieving uom_code', 1);
		    END IF;
		    l_progress := 'WMSINB-14638';
		    RAISE fnd_api.g_exc_error;
	          END;
	       END IF;
	    END IF;
	     /* End of fix for Bug 7410777*/

          if l_rti_rec.lpn_id is not null then
              l_progress := 'WMSINB-14639';
              if (l_rti_rec.lpn_id <> nvl(l_rti_rec.transfer_lpn_id,-9999)) then
                 -- UNPACK FLPN FOR RTI.ITEM, MTLT.LOTNUM, MSNT.FMSERNUM, MSNT.TOSERNUM
                 l_progress := 'WMSINB-14642';
                 IF (l_rti_rec.transaction_type = 'RECEIVE') THEN
                     l_unpack_org_id := l_rti_rec.from_organization_id;
                 ELSE
                     l_unpack_org_id := l_rti_rec.to_organization_id;
                 END IF;

                 PackUnpack_wrapper( x_return_status               => x_return_status
                                    ,x_msg_count                   => x_msg_count
                                    ,x_msg_data                    => x_msg_data
                                    ,p_lot_control_code            => l_lot_control_code
                                    ,p_serial_control_code         => l_serial_control_code
                                    ,p_product_txn_id              => p_txn_id
                                    ,p_product_code                => 'RCV'
                                    ,p_lpn_id                      => l_rti_rec.lpn_id
                                    ,p_content_lpn_id              => null
                                    ,p_content_item_id             => l_rti_rec.item_id
                                    ,p_content_item_desc           => l_rti_rec.item_description
                                    ,p_revision                    => l_rti_rec.item_revision
                                    ,p_primary_quantity            => l_rti_rec.primary_quantity
                                    ,p_primary_uom                 => l_primary_uom
                                    ,p_organization_id             => l_unpack_org_id
                                    ,p_operation                   => 2
                                    ,p_cost_group_id               => null
                                    ,p_source_type_id              => NULL
                                    ,p_source_header_id            => l_int_trx_id_for_unpack
                                    ,p_source_name                 => l_trx_type_for_unpack
                                    ,p_source_line_id              => NULL
                                    ,p_source_line_detail_id     => NULL
                                    -- OPMConvergence
                                    ,p_sec_quantity          => l_rti_rec.secondary_quantity
                                    ,p_sec_uom               => l_sec_uom_code
                                    -- OPMConvergence
                                    -- *R12* --
                                    ,p_txn_quantity          => l_rti_rec.quantity
                                    ,p_txn_uom_code          => l_rti_rec.uom_code
                                    -- *R12 *--
                 );
                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-14675';
                     RAISE FND_API.G_EXC_ERROR;
                 End if;

              End if; -- END OF FLPN AND TLP DIFFERENT
          End if; -- END OF l_rti_rec.lpn_id is not null

          l_progress := 'WMSINB-14682';

          if l_rti_rec.transfer_lpn_id is not null then
              l_progress := 'WMSINB-14685';
              if (l_rti_rec.transfer_lpn_id <> nvl(l_rti_rec.lpn_id,-9999)) then
                 l_progress := 'WMSINB-14687';
                 IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                           l_rti_rec.transfer_lpn_id,
                           l_transactions_enabled_flag))
                 THEN
                     IF (l_debug = 1) THEN
                        print_debug('PROCESS_TXN - Expense and Non Expense Items cannot be Mixed in an LPN',1);
                        print_debug('PROCESS_TXN - ORG:LPN:TXNENABLEDFLAG::'||
                               l_rti_rec.to_organization_id||':'||l_rti_rec.transfer_lpn_id||
                               ':'||l_transactions_enabled_flag,1);
                     END IF;
                     l_progress := 'WMSINB-14699';

                     --review later
                     RAISE fnd_api.g_exc_error;
                 END IF; --IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,

                 IF (validate_pjm_commingle(l_rti_rec.to_organization_id,
                     l_rti_rec.transfer_lpn_id,
                     l_rti_rec.project_id,
                     l_rti_rec.task_id))
                 THEN
                    IF (l_debug = 1) THEN
                        print_debug('PROCESS_TXN - Project/Task commingling not allowed in LPN:'||l_rti_rec.transfer_lpn_id,1);
                    END IF;
                    l_progress := 'WMSINB-14705';

                    RAISE fnd_api.g_exc_error;
                 END IF; --IF (!validate_pjm_commingle(l_rti_rec.to_organization_id,

                 l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                           , p_routing_header_id => l_rti_rec.routing_header_id
                           , p_parent_transaction_type => l_parent_txn_type
                           , p_parent_parent_txn_type => l_parent_parent_txn_type
                           , p_quantity => l_rti_rec.primary_quantity
                           , p_auto_transact_code => l_rti_rec.auto_transact_code);

                 IF (l_rti_rec.transaction_type NOT IN ('ACCEPT','REJECT') OR l_transfer_lpn_context = 5) THEN
                     l_progress := 'WMSINB-14714';
                     update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                         ,p_sub             => l_rti_rec.SUBINVENTORY
                         ,p_locator         => l_rti_rec.LOCATOR_ID
                         ,p_lpn_context     => l_lpn_context
                         ,p_lpn_id          => l_rti_rec.transfer_lpn_id
                         ,x_return_status   => x_return_status
                         ,x_msg_count       => x_msg_count
                         ,x_msg_data        => x_msg_data ) ;

                     -- Check the error status from the above call
                     if x_return_status <> G_RET_STS_SUCCESS Then
                        --  Review Late Set Appropiate Message
                        l_progress := 'WMSINB-14727';
                        RAISE FND_API.G_EXC_ERROR;
                     End if;
                 END IF; --IF (l_rti_rec.transaction_type NOT IN ('ACCEPT','REJECT') OR l_transfer_lpn_context = 5) THEN
                 -- This part is changed to call before packunpack_wrapper
                 -- because if issued out serials are repacked then they might have
                 -- a different org, so packunpack would fail to pack those serials
                 -- unless those serials had the org updated first to the current org

                 if l_serial_control_code <> 1 then
                     l_progress := 'WMSINB-14764';
                     l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                             , p_auto_transact_code  => l_rti_rec.auto_transact_code
                             , p_parent_transaction_type => l_parent_txn_type
                             , p_parent_parent_txn_type  => l_parent_parent_txn_type
                             , p_quantity => l_rti_rec.primary_quantity);

                     l_progress := 'WMSINB-14771';
                     l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                             , p_routing_header_id  => l_rti_rec.routing_header_id
                             , p_parent_transaction_type => l_parent_txn_type
                             , p_parent_parent_txn_type  => l_parent_parent_txn_type
                             , p_quantity => l_rti_rec.primary_quantity);

                     l_progress := 'WMSINB-14778';
                     update_serial_status ( p_product_txn_id => p_txn_id
                            ,p_item_id => l_rti_rec.item_id
                            ,p_organization_id => l_rti_rec.to_organization_id
                            ,p_serial_status => l_serial_status
                            ,p_inspection_status => l_inspection_status
                            ,p_sub => l_rti_rec.subinventory
                            ,p_locator_id => l_rti_rec.locator_id
                            ,x_return_status => x_return_status
                            ,x_msg_count => x_msg_count
                            ,x_msg_data => x_msg_data );

                     -- Check the error status from the above call
                     if x_return_status <> G_RET_STS_SUCCESS Then
                        --  Review Late Set Appropiate Message
                        l_progress := 'WMSINB-14791';
                        RAISE FND_API.G_EXC_ERROR;
                     End if;
                 End if;

                 PackUnpack_wrapper( x_return_status               => x_return_status
                                    ,x_msg_count                   => x_msg_count
                                    ,x_msg_data                    => x_msg_data
                                    ,p_lot_control_code            => l_lot_control_code
                                    ,p_serial_control_code         => l_serial_control_code
                                    ,p_product_txn_id              => p_txn_id
                                    ,p_product_code                => 'RCV'
                                    ,p_lpn_id                      => l_rti_rec.transfer_lpn_id
                                    ,p_content_lpn_id              => null
                                    ,p_content_item_id             => l_rti_rec.item_id
                                    ,p_content_item_desc           => l_rti_rec.item_description
                                    ,p_revision                    => l_rti_rec.item_revision
                                    ,p_primary_quantity            => l_rti_rec.primary_quantity
                                    ,p_primary_uom                 => l_primary_uom
                                    ,p_organization_id             => l_rti_rec.to_organization_id
                                    ,p_operation                   => 1
                                    ,p_cost_group_id               => null
                                    ,p_source_type_id              => null
                                    ,p_source_header_id            => null --l_rti_rec.group_id
                                    ,p_source_name                 => null
                                    ,p_source_line_id              => NULL
                                    ,p_source_line_detail_id     => NULL
                                    -- OPMConvergence
                                    ,p_sec_quantity          => l_rti_rec.secondary_quantity
                                    ,p_sec_uom               => l_sec_uom_code
                                    -- OPMConvergence
                                    -- *R12* --
                                    ,p_txn_quantity          => l_rti_rec.quantity
                                    ,p_txn_uom_code          => l_rti_rec.uom_code
                                    -- *R12 *--
                 );

                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-14759';
                     RAISE FND_API.G_EXC_ERROR;
                 End if;

              ELSE -- when FLPN = TLPN
                 l_progress := 'WMSINB-14796';

                 IF(l_debug = 1) THEN
                     print_debug('PROCESS_TXN - FLPN AND TLPN ARE SAME:'||l_progress,1);
                 END IF;

                 l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                                    , p_routing_header_id => l_rti_rec.routing_header_id
                                    , p_parent_transaction_type => l_parent_txn_type
                                    , p_parent_parent_txn_type => l_parent_parent_txn_type
                                    , p_quantity => l_rti_rec.primary_quantity
                                    , p_auto_transact_code => l_rti_rec.auto_transact_code);

                 IF (l_rti_rec.transaction_type NOT IN ('ACCEPT','REJECT') ) THEN
                     l_progress := 'WMSINB-14809';
                     update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                                                 ,p_sub             => l_rti_rec.SUBINVENTORY
                                                 ,p_locator         => l_rti_rec.LOCATOR_ID
                                                 ,p_lpn_context     => l_lpn_context
                                                 ,p_lpn_id          => l_rti_rec.transfer_lpn_id
                                                 ,x_return_status   => x_return_status
                                                 ,x_msg_count       => x_msg_count
                                                 ,x_msg_data        => x_msg_data ) ;

                     -- Check the error status from the above call
                     if x_return_status <> G_RET_STS_SUCCESS Then
                        --  Review Late Set Appropiate Message
                        l_progress := 'WMSINB-14822';
                        RAISE FND_API.G_EXC_ERROR;
                     End if;
                 END IF; --IF (l_rti_rec.transaction_type NOT IN ('ACCEPT','REJECT') ) THEN

                 if l_serial_control_code <> 1 then
                     l_progress := 'WMSINB-14828';
                     l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                                      , p_auto_transact_code  => l_rti_rec.auto_transact_code
                                      , p_parent_transaction_type => l_parent_txn_type
                                      , p_parent_parent_txn_type  => l_parent_parent_txn_type
                                      , p_quantity => l_rti_rec.primary_quantity);

                     l_progress := 'WMSINB-14835';
                     l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                                      , p_routing_header_id  => l_rti_rec.routing_header_id
                                      , p_parent_transaction_type => l_parent_txn_type
                                      , p_parent_parent_txn_type  => l_parent_parent_txn_type
                                      , p_quantity => l_rti_rec.primary_quantity);

                     l_progress := 'WMSINB-14842';
                     update_serial_status ( p_product_txn_id => p_txn_id
                                     ,p_item_id => l_rti_rec.item_id
                                     ,p_organization_id => l_rti_rec.to_organization_id
                                     ,p_serial_status => l_serial_status
                                     ,p_inspection_status => l_inspection_status
                                     ,p_sub => l_rti_rec.subinventory
                                     ,p_locator_id => l_rti_rec.locator_id
                                     ,x_return_status => x_return_status
                                     ,x_msg_count => x_msg_count
                                     ,x_msg_data => x_msg_data );

                     -- Check the error status from the above call
                     if x_return_status <> G_RET_STS_SUCCESS Then
                        --  Review Late Set Appropiate Message
                        l_progress := 'WMSINB-14855';
                        RAISE FND_API.G_EXC_ERROR;
                     End if;
                 End if;-- if l_serial_control_code not in (1,6) then
              End if; -- END OF FLPN AND TLPN DIFFERENT
          ELSE -- ELSE OF l_rti_rec.transfer_lpn_id is not null
              if l_serial_control_code <> 1 then
                 l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                                   , p_auto_transact_code  => l_rti_rec.auto_transact_code
                                   , p_parent_transaction_type => l_parent_txn_type
                                   , p_parent_parent_txn_type  => l_parent_parent_txn_type
                                   , p_quantity => l_rti_rec.primary_quantity);

                 l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                                   , p_routing_header_id  => l_rti_rec.routing_header_id
                                   , p_parent_transaction_type => l_parent_txn_type
                                   , p_parent_parent_txn_type  => l_parent_parent_txn_type
                                   , p_quantity => l_rti_rec.primary_quantity);

                 update_serial_status ( p_product_txn_id => p_txn_id
                                  ,p_item_id => l_rti_rec.item_id
                                  ,p_organization_id => l_rti_rec.to_organization_id
                                  ,p_serial_status => l_serial_status
                                  ,p_inspection_status => l_inspection_status
                                  ,p_sub => l_rti_rec.subinventory
                                  ,p_locator_id => l_rti_rec.locator_id
                                  ,x_return_status => x_return_status
                                  ,x_msg_count => x_msg_count
                                  ,x_msg_data => x_msg_data );

                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-14860';
                     RAISE FND_API.G_EXC_ERROR;
                 End if;
              End if;-- if l_serial_control_code not in (1,6) then
          End if; -- END OF l_rti_rec.transfer_lpn_id is not null
      End if; -- END OF l_lpn_context = G_LPN_CONTEXT_VENDOR and l_rti_rec.txntype = 'RECEIVE'

   elsif ( l_rti_rec.transaction_type = 'DELIVER' and  l_rti_rec.source_document_code = 'RMA' ) then
       l_progress := 'WMSINB-14864';
       -- UPDATE SERIAL STATUS to 4 for serial control code at SO ISUUE CASE
       if l_serial_control_code = 6 then
          l_progress := 'WMSINB-14867';
          update mtl_serial_numbers msn
             set msn.current_status = 4
             where msn.inventory_item_id       = l_rti_rec.item_id
             and msn.current_organization_id = l_rti_rec.to_organization_id
             and exists ( select 1
                           from mtl_serial_numbers_temp msnt
                           where msnt.product_code = 'RCV'
                             and msnt.product_transaction_id = p_txn_id
                             and msn.serial_number between msnt.fm_serial_number and msnt.to_serial_number
                             AND Length(msn.serial_number) = Length(msnt.fm_serial_number)
                             AND length(msnt.fm_serial_number)=Length(Nvl(msnt.to_serial_number,msnt.fm_serial_number))  --BUG 3818544
                        )
          ;
       End if;
   elsif ( l_rti_rec.transaction_type = 'SHIP' and  l_rti_rec.source_document_code = 'PO' ) then
       -- PACK FLPN
       --
       -- CHECK WHEtheR WE NEED TO POPULATE SOURCE_NAME AS SHIPMENT NUM HERE
       --
       l_progress := 'WMSINB-14885';

       IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                       l_rti_rec.lpn_id,
                       l_transactions_enabled_flag))
       THEN
          IF (l_debug = 1) THEN
              print_debug('PROCESS_TXN - Expense and Non Expense Items cannot be Mixed in an LPN',1);
              print_debug('PROCESS_TXN - ORG:LPN:TXNENABLEDFLAG::'||
                  l_rti_rec.to_organization_id||':'||l_rti_rec.lpn_id||
                  ':'||l_transactions_enabled_flag,1);
          END IF;
          l_progress := 'WMSINB-14897';

          --review later
          RAISE fnd_api.g_exc_error;
       END IF; --IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,

       l_progress := 'WMSINB-14903';

       IF l_rti_rec.lpn_id IS NOT NULL THEN
          l_progress := 'WMSINB-14904';
          l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                           , p_routing_header_id => l_rti_rec.routing_header_id
                           , p_parent_transaction_type => l_parent_txn_type
                           , p_parent_parent_txn_type => l_parent_parent_txn_type
                           , p_quantity =>	l_rti_rec.primary_quantity
                           , p_auto_transact_code => l_rti_rec.auto_transact_code);

          l_progress := 'WMSINB-14911';
          update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                           ,p_sub             => l_rti_rec.SUBINVENTORY
                           ,p_locator         => l_rti_rec.LOCATOR_ID
                           ,p_lpn_context     => l_lpn_context
                           ,p_lpn_id          => l_rti_rec.lpn_id
                           ,x_return_status   => x_return_status
                           ,x_msg_count       => x_msg_count
                           ,x_msg_data        => x_msg_data
                           ,p_source_name     => l_rti_rec.shipment_num
                           ,p_source_header_id => l_rti_rec.shipment_header_id) ;

          -- Check the error status from the above call
          if x_return_status <> G_RET_STS_SUCCESS Then
              --  Review Late Set Appropiate Message
              l_progress := 'WMSINB-14926';
              RAISE FND_API.G_EXC_ERROR;
          End if;

          PackUnpack_wrapper( x_return_status               => x_return_status
                           ,x_msg_count                   => x_msg_count
                           ,x_msg_data                    => x_msg_data
                           ,p_lot_control_code            => l_lot_control_code
                           ,p_serial_control_code         => l_serial_control_code
                           ,p_product_txn_id              => p_txn_id
                           ,p_product_code                => 'RCV'
                           ,p_lpn_id                      => l_rti_rec.lpn_id
                           ,p_content_lpn_id              => null
                           ,p_content_item_id             => l_rti_rec.item_id
                           ,p_content_item_desc           => l_rti_rec.item_description
                           ,p_revision                    => l_rti_rec.item_revision
                           ,p_primary_quantity            => l_rti_rec.primary_quantity
                           ,p_primary_uom                 => l_primary_uom
                           ,p_organization_id             => l_rti_rec.to_organization_id
                           ,p_operation                   => 1
                           ,p_cost_group_id               => null
                           ,p_source_type_id              => 1
                           ,p_source_header_id            => null --l_rti_rec.shipment_header_id
                           ,p_source_name                 => null -- l_rti_rec.shipment_num
                           ,p_source_line_id              => NULL
                           ,p_source_line_detail_id       => NULL
                           -- OPMConvergence
                           ,p_sec_quantity          => l_rti_rec.secondary_quantity
                           ,p_sec_uom               => l_sec_uom_code
                           -- OPMConvergence
                           -- *R12* --
                           ,p_txn_quantity          => l_rti_rec.quantity
                           ,p_txn_uom_code          => l_rti_rec.uom_code
                           -- *R12 *--
          );

          -- Check the error status from the above call
          if x_return_status <> G_RET_STS_SUCCESS Then
              --  Review Late Set Appropiate Message
              l_progress := 'WMSINB-14957';
              RAISE FND_API.G_EXC_ERROR;
          End if;
       End if; --l_rti_rec.lpn_id IS NOT NULL THEN


       if l_serial_control_code not in (1,6) then
	   --bug10298326 for serial control items where serial number is not defined, serial_summary_entry is set as 2...need to update to 1
	   --this happens in case of ASN import.
	   update wms_lpn_contents
	   set serial_summary_entry = 1
	   where parent_lpn_id = l_rti_rec.lpn_id
	   and inventory_item_id = l_rti_rec.item_id
	   and organization_id = l_rti_rec.to_organization_id
	   and serial_summary_entry = 2;

		--Serial status update is required at this point - bug 3487843
          l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                            , p_auto_transact_code  => l_rti_rec.auto_transact_code
                            , p_parent_transaction_type => l_parent_txn_type
                            , p_parent_parent_txn_type  => l_parent_parent_txn_type
                            , p_quantity => l_rti_rec.primary_quantity);



          --Bug #4337726
          --For a ship transaction with auto transact code 'RECEIVE', set
          --inspection status based on routing header id.
          IF ( (NVL(l_rti_rec.auto_transact_code, '@#$#$@') = 'RECEIVE') AND
               (NVL(l_rti_rec.routing_header_id, 1) = 2)
             ) THEN
            l_inspection_status := 1;
          ELSE
            l_inspection_status := null;
          END IF;



          update_serial_status ( p_product_txn_id => p_txn_id
                           ,p_item_id => l_rti_rec.item_id
                           ,p_organization_id => l_rti_rec.to_organization_id
                           ,p_serial_status => l_serial_status
                           ,p_inspection_status => l_inspection_status
                           ,p_sub => l_rti_rec.subinventory
                           ,p_locator_id => l_rti_rec.locator_id
                           ,x_return_status => x_return_status
                           ,x_msg_count => x_msg_count
                           ,x_msg_data => x_msg_data );


          -- Check the error status from the above call
          if x_return_status <> G_RET_STS_SUCCESS Then
              --  Review Late Set Appropiate Message
              l_progress := 'WMSINB-14960';
              RAISE FND_API.G_EXC_ERROR;
          End if;
       End if; --if l_serial_control_code not in (1,6) then

       BEGIN
          SELECT po_header_id
             INTO l_po_header_id
             FROM po_line_locations_all
             WHERE line_location_id = l_rti_rec.po_line_location_id;
       EXCEPTION
          WHEN OTHERS THEN
              IF (l_debug = 1) THEN
                 print_debug('Error retrieving po_header_id',1);
              END IF;
       END ;

       IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - IMPORT ASN. CALLING RSV API',1);
          print_debug('l_rti_rec.transaction_type     => '||l_rti_rec.transaction_type,1);
          print_debug('l_rti_rec.source_document_code => '||l_rti_rec.source_document_code,1);
          print_debug('l_rti_rec.to_organization_id   => '||l_rti_rec.to_organization_id,1);
          print_debug('l_rti_rec.item_id              => '||l_rti_rec.item_id,1);
          print_debug('l_rti_rec.item_revision        => '||l_rti_rec.item_revision,1);
          print_debug('l_rti_rec.project_id           => '||l_rti_rec.project_id,1);
          print_debug('l_rti_rec.task_id              => '||l_rti_rec.task_id,1);
          print_debug('l_rti_rec.primary_uom_code     => '||l_primary_uom,1);
          print_debug('l_rti_rec.primary_quantity     => '||l_rti_rec.primary_quantity,1);
          print_debug('l_po_header_id                 => '||l_po_header_id,1);
          print_debug('l_rti_rec.po_line_location_id  => '||l_rti_rec.po_line_location_id,1);
          print_debug('l_rti_rec.shipment_line_id     => '||l_rti_rec.shipment_line_id,1);
          print_debug('l_rti_rec.asn_line_flag     => '||l_asn_line_flag,1);
       END IF;

       /* Bug 5365065.
       * In the procedure maintain_reservation, we check whether l_asn_line_flag is Y or N.
       * But the table l_mol_res_in was not populated with asn_line_flag. Populated the table
       * with l_asn_line_flag.
       */
       l_mol_res_in(1).transaction_type       := l_rti_rec.transaction_type;
       l_mol_res_in(1).source_document_code   := l_rti_rec.source_document_code;
       l_mol_res_in(1).organization_id        := l_rti_rec.to_organization_id;
       l_mol_res_in(1).inventory_item_id      := l_rti_rec.item_id;
       l_mol_res_in(1).item_revision          := l_rti_rec.item_revision;
       l_mol_res_in(1).project_id             := l_rti_rec.project_id;
       l_mol_res_in(1).task_id                := l_rti_rec.task_id;
       l_mol_res_in(1).primary_uom_code       := l_primary_uom;
       l_mol_res_in(1).primary_qty            := l_rti_rec.primary_quantity;
       l_mol_res_in(1).po_header_id           := l_po_header_id;
       l_mol_res_in(1).po_line_location_id    := l_rti_rec.po_line_location_id;
       l_mol_res_in(1).shipment_line_id       := l_rti_rec.shipment_line_id;
       l_mol_res_in(1).asn_line_flag          := l_asn_line_flag;

       INV_RCV_RESERVATION_UTIL.maintain_reservations
         (x_return_status => x_return_status
          ,x_msg_count     => x_msg_count
          ,x_msg_data      => x_msg_data
          ,x_mol_tb        => l_mol_res_out
          ,p_cas_mol_tb    => l_mol_res_in
          );

       IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - rsv api returns:'||x_return_status,1);
       END IF;

       IF (x_return_status <> g_ret_sts_success) THEN
          l_progress := 'WMSINB-14998';
          RAISE FND_API.G_EXC_ERROR;
       END IF;

   elsif ( l_rti_rec.transaction_type = 'CORRECT' and ( l_parent_txn_type not in ( 'DELIVER','RETURN TO RECEIVING')
          and NOT (l_parent_txn_type in ('RETURN TO VENDOR', 'RETURN TO CUSTOMER') and l_parent_parent_txn_type =
              'DELIVER' )  )
         ) then
       l_progress := 'WMSINB-14965';
       if l_rti_rec.primary_quantity  < 0 then
          if l_rti_rec.transfer_lpn_id is not null then
             -- fix for bug 5530130: if l_rti_rec.transfer_lpn_id <> nvl(l_rti_rec.lpn_id,-9999 ) then
             l_progress := 'WMSINB-14969';
             -- UNPACK TLPN FOR RTI.ITEM, MTLT.LOTNUM, MSNT.FMSERNUM, MSNT.TOSERNUM
             PackUnpack_wrapper( x_return_status               => x_return_status
                                 ,x_msg_count                   => x_msg_count
                                 ,x_msg_data                    => x_msg_data
                                 ,p_lot_control_code            => l_lot_control_code
                                 ,p_serial_control_code         => l_serial_control_code
                                 ,p_product_txn_id              => p_txn_id
                                 ,p_product_code                => 'RCV'
                                 ,p_lpn_id                      => l_rti_rec.transfer_lpn_id
                                 ,p_content_lpn_id              => null
                                 ,p_content_item_id             => l_rti_rec.item_id
                                 ,p_content_item_desc           => l_rti_rec.item_description
                                 ,p_revision                    => l_rti_rec.item_revision
                                 ,p_primary_quantity            => Abs(l_rti_rec.primary_quantity)
                                 ,p_primary_uom                 => l_primary_uom
                                 ,p_organization_id             => l_rti_rec.to_organization_id
                                 ,p_operation                   => 2
                                 ,p_cost_group_id               => null
                                 ,p_source_type_id              => null
                                 ,p_source_header_id            => l_int_trx_id_for_unpack
                                 ,p_source_name                 => l_trx_type_for_unpack
                                 ,p_source_line_id              => NULL
                                 ,p_source_line_detail_id       => NULL
                                 -- OPMConvergence
                                 ,p_sec_quantity          => ABS(l_rti_rec.secondary_quantity)
                                 ,p_sec_uom               => l_sec_uom_code
                                 -- OPMConvergence
                                 -- *R12* --
                                 ,p_txn_quantity          => ABS(l_rti_rec.quantity)
                                 ,p_txn_uom_code          => l_rti_rec.uom_code
                                 -- *R12 *--
             );

             -- Check the error status from the above call
             if x_return_status <> G_RET_STS_SUCCESS Then
                  --  Review Late Set Appropiate Message
                  l_progress := 'WMSINB-14998';
                  RAISE FND_API.G_EXC_ERROR;
             End if;
             -- fix for bug 5530130:End if;  -- END OF FLPN and TLPN Different
          End if; -- END OF l_rti_rec.transfer_lpn_id is not null

          l_progress := 'WMSINB-15004';

          if l_rti_rec.lpn_id is not null then
              -- fix for bug 5530130:if l_rti_rec.lpn_id <> nvl(l_rti_rec.transfer_lpn_id,-9999) then
              l_progress := 'WMSINB-15008';

              IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                           l_rti_rec.lpn_id,
                           l_transactions_enabled_flag))
              THEN
                  IF (l_debug = 1) THEN
                     print_debug('PROCESS_TXN - Expense and Non Expense Items cannot be Mixed in an LPN',1);
                     print_debug('PROCESS_TXN - ORG:LPN:TXNENABLEDFLAG::'||
                            l_rti_rec.to_organization_id||':'||l_rti_rec.lpn_id||
                            ':'||l_transactions_enabled_flag,1);
                  END IF;
                  l_progress := 'WMSINB-15020';

                  --review later
                  RAISE fnd_api.g_exc_error;
              END IF; --IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
              IF l_rti_rec.project_id IS NOT NULL THEN--Added for Bug 7219754,FP:7259462
              IF (validate_pjm_commingle(l_rti_rec.to_organization_id,
                     l_rti_rec.lpn_id,
                     l_rti_rec.project_id,
                     l_rti_rec.task_id))
              THEN
                  IF (l_debug = 1) THEN
                     print_debug('PROCESS_TXN - Project/Task commingling not allowed in LPN:'||l_rti_rec.lpn_id,1);
                  END IF;
                  l_progress := 'WMSINB-15026';

                  RAISE fnd_api.g_exc_error;
              END IF; --IF (!validate_pjm_commingle(l_rti_rec.to_organization_id,
              END IF; -- IF l_rti_rec.project_id IS NOT NULL
              l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                              , p_routing_header_id => l_rti_rec.routing_header_id
                              , p_parent_transaction_type => l_parent_txn_type
                              , p_parent_parent_txn_type => l_parent_parent_txn_type
                              , p_quantity => l_rti_rec.primary_quantity
                              , p_auto_transact_code => l_rti_rec.auto_transact_code);

              l_progress := 'WMSINB-15034';
              update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                            ,p_sub             => l_rti_rec.SUBINVENTORY
                            ,p_locator         => l_rti_rec.LOCATOR_ID
                            ,p_lpn_context     => l_lpn_context
                            ,p_lpn_id          => l_rti_rec.lpn_id
                            ,x_return_status   => x_return_status
                            ,x_msg_count       => x_msg_count
                            ,x_msg_data        => x_msg_data ) ;

              -- Check the error status from the above call
              if x_return_status <> G_RET_STS_SUCCESS Then
                  --  Review Late Set Appropiate Message
                  l_progress := 'WMSINB-15047';
                  RAISE FND_API.G_EXC_ERROR;
              End if;

              PackUnpack_wrapper( x_return_status               => x_return_status
                              ,x_msg_count                   => x_msg_count
                              ,x_msg_data                    => x_msg_data
                              ,p_lot_control_code            => l_lot_control_code
                              ,p_serial_control_code         => l_serial_control_code
                              ,p_product_txn_id              => p_txn_id
                              ,p_product_code                => 'RCV'
                              ,p_lpn_id                      => l_rti_rec.lpn_id
                              ,p_content_lpn_id              => null
                              ,p_content_item_id             => l_rti_rec.item_id
                              ,p_content_item_desc           => l_rti_rec.item_description
                              ,p_revision                    => l_rti_rec.item_revision
                              ,p_primary_quantity            => Abs(l_rti_rec.primary_quantity)
                              ,p_primary_uom                 => l_primary_uom
                              ,p_organization_id             => l_rti_rec.to_organization_id
                              ,p_operation                   => 1
                              ,p_cost_group_id               => null
                              ,p_source_type_id              => null
                              ,p_source_header_id            => null -- l_rti_rec.group_id
                              ,p_source_name                 => null
                              ,p_source_line_id              => NULL
                              ,p_source_line_detail_id       => NULL
                              -- OPMConvergence
                              ,p_sec_quantity          => Abs(l_rti_rec.secondary_quantity)
                              ,p_sec_uom               => l_sec_uom_code
                              -- OPMConvergence
                              -- *R12* --
                              ,p_txn_quantity          => Abs(l_rti_rec.quantity)
                              ,p_txn_uom_code          => l_rti_rec.uom_code
                              -- *R12 *--
              );

              -- Check the error status from the above call
              if x_return_status <> G_RET_STS_SUCCESS Then
                  --  Review Late Set Appropiate Message
                  l_progress := 'WMSINB-15078';
                  RAISE FND_API.G_EXC_ERROR;
              End if;

              -- fix for bug 5530130: END IF; --Endif of FLPN <> TLPN
          End if; -- END OF l_rti_rec.lpn_id is not null
          l_progress := 'WMSINB-15082';
          if l_serial_control_code not in (1,6) then

              l_progress := 'WMSINB-15085';
              l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                            , p_auto_transact_code  => l_rti_rec.auto_transact_code
                            , p_parent_transaction_type => l_parent_txn_type
                            , p_parent_parent_txn_type  => l_parent_parent_txn_type
                            , p_quantity => l_rti_rec.primary_quantity);

              l_progress := 'WMSINB-15092';
              l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                            , p_routing_header_id  => l_rti_rec.routing_header_id
                            , p_parent_transaction_type => l_parent_txn_type
                            , p_parent_parent_txn_type  => l_parent_parent_txn_type
                            , p_quantity => l_rti_rec.primary_quantity);

              l_progress := 'WMSINB-15099';

              update_serial_status ( p_product_txn_id => p_txn_id
                            ,p_item_id => l_rti_rec.item_id
                            ,p_organization_id => l_rti_rec.to_organization_id
                            ,p_serial_status => l_serial_status
                            ,p_inspection_status => l_inspection_status
                            ,p_sub => l_rti_rec.subinventory
                            ,p_locator_id => l_rti_rec.locator_id
                            ,x_return_status => x_return_status
                            ,x_msg_count => x_msg_count
                            ,x_msg_data => x_msg_data );

              -- Check the error status from the above call
              if x_return_status <> G_RET_STS_SUCCESS Then
                 --  Review Late Set Appropiate Message
                 l_progress := 'WMSINB-15113';
                 RAISE FND_API.G_EXC_ERROR;
              End if;
          End if; --if l_serial_control_code not in (1,6) then
       Else -- QTY > 0
          l_progress := 'WMSINB-15120';
          if l_rti_rec.lpn_id is not null then
              if l_rti_rec.lpn_id <> nvl(l_rti_rec.transfer_lpn_id,-9999) then
                 -- UNPACK FLPN FOR RTI.ITEM, MTLT.LOTNUM, MSNT.FMSERNUM, MSNT.TOSERNUM
                 l_progress := 'WMSINB-15124';
                 PackUnpack_wrapper( x_return_status            => x_return_status
                                    ,x_msg_count                   => x_msg_count
                                    ,x_msg_data                    => x_msg_data
                                    ,p_lot_control_code            => l_lot_control_code
                                    ,p_serial_control_code         => l_serial_control_code
                                    ,p_product_txn_id              => p_txn_id
                                    ,p_product_code                => 'RCV'
                                    ,p_lpn_id                      => l_rti_rec.lpn_id
                                    ,p_content_lpn_id              => null
                                    ,p_content_item_id             => l_rti_rec.item_id
                                    ,p_content_item_desc           => l_rti_rec.item_description
                                    ,p_revision                    => l_rti_rec.item_revision
                                    ,p_primary_quantity            => l_rti_rec.primary_quantity
                                    ,p_primary_uom                 => l_primary_uom
                                    ,p_organization_id             => l_rti_rec.to_organization_id
                                    ,p_operation                   => 2
                                    ,p_cost_group_id               => null
                                    ,p_source_type_id              => null
                                    ,p_source_header_id            => l_int_trx_id_for_unpack
                                    ,p_source_name                 => l_trx_type_for_unpack
                                    ,p_source_line_id              => NULL
                                    ,p_source_line_detail_id       => NULL
                                    -- OPMConvergence
                                    ,p_sec_quantity          => l_rti_rec.secondary_quantity
                                    ,p_sec_uom               => l_sec_uom_code
                                    -- OPMConvergence
                                    -- *R12* --
                                    ,p_txn_quantity          => l_rti_rec.quantity
                                    ,p_txn_uom_code          => l_rti_rec.uom_code
                                    -- *R12 *--
                 );

                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-15152';
                     RAISE FND_API.G_EXC_ERROR;
                 End if;

              End if; -- END OF FLPN and TLPN different
          End if; -- END OF l_rti_rec.lpn_id is not null then

          if l_rti_rec.transfer_lpn_id is not null then
              if l_rti_rec.transfer_lpn_id <> nvl(l_rti_rec.lpn_id,-9999 ) then
                 l_progress := 'WMSINB-15161';

                 IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                           l_rti_rec.transfer_lpn_id,
                           l_transactions_enabled_flag))
                 THEN
                     IF (l_debug = 1) THEN
                        print_debug('PROCESS_TXN - Expense and Non Expense Items cannot be Mixed in an LPN',1);
                        print_debug('PROCESS_TXN - ORG:LPN:TXNENABLEDFLAG::'||
                               l_rti_rec.to_organization_id||':'||l_rti_rec.transfer_lpn_id||
                               ':'||l_transactions_enabled_flag,1);
                     END IF;
                     l_progress := 'WMSINB-15173';

                     --review later
                     RAISE fnd_api.g_exc_error;
                 END IF; --IF (validate_mixed_expense_items(l_rti_rec.to_organization_id,
                 IF l_rti_rec.project_id IS NOT NULL THEN--Added for Bug 7219754,FP:7259462
                 IF (validate_pjm_commingle(l_rti_rec.to_organization_id,
                     l_rti_rec.transfer_lpn_id,
                     l_rti_rec.project_id,
                     l_rti_rec.task_id))
                 THEN
                     IF (l_debug = 1) THEN
                        print_debug('PROCESS_TXN - Project/Task commingling not allowed in LPN:'||l_rti_rec.transfer_lpn_id,1);
                     END IF;
                     l_progress := 'WMSINB-15179';

                     RAISE fnd_api.g_exc_error;
                 END IF; --IF (!validate_pjm_commingle(l_rti_rec.to_organization_id,
                 END IF; -- IF l_rti_rec.project_id IS NOT NULL
                 l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                                 , p_routing_header_id => l_rti_rec.routing_header_id
                                 , p_parent_transaction_type => l_parent_txn_type
                                 , p_parent_parent_txn_type => l_parent_parent_txn_type
                                 , p_quantity => l_rti_rec.primary_quantity
                                 , p_auto_transact_code => l_rti_rec.auto_transact_code);

                 l_progress := 'WMSINB-15187';

                 update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                               ,p_sub             => l_rti_rec.SUBINVENTORY
                               ,p_locator         => l_rti_rec.LOCATOR_ID
                               ,p_lpn_context     => l_lpn_context
                               ,p_lpn_id          => l_rti_rec.transfer_lpn_id
                               ,x_return_status   => x_return_status
                               ,x_msg_count       => x_msg_count
                               ,x_msg_data        => x_msg_data ) ;

                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-15201';
                     RAISE FND_API.G_EXC_ERROR;
                 End if;

                 PackUnpack_wrapper( x_return_status               => x_return_status
                                    ,x_msg_count                   => x_msg_count
                                    ,x_msg_data                    => x_msg_data
                                    ,p_lot_control_code            => l_lot_control_code
                                    ,p_serial_control_code         => l_serial_control_code
                                    ,p_product_txn_id              => p_txn_id
                                    ,p_product_code                => 'RCV'
                                    ,p_lpn_id                      => l_rti_rec.transfer_lpn_id
                                    ,p_content_lpn_id              => null
                                    ,p_content_item_id             => l_rti_rec.item_id
                                    ,p_content_item_desc           => l_rti_rec.item_description
                                    ,p_revision                    => l_rti_rec.item_revision
                                    ,p_primary_quantity            => l_rti_rec.primary_quantity
                                    ,p_primary_uom                 => l_primary_uom
                                    ,p_organization_id             => l_rti_rec.to_organization_id
                                    ,p_operation                   => 1
                                    ,p_cost_group_id               => null
                                    ,p_source_type_id              => null
                                    ,p_source_header_id            => null -- l_rti_rec.group_id
                                    ,p_source_name                 => null
                                    ,p_source_line_id              => NULL
                                    ,p_source_line_detail_id       => NULL
                                    -- OPMConvergence
                                    ,p_sec_quantity          => l_rti_rec.secondary_quantity
                                    ,p_sec_uom               => l_sec_uom_code
                                    -- OPMConvergence
                                    -- *R12* --
                                    ,p_txn_quantity          => l_rti_rec.quantity
                                    ,p_txn_uom_code          => l_rti_rec.uom_code
                                    -- *R12 *--
                 );

                 -- Check the error status from the above call
                 if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-15232';
                     RAISE FND_API.G_EXC_ERROR;
                 End if;

              End if; -- END OF FLPN and TLPN different
          End if; -- END OF l_rti_rec.transfer_lpn_id is not null

          if l_serial_control_code not in (1,6) then
              l_serial_status := get_serial_status(p_transaction_type  => l_rti_rec.transaction_type
                               , p_auto_transact_code  => l_rti_rec.auto_transact_code
                               , p_parent_transaction_type => l_parent_txn_type
                               , p_parent_parent_txn_type  => l_parent_parent_txn_type
                               , p_quantity => l_rti_rec.primary_quantity);

              l_inspection_status := get_inspection_status(p_transaction_type  => l_rti_rec.transaction_type
                               , p_routing_header_id  => l_rti_rec.routing_header_id
                               , p_parent_transaction_type => l_parent_txn_type
                               , p_parent_parent_txn_type  => l_parent_parent_txn_type
                               , p_quantity => l_rti_rec.primary_quantity);

              l_progress := 'WMSINB-15249';
              update_serial_status ( p_product_txn_id => p_txn_id
                               ,p_item_id => l_rti_rec.item_id
                               ,p_organization_id => l_rti_rec.to_organization_id
                               ,p_serial_status => l_serial_status
                               ,p_inspection_status => l_inspection_status
                               ,p_sub => l_rti_rec.subinventory
                               ,p_locator_id => l_rti_rec.locator_id
                               ,x_return_status => x_return_status
                               ,x_msg_count => x_msg_count
                               ,x_msg_data => x_msg_data );

              -- Check the error status from the above call
              if x_return_status <> G_RET_STS_SUCCESS Then
                 --  Review Late Set Appropiate Message
                 l_progress := 'WMSINB-15262';
                 RAISE FND_API.G_EXC_ERROR;
              End if;
          End if; --if l_serial_control_code not in (1,6) then

       End if; -- END OF l_rti.rec.primary_quantity  < 0
       --
       --BUG 5095399 (FP of BUG 5095182)
   elsif ((l_rti_rec.transaction_type = 'CORRECT') and  (l_parent_txn_type = 'DELIVER')) THEN
       IF (l_rti_rec.primary_quantity < 0) and  (l_rti_rec.lpn_id is not null) THEN

          IF (l_debug = 1) THEN
            print_debug('PROCESS_TXN - Transaction type CORRECT and Parent DELIVER'||l_lpn_context,1);
          END IF;

          l_progress := 'WMSINB-15265';

          l_lpn_context := get_lpn_context(p_transaction_type => l_rti_rec.transaction_type
                          , p_routing_header_id => l_rti_rec.routing_header_id
                          , p_parent_transaction_type => l_parent_txn_type
                          , p_parent_parent_txn_type => l_parent_parent_txn_type
                          , p_quantity => l_rti_rec.primary_quantity
                          , p_auto_transact_code => l_rti_rec.auto_transact_code);

          l_progress := 'WMSINB-15266';
          IF (l_debug = 1) THEN
             print_debug('PROCESS_TXN - l_lpn_context='||l_lpn_context,1);
          END IF;

          update_lpn_location_context(p_organization_id => l_rti_rec.to_organization_id
                                        ,p_sub             => l_rti_rec.SUBINVENTORY
                                        ,p_locator         => l_rti_rec.LOCATOR_ID
                                        ,p_lpn_context     => l_lpn_context
                                        ,p_lpn_id          => l_rti_rec.lpn_id
                                        ,x_return_status   => x_return_status
                                        ,x_msg_count       => x_msg_count
                                        ,x_msg_data        => x_msg_data ) ;

          l_progress := 'WMSINB-15267';

          if x_return_status <> G_RET_STS_SUCCESS Then
             --  Review Late Set Appropiate Message
             l_progress := 'WMSINB-15268';
             RAISE FND_API.G_EXC_ERROR;
          End if;
       end if; -- IF (l_rti_rec.primary_quantity < 0) and  (l_rti_rec.lpn_id is not null) THEN
       --End bug 5095399
   END IF;


   IF (l_debug = 1) THEN
      print_debug('PROCESS_TXN - Auto Transact code = '|| l_rti_rec.auto_transact_code,1);
   END IF;

   /* Changes for Match Txn as the UOM_CODE might be null in RTI for Match Txn */

   IF l_rti_rec.uom_code is null then
      IF (l_debug = 1) THEN
         print_debug('PROCESS_TXN - Get uom_code from unit_of_measure as Uom_code is null in rti',1);
         print_debug('PROCESS_TXN - Unit_of_measure = '|| l_rti_rec.unit_of_measure,1);
      END IF;

      BEGIN
          SELECT uom_code
          into l_rti_rec.uom_code
          FROM mtl_item_uoms_view
          WHERE organization_id = l_rti_rec.to_organization_id
          AND inventory_item_id =  l_rti_rec.item_id
          AND unit_of_measure = l_rti_rec.unit_of_measure;
      EXCEPTION
          WHEN OTHERS THEN
              IF (l_debug = 1) THEN
                 print_debug('PROCESS_TXN : Error retrieving uom_code', 1);
              END IF;
              l_progress := 'WMSINB-15300';
              RAISE fnd_api.g_exc_error;
      END;
      -- OPMConvergence
      IF l_rti_rec.secondary_unit_of_measure IS NOT NULL THEN

          BEGIN
             SELECT uom_code
             INTO   l_rti_rec.secondary_uom_code
             FROM   mtl_item_uoms_view
             WHERE  organization_id = l_rti_rec.to_organization_id
             AND    inventory_item_id = l_rti_rec.item_id
             AND    unit_of_measure = l_rti_rec.secondary_unit_of_measure;
          EXCEPTION
             WHEN OTHERS THEN
               IF (l_debug = 1) THEN
                 print_debug('CANCEL_ASN: Error retrieving sec_uom_code'||sqlerrm, 1);
               END IF;
               l_progress := 'WMSINB-11211';
               RAISE fnd_api.g_exc_error;
          END;

       END IF;
               -- OPMConvergence
   END IF;

   --BUG 3386801: No need to call maintain_mo_wrapper for CANCEL transactions

   -- 4398331 The CASE FOR SHIP and auto trasact code of DELIVER is also
   -- added for the case below.

   IF (l_rti_rec.transaction_type in ('RECEIVE','DELIVER','SHIP') AND
       Nvl(l_rti_rec.auto_transact_code, '@#$#$@') = 'DELIVER') THEN
      BEGIN
          SELECT requisition_line_id
            INTO l_requisition_line_id
            FROM rcv_transactions
            WHERE interface_transaction_id = p_txn_id;
      EXCEPTION
          WHEN OTHERS THEN
             IF (l_debug = 1) THEN
                print_debug('Error retrieving req_line_id',1);
             END IF;
             l_requisition_line_id := NULL;
      END;

      IF (l_rti_rec.po_line_location_id IS NOT NULL) THEN
         BEGIN
             SELECT po_header_id
               INTO l_po_header_id
               FROM po_line_locations_all
               WHERE line_location_id = l_rti_rec.po_line_location_id;
         EXCEPTION
             WHEN OTHERS THEN
                IF (l_debug = 1) THEN
              print_debug('Error retrieving po_header_id',1);
                END IF;
         END ;
      ELSE
         l_po_header_id := NULL;
      END IF;


      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - DIRECT RECEIPT. CALLING RSV API',1);
          print_debug('l_rti_rec.transaction_type     => '||l_rti_rec.transaction_type,1);
          print_debug('l_rti_rec.to_organization_id   => '||l_rti_rec.to_organization_id,1);
          print_debug('l_rti_rec.item_id              => '||l_rti_rec.item_id,1);
          print_debug('l_rti_rec.item_revision        => '||l_rti_rec.item_revision,1);
          print_debug('l_rti_rec.project_id           => '||l_rti_rec.project_id,1);
          print_debug('l_rti_rec.task_id              => '||l_rti_rec.task_id,1);
          print_debug('l_rti_rec.primary_uom_code     => '||l_primary_uom,1);
          print_debug('l_rti_rec.primary_quantity     => '||l_rti_rec.primary_quantity,1);
          print_debug('l_po_header_id                 => '||l_po_header_id,1);
          print_debug('l_rti_rec.po_line_location_id  => '||l_rti_rec.po_line_location_id,1);
          print_debug('l_rti_rec.shipment_line_id     => '||l_rti_rec.shipment_line_id,1);
          print_debug('l_requisition_line_id          => '||l_requisition_line_id,1);
          print_debug('l_rti_rec.auto_transact_code   => '||l_rti_rec.auto_transact_code,1);
          print_debug('l_rti_rec.asn_line_flag        => '||l_asn_line_flag,1);
      END IF;

      /* Bug 5365065.
       * In the procedure maintain_reservation, we check whether l_asn_line_flag is Y or N.
       * But the table l_mol_res_in was not populated with asn_line_flag. Populated the table
       * with l_asn_line_flag.
       */
      l_mol_res_in(1).transaction_type       := l_rti_rec.transaction_type;
      l_mol_res_in(1).organization_id        := l_rti_rec.to_organization_id;
      l_mol_res_in(1).inventory_item_id      := l_rti_rec.item_id;
      l_mol_res_in(1).item_revision          := l_rti_rec.item_revision;
      l_mol_res_in(1).project_id             := l_rti_rec.project_id;
      l_mol_res_in(1).task_id                := l_rti_rec.task_id;
      l_mol_res_in(1).primary_uom_code       := l_primary_uom;
      l_mol_res_in(1).primary_qty            := l_rti_rec.primary_quantity;
      l_mol_res_in(1).po_header_id           := l_po_header_id;
      l_mol_res_in(1).po_line_location_id    := l_rti_rec.po_line_location_id;
      l_mol_res_in(1).shipment_line_id       := l_rti_rec.shipment_line_id;
      l_mol_res_in(1).requisition_line_id    := l_requisition_line_id;
      l_mol_res_in(1).auto_transact_code     := l_rti_rec.auto_transact_code;
      l_mol_res_in(1).asn_line_flag          := l_asn_line_flag;
       --8833953 added sub/loc
      l_mol_res_in(1).subinventory_code      := l_rti_rec.subinventory;
      l_mol_res_in(1).locator_id             := l_rti_rec.locator_id;
	  --13784450 added lpn
	  l_mol_res_in(1).lpn_id             := l_rti_rec.transfer_lpn_id;
	  print_debug('l_rti_rec.transfer_lpn_id => '||l_rti_rec.transfer_lpn_id,1);
	  print_debug('l_rti_rec.lpn_id          => '||l_rti_rec.lpn_id,1);
	  print_debug('l_mol_res_in(1).lpn_id    => '||l_mol_res_in(1).lpn_id,1);
	  --13784450

      -- 10396979 addition
      if wms_install.check_install(l_wms_return_status,
				    l_wms_msg_count,
				    l_wms_msg_data,
				    l_rti_rec.to_organization_id) then

        print_debug('This is a WMS enabled Org. Changes for bug # 10396979 ',1);
	if l_rti_rec.item_id is not null then
	 begin
	   select LOT_CONTROL_CODE into l_wms_lot
	   from mtl_system_items
	   where inventory_item_id = l_rti_rec.item_id
	   and organization_id = l_rti_rec.to_organization_id
	   and rownum = 1;
         exception
	   when others then
	   print_debug('Error while fetching the lot control code ',1);
         end;

	   if l_wms_lot = 2 then
              print_debug('This is a lot controlled item ',1);
	      begin
	      SELECT lot_number into l_wms_lot_number
	      FROM mtl_transaction_lots_temp
	      WHERE PRODUCT_TRANSACTION_ID = p_txn_id;

	      print_debug('Lot number is :=  '||l_wms_lot_number,1);
              exception
	       when others then
	       print_debug('Error while fetching the lot number ',1);
	      end;
	      l_mol_res_in(1).lot_number             := l_wms_lot_number;
	   end if;
	end if;
      end if;
      -- 10396979 addition

      INV_RCV_RESERVATION_UTIL.maintain_reservations
         (x_return_status => x_return_status
          ,x_msg_count     => x_msg_count
          ,x_msg_data      => x_msg_data
          ,x_mol_tb        => l_mol_res_out
          ,p_cas_mol_tb    => l_mol_res_in
          );

      IF (l_debug = 1) THEN
         print_debug('PROCESS_TXN - rsv api returns:'||x_return_status,1);
      END IF;

      IF (x_return_status <> g_ret_sts_success) THEN
         l_progress := 'WMSINB-14998';
         RAISE FND_API.G_EXC_ERROR;
      END IF;

   ELSIF ((l_rti_rec.transaction_type = 'SHIP'
      AND Nvl(l_rti_rec.auto_transact_code, '@#$#$@') <> 'RECEIVE')
       OR (l_rti_rec.transaction_type = 'CANCEL')
       OR (l_rti_rec.transaction_type IN ('RETURN TO VENDOR','RETURN TO CUSTOMER')
      AND l_parent_txn_type = 'DELIVER')) THEN
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - No Need to call MAINTAIN_MO_WRAPPER for this case ',1);
      END IF;
   ELSE --IF ((l_rti_rec.transaction_type in ('RECEIVE','DELIVER') AND (SHIP with auto transact code as RECEIVE
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - Calling MAINTAIN_MO_WRAPPER for this case ',1);
          print_debug('PROCESS_TXN - Primary Quantity:'||l_rti_rec.primary_quantity,1);
          -- OPMConvergence
          print_debug(l_proc_name||'- secondary Quantity:'||l_rti_rec.secondary_quantity,1);
          -- OPMConvergence
      END IF;

      IF (l_transactions_enabled_flag = 'Y') OR (l_rti_rec.source_document_code = 'PO') THEN --bug9267446

          -- 4398331
          -- For ROI Txns with txn type SHIP and auto transact RECEIVE Pass TRANSFER LPN
          -- AS LPN ID IF THE TRANSFER LPN ID DOES NOT HAVE ANY VALUE.
          -- This needs to be done to satisfy ship and receive in the same LPN.

          IF ( l_rti_rec.transaction_type = 'SHIP'
              AND Nvl(l_rti_rec.auto_transact_code, '@#$#$@') = 'RECEIVE' ) THEN

             if l_rti_rec.transfer_lpn_id is null then
                IF (l_debug = 1) THEN
                   print_debug('PROCESS_TXN - Resetting transfer lpn id for SHIP and auto transact code Receive',1);
                End if;
                l_rti_rec.transfer_lpn_id := l_rti_rec.lpn_id;
             End if;

          END IF;

          maintain_mo_wrapper(p_rti_id => p_txn_id,
                  p_primary_quantity => l_rti_rec.primary_quantity,
                  p_primary_uom_code => l_primary_uom,
                  p_mmtt_temp_id => l_rti_rec.mmtt_temp_id,
                  p_org_id => l_rti_rec.to_organization_id,
                  p_item_id => l_rti_rec.item_id,
                  p_revision => l_rti_rec.item_revision,
                  p_qty => l_rti_rec.quantity,
                  p_uom_code => l_rti_rec.uom_code,
                  p_lpn_id => l_rti_rec.lpn_id,
                  p_transfer_lpn_id => l_rti_rec.transfer_lpn_id,
                  p_lot_control_code => l_lot_control_code,
                  p_serial_number_control_code => l_serial_control_code,
                  p_po_line_location_id => l_rti_rec.po_line_location_id,
                  p_po_distribution_id => l_rti_rec.po_distribution_id,
                  p_shipment_line_id => l_rti_rec.shipment_line_id,
                  p_oe_order_line_id => l_rti_rec.oe_order_line_id,
                  p_routing_header_id => l_rti_rec.routing_header_id,
                  p_subinventory => l_rti_rec.subinventory,
                  p_locator_id => l_rti_rec.locator_id,
                  p_from_subinventory => l_rti_rec.from_subinventory,
                  p_from_locator_id => l_rti_rec.from_locator_id,
                  p_project_id => l_rti_rec.project_id,
                  p_task_id => l_rti_rec.task_id,
                  x_transaction_id => l_rt_transaction_id,
                  x_return_status => x_return_status,
                  x_msg_count => x_msg_count,
                  x_msg_data => x_msg_data,
                  -- OPMConvergence
                  p_sec_qty => l_rti_rec.secondary_quantity,
                  p_sec_uom => l_rti_rec.secondary_uom_code,
                  -- OPMConvergence
                  p_auto_transact_code => l_rti_rec.auto_transact_code,
                  p_asn_line_flag      => l_asn_line_flag,
                  p_validation_flag    => l_rti_rec.validation_flag,
                  -- Bug# 7154105
                  p_req_distribution_id => l_rti_rec.req_distribution_id
          );

          IF x_return_status <> G_RET_STS_SUCCESS THEN
             --  Review Late Set Appropiate Message
             l_progress := 'WMSINB-15321';
             RAISE FND_API.G_EXC_ERROR;
          END IF;
	 ELSE --IF (l_transactions_enabled_flag = 'Y') THEN
          IF (l_debug = 1) THEN
             print_debug('PROCESS_TXN - Expense Item. No MOVE ORDERS.',1);
          END IF;
      END IF; --IF (l_transactions_enabled_flag = 'Y') THEN
   END IF; --IF ((l_rti_rec.transaction_type in ('RECEIVE','DELIVER') AND

   IF (l_rti_rec.transaction_type <> 'DELIVER' AND
       Nvl(l_rti_rec.auto_transact_code, '@#$#$@') <> 'DELIVER'
       AND Nvl(l_parent_txn_type, '@@@@') <> 'DELIVER') THEN
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN - Calling create_lot_serial_history ...',1);
          print_debug('PROCESS_TXN - Interface Txn ID:'||l_rti_rec.interface_transaction_id,1);
          print_debug('PROCESS_TXN - Txn ID:'||l_rt_transaction_id,1);
      END IF;

      create_lot_serial_history(p_prod_txn_tmp_id => l_rti_rec.interface_transaction_id,
               p_prod_txn_id => l_rt_transaction_id,
               x_return_status => x_return_status,
               x_msg_count => x_msg_count,
               x_msg_data => x_msg_data);

      IF (x_return_status <> g_ret_sts_success) THEN
          l_progress := 'WMSINB-15346';
          RAISE fnd_api.g_exc_error;
      END IF;

   END IF; --IF (l_rti_rec.transaction_type <> 'DELIVER' AND

   IF (l_debug = 1) THEN
      print_debug('PROCESS_TXN - Transaction Status: '||x_return_status,1);
     --print_debug('PROCESS_TXN - Transaction processed SUCCESSFULLY... UNBELEIVABLE!!! BELEIVE IT!!!!!',1);
   END IF;

Exception
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
          print_debug('PROCESS_TXN : - Exception :'|| l_progress || ' ' ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
          print_stacked_messages;
      END IF;

      x_msg_data := l_progress;

      IF SQLCODE IS NOT NULL THEN
          inv_mobile_helper_functions.sql_error('inv_rcv_integration_pvt.process_txn',l_progress, SQLCODE);
      END IF;
      -- Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);

END process_txn;

PROCEDURE insert_msni(p_product_transaction_id   IN NUMBER,
                      p_product_code             IN VARCHAR2,
                      p_interface_id             IN NUMBER,
                      p_item_id                  IN NUMBER,
                      p_lot_number               IN VARCHAR2,
                      p_fm_serial_number         IN VARCHAR2,
                      p_to_serial_number         IN VARCHAR2,
                      x_return_status            OUT NOCOPY VARCHAR2,
                      x_msg_count                OUT NOCOPY NUMBER,
                      x_msg_data                 OUT NOCOPY VARCHAR2
		      ) is

			 l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);

			 l_progress VARCHAR2(15) := '10';

			 l_msg_count number;
			 l_msg_data VARCHAR2(2000);

			 l_user_id NUMBER;
			 l_login_id NUMBER;

BEGIN

   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('Inside INSERT_MSNI', 4);
   END IF;


   l_user_id        := fnd_global.user_id;
   l_login_id       := fnd_global.login_id;

   Insert into MTL_SERIAL_NUMBERS_INTERFACE
     (
      transaction_interface_id,
      Source_Code,
      Source_Line_Id,
      Process_flag, --Is this the same process_flag as above?
      Last_Update_Date,
      Last_Updated_By,
      Creation_Date,
      Created_By,
      Fm_Serial_Number,
      To_Serial_Number,
      PRODUCT_CODE,
      PRODUCT_TRANSACTION_ID
      )
     Values
     (
      p_interface_id,            -- transaction_interface_id
      1,                         -- Source_Code,
      -1,                        -- Source_Line_Id,
      1,                         -- Process_flag,
      sysdate,                   -- Last_Update_Date,
      l_User_Id,                 -- Last_Updated_By,
      sysdate,                   -- Creation_Date,
      l_User_Id,                 -- Created_By,
      p_fm_Serial_number,        -- from_Serial_Number,
      p_to_Serial_number,        -- To_Serial_Number
      p_product_code,
      p_product_transaction_id
      );

   IF (l_debug = 1) THEN
      print_debug('INSERT_MSNI Complete without Error', 4);
   END IF;

EXCEPTION
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('insert_msni : - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.insert_msni',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => x_msg_data);

END insert_msni;

PROCEDURE insert_mtli(p_product_transaction_id  IN NUMBER,
                      p_product_code                      IN VARCHAR2,
                      p_interface_id                      IN NUMBER,
                      p_org_id                            IN NUMBER,
                      p_item_id                           IN NUMBER,
                      p_lot_number                        IN VARCHAR2,
                      p_transaction_quantity              IN NUMBER,
                      p_primary_quantity                  IN NUMBER,
                      p_serial_interface_id               IN NUMBER,
                      x_return_status                     OUT NOCOPY VARCHAR2,
                      x_msg_count                         OUT NOCOPY NUMBER,
                      x_msg_data                          OUT NOCOPY VARCHAR2,
                      p_sec_qty                           IN NUMBER DEFAULT NULL
		      ) is

			 cursor mln_csr(p_lot_number VARCHAR2, p_item_id  NUMBER, p_org_id in NUMBER ) IS
			    select  mln.inventory_item_id,
			      mln.lot_number, mln.expiration_date, mln.description, mln.vendor_id,mln.vendor_name,
			      mln.supplier_lot_number, mln.territory_code, mln.grade_code, mln.origination_date,
			      mln.date_code, mln.status_id, mln.change_date, mln.age, mln.retest_date, mln.maturity_date,
			      mln.lot_attribute_category, mln.item_size, mln.color, mln.volume, mln.volume_uom,
			      mln.place_of_origin, mln.best_by_date, mln.length, mln.length_uom, mln.recycled_content,
			      mln.thickness, mln.thickness_uom, mln.width, mln.width_uom, mln.curl_wrinkle_fold,
			      mln.c_attribute1, mln.c_Attribute2, mln.c_attribute3, mln.c_attribute4, mln.c_attribute5,
			      mln.c_attribute6, mln.c_attribute7, mln.c_attribute8, mln.c_attribute9, mln.c_attribute10,
			      mln.c_attribute11, mln.c_attribute12, mln.c_attribute13, mln.c_attribute14, mln.c_attribute15,
			      mln.c_attribute16, mln.c_attribute17, mln.c_attribute18, mln.c_attribute19, mln.c_attribute20,
			      mln.d_attribute1, mln.d_attribute2, mln.d_attribute3, mln.d_attribute4, mln.d_attribute5,
			      mln.d_attribute6, mln.d_attribute7, mln.d_attribute8, mln.d_attribute9, mln.d_attribute10,
			      mln.n_attribute1, mln.n_attribute2, mln.n_attribute3, mln.n_attribute4, mln.n_attribute5,
			      mln.n_attribute6, mln.n_attribute7, mln.n_attribute8, mln.n_attribute9, mln.n_attribute10
			      FROM MTL_LOT_NUMBERS MLN
			      WHERE mln.lot_number = Ltrim(Rtrim(p_lot_number))
			      AND mln.organization_id = p_org_id
			      AND mln.inventory_item_id = p_item_id
			      ;

			 l_mln_rec mln_csr%rowtype;

			 l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);

			 l_progress VARCHAR2(15) := '10';

			 l_msg_count number;
			 l_msg_data VARCHAR2(2000);

			 l_user_id NUMBER;
			 l_login_id NUMBER;

BEGIN

   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('Inside INSERT_MTLI' , 4);
   END IF;


   l_user_id        := fnd_global.user_id;
   l_login_id       := fnd_global.login_id;

   open mln_csr(p_lot_number, p_item_id, p_org_id);
   Fetch mln_csr into l_mln_rec;
   close mln_csr;

   IF (l_debug = 1) THEN
      print_debug('p_item_id = '|| p_item_id , 4);
      print_debug('p_lot_number = '|| p_lot_number , 4);
      print_debug('p_transaction_quantity = '|| p_transaction_quantity , 4);
      print_debug('p_primary_quantity = '|| p_primary_quantity , 4);
   END IF;

   insert into mtl_transaction_lots_interface (
					       TRANSACTION_INTERFACE_ID,
					       SOURCE_CODE,
					       SOURCE_LINE_ID,
					       LAST_UPDATE_DATE,
					       LAST_UPDATED_BY,
					       CREATION_DATE ,
					       CREATED_BY,
					       LAST_UPDATE_LOGIN,
					       REQUEST_ID,
					       PROGRAM_APPLICATION_ID,
					       PROGRAM_ID,
					       PROGRAM_UPDATE_DATE,
					       LOT_NUMBER,
					       LOT_EXPIRATION_DATE,
					       TRANSACTION_QUANTITY,
					       PRIMARY_QUANTITY,
					       SERIAL_TRANSACTION_TEMP_ID,
					       ERROR_CODE,
					       PROCESS_FLAG,
					       DESCRIPTION,
					       VENDOR_NAME,
					       SUPPLIER_LOT_NUMBER,
					       ORIGINATION_DATE,
					       DATE_CODE,
					       GRADE_CODE,
					       CHANGE_DATE,
					       MATURITY_DATE,
					       STATUS_ID,
					       RETEST_DATE,
					       AGE,
					       ITEM_SIZE,
					       COLOR,
					       VOLUME,
					       VOLUME_UOM,
					       PLACE_OF_ORIGIN,
					       BEST_BY_DATE,
					       LENGTH,
     LENGTH_UOM,
     RECYCLED_CONTENT,
     THICKNESS,
     THICKNESS_UOM,
     WIDTH,
     WIDTH_UOM,
     CURL_WRINKLE_FOLD,
     LOT_ATTRIBUTE_CATEGORY,
     C_ATTRIBUTE1,
     C_ATTRIBUTE2,
     C_ATTRIBUTE3,
     C_ATTRIBUTE4,
     C_ATTRIBUTE5,
     C_ATTRIBUTE6,
     C_ATTRIBUTE7,
     C_ATTRIBUTE8,
     C_ATTRIBUTE9,
     C_ATTRIBUTE10,
     C_ATTRIBUTE11,
     C_ATTRIBUTE12,
     C_ATTRIBUTE13,
     C_ATTRIBUTE14,
     C_ATTRIBUTE15,
     C_ATTRIBUTE16,
     C_ATTRIBUTE17,
     C_ATTRIBUTE18,
     C_ATTRIBUTE19,
     C_ATTRIBUTE20,
     D_ATTRIBUTE1,
     D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     VENDOR_ID,
     TERRITORY_CODE,
     PRODUCT_CODE,
     PRODUCT_TRANSACTION_ID,
     SECONDARY_TRANSACTION_QUANTITY
     ) values
     (
      p_interface_id,
      1,
      -1,
      sysdate,
      l_user_id,
      sysdate,
      l_user_id,
      l_login_id,
      null, -- REQUEST_ID
      null, -- PROGRAM_APPLICATION_ID
      null, -- PROGRAM_ID
      null, -- PROGRAM_UPDATE_DATE
      Ltrim(Rtrim(p_lot_number)),
      l_mln_rec.EXPIRATION_DATE,
      P_TRANSACTION_QUANTITY,
      P_PRIMARY_QUANTITY,
      P_serial_interface_id, -- serial_transaction_temp_id
      null, -- ERROR_CODE
      null, -- PROCESS_FLAG,
      l_mln_rec.DESCRIPTION,
      l_mln_rec.VENDOR_NAME,
      l_mln_rec.SUPPLIER_LOT_NUMBER,
      l_mln_rec.ORIGINATION_DATE,
      l_mln_rec.DATE_CODE,
      l_mln_rec.GRADE_CODE ,
      l_mln_rec.CHANGE_DATE,
      l_mln_rec.MATURITY_DATE,
      l_mln_rec.STATUS_ID,
      l_mln_rec.RETEST_DATE,
      l_mln_rec.AGE,
      l_mln_rec.ITEM_SIZE,
      l_mln_rec.COLOR,
      l_mln_rec.VOLUME,
      l_mln_rec.VOLUME_UOM,
      l_mln_rec.PLACE_OF_ORIGIN,
      l_mln_rec.BEST_BY_DATE,
      l_mln_rec.LENGTH,
     l_mln_rec.LENGTH_UOM,
     l_mln_rec.RECYCLED_CONTENT,
     l_mln_rec.THICKNESS,
     l_mln_rec.THICKNESS_UOM,
     l_mln_rec.WIDTH,
     l_mln_rec.WIDTH_UOM,
     l_mln_rec.CURL_WRINKLE_FOLD,
     l_mln_rec.LOT_ATTRIBUTE_CATEGORY,
     l_mln_rec.C_ATTRIBUTE1,
     l_mln_rec.C_ATTRIBUTE2,
     l_mln_rec.C_ATTRIBUTE3,
     l_mln_rec.C_ATTRIBUTE4,
     l_mln_rec.C_ATTRIBUTE5,
     l_mln_rec.C_ATTRIBUTE6,
     l_mln_rec.C_ATTRIBUTE7,
     l_mln_rec.C_ATTRIBUTE8,
     l_mln_rec.C_ATTRIBUTE9,
     l_mln_rec.C_ATTRIBUTE10,
     l_mln_rec.C_ATTRIBUTE11,
     l_mln_rec.C_ATTRIBUTE12,
     l_mln_rec.C_ATTRIBUTE13,
     l_mln_rec.C_ATTRIBUTE14,
     l_mln_rec.C_ATTRIBUTE15,
     l_mln_rec.C_ATTRIBUTE16,
     l_mln_rec.C_ATTRIBUTE17,
     l_mln_rec.C_ATTRIBUTE18,
     l_mln_rec.C_ATTRIBUTE19,
     l_mln_rec.C_ATTRIBUTE20,
     l_mln_rec.D_ATTRIBUTE1 ,
     l_mln_rec.D_ATTRIBUTE2,
     l_mln_rec.D_ATTRIBUTE3,
     l_mln_rec.D_ATTRIBUTE4,
     l_mln_rec.D_ATTRIBUTE5,
     l_mln_rec.D_ATTRIBUTE6,
     l_mln_rec.D_ATTRIBUTE7,
     l_mln_rec.D_ATTRIBUTE8,
     l_mln_rec.D_ATTRIBUTE9,
     l_mln_rec.D_ATTRIBUTE10,
     l_mln_rec.N_ATTRIBUTE1,
     l_mln_rec.N_ATTRIBUTE2,
     l_mln_rec.N_ATTRIBUTE3,
     l_mln_rec.N_ATTRIBUTE4,
     l_mln_rec.N_ATTRIBUTE5,
     l_mln_rec.N_ATTRIBUTE6,
     l_mln_rec.N_ATTRIBUTE7,
     l_mln_rec.N_ATTRIBUTE8,
     l_mln_rec.N_ATTRIBUTE9,
     l_mln_rec.N_ATTRIBUTE10,
     l_mln_rec.VENDOR_ID,
     l_mln_rec.TERRITORY_CODE,
     p_PRODUCT_CODE,
     p_PRODUCT_TRANSACTION_ID,
     p_sec_qty
     );

   IF (l_debug = 1) THEN
      print_debug('INSERT_MTLI  Commplete without Error ' , 4);
   END IF;

EXCEPTION
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('insert_mtli : - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.insert_mtli',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => x_msg_data);

END insert_mtli;

-- Description
-- This API creates RTI rows for LPN contents
--
PROCEDURE create_rti_for_lpn(p_transaction_type         IN        VARCHAR2,
			     p_interface_transaction_id IN        NUMBER,
                             p_lpn_id                   IN        NUMBER,
                             p_item_id                  IN        NUMBER,
                             p_org_id                   IN        NUMBER,
                             p_to_org_id                IN        NUMBER,
                             p_item_desc                IN        VARCHAR2 default null,
                             p_item_revision            IN        VARCHAR2 default null,
                             p_quantity                 IN        NUMBER,
                             p_txn_uom_code             IN        VARCHAR2,
                             p_transfer_lpn_id          IN        NUMBER default null,
                             p_transfer_lpn             IN        VARCHAR2 default null,
                             p_txn_source_id            IN        NUMBER default NULL,
                             p_mmtt_temp_id             IN        NUMBER default NULL,
  p_project_id               IN         NUMBER DEFAULT NULL,
  p_task_id                  IN         NUMBER DEFAULT NULL,
  x_interface_transaction_id OUT NOCOPY NUMBER,
  x_return_status            OUT NOCOPY VARCHAR2,
  x_msg_count                OUT NOCOPY NUMBER,
  x_msg_data                 OUT NOCOPY VARCHAR2)
  is
     l_interface_transaction_id NUMBER;

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';
     l_msg_count number;
     l_msg_data VARCHAR2(2000);


     l_user_id NUMBER;
     l_login_id NUMBER;

     l_sysdate DATE := SYSDATE;
     l_rti_rowid VARCHAR2 (40);
     l_group_id NUMBER;
     l_transaction_type VARCHAR2(100);
     l_transaction_mode VARCHAR2(100);
     l_employee_id NUMBER;
     l_auto_transact_code VARCHAR2 ( 30 );
     l_shipment_header_id NUMBER;
     l_shipment_line_id NUMBER;
     l_source_type_code VARCHAR2(30);
     l_vendor_id NUMBER;
     l_vendor_site_id NUMBER;

     l_primary_uom VARCHAR2(3);
     l_primary_unit_of_measure VARCHAR2(30);
     l_lot_control_code NUMBER;
     l_serial_control_code NUMBER;
     l_unit_of_measure VARCHAR2(30);
     l_primary_qty  NUMBER;
     l_primary_lot_qty  NUMBER;

     l_lot_interface_id NUMBER;
     l_serial_interface_id NUMBER;

     l_serial_interface_inserted BOOLEAN;

     l_source_document_code VARCHAR2(25);
     l_receipt_source_code VARCHAR2(25);

     l_num_serial_inserted NUMBER;

     --< R12 MOAC>
     l_po_header_id       RCV_TRANSACTIONS.PO_HEADER_ID%TYPE;
     l_req_line_id        RCV_TRANSACTIONS.REQUISITION_LINE_ID%TYPE;
     l_oe_order_header_id RCV_TRANSACTIONS.OE_ORDER_HEADER_ID%TYPE;
     l_operating_unit_id  MO_GLOB_ORG_ACCESS_TMP.ORGANIZATION_ID%TYPE;


BEGIN

   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-15799';

   -- Get the New Interface ID
   --
   SELECT primary_uom_code,
     primary_unit_of_measure,
     lot_control_code,
     serial_number_control_code
     INTO  l_primary_uom,
     l_primary_unit_of_measure,
     l_lot_control_code,
     l_serial_control_code
     FROM mtl_system_items
     WHERE inventory_item_id = p_item_id
     AND organization_id = p_to_org_id;

   l_progress := 'WMSINB-15816';

   SELECT unit_of_measure
     into l_unit_of_measure
     FROM mtl_item_uoms_view
     WHERE organization_id = p_to_org_id
     AND inventory_item_id = p_item_id
     AND uom_code = p_txn_uom_code;

   l_progress := 'WMSINB-15825';

   IF (l_debug = 1) THEN
      print_debug('create_rti_for_lpn:p_item_id = '|| p_item_id , 4);
      print_debug('create_rti_for_lpn:l_primary_uom = '|| l_primary_uom , 4);
      print_debug('create_rti_for_lpn:l_primary_unit_of_measure = '|| l_primary_unit_of_measure , 4);
      print_debug('create_rti_for_lpn:l_unit_of_measure = '|| l_unit_of_measure , 4);
      print_debug('create_rti_for_lpn:p_txn_uom_code = '|| p_txn_uom_code , 4);
      print_debug('create_rti_for_lpn:p_txn_source_id = '|| p_txn_source_id , 4);
      print_debug('create_rti_for_lpn:p_mmtt_temp_id = '|| p_mmtt_temp_id , 4);
   END IF;

   IF (p_txn_uom_code <> l_primary_uom) THEN
      l_primary_qty :=  inv_rcv_cache.convert_qty(p_inventory_item_id => p_item_id
				    ,p_from_qty         => p_quantity
				    ,p_from_uom_code    => p_txn_uom_code
				    ,p_to_uom_code      => l_primary_uom
				    );
    ELSE
      l_primary_qty := p_quantity;
   END IF;

   IF (l_debug = 1) THEN
      print_debug('create_rti_for_lpn:Quantity = '|| p_quantity , 4);
      print_debug('create_rti_for_lpn:Primary Qty = '|| l_primary_qty , 4);
   END IF;

   l_progress := 'WMSINB-15850';

   SELECT rcv_transactions_interface_s.NEXTVAL
     INTO   l_interface_transaction_id
     FROM   DUAL;

   l_progress := 'WMSINB-15856';

   l_user_id        := fnd_global.user_id;
   l_login_id       := fnd_global.login_id;

   l_progress := 'WMSINB-15861';

   --get the receipt_source_code and source_document_code
   IF (p_txn_source_id IS NOT NULL) THEN

      /* R12 MOAC : Fetch the po_header_id, requisition_line_id, oe_order_header_id from
      **            rcv_transactions and derive the operating unit id
      */

      BEGIN
	 SELECT rt.source_document_code
	   , rsh.receipt_source_code
           , rt.po_header_id
           , rt.requisition_line_id
           , rt.oe_order_header_id
	   INTO l_source_document_code
	   , l_receipt_source_code
           , l_po_header_id
           , l_req_line_id
           , l_oe_order_header_id
	   FROM rcv_transactions rt
	   , rcv_shipment_headers rsh
	   WHERE rt.transaction_id = p_txn_source_id
	   AND rt.shipment_header_id = rsh.shipment_header_id
	   AND rt.organization_id = p_to_org_id
	   AND exists (SELECT '1' FROM rcv_shipment_lines rsl
		       WHERE rsl.shipment_header_id = rsh.shipment_header_id
		       AND rt.organization_id = rsl.to_organization_id);
      EXCEPTION
	 WHEN no_data_found THEN
	    --raise an error
	    --review later
	    l_progress := 'WMSINB-15882';
	    RAISE fnd_api.g_exc_error;
      END;

      --<R12 MOAC>
      l_operating_unit_id := inv_rcv_common_apis.get_operating_unit_id(
                                          l_receipt_source_code,
                                          l_po_header_id,
                                          l_req_line_id,
                                          l_oe_order_header_id);

    ELSE --IF (p_txn_source_id IS NOT NULL) THEN
      BEGIN

	--following is as per perfomance fix 8113852 / bug 3631289

	 SELECT rsh.receipt_source_code,
	   Decode(rsh.receipt_source_code,'INTERNAL
		  ORDER','REQ','INVENTORY','INVENTORY','VENDOR','PO','CUSTOMER','RMA')
		  INTO l_receipt_source_code
		  , l_source_document_code
	  FROM rcv_shipment_headers rsh, wms_license_plate_numbers wlpn
	WHERE RSH.SHIPMENT_HEADER_ID = WLPN.SOURCE_HEADER_ID
        	AND WLPN.SOURCE_HEADER_ID IS NOT NULL
        	AND wlpn.lpn_id = p_lpn_id
        	AND exists (SELECT '1' FROM rcv_shipment_lines rsl
                        WHERE rsl.shipment_header_id = rsh.shipment_header_id
                        AND wlpn.organization_id = rsl.to_organization_id);
	 EXCEPTION
	      WHEN NO_DATA_FOUND THEN
                BEGIN
		  SELECT rsh.receipt_source_code,
		  Decode(rsh.receipt_source_code,'INTERNAL
			 ORDER','REQ','INVENTORY','INVENTORY','VENDOR','PO','CUSTOMER','RMA')
			 INTO l_receipt_source_code
			 , l_source_document_code
	                FROM rcv_shipment_headers rsh, wms_license_plate_numbers wlpn
			WHERE RSH.SHIPMENT_NUM = WLPN.SOURCE_NAME
	                        AND WLPN.SOURCE_NAME IS NOT NULL
	                        AND wlpn.lpn_id = p_lpn_id
	                        AND exists (SELECT '1' FROM rcv_shipment_lines rsl
                                   WHERE rsl.shipment_header_id = rsh.shipment_header_id
                                        AND wlpn.organization_id = rsl.to_organization_id);

     	--Two exception blocks as such necessary?
	EXCEPTION
		 WHEN no_data_found THEN
	   	 --raise an error
	    	--review later
	    	l_progress := 'WMSINB-15904';
	    RAISE fnd_api.g_exc_error;
	    END;
	END;
   END IF; --IF (p_txn_source_id IS NOT NULL) THEN

   IF (l_debug = 1) THEN
      print_debug('create_rti_for_lpn:SOURCE_DOCUMENT_CODE:'||l_source_document_code,1);
      print_debug('create_rti_for_lpn:RECEIPT_SOURCE_CODE:'||l_receipt_source_code,1);
   END IF;

   l_progress := 'WMSINB-15914';

   -- Fetch the original RTI row
   For l_rcv_transaction_rec in (
				 select group_id                       ,
				 lpn_group_id                   ,
				 transaction_type               ,
				 processing_mode_code           ,
				 processing_request_id          ,
				 item_category                  ,
				 quantity                       ,
				 unit_of_measure                ,
				 uom_code                       ,
				 employee_id                    ,
				 auto_transact_code             ,
				 shipment_header_id             ,
				 shipment_line_id               ,
				 ship_to_location_id            ,
				 primary_quantity               ,
				 primary_unit_of_measure        ,
				 receipt_source_code            ,
				 vendor_id                      ,
				 vendor_site_id                 ,
				 from_Organization_Id           ,
				 to_Organization_Id           ,
				 Routing_Header_Id              ,
				 Routing_Step_Id                ,
				 Source_Document_Code           ,
				 Parent_Transaction_Id          ,
				 Po_Header_Id                   ,
     Po_Revision_Num                ,
     Po_Release_Id                  ,
     Po_Line_Id                     ,
     Po_Line_Location_Id            ,
     Po_Unit_Price                  ,
     Currency_Code                  ,
     Currency_Conversion_Type       ,
     Currency_Conversion_Rate       ,
     Currency_Conversion_Date       ,
     Po_Distribution_Id             ,
     Requisition_Line_Id            ,
     Req_Distribution_Id            ,
     Charge_Account_Id              ,
     Substitute_Unordered_Code      ,
     Receipt_Exception_Flag         ,
     Accrual_Status_Code            ,
     Inspection_Status_Code         ,
     Inspection_Quality_Code        ,
     Destination_Type_Code          ,
     Deliver_To_Person_Id           ,
     Location_Id                    ,
     Deliver_To_Location_Id         ,
     Subinventory                   ,
     Locator_Id                     ,
     Wip_Entity_Id                  ,
     Wip_Line_Id                    ,
     Department_Code                ,
     Wip_Repetitive_Schedule_Id     ,
     Wip_Operation_Seq_Num          ,
     Wip_Resource_Seq_Num           ,
     Bom_Resource_Id                ,
     Shipment_Num                   ,
     Freight_Carrier_Code           ,
     Bill_Of_Lading                 ,
     Packing_Slip                   ,
     Shipped_Date                   ,
     Expected_Receipt_Date          ,
     Actual_Cost                    ,
     Transfer_Cost                  ,
     Transportation_Cost            ,
     Transportation_Account_Id      ,
     Num_Of_Containers              ,
     Waybill_Airbill_Num            ,
     Vendor_Item_Num                ,
     Vendor_Lot_Num                 ,
     Rma_Reference                  ,
     Comments                       ,
     Attribute_Category             ,
     Attribute1                     ,
     Attribute2                     ,
     Attribute3                     ,
     Attribute4                     ,
     Attribute5                     ,
     Attribute6                     ,
     Attribute7                     ,
     Attribute8                     ,
     Attribute9                     ,
     Attribute10                    ,
     Attribute11                    ,
     Attribute12                    ,
     Attribute13                    ,
     Attribute14                    ,
     Attribute15                    ,
     Ship_Head_Attribute_Category   ,
     Ship_Head_Attribute1           ,
     Ship_Head_Attribute2           ,
     Ship_Head_Attribute3           ,
     Ship_Head_Attribute4           ,
     Ship_Head_Attribute5           ,
     Ship_Head_Attribute6           ,
     Ship_Head_Attribute7           ,
     Ship_Head_Attribute8           ,
     Ship_Head_Attribute9           ,
     Ship_Head_Attribute10          ,
     Ship_Head_Attribute11          ,
     Ship_Head_Attribute12          ,
     Ship_Head_Attribute13          ,
     Ship_Head_Attribute14          ,
     Ship_Head_Attribute15          ,
     Ship_Line_Attribute_Category   ,
     Ship_Line_Attribute1           ,
     Ship_Line_Attribute2           ,
     Ship_Line_Attribute3           ,
     Ship_Line_Attribute4           ,
     Ship_Line_Attribute5           ,
     Ship_Line_Attribute6           ,
     Ship_Line_Attribute7           ,
     Ship_Line_Attribute8           ,
     Ship_Line_Attribute9           ,
     Ship_Line_Attribute10          ,
     Ship_Line_Attribute11          ,
     Ship_Line_Attribute12          ,
     Ship_Line_Attribute13          ,
     Ship_Line_Attribute14          ,
     Ship_Line_Attribute15          ,
     Ussgl_Transaction_Code         ,
     Government_Context             ,
     Reason_Id                      ,
     Destination_Context            ,
     Source_Doc_Quantity            ,
     Source_Doc_Unit_Of_Measure     ,
     use_mtl_lot                  ,
     use_mtl_serial               ,
     QA_Collection_Id               ,
     Country_of_Origin_Code         ,
     oe_order_header_id             ,
     oe_order_line_id               ,
     customer_item_num              ,
     customer_id                    ,
     customer_site_id               ,
     put_away_rule_id               ,
     put_away_strategy_id           ,
     lpn_id                         ,
     transfer_lpn_id                ,
     license_plate_number           ,
     transfer_license_plate_number  ,
     cost_group_id                  ,
     mmtt_temp_id                   ,
     mobile_txn                     ,
     transfer_cost_group_id         ,
     secondary_quantity             ,
     secondary_unit_of_measure      ,
     org_id                          --<R12 MOAC>
     from  rcv_transactions_interface rti
     where rti.interface_transaction_id = p_interface_transaction_id )
     Loop
	-- Insert the row
	IF (l_debug = 1) THEN
	   print_debug('create_rti_from_lpn : - Before Inserting into RTI' , 1);
	END IF;


	-- Needs to be reviewed Later
	-- Fetch Details from parent if necessary for Transfer and Deliver Txn
	--
	--
	--   shipment_line_id
	--    shipment_header_id
	--   oe_order_header_id             ,
	--    oe_order_line_id               ,
	--    Wip_Entity_Id                  ,
	--   Wip_Line_Id                    ,
	--   Department_Code                ,
	--   Wip_Repetitive_Schedule_Id     ,
	--   Wip_Operation_Seq_Num          ,
	--   Wip_Resource_Seq_Num           ,
	--   Po_Header_Id                   ,
	--   Po_Revision_Num                ,
	--   Po_Release_Id                  ,
	--   Po_Line_Id                     ,
	--   Po_Line_Location_Id            ,
	--   Po_Unit_Price                  ,
	--   Po_Distribution_Id             ,
	--  Requisition_Line_Id            ,
	--  Req_Distribution_Id            ,
	--
	--

        l_progress := 'WMSINB-16101';

	rcv_trx_interface_insert_pkg.insert_row ( l_rti_rowid,
						  l_interface_transaction_id,
						  l_rcv_transaction_rec.group_id,
						  l_sysdate,
						  l_user_id,
						  l_sysdate,            /* Created Date */
						  l_user_id,            /* Created By */
						  l_login_id,           /* last Update Login */
						  l_rcv_transaction_rec.transaction_type,   /* transaction type */
						  l_sysdate ,  /* transaction date */
						  'RUNNING',            /* Processing status code */
						  l_rcv_transaction_rec.processing_mode_code,
						  /* Processing Request id Debug: Not sure how this is used */
						  l_rcv_transaction_rec.processing_request_id ,
						  'PENDING',            /* Transaction status code */
						  NULL,                 /* item_category */
						  p_quantity,
						  l_unit_of_measure,                  /* unit_of_measure */
						  'RCV',                /* interface source code */
						  NULL,                 /* interface source line id */
						  NULL,                 /* inv_transaction id */
	  p_item_id,
	  p_item_desc,
	  p_item_revision,
	  p_txn_uom_code,       /* uom code */
	  l_rcv_transaction_rec.employee_id,
	  l_rcv_transaction_rec.auto_transact_code, /* Auto transact code */
	  l_rcv_transaction_rec.shipment_header_id, /* shipment header id */
	  l_rcv_transaction_rec.shipment_line_id,   /* shipment line id */
	  l_rcv_transaction_rec.ship_to_location_id,
	  l_primary_qty, /* primary quantity */
	  l_primary_unit_of_measure, /* primary uom */
	  l_receipt_source_code, /* receipt source code */
	  l_rcv_transaction_rec.vendor_id,
	  l_rcv_transaction_rec.vendor_site_id,
	  l_rcv_transaction_rec.from_organization_id,   /* from org id */
	  l_rcv_transaction_rec.to_organization_id,       /* to org id */
	  l_rcv_transaction_rec.routing_header_id,
	  l_rcv_transaction_rec.routing_step_id,           /* routing step id */
	  l_source_document_code, /* source document code */
	  nvl(p_txn_source_id,-1) , /* Parent trx id */
	  l_rcv_transaction_rec.po_header_id,
	  NULL,     /* PO Revision number */
	  l_rcv_transaction_rec.po_release_id,
	  l_rcv_transaction_rec.po_line_id,
	  l_rcv_transaction_rec.po_line_location_id,
	  l_rcv_transaction_rec.po_unit_price,
	  l_rcv_transaction_rec.currency_code, /* Currency_Code */
	  l_rcv_transaction_rec.currency_conversion_type,
	  l_rcv_transaction_rec.currency_conversion_rate,
	  l_rcv_transaction_rec.currency_conversion_date,
	  l_rcv_transaction_rec.po_distribution_id,
	  l_rcv_transaction_rec.Requisition_Line_Id,
	  l_rcv_transaction_rec.req_distribution_id,
	  l_rcv_transaction_rec.charge_account_id,   /* Charge_Account_Id */
	  l_rcv_transaction_rec.substitute_unordered_code, /* Substitute_Unordered_Code */
	  l_rcv_transaction_rec.receipt_exception_flag, /* Receipt_Exception_Flag  forms check box?*/
	  l_rcv_transaction_rec.Accrual_Status_Code,    /* Accrual_Status_Code */
	  l_rcv_transaction_rec.Inspection_Status_Code, /* Inspection_Status_Code */
	  l_rcv_transaction_rec.Inspection_Quality_Code, /* Inspection_Quality_Code */
	  l_rcv_transaction_rec.destination_type_code, /* Destination_Type_Code */
	  l_rcv_transaction_rec.deliver_to_person_id, /* Deliver_To_Person_Id */
	  l_rcv_transaction_rec.location_id,   /* Location_Id */
	  l_rcv_transaction_rec.deliver_to_location_id, /* Deliver_To_Location_Id */
	  l_rcv_transaction_rec.subinventory, /* Subinventory */
	  l_rcv_transaction_rec.locator_id,     /* Locator_Id */
	  l_rcv_transaction_rec.wip_entity_id, /* Wip_Entity_Id */
	  l_rcv_transaction_rec.wip_line_id,   /* Wip_Line_Id */
	  l_rcv_transaction_rec.department_code, /* Department_Code */
	  l_rcv_transaction_rec.Wip_Repetitive_Schedule_Id, /* Wip_Repetitive_Schedule_Id */
	  l_rcv_transaction_rec.Wip_Operation_Seq_Num, /* Wip_Operation_Seq_Num */
	  l_rcv_transaction_rec.Wip_Resource_Seq_Num,
	  l_rcv_transaction_rec.Bom_Resource_Id                ,
	  l_rcv_transaction_rec.Shipment_Num                   ,
	  l_rcv_transaction_rec.Freight_Carrier_Code           ,
	  l_rcv_transaction_rec.Bill_Of_Lading                 ,
	  l_rcv_transaction_rec.Packing_Slip                   ,
	  l_rcv_transaction_rec.Shipped_Date                   ,
	  l_rcv_transaction_rec.Expected_Receipt_Date          ,
	  l_rcv_transaction_rec.Actual_Cost                    ,
	  l_rcv_transaction_rec.Transfer_Cost                  ,
	  l_rcv_transaction_rec.Transportation_Cost            ,
	  l_rcv_transaction_rec.Transportation_Account_Id      ,
	  l_rcv_transaction_rec.Num_Of_Containers              ,
	  l_rcv_transaction_rec.Waybill_Airbill_Num            ,
	  l_rcv_transaction_rec.Vendor_Item_Num                ,
	  l_rcv_transaction_rec.Vendor_Lot_Num                 ,
	  l_rcv_transaction_rec.Rma_Reference                  ,
	  l_rcv_transaction_rec.Comments                       ,
	  l_rcv_transaction_rec.Attribute_Category             ,
	  l_rcv_transaction_rec.Attribute1                     ,
	  l_rcv_transaction_rec.Attribute2                     ,
	  l_rcv_transaction_rec.Attribute3                     ,
	  l_rcv_transaction_rec.Attribute4                     ,
	  l_rcv_transaction_rec.Attribute5                     ,
	  l_rcv_transaction_rec.Attribute6                     ,
	  l_rcv_transaction_rec.Attribute7                     ,
	  l_rcv_transaction_rec.Attribute8                     ,
	  l_rcv_transaction_rec.Attribute9                     ,
	  l_rcv_transaction_rec.Attribute10                    ,
	  l_rcv_transaction_rec.Attribute11                    ,
	  l_rcv_transaction_rec.Attribute12                    ,
	  l_rcv_transaction_rec.Attribute13                    ,
	  l_rcv_transaction_rec.Attribute14                    ,
	  l_rcv_transaction_rec.Attribute15                    ,
	  l_rcv_transaction_rec.Ship_Head_Attribute_Category   ,
	  l_rcv_transaction_rec.Ship_Head_Attribute1           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute2           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute3           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute4           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute5           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute6           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute7           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute8           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute9           ,
	  l_rcv_transaction_rec.Ship_Head_Attribute10          ,
	  l_rcv_transaction_rec.Ship_Head_Attribute11          ,
	  l_rcv_transaction_rec.Ship_Head_Attribute12          ,
	  l_rcv_transaction_rec.Ship_Head_Attribute13          ,
	  l_rcv_transaction_rec.Ship_Head_Attribute14          ,
	  l_rcv_transaction_rec.Ship_Head_Attribute15          ,
	  l_rcv_transaction_rec.Ship_Line_Attribute_Category   ,
	  l_rcv_transaction_rec.Ship_Line_Attribute1           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute2           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute3           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute4           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute5           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute6           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute7           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute8           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute9           ,
	  l_rcv_transaction_rec.Ship_Line_Attribute10          ,
	  l_rcv_transaction_rec.Ship_Line_Attribute11          ,
	  l_rcv_transaction_rec.Ship_Line_Attribute12          ,
	  l_rcv_transaction_rec.Ship_Line_Attribute13          ,
	  l_rcv_transaction_rec.Ship_Line_Attribute14          ,
	  l_rcv_transaction_rec.Ship_Line_Attribute15          ,
	  l_rcv_transaction_rec.Ussgl_Transaction_Code         ,
	  l_rcv_transaction_rec.Government_Context             ,
	  l_rcv_transaction_rec.Reason_Id                      ,
	  l_rcv_transaction_rec.Destination_Context            ,
	  l_rcv_transaction_rec.Source_Doc_Quantity            ,
	  l_rcv_transaction_rec.Source_Doc_Unit_Of_Measure     ,
	  l_rcv_transaction_rec.use_mtl_lot                  ,
	  l_rcv_transaction_rec.use_mtl_serial               ,
	  l_rcv_transaction_rec.QA_Collection_Id               ,
	  l_rcv_transaction_rec.Country_of_Origin_Code         ,
	  l_rcv_transaction_rec.oe_order_header_id             ,
	  l_rcv_transaction_rec.oe_order_line_id               ,
	  l_rcv_transaction_rec.customer_item_num              ,
	  l_rcv_transaction_rec.customer_id                    ,
	  l_rcv_transaction_rec.customer_site_id               ,
	  l_rcv_transaction_rec.put_away_rule_id               ,
	  l_rcv_transaction_rec.put_away_strategy_id           ,
	  p_lpn_id                         ,
	  p_transfer_lpn_id                ,
	  l_rcv_transaction_rec.cost_group_id                  ,
	  p_mmtt_temp_id                                       ,
	  l_rcv_transaction_rec.mobile_txn                     ,
	  l_rcv_transaction_rec.transfer_cost_group_id         ,
	  l_rcv_transaction_rec.secondary_quantity             ,
	  l_rcv_transaction_rec.secondary_unit_of_measure      ,
	  l_rcv_transaction_rec.lpn_group_id,
	  nvl(l_operating_unit_id,l_rcv_transaction_rec.org_id)   --<R12 MOAC>
	  );
	-- *****************
	-- This part may not be nneded when license_plate_numbver, transfer_license_plate_number
	-- is inserted by insert_row itself.
	-- added update to validation_flag
	-- *******************
	update rcv_transactions_interface
	  set transfer_license_plate_number = p_transfer_lpn,
	  validation_flag = 'Y',
	  project_id = p_project_id,
	  task_id = p_task_id
	  where interface_transaction_id = l_interface_transaction_id;

	Exit;
     End loop;

     l_progress := 'WMSINB-16280';

     x_interface_transaction_id := l_interface_transaction_id;


     -- Call the LOT API to insert into LOTS Interface

     l_lot_interface_id := null;
     l_serial_interface_id := null;
     l_serial_interface_inserted := FALSE;

     IF (l_debug = 1) THEN
	print_debug('create_rti_from_lpn : - after Inserting into RTI' , 1);
     END IF;


     l_progress := 'WMSINB-16296';

     IF (p_transaction_type = 'RECEIVE') THEN
	-- Case where EXPLOSION NEEDS TO HAPPEN FROM WLC
	IF (l_debug = 1) THEN
           print_debug('create_rti_from_lpn : - Before Inserting Lots from WLC ' , 1);
	END IF;

        l_progress := 'WMSINB-16604';

	For l_lot_rec in ( select lot_number,
			   uom_code,
			   sum(quantity) quantity
			   from wms_lpn_contents wlc
                           where wlc.inventory_item_id = p_item_id
			   and wlc.organization_id = p_org_id
			   and wlc.parent_lpn_id = p_lpn_id
                           group by lot_number, uom_code )
	  Loop

	     IF (l_lot_rec.uom_code <> l_primary_uom) THEN
		l_primary_lot_qty := inv_rcv_cache.convert_qty(p_inventory_item_id => p_item_id
						 ,p_from_qty         => l_lot_rec.quantity
						 ,p_from_uom_code    => l_lot_rec.uom_code
						 ,p_to_uom_code      => l_primary_uom
						 );
	      ELSE
		l_primary_lot_qty := l_lot_rec.quantity;
	     END IF;

	     if l_lot_interface_id is null then
		SELECT mtl_material_transactions_s.NEXTVAL
                  INTO l_lot_Interface_Id
		  FROM DUAL;
	     End if;

	     l_serial_interface_id := null;

	     -- Call insert MSNI for linked Serials Here
	     For l_serial_rec in ( select msn.serial_number
				   from mtl_serial_numbers msn
				   where msn.lpn_id = p_lpn_id
				   and msn.current_organization_id = p_org_id
				   and msn.lot_number = l_lot_rec.lot_number
				   and msn.inventory_item_id = p_item_id
				   )
	       Loop
		  -- Generate the serial interface id here
		  if l_serial_interface_id is null then
		     SELECT mtl_material_transactions_s.NEXTVAL
		       INTO l_serial_Interface_Id
		       FROM DUAL;
		  End if;

		  insert_msni(p_product_transaction_id   => l_interface_transaction_id,
			      p_product_code             => 'RCV',
			      p_interface_id             => l_serial_Interface_Id,
			      p_item_id                  => p_item_id,
			      p_lot_number               => l_lot_rec.lot_number,
			      p_fm_serial_number         => l_serial_rec.serial_number,
			      p_to_serial_number         => l_serial_rec.serial_number,
			      x_return_status            => x_return_status,
			      x_msg_count                => l_msg_count,
			      x_msg_data                 => l_msg_data
			      );
		  -- Check the error status from the above call
		  if x_return_status <> G_RET_STS_SUCCESS Then
		     -- MSG no new message just add the one on stack
		     --  Review Late Set Appropiate Message
		     exit; -- Exit from the Loop
		  End if;

		  l_serial_interface_inserted := TRUE;

	       End Loop;

	       insert_mtli(p_product_transaction_id   => l_interface_transaction_id,
			   p_product_code             => 'RCV',
			   p_interface_id             => l_lot_Interface_Id,
			   p_org_id                   => p_org_id,
			   p_item_id                  => p_item_id,
			   p_lot_number               => l_lot_rec.lot_number,
			   p_transaction_quantity     => l_lot_rec.quantity,
			   p_primary_quantity         => l_primary_lot_qty,
			   p_serial_interface_id      => l_serial_interface_id,
			   x_return_status            => x_return_status,
			   x_msg_count                => l_msg_count,
			   x_msg_data                 => l_msg_data
			   );

	       -- Check the error status from the above call
	       if x_return_status <> G_RET_STS_SUCCESS Then
		  -- MSG no new message just add the one on stack
		  --  Review Late Set Appropiate Message
		  null;
	       End if;
	  End Loop;

          l_progress := 'WMSINB-16693';

	  -- Cases for JUST SERIAL CONTROLLED
	  if (l_serial_interface_inserted <> TRUE ) then

	     For l_serial_rec in ( select msn.serial_number
				   from mtl_serial_numbers msn
				   where msn.lpn_id = p_lpn_id
				   and msn.current_organization_id = p_org_id
				   and msn.inventory_item_id = p_item_id
				   )
	       Loop
		  -- Generate the serial interface id here
		  if l_serial_interface_id is null then
		     SELECT mtl_material_transactions_s.NEXTVAL
		       INTO l_serial_Interface_Id
		       FROM DUAL;
		  End if;

		  insert_msni(p_product_transaction_id   => l_interface_transaction_id,
			      p_product_code             => 'RCV',
			      p_interface_id             => l_serial_Interface_Id,
			      p_item_id                  => p_item_id,
			      p_lot_number               => null,
			      p_fm_serial_number         => l_serial_rec.serial_number,
			      p_to_serial_number         => l_serial_rec.serial_number,
			      x_return_status            => x_return_status,
			      x_msg_count                => l_msg_count,
			      x_msg_data                 => l_msg_data
			      );
		  -- Check the error status from the above call
		  if x_return_status <> G_RET_STS_SUCCESS Then
		     -- MSG no new message just add the one on stack
		     --  Review Late Set Appropiate Message
		     exit; -- Exit from the Loop
		  End if;

		  l_serial_interface_inserted := TRUE;

	       End Loop;
               l_progress := 'WMSINB-16733';
	  End if;
     End if;

     IF (l_debug = 1) THEN
        print_debug('create_rti_from_lpn : - COMPLETED WITH SUCCESS'  , 1);
     END IF;

EXCEPTION
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('create_rti_from_lpn : - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.create_rti_for_lpn',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => x_msg_data);

END create_rti_for_lpn;

PROCEDURE explode_lpn_for_xfer_dlvr(p_transaction_type          IN varchar2
				    ,p_lpn_id                    IN NUMBER
				    ,p_rti_id                   IN NUMBER
				    ,p_rti_lpn_id               IN NUMBER
				    ,p_rti_xfer_lpn_id          IN NUMBER
				    ,p_rti_xfer_lpn             IN VARCHAR2
				    ,p_rti_to_organization_id   IN NUMBER
				    ,x_return_status            OUT NOCOPY VARCHAR2
				    ,x_msg_count                OUT NOCOPY NUMBER
				    ,x_msg_data                 OUT NOCOPY VARCHAR2
				    ) IS
   CURSOR c_mol_mmtt_ctnt_cur(v_lpn_id NUMBER ) IS
      SELECT mmtt.transaction_temp_id txn_tmp_id
	,    mtrl.lpn_id
	,    mtrl.inventory_item_id
	,    mtrl.organization_id
	,    mtrl.revision
	,    mtrl.lot_number
	,    mtrl.project_id
	,    mtrl.task_id
	,    mtrl.inspection_status
	,    Nvl(mmtt.primary_quantity,mtrl.primary_quantity) prim_qty
	,    Nvl(mmtt.transaction_quantity,mtrl.quantity-Nvl(mtrl.quantity_delivered,0)) txn_qty
	,    Nvl(mmtt.transaction_uom,mtrl.uom_code) txn_uom_code
	,    Nvl(mmtt.secondary_transaction_quantity
	,    mtrl.secondary_quantity-Nvl(mtrl.secondary_quantity_delivered,0)) sec_qty --OPM Convergence
	FROM   mtl_material_transactions_temp mmtt, mtl_txn_request_lines mtrl
	WHERE  mmtt.move_order_line_id (+)= mtrl.line_id
	AND    mtrl.lpn_id                = v_lpn_id
	AND    mtrl.line_status           = 7
	AND    mtrl.quantity-Nvl(mtrl.quantity_delivered,0) > 0
	AND    exists (SELECT 1
		       FROM  mtl_txn_request_headers mtrh
		       WHERE mtrh.move_order_type = inv_globals.g_move_order_put_away
		       AND   mtrh.header_id = mtrl.header_id);

   TYPE mol_mmtt_ctnt_tb_tp IS TABLE OF c_mol_mmtt_ctnt_cur%ROWTYPE;
   l_mol_mmtt_ctnt_tb mol_mmtt_ctnt_tb_tp;

   CURSOR c_rs_cursor(v_lpn_id NUMBER) IS
      SELECT rs.rcv_transaction_id         transaction_id
	,    rs.item_id                inventory_item_id
	,    rs.to_organization_id     organization_id
	,    rs.item_revision          revision
	,    Decode(rls.lot_num
		    ,NULL
		    ,rs.quantity
		    ,rls.quantity)     quantity
	,    rs.unit_of_measure        unit_of_measure
	,    rls.lot_num               lot_number
	,    NULL                      serial_number
	,    Decode(rt.routing_header_id
		    ,2
		    ,Decode(rt.inspection_status_code
			    -- Modified for the bug #: 6598429
			    -- ,'ACCEPT'
			    ,'ACCEPTED'
                            -- End of bug #: 6598429
			    ,2
			    ,Decode(rt.inspection_status_code
				   -- Modified for the bug #: 6598429
				   -- ,'REJECT'
				   ,'REJECTED'
				   -- End of bug #: 6598429
				   ,3
				    ,Decode(rt.inspection_status_code
					    ,'NOT INSPECTED'
					    ,1
					    ,0)
				    )
			    )
		    , NULL) inspection_status
	,    rt.project_id             project_id
	,    rt.task_id                task_id
	FROM rcv_supply rs
	,    rcv_lots_supply rls
	,    rcv_transactions rt
	WHERE rs.lpn_id = v_lpn_id
	AND   rs.rcv_transaction_id = rls.transaction_id (+)
	AND   rs.supply_type_code = 'RECEIVING'
	AND   rs.rcv_transaction_id = rt.transaction_id
	AND   NOT exists (SELECT 1
			  FROM   rcv_serials_supply rss
			  WHERE  rss.transaction_id = rs.rcv_transaction_id)
	UNION
	SELECT rs.rcv_transaction_id     transaction_id
	,      rs.item_id                inventory_item_id
	,      rs.to_organization_id     organization_id
	,      rs.item_revision          revision
	,      1
	,      rs.unit_of_measure        unit_of_measure
	,      rss.lot_num               lot_number
	,      rss.serial_num            serial_number
	,      Decode(rt.routing_header_id
		      ,2
		      ,Decode(rt.inspection_status_code
			      -- Modified for the bug #: 6598429
			      -- ,'ACCEPT'
			       ,'ACCEPTED'
                              -- End of bug #: 6598429
			      ,2
			      ,Decode(rt.inspection_status_code
				      -- Modified for the bug #: 6598429
                                      -- ,'REJECT'
				      ,'REJECTED'
                                      -- End of bug #: 6598429
				      ,3
				      ,Decode(rt.inspection_status_code
					      ,'NOT INSPECTED'
					      ,1
					      ,0)
				      )
			      )
		      , NULL) inspection_status
	,    rt.project_id             project_id
	,    rt.task_id                task_id
	FROM rcv_supply rs
	,    rcv_serials_supply rss
	,    rcv_transactions rt
	WHERE rs.lpn_id = v_lpn_id
	AND   rs.rcv_transaction_id = rss.transaction_id
	AND   rs.supply_type_code = 'RECEIVING'
	AND   rs.rcv_transaction_id = rt.transaction_id;


   TYPE rs_tb_tp IS TABLE OF c_rs_cursor%ROWTYPE;
   l_rs_tb rs_tb_tp;

   l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
   l_progress VARCHAR2(15) := '10';
   l_return_status VARCHAR2(1);
   l_msg_count     NUMBER;
   l_msg_data      VARCHAR2(2000);
   l_rs_index NUMBER;
   l_next_rs_index NUMBER;
   l_qty_to_match NUMBER;
   l_rs_uom_code  VARCHAR2(3);
   l_prim_uom_code VARCHAR2(3);
   l_avail_rs_qty NUMBER;
   l_avail_rs_prim_qty NUMBER;
   l_mmtt_to_insert NUMBER;
   l_qty_to_insert  NUMBER;
   l_xfer_lpn_id_to_insert NUMBER;
   l_xfer_lpn_to_insert VARCHAR2(30);
   l_transaction_id NUMBER;
   l_lot_interface_id NUMBER;
   l_serial_interface_id NUMBER;
   l_prim_qty_to_insert NUMBER;
   l_rti_index NUMBER;
   l_rti_serial_index NUMBER;
   l_sn_ctrl          NUMBER;

   l_serial_found     NUMBER;
   l_delete_rs        NUMBER;

   TYPE num_tb_tp IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

   TYPE rti_rec IS RECORD
     (quantity      NUMBER);
   TYPE rti_tb_tp IS TABLE OF rti_rec INDEX BY BINARY_INTEGER;
   l_rti_tb rti_tb_tp;
   TYPE serial_tb IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
   TYPE rti_serial_tb IS TABLE OF serial_tb INDEX BY BINARY_INTEGER;
   l_rti_serial_tb rti_serial_tb;
BEGIN

   IF (l_debug = 1) THEN
      print_debug('Entering explode_lpn_for_xfer_dlvr',4);
      print_debug('p_lpn_id                 => '||p_lpn_id,4);
      print_debug('p_rti_lpn_id             => '||p_rti_lpn_id,4);
      print_debug('p_rti_xfer_lpn_id        => '||p_rti_xfer_lpn_id,4);
      print_debug('p_rti_xfer_lpn           => '||p_rti_xfer_lpn,4);
      print_debug('p_rti_to_organization_id => '||p_rti_to_organization_id,4);
   END IF;

   l_progress := '###';
   OPEN c_mol_mmtt_ctnt_cur(p_lpn_id);
   l_progress := '###';
   FETCH c_mol_mmtt_ctnt_cur bulk collect INTO l_mol_mmtt_ctnt_tb;
   l_progress := '###';
   CLOSE c_mol_mmtt_ctnt_cur;

   IF l_mol_mmtt_ctnt_tb.COUNT = 0 THEN
      IF (l_debug = 1) THEN
	 print_debug('This LPN has no contents.  Returning success',4);
	 RETURN;
      END IF;
    ELSE
      IF (l_debug = 1) THEN
	 print_debug('Number of MOL/MMTT records: '||l_mol_mmtt_ctnt_tb.COUNT,4);
      END IF;
   END IF;

   l_progress := '###';
   OPEN c_rs_cursor(p_lpn_id);
   l_progress := '###';
   FETCH c_rs_cursor bulk collect INTO l_rs_tb;
   l_progress := '###';
   CLOSE c_rs_cursor;
   l_progress := '###';

   IF l_rs_tb.COUNT = 0 THEN
      IF (l_debug = 1) THEN
	 print_debug('There is no RCV records, but LPN has contents.  How?',4);
      END IF;
      RAISE fnd_api.g_exc_error;
    ELSE
      IF (l_debug = 1) THEN
	 print_debug('Number of RCV records: '||l_rs_tb.COUNT,4);
      END IF;
   END IF;

   FOR i IN 1..l_mol_mmtt_ctnt_tb.COUNT LOOP
      IF (l_debug = 1) THEN
	 print_debug('i:'||i||
		     ' item_id:'||l_mol_mmtt_ctnt_tb(i).inventory_item_id||
		     ' revision:'||l_mol_mmtt_ctnt_tb(i).revision||
		     ' lot_num:'||l_mol_mmtt_ctnt_tb(i).lot_number||
		     ' qty:'|| l_mol_mmtt_ctnt_tb(i).txn_qty||
		     ' uom:'|| l_mol_mmtt_ctnt_tb(i).txn_uom_code||
		     ' insect_status:'||l_mol_mmtt_ctnt_tb(i).inspection_status||
		     ' txn_tmp_id:'||l_mol_mmtt_ctnt_tb(i).txn_tmp_id
		     ,4);
      END IF;

      l_progress := '###';
      l_qty_to_match := l_mol_mmtt_ctnt_tb(i).txn_qty;
      l_serial_found := 0;
      l_rs_index     := l_rs_tb.first;
      l_rti_tb.DELETE;
      l_rti_serial_tb.DELETE;

      l_prim_uom_code := inv_rcv_cache.get_primary_uom_code
	                    (l_mol_mmtt_ctnt_tb(i).organization_id
			     ,l_mol_mmtt_ctnt_tb(i).inventory_item_id);
      l_sn_ctrl := inv_rcv_cache.get_sn_ctrl_code
	              (l_mol_mmtt_ctnt_tb(i).organization_id
		       ,l_mol_mmtt_ctnt_tb(i).inventory_item_id);

      LOOP
	 l_progress := '###';
	 EXIT WHEN l_rs_index IS NULL;

	 l_delete_rs    := 0;

	 IF (l_debug = 1) THEN
	    print_debug('l_rs_index:'||l_rs_index||
			' rcv_txn_id:'||l_rs_tb(l_rs_index).transaction_id||
			' item_id:'||l_rs_tb(l_rs_index).inventory_item_id||
			' revision:'||l_rs_tb(l_rs_index).revision||
			' lot_num:'||l_rs_tb(l_rs_index).lot_number||
			' ser_num:'||l_rs_tb(l_rs_index).serial_number||
			' qty:'|| l_rs_tb(l_rs_index).quantity||
			' uom:'|| l_rs_tb(l_rs_index).unit_of_measure||
			' insect_status:'||l_rs_tb(l_rs_index).inspection_status
			,4);
	 END IF;

	    IF NOT (inv_cache.set_item_rec(l_mol_mmtt_ctnt_tb(i).organization_id,l_mol_mmtt_ctnt_tb(i).inventory_item_id)) THEN
           fnd_message.set_name('INV', 'INV_INT_ITMCODE');
           fnd_msg_pub.add;
           RAISE fnd_api.g_exc_unexpected_error;
        END IF;


	 IF (l_mol_mmtt_ctnt_tb(i).organization_id = l_rs_tb(l_rs_index).organization_id
	     AND l_mol_mmtt_ctnt_tb(i).inventory_item_id = l_rs_tb(l_rs_index).inventory_item_id
	     AND (Nvl(l_mol_mmtt_ctnt_tb(i).revision,'#$#') = Nvl(l_rs_tb(l_rs_index).revision,'#$#') OR
		 nvl(inv_cache.item_rec.revision_qty_control_code,1) = 1) --BUG13562127
	     AND Nvl(l_mol_mmtt_ctnt_tb(i).lot_number,'#$#') = Nvl(l_rs_tb(l_rs_index).lot_number,'#$#')
	     AND Nvl(l_mol_mmtt_ctnt_tb(i).inspection_status,0) = Nvl(l_rs_tb(l_rs_index).inspection_status,0)
	     AND Nvl(l_mol_mmtt_ctnt_tb(i).project_id,-1) = Nvl(l_rs_tb(l_rs_index).project_id,-1)
	     AND Nvl(l_mol_mmtt_ctnt_tb(i).task_id,-1) = Nvl(l_rs_tb(l_rs_index).task_id,-1))
	   THEN

	    IF l_rs_tb(l_rs_index).serial_number IS NULL THEN--Non-serialized item

	       BEGIN
		  SELECT uom_code
		    into l_rs_uom_code
		    FROM mtl_item_uoms_view
		    WHERE organization_id = l_rs_tb(l_rs_index).organization_id
		    AND inventory_item_id = l_rs_tb(l_rs_index).inventory_item_id
		    AND unit_of_measure = l_rs_tb(l_rs_index).unit_of_measure;
	       EXCEPTION
		  WHEN OTHERS THEN
		     IF (l_debug = 1) THEN
			print_debug('Error retrieving uom_code', 1);
		     END IF;
		     l_progress := 'WMSINB-11065';
		     RAISE fnd_api.g_exc_error;
	       END;

	       IF l_mol_mmtt_ctnt_tb(i).txn_uom_code <> l_rs_uom_code THEN
		  l_avail_rs_qty := inv_rcv_cache.convert_qty(l_rs_tb(l_rs_index).inventory_item_id
						,l_rs_tb(l_rs_index).quantity
						,l_rs_uom_code
						,l_mol_mmtt_ctnt_tb(i).txn_uom_code);
		ELSE
		  l_avail_rs_qty := l_rs_tb(l_rs_index).quantity;
	       END IF;

	       IF l_qty_to_match > l_avail_rs_qty THEN

		  IF (l_mol_mmtt_ctnt_tb(i).txn_tmp_id IS NOT NULL) then
		     IF (l_mol_mmtt_ctnt_tb(i).txn_uom_code <> l_prim_uom_code) THEN
			l_avail_rs_prim_qty := inv_rcv_cache.convert_qty(l_rs_tb(l_rs_index).inventory_item_id
							   ,l_avail_rs_qty
							   ,l_mol_mmtt_ctnt_tb(i).txn_uom_code
							   ,l_prim_uom_code);
		      ELSE
			l_avail_rs_prim_qty := l_avail_rs_qty;
		     END IF;

		     inv_rcv_integration_apis.split_mmtt
		       (p_orig_mmtt_id      => l_mol_mmtt_ctnt_tb(i).txn_tmp_id
			,p_prim_qty_to_splt => l_avail_rs_prim_qty
			,p_prim_uom_code    => l_prim_uom_code
			,x_new_mmtt_id      => l_mmtt_to_insert
			,x_return_status    => l_return_status
			,x_msg_count        => l_msg_count
			,x_msg_data         => l_msg_data
			);
		   ELSE
		     l_mmtt_to_insert := NULL;
		  END IF;--IF (l_mol_mmtt_ctnt_tb(i).txn_tmp_id IS NOT NULL) then

		  l_qty_to_insert    := l_avail_rs_qty;
		  l_qty_to_match     := l_qty_to_match - l_avail_rs_qty;

		  l_delete_rs := 1;
		ELSE
		  l_mmtt_to_insert   := l_mol_mmtt_ctnt_tb(i).txn_tmp_id;
		  l_qty_to_insert    := l_qty_to_match;
		  l_qty_to_match     := 0;

		  IF l_mol_mmtt_ctnt_tb(i).txn_uom_code <> l_rs_uom_code THEN
		     l_rs_tb(l_rs_index).quantity := l_rs_tb(l_rs_index).quantity -
		                                     inv_rcv_cache.convert_qty
		                                        (l_rs_tb(l_rs_index).inventory_item_id
							 ,l_qty_to_match
							 ,l_mol_mmtt_ctnt_tb(i).txn_uom_code
							 ,l_rs_uom_code);
		   ELSE
		     l_rs_tb(l_rs_index).quantity := l_rs_tb(l_rs_index).quantity-l_qty_to_match;
		  END IF;

		  l_delete_rs := 0;

	       END IF;--IF l_qty_to_match > l_avail_rs_qty THEN

	       IF ( p_lpn_id <> p_rti_lpn_id) then
		  -- Create a new RTI row with flpn=childlpn and tlpn = childlpn;
		  l_xfer_lpn_id_to_insert := p_lpn_id;
		  l_xfer_lpn_to_insert := NULL;
		ELSE
		  -- Create a new RTI row with flpn=childlpn and tlpn = tlpn;
		  l_xfer_lpn_id_to_insert := p_rti_xfer_lpn_id;
		  l_xfer_lpn_to_insert := p_rti_xfer_lpn;
	       END IF;

	       create_rti_for_lpn(p_transaction_type         => p_transaction_type,
				  p_interface_transaction_id => p_rti_id,
				  p_lpn_id                   => l_mol_mmtt_ctnt_tb(i).lpn_id,
				  p_item_id                  => l_mol_mmtt_ctnt_tb(i).inventory_item_id,
				  p_org_id                   => l_mol_mmtt_ctnt_tb(i).organization_id,
				  p_to_org_id                => p_rti_to_organization_id,
				  p_item_desc                => '',
				  p_item_revision            => l_rs_tb(l_rs_index).revision, --BUG13562127
				  p_quantity                 => l_qty_to_insert,
				  p_txn_uom_code             => l_mol_mmtt_ctnt_tb(i).txn_uom_code,
				  p_transfer_lpn_id          => l_xfer_lpn_id_to_insert,
				  p_transfer_lpn             => l_xfer_lpn_to_insert,
				  p_txn_source_id            => l_rs_tb(l_rs_index).transaction_id,
				  p_mmtt_temp_id             => l_mmtt_to_insert,
				  p_project_id               => l_mol_mmtt_ctnt_tb(i).project_id,
				  p_task_id                  => l_mol_mmtt_ctnt_tb(i).task_id,
				  x_interface_transaction_id => l_transaction_id,
		                  x_return_status            => x_return_status,
		                  x_msg_count                => l_msg_count,
		                  x_msg_data                 => l_msg_data
		 );

	       IF  x_return_status <> G_RET_STS_SUCCESS Then
		  -- MSG no new message just add the one on stack
		  -- Check the Error Status from this call
		  l_progress := 'WMSINB-17580';
		  RAISE FND_API.G_EXC_ERROR;
	       END IF;

	       IF (l_mol_mmtt_ctnt_tb(i).lot_number IS NOT NULL) THEN
		  IF l_lot_interface_id IS NULL THEN
		     SELECT mtl_material_transactions_s.NEXTVAL
		       INTO l_lot_interface_id
		       FROM DUAL;
		  END IF;

		  IF (l_mol_mmtt_ctnt_tb(i).txn_uom_code <> l_prim_uom_code) THEN
		     l_prim_qty_to_insert := inv_rcv_cache.convert_qty(l_rs_tb(l_rs_index).inventory_item_id
							,l_qty_to_insert
							,l_mol_mmtt_ctnt_tb(i).txn_uom_code
							,l_prim_uom_code);
		   ELSE
		     l_prim_qty_to_insert := l_qty_to_insert;
		  END IF;


		  insert_mtli(p_product_transaction_id   => l_transaction_id,
			      p_product_code             => 'RCV',
			      p_interface_id             => l_lot_Interface_Id,
			      p_org_id                   => l_mol_mmtt_ctnt_tb(i).organization_id,
			      p_item_id                  => l_mol_mmtt_ctnt_tb(i).inventory_item_id,
			      p_lot_number               => l_mol_mmtt_ctnt_tb(i).lot_number,
			      p_transaction_quantity     => l_qty_to_insert,
			      p_primary_quantity         => l_prim_qty_to_insert,
			      p_serial_interface_id      => NULL ,
			      x_return_status            => l_return_status,
			      x_msg_count                => l_msg_count,
			      x_msg_data                 => l_msg_data
			      );

		  -- Check the error status from the above call
		  IF x_return_status <> G_RET_STS_SUCCESS Then
		     -- MSG no new message just add the one on stack
		     --  Review Late Set Appropiate Message
		     NULL;
		  END IF ;

	       END IF;--IF (l_mol_mmtt_ctnt_tb(i).lot_number IS NOT NULL) THEN

	     ELSE --Item is serial controlled
	       l_serial_found := 1;
	       l_rti_index := l_rs_tb(l_rs_index).transaction_id;

	       IF l_rti_tb.exists(l_rti_index) THEN
		  l_rti_tb(l_rti_index).quantity := l_rti_tb(l_rti_index).quantity + 1;
		ELSE
		  l_rti_tb(l_rti_index).quantity := 1;
	       END IF;

	       IF l_rti_serial_tb.exists(l_rti_index) THEN
		  l_rti_serial_index := l_rti_serial_tb(l_rti_index).COUNT  + 1;
		ELSE
		  l_rti_serial_index := 1;
	       END IF;
	       l_rti_serial_tb(l_rti_index)(l_rti_serial_index) := l_rs_tb(l_rs_index).serial_number;
	       l_qty_to_match := l_qty_to_match - 1;
	       l_delete_rs := 1;

	    END IF;--IF l_rs_tb(l_rs_index).serial_number IS NULL THEN

	    IF (l_delete_rs = 1) THEN
	       l_next_rs_index := l_rs_tb.next(l_rs_index);
	       l_rs_tb.DELETE(l_rs_index);
	       l_rs_index := l_next_rs_index;
	     ELSE
	       l_rs_index := l_rs_tb.next(l_rs_index);
	    END IF;

	    IF (l_qty_to_match <= 0) THEN
	       EXIT;
	    END IF;
	  ELSE
	       l_rs_index := l_rs_tb.next(l_rs_index);
	 END IF;--IF (l_mol_mmtt_ctnt_tb(i).organization_id = l_rs_tb(l_rs_index).organization_id


      END LOOP;--l_rs_index := l_rs_tb.first;-

      IF (l_serial_found = 1) THEN
	 l_serial_interface_id := NULL;
	 l_lot_interface_id := NULL;
	 l_rti_index := l_rti_tb.first;

	 LOOP
	    EXIT WHEN l_rti_index IS NULL OR l_mol_mmtt_ctnt_tb(i).txn_qty <= 0;

	    l_serial_interface_id := NULL;
	    l_lot_interface_id := NULL;

	    IF (l_debug = 1) THEN
	       print_debug('Insert rti with txn_id: '||l_rti_index,4);
	    END IF;

	    IF (l_mol_mmtt_ctnt_tb(i).txn_qty > l_rti_tb(l_rti_index).quantity) THEN
	       IF (l_mol_mmtt_ctnt_tb(i).txn_tmp_id IS NOT NULL) then
		  inv_rcv_integration_apis.split_mmtt
		    (p_orig_mmtt_id      => l_mol_mmtt_ctnt_tb(i).txn_tmp_id
		     ,p_prim_qty_to_splt => l_rti_tb(l_rti_index).quantity
		     ,p_prim_uom_code    => l_prim_uom_code
		     ,x_new_mmtt_id      => l_mmtt_to_insert
		     ,x_return_status    => l_return_status
		     ,x_msg_count        => l_msg_count
		     ,x_msg_data         => l_msg_data
		     );
		ELSE
		  l_mmtt_to_insert := NULL;
	       END IF;

	       l_mol_mmtt_ctnt_tb(i).txn_qty := l_mol_mmtt_ctnt_tb(i).txn_qty - l_rti_tb(l_rti_index).quantity;
	     ELSE
	       l_mmtt_to_insert := l_mol_mmtt_ctnt_tb(i).txn_tmp_id;
	       l_mol_mmtt_ctnt_tb(i).txn_qty := 0;
	    END IF;

	    IF ( p_lpn_id <> p_rti_lpn_id) then
	       -- Create a new RTI row with flpn=childlpn and tlpn = childlpn;
	       l_xfer_lpn_id_to_insert := p_lpn_id;
	       l_xfer_lpn_to_insert := NULL;
	     ELSE
	       -- Create a new RTI row with flpn=childlpn and tlpn = tlpn;
	       l_xfer_lpn_id_to_insert := p_rti_xfer_lpn_id;
	       l_xfer_lpn_to_insert := p_rti_xfer_lpn;
	    END IF;

	    create_rti_for_lpn(p_transaction_type         => p_transaction_type,
			       p_interface_transaction_id => p_rti_id,
			       p_lpn_id                   => l_mol_mmtt_ctnt_tb(i).lpn_id,
			       p_item_id                  => l_mol_mmtt_ctnt_tb(i).inventory_item_id,
			       p_org_id                   => l_mol_mmtt_ctnt_tb(i).organization_id,
			       p_to_org_id                => p_rti_to_organization_id,
			       p_item_desc                => '',
			       p_item_revision            => l_mol_mmtt_ctnt_tb(i).revision,
			       p_quantity                 => l_rti_tb(l_rti_index).quantity,
			       p_txn_uom_code             => l_mol_mmtt_ctnt_tb(i).txn_uom_code,
			       p_transfer_lpn_id          => l_xfer_lpn_id_to_insert,
			       p_transfer_lpn             => l_xfer_lpn_to_insert,
			       p_txn_source_id            => l_rti_index,
			       p_mmtt_temp_id             => l_mmtt_to_insert,
			       p_project_id               => l_mol_mmtt_ctnt_tb(i).project_id,
			       p_task_id                  => l_mol_mmtt_ctnt_tb(i).task_id,
	                       x_interface_transaction_id => l_transaction_id,
	                       x_return_status            => x_return_status,
	                       x_msg_count                => l_msg_count,
	                       x_msg_data                 => l_msg_data
	      );

	    IF  x_return_status <> G_RET_STS_SUCCESS Then
	       -- MSG no new message just add the one on stack
	       -- Check the Error Status from this call
	       l_progress := 'WMSINB-17580';
	       RAISE FND_API.G_EXC_ERROR;
	    END IF;

	    FOR j IN 1..l_rti_serial_tb(l_rti_index).COUNT LOOP
	       IF l_serial_interface_id IS NULL THEN
		  SELECT mtl_material_transactions_s.NEXTVAL
		    INTO l_serial_Interface_Id
		    FROM DUAL;
	       END IF;

	       IF (l_debug = 1) THEN
		  print_debug('Inserting MSNI for serial: '||l_rti_serial_tb(l_rti_index)(j),4);
	       END IF;

	       insert_msni(p_product_transaction_id   => l_transaction_id,
			   p_product_code             => 'RCV',
			   p_interface_id             => l_serial_interface_id,
			   p_item_id                  => l_mol_mmtt_ctnt_tb(i).inventory_item_id,
			   p_lot_number               => l_mol_mmtt_ctnt_tb(i).lot_number,
			   p_fm_serial_number         => l_rti_serial_tb(l_rti_index)(j),
			   p_to_serial_number         => l_rti_serial_tb(l_rti_index)(j),
			   x_return_status            => l_return_status,
			   x_msg_count                => l_msg_count,
			   x_msg_data                 => l_msg_data
		 );

	       -- Check the error status from the above call
	       if x_return_status <> G_RET_STS_SUCCESS Then
		  --  Review Late Set Appropiate Message
		  EXIT; -- Exit from the Loop
	       END IF;
	    END LOOP;--FOR j IN 1..l_rti_serial_tb(l_rti_index).COUNT LOOP

	    IF (l_mol_mmtt_ctnt_tb(i).lot_number IS NOT NULL) THEN
	       IF l_lot_interface_id IS NULL THEN
		  SELECT mtl_material_transactions_s.NEXTVAL
		    INTO l_lot_interface_id
		    FROM DUAL;
	       END IF;

	       IF (l_debug = 1) THEN
		  print_debug('Inserting MTLI for lot: '||l_mol_mmtt_ctnt_tb(i).lot_number||
			      ' qty: '||l_rti_tb(l_rti_index).quantity,4);
	       END IF;

	       insert_mtli(p_product_transaction_id   => l_transaction_id,
			   p_product_code             => 'RCV',
			   p_interface_id             => l_lot_Interface_Id,
			   p_org_id                   => l_mol_mmtt_ctnt_tb(i).organization_id,
			   p_item_id                  => l_mol_mmtt_ctnt_tb(i).inventory_item_id,
			   p_lot_number               => l_mol_mmtt_ctnt_tb(i).lot_number,
			   p_transaction_quantity     => l_rti_tb(l_rti_index).quantity,
			   p_primary_quantity         => l_rti_tb(l_rti_index).quantity,
			   p_serial_interface_id      => l_serial_interface_id,
			   x_return_status            => l_return_status,
			   x_msg_count                => l_msg_count,
			   x_msg_data                 => l_msg_data
			   );

	       -- Check the error status from the above call
	       IF x_return_status <> G_RET_STS_SUCCESS Then
		  -- MSG no new message just add the one on stack
		  --  Review Late Set Appropiate Message
		  NULL;
	       END IF ;
	    END IF;--IF (l_mol_mmtt_ctnt_tb(i).lot_number IS NOT NULL) THEN

	    l_rti_index := l_rti_tb.next(l_rti_index);

	 END LOOP;--l_rti_index := l_rti_tb.first;

	 IF l_qty_to_match > 0 THEN
	    IF (l_debug = 1) THEN
	       print_debug('Have finished looking at RS.  Qty still remaining. how???',4);
	    END IF;
	    RAISE fnd_api.g_exc_error;
	 END IF;

      END IF; --IF (l_serial_found = 1) THEN

   END LOOP; --FOR i IN 1..l_mol_mmtt_ctnt_tb.COUNT LOOP

EXCEPTION
   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('explode_lpn_for_xfer_dlvr : - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
END explode_lpn_for_xfer_dlvr;

-- Description
-- This API create the WLPNI for the VALUES PASSED
-- This is needed only for Changing Parents
PROCEDURE insert_wlpni(              p_LPN_ID                        IN NUMBER ,
                                     p_LICENSE_PLATE_NUMBER          IN VARCHAR2 DEFAULT NULL,
                                     p_PARENT_LPN_ID                 IN NUMBER,
                                     p_PARENT_LICENSE_PLATE_NUMBER   IN VARCHAR2 DEFAULT NULL,
                                     p_REQUEST_ID                    IN NUMBER   DEFAULT NULL,
                                     p_INVENTORY_ITEM_ID             IN NUMBER   DEFAULT NULL,
                                     p_REVISION                      IN VARCHAR2 DEFAULT NULL,
                                     p_LOT_NUMBER                    IN VARCHAR2 DEFAULT NULL,
                                     p_SERIAL_NUMBER                 IN VARCHAR2 DEFAULT NULL,
                                     p_ORGANIZATION_ID               IN NUMBER ,
                                     p_SUBINVENTORY_CODE             IN VARCHAR2 DEFAULT NULL,
				     p_LOCATOR_ID                    IN NUMBER   DEFAULT NULL,
  p_GROSS_WEIGHT_UOM_CODE         IN VARCHAR2 DEFAULT NULL,
  p_GROSS_WEIGHT                  IN NUMBER   DEFAULT NULL,
  p_CONTENT_VOLUME_UOM_CODE       IN VARCHAR2 DEFAULT NULL,
  p_CONTENT_VOLUME                IN NUMBER   DEFAULT NULL,
  p_TARE_WEIGHT_UOM_CODE          IN VARCHAR2 DEFAULT NULL,
  p_TARE_WEIGHT                   IN NUMBER   DEFAULT NULL,
  p_STATUS_ID                     IN NUMBER   DEFAULT NULL,
  p_SEALED_STATUS                 IN NUMBER   DEFAULT NULL,
  p_ATTRIBUTE_CATEGORY            IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE1                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE2                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE3                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE4                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE5                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE6                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE7                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE8                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE9                    IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE10                   IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE11                   IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE12                   IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE13                   IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE14                   IN VARCHAR2 DEFAULT NULL,
  p_ATTRIBUTE15                   IN VARCHAR2 DEFAULT NULL,
  p_COST_GROUP_ID                 IN NUMBER   DEFAULT NULL,
  p_LPN_CONTEXT                   IN NUMBER   DEFAULT NULL,
  p_LPN_REUSABILITY               IN NUMBER   DEFAULT NULL,
  p_OUTERMOST_LPN_ID              IN NUMBER   DEFAULT NULL,
  p_outermost_lpn                 IN VARCHAR2 DEFAULT NULL,
  p_HOMOGENEOUS_CONTAINER         IN NUMBER   DEFAULT NULL,
  p_SOURCE_TYPE_ID                IN NUMBER   DEFAULT NULL,
  p_SOURCE_HEADER_ID              IN NUMBER   DEFAULT NULL,
  p_SOURCE_LINE_ID                IN NUMBER   DEFAULT NULL,
  p_SOURCE_LINE_DETAIL_ID         IN NUMBER   DEFAULT NULL,
  p_SOURCE_NAME                   IN VARCHAR2 DEFAULT NULL,
  p_LPN_GROUP_ID                  IN NUMBER,
  x_return_status                 OUT NOCOPY VARCHAR2,
  x_msg_count                     OUT NOCOPY NUMBER,
  x_msg_data                      OUT NOCOPY VARCHAR2)
  is
     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';
     l_msg_count number;
     l_msg_data VARCHAR2(2000);


     l_sysdate DATE := SYSDATE;
     l_user     NUMBER;
     l_login_id NUMBER;

BEGIN
   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-16824';

   l_user        := fnd_global.user_id;
   l_login_id       := fnd_global.login_id;


   IF (l_debug = 1) THEN
      print_debug('insert_wlpni : - WLPNI for LPNID = ' || p_lpn_id || ' LPN =' ||
		  p_license_plate_number || ' '||  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END IF;

   insert into wms_lpn_interface (
				   LPN_ID                                 ,
				   LICENSE_PLATE_NUMBER                   ,
				   INVENTORY_ITEM_ID                      ,
				   LAST_UPDATE_DATE                       ,
				   LAST_UPDATED_BY                        ,
				   CREATION_DATE                          ,
				   CREATED_BY                             ,
				   LAST_UPDATE_LOGIN                      ,
				   REQUEST_ID                             ,
				   PROGRAM_APPLICATION_ID                 ,
				   PROGRAM_ID                             ,
				   PROGRAM_UPDATE_DATE                    ,
				   REVISION                               ,
				   LOT_NUMBER                             ,
				   SERIAL_NUMBER                          ,
				   ORGANIZATION_ID                        ,
				   SUBINVENTORY_CODE                      ,
				   LOCATOR_ID                             ,
				   PARENT_LPN_ID                          ,
				   PARENT_LICENSE_PLATE_NUMBER            ,
				   GROSS_WEIGHT_UOM_CODE                  ,
     GROSS_WEIGHT                           ,
     CONTENT_VOLUME_UOM_CODE                ,
     CONTENT_VOLUME                         ,
     TARE_WEIGHT_UOM_CODE                   ,
     TARE_WEIGHT                            ,
     STATUS_ID                              ,
     SEALED_STATUS                          ,
     ATTRIBUTE_CATEGORY                     ,
     ATTRIBUTE1                             ,
     ATTRIBUTE2                             ,
     ATTRIBUTE3                             ,
     ATTRIBUTE4                             ,
     ATTRIBUTE5                             ,
     ATTRIBUTE6                             ,
     ATTRIBUTE7                             ,
     ATTRIBUTE8                             ,
     ATTRIBUTE9                             ,
     ATTRIBUTE10                            ,
     ATTRIBUTE11                            ,
     ATTRIBUTE12                            ,
     ATTRIBUTE13                            ,
     ATTRIBUTE14                            ,
     ATTRIBUTE15                            ,
     COST_GROUP_ID                          ,
     LPN_CONTEXT                            ,
     LPN_REUSABILITY                        ,
     OUTERMOST_LPN_ID                       ,
     HOMOGENEOUS_CONTAINER                  ,
     SOURCE_TYPE_ID                         ,
     SOURCE_HEADER_ID                       ,
     SOURCE_LINE_ID                         ,
     SOURCE_LINE_DETAIL_ID                  ,
     SOURCE_NAME                            ,
     SOURCE_GROUP_ID                       )
     values
     (
      p_LPN_ID                                 ,
      p_LICENSE_PLATE_NUMBER                   ,
      p_INVENTORY_ITEM_ID                      ,
      l_sysdate                       ,
      l_user                        ,
      l_sysdate                          ,
      l_user                             ,
      l_login_id                      ,
      p_REQUEST_ID                             ,
      null, --PROGRAM_APPLICATION_ID
      null, -- PROGRAM_ID
      null, -- PROGRAM_UPDATE_DATE
      p_REVISION                               ,
      p_LOT_NUMBER                             ,
      p_SERIAL_NUMBER                          ,
      p_ORGANIZATION_ID                        ,
      p_SUBINVENTORY_CODE                      ,
      p_LOCATOR_ID                             ,
      p_PARENT_LPN_ID                          ,
      p_PARENT_LICENSE_PLATE_NUMBER            ,
      p_GROSS_WEIGHT_UOM_CODE                  ,
     p_GROSS_WEIGHT                           ,
     p_CONTENT_VOLUME_UOM_CODE                ,
     p_CONTENT_VOLUME                         ,
     p_TARE_WEIGHT_UOM_CODE                   ,
     p_TARE_WEIGHT                            ,
     p_STATUS_ID                              ,
     p_SEALED_STATUS                          ,
     p_ATTRIBUTE_CATEGORY                     ,
     p_ATTRIBUTE1                             ,
     p_ATTRIBUTE2                             ,
     p_ATTRIBUTE3                             ,
     p_ATTRIBUTE4                             ,
     p_ATTRIBUTE5                             ,
     p_ATTRIBUTE6                             ,
     p_ATTRIBUTE7                             ,
     p_ATTRIBUTE8                             ,
     p_ATTRIBUTE9                             ,
     p_ATTRIBUTE10                            ,
     p_ATTRIBUTE11                            ,
     p_ATTRIBUTE12                            ,
     p_ATTRIBUTE13                            ,
     p_ATTRIBUTE14                            ,
     p_ATTRIBUTE15                            ,
     p_COST_GROUP_ID                          ,
     p_LPN_CONTEXT                            ,
     p_LPN_REUSABILITY                        ,
     p_OUTERMOST_LPN_ID                       ,
     p_HOMOGENEOUS_CONTAINER                  ,
     p_SOURCE_TYPE_ID                         ,
     p_SOURCE_HEADER_ID                       ,
     p_SOURCE_LINE_ID                         ,
     p_SOURCE_LINE_DETAIL_ID                  ,
     p_SOURCE_NAME                            ,
     p_LPN_GROUP_ID  );

   IF (l_debug = 1) THEN
      print_debug('insert_wlpni : - End of Insertioin in WLPNI for LPNID = ' || p_lpn_id || ' LPN =' ||
		  p_license_plate_number || ' '||  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END IF;

EXCEPTION
   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('insert_wlpni : - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')|| 'Error =' || SQLCODE, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.insert_wlpni',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);

END insert_wlpni;


-- Description
-- This procedure creates a LPN from a WLPNI row
--
PROCEDURE create_lpn_from_wlpni(p_license_plate_number IN VARCHAR2,
                                p_lpn_group_id     IN NUMBER,
                                p_organization_id  IN NUMBER,
                                p_lpn_context      IN NUMBER default 5 , -- defined but not used
                                p_source_header_id IN NUMBER default null ,
                                p_source_type_id   IN NUMBER default null ,
                                x_lpn_id           OUT NOCOPY NUMBER,
                                x_return_status    OUT NOCOPY VARCHAR2,
                                x_msg_count        OUT NOCOPY NUMBER,
                                x_msg_data         OUT NOCOPY VARCHAR2)
  is

     l_license_plate_number  varchar2(30);
     l_subinventory_code     varchar2(30);
     l_locator_id            NUMBER;
     l_cost_group_id         NUMBER;
     l_source_type_id        NUMBER;
     l_source_header_id      NUMBER;
     l_source_name           VARCHAR2(30);
     l_source_line_id        NUMBER;
     l_source_line_detail_id NUMBER;
     l_parent_lpn_id         NUMBER;

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';
     l_msg_count number;
     l_msg_data VARCHAR2(2000);
     l_lpn_id   NUMBER;
     /*Bug 6600013 */
     l_lpn               WMS_CONTAINER_PUB.LPN ;
     l_gross_wt_uom      VARCHAR2(3) := NULL;
     l_gross_wt          NUMBER	 := NULL;
     l_vol_uom           VARCHAR2(3) := NULL;
     l_cont_vol          NUMBER      := NULL;
     l_tare_wt_uom       VARCHAR2(3) := NULL;
     l_tare_wt           NUMBER      := NULL;
     l_container_item_id NUMBER      := NULL;
     /*Bug 6600013 */

BEGIN
   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-17003';

BEGIN
   SELECT DISTINCT
     license_plate_number,
     subinventory_code,
     locator_id,
     cost_group_id,
     source_type_id,
     source_header_id,
     source_name,
     source_line_id,
     source_line_detail_id,
     parent_lpn_id,
    /*Bug 6600013 */
     gross_weight_uom_code,
     gross_weight,
     content_volume_uom_code,
     content_volume,
     tare_weight_uom_code,
     tare_weight ,
     inventory_item_id
     /*Bug 6600013 */
     INTO
     l_license_plate_number,
     l_subinventory_code,
     l_locator_id,
     l_cost_group_id,
     l_source_type_id,
     l_source_header_id,
     l_source_name,
     l_source_line_id,
     l_source_line_detail_id,
     l_parent_lpn_id,
    /*Bug 6600013 */
     l_gross_wt_uom,
     l_gross_wt,
     l_vol_uom ,
     l_cont_vol,
     l_tare_wt_uom,
     l_tare_wt,
     l_container_item_id
     /*Bug 6600013 */
     FROM wms_lpn_interface wlpni
     WHERE wlpni.license_plate_number = p_license_plate_number
     AND wlpni.source_group_id = p_lpn_group_id;
EXCEPTION
   WHEN no_data_found THEN
      IF (l_debug = 1) THEN
	 print_debug('CREATE_LPN_FROM_WLPNI - WLPNI record does not exist for LPN:'||p_license_plate_number,1);
	 print_debug('CREATE_LPN_FROM_WLPNI - WLPNI record does not exist for lpn_group_id:'||p_lpn_group_id,1);
      END IF;
      l_progress := 'WMSINB-17020';
      RAISE fnd_api.g_exc_error;
END;

l_progress := 'WMSINB-17021';
-- Overwrite/ set the source_type_id and source_header_id only if not null
if p_source_header_id is not null then
   l_source_header_id :=  p_source_header_id;
End if;

if p_source_type_id is not null then
   l_source_type_id :=  p_source_type_id;
End if;

l_progress := 'WMSINB-17031';

IF (l_debug = 1) THEN
   print_debug('CREATE_LPN_FROM_WLPNI - LPN:'||p_license_plate_number,1);
   print_debug('CREATE_LPN_FROM_WLPNI - lpn_group_id:'||p_lpn_group_id,1);
   print_debug('CREATE_LPN_FROM_WLPNI - Source header_id:'||l_source_header_id,1);
   print_debug('CREATE_LPN_FROM_WLPNI - Source_type_id:'||l_source_type_id,1);
   print_debug('CREATE_LPN_FROM_WLPNI - Source_name:'||l_source_name,1);
END IF;

-- Call Container API to create LPN
wms_container_pvt.create_lpn(
			     p_api_version           => 1.0,
			     p_init_msg_list         => g_false,
			     p_commit                => g_false,
			     p_validation_level      => fnd_api.g_valid_level_full,
			     x_return_status         => x_return_status,
			     x_msg_count             => l_msg_count,
			     x_msg_data              => l_msg_data,
			     p_lpn                   => l_license_plate_number,
			     p_organization_id       => p_organization_id,
			     p_container_item_id     => l_container_item_id, --6600013
			     p_lot_number            => NULL,
			     p_revision              => NULL,
			     p_serial_number         => NULL,
			     p_subinventory          => l_subinventory_code,
			     p_locator_id            => l_locator_id,
			     p_source                => p_lpn_context, -- Maps to lpn_context of wms_license_plate_number
			     p_cost_group_id         => l_cost_group_id,
			     p_parent_lpn_id         => l_parent_lpn_id,
			     p_source_type_id        => l_source_type_id,
			     p_source_header_id      => l_source_header_id,
  p_source_name           => l_source_name,
  p_source_line_id        => l_source_line_id,
  p_source_line_detail_id => l_source_line_detail_id,
  x_lpn_id                => l_lpn_id );

l_progress := 'WMSINB-17060';

if x_return_status <> G_RET_STS_SUCCESS Then
   -- MSG no new message just add the one on stack
   -- Check the Error Status from this call
   l_progress := 'WMSINB-17065';
   RAISE FND_API.G_EXC_ERROR;
End if;

--Bug#6600013.start of fix
l_progress := 'WMSINB-17070';

IF ( l_container_item_id IS NULL ) THEN

     l_lpn.lpn_id  :=  l_lpn_id ;
     l_lpn.organization_id := p_organization_id ;

     IF ( nvl(l_gross_wt_uom, '###' ) <> '###' ) THEN
        l_lpn.gross_weight_uom_code := l_gross_wt_uom;
     END IF;
     IF  ( nvl(l_gross_wt ,0 ) >  0 ) THEN
        l_lpn.gross_weight := l_gross_wt  ;
     END IF;
     IF (nvl(l_vol_uom,'###') <> '###') THEN
        l_lpn.content_volume_uom_code := l_vol_uom  ;
     END IF;
     IF  ( nvl(l_cont_vol ,0 ) >  0 ) THEN
      l_lpn.content_volume:= l_cont_vol ;
     END IF;
     IF (nvl(l_tare_wt_uom,'###') <> '###') THEN
        l_lpn.tare_weight_uom_code:= l_tare_wt_uom;
     END IF;
     IF  ( nvl(l_tare_wt,0 ) >  0 ) THEN
        l_lpn.tare_weight := l_tare_wt  ;
     END IF;

     IF (l_debug = 1) THEN
	   print_debug('CREATE_LPN_FROM_WLPNI - l_gross_wt_uom:'||l_gross_wt_uom,1);
	   print_debug('CREATE_LPN_FROM_WLPNI - l_gross_wt:'||l_gross_wt,1);
	   print_debug('CREATE_LPN_FROM_WLPNI - l_vol_uom:'||l_vol_uom,1);
	   print_debug('CREATE_LPN_FROM_WLPNI - l_cont_vol:'||l_cont_vol,1);
	   print_debug('CREATE_LPN_FROM_WLPNI - l_tare_wt_uom:'||l_tare_wt_uom,1);
	   print_debug('CREATE_LPN_FROM_WLPNI - l_tare_wt :'||l_tare_wt,1);
     END IF;

     l_progress := 'WMSINB-17075';

     WMS_CONTAINER_PVT.Modify_LPN (
	  p_api_version         => 1.0
	, p_init_msg_list       => fnd_api.g_false
	, p_commit              => fnd_api.g_false
	, p_validation_level    => fnd_api.g_valid_level_full
	, p_lpn                 => l_lpn
	, x_return_status       => x_return_status
	, x_msg_count           => l_msg_count
	, x_msg_data            => l_msg_data
	);

	IF x_return_status <> G_RET_STS_SUCCESS THEN
	   l_progress := 'WMSINB-17080';
	   RAISE FND_API.G_EXC_ERROR;
	END IF;
	IF (l_debug = 1) THEN
	 print_debug('CREATE_LPN_FROM_WLPNI - Updated LPN with weight,volume details ',1);
      END IF;

      l_progress := 'WMSINB-17085';
END IF;
--Bug#6600013.End of fix

x_lpn_id := l_lpn_id;


EXCEPTION
   WHEN fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;
      IF (l_debug = 1) THEN
         print_debug('CREATE_LPN_FROM_WLPNI - Execution Error:'|| l_progress || ':' ||sqlcode, 1);
      END IF;

   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      x_lpn_id := NULL;
      IF (l_debug = 1) THEN
         print_debug('CREATE_LPN_FROM_WLPNI - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.CREATE_LPN_FROM_WLPNI',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => x_msg_data);
END create_lpn_from_wlpni;

Function validate_rs(p_lpn_id         IN NUMBER default null,
                     p_txn_id         IN NUMBER ,
                     x_lpn_id         OUT nocopy NUMBER
		     ) return BOOLEAN
  is

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';
     l_supply_Exists NUMBER;

BEGIN

   select lpn_id
     into x_lpn_id
     from rcv_supply rs
     where rs.supply_source_id = p_txn_id
     and ( (p_lpn_id is not null and rs.lpn_id = p_lpn_id) or (p_lpn_id is null) )
       and rownum = 1 ;

     return TRUE;

EXCEPTION
   WHEN no_data_found THEN
      IF (l_debug = 1) THEN
	 print_debug('validate_rs - No row found for txn/lpn:'||p_txn_id||'/'||p_lpn_id,1);
      END IF;
      RETURN FALSE;
   When others then
      IF (l_debug = 1) THEN
         print_debug('validate_rs - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||' '||sqlcode, 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.validate_rs',l_progress, SQLCODE);
      END IF;
      return FALSE;
End validate_rs;

Function validate_lpn_context(p_transaction_type         IN VARCHAR2,
                              p_auto_transact_code       IN VARCHAR2,
                              p_to_lpn_context           IN NUMBER ) return BOOLEAN
  is

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';

Begin

   -- Validates the TO LPN context for a transaction type

   if p_transaction_type = 'RECEIVE' then
      if (nvl(p_auto_transact_code, 'RECEIVE') <> 'DELIVER') then
	 if p_to_lpn_context not in (G_LPN_CONTEXT_RCV ,G_LPN_CONTEXT_PREGENERATED ) then
	    l_progress := 'WMSINB-17140';
	    RAISE FND_API.G_EXC_ERROR;
	 end if;
       else
	 if p_to_lpn_context not in (G_LPN_CONTEXT_INV , G_LPN_CONTEXT_PREGENERATED ) then
	    l_progress := 'WMSINB-17145';
	    RAISE FND_API.G_EXC_ERROR;
	 end if;
      end if;
   end if;

   if p_transaction_type in ('ACCEPT','REJECT') then
      if p_to_lpn_context not in (G_LPN_CONTEXT_RCV,G_LPN_CONTEXT_PREGENERATED ) then
	 l_progress := 'WMSINB-17153';
	 RAISE FND_API.G_EXC_ERROR;
      end if;
   End if;

   if p_transaction_type = 'DELIVER' then
      if p_to_lpn_context not in (G_LPN_CONTEXT_INV, G_LPN_CONTEXT_PREGENERATED ,G_LPN_CONTEXT_PICKED) then
	 l_progress := 'WMSINB-17160';
	 RAISE FND_API.G_EXC_ERROR;
      end if;
   End if;

   if p_transaction_type = 'TRANSFER' then
      if p_to_lpn_context not in (G_LPN_CONTEXT_PREGENERATED ,G_LPN_CONTEXT_RCV) then
	 l_progress := 'WMSINB-17167';
	 RAISE FND_API.G_EXC_ERROR;
      end if;
   End if;

   if p_transaction_type = 'SHIP' then
      if p_to_lpn_context not in (G_LPN_CONTEXT_PREGENERATED ) then
	 l_progress := 'WMSINB-17174';
	 RAISE FND_API.G_EXC_ERROR;
      end if;
   End if;

   return TRUE;

Exception
   When others then
      --MSG WMS_CONT_INVALID_LPN_CONTEXT
      IF (l_debug = 1) THEN
         print_debug('validate_lpn_context - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.validate_lpn_context',l_progress, SQLCODE);
      END IF;

      fnd_message.set_name('WMS', 'WMS_CONT_INVALID_LPN_CONTEXT');
      fnd_msg_pub.ADD;

      return FALSE;
End validate_lpn_context;

PROCEDURE delete_wlpni(p_lpn_group_id  IN NUMBER,
                       p_lpn_id        IN NUMBER,
                       p_license_plate_number IN VARCHAR2,
		       x_return_status    OUT NOCOPY VARCHAR2,
		       x_msg_count        OUT NOCOPY NUMBER,
		       x_msg_data         OUT NOCOPY VARCHAR2)
  is
Begin
   -- Deletes rows from WLPNI for the lpn_group

   -- Initialize API return status to success
   x_return_status  := g_ret_sts_success;

   delete from wms_lpn_interface where source_group_id = p_lpn_group_id
     and ( ( lpn_id = p_lpn_id ) or (license_plate_number = p_license_plate_number) ) ;

Exception
   When others then null;
End delete_wlpni;

PROCEDURE Explode_lpn_contents(p_lpn_group_id     IN         NUMBER,
			       x_return_status    OUT NOCOPY VARCHAR2,
			       x_msg_count        OUT NOCOPY NUMBER,
			       x_msg_data         OUT NOCOPY VARCHAR2)
  is
     cursor c_explode_lpn is
	select interface_transaction_id
	  ,transaction_type
	  ,item_id
	  ,item_description
	  ,lpn_id
	  ,transfer_lpn_id
	  ,license_plate_number
	  ,transfer_license_plate_number
	  ,quantity
	  ,shipment_header_id
	  ,routing_header_id
	  ,to_organization_id
	  ,from_organization_id
	  from rcv_transactions_interface rti
	  where rti.lpn_group_id = p_lpn_group_id
	  and ( Nvl(rti.item_id,-1) = -1 AND rti.item_description is null)
          -- Bug 3714354
          and ( lpn_id is not null or license_plate_number is not null )
	    order by interface_transaction_id;

	  l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);

	  l_lpn_rec c_explode_lpn%rowtype;

	  l_other_txn_exists NUMBER;

	  l_progress VARCHAR2(15) := '10';

	  -- 1 => Means that only one type of Transaction exists for this lpn_group
	  -- 0 => Means that Multiple  type of Transaction exists for this lpn_group

	  l_no_other_txn_type NUMBER := 0;

	  l_from_lpn_status boolean;
	  l_trasfer_lpn_status boolean;

	  cursor c_child_lpn(p_child_lpn_id NUMBER) is
	     select distinct lpn_id
	       ,license_plate_number
	       from wms_license_plate_numbers
	       connect by prior lpn_id = parent_lpn_id
	       start with lpn_id = p_child_lpn_id
	       ;

	  l_child_lpn_rec c_child_lpn%rowtype;

	  cursor c_lpn_contents(p_child_lpn_id1 NUMBER) is
	     select  wlpn.lpn_id lpn_id
	       ,wlc.inventory_item_id inventory_item_id
	       ,wlc.revision item_revision
	       ,wlc.uom_code mol_uom_code
	       ,NULL mmtt_uom_code
	       ,wlc.organization_id organization_id
	       ,wlc.item_description item_description
	       ,null txn_source_id
	       ,null transaction_temp_id
	       ,NULL project_id
	       ,NULL task_id
	       ,0 mmtt_quantity
	       ,sum(nvl(wlc.quantity,0)) mol_quantity
	       from   wms_license_plate_numbers wlpn,
	       wms_lpn_contents wlc
	       where  wlc.parent_lpn_id = wlpn.lpn_id
	       and    wlpn.lpn_id = p_child_lpn_id1
	       group by
	       wlpn.lpn_id
	       ,wlc.inventory_item_id
	       ,wlc.revision
	       ,wlc.uom_code
	       ,wlc.organization_id
	       ,wlc.item_description
	       ;

	  l_lpn_contents_rec c_lpn_contents%ROWTYPE;

	  cursor c_immediate_child(p_lpn_id1 NUMBER) is
	     select lpn_id
	       ,license_plate_number
	       ,parent_lpn_id
	       ,organization_id
	       from wms_license_plate_numbers
	       where parent_lpn_id = p_lpn_id1;

	  l_immediate_child_rec c_immediate_child%rowtype;

	  l_msg_count number;
	  l_msg_data VARCHAR2(2000);

	  l_lpn_context NUMBER;
	  l_transfer_lpn_context NUMBER;
	  l_transaction_id NUMBER;

	  l_wlpni_exists NUMBER;

	  l_from_lpn_state BOOLEAN;
	  l_to_lpn_state BOOLEAN;

	  l_cur_parent_lpn_id NUMBER;

	  l_wlpn_source_header_id NUMBER;
	  l_xfr_wlpn_source_header_id NUMBER;

	  l_mmtt_qty_mol_uom NUMBER;

BEGIN

   x_return_status := g_ret_sts_success;

   l_progress := 'WMSINB-17350';

   IF (l_debug = 1) THEN
      print_debug('Explode lpn :'|| l_progress || ' ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      print_debug('Explode lpn : lpn_group_id = '|| p_lpn_group_id, 1);
   END If;

   select count(distinct decode(rti.TRANSACTION_TYPE,'ACCEPT','INSPECT TXN','REJECT','INSPECT TXN',rti.TRANSACTION_TYPE))
     into l_other_txn_exists
     from rcv_transactions_interface rti
     where rti.lpn_group_id = p_lpn_group_id
       -- Bug 3714354
       and ( lpn_id is not null or license_plate_number is not null )
     ;

   l_progress := 'WMSINB-17362';

   if l_other_txn_exists > 1 then
      -- Review Later
      -- Set appropiate message DIFFERENT TXN TYPES EXIST FOR THE SAME LPN GROUP
      -- MSG INV_INVALID_LPN_GROUP
      x_return_status := g_ret_sts_error;
      l_progress := 'WMSINB-17369';
      RAISE FND_API.G_EXC_ERROR;
   end if;

   l_progress := 'WMSINB-17373';

   -- Opens Cursor on RTI based on lpn_group_id
   open c_explode_lpn;
   Loop
      fetch c_explode_lpn into l_lpn_rec;
      exit when c_explode_lpn%notfound;
      IF (l_debug = 1) THEN
         print_debug('Explode_lpn_contents: inside Loop for interface_id = :'|| l_lpn_rec.interface_transaction_id, 1);
      END IF;
      -- Check whether the TRANSACTIONS Types are all same for this LPN Group ID otherwise throw error.

      if nvl(l_lpn_rec.quantity,0) <> 0 then
	 --
	 -- Quantity is not null so failure return from Here
	 IF (l_debug = 1) THEN
	    print_debug('Explode_lpn_contents:  Qty is not null for this lpn : FAILURE '|| l_lpn_rec.lpn_id , 1);
	    print_debug('Explode_lpn_contents: Qty is not null for this lpn : FAILURE '|| l_lpn_rec.license_plate_number, 1);
	 END If;


	 l_progress := 'WMSINB-17395';
	 x_return_status := g_ret_sts_error;

	 -- Review Later
	 -- Set appropiate Message

	 exit;
       else
	 if (  l_lpn_rec.lpn_id is null and
	       l_lpn_rec.license_plate_number is null
	       ) then
	    IF (l_debug = 1) THEN
	       print_debug('Explode_lpn_contents:  qty lpn item  all are null so FAILURE', 1);
	    END If;
	    l_progress := 'WMSINB-17409';
	    x_return_status := g_ret_sts_error;
	    -- Review Later
	    -- Set appropiate Message
	    exit;
	 end if;

	 -- Quantity is null so proceed with this row
	 -- **************************************************************
	 -- START CASES  FOR  RECEIPT  TRANSACTION
	 -- **************************************************************

	 --
	 l_progress := 'WMSINB-17422';
	 --

	 l_from_lpn_state := get_lpn_id(l_lpn_rec.lpn_id,
					l_lpn_rec.license_plate_number,
					l_lpn_context,l_cur_parent_lpn_id,
					l_wlpn_source_header_id);

	 if (l_from_lpn_state <> TRUE ) then
	    IF (l_debug = 1) THEN
	       print_debug('Explode_LPN_contents: lpn_id and license_plate number does not exist' , 1);
	    END If;
	    -- MSG no new message just add the one on stack
	    -- Review Later.
	    -- Set Appropiate MESSAGE For ERROR
	    --
	    l_progress := 'WMSINB-17435';
	    RAISE FND_API.G_EXC_ERROR;
	  else
            if  l_lpn_rec.lpn_id is null then -- CASE WHERE THERE IS AN INVALID LPN
	       IF (l_debug = 1) THEN
		  print_debug('Explode_LPN_contents: lpn_id and license_plate number does not exist' , 1);
	       END If;
	       -- MSG no new message just add the one on stack
	       -- Review Later.
	       -- Set Appropiate MESSAGE For ERROR
	       --
	       l_progress := 'WMSINB-17446';
	       RAISE FND_API.G_EXC_ERROR;
            End if;
	 end if;
	 --
	 -- Call get_lpn_id to get the transfer lpn detials
	 --
	 l_progress := 'WMSINB-17453';

	 l_to_lpn_state := get_lpn_id(l_lpn_rec.transfer_lpn_id,
				      l_lpn_rec.transfer_license_plate_number,
				      l_transfer_lpn_context,
				      l_cur_parent_lpn_id,
				      l_xfr_wlpn_source_header_id);

	 if (l_to_lpn_state <> TRUE ) then
	    IF (l_debug = 1) THEN
	       print_debug('Explode_LPN_contents: lpn_id and license_plate number does not exist' , 1);
	    END If;
	    -- MSG no new message just add the one on stack
	    -- EXISTING LPN_ID and LICENSE_PLATE_NUMBER COMBINATION IS INVALID
	    -- Review Later.
	    -- Set Appropiate MESSAGE For ERROR
	    --
	    l_progress := 'WMSINB-17469';
	    RAISE FND_API.G_EXC_ERROR;
	 End if;

	 l_progress := 'WMSINB-17473';

	 if ( l_lpn_rec.transaction_type in ( 'TRANSFER','DELIVER','RECEIVE' )) then
	    IF (l_debug = 1) THEN
	       print_debug('Explode_LPN_contents: For Receive Txn ', 1);
	    END If;
	    open c_child_lpn(l_lpn_rec.lpn_id);
	    Loop
               IF (l_debug = 1) THEN
		  print_debug('Explode_LPN_contents: Inside Child LPN loop lpn_id = ' || l_lpn_rec.lpn_id , 1);
               END If;

               Fetch c_child_lpn into l_child_lpn_rec;
               Exit when c_child_lpn%NotFound;

               IF (l_debug = 1) THEN
		  print_debug('Explode LPN: Inside Child LPN loop lpn_id = ' || l_child_lpn_rec.lpn_id , 1);
               END If;

	       IF l_lpn_rec.transaction_type = 'RECEIVE' THEN
		  OPEN c_lpn_contents(l_child_lpn_rec.lpn_id);
		  LOOP
		     IF (l_debug = 1) THEN
			print_debug('Explode LPN: Inside LPN contents loop for RECEIVE', 1);
		     END If;
		     FETCH c_lpn_contents into l_lpn_contents_rec;
		     EXIT WHEN c_lpn_contents%notfound;
		     l_transaction_id := NULL;

		     IF ( l_child_lpn_rec.lpn_id <> l_lpn_rec.lpn_id) then

			-- Create a new RTI row with flpn=childlpn and tlpn = childlpn;
			-- Review Later
			-- Call create_rti_for_lpn

			l_progress := 'WMSINB-17549';

			create_rti_for_lpn(p_transaction_type         => l_lpn_rec.transaction_type,
					   p_interface_transaction_id => l_lpn_rec.interface_transaction_id,
					   p_lpn_id                   => l_lpn_contents_rec.lpn_id,
					   p_org_id                   => l_lpn_contents_rec.organization_id,
					   p_to_org_id                => l_lpn_rec.to_organization_id,
					   p_item_id                  => l_lpn_contents_rec.inventory_item_id,
					   p_item_desc                => '',
					   p_item_revision            => l_lpn_contents_rec.item_revision,
					   p_quantity                 => l_lpn_contents_rec.mol_quantity,
					   p_txn_uom_code             => l_lpn_contents_rec.mol_uom_code,
					   p_transfer_lpn_id          => l_lpn_contents_rec.lpn_id,
					   p_transfer_lpn             => null ,
					   p_txn_source_id            => l_lpn_contents_rec.txn_source_id,
					   p_mmtt_temp_id             => l_lpn_contents_rec.transaction_temp_id,
					   p_project_id               => l_lpn_contents_rec.project_id,
					   p_task_id                  => l_lpn_contents_rec.task_id,
			                   x_interface_transaction_id => l_transaction_id,
			                   x_return_status            => x_return_status,
			                   x_msg_count                => l_msg_count,
			                   x_msg_data                 => l_msg_data
			  );
			IF x_return_status <> G_RET_STS_SUCCESS Then
			   -- MSG no new message just add the one on stack
			   -- Check the Error Status from this call
			   l_progress := 'WMSINB-17550';
			   RAISE FND_API.G_EXC_ERROR;
			END if;
		      ELSE
			--
			-- Create a new RTI row with flpn=childlpn and tlpn = tlpn;
			-- Review Later
			l_progress := 'WMSINB-17579';
			create_rti_for_lpn(p_transaction_type         => l_lpn_rec.transaction_type,
					   p_interface_transaction_id => l_lpn_rec.interface_transaction_id,
					   p_lpn_id                   => l_lpn_contents_rec.lpn_id,
					   p_item_id                  => l_lpn_contents_rec.inventory_item_id,
					   p_org_id                   => l_lpn_contents_rec.organization_id,
					   p_to_org_id                => l_lpn_rec.to_organization_id,
					   p_item_desc                => '',
					   p_item_revision            => l_lpn_contents_rec.item_revision,
					   p_quantity                 => l_lpn_contents_rec.mol_quantity,
					   p_txn_uom_code             => l_lpn_contents_rec.mol_uom_code,
					   p_transfer_lpn_id          => l_lpn_rec.transfer_lpn_id,
					   p_transfer_lpn             => l_lpn_rec.transfer_license_plate_number,
					   p_txn_source_id            => l_lpn_contents_rec.txn_source_id,
					   p_mmtt_temp_id             => l_lpn_contents_rec.transaction_temp_id,
					   p_project_id               => l_lpn_contents_rec.project_id,
					   p_task_id                  => l_lpn_contents_rec.task_id,
			                   x_interface_transaction_id => l_transaction_id,
			                   x_return_status            => x_return_status,
			                   x_msg_count                => l_msg_count,
			                   x_msg_data                 => l_msg_data
			  );
			IF  x_return_status <> G_RET_STS_SUCCESS Then
			   -- MSG no new message just add the one on stack
			   -- Check the Error Status from this call
			   l_progress := 'WMSINB-17580';
			   RAISE FND_API.G_EXC_ERROR;
			END IF;
		     END IF;
		  END LOOP;

		  IF c_lpn_contents%isopen THEN
		     CLOSE c_lpn_contents;
		  END IF;

		ELSIF l_lpn_rec.transaction_type IN ('TRANSFER','DELIVER') THEN
		   explode_lpn_for_xfer_dlvr
		     (p_transaction_type          => l_lpn_rec.transaction_type
		      ,p_lpn_id                   => l_child_lpn_rec.lpn_id
		      ,p_rti_id                   => l_lpn_rec.interface_transaction_id
		      ,p_rti_lpn_id               => l_lpn_rec.lpn_id
		      ,p_rti_xfer_lpn_id          => l_lpn_rec.transfer_lpn_id
		      ,p_rti_xfer_lpn             => l_lpn_rec.transfer_license_plate_number
		      ,p_rti_to_organization_id   => l_lpn_rec.to_organization_id
		      ,x_return_status            => x_return_status
		      ,x_msg_count                => l_msg_count
		      ,x_msg_data                 => l_msg_data
		      );
	       END IF;
	    End Loop;

	    if c_child_lpn%isopen then
               close c_child_lpn;
	    end if;

	    l_progress := 'WMSINB-17621';

	    --
	    -- Create WLPNI rows for Explosion if needed
	    --
	    if ( nvl(l_lpn_rec.lpn_id,-1) <> nvl(l_lpn_rec.transfer_lpn_id,-1) ) then

	       IF (l_debug = 1) THEN
		  print_debug('Explode LPN: Before Immediate Child LPN loop ', 1);
	       END If;

	       open c_immediate_child (l_lpn_rec.lpn_id);
	       Loop
		  Fetch c_immediate_child into l_immediate_child_rec;
		  Exit when c_immediate_child%notfound;
		  -- Call create WLPNI here
	          l_progress := 'WMSINB-17637';
		  insert_wlpni(  p_LPN_ID => l_immediate_child_rec.lpn_id,
				 p_LICENSE_PLATE_NUMBER => l_immediate_child_rec.license_plate_number,
				 p_PARENT_LPN_ID => l_lpn_rec.transfer_lpn_id,
				 p_PARENT_LICENSE_PLATE_NUMBER => l_lpn_rec.transfer_license_plate_number,
				 p_organization_id => l_lpn_rec.to_organization_id,
				 p_LPN_GROUP_ID                => p_LPN_GROUP_ID,
				 x_return_status               => x_return_status,
				 x_msg_count                   => l_msg_count,
				 x_msg_data                    => l_msg_data
				 );
		  if x_return_status <> G_RET_STS_SUCCESS Then
		     -- MSG no new message just add the one on stack
		     -- Check the Error Status from this call
		     null;
		  End if;
	       End loop;

	       if c_immediate_child%isopen then
		  close c_immediate_child;
	       End if;
             else
		     --
	             l_progress := 'WMSINB-17660';
		     -- Call create WLPNI here
		     IF (l_debug = 1) THEN
			print_debug('Explode LPN: Before insert_wlpni else ', 1);
		     END If;

		     -- Check Existence of rows in WLPNI
		     -- If not exists then create

	             l_progress := 'WMSINB-17669';
		     check_lpn_in_wlpni(l_lpn_rec.license_plate_number, l_lpn_rec.lpn_id, p_lpn_group_id, l_wlpni_exists);

		     if l_wlpni_exists = 0 then
	                l_progress := 'WMSINB-17673';
			insert_wlpni(  p_LPN_ID => l_lpn_rec.lpn_id,
				       p_LICENSE_PLATE_NUMBER => l_lpn_rec.license_plate_number,
				       p_PARENT_LPN_ID => null,
				       p_PARENT_LICENSE_PLATE_NUMBER => null,
				       p_organization_id => l_lpn_rec.to_organization_id,
				       p_LPN_GROUP_ID                => p_LPN_GROUP_ID,
				       x_return_status               => x_return_status,
				       x_msg_count                   => l_msg_count,
				       x_msg_data                    => l_msg_data
				       );
		     End if;
	    end if;

	    --
	 end if; /* END OF RECEIVE TXN CASE */

	 /* START OF CASE FOR OTHER TXN TYPE */
	 if ( l_lpn_rec.transaction_type in ( 'ACCEPT','REJECT','RETURN TO CUSTOMER',
					      'CORRECT','SHIP','RETURN TO RECEIVING','RETURN TO VENDOR','UNORDERED' )) then
	    IF (l_debug = 1) THEN
	       print_debug('Explode_lpn_contents:  INSPECT TXN failure txn type is wrong', 1);
	       print_debug('Explode_lpn_contents:  INSPECT TXN failure txn type '|| l_lpn_rec.transaction_type, 1);
	    END If;
	    x_return_status := g_ret_sts_error;
	    -- MSG INV_INVALID_LPN_TXN
	    -- Review Later
	    -- Set appropiate Message
	    exit;
	 end if;  /* END OF CASE FOR OTHER TXN */
      end if;    /* END OF QTY = 0 CASE */

   End Loop;

   IF (l_debug = 1) THEN
      print_debug('EXPLODE_LPN:',1);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;

      if c_lpn_contents%isopen then
         close c_lpn_contents;
      end if;

      if c_child_lpn%isopen then
         close c_child_lpn;
      end if;

      if c_immediate_child%isopen then
         close c_immediate_child;
      End if;

      IF (l_debug = 1) THEN
         print_debug('Explode lpn: - other exception:'|| l_progress || ' ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS') || 'Error = '|| SQLCODE , 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.explode_lpn_contents',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => l_msg_data);

END Explode_lpn_contents;

-- Description
-- Procedure whether the sub, loc,org data passed matches with the LPN
-- Information
PROCEDURE validate_lpn_locator( p_lpn_id IN NUMBER,
                                p_subinventory     IN VARCHAR2,
                                p_locator_id       IN NUMBER,
                                p_organization_id  IN NUMBER,
                                x_lpn_match        OUT NOCOPY VARCHAR2,
                                x_return_status    OUT NOCOPY VARCHAR2,
                                x_msg_count        OUT NOCOPY NUMBER,
                                x_msg_data         OUT NOCOPY VARCHAR2)
  is

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '10';
     l_msg_count number;
     l_msg_data VARCHAR2(2000);

     l_sub_match varchar2(1) := 'N';

BEGIN

   x_return_status := g_ret_sts_success;

   SELECT 'Y'
     INTO l_sub_match
     FROM wms_license_plate_numbers wlpn
     WHERE wlpn.lpn_id = p_lpn_id
     AND ((wlpn.lpn_context <> 5
	   AND (Nvl(wlpn.subinventory_code,'@@@') = Nvl(p_subinventory,'@@@'))
	   AND (Nvl(wlpn.locator_id,-1) = Nvl(p_locator_id,-1)))
	  OR wlpn.lpn_context = 5)
     AND wlpn.organization_id = p_organization_id
     AND ROWNUM = 1
     ;

   x_lpn_match := l_sub_match;

EXCEPTION
   when no_data_found then
      x_lpn_match := 'N';
      -- MSG WMS_CONT_INVALID_LOC
   when others then
      -- MSG WMS_CONT_INVALID_LOC
      x_lpn_match := 'N';
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('validate_lpn_locator - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.validate_lp_locator',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => x_msg_data);
END validate_lpn_locator;


-- Description
-- This Procedure returns the PARENT_LPN_ID
-- from WLPN
PROCEDURE get_parent_lpn(p_license_plate_number IN VARCHAR2,
                         x_parent_lpn_id IN OUT NOCOPY NUMBER)
  is
BEGIN
   select PARENT_LPN_ID
     into x_parent_lpn_id
     from wms_license_plate_numbers
     where license_plate_number = p_license_plate_number
     ;
EXCEPTION
   WHEN OTHERS THEN
      x_parent_lpn_id := null;
END get_parent_lpn;

-- Description
-- This Procedure returns the PARENT_LPN_ID / PARENT LICENSE_PLATE_NUMBER
-- from WLPNI
PROCEDURE get_parent_lpn_in_wlpni(p_license_plate_number IN VARCHAR2,
				  p_lpn_id               IN NUMBER,
				  p_lpn_group_id         IN NUMBER,
				  x_parent_lpn IN OUT NOCOPY VARCHAR2 ,
				  x_parent_lpn_id IN OUT NOCOPY NUMBER )
  is
BEGIN
   if p_lpn_id is null then
      select PARENT_LPN_ID,
	PARENT_LICENSE_PLATE_NUMBER
	into x_parent_lpn_id,
	x_parent_lpn
	from wms_lpn_interface
	where lpn_id = p_lpn_id
	and source_group_id = p_lpn_group_id
	;
    else
      select PARENT_LPN_ID,
	PARENT_LICENSE_PLATE_NUMBER
	into x_parent_lpn_id,
	x_parent_lpn
	from wms_lpn_interface
	where license_plate_number = p_license_plate_number
	and source_group_id = p_lpn_group_id;
   end if;
EXCEPTION
   WHEN OTHERS THEN
      x_parent_lpn_id := null;
      x_parent_lpn    := null;
END get_parent_lpn_in_wlpni;


PROCEDURE VALIDATE_TOTAL_QTY(p_lpn_group_id     IN NUMBER,
                             p_from_lpn_id      IN NUMBER,
			     p_parent_lpn_id    IN NUMBER,
                             p_transaction_type IN VARCHAR2,
                             x_return_status    OUT NOCOPY VARCHAR2,
                             x_msg_count        OUT NOCOPY NUMBER,
		             x_msg_data         OUT NOCOPY VARCHAR2
			     ) is

				l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
				l_progress VARCHAR2(15) := '10';
				l_rti_qty  NUMBER;

				l_serial_disc NUMBER;
				l_outermost_lpn_id NUMBER;
				l_dummy VARCHAR2(1);
Begin

   -- Initialize API return status to success
   x_return_status  := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('VALIDATE_TOTAL_QTY: P_LPN_GROUP_ID = '||p_lpn_group_id,1);
      print_debug('VALIDATE_TOTAL_QTY: P_FROM_LPN_ID = '||p_from_lpn_id,1);
      print_debug('VALIDATE_TOTAL_QTY: P_PARENT_LPN_ID = '||p_parent_lpn_id,1);
      print_debug('VALIDATE_TOTAL_QTY: P_TRANSACTION_TYPE = '||p_transaction_type,1);
   END If;

   FOR l_outermost_lpn IN (SELECT lpn_id, license_plate_number,
			   Nvl(parent_lpn_id, outermost_lpn_id) parent_lpn_id
			   FROM wms_license_plate_numbers
			   START WITH lpn_id = p_from_lpn_id
			   CONNECT BY lpn_id = PRIOR parent_lpn_id)
     LOOP
	l_outermost_lpn_id := l_outermost_lpn.lpn_id;

	BEGIN
	   SELECT '1'
	     INTO l_dummy
	     FROM wms_lpn_interface
	     WHERE source_group_id = p_lpn_group_id
	     AND (lpn_id = l_outermost_lpn.lpn_id
		  OR license_plate_number = l_outermost_lpn.license_plate_number)
	     AND Nvl(parent_lpn_id, -1) <> l_outermost_lpn.parent_lpn_id;

	   EXIT;
	EXCEPTION
	   WHEN OTHERS THEN
	      NULL;
	END;

     END LOOP; --FOR l_outermost_lpn IN

   IF Nvl(p_transaction_type,'@@@') <> 'RECEIVE' THEN
      For l_wln_csr in (
                    select lpn_id lpn_id,
                           license_plate_number license_plate_number
                      from wms_license_plate_numbers wlpn
                      connect by prior wlpn.lpn_id = wlpn.parent_lpn_id
                      start with wlpn.lpn_id = l_outermost_lpn_id
                       )
      Loop
      For l_lpn_contents in (
			     select
			     wlc.parent_lpn_id lpn_id
			     ,l_wln_csr.license_plate_number license_plate_number
			     ,wlc.inventory_item_id inventory_item_id
			     ,wlc.revision item_revision
			     ,wlc.organization_id organization_id
			     --,wlc.item_description item_description
			     ,sum(get_primary_qty(wlc.organization_id, wlc.inventory_item_id, wlc.uom_code,nvl(wlc.quantity,0)))
			     primary_quantity
			     from  wms_lpn_contents wlc
                             where  wlc.parent_lpn_id = l_wln_csr.lpn_id
                             -- 4507808
                             -- Commented the exists statement below
                             -- by the l_wln_csr above.
			     -- where  wlc.parent_lpn_id = wln.lpn_id
			     -- AND exists ( select '1' from wms_license_plate_numbers wlpn
			--		  where  wlc.parent_lpn_id = wlpn.lpn_id
			--		  connect by prior wlpn.lpn_id = wlpn.parent_lpn_id
			--		  start with wlpn.lpn_id = l_outermost_lpn_id
					  --union all
					  --select '1' from wms_license_plate_numbers wlpn1
					  --where  wlc.parent_lpn_id = wlpn1.lpn_id
					  --and not exists ( select 1 from wms_lpn_interface wlpni
						--	   where wlpni.lpn_id = p_from_lpn_id and
						--	   Nvl(wlpni.parent_lpn_id, -1) <> Nvl(p_parent_lpn_id, -1)
						--	   )
					  --connect by prior wlpn1.parent_lpn_id = wlpn1.lpn_id
					  --start with wlpn1.lpn_id = p_from_lpn_id
		 	--			  )
        group by
        wlc.parent_lpn_id
        ,l_wln_csr.license_plate_number
        ,wlc.inventory_item_id
        ,wlc.revision
        ,wlc.organization_id
        --,wlc.item_description
        )
        Loop
	   IF (l_debug = 1) THEN
	      print_debug('VALIDATE_TOTAL_QTY: Inventory_Item_Id = '||l_lpn_contents.inventory_item_id,1);
	      print_debug('VALIDATE_TOTAL_QTY: Item_Revision = '||l_lpn_contents.item_revision,1);
	      print_debug('VALIDATE_TOTAL_QTY: Primary_Quantity = '||l_lpn_contents.primary_quantity,1);
	      print_debug('VALIDATE_TOTAL_QTY: License_Plate_Number = '||l_lpn_contents.license_plate_number,1);
	   END If;

	   -- THERE IS a PROBLEM HERE IF DIFFERENT UOM_CODES EXIST in WLC FOR THE SAME ITEM. ***********
	   -- NOT YET CONVERTED UOM

	   select sum(primary_quantity)
	     into l_rti_qty
	     from rcv_transactions_interface rti
	     where rti.lpn_group_id = p_lpn_group_id
	     and (rti.lpn_id = l_lpn_contents.lpn_id
	     AND  rti.PROCESSING_STATUS_CODE <> 'WSH_INTERFACED'  --RTV Change 16197273
		  OR rti.license_plate_number = l_lpn_contents.license_plate_number)
             -- 3397823
	     -- and rti.transfer_lpn_id = l_lpn_contents.lpn_id
	     and rti.item_id = l_lpn_contents.inventory_item_id
	     and decode(rti.transaction_type,'ACCEPT','INSPECT','REJECT','INSPECT',rti.transaction_type)
	     = decode(p_transaction_type,'ACCEPT','INSPECT','REJECT','INSPECT',p_transaction_type)
	     and ( (l_lpn_contents.item_revision is null) or (rti.item_revision = l_lpn_contents.item_revision))
	       --and ( (l_lpn_contents.item_description is null) or (rti.item_description = l_lpn_contents.item_description ))
		 ;

	     IF l_rti_qty IS NULL THEN
		l_rti_qty := 0;
	     END IF;

	     IF (l_debug = 1) THEN
		print_debug('VALIDATE_TOTAL_QTY: L_RTI_QTY = '||l_rti_qty,1);
	     END If;

	     --BUG 4939647 Need to round rti quantity to 5 decimals as we only store
	     --5 decimals in lpn contents
	     l_rti_qty := Round(l_rti_qty,5);

	     -- Check the QUANTITY
	     IF l_rti_qty <> 0 THEN
		-- bug 4897277
		-- Use absolute value of transaction qty for checking
		IF ABS(l_rti_qty) <> l_lpn_contents.primary_quantity then
		   IF (l_debug = 1) THEN
		      print_debug('VALIDATE_TOTAL_QTY: QTY MISMATCH l_rti_qty = '|| to_char(l_rti_qty) || ' lpn qty ' ||
				  to_char(l_lpn_contents.primary_quantity) , 1);
		   END If;
		   l_progress := 'WMSINB-17926';
		   RAISE FND_API.G_EXC_ERROR;
		End if;
	     END IF;

        End Loop;
        End Loop; --l_wln_csr
    ELSE --IF Nvl(p_transaction_type,'@@@') <> 'RECEIVE' THEN
      For l_wln_csr in (
                    select lpn_id lpn_id,
                           license_plate_number license_plate_number
                      from wms_license_plate_numbers wlpn
                      connect by prior wlpn.lpn_id = wlpn.parent_lpn_id
                      start with wlpn.lpn_id = l_outermost_lpn_id
                       )
      Loop
      For l_lpn_contents in (
			     select
			     wlc.parent_lpn_id lpn_id
			     ,l_wln_csr.license_plate_number license_plate_number
			     ,wlc.inventory_item_id inventory_item_id
			     ,wlc.revision item_revision
			     ,wlc.organization_id organization_id
			     --,wlc.item_description item_description
			     ,wlc.lot_number lot_number
			     ,sum(get_primary_qty(wlc.organization_id, wlc.inventory_item_id, wlc.uom_code,nvl(wlc.quantity,0)))
			     primary_quantity
			     from  wms_lpn_contents wlc
                             where  wlc.parent_lpn_id = l_wln_csr.lpn_id
                             -- 4507808
                             -- Commented the exists statement below
                             -- and replaced by the outer cursor l_wln_csr
			     -- where  wlc.parent_lpn_id = wln.lpn_id
			     -- AND exists ( select '1' from wms_license_plate_numbers wlpn
			--		  where  wlc.parent_lpn_id = wlpn.lpn_id
			--		  connect by prior wlpn.lpn_id = wlpn.parent_lpn_id
			--		  start with wlpn.lpn_id = l_outermost_lpn_id
					  --union all
					  --select '1' from wms_license_plate_numbers wlpn1
					  --where  wlc.parent_lpn_id = wlpn1.lpn_id
					  --and not exists ( select 1 from wms_lpn_interface wlpni
						--	   where wlpni.lpn_id = p_from_lpn_id and
						--	   Nvl(wlpni.parent_lpn_id, -1) <> Nvl(p_parent_lpn_id, -1)
						--	   )
					  --connect by prior wlpn1.parent_lpn_id = wlpn1.lpn_id
					  --start with wlpn1.lpn_id = p_from_lpn_id
				--	  )
	group by
	wlc.parent_lpn_id
	,l_wln_csr.license_plate_number
	,wlc.inventory_item_id
	,wlc.revision
	,wlc.organization_id
	--,wlc.item_description
	,wlc.lot_number
	)
	Loop

	   -- THERE IS a PROBLEM HERE IF DIFFERENT UOM_CODES EXIST in WLC FOR THE SAME ITEM. ***********
	   -- NOT YET CONVERTED UOM
	   IF l_lpn_contents.lot_number IS NULL THEN
	      select sum(primary_quantity)
		into l_rti_qty
		from rcv_transactions_interface rti
		where rti.lpn_group_id = p_lpn_group_id
		and (rti.lpn_id = l_lpn_contents.lpn_id
		     OR rti.license_plate_number = l_lpn_contents.license_plate_number)
                -- 3397823
		--and rti.transfer_lpn_id = l_lpn_contents.lpn_id
		and rti.item_id = l_lpn_contents.inventory_item_id
		and decode(rti.transaction_type,'ACCEPT','INSPECT','REJECT','INSPECT',rti.transaction_type)
		= decode(p_transaction_type,'ACCEPT','INSPECT','REJECT','INSPECT',p_transaction_type)
		and ( (l_lpn_contents.item_revision is null) or (rti.item_revision = l_lpn_contents.item_revision))
		  --and ( (l_lpn_contents.item_description is null) or (rti.item_description = l_lpn_contents.item_description ))
		    AND l_lpn_contents.lot_number IS NULL;
	    ELSE --IF l_lpn_contents.lot_number IS NULL THEN
	      select sum(mtli.primary_quantity)
		into l_rti_qty
		from rcv_transactions_interface rti
		, mtl_transaction_lots_interface mtli
		where rti.lpn_group_id = p_lpn_group_id
		and (rti.lpn_id = l_lpn_contents.lpn_id
		     OR rti.license_plate_number = l_lpn_contents.license_plate_number)
                -- 3397823
		-- and rti.transfer_lpn_id = l_lpn_contents.lpn_id
		and rti.item_id = l_lpn_contents.inventory_item_id
		and decode(rti.transaction_type,'ACCEPT','INSPECT','REJECT','INSPECT',rti.transaction_type)
		= decode(p_transaction_type,'ACCEPT','INSPECT','REJECT','INSPECT',p_transaction_type)
		and ( (l_lpn_contents.item_revision is null) or (rti.item_revision = l_lpn_contents.item_revision))
		  --and ( (l_lpn_contents.item_description is null) or (rti.item_description = l_lpn_contents.item_description ))
		    AND l_lpn_contents.lot_number = mtli.lot_number
		    AND mtli.product_code = 'RCV'
		    AND mtli.product_transaction_id = rti.interface_transaction_id
		    ;
	   END IF; --IF l_lpn_contents.lot_number IS NULL THEN

	   IF (l_rti_qty IS NULL) THEN
	      l_rti_qty := 0;
	   END IF;

	   IF (l_debug = 1) THEN
	      print_debug('VALIDATE_TOTAL_QTY: L_RTI_QTY = '||l_rti_qty,1);
	   END If;

	   --BUG 4939647 Need to round rti quantity to 5 decimals as we only store
	   --5 decimals in lpn contents
	   l_rti_qty := Round(l_rti_qty,5);

	   -- Check the QUANTITY
          /* Bug 5616019.
           * We need to validate the quantities even when l_rti_qty is zero.
           * Commenting out the if condition.
           * IF (l_rti_qty <> 0) THEN
          */

	      if l_rti_qty <> l_lpn_contents.primary_quantity then
		 IF (l_debug = 1) THEN
		    print_debug('VALIDATE_TOTAL_QTY: QTY MISMATCH l_rti_qty = '|| to_char(l_rti_qty) || ' lpn qty ' ||
				to_char(l_lpn_contents.primary_quantity) , 1);
		 END If;
		 l_progress := 'WMSINB-17927';
		 RAISE FND_API.G_EXC_ERROR;
	      End if;
          /* Bug 5616019.
           * END IF;
          */

	   l_serial_disc := 1;

	   For l_test_serial_rec in (
				     select serial_number
				     from mtl_serial_numbers msn
				     WHERE msn.lpn_id = l_lpn_contents.lpn_id
				     AND msn.inventory_item_id = l_lpn_contents.inventory_item_id
				     )
	     Loop
		BEGIN
		   SELECT 1
		     INTO l_serial_disc
		     FROM mtl_serial_numbers_interface msni
		     , rcv_transactions_interface rti
		     where rti.lpn_group_id = p_lpn_group_id
		     and (rti.lpn_id = l_lpn_contents.lpn_id
			  OR rti.license_plate_number = l_lpn_contents.license_plate_number)
                     -- 3397823
		     -- and rti.transfer_lpn_id = l_lpn_contents.lpn_id
		     and rti.item_id = l_lpn_contents.inventory_item_id
		     AND msni.product_code = 'RCV'
		     AND msni.product_transaction_id = rti.interface_transaction_id
		     and l_test_serial_rec.serial_number between msni.fm_serial_number and msni.to_serial_number
		     AND Length(l_test_serial_rec.serial_number) = Length(msni.fm_serial_number)
		     AND length(msni.fm_serial_number)=Length(Nvl(msni.to_serial_number,msni.fm_serial_number))  --BUG 3818544
		     and rownum = 1
		     ;
		EXCEPTION
		   WHEN others THEN
		      IF (l_debug = 1) THEN
			 print_debug('VALIDATE_TOTAL_QTY: Serial Mismatched is '|| l_test_serial_rec.serial_number , 1);
		      END If;
		      l_serial_disc := 0;
		      exit;
		END;
	     End Loop;

	     if l_serial_disc = 0 then
		IF (l_debug = 1) THEN
		   print_debug('VALIDATE_TOTAL_QTY: validate serial mismatch' , 1);
		END If;
		l_progress := 'WMSINB-17928';
		RAISE FND_API.G_EXC_ERROR;
	     End if;
	End Loop;
        End Loop; -- l_wln_csr
   END IF; --IF Nvl(p_transaction_type,'@@@') <> 'RECEIVE' THEN

Exception
   when fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;

   when others then
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('validate_quantity - other exception:'|| l_progress || ' ' ||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.validate_quantity',l_progress, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);
End validate_total_qty;

PROCEDURE VALIDATE_LPN_INFO(p_lpn_group_id     IN         NUMBER,
			    x_return_status    OUT NOCOPY VARCHAR2,
			    x_msg_count        OUT NOCOPY NUMBER,
			    x_msg_data         OUT NOCOPY VARCHAR2)
  is
     cursor c_validate_lpn is
	select interface_transaction_id
	  ,transaction_type
	  ,item_id
	  ,item_description
	  ,lpn_id
	  ,transfer_lpn_id
	  ,license_plate_number
	  ,transfer_license_plate_number
	  ,quantity
	  ,shipment_header_id
	  ,shipment_num
	  ,routing_header_id
	  ,to_organization_id
	  ,nvl(from_organization_id,to_organization_id) from_organization_id -- This is needed
	  ,subinventory                   -- as for some txns like ASN Receive, TRANSFER, DELIVER
	  ,locator_id                     -- the from organization_id is null in rti
	  ,from_subinventory              -- so we have to take the to_organization_id
	  ,from_locator_id
	  ,parent_transaction_id
	  ,source_document_code
	  ,auto_transact_code
	  ,Nvl(mobile_txn, 'N') mobile_txn
	  ,processing_mode_code
	  ,inv_transaction_id
	  ,mmtt_temp_id
      ,Nvl(express_transaction,'N') express_transaction --Bug 5550783
	  ,item_revision   -- bug 13938607
      ,uom_code
      ,validation_flag
      ,interface_source_line_id --RTV Change 16197273
	  from rcv_transactions_interface rti
	  where rti.lpn_group_id = p_lpn_group_id
	  AND PROCESSING_STATUS_CODE <> 'WSH_INTERFACED' --RTV Change  16197273
	  order by interface_transaction_id;

     cursor c_child_lpn(p_child_lpn_id varchar2) is
	select lpn_id
	  ,license_plate_number
	  from wms_license_plate_numbers
	  where outermost_lpn_id = p_child_lpn_id;

     l_child_lpn_rec c_child_lpn%rowtype;

     cursor c_immd_child_lpn(p_child_lpn_id varchar2) is
	select lpn_id
	  ,license_plate_number
	  from wms_license_plate_numbers
	  where parent_lpn_id = p_child_lpn_id;

     l_immd_child_rec c_immd_child_lpn%rowtype;

     cursor c_lpn_contents(p_child_lpn_id varchar2) is
	select parent_lpn_id
	  ,inventory_item_id
	  ,quantity
	  from wms_lpn_contents
	  where parent_lpn_id = p_child_lpn_id;

     l_lpn_contents_rec c_lpn_contents%rowtype;


     l_lpn_rec c_validate_lpn%rowtype;

     l_progress varchar2(15) := '00';

     l_debug number := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);

     l_source_header_id NUMBER;
     l_asn_type VARCHAR2(10);
     l_lpn_context NUMBER;
     l_transfer_lpn_context NUMBER;
     l_to_lpn_context NUMBER;
     l_wlpni_exists NUMBER;
     l_insp_mat_exists NUMBER;
     l_rti_quantity NUMBER;

     l_msg_count number;
     l_msg_data VARCHAR2(2000);

     l_WLPNIQLPN    VARCHAR2(30);
     l_WLPNIQLPN_ID NUMBER;
     l_WLPNIQLPN_PARENT_LPN_ID NUMBER;

     l_PTLPN    VARCHAR2(30);
     l_PTLPN_ID NUMBER;
     l_PTLPN_CONTEXT NUMBER;
     l_PTLPN_EXISTS NUMBER;

     l_P_PTLPN    VARCHAR2(30);
     l_P_PTLPN_ID NUMBER;

     l_from_lpn_state BOOLEAN;
     l_to_lpn_state BOOLEAN;
     l_lpn_state BOOLEAN;
     l_lpn_match varchar2(1);

     l_parent_txn_type varchar2(30);
     l_parent_parent_txn_id NUMBER;
     l_parent_parent_parent_txn_id NUMBER;
     l_parent_parent_txn_type VARCHAR2(30);

     l_rs_ptid_ptid_lpn_id NUMBER;    -- Variable to hold the lpn_id from rcv_supply for parent_parent_txn_id
     l_rs_ptid_ptid_exists Boolean;   -- Variable to indicate whether their Exists a supply for the Parent_parent_txn_Id

     l_rs_ptid_ptid_ptid_lpn_id NUMBER;   -- Variable to hold the lpn_id from rcv_supply for parent_parent_txn_id
     l_rs_ptid_ptid_ptid_exists Boolean;  -- Variable to indicate whether their
     --  Exists a supply for the Parent parent txn Id and the Tranfer LPN

     l_rs_ptid_lpn_id NUMBER;  -- Variable to hold the lpn_id from rcv_supply for parent_txn_id
     l_rs_ptid_exists Boolean;   -- Variable to indicate whether their Exists a supply for the parent txn Id


     l_cur_from_parent_lpn_id NUMBER;
     l_cur_to_parent_lpn_id NUMBER;
     l_cur_PTLPN_parent_lpn_id NUMBER;


     l_wlpni_state BOOLEAN;
     l_wlpni_lpn   VARCHAR2(30);
     l_wlpni_parent_lpn varchar2(30);
     l_wlpni_lpn_id NUMBER;
     l_wlpni_parent_lpn_id NUMBER;
     l_wlpni_lpn_context NUMBER;
     l_wlpni_cur_parent_lpn NUMBER;

     l_wlpni_parent_state BOOLEAN;
     l_wlpni_parent_lpn_context NUMBER;
     l_wlpni_cur_parent_parent_lpn NUMBER;

     l_validate_sub VARCHAR2(10);
     l_validate_loc_id NUMBER;

     l_parent_lpn_context NUMBER;
     l_parent_source_name VARCHAR2(30);
     l_parent_source_header_id NUMBER;
     l_parent_source_type_id NUMBER;

     l_update_lpn_id BOOLEAN := FALSE;

     l_miss_num NUMBER := FND_API.G_MISS_NUM;
     l_miss_char VARCHAR2(1) := FND_API.G_MISS_CHAR;

     l_lpn_count NUMBER;

     l_asn_source_header_id NUMBER;
     l_asn_source_type_id   NUMBER;

     l_lpn_already_processed NUMBER;

     l_parent_sub VARCHAR2(10);
     l_parent_locator_id NUMBER;
     l_parent_to_organization_id NUMBER;

     l_intransit_type NUMBER := 0;

     l_wlpn_source_header_id NUMBER;
     l_xfr_wlpn_source_header_id NUMBER;

     --R12
     l_lpn_grp_id                   NUMBER;
     l_epc_column                   VARCHAR2(30);
     l_epc_value                    VARCHAR2(100);
     l_return_status                VARCHAR2(1);
     validate_lpn_id                NUMBER;  --Bug:13613257
     --R12

	    -- ADDED FOR BUG 13938607
        v_return_status VARCHAR2(1) := 'S';
        v_msg_count NUMBER;
        v_msg_data VARCHAR2(2000);
        l_return_val BOOLEAN;

BEGIN

   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('VALIDATE_LPN_INFO Entered...:'|| l_progress || ' ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END If;

   l_progress := 'WMSINB-18089';

   -- Opens Cursor on RTI based on lpn_group_id
   open c_validate_lpn;
   Loop
      fetch c_validate_lpn into l_lpn_rec;
      exit when c_validate_lpn%notfound;

      IF (l_debug = 1) THEN
         print_debug('VALIDATE_LPN_INFO - Express Transaction :'||l_lpn_rec.express_transaction, 1);--Bug 5550783
         print_debug('VALIDATE_LPN_INFO - Transaction type :'||l_lpn_rec.transaction_type||':'||l_progress, 1);
      END If;


	        		-- added for bug 13938607
                IF(l_lpn_rec.validation_flag='Y' AND l_lpn_rec.mobile_txn='N' AND l_lpn_rec.lpn_id IS NOT NULL) THEN
                    IF(l_lpn_rec.transaction_type IN('RETURN TO VENDOR', 'RETURN TO RECEIVING')) THEN

                   l_return_val := INV_CACHE.set_item_rec(l_lpn_rec.item_id,l_lpn_rec.from_organization_id);

                         WMS_RETURN_SV.mark_returns(
                                    v_return_status,
                                    v_msg_count,
                                    v_msg_data,
                                    l_lpn_rec.interface_transaction_id,
                                    l_lpn_rec.transaction_type,    --transaction_type
                                    l_lpn_rec.lpn_id,              --lpn_id
                                    l_lpn_rec.item_id,             --item_id
                                    l_lpn_rec.item_revision,       --item_revision
                                    l_lpn_rec.quantity,            --quantity
                                    l_lpn_rec.uom_code,             --uom_code
                                    INV_CACHE.item_rec.serial_number_control_code,       --serial_control_code
                                    INV_CACHE.item_rec.lot_control_code,       --lot_control_code
                                    l_lpn_rec.from_organization_id,    --organization_id
                                    l_lpn_rec.from_subinventory,    --from_subinventory_code
                                    l_lpn_rec.from_locator_id);   --from_locator_id
                        IF x_return_status <> 'S' THEN
                           IF (l_debug        = 1) THEN
					           print_debug('WMS_RETURN_SV.mark_returns Failed with Error : ' || x_msg_data||' : '||l_progress, 1);
				           END IF;
				           RAISE FND_API.G_EXC_ERROR;
                        END IF;

                    END IF;
                END IF;
                -- added for bug 13938607

	  /*
      Changes to  validate the LPN to restrict multiple users doing transactions on same LPN
      Added for the Bug:13613257
      */

      validate_lpn_id := 0;

	  IF (l_lpn_rec.transaction_type = 'RECEIVING' AND l_lpn_rec.transfer_lpn_id IS NOT NULL ) THEN
		validate_lpn_id                := l_lpn_rec.transfer_lpn_id;
	  ELSIF (l_lpn_rec.transaction_type = 'INSPECTION' OR
	  (
		l_lpn_rec.transaction_type IN ('CORRECT','RETURN TO VENDOR','RETURN TO RECEIVING', 'RETURN TO CUSTOMER') AND l_parent_txn_type ='INSPECT'
	  )
	  ) THEN
		IF (l_lpn_rec.lpn_id             IS NOT NULL ) THEN
			validate_lpn_id                := l_lpn_rec.lpn_id;
		END IF;
		IF (l_lpn_rec.transfer_lpn_id IS NOT NULL ) THEN
			Validate_Receiving_LPN(l_lpn_rec.transfer_lpn_id,
								   l_lpn_rec.routing_header_id,
								   x_return_status,
								   x_msg_count,
								   x_msg_data) ;

			IF (x_return_status <> g_ret_sts_success ) THEN
			    IF (l_debug        = 1) THEN
					print_debug('Validate_Receiving_LPN - LPN Validation failed : '||l_lpn_rec.lpn_id||' : '||l_progress, 1);
				END IF;
				RAISE FND_API.G_EXC_ERROR;
			END IF ;

		END IF ;
	  ELSIF (l_lpn_rec.transaction_type = 'CORRECT' ) THEN
		IF (l_parent_txn_type           = 'RECEIVING' AND l_lpn_rec.transfer_lpn_id IS NOT NULL ) THEN
			validate_lpn_id              := l_lpn_rec.transfer_lpn_id;
		ELSIF (l_parent_txn_type        = 'DELIVER' AND l_lpn_rec.lpn_id IS NOT NULL) THEN
			validate_lpn_id := l_lpn_rec.lpn_id;
		END IF ;
	  ELSIF (l_lpn_rec.transaction_type IN ('RETURN TO VENDOR','RETURN TO RECEIVING','RETURN TO CUSTOMER')) THEN
  	    IF (l_parent_txn_type    = 'RECEIVING' AND l_lpn_rec.lpn_id IS NOT NULL ) THEN
			validate_lpn_id       := l_lpn_rec.lpn_id;
	    ELSIF (l_parent_txn_type = 'DELIVER' AND l_lpn_rec.transfer_lpn_id IS NOT NULL ) THEN
			validate_lpn_id := l_lpn_rec.transfer_lpn_id;
	    END IF ;
	  END IF ;

	  IF (validate_lpn_id>0) THEN
		  Validate_Receiving_LPN(validate_lpn_id,
								 l_lpn_rec.routing_header_id,
								 x_return_status,
								 x_msg_count,
								 x_msg_data) ;

		  IF (x_return_status <> g_ret_sts_success ) THEN
			  IF (l_debug        = 1) THEN
				print_debug('Validate_Receiving_LPN - LPN Validation failed : '||l_lpn_rec.lpn_id||' : '||l_progress, 1);
			  END IF;
			  RAISE FND_API.G_EXC_ERROR;
		  END IF ;
	  END IF;


      --END Changes for  the Bug:13613257


      --If the source document is 'REQ' then of the intransit_type in
      --mtl_interorg_parameters is set to 'Direct' then exit from this api.
      IF (l_lpn_rec.source_document_code = 'REQ'
	  AND l_lpn_rec.mobile_txn = 'N'
	  AND l_lpn_rec.transaction_type = 'RECEIVE'
	  AND l_lpn_rec.inv_transaction_id IS NOT NULL
	  AND l_lpn_rec.processing_mode_code = 'ONLINE') THEN
	 BEGIN
	    SELECT intransit_type
	      INTO l_intransit_type
	      FROM mtl_interorg_parameters
	      WHERE from_organization_id = l_lpn_rec.from_organization_id
	      AND to_organization_id = l_lpn_rec.to_organization_id;

	    IF (l_intransit_type = 1) THEN
	       print_debug('VALIDATE_LPN_INFO: Direct Org Transfer ... Exitting...',1);
	       EXIT;
	    END IF;
	 EXCEPTION
	    WHEN OTHERS THEN
	       NULL;
	 END;
      END IF; --IF (l_lpn_rec.source_document_code = 'REQ') THEN

      -- Set the ASN variables to null
      l_asn_source_header_id := null;
      l_asn_source_type_id := null;

      IF ( l_lpn_rec.item_id IS NOT NULL OR l_lpn_rec.item_description IS NOT NULL ) THEN

	 IF (l_debug = 1) THEN
	    print_debug('VALIDATE_LPN_INFO - item id or description is not null:'||l_lpn_rec.item_id||':'||l_lpn_rec.item_description, 1);
	 END If;

	 IF ((l_lpn_rec.item_id IS NULL)
	     AND (l_lpn_rec.lpn_id IS NOT NULL
		  OR l_lpn_rec.license_plate_number IS NOT NULL
		  OR l_lpn_rec.transfer_lpn_id IS NOT NULL
		  OR l_lpn_rec.transfer_license_plate_number IS NOT NULL))
		    THEN
	    IF (l_debug = 1) THEN
	       print_debug('VALIDATE_LPN_INFO: LPNS are not supported for one time items.',1);
	    END IF;
	    l_progress := 'WMSINB-18116';
	    RAISE fnd_api.g_exc_error;
	 END IF;

	 IF NVL(l_lpn_rec.quantity,0) = 0 THEN
	    --
	    -- Quantity is null so failure return from Here
	    --
	    IF (l_debug = 1) THEN
	       print_debug('VALIDATE_LPN_INFO lpn/item Qty is null or zero  for this lpn id:'|| l_lpn_rec.lpn_id , 1);
	       print_debug('VALIDATE_LPN_INFO lpn/item Qty is null or zero for this lpn :'|| l_lpn_rec.license_plate_number, 1);
	    END If;

	    l_progress := 'WMSINB-18129';
	    x_return_status := g_ret_sts_error;

	    -- Review Later
	    -- Set appropiate Message

            RAISE FND_API.G_EXC_ERROR;
         End if;

	 -- Quantity is not null so proceed with this row

	 IF (l_debug = 1) THEN
	    print_debug('VALIDATE_LPN_INFO - Quantity:'||l_lpn_rec.quantity, 1);
	 END If;

	 -- Initialize Variables
	 l_source_header_id := null;
	 l_asn_type := null;
	 l_lpn_context := null;
	 l_wlpni_exists := 0;

	 -- See if we need to update the lpn_id or transfer_lpn_id in rti.
	 IF ((l_lpn_rec.lpn_id IS NULL AND l_lpn_rec.license_plate_number IS NOT NULL)
	     OR (l_lpn_rec.transfer_lpn_id IS NULL AND l_lpn_rec.transfer_license_plate_number IS NOT NULL)) THEN
	    l_update_lpn_id := TRUE;
	 END IF;

	 -- **************************************************************
	 -- Get THE LPN DETAILS for FROM and TRASNFER LPN
	 -- **************************************************************

	 l_progress := 'WMSINB-18160';

	 l_from_lpn_state := get_lpn_id(l_lpn_rec.lpn_id,
					l_lpn_rec.license_plate_number,
					l_lpn_context,
					l_cur_from_parent_lpn_id,
					l_wlpn_source_header_id);

	 if (l_from_lpn_state <> TRUE) then
	    IF (l_debug = 1) THEN
	       print_debug('VALIDATE_LPN_INFO: lpn_id and license_plate number does not exist' , 1);
	    END If;
	    -- Review Later.
	    -- Set Appropiate MESSAGE For ERROR
	    --
	    l_progress := 'WMSINB-18171';
	    RAISE FND_API.G_EXC_ERROR;
	 End if;

	 IF (l_debug = 1) THEN
	    print_debug('VALIDATE_LPN_INFO - LPN ID:'||l_lpn_rec.lpn_id,1);
	    print_debug('VALIDATE_LPN_INFO - LPN NAME:'||l_lpn_rec.license_plate_number,1);
	    print_debug('VALIDATE_LPN_INFO - LPN Context:'||l_lpn_context,1);
	    print_debug('VALIDATE_LPN_INFO - LPN Parent:'||l_cur_from_parent_lpn_id,1);
	 END If;

	 --
	 -- Call get_lpn_id to get the transfer lpn detials
	 --
	 l_progress := 'WMSINB-18185';

	 l_to_lpn_state := get_lpn_id(l_lpn_rec.transfer_lpn_id,
				      l_lpn_rec.transfer_license_plate_number,
				      l_transfer_lpn_context,
				      l_cur_to_parent_lpn_id,
				      l_xfr_wlpn_source_header_id);

	 if (l_to_lpn_state <> TRUE ) then
	    IF (l_debug = 1) THEN
	       print_debug('VALIDATE_LPN_INFO: lpn_id and license_plate number does not exist' , 1);
	    END If;
	    -- EXISTING LPN_ID and LPN Combination is INVALID
	    -- Review Later.
	    -- Set Appropiate MESSAGE For ERROR
	    --
	    l_progress := 'WMSINB-18200';
	    RAISE fnd_api.g_exc_error;
	 End if;

	 IF (l_debug = 1) THEN
	    print_debug('VALIDATE_LPN_INFO - Transfer LPN ID:'||l_lpn_rec.transfer_lpn_id,1);
	    print_debug('VALIDATE_LPN_INFO - Transfer LPN NAME:'||l_lpn_rec.transfer_license_plate_number,1);
	    print_debug('VALIDATE_LPN_INFO - Transfer LPN Context:'||l_transfer_lpn_context, 1);
	    print_debug('VALIDATE_LPN_INFO - Transfer LPN Parent:'||l_cur_to_parent_lpn_id,1);
	 END If;

	 l_progress := 'WMSINB-18211';

	 if ( ( l_lpn_rec.transaction_type in ( 'RECEIVE', 'ACCEPT','REJECT','DELIVER','TRANSFER') ) or
	      ( l_lpn_rec.transaction_type = 'SHIP' and l_lpn_rec.source_document_code = 'PO') ) then


	    -- FROM LPN VALIDATION
	    if (l_from_lpn_state = TRUE) then
	       l_progress := 'WMSINB-18219';
	       if l_lpn_rec.transaction_type in ( 'RECEIVE', 'ACCEPT','REJECT','DELIVER','TRANSFER') then
		  if l_lpn_rec.lpn_id is null and l_lpn_rec.license_plate_number is not null then
		     -- INVALID LPN or non EXISTENT LPN IN THE SYSTEM
		     l_progress := 'WMSINB-18223';
		     RAISE fnd_api.g_exc_error;
		  End if;
	       End if;
	    End if;

	    l_progress := 'WMSINB-18229';

	    if ( l_lpn_rec.transaction_type = 'SHIP') then

               -- Check whether it is already processed in the same LPN Group then by pass this step
               -- as the context now updated properly by the previous loop
               -- This is based on the order by given in lpn_validation loop..
               -- if you change the order by in lpn validation loop then change here also..

               l_lpn_already_processed := 0;

               select count(distinct interface_transaction_id)
                 into l_lpn_already_processed
                 from rcv_transactions_interface rti
                where rti.lpn_group_id = p_lpn_group_id
                  and ( ( rti.lpn_id = l_lpn_rec.lpn_id) or (rti.license_plate_number = l_lpn_rec.license_plate_number))
                  and rti.interface_transaction_id < l_lpn_rec.interface_transaction_id ;

	       IF l_lpn_rec.lpn_id is not null THEN
		  IF (l_debug = 1) THEN
		     print_debug('VALIDATE_LPN_INFO - l_lpn_already_processed:'||l_lpn_already_processed,1);
		     print_debug('VALIDATE_LPN_INFO - Shipment Header ID:'||l_lpn_rec.shipment_header_id,1);
		     print_debug('VALIDATE_LPN_INFO - Source Header ID:'||l_wlpn_source_header_id,1);
		  END IF;
                  IF (l_lpn_already_processed >= 1
		      OR (l_wlpn_source_header_id =
			  l_lpn_rec.shipment_header_id)) then
		     -- don't need to do any validation
		     IF (l_debug = 1) THEN
			print_debug('VALIDATE_LPN_INFO - LPN Context already validated: '||l_lpn_rec.lpn_id,1);
		     END If;
		     l_progress := 'WMSINB-18230';
		   ELSE
		     IF ( l_lpn_context <> G_LPN_CONTEXT_PREGENERATED ) THEN
			-- FAIL TRANSACTIONS
			-- for SHIP TXNS it should be 6, whereas for ASN's it shoubd be 5
			-- REVIEW LATER
			l_progress := 'WMSINB-18237';
			RAISE FND_API.G_EXC_ERROR;
		     END IF;
                  END IF;
		Else
		  l_progress := 'WMSINB-18241';
		  -- Create LPN Here
		  if l_lpn_rec.license_plate_number is not null then

		     l_progress := 'WMSINB-18244';

                     -- Set the ASN Variables Here
	             if ( l_lpn_rec.transaction_type = 'SHIP'
                         and l_lpn_rec.source_document_code = 'PO' ) then
                        l_asn_source_header_id := l_lpn_rec.shipment_header_id;
                        l_asn_source_type_id   := 1;
                     Else
                        l_asn_source_header_id := null;
                        l_asn_source_type_id   := null;
                     End if;

		     l_progress := 'WMSINB-18245';

		     create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.license_plate_number,
					   p_lpn_group_id => p_lpn_group_id,
					   p_organization_id => l_lpn_rec.to_organization_id,
					   p_lpn_context => G_LPN_CONTEXT_VENDOR , -- Context should be RESIDES IN VENDOR THIS CASE.
                                           p_source_header_id => l_asn_source_header_id,
                                           p_source_type_id   => l_asn_source_type_id,
					   x_lpn_id => l_lpn_rec.lpn_id,
					   x_return_status => x_return_status,
					   x_msg_count => l_msg_count,
					   x_msg_data => l_msg_data);
		     -- Check the error status from the above call
		     if x_return_status <> G_RET_STS_SUCCESS Then
			--  Review Late Set Appropiate Message
			l_progress := 'WMSINB-18256';
			RAISE FND_API.G_EXC_ERROR;
		     End if;

		     IF (l_lpn_rec.transaction_type = 'SHIP' AND l_lpn_rec.source_document_code = 'PO') THEN
			IF (l_debug = 1) THEN
			   print_debug('Need to call populate_outside_epc for asn import',4);
			END IF;

			get_epc_info(p_mode        => 1
				     ,p_lpn        => l_lpn_rec.license_plate_number
				     ,p_src_grp_id => p_lpn_group_id
				     ,x_epc_column => l_epc_column
				     ,x_epc_value  => l_epc_value
				     );

			IF (l_debug = 1) THEN
			   print_debug('l_epc_column:'||l_epc_column||' l_epc_value:'||l_epc_value,4);
			END IF;

			IF (l_epc_column IS NOT NULL) THEN
			   IF (Nvl(g_lpn_group_id,-999) <> p_lpn_group_id) THEN
			      g_lpn_group_id := p_lpn_group_id;
			      SELECT wms_epc_s2.NEXTVAL
				INTO g_epc_group_id
				FROM dual;
			   END IF;

			   IF (l_debug = 1) THEN
			      print_debug('Calling populate_outside_epc',4);
			      print_debug(' p_group_id       => '||g_epc_group_id,4);
			      print_debug(' p_cross_ref_type => '||1,4);
			      print_debug(' p_epc            => '||l_epc_value,4);
			      print_debug(' p_Lpn_id         => '||l_lpn_rec.lpn_id,4);
			   END IF;

			   wms_epc_pvt.populate_outside_epc
			     (p_group_id        => g_epc_group_id
			      ,p_cross_ref_type => 1 --LPN-EPC
			      ,p_Lpn_id         => l_lpn_rec.lpn_id
			      ,p_epc            => l_epc_value
			      ,x_return_status  => l_return_status
			      ,x_return_mesg    => l_msg_data
			      );

			END IF;--IF (l_epc_column IS NOT NULL) THEN
		     END IF;--IF (l_lpn_rec.transaction_type = 'SHIP' AND l_lpn_rec.source_document_code = 'PO') THEN
		  End if;
	       End if;
	    End if;

	    if ( l_lpn_rec.transaction_type = 'RECEIVE') then
	       --
	       -- Get the Source Name of the LPN
	       --
	       l_progress := 'WMSINB-18267';
               Begin
		  if l_lpn_rec.lpn_id is not null then
		     --
		     -- Case where lpn id is present in RTI
		     --
		     l_progress := 'WMSINB-18273';
		     select RSH.shipment_header_id ,
		       RSH.ASN_TYPE,
		       WLPN.LPN_CONTEXT
		       into l_source_header_id ,
		       l_asn_type,
		       l_lpn_context
		       from WMS_LICENSE_PLATE_NUMBERS WLPN,
		       RCV_SHIPMENT_HEADERS RSH
		       where WLPN.lpn_id = l_lpn_rec.lpn_id
		       AND (
		               ((rsh.receipt_source_code IN ('INVENTORY','INTERNAL ORDER')
		                  AND rsh.organization_id = wlpn.organization_id) --BUG 4730474
		                  and  wlpn.source_header_id is null
		                  and  wlpn.source_name=rsh.shipment_num)
                                  OR
                                 (Nvl(rsh.receipt_source_code,'#$#') NOT IN ('INVENTORY','INTERNAL ORDER')
		                  and rsh.shipment_header_id=wlpn.source_header_id)
			       )
                       and rownum = 1 ; --bug 5749200 rearranged the where clause of the query
		   else
		     --
		     -- Case where lpn_id is not valid or null
		     -- Review Later
		     l_progress := 'WMSINB-18291';
		     l_source_header_id := null;
		     l_asn_type := null;
		     l_lpn_context := null;
		  end if;

	       Exception
		  When others then
		     -- Review Later
		     -- Set appropiate Message
		     l_progress := 'WMSINB-18301';
		     l_source_header_id := null;
		     l_asn_type := null;
		     l_lpn_context := null;
	       End;

	       IF (l_debug = 1) THEN
		  print_debug('VALIDATE_LPN_INFO - Source Header ID:'||l_source_header_id,1);
		  print_debug('VALIDATE_LPN_INFO - ASN Type:'||l_asn_type,1);
		  print_debug('VALIDATE_LPN_INFO - Shipment Num:'||l_lpn_rec.shipment_num,1);
		  print_debug('VALIDATE_LPN_INFO - Shipment Header ID:'||l_lpn_rec.shipment_header_id,1);
	       END If;

	       IF (l_lpn_rec.shipment_header_id IS NULL) THEN
		  IF (l_lpn_rec.shipment_num IS NOT NULL) THEN
		     BEGIN
			SELECT shipment_header_id
			  INTO l_lpn_rec.shipment_header_id
			  FROM rcv_shipment_headers
			  WHERE shipment_num = l_lpn_rec.shipment_num;
		     EXCEPTION
			WHEN OTHERS THEN
			   NULL;
		     END;
		  END IF; --IF (l_lpn_rec.shipment_num IS NOT NULL) THEN
	       END IF; --IF (l_lpn_rec.shipment_header_id IS NULL) THEN

	       IF (l_debug = 1) THEN
		  print_debug('VALIDATE_LPN_INFO - Shipment Header ID NOW:'||l_lpn_rec.shipment_header_id,1);
	       END If;

	       --
	       -- Case where SOURCE in LPN and  SHIPMENT Info MISMATCH in RTI Generate Error
	       --
	       if (l_source_header_id is not null or l_lpn_rec.shipment_header_id is not null) then
		  IF (l_lpn_rec.lpn_id IS NOT NULL AND
		      nvl(l_source_header_id,0) <> nvl(l_lpn_rec.shipment_header_id,0)) then
		     --
		     -- Review Later
		     -- Set appropiate Message
		     --
		     l_progress := 'WMSINB-18322';
		     RAISE fnd_api.g_exc_error;
		  end if;
	       end if;
	       --
           --Bug 13891514 Adding ASBN as well because the validations/processing is same for ASN/ASBN
	       if ( ( Nvl(l_asn_type,'#$#$') in ( 'ASN' , 'ASBN' ) and l_lpn_context not in (G_LPN_CONTEXT_VENDOR ,G_LPN_CONTEXT_PREGENERATED)) or
		    ( l_asn_type is null and l_lpn_context not in (G_LPN_CONTEXT_INTRANSIT ,G_LPN_CONTEXT_PREGENERATED) )) then
		  --
		  -- ASN and LPN_context is not resides in Vendor
		  -- SHIPMENT and LPN_context is not Intransit
		  -- Review Later
		  -- Set appropiate Message
		  --
		  l_progress := 'WMSINB-18335';
		  RAISE fnd_api.g_exc_error;
	       end if;
	    End if; -- Receive

	    if ( l_lpn_rec.transaction_type in ('ACCEPT','REJECT') ) then
	       if l_lpn_rec.lpn_id IS NOT NULL then
		  if l_lpn_context <> G_LPN_CONTEXT_RCV then
		     l_progress := 'WMSINB-18343';
		     -- FAIL TRANSACTIONS
		     -- REVIEW LATER
		     RAISE FND_API.G_EXC_ERROR;
		  End if;
	       End if;
	    End if;  -- Inspect

	    l_progress := 'WMSINB-18351';

	    if ( l_lpn_rec.transaction_type in ('DELIVER','TRANSFER')) then
	       if l_lpn_rec.lpn_id IS NOT NULL then
		  if l_lpn_context <> G_LPN_CONTEXT_RCV then
                     if  l_lpn_rec.transaction_type = 'DELIVER' then
                       BEGIN

                         -- CHECK WHETHER MULTIPLE ROWS EXIST in RTI FOR THE SAME FROM LPN
                         -- THEN FOR SUBSEQUENT LOOPS WITHIN THE SAME LPN GROUP WE
                         -- DON't need to validate context for DELIVER TXN because it
                         -- might have update the lpn context.

                         select count(*) into l_lpn_Count
                           from rcv_transactions_interface
                          where lpn_id = l_lpn_rec.lpn_id
                            and transaction_type ='DELIVER'
                            and interface_transaction_id < l_lpn_rec.interface_transaction_id
                            and lpn_group_id = p_lpn_group_id;

                         if l_lpn_count = 0 then
		           l_progress := 'WMSINB-18357';
		           RAISE FND_API.G_EXC_ERROR;
                         End if;
                       EXCEPTION
                         WHEN OTHERS THEN NULL;
                       END;
                     Else
		       l_progress := 'WMSINB-18358';
		       RAISE FND_API.G_EXC_ERROR;
                     End if;
		  End if;
		  --
		  if ( l_lpn_rec.transaction_type = 'DELIVER') then
		     --
		     null;
		     --
		     -- Commented this call as not needed.
		     --
		     -- INSPECTED MATERIAL EXISTS IN FLPN FAIL THE TXN
		     -- Begin
		     --    select 1
		     --      into l_insp_mat_exists
		     --      from mtl_txn_request_lines mol
		     --      where mol.lpn_id = l_lpn_rec.lpn_id
		     --      and nvl(mol.inspection_status,2) = 1
		     --      and rownum = 1;
		     --    if l_insp_mat_exists = 1 then
		     --       -- FAIL TRANSACTIONS
		     --       -- REVIEW LATER
		     --       RAISE FND_API.G_EXC_ERROR;
		     --    End if;
		     -- Exception
		     --    When no_data_found then
		     --       -- No material with Inspection Reqd. exists ok to procedd with this LPN
		     --       null;
		     --    When Others then
		     --       -- Other Error for checking Inspection Reqd Flag.
		     --       -- FAIL TRANSACTIONS
		     --       -- REVIEW LATER
		     --       RAISE FND_API.G_EXC_ERROR;
		     -- End;
		  End if;
	       End if;
	    End if; -- Deliver Transfer

	    l_progress := 'WMSINB-18395';

	    IF (l_debug = 1) THEN
	       print_debug('VALIDATE_LPN_INFO - From LPN Validation ***PASSED***', 1);
	    END If;

	    if ( l_lpn_rec.transfer_license_plate_number is not null or l_lpn_rec.transfer_lpn_id is not null or
		 l_lpn_rec.transaction_type = 'SHIP' ) then

	       IF (l_debug = 1) THEN
		  print_debug('VALIDATE_LPN_INFO - STARTING Transfer LPN Validation ...', 1);
	       END If;

	       --For a non-wms org if the transfer_lpn is not null
	       --for a deliver transaction then we should fail the txn.
	       IF (NOT wms_install.check_install(x_return_status,l_msg_count,
					      l_msg_data,l_lpn_rec.to_organization_id)) THEN
		  IF (l_lpn_rec.transaction_type = 'DELIVER' OR
		      l_lpn_rec.auto_transact_code = 'DELIVER') THEN
		     l_progress := 'WMSINB-18400';
		     RAISE fnd_api.g_exc_error;
		  END IF;
	       END IF;

	       --
	       -- VALIDATION FOR SHIP  TXN

	       l_progress := 'WMSINB-18415';

	       if (l_lpn_rec.transaction_type = 'SHIP' ) then
		  if ( l_lpn_rec.transfer_license_plate_number is not null
		       or l_lpn_rec.transfer_lpn_id is not null ) then
		     -- TRANSFER LPN SHOULD BE NULL FOR SHIP TXN
		     -- FAIL TRANSACTIONS
		     -- REVIEW LATER
		     l_progress := 'WMSINB-18423';
		     RAISE FND_API.G_EXC_ERROR;
		  End if;
	       End if;

	       --
	       -- VALIDATION FOR DELIVER and TRANSFER TXN
	       -- REVIEW LATER
	       --
	       l_progress := 'WMSINB-18432';

	       -- if l_lpn_rec.transaction_type in ('DELIVER','TRANSFER' ) then
	       if l_lpn_rec.transaction_type in ('DELIVER','TRANSFER','RECEIVE' ) then

                     --Bug 5550783 start
                     IF (l_debug = 1) THEN
                        print_debug('lpn_id and expess_transaction check: ' || l_lpn_rec.express_transaction || ', ' || l_lpn_rec.lpn_id || ', ' || l_lpn_rec.transfer_lpn_id, 1);
                     END If;
                     --Bug 5550783 end

		  if ((l_lpn_rec.lpn_id is not null) and (l_lpn_rec.lpn_id = l_lpn_rec.transfer_lpn_id )) then
                    x_return_status := g_ret_sts_success; --Bug 5550783
                     IF (l_debug = 1) THEN

                        print_debug('l_lpn_rec.express_transaction=' || l_lpn_rec.express_transaction , 1);
                        print_debug('VALIDATE_LPN_INFO - l_lpn_rec.express_transaction check ...', 1);
                        print_debug('VALIDATE_LPN_INFO - x_return_status=' || x_return_status, 1);
                        print_debug('VALIDATE_LPN_INFO - l_lpn_rec.transaction_type=' || l_lpn_rec.transaction_type, 1);
                        print_debug('VALIDATE_LPN_INFO - l_lpn_rec.mobile_txn=' || l_lpn_rec.mobile_txn, 1);
                     END If;

                    --Do not do the validate_total_qty if it is express transaction and also if it is a Mobil Deliver/Transfer
                    if ((l_lpn_rec.express_transaction = 'Y') OR (l_lpn_rec.transaction_type in ('DELIVER','TRANSFER') AND l_lpn_rec.mobile_txn = 'Y')) then--Bug 555078
                         IF (l_debug = 1) THEN
                            print_debug('l_lpn_rec.express_transaction', 1);
                            print_debug('VALIDATE_LPN_INFO - Not doing validate_total_qty ...', 1);
                         END If;

                    Else
                       --
                       -- CALL THE TOTAL QTY VALIDATION API HERE
                       --
                       --
		       l_progress := 'WMSINB-18440';

		       IF (l_debug = 1) THEN

			print_debug('l_lpn_rec.express_transaction', 1);
			print_debug('VALIDATE_LPN_INFO - Before validate_total_qty ...', 1);
		     END If;

		     validate_total_qty(p_lpn_group_id => p_lpn_group_id,
					p_from_lpn_id => l_lpn_rec.lpn_id,
					p_parent_lpn_id => l_cur_from_parent_lpn_id,
					p_transaction_type => l_lpn_rec.transaction_type,
					x_return_status    => x_return_status,
					x_msg_count        => x_msg_count,
					x_msg_data         => x_msg_data);

		     IF (l_debug = 1) THEN
			print_debug('VALIDATE_LPN_INFO - After validate_total_qty :'||x_return_status, 1);
		     END If;
                     End if;--Bug 5550783

		     if x_return_status <> G_RET_STS_SUCCESS Then
			if  l_lpn_rec.transaction_type <> 'RECEIVE' then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-18460';
			   RAISE FND_API.G_EXC_ERROR;
			 Else
			   -- Unpack all from here
			   l_progress := 'WMSINB-18461';
			   IF (l_debug = 1) THEN
			      print_debug('VALIDATE_LPN_INFO - Case for Full UNPACK as QTY MISMATCH' , 1);
			   END If;
			   wms_container_pvt.packunpack_container(
								  p_api_version            => 1.0,
								  p_init_msg_list          => g_false,
								  p_commit                 => g_false,
								  p_validation_level       => fnd_api.g_valid_level_none,
								  x_return_status          => x_return_status,
								  x_msg_count              => x_msg_count,
								  x_msg_data               => x_msg_data,
								  p_lpn_id                 => l_lpn_rec.lpn_id,
								  p_organization_id        => l_lpn_rec.from_organization_id,
								  p_operation              => 2, --- TO UNPACK
								  p_unpack_all             => 1,
								  p_auto_unnest_empty_lpns => 2
								  );
			   if x_return_status <> G_RET_STS_SUCCESS Then
			      l_progress := 'WMSINB-18462';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;

         -- 14408061 Adding the LPN in a table with the group_id
			IF (l_debug = 1) THEN
			   print_debug('Since the LPN is being unpacked, we do not need to unpack at a later stage' , 1);
               print_debug('So storing the lpn and its group id' , 1);
               print_debug('l_lpn_rec.lpn_id: '||l_lpn_rec.lpn_id , 1);
               print_debug('p_lpn_group_id: '||p_lpn_group_id , 1);
			END If;
            g_lpn_tbl(l_lpn_rec.lpn_id) := p_lpn_group_id;
         -- 14408061

			End if;
		     End if;
		  End if;
	       End if;

	       l_progress := 'WMSINB-18467';

	       --
	       -- *********************
	       -- Transfer LPN does not already exists in the system
	       -- This validations is not needed for SHIP TXN
	       -- *********************

	       if (l_lpn_rec.transaction_type <> 'SHIP') then
		  if (l_lpn_rec.transfer_lpn_id is null) then
		     -- Check existence in WLPNI
		     l_progress := 'WMSINB-18478';
		     check_lpn_in_wlpni(l_lpn_rec.transfer_license_plate_number,
					l_lpn_rec.transfer_lpn_id,
					p_lpn_group_id,
					l_wlpni_exists);
		     if (l_wlpni_exists = 0) then
			--
			-- WLPNI does not exists fail the TXN
			-- Review Later
			-- Set appropiate Message
			--
			l_progress := 'WMSINB-18489';
			RAISE FND_API.G_EXC_ERROR;
		      else
			--
			-- WLPNI exists create the LPN
			--
			l_progress := 'WMSINB-18495';
			--
			-- Call API to create LPN
			-- Transfer LPN Context needs to be set properly depending on context.
			--
			-- Call the API get_lpn_context here

			l_to_lpn_context := get_lpn_context(p_transaction_type => l_lpn_rec.transaction_type
							    , p_auto_transact_code => l_lpn_rec.auto_transact_code);

			l_progress := 'WMSINB-18504';

			IF (l_debug = 1) THEN
			   print_debug('VALIDATE_LPN_INFO - NEW LPN - Calling create_lpn_from_wlpni ...', 1);
			END If;

			create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.transfer_license_plate_number,
					      p_lpn_group_id => p_lpn_group_id,
					      p_organization_id => l_lpn_rec.to_organization_id,
					      p_lpn_context => l_to_lpn_context,
					      x_lpn_id => l_lpn_rec.transfer_lpn_id,
					      x_return_status => x_return_status,
					      x_msg_count => l_msg_count,
					      x_msg_data => l_msg_data);
			-- Check the error status from the above call
			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-18521';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     end if;
		   else
		     -- *********************
		     -- Transfer LPN already exists in the system
		     -- *********************

		     -- The following validation needs to be done only when
		     -- from and to lpn is different
		     if (l_lpn_rec.transfer_lpn_id <> nvl(l_lpn_rec.lpn_id,-9999))  then
			-- Validate Locator
			l_progress := 'WMSINB-18534';
			l_lpn_match := 'N';

			IF (l_debug = 1) THEN
			   print_debug('VALIDATE_LPN_INFO - Calling validate_lpn_locator ...', 1);
			END If;

			validate_lpn_locator( p_lpn_id => l_lpn_rec.transfer_lpn_id,
					      p_subinventory => l_lpn_rec.subinventory,
					      p_locator_id   => l_lpn_rec.locator_id,
					      p_organization_id  => l_lpn_rec.to_organization_id,
					      x_lpn_match        => l_lpn_match,
					      x_return_status    => x_return_status,
					      x_msg_count        => x_msg_count,
					      x_msg_data         => x_msg_data);

			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-18552';
			   RAISE FND_API.G_EXC_ERROR;
			End if;

			if l_lpn_match = 'N' then
			   l_progress := 'WMSINB-18557';
			   RAISE FND_API.G_EXC_ERROR;
			End if;

			-- Check Error Status
			if ( (validate_lpn_context(l_lpn_rec.transaction_type,
						  l_lpn_rec.auto_transact_code,
						  l_transfer_lpn_context ) <> TRUE )
			     OR (l_transfer_lpn_context = g_lpn_context_picked
				 AND l_lpn_rec.mmtt_temp_id IS NULL)) THEN
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-18566';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     End if;
		  End if;
	       End if;
	       --
	       --
	       -- Processing for NESTING
	       --
	       --

	       l_progress := 'WMSINB-18578';

	       if l_lpn_rec.transaction_type = 'SHIP' then
		  l_WLPNIQLPN    := l_lpn_rec.license_plate_number;
		  l_WLPNIQLPN_ID := l_lpn_rec.lpn_id;

		  l_validate_sub := l_lpn_rec.subinventory;
		  l_validate_loc_id := l_lpn_rec.locator_id;

		  l_parent_source_name := l_lpn_rec.shipment_num;
		  l_parent_source_type_id := 1;
		  l_parent_source_header_id := l_lpn_rec.shipment_header_id;

		  l_parent_lpn_context := get_lpn_context(p_transaction_type => l_lpn_rec.transaction_type
							  , p_auto_transact_code => l_lpn_rec.auto_transact_code);
		ELSE --if l_lpn_rec.transaction_type = 'SHIP' then
		  l_WLPNIQLPN    := l_lpn_rec.transfer_license_plate_number;
		  l_WLPNIQLPN_ID := l_lpn_rec.transfer_lpn_id;

		  IF (l_lpn_rec.subinventory IS NULL) THEN
		     BEGIN
			SELECT subinventory_code
			  , locator_id
			  INTO l_validate_sub
			  , l_validate_loc_id
			  FROM wms_license_plate_numbers
			  WHERE lpn_id = l_lpn_rec.transfer_lpn_id
			  OR license_plate_number = l_lpn_rec.transfer_license_plate_number;
		     EXCEPTION
			WHEN OTHERS THEN
			   l_validate_sub := NULL;
			   l_validate_loc_id := NULL;
		     END;
		   ELSE
			   l_validate_sub := l_lpn_rec.subinventory;
			   l_validate_loc_id := l_lpn_rec.locator_id;
		  END IF;

		  l_parent_source_name := NULL;
		  l_parent_source_type_id := NULL;
		  l_parent_source_header_id := NULL;

		  l_parent_lpn_context := get_lpn_context(p_transaction_type => l_lpn_rec.transaction_type
							  , p_auto_transact_code => l_lpn_rec.auto_transact_code);
	       END IF; --if l_lpn_rec.transaction_type = 'SHIP' then

	       IF (l_debug = 1) THEN
		  print_debug('VALIDATE_LPN_INFO - Getting into nesting logic ...', 1);
		  print_debug('VALIDATE_LPN_INFO - WLPNQLPN:'||l_wlpniqlpn,1);
		  print_debug('VALIDATE_LPN_INFO - WLPNQLPN_ID:'||l_wlpniqlpn_id,1);
	       END If;

	       Loop
		  -- Initialize
		  l_PTLPN_ID := null;
		  l_PTLPN    := null;
		  l_PTLPN_CONTEXT := null;
		  l_PTLPN_EXISTS := 0;


		  l_WLPNIQLPN_PARENT_LPN_ID := null;

		  l_progress := 'WMSINB-18638';

                  Begin

		     -- We need to make this distinct becasue there might exist multple rows in wlpni
		     -- for the same LPN , but for all those rows the parent should be same

		     select distinct
		       parent_lpn_id,
		       parent_license_plate_number
		       into l_PTLPN_ID,
		       l_PTLPN
		       from wms_lpn_interface wlpni
		       where ( nvl(wlpni.license_plate_number,'-1') = nvl(l_WLPNIQLPN,'-1') or
			       nvl(wlpni.lpn_id,'-1') = nvl(l_WLPNIQLPN_ID,'-1') )
		       and wlpni.source_group_id = p_lpn_group_id;

		     l_progress := 'WMSINB-18655';
		  Exception
		     When no_data_found then
			l_progress := 'WMSINB-18658';
			exit;
		     When others then
			l_progress := 'WMSINB-18661';
			-- Review Later
			-- Set appropiate Message
			--
			RAISE FND_API.G_EXC_ERROR;
		  End;
		  --

		  IF (l_debug = 1) THEN
		     print_debug('VALIDATE_LPN_INFO - FROM WLPNI parent_lpn_id:'||l_PTLPN_ID,1);
		     print_debug('VALIDATE_LPN_INFO - FROM WLPNI parent_lpn:'||l_PTLPN,1);
		  END If;

		  l_progress := 'WMSINB-18674';

		  if (l_PTLPN_ID is not null or l_PTLPN is not null) then
		     --
		     -- Call get_lpn_id

		     l_lpn_state := get_lpn_id(l_PTLPN_ID, l_PTLPN ,
					       l_PTLPN_context,
					       l_cur_ptlpn_parent_lpn_id,
					       l_wlpn_source_header_id) ;

		     --

		     IF (l_debug = 1) THEN
			print_debug('VALIDATE_LPN_INFO - l_PTLPN_context:'||l_PTLPN_context,1);
			print_debug('VALIDATE_LPN_INFO - l_cur_PTLPN_parent_lpn_id:'||l_cur_PTLPN_parent_lpn_id,1);
		     END If;

		     if (l_PTLPN_ID is null ) then
			-- Check existence in WLPNI
			l_progress := 'WMSINB-18691';
			-- Call API to create LPN

			-- Need to set the CONTEXT properly Here. This part might come for
			-- SHIP TXN so handled here
			-- Call the get_lpn_context to set the conext

			l_to_lpn_context := get_lpn_context(p_transaction_type => l_lpn_rec.transaction_type
							    , p_auto_transact_code => l_lpn_rec.auto_transact_code);

			l_progress := 'WMSINB-18700';

			create_lpn_from_wlpni(p_license_plate_number => l_PTLPN,
					      p_lpn_group_id => p_lpn_group_id,
					      p_organization_id => l_lpn_rec.to_organization_id,
					      p_lpn_context => l_to_lpn_context,
                                              p_source_header_id => l_asn_source_header_id,
                                              p_source_type_id   => l_asn_source_type_id,
					      x_lpn_id => l_PTLPN_ID,
					      x_return_status => x_return_status,
					      x_msg_count => l_msg_count,
					      x_msg_data => l_msg_data);
			-- Check error status
			-- Check the error status from the above call
			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-18714';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		      else
			-- *********************
			-- PARENT LPN already exists in the system
			-- *********************
			-- Validate Locator
			l_progress := 'WMSINB-18722';
			l_lpn_match := 'N';
			validate_lpn_locator( p_lpn_id => l_PTLPN_ID,
					      p_subinventory => l_validate_sub,
					      p_locator_id   => l_validate_loc_id,
					      p_organization_id  => l_lpn_rec.to_organization_id,
					      x_lpn_match        => l_lpn_match,
					      x_return_status    => x_return_status,
					      x_msg_count        => x_msg_count,
					      x_msg_data         => x_msg_data);

			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-18735';
			   RAISE FND_API.G_EXC_ERROR;
			End if;

			if l_lpn_match = 'N' then
			   l_progress := 'WMSINB-18740';
			   RAISE FND_API.G_EXC_ERROR;
			End if;

			IF (l_lpn_rec.transaction_type = 'SHIP'
			    AND	(l_lpn_rec.shipment_header_id = l_wlpn_source_header_id)) THEN
			   IF (l_debug = 1) THEN
			      print_debug('VALIDATE_LPN_INFO - LPN Context already validated: '||l_PTLPN_ID,1);
			   END If;
			 ELSE
			   if ( (validate_lpn_context(l_lpn_rec.transaction_type,
						     l_lpn_rec.auto_transact_code,
						     l_PTLPN_CONTEXT ) <> TRUE)
				OR (l_PTLPN_CONTEXT = g_lpn_context_picked
				    AND l_lpn_rec.mmtt_temp_id IS NULL)
				) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-18748';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			END IF; --IF (l_lpn_rec.transaction_type = 'SHIP'
			--

			IF (l_ptlpn_context = g_lpn_context_picked
			    AND l_lpn_rec.mmtt_temp_id IS NOT NULL
			    AND l_lpn_rec.transaction_type = 'DELIVER') THEN
			   l_parent_lpn_context := l_ptlpn_context;
			END IF;
		     end if;
		     --
		     --
		     l_progress := 'WMSINB-18755';
		     get_parent_lpn(l_WLPNIQLPN, l_WLPNIQLPN_PARENT_LPN_ID);
		     --
		     --
		     --l_progress := 'WMSINB-18759';
		     --get_parent_lpn_in_wlpni(l_PTLPN, l_PTLPN_ID, p_lpn_group_id, l_P_PTLPN, l_P_PTLPN_ID);
		     --
		     -- Review the Organization id in call to packunpack.

		     IF (l_debug = 1) THEN
			print_debug('VALIDATE_LPN_INFO - FROM WLPN l_WLPNIQLPN_PARENT_LPN_ID:'||l_WLPNIQLPN_PARENT_LPN_ID,1);
		     END If;

		     if(l_WLPNIQLPN_PARENT_LPN_ID is not null and
			l_WLPNIQLPN_PARENT_LPN_ID <> l_PTLPN_ID )
		       then
			l_progress := 'WMSINB-18771';
			-- Review Later
			-- UNPACK WLPNIQLPN FROM CURRENT PARENT
			-- PACK WLPNIQLPN IN PTLPN

			wms_container_pvt.packunpack_container(
							       p_api_version            => 1.0,
							       p_init_msg_list          => g_false,
							       p_commit                 => g_false,
							       p_validation_level       => fnd_api.g_valid_level_none,
							       x_return_status          => x_return_status,
							       x_msg_count              => l_msg_count,
							       x_msg_data               => l_msg_data,
							       p_lpn_id                 => l_WLPNIQLPN_PARENT_LPN_ID,
							       p_content_lpn_id         => l_WLPNIQLPN_ID,
							       p_organization_id        => l_lpn_rec.from_organization_id,
							       p_operation              => 2 --- TO UNPACK
							       );

			IF (x_return_status <> g_ret_sts_success) THEN
			   IF (l_debug = 1) THEN
			      print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress = ' || l_progress,1);
			   END IF;
			   l_progress := 'WMSINB-18794';
			   RAISE fnd_api.g_exc_error;
			END IF;

			l_progress := 'WMSINB-18798';

			--we need to update the lpn_context and sub/loc for the
			--transfer lpn right here so that it has the right context.
			--we need to do it before the packunpack
			--otherwise packunpack fails

			update_lpn_location_context(p_organization_id => NULL
						    ,p_sub => l_lpn_rec.subinventory
						    ,p_locator => l_lpn_rec.locator_id
						    ,p_lpn_context => l_parent_lpn_context
						    ,p_lpn_id => l_WLPNIQLPN_ID
						    ,x_return_status => x_return_status
						    ,x_msg_count => x_msg_count
						    ,x_msg_data => x_msg_data
						    ,p_source_name => l_parent_source_name
						    ,p_source_header_id => l_parent_source_header_id
						    ,p_source_type_id => l_parent_source_type_id);
			IF (x_return_status <> g_ret_sts_success) THEN
			   --raise an error
			   --review later
			   l_progress := 'WMSINB-18818';
			   RAISE fnd_api.g_exc_error;
			END IF;


			--we need to update the lpn_context for the
			--parent right here so that it has the right context.

			update_lpn_location_context(p_organization_id => NULL
						    ,p_sub => l_lpn_rec.subinventory
						    ,p_locator => l_lpn_rec.locator_id
						    ,p_lpn_context => l_parent_lpn_context
						    ,p_lpn_id => l_PTLPN_ID
						    ,x_return_status => x_return_status
						    ,x_msg_count => x_msg_count
						    ,x_msg_data => x_msg_data
						    ,p_source_name => l_parent_source_name
						    ,p_source_header_id => l_parent_source_header_id
						    ,p_source_type_id => l_parent_source_type_id);
			IF (x_return_status <> g_ret_sts_success) THEN
			   --raise an error
			   --review later
			   l_progress := 'WMSINB-18822';
			   RAISE fnd_api.g_exc_error;
			END IF;

			wms_container_pvt.packunpack_container(
							       p_api_version            => 1.0,
							       p_init_msg_list          => g_false,
							       p_commit                 => g_false,
							       p_validation_level       => fnd_api.g_valid_level_none,
							       x_return_status          => x_return_status,
							       x_msg_count              => l_msg_count,
							       x_msg_data               => l_msg_data,
							       p_lpn_id                 => l_PTLPN_ID,
							       p_content_lpn_id         => l_WLPNIQLPN_ID,
							       p_organization_id        => l_lpn_rec.to_organization_id,
							       p_operation              => 1 --- TO PACK
							       );
			IF (x_return_status <> g_ret_sts_success) THEN
			   IF (l_debug = 1) THEN
			      print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress = ' || l_progress,1);
			   END IF;
			   l_progress := 'WMSINB-18841';
			   RAISE fnd_api.g_exc_error;
			END IF;

		      else
			l_progress := 'WMSINB-18869';
			if  l_WLPNIQLPN_PARENT_LPN_ID is null then
			   l_progress := 'WMSINB-18871';

			   --we need to update the lpn_context and sub/loc for the
			   --transfer lpn right here so that it has the right context.
			   --we need to do it before the packunpack
			   --otherwise packunpack fails
			   IF (l_debug = 1) THEN
			      print_debug('Going to update the lpn:'|| l_WLPNIQLPN_ID,1);
			   END IF;

			   update_lpn_location_context(p_organization_id => NULL
						       ,p_sub => l_lpn_rec.subinventory
						       ,p_locator => l_lpn_rec.locator_id
						       ,p_lpn_context => l_parent_lpn_context
						       ,p_lpn_id => l_WLPNIQLPN_ID
						       ,x_return_status => x_return_status
						       ,x_msg_count => x_msg_count
						       ,x_msg_data => x_msg_data
						       ,p_source_name => l_parent_source_name
						       ,p_source_header_id => l_parent_source_header_id
						       ,p_source_type_id => l_parent_source_type_id);
			   IF (x_return_status <> g_ret_sts_success) THEN
			      --raise an error
			      --review later
			      l_progress := 'WMSINB-18891';
			      RAISE fnd_api.g_exc_error;
			   END IF;

			   --we need to update the lpn_context for the
			   --parent right here so that it has the right context.

			   update_lpn_location_context(p_organization_id => NULL
						       ,p_sub => l_lpn_rec.subinventory
						       ,p_locator => l_lpn_rec.locator_id
						       ,p_lpn_context => l_parent_lpn_context
						       ,p_lpn_id => l_PTLPN_ID
						       ,x_return_status => x_return_status
						       ,x_msg_count => x_msg_count
						       ,x_msg_data => x_msg_data
						       ,p_source_name => l_parent_source_name
						       ,p_source_header_id => l_parent_source_header_id
						       ,p_source_type_id => l_parent_source_type_id);
			   IF (x_return_status <> g_ret_sts_success) THEN
			      --raise an error
			      --review later
			      l_progress := 'WMSINB-18895';
			      RAISE fnd_api.g_exc_error;
			   END IF;

			   -- Review Later
			   --PACK WLPNIQLPN IN PTLPN
			      IF (l_debug = 1) THEN
			     print_debug('Calling packunpack_container',1);
  		           END IF;

		          /* Bug 4624542-Passing the parameters p_source_name and
			   p_source_header_id to packunpack_container */

			   wms_container_pvt.packunpack_container(
								  p_api_version            => 1.0,
								  p_init_msg_list          => g_false,
								  p_commit                 => g_false,
								  p_validation_level       => fnd_api.g_valid_level_none,
								  x_return_status          => x_return_status,
								  x_msg_count              => l_msg_count,
								  x_msg_data               => l_msg_data,
								  p_lpn_id                 => l_PTLPN_ID,
								  p_content_lpn_id         => l_WLPNIQLPN_ID,
								  p_organization_id        => l_lpn_rec.to_organization_id,
								  p_operation              => 1, --- TO PACK
								  p_source_name            => l_parent_source_name, --Bug 4624542
							          p_source_header_id       => l_parent_source_header_id --Bug 4624542

								  );
			   IF (x_return_status <> g_ret_sts_success) THEN
			      IF (l_debug = 1) THEN
				 print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress = ' || l_progress,1);
			      END IF;
			      l_progress := 'WMSINB-18917';
			      RAISE fnd_api.g_exc_error;
			   END IF;
			end if;
		     end if;
		   else -- **** where PTLPN and PTLPN_ID is both null in WLPNI
		     --
		     l_progress := 'WMSINB-18944';
		     get_parent_lpn(l_WLPNIQLPN, l_WLPNIQLPN_PARENT_LPN_ID);
		     --

		     IF (l_debug = 1) THEN
			print_debug('VALIDATE_LPN_INFO - FROM WLPN l_WLPNIQLPN_PARENT_LPN_ID:'||l_WLPNIQLPN_PARENT_LPN_ID,1);
		     END If;

		     if l_WLPNIQLPN_PARENT_LPN_ID is not null then
			l_progress := 'WMSINB-18953';
			-- Call UNPACK API to unpack this LPN from parent LPN
			-- Review Later
			wms_container_pvt.packunpack_container(
							       p_api_version            => 1.0,
							       p_init_msg_list          => g_false,
							       p_commit                 => g_false,
							       p_validation_level       => fnd_api.g_valid_level_none,
							       x_return_status          => x_return_status,
							       x_msg_count              => l_msg_count,
							       x_msg_data               => l_msg_data,
							       p_lpn_id                 => l_WLPNIQLPN_PARENT_LPN_ID,
							       p_content_lpn_id         => l_WLPNIQLPN_ID,
							       p_organization_id        => l_lpn_rec.to_organization_id,  --bug for 13726378: change: from from_organization_id to to_orgnization_id
							       p_operation              => 2 --- TO UNPACK
							       );
			IF (x_return_status <> g_ret_sts_success) THEN
			   IF (l_debug = 1) THEN
			      print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress = ' || l_progress,1);
			   END IF;
			   l_progress := 'WMSINB-18973';
			   RAISE fnd_api.g_exc_error;
			END IF;
			l_progress := 'WMSINB-18976';
		     end if;
		  end if;

		  --
		  -- Reinitialize for the next loop

		  l_progress := 'WMSINB-18983';

		  IF (l_debug = 1) THEN
		     print_debug('VALIDATE_LPN_INFO: Before deleting wlpni l_progess = '|| l_progress, 1);
		  END If;

		  delete_wlpni(p_lpn_group_id,l_WLPNIQLPN_ID,l_WLPNIQLPN,x_return_status,x_msg_count,x_msg_data);

		  l_progress := 'WMSINB-18991';

		  IF (l_debug = 1) THEN
		     print_debug('VALIDATE_LPN_INFO: after deleting wlpni l_progess = '|| l_progress, 1);
		  END If;

		  l_WLPNIQLPN    := l_PTLPN;
		  l_WLPNIQLPN_ID := l_PTLPN_ID;

		  if (l_WLPNIQLPN is null and l_WLPNIQLPN_ID is null ) then
		     -- If PARENT is null, no change in nesting so exit from loop
		     exit;
		  End if;

	       End Loop;

	       IF (l_debug = 1) THEN
		  print_debug('VALIDATE_LPN_INFO - Done with Nesting ...',1);
	       END IF;
	       --
	       --
	       -- **** LPN and TRANSFER LPN ARE SAME ************
	       --
	       l_progress := 'WMSINB-19014';

	       -- The following can happen only in case for existing LPN's so
	       -- in that case both the lpn_id, transfer_lpn_id, lpn, transfer_lpn
	       -- must have been derived by the system
	       --
	       if ( (l_lpn_rec.lpn_id = l_lpn_rec.transfer_lpn_id) and
		    (l_lpn_rec.license_plate_number = l_lpn_rec.transfer_license_plate_number) ) then
		  --
		  l_progress := 'WMSINB-19023';

		  l_PTLPN := null;
		  l_PTLPN_ID := null;

		  get_parent_lpn(l_lpn_rec.transfer_license_plate_number, l_PTLPN_ID);

		  -- Validate Locator
		  l_progress := 'WMSINB-19031';

		  l_lpn_state := get_lpn_id(l_PTLPN, l_PTLPN_ID,
					    l_PTLPN_CONTEXT,
					    l_cur_ptlpn_parent_lpn_id,
					    l_wlpn_source_header_id);

		  if (l_PTLPN_ID is not null ) then
		     null;
		  end if;
	       end if;
	    end if;
	 end if; -- End of RECEIVE, DELIVER, TRANSFER, SHIP txn


	 if (l_lpn_rec.transaction_type in ('CORRECT','RETURN TO VENDOR','RETURN TO RECEIVING', 'RETURN TO CUSTOMER'))
	   then

	    l_progress := 'WMSINB-19046';
	    -- Get The Parent Txn Details
            Begin
	       select transaction_type
		 into l_parent_txn_type
		 from rcv_transactions rt
		 where rt.transaction_id = l_lpn_rec.parent_transaction_id;
	    Exception
	       When others then
		  -- Review Later
		  -- Set appropiate Message
		  --
		  null;
	    End;

	    -- Get The Grand Parent Txn Details
	    -- May not be Needed for ALL CASES
            Begin
	       select parent_transaction_id
		 into l_parent_parent_txn_id
		 from rcv_transactions rt
		 where rt.transaction_id = l_lpn_rec.parent_transaction_id;
	    Exception
	       When others then
		  null;
	    End;

	    -- Get The Grand Parent Txn TYPE Details
	    -- May not be Needed for ALL CASES
            Begin
	       select transaction_type
		 into l_parent_parent_txn_type
		 from rcv_transactions rt
		 where rt.transaction_id = l_parent_parent_txn_id;
	    Exception
	       When others then
		  null;
	    End;

	    -- Get The Grand Grand Parent Txn Details
	    -- May not be Needed for ALL CASES
            Begin
	       select parent_transaction_id
		 into l_parent_parent_parent_txn_id
		 from rcv_transactions rt
		 where rt.transaction_id = l_parent_parent_txn_id;
	    Exception
	       When others then
		  null;
	    End;

	    l_progress := 'WMSINB-19097';

	    l_rs_ptid_exists := validate_rs(null,
					    l_lpn_rec.parent_transaction_id,
					    l_rs_ptid_lpn_id );

	    l_rs_ptid_ptid_exists := validate_rs(null,
						 l_parent_parent_txn_id,
						 l_rs_ptid_ptid_lpn_id );

	    l_rs_ptid_ptid_ptid_exists := validate_rs(null,
						      l_parent_parent_parent_txn_id,
						      l_rs_ptid_ptid_ptid_lpn_id );

	    IF (l_debug = 1) THEN
	       print_debug('VALIDATE_LPN_INFO: l_rs_ptid_lpn_id:'||l_rs_ptid_lpn_id,1);
	       print_debug('VALIDATE_LPN_INFO: l_rs_ptid_ptid_lpn_id:'||l_rs_ptid_ptid_lpn_id,1);
	       print_debug('VALIDATE_LPN_INFO: l_rs_ptid_ptid_ptid_lpn_id:'||l_rs_ptid_ptid_ptid_lpn_id,1);
	    END IF;

	    l_progress := 'WMSINB-19112';

	    -- START OF NEGATIVE CORRECTION
	    if (l_lpn_rec.transaction_type = 'CORRECT' and l_lpn_rec.quantity < 0 ) then  -- START OF NEGATIVE CORRECTION

	       if l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER','DELIVER') then

		  if (l_lpn_rec.transfer_license_plate_number is not null or l_lpn_rec.transfer_lpn_id is not null) then

		     if l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER') then
			l_progress := 'WMSINB-19122';
			if l_lpn_rec.transfer_lpn_id is null then
			   --  TRANSFER LPN DOES NOT EXIST IN THE SYSTEM
			   -- FAIL the TXN
			   -- Review Later
			   -- Set appropiate Message
			   --
			   l_progress := 'WMSINB-19129';
			   RAISE FND_API.G_EXC_ERROR;
			 else
			   -- TRANSFER LPN EXISTS in THE SYSTEM
			   if l_transfer_lpn_context <> G_LPN_CONTEXT_RCV then
			      -- Transfer LPN Context Invalid for this TXN
			      -- FAIL the TXN
			      -- Review Later
			      -- Set appropiate Message
			      --
			      l_progress := 'WMSINB-19139';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			   l_progress := 'WMSINB-19142';
			   --
			   -- START CHECKING IN RCV_SUPPLY
			   -- IF RS.PTID.TLPN NOT EXISTS THEN FAIL TXN

			   if ( (l_rs_ptid_Exists <> TRUE) or ( nvl(l_lpn_rec.transfer_lpn_id,0) <>
								nvl(l_rs_ptid_lpn_id,-9999)) ) then
			      --
			      -- FAIL the TXN
			      -- Review Later
			      -- Set appropiate Message
			      --
			      l_progress := 'WMSINB-19154';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if; -- End of RECEIVE','ACCEPT','REJECT','TRANSFER TXN

		     l_progress := 'WMSINB-19160';

		     if l_parent_txn_type in ('DELIVER') then
			if l_lpn_rec.transfer_lpn_id is null then
			   --  TRANSFER LPN DOES NOT EXIST IN THE SYSTEM
			   -- FAIL the TXN
			   -- Review Later
			   -- Set appropiate Message
			   --
			   l_progress := 'WMSINB-19169';
			   RAISE FND_API.G_EXC_ERROR;
			 else
			   -- TRANSFER LPN EXISTS in THE SYSTEM
			   if l_transfer_lpn_context <> G_LPN_CONTEXT_INV then
			      -- Transfer LPN Context Invalid for this TXN
			      -- FAIL the TXN
			      -- Review Later
			      -- Set appropiate Message
			      --
			      l_progress := 'WMSINB-19179';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;

--Start Bug:14805517
 IF (l_lpn_rec.lpn_id = l_lpn_rec.transfer_lpn_id) THEN

 l_WLPNIQLPN    := l_lpn_rec.license_plate_number;
 l_WLPNIQLPN_ID := l_lpn_rec.lpn_id;

 l_WLPNIQLPN_PARENT_LPN_ID := null;


l_progress := 'WMSINB-19180';

get_parent_lpn(l_WLPNIQLPN, l_WLPNIQLPN_PARENT_LPN_ID);
		     --
    IF (l_debug = 1) THEN
      print_debug('VALIDATE_LPN_INFO - FROM WLPN l_WLPNIQLPN_PARENT_LPN_ID Inside Negative Correction:'||l_WLPNIQLPN_PARENT_LPN_ID,1);
    END If;

	if l_WLPNIQLPN_PARENT_LPN_ID is not null then
			l_progress := 'WMSINB-19181';
			-- Call UNPACK API to unpack this LPN from parent LPN
			-- Review Later
			wms_container_pvt.packunpack_container(
							       p_api_version            => 1.0,
							       p_init_msg_list          => g_false,
							       p_commit                 => g_false,
							       p_validation_level       => fnd_api.g_valid_level_none,
							       x_return_status          => x_return_status,
							       x_msg_count              => l_msg_count,
							       x_msg_data               => l_msg_data,
							       p_lpn_id                 => l_WLPNIQLPN_PARENT_LPN_ID,
							       p_content_lpn_id         => l_WLPNIQLPN_ID,
							       p_organization_id        => l_lpn_rec.to_organization_id,  --bug for 13726378: change: from from_organization_id to to_orgnization_id
							       p_operation              => 2 --- TO UNPACK
							       );
			IF (x_return_status <> g_ret_sts_success) THEN
			   IF (l_debug = 1) THEN
			      print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress Inside negative Correction = ' || l_progress,1);
			   END IF;
			   l_progress := 'WMSINB-19182';
			   RAISE fnd_api.g_exc_error;
			END IF;
			l_progress := 'WMSINB-19183';

    END IF ;

 END IF;

--End  Bug:14805517


			End if;
		     End if;  -- End of DELIVER TXN

		   Else -- Transfer LPN is null case
		     if l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER','DELIVER') then
			if ( l_rs_ptid_lpn_id is not null) then
			   -- FAIL the TXN
			   -- Review Later
			   -- Set appropiate Message
			   --
			   l_progress := 'WMSINB-19192';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     End if;
		  End if; -- End of Transfer LPN Not null

		  l_progress := 'WMSINB-19198';

		  if (l_lpn_rec.lpn_id is not null or l_lpn_rec.license_plate_number is not null) then
		     if l_parent_txn_type in ('RECEIVE') then
			-- FAIL the TXN
			-- Review Later
			-- Set appropiate Message
			--
			l_progress := 'WMSINB-19206';
			RAISE FND_API.G_EXC_ERROR;
		     End if;

		     IF ( ( NVL(l_lpn_rec.lpn_id,0) <> NVL(l_lpn_rec.transfer_lpn_id,0) ) OR
			  ( NVL(l_lpn_rec.license_plate_number,'-9999') <> NVL(l_lpn_rec.transfer_license_plate_number,'-9999') )
			  ) THEN

			IF l_parent_txn_type in ('ACCEPT','REJECT','TRANSFER','DELIVER') THEN
			   IF ( l_rs_ptid_ptid_exists <> TRUE ) THEN
			      IF l_lpn_rec.lpn_id IS NOT NULL THEN
				 IF l_lpn_context NOT IN (G_LPN_CONTEXT_RCV, G_LPN_CONTEXT_PREGENERATED) THEN
				    -- FAIL the TXN
				    -- Review Later
				    -- Set appropiate Message
				    --
				    l_progress := 'WMSINB-19222';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
				 -- Validate Locator
				 -- Review Later
				 l_lpn_match := 'N';
				 validate_lpn_locator( p_lpn_id => l_lpn_rec.lpn_id,
						       p_subinventory => l_lpn_rec.subinventory,
						       p_locator_id   => l_lpn_rec.locator_id,
						       p_organization_id  => l_lpn_rec.to_organization_id,
						       x_lpn_match        => l_lpn_match,
						       x_return_status    => x_return_status,
						       x_msg_count        => x_msg_count,
						       x_msg_data         => x_msg_data);

				 l_progress := 'WMSINB-19237';
				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19240';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

				 l_progress := 'WMSINB-19244';

				 if l_lpn_match = 'N' then
				    l_progress := 'WMSINB-19247';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			       Else -- Create LPN with context as 3
				 -- Create LPN Here
				 l_progress := 'WMSINB-19252';
				 create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.license_plate_number,
						       p_lpn_group_id => p_lpn_group_id,
						       p_organization_id => l_lpn_rec.to_organization_id,
						       p_lpn_context => G_LPN_CONTEXT_RCV ,
						       x_lpn_id => l_lpn_rec.lpn_id,
						       x_return_status => x_return_status,
						       x_msg_count => l_msg_count,
						       x_msg_data => l_msg_data);
				 -- Check the error status from the above call
				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19264';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			      End if;
			    Else -- RS.PTID.PTID Exists case supply LPN and FROM LPN SHOULD MATCH
			      if (nvl(l_rs_ptid_ptid_lpn_id,-9999) <> nvl(l_lpn_rec.lpn_id,0) ) then
				 -- FAIL the TXN
				 -- Review Later
				 -- Set appropiate Message
				 --
				 l_progress := 'WMSINB-19274';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if;
			End if;  -- END OF ACCEPT/REJECT/TRANSFER/DELIVER
		      Elsif (l_lpn_rec.lpn_id = l_lpn_rec.transfer_lpn_id) then  -- FLPN and TLPN SAME
			if l_parent_txn_type in ('ACCEPT','REJECT','TRANSFER','DELIVER') then
			   if ( l_rs_ptid_ptid_exists = TRUE ) then
			      if (nvl(l_rs_ptid_ptid_lpn_id,-9999) <> l_lpn_rec.lpn_id ) then
				 -- FAIL the TXN
				 -- Review Later
				 -- Set appropiate Message
				 --
				 l_progress := 'WMSINB-19287';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if;
			End if;

			-- Total QTY Validation and LOCATOR validation for Deliver Txn

			l_progress := 'WMSINB-19295';
			l_lpn_match := 'N';
			validate_lpn_locator( p_lpn_id => l_lpn_rec.lpn_id,
					      p_subinventory => l_lpn_rec.from_subinventory,
					      p_locator_id   => l_lpn_rec.from_locator_id,
					      p_organization_id  => l_lpn_rec.to_organization_id,
					      x_lpn_match        => l_lpn_match,
					      x_return_status    => x_return_status,
					      x_msg_count        => x_msg_count,
					      x_msg_data         => x_msg_data);

			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19308';
			   RAISE FND_API.G_EXC_ERROR;
			End if;

			if ( (l_parent_txn_type in ('DELIVER')) or (l_lpn_match = 'N') ) then
			   -- Call Total QTY VALIDATION API HERE
			   validate_total_qty(p_lpn_group_id => p_lpn_group_id,
					      p_from_lpn_id => l_lpn_rec.lpn_id,
					      p_parent_lpn_id => l_cur_from_parent_lpn_id,
					      p_transaction_type => l_lpn_rec.transaction_type,
					      x_return_status    => x_return_status,
					      x_msg_count        => x_msg_count,
					      x_msg_data         => x_msg_data);

			   l_progress := 'WMSINB-19322';

			   if x_return_status <> G_RET_STS_SUCCESS Then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19326';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if;
		  End if; -- End of From LPN not null

	       End if; -- END OF PARENT TXN TYPE IN RECEIVE ACCEPT REJECT TRANSFER DELIVER
	       --

	       l_progress := 'WMSINB-19336';

	       if l_parent_txn_type in ('RETURN TO VENDOR','RETURN TO RECEIVING', 'RETURN TO CUSTOMER') then

		  l_progress := 'WMSINB-19340';

		  if (l_lpn_rec.transfer_license_plate_number is not null) then
		     if l_parent_txn_type in ('RETURN TO VENDOR', 'RETURN TO CUSTOMER') then
			-- FAIL THE TXN
			--  Review Late Set Appropiate Message
			l_progress := 'WMSINB-19346';
			RAISE FND_API.G_EXC_ERROR;
		     End if;

		     if l_parent_txn_type in ('RETURN TO RECEIVING') then
			if l_lpn_rec.transfer_lpn_id is null then
			   -- TRANSFER LPN DOES NOT EXISTS FAIL THE TXN
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19354';
			   RAISE FND_API.G_EXC_ERROR;
			 Else
			   -- TRANSFER LPN EXIST
			   if l_transfer_lpn_context <> G_LPN_CONTEXT_RCV then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19360';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			   --
			   if ( ( l_rs_ptid_ptid_ptid_exists <> TRUE ) or ( l_lpn_rec.transfer_lpn_id <> nvl(l_rs_ptid_ptid_ptid_lpn_id,-9999)) ) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19366';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if; -- END OF RTR
		   Else    -- TRANSFER LPN NULL
		     if l_parent_txn_type in ('RETURN TO RECEIVING') then
			if l_rs_ptid_ptid_ptid_lpn_id is not null then -- SUPPLY EXISTS WITH LPN SO FAIL THE TXN
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19375';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     End if;
		  End if; -- END OF TRANSFER LPN NULL

		  if (l_lpn_rec.lpn_id is not null or l_lpn_rec.license_plate_number is not null ) then
		     if ( ( nvl(l_lpn_rec.lpn_id,0) <> nvl(l_lpn_rec.transfer_lpn_id,0) ) or
			  ( nvl(l_lpn_rec.license_plate_number,'-9999') <> nvl(l_lpn_rec.transfer_license_plate_number,'-9999') )
			  ) then
			if l_parent_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER') then
			   if l_rs_ptid_ptid_exists <> TRUE then
			      if l_lpn_rec.lpn_id is not null then
				 if l_lpn_context not in (G_LPN_CONTEXT_RCV , G_LPN_CONTEXT_PREGENERATED ) then
				    -- FAIL the TXN
				    -- Review Later
				    -- Set appropiate Message
				    --
				    l_progress := 'WMSINB-19393';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
				 -- Validate Locator
				 -- Review Later
				 l_lpn_match := 'N';
				 validate_lpn_locator( p_lpn_id => l_lpn_rec.lpn_id,
						       p_subinventory => l_lpn_rec.from_subinventory,
						       p_locator_id   => l_lpn_rec.from_locator_id,
						       p_organization_id  => l_lpn_rec.to_organization_id,
						       x_lpn_match        => l_lpn_match,
						       x_return_status    => x_return_status,
						       x_msg_count        => x_msg_count,
						       x_msg_data         => x_msg_data);

				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19410';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

				 if l_lpn_match = 'N' then
				    l_progress := 'WMSINB-19415';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			       Else -- LPN ID NULL CASE
				 -- Create LPN Here
				 create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.license_plate_number,
						       p_lpn_group_id => p_lpn_group_id,
						       p_organization_id => l_lpn_rec.to_organization_id,
						       p_lpn_context => G_LPN_CONTEXT_RCV ,
						       x_lpn_id => l_lpn_rec.lpn_id,
						       x_return_status => x_return_status,
						       x_msg_count => l_msg_count,
						       x_msg_data => l_msg_data);
				 -- Check the error status from the above call
				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19431';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			      End if;
			    Else -- RS.PTID.PTID EXISTS
			      if (nvl(l_rs_ptid_ptid_lpn_id, -9999) <> l_lpn_rec.lpn_id ) then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19438';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if;
			End if; -- END OF PTID.PTID.TXNTYPE IN RECEIVE/ACCEPT/REJECT/TRANSFER

			if l_parent_parent_txn_type in ('DELIVER') then
			   if l_lpn_rec.lpn_id is not null then
			      if l_lpn_context not in (G_LPN_CONTEXT_INV , G_LPN_CONTEXT_PREGENERATED) then
				 -- FAIL the TXN
				 -- Review Later
				 -- Set appropiate Message
				 --
				 l_progress := 'WMSINB-19451';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			      -- Validate Locator
			      -- Review Later
			      l_lpn_match := 'N';
			      validate_lpn_locator( p_lpn_id => l_lpn_rec.lpn_id,
						    p_subinventory => l_lpn_rec.from_subinventory,
						    p_locator_id   => l_lpn_rec.from_locator_id,
						    p_organization_id  => l_lpn_rec.to_organization_id,
						    x_lpn_match        => l_lpn_match,
						    x_return_status    => x_return_status,
						    x_msg_count        => x_msg_count,
						    x_msg_data         => x_msg_data);

			      l_progress := 'WMSINB-19466';
			      if x_return_status <> G_RET_STS_SUCCESS Then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19469';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;

			      if l_lpn_match = 'N' then
				 l_progress := 'WMSINB-19474';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			    Else -- LPN ID NULL CASE
			      -- Create LPN Here
			      l_progress := 'WMSINB-19479';
			      create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.license_plate_number,
						    p_lpn_group_id => p_lpn_group_id,
						    p_organization_id => l_lpn_rec.to_organization_id,
						    p_lpn_context => G_LPN_CONTEXT_INV,
						    x_lpn_id => l_lpn_rec.lpn_id,
						    x_return_status => x_return_status,
						    x_msg_count => l_msg_count,
						    x_msg_data => l_msg_data);
			      -- Check the error status from the above call
			      if x_return_status <> G_RET_STS_SUCCESS Then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19491';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if; -- END OF LPN ID NOT NULL CASE
			End if; --END OF PTID.TXNTYPE DELIVER
		      Elsif (l_lpn_rec.lpn_id = l_lpn_rec.transfer_lpn_id) then
                     --Bug 5550783 start
                     IF (l_debug = 1) THEN
                        print_debug('expess_transaction check: ' || l_lpn_rec.express_transaction, 1);
                     END If;
                     --Bug 5550783 end
                     --Do not do the validate_total_qty if it is express transaction and also if it is a Mobil Deliver/Transfer
                     if ((l_lpn_rec.express_transaction = 'Y') OR (l_lpn_rec.transaction_type in ('DELIVER','TRANSFER') AND l_lpn_rec.mobile_txn = 'Y')) then--Bug 555078
                         IF (l_debug = 1) THEN
                            print_debug('l_lpn_rec.express_transaction', 1);
                            print_debug('VALIDATE_LPN_INFO - Not doing validate_total_qty ...', 1);
                         END If;

                     Else
                     print_debug('l_lpn_rec.express_transaction-1', 1);
                        -- Call Total QTY VALIDATION API HERE
			l_progress := 'WMSINB-19498';
			validate_total_qty(p_lpn_group_id => p_lpn_group_id,
					   p_from_lpn_id => l_lpn_rec.lpn_id,
					   p_parent_lpn_id => l_cur_from_parent_lpn_id,
					   p_transaction_type => l_lpn_rec.transaction_type,
					   x_return_status    => x_return_status,
					   x_msg_count        => x_msg_count,
					   x_msg_data         => x_msg_data);

			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19509';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
                       End if;--Bug 5550783
		     End if; -- END OF TLPN and FLPN DIFFERENT
		   Else -- FROM LPN NULL
		     l_progress := 'WMSINB-19514';
		     if l_parent_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER') then
			if ( l_rs_ptid_ptid_exists = TRUE and l_rs_ptid_ptid_lpn_id is not null) then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19518';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     End if;
		  End if; -- END OF FROM LPN NOT NULL CASE
	       End if; --END OF RTR RTV RTC

	       -- ******************************************************
	       -- END OF NEGATIVE CORRECTION
	       --************************************************************

	       -- START OF POSITIVE CORRECTION

	     Elsif ( ( l_lpn_rec.transaction_type = 'CORRECT' and l_lpn_rec.quantity > 0 )
		     or (l_lpn_rec.transaction_type in ('RETURN TO VENDOR','RETURN TO RECEIVING', 'RETURN TO CUSTOMER')) ) then

	       l_progress := 'WMSINB-19534';

	       if l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER','DELIVER') then
		  l_progress := 'WMSINB-19537';

		  if ( l_lpn_rec.lpn_id is not null or l_lpn_rec.license_plate_number is not null ) then
		     if (l_parent_txn_type = 'RECEIVE' and l_lpn_rec.transaction_type = 'CORRECT') then
			--  Review Late Set Appropiate Message
			l_progress := 'WMSINB-19542';
			RAISE FND_API.G_EXC_ERROR;
		     End if;

		     if l_lpn_rec.lpn_id is null then
			--  Review Late Set Appropiate Message
			l_progress := 'WMSINB-19548';
			RAISE FND_API.G_EXC_ERROR;
		      Else -- FLPN Exists
			if l_lpn_rec.transaction_type = 'CORRECT' then
			   if l_lpn_context not in (G_LPN_CONTEXT_RCV ) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19554';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;

			   -- Case WHERE FROM LPN and SUPPLY LPN mismatch fail the TXN
			   if (l_lpn_rec.lpn_id <> nvl(l_rs_ptid_ptid_lpn_id,-9999)) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19561';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			 Else -- case for RTV/RTR/RTC
			   if l_parent_txn_type in ('DELIVER') then
			      if l_lpn_context not in (G_LPN_CONTEXT_INV) then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19568';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			    Else
			      if l_lpn_context not in (G_LPN_CONTEXT_RCV) then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19574';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			      if ( ( l_rs_ptid_exists <> TRUE ) or (l_lpn_rec.lpn_id <> nvl(l_rs_ptid_lpn_id, -9999)) ) then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19579';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if; -- END OF parent_txn_type as DELIVER
			End if; -- END OF TXNTYPE CORRECT
		     End if; -- WLPN.FLPN exists CASE
		   Else -- CASE WHERE FLPN IS NULL
		     if l_lpn_rec.transaction_type in ('CORRECT') then
			if (l_rs_ptid_ptid_exists = TRUE) then
			   if (l_rs_ptid_ptid_lpn_id is not null) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19590';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		      Else  -- Transaction for RTV/RTR/RTC
			if (l_rs_ptid_exists = TRUE ) then
			   if (l_rs_ptid_ptid_lpn_id is not null ) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19598';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if; -- END OF transaction_type CORRECT
		  End if; -- END OF FLPN NOT NULL CASE

		  if (l_lpn_rec.transfer_lpn_id is not null or l_lpn_rec.transfer_license_plate_number is not null ) then
		     if ( ( nvl(l_lpn_rec.lpn_id,0) <> nvl(l_lpn_rec.transfer_lpn_id,0) ) or
			  ( nvl(l_lpn_rec.license_plate_number,'-9999') <> nvl(l_lpn_rec.transfer_license_plate_number,'-9999') )
			  ) then
			l_progress := 'WMSINB-19609';
			if l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER') then
			   if l_lpn_rec.transaction_type in ('CORRECT') then
			      if (l_rs_ptid_ptid_exists <> TRUE) then
				 if l_lpn_rec.transfer_lpn_id is not null then
				    if l_transfer_lpn_context not in (G_LPN_CONTEXT_RCV ,G_LPN_CONTEXT_PREGENERATED ) then
				       --  Review Late Set Appropiate Message
				       l_progress := 'WMSINB-19616';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;

				    -- Validate Locator
				    -- Review Later
				    l_lpn_match := 'N';
				    validate_lpn_locator( p_lpn_id => l_lpn_rec.transfer_lpn_id,
							  p_subinventory => l_lpn_rec.subinventory,
							  p_locator_id   => l_lpn_rec.locator_id,
							  p_organization_id  => l_lpn_rec.to_organization_id,
							  x_lpn_match        => l_lpn_match,
							  x_return_status    => x_return_status,
							  x_msg_count        => x_msg_count,
							  x_msg_data         => x_msg_data);

				    l_progress := 'WMSINB-19632';

				    if x_return_status <> G_RET_STS_SUCCESS Then
				       --  Review Late Set Appropiate Message
				       l_progress := 'WMSINB-19636';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;

				    if l_lpn_match = 'N' then
				       l_progress := 'WMSINB-19641';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;
				  Else
				    -- Create LPN Here
				    l_progress := 'WMSINB-19646';
				    create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.transfer_license_plate_number,
							  p_lpn_group_id => p_lpn_group_id,
							  p_organization_id => l_lpn_rec.to_organization_id,
							  p_lpn_context => G_LPN_CONTEXT_RCV,
							  x_lpn_id => l_lpn_rec.transfer_lpn_id,
							  x_return_status => x_return_status,
							  x_msg_count => l_msg_count,
							  x_msg_data => l_msg_data);
				    -- Check the error status from the above call
				    if x_return_status <> G_RET_STS_SUCCESS Then
				       --  Review Late Set Appropiate Message
				       l_progress := 'WMSINB-19658';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;
				 End if;
			       Else
				 -- CHECK THE LPN IN SUPPLY
				 --BUG 4502518 Issue 34: Positive Correction of Transfer
				 --User can't change LPN if RS exists for the
				 --Transfer txn.  In this case, make sure that
				 --the transfer_lpn_id is tied to that RS.
				 IF (l_rs_ptid_exists = TRUE) THEN
				     if (l_lpn_rec.transfer_lpn_id <> nvl(l_rs_ptid_lpn_id,-9999) ) then
					--  Review Late Set Appropiate Message
					l_progress := 'WMSINB-19666';
					RAISE FND_API.G_EXC_ERROR;
				     END IF;
				 END IF;
			      End if;-- END OF RS EXISTS
			    Else -- THIS PART FOR RTV/RTR/RTC . THIS LPN WILL BE FINALLY ISSUED OUT
			      if l_lpn_rec.transfer_lpn_id is not null then
				 if l_transfer_lpn_context not in (G_LPN_CONTEXT_PREGENERATED) then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19674';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			       Else -- TRANSFER LPN DOES NOT EXIST IN THE SYETEM
				 -- Create LPN Here
				 l_progress := 'WMSINB-19679';
				 create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.transfer_license_plate_number,
						       p_lpn_group_id => p_lpn_group_id,
						       p_organization_id => l_lpn_rec.to_organization_id,
						       p_lpn_context => G_LPN_CONTEXT_STORES,
						       x_lpn_id => l_lpn_rec.transfer_lpn_id,
						       x_return_status => x_return_status,
						       x_msg_count => l_msg_count,
						       x_msg_data => l_msg_data);
				 -- Check the error status from the above call
				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19691';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			      End if;
			   End if; -- END OF parent_txn_type CORRECT
			End if; -- END OF 'RECEIVE','ACCEPT','REJECT','TRANSFER'

			if l_parent_txn_type in ('DELIVER') then
			   if l_lpn_rec.transfer_lpn_id is not null then
			      if l_lpn_rec.transaction_type = 'CORRECT' then
				 if l_transfer_lpn_context not in (G_LPN_CONTEXT_INV ,G_LPN_CONTEXT_PREGENERATED ) then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19703';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
				 -- Validate Locator
				 -- Review Later
				 l_lpn_match := 'N';
				 validate_lpn_locator( p_lpn_id => l_lpn_rec.transfer_lpn_id,
						       p_subinventory => l_lpn_rec.subinventory,
						       p_locator_id   => l_lpn_rec.locator_id,
						       p_organization_id  => l_lpn_rec.to_organization_id,
						       x_lpn_match        => l_lpn_match,
						       x_return_status    => x_return_status,
						       x_msg_count        => x_msg_count,
						       x_msg_data         => x_msg_data);

				 l_progress := 'WMSINB-19718';

				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19722';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

				 if l_lpn_match = 'N' then
				    l_progress := 'WMSINB-19727';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			       Elsif l_lpn_rec.transaction_type in ('RETURN TO VENDOR', 'RETURN TO CUSTOMER' ) then
				 if l_transfer_lpn_context not in (G_LPN_CONTEXT_PREGENERATED) then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19733';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			       Elsif  l_lpn_rec.transaction_type in ('RETURN TO RECEIVING' ) then
				 if l_rs_ptid_ptid_exists <> TRUE then
				    if l_transfer_lpn_context not in (G_LPN_CONTEXT_PREGENERATED ,G_LPN_CONTEXT_RCV ) then
				       --  Review Late Set Appropiate Message
				       l_progress := 'WMSINB-19740';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;
				    -- Validate Locator
				    -- Review Later
				    l_lpn_match := 'N';
				    l_progress := 'WMSINB-19746';
				    validate_lpn_locator( p_lpn_id => l_lpn_rec.transfer_lpn_id,
							  p_subinventory => l_lpn_rec.subinventory,
							  p_locator_id   => l_lpn_rec.locator_id,
							  p_organization_id  => l_lpn_rec.to_organization_id,
							  x_lpn_match        => l_lpn_match,
							  x_return_status    => x_return_status,
							  x_msg_count        => x_msg_count,
							  x_msg_data         => x_msg_data);

				    if x_return_status <> G_RET_STS_SUCCESS Then
				       --  Review Late Set Appropiate Message
				       l_progress := 'WMSINB-19758';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;

				    if l_lpn_match = 'N' then
				       l_progress := 'WMSINB-19763';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;
				  Else
				    if (l_lpn_rec.transfer_lpn_id <> nvl(l_rs_ptid_ptid_lpn_id,-9999) ) then
				       --  Review Late Set Appropiate Message
				       l_progress := 'WMSINB-19769';
				       RAISE FND_API.G_EXC_ERROR;
				    End if;
				 End if;
			      End if; -- END OF RTR

			    Else -- TRANSFER LPN DOES NOT EXIST IN THE SYSTEM
			      if l_lpn_rec.transaction_type = 'RETURN TO RECEIVING' then
				 if (l_rs_ptid_ptid_exists = TRUE ) then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19779';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
				 --
				 -- Create NEW LPN For TLPN
				 create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.transfer_license_plate_number,
						       p_lpn_group_id => p_lpn_group_id,
						       p_organization_id => l_lpn_rec.to_organization_id,
						       p_lpn_context => G_LPN_CONTEXT_RCV,
						       x_lpn_id => l_lpn_rec.transfer_lpn_id,
						       x_return_status => x_return_status,
						       x_msg_count => l_msg_count,
						       x_msg_data => l_msg_data);
				 -- Check the error status from the above call
				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19795';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;
			      End if;
			   End if; -- TRANSFER LPN ID NOT NULL

			End if; -- END OF DELIVER

		      Else -- FLPN and TLPN Same
			if l_lpn_rec.transaction_type = 'RETURN TO RECEIVING' then
			   if (l_rs_ptid_ptid_exists = TRUE and l_lpn_rec.transfer_lpn_id <> nvl(l_rs_ptid_ptid_lpn_id,-9999)) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19807';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			 Elsif (l_lpn_rec.transaction_type  = 'CORRECT' and l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER')) then
			   if l_rs_ptid_exists = TRUE then
			      l_progress := 'WMSINB-19812';
			      if (l_lpn_rec.transfer_lpn_id <> nvl(l_rs_ptid_lpn_id,-9999)) then
				 --  Review Late Set Appropiate Message
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if;
			End if;

			-- Total QTY Validation and LOCATOR validation for Deliver Txn

			l_lpn_match := 'N';
			validate_lpn_locator( p_lpn_id => l_lpn_rec.lpn_id,
					      p_subinventory => l_lpn_rec.from_subinventory,
					      p_locator_id   => l_lpn_rec.from_locator_id,
					      p_organization_id  => l_lpn_rec.to_organization_id,
					      x_lpn_match        => l_lpn_match,
					      x_return_status    => x_return_status,
					      x_msg_count        => x_msg_count,
					      x_msg_data         => x_msg_data);

			if x_return_status <> G_RET_STS_SUCCESS Then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19834';
			   RAISE FND_API.G_EXC_ERROR;
			End if;

			if ( (l_parent_txn_type in ('DELIVER')) or (l_lpn_match = 'N') ) then
			   -- Call Total QTY VALIDATION API HERE
			   l_progress := 'WMSINB-19840';
			   validate_total_qty(p_lpn_group_id => p_lpn_group_id,
					      p_from_lpn_id => l_lpn_rec.lpn_id,
					      p_parent_lpn_id => l_cur_from_parent_lpn_id,
					      p_transaction_type => l_lpn_rec.transaction_type,
					      x_return_status    => x_return_status,
					      x_msg_count        => x_msg_count,
					      x_msg_data         => x_msg_data);

			   if x_return_status <> G_RET_STS_SUCCESS Then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19851';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;

		     End if; --END OF FLPN AND TLPN DIFFERENT

		   Else --   TLPN NULL CASE
		     if l_lpn_rec.transaction_type = 'RETURN TO RECEIVING' then
			if (l_rs_ptid_ptid_lpn_id is not null) then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19862';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		      Elsif (l_lpn_rec.transaction_type  = 'CORRECT' and l_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER')) then
			if (l_rs_ptid_lpn_id is not null ) then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19868';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     End if;

		  End if; --END OF TRANSFER LPN NOT NULL CASE

	       End if; -- END OF parent_txn_type as RECEIVE ACCEPT REJECT TRANSFER DELIVER

	       if l_parent_txn_type in ('RETURN TO VENDOR','RETURN TO RECEIVING', 'RETURN TO CUSTOMER') then -- ONLY FOR TXNTYPE AS CORRECT THIS WILL HAPPEN

		  l_progress := 'WMSINB-19879';

		  if ( l_lpn_rec.lpn_id is not null or l_lpn_rec.license_plate_number is not null ) then

		     if l_parent_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER') then
			if l_lpn_rec.lpn_id is null then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19886';
			   RAISE FND_API.G_EXC_ERROR;
			 Else
			   if l_lpn_context not in (G_LPN_CONTEXT_RCV) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19891';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			   --
			   if ( l_lpn_rec.lpn_id <> nvl(l_rs_ptid_ptid_lpn_id,-9999)) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19897';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if; -- END OF PTID.PTID txntype as RECEIVE ACCEPT REJECT TRANSFER

		     if l_parent_parent_txn_type in ('DELIVER') then
			if l_lpn_rec.lpn_id is null then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19906';
			   RAISE FND_API.G_EXC_ERROR;
			 Else
			   if l_lpn_context <> G_LPN_CONTEXT_INV then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-19911';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if; --END OF PTID.PTID txntype as DELIVER
		   Else -- FROM LPN NULL
		     if l_parent_parent_txn_type in ('RECEIVE','ACCEPT','REJECT','TRANSFER') then
			if l_rs_ptid_ptid_lpn_id is not null then
			   --  Review Late Set Appropiate Message
			   l_progress := 'WMSINB-19920';
			   RAISE FND_API.G_EXC_ERROR;
			End if;
		     End if;
		  End if; -- END OF FROM LPN NOT NULL

		  if ( l_lpn_rec.transfer_lpn_id is not null or l_lpn_rec.transfer_license_plate_number is not null ) then
		     if l_parent_txn_type in ('RETURN TO VENDOR','RETURN TO CUSTOMER') then
			--  Review Late Set Appropiate Message
			l_progress := 'WMSINB-19929';
			RAISE FND_API.G_EXC_ERROR;
		     End if;

		     if ( ( nvl(l_lpn_rec.lpn_id,0) <> nvl(l_lpn_rec.transfer_lpn_id,0) ) or
			  ( nvl(l_lpn_rec.license_plate_number,'-9999') <> nvl(l_lpn_rec.transfer_license_plate_number,'-9999') )
			  ) then
			if l_parent_txn_type in ('RETURN TO RECEIVING') then
			   if (l_rs_ptid_ptid_exists <> TRUE) then
			      if l_lpn_rec.transfer_lpn_id is not null then

				 if l_transfer_lpn_context not in (G_LPN_CONTEXT_PREGENERATED ,G_LPN_CONTEXT_INV ) then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19942';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

				 l_progress := 'WMSINB-19946';
				 -- Validate Locator
				 -- Review Later
				 l_lpn_match := 'N';
				 validate_lpn_locator( p_lpn_id => l_lpn_rec.transfer_lpn_id,
						       p_subinventory => l_lpn_rec.subinventory,
						       p_locator_id   => l_lpn_rec.locator_id,
						       p_organization_id  => l_lpn_rec.to_organization_id,
						       x_lpn_match        => l_lpn_match,
						       x_return_status    => x_return_status,
						       x_msg_count        => x_msg_count,
						       x_msg_data         => x_msg_data);

				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19961';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

				 if l_lpn_match = 'N' then
				    l_progress := 'WMSINB-19966';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

			       Else -- TRANSFER LPN DOES NOT EXIST IN THE SYSTEM
				 -- Create NEW LPN For TLPN
				 l_progress := 'WMSINB-19972';
				 create_lpn_from_wlpni(p_license_plate_number => l_lpn_rec.transfer_license_plate_number,
						       p_lpn_group_id => p_lpn_group_id,
						       p_organization_id => l_lpn_rec.to_organization_id,
						       p_lpn_context => G_LPN_CONTEXT_RCV,
						       x_lpn_id => l_lpn_rec.transfer_lpn_id,
						       x_return_status => x_return_status,
						       x_msg_count => l_msg_count,
						       x_msg_data => l_msg_data);
				 -- Check the error status from the above call
				 if x_return_status <> G_RET_STS_SUCCESS Then
				    --  Review Late Set Appropiate Message
				    l_progress := 'WMSINB-19984';
				    RAISE FND_API.G_EXC_ERROR;
				 End if;

			      End if;
			    Else -- RS.PTID.PTID Exists
			      l_progress := 'WMSINB-19990';
			      if ( ( l_rs_ptid_ptid_ptid_exists <> TRUE ) or (nvl(l_lpn_rec.transfer_lpn_id,0) <> nvl(l_rs_ptid_ptid_ptid_lpn_id,-9999)) ) then
				 --  Review Late Set Appropiate Message
				 l_progress := 'WMSINB-19993';
				 RAISE FND_API.G_EXC_ERROR;
			      End if;
			   End if;
			End if; -- END OF RTR
		      Else -- TLPN and FLPN same
			if l_rs_ptid_ptid_ptid_exists = TRUE then
			   if nvl(l_lpn_rec.lpn_id,0) <> nvl(l_rs_ptid_ptid_ptid_lpn_id,-9999) then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-20002';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if; -- END OF TLPN and FLPN Different

		   Else -- TLPN null CASE
		     l_progress := 'WMSINB-20009';
		     if l_parent_txn_type in ('RETURN TO RECEIVING') then
			if l_rs_ptid_ptid_ptid_exists = TRUE then
			   if l_rs_ptid_ptid_ptid_lpn_id is not null then
			      --  Review Late Set Appropiate Message
			      l_progress := 'WMSINB-20014';
			      RAISE FND_API.G_EXC_ERROR;
			   End if;
			End if;
		     End if;
		  End if; --END OF TLPN not null
	       End if; --END OF RTR RTV RTC

	    End if;
	    -- END OF POSITIVE CORRECTION

	 End if; -- END OF CORRECT','RETURN TO VENDOR' RTR and RTC  TXN
	 -- **********************************************************************************************
	 -- FOR item id null case . THIS IS THE CASES FOR EXPENSE ITEM WHERE THERE IS NO ITEM ID PRESENT
	 -- **********************************************************************************************
       else
		  -- Check the Quantity and if it is null the return otherwise continue with the Loop
		  if nvl(l_lpn_rec.quantity,0) = 0 then
		     --
		     -- Return Error as qty is null
		     --
		     l_progress := 'WMSINB-20035';
		     --x_return_status := g_ret_sts_error;
		     --
		     -- Review Later
		     -- Set appropiate Message
		     --
		     -- exit;
                     -- Bug 3714354
                     -- The ABOVE CASE WMSINB-20035 Does not need to be failed here
                     -- Becasuse this will be checked by PO's pre-processor , and
                     -- for Service Items there may be cases where qty and item both null
                     null;
		  end if;
		  -- **************************************************************
		  -- START OF CASES  FOR  RECEIPT  TRANSACTION
		  -- **************************************************************
		  IF (l_debug = 1) THEN
		     print_debug('VALIDATE_LPN_INFO: Case for Expense ITEM :'|| l_lpn_rec.lpn_id , 1);
		  END If;

      end if;


      IF (l_update_lpn_id = TRUE) THEN
	 UPDATE rcv_transactions_interface
	   SET lpn_id = l_lpn_rec.lpn_id
	   , transfer_lpn_id = l_lpn_rec.transfer_lpn_id
	   WHERE interface_transaction_id = l_lpn_rec.interface_transaction_id;
      END IF;

   End loop;

   -- Delete WLPNI rows
   -- This call has been moved above
   -- delete_wlpni(p_lpn_group_id,p_lpn_id, p_license_plate_number,x_return_status,x_msg_count,x_msg_data);

   close c_validate_lpn;

   --if direct org transfer then return from here.
   IF (l_intransit_type = 1) THEN
      RETURN;
   END IF;

   -- Query the rest of WLPNI for the same group
   -- And check if parent needs to be changed

   l_progress := 'WMSINB-20071';
   For c_wlpni_rec in ( select lpn_id,
			license_plate_number,
			parent_lpn_id,
			parent_license_plate_number,
			organization_id,
			rowid
			from wms_lpn_interface
			where source_group_id = p_lpn_group_id)
     Loop
	l_progress := 'WMSINB-20081';

	IF (l_debug = 1) THEN
	   print_debug('VALIDATE_LPN_INFO: Inside wlpni loop at End l_progess = '|| l_progress, 1);
	END If;

	l_wlpni_state := get_lpn_id(c_wlpni_rec.lpn_id,
				    c_wlpni_rec.license_plate_number,l_wlpni_lpn_context,l_wlpni_cur_parent_lpn,
				    l_wlpn_source_header_id);

	l_wlpni_parent_state := get_lpn_id(c_wlpni_rec.parent_lpn_id,
					   c_wlpni_rec.parent_license_plate_number,
					   l_wlpni_parent_lpn_context,l_wlpni_cur_parent_parent_lpn,
					   l_xfr_wlpn_source_header_id);

	l_progress := 'WMSINB-20091';

	IF (l_debug = 1) THEN
	   print_debug('VALIDATE_LPN_INFO:LPN_ID:'||c_wlpni_rec.lpn_id, 1);
	   print_debug('VALIDATE_LPN_INFO:PARENT_LPN_ID:'||l_wlpni_cur_parent_lpn, 1);
	END IF;

	if (Nvl(l_wlpni_cur_parent_lpn,-1) <>  nvl(c_wlpni_rec.parent_lpn_id,-1)) then
	   -- Unpack the LPN from the current Parent and
	   -- Pack according to wlpni info
	   IF l_wlpni_cur_parent_lpn IS NOT NULL THEN
	      wms_container_pvt.packunpack_container(
						     p_api_version            => 1.0,
						     p_init_msg_list          => g_false,
						     p_commit                 => g_false,
						     p_validation_level       => fnd_api.g_valid_level_none,
						     x_return_status          => x_return_status,
						     x_msg_count              => l_msg_count,
						     x_msg_data               => l_msg_data,
						     p_lpn_id                 => l_wlpni_cur_parent_lpn,
						     p_content_lpn_id         => c_wlpni_rec.LPN_ID,
						     p_organization_id        => c_wlpni_rec.organization_id,
						     p_operation              => 2 --- TO UNPACK
						     );

	      l_progress := 'WMSINB-20116';

	      IF (x_return_status <> g_ret_sts_success) THEN
		 IF (l_debug = 1) THEN
		    print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress = ' || l_progress,1);
		 END IF;
		 l_progress := 'WMSINB-20122';
		 RAISE fnd_api.g_exc_error;
	      END IF;
	   END IF; --IF l_wlpni_cur_parent_lpn IS NOT NULL THEN

	   IF c_wlpni_rec.parent_lpn_id IS NOT NULL THEN
              -- Bug 3349931
              -- Get the SUB/LOC from RTI and update the LPN before packing the LPN into parent LPN
              -- This is needed AS the parent LPN might exist in a diff SUB/LOC than the LPN
              -- So the packing might FAIL.
              -- This needs to be done only when there is no immediate contents in LPN
              Begin
                 SELECT rti.subinventory,
		   rti.locator_id,
		   rti.to_organization_id,
		   rti.shipment_header_id,
		   rti.shipment_num,
		   rti.transaction_type
                   INTO l_parent_sub,
		   l_parent_locator_id,
		   l_parent_to_organization_id,
		   l_parent_source_header_id,
		   l_parent_source_name,
		   l_parent_txn_type
                   FROM rcv_transactions_interface rti
		   WHERE rti.lpn_id = rti.transfer_lpn_id
		   AND rti.lpn_group_id = p_lpn_group_id
		   AND rti.lpn_id IN (SELECT lpn_id
				      FROM wms_license_plate_numbers wlpn2
				      CONNECT BY PRIOR wlpn2.lpn_id = wlpn2.parent_lpn_id
				      START WITH wlpn2.lpn_id =  c_wlpni_rec.LPN_ID
                                      )
		   AND NOT exists ( SELECT 'x' FROM wms_lpn_contents
				    WHERE parent_lpn_id =  c_wlpni_rec.LPN_ID
				    )
		   AND ROWNUM = 1
                   ;
              Exception
                 When others then
                 -- No need to update SUB / LOC
		 l_progress := 'WMSINB-20123';
		 IF (l_debug = 1) THEN
		    print_debug('VALIDATE_LPN_INFO: No SUB/LOC Found : progress = ' || l_progress,1);
		 END IF;
              End;

	      IF (l_parent_txn_type = 'SHIP') THEN
		 l_parent_source_type_id := 1;
	       ELSE
		 l_parent_source_type_id := NULL;
		 l_parent_source_name := NULL;
		 l_parent_source_header_id := NULL;
	      END IF;

              if (l_parent_sub is not null
		  or l_parent_locator_id is not	NULL
		  OR l_parent_txn_type = 'SHIP') then
		 IF (l_debug = 1) THEN
		    print_debug('VALIDATE_LPN_INFO: SUB/LOC Found or SHIP txn, Updating with SUB and LOC as ' || l_parent_sub || ':'|| l_parent_locator_id ,1);
		 END IF;
                 update_lpn_location_context(p_organization_id => l_parent_to_organization_id
					     ,p_sub             => l_parent_sub
					     ,p_locator         => l_parent_locator_id
					     ,p_lpn_context     => null
					     ,p_lpn_id          => c_wlpni_rec.lpn_id
					     ,p_source_name     => l_parent_source_name
					     ,p_source_header_id => l_parent_source_header_id
					     ,p_source_type_id => l_parent_source_type_id
					     ,x_return_status   => x_return_status
					     ,x_msg_count       => x_msg_count
					     ,x_msg_data        => x_msg_data ) ;

                  l_progress := 'WMSINB-20124';

                  -- Check the error status from the above call
                  if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-20125';
                     RAISE FND_API.G_EXC_ERROR;
                  End if;

		  --We also need to update sub/loc/sourc_name etc for parent
		  update_lpn_location_context(p_organization_id => l_parent_to_organization_id
					      ,p_sub             => l_parent_sub
					      ,p_locator         => l_parent_locator_id
					      ,p_lpn_context     => null
					      ,p_lpn_id          => c_wlpni_rec.parent_lpn_id
					      ,p_source_name     => l_parent_source_name
					      ,p_source_header_id => l_parent_source_header_id
					      ,p_source_type_id => l_parent_source_type_id
					      ,x_return_status   => x_return_status
					      ,x_msg_count       => x_msg_count
					      ,x_msg_data        => x_msg_data ) ;

                  l_progress := 'WMSINB-20126';

                  -- Check the error status from the above call
                  if x_return_status <> G_RET_STS_SUCCESS Then
                     --  Review Late Set Appropiate Message
                     l_progress := 'WMSINB-20127';
                     RAISE FND_API.G_EXC_ERROR;
                  End if;
              End if;

              l_progress := 'WMSINB-20128';

	      wms_container_pvt.packunpack_container(   p_api_version            => 1.0,
							p_init_msg_list          => g_false,
							p_commit                 => g_false,
							p_validation_level       => fnd_api.g_valid_level_none,
							x_return_status          => x_return_status,
							x_msg_count              => l_msg_count,
							x_msg_data               => l_msg_data,
							p_lpn_id                 => c_wlpni_rec.parent_lpn_id,
							p_content_lpn_id         => c_wlpni_rec.LPN_ID,
							p_organization_id        => c_wlpni_rec.organization_id,
							p_operation              => 1 --- TO PACK
							);
	      IF (x_return_status <> g_ret_sts_success) THEN
		 IF (l_debug = 1) THEN
		    print_debug('VALIDATE_LPN_INFO: packunpack_container failed progress = ' || l_progress,1);
		 END IF;
		 l_progress := 'WMSINB-20144';
		 RAISE fnd_api.g_exc_error;
	      END IF;
	   END IF; --IF c_wlpni_rec.parent_lpn_id IS NOT NULL THEN

	End if;
     End Loop;

     -- Finally delete the processed rows.
     l_progress := 'WMSINB-20153';
     delete from wms_lpn_interface where source_group_id = p_lpn_group_id;


EXCEPTION
   WHEN fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;
      IF (l_debug = 1) THEN
         print_debug('VALIDATE_LPN_INFO - Execution Error:'|| l_progress || ':' ||sqlcode, 1);
	 print_stacked_messages;
      END IF;
      x_msg_data := l_progress;

   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('VALIDATE_LPN_INFO - OTHER Exception:'|| l_progress || ' ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
	 print_stacked_messages;
      END IF;

      x_msg_data := l_progress;

      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.VALIDATE_LPN_INFO',l_progress, SQLCODE);
      END IF;
      -- Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => l_msg_count, p_data => l_msg_data);

END VALIDATE_LPN_INFO;

PROCEDURE insert_mtli_rowid (p_rowid                  IN ROWID,
			     p_product_txn_id         IN NUMBER,
			     p_new_serial_txn_temp_id IN NUMBER,
			     p_quantity               IN NUMBER,
			     p_primary_quantity       IN NUMBER,
			     x_return_status          OUT NOCOPY VARCHAR2,
			     x_msg_count              OUT NOCOPY NUMBER,
			     x_msg_data               OUT NOCOPY VARCHAR2)
  IS
     l_debug NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
BEGIN

   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('insert_mtli_rowid:010: Entry Stamp :' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END If;

   INSERT INTO mtl_transaction_lots_interface
     (TRANSACTION_INTERFACE_ID,
      SOURCE_CODE,
      SOURCE_LINE_ID,
      LAST_UPDATE_DATE,
      LAST_UPDATED_BY,
      CREATION_DATE,
      CREATED_BY,
      LAST_UPDATE_LOGIN,
      REQUEST_ID,
      PROGRAM_APPLICATION_ID,
      PROGRAM_ID,
      PROGRAM_UPDATE_DATE,
      LOT_NUMBER,
      LOT_EXPIRATION_DATE,
      TRANSACTION_QUANTITY,
      PRIMARY_QUANTITY,
      SERIAL_TRANSACTION_TEMP_ID,
      ERROR_CODE,
      PROCESS_FLAG,
      DESCRIPTION,
      VENDOR_NAME,
      SUPPLIER_LOT_NUMBER,
      ORIGINATION_DATE,
      DATE_CODE,
      GRADE_CODE,
      CHANGE_DATE,
      MATURITY_DATE,
      STATUS_ID,
      RETEST_DATE,
      AGE,
      ITEM_SIZE,
      COLOR,
      VOLUME,
      VOLUME_UOM,
      PLACE_OF_ORIGIN,
      BEST_BY_DATE,
      LENGTH,
      LENGTH_UOM,
      RECYCLED_CONTENT,
      THICKNESS,
      THICKNESS_UOM,
      WIDTH,
      WIDTH_UOM,
      CURL_WRINKLE_FOLD,
      LOT_ATTRIBUTE_CATEGORY,
      C_ATTRIBUTE1,
      C_ATTRIBUTE2,
      C_ATTRIBUTE3,
     C_ATTRIBUTE4,
     C_ATTRIBUTE5,
     C_ATTRIBUTE6,
     C_ATTRIBUTE7,
     C_ATTRIBUTE8,
     C_ATTRIBUTE9,
     C_ATTRIBUTE10,
     C_ATTRIBUTE11,
     C_ATTRIBUTE12,
     C_ATTRIBUTE13,
     C_ATTRIBUTE14,
     C_ATTRIBUTE15,
     C_ATTRIBUTE16,
     C_ATTRIBUTE17,
     C_ATTRIBUTE18,
     C_ATTRIBUTE19,
     C_ATTRIBUTE20,
     D_ATTRIBUTE1,
     D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     VENDOR_ID,
     TERRITORY_CODE,
     /*INVCONV, Remove sublot_num, add other attributes. Punit Kumar */
     ---sublot_num,
     PARENT_LOT_NUMBER		   ,
     ORIGINATION_TYPE         ,
     EXPIRATION_ACTION_DATE   ,
     EXPIRATION_ACTION_CODE   ,
     HOLD_DATE                ,
     REASON_ID                ,
     /* end INVCONV */

     reason_code,
     secondary_transaction_quantity,
     PRODUCT_CODE,
     product_transaction_id)
     (SELECT TRANSACTION_INTERFACE_ID,
      SOURCE_CODE,
      SOURCE_LINE_ID,
      LAST_UPDATE_DATE,
      LAST_UPDATED_BY,
      CREATION_DATE,
      CREATED_BY,
      LAST_UPDATE_LOGIN,
      REQUEST_ID,
      PROGRAM_APPLICATION_ID,
      PROGRAM_ID,
      PROGRAM_UPDATE_DATE,
      Ltrim(Rtrim(lot_number)),
      LOT_EXPIRATION_DATE,
      p_quantity,
      p_primary_quantity, -- Calculate
      p_new_serial_txn_temp_id, -- New sequence
      ERROR_CODE,
      PROCESS_FLAG,
      DESCRIPTION,
      VENDOR_NAME,
      SUPPLIER_LOT_NUMBER,
      ORIGINATION_DATE,
      DATE_CODE,
      GRADE_CODE,
      CHANGE_DATE,
      MATURITY_DATE,
      STATUS_ID,
      RETEST_DATE,
      AGE,
      ITEM_SIZE,
      COLOR,
      VOLUME,
      VOLUME_UOM,
      PLACE_OF_ORIGIN,
      BEST_BY_DATE,
      LENGTH,
      LENGTH_UOM,
      RECYCLED_CONTENT,
      THICKNESS,
      THICKNESS_UOM,
      WIDTH,
      WIDTH_UOM,
      CURL_WRINKLE_FOLD,
      LOT_ATTRIBUTE_CATEGORY,
      C_ATTRIBUTE1,
     C_ATTRIBUTE2,
     C_ATTRIBUTE3,
     C_ATTRIBUTE4,
     C_ATTRIBUTE5,
     C_ATTRIBUTE6,
     C_ATTRIBUTE7,
     C_ATTRIBUTE8,
     C_ATTRIBUTE9,
     C_ATTRIBUTE10,
     C_ATTRIBUTE11,
     C_ATTRIBUTE12,
     C_ATTRIBUTE13,
     C_ATTRIBUTE14,
     C_ATTRIBUTE15,
     C_ATTRIBUTE16,
     C_ATTRIBUTE17,
     C_ATTRIBUTE18,
     C_ATTRIBUTE19,
     C_ATTRIBUTE20,
     D_ATTRIBUTE1,
     D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     VENDOR_ID,
     TERRITORY_CODE,
     /*INVCONV , remove sublot_num, add other attributes.Punit Kumar*/
     ----sublot_num,
     PARENT_LOT_NUMBER,
     ORIGINATION_TYPE ,
     EXPIRATION_ACTION_DATE ,
     EXPIRATION_ACTION_CODE ,
     HOLD_DATE  ,
     REASON_ID  ,
     /* end INVCONV */
     reason_code,
     NULL,
     PRODUCT_CODE,
     p_product_txn_id
     FROM mtl_transaction_lots_interface
     WHERE ROWID = p_rowid);

   IF (l_debug = 1) THEN
      print_debug('insert_mtli_rowid:020: Exit Stamp :' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      /* INVCONV*/
      print_debug('INVCONV, removed sublot_num, Added some more parameters in INSERT INTO mtl_transaction_lots_interface (insert_mtli_rowid)', 1);
      /*end , INVCONV*/

   END If;
EXCEPTION
   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('insert_mtli_rowid - other exception: '||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.insert_mtli_rowid',Sqlerrm,SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);
END insert_mtli_rowid;


PROCEDURE insert_msni_rowid (p_rowid                  IN ROWID,
			     p_product_txn_id         IN NUMBER,
			     p_new_serial_txn_temp_id IN NUMBER DEFAULT NULL,
			     p_new_fm_ser_num         IN VARCHAR2 DEFAULT NULL,
			     p_new_to_ser_num         IN VARCHAR2 DEFAULT NULL,
			     x_return_status          OUT NOCOPY VARCHAR2,
			     x_msg_count              OUT NOCOPY NUMBER,
			     x_msg_data               OUT NOCOPY VARCHAR2)
  IS
     l_debug NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
BEGIN
   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('insert_msni_rowid:010: Entry Stamp :' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END If;

   INSERT INTO mtl_serial_numbers_interface
     (TRANSACTION_INTERFACE_ID,
      SOURCE_CODE,
      SOURCE_LINE_ID,
      LAST_UPDATE_DATE,
      LAST_UPDATED_BY,
      CREATION_DATE,
      CREATED_BY,
      LAST_UPDATE_LOGIN,
      REQUEST_ID,
      PROGRAM_APPLICATION_ID,
      PROGRAM_ID,
      PROGRAM_UPDATE_DATE,
      VENDOR_SERIAL_NUMBER,
      VENDOR_LOT_NUMBER,
      FM_SERIAL_NUMBER,
      TO_SERIAL_NUMBER,
      ERROR_CODE,
      PROCESS_FLAG,
      PARENT_SERIAL_NUMBER,
      SERIAL_ATTRIBUTE_CATEGORY,
      ORIGINATION_DATE,
      C_ATTRIBUTE1,
      C_ATTRIBUTE2,
      C_ATTRIBUTE3,
      C_ATTRIBUTE4,
      C_ATTRIBUTE5,
      C_ATTRIBUTE6,
      C_ATTRIBUTE7,
      C_ATTRIBUTE8,
      C_ATTRIBUTE9,
      C_ATTRIBUTE10,
      C_ATTRIBUTE11,
      C_ATTRIBUTE12,
      C_ATTRIBUTE13,
      C_ATTRIBUTE14,
      C_ATTRIBUTE15,
      C_ATTRIBUTE16,
      C_ATTRIBUTE18,
      C_ATTRIBUTE19,
      C_ATTRIBUTE20,
      D_ATTRIBUTE1,
      D_ATTRIBUTE2,
      D_ATTRIBUTE3,
      D_ATTRIBUTE4,
      D_ATTRIBUTE5,
      D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     STATUS_ID,
     TERRITORY_CODE,
     TIME_SINCE_NEW,
     CYCLES_SINCE_NEW,
     TIME_SINCE_OVERHAUL,
     CYCLES_SINCE_OVERHAUL,
     TIME_SINCE_REPAIR,
     CYCLES_SINCE_REPAIR,
     TIME_SINCE_VISIT,
     CYCLES_SINCE_VISIT,
     TIME_SINCE_MARK,
     CYCLES_SINCE_MARK,
     NUMBER_OF_REPAIRS,
     STATUS_NAME,
     C_ATTRIBUTE17,
     ATTRIBUTE_CATEGORY,
     ATTRIBUTE1,
     ATTRIBUTE2,
     ATTRIBUTE3,
     ATTRIBUTE4,
     ATTRIBUTE5,
     ATTRIBUTE6,
     ATTRIBUTE7,
     ATTRIBUTE8,
     ATTRIBUTE9,
     ATTRIBUTE10,
     ATTRIBUTE11,
     ATTRIBUTE12,
     ATTRIBUTE13,
     ATTRIBUTE14,
     ATTRIBUTE15,
     PRODUCT_CODE,
     PRODUCT_TRANSACTION_ID)
     (SELECT Nvl(p_new_serial_txn_temp_id, transaction_interface_id),
      SOURCE_CODE,
      SOURCE_LINE_ID,
      LAST_UPDATE_DATE,
      LAST_UPDATED_BY,
      CREATION_DATE,
      CREATED_BY,
      LAST_UPDATE_LOGIN,
      REQUEST_ID,
      PROGRAM_APPLICATION_ID,
      PROGRAM_ID,
      PROGRAM_UPDATE_DATE,
      VENDOR_SERIAL_NUMBER,
      VENDOR_LOT_NUMBER,
      Nvl(p_new_fm_ser_num,fm_serial_number),
      Nvl(p_new_to_ser_num, to_serial_number),
      ERROR_CODE,
      PROCESS_FLAG,
      PARENT_SERIAL_NUMBER,
      SERIAL_ATTRIBUTE_CATEGORY,
      ORIGINATION_DATE,
      C_ATTRIBUTE1,
      C_ATTRIBUTE2,
      C_ATTRIBUTE3,
      C_ATTRIBUTE4,
      C_ATTRIBUTE5,
      C_ATTRIBUTE6,
      C_ATTRIBUTE7,
      C_ATTRIBUTE8,
      C_ATTRIBUTE9,
      C_ATTRIBUTE10,
      C_ATTRIBUTE11,
      C_ATTRIBUTE12,
      C_ATTRIBUTE13,
      C_ATTRIBUTE14,
      C_ATTRIBUTE15,
      C_ATTRIBUTE16,
      C_ATTRIBUTE18,
      C_ATTRIBUTE19,
      C_ATTRIBUTE20,
      D_ATTRIBUTE1,
      D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     STATUS_ID,
     TERRITORY_CODE,
     TIME_SINCE_NEW,
     CYCLES_SINCE_NEW,
     TIME_SINCE_OVERHAUL,
     CYCLES_SINCE_OVERHAUL,
     TIME_SINCE_REPAIR,
     CYCLES_SINCE_REPAIR,
     TIME_SINCE_VISIT,
     CYCLES_SINCE_VISIT,
     TIME_SINCE_MARK,
     CYCLES_SINCE_MARK,
     NUMBER_OF_REPAIRS,
     STATUS_NAME,
     C_ATTRIBUTE17,
     ATTRIBUTE_CATEGORY,
     ATTRIBUTE1,
     ATTRIBUTE2,
     ATTRIBUTE3,
     ATTRIBUTE4,
     ATTRIBUTE5,
     ATTRIBUTE6,
     ATTRIBUTE7,
     ATTRIBUTE8,
     ATTRIBUTE9,
     ATTRIBUTE10,
     ATTRIBUTE11,
     ATTRIBUTE12,
     ATTRIBUTE13,
     ATTRIBUTE14,
     ATTRIBUTE15,
     PRODUCT_CODE,
     p_product_txn_id
     FROM mtl_serial_numbers_interface
     WHERE ROWID = p_rowid);

   IF (l_debug = 1) THEN
      print_debug('insert_msni_rowid:020: Exit Stamp :' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END If;
EXCEPTION
   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('insert_msni_rowid - other exception: '||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
      END IF;
      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.insert_msni_rowid',Sqlerrm, SQLCODE);
      END IF;
      --  Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);

END insert_msni_rowid;

PROCEDURE split_lot_serial(p_rti_tb         IN  inv_rcv_integration_apis.child_rec_tb_tp,
			   x_return_status  OUT NOCOPY VARCHAR2,
			   x_msg_count      OUT NOCOPY NUMBER,
			   x_msg_data       OUT NOCOPY VARCHAR2)
  IS
	/*
	Issues were found during testing for 13521315
    Breaking down the Lot and Serial cursors into two to take care of all the Scenarios
	--13521315
	*/
   CURSOR mtli_recs_with_rsl (l_old_rti_id NUMBER,l_shipment_line_id NUMBER) IS --modified for bug 13492777
	SELECT Ltrim(Rtrim(mtli.lot_number)) lot_number,
	       mtli.transaction_quantity,
	       mtli.primary_quantity,
	       mtli.serial_transaction_temp_id,
	       mtli.ROWID
	  FROM mtl_transaction_lots_interface mtli, rcv_lots_supply rls
	 WHERE mtli.product_code = 'RCV'
	   AND mtli.product_transaction_id = l_old_rti_id
	   AND mtli.lot_number = rls.lot_num --14573375 removed outer join
	   AND NVL(rls.shipment_line_id,l_shipment_line_id) = l_shipment_line_id
	 ORDER BY rls.shipment_line_id;

   CURSOR mtli_recs (l_old_rti_id NUMBER) IS --modified for bug 13492777
	SELECT Ltrim(Rtrim(mtli.lot_number)) lot_number,
	       mtli.transaction_quantity,
	       mtli.primary_quantity,
	       mtli.serial_transaction_temp_id,
	       mtli.ROWID
	  FROM mtl_transaction_lots_interface mtli
	 WHERE mtli.product_code = 'RCV'
	   AND mtli.product_transaction_id = l_old_rti_id;

     l_mtli_rec mtli_recs%ROWTYPE;
     -- Modified for bug 9679278
   CURSOR msni_recs_with_rsl (l_old_rti_id NUMBER,l_shipment_line_id NUMBER) IS
	SELECT msni.fm_serial_number,
	       msni.to_serial_number,
	       msni.ROWID
	  FROM mtl_serial_numbers_interface msni,rcv_serials_supply  rss
	 WHERE msni.product_code = 'RCV'
	   AND msni.product_transaction_id = l_old_rti_id
	   AND msni.fm_serial_number = rss.serial_num(+)
	   AND NVL(rss.shipment_line_id,l_shipment_line_id) = l_shipment_line_id --10248599
	 ORDER BY rss.shipment_line_id;

	CURSOR msni_recs (l_old_rti_id NUMBER) IS
	 SELECT msni.fm_serial_number,
	        msni.to_serial_number,
	        msni.ROWID
	   FROM mtl_serial_numbers_interface msni
	  WHERE msni.product_code = 'RCV'
	    AND msni.product_transaction_id = l_old_rti_id;
	--13521315
     l_msni_rec msni_recs%ROWTYPE;

     CURSOR msni_recs_lotserial(l_serial_transaction_temp_id NUMBER) IS
	SELECT fm_serial_number,
	  to_serial_number,
	  ROWID
	  FROM mtl_serial_numbers_interface
	  WHERE transaction_interface_id = l_serial_transaction_temp_id;

     l_remaining_quantity NUMBER;
     l_primary_rem_qty NUMBER;
     l_remaining_serial_qty NUMBER;
     l_ser_rem_quantity NUMBER;
     l_serial_transaction_temp_id NUMBER;

     l_orig_interface_trx_id NUMBER;
     l_total_split_qty NUMBER;
     l_total_lot_qty NUMBER;
     l_total_serial_qty NUMBER;
     l_lot_ser_qty NUMBER;
     l_serial_quantity NUMBER;

     l_serial_split_done BOOLEAN := false;
     l_new_serial_txn_temp_id NUMBER;
-- Increased lot size to 80 Char - Mercy Thomas - B4625329
     l_temp_prefix VARCHAR2(80);
     l_from_ser_number NUMBER;

     l_new_from_ser_num VARCHAR2(30);
     l_new_to_ser_num VARCHAR2(30);

     l_rti_count NUMBER;

     l_progress VARCHAR2(15) := '0';
     l_debug NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);

     -- Bug 3395211
     l_to_organization_id NUMBER;
     l_item_id            NUMBER;
     l_uom_code VARCHAR2(3);
     l_unit_of_measure VARCHAR2(25);
	 l_shipment_line_id NUMBER;
	 i NUMBER; --14573375

BEGIN
   x_return_status := g_ret_sts_success;

   IF (l_debug = 1) THEN
      print_debug('split_lot_serial:010: Entry Stamp :' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END If;

   l_serial_split_done := FALSE;

   -- first do the quantity check
   l_total_split_qty := 0;
   l_orig_interface_trx_id := 0;
   l_rti_count := p_rti_tb.COUNT;

   FOR newrti IN 1..l_rti_count LOOP
      IF (l_total_split_qty <> 0 AND l_orig_interface_trx_id <>
	  p_rti_tb(newrti).orig_interface_trx_id) THEN

	 IF (l_debug = 1) THEN
	    print_debug('SPLIT_LOT_SERIAL:l_total_split_qty:'||l_total_split_qty,1);
	 END IF;

	 BEGIN
	    SELECT SUM(transaction_quantity)
	      INTO l_total_lot_qty
	      FROM mtl_transaction_lots_interface
	      WHERE product_code = 'RCV'
	      AND product_transaction_id = l_orig_interface_trx_id;
	 EXCEPTION
	    WHEN no_data_found THEN
	       l_total_lot_qty := 0;
	 END;

	 IF l_total_lot_qty IS NULL THEN
	    l_total_lot_qty := 0;
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('SPLIT_LOT_SERIAL:l_total_lot_qty:'||l_total_lot_qty,1);
	 END IF;

         BEGIN
	    SELECT SUM(inv_serial_number_pub.get_serial_diff(fm_serial_number,to_serial_number))
	      INTO l_total_serial_qty
	      FROM mtl_serial_numbers_interface
	      WHERE product_code = 'RCV'
	      AND product_transaction_id = l_orig_interface_trx_id;
	 EXCEPTION
	    WHEN no_data_found THEN
	       l_total_serial_qty := 0;
	 END;

	 IF l_total_serial_qty IS NULL THEN
	    l_total_serial_qty := 0;
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('SPLIT_LOT_SERIAL:l_total_serial_qty:'||l_total_serial_qty,1);
	 END IF;

	 IF (l_total_lot_qty <> 0 AND l_total_lot_qty <> l_total_split_qty) THEN
	    IF (l_debug = 1) THEN
	       print_debug('split_lot_serial:020: Lot Quantity Mismatch', 1);
	       print_debug('split_lot_serial:030: total_lot_qty : '||l_total_lot_qty, 1);
	       print_debug('split_lot_serial:040: total_split_qty : '||l_total_split_qty, 1);
	    END If;

	    -- raise an error
	    l_progress := 'WMSINB-20780';
	    RAISE fnd_api.g_exc_error;
	 END IF;

         -- Bug 3395211
         -- Get the UOM code and Organization Id to calculate the primary qty.
         -- Bug 3446419
         -- This will not be called if values are passed in the record structure

         l_uom_code := p_rti_tb(newrti).uom_code;
         l_item_id  := p_rti_tb(newrti).item_id;
         l_to_organization_id := p_rti_tb(newrti).to_organization_id;

         if (l_uom_code is null or l_item_id is null or l_to_organization_id is null) then
         Begin
           select uom_code,
                  unit_of_measure,
                  item_id,
                  to_organization_id
             into l_uom_code,
                  l_unit_of_measure,
                  l_item_id,
                  l_to_organization_id
             from rcv_transactions_interface rti
            where rti.interface_transaction_id = p_rti_tb(newrti).new_interface_trx_id;

            if l_uom_code is null then
              BEGIN
               SELECT uom_code
                 into l_uom_code
                 FROM mtl_item_uoms_view
                 WHERE organization_id = l_to_organization_id
                 AND inventory_item_id =  l_item_id
                 AND unit_of_measure = l_unit_of_measure;
               EXCEPTION
                 WHEN OTHERS THEN
                  IF (l_debug = 1) THEN
                     print_debug('SPLIT_LOT_SERIAL : Error retrieving UOM inside split_lot_serial', 1);
                  END IF;
                  l_progress := 'WMSINB-20781';
                  RAISE fnd_api.g_exc_error;
               END;
            End if;
         Exception
           when others then
                  IF (l_debug = 1) THEN
                     print_debug('SPLIT_LOT_SERIAL : Error retrieving uom_code inside split_lot_serial ', 1);
                  END IF;
                  l_progress := 'WMSINB-20782';
                  RAISE fnd_api.g_exc_error;
         End;
         End if;

	 IF (l_total_serial_qty <> 0 AND l_total_serial_qty <> get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,l_total_split_qty) ) THEN
	    IF (l_debug = 1) THEN
	       print_debug('split_lot_serial:050: Serial Quantity Mismatch', 1);
	       print_debug('split_lot_serial:060: total_serial_qty : '||l_total_serial_qty, 1);
	       print_debug('split_lot_serial:070: total_split_qty : '||get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,l_total_split_qty), 1);
	    END If;

	    -- raise an error
	    l_progress := 'WMSINB-20792';
	    RAISE fnd_api.g_exc_error;
	 END IF;

	 -- one more check for lot/serial items
         -- Bug 3395211 A nvl is added on primary_quantity because ideally the serial qty
         -- Should match with the primary qty.

	 BEGIN
	    SELECT SUM(mtli.transaction_quantity)
	      INTO l_lot_ser_qty
	      FROM mtl_transaction_lots_interface mtli
	      WHERE mtli.product_code = 'RCV'
	      AND mtli.product_transaction_id = l_orig_interface_trx_id
	      AND (mtli.serial_transaction_temp_id IS NULL
		   OR nvl(mtli.primary_quantity,
                          get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,
                          mtli.transaction_quantity)
                         )
                 = (SELECT SUM(inv_serial_number_pub.get_serial_diff(msni.fm_serial_number,
												    msni.to_serial_number))
						   FROM mtl_serial_numbers_interface msni
						   WHERE  msni.transaction_interface_id = mtli.serial_transaction_temp_id));
	 EXCEPTION
	    WHEN no_data_found then
	       l_lot_ser_qty := 0;
	 END;

	 IF l_lot_ser_qty IS NULL THEN
	    l_lot_ser_qty := 0;
	 END IF;

	 IF (l_debug = 1) THEN
	    print_debug('SPLIT_LOT_SERIAL:l_lot_ser_qty:'||l_lot_ser_qty,1);
	 END IF;

	 IF (l_total_lot_qty <> 0 AND l_total_lot_qty <> l_lot_ser_qty) THEN
	    IF (l_debug = 1) THEN
	       print_debug('split_lot_serial:071: Lot Serial Quantity Mismatch', 1);
	       print_debug('split_lot_serial:072: total_lot_qty : '||l_total_lot_qty, 1);
	       print_debug('split_lot_serial:073: lot_ser_qty : '||l_lot_ser_qty, 1);
	    END If;

	    -- raise an error
	    l_progress := 'WMSINB-20830';
	    RAISE fnd_api.g_exc_error;
	 END IF;

	 l_orig_interface_trx_id := p_rti_tb(newrti).orig_interface_trx_id;
         /* Need to populate the absolute quantity otherwise fails for -ve correction*/
	 l_total_split_qty := ABS(p_rti_tb(newrti).quantity);
       ELSE
	       l_orig_interface_trx_id := p_rti_tb(newrti).orig_interface_trx_id;
	       l_total_split_qty := l_total_split_qty + ABS(p_rti_tb(newrti).quantity);

               -- Bug 3395211
               -- Get the UOM code and Organization Id to calculate the primary qty.
               -- Bug 3446419
               -- This will not be called if values are passed in the record structure

               l_uom_code := p_rti_tb(newrti).uom_code;
               l_item_id  := p_rti_tb(newrti).item_id;
               l_to_organization_id := p_rti_tb(newrti).to_organization_id;

               if (l_uom_code is null or l_item_id is null or l_to_organization_id is null) then
               Begin
	         IF (l_debug = 1) THEN
	           print_debug('split_lot_serial: new_interface_trx_id = '|| p_rti_tb(newrti).new_interface_trx_id, 1);
                 End if;

                 select uom_code,
                        unit_of_measure,
                        item_id,
                        to_organization_id
                   into l_uom_code,
                        l_unit_of_measure,
                        l_item_id,
                        l_to_organization_id
                   from rcv_transactions_interface rti
                  where rti.interface_transaction_id = p_rti_tb(newrti).new_interface_trx_id;

                  if l_uom_code is null then
                    BEGIN
                     SELECT uom_code
                       into l_uom_code
                       FROM mtl_item_uoms_view
                       WHERE organization_id = l_to_organization_id
                       AND inventory_item_id =  l_item_id
                       AND unit_of_measure = l_unit_of_measure;
                     EXCEPTION
                       WHEN OTHERS THEN
                        IF (l_debug = 1) THEN
                           print_debug('SPLIT_LOT_SERIAL : Error retrieving UOM inside split_lot_serial', 1);
                        END IF;
                        l_progress := 'WMSINB-20835';
                        RAISE fnd_api.g_exc_error;
                     END;
                  End if;
               Exception
                 when others then
                        IF (l_debug = 1) THEN
                           print_debug('SPLIT_LOT_SERIAL : Error retrieving uom_code inside split_lot_serial ', 1);
                        END IF;
                        l_progress := 'WMSINB-20836';
                        RAISE fnd_api.g_exc_error;
               End;
               End if;

	       IF newrti = l_rti_count THEN
		  IF (l_debug = 1) THEN
		     print_debug('SPLIT_LOT_SERIAL:l_total_split_qty:'||l_total_split_qty,1);
		  END IF;

	          BEGIN
		     SELECT SUM(transaction_quantity)
		       INTO l_total_lot_qty
		       FROM mtl_transaction_lots_interface
		       WHERE product_code = 'RCV'
		       AND product_transaction_id = l_orig_interface_trx_id
                        AND (p_rti_tb(newrti).lot_number IS NULL OR (p_rti_tb(newrti).lot_number IS NOT NULL AND lot_number=p_rti_tb(newrti).lot_number)); -- for  13972742
		  EXCEPTION
		     WHEN no_data_found THEN
			l_total_lot_qty := 0;
		  END;

		  IF l_total_lot_qty IS NULL THEN
		     l_total_lot_qty := 0;
		  END IF;

		  IF (l_debug = 1) THEN
		     print_debug('SPLIT_LOT_SERIAL:l_total_lot_qty:'||l_total_lot_qty,1);
		  END IF;

                  BEGIN
		     SELECT SUM(inv_serial_number_pub.get_serial_diff(fm_serial_number,to_serial_number))
		       INTO l_total_serial_qty
		       FROM mtl_serial_numbers_interface
		       WHERE product_code = 'RCV'
		       AND product_transaction_id = l_orig_interface_trx_id;
		  EXCEPTION
		     WHEN no_data_found THEN
			l_total_serial_qty := 0;
		  END;

		  IF l_total_serial_qty IS NULL THEN
		     l_total_serial_qty := 0;
		  END IF;

		  IF (l_debug = 1) THEN
		     print_debug('SPLIT_LOT_SERIAL:l_total_serial_qty:'||l_total_serial_qty,1);
		  END IF;

		  IF (l_total_lot_qty <> 0 AND (abs(l_total_lot_qty - l_total_split_qty) > 0.00005)) THEN
		     IF (l_debug = 1) THEN
			print_debug('split_lot_serial:075.1: Lot Quantity Mismatch', 1);
			print_debug('split_lot_serial:075.2: total_lot_qty : '||l_total_lot_qty, 1);
			print_debug('split_lot_serial:075.3: total_split_qty : '||l_total_split_qty, 1);
		     END If;

		     -- raise an error
		     l_progress := 'WMSINB-20891';
		     RAISE fnd_api.g_exc_error;
		  END IF;

		  IF (l_total_serial_qty <> 0 AND l_total_serial_qty <> get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,l_total_split_qty)) THEN
		     IF (l_debug = 1) THEN
			print_debug('split_lot_serial:075.4: Serial Quantity Mismatch', 1);
			print_debug('split_lot_serial:075.5: total_serial_qty : '||l_total_serial_qty, 1);
			print_debug('split_lot_serial:075.6: total_split_qty : '||get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,l_total_split_qty), 1);
			print_debug('SPLIT_LOT_SERIAL : to_organization_id:'||l_to_organization_id, 1);
			print_debug('SPLIT_LOT_SERIAL : item_id:'||l_item_id, 1);
			print_debug('SPLIT_LOT_SERIAL : uom_code:'||l_uom_code, 1);
		     END If;

		     -- raise an error
		     l_progress := 'WMSINB-20903';
		     RAISE fnd_api.g_exc_error;
		  END IF;

		  -- one more check for lot/serial items

	          BEGIN
		     SELECT SUM(mtli.transaction_quantity)
		       INTO l_lot_ser_qty
		       FROM mtl_transaction_lots_interface mtli
		       WHERE mtli.product_code = 'RCV'
		       AND mtli.product_transaction_id = l_orig_interface_trx_id
		       AND (mtli.serial_transaction_temp_id IS NULL
			    OR nvl(mtli.primary_quantity,
                               get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,
                               mtli.transaction_quantity)
                           ) = (SELECT SUM(inv_serial_number_pub.get_serial_diff(msni.fm_serial_number,
                                                  msni.to_serial_number))
				    FROM mtl_serial_numbers_interface msni
				    WHERE  msni.transaction_interface_id = mtli.serial_transaction_temp_id))
                        AND (p_rti_tb(newrti).lot_number IS NULL OR (p_rti_tb(newrti).lot_number IS NOT NULL AND lot_number=p_rti_tb(newrti).lot_number)); -- for  13972742
		  EXCEPTION
		     WHEN no_data_found then
			l_lot_ser_qty := 0;
		  END;

		  IF l_lot_ser_qty IS NULL THEN
		     l_lot_ser_qty := 0;
		  END IF;

		  IF (l_debug = 1) THEN
		     print_debug('SPLIT_LOT_SERIAL:l_lot_ser_qty:'||l_lot_ser_qty,1);
		  END IF;

		  IF (l_total_lot_qty <> 0 AND l_total_lot_qty <> l_lot_ser_qty) THEN
		     IF (l_debug = 1) THEN
			print_debug('split_lot_serial:075.7: Lot Serial Quantity Mismatch', 1);
			print_debug('split_lot_serial:075.8: total_lot_qty : '||l_total_lot_qty, 1);
			print_debug('split_lot_serial:075.9: lot_ser_qty : '||l_lot_ser_qty, 1);
		     END If;

		     -- raise an error
		     l_progress := 'WMSINB-20941';
		     RAISE fnd_api.g_exc_error;
		  END IF;
	       END IF; --IF newrti = p_rti_tb.COUNT THEN
      END IF;
   END LOOP;

   -- Now split the rows
   FOR newrti IN 1..p_rti_tb.COUNT LOOP
      IF (l_debug = 1) THEN
	 print_debug('split_lot_serial:080: current record '||newrti, 1);
	 print_debug('split_lot_serial:090: orig interface trx id '
		     ||p_rti_tb(newrti).orig_interface_trx_id, 1);
	 print_debug('split_lot_serial:100: new interface trx id '
		     ||p_rti_tb(newrti).new_interface_trx_id, 1);
	 print_debug('split_lot_serial:110: transaction_quantity '
		     ||p_rti_tb(newrti).quantity, 1);
	 --print_debug('split_lot_serial:120: unit of measure '
         --||p_rti_tb(newrti).unit_of_measure, 1);
      END If;

      -- Bug 3395211
      -- Get the UOM code and Organization Id to calculate the primary qty.
      -- Bug 3446419
      -- This will not be called if values are passed in the record structure

      l_uom_code := p_rti_tb(newrti).uom_code;
      l_item_id  := p_rti_tb(newrti).item_id;
      l_to_organization_id := p_rti_tb(newrti).to_organization_id;

      if (l_uom_code is null or l_item_id is null or l_to_organization_id is null) then
      Begin
          IF (l_debug = 1) THEN
	      print_debug('split_lot_serial: new_interface_trx_id = '|| p_rti_tb(newrti).new_interface_trx_id, 1);
          End if;

           select uom_code,
               unit_of_measure,
               item_id,
               to_organization_id
          into l_uom_code,
               l_unit_of_measure,
               l_item_id,
               l_to_organization_id
          from rcv_transactions_interface rti
         where rti.interface_transaction_id = p_rti_tb(newrti).new_interface_trx_id;

         if l_uom_code is null then
           BEGIN
            SELECT uom_code
              into l_uom_code
              FROM mtl_item_uoms_view
              WHERE organization_id = l_to_organization_id
              AND inventory_item_id =  l_item_id
              AND unit_of_measure = l_unit_of_measure;
            EXCEPTION
              WHEN OTHERS THEN
               IF (l_debug = 1) THEN
                  print_debug('SPLIT_LOT_SERIAL : Error retrieving UOM inside split_lot_serial', 1);
               END IF;
               l_progress := 'WMSINB-20942';
               RAISE fnd_api.g_exc_error;
            END;
         End if;
      Exception
        when others then
               IF (l_debug = 1) THEN
                  print_debug('SPLIT_LOT_SERIAL : Error retrieving uom_code inside split_lot_serial ', 1);
               END IF;
               l_progress := 'WMSINB-20943';
               RAISE fnd_api.g_exc_error;
      END;
      End if;

      IF (p_rti_tb(newrti).new_interface_trx_id <> p_rti_tb(newrti).orig_interface_trx_id) THEN

	 IF (l_debug = 1) THEN
	    print_debug('split_lot_serial:130: Opening mtli cursor', 1);--13521315
	 END If;

	 /* Start bug 13492777 */
	 BEGIN

	 select shipment_line_id
	 into l_shipment_line_id
	 from rcv_transactions_interface
	 where interface_transaction_id = p_rti_tb(newrti).new_interface_trx_id;
	 EXCEPTION
	 WHEN OTHERS THEN
	 l_shipment_line_id := null;

	 END;
	 /* End bug 13492777 */

	 --OPEN mtli_recs(p_rti_tb(newrti).orig_interface_trx_id,l_shipment_line_id); --bug 13492777
	 --13521315 Commented the above and added code to open corresponding cursor based on shipment_line_id

     IF (l_debug = 1) THEN
      print_debug('split_lot_serial:125: Shipment_line_id '||l_shipment_line_id, 1);
     END IF;
    /*14573375
    The below section has been modified for 14573375.
    Issue:
    The shipment was from a Non WMS org to a WMS org and the item was non lot controlled
    in the source org. Hence there is no RLS record of type shipment while receiving.
    The cursor with shipment line works well but if there is an existing record in RLS
    with the SAME LOT number for some other shipment line , the cursor fails. Hence the
    MTLIs are not updated with the correct product_transaction_id and the transaction fails
    since RTP is not able to find the Lot.
    Changes done: Wrote an outer loop and run the same maximum twice or till the time
    the remaining quantity is <=0.
    Note: If the shipment_line_id is not null and the the outer loop runs second time,
    this means that the cursor either didnt find any rows or the matching did not happen perfectly.
    Hence the second time the loop runs, we null out the shipment_line_id and open the mtli
    cursor without shipment line.
	*/
    --14573375
    l_remaining_quantity := p_rti_tb(newrti).quantity;
	i := 1;
    LOOP
	IF (l_debug = 1) THEN
        print_debug('split_lot_serial:i: '||i, 1);
		print_debug('split_lot_serial:l_remaining_quantity: '||l_remaining_quantity, 1);
	END If;
	 EXIT WHEN i>2 OR l_remaining_quantity <=0;

	 IF(l_shipment_line_id IS NULL)THEN
		OPEN mtli_recs(p_rti_tb(newrti).orig_interface_trx_id);
		IF (l_debug = 1) THEN
			print_debug('split_lot_serial:130: Opening mtli_recs cursor', 1);
		END If;
	 ELSE
		OPEN mtli_recs_with_rsl(p_rti_tb(newrti).orig_interface_trx_id,l_shipment_line_id); --bug 13492777
		IF (l_debug = 1) THEN
			print_debug('split_lot_serial:130: Opening mtli_recs_with_rsl cursor', 1);
		END If;
	 END IF;
	 --13521315
	-- l_remaining_quantity := p_rti_tb(newrti).quantity; --14573375 Taken this above.

  	 LOOP
	 --13521315
		IF(l_shipment_line_id IS NULL)THEN
			FETCH mtli_recs INTO l_mtli_rec;
			EXIT WHEN mtli_recs%NOTFOUND;
		ELSE
			FETCH mtli_recs_with_rsl INTO l_mtli_rec;
			IF (mtli_recs_with_rsl%NOTFOUND) THEN --14573375
              IF (l_debug = 1) THEN
                print_debug('split_lot_serial: No Lines found with rls cursor.', 1);
                print_debug('split_lot_serial: So making shipment_line as null and looping again', 1);
              END IF;
			 l_shipment_line_id :=NULL;
			 EXIT;
			END IF;
		END IF;
	 --13521315
	    IF (l_debug = 1) THEN
		   print_debug('split_lot_serial:135: lot_num '||l_mtli_rec.lot_number, 1);
	       print_debug('split_lot_serial:140: remaining_qty '||l_remaining_quantity, 1);
	       print_debug('split_lot_serial:150: transaction_qty '||l_mtli_rec.transaction_quantity, 1);
	    END If;

	    l_primary_rem_qty := (l_remaining_quantity*l_mtli_rec.primary_quantity)/l_mtli_rec.transaction_quantity;

	    IF (l_mtli_rec.transaction_quantity <= l_remaining_quantity) THEN
	       -- update the mtli with new rti id.
	       UPDATE mtl_transaction_lots_interface
		      SET product_transaction_id = p_rti_tb(newrti).new_interface_trx_id
		    WHERE ROWID = l_mtli_rec.ROWID;

	       IF (l_debug = 1) THEN
		  print_debug('split_lot_serial:160: serial_txn_tmp_id '||l_mtli_rec.serial_transaction_temp_id, 1);
	       END If;

	       -- update the serial records if exist.
	       IF (l_mtli_rec.serial_transaction_temp_id IS NOT NULL) THEN
		  OPEN msni_recs_lotserial(l_mtli_rec.serial_transaction_temp_id);

		  l_serial_split_done := TRUE;

		  LOOP
		     FETCH msni_recs_lotserial INTO l_msni_rec;
		     EXIT WHEN msni_recs_lotserial%notfound;

		     IF (l_debug = 1) THEN
			print_debug('split_lot_serial:170: update msni ', 1);
		     END If;
		     -- update the msni with new rti id.
		     UPDATE mtl_serial_numbers_interface
		       SET product_transaction_id = p_rti_tb(newrti).new_interface_trx_id
		       WHERE ROWID = l_msni_rec.ROWID;

		  END LOOP; -- fetch msni_recs_lotserial
                  close msni_recs_lotserial;

	       END IF;
	       l_remaining_quantity := l_remaining_quantity -
		 l_mtli_rec.transaction_quantity;

	     ELSE
		  -- insert a new row with transaction_quantity = l_remaining
		  -- quantity and new rti id. And update the original row
		  -- with transaction_quantity =
		  -- l_mtli_rec.transaction_quantity - l_remaining_quantity

		  IF (l_mtli_rec.serial_transaction_temp_id IS NOT NULL)
		    THEN
		     SELECT mtl_material_transactions_s.NEXTVAL
		       INTO l_new_serial_txn_temp_id
		       FROM DUAL;
		   ELSE
		     l_new_serial_txn_temp_id := NULL;
		  END IF;

		  IF (l_debug = 1) THEN
		     print_debug('split_lot_serial:180: insert mtli rowid ', 1);
		  END If;

		  insert_mtli_rowid (p_rowid => l_mtli_rec.ROWID,
				     p_product_txn_id => p_rti_tb(newrti).new_interface_trx_id,
				     p_new_serial_txn_temp_id => l_new_serial_txn_temp_id,
				     p_quantity => l_remaining_quantity,
				     p_primary_quantity => l_primary_rem_qty,
				     x_return_status => x_return_status,
				     x_msg_count => x_msg_count,
				     x_msg_data => x_msg_data);

		  IF (x_return_status <> g_ret_sts_success) THEN
		     IF (l_debug = 1) THEN
			print_debug('split_lot_serial:185: insert mtli rowid failed ', 1);
		     END If;
		     -- raise error
		     l_progress := 'WMSINB-21051';
		     RAISE fnd_api.g_exc_error;
		  END IF;

		  IF (l_debug = 1) THEN
		     print_debug('split_lot_serial:190: update mtli ', 1);
		  END If;

		  -- update the original row
		  -- For OPM null out the secondary_transaction_quantity
		  UPDATE mtl_transaction_lots_interface
		    SET transaction_quantity = transaction_quantity -
		    l_remaining_quantity,
		    primary_quantity = primary_quantity - l_primary_rem_qty,
		    secondary_transaction_quantity = NULL
		    WHERE ROWID = l_mtli_rec.ROWID;

		  IF (l_mtli_rec.serial_transaction_temp_id IS NOT NULL) THEN
		     OPEN msni_recs_lotserial(l_mtli_rec.serial_transaction_temp_id);

		     l_serial_split_done := TRUE;
                     -- Bug 3395211
		     l_remaining_serial_qty := get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,l_remaining_quantity);

		     LOOP
			FETCH msni_recs_lotserial INTO l_msni_rec;
			EXIT WHEN msni_recs_lotserial%notfound;

			l_serial_quantity :=
			  inv_serial_number_pub.get_serial_diff(l_msni_rec.fm_serial_number,
								l_msni_rec.to_serial_number);

			IF (l_debug = 1) THEN
			   print_debug('split_lot_serial:200: serial quantity '||l_serial_quantity, 1);
			END If;

			IF (l_serial_quantity <= l_remaining_serial_qty)
			  THEN
			   -- update the msni record with new transaction
			   -- id and new serial_transaction_temp_id
			   IF (l_debug = 1) THEN
			      print_debug('split_lot_serial:210: update msni ', 1);
			   END If;

			   UPDATE mtl_serial_numbers_interface
			     SET product_transaction_id = p_rti_tb(newrti).new_interface_trx_id,
			     transaction_interface_id = l_new_serial_txn_temp_id
			     WHERE ROWID = l_msni_rec.ROWID;

			   l_remaining_serial_qty := l_remaining_serial_qty
			     - l_serial_quantity;
			 ELSE
			   -- split the msni row
			   inv_validate.number_from_sequence(l_msni_rec.fm_serial_number, l_temp_prefix, l_from_ser_number);

			   l_new_to_ser_num :=
			     SUBSTR(l_msni_rec.fm_serial_number, 1,
				    LENGTH(l_msni_rec.fm_serial_number) -
				    LENGTH(l_from_ser_number))||(l_from_ser_number+l_remaining_serial_qty-1);

			   l_new_from_ser_num :=
			     SUBSTR(l_msni_rec.fm_serial_number, 1,
				    LENGTH(l_msni_rec.fm_serial_number) -
				    LENGTH(l_from_ser_number))||(l_from_ser_number+l_remaining_serial_qty);

			   IF (l_debug = 1) THEN
			      print_debug('split_lot_serial:220: insert	msni rowid', 1);
			   END If;

			   --insert new msni row.
			   insert_msni_rowid (p_rowid =>l_msni_rec.ROWID,
					      p_product_txn_id => p_rti_tb(newrti).new_interface_trx_id,
					      p_new_serial_txn_temp_id => l_new_serial_txn_temp_id,
					      p_new_fm_ser_num => null,
					      p_new_to_ser_num => l_new_to_ser_num,
					      x_return_status =>x_return_status,
					      x_msg_count => x_msg_count,
					      x_msg_data => x_msg_data);

			   IF (x_return_status <> g_ret_sts_success) THEN
			      IF (l_debug = 1) THEN
				 print_debug('split_lot_serial:225: insert msni rowid failed ', 1);
			      END If;
			      -- raise error
			      l_progress := 'WMSINB-21134';
			      RAISE fnd_api.g_exc_error;
			   END IF;

			   -- update the original msni

			   IF (l_debug = 1) THEN
			      print_debug('split_lot_serial:230: update msni ', 1);
			   END IF;

			   UPDATE mtl_serial_numbers_interface
			     SET fm_serial_number = l_new_from_ser_num
			     WHERE ROWID = l_msni_rec.ROWID;

			   l_remaining_serial_qty := 0;
			END IF;

			IF (l_remaining_serial_qty = 0) THEN
			   EXIT;
			END IF;

		     END LOOP; -- fetch msni_recs_lotserial
                     close msni_recs_lotserial;
		  END IF;
		  l_remaining_quantity := 0;
	    END IF;

	    IF (l_remaining_quantity <= 0) THEN
	       EXIT;
	    END IF;

	 END LOOP; -- fetch mtli_recs
	 i:=i+1; --14573375
    IF (l_debug = 1) THEN
      print_debug('split_lot_serial:i at the END: '||i, 1);
    END IF;

	 --13521315
         --close mtli_recs;
		--14573375
		IF(mtli_recs%ISOPEN) THEN
			close mtli_recs;
		END IF;

		IF(mtli_recs_with_rsl%ISOPEN) THEN
			close mtli_recs_with_rsl;
	 	END IF;

     --13521315

    END LOOP; --14573375
	 -- split the serial rows.
	 IF NOT l_serial_split_done THEN
	 /* Start 9679278 */
	 BEGIN

	 select shipment_line_id
	 into l_shipment_line_id
	 from rcv_transactions_interface
	 where interface_transaction_id = p_rti_tb(newrti).new_interface_trx_id;
	 EXCEPTION
	 WHEN OTHERS THEN
	 l_shipment_line_id := null;

	 END;
	 /* End 9679278 */
	    --OPEN msni_recs(p_rti_tb(newrti).orig_interface_trx_id,l_shipment_line_id); --9679278
		--13521315 Commented the above and opening cursor based on Shipment_line_id
        IF (l_debug = 1) THEN
         print_debug('split_lot_serial:235: Shipment_line_id '||l_shipment_line_id, 1);
        END IF;

		IF(l_shipment_line_id IS NULL) THEN
		  OPEN msni_recs(p_rti_tb(newrti).orig_interface_trx_id);
		ELSE
	      OPEN msni_recs_with_rsl(p_rti_tb(newrti).orig_interface_trx_id,l_shipment_line_id);
		END IF;
		--13521315
            -- Bug 3395211
	    l_remaining_quantity := get_primary_qty(l_to_organization_id,l_item_id,l_uom_code,p_rti_tb(newrti).quantity);

	    LOOP
		--13521315
	      /*FETCH msni_recs INTO l_msni_rec;
	       EXIT WHEN msni_recs%notfound;*/
         IF(l_shipment_line_id IS NULL)THEN
            FETCH msni_recs INTO l_msni_rec;
            EXIT WHEN msni_recs%notfound;
         ELSE
            FETCH msni_recs_with_rsl INTO l_msni_rec;
            EXIT WHEN msni_recs_with_rsl%notfound;
         END IF;
		--13521315
	       IF (l_debug = 1) THEN
		    print_debug('split_lot_serial:236: Serial Number '||l_msni_rec.fm_serial_number, 1);
            print_debug('split_lot_serial:236: remaining quantity '||l_remaining_quantity, 1);
	       END If;

	       l_serial_quantity :=
		 inv_serial_number_pub.get_serial_diff(l_msni_rec.fm_serial_number,l_msni_rec.to_serial_number);

	       IF (l_debug = 1) THEN
		  print_debug('split_lot_serial:237: serial quantity '||l_serial_quantity, 1);
	       END If;

	       IF (l_serial_quantity <= l_remaining_quantity) THEN

		  IF (l_debug = 1) THEN
		     print_debug('split_lot_serial:240: update msni ', 1);
		     print_debug('split_lot_serial:241: new rti '||p_rti_tb(newrti).new_interface_trx_id, 1);
		  END If;

		  UPDATE mtl_serial_numbers_interface
		    SET product_transaction_id = p_rti_tb(newrti).new_interface_trx_id
		    WHERE ROWID = l_msni_rec.ROWID;

		  l_remaining_quantity := l_remaining_quantity -
		    l_serial_quantity;
		ELSE
		  -- split msni
		  inv_validate.number_from_sequence(l_msni_rec.fm_serial_number, l_temp_prefix, l_from_ser_number);

		  IF (l_debug = 1) THEN
		     print_debug('split_lot_serial:242: Almost ready to split msni ', 1);
		  END If;

		  l_new_to_ser_num :=
		    SUBSTR(l_msni_rec.fm_serial_number, 1,
			   LENGTH(l_msni_rec.fm_serial_number) -
			   LENGTH(l_from_ser_number))||(l_from_ser_number+l_remaining_quantity-1);

		  l_new_from_ser_num :=
		    SUBSTR(l_msni_rec.fm_serial_number, 1,
			   LENGTH(l_msni_rec.fm_serial_number) -
			   LENGTH(l_from_ser_number))||(l_from_ser_number+l_remaining_quantity);

		  IF (l_debug = 1) THEN
		     print_debug('split_lot_serial:250: insert msni rowid ', 1);
		  END If;

		  --insert new msni row.
		  insert_msni_rowid (p_rowid =>l_msni_rec.ROWID,
				     p_product_txn_id => p_rti_tb(newrti).new_interface_trx_id,
				     p_new_serial_txn_temp_id => NULL,
				     p_new_fm_ser_num => NULL,
				     p_new_to_ser_num => l_new_to_ser_num,
				     x_return_status =>x_return_status,
				     x_msg_count => x_msg_count,
				     x_msg_data => x_msg_data);

		  IF (x_return_status <> g_ret_sts_success) THEN
		     IF (l_debug = 1) THEN
			print_debug('split_lot_serial:255: insert msni rowid failed ', 1);
		     END If;
		     -- raise error
		     l_progress := 'WMSINB-21239';
		     RAISE fnd_api.g_exc_error;
		  END IF;

		  -- update the original msni

		  IF (l_debug = 1) THEN
		     print_debug('split_lot_serial:260: update msni ', 1);
		  END If;

		  UPDATE mtl_serial_numbers_interface
		    SET fm_serial_number = l_new_from_ser_num
		    WHERE ROWID = l_msni_rec.ROWID;

		  l_remaining_quantity := 0;
	       END IF;

	       IF (l_remaining_quantity <= 0) THEN
		  EXIT;
	       END IF;

	    END LOOP; -- fetch msni_recs
		  --13521315
            --close msni_recs;
			IF(l_shipment_line_id IS NULL)THEN
				close msni_recs;
			ELSE
				close msni_recs_with_rsl;
			END IF;
          --13521315
	 END IF;

      END IF;
   END LOOP; -- for loop

   IF (l_debug = 1) THEN
      print_debug('split_lot_serial:270: Exit Stamp :' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
   END If;

EXCEPTION
   WHEN fnd_api.g_exc_error THEN
      x_return_status  := g_ret_sts_error;
      IF (l_debug = 1) THEN
         print_debug('SPLIT_LOT_SERIAL - Execution Error:'||':'||l_progress||':'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
	 print_stacked_messages;
      END IF;

      x_msg_data := l_progress;

   WHEN fnd_api.g_exc_unexpected_error THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('SPLIT_LOT_SERIAL - Unexpected Error:'||':'||l_progress||':'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
	 print_stacked_messages;
      END IF;

      x_msg_data := l_progress;

   WHEN OTHERS THEN
      x_return_status  := g_ret_sts_unexp_error;
      IF (l_debug = 1) THEN
         print_debug('SPLIT_LOT_SERIAL - OTHER Exception: '||':'||l_progress||':'||
		     TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
	 print_stacked_messages;
      END IF;

      x_msg_data := l_progress;

      IF SQLCODE IS NOT NULL THEN
	 inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.SPLIT_LOT_SERIAL', Sqlerrm,SQLCODE);
      END IF;
      -- Get message count and data
      -- fnd_msg_pub.count_and_get(p_encoded => g_false, p_count => x_msg_count, p_data => x_msg_data);

END split_lot_serial;


--Function to check if the serials were entered for the parent transaction
FUNCTION serial_entered_on_parent (p_parent_txn_id IN NUMBER)
  RETURN BOOLEAN
  IS
     l_dummy VARCHAR2(1);
BEGIN
   SELECT '1'
     INTO l_dummy
     FROM rcv_serials_supply
     WHERE transaction_id = p_parent_txn_id
     AND ROWNUM = 1;

   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;

END serial_entered_on_parent;

--Function to check if the lots were entered for the parent transaction
FUNCTION lot_entered_on_parent (p_parent_txn_id IN NUMBER)
  RETURN BOOLEAN
  IS
     l_dummy VARCHAR2(1);
BEGIN
   SELECT '1'
     INTO l_dummy
     FROM rcv_lots_supply
     WHERE transaction_id = p_parent_txn_id
     AND ROWNUM = 1;

   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;

END lot_entered_on_parent;

--Function to check if the serials are present for ASN.
FUNCTION rss_exists (p_shipment_header_id IN NUMBER,
		     p_item_id            IN NUMBER)
  RETURN BOOLEAN
  IS
     l_dummy VARCHAR2(1);
BEGIN
   SELECT '1'
     INTO l_dummy
     FROM rcv_serials_supply rss
     , rcv_shipment_lines rsl
     WHERE rss.shipment_line_id = rsl.shipment_line_id
     AND rsl.shipment_header_id = p_shipment_header_id
     AND rsl.item_id = p_item_id
     AND rss.supply_type_code = 'SHIPMENT'
     AND ROWNUM = 1;

   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
END;

--Function to update the group_mark_id fro serials to -7937
FUNCTION update_group_mark_id(p_item_id IN NUMBER,
			      p_serial_number IN VARCHAR2)
  RETURN BOOLEAN
  IS
BEGIN
   UPDATE mtl_serial_numbers
     SET group_mark_id = -7937
     WHERE inventory_item_id = p_item_id
     AND serial_number = p_serial_number;

   RETURN TRUE;
EXCEPTION
   WHEN OTHERS THEN
      RETURN FALSE;
END;


-- Procedure to move lot/serial info from interface tables to temp tables
PROCEDURE move_lot_serial_info(p_rti_id IN NUMBER,
			       x_return_status OUT nocopy VARCHAR2,
			       x_msg_count OUT nocopy NUMBER,
			       x_msg_data OUT nocopy VARCHAR2)
  IS
     L_DEBUG NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_item_id number;
     l_org_id number;
     l_uom_code mtl_units_of_measure_vl.uom_code%TYPE;
     l_unit_of_measure mtl_units_of_measure_vl.unit_of_measure%TYPE;

     -- Bug 13886318 need to revert bug 12329840
     --x_serial_number_control_code NUMBER; -- Bug 12329840
BEGIN

   x_return_status := g_ret_sts_success;
   --Bug 9458159 The MTLT primary quantity should be inserted as the corresponding one for transaction quantity in primary uom.
   SELECT item_id,to_organization_id,uom_code,unit_of_measure
   INTO l_item_id,l_org_id,l_uom_code,l_unit_of_measure
   FROM RCV_TRANSACTIONS_INTERFACE
   WHERE interface_transaction_id=p_rti_id;

   IF(l_uom_code is null) then
        BEGIN
        SELECT uom_code
          INTO l_uom_code
          FROM MTL_UNITS_OF_MEASURE_VL
         WHERE unit_of_measure = l_unit_of_measure;

        EXCEPTION
             WHEN NO_DATA_FOUND THEN
                  print_debug('Unit of measure does not exist ',1);
                  fnd_message.set_name('INV', 'INV_UOM_NOTFOUND');
                  fnd_message.set_token('UOM', l_unit_of_measure);
                  fnd_msg_pub.add;
                  RAISE fnd_api.g_exc_error;
        END;
   END IF;

   INSERT INTO mtl_transaction_lots_temp (TRANSACTION_TEMP_ID,
					  LAST_UPDATE_DATE,
					  LAST_UPDATED_BY,
					  CREATION_DATE,
					  CREATED_BY,
					  LAST_UPDATE_LOGIN,
					  REQUEST_ID,
					  PROGRAM_APPLICATION_ID,
					  PROGRAM_ID,
					  PROGRAM_UPDATE_DATE,
					  TRANSACTION_QUANTITY,
					  PRIMARY_QUANTITY,
					  LOT_NUMBER,
					  LOT_EXPIRATION_DATE,
					  ERROR_CODE,
					  SERIAL_TRANSACTION_TEMP_ID,
					  DESCRIPTION,
					  VENDOR_NAME,
					  SUPPLIER_LOT_NUMBER,
					  ORIGINATION_DATE,
					  DATE_CODE,
					  GRADE_CODE,
					  CHANGE_DATE,
					  MATURITY_DATE,
					  STATUS_ID,
					  RETEST_DATE,
					  AGE,
					  ITEM_SIZE,
					  COLOR,
					  VOLUME,
					  VOLUME_UOM,
					  PLACE_OF_ORIGIN,
					  BEST_BY_DATE,
					  LENGTH,
					  LENGTH_UOM,
					  RECYCLED_CONTENT,
					  THICKNESS,
					  THICKNESS_UOM,
					  WIDTH,
					  WIDTH_UOM,
					  CURL_WRINKLE_FOLD,
					  LOT_ATTRIBUTE_CATEGORY,
					  C_ATTRIBUTE1,
					  C_ATTRIBUTE2,
					  C_ATTRIBUTE3,
					  C_ATTRIBUTE4,
     C_ATTRIBUTE5,
     C_ATTRIBUTE6,
     C_ATTRIBUTE7,
     C_ATTRIBUTE8,
     C_ATTRIBUTE9,
     C_ATTRIBUTE10,
     C_ATTRIBUTE11,
     C_ATTRIBUTE12,
     C_ATTRIBUTE13,
     C_ATTRIBUTE14,
     C_ATTRIBUTE15,
     C_ATTRIBUTE16,
     C_ATTRIBUTE17,
     C_ATTRIBUTE18,
     C_ATTRIBUTE19,
     C_ATTRIBUTE20,
     D_ATTRIBUTE1,
     D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     attribute_category,
     attribute1,
     attribute2,
     attribute3,
     attribute4,
     attribute5,
     attribute6,
     attribute7,
     attribute8,
     attribute9,
     attribute10,
     attribute11,
     attribute12,
     attribute13,
     attribute14,
     attribute15,
     VENDOR_ID,
     TERRITORY_CODE,
     PRODUCT_CODE,
     PRODUCT_TRANSACTION_ID,
     /*INVCONV , Remove sublot_num and add parent parent_lot_number and other attributes, Punit Kumar */

     /** OPM change Bug# 3061052**/
     --SUBLOT_NUM             ,
     PARENT_LOT_NUMBER        ,
     ORIGINATION_TYPE         ,
     EXPIRATION_ACTION_DATE   ,
     EXPIRATION_ACTION_CODE   ,
     HOLD_DATE    ,
     REASON_ID    ,
     /* end  INVCONV */
     SECONDARY_QUANTITY      ,
     REASON_CODE                    )
     SELECT transaction_interface_id ,
     LAST_UPDATE_DATE,
     LAST_UPDATED_BY,
     CREATION_DATE,
     CREATED_BY,
     LAST_UPDATE_LOGIN,
     REQUEST_ID,
     PROGRAM_APPLICATION_ID,
     PROGRAM_ID,
     PROGRAM_UPDATE_DATE,
     TRANSACTION_QUANTITY,
     --get_primary_qty(l_org_id,l_item_id,l_uom_code,transaction_quantity),  --Bug 9458159
     get_primary_qty(l_org_id,l_item_id,l_uom_code,transaction_quantity,Ltrim(Rtrim(lot_number))), --Bug 13981381, pass lot_number in order to consider lot specific UOM conversion
     Ltrim(Rtrim(lot_number)),
     LOT_EXPIRATION_DATE,
     ERROR_CODE,
     SERIAL_TRANSACTION_TEMP_ID,
     DESCRIPTION,
     VENDOR_NAME,
     SUPPLIER_LOT_NUMBER,
     ORIGINATION_DATE,
     DATE_CODE,
     GRADE_CODE,
     CHANGE_DATE,
     MATURITY_DATE,
     STATUS_ID,
     RETEST_DATE,
     AGE,
     ITEM_SIZE,
     COLOR,
     VOLUME,
     VOLUME_UOM,
     PLACE_OF_ORIGIN,
     BEST_BY_DATE,
     LENGTH,
     LENGTH_UOM,
     RECYCLED_CONTENT,
     THICKNESS,
     THICKNESS_UOM,
     WIDTH,
     WIDTH_UOM,
     CURL_WRINKLE_FOLD,
     LOT_ATTRIBUTE_CATEGORY,
     C_ATTRIBUTE1,
     C_ATTRIBUTE2,
     C_ATTRIBUTE3,
     C_ATTRIBUTE4,
     C_ATTRIBUTE5,
     C_ATTRIBUTE6,
     C_ATTRIBUTE7,
     C_ATTRIBUTE8,
     C_ATTRIBUTE9,
     C_ATTRIBUTE10,
     C_ATTRIBUTE11,
     C_ATTRIBUTE12,
     C_ATTRIBUTE13,
     C_ATTRIBUTE14,
     C_ATTRIBUTE15,
     C_ATTRIBUTE16,
     C_ATTRIBUTE17,
     C_ATTRIBUTE18,
     C_ATTRIBUTE19,
     C_ATTRIBUTE20,
     D_ATTRIBUTE1,
     D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     attribute_category,
     attribute1,
     attribute2,
     attribute3,
     attribute4,
     attribute5,
     attribute6,
     attribute7,
     attribute8,
     attribute9,
     attribute10,
     attribute11,
     attribute12,
     attribute13,
     attribute14,
     attribute15,
     VENDOR_ID,
     TERRITORY_CODE,
     PRODUCT_CODE,
     product_transaction_id,

     /*INVCONV , Remove sublot_num and add parent parent_lot_number and other attributes,
     ORIGINATION_TYPE defaulted to 'PURCHASING'. Punit Kumar */

     /** OPM change Bug# 3061052**/
     ---sublot_num,

     PARENT_LOT_NUMBER		   ,
     3             ,   /* defaulting the value of ORIGINATION_TYPE  to 'PURCHASING'*/
     EXPIRATION_ACTION_DATE   ,
     EXPIRATION_ACTION_CODE   ,
     HOLD_DATE                ,
     REASON_ID                ,
     /* end INVCONV */
     secondary_transaction_quantity,
     reason_code
     FROM mtl_transaction_lots_interface
     WHERE product_code = 'RCV'
     AND product_transaction_id = p_rti_id;


   IF (l_debug = 1) THEN
      print_debug('move_lot_serial_info - Number of MTLT Inserted =: '||SQL%ROWCOUNT ||
		  ' with product transaction_id = ' || p_rti_id, 1);
      /*INVCONV*/
       print_debug('INVCONV, removed sublot_num, Added some more parameters in INSERT INTO mtl_transaction_lots_temp (move_lot_serial_info)', 1);
     /*end , INVCONV*/

   END IF;

   -- Bug 13886318 need to revert bug 12329840
   /* Bug 12329840 Modified the code so that we are not inserting into MSNT
      if the item's serial control code is 1
   */
/*   BEGIN
       SELECT msi.serial_number_control_code
       INTO   x_serial_number_control_code
       FROM   mtl_system_items msi, rcv_transactions_interface rti
       WHERE  msi.inventory_item_id        = rti.item_id
       AND    msi.organization_id          = rti.to_organization_id
       AND    rti.interface_transaction_id = p_rti_id;
   EXCEPTION
       WHEN OTHERS THEN
           x_serial_number_control_code := 1;
           IF (l_debug = 1) THEN
               print_debug('Ignoring exception while retrieving serial number control code', 1);
           END IF;
   END;

   IF (x_serial_number_control_code <> 1) THEN  */  -- Bug 13886318 need to revert bug 12329840

   INSERT INTO mtl_serial_numbers_temp (TRANSACTION_TEMP_ID,
					LAST_UPDATE_DATE,
					LAST_UPDATED_BY,
					CREATION_DATE,
					CREATED_BY,
					LAST_UPDATE_LOGIN,
					REQUEST_ID,
					PROGRAM_APPLICATION_ID,
					PROGRAM_ID,
					PROGRAM_UPDATE_DATE,
					VENDOR_SERIAL_NUMBER,
					VENDOR_LOT_NUMBER,
					FM_SERIAL_NUMBER,
					TO_SERIAL_NUMBER,
					ERROR_CODE,
					PARENT_SERIAL_NUMBER,
					SERIAL_ATTRIBUTE_CATEGORY,
					ORIGINATION_DATE,
					C_ATTRIBUTE1,
					C_ATTRIBUTE2,
					C_ATTRIBUTE3,
					C_ATTRIBUTE4,
					C_ATTRIBUTE5,
					C_ATTRIBUTE6,
					C_ATTRIBUTE7,
					C_ATTRIBUTE8,
					C_ATTRIBUTE9,
					C_ATTRIBUTE10,
					C_ATTRIBUTE11,
					C_ATTRIBUTE12,
					C_ATTRIBUTE13,
					C_ATTRIBUTE14,
					C_ATTRIBUTE15,
					C_ATTRIBUTE16,
					C_ATTRIBUTE17,
					C_ATTRIBUTE18,
					C_ATTRIBUTE19,
					C_ATTRIBUTE20,
					D_ATTRIBUTE1,
					D_ATTRIBUTE2,
					D_ATTRIBUTE3,
					D_ATTRIBUTE4,
					D_ATTRIBUTE5,
					D_ATTRIBUTE6,
					D_ATTRIBUTE7,
					D_ATTRIBUTE8,
					D_ATTRIBUTE9,
					D_ATTRIBUTE10,
					N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     attribute_category,
     attribute1,
     attribute2,
     attribute3,
     attribute4,
     attribute5,
     attribute6,
     attribute7,
     attribute8,
     attribute9,
     attribute10,
     attribute11,
     attribute12,
     attribute13,
     attribute14,
     attribute15,
     STATUS_ID,
     TERRITORY_CODE,
     TIME_SINCE_NEW,
     CYCLES_SINCE_NEW,
     TIME_SINCE_OVERHAUL,
     CYCLES_SINCE_OVERHAUL,
     TIME_SINCE_REPAIR,
     CYCLES_SINCE_REPAIR,
     TIME_SINCE_VISIT,
     CYCLES_SINCE_VISIT,
     TIME_SINCE_MARK,
     CYCLES_SINCE_MARK,
     NUMBER_OF_REPAIRS,
     PRODUCT_CODE,
     product_transaction_id)
     SELECT transaction_interface_id,
     LAST_UPDATE_DATE,
     LAST_UPDATED_BY,
     CREATION_DATE,
     CREATED_BY,
     LAST_UPDATE_LOGIN,
     REQUEST_ID,
     PROGRAM_APPLICATION_ID,
     PROGRAM_ID,
     PROGRAM_UPDATE_DATE,
     VENDOR_SERIAL_NUMBER,
     VENDOR_LOT_NUMBER,
     FM_SERIAL_NUMBER,
     TO_SERIAL_NUMBER,
     ERROR_CODE,
     PARENT_SERIAL_NUMBER,
     SERIAL_ATTRIBUTE_CATEGORY,
     ORIGINATION_DATE,
     C_ATTRIBUTE1,
     C_ATTRIBUTE2,
     C_ATTRIBUTE3,
     C_ATTRIBUTE4,
     C_ATTRIBUTE5,
     C_ATTRIBUTE6,
     C_ATTRIBUTE7,
     C_ATTRIBUTE8,
     C_ATTRIBUTE9,
     C_ATTRIBUTE10,
     C_ATTRIBUTE11,
     C_ATTRIBUTE12,
     C_ATTRIBUTE13,
     C_ATTRIBUTE14,
     C_ATTRIBUTE15,
     C_ATTRIBUTE16,
     C_ATTRIBUTE17,
     C_ATTRIBUTE18,
     C_ATTRIBUTE19,
     C_ATTRIBUTE20,
     D_ATTRIBUTE1,
     D_ATTRIBUTE2,
     D_ATTRIBUTE3,
     D_ATTRIBUTE4,
     D_ATTRIBUTE5,
     D_ATTRIBUTE6,
     D_ATTRIBUTE7,
     D_ATTRIBUTE8,
     D_ATTRIBUTE9,
     D_ATTRIBUTE10,
     N_ATTRIBUTE1,
     N_ATTRIBUTE2,
     N_ATTRIBUTE3,
     N_ATTRIBUTE4,
     N_ATTRIBUTE5,
     N_ATTRIBUTE6,
     N_ATTRIBUTE7,
     N_ATTRIBUTE8,
     N_ATTRIBUTE9,
     N_ATTRIBUTE10,
     attribute_category,
     attribute1,
     attribute2,
     attribute3,
     attribute4,
     attribute5,
     attribute6,
     attribute7,
     attribute8,
     attribute9,
     attribute10,
     attribute11,
     attribute12,
     attribute13,
     attribute14,
     attribute15,
     STATUS_ID,
     TERRITORY_CODE,
     TIME_SINCE_NEW,
     CYCLES_SINCE_NEW,
     TIME_SINCE_OVERHAUL,
     CYCLES_SINCE_OVERHAUL,
     TIME_SINCE_REPAIR,
     CYCLES_SINCE_REPAIR,
     TIME_SINCE_VISIT,
     CYCLES_SINCE_VISIT,
     TIME_SINCE_MARK,
     CYCLES_SINCE_MARK,
     NUMBER_OF_REPAIRS,
     PRODUCT_CODE,
     product_transaction_id
     FROM mtl_serial_numbers_interface
     WHERE product_code = 'RCV'
     AND product_transaction_id = p_rti_id;

   IF (l_debug = 1) THEN
      print_debug('move_lot_serial_info - Number of MSNT Inserted =: '||SQL%ROWCOUNT ||
		  ' with product transaction_id =' || p_rti_id, 1);
   END IF;

   -- Bug 13886318 need to revert bug 12329840
   -- END IF; -- Bug 12329840

/* Added By Bug#9713930 */
   UPDATE mtl_transaction_lots_temp mtlt
   set mtlt.serial_transaction_temp_id =
   (Select msni.transaction_interface_id
   from mtl_serial_numbers_interface msni where
   msni.product_code = 'RCV'
   AND msni.product_transaction_id = p_rti_id
   and rownum=1)
   where mtlt.product_code = 'RCV'
   AND mtlt.product_transaction_id = p_rti_id
   and mtlt.serial_transaction_temp_id is null;

   --delete mtli and msni
   DELETE FROM mtl_transaction_lots_interface
     WHERE product_code = 'RCV'
     AND product_transaction_id = p_rti_id;

   DELETE FROM mtl_serial_numbers_interface
     WHERE product_code = 'RCV'
     AND product_transaction_id = p_rti_id;

EXCEPTION
   WHEN OTHERS THEN
      IF (l_debug = 1) THEN
         print_debug('move_lot_serial_info - Other Exception error = '|| SQLCODE || ' this is ignored ' , 1);
      END IF;
      NULL;
END move_lot_serial_info;


/* The following procedure will be called from RCV processor to validate
lot serials. This procecure will be called once for each RTI row. */


  PROCEDURE VALIDATE_LOT_SERIAL_INFO (P_RTI_ID IN NUMBER,
				      X_RETURN_STATUS OUT NOCOPY VARCHAR2,
				      X_MSG_COUNT OUT NOCOPY NUMBER,
				      X_MSG_DATA OUT NOCOPY VARCHAR2)
  IS
     l_lot_status_enabled VARCHAR2(1) := 'Y'; --Bug 4066234
     --Bug #3187688 - Fetch the INV attribute category and attributes1-15 from MTLT
     CURSOR C_MTLT (L_RTI_ID NUMBER) IS
	SELECT Ltrim(Rtrim(lot_number)) lot_number
	  , SERIAL_TRANSACTION_TEMP_ID
	  , TRANSACTION_QUANTITY
	  , primary_quantity
	  , lot_expiration_date
	  , lot_attribute_category
	  , C_ATTRIBUTE1
	  , C_ATTRIBUTE2
	  , C_ATTRIBUTE3
	  , C_ATTRIBUTE4
	  , C_ATTRIBUTE5
	  , C_ATTRIBUTE6
	  , C_ATTRIBUTE7
	  , C_ATTRIBUTE8
	  , C_ATTRIBUTE9
	  , C_ATTRIBUTE10
	  , C_ATTRIBUTE11
	  , C_ATTRIBUTE12
	  , C_ATTRIBUTE13
	  , C_ATTRIBUTE14
	  , C_ATTRIBUTE15
	  , C_ATTRIBUTE16
	  , C_ATTRIBUTE17
	  , C_ATTRIBUTE18
	  , C_ATTRIBUTE19
	  , C_ATTRIBUTE20
	  , D_ATTRIBUTE1
	  , D_ATTRIBUTE2
	  , D_ATTRIBUTE3
	  , D_ATTRIBUTE4
	  , D_ATTRIBUTE5
	  , D_ATTRIBUTE6
	  , D_ATTRIBUTE7
	  , D_ATTRIBUTE8
	  , D_ATTRIBUTE9
	  , D_ATTRIBUTE10
	  , N_ATTRIBUTE1
	  , N_ATTRIBUTE2
	  , N_ATTRIBUTE3
	  , N_ATTRIBUTE4
	  , N_ATTRIBUTE5
	  , N_ATTRIBUTE6
	  , N_ATTRIBUTE7
	  , N_ATTRIBUTE8
	  , N_ATTRIBUTE9
	  , n_attribute10
	  , grade_code
	  , origination_date
	  , date_code
	  , Decode(l_lot_status_enabled,'Y',status_id,1) status_id --Bug 4066234
	  , change_date
	  , age
	  , retest_date
	  , maturity_date
	  , item_size
	  , color
	  , volume
	  , volume_uom
	  , place_of_origin
	  , best_by_date
	  , Length
	  , length_uom
	  , recycled_content
	  , thickness
	  , thickness_uom
	  , width
	  , width_uom
	  , territory_code
	  , supplier_lot_number
	  , vendor_name
	  /** INVCONV,remove sublot_number, add Parent lot number and SECONDARY_UNIT_OF_MEASURE etc,
      Punit Kumar**/
	  ---, Ltrim(Rtrim(sublot_num)) sublot_num
     ,Ltrim(Rtrim(PARENT_LOT_NUMBER)) PARENT_LOT_NUMBER
     ----,SECONDARY_UNIT_OF_MEASURE
     ,REASON_ID
     ,LAST_UPDATED_BY
     ,CREATED_BY
     ,LAST_UPDATE_LOGIN
     ,REQUEST_ID
     ,PROGRAM_APPLICATION_ID
     ,PROGRAM_ID
     ,PROGRAM_UPDATE_DATE
     ,DESCRIPTION
     ,CURL_WRINKLE_FOLD
     ,VENDOR_ID
     ,ORIGINATION_TYPE
     ,EXPIRATION_ACTION_DATE
     ,EXPIRATION_ACTION_CODE
     ,HOLD_DATE
     ----,TRANSACTION_TEMP_ID
     /* end INVCONV */
	  , secondary_quantity
	  , reason_code
	  , rowid
    , attribute_category
    , attribute1
    , attribute2
    , attribute3
    , attribute4
    , attribute5
    , attribute6
    , attribute7
    , attribute8
    , attribute9
    , attribute10
    , attribute11
    , attribute12
    , attribute13
    , attribute14
    , attribute15
	  FROM MTL_TRANSACTION_LOTS_TEMP
	  WHERE PRODUCT_CODE = 'RCV'
	  AND PRODUCT_TRANSACTION_ID = L_RTI_ID;

     L_MTLT_REC C_MTLT%ROWTYPE;

     CURSOR C_MSNT (L_RTI_ID NUMBER) IS
	SELECT FM_SERIAL_NUMBER
	  , to_serial_number
	  , vendor_serial_number
	  , transaction_temp_id
	  , serial_attribute_category
	  , origination_date
	  , c_attribute1
	  , c_attribute2
	  , c_attribute3
	  , c_attribute4
	  , c_attribute5
	  , c_attribute6
	  , c_attribute7
	  , c_attribute8
	  , c_attribute9
	  , c_attribute10
	  , c_attribute11
	  , c_attribute12
	  , c_attribute13
	  , c_attribute14
	  , c_attribute15
	  , c_attribute16
	  , c_attribute17
	  , c_attribute18
	  , c_attribute19
	  , c_attribute20
	  , d_attribute1
	  , d_attribute2
	  , d_attribute3
	  , d_attribute4
	  , d_attribute5
	  , d_attribute6
	  , d_attribute7
	  , d_attribute8
	  , d_attribute9
	  , d_attribute10
	  , n_attribute1
	  , n_attribute2
	  , n_attribute3
	  , n_attribute4
	  , n_attribute5
	  , n_attribute6
	  , n_attribute7
	  , n_attribute8
	  , n_attribute9
	  , n_attribute10
	  , status_id
	  , territory_code
	  , attribute_category
	  , attribute1
	  , attribute2
	  , attribute3
	  , attribute4
	  , attribute5
	  , attribute6
	  , attribute7
	  , attribute8
	  , attribute9
	  , attribute10
	  , attribute11
	  , attribute12
	  , attribute13
	  , attribute14
	  , attribute15
	  , ROWID
	  FROM MTL_SERIAL_NUMBERS_TEMP
	  WHERE PRODUCT_CODE = 'RCV'
	  AND PRODUCT_TRANSACTION_ID = L_RTI_ID;

     L_MSNT_REC C_MSNT%ROWTYPE;

     CURSOR C_MSNT_LOTSERIAL (L_SERIAL_TXN_ID NUMBER) IS
	SELECT FM_SERIAL_NUMBER
	  , to_serial_number
	  , vendor_serial_number
	  , transaction_temp_id
	  , serial_attribute_category
	  , origination_date
	  , c_attribute1
	  , c_attribute2
	  , c_attribute3
	  , c_attribute4
	  , c_attribute5
	  , c_attribute6
	  , c_attribute7
	  , c_attribute8
	  , c_attribute9
	  , c_attribute10
	  , c_attribute11
	  , c_attribute12
	  , c_attribute13
	  , c_attribute14
	  , c_attribute15
	  , c_attribute16
	  , c_attribute17
	  , c_attribute18
	  , c_attribute19
	  , c_attribute20
	  , d_attribute1
	  , d_attribute2
	  , d_attribute3
	  , d_attribute4
	  , d_attribute5
	  , d_attribute6
	  , d_attribute7
	  , d_attribute8
	  , d_attribute9
	  , d_attribute10
	  , n_attribute1
	  , n_attribute2
	  , n_attribute3
	  , n_attribute4
	  , n_attribute5
	  , n_attribute6
	  , n_attribute7
	  , n_attribute8
	  , n_attribute9
	  , n_attribute10
	  , status_id
	  , territory_code
	  , attribute_category
	  , attribute1
      , attribute2
      , attribute3
      , attribute4
      , attribute5
      , attribute6
      , attribute7
      , attribute8
      , attribute9
      , attribute10
      , attribute11
      , attribute12
      , attribute13
      , attribute14
      , attribute15
	  , ROWID
	  FROM MTL_SERIAL_NUMBERS_TEMP
	  WHERE PRODUCT_CODE = 'RCV'
	  AND transaction_temp_id = L_SERIAL_TXN_ID;

     l_rti_id NUMBER;

     L_TRANSACTION_TYPE VARCHAR2(25);
     L_AUTO_TRANSACT_CODE VARCHAR2(25);
     L_SOURCE_DOCUMENT_CODE VARCHAR2(25);
     L_ITEM_ID NUMBER;
     l_item_revision varchar2(3);
     L_LPN_ID NUMBER;
     L_TRANSFER_LPN_ID NUMBER;
     L_LOT_CONTROL_CODE NUMBER;
     L_SERIAL_NUMBER_CONTROL_CODE NUMBER;
     L_FROM_ORG_ID NUMBER;
     L_ORG_ID NUMBER;
     L_SHIPMENT_LINE_ID NUMBER;
     L_SHIPMENT_HEADER_ID NUMBER;
     L_PARENT_TRANSACTION_ID NUMBER;
     L_SUB_CODE VARCHAR2(10);
     L_LOC_ID NUMBER;
     l_routing_header_id NUMBER;
     l_asn_line_flag VARCHAR2(1);
     l_rti_primary_qty NUMBER;
     l_rti_trans_qty NUMBER; -- Bug# 4225766
     l_mobile_txn VARCHAR2(1);
     l_inv_txn_id NUMBER;
     l_proc_mode_code VARCHAR2(30);

     l_destination_type_code VARCHAR2(30);

     l_transaction_type_id NUMBER;
     l_transaction_action_id NUMBER;

     L_NUM_MTLT_RECS NUMBER;
     L_NUM_MSNT_RECS NUMBER;
     l_tot_mtlt_prim_qty NUMBER;
     l_tot_mtlt_trans_qty NUMBER; -- Bug# 4225766
     l_tot_msnt_serial_qty NUMBER;

     L_LOT_EXISTS NUMBER := 0;
     l_serial_exists NUMBER := 0;

     L_SERIAL_QUANTITY NUMBER;
     L_TEMP_PREFIX VARCHAR2(30);
     L_FROM_SER_NUMBER NUMBER;
     L_TO_SER_NUMBER   NUMBER;
     L_SERIAL_NUMBER VARCHAR2(30);
     L_CUR_NUMBER     NUMBER;

     L_CURR_ORG_ID NUMBER;
     L_CURR_STATUS NUMBER;
-- Increased lot size to 80 Char - Mercy Thomas - B4625329
     l_curr_lot_num VARCHAR2(80);
     l_curr_lpn_id NUMBER;
     l_inspection_status NUMBER;
     l_group_mark_id NUMBER;

     L_FROM_ORG_LOT_CTRL NUMBER;
     L_FROM_ORG_SER_CRTL NUMBER;
     l_from_org_rev_ctrl NUMBER;

     L_DUMMY VARCHAR2(1);
     L_ATT_VAL_STATUS VARCHAR2(1);
     L_LOT_ENTERED_ON_PARENT BOOLEAN;
     L_SERIAL_ENTERED_ON_PARENT BOOLEAN;
     L_RLS_PRIMARY_QUANTITY NUMBER;

     L_VALIDATION_STATUS VARCHAR2(1);

     --l_txn_src_type_id NUMBER; /*bug4187663*/

     l_inv_attributes_tbl           inv_lot_api_pub.char_tbl;
     l_c_attributes_tbl             inv_lot_api_pub.char_tbl;
     l_n_attributes_tbl             inv_lot_api_pub.number_tbl;
     l_d_attributes_tbl             inv_lot_api_pub.date_tbl;

     l_serial_attributes_tbl        inv_lot_sel_attr.lot_sel_attributes_tbl_type;

     l_inv_att_index NUMBER;

     l_parent_txn_type VARCHAR2(25);
     l_grand_parent_txn_id NUMBER;

     l_grand_parent_txn_type VARCHAR2(25);
     l_great_grand_parent_txn_id NUMBER;

     l_object_id NUMBER;

     l_dummy_lpn NUMBER;

     l_restrict_rcpt_ser VARCHAR2(1) := NVL(fnd_profile.value('INV_RESTRICT_RCPT_SER'),'2');

     L_DEBUG NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
     l_progress VARCHAR2(15) := '00';

     l_intransit_type NUMBER := 0;

     -- OPM related variables. bug# 3061052
     l_discrete_transaction	BOOLEAN := TRUE;
     l_opm_lot_ctl		NUMBER(5) := -1;
     ----l_opm_sublot_ctl		NUMBER(5) := -1;
     l_opm_item_id		NUMBER    := NULL ;
     l_item_no			VARCHAR2(32) ;
     l_opm_lot_id		NUMBER;
     /* INVCONV , added local variables. Punit Kumar */
     l_parent_lot_number            VARCHAR2(80);
     l_OE_ORDER_HEADER_ID           NUMBER      ;
     l_OE_ORDER_LINE_ID             NUMBER      ;
     l_rti_SECONDARY_QUANTITY       NUMBER      ;
     l_rti_PRIMARY_UNIT_OF_MEASURE  VARCHAR2(25);
     l_rti_UNIT_OF_MEASURE          VARCHAR2(25);
     l_rti_UOM_CODE                 VARCHAR2(3) ;
     l_rti_SECONDARY_UOM_CODE       VARCHAR2(3) ;
     l_mln_rec          mtl_lot_numbers%ROWTYPE ;
     l_sourcedoc_unit_of_measure    VARCHAR2(25);
     l_rti_SEC_UNIT_OF_MEASURE   VARCHAR2(25);
     /* end INVCONV */

     --R12: EPC requirements
     l_lpn_grp_id                   NUMBER;
     l_epc_column                   VARCHAR2(30);
     l_epc_value                    VARCHAR2(100);
     l_return_status                VARCHAR2(1);
     l_msg_data                     VARCHAR2(2000);
     --END R12

     l_last_transaction_id       mtl_material_transactions.transaction_id%type; --bug 5168883
     l_last_transaction_type_id  mtl_material_transactions.transaction_type_id%type; -- 5168883

     --Serial tagging
     l_parent_transaction_type       VARCHAR2(25);
     l_serial_tagged                 NUMBER := 1; -- Bug 13886318 added initianlization
     l_allow_status_entry VARCHAR2(3)   := NVL(fnd_profile.VALUE('INV_ALLOW_ONHAND_STATUS_ENTRY'), 'N');  -- Material Status Enhancement - Tracking bug: 13519864
     l_default_status_id number := NULL; -- Material Status Enhancement - Tracking bug: 13519864
	 l_from_subinventory VARCHAR2(10); -- Bug 14269152
     l_from_locator_id NUMBER; -- Bug 14269152

  BEGIN
    X_RETURN_STATUS := G_RET_STS_SUCCESS;

    IF (l_debug = 1) THEN
        print_debug('VALIDATE_LOT_SERIAL_INFO: RTI_ID =  : '|| P_RTI_ID , 1);
    END IF;

    L_RTI_ID := P_RTI_ID;

    l_progress := 'WMSINB-21949';

    --FIRST MOVE MTLI TO MTLT AND MSNI TO MSNT.
    MOVE_LOT_SERIAL_INFO(P_RTI_ID => L_RTI_ID,
			  X_RETURN_STATUS => X_RETURN_STATUS,
			  X_MSG_COUNT => X_MSG_COUNT,
			  X_MSG_DATA => X_MSG_DATA);
    IF X_RETURN_STATUS <> 'S' THEN
        -- RAIse error
        l_progress := 'WMSINB-21958';
        RAISE fnd_api.g_exc_error;
    END IF;

    IF (l_debug = 1) THEN
         print_debug('VALIDATE_LOT_SERIAL_INFO: MOVE_LOT_SERIAL_INFO done :'||l_progress, 1);
         l_progress := 'WMSINB-21964';
    END IF;

    -- QUERY RTI TO GET SOME BASIC INFORMATION FROM RTI
    BEGIN
        SELECT TRANSACTION_TYPE
        , AUTO_TRANSACT_CODE
        , SOURCE_DOCUMENT_CODE
        , item_id
        , item_revision
        , LPN_ID
        , TRANSFER_LPN_ID
        , FROM_ORGANIZATION_ID
        , TO_ORGANIZATION_ID
        , SHIPMENT_LINE_ID
        , PARENT_TRANSACTION_ID
        , SUBINVENTORY
        , locator_id
        , routing_header_id
        , Nvl(primary_quantity, quantity)
        , quantity -- Bug# 4225766
        , shipment_header_id
        , destination_type_code
        , Nvl(mobile_txn, 'N')
        , inv_transaction_id
        , processing_mode_code
         /* INVCONV , added following , Punit Kumar */
        ,OE_ORDER_HEADER_ID
        ,OE_ORDER_LINE_ID
        ,SECONDARY_QUANTITY
        ,PRIMARY_UNIT_OF_MEASURE
        ,UOM_CODE
        ,SECONDARY_UOM_CODE
        ,SOURCE_DOC_UNIT_OF_MEASURE
        ,UNIT_OF_MEASURE
        ,SECONDARY_UNIT_OF_MEASURE
        /* end INVCONV */
        ,lpn_group_id
        ,from_subinventory -- Bug 14269152
        ,from_locator_id -- Bug 14269152
        INTO L_TRANSACTION_TYPE
        , L_AUTO_TRANSACT_CODE
        , L_SOURCE_DOCUMENT_CODE
        , l_item_id
        , l_item_revision
        , L_LPN_ID
        , L_TRANSFER_LPN_ID
        , L_FROM_ORG_ID
        , L_ORG_ID
        , L_SHIPMENT_LINE_ID
        , L_PARENT_TRANSACTION_ID
        , L_SUB_CODE
        , l_loc_id
        , l_routing_header_id
        , l_rti_primary_qty
        , l_rti_trans_qty -- Bug# 4225766
        , l_shipment_header_id
        , l_destination_type_code
        , l_mobile_txn
        , l_inv_txn_id
        , l_proc_mode_code
        /* INVCONV , added following , Punit Kumar */
        , l_OE_ORDER_HEADER_ID
        , l_OE_ORDER_LINE_ID
        , l_rti_SECONDARY_QUANTITY
        , l_rti_PRIMARY_UNIT_OF_MEASURE
        , l_rti_UOM_CODE
        , l_rti_SECONDARY_UOM_CODE
        , l_sourcedoc_unit_of_measure
        , l_rti_UNIT_OF_MEASURE
        , l_rti_SEC_UNIT_OF_MEASURE
        /* end INVCONV */
        , l_lpn_grp_id
        , l_from_subinventory -- Bug 14269152
        , l_from_locator_id -- Bug 14269152
        FROM RCV_TRANSACTIONS_INTERFACE
        WHERE INTERFACE_TRANSACTION_ID = L_RTI_ID;

        IF l_shipment_line_id IS NOT NULL THEN
            -- THIS IS CHANGED TO TAKE INTO ACCOUNT ASN_TYPE
            --SELECT Nvl(asn_line_flag, 'N')
            --  INTO l_asn_line_flag
            --  FROM rcv_shipment_lines
            --  WHERE shipment_line_id = l_shipment_line_id;
            --Bug 13891514 Adding ASBN as well because the validations/processing is same for ASN/ASBN
            select decode(ASN_TYPE,'ASN','Y', 'ASBN','Y','N')
              into l_asn_line_flag
              from rcv_shipment_headers
              WHERE shipment_header_id =  l_shipment_header_id;
        ELSE
            l_asn_line_flag := 'N';
        END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         -- RAISE ERROR
         l_progress := 'WMSINB-22014';
         RAISE fnd_api.g_exc_error;
    END;

    IF (l_debug = 1) THEN
         print_debug('VALIDATE_LOT_SERIAL_INFO: RTI query done :'||l_progress, 1);
         print_debug('VALIDATE_LOT_SERIAL_INFO: TRANSACTION TYPE: '||l_transaction_type||': '||l_progress, 1);
         l_progress := 'WMSINB-22021';
    END IF;

    -- If destination_type_Code is EXPENSE then lot/serial information is
    -- not required.
    IF (Nvl(l_destination_type_code, '@@@@@') IN ('EXPENSE','SHOP FLOOR')) THEN
        IF (l_debug = 1) THEN
           print_debug('VALIDATE_LOT_SERIAL_INFO: Destination EXPENSE/SHOP FLOOR. Exiting...',1);
        END IF;
        RETURN;
    END IF;

    -- ONE TIME ITEMS CANNOT BE LOT/SERIAL CONTROLLED
    IF l_item_id IS NULL THEN
        IF (l_debug = 1) THEN
           print_debug('VALIDATE_LOT_SERIAL_INFO: One Time Item. Exiting...',1);
        END IF;
        RETURN;
    END IF;

    --If the source document is 'REQ' then of the intransit_type in
    --mtl_interorg_parameters is set to 'Direct' then exit from this api.
    IF (l_source_document_code = 'REQ'
         AND l_mobile_txn = 'N'
         AND l_transaction_type = 'RECEIVE'
         AND l_inv_txn_id IS NOT NULL
         AND l_proc_mode_code = 'ONLINE') THEN
        BEGIN
           SELECT intransit_type
             INTO l_intransit_type
             FROM mtl_interorg_parameters
             WHERE from_organization_id = l_from_org_id
             AND to_organization_id = l_org_id;

           IF (l_intransit_type = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: Direct Org Transfer ... Exitting...',1);
              RETURN;
           END IF;
        EXCEPTION
           WHEN OTHERS THEN
              NULL;
        END;
    END IF; --IF (l_source_document_code = 'REQ') THEN

    /*INVCONV, The code is forked for OPM specific logic.
       We shall remove this and merge OPM logic with discrete logic.
       Following OPM installation check  needs to be removed, Punit Kumar */

    /*   IF GML_PROCESS_FLAGS.opm_installed = 0 OR
          (gml_process_flags.check_process_orgn(p_organization_id =>l_org_id) = 0) THEN
        l_discrete_transaction := TRUE;
             ELSE
        l_discrete_transaction := FALSE; -- OPM transaction
            END IF;

         end, INVCONV */

     -- QUERY THE ITEM RECORD TO GET LOT/SERIAL CONTROLS FOR THE ITEM

    BEGIN

      /*INVCONV , OPM specific fork and discrete specific check need to be removed.
        Now there shall be one common logic for both.Punit Kumar*/

      /* IF (l_discrete_transaction) THEN */

      SELECT LOT_CONTROL_CODE
        , SERIAL_NUMBER_CONTROL_CODE
        , lot_status_enabled --Bug 4066234
      INTO L_LOT_CONTROL_CODE
        , L_SERIAL_NUMBER_CONTROL_CODE
        , l_lot_status_enabled --Bug 4066234
      FROM MTL_SYSTEM_ITEMS
      WHERE INVENTORY_ITEM_ID = L_ITEM_ID
	     AND ORGANIZATION_ID = L_ORG_ID;
        /*
       ELSE	--IF (l_discrete_transaction) THEN
         /** OPM change  bug# 3061052
             select iim.lot_ctl,iim.sublot_ctl,iim.item_id,iim.item_no
           into l_opm_lot_ctl,l_opm_sublot_ctl,l_opm_item_id,l_item_no
           from mtl_system_items msi , ic_item_mst iim
           where msi.inventory_item_id = l_item_id
           and   msi.organization_id = l_org_id
           and   msi.segment1 = iim.item_no ;

      END IF; --IF (l_discrete_transaction) THEN
      end , INVCONV **/

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         --RAISE ERROR
         l_progress := 'WMSINB-22070';
         RAISE fnd_api.g_exc_error;
    END;

    IF (l_debug = 1) THEN
      print_debug('VALIDATE_LOT_SERIAL_INFO: MTL_SYSTEM_ITEMS query done :'||l_progress, 1);
      print_debug('INVCONV, Removing OPM specific fork :'||l_progress,1);
      --Bug 4066234
      print_debug('VALIDATE_LOT_SERIAL_INFO: Lot Control Code:'||l_lot_control_code,1);
      print_debug('VALIDATE_LOT_SERIAL_INFO: Serial Number Control Code:'||l_serial_number_control_code,1);
      print_debug('VALIDATE_LOT_SERIAL_INFO: Lot Status Enabled:'||l_lot_status_enabled,1);
      l_progress := 'WMSINB-22076';
    END IF;

    -- if item is not lot controlled, then transaction should fail
    -- if the MTLT has been created for the transaction
    IF (l_lot_control_code = 1) THEN
      BEGIN
        SELECT '1'
         INTO l_dummy
         FROM dual
         WHERE exists (SELECT 1
           FROM mtl_transaction_lots_temp
           WHERE product_code = 'RCV'
           AND product_transaction_id = l_rti_id);

        --Fail transaction
        IF (l_debug = 1) THEN
          print_debug('VALIDATE_LOT_SERIAL_INFO: MTLT exists for non-lot item: '||l_progress, 1);
        END IF;

        l_progress := 'WMSINB-22080';
        RAISE fnd_api.g_exc_error;
      --Bug 13338489 Added the others in the exception block
      EXCEPTION
         WHEN no_data_found THEN
            NULL;
         WHEN others THEN
            NULL;
      END;
    END IF; --IF (l_lot_control_code = 1) THEN

    --Serial Tagging
    if(l_source_document_code='PO' and (l_transaction_type in ('RETURN TO RECEIVING','RETURN TO VENDOR')))
    THEN
      select transaction_type
      into l_parent_transaction_type
      from rcv_transactions
      where transaction_id=l_parent_transaction_id;

      if( l_parent_transaction_type='DELIVER') THEN
             inv_serial_number_pub.is_serial_controlled(
                    p_inventory_item_id     => l_item_id,
                    p_organization_id       => l_org_id,
                    p_transfer_org_id       => NULL,
                    p_txn_type_id           => 36,
                    p_txn_src_type_id       => 1,
                    p_txn_action_id         => 1,
                    p_serial_control        => l_serial_number_control_code,
                    p_xfer_serial_control   => NULL,
                    x_serial_control        => l_serial_tagged,
                    x_return_status         => l_return_status
                    );

          IF l_return_status <> 'S' THEN
             l_serial_tagged := 1;
          END IF;
      end if;
    end if;
     -- if item is not serial controlled, then transaction should fail
     -- if the MSNT has been created for the transaction
     -- Serial Tagging enhancement: Added condition to check l_serial_tagged
    IF (l_serial_number_control_code = 1 and l_serial_tagged <> 2) THEN
      BEGIN
         SELECT '1'
           INTO l_dummy
           FROM dual
           WHERE exists (SELECT 1
             FROM mtl_serial_numbers_temp
             WHERE product_code = 'RCV'
             AND product_transaction_id = l_rti_id);

         --Fail transaction
         IF (l_debug = 1) THEN
            print_debug('VALIDATE_LOT_SERIAL_INFO: MSNI exists for non-serial item: '||l_progress, 1);
         END IF;

         l_progress := 'WMSINB-22082';
         RAISE fnd_api.g_exc_error;
      --Bug 13338489 Added the others in the exception block
      EXCEPTION
         WHEN no_data_found THEN
            NULL;
         WHEN others THEN
            NULL;

      END;
    END IF; --IF (l_serial_number_control_code = 1) THEN

    -- FIRST VALIDATE FOR RECEIVE, ACCEPT, REJECT, TRANSFER AND DELIVER
    -- TRANSACTIONS
    IF (l_transaction_type IN ('RECEIVE','ACCEPT','REJECT','TRANSFER','DELIVER')) THEN
      -- CHECK TO SEE IF THE ITEM IS LOT CONTROLLED OR NOT
      -- opm change added l_opm_lot_ctl bug# 3061052

      /* INVCONV ,OPM specific separate check needs to be removed. Punit Kumar*/
      IF (L_LOT_CONTROL_CODE = 2 /*OR l_opm_lot_ctl = 1 */) THEN
      /* end INVCONV */

        IF (l_debug = 1) THEN
           print_debug('VALIDATE_LOT_SERIAL_INFO: Lot Controlled :'||l_progress, 1);
           l_progress := 'WMSINB-22087';
        END IF;

        L_NUM_MTLT_RECS := 0;
        l_tot_mtlt_prim_qty := 0;
        l_tot_mtlt_trans_qty := 0; -- Bug# 4225766

        OPEN C_MTLT(L_RTI_ID);
        LOOP
          FETCH C_MTLT INTO L_MTLT_REC;
          EXIT WHEN C_MTLT%NOTFOUND;

          /* INVCONV , get L_MTLT_REC values into l_mln_rec which shall be passed to INV_NEW_LOT
             for new lot creation */

          l_mln_rec.LOT_NUMBER                := L_MTLT_REC.LOT_NUMBER                    ;
          l_mln_rec.LAST_UPDATE_DATE          := SYSDATE                                  ;
          l_mln_rec.LAST_UPDATED_BY           := L_MTLT_REC.LAST_UPDATED_BY               ;
          l_mln_rec.CREATION_DATE             := SYSDATE                                  ;
          l_mln_rec.CREATED_BY                := L_MTLT_REC.CREATED_BY                    ;
          l_mln_rec.LAST_UPDATE_LOGIN         := L_MTLT_REC.LAST_UPDATE_LOGIN             ;
          l_mln_rec.EXPIRATION_DATE           := L_MTLT_REC.LOT_EXPIRATION_DATE           ;
          l_mln_rec.ATTRIBUTE_CATEGORY        := L_MTLT_REC.ATTRIBUTE_CATEGORY            ;
          l_mln_rec.ATTRIBUTE1                := L_MTLT_REC.ATTRIBUTE1                    ;
          l_mln_rec.ATTRIBUTE2                := L_MTLT_REC.ATTRIBUTE2                    ;
          l_mln_rec.ATTRIBUTE3                := L_MTLT_REC.ATTRIBUTE3                    ;
          l_mln_rec.ATTRIBUTE4                := L_MTLT_REC.ATTRIBUTE4                    ;
          l_mln_rec.ATTRIBUTE5                := L_MTLT_REC.ATTRIBUTE5                    ;
          l_mln_rec.ATTRIBUTE6                := L_MTLT_REC.ATTRIBUTE6                    ;
          l_mln_rec.ATTRIBUTE7                := L_MTLT_REC.ATTRIBUTE7                    ;
          l_mln_rec.ATTRIBUTE8                := L_MTLT_REC.ATTRIBUTE8                    ;
          l_mln_rec.ATTRIBUTE9                := L_MTLT_REC.ATTRIBUTE9                    ;
          l_mln_rec.ATTRIBUTE10               := L_MTLT_REC.ATTRIBUTE10                   ;
          l_mln_rec.ATTRIBUTE11               := L_MTLT_REC.ATTRIBUTE11                   ;
          l_mln_rec.ATTRIBUTE12               := L_MTLT_REC.ATTRIBUTE12                   ;
          l_mln_rec.ATTRIBUTE13               := L_MTLT_REC.ATTRIBUTE13                   ;
          l_mln_rec.ATTRIBUTE14               := L_MTLT_REC.ATTRIBUTE14                   ;
          l_mln_rec.ATTRIBUTE15               := L_MTLT_REC.ATTRIBUTE15                   ;
          l_mln_rec.REQUEST_ID                := L_MTLT_REC.REQUEST_ID                    ;
          l_mln_rec.PROGRAM_APPLICATION_ID    := L_MTLT_REC.PROGRAM_APPLICATION_ID        ;
          l_mln_rec.PROGRAM_ID                := L_MTLT_REC.PROGRAM_ID                    ;
          l_mln_rec.PROGRAM_UPDATE_DATE       := L_MTLT_REC.PROGRAM_UPDATE_DATE           ;
          l_mln_rec.DESCRIPTION               := L_MTLT_REC.DESCRIPTION                   ;
          l_mln_rec.VENDOR_NAME               := L_MTLT_REC.VENDOR_NAME                   ;
          l_mln_rec.SUPPLIER_LOT_NUMBER       := L_MTLT_REC.SUPPLIER_LOT_NUMBER           ;
          l_mln_rec.GRADE_CODE                := L_MTLT_REC.GRADE_CODE                    ;
          l_mln_rec.ORIGINATION_DATE          := L_MTLT_REC.ORIGINATION_DATE              ;
          l_mln_rec.DATE_CODE                 := L_MTLT_REC.DATE_CODE                     ;
          l_mln_rec.STATUS_ID                 := L_MTLT_REC.STATUS_ID                     ;
          l_mln_rec.CHANGE_DATE               := L_MTLT_REC.CHANGE_DATE                   ;
          l_mln_rec.AGE                       := L_MTLT_REC.AGE                           ;
          l_mln_rec.RETEST_DATE               := L_MTLT_REC.RETEST_DATE                   ;
          l_mln_rec.MATURITY_DATE             := L_MTLT_REC.MATURITY_DATE                 ;
          l_mln_rec.LOT_ATTRIBUTE_CATEGORY    := L_MTLT_REC.LOT_ATTRIBUTE_CATEGORY        ;
          l_mln_rec.ITEM_SIZE                 := L_MTLT_REC.ITEM_SIZE                     ;
          l_mln_rec.COLOR                     := L_MTLT_REC.COLOR                         ;
          l_mln_rec.VOLUME                    := L_MTLT_REC.VOLUME                        ;
          l_mln_rec.VOLUME_UOM                := L_MTLT_REC.VOLUME_UOM                    ;
          l_mln_rec.PLACE_OF_ORIGIN           := L_MTLT_REC.PLACE_OF_ORIGIN               ;
          l_mln_rec.BEST_BY_DATE              := L_MTLT_REC.BEST_BY_DATE                  ;
          l_mln_rec.LENGTH                    := L_MTLT_REC.LENGTH                        ;
          l_mln_rec.LENGTH_UOM                := L_MTLT_REC.LENGTH_UOM                    ;
          l_mln_rec.RECYCLED_CONTENT          := L_MTLT_REC.RECYCLED_CONTENT              ;
          l_mln_rec.THICKNESS                 := L_MTLT_REC.THICKNESS                     ;
          l_mln_rec.THICKNESS_UOM             := L_MTLT_REC.THICKNESS_UOM                 ;
          l_mln_rec.WIDTH                     := L_MTLT_REC.WIDTH                         ;
          l_mln_rec.WIDTH_UOM                 := L_MTLT_REC.WIDTH_UOM                     ;
          l_mln_rec.CURL_WRINKLE_FOLD         := L_MTLT_REC.CURL_WRINKLE_FOLD             ;
          l_mln_rec.C_ATTRIBUTE1              := L_MTLT_REC.C_ATTRIBUTE1                  ;
          l_mln_rec.C_ATTRIBUTE2              := L_MTLT_REC.C_ATTRIBUTE2                  ;
          l_mln_rec.C_ATTRIBUTE3              := L_MTLT_REC.C_ATTRIBUTE3                  ;
          l_mln_rec.C_ATTRIBUTE4              := L_MTLT_REC.C_ATTRIBUTE4                  ;
          l_mln_rec.C_ATTRIBUTE5              := L_MTLT_REC.C_ATTRIBUTE5                  ;
          l_mln_rec.C_ATTRIBUTE6              := L_MTLT_REC.C_ATTRIBUTE6                  ;
          l_mln_rec.C_ATTRIBUTE7              := L_MTLT_REC.C_ATTRIBUTE7                  ;
          l_mln_rec.C_ATTRIBUTE8              := L_MTLT_REC.C_ATTRIBUTE8                  ;
          l_mln_rec.C_ATTRIBUTE9              := L_MTLT_REC.C_ATTRIBUTE9                  ;
          l_mln_rec.C_ATTRIBUTE10             := L_MTLT_REC.C_ATTRIBUTE10                 ;
          l_mln_rec.C_ATTRIBUTE11             := L_MTLT_REC.C_ATTRIBUTE11                 ;
          l_mln_rec.C_ATTRIBUTE12             := L_MTLT_REC.C_ATTRIBUTE12                 ;
          l_mln_rec.C_ATTRIBUTE13             := L_MTLT_REC.C_ATTRIBUTE13                 ;
          l_mln_rec.C_ATTRIBUTE14             := L_MTLT_REC.C_ATTRIBUTE14                 ;
          l_mln_rec.C_ATTRIBUTE15             := L_MTLT_REC.C_ATTRIBUTE15                 ;
          l_mln_rec.C_ATTRIBUTE16             := L_MTLT_REC.C_ATTRIBUTE16                 ;
          l_mln_rec.C_ATTRIBUTE17             := L_MTLT_REC.C_ATTRIBUTE17                 ;
          l_mln_rec.C_ATTRIBUTE18             := L_MTLT_REC.C_ATTRIBUTE18                 ;
          l_mln_rec.C_ATTRIBUTE19             := L_MTLT_REC.C_ATTRIBUTE19                 ;
          l_mln_rec.C_ATTRIBUTE20             := L_MTLT_REC.C_ATTRIBUTE20                 ;
          l_mln_rec.D_ATTRIBUTE1              := L_MTLT_REC.D_ATTRIBUTE1                  ;
          l_mln_rec.D_ATTRIBUTE2              := L_MTLT_REC.D_ATTRIBUTE2                  ;
          l_mln_rec.D_ATTRIBUTE3              := L_MTLT_REC.D_ATTRIBUTE3                  ;
          l_mln_rec.D_ATTRIBUTE4              := L_MTLT_REC.D_ATTRIBUTE4                  ;
          l_mln_rec.D_ATTRIBUTE5              := L_MTLT_REC.D_ATTRIBUTE5                  ;
          l_mln_rec.D_ATTRIBUTE6              := L_MTLT_REC.D_ATTRIBUTE6                  ;
          l_mln_rec.D_ATTRIBUTE7              := L_MTLT_REC.D_ATTRIBUTE7                  ;
          l_mln_rec.D_ATTRIBUTE8              := L_MTLT_REC.D_ATTRIBUTE8                  ;
          l_mln_rec.D_ATTRIBUTE9              := L_MTLT_REC.D_ATTRIBUTE9                  ;
          l_mln_rec.D_ATTRIBUTE10             := L_MTLT_REC.D_ATTRIBUTE10                 ;
          l_mln_rec.N_ATTRIBUTE1              := L_MTLT_REC.N_ATTRIBUTE1                  ;
          l_mln_rec.N_ATTRIBUTE2              := L_MTLT_REC.N_ATTRIBUTE2                  ;
          l_mln_rec.N_ATTRIBUTE3              := L_MTLT_REC.N_ATTRIBUTE3                  ;
          l_mln_rec.N_ATTRIBUTE4              := L_MTLT_REC.N_ATTRIBUTE4                  ;
          l_mln_rec.N_ATTRIBUTE5              := L_MTLT_REC.N_ATTRIBUTE5                  ;
          l_mln_rec.N_ATTRIBUTE6              := L_MTLT_REC.N_ATTRIBUTE6                  ;
          l_mln_rec.N_ATTRIBUTE7              := L_MTLT_REC.N_ATTRIBUTE7                  ;
          l_mln_rec.N_ATTRIBUTE8              := L_MTLT_REC.N_ATTRIBUTE8                  ;
          l_mln_rec.N_ATTRIBUTE9              := L_MTLT_REC.N_ATTRIBUTE9                  ;
          l_mln_rec.N_ATTRIBUTE10             := L_MTLT_REC.N_ATTRIBUTE10                 ;
          l_mln_rec.VENDOR_ID                 := L_MTLT_REC.VENDOR_ID                     ;
          l_mln_rec.TERRITORY_CODE            := L_MTLT_REC.TERRITORY_CODE                ;
          l_mln_rec.PARENT_LOT_NUMBER         := L_MTLT_REC.PARENT_LOT_NUMBER             ;
          l_mln_rec.ORIGINATION_TYPE          := L_MTLT_REC.ORIGINATION_TYPE              ;
          l_mln_rec.EXPIRATION_ACTION_DATE    := L_MTLT_REC.EXPIRATION_ACTION_DATE        ;
          l_mln_rec.EXPIRATION_ACTION_CODE    := L_MTLT_REC.EXPIRATION_ACTION_CODE        ;
          l_mln_rec.HOLD_DATE                 := L_MTLT_REC.HOLD_DATE                     ;

          L_NUM_MTLT_RECS := L_NUM_MTLT_RECS + 1;
          l_tot_mtlt_prim_qty := l_tot_mtlt_prim_qty + l_mtlt_rec.primary_quantity;
          l_tot_mtlt_trans_qty := l_tot_mtlt_trans_qty + l_mtlt_rec.transaction_quantity; -- Bug# 4225766

          IF (l_debug = 1) THEN
            print_debug('VALIDATE_LOT_SERIAL_INFO: LOT NUMBER: '||l_mtlt_rec.lot_number||': '||l_progress, 1);
              /*
              print_debug('VALIDATE_LOT_SERIAL_INFO: SUBLOT NUMBER: '||l_mtlt_rec.sublot_num||': '||l_progress, 1);
              */
              print_debug('Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);
            print_debug('VALIDATE_LOT_SERIAL_INFO: LOT PRIMARY QUANTITY: '||l_mtlt_rec.primary_quantity||': '||l_progress, 1);
            l_progress := 'WMSINB-22106';
          END IF;
           /*bug8429931
            after get record from MTLT,should validate
            the consistency between transaction_quantity and primary_quantity,
            since the transaction UOM not always equal with item primary UOM.*/

          --bug 9367595 uom_code is not always populated, instead unit_of_measure is getting inserted.
          --added logic convert the uom_code.
          if l_rti_uom_code is null then
            BEGIN
              SELECT uom_code
                INTO l_rti_uom_code
                FROM MTL_UNITS_OF_MEASURE_VL
               WHERE unit_of_measure = l_rti_UNIT_OF_MEASURE;

            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  print_debug('Unit of measure does not exist '||l_progress,1);
                  fnd_message.set_name('INV', 'INV_UOM_NOTFOUND');
                  fnd_message.set_token('UOM', l_rti_PRIMARY_UNIT_OF_MEASURE);
                  fnd_msg_pub.add;
                  RAISE fnd_api.g_exc_error;
            END;
          end if;
          --end9367595

          /*Bug#9570776 passing the lot number to the procedure, get_primary_qty to get the lot specific conversion */
          if(l_mtlt_rec.primary_quantity <> get_primary_qty(l_org_id,l_item_id,
                                                                l_rti_uom_code,l_mtlt_rec.transaction_quantity,l_mtlt_rec.lot_number)) then
             fnd_message.set_name ('INV' , 'INV_INVALID_QUANTITY');
             fnd_msg_pub.ADD;
             RAISE fnd_api.g_exc_error;
           end if;
           /*INVCONV, Check whether Lot is existing or it's a new Lot .
             If it exists then we shall validate its parent lot also.
             Remove OPM fork.Add parent_lot_number in discrete query.Punit Kumar*/

            BEGIN
            /* IF (l_discrete_transaction) THEN		 */

                SELECT 1,parent_lot_number
                  INTO L_LOT_EXISTS ,l_parent_lot_number
                  FROM MTL_LOT_NUMBERS
                  WHERE ORGANIZATION_ID = L_ORG_ID
                  AND   INVENTORY_ITEM_ID = L_ITEM_ID
                  AND LOT_NUMBER = Ltrim(Rtrim(L_MTLT_REC.lot_number));

             /* ELSE -- opm change bug# 3061052 --IF (l_discrete_transaction) THEN
                IF  Ltrim(Rtrim(L_MTLT_REC.sublot_num)) IS NOT NULL THEN
                   SELECT 1, LOT_ID
               INTO L_LOT_EXISTS , l_opm_lot_id
               FROM IC_LOTS_MST
               WHERE ITEM_ID = l_opm_item_id
               AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
               AND SUBLOT_NO = Ltrim(Rtrim(L_MTLT_REC.sublot_num)) ;
                 ELSE
                   SELECT 1 , LOT_ID
               INTO L_LOT_EXISTS , l_opm_lot_id
               FROM IC_LOTS_MST
               WHERE ITEM_ID = l_opm_item_id
               AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
               AND SUBLOT_NO IS NULL ;
                END IF;
              END IF; --IF (l_discrete_transaction) THEN

              end , INVCONV */

            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  L_LOT_EXISTS := 0;
            END;

            IF (l_debug = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: LOT EXISTS: '||l_lot_exists||' : '||l_progress, 1);
              l_progress := 'WMSINB-22143';
              print_debug('INVCONV, Removing OPM specific fork and selecting parent lot number :'||l_progress||':'||l_parent_lot_number,1);
            END IF;

            IF L_LOT_EXISTS = 1 THEN

              /*INVCONV , validating for parent lot, Punit Kumar */
              IF  L_MTLT_REC.parent_lot_number IS NOT NULL THEN
                IF L_MTLT_REC.parent_lot_number <> l_parent_lot_number THEN
                  fnd_message.set_name ('INV' , 'INV_CL_PARENT_INVALID' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-22145';
                  RAISE fnd_api.g_exc_error;
                END IF;
              ELSE
                L_MTLT_REC.parent_lot_number := l_parent_lot_number;
              END IF;

              IF (L_TRANSACTION_TYPE <> 'RECEIVE') THEN
                L_LOT_ENTERED_ON_PARENT := LOT_ENTERED_ON_PARENT(L_PARENT_TRANSACTION_ID);
              ELSE
                L_LOT_ENTERED_ON_PARENT := FALSE;
              END IF;

              IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||L_SOURCE_DOCUMENT_CODE||' : '||l_progress, 1);
                  print_debug('INVCONV, validating for parent lot :'||l_progress,1);
                  l_progress := 'WMSINB-22155';
              END IF;

              IF NOT L_LOT_ENTERED_ON_PARENT THEN
                  --Validate the lot number and primary quantity for the source org.
                IF (l_debug = 1) THEN
                   print_debug('VALIDATE_LOT_SERIAL_INFO: LOT NOT ENTERED ON PARENT: '||l_progress, 1);
                   l_progress := 'WMSINB-22161';
                END IF;

                /* INVCONV , Existing discrete validations. Same will be executed for process org also. Punit Kumar */
                /*IF (l_discrete_transaction) THEN */
                /* end ,INVCONV */

                IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY', 'REQ')) THEN
                -- GET THE LOT/SERIAL CONTROL IN SOURCE ORG
                  GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                    (L_SHIPMENT_LINE_ID, L_ORG_ID,
                     L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL, l_from_org_rev_ctrl,
                     X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

                  IF (l_debug = 1) THEN
                     print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CONTROL FROM ORG: '||L_FROM_ORG_LOT_CTRL||' : '||l_progress, 1);
                     l_progress := 'WMSINB-22175';
                  END IF;

                  IF (L_FROM_ORG_LOT_CTRL = 2) THEN
                    BEGIN
                      /** Bug:5489462
                       *      If a lot number doesn't belong to that shipment line is entered through ROI,
                       *      L_RLS_PRIMARY_QUANTITY will be loaded with null value and the 'if' condition
                       *      to check the quanity entered in mtlt record exceeds the supply quantity won't
                       *      raise the exception, as the comparision is made against a null value.
                       *      So, added nvl for the SUM(rls.primary_quantity).
                       */
                          SELECT nvl(SUM(rls.primary_quantity),0)--Bug:5489462
                            INTO L_RLS_PRIMARY_QUANTITY
                            FROM rcv_lots_supply rls
                            , rcv_shipment_lines rsl
                            WHERE rsl.SHIPMENT_LINE_ID = rls.SHIPMENT_LINE_ID
                            AND rsl.shipment_header_id = l_shipment_header_id
                            --Bug 12348470 Reverted the fix 94466813
                            --AND rls.SHIPMENT_LINE_ID = L_SHIPMENT_LINE_ID  --9466813
                            AND rsl.item_id = l_item_id
                            AND rls.SUPPLY_TYPE_CODE = 'SHIPMENT'
                            AND rls.LOT_NUM = Ltrim(Rtrim(L_MTLT_REC.lot_number));

			   IF ((abs(l_mtlt_rec.primary_quantity - l_rls_primary_quantity) > 0.00005 )
				AND  (l_mtlt_rec.primary_quantity > l_rls_primary_quantity)) THEN  --Bug: 14092221
                             --RAISE ERROR
                             l_progress := 'WMSINB-22192';
                             RAISE fnd_api.g_exc_error;
                          END IF;
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                         --RAISE ERROR
                         l_progress := 'WMSINB-22198';
                         RAISE fnd_api.g_exc_error;
                    END;
                  END IF; --IF (L_FROM_ORG_LOT_CTRL = 2) THEN

                END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY', 'REQ')) THEN

                -- PERFORM MATERIAL_STATUS CHECK
                -- if deliver or direct receipt
                IF (l_transaction_type = 'DELIVER' OR l_auto_transact_code = 'DELIVER') THEN
                  IF (l_source_document_code = 'PO') THEN
                    l_transaction_type_id := 18;
                  ELSIF (l_source_document_code = 'RMA') THEN
                    l_transaction_type_id := 15;
                  ELSE
                    l_transaction_type_id := 61;
                  END IF;

                  /*INVCONV, adding a debug message , Punit Kumar*/

                  IF (l_debug = 1) THEN
                     print_debug('transaction type id in validate_lot_serial_info is : '||l_transaction_type_id||' : '||l_progress, 1);
                  END IF;

                  /* Material Status Enhancement - Tracking bug: 13519864 */

		  IF (L_MTLT_REC.status_id IS NOT NULL AND l_allow_status_entry = 'Y') THEN

                        if inv_cache.set_org_rec(l_org_id) then
                           l_default_status_id :=  inv_cache.org_rec.default_status_id;
                        end if;

                        IF (l_default_status_id is not null and l_serial_number_control_code NOT IN (2,5)) THEN  /* Bug 13725126 */

                           BEGIN

			   SELECT '1'
                           INTO l_dummy
                           FROM dual
                           WHERE EXISTS (SELECT 'comingling exists'
                                         from mtl_onhand_quantities_detail moqd,
                                              rcv_transactions_interface rti
                  	      	       WHERE moqd.organization_id = rti.to_organization_id
                  	      	       AND moqd.inventory_item_id = rti.item_id
                  	      	       and moqd.subinventory_code = rti.subinventory
                  	      	       and nvl(moqd.locator_id, -9999) = nvl(rti.locator_id, -9999)
                  	      	       and nvl(moqd.lot_number, '@@@@') = nvl(L_MTLT_REC.lot_number, '@@@@')
                  	      	       and nvl(moqd.lpn_id, -9999) = nvl(rti.lpn_id, -9999)
                  	      	       and nvl(moqd.status_id, -9999) <> nvl(L_MTLT_REC.status_id, -9999)
				       and rti.interface_transaction_id = L_RTI_ID
                  	      	       );

                                  l_progress := 'WMSINB-22200';

                                  --Fail transaction
                                  IF (l_debug = 1) THEN
                                    print_debug('VALIDATE_LOT_SERIAL_INFO: User entered status causes commingling in SKU: '||l_progress, 1);
                                  END IF;

                                  fnd_message.set_name ('INV' , 'INV_STATUS_COMINGLING');
                                  fnd_msg_pub.ADD;
                                  RAISE fnd_api.g_exc_error;

			   EXCEPTION

                  	   WHEN no_data_found THEN
                  	     NULL;
                           END;

		        end if;
                  END IF;

                  INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
                                  X_MSG_COUNT => X_MSG_COUNT,
                                  X_MSG_DATA => X_MSG_DATA,
                                  X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                                  P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                                  P_ORGANIZATION_ID => L_ORG_ID,
                                  P_INVENTORY_ITEM_ID => L_ITEM_ID,
                                  P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                                  P_SUBINVENTORY_CODE => L_SUB_CODE,
                                  P_LOCATOR_ID => L_LOC_ID,
                                  P_STATUS_ID => NULL);
                  IF X_RETURN_STATUS <> 'S' THEN
                     --RAISE ERROR
                     l_progress := 'WMSINB-22225';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (l_debug = 1) THEN
                     print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
                     l_progress := 'WMSINB-22231';
                  END IF;

                  IF L_VALIDATION_STATUS <> 'Y' THEN
                     --RAISE ERROR
                     l_progress := 'WMSINB-22236';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                END IF; --IF (l_transaction_type = 'DELIVER' OR l_auto_transact_code = 'DELIVER') THEN

                     /*INVCONV , Instead of calling OPM specific API gml_opm_roi_grp.validate_opm_lot,
                        we shall now call a new procedure INV_ROI_INTEGRATION_GRP. INV_VALIDATE_LOT.
                        This new procedure shall  validate the extra process attributes
                        that are being merged for discrete items too.
                        Punit Kumar */
                     /*
                 ELSE --IF (l_discrete_transaction) THEN
                -- opm change bug# 3061052
                gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                         p_init_msg_lst	 	=> FND_API.G_FALSE,
                         p_mtlt_rowid		=> l_mtlt_rec.rowid,
                         p_new_lot	 	=> 'N',
                         p_opm_item_id		=> l_opm_item_id,
                         p_item_no		=> l_item_no,
                         p_lots_specified_on_parent => 'N',
                         p_lot_id		=> l_opm_lot_id,
                         x_return_status 	=> x_return_status,
                         x_msg_data      	=> x_msg_data,
                         x_msg_count     	=> x_msg_count
                         );
                    */

                 IF (l_debug = 1) THEN
                    print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    print_debug('transaction type id before calling in validate_lot_serial_info is : '||l_transaction_type_id||' : '||l_progress, 1);
                 END IF;




                INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );
                IF (l_debug = 1) THEN
                   print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                END IF;
                /* end , INVCONV */

                IF X_RETURN_STATUS <> 'S' THEN
                   --RAISE ERROR
                   l_progress := 'WMSINB-22256';
                   RAISE fnd_api.g_exc_error;
                END IF;

                /*INVCONV , Changed the debug message*/
                IF (l_debug = 1) THEN
                   /*print_debug('VALIDATE_LOT_SERIAL_INFO: VALIDATE_OPM_LOT STATUS: '||x_return_status||' : '||l_progress, 1);*/
                   print_debug('INVCONV, VALIDATE_LOT_SERIAL_INFO: VALIDATE_LOT STATUS,x_return_status is : '||x_return_status||' : '||l_progress, 1);
                   l_progress := 'WMSINB-22262';
                END IF;

                /* END IF; -- IF (l_discrete_transaction) THEN */
               /*end , INVCONV*/

              ELSE --IF NOT L_LOT_ENTERED_ON_PARENT THEN
		   -- LOT WAS ENTERERED ON THE PARENT SO USER CANNOT ENTER
		   -- ANY OTHER LOT HERE
		   /* bug 10206337 */
		   IF (l_transaction_type = 'DELIVER' OR l_auto_transact_code = 'DELIVER') THEN
		      IF (l_source_document_code = 'PO') THEN
			 l_transaction_type_id := 18;
		       ELSIF (l_source_document_code = 'RMA') THEN
			 l_transaction_type_id := 15;
		       ELSE
			 l_transaction_type_id := 61;
		      END IF;
		   END IF;
                 BEGIN
		   /* bug 10206337 */
                  -- INVCONV , Remove sublot_num. Punit Kumar

                  SELECT primary_quantity
                    INTO l_rls_primary_quantity
                    FROM rcv_lots_supply
                    WHERE transaction_id = l_parent_transaction_id
                    AND lot_num = Ltrim(Rtrim(l_mtlt_rec.lot_number)) ;
                     /*
                    AND ((sublot_num IS NULL and Ltrim(Rtrim(l_mtlt_rec.sublot_num)) IS NULL)
                   OR (sublot_num = Ltrim(Rtrim(l_mtlt_rec.sublot_num)))) ;
                  */
				IF (l_debug = 1) THEN
                   print_debug('AMO debug msgs, The value of l_mtlt_rec.primary_quantity'||l_mtlt_rec.primary_quantity||' : '||l_progress, 1);
				   print_debug('AMO debug msgs, The value of l_rls_primary_quantity'||l_rls_primary_quantity||' : '||l_progress, 1);
                END IF;

                    IF ((abs(l_mtlt_rec.primary_quantity - l_rls_primary_quantity) > 0.00005 ) AND  (l_mtlt_rec.primary_quantity > l_rls_primary_quantity)) THEN   --bug#10067944
                       --raise error
                       l_progress := 'WMSINB-22284';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                EXCEPTION
                  WHEN no_data_found THEN
                     --raise error
                     l_progress := 'WMSINB-22290';
                     RAISE fnd_api.g_exc_error;
                END;

                 /*INVCONV , Removing the process specific call. Shall call a new procedure INV_VALIDATE_LOT
                   in Package INV_ROI_INTEGRATION_GRP to perform the same set of validations for all.
                   Punit Kumar*/
                 /*
               -- opm change bug# 3061052
               IF (NOT l_discrete_transaction) THEN
                  gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                     p_init_msg_lst	 	=> FND_API.G_FALSE,
                     p_mtlt_rowid		=> l_mtlt_rec.rowid,
                     p_new_lot	 	=> 'N',
                     p_opm_item_id		=> l_opm_item_id,
                     p_item_no		=> l_item_no,
                     p_lots_specified_on_parent => 'Y',
                     p_lot_id		=> l_opm_lot_id,
                     x_return_status 	=> x_return_status,
                     x_msg_data      	=> x_msg_data,
                     x_msg_count     	=> x_msg_count
                     );
                */
                IF (l_debug = 1) THEN
                  print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                END IF;

                INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

                IF (l_debug = 1) THEN
                  print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                END IF;

                IF X_RETURN_STATUS <> 'S' THEN
                   --RAISE ERROR
                   l_progress := 'WMSINB-22310';
                   RAISE fnd_api.g_exc_error;
                END IF;

                /*INVCONV , Changed the debug message*/
                IF (l_debug = 1) THEN
                   /*print_debug('VALIDATE_LOT_SERIAL_INFO: VALIDATE_OPM_LOT STATUS: '||x_return_status||' : '||l_progress, 1);*/
                   print_debug('VALIDATE_LOT_SERIAL_INFO: VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                END IF;
               /*END IF;--IF (NOT l_discrete_transaction) THEN */

              END IF; --IF NOT L_LOT_ENTERED_ON_PARENT THEN
            ELSE --IF L_LOT_EXISTS = 1 THEN
              -- MAKE SURE THE LOT WAS NOT ENTERED ON THE PARENT TXN
              -- IF LOT WAS ENTERED ON THE PARENT TRANSACTION THEN
              -- FAIL THE TRANSACTION
              IF (L_TRANSACTION_TYPE <> 'RECEIVE') THEN
                 L_LOT_ENTERED_ON_PARENT := LOT_ENTERED_ON_PARENT(L_PARENT_TRANSACTION_ID);
              ELSE
                 L_LOT_ENTERED_ON_PARENT := FALSE;
              END IF;

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||L_SOURCE_DOCUMENT_CODE||' : '||l_progress, 1);
                 l_progress := 'WMSINB-22332';
              END IF;

              IF NOT l_lot_entered_on_parent THEN
                IF (l_debug = 1) THEN
                   print_debug('VALIDATE_LOT_SERIAL_INFO: LOT NOT ENTERED ON PARENT: '||l_progress, 1);
                   l_progress := 'WMSINB-22338';
                END IF;

                -- opm change bug# 3061052
                   /*INVCONV , existing discrete validations. Same will be executed for process org,Punit Kumar*/

                   --IF (l_discrete_transaction) THEN

                IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY', 'REQ')) THEN
                  -- GET THE LOT/SERIAL CONTROL IN SOURCE ORG
                  GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                    (L_SHIPMENT_LINE_ID, L_ORG_ID,
                     L_FROM_ORG_SER_CRTL,
                     L_FROM_ORG_LOT_CTRL, l_from_org_rev_ctrl,
                     X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

                  IF (l_debug = 1) THEN
                     print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CONTROL FROM ORG: '||L_FROM_ORG_LOT_CTRL||' : '||l_progress, 1);
                     l_progress := 'WMSINB-22352';
                  END IF;

                  IF (L_FROM_ORG_LOT_CTRL = 2) THEN
                    BEGIN
                      SELECT nvl(SUM(rls.primary_quantity),0) --Bug:5489462
                      INTO L_RLS_PRIMARY_QUANTITY
                      FROM rcv_lots_supply rls
                      , rcv_shipment_lines rsl
                      WHERE rls.SHIPMENT_LINE_ID = rsl.SHIPMENT_LINE_ID
                      AND rsl.shipment_header_id = l_shipment_header_id
                      AND rsl.item_id = l_item_id
                      AND rls.SUPPLY_TYPE_CODE = 'SHIPMENT'
                      AND rls.LOT_NUM = Ltrim(Rtrim(L_MTLT_REC.lot_number));

                      IF ((abs(l_mtlt_rec.primary_quantity - l_rls_primary_quantity) > 0.00005 )
				AND  (l_mtlt_rec.primary_quantity > l_rls_primary_quantity)) THEN  --Bug: 14092221
                        --RAISE ERROR
                        l_progress :=     'WMSINB-22367';
                        RAISE fnd_api.g_exc_error;
                      END IF;
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                       --RAISE ERROR
                       l_progress :=     'WMSINB-22373';
                       RAISE fnd_api.g_exc_error;
                    END;
                  END IF; --IF (L_FROM_ORG_LOT_CTRL = 2) THEN
                END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY', 'REQ')) THEN
                 -- PERFORM NEW LOT VALIDATIONS
                 -- CREATE LOT
                 -- CALL INV_LOT_API_PUB.CREATE_INV_LOT

                  /*
                 l_c_attributes_tbl(1)  := l_mtlt_rec.c_attribute1;
                 l_c_attributes_tbl(2)  := l_mtlt_rec.c_attribute2;
                 l_c_attributes_tbl(3)  := l_mtlt_rec.c_attribute3;
                 l_c_attributes_tbl(4)  := l_mtlt_rec.c_attribute4;
                 l_c_attributes_tbl(5)  := l_mtlt_rec.c_attribute5;
                 l_c_attributes_tbl(6)  := l_mtlt_rec.c_attribute6;
                 l_c_attributes_tbl(7)  := l_mtlt_rec.c_attribute7;
                 l_c_attributes_tbl(8)  := l_mtlt_rec.c_attribute8;
                 l_c_attributes_tbl(9)  := l_mtlt_rec.c_attribute9;
                 l_c_attributes_tbl(10) := l_mtlt_rec.c_attribute10;
                 l_c_attributes_tbl(11) := l_mtlt_rec.c_attribute11;
                 l_c_attributes_tbl(12) := l_mtlt_rec.c_attribute12;
                 l_c_attributes_tbl(13) := l_mtlt_rec.c_attribute13;
                 l_c_attributes_tbl(14) := l_mtlt_rec.c_attribute14;
                 l_c_attributes_tbl(15) := l_mtlt_rec.c_attribute15;
                 l_c_attributes_tbl(16) := l_mtlt_rec.c_attribute16;
                 l_c_attributes_tbl(17) := l_mtlt_rec.c_attribute17;
                 l_c_attributes_tbl(18) := l_mtlt_rec.c_attribute18;
                 l_c_attributes_tbl(19) := l_mtlt_rec.c_attribute19;
                 l_c_attributes_tbl(20) := l_mtlt_rec.c_attribute20;
                 l_d_attributes_tbl(1)  := l_mtlt_rec.d_attribute1;
                 l_d_attributes_tbl(2)  := l_mtlt_rec.d_attribute2;
                 l_d_attributes_tbl(3)  := l_mtlt_rec.d_attribute3;
                 l_d_attributes_tbl(4)  := l_mtlt_rec.d_attribute4;
                 l_d_attributes_tbl(5)  := l_mtlt_rec.d_attribute5;
                 l_d_attributes_tbl(6)  := l_mtlt_rec.d_attribute6;
                 l_d_attributes_tbl(7)  := l_mtlt_rec.d_attribute7;
                 l_d_attributes_tbl(8)  := l_mtlt_rec.d_attribute8;
                 l_d_attributes_tbl(9)  := l_mtlt_rec.d_attribute9;
                 l_d_attributes_tbl(10) := l_mtlt_rec.d_attribute10;
                 l_n_attributes_tbl(1)  := l_mtlt_rec.n_attribute1;
                 l_n_attributes_tbl(2)  := l_mtlt_rec.n_attribute2;
                 l_n_attributes_tbl(3)  := l_mtlt_rec.n_attribute3;
                 l_n_attributes_tbl(4)  := l_mtlt_rec.n_attribute4;
                 l_n_attributes_tbl(5)  := l_mtlt_rec.n_attribute5;
                 l_n_attributes_tbl(6)  := l_mtlt_rec.n_attribute6;
                 l_n_attributes_tbl(7)  := l_mtlt_rec.n_attribute7;
                 l_n_attributes_tbl(8)  := l_mtlt_rec.n_attribute8;
                 l_n_attributes_tbl(9)  := l_mtlt_rec.n_attribute9;
                 l_n_attributes_tbl(10) := l_mtlt_rec.n_attribute10;

                 --Bug #3187688
                 --Populate the INV attributes table and pass the attribute cateogry
                 l_inv_attributes_tbl(1)  := l_mtlt_rec.attribute1;
                 l_inv_attributes_tbl(2)  := l_mtlt_rec.attribute2;
                 l_inv_attributes_tbl(3)  := l_mtlt_rec.attribute3;
                 l_inv_attributes_tbl(4)  := l_mtlt_rec.attribute4;
                 l_inv_attributes_tbl(5)  := l_mtlt_rec.attribute5;
                 l_inv_attributes_tbl(6)  := l_mtlt_rec.attribute6;
                 l_inv_attributes_tbl(7)  := l_mtlt_rec.attribute7;
                 l_inv_attributes_tbl(8)  := l_mtlt_rec.attribute8;
                 l_inv_attributes_tbl(9)  := l_mtlt_rec.attribute9;
                 l_inv_attributes_tbl(10) := l_mtlt_rec.attribute10;
                 l_inv_attributes_tbl(11) := l_mtlt_rec.attribute11;
                 l_inv_attributes_tbl(12) := l_mtlt_rec.attribute12;
                 l_inv_attributes_tbl(13) := l_mtlt_rec.attribute13;
                 l_inv_attributes_tbl(14) := l_mtlt_rec.attribute14;
                 l_inv_attributes_tbl(15) := l_mtlt_rec.attribute15;

                 inv_lot_api_pub.create_inv_lot(x_return_status => x_return_status
                        , x_msg_count => x_msg_count
                        , x_msg_data => x_msg_data
                        , p_inventory_item_id => l_item_id
                        , p_organization_id => l_org_id
                        , p_lot_number => l_mtlt_rec.lot_number
                        , p_expiration_date => l_mtlt_rec.lot_expiration_date
                        , p_disable_flag => NULL
                        , p_attribute_category => l_mtlt_rec.attribute_category
                        , p_lot_attribute_category => l_mtlt_rec.lot_attribute_category
                        , p_attributes_tbl => l_inv_attributes_tbl
                        , p_c_attributes_tbl => l_c_attributes_tbl
                        , p_n_attributes_tbl => l_n_attributes_tbl
                        , p_d_attributes_tbl => l_d_attributes_tbl
                        , p_grade_code => l_mtlt_rec.grade_code
                        , p_origination_date => l_mtlt_rec.origination_date
                        , p_date_code => l_mtlt_rec.date_code
                        , p_status_id => l_mtlt_rec.status_id
                        , p_change_date => l_mtlt_rec.change_date
                        , p_age => l_mtlt_rec.age
                        , p_retest_date => l_mtlt_rec.retest_date
                       , p_maturity_date => l_mtlt_rec.maturity_date
                       , p_item_size => l_mtlt_rec.item_size
                       , p_color => l_mtlt_rec.color
                       , p_volume => l_mtlt_rec.volume
                       , p_volume_uom => l_mtlt_rec.volume_uom
                       , p_place_of_origin => l_mtlt_rec.place_of_origin
                       , p_best_by_date => l_mtlt_rec.best_by_date
                       , p_length => l_mtlt_rec.Length
                       , p_length_uom => l_mtlt_rec.length_uom
                       , p_recycled_content => l_mtlt_rec.recycled_content
                       , p_thickness => l_mtlt_rec.thickness
                       , p_thickness_uom => l_mtlt_rec.thickness_uom
                       , p_width => l_mtlt_rec.width
                       , p_width_uom => l_mtlt_rec.width_uom
                       , p_territory_code => l_mtlt_rec.territory_code
                       , p_supplier_lot_number => l_mtlt_rec.supplier_lot_number
                       , p_vendor_name => l_mtlt_rec.vendor_name
                       , p_source => inv_lot_api_pub.inv);

                IF (x_return_status <> 'S') THEN
                  --raise error
                    l_progress :=     'WMSINB-22469';
                    RAISE fnd_api.g_exc_error;
                END IF;

                IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CREATED: '||l_progress, 1);
                  l_progress := 'WMSINB-22475';
                END IF;
              ELSE --IF (l_discrete_transaction) THEN
                  -- opm change bug# 3061052
                gml_opm_roi_grp.validate_opm_lot(p_api_version	=> 1.0,
                         p_init_msg_lst	 	=> FND_API.G_FALSE,
                         p_mtlt_rowid		=> l_mtlt_rec.rowid,
                         p_new_lot	 	=> 'Y',
                         p_opm_item_id		=> l_opm_item_id,
                         p_item_no		=> l_item_no,
                         p_lots_specified_on_parent => 'N',
                         p_lot_id		=> l_opm_lot_id,
                         x_return_status 	=> x_return_status,
                         x_msg_data      	=> x_msg_data,
                         x_msg_count     	=> x_msg_count
                         );
                    IF X_RETURN_STATUS <> 'S' THEN
                   --RAISE ERROR
                   l_progress := 'WMSINB-22493';
                   RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                   print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CREATED: '||x_return_status||' : '||l_progress, 1);
                    END IF;
              END IF; --IF (l_discrete_transaction) THEN
              */

             /*INVCONV , Perform lot validations and create the new lot.
                 Call Lot Create API INV_ROI_INTEGRATION_GRP.INV_NEW_LOT to create the new lot.
                 This shall also create lot specific conversions after creating the new Lot.
              This replaces the existing procedure INV_LOT_API_PUB.CREATE_INV_LOT to create NEW LOT
                 Punit Kumar*/
              IF (l_debug = 1) THEN
                print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
              END IF;

              INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                         x_return_status      		   => x_return_status
                                                        ,x_msg_data           		   => x_msg_data
                                                        ,x_msg_count          		   => x_msg_count
                                                        ,p_api_version	               => 1.0
                                                        ,p_init_msg_lst	               => FND_API.G_FALSE
                                                        ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                        ,p_transaction_type_id 	      => l_transaction_type_id
                                                        ,p_new_lot			            => 'Y'
                                                        ,p_item_id	 		            => l_item_id
                                                        ,p_to_organization_id		      => L_ORG_ID
                                                        ,p_lot_number			         => L_MTLT_REC.lot_number
                                                        ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                        ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                                        ,x_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                                        ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                        ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                        ,p_transaction_unit_of_measure => l_rti_UNIT_OF_MEASURE
                                                        ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                        ,p_OE_ORDER_HEADER_ID	         => l_OE_ORDER_HEADER_ID
                                                        ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                        ,p_rti_id	                     => L_RTI_ID
                                                        ,p_revision             	      => l_item_revision
                                                        ,p_subinventory_code  	      => L_SUB_CODE
                                                        ,p_locator_id           	      => l_loc_id
                                                        ,p_transaction_type           => l_transaction_type
                                                        ,p_parent_txn_type            => l_parent_txn_type
                                                        ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                        );

              IF (l_debug = 1) THEN
                print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
              END IF;

              IF X_RETURN_STATUS <> 'S' THEN
                --RAISE ERROR
                l_progress := 'WMSINB-22493';
                RAISE fnd_api.g_exc_error;
              END IF;

              /*INVCONV ,*/
              IF (l_debug = 1) THEN
                print_debug('VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
              END IF;


              INV_ROI_INTEGRATION_GRP.INV_NEW_LOT(
                                                x_return_status      		   => x_return_status
                                               ,x_msg_count          		   => x_msg_count
                                               ,x_msg_data           		   => x_msg_data
                                               ,p_api_version	               => 1.0
                                               ,p_init_msg_lst	               => FND_API.G_FALSE
                                               ,p_source_document_code			=> L_SOURCE_DOCUMENT_CODE
                                               ,p_item_id				         => l_item_id
                                               ,p_from_organization_id			=> L_FROM_ORG_ID
                                               ,p_to_organization_id	         => L_ORG_ID
                                               ,p_lot_number				      => L_MTLT_REC.lot_number
                                               ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                               ,p_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                               ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                               ,p_primary_unit_of_measure	   => l_rti_PRIMARY_UNIT_OF_MEASURE
                                               ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                               ,p_uom_code	                  => l_rti_UOM_CODE
                                               ,p_secondary_uom_code	         => l_rti_SECONDARY_UOM_CODE
                                               ,p_reason_id	                  => L_MTLT_REC.REASON_ID
                                               ,P_MLN_REC                     => L_MLN_REC
                                               ,p_mtlt_rowid	               => L_MTLT_REC.ROWID
                                               );

            /*INVCONV ,*/
            IF (l_debug = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_NEW_LOT return status: '||x_return_status||' : '||l_progress, 1);
              print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
            END IF;

            IF X_RETURN_STATUS <> 'S' THEN
              --RAISE ERROR
              l_progress := 'WMSINB-22494';
              RAISE fnd_api.g_exc_error;
            END IF;

          ELSE --IF NOT l_lot_entered_on_parent THEN
            --raise error
            l_progress := 'WMSINB-22504';
            RAISE fnd_api.g_exc_error;
          END IF; --IF NOT l_lot_entered_on_parent THEN
	      END IF; --IF L_LOT_EXISTS = 1 THEN

	      IF (L_SERIAL_NUMBER_CONTROL_CODE IN (2,5,6)) THEN

		 IF (l_debug = 1) THEN
		    print_debug('VALIDATE_LOT_SERIAL_INFO: LOT AND SERIAL CONTROLLED: '||l_progress, 1);
		    print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
		    print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
		    l_progress := 'WMSINB-22515';
		 END IF;

		 L_NUM_MSNT_RECS := 0;
		 l_tot_msnt_serial_qty := 0;

		 OPEN C_MSNT_LOTSERIAL(L_MTLT_REC.SERIAL_TRANSACTION_TEMP_ID);

		 LOOP
		    FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;

		    EXIT WHEN C_MSNT_LOTSERIAL%NOTFOUND;

		    L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;

		    IF (L_SERIAL_NUMBER_CONTROL_CODE = 6 AND
			L_SOURCE_DOCUMENT_CODE NOT IN ('RMA','REQ','INVENTORY')) THEN
		       -- RAISE AN ERROR. IF SERIAL IS AT SALES ORDER ISSUE THEN
		       -- IT CAN BE ENTERED ONLY FOR A RMA RECEIPT.
		       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
		       fnd_msg_pub.ADD;
		       l_progress := 'WMSINB-22536';
		       RAISE fnd_api.g_exc_error;
		    END IF;

		    L_SERIAL_QUANTITY :=
		      INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
							    L_MSNT_REC.TO_SERIAL_NUMBER);

		    l_tot_msnt_serial_qty := l_tot_msnt_serial_qty +
		      l_serial_quantity;

		    INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
		    INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

		    IF (l_debug = 1) THEN
		       print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
		       l_progress := 'WMSINB-22551';
		    END IF;

		    --populate attributes table
		    l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
		    l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
		    l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
		    l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
		    l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
		    l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
		    l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
		    l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
		    l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
		    l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
		    l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
		    l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
		    l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
		    l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
		    l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
		    l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
		    l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
		    l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
		    l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
		    l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
		    l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
		    l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
		    l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
		    l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
		    l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
		    l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
		    l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
		    l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
		    l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
		    l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
		    l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
		    l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
		    l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
		    l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
		    l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
		    l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
		    l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
		    l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
		    l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
		    l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
		    l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
		    l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
		    l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
		    l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
		    l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
		    l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
		    l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
		    l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
		    l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
		    l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
		    l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
		    l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
		    l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
		    l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
		    l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
		    l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
		    l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
		    l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
		    l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
		    l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
		    l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
		    l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
		    l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
		    l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
		    l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
		    l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
		    l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
		    l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
		    l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
		    l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
		    l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
		    l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
		    l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
		    l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
		    l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
		    l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
		    l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
		    l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
		    l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
		    l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
		    l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
		    l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
		    l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
		    l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
		    l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
		    l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
		    l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
		    l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
			l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
		    l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
		    l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
		    l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
		    l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
		    l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
		    l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
		    l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
		    l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
		    l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
		    l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
		    l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
		    l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
		    l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
		    l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
		    l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
		    l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
		    l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
		    l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
		    l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
		    l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
		    l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
		    l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
		    l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
		    l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
		    l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
		    l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
		    l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
		    l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
		    l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
		    l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
		    l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;


		    --Validate the serials
		    FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP

		       l_progress := 'WMSINB-22557';

                       L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
                       if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
	                    L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
		       else
		            L_SERIAL_NUMBER :=
			      SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
				LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
				LENGTH(L_CUR_NUMBER))
			      ||L_CUR_NUMBER;
                       End if;

		       l_progress := 'WMSINB-22565';

		       BEGIN
			  SELECT CURRENT_ORGANIZATION_ID
			    , current_status
			    , lot_number
			    , Decode(lpn_id,0,NULL,lpn_id)
			    , inspection_status
			    , group_mark_id
			    INTO L_CURR_ORG_ID
			    , l_curr_status
			    , l_curr_lot_num
			    , l_curr_lpn_id
			    , l_inspection_status
			    , l_group_mark_id
			    FROM MTL_SERIAL_NUMBERS
			    WHERE SERIAL_NUMBER = l_serial_number
			    AND inventory_item_id = l_item_id;

			  l_serial_exists := 1;
			  l_progress := 'WMSINB-22585';
		       EXCEPTION
			  WHEN no_data_found THEN
			     l_serial_exists := 0;
			     l_progress := 'WMSINB-22589';
		       END;

		       IF (l_debug = 1) THEN
			  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
			  print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
			  l_progress := 'WMSINB-22602';
		       END IF;

		       l_progress := 'WMSINB-22605';

		       IF (L_TRANSACTION_TYPE <> 'RECEIVE') THEN
			  L_SERIAL_ENTERED_ON_PARENT := SERIAL_ENTERED_ON_PARENT(L_PARENT_TRANSACTION_ID);
			ELSE
			  L_SERIAL_ENTERED_ON_PARENT := FALSE;
		       END IF;

		       IF (l_debug = 1) THEN
			  print_debug('VALIDATE_LOT_SERIAL_INFO: ASN LINE FLAG: '||l_asn_line_flag||' : '||l_progress, 1);
			  l_progress := 'WMSINB-22615';
		       END IF;

		       IF NOT L_SERIAL_ENTERED_ON_PARENT THEN
			  IF (l_debug = 1) THEN
			     print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NOT ENTERED ON PARENT: '||l_progress, 1);
			     l_progress := 'WMSINB-22621';
			  END IF;

			  IF (l_serial_number_control_code IN (2,5)
			      OR (l_serial_number_control_code = 6
				  AND l_source_document_code IN
				  ('INVENTORY','REQ'))) THEN
			     IF l_serial_exists = 1 THEN
				IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')
				    OR l_asn_line_flag = 'Y') THEN

				   IF (l_asn_line_flag = 'Y') THEN
				      IF ((l_curr_org_id <> l_org_id) and not (l_restrict_rcpt_ser = '2'
									       and l_curr_status = 4 ))  THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22634';
					 RAISE fnd_api.g_exc_error;
				       ELSE
					 IF ((l_curr_lot_num IS NOT NULL)
					     AND (l_curr_lot_num <>
						  l_mtlt_rec.lot_number)
					     AND (Nvl(l_curr_status,1) NOT
						  IN (1,4))) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22641';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				      END IF;

				      IF (rss_exists(l_shipment_header_id,l_item_id)) THEN
				         BEGIN
					    SELECT '1'
					      INTO l_dummy
					      FROM rcv_serials_supply rss
					      , rcv_shipment_lines rsl
					      WHERE rss.shipment_line_id = rsl.shipment_line_id
					      AND rsl.shipment_header_id = l_shipment_header_id
					      AND rsl.item_id = l_item_id
					      AND rss.supply_type_code = 'SHIPMENT'
					      AND rss.serial_num = l_serial_number;

					    IF (l_debug = 1) THEN
					       print_debug('VALIDATE_LOT_SERIAL_INFO: RSS EXISTS: '||l_progress, 1);
					       l_progress := 'WMSINB-22657';
					    END IF;

					    IF l_curr_status <> 5 THEN
					       --raise error
					       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					       fnd_msg_pub.ADD;
					       l_progress := 'WMSINB-22664';
					       RAISE fnd_api.g_exc_error;
					    END IF;
					 EXCEPTION
					    WHEN no_data_found THEN
					       IF l_restrict_rcpt_ser = '2' THEN
						  IF l_curr_status NOT IN
						    (1,4,6) THEN
						     --raise error
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     l_progress := 'WMSINB-22675';
						     RAISE fnd_api.g_exc_error;
						  END IF;
						ELSE --IF l_restrict_rcpt_ser = '2' THEN
						  IF l_curr_status NOT IN
						    (1,6) THEN
						     --raise error
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     l_progress := 'WMSINB-22684';
						     RAISE fnd_api.g_exc_error;
						  END IF;
					       END IF; --IF l_restrict_rcpt_ser = '2' THEN
					 END;
				       ELSE --IF (rss_exists(l_shipment_header_id,l_item_id)) THEN
					       IF l_restrict_rcpt_ser = '2' THEN
						  IF l_curr_status NOT IN
						    (1,4,6) THEN
						     --raise error
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     l_progress := 'WMSINB-22696';
						     RAISE fnd_api.g_exc_error;
						  END IF;
						ELSE --IF l_restrict_rcpt_ser = '2' THEN
						  IF l_curr_status NOT IN
						    (1,6) THEN
						     --raise error
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     l_progress := 'WMSINB-22705';
						     RAISE fnd_api.g_exc_error;
						  END IF;
					       END IF; --IF l_restrict_rcpt_ser = '2' THEN
				      END IF; --IF (rss_exists(l_shipment_header_id,l_item_id)) THEN
				   END IF; --IF (l_asn_line_flag = 'Y') THEN

				   IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
				      -- CHECK TO SEE IF THE ITEM IS SERIAL
				      -- CONTROLLED IN SOURCE ORG

				      GET_SERIAL_LOT_CTRL_IN_SRC_ORG
					(L_SHIPMENT_LINE_ID, L_ORG_ID,
					 L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
					 l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

				      IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
					   AND l_source_document_code = 'REQ')
					  OR (l_from_org_ser_crtl IN (2,5)
					      AND l_source_document_code = 'INVENTORY')
					  ) THEN

                                         /*****bug4187663, comment out the call to serial uniqueness check, the check will be in TM
					 IF (l_source_document_code = 'REQ') THEN
					    l_txn_src_type_id := 7;
					  ELSE
					    l_txn_src_type_id := 13;
					 END IF;

					 --Validate Serial Uniqueness in
					 --current org.
					 IF (l_debug = 1) THEN
					    print_debug('VALIDATE_LOT_SERIAL_INFO: CALLING IS_SERNUM_UNIQUE...', 1);
					 END IF;

					 IF
					   (is_sernum_unique(l_org_id,l_item_id,l_serial_number,l_txn_src_type_id,12,x_msg_data)<>0) THEN
					      --raise error
					      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					      fnd_msg_pub.ADD;
					      l_progress := 'WMSINB-22725';
					      RAISE fnd_api.g_exc_error;
					   END IF;

					   IF (l_debug = 1) THEN
					      print_debug('VALIDATE_LOT_SERIAL_INFO: CALLING IS_SERNUM_UNIQUE...DONE', 1);
					   END IF;
                                           *****end of bug4187663*****/

					   IF l_curr_org_id <> l_from_org_id THEN
					      --raise error
					      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					      fnd_msg_pub.ADD;
					      l_progress := 'WMSINB-22726';
					      RAISE fnd_api.g_exc_error;
					    ELSE
					      IF ((l_curr_lot_num IS NOT NULL) AND
						  (l_curr_lot_num <>
						   l_mtlt_rec.lot_number)
						  AND (Nvl(l_curr_status,1)
						       NOT IN (1,4))) THEN
						 --raise error
						 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						 fnd_msg_pub.ADD;
						 l_progress := 'WMSINB-22734';
						 RAISE fnd_api.g_exc_error;
					      END IF;
					   END IF;

				         BEGIN
					    SELECT '1'
					      INTO L_DUMMY
					      FROM rcv_serials_supply rss
					      , rcv_shipment_lines rsl
					      WHERE rss.SHIPMENT_LINE_ID = rsl.SHIPMENT_LINE_ID
					      AND rsl.shipment_header_id = l_shipment_header_id
					      AND rsl.item_id = l_item_id
					      AND rss.SUPPLY_TYPE_CODE = 'SHIPMENT'
					      AND rss.serial_num = l_serial_number;

					    IF L_CURR_STATUS <> 5 THEN
					       -- RAISE AN ERROR
					       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					       fnd_msg_pub.ADD;
					       l_progress := 'WMSINB-22751';
					       RAISE fnd_api.g_exc_error;
					    END IF;

					 EXCEPTION
					    WHEN NO_DATA_FOUND THEN
					       -- RAISE AN ERROR
					       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					       fnd_msg_pub.ADD;
					       l_progress := 'WMSINB-22760';
					       RAISE fnd_api.g_exc_error;
					 END;
				       ELSE --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                --BUG 5524134
                /* For lot serials with serial numbers in status 4
                  i.e. issued out of stores, we need to
                  honor the INV_RESTRICT_RCPT_SER profile.
                  And for serial status defined but not used
                  error out only if the org id in MSN is equal to
                  that present in the RSL.
                  */
					       IF L_CURR_ORG_ID <> l_org_id THEN
                    BEGIN
                           SELECT from_organization_id INTO l_from_org_id
                           FROM rcv_shipment_lines
                           WHERE shipment_line_id = L_SHIPMENT_LINE_ID;
                    EXCEPTION
                           WHEN NO_DATA_FOUND THEN
                           -- RAISE AN ERROR
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-22765';
                           RAISE fnd_api.g_exc_error;
                    END;
                    IF L_SOURCE_DOCUMENT_CODE IN ( 'INVENTORY' , 'REQ' ) THEN
                       IF NOT (
                               ( L_CURR_STATUS = 1 AND L_CURR_ORG_ID = l_from_org_id)
                            OR ( L_CURR_STATUS = 4 AND l_restrict_rcpt_ser = '2' )
                              )
                             THEN
                             l_progress := 'WMSINB-22761';
                             IF (l_debug = 1) THEN
                                  print_debug('For Intransit receipt the serial number org does not match the sending org!', 1);
                             END IF;
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             RAISE fnd_api.g_exc_error;
                    END IF;
            ELSE
    						  --raise error
    						  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
    						  fnd_msg_pub.ADD;
    						  l_progress := 'WMSINB-22768';
    						  RAISE fnd_api.g_exc_error;
				    END IF;
						ELSE
						  IF ((l_curr_lot_num IS
						       NOT NULL)
						      AND (l_curr_lot_num
							   <>
							   l_mtlt_rec.lot_number)
						      AND
						      (Nvl(l_curr_status,1)
						       NOT IN (1,4))) THEN
						     --raise error
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     l_progress := 'WMSINB-22776';
						     RAISE fnd_api.g_exc_error;
						  END IF;
					       END IF;
					       /* Bug: 5524134
                    In case of serial numbers that are in status
					          4 i.e. issued out of stores, we need to
                    honor the INV_RESTRICT_RCPT_SER profile.
                  */
					       IF (L_CURR_STATUS NOT IN (1,6)
                     AND NOT (l_restrict_rcpt_ser = '2'and l_curr_status = 4)
                    ) THEN
						  -- RAISE AN ERROR
						  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						  fnd_msg_pub.ADD;
						  l_progress := 'WMSINB-22785';
						  RAISE fnd_api.g_exc_error;
					       END IF;
				      END IF; --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
				   END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
				 ELSE  --IF (L_SOURCE_DOCUMENT_CODE IN
				      --('INVENTORY','REQ') OR l_asn_line_flag = 'Y') THEN
				      IF (( (L_SOURCE_DOCUMENT_CODE <> 'RMA' AND l_curr_org_id <> l_org_id) )
                           and not (l_restrict_rcpt_ser = '2'and l_curr_status = 4 ))  THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22796';
					 RAISE fnd_api.g_exc_error;
				       ELSE
					 IF ((l_curr_lot_num IS NOT NULL)
					     AND (l_curr_lot_num <>
						  l_mtlt_rec.lot_number)
					     AND (Nvl(l_curr_status,1) NOT
						  IN (1,4))) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22803';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				      END IF;

				      IF l_restrict_rcpt_ser = '2' THEN
					 IF l_curr_status NOT IN (1,4,6) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22813';
					    RAISE fnd_api.g_exc_error;
					 END IF;
/* Bug 6847337:
 * Fix done to allow the re-using of serials after the
 * correction of a PO receipt by handling the transaction type
 * for correction(71) and return to vendor(36) in the following
 * ELSE condition when the INV: Restrict Receipt of Serials = 'Yes'.
 */
				       ELSE --IF l_restrict_rcpt_ser = '2' THEN
					 IF ((l_curr_status NOT IN (1,6))
					     AND NOT (l_curr_status = 4 and
						     (l_source_document_code = 'RMA' OR
						        (l_source_document_code = 'PO'
						           and l_last_transaction_type_id in (36,71))))) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22821';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				      END IF; --IF l_restrict_rcpt_ser = '2' THEN

				END IF; --IF (L_SOURCE_DOCUMENT_CODE IN
				--('INVENTORY','REQ') OR l_asn_line_flag = 'Y') THEN

				--Validate serial/LPN
				IF l_transaction_type = 'RECEIVE' THEN
				   IF (l_source_document_code IN ('INVENTORY', 'REQ')) then
				      IF (Nvl(l_curr_lpn_id, -9999) <>
					  Nvl(l_lpn_id, -9999)
					  AND (
                 Nvl(l_curr_status,1) NOT IN (1,5, 6))  ----bug 7112775 (Added status 6 also)
                 AND NOT (l_curr_status = 4 and l_restrict_rcpt_ser = '2') --Bug: 5524134
                 ) THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22837';
					 RAISE fnd_api.g_exc_error;
				      END IF;
				   END IF;
				 ELSE
				   IF ((Nvl(l_curr_lpn_id, -9999) <>
					Nvl(l_lpn_id, -9999))
					AND Nvl(l_curr_status,1) <> 4) THEN
				      --raise error
				      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				      fnd_msg_pub.ADD;
				      l_progress := 'WMSINB-22847';
				      RAISE fnd_api.g_exc_error;
				   END IF;
				END IF;

				--Validate Serial/Inspection_status
		 /*  Commented for bug 6269102
                  *  To allow the inspection done again
		  *  on an inspection transaction to succeed
		  *  as it was failing because of the
		  *  inspection status <> 1

				IF l_transaction_type IN ('ACCEPT', 'REJECT') THEN
				   IF (Nvl(l_inspection_status, 1) <> 1) THEN
				      --raise error
				      l_progress := 'WMSINB-22856';
				      RAISE fnd_api.g_exc_error;
				   END IF;
				 ELS*/
                                 -- Bug 9569977: Commenting following since l_serial_entered_on_parent
                                 --              is false
				 /*IF (l_transaction_type = 'DELIVER') THEN
				   IF (l_routing_header_id = 2) THEN
				      IF l_inspection_status IS NOT NULL AND l_inspection_status = 1 THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22865';
					 RAISE fnd_api.g_exc_error;
				      END IF;
				   END IF;
				END IF;*/

				--Validate serial/group_mark_id to prevent
				--entering of duplicate serials

				IF (Nvl(l_group_mark_id, -99) = -7937) THEN
				   --raise error
				   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				   fnd_msg_pub.ADD;
				   l_progress := 'WMSINB-22878';
				   RAISE fnd_api.g_exc_error;
				END IF;

				IF (Nvl(l_curr_status, 1) IN (1,6)) THEN
				   --validate and update the attributes.
				   inv_serial_number_pub.validate_update_serial_att
				     (x_return_status     => x_return_status,
				      x_msg_count         => x_msg_count,
				      x_msg_data          => x_msg_data,
				      x_validation_status => l_validation_status,
				      p_serial_number     => l_serial_number,
				      p_organization_id   => l_org_id,
				      p_inventory_item_id => l_item_id,
				      p_serial_att_tbl    => l_serial_attributes_tbl,
				      p_validate_only     => FALSE
				      );

				   IF (l_validation_status <> 'Y'
				       OR x_return_status <> g_ret_sts_success) THEN
				      --raise error
				      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				      fnd_msg_pub.ADD;
				      l_progress := 'WMSINB-22880';
				      RAISE fnd_api.g_exc_error;
				   END IF;
				END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

				--UPDATE GROUP_MARK_ID TO -7937
				IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
				   --raise error
				   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				   fnd_msg_pub.ADD;
				   l_progress := 'WMSINB-22887';
				   RAISE fnd_api.g_exc_error;
				END IF;

			      ELSE --IF l_serial_exists = 1 THEN
				      IF (l_source_document_code IN ('INVENTORY','REQ')) THEN
					 GET_SERIAL_LOT_CTRL_IN_SRC_ORG
					   (L_SHIPMENT_LINE_ID, L_ORG_ID,
					    L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
					    l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

					 IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
					      AND l_source_document_code = 'REQ')
					     OR (l_from_org_ser_crtl IN (2,5)
						 AND l_source_document_code = 'INVENTORY')
					     ) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22902';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				      END IF;

				      IF l_serial_number_control_code = 5 THEN
					 --PERFORM SERIAL VALIDATION FOR NEW SERIAL
					 --(INCLUDING ATT VALIDATION)
					 --CREATE MSN

					 inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
										   , p_inventory_item_id => l_item_id
										   , p_organization_id => l_org_id
										   , p_from_serial_number => l_serial_number
										   , p_to_serial_number => l_serial_number
										   , p_initialization_date => SYSDATE
										   , p_completion_date => NULL
										   , p_ship_date => NULL
										   , p_revision => l_item_revision
										   , p_lot_number => l_mtlt_rec.lot_number
										   , p_current_locator_id => l_loc_id
										   , p_subinventory_code => l_sub_code
										   , p_trx_src_id => NULL
										   , p_unit_vendor_id => NULL
										   , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
										   , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
										   , p_receipt_issue_type => NULL
										   , p_txn_src_id => NULL
										   , p_txn_src_name => NULL
										   , p_txn_src_type_id => NULL
										   , p_transaction_id => NULL
										   , p_current_status => 1
					   , p_parent_item_id => NULL
					   , p_parent_serial_number => NULL
					   , p_cost_group_id => NULL
					   , p_transaction_action_id => 27
					   , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
					   , p_status_id => NULL
					   , p_inspection_status => NULL
					   , x_object_id => l_object_id
					   , x_return_status => x_return_status
					   , x_msg_count => x_msg_count
					   , x_msg_data => x_msg_data);

					 IF (x_return_status <> g_ret_sts_success) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22911';
					    RAISE fnd_api.g_exc_error;
					 END IF;

					 --validate and update the attributes.
					 inv_serial_number_pub.validate_update_serial_att
					   (x_return_status     => x_return_status,
					    x_msg_count         => x_msg_count,
					    x_msg_data          => x_msg_data,
					    x_validation_status => l_validation_status,
					    p_serial_number     => l_serial_number,
					    p_organization_id   => l_org_id,
					    p_inventory_item_id => l_item_id,
					    p_serial_att_tbl    => l_serial_attributes_tbl,
					    p_validate_only     => FALSE
					    );

					 IF (l_validation_status <> 'Y'
					     OR x_return_status <> g_ret_sts_success) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22941';
					    RAISE fnd_api.g_exc_error;
					 END IF;

					 --UPDATE GROUP_MARK_ID TO -7937
					 IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22951';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				       ELSE
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22958';
					 RAISE fnd_api.g_exc_error;
				      END IF;
			     END IF; --IF l_serial_exists = 1 THEN
			   ELSIF (l_serial_number_control_code = 6 AND
				  l_source_document_code = 'RMA') THEN
				   IF l_serial_exists = 1 THEN
                  --bug#3571808 removed the current_org_id check
                  /*
				      IF ((l_curr_org_id <> l_org_id) and not (l_restrict_rcpt_ser = '2'
									       and l_curr_status = 4 ))  THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22969';
					 RAISE fnd_api.g_exc_error;
				       ELSE */
					 IF ((l_curr_lot_num IS NOT NULL)
					     AND (l_curr_lot_num <> l_mtlt_rec.lot_number)
					     AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-22976';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				      --END IF;


				      IF l_curr_status NOT IN (1,4,6) THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-22985';
					 RAISE fnd_api.g_exc_error;
				      END IF;

				      -- see if we need to restrict 4's based on
				      -- inv_restrict_rcpt profile
				      -- REVIEW at CODE REVIEW
				      IF l_restrict_rcpt_ser <> 2 THEN
					 l_dummy := '0';
				         BEGIN
					    SELECT '1'
					      INTO l_dummy
					      FROM dual
					      WHERE exists (SELECT '1'
							    FROM   mtl_serial_numbers
							    WHERE  inventory_item_id = l_item_id
							    AND    current_organization_id = l_org_id
							    AND    current_status IN (1, 4) --Do we need 4 here
							    AND    serial_number = l_serial_number
							    AND    LAST_TXN_SOURCE_TYPE_ID = 12);

					    IF l_dummy <> '0' THEN
					       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					       fnd_msg_pub.ADD;
					       l_progress := 'WMSINB-23009';
					       RAISE fnd_api.g_exc_error;
					    END IF;

					 EXCEPTION
					    WHEN no_data_found THEN
					       NULL;
					 END;
				      END IF;

				      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-23023';
					 RAISE fnd_api.g_exc_error;
				      END IF;

				      IF (Nvl(l_curr_status, 1) in (1,6)) THEN
					 --validate and update the attributes.
					 inv_serial_number_pub.validate_update_serial_att
					   (x_return_status     => x_return_status,
					    x_msg_count         => x_msg_count,
					    x_msg_data          => x_msg_data,
					    x_validation_status => l_validation_status,
					    p_serial_number     => l_serial_number,
					    p_organization_id   => l_org_id,
					    p_inventory_item_id => l_item_id,
					    p_serial_att_tbl    => l_serial_attributes_tbl,
					    p_validate_only     => FALSE
					    );

					 IF (l_validation_status <> 'Y'
					     OR x_return_status <> g_ret_sts_success) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-23030';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				      END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

				      --UPDATE GROUP_MARK_ID TO -7937
				      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-23032';
					 RAISE fnd_api.g_exc_error;
				      END IF;
				    ELSE --IF l_serial_exists = 1 THEN
					 --PERFORM SERIAL VALIDATION FOR NEW SERIAL
					 --(INCLUDING ATT VALIDATION)
					 --CREATE MSN

					 inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
										   , p_inventory_item_id => l_item_id
										   , p_organization_id => l_org_id
										   , p_from_serial_number => l_serial_number
										   , p_to_serial_number => l_serial_number
										   , p_initialization_date => SYSDATE
										   , p_completion_date => NULL
										   , p_ship_date => NULL
										   , p_revision => l_item_revision
										   , p_lot_number => l_mtlt_rec.lot_number
										   , p_current_locator_id => l_loc_id
										   , p_subinventory_code => l_sub_code
										   , p_trx_src_id => NULL
										   , p_unit_vendor_id => NULL
										   , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
										   , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
										   , p_receipt_issue_type => NULL
										   , p_txn_src_id => NULL
										   , p_txn_src_name => NULL
										   , p_txn_src_type_id => NULL
										   , p_transaction_id => NULL
										   , p_current_status => 1
					   , p_parent_item_id => NULL
					   , p_parent_serial_number => NULL
					   , p_cost_group_id => NULL
					   , p_transaction_action_id => 27
					   , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
					   , p_status_id => NULL
					   , p_inspection_status => NULL
					   , x_object_id => l_object_id
					   , x_return_status => x_return_status
					   , x_msg_count => x_msg_count
					   , x_msg_data => x_msg_data);


					 IF (x_return_status <> g_ret_sts_success) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-23035';
					    RAISE fnd_api.g_exc_error;
					 END IF;

					 --validate and update the attributes.
					 inv_serial_number_pub.validate_update_serial_att
					   (x_return_status     => x_return_status,
					    x_msg_count         => x_msg_count,
					    x_msg_data          => x_msg_data,
					    x_validation_status => l_validation_status,
					    p_serial_number     => l_serial_number,
					    p_organization_id   => l_org_id,
					    p_inventory_item_id => l_item_id,
					    p_serial_att_tbl    => l_serial_attributes_tbl,
					    p_validate_only     => FALSE
					    );

					 IF (l_validation_status <> 'Y'
					     OR x_return_status <> g_ret_sts_success) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-23069';
					    RAISE fnd_api.g_exc_error;
					 END IF;

					 --UPDATE GROUP_MARK_ID TO -7937
					 IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
					    --raise error
					    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					    fnd_msg_pub.ADD;
					    l_progress := 'WMSINB-23079';
					    RAISE fnd_api.g_exc_error;
					 END IF;
				   END IF; --IF l_serial_exists = 1 THEN
			  END IF; --IF l_serial_number_control_code IN (2,5) THEN
			ELSE --IF NOT L_SERIAL_ENTERED_ON_PARENT THEN
			   BEGIN
			      SELECT '1'
				INTO L_DUMMY
				FROM RCV_SERIALS_SUPPLY
				WHERE TRANSACTION_ID = L_PARENT_TRANSACTION_ID
				AND SERIAL_NUM = L_SERIAL_NUMBER;

			      IF (l_curr_status <> 7) THEN
				 --raise error
				 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				 fnd_msg_pub.ADD;
				 l_progress := 'WMSINB-23096';
				 RAISE fnd_api.g_exc_error;
			      END IF;

			      --Validate Serial/Inspection_status
                         /*  Commented for bug 6269102
                          *  To allow the inspection done again
                	  *  on an inspection transaction to succeed
		          *  as it was failing because of the
        		  *  inspection status <> 1

			      IF l_transaction_type IN ('ACCEPT', 'REJECT') THEN
				 IF (Nvl(l_inspection_status, 1) <> 1) THEN
				    --raise error
				    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				    fnd_msg_pub.ADD;
				    l_progress := 'WMSINB-23106';
				    RAISE fnd_api.g_exc_error;
				 END IF;
			       ELS */
			       IF l_transaction_type = 'DELIVER' THEN
				 IF (l_routing_header_id = 2) THEN
				    IF l_inspection_status IS NOT NULL AND l_inspection_status = 1 THEN
				       --raise error
				       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				       fnd_msg_pub.ADD;
				       l_progress := 'WMSINB-23115';
				       RAISE fnd_api.g_exc_error;
				    END IF;
				 END IF;
			      END IF;

			      --Validate serial/group_mark_id to prevent
			      --entering of duplicate serials

			      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
				 --raise error
				 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				 fnd_msg_pub.ADD;
				 l_progress := 'WMSINB-23128';
				 RAISE fnd_api.g_exc_error;
			      END IF;

			      --UPDATE GROUP_MARK_ID TO -7937
			      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
				 --raise error
				 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				 fnd_msg_pub.ADD;
				 l_progress := 'WMSINB-23137';
				 RAISE fnd_api.g_exc_error;
			      END IF;
			   EXCEPTION
			      WHEN NO_DATA_FOUND THEN
				 -- RAISE ERROR
				 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				 fnd_msg_pub.ADD;
				 l_progress := 'WMSINB-23145';
				 RAISE fnd_api.g_exc_error;
			   END;
		       END IF; --IF NOT L_SERIAL_ENTERED_ON_PARENT THEN
		    END LOOP; -- FOR 1..L_SERIAL_QUANTITY
		 END LOOP; --FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;

		 CLOSE c_msnt_lotserial;

		 IF (l_num_msnt_recs > 0) THEN
		    IF l_mtlt_rec.primary_quantity <> l_tot_msnt_serial_qty THEN
		       --raise error
		       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
		       fnd_msg_pub.ADD;
		       l_progress := 'WMSINB-23159';
		       RAISE fnd_api.g_exc_error;
		    END IF;
		  ELSE

		    IF l_source_document_code IN ('INVENTORY', 'REQ') THEN
		       GET_SERIAL_LOT_CTRL_IN_SRC_ORG
			 (L_SHIPMENT_LINE_ID, L_ORG_ID,
			  L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
			  l_from_org_rev_ctrl,
			  X_RETURN_STATUS, X_MSG_COUNT,
			  x_msg_data);
		    END IF;

		    IF (l_serial_number_control_code IN (2,5)
			OR (l_serial_number_control_code = 6
			    AND l_source_document_code IN ('RMA'))
			OR (l_serial_number_control_code = 6
			    AND l_source_document_code = 'INVENTORY'
			    AND l_from_org_ser_crtl IN (2,5))
			--BUG 3644289: Do the following check for INTREQ
			OR (l_serial_number_control_code = 6
			    AND l_from_org_ser_crtl IN (2,5,6)
			    AND l_source_document_code = 'REQ')) THEN
		       --raise error
		       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
		       fnd_msg_pub.ADD;
		       l_progress := 'WMSINB-23166';
		       RAISE fnd_api.g_exc_error;
		    END IF;
		 END IF;

	      END IF; -- IF (L_SERIAL_NUMBER_CONTROL_CODE IN (2,5,6)) THEN
	   END LOOP; --FETCH C_MTLT INTO L_MTLT_REC;

	   CLOSE c_mtlt;

        /* Bug 4546519 : l_tot_mtlt_prim_qty is a computed floating point number.
         **  In the following condition, it is necessary to use round function for
         **  comparing the floating point values.
         */

	   IF (l_num_mtlt_recs > 0) THEN
	   --Bug#8488484 Round by 6,not 5
      --Bug 9113637 The change done for bug 8488484 is not correct.
	      IF (ROUND(l_tot_mtlt_prim_qty,5) <> ROUND(l_rti_primary_qty,5)) THEN
		-- Bug# 4225766 Compare transaction qty there can be a difference in primary qty
		-- if there is a lot specific conversion
		IF (ROUND(l_tot_mtlt_trans_qty,5) <> ROUND(l_rti_trans_qty,5)) THEN -- Bug# 4225766
			--raise error
			l_progress := 'WMSINB-23178';
			RAISE fnd_api.g_exc_error;
		END IF; -- Bug# 4225766
	      END IF;
	    ELSE
	      IF (l_transaction_type = 'DELIVER'
		  OR Nvl(l_auto_transact_code,'@@@@') = 'DELIVER') THEN
		 --raise error;
		 l_progress := 'WMSINB-23184';
		 RAISE fnd_api.g_exc_error;
	       ELSIF (lot_entered_on_parent(l_parent_transaction_id)) THEN
		 --raise error;
		 l_progress := 'WMSINB-23188';
		 RAISE fnd_api.g_exc_error;
	      END IF;
	   END IF;
	 ELSIF l_serial_number_control_code IN (2,5,6) THEN --IF (L_LOT_CONTROL_CODE = 2) THEN

				IF (l_debug = 1) THEN
				   print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROLLED: '||l_progress, 1);
				   print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
				   print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
				   l_progress := 'WMSINB-23198';
				END IF;
				L_NUM_MSNT_RECS := 0;
				l_tot_msnt_serial_qty := 0;

				OPEN C_MSNT(L_RTI_ID);

				LOOP
				   FETCH C_MSNT INTO L_MSNT_REC;

				   EXIT WHEN C_MSNT%NOTFOUND;

				   L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;

				   IF (L_SERIAL_NUMBER_CONTROL_CODE = 6 AND
				       L_SOURCE_DOCUMENT_CODE NOT IN ('RMA','REQ','INVENTORY')) THEN
				      -- RAISE AN ERROR. IF SERIAL IS AT SALES ORDER ISSUE THEN
				      -- IT CAN BE ENTERED ONLY FOR A RMA RECEIPT.
				      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				      fnd_msg_pub.ADD;
				      l_progress := 'WMSINB-23218';
				      RAISE fnd_api.g_exc_error;
				   END IF;

				   L_SERIAL_QUANTITY :=
				     INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
									   L_MSNT_REC.TO_SERIAL_NUMBER);

				   l_tot_msnt_serial_qty := l_tot_msnt_serial_qty +
				     l_serial_quantity;

				   INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
		                   INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

				   IF (l_debug = 1) THEN
				      print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
				      l_progress := 'WMSINB-23233';
				   END IF;

				   --populate attributes table
				   l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
				   l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
				   l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
				   l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
				   l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
				   l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
				   l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
				   l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
				   l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
				   l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
				   l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
				   l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
				   l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
				   l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
				   l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
				   l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
				   l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
				   l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
				   l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
				   l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
				   l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
				   l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
				   l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
				   l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
				   l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
				   l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
				   l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
				   l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
				   l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
				   l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
				   l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
				   l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
				   l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
				   l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
				   l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
				   l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
				   l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
				   l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
				   l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
				   l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
				   l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
				   l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
				   l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
				   l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
				   l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
				   l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
				   l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
				   l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
				   l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
				   l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
				   l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
				   l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
				   l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
				   l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
				   l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
				   l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
				   l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
				   l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
				   l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
				   l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
				   l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
				   l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
				   l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
				   l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
				   l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
				   l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
				   l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
				   l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
				   l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
				   l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
				   l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
				   l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
				   l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
				   l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
				   l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
				   l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
				   l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
				   l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
				   l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
				   l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
				   l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
				   l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
				   l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
				   l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
				   l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
				   l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
				   l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
				   l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
				    l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
					l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
					l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
					l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
					l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
					l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
					l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
					l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
					l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
					l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
					l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
					l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
					l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
					l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
					l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
					l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
					l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
					l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
					l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
					l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
					l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
					l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
					l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
					l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
					l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
					l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
					l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
					l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
					l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
					l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
					l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
					l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;

				   --Validate the serials
				   FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP
                                    L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
                                    if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
	                                 L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
		                    else
		                         L_SERIAL_NUMBER :=
			                   SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
				             LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
				             LENGTH(L_CUR_NUMBER))
			                   ||L_CUR_NUMBER;
                                    End if;

				      --L_SERIAL_NUMBER :=
					--SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
					 --      LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
					  --     LENGTH(L_FROM_SER_NUMBER))
					--||(L_FROM_SER_NUMBER+SERIALQTY -1);

	                              BEGIN
					 SELECT CURRENT_ORGANIZATION_ID
					   , current_status
					   , lot_number
					   , Decode(lpn_id,0,NULL,lpn_id)
					   , inspection_status
					   , group_mark_id
					   , last_transaction_id --bug 5168883
					   INTO L_CURR_ORG_ID
					   , l_curr_status
					   , l_curr_lot_num
					   , l_curr_lpn_id
					   , l_inspection_status
					   , l_group_mark_id
					   , l_last_transaction_id --bug 5168883
					   FROM MTL_SERIAL_NUMBERS
					   WHERE SERIAL_NUMBER = l_serial_number
					   AND inventory_item_id = l_item_id;

					 l_serial_exists := 1;
				      EXCEPTION
					 WHEN no_data_found THEN
					    l_serial_exists := 0;
				      END;

				      IF (l_debug = 1) THEN
					 print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
					 print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
					 l_progress := 'WMSINB-23276';
				      END IF;

				      IF (L_TRANSACTION_TYPE <> 'RECEIVE') THEN
					 L_SERIAL_ENTERED_ON_PARENT := SERIAL_ENTERED_ON_PARENT(L_PARENT_TRANSACTION_ID);
				       ELSE
					 L_SERIAL_ENTERED_ON_PARENT := FALSE;
				      END IF;

				      IF (l_debug = 1) THEN
					 print_debug('VALIDATE_LOT_SERIAL_INFO: ASN LINE FLAG: '||l_asn_line_flag||' : '||l_progress, 1);
					 l_progress := 'WMSINB-23287';
				      END IF;

				      IF NOT L_SERIAL_ENTERED_ON_PARENT THEN
					 IF (l_debug = 1) THEN
					    print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NOT ENTERED ON PARENT: '||l_progress, 1);
					    l_progress := 'WMSINB-23293';
					 END IF;
					 IF (l_serial_number_control_code IN (2,5)
					     OR (l_serial_number_control_code = 6
						 AND l_source_document_code IN ('INVENTORY','REQ'))) THEN
					    IF l_serial_exists = 1 THEN
					       IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')
						   OR l_asn_line_flag = 'Y') THEN

						  IF (l_asn_line_flag = 'Y') THEN
						     IF ((l_curr_org_id <> l_org_id) and not (l_restrict_rcpt_ser = '2'
											      and l_curr_status = 4 ))  THEN
							--raise error
							l_progress := 'WMSINB-23303';
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							l_progress := 'WMSINB-23306';
							RAISE fnd_api.g_exc_error;
						      ELSE
							IF (l_curr_lot_num IS NOT NULL) THEN
							   --raise error
							   l_progress := 'WMSINB-23311';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23314';
							   RAISE fnd_api.g_exc_error;
							END IF;
						     END IF;

						     IF (rss_exists(l_shipment_header_id,l_item_id)) THEN
			                                BEGIN
							   SELECT '1'
							     INTO l_dummy
							     FROM rcv_serials_supply rss
							     , rcv_shipment_lines rsl
							     WHERE rss.SHIPMENT_LINE_ID = rsl.SHIPMENT_LINE_ID
							     AND rsl.shipment_header_id = l_shipment_header_id
							     AND rsl.item_id = l_item_id
							     AND rss.supply_type_code = 'SHIPMENT'
							     AND rss.serial_num = l_serial_number;

							   IF (l_debug = 1) THEN
							      print_debug('VALIDATE_LOT_SERIAL_INFO: RSS EXISTS: '||l_progress, 1);
							      l_progress := 'WMSINB-23330';
							   END IF;

							   IF l_curr_status <> 5 THEN
							      --raise error
							      l_progress := 'WMSINB-23335';
							      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							      fnd_msg_pub.ADD;
							      RAISE fnd_api.g_exc_error;
							   END IF;
							EXCEPTION
							   WHEN no_data_found THEN
							      IF l_restrict_rcpt_ser = '2' THEN
								 IF l_curr_status NOT IN
								   (1,4,6) THEN
								    --raise error
								    l_progress := 'WMSINB-23346';
								    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
								    fnd_msg_pub.ADD;
								    RAISE fnd_api.g_exc_error;
								 END IF;
							       ELSE --IF l_restrict_rcpt_ser = '2' THEN
								 IF l_curr_status NOT IN
								   (1,6) THEN
								    --raise error
								    l_progress := 'WMSINB-23355';
								    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
								    fnd_msg_pub.ADD;
								    RAISE fnd_api.g_exc_error;
								 END IF;
							      END IF; --IF l_restrict_rcpt_ser = '2' THEN
							END;
						      ELSE --IF (rss_exists(l_shipment_header_id,l_item_id)) THEN
							      IF l_restrict_rcpt_ser = '2' THEN
								 IF l_curr_status NOT IN
								   (1,4,6) THEN
								    --raise error
								    l_progress := 'WMSINB-23367';
								    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
								    fnd_msg_pub.ADD;
								    RAISE fnd_api.g_exc_error;
								 END IF;
							       ELSE --IF l_restrict_rcpt_ser = '2' THEN
								 IF l_curr_status NOT IN
								   (1,6) THEN
								    --raise error
								    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
								    fnd_msg_pub.ADD;
								    l_progress := 'WMSINB-23378';
								    RAISE fnd_api.g_exc_error;
								 END IF;
							      END IF; --IF l_restrict_rcpt_ser = '2' THEN
						     END IF; --IF (rss_exists(l_shipment_header_id,l_item_id)) THEN
						  END IF; --IF (l_asn_line_flag = 'Y') THEN

						  IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
						     -- CHECK TO SEE IF THE ITEM IS SERIAL
						     -- CONTROLLED IN SOURCE ORG

						     GET_SERIAL_LOT_CTRL_IN_SRC_ORG
						       (L_SHIPMENT_LINE_ID, L_ORG_ID,
							L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
							l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

						     IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
							  AND l_source_document_code = 'REQ')
							 OR (l_from_org_ser_crtl IN (2,5)
							     AND l_source_document_code = 'INVENTORY')
							 ) THEN

                                                        /*****bug4187663, comment out the call to serial uniqueness check, the check will be in TM
							IF (l_source_document_code = 'REQ') THEN
							   l_txn_src_type_id := 7;
							 ELSE
							   l_txn_src_type_id := 13;
							END IF;

							--Validate Serial Uniqueness in current org.
							IF (l_debug = 1) THEN
							   print_debug('VALIDATE_LOT_SERIAL_INFO: CALLING IS_SERNUM_UNIQUE...', 1);
							END IF;

							IF (is_sernum_unique(l_org_id, l_item_id,l_serial_number,l_txn_src_type_id,12,x_msg_data)<>0) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-22725';
							   RAISE fnd_api.g_exc_error;
							END IF;

							IF (l_debug = 1) THEN
							   print_debug('VALIDATE_LOT_SERIAL_INFO: CALLING IS_SERNUM_UNIQUE...DONE', 1);
							END IF;
                                                        *****end of bug4187663*****/

							IF l_curr_org_id <> l_from_org_id THEN
							   --raise error
							   l_progress := 'WMSINB-23397';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   RAISE fnd_api.g_exc_error;
							 ELSE
							   IF (l_curr_lot_num IS NOT NULL) THEN

                           if (L_FROM_ORG_LOT_CTRL = 1 ) then
							      --raise error
							         l_progress := 'WMSINB-23404';
							         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							         fnd_msg_pub.ADD;
							         RAISE fnd_api.g_exc_error;
                           else
							         --update the serial row
							         IF (l_debug = 1) THEN
							            print_debug('VALIDATE_LOT_SERIAL_INFO: UPDATING LOT_NUMBER to null as destination org is not lot controlled', 1);
							         END IF;
                                                                 update mtl_serial_numbers msn
                                                                    set lot_number = null
                                                                  where msn.serial_number = l_serial_number
                                                                    AND inventory_item_id = l_item_id;
                                                              end if;
							   END IF;
							END IF;

			                                BEGIN
							   SELECT '1'
							     INTO L_DUMMY
							     FROM rcv_serials_supply rss
							     , rcv_shipment_lines rsl
							     WHERE rss.SHIPMENT_LINE_ID = rsl.SHIPMENT_LINE_ID
							     AND rsl.shipment_header_id = l_shipment_header_id
							     AND rsl.item_id = l_item_id
							     AND rss.SUPPLY_TYPE_CODE = 'SHIPMENT'
							     AND rss.serial_num = l_serial_number;

							   IF L_CURR_STATUS <> 5 THEN
							      -- RAISE AN ERROR
							      l_progress := 'WMSINB-23421';
							      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							      fnd_msg_pub.ADD;
							      RAISE fnd_api.g_exc_error;
							   END IF;

							EXCEPTION
							   WHEN NO_DATA_FOUND THEN
							      -- RAISE AN ERROR
							      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							      fnd_msg_pub.ADD;
							      l_progress := 'WMSINB-23432';
							      RAISE fnd_api.g_exc_error;
							END;
						      ELSE --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
							      IF L_CURR_ORG_ID <> l_org_id THEN
                      --BUG 5524134
                      /* In case of serial numbers in status 4
                      i.e. issued out of stores, we need to
                      honor the INV_RESTRICT_RCPT_SER profile.
                      And for serial status defined but not used
                      error out only if the org id in MSN is equal to
                      that present in the RSL.
                      */
                      BEGIN
                           SELECT from_organization_id
                           INTO l_from_org_id
                           FROM rcv_shipment_lines
                           WHERE shipment_line_id = L_SHIPMENT_LINE_ID;
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                        -- RAISE AN ERROR
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-23433';
                        RAISE fnd_api.g_exc_error;
                      END;
                      --BEGIN Bug: 5524134
                      IF L_SOURCE_DOCUMENT_CODE IN ( 'INVENTORY' , 'REQ' ) THEN
                         IF NOT (
                                 ( L_CURR_STATUS = 1 AND L_CURR_ORG_ID = l_from_org_id)
                              OR ( L_CURR_STATUS = 4 AND l_restrict_rcpt_ser = '2' )
                                )
                               THEN
                               l_progress := 'WMSINB-23435';
                               IF (l_debug = 1) THEN
                                    print_debug('For Intransit receipt the serial number org does not match the sending org!', 1);
                               END IF;
        								 --raise error
        								 l_progress := 'WMSINB-23438';
        								 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
        								 fnd_msg_pub.ADD;
        								 RAISE fnd_api.g_exc_error;
                         END IF;
                     ELSE
                         l_progress := 'WMSINB-23438';
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         RAISE fnd_api.g_exc_error;
                     END IF;
                     --END Bug: 5524134
							       ELSE
								 IF (l_curr_lot_num IS NOT NULL) THEN
								    --raise error
								    l_progress := 'WMSINB-23445';
								    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
								    fnd_msg_pub.ADD;
								    RAISE fnd_api.g_exc_error;
								 END IF;
							      END IF;

							      IF L_CURR_STATUS NOT IN (1,6)
                       AND NOT (l_restrict_rcpt_ser = '2'and l_curr_status = 4 ) --Bug: 5524134
                       THEN
								 -- RAISE AN ERROR
								 l_progress := 'WMSINB-23454';
								 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
								 fnd_msg_pub.ADD;
								 RAISE fnd_api.g_exc_error;
							      END IF;
						     END IF; --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
						  END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
						ELSE  --IF (L_SOURCE_DOCUMENT_CODE IN
						     --('INVENTORY','REQ') OR l_asn_line_flag = 'Y') THEN
						     IF ((L_SOURCE_DOCUMENT_CODE <> 'RMA' AND l_curr_org_id <> l_org_id )
                           and not (l_restrict_rcpt_ser = '2'and l_curr_status = 4 ) )  THEN
							--raise error
							l_progress := 'WMSINB-23465';
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							RAISE fnd_api.g_exc_error;

                                                      --BUG 5114851 (FP of BUG 5060131):
                                                      --For RMA, the item for the original org of
                                                      --the serial number may be lot serial controlled, while
                                                      --the receiving org is not lot controlled.  So bypass
                                                      --the lot check for RMA
						      --ELSIF (l_source_document_code <> 'RMA') THEN
                                                      -- bug 5259803
                                                      ELSIF ((l_source_document_code <> 'RMA')
                                                       AND NOT (l_source_document_code = 'PO' AND l_restrict_rcpt_ser = '2' AND l_curr_status = 4 )) THEN
							IF (l_curr_lot_num IS NOT NULL) THEN
							   --raise error
							   l_progress := 'WMSINB-23472';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   RAISE fnd_api.g_exc_error;
							END IF;
						     END IF;

						     --bug 5168883
						     BEGIN
						       select transaction_type_id
						       into   l_last_transaction_type_id
						       from   mtl_material_transactions
						       where  transaction_id = l_last_transaction_id;
						     EXCEPTION
						       when others then
						         l_last_transaction_type_id := null;
						     END;
						     -- end bug 5168883

						     IF l_restrict_rcpt_ser = '2' THEN
							IF l_curr_status NOT IN (1,4,6) THEN
							   --raise error
							   l_progress := 'WMSINB-23482';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   RAISE fnd_api.g_exc_error;
							END IF;

   /* Bug 6847337:
    * Fix done to allow the re-using of serials after the
    * correction of a PO receipt by handling the transaction type
    * for correction(71) along with return to vendor(36) in
    * the following ELSE condition.
    */
						      ELSE --IF l_restrict_rcpt_ser = '2' THEN
							IF ((l_curr_status NOT IN (1,6))
							    AND NOT (l_curr_status = 4 and
								     (l_source_document_code = 'RMA'
								      OR (l_source_document_code = 'PO'
								          and l_last_transaction_type_id in(36,71))))) THEN --bug 5168883
							   --raise error
							   l_progress := 'WMSINB-23490';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   RAISE fnd_api.g_exc_error;
							END IF;
						     END IF; --IF l_restrict_rcpt_ser = '2' THEN

					       END IF; --IF (L_SOURCE_DOCUMENT_CODE IN
					       --('INVENTORY','REQ') OR l_asn_line_flag = 'Y') THEN

					       --Validate serial/LPN
					       IF l_transaction_type = 'RECEIVE' THEN
						  IF (l_source_document_code IN ('INVENTORY', 'REQ')) then
						     IF (Nvl(l_curr_lpn_id, -9999) <>
							 Nvl(l_lpn_id, -9999)
							 AND
							  ( Nvl(l_curr_status,1) NOT IN (1,5,6)
							    AND NOT (l_restrict_rcpt_ser = '2'and l_curr_status = 4 ) --Bug 5524134 --Bug 14596053 --14057324
					      )
               ) THEN --bug 5235808 changed from 4 to 5
							--raise error
							l_progress := 'WMSINB-23506';
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							RAISE fnd_api.g_exc_error;
						     END IF;
						  END IF;
						ELSE
						  IF (Nvl(l_curr_lpn_id, -9999) <>
						      Nvl(l_lpn_id, -9999)
						      AND Nvl(l_curr_status,1) <> 4) THEN
						     --raise error
						     l_progress := 'WMSINB-23516';
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     RAISE fnd_api.g_exc_error;
						  END IF;
					       END IF;

					       --Validate Serial/Inspection_status
                           /*  Commented for bug 6269102
                          *  To allow the inspection done again
                	  *  on an inspection transaction to succeed
		          *  as it was failing because of the
        		  *  inspection status <> 1

					       IF l_transaction_type IN ('ACCEPT', 'REJECT') THEN
						  IF (Nvl(l_inspection_status, 1) <> 1) THEN
						     --raise error
						     l_progress := 'WMSINB-23527';
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     RAISE fnd_api.g_exc_error;
						  END IF;
						ELS */
                                                -- Bug 9569977: Commenting following since l_serial_entered_on_parent
                                                --              is false
						/*IF l_transaction_type = 'DELIVER' THEN
						  IF (l_routing_header_id = 2) THEN
						     IF l_inspection_status IS NOT NULL AND l_inspection_status = 1 THEN
						       --raise error
							l_progress := 'WMSINB-23536';
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							RAISE fnd_api.g_exc_error;
						     END IF;
						  END IF;
					       END IF;*/

					       --Validate serial/group_mark_id to prevent
					       --entering of duplicate serials

					       IF (Nvl(l_group_mark_id, -99) = -7937) THEN
						  --raise error
						  l_progress := 'WMSINB-23549';
						  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						  fnd_msg_pub.ADD;
						  RAISE fnd_api.g_exc_error;
					       END IF;

					       IF (Nvl(l_curr_status, 1) in (1,6)) THEN
						  --validate and update the attributes.
						  inv_serial_number_pub.validate_update_serial_att
						    (x_return_status     => x_return_status,
						     x_msg_count         => x_msg_count,
						     x_msg_data          => x_msg_data,
						     x_validation_status => l_validation_status,
						     p_serial_number     => l_serial_number,
						     p_organization_id   => l_org_id,
						     p_inventory_item_id => l_item_id,
						     p_serial_att_tbl    => l_serial_attributes_tbl,
						     p_validate_only     => FALSE
						     );

						  IF (l_validation_status <> 'Y'
						      OR x_return_status <> g_ret_sts_success) THEN
						     --raise error
						     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						     fnd_msg_pub.ADD;
						     l_progress := 'WMSINB-22555';
						     RAISE fnd_api.g_exc_error;
						  END IF;
					       END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

					       --UPDATE GROUP_MARK_ID TO -7937
					       IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
						  --raise error
						  l_progress := 'WMSINB-23558';
						  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						  fnd_msg_pub.ADD;
						  RAISE fnd_api.g_exc_error;
					       END IF;

					     ELSE --IF l_serial_exists = 1 THEN
						     IF (l_source_document_code IN ('INVENTORY','REQ')) THEN
							GET_SERIAL_LOT_CTRL_IN_SRC_ORG
							  (L_SHIPMENT_LINE_ID, L_ORG_ID,
							   L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
							   l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

							IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
							     AND l_source_document_code = 'REQ')
							    OR (l_from_org_ser_crtl IN (2,5)
								AND l_source_document_code = 'INVENTORY')
							    ) THEN
							   --raise error
							   l_progress := 'WMSINB-23573';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   RAISE fnd_api.g_exc_error;
							END IF;
						     END IF;

						     IF l_serial_number_control_code = 5 THEN
							--PERFORM SERIAL VALIDATION FOR NEW SERIAL
							--(INCLUDING ATT VALIDATION)
							--CREATE MSN

							inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
												  , p_inventory_item_id => l_item_id
												  , p_organization_id => l_org_id
												  , p_from_serial_number => l_serial_number
												  , p_to_serial_number => l_serial_number
												  , p_initialization_date => SYSDATE
												  , p_completion_date => NULL
												  , p_ship_date => NULL
												  , p_revision => l_item_revision
												  , p_lot_number => NULL
												  , p_current_locator_id => l_loc_id
												  , p_subinventory_code => l_sub_code
												  , p_trx_src_id => NULL
												  , p_unit_vendor_id => NULL
												  , p_vendor_lot_number => NULL
												  , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
												  , p_receipt_issue_type => NULL
												  , p_txn_src_id => NULL
												  , p_txn_src_name => NULL
												  , p_txn_src_type_id => NULL
												  , p_transaction_id => NULL
												  , p_current_status => 1
												  , p_parent_item_id => NULL
							  , p_parent_serial_number => NULL
							  , p_cost_group_id => NULL
							  , p_transaction_action_id => 27
							  , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
							  , p_status_id => NULL
							  , p_inspection_status => NULL
							  , x_object_id => l_object_id
							  , x_return_status => x_return_status
							  , x_msg_count => x_msg_count
							  , x_msg_data => x_msg_data);

							IF (x_return_status <> g_ret_sts_success) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23580';
							   RAISE fnd_api.g_exc_error;
							END IF;

							--validate and update the attributes.
							inv_serial_number_pub.validate_update_serial_att
							  (x_return_status     => x_return_status,
							   x_msg_count         => x_msg_count,
							   x_msg_data          => x_msg_data,
							   x_validation_status => l_validation_status,
							   p_serial_number     => l_serial_number,
							   p_organization_id   => l_org_id,
							   p_inventory_item_id => l_item_id,
							   p_serial_att_tbl    => l_serial_attributes_tbl,
							   p_validate_only     => FALSE
							   );

							IF (l_validation_status <> 'Y'
							    OR x_return_status <> g_ret_sts_success) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23615';
							   RAISE fnd_api.g_exc_error;
							END IF;


							--UPDATE GROUP_MARK_ID TO -7937
							IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
							   --raise error
							   l_progress := 'WMSINB-23622';
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   RAISE fnd_api.g_exc_error;
							END IF;
						      ELSE
							--raise error
							l_progress := 'WMSINB-23629';
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							RAISE fnd_api.g_exc_error;
						     END IF;
					    END IF; --IF l_serial_exists = 1 THEN
					  ELSIF (l_serial_number_control_code = 6 AND
						 l_source_document_code = 'RMA') THEN
						  IF l_serial_exists = 1 THEN
                       --bug#3571808 removed the current_org_id check
                       /*
						     IF ((l_curr_org_id <> l_org_id) and not (l_restrict_rcpt_ser = '2'
											      and l_curr_status = 4 ))  THEN
							--raise error
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							l_progress := 'WMSINB-23642';
							RAISE fnd_api.g_exc_error;
						      ELSE*/
							IF (l_curr_lot_num IS NOT NULL
                         AND (Nvl(l_curr_status,1) NOT IN (1,4) )) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23649';
							   RAISE fnd_api.g_exc_error;
							END IF;
						     --END IF;

						     IF l_curr_status NOT IN (1,4,6) THEN
							--raise error
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							l_progress := 'WMSINB-23658';
							RAISE fnd_api.g_exc_error;
						     END IF;

						     -- see if we need to restrict 4's based on
						     -- inv_restrict_rcpt profile
						     -- REVIEW at CODE REVIEW
						     IF l_restrict_rcpt_ser <> 2 THEN
							l_dummy := '0';
			                                BEGIN
							   SELECT '1'
							     INTO l_dummy
							     FROM dual
							     WHERE exists (SELECT '1'
									   FROM   mtl_serial_numbers
									   WHERE  inventory_item_id = l_item_id
									   AND    current_organization_id = l_org_id
									   AND    current_status IN (1, 4) --Do we need 4 here
									   AND    serial_number = l_serial_number
									   AND    LAST_TXN_SOURCE_TYPE_ID = 12);

							   IF l_dummy <> '0' THEN
							      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							      fnd_msg_pub.ADD;
							      l_progress := 'WMSINB-23682';
							      RAISE fnd_api.g_exc_error;
							   END IF;

							EXCEPTION
							   WHEN no_data_found THEN
							      NULL;
							END;
						     END IF;

						     IF (Nvl(l_group_mark_id, -99) = -7937) THEN
							--raise error
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							l_progress := 'WMSINB-23696';
							RAISE fnd_api.g_exc_error;
						     END IF;

						     IF (Nvl(l_curr_status, 1) in (1,6)) THEN
							--validate and update the attributes.
							inv_serial_number_pub.validate_update_serial_att
							  (x_return_status     => x_return_status,
							   x_msg_count         => x_msg_count,
							   x_msg_data          => x_msg_data,
							   x_validation_status => l_validation_status,
							   p_serial_number     => l_serial_number,
							   p_organization_id   => l_org_id,
							   p_inventory_item_id => l_item_id,
							   p_serial_att_tbl    => l_serial_attributes_tbl,
							   p_validate_only     => FALSE
							   );

							IF (l_validation_status <> 'Y'
							    OR x_return_status <> g_ret_sts_success) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23702';
							   RAISE fnd_api.g_exc_error;
							END IF;
						     END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

						     --UPDATE GROUP_MARK_ID TO -7937
						     IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
							--raise error
							fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							fnd_msg_pub.ADD;
							l_progress := 'WMSINB-23705';
							RAISE fnd_api.g_exc_error;
						     END IF;
						   ELSE --IF l_serial_exists = 1 THEN
							--PERFORM SERIAL VALIDATION FOR NEW SERIAL
							--(INCLUDING ATT VALIDATION)
							--CREATE MSN

							inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
												  , p_inventory_item_id => l_item_id
												  , p_organization_id => l_org_id
												  , p_from_serial_number => l_serial_number
												  , p_to_serial_number => l_serial_number
												  , p_initialization_date => SYSDATE
												  , p_completion_date => NULL
												  , p_ship_date => NULL
												  , p_revision => l_item_revision
												  , p_lot_number => NULL
												  , p_current_locator_id => l_loc_id
												  , p_subinventory_code => l_sub_code
												  , p_trx_src_id => NULL
												  , p_unit_vendor_id => NULL
												  , p_vendor_lot_number => NULL
												  , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
												  , p_receipt_issue_type => NULL
												  , p_txn_src_id => NULL
												  , p_txn_src_name => NULL
												  , p_txn_src_type_id => NULL
												  , p_transaction_id => NULL
												  , p_current_status => 1
												  , p_parent_item_id => NULL
							  , p_parent_serial_number => NULL
							  , p_cost_group_id => NULL
							  , p_transaction_action_id => 27
							  , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
							  , p_status_id => NULL
							  , p_inspection_status => NULL
							  , x_object_id => l_object_id
							  , x_return_status => x_return_status
							  , x_msg_count => x_msg_count
							  , x_msg_data => x_msg_data);

							IF (x_return_status <> g_ret_sts_success) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23710';
							   RAISE fnd_api.g_exc_error;
							END IF;

							--validate and update the attributes.
							inv_serial_number_pub.validate_update_serial_att
							  (x_return_status     => x_return_status,
							   x_msg_count         => x_msg_count,
							   x_msg_data          => x_msg_data,
							   x_validation_status => l_validation_status,
							   p_serial_number     => l_serial_number,
							   p_organization_id   => l_org_id,
							   p_inventory_item_id => l_item_id,
							   p_serial_att_tbl    => l_serial_attributes_tbl,
							   p_validate_only     => FALSE
							   );

							IF (l_validation_status <> 'Y'
							    OR x_return_status <> g_ret_sts_success) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23745';
							   RAISE fnd_api.g_exc_error;
							END IF;

							--UPDATE GROUP_MARK_ID TO -7937
							IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
							   --raise error
							   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
							   fnd_msg_pub.ADD;
							   l_progress := 'WMSINB-23752';
							   RAISE fnd_api.g_exc_error;
							END IF;
						  END IF; --IF l_serial_exists = 1 THEN
					 END IF; --IF l_serial_number_control_code IN (2,5) THEN
				       ELSE --IF NOT L_SERIAL_ENTERED_ON_PARENT THEN
		                          BEGIN
					     SELECT '1'
					       INTO L_DUMMY
					       FROM RCV_SERIALS_SUPPLY
					       WHERE TRANSACTION_ID = L_PARENT_TRANSACTION_ID
					       AND SERIAL_NUM = L_SERIAL_NUMBER;

					     IF (l_curr_status <> 7) THEN
						--raise error
						fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						fnd_msg_pub.ADD;
						l_progress := 'WMSINB-23769';
						RAISE fnd_api.g_exc_error;
					     END IF;

					     --Validate Serial/Inspection_status
		        /*  Commented for bug 6269102
                          *  To allow the inspection done again
                	  *  on an inspection transaction to succeed
		          *  as it was failing because of the
        		  *  inspection status <> 1

					     IF l_transaction_type IN ('ACCEPT', 'REJECT') THEN
						IF (Nvl(l_inspection_status, 1) <> 1) THEN
						   --raise error
						   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						   fnd_msg_pub.ADD;
						   l_progress := 'WMSINB-23779';
						   RAISE fnd_api.g_exc_error;
						END IF;
					      ELS */
					      IF l_transaction_type = 'DELIVER' THEN
						IF (l_routing_header_id = 2) THEN
						   IF l_inspection_status IS NOT NULL AND l_inspection_status = 1 THEN
						      --raise error
						      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						      fnd_msg_pub.ADD;
						      l_progress := 'WMSINB-23788';
						      RAISE fnd_api.g_exc_error;
						   END IF;
						END IF;
					     END IF;

					     --Validate serial/group_mark_id to prevent
					     --entering of duplicate serials

					     IF (Nvl(l_group_mark_id, -99) = -7937) THEN
						--raise error
						fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						fnd_msg_pub.ADD;
						l_progress := 'WMSINB-23801';
						RAISE fnd_api.g_exc_error;
					     END IF;

					     --UPDATE GROUP_MARK_ID TO -7937
					     IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
						--raise error
						fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						fnd_msg_pub.ADD;
						l_progress := 'WMSINB-23810';
						RAISE fnd_api.g_exc_error;
					     END IF;
					  EXCEPTION
					     WHEN NO_DATA_FOUND THEN
						-- RAISE ERROR
						fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
						fnd_msg_pub.ADD;
						l_progress := 'WMSINB-23818';
						RAISE fnd_api.g_exc_error;
					  END;
				      END IF; --IF NOT L_SERIAL_ENTERED_ON_PARENT THEN
				   END LOOP; -- FOR 1..L_SERIAL_QUANTITY
				END LOOP; --FETCH C_MSNT INTO L_MSNT_REC;

				CLOSE c_msnt;

				IF (l_num_msnt_recs > 0) THEN
				   IF l_tot_msnt_serial_qty <> l_rti_primary_qty THEN
				      --raise error
				      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				      fnd_msg_pub.ADD;
				      l_progress := 'WMSINB-23832';
				      RAISE fnd_api.g_exc_error;
				   END IF;
				 ELSE
				   IF (l_transaction_type = 'DELIVER'
				       OR Nvl(l_auto_transact_code,'@@@@') = 'DELIVER') THEN

				      IF l_source_document_code IN ('INVENTORY', 'REQ') THEN
					 GET_SERIAL_LOT_CTRL_IN_SRC_ORG
					   (L_SHIPMENT_LINE_ID, L_ORG_ID,
					    L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
					    l_from_org_rev_ctrl,
					    X_RETURN_STATUS, X_MSG_COUNT,
					    x_msg_data);
				      END IF;

				      IF (l_serial_number_control_code IN (2,5)
					  OR (l_serial_number_control_code = 6
					      AND l_source_document_code IN ('RMA'))
					  OR (l_serial_number_control_code = 6
					      AND l_source_document_code = 'INVENTORY'
					      AND l_from_org_ser_crtl NOT IN (1, 6))
					  --BUG 3644289: Do the following check for INTREQ
					  OR (l_serial_number_control_code = 6
					      AND l_from_org_ser_crtl IN (2,5,6)
					      AND l_source_document_code = 'REQ'))
					THEN
					 --raise error
					 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
					 fnd_msg_pub.ADD;
					 l_progress := 'WMSINB-23840';
					 RAISE fnd_api.g_exc_error;
				      END IF;
				    ELSIF (serial_entered_on_parent(l_parent_transaction_id)) THEN
				      --raise error
				      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
				      fnd_msg_pub.ADD;
				      l_progress := 'WMSINB-23846';
				      RAISE fnd_api.g_exc_error;
				   END IF;
				END IF;

      END IF; -- IF (L_LOT_CONTROL_CODE = 2) THEN
    END IF;--IF (l_transaction_type IN ('RECEIVE','ACCEPT','REJECT','TRANSFER','DELIVER')) THEN

    --Validate lot/serial for ASN import.

    IF (l_transaction_type = 'SHIP' AND l_source_document_code = 'PO') THEN
    -- opm change bug# 3061052 added l_opm_lot_ctl check

    /*INVCONV, Remove the separate lot control check for OPM items.
      To be checked only once for all items.Punit Kumar */

      IF (l_lot_control_code = 2 /* OR l_opm_lot_ctl = 1  */) THEN
        IF (l_debug = 1) THEN
          print_debug('VALIDATE_LOT_SERIAL_INFO: Lot Controlled :'||l_progress, 1);
          l_progress := 'WMSINB-23861';
        END IF;

        l_num_mtlt_recs := 0;
        l_tot_mtlt_prim_qty := 0;
        l_tot_mtlt_trans_qty := 0; -- Bug# 4225766

        OPEN C_MTLT(L_RTI_ID);
        LOOP
          FETCH C_MTLT INTO L_MTLT_REC;
          EXIT WHEN C_MTLT%NOTFOUND;

       /* INVCONV , get L_MTLT_REC values into l_mln_rec which shall be passed to INV_NEW_LOT
          for lot creation */
          IF (l_debug = 1) THEN
             print_debug('INVCONV, Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);
          END IF;

         	l_mln_rec.LOT_NUMBER                := L_MTLT_REC.LOT_NUMBER                    ;
          l_mln_rec.LAST_UPDATE_DATE          := SYSDATE                                  ;
          l_mln_rec.LAST_UPDATED_BY           := L_MTLT_REC.LAST_UPDATED_BY               ;
          l_mln_rec.CREATION_DATE             := SYSDATE                                  ;
          l_mln_rec.CREATED_BY                := L_MTLT_REC.CREATED_BY                    ;
          l_mln_rec.LAST_UPDATE_LOGIN         := L_MTLT_REC.LAST_UPDATE_LOGIN             ;
          l_mln_rec.EXPIRATION_DATE           := L_MTLT_REC.LOT_EXPIRATION_DATE               ;
          l_mln_rec.ATTRIBUTE_CATEGORY        := L_MTLT_REC.ATTRIBUTE_CATEGORY            ;
          l_mln_rec.ATTRIBUTE1                := L_MTLT_REC.ATTRIBUTE1                    ;
          l_mln_rec.ATTRIBUTE2                := L_MTLT_REC.ATTRIBUTE2                    ;
          l_mln_rec.ATTRIBUTE3                := L_MTLT_REC.ATTRIBUTE3                    ;
          l_mln_rec.ATTRIBUTE4                := L_MTLT_REC.ATTRIBUTE4                    ;
          l_mln_rec.ATTRIBUTE5                := L_MTLT_REC.ATTRIBUTE5                    ;
          l_mln_rec.ATTRIBUTE6                := L_MTLT_REC.ATTRIBUTE6                    ;
          l_mln_rec.ATTRIBUTE7                := L_MTLT_REC.ATTRIBUTE7                    ;
          l_mln_rec.ATTRIBUTE8                := L_MTLT_REC.ATTRIBUTE8                    ;
          l_mln_rec.ATTRIBUTE9                := L_MTLT_REC.ATTRIBUTE9                    ;
          l_mln_rec.ATTRIBUTE10               := L_MTLT_REC.ATTRIBUTE10                   ;
          l_mln_rec.ATTRIBUTE11               := L_MTLT_REC.ATTRIBUTE11                   ;
          l_mln_rec.ATTRIBUTE12               := L_MTLT_REC.ATTRIBUTE12                   ;
          l_mln_rec.ATTRIBUTE13               := L_MTLT_REC.ATTRIBUTE13                   ;
          l_mln_rec.ATTRIBUTE14               := L_MTLT_REC.ATTRIBUTE14                   ;
          l_mln_rec.ATTRIBUTE15               := L_MTLT_REC.ATTRIBUTE15                   ;
          l_mln_rec.REQUEST_ID                := L_MTLT_REC.REQUEST_ID                    ;
          l_mln_rec.PROGRAM_APPLICATION_ID    := L_MTLT_REC.PROGRAM_APPLICATION_ID        ;
          l_mln_rec.PROGRAM_ID                := L_MTLT_REC.PROGRAM_ID                    ;
          l_mln_rec.PROGRAM_UPDATE_DATE       := L_MTLT_REC.PROGRAM_UPDATE_DATE           ;
          l_mln_rec.DESCRIPTION               := L_MTLT_REC.DESCRIPTION                   ;
          l_mln_rec.VENDOR_NAME               := L_MTLT_REC.VENDOR_NAME                   ;
          l_mln_rec.SUPPLIER_LOT_NUMBER       := L_MTLT_REC.SUPPLIER_LOT_NUMBER           ;
          l_mln_rec.GRADE_CODE                := L_MTLT_REC.GRADE_CODE                    ;
          l_mln_rec.ORIGINATION_DATE          := L_MTLT_REC.ORIGINATION_DATE              ;
          l_mln_rec.DATE_CODE                 := L_MTLT_REC.DATE_CODE                     ;
          l_mln_rec.STATUS_ID                 := L_MTLT_REC.STATUS_ID                     ;
          l_mln_rec.CHANGE_DATE               := L_MTLT_REC.CHANGE_DATE                   ;
          l_mln_rec.AGE                       := L_MTLT_REC.AGE                           ;
          l_mln_rec.RETEST_DATE               := L_MTLT_REC.RETEST_DATE                   ;
          l_mln_rec.MATURITY_DATE             := L_MTLT_REC.MATURITY_DATE                 ;
          l_mln_rec.LOT_ATTRIBUTE_CATEGORY    := L_MTLT_REC.LOT_ATTRIBUTE_CATEGORY        ;
          l_mln_rec.ITEM_SIZE                 := L_MTLT_REC.ITEM_SIZE                     ;
          l_mln_rec.COLOR                     := L_MTLT_REC.COLOR                         ;
          l_mln_rec.VOLUME                    := L_MTLT_REC.VOLUME                        ;
          l_mln_rec.VOLUME_UOM                := L_MTLT_REC.VOLUME_UOM                    ;
          l_mln_rec.PLACE_OF_ORIGIN           := L_MTLT_REC.PLACE_OF_ORIGIN               ;
          l_mln_rec.BEST_BY_DATE              := L_MTLT_REC.BEST_BY_DATE                  ;
          l_mln_rec.LENGTH                    := L_MTLT_REC.LENGTH                        ;
          l_mln_rec.LENGTH_UOM                := L_MTLT_REC.LENGTH_UOM                    ;
          l_mln_rec.RECYCLED_CONTENT          := L_MTLT_REC.RECYCLED_CONTENT              ;
          l_mln_rec.THICKNESS                 := L_MTLT_REC.THICKNESS                     ;
          l_mln_rec.THICKNESS_UOM             := L_MTLT_REC.THICKNESS_UOM                 ;
          l_mln_rec.WIDTH                     := L_MTLT_REC.WIDTH                         ;
          l_mln_rec.WIDTH_UOM                 := L_MTLT_REC.WIDTH_UOM                     ;
          l_mln_rec.CURL_WRINKLE_FOLD         := L_MTLT_REC.CURL_WRINKLE_FOLD             ;
          l_mln_rec.C_ATTRIBUTE1              := L_MTLT_REC.C_ATTRIBUTE1                  ;
          l_mln_rec.C_ATTRIBUTE2              := L_MTLT_REC.C_ATTRIBUTE2                  ;
          l_mln_rec.C_ATTRIBUTE3              := L_MTLT_REC.C_ATTRIBUTE3                  ;
          l_mln_rec.C_ATTRIBUTE4              := L_MTLT_REC.C_ATTRIBUTE4                  ;
          l_mln_rec.C_ATTRIBUTE5              := L_MTLT_REC.C_ATTRIBUTE5                  ;
          l_mln_rec.C_ATTRIBUTE6              := L_MTLT_REC.C_ATTRIBUTE6                  ;
          l_mln_rec.C_ATTRIBUTE7              := L_MTLT_REC.C_ATTRIBUTE7                  ;
          l_mln_rec.C_ATTRIBUTE8              := L_MTLT_REC.C_ATTRIBUTE8                  ;
          l_mln_rec.C_ATTRIBUTE9              := L_MTLT_REC.C_ATTRIBUTE9                  ;
          l_mln_rec.C_ATTRIBUTE10             := L_MTLT_REC.C_ATTRIBUTE10                 ;
          l_mln_rec.C_ATTRIBUTE11             := L_MTLT_REC.C_ATTRIBUTE11                 ;
          l_mln_rec.C_ATTRIBUTE12             := L_MTLT_REC.C_ATTRIBUTE12                 ;
          l_mln_rec.C_ATTRIBUTE13             := L_MTLT_REC.C_ATTRIBUTE13                 ;
          l_mln_rec.C_ATTRIBUTE14             := L_MTLT_REC.C_ATTRIBUTE14                 ;
          l_mln_rec.C_ATTRIBUTE15             := L_MTLT_REC.C_ATTRIBUTE15                 ;
          l_mln_rec.C_ATTRIBUTE16             := L_MTLT_REC.C_ATTRIBUTE16                 ;
          l_mln_rec.C_ATTRIBUTE17             := L_MTLT_REC.C_ATTRIBUTE17                 ;
          l_mln_rec.C_ATTRIBUTE18             := L_MTLT_REC.C_ATTRIBUTE18                 ;
          l_mln_rec.C_ATTRIBUTE19             := L_MTLT_REC.C_ATTRIBUTE19                 ;
          l_mln_rec.C_ATTRIBUTE20             := L_MTLT_REC.C_ATTRIBUTE20                 ;
          l_mln_rec.D_ATTRIBUTE1              := L_MTLT_REC.D_ATTRIBUTE1                  ;
          l_mln_rec.D_ATTRIBUTE2              := L_MTLT_REC.D_ATTRIBUTE2                  ;
          l_mln_rec.D_ATTRIBUTE3              := L_MTLT_REC.D_ATTRIBUTE3                  ;
          l_mln_rec.D_ATTRIBUTE4              := L_MTLT_REC.D_ATTRIBUTE4                  ;
          l_mln_rec.D_ATTRIBUTE5              := L_MTLT_REC.D_ATTRIBUTE5                  ;
          l_mln_rec.D_ATTRIBUTE6              := L_MTLT_REC.D_ATTRIBUTE6                  ;
          l_mln_rec.D_ATTRIBUTE7              := L_MTLT_REC.D_ATTRIBUTE7                  ;
          l_mln_rec.D_ATTRIBUTE8              := L_MTLT_REC.D_ATTRIBUTE8                  ;
          l_mln_rec.D_ATTRIBUTE9              := L_MTLT_REC.D_ATTRIBUTE9                  ;
          l_mln_rec.D_ATTRIBUTE10             := L_MTLT_REC.D_ATTRIBUTE10                 ;
          l_mln_rec.N_ATTRIBUTE1              := L_MTLT_REC.N_ATTRIBUTE1                  ;
          l_mln_rec.N_ATTRIBUTE2              := L_MTLT_REC.N_ATTRIBUTE2                  ;
          l_mln_rec.N_ATTRIBUTE3              := L_MTLT_REC.N_ATTRIBUTE3                  ;
          l_mln_rec.N_ATTRIBUTE4              := L_MTLT_REC.N_ATTRIBUTE4                  ;
          l_mln_rec.N_ATTRIBUTE5              := L_MTLT_REC.N_ATTRIBUTE5                  ;
          l_mln_rec.N_ATTRIBUTE6              := L_MTLT_REC.N_ATTRIBUTE6                  ;
          l_mln_rec.N_ATTRIBUTE7              := L_MTLT_REC.N_ATTRIBUTE7                  ;
          l_mln_rec.N_ATTRIBUTE8              := L_MTLT_REC.N_ATTRIBUTE8                  ;
          l_mln_rec.N_ATTRIBUTE9              := L_MTLT_REC.N_ATTRIBUTE9                  ;
          l_mln_rec.N_ATTRIBUTE10             := L_MTLT_REC.N_ATTRIBUTE10                 ;
          l_mln_rec.VENDOR_ID                 := L_MTLT_REC.VENDOR_ID                     ;
          l_mln_rec.TERRITORY_CODE            := L_MTLT_REC.TERRITORY_CODE                ;
          l_mln_rec.PARENT_LOT_NUMBER         := L_MTLT_REC.PARENT_LOT_NUMBER             ;
          l_mln_rec.ORIGINATION_TYPE          := L_MTLT_REC.ORIGINATION_TYPE              ;
          l_mln_rec.EXPIRATION_ACTION_DATE    := L_MTLT_REC.EXPIRATION_ACTION_DATE        ;
          l_mln_rec.EXPIRATION_ACTION_CODE    := L_MTLT_REC.EXPIRATION_ACTION_CODE        ;
          l_mln_rec.HOLD_DATE                 := L_MTLT_REC.HOLD_DATE                     ;

         /*end , INVCONV*/


          L_NUM_MTLT_RECS := L_NUM_MTLT_RECS + 1;
          l_tot_mtlt_prim_qty := l_tot_mtlt_prim_qty + l_mtlt_rec.primary_quantity;
          l_tot_mtlt_trans_qty := l_tot_mtlt_trans_qty + l_mtlt_rec.transaction_quantity; -- Bug# 4225766

          IF (l_debug = 1) THEN
            print_debug('VALIDATE_LOT_SERIAL_INFO: LOT NUMBER: '||l_mtlt_rec.lot_number||': '||l_progress, 1);
            print_debug('VALIDATE_LOT_SERIAL_INFO: LOT PRIMARY QUANTITY: '||l_mtlt_rec.primary_quantity||': '||l_progress, 1);
            print_debug('INVCONV , Finished Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);		 l_progress := 'WMSINB-23879';
            l_progress := 'WMSINB-23879';
          END IF;

          BEGIN
            /* INVCONV, Remove OPM specific ic_lots_mst logic
              Validation of Lot existence for OPM items shall be done from
              MTL_LOT_NUMBERS as is done for discrete items.
              If it exists then we shall validate its parent lot also.
              Remove OPM fork.Add parent_lot_number in discrete query.Punit Kumar */

            /*IF (l_discrete_transaction) THEN		 */
            SELECT 1,parent_lot_number
                 INTO L_LOT_EXISTS ,l_parent_lot_number
                 FROM MTL_LOT_NUMBERS
                 WHERE ORGANIZATION_ID = L_ORG_ID
                 AND   INVENTORY_ITEM_ID = L_ITEM_ID
                 AND LOT_NUMBER = Ltrim(Rtrim(L_MTLT_REC.lot_number));

                /* ELSE -- opm change bug# 3061052 --IF (l_discrete_transaction) THEN
                  IF Ltrim(Rtrim(L_MTLT_REC.sublot_num)) IS NOT NULL THEN
                     SELECT 1, LOT_ID
                 INTO L_LOT_EXISTS , l_opm_lot_id
                 FROM IC_LOTS_MST
                 WHERE ITEM_ID = l_opm_item_id
                 AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
                 AND SUBLOT_NO = Ltrim(Rtrim(L_MTLT_REC.sublot_num)) ;
                   ELSE
                     SELECT 1, LOT_ID
                 INTO L_LOT_EXISTS , l_opm_lot_id
                 FROM IC_LOTS_MST
                 WHERE ITEM_ID = l_opm_item_id
                 AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
                 AND SUBLOT_NO IS NULL ;
                  END IF;
               END IF; --IF (l_discrete_transaction) THEN
              */
          EXCEPTION
             WHEN NO_DATA_FOUND THEN
                L_LOT_EXISTS := 0;
          END;

          IF (l_debug = 1) THEN
            print_debug('VALIDATE_LOT_SERIAL_INFO: LOT EXISTS: '||l_lot_exists||' : '||l_progress, 1);
            print_debug('INVCONV, Removing OPM specific fork :'||l_progress,1);
            l_progress := 'WMSINB-23915';
          END IF;

          IF L_LOT_EXISTS = 1 THEN

            /*INVCONV , validating for parent lot, Punit Kumar */
            IF  L_MTLT_REC.parent_lot_number IS NOT NULL THEN
               IF L_MTLT_REC.parent_lot_number <> l_parent_lot_number THEN
                  fnd_message.set_name ('INV' , 'INV_CL_PARENT_INVALID' );
             fnd_msg_pub.ADD;
                  RAISE fnd_api.g_exc_error;
               END IF;
            ELSE
               L_MTLT_REC.parent_lot_number := l_parent_lot_number;
            END IF;
            /*end , INVCONV */

            /*INVCONV , Remove the process specific call as now we shall validate the proces
              attributes for discrete items too. Punit Kumar */

             /*IF (l_discrete_transaction) THEN */
              /* end , INVCONV */

               /* The below code was already commented.  It has nothing to do with INVCONV */

              -- This is NOT required for a SHIP transaction.
              -- perform material status check
              --INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
              --X_MSG_COUNT => X_MSG_COUNT,
              --X_MSG_DATA => X_MSG_DATA,
              --X_VALIDATION_STATUS => L_VALIDATION_STATUS,
              --P_TRANSACTION_TYPE_ID => 18,
              --P_ORGANIZATION_ID => L_ORG_ID,
              --P_INVENTORY_ITEM_ID => L_ITEM_ID,
              --P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
              --P_SUBINVENTORY_CODE => l_sub_code,
              --P_LOCATOR_ID => l_loc_id,
              --P_STATUS_ID => NULL);
              --IF X_RETURN_STATUS <> 'S' THEN
              --RAISE ERROR
              --l_progress := 'WMSINB-23934';
              --RAISE fnd_api.g_exc_error;
              --END IF;

              --IF (l_debug = 1) THEN
              --print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
              --l_progress := 'WMSINB-23940';
              --END IF;

              --IF L_VALIDATION_STATUS <> 'Y' THEN
              --RAISE ERROR
              --l_progress := 'WMSINB-23945';
              --RAISE fnd_api.g_exc_error;
              --END IF;

            /* end , The above code was already commented.  It has nothing to do with INVCONV */

            NULL;

             /* INVCONV */

          /*  ELSE --IF (l_discrete_transaction) THEN
              -- opm change bug# 3061052
              gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                       p_init_msg_lst	 	=> FND_API.G_FALSE,
                       p_mtlt_rowid		=> l_mtlt_rec.rowid,
                       p_new_lot	 	=> 'N',
                       p_opm_item_id		=> l_opm_item_id,
                       p_item_no		=> l_item_no,
                       p_lots_specified_on_parent => 'N',
                       p_lot_id		=> l_opm_lot_id,
                       x_return_status 	=> x_return_status,
                       x_msg_data      	=> x_msg_data,
                       x_msg_count     	=> x_msg_count
                       );

               end , INVCONV */

            /*INVCONV ,*/
            IF (l_debug = 1) THEN
               print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
            END IF;

            INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );
            /*INVCONV ,*/
            IF (l_debug = 1) THEN
               print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
               print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
            END IF;

            IF X_RETURN_STATUS <> 'S' THEN
               --RAISE ERROR
               l_progress := 'WMSINB-23964';
               RAISE fnd_api.g_exc_error;
            END IF;

            IF (l_debug = 1) THEN
               print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
            END IF;

         /*END IF; --IF (l_discrete_transaction) THEN */

          ELSE --IF L_LOT_EXISTS = 1 THEN


            /* IF (l_discrete_transaction) THEN
              --call CREATE_INV_LOT
              --FOR l_inv_att_index IN 1..15 LOOP
              -- l_inv_attributes_tbl(l_inv_att_index) := NULL;
              --END LOOP;

              l_c_attributes_tbl(1)  := l_mtlt_rec.c_attribute1;
              l_c_attributes_tbl(2)  := l_mtlt_rec.c_attribute2;
              l_c_attributes_tbl(3)  := l_mtlt_rec.c_attribute3;
              l_c_attributes_tbl(4)  := l_mtlt_rec.c_attribute4;
              l_c_attributes_tbl(5)  := l_mtlt_rec.c_attribute5;
              l_c_attributes_tbl(6)  := l_mtlt_rec.c_attribute6;
              l_c_attributes_tbl(7)  := l_mtlt_rec.c_attribute7;
              l_c_attributes_tbl(8)  := l_mtlt_rec.c_attribute8;
              l_c_attributes_tbl(9)  := l_mtlt_rec.c_attribute9;
              l_c_attributes_tbl(10) := l_mtlt_rec.c_attribute10;
              l_c_attributes_tbl(11) := l_mtlt_rec.c_attribute11;
              l_c_attributes_tbl(12) := l_mtlt_rec.c_attribute12;
              l_c_attributes_tbl(13) := l_mtlt_rec.c_attribute13;
              l_c_attributes_tbl(14) := l_mtlt_rec.c_attribute14;
              l_c_attributes_tbl(15) := l_mtlt_rec.c_attribute15;
              l_c_attributes_tbl(16) := l_mtlt_rec.c_attribute16;
              l_c_attributes_tbl(17) := l_mtlt_rec.c_attribute17;
              l_c_attributes_tbl(18) := l_mtlt_rec.c_attribute18;
              l_c_attributes_tbl(19) := l_mtlt_rec.c_attribute19;
              l_c_attributes_tbl(20) := l_mtlt_rec.c_attribute20;
              l_d_attributes_tbl(1)  := l_mtlt_rec.d_attribute1;
              l_d_attributes_tbl(2)  := l_mtlt_rec.d_attribute2;
              l_d_attributes_tbl(3)  := l_mtlt_rec.d_attribute3;
              l_d_attributes_tbl(4)  := l_mtlt_rec.d_attribute4;
              l_d_attributes_tbl(5)  := l_mtlt_rec.d_attribute5;
              l_d_attributes_tbl(6)  := l_mtlt_rec.d_attribute6;
              l_d_attributes_tbl(7)  := l_mtlt_rec.d_attribute7;
              l_d_attributes_tbl(8)  := l_mtlt_rec.d_attribute8;
              l_d_attributes_tbl(9)  := l_mtlt_rec.d_attribute9;
              l_d_attributes_tbl(10) := l_mtlt_rec.d_attribute10;
              l_n_attributes_tbl(1)  := l_mtlt_rec.n_attribute1;
              l_n_attributes_tbl(2)  := l_mtlt_rec.n_attribute2;
              l_n_attributes_tbl(3)  := l_mtlt_rec.n_attribute3;
              l_n_attributes_tbl(4)  := l_mtlt_rec.n_attribute4;
              l_n_attributes_tbl(5)  := l_mtlt_rec.n_attribute5;
              l_n_attributes_tbl(6)  := l_mtlt_rec.n_attribute6;
              l_n_attributes_tbl(7)  := l_mtlt_rec.n_attribute7;
              l_n_attributes_tbl(8)  := l_mtlt_rec.n_attribute8;
              l_n_attributes_tbl(9)  := l_mtlt_rec.n_attribute9;
              l_n_attributes_tbl(10) := l_mtlt_rec.n_attribute10;

             --Bug #3187688
             --Populate the INV attributes table and pass the attribute cateogry
             l_inv_attributes_tbl(1)  := l_mtlt_rec.attribute1;
             l_inv_attributes_tbl(2)  := l_mtlt_rec.attribute2;
             l_inv_attributes_tbl(3)  := l_mtlt_rec.attribute3;
             l_inv_attributes_tbl(4)  := l_mtlt_rec.attribute4;
             l_inv_attributes_tbl(5)  := l_mtlt_rec.attribute5;
             l_inv_attributes_tbl(6)  := l_mtlt_rec.attribute6;
             l_inv_attributes_tbl(7)  := l_mtlt_rec.attribute7;
             l_inv_attributes_tbl(8)  := l_mtlt_rec.attribute8;
             l_inv_attributes_tbl(9)  := l_mtlt_rec.attribute9;
             l_inv_attributes_tbl(10) := l_mtlt_rec.attribute10;
             l_inv_attributes_tbl(11) := l_mtlt_rec.attribute11;
             l_inv_attributes_tbl(12) := l_mtlt_rec.attribute12;
             l_inv_attributes_tbl(13) := l_mtlt_rec.attribute13;
             l_inv_attributes_tbl(14) := l_mtlt_rec.attribute14;
             l_inv_attributes_tbl(15) := l_mtlt_rec.attribute15;

              inv_lot_api_pub.create_inv_lot(x_return_status => x_return_status
                     , x_msg_count => x_msg_count
                     , x_msg_data => x_msg_data
                     , p_inventory_item_id => l_item_id
                     , p_organization_id => l_org_id
                     , p_lot_number => l_mtlt_rec.lot_number
                     , p_expiration_date => l_mtlt_rec.lot_expiration_date
                     , p_disable_flag => NULL
                     , p_attribute_category => l_mtlt_rec.attribute_category
                     , p_lot_attribute_category => l_mtlt_rec.lot_attribute_category
                     , p_attributes_tbl => l_inv_attributes_tbl
                     , p_c_attributes_tbl => l_c_attributes_tbl
                     , p_n_attributes_tbl => l_n_attributes_tbl
                     , p_d_attributes_tbl => l_d_attributes_tbl
                     , p_grade_code => l_mtlt_rec.grade_code
                     , p_origination_date => l_mtlt_rec.origination_date
                     , p_date_code => l_mtlt_rec.date_code
                     , p_status_id => l_mtlt_rec.status_id
                     , p_change_date => l_mtlt_rec.change_date
                     , p_age => l_mtlt_rec.age
                     , p_retest_date => l_mtlt_rec.retest_date
                , p_maturity_date => l_mtlt_rec.maturity_date
                , p_item_size => l_mtlt_rec.item_size
                , p_color => l_mtlt_rec.color
                , p_volume => l_mtlt_rec.volume
                , p_volume_uom => l_mtlt_rec.volume_uom
                , p_place_of_origin => l_mtlt_rec.place_of_origin
                , p_best_by_date => l_mtlt_rec.best_by_date
                , p_length => l_mtlt_rec.Length
                , p_length_uom => l_mtlt_rec.length_uom
                , p_recycled_content => l_mtlt_rec.recycled_content
                , p_thickness => l_mtlt_rec.thickness
                , p_thickness_uom => l_mtlt_rec.thickness_uom
                , p_width => l_mtlt_rec.width
                , p_width_uom => l_mtlt_rec.width_uom
                , p_territory_code => l_mtlt_rec.territory_code
                , p_supplier_lot_number => l_mtlt_rec.supplier_lot_number
                , p_vendor_name => l_mtlt_rec.vendor_name
                , p_source => inv_lot_api_pub.inv);

              IF (x_return_status <> 'S') THEN
                 --raise error
                 l_progress := 'WMSINB-24062';
                 RAISE fnd_api.g_exc_error;
              END IF;

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CREATED: '||l_progress, 1);
                 l_progress := 'WMSINB-24068';
              END IF;
            ELSE --IF (l_discrete_transaction) THEN
              -- opm change bug# 3061052
              gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                       p_init_msg_lst	 	=> FND_API.G_FALSE,
                       p_mtlt_rowid		=> l_mtlt_rec.rowid,
                       p_new_lot	 	=> 'Y',
                       p_opm_item_id		=> l_opm_item_id,
                       p_item_no		=> l_item_no,
                       p_lots_specified_on_parent => 'N',
                       p_lot_id		=> l_opm_lot_id,
                       x_return_status 	=> x_return_status,
                       x_msg_data      	=> x_msg_data,
                       x_msg_count     	=> x_msg_count
                       );
              IF X_RETURN_STATUS <> 'S' THEN
                 --RAISE ERROR
                 l_progress := 'WMSINB-24086';
                 RAISE fnd_api.g_exc_error;
              END IF;

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CREATED: '||x_return_status||' : '||l_progress, 1);
              END IF;
           END IF; --IF (l_discrete_transaction) THEN


            /*INVCONV , Perform lot validations and create the new lot.
               Call Lot Create API INV_ROI_INTEGRATION_GRP.INV_NEW_LOT to create the new lot.
               This shall also create lot specific conversions after creating the new Lot.
			      This replaces the existing procedure INV_LOT_API_PUB.CREATE_INV_LOT to create NEW LOT
               Punit Kumar*/

            /*INVCONV ,*/
            IF (l_debug = 1) THEN
                print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
            END IF;

            INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                         x_return_status      		   => x_return_status
                                                         ,x_msg_data           		   => x_msg_data
                                                         ,x_msg_count          		   => x_msg_count
                                                        ,p_api_version	               => 1.0
                                                        ,p_init_msg_lst	               => FND_API.G_FALSE
                                                        ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                        ,p_transaction_type_id 	      => l_transaction_type_id
                                                        ,p_new_lot			            => 'Y'
                                                        ,p_item_id	 		            => l_item_id
                                                        ,p_to_organization_id		      => L_ORG_ID
                                                        ,p_lot_number			         => L_MTLT_REC.lot_number
                                                        ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                        ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                                        ,x_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                                        ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                        ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                        ,p_transaction_unit_of_measure => l_rti_UNIT_OF_MEASURE
                                                        ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                        ,p_OE_ORDER_HEADER_ID	         => l_OE_ORDER_HEADER_ID
                                                        ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                        ,p_rti_id	                     => L_RTI_ID
                                                        ,p_revision             	      => l_item_revision
                                                        ,p_subinventory_code  	      => L_SUB_CODE
                                                        ,p_locator_id           	      => l_loc_id
                                                        ,p_transaction_type           => l_transaction_type
                                                        ,p_parent_txn_type            => l_parent_txn_type
                                                        ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                        );
            /*INVCONV ,*/
            IF (l_debug = 1) THEN
               print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
               print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
            END IF;

            IF (x_return_status <> 'S') THEN
               --raise error
               l_progress := 'WMSINB-24062';
               RAISE fnd_api.g_exc_error;
            END IF;

            /*INVCONV ,*/
            IF (l_debug = 1) THEN
               print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
            END IF;

            INV_ROI_INTEGRATION_GRP.INV_NEW_LOT(
                                                x_return_status      		   => x_return_status
                                               ,x_msg_count          		   => x_msg_count
                                               ,x_msg_data           		   => x_msg_data
                                               ,p_api_version	               => 1.0
                                               ,p_init_msg_lst	               => FND_API.G_FALSE
                                               ,p_source_document_code			=> L_SOURCE_DOCUMENT_CODE
                                               ,p_item_id				         => l_item_id
                                               ,p_from_organization_id			=> L_FROM_ORG_ID
                                               ,p_to_organization_id	         => L_ORG_ID
                                               ,p_lot_number				      => L_MTLT_REC.lot_number
                                               ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                               ,p_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                               ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                               ,p_primary_unit_of_measure	   => l_rti_PRIMARY_UNIT_OF_MEASURE
                                               ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                               ,p_uom_code	                  => l_rti_UOM_CODE
                                               ,p_secondary_uom_code	         => l_rti_SECONDARY_UOM_CODE
                                               ,p_reason_id	                  => L_MTLT_REC.REASON_ID
                                               ,P_MLN_REC                     => L_MLN_REC
                                               ,p_mtlt_rowid	               => L_MTLT_REC.ROWID
                                                );
             /*INVCONV ,*/
             IF (l_debug = 1) THEN
                print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_NEW_LOT return status: '||x_return_status||' : '||l_progress, 1);
             END IF;

            IF X_RETURN_STATUS <> 'S' THEN
               --RAISE ERROR
               l_progress := 'WMSINB-24086';
               RAISE fnd_api.g_exc_error;
            END IF;

            IF (l_debug = 1) THEN
               print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CREATED: '||x_return_status||' : '||l_progress, 1);
            END IF;
          END IF;--IF L_LOT_EXISTS = 1 THEN

          IF (L_SERIAL_NUMBER_CONTROL_CODE IN (2,5)) THEN

            IF (l_debug = 1) THEN
               print_debug('VALIDATE_LOT_SERIAL_INFO: LOT AND SERIAL CONTROLLED: '||l_progress, 1);
               print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
               print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
               l_progress := 'WMSINB-24102';
            END IF;

            L_NUM_MSNT_RECS := 0;
            l_tot_msnt_serial_qty := 0;

            OPEN C_MSNT_LOTSERIAL(L_MTLT_REC.SERIAL_TRANSACTION_TEMP_ID);

            LOOP
              FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;
              EXIT WHEN C_MSNT_LOTSERIAL%NOTFOUND;

              L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;

              L_SERIAL_QUANTITY :=
                INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
                                  L_MSNT_REC.TO_SERIAL_NUMBER);

              l_tot_msnt_serial_qty := l_tot_msnt_serial_qty + l_serial_quantity;

              INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
              INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
                 l_progress := 'WMSINB-24127';
              END IF;

              --populate attributes table
              l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
              l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
              l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
              l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
              l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
              l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
              l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
              l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
              l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
              l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
              l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
              l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
              l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
              l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
              l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
              l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
              l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
              l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
              l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
              l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
              l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
              l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
              l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
              l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
              l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
              l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
              l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
              l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
              l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
              l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
              l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
              l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
              l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
              l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
              l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
              l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
              l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
              l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
              l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
              l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
              l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
              l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
              l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
              l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
              l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
              l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
              l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
              l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
              l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
              l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
              l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
              l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
              l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
              l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
              l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
              l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
              l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
              l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
              l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
              l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
              l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
              l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
              l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
              l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
              l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
              l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
              l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
              l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
              l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
              l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
              l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
              l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
              l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
              l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
              l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
              l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
              l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
              l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
              l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
              l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
              l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
              l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
              l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
              l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
              l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
              l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
              l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
              l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
              l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
              l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
              l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
              l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
              l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
              l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
              l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
              l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
              l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
              l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
              l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
              l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
              l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
              l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
              l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
              l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
              l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
              l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
              l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
              l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
              l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
              l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
              l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
              l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
              l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
              l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
              l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
              l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
              l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
              l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
              l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
              l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;

              --R12: Get the EPC info for this MSNT
              get_epc_info(p_mode          => 2
                   ,p_ser_if_rowid => l_msnt_rec.ROWID
                   ,x_epc_column   => l_epc_column
                   ,x_epc_value    => l_epc_value
                   );

              IF (l_debug = 1) THEN
                 print_debug('l_epc_column:'||l_epc_column||' l_epc_value:'||l_epc_value,4);
              END IF;

              --Validate the serials
              FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP

                l_progress := 'WMSINB-24133';

                L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
                if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
                      L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
                else
                      L_SERIAL_NUMBER :=
                    SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
                  LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
                  LENGTH(L_CUR_NUMBER))
                    ||L_CUR_NUMBER;
                End if;

                l_progress := 'WMSINB-24141';

                BEGIN
                  SELECT CURRENT_ORGANIZATION_ID
                    , current_status
                    , lot_number
                    , Decode(lpn_id,0,NULL,lpn_id)
                    , inspection_status
                    , group_mark_id
                    INTO L_CURR_ORG_ID
                    , l_curr_status
                    , l_curr_lot_num
                    , l_curr_lpn_id
                    , l_inspection_status
                    , l_group_mark_id
                    FROM MTL_SERIAL_NUMBERS
                    WHERE SERIAL_NUMBER = l_serial_number
                    AND inventory_item_id = l_item_id;

                  l_serial_exists := 1;
                  l_progress := 'WMSINB-24161';
                EXCEPTION
                  WHEN no_data_found THEN
                     l_serial_exists := 0;
                     l_progress := 'WMSINB-24165';
                END;

                IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
                  l_progress := 'WMSINB-24178';
                END IF;

                IF (l_serial_exists = 1) THEN
                  IF l_curr_org_id <> l_org_id THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-24186';
                     RAISE fnd_api.g_exc_error;
                  ELSE
                    IF ((l_curr_lot_num IS NOT NULL) AND
                      (l_curr_lot_num <> l_mtlt_rec.lot_number)
                      AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-24193';
                        RAISE fnd_api.g_exc_error;
                    END IF;
                  END IF;

                  /* Bug#6670394
                     * In order to allow the Issued out Serial numbers during
                     * ASN import transaction made the following changes.
                     */
                  IF l_curr_status NOT IN (1,4,6) THEN --Bug#6670394
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-24202';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-24210';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (Nvl(l_curr_status, 1) IN (1,6)) THEN
                     --validate and update the attributes.
                     inv_serial_number_pub.validate_update_serial_att
                       (x_return_status     => x_return_status,
                    x_msg_count         => x_msg_count,
                    x_msg_data          => x_msg_data,
                    x_validation_status => l_validation_status,
                    p_serial_number     => l_serial_number,
                    p_organization_id   => l_org_id,
                    p_inventory_item_id => l_item_id,
                    p_serial_att_tbl    => l_serial_attributes_tbl,
                    p_validate_only     => FALSE
                    );

                     IF (l_validation_status <> 'Y'
                     OR x_return_status <> g_ret_sts_success) THEN
                    --raise error
                    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                    fnd_msg_pub.ADD;
                    l_progress := 'WMSINB-24215';
                    RAISE fnd_api.g_exc_error;
                     END IF;
                  END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                  --UPDATE GROUP_MARK_ID TO -7937
                  IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-24219';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                ELSE --IF (l_serial_exists = 1) THEN
                  IF l_serial_number_control_code = 5 THEN
                     --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                     --(INCLUDING ATT VALIDATION)
                     --CREATE MSN

                    inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                           , p_inventory_item_id => l_item_id
                                           , p_organization_id => l_org_id
                                           , p_from_serial_number => l_serial_number
                                           , p_to_serial_number => l_serial_number
                                           , p_initialization_date => SYSDATE
                                           , p_completion_date => NULL
                                           , p_ship_date => NULL
                                           , p_revision => l_item_revision
                                           , p_lot_number => l_mtlt_rec.lot_number
                                           , p_current_locator_id => l_loc_id
                                           , p_subinventory_code => l_sub_code
                                           , p_trx_src_id => NULL
                                           , p_unit_vendor_id => NULL
                                           , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
                                           , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                           , p_receipt_issue_type => NULL
                                           , p_txn_src_id => NULL
                                           , p_txn_src_name => NULL
                                           , p_txn_src_type_id => NULL
                                           , p_transaction_id => NULL
                                           , p_current_status => 1
                                           , p_parent_item_id => NULL
                                           , p_parent_serial_number => NULL
                                           , p_cost_group_id => NULL
                                           , p_transaction_action_id => 27
                                           , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                           , p_status_id => NULL
                                           , p_inspection_status => NULL
                                           , x_object_id => l_object_id
                                           , x_return_status => x_return_status
                                           , x_msg_count => x_msg_count
                                           , x_msg_data => x_msg_data);

                    IF (x_return_status <> g_ret_sts_success) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-24225';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    --validate and update the attributes.
                    inv_serial_number_pub.validate_update_serial_att
                       (x_return_status     => x_return_status,
                        x_msg_count         => x_msg_count,
                        x_msg_data          => x_msg_data,
                        x_validation_status => l_validation_status,
                        p_serial_number     => l_serial_number,
                        p_organization_id   => l_org_id,
                        p_inventory_item_id => l_item_id,
                        p_serial_att_tbl    => l_serial_attributes_tbl,
                        p_validate_only     => FALSE
                        );

                    IF (l_validation_status <> 'Y'
                      OR x_return_status <> g_ret_sts_success) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-24260';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    --UPDATE GROUP_MARK_ID TO -7937
                    IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-24267';
                      RAISE fnd_api.g_exc_error;
                    END IF;
                  ELSE
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-24274';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                END IF; --IF (l_serial_exists = 1) THEN

                --Call EPC API here for ASN Import
                IF (l_epc_column IS NOT NULL) THEN
                  IF (Nvl(g_lpn_group_id,-999) <> l_lpn_grp_id) THEN
                     g_lpn_group_id := l_lpn_grp_id;
                     SELECT wms_epc_s2.NEXTVAL
                       INTO g_epc_group_id
                       FROM dual;
                  END IF;

                  IF (l_debug = 1) THEN
                     print_debug('Calling populate_outside_epc',4);
                     print_debug(' p_group_id       => '||g_epc_group_id,4);
                     print_debug(' p_cross_ref_type => '||2,4);
                     print_debug(' p_epc            => '||l_epc_value,4);
                     print_debug(' p_serial_number  => '||l_serial_number,4);
                  END IF;

                  wms_epc_pvt.populate_outside_epc
                    (p_group_id        => g_epc_group_id
                     ,p_cross_ref_type => 2 --LPN-EPC
                     ,p_serial_number  => l_serial_number
                     ,p_epc            => l_epc_value
                     ,x_return_status  => l_return_status
                     ,x_return_mesg    => l_msg_data
                     );

                END IF;--IF (l_epc_column IS NOT NULL) THEN
              END LOOP; -- FOR 1..L_SERIAL_QUANTITY
            END LOOP; --FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;

            CLOSE c_msnt_lotserial;

            IF (l_num_msnt_recs > 0) THEN
                IF l_mtlt_rec.primary_quantity <> l_tot_msnt_serial_qty THEN
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-24288';
                   RAISE fnd_api.g_exc_error;
                END IF;
            ELSE
                IF (l_serial_number_control_code IN (2,5)
                OR (l_serial_number_control_code = 6
                    AND l_source_document_code IN ('RMA','REQ','INVENTORY'))) THEN
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-24295';
                   RAISE fnd_api.g_exc_error;
                END IF;
            END IF;

          END IF; -- IF (L_SERIAL_NUMBER_CONTROL_CODE IN (2,5)) THEN
        END LOOP; --FETCH C_MTLT INTO L_MTLT_REC;

        CLOSE c_mtlt;

          /* Bug 4546519 : l_tot_mtlt_prim_qty is a computed floating point number.
           **  In the following condition, it is necessary to use round function for
           **  comparing the floating point values.
           */
        IF (l_num_mtlt_recs > 0) THEN
          IF (ROUND(l_tot_mtlt_prim_qty,5) <> ROUND(l_rti_primary_qty,5)) THEN
            -- Bug# 4225766 Compare transaction qty there can be a difference in primary qty
            -- if there is a lot specific conversion
            IF (ROUND(l_tot_mtlt_trans_qty,5) <> ROUND(l_rti_trans_qty,5)) THEN -- Bug# 4225766
                --raise error
                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                fnd_msg_pub.ADD;
                l_progress := 'WMSINB-24309';
                RAISE fnd_api.g_exc_error;
            END IF; -- Bug# 4225766
          END IF;
        END IF;
      ELSIF l_serial_number_control_code IN (2,5) THEN --IF (L_LOT_CONTROL_CODE = 2) THEN

        IF (l_debug = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROLLED: '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
              l_progress := 'WMSINB-24319';
        END IF;
        L_NUM_MSNT_RECS := 0;
        l_tot_msnt_serial_qty := 0;

        OPEN C_MSNT(L_RTI_ID);
        LOOP
          FETCH C_MSNT INTO L_MSNT_REC;

          EXIT WHEN C_MSNT%NOTFOUND;

          L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;

          L_SERIAL_QUANTITY :=
            INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
                              L_MSNT_REC.TO_SERIAL_NUMBER);

          l_tot_msnt_serial_qty := l_tot_msnt_serial_qty + l_serial_quantity;

          INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
          INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

          IF (l_debug = 1) THEN
             print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
             print_debug('VALIDATE_LOT_SERIAL_INFO: L_TEMP_PREFIX: '||L_TEMP_PREFIX, 1);
             l_progress := 'WMSINB-24343';
          END IF;

          --populate attributes table
          l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
          l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
          l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
          l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
          l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
          l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
          l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
          l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
          l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
          l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
          l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
          l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
          l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
          l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
          l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
          l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
          l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
          l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
          l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
          l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
          l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
          l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
          l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
          l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
          l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
          l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
          l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
          l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
          l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
          l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
          l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
          l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
          l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
          l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
          l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
          l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
          l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
          l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
          l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
          l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
          l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
          l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
          l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
          l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
          l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
          l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
          l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
          l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
          l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
          l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
          l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
          l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
          l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
          l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
          l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
          l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
          l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
          l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
          l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
          l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
          l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
          l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
          l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
          l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
          l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
          l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
          l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
          l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
          l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
          l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
          l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
          l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
          l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
          l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
          l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
          l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
          l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
          l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
          l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
          l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
          l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
          l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
          l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
          l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
          l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
          l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
          l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
          l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
          l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
          l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
          l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
          l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
          l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
          l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
          l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
          l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
          l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
          l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
          l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
          l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
          l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
          l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
          l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
          l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
          l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
          l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
          l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
          l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
          l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
          l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
          l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
          l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
          l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
          l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
          l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
          l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
          l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
          l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
          l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
          l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;


          --R12: Get the EPC info for this MSNT
          get_epc_info(p_mode          => 2
                   ,p_ser_if_rowid => l_msnt_rec.ROWID
                   ,x_epc_column   => l_epc_column
                   ,x_epc_value    => l_epc_value
                   );

          IF (l_debug = 1) THEN
             print_debug('l_epc_column:'||l_epc_column||' l_epc_value:'||l_epc_value,4);
          END IF;

          --Validate the serials
          FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP

            L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;

            if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
              L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
            else
              L_SERIAL_NUMBER :=
                SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
                  LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
                  LENGTH(L_CUR_NUMBER))
                ||L_CUR_NUMBER;
            End if;

            --L_SERIAL_NUMBER :=
            --  SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
            -- LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
            -- LENGTH(L_FROM_SER_NUMBER))
            -- ||(L_FROM_SER_NUMBER+SERIALQTY -1);

            BEGIN
                SELECT CURRENT_ORGANIZATION_ID
                  , current_status
                  , lot_number
                  , Decode(lpn_id,0,NULL,lpn_id)
                  , inspection_status
                  , group_mark_id
                  INTO L_CURR_ORG_ID
                  , l_curr_status
                  , l_curr_lot_num
                  , l_curr_lpn_id
                  , l_inspection_status
                  , l_group_mark_id
                  FROM MTL_SERIAL_NUMBERS
                  WHERE SERIAL_NUMBER = l_serial_number
                  AND inventory_item_id = l_item_id;

                l_serial_exists := 1;
            EXCEPTION
                WHEN no_data_found THEN
                   l_serial_exists := 0;
            END;

            IF (l_debug = 1) THEN
                print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
                l_progress := 'WMSINB-24386';
            END IF;

            IF (l_serial_exists = 1) THEN
              IF l_curr_org_id <> l_org_id THEN
                 --raise error
                 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                 fnd_msg_pub.ADD;
                 l_progress := 'WMSINB-24394';
                 RAISE fnd_api.g_exc_error;
              ELSE
                   IF (l_curr_lot_num IS NOT NULL) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-24401';
                      RAISE fnd_api.g_exc_error;
                   END IF;
              END IF;

              IF l_curr_status NOT IN (1,4,6) THEN --Bug#6670394
                 --raise error
                 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                 fnd_msg_pub.ADD;
                 l_progress := 'WMSINB-24410';
                 RAISE fnd_api.g_exc_error;
              END IF;

              IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                 --raise error
                 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                 fnd_msg_pub.ADD;
                 l_progress := 'WMSINB-24418';
                 RAISE fnd_api.g_exc_error;
              END IF;

              IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                 --validate and update the attributes.
                 inv_serial_number_pub.validate_update_serial_att
                   (x_return_status     => x_return_status,
                    x_msg_count         => x_msg_count,
                    x_msg_data          => x_msg_data,
                    x_validation_status => l_validation_status,
                    p_serial_number     => l_serial_number,
                    p_organization_id   => l_org_id,
                    p_inventory_item_id => l_item_id,
                    p_serial_att_tbl    => l_serial_attributes_tbl,
                    p_validate_only     => FALSE
                    );

                 IF (l_validation_status <> 'Y'
                     OR x_return_status <> g_ret_sts_success) THEN
                    --raise error
                    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                    fnd_msg_pub.ADD;
                    l_progress := 'WMSINB-24424';
                    RAISE fnd_api.g_exc_error;
                 END IF;
              END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

              --UPDATE GROUP_MARK_ID TO -7937
              IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                 --raise error
                 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                 fnd_msg_pub.ADD;
                 l_progress := 'WMSINB-24427';
                 RAISE fnd_api.g_exc_error;
              END IF;
            ELSE --IF (l_serial_exists = 1) THEN
              IF l_serial_number_control_code = 5 THEN
                 --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                 --(INCLUDING ATT VALIDATION)
                 --CREATE MSN

                inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                       , p_inventory_item_id => l_item_id
                                       , p_organization_id => l_org_id
                                       , p_from_serial_number => l_serial_number
                                       , p_to_serial_number => l_serial_number
                                       , p_initialization_date => SYSDATE
                                       , p_completion_date => NULL
                                       , p_ship_date => NULL
                                       , p_revision => l_item_revision
                                       , p_lot_number => NULL
                                       , p_current_locator_id => l_loc_id
                                       , p_subinventory_code => l_sub_code
                                       , p_trx_src_id => NULL
                                       , p_unit_vendor_id => NULL
                                       , p_vendor_lot_number => NULL
                                       , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                       , p_receipt_issue_type => NULL
                                       , p_txn_src_id => NULL
                                       , p_txn_src_name => NULL
                                       , p_txn_src_type_id => NULL
                                       , p_transaction_id => NULL
                                       , p_current_status => 1
                                       , p_parent_item_id => NULL
                                       , p_parent_serial_number => NULL
                                       , p_cost_group_id => NULL
                                       , p_transaction_action_id => 27
                                       , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                       , p_status_id => NULL
                                       , p_inspection_status => NULL
                                       , x_object_id => l_object_id
                                       , x_return_status => x_return_status
                                       , x_msg_count => x_msg_count
                                       , x_msg_data => x_msg_data);

                IF (x_return_status <> g_ret_sts_success) THEN
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-24430';
                   RAISE fnd_api.g_exc_error;
                END IF;

                --validate and update the attributes.
                inv_serial_number_pub.validate_update_serial_att
                  (x_return_status     => x_return_status,
                   x_msg_count         => x_msg_count,
                   x_msg_data          => x_msg_data,
                   x_validation_status => l_validation_status,
                   p_serial_number     => l_serial_number,
                   p_organization_id   => l_org_id,
                   p_inventory_item_id => l_item_id,
                   p_serial_att_tbl    => l_serial_attributes_tbl,
                   p_validate_only     => FALSE
                   );

                IF (l_validation_status <> 'Y'
                    OR x_return_status <> g_ret_sts_success) THEN
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-24470';
                   RAISE fnd_api.g_exc_error;
                END IF;

                --UPDATE GROUP_MARK_ID TO -7937
                IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-24475';
                   RAISE fnd_api.g_exc_error;
                END IF;
              ELSE
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-24482';
                   RAISE fnd_api.g_exc_error;
              END IF;
            END IF; --IF (l_serial_exists = 1) THEN
            --Call EPC API here for ASN Import
            IF (l_epc_column IS NOT NULL) THEN
              IF (Nvl(g_lpn_group_id,-999) <> l_lpn_grp_id) THEN
                 g_lpn_group_id := l_lpn_grp_id;
                 SELECT wms_epc_s2.NEXTVAL
                   INTO g_epc_group_id
                   FROM dual;
              END IF;

              IF (l_debug = 1) THEN
                 print_debug('Calling populate_outside_epc',4);
                 print_debug(' p_group_id       => '||g_epc_group_id,4);
                 print_debug(' p_cross_ref_type => '||2,4);
                 print_debug(' p_epc            => '||l_epc_value,4);
                 print_debug(' p_serial_number  => '||l_serial_number,4);
              END IF;

              wms_epc_pvt.populate_outside_epc
                (p_group_id        => g_epc_group_id
                 ,p_cross_ref_type => 2 --LPN-EPC
                 ,p_serial_number  => l_serial_number
                 ,p_epc            => l_epc_value
                 ,x_return_status  => l_return_status
                 ,x_return_mesg    => l_msg_data
                 );

            END IF;--IF (l_epc_column IS NOT NULL) THEN

          END LOOP; -- FOR 1..L_SERIAL_QUANTITY
        END LOOP; --FETCH C_MSNT INTO L_MSNT_REC;

        CLOSE c_msnt;

        IF (l_num_msnt_recs > 0) THEN
              IF l_tot_msnt_serial_qty <> l_rti_primary_qty THEN
                 --raise error
                 fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                 fnd_msg_pub.ADD;
                 l_progress := 'WMSINB-24496';
                 RAISE fnd_api.g_exc_error;
              END IF;
        END IF;
      END IF;--IF (l_lot_control_code = 2) THEN
    END IF;--IF (l_transaction_type = 'SHIP' AND l_source_document_code = 'PO') THEN

     --Validate lot/serial for returns/corrections

    IF (l_transaction_type IN ('CORRECT',G_RTR,G_RTV,G_RTC)) THEN
    --Query the parent txn type
      BEGIN
       SELECT transaction_type
         , parent_transaction_id
         INTO l_parent_txn_type
         , l_grand_parent_txn_id
         FROM rcv_transactions
         WHERE transaction_id = l_parent_transaction_id;
      EXCEPTION
       WHEN no_data_found THEN
          --raise an error
          l_progress := 'WMSINB-24517';
          RAISE fnd_api.g_exc_error;
      END;

      IF (l_debug = 1) THEN
         print_debug('VALIDATE_LOT_SERIAL_INFO: Parent Txn Type:'||l_parent_txn_type,1);
         print_debug('VALIDATE_LOT_SERIAL_INFO: Grand Parent Txn ID:'||l_grand_parent_txn_id,1);
         l_progress := 'WMSINB-24524';
      END IF;

      IF (l_grand_parent_txn_id > 0) THEN
        BEGIN
          SELECT transaction_type
          , parent_transaction_id
          INTO l_grand_parent_txn_type
          , l_great_grand_parent_txn_id
          FROM rcv_transactions
          WHERE transaction_id = l_grand_parent_txn_id;
        EXCEPTION
          WHEN no_data_found THEN
             --raise an error
             l_progress := 'WMSINB-24538';
             RAISE fnd_api.g_exc_error;
        END;
      END IF; --IF (l_grand_parent_txn_id > 0) THEN

      IF (l_debug = 1) THEN
         print_debug('VALIDATE_LOT_SERIAL_INFO: Grand Parent Txn Type:'||l_grand_parent_txn_type,1);
         print_debug('VALIDATE_LOT_SERIAL_INFO: Great Grand Parent Txn ID:'||l_great_grand_parent_txn_id,1);
         l_progress := 'WMSINB-24546';
      END IF;

      IF ((l_transaction_type = 'CORRECT' AND l_rti_primary_qty < 0)
          OR l_transaction_type IN (G_RTR,G_RTV,G_RTC)) THEN
         -- opm change bug# 3061052 added l_opm_lot_ctl check.
         /** INVCONV, Remove OPM specific lot control check  Punit Kumar */
        IF (l_lot_control_code = 2 /* OR l_opm_lot_ctl = 1 */) THEN
          IF (l_debug = 1) THEN
            print_debug('VALIDATE_LOT_SERIAL_INFO: Lot Controlled :'||l_progress, 1);
            l_progress := 'WMSINB-24555';
          END IF;

          l_num_mtlt_recs := 0;
          l_tot_mtlt_prim_qty := 0;
          l_tot_mtlt_trans_qty := 0; -- Bug# 4225766

          OPEN C_MTLT(L_RTI_ID);
          LOOP
            FETCH C_MTLT INTO L_MTLT_REC;
            EXIT WHEN C_MTLT%NOTFOUND;

            /* INVCONV , get L_MTLT_REC values into l_mln_rec which shall be passed to INV_NEW_LOT for lot creation */

            IF (l_debug = 1) THEN
               print_debug('INVCONV,Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);
            END IF;

              l_mln_rec.LOT_NUMBER                := L_MTLT_REC.LOT_NUMBER                    ;
              l_mln_rec.LAST_UPDATE_DATE          := SYSDATE                                  ;
              l_mln_rec.LAST_UPDATED_BY           := L_MTLT_REC.LAST_UPDATED_BY               ;
              l_mln_rec.CREATION_DATE             := SYSDATE                                  ;
              l_mln_rec.CREATED_BY                := L_MTLT_REC.CREATED_BY                    ;
              l_mln_rec.LAST_UPDATE_LOGIN         := L_MTLT_REC.LAST_UPDATE_LOGIN             ;
              l_mln_rec.EXPIRATION_DATE           := L_MTLT_REC.LOT_EXPIRATION_DATE               ;
              l_mln_rec.ATTRIBUTE_CATEGORY        := L_MTLT_REC.ATTRIBUTE_CATEGORY            ;
              l_mln_rec.ATTRIBUTE1                := L_MTLT_REC.ATTRIBUTE1                    ;
              l_mln_rec.ATTRIBUTE2                := L_MTLT_REC.ATTRIBUTE2                    ;
              l_mln_rec.ATTRIBUTE3                := L_MTLT_REC.ATTRIBUTE3                    ;
              l_mln_rec.ATTRIBUTE4                := L_MTLT_REC.ATTRIBUTE4                    ;
              l_mln_rec.ATTRIBUTE5                := L_MTLT_REC.ATTRIBUTE5                    ;
              l_mln_rec.ATTRIBUTE6                := L_MTLT_REC.ATTRIBUTE6                    ;
              l_mln_rec.ATTRIBUTE7                := L_MTLT_REC.ATTRIBUTE7                    ;
              l_mln_rec.ATTRIBUTE8                := L_MTLT_REC.ATTRIBUTE8                    ;
              l_mln_rec.ATTRIBUTE9                := L_MTLT_REC.ATTRIBUTE9                    ;
              l_mln_rec.ATTRIBUTE10               := L_MTLT_REC.ATTRIBUTE10                   ;
              l_mln_rec.ATTRIBUTE11               := L_MTLT_REC.ATTRIBUTE11                   ;
              l_mln_rec.ATTRIBUTE12               := L_MTLT_REC.ATTRIBUTE12                   ;
              l_mln_rec.ATTRIBUTE13               := L_MTLT_REC.ATTRIBUTE13                   ;
              l_mln_rec.ATTRIBUTE14               := L_MTLT_REC.ATTRIBUTE14                   ;
              l_mln_rec.ATTRIBUTE15               := L_MTLT_REC.ATTRIBUTE15                   ;
              l_mln_rec.REQUEST_ID                := L_MTLT_REC.REQUEST_ID                    ;
              l_mln_rec.PROGRAM_APPLICATION_ID    := L_MTLT_REC.PROGRAM_APPLICATION_ID        ;
              l_mln_rec.PROGRAM_ID                := L_MTLT_REC.PROGRAM_ID                    ;
              l_mln_rec.PROGRAM_UPDATE_DATE       := L_MTLT_REC.PROGRAM_UPDATE_DATE           ;
              l_mln_rec.DESCRIPTION               := L_MTLT_REC.DESCRIPTION                   ;
              l_mln_rec.VENDOR_NAME               := L_MTLT_REC.VENDOR_NAME                   ;
              l_mln_rec.SUPPLIER_LOT_NUMBER       := L_MTLT_REC.SUPPLIER_LOT_NUMBER           ;
              l_mln_rec.GRADE_CODE                := L_MTLT_REC.GRADE_CODE                    ;
              l_mln_rec.ORIGINATION_DATE          := L_MTLT_REC.ORIGINATION_DATE              ;
              l_mln_rec.DATE_CODE                 := L_MTLT_REC.DATE_CODE                     ;
              l_mln_rec.STATUS_ID                 := L_MTLT_REC.STATUS_ID                     ;
              l_mln_rec.CHANGE_DATE               := L_MTLT_REC.CHANGE_DATE                   ;
              l_mln_rec.AGE                       := L_MTLT_REC.AGE                           ;
              l_mln_rec.RETEST_DATE               := L_MTLT_REC.RETEST_DATE                   ;
              l_mln_rec.MATURITY_DATE             := L_MTLT_REC.MATURITY_DATE                 ;
              l_mln_rec.LOT_ATTRIBUTE_CATEGORY    := L_MTLT_REC.LOT_ATTRIBUTE_CATEGORY        ;
              l_mln_rec.ITEM_SIZE                 := L_MTLT_REC.ITEM_SIZE                     ;
              l_mln_rec.COLOR                     := L_MTLT_REC.COLOR                         ;
              l_mln_rec.VOLUME                    := L_MTLT_REC.VOLUME                        ;
              l_mln_rec.VOLUME_UOM                := L_MTLT_REC.VOLUME_UOM                    ;
              l_mln_rec.PLACE_OF_ORIGIN           := L_MTLT_REC.PLACE_OF_ORIGIN               ;
              l_mln_rec.BEST_BY_DATE              := L_MTLT_REC.BEST_BY_DATE                  ;
              l_mln_rec.LENGTH                    := L_MTLT_REC.LENGTH                        ;
              l_mln_rec.LENGTH_UOM                := L_MTLT_REC.LENGTH_UOM                    ;
              l_mln_rec.RECYCLED_CONTENT          := L_MTLT_REC.RECYCLED_CONTENT              ;
              l_mln_rec.THICKNESS                 := L_MTLT_REC.THICKNESS                     ;
              l_mln_rec.THICKNESS_UOM             := L_MTLT_REC.THICKNESS_UOM                 ;
              l_mln_rec.WIDTH                     := L_MTLT_REC.WIDTH                         ;
              l_mln_rec.WIDTH_UOM                 := L_MTLT_REC.WIDTH_UOM                     ;
              l_mln_rec.CURL_WRINKLE_FOLD         := L_MTLT_REC.CURL_WRINKLE_FOLD             ;
              l_mln_rec.C_ATTRIBUTE1              := L_MTLT_REC.C_ATTRIBUTE1                  ;
              l_mln_rec.C_ATTRIBUTE2              := L_MTLT_REC.C_ATTRIBUTE2                  ;
              l_mln_rec.C_ATTRIBUTE3              := L_MTLT_REC.C_ATTRIBUTE3                  ;
              l_mln_rec.C_ATTRIBUTE4              := L_MTLT_REC.C_ATTRIBUTE4                  ;
              l_mln_rec.C_ATTRIBUTE5              := L_MTLT_REC.C_ATTRIBUTE5                  ;
              l_mln_rec.C_ATTRIBUTE6              := L_MTLT_REC.C_ATTRIBUTE6                  ;
              l_mln_rec.C_ATTRIBUTE7              := L_MTLT_REC.C_ATTRIBUTE7                  ;
              l_mln_rec.C_ATTRIBUTE8              := L_MTLT_REC.C_ATTRIBUTE8                  ;
              l_mln_rec.C_ATTRIBUTE9              := L_MTLT_REC.C_ATTRIBUTE9                  ;
              l_mln_rec.C_ATTRIBUTE10             := L_MTLT_REC.C_ATTRIBUTE10                 ;
              l_mln_rec.C_ATTRIBUTE11             := L_MTLT_REC.C_ATTRIBUTE11                 ;
              l_mln_rec.C_ATTRIBUTE12             := L_MTLT_REC.C_ATTRIBUTE12                 ;
              l_mln_rec.C_ATTRIBUTE13             := L_MTLT_REC.C_ATTRIBUTE13                 ;
              l_mln_rec.C_ATTRIBUTE14             := L_MTLT_REC.C_ATTRIBUTE14                 ;
              l_mln_rec.C_ATTRIBUTE15             := L_MTLT_REC.C_ATTRIBUTE15                 ;
              l_mln_rec.C_ATTRIBUTE16             := L_MTLT_REC.C_ATTRIBUTE16                 ;
              l_mln_rec.C_ATTRIBUTE17             := L_MTLT_REC.C_ATTRIBUTE17                 ;
              l_mln_rec.C_ATTRIBUTE18             := L_MTLT_REC.C_ATTRIBUTE18                 ;
              l_mln_rec.C_ATTRIBUTE19             := L_MTLT_REC.C_ATTRIBUTE19                 ;
              l_mln_rec.C_ATTRIBUTE20             := L_MTLT_REC.C_ATTRIBUTE20                 ;
              l_mln_rec.D_ATTRIBUTE1              := L_MTLT_REC.D_ATTRIBUTE1                  ;
              l_mln_rec.D_ATTRIBUTE2              := L_MTLT_REC.D_ATTRIBUTE2                  ;
              l_mln_rec.D_ATTRIBUTE3              := L_MTLT_REC.D_ATTRIBUTE3                  ;
              l_mln_rec.D_ATTRIBUTE4              := L_MTLT_REC.D_ATTRIBUTE4                  ;
              l_mln_rec.D_ATTRIBUTE5              := L_MTLT_REC.D_ATTRIBUTE5                  ;
              l_mln_rec.D_ATTRIBUTE6              := L_MTLT_REC.D_ATTRIBUTE6                  ;
              l_mln_rec.D_ATTRIBUTE7              := L_MTLT_REC.D_ATTRIBUTE7                  ;
              l_mln_rec.D_ATTRIBUTE8              := L_MTLT_REC.D_ATTRIBUTE8                  ;
              l_mln_rec.D_ATTRIBUTE9              := L_MTLT_REC.D_ATTRIBUTE9                  ;
              l_mln_rec.D_ATTRIBUTE10             := L_MTLT_REC.D_ATTRIBUTE10                 ;
              l_mln_rec.N_ATTRIBUTE1              := L_MTLT_REC.N_ATTRIBUTE1                  ;
              l_mln_rec.N_ATTRIBUTE2              := L_MTLT_REC.N_ATTRIBUTE2                  ;
              l_mln_rec.N_ATTRIBUTE3              := L_MTLT_REC.N_ATTRIBUTE3                  ;
              l_mln_rec.N_ATTRIBUTE4              := L_MTLT_REC.N_ATTRIBUTE4                  ;
              l_mln_rec.N_ATTRIBUTE5              := L_MTLT_REC.N_ATTRIBUTE5                  ;
              l_mln_rec.N_ATTRIBUTE6              := L_MTLT_REC.N_ATTRIBUTE6                  ;
              l_mln_rec.N_ATTRIBUTE7              := L_MTLT_REC.N_ATTRIBUTE7                  ;
              l_mln_rec.N_ATTRIBUTE8              := L_MTLT_REC.N_ATTRIBUTE8                  ;
              l_mln_rec.N_ATTRIBUTE9              := L_MTLT_REC.N_ATTRIBUTE9                  ;
              l_mln_rec.N_ATTRIBUTE10             := L_MTLT_REC.N_ATTRIBUTE10                 ;
              l_mln_rec.VENDOR_ID                 := L_MTLT_REC.VENDOR_ID                     ;
              l_mln_rec.TERRITORY_CODE            := L_MTLT_REC.TERRITORY_CODE                ;
              l_mln_rec.PARENT_LOT_NUMBER         := L_MTLT_REC.PARENT_LOT_NUMBER             ;
              l_mln_rec.ORIGINATION_TYPE          := L_MTLT_REC.ORIGINATION_TYPE              ;
              l_mln_rec.EXPIRATION_ACTION_DATE    := L_MTLT_REC.EXPIRATION_ACTION_DATE        ;
              l_mln_rec.EXPIRATION_ACTION_CODE    := L_MTLT_REC.EXPIRATION_ACTION_CODE        ;
              l_mln_rec.HOLD_DATE                 := L_MTLT_REC.HOLD_DATE                     ;

              L_NUM_MTLT_RECS := L_NUM_MTLT_RECS + 1;
              l_tot_mtlt_prim_qty := l_tot_mtlt_prim_qty + l_mtlt_rec.primary_quantity;
              l_tot_mtlt_trans_qty := l_tot_mtlt_trans_qty + l_mtlt_rec.transaction_quantity; -- Bug# 4225766

              IF (l_debug = 1) THEN
                print_debug('VALIDATE_LOT_SERIAL_INFO: LOT NUMBER: '||l_mtlt_rec.lot_number||': '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: LOT PRIMARY QUANTITY: '||l_mtlt_rec.primary_quantity||': '||l_progress, 1);
                l_progress := 'WMSINB-24573';
                print_debug('INVCONV,Finished Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);
              END IF;

              IF (l_parent_txn_type IN (g_rtv,g_rtr,g_rtc)) THEN
                IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                   IF NOT (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                  --raise an error
                  l_progress := 'WMSINB-24580';
                  RAISE fnd_api.g_exc_error;
                   END IF; --IF NOT (lot_entered_on_parent(l_grand_parent_txn_id))
                END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
              ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtr,g_rtc)) THEN
                IF (l_parent_txn_type <> 'DELIVER') THEN
                   IF NOT (lot_entered_on_parent(l_parent_transaction_id)) THEN
                  --raise an error
                  l_progress := 'WMSINB-24588';
                  RAISE fnd_api.g_exc_error;
                   END IF;
                END IF; --IF (l_parent_txn_type <> 'DELIVER') THEN
              END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtr,g_rtc)) THEN

              /*INVCONV , removed OPM specific fork*/
              BEGIN
                ----IF (l_discrete_transaction) THEN
                SELECT 1,parent_lot_number
                  INTO L_LOT_EXISTS ,l_parent_lot_number
                  FROM MTL_LOT_NUMBERS
                  WHERE ORGANIZATION_ID = L_ORG_ID
                  AND   INVENTORY_ITEM_ID = L_ITEM_ID
                  AND LOT_NUMBER = Ltrim(Rtrim(L_MTLT_REC.lot_number));

                /*
                 ELSE -- opm change bug# 3061052 --IF (l_discrete_transaction) THEN
                   IF  Ltrim(Rtrim(L_MTLT_REC.sublot_num)) IS NOT NULL THEN
                  SELECT 1, LOT_ID
                    INTO L_LOT_EXISTS , l_opm_lot_id
                    FROM IC_LOTS_MST
                    WHERE ITEM_ID = l_opm_item_id
                    AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
                    AND SUBLOT_NO = Ltrim(Rtrim(L_MTLT_REC.sublot_num)) ;
                ELSE
                  SELECT 1, LOT_ID
                    INTO L_LOT_EXISTS , l_opm_lot_id
                    FROM IC_LOTS_MST
                    WHERE ITEM_ID = l_opm_item_id
                    AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
                    AND SUBLOT_NO IS NULL ;
                   END IF;
                END IF; --IF (l_discrete_transaction) THEN
              */

              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_LOT_EXISTS := 0;
              END;

              IF (l_lot_exists = 1) THEN

                /*INVCONV , validating for parent lot*/
                IF  L_MTLT_REC.parent_lot_number IS NOT NULL THEN
                  IF L_MTLT_REC.parent_lot_number <> l_parent_lot_number THEN
                    fnd_message.set_name ('INV' , 'INV_CL_PARENT_INVALID' );
                    fnd_msg_pub.ADD;
                    RAISE fnd_api.g_exc_error;
                  END IF;
                ELSE
                  L_MTLT_REC.parent_lot_number := l_parent_lot_number;
                END IF;


                IF (l_parent_txn_type IN (g_rtv, g_rtc)) THEN
                  IF (l_grand_parent_txn_type = 'DELIVER') THEN

                    /*INVCONV , remove OPM specific fork */
                    /*IF (l_discrete_transaction) THEN	 */

                    --PERFORM LOT MATERIAL STATUS CHECK
                    IF (l_transaction_type = g_rtv) THEN
                      l_transaction_type_id := 36;
                    ELSIF (l_transaction_type = g_rtc) THEN
                      l_transaction_type_id := 37;
                    ELSIF (l_transaction_type = g_rtr) THEN
                      IF (l_source_document_code = 'PO') THEN
                         l_transaction_type_id := 36;
                      ELSE
                         l_transaction_type_id := 37; --For RMA
                      END IF;
                    ELSE
                      IF (l_source_document_code = 'PO') THEN
                        l_transaction_type_id := 71;
                      ELSE
                        l_transaction_type_id := 72;
                      END IF;
                    END IF;

                    INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
                                      X_MSG_COUNT => X_MSG_COUNT,
                                      X_MSG_DATA => X_MSG_DATA,
                                      X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                                      P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                                      P_ORGANIZATION_ID => L_ORG_ID,
                                      P_INVENTORY_ITEM_ID => L_ITEM_ID,
                                      P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                                      P_SUBINVENTORY_CODE => L_SUB_CODE,
                                      P_LOCATOR_ID => L_LOC_ID,
                                      P_STATUS_ID => NULL);
                    IF X_RETURN_STATUS <> 'S' THEN
                      --RAISE ERROR
                      l_progress     := 'WMSINB-24661';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                      print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
                      l_progress := 'WMSINB-24667';
                    END IF;

                    IF L_VALIDATION_STATUS <> 'Y' THEN
                      --RAISE ERROR
                      l_progress     := 'WMSINB-24672';
                      RAISE fnd_api.g_exc_error;
                    END IF;
                    /* ELSE --IF (l_discrete_transaction) THEN
                     -- opm change bug# 3061052
                     gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                              p_init_msg_lst	 	=> FND_API.G_FALSE,
                              p_mtlt_rowid		=> l_mtlt_rec.rowid,
                              p_new_lot	 	=> 'N',
                              p_opm_item_id		=> l_opm_item_id,
                              p_item_no		=> l_item_no,
                              p_lots_specified_on_parent => 'Y',
                              p_lot_id		=> l_opm_lot_id,
                              p_parent_txn_type	=> l_parent_txn_type,
                              p_grand_parent_txn_type => l_grand_parent_txn_type,
                              x_return_status 	=> x_return_status,
                              x_msg_data      	=> x_msg_data,
                              x_msg_count     	=> x_msg_count
                              );

                      */
                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                       print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF X_RETURN_STATUS <> 'S' THEN
                      --RAISE ERROR
                      l_progress := 'WMSINB-24693';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                      print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                    END IF;
                    /*END IF; --IF (l_discrete_transaction) THEN*/
                  ELSE --IF (l_grand_parent_txn_type = 'DELIVER') THEN
                    IF (validate_rs(NULL,l_grand_parent_txn_id,l_dummy_lpn)) THEN
                       IF NOT (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                    --raise error
                    l_progress := 'WMSINB-24705';
                    RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF;

                     /*INVCONV , remove OPM specific fork, Punit Kumar */
                    /*IF (NOT l_discrete_transaction) THEN

                       -- opm change bug# 3061052
                       gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                                p_init_msg_lst	 	=> FND_API.G_FALSE,
                                p_mtlt_rowid		=> l_mtlt_rec.rowid,
                                p_new_lot	 	=> 'N',
                                p_opm_item_id		=> l_opm_item_id,
                                p_item_no		=> l_item_no,
                                p_lots_specified_on_parent => 'Y',
                                p_lot_id		=> l_opm_lot_id,
                                p_parent_txn_type	=> l_parent_txn_type,
                                p_grand_parent_txn_type => l_grand_parent_txn_type,
                                x_return_status 	=> x_return_status,
                                x_msg_data      	=> x_msg_data,
                                x_msg_count     	=> x_msg_count
                                );
                        */
                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                      print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF X_RETURN_STATUS <> 'S' THEN
                      --RAISE ERROR
                      l_progress := 'WMSINB-24728';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                      print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                    END IF;
                    /*END IF; --IF (NOT l_discrete_transaction) THEN*/

                  END IF; --IF (l_grand_parent_txn_type = 'DELIVER') THEN
                ELSIF (l_parent_txn_type = g_rtr) THEN --IF (l_parent_txn_type IN (g_rtv, g_rtc)) THEN
                  IF (lot_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                    BEGIN

                    /*INVCONV, Remove the sublot no check in SQL */
                      SELECT primary_quantity
                        INTO l_rls_primary_quantity
                        FROM rcv_lots_supply
                       WHERE transaction_id = l_great_grand_parent_txn_id
                         AND lot_num = Ltrim(Rtrim(l_mtlt_rec.lot_number)) ;
                         /*AND ((sublot_num IS NULL and Ltrim(Rtrim(l_mtlt_rec.sublot_num)) IS NULL)
                           OR (sublot_num = Ltrim(Rtrim(l_mtlt_rec.sublot_num)))) ;*/

                      IF (l_mtlt_rec.primary_quantity > l_rls_primary_quantity) THEN
                        --raise error
                        l_progress := 'WMSINB-24752';
                        RAISE fnd_api.g_exc_error;
                      END IF;
                    EXCEPTION
                      WHEN no_data_found THEN
                      --raise error
                      l_progress := 'WMSINB-24758';
                      RAISE fnd_api.g_exc_error;
                    END;
                  END IF; --IF (lot_entered_on_parent(l_great_grand_parent_txn_id)) THEN

                  /*INVCONV , existing discrete validations. Same will be executed for process org */
                  /*IF (l_discrete_transaction) THEN*/
                  --PERFORM MATERIAL STATUS CHECK FOR LOT
                  IF (l_transaction_type = g_rtv) THEN
                     l_transaction_type_id := 36;
                  ELSIF (l_transaction_type = g_rtc) THEN
                     l_transaction_type_id := 37;
                  ELSIF (l_transaction_type = g_rtr) THEN
                    IF (l_source_document_code = 'PO') THEN
                      l_transaction_type_id := 36;
                    ELSE
                      l_transaction_type_id := 37; --For RMA
                    END IF;
                  ELSE
                    IF (l_source_document_code = 'PO') THEN
                      l_transaction_type_id := 71;
                    ELSE
                      l_transaction_type_id := 72;
                    END IF;
                  END IF;

                  INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
                                  X_MSG_COUNT => X_MSG_COUNT,
                                  X_MSG_DATA => X_MSG_DATA,
                                  X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                                  P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                                  P_ORGANIZATION_ID => L_ORG_ID,
                                  P_INVENTORY_ITEM_ID => L_ITEM_ID,
                                  P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                                  P_SUBINVENTORY_CODE => L_SUB_CODE,
                                  P_LOCATOR_ID => L_LOC_ID,
                                  P_STATUS_ID => NULL);
                  IF X_RETURN_STATUS <> 'S' THEN
                     --RAISE ERROR
                     l_progress := 'WMSINB-24796';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (l_debug = 1) THEN
                     print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
                     l_progress := 'WMSINB-24802';
                  END IF;

                  IF L_VALIDATION_STATUS <> 'Y' THEN
                     --RAISE ERROR
                     l_progress := 'WMSINB-24807';
                     RAISE fnd_api.g_exc_error;
                  END IF;


                   /*
                    ELSE --IF (l_discrete_transaction) THEN
                      -- opm change bug# 3061052
                      gml_opm_roi_grp.validate_opm_lot(p_api_version	 	=> 1.0,
                               p_init_msg_lst	 	=> FND_API.G_FALSE,
                               p_mtlt_rowid		=> l_mtlt_rec.rowid,
                               p_new_lot	 	=> 'N',
                               p_opm_item_id		=> l_opm_item_id,
                               p_item_no		=> l_item_no,
                               p_lots_specified_on_parent => 'Y',
                               p_lot_id		=> l_opm_lot_id,
                               p_parent_txn_type	=> l_parent_txn_type,
                               p_grand_parent_txn_type => l_grand_parent_txn_type,
                               x_return_status 	=> x_return_status,
                               x_msg_data      	=> x_msg_data,
                               x_msg_count     	=> x_msg_count
                               );
                    */
                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                       print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF X_RETURN_STATUS <> 'S' THEN
                       --RAISE ERROR
                       l_progress := 'WMSINB-24828';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                       print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                    END IF;
                    /*END IF;  --IF (l_discrete_transaction) THEN*/

                  ELSE --	ELSIF (l_parent_txn_type = g_rtr)
                    IF l_parent_txn_type <> 'DELIVER' THEN
                      BEGIN

                        /* INVCONV , Remove Sublot Num from SQL , Punit Kumar*/

                        SELECT primary_quantity
                          INTO l_rls_primary_quantity
                          FROM rcv_lots_supply
                          WHERE transaction_id = l_parent_transaction_id
                          AND lot_num = Ltrim(Rtrim(l_mtlt_rec.lot_number));

                          /*  AND ((sublot_num IS NULL and Ltrim(Rtrim(l_mtlt_rec.sublot_num)) IS NULL)
                             OR (sublot_num = Ltrim(Rtrim(l_mtlt_rec.sublot_num)))) ;*/

                        IF (l_mtlt_rec.primary_quantity > l_rls_primary_quantity) THEN
                           --raise error
                           l_progress := 'WMSINB-24851';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      EXCEPTION
                        WHEN no_data_found THEN
                           --raise error
                           l_progress := 'WMSINB-24857';
                           RAISE fnd_api.g_exc_error;
                      END;

                      /*  IF (NOT l_discrete_transaction) THEN
                      -- opm change bug# 3061052.
                      gml_opm_roi_grp.validate_opm_lot(p_api_version	=> 1.0,
                               p_init_msg_lst	 	=> FND_API.G_FALSE,
                               p_mtlt_rowid		=> l_mtlt_rec.rowid,
                               p_new_lot	 	=> 'N',
                               p_opm_item_id		=> l_opm_item_id,
                               p_item_no		=> l_item_no,
                               p_lots_specified_on_parent => 'Y',
                               p_lot_id		=> l_opm_lot_id,
                               p_parent_txn_type	=> l_parent_txn_type,
                               p_grand_parent_txn_type => l_grand_parent_txn_type,
                               x_return_status 	=> x_return_status,
                               x_msg_data      	=> x_msg_data,
                               x_msg_count     	=> x_msg_count
                               );
                               */
                      IF (l_debug = 1) THEN
                         print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                      END IF;

                      INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                          x_return_status      		   => x_return_status
                                                         ,x_msg_data           		   => x_msg_data
                                                         ,x_msg_count          		   => x_msg_count
                                                         ,p_api_version	               => 1.0
                                                         ,p_init_msg_lst	            => FND_API.G_FALSE
                                                         ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                         ,p_transaction_type_id 	      => l_transaction_type_id
                                                         ,p_new_lot			            => 'N'
                                                         ,p_item_id	 		            => l_item_id
                                                         ,p_to_organization_id		   => L_ORG_ID
                                                         ,p_lot_number			         => L_MTLT_REC.lot_number
                                                         ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                         ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                         ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                         ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                         ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                         ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                         ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                         ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                         ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                         ,p_rti_id	                  => L_RTI_ID
                                                         ,p_revision             	   => l_item_revision
                                                         ,p_subinventory_code  	      => L_SUB_CODE
                                                         ,p_locator_id           	   => l_loc_id
                                                         ,p_transaction_type           => l_transaction_type
                                                         ,p_parent_txn_type            => l_parent_txn_type
                                                         ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                         );

                      IF (l_debug = 1) THEN
                         print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                         print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                      END IF;

                      IF X_RETURN_STATUS <> 'S' THEN
                        --RAISE ERROR
                        l_progress := 'WMSINB-24880';
                        RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (l_debug = 1) THEN
                         print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                      END IF;
                      /*END IF; --IF (NOT l_discrete_transaction) THEN*/
                    ELSE --IF l_parent_txn_type <> 'DELIVER' THEN

                      /*INVCONV , Remove OPM specific fork*/
                      /*IF (l_discrete_transaction) THEN */

                      --PERFORM MATERIAL STATUS CHECK FOR LOT
                      IF (l_transaction_type = g_rtv) THEN
                        l_transaction_type_id := 36;
                      ELSIF (l_transaction_type = g_rtc) THEN
                        l_transaction_type_id := 37;
                      ELSIF (l_transaction_type = g_rtr) THEN
                        IF (l_source_document_code = 'PO') THEN
                          l_transaction_type_id := 36;
                        ELSE
                          l_transaction_type_id := 37; --For RMA
                        END IF;
                      ELSE
                        IF (l_source_document_code = 'PO') THEN
                          l_transaction_type_id := 71;
                        ELSE
                          l_transaction_type_id := 72;
                        END IF;
                      END IF;

					   -- This code is added for bug 14269152
                      IF(l_transaction_type IN(g_rtv,g_rtc,g_rtr)) THEN

                      print_debug(' Call to INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS ' , 1); -- Bug 14269152

                      INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
                          X_MSG_COUNT => X_MSG_COUNT,
                          X_MSG_DATA => X_MSG_DATA,
                          X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                          P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                          P_ORGANIZATION_ID => L_ORG_ID,
                          P_INVENTORY_ITEM_ID => L_ITEM_ID,
                          P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                          P_SUBINVENTORY_CODE => l_from_subinventory, -- 14269152
                          P_LOCATOR_ID => l_from_locator_id, -- 14269152
                          P_STATUS_ID => NULL,
                          P_LPN_ID    => L_LPN_ID);     -- bug 14269152
                      IF X_RETURN_STATUS <> 'S' THEN
                         --RAISE ERROR
                         l_progress := 'WMSINB-24921';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      ELSE

                      INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
                          X_MSG_COUNT => X_MSG_COUNT,
                          X_MSG_DATA => X_MSG_DATA,
                          X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                          P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                          P_ORGANIZATION_ID => L_ORG_ID,
                          P_INVENTORY_ITEM_ID => L_ITEM_ID,
                          P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                          P_SUBINVENTORY_CODE => L_SUB_CODE,
                          P_LOCATOR_ID => L_LOC_ID,
                          P_STATUS_ID => NULL);
                      IF X_RETURN_STATUS <> 'S' THEN
                         --RAISE ERROR
                         l_progress := 'WMSINB-24922';
                         RAISE fnd_api.g_exc_error;
                      END IF;

					  END IF;

                      IF (l_debug = 1) THEN
                        print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
                        l_progress := 'WMSINB-24928';
                      END IF;

                      IF L_VALIDATION_STATUS <> 'Y' THEN
                        --RAISE ERROR
                        l_progress := 'WMSINB-24933';
                        RAISE fnd_api.g_exc_error;
                      END IF;

                      /*ELSE --IF (l_discrete_transaction) THEN
                      -- opm change bug# 3061052
                      gml_opm_roi_grp.validate_opm_lot(p_api_version	=> 1.0,
                               p_init_msg_lst	 	=> FND_API.G_FALSE,
                               p_mtlt_rowid		=> l_mtlt_rec.rowid,
                               p_new_lot	 	=> 'N',
                               p_opm_item_id		=> l_opm_item_id,
                               p_item_no		=> l_item_no,
                               p_lots_specified_on_parent => 'Y',
                               p_lot_id		=> l_opm_lot_id,
                               p_parent_txn_type	=> l_parent_txn_type,
                               p_grand_parent_txn_type => l_grand_parent_txn_type,
                               x_return_status 	=> x_return_status,
                               x_msg_data      	=> x_msg_data,
                               x_msg_count     	=> x_msg_count
                               );*/
                      IF (l_debug = 1) THEN
                         print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                      END IF;

                      INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                          x_return_status      		   => x_return_status
                                                         ,x_msg_data           		   => x_msg_data
                                                         ,x_msg_count          		   => x_msg_count
                                                         ,p_api_version	               => 1.0
                                                         ,p_init_msg_lst	            => FND_API.G_FALSE
                                                         ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                         ,p_transaction_type_id 	      => l_transaction_type_id
                                                         ,p_new_lot			            => 'N'
                                                         ,p_item_id	 		            => l_item_id
                                                         ,p_to_organization_id		   => L_ORG_ID
                                                         ,p_lot_number			         => L_MTLT_REC.lot_number
                                                         ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                         ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                         ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                         ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                         ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                         ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                         ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                         ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                         ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                         ,p_rti_id	                  => L_RTI_ID
                                                         ,p_revision             	   => l_item_revision
                                                         ,p_subinventory_code  	      => L_SUB_CODE
                                                         ,p_locator_id           	   => l_loc_id
                                                         ,p_transaction_type           => l_transaction_type
                                                         ,p_parent_txn_type            => l_parent_txn_type
                                                         ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                         );

                      /*INVCONV ,*/
                      IF (l_debug = 1) THEN
                         print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                         print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                      END IF;

                      IF X_RETURN_STATUS <> 'S' THEN
                         --RAISE ERROR
                         l_progress := 'WMSINB-24955';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (l_debug = 1) THEN
                        print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                      END IF;
                      /*END IF; -- IF (l_discrete_transaction) THEN*/
                    END IF; --IF l_parent_txn_type <> 'DELIVER' THEN
                  END IF; --IF (l_parent_txn_type IN (g_rtv, g_rtc)) THEN
                ELSE --IF (l_lot_exists = 1) THEN
              IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
                 IF (l_grand_parent_txn_type = 'DELIVER') THEN
                    -- opm change bug# 3061052
                    /* INVCONV, replace the existing create_inv_lot call with a new call */
                    /*INVCONV , Perform lot validations and create the new lot.
                      Call Lot Create API INV_ROI_INTEGRATION_GRP.INV_NEW_LOT to create the new lot.
                      This shall also create lot specific conversions after creating the new Lot.
                      This replaces the existing procedure INV_LOT_API_PUB.CREATE_INV_LOT to create NEW LOT */

                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                         x_return_status      		   => x_return_status
                                                        ,x_msg_data           		   => x_msg_data
                                                        ,x_msg_count          		   => x_msg_count
                                                        ,p_api_version	               => 1.0
                                                        ,p_init_msg_lst	               => FND_API.G_FALSE
                                                        ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                        ,p_transaction_type_id 	      => l_transaction_type_id
                                                        ,p_new_lot			            => 'Y'
                                                        ,p_item_id	 		            => l_item_id
                                                        ,p_to_organization_id		      => L_ORG_ID
                                                        ,p_lot_number			         => L_MTLT_REC.lot_number
                                                        ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                        ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                                        ,x_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                                        ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                        ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                        ,p_transaction_unit_of_measure => l_rti_UNIT_OF_MEASURE
                                                        ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                        ,p_OE_ORDER_HEADER_ID	         => l_OE_ORDER_HEADER_ID
                                                        ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                        ,p_rti_id	                     => L_RTI_ID
                                                        ,p_revision             	      => l_item_revision
                                                        ,p_subinventory_code  	      => L_SUB_CODE
                                                        ,p_locator_id           	      => l_loc_id
                                                        ,p_transaction_type           => l_transaction_type
                                                        ,p_parent_txn_type            => l_parent_txn_type
                                                        ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                        );

                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                       print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF (x_return_status <> 'S') THEN
                       --raise error
                       l_progress := 'WMSINB-25058';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_NEW_LOT(
                                                x_return_status      		   => x_return_status
                                               ,x_msg_count          		   => x_msg_count
                                               ,x_msg_data           		   => x_msg_data
                                               ,p_api_version	               => 1.0
                                               ,p_init_msg_lst	               => FND_API.G_FALSE
                                               ,p_source_document_code			=> L_SOURCE_DOCUMENT_CODE
                                               ,p_item_id				         => l_item_id
                                               ,p_from_organization_id			=> L_FROM_ORG_ID
                                               ,p_to_organization_id	         => L_ORG_ID
                                               ,p_lot_number				      => L_MTLT_REC.lot_number
                                               ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                               ,p_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                               ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                               ,p_primary_unit_of_measure	   => l_rti_PRIMARY_UNIT_OF_MEASURE
                                               ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                               ,p_uom_code	                  => l_rti_UOM_CODE
                                               ,p_secondary_uom_code	         => l_rti_SECONDARY_UOM_CODE
                                               ,p_reason_id	                  => L_MTLT_REC.REASON_ID
                                               ,P_MLN_REC                     => L_MLN_REC
                                               ,p_mtlt_rowid	               => L_MTLT_REC.ROWID
                                               );

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                      print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_NEW_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF X_RETURN_STATUS <> 'S' THEN
                      --RAISE ERROR
                      l_progress := 'WMSINB-25085';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                      print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                    END IF;
                    /*END IF; --IF (l_discrete_transaction) THEN*/
                  ELSE --IF (l_grand_parent_txn_type = 'DELIVER') THEN
                    IF (validate_rs(NULL,l_grand_parent_txn_id,l_dummy_lpn)) THEN
                      IF NOT (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                        --raise an error
                        l_progress := 'WMSINB-25097';
                        RAISE fnd_api.g_exc_error;
                      END IF;
                    END IF;

                    /*INVCONV, Replace existing create lot call with a new call */
                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	               => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'Y'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

                    IF (l_debug = 1) THEN
                        print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                        print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF (x_return_status <> 'S') THEN
                      --raise error
                      l_progress := 'WMSINB-25193';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_NEW_LOT(
                                                x_return_status      		   => x_return_status
                                               ,x_msg_count          		   => x_msg_count
                                               ,x_msg_data           		   => x_msg_data
                                               ,p_api_version	               => 1.0
                                               ,p_init_msg_lst	               => FND_API.G_FALSE
                                               ,p_source_document_code			=> L_SOURCE_DOCUMENT_CODE
                                               ,p_item_id				         => l_item_id
                                               ,p_from_organization_id			=> L_FROM_ORG_ID
                                               ,p_to_organization_id	         => L_ORG_ID
                                               ,p_lot_number				      => L_MTLT_REC.lot_number
                                               ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                               ,p_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                               ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                               ,p_primary_unit_of_measure	   => l_rti_PRIMARY_UNIT_OF_MEASURE
                                               ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                               ,p_uom_code	                  => l_rti_UOM_CODE
                                               ,p_secondary_uom_code	         => l_rti_SECONDARY_UOM_CODE
                                               ,p_reason_id	                  => L_MTLT_REC.REASON_ID
                                               ,P_MLN_REC                     => L_MLN_REC
                                               ,p_mtlt_rowid	               => L_MTLT_REC.ROWID
                                               );

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                        print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                        print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_NEW_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;


                    IF X_RETURN_STATUS <> 'S' THEN
                       --RAISE ERROR
                       l_progress := 'WMSINB-25220';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                       print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                    END IF;
                    /*END IF; --IF (l_discrete_transaction) THEN*/
                  END IF; --IF (l_grand_parent_txn_type = 'DELIVER') THEN
                ELSIF (l_parent_txn_type = g_rtr) THEN --IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
                  IF (lot_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                    --raise an error
                    l_progress := 'WMSINB-25232';
                    RAISE fnd_api.g_exc_error;
                  ELSE
                    --CALL CREATE_INV_LOT
                    /* INVCONV, replace the existing create_inv_lot call with a new call */
                    /*INVCONV , Perform lot validations and create the new lot.
                      Call Lot Create API INV_ROI_INTEGRATION_GRP.INV_NEW_LOT to create the new lot.
                      This shall also create lot specific conversions after creating the new Lot.
                      This replaces the existing procedure INV_LOT_API_PUB.CREATE_INV_LOT to create NEW LOT*/

                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                          x_return_status      		   => x_return_status
                                                         ,x_msg_data           		   => x_msg_data
                                                         ,x_msg_count          		   => x_msg_count
                                                         ,p_api_version	               => 1.0
                                                         ,p_init_msg_lst	            => FND_API.G_FALSE
                                                         ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                         ,p_transaction_type_id 	      => l_transaction_type_id
                                                         ,p_new_lot			            => 'Y'
                                                         ,p_item_id	 		            => l_item_id
                                                         ,p_to_organization_id		   => L_ORG_ID
                                                         ,p_lot_number			         => L_MTLT_REC.lot_number
                                                         ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                         ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                         ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                         ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                         ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                         ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                         ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                         ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                         ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                         ,p_rti_id	                  => L_RTI_ID
                                                         ,p_revision             	   => l_item_revision
                                                         ,p_subinventory_code  	      => L_SUB_CODE
                                                         ,p_locator_id           	   => l_loc_id
                                                         ,p_transaction_type           => l_transaction_type
                                                         ,p_parent_txn_type            => l_parent_txn_type
                                                         ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                         );

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                       print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                       print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF (x_return_status <> 'S') THEN
                      --raise error
                      l_progress := 'WMSINB-25325';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                    END IF;

                    INV_ROI_INTEGRATION_GRP.INV_NEW_LOT(
                                                x_return_status      		   => x_return_status
                                               ,x_msg_count          		   => x_msg_count
                                               ,x_msg_data           		   => x_msg_data
                                               ,p_api_version	               => 1.0
                                               ,p_init_msg_lst	               => FND_API.G_FALSE
                                               ,p_source_document_code			=> L_SOURCE_DOCUMENT_CODE
                                               ,p_item_id				         => l_item_id
                                               ,p_from_organization_id			=> L_FROM_ORG_ID
                                               ,p_to_organization_id	         => L_ORG_ID
                                               ,p_lot_number				      => L_MTLT_REC.lot_number
                                               ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                               ,p_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                               ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                               ,p_primary_unit_of_measure	   => l_rti_PRIMARY_UNIT_OF_MEASURE
                                               ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                               ,p_uom_code	                  => l_rti_UOM_CODE
                                               ,p_secondary_uom_code	         => l_rti_SECONDARY_UOM_CODE
                                               ,p_reason_id	                  => L_MTLT_REC.REASON_ID
                                               ,P_MLN_REC                     => L_MLN_REC
                                               ,p_mtlt_rowid	               => L_MTLT_REC.ROWID
                                               );

                    /*INVCONV ,*/
                    IF (l_debug = 1) THEN
                      print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                      print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_NEW_LOT return status: '||x_return_status||' : '||l_progress, 1);
                    END IF;

                    IF X_RETURN_STATUS <> 'S' THEN
                       --RAISE ERROR
                       l_progress := 'WMSINB-25352';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (l_debug = 1) THEN
                       print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                    END IF;
                    /* END IF ; --   IF (l_discrete_transaction) THEN*/
                  END IF; ---- IF (lot_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                  /*the comment for above end if was wrong*/
                ELSE --ELSIF (l_parent_txn_type = g_rtr) THEN
                  --raise an error
                  l_progress := 'WMSINB-25363';
                  RAISE fnd_api.g_exc_error;
                END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
              END IF;--IF (l_lot_exists = 1) THEN

              IF (l_serial_number_control_code IN (2,5,6)) THEN
                IF (l_debug = 1) THEN
                   print_debug('VALIDATE_LOT_SERIAL_INFO: LOT AND SERIAL CONTROLLED: '||l_progress, 1);
                   print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
                   print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
                   l_progress := 'WMSINB-25373';
                END IF;

                L_NUM_MSNT_RECS := 0;
                l_tot_msnt_serial_qty := 0;

                OPEN C_MSNT_LOTSERIAL(L_MTLT_REC.SERIAL_TRANSACTION_TEMP_ID);
                LOOP
                  FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;
                  EXIT WHEN C_MSNT_LOTSERIAL%NOTFOUND;

                  L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;
                  L_SERIAL_QUANTITY := INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
                                                                             L_MSNT_REC.TO_SERIAL_NUMBER);

                  l_tot_msnt_serial_qty := l_tot_msnt_serial_qty + l_serial_quantity;

                  INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
                  INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

                  IF (l_debug = 1) THEN
                    print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
                    l_progress := 'WMSINB-25398';
                  END IF;

                  --populate attributes table
                  l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
                  l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
                  l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
                  l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
                  l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
                  l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
                  l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
                  l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
                  l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
                  l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
                  l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
                  l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
                  l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
                  l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
                  l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
                  l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
                  l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
                  l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
                  l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
                  l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
                  l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
                  l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
                  l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
                  l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
                  l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
                  l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
                  l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
                  l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
                  l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
                  l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
                  l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
                  l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
                  l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
                  l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
                  l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
                  l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
                  l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
                  l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
                  l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
                  l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
                  l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
                  l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
                  l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
                  l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
                  l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
                  l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
                  l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
                  l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
                  l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
                  l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
                  l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
                  l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
                  l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
                  l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
                  l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
                  l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
                  l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
                  l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
                  l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
                  l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
                  l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
                  l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
                  l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
                  l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
                  l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
                  l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
                  l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
                  l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
                  l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
                  l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
                  l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
                  l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
                  l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
                  l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
                  l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
                  l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
                  l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
                  l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
                  l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
                  l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
                  l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
                  l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
                  l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
                  l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
                  l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
                  l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
                  l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
                  l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
                  l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
                  l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
                  l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
                  l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
                  l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
                  l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
                  l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
                  l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
                  l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
                  l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
                  l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
                  l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
                  l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
                  l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
                  l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
                  l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
                  l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
                  l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
                  l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
                  l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
                  l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
                  l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
                  l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
                  l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
                  l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
                  l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
                  l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
                  l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
                  l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
                  l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
                  l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
                  l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;

                  --validate the serials
                  FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP
                    l_progress := 'WMSINB-25404';
                    L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
                    if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
                       L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
                    else
                      L_SERIAL_NUMBER := SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
                                            LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -LENGTH(L_CUR_NUMBER))
                                         ||L_CUR_NUMBER;
                    End if;
                    l_progress := 'WMSINB-25412';

                    BEGIN
                       SELECT CURRENT_ORGANIZATION_ID
                         , current_status
                         , lot_number
                         , Decode(lpn_id,0,NULL,lpn_id)
                         , inspection_status
                         , group_mark_id
                         INTO L_CURR_ORG_ID
                         , l_curr_status
                         , l_curr_lot_num
                         , l_curr_lpn_id
                         , l_inspection_status
                         , l_group_mark_id
                         FROM MTL_SERIAL_NUMBERS
                         WHERE SERIAL_NUMBER = l_serial_number
                         AND inventory_item_id = l_item_id;

                       l_serial_exists := 1;
                       l_progress := 'WMSINB-25432';
                    EXCEPTION
                       WHEN no_data_found THEN
                          l_serial_exists := 0;
                          l_progress := 'WMSINB-25436';
                    END;

                    IF (l_debug = 1) THEN
                       print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
                       print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
                       l_progress := 'WMSINB-25449';
                    END IF;

                    IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
                       IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                    IF NOT (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                       --raise an error
                       l_progress := 'WMSINB-25456';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                  END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN

                  IF (l_serial_exists = 1) THEN
                    IF l_curr_org_id <> l_org_id THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25466';
                       RAISE fnd_api.g_exc_error;
                    ELSE
                       IF ((l_curr_lot_num IS NOT NULL) AND
                           (l_curr_lot_num <> l_mtlt_rec.lot_number)
                           AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25473';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF;

                    IF l_curr_status NOT IN (1,6) THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25482';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25490';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                       --validate and update the attributes.
                       inv_serial_number_pub.validate_update_serial_att
                         (x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          x_validation_status => l_validation_status,
                          p_serial_number     => l_serial_number,
                          p_organization_id   => l_org_id,
                          p_inventory_item_id => l_item_id,
                          p_serial_att_tbl    => l_serial_attributes_tbl,
                          p_validate_only     => FALSE
                          );

                       IF (l_validation_status <> 'Y'
                           OR x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-254960';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                    --UPDATE GROUP_MARK_ID TO -7937
                    IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25499';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                        ELSE --IF (l_serial_exists = 1) THEN
                    IF l_serial_number_control_code = 5 THEN
                       --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                       --(INCLUDING ATT VALIDATION)
                       --CREATE MSN
                      IF (l_transaction_type = 'CORRECT') THEN
                          l_transaction_action_id := 29;
                      ELSE
                          l_transaction_action_id := 1;
                      END IF;

                      inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                   , p_inventory_item_id => l_item_id
                                   , p_organization_id => l_org_id
                                   , p_from_serial_number => l_serial_number
                                   , p_to_serial_number => l_serial_number
                                   , p_initialization_date => SYSDATE
                                   , p_completion_date => NULL
                                   , p_ship_date => NULL
                                   , p_revision => l_item_revision
                                   , p_lot_number => l_mtlt_rec.lot_number
                                   , p_current_locator_id => l_loc_id
                                   , p_subinventory_code => l_sub_code
                                   , p_trx_src_id => NULL
                                   , p_unit_vendor_id => NULL
                                   , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
                                   , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                   , p_receipt_issue_type => NULL
                                   , p_txn_src_id => NULL
                                   , p_txn_src_name => NULL
                                   , p_txn_src_type_id => NULL
                                   , p_transaction_id => NULL
                                   , p_current_status => 1
                                   , p_parent_item_id => NULL
                                   , p_parent_serial_number => NULL
                                   , p_cost_group_id => NULL
                                   , p_transaction_action_id => l_transaction_action_id
                                   , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                   , p_status_id => NULL
                                   , p_inspection_status => NULL
                                   , x_object_id => l_object_id
                                   , x_return_status => x_return_status
                                   , x_msg_count => x_msg_count
                                   , x_msg_data => x_msg_data);

                      IF (x_return_status <> g_ret_sts_success) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-25505';
                        RAISE fnd_api.g_exc_error;
                      END IF;

                      --validate and update the attributes.
                      inv_serial_number_pub.validate_update_serial_att
                        (x_return_status     => x_return_status,
                         x_msg_count         => x_msg_count,
                         x_msg_data          => x_msg_data,
                         x_validation_status => l_validation_status,
                         p_serial_number     => l_serial_number,
                         p_organization_id   => l_org_id,
                         p_inventory_item_id => l_item_id,
                         p_serial_att_tbl    => l_serial_attributes_tbl,
                         p_validate_only     => FALSE
                         );

                      IF (l_validation_status <> 'Y'
                          OR x_return_status <> g_ret_sts_success) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-25545';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-25552';
                         RAISE fnd_api.g_exc_error;
                      END IF;
                    ELSE --IF l_serial_number_control_code = 5 THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25559';
                       RAISE fnd_api.g_exc_error;
                    END IF; --IF l_serial_number_control_code = 5 THEN
                  END IF; --IF (l_serial_exists = 1) THEN
                ELSIF (l_parent_txn_type = g_rtr) THEN --IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
                  IF (serial_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                    BEGIN
                       SELECT '1'
                         INTO L_DUMMY
                         FROM RCV_SERIALS_SUPPLY
                         WHERE TRANSACTION_ID = l_great_grand_parent_txn_id
                         AND SERIAL_NUM = L_SERIAL_NUMBER;

                       IF (l_curr_status <> 7) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25576';
                          RAISE fnd_api.g_exc_error;
                       END IF;

                      --Validate serial/group_mark_id to prevent entering duplicate serials
                      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-25587';
                        RAISE fnd_api.g_exc_error;
                      END IF;

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25596';
                          RAISE fnd_api.g_exc_error;
                      END IF;
                    EXCEPTION
                       WHEN NO_DATA_FOUND THEN
                          -- RAISE ERROR
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25604';
                          RAISE fnd_api.g_exc_error;
                    END;
                  ELSE --IF (serial_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                    IF (l_serial_exists = 1) THEN
                      IF l_curr_org_id <> l_org_id THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-25613';
                        RAISE fnd_api.g_exc_error;
                      ELSE
                        IF ((l_curr_lot_num IS NOT NULL) AND (l_curr_lot_num <> l_mtlt_rec.lot_number)
                            AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-25620';
                             RAISE fnd_api.g_exc_error;
                        END IF;
                      END IF;

                      IF l_curr_status NOT IN (1,6) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-25629';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-25637';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                        --validate and update the attributes.
                        inv_serial_number_pub.validate_update_serial_att
                          (x_return_status     => x_return_status,
                           x_msg_count         => x_msg_count,
                           x_msg_data          => x_msg_data,
                           x_validation_status => l_validation_status,
                           p_serial_number     => l_serial_number,
                           p_organization_id   => l_org_id,
                           p_inventory_item_id => l_item_id,
                           p_serial_att_tbl    => l_serial_attributes_tbl,
                           p_validate_only     => FALSE
                           );

                        IF (l_validation_status <> 'Y'
                          OR x_return_status <> g_ret_sts_success) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25642';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-25646';
                        RAISE fnd_api.g_exc_error;
                      END IF;
                    ELSE --IF (l_serial_exists = 1) THEN
                      IF l_serial_number_control_code = 5 THEN
                        --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                        --(INCLUDING ATT VALIDATION)
                        --CREATE MSN
                        IF (l_transaction_type = 'CORRECT') THEN
                           l_transaction_action_id := 29;
                        ELSE
                           l_transaction_action_id := 1;
                        END IF;

                        inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                        , p_inventory_item_id => l_item_id
                                        , p_organization_id => l_org_id
                                        , p_from_serial_number => l_serial_number
                                        , p_to_serial_number => l_serial_number
                                        , p_initialization_date => SYSDATE
                                        , p_completion_date => NULL
                                        , p_ship_date => NULL
                                        , p_revision => l_item_revision
                                        , p_lot_number => l_mtlt_rec.lot_number
                                        , p_current_locator_id => l_loc_id
                                        , p_subinventory_code => l_sub_code
                                        , p_trx_src_id => NULL
                                        , p_unit_vendor_id => NULL
                                        , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
                                        , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                        , p_receipt_issue_type => NULL
                                        , p_txn_src_id => NULL
                                        , p_txn_src_name => NULL
                                        , p_txn_src_type_id => NULL
                                        , p_transaction_id => NULL
                                        , p_current_status => 1
                                        , p_parent_item_id => NULL
                                        , p_parent_serial_number => NULL
                                        , p_cost_group_id => NULL
                                        , p_transaction_action_id => l_transaction_action_id
                                        , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                        , p_status_id => NULL
                                        , p_inspection_status => NULL
                                        , x_object_id => l_object_id
                                        , x_return_status => x_return_status
                                        , x_msg_count => x_msg_count
                                        , x_msg_data => x_msg_data);

                        IF (x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25650';
                          RAISE fnd_api.g_exc_error;
                        END IF;

                        --validate and update the attributes.
                        inv_serial_number_pub.validate_update_serial_att
                          (x_return_status     => x_return_status,
                           x_msg_count         => x_msg_count,
                           x_msg_data          => x_msg_data,
                           x_validation_status => l_validation_status,
                           p_serial_number     => l_serial_number,
                           p_organization_id   => l_org_id,
                           p_inventory_item_id => l_item_id,
                           p_serial_att_tbl    => l_serial_attributes_tbl,
                           p_validate_only     => FALSE
                           );

                        IF (l_validation_status <> 'Y' OR x_return_status <> g_ret_sts_success) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25691';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25699';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      ELSE --IF l_serial_number_control_code = 5 THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-25706';
                        RAISE fnd_api.g_exc_error;
                      END IF; --IF l_serial_number_control_code = 5 THEN
                    END IF; --IF (l_serial_exists = 1) THEN
                  END IF; --IF (serial_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                ELSE --ELSIF (l_parent_txn_type = g_rtr) THEN
                  IF (l_parent_txn_type <> 'DELIVER') THEN
                    IF NOT (serial_entered_on_parent(l_parent_transaction_id)) THEN
                      --raise an error
                      l_progress := 'WMSINB-25715';
                      RAISE fnd_api.g_exc_error;
                    ELSE
                      BEGIN
                        SELECT '1'
                          INTO L_DUMMY
                          FROM RCV_SERIALS_SUPPLY
                          WHERE TRANSACTION_ID = l_parent_transaction_id
                          AND SERIAL_NUM = L_SERIAL_NUMBER;

                        IF (l_curr_status <> 7) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25729';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --Validate serial/group_mark_id to prevent
                        --entering of duplicate serials

                        IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25740';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25749';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                           -- RAISE ERROR
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-25757';
                           RAISE fnd_api.g_exc_error;
                       END;
                    END IF; --IF NOT (serial_entered_on_parent(l_parent_transaction_id)) THEN
                  ELSE --IF (l_parent_txn_type <> 'DELIVER') THEN
                    IF l_curr_org_id <> l_org_id THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25766';
                       RAISE fnd_api.g_exc_error;
                    ELSE
                       IF ((l_curr_lot_num IS NOT NULL)
                           AND (l_curr_lot_num <>
                          l_mtlt_rec.lot_number)
                           AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25773';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF;

                    IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                       IF l_curr_status NOT IN (1,6) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25783';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    --Serial tagging: modified condition to validate current_status 3 for serial controlled items
                    --ELSE --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                    ELSIF l_serial_number_control_code in (2,5) THEN
                       IF (l_curr_status <> 3) THEN
                          --raise error
                          fnd_message.set_name('INV','INV_FAIL_VALIDATE_SERIAL');
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25791';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF; --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN

                    IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25800';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                       --validate and update the attributes.
                       inv_serial_number_pub.validate_update_serial_att
                         (x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          x_validation_status => l_validation_status,
                          p_serial_number     => l_serial_number,
                          p_organization_id   => l_org_id,
                          p_inventory_item_id => l_item_id,
                          p_serial_att_tbl    => l_serial_attributes_tbl,
                          p_validate_only     => FALSE
                          );

                       IF (l_validation_status <> 'Y'
                           OR x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-25805';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                    --UPDATE GROUP_MARK_ID TO -7937
                    IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-25809';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                  END IF; --IF (l_parent_txn_type <> 'DELIVER') THEN
                END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
              END LOOP; -- FOR 1..L_SERIAL_QUANTITY
            END LOOP; --FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;

            CLOSE c_msnt_lotserial;

            IF (l_num_msnt_recs > 0) THEN
              IF l_mtlt_rec.primary_quantity <> l_tot_msnt_serial_qty THEN
                --raise error
                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                fnd_msg_pub.ADD;
                l_progress := 'WMSINB-25824';
                RAISE fnd_api.g_exc_error;
              END IF;
            ELSE
               IF (l_serial_number_control_code IN (2,5)
                  OR (l_serial_number_control_code = 6 AND l_source_document_code IN ('RMA','REQ','INVENTORY')))
               THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-25831';
                  RAISE fnd_api.g_exc_error;
               END IF;
            END IF;

          END IF; -- IF (L_SERIAL_NUMBER_CONTROL_CODE IN (2,5,6)) THEN
        END LOOP; --FETCH C_MTLT INTO L_MTLT_REC;

        CLOSE c_mtlt;

        /* Bug 4546519 : l_tot_mtlt_prim_qty is a computed floating point number.
         **  In the following condition, it is necessary to use round function for
         **  comparing the floating point values.
         */

        IF (l_num_mtlt_recs > 0) THEN
          IF (ROUND(l_tot_mtlt_prim_qty,5) <> ROUND(Abs(l_rti_primary_qty),5)) THEN
            -- Bug# 4225766 Compare transaction qty there can be a difference in primary qty
            -- if there is a lot specific conversion
            IF (ROUND(l_tot_mtlt_trans_qty,5) <> ROUND(Abs(l_rti_trans_qty),5)) THEN -- Bug# 4225766
              --raise error
              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
              fnd_msg_pub.ADD;
              l_progress := 'WMSINB-25845';
              RAISE fnd_api.g_exc_error;
            END IF; -- Bug# 4225766
          END IF;
        ELSE
          IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            IF (l_grand_parent_txn_type = 'DELIVER') THEN
               --raise an error
               l_progress := 'WMSINB-25852';
               RAISE fnd_api.g_exc_error;
            ELSE
              IF (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                --raise error;
                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                fnd_msg_pub.ADD;
                l_progress := 'WMSINB-25859';
                RAISE fnd_api.g_exc_error;
              END IF;
            END IF; --IF (l_grand_parent_txn_type = 'DELIVER') THEN
          ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            IF (l_parent_txn_type <> 'DELIVER') THEN
              IF (lot_entered_on_parent(l_parent_transaction_id)) THEN
                --raise an error
                l_progress := 'WMSINB-25867';
                RAISE fnd_api.g_exc_error;
              END IF;
            ELSE
               --raise an error
               l_progress := 'WMSINB-25872';
               RAISE fnd_api.g_exc_error;
            END IF; -- IF (l_parent_txn_type <> 'DELIVER') THEN
          END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
        END IF; --IF (l_num_mtlt_recs > 0) THEN
      ELSIF (l_serial_number_control_code IN (2,5,6)) THEN -- IF (l_lot_control_code = 2) THEN
        IF (l_debug = 1) THEN
          print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROLLED: '||l_progress, 1);
          print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
          print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
          l_progress := 'WMSINB-25882';
        END IF;

        L_NUM_MSNT_RECS := 0;
        l_tot_msnt_serial_qty := 0;

        OPEN C_MSNT(L_RTI_ID);
        LOOP
          FETCH C_MSNT INTO L_MSNT_REC;
          EXIT WHEN C_MSNT%NOTFOUND;

          L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;
          L_SERIAL_QUANTITY := INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
                                                                     L_MSNT_REC.TO_SERIAL_NUMBER);
          l_tot_msnt_serial_qty := l_tot_msnt_serial_qty + l_serial_quantity;

          INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
          INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

          IF (l_debug = 1) THEN
            print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
            l_progress := 'WMSINB-25907';
          END IF;

          --populate attributes table
          l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
          l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
          l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
          l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
          l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
          l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
          l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
          l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
          l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
          l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
          l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
          l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
          l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
          l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
          l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
          l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
          l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
          l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
          l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
          l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
          l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
          l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
          l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
          l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
          l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
          l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
          l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
          l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
          l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
          l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
          l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
          l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
          l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
          l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
          l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
          l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
          l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
          l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
          l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
          l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
          l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
          l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
          l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
          l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
          l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
          l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
          l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
          l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
          l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
          l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
          l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
          l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
          l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
          l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
          l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
          l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
          l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
          l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
          l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
          l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
          l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
          l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
          l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
          l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
          l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
          l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
          l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
          l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
          l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
          l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
          l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
          l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
          l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
          l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
          l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
          l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
          l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
          l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
          l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
          l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
          l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
          l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
          l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
          l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
          l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
          l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
          l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
          l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
          l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
          l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
          l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
          l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
          l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
          l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
          l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
          l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
          l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
          l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
          l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
          l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
          l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
          l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
          l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
          l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
          l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
          l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
          l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
          l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
          l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
          l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
          l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
          l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
          l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
          l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
          l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
          l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
          l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
          l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
          l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
          l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;

          --Validate the serials
          FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP

            l_progress := 'WMSINB-25913';
            L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
            if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
              L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
            else
              L_SERIAL_NUMBER :=  SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
                                    LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) - LENGTH(L_CUR_NUMBER))
                                  ||L_CUR_NUMBER;
            End if;

            l_progress := 'WMSINB-25921';

            BEGIN
              SELECT CURRENT_ORGANIZATION_ID
              , current_status
              , lot_number
              , Decode(lpn_id,0,NULL,lpn_id)
              , inspection_status
              , group_mark_id
              INTO L_CURR_ORG_ID
              , l_curr_status
              , l_curr_lot_num
              , l_curr_lpn_id
              , l_inspection_status
              , l_group_mark_id
              FROM MTL_SERIAL_NUMBERS
              WHERE SERIAL_NUMBER = l_serial_number
              AND inventory_item_id = l_item_id;

              l_serial_exists := 1;
              l_progress := 'WMSINB-25941';
            EXCEPTION
              WHEN no_data_found THEN
                l_serial_exists := 0;
                l_progress := 'WMSINB-25945';
            END;

            IF (l_debug = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
              l_progress := 'WMSINB-25958';
            END IF;

            IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
              IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                IF NOT (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                  --raise an error
                  l_progress := 'WMSINB-25965';
                  RAISE fnd_api.g_exc_error;
                END IF;
              END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN

              IF (l_serial_exists = 1) THEN
                IF l_curr_org_id <> l_org_id THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-25975';
                  RAISE fnd_api.g_exc_error;
                ELSE
                  IF (l_curr_lot_num IS NOT NULL) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-25982';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                END IF;

                IF l_curr_status NOT IN (1,6) THEN
                    --raise error
                    fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                    fnd_msg_pub.ADD;
                    l_progress := 'WMSINB-25991';
                    RAISE fnd_api.g_exc_error;
                END IF;

                IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-25999';
                  RAISE fnd_api.g_exc_error;
                END IF;

                IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                   --validate and update the attributes.
                   inv_serial_number_pub.validate_update_serial_att
                     (x_return_status     => x_return_status,
                      x_msg_count         => x_msg_count,
                      x_msg_data          => x_msg_data,
                      x_validation_status => l_validation_status,
                      p_serial_number     => l_serial_number,
                      p_organization_id   => l_org_id,
                      p_inventory_item_id => l_item_id,
                      p_serial_att_tbl    => l_serial_attributes_tbl,
                      p_validate_only     => FALSE
                      );

                   IF (l_validation_status <> 'Y'
                       OR x_return_status <> g_ret_sts_success) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-26005';
                      RAISE fnd_api.g_exc_error;
                   END IF;
                END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                --UPDATE GROUP_MARK_ID TO -7937
                IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                   --raise error
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-26008';
                   RAISE fnd_api.g_exc_error;
                END IF;
              ELSE --IF (l_serial_exists = 1) THEN
                IF l_serial_number_control_code = 5 THEN
                  --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                  --(INCLUDING ATT VALIDATION)
                  --CREATE MSN
                  IF (l_transaction_type = 'CORRECT') THEN
                     l_transaction_action_id := 29;
                  ELSE
                     l_transaction_action_id := 1;
                  END IF;

                  inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                          , p_inventory_item_id => l_item_id
                          , p_organization_id => l_org_id
                          , p_from_serial_number => l_serial_number
                          , p_to_serial_number => l_serial_number
                          , p_initialization_date => SYSDATE
                          , p_completion_date => NULL
                          , p_ship_date => NULL
                          , p_revision => l_item_revision
                          , p_lot_number => NULL
                          , p_current_locator_id => l_loc_id
                          , p_subinventory_code => l_sub_code
                          , p_trx_src_id => NULL
                          , p_unit_vendor_id => NULL
                          , p_vendor_lot_number => NULL
                          , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                          , p_receipt_issue_type => NULL
                          , p_txn_src_id => NULL
                          , p_txn_src_name => NULL
                          , p_txn_src_type_id => NULL
                          , p_transaction_id => NULL
                          , p_current_status => 1
                          , p_parent_item_id => NULL
                          , p_parent_serial_number => NULL
                          , p_cost_group_id => NULL
                          , p_transaction_action_id => l_transaction_action_id
                          , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                          , p_status_id => NULL
                          , p_inspection_status => NULL
                          , x_object_id => l_object_id
                          , x_return_status => x_return_status
                          , x_msg_count => x_msg_count
                          , x_msg_data => x_msg_data);

                  IF (x_return_status <> g_ret_sts_success) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26015';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  --validate and update the attributes.
                  inv_serial_number_pub.validate_update_serial_att
                    (x_return_status     => x_return_status,
                     x_msg_count         => x_msg_count,
                     x_msg_data          => x_msg_data,
                     x_validation_status => l_validation_status,
                     p_serial_number     => l_serial_number,
                     p_organization_id   => l_org_id,
                     p_inventory_item_id => l_item_id,
                     p_serial_att_tbl    => l_serial_attributes_tbl,
                     p_validate_only     => FALSE
                     );

                  IF (l_validation_status <> 'Y' OR x_return_status <> g_ret_sts_success) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-29051';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  --UPDATE GROUP_MARK_ID TO -7937
                  IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26061';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                ELSE --IF l_serial_number_control_code = 5 THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-26068';
                  RAISE fnd_api.g_exc_error;
                END IF; --IF l_serial_number_control_code = 5 THEN
              END IF; --IF (l_serial_exists = 1) THEN
            ELSIF (l_parent_txn_type = g_rtr) THEN --IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
              IF (serial_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                BEGIN
                  SELECT '1'
                    INTO L_DUMMY
                    FROM RCV_SERIALS_SUPPLY
                    WHERE TRANSACTION_ID = l_great_grand_parent_txn_id
                    AND SERIAL_NUM = L_SERIAL_NUMBER;

                  IF (l_curr_status <> 7) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26085';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  --Validate serial/group_mark_id to prevent entering of duplicate serials
                  IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26096';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  --UPDATE GROUP_MARK_ID TO -7937
                  IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26105';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     -- RAISE ERROR
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26113';
                     RAISE fnd_api.g_exc_error;
                END;
              ELSE --IF (serial_entered_on_parent(l_great_grand_parent_txn_id)) THEN
                IF (l_serial_exists = 1) THEN
                  IF l_curr_org_id <> l_org_id THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26122';
                     RAISE fnd_api.g_exc_error;
                  ELSE
                     IF (l_curr_lot_num IS NOT NULL) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-26129';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  END IF;

                  IF l_curr_status NOT IN (1,6) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26138';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26146';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                     --validate and update the attributes.
                     inv_serial_number_pub.validate_update_serial_att
                       (x_return_status     => x_return_status,
                        x_msg_count         => x_msg_count,
                        x_msg_data          => x_msg_data,
                        x_validation_status => l_validation_status,
                        p_serial_number     => l_serial_number,
                        p_organization_id   => l_org_id,
                        p_inventory_item_id => l_item_id,
                        p_serial_att_tbl    => l_serial_attributes_tbl,
                        p_validate_only     => FALSE
                        );

                     IF (l_validation_status <> 'Y'
                         OR x_return_status <> g_ret_sts_success) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-26152';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                  --UPDATE GROUP_MARK_ID TO -7937
                  IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26155';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                ELSE --IF (l_serial_exists = 1) THEN
                  IF l_serial_number_control_code = 5 THEN
                     --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                     --(INCLUDING ATT VALIDATION)
                     --CREATE MSN
                    IF (l_transaction_type = 'CORRECT') THEN
                      l_transaction_action_id := 29;
                    ELSE
                      l_transaction_action_id := 1;
                    END IF;

                    inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                               , p_inventory_item_id => l_item_id
                               , p_organization_id => l_org_id
                               , p_from_serial_number => l_serial_number
                               , p_to_serial_number => l_serial_number
                               , p_initialization_date => SYSDATE
                               , p_completion_date => NULL
                               , p_ship_date => NULL
                               , p_revision => l_item_revision
                               , p_lot_number => NULL
                               , p_current_locator_id => l_loc_id
                               , p_subinventory_code => l_sub_code
                               , p_trx_src_id => NULL
                               , p_unit_vendor_id => NULL
                               , p_vendor_lot_number => NULL
                               , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                               , p_receipt_issue_type => NULL
                               , p_txn_src_id => NULL
                               , p_txn_src_name => NULL
                               , p_txn_src_type_id => NULL
                               , p_transaction_id => NULL
                               , p_current_status => 1
                               , p_parent_item_id => NULL
                               , p_parent_serial_number => NULL
                               , p_cost_group_id => NULL
                               , p_transaction_action_id => l_transaction_action_id
                               , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                               , p_status_id => NULL
                               , p_inspection_status => NULL
                               , x_object_id => l_object_id
                               , x_return_status => x_return_status
                               , x_msg_count => x_msg_count
                               , x_msg_data => x_msg_data);

                    IF (x_return_status <> g_ret_sts_success) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-26160';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    --validate and update the attributes.
                    inv_serial_number_pub.validate_update_serial_att
                         (x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          x_validation_status => l_validation_status,
                          p_serial_number     => l_serial_number,
                          p_organization_id   => l_org_id,
                          p_inventory_item_id => l_item_id,
                          p_serial_att_tbl    => l_serial_attributes_tbl,
                          p_validate_only     => FALSE
                          );

                    IF (l_validation_status <> 'Y' OR x_return_status <> g_ret_sts_success) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-26200';
                      RAISE fnd_api.g_exc_error;
                    END IF;

                    --UPDATE GROUP_MARK_ID TO -7937
                    IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-26208';
                      RAISE fnd_api.g_exc_error;
                    END IF;
                  ELSE --IF l_serial_number_control_code = 5 THEN
                    --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26215';
                     RAISE fnd_api.g_exc_error;
                  END IF; --IF l_serial_number_control_code = 5 THEN
                END IF; --IF (l_serial_exists = 1) THEN
              END IF; --IF (serial_entered_on_parent(l_great_grand_parent_txn_id)) THEN
            ELSE --ELSIF (l_parent_txn_type = g_rtr) THEN
              IF (l_parent_txn_type <> 'DELIVER') THEN
                IF NOT (serial_entered_on_parent(l_parent_transaction_id)) THEN
                  --raise an error
                  l_progress := 'WMSINB-26224';
                  RAISE fnd_api.g_exc_error;
                ELSE
                  BEGIN
                     SELECT '1'
                       INTO L_DUMMY
                       FROM RCV_SERIALS_SUPPLY
                       WHERE TRANSACTION_ID = l_parent_transaction_id
                       AND SERIAL_NUM = L_SERIAL_NUMBER;

                     IF (l_curr_status <> 7) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-26238';
                        RAISE fnd_api.g_exc_error;
                     END IF;

                     --Validate serial/group_mark_id to prevent
                     --entering of duplicate serials

                     IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-26249';
                        RAISE fnd_api.g_exc_error;
                     END IF;

                     --UPDATE GROUP_MARK_ID TO -7937
                     IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-26258';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                        -- RAISE ERROR
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-26266';
                        RAISE fnd_api.g_exc_error;
                  END;
                END IF;  --IF NOT (serial_entered_on_parent(l_parent_transaction_id)) THEN
              ELSE --IF (l_parent_txn_type <> 'DELIVER') THEN
                IF l_curr_org_id <> l_org_id THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-26275';
                  RAISE fnd_api.g_exc_error;
                ELSE
                  IF (l_curr_lot_num IS NOT NULL) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26282';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                END IF;

                IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                  IF l_curr_status NOT IN (1,6) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26292';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                --Serial tagging: modified condition to validate current_status 3 for serial controlled items
                ELSIF l_serial_number_control_code in (2,5) THEN
                  --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                  IF (l_curr_status <> 3) THEN
                     --raise error
                     fnd_message.set_name('INV','INV_FAIL_VALIDATE_SERIAL');
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-26300';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                END IF; --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN

                IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-26309';
                  RAISE fnd_api.g_exc_error;
                END IF;

                IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                   --validate and update the attributes.
                   inv_serial_number_pub.validate_update_serial_att
                     (x_return_status     => x_return_status,
                      x_msg_count         => x_msg_count,
                      x_msg_data          => x_msg_data,
                      x_validation_status => l_validation_status,
                      p_serial_number     => l_serial_number,
                      p_organization_id   => l_org_id,
                      p_inventory_item_id => l_item_id,
                      p_serial_att_tbl    => l_serial_attributes_tbl,
                      p_validate_only     => FALSE
                      );

                   IF (l_validation_status <> 'Y' OR x_return_status <> g_ret_sts_success) THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-26315';
                      RAISE fnd_api.g_exc_error;
                   END IF;
                END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                --UPDATE GROUP_MARK_ID TO -7937
                IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-26318';
                  RAISE fnd_api.g_exc_error;
                END IF;
              END IF; --IF (l_parent_txn_type <> 'DELIVER') THEN
            END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc)) THEN
          END LOOP; -- FOR 1..L_SERIAL_QUANTITY
        END LOOP; --FETCH C_MSNT INTO L_MSNT_REC;

        CLOSE c_msnt;

        IF (l_num_msnt_recs > 0) THEN
          IF Abs(l_rti_primary_qty) <> l_tot_msnt_serial_qty THEN
            --raise error
             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
             fnd_msg_pub.ADD;
             l_progress := 'WMSINB-26333';
             RAISE fnd_api.g_exc_error;
          END IF;
        ELSE
          IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            IF (l_grand_parent_txn_type = 'DELIVER') THEN
              --raise an error
              l_progress := 'WMSINB-26340';
              RAISE fnd_api.g_exc_error;
            ELSE --IF (l_grand_parent_txn_type = 'DELIVER') THEN
              IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                 --raise on error
                 l_progress := 'WMSINB-26345';
                 RAISE fnd_api.g_exc_error;
              END IF;
            END IF; --IF (l_grand_parent_txn_type = 'DELIVER') THEN
          ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            IF (l_parent_txn_type = 'DELIVER') THEN
              IF (l_serial_number_control_code IN (2,5)
                OR (l_serial_number_control_code = 6
                AND l_source_document_code = 'RMA')) THEN
                   --raise an error
                   l_progress := 'WMSINB-26352';
                   RAISE fnd_api.g_exc_error;
              END IF;
            ELSE
              IF (serial_entered_on_parent(l_parent_transaction_id)) THEN
                 --raise an error
                 l_progress := 'WMSINB-26357';
                 RAISE fnd_api.g_exc_error;
              END IF;
            END IF; --IF (l_parent_txn_type = 'DELIVER') THEN
          END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
        END IF; --IF (l_num_msnt_recs > 0) THEN
      END IF; --IF (l_lot_control_code = 2) THEN
    ELSIF (l_transaction_type = 'CORRECT' AND l_rti_primary_qty > 0) THEN
	                              -- opm change bug# 3061052 added l_opm_lot_ctl check
           /*INVCONV , Remove OPM specific l_opm_lot_ctl check , Punit Kumar*/
      IF (l_lot_control_code = 2 /* or l_opm_lot_ctl=1 */) THEN
        IF (l_debug = 1) THEN
          print_debug('VALIDATE_LOT_SERIAL_INFO: Lot Controlled :'||l_progress, 1);
          l_progress := 'WMSINB-26368';
        END IF;

        l_num_mtlt_recs := 0;
        l_tot_mtlt_prim_qty := 0;
        l_tot_mtlt_trans_qty := 0; -- Bug# 4225766

        OPEN C_MTLT(L_RTI_ID);
        LOOP
          FETCH C_MTLT INTO L_MTLT_REC;
          EXIT WHEN C_MTLT%NOTFOUND;
           /* INVCONV , get L_MTLT_REC values into l_mln_rec which shall be passed to INV_NEW_LOT for lot creation */
          IF (l_debug = 1) THEN
              print_debug('INVCONV,Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);
          END IF;

          l_mln_rec.LOT_NUMBER                := L_MTLT_REC.LOT_NUMBER                    ;
          l_mln_rec.LAST_UPDATE_DATE          := SYSDATE                                  ;
          l_mln_rec.LAST_UPDATED_BY           := L_MTLT_REC.LAST_UPDATED_BY               ;
          l_mln_rec.CREATION_DATE             := SYSDATE                                  ;
          l_mln_rec.CREATED_BY                := L_MTLT_REC.CREATED_BY                    ;
          l_mln_rec.LAST_UPDATE_LOGIN         := L_MTLT_REC.LAST_UPDATE_LOGIN             ;
          l_mln_rec.EXPIRATION_DATE           := L_MTLT_REC.LOT_EXPIRATION_DATE               ;
          l_mln_rec.ATTRIBUTE_CATEGORY        := L_MTLT_REC.ATTRIBUTE_CATEGORY            ;
          l_mln_rec.ATTRIBUTE1                := L_MTLT_REC.ATTRIBUTE1                    ;
          l_mln_rec.ATTRIBUTE2                := L_MTLT_REC.ATTRIBUTE2                    ;
          l_mln_rec.ATTRIBUTE3                := L_MTLT_REC.ATTRIBUTE3                    ;
          l_mln_rec.ATTRIBUTE4                := L_MTLT_REC.ATTRIBUTE4                    ;
          l_mln_rec.ATTRIBUTE5                := L_MTLT_REC.ATTRIBUTE5                    ;
          l_mln_rec.ATTRIBUTE6                := L_MTLT_REC.ATTRIBUTE6                    ;
          l_mln_rec.ATTRIBUTE7                := L_MTLT_REC.ATTRIBUTE7                    ;
          l_mln_rec.ATTRIBUTE8                := L_MTLT_REC.ATTRIBUTE8                    ;
          l_mln_rec.ATTRIBUTE9                := L_MTLT_REC.ATTRIBUTE9                    ;
          l_mln_rec.ATTRIBUTE10               := L_MTLT_REC.ATTRIBUTE10                   ;
          l_mln_rec.ATTRIBUTE11               := L_MTLT_REC.ATTRIBUTE11                   ;
          l_mln_rec.ATTRIBUTE12               := L_MTLT_REC.ATTRIBUTE12                   ;
          l_mln_rec.ATTRIBUTE13               := L_MTLT_REC.ATTRIBUTE13                   ;
          l_mln_rec.ATTRIBUTE14               := L_MTLT_REC.ATTRIBUTE14                   ;
          l_mln_rec.ATTRIBUTE15               := L_MTLT_REC.ATTRIBUTE15                   ;
          l_mln_rec.REQUEST_ID                := L_MTLT_REC.REQUEST_ID                    ;
          l_mln_rec.PROGRAM_APPLICATION_ID    := L_MTLT_REC.PROGRAM_APPLICATION_ID        ;
          l_mln_rec.PROGRAM_ID                := L_MTLT_REC.PROGRAM_ID                    ;
          l_mln_rec.PROGRAM_UPDATE_DATE       := L_MTLT_REC.PROGRAM_UPDATE_DATE           ;
          l_mln_rec.DESCRIPTION               := L_MTLT_REC.DESCRIPTION                   ;
          l_mln_rec.VENDOR_NAME               := L_MTLT_REC.VENDOR_NAME                   ;
          l_mln_rec.SUPPLIER_LOT_NUMBER       := L_MTLT_REC.SUPPLIER_LOT_NUMBER           ;
          l_mln_rec.GRADE_CODE                := L_MTLT_REC.GRADE_CODE                    ;
          l_mln_rec.ORIGINATION_DATE          := L_MTLT_REC.ORIGINATION_DATE              ;
          l_mln_rec.DATE_CODE                 := L_MTLT_REC.DATE_CODE                     ;
          l_mln_rec.STATUS_ID                 := L_MTLT_REC.STATUS_ID                     ;
          l_mln_rec.CHANGE_DATE               := L_MTLT_REC.CHANGE_DATE                   ;
          l_mln_rec.AGE                       := L_MTLT_REC.AGE                           ;
          l_mln_rec.RETEST_DATE               := L_MTLT_REC.RETEST_DATE                   ;
          l_mln_rec.MATURITY_DATE             := L_MTLT_REC.MATURITY_DATE                 ;
          l_mln_rec.LOT_ATTRIBUTE_CATEGORY    := L_MTLT_REC.LOT_ATTRIBUTE_CATEGORY        ;
          l_mln_rec.ITEM_SIZE                 := L_MTLT_REC.ITEM_SIZE                     ;
          l_mln_rec.COLOR                     := L_MTLT_REC.COLOR                         ;
          l_mln_rec.VOLUME                    := L_MTLT_REC.VOLUME                        ;
          l_mln_rec.VOLUME_UOM                := L_MTLT_REC.VOLUME_UOM                    ;
          l_mln_rec.PLACE_OF_ORIGIN           := L_MTLT_REC.PLACE_OF_ORIGIN               ;
          l_mln_rec.BEST_BY_DATE              := L_MTLT_REC.BEST_BY_DATE                  ;
          l_mln_rec.LENGTH                    := L_MTLT_REC.LENGTH                        ;
          l_mln_rec.LENGTH_UOM                := L_MTLT_REC.LENGTH_UOM                    ;
          l_mln_rec.RECYCLED_CONTENT          := L_MTLT_REC.RECYCLED_CONTENT              ;
          l_mln_rec.THICKNESS                 := L_MTLT_REC.THICKNESS                     ;
          l_mln_rec.THICKNESS_UOM             := L_MTLT_REC.THICKNESS_UOM                 ;
          l_mln_rec.WIDTH                     := L_MTLT_REC.WIDTH                         ;
          l_mln_rec.WIDTH_UOM                 := L_MTLT_REC.WIDTH_UOM                     ;
          l_mln_rec.CURL_WRINKLE_FOLD         := L_MTLT_REC.CURL_WRINKLE_FOLD             ;
          l_mln_rec.C_ATTRIBUTE1              := L_MTLT_REC.C_ATTRIBUTE1                  ;
          l_mln_rec.C_ATTRIBUTE2              := L_MTLT_REC.C_ATTRIBUTE2                  ;
          l_mln_rec.C_ATTRIBUTE3              := L_MTLT_REC.C_ATTRIBUTE3                  ;
          l_mln_rec.C_ATTRIBUTE4              := L_MTLT_REC.C_ATTRIBUTE4                  ;
          l_mln_rec.C_ATTRIBUTE5              := L_MTLT_REC.C_ATTRIBUTE5                  ;
          l_mln_rec.C_ATTRIBUTE6              := L_MTLT_REC.C_ATTRIBUTE6                  ;
          l_mln_rec.C_ATTRIBUTE7              := L_MTLT_REC.C_ATTRIBUTE7                  ;
          l_mln_rec.C_ATTRIBUTE8              := L_MTLT_REC.C_ATTRIBUTE8                  ;
          l_mln_rec.C_ATTRIBUTE9              := L_MTLT_REC.C_ATTRIBUTE9                  ;
          l_mln_rec.C_ATTRIBUTE10             := L_MTLT_REC.C_ATTRIBUTE10                 ;
          l_mln_rec.C_ATTRIBUTE11             := L_MTLT_REC.C_ATTRIBUTE11                 ;
          l_mln_rec.C_ATTRIBUTE12             := L_MTLT_REC.C_ATTRIBUTE12                 ;
          l_mln_rec.C_ATTRIBUTE13             := L_MTLT_REC.C_ATTRIBUTE13                 ;
          l_mln_rec.C_ATTRIBUTE14             := L_MTLT_REC.C_ATTRIBUTE14                 ;
          l_mln_rec.C_ATTRIBUTE15             := L_MTLT_REC.C_ATTRIBUTE15                 ;
          l_mln_rec.C_ATTRIBUTE16             := L_MTLT_REC.C_ATTRIBUTE16                 ;
          l_mln_rec.C_ATTRIBUTE17             := L_MTLT_REC.C_ATTRIBUTE17                 ;
          l_mln_rec.C_ATTRIBUTE18             := L_MTLT_REC.C_ATTRIBUTE18                 ;
          l_mln_rec.C_ATTRIBUTE19             := L_MTLT_REC.C_ATTRIBUTE19                 ;
          l_mln_rec.C_ATTRIBUTE20             := L_MTLT_REC.C_ATTRIBUTE20                 ;
          l_mln_rec.D_ATTRIBUTE1              := L_MTLT_REC.D_ATTRIBUTE1                  ;
          l_mln_rec.D_ATTRIBUTE2              := L_MTLT_REC.D_ATTRIBUTE2                  ;
          l_mln_rec.D_ATTRIBUTE3              := L_MTLT_REC.D_ATTRIBUTE3                  ;
          l_mln_rec.D_ATTRIBUTE4              := L_MTLT_REC.D_ATTRIBUTE4                  ;
          l_mln_rec.D_ATTRIBUTE5              := L_MTLT_REC.D_ATTRIBUTE5                  ;
          l_mln_rec.D_ATTRIBUTE6              := L_MTLT_REC.D_ATTRIBUTE6                  ;
          l_mln_rec.D_ATTRIBUTE7              := L_MTLT_REC.D_ATTRIBUTE7                  ;
          l_mln_rec.D_ATTRIBUTE8              := L_MTLT_REC.D_ATTRIBUTE8                  ;
          l_mln_rec.D_ATTRIBUTE9              := L_MTLT_REC.D_ATTRIBUTE9                  ;
          l_mln_rec.D_ATTRIBUTE10             := L_MTLT_REC.D_ATTRIBUTE10                 ;
          l_mln_rec.N_ATTRIBUTE1              := L_MTLT_REC.N_ATTRIBUTE1                  ;
          l_mln_rec.N_ATTRIBUTE2              := L_MTLT_REC.N_ATTRIBUTE2                  ;
          l_mln_rec.N_ATTRIBUTE3              := L_MTLT_REC.N_ATTRIBUTE3                  ;
          l_mln_rec.N_ATTRIBUTE4              := L_MTLT_REC.N_ATTRIBUTE4                  ;
          l_mln_rec.N_ATTRIBUTE5              := L_MTLT_REC.N_ATTRIBUTE5                  ;
          l_mln_rec.N_ATTRIBUTE6              := L_MTLT_REC.N_ATTRIBUTE6                  ;
          l_mln_rec.N_ATTRIBUTE7              := L_MTLT_REC.N_ATTRIBUTE7                  ;
          l_mln_rec.N_ATTRIBUTE8              := L_MTLT_REC.N_ATTRIBUTE8                  ;
          l_mln_rec.N_ATTRIBUTE9              := L_MTLT_REC.N_ATTRIBUTE9                  ;
          l_mln_rec.N_ATTRIBUTE10             := L_MTLT_REC.N_ATTRIBUTE10                 ;
          l_mln_rec.VENDOR_ID                 := L_MTLT_REC.VENDOR_ID                     ;
          l_mln_rec.TERRITORY_CODE            := L_MTLT_REC.TERRITORY_CODE                ;
          l_mln_rec.PARENT_LOT_NUMBER         := L_MTLT_REC.PARENT_LOT_NUMBER             ;
          l_mln_rec.ORIGINATION_TYPE          := L_MTLT_REC.ORIGINATION_TYPE              ;
          l_mln_rec.EXPIRATION_ACTION_DATE    := L_MTLT_REC.EXPIRATION_ACTION_DATE        ;
          l_mln_rec.EXPIRATION_ACTION_CODE    := L_MTLT_REC.EXPIRATION_ACTION_CODE        ;
          l_mln_rec.HOLD_DATE                 := L_MTLT_REC.HOLD_DATE                     ;

          L_NUM_MTLT_RECS := L_NUM_MTLT_RECS + 1;
          l_tot_mtlt_prim_qty := l_tot_mtlt_prim_qty + l_mtlt_rec.primary_quantity;
          l_tot_mtlt_trans_qty := l_tot_mtlt_trans_qty + l_mtlt_rec.transaction_quantity; -- Bug# 4225766

          IF (l_debug = 1) THEN
             print_debug('VALIDATE_LOT_SERIAL_INFO: LOT NUMBER: '||l_mtlt_rec.lot_number||': '||l_progress, 1);
             print_debug('VALIDATE_LOT_SERIAL_INFO: LOT PRIMARY QUANTITY: '||l_mtlt_rec.primary_quantity||': '||l_progress, 1);
             l_progress := 'WMSINB-26386';
                  print_debug('INVCONV,Finished Assigning values fetched from MTLT to l_mln_rec'||l_progress,1);
          END IF;

          IF (l_parent_txn_type IN (g_rtv,g_rtr,g_rtc)) THEN
            IF (l_grand_parent_txn_type <> 'DELIVER') THEN
              IF NOT (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                 --raise an error
                 l_progress := 'WMSINB-26393';
                 RAISE fnd_api.g_exc_error;
              END IF; --IF NOT (lot_entered_on_parent(l_grand_parent_txn_id))
            END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
          ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtr,g_rtc)) THEN
            IF (l_parent_txn_type <> 'DELIVER') THEN
              IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
                IF NOT (lot_entered_on_parent(l_parent_transaction_id)) THEN
                  --raise an error
                  l_progress := 'WMSINB-26402';
                  RAISE fnd_api.g_exc_error;
                END IF;
              END IF;
            END IF; --IF (l_parent_txn_type <> 'DELIVER') THEN
          END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtr,g_rtc)) THEN

          BEGIN
             /*INVCONV , Remove OPM specific ic_lots_mst logic , Punit Kumar */
            ----- IF (l_discrete_transaction) THEN

            SELECT 1,parent_lot_number
             INTO L_LOT_EXISTS ,l_parent_lot_number
             FROM MTL_LOT_NUMBERS
             WHERE ORGANIZATION_ID = L_ORG_ID
             AND   INVENTORY_ITEM_ID = L_ITEM_ID
             AND LOT_NUMBER = Ltrim(Rtrim(L_MTLT_REC.lot_number));

            /*
            ELSE -- opm change bug# 3061052 --IF (l_discrete_transaction) THEN
              IF  Ltrim(Rtrim(L_MTLT_REC.sublot_num)) IS NOT NULL THEN
                 SELECT 1, LOT_ID
                   INTO L_LOT_EXISTS , L_OPM_LOT_ID
                   FROM IC_LOTS_MST
                   WHERE ITEM_ID = l_opm_item_id
                   AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
                   AND SUBLOT_NO = Ltrim(Rtrim(L_MTLT_REC.sublot_num)) ;
               ELSE
                 SELECT 1 , lot_id
                   INTO L_LOT_EXISTS , L_OPM_LOT_ID
                   FROM IC_LOTS_MST
                   WHERE ITEM_ID = l_opm_item_id
                   AND LOT_NO = Ltrim(Rtrim(L_MTLT_REC.lot_number))
                   AND SUBLOT_NO IS NULL ;
              END IF;
             END IF; --IF (l_discrete_transaction) THEN */

            IF (l_debug = 1) THEN
               print_debug('INVCONV, Removing OPM specific fork :'||l_progress,1);
            END IF;
          EXCEPTION
             WHEN NO_DATA_FOUND THEN
               L_LOT_EXISTS := 0;
          END;

          IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            IF (l_grand_parent_txn_type <> 'DELIVER') THEN
              BEGIN
                -- opm change bug# 3061052. added SUBLOT_NO
                /* INVCONV, Remove sublot Num , Punit Kumar */

                 SELECT primary_quantity
                   INTO l_rls_primary_quantity
                   FROM rcv_lots_supply
                  WHERE transaction_id = l_grand_parent_txn_id
                    AND lot_num = Ltrim(Rtrim(l_mtlt_rec.lot_number)) ;

                   /* AND ((sublot_num IS NULL and Ltrim(Rtrim(l_mtlt_rec.sublot_num)) IS NULL)
                      OR (sublot_num = Ltrim(Rtrim(l_mtlt_rec.sublot_num)))) ;*/

                  IF (l_mtlt_rec.primary_quantity > l_rls_primary_quantity) THEN
                    --raise error
                    l_progress := 'WMSINB-26454';
                    RAISE fnd_api.g_exc_error;
                  END IF;
              EXCEPTION
                WHEN no_data_found THEN
                --raise error
                  l_progress := 'WMSINB-26460';
                  RAISE fnd_api.g_exc_error;
              END;

              -- opm change bug# 3061052
              /*IF (NOT l_discrete_transaction) THEN
               gml_opm_roi_grp.validate_opm_lot(p_api_version	=> 1.0,
                        p_init_msg_lst	 	=> FND_API.G_FALSE,
                        p_mtlt_rowid		=> l_mtlt_rec.rowid,
                        p_new_lot	 	=> 'N',
                        p_opm_item_id		=> l_opm_item_id,
                        p_item_no		=> l_item_no,
                        p_lots_specified_on_parent => 'Y',
                        p_lot_id		=> l_opm_lot_id,
                        p_parent_txn_type	=> l_parent_txn_type,
                        p_grand_parent_txn_type => l_grand_parent_txn_type,
                        x_return_status 	=> x_return_status,
                        x_msg_data      	=> x_msg_data,
                        x_msg_count     	=> x_msg_count
                        );*/

              IF (l_debug = 1) THEN
                print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
              END IF;

              INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

              /*INVCONV ,*/
              IF (l_debug = 1) THEN
                print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
              END IF;

              IF X_RETURN_STATUS <> 'S' THEN
                --RAISE ERROR
                l_progress := 'WMSINB-26483';
                RAISE fnd_api.g_exc_error;
              END IF;

              IF (l_debug = 1) THEN
                print_debug('VALIDATE_LOT_SERIAL_INFO: VALIDATE_OPM_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
              END IF;
              /* END IF; --IF (NOT l_discrete_transaction) THEN*/
            ELSE --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
              IF (l_lot_exists = 1) THEN
                /*INVCONV , validating for parent lot, Punit Kumar */
                IF  L_MTLT_REC.parent_lot_number IS NOT NULL THEN
                  IF L_MTLT_REC.parent_lot_number <> l_parent_lot_number THEN
                    fnd_message.set_name ('INV' , 'INV_CL_PARENT_INVALID' );
                    fnd_msg_pub.ADD;
                    RAISE fnd_api.g_exc_error;
                  END IF;
                ELSE
                  L_MTLT_REC.parent_lot_number := l_parent_lot_number;
                END IF;
                /*end , INVCONV */

                -- opm change bug# 3061052
                -- this combination not possible
                /*INVCONV , existing discrete validations. Same will be executed for process org*/
                --------IF (l_discrete_transaction) THEN

                --PERFORM MATERIAL STATUS CHECK FOR LOT
                IF (l_source_document_code = 'PO') THEN
                  l_transaction_type_id := 71;
                ELSE
                  l_transaction_type_id := 72;
                END IF;

                INV_LOT_TRX_VALIDATION_PUB.VALIDATE_MATERIAL_STATUS(X_RETURN_STATUS => X_RETURN_STATUS,
                                X_MSG_COUNT => X_MSG_COUNT,
                                X_MSG_DATA => X_MSG_DATA,
                                X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                                P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                                P_ORGANIZATION_ID => L_ORG_ID,
                                P_INVENTORY_ITEM_ID => L_ITEM_ID,
                                P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                                P_SUBINVENTORY_CODE => L_SUB_CODE,
                                P_LOCATOR_ID => L_LOC_ID,
                                P_STATUS_ID => NULL);
                IF X_RETURN_STATUS <> 'S' THEN
                  --RAISE an ERROR
                  l_progress := 'WMSINB-26517';
                  RAISE fnd_api.g_exc_error;
                END IF;

                IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
                  l_progress := 'WMSINB-26523';
                END IF;

                IF L_VALIDATION_STATUS <> 'Y' THEN
                   --RAISE an ERROR
                   l_progress := 'WMSINB-26528';
                   RAISE fnd_api.g_exc_error;
                END IF;

                /*ELSE --IF (l_discrete_transaction) THEN
                        gml_opm_roi_grp.validate_opm_lot(p_api_version	=> 1.0,
                           p_init_msg_lst	 	=> FND_API.G_FALSE,
                           p_mtlt_rowid		=> l_mtlt_rec.rowid,
                           p_new_lot	 	=> 'N',
                           p_opm_item_id		=> l_opm_item_id,
                           p_item_no		=> l_item_no,
                           p_lots_specified_on_parent => 'Y',
                           p_lot_id		=> l_opm_lot_id,
                           p_parent_txn_type	=> l_parent_txn_type,
                           p_grand_parent_txn_type => l_grand_parent_txn_type,
                           x_return_status 	=> x_return_status,
                           x_msg_data      	=> x_msg_data,
                           x_msg_count     	=> x_msg_count
                           );*/
                IF (l_debug = 1) THEN
                  print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                END IF;

                INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                       x_return_status      		   => x_return_status
                                                      ,x_msg_data           		   => x_msg_data
                                                      ,x_msg_count          		   => x_msg_count
                                                      ,p_api_version	               => 1.0
                                                      ,p_init_msg_lst	            => FND_API.G_FALSE
                                                      ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                      ,p_transaction_type_id 	      => l_transaction_type_id
                                                      ,p_new_lot			            => 'N'
                                                      ,p_item_id	 		            => l_item_id
                                                      ,p_to_organization_id		   => L_ORG_ID
                                                      ,p_lot_number			         => L_MTLT_REC.lot_number
                                                      ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                      ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                      ,x_lot_secondary_quantity     => L_MTLT_REC.SECONDARY_QUANTITY
                                                      ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                      ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                      ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                      ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                      ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                      ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                      ,p_rti_id	                  => L_RTI_ID
                                                      ,p_revision             	   => l_item_revision
                                                      ,p_subinventory_code  	      => L_SUB_CODE
                                                      ,p_locator_id           	   => l_loc_id
                                                      ,p_transaction_type           => l_transaction_type
                                                      ,p_parent_txn_type            => l_parent_txn_type
                                                      ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                      );

                /*INVCONV ,*/
                IF (l_debug = 1) THEN
                   print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                   print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
                END IF;

                IF X_RETURN_STATUS <> 'S' THEN
                  --RAISE ERROR
                  l_progress := 'WMSINB-26549';
                  RAISE fnd_api.g_exc_error;
                END IF;

                IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: INV_VALIDATE_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
                END IF;
                /*END IF; -- IF (l_discrete_transaction) THEN	*/
              ELSE --IF (l_lot_exists = 1) THEN
                --raise an error
                l_progress := 'WMSINB-26560';
                RAISE fnd_api.g_exc_error;
              END IF; --IF (l_lot_exists = 1) THEN
            END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
          ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            IF (l_parent_txn_type <> 'RECEIVE') THEN
              IF (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                BEGIN
                  -- opm change bug# 3061052 added SUBLOT_NO
                    /*INVCONV , Remove Sublot Num , Punit Kumar*/

                   SELECT primary_quantity
                     INTO l_rls_primary_quantity
                     FROM rcv_lots_supply
                     WHERE transaction_id = l_grand_parent_txn_id
                     AND lot_num = Ltrim(Rtrim(l_mtlt_rec.lot_number));
                         /*
                     AND ((sublot_num IS NULL and Ltrim(Rtrim(l_mtlt_rec.sublot_num)) IS NULL)
                    OR (sublot_num = Ltrim(Rtrim(l_mtlt_rec.sublot_num)))) ;
                  */

                  IF (l_mtlt_rec.primary_quantity > l_rls_primary_quantity) THEN
                    --raise error
                    l_progress := 'WMSINB-26579';
                    RAISE fnd_api.g_exc_error;
                  END IF;
                EXCEPTION
                  WHEN no_data_found THEN
                    --raise error
                    l_progress := 'WMSINB-26585';
                    RAISE fnd_api.g_exc_error;
                END;
              END IF; --IF (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
            ELSE --IF (l_parent_txn_type <> 'RECEIVE') THEN
              /* INVCONV , remove OPM specific fork , Punit Kumar*/
                ----IF (l_discrete_transaction) THEN

              IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY', 'REQ')) THEN
                -- GET THE LOT/SERIAL CONTROL IN SOURCE ORG
                GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                  (L_SHIPMENT_LINE_ID, L_ORG_ID,
                   L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
                   l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

                IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: LOT CONTROL FROM ORG: '||L_FROM_ORG_LOT_CTRL||' : '||l_progress, 1);
                  l_progress := 'WMSINB-26600';
                END IF;

                IF (L_FROM_ORG_LOT_CTRL = 2) THEN
                  BEGIN
                    SELECT nvl(SUM(rls.primary_quantity),0) --Bug:5489462
                    INTO L_RLS_PRIMARY_QUANTITY
                    FROM rcv_lots_supply rls
                    , rcv_shipment_lines rsl
                    WHERE rsl.SHIPMENT_LINE_ID = rls.SHIPMENT_LINE_ID
                    AND rsl.shipment_header_id = l_shipment_header_id
                    AND rsl.item_id = l_item_id
                    AND rls.SUPPLY_TYPE_CODE = 'SHIPMENT'
                    AND rls.LOT_NUM = Ltrim(Rtrim(L_MTLT_REC.lot_number));

                    IF ((abs(l_mtlt_rec.primary_quantity - l_rls_primary_quantity) > 0.00005 )
				AND  (l_mtlt_rec.primary_quantity > l_rls_primary_quantity)) THEN  --Bug: 14092221
                       --RAISE ERROR
                       l_progress := 'WMSINB-26617';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                       --RAISE ERROR
                       l_progress := 'WMSINB-26623';
                       RAISE fnd_api.g_exc_error;
                  END;
                END IF; --IF (L_FROM_ORG_LOT_CTRL = 2) THEN
              END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY', 'REQ')) THEN
              /* END IF; --  IF (l_discrete_transaction) THEN*/
            END IF; --IF (l_parent_txn_type <> 'RECEIVE') THEN

            IF (l_lot_exists = 1) THEN
               /*INVCONV, Remove descrete specific call*/
               -- opm change bug# 3061052
               /*IF (l_discrete_transaction) THEN */
              --PERFORM MATERIAL STATUS CHECK FOR LOT
              IF (l_source_document_code = 'PO') THEN
                l_transaction_type_id := 71;
              ELSE
                l_transaction_type_id := 72;
              END IF;

              INV_LOT_TRX_VALIDATION_PUB.validate_material_status
                  (X_RETURN_STATUS => X_RETURN_STATUS,
                   X_MSG_COUNT => X_MSG_COUNT,
                   X_MSG_DATA => X_MSG_DATA,
                   X_VALIDATION_STATUS => L_VALIDATION_STATUS,
                   P_TRANSACTION_TYPE_ID => l_transaction_type_id,
                   P_ORGANIZATION_ID => L_ORG_ID,
                   P_INVENTORY_ITEM_ID => L_ITEM_ID,
                   P_LOT_NUMBER => L_MTLT_REC.LOT_NUMBER,
                   P_SUBINVENTORY_CODE => L_SUB_CODE,
                   P_LOCATOR_ID => L_LOC_ID,
                   P_STATUS_ID => NULL);
              IF X_RETURN_STATUS <> 'S' THEN
                 --RAISE an ERROR
                 l_progress := 'WMSINB-26656';
                 RAISE fnd_api.g_exc_error;
              END IF;

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: LOT MATERIAL VALIDATION STATUS: '||L_VALIDATION_STATUS||' : '||l_progress, 1);
                 l_progress := 'WMSINB-26662';
              END IF;

              IF L_VALIDATION_STATUS <> 'Y' THEN
                 --RAISE an ERROR
                 l_progress := 'WMSINB-26667';
                 RAISE fnd_api.g_exc_error;
              END IF;

               /*
              ELSE --IF (l_discrete_transaction) THEN
              -- opm change bug# 3061052

              gml_opm_roi_grp.validate_opm_lot(p_api_version => 1.0,
                   p_init_msg_lst	 	=> FND_API.G_FALSE,
                   p_mtlt_rowid		=> l_mtlt_rec.rowid,
                   p_new_lot	 	=> 'N',
                   p_opm_item_id		=> l_opm_item_id,
                   p_item_no		=> l_item_no,
                   p_lots_specified_on_parent => 'Y',
                   p_lot_id		=> l_opm_lot_id,
                   p_parent_txn_type	=> l_parent_txn_type,
                   p_grand_parent_txn_type => l_grand_parent_txn_type,
                   x_return_status 	=> x_return_status,
                   x_msg_data      	=> x_msg_data,
                   x_msg_count     	=> x_msg_count
                   );*/
              IF (l_debug = 1) THEN
                print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
              END IF;

              INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                        x_return_status      		   => x_return_status
                                                       ,x_msg_data           		   => x_msg_data
                                                       ,x_msg_count          		   => x_msg_count
                                                       ,p_api_version	               => 1.0
                                                       ,p_init_msg_lst	            => FND_API.G_FALSE
                                                       ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                       ,p_transaction_type_id 	   => l_transaction_type_id
                                                       ,p_new_lot			            => 'N'
                                                       ,p_item_id	 		            => l_item_id
                                                       ,p_to_organization_id		   => L_ORG_ID
                                                       ,p_lot_number			         => L_MTLT_REC.lot_number
                                                       ,p_parent_lot_number			=> L_MTLT_REC.parent_lot_number
                                                       ,p_lot_quantity			      => L_MTLT_REC.TRANSACTION_QUANTITY
                                                       ,x_lot_secondary_quantity    => L_MTLT_REC.SECONDARY_QUANTITY
                                                       ,p_line_secondary_quantity	=> l_rti_SECONDARY_QUANTITY
                                                       ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                       ,p_transaction_unit_of_measure=> l_rti_UNIT_OF_MEASURE
                                                       ,p_source_document_code	   => L_SOURCE_DOCUMENT_CODE
                                                       ,p_OE_ORDER_HEADER_ID	      => l_OE_ORDER_HEADER_ID
                                                       ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                       ,p_rti_id	                  => L_RTI_ID
                                                       ,p_revision             	   => l_item_revision
                                                       ,p_subinventory_code  	      => L_SUB_CODE
                                                       ,p_locator_id           	   => l_loc_id
                                                       ,p_transaction_type           => l_transaction_type
                                                       ,p_parent_txn_type            => l_parent_txn_type
                                                       ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                       );


              /*INVCONV ,*/
              IF (l_debug = 1) THEN
                print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
              END IF;

              IF X_RETURN_STATUS <> 'S' THEN
                 --RAISE ERROR
                 l_progress := 'WMSINB-26690';
                 RAISE fnd_api.g_exc_error;
              END IF;

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: VALIDATE_OPM_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
              END IF;

              /* END IF; --IF (l_discrete_transaction) THEN*/
            ELSE --IF (l_lot_exists = 1) THEN
              -- opm change bug# 3061052
               /*
                IF (l_discrete_transaction) THEN */
                --call CREATE_INV_LOT

                 /*INVCONV , Perform lot validations and create the new lot.
                  Call Lot Create API INV_ROI_INTEGRATION_GRP.INV_NEW_LOT to create the new lot.
                  This shall also create lot specific conversions after creating the new Lot.
                  This replaces the existing procedure INV_LOT_API_PUB.CREATE_INV_LOT to create NEW LOT
                  Punit Kumar*/

              IF (l_debug = 1) THEN
                 print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
              END IF;

              INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT(
                                                         x_return_status      		   => x_return_status
                                                        ,x_msg_data           		   => x_msg_data
                                                        ,x_msg_count          		   => x_msg_count
                                                        ,p_api_version	               => 1.0
                                                        ,p_init_msg_lst	               => FND_API.G_FALSE
                                                        ,p_mtlt_rowid	 		         => L_MTLT_REC.ROWID
                                                        ,p_transaction_type_id 	      => l_transaction_type_id
                                                        ,p_new_lot			            => 'Y'
                                                        ,p_item_id	 		            => l_item_id
                                                        ,p_to_organization_id		      => L_ORG_ID
                                                        ,p_lot_number			         => L_MTLT_REC.lot_number
                                                        ,p_parent_lot_number			   => L_MTLT_REC.parent_lot_number
                                                        ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                                        ,x_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                                        ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                                        ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                                        ,p_transaction_unit_of_measure => l_rti_UNIT_OF_MEASURE
                                                        ,p_source_document_code	      => L_SOURCE_DOCUMENT_CODE
                                                        ,p_OE_ORDER_HEADER_ID	         => l_OE_ORDER_HEADER_ID
                                                        ,p_OE_ORDER_LINE_ID	         => l_OE_ORDER_LINE_ID
                                                        ,p_rti_id	                     => L_RTI_ID
                                                        ,p_revision             	      => l_item_revision
                                                        ,p_subinventory_code  	      => L_SUB_CODE
                                                        ,p_locator_id           	      => l_loc_id
                                                        ,p_transaction_type           => l_transaction_type
                                                        ,p_parent_txn_type            => l_parent_txn_type
                                                        ,p_lot_primary_qty            => l_mtlt_rec.primary_quantity -- Bug# 4233182
                                                        );

               /*INVCONV ,*/
               IF (l_debug = 1) THEN
                  print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT :'||l_progress,1);
                  print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_VALIDATE_LOT return status: '||x_return_status||' : '||l_progress, 1);
               END IF;

              IF (x_return_status <> 'S') THEN
                 --raise error
                 l_progress := 'WMSINB-26790';
                 RAISE fnd_api.g_exc_error;
              END IF;

              /*INVCONV ,*/
              IF (l_debug = 1) THEN
                 print_debug('INVCONV, Before calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
              END IF;

              INV_ROI_INTEGRATION_GRP.INV_NEW_LOT(
                                                x_return_status      		   => x_return_status
                                               ,x_msg_count          		   => x_msg_count
                                               ,x_msg_data           		   => x_msg_data
                                               ,p_api_version	               => 1.0
                                               ,p_init_msg_lst	               => FND_API.G_FALSE
                                               ,p_source_document_code			=> L_SOURCE_DOCUMENT_CODE
                                               ,p_item_id				         => l_item_id
                                               ,p_from_organization_id			=> L_FROM_ORG_ID
                                               ,p_to_organization_id	         => L_ORG_ID
                                               ,p_lot_number				      => L_MTLT_REC.lot_number
                                               ,p_lot_quantity			         => L_MTLT_REC.TRANSACTION_QUANTITY
                                               ,p_lot_secondary_quantity      => L_MTLT_REC.SECONDARY_QUANTITY
                                               ,p_line_secondary_quantity	   => l_rti_SECONDARY_QUANTITY
                                               ,p_primary_unit_of_measure	   => l_rti_PRIMARY_UNIT_OF_MEASURE
                                               ,p_secondary_unit_of_measure	=> l_rti_SEC_UNIT_OF_MEASURE
                                               ,p_uom_code	                  => l_rti_UOM_CODE
                                               ,p_secondary_uom_code	         => l_rti_SECONDARY_UOM_CODE
                                               ,p_reason_id	                  => L_MTLT_REC.REASON_ID
                                               ,P_MLN_REC                     => L_MLN_REC
                                               ,p_mtlt_rowid	               => L_MTLT_REC.ROWID
                                               );

               /*INVCONV ,*/
               IF (l_debug = 1) THEN
                  print_debug('INVCONV, After calling INV_ROI_INTEGRATION_GRP.INV_NEW_LOT :'||l_progress,1);
                  print_debug('INVCONV,VALIDATE_LOT_SERIAL_INFO: INV_ROI_INTEGRATION_GRP.INV_NEW_LOT return status: '||x_return_status||' : '||l_progress, 1);
               END IF;

               IF X_RETURN_STATUS <> 'S' THEN
                  --RAISE ERROR
                  l_progress := 'WMSINB-26817';
                  RAISE fnd_api.g_exc_error;
               END IF;

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: VALIDATE_OPM_LOT STATUS: '||x_return_status||' : '||l_progress, 1);
              END IF;

              /*END IF; -- IF (l_discrete_transaction) THEN*/
            END IF; --IF (l_lot_exists = 1) THEN
          END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN

          IF (l_serial_number_control_code IN (2,5,6)) THEN
            IF (l_debug = 1) THEN
                print_debug('VALIDATE_LOT_SERIAL_INFO: LOT AND SERIAL CONTROLLED: '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
                print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
                l_progress := 'WMSINB-26834';
            END IF;

            L_NUM_MSNT_RECS := 0;
            l_tot_msnt_serial_qty := 0;

            OPEN C_MSNT_LOTSERIAL(L_MTLT_REC.SERIAL_TRANSACTION_TEMP_ID);
            LOOP
              FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;
              EXIT WHEN C_MSNT_LOTSERIAL%NOTFOUND;

              L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;
              L_SERIAL_QUANTITY := INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
                      L_MSNT_REC.TO_SERIAL_NUMBER);
              l_tot_msnt_serial_qty := l_tot_msnt_serial_qty + l_serial_quantity;
              INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
                                        INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

              IF (l_debug = 1) THEN
                 print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
                 l_progress := 'WMSINB-26859';
              END IF;

              --populate attributes table
              l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
              l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
              l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
              l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
              l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
              l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
              l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
              l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
              l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
              l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
              l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
              l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
              l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
              l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
              l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
              l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
              l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
              l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
              l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
              l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
              l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
              l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
              l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
              l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
              l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
              l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
              l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
              l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
              l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
              l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
              l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
              l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
              l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
              l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
              l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
              l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
              l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
              l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
              l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
              l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
              l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
              l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
              l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
              l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
              l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
              l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
              l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
              l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
              l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
              l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
              l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
              l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
              l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
              l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
              l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
              l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
              l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
              l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
              l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
              l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
              l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
              l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
              l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
              l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
              l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
              l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
              l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
              l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
              l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
              l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
              l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
              l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
              l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
              l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
              l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
              l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
              l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
              l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
              l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
              l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
              l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
              l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
              l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
              l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
              l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
              l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
              l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
              l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;

              --Validate the serials
              FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP

                l_progress := 'WMSINB-26865';
                L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
                if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
                  L_SERIAL_NUMBER := L_MSNT_REC.fm_serial_number;
                else
                  L_SERIAL_NUMBER := SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
                                        LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) - LENGTH(L_CUR_NUMBER))
                                      ||L_CUR_NUMBER;
                End if;

                l_progress := 'WMSINB-26873';

                BEGIN
                  SELECT CURRENT_ORGANIZATION_ID
                    , current_status
                    , lot_number
                    , Decode(lpn_id,0,NULL,lpn_id)
                    , inspection_status
                    , group_mark_id
                    INTO L_CURR_ORG_ID
                    , l_curr_status
                    , l_curr_lot_num
                    , l_curr_lpn_id
                    , l_inspection_status
                    , l_group_mark_id
                    FROM MTL_SERIAL_NUMBERS
                    WHERE SERIAL_NUMBER = l_serial_number
                    AND inventory_item_id = l_item_id;

                  l_serial_exists := 1;
                  l_progress := 'WMSINB-26893';
                EXCEPTION
                  WHEN no_data_found THEN
                     l_serial_exists := 0;
                     l_progress := 'WMSINB-26897';
                END;

                IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
                  l_progress := 'WMSINB-26910';
                END IF;

                IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
                  IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                    IF NOT (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                      --raise an error
                      l_progress := 'WMSINB-26915';
                      RAISE fnd_api.g_exc_error;
                    ELSE --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                      BEGIN
                        SELECT '1'
                          INTO L_DUMMY
                          FROM RCV_SERIALS_SUPPLY
                          WHERE TRANSACTION_ID = l_grand_parent_txn_id
                          AND SERIAL_NUM = L_SERIAL_NUMBER;

                        IF (l_curr_status <> 7) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-26931';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --Validate serial/group_mark_id to prevent
                        --entering of duplicate serials

                        IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-26942';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-26951';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                           -- RAISE ERROR
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-26959';
                           RAISE fnd_api.g_exc_error;
                      END;
                    END IF; --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                  ELSE --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                    IF l_curr_org_id <> l_org_id THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-26968';
                       RAISE fnd_api.g_exc_error;
                    ELSE
                       IF
                         ((l_curr_lot_num IS NOT NULL) AND (l_curr_lot_num <> l_mtlt_rec.lot_number)
                          AND
                          (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-26975';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF;

                    IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                       IF l_curr_status NOT IN (1,6) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-26985';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    ELSE --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                       IF (l_curr_status <> 3) THEN
                          --raise error
                          fnd_message.set_name('INV','INV_FAIL_VALIDATE_SERIAL');
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-26993';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF; --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN

                    IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                       --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-27002';
                       RAISE fnd_api.g_exc_error;
                    END IF;

                    IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                       --validate and update the attributes.
                       inv_serial_number_pub.validate_update_serial_att
                         (x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          x_validation_status => l_validation_status,
                          p_serial_number     => l_serial_number,
                          p_organization_id   => l_org_id,
                          p_inventory_item_id => l_item_id,
                          p_serial_att_tbl    => l_serial_attributes_tbl,
                          p_validate_only     => FALSE
                          );

                       IF (l_validation_status <> 'Y'
                           OR x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27008';
                          RAISE fnd_api.g_exc_error;
                       END IF;
                    END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                    --UPDATE GROUP_MARK_ID TO -7937
                    IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                      --raise error
                       fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-27011';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                  END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
                  IF (l_parent_txn_type <> 'RECEIVE') THEN
                    IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                      BEGIN
                        SELECT '1'
                          INTO L_DUMMY
                          FROM RCV_SERIALS_SUPPLY
                          WHERE TRANSACTION_ID = l_grand_parent_txn_id
                          AND SERIAL_NUM = L_SERIAL_NUMBER;

                        IF (l_curr_status <> 7) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27029';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --Validate serial/group_mark_id to prevent
                        --entering of duplicate serials

                        IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27040';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27049';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                             -- RAISE ERROR
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27057';
                             RAISE fnd_api.g_exc_error;
                      END;
                    ELSE --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                      IF (l_serial_exists = 1) THEN
                        IF l_curr_org_id <> l_org_id THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27066';
                           RAISE fnd_api.g_exc_error;
                        ELSE
                          IF ((l_curr_lot_num IS NOT NULL) AND (l_curr_lot_num <> l_mtlt_rec.lot_number)
                            AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27073';
                            RAISE fnd_api.g_exc_error;
                          END IF;
                        END IF;

                      /* Bug#6450814
                         * In order to receive the Issued out Serial numbers during
                         * Positive Correction transaction made the following changes.
                         */
                        IF l_curr_status NOT IN (1,4,6) THEN--Bug: 6450814
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27082';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27090';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                           --validate and update the attributes.
                           inv_serial_number_pub.validate_update_serial_att
                             (x_return_status     => x_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              x_validation_status => l_validation_status,
                              p_serial_number     => l_serial_number,
                              p_organization_id   => l_org_id,
                              p_inventory_item_id => l_item_id,
                              p_serial_att_tbl    => l_serial_attributes_tbl,
                              p_validate_only     => FALSE
                              );

                           IF (l_validation_status <> 'Y'
                               OR x_return_status <> g_ret_sts_success) THEN
                              --raise error
                              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                              fnd_msg_pub.ADD;
                              l_progress := 'WMSINB-27095';
                              RAISE fnd_api.g_exc_error;
                           END IF;
                        END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27099';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      ELSE --IF (l_serial_exists = 1) THEN
                        IF l_serial_number_control_code = 5 THEN
                           --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                           --(INCLUDING ATT VALIDATION)
                           --CREATE MSN
                          IF (l_transaction_type = 'CORRECT') THEN
                            l_transaction_action_id := 29;
                          ELSE
                            l_transaction_action_id := 1;
                          END IF;

                          inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                     , p_inventory_item_id => l_item_id
                                     , p_organization_id => l_org_id
                                     , p_from_serial_number => l_serial_number
                                     , p_to_serial_number => l_serial_number
                                     , p_initialization_date => SYSDATE
                                     , p_completion_date => NULL
                                     , p_ship_date => NULL
                                     , p_revision => l_item_revision
                                     , p_lot_number => l_mtlt_rec.lot_number
                                     , p_current_locator_id => l_loc_id
                                     , p_subinventory_code => l_sub_code
                                     , p_trx_src_id => NULL
                                     , p_unit_vendor_id => NULL
                                     , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
                                     , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                     , p_receipt_issue_type => NULL
                                     , p_txn_src_id => NULL
                                     , p_txn_src_name => NULL
                                     , p_txn_src_type_id => NULL
                                     , p_transaction_id => NULL
                                     , p_current_status => 1
                                     , p_parent_item_id => NULL
                                     , p_parent_serial_number => NULL
                                     , p_cost_group_id => NULL
                                     , p_transaction_action_id => l_transaction_action_id
                                     , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                     , p_status_id => NULL
                                     , p_inspection_status => NULL
                                     , x_object_id => l_object_id
                                     , x_return_status => x_return_status
                                     , x_msg_count => x_msg_count
                                     , x_msg_data => x_msg_data);

                          IF (x_return_status <> g_ret_sts_success) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27105';
                            RAISE fnd_api.g_exc_error;
                          END IF;

                          --validate and update the attributes.
                          inv_serial_number_pub.validate_update_serial_att
                             (x_return_status     => x_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              x_validation_status => l_validation_status,
                              p_serial_number     => l_serial_number,
                              p_organization_id   => l_org_id,
                              p_inventory_item_id => l_item_id,
                              p_serial_att_tbl    => l_serial_attributes_tbl,
                              p_validate_only     => FALSE
                            );

                          IF (l_validation_status <> 'Y'
                             OR x_return_status <> g_ret_sts_success) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27145';
                            RAISE fnd_api.g_exc_error;
                          END IF;

                          --UPDATE GROUP_MARK_ID TO -7937
                          IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27152';
                            RAISE fnd_api.g_exc_error;
                          END IF;
                        ELSE   --IF l_serial_number_control_code = 5 THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27159';
                           RAISE fnd_api.g_exc_error;
                        END IF; --IF l_serial_number_control_code = 5 THEN
                      END IF; --IF (l_serial_exists = 1) THEN
                    END IF; --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                  ELSE --IF (l_parent_txn_type <> 'RECEIVE') THEN
                    IF (l_serial_exists = 1) THEN
                      IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                        -- CHECK TO SEE IF THE ITEM IS SERIAL
                        -- CONTROLLED IN SOURCE ORG

                        GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                           (L_SHIPMENT_LINE_ID, L_ORG_ID,
                            L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
                            l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

                        IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
                            AND l_source_document_code = 'REQ')
                            OR (l_from_org_ser_crtl IN (2,5)
                               AND l_source_document_code = 'INVENTORY')
                           ) THEN
                          IF l_curr_org_id <> l_from_org_id THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27180';
                             RAISE fnd_api.g_exc_error;
                          ELSE --IF l_curr_org_id <> l_from_org_id THEN
                            IF ((l_curr_lot_num IS NOT NULL) AND
                             (l_curr_lot_num <> l_mtlt_rec.lot_number)
                              AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                              --raise error
                              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                              fnd_msg_pub.ADD;
                              l_progress := 'WMSINB-27188';
                              RAISE fnd_api.g_exc_error;
                            END IF;
                          END IF; --IF l_curr_org_id <> l_from_org_id THEN

                          BEGIN
                             SELECT '1'
                               INTO L_DUMMY
                               FROM rcv_serials_supply rss
                               , rcv_shipment_lines rsl
                               WHERE rss.SHIPMENT_LINE_ID = rsl.SHIPMENT_LINE_ID
                               AND rsl.shipment_header_id = l_shipment_header_id
                               AND rsl.item_id = l_item_id
                               AND rss.SUPPLY_TYPE_CODE = 'SHIPMENT'
                               AND rss.serial_num = l_serial_number;

                             IF L_CURR_STATUS <> 5 THEN
                                -- RAISE AN ERROR
                                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                                fnd_msg_pub.ADD;
                                l_progress := 'WMSINB-27205';
                                RAISE fnd_api.g_exc_error;
                             END IF;

                          EXCEPTION
                             WHEN NO_DATA_FOUND THEN
                                -- RAISE AN ERROR
                                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                                fnd_msg_pub.ADD;
                                l_progress := 'WMSINB-27214';
                                RAISE fnd_api.g_exc_error;
                          END;
                        ELSE --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                          IF l_curr_org_id <> l_org_id THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27222';
                             RAISE fnd_api.g_exc_error;
                          ELSE
                            IF ((l_curr_lot_num IS NOT NULL) AND (l_curr_lot_num <> l_mtlt_rec.lot_number)
                              AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                              --raise error
                              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                              fnd_msg_pub.ADD;
                              l_progress := 'WMSINB-27229';
                              RAISE fnd_api.g_exc_error;
                            END IF;
                          END IF;

                          IF l_curr_status NOT IN (1,6) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27238';
                             RAISE fnd_api.g_exc_error;
                          END IF;

                          IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27246';
                             RAISE fnd_api.g_exc_error;
                          END IF;

                          IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                             --validate and update the attributes.
                             inv_serial_number_pub.validate_update_serial_att
                               (x_return_status     => x_return_status,
                                x_msg_count         => x_msg_count,
                                x_msg_data          => x_msg_data,
                                x_validation_status => l_validation_status,
                                p_serial_number     => l_serial_number,
                                p_organization_id   => l_org_id,
                                p_inventory_item_id => l_item_id,
                                p_serial_att_tbl    => l_serial_attributes_tbl,
                                p_validate_only     => FALSE
                                );

                             IF (l_validation_status <> 'Y'
                                 OR x_return_status <> g_ret_sts_success) THEN
                                --raise error
                                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                                fnd_msg_pub.ADD;
                                l_progress := 'WMSINB-27251';
                                RAISE fnd_api.g_exc_error;
                             END IF;
                          END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                          --UPDATE GROUP_MARK_ID TO -7937
                          IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27255';
                             RAISE fnd_api.g_exc_error;
                          END IF;
                             END IF; --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                           ELSE --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                          IF l_curr_org_id <> l_org_id THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27264';
                             RAISE fnd_api.g_exc_error;
                           ELSE
                             IF ((l_curr_lot_num IS NOT NULL) AND (l_curr_lot_num <> l_mtlt_rec.lot_number)
                           AND (Nvl(l_curr_status,1) NOT IN (1,4))) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27271';
                          RAISE fnd_api.g_exc_error;
                             END IF;
                          END IF;

                          IF l_curr_status NOT IN (1,4,6) THEN--Bug: 6450814
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27280';
                             RAISE fnd_api.g_exc_error;
                          END IF;

                          IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27288';
                             RAISE fnd_api.g_exc_error;
                          END IF;

                          IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                             --validate and update the attributes.
                             inv_serial_number_pub.validate_update_serial_att
                               (x_return_status     => x_return_status,
                                x_msg_count         => x_msg_count,
                                x_msg_data          => x_msg_data,
                                x_validation_status => l_validation_status,
                                p_serial_number     => l_serial_number,
                                p_organization_id   => l_org_id,
                                p_inventory_item_id => l_item_id,
                                p_serial_att_tbl    => l_serial_attributes_tbl,
                                p_validate_only     => FALSE
                                );

                             IF (l_validation_status <> 'Y'
                                 OR x_return_status <> g_ret_sts_success) THEN
                                --raise error
                                fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                                fnd_msg_pub.ADD;
                                l_progress := 'WMSINB-27294';
                                RAISE fnd_api.g_exc_error;
                             END IF;
                          END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                          --UPDATE GROUP_MARK_ID TO -7937
                          IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27297';
                             RAISE fnd_api.g_exc_error;
                          END IF;
                        END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                      ELSE --IF (l_serial_exists = 1) THEN
                        IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                          -- CHECK TO SEE IF THE ITEM IS SERIAL
                          -- CONTROLLED IN SOURCE ORG

                          GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                            (L_SHIPMENT_LINE_ID, L_ORG_ID,
                             L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
                             l_from_org_rev_ctrl, X_RETURN_STATUS, X_MSG_COUNT, X_MSG_DATA);

                          IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
                               AND l_source_document_code = 'REQ')
                              OR (l_from_org_ser_crtl IN (2,5)
                            AND l_source_document_code = 'INVENTORY')
                              ) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27315';
                             RAISE fnd_api.g_exc_error;
                          END IF; --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                        END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN

                        IF l_serial_number_control_code = 5 THEN
                          --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                          --(INCLUDING ATT VALIDATION)
                          --CREATE MSN
                          IF (l_transaction_type = 'CORRECT') THEN
                             l_transaction_action_id := 29;
                          ELSE
                             l_transaction_action_id := 1;
                          END IF;

                          inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                      , p_inventory_item_id => l_item_id
                                      , p_organization_id => l_org_id
                                      , p_from_serial_number => l_serial_number
                                      , p_to_serial_number => l_serial_number
                                      , p_initialization_date => SYSDATE
                                      , p_completion_date => NULL
                                      , p_ship_date => NULL
                                      , p_revision => l_item_revision
                                      , p_lot_number => l_mtlt_rec.lot_number
                                      , p_current_locator_id => l_loc_id
                                      , p_subinventory_code => l_sub_code
                                      , p_trx_src_id => NULL
                                      , p_unit_vendor_id => NULL
                                      , p_vendor_lot_number => l_mtlt_rec.supplier_lot_number
                                      , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                      , p_receipt_issue_type => NULL
                                      , p_txn_src_id => NULL
                                      , p_txn_src_name => NULL
                                      , p_txn_src_type_id => NULL
                                      , p_transaction_id => NULL
                                      , p_current_status => 1
                                      , p_parent_item_id => NULL
                                      , p_parent_serial_number => NULL
                                      , p_cost_group_id => NULL
                                      , p_transaction_action_id => l_transaction_action_id
                                      , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                      , p_status_id => NULL
                                      , p_inspection_status => NULL
                                      , x_object_id => l_object_id
                                      , x_return_status => x_return_status
                                      , x_msg_count => x_msg_count
                                      , x_msg_data => x_msg_data);

                          IF (x_return_status <> g_ret_sts_success) THEN
                              --raise error
                              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                              fnd_msg_pub.ADD;
                              l_progress := 'WMSINB-27320';
                              RAISE fnd_api.g_exc_error;
                          END IF;

                           --validate and update the attributes.
                           inv_serial_number_pub.validate_update_serial_att
                             (x_return_status     => x_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              x_validation_status => l_validation_status,
                              p_serial_number     => l_serial_number,
                              p_organization_id   => l_org_id,
                              p_inventory_item_id => l_item_id,
                              p_serial_att_tbl    => l_serial_attributes_tbl,
                              p_validate_only     => FALSE
                              );

                           IF (l_validation_status <> 'Y'
                               OR x_return_status <> g_ret_sts_success) THEN
                              --raise error
                              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                              fnd_msg_pub.ADD;
                              l_progress := 'WMSINB-27360';
                              RAISE fnd_api.g_exc_error;
                           END IF;

                          --UPDATE GROUP_MARK_ID TO -7937
                          IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                             --raise error
                             fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                             fnd_msg_pub.ADD;
                             l_progress := 'WMSINB-27369';
                             RAISE fnd_api.g_exc_error;
                          END IF;
                        ELSE --IF l_serial_number_control_code = 5 THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27376';
                          RAISE fnd_api.g_exc_error;
                        END IF; --IF l_serial_number_control_code = 5 THEN
                      END IF; --IF (l_serial_exists = 1) THEN
                    END IF; --IF (l_parent_txn_type <> 'RECEIVE') THEN
                  END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
                END LOOP; -- FOR 1..L_SERIAL_QUANTITY
              END LOOP; --FETCH C_MSNT_LOTSERIAL INTO L_MSNT_REC;

              CLOSE c_msnt_lotserial;

              IF (l_num_msnt_recs > 0) THEN
                IF l_mtlt_rec.primary_quantity <> l_tot_msnt_serial_qty THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-27392';
                  RAISE fnd_api.g_exc_error;
                END IF;
              ELSE
                IF (l_serial_number_control_code IN (2,5)
                    OR (l_serial_number_control_code = 6
                    AND l_source_document_code IN ('RMA','REQ','INVENTORY'))) THEN
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-27399';
                  RAISE fnd_api.g_exc_error;
                END IF;
              END IF;
            END IF; -- IF (L_SERIAL_NUMBER_CONTROL_CODE IN (2,5,6)) THEN
          END LOOP; --FETCH C_MTLT INTO L_MTLT_REC;

          CLOSE c_mtlt;

         /* Bug 4546519 : l_tot_mtlt_prim_qty is a computed floating point number.
          **  In the following condition, it is necessary to use round function for
          **  comparing the floating point values.
          */

          IF (l_num_mtlt_recs > 0) THEN
            IF (ROUND(l_tot_mtlt_prim_qty,5) <> ROUND(l_rti_primary_qty,5)) THEN
              -- Bug# 4225766 Compare transaction qty there can be a difference in primary qty
              --   if there is a lot specific conversion
                IF (ROUND(l_tot_mtlt_trans_qty,5) <> ROUND(l_rti_trans_qty,5)) THEN -- Bug# 4225766
                  --raise error
                  fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                  fnd_msg_pub.ADD;
                  l_progress := 'WMSINB-27413';
                  RAISE fnd_api.g_exc_error;
                END IF; -- Bug# 4225766
            END IF;
          ELSE
            IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
              IF (l_grand_parent_txn_type = 'DELIVER') THEN
                  --raise an error
                  l_progress := 'WMSINB-27420';
                  RAISE fnd_api.g_exc_error;
              ELSE
                IF (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                   --raise error;
                   fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-27427';
                   RAISE fnd_api.g_exc_error;
                END IF;
              END IF; --IF (l_grand_parent_txn_type = 'DELIVER') THEN
            ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
              IF (l_parent_txn_type <> 'DELIVER') THEN
                IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
                  IF (lot_entered_on_parent(l_parent_transaction_id)) THEN
                    --raise an error
                    l_progress := 'WMSINB-27436';
                    RAISE fnd_api.g_exc_error;
                  END IF;
                ELSE --IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
                  IF (l_parent_txn_type <> 'RECEIVE') THEN
                    IF (lot_entered_on_parent(l_grand_parent_txn_id)) THEN
                       --raise an error
                       l_progress := 'WMSINB-27443';
                       RAISE fnd_api.g_exc_error;
                    END IF;
                  END IF;
                END IF; --IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
              ELSE --IF (l_parent_txn_type <> 'DELIVER') THEN
                --raise an error
                l_progress := 'WMSINB-27450';
                RAISE fnd_api.g_exc_error;
              END IF; -- IF (l_parent_txn_type <> 'DELIVER') THEN
            END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
          END IF; --IF (l_num_mtlt_recs > 0) THEN
        ELSIF (l_serial_number_control_code IN (2,5,6)) THEN --IF (l_lot_control_code = 2) THEN
          IF (l_debug = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROLLED: '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL CONTROL CODE: '||l_serial_number_control_code||' : '||l_progress, 1);
              print_debug('VALIDATE_LOT_SERIAL_INFO: SOURCE DOCUMENT CODE: '||l_source_document_code||' : '||l_progress, 1);
              l_progress := 'WMSINB-27460';
          END IF;

          L_NUM_MSNT_RECS := 0;
          l_tot_msnt_serial_qty := 0;

          OPEN C_MSNT(L_RTI_ID);

          LOOP
            FETCH C_MSNT INTO L_MSNT_REC;

            EXIT WHEN C_MSNT%NOTFOUND;

            L_NUM_MSNT_RECS := L_NUM_MSNT_RECS + 1;
            L_SERIAL_QUANTITY :=
                      INV_SERIAL_NUMBER_PUB.GET_SERIAL_DIFF(L_MSNT_REC.FM_SERIAL_NUMBER,
                      L_MSNT_REC.TO_SERIAL_NUMBER);

            l_tot_msnt_serial_qty := l_tot_msnt_serial_qty + l_serial_quantity;
            INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.FM_SERIAL_NUMBER, L_TEMP_PREFIX, L_FROM_SER_NUMBER);
                                          INV_VALIDATE.NUMBER_FROM_SEQUENCE(L_MSNT_REC.TO_SERIAL_NUMBER, L_TEMP_PREFIX, L_TO_SER_NUMBER);

            IF (l_debug = 1) THEN
              print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL QUANTITY: '||l_serial_quantity||' : '||l_progress, 1);
              l_progress := 'WMSINB-27485';
            END IF;

            --populate attributes table
            l_serial_attributes_tbl(1).column_name   := 'SERIAL_ATTRIBUTE_CATEGORY';
            l_serial_attributes_tbl(1).column_value  := l_msnt_rec.serial_attribute_category;
            l_serial_attributes_tbl(2).column_name   := 'ORIGINATION_DATE';
            l_serial_attributes_tbl(2).column_value  := l_msnt_rec.origination_date;
            l_serial_attributes_tbl(3).column_name   := 'C_ATTRIBUTE1';
            l_serial_attributes_tbl(3).column_value  := l_msnt_rec.c_attribute1;
            l_serial_attributes_tbl(4).column_name   := 'C_ATTRIBUTE2';
            l_serial_attributes_tbl(4).column_value  := l_msnt_rec.c_attribute2;
            l_serial_attributes_tbl(5).column_name   := 'C_ATTRIBUTE3';
            l_serial_attributes_tbl(5).column_value  := l_msnt_rec.c_attribute3;
            l_serial_attributes_tbl(6).column_name   := 'C_ATTRIBUTE4';
            l_serial_attributes_tbl(6).column_value   := l_msnt_rec.c_attribute4;
            l_serial_attributes_tbl(7).column_name   := 'C_ATTRIBUTE5';
            l_serial_attributes_tbl(7).column_value   := l_msnt_rec.c_attribute5;
            l_serial_attributes_tbl(8).column_name   := 'C_ATTRIBUTE6';
            l_serial_attributes_tbl(8).column_value   := l_msnt_rec.c_attribute6;
            l_serial_attributes_tbl(9).column_name   := 'C_ATTRIBUTE7';
            l_serial_attributes_tbl(9).column_value   := l_msnt_rec.c_attribute7;
            l_serial_attributes_tbl(10).column_name  := 'C_ATTRIBUTE8';
            l_serial_attributes_tbl(10).column_value  := l_msnt_rec.c_attribute8;
            l_serial_attributes_tbl(11).column_name  := 'C_ATTRIBUTE9';
            l_serial_attributes_tbl(11).column_value  := l_msnt_rec.c_attribute9;
            l_serial_attributes_tbl(12).column_name  := 'C_ATTRIBUTE10';
            l_serial_attributes_tbl(12).column_value  := l_msnt_rec.c_attribute10;
            l_serial_attributes_tbl(13).column_name  := 'C_ATTRIBUTE11';
            l_serial_attributes_tbl(13).column_value  := l_msnt_rec.c_attribute11;
            l_serial_attributes_tbl(14).column_name  := 'C_ATTRIBUTE12';
            l_serial_attributes_tbl(14).column_value  := l_msnt_rec.c_attribute12;
            l_serial_attributes_tbl(15).column_name  := 'C_ATTRIBUTE13';
            l_serial_attributes_tbl(15).column_value  := l_msnt_rec.c_attribute13;
            l_serial_attributes_tbl(16).column_name  := 'C_ATTRIBUTE14';
            l_serial_attributes_tbl(16).column_value  := l_msnt_rec.c_attribute14;
            l_serial_attributes_tbl(17).column_name  := 'C_ATTRIBUTE15';
            l_serial_attributes_tbl(17).column_value  := l_msnt_rec.c_attribute15;
            l_serial_attributes_tbl(18).column_name  := 'C_ATTRIBUTE16';
            l_serial_attributes_tbl(18).column_value  := l_msnt_rec.c_attribute16;
            l_serial_attributes_tbl(19).column_name  := 'C_ATTRIBUTE17';
            l_serial_attributes_tbl(19).column_value  := l_msnt_rec.c_attribute17;
            l_serial_attributes_tbl(20).column_name  := 'C_ATTRIBUTE18';
            l_serial_attributes_tbl(20).column_value  := l_msnt_rec.c_attribute18;
            l_serial_attributes_tbl(21).column_name  := 'C_ATTRIBUTE19';
            l_serial_attributes_tbl(21).column_value  := l_msnt_rec.c_attribute19;
            l_serial_attributes_tbl(22).column_name  := 'C_ATTRIBUTE20';
            l_serial_attributes_tbl(22).column_value  := l_msnt_rec.c_attribute20;
            l_serial_attributes_tbl(23).column_name  := 'D_ATTRIBUTE1';
            l_serial_attributes_tbl(23).column_value  := l_msnt_rec.d_attribute1;
            l_serial_attributes_tbl(24).column_name  := 'D_ATTRIBUTE2';
            l_serial_attributes_tbl(24).column_value  := l_msnt_rec.d_attribute2;
            l_serial_attributes_tbl(25).column_name  := 'D_ATTRIBUTE3';
            l_serial_attributes_tbl(25).column_value  := l_msnt_rec.d_attribute3;
            l_serial_attributes_tbl(26).column_name  := 'D_ATTRIBUTE4';
            l_serial_attributes_tbl(26).column_value  := l_msnt_rec.d_attribute4;
            l_serial_attributes_tbl(27).column_name  := 'D_ATTRIBUTE5';
            l_serial_attributes_tbl(27).column_value  := l_msnt_rec.d_attribute5;
            l_serial_attributes_tbl(28).column_name  := 'D_ATTRIBUTE6';
            l_serial_attributes_tbl(28).column_value  := l_msnt_rec.d_attribute6;
            l_serial_attributes_tbl(29).column_name  := 'D_ATTRIBUTE7';
            l_serial_attributes_tbl(29).column_value  := l_msnt_rec.d_attribute7;
            l_serial_attributes_tbl(30).column_name  := 'D_ATTRIBUTE8';
            l_serial_attributes_tbl(30).column_value  := l_msnt_rec.d_attribute8;
            l_serial_attributes_tbl(31).column_name  := 'D_ATTRIBUTE9';
            l_serial_attributes_tbl(31).column_value  := l_msnt_rec.d_attribute9;
            l_serial_attributes_tbl(32).column_name  := 'D_ATTRIBUTE10';
            l_serial_attributes_tbl(32).column_value  := l_msnt_rec.d_attribute10;
            l_serial_attributes_tbl(33).column_name  := 'N_ATTRIBUTE1';
            l_serial_attributes_tbl(33).column_value  := l_msnt_rec.n_attribute1;
            l_serial_attributes_tbl(34).column_name  := 'N_ATTRIBUTE2';
            l_serial_attributes_tbl(34).column_value  := l_msnt_rec.n_attribute2;
            l_serial_attributes_tbl(35).column_name  := 'N_ATTRIBUTE3';
            l_serial_attributes_tbl(35).column_value  := l_msnt_rec.n_attribute3;
            l_serial_attributes_tbl(36).column_name  := 'N_ATTRIBUTE4';
            l_serial_attributes_tbl(36).column_value  := l_msnt_rec.n_attribute4;
            l_serial_attributes_tbl(37).column_name  := 'N_ATTRIBUTE5';
            l_serial_attributes_tbl(37).column_value := l_msnt_rec.n_attribute5;
            l_serial_attributes_tbl(38).column_name  := 'N_ATTRIBUTE6';
            l_serial_attributes_tbl(38).column_value := l_msnt_rec.n_attribute6;
            l_serial_attributes_tbl(39).column_name  := 'N_ATTRIBUTE7';
            l_serial_attributes_tbl(39).column_value := l_msnt_rec.n_attribute7;
            l_serial_attributes_tbl(40).column_name  := 'N_ATTRIBUTE8';
            l_serial_attributes_tbl(40).column_value := l_msnt_rec.n_attribute8;
            l_serial_attributes_tbl(41).column_name  := 'N_ATTRIBUTE9';
            l_serial_attributes_tbl(41).column_value := l_msnt_rec.n_attribute9;
            l_serial_attributes_tbl(42).column_name  := 'N_ATTRIBUTE10';
            l_serial_attributes_tbl(42).column_value := l_msnt_rec.n_attribute10;
            l_serial_attributes_tbl(43).column_name  := 'STATUS_ID';
            l_serial_attributes_tbl(43).column_value := l_msnt_rec.status_id;
            l_serial_attributes_tbl(44).column_name  := 'TERRITORY_CODE';
            l_serial_attributes_tbl(44).column_value := l_msnt_rec.territory_code;
            l_serial_attributes_tbl(45).column_name   := 'ATTRIBUTE_CATEGORY';
            l_serial_attributes_tbl(45).column_value  := l_msnt_rec.attribute_category;
            l_serial_attributes_tbl(46).column_name   := 'ATTRIBUTE1';
            l_serial_attributes_tbl(46).column_value  := l_msnt_rec.attribute1;
            l_serial_attributes_tbl(47).column_name   := 'ATTRIBUTE2';
            l_serial_attributes_tbl(47).column_value  := l_msnt_rec.attribute2;
            l_serial_attributes_tbl(48).column_name   := 'ATTRIBUTE3';
            l_serial_attributes_tbl(48).column_value  := l_msnt_rec.attribute3;
            l_serial_attributes_tbl(49).column_name   := 'ATTRIBUTE4';
            l_serial_attributes_tbl(49).column_value   := l_msnt_rec.attribute4;
            l_serial_attributes_tbl(50).column_name   := 'ATTRIBUTE5';
            l_serial_attributes_tbl(50).column_value   := l_msnt_rec.attribute5;
            l_serial_attributes_tbl(51).column_name   := 'ATTRIBUTE6';
            l_serial_attributes_tbl(51).column_value   := l_msnt_rec.attribute6;
            l_serial_attributes_tbl(52).column_name   := 'ATTRIBUTE7';
            l_serial_attributes_tbl(52).column_value   := l_msnt_rec.attribute7;
            l_serial_attributes_tbl(53).column_name  := 'ATTRIBUTE8';
            l_serial_attributes_tbl(53).column_value  := l_msnt_rec.attribute8;
            l_serial_attributes_tbl(54).column_name  := 'ATTRIBUTE9';
            l_serial_attributes_tbl(54).column_value  := l_msnt_rec.attribute9;
            l_serial_attributes_tbl(55).column_name  := 'ATTRIBUTE10';
            l_serial_attributes_tbl(55).column_value  := l_msnt_rec.attribute10;
            l_serial_attributes_tbl(56).column_name  := 'ATTRIBUTE11';
            l_serial_attributes_tbl(56).column_value  := l_msnt_rec.attribute11;
            l_serial_attributes_tbl(57).column_name  := 'ATTRIBUTE12';
            l_serial_attributes_tbl(57).column_value  := l_msnt_rec.attribute12;
            l_serial_attributes_tbl(58).column_name  := 'ATTRIBUTE13';
            l_serial_attributes_tbl(58).column_value  := l_msnt_rec.attribute13;
            l_serial_attributes_tbl(59).column_name  := 'ATTRIBUTE14';
            l_serial_attributes_tbl(59).column_value  := l_msnt_rec.attribute14;
            l_serial_attributes_tbl(60).column_name  := 'ATTRIBUTE15';
            l_serial_attributes_tbl(60).column_value  := l_msnt_rec.attribute15;

            --Validate the serials
            FOR SERIALQTY IN 1..L_SERIAL_QUANTITY LOOP

              l_progress := 'WMSINB-27491';

              L_CUR_NUMBER := L_FROM_SER_NUMBER+SERIALQTY -1;
              if L_FROM_SER_NUMBER = -1 and  L_TO_SER_NUMBER = -1 then
                L_SERIAL_NUMBER  := L_MSNT_REC.fm_serial_number;
              else
                  L_SERIAL_NUMBER := SUBSTR(L_MSNT_REC.FM_SERIAL_NUMBER, 1,
                                      LENGTH(L_MSNT_REC.FM_SERIAL_NUMBER) -
                                      LENGTH(L_CUR_NUMBER))
                                        ||L_CUR_NUMBER;
              End if;

              l_progress := 'WMSINB-27499';
              BEGIN
                SELECT CURRENT_ORGANIZATION_ID
                  , current_status
                  , lot_number
                  , Decode(lpn_id,0,NULL,lpn_id)
                  , inspection_status
                  , group_mark_id
                  INTO L_CURR_ORG_ID
                  , l_curr_status
                  , l_curr_lot_num
                  , l_curr_lpn_id
                  , l_inspection_status
                  , l_group_mark_id
                  FROM MTL_SERIAL_NUMBERS
                  WHERE SERIAL_NUMBER = l_serial_number
                  AND inventory_item_id = l_item_id;

                l_serial_exists := 1;
                l_progress := 'WMSINB-27519';
              EXCEPTION
                WHEN no_data_found THEN
                   l_serial_exists := 0;
                   l_progress := 'WMSINB-27523';
              END;

              IF (l_debug = 1) THEN
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL EXISTS: '||l_serial_exists||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: SERIAL NUMBER: '||l_serial_number||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR STATUS: '||l_curr_status||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR ORG ID: '||l_curr_org_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LPN ID: '||l_curr_lpn_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: CURR LOT NUM: '||l_curr_lot_num||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: INSPECT STS: '||l_inspection_status||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: GROUP MARK ID: '||l_group_mark_id||' : '||l_progress, 1);
                  print_debug('VALIDATE_LOT_SERIAL_INFO: RESTRICT RCPT SER: '||l_restrict_rcpt_ser||' : '||l_progress, 1);
                  l_progress := 'WMSINB-27536';
              END IF;

              IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
                IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                  IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                    --raise an error
                    RAISE fnd_api.g_exc_error;
                  ELSE --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                    BEGIN
                      SELECT '1'
                      INTO L_DUMMY
                      FROM RCV_SERIALS_SUPPLY
                      WHERE TRANSACTION_ID = l_grand_parent_txn_id
                      AND SERIAL_NUM = L_SERIAL_NUMBER;

                      IF (l_curr_status <> 7) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27557';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      --Validate serial/group_mark_id to prevent
                      --entering of duplicate serials

                      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27568';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27577';
                         RAISE fnd_api.g_exc_error;
                      END IF;
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                         -- RAISE ERROR
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27585';
                         RAISE fnd_api.g_exc_error;
                    END;
                  END IF; --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                ELSE --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                  IF l_curr_org_id <> l_org_id THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-27594';
                     RAISE fnd_api.g_exc_error;
                  ELSE
                     IF (l_curr_lot_num IS NOT NULL) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-27601';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  END IF;

                  IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                     IF l_curr_status NOT IN (1,6) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-27611';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  ELSE --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN
                     IF (l_curr_status <> 3) THEN
                        --raise error
                        fnd_message.set_name('INV','INV_FAIL_VALIDATE_SERIAL');
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-27619';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  END IF; --IF (l_source_document_code = 'RMA' AND l_serial_number_control_code = 6) THEN

                  IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-27628';
                     RAISE fnd_api.g_exc_error;
                  END IF;

                  IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                     --validate and update the attributes.
                     inv_serial_number_pub.validate_update_serial_att
                       (x_return_status     => x_return_status,
                        x_msg_count         => x_msg_count,
                        x_msg_data          => x_msg_data,
                        x_validation_status => l_validation_status,
                        p_serial_number     => l_serial_number,
                        p_organization_id   => l_org_id,
                        p_inventory_item_id => l_item_id,
                        p_serial_att_tbl    => l_serial_attributes_tbl,
                        p_validate_only     => FALSE
                        );

                     IF (l_validation_status <> 'Y'
                         OR x_return_status <> g_ret_sts_success) THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-27634';
                        RAISE fnd_api.g_exc_error;
                     END IF;
                  END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                  --UPDATE GROUP_MARK_ID TO -7937
                  IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                     --raise error
                     fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                     fnd_msg_pub.ADD;
                     l_progress := 'WMSINB-27637';
                     RAISE fnd_api.g_exc_error;
                  END IF;
                END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
              ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
                IF (l_parent_txn_type <> 'RECEIVE') THEN
                  IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                    BEGIN
                      SELECT '1'
                        INTO L_DUMMY
                        FROM RCV_SERIALS_SUPPLY
                        WHERE TRANSACTION_ID = l_grand_parent_txn_id
                        AND SERIAL_NUM = L_SERIAL_NUMBER;

                      IF (l_curr_status <> 7) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27655';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      --Validate serial/group_mark_id to prevent
                      --entering of duplicate serials

                      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27666';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27675';
                         RAISE fnd_api.g_exc_error;
                      END IF;
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                         -- RAISE ERROR
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27683';
                         RAISE fnd_api.g_exc_error;
                    END;
                  ELSE --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                    IF (l_serial_exists = 1) THEN
                      IF l_curr_org_id <> l_org_id THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27692';
                         RAISE fnd_api.g_exc_error;
                      ELSE
                        IF (l_curr_lot_num IS NOT NULL) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27699';
                          RAISE fnd_api.g_exc_error;
                        END IF;
                      END IF;

                      IF l_curr_status NOT IN (1,4,6) THEN -- Bug 6177465
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27708';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27716';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                         --validate and update the attributes.
                         inv_serial_number_pub.validate_update_serial_att
                           (x_return_status     => x_return_status,
                            x_msg_count         => x_msg_count,
                            x_msg_data          => x_msg_data,
                            x_validation_status => l_validation_status,
                            p_serial_number     => l_serial_number,
                            p_organization_id   => l_org_id,
                            p_inventory_item_id => l_item_id,
                            p_serial_att_tbl    => l_serial_attributes_tbl,
                            p_validate_only     => FALSE
                            );

                         IF (l_validation_status <> 'Y'
                             OR x_return_status <> g_ret_sts_success) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27721';
                            RAISE fnd_api.g_exc_error;
                         END IF;
                      END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                       --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27725';
                           RAISE fnd_api.g_exc_error;
                      END IF;
                    ELSE --IF (l_serial_exists = 1) THEN
                      IF l_serial_number_control_code = 5 THEN
                        --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                        --(INCLUDING ATT VALIDATION)
                        --CREATE MSN
                        IF (l_transaction_type = 'CORRECT') THEN
                          l_transaction_action_id := 29;
                        ELSE
                          l_transaction_action_id := 1;
                        END IF;

                        inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                                     , p_inventory_item_id => l_item_id
                                     , p_organization_id => l_org_id
                                     , p_from_serial_number => l_serial_number
                                     , p_to_serial_number => l_serial_number
                                     , p_initialization_date => SYSDATE
                                     , p_completion_date => NULL
                                     , p_ship_date => NULL
                                     , p_revision => l_item_revision
                                     , p_lot_number => NULL
                                     , p_current_locator_id => l_loc_id
                                     , p_subinventory_code => l_sub_code
                                     , p_trx_src_id => NULL
                                     , p_unit_vendor_id => NULL
                                     , p_vendor_lot_number => NULL
                                     , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                                     , p_receipt_issue_type => NULL
                                     , p_txn_src_id => NULL
                                     , p_txn_src_name => NULL
                                     , p_txn_src_type_id => NULL
                                     , p_transaction_id => NULL
                                     , p_current_status => 1
                                     , p_parent_item_id => NULL
                                     , p_parent_serial_number => NULL
                                     , p_cost_group_id => NULL
                                     , p_transaction_action_id => l_transaction_action_id
                                     , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                                     , p_status_id => NULL
                                     , p_inspection_status => NULL
                                     , x_object_id => l_object_id
                                     , x_return_status => x_return_status
                                     , x_msg_count => x_msg_count
                                     , x_msg_data => x_msg_data);

                        IF (x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27730';
                          RAISE fnd_api.g_exc_error;
                        END IF;

                        --validate and update the attributes.
                        inv_serial_number_pub.validate_update_serial_att
                           (x_return_status     => x_return_status,
                            x_msg_count         => x_msg_count,
                            x_msg_data          => x_msg_data,
                            x_validation_status => l_validation_status,
                            p_serial_number     => l_serial_number,
                            p_organization_id   => l_org_id,
                            p_inventory_item_id => l_item_id,
                            p_serial_att_tbl    => l_serial_attributes_tbl,
                            p_validate_only     => FALSE
                            );

                        IF (l_validation_status <> 'Y'
                           OR x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27770';
                          RAISE fnd_api.g_exc_error;
                        END IF;

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27778';
                          RAISE fnd_api.g_exc_error;
                        END IF;
                      ELSE --IF l_serial_number_control_code = 5 THEN
                        --raise error
                        fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                        fnd_msg_pub.ADD;
                        l_progress := 'WMSINB-27785';
                        RAISE fnd_api.g_exc_error;
                      END IF; --IF l_serial_number_control_code = 5 THEN
                    END IF; --IF (l_serial_exists = 1) THEN
                  END IF; --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                ELSE --IF (l_parent_txn_type <> 'RECEIVE') THEN
                  IF (l_serial_exists = 1) THEN
                    IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                      -- CHECK TO SEE IF THE ITEM IS SERIAL
                      -- CONTROLLED IN SOURCE ORG

                      GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                         (L_SHIPMENT_LINE_ID, L_ORG_ID,
                          L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
                          l_from_org_rev_ctrl, X_RETURN_STATUS,
                          X_MSG_COUNT, X_MSG_DATA);

                      IF ((L_FROM_ORG_SER_CRTL IN (2,5,6) AND l_source_document_code = 'REQ')
                           OR (l_from_org_ser_crtl IN (2,5) AND l_source_document_code = 'INVENTORY')
                         ) THEN
                        IF l_curr_org_id <> l_from_org_id THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27806';
                           RAISE fnd_api.g_exc_error;
                        ELSE --IF l_curr_org_id <> l_from_org_id THEN
                          IF (l_curr_lot_num IS NOT NULL) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27813';
                            RAISE fnd_api.g_exc_error;
                          END IF;
                        END IF; --IF l_curr_org_id <> l_from_org_id THEN

                        BEGIN
                           SELECT '1'
                             INTO L_DUMMY
                             FROM rcv_serials_supply rss
                             , rcv_shipment_lines rsl
                             WHERE rss.SHIPMENT_LINE_ID = rsl.SHIPMENT_LINE_ID
                             AND rsl.shipment_header_id = l_shipment_header_id
                             AND rsl.item_id = l_item_id
                             AND rss.SUPPLY_TYPE_CODE = 'SHIPMENT'
                             AND rss.serial_num = l_serial_number;

                          IF L_CURR_STATUS <> 5 THEN
                            -- RAISE AN ERROR
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27830';
                            RAISE fnd_api.g_exc_error;
                          END IF;

                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                            -- RAISE AN ERROR
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27839';
                            RAISE fnd_api.g_exc_error;
                        END;
                      ELSE --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                        IF l_curr_org_id <> l_org_id THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27847';
                           RAISE fnd_api.g_exc_error;
                        ELSE
                          IF (l_curr_lot_num IS NOT NULL) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27854';
                            RAISE fnd_api.g_exc_error;
                          END IF;
                        END IF;

                        IF l_curr_status NOT IN (1,6) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27863';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27871';
                           RAISE fnd_api.g_exc_error;
                        END IF;

                        IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                           --validate and update the attributes.
                           inv_serial_number_pub.validate_update_serial_att
                             (x_return_status     => x_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              x_validation_status => l_validation_status,
                              p_serial_number     => l_serial_number,
                              p_organization_id   => l_org_id,
                              p_inventory_item_id => l_item_id,
                              p_serial_att_tbl    => l_serial_attributes_tbl,
                              p_validate_only     => FALSE
                              );

                           IF (l_validation_status <> 'Y'
                               OR x_return_status <> g_ret_sts_success) THEN
                              --raise error
                              fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                              fnd_msg_pub.ADD;
                              l_progress := 'WMSINB-27876';
                              RAISE fnd_api.g_exc_error;
                           END IF;
                        END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                        --UPDATE GROUP_MARK_ID TO -7937
                        IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                           --raise error
                           fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                           fnd_msg_pub.ADD;
                           l_progress := 'WMSINB-27880';
                           RAISE fnd_api.g_exc_error;
                        END IF;
                      END IF; --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                    ELSE --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                      IF l_curr_org_id <> l_org_id THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27889';
                         RAISE fnd_api.g_exc_error;
                      ELSE
                        IF (l_curr_lot_num IS NOT NULL) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27896';
                          RAISE fnd_api.g_exc_error;
                        END IF;
                      END IF;

                      IF l_curr_status NOT IN (1,4,6) THEN--Bug: 6450814
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27905';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (Nvl(l_group_mark_id, -99) = -7937) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27913';
                         RAISE fnd_api.g_exc_error;
                      END IF;

                      IF (Nvl(l_curr_status, 1) in (1,6)) THEN
                         --validate and update the attributes.
                         inv_serial_number_pub.validate_update_serial_att
                           (x_return_status     => x_return_status,
                            x_msg_count         => x_msg_count,
                            x_msg_data          => x_msg_data,
                            x_validation_status => l_validation_status,
                            p_serial_number     => l_serial_number,
                            p_organization_id   => l_org_id,
                            p_inventory_item_id => l_item_id,
                            p_serial_att_tbl    => l_serial_attributes_tbl,
                            p_validate_only     => FALSE
                            );

                         IF (l_validation_status <> 'Y'
                             OR x_return_status <> g_ret_sts_success) THEN
                            --raise error
                            fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                            fnd_msg_pub.ADD;
                            l_progress := 'WMSINB-27918';
                            RAISE fnd_api.g_exc_error;
                         END IF;
                      END IF; --IF (Nvl(l_curr_status, 1) = 1) THEN

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27922';
                         RAISE fnd_api.g_exc_error;
                      END IF;
                    END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                  ELSE --IF (l_serial_exists = 1) THEN
                    IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN
                        -- CHECK TO SEE IF THE ITEM IS SERIAL
                        -- CONTROLLED IN SOURCE ORG

                        GET_SERIAL_LOT_CTRL_IN_SRC_ORG
                          (L_SHIPMENT_LINE_ID, L_ORG_ID,
                           L_FROM_ORG_SER_CRTL, L_FROM_ORG_LOT_CTRL,
                           l_from_org_rev_ctrl, X_RETURN_STATUS,
                           X_MSG_COUNT, X_MSG_DATA);

                      IF ((L_FROM_ORG_SER_CRTL IN (2,5,6)
                            AND l_source_document_code = 'REQ')
                          OR (l_from_org_ser_crtl IN (2,5)
                              AND l_source_document_code = 'INVENTORY')
                         ) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27940';
                         RAISE fnd_api.g_exc_error;
                      END IF; --IF (L_FROM_ORG_SER_CRTL IN (2,5,6)) THEN
                    END IF; --IF (L_SOURCE_DOCUMENT_CODE IN ('INVENTORY','REQ')) THEN

                    IF l_serial_number_control_code = 5 THEN
                      --PERFORM SERIAL VALIDATION FOR NEW SERIAL
                      --(INCLUDING ATT VALIDATION)
                      --CREATE MSN
                      IF (l_transaction_type = 'CORRECT') THEN
                        l_transaction_action_id := 29;
                      ELSE
                        l_transaction_action_id := 1;
                      END IF;

                      inv_serial_number_pub.insert_range_serial(p_api_version => 1.0
                            , p_inventory_item_id => l_item_id
                            , p_organization_id => l_org_id
                            , p_from_serial_number => l_serial_number
                            , p_to_serial_number => l_serial_number
                            , p_initialization_date => SYSDATE
                            , p_completion_date => NULL
                            , p_ship_date => NULL
                            , p_revision => l_item_revision
                            , p_lot_number => NULL
                            , p_current_locator_id => l_loc_id
                            , p_subinventory_code => l_sub_code
                            , p_trx_src_id => NULL
                            , p_unit_vendor_id => NULL
                            , p_vendor_lot_number => NULL
                            , p_vendor_serial_number => l_msnt_rec.vendor_serial_number
                            , p_receipt_issue_type => NULL
                            , p_txn_src_id => NULL
                            , p_txn_src_name => NULL
                            , p_txn_src_type_id => NULL
                            , p_transaction_id => NULL
                            , p_current_status => 1
                            , p_parent_item_id => NULL
                            , p_parent_serial_number => NULL
                            , p_cost_group_id => NULL
                            , p_transaction_action_id => l_transaction_action_id
                            , p_transaction_temp_id => l_msnt_rec.transaction_temp_id
                            , p_status_id => NULL
                            , p_inspection_status => NULL
                            , x_object_id => l_object_id
                            , x_return_status => x_return_status
                            , x_msg_count => x_msg_count
                            , x_msg_data => x_msg_data);

                      IF (x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27950';
                          RAISE fnd_api.g_exc_error;
                      END IF;

                      --validate and update the attributes.
                      inv_serial_number_pub.validate_update_serial_att
                         (x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          x_validation_status => l_validation_status,
                          p_serial_number     => l_serial_number,
                          p_organization_id   => l_org_id,
                          p_inventory_item_id => l_item_id,
                          p_serial_att_tbl    => l_serial_attributes_tbl,
                          p_validate_only     => FALSE
                          );

                      IF (l_validation_status <> 'Y'
                           OR x_return_status <> g_ret_sts_success) THEN
                          --raise error
                          fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                          fnd_msg_pub.ADD;
                          l_progress := 'WMSINB-27985';
                          RAISE fnd_api.g_exc_error;
                      END IF;

                      --UPDATE GROUP_MARK_ID TO -7937
                      IF NOT (update_group_mark_id(l_item_id,l_serial_number)) THEN
                         --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-27994';
                         RAISE fnd_api.g_exc_error;
                      END IF;
                    ELSE --IF l_serial_number_control_code = 5 THEN
                      --raise error
                      fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                      fnd_msg_pub.ADD;
                      l_progress := 'WMSINB-28001';
                      RAISE fnd_api.g_exc_error;
                    END IF; --IF l_serial_number_control_code = 5 THEN
                  END IF; --IF (l_serial_exists = 1) THEN
                END IF; --IF (l_parent_txn_type <> 'RECEIVE') THEN
              END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
            END LOOP; -- FOR 1..L_SERIAL_QUANTITY
          END LOOP; --FETCH C_MSNT INTO L_MSNT_REC;

          CLOSE c_msnt;

          IF (l_num_msnt_recs > 0) THEN
            IF l_mtlt_rec.primary_quantity <> l_tot_msnt_serial_qty THEN
               --raise error
               fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
               fnd_msg_pub.ADD;
               l_progress := 'WMSINB-28017';
               RAISE fnd_api.g_exc_error;
            END IF;
          ELSE --IF (l_num_msnt_recs > 0) THEN
            IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
              IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                   --raise an error
                   fnd_message.set_name('INV' , 'INV_FAIL_VALIDATE_SERIAL');
                   fnd_msg_pub.ADD;
                   l_progress := 'WMSINB-28027';
                   RAISE fnd_api.g_exc_error;
                END IF; --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
              ELSE --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
                --raise an error
                fnd_message.set_name('INV' , 'INV_FAIL_VALIDATE_SERIAL');
                fnd_msg_pub.ADD;
                l_progress := 'WMSINB-28034';
                RAISE fnd_api.g_exc_error;
              END IF; --IF (l_grand_parent_txn_type <> 'DELIVER') THEN
            ELSE --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
              IF (l_parent_txn_type <> 'DELIVER') THEN
                IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
                  IF (serial_entered_on_parent(l_parent_transaction_id)) THEN
                    --raise an error
                    fnd_message.set_name('INV' , 'INV_FAIL_VALIDATE_SERIAL');
                    fnd_msg_pub.ADD;
                    l_progress := 'WMSINB-28044';
                    RAISE fnd_api.g_exc_error;
                  END IF; --IF (serial_entered_on_parent(l_parent_transaction_id)) THEN
                ELSE --IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
                  IF (l_parent_txn_type <> 'RECEIVE') THEN
                    IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                       --raise an error
                       fnd_message.set_name('INV' , 'INV_FAIL_VALIDATE_SERIAL');
                       fnd_msg_pub.ADD;
                       l_progress := 'WMSINB-28053';
                       RAISE fnd_api.g_exc_error;
                    END IF; --IF (serial_entered_on_parent(l_grand_parent_txn_id)) THEN
                  END IF; --IF (l_parent_txn_type <> 'RECEIVE') THEN
                END IF; --IF (validate_rs(NULL,l_parent_transaction_id,l_dummy_lpn)) THEN
              ELSE --IF (l_parent_txn_type <> 'DELIVER') THEN
                IF (l_serial_number_control_code IN (2,5)
                    OR (l_serial_number_control_code = 6
                        AND l_source_document_code = 'RMA')) THEN
                       --raise error
                         fnd_message.set_name ('INV' , 'INV_FAIL_VALIDATE_SERIAL' );
                         fnd_msg_pub.ADD;
                         l_progress := 'WMSINB-28062';
                         RAISE fnd_api.g_exc_error;
                END IF;
              END IF; --IF (l_parent_txn_type <> 'DELIVER') THEN
            END IF; --IF (l_parent_txn_type IN (g_rtv,g_rtc,g_rtr)) THEN
          END IF; --IF (l_num_msnt_recs > 0) THEN
        END IF; --IF (l_lot_control_code = 2) THEN
      END IF; --IF ((l_transaction_type = 'CORRECT' AND l_rti_primary_qty < 0)
    END IF; --IF (l_transaction_type IN ('CORRECT',G_RTR,G_RTV,G_RTC)) THEN

    IF (l_debug = 1) THEN
      --print_debug('VALIDATE_LOT_SERIAL_INFO: What a relief !!! Completed succesfully !!!',1);
      print_debug('VALIDATE_LOT_SERIAL_INFO:Completed succesfully!',1);
    END IF;

  EXCEPTION
     WHEN fnd_api.g_exc_error THEN
        x_return_status  := g_ret_sts_error;
        IF (l_debug = 1) THEN
           print_debug('Exitting VALIDATE_LOT_SERIAL_INFO - execution error:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
           print_stacked_messages;
        END IF;
        x_msg_data := l_progress;
     WHEN fnd_api.g_exc_unexpected_error THEN
        x_return_status  := g_ret_sts_unexp_error;
        IF (l_debug = 1) THEN
           print_debug('Exitting VALIDATE_LOT_SERIAL_INFO - unexpected error:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
           print_stacked_messages;
        END IF;
        x_msg_data := l_progress;
     WHEN OTHERS THEN
        X_RETURN_STATUS  := G_RET_STS_UNEXP_ERROR;
        IF (L_DEBUG = 1) THEN
           PRINT_DEBUG('Exitting VALIDATE_LOT_SERIAL_INFO - OTHER EXCEPTION:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS')||':'||l_progress, 1);
           print_stacked_messages;
        END IF;

        x_msg_data := l_progress;

        IF SQLCODE IS NOT NULL THEN
           INV_MOBILE_HELPER_FUNCTIONS.SQL_ERROR('INV_RCV_INTERFACE_PVT.VALIDATE_LOT_SERIAL_INFO', Sqlerrm, SQLCODE);
        END IF;
        -- GET MESSAGE COUNT AND DATA
        -- FND_MSG_PUB.COUNT_AND_GET(P_ENCODED => G_FALSE, P_COUNT => X_MSG_COUNT, P_DATA => X_MSG_DATA);
  END VALIDATE_LOT_SERIAL_INFO;

	/*
	This processdure validates the LPN to restric the multiple users doing transactions on same LPN
	Added for the Bug:13613257
  */


  PROCEDURE Validate_Receiving_LPN(
  	p_lpn_id     IN NUMBER,
  	p_routing_id IN NUMBER,
  	x_return_status OUT NOCOPY VARCHAR2,
  	x_msg_count OUT NOCOPY     NUMBER,
  	x_msg_data OUT NOCOPY      VARCHAR2)
  IS
	  CURSOR c_validate_loaded_lpn
	  IS
		SELECT
		  1
		FROM
		  WMS_DISPATCHED_TASKS WDT,
		  MTL_MATERIAL_TRANSACTIONS_TEMP MMTT
		WHERE
		  NVL(MMTT.content_lpn_id, MMTT.lpn_id)                = p_lpn_id
		AND MMTT.transaction_temp_id = WDT.transaction_temp_id
		AND WDT.STATUS               = 4 ;

	  CURSOR c_validate_rec_lpn
	  IS
		SELECT
		  lpn_context, license_plate_number
		FROM
		  WMS_LICENSE_PLATE_NUMBERS WLPN
		WHERE
		  WLPN.LPN_ID          = p_lpn_id ;
	  l_progress    VARCHAR2(15) := '00';
	  l_debug       NUMBER       := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
	  l_exit        NUMBER ;
	  l_lpn_context NUMBER;
	  l_lpn 		VARCHAR2(200);
	  l_lpn_rec c_validate_rec_lpn%rowTYPE;
	  l_lpn_lod c_validate_loaded_lpn%rowTYPE;
  BEGIN
      x_return_status := g_ret_sts_success;
      x_msg_count     := 0 ;

      IF (l_debug      = 1) THEN
        print_debug('VALIDATE_LPN Entered...:'|| l_progress || ' ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
        print_debug('VALIDATE_LPN p_lpn_id...: '|| p_lpn_id, 1);
        print_debug('VALIDATE_LPN p_routing_id...: '|| p_routing_id, 1);
      END IF;

      IF (p_lpn_id IS NULL OR p_lpn_id<0) THEN
        fnd_message.set_name('WMS', 'WMS_CONT_INVALID_LPN');
        --fnd_message.set_token('LPN', l_lpn);
        fnd_msg_pub.add;
        x_return_status := g_ret_sts_error;
        RETURN;
      END IF;

      IF (p_lpn_id=0) THEN
         IF (l_debug      = 1) THEN
          print_debug('VALIDATE_LPN lpn_id is 0 hence no need to validate... ', 1);
        END IF;
        RETURN;
      END IF;
	 /*
	  SELECT license_plate_number
		INTO l_lpn
		FROM WMS_LICENSE_PLATE_NUMBERS
	   WHERE LPN_ID          = p_lpn_id ;*/

      IF (l_debug = 1) THEN
        print_debug('VALIDATE_LPN - Checking LPN '||l_lpn||' is in receiving or not' || l_progress || '' || p_lpn_id,1 );
      END IF;

      OPEN c_validate_rec_lpn;
      FETCH c_validate_rec_lpn INTO	l_lpn_rec;

      IF (c_validate_rec_lpn%FOUND ) THEN

        IF (l_lpn_rec.lpn_context IN (5,6,7))THEN
          IF (l_debug      = 1) THEN
            print_debug('VALIDATE_LPN lpn_id is in context 5 or 6 or 7. Hence no need to validate... ', 1);
          END IF;
          CLOSE c_validate_rec_lpn;
          RETURN;
        END IF;

        IF (p_routing_id                <> 3 ) THEN
          IF (l_lpn_rec.lpn_context <> 3 ) THEN
            IF (l_debug                  = 1) THEN
              print_debug('VALIDATE_LPN - This is not a Receiving LPN' ||l_progress || '' || p_lpn_id,1 );
            END IF;

            fnd_message.set_name('WMS', 'WMS_CONT_INVALID_LPN');
            --fnd_message.set_token('LPN', l_lpn);
            fnd_msg_pub.add;

            x_return_status := g_ret_sts_error;
            x_msg_count := 1;
            CLOSE c_validate_rec_lpn;
            RETURN;
          ELSE
            IF (l_debug = 1) THEN
              print_debug('VALIDATE_LPN - LPN '||l_lpn||' is a receiving LPN' ||l_progress || '' || p_lpn_id,1 );
            END IF;
          END IF;
        ELSIF (l_lpn_rec.lpn_context <> 1)THEN
          IF (l_debug                 = 1) THEN
            print_debug('VALIDATE_LPN - This is Direct routing and LPN '||l_lpn||' is not in Inventory' || l_progress || '' || p_lpn_id,1 );
          END IF;

          fnd_message.set_name('WMS', 'WMS_CONT_INVALID_LPN');
          --fnd_message.set_token('LPN', l_lpn);
          fnd_msg_pub.add;

          x_return_status := g_ret_sts_error;
          x_msg_count :=1;
          CLOSE c_validate_rec_lpn;
          RETURN;
        END IF ;
      ELSE
        IF (l_debug = 1) THEN
		  print_debug('Cursor c_validate_rec_lpn not found' ||l_progress || '' ||
		  p_lpn_id,1 );
        END IF;

        fnd_message.set_name('WMS', 'WMS_CONT_INVALID_LPN');
        --fnd_message.set_token('LPN', l_lpn);
        fnd_msg_pub.add;

        x_return_status := g_ret_sts_error;
        x_msg_count := 1;
        CLOSE c_validate_rec_lpn;
        RETURN;
      END IF ;

	  CLOSE c_validate_rec_lpn;

      IF (l_debug = 1) THEN
        print_debug('VALIDATE_LPN - Checking LPN '||l_lpn||' is loaded or not' ||l_progress || '' || p_lpn_id,1 );
      END IF;

      OPEN c_validate_loaded_lpn;
      FETCH c_validate_loaded_lpn INTO l_lpn_lod;
      IF (c_validate_loaded_lpn%FOUND ) THEN
        l_progress := 'WMSINB-001';

    	IF (l_debug = 1) THEN
          print_debug('VALIDATE_LPN - LPN '||l_lpn||' IS Loaded : ' ||l_progress || ' : ' || p_lpn_id ,1 );
        END IF;

        fnd_message.set_name('WMS', 'WMS_LPN_ALREADY_ENTERED');
        fnd_message.set_token('LPN_NAME', l_lpn_rec.license_plate_number);
        fnd_msg_pub.add;

        x_return_status := g_ret_sts_error;
        x_msg_count :=1;
      ELSE
        IF (l_debug = 1) THEN
          print_debug('VALIDATE_LPN - LPN '||l_lpn||' is not  Loaded' ||l_progress || '' ||  p_lpn_id,1 );
        END IF;
      END IF ;
      CLOSE c_validate_loaded_lpn;

  EXCEPTION
    WHEN fnd_api.g_exc_error THEN
      x_return_status := g_ret_sts_error;
      IF (l_debug      = 1) THEN
        print_debug('VALIDATE_LPN - Execution Error:'|| l_progress || ':' ||SQLCODE, 1);
        print_stacked_messages;
      END IF;
      x_msg_data := l_progress;
    WHEN OTHERS THEN
      x_return_status := g_ret_sts_unexp_error;
      IF (l_debug      = 1) THEN
        print_debug('VALIDATE_LPN - OTHER Exception:'|| l_progress || ' ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:DD:SS'), 1);
        print_stacked_messages;
      END IF;
      x_msg_data := l_progress;
      IF SQLCODE IS NOT NULL THEN
        inv_mobile_helper_functions.sql_error('INV_RCV_INTEGRATION_PVT.VALIDATE_LPN',l_progress, SQLCODE);
      END IF;
  END Validate_Receiving_LPN;

--14615225


   FUNCTION get_uom_code(p_uom IN VARCHAR2)
   RETURN VARCHAR2
   IS
   l_uom_code VARCHAR2(30) ;

   BEGIN

   print_debug( 'In get_UOM_CODE ' || p_uom ,1);
    l_uom_code := NULL ;

    IF p_uom is not NULL
    THEN
      BEGIN
        SELECT uom_code
          INTO l_uom_code
          FROM mtl_units_of_measure
         WHERE unit_of_measure = p_uom ;

        EXCEPTION
        WHEN  NO_DATA_FOUND
         THEN
           l_uom_code := '@@@' ;

         WHEN TOO_MANY_ROWS
         THEN
           l_uom_code := '@@@' ;
      END ;

   END IF;
  RETURN( l_uom_code );
  END;

   PROCEDURE check_over_receipt(p_lpn_id          IN NUMBER,
                                p_item_id         IN NUMBER,
                                p_organization_id IN NUMBER,
                                p_qty_entered     IN NUMBER,
                                p_transaction_uom IN VARCHAR2,
                                x_qty_left        OUT NOCOPY VARCHAR2,
                                x_return_status   OUT NOCOPY VARCHAR2)
   IS
   l_pr_UoM_code         VARCHAR2(5);

   l_shipped_pr_quantity NUMBER :=0;
   l_recd_pr_quantity    NUMBER :=0;
   l_rti_pr_qty          NUMBER :=0;
   l_debug               NUMBER := NVL(FND_PROFILE.VALUE('INV_DEBUG_TRACE'),0);
   l_progress            VARCHAR2(25);
   l_rsl_UoM             VARCHAR2(3);
   l_rsl_pr_UoM          VARCHAR2(3);
   l_shipped_quantity_tr_uom NUMBER :=0;
   l_recd_quantity_tr_uom    NUMBER :=0;
   l_rti_quantity_tr_uom     NUMBER :=0;
   l_rti_UoM                 VARCHAR2(3);
   l_comp_pr                 BOOLEAN :=FALSE;
   l_qty_entered_pr_uom      NUMBER;


   CURSOR c_rsl_cursor IS
   SELECT Sum(rsl.quantity_shipped) quantity_shipped ,
          Sum(rsl.quantity_received) quantity_received,
          rsl.unit_of_measure
     FROM rcv_shipment_lines rsl
    WHERE rsl.asn_lpn_id         = p_lpn_id
      AND rsl.to_organization_id = p_organization_id
      AND rsl.item_id            = p_item_id
	GROUP BY rsl.item_id , rsl.to_organization_id, rsl.asn_lpn_id, rsl.unit_of_measure;

	CURSOR c_rti_cursor IS
   SELECT SUM(rti.primary_quantity) primary_quantity,
          SUM(rti.quantity) quantity,
		  rti.unit_of_measure
     FROM rcv_transactions_interface rti
	WHERE rti.lpn_id             = p_lpn_id
      AND rti.item_id            = p_item_id
      AND rti.to_organization_id = p_organization_id
      AND(rti.transaction_status_code = 'PENDING'
          AND rti.processing_status_code <> 'ERROR')
      AND rti.transaction_type  = 'RECEIVE'
	GROUP BY rti.lpn_id , rti.to_organization_id, rti.item_id , rti.unit_of_measure;

   BEGIN
    x_return_status := G_RET_STS_SUCCESS;
	x_qty_left := 'N';
     print_debug('CHECK_OVER_RECEIPT - p_lpn_id           '||p_lpn_id, 1);
	 print_debug('CHECK_OVER_RECEIPT - p_transaction_uom  '||p_transaction_uom, 1);
	 print_debug('CHECK_OVER_RECEIPT - p_qty_entered      '||p_qty_entered, 1);
	 print_debug('CHECK_OVER_RECEIPT - p_item_id          '||p_item_id, 1);
	 print_debug('CHECK_OVER_RECEIPT - p_organization_id  '||p_organization_id, 1);

    l_progress :=10;

  IF p_lpn_id IS NOT NULL
  THEN

    SELECT primary_uom_code
      INTO l_pr_UoM_code
      FROM mtl_system_items
     WHERE inventory_item_id =  p_item_id
       AND organization_id = p_organization_id ;

    l_progress :=20;

	l_comp_pr := FALSE;

	FOR l_rsl_rec IN c_rsl_cursor
    LOOP
	 l_rsl_UoM    := get_uom_code(l_rsl_rec.unit_of_measure);

     print_debug('CHECK_OVER_RECEIPT - UoM of the shipment  '||l_rsl_UoM, 1);

	 IF (l_rsl_UoM = p_transaction_uom AND NOT (l_comp_pr))
	 THEN
	  l_shipped_quantity_tr_uom := l_shipped_quantity_tr_uom + l_rsl_rec.quantity_shipped;
	  l_recd_quantity_tr_uom    := l_recd_quantity_tr_uom    + l_rsl_rec.quantity_received;
     ELSE/*IF (l_rsl_UoM <> l_pr_UoM_code)*/
	 --THEN
      l_comp_pr := TRUE;
	  l_shipped_quantity_tr_uom := 0;
	  l_recd_quantity_tr_uom    := 0;
	 END IF;

	  l_shipped_pr_quantity := l_shipped_pr_quantity + inv_convert.inv_um_convert (p_item_id
                                                                                  ,null
                                                                                  ,l_rsl_rec.quantity_shipped
                                                                                  ,l_rsl_UoM
                                                                                  ,l_pr_UoM_code
                                                                                  ,null
                                                                                  ,null );

	  l_recd_pr_quantity := l_recd_pr_quantity + inv_convert.inv_um_convert (p_item_id
                                                                            ,null
                                                                            ,l_rsl_rec.quantity_received
                                                                            ,l_rsl_UoM
                                                                            ,l_pr_UoM_code
                                                                            ,null
                                                                            ,null );
    END LOOP;
    l_progress :=30;

    print_debug('CHECK_OVER_RECEIPT - Finally Shipped Qty After converting to primary '||l_shipped_pr_quantity, 1);
    print_debug('CHECK_OVER_RECEIPT - Finally Recd Qty After converting to primary '||l_recd_pr_quantity, 1);
    print_debug('CHECK_OVER_RECEIPT - Finally Shipped Qty After converting to transaction '||l_shipped_quantity_tr_uom, 1);
    print_debug('CHECK_OVER_RECEIPT - Finally Recd Qty After converting to transaction '||l_recd_quantity_tr_uom, 1);


	FOR l_rti_rec IN c_rti_cursor
	LOOP
	 l_rti_UoM    := get_uom_code(l_rti_rec.unit_of_measure);
	 IF (l_rti_UoM = p_transaction_uom AND NOT (l_comp_pr))
	 THEN
	  l_rti_quantity_tr_uom := l_rti_quantity_tr_uom + l_rti_rec.quantity;
     ELSE
	 --THEN
      l_rti_quantity_tr_uom :=0;
      l_comp_pr := TRUE;
	  l_rti_pr_qty := l_rti_pr_qty + l_rti_rec.primary_quantity;
	 END IF;

	END LOOP;
    l_progress :=50;

    IF (p_transaction_uom <> l_pr_UoM_code) THEN
     l_qty_entered_pr_uom :=    inv_convert.inv_um_convert (p_item_id
                                                           ,null
                                                           ,p_qty_entered
                                                           ,p_transaction_uom
                                                           ,l_pr_UoM_code
                                                           ,null
                                                           ,null );
    ELSE
     l_qty_entered_pr_uom := p_qty_entered;
	END IF;

    print_debug('CHECK_OVER_RECEIPT - Primary UoM', 1);
    print_debug('CHECK_OVER_RECEIPT - ------------------------------------', 1);
    print_debug('CHECK_OVER_RECEIPT - Qty Entered in Primary UoM          '||l_qty_entered_pr_uom, 1);
    print_debug('CHECK_OVER_RECEIPT - Already received qty in Primary UoM '||l_recd_pr_quantity, 1);
    print_debug('CHECK_OVER_RECEIPT - Existing RTI qty in Primary UoM     '||l_rti_pr_qty, 1);
    print_debug('CHECK_OVER_RECEIPT - Total Shipped qty in Primary UoM    '||l_shipped_pr_quantity, 1);
    print_debug('CHECK_OVER_RECEIPT - *************************************', 1);
    print_debug('CHECK_OVER_RECEIPT - Transaction UoM', 1);
    print_debug('CHECK_OVER_RECEIPT - ----------------------------------------', 1);
    print_debug('CHECK_OVER_RECEIPT - Qty Entered in Transaction UoM          '||p_qty_entered, 1);
    print_debug('CHECK_OVER_RECEIPT - Already received qty in Transaction UoM '||l_recd_quantity_tr_uom, 1);
    print_debug('CHECK_OVER_RECEIPT - Existing RTI qty in Transaction UoM     '||l_rti_quantity_tr_uom, 1);
    print_debug('CHECK_OVER_RECEIPT - Total Shipped qty in Transaction UoM    '||l_shipped_quantity_tr_uom, 1);

   IF (l_comp_pr)
   THEN
    print_debug('CHECK_OVER_RECEIPT - l_comp_pr IS TRUE Compating quantities in Primary UoM ', 1);
    IF ( Round((l_qty_entered_pr_uom + l_recd_pr_quantity + l_rti_pr_qty) - l_shipped_pr_quantity ,5) > 0.00005)
    THEN
     x_return_status := G_RET_STS_ERROR;
	 IF ((l_shipped_pr_quantity - l_recd_pr_quantity - l_rti_pr_qty)> 0.00005)
	  THEN
	  x_qty_left := 'Y';
	 END IF;
     fnd_message.set_name('WMS', 'WMS_SHIPMENT_OVER_RECEIPT');
     fnd_msg_pub.ADD;
	 print_debug('CHECK_OVER_RECEIPT - The shipment is being over received. Set Warning '||l_progress, 1);
    END IF;

   ELSE
   print_debug('CHECK_OVER_RECEIPT - Comparing the quantities in Transaction UoM ', 1);
   IF ( Round((p_qty_entered + l_recd_quantity_tr_uom + l_rti_quantity_tr_uom) - l_shipped_quantity_tr_uom ,5) > 0.00005)
   THEN
     x_return_status := G_RET_STS_ERROR;
	 IF ((l_shipped_quantity_tr_uom - l_recd_quantity_tr_uom - l_rti_quantity_tr_uom) > 0.00005)
	  THEN
	  x_qty_left := 'Y';
	 END IF;
     fnd_message.set_name('WMS', 'WMS_SHIPMENT_OVER_RECEIPT');
     fnd_msg_pub.ADD;
	 print_debug('CHECK_OVER_RECEIPT - The shipment is being over received. Set Warning '||l_progress, 1);
   END IF;
   END IF;

  END IF; --lpn_id NULL
   EXCEPTION
   WHEN OTHERS THEN
     print_debug('CHECK_OVER_RECEIPT - Others Exception SQLCODE '||SQLCODE||' SQLERRM '||SQLERRM, 1);
	 print_debug('CHECK_OVER_RECEIPT - l_progress '||l_progress, 1);
     x_return_status := G_RET_STS_UNEXP_ERROR;

   END check_over_receipt;

--14615225

END inv_rcv_integration_pvt;

/
