--------------------------------------------------------
--  DDL for Package Body CS_INCIDENT_STATUSES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CS_INCIDENT_STATUSES_PKG" as
/* $Header: csviistb.pls 120.3.12010000.3 2009/07/27 05:22:40 sshilpam ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_INCIDENT_STATUS_ID in NUMBER,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_CONTEXT in VARCHAR2,
  X_DISALLOW_REQUEST_UPDATE in VARCHAR2,
--  X_DISALLOW_NEW_ACTION in VARCHAR2,
  X_DISALLOW_ACTION_UPDATE in VARCHAR2,
  X_DISALLOW_NEW_CHARGE in VARCHAR2,
  X_DISALLOW_AGENT_DISPATCH in VARCHAR2,
 -- X_DISALLOW_RMA in VARCHAR2,
  X_DISALLOW_CHARGE_UPDATE in VARCHAR2,
  X_DISALLOW_PRODUCT_UPDATE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INCIDENT_SUBTYPE in VARCHAR2,
  X_SEEDED_FLAG in VARCHAR2,
  X_STATUS_CODE in VARCHAR2,
  X_RESPONDED_FLAG in VARCHAR2,
  X_RESOLVED_FLAG in VARCHAR2,
  X_ON_HOLD_FLAG in VARCHAR2,
  X_STATUS_CLASS_CODE in  VARCHAR2,
  X_CLOSE_FLAG in VARCHAR2,
  X_VALID_IN_CREATE_FLAG in VARCHAR2,
  X_DISPLAY_COLOR in VARCHAR2,
  X_RGB_COLOR in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_SORT_ORDER in NUMBER,
  p_PENDING_APPROVAL_FLAG       IN VARCHAR2,
  p_INTERMEDIATE_STATUS_ID      IN NUMBER,
  p_REJECTION_ACTION_STATUS_ID  IN NUMBER,
  p_APPROVAL_ACTION_STATUS_ID   IN NUMBER,
  X_DUP_CHK_FLAG in VARCHAR2
) is
  cursor C is select ROWID from CS_INCIDENT_STATUSES_B
    where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID
    ;
begin
  insert into CS_INCIDENT_STATUSES_B (
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    CONTEXT,
    DISALLOW_REQUEST_UPDATE,
  --  DISALLOW_NEW_ACTION,
    DISALLOW_ACTION_UPDATE,
    DISALLOW_NEW_CHARGE,
    DISALLOW_AGENT_DISPATCH,
   -- DISALLOW_RMA,
    DISALLOW_CHARGE_UPDATE,
    DISALLOW_PRODUCT_UPDATE,
    OBJECT_VERSION_NUMBER,
    INCIDENT_STATUS_ID,
    INCIDENT_SUBTYPE,
    SEEDED_FLAG,
    STATUS_CODE,
    RESPONDED_FLAG,
    RESOLVED_FLAG,
    ON_HOLD_FLAG,
    STATUS_CLASS_CODE,
    CLOSE_FLAG,
	VALID_IN_CREATE_FLAG,
    DISPLAY_COLOR,
    RGB_COLOR,
    START_DATE_ACTIVE,
    END_DATE_ACTIVE,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    SORT_ORDER,
    PENDING_APPROVAL_FLAG       ,
    INTERMEDIATE_STATUS_ID      ,
    REJECTION_ACTION_STATUS_ID  ,
    APPROVAL_ACTION_STATUS_ID  ,
    DUP_CHK_FLAG
  ) values (
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_CONTEXT,
    X_DISALLOW_REQUEST_UPDATE,
   -- X_DISALLOW_NEW_ACTION,
    X_DISALLOW_ACTION_UPDATE,
    X_DISALLOW_NEW_CHARGE,
    X_DISALLOW_AGENT_DISPATCH,
   -- X_DISALLOW_RMA,
    X_DISALLOW_CHARGE_UPDATE,
    X_DISALLOW_PRODUCT_UPDATE,
    X_OBJECT_VERSION_NUMBER,
    X_INCIDENT_STATUS_ID,
    X_INCIDENT_SUBTYPE,
    X_SEEDED_FLAG,
    X_STATUS_CODE,
    X_RESPONDED_FLAG,
    X_RESOLVED_FLAG,
    X_ON_HOLD_FLAG,
    X_STATUS_CLASS_CODE,
    X_CLOSE_FLAG,
    X_VALID_IN_CREATE_FLAG,
    X_DISPLAY_COLOR,
    X_RGB_COLOR,
    X_START_DATE_ACTIVE,
    X_END_DATE_ACTIVE,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_SORT_ORDER,
    p_PENDING_APPROVAL_FLAG       ,
    p_INTERMEDIATE_STATUS_ID      ,
    p_REJECTION_ACTION_STATUS_ID  ,
    p_APPROVAL_ACTION_STATUS_ID,
    X_DUP_CHK_FLAG
  );

  insert into CS_INCIDENT_STATUSES_TL (
    INCIDENT_STATUS_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_INCIDENT_STATUS_ID,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_NAME,
    X_DESCRIPTION,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from CS_INCIDENT_STATUSES_TL T
    where T.INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_INCIDENT_STATUS_ID in NUMBER,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_CONTEXT in VARCHAR2,
  X_DISALLOW_REQUEST_UPDATE in VARCHAR2,
 -- X_DISALLOW_NEW_ACTION in VARCHAR2,
  X_DISALLOW_ACTION_UPDATE in VARCHAR2,
  X_DISALLOW_NEW_CHARGE in VARCHAR2,
  X_DISALLOW_AGENT_DISPATCH in VARCHAR2,
  --X_DISALLOW_RMA in VARCHAR2,
  X_DISALLOW_CHARGE_UPDATE in VARCHAR2,
  X_DISALLOW_PRODUCT_UPDATE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INCIDENT_SUBTYPE in VARCHAR2,
  X_SEEDED_FLAG in VARCHAR2,
  X_STATUS_CODE in VARCHAR2,
  X_RESPONDED_FLAG in VARCHAR2,
  X_RESOLVED_FLAG in VARCHAR2,
  X_ON_HOLD_FLAG in VARCHAR2,
  X_STATUS_CLASS_CODE in VARCHAR2,
  X_CLOSE_FLAG in VARCHAR2,
  X_VALID_IN_CREATE_FLAG in VARCHAR2,
  X_DISPLAY_COLOR in VARCHAR2,
  X_RGB_COLOR in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SORT_ORDER in NUMBER,
  p_PENDING_APPROVAL_FLAG       IN VARCHAR2,
  p_INTERMEDIATE_STATUS_ID      IN NUMBER,
  p_REJECTION_ACTION_STATUS_ID  IN NUMBER,
  p_APPROVAL_ACTION_STATUS_ID   IN NUMBER,
  X_DUP_CHK_FLAG  IN VARCHAR2 --shachoud
) is
  cursor c is select
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      CONTEXT,
      DISALLOW_REQUEST_UPDATE,
   --   DISALLOW_NEW_ACTION,
      DISALLOW_ACTION_UPDATE,
      DISALLOW_NEW_CHARGE,
      DISALLOW_AGENT_DISPATCH,
   -- DISALLOW_RMA,
      DISALLOW_CHARGE_UPDATE,
      DISALLOW_PRODUCT_UPDATE,
      OBJECT_VERSION_NUMBER,
      INCIDENT_SUBTYPE,
      SEEDED_FLAG,
      STATUS_CODE,
      RESPONDED_FLAG,
      RESOLVED_FLAG,
      ON_HOLD_FLAG,
      STATUS_CLASS_CODE,
      CLOSE_FLAG,
      VALID_IN_CREATE_FLAG,
      DISPLAY_COLOR,
      RGB_COLOR,
      START_DATE_ACTIVE,
      END_DATE_ACTIVE,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      SORT_ORDER,
      PENDING_APPROVAL_FLAG       ,
      INTERMEDIATE_STATUS_ID      ,
      REJECTION_ACTION_STATUS_ID  ,
      APPROVAL_ACTION_STATUS_ID,
      DUP_CHK_FLAG --shachoud
    from CS_INCIDENT_STATUSES_B
    where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID
    for update of INCIDENT_STATUS_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      NAME,
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from CS_INCIDENT_STATUSES_TL
    where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of INCIDENT_STATUS_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
      AND ((recinfo.CONTEXT = X_CONTEXT)
           OR ((recinfo.CONTEXT is null) AND (X_CONTEXT is null)))
      AND ((recinfo.DISALLOW_REQUEST_UPDATE = X_DISALLOW_REQUEST_UPDATE)
           OR ((recinfo.DISALLOW_REQUEST_UPDATE is null)
                AND (X_DISALLOW_REQUEST_UPDATE is null)))
     -- AND ((recinfo.DISALLOW_NEW_ACTION = X_DISALLOW_NEW_ACTION)
     --      OR ((recinfo.DISALLOW_NEW_ACTION is null)
     --           AND (X_DISALLOW_NEW_ACTION is null)))
      AND ((recinfo.DISALLOW_ACTION_UPDATE = X_DISALLOW_ACTION_UPDATE)
           OR ((recinfo.DISALLOW_ACTION_UPDATE is null)
                AND (X_DISALLOW_ACTION_UPDATE is null)))
      AND ((recinfo.DISALLOW_NEW_CHARGE = X_DISALLOW_NEW_CHARGE)
           OR ((recinfo.DISALLOW_NEW_CHARGE is null)
                AND (X_DISALLOW_NEW_CHARGE is null)))
      AND ((recinfo.DISALLOW_AGENT_DISPATCH = X_DISALLOW_AGENT_DISPATCH)
           OR ((recinfo.DISALLOW_AGENT_DISPATCH is null)
                AND (X_DISALLOW_AGENT_DISPATCH is null)))
      --AND ((recinfo.DISALLOW_RMA = X_DISALLOW_RMA)
       --    OR ((recinfo.DISALLOW_RMA is null)
       --         AND (X_DISALLOW_RMA is null)))
      AND ((recinfo.DISALLOW_CHARGE_UPDATE = X_DISALLOW_CHARGE_UPDATE)
           OR ((recinfo.DISALLOW_CHARGE_UPDATE is null)
                AND (X_DISALLOW_CHARGE_UPDATE is null)))
      AND ((recinfo.DISALLOW_PRODUCT_UPDATE = X_DISALLOW_PRODUCT_UPDATE)
           OR ((recinfo.DISALLOW_PRODUCT_UPDATE is null)
                AND (X_DISALLOW_PRODUCT_UPDATE is null)))
      AND (recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
      AND (recinfo.INCIDENT_SUBTYPE = X_INCIDENT_SUBTYPE)
      AND ((recinfo.SEEDED_FLAG = X_SEEDED_FLAG)
           OR ((recinfo.SEEDED_FLAG is null) AND (X_SEEDED_FLAG is null)))
      AND ((recinfo.STATUS_CODE = X_STATUS_CODE)
           OR ((recinfo.STATUS_CODE is null) AND (X_STATUS_CODE is null)))
      AND ((recinfo.CLOSE_FLAG = X_CLOSE_FLAG)
           OR ((recinfo.CLOSE_FLAG is null) AND (X_CLOSE_FLAG is null)))
      AND ((recinfo.VALID_IN_CREATE_FLAG = X_VALID_IN_CREATE_FLAG)
           OR ((recinfo.VALID_IN_CREATE_FLAG is null)
                AND (X_VALID_IN_CREATE_FLAG is null)))
      AND ((recinfo.DISPLAY_COLOR = X_DISPLAY_COLOR)
           OR ((recinfo.DISPLAY_COLOR is null) AND (X_DISPLAY_COLOR is null)))
      AND ((recinfo.RGB_COLOR = X_RGB_COLOR)
           OR ((recinfo.RGB_COLOR is null) AND (X_RGB_COLOR is null)))
      AND ((recinfo.START_DATE_ACTIVE = X_START_DATE_ACTIVE)
           OR ((recinfo.START_DATE_ACTIVE is null)
                AND (X_START_DATE_ACTIVE is null)))
      AND ((recinfo.END_DATE_ACTIVE = X_END_DATE_ACTIVE)
           OR ((recinfo.END_DATE_ACTIVE is null)
                AND (X_END_DATE_ACTIVE is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.SORT_ORDER = X_SORT_ORDER)
           OR ((recinfo.SORT_ORDER is null) AND (X_SORT_ORDER is null)))
      AND ((recinfo.PENDING_APPROVAL_FLAG = p_PENDING_APPROVAL_FLAG)
           OR ((recinfo.PENDING_APPROVAL_FLAG is null)
                AND (p_PENDING_APPROVAL_FLAG is null)))

      AND ((recinfo.INTERMEDIATE_STATUS_ID = p_INTERMEDIATE_STATUS_ID)
           OR ((recinfo.INTERMEDIATE_STATUS_ID is null)
                AND (p_INTERMEDIATE_STATUS_ID is null)))

      AND ((recinfo.REJECTION_ACTION_STATUS_ID = p_REJECTION_ACTION_STATUS_ID)
           OR ((recinfo.REJECTION_ACTION_STATUS_ID is null)
                AND (p_REJECTION_ACTION_STATUS_ID is null)))

      AND ((recinfo.APPROVAL_ACTION_STATUS_ID = p_APPROVAL_ACTION_STATUS_ID)
           OR ((recinfo.APPROVAL_ACTION_STATUS_ID is null)
                AND (p_APPROVAL_ACTION_STATUS_ID is null)))

      AND ((recinfo.DUP_CHK_FLAG = X_DUP_CHK_FLAG)   -- shachoud
           OR ((recinfo.DUP_CHK_FLAG is null)
                AND ( X_DUP_CHK_FLAG is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.NAME = X_NAME)
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_INCIDENT_STATUS_ID in NUMBER,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_CONTEXT in VARCHAR2,
  X_DISALLOW_REQUEST_UPDATE in VARCHAR2,
 -- X_DISALLOW_NEW_ACTION in VARCHAR2,
  X_DISALLOW_ACTION_UPDATE in VARCHAR2,
  X_DISALLOW_NEW_CHARGE in VARCHAR2,
  X_DISALLOW_AGENT_DISPATCH in VARCHAR2,
 -- X_DISALLOW_RMA in VARCHAR2,
  X_DISALLOW_CHARGE_UPDATE in VARCHAR2,
  X_DISALLOW_PRODUCT_UPDATE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INCIDENT_SUBTYPE in VARCHAR2,
  X_SEEDED_FLAG in VARCHAR2,
  X_STATUS_CODE in VARCHAR2,
  X_RESPONDED_FLAG in VARCHAR2,
  X_RESOLVED_FLAG in VARCHAR2,
  X_ON_HOLD_FLAG in VARCHAR2,
  X_STATUS_CLASS_CODE in VARCHAR2,
  X_CLOSE_FLAG in VARCHAR2,
  X_VALID_IN_CREATE_FLAG in VARCHAR2,
  X_DISPLAY_COLOR in VARCHAR2,
  X_RGB_COLOR in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_SORT_ORDER IN NUMBER,
  p_PENDING_APPROVAL_FLAG       IN VARCHAR2,
  p_INTERMEDIATE_STATUS_ID      IN NUMBER,
  p_REJECTION_ACTION_STATUS_ID  IN NUMBER,
  p_APPROVAL_ACTION_STATUS_ID   IN NUMBER,
  X_DUP_CHK_FLAG  IN VARCHAR2 --shachoud
) is
begin
  update CS_INCIDENT_STATUSES_B set
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    CONTEXT = X_CONTEXT,
    DISALLOW_REQUEST_UPDATE = X_DISALLOW_REQUEST_UPDATE,
  --  DISALLOW_NEW_ACTION = X_DISALLOW_NEW_ACTION,
    DISALLOW_ACTION_UPDATE = X_DISALLOW_ACTION_UPDATE,
    DISALLOW_NEW_CHARGE = X_DISALLOW_NEW_CHARGE,
    DISALLOW_AGENT_DISPATCH = X_DISALLOW_AGENT_DISPATCH,
  -- DISALLOW_RMA = X_DISALLOW_RMA,
    DISALLOW_CHARGE_UPDATE = X_DISALLOW_CHARGE_UPDATE,
    DISALLOW_PRODUCT_UPDATE = X_DISALLOW_PRODUCT_UPDATE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    INCIDENT_SUBTYPE = X_INCIDENT_SUBTYPE,
    SEEDED_FLAG = X_SEEDED_FLAG,
    STATUS_CODE = X_STATUS_CODE,
    RESPONDED_FLAG=X_RESPONDED_FLAG,
    RESOLVED_FLAG=X_RESOLVED_FLAG,
    ON_HOLD_FLAG = X_ON_HOLD_FLAG,
    STATUS_CLASS_CODE = X_STATUS_CLASS_CODE,
    CLOSE_FLAG = X_CLOSE_FLAG,
	VALID_IN_CREATE_FLAG = X_VALID_IN_CREATE_FLAG,
    DISPLAY_COLOR = X_DISPLAY_COLOR,
    RGB_COLOR = X_RGB_COLOR,
    START_DATE_ACTIVE = X_START_DATE_ACTIVE,
    END_DATE_ACTIVE = X_END_DATE_ACTIVE,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SORT_ORDER = X_SORT_ORDER,
    PENDING_APPROVAL_FLAG       = p_PENDING_APPROVAL_FLAG,
    INTERMEDIATE_STATUS_ID      = p_INTERMEDIATE_STATUS_ID,
    REJECTION_ACTION_STATUS_ID  = p_REJECTION_ACTION_STATUS_ID,
    APPROVAL_ACTION_STATUS_ID   = p_APPROVAL_ACTION_STATUS_ID,
    DUP_CHK_FLAG        = X_DUP_CHK_FLAG --shachoud
  where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update CS_INCIDENT_STATUSES_TL set
    NAME = X_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure TRANSLATE_ROW (X_INCIDENT_STATUS_ID  in  number,
             X_NAME in varchar2,
             X_DESCRIPTION  in varchar2,
             X_LAST_UPDATE_DATE in date,
             X_OWNER in varchar2,
             X_LAST_UPDATE_LOGIN in number)
is
l_user_id  number;
begin

if (X_OWNER = 'SEED') then
  l_user_id := 1;
else
  l_user_id := 0;
end if;

update cs_incident_statuses_tl set
name = nvl(x_name,name),
description =  nvl(x_description,description),
last_update_date = nvl(x_last_update_date,sysdate),
last_updated_by = l_user_id,
last_update_login = 0,
source_lang = userenv('LANG')
where incident_status_id = x_incident_status_id
and userenv('LANG') in (LANGUAGE,SOURCE_LANG);

end TRANSLATE_ROW;

PROCEDURE LOAD_ROW(
  X_INCIDENT_STATUS_ID in NUMBER,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_CONTEXT in VARCHAR2,
  X_DISALLOW_REQUEST_UPDATE in VARCHAR2,
--  X_DISALLOW_NEW_ACTION in VARCHAR2,
  X_DISALLOW_ACTION_UPDATE in VARCHAR2,
  X_DISALLOW_NEW_CHARGE in VARCHAR2,
  X_DISALLOW_AGENT_DISPATCH in VARCHAR2,
 -- X_DISALLOW_RMA in VARCHAR2,
  X_DISALLOW_CHARGE_UPDATE in VARCHAR2,
  X_DISALLOW_PRODUCT_UPDATE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INCIDENT_SUBTYPE in VARCHAR2,
--  X_SEEDED_FLAG in VARCHAR2,
  X_STATUS_CODE in VARCHAR2,
  X_RESPONDED_FLAG in VARCHAR2,
  X_RESOLVED_FLAG in VARCHAR2,
  X_ON_HOLD_FLAG in VARCHAR2,
  X_STATUS_CLASS_CODE in VARCHAR2,
  X_CLOSE_FLAG in VARCHAR2,
  X_VALID_IN_CREATE_FLAG in VARCHAR2,
  X_DISPLAY_COLOR in VARCHAR2,
  X_RGB_COLOR in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OWNER in VARCHAR2,
  X_SORT_ORDER IN NUMBER,
  p_PENDING_APPROVAL_FLAG       IN VARCHAR2,
  p_INTERMEDIATE_STATUS_ID      IN NUMBER,
  p_REJECTION_ACTION_STATUS_ID  IN NUMBER,
  p_APPROVAL_ACTION_STATUS_ID   IN NUMBER ,
  X_DUP_CHK_FLAG  IN VARCHAR2 --shachoud
  )
is
l_row_id  rowid;
l_user_id number;
l_seeded_flag varchar2(1);

begin

if (X_OWNER = 'SEED') then
    l_user_id := 1;
    l_seeded_flag := 'Y';
else
    l_user_id := 0;
    l_seeded_flag := 'N';
end if;

cs_incident_statuses_pkg.update_row(
  X_INCIDENT_STATUS_ID => x_incident_status_id,
  X_ATTRIBUTE10 => null,
  X_ATTRIBUTE11 => null,
  X_ATTRIBUTE12 => null,
  X_ATTRIBUTE13 => null,
  X_ATTRIBUTE14 => null,
  X_ATTRIBUTE15 => null,
  X_CONTEXT => X_CONTEXT,
  X_DISALLOW_REQUEST_UPDATE => X_DISALLOW_REQUEST_UPDATE,
  X_DISALLOW_ACTION_UPDATE => X_DISALLOW_ACTION_UPDATE,
  X_DISALLOW_NEW_CHARGE => X_DISALLOW_NEW_CHARGE,
  X_DISALLOW_AGENT_DISPATCH => X_DISALLOW_AGENT_DISPATCH,
  X_DISALLOW_CHARGE_UPDATE => X_DISALLOW_CHARGE_UPDATE,
  X_DISALLOW_PRODUCT_UPDATE => X_DISALLOW_PRODUCT_UPDATE,
  X_OBJECT_VERSION_NUMBER => X_OBJECT_VERSION_NUMBER,
  X_INCIDENT_SUBTYPE => X_INCIDENT_SUBTYPE,
  X_SEEDED_FLAG => l_seeded_flag,
  X_STATUS_CODE => X_STATUS_CODE,
  X_RESPONDED_FLAG => X_RESPONDED_FLAG,
  X_RESOLVED_FLAG => X_RESOLVED_FLAG,
  X_ON_HOLD_FLAG => X_ON_HOLD_FLAG,
  X_STATUS_CLASS_CODE => X_STATUS_CLASS_CODE,
  X_CLOSE_FLAG => X_CLOSE_FLAG,
  X_VALID_IN_CREATE_FLAG => X_VALID_IN_CREATE_FLAG,
  X_DISPLAY_COLOR => X_DISPLAY_COLOR,
  X_RGB_COLOR => X_RGB_COLOR,
  X_START_DATE_ACTIVE => to_date(X_START_DATE_ACTIVE,'YYYY/MM/DD'),
  X_END_DATE_ACTIVE => to_date(X_END_DATE_ACTIVE,'YYYY/MM/DD'),
  X_ATTRIBUTE1 => null,
  X_ATTRIBUTE2 => null,
  X_ATTRIBUTE3 => null,
  X_ATTRIBUTE4 => null,
  X_ATTRIBUTE5 => null,
  X_ATTRIBUTE6 => null,
  X_ATTRIBUTE7 => null,
  X_ATTRIBUTE8 => null,
  X_ATTRIBUTE9 => null,
  X_NAME       => X_NAME,
  X_DESCRIPTION => X_DESCRIPTION,
  X_LAST_UPDATE_DATE => SYSDATE,
  X_LAST_UPDATED_BY => l_user_id,
  X_LAST_UPDATE_LOGIN => 0,
  X_SORT_ORDER => X_SORT_ORDER,
  p_PENDING_APPROVAL_FLAG      => p_PENDING_APPROVAL_FLAG,
  p_INTERMEDIATE_STATUS_ID     => p_INTERMEDIATE_STATUS_ID,
  p_REJECTION_ACTION_STATUS_ID => p_REJECTION_ACTION_STATUS_ID,
  p_APPROVAL_ACTION_STATUS_ID  => p_APPROVAL_ACTION_STATUS_ID,
  X_DUP_CHK_FLAG  => X_DUP_CHK_FLAG -- shachoud
  );

 exception when no_data_found then
   cs_incident_statuses_pkg.insert_row(
  X_ROWID => l_row_id,
  X_INCIDENT_STATUS_ID => x_incident_status_id ,
  X_ATTRIBUTE10 => null,
  X_ATTRIBUTE11 => null,
  X_ATTRIBUTE12 => null,
  X_ATTRIBUTE13 => null,
  X_ATTRIBUTE14 => null,
  X_ATTRIBUTE15 => null,
  X_CONTEXT => X_CONTEXT,
  X_DISALLOW_REQUEST_UPDATE => X_DISALLOW_REQUEST_UPDATE,
  X_DISALLOW_ACTION_UPDATE => X_DISALLOW_ACTION_UPDATE,
  X_DISALLOW_NEW_CHARGE => X_DISALLOW_NEW_CHARGE,
  X_DISALLOW_AGENT_DISPATCH => X_DISALLOW_AGENT_DISPATCH,
  X_DISALLOW_CHARGE_UPDATE => X_DISALLOW_CHARGE_UPDATE,
  X_DISALLOW_PRODUCT_UPDATE => X_DISALLOW_PRODUCT_UPDATE,
  X_OBJECT_VERSION_NUMBER => X_OBJECT_VERSION_NUMBER,
  X_INCIDENT_SUBTYPE => X_INCIDENT_SUBTYPE,
  X_SEEDED_FLAG => l_seeded_flag,
  X_STATUS_CODE => X_STATUS_CODE,
  X_RESPONDED_FLAG => X_RESPONDED_FLAG,
  X_RESOLVED_FLAG => X_RESOLVED_FLAG,
  X_ON_HOLD_FLAG => X_ON_HOLD_FLAG,
  X_STATUS_CLASS_CODE => X_STATUS_CLASS_CODE,
  X_CLOSE_FLAG => X_CLOSE_FLAG,
  X_VALID_IN_CREATE_FLAG => X_VALID_IN_CREATE_FLAG,
  X_DISPLAY_COLOR => X_DISPLAY_COLOR,
  X_RGB_COLOR => X_RGB_COLOR,
  X_START_DATE_ACTIVE => to_date(X_START_DATE_ACTIVE,'YYYY/MM/DD'),
  X_END_DATE_ACTIVE => to_date(X_END_DATE_ACTIVE,'YYYY/MM/DD'),
  X_ATTRIBUTE1 => null,
  X_ATTRIBUTE2 => null,
  X_ATTRIBUTE3 => null,
  X_ATTRIBUTE4 => null,
  X_ATTRIBUTE5 => null,
  X_ATTRIBUTE6 => null,
  X_ATTRIBUTE7 => null,
  X_ATTRIBUTE8 => null,
  X_ATTRIBUTE9 => null,
  X_NAME       => X_NAME,
  X_DESCRIPTION => X_DESCRIPTION,
  X_CREATION_DATE => SYSDATE,
  X_CREATED_BY    => l_user_id,
  X_LAST_UPDATE_DATE => SYSDATE,
  X_LAST_UPDATED_BY => l_user_id,
  X_LAST_UPDATE_LOGIN => 0,
  X_SORT_ORDER => X_SORT_ORDER,
  p_PENDING_APPROVAL_FLAG      => p_PENDING_APPROVAL_FLAG,
  p_INTERMEDIATE_STATUS_ID     => p_INTERMEDIATE_STATUS_ID,
  p_REJECTION_ACTION_STATUS_ID => p_REJECTION_ACTION_STATUS_ID,
  p_APPROVAL_ACTION_STATUS_ID  => p_APPROVAL_ACTION_STATUS_ID,
  X_DUP_CHK_FLAG  => X_DUP_CHK_FLAG -- shachoud

  );
end LOAD_ROW;

procedure DELETE_ROW (
  X_INCIDENT_STATUS_ID in NUMBER
) is
begin
  delete from CS_INCIDENT_STATUSES_TL
  where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from CS_INCIDENT_STATUSES_B
  where INCIDENT_STATUS_ID = X_INCIDENT_STATUS_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from CS_INCIDENT_STATUSES_TL T
  where not exists
    (select NULL
    from CS_INCIDENT_STATUSES_B B
    where B.INCIDENT_STATUS_ID = T.INCIDENT_STATUS_ID
    );

  update CS_INCIDENT_STATUSES_TL T set (
      NAME,
      DESCRIPTION
    ) = (select
      B.NAME,
      B.DESCRIPTION
    from CS_INCIDENT_STATUSES_TL B
    where B.INCIDENT_STATUS_ID = T.INCIDENT_STATUS_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.INCIDENT_STATUS_ID,
      T.LANGUAGE
  ) in (select
      SUBT.INCIDENT_STATUS_ID,
      SUBT.LANGUAGE
    from CS_INCIDENT_STATUSES_TL SUBB, CS_INCIDENT_STATUSES_TL SUBT
    where SUBB.INCIDENT_STATUS_ID = SUBT.INCIDENT_STATUS_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.NAME <> SUBT.NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into CS_INCIDENT_STATUSES_TL (
    INCIDENT_STATUS_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.INCIDENT_STATUS_ID,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.NAME,
    B.DESCRIPTION,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from CS_INCIDENT_STATUSES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from CS_INCIDENT_STATUSES_TL T
    where T.INCIDENT_STATUS_ID = B.INCIDENT_STATUS_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end CS_INCIDENT_STATUSES_PKG;

/
