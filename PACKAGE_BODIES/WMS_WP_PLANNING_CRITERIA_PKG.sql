--------------------------------------------------------
--  DDL for Package Body WMS_WP_PLANNING_CRITERIA_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WMS_WP_PLANNING_CRITERIA_PKG" as
/* $Header: WMSWPTPB.pls 120.2.12010000.2 2009/08/03 08:37:19 ssrikaku noship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_PLANNING_CRITERIA_ID in NUMBER,
  X_LABOR_SETUP_MODE in VARCHAR2,
  X_PLANNING_METHOD in VARCHAR2,
  X_TYPE in VARCHAR2,
  X_BACKORDER_FLAG in VARCHAR2,
  X_REJECT_ORDER_LINE_FLAG in VARCHAR2,
  X_REJECT_ALL_LINES_SHIPSET_FLA in VARCHAR2,
  X_REJECT_ALL_LINES_MODEL_FLAG in VARCHAR2,
  X_REJECT_ORDER_FLAG in VARCHAR2,
  X_RESERVE_STOCK_FLAG in VARCHAR2,
  X_AUTO_CREATE_DELIVERIES_FLAG in VARCHAR2,
  X_CREDIT_CHECK_HOLD_FLAG in VARCHAR2,
  X_PICKING_SUBINVENTORY in VARCHAR2,
  X_DESTINATION_SUBINVENTORY in VARCHAR2,
  X_BULK_LABOR_PLANNING_FLAG in VARCHAR2,
  X_TIME_UOM in VARCHAR2,
  X_DEPARTMENT_CODE in VARCHAR2,
  X_DEPARTMENT_ID in NUMBER,
  X_ENABLE_LABOR_PLANNING in VARCHAR2,
  X_CROSSDOCK_CRITERIA in VARCHAR2,
  X_CROSSDOCK_CRITERIA_ID in NUMBER,
  X_ALLOCATION_METHOD in VARCHAR2,
  X_PLANNING_CRITERIA in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from WMS_WP_PLANNING_CRITERIA_B
    where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID
    ;

l_curvar C%rowtype;

begin
  insert into WMS_WP_PLANNING_CRITERIA_B (
    LABOR_SETUP_MODE,
    PLANNING_CRITERIA_ID,
    PLANNING_METHOD,
    TYPE,
    BACKORDER_FLAG,
    REJECT_ORDER_LINE_FLAG,
    REJECT_ALL_LINES_SHIPSET_FLAG,
    REJECT_ALL_LINES_MODEL_FLAG,
    REJECT_ORDER_FLAG,
    RESERVE_STOCK_FLAG,
    AUTO_CREATE_DELIVERIES_FLAG,
    CREDIT_CHECK_HOLD_FLAG,
    PICKING_SUBINVENTORY,
    DESTINATION_SUBINVENTORY,
    BULK_LABOR_PLANNING_FLAG,
    TIME_UOM,
    DEPARTMENT_CODE,
    DEPARTMENT_ID,
    ENABLE_LABOR_PLANNING,
    CROSSDOCK_CRITERIA,
    CROSSDOCK_CRITERIA_ID,
    ALLOCATION_METHOD,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_LABOR_SETUP_MODE,
    X_PLANNING_CRITERIA_ID,
    X_PLANNING_METHOD,
    X_TYPE,
    X_BACKORDER_FLAG,
    X_REJECT_ORDER_LINE_FLAG,
    X_REJECT_ALL_LINES_SHIPSET_FLA,
    X_REJECT_ALL_LINES_MODEL_FLAG,
    X_REJECT_ORDER_FLAG,
    X_RESERVE_STOCK_FLAG,
    X_AUTO_CREATE_DELIVERIES_FLAG,
    X_CREDIT_CHECK_HOLD_FLAG,
    X_PICKING_SUBINVENTORY,
    X_DESTINATION_SUBINVENTORY,
    X_BULK_LABOR_PLANNING_FLAG,
    X_TIME_UOM,
    X_DEPARTMENT_CODE,
    X_DEPARTMENT_ID,
    X_ENABLE_LABOR_PLANNING,
    X_CROSSDOCK_CRITERIA,
    X_CROSSDOCK_CRITERIA_ID,
    X_ALLOCATION_METHOD,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into WMS_WP_PLANNING_CRITERIA_TL (
    PLANNING_CRITERIA_ID,
    PLANNING_CRITERIA,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_PLANNING_CRITERIA_ID,
    X_PLANNING_CRITERIA,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from WMS_WP_PLANNING_CRITERIA_TL T
    where T.PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

 open c;
  fetch c into l_curvar;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_PLANNING_CRITERIA_ID in NUMBER,
  X_LABOR_SETUP_MODE in VARCHAR2,
  X_PLANNING_METHOD in VARCHAR2,
  X_TYPE in VARCHAR2,
  X_BACKORDER_FLAG in VARCHAR2,
  X_REJECT_ORDER_LINE_FLAG in VARCHAR2,
  X_REJECT_ALL_LINES_SHIPSET_FLA in VARCHAR2,
  X_REJECT_ALL_LINES_MODEL_FLAG in VARCHAR2,
  X_REJECT_ORDER_FLAG in VARCHAR2,
  X_RESERVE_STOCK_FLAG in VARCHAR2,
  X_AUTO_CREATE_DELIVERIES_FLAG in VARCHAR2,
  X_CREDIT_CHECK_HOLD_FLAG in VARCHAR2,
  X_PICKING_SUBINVENTORY in VARCHAR2,
  X_DESTINATION_SUBINVENTORY in VARCHAR2,
  X_BULK_LABOR_PLANNING_FLAG in VARCHAR2,
  X_TIME_UOM in VARCHAR2,
  X_DEPARTMENT_CODE in VARCHAR2,
  X_DEPARTMENT_ID in NUMBER,
  X_ENABLE_LABOR_PLANNING in VARCHAR2,
  X_CROSSDOCK_CRITERIA in VARCHAR2,
  X_CROSSDOCK_CRITERIA_ID in NUMBER,
  X_ALLOCATION_METHOD in VARCHAR2,
  X_PLANNING_CRITERIA in VARCHAR2
) is
  cursor c is select
      LABOR_SETUP_MODE,
      PLANNING_METHOD,
      TYPE,
      BACKORDER_FLAG,
      REJECT_ORDER_LINE_FLAG,
      REJECT_ALL_LINES_SHIPSET_FLAG,
      REJECT_ALL_LINES_MODEL_FLAG,
      REJECT_ORDER_FLAG,
      RESERVE_STOCK_FLAG,
      AUTO_CREATE_DELIVERIES_FLAG,
      CREDIT_CHECK_HOLD_FLAG,
      PICKING_SUBINVENTORY,
      DESTINATION_SUBINVENTORY,
      BULK_LABOR_PLANNING_FLAG,
      TIME_UOM,
      DEPARTMENT_CODE,
      DEPARTMENT_ID,
      ENABLE_LABOR_PLANNING,
      CROSSDOCK_CRITERIA,
      CROSSDOCK_CRITERIA_ID,
      ALLOCATION_METHOD
    from WMS_WP_PLANNING_CRITERIA_B
    where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID
    for update of PLANNING_CRITERIA_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      PLANNING_CRITERIA,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from WMS_WP_PLANNING_CRITERIA_TL
    where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of PLANNING_CRITERIA_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.LABOR_SETUP_MODE = X_LABOR_SETUP_MODE)
           OR ((recinfo.LABOR_SETUP_MODE is null) AND (X_LABOR_SETUP_MODE is null)))
      AND ((recinfo.PLANNING_METHOD = X_PLANNING_METHOD)
           OR ((recinfo.PLANNING_METHOD is null) AND (X_PLANNING_METHOD is null)))
      AND ((recinfo.TYPE = X_TYPE)
           OR ((recinfo.TYPE is null) AND (X_TYPE is null)))
      AND ((recinfo.BACKORDER_FLAG = X_BACKORDER_FLAG)
           OR ((recinfo.BACKORDER_FLAG is null) AND (X_BACKORDER_FLAG is null)))
      AND ((recinfo.REJECT_ORDER_LINE_FLAG = X_REJECT_ORDER_LINE_FLAG)
           OR ((recinfo.REJECT_ORDER_LINE_FLAG is null) AND (X_REJECT_ORDER_LINE_FLAG is null)))
      AND ((recinfo.REJECT_ALL_LINES_SHIPSET_FLAG = X_REJECT_ALL_LINES_SHIPSET_FLA)
           OR ((recinfo.REJECT_ALL_LINES_SHIPSET_FLAG is null) AND (X_REJECT_ALL_LINES_SHIPSET_FLA is null)))
      AND ((recinfo.REJECT_ALL_LINES_MODEL_FLAG = X_REJECT_ALL_LINES_MODEL_FLAG)
           OR ((recinfo.REJECT_ALL_LINES_MODEL_FLAG is null) AND (X_REJECT_ALL_LINES_MODEL_FLAG is null)))
      AND ((recinfo.REJECT_ORDER_FLAG = X_REJECT_ORDER_FLAG)
           OR ((recinfo.REJECT_ORDER_FLAG is null) AND (X_REJECT_ORDER_FLAG is null)))
      AND ((recinfo.RESERVE_STOCK_FLAG = X_RESERVE_STOCK_FLAG)
           OR ((recinfo.RESERVE_STOCK_FLAG is null) AND (X_RESERVE_STOCK_FLAG is null)))
      AND ((recinfo.AUTO_CREATE_DELIVERIES_FLAG = X_AUTO_CREATE_DELIVERIES_FLAG)
           OR ((recinfo.AUTO_CREATE_DELIVERIES_FLAG is null) AND (X_AUTO_CREATE_DELIVERIES_FLAG is null)))
      AND ((recinfo.CREDIT_CHECK_HOLD_FLAG = X_CREDIT_CHECK_HOLD_FLAG)
           OR ((recinfo.CREDIT_CHECK_HOLD_FLAG is null) AND (X_CREDIT_CHECK_HOLD_FLAG is null)))
      AND ((recinfo.PICKING_SUBINVENTORY = X_PICKING_SUBINVENTORY)
           OR ((recinfo.PICKING_SUBINVENTORY is null) AND (X_PICKING_SUBINVENTORY is null)))
      AND ((recinfo.DESTINATION_SUBINVENTORY = X_DESTINATION_SUBINVENTORY)
           OR ((recinfo.DESTINATION_SUBINVENTORY is null) AND (X_DESTINATION_SUBINVENTORY is null)))
      AND ((recinfo.BULK_LABOR_PLANNING_FLAG = X_BULK_LABOR_PLANNING_FLAG)
           OR ((recinfo.BULK_LABOR_PLANNING_FLAG is null) AND (X_BULK_LABOR_PLANNING_FLAG is null)))
      AND ((recinfo.TIME_UOM = X_TIME_UOM)
           OR ((recinfo.TIME_UOM is null) AND (X_TIME_UOM is null)))
      AND ((recinfo.DEPARTMENT_CODE = X_DEPARTMENT_CODE)
           OR ((recinfo.DEPARTMENT_CODE is null) AND (X_DEPARTMENT_CODE is null)))
      AND ((recinfo.DEPARTMENT_ID = X_DEPARTMENT_ID)
           OR ((recinfo.DEPARTMENT_ID is null) AND (X_DEPARTMENT_ID is null)))
      AND ((recinfo.ENABLE_LABOR_PLANNING = X_ENABLE_LABOR_PLANNING)
           OR ((recinfo.ENABLE_LABOR_PLANNING is null) AND (X_ENABLE_LABOR_PLANNING is null)))
      AND ((recinfo.CROSSDOCK_CRITERIA = X_CROSSDOCK_CRITERIA)
           OR ((recinfo.CROSSDOCK_CRITERIA is null) AND (X_CROSSDOCK_CRITERIA is null)))
      AND ((recinfo.CROSSDOCK_CRITERIA_ID = X_CROSSDOCK_CRITERIA_ID)
           OR ((recinfo.CROSSDOCK_CRITERIA_ID is null) AND (X_CROSSDOCK_CRITERIA_ID is null)))
      AND ((recinfo.ALLOCATION_METHOD = X_ALLOCATION_METHOD)
           OR ((recinfo.ALLOCATION_METHOD is null) AND (X_ALLOCATION_METHOD is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.PLANNING_CRITERIA = X_PLANNING_CRITERIA)
               OR ((tlinfo.PLANNING_CRITERIA is null) AND (X_PLANNING_CRITERIA is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_PLANNING_CRITERIA_ID in NUMBER,
  X_LABOR_SETUP_MODE in VARCHAR2,
  X_PLANNING_METHOD in VARCHAR2,
  X_TYPE in VARCHAR2,
  X_BACKORDER_FLAG in VARCHAR2,
  X_REJECT_ORDER_LINE_FLAG in VARCHAR2,
  X_REJECT_ALL_LINES_SHIPSET_FLA in VARCHAR2,
  X_REJECT_ALL_LINES_MODEL_FLAG in VARCHAR2,
  X_REJECT_ORDER_FLAG in VARCHAR2,
  X_RESERVE_STOCK_FLAG in VARCHAR2,
  X_AUTO_CREATE_DELIVERIES_FLAG in VARCHAR2,
  X_CREDIT_CHECK_HOLD_FLAG in VARCHAR2,
  X_PICKING_SUBINVENTORY in VARCHAR2,
  X_DESTINATION_SUBINVENTORY in VARCHAR2,
  X_BULK_LABOR_PLANNING_FLAG in VARCHAR2,
  X_TIME_UOM in VARCHAR2,
  X_DEPARTMENT_CODE in VARCHAR2,
  X_DEPARTMENT_ID in NUMBER,
  X_ENABLE_LABOR_PLANNING in VARCHAR2,
  X_CROSSDOCK_CRITERIA in VARCHAR2,
  X_CROSSDOCK_CRITERIA_ID in NUMBER,
  X_ALLOCATION_METHOD in VARCHAR2,
  X_PLANNING_CRITERIA in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update WMS_WP_PLANNING_CRITERIA_B set
    LABOR_SETUP_MODE = X_LABOR_SETUP_MODE,
    PLANNING_METHOD = X_PLANNING_METHOD,
    TYPE = X_TYPE,
    BACKORDER_FLAG = X_BACKORDER_FLAG,
    REJECT_ORDER_LINE_FLAG = X_REJECT_ORDER_LINE_FLAG,
    REJECT_ALL_LINES_SHIPSET_FLAG = X_REJECT_ALL_LINES_SHIPSET_FLA,
    REJECT_ALL_LINES_MODEL_FLAG = X_REJECT_ALL_LINES_MODEL_FLAG,
    REJECT_ORDER_FLAG = X_REJECT_ORDER_FLAG,
    RESERVE_STOCK_FLAG = X_RESERVE_STOCK_FLAG,
    AUTO_CREATE_DELIVERIES_FLAG = X_AUTO_CREATE_DELIVERIES_FLAG,
    CREDIT_CHECK_HOLD_FLAG = X_CREDIT_CHECK_HOLD_FLAG,
    PICKING_SUBINVENTORY = X_PICKING_SUBINVENTORY,
    DESTINATION_SUBINVENTORY = X_DESTINATION_SUBINVENTORY,
    BULK_LABOR_PLANNING_FLAG = X_BULK_LABOR_PLANNING_FLAG,
    TIME_UOM = X_TIME_UOM,
    DEPARTMENT_CODE = X_DEPARTMENT_CODE,
    DEPARTMENT_ID = X_DEPARTMENT_ID,
    ENABLE_LABOR_PLANNING = X_ENABLE_LABOR_PLANNING,
    CROSSDOCK_CRITERIA = X_CROSSDOCK_CRITERIA,
    CROSSDOCK_CRITERIA_ID = X_CROSSDOCK_CRITERIA_ID,
    ALLOCATION_METHOD = X_ALLOCATION_METHOD,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update WMS_WP_PLANNING_CRITERIA_TL set
    PLANNING_CRITERIA = X_PLANNING_CRITERIA,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_PLANNING_CRITERIA_ID in NUMBER
) is
begin
  delete from WMS_WP_PLANNING_CRITERIA_TL
  where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from WMS_WP_PLANNING_CRITERIA_B
  where PLANNING_CRITERIA_ID = X_PLANNING_CRITERIA_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from WMS_WP_PLANNING_CRITERIA_TL T
  where not exists
    (select NULL
    from WMS_WP_PLANNING_CRITERIA_B B
    where B.PLANNING_CRITERIA_ID = T.PLANNING_CRITERIA_ID
    );

  update WMS_WP_PLANNING_CRITERIA_TL T set (
      PLANNING_CRITERIA
    ) = (select
      B.PLANNING_CRITERIA
    from WMS_WP_PLANNING_CRITERIA_TL B
    where B.PLANNING_CRITERIA_ID = T.PLANNING_CRITERIA_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.PLANNING_CRITERIA_ID,
      T.LANGUAGE
  ) in (select
      SUBT.PLANNING_CRITERIA_ID,
      SUBT.LANGUAGE
    from WMS_WP_PLANNING_CRITERIA_TL SUBB, WMS_WP_PLANNING_CRITERIA_TL SUBT
    where SUBB.PLANNING_CRITERIA_ID = SUBT.PLANNING_CRITERIA_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.PLANNING_CRITERIA <> SUBT.PLANNING_CRITERIA
      or (SUBB.PLANNING_CRITERIA is null and SUBT.PLANNING_CRITERIA is not null)
      or (SUBB.PLANNING_CRITERIA is not null and SUBT.PLANNING_CRITERIA is null)
  ));

  insert into WMS_WP_PLANNING_CRITERIA_TL (
    PLANNING_CRITERIA_ID,
    PLANNING_CRITERIA,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.PLANNING_CRITERIA_ID,
    B.PLANNING_CRITERIA,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from WMS_WP_PLANNING_CRITERIA_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from WMS_WP_PLANNING_CRITERIA_TL T
    where T.PLANNING_CRITERIA_ID = B.PLANNING_CRITERIA_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end WMS_WP_PLANNING_CRITERIA_PKG;

/
