--------------------------------------------------------
--  DDL for Package Body CE_CEXINERR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CE_CEXINERR_XMLP_PKG" AS
/* $Header: CEXINERRB.pls 120.0 2007/12/28 07:55:00 abraghun noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      INIT_SECURITY;
      BEGIN
        SELECT
          L.MEANING
        INTO C_ALL_TRANSLATION
        FROM
          GL_SETS_OF_BOOKS SOB,
          CE_SYSTEM_PARAMETERS SP,
          CE_LOOKUPS L
        WHERE SOB.SET_OF_BOOKS_ID = SP.SET_OF_BOOKS_ID
          AND L.LOOKUP_TYPE = 'LITERAL'
          AND L.LOOKUP_CODE = 'ALL'
          AND ROWNUM = 1;
      EXCEPTION
        WHEN OTHERS THEN
          SET_NAME('CE'
                  ,'CE_PURGE_NO_SOB');
          L_MESSAGE := GET;
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
      END;
      IF (P_BANK_BRANCH_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            ABB.BANK_NAME,
            ABB.BANK_BRANCH_NAME
          INTO C_BANK_NAME_DSP,C_BANK_BRANCH_NAME_DSP
          FROM
            CE_BANK_BRANCHES_V ABB
          WHERE ABB.BRANCH_PARTY_ID = P_BANK_BRANCH_ID;
        EXCEPTION
          WHEN OTHERS THEN
            SET_NAME('CE'
                    ,'CE_INVALID_BANK_BRANCH');
            L_MESSAGE := GET;
            RAISE_APPLICATION_ERROR(-20101
                                   ,NULL);
        END;
        IF (P_BANK_ACCOUNT_ID IS NOT NULL) THEN
          BEGIN
            SELECT
              ABA.BANK_ACCOUNT_NUM,
              ABA.BANK_ACCOUNT_NAME,
              ABA.CURRENCY_CODE
            INTO C_BANK_ACCOUNT_NUM_DSP,C_BANK_ACCOUNT_NAME_DSP,C_BANK_CURRENCY_CODE_DSP
            FROM
              CE_BANK_ACCTS_GT_V ABA
            WHERE ABA.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID
              AND ABA.ACCOUNT_CLASSIFICATION = 'INTERNAL';
          EXCEPTION
            WHEN OTHERS THEN
              SET_NAME('CE'
                      ,'CE_INVALID_BANK_ACC');
              L_MESSAGE := GET;
              RAISE_APPLICATION_ERROR(-20101
                                     ,NULL);
          END;
        ELSE
          C_BANK_ACCOUNT_NUM_DSP := ' -';
          C_BANK_ACCOUNT_NAME_DSP := ' -';
          C_BANK_CURRENCY_CODE_DSP := ' -';
        END IF;
      ELSE
        C_BANK_NAME_DSP := C_ALL_TRANSLATION;
        C_BANK_BRANCH_NAME_DSP := C_ALL_TRANSLATION;
        C_BANK_CURRENCY_CODE_DSP := C_ALL_TRANSLATION;
      END IF;
      IF (P_DEBUG_MODE = 'Y') THEN
        NULL;
      END IF;
    END;
    lP_STAT_DATE_TO := to_char(P_STAT_DATE_TO,'DD-MON-YY');
    lP_STAT_DATE_FROM := to_char(P_STAT_DATE_FROM,'DD-MON-YY');
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION C_PRT_MESSAGE_NAMEFORMULA(MESSAGE_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      SET_ENCODED(MESSAGE_NAME);
      L_MESSAGE := GET;
      IF L_MESSAGE IS NULL THEN
        SET_NAME('CE'
                ,MESSAGE_NAME);
        L_MESSAGE := GET;
      END IF;
      RETURN (L_MESSAGE);
    END;
    RETURN NULL;
  END C_PRT_MESSAGE_NAMEFORMULA;
  FUNCTION G_INTERFACEGROUPFILTER(STATEMENT_DATE IN DATE) RETURN BOOLEAN IS
  BEGIN
    IF STATEMENT_DATE = '' THEN
      C_THE_END := 'N';
    ELSE
      C_THE_END := 'Y';
    END IF;
    RETURN (TRUE);
    RETURN (TRUE);
  END G_INTERFACEGROUPFILTER;
  FUNCTION C_DATEFORMATFORMULA RETURN VARCHAR2 IS
  C_DATEFORMAT varchar2(50);
  BEGIN
    select fnd_global.nls_date_format into C_DATEFORMAT from dual;
    IF C_DATEFORMAT = '' THEN
        C_DATEFORMAT := 'DD-MON-YYYY';
    END IF;
    RETURN (C_DATEFORMAT);
  END C_DATEFORMATFORMULA;
  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;
  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;
  FUNCTION C_THE_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_THE_END;
  END C_THE_END_P;
  FUNCTION C_DATE_LINE_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DATE_LINE_LEX;
  END C_DATE_LINE_LEX_P;
  FUNCTION C_DATE_HEAD_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DATE_HEAD_LEX;
  END C_DATE_HEAD_LEX_P;
  FUNCTION C_DATE_RECON_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DATE_RECON_LEX;
  END C_DATE_RECON_LEX_P;
  FUNCTION C_ALL_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_TRANSLATION;
  END C_ALL_TRANSLATION_P;
  FUNCTION C_BANK_ACCOUNT_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_NAME_DSP;
  END C_BANK_ACCOUNT_NAME_DSP_P;
  FUNCTION C_NUMBER_LINE_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NUMBER_LINE_LEX;
  END C_NUMBER_LINE_LEX_P;
  FUNCTION C_NUMBER_HEAD_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NUMBER_HEAD_LEX;
  END C_NUMBER_HEAD_LEX_P;
  FUNCTION C_NUMBER_RECON_LEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NUMBER_RECON_LEX;
  END C_NUMBER_RECON_LEX_P;
  FUNCTION C_BANK_ACCOUNT_NUM_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_NUM_DSP;
  END C_BANK_ACCOUNT_NUM_DSP_P;
  FUNCTION C_BANK_CURRENCY_CODE_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_CURRENCY_CODE_DSP;
  END C_BANK_CURRENCY_CODE_DSP_P;
  FUNCTION C_BANK_BRANCH_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_BRANCH_NAME_DSP;
  END C_BANK_BRANCH_NAME_DSP_P;
  FUNCTION C_BANK_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_NAME_DSP;
  END C_BANK_NAME_DSP_P;
  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
/*    STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    begin FND_MESSAGE.SET_NAME(APPLICATION, NAME); end;
  END SET_NAME;
  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  V_TRANSLATE number;
  BEGIN
    /*STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/
    declare TRANSLATE BOOLEAN;
    begin
        TRANSLATE := sys.diutil.int_to_bool(V_TRANSLATE);
        FND_MESSAGE.SET_TOKEN(TOKEN, VALUE, TRANSLATE);
    end;
  END SET_TOKEN;
  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/
    begin FND_MESSAGE.RETRIEVE(MSGOUT); end;
  END RETRIEVE;
  PROCEDURE CLEAR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/
    begin FND_MESSAGE.CLEAR; end;
  END CLEAR;
  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    begin
        X0 := FND_MESSAGE.GET_STRING(APPIN, NAMEIN);
    end;
    RETURN X0;
  END GET_STRING;
  FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    begin
        X0 := FND_MESSAGE.GET_NUMBER(APPIN, NAMEIN);
    end;
    RETURN X0;
  END GET_NUMBER;
  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    begin
        X0 := FND_MESSAGE.GET;
    end;
    RETURN X0;
  END GET;
  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    begin X0 := FND_MESSAGE.GET_ENCODED; end;
    RETURN X0;
  END GET_ENCODED;
  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/
    begin FND_MESSAGE.PARSE_ENCODED(ENCODED_MESSAGE, APP_SHORT_NAME, MESSAGE_NAME); end;
  END PARSE_ENCODED;
  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/
    begin FND_MESSAGE.SET_ENCODED(ENCODED_MESSAGE); end;
  END SET_ENCODED;
  PROCEDURE RAISE_ERROR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/
    begin FND_MESSAGE.RAISE_ERROR; end;
  END RAISE_ERROR;
  PROCEDURE DEBUG(LINE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin CEP_STANDARD.DEBUG(:LINE); end;');
    STPROC.BIND_I(LINE);
    STPROC.EXECUTE;*/
    begin CEP_STANDARD.DEBUG(LINE); end;
  END DEBUG;
  PROCEDURE ENABLE_DEBUG IS
  BEGIN
    /*STPROC.INIT('begin CEP_STANDARD.ENABLE_DEBUG; end;');
    STPROC.EXECUTE;*/
    --begin CEP_STANDARD.ENABLE_DEBUG; end;
    null;
  END ENABLE_DEBUG;
  PROCEDURE DISABLE_DEBUG IS
  BEGIN
    /*STPROC.INIT('begin CEP_STANDARD.DISABLE_DEBUG; end;');
    STPROC.EXECUTE;*/
    --begin CEP_STANDARD.DISABLE_DEBUG; end;
    null;
  END DISABLE_DEBUG;
  PROCEDURE INIT_SECURITY IS
  BEGIN
    /*STPROC.INIT(' begin CEP_STANDARD.init_security; end;');
    STPROC.EXECUTE;*/
    begin CEP_STANDARD.init_security; end;
  END INIT_SECURITY;
  FUNCTION GET_WINDOW_SESSION_TITLE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    begin X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE; end;
    RETURN X0;
  END GET_WINDOW_SESSION_TITLE;
  FUNCTION GET_EFFECTIVE_DATE(P_BANK_ACCOUNT_ID IN NUMBER
                             ,P_TRX_CODE IN VARCHAR2
                             ,P_RECEIPT_DATE IN DATE) RETURN DATE IS
    X0 DATE;
  BEGIN
    /*STPROC.INIT('begin :X0 := CEP_STANDARD.GET_EFFECTIVE_DATE(:P_BANK_ACCOUNT_ID, :P_TRX_CODE, :P_RECEIPT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BANK_ACCOUNT_ID);
    STPROC.BIND_I(P_TRX_CODE);
    STPROC.BIND_I(P_RECEIPT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    begin X0 := CEP_STANDARD.GET_EFFECTIVE_DATE(P_BANK_ACCOUNT_ID, P_TRX_CODE, P_RECEIPT_DATE); end;
    RETURN X0;
  END GET_EFFECTIVE_DATE;
END CE_CEXINERR_XMLP_PKG;



/
