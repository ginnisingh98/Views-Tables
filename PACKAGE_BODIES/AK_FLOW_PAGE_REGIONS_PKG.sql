--------------------------------------------------------
--  DDL for Package Body AK_FLOW_PAGE_REGIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AK_FLOW_PAGE_REGIONS_PKG" as
/* $Header: AKDFPRGB.pls 120.2 2005/09/29 13:59:44 tshort ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_PAGE_APPLICATION_ID in NUMBER,
  X_PAGE_CODE in VARCHAR2,
  X_REGION_APPLICATION_ID in NUMBER,
  X_REGION_CODE in VARCHAR2,
  X_DISPLAY_SEQUENCE in NUMBER,
  X_REGION_STYLE in VARCHAR2,
  X_NUM_COLUMNS in NUMBER,
  X_ICX_CUSTOM_CALL in VARCHAR2,
  X_PARENT_REGION_APPLICATION_ID in NUMBER,
  X_PARENT_REGION_CODE in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2
) is
  cursor C is select ROWID from AK_FLOW_PAGE_REGIONS
    where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
    and FLOW_CODE = X_FLOW_CODE
    and PAGE_APPLICATION_ID = X_PAGE_APPLICATION_ID
    and PAGE_CODE = X_PAGE_CODE
    and REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
    and REGION_CODE = X_REGION_CODE;
begin
  insert into AK_FLOW_PAGE_REGIONS (
    FLOW_APPLICATION_ID,
    FLOW_CODE,
    PAGE_APPLICATION_ID,
    PAGE_CODE,
    REGION_APPLICATION_ID,
    REGION_CODE,
    DISPLAY_SEQUENCE,
    REGION_STYLE,
    NUM_COLUMNS,
    ICX_CUSTOM_CALL,
    PARENT_REGION_APPLICATION_ID,
    PARENT_REGION_CODE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15
  ) values (
    X_FLOW_APPLICATION_ID,
    X_FLOW_CODE,
    X_PAGE_APPLICATION_ID,
    X_PAGE_CODE,
    X_REGION_APPLICATION_ID,
    X_REGION_CODE,
    X_DISPLAY_SEQUENCE,
    X_REGION_STYLE,
    X_NUM_COLUMNS,
    X_ICX_CUSTOM_CALL,
    X_PARENT_REGION_APPLICATION_ID,
    X_PARENT_REGION_CODE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15
  );

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;
end INSERT_ROW;

procedure LOCK_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_PAGE_APPLICATION_ID in NUMBER,
  X_PAGE_CODE in VARCHAR2,
  X_OLD_REGION_APPLICATION_ID in NUMBER,
  X_OLD_REGION_CODE in VARCHAR2,
  X_DISPLAY_SEQUENCE in NUMBER,
  X_REGION_STYLE in VARCHAR2,
  X_NUM_COLUMNS in NUMBER,
  X_ICX_CUSTOM_CALL in VARCHAR2,
  X_OLD_PARENT_REGION_APPL_ID in NUMBER,
  X_OLD_PARENT_REGION_CODE in VARCHAR2
) is
  cursor c is select
      DISPLAY_SEQUENCE,
      REGION_STYLE,
      NUM_COLUMNS,
      ICX_CUSTOM_CALL,
      PARENT_REGION_APPLICATION_ID,
      PARENT_REGION_CODE
    from AK_FLOW_PAGE_REGIONS
    where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
    and FLOW_CODE = X_FLOW_CODE
    and PAGE_APPLICATION_ID = X_PAGE_APPLICATION_ID
    and PAGE_CODE = X_PAGE_CODE
    and REGION_APPLICATION_ID = X_OLD_REGION_APPLICATION_ID
    and REGION_CODE = X_OLD_REGION_CODE
    for update of PAGE_APPLICATION_ID nowait;
  recinfo c%rowtype;

begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (NOT( (recinfo.DISPLAY_SEQUENCE = X_DISPLAY_SEQUENCE)
      AND (recinfo.REGION_STYLE = X_REGION_STYLE)
      AND (recinfo.NUM_COLUMNS = X_NUM_COLUMNS)
      AND (recinfo.ICX_CUSTOM_CALL = X_ICX_CUSTOM_CALL)
      AND (recinfo.PARENT_REGION_APPLICATION_ID =
                   X_OLD_PARENT_REGION_APPL_ID)
      AND (recinfo.PARENT_REGION_CODE = X_OLD_PARENT_REGION_CODE)
  )) then
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_PAGE_APPLICATION_ID in NUMBER,
  X_PAGE_CODE in VARCHAR2,
  X_REGION_APPLICATION_ID in NUMBER,
  X_REGION_CODE in VARCHAR2,
  X_OLD_REGION_APPLICATION_ID in NUMBER,
  X_OLD_REGION_CODE in VARCHAR2,
  X_DISPLAY_SEQUENCE in NUMBER,
  X_REGION_STYLE in VARCHAR2,
  X_NUM_COLUMNS in NUMBER,
  X_ICX_CUSTOM_CALL in VARCHAR2,
  X_PARENT_REGION_APPLICATION_ID in NUMBER,
  X_PARENT_REGION_CODE in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2
) is
begin
  update AK_FLOW_PAGE_REGIONS set
    FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID,
    FLOW_CODE = X_FLOW_CODE,
    PAGE_APPLICATION_ID = X_PAGE_APPLICATION_ID,
    PAGE_CODE = X_PAGE_CODE,
    REGION_APPLICATION_ID = X_REGION_APPLICATION_ID,
    REGION_CODE = X_REGION_CODE,
    DISPLAY_SEQUENCE = X_DISPLAY_SEQUENCE,
    REGION_STYLE = X_REGION_STYLE,
    NUM_COLUMNS = X_NUM_COLUMNS,
    ICX_CUSTOM_CALL = X_ICX_CUSTOM_CALL,
    PARENT_REGION_APPLICATION_ID = X_PARENT_REGION_APPLICATION_ID,
    PARENT_REGION_CODE = X_PARENT_REGION_CODE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15
  where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
  and FLOW_CODE = X_FLOW_CODE
  and PAGE_APPLICATION_ID = X_PAGE_APPLICATION_ID
  and PAGE_CODE = X_PAGE_CODE
  and REGION_APPLICATION_ID = X_OLD_REGION_APPLICATION_ID
  and REGION_CODE = X_OLD_REGION_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_PAGE_APPLICATION_ID in NUMBER,
  X_PAGE_CODE in VARCHAR2,
  X_REGION_APPLICATION_ID in NUMBER,
  X_REGION_CODE in VARCHAR2
) is
begin
  delete from AK_FLOW_PAGE_REGIONS
  where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
  and FLOW_CODE = X_FLOW_CODE
  and PAGE_APPLICATION_ID = X_PAGE_APPLICATION_ID
  and PAGE_CODE = X_PAGE_CODE
  and REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
  and REGION_CODE = X_REGION_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;
end AK_FLOW_PAGE_REGIONS_PKG;

/
