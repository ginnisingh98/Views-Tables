--------------------------------------------------------
--  DDL for Package Body JL_JLCOPWHR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLCOPWHR_XMLP_PKG" AS
/* $Header: JLCOPWHRB.pls 120.1 2007/12/25 16:51:59 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    INIT_FAILURE EXCEPTION;
    BASE_CURR VARCHAR2(17);
    PREC NUMBER;
  BEGIN
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;

    SELECT
      DISTINCT
      ( CHART_OF_ACCOUNTS_ID )
    INTO L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS G,
      AP_SYSTEM_PARAMETERS A
    WHERE G.SET_OF_BOOKS_ID = P_SOB_ID;
    P_COA_ID := L_CHART_OF_ACCOUNTS_ID;
    /*SRW.REFERENCE(P_COA_ID)*/NULL;
    /*SRW.REFERENCE(P_COA_ID)*/NULL;
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION
    INTO BASE_CURR,PREC
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE
      AND P.SET_OF_BOOKS_ID = P_SOB_ID;

    C_BASE_CURRENCY_CODE := BASE_CURR;
    P_MIN_PRECISION := PREC;
    C_BASE_PRECISION := PREC;
    C_LOCATION_ID := JG_ZZ_COMPANY_INFO.GET_LOCATION_ID;
    SELECT
      HR.GLOBAL_ATTRIBUTE8
    INTO P_1
    FROM
      HR_LOCATIONS HR
    WHERE HR.LOCATION_ID = C_LOCATION_ID;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CALCULATE_VAT_AMOUNT(P_TAX_NAME IN VARCHAR2
                               ,P_VENDOR_ID IN NUMBER
                               ,P_VENDOR_NUMBER IN VARCHAR2,document_number in varchar2) RETURN NUMBER IS
    V_VAT_AMOUNT NUMBER;
  BEGIN
    SELECT
      ROUND(SUM((AID.AMOUNT * ATC2.TAX_RATE) / 100)
           ,P_MIN_PRECISION) VAT_AMOUNT
    INTO V_VAT_AMOUNT
    FROM
      AP_TAX_CODES ATC,
      JL_ZZ_AP_SUP_AWT_CD JZSAC,
      JL_ZZ_AP_INV_DIS_WH JZIDW,
      AP_TAX_CODES ATC2,
      AP_INVOICES AI,
      AP_INVOICE_DISTRIBUTIONS AID
    WHERE AID.ACCOUNTING_DATE BETWEEN P_ACCOUNTING_DATE_FROM
      AND P_ACCOUNTING_DATE_TO
      AND AID.MATCH_STATUS_FLAG = 'A'
      AND AID.LINE_TYPE_LOOKUP_CODE <> 'AWT'
      AND AID.LINE_TYPE_LOOKUP_CODE <> 'TAX'
      AND JZIDW.INVOICE_ID = AID.INVOICE_ID
      AND JZIDW.DISTRIBUTION_LINE_NUMBER = AID.DISTRIBUTION_LINE_NUMBER
      AND JZSAC.SUPP_AWT_CODE_ID = JZIDW.SUPP_AWT_CODE_ID
      AND ATC.TAX_ID = JZSAC.TAX_ID
      AND ATC.GLOBAL_ATTRIBUTE19 is not null
      AND ATC.NAME = P_TAX_NAME
      AND AID.TAX_CODE_ID is not null
      AND ATC2.TAX_ID = AID.TAX_CODE_ID
      AND AI.INVOICE_ID = AID.INVOICE_ID
      AND AI.INVOICE_NUM = DOCUMENT_NUMBER
      AND AI.CANCELLED_DATE is null
      AND ( ( AID.GLOBAL_ATTRIBUTE2 is null
      AND AID.INVOICE_ID = AI.INVOICE_ID
      AND AI.VENDOR_ID = P_VENDOR_ID )
    OR ( AID.GLOBAL_ATTRIBUTE2 = P_VENDOR_NUMBER
      AND AID.INVOICE_ID = AI.INVOICE_ID ) )
      AND exists (
      SELECT
        1
      FROM
        AP_INVOICE_DISTRIBUTIONS AID2
      WHERE AID2.INVOICE_ID = AID.INVOICE_ID
        AND AID2.MATCH_STATUS_FLAG = 'A'
        AND AID2.LINE_TYPE_LOOKUP_CODE = 'AWT'
        AND AID2.TAX_CODE_ID = ATC.TAX_ID
        AND ( ( AID2.GLOBAL_ATTRIBUTE2 is null )
      OR ( AID2.GLOBAL_ATTRIBUTE2 = P_VENDOR_NUMBER ) ) );
    RETURN (V_VAT_AMOUNT);
  END CALCULATE_VAT_AMOUNT;

  FUNCTION CF_VAT_AMOUNTFORMULA(CERTIFICATE_TYPE IN VARCHAR2
                               ,TAX_NAME IN VARCHAR2
                               ,VENDOR_ID IN NUMBER
                               ,VENDOR_NUMBER IN VARCHAR2
                               ,DOCUMENT_NUMBER IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF CERTIFICATE_TYPE = 'VAT' THEN
      RETURN (TO_NUMBER(CALCULATE_VAT_AMOUNT(P_VENDOR_NUMBER
                                           ,P_VENDOR_ID
                                           ,P_TAX_NAME
                                           ,DOCUMENT_NUMBER)));
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END CF_VAT_AMOUNTFORMULA;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_REPORT_START_DATE DATE;
  BEGIN
    L_REPORT_START_DATE := SYSDATE;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID
    INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS G,
      AP_SYSTEM_PARAMETERS_ALL A
    WHERE G.SET_OF_BOOKS_ID = A.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    C_REPORT_START_DATE := L_REPORT_START_DATE;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION CF_1FORMULA(COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (COMPANY_NAME);
  END CF_1FORMULA;

  FUNCTION CP_1FORMULA(CF_1 IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (CF_1);
  END CP_1FORMULA;

  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    P_MIN_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION F_NO_DATA_FOUNDFORMATTRIGGER(CS_NO_DATA_FOUND IN NUMBER) RETURN BOOLEAN IS
  BEGIN
    IF CS_NO_DATA_FOUND > 0 THEN
      RETURN (FALSE);
    END IF;
    RETURN (TRUE);
  END F_NO_DATA_FOUNDFORMATTRIGGER;

  FUNCTION P_PERIOD_FROMVALIDTRIGGER RETURN BOOLEAN IS
    X_START_DATE DATE;
  BEGIN
    SELECT
      START_DATE
    INTO X_START_DATE
    FROM
      GL_PERIODS A,
      GL_SETS_OF_BOOKS B
    WHERE B.SET_OF_BOOKS_ID = P_SOB_ID
      AND A.PERIOD_SET_NAME = B.PERIOD_SET_NAME
      AND UPPER(A.PERIOD_NAME) = UPPER(P_PERIOD_FROM);
    P_ACCOUNTING_DATE_FROM := X_START_DATE;
    RETURN (TRUE);
  END P_PERIOD_FROMVALIDTRIGGER;

  FUNCTION P_PERIOD_TOVALIDTRIGGER RETURN BOOLEAN IS
    X_END_DATE DATE;
  BEGIN
    SELECT
      END_DATE
    INTO X_END_DATE
    FROM
      GL_PERIODS A,
      GL_SETS_OF_BOOKS B
    WHERE B.SET_OF_BOOKS_ID = P_SOB_ID
      AND A.PERIOD_SET_NAME = B.PERIOD_SET_NAME
      AND UPPER(A.PERIOD_NAME) = UPPER(P_PERIOD_TO);
    P_ACCOUNTING_DATE_TO := X_END_DATE;
    RETURN (TRUE);
  END P_PERIOD_TOVALIDTRIGGER;

  FUNCTION F_SELECTED_TAXPAYERID RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;

  BEGIN
    IF P_TAX_PAYER_ID_FROM IS NOT NULL THEN
      RET_TEXT := 'AND PV_1.NUM_1099 BETWEEN :p_tax_payer_id_from ';
    ELSE
      RET_TEXT := 'AND PV_1.NUM_1099 BETWEEN PV_1.num_1099 ';
    END IF;
    IF P_TAX_PAYER_ID_TO IS NOT NULL THEN
      RET_TEXT := RET_TEXT || ' and :p_tax_payer_id_to';
    ELSE
      RET_TEXT := RET_TEXT || ' and PV_1.num_1099 ';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT;
    END IF;
    RETURN RET_TEXT;
  END F_SELECTED_TAXPAYERID;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN

    P_SELECTED_TAXPAYERID := F_SELECTED_TAXPAYERID;
    X:=P_PERIOD_FROMVALIDTRIGGER;
    Y:=P_PERIOD_TOVALIDTRIGGER;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_LOCATION_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_LOCATION_ID;
  END C_LOCATION_ID_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION CP_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_1;
  END CP_1_P;

  FUNCTION C_WHERE_FLEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_WHERE_FLEX;
  END C_WHERE_FLEX_P;

  FUNCTION C_ALL_SEGS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_SEGS;
  END C_ALL_SEGS_P;

END JL_JLCOPWHR_XMLP_PKG;





/
