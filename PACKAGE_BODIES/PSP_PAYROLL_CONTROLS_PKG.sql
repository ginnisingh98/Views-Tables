--------------------------------------------------------
--  DDL for Package Body PSP_PAYROLL_CONTROLS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PAYROLL_CONTROLS_PKG" AS
 /* $Header: PSPPIPCB.pls 120.3 2006/09/01 21:09:52 vdharmap noship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SUBLINES_DR_AMOUNT in NUMBER,
  X_SUBLINES_CR_AMOUNT in NUMBER,
  X_DIST_DR_AMOUNT in NUMBER,
  X_DIST_CR_AMOUNT in NUMBER,
  X_OGM_DR_AMOUNT in NUMBER,
  X_OGM_CR_AMOUNT in NUMBER,
  X_GL_DR_AMOUNT in NUMBER,
  X_GL_CR_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_TOTAL_DR_AMOUNT in NUMBER,
  X_TOTAL_CR_AMOUNT in NUMBER,
  X_NUMBER_OF_CR in NUMBER,
  X_NUMBER_OF_DR in NUMBER,
  X_PAYROLL_SOURCE_CODE in VARCHAR2,
  X_SOURCE_TYPE in VARCHAR2,
  X_PAYROLL_ID in NUMBER,
  X_TIME_PERIOD_ID in NUMBER,
  X_BATCH_NAME in VARCHAR2,
  X_PAYROLL_ACTION_ID in NUMBER,
  X_MODE in VARCHAR2 default 'R',
  X_GL_POSTING_OVERRIDE_DATE in DATE,
  X_GMS_POSTING_OVERRIDE_DATE in DATE,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_BUSINESS_GROUP_ID in NUMBER,
  X_GL_PHASE in VARCHAR2,
  X_GMS_PHASE in VARCHAR2,
  X_ADJ_SUM_BATCH_NAME in VARCHAR2,
  X_CURRENCY_CODE   in VARCHAR2,
  X_EXCHANGE_RATE_TYPE in VARCHAR2,
  X_PARENT_PAYROLL_CONTROL_ID in NUMBER default null
  ) is
    cursor C is select ROWID from PSP_PAYROLL_CONTROLS
      where PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID;
    X_LAST_UPDATE_DATE DATE;
    X_LAST_UPDATED_BY NUMBER;
    X_LAST_UPDATE_LOGIN NUMBER;
begin
  X_LAST_UPDATE_DATE := SYSDATE;
  if(X_MODE = 'I') then
    X_LAST_UPDATED_BY := 1;
    X_LAST_UPDATE_LOGIN := 0;
  elsif (X_MODE = 'R') then
    X_LAST_UPDATED_BY := FND_GLOBAL.USER_ID;
    if X_LAST_UPDATED_BY is NULL then
      X_LAST_UPDATED_BY := -1;
    end if;
    X_LAST_UPDATE_LOGIN :=FND_GLOBAL.LOGIN_ID;
    if X_LAST_UPDATE_LOGIN is NULL then
      X_LAST_UPDATE_LOGIN := -1;
    end if;
  else
    FND_MESSAGE.SET_NAME( 'FND', 'SYSTEM-INVALID ARGS');
    app_exception.raise_exception;
  end if;
  insert into PSP_PAYROLL_CONTROLS (
    SUBLINES_DR_AMOUNT,
    SUBLINES_CR_AMOUNT,
    DIST_DR_AMOUNT,
    DIST_CR_AMOUNT,
    OGM_DR_AMOUNT,
    OGM_CR_AMOUNT,
    GL_DR_AMOUNT,
    GL_CR_AMOUNT,
    STATUS_CODE,
    TOTAL_DR_AMOUNT,
    TOTAL_CR_AMOUNT,
    NUMBER_OF_CR,
    NUMBER_OF_DR,
    PAYROLL_SOURCE_CODE,
    SOURCE_TYPE,
    PAYROLL_ID,
    TIME_PERIOD_ID,
    BATCH_NAME,
    PAYROLL_CONTROL_ID,
    PAYROLL_ACTION_ID,
    GL_POSTING_OVERRIDE_DATE,
    GMS_POSTING_OVERRIDE_DATE,
    SET_OF_BOOKS_ID,
    BUSINESS_GROUP_ID,
    GL_PHASE,
    GMS_PHASE,
    ADJ_SUM_BATCH_NAME,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CURRENCY_CODE,
    EXCHANGE_RATE_TYPE,
    PARENT_PAYROLL_CONTROL_ID
  ) values (
    X_SUBLINES_DR_AMOUNT,
    X_SUBLINES_CR_AMOUNT,
    X_DIST_DR_AMOUNT,
    X_DIST_CR_AMOUNT,
    X_OGM_DR_AMOUNT,
    X_OGM_CR_AMOUNT,
    X_GL_DR_AMOUNT,
    X_GL_CR_AMOUNT,
    X_STATUS_CODE,
    X_TOTAL_DR_AMOUNT,
    X_TOTAL_CR_AMOUNT,
    X_NUMBER_OF_CR,
    X_NUMBER_OF_DR,
    X_PAYROLL_SOURCE_CODE,
    X_SOURCE_TYPE,
    X_PAYROLL_ID,
    X_TIME_PERIOD_ID,
    X_BATCH_NAME,
    X_PAYROLL_CONTROL_ID,
    X_PAYROLL_ACTION_ID,
    X_GL_POSTING_OVERRIDE_DATE,
    X_GMS_POSTING_OVERRIDE_DATE,
    X_SET_OF_BOOKS_ID,
    X_BUSINESS_GROUP_ID,
    X_GL_PHASE,
    X_GMS_PHASE,
    X_ADJ_SUM_BATCH_NAME,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_CURRENCY_CODE,
    X_EXCHANGE_RATE_TYPE,
    X_PARENT_PAYROLL_CONTROL_ID
  );

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SUBLINES_DR_AMOUNT in NUMBER,
  X_SUBLINES_CR_AMOUNT in NUMBER,
  X_DIST_DR_AMOUNT in NUMBER,
  X_DIST_CR_AMOUNT in NUMBER,
  X_OGM_DR_AMOUNT in NUMBER,
  X_OGM_CR_AMOUNT in NUMBER,
  X_GL_DR_AMOUNT in NUMBER,
  X_GL_CR_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_TOTAL_DR_AMOUNT in NUMBER,
  X_TOTAL_CR_AMOUNT in NUMBER,
  X_NUMBER_OF_CR in NUMBER,
  X_NUMBER_OF_DR in NUMBER,
  X_PAYROLL_SOURCE_CODE in VARCHAR2,
  X_SOURCE_TYPE in VARCHAR2,
  X_PAYROLL_ID in NUMBER,
  X_TIME_PERIOD_ID in NUMBER,
  X_BATCH_NAME in VARCHAR2,
  X_PAYROLL_ACTION_ID in NUMBER,
  X_GL_POSTING_OVERRIDE_DATE in DATE,
  X_GMS_POSTING_OVERRIDE_DATE in DATE,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_BUSINESS_GROUP_ID in NUMBER,
  X_GL_PHASE in VARCHAR2,
  X_GMS_PHASE in VARCHAR2,
  X_ADJ_SUM_BATCH_NAME in VARCHAR2,
  X_CURRENCY_CODE  in VARCHAR2,
  X_EXCHANGE_RATE_TYPE in VARCHAR2
) is
  cursor c1 is select
      SUBLINES_DR_AMOUNT,
      SUBLINES_CR_AMOUNT,
      DIST_DR_AMOUNT,
      DIST_CR_AMOUNT,
      OGM_DR_AMOUNT,
      OGM_CR_AMOUNT,
      GL_DR_AMOUNT,
      GL_CR_AMOUNT,
      STATUS_CODE,
      TOTAL_DR_AMOUNT,
      TOTAL_CR_AMOUNT,
      NUMBER_OF_CR,
      NUMBER_OF_DR,
      PAYROLL_SOURCE_CODE,
      SOURCE_TYPE,
      PAYROLL_ID,
      TIME_PERIOD_ID,
      BATCH_NAME,
      PAYROLL_ACTION_ID,
      GL_POSTING_OVERRIDE_DATE,
      GMS_POSTING_OVERRIDE_DATE,
      SET_OF_BOOKS_ID,
      BUSINESS_GROUP_ID,
      GL_PHASE,
      GMS_PHASE,
      ADJ_SUM_BATCH_NAME,
      CURRENCY_CODE,
      EXCHANGE_RATE_TYPE
    from PSP_PAYROLL_CONTROLS
    where PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID
    for update of PAYROLL_CONTROL_ID nowait;
  tlinfo c1%rowtype;

begin
  open c1;
  fetch c1 into tlinfo;
  if (c1%notfound) then
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
    close c1;
    return;
  end if;
  close c1;

      if ( ((tlinfo.SUBLINES_DR_AMOUNT = X_SUBLINES_DR_AMOUNT)
           OR ((tlinfo.SUBLINES_DR_AMOUNT is null)
               AND (X_SUBLINES_DR_AMOUNT is null)))
      AND ((tlinfo.SUBLINES_CR_AMOUNT = X_SUBLINES_CR_AMOUNT)
           OR ((tlinfo.SUBLINES_CR_AMOUNT is null)
               AND (X_SUBLINES_CR_AMOUNT is null)))
      AND ((tlinfo.DIST_DR_AMOUNT = X_DIST_DR_AMOUNT)
           OR ((tlinfo.DIST_DR_AMOUNT is null)
               AND (X_DIST_DR_AMOUNT is null)))
      AND ((tlinfo.DIST_CR_AMOUNT = X_DIST_CR_AMOUNT)
           OR ((tlinfo.DIST_CR_AMOUNT is null)
               AND (X_DIST_CR_AMOUNT is null)))
      AND ((tlinfo.OGM_DR_AMOUNT = X_OGM_DR_AMOUNT)
           OR ((tlinfo.OGM_DR_AMOUNT is null)
               AND (X_OGM_DR_AMOUNT is null)))
      AND ((tlinfo.OGM_CR_AMOUNT = X_OGM_CR_AMOUNT)
           OR ((tlinfo.OGM_CR_AMOUNT is null)
               AND (X_OGM_CR_AMOUNT is null)))
      AND ((tlinfo.GL_DR_AMOUNT = X_GL_DR_AMOUNT)
           OR ((tlinfo.GL_DR_AMOUNT is null)
               AND (X_GL_DR_AMOUNT is null)))
      AND ((tlinfo.GL_CR_AMOUNT = X_GL_CR_AMOUNT)
           OR ((tlinfo.GL_CR_AMOUNT is null)
               AND (X_GL_CR_AMOUNT is null)))
      AND (tlinfo.STATUS_CODE = X_STATUS_CODE)
      AND ((tlinfo.TOTAL_DR_AMOUNT = X_TOTAL_DR_AMOUNT)
           OR ((tlinfo.TOTAL_DR_AMOUNT is null)
               AND (X_TOTAL_DR_AMOUNT is null)))
      AND ((tlinfo.TOTAL_CR_AMOUNT = X_TOTAL_CR_AMOUNT)
           OR ((tlinfo.TOTAL_CR_AMOUNT is null)
               AND (X_TOTAL_CR_AMOUNT is null)))
      AND ((tlinfo.NUMBER_OF_CR = X_NUMBER_OF_CR)
           OR ((tlinfo.NUMBER_OF_CR is null)
               AND (X_NUMBER_OF_CR is null)))
      AND ((tlinfo.NUMBER_OF_DR = X_NUMBER_OF_DR)
           OR ((tlinfo.NUMBER_OF_DR is null)
               AND (X_NUMBER_OF_DR is null)))
      AND (tlinfo.PAYROLL_SOURCE_CODE = X_PAYROLL_SOURCE_CODE)
      AND (tlinfo.SOURCE_TYPE = X_SOURCE_TYPE)
      AND (tlinfo.PAYROLL_ID = X_PAYROLL_ID)
      AND (tlinfo.TIME_PERIOD_ID = X_TIME_PERIOD_ID)
      AND ((tlinfo.BATCH_NAME = X_BATCH_NAME)
           OR ((tlinfo.BATCH_NAME is null)
               AND (X_BATCH_NAME is null)))
      AND (tlinfo.PAYROLL_ACTION_ID = X_PAYROLL_ACTION_ID)
      AND (tlinfo.CURRENCY_CODE = X_CURRENCY_CODE)
      AND ((tlinfo.EXCHANGE_RATE_TYPE = X_EXCHANGE_RATE_TYPE)
           OR ((tlinfo.EXCHANGE_RATE_TYPE is null)
               AND (X_EXCHANGE_RATE_TYPE is null)))

  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SUBLINES_DR_AMOUNT in NUMBER,
  X_SUBLINES_CR_AMOUNT in NUMBER,
  X_DIST_DR_AMOUNT in NUMBER,
  X_DIST_CR_AMOUNT in NUMBER,
  X_OGM_DR_AMOUNT in NUMBER,
  X_OGM_CR_AMOUNT in NUMBER,
  X_GL_DR_AMOUNT in NUMBER,
  X_GL_CR_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_TOTAL_DR_AMOUNT in NUMBER,
  X_TOTAL_CR_AMOUNT in NUMBER,
  X_NUMBER_OF_CR in NUMBER,
  X_NUMBER_OF_DR in NUMBER,
  X_PAYROLL_SOURCE_CODE in VARCHAR2,
  X_SOURCE_TYPE in VARCHAR2,
  X_PAYROLL_ID in NUMBER,
  X_TIME_PERIOD_ID in NUMBER,
  X_BATCH_NAME in VARCHAR2,
  X_PAYROLL_ACTION_ID in NUMBER,
  X_MODE in VARCHAR2 default 'R',
  X_GL_POSTING_OVERRIDE_DATE in DATE,
  X_GMS_POSTING_OVERRIDE_DATE in DATE,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_BUSINESS_GROUP_ID in NUMBER,
  X_GL_PHASE in VARCHAR2,
  X_GMS_PHASE in VARCHAR2,
  X_ADJ_SUM_BATCH_NAME in VARCHAR2,
  X_CURRENCY_CODE   in VARCHAR2,
  X_EXCHANGE_RATE_TYPE in VARCHAR2
  ) is
    X_LAST_UPDATE_DATE DATE;
    X_LAST_UPDATED_BY NUMBER;
    X_LAST_UPDATE_LOGIN NUMBER;
begin
  X_LAST_UPDATE_DATE := SYSDATE;
  if(X_MODE = 'I') then
    X_LAST_UPDATED_BY := 1;
    X_LAST_UPDATE_LOGIN := 0;
  elsif (X_MODE = 'R') then
    X_LAST_UPDATED_BY := FND_GLOBAL.USER_ID;
    if X_LAST_UPDATED_BY is NULL then
      X_LAST_UPDATED_BY := -1;
    end if;
    X_LAST_UPDATE_LOGIN :=FND_GLOBAL.LOGIN_ID;
    if X_LAST_UPDATE_LOGIN is NULL then
      X_LAST_UPDATE_LOGIN := -1;
    end if;
  else
    FND_MESSAGE.SET_NAME('FND', 'SYSTEM-INVALID ARGS');
    app_exception.raise_exception;
  end if;
  update PSP_PAYROLL_CONTROLS set
    SUBLINES_DR_AMOUNT = X_SUBLINES_DR_AMOUNT,
    SUBLINES_CR_AMOUNT = X_SUBLINES_CR_AMOUNT,
    DIST_DR_AMOUNT = X_DIST_DR_AMOUNT,
    DIST_CR_AMOUNT = X_DIST_CR_AMOUNT,
    OGM_DR_AMOUNT = X_OGM_DR_AMOUNT,
    OGM_CR_AMOUNT = X_OGM_CR_AMOUNT,
    GL_DR_AMOUNT = X_GL_DR_AMOUNT,
    GL_CR_AMOUNT = X_GL_CR_AMOUNT,
    STATUS_CODE = X_STATUS_CODE,
    TOTAL_DR_AMOUNT = X_TOTAL_DR_AMOUNT,
    TOTAL_CR_AMOUNT = X_TOTAL_CR_AMOUNT,
    NUMBER_OF_CR = X_NUMBER_OF_CR,
    NUMBER_OF_DR = X_NUMBER_OF_DR,
    PAYROLL_SOURCE_CODE = X_PAYROLL_SOURCE_CODE,
    SOURCE_TYPE = X_SOURCE_TYPE,
    PAYROLL_ID = X_PAYROLL_ID,
    TIME_PERIOD_ID = X_TIME_PERIOD_ID,
    BATCH_NAME = X_BATCH_NAME,
    PAYROLL_ACTION_ID = X_PAYROLL_ACTION_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    GL_POSTING_OVERRIDE_DATE = X_GL_POSTING_OVERRIDE_DATE,
    GMS_POSTING_OVERRIDE_DATE = X_GMS_POSTING_OVERRIDE_DATE,
    SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID,
    BUSINESS_GROUP_ID = X_BUSINESS_GROUP_ID,
    GL_PHASE  = X_GL_PHASE,
    GMS_PHASE  = X_GMS_PHASE,
    ADJ_SUM_BATCH_NAME  = X_ADJ_SUM_BATCH_NAME,
    CURRENCY_CODE = X_CURRENCY_CODE,
    EXCHANGE_RATE_TYPE = X_EXCHANGE_RATE_TYPE
  where PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID
  ;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure ADD_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SUBLINES_DR_AMOUNT in NUMBER,
  X_SUBLINES_CR_AMOUNT in NUMBER,
  X_DIST_DR_AMOUNT in NUMBER,
  X_DIST_CR_AMOUNT in NUMBER,
  X_OGM_DR_AMOUNT in NUMBER,
  X_OGM_CR_AMOUNT in NUMBER,
  X_GL_DR_AMOUNT in NUMBER,
  X_GL_CR_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_TOTAL_DR_AMOUNT in NUMBER,
  X_TOTAL_CR_AMOUNT in NUMBER,
  X_NUMBER_OF_CR in NUMBER,
  X_NUMBER_OF_DR in NUMBER,
  X_PAYROLL_SOURCE_CODE in VARCHAR2,
  X_SOURCE_TYPE in VARCHAR2,
  X_PAYROLL_ID in NUMBER,
  X_TIME_PERIOD_ID in NUMBER,
  X_BATCH_NAME in VARCHAR2,
  X_PAYROLL_ACTION_ID in NUMBER,
  X_MODE in VARCHAR2 default 'R',
  X_GL_POSTING_OVERRIDE_DATE in DATE,
  X_GMS_POSTING_OVERRIDE_DATE in DATE,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_BUSINESS_GROUP_ID in NUMBER,
  X_GL_PHASE in VARCHAR2,
  X_GMS_PHASE in VARCHAR2,
  X_ADJ_SUM_BATCH_NAME in VARCHAR2,
  X_CURRENCY_CODE in VARCHAR2,
  X_EXCHANGE_RATE_TYPE in VARCHAR2
  ) is
  cursor c1 is select rowid from PSP_PAYROLL_CONTROLS
     where PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID
  ;
  dummy c1%rowtype;
begin
  open c1;
  fetch c1 into dummy;
  if (c1%notfound) then
    close c1;
    INSERT_ROW (
     X_ROWID,
     X_PAYROLL_CONTROL_ID,
     X_SUBLINES_DR_AMOUNT,
     X_SUBLINES_CR_AMOUNT,
     X_DIST_DR_AMOUNT,
     X_DIST_CR_AMOUNT,
     X_OGM_DR_AMOUNT,
     X_OGM_CR_AMOUNT,
     X_GL_DR_AMOUNT,
     X_GL_CR_AMOUNT,
     X_STATUS_CODE,
     X_TOTAL_DR_AMOUNT,
     X_TOTAL_CR_AMOUNT,
     X_NUMBER_OF_CR,
     X_NUMBER_OF_DR,
     X_PAYROLL_SOURCE_CODE,
     X_SOURCE_TYPE,
     X_PAYROLL_ID,
     X_TIME_PERIOD_ID,
     X_BATCH_NAME,
     X_PAYROLL_ACTION_ID,
     X_MODE,
     X_GL_POSTING_OVERRIDE_DATE,
     X_GMS_POSTING_OVERRIDE_DATE,
     X_SET_OF_BOOKS_ID,
     X_BUSINESS_GROUP_ID,
     X_GL_PHASE,
     X_GMS_PHASE,
     X_ADJ_SUM_BATCH_NAME,
     X_CURRENCY_CODE,
     X_EXCHANGE_RATE_TYPE, null);
    return;
  end if;
  close c1;
  UPDATE_ROW (
   X_PAYROLL_CONTROL_ID,
   X_SUBLINES_DR_AMOUNT,
   X_SUBLINES_CR_AMOUNT,
   X_DIST_DR_AMOUNT,
   X_DIST_CR_AMOUNT,
   X_OGM_DR_AMOUNT,
   X_OGM_CR_AMOUNT,
   X_GL_DR_AMOUNT,
   X_GL_CR_AMOUNT,
   X_STATUS_CODE,
   X_TOTAL_DR_AMOUNT,
   X_TOTAL_CR_AMOUNT,
   X_NUMBER_OF_CR,
   X_NUMBER_OF_DR,
   X_PAYROLL_SOURCE_CODE,
   X_SOURCE_TYPE,
   X_PAYROLL_ID,
   X_TIME_PERIOD_ID,
   X_BATCH_NAME,
   X_PAYROLL_ACTION_ID,
   X_MODE,
   X_GL_POSTING_OVERRIDE_DATE,
   X_GMS_POSTING_OVERRIDE_DATE,
   X_SET_OF_BOOKS_ID,
   X_BUSINESS_GROUP_ID,
   X_GL_PHASE,
   X_GMS_PHASE,
   X_ADJ_SUM_BATCH_NAME,
   X_CURRENCY_CODE,
   X_EXCHANGE_RATE_TYPE);
end ADD_ROW;

procedure DELETE_ROW (
  X_PAYROLL_CONTROL_ID in NUMBER
) is
begin
  delete from PSP_PAYROLL_CONTROLS
  where PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

end PSP_PAYROLL_CONTROLS_PKG;

/
