--------------------------------------------------------
--  DDL for Package Body JE_JEFIASDR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEFIASDR_XMLP_PKG" AS
/* $Header: JEFIASDRB.pls 120.1 2007/12/25 16:52:14 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(001
                 ,'At the beginning of BeforeReport trigger.')*/NULL;
    END IF;
    BEGIN
      SELECT
        SOB.LEDGER_ID,
        SOB.NAME,
        SC.CATEGORY_FLEX_STRUCTURE,
        BC.BOOK_TYPE_CODE,
        BC.ACCOUNTING_FLEX_STRUCTURE,
        BC.DISTRIBUTION_SOURCE_BOOK,
        SOB.CURRENCY_CODE,
        CR.PRECISION
      INTO C_SET_OF_BOOKS_ID,C_SOB_NAME,C_CAT_FLEX_STRUCT,C_BOOK_TYPE_CODE,C_ACCT_FLEX_STRUCT,C_DISTRIBUTION_SOURCE_BOOK,C_CURRENCY_CODE,C_PRECISION
      FROM
        FND_CURRENCIES_VL CR,
        FA_SYSTEM_CONTROLS SC,
        GL_LEDGERS_PUBLIC_V SOB,
        FA_BOOK_CONTROLS BC
      WHERE BC.BOOK_TYPE_CODE = P_TAX_BOOK
        AND SOB.LEDGER_ID = BC.SET_OF_BOOKS_ID
        AND CR.CURRENCY_CODE = SOB.CURRENCY_CODE;
      /*SRW.MESSAGE(002
                 ,'Distribution source book is ' || C_DISTRIBUTION_SOURCE_BOOK)*/NULL;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(002
                   ,'SOB Id is ' || TO_CHAR(C_SET_OF_BOOKS_ID))*/NULL;
        /*SRW.MESSAGE(002
                   ,'Category flex structure is ' || TO_CHAR(C_CAT_FLEX_STRUCT))*/NULL;
        /*SRW.MESSAGE(002
                   ,'Book type code is ' || C_BOOK_TYPE_CODE)*/NULL;
        /*SRW.MESSAGE(002
                   ,'Accouting flex structure is ' || TO_CHAR(C_ACCT_FLEX_STRUCT))*/NULL;
        /*SRW.MESSAGE(002
                   ,'Distribution source book is ' || C_DISTRIBUTION_SOURCE_BOOK)*/NULL;
        /*SRW.MESSAGE(002
                   ,'Currency code is ' || C_CURRENCY_CODE)*/NULL;
      END IF;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        /*SRW.MESSAGE('222'
                   ,'ERROR. Set of Book info brings back too many rows.')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE('223'
                   ,'ERROR. Set of Books info brings back no rows')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    BEGIN
      SELECT
        F.PERIOD_OPEN_DATE FROM_OPEN_DATE,
        NVL(F.PERIOD_CLOSE_DATE
           ,SYSDATE) FROM_CLOSE_DATE,
        sysdate REPORT_DATE,
        F.PERIOD_COUNTER FROM_COUNTER,
        F.CALENDAR_PERIOD_OPEN_DATE CALENDAR_OPEN_DATE,
        NVL(T.CALENDAR_PERIOD_CLOSE_DATE
           ,SYSDATE) CALENDAR_CLOSE_DATE,
        F.FISCAL_YEAR FROM_FISCAL_YEAR,
        T.PERIOD_COUNTER TO_COUNTER,
        T.PERIOD_OPEN_DATE TO_OPEN_DATE,
        NVL(T.PERIOD_CLOSE_DATE
           ,C.LAST_DEPRN_RUN_DATE),
        T.PERIOD_CLOSE_DATE TIME_TO_CLOSE_DATE
      INTO C_FROM_OPEN_DATE,C_FROM_CLOSE_DATE,C_REPORT_DATE,C_FROM_COUNTER,C_CALENDAR_OPEN_DATE,C_CALENDAR_CLOSE_DATE,C_FROM_FISCAL_YEAR,C_TO_COUNTER,C_TO_OPEN_DATE,C_TO_CLOSE_DATE,C_TIME_TO_CLOSE_DATE
      FROM
        FA_DEPRN_PERIODS F,
        FA_DEPRN_PERIODS T,
        FA_BOOK_CONTROLS C
      WHERE F.PERIOD_COUNTER = (
        SELECT
          MIN(F1.PERIOD_COUNTER)
        FROM
          FA_DEPRN_PERIODS F1
        WHERE F1.BOOK_TYPE_CODE = P_TAX_BOOK
          AND F1.FISCAL_YEAR = F.FISCAL_YEAR )
        AND T.PERIOD_NAME = P_PERIOD_NAME
        AND F.BOOK_TYPE_CODE = P_TAX_BOOK
        AND T.BOOK_TYPE_CODE = P_TAX_BOOK
        AND T.FISCAL_YEAR = F.FISCAL_YEAR
        AND C.BOOK_TYPE_CODE = T.BOOK_TYPE_CODE
        AND C.BOOK_TYPE_CODE = F.BOOK_TYPE_CODE;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(003
                   ,'C_from_open_date is ' || C_FROM_OPEN_DATE)*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_from_close_date is ' || TO_CHAR(C_FROM_CLOSE_DATE))*/NULL;
        /*SRW.MESSAGE(003
                   ,'--------------------')*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_report_date is ' || C_REPORT_DATE)*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_from_fiscal_year is ' || C_FROM_FISCAL_YEAR)*/NULL;
        /*SRW.MESSAGE(003
                   ,'--------------------')*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_from_counter is ' || TO_CHAR(C_FROM_COUNTER))*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_to_counter is ' || TO_CHAR(C_TO_COUNTER))*/NULL;
        /*SRW.MESSAGE(003
                   ,'--------------------')*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_calendar_open_date is ' || TO_CHAR(C_CALENDAR_OPEN_DATE))*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_calendar_close_date is ' || TO_CHAR(C_CALENDAR_CLOSE_DATE))*/NULL;
        /*SRW.MESSAGE(003
                   ,'--------------------')*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_to_open_date is ' || C_TO_OPEN_DATE)*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_to_close_date is ' || C_TO_CLOSE_DATE)*/NULL;
        /*SRW.MESSAGE(003
                   ,'C_time_to_close_date is ' || C_TIME_TO_CLOSE_DATE)*/NULL;
      END IF;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        /*SRW.MESSAGE('224'
                   ,'ERROR. Period info brings back too many rows.  (TAX BOOK)')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE('225'
                   ,'ERROR. Period info brings back no rows.  (TAX BOOK)')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    SELECT
      MIN(L.PERIOD_COUNTER)
    INTO CP_LASTYR_BEGIN_PERIOD_COUNTER
    FROM
      FA_DEPRN_PERIODS P,
      FA_DEPRN_PERIODS L
    WHERE P.BOOK_TYPE_CODE = P_TAX_BOOK
      AND L.BOOK_TYPE_CODE = P_TAX_BOOK
      AND P.PERIOD_NAME = P_PERIOD_NAME
      AND L.FISCAL_YEAR = P.FISCAL_YEAR - 1;
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(014
                 ,'CP_lastyr_begin_period_counter is ' || CP_LASTYR_BEGIN_PERIOD_COUNTER)*/NULL;
    END IF;
    BEGIN
      SELECT
        MIN(PERIOD_COUNTER) CORPORATE_FROM_COUNTER,
        MIN(CALENDAR_PERIOD_OPEN_DATE) CORPORATE_CALENDAR_OPEN_DATE
      INTO C_CORP_FROM_COUNTER,C_CORP_CALENDAR_OPEN_DATE
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = C_DISTRIBUTION_SOURCE_BOOK
        AND FISCAL_YEAR = C_FROM_FISCAL_YEAR;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(004
                   ,'C_corp_from_counter is ' || TO_CHAR(C_CORP_FROM_COUNTER))*/NULL;
        /*SRW.MESSAGE(004
                   ,'C_corp_calendar_open_date is ' || TO_CHAR(C_CORP_CALENDAR_OPEN_DATE))*/NULL;
      END IF;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        /*SRW.MESSAGE('226'
                   ,'ERROR. Period info brings back too many rows. (CORP BOOK) - From Counter')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE('227'
                   ,'ERROR. Period info brings back no rows.  (CORP BOOK) - From Counter')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    BEGIN
      SELECT
        MAX(PERIOD_COUNTER) CORPORATE_TO_COUNTER,
        NVL(MAX(CALENDAR_PERIOD_CLOSE_DATE)
           ,SYSDATE) CORPORATE_CALENDAR_CLOSE_DATE
      INTO C_CORP_TO_COUNTER,C_CORP_CALENDAR_CLOSE_DATE
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = C_DISTRIBUTION_SOURCE_BOOK
        AND C_CALENDAR_CLOSE_DATE between CALENDAR_PERIOD_OPEN_DATE
        AND CALENDAR_PERIOD_CLOSE_DATE
        AND FISCAL_YEAR = C_FROM_FISCAL_YEAR;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(005
                   ,'C_corp_to_counter is ' || TO_CHAR(C_CORP_TO_COUNTER))*/NULL;
        /*SRW.MESSAGE(005
                   ,'C_corp_calendar_close_date is ' || TO_CHAR(C_CORP_CALENDAR_CLOSE_DATE))*/NULL;
      END IF;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        /*SRW.MESSAGE('228'
                   ,'ERROR. Period info brings back too many rows.  (CORP BOOK) - To Counter')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE('229'
                   ,'ERROR. Period info brings back no rows.  (CORP BOOK) - To Counter')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    BEGIN
      SELECT
        T.PERIOD_OPEN_DATE CORP_TO_OPEN_DATE,
        NVL(T.PERIOD_CLOSE_DATE
           ,C.LAST_DEPRN_RUN_DATE),
        T.PERIOD_CLOSE_DATE CORP_TIME_TO_CLOSE_DATE
      INTO C_CORP_TO_OPEN_DATE,C_CORP_TO_CLOSE_DATE,C_CORP_TIME_TO_CLOSE_DATE
      FROM
        FA_DEPRN_PERIODS T,
        FA_BOOK_CONTROLS C
      WHERE T.PERIOD_COUNTER = C_CORP_TO_COUNTER
        AND T.BOOK_TYPE_CODE = C_DISTRIBUTION_SOURCE_BOOK
        AND T.FISCAL_YEAR = C_FROM_FISCAL_YEAR
        AND C.BOOK_TYPE_CODE = T.BOOK_TYPE_CODE;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(006
                   ,'C_corp_time_to_close_date is ' || C_CORP_TIME_TO_CLOSE_DATE)*/NULL;
        /*SRW.MESSAGE(006
                   ,'C_corp_to_open_date is ' || C_CORP_TO_OPEN_DATE)*/NULL;
      END IF;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        /*SRW.MESSAGE('230'
                   ,'ERROR. Period info brings back too many rows.  (CORP BOOK) - Dates')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE('231'
                   ,'ERROR. Period info brings back no rows.  (CORP BOOK) - Dates')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    IF C_TIME_TO_CLOSE_DATE IS NULL THEN
      SELECT
        LAST_DEPRN_RUN_DATE
      INTO C_TIME_TO_CLOSE_DATE
      FROM
        FA_BOOK_CONTROLS
      WHERE BOOK_TYPE_CODE = P_TAX_BOOK;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(007
                   ,'C_time_to_close_date is ' || C_TIME_TO_CLOSE_DATE)*/NULL;
      END IF;
    END IF;
    IF C_CORP_TIME_TO_CLOSE_DATE IS NULL THEN
      SELECT
        LAST_DEPRN_RUN_DATE
      INTO C_CORP_TIME_TO_CLOSE_DATE
      FROM
        FA_BOOK_CONTROLS
      WHERE BOOK_TYPE_CODE = C_DISTRIBUTION_SOURCE_BOOK;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(008
                   ,'C_corp_time_to_close_date is ' || C_CORP_TIME_TO_CLOSE_DATE)*/NULL;
      END IF;
    END IF;
    SELECT
      PERIOD_CLOSE_DATE
    INTO CP_CLOSE_DATE
    FROM
      FA_DEPRN_PERIODS
    WHERE BOOK_TYPE_CODE = P_TAX_BOOK
      AND PERIOD_COUNTER = C_TO_COUNTER;
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(009
                 ,'CP_close_date is ' || CP_CLOSE_DATE)*/NULL;
    END IF;
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE('200'
                 ,'----- Summary of book time ranges ----')*/NULL;
      /*SRW.MESSAGE('201'
                 ,'Corp Calendar Open Date: ' || TO_CHAR(C_CORP_CALENDAR_OPEN_DATE))*/NULL;
      /*SRW.MESSAGE('202'
                 ,'Corp Calendar Close Date: ' || TO_CHAR(C_CORP_CALENDAR_CLOSE_DATE))*/NULL;
      /*SRW.MESSAGE('203'
                 ,'Corp To close date: ' || C_CORP_TO_CLOSE_DATE)*/NULL;
      /*SRW.MESSAGE('204'
                 ,'Corp To open date: ' || C_CORP_TO_OPEN_DATE)*/NULL;
      /*SRW.MESSAGE('205'
                 ,'Corp From Counter: ' || TO_CHAR(C_CORP_FROM_COUNTER))*/NULL;
      /*SRW.MESSAGE('206'
                 ,'Corp To Counter: ' || TO_CHAR(C_CORP_TO_COUNTER))*/NULL;
      /*SRW.MESSAGE('207'
                 ,'Tax Calendar Open Date: ' || TO_CHAR(C_CALENDAR_OPEN_DATE))*/NULL;
      /*SRW.MESSAGE('208'
                 ,'Tax Calendar Close Date: ' || TO_CHAR(C_CALENDAR_CLOSE_DATE))*/NULL;
      /*SRW.MESSAGE('209'
                 ,'Tax To Open Date: ' || C_TO_OPEN_DATE)*/NULL;
      /*SRW.MESSAGE('210'
                 ,'Tax To Close Date: ' || C_TO_CLOSE_DATE)*/NULL;
      /*SRW.MESSAGE('211'
                 ,'Tax From Counter: ' || TO_CHAR(C_FROM_COUNTER))*/NULL;
      /*SRW.MESSAGE('212'
                 ,'Tax To Counter: ' || TO_CHAR(C_TO_COUNTER))*/NULL;
      /*SRW.MESSAGE('213'
                 ,'C Time To Close Date: ' || C_TIME_TO_CLOSE_DATE)*/NULL;
    END IF;
    BEGIN
      SELECT
        FFS.FLEX_VALUE_SET_ID
      INTO C_ACCOUNT_FLEX_ID
      FROM
        FND_APPLICATION_VL FAP,
        FND_ID_FLEX_SEGMENTS_VL FFS,
        FND_ID_FLEX_STRUCTURES FIF,
        FND_SEGMENT_ATTRIBUTE_VALUES FSAV
      WHERE FAP.APPLICATION_SHORT_NAME = 'SQLGL'
        AND FFS.APPLICATION_ID = FAP.APPLICATION_ID
        AND FFS.ID_FLEX_CODE = 'GL#'
        AND FFS.ID_FLEX_NUM = C_ACCT_FLEX_STRUCT
        AND FIF.APPLICATION_ID = FAP.APPLICATION_ID
        AND FIF.ID_FLEX_CODE = FFS.ID_FLEX_CODE
        AND FIF.ID_FLEX_NUM = FFS.ID_FLEX_NUM
        AND FSAV.SEGMENT_ATTRIBUTE_TYPE = 'GL_ACCOUNT'
        AND FSAV.APPLICATION_ID = FAP.APPLICATION_ID
        AND FSAV.ID_FLEX_NUM = FFS.ID_FLEX_NUM
        AND FSAV.ID_FLEX_CODE = FFS.ID_FLEX_CODE
        AND FSAV.APPLICATION_COLUMN_NAME = FFS.APPLICATION_COLUMN_NAME
        AND FSAV.ATTRIBUTE_VALUE = 'Y';
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(010
                   ,'Account Flex Id is ' || TO_CHAR(C_ACCOUNT_FLEX_ID))*/NULL;
      END IF;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        /*SRW.MESSAGE('232'
                   ,'ERROR. GL Account Flex value selection brings back too many rows')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE('233'
                   ,'ERROR. GL Acccount Flex value selection brings back no rows')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    /*SRW.REFERENCE(C_CAT_FLEX_STRUCT)*/NULL;
    C_WHERE_CAT_FLEX := 'AND ' || C_WHERE_CAT_FLEX;
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(011
                 ,'C_where_cat_flex is ' || C_WHERE_CAT_FLEX)*/NULL;
    END IF;
    /*SRW.REFERENCE(C_CAT_FLEX_STRUCT)*/NULL;
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(012
                 ,'C_major_category is ' || C_MAJOR_CATEGORY)*/NULL;
    END IF;
    /*SRW.REFERENCE(C_CAT_FLEX_STRUCT)*/NULL;
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(013
                 ,'C_all_category is ' || C_ALL_CATEGORY)*/NULL;
    END IF;
    BEGIN
      SELECT
        USER_CONCURRENT_PROGRAM_NAME
      INTO CP_REPORT_NAME
      FROM
        FND_CONCURRENT_REQUESTS R,
        FND_CONCURRENT_PROGRAMS_VL P
      WHERE R.REQUEST_ID = P_CONC_REQUEST_ID
        AND R.CONCURRENT_PROGRAM_ID = P.CONCURRENT_PROGRAM_ID
        AND R.PROGRAM_APPLICATION_ID = P.APPLICATION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CP_REPORT_NAME := 'Finnish Deferred Depreciation Report';
    END;
    CP_PERIOD_NAME := P_PERIOD_NAME;
    CP_TAX_BOOK := P_TAX_BOOK;
    CP_DISTRIBUTION_CORP_BOOK := C_DISTRIBUTION_SOURCE_BOOK;
    CP_SOB_NAME := C_SOB_NAME;
    CP_FROM_FISCAL_YEAR := C_FROM_FISCAL_YEAR;
    CP_CURRENCY_CODE := C_CURRENCY_CODE;
    CP_CALENDAR_OPEN_DATE := C_CALENDAR_OPEN_DATE;
    CP_CALENDAR_CLOSE_DATE := C_CALENDAR_CLOSE_DATE;
    CP_REPORT_TYPE := UPPER(P_REPORT_TYPE);
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(666
                 ,'Rep Name is ' || CP_REPORT_NAME)*/NULL;
      /*SRW.MESSAGE(666
                 ,'Period name is ' || P_PERIOD_NAME || ' or ' || CP_PERIOD_NAME)*/NULL;
      /*SRW.MESSAGE(666
                 ,'Tax Book is ' || P_TAX_BOOK || ' or ' || CP_TAX_BOOK)*/NULL;
      /*SRW.MESSAGE(666
                 ,'SOB Name is ' || C_SOB_NAME || ' or ' || CP_SOB_NAME)*/NULL;
      /*SRW.MESSAGE(666
                 ,'Fiscal Year is ' || C_FROM_FISCAL_YEAR || ' or ' || CP_FROM_FISCAL_YEAR)*/NULL;
      /*SRW.MESSAGE(666
                 ,'Currency code is ' || C_CURRENCY_CODE || ' or ' || CP_CURRENCY_CODE)*/NULL;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_COST_ACCT_DESCFORMULA(COST_ACCOUNT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      OUT_STRING VARCHAR(240);
    BEGIN
      GET_THE_ACCT_DESC(COST_ACCOUNT
                       ,OUT_STRING);
      RETURN (OUT_STRING);
    END;
    RETURN NULL;
  END C_COST_ACCT_DESCFORMULA;

  FUNCTION CF_ASSET_CLOSE_NBVFORMULA(CF_ASS_INITIAL_NBV_ADJUSTED IN NUMBER
                                    ,CF_ASS_TAX_ADDITIONS IN NUMBER
                                    ,CS_ASS_TAX_RETIREMENT IN NUMBER
                                    ,A1_1 IN NUMBER
                                    ,CF_ASS_DEF_DP IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(CF_ASS_INITIAL_NBV_ADJUSTED
              ,0) + NVL(CF_ASS_TAX_ADDITIONS
              ,0) - NVL(CS_ASS_TAX_RETIREMENT
              ,0) - NVL(A1_1
              ,0) - NVL(CF_ASS_DEF_DP
              ,0));
  END CF_ASSET_CLOSE_NBVFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        BEGIN
          /*SRW.MESSAGE(100
                     ,'Foundation is not initialised')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END;
    END;
    IF (P_AS_NUM_LOW IS NOT NULL AND P_AS_NUM_HIGH IS NOT NULL) THEN
      C_ASSET_WHERE := 'and fad.asset_number between :P_AS_NUM_LOW and :P_AS_NUM_HIGH';
    END IF;
    IF (P_AS_NUM_LOW IS NULL AND P_AS_NUM_HIGH IS NULL) THEN
      C_ASSET_WHERE := 'and 1=1';
    END IF;
    IF (P_AS_NUM_LOW IS NULL AND P_AS_NUM_HIGH IS NOT NULL) THEN
      C_ASSET_WHERE := 'and fad.asset_number <= :P_AS_NUM_HIGH';
    END IF;
    IF (P_AS_NUM_LOW IS NOT NULL AND P_AS_NUM_HIGH IS NULL) THEN
      C_ASSET_WHERE := 'and fad.asset_number >= :P_AS_NUM_LOW';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  PROCEDURE GET_THE_ACCT_DESC(P_ACCOUNT IN VARCHAR2
                             ,P_DESCR OUT NOCOPY VARCHAR2) IS
  BEGIN
    SELECT
      FVS.DESCRIPTION
    INTO P_DESCR
    FROM
      FND_FLEX_VALUES_VL FVS
    WHERE FVS.FLEX_VALUE_SET_ID = C_ACCOUNT_FLEX_ID
      AND FVS.FLEX_VALUE = P_ACCOUNT;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('231'
                 ,'ERROR. Selecting account segment description')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END GET_THE_ACCT_DESC;

  FUNCTION CF_F_CAT_CORP_GAINFORMULA(CS_F_CAT_CORP_SALES_PROCEEDS IN NUMBER
                                    ,CS_F_CAT_RETIREMENT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_SALES_PROCEEDS - CS_F_CAT_RETIREMENT);
  END CF_F_CAT_CORP_GAINFORMULA;

  FUNCTION CF_F_ASSET_COST_ENDFORMULA(CS_F_CAT_CORP_COST IN NUMBER
                                     ,CS_F_CAT_CORP_ADDITION IN NUMBER
                                     ,CS_F_CAT_CORP_RETIREMENT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_COST + CS_F_CAT_CORP_ADDITION - CS_F_CAT_CORP_RETIREMENT);
  END CF_F_ASSET_COST_ENDFORMULA;

  FUNCTION CF_F_CAT_CORP_DEPRN_RESERVEFOR(CS_F_CAT_CORP_DEPRN_RESERVE IN NUMBER
                                         ,CF_F_CAT_CP_YTD IN NUMBER
                                         ,CS_F_CAT_CORP_RET_RESERVE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_DEPRN_RESERVE + CF_F_CAT_CP_YTD - CS_F_CAT_CORP_RET_RESERVE);
  END CF_F_CAT_CORP_DEPRN_RESERVEFOR;

  FUNCTION CF_F_CAT_NBV_STARTFORMULA(CS_F_CAT_CORP_COST IN NUMBER
                                    ,CS_F_CAT_CORP_DEPRN_RESERVE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_COST - CS_F_CAT_CORP_DEPRN_RESERVE);
  END CF_F_CAT_NBV_STARTFORMULA;

  FUNCTION CF_F_CAT_NBV_ENDFORMULA(CF_F_CAT_ASSET_COST_END IN NUMBER
                                  ,CF_F_CAT_CORP_DEPRN_RESERVE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_F_CAT_ASSET_COST_END - CF_F_CAT_CORP_DEPRN_RESERVE);
  END CF_F_CAT_NBV_ENDFORMULA;

  FUNCTION CF_F_CAT_CORP_DEPN_RESERVEFORM(CS_F_CAT_TAX_DEPRN_RESERVE IN NUMBER
                                         ,CS_F_CAT_CORP_DEPRN_RESERVE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_TAX_DEPRN_RESERVE - CS_F_CAT_CORP_DEPRN_RESERVE);
  END CF_F_CAT_CORP_DEPN_RESERVEFORM;

  FUNCTION CF_F_CAT_DEF_DEPRN_YTDFORMULA(CF_F_CAT_TAX_YTD_DEP IN NUMBER
                                        ,CF_F_CAT_CP_YTD IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_F_CAT_TAX_YTD_DEP - CF_F_CAT_CP_YTD);
  END CF_F_CAT_DEF_DEPRN_YTDFORMULA;

  FUNCTION CF_F_CAT_DEFERRED_DEPRNFORMULA(CF_F_CAT_CORP_DEPN_RESERVE IN NUMBER
                                         ,CF_F_CAT_DEF_DEPRN_YTD IN NUMBER
                                         ,CS_F_CAT_CORP_RET_RESERVE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_F_CAT_CORP_DEPN_RESERVE + CF_F_CAT_DEF_DEPRN_YTD + CS_F_CAT_CORP_RET_RESERVE);
  END CF_F_CAT_DEFERRED_DEPRNFORMULA;

  FUNCTION CF_F_CAT_RETIREMENTSFORMULA(CS_F_CAT_CORP_SALES_PROCEEDS IN NUMBER
                                      ,CS_F_CAT_CORP_NBV_RETIRED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_SALES_PROCEEDS - CS_F_CAT_CORP_NBV_RETIRED);
  END CF_F_CAT_RETIREMENTSFORMULA;

  FUNCTION CF_ASS_TAX_ADDITIONSFORMULA(CS_ASS_TAX_ADDITIONS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ASS_TAX_ADDITIONS);
  END CF_ASS_TAX_ADDITIONSFORMULA;

  FUNCTION CF_ASS_CORP_ADDITIONSFORMULA(CS_ASS_CORP_ADDITIONS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ASS_CORP_ADDITIONS);
  END CF_ASS_CORP_ADDITIONSFORMULA;

  FUNCTION CF_ASS_DEF_DPFORMULA(CS_ASS_TAX_DEPRN IN NUMBER
                               ,A1_1 IN NUMBER
                               ,CS_ASS_THIS_FISADJ IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ASS_TAX_DEPRN - A1_1 + CS_ASS_THIS_FISADJ);
  END CF_ASS_DEF_DPFORMULA;

  FUNCTION CF_F_CAT_CP_YTDFORMULA(CS_F_CAT_CORP_YTD_DEPRN IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_YTD_DEPRN);
  END CF_F_CAT_CP_YTDFORMULA;

  FUNCTION CF_F_CAT_TAX_YTD_DEPFORMULA(CS_F_CAT_TAX_YTD_DEPRN IN NUMBER
                                      ,CS_F_CAT_TAX_RESERVE_RETIRED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_TAX_YTD_DEPRN + CS_F_CAT_TAX_RESERVE_RETIRED);
  END CF_F_CAT_TAX_YTD_DEPFORMULA;

  FUNCTION CF_F_CAT_RETIRE_DIFFFORMULA(CS_F_CAT_CORP_RET_RESERVE IN NUMBER
                                      ,CS_F_CAT_TAX_RESERVE_RETIRED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_F_CAT_CORP_RET_RESERVE - CS_F_CAT_TAX_RESERVE_RETIRED);
  END CF_F_CAT_RETIRE_DIFFFORMULA;

  FUNCTION CF_1FORMULA0029(CF_F_CAT_CORP_DEPN_RESERVE IN NUMBER
                          ,CS_CAT_DEF_DEPRN IN NUMBER
                          ,CF_F_CAT_RETIRE_DIFF IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_F_CAT_CORP_DEPN_RESERVE + CS_CAT_DEF_DEPRN + CF_F_CAT_RETIRE_DIFF);
  END CF_1FORMULA0029;

  FUNCTION CF_ASS_INITIAL_NBV_ADJUSTEDFOR(ASSET_NUMBER IN VARCHAR2
                                         ,CAT_ID IN NUMBER
                                         ,ENABLED_FLAG IN VARCHAR2
                                         ,INITIAL_NBV IN NUMBER
                                         ,CS_ASS_FISCAL_ADJUSTMENT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF P_DEBUG_SWITCH = 'Y' THEN
      /*SRW.MESSAGE(100
                 ,'In function CF_ASS_INITIAL_NBV_ADJUSTED.')*/NULL;
      /*SRW.MESSAGE(101
                 ,'Asset Number ' || ASSET_NUMBER)*/NULL;
      /*SRW.MESSAGE(102
                 ,'Asset Category: ' || CAT_ID)*/NULL;
      /*SRW.MESSAGE(103
                 ,'Enabled flag: ' || ENABLED_FLAG)*/NULL;
      /*SRW.MESSAGE(104
                 ,'Initial NBV: ' || INITIAL_NBV)*/NULL;
      /*SRW.MESSAGE(105
                 ,'CS Asset Fiscal Adjustment: ' || CS_ASS_FISCAL_ADJUSTMENT)*/NULL;
    END IF;
    RETURN (INITIAL_NBV - NVL(CS_ASS_FISCAL_ADJUSTMENT
              ,0));
  END CF_ASS_INITIAL_NBV_ADJUSTEDFOR;

  FUNCTION CF_ASS_TAX_DP_RESERVE_ADJUSTED(TAX_DP_RESERVE IN NUMBER
                                         ,CS_ASS_FISCAL_ADJUSTMENT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (TAX_DP_RESERVE + NVL(CS_ASS_FISCAL_ADJUSTMENT
              ,0));
  END CF_ASS_TAX_DP_RESERVE_ADJUSTED;

  FUNCTION CF_REPORT_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_DATE.DATE_TO_CHARDT(C_REPORT_DATE));
  END CF_REPORT_DATEFORMULA;

  FUNCTION STRUCT_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN STRUCT_NUM;
  END STRUCT_NUM_P;

  FUNCTION SET_OF_BOOKS_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SET_OF_BOOKS_NAME;
  END SET_OF_BOOKS_NAME_P;

  FUNCTION SELECT_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ALL;
  END SELECT_ALL_P;

  FUNCTION WHERE_FLEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_FLEX;
  END WHERE_FLEX_P;

  FUNCTION ORDERBY_ACCT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDERBY_ACCT;
  END ORDERBY_ACCT_P;

  FUNCTION PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN PRECISION;
  END PRECISION_P;

  FUNCTION FUNC_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FUNC_CURRENCY;
  END FUNC_CURRENCY_P;

  FUNCTION C_BOOK_CLASS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BOOK_CLASS;
  END C_BOOK_CLASS_P;

  FUNCTION C_ACCOUNT_FLEX_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_ACCOUNT_FLEX_ID;
  END C_ACCOUNT_FLEX_ID_P;

  FUNCTION CP_CLOSE_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_CLOSE_DATE;
  END CP_CLOSE_DATE_P;

  FUNCTION CP_LASTYR_BEGIN_PERIOD_COUNTE RETURN NUMBER IS
  BEGIN
    RETURN CP_LASTYR_BEGIN_PERIOD_COUNTER;
  END CP_LASTYR_BEGIN_PERIOD_COUNTE;

  FUNCTION CP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_NAME;
  END CP_REPORT_NAME_P;

  FUNCTION CP_FROM_FISCAL_YEAR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FROM_FISCAL_YEAR;
  END CP_FROM_FISCAL_YEAR_P;

  FUNCTION CP_PERIOD_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PERIOD_NAME;
  END CP_PERIOD_NAME_P;

  FUNCTION CP_TAX_BOOK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TAX_BOOK;
  END CP_TAX_BOOK_P;

  FUNCTION CP_DISTRIBUTION_CORP_BOOK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DISTRIBUTION_CORP_BOOK;
  END CP_DISTRIBUTION_CORP_BOOK_P;

  FUNCTION CP_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CURRENCY_CODE;
  END CP_CURRENCY_CODE_P;

  FUNCTION CP_SOB_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SOB_NAME;
  END CP_SOB_NAME_P;

  FUNCTION CP_CALENDAR_OPEN_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CALENDAR_OPEN_DATE;
  END CP_CALENDAR_OPEN_DATE_P;

  FUNCTION CP_CALENDAR_CLOSE_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CALENDAR_CLOSE_DATE;
  END CP_CALENDAR_CLOSE_DATE_P;

  FUNCTION CP_REPORT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_TYPE;
  END CP_REPORT_TYPE_P;

END JE_JEFIASDR_XMLP_PKG;




/
