--------------------------------------------------------
--  DDL for Package Body CUG_TSK_TYP_ATTR_MAPS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CUG_TSK_TYP_ATTR_MAPS_PKG" as
/* $Header: CUGTSKTB.pls 115.7 2004/03/29 21:46:50 aneemuch ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_TSK_TYP_ATTR_MAP_ID in NUMBER,
  X_END_DATE_ACTIVE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_START_DATE_ACTIVE in DATE,
  X_TASK_TYPE_ATTRIBUTE_CODE in VARCHAR2,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_ATTR_MANDATORY_FLAG in VARCHAR2,
  X_TASK_ATTR_DISPLAYED_FLAG in VARCHAR2,
  X_TASK_ATTRIBUTE_LIST_NAME in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_TASK_ATTR_DEFAULT_VALUE in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from CUG_TSK_TYP_ATTR_MAPS_B
    where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID
    ;
begin
  insert into CUG_TSK_TYP_ATTR_MAPS_B (
    END_DATE_ACTIVE,
    TSK_TYP_ATTR_MAP_ID,
    OBJECT_VERSION_NUMBER,
    START_DATE_ACTIVE,
    TASK_TYPE_ATTRIBUTE_CODE,
    TASK_TYPE_ID,
    TASK_ATTR_MANDATORY_FLAG,
    TASK_ATTR_DISPLAYED_FLAG,
    TASK_ATTRIBUTE_LIST_NAME,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE_CATEGORY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_END_DATE_ACTIVE,
    X_TSK_TYP_ATTR_MAP_ID,
    X_OBJECT_VERSION_NUMBER,
    X_START_DATE_ACTIVE,
    X_TASK_TYPE_ATTRIBUTE_CODE,
    X_TASK_TYPE_ID,
    X_TASK_ATTR_MANDATORY_FLAG,
    X_TASK_ATTR_DISPLAYED_FLAG,
    X_TASK_ATTRIBUTE_LIST_NAME,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_ATTRIBUTE_CATEGORY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into CUG_TSK_TYP_ATTR_MAPS_TL (
    TSK_TYP_ATTR_MAP_ID,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LAST_UPDATE_DATE,
    TASK_ATTR_DEFAULT_VALUE,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_TSK_TYP_ATTR_MAP_ID,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_LAST_UPDATE_DATE,
    X_TASK_ATTR_DEFAULT_VALUE,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from CUG_TSK_TYP_ATTR_MAPS_TL T
    where T.TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_TSK_TYP_ATTR_MAP_ID in NUMBER,
  X_END_DATE_ACTIVE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_START_DATE_ACTIVE in DATE,
  X_TASK_TYPE_ATTRIBUTE_CODE in VARCHAR2,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_ATTR_MANDATORY_FLAG in VARCHAR2,
  X_TASK_ATTR_DISPLAYED_FLAG in VARCHAR2,
  X_TASK_ATTRIBUTE_LIST_NAME in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_TASK_ATTR_DEFAULT_VALUE in VARCHAR2
) is
  cursor c is select
      END_DATE_ACTIVE,
      OBJECT_VERSION_NUMBER,
      START_DATE_ACTIVE,
      TASK_TYPE_ATTRIBUTE_CODE,
      TASK_TYPE_ID,
      TASK_ATTR_MANDATORY_FLAG,
      TASK_ATTR_DISPLAYED_FLAG,
      TASK_ATTRIBUTE_LIST_NAME,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      ATTRIBUTE_CATEGORY
    from CUG_TSK_TYP_ATTR_MAPS_B
    where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID
    for update of TSK_TYP_ATTR_MAP_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      TASK_ATTR_DEFAULT_VALUE,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from CUG_TSK_TYP_ATTR_MAPS_TL
    where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of TSK_TYP_ATTR_MAP_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.END_DATE_ACTIVE = X_END_DATE_ACTIVE)
           OR ((recinfo.END_DATE_ACTIVE is null) AND (X_END_DATE_ACTIVE is null)))
      AND ((recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
           OR ((recinfo.OBJECT_VERSION_NUMBER is null) AND (X_OBJECT_VERSION_NUMBER is null)))
      AND ((recinfo.START_DATE_ACTIVE = X_START_DATE_ACTIVE)
           OR ((recinfo.START_DATE_ACTIVE is null) AND (X_START_DATE_ACTIVE is null)))
      AND (recinfo.TASK_TYPE_ATTRIBUTE_CODE = X_TASK_TYPE_ATTRIBUTE_CODE)
      AND (recinfo.TASK_TYPE_ID = X_TASK_TYPE_ID)
      AND ((recinfo.TASK_ATTR_MANDATORY_FLAG = X_TASK_ATTR_MANDATORY_FLAG)
           OR ((recinfo.TASK_ATTR_MANDATORY_FLAG is null) AND (X_TASK_ATTR_MANDATORY_FLAG is null)))
      AND ((recinfo.TASK_ATTR_DISPLAYED_FLAG = X_TASK_ATTR_DISPLAYED_FLAG)
           OR ((recinfo.TASK_ATTR_DISPLAYED_FLAG is null) AND (X_TASK_ATTR_DISPLAYED_FLAG is null)))
      AND ((recinfo.TASK_ATTRIBUTE_LIST_NAME = X_TASK_ATTRIBUTE_LIST_NAME)
           OR ((recinfo.TASK_ATTRIBUTE_LIST_NAME is null) AND (X_TASK_ATTRIBUTE_LIST_NAME is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.TASK_ATTR_DEFAULT_VALUE = X_TASK_ATTR_DEFAULT_VALUE)
               OR ((tlinfo.TASK_ATTR_DEFAULT_VALUE is null) AND (X_TASK_ATTR_DEFAULT_VALUE is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_TSK_TYP_ATTR_MAP_ID in NUMBER,
  X_END_DATE_ACTIVE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_START_DATE_ACTIVE in DATE,
  X_TASK_TYPE_ATTRIBUTE_CODE in VARCHAR2,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_ATTR_MANDATORY_FLAG in VARCHAR2,
  X_TASK_ATTR_DISPLAYED_FLAG in VARCHAR2,
  X_TASK_ATTRIBUTE_LIST_NAME in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_TASK_ATTR_DEFAULT_VALUE in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update CUG_TSK_TYP_ATTR_MAPS_B set
    END_DATE_ACTIVE = X_END_DATE_ACTIVE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    START_DATE_ACTIVE = X_START_DATE_ACTIVE,
    TASK_TYPE_ATTRIBUTE_CODE = X_TASK_TYPE_ATTRIBUTE_CODE,
    TASK_TYPE_ID = X_TASK_TYPE_ID,
    TASK_ATTR_MANDATORY_FLAG = X_TASK_ATTR_MANDATORY_FLAG,
    TASK_ATTR_DISPLAYED_FLAG = X_TASK_ATTR_DISPLAYED_FLAG,
    TASK_ATTRIBUTE_LIST_NAME = X_TASK_ATTRIBUTE_LIST_NAME,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update CUG_TSK_TYP_ATTR_MAPS_TL set
    TASK_ATTR_DEFAULT_VALUE = X_TASK_ATTR_DEFAULT_VALUE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_TSK_TYP_ATTR_MAP_ID in NUMBER
) is
begin
  delete from CUG_TSK_TYP_ATTR_MAPS_TL
  where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from CUG_TSK_TYP_ATTR_MAPS_B
  where TSK_TYP_ATTR_MAP_ID = X_TSK_TYP_ATTR_MAP_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;
procedure LOAD_ROW (
  X_TSK_TYP_ATTR_MAP_ID in NUMBER,
  X_END_DATE_ACTIVE in DATE,
  X_START_DATE_ACTIVE in DATE,
  X_TASK_TYPE_ATTRIBUTE_CODE in VARCHAR2,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_ATTR_MANDATORY_FLAG in VARCHAR2,
  X_TASK_ATTR_DISPLAYED_FLAG in VARCHAR2,
  X_TASK_ATTRIBUTE_LIST_NAME in VARCHAR2,
  X_TASK_ATTR_DEFAULT_VALUE in VARCHAR2,
  X_CREATION_DATE             IN   VARCHAR2,
  X_CREATED_BY                IN   NUMBER,
  X_LAST_UPDATE_DATE          IN   VARCHAR2,
  X_LAST_UPDATED_BY           IN   NUMBER,
  X_LAST_UPDATE_LOGIN         IN   NUMBER,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
	X_OWNER IN VARCHAR2 ) IS

BEGIN
DECLARE
     user_id            NUMBER := 0;
     row_id             VARCHAR2(64);

  BEGIN

     IF (X_OWNER = 'SEED') THEN
        user_id := 1;
     END IF;
	CUG_TSK_TYP_ATTR_MAPS_PKG.UPDATE_ROW (
	  X_TSK_TYP_ATTR_MAP_ID => X_TSK_TYP_ATTR_MAP_ID ,
	  X_END_DATE_ACTIVE => X_END_DATE_ACTIVE ,
	  X_START_DATE_ACTIVE => X_START_DATE_ACTIVE ,
	  X_TASK_TYPE_ATTRIBUTE_CODE =>X_TASK_TYPE_ATTRIBUTE_CODE ,
	  X_TASK_TYPE_ID => X_TASK_TYPE_ID ,
	  X_TASK_ATTR_MANDATORY_FLAG => X_TASK_ATTR_MANDATORY_FLAG ,
	  X_TASK_ATTR_DISPLAYED_FLAG =>  X_TASK_ATTR_DISPLAYED_FLAG,
	  X_TASK_ATTRIBUTE_LIST_NAME =>X_TASK_ATTRIBUTE_LIST_NAME ,
	  X_TASK_ATTR_DEFAULT_VALUE =>X_TASK_ATTR_DEFAULT_VALUE ,
	  X_ATTRIBUTE1 =>X_ATTRIBUTE1 ,
	  X_ATTRIBUTE2 =>X_ATTRIBUTE2,
	  X_ATTRIBUTE3 =>X_ATTRIBUTE3 ,
	  X_ATTRIBUTE4 =>X_ATTRIBUTE4 ,
	  X_ATTRIBUTE5 =>X_ATTRIBUTE5 ,
	  X_ATTRIBUTE6 =>X_ATTRIBUTE6 ,
	  X_ATTRIBUTE7 =>X_ATTRIBUTE7 ,
	  X_ATTRIBUTE8 =>X_ATTRIBUTE8 ,
	  X_ATTRIBUTE9 =>X_ATTRIBUTE9 ,
	  X_ATTRIBUTE10 =>X_ATTRIBUTE10 ,
	  X_ATTRIBUTE11 =>X_ATTRIBUTE11 ,
	  X_ATTRIBUTE12 =>X_ATTRIBUTE12 ,
	  X_ATTRIBUTE13 =>X_ATTRIBUTE13 ,
	  X_ATTRIBUTE14 =>X_ATTRIBUTE14 ,
	  X_ATTRIBUTE15 =>X_ATTRIBUTE15 ,
	X_ATTRIBUTE_CATEGORY =>X_ATTRIBUTE_CATEGORY ,
	X_OBJECT_VERSION_NUMBER  => null,
   	X_LAST_UPDATE_DATE =>  nvl(to_date(x_last_update_date, 'DD-MM-YYYY'), sysdate),
          X_LAST_UPDATED_BY  => user_id  ,
          X_LAST_UPDATE_LOGIN  => 0);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			CUG_TSK_TYP_ATTR_MAPS_PKG.INSERT_ROW (
		X_ROWID  => row_id,
		X_TSK_TYP_ATTR_MAP_ID => X_TSK_TYP_ATTR_MAP_ID ,
		X_END_DATE_ACTIVE => X_END_DATE_ACTIVE ,
		X_START_DATE_ACTIVE => X_START_DATE_ACTIVE ,
		X_TASK_TYPE_ATTRIBUTE_CODE => X_TASK_TYPE_ATTRIBUTE_CODE ,
		X_TASK_TYPE_ID => X_TASK_TYPE_ID ,
		X_TASK_ATTR_MANDATORY_FLAG => X_TASK_ATTR_MANDATORY_FLAG ,
		X_TASK_ATTR_DISPLAYED_FLAG => X_TASK_ATTR_DISPLAYED_FLAG,
		X_TASK_ATTRIBUTE_LIST_NAME => X_TASK_ATTRIBUTE_LIST_NAME ,
		X_ATTRIBUTE1 =>X_ATTRIBUTE1 ,
		X_ATTRIBUTE2 =>X_ATTRIBUTE2,
		X_ATTRIBUTE3 =>X_ATTRIBUTE3 ,
		X_ATTRIBUTE4 =>X_ATTRIBUTE4 ,
		X_ATTRIBUTE5 =>X_ATTRIBUTE5 ,
		X_ATTRIBUTE6 =>X_ATTRIBUTE6 ,
		X_ATTRIBUTE7 =>X_ATTRIBUTE7 ,
		X_ATTRIBUTE8 =>X_ATTRIBUTE8 ,
		X_ATTRIBUTE9 =>X_ATTRIBUTE9 ,
		X_ATTRIBUTE10 =>X_ATTRIBUTE10 ,
		X_ATTRIBUTE11 =>X_ATTRIBUTE11 ,
		X_ATTRIBUTE12 =>X_ATTRIBUTE12 ,
		X_ATTRIBUTE13 =>X_ATTRIBUTE13 ,
		X_ATTRIBUTE14 =>X_ATTRIBUTE14 ,
		X_ATTRIBUTE15 =>X_ATTRIBUTE15 ,
		X_ATTRIBUTE_CATEGORY =>X_ATTRIBUTE_CATEGORY ,
		X_OBJECT_VERSION_NUMBER  => null,
		X_TASK_ATTR_DEFAULT_VALUE => X_TASK_ATTR_DEFAULT_VALUE ,
		X_CREATION_DATE =>  nvl(to_date(x_creation_date, 'DD-MM-YYYY'), sysdate),
		X_CREATED_BY => user_id,
		X_LAST_UPDATE_DATE =>  nvl(to_date(x_last_update_date, 'DD-MM-YYYY'), sysdate),
		X_LAST_UPDATED_BY => user_id,
		X_LAST_UPDATE_LOGIN => 0);
	END;
END LOAD_ROW;


 PROCEDURE TRANSLATE_ROW (
  X_TSK_TYP_ATTR_MAP_ID in NUMBER,
  X_TASK_ATTR_DEFAULT_VALUE in VARCHAR2,
   X_OWNER in VARCHAR2) IS
BEGIN
	UPDATE CUG_TSK_TYP_ATTR_MAPS_TL
	SET TASK_ATTR_DEFAULT_VALUE = X_TASK_ATTR_DEFAULT_VALUE,
	source_lang = userenv('LANG'),
        last_update_date = sysdate,
        last_updated_by = decode(X_OWNER, 'SEED', 1, 0),
        last_update_login = 0
    where tsk_typ_attr_map_id   = X_TSK_TYP_ATTR_MAP_ID
    and   userenv('LANG') in (language, source_lang);

END TRANSLATE_ROW;


procedure ADD_LANGUAGE
is
begin
  delete from CUG_TSK_TYP_ATTR_MAPS_TL T
  where not exists
    (select NULL
    from CUG_TSK_TYP_ATTR_MAPS_B B
    where B.TSK_TYP_ATTR_MAP_ID = T.TSK_TYP_ATTR_MAP_ID
    );

  update CUG_TSK_TYP_ATTR_MAPS_TL T set (
      TASK_ATTR_DEFAULT_VALUE
    ) = (select
      B.TASK_ATTR_DEFAULT_VALUE
    from CUG_TSK_TYP_ATTR_MAPS_TL B
    where B.TSK_TYP_ATTR_MAP_ID = T.TSK_TYP_ATTR_MAP_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.TSK_TYP_ATTR_MAP_ID,
      T.LANGUAGE
  ) in (select
      SUBT.TSK_TYP_ATTR_MAP_ID,
      SUBT.LANGUAGE
    from CUG_TSK_TYP_ATTR_MAPS_TL SUBB, CUG_TSK_TYP_ATTR_MAPS_TL SUBT
    where SUBB.TSK_TYP_ATTR_MAP_ID = SUBT.TSK_TYP_ATTR_MAP_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.TASK_ATTR_DEFAULT_VALUE <> SUBT.TASK_ATTR_DEFAULT_VALUE
      or (SUBB.TASK_ATTR_DEFAULT_VALUE is null and SUBT.TASK_ATTR_DEFAULT_VALUE is not null)
      or (SUBB.TASK_ATTR_DEFAULT_VALUE is not null and SUBT.TASK_ATTR_DEFAULT_VALUE is null)
  ));

  insert into CUG_TSK_TYP_ATTR_MAPS_TL (
    TSK_TYP_ATTR_MAP_ID,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LAST_UPDATE_DATE,
    TASK_ATTR_DEFAULT_VALUE,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.TSK_TYP_ATTR_MAP_ID,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.LAST_UPDATE_DATE,
    B.TASK_ATTR_DEFAULT_VALUE,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from CUG_TSK_TYP_ATTR_MAPS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from CUG_TSK_TYP_ATTR_MAPS_TL T
    where T.TSK_TYP_ATTR_MAP_ID = B.TSK_TYP_ATTR_MAP_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end CUG_TSK_TYP_ATTR_MAPS_PKG;

/
