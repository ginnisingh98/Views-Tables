--------------------------------------------------------
--  DDL for Package Body CSP_PRODUCT_POPULATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CSP_PRODUCT_POPULATIONS_PKG" as
/* $Header: csptprpb.pls 115.3 2002/11/26 07:36:10 hhaugeru noship $ */
-- Start of Comments
-- Package name     : CSP_PRODUCT_POPULATIONS_PKG
-- Purpose          :
-- History          :
-- NOTE             :
-- End of Comments

G_PKG_NAME CONSTANT VARCHAR2(30):= 'CSP_PRODUCT_POPULATIONS_PKG';
G_FILE_NAME CONSTANT VARCHAR2(12) := 'csptprpb.pls';
PROCEDURE Insert_Row(
          px_PRODUCT_POPULATION_ID   IN OUT NOCOPY NUMBER
         ,p_PLANNING_PARAMETERS_ID    NUMBER
         ,p_PRODUCT_ID    NUMBER
         ,p_CURRENT_POPULATION    NUMBER
         ,p_POPULATION_CHANGE    NUMBER
         ,p_LAST_UPDATE_DATE    DATE
         ,p_LAST_UPDATED_BY    NUMBER
         ,p_CREATION_DATE    DATE
         ,p_CREATED_BY    NUMBER
         ,p_LAST_UPDATE_LOGIN    NUMBER
)
 IS
   CURSOR C2 IS SELECT CSP_PRODUCT_POPULATIONS_S1.nextval FROM sys.dual;
BEGIN
   If (px_PRODUCT_POPULATION_ID IS NULL) OR (px_PRODUCT_POPULATION_ID = FND_API.G_MISS_NUM) then
       OPEN C2;
       FETCH C2 INTO px_PRODUCT_POPULATION_ID;
       CLOSE C2;
   End If;
   INSERT INTO CSP_PRODUCT_POPULATIONS(
           PRODUCT_POPULATION_ID
          ,PLANNING_PARAMETERS_ID
          ,PRODUCT_ID
          ,CURRENT_POPULATION
          ,POPULATION_CHANGE
          ,LAST_UPDATE_DATE
          ,LAST_UPDATED_BY
          ,CREATION_DATE
          ,CREATED_BY
          ,LAST_UPDATE_LOGIN
          ) VALUES (
           px_PRODUCT_POPULATION_ID
          ,decode( p_PLANNING_PARAMETERS_ID, FND_API.G_MISS_NUM, NULL, p_PLANNING_PARAMETERS_ID)
          ,decode( p_PRODUCT_ID, FND_API.G_MISS_NUM, NULL, p_PRODUCT_ID)
          ,decode( p_CURRENT_POPULATION, FND_API.G_MISS_NUM, NULL, p_CURRENT_POPULATION)
          ,decode( p_POPULATION_CHANGE, FND_API.G_MISS_NUM, NULL, p_POPULATION_CHANGE)
          ,decode( p_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), p_LAST_UPDATE_DATE)
          ,decode( p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATED_BY)
          ,decode( p_CREATION_DATE, FND_API.G_MISS_DATE, TO_DATE(NULL), p_CREATION_DATE)
          ,decode( p_CREATED_BY, FND_API.G_MISS_NUM, NULL, p_CREATED_BY)
          ,decode( p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATE_LOGIN)
);
End Insert_Row;
PROCEDURE Update_Row(
          p_PRODUCT_POPULATION_ID    NUMBER
         ,p_PLANNING_PARAMETERS_ID    NUMBER
         ,p_PRODUCT_ID    NUMBER
         ,p_CURRENT_POPULATION    NUMBER
         ,p_POPULATION_CHANGE    NUMBER
         ,p_LAST_UPDATE_DATE    DATE
         ,p_LAST_UPDATED_BY    NUMBER
         ,p_CREATION_DATE    DATE
         ,p_CREATED_BY    NUMBER
         ,p_LAST_UPDATE_LOGIN    NUMBER
)
IS
BEGIN
    Update CSP_PRODUCT_POPULATIONS
    SET
        PLANNING_PARAMETERS_ID = decode( p_PLANNING_PARAMETERS_ID, FND_API.G_MISS_NUM, PLANNING_PARAMETERS_ID, p_PLANNING_PARAMETERS_ID)
       ,PRODUCT_ID = decode( p_PRODUCT_ID, FND_API.G_MISS_NUM, PRODUCT_ID, p_PRODUCT_ID)
       ,CURRENT_POPULATION = decode( p_CURRENT_POPULATION, FND_API.G_MISS_NUM, CURRENT_POPULATION, p_CURRENT_POPULATION)
       ,POPULATION_CHANGE = decode( p_POPULATION_CHANGE, FND_API.G_MISS_NUM, POPULATION_CHANGE, p_POPULATION_CHANGE)
       ,LAST_UPDATE_DATE = decode( p_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, LAST_UPDATE_DATE, p_LAST_UPDATE_DATE)
       ,LAST_UPDATED_BY = decode( p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, LAST_UPDATED_BY, p_LAST_UPDATED_BY)
       ,CREATION_DATE = decode( p_CREATION_DATE, FND_API.G_MISS_DATE, CREATION_DATE, p_CREATION_DATE)
       ,CREATED_BY = decode( p_CREATED_BY, FND_API.G_MISS_NUM, CREATED_BY, p_CREATED_BY)
       ,LAST_UPDATE_LOGIN = decode( p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, LAST_UPDATE_LOGIN, p_LAST_UPDATE_LOGIN)
    where PRODUCT_POPULATION_ID = p_PRODUCT_POPULATION_ID;
    If (SQL%NOTFOUND) then
        RAISE NO_DATA_FOUND;
    End If;
END Update_Row;
PROCEDURE Delete_Row(
    p_PRODUCT_POPULATION_ID  NUMBER)
IS
BEGIN
    DELETE FROM CSP_PRODUCT_POPULATIONS
    WHERE PRODUCT_POPULATION_ID = p_PRODUCT_POPULATION_ID;
    If (SQL%NOTFOUND) then
        RAISE NO_DATA_FOUND;
    End If;
END Delete_Row;
PROCEDURE Lock_Row(
          p_PRODUCT_POPULATION_ID    NUMBER
         ,p_PLANNING_PARAMETERS_ID    NUMBER
         ,p_PRODUCT_ID    NUMBER
         ,p_CURRENT_POPULATION    NUMBER
         ,p_POPULATION_CHANGE    NUMBER
         ,p_LAST_UPDATE_DATE    DATE
         ,p_LAST_UPDATED_BY    NUMBER
         ,p_CREATION_DATE    DATE
         ,p_CREATED_BY    NUMBER
         ,p_LAST_UPDATE_LOGIN    NUMBER
)
 IS
   CURSOR C IS
       SELECT *
       FROM CSP_PRODUCT_POPULATIONS
       WHERE PRODUCT_POPULATION_ID =  p_PRODUCT_POPULATION_ID
       FOR UPDATE of PRODUCT_POPULATION_ID NOWAIT;
   Recinfo C%ROWTYPE;
BEGIN
    OPEN C;
    FETCH C INTO Recinfo;
    If (C%NOTFOUND) then
        CLOSE C;
        FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
        APP_EXCEPTION.RAISE_EXCEPTION;
    End If;
    CLOSE C;
    if (
           (      Recinfo.PRODUCT_POPULATION_ID = p_PRODUCT_POPULATION_ID)
       AND (    ( Recinfo.PLANNING_PARAMETERS_ID = p_PLANNING_PARAMETERS_ID)
            OR (    ( Recinfo.PLANNING_PARAMETERS_ID IS NULL )
                AND (  p_PLANNING_PARAMETERS_ID IS NULL )))
       AND (    ( Recinfo.PRODUCT_ID = p_PRODUCT_ID)
            OR (    ( Recinfo.PRODUCT_ID IS NULL )
                AND (  p_PRODUCT_ID IS NULL )))
       AND (    ( Recinfo.CURRENT_POPULATION = p_CURRENT_POPULATION)
            OR (    ( Recinfo.CURRENT_POPULATION IS NULL )
                AND (  p_CURRENT_POPULATION IS NULL )))
       AND (    ( Recinfo.POPULATION_CHANGE = p_POPULATION_CHANGE)
            OR (    ( Recinfo.POPULATION_CHANGE IS NULL )
                AND (  p_POPULATION_CHANGE IS NULL )))
       AND (    ( Recinfo.LAST_UPDATE_DATE = p_LAST_UPDATE_DATE)
            OR (    ( Recinfo.LAST_UPDATE_DATE IS NULL )
                AND (  p_LAST_UPDATE_DATE IS NULL )))
       AND (    ( Recinfo.LAST_UPDATED_BY = p_LAST_UPDATED_BY)
            OR (    ( Recinfo.LAST_UPDATED_BY IS NULL )
                AND (  p_LAST_UPDATED_BY IS NULL )))
       AND (    ( Recinfo.CREATION_DATE = p_CREATION_DATE)
            OR (    ( Recinfo.CREATION_DATE IS NULL )
                AND (  p_CREATION_DATE IS NULL )))
       AND (    ( Recinfo.CREATED_BY = p_CREATED_BY)
            OR (    ( Recinfo.CREATED_BY IS NULL )
                AND (  p_CREATED_BY IS NULL )))
       AND (    ( Recinfo.LAST_UPDATE_LOGIN = p_LAST_UPDATE_LOGIN)
            OR (    ( Recinfo.LAST_UPDATE_LOGIN IS NULL )
                AND (  p_LAST_UPDATE_LOGIN IS NULL )))
        ) then
        return;
    else
        FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_CHANGED');
        APP_EXCEPTION.RAISE_EXCEPTION;
    End If;
END Lock_Row;
End CSP_PRODUCT_POPULATIONS_PKG;

/
