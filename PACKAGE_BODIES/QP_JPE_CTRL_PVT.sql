--------------------------------------------------------
--  DDL for Package Body QP_JPE_CTRL_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."QP_JPE_CTRL_PVT" as
/* $Header: QPXJPECB.pls 120.1 2006/03/09 19:18:30 hwong noship $ */

procedure switch(
  err_buff out nocopy varchar2,
  retcode out nocopy number,
  p_control in  varchar2
)
is
  l_internal varchar2(30);
  l_engine_type varchar2(30);
  l_stmt varchar2(20000);
  l_save boolean;
  l_pattern_count number;
  l_attr_grp_count number;
  l_cache_stat_count number;
begin

  l_internal := nvl(FND_PROFILE.VALUE(g_internal), g_null);
  l_engine_type := nvl(FND_PROFILE.VALUE(g_engine_type), g_plsql);

  if (l_internal <> g_null) then

      if (p_control = g_plsql and l_engine_type = g_java) then

        begin

          l_save := fnd_profile.save(x_name => g_engine_type,
                                     x_value => g_plsql,
                                     x_level_name => g_site);

          l_stmt :=
            'create or replace view QP_PREQ_LINES_TMP as
                SELECT QPT.REQUEST_TYPE_CODE,QPT.LINE_ID,QPT.LINE_INDEX,QPT.LINE_TYPE_CODE,
                QPT.PRICING_EFFECTIVE_DATE,QPT.LINE_QUANTITY,QPT.LINE_UOM_CODE,
                QPT.PRICED_QUANTITY,QPT.PRICED_UOM_CODE,QPT.UOM_QUANTITY,QPT.CURRENCY_CODE,
                QPT.UNIT_PRICE,QPT.PERCENT_PRICE,QPT.ADJUSTED_UNIT_PRICE,QPT.PARENT_PRICE,
                QPT.PARENT_QUANTITY,QPT.PARENT_UOM_CODE,QPT.PROCESSING_ORDER,
                QPT.PROCESSED_FLAG,QPT.PROCESSED_CODE,QPT.PRICE_FLAG,QPT.PRICING_STATUS_CODE,
                QPT.PRICING_STATUS_TEXT,QPT.START_DATE_ACTIVE_FIRST,QPT.ACTIVE_DATE_FIRST_TYPE,
                QPT.START_DATE_ACTIVE_SECOND,QPT.ACTIVE_DATE_SECOND_TYPE,QPT.GROUP_QUANTITY,
                QPT.GROUP_AMOUNT,QPT.LINE_AMOUNT,QPT.ROUNDING_FLAG,QPT.ROUNDING_FACTOR,
                QPT.UPDATED_ADJUSTED_UNIT_PRICE,QPT.PRICE_REQUEST_CODE,QPT.HOLD_CODE,
                QPT.HOLD_TEXT,QPT.PRICE_LIST_HEADER_ID,QPT.VALIDATED_FLAG,
                QPT.QUALIFIERS_EXIST_FLAG,QPT.PRICING_ATTRS_EXIST_FLAG,
                QPT.PRIMARY_QUALIFIERS_MATCH_FLAG,QPT.USAGE_PRICING_TYPE,
                QPT.LINE_CATEGORY,QPT.CONTRACT_START_DATE,QPT.CONTRACT_END_DATE,
                QPT.LINE_UNIT_PRICE,QPT.REQUEST_ID,QPT.PROCESS_STATUS,QPT.EXTENDED_PRICE,
                QPT.ORDER_UOM_SELLING_PRICE,QPT.CATCHWEIGHT_QTY,QPT.ACTUAL_ORDER_QUANTITY,
                QPT.HEADER_ID,QPT.PRICING_EVENT,QPT.CALCULATE_FLAG,QPT.SIMULATION_FLAG,
                QPT.GSA_CHECK_FLAG,QPT.GSA_DUP_CHECK_FLAG,QPT.MANUAL_DISCOUNT_FLAG,
                QPT.SOURCE_ORDER_AMOUNT_FLAG,
                QPT.MANUAL_ADJUSTMENTS_CALL_FLAG MANUAL_ADJUSTMENTS_CALL_FL,
                QPT.GET_FREIGHT_FLAG,QPT.VIEW_CODE,QPT.CHECK_CUST_VIEW_FLAG,
                QPT.FULL_PRICING_CALL,QPT.USE_MULTI_CURRENCY,QPT.USER_CONVERSION_RATE,
                QPT.USER_CONVERSION_TYPE,QPT.FUNCTION_CURRENCY,QPT.LIST_PRICE_OVERRIDE_FLAG,
                QPT.CHARGE_PERIODICITY_CODE
                FROM QP_PREQ_LINES_TMP_T QPT
                WHERE REQUEST_ID = nvl(sys_context(''qp_context'',''request_id''),1)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_PREQ_LDETS_TMP as
                SELECT QPT.LINE_DETAIL_INDEX,QPT.LINE_DETAIL_TYPE_CODE,
                QPT.LINE_DETAIL_PBH_TYPE,QPT.PRICE_BREAK_TYPE_CODE,
                QPT.LINE_INDEX,QPT.CREATED_FROM_LIST_HEADER_ID,QPT.CREATED_FROM_LIST_LINE_ID,
                QPT.CREATED_FROM_LIST_LINE_TYPE,QPT.CREATED_FROM_LIST_TYPE_CODE,
                QPT.MODIFIER_LEVEL_CODE,QPT.CREATED_FROM_SQL,QPT.PRICING_GROUP_SEQUENCE,
                QPT.OPERAND_CALCULATION_CODE,QPT.OPERAND_VALUE,QPT.ADJUSTMENT_AMOUNT,
                QPT.LINE_QUANTITY,QPT.SUBSTITUTION_TYPE_CODE,QPT.SUBSTITUTION_VALUE_FROM,
                QPT.SUBSTITUTION_VALUE_TO,QPT.ASK_FOR_FLAG,QPT.PRICE_FORMULA_ID,
                QPT.PROCESSED_FLAG,QPT.PRICING_STATUS_CODE,QPT.PRICING_STATUS_TEXT,
                QPT.PRODUCT_PRECEDENCE,QPT.INCOMPATABILITY_GRP_CODE,QPT.BEST_PERCENT,
                QPT.PRICING_PHASE_ID,QPT.APPLIED_FLAG,QPT.AUTOMATIC_FLAG,
                QPT.OVERRIDE_FLAG,QPT.PRINT_ON_INVOICE_FLAG,QPT.PRIMARY_UOM_FLAG,
                QPT.BENEFIT_QTY,QPT.BENEFIT_UOM_CODE,QPT.LIST_LINE_NO,QPT.ACCRUAL_FLAG,
                QPT.ACCRUAL_CONVERSION_RATE,QPT.ESTIM_ACCRUAL_RATE,QPT.RECURRING_FLAG,
                QPT.SELECTED_VOLUME_ATTR,QPT.ROUNDING_FACTOR,QPT.SECONDARY_PRICELIST_IND,
                QPT.GROUP_QUANTITY,QPT.GROUP_AMOUNT,QPT.PROCESS_CODE,QPT.UPDATED_FLAG,
                QPT.CHARGE_TYPE_CODE,QPT.CHARGE_SUBTYPE_CODE,QPT.LIMIT_CODE,QPT.LIMIT_TEXT,
                QPT.HEADER_LIMIT_EXISTS,QPT.LINE_LIMIT_EXISTS,QPT.CALCULATION_CODE,
                QPT.CURRENCY_HEADER_ID,QPT.PRICING_EFFECTIVE_DATE,QPT.BASE_CURRENCY_CODE,
                QPT.ORDER_CURRENCY,QPT.CURRENCY_DETAIL_ID,QPT.SELLING_ROUNDING_FACTOR,
                QPT.CHANGE_REASON_CODE,QPT.CHANGE_REASON_TEXT,QPT.REQUEST_ID,
                QPT.PRICE_ADJUSTMENT_ID,QPT.RECURRING_VALUE,QPT.NET_AMOUNT_FLAG,
                QPT.ORDER_QTY_OPERAND,QPT.ORDER_QTY_ADJ_AMT,QPT.ACCUM_CONTEXT,
                QPT.ACCUM_ATTRIBUTE,QPT.ACCUM_ATTR_RUN_SRC_FLAG,QPT.BREAK_UOM_CODE,
                QPT.BREAK_UOM_CONTEXT,QPT.BREAK_UOM_ATTRIBUTE
                FROM QP_PREQ_LDETS_TMP_T QPT
                WHERE REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''),1)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_PREQ_LINE_ATTRS_TMP as
                SELECT QPT.LINE_INDEX,QPT.LINE_DETAIL_INDEX,QPT.ATTRIBUTE_LEVEL,
                QPT.ATTRIBUTE_TYPE,QPT.LIST_HEADER_ID,QPT.LIST_LINE_ID,QPT.CONTEXT,
                QPT.ATTRIBUTE,QPT.VALUE_FROM,QPT.SETUP_VALUE_FROM,QPT.VALUE_TO,
                QPT.SETUP_VALUE_TO,QPT.GROUPING_NUMBER,QPT.NO_QUALIFIERS_IN_GRP,
                QPT.COMPARISON_OPERATOR_TYPE_CODE,QPT.VALIDATED_FLAG,QPT.APPLIED_FLAG,
                QPT.PRICING_STATUS_CODE,QPT.PRICING_STATUS_TEXT,QPT.QUALIFIER_PRECEDENCE,
                QPT.PRICING_ATTR_FLAG,QPT.QUALIFIER_TYPE,QPT.DATATYPE,QPT.PRODUCT_UOM_CODE,
                QPT.PROCESSED_CODE,QPT.EXCLUDER_FLAG,QPT.GROUP_QUANTITY,QPT.GROUP_AMOUNT,
                QPT.DISTINCT_QUALIFIER_FLAG,QPT.PRICING_PHASE_ID,QPT.INCOMPATABILITY_GRP_CODE,
                QPT.LINE_DETAIL_TYPE_CODE,QPT.MODIFIER_LEVEL_CODE,QPT.PRIMARY_UOM_FLAG,
                QPT.REQUEST_ID,QPT.DERIVED_QUALIFIER_FLAG
                FROM QP_PREQ_LINE_ATTRS_TMP_T QPT
                WHERE REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''), 1)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_PREQ_RLTD_LINES_TMP as
                SELECT QPT.REQUEST_TYPE_CODE,QPT.LINE_INDEX,QPT.LINE_DETAIL_INDEX,
                QPT.RELATIONSHIP_TYPE_CODE,QPT.RELATED_LINE_INDEX,
                QPT.RELATED_LINE_DETAIL_INDEX,QPT.PRICING_STATUS_CODE,
                QPT.PRICING_STATUS_TEXT,QPT.LIST_LINE_ID,QPT.RELATED_LIST_LINE_ID,
                QPT.RELATED_LIST_LINE_TYPE,QPT.OPERAND_CALCULATION_CODE,QPT.OPERAND,
                QPT.PRICING_GROUP_SEQUENCE,QPT.RELATIONSHIP_TYPE_DETAIL,QPT.SETUP_VALUE_FROM,
                QPT.SETUP_VALUE_TO,QPT.QUALIFIER_VALUE,QPT.ADJUSTMENT_AMOUNT,
                QPT.SATISFIED_RANGE_VALUE,QPT.REQUEST_ID
                FROM QP_PREQ_RLTD_LINES_TMP_T QPT
                WHERE REQUEST_ID = nvl(sys_context(''qp_context'',''request_id''),1)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_FORMULA_STEP_VALUES_TMP as
                SELECT QFT.PRICE_FORMULA_ID,QFT.STEP_NUMBER,QFT.COMPONENT_VALUE,
                QFT.PRICE_FORMULA_LINE_TYPE_CODE,QFT.LINE_INDEX,QFT.LIST_LINE_TYPE_CODE,
                QFT.LIST_HEADER_ID,QFT.LIST_LINE_ID,QFT.REQUEST_ID
                FROM QP_FORMULA_STEP_VALUES_TMP_T QFT
                WHERE REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''),1)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_LDETS_V as
                SELECT A.LINE_DETAIL_INDEX,A.LINE_DETAIL_TYPE_CODE,A.LINE_INDEX,
                A.CREATED_FROM_LIST_HEADER_ID LIST_HEADER_ID,
                A.CREATED_FROM_LIST_LINE_ID LIST_LINE_ID,
                A.CREATED_FROM_LIST_LINE_TYPE LIST_LINE_TYPE_CODE,
                A.PRICE_BREAK_TYPE_CODE,
                A.LINE_QUANTITY,A.ADJUSTMENT_AMOUNT,A.AUTOMATIC_FLAG,
                A.PRICING_PHASE_ID,A.OPERAND_CALCULATION_CODE,A.OPERAND_VALUE,
                A.PRICING_GROUP_SEQUENCE,A.CREATED_FROM_LIST_TYPE_CODE,
                A.APPLIED_FLAG,A.PRICING_STATUS_CODE,A.PRICING_STATUS_TEXT,
                A.LIMIT_CODE,A.LIMIT_TEXT,A.LIST_LINE_NO,A.GROUP_QUANTITY,
                A.UPDATED_FLAG,A.PROCESS_CODE,B.SUBSTITUTION_VALUE SUBSTITUTION_VALUE_TO,
                B.SUBSTITUTION_ATTRIBUTE,B.ACCRUAL_FLAG,A.MODIFIER_LEVEL_CODE,
                B.ESTIM_GL_VALUE,B.ACCRUAL_CONVERSION_RATE,B.OVERRIDE_FLAG,
                B.PRINT_ON_INVOICE_FLAG,B.INVENTORY_ITEM_ID,B.ORGANIZATION_ID,
                B.RELATED_ITEM_ID,B.RELATIONSHIP_TYPE_ID,B.ESTIM_ACCRUAL_RATE,
                B.EXPIRATION_DATE,B.BENEFIT_PRICE_LIST_LINE_ID,B.RECURRING_FLAG,
                B.BENEFIT_LIMIT,A.CHARGE_TYPE_CODE,A.CHARGE_SUBTYPE_CODE,A.BENEFIT_QTY,
                B.BENEFIT_UOM_CODE,B.PRORATION_TYPE_CODE,B.INCLUDE_ON_RETURNS_FLAG,
                B.REBATE_TRANSACTION_TYPE_CODE,B.NUMBER_EXPIRATION_PERIODS,
                B.EXPIRATION_PERIOD_UOM,B.COMMENTS,A.CALCULATION_CODE,
                A.CHANGE_REASON_CODE,A.CHANGE_REASON_TEXT,A.PRICE_ADJUSTMENT_ID,
                A.NET_AMOUNT_FLAG,A.ORDER_QTY_OPERAND,A.ORDER_QTY_ADJ_AMT,
                A.ACCUM_CONTEXT,A.ACCUM_ATTRIBUTE,A.ACCUM_ATTR_RUN_SRC_FLAG,
                A.BREAK_UOM_CODE,A.BREAK_UOM_CONTEXT,A.BREAK_UOM_ATTRIBUTE
                FROM QP_PREQ_LDETS_TMP_T A, QP_LIST_LINES B
                WHERE a.CREATED_FROM_LIST_LINE_ID = b.LIST_LINE_ID
                AND a.PRICING_STATUS_CODE = ''N''
                and a.REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''),1)';

          execute immediate l_stmt;

          commit;

        exception
          when others then
            err_buff := sqlerrm;
            retcode := 2;
          end;

      elsif (p_control = g_java and l_engine_type = g_plsql) then

        begin

          l_save := fnd_profile.save(x_name => g_engine_type,
                                     x_value => g_java,
                                     x_level_name => g_site);

          l_stmt :=
            'create or replace view QP_PREQ_LINES_TMP as
                SELECT QPT.REQUEST_TYPE_CODE,QPT.LINE_ID,QPT.LINE_INDEX,QPT.LINE_TYPE_CODE,
                QPT.PRICING_EFFECTIVE_DATE,QPT.LINE_QUANTITY,QPT.LINE_UOM_CODE,
                QPT.PRICED_QUANTITY,QPT.PRICED_UOM_CODE,QPT.UOM_QUANTITY,QPT.CURRENCY_CODE,
                QPT.UNIT_PRICE,QPT.PERCENT_PRICE,QPT.ADJUSTED_UNIT_PRICE,QPT.PARENT_PRICE,
                QPT.PARENT_QUANTITY,QPT.PARENT_UOM_CODE,QPT.PROCESSING_ORDER,
                QPT.PROCESSED_FLAG,QPT.PROCESSED_CODE,QPT.PRICE_FLAG,QPT.PRICING_STATUS_CODE,
                QPT.PRICING_STATUS_TEXT,QPT.START_DATE_ACTIVE_FIRST,QPT.ACTIVE_DATE_FIRST_TYPE,
                QPT.START_DATE_ACTIVE_SECOND,QPT.ACTIVE_DATE_SECOND_TYPE,QPT.GROUP_QUANTITY,
                QPT.GROUP_AMOUNT,QPT.LINE_AMOUNT,QPT.ROUNDING_FLAG,QPT.ROUNDING_FACTOR,
                QPT.UPDATED_ADJUSTED_UNIT_PRICE,QPT.PRICE_REQUEST_CODE,QPT.HOLD_CODE,
                QPT.HOLD_TEXT,QPT.PRICE_LIST_HEADER_ID,QPT.VALIDATED_FLAG,
                QPT.QUALIFIERS_EXIST_FLAG,QPT.PRICING_ATTRS_EXIST_FLAG,
                QPT.PRIMARY_QUALIFIERS_MATCH_FLAG,QPT.USAGE_PRICING_TYPE,
                QPT.LINE_CATEGORY,QPT.CONTRACT_START_DATE,QPT.CONTRACT_END_DATE,
                QPT.LINE_UNIT_PRICE,QPT.REQUEST_ID,QPT.PROCESS_STATUS,QPT.EXTENDED_PRICE,
                QPT.ORDER_UOM_SELLING_PRICE,QPT.CATCHWEIGHT_QTY,QPT.ACTUAL_ORDER_QUANTITY,
                QPT.HEADER_ID,QPT.PRICING_EVENT,QPT.CALCULATE_FLAG,QPT.SIMULATION_FLAG,
                QPT.GSA_CHECK_FLAG,QPT.GSA_DUP_CHECK_FLAG,QPT.MANUAL_DISCOUNT_FLAG,
                QPT.SOURCE_ORDER_AMOUNT_FLAG,
                QPT.MANUAL_ADJUSTMENTS_CALL_FLAG MANUAL_ADJUSTMENTS_CALL_FL,
                QPT.GET_FREIGHT_FLAG,QPT.VIEW_CODE,QPT.CHECK_CUST_VIEW_FLAG,
                QPT.FULL_PRICING_CALL,QPT.USE_MULTI_CURRENCY,QPT.USER_CONVERSION_RATE,
                QPT.USER_CONVERSION_TYPE,QPT.FUNCTION_CURRENCY,QPT.LIST_PRICE_OVERRIDE_FLAG,
                QPT.CHARGE_PERIODICITY_CODE
                FROM QP_INT_LINES_T QPT
                WHERE REQUEST_ID = nvl(sys_context(''qp_context'',''request_id''), -9999)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_PREQ_LDETS_TMP as
                SELECT QPT.LINE_DETAIL_INDEX,QPT.LINE_DETAIL_TYPE_CODE,
                QPT.LINE_DETAIL_PBH_TYPE,QPT.PRICE_BREAK_TYPE_CODE,
                QPT.LINE_INDEX,QPT.CREATED_FROM_LIST_HEADER_ID,QPT.CREATED_FROM_LIST_LINE_ID,
                QPT.CREATED_FROM_LIST_LINE_TYPE,QPT.CREATED_FROM_LIST_TYPE_CODE,
                QPT.MODIFIER_LEVEL_CODE,QPT.CREATED_FROM_SQL,QPT.PRICING_GROUP_SEQUENCE,
                QPT.OPERAND_CALCULATION_CODE,QPT.OPERAND_VALUE,QPT.ADJUSTMENT_AMOUNT,
                QPT.LINE_QUANTITY,QPT.SUBSTITUTION_TYPE_CODE,QPT.SUBSTITUTION_VALUE_FROM,
                QPT.SUBSTITUTION_VALUE_TO,QPT.ASK_FOR_FLAG,QPT.PRICE_FORMULA_ID,
                QPT.PROCESSED_FLAG,QPT.PRICING_STATUS_CODE,QPT.PRICING_STATUS_TEXT,
                QPT.PRODUCT_PRECEDENCE,QPT.INCOMPATABILITY_GRP_CODE,QPT.BEST_PERCENT,
                QPT.PRICING_PHASE_ID,QPT.APPLIED_FLAG,QPT.AUTOMATIC_FLAG,
                QPT.OVERRIDE_FLAG,QPT.PRINT_ON_INVOICE_FLAG,QPT.PRIMARY_UOM_FLAG,
                QPT.BENEFIT_QTY,QPT.BENEFIT_UOM_CODE,QPT.LIST_LINE_NO,QPT.ACCRUAL_FLAG,
                QPT.ACCRUAL_CONVERSION_RATE,QPT.ESTIM_ACCRUAL_RATE,QPT.RECURRING_FLAG,
                QPT.SELECTED_VOLUME_ATTR,QPT.ROUNDING_FACTOR,QPT.SECONDARY_PRICELIST_IND,
                QPT.GROUP_QUANTITY,QPT.GROUP_AMOUNT,QPT.PROCESS_CODE,QPT.UPDATED_FLAG,
                QPT.CHARGE_TYPE_CODE,QPT.CHARGE_SUBTYPE_CODE,QPT.LIMIT_CODE,QPT.LIMIT_TEXT,
                QPT.HEADER_LIMIT_EXISTS,QPT.LINE_LIMIT_EXISTS,QPT.CALCULATION_CODE,
                QPT.CURRENCY_HEADER_ID,QPT.PRICING_EFFECTIVE_DATE,QPT.BASE_CURRENCY_CODE,
                QPT.ORDER_CURRENCY,QPT.CURRENCY_DETAIL_ID,QPT.SELLING_ROUNDING_FACTOR,
                QPT.CHANGE_REASON_CODE,QPT.CHANGE_REASON_TEXT,QPT.REQUEST_ID,
                QPT.PRICE_ADJUSTMENT_ID,QPT.RECURRING_VALUE,QPT.NET_AMOUNT_FLAG,
                QPT.ORDER_QTY_OPERAND,QPT.ORDER_QTY_ADJ_AMT,QPT.ACCUM_CONTEXT,
                QPT.ACCUM_ATTRIBUTE,QPT.ACCUM_ATTR_RUN_SRC_FLAG,QPT.BREAK_UOM_CODE,
                QPT.BREAK_UOM_CONTEXT,QPT.BREAK_UOM_ATTRIBUTE
                FROM QP_INT_LDETS_T QPT
                WHERE REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''), -9999)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_PREQ_LINE_ATTRS_TMP as
                SELECT QPT.LINE_INDEX,QPT.LINE_DETAIL_INDEX,QPT.ATTRIBUTE_LEVEL,
                QPT.ATTRIBUTE_TYPE,QPT.LIST_HEADER_ID,QPT.LIST_LINE_ID,QPT.CONTEXT,
                QPT.ATTRIBUTE,QPT.VALUE_FROM,QPT.SETUP_VALUE_FROM,QPT.VALUE_TO,
                QPT.SETUP_VALUE_TO,QPT.GROUPING_NUMBER,QPT.NO_QUALIFIERS_IN_GRP,
                QPT.COMPARISON_OPERATOR_TYPE_CODE,QPT.VALIDATED_FLAG,QPT.APPLIED_FLAG,
                QPT.PRICING_STATUS_CODE,QPT.PRICING_STATUS_TEXT,QPT.QUALIFIER_PRECEDENCE,
                QPT.PRICING_ATTR_FLAG,QPT.QUALIFIER_TYPE,QPT.DATATYPE,QPT.PRODUCT_UOM_CODE,
                QPT.PROCESSED_CODE,QPT.EXCLUDER_FLAG,QPT.GROUP_QUANTITY,QPT.GROUP_AMOUNT,
                QPT.DISTINCT_QUALIFIER_FLAG,QPT.PRICING_PHASE_ID,QPT.INCOMPATABILITY_GRP_CODE,
                QPT.LINE_DETAIL_TYPE_CODE,QPT.MODIFIER_LEVEL_CODE,QPT.PRIMARY_UOM_FLAG,
                QPT.REQUEST_ID,QPT.DERIVED_QUALIFIER_FLAG
                FROM QP_INT_LINE_ATTRS_T QPT
                WHERE REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''), -9999)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_PREQ_RLTD_LINES_TMP as
                SELECT QPT.REQUEST_TYPE_CODE,QPT.LINE_INDEX,QPT.LINE_DETAIL_INDEX,
                QPT.RELATIONSHIP_TYPE_CODE,QPT.RELATED_LINE_INDEX,
                QPT.RELATED_LINE_DETAIL_INDEX,QPT.PRICING_STATUS_CODE,
                QPT.PRICING_STATUS_TEXT,QPT.LIST_LINE_ID,QPT.RELATED_LIST_LINE_ID,
                QPT.RELATED_LIST_LINE_TYPE,QPT.OPERAND_CALCULATION_CODE,QPT.OPERAND,
                QPT.PRICING_GROUP_SEQUENCE,QPT.RELATIONSHIP_TYPE_DETAIL,QPT.SETUP_VALUE_FROM,
                QPT.SETUP_VALUE_TO,QPT.QUALIFIER_VALUE,QPT.ADJUSTMENT_AMOUNT,
                QPT.SATISFIED_RANGE_VALUE,QPT.REQUEST_ID
                FROM QP_INT_RLTD_LINES_T QPT
                WHERE REQUEST_ID = nvl(sys_context(''qp_context'',''request_id''),-9999)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_FORMULA_STEP_VALUES_TMP as
                SELECT QFT.PRICE_FORMULA_ID,QFT.STEP_NUMBER,QFT.COMPONENT_VALUE,
                QFT.PRICE_FORMULA_LINE_TYPE_CODE,QFT.LINE_INDEX,QFT.LIST_LINE_TYPE_CODE,
                QFT.LIST_HEADER_ID,QFT.LIST_LINE_ID,QFT.REQUEST_ID
                FROM QP_INT_FML_STEP_VALS_T QFT
                WHERE REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''), -9999)';

          execute immediate l_stmt;

          l_stmt :=
            'create or replace view QP_LDETS_V as
                SELECT A.LINE_DETAIL_INDEX,A.LINE_DETAIL_TYPE_CODE,A.LINE_INDEX,
                A.CREATED_FROM_LIST_HEADER_ID LIST_HEADER_ID,
                A.CREATED_FROM_LIST_LINE_ID LIST_LINE_ID,
                A.CREATED_FROM_LIST_LINE_TYPE LIST_LINE_TYPE_CODE,
                A.PRICE_BREAK_TYPE_CODE,
                A.LINE_QUANTITY,A.ADJUSTMENT_AMOUNT,A.AUTOMATIC_FLAG,
                A.PRICING_PHASE_ID,A.OPERAND_CALCULATION_CODE,A.OPERAND_VALUE,
                A.PRICING_GROUP_SEQUENCE,A.CREATED_FROM_LIST_TYPE_CODE,
                A.APPLIED_FLAG,A.PRICING_STATUS_CODE,A.PRICING_STATUS_TEXT,
                A.LIMIT_CODE,A.LIMIT_TEXT,A.LIST_LINE_NO,A.GROUP_QUANTITY,
                A.UPDATED_FLAG,A.PROCESS_CODE,B.SUBSTITUTION_VALUE SUBSTITUTION_VALUE_TO,
                B.SUBSTITUTION_ATTRIBUTE,B.ACCRUAL_FLAG,A.MODIFIER_LEVEL_CODE,
                B.ESTIM_GL_VALUE,B.ACCRUAL_CONVERSION_RATE,B.OVERRIDE_FLAG,
                B.PRINT_ON_INVOICE_FLAG,B.INVENTORY_ITEM_ID,B.ORGANIZATION_ID,
                B.RELATED_ITEM_ID,B.RELATIONSHIP_TYPE_ID,B.ESTIM_ACCRUAL_RATE,
                B.EXPIRATION_DATE,B.BENEFIT_PRICE_LIST_LINE_ID,B.RECURRING_FLAG,
                B.BENEFIT_LIMIT,A.CHARGE_TYPE_CODE,A.CHARGE_SUBTYPE_CODE,A.BENEFIT_QTY,
                B.BENEFIT_UOM_CODE,B.PRORATION_TYPE_CODE,B.INCLUDE_ON_RETURNS_FLAG,
                B.REBATE_TRANSACTION_TYPE_CODE,B.NUMBER_EXPIRATION_PERIODS,
                B.EXPIRATION_PERIOD_UOM,B.COMMENTS,A.CALCULATION_CODE,
                A.CHANGE_REASON_CODE,A.CHANGE_REASON_TEXT,A.PRICE_ADJUSTMENT_ID,
                A.NET_AMOUNT_FLAG,A.ORDER_QTY_OPERAND,A.ORDER_QTY_ADJ_AMT,
                A.ACCUM_CONTEXT,A.ACCUM_ATTRIBUTE,A.ACCUM_ATTR_RUN_SRC_FLAG,
                A.BREAK_UOM_CODE,A.BREAK_UOM_CONTEXT,A.BREAK_UOM_ATTRIBUTE
                FROM QP_INT_LDETS_T a, QP_LIST_LINES b
                WHERE a.CREATED_FROM_LIST_LINE_ID = b.LIST_LINE_ID
                AND a.PRICING_STATUS_CODE = ''N''
                and a.REQUEST_ID = nvl(SYS_CONTEXT(''QP_CONTEXT'',''REQUEST_ID''),-9999)';

          execute immediate l_stmt;

          commit;

          select count(*) into l_pattern_count from qp_patterns;
          select count(*) into l_attr_grp_count from qp_attribute_groups;

          if (l_pattern_count <= 0 or l_attr_grp_count <= 0) then

            err_buff := '';
            retcode := 0;

            qp_attr_grp_pvt.pattern_upgrade(
              err_buff => err_buff,
              retcode => retcode,
              p_list_header_id => null,
              p_low_list_line_id => null,
              p_high_list_line_id => null,
              p_no_of_threads => 1,
              p_spawned_request => 'N');

            if (err_buff <> '' or retcode <> 0) then
              return;
            end if;
          end if;

          select count(*) into l_cache_stat_count from qp_cache_stats;

          if (l_cache_stat_count <= 0) then

            err_buff := '';
            retcode := 0;

            qp_java_engine_cache_pvt.update_cache_stats(
              err_buff => err_buff,
              retcode => retcode
            );

            if (err_buff <> '' or retcode <> 0) then
              return;
            end if;

          end if;

        exception
          when others then
            err_buff := sqlerrm;
            retcode := 2;
        end;

      end if;

  else

    err_buff := '';
    retcode := 0;

  end if;

end switch;

end qp_jpe_ctrl_pvt;

/
