--------------------------------------------------------
--  DDL for Package Body AK_CUSTOM_REGIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AK_CUSTOM_REGIONS_PKG" as
/* $Header: AKDCRGNB.pls 120.3 2006/01/25 15:56:23 tshort noship $ */
procedure INSERT_ROW (
X_ROWID                        in out NOCOPY VARCHAR2,
X_CUSTOMIZATION_APPLICATION_ID in     NUMBER,
X_CUSTOMIZATION_CODE           in     VARCHAR2,
X_REGION_APPLICATION_ID        in     NUMBER,
X_REGION_CODE                  in     VARCHAR2,
X_PROPERTY_NAME                in     VARCHAR2,
X_PROPERTY_VARCHAR2_VALUE      in     VARCHAR2,
X_PROPERTY_NUMBER_VALUE        in     NUMBER,
X_CRITERIA_JOIN_CONDITION      in     VARCHAR2,
X_CREATED_BY                   in     NUMBER,
X_CREATION_DATE                in     DATE,
X_LAST_UPDATED_BY              in     NUMBER,
X_LAST_UPDATE_DATE             in     DATE,
X_LAST_UPDATE_LOGIN            in     NUMBER
) is
cursor C is select ROWID from AK_CUSTOM_REGIONS
where CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   REGION_CODE                  = X_REGION_CODE
and   PROPERTY_NAME                = X_PROPERTY_NAME;
begin
insert into AK_CUSTOM_REGIONS (
CUSTOMIZATION_APPLICATION_ID,
CUSTOMIZATION_CODE,
REGION_APPLICATION_ID,
REGION_CODE,
PROPERTY_NAME,
PROPERTY_VARCHAR2_VALUE,
PROPERTY_NUMBER_VALUE,
CRITERIA_JOIN_CONDITION,
CREATED_BY,
CREATION_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN
) values (
X_CUSTOMIZATION_APPLICATION_ID,
X_CUSTOMIZATION_CODE,
X_REGION_APPLICATION_ID,
X_REGION_CODE,
X_PROPERTY_NAME,
X_PROPERTY_VARCHAR2_VALUE,
X_PROPERTY_NUMBER_VALUE,
X_CRITERIA_JOIN_CONDITION,
X_CREATED_BY,
X_CREATION_DATE,
X_LAST_UPDATED_BY,
X_LAST_UPDATE_DATE,
X_LAST_UPDATE_LOGIN
);

open C;
fetch C into X_ROWID;
if (C%notfound) then
close C;
raise no_data_found;
end if;
close C;

insert into AK_CUSTOM_REGIONS_TL (
CUSTOMIZATION_APPLICATION_ID,
CUSTOMIZATION_CODE,
REGION_APPLICATION_ID,
REGION_CODE,
PROPERTY_NAME,
PROPERTY_VARCHAR2_VALUE,
LANGUAGE,
SOURCE_LANG,
CREATED_BY,
CREATION_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN
) select
X_CUSTOMIZATION_APPLICATION_ID,
X_CUSTOMIZATION_CODE,
X_REGION_APPLICATION_ID,
X_REGION_CODE,
X_PROPERTY_NAME,
X_PROPERTY_VARCHAR2_VALUE,
L.LANGUAGE_CODE,
userenv('LANG'),
X_CREATED_BY,
X_CREATION_DATE,
X_LAST_UPDATED_BY,
X_LAST_UPDATE_DATE,
X_LAST_UPDATE_LOGIN
from FND_LANGUAGES L
where L.INSTALLED_FLAG in ('I', 'B')
and not exists
(select NULL
from AK_CUSTOM_REGIONS_TL T
where T.CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   T.CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   T.REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   T.REGION_CODE                  = X_REGION_CODE
and   T.PROPERTY_NAME                = X_PROPERTY_NAME
and   T.LANGUAGE                     = L.LANGUAGE_CODE);
end INSERT_ROW;

procedure LOCK_ROW (
X_CUSTOMIZATION_APPLICATION_ID in     NUMBER,
X_CUSTOMIZATION_CODE           in     VARCHAR2,
X_REGION_APPLICATION_ID        in     NUMBER,
X_REGION_CODE                  in     VARCHAR2,
X_PROPERTY_NAME                in     VARCHAR2,
X_PROPERTY_VARCHAR2_VALUE      in     VARCHAR2,
X_PROPERTY_NUMBER_VALUE        in     NUMBER,
X_CRITERIA_JOIN_CONDITION      in     VARCHAR2,
X_CREATED_BY                   in     NUMBER,
X_CREATION_DATE                in     DATE,
X_LAST_UPDATED_BY              in     NUMBER,
X_LAST_UPDATE_DATE             in     DATE,
X_LAST_UPDATE_LOGIN            in     NUMBER
) is
cursor C is select
CUSTOMIZATION_APPLICATION_ID,
CUSTOMIZATION_CODE,
REGION_APPLICATION_ID,
REGION_CODE,
PROPERTY_NAME,
PROPERTY_VARCHAR2_VALUE,
PROPERTY_NUMBER_VALUE,
CRITERIA_JOIN_CONDITION
from AK_CUSTOM_REGIONS
where CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   REGION_CODE                  = X_REGION_CODE
and   PROPERTY_NAME                = X_PROPERTY_NAME
for update of CUSTOMIZATION_APPLICATION_ID nowait;
recinfo C%rowtype;

cursor C1 is select
PROPERTY_VARCHAR2_VALUE
from AK_CUSTOM_REGIONS_TL
where CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   REGION_CODE                  = X_REGION_CODE
and   PROPERTY_NAME                = X_PROPERTY_NAME
and   LANGUAGE                     = userenv('LANG')
for update of CUSTOMIZATION_CODE nowait;
tlinfo C1%rowtype;
begin
open C;
fetch C into recinfo;
if (C%notfound) then
close C;
fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
app_exception.raise_exception;
end if;
close C;

if (((recinfo.CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID)
OR ((recinfo.CUSTOMIZATION_APPLICATION_ID is null)
AND (X_CUSTOMIZATION_APPLICATION_ID is null)))
AND ((recinfo.CUSTOMIZATION_CODE = X_CUSTOMIZATION_CODE)
OR ((recinfo.CUSTOMIZATION_CODE is null)
AND (X_CUSTOMIZATION_CODE is null)))
AND ((recinfo.REGION_APPLICATION_ID = X_REGION_APPLICATION_ID)
OR ((recinfo.REGION_APPLICATION_ID is null)
AND (X_REGION_APPLICATION_ID is null)))
AND ((recinfo.REGION_CODE = X_REGION_CODE)
OR ((recinfo.REGION_CODE is null)
AND (X_REGION_CODE is null)))
AND ((recinfo.PROPERTY_NAME = X_PROPERTY_NAME)
OR ((recinfo.PROPERTY_NAME is null)
AND (X_PROPERTY_NAME is null)))
AND ((recinfo.PROPERTY_VARCHAR2_VALUE = X_PROPERTY_VARCHAR2_VALUE)
OR ((recinfo.PROPERTY_VARCHAR2_VALUE is null)
AND (X_PROPERTY_VARCHAR2_VALUE is null)))
AND ((recinfo.PROPERTY_NUMBER_VALUE = X_PROPERTY_NUMBER_VALUE)
OR ((recinfo.PROPERTY_NUMBER_VALUE is null)
AND (X_PROPERTY_NUMBER_VALUE is null)))
AND ((recinfo.CRITERIA_JOIN_CONDITION = X_CRITERIA_JOIN_CONDITION)
OR ((recinfo.CRITERIA_JOIN_CONDITION is null)
AND (X_CRITERIA_JOIN_CONDITION is null)))
) then
null;
else
fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
app_exception.raise_exception;
end if;

open C1;
fetch C1 into tlinfo;
if (C1%notfound) then
close C1;
return;
end if;
close C1;

if ((tlinfo.PROPERTY_VARCHAR2_VALUE = X_PROPERTY_VARCHAR2_VALUE)
OR ((tlinfo.PROPERTY_VARCHAR2_VALUE is null)
AND (X_PROPERTY_VARCHAR2_VALUE is null))
) then
null;
else
fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
app_exception.raise_exception;
end if;
return;
end LOCK_ROW;

procedure UPDATE_ROW (
X_CUSTOMIZATION_APPLICATION_ID in     NUMBER,
X_CUSTOMIZATION_CODE           in     VARCHAR2,
X_REGION_APPLICATION_ID        in     NUMBER,
X_REGION_CODE                  in     VARCHAR2,
X_PROPERTY_NAME                in     VARCHAR2,
X_PROPERTY_VARCHAR2_VALUE      in     VARCHAR2,
X_PROPERTY_NUMBER_VALUE        in     NUMBER,
X_CRITERIA_JOIN_CONDITION      in     VARCHAR2,
X_LAST_UPDATED_BY              in     NUMBER,
X_LAST_UPDATE_DATE             in     DATE,
X_LAST_UPDATE_LOGIN            in     NUMBER
) is
begin
update AK_CUSTOM_REGIONS set
CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID,
CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE,
REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID,
REGION_CODE                  = X_REGION_CODE,
PROPERTY_NAME                = X_PROPERTY_NAME,
PROPERTY_VARCHAR2_VALUE      = X_PROPERTY_VARCHAR2_VALUE,
PROPERTY_NUMBER_VALUE        = X_PROPERTY_NUMBER_VALUE,
CRITERIA_JOIN_CONDITION      = X_CRITERIA_JOIN_CONDITION,
LAST_UPDATED_BY              = X_LAST_UPDATED_BY,
LAST_UPDATE_DATE             = X_LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN            = X_LAST_UPDATE_LOGIN
where CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   REGION_CODE                  = X_REGION_CODE
and   PROPERTY_NAME                = X_PROPERTY_NAME;

if (sql%notfound) then
raise no_data_found;
end if;

update AK_CUSTOM_REGIONS_TL set
PROPERTY_VARCHAR2_VALUE = X_PROPERTY_VARCHAR2_VALUE,
LAST_UPDATED_BY         = X_LAST_UPDATED_BY,
LAST_UPDATE_DATE        = X_LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN       = X_LAST_UPDATE_LOGIN,
SOURCE_LANG             = userenv('LANG')
where CUSTOMIZATION_APPLICATION_ID =  X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           =  X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        =  X_REGION_APPLICATION_ID
and   REGION_CODE                  =  X_REGION_CODE
and   PROPERTY_NAME                =  X_PROPERTY_NAME
and   userenv('LANG')              in (LANGUAGE, SOURCE_LANG);

if (sql%notfound) then
raise no_data_found;
end if;
end UPDATE_ROW;

procedure DELETE_ROW (
X_CUSTOMIZATION_APPLICATION_ID in NUMBER,
X_CUSTOMIZATION_CODE           in VARCHAR2,
X_REGION_APPLICATION_ID        in NUMBER,
X_REGION_CODE                  in VARCHAR2,
X_PROPERTY_NAME                in VARCHAR2
) is
begin
delete from AK_CUSTOM_REGIONS
where CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   REGION_CODE                  = X_REGION_CODE
and   PROPERTY_NAME                = X_PROPERTY_NAME;

if (sql%notfound) then
raise no_data_found;
end if;

delete from AK_CUSTOM_REGIONS_TL
where CUSTOMIZATION_APPLICATION_ID = X_CUSTOMIZATION_APPLICATION_ID
and   CUSTOMIZATION_CODE           = X_CUSTOMIZATION_CODE
and   REGION_APPLICATION_ID        = X_REGION_APPLICATION_ID
and   REGION_CODE                  = X_REGION_CODE
and   PROPERTY_NAME                = X_PROPERTY_NAME;

if (sql%notfound) then
raise no_data_found;
end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
/* Mar/19/03 requested by Ric Ginsberg */
/* The following delete and update statements are commented out */
/* as a quick workaround to fix the time-consuming table handler issue */
/* Eventually we'll need to turn them into a separate fix_language procedure */
/*

delete from AK_CUSTOM_REGIONS_TL T
where not exists
(select NULL
from AK_CUSTOM_REGIONS B
where B.CUSTOMIZATION_APPLICATION_ID = T.CUSTOMIZATION_APPLICATION_ID
and   B.CUSTOMIZATION_CODE           = T.CUSTOMIZATION_CODE
and   B.REGION_APPLICATION_ID        = T.REGION_APPLICATION_ID
and   B.REGION_CODE                  = T.REGION_CODE
and   B.PROPERTY_NAME                = T.PROPERTY_NAME
);

update AK_CUSTOM_REGIONS_TL T set (
PROPERTY_VARCHAR2_VALUE
) = (select
B.PROPERTY_VARCHAR2_VALUE
from AK_CUSTOM_REGIONS_TL B
where B.CUSTOMIZATION_APPLICATION_ID = T.CUSTOMIZATION_APPLICATION_ID
and   B.CUSTOMIZATION_CODE           = T.CUSTOMIZATION_CODE
and   B.REGION_APPLICATION_ID        = T.REGION_APPLICATION_ID
and   B.REGION_CODE                  = T.REGION_CODE
and   B.PROPERTY_NAME                = T.PROPERTY_NAME
and   B.LANGUAGE                     = T.SOURCE_LANG)
where (
T.CUSTOMIZATION_APPLICATION_ID,
T.CUSTOMIZATION_CODE,
T.REGION_APPLICATION_ID,
T.REGION_CODE,
T.PROPERTY_NAME,
T.LANGUAGE
) in (select SUBT.CUSTOMIZATION_APPLICATION_ID,
SUBT.CUSTOMIZATION_CODE,
SUBT.REGION_APPLICATION_ID,
SUBT.REGION_CODE,
SUBT.PROPERTY_NAME,
SUBT.LANGUAGE
from AK_CUSTOM_REGIONS_TL SUBB,
AK_CUSTOM_REGIONS_TL SUBT
where SUBB.CUSTOMIZATION_APPLICATION_ID = SUBT.CUSTOMIZATION_APPLICATION_ID
and   SUBB.CUSTOMIZATION_CODE           = SUBT.CUSTOMIZATION_CODE
and   SUBB.REGION_APPLICATION_ID        = SUBT.REGION_APPLICATION_ID
and   SUBB.REGION_CODE                  = SUBT.REGION_CODE
and   SUBB.PROPERTY_NAME                = SUBT.PROPERTY_NAME
and   SUBB.LANGUAGE                     = SUBT.SOURCE_LANG
and   (SUBB.PROPERTY_VARCHAR2_VALUE <> SUBT.PROPERTY_VARCHAR2_VALUE
or (SUBB.PROPERTY_VARCHAR2_VALUE is null and SUBT.PROPERTY_VARCHAR2_VALUE is not null)
or (SUBB.PROPERTY_VARCHAR2_VALUE is not null and SUBT.PROPERTY_VARCHAR2_VALUE is null))
);

*/

insert /*+ append parallel(tt) */ into AK_CUSTOM_REGIONS_TL tt (
CUSTOMIZATION_APPLICATION_ID,
CUSTOMIZATION_CODE,
REGION_APPLICATION_ID,
REGION_CODE,
PROPERTY_NAME,
PROPERTY_VARCHAR2_VALUE,
LANGUAGE,
SOURCE_LANG,
CREATED_BY,
CREATION_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN
) select /*+ parallel(v) parallel(t) use_nl(t)  */ v.* from
(select /*+ no_merge ordered parallel(b) */
B.CUSTOMIZATION_APPLICATION_ID,
B.CUSTOMIZATION_CODE,
B.REGION_APPLICATION_ID,
B.REGION_CODE,
B.PROPERTY_NAME,
B.PROPERTY_VARCHAR2_VALUE,
L.LANGUAGE_CODE,
B.SOURCE_LANG,
B.CREATED_BY,
B.CREATION_DATE,
B.LAST_UPDATED_BY,
B.LAST_UPDATE_DATE,
B.LAST_UPDATE_LOGIN
from AK_CUSTOM_REGIONS_TL B,
FND_LANGUAGES L
where L.INSTALLED_FLAG in ('I', 'B')
and   B.LANGUAGE = userenv('LANG')
) v, AK_CUSTOM_REGIONS_TL T
where T.CUSTOMIZATION_APPLICATION_ID(+) = v.CUSTOMIZATION_APPLICATION_ID
and   T.CUSTOMIZATION_CODE(+)           = v.CUSTOMIZATION_CODE
and   T.REGION_APPLICATION_ID(+)        = v.REGION_APPLICATION_ID
and   T.REGION_CODE(+)                  = v.REGION_CODE
and   T.PROPERTY_NAME(+)                = v.PROPERTY_NAME
and   T.LANGUAGE(+)                     = v.LANGUAGE_CODE
and T.CUSTOMIZATION_APPLICATION_ID is NULL
and T.CUSTOMIZATION_CODE is NULL
and T.REGION_APPLICATION_ID is NULL
and T.REGION_CODE is NULL
and T.PROPERTY_NAME is NULL;

end ADD_LANGUAGE;

end AK_CUSTOM_REGIONS_PKG;

/
