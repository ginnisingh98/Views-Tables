--------------------------------------------------------
--  DDL for Package Body PSP_PSPDAREG_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPDAREG_XMLP_PKG" AS
/* $Header: PSPDAREGB.pls 120.3 2007/10/29 07:20:23 amakrish noship $ */
  FUNCTION CF_NEW_CIFORMULA(GLCCID_NEW IN NUMBER
                           ,PROJECT_ID_NEW IN NUMBER
                           ,TASK_ID_NEW IN NUMBER
                           ,AWARD_ID_NEW IN NUMBER
                           ,EXP_ORG_ID_NEW IN NUMBER
                           ,EXPENDITURE_TYPE_NEW IN VARCHAR2) RETURN CHAR IS
    V_RETCODE NUMBER;
    L_CHART_OF_ACCTS VARCHAR2(20);
    GL_FLEX_VALUES VARCHAR2(2000);
    L_PROJECT_NAME VARCHAR2(30);
    L_AWARD_NUMBER VARCHAR2(15);
    L_TASK_NUMBER VARCHAR2(25);
    L_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    L_POETA_NEW VARCHAR2(2000);
  BEGIN
    IF GLCCID_NEW IS NOT NULL THEN
      V_RETCODE := PSP_GENERAL.FIND_CHART_OF_ACCTS(TO_NUMBER(P_SET_OF_BOOKS_ID)
                                                  ,L_CHART_OF_ACCTS);
      GL_FLEX_VALUES := FND_FLEX_EXT.GET_SEGS(APPLICATION_SHORT_NAME => 'SQLGL'
                                             ,KEY_FLEX_CODE => 'GL#'
                                             ,STRUCTURE_NUMBER => TO_NUMBER(L_CHART_OF_ACCTS)
                                             ,COMBINATION_ID => GLCCID_NEW);
      RETURN (GL_FLEX_VALUES);
    ELSE
      IF PROJECT_ID_NEW IS NOT NULL THEN
        SELECT
          NAME
        INTO L_PROJECT_NAME
        FROM
          PA_PROJECTS_ALL
        WHERE PROJECT_ID = PROJECT_ID_NEW;
        SELECT
          TASK_NUMBER
        INTO L_TASK_NUMBER
        FROM
          PA_TASKS
        WHERE TASK_ID = TASK_ID_NEW;
        IF AWARD_ID_NEW IS NOT NULL THEN
          SELECT
            AWARD_NUMBER
          INTO L_AWARD_NUMBER
          FROM
            GMS_AWARDS_ALL
          WHERE AWARD_ID = AWARD_ID_NEW;
        ELSE
          L_AWARD_NUMBER := '';
        END IF;
        SELECT
          NAME
        INTO L_ORG_NAME
        FROM
          HR_ALL_ORGANIZATION_UNITS
        WHERE ORGANIZATION_ID = EXP_ORG_ID_NEW;
        L_POETA_NEW := L_PROJECT_NAME || ' ' || L_TASK_NUMBER || ' ' || L_AWARD_NUMBER || ' ' || L_ORG_NAME || ' ' || EXPENDITURE_TYPE_NEW;
      ELSE
        L_POETA_NEW := '';
      END IF;
      RETURN (L_POETA_NEW);
    END IF;
  END CF_NEW_CIFORMULA;

  FUNCTION CF_OLD_CIFORMULA(GLCCID_OLD IN NUMBER
                           ,PROJECT_ID_OLD IN NUMBER
                           ,TASK_ID_OLD IN NUMBER
                           ,AWARD_ID_OLD IN NUMBER
                           ,EXP_ORG_ID_OLD IN NUMBER
                           ,EXPENDITURE_TYPE_OLD IN VARCHAR2) RETURN CHAR IS
    V_RETCODE NUMBER;
    L_CHART_OF_ACCTS VARCHAR2(20);
    GL_FLEX_VALUES VARCHAR2(2000);
    L_PROJECT_NAME VARCHAR2(30);
    L_AWARD_NUMBER VARCHAR2(15);
    L_TASK_NUMBER VARCHAR2(25);
    L_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    L_POETA_OLD VARCHAR2(2000);
  BEGIN
    IF GLCCID_OLD IS NOT NULL THEN
      V_RETCODE := PSP_GENERAL.FIND_CHART_OF_ACCTS(TO_NUMBER(P_SET_OF_BOOKS_ID)
                                                  ,L_CHART_OF_ACCTS);
      GL_FLEX_VALUES := FND_FLEX_EXT.GET_SEGS(APPLICATION_SHORT_NAME => 'SQLGL'
                                             ,KEY_FLEX_CODE => 'GL#'
                                             ,STRUCTURE_NUMBER => TO_NUMBER(L_CHART_OF_ACCTS)
                                             ,COMBINATION_ID => GLCCID_OLD);
      RETURN (GL_FLEX_VALUES);
    ELSE
      IF PROJECT_ID_OLD IS NOT NULL THEN
        SELECT
          NAME
        INTO L_PROJECT_NAME
        FROM
          PA_PROJECTS_ALL
        WHERE PROJECT_ID = PROJECT_ID_OLD;
        SELECT
          TASK_NUMBER
        INTO L_TASK_NUMBER
        FROM
          PA_TASKS
        WHERE TASK_ID = TASK_ID_OLD;
        IF AWARD_ID_OLD IS NOT NULL THEN
          SELECT
            AWARD_NUMBER
          INTO L_AWARD_NUMBER
          FROM
            GMS_AWARDS_ALL
          WHERE AWARD_ID = AWARD_ID_OLD;
        ELSE
          L_AWARD_NUMBER := '';
        END IF;
        SELECT
          NAME
        INTO L_ORG_NAME
        FROM
          HR_ALL_ORGANIZATION_UNITS
        WHERE ORGANIZATION_ID = EXP_ORG_ID_OLD;
        L_POETA_OLD := L_PROJECT_NAME || ' ' || L_TASK_NUMBER || ' ' || L_AWARD_NUMBER || ' ' || L_ORG_NAME || ' ' || EXPENDITURE_TYPE_OLD;
      ELSE
        L_POETA_OLD := '';
      END IF;
      RETURN (L_POETA_OLD);
    END IF;
  END CF_OLD_CIFORMULA;

  FUNCTION CF_BATCHFORMULA RETURN CHAR IS
  BEGIN
    RETURN (NVL(P_BATCH_NAME
              ,'All'));
  END CF_BATCHFORMULA;

  FUNCTION CF_APPROVED_BYFORMULA RETURN CHAR IS
    V_FULLNAME VARCHAR2(30);
  BEGIN
    IF P_APPROVED_BY IS NULL THEN
      RETURN ('All');
    ELSE
      SELECT
        PPX.FULL_NAME
      INTO V_FULLNAME
      FROM
        PER_PEOPLE_X PPX,
        FND_USER FU
      WHERE FU.USER_ID = P_APPROVED_BY
        AND PPX.PERSON_ID = FU.EMPLOYEE_ID;
      RETURN (V_FULLNAME);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END CF_APPROVED_BYFORMULA;

  FUNCTION CF_SUBMITTED_BYFORMULA RETURN CHAR IS
    V_FULLNAME VARCHAR2(30);
  BEGIN
    IF P_SUBMITTED_BY IS NULL THEN
      RETURN ('All');
    ELSE
      SELECT
        PPX.FULL_NAME
      INTO V_FULLNAME
      FROM
        PER_PEOPLE_X PPX,
        FND_USER FU
      WHERE FU.USER_ID = P_SUBMITTED_BY
        AND PPX.PERSON_ID = FU.EMPLOYEE_ID;
      RETURN (V_FULLNAME);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END CF_SUBMITTED_BYFORMULA;

  FUNCTION CF_ASSIGN_ORG_IDFORMULA RETURN CHAR IS
    V_ORGNAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    IF P_ASSIGNMENT_ORGANIZATION_ID IS NULL THEN
      RETURN ('All');
    ELSE
      SELECT
        NAME
      INTO V_ORGNAME
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_ASSIGNMENT_ORGANIZATION_ID;
      RETURN (V_ORGNAME);
    END IF;
  END CF_ASSIGN_ORG_IDFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_PRIMARY_ORGANIZATION_ID IS NULL THEN
      P_PRIMARY_ORG_WHERE_CLAUSE := 'AND 1=1';
    ELSE
      P_PRIMARY_ORG_WHERE_CLAUSE := 'AND pact.person_id IN
                                    		(SELECT person_id
                                    		 FROM 	per_all_assignments_f
                                    		 WHERE  organization_id = :P_PRIMARY_ORGANIZATION_ID
                                    		 AND   	primary_flag = ''Y''
                                    		 AND    trunc(sysdate) BETWEEN effective_start_date AND effective_end_date)';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_PRIMARY_ORG_NAMEFORMULA RETURN CHAR IS
    V_ORGNAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    IF P_PRIMARY_ORGANIZATION_ID IS NULL THEN
      RETURN ('All');
    ELSE
      SELECT
        DISTINCT
        NAME
      INTO V_ORGNAME
      FROM
        HR_ALL_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_PRIMARY_ORGANIZATION_ID;
      RETURN (V_ORGNAME);
    END IF;
  END CF_PRIMARY_ORG_NAMEFORMULA;

  FUNCTION CF_SOB_IDFORMULA RETURN CHAR IS
    V_SOB_ID NUMBER;
  BEGIN
    V_SOB_ID := PSP_GENERAL.GET_SPECIFIC_PROFILE('GL_SET_OF_BKS_ID');
    RETURN (TO_CHAR(V_SOB_ID));
  END CF_SOB_IDFORMULA;

  FUNCTION CF_SOB_ID2FORMULA RETURN CHAR IS
    V_SOB_ID NUMBER;
  BEGIN
    V_SOB_ID := PSP_GENERAL.GET_SPECIFIC_PROFILE('GL_SET_OF_BKS_ID');
    RETURN (TO_CHAR(V_SOB_ID));
  END CF_SOB_ID2FORMULA;

  FUNCTION CF_ADJUSTMENT_BYFORMULA(ADJUSTMENT_BY IN VARCHAR2) RETURN CHAR IS
    CURSOR ADJUST_BY_CUR IS
      SELECT
        LTRIM(MEANING)
      FROM
        FND_LOOKUP_VALUES
      WHERE LOOKUP_TYPE = 'PSP_MESSAGE_TEXT'
        AND LOOKUP_CODE = ADJUSTMENT_BY;
    L_ADJUSTMENT_BY VARCHAR2(20);
  BEGIN
    OPEN ADJUST_BY_CUR;
    FETCH ADJUST_BY_CUR
     INTO L_ADJUSTMENT_BY;
    CLOSE ADJUST_BY_CUR;
    RETURN L_ADJUSTMENT_BY;
  END CF_ADJUSTMENT_BYFORMULA;

  FUNCTION CF_SUM_CURRENCYFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN ('(' || CURRENCY_CODE || ')');
  END CF_SUM_CURRENCYFORMULA;

  FUNCTION CF_CURRENCY_FORMATFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN (FND_CURRENCY.GET_FORMAT_MASK(CURRENCY_CODE
                                       ,30));
  END CF_CURRENCY_FORMATFORMULA;

  FUNCTION CF_ORIG_AMOUNT_TOTAL_DSPFORMUL(CF_CURRENCY_FORMAT IN VARCHAR2
                                         ,CS_ORIG_AMOUNT_TOTAL IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(CS_ORIG_AMOUNT_TOTAL)*/NULL;
    RETURN (TO_CHAR(CS_ORIG_AMOUNT_TOTAL
                  ,CF_CURRENCY_FORMAT));
  END CF_ORIG_AMOUNT_TOTAL_DSPFORMUL;

  FUNCTION CF_ADJUSTED_AMOUNT_TOTAL_DSPFO(CF_CURRENCY_FORMAT IN VARCHAR2
                                         ,CS_ADJUSTED_AMOUNT_TOTAL IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(CS_ADJUSTED_AMOUNT_TOTAL)*/NULL;
    RETURN (TO_CHAR(CS_ADJUSTED_AMOUNT_TOTAL
                  ,CF_CURRENCY_FORMAT));
  END CF_ADJUSTED_AMOUNT_TOTAL_DSPFO;

  FUNCTION CF_ORIGINAL_AMOUNT_DSPFORMULA(CF_CURRENCY_FORMAT IN VARCHAR2
                                        ,ORIGINAL_AMOUNT IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(ORIGINAL_AMOUNT)*/NULL;
    RETURN (TO_CHAR(ORIGINAL_AMOUNT
                  ,CF_CURRENCY_FORMAT));
  END CF_ORIGINAL_AMOUNT_DSPFORMULA;

  FUNCTION CF_ADJUSTED_AMOUNT_DSPFORMULA(CF_CURRENCY_FORMAT IN VARCHAR2
                                        ,ADJUSTED_AMOUNT IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(ADJUSTED_AMOUNT)*/NULL;
    RETURN (TO_CHAR(ADJUSTED_AMOUNT
                  ,CF_CURRENCY_FORMAT));
  END CF_ADJUSTED_AMOUNT_DSPFORMULA;

END PSP_PSPDAREG_XMLP_PKG;

/
