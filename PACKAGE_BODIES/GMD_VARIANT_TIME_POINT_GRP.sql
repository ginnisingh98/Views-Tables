--------------------------------------------------------
--  DDL for Package Body GMD_VARIANT_TIME_POINT_GRP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_VARIANT_TIME_POINT_GRP" AS
/* $Header: GMDGSVTB.pls 120.2 2005/09/06 10:31:09 svankada noship $ */

--
-- To modify this template, edit file PKGSPEC.TXT in TEMPLATE
-- directory of SQL Navigator
--
-- Purpose: Briefly explain the functionality of the package
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  ------------------------------------------
   -- Enter package declarations as shown below

   l_variant_no        NUMBER:=-1;

   function get_max_variant_no(p_ss_id NUMBER) return NUMBER;

   PROCEDURE create_variants_time_points
     ( p_stability_study IN NUMBER,
       p_material_source_id IN NUMBER,
       x_return_status OUT NOCOPY VARCHAR2) IS


     cursor c_stab_study(p_stability_study_id NUMBER) is
      select  packages_cnt,
              base_spec_id ,
              storage_plan_id,
              storage_conditions_cnt ,
              scheduled_start_date,
              actual_start_date,
              created_by
     from   gmd_stability_studies_b
     where  ss_id = p_stability_study_id
     and    delete_mark=0;


-- bug# 2962208.
-- For the variants generated by the system, the variant start date should be
-- defaulted to the variant material source yield date.If yield date is not present
-- take the Stability study schedule start date
-- include the yield date in the cursor.

-- JD Changed lot_no to lot_number and removed lot_id as not used.

     cursor c_mat_source(p_ss_id number,
                         p_material_source_id NUMBER) is
         select ss_id,
                source_id,
                batch_id,
                recipe_id   ,
                lot_number     ,
                yield_date
         from gmd_ss_material_sources
         where delete_mark=0
         and ss_id = p_ss_id
         and (p_material_source_id IS NULL
               OR
               source_id = p_material_source_id)
          ;

     l_return_status VARCHAR2(1);
     l_package_cnt   NUMBER;


  BEGIN
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    l_variant_no := get_max_variant_no(p_stability_study);





    for l_stab_study in c_stab_study(p_stability_study) loop

      --When p_material_source_id is null, only package_cnt has changed.
      -- if gmd_stability_studies.package_cnt < no. of records in variants
      -- make the variants records for difference.
      if (p_material_source_id IS NULL) then
         select max(cnt)
         into   l_package_cnt
         from
                    (select count(*) cnt,
                            material_source_id,
                            storage_spec_id
                    from   gmd_ss_variants a
                    where  a.ss_id = p_stability_study
                    group by material_source_id, storage_spec_id);

          l_package_cnt := l_stab_study.packages_cnt - l_package_cnt;

          --dbms_output.put_line('the value of l_package_cnt is '||l_package_cnt);
          --dbms_output.put_line('the value of l_stab_study.packages_cnt is '||l_stab_study.packages_cnt);
          if l_package_cnt <= 0 then
             --dbms_output.put_line('the No. of variants package cnt is greater then or equal to stability study package cnt');
             exit;
          end if;
        end if;

        if l_package_cnt IS NULL then
          l_package_cnt := l_stab_study.packages_cnt;
        end if;

        for l_mat_source in c_mat_source(p_stability_study,
                                         p_material_source_id) loop

-- bug# 2962208.Pass yield date.
               --call insert to variants table. variant_id
            create_variants(p_stability_study,
                            l_package_cnt,
                            l_mat_source.source_id,
                            l_stab_study.storage_plan_id,
                            l_stab_study.base_spec_id,
                            NVL(l_mat_source.yield_date,l_stab_study.scheduled_start_date),
                            l_stab_study.actual_start_date,
                            l_stab_study.created_by,
                            l_return_status);

            IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
               RAISE FND_API.G_EXC_ERROR;
            END IF;

         end loop;
     end loop;

  EXCEPTION
    WHEN OTHERS THEN
      --dbms_output.put_line('GMD_VARIANT_TIME_POINT_GRP.CREATE_VARIANTS_TIME_POINTS');
      --dbms_output.put_line(SUBSTR(SQLERRM,1,100));
      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.CREATE_VARIANTS_TIME_POINTS',
                              'ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;

  END create_variants_time_points;


  procedure    create_variants(p_ss_id  NUMBER,
                               p_no_of_packages  NUMBER,
                               p_material_source_id NUMBER,
                               p_storage_plan_id NUMBER,
                               p_base_spec_id NUMBER,
                               p_scheduled_start_date DATE,
                               p_actual_start_date    DATE,
                               p_created_by NUMBER,
                               x_return_status OUT NOCOPY VARCHAR2) IS
   cursor c_storage_plan(p_storage_plan_id number) is
       select storage_spec_id   ,
              resources ,
              storage_organization_id,
              storage_subinventory,
              storage_locator_id,
              test_interval_plan_id ,
              storage_plan_detail_id
       from gmd_storage_plan_details
       where storage_plan_id = p_storage_plan_id;

-- JD changed whse_code to storage_subinventory.
-- JD changed location to storage_locator_id.

   l_variant_id        NUMBER;
   l_return_status VARCHAR2(1);

   begin
     x_return_status := FND_API.G_RET_STS_SUCCESS;


     for package_counter in 1..p_no_of_packages loop
       for l_storage_plan in c_storage_plan(p_storage_plan_id) loop

         select gmd_qc_ss_variant_id_s.nextval
         into   l_variant_id
         from   dual;
         l_variant_no := l_variant_no +1;

-- JD changed whse_code to storage_subinventory.
-- JD changed location to storage_locator_id.

         insert into gmd_ss_variants
                              (variant_id,
                              variant_no,
                              ss_id,
                              material_source_id,
                              storage_plan_detail_id,
                              default_spec_id,
                              scheduled_start_date,
                              samples_per_time_point,
                              retained_samples,
                              storage_spec_id,
                              resources,
                              storage_organization_id,     --INVCONV
                              storage_subinventory,        --INVCONV
                              storage_locator_id,          --INVCONV
                              storage_date,
                              delete_mark,
                              creation_date,
                              created_by,
                              last_updated_by,
                              last_update_date,
                              last_update_login)
                              values       (l_variant_id,
                              l_variant_no,
                              p_ss_id,
                              p_material_source_id,
                              l_storage_plan.storage_plan_detail_id,
                              p_base_spec_id,
                              p_scheduled_start_date,
                              1,
                              0,
                              l_storage_plan.storage_spec_id,
                              l_storage_plan.resources,
                              l_storage_plan.storage_organization_id,  --INVCONV
                              l_storage_plan.storage_subinventory,     --INVCONV
                              l_storage_plan.storage_locator_id,       --INVCONV
                              p_scheduled_start_date,
                              0,
                              sysdate,
                              p_created_by,
                              p_created_by,
                              sysdate,
                              p_created_by);


         create_time_points(l_variant_id,
                            p_scheduled_start_date,
                            p_base_spec_id,
                            l_storage_plan.test_interval_plan_id,
                            p_actual_start_date,
                            1,
                            p_created_by,
                            l_return_status);

         IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
            RAISE FND_API.G_EXC_ERROR;
         END IF;

       end loop;
     end loop;
  EXCEPTION
    WHEN OTHERS THEN
      --dbms_output.put_line('GMD_VARIANT_TIME_POINT_GRP.CREATE_VARIANTS');
      --dbms_output.put_line(SUBSTR(SQLERRM,1,100));
      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.CREATE_VARIANTS',
                              'ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
  end  create_variants;

   procedure create_time_points(p_variant_id   NUMBER,
                                p_scheduled_start_date   DATE,
                                p_base_spec_id NUMBER,
  			        p_test_interval_plan_id NUMBER,
  			        p_actual_date   DATE,
                                p_samples_per_time_point NUMBER,
  			        p_created_by   NUMBER,
  			        x_return_status OUT NOCOPY VARCHAR2) IS
   cursor c_time_interval_plan(p_test_interval_plan_id number) is
       select period_id, name                    ,
              years_from_start               ,
              months_from_start              ,
              weeks_from_start               ,
              days_from_start                ,
              hours_from_start
       from gmd_test_interval_plan_periods
       where test_interval_plan_id = p_test_interval_plan_id
       and   nvl(exclude,'N') = 'N'
       order by simulated_date;



       l_test_interval_plan_id NUMBER;

   begin
      x_return_status := FND_API.G_RET_STS_SUCCESS;
      if (p_test_interval_plan_id IS NULL) then
         select a.test_interval_plan_id
         into   l_test_interval_plan_id
         from   gmd_storage_plan_details a,
                gmd_ss_variants b
         where  a.storage_plan_detail_id = b.storage_plan_detail_id
         and    b.variant_id      = p_variant_id
          ;
      else
         l_test_interval_plan_id := p_test_interval_plan_id;
      end if;

      for l_time_interval_plan in c_time_interval_plan(l_test_interval_plan_id)   loop
        insert into gmd_ss_time_points
          (
           time_point_id,
           name,
           variant_id,
           period_id ,
           years_from_start,
           months_from_start,
           weeks_from_start,
           days_from_start,
           hours_from_start,
           additional_ind,
           spec_id,
           scheduled_date,
           --actual_date,
           samples_per_time_point,
           delete_mark,
           creation_date,
           created_by,
           last_updated_by,
           last_update_date,
           last_update_login)
         values
           (gmd_qc_ss_time_point_id_s.nextval,
            l_time_interval_plan.name,
            p_variant_id,
            l_time_interval_plan.period_id,
            l_time_interval_plan.years_from_start,
            l_time_interval_plan.months_from_start,
            l_time_interval_plan.weeks_from_start,
            l_time_interval_plan.days_from_start ,
            l_time_interval_plan.hours_from_start,
            'N',
            p_base_spec_id,
            ADD_MONTHS(p_scheduled_start_date,
            ((NVL(l_time_interval_plan.years_from_start,0) * 12 )
             + NVL(l_time_interval_plan.months_from_start,0)))
             +((NVL(l_time_interval_plan.weeks_from_start,0) * 7 )
             + NVL(l_time_interval_plan.days_from_start,0)
             + (NVL(l_time_interval_plan.hours_from_start,0)/24)),
           /*   ADD_MONTHS(p_actual_date,
            ((NVL(l_time_interval_plan.years_from_start,0) * 12 )
             + NVL(l_time_interval_plan.months_from_start,0)))
             +((NVL(l_time_interval_plan.weeks_from_start,0) * 7 )
             + NVL(l_time_interval_plan.days_from_start,0)
             + (NVL(l_time_interval_plan.hours_from_start,0)/24)),*/
            p_samples_per_time_point,
            0,
            sysdate,
            p_created_by,
            p_created_by,
            sysdate,
            p_created_by);
        end loop;
    EXCEPTION
    WHEN OTHERS THEN
      --dbms_output.put_line('GMD_VARIANT_TIME_POINT_GRP.CREATE_TIME_POINTS');
      --dbms_output.put_line(SUBSTR(SQLERRM,1,100));

      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.CREATE_TIME_POINTS',
                              'ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
     end create_time_points;


   PROCEDURE delete_variants
     (p_material_source_id IN NUMBER,
      x_return_status      OUT NOCOPY VARCHAR2) IS
      Cursor c_ss_id is
        select ss_id
        from gmd_ss_variants
        where material_source_id = p_material_source_id;
     l_return_status VARCHAR2(1);
     l_ss_id         NUMBER;

-- mahesh.
     CURSOR cr_variants IS
     SELECT variant_id from gmd_ss_variants
     where material_source_id = p_material_source_id
     for update of variant_id NOWAIT;

     CURSOR cr_time_points IS
     SELECT time_point_id from gmd_ss_time_points
     where variant_id in (select variant_id
                            from gmd_ss_variants
                            where material_source_id = p_material_source_id)
     for update of time_point_id NOWAIT ;

     record_lock	EXCEPTION ;
     pragma exception_init(record_lock,-00054) ;



    begin

      x_return_status := FND_API.G_RET_STS_SUCCESS;

      OPEN c_ss_id;
      FETCH c_ss_id into l_ss_id;
      CLOSE c_ss_id;

      -- lock the variants and time points before deleting.
      -- mahesh
      OPEN  cr_variants ;
      CLOSE cr_variants ;

      OPEN  cr_time_points ;
      CLOSE cr_time_points ;

      delete gmd_ss_time_points
      where  variant_id in (select variant_id
                            from gmd_ss_variants
                            where material_source_id = p_material_source_id);
      delete gmd_ss_variants
      where  material_source_id = p_material_source_id;

      update_variant_seq(l_ss_id, l_return_status);

    EXCEPTION
    WHEN RECORD_LOCK THEN -- mahesh
      IF cr_variants%ISOPEN THEN
         CLOSE cr_variants;
      END IF;
      IF cr_time_points%ISOPEN THEN
         CLOSE cr_time_points;
      END IF;
      GMD_API_PUB.Log_Message('GMD_SS_VARIANTS_LOCKED');
      x_return_status := FND_API.G_RET_STS_ERROR ;
    WHEN OTHERS THEN
      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.DELETE_VARIANTS',
                              'ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    end delete_variants;



    PROCEDURE delete_time_points
     (p_variant_id IN NUMBER,
      x_return_status      OUT NOCOPY VARCHAR2) IS
      Cursor c_ss_id is
        select ss_id
        from gmd_ss_material_sources
        where ss_id = p_variant_id;
     l_return_status VARCHAR2(1);
     l_ss_id         NUMBER;

-- mahesh.


     CURSOR cr_time_points IS
     SELECT time_point_id from gmd_ss_time_points
     where variant_id = p_variant_id
     for update of time_point_id NOWAIT ;

     record_lock	EXCEPTION ;
     pragma exception_init(record_lock,-00054) ;



    begin

      x_return_status := FND_API.G_RET_STS_SUCCESS;

      -- lock the variants and time points before deleting.
      -- mahesh


      OPEN  cr_time_points ;
      CLOSE cr_time_points ;

      delete gmd_ss_time_points
      where  variant_id = p_variant_id;



    EXCEPTION
    WHEN RECORD_LOCK THEN -- mahesh

      IF cr_time_points%ISOPEN THEN
         CLOSE cr_time_points;
      END IF;
      GMD_API_PUB.Log_Message('GMD_SS_VARIANTS_LOCKED');
      x_return_status := FND_API.G_RET_STS_ERROR ;
    WHEN OTHERS THEN
      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.DELETE_TIME_POINTS',
                              'ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    end delete_time_points;


   function get_max_variant_no(p_ss_id NUMBER) RETURN NUMBER IS
     l_variant_num   NUMBER;
   begin
      select nvl(max(a.variant_no),0)
      into   l_variant_num
      from   gmd_ss_variants a
      where  a.ss_id = p_ss_id
      ;

      return l_variant_num;
    end get_max_variant_no;

    PROCEDURE update_variant_seq
                           (ss_id            IN NUMBER,
                            x_return_status OUT NOCOPY VARCHAR2) is
       cursor c_variant_no (p_ss_id NUMBER) is
        select variant_id,variant_no, rownum
        from gmd_ss_variants
        where ss_id = p_ss_id
        order by variant_no;
      begin
        for l_variant_no in  c_variant_no(ss_id) loop
          update gmd_ss_variants
          set    variant_no = l_variant_no.rownum
          where  variant_id = l_variant_no.variant_id;
         end loop;
         EXCEPTION
      WHEN OTHERS THEN
        GMD_API_PUB.Log_Message('GMD_API_ERROR',
                                'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.UPDATE_VARIANT_SEQ',
                                 'ERROR', SUBSTR(SQLERRM,1,100));
         x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
       end update_variant_seq;


   PROCEDURE update_base_spec(	p_ss_id 	IN NUMBER,
	 			p_base_spec_id	IN NUMBER,
	 			x_return_status OUT NOCOPY VARCHAR2 ) IS
   -- mahesh.
     CURSOR cr_variants IS
     SELECT default_spec_id from gmd_ss_variants
     where ss_id = p_ss_id
     for update of default_spec_id NOWAIT;

     CURSOR cr_time_points IS
     SELECT spec_id from gmd_ss_time_points
     where variant_id in (select variant_id
                            from gmd_ss_variants
                            where ss_id = p_ss_id)
     for update of spec_id NOWAIT ;

     record_lock	EXCEPTION ;
     pragma exception_init(record_lock,-00054) ;
     REQ_FIELDS_MISSING		EXCEPTION;

   BEGIN

      x_return_status := FND_API.G_RET_STS_SUCCESS;

      IF p_ss_id IS NULL OR p_base_spec_id IS NULL THEN
     	 RAISE REQ_FIELDS_MISSING ;
      END IF;

      -- lock the variants and time points before updating.
      -- mahesh
      OPEN  cr_variants ;
      CLOSE cr_variants ;

      OPEN  cr_time_points ;
      CLOSE cr_time_points ;

      UPDATE gmd_ss_variants
      SET default_spec_id = p_base_spec_id
      WHERE ss_id = p_ss_id ;

      UPDATE gmd_ss_time_points
      SET spec_id = p_base_spec_id
      WHERE variant_id in (select variant_id from gmd_ss_variants
                            where ss_id = p_ss_id) ;

    EXCEPTION
    WHEN RECORD_LOCK THEN -- mahesh
      IF cr_variants%ISOPEN THEN
         CLOSE cr_variants;
      END IF;
      IF cr_time_points%ISOPEN THEN
         CLOSE cr_time_points;
      END IF;
      GMD_API_PUB.Log_Message('GMD_SS_VARIANTS_LOCKED');
      x_return_status := FND_API.G_RET_STS_ERROR ;
    WHEN REQ_FIELDS_MISSING THEN
   	gmd_api_pub.log_message('GMD_REQ_FIELD_MIS','PACKAGE','GMD_VARIANT_TIME_POINT_GRP.UPDATE_BASE_SPEC');
        x_return_status := FND_API.G_RET_STS_ERROR ;
    WHEN OTHERS THEN
      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.UPDATE_BASE_SPEC','ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
   END update_base_spec ;

   PROCEDURE update_scheduled_start_date
	(p_ss_id 		IN NUMBER,
	 p_scheduled_start_date	IN DATE,
	 x_return_status 	OUT NOCOPY VARCHAR2 ) IS
-- mahesh.
     CURSOR cr_variants IS
     SELECT scheduled_start_date from gmd_ss_variants
     where ss_id = p_ss_id
     for update of scheduled_start_date NOWAIT;

     CURSOR cr_time_points IS
     SELECT spec_id from gmd_ss_time_points
     where variant_id in (select variant_id
                            from gmd_ss_variants
                            where ss_id = p_ss_id)
     for update of spec_id NOWAIT ;

     record_lock	EXCEPTION ;
     pragma exception_init(record_lock,-00054) ;

     REQ_FIELDS_MISSING		EXCEPTION;

   BEGIN

      x_return_status := FND_API.G_RET_STS_SUCCESS;

      IF p_ss_id IS NULL OR p_scheduled_start_date IS NULL THEN
     	 RAISE REQ_FIELDS_MISSING ;
      END IF;

      -- lock the variants and time points before deleting.
      -- mahesh
      OPEN  cr_variants ;
      CLOSE cr_variants ;

      OPEN  cr_time_points ;
      CLOSE cr_time_points ;

      UPDATE gmd_ss_variants
      SET scheduled_start_date = p_scheduled_start_date
      WHERE ss_id = p_ss_id ;

      UPDATE gmd_ss_time_points
      SET scheduled_date = ADD_MONTHS(p_scheduled_start_date,((nvl(years_from_start,0) * 12 ) + nvl(months_from_start,0))) +
		 ((nvl(weeks_from_start,0) * 7 ) + nvl(days_from_start,0) + (nvl(hours_from_start,0)/24))
      WHERE variant_id in (select variant_id from gmd_ss_variants
                            where ss_id = p_ss_id) ;



    EXCEPTION
    WHEN RECORD_LOCK THEN -- mahesh
      IF cr_variants%ISOPEN THEN
         CLOSE cr_variants;
      END IF;
      IF cr_time_points%ISOPEN THEN
         CLOSE cr_time_points;
      END IF;
      GMD_API_PUB.Log_Message('GMD_SS_VARIANTS_LOCKED');
      x_return_status := FND_API.G_RET_STS_ERROR ;
    WHEN REQ_FIELDS_MISSING THEN
   	gmd_api_pub.log_message('GMD_REQ_FIELD_MIS','PACKAGE','GMD_VARIANT_TIME_POINT_GRP.UPDATE_SCHEDULED_START_DATE');
        x_return_status := FND_API.G_RET_STS_ERROR ;
    WHEN OTHERS THEN
      GMD_API_PUB.Log_Message('GMD_API_ERROR',
                              'PACKAGE','GMD_VARIANT_TIME_POINT_GRP.UPDATE_SCHEDULED_START_DATE','ERROR', SUBSTR(SQLERRM,1,100));
      x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;

   END update_scheduled_start_date;


 PROCEDURE submit_srs_request(p_variant_id IN NUMBER,
                              p_time_point_id IN NUMBER,
                              p_conc_id OUT NOCOPY NUMBER ) is
 BEGIN
    p_conc_id := FND_REQUEST.SUBMIT_REQUEST('GMD', 'SAMPLE_LABEL_GEN_STBL', '', '', FALSE,
                  '', '', '',',',p_variant_id, p_time_point_id);
  END submit_srs_request;
END GMD_VARIANT_TIME_POINT_GRP; -- Package body

/
