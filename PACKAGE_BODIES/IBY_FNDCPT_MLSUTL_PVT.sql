--------------------------------------------------------
--  DDL for Package Body IBY_FNDCPT_MLSUTL_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IBY_FNDCPT_MLSUTL_PVT" AS
/* $Header: ibyfcmub.pls 120.14.12010000.1 2008/07/28 05:40:35 appldev ship $ */

procedure EXTRACT_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_EXTRACT_ID in NUMBER,
  X_DATASOURCE_CODE in VARCHAR2,
  X_GEN_CODE_LANGUAGE in VARCHAR2,
  X_GEN_CODE_PACKAGE in VARCHAR2,
  X_GEN_CODE_ENTRY_POINT in VARCHAR2,
  X_EXTRACT_CODE in VARCHAR2,
  X_EXTRACT_VERSION in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_EXTRACT_DESC in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_EXTRACTS_B
    where EXTRACT_ID = X_EXTRACT_ID
    ;
begin
  insert into IBY_EXTRACTS_B (
    DATASOURCE_CODE,
    GEN_CODE_LANGUAGE,
    GEN_CODE_PACKAGE,
    GEN_CODE_ENTRY_POINT,
    EXTRACT_ID,
    EXTRACT_CODE,
    EXTRACT_VERSION,
    OBJECT_VERSION_NUMBER,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_DATASOURCE_CODE,
    X_GEN_CODE_LANGUAGE,
    X_GEN_CODE_PACKAGE,
    X_GEN_CODE_ENTRY_POINT,
    X_EXTRACT_ID,
    X_EXTRACT_CODE,
    X_EXTRACT_VERSION,
    X_OBJECT_VERSION_NUMBER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_EXTRACTS_TL (
    EXTRACT_DESC,
    EXTRACT_ID,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_EXTRACT_DESC,
    X_EXTRACT_ID,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_EXTRACTS_TL T
    where T.EXTRACT_ID = X_EXTRACT_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end EXTRACT_INSERT_ROW;

procedure EXTRACT_UPDATE_ROW (
  X_EXTRACT_ID in NUMBER,
  X_DATASOURCE_CODE in VARCHAR2,
  X_GEN_CODE_LANGUAGE in VARCHAR2,
  X_GEN_CODE_PACKAGE in VARCHAR2,
  X_GEN_CODE_ENTRY_POINT in VARCHAR2,
  X_EXTRACT_CODE in VARCHAR2,
  X_EXTRACT_VERSION in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_EXTRACT_DESC in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_EXTRACTS_B set
    DATASOURCE_CODE = X_DATASOURCE_CODE,
    GEN_CODE_LANGUAGE = X_GEN_CODE_LANGUAGE,
    GEN_CODE_PACKAGE = X_GEN_CODE_PACKAGE,
    GEN_CODE_ENTRY_POINT = X_GEN_CODE_ENTRY_POINT,
    EXTRACT_CODE = X_EXTRACT_CODE,
    EXTRACT_VERSION = X_EXTRACT_VERSION,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where EXTRACT_ID = X_EXTRACT_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_EXTRACTS_TL set
    EXTRACT_DESC = X_EXTRACT_DESC,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where EXTRACT_ID = X_EXTRACT_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end EXTRACT_UPDATE_ROW;

procedure EXTRACT_DELETE_ROW (
  X_EXTRACT_ID in NUMBER
) is
begin
  delete from IBY_EXTRACTS_TL
  where EXTRACT_ID = X_EXTRACT_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_EXTRACTS_B
  where EXTRACT_ID = X_EXTRACT_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end EXTRACT_DELETE_ROW;

procedure EXTRACT_ADD_LANGUAGE
is
begin
  delete from IBY_EXTRACTS_TL T
  where not exists
    (select NULL
    from IBY_EXTRACTS_B B
    where B.EXTRACT_ID = T.EXTRACT_ID
    );

  update IBY_EXTRACTS_TL T set (
      EXTRACT_DESC
    ) = (select
      B.EXTRACT_DESC
    from IBY_EXTRACTS_TL B
    where B.EXTRACT_ID = T.EXTRACT_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.EXTRACT_ID,
      T.LANGUAGE
  ) in (select
      SUBT.EXTRACT_ID,
      SUBT.LANGUAGE
    from IBY_EXTRACTS_TL SUBB, IBY_EXTRACTS_TL SUBT
    where SUBB.EXTRACT_ID = SUBT.EXTRACT_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.EXTRACT_DESC <> SUBT.EXTRACT_DESC
      or (SUBB.EXTRACT_DESC is null and SUBT.EXTRACT_DESC is not null)
      or (SUBB.EXTRACT_DESC is not null and SUBT.EXTRACT_DESC is null)
  ));

  insert into IBY_EXTRACTS_TL (
    EXTRACT_DESC,
    EXTRACT_ID,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.EXTRACT_DESC,
    B.EXTRACT_ID,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_EXTRACTS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_EXTRACTS_TL T
    where T.EXTRACT_ID = B.EXTRACT_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end EXTRACT_ADD_LANGUAGE;

procedure EXTRACT_LOAD_ROW (
  X_EXTRACT_ID in NUMBER,
  X_DATASOURCE_CODE in VARCHAR2,
  X_GEN_CODE_LANGUAGE in VARCHAR2,
  X_GEN_CODE_PACKAGE in VARCHAR2,
  X_GEN_CODE_ENTRY_POINT in VARCHAR2,
  X_EXTRACT_CODE in VARCHAR2,
  X_EXTRACT_VERSION in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_EXTRACT_DESC in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  EXTRACT_UPDATE_ROW (
    X_EXTRACT_ID,
    X_DATASOURCE_CODE,
    X_GEN_CODE_LANGUAGE,
    X_GEN_CODE_PACKAGE,
    X_GEN_CODE_ENTRY_POINT,
    X_EXTRACT_CODE,
    X_EXTRACT_VERSION,
    X_OBJECT_VERSION_NUMBER,
    X_EXTRACT_DESC,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER));
exception
  when no_data_found then
    EXTRACT_INSERT_ROW (
      row_id,
      X_EXTRACT_ID,
      X_DATASOURCE_CODE,
      X_GEN_CODE_LANGUAGE,
      X_GEN_CODE_PACKAGE,
      X_GEN_CODE_ENTRY_POINT,
      X_EXTRACT_CODE,
      X_EXTRACT_VERSION,
      X_OBJECT_VERSION_NUMBER,
      X_EXTRACT_DESC,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER));
end;

procedure EXTRACT_TRANSLATE_ROW (
  X_EXTRACT_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_EXTRACT_DESC in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_extracts_tl set
    EXTRACT_DESC = X_EXTRACT_DESC,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and EXTRACT_ID = X_EXTRACT_ID;
end;


procedure FORMAT_INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_FORMAT_CODE in VARCHAR2,
  X_FORMAT_TYPE_CODE in VARCHAR2,
  X_FORMAT_TEMPLATE_CODE in VARCHAR2,
  X_EXTRACT_ID in NUMBER,
  X_REFERENCE_FORMAT_CODE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SEEDED_FLAG in VARCHAR2,
  X_FORMAT_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FORMATS_B
    where FORMAT_CODE = X_FORMAT_CODE
    ;
begin
  insert into IBY_FORMATS_B (
    FORMAT_CODE,
    FORMAT_TYPE_CODE,
    FORMAT_TEMPLATE_CODE,
    EXTRACT_ID,
    REFERENCE_FORMAT_CODE,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    OBJECT_VERSION_NUMBER,
    SEEDED_FLAG,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_FORMAT_CODE,
    X_FORMAT_TYPE_CODE,
    X_FORMAT_TEMPLATE_CODE,
    X_EXTRACT_ID,
    X_REFERENCE_FORMAT_CODE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_OBJECT_VERSION_NUMBER,
    X_SEEDED_FLAG,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FORMATS_TL (
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    FORMAT_NAME,
    CREATED_BY,
    FORMAT_CODE,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    X_FORMAT_NAME,
    X_CREATED_BY,
    X_FORMAT_CODE,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FORMATS_TL T
    where T.FORMAT_CODE = X_FORMAT_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end FORMAT_INSERT_ROW;

procedure FORMAT_UPDATE_ROW (
  X_FORMAT_CODE in VARCHAR2,
  X_FORMAT_TYPE_CODE in VARCHAR2,
  X_FORMAT_TEMPLATE_CODE in VARCHAR2,
  X_EXTRACT_ID in NUMBER,
  X_REFERENCE_FORMAT_CODE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SEEDED_FLAG in VARCHAR2,
  X_FORMAT_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FORMATS_B set
    FORMAT_TYPE_CODE = X_FORMAT_TYPE_CODE,
    FORMAT_TEMPLATE_CODE = X_FORMAT_TEMPLATE_CODE,
    EXTRACT_ID = X_EXTRACT_ID,
    REFERENCE_FORMAT_CODE = X_REFERENCE_FORMAT_CODE,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    SEEDED_FLAG = X_SEEDED_FLAG,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where FORMAT_CODE = X_FORMAT_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FORMATS_TL set
    FORMAT_NAME = X_FORMAT_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where FORMAT_CODE = X_FORMAT_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end FORMAT_UPDATE_ROW;

procedure FORMAT_DELETE_ROW (
  X_FORMAT_CODE in VARCHAR2
) is
begin
  delete from IBY_FORMATS_TL
  where FORMAT_CODE = X_FORMAT_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FORMATS_B
  where FORMAT_CODE = X_FORMAT_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end FORMAT_DELETE_ROW;

procedure FORMAT_ADD_LANGUAGE
is
begin
  delete from IBY_FORMATS_TL T
  where not exists
    (select NULL
    from IBY_FORMATS_B B
    where B.FORMAT_CODE = T.FORMAT_CODE
    );

  update IBY_FORMATS_TL T set (
      FORMAT_NAME
    ) = (select
      B.FORMAT_NAME
    from IBY_FORMATS_TL B
    where B.FORMAT_CODE = T.FORMAT_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.FORMAT_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.FORMAT_CODE,
      SUBT.LANGUAGE
    from IBY_FORMATS_TL SUBB, IBY_FORMATS_TL SUBT
    where SUBB.FORMAT_CODE = SUBT.FORMAT_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.FORMAT_NAME <> SUBT.FORMAT_NAME
  ));

  insert into IBY_FORMATS_TL (
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    FORMAT_NAME,
    CREATED_BY,
    FORMAT_CODE,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    B.FORMAT_NAME,
    B.CREATED_BY,
    B.FORMAT_CODE,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FORMATS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FORMATS_TL T
    where T.FORMAT_CODE = B.FORMAT_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end FORMAT_ADD_LANGUAGE;

procedure FORMAT_LOAD_ROW (
  X_FORMAT_CODE in VARCHAR2,
  X_FORMAT_TYPE_CODE in VARCHAR2,
  X_FORMAT_TEMPLATE_CODE in VARCHAR2,
  X_EXTRACT_ID in NUMBER,
  X_REFERENCE_FORMAT_CODE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SEEDED_FLAG in VARCHAR2,
  X_FORMAT_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  FORMAT_UPDATE_ROW(
    X_FORMAT_CODE,
    X_FORMAT_TYPE_CODE,
    X_FORMAT_TEMPLATE_CODE,
    X_EXTRACT_ID,
    X_REFERENCE_FORMAT_CODE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_OBJECT_VERSION_NUMBER,
    X_SEEDED_FLAG,
    X_FORMAT_NAME,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER));
exception
  when no_data_found then
    FORMAT_INSERT_ROW (
      row_id,
      X_FORMAT_CODE,
      X_FORMAT_TYPE_CODE,
      X_FORMAT_TEMPLATE_CODE,
      X_EXTRACT_ID,
      X_REFERENCE_FORMAT_CODE,
      X_ATTRIBUTE_CATEGORY,
      X_ATTRIBUTE1,
      X_ATTRIBUTE2,
      X_ATTRIBUTE3,
      X_ATTRIBUTE4,
      X_ATTRIBUTE5,
      X_ATTRIBUTE6,
      X_ATTRIBUTE7,
      X_ATTRIBUTE8,
      X_ATTRIBUTE9,
      X_ATTRIBUTE10,
      X_ATTRIBUTE11,
      X_ATTRIBUTE12,
      X_ATTRIBUTE13,
      X_ATTRIBUTE14,
      X_ATTRIBUTE15,
      X_OBJECT_VERSION_NUMBER,
      X_SEEDED_FLAG,
      X_FORMAT_NAME,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER));
end;

procedure FORMAT_TRANSLATE_ROW (
  X_FORMAT_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_FORMAT_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_formats_tl set
    FORMAT_NAME = X_FORMAT_NAME,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and FORMAT_CODE = X_FORMAT_CODE;
end;


procedure BEP_OPT_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_BEPID in NUMBER,
  X_ACCOUNT_OPTION_CODE in VARCHAR2,
  X_ACCOUNT_OPTION_DATATYPE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_DISPLAY_ORDER in NUMBER,
  X_ACCOUNT_OPTION_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_SECURED_FLAG in VARCHAR2,
  X_UNIQUE_PER_BATCH_FLAG in VARCHAR2
) is
  cursor C is select ROWID from IBY_BEP_ACCT_OPT_NAME_B
    where BEPID = X_BEPID
    and ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE
    ;
begin
  insert into IBY_BEP_ACCT_OPT_NAME_B (
    BEPID,
    ACCOUNT_OPTION_CODE,
    ACCOUNT_OPTION_DATATYPE,
    OBJECT_VERSION_NUMBER,
    DISPLAY_ORDER,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    SECURED_FLAG,
    UNIQUE_PER_BATCH_FLAG
  ) values (
    X_BEPID,
    X_ACCOUNT_OPTION_CODE,
    X_ACCOUNT_OPTION_DATATYPE,
    X_OBJECT_VERSION_NUMBER,
    X_DISPLAY_ORDER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_SECURED_FLAG,
    X_UNIQUE_PER_BATCH_FLAG
  );

  insert into IBY_BEP_ACCT_OPT_NAME_TL (
    ACCOUNT_OPTION_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    BEPID,
    ACCOUNT_OPTION_CODE,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_ACCOUNT_OPTION_NAME,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    X_BEPID,
    X_ACCOUNT_OPTION_CODE,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_BEP_ACCT_OPT_NAME_TL T
    where T.BEPID = X_BEPID
    and T.ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end BEP_OPT_INSERT_ROW;

procedure BEP_OPT_UPDATE_ROW (
  X_BEPID in NUMBER,
  X_ACCOUNT_OPTION_CODE in VARCHAR2,
  X_ACCOUNT_OPTION_DATATYPE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_DISPLAY_ORDER in NUMBER,
  X_ACCOUNT_OPTION_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_SECURED_FLAG in VARCHAR2,
  X_UNIQUE_PER_BATCH_FLAG in VARCHAR2
) is
begin
  update IBY_BEP_ACCT_OPT_NAME_B set
    ACCOUNT_OPTION_DATATYPE = X_ACCOUNT_OPTION_DATATYPE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    DISPLAY_ORDER = X_DISPLAY_ORDER,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SECURED_FLAG = X_SECURED_FLAG,
    UNIQUE_PER_BATCH_FLAG = X_UNIQUE_PER_BATCH_FLAG
  where BEPID = X_BEPID
  and ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_BEP_ACCT_OPT_NAME_TL set
    ACCOUNT_OPTION_NAME = X_ACCOUNT_OPTION_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where BEPID = X_BEPID
  and ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end BEP_OPT_UPDATE_ROW;

procedure BEP_OPT_DELETE_ROW (
  X_BEPID in NUMBER,
  X_ACCOUNT_OPTION_CODE in VARCHAR2
) is
begin
  delete from IBY_BEP_ACCT_OPT_NAME_TL
  where BEPID = X_BEPID
  and ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_BEP_ACCT_OPT_NAME_B
  where BEPID = X_BEPID
  and ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end BEP_OPT_DELETE_ROW;

procedure BEP_OPT_ADD_LANGUAGE
is
begin
  delete from IBY_BEP_ACCT_OPT_NAME_TL T
  where not exists
    (select NULL
    from IBY_BEP_ACCT_OPT_NAME_B B
    where B.BEPID = T.BEPID
    and B.ACCOUNT_OPTION_CODE = T.ACCOUNT_OPTION_CODE
    );

  update IBY_BEP_ACCT_OPT_NAME_TL T set (
      ACCOUNT_OPTION_NAME
    ) = (select
      B.ACCOUNT_OPTION_NAME
    from IBY_BEP_ACCT_OPT_NAME_TL B
    where B.BEPID = T.BEPID
    and B.ACCOUNT_OPTION_CODE = T.ACCOUNT_OPTION_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.BEPID,
      T.ACCOUNT_OPTION_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.BEPID,
      SUBT.ACCOUNT_OPTION_CODE,
      SUBT.LANGUAGE
    from IBY_BEP_ACCT_OPT_NAME_TL SUBB, IBY_BEP_ACCT_OPT_NAME_TL SUBT
    where SUBB.BEPID = SUBT.BEPID
    and SUBB.ACCOUNT_OPTION_CODE = SUBT.ACCOUNT_OPTION_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.ACCOUNT_OPTION_NAME <> SUBT.ACCOUNT_OPTION_NAME
  ));

  insert into IBY_BEP_ACCT_OPT_NAME_TL (
    ACCOUNT_OPTION_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    BEPID,
    ACCOUNT_OPTION_CODE,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.ACCOUNT_OPTION_NAME,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    B.BEPID,
    B.ACCOUNT_OPTION_CODE,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_BEP_ACCT_OPT_NAME_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_BEP_ACCT_OPT_NAME_TL T
    where T.BEPID = B.BEPID
    and T.ACCOUNT_OPTION_CODE = B.ACCOUNT_OPTION_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end BEP_OPT_ADD_LANGUAGE;

procedure BEP_OPT_LOAD_ROW (
  X_BEPID in NUMBER,
  X_ACCOUNT_OPTION_CODE in VARCHAR2,
  X_ACCOUNT_OPTION_DATATYPE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_DISPLAY_ORDER in NUMBER,
  X_ACCOUNT_OPTION_NAME in VARCHAR2,
  X_OWNER in VARCHAR2,
  X_SECURED_FLAG in VARCHAR2,
  X_UNIQUE_PER_BATCH_FLAG in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  bep_opt_update_row (
    X_BEPID,
    X_ACCOUNT_OPTION_CODE,
    X_ACCOUNT_OPTION_DATATYPE,
    X_OBJECT_VERSION_NUMBER,
    X_DISPLAY_ORDER,
    X_ACCOUNT_OPTION_NAME,
    trunc(sysdate),
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER),
    X_SECURED_FLAG,
    X_UNIQUE_PER_BATCH_FLAG);

  exception
    when no_data_found then
      bep_opt_insert_row (
        row_id,
        X_BEPID,
        X_ACCOUNT_OPTION_CODE,
        X_ACCOUNT_OPTION_DATATYPE,
        X_OBJECT_VERSION_NUMBER,
        X_DISPLAY_ORDER,
        X_ACCOUNT_OPTION_NAME,
        trunc(sysdate),
        fnd_load_util.owner_id(X_OWNER),
        trunc(sysdate),
        fnd_load_util.owner_id(X_OWNER),
        fnd_load_util.owner_id(X_OWNER),
        X_SECURED_FLAG,
        X_UNIQUE_PER_BATCH_FLAG);
end;

procedure BEP_OPT_TRANSLATE_ROW (
  X_BEPID in NUMBER,
  X_ACCOUNT_OPTION_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ACCOUNT_OPTION_NAME in VARCHAR2,
  X_OWNER in VARCHAR2)
is
begin
  update iby_bep_acct_opt_name_tl set
    ACCOUNT_OPTION_NAME = X_ACCOUNT_OPTION_NAME,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = trunc(sysdate),
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and BEPID = X_BEPID
    and ACCOUNT_OPTION_CODE = X_ACCOUNT_OPTION_CODE;
end;


procedure SYS_CC_PROF_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_SYS_CC_PROFILE_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_PRTCL_CODE in VARCHAR2,
  X_SETTLEMENT_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ONLINE_AUTH_FORMAT_CODE in VARCHAR2,
  X_ONLINE_AUTH_TRANS_PRTCL_CODE in VARCHAR2,
  X_ONLINE_AUTH_ACK_RDR_CODE in VARCHAR2,
  X_SETTLEMENT_FORMAT_CODE in VARCHAR2,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_SYS_CC_PROFILE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FNDCPT_SYS_CC_PF_B
    where SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE
    ;
begin
  insert into IBY_FNDCPT_SYS_CC_PF_B (
    SETTLEMENT_TRANS_PRTCL_CODE,
    SETTLEMENT_ACK_RDR_CODE,
    QUERY_FORMAT_CODE,
    QUERY_TRANS_PRTCL_CODE,
    QUERY_ACK_RDR_CODE,
    INACTIVE_DATE,
    OBJECT_VERSION_NUMBER,
    ONLINE_AUTH_FORMAT_CODE,
    ONLINE_AUTH_TRANS_PRTCL_CODE,
    ONLINE_AUTH_ACK_RDR_CODE,
    SETTLEMENT_FORMAT_CODE,
    SYS_CC_PROFILE_CODE,
    PAYMENT_SYSTEM_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_SETTLEMENT_TRANS_PRTCL_CODE,
    X_SETTLEMENT_ACK_RDR_CODE,
    X_QUERY_FORMAT_CODE,
    X_QUERY_TRANS_PRTCL_CODE,
    X_QUERY_ACK_RDR_CODE,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_ONLINE_AUTH_FORMAT_CODE,
    X_ONLINE_AUTH_TRANS_PRTCL_CODE,
    X_ONLINE_AUTH_ACK_RDR_CODE,
    X_SETTLEMENT_FORMAT_CODE,
    X_SYS_CC_PROFILE_CODE,
    X_PAYMENT_SYSTEM_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FNDCPT_SYS_CC_PF_TL (
    SYS_CC_PROFILE_CODE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    CREATION_DATE,
    SYS_CC_PROFILE_NAME,
    CREATED_BY,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_SYS_CC_PROFILE_CODE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    X_CREATION_DATE,
    X_SYS_CC_PROFILE_NAME,
    X_CREATED_BY,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_SYS_CC_PF_TL T
    where T.SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end SYS_CC_PROF_INSERT_ROW;

procedure SYS_CC_PROF_UPDATE_ROW (
  X_SYS_CC_PROFILE_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_PRTCL_CODE in VARCHAR2,
  X_SETTLEMENT_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ONLINE_AUTH_FORMAT_CODE in VARCHAR2,
  X_ONLINE_AUTH_TRANS_PRTCL_CODE in VARCHAR2,
  X_ONLINE_AUTH_ACK_RDR_CODE in VARCHAR2,
  X_SETTLEMENT_FORMAT_CODE in VARCHAR2,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_SYS_CC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FNDCPT_SYS_CC_PF_B set
    SETTLEMENT_TRANS_PRTCL_CODE = X_SETTLEMENT_TRANS_PRTCL_CODE,
    SETTLEMENT_ACK_RDR_CODE = X_SETTLEMENT_ACK_RDR_CODE,
    QUERY_FORMAT_CODE = X_QUERY_FORMAT_CODE,
    QUERY_TRANS_PRTCL_CODE = X_QUERY_TRANS_PRTCL_CODE,
    QUERY_ACK_RDR_CODE = X_QUERY_ACK_RDR_CODE,
    INACTIVE_DATE = X_INACTIVE_DATE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    ONLINE_AUTH_FORMAT_CODE = X_ONLINE_AUTH_FORMAT_CODE,
    ONLINE_AUTH_TRANS_PRTCL_CODE = X_ONLINE_AUTH_TRANS_PRTCL_CODE,
    ONLINE_AUTH_ACK_RDR_CODE = X_ONLINE_AUTH_ACK_RDR_CODE,
    SETTLEMENT_FORMAT_CODE = X_SETTLEMENT_FORMAT_CODE,
    PAYMENT_SYSTEM_ID = X_PAYMENT_SYSTEM_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_SYS_CC_PF_TL set
    SYS_CC_PROFILE_NAME = X_SYS_CC_PROFILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end SYS_CC_PROF_UPDATE_ROW;

procedure SYS_CC_PROF_DELETE_ROW (
  X_SYS_CC_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_SYS_CC_PF_TL
  where SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_SYS_CC_PF_B
  where SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end SYS_CC_PROF_DELETE_ROW;

procedure SYS_CC_PROF_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_SYS_CC_PF_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_SYS_CC_PF_B B
    where B.SYS_CC_PROFILE_CODE = T.SYS_CC_PROFILE_CODE
    );

  update IBY_FNDCPT_SYS_CC_PF_TL T set (
      SYS_CC_PROFILE_NAME
    ) = (select
      B.SYS_CC_PROFILE_NAME
    from IBY_FNDCPT_SYS_CC_PF_TL B
    where B.SYS_CC_PROFILE_CODE = T.SYS_CC_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SYS_CC_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.SYS_CC_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_SYS_CC_PF_TL SUBB, IBY_FNDCPT_SYS_CC_PF_TL SUBT
    where SUBB.SYS_CC_PROFILE_CODE = SUBT.SYS_CC_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SYS_CC_PROFILE_NAME <> SUBT.SYS_CC_PROFILE_NAME
  ));

  insert into IBY_FNDCPT_SYS_CC_PF_TL (
    SYS_CC_PROFILE_CODE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    CREATION_DATE,
    SYS_CC_PROFILE_NAME,
    CREATED_BY,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.SYS_CC_PROFILE_CODE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    B.CREATION_DATE,
    B.SYS_CC_PROFILE_NAME,
    B.CREATED_BY,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_SYS_CC_PF_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_SYS_CC_PF_TL T
    where T.SYS_CC_PROFILE_CODE = B.SYS_CC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end SYS_CC_PROF_ADD_LANGUAGE;

procedure SYS_CC_PROF_LOAD_ROW (
  X_SYS_CC_PROFILE_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_PRTCL_CODE in VARCHAR2,
  X_SETTLEMENT_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ONLINE_AUTH_FORMAT_CODE in VARCHAR2,
  X_ONLINE_AUTH_TRANS_PRTCL_CODE in VARCHAR2,
  X_ONLINE_AUTH_ACK_RDR_CODE in VARCHAR2,
  X_SETTLEMENT_FORMAT_CODE in VARCHAR2,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_SYS_CC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  SYS_CC_PROF_UPDATE_ROW (
    X_SYS_CC_PROFILE_CODE,
    X_SETTLEMENT_TRANS_PRTCL_CODE,
    X_SETTLEMENT_ACK_RDR_CODE,
    X_QUERY_FORMAT_CODE,
    X_QUERY_TRANS_PRTCL_CODE,
    X_QUERY_ACK_RDR_CODE,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_ONLINE_AUTH_FORMAT_CODE,
    X_ONLINE_AUTH_TRANS_PRTCL_CODE,
    X_ONLINE_AUTH_ACK_RDR_CODE,
    X_SETTLEMENT_FORMAT_CODE,
    X_PAYMENT_SYSTEM_ID,
    X_SYS_CC_PROFILE_NAME,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER));
exception
  when no_data_found then
    SYS_CC_PROF_INSERT_ROW (
      row_id,
      X_SYS_CC_PROFILE_CODE,
      X_SETTLEMENT_TRANS_PRTCL_CODE,
      X_SETTLEMENT_ACK_RDR_CODE,
      X_QUERY_FORMAT_CODE,
      X_QUERY_TRANS_PRTCL_CODE,
      X_QUERY_ACK_RDR_CODE,
      X_INACTIVE_DATE,
      X_OBJECT_VERSION_NUMBER,
      X_ONLINE_AUTH_FORMAT_CODE,
      X_ONLINE_AUTH_TRANS_PRTCL_CODE,
      X_ONLINE_AUTH_ACK_RDR_CODE,
      X_SETTLEMENT_FORMAT_CODE,
      X_PAYMENT_SYSTEM_ID,
      X_SYS_CC_PROFILE_NAME,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER));
end;

procedure SYS_CC_PROF_TRANSLATE_ROW (
  X_SYS_CC_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SYS_CC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_fndcpt_sys_cc_pf_tl set
    SYS_CC_PROFILE_NAME = X_SYS_CC_PROFILE_NAME,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE;
end;


procedure SYS_EFT_PROF_INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_SYS_EFT_PROFILE_CODE in VARCHAR2,
  X_SETTLE_REQUIRE_VRFY_FLAG in VARCHAR2,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_VERIFY_FORMAT_CODE in VARCHAR2,
  X_VERIFY_TRANS_PRTCL_CODE in VARCHAR2,
  X_VERIFY_ACK_RDR_CODE in VARCHAR2,
  X_FUNDS_XFER_FORMAT_CODE in VARCHAR2,
  X_FUNDS_XFER_TRANS_PRTCL_CODE in VARCHAR2,
  X_FUNDS_XFER_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SYS_EFT_PROFILE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_PAYER_NOTIFICATION_FORMAT IN VARCHAR2,
  X_PAYER_NOTIF_DEL_METHOD IN VARCHAR2,
  X_GROUP_BY_ORG IN VARCHAR2,
  X_GROUP_BY_LEGAL_ENTITY IN VARCHAR2,
  X_GROUP_BY_INT_BANK_ACCOUNT IN VARCHAR2,
  X_GROUP_BY_SETTLEMENT_CURR IN VARCHAR2,
  X_GROUP_BY_SETTLEMENT_DATE IN VARCHAR2,
  X_LIMIT_BY_AMT_CURR IN VARCHAR2,
  X_LIMIT_BY_EXCH_RATE_TYPE IN VARCHAR2,
  X_LIMIT_BY_TOTAL_AMT in NUMBER,
  X_LIMIT_BY_SETTLEMENT_NUM in NUMBER,
  X_SETTLEMENT_COMPLETE_POINT IN VARCHAR2,
  X_OVERRIDE_PAYER_DELIVERY_FLAG IN VARCHAR2,
  X_ACCOMPANY_LETTER_FORMAT IN VARCHAR2,
  X_AUTOMATIC_PN_SUBMIT_FLAG IN VARCHAR2
) is
  cursor C is select ROWID from IBY_FNDCPT_SYS_EFT_PF_B
    where SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE
    ;
begin
  insert into IBY_FNDCPT_SYS_EFT_PF_B (
    SETTLE_REQUIRE_VRFY_FLAG,
    SYS_EFT_PROFILE_CODE,
    PAYMENT_SYSTEM_ID,
    VERIFY_FORMAT_CODE,
    VERIFY_TRANS_PRTCL_CODE,
    VERIFY_ACK_RDR_CODE,
    FUNDS_XFER_FORMAT_CODE,
    FUNDS_XFER_TRANS_PRTCL_CODE,
    FUNDS_XFER_ACK_RDR_CODE,
    QUERY_FORMAT_CODE,
    QUERY_TRANS_PRTCL_CODE,
    QUERY_ACK_RDR_CODE,
    INACTIVE_DATE,
    OBJECT_VERSION_NUMBER,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    PAYER_NOTIFICATION_FORMAT,
    PAYER_NOTIFICATION_DEL_METHOD,
    GROUP_BY_ORG,
    GROUP_BY_LEGAL_ENTITY,
    GROUP_BY_INT_BANK_ACCOUNT,
    GROUP_BY_SETTLEMENT_CURR,
    GROUP_BY_SETTLEMENT_DATE,
    LIMIT_BY_AMT_CURR,
    LIMIT_BY_EXCH_RATE_TYPE,
    LIMIT_BY_TOTAL_AMT,
    LIMIT_BY_SETTLEMENT_NUM,
    SETTLEMENT_COMPLETE_POINT,
    OVERRIDE_PAYER_DELIVERY_FLAG,
    ACCOMPANY_LETTER_FORMAT,
    AUTOMATIC_PN_SUBMIT_FLAG
  ) values (
    X_SETTLE_REQUIRE_VRFY_FLAG,
    X_SYS_EFT_PROFILE_CODE,
    X_PAYMENT_SYSTEM_ID,
    X_VERIFY_FORMAT_CODE,
    X_VERIFY_TRANS_PRTCL_CODE,
    X_VERIFY_ACK_RDR_CODE,
    X_FUNDS_XFER_FORMAT_CODE,
    X_FUNDS_XFER_TRANS_PRTCL_CODE,
    X_FUNDS_XFER_ACK_RDR_CODE,
    X_QUERY_FORMAT_CODE,
    X_QUERY_TRANS_PRTCL_CODE,
    X_QUERY_ACK_RDR_CODE,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_PAYER_NOTIFICATION_FORMAT,
    X_PAYER_NOTIF_DEL_METHOD,
    X_GROUP_BY_ORG,
    X_GROUP_BY_LEGAL_ENTITY,
    X_GROUP_BY_INT_BANK_ACCOUNT,
    X_GROUP_BY_SETTLEMENT_CURR,
    X_GROUP_BY_SETTLEMENT_DATE,
    X_LIMIT_BY_AMT_CURR,
    X_LIMIT_BY_EXCH_RATE_TYPE,
    X_LIMIT_BY_TOTAL_AMT,
    X_LIMIT_BY_SETTLEMENT_NUM,
    X_SETTLEMENT_COMPLETE_POINT,
    X_OVERRIDE_PAYER_DELIVERY_FLAG,
    X_ACCOMPANY_LETTER_FORMAT,
    X_AUTOMATIC_PN_SUBMIT_FLAG
  );

  insert into IBY_FNDCPT_SYS_EFT_PF_TL (
    SYS_EFT_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    SYS_EFT_PROFILE_CODE,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_SYS_EFT_PROFILE_NAME,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    X_SYS_EFT_PROFILE_CODE,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_SYS_EFT_PF_TL T
    where T.SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end SYS_EFT_PROF_INSERT_ROW;

procedure SYS_EFT_PROF_UPDATE_ROW (
  X_SYS_EFT_PROFILE_CODE in VARCHAR2,
  X_SETTLE_REQUIRE_VRFY_FLAG in VARCHAR2,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_VERIFY_FORMAT_CODE in VARCHAR2,
  X_VERIFY_TRANS_PRTCL_CODE in VARCHAR2,
  X_VERIFY_ACK_RDR_CODE in VARCHAR2,
  X_FUNDS_XFER_FORMAT_CODE in VARCHAR2,
  X_FUNDS_XFER_TRANS_PRTCL_CODE in VARCHAR2,
  X_FUNDS_XFER_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SYS_EFT_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_PAYER_NOTIFICATION_FORMAT IN VARCHAR2,
  X_PAYER_NOTIF_DEL_METHOD IN VARCHAR2,
  X_GROUP_BY_ORG IN VARCHAR2,
  X_GROUP_BY_LEGAL_ENTITY IN VARCHAR2,
  X_GROUP_BY_INT_BANK_ACCOUNT IN VARCHAR2,
  X_GROUP_BY_SETTLEMENT_CURR IN VARCHAR2,
  X_GROUP_BY_SETTLEMENT_DATE IN VARCHAR2,
  X_LIMIT_BY_AMT_CURR IN VARCHAR2,
  X_LIMIT_BY_EXCH_RATE_TYPE IN VARCHAR2,
  X_LIMIT_BY_TOTAL_AMT in NUMBER,
  X_LIMIT_BY_SETTLEMENT_NUM in NUMBER,
  X_SETTLEMENT_COMPLETE_POINT IN VARCHAR2,
  X_OVERRIDE_PAYER_DELIVERY_FLAG IN VARCHAR2,
  X_ACCOMPANY_LETTER_FORMAT IN VARCHAR2,
  X_AUTOMATIC_PN_SUBMIT_FLAG IN VARCHAR2
) is
begin
  update IBY_FNDCPT_SYS_EFT_PF_B set
    SETTLE_REQUIRE_VRFY_FLAG = X_SETTLE_REQUIRE_VRFY_FLAG,
    PAYMENT_SYSTEM_ID = X_PAYMENT_SYSTEM_ID,
    VERIFY_FORMAT_CODE = X_VERIFY_FORMAT_CODE,
    VERIFY_TRANS_PRTCL_CODE = X_VERIFY_TRANS_PRTCL_CODE,
    VERIFY_ACK_RDR_CODE = X_VERIFY_ACK_RDR_CODE,
    FUNDS_XFER_FORMAT_CODE = X_FUNDS_XFER_FORMAT_CODE,
    FUNDS_XFER_TRANS_PRTCL_CODE = X_FUNDS_XFER_TRANS_PRTCL_CODE,
    FUNDS_XFER_ACK_RDR_CODE = X_FUNDS_XFER_ACK_RDR_CODE,
    QUERY_FORMAT_CODE = X_QUERY_FORMAT_CODE,
    QUERY_TRANS_PRTCL_CODE = X_QUERY_TRANS_PRTCL_CODE,
    QUERY_ACK_RDR_CODE = X_QUERY_ACK_RDR_CODE,
    INACTIVE_DATE = X_INACTIVE_DATE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    PAYER_NOTIFICATION_FORMAT = X_PAYER_NOTIFICATION_FORMAT,
    PAYER_NOTIFICATION_DEL_METHOD = X_PAYER_NOTIF_DEL_METHOD,
    GROUP_BY_ORG = X_GROUP_BY_ORG,
    GROUP_BY_LEGAL_ENTITY = X_GROUP_BY_LEGAL_ENTITY,
    GROUP_BY_INT_BANK_ACCOUNT = X_GROUP_BY_INT_BANK_ACCOUNT,
    GROUP_BY_SETTLEMENT_CURR = X_GROUP_BY_SETTLEMENT_CURR,
    GROUP_BY_SETTLEMENT_DATE = X_GROUP_BY_SETTLEMENT_DATE,
    LIMIT_BY_AMT_CURR = X_LIMIT_BY_AMT_CURR,
    LIMIT_BY_EXCH_RATE_TYPE = X_LIMIT_BY_EXCH_RATE_TYPE,
    LIMIT_BY_TOTAL_AMT = X_LIMIT_BY_TOTAL_AMT,
    LIMIT_BY_SETTLEMENT_NUM = X_LIMIT_BY_SETTLEMENT_NUM,
    SETTLEMENT_COMPLETE_POINT = X_SETTLEMENT_COMPLETE_POINT,
    OVERRIDE_PAYER_DELIVERY_FLAG = X_OVERRIDE_PAYER_DELIVERY_FLAG,
    ACCOMPANY_LETTER_FORMAT = X_ACCOMPANY_LETTER_FORMAT,
    AUTOMATIC_PN_SUBMIT_FLAG = X_AUTOMATIC_PN_SUBMIT_FLAG
  where SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_SYS_EFT_PF_TL set
    SYS_EFT_PROFILE_NAME = X_SYS_EFT_PROFILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end SYS_EFT_PROF_UPDATE_ROW;

procedure SYS_EFT_PROF_DELETE_ROW (
  X_SYS_EFT_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_SYS_EFT_PF_TL
  where SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_SYS_EFT_PF_B
  where SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end SYS_EFT_PROF_DELETE_ROW;

procedure SYS_EFT_PROF_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_SYS_EFT_PF_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_SYS_EFT_PF_B B
    where B.SYS_EFT_PROFILE_CODE = T.SYS_EFT_PROFILE_CODE
    );

  update IBY_FNDCPT_SYS_EFT_PF_TL T set (
      SYS_EFT_PROFILE_NAME
    ) = (select
      B.SYS_EFT_PROFILE_NAME
    from IBY_FNDCPT_SYS_EFT_PF_TL B
    where B.SYS_EFT_PROFILE_CODE = T.SYS_EFT_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SYS_EFT_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.SYS_EFT_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_SYS_EFT_PF_TL SUBB, IBY_FNDCPT_SYS_EFT_PF_TL SUBT
    where SUBB.SYS_EFT_PROFILE_CODE = SUBT.SYS_EFT_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SYS_EFT_PROFILE_NAME <> SUBT.SYS_EFT_PROFILE_NAME
  ));

  insert into IBY_FNDCPT_SYS_EFT_PF_TL (
    SYS_EFT_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    SYS_EFT_PROFILE_CODE,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.SYS_EFT_PROFILE_NAME,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    B.SYS_EFT_PROFILE_CODE,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_SYS_EFT_PF_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_SYS_EFT_PF_TL T
    where T.SYS_EFT_PROFILE_CODE = B.SYS_EFT_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end SYS_EFT_PROF_ADD_LANGUAGE;

procedure SYS_EFT_PROF_LOAD_ROW (
  X_SYS_EFT_PROFILE_CODE in VARCHAR2,
  X_SETTLE_REQUIRE_VRFY_FLAG in VARCHAR2,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_VERIFY_FORMAT_CODE in VARCHAR2,
  X_VERIFY_TRANS_PRTCL_CODE in VARCHAR2,
  X_VERIFY_ACK_RDR_CODE in VARCHAR2,
  X_FUNDS_XFER_FORMAT_CODE in VARCHAR2,
  X_FUNDS_XFER_TRANS_PRTCL_CODE in VARCHAR2,
  X_FUNDS_XFER_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SYS_EFT_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2,
  X_PAYER_NOTIFICATION_FORMAT IN VARCHAR2,
  X_PAYER_NOTIF_DEL_METHOD IN VARCHAR2,
  X_GROUP_BY_ORG IN VARCHAR2,
  X_GROUP_BY_LEGAL_ENTITY IN VARCHAR2,
  X_GROUP_BY_INT_BANK_ACCOUNT IN VARCHAR2,
  X_GROUP_BY_SETTLEMENT_CURR IN VARCHAR2,
  X_GROUP_BY_SETTLEMENT_DATE IN VARCHAR2,
  X_LIMIT_BY_AMT_CURR IN VARCHAR2,
  X_LIMIT_BY_EXCH_RATE_TYPE IN VARCHAR2,
  X_LIMIT_BY_TOTAL_AMT in NUMBER,
  X_LIMIT_BY_SETTLEMENT_NUM in NUMBER,
  X_SETTLEMENT_COMPLETE_POINT IN VARCHAR2,
  X_OVERRIDE_PAYER_DELIVERY_FLAG IN VARCHAR2,
  X_ACCOMPANY_LETTER_FORMAT IN VARCHAR2,
  X_AUTOMATIC_PN_SUBMIT_FLAG IN VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  SYS_EFT_PROF_UPDATE_ROW (
    X_SYS_EFT_PROFILE_CODE,
    X_SETTLE_REQUIRE_VRFY_FLAG,
    X_PAYMENT_SYSTEM_ID,
    X_VERIFY_FORMAT_CODE,
    X_VERIFY_TRANS_PRTCL_CODE,
    X_VERIFY_ACK_RDR_CODE,
    X_FUNDS_XFER_FORMAT_CODE,
    X_FUNDS_XFER_TRANS_PRTCL_CODE,
    X_FUNDS_XFER_ACK_RDR_CODE,
    X_QUERY_FORMAT_CODE,
    X_QUERY_TRANS_PRTCL_CODE,
    X_QUERY_ACK_RDR_CODE,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_SYS_EFT_PROFILE_NAME,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER),
    X_PAYER_NOTIFICATION_FORMAT,
    X_PAYER_NOTIF_DEL_METHOD,
    X_GROUP_BY_ORG,
    X_GROUP_BY_LEGAL_ENTITY,
    X_GROUP_BY_INT_BANK_ACCOUNT,
    X_GROUP_BY_SETTLEMENT_CURR,
    X_GROUP_BY_SETTLEMENT_DATE,
    X_LIMIT_BY_AMT_CURR,
    X_LIMIT_BY_EXCH_RATE_TYPE,
    X_LIMIT_BY_TOTAL_AMT,
    X_LIMIT_BY_SETTLEMENT_NUM,
    X_SETTLEMENT_COMPLETE_POINT,
    X_OVERRIDE_PAYER_DELIVERY_FLAG,
    X_ACCOMPANY_LETTER_FORMAT,
    X_AUTOMATIC_PN_SUBMIT_FLAG
);
exception
  when no_data_found then
    SYS_EFT_PROF_INSERT_ROW (
      row_id,
      X_SYS_EFT_PROFILE_CODE,
      X_SETTLE_REQUIRE_VRFY_FLAG,
      X_PAYMENT_SYSTEM_ID,
      X_VERIFY_FORMAT_CODE,
      X_VERIFY_TRANS_PRTCL_CODE,
      X_VERIFY_ACK_RDR_CODE,
      X_FUNDS_XFER_FORMAT_CODE,
      X_FUNDS_XFER_TRANS_PRTCL_CODE,
      X_FUNDS_XFER_ACK_RDR_CODE,
      X_QUERY_FORMAT_CODE,
      X_QUERY_TRANS_PRTCL_CODE,
      X_QUERY_ACK_RDR_CODE,
      X_INACTIVE_DATE,
      X_OBJECT_VERSION_NUMBER,
      X_SYS_EFT_PROFILE_NAME,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER),
      X_PAYER_NOTIFICATION_FORMAT,
      X_PAYER_NOTIF_DEL_METHOD,
      X_GROUP_BY_ORG,
      X_GROUP_BY_LEGAL_ENTITY,
      X_GROUP_BY_INT_BANK_ACCOUNT,
      X_GROUP_BY_SETTLEMENT_CURR,
      X_GROUP_BY_SETTLEMENT_DATE,
      X_LIMIT_BY_AMT_CURR,
      X_LIMIT_BY_EXCH_RATE_TYPE,
      X_LIMIT_BY_TOTAL_AMT,
      X_LIMIT_BY_SETTLEMENT_NUM,
      X_SETTLEMENT_COMPLETE_POINT,
      X_OVERRIDE_PAYER_DELIVERY_FLAG,
      X_ACCOMPANY_LETTER_FORMAT,
      X_AUTOMATIC_PN_SUBMIT_FLAG
);
end;

procedure SYS_EFT_PROF_TRANSLATE_ROW (
  X_SYS_EFT_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SYS_EFT_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_fndcpt_sys_eft_pf_tl set
    SYS_EFT_PROFILE_NAME = X_SYS_EFT_PROFILE_NAME,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE;
end;


procedure SYS_DC_PROF_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_SYS_DC_PROFILE_CODE in VARCHAR2,
  X_ONLINE_DEB_FORMAT_CODE in VARCHAR2,
  X_ONLINE_DEB_TRANS_PRTCL_CODE in VARCHAR2,
  X_ONLINE_DEB_ACK_RDR_CODE in VARCHAR2,
  X_SETTLEMENT_REQ_FLAG in VARCHAR2,
  X_SETTLEMENT_FORMAT_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_PRTCL_CODE in VARCHAR2,
  X_SETTLEMENT_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_SYS_DC_PROFILE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FNDCPT_SYS_DC_PF_B
    where SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE
    ;
begin
  insert into IBY_FNDCPT_SYS_DC_PF_B (
    ONLINE_DEB_FORMAT_CODE,
    ONLINE_DEB_TRANS_PRTCL_CODE,
    ONLINE_DEB_ACK_RDR_CODE,
    SETTLEMENT_REQ_FLAG,
    SETTLEMENT_FORMAT_CODE,
    SETTLEMENT_TRANS_PRTCL_CODE,
    SETTLEMENT_ACK_RDR_CODE,
    QUERY_FORMAT_CODE,
    QUERY_TRANS_PRTCL_CODE,
    QUERY_ACK_RDR_CODE,
    INACTIVE_DATE,
    OBJECT_VERSION_NUMBER,
    SYS_DC_PROFILE_CODE,
    PAYMENT_SYSTEM_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_ONLINE_DEB_FORMAT_CODE,
    X_ONLINE_DEB_TRANS_PRTCL_CODE,
    X_ONLINE_DEB_ACK_RDR_CODE,
    X_SETTLEMENT_REQ_FLAG,
    X_SETTLEMENT_FORMAT_CODE,
    X_SETTLEMENT_TRANS_PRTCL_CODE,
    X_SETTLEMENT_ACK_RDR_CODE,
    X_QUERY_FORMAT_CODE,
    X_QUERY_TRANS_PRTCL_CODE,
    X_QUERY_ACK_RDR_CODE,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_SYS_DC_PROFILE_CODE,
    X_PAYMENT_SYSTEM_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FNDCPT_SYS_DC_PF_TL (
    SYS_DC_PROFILE_CODE,
    SYS_DC_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_SYS_DC_PROFILE_CODE,
    X_SYS_DC_PROFILE_NAME,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_SYS_DC_PF_TL T
    where T.SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end SYS_DC_PROF_INSERT_ROW;

procedure SYS_DC_PROF_UPDATE_ROW (
  X_SYS_DC_PROFILE_CODE in VARCHAR2,
  X_ONLINE_DEB_FORMAT_CODE in VARCHAR2,
  X_ONLINE_DEB_TRANS_PRTCL_CODE in VARCHAR2,
  X_ONLINE_DEB_ACK_RDR_CODE in VARCHAR2,
  X_SETTLEMENT_REQ_FLAG in VARCHAR2,
  X_SETTLEMENT_FORMAT_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_PRTCL_CODE in VARCHAR2,
  X_SETTLEMENT_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_SYS_DC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FNDCPT_SYS_DC_PF_B set
    ONLINE_DEB_FORMAT_CODE = X_ONLINE_DEB_FORMAT_CODE,
    ONLINE_DEB_TRANS_PRTCL_CODE = X_ONLINE_DEB_TRANS_PRTCL_CODE,
    ONLINE_DEB_ACK_RDR_CODE = X_ONLINE_DEB_ACK_RDR_CODE,
    SETTLEMENT_REQ_FLAG = X_SETTLEMENT_REQ_FLAG,
    SETTLEMENT_FORMAT_CODE = X_SETTLEMENT_FORMAT_CODE,
    SETTLEMENT_TRANS_PRTCL_CODE = X_SETTLEMENT_TRANS_PRTCL_CODE,
    SETTLEMENT_ACK_RDR_CODE = X_SETTLEMENT_ACK_RDR_CODE,
    QUERY_FORMAT_CODE = X_QUERY_FORMAT_CODE,
    QUERY_TRANS_PRTCL_CODE = X_QUERY_TRANS_PRTCL_CODE,
    QUERY_ACK_RDR_CODE = X_QUERY_ACK_RDR_CODE,
    INACTIVE_DATE = X_INACTIVE_DATE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    PAYMENT_SYSTEM_ID = X_PAYMENT_SYSTEM_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_SYS_DC_PF_TL set
    SYS_DC_PROFILE_NAME = X_SYS_DC_PROFILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end SYS_DC_PROF_UPDATE_ROW;

procedure SYS_DC_PROF_DELETE_ROW (
  X_SYS_DC_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_SYS_DC_PF_TL
  where SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_SYS_DC_PF_B
  where SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end SYS_DC_PROF_DELETE_ROW;

procedure SYS_DC_PROF_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_SYS_DC_PF_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_SYS_DC_PF_B B
    where B.SYS_DC_PROFILE_CODE = T.SYS_DC_PROFILE_CODE
    );

  update IBY_FNDCPT_SYS_DC_PF_TL T set (
      SYS_DC_PROFILE_NAME
    ) = (select
      B.SYS_DC_PROFILE_NAME
    from IBY_FNDCPT_SYS_DC_PF_TL B
    where B.SYS_DC_PROFILE_CODE = T.SYS_DC_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SYS_DC_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.SYS_DC_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_SYS_DC_PF_TL SUBB, IBY_FNDCPT_SYS_DC_PF_TL SUBT
    where SUBB.SYS_DC_PROFILE_CODE = SUBT.SYS_DC_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SYS_DC_PROFILE_NAME <> SUBT.SYS_DC_PROFILE_NAME
  ));

  insert into IBY_FNDCPT_SYS_DC_PF_TL (
    SYS_DC_PROFILE_CODE,
    SYS_DC_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.SYS_DC_PROFILE_CODE,
    B.SYS_DC_PROFILE_NAME,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_SYS_DC_PF_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_SYS_DC_PF_TL T
    where T.SYS_DC_PROFILE_CODE = B.SYS_DC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end SYS_DC_PROF_ADD_LANGUAGE;

procedure SYS_DC_PROF_LOAD_ROW (
  X_SYS_DC_PROFILE_CODE in VARCHAR2,
  X_ONLINE_DEB_FORMAT_CODE in VARCHAR2,
  X_ONLINE_DEB_TRANS_PRTCL_CODE in VARCHAR2,
  X_ONLINE_DEB_ACK_RDR_CODE in VARCHAR2,
  X_SETTLEMENT_REQ_FLAG in VARCHAR2,
  X_SETTLEMENT_FORMAT_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_PRTCL_CODE in VARCHAR2,
  X_SETTLEMENT_ACK_RDR_CODE in VARCHAR2,
  X_QUERY_FORMAT_CODE in VARCHAR2,
  X_QUERY_TRANS_PRTCL_CODE in VARCHAR2,
  X_QUERY_ACK_RDR_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PAYMENT_SYSTEM_ID in NUMBER,
  X_SYS_DC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  SYS_DC_PROF_UPDATE_ROW (
    X_SYS_DC_PROFILE_CODE,
    X_ONLINE_DEB_FORMAT_CODE,
    X_ONLINE_DEB_TRANS_PRTCL_CODE,
    X_ONLINE_DEB_ACK_RDR_CODE,
    X_SETTLEMENT_REQ_FLAG,
    X_SETTLEMENT_FORMAT_CODE,
    X_SETTLEMENT_TRANS_PRTCL_CODE,
    X_SETTLEMENT_ACK_RDR_CODE,
    X_QUERY_FORMAT_CODE,
    X_QUERY_TRANS_PRTCL_CODE,
    X_QUERY_ACK_RDR_CODE,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_PAYMENT_SYSTEM_ID,
    X_SYS_DC_PROFILE_NAME,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER));
exception
  when no_data_found then
    SYS_DC_PROF_INSERT_ROW (
      row_id,
      X_SYS_DC_PROFILE_CODE,
      X_ONLINE_DEB_FORMAT_CODE,
      X_ONLINE_DEB_TRANS_PRTCL_CODE,
      X_ONLINE_DEB_ACK_RDR_CODE,
      X_SETTLEMENT_REQ_FLAG,
      X_SETTLEMENT_FORMAT_CODE,
      X_SETTLEMENT_TRANS_PRTCL_CODE,
      X_SETTLEMENT_ACK_RDR_CODE,
      X_QUERY_FORMAT_CODE,
      X_QUERY_TRANS_PRTCL_CODE,
      X_QUERY_ACK_RDR_CODE,
      X_INACTIVE_DATE,
      X_OBJECT_VERSION_NUMBER,
      X_PAYMENT_SYSTEM_ID,
      X_SYS_DC_PROFILE_NAME,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER));
end;

procedure SYS_DC_PROF_TRANSLATE_ROW (
  X_SYS_DC_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_SYS_DC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_fndcpt_sys_dc_pf_tl set
    SYS_DC_PROFILE_NAME = X_SYS_DC_PROFILE_NAME,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE;
end;


procedure USER_CC_PROF_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_USER_CC_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_SYS_CC_PROFILE_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_QUERY_TRANS_CONFIG_ID in NUMBER,
  X_ONLINE_AUTH_TRANS_CONFIG_ID in NUMBER,
  X_SETTLEMENT_TRANS_CONFIG_ID in NUMBER,
  X_USER_CC_PROFILE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FNDCPT_USER_CC_PF_B
    where USER_CC_PROFILE_CODE = X_USER_CC_PROFILE_CODE
    ;
begin
  insert into IBY_FNDCPT_USER_CC_PF_B (
    OBJECT_VERSION_NUMBER,
    BEP_ACCOUNT_ID,
    USER_CC_PROFILE_CODE,
    SYS_CC_PROFILE_CODE,
    INACTIVE_DATE,
    QUERY_TRANS_CONFIG_ID,
    ONLINE_AUTH_TRANS_CONFIG_ID,
    SETTLEMENT_TRANS_CONFIG_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_OBJECT_VERSION_NUMBER,
    X_BEP_ACCOUNT_ID,
    X_USER_CC_PROFILE_CODE,
    X_SYS_CC_PROFILE_CODE,
    X_INACTIVE_DATE,
    X_QUERY_TRANS_CONFIG_ID,
    X_ONLINE_AUTH_TRANS_CONFIG_ID,
    X_SETTLEMENT_TRANS_CONFIG_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FNDCPT_USER_CC_PF_TL (
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    USER_CC_PROFILE_CODE,
    USER_CC_PROFILE_NAME,
    CREATED_BY,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    X_USER_CC_PROFILE_CODE,
    X_USER_CC_PROFILE_NAME,
    X_CREATED_BY,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_USER_CC_PF_TL T
    where T.USER_CC_PROFILE_CODE = X_USER_CC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end USER_CC_PROF_INSERT_ROW;

procedure USER_CC_PROF_UPDATE_ROW (
  X_USER_CC_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_SYS_CC_PROFILE_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_QUERY_TRANS_CONFIG_ID in NUMBER,
  X_ONLINE_AUTH_TRANS_CONFIG_ID in NUMBER,
  X_SETTLEMENT_TRANS_CONFIG_ID in NUMBER,
  X_USER_CC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FNDCPT_USER_CC_PF_B set
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    BEP_ACCOUNT_ID = X_BEP_ACCOUNT_ID,
    SYS_CC_PROFILE_CODE = X_SYS_CC_PROFILE_CODE,
    INACTIVE_DATE = X_INACTIVE_DATE,
    QUERY_TRANS_CONFIG_ID = X_QUERY_TRANS_CONFIG_ID,
    ONLINE_AUTH_TRANS_CONFIG_ID = X_ONLINE_AUTH_TRANS_CONFIG_ID,
    SETTLEMENT_TRANS_CONFIG_ID = X_SETTLEMENT_TRANS_CONFIG_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where USER_CC_PROFILE_CODE = X_USER_CC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_USER_CC_PF_TL set
    USER_CC_PROFILE_NAME = X_USER_CC_PROFILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where USER_CC_PROFILE_CODE = X_USER_CC_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end USER_CC_PROF_UPDATE_ROW;

procedure USER_CC_PROF_DELETE_ROW (
  X_USER_CC_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_USER_CC_PF_TL
  where USER_CC_PROFILE_CODE = X_USER_CC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_USER_CC_PF_B
  where USER_CC_PROFILE_CODE = X_USER_CC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end USER_CC_PROF_DELETE_ROW;

procedure USER_CC_PROF_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_USER_CC_PF_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_USER_CC_PF_B B
    where B.USER_CC_PROFILE_CODE = T.USER_CC_PROFILE_CODE
    );

  update IBY_FNDCPT_USER_CC_PF_TL T set (
      USER_CC_PROFILE_NAME
    ) = (select
      B.USER_CC_PROFILE_NAME
    from IBY_FNDCPT_USER_CC_PF_TL B
    where B.USER_CC_PROFILE_CODE = T.USER_CC_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.USER_CC_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.USER_CC_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_USER_CC_PF_TL SUBB, IBY_FNDCPT_USER_CC_PF_TL SUBT
    where SUBB.USER_CC_PROFILE_CODE = SUBT.USER_CC_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.USER_CC_PROFILE_NAME <> SUBT.USER_CC_PROFILE_NAME
  ));

  insert into IBY_FNDCPT_USER_CC_PF_TL (
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    USER_CC_PROFILE_CODE,
    USER_CC_PROFILE_NAME,
    CREATED_BY,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    B.USER_CC_PROFILE_CODE,
    B.USER_CC_PROFILE_NAME,
    B.CREATED_BY,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_USER_CC_PF_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_USER_CC_PF_TL T
    where T.USER_CC_PROFILE_CODE = B.USER_CC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end USER_CC_PROF_ADD_LANGUAGE;

procedure USER_EFT_PROF_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_USER_EFT_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_VERIFY_TRANS_CONFIG_ID in NUMBER,
  X_SYS_EFT_PROFILE_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_FUNDS_XFER_TRANS_CONFIG_ID in NUMBER,
  X_QUERY_TRANS_CONFIG_ID in NUMBER,
  X_USER_EFT_PROFILE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FNDCPT_USER_EFT_PF_B
    where USER_EFT_PROFILE_CODE = X_USER_EFT_PROFILE_CODE
    ;
begin
  insert into IBY_FNDCPT_USER_EFT_PF_B (
    OBJECT_VERSION_NUMBER,
    BEP_ACCOUNT_ID,
    VERIFY_TRANS_CONFIG_ID,
    USER_EFT_PROFILE_CODE,
    SYS_EFT_PROFILE_CODE,
    INACTIVE_DATE,
    FUNDS_XFER_TRANS_CONFIG_ID,
    QUERY_TRANS_CONFIG_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_OBJECT_VERSION_NUMBER,
    X_BEP_ACCOUNT_ID,
    X_VERIFY_TRANS_CONFIG_ID,
    X_USER_EFT_PROFILE_CODE,
    X_SYS_EFT_PROFILE_CODE,
    X_INACTIVE_DATE,
    X_FUNDS_XFER_TRANS_CONFIG_ID,
    X_QUERY_TRANS_CONFIG_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FNDCPT_USER_EFT_PF_TL (
    USER_EFT_PROFILE_CODE,
    USER_EFT_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_USER_EFT_PROFILE_CODE,
    X_USER_EFT_PROFILE_NAME,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_USER_EFT_PF_TL T
    where T.USER_EFT_PROFILE_CODE = X_USER_EFT_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end USER_EFT_PROF_INSERT_ROW;

procedure USER_EFT_PROF_UPDATE_ROW (
  X_USER_EFT_PROFILE_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_VERIFY_TRANS_CONFIG_ID in NUMBER,
  X_SYS_EFT_PROFILE_CODE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_FUNDS_XFER_TRANS_CONFIG_ID in NUMBER,
  X_QUERY_TRANS_CONFIG_ID in NUMBER,
  X_USER_EFT_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FNDCPT_USER_EFT_PF_B set
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    BEP_ACCOUNT_ID = X_BEP_ACCOUNT_ID,
    VERIFY_TRANS_CONFIG_ID = X_VERIFY_TRANS_CONFIG_ID,
    SYS_EFT_PROFILE_CODE = X_SYS_EFT_PROFILE_CODE,
    INACTIVE_DATE = X_INACTIVE_DATE,
    FUNDS_XFER_TRANS_CONFIG_ID = X_FUNDS_XFER_TRANS_CONFIG_ID,
    QUERY_TRANS_CONFIG_ID = X_QUERY_TRANS_CONFIG_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where USER_EFT_PROFILE_CODE = X_USER_EFT_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_USER_EFT_PF_TL set
    USER_EFT_PROFILE_NAME = X_USER_EFT_PROFILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where USER_EFT_PROFILE_CODE = X_USER_EFT_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end USER_EFT_PROF_UPDATE_ROW;

procedure USER_EFT_PROF_DELETE_ROW (
  X_USER_EFT_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_USER_EFT_PF_TL
  where USER_EFT_PROFILE_CODE = X_USER_EFT_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_USER_EFT_PF_B
  where USER_EFT_PROFILE_CODE = X_USER_EFT_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end USER_EFT_PROF_DELETE_ROW;

procedure USER_EFT_PROF_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_USER_EFT_PF_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_USER_EFT_PF_B B
    where B.USER_EFT_PROFILE_CODE = T.USER_EFT_PROFILE_CODE
    );

  update IBY_FNDCPT_USER_EFT_PF_TL T set (
      USER_EFT_PROFILE_NAME
    ) = (select
      B.USER_EFT_PROFILE_NAME
    from IBY_FNDCPT_USER_EFT_PF_TL B
    where B.USER_EFT_PROFILE_CODE = T.USER_EFT_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.USER_EFT_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.USER_EFT_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_USER_EFT_PF_TL SUBB, IBY_FNDCPT_USER_EFT_PF_TL SUBT
    where SUBB.USER_EFT_PROFILE_CODE = SUBT.USER_EFT_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.USER_EFT_PROFILE_NAME <> SUBT.USER_EFT_PROFILE_NAME
  ));

  insert into IBY_FNDCPT_USER_EFT_PF_TL (
    USER_EFT_PROFILE_CODE,
    USER_EFT_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.USER_EFT_PROFILE_CODE,
    B.USER_EFT_PROFILE_NAME,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_USER_EFT_PF_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_USER_EFT_PF_TL T
    where T.USER_EFT_PROFILE_CODE = B.USER_EFT_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end USER_EFT_PROF_ADD_LANGUAGE;

procedure USER_DC_PROF_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_USER_DC_PROFILE_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_CONFIG_ID in NUMBER,
  X_QUERY_TRANS_CONFIG_ID in NUMBER,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ONLINE_DEB_TRANS_CONFIG_ID in VARCHAR2,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_SYS_DC_PROFILE_CODE in VARCHAR2,
  X_USER_DC_PROFILE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FNDCPT_USER_DC_PF_B
    where USER_DC_PROFILE_CODE = X_USER_DC_PROFILE_CODE
    ;
begin
  insert into IBY_FNDCPT_USER_DC_PF_B (
    SETTLEMENT_TRANS_CONFIG_ID,
    QUERY_TRANS_CONFIG_ID,
    INACTIVE_DATE,
    OBJECT_VERSION_NUMBER,
    ONLINE_DEB_TRANS_CONFIG_ID,
    BEP_ACCOUNT_ID,
    SYS_DC_PROFILE_CODE,
    USER_DC_PROFILE_CODE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_SETTLEMENT_TRANS_CONFIG_ID,
    X_QUERY_TRANS_CONFIG_ID,
    X_INACTIVE_DATE,
    X_OBJECT_VERSION_NUMBER,
    X_ONLINE_DEB_TRANS_CONFIG_ID,
    X_BEP_ACCOUNT_ID,
    X_SYS_DC_PROFILE_CODE,
    X_USER_DC_PROFILE_CODE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FNDCPT_USER_DC_PF_TL (
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    USER_DC_PROFILE_CODE,
    USER_DC_PROFILE_NAME,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_USER_DC_PROFILE_CODE,
    X_USER_DC_PROFILE_NAME,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_USER_DC_PF_TL T
    where T.USER_DC_PROFILE_CODE = X_USER_DC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end USER_DC_PROF_INSERT_ROW;

procedure USER_DC_PROF_UPDATE_ROW (
  X_USER_DC_PROFILE_CODE in VARCHAR2,
  X_SETTLEMENT_TRANS_CONFIG_ID in NUMBER,
  X_QUERY_TRANS_CONFIG_ID in NUMBER,
  X_INACTIVE_DATE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ONLINE_DEB_TRANS_CONFIG_ID in VARCHAR2,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_SYS_DC_PROFILE_CODE in VARCHAR2,
  X_USER_DC_PROFILE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FNDCPT_USER_DC_PF_B set
    SETTLEMENT_TRANS_CONFIG_ID = X_SETTLEMENT_TRANS_CONFIG_ID,
    QUERY_TRANS_CONFIG_ID = X_QUERY_TRANS_CONFIG_ID,
    INACTIVE_DATE = X_INACTIVE_DATE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    ONLINE_DEB_TRANS_CONFIG_ID = X_ONLINE_DEB_TRANS_CONFIG_ID,
    BEP_ACCOUNT_ID = X_BEP_ACCOUNT_ID,
    SYS_DC_PROFILE_CODE = X_SYS_DC_PROFILE_CODE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where USER_DC_PROFILE_CODE = X_USER_DC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_USER_DC_PF_TL set
    USER_DC_PROFILE_NAME = X_USER_DC_PROFILE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where USER_DC_PROFILE_CODE = X_USER_DC_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end USER_DC_PROF_UPDATE_ROW;

procedure USER_DC_PROF_DELETE_ROW (
  X_USER_DC_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_USER_DC_PF_TL
  where USER_DC_PROFILE_CODE = X_USER_DC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_USER_DC_PF_B
  where USER_DC_PROFILE_CODE = X_USER_DC_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end USER_DC_PROF_DELETE_ROW;

procedure USER_DC_PROF_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_USER_DC_PF_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_USER_DC_PF_B B
    where B.USER_DC_PROFILE_CODE = T.USER_DC_PROFILE_CODE
    );

  update IBY_FNDCPT_USER_DC_PF_TL T set (
      USER_DC_PROFILE_NAME
    ) = (select
      B.USER_DC_PROFILE_NAME
    from IBY_FNDCPT_USER_DC_PF_TL B
    where B.USER_DC_PROFILE_CODE = T.USER_DC_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.USER_DC_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.USER_DC_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_USER_DC_PF_TL SUBB, IBY_FNDCPT_USER_DC_PF_TL SUBT
    where SUBB.USER_DC_PROFILE_CODE = SUBT.USER_DC_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.USER_DC_PROFILE_NAME <> SUBT.USER_DC_PROFILE_NAME
  ));

  insert into IBY_FNDCPT_USER_DC_PF_TL (
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    USER_DC_PROFILE_CODE,
    USER_DC_PROFILE_NAME,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.USER_DC_PROFILE_CODE,
    B.USER_DC_PROFILE_NAME,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_USER_DC_PF_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_USER_DC_PF_TL T
    where T.USER_DC_PROFILE_CODE = B.USER_DC_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end USER_DC_PROF_ADD_LANGUAGE;

procedure PMT_CHANNEL_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYMENT_CHANNEL_CODE in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INSTRUMENT_TYPE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_PAYMENT_CHANNEL_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_FNDCPT_PMT_CHNNLS_B
    where PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE
    ;
begin
  insert into IBY_FNDCPT_PMT_CHNNLS_B (
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    OBJECT_VERSION_NUMBER,
    PAYMENT_CHANNEL_CODE,
    INSTRUMENT_TYPE,
    INACTIVE_DATE,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_OBJECT_VERSION_NUMBER,
    X_PAYMENT_CHANNEL_CODE,
    X_INSTRUMENT_TYPE,
    X_INACTIVE_DATE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_FNDCPT_PMT_CHNNLS_TL (
    PAYMENT_CHANNEL_CODE,
    PAYMENT_CHANNEL_NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_PAYMENT_CHANNEL_CODE,
    X_PAYMENT_CHANNEL_NAME,
    X_DESCRIPTION,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_FNDCPT_PMT_CHNNLS_TL T
    where T.PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end PMT_CHANNEL_INSERT_ROW;

procedure PMT_CHANNEL_UPDATE_ROW (
  X_PAYMENT_CHANNEL_CODE in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INSTRUMENT_TYPE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_PAYMENT_CHANNEL_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_FNDCPT_PMT_CHNNLS_B set
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    INSTRUMENT_TYPE = X_INSTRUMENT_TYPE,
    INACTIVE_DATE = X_INACTIVE_DATE,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_FNDCPT_PMT_CHNNLS_TL set
    PAYMENT_CHANNEL_NAME = X_PAYMENT_CHANNEL_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end PMT_CHANNEL_UPDATE_ROW;

procedure PMT_CHANNEL_DELETE_ROW (
  X_PAYMENT_CHANNEL_CODE in VARCHAR2
) is
begin
  delete from IBY_FNDCPT_PMT_CHNNLS_TL
  where PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_FNDCPT_PMT_CHNNLS_B
  where PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end PMT_CHANNEL_DELETE_ROW;

procedure PMT_CHANNEL_ADD_LANGUAGE
is
begin
  delete from IBY_FNDCPT_PMT_CHNNLS_TL T
  where not exists
    (select NULL
    from IBY_FNDCPT_PMT_CHNNLS_B B
    where B.PAYMENT_CHANNEL_CODE = T.PAYMENT_CHANNEL_CODE
    );

  update IBY_FNDCPT_PMT_CHNNLS_TL T set (
      PAYMENT_CHANNEL_NAME,
      DESCRIPTION
    ) = (select
      B.PAYMENT_CHANNEL_NAME,
      B.DESCRIPTION
    from IBY_FNDCPT_PMT_CHNNLS_TL B
    where B.PAYMENT_CHANNEL_CODE = T.PAYMENT_CHANNEL_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.PAYMENT_CHANNEL_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.PAYMENT_CHANNEL_CODE,
      SUBT.LANGUAGE
    from IBY_FNDCPT_PMT_CHNNLS_TL SUBB, IBY_FNDCPT_PMT_CHNNLS_TL SUBT
    where SUBB.PAYMENT_CHANNEL_CODE = SUBT.PAYMENT_CHANNEL_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.PAYMENT_CHANNEL_NAME <> SUBT.PAYMENT_CHANNEL_NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
  ));

  insert into IBY_FNDCPT_PMT_CHNNLS_TL (
    PAYMENT_CHANNEL_CODE,
    PAYMENT_CHANNEL_NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.PAYMENT_CHANNEL_CODE,
    B.PAYMENT_CHANNEL_NAME,
    B.DESCRIPTION,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_FNDCPT_PMT_CHNNLS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_FNDCPT_PMT_CHNNLS_TL T
    where T.PAYMENT_CHANNEL_CODE = B.PAYMENT_CHANNEL_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end PMT_CHANNEL_ADD_LANGUAGE;

procedure PMT_CHANNEL_LOAD_ROW (
  X_PAYMENT_CHANNEL_CODE in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_INSTRUMENT_TYPE in VARCHAR2,
  X_INACTIVE_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_PAYMENT_CHANNEL_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  pmt_channel_update_row (
    X_PAYMENT_CHANNEL_CODE,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_OBJECT_VERSION_NUMBER,
    X_INSTRUMENT_TYPE,
    X_INACTIVE_DATE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_PAYMENT_CHANNEL_NAME,
    X_DESCRIPTION,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER));

exception
  when no_data_found then
    pmt_channel_insert_row (
      row_id,
      X_PAYMENT_CHANNEL_CODE,
      X_ATTRIBUTE13,
      X_ATTRIBUTE14,
      X_ATTRIBUTE15,
      X_OBJECT_VERSION_NUMBER,
      X_INSTRUMENT_TYPE,
      X_INACTIVE_DATE,
      X_ATTRIBUTE_CATEGORY,
      X_ATTRIBUTE1,
      X_ATTRIBUTE2,
      X_ATTRIBUTE3,
      X_ATTRIBUTE4,
      X_ATTRIBUTE5,
      X_ATTRIBUTE6,
      X_ATTRIBUTE7,
      X_ATTRIBUTE8,
      X_ATTRIBUTE9,
      X_ATTRIBUTE10,
      X_ATTRIBUTE11,
      X_ATTRIBUTE12,
      X_PAYMENT_CHANNEL_NAME,
      X_DESCRIPTION,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER));
end;

procedure PMT_CHANNEL_TRANSLATE_ROW (
  X_PAYMENT_CHANNEL_CODE in VARCHAR2,
  X_PAYMENT_CHANNEL_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_fndcpt_pmt_chnnls_tl set
    PAYMENT_CHANNEL_NAME = X_PAYMENT_CHANNEL_NAME,
    DESCRIPTION = X_DESCRIPTION,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and PAYMENT_CHANNEL_CODE = X_PAYMENT_CHANNEL_CODE;
end;


procedure CC_ISSUER_INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_CARD_ISSUER_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_CARD_ISSUER_ACCEPTED_FLAG in VARCHAR2,
  X_AUTHORIZATION_VALIDITY_PERIO in NUMBER,
  X_DIGIT_CHECK_FLAG in VARCHAR2,
  X_CARD_ISSUER_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from IBY_CREDITCARD_ISSUERS_B
    where CARD_ISSUER_CODE = X_CARD_ISSUER_CODE
    ;
begin
  insert into IBY_CREDITCARD_ISSUERS_B (
    OBJECT_VERSION_NUMBER,
    CARD_ISSUER_CODE,
    CARD_ISSUER_ACCEPTED_FLAG,
    AUTHORIZATION_VALIDITY_PERIOD,
    DIGIT_CHECK_FLAG,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_OBJECT_VERSION_NUMBER,
    X_CARD_ISSUER_CODE,
    X_CARD_ISSUER_ACCEPTED_FLAG,
    X_AUTHORIZATION_VALIDITY_PERIO,
    X_DIGIT_CHECK_FLAG,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into IBY_CREDITCARD_ISSUERS_TL (
    CARD_ISSUER_CODE,
    CARD_ISSUER_NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_CARD_ISSUER_CODE,
    X_CARD_ISSUER_NAME,
    X_DESCRIPTION,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_CREDITCARD_ISSUERS_TL T
    where T.CARD_ISSUER_CODE = X_CARD_ISSUER_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end CC_ISSUER_INSERT_ROW;

procedure CC_ISSUER_UPDATE_ROW (
  X_CARD_ISSUER_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_CARD_ISSUER_ACCEPTED_FLAG in VARCHAR2,
  X_AUTHORIZATION_VALIDITY_PERIO in NUMBER,
  X_DIGIT_CHECK_FLAG in VARCHAR2,
  X_CARD_ISSUER_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IBY_CREDITCARD_ISSUERS_B set
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    CARD_ISSUER_ACCEPTED_FLAG = X_CARD_ISSUER_ACCEPTED_FLAG,
    AUTHORIZATION_VALIDITY_PERIOD = X_AUTHORIZATION_VALIDITY_PERIO,
    DIGIT_CHECK_FLAG = X_DIGIT_CHECK_FLAG,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where CARD_ISSUER_CODE = X_CARD_ISSUER_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IBY_CREDITCARD_ISSUERS_TL set
    CARD_ISSUER_NAME = X_CARD_ISSUER_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where CARD_ISSUER_CODE = X_CARD_ISSUER_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end CC_ISSUER_UPDATE_ROW;

procedure CC_ISSUER_DELETE_ROW (
  X_CARD_ISSUER_CODE in VARCHAR2
) is
begin
  delete from IBY_CREDITCARD_ISSUERS_TL
  where CARD_ISSUER_CODE = X_CARD_ISSUER_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IBY_CREDITCARD_ISSUERS_B
  where CARD_ISSUER_CODE = X_CARD_ISSUER_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end CC_ISSUER_DELETE_ROW;

procedure CC_ISSUER_ADD_LANGUAGE
is
begin
  delete from IBY_CREDITCARD_ISSUERS_TL T
  where not exists
    (select NULL
    from IBY_CREDITCARD_ISSUERS_B B
    where B.CARD_ISSUER_CODE = T.CARD_ISSUER_CODE
    );

  update IBY_CREDITCARD_ISSUERS_TL T set (
      CARD_ISSUER_NAME,
      DESCRIPTION
    ) = (select
      B.CARD_ISSUER_NAME,
      B.DESCRIPTION
    from IBY_CREDITCARD_ISSUERS_TL B
    where B.CARD_ISSUER_CODE = T.CARD_ISSUER_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.CARD_ISSUER_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.CARD_ISSUER_CODE,
      SUBT.LANGUAGE
    from IBY_CREDITCARD_ISSUERS_TL SUBB, IBY_CREDITCARD_ISSUERS_TL SUBT
    where SUBB.CARD_ISSUER_CODE = SUBT.CARD_ISSUER_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.CARD_ISSUER_NAME <> SUBT.CARD_ISSUER_NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into IBY_CREDITCARD_ISSUERS_TL (
    CARD_ISSUER_CODE,
    CARD_ISSUER_NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.CARD_ISSUER_CODE,
    B.CARD_ISSUER_NAME,
    B.DESCRIPTION,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_CREDITCARD_ISSUERS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_CREDITCARD_ISSUERS_TL T
    where T.CARD_ISSUER_CODE = B.CARD_ISSUER_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end CC_ISSUER_ADD_LANGUAGE;

procedure CC_ISSUER_LOAD_ROW (
  X_CARD_ISSUER_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_CARD_ISSUER_ACCEPTED_FLAG in VARCHAR2,
  X_AUTHORIZATION_VALIDITY_PERIO in NUMBER,
  X_DIGIT_CHECK_FLAG in VARCHAR2,
  X_CARD_ISSUER_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
  row_id VARCHAR2(200);
begin
  CC_ISSUER_UPDATE_ROW (
    X_CARD_ISSUER_CODE,
    X_OBJECT_VERSION_NUMBER,
    X_CARD_ISSUER_ACCEPTED_FLAG,
    X_AUTHORIZATION_VALIDITY_PERIO,
    X_DIGIT_CHECK_FLAG,
    X_CARD_ISSUER_NAME,
    X_DESCRIPTION,
    X_LAST_UPDATE_DATE,
    fnd_load_util.owner_id(X_OWNER),
    fnd_load_util.owner_id(X_OWNER));
exception
  when no_data_found then
    CC_ISSUER_INSERT_ROW (
      row_id,
      X_CARD_ISSUER_CODE,
      X_OBJECT_VERSION_NUMBER,
      X_CARD_ISSUER_ACCEPTED_FLAG,
      X_AUTHORIZATION_VALIDITY_PERIO,
      X_DIGIT_CHECK_FLAG,
      X_CARD_ISSUER_NAME,
      X_DESCRIPTION,
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      X_LAST_UPDATE_DATE,
      fnd_load_util.owner_id(X_OWNER),
      fnd_load_util.owner_id(X_OWNER));
end;

procedure CC_ISSUER_TRANSLATE_ROW (
  X_CARD_ISSUER_CODE in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_CARD_ISSUER_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_OWNER in VARCHAR2)
is
begin
  update iby_creditcard_issuers_tl set
    CARD_ISSUER_NAME = X_CARD_ISSUER_NAME,
    DESCRIPTION = X_DESCRIPTION,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATED_BY = fnd_load_util.owner_id(X_OWNER),
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = fnd_load_util.owner_id(X_OWNER),
    SOURCE_LANG = userenv('LANG')
  where userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and CARD_ISSUER_CODE = X_CARD_ISSUER_CODE;
end;

END IBY_FNDCPT_MLSUTL_PVT;

/
