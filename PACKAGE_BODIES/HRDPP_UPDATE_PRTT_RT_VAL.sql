--------------------------------------------------------
--  DDL for Package Body HRDPP_UPDATE_PRTT_RT_VAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_UPDATE_PRTT_RT_VAL" as
/*
 * Generated by hr_pump_meta_mapper at: 2007/01/04 13:01:09
 * Generated for API: ben_prtt_rt_val_api.UPDATE_PRTT_RT_VAL
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_RT_STRT_DT in date default null
,I_RT_STRT_DT in varchar2 default 'N'
,P_RT_END_DT in date default null
,I_RT_END_DT in varchar2 default 'N'
,P_RT_TYP_CD in varchar2 default null
,P_TX_TYP_CD in varchar2 default null
,P_ORDR_NUM in number default null
,I_ORDR_NUM in varchar2 default 'N'
,P_ACTY_TYP_CD in varchar2 default null
,P_MLT_CD in varchar2 default null
,P_ACTY_REF_PERD_CD in varchar2 default null
,P_RT_VAL in number default null
,I_RT_VAL in varchar2 default 'N'
,P_ANN_RT_VAL in number default null
,I_ANN_RT_VAL in varchar2 default 'N'
,P_CMCD_RT_VAL in number default null
,I_CMCD_RT_VAL in varchar2 default 'N'
,P_CMCD_REF_PERD_CD in varchar2 default null
,P_BNFT_RT_TYP_CD in varchar2 default null
,P_DSPLY_ON_ENRT_FLAG in varchar2 default null
,P_RT_OVRIDN_FLAG in varchar2 default null
,P_RT_OVRIDN_THRU_DT in date default null
,I_RT_OVRIDN_THRU_DT in varchar2 default 'N'
,P_ELCTNS_MADE_DT in date default null
,I_ELCTNS_MADE_DT in varchar2 default 'N'
,P_PRTT_RT_VAL_STAT_CD in varchar2 default null
,P_ELEMENT_ENTRY_VALUE_ID in number default null
,I_ELEMENT_ENTRY_VALUE_ID in varchar2 default 'N'
,P_PRTT_RMT_APRVD_FR_PYMT_ID in varchar2 default null
,P_PP_IN_YR_USED_NUM in number default null
,I_PP_IN_YR_USED_NUM in varchar2 default 'N'
,P_PRV_ATTRIBUTE_CATEGORY in varchar2 default null
,P_PRV_ATTRIBUTE1 in varchar2 default null
,P_PRV_ATTRIBUTE2 in varchar2 default null
,P_PRV_ATTRIBUTE3 in varchar2 default null
,P_PRV_ATTRIBUTE4 in varchar2 default null
,P_PRV_ATTRIBUTE5 in varchar2 default null
,P_PRV_ATTRIBUTE6 in varchar2 default null
,P_PRV_ATTRIBUTE7 in varchar2 default null
,P_PRV_ATTRIBUTE8 in varchar2 default null
,P_PRV_ATTRIBUTE9 in varchar2 default null
,P_PRV_ATTRIBUTE10 in varchar2 default null
,P_PRV_ATTRIBUTE11 in varchar2 default null
,P_PRV_ATTRIBUTE12 in varchar2 default null
,P_PRV_ATTRIBUTE13 in varchar2 default null
,P_PRV_ATTRIBUTE14 in varchar2 default null
,P_PRV_ATTRIBUTE15 in varchar2 default null
,P_PRV_ATTRIBUTE16 in varchar2 default null
,P_PRV_ATTRIBUTE17 in varchar2 default null
,P_PRV_ATTRIBUTE18 in varchar2 default null
,P_PRV_ATTRIBUTE19 in varchar2 default null
,P_PRV_ATTRIBUTE20 in varchar2 default null
,P_PRV_ATTRIBUTE21 in varchar2 default null
,P_PRV_ATTRIBUTE22 in varchar2 default null
,P_PRV_ATTRIBUTE23 in varchar2 default null
,P_PRV_ATTRIBUTE24 in varchar2 default null
,P_PRV_ATTRIBUTE25 in varchar2 default null
,P_PRV_ATTRIBUTE26 in varchar2 default null
,P_PRV_ATTRIBUTE27 in varchar2 default null
,P_PRV_ATTRIBUTE28 in varchar2 default null
,P_PRV_ATTRIBUTE29 in varchar2 default null
,P_PRV_ATTRIBUTE30 in varchar2 default null
,P_PK_ID_TABLE_NAME in varchar2 default null
,P_PK_ID in varchar2 default null
,P_NO_END_ELEMENT in boolean default null
,P_EFFECTIVE_DATE in date
,P_PRTT_RT_VAL_USER_KEY in varchar2
,P_PERSON_USER_KEY in varchar2 default null
,P_INPUT_VALUE_NAME in varchar2 default null
,P_ELEMENT_NAME in varchar2 default null
,P_LANGUAGE_CODE in varchar2 default null
,P_ENRT_RT_USER_KEY in varchar2 default null
,P_PRTT_ENRT_RSLT_USER_KEY in varchar2 default null
,P_CVG_AMT_CALC in varchar2 default null
,P_ACTUAL_PREMIUM in varchar2 default null
,P_COMP_LEVEL_FACTOR in varchar2 default null
,P_PER_IN_LER_USER_KEY in varchar2 default null
,P_ENDED_PER_IN_LER_USER_KEY in varchar2 default null
,P_ACTY_BASE_RATE in varchar2 default null
,P_PRTT_REIMBMT_RQST_USER_KEY in varchar2 default null) is
blid number := p_data_pump_batch_line_id;
 L_NO_END_ELEMENT varchar2(5);
begin
if P_NO_END_ELEMENT is null then
 L_NO_END_ELEMENT := null;
elsif P_NO_END_ELEMENT then
 L_NO_END_ELEMENT := 'TRUE';
else 
 L_NO_END_ELEMENT := 'FALSE';
end if;
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025
,pval026
,pval027
,pval028
,pval029
,pval030
,pval031
,pval032
,pval033
,pval034
,pval035
,pval036
,pval037
,pval038
,pval039
,pval040
,pval041
,pval042
,pval043
,pval044
,pval045
,pval046
,pval047
,pval048
,pval049
,pval050
,pval051
,pval052
,pval053
,pval054
,pval055
,pval056
,pval057
,pval058
,pval059
,pval060
,pval061
,pval062
,pval063
,pval064
,pval065
,pval066
,pval067
,pval068
,pval069
,pval070)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,703
,'U'
,p_user_sequence
,p_link_value
,dd(P_RT_STRT_DT,I_RT_STRT_DT)
,dd(P_RT_END_DT,I_RT_END_DT)
,P_RT_TYP_CD
,P_TX_TYP_CD
,nd(P_ORDR_NUM,I_ORDR_NUM)
,P_ACTY_TYP_CD
,P_MLT_CD
,P_ACTY_REF_PERD_CD
,nd(P_RT_VAL,I_RT_VAL)
,nd(P_ANN_RT_VAL,I_ANN_RT_VAL)
,nd(P_CMCD_RT_VAL,I_CMCD_RT_VAL)
,P_CMCD_REF_PERD_CD
,P_BNFT_RT_TYP_CD
,P_DSPLY_ON_ENRT_FLAG
,P_RT_OVRIDN_FLAG
,dd(P_RT_OVRIDN_THRU_DT,I_RT_OVRIDN_THRU_DT)
,dd(P_ELCTNS_MADE_DT,I_ELCTNS_MADE_DT)
,P_PRTT_RT_VAL_STAT_CD
,nd(P_ELEMENT_ENTRY_VALUE_ID,I_ELEMENT_ENTRY_VALUE_ID)
,P_PRTT_RMT_APRVD_FR_PYMT_ID
,nd(P_PP_IN_YR_USED_NUM,I_PP_IN_YR_USED_NUM)
,P_PRV_ATTRIBUTE_CATEGORY
,P_PRV_ATTRIBUTE1
,P_PRV_ATTRIBUTE2
,P_PRV_ATTRIBUTE3
,P_PRV_ATTRIBUTE4
,P_PRV_ATTRIBUTE5
,P_PRV_ATTRIBUTE6
,P_PRV_ATTRIBUTE7
,P_PRV_ATTRIBUTE8
,P_PRV_ATTRIBUTE9
,P_PRV_ATTRIBUTE10
,P_PRV_ATTRIBUTE11
,P_PRV_ATTRIBUTE12
,P_PRV_ATTRIBUTE13
,P_PRV_ATTRIBUTE14
,P_PRV_ATTRIBUTE15
,P_PRV_ATTRIBUTE16
,P_PRV_ATTRIBUTE17
,P_PRV_ATTRIBUTE18
,P_PRV_ATTRIBUTE19
,P_PRV_ATTRIBUTE20
,P_PRV_ATTRIBUTE21
,P_PRV_ATTRIBUTE22
,P_PRV_ATTRIBUTE23
,P_PRV_ATTRIBUTE24
,P_PRV_ATTRIBUTE25
,P_PRV_ATTRIBUTE26
,P_PRV_ATTRIBUTE27
,P_PRV_ATTRIBUTE28
,P_PRV_ATTRIBUTE29
,P_PRV_ATTRIBUTE30
,P_PK_ID_TABLE_NAME
,P_PK_ID
,L_NO_END_ELEMENT
,dc(P_EFFECTIVE_DATE)
,P_PRTT_RT_VAL_USER_KEY
,P_PERSON_USER_KEY
,P_INPUT_VALUE_NAME
,P_ELEMENT_NAME
,P_LANGUAGE_CODE
,P_ENRT_RT_USER_KEY
,P_PRTT_ENRT_RSLT_USER_KEY
,P_CVG_AMT_CALC
,P_ACTUAL_PREMIUM
,P_COMP_LEVEL_FACTOR
,P_PER_IN_LER_USER_KEY
,P_ENDED_PER_IN_LER_USER_KEY
,P_ACTY_BASE_RATE
,P_PRTT_REIMBMT_RQST_USER_KEY);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,dn,vn,dh,d(l.pval001)) p1,
l.pval001 d1,
decode(l.pval002,cn,dn,vn,dh,d(l.pval002)) p2,
l.pval002 d2,
decode(l.pval003,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval003,'BEN_RT_TYP',d(l.pval056),l.pval061)) p3,
l.pval003 d3,
decode(l.pval004,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval004,'BEN_TX_TYP',d(l.pval056),l.pval061)) p4,
l.pval004 d4,
decode(l.pval005,cn,nn,vn,nh,
 hr_pump_get.gl(l.pval005,'BEN_RT_ORDR_NUM',d(l.pval056),l.pval061)) p5,
l.pval005 d5,
decode(l.pval006,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval006,'BEN_ACTY_TYP',d(l.pval056),l.pval061)) p6,
l.pval006 d6,
decode(l.pval007,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval007,'BEN_MLT',d(l.pval056),l.pval061)) p7,
l.pval007 d7,
decode(l.pval008,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval008,'BEN_ACTY_REF_PERD',d(l.pval056),l.pval061)) p8,
l.pval008 d8,
decode(l.pval009,cn,nn,vn,nh,n(l.pval009)) p9,
l.pval009 d9,
decode(l.pval010,cn,nn,vn,nh,n(l.pval010)) p10,
l.pval010 d10,
decode(l.pval011,cn,nn,vn,nh,n(l.pval011)) p11,
l.pval011 d11,
decode(l.pval012,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval012,'BEN_ENRT_INFO_RT_FREQ',d(l.pval056),l.pval061)) p12,
l.pval012 d12,
decode(l.pval013,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval013,'BEN_RT_TYP',d(l.pval056),l.pval061)) p13,
l.pval013 d13,
decode(l.pval014,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval014,'YES_NO',d(l.pval056),l.pval061)) p14,
l.pval014 d14,
decode(l.pval015,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval015,'YES_NO',d(l.pval056),l.pval061)) p15,
l.pval015 d15,
decode(l.pval016,cn,dn,vn,dh,d(l.pval016)) p16,
l.pval016 d16,
decode(l.pval017,cn,dn,vn,dh,d(l.pval017)) p17,
l.pval017 d17,
decode(l.pval018,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval018,'BEN_PRTT_ENRT_RSLT_STAT',d(l.pval056),l.pval061)) p18,
l.pval018 d18,
decode(l.pval019,cn,nn,vn,nh,n(l.pval019)) p19,
l.pval019 d19,
decode(l.pval020,cn,nn,vn,vn,n(l.pval020)) p20,
l.pval020 d20,
decode(l.pval021,cn,nn,vn,nh,n(l.pval021)) p21,
l.pval021 d21,
decode(l.pval022,cn,vn,vn,vh,l.pval022) p22,
l.pval022 d22,
decode(l.pval023,cn,vn,vn,vh,l.pval023) p23,
l.pval023 d23,
decode(l.pval024,cn,vn,vn,vh,l.pval024) p24,
l.pval024 d24,
decode(l.pval025,cn,vn,vn,vh,l.pval025) p25,
l.pval025 d25,
decode(l.pval026,cn,vn,vn,vh,l.pval026) p26,
l.pval026 d26,
decode(l.pval027,cn,vn,vn,vh,l.pval027) p27,
l.pval027 d27,
decode(l.pval028,cn,vn,vn,vh,l.pval028) p28,
l.pval028 d28,
decode(l.pval029,cn,vn,vn,vh,l.pval029) p29,
l.pval029 d29,
decode(l.pval030,cn,vn,vn,vh,l.pval030) p30,
l.pval030 d30,
decode(l.pval031,cn,vn,vn,vh,l.pval031) p31,
l.pval031 d31,
decode(l.pval032,cn,vn,vn,vh,l.pval032) p32,
l.pval032 d32,
decode(l.pval033,cn,vn,vn,vh,l.pval033) p33,
l.pval033 d33,
decode(l.pval034,cn,vn,vn,vh,l.pval034) p34,
l.pval034 d34,
decode(l.pval035,cn,vn,vn,vh,l.pval035) p35,
l.pval035 d35,
decode(l.pval036,cn,vn,vn,vh,l.pval036) p36,
l.pval036 d36,
decode(l.pval037,cn,vn,vn,vh,l.pval037) p37,
l.pval037 d37,
decode(l.pval038,cn,vn,vn,vh,l.pval038) p38,
l.pval038 d38,
decode(l.pval039,cn,vn,vn,vh,l.pval039) p39,
l.pval039 d39,
decode(l.pval040,cn,vn,vn,vh,l.pval040) p40,
l.pval040 d40,
decode(l.pval041,cn,vn,vn,vh,l.pval041) p41,
l.pval041 d41,
decode(l.pval042,cn,vn,vn,vh,l.pval042) p42,
l.pval042 d42,
decode(l.pval043,cn,vn,vn,vh,l.pval043) p43,
l.pval043 d43,
decode(l.pval044,cn,vn,vn,vh,l.pval044) p44,
l.pval044 d44,
decode(l.pval045,cn,vn,vn,vh,l.pval045) p45,
l.pval045 d45,
decode(l.pval046,cn,vn,vn,vh,l.pval046) p46,
l.pval046 d46,
decode(l.pval047,cn,vn,vn,vh,l.pval047) p47,
l.pval047 d47,
decode(l.pval048,cn,vn,vn,vh,l.pval048) p48,
l.pval048 d48,
decode(l.pval049,cn,vn,vn,vh,l.pval049) p49,
l.pval049 d49,
decode(l.pval050,cn,vn,vn,vh,l.pval050) p50,
l.pval050 d50,
decode(l.pval051,cn,vn,vn,vh,l.pval051) p51,
l.pval051 d51,
decode(l.pval052,cn,vn,vn,vh,l.pval052) p52,
l.pval052 d52,
decode(l.pval053,cn,vn,vn,vh,l.pval053) p53,
l.pval053 d53,
decode(l.pval054,cn,nn,vn,vn,n(l.pval054)) p54,
l.pval054 d54,
decode(l.pval055,cn,vn,vn,null,l.pval055) p55,
l.pval055 d55,
decode(l.pval056,cn,dn,d(l.pval056)) p56,
decode(l.pval057,cn,vn,l.pval057) p57,
decode(l.pval058,cn,vn,vn,vn,l.pval058) p58,
l.pval058 d58,
decode(l.pval059,cn,vn,vn,vh,l.pval059) p59,
l.pval059 d59,
decode(l.pval060,cn,vn,vn,vh,l.pval060) p60,
l.pval060 d60,
decode(l.pval061,cn,vn,vn,vh,l.pval061) p61,
l.pval061 d61,
decode(l.pval062,cn,vn,vn,vn,l.pval062) p62,
l.pval062 d62,
decode(l.pval063,cn,vn,vn,vn,l.pval063) p63,
l.pval063 d63,
decode(l.pval064,cn,vn,vn,vh,l.pval064) p64,
l.pval064 d64,
decode(l.pval065,cn,vn,vn,vh,l.pval065) p65,
l.pval065 d65,
decode(l.pval066,cn,vn,vn,vh,l.pval066) p66,
l.pval066 d66,
decode(l.pval067,cn,vn,vn,vn,l.pval067) p67,
l.pval067 d67,
decode(l.pval068,cn,vn,vn,vn,l.pval068) p68,
l.pval068 d68,
decode(l.pval069,cn,vn,vn,vh,l.pval069) p69,
l.pval069 d69,
decode(l.pval070,cn,vn,vn,vn,l.pval070) p70,
l.pval070 d70
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_NO_END_ELEMENT boolean;
L_PRTT_RT_VAL_ID number;
L_PERSON_ID number;
L_INPUT_VALUE_ID number;
L_ELEMENT_TYPE_ID number;
L_ENRT_RT_ID number;
L_PRTT_ENRT_RSLT_ID number;
L_CVG_AMT_CALC_MTHD_ID number;
L_ACTL_PREM_ID number;
L_COMP_LVL_FCTR_ID number;
L_PER_IN_LER_ID number;
L_ENDED_PER_IN_LER_ID number;
L_ACTY_BASE_RT_ID number;
L_PRTT_REIMBMT_RQST_ID number;
L_OBJECT_VERSION_NUMBER number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if upper(c.p55) = 'TRUE' then
L_NO_END_ELEMENT := true;
elsif upper(c.p55) = 'FALSE' then
L_NO_END_ELEMENT := false;
elsif c.p55 is not null then
hr_utility.set_message(800,'HR_50327_DP_TYPE_ERR');
hr_utility.set_message_token('TYPE','BOOLEAN');
hr_utility.set_message_token('PARAMETER','P_NO_END_ELEMENT');
hr_utility.set_message_token('VALUE',c.p55);
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.raise_error;
end if;
--
if c.p57 is null then
L_PRTT_RT_VAL_ID:=nn;
else
L_PRTT_RT_VAL_ID := 
hr_pump_get.get_prtt_rt_val_id
(P_PRTT_RT_VAL_USER_KEY => c.p57);
end if;
--
if c.d58=cn then
L_PERSON_ID:=nn;
elsif c.d58 is null then 
L_PERSON_ID:=nh;
else
L_PERSON_ID := 
hr_pump_get.get_person_id
(P_PERSON_USER_KEY => c.p58);
end if;
--
if c.d59=cn or
c.d60=cn or
c.p56 is null or
c.d61=cn then
L_INPUT_VALUE_ID:=nn;
elsif c.d59 is null or
c.d60 is null or
c.d61 is null then 
L_INPUT_VALUE_ID:=nh;
else
L_INPUT_VALUE_ID := 
hr_pump_get.get_input_value_id
(P_INPUT_VALUE_NAME => c.p59
,P_ELEMENT_NAME => c.p60
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p56
,P_LANGUAGE_CODE => c.p61);
end if;
--
if c.d60=cn or
c.p56 is null then
L_ELEMENT_TYPE_ID:=nn;
elsif c.d60 is null then 
L_ELEMENT_TYPE_ID:=nh;
else
L_ELEMENT_TYPE_ID := 
hr_pump_get.get_element_type_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_ELEMENT_NAME => c.p60
,P_EFFECTIVE_DATE => c.p56);
end if;
--
if c.d62=cn then
L_ENRT_RT_ID:=nn;
elsif c.d62 is null then 
L_ENRT_RT_ID:=nh;
else
L_ENRT_RT_ID := 
hr_pump_get.get_enrt_rt_id
(P_ENRT_RT_USER_KEY => c.p62);
end if;
--
if c.d63=cn then
L_PRTT_ENRT_RSLT_ID:=nn;
elsif c.d63 is null then 
L_PRTT_ENRT_RSLT_ID:=nh;
else
L_PRTT_ENRT_RSLT_ID := 
hr_pump_get.get_prtt_enrt_rslt_id
(P_PRTT_ENRT_RSLT_USER_KEY => c.p63);
end if;
--
if c.d64=cn or
c.p56 is null then
L_CVG_AMT_CALC_MTHD_ID:=nn;
elsif c.d64 is null then 
L_CVG_AMT_CALC_MTHD_ID:=nh;
else
L_CVG_AMT_CALC_MTHD_ID := 
hr_pump_get.get_cvg_amt_calc_mthd_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_CVG_AMT_CALC => c.p64
,P_EFFECTIVE_DATE => c.p56);
end if;
--
if c.d65=cn or
c.p56 is null then
L_ACTL_PREM_ID:=nn;
elsif c.d65 is null then 
L_ACTL_PREM_ID:=nh;
else
L_ACTL_PREM_ID := 
hr_pump_get.get_actl_prem_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_ACTUAL_PREMIUM => c.p65
,P_EFFECTIVE_DATE => c.p56);
end if;
--
if c.d66=cn then
L_COMP_LVL_FCTR_ID:=nn;
elsif c.d66 is null then 
L_COMP_LVL_FCTR_ID:=nh;
else
L_COMP_LVL_FCTR_ID := 
hr_pump_get.get_comp_lvl_fctr_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_COMP_LEVEL_FACTOR => c.p66);
end if;
--
if c.d67=cn then
L_PER_IN_LER_ID:=nn;
elsif c.d67 is null then 
L_PER_IN_LER_ID:=nh;
else
L_PER_IN_LER_ID := 
hr_pump_get.get_per_in_ler_id
(P_PER_IN_LER_USER_KEY => c.p67);
end if;
--
if c.d68=cn then
L_ENDED_PER_IN_LER_ID:=nn;
elsif c.d68 is null then 
L_ENDED_PER_IN_LER_ID:=nh;
else
L_ENDED_PER_IN_LER_ID := 
hr_pump_get.get_ended_per_in_ler_id
(P_ENDED_PER_IN_LER_USER_KEY => c.p68);
end if;
--
if c.d69=cn or
c.p56 is null then
L_ACTY_BASE_RT_ID:=nn;
elsif c.d69 is null then 
L_ACTY_BASE_RT_ID:=nh;
else
L_ACTY_BASE_RT_ID := 
hr_pump_get.get_acty_base_rt_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_ACTY_BASE_RATE => c.p69
,P_EFFECTIVE_DATE => c.p56);
end if;
--
if c.d70=cn then
L_PRTT_REIMBMT_RQST_ID:=nn;
elsif c.d70 is null then 
L_PRTT_REIMBMT_RQST_ID:=nh;
else
L_PRTT_REIMBMT_RQST_ID := 
hr_pump_get.get_prtt_reimbmt_rqst_id
(P_PRTT_REIMBMT_RQST_USER_KEY => c.p70);
end if;
--
if c.p57 is null then
L_OBJECT_VERSION_NUMBER:=nn;
else
L_OBJECT_VERSION_NUMBER := 
hr_pump_get.GET_PRTT_RT_VAL_OVN
(P_PRTT_RT_VAL_USER_KEY => c.p57);
end if;
--
hr_data_pump.api_trc_on;
ben_prtt_rt_val_api.UPDATE_PRTT_RT_VAL
(p_validate => l_validate
,P_PRTT_RT_VAL_ID => L_PRTT_RT_VAL_ID
,P_PERSON_ID => L_PERSON_ID
,P_INPUT_VALUE_ID => L_INPUT_VALUE_ID
,P_ELEMENT_TYPE_ID => L_ELEMENT_TYPE_ID
,P_ENRT_RT_ID => L_ENRT_RT_ID
,P_RT_STRT_DT => c.p1
,P_RT_END_DT => c.p2
,P_RT_TYP_CD => c.p3
,P_TX_TYP_CD => c.p4
,P_ORDR_NUM => c.p5
,P_ACTY_TYP_CD => c.p6
,P_MLT_CD => c.p7
,P_ACTY_REF_PERD_CD => c.p8
,P_RT_VAL => c.p9
,P_ANN_RT_VAL => c.p10
,P_CMCD_RT_VAL => c.p11
,P_CMCD_REF_PERD_CD => c.p12
,P_BNFT_RT_TYP_CD => c.p13
,P_DSPLY_ON_ENRT_FLAG => c.p14
,P_RT_OVRIDN_FLAG => c.p15
,P_RT_OVRIDN_THRU_DT => c.p16
,P_ELCTNS_MADE_DT => c.p17
,P_PRTT_RT_VAL_STAT_CD => c.p18
,P_PRTT_ENRT_RSLT_ID => L_PRTT_ENRT_RSLT_ID
,P_CVG_AMT_CALC_MTHD_ID => L_CVG_AMT_CALC_MTHD_ID
,P_ACTL_PREM_ID => L_ACTL_PREM_ID
,P_COMP_LVL_FCTR_ID => L_COMP_LVL_FCTR_ID
,P_ELEMENT_ENTRY_VALUE_ID => c.p19
,P_PER_IN_LER_ID => L_PER_IN_LER_ID
,P_ENDED_PER_IN_LER_ID => L_ENDED_PER_IN_LER_ID
,P_ACTY_BASE_RT_ID => L_ACTY_BASE_RT_ID
,P_PRTT_REIMBMT_RQST_ID => L_PRTT_REIMBMT_RQST_ID
,P_PRTT_RMT_APRVD_FR_PYMT_ID => c.p20
,P_PP_IN_YR_USED_NUM => c.p21
,p_business_group_id => p_business_group_id
,P_PRV_ATTRIBUTE_CATEGORY => c.p22
,P_PRV_ATTRIBUTE1 => c.p23
,P_PRV_ATTRIBUTE2 => c.p24
,P_PRV_ATTRIBUTE3 => c.p25
,P_PRV_ATTRIBUTE4 => c.p26
,P_PRV_ATTRIBUTE5 => c.p27
,P_PRV_ATTRIBUTE6 => c.p28
,P_PRV_ATTRIBUTE7 => c.p29
,P_PRV_ATTRIBUTE8 => c.p30
,P_PRV_ATTRIBUTE9 => c.p31
,P_PRV_ATTRIBUTE10 => c.p32
,P_PRV_ATTRIBUTE11 => c.p33
,P_PRV_ATTRIBUTE12 => c.p34
,P_PRV_ATTRIBUTE13 => c.p35
,P_PRV_ATTRIBUTE14 => c.p36
,P_PRV_ATTRIBUTE15 => c.p37
,P_PRV_ATTRIBUTE16 => c.p38
,P_PRV_ATTRIBUTE17 => c.p39
,P_PRV_ATTRIBUTE18 => c.p40
,P_PRV_ATTRIBUTE19 => c.p41
,P_PRV_ATTRIBUTE20 => c.p42
,P_PRV_ATTRIBUTE21 => c.p43
,P_PRV_ATTRIBUTE22 => c.p44
,P_PRV_ATTRIBUTE23 => c.p45
,P_PRV_ATTRIBUTE24 => c.p46
,P_PRV_ATTRIBUTE25 => c.p47
,P_PRV_ATTRIBUTE26 => c.p48
,P_PRV_ATTRIBUTE27 => c.p49
,P_PRV_ATTRIBUTE28 => c.p50
,P_PRV_ATTRIBUTE29 => c.p51
,P_PRV_ATTRIBUTE30 => c.p52
,P_PK_ID_TABLE_NAME => c.p53
,P_PK_ID => c.p54
,P_NO_END_ELEMENT => L_NO_END_ELEMENT
,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER
,P_EFFECTIVE_DATE => c.p56);
hr_data_pump.api_trc_off;

--

--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_UPDATE_PRTT_RT_VAL;

/
