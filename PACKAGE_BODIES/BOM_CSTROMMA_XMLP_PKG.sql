--------------------------------------------------------
--  DDL for Package Body BOM_CSTROMMA_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BOM_CSTROMMA_XMLP_PKG" AS
/* $Header: CSTROMMAB.pls 120.1 2008/01/02 16:31:33 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  ecode number;
  emesg varchar2(100);
  BEGIN
    DECLARE
      L_FCN_CURRENCY VARCHAR2(50);
      L_LOCATION VARCHAR2(50);
      L_CONTEXT VARCHAR2(240);
      L_IF_OU_NOT_INVORG NUMBER;
    BEGIN
	    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
	    P_PCT_FROM_V:=P_PCT_FROM;
	    P_PCT_TO_V :=P_PCT_TO;

	    if P_DATE_FROM is not null then
		LP_DATE_FROM := to_char(P_DATE_FROM, 'DD-MON-YYYY');
	    end if;

	    if P_DATE_TO is not null then
		LP_DATE_TO := to_char(P_DATE_TO, 'DD-MON-YYYY');
	    end if;

	    if P_CURRENCY_CODE is null then
	    	LP_CURRENCY_CODE := 'USD';
	    ELSE
	    	LP_CURRENCY_CODE := P_CURRENCY_CODE;
	    end if;



      SELECT
        NVL(MULTI_ORG_FLAG
           ,'N')
      INTO P_MULTI_ORG_FLAG
      FROM
        FND_PRODUCT_GROUPS;


      L_IF_OU_NOT_INVORG := 0;

      IF P_VIEW_COST <> 1 THEN
        FND_MESSAGE.SET_NAME('null'
                            ,'null');
        /*SRW.USER_EXIT('FND MESSAGE_DISPLAY')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;

      L_LOCATION := 'ORGANIZATION_ID';

      SELECT
        MIN(OOD.ORGANIZATION_ID)
      INTO L_IF_OU_NOT_INVORG
      FROM
        ORG_ORGANIZATION_DEFINITIONS OOD
      WHERE DECODE(P_MULTI_ORG_FLAG
            ,'Y'
            ,OOD.OPERATING_UNIT
            ,OOD.ORGANIZATION_ID) = P_OPERATING_UNIT;


      SELECT
        O.ORGANIZATION_NAME,
        MP.MASTER_ORGANIZATION_ID,
        MP.COST_ORGANIZATION_ID,
        NVL(MINIMUM_ACCOUNTABLE_UNIT
           ,POWER(10
                ,NVL(-PRECISION
                   ,0))),
        NVL(FC.EXTENDED_PRECISION
           ,NVL(FC.PRECISION
              ,0)),
        MCS.CATEGORY_SET_NAME,
        LU1.MEANING,
        LU2.MEANING,
        LU3.MEANING
      INTO P_ORGANIZATION,P_MASTER_ORG_ID,P_COST_ORG_ID,P_ROUND_UNIT,P_EXT_PREC,P_CAT_SET_NAME,P_SORT_BY,P_CUST_OPT_DSP,P_RPT_OPT_DSP
      FROM
        ORG_ORGANIZATION_DEFINITIONS O,
        FND_CURRENCIES FC,
        MTL_CATEGORY_SETS MCS,
        MTL_PARAMETERS MP,
        MFG_LOOKUPS LU1,
        MFG_LOOKUPS LU2,
        MFG_LOOKUPS LU3
      WHERE FC.CURRENCY_CODE = LP_CURRENCY_CODE
        AND MP.ORGANIZATION_ID = L_IF_OU_NOT_INVORG
        AND MCS.CATEGORY_SET_ID = P_CATEGORY_SET
        AND O.ORGANIZATION_ID = MP.MASTER_ORGANIZATION_ID
        AND LU1.LOOKUP_TYPE = 'CST_ITEM_REPORT_SORT'
        AND LU1.LOOKUP_CODE = P_SORT_OPTION
        AND LU2.LOOKUP_TYPE = 'CST_RA_CUSTOMER_TYPE'
        AND LU2.LOOKUP_CODE = NVL(P_CUST_OPT
         ,2)
        AND LU3.LOOKUP_TYPE = 'CST_BICR_DETAIL_OPTION'
        AND LU3.LOOKUP_CODE = NVL(P_RPT_OPTION
         ,1);


QTY:= GET_PRECISION(P_EXT_PREC);
QTY_V:= GET_PRECISION(P_QTY_PRECISION);

      IF P_COST_TYPE_ID IS NULL THEN
        L_LOCATION := 'P_COST_TYPE_ID is NULL';
        P_SQL_SELECT_COST_TYPE := ' NVL( temp.cogs_amount, 0 ) ';
        P_SQL_FROM_COST_TYPE := ' ';
        P_SQL_WHERE_COST_TYPE := ' 0=0 ';
      ELSE
        L_LOCATION := 'P_COST_TYPE_ID is not NULL';
        SELECT
          COST_TYPE,
          DEFAULT_COST_TYPE_ID
        INTO P_COST_TYPE,P_DEF_COST_TYPE
        FROM
          CST_COST_TYPES
        WHERE COST_TYPE_ID = P_COST_TYPE_ID;
        P_SQL_SELECT_COST_TYPE := ' NVL( temp.ship_quantity, 0 ) * ' || ' NVL( decode( cic1.cost_type_id, null, cic2.item_cost, cic1.item_cost ), 0 ) ';
        P_SQL_FROM_COST_TYPE := ', cst_item_costs cic1, cst_item_costs cic2';
        P_SQL_WHERE_COST_TYPE := ' cic1.cost_type_id(+) = ' || P_COST_TYPE_ID || ' and ' || ' cic1.inventory_item_id(+) = temp.inventory_item_id and '
	|| ' cic1.organization_id(+)   = temp.organization_id   and ' || ' cic2.cost_type_id(+)      = ' || P_DEF_COST_TYPE || ' and ' || ' cic2.inventory_item_id(+) = temp.inventory_item_id and ' || ' cic2.organization_id(+)   = temp.organization_id ';
      END IF;

      L_LOCATION := 'P_OPERATING_UNIT';

      SELECT
        NAME
      INTO P_OPERATING_UNIT_NAME
      FROM
        HR_OPERATING_UNITS
      WHERE ORGANIZATION_ID = P_OPERATING_UNIT;

      L_LOCATION := 'CONFIG_ITEM_DETAILS';

      SELECT
        MEANING
      INTO P_CONFIG_ITEM_DTLS_OPTS
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'SYS_YES_NO'
        AND LOOKUP_CODE = NVL(P_CONFIG_ITEM_DETAILS
         ,2);

      L_LOCATION := 'ORDER_NUMBER';

      SELECT
        MIN(ORDER_NUMBER)
      INTO P_ORDER_NUMBER
      FROM
        OE_ORDER_HEADERS_ALL
      WHERE HEADER_ID = P_HEADER_ID;

      L_LOCATION := 'P_RANGE';

      IF (P_RPT_OPTION = 2 AND P_SORT_OPTION = 4 AND P_PCT_FROM IS NOT NULL AND P_PCT_TO IS NOT NULL) THEN
        P_RANGE_WHERE := 'SUM(NVL(TEMP.INVOICED_AMOUNT,0)) <>0';
      ELSE
        P_RANGE_WHERE := '1 = 1';
      END IF;

      IF P_CUSTOMER IS NOT NULL THEN
        L_LOCATION := 'P_CUSTOMER';
        SELECT
          HP.PARTY_NAME
        INTO P_CUSTOMER_NAME
        FROM
          HZ_CUST_ACCOUNTS HCA,
          HZ_PARTIES HP
        WHERE HCA.CUST_ACCOUNT_ID = P_CUSTOMER
          AND HP.PARTY_ID = HCA.PARTY_ID;
      END IF;

      IF P_SALESREP IS NOT NULL THEN
        L_LOCATION := 'P_SALESREP';

        SELECT
          NAME
        INTO P_SALESREP_NAME
        FROM
          RA_SALESREPS_ALL
        WHERE SALESREP_ID = P_SALESREP
          AND DECODE(P_MULTI_ORG_FLAG
              ,'Y'
              ,NVL(ORG_ID
                 ,-999)
              ,999) = DECODE(P_MULTI_ORG_FLAG
              ,'Y'
              ,NVL(P_OPERATING_UNIT
                 ,NVL(ORG_ID
                    ,-999))
              ,999);
      END IF;

      IF P_SALES_CHANNEL_CODE IS NOT NULL THEN
        L_LOCATION := 'P_SALESCHANNEL';
        SELECT
          MEANING
        INTO P_SALES_CHANNEL
        FROM
          SO_LOOKUPS
        WHERE LOOKUP_TYPE = 'SALES_CHANNEL'
          AND LOOKUP_CODE = P_SALES_CHANNEL_CODE;
      END IF;

      IF P_CLASS_CODE IS NOT NULL THEN
        L_LOCATION := 'P_CLASS';
        SELECT
          MEANING
        INTO P_CLASS
        FROM
          AR_LOOKUPS
        WHERE LOOKUP_TYPE = 'CUSTOMER CLASS'
          AND LOOKUP_CODE = P_CLASS_CODE;
      END IF;

      IF P_TERRITORY_ID IS NOT NULL THEN
        L_LOCATION := 'P_TERRITORY';
        SELECT
          NAME
        INTO P_TERRITORY
        FROM
          RA_TERRITORIES
        WHERE TERRITORY_ID = P_TERRITORY_ID;
      END IF;

      L_LOCATION := 'P_CURRENCY_CODE';
      SELECT
        SOB.CURRENCY_CODE
      INTO L_FCN_CURRENCY
      FROM
        GL_SETS_OF_BOOKS SOB,
        ORG_ORGANIZATION_DEFINITIONS OOD
      WHERE OOD.ORGANIZATION_ID = L_IF_OU_NOT_INVORG
        AND SOB.SET_OF_BOOKS_ID = OOD.SET_OF_BOOKS_ID;

      IF L_FCN_CURRENCY = LP_CURRENCY_CODE THEN
        P_CURRENCY_DSP := LP_CURRENCY_CODE;
      ELSE
        P_CURRENCY_DSP := LP_CURRENCY_CODE || ' @ ' || TO_CHAR(ROUND(1 / P_EXCHANGE_RATE
                                       ,5)) || L_FCN_CURRENCY;
      END IF;

      L_LOCATION := 'FLEXSQL';

      /*SRW.MESSAGE(0
                 ,'CSTRMRGA <<      ' || TO_CHAR(SYSDATE
                        ,'Dy Mon FmDD HH24:MI:SS YYYY'))*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(999
                   ,SQLERRM || ' @ ' || L_LOCATION)*/NULL;
        /*SRW.MESSAGE(999
                   ,'CSTRMRGA >X     ' || TO_CHAR(SYSDATE
                          ,'Dy Mon FmDD HH24:MI:SS YYYY'))*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/
        ecode := SQLCODE;
        emesg := SQLERRM;

        --RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION ITEM_MARGIN_PCTFORMULA(ITEM_SALES IN NUMBER
                                 ,ITEM_MARGIN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (ITEM_SALES = 0) THEN
      RETURN (NULL);
    ELSE
      RETURN ((ITEM_MARGIN / ITEM_SALES) * 100);
    END IF;
    RETURN NULL;
  END ITEM_MARGIN_PCTFORMULA;

  FUNCTION REP_MARGIN_PCTFORMULA(REP_O_SALES IN NUMBER
                                ,REP_O_MARGIN IN NUMBER
                                ,REP_IC_SALES IN NUMBER
                                ,REP_IC_MARGIN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_SORT_OPTION = 3) THEN
      IF (REP_O_SALES = 0) THEN
        RETURN (NULL);
      ELSE
        RETURN ((REP_O_MARGIN / REP_O_SALES) * 100);
      END IF;
    ELSE
      IF (REP_IC_SALES = 0) THEN
        RETURN (NULL);
      ELSE
        RETURN ((REP_IC_MARGIN / REP_IC_SALES) * 100);
      END IF;
    END IF;
    RETURN NULL;
  END REP_MARGIN_PCTFORMULA;

  FUNCTION CAT_MARGIN_PCTFORMULA(CAT_SALES IN NUMBER
                                ,CAT_MARGIN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (CAT_SALES = 0) THEN
      RETURN (NULL);
    ELSE
      RETURN ((CAT_MARGIN / CAT_SALES) * 100);
    END IF;
    RETURN NULL;
  END CAT_MARGIN_PCTFORMULA;

  FUNCTION CATEGORY_PSEGFORMULA(CATEGORY IN VARCHAR2
                               ,CATEGORY_SEGMENT IN VARCHAR2
                               ,CATEGORY_PSEG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(CATEGORY)*/NULL;
    /*SRW.REFERENCE(CATEGORY_SEGMENT)*/NULL;
    RETURN (CATEGORY_PSEG);
  END CATEGORY_PSEGFORMULA;

  FUNCTION ITEM_PSEGFORMULA(ITEM_NUMBER IN VARCHAR2
                           ,ITEM_SEGMENT IN VARCHAR2
                           ,ITEM_PSEG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEM_NUMBER)*/NULL;
    /*SRW.REFERENCE(ITEM_SEGMENT)*/NULL;
    RETURN (ITEM_PSEG);
  END ITEM_PSEGFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    /*SRW.MESSAGE(1
               ,'CSTRMRGA >>      ' || TO_CHAR(SYSDATE
                      ,'Dy Mon DD HH24:MI:SS YYYY'))*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AVG_UNIT_PRICEFORMULA(ITEM_INVOICE_QTY IN NUMBER
                                ,ITEM_SALES IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (ITEM_INVOICE_QTY = 0) THEN
      RETURN (0);
    ELSE
      RETURN (ROUND(ITEM_SALES / ITEM_INVOICE_QTY
                  ,P_EXT_PREC));
    END IF;
    RETURN NULL;
  END AVG_UNIT_PRICEFORMULA;

  FUNCTION AVG_UNIT_COSTFORMULA(ITEM_SHIP_QTY IN NUMBER
                               ,ITEM_COGS IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (ITEM_SHIP_QTY = 0) THEN
      RETURN (0);
    ELSE
      RETURN (ROUND(ITEM_COGS / ITEM_SHIP_QTY
                  ,P_EXT_PREC));
    END IF;
    RETURN NULL;
  END AVG_UNIT_COSTFORMULA;

  FUNCTION ITEMCATFORMULA(CATEGORY IN VARCHAR2
                         ,CATEGORY_SEGMENT IN VARCHAR2
                         ,CATEGORY_PSEG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(CATEGORY)*/NULL;
    /*SRW.REFERENCE(CATEGORY_SEGMENT)*/NULL;
    /*SRW.REFERENCE(CATEGORY_PSEG)*/NULL;
    IF P_SORT_OPTION = 2 THEN
      RETURN (CATEGORY_PSEG);
    ELSE
      RETURN ('Can someone give me a glue what is going on?');
    END IF;
    RETURN NULL;
  END ITEMCATFORMULA;

  FUNCTION ORDER_MARGIN_PCTFORMULA(ORDER_SALES IN NUMBER
                                  ,ORDER_MARGIN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (ORDER_SALES = 0) THEN
      RETURN (NULL);
    ELSE
      RETURN ((ORDER_MARGIN / ORDER_SALES) * 100);
    END IF;
    RETURN NULL;
  END ORDER_MARGIN_PCTFORMULA;

  FUNCTION ORDER_SALES1FORMULA(ORDER_SALES IN NUMBER
                              ,ORDER_MARGIN_PCT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ORDER_SALES)*/NULL;
    /*SRW.REFERENCE(ORDER_MARGIN_PCT)*/NULL;
    IF (P_SORT_OPTION = 3 AND NOT (NVL(P_PCT_FROM
       ,ORDER_MARGIN_PCT) <= ORDER_MARGIN_PCT AND NVL(P_PCT_TO
       ,ORDER_MARGIN_PCT) >= ORDER_MARGIN_PCT)) THEN
      RETURN (0);
    ELSE
      RETURN (ORDER_SALES);
    END IF;
    RETURN NULL;
  END ORDER_SALES1FORMULA;

  FUNCTION ORDER_COGS1FORMULA(ORDER_COGS IN NUMBER
                             ,ORDER_MARGIN_PCT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ORDER_COGS)*/NULL;
    /*SRW.REFERENCE(ORDER_MARGIN_PCT)*/NULL;
    IF (P_SORT_OPTION = 3 AND NOT (NVL(P_PCT_FROM
       ,ORDER_MARGIN_PCT) <= ORDER_MARGIN_PCT AND NVL(P_PCT_TO
       ,ORDER_MARGIN_PCT) >= ORDER_MARGIN_PCT)) THEN
      RETURN (0);
    ELSE
      RETURN (ORDER_COGS);
    END IF;
    RETURN NULL;
  END ORDER_COGS1FORMULA;

  FUNCTION ORDER_MARGIN1FORMULA(ORDER_MARGIN IN NUMBER
                               ,ORDER_MARGIN_PCT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ORDER_MARGIN)*/NULL;
    /*SRW.REFERENCE(ORDER_MARGIN_PCT)*/NULL;
    IF (P_SORT_OPTION = 3 AND NOT (NVL(P_PCT_FROM
       ,ORDER_MARGIN_PCT) <= ORDER_MARGIN_PCT AND NVL(P_PCT_TO
       ,ORDER_MARGIN_PCT) >= ORDER_MARGIN_PCT)) THEN
      RETURN (0);
    ELSE
      RETURN (ORDER_MARGIN);
    END IF;
    RETURN NULL;
  END ORDER_MARGIN1FORMULA;

  FUNCTION ITEM_SALES1FORMULA(ITEM_SALES IN NUMBER
                             ,ITEM_MARGIN_PCT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ITEM_SALES)*/NULL;
    /*SRW.REFERENCE(ITEM_MARGIN_PCT)*/NULL;
    IF (P_SORT_OPTION <> 3 AND NOT (NVL(P_PCT_FROM
       ,ITEM_MARGIN_PCT) <= ITEM_MARGIN_PCT AND NVL(P_PCT_TO
       ,ITEM_MARGIN_PCT) >= ITEM_MARGIN_PCT)) THEN
      RETURN (0);
    ELSE
      RETURN (ITEM_SALES);
    END IF;
    RETURN NULL;
  END ITEM_SALES1FORMULA;

  FUNCTION ITEM_COGS1FORMULA(ITEM_COGS IN NUMBER
                            ,ITEM_MARGIN_PCT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ITEM_COGS)*/NULL;
    /*SRW.REFERENCE(ITEM_MARGIN_PCT)*/NULL;
    IF (P_SORT_OPTION <> 3 AND NOT (NVL(P_PCT_FROM
       ,ITEM_MARGIN_PCT) <= ITEM_MARGIN_PCT AND NVL(P_PCT_TO
       ,ITEM_MARGIN_PCT) >= ITEM_MARGIN_PCT)) THEN
      RETURN (0);
    ELSE
      RETURN (ITEM_COGS);
    END IF;
    RETURN NULL;
  END ITEM_COGS1FORMULA;

  FUNCTION ITEM_MARGIN1FORMULA(ITEM_MARGIN IN NUMBER
                              ,ITEM_MARGIN_PCT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ITEM_MARGIN)*/NULL;
    /*SRW.REFERENCE(ITEM_MARGIN_PCT)*/NULL;
    IF (P_SORT_OPTION <> 3 AND NOT (NVL(P_PCT_FROM
       ,ITEM_MARGIN_PCT) <= ITEM_MARGIN_PCT AND NVL(P_PCT_TO
       ,ITEM_MARGIN_PCT) >= ITEM_MARGIN_PCT)) THEN
      RETURN (0);
    ELSE
      RETURN (ITEM_MARGIN);
    END IF;
    RETURN NULL;
  END ITEM_MARGIN1FORMULA;

  FUNCTION MARGINFORMULA(TOTAL_SALES_AMOUNT IN NUMBER
                        ,TOTAL_COGS_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (TOTAL_SALES_AMOUNT - TOTAL_COGS_AMOUNT);
  END MARGINFORMULA;

  FUNCTION MARGIN_PCTFORMULA(TOTAL_SALES_AMOUNT IN NUMBER
                            ,MARGIN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (TOTAL_SALES_AMOUNT = 0) THEN
      RETURN (NULL);
    ELSE
      RETURN (100 * (MARGIN / TOTAL_SALES_AMOUNT));
    END IF;
    RETURN NULL;
  END MARGIN_PCTFORMULA;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION CONFIG_ITEM_MARGINFORMULA(CONFIG_ITEM_SALES_AMOUNT IN NUMBER
                                    ,CONFIG_ITEM_COGS_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CONFIG_ITEM_SALES_AMOUNT - CONFIG_ITEM_COGS_AMOUNT);
  END CONFIG_ITEM_MARGINFORMULA;

  FUNCTION CONFIG_ITEM_MARGIN_PCTFORMULA(CONFIG_ITEM_SALES_AMOUNT IN NUMBER
                                        ,CONFIG_ITEM_MARGIN IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (CONFIG_ITEM_SALES_AMOUNT = 0) THEN
      RETURN (NULL);
    ELSE
      RETURN ((CONFIG_ITEM_MARGIN / CONFIG_ITEM_SALES_AMOUNT) * 100);
    END IF;
    RETURN NULL;
  END CONFIG_ITEM_MARGIN_PCTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION P_OPERATING_UNIT_NAMEVALIDTRIG RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_OPERATING_UNIT_NAMEVALIDTRIG;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
function get_precision(qty_precision in number) return VARCHAR2 is
begin

if qty_precision = 0 then return('999G999G999G990');

elsif qty_precision = 1 then return('999G999G999G990D0');

elsif qty_precision = 3 then return('999G999G999G990D000');

elsif qty_precision = 4 then return('999G999G999G990D0000');

elsif qty_precision = 5 then return('999G999G999G990D00000');

elsif qty_precision = 6 then  return('999G999G999G990D000000');

else return('999G999G999G990D00');

end if;

end;
END BOM_CSTROMMA_XMLP_PKG;



/
