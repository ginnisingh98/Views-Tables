--------------------------------------------------------
--  DDL for Package Body JA_JAINITCR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINITCR_XMLP_PKG" AS
/* $Header: JAINITCRB.pls 120.1 2007/12/25 16:21:38 dwkrishn noship $ */
  FUNCTION CONVERT_NUMBER(IN_NUMERAL IN INTEGER := 0) RETURN VARCHAR2 IS
    NUMBER_TOO_LARGE EXCEPTION;
    NUMERAL INTEGER := ABS(IN_NUMERAL);
    MAX_DIGIT INTEGER := 12;
    NUMBER_TEXT VARCHAR2(240) := '';
    CURRENT_SEGMENT VARCHAR2(80);
    B_ZERO VARCHAR2(25);
    B_THOUSAND VARCHAR2(25);
    THOUSAND NUMBER := POWER(10
         ,3);
    B_LAKH VARCHAR2(25);
    LAKH NUMBER := POWER(10
         ,5);
    B_CRORE VARCHAR2(25);
    CRORE NUMBER := POWER(10
         ,7);
    FUNCTION CONVERT_NUMBER(SEGMENT IN NUMBER) RETURN VARCHAR2 IS
      VALUE_TEXT VARCHAR2(80);
    BEGIN
      VALUE_TEXT := TO_CHAR(TO_DATE(SEGMENT
                                   ,'YYYY')
                           ,'Yyyysp');
      RETURN (VALUE_TEXT);
    END CONVERT_NUMBER;
  BEGIN
    IF NUMERAL >= POWER(10
         ,MAX_DIGIT) THEN
      RAISE NUMBER_TOO_LARGE;
    END IF;
    SELECT
      ' ' || LC1.DISPLAYED_FIELD || ' ',
      ' ' || LC2.DISPLAYED_FIELD || ' ',
      ' ' || LC3.DISPLAYED_FIELD || ' ',
      ' ' || LC4.DISPLAYED_FIELD
    INTO B_CRORE,B_LAKH,B_THOUSAND,B_ZERO
    FROM
      AP_LOOKUP_CODES LC1,
      AP_LOOKUP_CODES LC2,
      AP_LOOKUP_CODES LC3,
      AP_LOOKUP_CODES LC4
    WHERE LC1.LOOKUP_CODE = 'CRORE'
      AND LC1.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND LC2.LOOKUP_CODE = 'LAKH'
      AND LC2.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND LC3.LOOKUP_CODE = 'THOUSAND'
      AND LC3.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND LC4.LOOKUP_CODE = 'ZERO'
      AND LC4.LOOKUP_TYPE = 'NLS TRANSLATION';
    IF NUMERAL = 0 THEN
      RETURN (B_ZERO);
    END IF;
    CURRENT_SEGMENT := TRUNC(NUMERAL / CRORE);
    NUMERAL := NUMERAL - (CURRENT_SEGMENT * CRORE);
    IF CURRENT_SEGMENT <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(CURRENT_SEGMENT) || B_CRORE;
    END IF;
    CURRENT_SEGMENT := TRUNC(NUMERAL / LAKH);
    NUMERAL := NUMERAL - (CURRENT_SEGMENT * LAKH);
    IF CURRENT_SEGMENT <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(CURRENT_SEGMENT) || B_LAKH;
    END IF;
    CURRENT_SEGMENT := TRUNC(NUMERAL / THOUSAND);
    NUMERAL := NUMERAL - (CURRENT_SEGMENT * THOUSAND);
    IF CURRENT_SEGMENT <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(CURRENT_SEGMENT) || B_THOUSAND;
    END IF;
    IF NUMERAL <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(NUMERAL);
    END IF;
    NUMBER_TEXT := SUBSTR(NUMBER_TEXT
                         ,1
                         ,1) || RTRIM(LOWER(SUBSTR(NUMBER_TEXT
                                     ,2
                                     ,NVL(LENGTH(NUMBER_TEXT)
                                        ,0))));
    RETURN (NUMBER_TEXT);
  EXCEPTION
    WHEN NUMBER_TOO_LARGE THEN
      RETURN (NULL);
    WHEN OTHERS THEN
      RETURN (NULL);
  END CONVERT_NUMBER;

  FUNCTION CF_3FORMULA(CS_TDS_AMOUNT IN NUMBER) RETURN VARCHAR2 IS
    TEMP VARCHAR2(240);
    TMP NUMBER;
  BEGIN
    TMP := CS_TDS_AMOUNT;
    TEMP := 'Certified that a sum of Rs.("in words") ' || RTRIM(CONVERT_NUMBER(TMP)) || ' only has been deducted at Source and paid to the credit of the central government as per details given above';
    RETURN (TEMP);
  END CF_3FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    UPDATE
      JAI_AP_TDS_F16_HDRS_ALL
    SET
      ISSUE_DATE = SYSDATE
      ,PRINT_FLAG = 'Y'
    WHERE CERTIFICATE_NUM >= NVL(P_CERTIFICATE_START_NO
       ,CERTIFICATE_NUM)
      AND CERTIFICATE_NUM <= NVL(P_CERTIFICATE_END_NO
       ,CERTIFICATE_NUM)
      AND VENDOR_ID = NVL(P_VENDOR_ID
       ,VENDOR_ID)
      AND TRUNC(FROM_DATE) >= NVL(P_FROM_DATE
       ,TRUNC(FROM_DATE))
      AND TRUNC(TO_DATE) <= NVL(P_TO_DATE
       ,TRUNC(TO_DATE));
    COMMIT;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION BANK_BRANCHFORMULA(C_CHQ IN VARCHAR2
                             ,TDS_INVOICE_ID IN NUMBER
                             ,TDS_ID IN NUMBER) RETURN VARCHAR2 IS
    BRANCH_NAME VARCHAR2(190);
    P_BANK_NAME VARCHAR2(30);
    P_BANK_BRANCH_NAME VARCHAR2(30);
    P_ADD1 VARCHAR2(35);
    P_ADD2 VARCHAR2(35);
    P_ADD3 VARCHAR2(35);
    P_CITY VARCHAR2(25);
    ADDRESS VARCHAR2(130);
    CURSOR GET_BANK_ADD_CUR IS
      SELECT
        ATTRIBUTE2
      FROM
        AP_CHECKS_ALL
      WHERE ATTRIBUTE3 = C_CHQ
        AND ATTRIBUTE_CATEGORY = 'India Payment Information'
        AND CHECK_ID in (
        SELECT
          CHECK_ID
        FROM
          AP_INVOICE_PAYMENTS_ALL
        WHERE INVOICE_ID = TDS_INVOICE_ID );
    V_BANK_ADD VARCHAR2(150);
  BEGIN
    OPEN GET_BANK_ADD_CUR;
    FETCH GET_BANK_ADD_CUR
     INTO V_BANK_ADD;
    CLOSE GET_BANK_ADD_CUR;
    RETURN (V_BANK_ADD);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      BEGIN
        SELECT
          BANK_NAME,
          BANK_BRANCH_NAME,
          ADDRESS_LINE1,
          ADDRESS_LINE2,
          ADDRESS_LINE3,
          CITY
        INTO P_BANK_NAME,P_BANK_BRANCH_NAME,P_ADD1,P_ADD2,P_ADD3,P_CITY
        FROM
          AP_BANK_BRANCHES
        WHERE BANK_BRANCH_ID in (
          SELECT
            BANK_BRANCH_ID
          FROM
            AP_BANK_ACCOUNTS_ALL
          WHERE BANK_ACCOUNT_ID IN (
            SELECT
              DISTINCT
              EXTERNAL_BANK_ACCOUNT_ID
            FROM
              AP_BANK_ACCOUNT_USES_ALL
            WHERE PRIMARY_FLAG = 'Y'
              AND VENDOR_ID = TDS_ID ) );
        IF P_ADD1 IS NOT NULL THEN
          ADDRESS := P_ADD1;
        END IF;
        IF P_ADD2 IS NOT NULL THEN
          ADDRESS := ADDRESS || ',' || P_ADD2;
        END IF;
        IF P_ADD3 IS NOT NULL THEN
          ADDRESS := ADDRESS || ',' || P_ADD3;
        END IF;
        IF P_CITY IS NOT NULL THEN
          ADDRESS := ADDRESS || ',' || P_CITY;
        END IF;
        BRANCH_NAME := P_BANK_NAME || ' ' || P_BANK_BRANCH_NAME || ' ,' || ADDRESS;
        RETURN (BRANCH_NAME);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN ('N/A');
        WHEN OTHERS THEN
          NULL;
      END;
    WHEN OTHERS THEN
      RETURN ('N/A');
  END BANK_BRANCHFORMULA;

  FUNCTION CF_1FORMULA RETURN VARCHAR2 IS
    CURSOR ORG_NAME_CUR(P_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NAME
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    V_NAME1 VARCHAR(60);
  BEGIN
    OPEN ORG_NAME_CUR(P_ORGANIZATION_ID);
    FETCH ORG_NAME_CUR
     INTO V_NAME1;
    CLOSE ORG_NAME_CUR;
    RETURN (V_NAME1);
  END CF_1FORMULA;

  FUNCTION CF_2FORMULA RETURN VARCHAR2 IS
    V_ADDRESS1 VARCHAR2(840);
  BEGIN
    SELECT
      DECODE(HOU.LOCATION_ID
            ,NULL
            ,HOU.INTERNAL_ADDRESS_LINE
            ,LOC.ADDRESS_LINE_1 || ',' || LOC.ADDRESS_LINE_2 || ',' || LOC.ADDRESS_LINE_3 || ',' || LOC.TOWN_OR_CITY || ',' || LOC.POSTAL_CODE || ',' || LOC.COUNTRY)
    INTO V_ADDRESS1
    FROM
      HR_ORGANIZATION_UNITS HOU,
      HR_LOCATIONS LOC
    WHERE HOU.ORGANIZATION_ID = P_ORGANIZATION_ID
      AND HOU.LOCATION_ID = loc.location_id (+);
    RETURN (V_ADDRESS1);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_2FORMULA;

  FUNCTION CP_1FORMULA RETURN CHAR IS
  BEGIN
    NULL;
  END CP_1FORMULA;

  FUNCTION CF_VEN_PAN_NOFORMULA(VEN_ID IN NUMBER) RETURN CHAR IS
    V_PAN_NO JAI_AP_TDS_VENDOR_HDRS.PAN_NO%TYPE;
    CURSOR GET_PAN_NO_CUR(P_VEN_ID IN NUMBER) IS
      SELECT
        PAN_NO
      FROM
        JAI_AP_TDS_VENDOR_HDRS
      WHERE VENDOR_ID = P_VEN_ID;
  BEGIN
    OPEN GET_PAN_NO_CUR(VEN_ID);
    FETCH GET_PAN_NO_CUR
     INTO V_PAN_NO;
    CLOSE GET_PAN_NO_CUR;
    RETURN V_PAN_NO;
  END CF_VEN_PAN_NOFORMULA;

  FUNCTION CF_CHECK_DEP_DATEFORMULA(CHQ IN NUMBER) RETURN DATE IS
    CURSOR CHK_DEP_DATE_CUR IS
      SELECT
        CHECK_DEPOSIT_DATE
      FROM
        JAI_AP_TDS_PAYMENTS APC,
        JAI_AP_TDS_F16_HDRS_ALL AFRM
      WHERE CHECK_NUMBER = CHQ
        AND APC.VENDOR_ID = AFRM.TAX_AUTHORITY_ID;
    V_CHQ_NO DATE;
  BEGIN
    OPEN CHK_DEP_DATE_CUR;
    FETCH CHK_DEP_DATE_CUR
     INTO V_CHQ_NO;
    CLOSE CHK_DEP_DATE_CUR;
    RETURN (V_CHQ_NO);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(20
                 ,'NO cheque deposit given for the cheque')*/NULL;
      RETURN NULL;
    WHEN OTHERS THEN
      /*SRW.MESSAGE(20
                 ,'Cheque date is improper in the system')*/NULL;
      RETURN NULL;
  END CF_CHECK_DEP_DATEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    AUDSID NUMBER := USERENV('SESSIONID');
    SID NUMBER;
    SERIAL NUMBER;
    SPID VARCHAR2(9);
    NAME1 VARCHAR2(25);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.15 last modified date is 27-Jun-2007')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO SID,SERIAL,SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO NAME1;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(1275
                   ,'TraceFile Name = ' || LOWER(NAME1) || '_ora_' || SPID || '.trc')*/NULL;
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION F_SELECTED_CERT_DATE RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;
   -- NL CONSTANT VARCHAR2(1) DEFAULT CHR(10);
  BEGIN
    IF P_FROM_DATE IS NOT NULL THEN
      RET_TEXT := ' AND   afrm.certificate_date BETWEEN :P_FROM_DATE ';
    ELSE
      RET_TEXT := ' AND   afrm.certificate_date BETWEEN afrm.certificate_date ';
    END IF;
    IF P_TO_DATE IS NOT NULL THEN
      RET_TEXT := RET_TEXT || ' and :P_TO_DATE ';
    ELSE
      RET_TEXT := RET_TEXT || ' and sysdate ';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT ;
    END IF;
    RETURN RET_TEXT;
  END F_SELECTED_CERT_DATE;

  FUNCTION F_SELECTED_CERT_ID RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;
    -- NL CONSTANT VARCHAR2(1) DEFAULT CHR(10);
  BEGIN
    IF P_CERTIFICATE_START_NO IS NOT NULL THEN
      RET_TEXT := 'AND   afrm.certificate_num BETWEEN :P_CERTIFICATE_START_NO ';
    ELSE
      RET_TEXT := 'AND   afrm.certificate_num BETWEEN afrm.certificate_num ';
    END IF;
    IF P_CERTIFICATE_END_NO IS NOT NULL THEN
      RET_TEXT := RET_TEXT || ' and :P_CERTIFICATE_END_NO ';
    ELSE
      RET_TEXT := RET_TEXT || ' and afrm.certificate_num ';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT ;
    END IF;
    RETURN RET_TEXT;
  END F_SELECTED_CERT_ID;

  FUNCTION F_SELECTED_VENDOR RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;
    -- NL CONSTANT VARCHAR2(1) DEFAULT CHR(10);
  BEGIN
    IF P_VENDOR_ID IS NOT NULL THEN
      RET_TEXT := ' AND afrm.vendor_id = :P_vendor_id ';
    ELSE
      RET_TEXT := ' AND afrm.vendor_id = afrm.vendor_id ';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT ;
    END IF;
    RETURN RET_TEXT;
  END F_SELECTED_VENDOR;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_SELECTED_VENDOR := F_SELECTED_VENDOR;
    P_SELECTED_CERT_ID := F_SELECTED_CERT_ID;
    P_SELECTED_CERT_DATE := F_SELECTED_CERT_DATE;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_TDS_AMTFORMULA(TDS_INVOICE_ID IN NUMBER
                            ,TDS_INVOICE_AMT IN NUMBER) RETURN NUMBER IS
    CURSOR C_GET_TAX_ID IS
      SELECT
        JATP.TDS_TAX_ID
      FROM
        JAI_AP_TDS_INV_PAYMENTS JATP
      WHERE JATP.INVOICE_ID = TDS_INVOICE_ID;
    CURSOR C_GET_TDS_RATES(P_TAX_ID IN NUMBER) IS
      SELECT
        ( NVL(TAX_RATE
           ,0) - ( NVL(SURCHARGE_RATE
           ,0) + NVL(CESS_RATE
           ,0) ) ) TDS_RATE,
        NVL(SURCHARGE_RATE
           ,0) SURCHARGE_RATE,
        NVL(CESS_RATE
           ,0),
        NVL(SH_CESS_RATE
           ,0),
        NVL(TAX_RATE
           ,0)
      FROM
        JAI_CMN_TAXES_ALL JTC
      WHERE TAX_ID = P_TAX_ID;
    LN_TAX_ID NUMBER;
    LN_TDS_RATE NUMBER;
    LN_TAX_RATE NUMBER;
    LN_SURCHARGE_RATE NUMBER;
    LN_CESS_RATE NUMBER;
    LN_SH_CESS_RATE NUMBER;
    LN_TDS_AMT NUMBER;
  BEGIN
    OPEN C_GET_TAX_ID;
    FETCH C_GET_TAX_ID
     INTO LN_TAX_ID;
    CLOSE C_GET_TAX_ID;
    OPEN C_GET_TDS_RATES(LN_TAX_ID);
    FETCH C_GET_TDS_RATES
     INTO LN_TDS_RATE,LN_SURCHARGE_RATE,LN_CESS_RATE,LN_SH_CESS_RATE,LN_TAX_RATE;
    CLOSE C_GET_TDS_RATES;
    CP_SURCHARGE_AMT := ROUND((TDS_INVOICE_AMT * LN_SURCHARGE_RATE / LN_TAX_RATE)
                             ,2);
    CP_CESS_AMT := ROUND((TDS_INVOICE_AMT * LN_CESS_RATE / LN_TAX_RATE)
                        ,2);
    CP_SH_CESS_AMT := ROUND((TDS_INVOICE_AMT * LN_SH_CESS_RATE / LN_TAX_RATE)
                           ,2);
    CP_CESS_AMT := CP_CESS_AMT + CP_SH_CESS_AMT;
    LN_TDS_AMT := TDS_INVOICE_AMT - NVL(CP_SURCHARGE_AMT
                     ,0) - NVL(CP_CESS_AMT
                     ,0);
    RETURN (NVL(LN_TDS_AMT
              ,0));
  END CF_TDS_AMTFORMULA;

  FUNCTION CF_BSR_CODEFORMULA(BANK_ACCOUNT_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_BANK_BRANCH_CODE(P_BANK_ACCOUNT_ID IN NUMBER) IS
      SELECT
        A.BANK_NUM
      FROM
        AP_BANK_BRANCHES A,
        AP_BANK_ACCOUNTS_ALL B
      WHERE A.BANK_BRANCH_ID = B.BANK_BRANCH_ID
        AND B.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID;
    LV_BANK_BRANCH_CODE AP_BANK_BRANCHES.BANK_NUM%TYPE;
  BEGIN
    OPEN C_BANK_BRANCH_CODE(BANK_ACCOUNT_ID);
    FETCH C_BANK_BRANCH_CODE
     INTO LV_BANK_BRANCH_CODE;
    CLOSE C_BANK_BRANCH_CODE;
    RETURN LV_BANK_BRANCH_CODE;
  END CF_BSR_CODEFORMULA;

  FUNCTION CP_CESS_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_AMT;
  END CP_CESS_AMT_P;

  FUNCTION CP_SURCHARGE_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SURCHARGE_AMT;
  END CP_SURCHARGE_AMT_P;

  FUNCTION CP_SH_CESS_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SH_CESS_AMT;
  END CP_SH_CESS_AMT_P;

  FUNCTION CP_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_1;
  END CP_1_P;

END JA_JAINITCR_XMLP_PKG;




/
