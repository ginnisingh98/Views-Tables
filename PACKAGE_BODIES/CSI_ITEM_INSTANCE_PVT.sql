--------------------------------------------------------
--  DDL for Package Body CSI_ITEM_INSTANCE_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CSI_ITEM_INSTANCE_PVT" as
/* $Header: csiviib.pls 120.88.12010000.20 2010/01/29 19:49:33 hyonlee ship $ */

-- ---------------------------------------------------------
-- Define global variables
-- ---------------------------------------------------------

G_PKG_NAME CONSTANT VARCHAR2(30):= 'CSI_ITEM_INSTANCE_PVT';
G_FILE_NAME CONSTANT VARCHAR2(12) := 'csiviib.pls';
g_expire_ext_att_flag  VARCHAR2(1) := 'N';

--Start of: Added for bug 5615169

/*-------------------------------------------------------------*/
/* Procedure name: Build_Inst_Hist_Rec_of_Table                                   */
/* Description   : This function is used in Explode_Bom to     */
/*                 check whether the given component qualifies */
/*                 as a parent or not.                         */
/*-------------------------------------------------------------*/

PROCEDURE Build_Inst_Hist_Rec_of_Table
        (
                p_inst_hist_tbl     IN csi_datastructures_pub.instance_history_tbl ,
                p_inst_hist_rec_tab IN OUT NOCOPY csi_item_instance_grp.instance_history_rec_tab )
IS
BEGIN
        FOR i in p_inst_hist_tbl.FIRST .. p_inst_hist_tbl.LAST
        LOOP
	p_inst_hist_rec_tab.instance_id(i)                    := p_inst_hist_tbl(i).instance_id ;
	p_inst_hist_rec_tab.old_instance_number(i)            := p_inst_hist_tbl(i).old_instance_number ;
	p_inst_hist_rec_tab.new_instance_number(i)            := p_inst_hist_tbl(i).new_instance_number ;
	p_inst_hist_rec_tab.old_external_reference(i)         := p_inst_hist_tbl(i).old_external_reference ;
	p_inst_hist_rec_tab.new_external_reference(i)         := p_inst_hist_tbl(i).new_external_reference ;
	p_inst_hist_rec_tab.old_inventory_item_id(i)          := p_inst_hist_tbl(i).old_inventory_item_id ;
	p_inst_hist_rec_tab.new_inventory_item_id(i)          := p_inst_hist_tbl(i).new_inventory_item_id ;
	p_inst_hist_rec_tab.old_inventory_revision(i)         := p_inst_hist_tbl(i).old_inventory_revision ;
	p_inst_hist_rec_tab.new_inventory_revision(i)         := p_inst_hist_tbl(i).new_inventory_revision ;
	p_inst_hist_rec_tab.old_inv_master_org_id(i)          := p_inst_hist_tbl(i).old_inv_master_org_id ;
	p_inst_hist_rec_tab.new_inv_master_org_id(i)          := p_inst_hist_tbl(i).new_inv_master_org_id ;
	p_inst_hist_rec_tab.old_serial_number(i)              := p_inst_hist_tbl(i).old_serial_number ;
	p_inst_hist_rec_tab.new_serial_number(i)              := p_inst_hist_tbl(i).new_serial_number ;
	p_inst_hist_rec_tab.old_mfg_serial_number_flag(i)     := p_inst_hist_tbl(i).old_mfg_serial_number_flag ;
	p_inst_hist_rec_tab.new_mfg_serial_number_flag(i)     := p_inst_hist_tbl(i).new_mfg_serial_number_flag ;
	p_inst_hist_rec_tab.old_lot_number(i)                 := p_inst_hist_tbl(i).old_lot_number ;
	p_inst_hist_rec_tab.new_lot_number(i)                 := p_inst_hist_tbl(i).new_lot_number ;
	p_inst_hist_rec_tab.old_quantity(i)                   := p_inst_hist_tbl(i).old_quantity ;
	p_inst_hist_rec_tab.new_quantity(i)                   := p_inst_hist_tbl(i).new_quantity ;
	p_inst_hist_rec_tab.old_unit_of_measure_name(i)       := p_inst_hist_tbl(i).old_unit_of_measure_name ;
	p_inst_hist_rec_tab.new_unit_of_measure_name(i)       := p_inst_hist_tbl(i).new_unit_of_measure_name ;
	p_inst_hist_rec_tab.old_unit_of_measure(i)            := p_inst_hist_tbl(i).old_unit_of_measure ;
	p_inst_hist_rec_tab.new_unit_of_measure(i)            := p_inst_hist_tbl(i).new_unit_of_measure ;
	p_inst_hist_rec_tab.old_accounting_class(i)           := p_inst_hist_tbl(i).old_accounting_class ;
	p_inst_hist_rec_tab.new_accounting_class(i)           := p_inst_hist_tbl(i).new_accounting_class ;
	p_inst_hist_rec_tab.old_accounting_class_code(i)      := p_inst_hist_tbl(i).old_accounting_class_code ;
	p_inst_hist_rec_tab.new_accounting_class_code(i)      := p_inst_hist_tbl(i).new_accounting_class_code ;
	p_inst_hist_rec_tab.old_instance_condition(i)         := p_inst_hist_tbl(i).old_instance_condition ;
	p_inst_hist_rec_tab.new_instance_condition(i)         := p_inst_hist_tbl(i).new_instance_condition ;
	p_inst_hist_rec_tab.old_instance_condition_id(i)      := p_inst_hist_tbl(i).old_instance_condition_id ;
	p_inst_hist_rec_tab.new_instance_condition_id(i)      := p_inst_hist_tbl(i).new_instance_condition_id ;
	p_inst_hist_rec_tab.old_instance_status(i)            := p_inst_hist_tbl(i).old_instance_status ;
	p_inst_hist_rec_tab.new_instance_status(i)            := p_inst_hist_tbl(i).new_instance_status ;
	p_inst_hist_rec_tab.old_instance_status_id(i)         := p_inst_hist_tbl(i).old_instance_status_id ;
	p_inst_hist_rec_tab.new_instance_status_id(i)         := p_inst_hist_tbl(i).new_instance_status_id ;
	p_inst_hist_rec_tab.old_customer_view_flag(i)         := p_inst_hist_tbl(i).old_customer_view_flag ;
	p_inst_hist_rec_tab.new_customer_view_flag(i)         := p_inst_hist_tbl(i).new_customer_view_flag ;
	p_inst_hist_rec_tab.old_merchant_view_flag(i)         := p_inst_hist_tbl(i).old_merchant_view_flag ;
	p_inst_hist_rec_tab.new_merchant_view_flag(i)         := p_inst_hist_tbl(i).new_merchant_view_flag ;
	p_inst_hist_rec_tab.old_sellable_flag(i)              := p_inst_hist_tbl(i).old_sellable_flag ;
	p_inst_hist_rec_tab.new_sellable_flag(i)              := p_inst_hist_tbl(i).new_sellable_flag ;
	p_inst_hist_rec_tab.old_system_id(i)                  := p_inst_hist_tbl(i).old_system_id ;
	p_inst_hist_rec_tab.new_system_id(i)                  := p_inst_hist_tbl(i).new_system_id ;
	p_inst_hist_rec_tab.old_system_name(i)                := p_inst_hist_tbl(i).old_system_name ;
	p_inst_hist_rec_tab.new_system_name(i)                := p_inst_hist_tbl(i).new_system_name ;
	p_inst_hist_rec_tab.old_instance_type_code(i)         := p_inst_hist_tbl(i).old_instance_type_code ;
	p_inst_hist_rec_tab.new_instance_type_code(i)         := p_inst_hist_tbl(i).new_instance_type_code ;
	p_inst_hist_rec_tab.old_instance_type_name(i)         := p_inst_hist_tbl(i).old_instance_type_name ;
	p_inst_hist_rec_tab.new_instance_type_name(i)         := p_inst_hist_tbl(i).new_instance_type_name ;
	p_inst_hist_rec_tab.old_active_start_date(i)          := p_inst_hist_tbl(i).old_active_start_date ;
	p_inst_hist_rec_tab.new_active_start_date(i)          := p_inst_hist_tbl(i).new_active_start_date ;
	p_inst_hist_rec_tab.old_active_end_date(i)            := p_inst_hist_tbl(i).old_active_end_date ;
	p_inst_hist_rec_tab.new_active_end_date(i)            := p_inst_hist_tbl(i).new_active_end_date ;
	p_inst_hist_rec_tab.old_location_type_code(i)         := p_inst_hist_tbl(i).old_location_type_code ;
	p_inst_hist_rec_tab.new_location_type_code(i)         := p_inst_hist_tbl(i).new_location_type_code ;
	p_inst_hist_rec_tab.old_location_id(i)                := p_inst_hist_tbl(i).old_location_id ;
	p_inst_hist_rec_tab.new_location_id(i)                := p_inst_hist_tbl(i).new_location_id ;
	p_inst_hist_rec_tab.old_inv_organization_id(i)        := p_inst_hist_tbl(i).old_inv_organization_id ;
	p_inst_hist_rec_tab.new_inv_organization_id(i)        := p_inst_hist_tbl(i).new_inv_organization_id ;
	p_inst_hist_rec_tab.old_inv_organization_name(i)      := p_inst_hist_tbl(i).old_inv_organization_name ;
	p_inst_hist_rec_tab.new_inv_organization_name(i)      := p_inst_hist_tbl(i).new_inv_organization_name ;
	p_inst_hist_rec_tab.old_inv_subinventory_name(i)      := p_inst_hist_tbl(i).old_inv_subinventory_name ;
	p_inst_hist_rec_tab.new_inv_subinventory_name(i)      := p_inst_hist_tbl(i).new_inv_subinventory_name ;
	p_inst_hist_rec_tab.old_inv_locator_id(i)             := p_inst_hist_tbl(i).old_inv_locator_id ;
	p_inst_hist_rec_tab.new_inv_locator_id(i)             := p_inst_hist_tbl(i).new_inv_locator_id ;
	p_inst_hist_rec_tab.old_pa_project_id(i)              := p_inst_hist_tbl(i).old_pa_project_id ;
	p_inst_hist_rec_tab.new_pa_project_id(i)              := p_inst_hist_tbl(i).new_pa_project_id ;
	p_inst_hist_rec_tab.old_pa_project_task_id(i)         := p_inst_hist_tbl(i).old_pa_project_task_id ;
	p_inst_hist_rec_tab.new_pa_project_task_id(i)         := p_inst_hist_tbl(i).new_pa_project_task_id ;
	p_inst_hist_rec_tab.old_pa_project_name(i)            := p_inst_hist_tbl(i).old_pa_project_name ;
	p_inst_hist_rec_tab.new_pa_project_name(i)            := p_inst_hist_tbl(i).new_pa_project_name ;
	p_inst_hist_rec_tab.old_pa_project_number(i)          := p_inst_hist_tbl(i).old_pa_project_number ;
	p_inst_hist_rec_tab.new_pa_project_number(i)          := p_inst_hist_tbl(i).new_pa_project_number ;
	p_inst_hist_rec_tab.old_pa_task_name(i)               := p_inst_hist_tbl(i).old_pa_task_name ;
	p_inst_hist_rec_tab.new_pa_task_name(i)               := p_inst_hist_tbl(i).new_pa_task_name ;
	p_inst_hist_rec_tab.old_pa_task_number(i)             := p_inst_hist_tbl(i).old_pa_task_number ;
	p_inst_hist_rec_tab.new_pa_task_number(i)             := p_inst_hist_tbl(i).new_pa_task_number ;
	p_inst_hist_rec_tab.old_in_transit_order_line_id(i)   := p_inst_hist_tbl(i).old_in_transit_order_line_id ;
	p_inst_hist_rec_tab.new_in_transit_order_line_id(i)   := p_inst_hist_tbl(i).new_in_transit_order_line_id ;
	p_inst_hist_rec_tab.old_in_transit_order_line_num(i)  := p_inst_hist_tbl(i).old_in_transit_order_line_num ;
	p_inst_hist_rec_tab.new_in_transit_order_line_num(i)  := p_inst_hist_tbl(i).new_in_transit_order_line_num ;
	p_inst_hist_rec_tab.old_in_transit_order_number(i)    := p_inst_hist_tbl(i).old_in_transit_order_number ;
	p_inst_hist_rec_tab.new_in_transit_order_number(i)    := p_inst_hist_tbl(i).new_in_transit_order_number ;
	p_inst_hist_rec_tab.old_wip_job_id(i)                 := p_inst_hist_tbl(i).old_wip_job_id ;
	p_inst_hist_rec_tab.new_wip_job_id(i)                 := p_inst_hist_tbl(i).new_wip_job_id ;
	p_inst_hist_rec_tab.old_wip_entity_name(i)            := p_inst_hist_tbl(i).old_wip_entity_name ;
	p_inst_hist_rec_tab.new_wip_entity_name(i)            := p_inst_hist_tbl(i).new_wip_entity_name ;
	p_inst_hist_rec_tab.old_po_order_line_id(i)           := p_inst_hist_tbl(i).old_po_order_line_id ;
	p_inst_hist_rec_tab.new_po_order_line_id(i)           := p_inst_hist_tbl(i).new_po_order_line_id ;
	p_inst_hist_rec_tab.old_last_oe_order_line_id(i)      := p_inst_hist_tbl(i).old_last_oe_order_line_id ;
	p_inst_hist_rec_tab.new_last_oe_order_line_id(i)      := p_inst_hist_tbl(i).new_last_oe_order_line_id ;
	p_inst_hist_rec_tab.old_last_oe_rma_line_id(i)        := p_inst_hist_tbl(i).old_last_oe_rma_line_id ;
	p_inst_hist_rec_tab.new_last_oe_rma_line_id(i)        := p_inst_hist_tbl(i).new_last_oe_rma_line_id ;
	p_inst_hist_rec_tab.old_last_po_po_line_id(i)         := p_inst_hist_tbl(i).old_last_po_po_line_id ;
	p_inst_hist_rec_tab.new_last_po_po_line_id(i)         := p_inst_hist_tbl(i).new_last_po_po_line_id ;
	p_inst_hist_rec_tab.old_last_oe_po_number(i)          := p_inst_hist_tbl(i).old_last_oe_po_number ;
	p_inst_hist_rec_tab.new_last_oe_po_number(i)          := p_inst_hist_tbl(i).new_last_oe_po_number ;
	p_inst_hist_rec_tab.old_last_wip_job_id(i)            := p_inst_hist_tbl(i).old_last_wip_job_id ;
	p_inst_hist_rec_tab.new_last_wip_job_id(i)            := p_inst_hist_tbl(i).new_last_wip_job_id ;
	p_inst_hist_rec_tab.old_last_pa_project_id(i)         := p_inst_hist_tbl(i).old_last_pa_project_id ;
	p_inst_hist_rec_tab.new_last_pa_project_id(i)         := p_inst_hist_tbl(i).new_last_pa_project_id ;
	p_inst_hist_rec_tab.old_last_pa_task_id(i)            := p_inst_hist_tbl(i).old_last_pa_task_id ;
	p_inst_hist_rec_tab.new_last_pa_task_id(i)            := p_inst_hist_tbl(i).new_last_pa_task_id ;
	p_inst_hist_rec_tab.old_last_oe_agreement_id(i)       := p_inst_hist_tbl(i).old_last_oe_agreement_id ;
	p_inst_hist_rec_tab.new_last_oe_agreement_id(i)       := p_inst_hist_tbl(i).new_last_oe_agreement_id ;
	p_inst_hist_rec_tab.old_install_date(i)               := p_inst_hist_tbl(i).old_install_date ;
	p_inst_hist_rec_tab.new_install_date(i)               := p_inst_hist_tbl(i).new_install_date ;
	p_inst_hist_rec_tab.old_manually_created_flag(i)      := p_inst_hist_tbl(i).old_manually_created_flag ;
	p_inst_hist_rec_tab.new_manually_created_flag(i)      := p_inst_hist_tbl(i).new_manually_created_flag ;
	p_inst_hist_rec_tab.old_return_by_date(i)             := p_inst_hist_tbl(i).old_return_by_date ;
	p_inst_hist_rec_tab.new_return_by_date(i)             := p_inst_hist_tbl(i).new_return_by_date ;
	p_inst_hist_rec_tab.old_actual_return_date(i)         := p_inst_hist_tbl(i).old_actual_return_date ;
	p_inst_hist_rec_tab.new_actual_return_date(i)         := p_inst_hist_tbl(i).new_actual_return_date ;
	p_inst_hist_rec_tab.old_creation_complete_flag(i)     := p_inst_hist_tbl(i).old_creation_complete_flag ;
	p_inst_hist_rec_tab.new_creation_complete_flag(i)     := p_inst_hist_tbl(i).new_creation_complete_flag ;
	p_inst_hist_rec_tab.old_completeness_flag(i)          := p_inst_hist_tbl(i).old_completeness_flag ;
	p_inst_hist_rec_tab.new_completeness_flag(i)          := p_inst_hist_tbl(i).new_completeness_flag ;
	p_inst_hist_rec_tab.old_context(i)                    := p_inst_hist_tbl(i).old_context ;
	p_inst_hist_rec_tab.new_context(i)                    := p_inst_hist_tbl(i).new_context ;
	p_inst_hist_rec_tab.old_attribute1(i)                 := p_inst_hist_tbl(i).old_attribute1 ;
	p_inst_hist_rec_tab.new_attribute1(i)                 := p_inst_hist_tbl(i).new_attribute1 ;
	p_inst_hist_rec_tab.old_attribute2(i)                 := p_inst_hist_tbl(i).old_attribute2 ;
	p_inst_hist_rec_tab.new_attribute2(i)                 := p_inst_hist_tbl(i).new_attribute2 ;
	p_inst_hist_rec_tab.old_attribute3(i)                 := p_inst_hist_tbl(i).old_attribute3 ;
	p_inst_hist_rec_tab.new_attribute3(i)                 := p_inst_hist_tbl(i).new_attribute3 ;
	p_inst_hist_rec_tab.old_attribute4(i)                 := p_inst_hist_tbl(i).old_attribute4 ;
	p_inst_hist_rec_tab.new_attribute4(i)                 := p_inst_hist_tbl(i).new_attribute4 ;
	p_inst_hist_rec_tab.old_attribute5(i)                 := p_inst_hist_tbl(i).old_attribute5 ;
	p_inst_hist_rec_tab.new_attribute5(i)                 := p_inst_hist_tbl(i).new_attribute5 ;
	p_inst_hist_rec_tab.old_attribute6(i)                 := p_inst_hist_tbl(i).old_attribute6 ;
	p_inst_hist_rec_tab.new_attribute6(i)                 := p_inst_hist_tbl(i).new_attribute6 ;
	p_inst_hist_rec_tab.old_attribute7(i)                 := p_inst_hist_tbl(i).old_attribute7 ;
	p_inst_hist_rec_tab.new_attribute7(i)                 := p_inst_hist_tbl(i).new_attribute7 ;
	p_inst_hist_rec_tab.old_attribute8(i)                 := p_inst_hist_tbl(i).old_attribute8 ;
	p_inst_hist_rec_tab.new_attribute8(i)                 := p_inst_hist_tbl(i).new_attribute8 ;
	p_inst_hist_rec_tab.old_attribute9(i)                 := p_inst_hist_tbl(i).old_attribute9 ;
	p_inst_hist_rec_tab.new_attribute9(i)                 := p_inst_hist_tbl(i).new_attribute9 ;
	p_inst_hist_rec_tab.old_attribute10(i)                := p_inst_hist_tbl(i).old_attribute10 ;
	p_inst_hist_rec_tab.new_attribute10(i)                := p_inst_hist_tbl(i).new_attribute10 ;
	p_inst_hist_rec_tab.old_attribute11(i)                := p_inst_hist_tbl(i).old_attribute11 ;
	p_inst_hist_rec_tab.new_attribute11(i)                := p_inst_hist_tbl(i).new_attribute11 ;
	p_inst_hist_rec_tab.old_attribute12(i)                := p_inst_hist_tbl(i).old_attribute12 ;
	p_inst_hist_rec_tab.new_attribute12(i)                := p_inst_hist_tbl(i).new_attribute12 ;
	p_inst_hist_rec_tab.old_attribute13(i)                := p_inst_hist_tbl(i).old_attribute13 ;
	p_inst_hist_rec_tab.new_attribute13(i)                := p_inst_hist_tbl(i).new_attribute13 ;
	p_inst_hist_rec_tab.old_attribute14(i)                := p_inst_hist_tbl(i).old_attribute14 ;
	p_inst_hist_rec_tab.new_attribute14(i)                := p_inst_hist_tbl(i).new_attribute14 ;
	p_inst_hist_rec_tab.old_attribute15(i)                := p_inst_hist_tbl(i).old_attribute15 ;
	p_inst_hist_rec_tab.new_attribute15(i)                := p_inst_hist_tbl(i).new_attribute15 ;
	p_inst_hist_rec_tab.old_last_txn_line_detail_id(i)    := p_inst_hist_tbl(i).old_last_txn_line_detail_id ;
	p_inst_hist_rec_tab.new_last_txn_line_detail_id(i)    := p_inst_hist_tbl(i).new_last_txn_line_detail_id ;
	p_inst_hist_rec_tab.old_install_location_type_code(i) := p_inst_hist_tbl(i).old_install_location_type_code ;
	p_inst_hist_rec_tab.new_install_location_type_code(i) := p_inst_hist_tbl(i).new_install_location_type_code ;
	p_inst_hist_rec_tab.old_install_location_id(i)        := p_inst_hist_tbl(i).old_install_location_id ;
	p_inst_hist_rec_tab.new_install_location_id(i)        := p_inst_hist_tbl(i).new_install_location_id ;
	p_inst_hist_rec_tab.old_instance_usage_code(i)        := p_inst_hist_tbl(i).old_instance_usage_code ;
	p_inst_hist_rec_tab.new_instance_usage_code(i)        := p_inst_hist_tbl(i).new_instance_usage_code ;
	p_inst_hist_rec_tab.old_current_loc_address1(i)       := p_inst_hist_tbl(i).old_current_loc_address1 ;
	p_inst_hist_rec_tab.new_current_loc_address1(i)       := p_inst_hist_tbl(i).new_current_loc_address1 ;
	p_inst_hist_rec_tab.old_current_loc_address2(i)       := p_inst_hist_tbl(i).old_current_loc_address2 ;
	p_inst_hist_rec_tab.new_current_loc_address2(i)       := p_inst_hist_tbl(i).new_current_loc_address2 ;
	p_inst_hist_rec_tab.old_current_loc_address3(i)       := p_inst_hist_tbl(i).old_current_loc_address3 ;
	p_inst_hist_rec_tab.new_current_loc_address3(i)       := p_inst_hist_tbl(i).new_current_loc_address3 ;
	p_inst_hist_rec_tab.old_current_loc_address4(i)       := p_inst_hist_tbl(i).old_current_loc_address4 ;
	p_inst_hist_rec_tab.new_current_loc_address4(i)       := p_inst_hist_tbl(i).new_current_loc_address4 ;
	p_inst_hist_rec_tab.old_current_loc_city(i)           := p_inst_hist_tbl(i).old_current_loc_city ;
	p_inst_hist_rec_tab.new_current_loc_city(i)           := p_inst_hist_tbl(i).new_current_loc_city ;
	p_inst_hist_rec_tab.old_current_loc_postal_code(i)    := p_inst_hist_tbl(i).old_current_loc_postal_code ;
	p_inst_hist_rec_tab.new_current_loc_postal_code(i)    := p_inst_hist_tbl(i).new_current_loc_postal_code ;
	p_inst_hist_rec_tab.old_current_loc_country(i)        := p_inst_hist_tbl(i).old_current_loc_country ;
	p_inst_hist_rec_tab.new_current_loc_country(i)        := p_inst_hist_tbl(i).new_current_loc_country ;
	p_inst_hist_rec_tab.old_sales_order_number(i)         := p_inst_hist_tbl(i).old_sales_order_number ;
	p_inst_hist_rec_tab.new_sales_order_number(i)         := p_inst_hist_tbl(i).new_sales_order_number ;
	p_inst_hist_rec_tab.old_sales_order_line_number(i)    := p_inst_hist_tbl(i).old_sales_order_line_number ;
	p_inst_hist_rec_tab.new_sales_order_line_number(i)    := p_inst_hist_tbl(i).new_sales_order_line_number ;
	p_inst_hist_rec_tab.old_sales_order_date(i)           := p_inst_hist_tbl(i).old_sales_order_date ;
	p_inst_hist_rec_tab.new_sales_order_date(i)           := p_inst_hist_tbl(i).new_sales_order_date ;
	p_inst_hist_rec_tab.old_purchase_order_number(i)      := p_inst_hist_tbl(i).old_purchase_order_number ;
	p_inst_hist_rec_tab.new_purchase_order_number(i)      := p_inst_hist_tbl(i).new_purchase_order_number ;
	p_inst_hist_rec_tab.old_instance_usage_name(i)        := p_inst_hist_tbl(i).old_instance_usage_name ;
	p_inst_hist_rec_tab.new_instance_usage_name(i)        := p_inst_hist_tbl(i).new_instance_usage_name ;
	p_inst_hist_rec_tab.old_current_loc_state(i)          := p_inst_hist_tbl(i).old_current_loc_state ;
	p_inst_hist_rec_tab.new_current_loc_state(i)          := p_inst_hist_tbl(i).new_current_loc_state ;
	p_inst_hist_rec_tab.old_install_loc_address1(i)       := p_inst_hist_tbl(i).old_install_loc_address1 ;
	p_inst_hist_rec_tab.new_install_loc_address1(i)       := p_inst_hist_tbl(i).new_install_loc_address1 ;
	p_inst_hist_rec_tab.old_install_loc_address2(i)       := p_inst_hist_tbl(i).old_install_loc_address2 ;
	p_inst_hist_rec_tab.new_install_loc_address2(i)       := p_inst_hist_tbl(i).new_install_loc_address2 ;
	p_inst_hist_rec_tab.old_install_loc_address3(i)       := p_inst_hist_tbl(i).old_install_loc_address3 ;
	p_inst_hist_rec_tab.new_install_loc_address3(i)       := p_inst_hist_tbl(i).new_install_loc_address3 ;
	p_inst_hist_rec_tab.old_install_loc_address4(i)       := p_inst_hist_tbl(i).old_install_loc_address4 ;
	p_inst_hist_rec_tab.new_install_loc_address4(i)       := p_inst_hist_tbl(i).new_install_loc_address4 ;
	p_inst_hist_rec_tab.old_install_loc_city(i)           := p_inst_hist_tbl(i).old_install_loc_city ;
	p_inst_hist_rec_tab.new_install_loc_city(i)           := p_inst_hist_tbl(i).new_install_loc_city ;
	p_inst_hist_rec_tab.old_install_loc_state(i)          := p_inst_hist_tbl(i).old_install_loc_state ;
	p_inst_hist_rec_tab.new_install_loc_state(i)          := p_inst_hist_tbl(i).new_install_loc_state ;
	p_inst_hist_rec_tab.old_install_loc_postal_code(i)    := p_inst_hist_tbl(i).old_install_loc_postal_code ;
	p_inst_hist_rec_tab.new_install_loc_postal_code(i)    := p_inst_hist_tbl(i).new_install_loc_postal_code ;
	p_inst_hist_rec_tab.old_install_loc_country(i)        := p_inst_hist_tbl(i).old_install_loc_country ;
	p_inst_hist_rec_tab.new_install_loc_country(i)        := p_inst_hist_tbl(i).new_install_loc_country ;
	p_inst_hist_rec_tab.old_config_inst_rev_num(i)        := p_inst_hist_tbl(i).old_config_inst_rev_num ;
	p_inst_hist_rec_tab.new_config_inst_rev_num(i)        := p_inst_hist_tbl(i).new_config_inst_rev_num ;
	p_inst_hist_rec_tab.old_config_valid_status(i)        := p_inst_hist_tbl(i).old_config_valid_status ;
	p_inst_hist_rec_tab.new_config_valid_status(i)        := p_inst_hist_tbl(i).new_config_valid_status ;
	p_inst_hist_rec_tab.old_instance_description(i)       := p_inst_hist_tbl(i).old_instance_description ;
	p_inst_hist_rec_tab.new_instance_description(i)       := p_inst_hist_tbl(i).new_instance_description ;
	p_inst_hist_rec_tab.instance_history_id(i)            := p_inst_hist_tbl(i).instance_history_id ;
	p_inst_hist_rec_tab.transaction_id(i)                 := p_inst_hist_tbl(i).transaction_id ;
	p_inst_hist_rec_tab.old_last_vld_organization_id(i)   := p_inst_hist_tbl(i).old_last_vld_organization_id ;
	p_inst_hist_rec_tab.new_last_vld_organization_id(i)   := p_inst_hist_tbl(i).new_last_vld_organization_id ;
	p_inst_hist_rec_tab.old_network_asset_flag(i)         := p_inst_hist_tbl(i).old_network_asset_flag ;
	p_inst_hist_rec_tab.new_network_asset_flag(i)         := p_inst_hist_tbl(i).new_network_asset_flag ;
	p_inst_hist_rec_tab.old_maintainable_flag(i)          := p_inst_hist_tbl(i).old_maintainable_flag ;
	p_inst_hist_rec_tab.new_maintainable_flag(i)          := p_inst_hist_tbl(i).new_maintainable_flag ;
	p_inst_hist_rec_tab.old_pn_location_id(i)             := p_inst_hist_tbl(i).old_pn_location_id;
	p_inst_hist_rec_tab.new_pn_location_id(i)             := p_inst_hist_tbl(i).new_pn_location_id;
	p_inst_hist_rec_tab.old_asset_criticality_code(i)     := p_inst_hist_tbl(i).old_asset_criticality_code ;
	p_inst_hist_rec_tab.new_asset_criticality_code(i)     := p_inst_hist_tbl(i).new_asset_criticality_code ;
	p_inst_hist_rec_tab.old_category_id(i)                := p_inst_hist_tbl(i).old_category_id ;
	p_inst_hist_rec_tab.new_category_id(i)                := p_inst_hist_tbl(i).new_category_id ;
	p_inst_hist_rec_tab.old_equipment_gen_object_id(i)    := p_inst_hist_tbl(i).old_equipment_gen_object_id ;
	p_inst_hist_rec_tab.new_equipment_gen_object_id(i)    := p_inst_hist_tbl(i).new_equipment_gen_object_id ;
	p_inst_hist_rec_tab.old_instantiation_flag(i)         := p_inst_hist_tbl(i).old_instantiation_flag ;
	p_inst_hist_rec_tab.new_instantiation_flag(i)         := p_inst_hist_tbl(i).new_instantiation_flag ;
	p_inst_hist_rec_tab.old_linear_location_id(i)         := p_inst_hist_tbl(i).old_linear_location_id;
	p_inst_hist_rec_tab.new_linear_location_id(i)         := p_inst_hist_tbl(i).new_linear_location_id;
	p_inst_hist_rec_tab.old_operational_log_flag(i)       := p_inst_hist_tbl(i).old_operational_log_flag ;
	p_inst_hist_rec_tab.new_operational_log_flag(i)       := p_inst_hist_tbl(i).new_operational_log_flag ;
	p_inst_hist_rec_tab.old_checkin_status(i)             := p_inst_hist_tbl(i).old_checkin_status;
	p_inst_hist_rec_tab.new_checkin_status(i)             := p_inst_hist_tbl(i).new_checkin_status;
	p_inst_hist_rec_tab.old_supplier_warranty_exp_date(i) := p_inst_hist_tbl(i).old_supplier_warranty_exp_date ;
	p_inst_hist_rec_tab.new_supplier_warranty_exp_date(i) := p_inst_hist_tbl(i).new_supplier_warranty_exp_date ;
	p_inst_hist_rec_tab.old_attribute16(i)                := p_inst_hist_tbl(i).old_attribute16 ;
	p_inst_hist_rec_tab.new_attribute16(i)                := p_inst_hist_tbl(i).new_attribute16 ;
	p_inst_hist_rec_tab.old_attribute17(i)                := p_inst_hist_tbl(i).old_attribute17 ;
	p_inst_hist_rec_tab.new_attribute17(i)                := p_inst_hist_tbl(i).new_attribute17 ;
	p_inst_hist_rec_tab.old_attribute18(i)                := p_inst_hist_tbl(i).old_attribute18 ;
	p_inst_hist_rec_tab.new_attribute18(i)                := p_inst_hist_tbl(i).new_attribute18 ;
	p_inst_hist_rec_tab.old_attribute19(i)                := p_inst_hist_tbl(i).old_attribute19 ;
	p_inst_hist_rec_tab.new_attribute19(i)                := p_inst_hist_tbl(i).new_attribute19 ;
	p_inst_hist_rec_tab.old_attribute20(i)                := p_inst_hist_tbl(i).old_attribute20 ;
	p_inst_hist_rec_tab.new_attribute20(i)                := p_inst_hist_tbl(i).new_attribute20 ;
	p_inst_hist_rec_tab.old_attribute21(i)                := p_inst_hist_tbl(i).old_attribute21 ;
	p_inst_hist_rec_tab.new_attribute21(i)                := p_inst_hist_tbl(i).new_attribute21 ;
	p_inst_hist_rec_tab.old_attribute22(i)                := p_inst_hist_tbl(i).old_attribute22 ;
	p_inst_hist_rec_tab.new_attribute22(i)                := p_inst_hist_tbl(i).new_attribute22 ;
	p_inst_hist_rec_tab.old_attribute23(i)                := p_inst_hist_tbl(i).old_attribute23 ;
	p_inst_hist_rec_tab.new_attribute23(i)                := p_inst_hist_tbl(i).new_attribute23 ;
	p_inst_hist_rec_tab.old_attribute24(i)                := p_inst_hist_tbl(i).old_attribute24 ;
	p_inst_hist_rec_tab.new_attribute24(i)                := p_inst_hist_tbl(i).new_attribute24 ;
	p_inst_hist_rec_tab.old_attribute25(i)                := p_inst_hist_tbl(i).old_attribute25 ;
	p_inst_hist_rec_tab.new_attribute25(i)                := p_inst_hist_tbl(i).new_attribute25 ;
	p_inst_hist_rec_tab.old_attribute26(i)                := p_inst_hist_tbl(i).old_attribute26 ;
	p_inst_hist_rec_tab.new_attribute26(i)                := p_inst_hist_tbl(i).new_attribute26 ;
	p_inst_hist_rec_tab.old_attribute27(i)                := p_inst_hist_tbl(i).old_attribute27 ;
	p_inst_hist_rec_tab.new_attribute27(i)                := p_inst_hist_tbl(i).new_attribute27 ;
	p_inst_hist_rec_tab.old_attribute28(i)                := p_inst_hist_tbl(i).old_attribute28 ;
	p_inst_hist_rec_tab.new_attribute28(i)                := p_inst_hist_tbl(i).new_attribute28 ;
	p_inst_hist_rec_tab.old_attribute29(i)                := p_inst_hist_tbl(i).old_attribute29 ;
	p_inst_hist_rec_tab.new_attribute29(i)                := p_inst_hist_tbl(i).new_attribute29 ;
	p_inst_hist_rec_tab.old_attribute30(i)                := p_inst_hist_tbl(i).old_attribute30 ;
	p_inst_hist_rec_tab.new_attribute30(i)                := p_inst_hist_tbl(i).new_attribute30 ;
	p_inst_hist_rec_tab.old_payables_currency_code(i)     := p_inst_hist_tbl(i).old_payables_currency_code ;
	p_inst_hist_rec_tab.new_payables_currency_code(i)     := p_inst_hist_tbl(i).new_payables_currency_code ;
	p_inst_hist_rec_tab.old_purchase_unit_price(i)        := p_inst_hist_tbl(i).old_purchase_unit_price ;
	p_inst_hist_rec_tab.new_purchase_unit_price(i)        := p_inst_hist_tbl(i).new_purchase_unit_price ;
	p_inst_hist_rec_tab.old_purchase_currency_code(i)     := p_inst_hist_tbl(i).old_purchase_currency_code ;
	p_inst_hist_rec_tab.new_purchase_currency_code(i)     := p_inst_hist_tbl(i).new_purchase_currency_code ;
	p_inst_hist_rec_tab.old_payables_unit_price(i)        := p_inst_hist_tbl(i).old_payables_unit_price ;
	p_inst_hist_rec_tab.new_payables_unit_price(i)        := p_inst_hist_tbl(i).new_payables_unit_price ;
	p_inst_hist_rec_tab.old_sales_unit_price(i)           := p_inst_hist_tbl(i).old_sales_unit_price ;
	p_inst_hist_rec_tab.new_sales_unit_price(i)           := p_inst_hist_tbl(i).new_sales_unit_price ;
	p_inst_hist_rec_tab.old_sales_currency_code(i)        := p_inst_hist_tbl(i).old_sales_currency_code ;
	p_inst_hist_rec_tab.new_sales_currency_code(i)        := p_inst_hist_tbl(i).new_sales_currency_code ;
	p_inst_hist_rec_tab.old_operational_status_code(i)    := p_inst_hist_tbl(i).old_operational_status_code ;
	p_inst_hist_rec_tab.new_operational_status_code(i)    := p_inst_hist_tbl(i).new_operational_status_code ;
	p_inst_hist_rec_tab.full_dump_flag(i)                 := p_inst_hist_tbl(i).full_dump_flag ;
        END LOOP;
END Build_Inst_Hist_Rec_of_Table;
--End of: Added for bug 5615169

/*-------------------------------------------------------------*/
/* Function name:  Is_Parent                                   */
/* Description :   This function is used in Explode_Bom to     */
/*                 check whether the given component qualifies */
/*                 as a parent or not.                         */
/*-------------------------------------------------------------*/
FUNCTION Is_Parent(
                    p_child_sort_order   IN  VARCHAR2
                   ,p_parent_child_tbl   IN  csi_item_instance_pvt.parent_child_tbl
                  ) return BOOLEAN IS
--
   l_return_status   BOOLEAN := TRUE;
--
BEGIN
   IF p_parent_child_tbl.count > 0 THEN
      l_return_status := FALSE;
      For par_row in p_parent_child_tbl.FIRST .. p_parent_child_tbl.LAST
      Loop
         IF p_parent_child_tbl(par_row).parent_sort_order = p_child_sort_order THEN
            l_return_status := TRUE;
            EXIT;
         END IF;
      End Loop;
      --
   ELSE
      l_return_status := FALSE;
   END IF;
   --
   return l_return_status;
END Is_Parent;
--
/*-------------------------------------------------------------*/
/* Procedure name:  Get_parent_sort_order                      */
/* Description :   This procedure is used in Explode_Bom to    */
/*                 get the immediate trackable parent for any  */
/*                 given component.                            */
/*-------------------------------------------------------------*/
PROCEDURE Get_parent_sort_order
   (
     p_parent_sort_order   IN OUT NOCOPY VARCHAR2
    ,p_parent_child_tbl    IN csi_item_instance_pvt.parent_child_tbl
    ,p_bom_sort_order_tbl  IN csi_item_instance_pvt.bom_sort_order_tbl
   ) IS
   l_exists_flag       VARCHAR2(1) := 'N';
   l_init_sort_code    VARCHAR2(2000);
BEGIN
   l_init_sort_code := Bom_Common_Definitions.get_initial_sort_code;
   -- Check the passed parent_sort_order exists in ins_tbl.
   -- This means the parent is trackable and the OUT parent_sort_order is same as IN
   IF p_parent_sort_order = l_init_sort_code THEN
	 RETURN;
   END IF;
   --
   IF p_bom_sort_order_tbl.count > 0 THEN
      For ins_row in p_bom_sort_order_tbl.FIRST .. p_bom_sort_order_tbl.LAST
	 Loop
	    IF p_bom_sort_order_tbl(ins_row).child_sort_order = p_parent_sort_order THEN
		  -- Parent is trackable
		  l_exists_flag := 'Y';
		  EXIT;
	    END IF;
	 End Loop;
	 --
	 IF l_exists_flag = 'Y' THEN
	    RETURN;
	 END IF;
   END IF;
   --
   -- Check the next immediate parent
   For tab_row in p_parent_child_tbl.FIRST .. p_parent_child_tbl.LAST
   Loop
      IF p_parent_child_tbl(tab_row).child_sort_order = p_parent_sort_order THEN
	 p_parent_sort_order := p_parent_child_tbl(tab_row).parent_sort_order;
	 EXIT;
      END IF;
   End Loop;
   --
   -- Call this recursively
   csi_item_instance_pvt.Get_parent_sort_order
	(
	  p_parent_sort_order  => p_parent_sort_order
         ,p_parent_child_tbl   => p_parent_child_tbl
         ,p_bom_sort_order_tbl => p_bom_sort_order_tbl
        );
END Get_Parent_Sort_Order;
--
/*-------------------------------------------------------------*/
/* Function name:  Has_Trackable_Component                     */
/* Description :   This function is used in Explode_Bom to     */
/*                 check whether the given sub-assembly has    */
/*                 at least one trackable child or not.        */
/*-------------------------------------------------------------*/
FUNCTION Has_Trackable_Component
   (
     p_inventory_item_id   IN NUMBER
    ,p_organization_id     IN NUMBER
    ,p_explosion_level     IN NUMBER
   ) RETURN BOOLEAN IS
   --
   l_return_status      BOOLEAN;
   l_exists_flag        VARCHAR2(1);
   l_group_id           NUMBER;
   l_err_msg            VARCHAR2(2000) := NULL;
   l_error_code         VARCHAR2(30) := NULL;
   --
   process_next         EXCEPTION;
   --
   CURSOR BOM_CSR (p_group_id NUMBER)
   IS
   SELECT   bet.component_item_id component_item_id
           ,mp.master_organization_id master_organization_id
   FROM     bom_small_expl_temp bet
	   ,bom_bill_of_materials bom
	   ,mtl_system_items msi
	   ,mtl_system_items msip
	   ,mtl_parameters mp
   WHERE    bet.group_id = p_group_id
   AND      bet.plan_level > 0               -- Ignore Top Most
   AND      bet.component_item_id = msi.inventory_item_id
   AND      bet.organization_id = msi.organization_id
   AND      bet.bill_sequence_id = bom.bill_sequence_id
   AND      bet.extended_quantity > 0
   AND      bom.assembly_item_id = msip.inventory_item_id
   AND      bom.organization_id = msip.organization_id
   AND      msi.organization_id = mp.organization_id
   ORDER BY bet.sort_order;
BEGIN
   IF p_explosion_level <= 0 THEN
      l_return_status := FALSE;
      RETURN l_return_status;
   END IF;
   --
   SELECT Bom_Explosion_Temp_S.NextVal
   INTO   l_group_id
   FROM   sys.dual;

   Bompxinq.Exploder_Userexit(
	   grp_id            => l_group_id,
	   org_id            => p_organization_id,
	   item_id           => p_inventory_item_id,
	   unit_number_from  => '',
	   unit_number_to    => '',
	   levels_to_explode => p_explosion_level,
	   expl_qty          => 1,
	   show_rev          => 1,
	   material_ctrl     => 1,
	   err_msg           => l_err_msg,
	   error_code        => l_error_code);
   IF l_Error_Code <> 0 THEN
      csi_gen_utility_pvt.put_line (' Bom explosion error code <> 0 '|| l_Error_Code ||'  '||l_err_msg);
      IF l_Error_Code < 0 THEN
         csi_gen_utility_pvt.put_line (' Bom explosion error code > 0 '|| l_Error_Code ||'  '||l_err_msg);
      ELSIF l_Error_Code > 0 THEN
         csi_gen_utility_pvt.put_line (' Bom explosion error code < 0'|| l_Error_Code ||'  '||l_err_msg);
      END IF;
      FND_MESSAGE.SET_NAME('CSI','CSI_API_CORE_BOM_EXPL_ERROR');
      FND_MSG_PUB.Add;
      l_return_status := FALSE;
      RETURN l_return_status;
   END IF;
   --
   l_exists_flag := 'N';
   For v_rec in BOM_CSR(l_group_id)
   Loop
      Begin
         IF v_rec.component_item_id = p_inventory_item_id THEN
            Raise Process_next;
         END IF;
         --
         IF csi_item_instance_vld_pvt.Is_Trackable
                        (p_inv_item_id => v_rec.component_item_id,
                         p_org_id => v_rec.master_organization_id,
                         p_stack_err_msg => FALSE) THEN
            l_exists_flag := 'Y';
            EXIT;
         END IF;
      Exception
         when process_next then
            null;
      End;
   End Loop;
   --
   -- Delete records from bom_small_exp_temp
   DELETE FROM bom_small_expl_temp where group_id = l_group_id;
   --
   IF l_exists_flag = 'Y' THEN
      l_return_status := TRUE;
   ELSE
      l_return_status := FALSE;
   END IF;
   --
   RETURN l_return_status;
END Has_Trackable_Component;
--
/*---------------------------------------------------------*/
/* Procedure name:  Initialize_inst_rec                    */
/* Description :    This procudure recontructs the record  */
/*                  from the history                       */
/*---------------------------------------------------------*/

PROCEDURE Initialize_inst_rec
(
  x_instance_rec           IN OUT NOCOPY csi_datastructures_pub.instance_header_rec,
  p_instance_hist_id       IN NUMBER ,
  x_nearest_full_dump      IN OUT NOCOPY DATE
  ) IS

CURSOR Int_nearest_full_dump(p_instance_hist_id IN NUMBER ) IS
SELECT
     CREATION_DATE
    ,NEW_INSTANCE_NUMBER
    ,NEW_EXTERNAL_REFERENCE
    ,NEW_INVENTORY_ITEM_ID
    ,NEW_INVENTORY_REVISION
    ,NEW_INV_MASTER_ORGANIZATION_ID
    ,NEW_SERIAL_NUMBER
    ,NEW_MFG_SERIAL_NUMBER_FLAG
    ,NEW_LOT_NUMBER
    ,NEW_QUANTITY
    ,NEW_UNIT_OF_MEASURE
    ,NEW_ACCOUNTING_CLASS_CODE
    ,NEW_INSTANCE_CONDITION_ID
    ,NEW_INSTANCE_STATUS_ID
    ,NEW_CUSTOMER_VIEW_FLAG
    ,NEW_MERCHANT_VIEW_FLAG
    ,NEW_SELLABLE_FLAG
    ,NEW_SYSTEM_ID
    ,NEW_INSTANCE_TYPE_CODE
    ,NEW_ACTIVE_START_DATE
    ,NEW_ACTIVE_END_DATE
    ,NEW_LOCATION_TYPE_CODE
    ,NEW_LOCATION_ID
    ,NEW_INV_ORGANIZATION_ID
    ,NEW_INV_SUBINVENTORY_NAME
    ,NEW_INV_LOCATOR_ID
    ,NEW_PA_PROJECT_ID
    ,NEW_PA_PROJECT_TASK_ID
    ,NEW_IN_TRANSIT_ORDER_LINE_ID
    ,NEW_WIP_JOB_ID
    ,NEW_PO_ORDER_LINE_ID
    ,NEW_COMPLETENESS_FLAG
    ,NEW_CONTEXT
    ,NEW_ATTRIBUTE1
    ,NEW_ATTRIBUTE2
    ,NEW_ATTRIBUTE3
    ,NEW_ATTRIBUTE4
    ,NEW_ATTRIBUTE5
    ,NEW_ATTRIBUTE6
    ,NEW_ATTRIBUTE7
    ,NEW_ATTRIBUTE8
    ,NEW_ATTRIBUTE9
    ,NEW_ATTRIBUTE10
    ,NEW_ATTRIBUTE11
    ,NEW_ATTRIBUTE12
    ,NEW_ATTRIBUTE13
    ,NEW_ATTRIBUTE14
    ,NEW_ATTRIBUTE15
    ,NEW_INST_LOC_TYPE_CODE
    ,NEW_INST_LOC_ID
    ,NEW_INST_USAGE_CODE
    ,NEW_LAST_OE_ORDER_LINE_ID
    ,NEW_LAST_OE_RMA_LINE_ID
    ,NEW_LAST_WIP_JOB_ID
    ,NEW_LAST_PO_PO_LINE_ID
    ,NEW_LAST_PA_PROJECT_ID
    ,NEW_LAST_PA_TASK_ID
    ,NEW_LAST_TXN_LINE_DETAIL_ID
    ,NEW_LAST_OE_PO_NUMBER
    ,NEW_OE_AGREEMENT_ID
    --start of column addition for eam integration--
    ,NEW_NETWORK_ASSET_FLAG
    ,NEW_MAINTAINABLE_FLAG
    ,NEW_PN_LOCATION_ID
    ,NEW_ASSET_CRITICALITY_CODE
    ,NEW_CATEGORY_ID
    ,NEW_EQUIPMENT_GEN_OBJECT_ID
    ,NEW_INSTANTIATION_FLAG
    ,NEW_LINEAR_LOCATION_ID
    ,NEW_OPERATIONAL_LOG_FLAG
    ,NEW_CHECKIN_STATUS
    ,NEW_SUPPLIER_WARRANTY_EXP_DATE
    ,NEW_ATTRIBUTE16
    ,NEW_ATTRIBUTE17
    ,NEW_ATTRIBUTE18
    ,NEW_ATTRIBUTE19
    ,NEW_ATTRIBUTE20
    ,NEW_ATTRIBUTE21
    ,NEW_ATTRIBUTE22
    ,NEW_ATTRIBUTE23
    ,NEW_ATTRIBUTE24
    ,NEW_ATTRIBUTE25
    ,NEW_ATTRIBUTE26
    ,NEW_ATTRIBUTE27
    ,NEW_ATTRIBUTE28
    ,NEW_ATTRIBUTE29
    ,NEW_ATTRIBUTE30
    --end of column addition for eam integration--
    -- Addition of columns for FA Integration
    ,NEW_PURCHASE_UNIT_PRICE
    ,NEW_PURCHASE_CURRENCY_CODE
    ,NEW_PAYABLES_UNIT_PRICE
    ,NEW_PAYABLES_CURRENCY_CODE
    ,NEW_SALES_UNIT_PRICE
    ,NEW_SALES_CURRENCY_CODE
    ,NEW_OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
FROM CSI_ITEM_INSTANCES_H
WHERE instance_history_id = p_instance_hist_id
 AND  full_dump_flag = 'Y' ;

BEGIN

  FOR C1 IN Int_nearest_full_dump(p_instance_hist_id) LOOP
    x_nearest_full_dump                         := C1.creation_date;
    x_instance_rec.INSTANCE_NUMBER              := C1.NEW_INSTANCE_NUMBER;
    x_instance_rec.EXTERNAL_REFERENCE           := C1.NEW_EXTERNAL_REFERENCE;
    x_instance_rec.INVENTORY_ITEM_ID            := C1.NEW_INVENTORY_ITEM_ID;
    x_instance_rec.INVENTORY_REVISION           := C1.NEW_INVENTORY_REVISION;
    x_instance_rec.INV_MASTER_ORGANIZATION_ID   := C1.NEW_INV_MASTER_ORGANIZATION_ID;
    x_instance_rec.SERIAL_NUMBER                := C1.NEW_SERIAL_NUMBER;
    x_instance_rec.MFG_SERIAL_NUMBER_FLAG       := C1.NEW_MFG_SERIAL_NUMBER_FLAG;
    x_instance_rec.LOT_NUMBER                   := C1.NEW_LOT_NUMBER;
    x_instance_rec.QUANTITY                     := C1.NEW_QUANTITY;
    x_instance_rec.UNIT_OF_MEASURE              := C1.NEW_UNIT_OF_MEASURE;
    x_instance_rec.ACCOUNTING_CLASS_CODE        := C1.NEW_ACCOUNTING_CLASS_CODE;
    x_instance_rec.INSTANCE_CONDITION_ID        := C1.NEW_INSTANCE_CONDITION_ID;
    x_instance_rec.INSTANCE_STATUS_ID           := C1.NEW_INSTANCE_STATUS_ID;
    x_instance_rec.CUSTOMER_VIEW_FLAG           := C1.NEW_CUSTOMER_VIEW_FLAG;
    x_instance_rec.MERCHANT_VIEW_FLAG           := C1.NEW_MERCHANT_VIEW_FLAG;
    x_instance_rec.SELLABLE_FLAG                := C1.NEW_SELLABLE_FLAG;
    x_instance_rec.SYSTEM_ID                    := C1.NEW_SYSTEM_ID;
    x_instance_rec.INSTANCE_TYPE_CODE           := C1.NEW_INSTANCE_TYPE_CODE;
    x_instance_rec.ACTIVE_START_DATE            := C1.NEW_ACTIVE_START_DATE;
    x_instance_rec.ACTIVE_END_DATE              := C1.NEW_ACTIVE_END_DATE;
    x_instance_rec.LOCATION_TYPE_CODE           := C1.NEW_LOCATION_TYPE_CODE;
    x_instance_rec.LOCATION_ID                  := C1.NEW_LOCATION_ID;
    x_instance_rec.INV_ORGANIZATION_ID          := C1.NEW_INV_ORGANIZATION_ID;
    x_instance_rec.INV_SUBINVENTORY_NAME        := C1.NEW_INV_SUBINVENTORY_NAME;
    x_instance_rec.INV_LOCATOR_ID               := C1.NEW_INV_LOCATOR_ID;
    x_instance_rec.PA_PROJECT_ID                := C1.NEW_PA_PROJECT_ID;
    x_instance_rec.PA_PROJECT_TASK_ID           := C1.NEW_PA_PROJECT_TASK_ID;
    x_instance_rec.IN_TRANSIT_ORDER_LINE_ID     := C1.NEW_IN_TRANSIT_ORDER_LINE_ID;
    x_instance_rec.WIP_JOB_ID                   := C1.NEW_WIP_JOB_ID;
    x_instance_rec.PO_ORDER_LINE_ID             := C1.NEW_PO_ORDER_LINE_ID;
    x_instance_rec.COMPLETENESS_FLAG            := C1.NEW_COMPLETENESS_FLAG;
    x_instance_rec.CONTEXT                      := C1.NEW_CONTEXT;
    x_instance_rec.ATTRIBUTE1                   := C1.NEW_ATTRIBUTE1;
    x_instance_rec.ATTRIBUTE2                   := C1.NEW_ATTRIBUTE2;
    x_instance_rec.ATTRIBUTE3                   := C1.NEW_ATTRIBUTE3;
    x_instance_rec.ATTRIBUTE4                   := C1.NEW_ATTRIBUTE4;
    x_instance_rec.ATTRIBUTE5                   := C1.NEW_ATTRIBUTE5;
    x_instance_rec.ATTRIBUTE6                   := C1.NEW_ATTRIBUTE6;
    x_instance_rec.ATTRIBUTE7                   := C1.NEW_ATTRIBUTE7;
    x_instance_rec.ATTRIBUTE8                   := C1.NEW_ATTRIBUTE8;
    x_instance_rec.ATTRIBUTE9                   := C1.NEW_ATTRIBUTE9;
    x_instance_rec.ATTRIBUTE10                  := C1.NEW_ATTRIBUTE10;
    x_instance_rec.ATTRIBUTE11                  := C1.NEW_ATTRIBUTE11;
    x_instance_rec.ATTRIBUTE12                  := C1.NEW_ATTRIBUTE12;
    x_instance_rec.ATTRIBUTE13                  := C1.NEW_ATTRIBUTE13;
    x_instance_rec.ATTRIBUTE14                  := C1.NEW_ATTRIBUTE14;
    x_instance_rec.ATTRIBUTE15                  := C1.NEW_ATTRIBUTE15;
    x_instance_rec.INSTALL_LOCATION_TYPE_CODE   := C1.NEW_INST_LOC_TYPE_CODE;
    x_instance_rec.INSTALL_LOCATION_ID          := C1.NEW_INST_LOC_ID;
    x_instance_rec.INSTANCE_USAGE_CODE          := C1.NEW_INST_USAGE_CODE;
    x_instance_rec.LAST_OE_ORDER_LINE_ID        := C1.NEW_LAST_OE_ORDER_LINE_ID;
    x_instance_rec.LAST_OE_RMA_LINE_ID          := C1.NEW_LAST_OE_RMA_LINE_ID;
    x_instance_rec.LAST_WIP_JOB_ID              := C1.NEW_LAST_WIP_JOB_ID;
    x_instance_rec.LAST_PO_PO_LINE_ID           := C1.NEW_LAST_PO_PO_LINE_ID;
    x_instance_rec.LAST_PA_PROJECT_ID           := C1.NEW_LAST_PA_PROJECT_ID;
    x_instance_rec.LAST_PA_TASK_ID              := C1.NEW_LAST_PA_TASK_ID;
    x_instance_rec.LAST_TXN_LINE_DETAIL_ID      := C1.NEW_LAST_TXN_LINE_DETAIL_ID;
    x_instance_rec.LAST_OE_PO_NUMBER            := C1.NEW_LAST_OE_PO_NUMBER;
    x_instance_rec.LAST_OE_AGREEMENT_ID         := C1.NEW_OE_AGREEMENT_ID;
    --start of code for eam integration--
    x_instance_rec.NETWORK_ASSET_FLAG           := C1.NEW_NETWORK_ASSET_FLAG;
    x_instance_rec.MAINTAINABLE_FLAG            := C1.NEW_MAINTAINABLE_FLAG;
    x_instance_rec.PN_LOCATION_ID               := C1.NEW_PN_LOCATION_ID;
    x_instance_rec.ASSET_CRITICALITY_CODE       := C1.NEW_ASSET_CRITICALITY_CODE;
    x_instance_rec.CATEGORY_ID                  := C1.NEW_CATEGORY_ID;
    x_instance_rec.EQUIPMENT_GEN_OBJECT_ID      := C1.NEW_EQUIPMENT_GEN_OBJECT_ID;
    x_instance_rec.INSTANTIATION_FLAG           := C1.NEW_INSTANTIATION_FLAG;
    x_instance_rec.LINEAR_LOCATION_ID           := C1.NEW_LINEAR_LOCATION_ID;
    x_instance_rec.OPERATIONAL_LOG_FLAG         := C1.NEW_OPERATIONAL_LOG_FLAG;
    x_instance_rec.CHECKIN_STATUS               := C1.NEW_CHECKIN_STATUS;
    x_instance_rec.SUPPLIER_WARRANTY_EXP_DATE   := C1.NEW_SUPPLIER_WARRANTY_EXP_DATE;
    x_instance_rec.ATTRIBUTE16                  := C1.NEW_ATTRIBUTE16;
    x_instance_rec.ATTRIBUTE17                  := C1.NEW_ATTRIBUTE17;
    x_instance_rec.ATTRIBUTE18                  := C1.NEW_ATTRIBUTE18;
    x_instance_rec.ATTRIBUTE19                  := C1.NEW_ATTRIBUTE19;
    x_instance_rec.ATTRIBUTE20                  := C1.NEW_ATTRIBUTE20;
    x_instance_rec.ATTRIBUTE21                  := C1.NEW_ATTRIBUTE21;
    x_instance_rec.ATTRIBUTE22                  := C1.NEW_ATTRIBUTE22;
    x_instance_rec.ATTRIBUTE23                  := C1.NEW_ATTRIBUTE23;
    x_instance_rec.ATTRIBUTE24                  := C1.NEW_ATTRIBUTE24;
    x_instance_rec.ATTRIBUTE25                  := C1.NEW_ATTRIBUTE25;
    x_instance_rec.ATTRIBUTE26                  := C1.NEW_ATTRIBUTE26;
    x_instance_rec.ATTRIBUTE27                  := C1.NEW_ATTRIBUTE27;
    x_instance_rec.ATTRIBUTE28                  := C1.NEW_ATTRIBUTE28;
    x_instance_rec.ATTRIBUTE29                  := C1.NEW_ATTRIBUTE29;
    x_instance_rec.ATTRIBUTE30                  := C1.NEW_ATTRIBUTE30;
    --end of code for eam integration--
    -- Addition of columns for FA Integration
    x_instance_rec.PURCHASE_UNIT_PRICE          := C1.NEW_PURCHASE_UNIT_PRICE;
    x_instance_rec.PURCHASE_CURRENCY_CODE       := C1.NEW_PURCHASE_CURRENCY_CODE;
    x_instance_rec.PAYABLES_UNIT_PRICE          := C1.NEW_PAYABLES_UNIT_PRICE;
    x_instance_rec.PAYABLES_CURRENCY_CODE       := C1.NEW_PAYABLES_CURRENCY_CODE;
    x_instance_rec.SALES_UNIT_PRICE             := C1.NEW_SALES_UNIT_PRICE;
    x_instance_rec.SALES_CURRENCY_CODE          := C1.NEW_SALES_CURRENCY_CODE;
    x_instance_rec.OPERATIONAL_STATUS_CODE      := C1.NEW_OPERATIONAL_STATUS_CODE;
    -- End addition of columns for FA Integration
  END LOOP;
END Initialize_inst_rec ;

/*---------------------------------------------------*/
/* Procedure name:  Initialize_inst_rec_no_dump      */
/* Description :    This procudure gets the first    */
/*                  record from the history table    */
/*---------------------------------------------------*/

PROCEDURE Initialize_inst_rec_no_dump
(
  x_instance_rec      IN OUT NOCOPY csi_datastructures_pub.instance_header_rec,
  p_instance_id       IN NUMBER ,
  x_first_no_dump     IN OUT NOCOPY DATE
  ) IS

CURSOR Int_no_dump(p_instance_id IN NUMBER) IS
SELECT
     CREATION_DATE
    ,NEW_INSTANCE_NUMBER
    ,NEW_EXTERNAL_REFERENCE
    ,NEW_INVENTORY_ITEM_ID
    ,NEW_INVENTORY_REVISION
    ,NEW_INV_MASTER_ORGANIZATION_ID
    ,NEW_SERIAL_NUMBER
    ,NEW_MFG_SERIAL_NUMBER_FLAG
    ,NEW_LOT_NUMBER
    ,NEW_QUANTITY
    ,NEW_UNIT_OF_MEASURE
    ,NEW_ACCOUNTING_CLASS_CODE
    ,NEW_INSTANCE_CONDITION_ID
    ,NEW_INSTANCE_STATUS_ID
    ,NEW_CUSTOMER_VIEW_FLAG
    ,NEW_MERCHANT_VIEW_FLAG
    ,NEW_SELLABLE_FLAG
    ,NEW_SYSTEM_ID
    ,NEW_INSTANCE_TYPE_CODE
    ,NEW_ACTIVE_START_DATE
    ,NEW_ACTIVE_END_DATE
    ,NEW_LOCATION_TYPE_CODE
    ,NEW_LOCATION_ID
    ,NEW_INV_ORGANIZATION_ID
    ,NEW_INV_SUBINVENTORY_NAME
    ,NEW_INV_LOCATOR_ID
    ,NEW_PA_PROJECT_ID
    ,NEW_PA_PROJECT_TASK_ID
    ,NEW_IN_TRANSIT_ORDER_LINE_ID
    ,NEW_WIP_JOB_ID
    ,NEW_PO_ORDER_LINE_ID
    ,NEW_COMPLETENESS_FLAG
    ,NEW_CONTEXT
    ,NEW_ATTRIBUTE1
    ,NEW_ATTRIBUTE2
    ,NEW_ATTRIBUTE3
    ,NEW_ATTRIBUTE4
    ,NEW_ATTRIBUTE5
    ,NEW_ATTRIBUTE6
    ,NEW_ATTRIBUTE7
    ,NEW_ATTRIBUTE8
    ,NEW_ATTRIBUTE9
    ,NEW_ATTRIBUTE10
    ,NEW_ATTRIBUTE11
    ,NEW_ATTRIBUTE12
    ,NEW_ATTRIBUTE13
    ,NEW_ATTRIBUTE14
    ,NEW_ATTRIBUTE15
    ,NEW_INST_LOC_TYPE_CODE
    ,NEW_INST_LOC_ID
    ,NEW_INST_USAGE_CODE
    ,NEW_LAST_OE_ORDER_LINE_ID
    ,NEW_LAST_OE_RMA_LINE_ID
    ,NEW_LAST_WIP_JOB_ID
    ,NEW_LAST_PO_PO_LINE_ID
    ,NEW_LAST_PA_PROJECT_ID
    ,NEW_LAST_PA_TASK_ID
    ,NEW_LAST_TXN_LINE_DETAIL_ID
    ,NEW_LAST_OE_PO_NUMBER
    ,NEW_OE_AGREEMENT_ID
    --start of column addition for eam integration--
    ,NEW_NETWORK_ASSET_FLAG
    ,NEW_MAINTAINABLE_FLAG
    ,NEW_PN_LOCATION_ID
    ,NEW_ASSET_CRITICALITY_CODE
    ,NEW_CATEGORY_ID
    ,NEW_EQUIPMENT_GEN_OBJECT_ID
    ,NEW_INSTANTIATION_FLAG
    ,NEW_LINEAR_LOCATION_ID
    ,NEW_OPERATIONAL_LOG_FLAG
    ,NEW_CHECKIN_STATUS
    ,NEW_SUPPLIER_WARRANTY_EXP_DATE
    ,NEW_ATTRIBUTE16
    ,NEW_ATTRIBUTE17
    ,NEW_ATTRIBUTE18
    ,NEW_ATTRIBUTE19
    ,NEW_ATTRIBUTE20
    ,NEW_ATTRIBUTE21
    ,NEW_ATTRIBUTE22
    ,NEW_ATTRIBUTE23
    ,NEW_ATTRIBUTE24
    ,NEW_ATTRIBUTE25
    ,NEW_ATTRIBUTE26
    ,NEW_ATTRIBUTE27
    ,NEW_ATTRIBUTE28
    ,NEW_ATTRIBUTE29
    ,NEW_ATTRIBUTE30
    --end of column addition for eam integration--
    -- Addition of columns for FA Integration
    ,NEW_PURCHASE_UNIT_PRICE
    ,NEW_PURCHASE_CURRENCY_CODE
    ,NEW_PAYABLES_UNIT_PRICE
    ,NEW_PAYABLES_CURRENCY_CODE
    ,NEW_SALES_UNIT_PRICE
    ,NEW_SALES_CURRENCY_CODE
    ,NEW_OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
FROM CSI_ITEM_INSTANCES_H
WHERE instance_id = p_instance_id
--and creation_date <= x_first_no_dump
--and  full_dump_flag = 'N'
ORDER BY creation_date;

BEGIN

  FOR C1 IN Int_no_dump(p_instance_id) LOOP
   IF Int_no_dump%ROWCOUNT = 1 THEN
    x_first_no_dump                             := NVL(C1.NEW_ACTIVE_START_DATE,C1.CREATION_DATE);
    x_instance_rec.INSTANCE_NUMBER              := C1.NEW_INSTANCE_NUMBER;
    x_instance_rec.EXTERNAL_REFERENCE           := C1.NEW_EXTERNAL_REFERENCE;
    x_instance_rec.INVENTORY_ITEM_ID            := C1.NEW_INVENTORY_ITEM_ID;
    x_instance_rec.INVENTORY_REVISION           := C1.NEW_INVENTORY_REVISION;
    x_instance_rec.INV_MASTER_ORGANIZATION_ID   := C1.NEW_INV_MASTER_ORGANIZATION_ID;
    x_instance_rec.SERIAL_NUMBER                := C1.NEW_SERIAL_NUMBER;
    x_instance_rec.MFG_SERIAL_NUMBER_FLAG       := C1.NEW_MFG_SERIAL_NUMBER_FLAG;
    x_instance_rec.LOT_NUMBER                   := C1.NEW_LOT_NUMBER;
    x_instance_rec.QUANTITY                     := C1.NEW_QUANTITY;
    x_instance_rec.UNIT_OF_MEASURE              := C1.NEW_UNIT_OF_MEASURE;
    x_instance_rec.ACCOUNTING_CLASS_CODE        := C1.NEW_ACCOUNTING_CLASS_CODE;
    x_instance_rec.INSTANCE_CONDITION_ID        := C1.NEW_INSTANCE_CONDITION_ID;
    x_instance_rec.INSTANCE_STATUS_ID           := C1.NEW_INSTANCE_STATUS_ID;
    x_instance_rec.CUSTOMER_VIEW_FLAG           := C1.NEW_CUSTOMER_VIEW_FLAG;
    x_instance_rec.MERCHANT_VIEW_FLAG           := C1.NEW_MERCHANT_VIEW_FLAG;
    x_instance_rec.SELLABLE_FLAG                := C1.NEW_SELLABLE_FLAG;
    x_instance_rec.SYSTEM_ID                    := C1.NEW_SYSTEM_ID;
    x_instance_rec.INSTANCE_TYPE_CODE           := C1.NEW_INSTANCE_TYPE_CODE;
    x_instance_rec.ACTIVE_START_DATE            := C1.NEW_ACTIVE_START_DATE;
    x_instance_rec.ACTIVE_END_DATE              := C1.NEW_ACTIVE_END_DATE;
    x_instance_rec.LOCATION_TYPE_CODE           := C1.NEW_LOCATION_TYPE_CODE;
    x_instance_rec.LOCATION_ID                  := C1.NEW_LOCATION_ID;
    x_instance_rec.INV_ORGANIZATION_ID          := C1.NEW_INV_ORGANIZATION_ID;
    x_instance_rec.INV_SUBINVENTORY_NAME        := C1.NEW_INV_SUBINVENTORY_NAME;
    x_instance_rec.INV_LOCATOR_ID               := C1.NEW_INV_LOCATOR_ID;
    x_instance_rec.PA_PROJECT_ID                := C1.NEW_PA_PROJECT_ID;
    x_instance_rec.PA_PROJECT_TASK_ID           := C1.NEW_PA_PROJECT_TASK_ID;
    x_instance_rec.IN_TRANSIT_ORDER_LINE_ID     := C1.NEW_IN_TRANSIT_ORDER_LINE_ID;
    x_instance_rec.WIP_JOB_ID                   := C1.NEW_WIP_JOB_ID;
    x_instance_rec.PO_ORDER_LINE_ID             := C1.NEW_PO_ORDER_LINE_ID;
    x_instance_rec.COMPLETENESS_FLAG            := C1.NEW_COMPLETENESS_FLAG;
    x_instance_rec.CONTEXT                      := C1.NEW_CONTEXT;
    x_instance_rec.ATTRIBUTE1                   := C1.NEW_ATTRIBUTE1;
    x_instance_rec.ATTRIBUTE2                   := C1.NEW_ATTRIBUTE2;
    x_instance_rec.ATTRIBUTE3                   := C1.NEW_ATTRIBUTE3;
    x_instance_rec.ATTRIBUTE4                   := C1.NEW_ATTRIBUTE4;
    x_instance_rec.ATTRIBUTE5                   := C1.NEW_ATTRIBUTE5;
    x_instance_rec.ATTRIBUTE6                   := C1.NEW_ATTRIBUTE6;
    x_instance_rec.ATTRIBUTE7                   := C1.NEW_ATTRIBUTE7;
    x_instance_rec.ATTRIBUTE8                   := C1.NEW_ATTRIBUTE8;
    x_instance_rec.ATTRIBUTE9                   := C1.NEW_ATTRIBUTE9;
    x_instance_rec.ATTRIBUTE10                  := C1.NEW_ATTRIBUTE10;
    x_instance_rec.ATTRIBUTE11                  := C1.NEW_ATTRIBUTE11;
    x_instance_rec.ATTRIBUTE12                  := C1.NEW_ATTRIBUTE12;
    x_instance_rec.ATTRIBUTE13                  := C1.NEW_ATTRIBUTE13;
    x_instance_rec.ATTRIBUTE14                  := C1.NEW_ATTRIBUTE14;
    x_instance_rec.ATTRIBUTE15                  := C1.NEW_ATTRIBUTE15;
    x_instance_rec.INSTALL_LOCATION_TYPE_CODE   := C1.NEW_INST_LOC_TYPE_CODE;
    x_instance_rec.INSTALL_LOCATION_ID          := C1.NEW_INST_LOC_ID;
    x_instance_rec.INSTANCE_USAGE_CODE          := C1.NEW_INST_USAGE_CODE;
    x_instance_rec.LAST_OE_ORDER_LINE_ID        := C1.NEW_LAST_OE_ORDER_LINE_ID;
    x_instance_rec.LAST_OE_RMA_LINE_ID          := C1.NEW_LAST_OE_RMA_LINE_ID;
    x_instance_rec.LAST_WIP_JOB_ID              := C1.NEW_LAST_WIP_JOB_ID;
    x_instance_rec.LAST_PO_PO_LINE_ID           := C1.NEW_LAST_PO_PO_LINE_ID;
    x_instance_rec.LAST_PA_PROJECT_ID           := C1.NEW_LAST_PA_PROJECT_ID;
    x_instance_rec.LAST_PA_TASK_ID              := C1.NEW_LAST_PA_TASK_ID;
    x_instance_rec.LAST_TXN_LINE_DETAIL_ID      := C1.NEW_LAST_TXN_LINE_DETAIL_ID;
    x_instance_rec.LAST_OE_PO_NUMBER            := C1.NEW_LAST_OE_PO_NUMBER;
    x_instance_rec.LAST_OE_AGREEMENT_ID         := C1.NEW_OE_AGREEMENT_ID;
    --start of code for eam integration--
    x_instance_rec.NETWORK_ASSET_FLAG           := C1.NEW_NETWORK_ASSET_FLAG;
    x_instance_rec.MAINTAINABLE_FLAG            := C1.NEW_MAINTAINABLE_FLAG;
    x_instance_rec.PN_LOCATION_ID               := C1.NEW_PN_LOCATION_ID;
    x_instance_rec.ASSET_CRITICALITY_CODE       := C1.NEW_ASSET_CRITICALITY_CODE;
    x_instance_rec.CATEGORY_ID                  := C1.NEW_CATEGORY_ID;
    x_instance_rec.EQUIPMENT_GEN_OBJECT_ID      := C1.NEW_EQUIPMENT_GEN_OBJECT_ID;
    x_instance_rec.INSTANTIATION_FLAG           := C1.NEW_INSTANTIATION_FLAG;
    x_instance_rec.LINEAR_LOCATION_ID           := C1.NEW_LINEAR_LOCATION_ID;
    x_instance_rec.OPERATIONAL_LOG_FLAG         := C1.NEW_OPERATIONAL_LOG_FLAG;
    x_instance_rec.CHECKIN_STATUS               := C1.NEW_CHECKIN_STATUS;
    x_instance_rec.SUPPLIER_WARRANTY_EXP_DATE   := C1.NEW_SUPPLIER_WARRANTY_EXP_DATE;
    x_instance_rec.ATTRIBUTE16                  := C1.NEW_ATTRIBUTE16;
    x_instance_rec.ATTRIBUTE17                  := C1.NEW_ATTRIBUTE17;
    x_instance_rec.ATTRIBUTE18                  := C1.NEW_ATTRIBUTE18;
    x_instance_rec.ATTRIBUTE19                  := C1.NEW_ATTRIBUTE19;
    x_instance_rec.ATTRIBUTE20                  := C1.NEW_ATTRIBUTE20;
    x_instance_rec.ATTRIBUTE21                  := C1.NEW_ATTRIBUTE21;
    x_instance_rec.ATTRIBUTE22                  := C1.NEW_ATTRIBUTE22;
    x_instance_rec.ATTRIBUTE23                  := C1.NEW_ATTRIBUTE23;
    x_instance_rec.ATTRIBUTE24                  := C1.NEW_ATTRIBUTE24;
    x_instance_rec.ATTRIBUTE25                  := C1.NEW_ATTRIBUTE25;
    x_instance_rec.ATTRIBUTE26                  := C1.NEW_ATTRIBUTE26;
    x_instance_rec.ATTRIBUTE27                  := C1.NEW_ATTRIBUTE27;
    x_instance_rec.ATTRIBUTE28                  := C1.NEW_ATTRIBUTE28;
    x_instance_rec.ATTRIBUTE29                  := C1.NEW_ATTRIBUTE29;
    x_instance_rec.ATTRIBUTE30                  := C1.NEW_ATTRIBUTE30;
    --end of code for eam integration--
    -- Addition of columns for FA Integration
    x_instance_rec.PURCHASE_UNIT_PRICE          := C1.NEW_PURCHASE_UNIT_PRICE;
    x_instance_rec.PURCHASE_CURRENCY_CODE       := C1.NEW_PURCHASE_CURRENCY_CODE;
    x_instance_rec.PAYABLES_UNIT_PRICE          := C1.NEW_PAYABLES_UNIT_PRICE;
    x_instance_rec.PAYABLES_CURRENCY_CODE       := C1.NEW_PAYABLES_CURRENCY_CODE;
    x_instance_rec.SALES_UNIT_PRICE             := C1.NEW_SALES_UNIT_PRICE;
    x_instance_rec.SALES_CURRENCY_CODE          := C1.NEW_SALES_CURRENCY_CODE;
    x_instance_rec.OPERATIONAL_STATUS_CODE      := C1.NEW_OPERATIONAL_STATUS_CODE;
    -- End addition of columns for FA Integration
  ELSE
    EXIT;
  END IF;

  END LOOP;
END Initialize_inst_rec_no_dump ;




/*---------------------------------------------------------*/
/* Procedure name:  Construct_inst_from_hist               */
/* Description :    This procudure recontructs the record  */
/*                  from the history                       */
/*---------------------------------------------------------*/

PROCEDURE Construct_inst_from_hist
(
  x_instance_rec           IN OUT NOCOPY csi_datastructures_pub.instance_header_rec,
  p_time_stamp             IN DATE
   ) IS

 l_nearest_full_dump      DATE := p_time_stamp;
 l_instance_hist_id       NUMBER;

CURSOR get_nearest_full_dump(p_instance_id IN NUMBER ,p_time IN DATE) IS
SELECT
MAX(instance_history_id)
FROM CSI_ITEM_INSTANCES_H
WHERE creation_date <= p_time
  and instance_id = p_instance_id
  and full_dump_flag = 'Y' ;

CURSOR get_instance_hist(p_instance_id IN NUMBER ,
                          p_nearest_full_dump IN DATE,
                          p_time IN DATE ) IS
SELECT
     OLD_INSTANCE_NUMBER
    ,NEW_INSTANCE_NUMBER
    ,OLD_EXTERNAL_REFERENCE
    ,NEW_EXTERNAL_REFERENCE
    ,OLD_INVENTORY_ITEM_ID
    ,NEW_INVENTORY_ITEM_ID
    ,OLD_INVENTORY_REVISION
    ,NEW_INVENTORY_REVISION
    ,OLD_INV_MASTER_ORGANIZATION_ID
    ,NEW_INV_MASTER_ORGANIZATION_ID
    ,OLD_SERIAL_NUMBER
    ,NEW_SERIAL_NUMBER
    ,OLD_MFG_SERIAL_NUMBER_FLAG
    ,NEW_MFG_SERIAL_NUMBER_FLAG
    ,OLD_LOT_NUMBER
    ,NEW_LOT_NUMBER
    ,OLD_QUANTITY
    ,NEW_QUANTITY
    ,OLD_UNIT_OF_MEASURE
    ,NEW_UNIT_OF_MEASURE
    ,OLD_ACCOUNTING_CLASS_CODE
    ,NEW_ACCOUNTING_CLASS_CODE
    ,OLD_INSTANCE_CONDITION_ID
    ,NEW_INSTANCE_CONDITION_ID
    ,OLD_INSTANCE_STATUS_ID
    ,NEW_INSTANCE_STATUS_ID
    ,OLD_CUSTOMER_VIEW_FLAG
    ,NEW_CUSTOMER_VIEW_FLAG
    ,OLD_MERCHANT_VIEW_FLAG
    ,NEW_MERCHANT_VIEW_FLAG
    ,OLD_SELLABLE_FLAG
    ,NEW_SELLABLE_FLAG
    ,OLD_SYSTEM_ID
    ,NEW_SYSTEM_ID
    ,OLD_INSTANCE_TYPE_CODE
    ,NEW_INSTANCE_TYPE_CODE
    ,OLD_ACTIVE_START_DATE
    ,NEW_ACTIVE_START_DATE
    ,OLD_ACTIVE_END_DATE
    ,NEW_ACTIVE_END_DATE
    ,OLD_LOCATION_TYPE_CODE
    ,NEW_LOCATION_TYPE_CODE
    ,OLD_LOCATION_ID
    ,NEW_LOCATION_ID
    ,OLD_INV_ORGANIZATION_ID
    ,NEW_INV_ORGANIZATION_ID
    ,OLD_INV_SUBINVENTORY_NAME
    ,NEW_INV_SUBINVENTORY_NAME
    ,OLD_INV_LOCATOR_ID
    ,NEW_INV_LOCATOR_ID
    ,OLD_PA_PROJECT_ID
    ,NEW_PA_PROJECT_ID
    ,OLD_PA_PROJECT_TASK_ID
    ,NEW_PA_PROJECT_TASK_ID
    ,OLD_IN_TRANSIT_ORDER_LINE_ID
    ,NEW_IN_TRANSIT_ORDER_LINE_ID
    ,OLD_WIP_JOB_ID
    ,NEW_WIP_JOB_ID
    ,OLD_PO_ORDER_LINE_ID
    ,NEW_PO_ORDER_LINE_ID
    ,OLD_COMPLETENESS_FLAG
    ,NEW_COMPLETENESS_FLAG
    ,OLD_CONTEXT
    ,NEW_CONTEXT
    ,OLD_ATTRIBUTE1
    ,NEW_ATTRIBUTE1
    ,OLD_ATTRIBUTE2
    ,NEW_ATTRIBUTE2
    ,OLD_ATTRIBUTE3
    ,NEW_ATTRIBUTE3
    ,OLD_ATTRIBUTE4
    ,NEW_ATTRIBUTE4
    ,OLD_ATTRIBUTE5
    ,NEW_ATTRIBUTE5
    ,OLD_ATTRIBUTE6
    ,NEW_ATTRIBUTE6
    ,OLD_ATTRIBUTE7
    ,NEW_ATTRIBUTE7
    ,OLD_ATTRIBUTE8
    ,NEW_ATTRIBUTE8
    ,OLD_ATTRIBUTE9
    ,NEW_ATTRIBUTE9
    ,OLD_ATTRIBUTE10
    ,NEW_ATTRIBUTE10
    ,OLD_ATTRIBUTE11
    ,NEW_ATTRIBUTE11
    ,OLD_ATTRIBUTE12
    ,NEW_ATTRIBUTE12
    ,OLD_ATTRIBUTE13
    ,NEW_ATTRIBUTE13
    ,OLD_ATTRIBUTE14
    ,NEW_ATTRIBUTE14
    ,OLD_ATTRIBUTE15
    ,NEW_ATTRIBUTE15
    ,OLD_INST_LOC_TYPE_CODE
    ,NEW_INST_LOC_TYPE_CODE
    ,OLD_INST_LOC_ID
    ,NEW_INST_LOC_ID
    ,OLD_INST_USAGE_CODE
    ,NEW_INST_USAGE_CODE
    ,CREATION_DATE
    ,OLD_CONFIG_INST_REV_NUM
    ,NEW_CONFIG_INST_REV_NUM
    ,OLD_CONFIG_VALID_STATUS
    ,NEW_CONFIG_VALID_STATUS
    ,OLD_INSTANCE_DESCRIPTION
    ,NEW_INSTANCE_DESCRIPTION
    ,OLD_LAST_VLD_ORGANIZATION_ID
    ,NEW_LAST_VLD_ORGANIZATION_ID
    ,OLD_INSTALL_DATE
    ,NEW_INSTALL_DATE
    ,OLD_RETURN_BY_DATE
    ,NEW_RETURN_BY_DATE
    ,OLD_ACTUAL_RETURN_DATE
    ,NEW_ACTUAL_RETURN_DATE
    ,OLD_OE_AGREEMENT_ID
    ,NEW_OE_AGREEMENT_ID
    ,OLD_LAST_OE_ORDER_LINE_ID
    ,NEW_LAST_OE_ORDER_LINE_ID
    ,OLD_LAST_OE_RMA_LINE_ID
    ,NEW_LAST_OE_RMA_LINE_ID
    ,OLD_LAST_WIP_JOB_ID
    ,NEW_LAST_WIP_JOB_ID
    ,OLD_LAST_PO_PO_LINE_ID
    ,NEW_LAST_PO_PO_LINE_ID
    ,OLD_LAST_PA_PROJECT_ID
    ,NEW_LAST_PA_PROJECT_ID
    ,OLD_LAST_PA_TASK_ID
    ,NEW_LAST_PA_TASK_ID
    ,OLD_LAST_TXN_LINE_DETAIL_ID
    ,NEW_LAST_TXN_LINE_DETAIL_ID
    ,OLD_LAST_OE_PO_NUMBER
    ,NEW_LAST_OE_PO_NUMBER
    --start of column addition for eam integration--
    ,OLD_NETWORK_ASSET_FLAG
    ,NEW_NETWORK_ASSET_FLAG
    ,OLD_MAINTAINABLE_FLAG
    ,NEW_MAINTAINABLE_FLAG
    ,OLD_PN_LOCATION_ID
    ,NEW_PN_LOCATION_ID
    ,OLD_ASSET_CRITICALITY_CODE
    ,NEW_ASSET_CRITICALITY_CODE
    ,OLD_CATEGORY_ID
    ,NEW_CATEGORY_ID
    ,OLD_EQUIPMENT_GEN_OBJECT_ID
    ,NEW_EQUIPMENT_GEN_OBJECT_ID
    ,OLD_INSTANTIATION_FLAG
    ,NEW_INSTANTIATION_FLAG
    ,OLD_LINEAR_LOCATION_ID
    ,NEW_LINEAR_LOCATION_ID
    ,OLD_OPERATIONAL_LOG_FLAG
    ,NEW_OPERATIONAL_LOG_FLAG
    ,OLD_CHECKIN_STATUS
    ,NEW_CHECKIN_STATUS
    ,OLD_SUPPLIER_WARRANTY_EXP_DATE
    ,NEW_SUPPLIER_WARRANTY_EXP_DATE
    ,OLD_ATTRIBUTE16
    ,NEW_ATTRIBUTE16
    ,OLD_ATTRIBUTE17
    ,NEW_ATTRIBUTE17
    ,OLD_ATTRIBUTE18
    ,NEW_ATTRIBUTE18
    ,OLD_ATTRIBUTE19
    ,NEW_ATTRIBUTE19
    ,OLD_ATTRIBUTE20
    ,NEW_ATTRIBUTE20
    ,OLD_ATTRIBUTE21
    ,NEW_ATTRIBUTE21
    ,OLD_ATTRIBUTE22
    ,NEW_ATTRIBUTE22
    ,OLD_ATTRIBUTE23
    ,NEW_ATTRIBUTE23
    ,OLD_ATTRIBUTE24
    ,NEW_ATTRIBUTE24
    ,OLD_ATTRIBUTE25
    ,NEW_ATTRIBUTE25
    ,OLD_ATTRIBUTE26
    ,NEW_ATTRIBUTE26
    ,OLD_ATTRIBUTE27
    ,NEW_ATTRIBUTE27
    ,OLD_ATTRIBUTE28
    ,NEW_ATTRIBUTE28
    ,OLD_ATTRIBUTE29
    ,NEW_ATTRIBUTE29
    ,OLD_ATTRIBUTE30
    ,NEW_ATTRIBUTE30
    --end of column addition for eam integration--
    -- Addition of columns for FA Integration
    ,OLD_PURCHASE_UNIT_PRICE
    ,NEW_PURCHASE_UNIT_PRICE
    ,OLD_PURCHASE_CURRENCY_CODE
    ,NEW_PURCHASE_CURRENCY_CODE
    ,OLD_PAYABLES_UNIT_PRICE
    ,NEW_PAYABLES_UNIT_PRICE
    ,OLD_PAYABLES_CURRENCY_CODE
    ,NEW_PAYABLES_CURRENCY_CODE
    ,OLD_SALES_UNIT_PRICE
    ,NEW_SALES_UNIT_PRICE
    ,OLD_SALES_CURRENCY_CODE
    ,NEW_SALES_CURRENCY_CODE
    ,OLD_OPERATIONAL_STATUS_CODE
    ,NEW_OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
FROM CSI_ITEM_INSTANCES_H
WHERE creation_date <= p_time
and creation_date >= p_nearest_full_dump
and instance_id = p_instance_id
ORDER BY creation_date;

l_time_stamp  DATE := p_time_stamp;

BEGIN

      OPEN get_nearest_full_dump(x_instance_rec.instance_id,p_time_stamp);
        FETCH get_nearest_full_dump INTO l_instance_hist_id;
      CLOSE get_nearest_full_dump;

       IF l_instance_hist_id IS NOT NULL THEN
            Initialize_inst_rec( x_instance_rec, l_instance_hist_id ,l_nearest_full_dump);
       ELSE
            Initialize_inst_rec_no_dump(x_instance_rec, x_instance_rec.instance_id, l_time_stamp);
            l_nearest_full_dump :=  l_time_stamp;
         -- If the user chooses a date before the creation date of the instance
         -- then raise an error
           IF p_time_stamp < l_time_stamp THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_H_DATE_BEFORE_CRE_DATE');
               FND_MESSAGE.SET_TOKEN('CREATION_DATE',to_char(l_time_stamp, 'DD-MON-YYYY HH24:MI:SS'));
               FND_MESSAGE.SET_TOKEN('USER_DATE',to_char(p_time_stamp, 'DD-MON-YYYY HH24:MI:SS'));
               FND_MSG_PUB.Add;
               RAISE FND_API.G_EXC_ERROR;
           END IF;
        END IF;
 FOR C2 IN get_instance_hist(x_instance_rec.instance_id ,l_nearest_full_dump,p_time_stamp ) LOOP

   IF (C2.OLD_INSTANCE_NUMBER IS NULL AND C2.NEW_INSTANCE_NUMBER IS NOT NULL)
   OR (C2.OLD_INSTANCE_NUMBER IS NOT NULL AND C2.NEW_INSTANCE_NUMBER IS NULL)
   OR (C2.OLD_INSTANCE_NUMBER <> C2.NEW_INSTANCE_NUMBER) THEN
        x_instance_rec.INSTANCE_NUMBER := C2.NEW_INSTANCE_NUMBER;
   END IF;

   IF (C2.OLD_EXTERNAL_REFERENCE IS NULL AND C2.NEW_EXTERNAL_REFERENCE IS NOT NULL)
   OR (C2.OLD_EXTERNAL_REFERENCE IS NOT NULL AND C2.NEW_EXTERNAL_REFERENCE IS NULL)
   OR (C2.OLD_EXTERNAL_REFERENCE <> C2.NEW_EXTERNAL_REFERENCE) THEN
        x_instance_rec.EXTERNAL_REFERENCE := C2.NEW_EXTERNAL_REFERENCE;
   END IF;

   IF (C2.OLD_INVENTORY_ITEM_ID IS NULL AND C2.NEW_INVENTORY_ITEM_ID IS NOT NULL)
   OR (C2.OLD_INVENTORY_ITEM_ID IS NOT NULL AND C2.NEW_INVENTORY_ITEM_ID IS NULL)
   OR (C2.OLD_INVENTORY_ITEM_ID <> C2.NEW_INVENTORY_ITEM_ID) THEN
        x_instance_rec.INVENTORY_ITEM_ID := C2.NEW_INVENTORY_ITEM_ID;
   END IF;

   IF (C2.OLD_INVENTORY_REVISION IS NULL AND C2.NEW_INVENTORY_REVISION IS NOT NULL)
   OR (C2.OLD_INVENTORY_REVISION IS NOT NULL AND C2.NEW_INVENTORY_REVISION IS NULL)
   OR (C2.OLD_INVENTORY_REVISION <> C2.NEW_INVENTORY_REVISION) THEN
        x_instance_rec.INVENTORY_REVISION := C2.NEW_INVENTORY_REVISION;
   END IF;

   IF (C2.OLD_INV_MASTER_ORGANIZATION_ID IS NULL AND C2.NEW_INV_MASTER_ORGANIZATION_ID IS NOT NULL)
   OR (C2.OLD_INV_MASTER_ORGANIZATION_ID IS NOT NULL AND C2.NEW_INV_MASTER_ORGANIZATION_ID IS NULL)
   OR (C2.OLD_INV_MASTER_ORGANIZATION_ID <> C2.NEW_INV_MASTER_ORGANIZATION_ID) THEN
        x_instance_rec.INV_MASTER_ORGANIZATION_ID := C2.NEW_INV_MASTER_ORGANIZATION_ID;
   END IF;

   IF (C2.OLD_SERIAL_NUMBER IS NULL AND C2.NEW_SERIAL_NUMBER IS NOT NULL)
   OR (C2.OLD_SERIAL_NUMBER IS NOT NULL AND C2.NEW_SERIAL_NUMBER IS NULL)
   OR (C2.OLD_SERIAL_NUMBER <> C2.NEW_SERIAL_NUMBER) THEN
        x_instance_rec.SERIAL_NUMBER := C2.NEW_SERIAL_NUMBER;
   END IF;

   IF (C2.OLD_MFG_SERIAL_NUMBER_FLAG IS NULL AND C2.NEW_MFG_SERIAL_NUMBER_FLAG IS NOT NULL)
   OR (C2.OLD_MFG_SERIAL_NUMBER_FLAG IS NOT NULL AND C2.NEW_MFG_SERIAL_NUMBER_FLAG IS NULL)
   OR (C2.OLD_MFG_SERIAL_NUMBER_FLAG <> C2.NEW_MFG_SERIAL_NUMBER_FLAG) THEN
        x_instance_rec.MFG_SERIAL_NUMBER_FLAG := C2.NEW_MFG_SERIAL_NUMBER_FLAG;
   END IF;

   IF (C2.OLD_LOT_NUMBER IS NULL AND C2.NEW_LOT_NUMBER IS NOT NULL)
   OR (C2.OLD_LOT_NUMBER IS NOT NULL AND C2.NEW_LOT_NUMBER IS NULL)
   OR (C2.OLD_LOT_NUMBER <> C2.NEW_LOT_NUMBER) THEN
        x_instance_rec.LOT_NUMBER := C2.NEW_LOT_NUMBER;
   END IF;

   IF (C2.OLD_QUANTITY IS NULL AND C2.NEW_QUANTITY IS NOT NULL)
   OR (C2.OLD_QUANTITY IS NOT NULL AND C2.NEW_QUANTITY IS NULL)
   OR (C2.OLD_QUANTITY <> C2.NEW_QUANTITY) THEN
        x_instance_rec.QUANTITY := C2.NEW_QUANTITY;
   END IF;

   IF (C2.OLD_UNIT_OF_MEASURE IS NULL AND C2.NEW_UNIT_OF_MEASURE IS NOT NULL)
   OR (C2.OLD_UNIT_OF_MEASURE IS NOT NULL AND C2.NEW_UNIT_OF_MEASURE IS NULL)
   OR (C2.OLD_UNIT_OF_MEASURE <> C2.NEW_UNIT_OF_MEASURE) THEN
        x_instance_rec.UNIT_OF_MEASURE := C2.NEW_UNIT_OF_MEASURE;
   END IF;

   IF (C2.OLD_ACCOUNTING_CLASS_CODE IS NULL AND C2.NEW_ACCOUNTING_CLASS_CODE IS NOT NULL)
   OR (C2.OLD_ACCOUNTING_CLASS_CODE IS NOT NULL AND C2.NEW_ACCOUNTING_CLASS_CODE IS NULL)
   OR (C2.OLD_ACCOUNTING_CLASS_CODE <> C2.NEW_ACCOUNTING_CLASS_CODE) THEN
        x_instance_rec.ACCOUNTING_CLASS_CODE := C2.NEW_ACCOUNTING_CLASS_CODE;
   END IF;

   IF (C2.OLD_INSTANCE_CONDITION_ID IS NULL AND C2.NEW_INSTANCE_CONDITION_ID IS NOT NULL)
   OR (C2.OLD_INSTANCE_CONDITION_ID IS NOT NULL AND C2.NEW_INSTANCE_CONDITION_ID IS NULL)
   OR (C2.OLD_INSTANCE_CONDITION_ID <> C2.NEW_INSTANCE_CONDITION_ID) THEN
        x_instance_rec.INSTANCE_CONDITION_ID := C2.NEW_INSTANCE_CONDITION_ID;
   END IF;

   IF (C2.OLD_INSTANCE_STATUS_ID IS NULL AND C2.NEW_INSTANCE_STATUS_ID IS NOT NULL)
   OR (C2.OLD_INSTANCE_STATUS_ID IS NOT NULL AND C2.NEW_INSTANCE_STATUS_ID IS NULL)
   OR (C2.OLD_INSTANCE_STATUS_ID <> C2.NEW_INSTANCE_STATUS_ID) THEN
        x_instance_rec.INSTANCE_STATUS_ID := C2.NEW_INSTANCE_STATUS_ID;
   END IF;

   IF (C2.OLD_CUSTOMER_VIEW_FLAG IS NULL AND C2.NEW_CUSTOMER_VIEW_FLAG IS NOT NULL)
   OR (C2.OLD_CUSTOMER_VIEW_FLAG IS NOT NULL AND C2.NEW_CUSTOMER_VIEW_FLAG IS NULL)
   OR (C2.OLD_CUSTOMER_VIEW_FLAG <> C2.NEW_CUSTOMER_VIEW_FLAG) THEN
        x_instance_rec.CUSTOMER_VIEW_FLAG := C2.NEW_CUSTOMER_VIEW_FLAG;
   END IF;

   IF (C2.OLD_MERCHANT_VIEW_FLAG IS NULL AND C2.NEW_MERCHANT_VIEW_FLAG IS NOT NULL)
   OR (C2.OLD_MERCHANT_VIEW_FLAG IS NOT NULL AND C2.NEW_MERCHANT_VIEW_FLAG IS NULL)
   OR (C2.OLD_MERCHANT_VIEW_FLAG <> C2.NEW_MERCHANT_VIEW_FLAG) THEN
        x_instance_rec.MERCHANT_VIEW_FLAG := C2.NEW_MERCHANT_VIEW_FLAG;
   END IF;


   IF (C2.OLD_SELLABLE_FLAG IS NULL AND C2.NEW_SELLABLE_FLAG IS NOT NULL)
   OR (C2.OLD_SELLABLE_FLAG IS NOT NULL AND C2.NEW_SELLABLE_FLAG IS NULL)
   OR (C2.OLD_SELLABLE_FLAG <> C2.NEW_SELLABLE_FLAG) THEN
        x_instance_rec.SELLABLE_FLAG := C2.NEW_SELLABLE_FLAG;
   END IF;

   IF (C2.OLD_SYSTEM_ID IS NULL AND C2.NEW_SYSTEM_ID IS NOT NULL)
   OR (C2.OLD_SYSTEM_ID IS NOT NULL AND C2.NEW_SYSTEM_ID IS NULL)
   OR (C2.OLD_SYSTEM_ID <> C2.NEW_SYSTEM_ID) THEN
        x_instance_rec.SYSTEM_ID := C2.NEW_SYSTEM_ID;
   END IF;


   IF (C2.OLD_INSTANCE_TYPE_CODE IS NULL AND C2.NEW_INSTANCE_TYPE_CODE IS NOT NULL)
   OR (C2.OLD_INSTANCE_TYPE_CODE IS NOT NULL AND C2.NEW_INSTANCE_TYPE_CODE IS NULL)
   OR (C2.OLD_INSTANCE_TYPE_CODE <> C2.NEW_INSTANCE_TYPE_CODE) THEN
        x_instance_rec.INSTANCE_TYPE_CODE := C2.NEW_INSTANCE_TYPE_CODE;
   END IF;


   IF (C2.OLD_ACTIVE_START_DATE IS NULL AND C2.NEW_ACTIVE_START_DATE IS NOT NULL)
   OR (C2.OLD_ACTIVE_START_DATE IS NOT NULL AND C2.NEW_ACTIVE_START_DATE IS NULL)
   OR (C2.OLD_ACTIVE_START_DATE <> C2.NEW_ACTIVE_START_DATE) THEN
        x_instance_rec.ACTIVE_START_DATE := C2.NEW_ACTIVE_START_DATE;
   END IF;


   IF (C2.OLD_ACTIVE_END_DATE IS NULL AND C2.NEW_ACTIVE_END_DATE IS NOT NULL)
   OR (C2.OLD_ACTIVE_END_DATE IS NOT NULL AND C2.NEW_ACTIVE_END_DATE IS NULL)
   OR (C2.OLD_ACTIVE_END_DATE <> C2.NEW_ACTIVE_END_DATE) THEN
        x_instance_rec.ACTIVE_END_DATE := C2.NEW_ACTIVE_END_DATE;
   END IF;

 -- Added for bug 2671179
   IF (C2.OLD_INSTALL_DATE IS NULL AND C2.NEW_INSTALL_DATE IS NOT NULL)
   OR (C2.OLD_INSTALL_DATE IS NOT NULL AND C2.NEW_INSTALL_DATE IS NULL)
   OR (C2.OLD_INSTALL_DATE <> C2.NEW_INSTALL_DATE) THEN
        x_instance_rec.INSTALL_DATE := C2.NEW_INSTALL_DATE;
   END IF;


   IF (C2.OLD_RETURN_BY_DATE IS NULL AND C2.NEW_RETURN_BY_DATE IS NOT NULL)
   OR (C2.OLD_RETURN_BY_DATE IS NOT NULL AND C2.NEW_RETURN_BY_DATE IS NULL)
   OR (C2.OLD_RETURN_BY_DATE <> C2.NEW_RETURN_BY_DATE) THEN
        x_instance_rec.RETURN_BY_DATE := C2.NEW_RETURN_BY_DATE;
   END IF;

   IF (C2.OLD_ACTUAL_RETURN_DATE IS NULL AND C2.NEW_ACTUAL_RETURN_DATE IS NOT NULL)
   OR (C2.OLD_ACTUAL_RETURN_DATE IS NOT NULL AND C2.NEW_ACTUAL_RETURN_DATE IS NULL)
   OR (C2.OLD_ACTUAL_RETURN_DATE <> C2.NEW_ACTUAL_RETURN_DATE) THEN
        x_instance_rec.ACTUAL_RETURN_DATE := C2.NEW_ACTUAL_RETURN_DATE;
   END IF;
 -- End addition for bug 2671179

   IF (C2.OLD_LOCATION_TYPE_CODE IS NULL AND C2.NEW_LOCATION_TYPE_CODE IS NOT NULL)
   OR (C2.OLD_LOCATION_TYPE_CODE IS NOT NULL AND C2.NEW_LOCATION_TYPE_CODE IS NULL)
   OR (C2.OLD_LOCATION_TYPE_CODE <> C2.NEW_LOCATION_TYPE_CODE) THEN
        x_instance_rec.LOCATION_TYPE_CODE := C2.NEW_LOCATION_TYPE_CODE;
   END IF;

   IF (C2.OLD_LOCATION_ID IS NULL AND C2.NEW_LOCATION_ID IS NOT NULL)
   OR (C2.OLD_LOCATION_ID IS NOT NULL AND C2.NEW_LOCATION_ID IS NULL)
   OR (C2.OLD_LOCATION_ID <> C2.NEW_LOCATION_ID) THEN
        x_instance_rec.LOCATION_ID := C2.NEW_LOCATION_ID;
   END IF;


   IF (C2.OLD_INV_ORGANIZATION_ID IS NULL AND C2.NEW_INV_ORGANIZATION_ID IS NOT NULL)
   OR (C2.OLD_INV_ORGANIZATION_ID IS NOT NULL AND C2.NEW_INV_ORGANIZATION_ID IS NULL)
   OR (C2.OLD_INV_ORGANIZATION_ID <> C2.NEW_INV_ORGANIZATION_ID) THEN
        x_instance_rec.INV_ORGANIZATION_ID := C2.NEW_INV_ORGANIZATION_ID;
   END IF;


   IF (C2.OLD_INV_SUBINVENTORY_NAME IS NULL AND C2.NEW_INV_SUBINVENTORY_NAME IS NOT NULL)
   OR (C2.OLD_INV_SUBINVENTORY_NAME IS NOT NULL AND C2.NEW_INV_SUBINVENTORY_NAME IS NULL)
   OR (C2.OLD_INV_SUBINVENTORY_NAME <> C2.NEW_INV_SUBINVENTORY_NAME) THEN
        x_instance_rec.INV_SUBINVENTORY_NAME := C2.NEW_INV_SUBINVENTORY_NAME;
   END IF;

   IF (C2.OLD_INV_LOCATOR_ID IS NULL AND C2.NEW_INV_LOCATOR_ID IS NOT NULL)
   OR (C2.OLD_INV_LOCATOR_ID IS NOT NULL AND C2.NEW_INV_LOCATOR_ID IS NULL)
   OR (C2.OLD_INV_LOCATOR_ID <> C2.NEW_INV_LOCATOR_ID) THEN
        x_instance_rec.INV_LOCATOR_ID := C2.NEW_INV_LOCATOR_ID;
   END IF;

   IF (C2.OLD_PA_PROJECT_ID IS NULL AND C2.NEW_PA_PROJECT_ID IS NOT NULL)
   OR (C2.OLD_PA_PROJECT_ID IS NOT NULL AND C2.NEW_PA_PROJECT_ID IS NULL)
   OR (C2.OLD_PA_PROJECT_ID <> C2.NEW_PA_PROJECT_ID) THEN
        x_instance_rec.PA_PROJECT_ID := C2.NEW_PA_PROJECT_ID;
   END IF;

   IF (C2.OLD_PA_PROJECT_TASK_ID IS NULL AND C2.NEW_PA_PROJECT_TASK_ID IS NOT NULL)
   OR (C2.OLD_PA_PROJECT_TASK_ID IS NOT NULL AND C2.NEW_PA_PROJECT_TASK_ID IS NULL)
   OR (C2.OLD_PA_PROJECT_TASK_ID <> C2.NEW_PA_PROJECT_TASK_ID) THEN
        x_instance_rec.PA_PROJECT_TASK_ID := C2.NEW_PA_PROJECT_TASK_ID;
   END IF;

   IF (C2.OLD_IN_TRANSIT_ORDER_LINE_ID IS NULL AND C2.NEW_IN_TRANSIT_ORDER_LINE_ID IS NOT NULL)
   OR (C2.OLD_IN_TRANSIT_ORDER_LINE_ID IS NOT NULL AND C2.NEW_IN_TRANSIT_ORDER_LINE_ID IS NULL)
   OR (C2.OLD_IN_TRANSIT_ORDER_LINE_ID <> C2.NEW_IN_TRANSIT_ORDER_LINE_ID) THEN
        x_instance_rec.IN_TRANSIT_ORDER_LINE_ID := C2.NEW_IN_TRANSIT_ORDER_LINE_ID;
   END IF;

   IF (C2.OLD_WIP_JOB_ID IS NULL AND C2.NEW_WIP_JOB_ID IS NOT NULL)
   OR (C2.OLD_WIP_JOB_ID IS NOT NULL AND C2.NEW_WIP_JOB_ID IS NULL)
   OR (C2.OLD_WIP_JOB_ID <> C2.NEW_WIP_JOB_ID) THEN
        x_instance_rec.WIP_JOB_ID := C2.NEW_WIP_JOB_ID;
   END IF;

   IF (C2.OLD_PO_ORDER_LINE_ID IS NULL AND C2.NEW_PO_ORDER_LINE_ID IS NOT NULL)
   OR (C2.OLD_PO_ORDER_LINE_ID IS NOT NULL AND C2.NEW_PO_ORDER_LINE_ID IS NULL)
   OR (C2.OLD_PO_ORDER_LINE_ID <> C2.NEW_PO_ORDER_LINE_ID) THEN
        x_instance_rec.PO_ORDER_LINE_ID := C2.NEW_PO_ORDER_LINE_ID;
   END IF;

   IF (C2.OLD_COMPLETENESS_FLAG IS NULL AND C2.NEW_COMPLETENESS_FLAG IS NOT NULL)
   OR (C2.OLD_COMPLETENESS_FLAG IS NOT NULL AND C2.NEW_COMPLETENESS_FLAG IS NULL)
   OR (C2.OLD_COMPLETENESS_FLAG <> C2.NEW_COMPLETENESS_FLAG) THEN
        x_instance_rec.COMPLETENESS_FLAG := C2.NEW_COMPLETENESS_FLAG;
   END IF;

   IF (C2.OLD_CONTEXT IS NULL AND C2.NEW_CONTEXT IS NOT NULL)
   OR (C2.OLD_CONTEXT IS NOT NULL AND C2.NEW_CONTEXT IS NULL)
   OR (C2.OLD_CONTEXT <> C2.NEW_CONTEXT) THEN
        x_instance_rec.CONTEXT := C2.NEW_CONTEXT;
   END IF;

   IF (C2.OLD_ATTRIBUTE1 IS NULL AND C2.NEW_ATTRIBUTE1 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE1 IS NOT NULL AND C2.NEW_ATTRIBUTE1 IS NULL)
   OR (C2.OLD_ATTRIBUTE1 <> C2.NEW_ATTRIBUTE1) THEN
        x_instance_rec.ATTRIBUTE1 := C2.NEW_ATTRIBUTE1;
   END IF;

   IF (C2.OLD_ATTRIBUTE2 IS NULL AND C2.NEW_ATTRIBUTE2 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE2 IS NOT NULL AND C2.NEW_ATTRIBUTE2 IS NULL)
   OR (C2.OLD_ATTRIBUTE2 <> C2.NEW_ATTRIBUTE2) THEN
        x_instance_rec.ATTRIBUTE2 := C2.NEW_ATTRIBUTE2;
   END IF;

   IF (C2.OLD_ATTRIBUTE3 IS NULL AND C2.NEW_ATTRIBUTE3 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE3 IS NOT NULL AND C2.NEW_ATTRIBUTE3 IS NULL)
   OR (C2.OLD_ATTRIBUTE3 <> C2.NEW_ATTRIBUTE3) THEN
        x_instance_rec.ATTRIBUTE3 := C2.NEW_ATTRIBUTE3;
   END IF;

   IF (C2.OLD_ATTRIBUTE4 IS NULL AND C2.NEW_ATTRIBUTE4 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE4 IS NOT NULL AND C2.NEW_ATTRIBUTE4 IS NULL)
   OR (C2.OLD_ATTRIBUTE4 <> C2.NEW_ATTRIBUTE4) THEN
        x_instance_rec.ATTRIBUTE4 := C2.NEW_ATTRIBUTE4;
   END IF;


   IF (C2.OLD_ATTRIBUTE5 IS NULL AND C2.NEW_ATTRIBUTE5 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE5 IS NOT NULL AND C2.NEW_ATTRIBUTE5 IS NULL)
   OR (C2.OLD_ATTRIBUTE5 <> C2.NEW_ATTRIBUTE5) THEN
        x_instance_rec.ATTRIBUTE5 := C2.NEW_ATTRIBUTE5;
   END IF;


   IF (C2.OLD_ATTRIBUTE6 IS NULL AND C2.NEW_ATTRIBUTE6 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE6 IS NOT NULL AND C2.NEW_ATTRIBUTE6 IS NULL)
   OR (C2.OLD_ATTRIBUTE6 <> C2.NEW_ATTRIBUTE6) THEN
        x_instance_rec.ATTRIBUTE6 := C2.NEW_ATTRIBUTE6;
   END IF;

   IF (C2.OLD_ATTRIBUTE7 IS NULL AND C2.NEW_ATTRIBUTE7 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE7 IS NOT NULL AND C2.NEW_ATTRIBUTE7 IS NULL)
   OR (C2.OLD_ATTRIBUTE7 <> C2.NEW_ATTRIBUTE7) THEN
        x_instance_rec.ATTRIBUTE7 := C2.NEW_ATTRIBUTE7;
   END IF;

   IF (C2.OLD_ATTRIBUTE8 IS NULL AND C2.NEW_ATTRIBUTE8 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE8 IS NOT NULL AND C2.NEW_ATTRIBUTE8 IS NULL)
   OR (C2.OLD_ATTRIBUTE8 <> C2.NEW_ATTRIBUTE8) THEN
        x_instance_rec.ATTRIBUTE8 := C2.NEW_ATTRIBUTE8;
   END IF;

   IF (C2.OLD_ATTRIBUTE9 IS NULL AND C2.NEW_ATTRIBUTE9 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE9 IS NOT NULL AND C2.NEW_ATTRIBUTE9 IS NULL)
   OR (C2.OLD_ATTRIBUTE9 <> C2.NEW_ATTRIBUTE9) THEN
        x_instance_rec.ATTRIBUTE9 := C2.NEW_ATTRIBUTE9; --Updated to 9 for bug 8624613
   END IF;


   IF (C2.OLD_ATTRIBUTE10 IS NULL AND C2.NEW_ATTRIBUTE10 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE10 IS NOT NULL AND C2.NEW_ATTRIBUTE10 IS NULL)
   OR (C2.OLD_ATTRIBUTE10 <> C2.NEW_ATTRIBUTE10) THEN
        x_instance_rec.ATTRIBUTE10 := C2.NEW_ATTRIBUTE10;
   END IF;



   IF (C2.OLD_ATTRIBUTE11 IS NULL AND C2.NEW_ATTRIBUTE11 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE11 IS NOT NULL AND C2.NEW_ATTRIBUTE11 IS NULL)
   OR (C2.OLD_ATTRIBUTE11 <> C2.NEW_ATTRIBUTE11) THEN
        x_instance_rec.ATTRIBUTE11 := C2.NEW_ATTRIBUTE11;
   END IF;

   IF (C2.OLD_ATTRIBUTE12 IS NULL AND C2.NEW_ATTRIBUTE12 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE12 IS NOT NULL AND C2.NEW_ATTRIBUTE12 IS NULL)
   OR (C2.OLD_ATTRIBUTE12 <> C2.NEW_ATTRIBUTE12) THEN
        x_instance_rec.ATTRIBUTE12 := C2.NEW_ATTRIBUTE12;
   END IF;


   IF (C2.OLD_ATTRIBUTE13 IS NULL AND C2.NEW_ATTRIBUTE13 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE13 IS NOT NULL AND C2.NEW_ATTRIBUTE13 IS NULL)
   OR (C2.OLD_ATTRIBUTE13 <> C2.NEW_ATTRIBUTE13) THEN
        x_instance_rec.ATTRIBUTE13 := C2.NEW_ATTRIBUTE13;
   END IF;


   IF (C2.OLD_ATTRIBUTE14 IS NULL AND C2.NEW_ATTRIBUTE14 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE14 IS NOT NULL AND C2.NEW_ATTRIBUTE14 IS NULL)
   OR (C2.OLD_ATTRIBUTE14 <> C2.NEW_ATTRIBUTE14) THEN
        x_instance_rec.ATTRIBUTE14 := C2.NEW_ATTRIBUTE14;
   END IF;

   IF (C2.OLD_ATTRIBUTE15 IS NULL AND C2.NEW_ATTRIBUTE15 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE15 IS NOT NULL AND C2.NEW_ATTRIBUTE15 IS NULL)
   OR (C2.OLD_ATTRIBUTE15 <> C2.NEW_ATTRIBUTE15) THEN
        x_instance_rec.ATTRIBUTE15 := C2.NEW_ATTRIBUTE15;
   END IF;

   IF (C2.OLD_INST_LOC_TYPE_CODE IS NULL AND C2.NEW_INST_LOC_TYPE_CODE IS NOT NULL)
   OR (C2.OLD_INST_LOC_TYPE_CODE IS NOT NULL AND C2.NEW_INST_LOC_TYPE_CODE IS NULL)
   OR (C2.OLD_INST_LOC_TYPE_CODE <> C2.NEW_INST_LOC_TYPE_CODE) THEN
        x_instance_rec.INSTALL_LOCATION_TYPE_CODE := C2.NEW_INST_LOC_TYPE_CODE;
   END IF;

   IF (C2.OLD_INST_LOC_ID IS NULL AND C2.NEW_INST_LOC_ID IS NOT NULL)
   OR (C2.OLD_INST_LOC_ID IS NOT NULL AND C2.NEW_INST_LOC_ID IS NULL)
   OR (C2.OLD_INST_LOC_ID <> C2.NEW_INST_LOC_ID) THEN
        x_instance_rec.INSTALL_LOCATION_ID := C2.NEW_INST_LOC_ID;
   END IF;

   IF (C2.OLD_INST_USAGE_CODE IS NULL AND C2.NEW_INST_USAGE_CODE IS NOT NULL)
   OR (C2.OLD_INST_USAGE_CODE IS NOT NULL AND C2.NEW_INST_USAGE_CODE IS NULL)
   OR (C2.OLD_INST_USAGE_CODE <> C2.NEW_INST_USAGE_CODE) THEN
        x_instance_rec.INSTANCE_USAGE_CODE := C2.NEW_INST_USAGE_CODE;
   END IF;

   IF (C2.OLD_LAST_VLD_ORGANIZATION_ID IS NULL AND C2.NEW_LAST_VLD_ORGANIZATION_ID IS NOT NULL)
   OR (C2.OLD_LAST_VLD_ORGANIZATION_ID IS NOT NULL AND C2.NEW_LAST_VLD_ORGANIZATION_ID IS NULL)
   OR (C2.OLD_LAST_VLD_ORGANIZATION_ID <> C2.NEW_LAST_VLD_ORGANIZATION_ID) THEN
        x_instance_rec.VLD_ORGANIZATION_ID := C2.NEW_LAST_VLD_ORGANIZATION_ID;
   END IF;

   IF (C2.OLD_OE_AGREEMENT_ID IS NULL AND C2.NEW_OE_AGREEMENT_ID IS NOT NULL)
   OR (C2.OLD_OE_AGREEMENT_ID IS NOT NULL AND C2.NEW_OE_AGREEMENT_ID IS NULL)
   OR (C2.OLD_OE_AGREEMENT_ID <> C2.NEW_OE_AGREEMENT_ID) THEN
        x_instance_rec.LAST_OE_AGREEMENT_ID := C2.NEW_OE_AGREEMENT_ID;
   END IF;

   IF (C2.OLD_LAST_OE_ORDER_LINE_ID IS NULL AND C2.NEW_LAST_OE_ORDER_LINE_ID IS NOT NULL)
   OR (C2.OLD_LAST_OE_ORDER_LINE_ID IS NOT NULL AND C2.NEW_LAST_OE_ORDER_LINE_ID IS NULL)
   OR (C2.OLD_LAST_OE_ORDER_LINE_ID <> C2.NEW_LAST_OE_ORDER_LINE_ID) THEN
        x_instance_rec.LAST_OE_ORDER_LINE_ID := C2.NEW_LAST_OE_ORDER_LINE_ID;
   END IF;

   IF (C2.OLD_LAST_OE_RMA_LINE_ID IS NULL AND C2.NEW_LAST_OE_RMA_LINE_ID IS NOT NULL)
   OR (C2.OLD_LAST_OE_RMA_LINE_ID IS NOT NULL AND C2.NEW_LAST_OE_RMA_LINE_ID IS NULL)
   OR (C2.OLD_LAST_OE_RMA_LINE_ID <> C2.NEW_LAST_OE_RMA_LINE_ID) THEN
        x_instance_rec.LAST_OE_RMA_LINE_ID := C2.NEW_LAST_OE_RMA_LINE_ID;
   END IF;

   IF (C2.OLD_LAST_WIP_JOB_ID IS NULL AND C2.NEW_LAST_WIP_JOB_ID IS NOT NULL)
   OR (C2.OLD_LAST_WIP_JOB_ID IS NOT NULL AND C2.NEW_LAST_WIP_JOB_ID IS NULL)
   OR (C2.OLD_LAST_WIP_JOB_ID <> C2.NEW_LAST_WIP_JOB_ID) THEN
        x_instance_rec.LAST_WIP_JOB_ID := C2.NEW_LAST_WIP_JOB_ID;
   END IF;

   IF (C2.OLD_LAST_PO_PO_LINE_ID IS NULL AND C2.NEW_LAST_PO_PO_LINE_ID IS NOT NULL)
   OR (C2.OLD_LAST_PO_PO_LINE_ID IS NOT NULL AND C2.NEW_LAST_PO_PO_LINE_ID IS NULL)
   OR (C2.OLD_LAST_PO_PO_LINE_ID <> C2.NEW_LAST_PO_PO_LINE_ID) THEN
        x_instance_rec.LAST_PO_PO_LINE_ID := C2.NEW_LAST_PO_PO_LINE_ID;
   END IF;

   IF (C2.OLD_LAST_PA_PROJECT_ID IS NULL AND C2.NEW_LAST_PA_PROJECT_ID IS NOT NULL)
   OR (C2.OLD_LAST_PA_PROJECT_ID IS NOT NULL AND C2.NEW_LAST_PA_PROJECT_ID IS NULL)
   OR (C2.OLD_LAST_PA_PROJECT_ID <> C2.NEW_LAST_PA_PROJECT_ID) THEN
        x_instance_rec.LAST_PA_PROJECT_ID := C2.NEW_LAST_PA_PROJECT_ID;
   END IF;

   IF (C2.OLD_LAST_PA_TASK_ID IS NULL AND C2.NEW_LAST_PA_TASK_ID IS NOT NULL)
   OR (C2.OLD_LAST_PA_TASK_ID IS NOT NULL AND C2.NEW_LAST_PA_TASK_ID IS NULL)
   OR (C2.OLD_LAST_PA_TASK_ID <> C2.NEW_LAST_PA_TASK_ID) THEN
        x_instance_rec.LAST_PA_TASK_ID := C2.NEW_LAST_PA_TASK_ID;
   END IF;

   IF (C2.OLD_LAST_TXN_LINE_DETAIL_ID IS NULL AND C2.NEW_LAST_TXN_LINE_DETAIL_ID IS NOT NULL)
   OR (C2.OLD_LAST_TXN_LINE_DETAIL_ID IS NOT NULL AND C2.NEW_LAST_TXN_LINE_DETAIL_ID IS NULL)
   OR (C2.OLD_LAST_TXN_LINE_DETAIL_ID <> C2.NEW_LAST_TXN_LINE_DETAIL_ID) THEN
        x_instance_rec.LAST_TXN_LINE_DETAIL_ID := C2.NEW_LAST_TXN_LINE_DETAIL_ID;
   END IF;

   IF (C2.OLD_LAST_OE_PO_NUMBER IS NULL AND C2.NEW_LAST_OE_PO_NUMBER IS NOT NULL)
   OR (C2.OLD_LAST_OE_PO_NUMBER IS NOT NULL AND C2.NEW_LAST_OE_PO_NUMBER IS NULL)
   OR (C2.OLD_LAST_OE_PO_NUMBER <> C2.NEW_LAST_OE_PO_NUMBER) THEN
        x_instance_rec.LAST_OE_PO_NUMBER := C2.NEW_LAST_OE_PO_NUMBER;
   END IF;

  -- sguthiva added for att enhancements
   IF (C2.OLD_CONFIG_INST_REV_NUM IS NULL AND C2.NEW_CONFIG_INST_REV_NUM IS NOT NULL)
   OR (C2.OLD_CONFIG_INST_REV_NUM IS NOT NULL AND C2.NEW_CONFIG_INST_REV_NUM IS NULL)
   OR (C2.OLD_CONFIG_INST_REV_NUM <> C2.NEW_CONFIG_INST_REV_NUM) THEN
        x_instance_rec.CONFIG_INST_REV_NUM := C2.NEW_CONFIG_INST_REV_NUM;
   END IF;

   IF (C2.OLD_CONFIG_VALID_STATUS IS NULL AND C2.NEW_CONFIG_VALID_STATUS IS NOT NULL)
   OR (C2.OLD_CONFIG_VALID_STATUS IS NOT NULL AND C2.NEW_CONFIG_VALID_STATUS IS NULL)
   OR (C2.OLD_CONFIG_VALID_STATUS <> C2.NEW_CONFIG_VALID_STATUS) THEN
        x_instance_rec.CONFIG_VALID_STATUS := C2.NEW_CONFIG_VALID_STATUS;
   END IF;

   IF (C2.OLD_INSTANCE_DESCRIPTION IS NULL AND C2.NEW_INSTANCE_DESCRIPTION IS NOT NULL)
   OR (C2.OLD_INSTANCE_DESCRIPTION IS NOT NULL AND C2.NEW_INSTANCE_DESCRIPTION IS NULL)
   OR (C2.OLD_INSTANCE_DESCRIPTION <> C2.NEW_INSTANCE_DESCRIPTION) THEN
        x_instance_rec.INSTANCE_DESCRIPTION := C2.NEW_INSTANCE_DESCRIPTION;
   END IF;
  -- End of addition

  --start of code for eam integration--
   IF (C2.OLD_NETWORK_ASSET_FLAG IS NULL AND C2.NEW_NETWORK_ASSET_FLAG IS NOT NULL)
   OR (C2.OLD_NETWORK_ASSET_FLAG IS NOT NULL AND C2.NEW_NETWORK_ASSET_FLAG IS NULL)
   OR (C2.OLD_NETWORK_ASSET_FLAG <> C2.NEW_NETWORK_ASSET_FLAG) THEN
        x_instance_rec.NETWORK_ASSET_FLAG := C2.NEW_NETWORK_ASSET_FLAG;
   END IF;

   IF (C2.OLD_MAINTAINABLE_FLAG IS NULL AND C2.NEW_MAINTAINABLE_FLAG IS NOT NULL)
   OR (C2.OLD_MAINTAINABLE_FLAG IS NOT NULL AND C2.NEW_MAINTAINABLE_FLAG IS NULL)
   OR (C2.OLD_MAINTAINABLE_FLAG <> C2.NEW_MAINTAINABLE_FLAG) THEN
        x_instance_rec.MAINTAINABLE_FLAG := C2.NEW_MAINTAINABLE_FLAG;
   END IF;

   IF (C2.OLD_PN_LOCATION_ID IS NULL AND C2.NEW_PN_LOCATION_ID IS NOT NULL)
   OR (C2.OLD_PN_LOCATION_ID IS NOT NULL AND C2.NEW_PN_LOCATION_ID IS NULL)
   OR (C2.OLD_PN_LOCATION_ID <> C2.NEW_PN_LOCATION_ID) THEN
        x_instance_rec.PN_LOCATION_ID := C2.NEW_PN_LOCATION_ID;
   END IF;

   IF (C2.OLD_ASSET_CRITICALITY_CODE IS NULL AND C2.NEW_ASSET_CRITICALITY_CODE IS NOT NULL)
   OR (C2.OLD_ASSET_CRITICALITY_CODE IS NOT NULL AND C2.NEW_ASSET_CRITICALITY_CODE IS NULL)
   OR (C2.OLD_ASSET_CRITICALITY_CODE <> C2.NEW_ASSET_CRITICALITY_CODE) THEN
        x_instance_rec.ASSET_CRITICALITY_CODE := C2.NEW_ASSET_CRITICALITY_CODE;
   END IF;

   IF (C2.OLD_CATEGORY_ID IS NULL AND C2.NEW_CATEGORY_ID IS NOT NULL)
   OR (C2.OLD_CATEGORY_ID IS NOT NULL AND C2.NEW_CATEGORY_ID IS NULL)
   OR (C2.OLD_CATEGORY_ID <> C2.NEW_CATEGORY_ID) THEN
        x_instance_rec.CATEGORY_ID := C2.NEW_CATEGORY_ID;
   END IF;

   IF (C2.OLD_EQUIPMENT_GEN_OBJECT_ID IS NULL AND C2.NEW_EQUIPMENT_GEN_OBJECT_ID IS NOT NULL)
   OR (C2.OLD_EQUIPMENT_GEN_OBJECT_ID IS NOT NULL AND C2.NEW_EQUIPMENT_GEN_OBJECT_ID IS NULL)
   OR (C2.OLD_EQUIPMENT_GEN_OBJECT_ID <> C2.NEW_EQUIPMENT_GEN_OBJECT_ID) THEN
        x_instance_rec.EQUIPMENT_GEN_OBJECT_ID := C2.NEW_EQUIPMENT_GEN_OBJECT_ID;
   END IF;

   IF (C2.OLD_INSTANTIATION_FLAG IS NULL AND C2.NEW_INSTANTIATION_FLAG IS NOT NULL)
   OR (C2.OLD_INSTANTIATION_FLAG IS NOT NULL AND C2.NEW_INSTANTIATION_FLAG IS NULL)
   OR (C2.OLD_INSTANTIATION_FLAG <> C2.NEW_INSTANTIATION_FLAG) THEN
        x_instance_rec.INSTANTIATION_FLAG := C2.NEW_INSTANTIATION_FLAG;
   END IF;

   IF (C2.OLD_LINEAR_LOCATION_ID IS NULL AND C2.NEW_LINEAR_LOCATION_ID IS NOT NULL)
   OR (C2.OLD_LINEAR_LOCATION_ID IS NOT NULL AND C2.NEW_LINEAR_LOCATION_ID IS NULL)
   OR (C2.OLD_LINEAR_LOCATION_ID <> C2.NEW_LINEAR_LOCATION_ID) THEN
        x_instance_rec.LINEAR_LOCATION_ID := C2.NEW_LINEAR_LOCATION_ID;
   END IF;

   IF (C2.OLD_OPERATIONAL_LOG_FLAG IS NULL AND C2.NEW_OPERATIONAL_LOG_FLAG IS NOT NULL)
   OR (C2.OLD_OPERATIONAL_LOG_FLAG IS NOT NULL AND C2.NEW_OPERATIONAL_LOG_FLAG IS NULL)
   OR (C2.OLD_OPERATIONAL_LOG_FLAG <> C2.NEW_OPERATIONAL_LOG_FLAG) THEN
        x_instance_rec.OPERATIONAL_LOG_FLAG := C2.NEW_OPERATIONAL_LOG_FLAG;
   END IF;

   IF (C2.OLD_CHECKIN_STATUS IS NULL AND C2.NEW_CHECKIN_STATUS IS NOT NULL)
   OR (C2.OLD_CHECKIN_STATUS IS NOT NULL AND C2.NEW_CHECKIN_STATUS IS NULL)
   OR (C2.OLD_CHECKIN_STATUS <> C2.NEW_CHECKIN_STATUS) THEN
        x_instance_rec.CHECKIN_STATUS := C2.NEW_CHECKIN_STATUS;
   END IF;

   IF (C2.OLD_SUPPLIER_WARRANTY_EXP_DATE IS NULL AND C2.NEW_SUPPLIER_WARRANTY_EXP_DATE IS NOT NULL)
   OR (C2.OLD_SUPPLIER_WARRANTY_EXP_DATE IS NOT NULL AND C2.NEW_SUPPLIER_WARRANTY_EXP_DATE IS NULL)
   OR (C2.OLD_SUPPLIER_WARRANTY_EXP_DATE <> C2.NEW_SUPPLIER_WARRANTY_EXP_DATE) THEN
        x_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := C2.NEW_SUPPLIER_WARRANTY_EXP_DATE;
   END IF;

   IF (C2.OLD_ATTRIBUTE16 IS NULL AND C2.NEW_ATTRIBUTE16 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE16 IS NOT NULL AND C2.NEW_ATTRIBUTE16 IS NULL)
   OR (C2.OLD_ATTRIBUTE16 <> C2.NEW_ATTRIBUTE16) THEN
        x_instance_rec.ATTRIBUTE16 := C2.NEW_ATTRIBUTE16;
   END IF;

   IF (C2.OLD_ATTRIBUTE17 IS NULL AND C2.NEW_ATTRIBUTE17 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE17 IS NOT NULL AND C2.NEW_ATTRIBUTE17 IS NULL)
   OR (C2.OLD_ATTRIBUTE17 <> C2.NEW_ATTRIBUTE17) THEN
        x_instance_rec.ATTRIBUTE17 := C2.NEW_ATTRIBUTE17;
   END IF;

   IF (C2.OLD_ATTRIBUTE18 IS NULL AND C2.NEW_ATTRIBUTE18 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE18 IS NOT NULL AND C2.NEW_ATTRIBUTE18 IS NULL)
   OR (C2.OLD_ATTRIBUTE18 <> C2.NEW_ATTRIBUTE18) THEN
        x_instance_rec.ATTRIBUTE18 := C2.NEW_ATTRIBUTE18;
   END IF;

   IF (C2.OLD_ATTRIBUTE19 IS NULL AND C2.NEW_ATTRIBUTE19 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE19 IS NOT NULL AND C2.NEW_ATTRIBUTE19 IS NULL)
   OR (C2.OLD_ATTRIBUTE19 <> C2.NEW_ATTRIBUTE19) THEN
        x_instance_rec.ATTRIBUTE19 := C2.NEW_ATTRIBUTE19;
   END IF;

   IF (C2.OLD_ATTRIBUTE20 IS NULL AND C2.NEW_ATTRIBUTE20 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE20 IS NOT NULL AND C2.NEW_ATTRIBUTE20 IS NULL)
   OR (C2.OLD_ATTRIBUTE20 <> C2.NEW_ATTRIBUTE20) THEN
        x_instance_rec.ATTRIBUTE20 := C2.NEW_ATTRIBUTE20;
   END IF;

   IF (C2.OLD_ATTRIBUTE21 IS NULL AND C2.NEW_ATTRIBUTE21 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE21 IS NOT NULL AND C2.NEW_ATTRIBUTE21 IS NULL)
   OR (C2.OLD_ATTRIBUTE21 <> C2.NEW_ATTRIBUTE21) THEN
        x_instance_rec.ATTRIBUTE21 := C2.NEW_ATTRIBUTE21;
   END IF;

   IF (C2.OLD_ATTRIBUTE22 IS NULL AND C2.NEW_ATTRIBUTE22 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE22 IS NOT NULL AND C2.NEW_ATTRIBUTE22 IS NULL)
   OR (C2.OLD_ATTRIBUTE22 <> C2.NEW_ATTRIBUTE22) THEN
        x_instance_rec.ATTRIBUTE22 := C2.NEW_ATTRIBUTE22;
   END IF;

   IF (C2.OLD_ATTRIBUTE23 IS NULL AND C2.NEW_ATTRIBUTE23 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE23 IS NOT NULL AND C2.NEW_ATTRIBUTE23 IS NULL)
   OR (C2.OLD_ATTRIBUTE23 <> C2.NEW_ATTRIBUTE23) THEN
        x_instance_rec.ATTRIBUTE23 := C2.NEW_ATTRIBUTE23;
   END IF;

   IF (C2.OLD_ATTRIBUTE24 IS NULL AND C2.NEW_ATTRIBUTE24 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE24 IS NOT NULL AND C2.NEW_ATTRIBUTE24 IS NULL)
   OR (C2.OLD_ATTRIBUTE24 <> C2.NEW_ATTRIBUTE24) THEN
        x_instance_rec.ATTRIBUTE24 := C2.NEW_ATTRIBUTE24;
   END IF;

   IF (C2.OLD_ATTRIBUTE25 IS NULL AND C2.NEW_ATTRIBUTE25 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE25 IS NOT NULL AND C2.NEW_ATTRIBUTE25 IS NULL)
   OR (C2.OLD_ATTRIBUTE25 <> C2.NEW_ATTRIBUTE25) THEN
        x_instance_rec.ATTRIBUTE25 := C2.NEW_ATTRIBUTE25;
   END IF;

   IF (C2.OLD_ATTRIBUTE26 IS NULL AND C2.NEW_ATTRIBUTE26 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE26 IS NOT NULL AND C2.NEW_ATTRIBUTE26 IS NULL)
   OR (C2.OLD_ATTRIBUTE26 <> C2.NEW_ATTRIBUTE26) THEN
        x_instance_rec.ATTRIBUTE26 := C2.NEW_ATTRIBUTE26;
   END IF;

   IF (C2.OLD_ATTRIBUTE27 IS NULL AND C2.NEW_ATTRIBUTE27 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE27 IS NOT NULL AND C2.NEW_ATTRIBUTE27 IS NULL)
   OR (C2.OLD_ATTRIBUTE27 <> C2.NEW_ATTRIBUTE27) THEN
        x_instance_rec.ATTRIBUTE27 := C2.NEW_ATTRIBUTE27;
   END IF;

   IF (C2.OLD_ATTRIBUTE28 IS NULL AND C2.NEW_ATTRIBUTE28 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE28 IS NOT NULL AND C2.NEW_ATTRIBUTE28 IS NULL)
   OR (C2.OLD_ATTRIBUTE28 <> C2.NEW_ATTRIBUTE28) THEN
        x_instance_rec.ATTRIBUTE28 := C2.NEW_ATTRIBUTE28;
   END IF;

   IF (C2.OLD_ATTRIBUTE29 IS NULL AND C2.NEW_ATTRIBUTE29 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE29 IS NOT NULL AND C2.NEW_ATTRIBUTE29 IS NULL)
   OR (C2.OLD_ATTRIBUTE29 <> C2.NEW_ATTRIBUTE29) THEN
        x_instance_rec.ATTRIBUTE29 := C2.NEW_ATTRIBUTE29;
   END IF;

   IF (C2.OLD_ATTRIBUTE30 IS NULL AND C2.NEW_ATTRIBUTE30 IS NOT NULL)
   OR (C2.OLD_ATTRIBUTE30 IS NOT NULL AND C2.NEW_ATTRIBUTE30 IS NULL)
   OR (C2.OLD_ATTRIBUTE30 <> C2.NEW_ATTRIBUTE30) THEN
        x_instance_rec.ATTRIBUTE30 := C2.NEW_ATTRIBUTE30;
   END IF;
  --end of code for eam integration--

  -- Addition of columns for FA Integration
   IF (C2.OLD_PURCHASE_UNIT_PRICE IS NULL AND C2.NEW_PURCHASE_UNIT_PRICE IS NOT NULL)
   OR (C2.OLD_PURCHASE_UNIT_PRICE IS NOT NULL AND C2.NEW_PURCHASE_UNIT_PRICE IS NULL)
   OR (C2.OLD_PURCHASE_UNIT_PRICE <> C2.NEW_PURCHASE_UNIT_PRICE) THEN
        x_instance_rec.PURCHASE_UNIT_PRICE := C2.NEW_PURCHASE_UNIT_PRICE;
   END IF;

   IF (C2.OLD_PURCHASE_CURRENCY_CODE IS NULL AND C2.NEW_PURCHASE_CURRENCY_CODE IS NOT NULL)
   OR (C2.OLD_PURCHASE_CURRENCY_CODE IS NOT NULL AND C2.NEW_PURCHASE_CURRENCY_CODE IS NULL)
   OR (C2.OLD_PURCHASE_CURRENCY_CODE <> C2.NEW_PURCHASE_CURRENCY_CODE) THEN
        x_instance_rec.PURCHASE_CURRENCY_CODE := C2.NEW_PURCHASE_CURRENCY_CODE;
   END IF;

   IF (C2.OLD_PAYABLES_UNIT_PRICE IS NULL AND C2.NEW_PAYABLES_UNIT_PRICE IS NOT NULL)
   OR (C2.OLD_PAYABLES_UNIT_PRICE IS NOT NULL AND C2.NEW_PAYABLES_UNIT_PRICE IS NULL)
   OR (C2.OLD_PAYABLES_UNIT_PRICE <> C2.NEW_PAYABLES_UNIT_PRICE) THEN
        x_instance_rec.PAYABLES_UNIT_PRICE := C2.NEW_PAYABLES_UNIT_PRICE;
   END IF;

   IF (C2.OLD_PAYABLES_CURRENCY_CODE IS NULL AND C2.NEW_PAYABLES_CURRENCY_CODE IS NOT NULL)
   OR (C2.OLD_PAYABLES_CURRENCY_CODE IS NOT NULL AND C2.NEW_PAYABLES_CURRENCY_CODE IS NULL)
   OR (C2.OLD_PAYABLES_CURRENCY_CODE <> C2.NEW_PAYABLES_CURRENCY_CODE) THEN
        x_instance_rec.PAYABLES_CURRENCY_CODE := C2.NEW_PAYABLES_CURRENCY_CODE;
   END IF;

   IF (C2.OLD_SALES_UNIT_PRICE IS NULL AND C2.NEW_SALES_UNIT_PRICE IS NOT NULL)
   OR (C2.OLD_SALES_UNIT_PRICE IS NOT NULL AND C2.NEW_SALES_UNIT_PRICE IS NULL)
   OR (C2.OLD_SALES_UNIT_PRICE <> C2.NEW_SALES_UNIT_PRICE) THEN
        x_instance_rec.SALES_UNIT_PRICE := C2.NEW_SALES_UNIT_PRICE;
   END IF;

   IF (C2.OLD_SALES_CURRENCY_CODE IS NULL AND C2.NEW_SALES_CURRENCY_CODE IS NOT NULL)
   OR (C2.OLD_SALES_CURRENCY_CODE IS NOT NULL AND C2.NEW_SALES_CURRENCY_CODE IS NULL)
   OR (C2.OLD_SALES_CURRENCY_CODE <> C2.NEW_SALES_CURRENCY_CODE) THEN
        x_instance_rec.SALES_CURRENCY_CODE := C2.NEW_SALES_CURRENCY_CODE;
   END IF;

   IF (C2.OLD_OPERATIONAL_STATUS_CODE IS NULL AND C2.NEW_OPERATIONAL_STATUS_CODE IS NOT NULL)
   OR (C2.OLD_OPERATIONAL_STATUS_CODE IS NOT NULL AND C2.NEW_OPERATIONAL_STATUS_CODE IS NULL)
   OR (C2.OLD_OPERATIONAL_STATUS_CODE <> C2.NEW_OPERATIONAL_STATUS_CODE) THEN
        x_instance_rec.OPERATIONAL_STATUS_CODE := C2.NEW_OPERATIONAL_STATUS_CODE;
   END IF;

  -- End addition of columns for FA Integration

  END LOOP;

  IF x_instance_rec.location_type_code IN ('WIP', 'PROJECT','IN_TRANSIT','PO','INTERNAL_SITE')
     AND
     nvl(x_instance_rec.location_id, fnd_api.g_miss_num) = fnd_api.g_miss_num
  THEN
       BEGIN
        SELECT location_id
          INTO x_instance_rec.location_id
          FROM hr_all_organization_units
         WHERE organization_id = x_instance_rec.vld_organization_id;
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
          fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
          fnd_message.set_token('ORGANIZATION_ID',x_instance_rec.vld_organization_id);
          fnd_msg_pub.ADD;
          RAISE fnd_api.g_exc_error;
       END;
    END IF;

END Construct_inst_from_hist;

/*-------------------------------------------------------*/
/* Procedure name:  Construct_inst_header_rec            */
/* Description   :  This procedure defines the columns   */
/*                  for the Dynamic SQL                  */
/*-------------------------------------------------------*/
-- srramakr Bug # 2636868. Instead of using IN p_instance_id_list, we use = p_inst_id. This
-- is to avoid large memory usage in the SGA.
PROCEDURE Construct_inst_header_rec
(
  p_inst_id                 IN   NUMBER,
  x_instance_header_tbl     IN OUT NOCOPY  csi_datastructures_pub.instance_header_tbl
  ) IS

l_inst_header_cursor_id  INTEGER;
l_rows_processed         NUMBER;
l_instance_header_rec    csi_datastructures_pub.instance_header_rec;
l_count                  NUMBER := 0;

l_select_stmt  VARCHAR2(2000) := ' select instance_id, instance_number, external_reference, '||
                ' inventory_item_id ,inventory_revision ,inv_master_organization_id, '||
                ' serial_number ,mfg_serial_number_flag, lot_number, quantity,unit_of_measure ,'||
                ' accounting_class_code, instance_condition_id, instance_status_id,customer_view_flag, '||
                ' merchant_view_flag, sellable_flag, system_id, instance_type_code ,active_start_date, '||
                ' active_end_date, location_type_code ,location_id, inv_organization_id, inv_subinventory_name, '||
                ' inv_locator_id, pa_project_id, pa_project_task_id, in_transit_order_line_id, '||
                ' wip_job_id, po_order_line_id ,last_oe_order_line_id, last_oe_rma_line_id , '||
                ' last_po_po_line_id, last_oe_po_number, last_wip_job_id, last_pa_project_id, '||
                ' last_pa_task_id, last_oe_agreement_id, install_date, manually_created_flag, '||
                ' return_by_date, actual_return_date, creation_complete_flag, completeness_flag, '||
                ' context, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, '||
                ' attribute7, attribute8, attribute9, attribute10, attribute11, attribute12, attribute13, '||
                ' attribute14, attribute15, object_version_number, last_txn_line_detail_id, '||
                ' install_location_type_code, install_location_id, instance_usage_code, last_vld_organization_id, '||
                ' config_inst_hdr_id, config_inst_rev_num, config_inst_item_id, '||
                ' config_valid_status, instance_description, '||
                --start of code for eam integration columns--
                ' network_asset_flag, maintainable_flag, pn_location_id, asset_criticality_code, '||
                ' category_id, equipment_gen_object_id, instantiation_flag, linear_location_id, '||
                ' operational_log_flag, checkin_status, supplier_warranty_exp_date, attribute16, '||
                ' attribute17, attribute18, attribute19, attribute20, attribute21, attribute22, attribute23, '||
                ' attribute24, attribute25, attribute26, attribute27, attribute28, attribute29, attribute30, '||
                --end of code for eam integration columns--
                -- Addition of columns for FA Integration
                ' purchase_unit_price, purchase_currency_code, payables_unit_price, payables_currency_code, '||
                ' sales_unit_price, sales_currency_code, operational_status_code '||
                -- End addition of columns for FA Integration
                ' from csi_item_instances where instance_id = :l_inst_id';

BEGIN

-- Open the cursor
l_inst_header_cursor_id := dbms_sql.open_cursor;

-- Parse the select statement
dbms_sql.parse(l_inst_header_cursor_id, l_select_stmt , dbms_sql.native);
dbms_sql.bind_variable(l_inst_header_cursor_id,':l_inst_id',p_inst_id);

-- define columns
dbms_sql.define_column(l_inst_header_cursor_id, 1, l_instance_header_rec.instance_id);
dbms_sql.define_column(l_inst_header_cursor_id, 2, l_instance_header_rec.instance_number,30);
dbms_sql.define_column(l_inst_header_cursor_id, 3, l_instance_header_rec.external_reference,30);
dbms_sql.define_column(l_inst_header_cursor_id, 4, l_instance_header_rec.inventory_item_id);
dbms_sql.define_column(l_inst_header_cursor_id, 5, l_instance_header_rec.inventory_revision,30);
dbms_sql.define_column(l_inst_header_cursor_id, 6, l_instance_header_rec.inv_master_organization_id);
dbms_sql.define_column(l_inst_header_cursor_id, 7, l_instance_header_rec.serial_number,30);
dbms_sql.define_column(l_inst_header_cursor_id, 8, l_instance_header_rec.mfg_serial_number_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 9, l_instance_header_rec.lot_number,80);
dbms_sql.define_column(l_inst_header_cursor_id, 10, l_instance_header_rec.quantity);
dbms_sql.define_column(l_inst_header_cursor_id, 11, l_instance_header_rec.unit_of_measure,3);
dbms_sql.define_column(l_inst_header_cursor_id, 12, l_instance_header_rec.accounting_class_code,10);
dbms_sql.define_column(l_inst_header_cursor_id, 13, l_instance_header_rec.instance_condition_id);
dbms_sql.define_column(l_inst_header_cursor_id, 14, l_instance_header_rec.instance_status_id);
dbms_sql.define_column(l_inst_header_cursor_id, 15, l_instance_header_rec.customer_view_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 16, l_instance_header_rec.merchant_view_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 17, l_instance_header_rec.sellable_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 18, l_instance_header_rec.system_id);
dbms_sql.define_column(l_inst_header_cursor_id, 19, l_instance_header_rec.instance_type_code,30);
dbms_sql.define_column(l_inst_header_cursor_id, 20, l_instance_header_rec.active_start_date);
dbms_sql.define_column(l_inst_header_cursor_id, 21, l_instance_header_rec.active_end_date);
dbms_sql.define_column(l_inst_header_cursor_id, 22, l_instance_header_rec.location_type_code,30);
dbms_sql.define_column(l_inst_header_cursor_id, 23, l_instance_header_rec.location_id);
dbms_sql.define_column(l_inst_header_cursor_id, 24, l_instance_header_rec.inv_organization_id);
dbms_sql.define_column(l_inst_header_cursor_id, 25, l_instance_header_rec.inv_subinventory_name,30);
dbms_sql.define_column(l_inst_header_cursor_id, 26, l_instance_header_rec.inv_locator_id);
dbms_sql.define_column(l_inst_header_cursor_id, 27, l_instance_header_rec.pa_project_id);
dbms_sql.define_column(l_inst_header_cursor_id, 28, l_instance_header_rec.pa_project_task_id);
dbms_sql.define_column(l_inst_header_cursor_id, 29, l_instance_header_rec.in_transit_order_line_id);
dbms_sql.define_column(l_inst_header_cursor_id, 30, l_instance_header_rec.wip_job_id);
dbms_sql.define_column(l_inst_header_cursor_id, 31, l_instance_header_rec.po_order_line_id);
dbms_sql.define_column(l_inst_header_cursor_id, 32, l_instance_header_rec.last_oe_order_line_id);
dbms_sql.define_column(l_inst_header_cursor_id, 33, l_instance_header_rec.last_oe_rma_line_id);
dbms_sql.define_column(l_inst_header_cursor_id, 34, l_instance_header_rec.last_po_po_line_id);
dbms_sql.define_column(l_inst_header_cursor_id, 35, l_instance_header_rec.last_oe_po_number,30);
dbms_sql.define_column(l_inst_header_cursor_id, 36, l_instance_header_rec.last_wip_job_id);
dbms_sql.define_column(l_inst_header_cursor_id, 37, l_instance_header_rec.last_pa_project_id);
dbms_sql.define_column(l_inst_header_cursor_id, 38, l_instance_header_rec.last_pa_task_id);
dbms_sql.define_column(l_inst_header_cursor_id, 39, l_instance_header_rec.last_oe_agreement_id);
dbms_sql.define_column(l_inst_header_cursor_id, 40, l_instance_header_rec.install_date);
dbms_sql.define_column(l_inst_header_cursor_id, 41, l_instance_header_rec.manually_created_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 42, l_instance_header_rec.return_by_date);
dbms_sql.define_column(l_inst_header_cursor_id, 43, l_instance_header_rec.actual_return_date);
dbms_sql.define_column(l_inst_header_cursor_id, 44, l_instance_header_rec.creation_complete_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 45, l_instance_header_rec.completeness_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 46, l_instance_header_rec.context,30);
dbms_sql.define_column(l_inst_header_cursor_id, 47, l_instance_header_rec.attribute1,150);
dbms_sql.define_column(l_inst_header_cursor_id, 48, l_instance_header_rec.attribute2,150);
dbms_sql.define_column(l_inst_header_cursor_id, 49, l_instance_header_rec.attribute3,150);
dbms_sql.define_column(l_inst_header_cursor_id, 50, l_instance_header_rec.attribute4,150);
dbms_sql.define_column(l_inst_header_cursor_id, 51, l_instance_header_rec.attribute5,150);
dbms_sql.define_column(l_inst_header_cursor_id, 52, l_instance_header_rec.attribute6,150);
dbms_sql.define_column(l_inst_header_cursor_id, 53, l_instance_header_rec.attribute7,150);
dbms_sql.define_column(l_inst_header_cursor_id, 54, l_instance_header_rec.attribute8,150);
dbms_sql.define_column(l_inst_header_cursor_id, 55, l_instance_header_rec.attribute9,150);
dbms_sql.define_column(l_inst_header_cursor_id, 56, l_instance_header_rec.attribute10,150);
dbms_sql.define_column(l_inst_header_cursor_id, 57, l_instance_header_rec.attribute11,150);
dbms_sql.define_column(l_inst_header_cursor_id, 58, l_instance_header_rec.attribute12,150);
dbms_sql.define_column(l_inst_header_cursor_id, 59, l_instance_header_rec.attribute13,150);
dbms_sql.define_column(l_inst_header_cursor_id, 60, l_instance_header_rec.attribute14,150);
dbms_sql.define_column(l_inst_header_cursor_id, 61, l_instance_header_rec.attribute15,150);
dbms_sql.define_column(l_inst_header_cursor_id, 62, l_instance_header_rec.object_version_number);
dbms_sql.define_column(l_inst_header_cursor_id, 63, l_instance_header_rec.last_txn_line_detail_id);
dbms_sql.define_column(l_inst_header_cursor_id, 64, l_instance_header_rec.install_location_type_code,30);
dbms_sql.define_column(l_inst_header_cursor_id, 65, l_instance_header_rec.install_location_id);
dbms_sql.define_column(l_inst_header_cursor_id, 66, l_instance_header_rec.instance_usage_code,30);
dbms_sql.define_column(l_inst_header_cursor_id, 67, l_instance_header_rec.vld_organization_id);
-- following code has been added by sguthiva for att enhancements
dbms_sql.define_column(l_inst_header_cursor_id, 68, l_instance_header_rec.config_inst_hdr_id);
dbms_sql.define_column(l_inst_header_cursor_id, 69, l_instance_header_rec.config_inst_rev_num);
dbms_sql.define_column(l_inst_header_cursor_id, 70, l_instance_header_rec.config_inst_item_id);
dbms_sql.define_column(l_inst_header_cursor_id, 71, l_instance_header_rec.config_valid_status,30);
dbms_sql.define_column(l_inst_header_cursor_id, 72, l_instance_header_rec.instance_description,240);
-- end of addition

--start of code for eam integration columns--
dbms_sql.define_column(l_inst_header_cursor_id, 73, l_instance_header_rec.network_asset_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 74, l_instance_header_rec.maintainable_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 75, l_instance_header_rec.pn_location_id);
dbms_sql.define_column(l_inst_header_cursor_id, 76, l_instance_header_rec.asset_criticality_code,30);
dbms_sql.define_column(l_inst_header_cursor_id, 77, l_instance_header_rec.category_id);
dbms_sql.define_column(l_inst_header_cursor_id, 78, l_instance_header_rec.equipment_gen_object_id);
dbms_sql.define_column(l_inst_header_cursor_id, 79, l_instance_header_rec.instantiation_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 80, l_instance_header_rec.linear_location_id);
dbms_sql.define_column(l_inst_header_cursor_id, 81, l_instance_header_rec.operational_log_flag,1);
dbms_sql.define_column(l_inst_header_cursor_id, 82, l_instance_header_rec.checkin_status);
dbms_sql.define_column(l_inst_header_cursor_id, 83, l_instance_header_rec.supplier_warranty_exp_date);
dbms_sql.define_column(l_inst_header_cursor_id, 84, l_instance_header_rec.attribute16,240);
dbms_sql.define_column(l_inst_header_cursor_id, 85, l_instance_header_rec.attribute17,240);
dbms_sql.define_column(l_inst_header_cursor_id, 86, l_instance_header_rec.attribute18,240);
dbms_sql.define_column(l_inst_header_cursor_id, 87, l_instance_header_rec.attribute19,240);
dbms_sql.define_column(l_inst_header_cursor_id, 88, l_instance_header_rec.attribute20,240);
dbms_sql.define_column(l_inst_header_cursor_id, 89, l_instance_header_rec.attribute21,240);
dbms_sql.define_column(l_inst_header_cursor_id, 90, l_instance_header_rec.attribute22,240);
dbms_sql.define_column(l_inst_header_cursor_id, 91, l_instance_header_rec.attribute23,240);
dbms_sql.define_column(l_inst_header_cursor_id, 92, l_instance_header_rec.attribute24,240);
dbms_sql.define_column(l_inst_header_cursor_id, 93, l_instance_header_rec.attribute25,240);
dbms_sql.define_column(l_inst_header_cursor_id, 94, l_instance_header_rec.attribute26,240);
dbms_sql.define_column(l_inst_header_cursor_id, 95, l_instance_header_rec.attribute27,240);
dbms_sql.define_column(l_inst_header_cursor_id, 96, l_instance_header_rec.attribute28,240);
dbms_sql.define_column(l_inst_header_cursor_id, 97, l_instance_header_rec.attribute29,240);
dbms_sql.define_column(l_inst_header_cursor_id, 98, l_instance_header_rec.attribute30,240);
--end of code for eam integration columns--

-- Addition of columns for FA Integration
dbms_sql.define_column(l_inst_header_cursor_id, 99, l_instance_header_rec.purchase_unit_price);
dbms_sql.define_column(l_inst_header_cursor_id, 100, l_instance_header_rec.purchase_currency_code,15);
dbms_sql.define_column(l_inst_header_cursor_id, 101, l_instance_header_rec.payables_unit_price);
dbms_sql.define_column(l_inst_header_cursor_id, 102, l_instance_header_rec.payables_currency_code,15);
dbms_sql.define_column(l_inst_header_cursor_id, 103, l_instance_header_rec.sales_unit_price);
dbms_sql.define_column(l_inst_header_cursor_id, 104, l_instance_header_rec.sales_currency_code,15);
dbms_sql.define_column(l_inst_header_cursor_id, 105, l_instance_header_rec.operational_status_code,30);
-- End addition of columns for FA Integration
-- Execute the query
l_rows_processed := dbms_sql.execute(l_inst_header_cursor_id);

LOOP
  EXIT WHEN DBMS_SQL.FETCH_ROWS(l_inst_header_cursor_id) = 0;
  -- get the values
  l_count := x_instance_header_tbl.count + 1 ;

dbms_sql.column_value(l_inst_header_cursor_id, 1, x_instance_header_tbl(l_count).instance_id);
dbms_sql.column_value(l_inst_header_cursor_id, 2, x_instance_header_tbl(l_count).instance_number);
dbms_sql.column_value(l_inst_header_cursor_id, 3, x_instance_header_tbl(l_count).external_reference);
dbms_sql.column_value(l_inst_header_cursor_id, 4, x_instance_header_tbl(l_count).inventory_item_id);
dbms_sql.column_value(l_inst_header_cursor_id, 5, x_instance_header_tbl(l_count).inventory_revision);
dbms_sql.column_value(l_inst_header_cursor_id, 6, x_instance_header_tbl(l_count).inv_master_organization_id);
dbms_sql.column_value(l_inst_header_cursor_id, 7, x_instance_header_tbl(l_count).serial_number);
dbms_sql.column_value(l_inst_header_cursor_id, 8, x_instance_header_tbl(l_count).mfg_serial_number_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 9, x_instance_header_tbl(l_count).lot_number);
dbms_sql.column_value(l_inst_header_cursor_id, 10, x_instance_header_tbl(l_count).quantity);
dbms_sql.column_value(l_inst_header_cursor_id, 11, x_instance_header_tbl(l_count).unit_of_measure);
dbms_sql.column_value(l_inst_header_cursor_id, 12, x_instance_header_tbl(l_count).accounting_class_code);
dbms_sql.column_value(l_inst_header_cursor_id, 13, x_instance_header_tbl(l_count).instance_condition_id);
dbms_sql.column_value(l_inst_header_cursor_id, 14, x_instance_header_tbl(l_count).instance_status_id);
dbms_sql.column_value(l_inst_header_cursor_id, 15, x_instance_header_tbl(l_count).customer_view_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 16, x_instance_header_tbl(l_count).merchant_view_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 17, x_instance_header_tbl(l_count).sellable_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 18, x_instance_header_tbl(l_count).system_id);
dbms_sql.column_value(l_inst_header_cursor_id, 19, x_instance_header_tbl(l_count).instance_type_code);
dbms_sql.column_value(l_inst_header_cursor_id, 20, x_instance_header_tbl(l_count).active_start_date);
dbms_sql.column_value(l_inst_header_cursor_id, 21, x_instance_header_tbl(l_count).active_end_date);
dbms_sql.column_value(l_inst_header_cursor_id, 22, x_instance_header_tbl(l_count).location_type_code);
dbms_sql.column_value(l_inst_header_cursor_id, 23, x_instance_header_tbl(l_count).location_id);
dbms_sql.column_value(l_inst_header_cursor_id, 24, x_instance_header_tbl(l_count).inv_organization_id);
dbms_sql.column_value(l_inst_header_cursor_id, 25, x_instance_header_tbl(l_count).inv_subinventory_name);
dbms_sql.column_value(l_inst_header_cursor_id, 26, x_instance_header_tbl(l_count).inv_locator_id);
dbms_sql.column_value(l_inst_header_cursor_id, 27, x_instance_header_tbl(l_count).pa_project_id);
dbms_sql.column_value(l_inst_header_cursor_id, 28, x_instance_header_tbl(l_count).pa_project_task_id);
dbms_sql.column_value(l_inst_header_cursor_id, 29, x_instance_header_tbl(l_count).in_transit_order_line_id);
dbms_sql.column_value(l_inst_header_cursor_id, 30, x_instance_header_tbl(l_count).wip_job_id);
dbms_sql.column_value(l_inst_header_cursor_id, 31, x_instance_header_tbl(l_count).po_order_line_id);
dbms_sql.column_value(l_inst_header_cursor_id, 32, x_instance_header_tbl(l_count).last_oe_order_line_id);
dbms_sql.column_value(l_inst_header_cursor_id, 33, x_instance_header_tbl(l_count).last_oe_rma_line_id);
dbms_sql.column_value(l_inst_header_cursor_id, 34, x_instance_header_tbl(l_count).last_po_po_line_id);
dbms_sql.column_value(l_inst_header_cursor_id, 35, x_instance_header_tbl(l_count).last_oe_po_number);
dbms_sql.column_value(l_inst_header_cursor_id, 36, x_instance_header_tbl(l_count).last_wip_job_id);
dbms_sql.column_value(l_inst_header_cursor_id, 37, x_instance_header_tbl(l_count).last_pa_project_id);
dbms_sql.column_value(l_inst_header_cursor_id, 38, x_instance_header_tbl(l_count).last_pa_task_id);
dbms_sql.column_value(l_inst_header_cursor_id, 39, x_instance_header_tbl(l_count).last_oe_agreement_id);
dbms_sql.column_value(l_inst_header_cursor_id, 40, x_instance_header_tbl(l_count).install_date);
dbms_sql.column_value(l_inst_header_cursor_id, 41, x_instance_header_tbl(l_count).manually_created_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 42, x_instance_header_tbl(l_count).return_by_date);
dbms_sql.column_value(l_inst_header_cursor_id, 43, x_instance_header_tbl(l_count).actual_return_date);
dbms_sql.column_value(l_inst_header_cursor_id, 44, x_instance_header_tbl(l_count).creation_complete_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 45, x_instance_header_tbl(l_count).completeness_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 46, x_instance_header_tbl(l_count).context);
dbms_sql.column_value(l_inst_header_cursor_id, 47, x_instance_header_tbl(l_count).attribute1);
dbms_sql.column_value(l_inst_header_cursor_id, 48, x_instance_header_tbl(l_count).attribute2);
dbms_sql.column_value(l_inst_header_cursor_id, 49, x_instance_header_tbl(l_count).attribute3);
dbms_sql.column_value(l_inst_header_cursor_id, 50, x_instance_header_tbl(l_count).attribute4);
dbms_sql.column_value(l_inst_header_cursor_id, 51, x_instance_header_tbl(l_count).attribute5);
dbms_sql.column_value(l_inst_header_cursor_id, 52, x_instance_header_tbl(l_count).attribute6);
dbms_sql.column_value(l_inst_header_cursor_id, 53, x_instance_header_tbl(l_count).attribute7);
dbms_sql.column_value(l_inst_header_cursor_id, 54, x_instance_header_tbl(l_count).attribute8);
dbms_sql.column_value(l_inst_header_cursor_id, 55, x_instance_header_tbl(l_count).attribute9);
dbms_sql.column_value(l_inst_header_cursor_id, 56, x_instance_header_tbl(l_count).attribute10);
dbms_sql.column_value(l_inst_header_cursor_id, 57, x_instance_header_tbl(l_count).attribute11);
dbms_sql.column_value(l_inst_header_cursor_id, 58, x_instance_header_tbl(l_count).attribute12);
dbms_sql.column_value(l_inst_header_cursor_id, 59, x_instance_header_tbl(l_count).attribute13);
dbms_sql.column_value(l_inst_header_cursor_id, 60, x_instance_header_tbl(l_count).attribute14);
dbms_sql.column_value(l_inst_header_cursor_id, 61, x_instance_header_tbl(l_count).attribute15);
dbms_sql.column_value(l_inst_header_cursor_id, 62, x_instance_header_tbl(l_count).object_version_number);
dbms_sql.column_value(l_inst_header_cursor_id, 63, x_instance_header_tbl(l_count).last_txn_line_detail_id);
dbms_sql.column_value(l_inst_header_cursor_id, 64, x_instance_header_tbl(l_count).install_location_type_code);
dbms_sql.column_value(l_inst_header_cursor_id, 65, x_instance_header_tbl(l_count).install_location_id);
dbms_sql.column_value(l_inst_header_cursor_id, 66, x_instance_header_tbl(l_count).instance_usage_code);
dbms_sql.column_value(l_inst_header_cursor_id, 67, x_instance_header_tbl(l_count).vld_organization_id);
-- following code has been added by sguthiva for att enhancements
dbms_sql.column_value(l_inst_header_cursor_id, 68, x_instance_header_tbl(l_count).config_inst_hdr_id);
dbms_sql.column_value(l_inst_header_cursor_id, 69, x_instance_header_tbl(l_count).config_inst_rev_num);
dbms_sql.column_value(l_inst_header_cursor_id, 70, x_instance_header_tbl(l_count).config_inst_item_id);
dbms_sql.column_value(l_inst_header_cursor_id, 71, x_instance_header_tbl(l_count).config_valid_status);
dbms_sql.column_value(l_inst_header_cursor_id, 72, x_instance_header_tbl(l_count).instance_description);
-- end of code addition

--start of code for eam integration columns--
dbms_sql.column_value(l_inst_header_cursor_id, 73, x_instance_header_tbl(l_count).network_asset_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 74, x_instance_header_tbl(l_count).maintainable_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 75, x_instance_header_tbl(l_count).pn_location_id);
dbms_sql.column_value(l_inst_header_cursor_id, 76, x_instance_header_tbl(l_count).asset_criticality_code);
dbms_sql.column_value(l_inst_header_cursor_id, 77, x_instance_header_tbl(l_count).category_id);
dbms_sql.column_value(l_inst_header_cursor_id, 78, x_instance_header_tbl(l_count).equipment_gen_object_id);
dbms_sql.column_value(l_inst_header_cursor_id, 79, x_instance_header_tbl(l_count).instantiation_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 80, x_instance_header_tbl(l_count).linear_location_id);
dbms_sql.column_value(l_inst_header_cursor_id, 81, x_instance_header_tbl(l_count).operational_log_flag);
dbms_sql.column_value(l_inst_header_cursor_id, 82, x_instance_header_tbl(l_count).checkin_status);
dbms_sql.column_value(l_inst_header_cursor_id, 83, x_instance_header_tbl(l_count).supplier_warranty_exp_date);
dbms_sql.column_value(l_inst_header_cursor_id, 84, x_instance_header_tbl(l_count).attribute16);
dbms_sql.column_value(l_inst_header_cursor_id, 85, x_instance_header_tbl(l_count).attribute17);
dbms_sql.column_value(l_inst_header_cursor_id, 86, x_instance_header_tbl(l_count).attribute18);
dbms_sql.column_value(l_inst_header_cursor_id, 87, x_instance_header_tbl(l_count).attribute19);
dbms_sql.column_value(l_inst_header_cursor_id, 88, x_instance_header_tbl(l_count).attribute20);
dbms_sql.column_value(l_inst_header_cursor_id, 89, x_instance_header_tbl(l_count).attribute21);
dbms_sql.column_value(l_inst_header_cursor_id, 90, x_instance_header_tbl(l_count).attribute22);
dbms_sql.column_value(l_inst_header_cursor_id, 91, x_instance_header_tbl(l_count).attribute23);
dbms_sql.column_value(l_inst_header_cursor_id, 92, x_instance_header_tbl(l_count).attribute24);
dbms_sql.column_value(l_inst_header_cursor_id, 93, x_instance_header_tbl(l_count).attribute25);
dbms_sql.column_value(l_inst_header_cursor_id, 94, x_instance_header_tbl(l_count).attribute26);
dbms_sql.column_value(l_inst_header_cursor_id, 95, x_instance_header_tbl(l_count).attribute27);
dbms_sql.column_value(l_inst_header_cursor_id, 96, x_instance_header_tbl(l_count).attribute28);
dbms_sql.column_value(l_inst_header_cursor_id, 97, x_instance_header_tbl(l_count).attribute29);
dbms_sql.column_value(l_inst_header_cursor_id, 98, x_instance_header_tbl(l_count).attribute30);
--end of code for eam integration columns--

-- Addition of columns for FA Integration
dbms_sql.column_value(l_inst_header_cursor_id, 99, x_instance_header_tbl(l_count).purchase_unit_price);
dbms_sql.column_value(l_inst_header_cursor_id, 100, x_instance_header_tbl(l_count).purchase_currency_code);
dbms_sql.column_value(l_inst_header_cursor_id, 101, x_instance_header_tbl(l_count).payables_unit_price);
dbms_sql.column_value(l_inst_header_cursor_id, 102, x_instance_header_tbl(l_count).payables_currency_code);
dbms_sql.column_value(l_inst_header_cursor_id, 103, x_instance_header_tbl(l_count).sales_unit_price);
dbms_sql.column_value(l_inst_header_cursor_id, 104, x_instance_header_tbl(l_count).sales_currency_code);
dbms_sql.column_value(l_inst_header_cursor_id, 105, x_instance_header_tbl(l_count).operational_status_code);
-- End addition of columns for FA Integration



END LOOP;

-- Close the cursor
DBMS_SQL.CLOSE_CURSOR(l_inst_header_cursor_id);

EXCEPTION
WHEN OTHERS THEN
   IF DBMS_SQL.IS_OPEN(l_inst_header_cursor_id) THEN
        DBMS_SQL.CLOSE_CURSOR(l_inst_header_cursor_id);
   END IF;
END Construct_inst_header_rec;

/*----------------------------------------------------------*/
/* Procedure name:  Resolve_Id_Columns                      */
/* Description   :  This procedure gets the column values   */
/*                  for the Dynamic SQL                     */
/*----------------------------------------------------------*/

PROCEDURE Resolve_id_columns
           (p_instance_header_tbl  IN OUT NOCOPY csi_datastructures_pub.instance_header_tbl)

IS

l_acct_lookup_type          VARCHAR2(30) := 'CSI_ACCOUNTING_CLASS_CODE';
l_inst_lookup_type          VARCHAR2(30) := 'CSI_INST_TYPE_CODE';
l_usage_lookup_type         VARCHAR2(30) := 'CSI_INSTANCE_USAGE_CODE';
l_op_status_lookup_type     VARCHAR2(30) := 'CSI_OPERATIONAL_STATUS_CODE'; --5154813
l_ver_label_lookup_type VARCHAR2(30) := 'CSI_INSTANCE_VERSION_LABELS';
l_yesno_lookup_type     VARCHAR2(30) := 'CSI_YES_NO'; --included for bug5211068

l_maint_organization_id     NUMBER;
l_department_id             NUMBER;
l_location_id               NUMBER;
l_gen_object_id             NUMBER;

l_vld_organization_id       NUMBER; --bug 4754569
l_inventory_item_id         NUMBER; --bug 4754569

BEGIN

   FOR tab_row in p_instance_header_tbl.FIRST ..p_instance_header_tbl.LAST
   LOOP
      IF p_instance_header_tbl.EXISTS(tab_row) THEN

         IF p_instance_header_tbl(tab_row).location_type_code = 'INVENTORY' THEN
          BEGIN
            SELECT name
            INTO   p_instance_header_tbl(tab_row).inv_organization_name
            FROM   hr_all_organization_units
            WHERE  organization_id = p_instance_header_tbl(tab_row).inv_organization_id;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;
         END IF;
         --
         IF p_instance_header_tbl(tab_row).inv_locator_id IS NOT NULL THEN
            Begin
               -- Bug 4605780. Modified the query to get Project and Task information.
               select INV_PROJECT.GET_LOCSEGS(milk.INVENTORY_LOCATION_ID,milk.organization_id) ||
                           decode(inv_project.GET_PROJECT_NUMBER(milk.SEGMENT19),'','','.'||
                                  inv_project.GET_PROJECT_NUMBER(milk.SEGMENT19)||
                                  decode(inv_project.GET_TASK_NUMBER(milk.SEGMENT20),'','','.'||
                                         inv_project.GET_TASK_NUMBER(milk.SEGMENT20) ) )
               into p_instance_header_tbl(tab_row).inv_locator_name
               from MTL_ITEM_LOCATIONS milk
               where milk.inventory_location_id = p_instance_header_tbl(tab_row).inv_locator_id;
            Exception
               when no_data_found then
                  p_instance_header_tbl(tab_row).inv_locator_name := NULL;
            End;
         END IF;
         --
         IF p_instance_header_tbl(tab_row).last_oe_agreement_id IS NOT NULL THEN
            Begin
               select name
               into p_instance_header_tbl(tab_row).last_oe_agreement_name
               from OE_AGREEMENTS
               where agreement_id = p_instance_header_tbl(tab_row).last_oe_agreement_id;
            Exception
               when no_data_found then
                  null;
            End;
         END IF;
         --
         IF p_instance_header_tbl(tab_row).location_type_code = 'HZ_LOCATIONS' THEN
          BEGIN
            SELECT
                   hzl.address1,
                   hzl.address2,
                   hzl.address3,
                   hzl.address4,
                   hzl.city,
                   hzl.state,
                   hzl.postal_code,
                   hzl.country,
                   hps.party_site_number,
                   hzp.party_name,
                   hzp.party_number
            INTO   p_instance_header_tbl(tab_row).current_loc_address1,
                   p_instance_header_tbl(tab_row).current_loc_address2,
                   p_instance_header_tbl(tab_row).current_loc_address3,
                   p_instance_header_tbl(tab_row).current_loc_address4,
                   p_instance_header_tbl(tab_row).current_loc_city,
                   p_instance_header_tbl(tab_row).current_loc_state,
                   p_instance_header_tbl(tab_row).current_loc_postal_code,
                   p_instance_header_tbl(tab_row).current_loc_country,
                   p_instance_header_tbl(tab_row).current_loc_number,
                   p_instance_header_tbl(tab_row).current_party_name,
                   p_instance_header_tbl(tab_row).current_party_number
            FROM   hz_locations hzl,
                   hz_party_sites hps,
                   hz_parties hzp
            WHERE  hzl.location_id = hps.location_id(+) --(+)added for bug 5213645
            AND    hps.party_id    = hzp.party_id(+)
            AND    hzl.location_id = p_instance_header_tbl(tab_row).location_id
            AND    rownum < 2;

          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).install_location_type_code = 'HZ_LOCATIONS' THEN
          BEGIN
            SELECT
                   hzl.address1,
                   hzl.address2,
                   hzl.address3,
                   hzl.address4,
                   hzl.city,
                   hzl.state,
                   hzl.postal_code,
                   hzl.country,
                   hps.party_site_number,
                   hzp.party_name,
                   hzp.party_number
            INTO   p_instance_header_tbl(tab_row).install_loc_address1,
                   p_instance_header_tbl(tab_row).install_loc_address2,
                   p_instance_header_tbl(tab_row).install_loc_address3,
                   p_instance_header_tbl(tab_row).install_loc_address4,
                   p_instance_header_tbl(tab_row).install_loc_city,
                   p_instance_header_tbl(tab_row).install_loc_state,
                   p_instance_header_tbl(tab_row).install_loc_postal_code,
                   p_instance_header_tbl(tab_row).install_loc_country,
                   p_instance_header_tbl(tab_row).install_loc_number,
                   p_instance_header_tbl(tab_row).install_party_name,
                   p_instance_header_tbl(tab_row).install_party_number
            FROM   hz_locations hzl,
                   hz_party_sites hps,
                   hz_parties hzp
            WHERE  hzl.location_id = hps.location_id(+) --(+)added for bug 5213645
            AND    hps.party_id    = hzp.party_id(+)
            AND    hzl.location_id = p_instance_header_tbl(tab_row).install_location_id
            AND    rownum < 2;

          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

	 IF p_instance_header_tbl(tab_row).location_type_code = 'HR_LOCATIONS' THEN
          BEGIN
            SELECT hr.address_line_1,
                   hr.address_line_2,
                   hr.address_line_3,
                   hr.town_or_city,
                   hr.region_2,
                   hr.postal_code,
                   hr.country
            INTO   p_instance_header_tbl(tab_row).current_loc_address1,
                   p_instance_header_tbl(tab_row).current_loc_address2,
                   p_instance_header_tbl(tab_row).current_loc_address3,
                   p_instance_header_tbl(tab_row).current_loc_city,
                   p_instance_header_tbl(tab_row).current_loc_state,
                   p_instance_header_tbl(tab_row).current_loc_postal_code,
                   p_instance_header_tbl(tab_row).current_loc_country
            FROM   hr_locations_all hr
            WHERE  hr.location_id = p_instance_header_tbl(tab_row).location_id;
          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         --4926773
         IF p_instance_header_tbl(tab_row).Install_location_type_code = 'HR_LOCATIONS' THEN
          BEGIN
            SELECT hr.address_line_1,
                   hr.address_line_2,
                   hr.address_line_3,
                   hr.town_or_city,
                   hr.region_2,
                   hr.postal_code,
                   hr.country
            INTO   p_instance_header_tbl(tab_row).current_loc_address1,
                   p_instance_header_tbl(tab_row).current_loc_address2,
                   p_instance_header_tbl(tab_row).current_loc_address3,
                   p_instance_header_tbl(tab_row).current_loc_city,
                   p_instance_header_tbl(tab_row).current_loc_state,
                   p_instance_header_tbl(tab_row).current_loc_postal_code,
                   p_instance_header_tbl(tab_row).current_loc_country
            FROM   hr_locations_all hr
            WHERE  hr.location_id = p_instance_header_tbl(tab_row).location_id;
          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).location_type_code = 'HZ_PARTY_SITES' THEN
          BEGIN
            SELECT
                   hzl.address1,
                   hzl.address2,
                   hzl.address3,
                   hzl.address4,
                   hzl.city,
                   hzl.state,
                   hzl.postal_code,
                   hzl.country,
                   hps.party_site_number,
                   hzp.party_name,
                   hzp.party_number
            INTO   p_instance_header_tbl(tab_row).current_loc_address1,
                   p_instance_header_tbl(tab_row).current_loc_address2,
                   p_instance_header_tbl(tab_row).current_loc_address3,
                   p_instance_header_tbl(tab_row).current_loc_address4,
                   p_instance_header_tbl(tab_row).current_loc_city,
                   p_instance_header_tbl(tab_row).current_loc_state,
                   p_instance_header_tbl(tab_row).current_loc_postal_code,
                   p_instance_header_tbl(tab_row).current_loc_country,
                   p_instance_header_tbl(tab_row).current_loc_number,
                   p_instance_header_tbl(tab_row).current_party_name,
                   p_instance_header_tbl(tab_row).current_party_number
            FROM   hz_locations hzl,
                   hz_party_sites hps,
                   hz_parties hzp
            WHERE  hps.location_id   = hzl.location_id
            AND    hps.party_id      = hzp.party_id
            AND    hps.party_site_id = p_instance_header_tbl(tab_row).location_id;

          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).install_location_type_code = 'HZ_PARTY_SITES' THEN
          BEGIN
            SELECT
                   hzl.address1,
                   hzl.address2,
                   hzl.address3,
                   hzl.address4,
                   hzl.city,
                   hzl.state,
                   hzl.postal_code,
                   hzl.country,
                   hps.party_site_number,
                   hzp.party_name,
                   hzp.party_number
            INTO   p_instance_header_tbl(tab_row).install_loc_address1,
                   p_instance_header_tbl(tab_row).install_loc_address2,
                   p_instance_header_tbl(tab_row).install_loc_address3,
                   p_instance_header_tbl(tab_row).install_loc_address4,
                   p_instance_header_tbl(tab_row).install_loc_city,
                   p_instance_header_tbl(tab_row).install_loc_state,
                   p_instance_header_tbl(tab_row).install_loc_postal_code,
                   p_instance_header_tbl(tab_row).install_loc_country,
                   p_instance_header_tbl(tab_row).install_loc_number,
                   p_instance_header_tbl(tab_row).install_party_name,
                   p_instance_header_tbl(tab_row).install_party_number
            FROM   hz_locations hzl,
                   hz_party_sites hps,
                   hz_parties hzp
            WHERE  hps.location_id   = hzl.location_id
            AND    hps.party_id      = hzp.party_id
            AND    hps.party_site_id = p_instance_header_tbl(tab_row).install_location_id;

          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).location_type_code = 'INTERNAL_SITE' THEN
          BEGIN
            SELECT hr.address_line_1,
                   hr.address_line_2,
                   hr.address_line_3,
                   hr.town_or_city,
                   hr.region_2,
                   hr.postal_code,
                   hr.country
            INTO   p_instance_header_tbl(tab_row).current_loc_address1,
                   p_instance_header_tbl(tab_row).current_loc_address2,
                   p_instance_header_tbl(tab_row).current_loc_address3,
                   p_instance_header_tbl(tab_row).current_loc_city,
                   p_instance_header_tbl(tab_row).current_loc_state,
                   p_instance_header_tbl(tab_row).current_loc_postal_code,
                   p_instance_header_tbl(tab_row).current_loc_country
            FROM   hr_locations_all hr
            WHERE  hr.location_id = p_instance_header_tbl(tab_row).location_id;
          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).install_location_type_code = 'INTERNAL_SITE' THEN
          BEGIN
            SELECT hr.address_line_1,
                   hr.address_line_2,
                   hr.address_line_3,
                   hr.town_or_city,
                   hr.region_2,
                   hr.postal_code,
                   hr.country
            INTO   p_instance_header_tbl(tab_row).install_loc_address1,
                   p_instance_header_tbl(tab_row).install_loc_address2,
                   p_instance_header_tbl(tab_row).install_loc_address3,
                   p_instance_header_tbl(tab_row).install_loc_city,
                   p_instance_header_tbl(tab_row).install_loc_state,
                   p_instance_header_tbl(tab_row).install_loc_postal_code,
                   p_instance_header_tbl(tab_row).install_loc_country
            FROM   hr_locations_all hr
            WHERE  hr.location_id = p_instance_header_tbl(tab_row).install_location_id;
          EXCEPTION
            WHEN   OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).location_type_code = 'VENDOR_SITE' THEN
          BEGIN
            SELECT
                   pvs.address_line1,
                   pvs.address_line2,
                   pvs.address_line3,
                   pvs.city,
                   pvs.state,
                   pvs.zip,
                   pvs.country
            INTO   p_instance_header_tbl(tab_row).current_loc_address1,
                   p_instance_header_tbl(tab_row).current_loc_address2,
                   p_instance_header_tbl(tab_row).current_loc_address3,
                   p_instance_header_tbl(tab_row).current_loc_city,
                   p_instance_header_tbl(tab_row).current_loc_state,
                   p_instance_header_tbl(tab_row).current_loc_postal_code,
                   p_instance_header_tbl(tab_row).current_loc_country
            FROM   po_vendor_sites_all pvs
            WHERE  pvs.vendor_site_id = p_instance_header_tbl(tab_row).location_id;
          EXCEPTION
            WHEN  OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).install_location_type_code = 'VENDOR_SITE' THEN
          BEGIN
            SELECT
                   pvs.address_line1,
                   pvs.address_line2,
                   pvs.address_line3,
                   pvs.city,
                   pvs.state,
                   pvs.zip,
                   pvs.country
            INTO   p_instance_header_tbl(tab_row).install_loc_address1,
                   p_instance_header_tbl(tab_row).install_loc_address2,
                   p_instance_header_tbl(tab_row).install_loc_address3,
                   p_instance_header_tbl(tab_row).install_loc_city,
                   p_instance_header_tbl(tab_row).install_loc_state,
                   p_instance_header_tbl(tab_row).install_loc_postal_code,
                   p_instance_header_tbl(tab_row).install_loc_country
            FROM   po_vendor_sites_all pvs
            WHERE  pvs.vendor_site_id = p_instance_header_tbl(tab_row).install_location_id;
          EXCEPTION
            WHEN  OTHERS THEN
                NULL;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).location_type_code = 'IN_TRANSIT' THEN
          BEGIN
            SELECT a.order_number,
                   b.line_number
            INTO   p_instance_header_tbl(tab_row).in_transit_order_number,
                   p_instance_header_tbl(tab_row).in_transit_order_line_number
            FROM   oe_order_headers_all a, oe_order_lines_all b
            WHERE  a.header_id = b.header_id
            AND    b.line_id   = p_instance_header_tbl(tab_row).in_transit_order_line_id;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;
         END IF;

         IF p_instance_header_tbl(tab_row).location_type_code = 'PROJECT' THEN
          BEGIN
            SELECT a.name,
                   a.segment1,
                   b.task_name,
                   b.task_number
            INTO   p_instance_header_tbl(tab_row).pa_project_name,
                   p_instance_header_tbl(tab_row).pa_project_number,
                   p_instance_header_tbl(tab_row).pa_task_name,
                   p_instance_header_tbl(tab_row).pa_task_number
            FROM   pa_projects_all a,
                   pa_tasks b
            WHERE  a.project_id = b.project_id
            AND    b.task_id    = p_instance_header_tbl(tab_row).pa_project_task_id;
           EXCEPTION
             WHEN OTHERS THEN
               null;
           END;
          END IF;

          IF p_instance_header_tbl(tab_row).location_type_code = 'WIP' THEN
           BEGIN
             SELECT wip_entity_name
             INTO   p_instance_header_tbl(tab_row).wip_entity_name
             FROM   wip_entities
             WHERE  wip_entity_id = p_instance_header_tbl(tab_row).wip_job_id;
           EXCEPTION
             WHEN OTHERS THEN
               null;
           END;
          END IF;

	        --Changes for bug 9177957
          --Inventory Item Name
          IF p_instance_header_tbl(tab_row).inventory_item_id IS NOT NULL
          THEN
	          BEGIN
	            SELECT  msi.concatenated_segments
  	            INTO    p_instance_header_tbl(tab_row).INVENTORY_ITEM_NAME
	            FROM    mtl_system_items_b_kfv msi
		            ,csi_item_instances cii
	            WHERE   msi.inventory_item_id = p_instance_header_tbl(tab_row).inventory_item_id
	            AND     msi.organization_id = Nvl(p_instance_header_tbl(tab_row).vld_organization_id,cii.last_vld_organization_id)
	            AND     cii.instance_id = p_instance_header_tbl(tab_row).instance_id;
	          EXCEPTION
	            WHEN OTHERS THEN
	            NULL;
	          END;
          END IF;
          --End of Changes for bug 9177957

          BEGIN
            SELECT   meaning
            INTO     p_instance_header_tbl(tab_row).accounting_class
            FROM     csi_lookups
            WHERE    lookup_code = p_instance_header_tbl(tab_row).accounting_class_code
            AND      lookup_type = l_acct_lookup_type;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;

          BEGIN
            SELECT   meaning
            INTO     p_instance_header_tbl(tab_row).instance_type_name
            FROM     csi_lookups
            WHERE    lookup_code = p_instance_header_tbl(tab_row).instance_type_code
            AND      lookup_type = l_inst_lookup_type;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;

          BEGIN
            SELECT   meaning
            INTO     p_instance_header_tbl(tab_row).instance_usage_name
            FROM     csi_lookups
            WHERE    lookup_code = p_instance_header_tbl(tab_row).instance_usage_code
            AND      lookup_type = l_usage_lookup_type;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;


	   BEGIN
            SELECT   meaning
            INTO     p_instance_header_tbl(tab_row).operational_status_name
            FROM     csi_lookups
            WHERE    lookup_code = p_instance_header_tbl(tab_row).operational_status_code
            AND      lookup_type = l_op_status_lookup_type;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;

          IF p_instance_header_tbl(tab_row).version_label IS NOT NULL THEN
	     BEGIN
                SELECT   meaning
                INTO     p_instance_header_tbl(tab_row).version_label_meaning
                FROM     csi_lookups
                WHERE    lookup_code = p_instance_header_tbl(tab_row).version_label
                AND      lookup_type = l_ver_label_lookup_type;
             EXCEPTION
                WHEN OTHERS THEN
                   null;
             END;
          END IF;

          BEGIN
            SELECT   status_code
            INTO     p_instance_header_tbl(tab_row).instance_condition
            FROM     mtl_material_statuses
            WHERE    status_id = p_instance_header_tbl(tab_row).instance_condition_id;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;

          BEGIN
            SELECT   unit_of_measure
            INTO     p_instance_header_tbl(tab_row).unit_of_measure_name
            FROM     mtl_units_of_measure_vl
            WHERE    uom_code = p_instance_header_tbl(tab_row).unit_of_measure;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;


          BEGIN
            SELECT   name
            INTO     p_instance_header_tbl(tab_row).instance_status
            FROM     csi_instance_statuses
            WHERE    instance_status_id = p_instance_header_tbl(tab_row).instance_status_id;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;

          BEGIN
            SELECT   name
            INTO     p_instance_header_tbl(tab_row).system_name
            FROM     csi_systems_vl
            WHERE    system_id = p_instance_header_tbl(tab_row).system_id;
          EXCEPTION
            WHEN OTHERS THEN
              null;
          END;

          IF ( (p_instance_header_tbl(tab_row).vld_organization_id IS NOT NULL) AND
               (p_instance_header_tbl(tab_row).vld_organization_id <> FND_API.G_MISS_NUM) ) THEN
             BEGIN
                l_vld_organization_id := p_instance_header_tbl(tab_row).vld_organization_id; --bug4754569

		SELECT name
                INTO   p_instance_header_tbl(tab_row).vld_organization_name
                FROM   hr_all_organization_units
                WHERE  organization_id = p_instance_header_tbl(tab_row).vld_organization_id;
             EXCEPTION
                WHEN OTHERS THEN
                   null;
             END;
          --start of code for bug 4754569--
          ELSE
            --To get the vld_organization_id from csi_item_instances--
            BEGIN
              SELECT last_vld_organization_id
              INTO l_vld_organization_id
              FROM csi_item_instances
              WHERE instance_id = p_instance_header_tbl(tab_row).instance_id;
            EXCEPTION
              WHEN OTHERS THEN
               NULL;
             END;

          END IF;

          IF ( (p_instance_header_tbl(tab_row).inventory_item_id IS NOT NULL) AND
               (p_instance_header_tbl(tab_row).inventory_item_id <> FND_API.G_MISS_NUM) ) THEN
            l_inventory_item_id:=p_instance_header_tbl(tab_row).inventory_item_id;
          ELSE
          --To get the inventory_item_id from csi_item_instances--
            BEGIN
              SELECT inventory_item_id
              INTO l_inventory_item_id
              FROM csi_item_instances
              WHERE instance_id = p_instance_header_tbl(tab_row).instance_id;
            EXCEPTION
              WHEN OTHERS THEN
               NULL;
            END;
          END IF;
          --end of code for bug 4754569--

          IF csi_item_instance_vld_pvt.Check_for_eam_item
               (p_inventory_item_id  => l_inventory_item_id,
                p_organization_id    => l_vld_organization_id)--bug 4754569
           THEN
              l_maint_organization_id  := NULL;
              l_department_id          := NULL;
              l_location_id            := NULL;
              l_gen_object_id          := NULL;
             -- Maintenance organization
               BEGIN
                SELECT maint_organization_id
                  INTO l_maint_organization_id
                  FROM mtl_parameters
                 WHERE organization_id = p_instance_header_tbl(tab_row).vld_organization_id;
               EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                  NULL;
               END;

               IF l_maint_organization_id IS NOT NULL
               THEN
                BEGIN
                 SELECT organization_code
                   INTO p_instance_header_tbl(tab_row).maintenance_organization
                   FROM mtl_parameters
                  WHERE organization_id = l_maint_organization_id;
                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                   NULL;
                END;
               END IF;

             -- Department
               BEGIN
                SELECT owning_department_id
                      ,area_id
                  INTO l_department_id
                      ,l_location_id
                  FROM eam_org_maint_defaults
                 WHERE object_type = 50
                   AND object_id   = p_instance_header_tbl(tab_row).instance_id;
               -- Defining when others as constraints were not defined in eam schema
               -- for the eam_org_maint_defaults table.
               EXCEPTION
                WHEN OTHERS THEN
                 NULL;
               END ;

               BEGIN
                IF l_department_id IS NOT NULL
                THEN
                 SELECT department_code
                   INTO p_instance_header_tbl(tab_row).department
                   FROM bom_departments
                  WHERE department_id = l_department_id;
                END IF;
               EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                  NULL;
               END;

             -- Area
               IF l_location_id IS NOT NULL
               THEN
                BEGIN
                 SELECT location_codes
                   INTO p_instance_header_tbl(tab_row).area
                   FROM mtl_eam_locations
                  WHERE location_id = l_location_id;
                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                  NULL;
                END;
               END IF;

             -- Wip_accounting_class
               IF l_maint_organization_id IS NOT NULL
               THEN
                BEGIN
                 SELECT class_code
                   INTO p_instance_header_tbl(tab_row).wip_accounting_class
                   FROM wip_accounting_classes
                  WHERE organization_id = l_maint_organization_id
                    AND class_type = 6
                    AND sysdate <= nvl(disable_date, sysdate)
                    AND ROWNUM=1;
                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                  NULL;
                END;
               END IF;

             -- Parent_asset_number
                BEGIN
                 SELECT msn.gen_object_id
                   INTO l_gen_object_id
                   FROM mtl_serial_numbers msn
                       ,csi_item_instances cii
                  WHERE msn.inventory_item_id = cii.inventory_item_id
                    AND msn.serial_number = cii.serial_number
                    AND cii.instance_id = p_instance_header_tbl(tab_row).instance_id;
                EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                  NULL;
                END;

               IF l_gen_object_id IS NOT NULL
               THEN
                BEGIN
                 SELECT msi.concatenated_segments
                       ,cii.instance_number
                   INTO p_instance_header_tbl(tab_row).parent_asset_group
                       ,p_instance_header_tbl(tab_row).parent_asset_number
                   FROM mtl_system_items_b_kfv msi
                       ,mtl_serial_numbers msn
                       ,csi_item_instances cii
                       ,mtl_object_genealogy mog
                  WHERE msn.gen_object_id= mog.parent_object_id
                    AND mog.object_id = l_gen_object_id
                    AND mog.genealogy_type =5
                    AND (sysdate BETWEEN mog.start_date_active AND nvl(mog.end_date_active,sysdate))
                    AND msi.inventory_item_id = msn.inventory_item_id
                    AND msi.organization_id= cii.last_vld_organization_id
                    AND msn.inventory_item_id=cii.inventory_item_id
                    AND msn.serial_number=cii.serial_number;
                EXCEPTION
                 WHEN OTHERS THEN
                  NULL;
                END;
               END IF;

               IF p_instance_header_tbl(tab_row).asset_criticality_code IS NOT NULL AND
                  p_instance_header_tbl(tab_row).asset_criticality_code <> fnd_api.g_miss_char
               THEN
                BEGIN
                 SELECT meaning
                   INTO p_instance_header_tbl(tab_row).criticality
                   FROM mfg_lookups
                  WHERE lookup_code = p_instance_header_tbl(tab_row).asset_criticality_code
                    AND lookup_type = 'MTL_EAM_ASSET_CRITICALITY';
                EXCEPTION
                  WHEN OTHERS THEN
                    NULL;
                END;
               END IF;

               IF p_instance_header_tbl(tab_row).category_id IS NOT NULL AND
                  p_instance_header_tbl(tab_row).category_id <> fnd_api.g_miss_num
               THEN
                BEGIN
                 SELECT concatenated_segments
                   INTO p_instance_header_tbl(tab_row).category_name
                   FROM mtl_categories_kfv
                  WHERE category_id=p_instance_header_tbl(tab_row).category_id;
                EXCEPTION
                  WHEN OTHERS THEN
                    NULL;
                END;
               END IF;

	       --included for bug 5211068
               IF p_instance_header_tbl(tab_row).maintainable_flag IS NOT NULL AND
                  p_instance_header_tbl(tab_row).maintainable_flag <> fnd_api.g_miss_char
               THEN
		BEGIN
                    SELECT meaning
                    INTO p_instance_header_tbl(tab_row).maintainable
                    FROM csi_lookups
                    WHERE lookup_code = DECODE(p_instance_header_tbl(tab_row).maintainable_flag,'Y','YES','N','NO')
                    AND lookup_type = l_yesno_lookup_type;
		EXCEPTION WHEN OTHERS THEN
                    NULL;
		END;
               END IF;

             END IF; -- <IF csi_item_instance_vld_pvt.Check_for_eam_item>

       END IF;
   END LOOP;
END Resolve_id_columns;


/*----------------------------------------------------------*/
/* Procedure name:  Get_Inst_Column_Values                  */
/* Description   :  This procedure gets the column values   */
/*                  for the Dynamic SQL                     */
/*----------------------------------------------------------*/

PROCEDURE Get_Inst_Column_Values
(
    p_get_inst_cursor_id      IN   NUMBER,
    x_instance_id             OUT  NOCOPY NUMBER
     ) IS

BEGIN

dbms_sql.column_value(p_get_inst_cursor_id, 1, x_instance_id);

END Get_Inst_Column_Values;


/*--------------------------------------------------------*/
/* Procedure name:  Define_Inst_Columns                   */
/* Description   :  This procedure defines the columns    */
/*                  for the Dynamic SQL                   */
/*--------------------------------------------------------*/

PROCEDURE Define_Inst_Columns
(
  p_get_inst_cursor_id      IN   NUMBER,
  p_instance_query_rec      IN   csi_datastructures_pub.instance_query_rec
  ) IS

l_instance_header_rec  csi_datastructures_pub.instance_header_rec;

BEGIN

dbms_sql.define_column(p_get_inst_cursor_id, 1, l_instance_header_rec.instance_id);

END Define_Inst_Columns;


/*---------------------------------------------------------*/
/* Procedure name:  Bind_Inst_variable                     */
/* Description :    Procedure used to generate the where   */
/*                  clause for Item Instances              */
/*---------------------------------------------------------*/

PROCEDURE Bind_Inst_variable
(
    p_instance_query_rec        IN   csi_datastructures_pub.instance_query_rec,
    p_party_query_rec           IN   csi_datastructures_pub.party_query_rec,
    p_pty_acct_query_rec        IN   csi_datastructures_pub.party_account_query_rec,
    p_transaction_id            IN   NUMBER,
    p_cur_get_inst_rel          IN   NUMBER
   ) IS
BEGIN

 IF(( p_instance_query_rec.instance_id IS NOT NULL) AND
    ( p_instance_query_rec.instance_id <> FND_API.G_MISS_NUM))  THEN

      DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':INSTANCE_ID', p_instance_query_rec.instance_id);
 END IF;

 IF( (p_instance_query_rec.inventory_item_id IS NOT NULL)
                  AND (p_instance_query_rec.inventory_item_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':INVENTORY_ITEM_ID', p_instance_query_rec.inventory_item_id);
 END IF;

 IF( (p_instance_query_rec.inventory_revision IS NOT NULL)
                  AND (p_instance_query_rec.inventory_revision <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':INVENTORY_REVISION', p_instance_query_rec.inventory_revision);
 END IF;

 IF( (p_instance_query_rec.inv_master_organization_id IS NOT NULL)
                  AND (p_instance_query_rec.inv_master_organization_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, 'INV_MASTER_ORGANIZATION_ID', p_instance_query_rec.inv_master_organization_id);
 END IF;

 IF( (p_instance_query_rec.serial_number IS NOT NULL)
                  AND (p_instance_query_rec.serial_number <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':serial_number', p_instance_query_rec.serial_number);
 END IF;

 IF( (p_instance_query_rec.lot_number IS NOT NULL)
                  AND (p_instance_query_rec.lot_number <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':lot_number', p_instance_query_rec.lot_number);
 END IF;

 IF( (p_instance_query_rec.unit_of_measure IS NOT NULL)
                  AND (p_instance_query_rec.unit_of_measure <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':unit_of_measure', p_instance_query_rec.unit_of_measure);
 END IF;

 IF( (p_instance_query_rec.instance_condition_id IS NOT NULL)
                  AND (p_instance_query_rec.instance_condition_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_condition_id', p_instance_query_rec.instance_condition_id);
 END IF;

 IF( (p_instance_query_rec.instance_status_id IS NOT NULL)
                  AND (p_instance_query_rec.instance_status_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_status_id', p_instance_query_rec.instance_status_id);
 END IF;

 IF( (p_instance_query_rec.system_id IS NOT NULL)
                  AND (p_instance_query_rec.system_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':system_id', p_instance_query_rec.system_id);
 END IF;

 IF( (p_instance_query_rec.instance_type_code IS NOT NULL)
                  AND (p_instance_query_rec.instance_type_code <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_type_code', p_instance_query_rec.instance_type_code);
 END IF;

 IF( (p_instance_query_rec.location_type_code IS NOT NULL)
                  AND (p_instance_query_rec.location_type_code <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':location_type_code', p_instance_query_rec.location_type_code);
 END IF;

 IF( (p_instance_query_rec.location_id IS NOT NULL)
                  AND (p_instance_query_rec.location_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':location_id', p_instance_query_rec.location_id);
 END IF;

 IF( (p_instance_query_rec.inv_organization_id IS NOT NULL)
                  AND (p_instance_query_rec.inv_organization_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':inv_organization_id', p_instance_query_rec.inv_organization_id);
 END IF;

 IF( (p_instance_query_rec.inv_subinventory_name IS NOT NULL)
                  AND (p_instance_query_rec.inv_subinventory_name <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':inv_subinventory_name', p_instance_query_rec.inv_subinventory_name);
 END IF;

 IF( (p_instance_query_rec.inv_locator_id IS NOT NULL)
                  AND (p_instance_query_rec.inv_locator_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':inv_locator_id', p_instance_query_rec.inv_locator_id);
 END IF;

 IF( (p_instance_query_rec.pa_project_id IS NOT NULL)
                  AND (p_instance_query_rec.pa_project_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':pa_project_id', p_instance_query_rec.pa_project_id);
 END IF;

 IF( (p_instance_query_rec.pa_project_task_id IS NOT NULL)
                  AND (p_instance_query_rec.pa_project_task_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':pa_project_task_id', p_instance_query_rec.pa_project_task_id);
 END IF;

 IF( (p_instance_query_rec.in_transit_order_line_id IS NOT NULL)
                  AND (p_instance_query_rec.in_transit_order_line_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':in_transit_order_line_id', p_instance_query_rec.in_transit_order_line_id);
 END IF;

 IF( (p_instance_query_rec.wip_job_id IS NOT NULL)
                  AND (p_instance_query_rec.wip_job_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':wip_job_id', p_instance_query_rec.wip_job_id);
 END IF;

 IF( (p_instance_query_rec.po_order_line_id IS NOT NULL)
                  AND (p_instance_query_rec.po_order_line_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':po_order_line_id', p_instance_query_rec.po_order_line_id);
 END IF;

 IF( (p_instance_query_rec.last_oe_order_line_id IS NOT NULL)
                  AND (p_instance_query_rec.last_oe_order_line_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_oe_order_line_id', p_instance_query_rec.last_oe_order_line_id);
 END IF;

 IF( (p_instance_query_rec.last_oe_rma_line_id IS NOT NULL)
                  AND (p_instance_query_rec.last_oe_rma_line_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_oe_rma_line_id', p_instance_query_rec.last_oe_rma_line_id);
 END IF;

 IF( (p_instance_query_rec.last_po_po_line_id IS NOT NULL)
                  AND (p_instance_query_rec.last_po_po_line_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_po_po_line_id', p_instance_query_rec.last_po_po_line_id);
 END IF;

 IF( (p_instance_query_rec.last_oe_po_number IS NOT NULL)
                  AND (p_instance_query_rec.last_oe_po_number <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_oe_po_number', p_instance_query_rec.last_oe_po_number);
 END IF;

 IF( (p_instance_query_rec.last_wip_job_id IS NOT NULL)
                  AND (p_instance_query_rec.last_wip_job_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_wip_job_id', p_instance_query_rec.last_wip_job_id);
 END IF;

 IF( (p_instance_query_rec.last_pa_project_id IS NOT NULL)
                  AND (p_instance_query_rec.last_pa_project_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_pa_project_id', p_instance_query_rec.last_pa_project_id);
 END IF;

 IF( (p_instance_query_rec.last_pa_task_id IS NOT NULL)
                  AND (p_instance_query_rec.last_pa_task_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_pa_task_id', p_instance_query_rec.last_pa_task_id);
 END IF;

 IF( (p_instance_query_rec.last_oe_agreement_id IS NOT NULL)
                  AND (p_instance_query_rec.last_oe_agreement_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':last_oe_agreement_id', p_instance_query_rec.last_oe_agreement_id);
 END IF;

 IF( (p_instance_query_rec.install_date IS NOT NULL)
                  AND (p_instance_query_rec.install_date <> FND_API.G_MISS_DATE))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':install_date', p_instance_query_rec.install_date);
 END IF;

 IF( (p_instance_query_rec.manually_created_flag IS NOT NULL)
                  AND (p_instance_query_rec.manually_created_flag <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':manually_created_flag', p_instance_query_rec.manually_created_flag);
 END IF;

 IF( (p_instance_query_rec.return_by_date IS NOT NULL)
                  AND (p_instance_query_rec.return_by_date <> FND_API.G_MISS_DATE))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':return_by_date', p_instance_query_rec.return_by_date);
 END IF;

 IF( (p_instance_query_rec.actual_return_date IS NOT NULL)
                  AND (p_instance_query_rec.actual_return_date <> FND_API.G_MISS_DATE))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':actual_return_date', p_instance_query_rec.actual_return_date);
 END IF;

 IF( (p_instance_query_rec.instance_usage_code IS NOT NULL)
                  AND (p_instance_query_rec.instance_usage_code <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_usage_code', p_instance_query_rec.instance_usage_code);
 END IF;

-- The following code has been added by sguthiva for att enhancements

 IF( (p_instance_query_rec.config_inst_hdr_id IS NOT NULL)
                  AND (p_instance_query_rec.config_inst_hdr_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':config_inst_hdr_id', p_instance_query_rec.config_inst_hdr_id);
 END IF;

 IF( (p_instance_query_rec.config_inst_rev_num IS NOT NULL)
                  AND (p_instance_query_rec.config_inst_rev_num <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':config_inst_rev_num', p_instance_query_rec.config_inst_rev_num);
 END IF;

 IF( (p_instance_query_rec.config_inst_item_id IS NOT NULL)
                  AND (p_instance_query_rec.config_inst_item_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':config_inst_item_id', p_instance_query_rec.config_inst_item_id);
 END IF;

 IF( (p_instance_query_rec.instance_description IS NOT NULL)
                  AND (p_instance_query_rec.instance_description <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_description', p_instance_query_rec.instance_description);
 END IF;

-- End of code addition
  -- Addition of columns for FA Integration
 IF( (p_instance_query_rec.operational_status_code IS NOT NULL)
                  AND (p_instance_query_rec.operational_status_code <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':operational_status_code', p_instance_query_rec.operational_status_code);
 END IF;
  -- End addition of columns for FA Integration
----
 IF( (p_party_query_rec.instance_party_id IS NOT NULL)
                  AND (p_party_query_rec.instance_party_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_party_id', p_party_query_rec.instance_party_id);
 END IF;

 IF( (p_party_query_rec.instance_id IS NOT NULL)
                  AND (p_party_query_rec.instance_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_id', p_party_query_rec.instance_id);
 END IF;

 IF( (p_party_query_rec.party_id IS NOT NULL)
                  AND (p_party_query_rec.party_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':party_id', p_party_query_rec.party_id);
 END IF;

 IF( (p_party_query_rec.relationship_type_code IS NOT NULL)
                  AND (p_party_query_rec.relationship_type_code <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':relationship_type_code', p_party_query_rec.relationship_type_code);
 END IF;

----
 IF( (p_pty_acct_query_rec.ip_account_id IS NOT NULL)
                  AND (p_pty_acct_query_rec.ip_account_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':ip_account_id', p_pty_acct_query_rec.ip_account_id);
 END IF;

 IF( (p_pty_acct_query_rec.instance_party_id IS NOT NULL)
                  AND (p_pty_acct_query_rec.instance_party_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':instance_party_id', p_pty_acct_query_rec.instance_party_id);
 END IF;

 IF( (p_pty_acct_query_rec.party_account_id IS NOT NULL)
                  AND (p_pty_acct_query_rec.party_account_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':party_account_id', p_pty_acct_query_rec.party_account_id);
 END IF;

 IF( (p_pty_acct_query_rec.relationship_type_code IS NOT NULL)
                  AND (p_pty_acct_query_rec.relationship_type_code <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':relationship_type_code', p_pty_acct_query_rec.relationship_type_code);
 END IF;

 IF p_transaction_id is not null then
    DBMS_SQL.BIND_VARIABLE(p_cur_get_inst_rel, ':p_transaction_id', p_transaction_id);
 END IF;
END Bind_Inst_variable;


/*-----------------------------------------------------------*/
/* Procedure name:  Gen_Inst_Where_Clause                    */
/* Description :    Procedure used to  generate the where    */
/*                  clause  for Party relationship           */
/*-----------------------------------------------------------*/

PROCEDURE Gen_Inst_Where_Clause
(
    p_instance_query_rec    IN      csi_datastructures_pub.instance_query_rec,
    p_party_query_rec       IN      csi_datastructures_pub.party_query_rec,
    p_pty_acct_query_rec    IN      csi_datastructures_pub.party_account_query_rec,
    p_transaction_id        IN      NUMBER,
    x_select_stmt           OUT     NOCOPY VARCHAR2,
    p_active_instance_only  IN      VARCHAR2
   ) IS

  l_join_condition         VARCHAR2(2000):= '';
  l_from_clause            VARCHAR2(2000):= '';
  l_select_columns         VARCHAR2(2000):= '';
  x_where_clause           VARCHAR2(2000):= '';
  l_instance_rec_exists    BOOLEAN := FALSE;
  l_party_rec_exists       BOOLEAN := FALSE;
  l_party_acct_rec_exists  BOOLEAN := FALSE;
  --Added
  l_flag                   VARCHAR2(3);
  l_inp_rec                OKS_ENTITLEMENTS_PUB.inp_cont_rec;
  x_return_status          VARCHAR2(2000);
  x_msg_count              NUMBER;
  x_msg_data               VARCHAR2(2000);
  l_ent_contracts          OKS_ENTITLEMENTS_PUB.ent_cont_tbl;
  l_msg_data               VARCHAR2(2000);
  l_msg_index              NUMBER;
  l_msg_count              NUMBER;
  l_rec_count              NUMBER:=1;
  l_row_count              NUMBER;
  l_covered_cp_id          VARCHAR2(2000) DEFAULT NULL;
  l_covered_level_code     OKC_LINE_STYLES_B.LTY_CODE%TYPE;
  l_coverage_level_id      NUMBER;
  --End Addition

  l_union_stmt             VARCHAR2(2000) := ' select instance_id  from csi_item_instances_h '||
                            ' where transaction_id = :p_transaction_id  UNION   select a.instance_id '||
                            ' from csi_i_parties a, csi_i_parties_h b where a.instance_party_id = b.instance_party_id '||
                            ' and  b.transaction_id = :p_transaction_id  UNION   select a.instance_id '||
                            ' from csi_i_assets a, csi_i_assets_h b where a.instance_asset_id = b.instance_asset_id '||
                            ' and transaction_id = :p_transaction_id UNION '||
                            ' select a.instance_id  from csi_i_parties a, csi_ip_accounts b, '||
                            ' csi_ip_accounts_h c  where a.instance_party_id = b.instance_party_id '||
                            ' and b.ip_account_id  = c.ip_account_id  and c.transaction_id = :p_transaction_id UNION '||
                            ' SELECT b.instance_id  FROM csi_iea_values_h a, csi_iea_values b '||
                            ' WHERE a.attribute_value_id = b.attribute_value_id  AND a.transaction_id = :p_transaction_id '||
                            ' UNION SELECT b.subject_id  FROM csi_ii_relationships_h a, csi_ii_relationships b '||
                            ' WHERE a.relationship_id = b.relationship_id  AND a.transaction_id  = :p_transaction_id '||
                            ' UNION SELECT a.instance_id FROM csi_i_org_assignments a, csi_i_org_assignments_h b '||
                            ' WHERE a.instance_ou_id = b.instance_ou_id and  b.transaction_id = :p_transaction_id '||
                            ' UNION SELECT a.instance_id FROM csi_i_pricing_attribs a , csi_i_pricing_attribs_h b '||
                            ' WHERE a.pricing_attribute_id = b.pricing_attribute_id and  b.transaction_id = :p_transaction_id '||
                            ' UNION SELECT a.instance_id FROM csi_i_version_labels a, csi_i_version_labels_h b '||
                            ' WHERE a.version_label_id = b.version_label_id  and b.transaction_id = :p_transaction_id '||
                            ' UNION SELECT a.instance_id FROM csi_item_instances a, csi_systems_b b, csi_systems_h c '||
                            ' WHERE a.system_id = b.system_id  and b.system_id = c.system_id and  c.transaction_id = :p_transaction_id ';


BEGIN

  IF        (p_instance_query_rec.INSTANCE_ID              <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INSTANCE_ID              IS NULL )
         OR (p_instance_query_rec.INVENTORY_ITEM_ID        <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INVENTORY_ITEM_ID        IS NULL )
         OR (p_instance_query_rec.INVENTORY_REVISION       <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.INVENTORY_REVISION       IS NULL )
         OR (p_instance_query_rec.INV_MASTER_ORGANIZATION_ID <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INV_MASTER_ORGANIZATION_ID  IS NULL )
         OR (p_instance_query_rec.SERIAL_NUMBER            <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.SERIAL_NUMBER            IS NULL )
         OR (p_instance_query_rec.LOT_NUMBER               <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.LOT_NUMBER               IS NULL )
         OR (p_instance_query_rec.UNIT_OF_MEASURE          <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.UNIT_OF_MEASURE          IS NULL )
         OR (p_instance_query_rec.INSTANCE_CONDITION_ID    <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INSTANCE_CONDITION_ID    IS NULL )
         OR (p_instance_query_rec.INSTANCE_STATUS_ID       <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INSTANCE_STATUS_ID       IS NULL )
         OR (p_instance_query_rec.SYSTEM_ID                <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.SYSTEM_ID                IS NULL )
         OR (p_instance_query_rec.INSTANCE_TYPE_CODE       <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.INSTANCE_TYPE_CODE       IS NULL )
         OR (p_instance_query_rec.LOCATION_TYPE_CODE       <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.LOCATION_TYPE_CODE       IS NULL )
         OR (p_instance_query_rec.LOCATION_ID              <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LOCATION_ID              IS NULL )
         OR (p_instance_query_rec.INV_ORGANIZATION_ID      <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INV_ORGANIZATION_ID      IS NULL )
         OR (p_instance_query_rec.INV_SUBINVENTORY_NAME    <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.INV_SUBINVENTORY_NAME    IS NULL )
         OR (p_instance_query_rec.INV_LOCATOR_ID           <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.INV_LOCATOR_ID           IS NULL )
         OR (p_instance_query_rec.PA_PROJECT_ID            <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.PA_PROJECT_ID            IS NULL )
         OR (p_instance_query_rec.PA_PROJECT_TASK_ID       <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.PA_PROJECT_TASK_ID       IS NULL )
         OR (p_instance_query_rec.IN_TRANSIT_ORDER_LINE_ID <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.IN_TRANSIT_ORDER_LINE_ID IS NULL )
         OR (p_instance_query_rec.WIP_JOB_ID               <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.WIP_JOB_ID               IS NULL )
         OR (p_instance_query_rec.PO_ORDER_LINE_ID         <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.PO_ORDER_LINE_ID         IS NULL )
         OR (p_instance_query_rec.LAST_OE_ORDER_LINE_ID    <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_OE_ORDER_LINE_ID    IS NULL )
         OR (p_instance_query_rec.LAST_OE_RMA_LINE_ID      <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_OE_RMA_LINE_ID      IS NULL )
         OR (p_instance_query_rec.LAST_PO_PO_LINE_ID       <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_PO_PO_LINE_ID       IS NULL )
         OR (p_instance_query_rec.LAST_OE_PO_NUMBER        <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.LAST_OE_PO_NUMBER        IS NULL )
         OR (p_instance_query_rec.LAST_WIP_JOB_ID          <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_WIP_JOB_ID          IS NULL )
         OR (p_instance_query_rec.LAST_PA_PROJECT_ID       <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_PA_PROJECT_ID       IS NULL )
         OR (p_instance_query_rec.LAST_PA_TASK_ID          <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_PA_TASK_ID          IS NULL )
         OR (p_instance_query_rec.LAST_OE_AGREEMENT_ID     <>  FND_API.G_MISS_NUM)
         OR (p_instance_query_rec.LAST_OE_AGREEMENT_ID     IS NULL )
         OR (p_instance_query_rec.INSTALL_DATE             <>  FND_API.G_MISS_DATE)
         OR (p_instance_query_rec.INSTALL_DATE             IS NULL )
         OR (p_instance_query_rec.MANUALLY_CREATED_FLAG    <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.MANUALLY_CREATED_FLAG    IS NULL )
         OR (p_instance_query_rec.RETURN_BY_DATE           <>  FND_API.G_MISS_DATE)
         OR (p_instance_query_rec.RETURN_BY_DATE           IS NULL )
         OR (p_instance_query_rec.ACTUAL_RETURN_DATE       <>  FND_API.G_MISS_DATE)
         OR (p_instance_query_rec.ACTUAL_RETURN_DATE       IS NULL )
         OR (p_instance_query_rec.INSTANCE_USAGE_CODE      <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.INSTANCE_USAGE_CODE      IS NULL )
         OR (p_instance_query_rec.CONTRACT_NUMBER          <>  FND_API.G_MISS_CHAR)
         OR (p_instance_query_rec.CONTRACT_NUMBER          IS NULL )
         OR (p_instance_query_rec.CONFIG_INST_HDR_ID       <>  FND_API.G_MISS_NUM) -- sguthiva added for att
         OR (p_instance_query_rec.CONFIG_INST_HDR_ID       IS NULL )
         OR (p_instance_query_rec.CONFIG_INST_REV_NUM      <>  FND_API.G_MISS_NUM) -- sguthiva added for att
         OR (p_instance_query_rec.CONFIG_INST_REV_NUM      IS NULL )
         OR (p_instance_query_rec.CONFIG_INST_ITEM_ID      <>  FND_API.G_MISS_NUM) -- sguthiva added for att
         OR (p_instance_query_rec.CONFIG_INST_ITEM_ID      IS NULL )
         OR (p_instance_query_rec.INSTANCE_DESCRIPTION     <>  FND_API.G_MISS_CHAR) -- sguthiva added for att
         OR (p_instance_query_rec.INSTANCE_DESCRIPTION     IS NULL )
         OR (p_instance_query_rec.OPERATIONAL_STATUS_CODE  <>  FND_API.G_MISS_CHAR) -- Addition of columns for FA Integration
         OR (p_instance_query_rec.OPERATIONAL_STATUS_CODE  IS NULL )
 THEN

     l_instance_rec_exists := TRUE;
     l_from_clause    := ' csi_item_instances a ';
     l_select_columns := ' a.INSTANCE_ID ';


 END IF;

 IF   (p_party_query_rec.instance_party_id  <> FND_API.G_MISS_NUM)
   OR (p_party_query_rec.instance_party_id  IS NULL )
   OR (p_party_query_rec.instance_id        <> FND_API.G_MISS_NUM)
   OR (p_party_query_rec.instance_id        IS NULL )
   OR (p_party_query_rec.party_id           <> FND_API.G_MISS_NUM)
   OR (p_party_query_rec.party_id           IS NULL )
   OR (p_party_query_rec.relationship_type_code <> FND_API.G_MISS_CHAR )
   OR (p_party_query_rec.relationship_type_code IS NULL ) THEN

   l_party_rec_exists := TRUE;
   IF l_instance_rec_exists THEN
     l_from_clause    := l_from_clause||'  , csi_i_parties b ';
     l_join_condition := ' a.instance_id = b.instance_id  ';
   ELSE
     l_from_clause    := '  csi_i_parties b ';
     l_select_columns := ' b.instance_id ';
   END IF;

END IF;

IF    (p_pty_acct_query_rec.ip_account_id     <> FND_API.G_MISS_NUM)
   OR (p_pty_acct_query_rec.ip_account_id     IS NULL )
   OR (p_pty_acct_query_rec.instance_party_id <> FND_API.G_MISS_NUM)
   OR (p_pty_acct_query_rec.instance_party_id IS NULL )
   OR (p_pty_acct_query_rec.party_account_id  <> FND_API.G_MISS_NUM)
   OR (p_pty_acct_query_rec.party_account_id  IS NULL)
   OR (p_pty_acct_query_rec.relationship_type_code  <> FND_API.G_MISS_CHAR  )
   OR (p_pty_acct_query_rec.relationship_type_code  IS NULL  ) THEN

     l_party_acct_rec_exists := TRUE;

     IF l_party_rec_exists then

        IF l_instance_rec_exists THEN
           l_from_clause  := l_from_clause||' , csi_ip_accounts c  ';
           l_join_condition := l_join_condition||' AND  b.instance_party_id = c.instance_party_id  ';

        ELSE
           l_from_clause  := l_from_clause||' , csi_ip_accounts c  ';
           l_join_condition := ' b.instance_party_id = c.instance_party_id  ';

        END IF;

     ELSE

        IF l_instance_rec_exists THEN
           l_from_clause    := l_from_clause||'  , csi_i_parties b , csi_ip_accounts c ';
           l_join_condition := ' a.instance_id = b.instance_id AND b.instance_party_id = c.instance_party_id  ';
        ELSE
           l_from_clause    := '  csi_i_parties b , csi_ip_accounts c ';
           l_join_condition := ' b.instance_party_id = c.instance_party_id  ';
           l_select_columns := ' b.instance_id ';
        END IF;

     END IF;

END IF;

IF (( p_instance_query_rec.instance_id  IS NOT NULL)  AND
                         ( p_instance_query_rec.instance_id  <> FND_API.G_MISS_NUM)) THEN
       IF x_where_clause IS NULL THEN
         x_where_clause := '  a.instance_id = :INSTANCE_ID ';
       ELSE
         x_where_clause := x_where_clause||' AND '||'  a.instance_id = :INSTANCE_ID ';
       END IF;
ELSIF ( p_instance_query_rec.instance_id  IS  NULL) THEN
       IF x_where_clause IS NULL THEN
        x_where_clause := '  a.instance_id IS NULL ';
       ELSE
        x_where_clause := x_where_clause||' AND '||'  a.instance_id IS NULL ';
       END IF;
END IF;
IF (( p_instance_query_rec.inventory_item_id  IS NOT NULL)  AND
                         ( p_instance_query_rec.inventory_item_id  <> FND_API.G_MISS_NUM)) THEN
       IF x_where_clause IS NULL THEN
        x_where_clause := ' a.inventory_item_id = :INVENTORY_ITEM_ID ';
       ELSE
        x_where_clause := x_where_clause||' AND '||' a.inventory_item_id = :INVENTORY_ITEM_ID ';
       END IF;
ELSIF ( p_instance_query_rec.inventory_item_id  IS NULL) THEN
       IF x_where_clause IS NULL THEN
         x_where_clause := ' a.inventory_item_id IS NULL ';
       ELSE
           x_where_clause := x_where_clause||' AND '||' a.inventory_item_id IS NULL ';
       END IF;
END IF;
IF (( p_instance_query_rec.inventory_revision  IS NOT NULL)  AND
             ( p_instance_query_rec.inventory_revision  <> FND_API.G_MISS_CHAR)) THEN
       IF x_where_clause IS NULL THEN
        x_where_clause := ' a.inventory_revision = :INVENTORY_REVISION ';
       ELSE
        x_where_clause := x_where_clause||' AND '||' a.inventory_revision = :INVENTORY_REVISION ';

       END IF;
ELSIF ( p_instance_query_rec.inventory_revision  IS  NULL) THEN
       IF x_where_clause IS NULL THEN
         x_where_clause := ' a.inventory_revision IS NULL ';
       ELSE
         x_where_clause := x_where_clause||' AND '||' a.inventory_revision IS NULL ';
       END IF;
END IF;
IF (( p_instance_query_rec.inv_master_organization_id  IS NOT NULL)  AND
            ( p_instance_query_rec.inv_master_organization_id  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
    x_where_clause := ' a.inv_master_organization_id = :INV_MASTER_ORGANIZATION_ID ';
   ELSE
    x_where_clause := x_where_clause||' AND '||' a.inv_master_organization_id = :INV_MASTER_ORGANIZATION_ID ';

   END IF;
ELSIF ( p_instance_query_rec.inv_master_organization_id  IS  NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := ' a.inv_master_organization_id IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.inv_master_organization_id IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.serial_number  IS NOT NULL)  AND
            ( p_instance_query_rec.serial_number  <> FND_API.G_MISS_CHAR)) THEN
    IF x_where_clause IS NULL THEN
        x_where_clause := ' a.serial_number = :serial_number ';
    ELSE
        x_where_clause := x_where_clause||' AND '||' a.serial_number = :serial_number ';
    END IF;

ELSIF ( p_instance_query_rec.serial_number  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
        x_where_clause := ' a.serial_number IS NULL ';
    ELSE
        x_where_clause := x_where_clause||' AND '||' a.serial_number IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.lot_number  IS NOT NULL)  AND
          ( p_instance_query_rec.lot_number  <> FND_API.G_MISS_CHAR)) THEN
       IF x_where_clause IS NULL THEN
         x_where_clause := ' a.lot_number = :lot_number ';
       ELSE
         x_where_clause := x_where_clause||' AND '||' a.lot_number = :lot_number ';
       END IF;

ELSIF ( p_instance_query_rec.lot_number  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.lot_number IS NULL ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.lot_number IS NULL ';

    END IF;
END IF;

IF( (p_instance_query_rec.unit_of_measure IS NOT NULL)
         AND (p_instance_query_rec.unit_of_measure <> FND_API.G_MISS_CHAR))  THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.unit_of_measure = :unit_of_measure ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' a.unit_of_measure = :unit_of_measure ';
     END IF;
ELSIF (p_instance_query_rec.unit_of_measure IS  NULL) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.unit_of_measure IS NULL ';
    ELSE
       x_where_clause := x_where_clause||' AND '||' a.unit_of_measure IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.instance_condition_id  IS NOT NULL)  AND
           ( p_instance_query_rec.instance_condition_id  <> FND_API.G_MISS_NUM)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.instance_condition_id = :instance_condition_id ';
     ELSE
         x_where_clause := x_where_clause||' AND '||' a.instance_condition_id = :instance_condition_id ';
     END IF;
ELSIF ( p_instance_query_rec.instance_condition_id  IS NULL) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.instance_condition_id IS NULL ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' a.instance_condition_id IS NULL ';
     END IF;

END IF;

IF (( p_instance_query_rec.instance_status_id  IS NOT NULL)  AND
            ( p_instance_query_rec.instance_status_id  <> FND_API.G_MISS_NUM)) THEN
      IF x_where_clause IS NULL THEN
         x_where_clause := ' a.instance_status_id = :instance_status_id ';
      ELSE
         x_where_clause := x_where_clause||' AND '||' a.instance_status_id = :instance_status_id ';
      END IF;
ELSIF ( p_instance_query_rec.instance_status_id  IS NULL) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.instance_status_id IS NULL ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.instance_status_id IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.system_id  IS NOT NULL)  AND
        ( p_instance_query_rec.system_id  <> FND_API.G_MISS_NUM)) THEN
      IF x_where_clause IS NULL THEN
         x_where_clause := ' a.system_id = :system_id ';
      ELSE
         x_where_clause := x_where_clause||' AND '||' a.system_id = :system_id ';
      END IF;

ELSIF ( p_instance_query_rec.system_id  IS NULL) THEN
   IF x_where_clause IS NULL THEN
      x_where_clause := ' a.system_id IS NULL ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.system_id IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.instance_type_code  IS NOT NULL)  AND
           ( p_instance_query_rec.instance_type_code  <> FND_API.G_MISS_CHAR)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.instance_type_code = :instance_type_code ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' a.instance_type_code = :instance_type_code ';
     END IF;
ELSIF ( p_instance_query_rec.instance_type_code  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
       x_where_clause := ' a.instance_type_code IS NULL ';
    ELSE
       x_where_clause := x_where_clause||' AND '||' a.instance_type_code IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.location_type_code  IS NOT NULL)  AND
           ( p_instance_query_rec.location_type_code  <> FND_API.G_MISS_CHAR)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.location_type_code = :location_type_code ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' a.location_type_code = :location_type_code ';
     END IF;
ELSIF ( p_instance_query_rec.location_type_code  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
       x_where_clause := ' a.location_type_code IS NULL ';
    ELSE
       x_where_clause := x_where_clause||' AND '||' a.location_type_code IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.location_id  IS NOT NULL)  AND
          ( p_instance_query_rec.location_id  <> FND_API.G_MISS_NUM)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.location_id = :location_id ';
     ELSE
         x_where_clause := x_where_clause||' AND '||' a.location_id = :location_id ';
     END IF;
ELSIF ( p_instance_query_rec.location_id  IS  NULL) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.location_id IS NULL ';
     ELSE
         x_where_clause := x_where_clause||' AND '||' a.location_id IS NULL ';
     END IF;
END IF;

IF (( p_instance_query_rec.inv_organization_id  IS NOT NULL)  AND
          ( p_instance_query_rec.inv_organization_id  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
        x_where_clause := ' a.inv_organization_id = :inv_organization_id ';
   ELSE
        x_where_clause := x_where_clause||' AND '||' a.inv_organization_id = :inv_organization_id ';
   END IF;
ELSIF ( p_instance_query_rec.inv_organization_id  IS NULL) THEN
  IF x_where_clause IS NULL THEN
     x_where_clause := ' a.inv_organization_id IS NULL ';
  ELSE
     x_where_clause := x_where_clause||' AND '||' a.inv_organization_id IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.inv_subinventory_name  IS NOT NULL)  AND
               ( p_instance_query_rec.inv_subinventory_name  <> FND_API.G_MISS_CHAR)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.inv_subinventory_name = :inv_subinventory_name ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.inv_subinventory_name = :inv_subinventory_name ';
   END IF;
ELSIF ( p_instance_query_rec.inv_subinventory_name  IS  NULL) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.inv_subinventory_name IS NULL ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.inv_subinventory_name IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.inv_locator_id  IS NOT NULL)  AND
                ( p_instance_query_rec.inv_locator_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
        x_where_clause := ' a.inv_locator_id = :inv_locator_id ';
    ELSE
        x_where_clause := x_where_clause||' AND '||' a.inv_locator_id = :inv_locator_id ';
    END IF;
ELSIF ( p_instance_query_rec.inv_locator_id  IS NULL) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.inv_locator_id IS NULL ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.inv_locator_id IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.pa_project_id  IS NOT NULL)  AND
           ( p_instance_query_rec.pa_project_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.pa_project_id = :pa_project_id ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.pa_project_id = :pa_project_id ';
    END IF;
ELSIF ( p_instance_query_rec.pa_project_id  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
       x_where_clause := ' a.pa_project_id IS NULL ';
    ELSE
       x_where_clause := x_where_clause||' AND '||' a.pa_project_id IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.pa_project_task_id  IS NOT NULL)  AND
         ( p_instance_query_rec.pa_project_task_id  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.pa_project_task_id = :pa_project_task_id ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.pa_project_task_id = :pa_project_task_id ';
   END IF;
ELSIF ( p_instance_query_rec.pa_project_task_id  IS  NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause :=  ' a.pa_project_task_id IS NULL ';
  ELSE
     x_where_clause := x_where_clause||' AND '||' a.pa_project_task_id IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.in_transit_order_line_id  IS NOT NULL)  AND
          ( p_instance_query_rec.in_transit_order_line_id  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.in_transit_order_line_id = :in_transit_order_line_id ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.in_transit_order_line_id = :in_transit_order_line_id ';
   END IF;
ELSIF ( p_instance_query_rec.in_transit_order_line_id  IS NULL) THEN
   IF x_where_clause IS NULL THEN
      x_where_clause := ' a.in_transit_order_line_id IS NULL ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.in_transit_order_line_id IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.wip_job_id  IS NOT NULL)  AND
           ( p_instance_query_rec.wip_job_id  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
      x_where_clause := ' a.wip_job_id = :wip_job_id ';
   ELSE
       x_where_clause := x_where_clause||' AND '||' a.wip_job_id = :wip_job_id ';
   END IF;
ELSIF ( p_instance_query_rec.wip_job_id  IS  NULL) THEN
   IF x_where_clause IS NULL THEN
      x_where_clause := ' a.wip_job_id IS NULL ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.wip_job_id IS NULL ';
   END IF;
END IF;
IF (( p_instance_query_rec.po_order_line_id  IS NOT NULL)  AND
           ( p_instance_query_rec.po_order_line_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
       x_where_clause := ' a.po_order_line_id = :po_order_line_id ';
    ELSE
        x_where_clause := x_where_clause||' AND '||' a.po_order_line_id = :po_order_line_id ';
    END IF;
ELSIF ( p_instance_query_rec.po_order_line_id  IS NULL) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.po_order_line_id IS NULL ';
    ELSE
       x_where_clause := x_where_clause||' AND '||' a.po_order_line_id IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.last_oe_order_line_id  IS NOT NULL)  AND
           ( p_instance_query_rec.last_oe_order_line_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.last_oe_order_line_id = :last_oe_order_line_id ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.last_oe_order_line_id = :last_oe_order_line_id ';
    END IF;
ELSIF ( p_instance_query_rec.last_oe_order_line_id  IS  NULL) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.last_oe_order_line_id IS NULL ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.last_oe_order_line_id IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.last_oe_rma_line_id  IS NOT NULL)  AND
            ( p_instance_query_rec.last_oe_rma_line_id  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.last_oe_rma_line_id = :last_oe_rma_line_id ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.last_oe_rma_line_id = :last_oe_rma_line_id ';
   END IF;
ELSIF ( p_instance_query_rec.last_oe_rma_line_id  IS NULL) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.last_oe_rma_line_id  IS NULL ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.last_oe_rma_line_id  IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.last_po_po_line_id  IS NOT NULL)  AND
          ( p_instance_query_rec.last_po_po_line_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.last_po_po_line_id = :last_po_po_line_id ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.last_po_po_line_id = :last_po_po_line_id ';
    END IF;
ELSIF ( p_instance_query_rec.last_po_po_line_id  IS NULL) THEN
  IF x_where_clause IS NULL THEN
     x_where_clause := ' a.last_po_po_line_id IS NULL  ';
  ELSE
     x_where_clause := x_where_clause||' AND '||' a.last_po_po_line_id IS NULL  ';
  END IF;
END IF;

IF (( p_instance_query_rec.last_oe_po_number  IS NOT NULL)  AND
          ( p_instance_query_rec.last_oe_po_number  <> FND_API.G_MISS_CHAR)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.last_oe_po_number = :last_oe_po_number ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.last_oe_po_number = :last_oe_po_number ';
   END IF;
ELSIF ( p_instance_query_rec.last_oe_po_number  IS NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause :=  ' a.last_oe_po_number IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.last_oe_po_number IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.last_wip_job_id  IS NOT NULL)  AND
          ( p_instance_query_rec.last_wip_job_id  <> FND_API.G_MISS_NUM)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' a.last_wip_job_id = :last_wip_job_id ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' a.last_wip_job_id = :last_wip_job_id ';
     END IF;
ELSIF ( p_instance_query_rec.last_wip_job_id  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.last_wip_job_id IS NULL ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.last_wip_job_id IS NULL ';
    END IF;
END IF;

IF (( p_instance_query_rec.last_pa_project_id  IS NOT NULL)  AND
               ( p_instance_query_rec.last_pa_project_id  <> FND_API.G_MISS_NUM)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause :=  ' a.last_pa_project_id = :last_pa_project_id ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' a.last_pa_project_id = :last_pa_project_id ';
     END IF;
ELSIF ( p_instance_query_rec.last_pa_project_id  IS  NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := ' a.last_pa_project_id IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.last_pa_project_id IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.last_pa_task_id  IS NOT NULL)  AND
           ( p_instance_query_rec.last_pa_task_id  <> FND_API.G_MISS_NUM)) THEN
  IF x_where_clause IS NULL THEN
     x_where_clause := ' a.last_pa_task_id = :last_pa_task_id ';
  ELSE
     x_where_clause := x_where_clause||' AND '||' a.last_pa_task_id = :last_pa_task_id ';
  END IF;
ELSIF ( p_instance_query_rec.last_pa_task_id  IS  NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := ' a.last_pa_task_id IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.last_pa_task_id IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.last_oe_agreement_id  IS NOT NULL)  AND
           ( p_instance_query_rec.last_oe_agreement_id  <> FND_API.G_MISS_NUM)) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := ' a.last_oe_agreement_id = :last_oe_agreement_id ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.last_oe_agreement_id = :last_oe_agreement_id ';
  END IF;
ELSIF ( p_instance_query_rec.last_oe_agreement_id  IS NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := ' a.last_oe_agreement_id IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.last_oe_agreement_id IS NULL ';
  END IF;
END IF;

IF (( p_instance_query_rec.install_date  IS NOT NULL)  AND
           ( p_instance_query_rec.install_date  <> FND_API.G_MISS_DATE)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.install_date = :install_date ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.install_date = :install_date ';
   END IF;
ELSIF ( p_instance_query_rec.install_date  IS  NULL) THEN
 IF x_where_clause IS NULL THEN
   x_where_clause := ' a.install_date IS NULL ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.install_date IS NULL ';
 END IF;
END IF;

IF (( p_instance_query_rec.manually_created_flag  IS NOT NULL)  AND
          ( p_instance_query_rec.manually_created_flag  <> FND_API.G_MISS_CHAR)) THEN
  IF x_where_clause IS NULL THEN
     x_where_clause := ' a.manually_created_flag = :manually_created_flag ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.manually_created_flag = :manually_created_flag ';
  END IF;
ELSIF ( p_instance_query_rec.manually_created_flag  IS  NULL) THEN
 IF x_where_clause IS NULL THEN
   x_where_clause := ' a.manually_created_flag IS NULL ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.manually_created_flag IS NULL ';
 END IF;
END IF;

IF (( p_instance_query_rec.return_by_date  IS NOT NULL)  AND
             ( p_instance_query_rec.return_by_date  <> FND_API.G_MISS_DATE)) THEN
 IF x_where_clause IS NULL THEN
    x_where_clause := ' a.return_by_date = :return_by_date ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.return_by_date = :return_by_date ';
 END IF;
ELSIF ( p_instance_query_rec.return_by_date  IS  NULL) THEN
 IF x_where_clause IS NULL THEN
   x_where_clause := ' a.return_by_date IS NULL ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.return_by_date IS NULL ';
 END IF;
END IF;

IF (( p_instance_query_rec.instance_usage_code  IS NOT NULL)  AND
             ( p_instance_query_rec.instance_usage_code  <> FND_API.G_MISS_CHAR)) THEN
 IF x_where_clause IS NULL THEN
    x_where_clause := ' a.instance_usage_code = :instance_usage_code ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.instance_usage_code = :instance_usage_code ';
 END IF;
ELSIF ( p_instance_query_rec.instance_usage_code  IS  NULL) THEN
 IF x_where_clause IS NULL THEN
   x_where_clause := ' a.instance_usage_code IS NULL ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.instance_usage_code IS NULL ';
 END IF;
END IF;

-- Following code has been added by sguthiva for att enhancements

IF (( p_instance_query_rec.config_inst_hdr_id  IS NOT NULL)  AND
           ( p_instance_query_rec.config_inst_hdr_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.config_inst_hdr_id = :config_inst_hdr_id ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.config_inst_hdr_id = :config_inst_hdr_id ';
    END IF;
ELSIF ( p_instance_query_rec.config_inst_hdr_id  IS  NULL) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.config_inst_hdr_id IS NULL ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.config_inst_hdr_id IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.config_inst_rev_num  IS NOT NULL)  AND
            ( p_instance_query_rec.config_inst_rev_num  <> FND_API.G_MISS_NUM)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.config_inst_rev_num = :config_inst_rev_num ';
   ELSE
      x_where_clause := x_where_clause||' AND '||' a.config_inst_rev_num = :config_inst_rev_num ';
   END IF;
ELSIF ( p_instance_query_rec.config_inst_rev_num  IS NULL) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.config_inst_rev_num  IS NULL ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.config_inst_rev_num  IS NULL ';
   END IF;
END IF;

IF (( p_instance_query_rec.config_inst_item_id  IS NOT NULL)  AND
          ( p_instance_query_rec.config_inst_item_id  <> FND_API.G_MISS_NUM)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.config_inst_item_id = :config_inst_item_id ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.config_inst_item_id = :config_inst_item_id ';
    END IF;
ELSIF ( p_instance_query_rec.config_inst_item_id  IS NULL) THEN
  IF x_where_clause IS NULL THEN
     x_where_clause := ' a.config_inst_item_id IS NULL  ';
  ELSE
     x_where_clause := x_where_clause||' AND '||' a.config_inst_item_id IS NULL  ';
  END IF;
END IF;

IF (( p_instance_query_rec.instance_description  IS NOT NULL)  AND
          ( p_instance_query_rec.instance_description  <> FND_API.G_MISS_CHAR)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.instance_description = :instance_description ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.instance_description = :instance_description ';
   END IF;
ELSIF ( p_instance_query_rec.instance_description  IS NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause :=  ' a.instance_description IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.instance_description IS NULL ';
  END IF;
END IF;

-- End of addition for att
-- Addition of columns for FA Integration
IF (( p_instance_query_rec.operational_status_code  IS NOT NULL)  AND
          ( p_instance_query_rec.operational_status_code  <> FND_API.G_MISS_CHAR)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := ' a.operational_status_code = :operational_status_code ';
   ELSE
     x_where_clause := x_where_clause||' AND '||' a.operational_status_code = :operational_status_code ';
   END IF;
ELSIF ( p_instance_query_rec.operational_status_code  IS NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause :=  ' a.operational_status_code IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' a.operational_status_code IS NULL ';
  END IF;
END IF;
-- End addition of columns for FA Integration

IF (( p_instance_query_rec.actual_return_date  IS NOT NULL)  AND
             ( p_instance_query_rec.actual_return_date  <> FND_API.G_MISS_DATE)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := ' a.actual_return_date = :actual_return_date ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' a.actual_return_date = :actual_return_date ';
    END IF;
ELSIF ( p_instance_query_rec.actual_return_date  IS  NULL) THEN
 IF x_where_clause IS NULL THEN
   x_where_clause :=  ' a.actual_return_date IS NULL ';
 ELSE
   x_where_clause := x_where_clause||' AND '||' a.actual_return_date IS NULL ';
 END IF;
END IF;

--sk added
IF (( p_instance_query_rec.contract_number  IS NOT NULL)  AND
    ( p_instance_query_rec.contract_number  <> FND_API.G_MISS_CHAR)) THEN
BEGIN
            l_flag := nvl(FND_PROFILE.VALUE('CSI_CONTRACTS_ENABLED'), 'N');
        l_inp_rec.contract_number := p_instance_query_rec.contract_number;
        l_inp_rec.party_id        := NULL;
        l_inp_rec.site_id         := NULL;
        l_inp_rec.cust_acct_id    := NULL;
        l_inp_rec.system_id       := NULL;
        l_inp_rec.item_id         := NULL;
        l_inp_rec.product_id      := NULL;
        l_inp_rec.request_date    := sysdate;
        l_inp_rec.validate_flag   := l_flag;
      OKS_ENTITLEMENTS_PUB.GET_CONTRACTS( p_api_version   => 1.0,
                                          p_init_msg_list => 'T',
                                          p_inp_rec       => l_inp_rec,
                                          x_return_status => x_return_status,
                                          x_msg_count     => x_msg_count,
                                          x_msg_data      => x_msg_data,
                                          x_ent_contracts => l_ent_contracts);

       IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
          l_msg_count := x_msg_count;
         WHILE l_msg_count > 0 LOOP
                  x_msg_data := FND_MSG_PUB.GET
                          (  l_msg_index,
                                     FND_API.G_FALSE    );
          csi_gen_utility_pvt.put_line( ' Error from OKS_ENTITLEMENTS_PUB.GET_CONTRACTS.. ');
          csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
              l_msg_index := l_msg_index + 1;
              l_msg_count := l_msg_count - 1;
             END LOOP;
         RAISE FND_API.G_EXC_ERROR;
       END IF;
      l_row_count := 1;
      l_rec_count := l_ent_contracts.FIRST;
      WHILE l_rec_count IS NOT NULL
      LOOP
      BEGIN
       l_covered_level_code := l_ent_contracts(l_rec_count).coverage_level_code ;
       l_coverage_level_id  := l_ent_contracts(l_rec_count).coverage_level_id ;
            IF (l_covered_level_code = 'COVER_PROD') THEN
                IF  l_covered_cp_id IS NULL THEN

                   l_covered_cp_id := to_char(l_coverage_level_id) ;
                ELSE

                   l_covered_cp_id := l_covered_cp_id ||','||to_char(l_coverage_level_id) ;
                END IF;
            END IF;
           l_rec_count := l_ent_contracts.NEXT(l_rec_count);
       EXCEPTION
          WHEN OTHERS THEN
             NULL;
       END;
       END LOOP;
    IF (l_covered_cp_id IS NOT NULL) THEN
       IF x_where_clause IS NULL THEN
        x_where_clause := ' a.instance_id IN ( ' ||l_covered_cp_id ||' )' ;
       ELSE
        x_where_clause := x_where_clause||' AND '||' a.instance_id IN ( ' ||l_covered_cp_id ||' )' ;
       END IF;
    ELSE

       IF x_where_clause IS NULL THEN
        x_where_clause := ' a.instance_id IS NULL' ;
       ELSE
        x_where_clause := x_where_clause||' AND '||' a.instance_id IS NULL' ;
       END IF;
    END IF;

EXCEPTION
   WHEN OTHERS THEN
      NULL;
END;
END IF;
--end sk addition

IF (( p_party_query_rec.instance_party_id  IS NOT NULL)  AND
                         ( p_party_query_rec.instance_party_id  <> FND_API.G_MISS_NUM)) THEN
       IF x_where_clause IS NULL THEN
          x_where_clause := ' b.instance_party_id = :instance_party_id ';
       ELSE
          x_where_clause := x_where_clause||' AND '||' b.instance_party_id = :instance_party_id ';
       END IF;

ELSIF ( p_party_query_rec.instance_party_id  IS  NULL) THEN
    IF x_where_clause IS NULL THEN
     x_where_clause := ' b.instance_party_id IS NULL ';
    ELSE
     x_where_clause := x_where_clause||' AND '||' b.instance_party_id IS NULL ';
    END IF;
END IF;

IF ((p_party_query_rec.instance_id IS NOT NULL)       AND
                         (p_party_query_rec.instance_id <> FND_API.G_MISS_NUM))   THEN
    IF x_where_clause IS NULL THEN
        x_where_clause := ' b.instance_id = :instance_id ';
    ELSE
        x_where_clause := x_where_clause||' AND '||' b.instance_id = :instance_id ';
    END IF;
ELSIF (p_party_query_rec.instance_id IS  NULL) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause :=  ' b.instance_id IS NULL ';
    ELSE
      x_where_clause := x_where_clause||' AND '||' b.instance_id IS NULL ';
    END IF;
END IF;

IF ((p_party_query_rec.party_id  IS NOT NULL)         AND
                         (p_party_query_rec.party_id  <> FND_API.G_MISS_NUM)) THEN
     IF x_where_clause IS NULL THEN
        x_where_clause := ' b.party_id = :party_id ';
     ELSE
        x_where_clause := x_where_clause||' AND '||' b.party_id = :party_id ';
     END IF;

ELSIF (p_party_query_rec.party_id  IS  NULL) THEN
     IF x_where_clause IS NULL THEN
         x_where_clause := ' b.party_id IS NULL ';
     ELSE
         x_where_clause := x_where_clause||' AND '||' b.party_id IS NULL ';
     END IF;
END IF ;

IF  ((p_party_query_rec.relationship_type_code IS NOT NULL) AND
                   (p_party_query_rec.relationship_type_code <> FND_API.G_MISS_CHAR)) THEN
   IF x_where_clause IS NULL THEN
     x_where_clause := '  b.relationship_type_code = :relationship_type_code ';
   ELSE
     x_where_clause := x_where_clause||' AND '||'  b.relationship_type_code = :relationship_type_code ';
   END IF;
ELSIF (p_party_query_rec.relationship_type_code IS  NULL) THEN
   IF x_where_clause IS NULL THEN
    x_where_clause := '  b.relationship_type_code IS NULL ';
   ELSE
    x_where_clause := x_where_clause||' AND '||'  b.relationship_type_code IS NULL ';
   END IF;
END IF;
-----

IF (( p_pty_acct_query_rec.ip_account_id  IS NOT NULL)  AND
                         ( p_pty_acct_query_rec.ip_account_id  <> FND_API.G_MISS_NUM)) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := x_where_clause||' c.ip_account_id = :ip_account_id ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' c.ip_account_id = :ip_account_id ';
  END IF;
ELSIF ( p_pty_acct_query_rec.ip_account_id  IS  NULL) THEN
  IF x_where_clause IS NULL THEN
   x_where_clause := x_where_clause||' c.ip_account_id IS NULL ';
  ELSE
   x_where_clause := x_where_clause||' AND '||' c.ip_account_id IS NULL ';
  END IF;
END IF;

IF ((p_pty_acct_query_rec.instance_party_id IS NOT NULL)       AND
                         (p_pty_acct_query_rec.instance_party_id <> FND_API.G_MISS_NUM))   THEN
  IF x_where_clause IS NULL THEN
   x_where_clause := x_where_clause||' c.instance_party_id = :instance_party_id ';
  ELSE
   x_where_clause := x_where_clause||' AND '||' c.instance_party_id = :instance_party_id ';
  END IF;
ELSIF (p_pty_acct_query_rec.instance_party_id IS  NULL) THEN
  IF x_where_clause IS NULL THEN
   x_where_clause := x_where_clause||' c.instance_party_id IS NULL ';
  ELSE
   x_where_clause := x_where_clause||' AND '||' c.instance_party_id IS NULL ';
  END IF;
END IF;

IF ((p_pty_acct_query_rec.party_account_id  IS NOT NULL)         AND
                         (p_pty_acct_query_rec.party_account_id  <> FND_API.G_MISS_NUM)) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := x_where_clause||' c.party_account_id = :party_account_id ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' c.party_account_id = :party_account_id ';
  END IF;
ELSIF (p_pty_acct_query_rec.party_account_id  IS  NULL) THEN
  IF x_where_clause IS NULL THEN
    x_where_clause := x_where_clause||' c.party_account_id IS NULL ';
  ELSE
    x_where_clause := x_where_clause||' AND '||' c.party_account_id IS NULL ';
  END IF;
END IF ;

IF  ((p_pty_acct_query_rec.relationship_type_code IS NOT NULL) AND
                   (p_pty_acct_query_rec.relationship_type_code <> FND_API.G_MISS_CHAR)) THEN
    IF x_where_clause IS NULL THEN
      x_where_clause := x_where_clause||'  c.relationship_type_code = :relationship_type_code ';
    ELSE
      x_where_clause := x_where_clause||' AND '||'  c.relationship_type_code = :relationship_type_code ';
    END IF;
ELSIF (p_pty_acct_query_rec.relationship_type_code IS  NULL) THEN
    IF x_where_clause IS NULL  THEN
     x_where_clause := x_where_clause||'  c.relationship_type_code IS NULL ';
    ELSE
     x_where_clause := x_where_clause||' AND '||'  c.relationship_type_code IS NULL ';
    END IF;
END IF;

IF  p_active_instance_only = 'T' THEN
     x_where_clause := x_where_clause||' AND '||'( a.active_end_date IS NULL '||' OR '||' a.active_end_date > SYSDATE)';
END IF;

IF l_join_condition IS null THEN
 x_select_stmt  := ' SELECT '||l_select_columns ||' from '||l_from_clause ||' where '||l_join_condition||x_where_clause;
ELSE
 x_select_stmt  := ' SELECT '||l_select_columns ||' from '||l_from_clause ||' where '||l_join_condition||' AND '||x_where_clause;
END IF;

IF ((l_instance_rec_exists OR
     l_party_rec_exists OR
     l_party_acct_rec_exists) AND
    (p_transaction_id is not null)) then
    x_select_stmt := x_select_stmt || ' INTERSECT '||l_union_stmt;

ELSIF   NOT(l_instance_rec_exists) AND
        NOT(l_party_rec_exists)    AND
        NOT(l_party_acct_rec_exists) AND
       (p_transaction_id is not null)  then
    x_select_stmt := l_union_stmt;
END IF;
END Gen_Inst_Where_Clause;

/*----------------------------------------------------------*/
/* Procedure name:  Get_Inst_Column_Values                  */
/* Description   :  This procedure gets the column values   */
/*                  for the Dynamic SQL                     */
/*----------------------------------------------------------*/

PROCEDURE Get_Instance_Col_Values
(
    p_get_instance_cur_id      IN       NUMBER,
    x_instance_rec             IN OUT   NOCOPY csi_datastructures_pub.instance_header_rec
) IS

BEGIN
 dbms_sql.column_value(p_get_instance_cur_id, 1, x_instance_rec.instance_id);
 dbms_sql.column_value(p_get_instance_cur_id, 2, x_instance_rec.instance_number);
 dbms_sql.column_value(p_get_instance_cur_id, 3, x_instance_rec.external_reference);
 dbms_sql.column_value(p_get_instance_cur_id, 4, x_instance_rec.inventory_item_id);
 dbms_sql.column_value(p_get_instance_cur_id, 5, x_instance_rec.inventory_revision);
 dbms_sql.column_value(p_get_instance_cur_id, 6, x_instance_rec.inv_master_organization_id);
 dbms_sql.column_value(p_get_instance_cur_id, 7, x_instance_rec.serial_number);
 dbms_sql.column_value(p_get_instance_cur_id, 8, x_instance_rec.mfg_serial_number_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 9, x_instance_rec.lot_number);
 dbms_sql.column_value(p_get_instance_cur_id, 10, x_instance_rec.quantity);
 dbms_sql.column_value(p_get_instance_cur_id, 11, x_instance_rec.unit_of_measure);
 dbms_sql.column_value(p_get_instance_cur_id, 12, x_instance_rec.accounting_class_code);
 dbms_sql.column_value(p_get_instance_cur_id, 13, x_instance_rec.instance_condition_id);
 dbms_sql.column_value(p_get_instance_cur_id, 14, x_instance_rec.instance_status_id);
 dbms_sql.column_value(p_get_instance_cur_id, 15, x_instance_rec.customer_view_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 16, x_instance_rec.merchant_view_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 17, x_instance_rec.sellable_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 18, x_instance_rec.system_id);
 dbms_sql.column_value(p_get_instance_cur_id, 19, x_instance_rec.instance_type_code);
 dbms_sql.column_value(p_get_instance_cur_id, 20, x_instance_rec.active_start_date);
 dbms_sql.column_value(p_get_instance_cur_id, 21, x_instance_rec.active_end_date);
 dbms_sql.column_value(p_get_instance_cur_id, 22, x_instance_rec.location_type_code);
 dbms_sql.column_value(p_get_instance_cur_id, 23, x_instance_rec.location_id);
 dbms_sql.column_value(p_get_instance_cur_id, 24, x_instance_rec.inv_organization_id);
 dbms_sql.column_value(p_get_instance_cur_id, 25, x_instance_rec.inv_subinventory_name);
 dbms_sql.column_value(p_get_instance_cur_id, 26, x_instance_rec.inv_locator_id);
 dbms_sql.column_value(p_get_instance_cur_id, 27, x_instance_rec.pa_project_id);
 dbms_sql.column_value(p_get_instance_cur_id, 28, x_instance_rec.pa_project_task_id);
 dbms_sql.column_value(p_get_instance_cur_id, 29, x_instance_rec.in_transit_order_line_id);
 dbms_sql.column_value(p_get_instance_cur_id, 30, x_instance_rec.wip_job_id);
 dbms_sql.column_value(p_get_instance_cur_id, 31, x_instance_rec.po_order_line_id);
 dbms_sql.column_value(p_get_instance_cur_id, 32, x_instance_rec.last_oe_order_line_id);
 dbms_sql.column_value(p_get_instance_cur_id, 33, x_instance_rec.last_oe_rma_line_id);
 dbms_sql.column_value(p_get_instance_cur_id, 34, x_instance_rec.last_po_po_line_id);
 dbms_sql.column_value(p_get_instance_cur_id, 35, x_instance_rec.last_oe_po_number);
 dbms_sql.column_value(p_get_instance_cur_id, 36, x_instance_rec.last_wip_job_id);
 dbms_sql.column_value(p_get_instance_cur_id, 37, x_instance_rec.last_pa_project_id);
 dbms_sql.column_value(p_get_instance_cur_id, 38, x_instance_rec.last_pa_task_id);
 dbms_sql.column_value(p_get_instance_cur_id, 39, x_instance_rec.last_oe_agreement_id);
 dbms_sql.column_value(p_get_instance_cur_id, 40, x_instance_rec.install_date);
 dbms_sql.column_value(p_get_instance_cur_id, 41, x_instance_rec.manually_created_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 42, x_instance_rec.return_by_date);
 dbms_sql.column_value(p_get_instance_cur_id, 43, x_instance_rec.actual_return_date);
 dbms_sql.column_value(p_get_instance_cur_id, 44, x_instance_rec.creation_complete_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 45, x_instance_rec.completeness_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 46, x_instance_rec.context);
 dbms_sql.column_value(p_get_instance_cur_id, 47, x_instance_rec.attribute1);
 dbms_sql.column_value(p_get_instance_cur_id, 48, x_instance_rec.attribute2);
 dbms_sql.column_value(p_get_instance_cur_id, 49, x_instance_rec.attribute3);
 dbms_sql.column_value(p_get_instance_cur_id, 50, x_instance_rec.attribute4);
 dbms_sql.column_value(p_get_instance_cur_id, 51, x_instance_rec.attribute5);
 dbms_sql.column_value(p_get_instance_cur_id, 52, x_instance_rec.attribute6);
 dbms_sql.column_value(p_get_instance_cur_id, 53, x_instance_rec.attribute7);
 dbms_sql.column_value(p_get_instance_cur_id, 54, x_instance_rec.attribute8);
 dbms_sql.column_value(p_get_instance_cur_id, 55, x_instance_rec.attribute9);
 dbms_sql.column_value(p_get_instance_cur_id, 56, x_instance_rec.attribute10);
 dbms_sql.column_value(p_get_instance_cur_id, 57, x_instance_rec.attribute11);
 dbms_sql.column_value(p_get_instance_cur_id, 58, x_instance_rec.attribute12);
 dbms_sql.column_value(p_get_instance_cur_id, 59, x_instance_rec.attribute13);
 dbms_sql.column_value(p_get_instance_cur_id, 60, x_instance_rec.attribute14);
 dbms_sql.column_value(p_get_instance_cur_id, 61, x_instance_rec.attribute15);
 dbms_sql.column_value(p_get_instance_cur_id, 62, x_instance_rec.object_version_number);
 dbms_sql.column_value(p_get_instance_cur_id, 63, x_instance_rec.last_txn_line_detail_id);
 dbms_sql.column_value(p_get_instance_cur_id, 64, x_instance_rec.install_location_type_code);
 dbms_sql.column_value(p_get_instance_cur_id, 65, x_instance_rec.install_location_id);
 dbms_sql.column_value(p_get_instance_cur_id, 66, x_instance_rec.instance_usage_code);
 dbms_sql.column_value(p_get_instance_cur_id, 67, x_instance_rec.vld_organization_id);
 dbms_sql.column_value(p_get_instance_cur_id, 68, x_instance_rec.config_inst_hdr_id);
 dbms_sql.column_value(p_get_instance_cur_id, 69, x_instance_rec.config_inst_rev_num);
 dbms_sql.column_value(p_get_instance_cur_id, 70, x_instance_rec.config_inst_item_id);
 dbms_sql.column_value(p_get_instance_cur_id, 71, x_instance_rec.config_valid_status);
 dbms_sql.column_value(p_get_instance_cur_id, 72, x_instance_rec.instance_description);
 --start of code for eam integration columns--
 dbms_sql.column_value(p_get_instance_cur_id, 73, x_instance_rec.network_asset_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 74, x_instance_rec.maintainable_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 75, x_instance_rec.pn_location_id);
 dbms_sql.column_value(p_get_instance_cur_id, 76, x_instance_rec.asset_criticality_code);
 dbms_sql.column_value(p_get_instance_cur_id, 77, x_instance_rec.category_id);
 dbms_sql.column_value(p_get_instance_cur_id, 78, x_instance_rec.equipment_gen_object_id);
 dbms_sql.column_value(p_get_instance_cur_id, 79, x_instance_rec.instantiation_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 80, x_instance_rec.linear_location_id);
 dbms_sql.column_value(p_get_instance_cur_id, 81, x_instance_rec.operational_log_flag);
 dbms_sql.column_value(p_get_instance_cur_id, 82, x_instance_rec.checkin_status);
 dbms_sql.column_value(p_get_instance_cur_id, 83, x_instance_rec.supplier_warranty_exp_date);
 dbms_sql.column_value(p_get_instance_cur_id, 84, x_instance_rec.attribute16);
 dbms_sql.column_value(p_get_instance_cur_id, 85, x_instance_rec.attribute17);
 dbms_sql.column_value(p_get_instance_cur_id, 86, x_instance_rec.attribute18);
 dbms_sql.column_value(p_get_instance_cur_id, 87, x_instance_rec.attribute19);
 dbms_sql.column_value(p_get_instance_cur_id, 88, x_instance_rec.attribute20);
 dbms_sql.column_value(p_get_instance_cur_id, 89, x_instance_rec.attribute21);
 dbms_sql.column_value(p_get_instance_cur_id, 90, x_instance_rec.attribute22);
 dbms_sql.column_value(p_get_instance_cur_id, 91, x_instance_rec.attribute23);
 dbms_sql.column_value(p_get_instance_cur_id, 92, x_instance_rec.attribute24);
 dbms_sql.column_value(p_get_instance_cur_id, 93, x_instance_rec.attribute25);
 dbms_sql.column_value(p_get_instance_cur_id, 94, x_instance_rec.attribute26);
 dbms_sql.column_value(p_get_instance_cur_id, 95, x_instance_rec.attribute27);
 dbms_sql.column_value(p_get_instance_cur_id, 96, x_instance_rec.attribute28);
 dbms_sql.column_value(p_get_instance_cur_id, 97, x_instance_rec.attribute29);
 dbms_sql.column_value(p_get_instance_cur_id, 98, x_instance_rec.attribute30);
 --end of code for eam integration columns--

-- Addition of columns for FA Integration
 dbms_sql.column_value(p_get_instance_cur_id, 99, x_instance_rec.purchase_unit_price);
 dbms_sql.column_value(p_get_instance_cur_id, 100, x_instance_rec.purchase_currency_code);
 dbms_sql.column_value(p_get_instance_cur_id, 101, x_instance_rec.payables_unit_price);
 dbms_sql.column_value(p_get_instance_cur_id, 102, x_instance_rec.payables_currency_code);
 dbms_sql.column_value(p_get_instance_cur_id, 103, x_instance_rec.sales_unit_price);
 dbms_sql.column_value(p_get_instance_cur_id, 104, x_instance_rec.sales_currency_code);
 dbms_sql.column_value(p_get_instance_cur_id, 105, x_instance_rec.operational_status_code);
-- End addition of columns for FA Integration

END Get_Instance_Col_Values;


/*-------------------------------------------------------*/
/* Procedure name:  Define_Inst_Columns                  */
/* Description   :  This procedure defines the columns   */
/*                  for the Dynamic SQL                  */
/*-------------------------------------------------------*/

PROCEDURE Define_Instance_Columns
(
  p_get_instance_cur_id      IN   NUMBER
  ) IS

  l_instance_rec         csi_datastructures_pub.instance_header_rec;

BEGIN
 dbms_sql.define_column(p_get_instance_cur_id, 1, l_instance_rec.instance_id);
 dbms_sql.define_column(p_get_instance_cur_id, 2, l_instance_rec.instance_number,30);
 dbms_sql.define_column(p_get_instance_cur_id, 3, l_instance_rec.external_reference,30);
 dbms_sql.define_column(p_get_instance_cur_id, 4, l_instance_rec.inventory_item_id);
 dbms_sql.define_column(p_get_instance_cur_id, 5, l_instance_rec.inventory_revision,3);
 dbms_sql.define_column(p_get_instance_cur_id, 6, l_instance_rec.inv_master_organization_id);
 dbms_sql.define_column(p_get_instance_cur_id, 7, l_instance_rec.serial_number,30);
 dbms_sql.define_column(p_get_instance_cur_id, 8, l_instance_rec.mfg_serial_number_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 9, l_instance_rec.lot_number,80);
 dbms_sql.define_column(p_get_instance_cur_id, 10, l_instance_rec.quantity);
 dbms_sql.define_column(p_get_instance_cur_id, 11, l_instance_rec.unit_of_measure,3);
 dbms_sql.define_column(p_get_instance_cur_id, 12, l_instance_rec.accounting_class_code,10);
 dbms_sql.define_column(p_get_instance_cur_id, 13, l_instance_rec.instance_condition_id);
 dbms_sql.define_column(p_get_instance_cur_id, 14, l_instance_rec.instance_status_id);
 dbms_sql.define_column(p_get_instance_cur_id, 15, l_instance_rec.customer_view_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 16, l_instance_rec.merchant_view_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 17, l_instance_rec.sellable_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 18, l_instance_rec.system_id);
 dbms_sql.define_column(p_get_instance_cur_id, 19, l_instance_rec.instance_type_code,30);
 dbms_sql.define_column(p_get_instance_cur_id, 20, l_instance_rec.active_start_date);
 dbms_sql.define_column(p_get_instance_cur_id, 21, l_instance_rec.active_end_date);
 dbms_sql.define_column(p_get_instance_cur_id, 22, l_instance_rec.location_type_code,30);
 dbms_sql.define_column(p_get_instance_cur_id, 23, l_instance_rec.location_id);
 dbms_sql.define_column(p_get_instance_cur_id, 24, l_instance_rec.inv_organization_id);
 dbms_sql.define_column(p_get_instance_cur_id, 25, l_instance_rec.inv_subinventory_name,10);
 dbms_sql.define_column(p_get_instance_cur_id, 26, l_instance_rec.inv_locator_id);
 dbms_sql.define_column(p_get_instance_cur_id, 27, l_instance_rec.pa_project_id);
 dbms_sql.define_column(p_get_instance_cur_id, 28, l_instance_rec.pa_project_task_id);
 dbms_sql.define_column(p_get_instance_cur_id, 29, l_instance_rec.in_transit_order_line_id);
 dbms_sql.define_column(p_get_instance_cur_id, 30, l_instance_rec.wip_job_id);
 dbms_sql.define_column(p_get_instance_cur_id, 31, l_instance_rec.po_order_line_id);
 dbms_sql.define_column(p_get_instance_cur_id, 32, l_instance_rec.last_oe_order_line_id);
 dbms_sql.define_column(p_get_instance_cur_id, 33, l_instance_rec.last_oe_rma_line_id);
 dbms_sql.define_column(p_get_instance_cur_id, 34, l_instance_rec.last_po_po_line_id);
 dbms_sql.define_column(p_get_instance_cur_id, 35, l_instance_rec.last_oe_po_number,30);
 dbms_sql.define_column(p_get_instance_cur_id, 36, l_instance_rec.last_wip_job_id);
 dbms_sql.define_column(p_get_instance_cur_id, 37, l_instance_rec.last_pa_project_id);
 dbms_sql.define_column(p_get_instance_cur_id, 38, l_instance_rec.last_pa_task_id);
 dbms_sql.define_column(p_get_instance_cur_id, 39, l_instance_rec.last_oe_agreement_id);
 dbms_sql.define_column(p_get_instance_cur_id, 40, l_instance_rec.install_date);
 dbms_sql.define_column(p_get_instance_cur_id, 41, l_instance_rec.manually_created_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 42, l_instance_rec.return_by_date);
 dbms_sql.define_column(p_get_instance_cur_id, 43, l_instance_rec.actual_return_date);
 dbms_sql.define_column(p_get_instance_cur_id, 44, l_instance_rec.creation_complete_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 45, l_instance_rec.completeness_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 46, l_instance_rec.context,30);
 dbms_sql.define_column(p_get_instance_cur_id, 47, l_instance_rec.attribute1,150);
 dbms_sql.define_column(p_get_instance_cur_id, 48, l_instance_rec.attribute2,150);
 dbms_sql.define_column(p_get_instance_cur_id, 49, l_instance_rec.attribute3,150);
 dbms_sql.define_column(p_get_instance_cur_id, 50, l_instance_rec.attribute4,150);
 dbms_sql.define_column(p_get_instance_cur_id, 51, l_instance_rec.attribute5,150);
 dbms_sql.define_column(p_get_instance_cur_id, 52, l_instance_rec.attribute6,150);
 dbms_sql.define_column(p_get_instance_cur_id, 53, l_instance_rec.attribute7,150);
 dbms_sql.define_column(p_get_instance_cur_id, 54, l_instance_rec.attribute8,150);
 dbms_sql.define_column(p_get_instance_cur_id, 55, l_instance_rec.attribute9,150);
 dbms_sql.define_column(p_get_instance_cur_id, 56, l_instance_rec.attribute10,150);
 dbms_sql.define_column(p_get_instance_cur_id, 57, l_instance_rec.attribute11,150);
 dbms_sql.define_column(p_get_instance_cur_id, 58, l_instance_rec.attribute12,150);
 dbms_sql.define_column(p_get_instance_cur_id, 59, l_instance_rec.attribute13,150);
 dbms_sql.define_column(p_get_instance_cur_id, 60, l_instance_rec.attribute14,150);
 dbms_sql.define_column(p_get_instance_cur_id, 61, l_instance_rec.attribute15,150);
 dbms_sql.define_column(p_get_instance_cur_id, 62, l_instance_rec.object_version_number);
 dbms_sql.define_column(p_get_instance_cur_id, 63, l_instance_rec.last_txn_line_detail_id);
 dbms_sql.define_column(p_get_instance_cur_id, 64, l_instance_rec.install_location_type_code,30);
 dbms_sql.define_column(p_get_instance_cur_id, 65, l_instance_rec.install_location_id);
 dbms_sql.define_column(p_get_instance_cur_id, 66, l_instance_rec.instance_usage_code,30);
 dbms_sql.define_column(p_get_instance_cur_id, 67, l_instance_rec.vld_organization_id);
 dbms_sql.define_column(p_get_instance_cur_id, 68, l_instance_rec.config_inst_hdr_id);
 dbms_sql.define_column(p_get_instance_cur_id, 69, l_instance_rec.config_inst_rev_num);
 dbms_sql.define_column(p_get_instance_cur_id, 70, l_instance_rec.config_inst_item_id);
 dbms_sql.define_column(p_get_instance_cur_id, 71, l_instance_rec.config_valid_status,30);
 dbms_sql.define_column(p_get_instance_cur_id, 72, l_instance_rec.instance_description,240);
 --start of code for eam integration columns--
 dbms_sql.define_column(p_get_instance_cur_id, 73, l_instance_rec.network_asset_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 74, l_instance_rec.maintainable_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 75, l_instance_rec.pn_location_id);
 dbms_sql.define_column(p_get_instance_cur_id, 76, l_instance_rec.asset_criticality_code,30);
 dbms_sql.define_column(p_get_instance_cur_id, 77, l_instance_rec.category_id);
 dbms_sql.define_column(p_get_instance_cur_id, 78, l_instance_rec.equipment_gen_object_id);
 dbms_sql.define_column(p_get_instance_cur_id, 79, l_instance_rec.instantiation_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 80, l_instance_rec.linear_location_id);
 dbms_sql.define_column(p_get_instance_cur_id, 81, l_instance_rec.operational_log_flag,1);
 dbms_sql.define_column(p_get_instance_cur_id, 82, l_instance_rec.checkin_status);
 dbms_sql.define_column(p_get_instance_cur_id, 83, l_instance_rec.supplier_warranty_exp_date);
 dbms_sql.define_column(p_get_instance_cur_id, 84, l_instance_rec.attribute16,240);
 dbms_sql.define_column(p_get_instance_cur_id, 85, l_instance_rec.attribute17,240);
 dbms_sql.define_column(p_get_instance_cur_id, 86, l_instance_rec.attribute18,240);
 dbms_sql.define_column(p_get_instance_cur_id, 87, l_instance_rec.attribute19,240);
 dbms_sql.define_column(p_get_instance_cur_id, 88, l_instance_rec.attribute20,240);
 dbms_sql.define_column(p_get_instance_cur_id, 89, l_instance_rec.attribute21,240);
 dbms_sql.define_column(p_get_instance_cur_id, 90, l_instance_rec.attribute22,240);
 dbms_sql.define_column(p_get_instance_cur_id, 91, l_instance_rec.attribute23,240);
 dbms_sql.define_column(p_get_instance_cur_id, 92, l_instance_rec.attribute24,240);
 dbms_sql.define_column(p_get_instance_cur_id, 93, l_instance_rec.attribute25,240);
 dbms_sql.define_column(p_get_instance_cur_id, 94, l_instance_rec.attribute26,240);
 dbms_sql.define_column(p_get_instance_cur_id, 95, l_instance_rec.attribute27,240);
 dbms_sql.define_column(p_get_instance_cur_id, 96, l_instance_rec.attribute28,240);
 dbms_sql.define_column(p_get_instance_cur_id, 97, l_instance_rec.attribute29,240);
 dbms_sql.define_column(p_get_instance_cur_id, 98, l_instance_rec.attribute30,240);
 --end of code for eam integration columns--
-- Addition of columns for FA Integration
dbms_sql.define_column(p_get_instance_cur_id, 99, l_instance_rec.purchase_unit_price);
dbms_sql.define_column(p_get_instance_cur_id, 100, l_instance_rec.purchase_currency_code,15);
dbms_sql.define_column(p_get_instance_cur_id, 101, l_instance_rec.payables_unit_price);
dbms_sql.define_column(p_get_instance_cur_id, 102, l_instance_rec.payables_currency_code,15);
dbms_sql.define_column(p_get_instance_cur_id, 103, l_instance_rec.sales_unit_price);
dbms_sql.define_column(p_get_instance_cur_id, 104, l_instance_rec.sales_currency_code,15);
dbms_sql.define_column(p_get_instance_cur_id, 105, l_instance_rec.operational_status_code,30);
-- End addition of columns for FA Integration

END Define_Instance_Columns;

/*---------------------------------------------------------*/
/* Procedure name:  Bind_Inst_variable                     */
/* Description :    Procedure used to generate the where   */
/*                  clause for Item Instances              */
/*---------------------------------------------------------*/

PROCEDURE Bind_Instance_variable
(
    p_instance_rec              IN   csi_datastructures_pub.instance_header_rec,
    p_cur_get_instance_rel      IN   NUMBER
) IS

BEGIN

 IF( (p_instance_rec.instance_id IS NOT NULL)
                  AND (p_instance_rec.instance_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_cur_get_instance_rel, ':INSTANCE_ID', p_instance_rec.instance_id);
 END IF;

END Bind_Instance_variable;


/*--------------------------------------------------*/
/* procedure name: create_item_instance             */
/* description   : procedure used to                */
/*                 create item instances            */
/*                                                  */
/*--------------------------------------------------*/

PROCEDURE create_item_instance
 (
     p_api_version           IN     NUMBER
    ,p_commit                IN     VARCHAR2
    ,p_init_msg_list         IN     VARCHAR2
    ,p_validation_level      IN     NUMBER
    ,p_instance_rec          IN OUT NOCOPY csi_datastructures_pub.instance_rec
    ,p_txn_rec               IN OUT NOCOPY csi_datastructures_pub.transaction_rec
    ,p_party_tbl             IN OUT NOCOPY csi_datastructures_pub.party_tbl
    ,p_asset_tbl             IN OUT NOCOPY csi_datastructures_pub.instance_asset_tbl
    ,x_return_status         OUT    NOCOPY VARCHAR2
    ,x_msg_count             OUT    NOCOPY NUMBER
    ,x_msg_data              OUT    NOCOPY VARCHAR2
    ,p_item_attribute_tbl    IN OUT NOCOPY csi_item_instance_pvt.item_attribute_tbl
    ,p_location_tbl          IN OUT NOCOPY csi_item_instance_pvt.location_tbl
    ,p_generic_id_tbl        IN OUT NOCOPY csi_item_instance_pvt.generic_id_tbl
    ,p_lookup_tbl            IN OUT NOCOPY csi_item_instance_pvt.lookup_tbl
    ,p_ins_count_rec         IN OUT NOCOPY csi_item_instance_pvt.ins_count_rec
    ,p_called_from_grp       IN     VARCHAR2
    ,p_internal_party_id     IN     NUMBER
 )
    IS

    l_api_name               CONSTANT VARCHAR2(30)   := 'CREATE_ITEM_INSTANCE_PVT';
    l_api_version            CONSTANT NUMBER         := 1.0;
    l_debug_level            NUMBER;
    l_instance_id            NUMBER;
    l_party_owner_rec        csi_datastructures_pub.party_rec;
    l_csi_item_instance_h_id NUMBER;
    l_old_oks_cp_rec         OKS_IBINT_PUB.CP_REC_TYPE;
    l_new_oks_cp_rec         OKS_IBINT_PUB.CP_REC_TYPE;
    l_ctr_grp_id_template    NUMBER;
    l_ctr_grp_id_instance    NUMBER;
    l_ctr_id_template        csi_counter_template_pub.ctr_template_autoinst_tbl;
    l_ctr_id_instance        csi_counter_template_pub.counter_autoinstantiate_tbl;
    l_msg_count              NUMBER;
    l_msg_data               VARCHAR2(100);
    l_msg_index              NUMBER;
    l_line_count             NUMBER;
    l_version_label_rec      csi_datastructures_pub.version_label_rec;
    l_process_flag           BOOLEAN := TRUE;
    l_return_value           BOOLEAN;
    l_owner                  NUMBER;
    l_owner_count            NUMBER := 0;
    l_int_party_id           NUMBER;
    l_serial_control         NUMBER;
    l_lot_control            NUMBER;
    l_shelf_life_code        NUMBER;
    l_instance_status        VARCHAR2(50);
    l_contracts_status       VARCHAR2(3);
    l_account_id             NUMBER;
    l_version_label          VARCHAR2(30);
    l_sys_date               DATE := SYSDATE;
    l_last_vld_organization_id NUMBER;
    l_temp                   VARCHAR2(1);
    l_base_item_id           NUMBER;
    l_ctr_association_id     NUMBER;
    l_object_version_number  NUMBER;
    l_association_type       VARCHAR2(30) := 'PROD_ITEM';
--    l_desc_flex              CS_COUNTERS_EXT_PVT.DFF_Rec_Type;
-- Counter ref r12 changes
    l_desc_flex              csi_ctr_datastructures_pub.dff_rec_type;
    l_ctr_item_associations_rec csi_ctr_datastructures_pub.ctr_item_associations_rec;
    l_trackable_flag         VARCHAR2(1);
    l_uom_code               VARCHAR2(3);
    l_rev_control            NUMBER;
    l_exists_flag            VARCHAR2(1);
    l_valid_flag             VARCHAR2(1);
    l_call_counters          VARCHAR2(1) := FND_PROFILE.VALUE('CSI_COUNTERS_ENABLED');
    l_config_key             csi_utility_grp.config_instance_key;
    l_config_valid_status    VARCHAR2(10);
    l_return_message         VARCHAR2(100);
    l_component_ins_type     VARCHAR2(1):=NULL ;
    l_config_hdr_id          NUMBER;
    l_config_rev_nbr         NUMBER;
    l_terminated_flag        VARCHAR2(1);
    l_check_instance_rec     csi_datastructures_pub.instance_rec;
    l_prior_txn_id           NUMBER;
    l_ins_flag               VARCHAR2(1);
    l_eam_item               BOOLEAN := FALSE;
    l_eam_item_type          NUMBER;
    l_reason_failed          VARCHAR2(30);
    l_token                  VARCHAR2(30);
    l_dummy_location         VARCHAR2(1);
    l_counter_group_id       NUMBER :=0;
    l_gen_object_id          NUMBER;
    l_equipment_type         NUMBER;
    --
    -- Added variables for bug 8516781, FP bug 8551918
    l_exp_rltns_rec             csi_datastructures_pub.ii_relationship_rec;
    l_instance_id_lst           csi_datastructures_pub.id_tbl;
    l_msg_data                  VARCHAR2(2000);

    CURSOR CTR_GROUP(p_src_object_id IN NUMBER) IS
/*    R12 Changes ...
    SELECT counter_group_id
    FROM CS_CTR_ASSOCIATIONS
    WHERE source_object_id = p_src_object_id;
    */
    SELECT  group_id,
            associated_to_group,--Added for bug 9142776
	     COUNTER_ID		--Added for bug 9142776
    FROM   csi_ctr_item_associations
    WHERE  inventory_item_id = p_src_object_id;
BEGIN
    -- Standard Start of API savepoint
       SAVEPOINT  create_item_instance_pvt;

    -- Standard call to check for call compatibility.
       IF NOT FND_API.Compatible_API_Call (l_api_version,
                                           p_api_version,
                                           l_api_name   ,
                                           G_PKG_NAME    )
       THEN
             RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
       END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
       IF FND_API.to_Boolean( p_init_msg_list ) THEN
             FND_MSG_PUB.initialize;
       END IF;

    -- Initialize API return status to success
       x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option debug_level for debug message reporting
           l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');
       --  If debug_level = 1 then dump the procedure name
           IF (l_debug_level > 0) THEN
              csi_gen_utility_pvt.put_line ('create_item_instance_pvt');
           END IF;

       -- If the debug level = 2 then dump all the parameters values.
           IF (l_debug_level > 1) THEN
                 csi_gen_utility_pvt.put_line ( 'create_item_instance_pvt' ||
                                                   p_api_version      ||'-'||
                                                   p_commit           ||'-'||
                                                   p_init_msg_list          );
               -- Dump the records in the log file
                 csi_gen_utility_pvt.dump_instance_rec(p_instance_rec);
                 csi_gen_utility_pvt.dump_party_tbl(p_party_tbl);
                 csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
           END IF;

        -- Start API body
         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_Num
             (    p_instance_rec.INVENTORY_ITEM_ID  ,
                ' p_instance_rec.INVENTORY_ITEM_ID ',
                  l_api_name
           );
/* Code commented by sk for bug 2198575

         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_Num
             (    p_instance_rec.INV_MASTER_ORGANIZATION_ID  ,
                ' p_instance_rec.INV_MASTER_ORGANIZATION_ID ',
                  l_api_name
           );
*/
         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_Num
             (    p_instance_rec.QUANTITY  ,
                ' p_instance_rec.QUANTITY ',
                  l_api_name
           );

         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_Char
             (    p_instance_rec.UNIT_OF_MEASURE  ,
                ' p_instance_rec.UNIT_OF_MEASURE ',
                  l_api_name
           );
      --
      -- Initialize the Instance count
      --
      If p_ins_count_rec.inv_count is NULL OR
         p_ins_count_rec.inv_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.inv_count := 0;
      End if;
      --
      If p_ins_count_rec.generic_count is NULL OR
         p_ins_count_rec.generic_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.generic_count := 0;
      End if;
      --
      If p_ins_count_rec.location_count is NULL OR
         p_ins_count_rec.location_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.location_count := 0;
      End if;
      --
      If p_ins_count_rec.lookup_count is NULL OR
         p_ins_count_rec.lookup_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.lookup_count := 0;
      End if;
      --

      --Validations for the Create Item Instance
      --If vld_organization_id is passed and inv_master_organization_id is
      --not passed then derive master_organization_id from mtl_parameters.
      -- Start of modifications by sk on 02/19/02 for bug 2198575
      IF   ((p_instance_rec.vld_organization_id IS NOT NULL)  AND
            (p_instance_rec.vld_organization_id <> FND_API.G_MISS_NUM)) AND
           ((p_instance_rec.inv_master_organization_id IS NULL)  OR
            (p_instance_rec.inv_master_organization_id = FND_API.G_MISS_NUM))
      THEN
         BEGIN
            SELECT  master_organization_id
            INTO    p_instance_rec.inv_master_organization_id
            FROM    mtl_parameters
            WHERE   organization_id = p_instance_rec.vld_organization_id;
         EXCEPTION
           WHEN OTHERS THEN
             NULL;
         END;
      --If vld_organization_id is not passed and inv_master_organization_id is
      --passed then assign inv_master_organization_id to vld_organization_id.
      ELSIF ((p_instance_rec.vld_organization_id IS NULL)  OR
             (p_instance_rec.vld_organization_id = FND_API.G_MISS_NUM)) AND
            ((p_instance_rec.inv_master_organization_id IS NOT NULL)  AND
             (p_instance_rec.inv_master_organization_id <> FND_API.G_MISS_NUM))
      THEN
          IF NOT (csi_Item_Instance_Vld_Pvt.Is_Valid_Master_Org
                            (p_instance_rec.inv_master_organization_id)) THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_MAST_ORG');
             FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
          END IF;
          p_instance_rec.vld_organization_id := p_instance_rec.inv_master_organization_id;
      --If both vld_organization_id and inv_master_organization_id are
      --passed then check the validity of passed inv_master_organization_id.
      ELSIF ((p_instance_rec.vld_organization_id IS NOT NULL)  AND
             (p_instance_rec.vld_organization_id <> FND_API.G_MISS_NUM)) AND
            ((p_instance_rec.inv_master_organization_id IS NOT NULL)  AND
             (p_instance_rec.inv_master_organization_id <> FND_API.G_MISS_NUM))
      THEN
            BEGIN
               SELECT  'x'
               INTO    l_temp
               FROM    mtl_parameters
               WHERE   organization_id = p_instance_rec.vld_organization_id
               AND     master_organization_id = p_instance_rec.inv_master_organization_id;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_VLD_MAST_COMB');
                FND_MSG_PUB.Add;
                RAISE FND_API.G_EXC_ERROR;
            END;
      ELSE
                FND_MESSAGE.SET_NAME('CSI','CSI_NO_VLD_ORG');
                FND_MSG_PUB.Add;
                RAISE FND_API.G_EXC_ERROR;
      END IF;
      -- End of modifications by sk on 02/19/02 for bug 2198575

-- Validating the Instance Id
        IF  ((p_instance_rec.INSTANCE_ID IS  NULL) OR
             (p_instance_rec.INSTANCE_ID = FND_API.G_MISS_NUM)) THEN
           -- If the instance_id passed is null then generate from sequence
           -- and check if the value exists . If exists then generate
           -- again from the sequence till we get a value that does not exist
           WHILE l_process_flag LOOP
                p_instance_rec.INSTANCE_ID := CSI_Item_Instance_vld_pvt.get_instance_id;
                IF NOT(CSI_Item_Instance_vld_pvt.InstanceExists(p_instance_rec.INSTANCE_ID,
                                                            FALSE                    )) THEN
                    l_process_flag := FALSE;
                END IF;
           END LOOP;
        ELSE
            -- Validate the instance_id if exist then raise CSI_API_INVALID_PRIMARY_KEY error
            IF CSI_Item_Instance_vld_pvt.InstanceExists(p_instance_rec.INSTANCE_ID,
                                                        TRUE                       ) THEN
                RAISE FND_API.G_EXC_ERROR;
            END IF;
        END IF;

       -- IF l_eam_item
       -- THEN
         IF (p_instance_rec.location_id IS NULL OR
             p_instance_rec.location_id =fnd_api.g_miss_num)
         THEN
           IF p_instance_rec.location_type_code IN ('WIP', 'HR_LOCATIONS','PROJECT','IN_TRANSIT','PO','INTERNAL_SITE')
           THEN
            BEGIN
              SELECT location_id
                INTO p_instance_rec.location_id
                FROM hr_all_organization_units
               WHERE organization_id = p_instance_rec.vld_organization_id;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END;
            IF p_instance_rec.location_id IS NULL
            THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
         END IF;

         IF (p_instance_rec.install_location_id IS NULL OR
             p_instance_rec.install_location_id =fnd_api.g_miss_num)
         THEN
           IF p_instance_rec.install_location_type_code IN ('WIP','HR_LOCATIONS','PROJECT','IN_TRANSIT','PO','INTERNAL_SITE')
           THEN
            BEGIN
              SELECT location_id
                INTO p_instance_rec.install_location_id
                FROM hr_all_organization_units
               WHERE organization_id = p_instance_rec.vld_organization_id;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END;
            IF p_instance_rec.install_location_id IS NULL
            THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
         END IF;
       -- END IF;
      -- End addition of code for eam integration

        IF csi_item_Instance_Vld_pvt.Is_InstanceNum_Valid(p_instance_rec.instance_id,
                                                          p_instance_rec.instance_number,
                                                          'CREATE')
        THEN
           IF p_instance_rec.instance_number IS NULL OR
              p_instance_rec.instance_number = fnd_api.g_miss_char
           THEN
              p_instance_rec.instance_number := substr(to_char(p_instance_rec.instance_id),1,30);
           END IF;
        ELSE
            RAISE fnd_api.g_exc_error;
        END IF;
        --
        -- Get the Required Inventory Attributes
        l_exists_flag := 'N';
        l_valid_flag := 'Y';
        IF p_item_attribute_tbl.count > 0 then
           FOR item_count in p_item_attribute_tbl.FIRST .. p_item_attribute_tbl.LAST
           LOOP
              IF p_item_attribute_tbl(item_count).inventory_item_id = p_instance_rec.inventory_item_id AND
                 p_item_attribute_tbl(item_count).organization_id = p_instance_rec.vld_organization_id AND
                 p_item_attribute_tbl(item_count).master_organization_id = p_instance_rec.inv_master_organization_id
              THEN
                 l_trackable_flag := p_item_attribute_tbl(item_count).trackable_flag;
                 l_rev_control := p_item_attribute_tbl(item_count).revision_control_code;
                 l_serial_control := p_item_attribute_tbl(item_count).serial_number_control_code;
                 l_lot_control := p_item_attribute_tbl(item_count).lot_control_code;
                 l_shelf_life_code := p_item_attribute_tbl(item_count).shelf_life_code;
                 l_uom_code := p_item_attribute_tbl(item_count).uom_code;
                 l_eam_item_type := p_item_attribute_tbl(item_count).eam_item_type;
                 l_equipment_type := p_item_attribute_tbl(item_count).equipment_type;
                 l_valid_flag := p_item_attribute_tbl(item_count).valid_flag;
                 l_exists_flag := 'Y';
                 EXIT;
              END IF;
           END LOOP;
           IF l_valid_flag <> 'Y'
           THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM');
              FND_MESSAGE.SET_TOKEN('INVENTORY_ITEM_ID',p_instance_rec.inventory_item_id);
              FND_MESSAGE.SET_TOKEN('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
              FND_MSG_PUB.Add;
              RAISE fnd_api.g_exc_error;
           END IF;
        END IF;
        --
        -- if item does not exist in cache then get from database.
        if l_exists_flag = 'N' then
           p_ins_count_rec.inv_count := p_ins_count_rec.inv_count + 1;
           p_item_attribute_tbl(p_ins_count_rec.inv_count).inventory_item_id := p_instance_rec.inventory_item_id;
           p_item_attribute_tbl(p_ins_count_rec.inv_count).organization_id := p_instance_rec.vld_organization_id;
           p_item_attribute_tbl(p_ins_count_rec.inv_count).master_organization_id := p_instance_rec.inv_master_organization_id;
           Begin
              select comms_nl_trackable_flag,primary_uom_code
              into l_trackable_flag,l_uom_code
              from MTL_SYSTEM_ITEMS_B
              where inventory_item_id = p_instance_rec.inventory_item_id
              and   organization_id = p_instance_rec.inv_master_organization_id
	      and   enabled_flag = 'Y'
	      and   nvl (start_date_active, sysdate) <= sysdate
	      and   nvl (end_date_active, sysdate+1) > sysdate;
              --
	      p_item_attribute_tbl(p_ins_count_rec.inv_count).trackable_flag := l_trackable_flag;
	      p_item_attribute_tbl(p_ins_count_rec.inv_count).uom_code := l_uom_code;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'Y';
	   Exception
	      when others then
                 p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'N';
		 FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM');
                 FND_MESSAGE.SET_TOKEN('INVENTORY_ITEM_ID',p_instance_rec.inventory_item_id);
                 FND_MESSAGE.SET_TOKEN('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
                 FND_MSG_PUB.Add;
		 RAISE fnd_api.g_exc_error;
           End;
           --
       BEGIN
         SELECT revision_qty_control_code
               ,serial_number_control_code
               ,lot_control_code
               ,shelf_life_code
               ,eam_item_type
               ,equipment_type
           INTO l_rev_control
               ,l_serial_control
               ,l_lot_control
               ,l_shelf_life_code
               ,l_eam_item_type
               ,l_equipment_type
           FROM mtl_system_items_b
          WHERE inventory_item_id = p_instance_rec.inventory_item_id
	        AND organization_id = p_instance_rec.vld_organization_id
            AND enabled_flag = 'Y'
            AND nvl (start_date_active, sysdate) <= sysdate
            AND nvl (end_date_active, sysdate+1) > sysdate;
              --
            p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'Y';
            p_item_attribute_tbl(p_ins_count_rec.inv_count).revision_control_code := l_rev_control;
            p_item_attribute_tbl(p_ins_count_rec.inv_count).serial_number_control_code := l_serial_control;
            p_item_attribute_tbl(p_ins_count_rec.inv_count).lot_control_code := l_lot_control;
            p_item_attribute_tbl(p_ins_count_rec.inv_count).shelf_life_code := l_shelf_life_code;
            p_item_attribute_tbl(p_ins_count_rec.inv_count).eam_item_type := l_eam_item_type;
            p_item_attribute_tbl(p_ins_count_rec.inv_count).equipment_type := l_equipment_type;
       EXCEPTION
        WHEN OTHERS THEN
             p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'N';
             FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM');
             FND_MESSAGE.SET_TOKEN('INVENTORY_ITEM_ID',p_instance_rec.inventory_item_id);
             FND_MESSAGE.SET_TOKEN('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
             FND_MSG_PUB.Add;
             RAISE fnd_api.g_exc_error;
       END;
        End if;
   -- Added the following code to fix bug 5506231
       IF p_instance_rec.instance_usage_code IS NULL OR
          p_instance_rec.instance_usage_code = fnd_api.g_miss_char
       THEN
          csi_gen_utility_pvt.put_line ('Instance_usage_code is passed as null or g_miss value');
          csi_gen_utility_pvt.put_line ('Hence deriving instance usage code');
         IF l_serial_control = 6 AND
            p_instance_rec.serial_number IS NOT NULL AND
            p_instance_rec.location_type_code = 'INVENTORY'
         THEN
            p_instance_rec.instance_usage_code := 'RETURNED';
         ELSE
           IF p_instance_rec.location_type_code = 'INVENTORY'
           THEN
              p_instance_rec.instance_usage_code := 'IN_INVENTORY';
           ELSIF p_instance_rec.location_type_code = 'WIP'
           THEN
                 p_instance_rec.instance_usage_code := 'IN_WIP';
           ELSE
                 p_instance_rec.instance_usage_code := 'OUT_OF_ENTERPRISE';
           END IF;
         END IF;
          csi_gen_utility_pvt.put_line ('Value of derived instance_usage_code is : '||p_instance_rec.instance_usage_code);
       END IF;
   -- End addition of code to fix bug 5506231

        -- Checking for Trackable Flag
        IF NOT csi_item_instance_vld_pvt.Is_Trackable
                           (p_instance_rec.inventory_item_id,
                            p_instance_rec.inv_master_organization_id,
                            l_trackable_flag
                           )  THEN
           RAISE fnd_api.g_exc_error;
        END IF;
        --
      -- Added following code for eam integration
      -- Check if the item is a rebuildable or an asset group

        IF csi_item_instance_vld_pvt.Check_for_eam_item
           (p_inventory_item_id  => p_instance_rec.inventory_item_id,
            p_organization_id    => p_instance_rec.vld_organization_id,
            p_eam_item_type      => l_eam_item_type)
        THEN
          l_eam_item := TRUE;
        END IF;
        -- Added for eam
         IF ((p_instance_rec.network_asset_flag IS NOT NULL AND
              p_instance_rec.network_asset_flag <> fnd_api.g_miss_char) OR
             (p_instance_rec.maintainable_flag IS NOT NULL AND
              p_instance_rec.maintainable_flag <> fnd_api.g_miss_char)  OR
             (p_instance_rec.pn_location_id IS NOT NULL AND
              p_instance_rec.pn_location_id <> fnd_api.g_miss_num) OR
             (p_instance_rec.asset_criticality_code IS NOT NULL AND
              p_instance_rec.asset_criticality_code <> fnd_api.g_miss_char) OR
             (p_instance_rec.category_id IS NOT NULL AND
              p_instance_rec.category_id <> fnd_api.g_miss_num) OR
             (p_instance_rec.equipment_gen_object_id IS NOT NULL AND
              p_instance_rec.equipment_gen_object_id <> fnd_api.g_miss_num) OR
             (p_instance_rec.linear_location_id IS NOT NULL AND
              p_instance_rec.linear_location_id <> fnd_api.g_miss_num) OR
             (p_instance_rec.operational_log_flag IS NOT NULL AND
              p_instance_rec.operational_log_flag <> fnd_api.g_miss_char) OR
             (p_instance_rec.checkin_status IS NOT NULL AND
              p_instance_rec.checkin_status <> fnd_api.g_miss_num) OR
             (p_instance_rec.supplier_warranty_exp_date IS NOT NULL AND
              p_instance_rec.supplier_warranty_exp_date <> fnd_api.g_miss_date))
         THEN
          IF l_eam_item
          THEN
            IF p_instance_rec.maintainable_flag IS NULL OR
               p_instance_rec.maintainable_flag = fnd_api.g_miss_char
            THEN
               p_instance_rec.maintainable_flag :='Y';
            END IF;

           IF NOT eam_assetnumber_pub.validate_fields
            (p_current_organization_id    => p_instance_rec.vld_organization_id
            ,p_inventory_item_id          => p_instance_rec.inventory_item_id
            ,p_serial_number              => p_instance_rec.serial_number
            ,p_network_asset_flag         => p_instance_rec.network_asset_flag
            ,p_maintainable_flag          => p_instance_rec.maintainable_flag
            ,p_pn_location_id             => p_instance_rec.pn_location_id
            ,p_asset_criticality_code     => p_instance_rec.asset_criticality_code
            ,p_category_id                => p_instance_rec.category_id
            ,p_equipment_object_id        => p_instance_rec.equipment_gen_object_id
            ,p_eam_linear_id              => p_instance_rec.linear_location_id
            ,p_operational_log_flag       => p_instance_rec.operational_log_flag
            ,p_checkin_status             => p_instance_rec.checkin_status
            ,p_supplier_warranty_exp_date => p_instance_rec.supplier_warranty_exp_date
            ,p_owning_department_id       => NULL
            ,x_reason_failed              => l_reason_failed
            ,x_token                      => l_token
            )
           THEN
          --  FND_MESSAGE.SET_NAME('CSI', l_reason_failed); -- commented for bug 5351886
          --  FND_MSG_PUB.Add;                              -- commented for bug 5351886
            csi_gen_utility_pvt.put_line('Call to eam_assetnumber_pub.validate_fields failed with following reason');
            csi_gen_utility_pvt.put_line(l_reason_failed);
            RAISE FND_API.G_EXC_ERROR;
           END IF;
          ELSE
            FND_MESSAGE.SET_NAME('CSI', 'CSI_NON_EAM_ITEM');
            FND_MSG_PUB.Add;
            RAISE FND_API.G_EXC_ERROR;
          END IF;
         END IF;
          -- Adding the following code as there could be a case
          -- where the item is an eam item but none of the eam columns were
          -- populated then above code will not assign a value to
          -- maintainable_flag.
          IF l_eam_item
          THEN
           IF p_instance_rec.maintainable_flag IS NULL OR
              p_instance_rec.maintainable_flag = fnd_api.g_miss_char
           THEN
              p_instance_rec.maintainable_flag :='Y';
           END IF;
          END IF;
        -- End addition for eam

        -- Validation for the Revision
        csi_item_instance_vld_pvt.Validate_Revision
                  (
                         p_inv_item_id              => p_instance_rec.inventory_item_id ,
                         p_inv_org_id               => p_instance_rec.vld_organization_id,
                         p_creation_complete_flag   => p_instance_rec.creation_complete_flag,
                         p_revision                 => p_instance_rec.inventory_revision,
                         l_return_value             => l_return_value,
                         p_rev_control_code         => l_rev_control
                   );

         IF l_return_value = FALSE THEN
            RAISE fnd_api.g_exc_error;
         END IF;
         -- Validation for the Lot Number
         csi_Item_Instance_Vld_pvt.Validate_Lot_Number
                   (
                         p_inv_org_id               => p_instance_rec.vld_organization_id,
                         p_inv_item_id              => p_instance_rec.inventory_item_id ,
                         p_lot_number               => p_instance_rec.lot_number,
                         p_mfg_serial_number_flag   => p_instance_rec.mfg_serial_number_flag,
                         p_txn_rec                  => p_txn_rec,
                         p_creation_complete_flag   => p_instance_rec.creation_complete_flag,
                         l_return_value             => l_return_value,
                         p_lot_control_code         => l_lot_control
                    );
         IF l_return_value = FALSE THEN
            RAISE fnd_api.g_exc_error;
         END IF;

         -- Validates the lot uniqueness and creates lot numbers in MLNs for manually created Instances
         -- Bug# 4011408
         IF ((p_instance_rec.lot_number <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.lot_number IS NOT NULL))
         THEN
            csi_gen_utility_pvt.put_line('Calling Create_Lot routine...');
            csi_item_instance_vld_pvt.Create_Lot
               (
                 p_inv_org_id                 =>  p_instance_rec.vld_organization_id,
                 p_inv_item_id                =>  p_instance_rec.inventory_item_id,
                 p_lot_number                 =>  p_instance_rec.lot_number,
                 p_shelf_life_code            =>  l_shelf_life_code,
                 p_instance_id                =>  p_instance_rec.instance_id,
                 l_return_value               =>  l_return_value
               );
             IF l_return_value = FALSE THEN
                RAISE fnd_api.g_exc_error;
             END IF;
         END IF;
         -- Creates Serial number in MSNs for manually created serialized CPs
         l_ins_flag := FND_API.G_FALSE;
         IF ((p_instance_rec.serial_number <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.serial_number IS NOT NULL)) /* AND
             (nvl(p_instance_rec.mfg_serial_number_flag,'N') <> 'Y') ) */
         THEN
           csi_gen_utility_pvt.put_line('Calling Create_Serial...');
           csi_item_instance_vld_pvt.Create_Serial
                   (
                         p_inv_org_id         =>  p_instance_rec.vld_organization_id,
                         p_inv_item_id        =>  p_instance_rec.inventory_item_id,
                         p_serial_number      =>  p_instance_rec.serial_number,
                         p_mfg_srl_num_flag   =>  p_instance_rec.mfg_serial_number_flag,
                         p_location_type_code =>  p_instance_rec.location_type_code,
                         p_ins_flag           =>  l_ins_flag,
                         p_lot_number         =>  p_instance_rec.lot_number,
                         p_gen_object_id      =>  l_gen_object_id,
                         l_return_value       =>  l_return_value
                   );

           IF l_return_value = FALSE THEN
              RAISE fnd_api.g_exc_error;
           ELSE
              IF nvl(p_instance_rec.mfg_serial_number_flag,'N') <> 'Y'
              THEN
                p_instance_rec.mfg_serial_number_flag := 'Y';
              END IF;
           END IF;

           IF l_eam_item AND
              l_equipment_type = 1
           THEN
              p_instance_rec.equipment_gen_object_id := l_gen_object_id;
           END IF;

           IF l_eam_item
           THEN
            csi_gen_utility_pvt.put_line( 'Calling eam_common_utilities_pvt.update_logical_asset...');
            csi_gen_utility_pvt.put_line( 'Inventory_item_id is       :'||p_instance_rec.inventory_item_id);
            csi_gen_utility_pvt.put_line( 'Serial_number is           :'||p_instance_rec.serial_number);
            csi_gen_utility_pvt.put_line( 'Network_asset_flag is      :'||p_instance_rec.network_asset_flag);
            csi_gen_utility_pvt.put_line( 'Pn_location_id is          :'||p_instance_rec.pn_location_id);
			csi_gen_utility_pvt.put_line( 'Equipment_gen_object_id is :'||p_instance_rec.equipment_gen_object_id);
             eam_common_utilities_pvt.update_logical_asset
               ( p_inventory_item_id       => p_instance_rec.inventory_item_id
                ,p_serial_number           => p_instance_rec.serial_number
                ,p_network_asset_flag      => p_instance_rec.network_asset_flag
                ,p_pn_location_id          => p_instance_rec.pn_location_id
                ,p_equipment_gen_object_id => p_instance_rec.equipment_gen_object_id
                ,x_return_status           => x_return_status
                );
	         IF NOT (x_return_status = FND_API.G_RET_STS_SUCCESS)
			 THEN
			    csi_gen_utility_pvt.put_line( 'Error from eam_common_utilities_pvt.update_logical_asset...');
	            RAISE fnd_api.g_exc_error;
	         END IF;
           END IF;

        END IF;
        -- Transaction Sequencing check
        -- By-pass sequencing if the serial number got created by the above routine
        IF p_instance_rec.serial_number IS NOT NULL AND
           p_instance_rec.serial_number <> FND_API.G_MISS_CHAR AND
           l_ins_flag = FND_API.G_FALSE THEN
	  --  l_check_instance_rec.instance_id := p_instance_rec.instance_id;
	   l_check_instance_rec.inventory_item_id := p_instance_rec.inventory_item_id;
	   l_check_instance_rec.serial_number := p_instance_rec.serial_number;
	   l_check_instance_rec.lot_number := p_instance_rec.lot_number;
	   l_check_instance_rec.last_txn_line_detail_id := p_instance_rec.last_txn_line_detail_id;
	   csi_gen_utility_pvt.put_line('Calling Check_Prior_Txn');
	   csi_Item_Instance_Vld_pvt.Check_Prior_Txn
		     (
		       p_instance_rec              => l_check_instance_rec
		      ,p_txn_rec                   => p_txn_rec
		      ,p_prior_txn_id              => l_prior_txn_id
               ,p_mode                      => 'CREATE'
		      ,x_return_status             => x_return_status
		     );
	   IF NOT (x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
	      RAISE fnd_api.g_exc_error;
	   END IF;
	END IF;
        -- Validation for the Serial Number
          csi_gen_utility_pvt.put_line('Calling Validate_Serial_Number...');
          csi_Item_Instance_Vld_pvt.Validate_Serial_Number
                   (
                         p_inv_org_id               => p_instance_rec.vld_organization_id,
                         p_inv_item_id              => p_instance_rec.inventory_item_id ,
                         p_serial_number            => p_instance_rec.serial_number,
                         p_mfg_serial_number_flag   => p_instance_rec.mfg_serial_number_flag,
                         p_txn_rec                  => p_txn_rec,
                         p_creation_complete_flag   => p_instance_rec.creation_complete_flag,
                         p_location_type_code       => p_instance_rec.location_type_code,
                         p_instance_usage_code      => p_instance_rec.instance_usage_code,
                         l_return_value             => l_return_value,
                         p_srl_control_code         => l_serial_control
                    );
         IF l_return_value = FALSE THEN
            RAISE fnd_api.g_exc_error;
         END IF;
         -- Validation for the Unit of Measure
         -- validate/convert only if the uom is not a primary uom
         IF p_instance_rec.unit_of_measure <> l_uom_code THEN
            csi_item_instance_vld_pvt.Is_Valid_Uom
                    (
                         p_inv_org_id               => p_instance_rec.inv_master_organization_id,
                         p_inv_item_id              => p_instance_rec.inventory_item_id ,
                         p_uom_code                 => p_instance_rec.unit_of_measure,
                         p_quantity                 => p_instance_rec.quantity,
                         p_creation_complete_flag   => p_instance_rec.creation_complete_flag,
                         l_return_value             => l_return_value
                    );
            IF l_return_value = FALSE THEN
               RAISE FND_API.G_EXC_ERROR;
            END IF;
         END IF;
   -- Validation for Location Source and Location ID
   IF p_instance_rec.location_type_code = FND_API.G_MISS_CHAR OR
      p_instance_rec.location_type_code IS NULL THEN
      IF p_instance_rec.creation_complete_flag = 'Y' THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_LOCATION');
         FND_MSG_PUB.ADD;
         RAISE fnd_api.g_exc_error;
      ELSE
         p_instance_rec.creation_complete_flag := 'N';
      END IF;
   ELSE
      IF p_instance_rec.location_id IS NULL OR
         p_instance_rec.location_id = FND_API.G_MISS_NUM THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_API_LOCATION_NOT_VALID');
         FND_MSG_PUB.ADD;
         RAISE fnd_api.g_exc_error;
      ELSE
         -- Validate location_id
         l_exists_flag := 'N';
         l_valid_flag := 'Y';
         IF p_location_tbl.count > 0 THEN
            For loc_row in p_location_tbl.FIRST .. p_location_tbl.LAST
            Loop
               IF p_location_tbl(loc_row).location_type_code = p_instance_rec.location_type_code AND
                  p_location_tbl(loc_row).location_id = p_instance_rec.location_id THEN
                  l_exists_flag := 'Y';
                  l_valid_flag := p_location_tbl(loc_row).valid_flag;
                  EXIT;
               END IF;
            End Loop;
            --
            IF l_valid_flag <> 'Y' THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_API_LOCATION_NOT_VALID');
               FND_MSG_PUB.ADD;
               RAISE fnd_api.g_exc_error;
            END IF;
         END IF; -- p_location_tbl count
         --
         IF l_exists_flag <> 'Y' THEN
            p_ins_count_rec.location_count := p_ins_count_rec.location_count + 1;
            p_location_tbl(p_ins_count_rec.location_count).location_type_code :=
                                           p_instance_rec.location_type_code;
            p_location_tbl(p_ins_count_rec.location_count).location_id := p_instance_rec.location_id;
            IF csi_item_instance_vld_pvt.Is_Valid_Location_ID
                                        (p_location_source_table => p_instance_rec.location_type_code
                                        ,p_location_id => p_instance_rec.location_id) THEN
               p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'Y';
            ELSE
               p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'N';
               RAISE fnd_api.g_exc_error;
            END IF;
         END IF;
         -- Validate Related Parameters
         IF NOT csi_item_instance_vld_pvt.Validate_Related_Loc_Params
                                   (
				     p_location_source_table => p_instance_rec.location_type_code,
				     p_location_id           => p_instance_rec.location_id,
				     p_organization_id       => p_instance_rec.inv_organization_id,
				     p_subinventory          => p_instance_rec.inv_subinventory_name,
				     p_locator_id            => p_instance_rec.inv_locator_id,
				     p_project_id            => p_instance_rec.pa_project_id,
				     p_task_id               => p_instance_rec.pa_project_task_id,
				     p_sales_ord_line_id     => p_instance_rec.in_transit_order_line_id,
				     p_wip_job_id            => p_instance_rec.wip_job_id,
				     p_po_line_id            => p_instance_rec.po_order_line_id,
				     p_inst_usage_code       => p_instance_rec.instance_usage_code
				   ) THEN
            RAISE fnd_api.g_exc_error;
         END IF;
      END IF; -- Location ID Valid
   END IF; -- Location Type code valid
   --
   -- Validation for the Quantity
   IF NOT csi_Item_Instance_Vld_pvt.Is_Quantity_Valid(
              p_instance_id         => p_instance_rec.instance_id,
              p_inv_organization_id => p_instance_rec.vld_organization_id,
              p_quantity            => p_instance_rec.quantity ,
              p_serial_control_code => l_serial_control,
              p_location_type_code  => p_instance_rec.location_type_code,
              p_flag                => 'CREATE',
              p_csi_txn_type_id     => p_txn_rec.transaction_type_id
            ) -- Added serial_control and location by sk on 09/14/01
   THEN
      RAISE fnd_api.g_exc_error;
   END IF;
   --validation for accounting classification_code
   IF (p_party_tbl.count < 1) THEN
      FND_MESSAGE.SET_NAME('CSI','CSI_API_NO_PARTY_RECORD');
      FND_MSG_PUB.Add;
      RAISE FND_API.G_EXC_ERROR;
   ELSE
      FOR l_count IN p_party_tbl.FIRST..p_party_tbl.LAST LOOP
         IF p_party_tbl.EXISTS(l_count) THEN
            IF p_party_tbl(l_count).relationship_type_code = 'OWNER' THEN
               l_owner_count := l_owner_count + 1;
               l_owner := P_PARTY_TBL(l_count).party_id;
            END IF;
         END IF;
      END LOOP;
      IF l_owner_count <> 1 THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_OWNER_EXISTS');
         FND_MESSAGE.SET_TOKEN('OWNER',l_owner);
         FND_MSG_PUB.Add;
         RAISE fnd_api.g_exc_error;
      END IF;
      --
      IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
         csi_gen_utility_pvt.populate_install_param_rec;
      END IF;
      --
      l_int_party_id := csi_datastructures_pub.g_install_param_rec.internal_party_id;
      --
      IF l_int_party_id IS NULL THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_API_UNINSTALLED_PARAMETER');
         FND_MSG_PUB.ADD;
         RAISE FND_API.G_EXC_ERROR;
      END IF;
      --
      --   Start code addition for eam integration
      /* Commented code for bug 4906588
      IF l_eam_item
      THEN
         p_instance_rec.ACCOUNTING_CLASS_CODE := 'ASSET';
      ELSE
      */
         --   End code addition for eam integration
         IF l_owner = l_int_party_id THEN
            IF p_asset_tbl.COUNT > 0 THEN
               p_instance_rec.ACCOUNTING_CLASS_CODE := 'ASSET';
            ELSIF p_instance_rec.location_type_code = 'WIP' THEN
               p_instance_rec.ACCOUNTING_CLASS_CODE := 'WIP';
            ELSIF p_instance_rec.location_type_code = 'PROJECT' THEN
               p_instance_rec.ACCOUNTING_CLASS_CODE := 'PROJECT';
            ELSE
               p_instance_rec.ACCOUNTING_CLASS_CODE := 'INV';
            END IF;
         ELSE
            IF ((p_instance_rec.accounting_class_code  IS NULL) OR
               (p_instance_rec.accounting_class_code = FND_API.G_MISS_CHAR)) THEN
               p_instance_rec.accounting_class_code := 'CUST_PROD';
            ELSE
               IF ((p_instance_rec.accounting_class_code = 'WIP') OR
                    (p_instance_rec.accounting_class_code = 'PROJECT')) THEN
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ACCOUNT_CLASS');
                  FND_MSG_PUB.Add;
                  RAISE FND_API.G_EXC_ERROR;
               END IF;
            END IF;
         END IF;
   --   END IF;
   END IF;

  --validation for owner uniqueness
   FOR l_count IN p_party_tbl.FIRST..p_party_tbl.LAST LOOP
      IF p_party_tbl.EXISTS(l_count) THEN
         IF p_party_tbl(l_count).relationship_type_code = 'OWNER' THEN
            l_party_owner_rec := p_party_tbl(l_count);
         END IF;
      END IF;
    END LOOP;
    IF NOT csi_item_instance_vld_pvt.Validate_Uniqueness
                   (p_instance_rec     => p_instance_rec,
                    p_party_rec        => l_party_owner_rec,
                    p_srl_control_code => l_serial_control,
                    p_csi_txn_type_id  => p_txn_rec.transaction_type_id)
    THEN

        RAISE FND_API.G_EXC_ERROR;
    END IF;
    -- validating the effective active start date
         IF ((p_instance_rec.active_start_date = FND_API.G_MISS_DATE) OR
             (p_instance_rec.active_start_date IS NULL)) THEN
                p_instance_rec.active_start_date := SYSDATE;
         END IF;

         IF (p_instance_rec.active_end_date = FND_API.G_MISS_DATE) THEN
             p_instance_rec.active_end_date := NULL;
         END IF;

         IF NOT (csi_item_instance_vld_pvt.Is_StartDate_Valid
                    (p_instance_rec.active_start_date,
                     p_instance_rec.active_end_date
                    )) THEN
                RAISE FND_API.G_EXC_ERROR;
         END IF;

--Check whether the active start date is > sysdate.
         IF ((p_instance_rec.active_start_date IS NOT NULL) AND
             (p_instance_rec.active_start_date <> FND_API.G_MISS_DATE)) AND
             (p_instance_rec.active_start_date > SYSDATE)
         THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_API_INSTANCE_START_DATE');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;

-- validating the effective active start date
         IF NOT (csi_item_instance_vld_pvt.Is_EndDate_Valid
                    (p_instance_rec.active_start_date,
                     p_instance_rec.active_end_date
                    )) THEN
                RAISE FND_API.G_EXC_ERROR;
         END IF;

--validation for the instance condition id
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF p_instance_rec.instance_condition_id is not null AND
            p_instance_rec.instance_condition_id <> FND_API.G_MISS_NUM then
            IF p_generic_id_tbl.count > 0 then
               For gen_count in p_generic_id_tbl.FIRST .. p_generic_id_tbl.LAST
               LOOP
                  IF p_generic_id_tbl(gen_count).generic_id = p_instance_rec.instance_condition_id AND
                     p_generic_id_tbl(gen_count).id_type = 'INS_CONDITION' then
                     l_valid_flag := p_generic_id_tbl(gen_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  END IF;
               END LOOP;
               --
               IF l_valid_flag <> 'Y' THEN
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM_CONDITION');
                  FND_MESSAGE.SET_TOKEN('INSTANCE_CONDITION_ID',p_instance_rec.instance_condition_id);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               END IF;
            END IF;
            --
	    IF l_exists_flag = 'N' THEN
               p_ins_count_rec.generic_count := p_ins_count_rec.generic_count + 1;
               p_generic_id_tbl(p_ins_count_rec.generic_count).generic_id := p_instance_rec.instance_condition_id;
               p_generic_id_tbl(p_ins_count_rec.generic_count).id_type := 'INS_CONDITION';
	       csi_item_instance_vld_pvt.Is_Valid_Condition
			    (
			    p_instance_condition_id  => p_instance_rec.instance_condition_id,
			    p_creation_complete_flag => p_instance_rec.creation_complete_flag,
			    l_return_value           => l_return_value
			   );
	       IF l_return_value = FALSE THEN
                  p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'N';
		  RAISE fnd_api.g_exc_error;
               ELSE
                  p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'Y';
	       END IF;
	    END IF;
         END IF;
         --
--validation for the instance status id
    l_valid_flag := 'Y';
    l_exists_flag := 'N';
    IF ((p_instance_rec.instance_status_id IS NULL) OR
        (p_instance_rec.instance_status_id = FND_API.G_MISS_NUM)) THEN
        l_instance_status := FND_PROFILE.VALUE('CSI_DEFAULT_INSTANCE_STATUS');
        BEGIN
            SELECT instance_status_id,terminated_flag
            INTO   p_instance_rec.instance_status_id
                  ,l_terminated_flag
            FROM   csi_instance_statuses
            WHERE  name = l_instance_status;
            --
            IF nvl(l_terminated_flag,'N') = 'Y' THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_API_STATUS_NOT_ALLOWED');
               FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
               FND_MSG_PUB.Add;
               RAISE FND_API.G_EXC_ERROR;
            END IF;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_STATUS_ID');
                FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
                FND_MSG_PUB.Add;
                RAISE FND_API.G_EXC_ERROR;
        END;
     ELSIF (p_instance_rec.instance_status_id = 1) THEN
           FND_MESSAGE.SET_NAME('CSI','CSI_API_STATUS_NOT_ALLOWED');
           FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
           FND_MSG_PUB.Add;
           RAISE FND_API.G_EXC_ERROR;
    ELSE
       IF p_generic_id_tbl.count > 0 THEN
          For gen_count in p_generic_id_tbl.FIRST .. p_generic_id_tbl.LAST
          LOOP
             IF p_generic_id_tbl(gen_count).generic_id = p_instance_rec.instance_status_id AND
                p_generic_id_tbl(gen_count).id_type = 'INS_STATUS' THEN
                l_valid_flag := p_generic_id_tbl(gen_count).valid_flag;
                l_terminated_flag := p_generic_id_tbl(gen_count).terminated_flag;
                l_exists_flag := 'Y';
                exit;
             END IF;
          END LOOP;
          --
          IF l_valid_flag <> 'Y' THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_STATUS_ID');
             FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
             FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
          END IF;
          --
          IF nvl(l_terminated_flag,'N') = 'Y' THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_API_STATUS_NOT_ALLOWED');
             FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
             FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
          END IF;
       END IF;
       --
       IF l_exists_flag <> 'Y' THEN
          p_ins_count_rec.generic_count := p_ins_count_rec.generic_count + 1;
          p_generic_id_tbl(p_ins_count_rec.generic_count).generic_id := p_instance_rec.instance_status_id;
          p_generic_id_tbl(p_ins_count_rec.generic_count).id_type := 'INS_STATUS';
          Begin
             select terminated_flag
             into l_terminated_flag
             from CSI_INSTANCE_STATUSES
             where instance_status_id = p_instance_rec.instance_status_id;
             --
             p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'Y';
             p_generic_id_tbl(p_ins_count_rec.generic_count).terminated_flag := l_terminated_flag;
             --
             IF nvl(l_terminated_flag,'N') = 'Y' THEN
                FND_MESSAGE.SET_NAME('CSI','CSI_API_STATUS_NOT_ALLOWED');
                FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
                FND_MSG_PUB.Add;
                RAISE FND_API.G_EXC_ERROR;
             END IF;
          Exception
             when others then
                p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'N';
                p_generic_id_tbl(p_ins_count_rec.generic_count).terminated_flag := NULL;
                FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_STATUS_ID');
                FND_MESSAGE.SET_TOKEN('INSTANCE_STATUS',p_instance_rec.instance_status_id);
                FND_MSG_PUB.Add;
                RAISE FND_API.G_EXC_ERROR;
          End;
       END IF;
    END IF;

--validation for the system id
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF p_instance_rec.system_id is not null AND
            p_instance_rec.system_id <> FND_API.G_MISS_NUM THEN
            IF p_generic_id_tbl.count > 0 then
               For gen_count in p_generic_id_tbl.FIRST .. p_generic_id_tbl.LAST
               LOOP
                  IF p_generic_id_tbl(gen_count).generic_id = p_instance_rec.system_id AND
                     p_generic_id_tbl(gen_count).id_type = 'SYSTEM' then
                     l_valid_flag := p_generic_id_tbl(gen_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  END IF;
               END LOOP;
               --
               IF l_valid_flag <> 'Y' THEN
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_SYSTEM_ID');
                  FND_MESSAGE.SET_TOKEN('SYSTEM_ID',p_instance_rec.system_id);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               END IF;
            END IF;
            --
            IF l_exists_flag <> 'Y' THEN
               p_ins_count_rec.generic_count := p_ins_count_rec.generic_count + 1;
               p_generic_id_tbl(p_ins_count_rec.generic_count).generic_id := p_instance_rec.system_id;
               p_generic_id_tbl(p_ins_count_rec.generic_count).id_type := 'SYSTEM';
               IF NOT csi_Item_Instance_Vld_pvt.Is_Valid_System_id(
                            p_instance_rec.system_id) THEN
                  p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'N';
                  RAISE fnd_api.g_exc_error;
               ELSE
                  p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'Y';
               END IF;
            END IF;
         END IF;

--validation for the instance type
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_instance_rec.instance_type_code IS NOT NULL) AND
             (p_instance_rec.instance_type_code <> FND_API.G_MISS_CHAR)) THEN
            IF p_lookup_tbl.count > 0 then
               For lookup_count in p_lookup_tbl.FIRST .. p_lookup_tbl.LAST
               LOOP
                  IF p_lookup_tbl(lookup_count).lookup_type = 'INSTANCE_TYPE' AND
                     p_lookup_tbl(lookup_count).lookup_code = p_instance_rec.instance_type_code THEN
                     l_valid_flag := p_lookup_tbl(lookup_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  END IF;
               END LOOP;
               --
               IF l_valid_flag <> 'Y' THEN
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_INSTANCE_TYPE');
                  FND_MESSAGE.SET_TOKEN('INSTANCE_TYPE_CODE',p_instance_rec.instance_type_code);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               END IF;
            END IF;
            --
            IF l_exists_flag <> 'Y' THEN
               p_ins_count_rec.lookup_count := p_ins_count_rec.lookup_count  + 1;
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_type := 'INSTANCE_TYPE';
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_code := p_instance_rec.instance_type_code;
               IF NOT csi_Item_Instance_Vld_pvt.Is_Valid_Instance_Type(
                         p_instance_rec.instance_type_code) THEN
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'N';
                  RAISE fnd_api.g_exc_error;
               ELSE
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'Y';
               END IF;
            END IF;
         END IF;
--validation for the instance usage code
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_instance_rec.instance_usage_code IS NOT NULL) AND
             (p_instance_rec.instance_usage_code <> FND_API.G_MISS_CHAR)) THEN
            IF p_lookup_tbl.count > 0 THEN
               For lookup_count in p_lookup_tbl.FIRST .. p_lookup_tbl.LAST
               LOOP
                  IF p_lookup_tbl(lookup_count).lookup_type = 'INSTANCE_USAGE' AND
                     p_lookup_tbl(lookup_count).lookup_code = p_instance_rec.instance_usage_code THEN
                     l_valid_flag := p_lookup_tbl(lookup_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  END IF;
               End Loop;
               --
               if l_valid_flag <> 'Y' then
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_USAGE_CODE');
                  FND_MESSAGE.SET_TOKEN('INSTANCE_USAGE_CODE',p_instance_rec.instance_usage_code);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               end if;
            End if;
            --
            IF l_exists_flag <> 'Y' THEN
               p_ins_count_rec.lookup_count := p_ins_count_rec.lookup_count  + 1;
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_type := 'INSTANCE_USAGE';
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_code := p_instance_rec.instance_usage_code;
               IF NOT csi_Item_Instance_Vld_pvt.Valid_Inst_Usage_Code(
                         p_instance_rec.instance_usage_code) THEN
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'N';
                  RAISE fnd_api.g_exc_error;
               ELSE
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'Y';
               END IF;
            END IF;
         END IF;
   -- Addition of columns for FA Integration
   --validation for the operational status
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_instance_rec.operational_status_code IS NOT NULL) AND
             (p_instance_rec.operational_status_code <> FND_API.G_MISS_CHAR)) THEN
            IF p_lookup_tbl.count > 0 THEN
               For lookup_count in p_lookup_tbl.FIRST .. p_lookup_tbl.LAST
               LOOP
                  IF p_lookup_tbl(lookup_count).lookup_type = 'OPERATIONAL_STATUS' AND
                     p_lookup_tbl(lookup_count).lookup_code = p_instance_rec.operational_status_code
                  THEN
                     l_valid_flag := p_lookup_tbl(lookup_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  END IF;
               End Loop;
               --
               if l_valid_flag <> 'Y' then
                  FND_MESSAGE.SET_NAME('CSI','CSI_OPERATIONAL_STATUS_CODE');
                  FND_MESSAGE.SET_TOKEN('OPERATIONAL_STATUS_CODE',p_instance_rec.operational_status_code);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               end if;
            End if;
            --
            IF l_exists_flag <> 'Y' THEN
               p_ins_count_rec.lookup_count := p_ins_count_rec.lookup_count  + 1;
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_type := 'OPERATIONAL_STATUS';
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_code := p_instance_rec.operational_status_code;
               IF NOT csi_Item_Instance_Vld_pvt.Valid_operational_status(
                         p_instance_rec.operational_status_code) THEN
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'N';
                  RAISE fnd_api.g_exc_error;
               ELSE
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'Y';
               END IF;
            END IF;
         ELSE
          IF ((p_instance_rec.operational_status_code IS NULL) OR
              (p_instance_rec.operational_status_code = FND_API.G_MISS_CHAR))
          THEN
               p_instance_rec.operational_status_code:='NOT_USED';
          END IF;
         END IF;


 -- Following code has been added for operational_status_code
 -- If owner is Internal then


         IF l_owner = l_int_party_id
         THEN
            IF    p_instance_rec.location_type_code IN ('WIP','IN_TRANSIT','VENDOR_SITE')
              AND p_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE')
            THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
            ELSIF p_instance_rec.location_type_code IN ('PROJECT')
              AND p_instance_rec.operational_status_code ='IN_SERVICE'
             THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
            ELSIF p_instance_rec.location_type_code IN ('INVENTORY','HZ_LOCATIONS')
              AND p_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
             THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
            END IF;
         ELSE -- Owner is an external party
            IF    p_instance_rec.location_type_code IN ('WIP','IN_TRANSIT','VENDOR_SITE')
              AND p_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE')
            THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
            ELSIF p_instance_rec.location_type_code ='PROJECT'
              AND p_instance_rec.operational_status_code ='IN_SERVICE'
             THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
            ELSIF p_instance_rec.location_type_code IN ('INVENTORY','HZ_LOCATIONS')
              AND p_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
             THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
            END IF;
         END IF;


         IF ((p_instance_rec.purchase_currency_code IS NOT NULL) AND
             (p_instance_rec.purchase_currency_code <> FND_API.G_MISS_CHAR)
             )
         THEN
           p_instance_rec.purchase_currency_code := UPPER(p_instance_rec.purchase_currency_code);
           IF NOT csi_item_instance_vld_pvt.valid_currency_code
                 (p_currency_code => p_instance_rec.purchase_currency_code)
           THEN
              RAISE fnd_api.g_exc_error;
           END IF;
         END IF;

         IF ((p_instance_rec.payables_currency_code IS NOT NULL) AND
             (p_instance_rec.payables_currency_code <> FND_API.G_MISS_CHAR)
             )
         THEN
           p_instance_rec.payables_currency_code := UPPER(p_instance_rec.payables_currency_code);
           IF NOT csi_item_instance_vld_pvt.valid_currency_code
                 (p_currency_code => p_instance_rec.payables_currency_code)
           THEN
              RAISE fnd_api.g_exc_error;
           END IF;
         END IF;

         IF ((p_instance_rec.sales_currency_code IS NOT NULL) AND
             (p_instance_rec.sales_currency_code <> FND_API.G_MISS_CHAR)
             )
         THEN
           p_instance_rec.sales_currency_code := UPPER(p_instance_rec.sales_currency_code);
           IF NOT csi_item_instance_vld_pvt.valid_currency_code
                 (p_currency_code => p_instance_rec.sales_currency_code)
           THEN
              RAISE fnd_api.g_exc_error;
           END IF;
         END IF;

         IF (
             ((p_instance_rec.purchase_currency_code IS NOT NULL AND
               p_instance_rec.purchase_currency_code <> FND_API.G_MISS_CHAR) AND
              (p_instance_rec.purchase_unit_price IS NULL OR
               p_instance_rec.purchase_unit_price = FND_API.G_MISS_NUM))
               OR
             ((p_instance_rec.purchase_currency_code IS NULL OR
               p_instance_rec.purchase_currency_code = FND_API.G_MISS_CHAR) AND
              (p_instance_rec.purchase_unit_price IS NOT NULL AND
               p_instance_rec.purchase_unit_price <> FND_API.G_MISS_NUM))
               OR
             ((p_instance_rec.payables_currency_code IS NOT NULL AND
               p_instance_rec.payables_currency_code <> FND_API.G_MISS_CHAR) AND
              (p_instance_rec.payables_unit_price IS NULL OR
               p_instance_rec.payables_unit_price = FND_API.G_MISS_NUM))
               OR
             ((p_instance_rec.payables_currency_code IS NULL OR
               p_instance_rec.payables_currency_code = FND_API.G_MISS_CHAR) AND
              (p_instance_rec.payables_unit_price IS NOT NULL AND
               p_instance_rec.payables_unit_price <> FND_API.G_MISS_NUM))
               OR
             ((p_instance_rec.sales_currency_code IS NOT NULL AND
               p_instance_rec.sales_currency_code <> FND_API.G_MISS_CHAR) AND
              (p_instance_rec.sales_unit_price IS NULL OR
               p_instance_rec.sales_unit_price = FND_API.G_MISS_NUM))
               OR
             ((p_instance_rec.sales_currency_code IS NULL OR
               p_instance_rec.sales_currency_code = FND_API.G_MISS_CHAR) AND
              (p_instance_rec.sales_unit_price IS NOT NULL AND
               p_instance_rec.sales_unit_price <> FND_API.G_MISS_NUM))
            )
         THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_NO_PRICE_OR_CODE');
             FND_MSG_PUB.Add;
             RAISE fnd_api.g_exc_error;
         END IF;
       -- End addition of columns for FA Integration

--validation for customer view flag
    IF ((p_instance_rec.CUSTOMER_VIEW_FLAG IS NULL) OR
        (p_instance_rec.CUSTOMER_VIEW_FLAG  = FND_API.G_MISS_CHAR)) THEN
            p_instance_rec.CUSTOMER_VIEW_FLAG  := 'Y';
    END IF;

--validation for merchant view flag
    IF ((p_instance_rec.MERCHANT_VIEW_FLAG IS NULL) OR
        (p_instance_rec.MERCHANT_VIEW_FLAG  = FND_API.G_MISS_CHAR)) THEN
            p_instance_rec.MERCHANT_VIEW_FLAG  := 'N';
    END IF;

--validation for sellable flag
    IF ((p_instance_rec.SELLABLE_FLAG IS NULL) OR
        (p_instance_rec.SELLABLE_FLAG  = FND_API.G_MISS_CHAR)) THEN
            p_instance_rec.SELLABLE_FLAG  := 'Y';
    END IF;

-- Begin Add Code for Siebel Genesis Project
--validation for source_code
    IF ((p_instance_rec.SOURCE_CODE IS NULL) OR
        (p_instance_rec.SOURCE_CODE = FND_API.G_MISS_CHAR)) THEN
      p_instance_rec.SOURCE_CODE := 'ORCL';
    END IF;
-- End Add Code for Siebel Genesis Project

-- Validation of Creation_completion_flag
        IF ((p_instance_rec.instance_id IS NOT NULL)
           AND (p_instance_rec.inventory_item_id IS NOT NULL)
           AND (p_instance_rec.inv_master_organization_id IS NOT NULL)
          -- AND (((l_serial_control IN (2,5,6))
             AND (((csi_Item_Instance_Vld_pvt.Is_treated_serialized
                                      ( p_serial_control_code => l_serial_control
                                       ,p_location_type_code  => p_instance_rec.location_type_code
                                       ,p_transaction_type_id => p_txn_rec.transaction_type_id
                                       ))     --Added by sk on 09/13/01
                   AND ((p_instance_rec.serial_number IS NOT NULL)
                          AND (p_instance_rec.serial_number <> FND_API.G_MISS_CHAR)))
                -- OR     (l_serial_control NOT IN (2,5,6)))
                   OR ( NOT (csi_Item_Instance_Vld_pvt.Is_treated_serialized
                                                  ( p_serial_control_code => l_serial_control
                                                   ,p_location_type_code  => p_instance_rec.location_type_code
                                                   ,p_transaction_type_id => p_txn_rec.transaction_type_id
                                                   )) ) ) --Added by sk on 09/13/01
           AND (((l_lot_control = 2)
                   AND ((p_instance_rec.lot_number IS NOT NULL)
                          AND (p_instance_rec.lot_number <> FND_API.G_MISS_CHAR)))
                   OR     (l_lot_control <> 2))
           AND (p_instance_rec.instance_status_id IS NOT NULL)
           AND (((l_rev_control = 2)
                   AND ((p_instance_rec.inventory_revision IS NOT NULL)
                          AND (p_instance_rec.inventory_revision <> FND_API.G_MISS_CHAR)))
                   OR     (l_rev_control <> 2))
           AND ((p_instance_rec.location_type_code IS NOT NULL) AND
                (p_instance_rec.location_type_code <> FND_API.G_MISS_CHAR)))
        THEN
               p_instance_rec.creation_complete_flag := 'Y';
        ELSE
               p_instance_rec.creation_complete_flag := 'N';
        END IF;

        IF    p_instance_rec.vld_organization_id IS NOT NULL
         AND  p_instance_rec.vld_organization_id <> fnd_api.g_miss_num
        THEN
              l_last_vld_organization_id := p_instance_rec.vld_organization_id;
        ELSE
              l_last_vld_organization_id := p_instance_rec.inv_master_organization_id;
        END IF;

        -- Validation for install location
        -- Start addition by sk on 02/06/02 for bug 2213922
        IF p_instance_rec.install_location_type_code IS NOT NULL AND
           p_instance_rec.install_location_type_code <> fnd_api.g_miss_char
        THEN
           IF p_instance_rec.install_location_type_code = 'HZ_PARTY_SITES' OR
              p_instance_rec.install_location_type_code = 'HZ_LOCATIONS' OR
              p_instance_rec.install_location_type_code = 'VENDOR_SITE' OR
              p_instance_rec.install_location_type_code = 'INTERNAL_SITE' OR --4926773
	      p_instance_rec.install_location_type_code = 'HR_LOCATIONS'
           THEN
              IF p_instance_rec.install_location_id IS NULL OR
                 p_instance_rec.install_location_id = FND_API.G_MISS_NUM THEN
                 FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INSTALL_LOC');
                 FND_MSG_PUB.ADD;
                 RAISE fnd_api.g_exc_error;
              END IF;
              --
              l_exists_flag := 'N';
              l_valid_flag := 'Y';
              IF p_location_tbl.count > 0 THEN
                 For loc_row in p_location_tbl.FIRST .. p_location_tbl.LAST
                 Loop
                    IF p_location_tbl(loc_row).location_type_code = p_instance_rec.install_location_type_code
                       AND p_location_tbl(loc_row).location_id = p_instance_rec.install_location_id THEN
                       l_exists_flag := 'Y';
                       l_valid_flag := p_location_tbl(loc_row).valid_flag;
                       EXIT;
                    END IF;
                 End Loop;
                 --
                 IF l_valid_flag <> 'Y' THEN
                    FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INSTALL_LOC');
                    FND_MSG_PUB.ADD;
                    RAISE fnd_api.g_exc_error;
                 END IF;
              END IF;
              --
               IF l_exists_flag <> 'Y' THEN
                  p_ins_count_rec.location_count := p_ins_count_rec.location_count + 1;
                  p_location_tbl(p_ins_count_rec.location_count).location_type_code :=
                                                     p_instance_rec.install_location_type_code;
                  p_location_tbl(p_ins_count_rec.location_count).location_id :=
                                                     p_instance_rec.install_location_id;
                  IF csi_item_instance_vld_pvt.Is_Valid_Location_ID
                                       (
                                         p_location_source_table => p_instance_rec.install_location_type_code
                                        ,p_location_id => p_instance_rec.install_location_id
                                       ) THEN
                     p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'Y';
                  ELSE
                     p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'N';
                     RAISE fnd_api.g_exc_error;
                  END IF;
               END IF;
           ELSE
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INSTALL_LOC');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
        END IF;
        csi_gen_utility_pvt.put_line('Before Insert row...');
        -- End addition by sk on 02/06/02 for bug 2213922
    IF p_called_from_grp <> fnd_api.g_true THEN
-- Create a row in csi_item_instances
      CSI_ITEM_INSTANCES_PKG.Insert_Row
       (  px_INSTANCE_ID                    => p_instance_rec.INSTANCE_ID
          ,p_INSTANCE_NUMBER                => p_instance_rec.INSTANCE_NUMBER
          ,p_EXTERNAL_REFERENCE             => p_instance_rec.EXTERNAL_REFERENCE
          ,p_INVENTORY_ITEM_ID              => p_instance_rec.INVENTORY_ITEM_ID
          ,p_INVENTORY_REVISION             => p_instance_rec.INVENTORY_REVISION
          ,p_INV_MASTER_ORGANIZATION_ID     => p_instance_rec.INV_MASTER_ORGANIZATION_ID
          ,p_SERIAL_NUMBER                  => p_instance_rec.SERIAL_NUMBER
          ,p_MFG_SERIAL_NUMBER_FLAG         => p_instance_rec.MFG_SERIAL_NUMBER_FLAG
          ,p_LOT_NUMBER                     => p_instance_rec.LOT_NUMBER
          ,p_QUANTITY                       => p_instance_rec.QUANTITY
          ,p_UNIT_OF_MEASURE                => p_instance_rec.UNIT_OF_MEASURE
          ,p_ACCOUNTING_CLASS_CODE          => p_instance_rec.ACCOUNTING_CLASS_CODE
          ,p_INSTANCE_CONDITION_ID          => p_instance_rec.INSTANCE_CONDITION_ID
          ,p_INSTANCE_STATUS_ID             => p_instance_rec.INSTANCE_STATUS_ID
          ,p_CUSTOMER_VIEW_FLAG             => p_instance_rec.CUSTOMER_VIEW_FLAG
          ,p_MERCHANT_VIEW_FLAG             => p_instance_rec.MERCHANT_VIEW_FLAG
          ,p_SELLABLE_FLAG                  => p_instance_rec.SELLABLE_FLAG
          ,p_SYSTEM_ID                      => p_instance_rec.SYSTEM_ID
          ,p_INSTANCE_TYPE_CODE             => p_instance_rec.INSTANCE_TYPE_CODE
          ,p_ACTIVE_START_DATE              => p_instance_rec.ACTIVE_START_DATE
          ,p_ACTIVE_END_DATE                => p_instance_rec.ACTIVE_END_DATE
          ,p_LOCATION_TYPE_CODE             => p_instance_rec.LOCATION_TYPE_CODE
          ,p_LOCATION_ID                    => p_instance_rec.LOCATION_ID
          ,p_INV_ORGANIZATION_ID            => p_instance_rec.INV_ORGANIZATION_ID
          ,p_INV_SUBINVENTORY_NAME          => p_instance_rec.INV_SUBINVENTORY_NAME
          ,p_INV_LOCATOR_ID                 => p_instance_rec.INV_LOCATOR_ID
          ,p_PA_PROJECT_ID                  => p_instance_rec.PA_PROJECT_ID
          ,p_PA_PROJECT_TASK_ID             => p_instance_rec.PA_PROJECT_TASK_ID
          ,p_IN_TRANSIT_ORDER_LINE_ID       => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
          ,p_WIP_JOB_ID                     => p_instance_rec.WIP_JOB_ID
          ,p_PO_ORDER_LINE_ID               => p_instance_rec.PO_ORDER_LINE_ID
          ,p_LAST_OE_ORDER_LINE_ID          => p_instance_rec.LAST_OE_ORDER_LINE_ID
          ,p_LAST_OE_RMA_LINE_ID            => p_instance_rec.LAST_OE_RMA_LINE_ID
          ,p_LAST_PO_PO_LINE_ID             => p_instance_rec.LAST_PO_PO_LINE_ID
          ,p_LAST_OE_PO_NUMBER              => p_instance_rec.LAST_OE_PO_NUMBER
          ,p_LAST_WIP_JOB_ID                => p_instance_rec.LAST_WIP_JOB_ID
          ,p_LAST_PA_PROJECT_ID             => p_instance_rec.LAST_PA_PROJECT_ID
          ,p_LAST_PA_TASK_ID                => p_instance_rec.LAST_PA_TASK_ID
          ,p_LAST_OE_AGREEMENT_ID           => p_instance_rec.LAST_OE_AGREEMENT_ID
          ,p_INSTALL_DATE                   => p_instance_rec.INSTALL_DATE
          ,p_MANUALLY_CREATED_FLAG          => p_instance_rec.MANUALLY_CREATED_FLAG
          ,p_RETURN_BY_DATE                 => p_instance_rec.RETURN_BY_DATE
          ,p_ACTUAL_RETURN_DATE             => p_instance_rec.ACTUAL_RETURN_DATE
          ,p_CREATION_COMPLETE_FLAG         => p_instance_rec.CREATION_COMPLETE_FLAG
          ,p_COMPLETENESS_FLAG              => p_instance_rec.COMPLETENESS_FLAG
          ,p_CONTEXT                        => p_instance_rec.CONTEXT
          ,p_ATTRIBUTE1                     => p_instance_rec.ATTRIBUTE1
          ,p_ATTRIBUTE2                     => p_instance_rec.ATTRIBUTE2
          ,p_ATTRIBUTE3                     => p_instance_rec.ATTRIBUTE3
          ,p_ATTRIBUTE4                     => p_instance_rec.ATTRIBUTE4
          ,p_ATTRIBUTE5                     => p_instance_rec.ATTRIBUTE5
          ,p_ATTRIBUTE6                     => p_instance_rec.ATTRIBUTE6
          ,p_ATTRIBUTE7                     => p_instance_rec.ATTRIBUTE7
          ,p_ATTRIBUTE8                     => p_instance_rec.ATTRIBUTE8
          ,p_ATTRIBUTE9                     => p_instance_rec.ATTRIBUTE9
          ,p_ATTRIBUTE10                    => p_instance_rec.ATTRIBUTE10
          ,p_ATTRIBUTE11                    => p_instance_rec.ATTRIBUTE11
          ,p_ATTRIBUTE12                    => p_instance_rec.ATTRIBUTE12
          ,p_ATTRIBUTE13                    => p_instance_rec.ATTRIBUTE13
          ,p_ATTRIBUTE14                    => p_instance_rec.ATTRIBUTE14
          ,p_ATTRIBUTE15                    => p_instance_rec.ATTRIBUTE15
          ,p_CREATED_BY                     => FND_GLOBAL.USER_ID
          ,p_CREATION_DATE                  => SYSDATE
          ,p_LAST_UPDATED_BY                => FND_GLOBAL.USER_ID
          ,p_LAST_UPDATE_DATE               => SYSDATE
          ,p_LAST_UPDATE_LOGIN              => FND_GLOBAL.CONC_LOGIN_ID
          ,p_OBJECT_VERSION_NUMBER          => 1
          ,p_LAST_TXN_LINE_DETAIL_ID        => p_instance_rec.LAST_TXN_LINE_DETAIL_ID
          ,p_INSTALL_LOCATION_TYPE_CODE     => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
          ,p_INSTALL_LOCATION_ID            => p_instance_rec.INSTALL_LOCATION_ID
          ,p_INSTANCE_USAGE_CODE            => p_instance_rec.INSTANCE_USAGE_CODE
          ,p_last_vld_organization_id       => l_last_vld_organization_id
          ,p_CONFIG_INST_HDR_ID             => p_instance_rec.CONFIG_INST_HDR_ID
          ,p_CONFIG_INST_REV_NUM            => p_instance_rec.CONFIG_INST_REV_NUM
          ,p_CONFIG_INST_ITEM_ID            => p_instance_rec.CONFIG_INST_ITEM_ID
          ,p_CONFIG_VALID_STATUS            => p_instance_rec.CONFIG_VALID_STATUS
          ,p_INSTANCE_DESCRIPTION           => p_instance_rec.INSTANCE_DESCRIPTION
          ,p_REQUEST_ID                     => p_instance_rec.REQUEST_ID
          ,p_PROGRAM_APPLICATION_ID         => p_instance_rec.PROGRAM_APPLICATION_ID
          ,p_PROGRAM_ID                     => p_instance_rec.PROGRAM_ID
          ,p_PROGRAM_UPDATE_DATE            => p_instance_rec.PROGRAM_UPDATE_DATE
	  --start of parameters addition for eam integration--
          ,p_NETWORK_ASSET_FLAG             => p_instance_rec.NETWORK_ASSET_FLAG
          ,p_MAINTAINABLE_FLAG              => p_instance_rec.MAINTAINABLE_FLAG
          ,p_PN_LOCATION_ID                 => p_instance_rec.PN_LOCATION_ID
          ,p_ASSET_CRITICALITY_CODE         => p_instance_rec.ASSET_CRITICALITY_CODE
          ,p_CATEGORY_ID                    => p_instance_rec.CATEGORY_ID
          ,p_EQUIPMENT_GEN_OBJECT_ID        => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID
          ,p_INSTANTIATION_FLAG             => p_instance_rec.INSTANTIATION_FLAG
          ,p_LINEAR_LOCATION_ID             => p_instance_rec.LINEAR_LOCATION_ID
          ,p_OPERATIONAL_LOG_FLAG           => p_instance_rec.OPERATIONAL_LOG_FLAG
          ,p_CHECKIN_STATUS                 => p_instance_rec.CHECKIN_STATUS
          ,p_SUPPLIER_WARRANTY_EXP_DATE     => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
          ,p_ATTRIBUTE16                    => p_instance_rec.ATTRIBUTE16
          ,p_ATTRIBUTE17                    => p_instance_rec.ATTRIBUTE17
          ,p_ATTRIBUTE18                    => p_instance_rec.ATTRIBUTE18
          ,p_ATTRIBUTE19                    => p_instance_rec.ATTRIBUTE19
          ,p_ATTRIBUTE20                    => p_instance_rec.ATTRIBUTE20
          ,p_ATTRIBUTE21                    => p_instance_rec.ATTRIBUTE21
          ,p_ATTRIBUTE22                    => p_instance_rec.ATTRIBUTE22
          ,p_ATTRIBUTE23                    => p_instance_rec.ATTRIBUTE23
          ,p_ATTRIBUTE24                    => p_instance_rec.ATTRIBUTE24
          ,p_ATTRIBUTE25                    => p_instance_rec.ATTRIBUTE25
          ,p_ATTRIBUTE26                    => p_instance_rec.ATTRIBUTE26
          ,p_ATTRIBUTE27                    => p_instance_rec.ATTRIBUTE27
          ,p_ATTRIBUTE28                    => p_instance_rec.ATTRIBUTE28
          ,p_ATTRIBUTE29                    => p_instance_rec.ATTRIBUTE29
          ,p_ATTRIBUTE30                    => p_instance_rec.ATTRIBUTE30
	  --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
          ,p_PURCHASE_UNIT_PRICE            => p_instance_rec.PURCHASE_UNIT_PRICE
          ,p_PURCHASE_CURRENCY_CODE         => p_instance_rec.PURCHASE_CURRENCY_CODE
          ,p_PAYABLES_UNIT_PRICE            => p_instance_rec.PAYABLES_UNIT_PRICE
          ,p_PAYABLES_CURRENCY_CODE         => p_instance_rec.PAYABLES_CURRENCY_CODE
          ,p_SALES_UNIT_PRICE               => p_instance_rec.SALES_UNIT_PRICE
          ,p_SALES_CURRENCY_CODE            => p_instance_rec.SALES_CURRENCY_CODE
          ,p_OPERATIONAL_STATUS_CODE        => p_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
          ,p_SOURCE_CODE                    => p_instance_rec.SOURCE_CODE -- Added Code for Siebel Genesis Project
	  );



    IF NVL(l_call_counters,'N') = 'Y' AND
       NVL(p_instance_rec.network_asset_flag,'N') <> 'Y' -- Added for 5219534
    THEN
       IF p_instance_rec.quantity = 1 THEN
          -- calling the Counters API to associate counters to an instance
          -- Added to restrict the counter instantiation for an item in 'INVENTORY',
          -- by rtalluri for the enh. 2308703
	  IF NOT((l_serial_control IN (1,6)) AND
		 (p_instance_rec.location_type_code = 'INVENTORY')) THEN

      -- Since the replacement API CSI_COUNTER_TEMPLATE_PUB does not
      -- for  CS_Counters_PUB.Ctr_Grp_Template_Exists
      -- does not provide a function Ctr_Grp_Template_Exists,
      -- Hence writing the following code...
        --l_counter_group_id := NULL;
        BEGIN
          SELECT count(*)
            INTO l_counter_group_id
            FROM csi_ctr_item_associations
           WHERE inventory_item_id = p_instance_rec.inventory_item_id
             AND ROWNUM = 1;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
           NULL;
           -- Too many rows exception will not arise
           -- as ctr API will make sure there will be only one record in
           -- csi_ctr_item_associations with a particular inv_id.
        END;
       -- R12 Changes ...
	   /* IF CS_Counters_PUB.Ctr_Grp_Template_Exists(p_instance_rec.inventory_item_id) THEN
	       CS_Counters_PUB.AutoInstantiate_Counters */
	    IF l_counter_group_id <> 0
        THEN
	      -- CS_Counters_PUB.AutoInstantiate_Counters
         csi_counter_template_pub.autoinstantiate_counters
         ( p_api_version                => 1.0
          ,p_init_msg_list              => FND_API.G_FALSE
          ,p_commit                     => FND_API.G_FALSE
          ,x_return_status              => x_return_status
          ,x_msg_count                  => x_msg_count
          ,x_msg_data                   => x_msg_data
          ,p_source_object_id_template  => p_instance_rec.inventory_item_id
          ,p_source_object_id_instance  => p_instance_rec.instance_id
          ,x_ctr_id_template            => l_ctr_id_template
          ,x_ctr_id_instance            => l_ctr_id_instance
          ,x_ctr_grp_id_template        => l_ctr_grp_id_template
          ,x_ctr_grp_id_instance        => l_ctr_grp_id_instance
          ,p_organization_id            => l_last_vld_organization_id -- srramakr. should pass the organization_id
          );

        IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS)
        THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_API_NO_COUNTER_ASSOCIATION');
             FND_MESSAGE.SET_TOKEN('COUNTER','CSI_COUNTER_TEMPLATE_PUB.AUTOINSTANTIATE_COUNTERS');
             FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
        END IF;
	  -- srramakr Bug # 2255391. In CTO, since the configured item is created as a part of Sales Order
	  -- processing, there is no way a counter gets attached to this new item.
          -- In order to attach the counter, we look at the base model and use its counter group
          -- for the configured item. After attaching it, we call the Autoinstantiate API.
	   ELSE
	     l_base_item_id := null;
	     Begin
		select base_item_id
		into l_base_item_id
		from MTL_SYSTEM_ITEMS_B
		where inventory_item_id = p_instance_rec.inventory_item_id
		and   organization_id = l_last_vld_organization_id;
	     Exception
		when no_data_found then
		   null;
		when others then
		   null;
	     End;
	     --
	     IF l_base_item_id is not null THEN
		-- call the Counter Grp association API for the Configured Item
		   For ctr_rec in CTR_GROUP(l_base_item_id)
		   Loop
		      Begin
	       IF(ctr_rec.group_id is not null) then
                l_ctr_item_associations_rec.group_id          := ctr_rec.group_id;
	       END IF;
	       IF(ctr_rec.counter_id is not null) then
                l_ctr_item_associations_rec.counter_id          := ctr_rec.counter_id;
	       END IF;
               l_ctr_item_associations_rec.inventory_item_id := p_instance_rec.inventory_item_id;
	       IF(ctr_rec.associated_to_group = 'Y') THEN
                l_ctr_item_associations_rec.associated_to_group := ctr_rec.associated_to_group;-- Added for bug 9142776
	       END IF;

			--CS_Counters_PUB.Create_Ctr_Association
               csi_counter_template_pub.create_item_association
               (p_api_version               => 1.0
               ,p_commit                    => fnd_api.g_false
               ,p_init_msg_list             => fnd_api.g_false
               ,p_validation_level          => p_validation_level
               ,p_ctr_item_associations_rec => l_ctr_item_associations_rec
               ,x_return_status             => x_return_status
               ,x_msg_count                 => x_msg_count
               ,x_msg_data                  => x_msg_data
               );
	       l_counter_group_id    := 1; -- Added for bug 9142776 -- As the assotiation for the configured item and this group ID has been created now
		   End;
		End Loop;
		   --
		--IF CS_Counters_PUB.Ctr_Grp_Template_Exists(p_instance_rec.inventory_item_id) THEN
          IF l_counter_group_id <> 0 THEN

          csi_counter_template_pub.autoinstantiate_counters
          ( p_api_version                => 1.0
           ,p_init_msg_list              => FND_API.G_FALSE
           ,p_commit                     => FND_API.G_FALSE
           ,x_return_status              => x_return_status
           ,x_msg_count                  => x_msg_count
           ,x_msg_data                   => x_msg_data
           ,p_source_object_id_template  => p_instance_rec.inventory_item_id
           ,p_source_object_id_instance  => p_instance_rec.instance_id
           ,x_ctr_id_template            => l_ctr_id_template
           ,x_ctr_id_instance            => l_ctr_id_instance
           ,x_ctr_grp_id_template        => l_ctr_grp_id_template
           ,x_ctr_grp_id_instance        => l_ctr_grp_id_instance
           ,p_organization_id            => l_last_vld_organization_id -- srramakr. should pass the organization_id
           );
		      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
			 FND_MESSAGE.SET_NAME('CSI','CSI_API_NO_COUNTER_ASSOCIATION');
                         FND_MESSAGE.SET_TOKEN('COUNTER','CSI_COUNTER_TEMPLATE_PUB.AUTOINSTANTIATE_COUNTERS');
			 FND_MSG_PUB.Add;
			 RAISE FND_API.G_EXC_ERROR;
		      END IF; -- return status
		END IF; -- ctr. grp template exists1
	     END IF; -- for l_base_item
	   END IF; -- ctr.grp template exists2
	 END IF; -- restrict counter instantiation for 'INVENTORY'
       END IF; -- qty check
   END IF; -- l_call_counters check

     -- Start code addition for eam integration
     IF l_eam_item
     THEN
          eam_objectinstantiation_pub.instantiate_object
          (p_api_version             => 1.0
          ,p_init_msg_list           => fnd_api.g_false
          ,p_commit                  => fnd_api.g_false
          ,p_validation_level        => p_validation_level
          ,p_maintenance_object_id   => p_instance_rec.instance_id
          ,p_maintenance_object_type => 3
          ,x_return_status           => x_return_status
          ,x_msg_count               => x_msg_count
          ,x_msg_data                => x_msg_data
          );
       IF NOT(x_return_status = fnd_api.g_ret_sts_success)
       THEN
          csi_gen_utility_pvt.put_line( 'Error from eam_objectinstantiation_pub.instantiate_object...');
          RAISE fnd_api.g_exc_error;
       END IF;
     END IF;
     -- End code addition for eam integration
   -- Call create_transaction to create txn log
        CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_IF_Exists_Flag => 'Y'
            ,p_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_VALIDATE_TXN');
              FND_MESSAGE.SET_TOKEN('TRANSACTION_ID',p_txn_rec.transaction_id );
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;

-- Get a unique history item instance id from the sequence
              l_csi_item_instance_h_id :=
                             csi_item_instance_vld_pvt.get_csi_item_instance_h_id;

-- Create a row in csi_item_instances_history table
   CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => p_instance_rec.INSTANCE_ID
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => NULL
            ,p_NEW_INSTANCE_NUMBER               => p_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => NULL
            ,p_NEW_EXTERNAL_REFERENCE            => p_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => NULL
            ,p_NEW_INVENTORY_ITEM_ID             => p_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => NULL
            ,p_NEW_INVENTORY_REVISION            => p_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => NULL
            ,p_NEW_INV_MASTER_ORGZN_ID           => p_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => NULL
            ,p_NEW_SERIAL_NUMBER                 => p_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => NULL
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => p_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => NULL
            ,p_NEW_LOT_NUMBER                    => p_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => NULL
            ,p_NEW_QUANTITY                      => p_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => NULL
            ,p_NEW_UNIT_OF_MEASURE               => p_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => NULL
            ,p_NEW_ACCOUNTING_CLASS_CODE         => p_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => NULL
            ,p_NEW_INSTANCE_CONDITION_ID         => p_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => NULL
            ,p_NEW_INSTANCE_STATUS_ID            => p_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => NULL
            ,p_NEW_CUSTOMER_VIEW_FLAG            => p_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => NULL
            ,p_NEW_MERCHANT_VIEW_FLAG            => p_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => NULL
            ,p_NEW_SELLABLE_FLAG                 => p_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => NULL
            ,p_NEW_SYSTEM_ID                     => p_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => NULL
            ,p_NEW_INSTANCE_TYPE_CODE            => p_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => NULL
            ,p_NEW_ACTIVE_START_DATE             => p_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => NULL
            ,p_NEW_ACTIVE_END_DATE               => p_instance_rec.ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => NULL
            ,p_NEW_LOCATION_TYPE_CODE            => p_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => NULL
            ,p_NEW_LOCATION_ID                   => p_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => NULL
            ,p_NEW_INV_ORGANIZATION_ID           => p_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => NULL
            ,p_NEW_INV_SUBINVENTORY_NAME         => p_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => NULL
            ,p_NEW_INV_LOCATOR_ID                => p_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => NULL
            ,p_NEW_PA_PROJECT_ID                 => p_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => NULL
            ,p_NEW_PA_PROJECT_TASK_ID            => p_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => NULL
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => NULL
            ,p_NEW_WIP_JOB_ID                    => p_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => NULL
            ,p_NEW_PO_ORDER_LINE_ID              => p_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => NULL
            ,p_NEW_COMPLETENESS_FLAG             => p_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'N'
            ,p_NEW_CONTEXT                       => p_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => NULL
            ,p_NEW_ATTRIBUTE1                    => p_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => NULL
            ,p_NEW_ATTRIBUTE2                    => p_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => NULL
            ,p_NEW_ATTRIBUTE3                    => p_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => NULL
            ,p_NEW_ATTRIBUTE4                    => p_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => NULL
            ,p_NEW_ATTRIBUTE5                    => p_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => NULL
            ,p_NEW_ATTRIBUTE6                    => p_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => NULL
            ,p_NEW_ATTRIBUTE7                    => p_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => NULL
            ,p_NEW_ATTRIBUTE8                    => p_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => NULL
            ,p_NEW_ATTRIBUTE9                    => p_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => NULL
            ,p_NEW_ATTRIBUTE10                   => p_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => NULL
            ,p_NEW_ATTRIBUTE11                   => p_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => NULL
            ,p_NEW_ATTRIBUTE12                   => p_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => NULL
            ,p_NEW_ATTRIBUTE13                   => p_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => NULL
            ,p_NEW_ATTRIBUTE14                   => p_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => NULL
            ,p_NEW_ATTRIBUTE15                   => p_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => NULL
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => NULL
            ,p_NEW_INST_LOC_TYPE_CODE            => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => NULL
            ,p_NEW_INST_LOC_ID                   => p_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => NULL
            ,p_NEW_INST_USAGE_CODE               => p_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_last_vld_organization_id      => NULL
            ,p_NEW_last_vld_organization_id      => l_last_vld_organization_id
            ,p_OLD_CONFIG_INST_REV_NUM           => NULL
            ,p_NEW_CONFIG_INST_REV_NUM           => p_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => NULL
            ,p_NEW_CONFIG_VALID_STATUS           => p_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => NULL
            ,p_NEW_INSTANCE_DESCRIPTION          => p_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => NULL
            ,p_NEW_INSTALL_DATE                  => p_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => NULL
            ,p_NEW_RETURN_BY_DATE                => p_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => NULL
            ,p_NEW_ACTUAL_RETURN_DATE            => p_instance_rec.ACTUAL_RETURN_DATE
            ,p_old_last_oe_agreement_id          => NULL
            ,p_new_last_oe_agreement_id          => p_instance_rec.last_oe_agreement_id
            ,p_OLD_LAST_OE_ORDER_LINE_ID         => NULL
            ,p_NEW_LAST_OE_ORDER_LINE_ID         => p_instance_rec.LAST_OE_ORDER_LINE_ID
            ,p_OLD_LAST_OE_RMA_LINE_ID           => NULL
            ,p_NEW_LAST_OE_RMA_LINE_ID           => p_instance_rec.LAST_OE_RMA_LINE_ID
            ,p_OLD_LAST_WIP_JOB_ID               => NULL
            ,p_NEW_LAST_WIP_JOB_ID               => p_instance_rec.LAST_WIP_JOB_ID
            ,p_OLD_LAST_PO_PO_LINE_ID            => NULL
            ,p_NEW_LAST_PO_PO_LINE_ID            => p_instance_rec.LAST_PO_PO_LINE_ID
            ,p_OLD_LAST_PA_PROJECT_ID            => NULL
            ,p_NEW_LAST_PA_PROJECT_ID            => p_instance_rec.LAST_PA_PROJECT_ID
            ,p_OLD_LAST_PA_TASK_ID               => NULL
            ,p_NEW_LAST_PA_TASK_ID               => p_instance_rec.LAST_PA_TASK_ID
            ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => NULL
            ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => p_instance_rec.LAST_TXN_LINE_DETAIL_ID
            ,p_OLD_LAST_OE_PO_NUMBER             => NULL
            ,p_NEW_LAST_OE_PO_NUMBER             => p_instance_rec.LAST_OE_PO_NUMBER
            --start of parameters addition for eam integration--
            ,p_OLD_NETWORK_ASSET_FLAG             => NULL
            ,p_NEW_NETWORK_ASSET_FLAG             => p_instance_rec.NETWORK_ASSET_FLAG
            ,p_OLD_MAINTAINABLE_FLAG              => NULL
            ,p_NEW_MAINTAINABLE_FLAG              => p_instance_rec.MAINTAINABLE_FLAG
            ,p_OLD_PN_LOCATION_ID                 => NULL
            ,p_NEW_PN_LOCATION_ID                 => p_instance_rec.PN_LOCATION_ID
            ,p_OLD_ASSET_CRITICALITY_CODE         => NULL
            ,p_NEW_ASSET_CRITICALITY_CODE         => p_instance_rec.ASSET_CRITICALITY_CODE
            ,p_OLD_CATEGORY_ID                    => NULL
            ,p_NEW_CATEGORY_ID                    => p_instance_rec.CATEGORY_ID
            ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => NULL
            ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID
            ,p_OLD_INSTANTIATION_FLAG             => NULL
            ,p_NEW_INSTANTIATION_FLAG             => p_instance_rec.INSTANTIATION_FLAG
            ,p_OLD_LINEAR_LOCATION_ID             => NULL
            ,p_NEW_LINEAR_LOCATION_ID             => p_instance_rec.LINEAR_LOCATION_ID
            ,p_OLD_OPERATIONAL_LOG_FLAG           => NULL
            ,p_NEW_OPERATIONAL_LOG_FLAG           => p_instance_rec.OPERATIONAL_LOG_FLAG
            ,p_OLD_CHECKIN_STATUS                 => NULL
            ,p_NEW_CHECKIN_STATUS                 => p_instance_rec.CHECKIN_STATUS
            ,p_OLD_SUP_WARRANTY_EXP_DATE          => NULL
            ,p_NEW_SUP_WARRANTY_EXP_DATE          => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => NULL
            ,p_NEW_ATTRIBUTE16                    => p_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => NULL
            ,p_NEW_ATTRIBUTE17                    => p_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => NULL
            ,p_NEW_ATTRIBUTE18                    => p_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => NULL
            ,p_NEW_ATTRIBUTE19                    => p_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => NULL
            ,p_NEW_ATTRIBUTE20                    => p_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => NULL
            ,p_NEW_ATTRIBUTE21                    => p_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => NULL
            ,p_NEW_ATTRIBUTE22                    => p_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => NULL
            ,p_NEW_ATTRIBUTE23                    => p_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => NULL
            ,p_NEW_ATTRIBUTE24                    => p_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => NULL
            ,p_NEW_ATTRIBUTE25                    => p_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => NULL
            ,p_NEW_ATTRIBUTE26                    => p_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => NULL
            ,p_NEW_ATTRIBUTE27                    => p_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => NULL
            ,p_NEW_ATTRIBUTE28                    => p_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => NULL
            ,p_NEW_ATTRIBUTE29                    => p_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => NULL
            ,p_NEW_ATTRIBUTE30                    => p_instance_rec.ATTRIBUTE30
  	  --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => NULL
            ,p_NEW_PAYABLES_UNIT_PRICE            => p_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => NULL
            ,p_NEW_PAYABLES_CURRENCY_CODE         => p_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => NULL
            ,p_NEW_PURCHASE_UNIT_PRICE            => p_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => NULL
            ,p_NEW_PURCHASE_CURRENCY_CODE         => p_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => NULL
            ,p_NEW_SALES_UNIT_PRICE               => p_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => NULL
            ,p_NEW_SALES_CURRENCY_CODE            => p_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => NULL
            ,p_NEW_OPERATIONAL_STATUS_CODE        => p_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                    => NULL
            ,p_NEW_SOURCE_CODE                    => p_instance_rec.SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );


         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_CREATE_HISTORY');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;

      END IF;  -- Check for p_called_from_grp
      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
           COMMIT WORK;
      END IF;

      -- Standard call to get message count and IF count is  get message info.
      FND_MSG_PUB.Count_And_Get
          (p_encoded => FND_API.G_FALSE,   --Added for bug 7657438
           p_count   =>  x_msg_count,
           p_data    =>  x_msg_data
           );

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
          ROLLBACK TO create_item_instance_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,   --Added for bug 7657438
                 p_count   =>  x_msg_count,
                 p_data    =>  x_msg_data
                );
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
          ROLLBACK TO create_item_instance_pvt;
          FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                  p_data   =>  x_msg_data
                );
    WHEN OTHERS THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
          ROLLBACK TO create_item_instance_pvt;
              IF   FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
              THEN
                    FND_MSG_PUB.Add_Exc_Msg
                  (G_PKG_NAME ,
                   l_api_name
                  );
              END IF;
              FND_MSG_PUB.Count_And_Get
                  (p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                   p_data   =>  x_msg_data
                  );

END create_item_instance;

/*---------------------------------------------------*/
/* Procedure name:  Anything_To_Update               */
/* Description   :  This function  checks if any of  */
/*                  the columns related to instance  */
/*                  are changing                     */
/*---------------------------------------------------*/

FUNCTION Anything_To_Update(p_instance_rec    csi_datastructures_pub.instance_rec)

RETURN BOOLEAN
IS

    l_return_value BOOLEAN := FALSE;

BEGIN

            IF ((p_instance_rec.instance_number            IS NULL) OR
                (p_instance_rec.instance_number            <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.external_reference         IS NULL) OR
                (p_instance_rec.external_reference         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.inventory_item_id          IS NULL) OR
                (p_instance_rec.inventory_item_id          <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.inventory_revision         IS NULL) OR
                (p_instance_rec.inventory_revision         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.inv_master_organization_id IS NULL) OR
                (p_instance_rec.inv_master_organization_id <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.serial_number              IS NULL) OR
                (p_instance_rec.serial_number              <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.mfg_serial_number_flag     IS NULL) OR
                (p_instance_rec.mfg_serial_number_flag     <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.lot_number                 IS NULL) OR
                (p_instance_rec.lot_number                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.quantity                   IS NULL) OR
                (p_instance_rec.quantity                   <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.unit_of_measure            IS NULL) OR
                (p_instance_rec.unit_of_measure            <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.accounting_class_code      IS NULL) OR
                (p_instance_rec.accounting_class_code      <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.instance_condition_id      IS NULL) OR
                (p_instance_rec.instance_condition_id      <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.instance_status_id         IS NULL) OR
                (p_instance_rec.instance_status_id         <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.customer_view_flag         IS NULL) OR
                (p_instance_rec.customer_view_flag         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.merchant_view_flag         IS NULL) OR
                (p_instance_rec.merchant_view_flag         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.sellable_flag              IS NULL) OR
                (p_instance_rec.sellable_flag              <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.system_id                  IS NULL) OR
                (p_instance_rec.system_id                  <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.instance_type_code         IS NULL) OR
                (p_instance_rec.instance_type_code         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.active_start_date          IS NULL) OR
                (p_instance_rec.active_start_date          <> FND_API.G_MISS_DATE)) OR
               ((p_instance_rec.active_end_date            IS NULL) OR
                (p_instance_rec.active_end_date            <> FND_API.G_MISS_DATE)) OR
               ((p_instance_rec.location_type_code         IS NULL) OR
                (p_instance_rec.location_type_code         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.location_id                IS NULL) OR
                (p_instance_rec.location_id                <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.inv_organization_id        IS NULL) OR
                (p_instance_rec.inv_organization_id        <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.inv_subinventory_name      IS NULL) OR
                (p_instance_rec.inv_subinventory_name      <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.inv_locator_id             IS NULL) OR
                (p_instance_rec.inv_locator_id             <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.pa_project_id              IS NULL) OR
                (p_instance_rec.pa_project_id              <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.pa_project_task_id         IS NULL) OR
                (p_instance_rec.pa_project_task_id         <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.in_transit_order_line_id   IS NULL) OR
                (p_instance_rec.in_transit_order_line_id   <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.wip_job_id                 IS NULL) OR
                (p_instance_rec.wip_job_id                 <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.po_order_line_id           IS NULL) OR
                (p_instance_rec.po_order_line_id           <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_oe_order_line_id      IS NULL) OR
                (p_instance_rec.last_oe_order_line_id      <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_oe_rma_line_id        IS NULL) OR
                (p_instance_rec.last_oe_rma_line_id        <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_po_po_line_id         IS NULL) OR
                (p_instance_rec.last_po_po_line_id         <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_oe_po_number          IS NULL) OR
                (p_instance_rec.last_oe_po_number          <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.last_wip_job_id            IS NULL) OR
                (p_instance_rec.last_wip_job_id            <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_pa_project_id         IS NULL) OR
                (p_instance_rec.last_pa_project_id         <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_pa_task_id            IS NULL) OR
                (p_instance_rec.last_pa_task_id            <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.last_oe_agreement_id       IS NULL) OR
                (p_instance_rec.last_oe_agreement_id       <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.install_date               IS NULL) OR
                (p_instance_rec.install_date               <> FND_API.G_MISS_DATE)) OR
               ((p_instance_rec.manually_created_flag      IS NULL) OR
                (p_instance_rec.manually_created_flag      <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.return_by_date             IS NULL) OR
                (p_instance_rec.return_by_date             <> FND_API.G_MISS_DATE)) OR
               ((p_instance_rec.actual_return_date         IS NULL) OR
                (p_instance_rec.actual_return_date         <> FND_API.G_MISS_DATE)) OR
               ((p_instance_rec.creation_complete_flag     IS NULL) OR
                (p_instance_rec.creation_complete_flag     <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.completeness_flag          IS NULL) OR
                (p_instance_rec.completeness_flag          <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.context                    IS NULL) OR
                (p_instance_rec.context                    <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute1                 IS NULL) OR
                (p_instance_rec.attribute1                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute2                 IS NULL) OR
                (p_instance_rec.attribute2                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute3                 IS NULL) OR
                (p_instance_rec.attribute3                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute4                 IS NULL) OR
                (p_instance_rec.attribute4                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute5                 IS NULL) OR
                (p_instance_rec.attribute5                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute6                 IS NULL) OR
                (p_instance_rec.attribute6                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute7                 IS NULL) OR
                (p_instance_rec.attribute7                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute8                 IS NULL) OR
                (p_instance_rec.attribute8                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute9                 IS NULL) OR
                (p_instance_rec.attribute9                 <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute10                IS NULL) OR
                (p_instance_rec.attribute10                <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute11                IS NULL) OR
                (p_instance_rec.attribute11                <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute12                IS NULL) OR
                (p_instance_rec.attribute12                <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute13                IS NULL) OR
                (p_instance_rec.attribute13                <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute14                IS NULL) OR
                (p_instance_rec.attribute14                <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute15                IS NULL) OR
                (p_instance_rec.attribute15                <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.last_txn_line_detail_id    IS NULL) OR
                (p_instance_rec.last_txn_line_detail_id    <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.install_location_type_code IS NULL) OR
                (p_instance_rec.install_location_type_code <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.install_location_id        IS NULL) OR
                (p_instance_rec.install_location_id        <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.instance_usage_code        IS NULL) OR
                (p_instance_rec.instance_usage_code        <> FND_API.G_MISS_CHAR)) OR
  -- The following code has been added by sguthiva for att enhancements
               ((p_instance_rec.config_inst_hdr_id         IS NULL) OR
                (p_instance_rec.config_inst_hdr_id         <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.config_inst_rev_num        IS NULL) OR
                (p_instance_rec.config_inst_rev_num        <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.config_inst_item_id        IS NULL) OR
                (p_instance_rec.config_inst_item_id        <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.config_valid_status        IS NULL) OR
                (p_instance_rec.config_valid_status        <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.instance_description       IS NULL) OR
                (p_instance_rec.instance_description       <> FND_API.G_MISS_CHAR)) OR
                --start of code for eam integration--
               ((p_instance_rec.network_asset_flag           IS NULL) OR
                (p_instance_rec.network_asset_flag          <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.maintainable_flag            IS NULL) OR
                (p_instance_rec.maintainable_flag            <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.pn_location_id               IS NULL) OR
                (p_instance_rec.pn_location_id               <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.asset_criticality_code       IS NULL) OR
                (p_instance_rec.asset_criticality_code       <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.category_id                  IS NULL) OR
                (p_instance_rec.category_id                  <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.equipment_gen_object_id      IS NULL) OR
                (p_instance_rec.equipment_gen_object_id      <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.instantiation_flag           IS NULL) OR
                (p_instance_rec.instantiation_flag           <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.linear_location_id           IS NULL) OR
                (p_instance_rec.linear_location_id           <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.operational_log_flag         IS NULL) OR
                (p_instance_rec.operational_log_flag         <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.checkin_status               IS NULL) OR
                (p_instance_rec.checkin_status               <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.supplier_warranty_exp_date   IS NULL) OR
                (p_instance_rec.supplier_warranty_exp_date   <> FND_API.G_MISS_DATE)) OR
               ((p_instance_rec.attribute16                  IS NULL) OR
                (p_instance_rec.attribute16                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute17                  IS NULL) OR
                (p_instance_rec.attribute17                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute18                  IS NULL) OR
                (p_instance_rec.attribute18                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute19                  IS NULL) OR
                (p_instance_rec.attribute19                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute20                  IS NULL) OR
                (p_instance_rec.attribute20                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute21                  IS NULL) OR
                (p_instance_rec.attribute21                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute22                  IS NULL) OR
                (p_instance_rec.attribute22                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute23                  IS NULL) OR
                (p_instance_rec.attribute23                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute24                  IS NULL) OR
                (p_instance_rec.attribute24                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute25                  IS NULL) OR
                (p_instance_rec.attribute25                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute26                  IS NULL) OR
                (p_instance_rec.attribute26                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute27                  IS NULL) OR
                (p_instance_rec.attribute27                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute28                  IS NULL) OR
                (p_instance_rec.attribute28                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute29                  IS NULL) OR
                (p_instance_rec.attribute29                  <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.attribute30                  IS NULL) OR
                (p_instance_rec.attribute30                  <> FND_API.G_MISS_CHAR)) OR
                 --end of code for eam integration--
                 -- Addition of columns for FA Integration
               ((p_instance_rec.purchase_unit_price          IS NULL) OR
                (p_instance_rec.purchase_unit_price          <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.purchase_currency_code       IS NULL) OR
                (p_instance_rec.purchase_currency_code       <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.payables_unit_price          IS NULL) OR
                (p_instance_rec.payables_unit_price          <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.payables_currency_code       IS NULL) OR
                (p_instance_rec.payables_currency_code       <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.sales_unit_price             IS NULL) OR
                (p_instance_rec.sales_unit_price             <> FND_API.G_MISS_NUM)) OR
               ((p_instance_rec.sales_currency_code          IS NULL) OR
                (p_instance_rec.sales_currency_code          <> FND_API.G_MISS_CHAR)) OR
               ((p_instance_rec.operational_status_code      IS NULL) OR
                (p_instance_rec.operational_status_code      <> FND_API.G_MISS_CHAR))
    -- End addition of columns for FA Integration
             THEN
  -- End of code addition by sguthiva for att enhancements

                        l_return_value := TRUE;
             END IF;


RETURN l_return_value;

END Anything_To_Update;

/*----------------------------------------------------*/
/*  This Procedure validates the accounting class code*/
/*  depending upon the location type code             */
/*----------------------------------------------------*/
PROCEDURE get_and_update_acct_class
( p_api_version          IN      NUMBER
 ,p_commit               IN      VARCHAR2
 ,p_init_msg_list        IN      VARCHAR2
 ,p_validation_level     IN      NUMBER
 ,p_instance_id          IN      NUMBER
 ,p_instance_expiry_flag IN      VARCHAR2
 ,p_txn_rec              IN OUT  NOCOPY csi_datastructures_pub.transaction_rec
 ,x_acct_class_code      OUT     NOCOPY VARCHAR2
 ,x_return_status        OUT     NOCOPY VARCHAR2
 ,x_msg_count            OUT     NOCOPY NUMBER
 ,x_msg_data             OUT     NOCOPY VARCHAR2
)

IS

l_api_name            CONSTANT VARCHAR2(30)   := 'GET_AND_UPDATE_ACCT_CLASS';
l_api_version         CONSTANT NUMBER         := 1.0;
l_debug_level         NUMBER;
l_acct_class_code     VARCHAR2(10);
l_accounting_class    VARCHAR2(10);
l_loc_type_code       VARCHAR2(30);
--l_obj_ver_num       NUMBER;
l_instance_rec        csi_datastructures_pub.instance_rec;
l_instance_id_lst     csi_datastructures_pub.id_tbl ;
x_msg_index_out       NUMBER;
l_item_attribute_tbl  csi_item_instance_pvt.item_attribute_tbl;
l_location_tbl        csi_item_instance_pvt.location_tbl;
l_generic_id_tbl      csi_item_instance_pvt.generic_id_tbl;
l_lookup_tbl          csi_item_instance_pvt.lookup_tbl;
l_ins_count_rec       csi_item_instance_pvt.ins_count_rec;
px_oks_txn_inst_tbl   oks_ibint_pub.txn_instance_tbl;
px_child_inst_tbl     csi_item_instance_grp.child_inst_tbl;

BEGIN

    -- Standard Start of API savepoint
       IF fnd_api.to_boolean(p_commit)
       THEN
        SAVEPOINT  get_and_update_acct_class;
       END IF;

    -- Standard call to check for call compatibility.
       IF NOT FND_API.Compatible_API_Call (l_api_version,
                                           p_api_version,
                                           l_api_name   ,
                                           G_PKG_NAME    )
       THEN
             RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
       END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
       IF FND_API.to_Boolean( p_init_msg_list ) THEN
             FND_MSG_PUB.initialize;
       END IF;

    -- Initialize API return status to success
       x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option debug_level for debug message reporting
           l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');
       --  If debug_level = 1 then dump the procedure name
           IF (l_debug_level > 0) THEN
              csi_gen_utility_pvt.put_line ('get_and_update_acct_class');
           END IF;

       -- If the debug level = 2 then dump all the parameters values.
           IF (l_debug_level > 1) THEN
                 csi_gen_utility_pvt.put_line ( 'get_and_update_acct_class' ||
                                                   p_api_version       ||'-'||
                                                   p_commit
                                               );
           END IF;

    l_instance_rec.instance_id := p_instance_id;

   BEGIN
      SELECT location_type_code,
             accounting_class_code,
             object_version_number,
             inventory_item_id,
             last_vld_organization_id,
             quantity
      INTO   l_loc_type_code,
             l_accounting_class,
             l_instance_rec.object_version_number,
             l_instance_rec.inventory_item_id,
             l_instance_rec.vld_organization_id,
             l_instance_rec.quantity
      FROM   csi_item_instances
      WHERE  instance_id = l_instance_rec.instance_id;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
           FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_INSTANCE_NUM');
           FND_MESSAGE.SET_TOKEN('INSTANCE_NUMBER', l_instance_rec.instance_id);
           FND_MSG_PUB.Add;
          RAISE FND_API.G_EXC_ERROR;
   END;


    csi_item_instance_vld_pvt.get_valid_acct_class(p_instance_id          => p_instance_id,
                                                   p_curr_acct_class_code => NULL, --l_accounting_class,
                                                   p_loc_type_code        => l_loc_type_code,
                                                   x_acct_class_code      => l_acct_class_code
                                                   );

    IF l_acct_class_code <> l_accounting_class THEN

      l_instance_rec.accounting_class_code := l_acct_class_code;
      l_instance_rec.check_for_instance_expiry  :=  p_instance_expiry_flag;
      update_item_instance
       (
         p_api_version      => p_api_version
        ,p_commit           => fnd_api.g_false
        ,p_init_msg_list    => p_init_msg_list
        ,p_validation_level => p_validation_level
        ,p_instance_rec     => l_instance_rec
        ,p_txn_rec          => p_txn_rec
        ,x_instance_id_lst  => l_instance_id_lst
        ,x_return_status    => x_return_status
        ,x_msg_count        => x_msg_count
        ,x_msg_data         => x_msg_data
        ,p_item_attribute_tbl => l_item_attribute_tbl
        ,p_location_tbl     => l_location_tbl
        ,p_generic_id_tbl     => l_generic_id_tbl
        ,p_lookup_tbl         => l_lookup_tbl
        ,p_ins_count_rec      => l_ins_count_rec
        ,p_oks_txn_inst_tbl   => px_oks_txn_inst_tbl
        ,p_child_inst_tbl     => px_child_inst_tbl
       );

      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
          FOR i in 1..x_msg_Count LOOP
            FND_MSG_PUB.Get(p_msg_index     => i,
                            p_encoded       => 'F',
                            p_data          => x_msg_data,
                            p_msg_index_out => x_msg_index_out );

         End LOOP;
         RAISE fnd_api.g_exc_error;
      END IF;

    END IF;

    IF FND_API.To_Boolean( p_commit )
    THEN
                COMMIT WORK;
    END IF;

     -- Standard call to get message count and IF count is  get message info.
      FND_MSG_PUB.Count_And_Get
           (p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
            p_data   =>  x_msg_data
           );

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
           IF FND_API.To_Boolean( p_commit )
           THEN
            ROLLBACK TO get_and_update_acct_class;
           END IF;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                 p_data   =>  x_msg_data
                );
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
           IF FND_API.To_Boolean( p_commit )
           THEN
            ROLLBACK TO get_and_update_acct_class;
           END IF;
          FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                  p_data   =>  x_msg_data
                );
    WHEN OTHERS THEN
          x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
           IF FND_API.To_Boolean( p_commit )
           THEN
            ROLLBACK TO get_and_update_acct_class;
           END IF;
              IF   FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
              THEN
                    FND_MSG_PUB.Add_Exc_Msg
                  (G_PKG_NAME ,
                   l_api_name
                  );
              END IF;
              FND_MSG_PUB.Count_And_Get
                  (p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                   p_data   =>  x_msg_data
                  );

END get_and_update_acct_class;

/*------------------------------------------------------*/
/* Procedure name: update_child_instance_location       */
/* Description   : procedure used to update the child   */
/*                 Instances                            */
/*------------------------------------------------------*/

PROCEDURE update_child_instance_location
     (p_api_version         IN     NUMBER,
      p_commit              IN     VARCHAR2,
      p_init_msg_list       IN     VARCHAR2,
      p_validation_level    IN     NUMBER,
      p_instance_rec        IN OUT NOCOPY csi_datastructures_pub.instance_rec,
      p_original_status_id  IN     NUMBER,
      p_original_system_id  IN     NUMBER,
      p_txn_rec             IN OUT NOCOPY csi_datastructures_pub.transaction_rec,
      x_instance_id_lst     OUT    NOCOPY csi_datastructures_pub.id_tbl,
      x_return_status       OUT    NOCOPY VARCHAR2,
      p_unexpire            IN     VARCHAR2,
      p_oks_txn_inst_tbl    IN OUT NOCOPY oks_ibint_pub.txn_instance_tbl,
      p_child_inst_tbl      IN OUT NOCOPY csi_item_instance_grp.child_inst_tbl,
      p_orig_install_date   IN     DATE,
      x_msg_count           OUT    NOCOPY NUMBER,
      x_msg_data            OUT    NOCOPY VARCHAR2
     )
IS
    l_api_name               CONSTANT VARCHAR2(30)   := 'UPDATE_CHILD_INST_LOCATION';
    l_api_version            CONSTANT NUMBER         := 1.0;
    l_debug_level            NUMBER;
    l_instance_id            NUMBER;
    l_dummy                  NUMBER;
    l_instance_rec           csi_datastructures_pub.instance_rec:=p_instance_rec;
    l_object_version_number  NUMBER;
    l_return_value           BOOLEAN;
    l_csi_item_instance_h_id NUMBER;
    l_full_dump_frequency    NUMBER;
    l_mod_value              NUMBER;
    l_dump_flag              VARCHAR2(1);
    l_msg_index              NUMBER;
    l_msg_count              NUMBER;
    l_instance_hist_rec      csi_datastructures_pub.instance_history_rec;
    --Start of:Added for bug 5615169
    l_inst_hist_tbl_blk_ins  csi_datastructures_pub.instance_history_tbl; -- used for bulk insert
    l_inst_hist_rec_tab      csi_item_instance_grp.instance_history_rec_tab; -- used for column table
    l_ciih_blk_ins_cnt       NUMBER  := 0;
    l_user_id      NUMBER := FND_GLOBAL.USER_ID;
    l_login_id     NUMBER := FND_GLOBAL.CONC_LOGIN_ID;
    --End of:Added for bug 5615169

    --Added for bug 7708851, base bug 7239642
    l_raise_bes_event        VARCHAR2(1) := nvl(fnd_profile.value('CSI_RAISE_BES_CUST_OWNED_INSTANCES'),'N');
    l_create_event_called    VARCHAR2(1) := 'N';

CURSOR curr_instance_rec(p_instance_id IN NUMBER)  IS
           SELECT
                 INSTANCE_ID,
                 INSTANCE_NUMBER,
                 EXTERNAL_REFERENCE,
                 INVENTORY_ITEM_ID,
                 NULL VLD_ORGANIZATION_ID,
                 INVENTORY_REVISION,
                 INV_MASTER_ORGANIZATION_ID,
                 SERIAL_NUMBER,
                 MFG_SERIAL_NUMBER_FLAG,
                 LOT_NUMBER,
                 QUANTITY,
                 UNIT_OF_MEASURE,
                 ACCOUNTING_CLASS_CODE,
                 INSTANCE_CONDITION_ID,
                 INSTANCE_STATUS_ID,
                 CUSTOMER_VIEW_FLAG,
                 MERCHANT_VIEW_FLAG,
                 SELLABLE_FLAG,
                 SYSTEM_ID,
                 INSTANCE_TYPE_CODE,
                 ACTIVE_START_DATE,
                 ACTIVE_END_DATE,
                 LOCATION_TYPE_CODE,
                 LOCATION_ID,
                 INV_ORGANIZATION_ID,
                 INV_SUBINVENTORY_NAME,
                 INV_LOCATOR_ID,
                 PA_PROJECT_ID,
                 PA_PROJECT_TASK_ID,
                 IN_TRANSIT_ORDER_LINE_ID,
                 WIP_JOB_ID,
                 PO_ORDER_LINE_ID,
                 LAST_OE_ORDER_LINE_ID,
                 LAST_OE_RMA_LINE_ID,
                 LAST_PO_PO_LINE_ID,
                 LAST_OE_PO_NUMBER,
                 LAST_WIP_JOB_ID,
                 LAST_PA_PROJECT_ID,
                 LAST_PA_TASK_ID,
                 LAST_OE_AGREEMENT_ID,
                 INSTALL_DATE,
                 MANUALLY_CREATED_FLAG,
                 RETURN_BY_DATE,
                 ACTUAL_RETURN_DATE,
                 CREATION_COMPLETE_FLAG,
                 COMPLETENESS_FLAG,
                 NULL VERSION_LABEL,
                 NULL VERSION_LABEL_DESCRIPTION,
                 CONTEXT,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 ATTRIBUTE6,
                 ATTRIBUTE7,
                 ATTRIBUTE8,
                 ATTRIBUTE9,
                 ATTRIBUTE10,
                 ATTRIBUTE11,
                 ATTRIBUTE12,
                 ATTRIBUTE13,
                 ATTRIBUTE14,
                 ATTRIBUTE15,
                 OBJECT_VERSION_NUMBER,
                 LAST_TXN_LINE_DETAIL_ID,
                 INSTALL_LOCATION_TYPE_CODE,
                 INSTALL_LOCATION_ID,
                 INSTANCE_USAGE_CODE,
                 LAST_VLD_ORGANIZATION_ID,
                 CONFIG_INST_REV_NUM,
                 CONFIG_VALID_STATUS,
                 INSTANCE_DESCRIPTION,
               --start of column addition for eam integration--
                 NETWORK_ASSET_FLAG,
                 MAINTAINABLE_FLAG,
                 PN_LOCATION_ID,
                 ASSET_CRITICALITY_CODE,
                 CATEGORY_ID,
                 EQUIPMENT_GEN_OBJECT_ID,
                 INSTANTIATION_FLAG,
                 LINEAR_LOCATION_ID,
                 OPERATIONAL_LOG_FLAG,
                 CHECKIN_STATUS,
                 SUPPLIER_WARRANTY_EXP_DATE,
                 ATTRIBUTE16,
                 ATTRIBUTE17,
                 ATTRIBUTE18,
                 ATTRIBUTE19,
                 ATTRIBUTE20,
                 ATTRIBUTE21,
                 ATTRIBUTE22,
                 ATTRIBUTE23,
                 ATTRIBUTE24,
                 ATTRIBUTE25,
                 ATTRIBUTE26,
                 ATTRIBUTE27,
                 ATTRIBUTE28,
                 ATTRIBUTE29,
                 ATTRIBUTE30,
               --end of column addition for eam integration--
               -- Addition of columns for FA Integration
                 PURCHASE_UNIT_PRICE,
                 PURCHASE_CURRENCY_CODE,
                 PAYABLES_UNIT_PRICE,
                 PAYABLES_CURRENCY_CODE,
                 SALES_UNIT_PRICE,
                 SALES_CURRENCY_CODE,
                 OPERATIONAL_STATUS_CODE,
               -- End addition of columns for FA Integration
                 SOURCE_CODE -- Added Code for Siebel Genesis Project
           FROM  csi_item_instances
           WHERE instance_id = p_instance_id
           FOR UPDATE OF OBJECT_VERSION_NUMBER ;

    l_curr_instance_rec      curr_instance_rec%ROWTYPE;
    --
    CURSOR new_instance_rec(p_instance_id IN NUMBER) IS
    select * from csi_item_instances
    where instance_id = p_instance_id;
    --
    l_new_instance_rec      new_instance_rec%ROWTYPE;

 CURSOR ins_hist_csr(p_instance_history_id NUMBER) IS
             SELECT  instance_history_id
                    ,instance_id
                    ,transaction_id
                    ,old_instance_number
                    ,new_instance_number
                    ,old_external_reference
                    ,new_external_reference
                    ,old_inventory_item_id
                    ,new_inventory_item_id
                    ,old_inventory_revision
                    ,new_inventory_revision
                    ,old_inv_master_organization_id
                    ,new_inv_master_organization_id
                    ,old_serial_number
                    ,new_serial_number
                    ,old_mfg_serial_number_flag
                    ,new_mfg_serial_number_flag
                    ,old_lot_number
                    ,new_lot_number
                    ,old_quantity
                    ,new_quantity
                    ,old_unit_of_measure
                    ,new_unit_of_measure
                    ,old_accounting_class_code
                    ,new_accounting_class_code
                    ,old_instance_condition_id
                    ,new_instance_condition_id
                    ,old_instance_status_id
                    ,new_instance_status_id
                    ,old_customer_view_flag
                    ,new_customer_view_flag
                    ,old_merchant_view_flag
                    ,new_merchant_view_flag
                    ,old_sellable_flag
                    ,new_sellable_flag
                    ,old_system_id
                    ,new_system_id
                    ,old_instance_type_code
                    ,new_instance_type_code
                    ,old_active_start_date
                    ,new_active_start_date
                    ,old_active_end_date
                    ,new_active_end_date
                    ,old_location_type_code
                    ,new_location_type_code
                    ,old_location_id
                    ,new_location_id
                    ,old_inv_organization_id
                    ,new_inv_organization_id
                    ,old_inv_subinventory_name
                    ,new_inv_subinventory_name
                    ,old_inv_locator_id
                    ,new_inv_locator_id
                    ,old_pa_project_id
                    ,new_pa_project_id
                    ,old_pa_project_task_id
                    ,new_pa_project_task_id
                    ,old_in_transit_order_line_id
                    ,new_in_transit_order_line_id
                    ,old_wip_job_id
                    ,new_wip_job_id
                    ,old_po_order_line_id
                    ,new_po_order_line_id
                    ,old_completeness_flag
                    ,new_completeness_flag
                    ,old_context
                    ,new_context
                    ,old_attribute1
                    ,new_attribute1
                    ,old_attribute2
                    ,new_attribute2
                    ,old_attribute3
                    ,new_attribute3
                    ,old_attribute4
                    ,new_attribute4
                    ,old_attribute5
                    ,new_attribute5
                    ,old_attribute6
                    ,new_attribute6
                    ,old_attribute7
                    ,new_attribute7
                    ,old_attribute8
                    ,new_attribute8
                    ,old_attribute9
                    ,new_attribute9
                    ,old_attribute10
                    ,new_attribute10
                    ,old_attribute11
                    ,new_attribute11
                    ,old_attribute12
                    ,new_attribute12
                    ,old_attribute13
                    ,new_attribute13
                    ,old_attribute14
                    ,new_attribute14
                    ,old_attribute15
                    ,new_attribute15
                    ,full_dump_flag
                    ,old_inst_loc_type_code
                    ,new_inst_loc_type_code
                    ,old_inst_loc_id
                    ,new_inst_loc_id
                    ,old_inst_usage_code
                    ,new_inst_usage_code
                    ,old_last_vld_organization_id
                    ,new_last_vld_organization_id
                    ,old_config_inst_rev_num
                    ,new_config_inst_rev_num
                    ,old_config_valid_status
                    ,new_config_valid_status
                    ,old_instance_description
                    ,new_instance_description
                    ,old_oe_agreement_id
                    ,new_oe_agreement_id
                    ,old_last_oe_order_line_id
                    ,new_last_oe_order_line_id
                    ,old_last_oe_rma_line_id
                    ,new_last_oe_rma_line_id
                    ,old_last_wip_job_id
                    ,new_last_wip_job_id
                    ,old_last_po_po_line_id
                    ,new_last_po_po_line_id
                    ,old_last_pa_project_id
                    ,new_last_pa_project_id
                    ,old_last_pa_task_id
                    ,new_last_pa_task_id
                    ,old_last_txn_line_detail_id
                    ,new_last_txn_line_detail_id
                    ,old_last_oe_po_number
                    ,new_last_oe_po_number
		    --start of column addition for eam integration--
                    ,old_network_asset_flag
                    ,new_network_asset_flag
                    ,old_maintainable_flag
                    ,new_maintainable_flag
                    ,old_pn_location_id
                    ,new_pn_location_id
                    ,old_asset_criticality_code
                    ,new_asset_criticality_code
                    ,old_category_id
                    ,new_category_id
                    ,old_equipment_gen_object_id
                    ,new_equipment_gen_object_id
                    ,old_instantiation_flag
                    ,new_instantiation_flag
                    ,old_linear_location_id
                    ,new_linear_location_id
                    ,old_operational_log_flag
                    ,new_operational_log_flag
                    ,old_checkin_status
                    ,new_checkin_status
                    ,old_supplier_warranty_exp_date
                    ,new_supplier_warranty_exp_date
                    ,old_attribute16
                    ,new_attribute16
                    ,old_attribute17
                    ,new_attribute17
                    ,old_attribute18
                    ,new_attribute18
                    ,old_attribute19
                    ,new_attribute19
                    ,old_attribute20
                    ,new_attribute20
                    ,old_attribute21
                    ,new_attribute21
                    ,old_attribute22
                    ,new_attribute22
                    ,old_attribute23
                    ,new_attribute23
                    ,old_attribute24
                    ,new_attribute24
                    ,old_attribute25
                    ,new_attribute25
                    ,old_attribute26
                    ,new_attribute26
                    ,old_attribute27
                    ,new_attribute27
                    ,old_attribute28
                    ,new_attribute28
                    ,old_attribute29
                    ,new_attribute29
                    ,old_attribute30
                    ,new_attribute30
                    ,old_install_date
                    ,new_install_date
		    --end of column addition for eam integration--
            -- Addition of columns for FA Integration
                    ,old_payables_unit_price
                    ,new_payables_unit_price
                    ,old_payables_currency_code
                    ,new_payables_currency_code
                    ,old_purchase_unit_price
                    ,new_purchase_unit_price
                    ,old_purchase_currency_code
                    ,new_purchase_currency_code
                    ,old_sales_unit_price
                    ,new_sales_unit_price
                    ,old_sales_currency_code
                    ,new_sales_currency_code
                    ,old_operational_status_code
                    ,new_operational_status_code
             -- End addition of columns for FA Integration
                    -- Begin Add Code for Siebel Genesis Project
                    ,OLD_SOURCE_CODE
                    ,NEW_SOURCE_CODE
                    -- End Add Code for Siebel Genesis Project
             FROM   csi_item_instances_h
             WHERE  instance_history_id = p_instance_history_id
             FOR UPDATE OF OBJECT_VERSION_NUMBER ;

   l_ins_hist_id             NUMBER;
   l_ins_hist_csr            ins_hist_csr%ROWTYPE;
   l_last_vld_organization_id NUMBER;
   l_child_temp               VARCHAR2(1);
   p_rel_query_rec            csi_datastructures_pub.relationship_query_rec;
   l_rel_tbl                  csi_datastructures_pub.ii_relationship_tbl;
   l_ii_relationship_level_tbl csi_ii_relationships_pvt.ii_relationship_level_tbl;
   l_vld_org_id               NUMBER;
   PROCESS_NEXT               EXCEPTION;
   l_instance_status_id       NUMBER;
   l_system_id                NUMBER;
   l_termination_status       BOOLEAN := FALSE;
   l_order_line_id            NUMBER;
   l_oks_txn_type             VARCHAR2(3);
   l_internal_party_id        NUMBER;
   l_party_id                 NUMBER;
   l_eam_item                 BOOLEAN := FALSE;
   l_instance_history_id      NUMBER;
   l_maintenance_object_type  NUMBER := 3;
   l_child_count              NUMBER;
   l_install_date             DATE;
   l_valid                    BOOLEAN     := TRUE;
   l_creation_flag            VARCHAR2(1);
   l_config_inst_hdr_id       NUMBER := fnd_api.g_miss_num;
   l_config_inst_rev_num      NUMBER := fnd_api.g_miss_num;
   l_config_inst_item_id      NUMBER := fnd_api.g_miss_num;
   l_config_valid_status VARCHAR2(30) := fnd_api.g_miss_char;
   l_root_asset_id            NUMBER;
BEGIN

   -- Standard Start of API savepoint
      IF FND_API.To_Boolean( p_commit )
      THEN
        SAVEPOINT    update_child_instance_pvt;
      END IF;


   -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version,
                                          p_api_version,
                                          l_api_name   ,
                                          G_PKG_NAME    )
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;

   -- Initialize message list if p_init_msg_list is set to TRUE.
      IF FND_API.to_Boolean( p_init_msg_list ) THEN
            FND_MSG_PUB.initialize;
      END IF;
   -- Initialize API return status to success
      x_return_status := FND_API.G_RET_STS_SUCCESS;

   -- Check the profile option debug_level for debug message reporting
      l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

   -- If debug_level = 1 then dump the procedure name
      IF (l_debug_level > 0) THEN
          csi_gen_utility_pvt.put_line ( 'update_child_instance_pvt');
      END IF;

   -- If the debug level = 2 then dump all the parameters values.
      IF (l_debug_level > 1) THEN
          csi_gen_utility_pvt.put_line ( 'update_child_instance_pvt:'    ||
                                              p_api_version         ||'-'||
                                              p_commit              ||'-'||
                                              p_init_msg_list            );
      END IF;

   -- Start API body
   IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
      csi_gen_utility_pvt.populate_install_param_rec;
   END IF;
   --
   l_internal_party_id := csi_datastructures_pub.g_install_param_rec.internal_party_id;
   --
   IF l_internal_party_id IS NULL THEN
      FND_MESSAGE.SET_NAME('CSI','CSI_API_UNINSTALLED_PARAMETER');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
   END IF;
   --
   -- ADDED FOR BUG 2957236
     IF p_instance_rec.instance_status_id IS NOT NULL AND
        p_instance_rec.instance_status_id <> fnd_api.g_miss_num
     THEN
         IF csi_item_instance_vld_pvt.termination_status
            ( p_instance_status_id => p_instance_rec.instance_status_id )
         THEN
             l_termination_status := TRUE;
             l_config_inst_hdr_id := null;
             l_config_inst_rev_num := null;
             l_config_inst_item_id := null;
             l_config_valid_status := null;
         ELSE
             l_termination_status := FALSE;
         END IF;
     END IF;
    -- END ADDITION FOR BUG 2957236

 -- Start API body
 p_rel_query_rec.object_id := p_instance_rec.instance_id;
 p_rel_query_rec.relationship_type_code := 'COMPONENT-OF';
 --
IF p_rel_query_rec.object_id IS NOT NULL AND
   p_rel_query_rec.object_id <> FND_API.G_MISS_NUM THEN
   IF p_unexpire = FND_API.G_TRUE THEN
       csi_gen_utility_pvt.put_line ( 'Calling Get_Children for Un-expiry...');
       csi_ii_relationships_pvt.Get_Children
	 ( p_relationship_query_rec   => p_rel_query_rec,
	   p_rel_tbl                  => l_rel_tbl,
	   p_depth                    => NULL,
	   p_active_relationship_only => FND_API.G_TRUE,
           p_active_instances_only    => FND_API.G_FALSE, -- should be passed only when un-expiring
	   p_time_stamp               => FND_API.G_MISS_DATE,
	   p_get_dfs                  => FND_API.G_FALSE,
	   p_ii_relationship_level_tbl => l_ii_relationship_level_tbl,
	   x_return_status            => x_return_status,
	   x_msg_count                => x_msg_count,
	   x_msg_data                 => x_msg_data
	 );
       --
       IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
	  FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_CHILDREN_ERROR');
	  FND_MSG_PUB.Add;
	  RAISE FND_API.G_EXC_ERROR;
       END IF;
   ELSE
      csi_gen_utility_pvt.put_line ( 'Calling Get_Children for Regular Inheritance...');
      csi_ii_relationships_pvt.Get_Children
	 ( p_relationship_query_rec   => p_rel_query_rec,
	   p_rel_tbl                  => l_rel_tbl,
	   p_depth                    => NULL,
	   p_active_relationship_only => FND_API.G_TRUE,
	   p_time_stamp               => FND_API.G_MISS_DATE,
	   p_get_dfs                  => FND_API.G_FALSE,
	   p_ii_relationship_level_tbl => l_ii_relationship_level_tbl,
	   x_return_status            => x_return_status,
	   x_msg_count                => x_msg_count,
	   x_msg_data                 => x_msg_data
	 );
       --
       IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
	  FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_CHILDREN_ERROR');
	  FND_MSG_PUB.Add;
	  RAISE FND_API.G_EXC_ERROR;
       END IF;
   END IF;
END IF;
  --
csi_gen_utility_pvt.put_line ( 'Rel Table count is : '||to_char(l_rel_tbl.count));
--
-- FOR l_child_instance_id IN child_instances
IF l_rel_tbl.count > 0 THEN
   FOR j IN l_rel_tbl.FIRST .. l_rel_tbl.LAST
   LOOP
       BEGIN
           csi_gen_utility_pvt.put_line ( 'Processing Child Instance : '||to_char(l_rel_tbl(j).subject_id));
           -- Opening Cursor to retrieve Child Id records Details
              OPEN curr_instance_rec(l_rel_tbl(j).subject_id);
              FETCH curr_instance_rec INTO l_curr_instance_rec;
                 IF curr_instance_rec%NOTFOUND THEN
                    FND_MESSAGE.Set_Name('CSI', 'CSI_API_RECORD_LOCKED');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR;
                 END IF;
              CLOSE curr_instance_rec;
              --This code has been added to make sure that the expired child instance should not get inherited
              --if there is any update to the parent in the component-of relationship.
              --Start of modifications for Bug#2887590
              --
              -- srramakr commented out active_end_date condition since the inheritance should look only for Qty
              -- active_end_date check will not allow you to un-expire a child instance having qty > 0.
              -- No need to select from CSI_ITEM_INSTANCES since l_curr_instance_re already has the instance info.
              IF l_curr_instance_rec.quantity = 0 THEN
                 RAISE PROCESS_NEXT;
              END IF;
              --End of modifications for Bug#2887590
              --

       p_instance_rec.object_version_number := l_curr_instance_rec.object_version_number + 1;

         -- Following code is added for bug 2957236.
         -- If termination_status then it should be assigned to all the child instances
         -- else it should be assigned to only those instances which are with the same instance status
         -- as that of the parent.
         l_instance_status_id:= fnd_api.g_miss_num;
         IF l_termination_status
         THEN
            l_instance_status_id := p_instance_rec.instance_status_id;
         ELSIF NOT(l_termination_status)
         THEN
            IF  p_original_status_id=l_curr_instance_rec.instance_status_id
            AND p_original_status_id <> fnd_api.g_miss_num
            THEN
               l_instance_status_id:=p_instance_rec.instance_status_id;
            END IF;
         END IF;
         -- System_id Cascade
         l_system_id := fnd_api.g_miss_num;
         IF p_original_system_id IS NOT NULL AND
            p_original_system_id <> fnd_api.g_miss_num THEN
            IF p_original_system_id = nvl(l_curr_instance_rec.system_id,-999) THEN
               l_system_id := p_instance_rec.system_id;
            END IF;
         ELSIF p_original_system_id IS NULL AND
               l_curr_instance_rec.system_id IS NULL THEN
            l_system_id := p_instance_rec.system_id;
         END IF;
         -- Install Date Cascade
         -- Cascade only if the component has the same install date as parent
         l_install_date := fnd_api.g_miss_date;
         IF p_orig_install_date IS NOT NULL AND
            p_orig_install_date <> fnd_api.g_miss_date THEN
            IF p_orig_install_date = nvl(l_curr_instance_rec.install_date,fnd_api.g_miss_date) THEN
               l_install_date := p_instance_rec.install_date;
            END IF;
         ELSIF p_orig_install_date IS NULL AND
               l_curr_instance_rec.install_date IS NULL THEN
            l_install_date := p_instance_rec.install_date;
         END IF;
         -- Start code addition for eam integration
           IF csi_item_instance_vld_pvt.Check_for_eam_item
              (p_inventory_item_id  => l_curr_instance_rec.inventory_item_id,
               p_organization_id    => l_curr_instance_rec.last_vld_organization_id)
           THEN
             l_eam_item := TRUE;
           END IF;

           IF l_eam_item AND
             (p_instance_rec.active_end_date IS NOT NULL AND
              p_instance_rec.active_end_date <> fnd_api.g_miss_date)
           THEN
            IF NOT eam_common_utilities_pvt.check_deactivate
              (p_maintenance_object_id   => l_rel_tbl(j).subject_id
              ,p_maintenance_object_type => l_maintenance_object_type)
            THEN
              csi_gen_utility_pvt.put_line('Error from eam_common_utilities_pvt.check_deactivate API ');
              RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
        -- End code addition for eam integration
        --
        l_child_count := p_child_inst_tbl.count + 1;
        p_child_inst_tbl(l_child_count) := l_rel_tbl(j).subject_id;
        --
    -- validate instance status id
       IF NVL(l_instance_status_id,fnd_api.g_miss_num) <> fnd_api.g_miss_num
       THEN
         csi_item_instance_vld_pvt.is_valid_status(
           p_instance_status_id     => l_instance_status_id,
           p_creation_complete_flag => l_creation_flag,
           l_return_value           => l_valid);
          IF NOT(l_valid)
          THEN
             RAISE fnd_api.g_exc_error;
          END IF;
        END IF;

        IF l_instance_status_id IS NOT NULL AND
           l_instance_status_id <> FND_API.G_MISS_NUM AND
           l_instance_status_id <> l_curr_instance_rec.INSTANCE_STATUS_ID
        THEN
           IF NOT csi_item_instance_vld_pvt.is_status_updateable
                  (p_instance_status => l_instance_status_id
                  ,p_current_status  => l_curr_instance_rec.INSTANCE_STATUS_ID)
           THEN
             RAISE fnd_api.g_exc_error;
           END IF;
        END IF;

        --Start of:Added for bug 6177045
        IF l_curr_instance_rec.LAST_OE_ORDER_LINE_ID IS NULL THEN
            l_curr_instance_rec.LAST_OE_ORDER_LINE_ID := p_instance_Rec.LAST_OE_ORDER_LINE_ID;
        ELSE
            l_curr_instance_rec.LAST_OE_ORDER_LINE_ID := fnd_api.g_miss_num;
        END IF;
        --End of:Added for bug 6177045

		--Added for bug 7708851, base bug 7239642
	    BEGIN
	      SELECT 'Y'
	      INTO l_create_event_called
	      FROM csi_item_instances_h
	      WHERE instance_id = l_rel_tbl(j).subject_id
	      AND new_accounting_class_code = 'CUST_PROD'
	      AND ROWNUM = 1;
	    EXCEPTION
	      WHEN OTHERS THEN
	        l_create_event_called := 'N';
	    END;
	    IF (l_debug_level > 1) THEN
	      csi_gen_utility_pvt.put_line('l_create_event_called  : '||l_create_event_called);
	    END IF;

       CSI_ITEM_INSTANCES_PKG.Update_Row
       (  p_INSTANCE_ID                 => l_rel_tbl(j).subject_id,
          p_INSTANCE_NUMBER             => FND_API.G_MISS_CHAR,
          p_EXTERNAL_REFERENCE          => FND_API.G_MISS_CHAR,
          p_INVENTORY_ITEM_ID           => FND_API.G_MISS_NUM,
          p_INVENTORY_REVISION          => FND_API.G_MISS_CHAR,
          p_INV_MASTER_ORGANIZATION_ID  => FND_API.G_MISS_NUM,
          p_SERIAL_NUMBER               => FND_API.G_MISS_CHAR,
          p_MFG_SERIAL_NUMBER_FLAG      => FND_API.G_MISS_CHAR,
          p_LOT_NUMBER                  => FND_API.G_MISS_CHAR,
          p_QUANTITY                    => FND_API.G_MISS_NUM,
          p_UNIT_OF_MEASURE             => FND_API.G_MISS_CHAR,
          p_ACCOUNTING_CLASS_CODE       => p_instance_rec.ACCOUNTING_CLASS_CODE,
          p_INSTANCE_CONDITION_ID       => FND_API.G_MISS_NUM,
          p_INSTANCE_STATUS_ID          => l_instance_status_id, --p_instance_rec.INSTANCE_STATUS_ID,
          p_CUSTOMER_VIEW_FLAG          => FND_API.G_MISS_CHAR,
          p_MERCHANT_VIEW_FLAG          => FND_API.G_MISS_CHAR,
          p_SELLABLE_FLAG               => FND_API.G_MISS_CHAR,
          p_SYSTEM_ID                   => l_system_id,--FND_API.G_MISS_NUM,
          p_INSTANCE_TYPE_CODE          => FND_API.G_MISS_CHAR,
          p_ACTIVE_START_DATE           => FND_API.G_MISS_DATE,
          p_ACTIVE_END_DATE             => p_instance_Rec.ACTIVE_END_DATE,
          p_LOCATION_TYPE_CODE          => p_instance_rec.LOCATION_TYPE_CODE,
          p_LOCATION_ID                 => p_instance_rec.LOCATION_ID,
          p_INV_ORGANIZATION_ID         => p_instance_rec.INV_ORGANIZATION_ID,
          p_INV_SUBINVENTORY_NAME       => p_instance_rec.INV_SUBINVENTORY_NAME,
          p_INV_LOCATOR_ID              => p_instance_rec.INV_LOCATOR_ID,
          p_PA_PROJECT_ID               => p_instance_rec.PA_PROJECT_ID,
          p_PA_PROJECT_TASK_ID          => p_instance_rec.PA_PROJECT_TASK_ID,
          p_IN_TRANSIT_ORDER_LINE_ID    => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID,
          p_WIP_JOB_ID                  => p_instance_rec.WIP_JOB_ID,
          p_PO_ORDER_LINE_ID            => p_instance_rec.PO_ORDER_LINE_ID,
          --p_LAST_OE_ORDER_LINE_ID       => p_instance_rec.LAST_OE_ORDER_LINE_ID,  Commented for bug 6177045
	  p_LAST_OE_ORDER_LINE_ID       => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID, --Added for bug 6177045
          --Start of changes for bug:5899043
	  p_LAST_OE_RMA_LINE_ID         => FND_API.G_MISS_NUM, --p_instance_rec.LAST_OE_RMA_LINE_ID,
          p_LAST_PO_PO_LINE_ID          => FND_API.G_MISS_NUM, --p_instance_rec.LAST_PO_PO_LINE_ID,
          p_LAST_OE_PO_NUMBER           => FND_API.G_MISS_CHAR,--p_instance_rec.LAST_OE_PO_NUMBER,
          p_LAST_WIP_JOB_ID             => FND_API.G_MISS_NUM, --p_instance_rec.LAST_WIP_JOB_ID,
          p_LAST_PA_PROJECT_ID          => FND_API.G_MISS_NUM, --p_instance_rec.LAST_PA_PROJECT_ID,
          p_LAST_PA_TASK_ID             => FND_API.G_MISS_NUM, --p_instance_rec.LAST_PA_TASK_ID,
          p_LAST_OE_AGREEMENT_ID        => FND_API.G_MISS_NUM, --p_instance_rec.LAST_OE_AGREEMENT_ID,
	  --End of changes for bug:5899043
          p_INSTALL_DATE                => l_install_date, -- Install Date should be cascaded
          p_MANUALLY_CREATED_FLAG       => FND_API.G_MISS_CHAR,
          p_RETURN_BY_DATE              => FND_API.G_MISS_DATE,
          p_ACTUAL_RETURN_DATE          => FND_API.G_MISS_DATE,
          p_CREATION_COMPLETE_FLAG      => FND_API.G_MISS_CHAR,
          p_COMPLETENESS_FLAG           => FND_API.G_MISS_CHAR,
          p_CONTEXT                     => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE1                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE2                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE3                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE4                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE5                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE6                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE7                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE8                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE9                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE10                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE11                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE12                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE13                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE14                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE15                 => FND_API.G_MISS_CHAR,
          p_CREATED_BY                  => fnd_api.g_miss_num,
          p_CREATION_DATE               => fnd_api.g_miss_date,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID,
          p_LAST_UPDATE_DATE            => SYSDATE,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.CONC_LOGIN_ID,
          p_OBJECT_VERSION_NUMBER       => p_instance_rec.OBJECT_VERSION_NUMBER,
          p_LAST_TXN_LINE_DETAIL_ID     => FND_API.G_MISS_NUM,
          p_INSTALL_LOCATION_TYPE_CODE  => p_instance_rec.INSTALL_LOCATION_TYPE_CODE,
          p_INSTALL_LOCATION_ID         => p_instance_rec.INSTALL_LOCATION_ID,
          p_INSTANCE_USAGE_CODE         => FND_API.G_MISS_CHAR,
          p_LAST_VLD_ORGANIZATION_ID    => FND_API.G_MISS_NUM,
          p_CONFIG_INST_HDR_ID          => l_config_inst_hdr_id, --FND_API.G_MISS_NUM,
          p_CONFIG_INST_REV_NUM         => l_config_inst_rev_num, --FND_API.G_MISS_NUM,
          p_CONFIG_INST_ITEM_ID         => l_config_inst_item_id, --FND_API.G_MISS_NUM,
          p_CONFIG_VALID_STATUS         => l_config_valid_status,--FND_API.G_MISS_CHAR,
          p_INSTANCE_DESCRIPTION        => FND_API.G_MISS_CHAR,
          p_REQUEST_ID                  => FND_API.G_MISS_NUM,
          p_PROGRAM_APPLICATION_ID      => FND_API.G_MISS_NUM,
          p_PROGRAM_ID                  => FND_API.G_MISS_NUM,
          p_PROGRAM_UPDATE_DATE         => FND_API.G_MISS_DATE,
	  --start of parameters addition for eam integration--
          p_NETWORK_ASSET_FLAG          => FND_API.G_MISS_CHAR,
          p_MAINTAINABLE_FLAG           => FND_API.G_MISS_CHAR,
          p_PN_LOCATION_ID              => FND_API.G_MISS_NUM,
          p_ASSET_CRITICALITY_CODE      => FND_API.G_MISS_CHAR,
          p_CATEGORY_ID                 => FND_API.G_MISS_NUM,
          p_EQUIPMENT_GEN_OBJECT_ID     => FND_API.G_MISS_NUM,
          p_INSTANTIATION_FLAG          => FND_API.G_MISS_CHAR,
          p_LINEAR_LOCATION_ID          => FND_API.G_MISS_NUM,
          p_OPERATIONAL_LOG_FLAG        => FND_API.G_MISS_CHAR,
          p_CHECKIN_STATUS              => FND_API.G_MISS_NUM,
          p_SUPPLIER_WARRANTY_EXP_DATE  => FND_API.G_MISS_DATE,
          p_ATTRIBUTE16                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE17                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE18                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE19                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE20                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE21                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE22                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE23                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE24                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE25                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE26                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE27                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE28                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE29                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE30                 => FND_API.G_MISS_CHAR,
	  --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
          p_PURCHASE_UNIT_PRICE         => FND_API.G_MISS_NUM,
          p_PURCHASE_CURRENCY_CODE      => FND_API.G_MISS_CHAR,
          p_PAYABLES_UNIT_PRICE         => FND_API.G_MISS_NUM,
          p_PAYABLES_CURRENCY_CODE      => FND_API.G_MISS_CHAR,
          p_SALES_UNIT_PRICE            => FND_API.G_MISS_NUM,
          p_SALES_CURRENCY_CODE         => FND_API.G_MISS_CHAR,
          p_OPERATIONAL_STATUS_CODE     => p_instance_rec.operational_status_code,
    -- End addition of columns for FA Integration
          p_SOURCE_CODE                 => p_instance_rec.SOURCE_CODE -- Added Code for Siebel Genesis Project
    );

	  --If block added for bug 7239642
      csi_gen_utility_pvt.put_line('l_raise_bes_event                  : ' || l_raise_bes_event);
      csi_gen_utility_pvt.put_line('p_instance_rec.INSTANCE_USAGE_CODE : ' || p_instance_rec.INSTANCE_USAGE_CODE);
      IF l_raise_bes_event = 'Y' THEN
        IF p_instance_rec.INSTANCE_USAGE_CODE = 'OUT_OF_ENTERPRISE' THEN
          IF l_create_event_called = 'N' THEN
            csi_gen_utility_pvt.put_line('Calling Create Instance Event');
            CSI_BUSINESS_EVENT_PVT.CREATE_INSTANCE_EVENT
              ( p_api_version         => p_api_version
               ,p_commit              => fnd_api.g_false
               ,p_init_msg_list       => p_init_msg_list
               ,p_validation_level    => p_validation_level
               ,p_instance_id         => l_rel_tbl(j).subject_id
               ,p_subject_instance_id => null
               ,x_return_status       => x_return_status
               ,x_msg_count           => x_msg_count
               ,x_msg_data            => x_msg_data
              );

            IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                l_msg_index := 1;
                l_msg_count := x_msg_count;

                WHILE l_msg_count > 0 LOOP
                   x_msg_data := FND_MSG_PUB.GET(l_msg_index, FND_API.G_FALSE);
                   csi_gen_utility_pvt.put_line(' Error from CSI_BUSINESS_EVENT.CREATE_INSTANCE_EVENT');
                   csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                   l_msg_index := l_msg_index + 1;
                   l_msg_count := l_msg_count - 1;
                END LOOP;
                RAISE FND_API.G_EXC_ERROR;
            END IF;

            --Added call to update instance event for bug 7699277
            --As the integration design requires a create event to create the asset
            --and an update event to create the relationship hierarchy
            l_root_asset_id := csi_ii_relationships_pvt.Get_Root_Parent(l_rel_tbl(j).subject_id,
                                            l_rel_tbl(j).relationship_type_code,
                                            l_rel_tbl(j).object_id);
            csi_gen_utility_pvt.put_line('l_rel_tbl(' || j || ').subject_id             : ' || l_rel_tbl(j).subject_id);
            csi_gen_utility_pvt.put_line('l_rel_tbl(' || j || ').relationship_type_code : ' || l_rel_tbl(j).relationship_type_code);
            csi_gen_utility_pvt.put_line('l_rel_tbl(' || j || ').object_id              : ' || l_rel_tbl(j).object_id);
            csi_gen_utility_pvt.put_line('l_root_asset_id                     : ' || l_root_asset_id);
            csi_gen_utility_pvt.put_line('Calling Update Instance Event');
            CSI_BUSINESS_EVENT_PVT.UPDATE_INSTANCE_EVENT
              ( p_api_version         => p_api_version
               ,p_commit              => fnd_api.g_false
               ,p_init_msg_list       => p_init_msg_list
               ,p_validation_level    => p_validation_level
               ,p_instance_id         => l_rel_tbl(j).subject_id
               ,p_subject_instance_id => nvl(l_root_asset_id, l_rel_tbl(j).object_id)
               ,x_return_status       => x_return_status
               ,x_msg_count           => x_msg_count
               ,x_msg_data            => x_msg_data
              );

            IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                l_msg_index := 1;
                l_msg_count := x_msg_count;

                WHILE l_msg_count > 0 LOOP
                   x_msg_data := FND_MSG_PUB.GET(l_msg_index, FND_API.G_FALSE);
                   csi_gen_utility_pvt.put_line(' Error from CSI_BUSINESS_EVENT.UPDATE_INSTANCE_EVENT');
                   csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                   l_msg_index := l_msg_index + 1;
                   l_msg_count := l_msg_count - 1;
                END LOOP;
                RAISE FND_API.G_EXC_ERROR;
            END IF;
          ELSIF l_create_event_called = 'Y' THEN
            csi_gen_utility_pvt.put_line('Calling Update Instance Event');
            CSI_BUSINESS_EVENT_PVT.UPDATE_INSTANCE_EVENT
              ( p_api_version         => p_api_version
               ,p_commit              => fnd_api.g_false
               ,p_init_msg_list       => p_init_msg_list
               ,p_validation_level    => p_validation_level
               ,p_instance_id         => l_rel_tbl(j).subject_id
               ,p_subject_instance_id => null
               ,x_return_status       => x_return_status
               ,x_msg_count           => x_msg_count
               ,x_msg_data            => x_msg_data
              );

            IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                l_msg_index := 1;
                l_msg_count := x_msg_count;

                WHILE l_msg_count > 0 LOOP
                   x_msg_data := FND_MSG_PUB.GET(l_msg_index, FND_API.G_FALSE);
                   csi_gen_utility_pvt.put_line(' Error from CSI_BUSINESS_EVENT.UPDATE_INSTANCE_EVENT');
                   csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                   l_msg_index := l_msg_index + 1;
                   l_msg_count := l_msg_count - 1;
                END LOOP;
                RAISE FND_API.G_EXC_ERROR;
            END IF;
          END IF; --l_create_event_called
        END IF; --p_instance_rec.ACCOUNTING_CLASS_CODE
      END IF;
-- Get the full_dump_frequency from csi_install_parameter
       --
      IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
          csi_gen_utility_pvt.populate_install_param_rec;
       END IF;
       --
       l_full_dump_frequency := csi_datastructures_pub.g_install_param_rec.history_full_dump_frequency;
       --
       IF l_full_dump_frequency IS NULL THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_FULL_DUMP_FAILED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
       END IF;
       --
 -- Get a unique history item instance id from the sequence
          l_csi_item_instance_h_id :=
                                 csi_item_instance_vld_pvt.get_csi_item_instance_h_id;

       SELECT MOD(p_instance_rec.object_version_number,l_full_dump_frequency)
       INTO   l_mod_value
       FROM   dual;

       -- Start of modifications for Bug#2547034 on 09/20/02 - rtalluri
        BEGIN
        SELECT  instance_history_id
        INTO    l_ins_hist_id
        FROM    csi_item_instances_h h
        WHERE   h.transaction_id = p_txn_rec.transaction_id
        AND     h.instance_id = l_rel_tbl(j).subject_id;

        OPEN   ins_hist_csr(l_ins_hist_id);
        FETCH  ins_hist_csr INTO l_ins_hist_csr ;
        CLOSE  ins_hist_csr;

        IF l_ins_hist_csr.full_dump_flag = 'Y'
        THEN
          CSI_ITEM_INSTANCES_H_PKG.Update_Row
           ( p_INSTANCE_HISTORY_ID               => l_ins_hist_id
            ,p_INSTANCE_ID                       => fnd_api.g_miss_num
            ,p_TRANSACTION_ID                    => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_NUMBER               => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_NUMBER               => fnd_api.g_miss_char
            ,p_OLD_EXTERNAL_REFERENCE            => fnd_api.g_miss_char
            ,p_NEW_EXTERNAL_REFERENCE            => fnd_api.g_miss_char
            ,p_OLD_INVENTORY_ITEM_ID             => fnd_api.g_miss_num
            ,p_NEW_INVENTORY_ITEM_ID             => fnd_api.g_miss_num
            ,p_OLD_INVENTORY_REVISION            => fnd_api.g_miss_char
            ,p_NEW_INVENTORY_REVISION            => fnd_api.g_miss_char
            ,p_OLD_INV_MASTER_ORGZN_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_MASTER_ORGZN_ID           => fnd_api.g_miss_num
            ,p_OLD_SERIAL_NUMBER                 => fnd_api.g_miss_char
            ,p_NEW_SERIAL_NUMBER                 => fnd_api.g_miss_char
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => fnd_api.g_miss_char
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => fnd_api.g_miss_char
            ,p_OLD_LOT_NUMBER                    => fnd_api.g_miss_char
            ,p_NEW_LOT_NUMBER                    => fnd_api.g_miss_char
            ,p_OLD_QUANTITY                      => fnd_api.g_miss_num
            ,p_NEW_QUANTITY                      => fnd_api.g_miss_num
            ,p_OLD_UNIT_OF_MEASURE               => fnd_api.g_miss_char
            ,p_NEW_UNIT_OF_MEASURE               => fnd_api.g_miss_char
            ,p_OLD_ACCOUNTING_CLASS_CODE         => fnd_api.g_miss_char
            ,p_NEW_ACCOUNTING_CLASS_CODE         => p_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_CONDITION_ID         => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_STATUS_ID            => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_status_id --p_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_CUSTOMER_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_OLD_MERCHANT_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_MERCHANT_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_OLD_SELLABLE_FLAG                 => fnd_api.g_miss_char
            ,p_NEW_SELLABLE_FLAG                 => fnd_api.g_miss_char
            ,p_OLD_SYSTEM_ID                     => fnd_api.g_miss_num
            ,p_NEW_SYSTEM_ID                     => l_system_id
            ,p_OLD_INSTANCE_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_TYPE_CODE            => fnd_api.g_miss_char
            ,p_OLD_ACTIVE_START_DATE             => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_START_DATE             => fnd_api.g_miss_date
            ,p_OLD_ACTIVE_END_DATE               => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_END_DATE               => p_instance_rec.ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_LOCATION_TYPE_CODE            => p_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => fnd_api.g_miss_num
            ,p_NEW_LOCATION_ID                   => p_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_ORGANIZATION_ID           => p_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => fnd_api.g_miss_char
            ,p_NEW_INV_SUBINVENTORY_NAME         => p_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => fnd_api.g_miss_num
            ,p_NEW_INV_LOCATOR_ID                => p_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => fnd_api.g_miss_num
            ,p_NEW_PA_PROJECT_ID                 => p_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => fnd_api.g_miss_num
            ,p_NEW_PA_PROJECT_TASK_ID            => p_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => fnd_api.g_miss_num
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => fnd_api.g_miss_num
            ,p_NEW_WIP_JOB_ID                    => p_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => fnd_api.g_miss_num
            ,p_NEW_PO_ORDER_LINE_ID              => p_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => fnd_api.g_miss_char
            ,p_NEW_COMPLETENESS_FLAG             => fnd_api.g_miss_char
            ,p_FULL_DUMP_FLAG                    => fnd_api.g_miss_char
            ,p_NEW_CONTEXT                       => fnd_api.g_miss_char
            ,P_OLD_CONTEXT                       => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE1                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE1                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE2                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE2                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE3                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE3                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE4                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE4                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE5                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE5                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE6                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE6                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE7                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE7                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE8                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE8                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE9                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE9                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE10                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE10                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE11                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE11                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE12                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE12                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE13                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE13                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE14                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE14                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE15                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE15                   => fnd_api.g_miss_char
            ,p_CREATED_BY                        => fnd_api.g_miss_num
            ,p_CREATION_DATE                     => fnd_api.g_miss_date
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => fnd_api.g_miss_num
            ,p_OLD_INST_LOC_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INST_LOC_TYPE_CODE            => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => fnd_api.g_miss_num
            ,p_NEW_INST_LOC_ID                   => p_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => fnd_api.g_miss_char
            ,p_NEW_INST_USAGE_CODE               => fnd_api.g_miss_char
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_OLD_CONFIG_INST_REV_NUM           => fnd_api.g_miss_num
            ,p_NEW_CONFIG_INST_REV_NUM           => fnd_api.g_miss_num
            ,p_OLD_CONFIG_VALID_STATUS           => fnd_api.g_miss_char
            ,p_NEW_CONFIG_VALID_STATUS           => fnd_api.g_miss_char
            ,p_OLD_INSTANCE_DESCRIPTION          => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_DESCRIPTION          => fnd_api.g_miss_char
            ,p_OLD_INSTALL_DATE                  => fnd_api.g_miss_date
            ,p_NEW_INSTALL_DATE                  => l_install_date
            ,p_OLD_RETURN_BY_DATE                => fnd_api.g_miss_date
            ,p_NEW_RETURN_BY_DATE                => fnd_api.g_miss_date
            ,p_OLD_ACTUAL_RETURN_DATE            => fnd_api.g_miss_date
            ,p_NEW_ACTUAL_RETURN_DATE            => fnd_api.g_miss_date
            ,p_OLD_LAST_OE_AGREEMENT_ID          => fnd_api.g_miss_num
            ,p_NEW_LAST_OE_AGREEMENT_ID          => fnd_api.g_miss_num
            ,p_OLD_LAST_OE_ORDER_LINE_ID         => fnd_api.g_miss_num
            ,p_NEW_LAST_OE_ORDER_LINE_ID         => fnd_api.g_miss_num --p_instance_rec.LAST_OE_ORDER_LINE_ID
            ,p_OLD_LAST_OE_RMA_LINE_ID        => fnd_api.g_miss_num
            ,p_NEW_LAST_OE_RMA_LINE_ID        => fnd_api.g_miss_num --p_instance_rec.LAST_OE_RMA_LINE_ID
            ,p_OLD_LAST_WIP_JOB_ID               => fnd_api.g_miss_num --fnd_api.g_miss_num
            ,p_NEW_LAST_WIP_JOB_ID               => fnd_api.g_miss_num --p_instance_rec.LAST_WIP_JOB_ID
            ,p_OLD_LAST_PO_PO_LINE_ID            => fnd_api.g_miss_num --fnd_api.g_miss_num
            ,p_NEW_LAST_PO_PO_LINE_ID            => fnd_api.g_miss_num --p_instance_rec.LAST_PO_PO_LINE_ID
            ,p_OLD_LAST_PA_PROJECT_ID            => fnd_api.g_miss_num --fnd_api.g_miss_num
            ,p_NEW_LAST_PA_PROJECT_ID            => fnd_api.g_miss_num --p_instance_rec.LAST_PA_PROJECT_ID
            ,p_OLD_LAST_PA_TASK_ID          => fnd_api.g_miss_num --fnd_api.g_miss_num
            ,p_NEW_LAST_PA_TASK_ID          => fnd_api.g_miss_num --p_instance_rec.LAST_PA_TASK_ID
            ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => fnd_api.g_miss_num
            ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => fnd_api.g_miss_num --p_instance_rec.LAST_TXN_LINE_DETAIL_ID
            ,p_OLD_LAST_OE_PO_NUMBER             => fnd_api.g_miss_char
            ,p_NEW_LAST_OE_PO_NUMBER             => fnd_api.g_miss_char --p_instance_rec.LAST_OE_PO_NUMBER
	    --start of parameters addition for eam integration--
            ,p_OLD_NETWORK_ASSET_FLAG             => fnd_api.g_miss_char
            ,p_NEW_NETWORK_ASSET_FLAG             => fnd_api.g_miss_char
   	        ,p_OLD_MAINTAINABLE_FLAG              => fnd_api.g_miss_char
	        ,p_NEW_MAINTAINABLE_FLAG              => fnd_api.g_miss_char
            ,p_OLD_PN_LOCATION_ID                 => fnd_api.g_miss_num
            ,p_NEW_PN_LOCATION_ID                 => fnd_api.g_miss_num
            ,p_OLD_ASSET_CRITICALITY_CODE         => fnd_api.g_miss_char
            ,p_NEW_ASSET_CRITICALITY_CODE         => fnd_api.g_miss_char
            ,p_OLD_CATEGORY_ID                    => fnd_api.g_miss_num
            ,p_NEW_CATEGORY_ID                    => fnd_api.g_miss_num
            ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => fnd_api.g_miss_num
            ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => fnd_api.g_miss_num
            ,p_OLD_INSTANTIATION_FLAG             => fnd_api.g_miss_char
            ,p_NEW_INSTANTIATION_FLAG             => fnd_api.g_miss_char
            ,p_OLD_LINEAR_LOCATION_ID             => fnd_api.g_miss_num
            ,p_NEW_LINEAR_LOCATION_ID             => fnd_api.g_miss_num
            ,p_OLD_OPERATIONAL_LOG_FLAG           => fnd_api.g_miss_char
            ,p_NEW_OPERATIONAL_LOG_FLAG           => fnd_api.g_miss_char
            ,p_OLD_CHECKIN_STATUS                 => fnd_api.g_miss_NUM
            ,p_NEW_CHECKIN_STATUS                 => fnd_api.g_miss_NUM
            ,p_OLD_SUP_WARRANTY_EXP_DATE          => fnd_api.g_miss_date
            ,p_NEW_SUP_WARRANTY_EXP_DATE          => fnd_api.g_miss_date
            ,p_OLD_ATTRIBUTE16                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE16                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE17                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE17                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE18                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE18                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE19                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE19                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE20                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE20                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE21                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE21                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE22                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE22                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE23                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE23                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE24                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE24                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE25                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE25                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE26                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE26                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE27                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE27                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE28                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE28                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE29                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE29                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE30                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE30                    => fnd_api.g_miss_char
  	    --end of parameters addition for eam integration--
        -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_OLD_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_OLD_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_OLD_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_OLD_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_NEW_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_OLD_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_NEW_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_OLD_OPERATIONAL_STATUS_CODE        => fnd_api.g_miss_char
            ,p_NEW_OPERATIONAL_STATUS_CODE        => p_instance_rec.operational_status_code
        -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => fnd_api.g_miss_char
            ,p_NEW_SOURCE_CODE                   => fnd_api.g_miss_char
            -- End Add Code for Siebel Genesis Project
            );

        ELSE --l_ins_hist_csr.full_dump_flag = 'N'

             IF    ( l_ins_hist_csr.old_accounting_class_code IS NULL
                AND  l_ins_hist_csr.new_accounting_class_code IS NULL ) THEN
                     IF  ( p_instance_rec.accounting_class_code = l_curr_instance_rec.accounting_class_code )
                      OR ( p_instance_rec.accounting_class_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_accounting_class_code := NULL;
                           l_ins_hist_csr.new_accounting_class_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_accounting_class_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_accounting_class_code := p_instance_rec.accounting_class_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_accounting_class_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_accounting_class_code := p_instance_rec.accounting_class_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_instance_status_id IS NULL
                AND  l_ins_hist_csr.new_instance_status_id IS NULL ) THEN
                     IF  ( l_instance_status_id = l_curr_instance_rec.instance_status_id )
                      OR ( l_instance_status_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_instance_status_id := NULL;
                           l_ins_hist_csr.new_instance_status_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_instance_status_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_instance_status_id := l_instance_status_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_instance_status_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_instance_status_id := l_instance_status_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_system_id IS NULL
                AND  l_ins_hist_csr.new_system_id IS NULL ) THEN
                     IF  ( l_system_id = l_curr_instance_rec.system_id )
                      OR ( l_system_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_system_id := NULL;
                           l_ins_hist_csr.new_system_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_system_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_system_id := l_system_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_system_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_system_id := l_system_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_install_date IS NULL
                AND  l_ins_hist_csr.new_install_date IS NULL ) THEN
                     IF  ( l_install_date = l_curr_instance_rec.install_date )
                      OR ( l_install_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_install_date := NULL;
                           l_ins_hist_csr.new_install_date := NULL;
                     ELSE
                           l_ins_hist_csr.old_install_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_install_date := l_install_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_install_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_install_date := l_install_date;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_active_end_date IS NULL
                AND  l_ins_hist_csr.new_active_end_date IS NULL ) THEN
                     IF  ( p_instance_rec.active_end_date = l_curr_instance_rec.active_end_date )
                      OR ( p_instance_rec.active_end_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_active_end_date := NULL;
                           l_ins_hist_csr.new_active_end_date := NULL;
                     ELSE
                           l_ins_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_active_end_date := p_instance_rec.active_end_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_active_end_date := p_instance_rec.active_end_date;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_location_type_code IS NULL
                AND  l_ins_hist_csr.new_location_type_code IS NULL ) THEN
                     IF  ( p_instance_rec.location_type_code = l_curr_instance_rec.location_type_code )
                      OR ( p_instance_rec.location_type_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_location_type_code := NULL;
                           l_ins_hist_csr.new_location_type_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_location_type_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_location_type_code := p_instance_rec.location_type_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_location_type_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_location_type_code := p_instance_rec.location_type_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_location_id IS NULL
                AND  l_ins_hist_csr.new_location_id IS NULL ) THEN
                     IF  ( p_instance_rec.location_id = l_curr_instance_rec.location_id )
                      OR ( p_instance_rec.location_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_location_id := NULL;
                           l_ins_hist_csr.new_location_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_location_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_location_id := p_instance_rec.location_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_location_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_location_id := p_instance_rec.location_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_organization_id IS NULL
                AND  l_ins_hist_csr.new_inv_organization_id IS NULL ) THEN
                     IF  ( p_instance_rec.inv_organization_id = l_curr_instance_rec.inv_organization_id )
                      OR ( p_instance_rec.inv_organization_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inv_organization_id := NULL;
                           l_ins_hist_csr.new_inv_organization_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_organization_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inv_organization_id := p_instance_rec.inv_organization_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_organization_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inv_organization_id := p_instance_rec.inv_organization_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_subinventory_name IS NULL
                AND  l_ins_hist_csr.new_inv_subinventory_name IS NULL ) THEN
                     IF  ( p_instance_rec.inv_subinventory_name = l_curr_instance_rec.inv_subinventory_name )
                      OR ( p_instance_rec.inv_subinventory_name = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_inv_subinventory_name := NULL;
                           l_ins_hist_csr.new_inv_subinventory_name := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_subinventory_name := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_inv_subinventory_name := p_instance_rec.inv_subinventory_name;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_subinventory_name := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_inv_subinventory_name := p_instance_rec.inv_subinventory_name;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_locator_id IS NULL
                AND  l_ins_hist_csr.new_inv_locator_id IS NULL ) THEN
                     IF  ( p_instance_rec.inv_locator_id = l_curr_instance_rec.inv_locator_id )
                      OR ( p_instance_rec.inv_locator_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inv_locator_id := NULL;
                           l_ins_hist_csr.new_inv_locator_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_locator_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inv_locator_id := p_instance_rec.inv_locator_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_locator_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inv_locator_id := p_instance_rec.inv_locator_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_pa_project_id IS NULL
                AND  l_ins_hist_csr.new_pa_project_id IS NULL ) THEN
                     IF  ( p_instance_rec.pa_project_id = l_curr_instance_rec.pa_project_id )
                      OR ( p_instance_rec.pa_project_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_pa_project_id := NULL;
                           l_ins_hist_csr.new_pa_project_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_pa_project_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_pa_project_id := p_instance_rec.pa_project_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_pa_project_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_pa_project_id := p_instance_rec.pa_project_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_pa_project_task_id IS NULL
                AND  l_ins_hist_csr.new_pa_project_task_id IS NULL ) THEN
                     IF  ( p_instance_rec.pa_project_task_id = l_curr_instance_rec.pa_project_task_id )
                      OR ( p_instance_rec.pa_project_task_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_pa_project_task_id := NULL;
                           l_ins_hist_csr.new_pa_project_task_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_pa_project_task_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_pa_project_task_id := p_instance_rec.pa_project_task_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_pa_project_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_pa_project_task_id := p_instance_rec.pa_project_task_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_in_transit_order_line_id IS NULL
                AND  l_ins_hist_csr.new_in_transit_order_line_id IS NULL ) THEN
                     IF  ( p_instance_rec.in_transit_order_line_id = l_curr_instance_rec.in_transit_order_line_id )
                      OR ( p_instance_rec.in_transit_order_line_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_in_transit_order_line_id := NULL;
                           l_ins_hist_csr.new_in_transit_order_line_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_in_transit_order_line_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_in_transit_order_line_id := p_instance_rec.in_transit_order_line_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_in_transit_order_line_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_in_transit_order_line_id := p_instance_rec.in_transit_order_line_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_oe_agreement_id IS NULL
                AND  l_ins_hist_csr.new_oe_agreement_id IS NULL ) THEN
                     IF  ( p_instance_rec.last_oe_agreement_id = l_curr_instance_rec.last_oe_agreement_id )
                      OR ( p_instance_rec.last_oe_agreement_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_oe_agreement_id := NULL;
                           l_ins_hist_csr.new_oe_agreement_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_oe_agreement_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_oe_agreement_id := p_instance_rec.last_oe_agreement_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_oe_agreement_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_oe_agreement_id := p_instance_rec.last_oe_agreement_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_OE_ORDER_LINE_ID = l_curr_instance_rec.LAST_OE_ORDER_LINE_ID )
                      OR ( p_instance_rec.LAST_OE_ORDER_LINE_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID := NULL;
                           l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.OLD_LAST_OE_RMA_LINE_ID IS NULL
                AND  l_ins_hist_csr.NEW_LAST_OE_RMA_LINE_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_OE_RMA_LINE_ID = l_curr_instance_rec.LAST_OE_RMA_LINE_ID )
                      OR ( p_instance_rec.LAST_OE_RMA_LINE_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.OLD_LAST_OE_RMA_LINE_ID := NULL;
                           l_ins_hist_csr.NEW_LAST_OE_RMA_LINE_ID := NULL;
                     ELSE
                           l_ins_hist_csr.OLD_LAST_OE_RMA_LINE_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.NEW_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.OLD_LAST_OE_RMA_LINE_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.NEW_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_WIP_JOB_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_WIP_JOB_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_WIP_JOB_ID = l_curr_instance_rec.LAST_WIP_JOB_ID )
                      OR ( p_instance_rec.LAST_WIP_JOB_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_WIP_JOB_ID := NULL;
                           l_ins_hist_csr.new_LAST_WIP_JOB_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_WIP_JOB_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_WIP_JOB_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_PO_PO_LINE_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_PO_PO_LINE_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_PO_PO_LINE_ID = l_curr_instance_rec.LAST_PO_PO_LINE_ID )
                      OR ( p_instance_rec.LAST_PO_PO_LINE_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_PO_PO_LINE_ID := NULL;
                           l_ins_hist_csr.new_LAST_PO_PO_LINE_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_PO_PO_LINE_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_PO_PO_LINE_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_PA_PROJECT_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_PA_PROJECT_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_PA_PROJECT_ID = l_curr_instance_rec.LAST_PA_PROJECT_ID )
                      OR ( p_instance_rec.LAST_PA_PROJECT_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_PA_PROJECT_ID := NULL;
                           l_ins_hist_csr.new_LAST_PA_PROJECT_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_PA_PROJECT_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_PA_PROJECT_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.OLD_LAST_PA_TASK_ID IS NULL
                AND  l_ins_hist_csr.NEW_LAST_PA_TASK_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_PA_TASK_ID = l_curr_instance_rec.LAST_PA_TASK_ID )
                      OR ( p_instance_rec.LAST_PA_TASK_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.OLD_LAST_PA_TASK_ID := NULL;
                           l_ins_hist_csr.NEW_LAST_PA_TASK_ID := NULL;
                     ELSE
                           l_ins_hist_csr.OLD_LAST_PA_TASK_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.NEW_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.OLD_LAST_PA_TASK_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.NEW_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_TXN_LINE_DETAIL_ID = l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID )
                      OR ( p_instance_rec.LAST_TXN_LINE_DETAIL_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID := NULL;
                           l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_OE_PO_NUMBER IS NULL
                AND  l_ins_hist_csr.new_LAST_OE_PO_NUMBER IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_OE_PO_NUMBER = l_curr_instance_rec.LAST_OE_PO_NUMBER )
                      OR ( p_instance_rec.LAST_OE_PO_NUMBER = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_LAST_OE_PO_NUMBER := NULL;
                           l_ins_hist_csr.new_LAST_OE_PO_NUMBER := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_OE_PO_NUMBER := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_OE_PO_NUMBER := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_wip_job_id IS NULL
                AND  l_ins_hist_csr.new_wip_job_id IS NULL ) THEN
                     IF  ( p_instance_rec.wip_job_id = l_curr_instance_rec.wip_job_id )
                      OR ( p_instance_rec.wip_job_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_wip_job_id := NULL;
                           l_ins_hist_csr.new_wip_job_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_wip_job_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_wip_job_id := p_instance_rec.wip_job_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_wip_job_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_wip_job_id := p_instance_rec.wip_job_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_po_order_line_id IS NULL
                AND  l_ins_hist_csr.new_po_order_line_id IS NULL ) THEN
                     IF  ( p_instance_rec.po_order_line_id = l_curr_instance_rec.po_order_line_id )
                      OR ( p_instance_rec.po_order_line_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_po_order_line_id := NULL;
                           l_ins_hist_csr.new_po_order_line_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_po_order_line_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_po_order_line_id := p_instance_rec.po_order_line_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_po_order_line_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_po_order_line_id := p_instance_rec.po_order_line_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inst_loc_type_code IS NULL
                AND  l_ins_hist_csr.new_inst_loc_type_code IS NULL ) THEN
                     IF  ( p_instance_rec.install_location_type_code = l_curr_instance_rec.install_location_type_code )
                      OR ( p_instance_rec.install_location_type_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_inst_loc_type_code := NULL;
                           l_ins_hist_csr.new_inst_loc_type_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_inst_loc_type_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_inst_loc_type_code := p_instance_rec.install_location_type_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inst_loc_type_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_inst_loc_type_code := p_instance_rec.install_location_type_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inst_loc_id IS NULL
                AND  l_ins_hist_csr.new_inst_loc_id IS NULL ) THEN
                     IF  ( p_instance_rec.install_location_id = l_curr_instance_rec.install_location_id )
                      OR ( p_instance_rec.install_location_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inst_loc_id := NULL;
                           l_ins_hist_csr.new_inst_loc_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inst_loc_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inst_loc_id := p_instance_rec.install_location_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inst_loc_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inst_loc_id := p_instance_rec.install_location_id;
             END IF;
             --

             IF    ( l_ins_hist_csr.old_operational_status_code IS NULL
                AND  l_ins_hist_csr.new_operational_status_code IS NULL ) THEN
                     IF  ( p_instance_rec.operational_status_code = l_curr_instance_rec.operational_status_code )
                      OR ( p_instance_rec.operational_status_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_operational_status_code := NULL;
                           l_ins_hist_csr.new_operational_status_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_operational_status_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_operational_status_code := p_instance_rec.operational_status_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_operational_status_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_operational_status_code := p_instance_rec.operational_status_code;
             END IF;


         CSI_ITEM_INSTANCES_H_PKG.Update_Row
           ( p_INSTANCE_HISTORY_ID               => l_ins_hist_id
            ,p_INSTANCE_ID                       => fnd_api.g_miss_num
            ,p_TRANSACTION_ID                    => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_NUMBER               => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_NUMBER               => fnd_api.g_miss_char
            ,p_OLD_EXTERNAL_REFERENCE            => fnd_api.g_miss_char
            ,p_NEW_EXTERNAL_REFERENCE            => fnd_api.g_miss_char
            ,p_OLD_INVENTORY_ITEM_ID             => fnd_api.g_miss_num
            ,p_NEW_INVENTORY_ITEM_ID             => fnd_api.g_miss_num
            ,p_OLD_INVENTORY_REVISION            => fnd_api.g_miss_char
            ,p_NEW_INVENTORY_REVISION            => fnd_api.g_miss_char
            ,p_OLD_INV_MASTER_ORGZN_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_MASTER_ORGZN_ID           => fnd_api.g_miss_num
            ,p_OLD_SERIAL_NUMBER                 => fnd_api.g_miss_char
            ,p_NEW_SERIAL_NUMBER                 => fnd_api.g_miss_char
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => fnd_api.g_miss_char
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => fnd_api.g_miss_char
            ,p_OLD_LOT_NUMBER                    => fnd_api.g_miss_char
            ,p_NEW_LOT_NUMBER                    => fnd_api.g_miss_char
            ,p_OLD_QUANTITY                      => fnd_api.g_miss_num
            ,p_NEW_QUANTITY                      => fnd_api.g_miss_num
            ,p_OLD_UNIT_OF_MEASURE               => fnd_api.g_miss_char
            ,p_NEW_UNIT_OF_MEASURE               => fnd_api.g_miss_char
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_ins_hist_csr.OLD_ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_ins_hist_csr.NEW_ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_CONDITION_ID         => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_STATUS_ID            => l_ins_hist_csr.OLD_INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_ins_hist_csr.NEW_INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_CUSTOMER_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_OLD_MERCHANT_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_MERCHANT_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_OLD_SELLABLE_FLAG                 => fnd_api.g_miss_char
            ,p_NEW_SELLABLE_FLAG                 => fnd_api.g_miss_char
            ,p_OLD_SYSTEM_ID                     => l_ins_hist_csr.old_system_id
            ,p_NEW_SYSTEM_ID                     => l_ins_hist_csr.new_system_id
            ,p_OLD_INSTANCE_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_TYPE_CODE            => fnd_api.g_miss_char
            ,p_OLD_ACTIVE_START_DATE             => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_START_DATE             => fnd_api.g_miss_date
            ,p_OLD_ACTIVE_END_DATE               => l_ins_hist_csr.OLD_ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_ins_hist_csr.NEW_ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_ins_hist_csr.OLD_LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_ins_hist_csr.NEW_LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_ins_hist_csr.OLD_LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_ins_hist_csr.NEW_LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_ins_hist_csr.OLD_INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_ins_hist_csr.NEW_INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_ins_hist_csr.OLD_INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_ins_hist_csr.NEW_INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_ins_hist_csr.OLD_INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_ins_hist_csr.NEW_INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_ins_hist_csr.OLD_PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_ins_hist_csr.NEW_PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_ins_hist_csr.OLD_PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_ins_hist_csr.NEW_PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_ins_hist_csr.OLD_IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_ins_hist_csr.NEW_IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_ins_hist_csr.OLD_WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_ins_hist_csr.NEW_WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_ins_hist_csr.OLD_PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_ins_hist_csr.NEW_PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => fnd_api.g_miss_char
            ,p_NEW_COMPLETENESS_FLAG             => fnd_api.g_miss_char
            ,p_FULL_DUMP_FLAG                    => fnd_api.g_miss_char
            ,p_NEW_CONTEXT                       => fnd_api.g_miss_char
            ,P_OLD_CONTEXT                       => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE1                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE1                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE2                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE2                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE3                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE3                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE4                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE4                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE5                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE5                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE6                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE6                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE7                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE7                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE8                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE8                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE9                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE9                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE10                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE10                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE11                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE11                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE12                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE12                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE13                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE13                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE14                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE14                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE15                   => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE15                   => fnd_api.g_miss_char
            ,p_CREATED_BY                        => fnd_api.g_miss_num
            ,p_CREATION_DATE                     => fnd_api.g_miss_date
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => fnd_api.g_miss_num
            ,p_OLD_INST_LOC_TYPE_CODE            => l_ins_hist_csr.OLD_INST_LOC_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_ins_hist_csr.NEW_INST_LOC_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_ins_hist_csr.OLD_INST_LOC_ID
            ,p_NEW_INST_LOC_ID                   => l_ins_hist_csr.NEW_INST_LOC_ID
            ,p_OLD_INST_USAGE_CODE               => fnd_api.g_miss_char
            ,p_NEW_INST_USAGE_CODE               => fnd_api.g_miss_char
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_OLD_CONFIG_INST_REV_NUM           => fnd_api.g_miss_num
            ,p_NEW_CONFIG_INST_REV_NUM           => fnd_api.g_miss_num
            ,p_OLD_CONFIG_VALID_STATUS           => fnd_api.g_miss_char
            ,p_NEW_CONFIG_VALID_STATUS           => fnd_api.g_miss_char
            ,p_OLD_INSTANCE_DESCRIPTION          => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_DESCRIPTION          => fnd_api.g_miss_char
            ,p_OLD_INSTALL_DATE                  => l_ins_hist_csr.old_install_date
            ,p_NEW_INSTALL_DATE                  => l_ins_hist_csr.new_install_date
            ,p_OLD_RETURN_BY_DATE                => fnd_api.g_miss_date
            ,p_NEW_RETURN_BY_DATE                => fnd_api.g_miss_date
            ,p_OLD_ACTUAL_RETURN_DATE            => fnd_api.g_miss_date
            ,p_NEW_ACTUAL_RETURN_DATE            => fnd_api.g_miss_date
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_ins_hist_csr.OLD_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_ins_hist_csr.NEW_OE_AGREEMENT_ID
            ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_ins_hist_csr.OLD_LAST_OE_ORDER_LINE_ID
            ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_ins_hist_csr.NEW_LAST_OE_ORDER_LINE_ID
            ,p_OLD_LAST_OE_RMA_LINE_ID        => l_ins_hist_csr.OLD_LAST_OE_RMA_LINE_ID
            ,p_NEW_LAST_OE_RMA_LINE_ID        => l_ins_hist_csr.NEW_LAST_OE_RMA_LINE_ID
            ,p_OLD_LAST_WIP_JOB_ID               => l_ins_hist_csr.OLD_LAST_WIP_JOB_ID
            ,p_NEW_LAST_WIP_JOB_ID               => l_ins_hist_csr.NEW_LAST_WIP_JOB_ID
            ,p_OLD_LAST_PO_PO_LINE_ID            => l_ins_hist_csr.OLD_LAST_PO_PO_LINE_ID
            ,p_NEW_LAST_PO_PO_LINE_ID            => l_ins_hist_csr.NEW_LAST_PO_PO_LINE_ID
            ,p_OLD_LAST_PA_PROJECT_ID            => l_ins_hist_csr.OLD_LAST_PA_PROJECT_ID
            ,p_NEW_LAST_PA_PROJECT_ID            => l_ins_hist_csr.NEW_LAST_PA_PROJECT_ID
            ,p_OLD_LAST_PA_TASK_ID          => l_ins_hist_csr.OLD_LAST_PA_TASK_ID
            ,p_NEW_LAST_PA_TASK_ID          => l_ins_hist_csr.NEW_LAST_PA_TASK_ID
            ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_ins_hist_csr.OLD_LAST_TXN_LINE_DETAIL_ID
            ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_ins_hist_csr.NEW_LAST_TXN_LINE_DETAIL_ID
            ,p_OLD_LAST_OE_PO_NUMBER             => l_ins_hist_csr.OLD_LAST_OE_PO_NUMBER
            ,p_NEW_LAST_OE_PO_NUMBER             => l_ins_hist_csr.NEW_LAST_OE_PO_NUMBER
	    --start of parameters addition for eam integration--
            ,p_OLD_NETWORK_ASSET_FLAG             => fnd_api.g_miss_char
            ,p_NEW_NETWORK_ASSET_FLAG             => fnd_api.g_miss_char
            ,p_OLD_MAINTAINABLE_FLAG              => fnd_api.g_miss_char
            ,p_NEW_MAINTAINABLE_FLAG              => fnd_api.g_miss_char
            ,p_OLD_PN_LOCATION_ID                 => fnd_api.g_miss_num
            ,p_NEW_PN_LOCATION_ID                 => fnd_api.g_miss_num
            ,p_OLD_ASSET_CRITICALITY_CODE         => fnd_api.g_miss_char
            ,p_NEW_ASSET_CRITICALITY_CODE         => fnd_api.g_miss_char
            ,p_OLD_CATEGORY_ID                    => fnd_api.g_miss_num
            ,p_NEW_CATEGORY_ID                    => fnd_api.g_miss_num
            ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => fnd_api.g_miss_num
            ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => fnd_api.g_miss_num
            ,p_OLD_INSTANTIATION_FLAG             => fnd_api.g_miss_char
            ,p_NEW_INSTANTIATION_FLAG             => fnd_api.g_miss_char
            ,p_OLD_LINEAR_LOCATION_ID             => fnd_api.g_miss_num
            ,p_NEW_LINEAR_LOCATION_ID             => fnd_api.g_miss_num
            ,p_OLD_OPERATIONAL_LOG_FLAG           => fnd_api.g_miss_char
            ,p_NEW_OPERATIONAL_LOG_FLAG           => fnd_api.g_miss_char
            ,p_OLD_CHECKIN_STATUS                 => fnd_api.g_miss_num
            ,p_NEW_CHECKIN_STATUS                 => fnd_api.g_miss_num
            ,p_OLD_SUP_WARRANTY_EXP_DATE          => fnd_api.g_miss_date
            ,p_NEW_SUP_WARRANTY_EXP_DATE          => fnd_api.g_miss_date
            ,p_OLD_ATTRIBUTE16                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE16                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE17                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE17                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE18                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE18                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE19                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE19                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE20                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE20                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE21                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE21                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE22                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE22                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE23                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE23                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE24                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE24                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE25                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE25                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE26                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE26                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE27                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE27                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE28                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE28                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE29                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE29                    => fnd_api.g_miss_char
            ,p_OLD_ATTRIBUTE30                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE30                    => fnd_api.g_miss_char
  	    --end of parameters addition for eam integration--
       -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_OLD_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_OLD_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_OLD_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_OLD_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_NEW_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_OLD_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_NEW_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_ins_hist_csr.old_operational_status_code
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_ins_hist_csr.new_operational_status_code
        -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => fnd_api.g_miss_char
            ,p_NEW_SOURCE_CODE                   => fnd_api.g_miss_char
            -- End Add Code for Siebel Genesis Project
            );

        END IF; -- end if of l_ins_hist_csr.full_dump_flag
      EXCEPTION

      WHEN NO_DATA_FOUND THEN
         -- END OF MODIFICATION ON 22-JUL SK

      -- Check if there is a need to validate instance_usage_code, vld_organization_id
         IF (l_mod_value = 0) THEN
          -- If the mod value is 0 then dump all the columns both changed and unchanged
          -- changed columns have old and new values while the unchanged values have old and new values
          -- exactly same

              p_instance_rec.INSTANCE_NUMBER            := l_curr_instance_rec.INSTANCE_NUMBER;
              p_instance_rec.EXTERNAL_REFERENCE         := l_curr_instance_rec.EXTERNAL_REFERENCE;
              p_instance_rec.INVENTORY_ITEM_ID          := l_curr_instance_rec.INVENTORY_ITEM_ID;
              p_instance_rec.INVENTORY_REVISION         := l_curr_instance_rec.INVENTORY_REVISION;
              p_instance_rec.INV_MASTER_ORGANIZATION_ID := l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID;
              p_instance_rec.SERIAL_NUMBER              := l_curr_instance_rec.SERIAL_NUMBER;
              p_instance_rec.MFG_SERIAL_NUMBER_FLAG     := l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG;
              p_instance_rec.LOT_NUMBER                 := l_curr_instance_rec.LOT_NUMBER;
              p_instance_rec.QUANTITY                   := l_curr_instance_rec.QUANTITY;
              p_instance_rec.UNIT_OF_MEASURE            := l_curr_instance_rec.UNIT_OF_MEASURE;
              p_instance_rec.INSTANCE_CONDITION_ID      := l_curr_instance_rec.INSTANCE_CONDITION_ID;
              p_instance_rec.CUSTOMER_VIEW_FLAG         := l_curr_instance_rec.CUSTOMER_VIEW_FLAG;
              p_instance_rec.MERCHANT_VIEW_FLAG         := l_curr_instance_rec.MERCHANT_VIEW_FLAG;
              p_instance_rec.SELLABLE_FLAG              := l_curr_instance_rec.SELLABLE_FLAG;
              p_instance_rec.INSTANCE_TYPE_CODE         := l_curr_instance_rec.INSTANCE_TYPE_CODE;
              p_instance_rec.ACTIVE_START_DATE          := l_curr_instance_rec.ACTIVE_START_DATE;

              IF (p_instance_rec.ACCOUNTING_CLASS_CODE = FND_API.G_MISS_CHAR) THEN
                  p_instance_rec.ACCOUNTING_CLASS_CODE := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
              END IF;
              IF (l_instance_status_id = FND_API.G_MISS_NUM) THEN
                  l_instance_status_id := l_curr_instance_rec.INSTANCE_STATUS_ID;
              END IF;
              IF (l_system_id = FND_API.G_MISS_NUM) THEN
                  l_system_id := l_curr_instance_rec.INSTANCE_STATUS_ID;
              END IF;
              IF (l_install_date = FND_API.G_MISS_DATE) THEN
                  l_install_date := l_curr_instance_rec.INSTALL_DATE;
              END IF;
              IF (p_instance_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE) THEN
                  p_instance_rec.ACTIVE_END_dATE := l_curr_instance_rec.ACTIVE_END_DATE;
              END IF;
              IF (p_instance_rec.LOCATION_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
                  p_instance_rec.LOCATION_TYPE_CODE := l_curr_instance_rec.LOCATION_TYPE_CODE;
              END IF;
              IF (p_instance_rec.LOCATION_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LOCATION_ID := l_curr_instance_rec.LOCATION_ID;
              END IF;
              IF (p_instance_rec.INV_ORGANIZATION_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.INV_ORGANIZATION_ID := l_curr_instance_rec.INV_ORGANIZATION_ID;
              END IF;
              IF (p_instance_rec.INV_SUBINVENTORY_NAME = FND_API.G_MISS_CHAR) THEN
                  p_instance_rec.INV_SUBINVENTORY_NAME := l_curr_instance_rec.INV_SUBINVENTORY_NAME;
              END IF;
              IF (p_instance_rec.INV_LOCATOR_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.INV_LOCATOR_ID := l_curr_instance_rec.INV_LOCATOR_ID;
              END IF;
              IF (p_instance_rec.PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.PA_PROJECT_ID := l_curr_instance_rec.PA_PROJECT_ID;
              END IF;
              IF (p_instance_rec.PA_PROJECT_TASK_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.PA_PROJECT_TASK_ID := l_curr_instance_rec.PA_PROJECT_TASK_ID;
              END IF;
              IF (p_instance_rec.IN_TRANSIT_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.IN_TRANSIT_ORDER_LINE_ID := l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
              END IF;
              IF (p_instance_rec.WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.WIP_JOB_ID := l_curr_instance_rec.WIP_JOB_ID;
              END IF;
              IF (p_instance_rec.PO_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.PO_ORDER_LINE_ID := l_curr_instance_rec.PO_ORDER_LINE_ID;
              END IF;
              IF (p_instance_rec.LAST_OE_AGREEMENT_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_OE_AGREEMENT_ID := l_curr_instance_rec.LAST_OE_AGREEMENT_ID;
              END IF;
              IF (p_instance_rec.LAST_OE_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID;
              END IF;
              IF (p_instance_rec.LAST_OE_RMA_LINE_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
              END IF;
              IF (p_instance_rec.LAST_WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID;
              END IF;
              IF (p_instance_rec.LAST_PO_PO_LINE_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_PO_PO_LINE_ID := l_curr_instance_rec.LAST_PO_PO_LINE_ID;
              END IF;
              IF (p_instance_rec.LAST_PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID;
              END IF;
              IF (p_instance_rec.LAST_PA_TASK_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID;
              END IF;
              IF (p_instance_rec.LAST_TXN_LINE_DETAIL_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID;
              END IF;
              IF (p_instance_rec.LAST_OE_PO_NUMBER = FND_API.G_MISS_CHAR) THEN
                  p_instance_rec.LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER;
              END IF;
              IF (p_instance_rec.INSTALL_LOCATION_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
                  p_instance_rec.INSTALL_LOCATION_TYPE_CODE := l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE;
              END IF;
              IF (p_instance_rec.INSTALL_LOCATION_ID = FND_API.G_MISS_NUM) THEN
                  p_instance_rec.INSTALL_LOCATION_ID := l_curr_instance_rec.INSTALL_LOCATION_ID;
              END IF;
              IF (p_instance_rec.OPERATIONAL_STATUS_CODE = FND_API.G_MISS_CHAR) THEN
                  p_instance_rec.OPERATIONAL_STATUS_CODE := l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE;
              END IF;

              p_instance_rec.MANUALLY_CREATED_FLAG  := l_curr_instance_rec.MANUALLY_CREATED_FLAG;
              p_instance_rec.RETURN_BY_DATE         := l_curr_instance_rec.RETURN_BY_DATE;
              p_instance_rec.ACTUAL_RETURN_DATE     := l_curr_instance_rec.ACTUAL_RETURN_DATE;
              p_instance_rec.CREATION_COMPLETE_FLAG := l_curr_instance_rec.CREATION_COMPLETE_FLAG;
              p_instance_rec.COMPLETENESS_FLAG      := l_curr_instance_rec.COMPLETENESS_FLAG;
              p_instance_rec.CONTEXT                := l_curr_instance_rec.CONTEXT;
              p_instance_rec.ATTRIBUTE1             := l_curr_instance_rec.ATTRIBUTE1;
              p_instance_rec.ATTRIBUTE2             := l_curr_instance_rec.ATTRIBUTE2;
              p_instance_rec.ATTRIBUTE3             := l_curr_instance_rec.ATTRIBUTE3;
              p_instance_rec.ATTRIBUTE4             := l_curr_instance_rec.ATTRIBUTE4;
              p_instance_rec.ATTRIBUTE5             := l_curr_instance_rec.ATTRIBUTE5;
              p_instance_rec.ATTRIBUTE6             := l_curr_instance_rec.ATTRIBUTE6;
              p_instance_rec.ATTRIBUTE7             := l_curr_instance_rec.ATTRIBUTE7;
              p_instance_rec.ATTRIBUTE8             := l_curr_instance_rec.ATTRIBUTE8;
              p_instance_rec.ATTRIBUTE9             := l_curr_instance_rec.ATTRIBUTE9;
              p_instance_rec.ATTRIBUTE10            := l_curr_instance_rec.ATTRIBUTE10;
              p_instance_rec.ATTRIBUTE11            := l_curr_instance_rec.ATTRIBUTE11;
              p_instance_rec.ATTRIBUTE12            := l_curr_instance_rec.ATTRIBUTE12;
              p_instance_rec.ATTRIBUTE13            := l_curr_instance_rec.ATTRIBUTE13;
              p_instance_rec.ATTRIBUTE14            := l_curr_instance_rec.ATTRIBUTE14;
              p_instance_rec.ATTRIBUTE15            := l_curr_instance_rec.ATTRIBUTE15;
              p_instance_rec.OBJECT_VERSION_NUMBER  := l_curr_instance_rec.OBJECT_VERSION_NUMBER;
              p_instance_rec.INSTANCE_USAGE_CODE    := l_curr_instance_rec.INSTANCE_USAGE_CODE;
              p_instance_rec.CONFIG_INST_REV_NUM    := l_curr_instance_rec.CONFIG_INST_REV_NUM;
              p_instance_rec.CONFIG_VALID_STATUS    := l_curr_instance_rec.CONFIG_VALID_STATUS;
              p_instance_rec.INSTANCE_DESCRIPTION   := l_curr_instance_rec.INSTANCE_DESCRIPTION;
	      --start of code for eam integration--
              p_instance_rec.NETWORK_ASSET_FLAG     := l_curr_instance_rec.NETWORK_ASSET_FLAG;
              p_instance_rec.MAINTAINABLE_FLAG      := l_curr_instance_rec.MAINTAINABLE_FLAG;
              p_instance_rec.PN_LOCATION_ID         := l_curr_instance_rec.PN_LOCATION_ID;
              p_instance_rec.ASSET_CRITICALITY_CODE := l_curr_instance_rec.ASSET_CRITICALITY_CODE;
              p_instance_rec.CATEGORY_ID            := l_curr_instance_rec.CATEGORY_ID;
              p_instance_rec.EQUIPMENT_GEN_OBJECT_ID:= l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
              p_instance_rec.INSTANTIATION_FLAG     := l_curr_instance_rec.INSTANTIATION_FLAG;
              p_instance_rec.LINEAR_LOCATION_ID     := l_curr_instance_rec.LINEAR_LOCATION_ID;
              p_instance_rec.OPERATIONAL_LOG_FLAG   := l_curr_instance_rec.OPERATIONAL_LOG_FLAG;
              p_instance_rec.CHECKIN_STATUS         := l_curr_instance_rec.CHECKIN_STATUS;
              p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
              p_instance_rec.ATTRIBUTE16            := l_curr_instance_rec.ATTRIBUTE16;
              p_instance_rec.ATTRIBUTE17            := l_curr_instance_rec.ATTRIBUTE17;
              p_instance_rec.ATTRIBUTE18            := l_curr_instance_rec.ATTRIBUTE18;
              p_instance_rec.ATTRIBUTE19            := l_curr_instance_rec.ATTRIBUTE19;
              p_instance_rec.ATTRIBUTE20            := l_curr_instance_rec.ATTRIBUTE20;
              p_instance_rec.ATTRIBUTE21            := l_curr_instance_rec.ATTRIBUTE21;
              p_instance_rec.ATTRIBUTE22            := l_curr_instance_rec.ATTRIBUTE22;
              p_instance_rec.ATTRIBUTE23            := l_curr_instance_rec.ATTRIBUTE23;
              p_instance_rec.ATTRIBUTE24            := l_curr_instance_rec.ATTRIBUTE24;
              p_instance_rec.ATTRIBUTE25            := l_curr_instance_rec.ATTRIBUTE25;
              p_instance_rec.ATTRIBUTE26            := l_curr_instance_rec.ATTRIBUTE26;
              p_instance_rec.ATTRIBUTE27            := l_curr_instance_rec.ATTRIBUTE27;
              p_instance_rec.ATTRIBUTE28            := l_curr_instance_rec.ATTRIBUTE28;
              p_instance_rec.ATTRIBUTE29            := l_curr_instance_rec.ATTRIBUTE29;
              p_instance_rec.ATTRIBUTE30            := l_curr_instance_rec.ATTRIBUTE30;
              --end of code for eam integration--
       -- Addition of columns for FA Integration
              p_instance_rec.PAYABLES_UNIT_PRICE     := l_curr_instance_rec.PAYABLES_UNIT_PRICE;
              p_instance_rec.PAYABLES_CURRENCY_CODE  := l_curr_instance_rec.PAYABLES_CURRENCY_CODE;
              p_instance_rec.PURCHASE_UNIT_PRICE     := l_curr_instance_rec.PURCHASE_UNIT_PRICE;
              p_instance_rec.PURCHASE_CURRENCY_CODE  := l_curr_instance_rec.PURCHASE_CURRENCY_CODE;
              p_instance_rec.SALES_UNIT_PRICE        := l_curr_instance_rec.SALES_UNIT_PRICE;
              p_instance_rec.SALES_CURRENCY_CODE     := l_curr_instance_rec.SALES_CURRENCY_CODE;
            --  p_instance_rec.OPERATIONAL_STATUS_CODE := l_curr_instance_rec.OPERATIONAL_STATUS_CODE;
        -- End addition of columns for FA Integration

           /* Commented out to implement bulk processing.... Bug:5615169
	   CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => l_rel_tbl(j).subject_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => l_curr_instance_rec.INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => p_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_curr_instance_rec.EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => p_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_curr_instance_rec.INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => p_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_curr_instance_rec.INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => p_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => p_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => l_curr_instance_rec.SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => p_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => p_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_curr_instance_rec.LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => p_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_curr_instance_rec.QUANTITY
            ,p_NEW_QUANTITY                      => p_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_curr_instance_rec.UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => p_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_curr_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => p_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_curr_instance_rec.INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => p_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_curr_instance_rec.INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_status_id --p_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_curr_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => p_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_curr_instance_rec.MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => p_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_curr_instance_rec.SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => p_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_curr_instance_rec.SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_system_id
            ,p_OLD_INSTANCE_TYPE_CODE            => l_curr_instance_rec.INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => p_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_curr_instance_rec.ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => p_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_curr_instance_rec.ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => p_instance_rec.ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_curr_instance_rec.LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => p_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_curr_instance_rec.LOCATION_ID
            ,p_NEW_LOCATION_ID                   => p_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_curr_instance_rec.INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => p_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_curr_instance_rec.INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => p_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_curr_instance_rec.INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => p_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_curr_instance_rec.PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => p_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_curr_instance_rec.PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => p_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_curr_instance_rec.WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => p_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_curr_instance_rec.PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => p_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_curr_instance_rec.COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => p_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'Y'
            ,p_NEW_CONTEXT                       => p_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => l_curr_instance_rec.CONTEXT
            ,p_NEW_ATTRIBUTE1                    => p_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_curr_instance_rec.ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => p_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_curr_instance_rec.ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => p_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_curr_instance_rec.ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => p_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_curr_instance_rec.ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => p_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_curr_instance_rec.ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => p_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_curr_instance_rec.ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => p_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_curr_instance_rec.ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => p_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_curr_instance_rec.ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => p_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_curr_instance_rec.ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => p_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_curr_instance_rec.ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => p_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_curr_instance_rec.ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => p_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_curr_instance_rec.ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => p_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_curr_instance_rec.ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => p_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_curr_instance_rec.ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => p_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_curr_instance_rec.ATTRIBUTE15
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_curr_instance_rec.INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => p_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => l_curr_instance_rec.INSTANCE_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => p_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_OLD_CONFIG_INST_REV_NUM           => l_curr_instance_rec.CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => p_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_curr_instance_rec.CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => p_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_curr_instance_rec.INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => p_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => l_curr_instance_rec.INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_install_date -- p_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_curr_instance_rec.RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => p_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_curr_instance_rec.ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => p_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_curr_instance_rec.LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => p_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => p_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_curr_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => p_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_curr_instance_rec.LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => p_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_curr_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => p_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_curr_instance_rec.LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => p_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_curr_instance_rec.LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => p_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => p_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_curr_instance_rec.LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => p_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_curr_instance_rec.NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => p_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_curr_instance_rec.MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => p_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_curr_instance_rec.PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => p_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_curr_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => p_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_curr_instance_rec.CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => p_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_curr_instance_rec.INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => p_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_curr_instance_rec.LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => p_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_curr_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => p_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_curr_instance_rec.CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => p_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_curr_instance_rec.ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => p_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_curr_instance_rec.ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => p_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_curr_instance_rec.ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => p_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_curr_instance_rec.ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => p_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_curr_instance_rec.ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => p_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_curr_instance_rec.ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => p_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_curr_instance_rec.ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => p_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_curr_instance_rec.ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => p_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_curr_instance_rec.ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => p_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_curr_instance_rec.ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => p_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_curr_instance_rec.ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => p_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_curr_instance_rec.ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => p_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_curr_instance_rec.ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => p_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_curr_instance_rec.ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => p_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_curr_instance_rec.ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => p_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_curr_instance_rec.PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => p_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_curr_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => p_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_curr_instance_rec.PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => p_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_curr_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => p_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_curr_instance_rec.SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => p_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_curr_instance_rec.SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => p_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_curr_instance_rec.OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => p_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            );
         End of insert ...Bug:5615169 */

	--Start of: Added for Bug:5615169
	--Insert the data into bulk table
	l_ciih_blk_ins_cnt                                                       := l_ciih_blk_ins_cnt + 1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).instance_history_id          := l_csi_item_instance_h_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).instance_id                  := l_rel_tbl(j).subject_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).transaction_id               := p_txn_rec.TRANSACTION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_number          := l_curr_instance_rec.INSTANCE_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_number          := p_instance_rec.INSTANCE_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_external_reference       := l_curr_instance_rec.EXTERNAL_REFERENCE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_external_reference       := p_instance_rec.EXTERNAL_REFERENCE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inventory_item_id        := l_curr_instance_rec.INVENTORY_ITEM_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inventory_item_id        := p_instance_rec.INVENTORY_ITEM_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inventory_revision       := l_curr_instance_rec.INVENTORY_REVISION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inventory_revision       := p_instance_rec.INVENTORY_REVISION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_master_org_id        := l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_master_org_id        := p_instance_rec.INV_MASTER_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_serial_number            := l_curr_instance_rec.SERIAL_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_serial_number            := p_instance_rec.SERIAL_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_mfg_serial_number_flag   := l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_mfg_serial_number_flag   := p_instance_rec.MFG_SERIAL_NUMBER_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_lot_number               := l_curr_instance_rec.LOT_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_lot_number               := p_instance_rec.LOT_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_quantity                 := l_curr_instance_rec.QUANTITY;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_quantity                 := p_instance_rec.QUANTITY;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_unit_of_measure          := l_curr_instance_rec.UNIT_OF_MEASURE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_unit_of_measure          := p_instance_rec.UNIT_OF_MEASURE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_accounting_class_code    := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_accounting_class_code    := p_instance_rec.ACCOUNTING_CLASS_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_condition_id    := l_curr_instance_rec.INSTANCE_CONDITION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_condition_id    := p_instance_rec.INSTANCE_CONDITION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_status_id       := l_curr_instance_rec.INSTANCE_STATUS_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_status_id       := l_instance_status_id; --p_instance_rec.INSTANCE_STATUS_IDs_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_customer_view_flag       := l_curr_instance_rec.CUSTOMER_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_customer_view_flag       := p_instance_rec.CUSTOMER_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_merchant_view_flag       := l_curr_instance_rec.MERCHANT_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_merchant_view_flag       := p_instance_rec.MERCHANT_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_sellable_flag            := l_curr_instance_rec.SELLABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_sellable_flag            := p_instance_rec.SELLABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_system_id                := l_curr_instance_rec.SYSTEM_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_system_id                := l_system_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_type_code       := l_curr_instance_rec.INSTANCE_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_type_code       := p_instance_rec.INSTANCE_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_active_start_date        := l_curr_instance_rec.ACTIVE_START_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_active_start_date        := p_instance_rec.ACTIVE_START_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_active_end_date          := l_curr_instance_rec.ACTIVE_END_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_active_end_date          := p_instance_rec.ACTIVE_END_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_location_type_code       := l_curr_instance_rec.LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_location_type_code       := p_instance_rec.LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_location_id              := l_curr_instance_rec.LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_location_id              := p_instance_rec.LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_organization_id      := l_curr_instance_rec.INV_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_organization_id      := p_instance_rec.INV_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_subinventory_name    := l_curr_instance_rec.INV_SUBINVENTORY_NAME;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_subinventory_name    := p_instance_rec.INV_SUBINVENTORY_NAME;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_locator_id           := l_curr_instance_rec.INV_LOCATOR_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_locator_id           := p_instance_rec.INV_LOCATOR_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_pa_project_id            := l_curr_instance_rec.PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_pa_project_id            := p_instance_rec.PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_pa_project_task_id       := l_curr_instance_rec.PA_PROJECT_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_pa_project_task_id       := p_instance_rec.PA_PROJECT_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_in_transit_order_line_id := l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_in_transit_order_line_id := p_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_wip_job_id               := l_curr_instance_rec.WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_wip_job_id               := p_instance_rec.WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_po_order_line_id         := l_curr_instance_rec.PO_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_po_order_line_id         := p_instance_rec.PO_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_completeness_flag        := l_curr_instance_rec.COMPLETENESS_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_completeness_flag        := p_instance_rec.COMPLETENESS_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).full_dump_flag               := 'Y';
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_context                  := p_instance_rec.CONTEXT;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_context                  := l_curr_instance_rec.CONTEXT;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute1               := p_instance_rec.ATTRIBUTE1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute1               := l_curr_instance_rec.ATTRIBUTE1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute2               := p_instance_rec.ATTRIBUTE2;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute2               := l_curr_instance_rec.ATTRIBUTE2;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute3               := p_instance_rec.ATTRIBUTE3;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute3               := l_curr_instance_rec.ATTRIBUTE3;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute4               := p_instance_rec.ATTRIBUTE4;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute4               := l_curr_instance_rec.ATTRIBUTE4;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute5               := p_instance_rec.ATTRIBUTE5;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute5               := l_curr_instance_rec.ATTRIBUTE5;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute6               := p_instance_rec.ATTRIBUTE6;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute6               := l_curr_instance_rec.ATTRIBUTE6;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute7               := p_instance_rec.ATTRIBUTE7;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute7               := l_curr_instance_rec.ATTRIBUTE7;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute8               := p_instance_rec.ATTRIBUTE8;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute8               := l_curr_instance_rec.ATTRIBUTE8;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute9               := p_instance_rec.ATTRIBUTE9;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute9               := l_curr_instance_rec.ATTRIBUTE9;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute10              := p_instance_rec.ATTRIBUTE10;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute10              := l_curr_instance_rec.ATTRIBUTE10;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute11              := p_instance_rec.ATTRIBUTE11;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute11              := l_curr_instance_rec.ATTRIBUTE11;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute12              := p_instance_rec.ATTRIBUTE12;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute12              := l_curr_instance_rec.ATTRIBUTE12;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute13              := p_instance_rec.ATTRIBUTE13;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute13              := l_curr_instance_rec.ATTRIBUTE13;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute14              := p_instance_rec.ATTRIBUTE14;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute14              := l_curr_instance_rec.ATTRIBUTE14;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute15              := p_instance_rec.ATTRIBUTE15;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute15              := l_curr_instance_rec.ATTRIBUTE15;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).created_by                        := FND_GLOBAL.USER_ID;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).creation_date                     := SYSDATE;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).last_updated_by                   := FND_GLOBAL.USER_ID;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).last_update_date                  := SYSDATE;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).last_update_login                 := FND_GLOBAL.CONC_LOGIN_ID;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).object_version_number             := 1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_install_location_type_code := l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_install_location_type_code := p_instance_rec.INSTALL_LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_install_location_id        := l_curr_instance_rec.INSTALL_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_install_location_id        := p_instance_rec.INSTALL_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_usage_code        := l_curr_instance_rec.INSTANCE_USAGE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_usage_code        := p_instance_rec.INSTANCE_USAGE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_vld_organization_id   := fnd_api.g_miss_num;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_vld_organization_id   := fnd_api.g_miss_num;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_config_inst_rev_num        := l_curr_instance_rec.CONFIG_INST_REV_NUM;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_config_inst_rev_num        := p_instance_rec.CONFIG_INST_REV_NUM;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_config_valid_status        := l_curr_instance_rec.CONFIG_VALID_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_config_valid_status        := p_instance_rec.CONFIG_VALID_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_description       := l_curr_instance_rec.INSTANCE_DESCRIPTION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_description       := p_instance_rec.INSTANCE_DESCRIPTION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_install_date               := l_curr_instance_rec.INSTALL_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_install_date               := l_install_date;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_return_by_date             := l_curr_instance_rec.RETURN_BY_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_return_by_date             := p_instance_rec.RETURN_BY_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_actual_return_date         := l_curr_instance_rec.ACTUAL_RETURN_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_actual_return_date         := p_instance_rec.ACTUAL_RETURN_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_agreement_id       := l_curr_instance_rec.LAST_OE_AGREEMENT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_agreement_id       := p_instance_rec.LAST_OE_AGREEMENT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_order_line_id      := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_order_line_id      := p_instance_rec.LAST_OE_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_rma_line_id        := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_rma_line_id        := p_instance_rec.LAST_OE_RMA_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_wip_job_id            := l_curr_instance_rec.LAST_WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_wip_job_id            := p_instance_rec.LAST_WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_po_po_line_id         := l_curr_instance_rec.LAST_PO_PO_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_po_po_line_id         := p_instance_rec.LAST_PO_PO_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_pa_project_id         := l_curr_instance_rec.LAST_PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_pa_project_id         := p_instance_rec.LAST_PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_pa_task_id            := l_curr_instance_rec.LAST_PA_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_pa_task_id            := p_instance_rec.LAST_PA_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_txn_line_detail_id    := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_txn_line_detail_id    := p_instance_rec.LAST_TXN_LINE_DETAIL_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_po_number          := l_curr_instance_rec.LAST_OE_PO_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_po_number          := p_instance_rec.LAST_OE_PO_NUMBER;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_capitalization_status         := l_curr_instance_rec.CAPITALIZATION_STATUS;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_capitalization_status         := p_instance_rec.CAPITALIZATION_STATUS;
	--Start of parameters addition for eam integration
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_network_asset_flag      := l_curr_instance_rec.NETWORK_ASSET_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_network_asset_flag      := p_instance_rec.NETWORK_ASSET_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_maintainable_flag       := l_curr_instance_rec.MAINTAINABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_maintainable_flag       := p_instance_rec.MAINTAINABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_pn_location_id          := l_curr_instance_rec.PN_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_pn_location_id          := p_instance_rec.PN_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_asset_criticality_code  := l_curr_instance_rec.ASSET_CRITICALITY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_asset_criticality_code  := p_instance_rec.ASSET_CRITICALITY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_category_id             := l_curr_instance_rec.CATEGORY_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_category_id             := p_instance_rec.CATEGORY_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_equipment_gen_object_id := l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_equipment_gen_object_id := p_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instantiation_flag      := l_curr_instance_rec.INSTANTIATION_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instantiation_flag      := p_instance_rec.INSTANTIATION_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_linear_location_id      := l_curr_instance_rec.LINEAR_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_linear_location_id      := p_instance_rec.LINEAR_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_operational_log_flag    := l_curr_instance_rec.OPERATIONAL_LOG_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_operational_log_flag    := p_instance_rec.OPERATIONAL_LOG_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_checkin_status          := l_curr_instance_rec.CHECKIN_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_checkin_status          := p_instance_rec.CHECKIN_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_supplier_warranty_exp_date   := l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_supplier_warranty_exp_date   := p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute16             := l_curr_instance_rec.ATTRIBUTE16;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute16             := p_instance_rec.ATTRIBUTE16;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute17             := l_curr_instance_rec.ATTRIBUTE17;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute17             := p_instance_rec.ATTRIBUTE17;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute18             := l_curr_instance_rec.ATTRIBUTE18;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute18             := p_instance_rec.ATTRIBUTE18;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute19             := l_curr_instance_rec.ATTRIBUTE19;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute19             := p_instance_rec.ATTRIBUTE19;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute20             := l_curr_instance_rec.ATTRIBUTE20;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute20             := p_instance_rec.ATTRIBUTE20;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute21             := l_curr_instance_rec.ATTRIBUTE21;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute21             := p_instance_rec.ATTRIBUTE21;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute22             := l_curr_instance_rec.ATTRIBUTE22;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute22             := p_instance_rec.ATTRIBUTE22;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute23             := l_curr_instance_rec.ATTRIBUTE23;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute23             := p_instance_rec.ATTRIBUTE23;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute24             := l_curr_instance_rec.ATTRIBUTE24;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute24             := p_instance_rec.ATTRIBUTE24;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute25             := l_curr_instance_rec.ATTRIBUTE25;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute25             := p_instance_rec.ATTRIBUTE25;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute26             := l_curr_instance_rec.ATTRIBUTE26;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute26             := p_instance_rec.ATTRIBUTE26;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute27             := l_curr_instance_rec.ATTRIBUTE27;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute27             := p_instance_rec.ATTRIBUTE27;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute28             := l_curr_instance_rec.ATTRIBUTE28;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute28             := p_instance_rec.ATTRIBUTE28;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute29             := l_curr_instance_rec.ATTRIBUTE29;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute29             := p_instance_rec.ATTRIBUTE29;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute30             := l_curr_instance_rec.ATTRIBUTE30;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute30             := p_instance_rec.ATTRIBUTE30;
	--End of parameters addition for eam integration--
	--Addition of columns for FA Integration
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_payables_unit_price     := l_curr_instance_rec.PAYABLES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_payables_unit_price     := p_instance_rec.PAYABLES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_payables_currency_code  := l_curr_instance_rec.PAYABLES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_payables_currency_code  := p_instance_rec.PAYABLES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_purchase_unit_price     := l_curr_instance_rec.PURCHASE_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_purchase_unit_price     := p_instance_rec.PURCHASE_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_purchase_currency_code  := l_curr_instance_rec.PURCHASE_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_purchase_currency_code  := p_instance_rec.PURCHASE_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_sales_unit_price        := l_curr_instance_rec.SALES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_sales_unit_price        := p_instance_rec.SALES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_sales_currency_code     := l_curr_instance_rec.SALES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_sales_currency_code     := p_instance_rec.SALES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_operational_status_code := l_curr_instance_rec.OPERATIONAL_STATUS_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_operational_status_code := p_instance_rec.OPERATIONAL_STATUS_CODE;
	--End addition of columns for FA Integration
	--End of Insert into bulk table
	--End of: Added for Bug:5615169
        -- Begin Add Code for Siebel Genesis Project
        l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_source_code    := l_curr_instance_rec.SOURCE_CODE;
        l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_source_code    := p_instance_rec.SOURCE_CODE;
        -- End Add Code for Siebel Genesis Project
	ELSE -- if mod_value <> 0

          -- If the mod value is not equal to zero then dump only the changed columns
          -- while the unchanged values have old and new values as null
           IF (p_instance_rec.accounting_class_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.accounting_class_code,fnd_api.g_miss_char) = NVL(p_instance_rec.accounting_class_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_accounting_class_code := NULL;
                l_instance_hist_rec.new_accounting_class_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.accounting_class_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.accounting_class_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_accounting_class_code := l_curr_instance_rec.accounting_class_code ;
                l_instance_hist_rec.new_accounting_class_code := p_instance_rec.accounting_class_code ;
           END IF;
           --
           IF (l_instance_status_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.instance_status_id,fnd_api.g_miss_num) = NVL(l_instance_status_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_instance_status_id := NULL;
                l_instance_hist_rec.new_instance_status_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_status_id,fnd_api.g_miss_num) <> NVL(l_instance_status_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_instance_status_id := l_curr_instance_rec.instance_status_id ;
                l_instance_hist_rec.new_instance_status_id := l_instance_status_id ;
           END IF;
           --
           IF (l_system_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.system_id,fnd_api.g_miss_num) = NVL(l_system_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_system_id := NULL;
                l_instance_hist_rec.new_system_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.system_id,fnd_api.g_miss_num) <> NVL(l_system_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_system_id := l_curr_instance_rec.system_id ;
                l_instance_hist_rec.new_system_id := l_system_id ;
           END IF;
           --
           IF (l_install_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.install_date,fnd_api.g_miss_date) = NVL(l_install_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_install_date := NULL;
                l_instance_hist_rec.new_install_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.install_date,fnd_api.g_miss_date) <> NVL(l_install_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_install_date := l_curr_instance_rec.install_date ;
                l_instance_hist_rec.new_install_date := l_install_date ;
           END IF;
           --
           IF (p_instance_rec.active_end_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.active_end_date,fnd_api.g_miss_date) = NVL(p_instance_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_active_end_date := NULL;
                l_instance_hist_rec.new_active_end_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.active_end_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_active_end_date := l_curr_instance_rec.active_end_date ;
                l_instance_hist_rec.new_active_end_date := p_instance_rec.active_end_date ;
           END IF;
           --
           IF (p_instance_rec.location_type_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.location_type_code,fnd_api.g_miss_char) = NVL(p_instance_rec.location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_location_type_code := NULL;
                l_instance_hist_rec.new_location_type_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.location_type_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_location_type_code := l_curr_instance_rec.location_type_code ;
                l_instance_hist_rec.new_location_type_code := p_instance_rec.location_type_code ;
           END IF;
           --
           IF (p_instance_rec.location_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.location_id,fnd_api.g_miss_num) = NVL(p_instance_rec.location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_location_id := NULL;
                l_instance_hist_rec.new_location_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.location_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_location_id := l_curr_instance_rec.location_id ;
                l_instance_hist_rec.new_location_id := p_instance_rec.location_id ;
           END IF;
           --
           IF (p_instance_rec.inv_organization_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.inv_organization_id,fnd_api.g_miss_num) = NVL(p_instance_rec.inv_organization_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_organization_id := NULL;
                l_instance_hist_rec.new_inv_organization_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_organization_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.inv_organization_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_organization_id := l_curr_instance_rec.inv_organization_id ;
                l_instance_hist_rec.new_inv_organization_id := p_instance_rec.inv_organization_id ;
           END IF;
           --
           IF (p_instance_rec.inv_subinventory_name = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) = NVL(p_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_inv_subinventory_name := NULL;
                l_instance_hist_rec.new_inv_subinventory_name := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) <> NVL(p_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_inv_subinventory_name := l_curr_instance_rec.inv_subinventory_name ;
                l_instance_hist_rec.new_inv_subinventory_name := p_instance_rec.inv_subinventory_name ;
           END IF;
           --
           IF (p_instance_rec.inv_locator_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.inv_locator_id,fnd_api.g_miss_num) = NVL(p_instance_rec.inv_locator_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_locator_id := NULL;
                l_instance_hist_rec.new_inv_locator_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_locator_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.inv_locator_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_locator_id := l_curr_instance_rec.inv_locator_id ;
                l_instance_hist_rec.new_inv_locator_id := p_instance_rec.inv_locator_id ;
           END IF;
           --
           IF (p_instance_rec.pa_project_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.pa_project_id,fnd_api.g_miss_num) = NVL(p_instance_rec.pa_project_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_id := NULL;
                l_instance_hist_rec.new_pa_project_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.pa_project_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.pa_project_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_id := l_curr_instance_rec.pa_project_id ;
                l_instance_hist_rec.new_pa_project_id := p_instance_rec.pa_project_id ;
           END IF;
           --
           IF (p_instance_rec.pa_project_task_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.pa_project_task_id,fnd_api.g_miss_num) = NVL(p_instance_rec.pa_project_task_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_task_id := NULL;
                l_instance_hist_rec.new_pa_project_task_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.pa_project_task_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.pa_project_task_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_task_id := l_curr_instance_rec.pa_project_task_id ;
                l_instance_hist_rec.new_pa_project_task_id := p_instance_rec.pa_project_task_id ;
           END IF;
           --
           IF (p_instance_rec.in_transit_order_line_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) = NVL(p_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_in_transit_order_line_id := NULL;
                l_instance_hist_rec.new_in_transit_order_line_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_in_transit_order_line_id := l_curr_instance_rec.in_transit_order_line_id ;
                l_instance_hist_rec.new_in_transit_order_line_id := p_instance_rec.in_transit_order_line_id ;
           END IF;
           --
           IF (p_instance_rec.wip_job_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.wip_job_id,fnd_api.g_miss_num) = NVL(p_instance_rec.wip_job_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_wip_job_id := NULL;
                l_instance_hist_rec.new_wip_job_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.wip_job_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.wip_job_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_wip_job_id := l_curr_instance_rec.wip_job_id ;
                l_instance_hist_rec.new_wip_job_id := p_instance_rec.wip_job_id ;
           END IF;
           --
           IF (p_instance_rec.po_order_line_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.po_order_line_id,fnd_api.g_miss_num) = NVL(p_instance_rec.po_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_po_order_line_id := NULL;
                l_instance_hist_rec.new_po_order_line_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.po_order_line_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.po_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_po_order_line_id := l_curr_instance_rec.po_order_line_id ;
                l_instance_hist_rec.new_po_order_line_id := p_instance_rec.po_order_line_id ;
           END IF;
           --
           IF (p_instance_rec.last_oe_agreement_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) = NVL(p_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_last_oe_agreement_id := NULL;
                l_instance_hist_rec.new_last_oe_agreement_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_last_oe_agreement_id := l_curr_instance_rec.last_oe_agreement_id ;
                l_instance_hist_rec.new_last_oe_agreement_id := p_instance_rec.last_oe_agreement_id ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_ORDER_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_ORDER_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_OE_ORDER_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID ;
                l_instance_hist_rec.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_RMA_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.OLD_LAST_OE_RMA_LINE_ID := NULL;
                l_instance_hist_rec.NEW_LAST_OE_RMA_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.OLD_LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID ;
                l_instance_hist_rec.NEW_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_WIP_JOB_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_WIP_JOB_ID := NULL;
                l_instance_hist_rec.new_LAST_WIP_JOB_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID ;
                l_instance_hist_rec.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PO_PO_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PO_PO_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_PO_PO_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PO_PO_LINE_ID := l_curr_instance_rec.LAST_PO_PO_LINE_ID ;
                l_instance_hist_rec.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PA_PROJECT_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_PROJECT_ID := NULL;
                l_instance_hist_rec.new_LAST_PA_PROJECT_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID ;
                l_instance_hist_rec.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PA_TASK_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_TASK_ID := NULL;
                l_instance_hist_rec.new_LAST_PA_TASK_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID ;
                l_instance_hist_rec.new_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_TXN_LINE_DETAIL_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_TXN_LINE_DETAIL_ID := NULL;
                l_instance_hist_rec.new_LAST_TXN_LINE_DETAIL_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID ;
                l_instance_hist_rec.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_PO_NUMBER = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) = NVL(p_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_LAST_OE_PO_NUMBER := NULL;
                l_instance_hist_rec.new_LAST_OE_PO_NUMBER := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) <> NVL(p_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER ;
                l_instance_hist_rec.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER ;
           END IF;
           --
           IF (p_instance_rec.install_location_type_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.install_location_type_code,fnd_api.g_miss_char) = NVL(p_instance_rec.install_location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_install_location_type_code := NULL;
                l_instance_hist_rec.new_install_location_type_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.install_location_type_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.install_location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_install_location_type_code := l_curr_instance_rec.install_location_type_code ;
                l_instance_hist_rec.new_install_location_type_code := p_instance_rec.install_location_type_code ;
           END IF;
           --
           IF (p_instance_rec.install_location_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.install_location_id,fnd_api.g_miss_num) = NVL(p_instance_rec.install_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_install_location_id := NULL;
                l_instance_hist_rec.new_install_location_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.install_location_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.install_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_install_location_id := l_curr_instance_rec.install_location_id ;
                l_instance_hist_rec.new_install_location_id := p_instance_rec.install_location_id ;
           END IF;
           --
           IF (p_instance_rec.operational_status_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.operational_status_code,fnd_api.g_miss_char) = NVL(p_instance_rec.operational_status_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_operational_status_code := NULL;
                l_instance_hist_rec.new_operational_status_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.operational_status_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.operational_status_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_operational_status_code := l_curr_instance_rec.operational_status_code ;
                l_instance_hist_rec.new_operational_status_code := p_instance_rec.operational_status_code ;
           END IF;

          /* Commented to implement bulk operations...Bug:;
	  CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => l_rel_tbl(j).SUBJECT_ID
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => FND_API.G_MISS_CHAR
            ,p_NEW_INSTANCE_NUMBER               => FND_API.G_MISS_CHAR
            ,p_OLD_EXTERNAL_REFERENCE            => FND_API.G_MISS_CHAR
            ,p_NEW_EXTERNAL_REFERENCE            => FND_API.G_MISS_CHAR
            ,p_OLD_INVENTORY_ITEM_ID             => FND_API.G_MISS_NUM
            ,p_NEW_INVENTORY_ITEM_ID             => FND_API.G_MISS_NUM
            ,p_OLD_INVENTORY_REVISION            => FND_API.G_MISS_CHAR
            ,p_NEW_INVENTORY_REVISION            => FND_API.G_MISS_CHAR
            ,p_OLD_INV_MASTER_ORGZN_ID           => FND_API.G_MISS_NUM
            ,p_NEW_INV_MASTER_ORGZN_ID           => FND_API.G_MISS_NUM
            ,p_OLD_SERIAL_NUMBER                 => FND_API.G_MISS_CHAR
            ,p_NEW_SERIAL_NUMBER                 => FND_API.G_MISS_CHAR
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => FND_API.G_MISS_CHAR
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => FND_API.G_MISS_CHAR
            ,p_OLD_LOT_NUMBER                    => FND_API.G_MISS_CHAR
            ,p_NEW_LOT_NUMBER                    => FND_API.G_MISS_CHAR
            ,p_OLD_QUANTITY                      => FND_API.G_MISS_NUM
            ,p_NEW_QUANTITY                      => FND_API.G_MISS_NUM
            ,p_OLD_UNIT_OF_MEASURE               => FND_API.G_MISS_CHAR
            ,p_NEW_UNIT_OF_MEASURE               => FND_API.G_MISS_CHAR
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_instance_hist_rec.OLD_ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_instance_hist_rec.NEW_ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => FND_API.G_MISS_NUM
            ,p_NEW_INSTANCE_CONDITION_ID         => FND_API.G_MISS_NUM
            ,p_OLD_INSTANCE_STATUS_ID            => l_instance_hist_rec.OLD_INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_hist_rec.NEW_INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_NEW_CUSTOMER_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_OLD_MERCHANT_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_NEW_MERCHANT_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_OLD_SELLABLE_FLAG                 => FND_API.G_MISS_CHAR
            ,p_NEW_SELLABLE_FLAG                 => FND_API.G_MISS_CHAR
            ,p_OLD_SYSTEM_ID                     => l_instance_hist_rec.OLD_SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_instance_hist_rec.NEW_SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_NEW_INSTANCE_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_OLD_ACTIVE_START_DATE             => FND_API.G_MISS_DATE
            ,p_NEW_ACTIVE_START_DATE             => FND_API.G_MISS_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_instance_hist_rec.OLD_ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_instance_hist_rec.NEW_ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_instance_hist_rec.OLD_LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_instance_hist_rec.NEW_LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_instance_hist_rec.OLD_LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_instance_hist_rec.NEW_LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_instance_hist_rec.OLD_INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_instance_hist_rec.NEW_INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_instance_hist_rec.OLD_INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_instance_hist_rec.NEW_INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_instance_hist_rec.OLD_INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_instance_hist_rec.NEW_INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_instance_hist_rec.OLD_PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_instance_hist_rec.NEW_PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_instance_hist_rec.OLD_PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_instance_hist_rec.NEW_PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_instance_hist_rec.OLD_IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_instance_hist_rec.NEW_IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_instance_hist_rec.OLD_WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_instance_hist_rec.NEW_WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_instance_hist_rec.OLD_PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_instance_hist_rec.NEW_PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => FND_API.G_MISS_CHAR
            ,p_NEW_COMPLETENESS_FLAG             => FND_API.G_MISS_CHAR
            ,p_FULL_DUMP_FLAG                    => 'N'
            ,p_NEW_CONTEXT                       => FND_API.G_MISS_CHAR
            ,P_OLD_CONTEXT                       => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE1                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE1                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE2                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE2                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE3                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE3                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE4                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE4                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE5                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE5                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE6                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE6                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE7                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE7                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE8                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE8                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE9                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE9                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE10                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE10                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE11                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE11                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE12                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE12                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE13                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE13                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE14                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE14                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE15                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE15                   => FND_API.G_MISS_CHAR
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_instance_hist_rec.OLD_INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_instance_hist_rec.NEW_INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_instance_hist_rec.OLD_INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => l_instance_hist_rec.NEW_INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => FND_API.G_MISS_CHAR
            ,p_NEW_INST_USAGE_CODE               => FND_API.G_MISS_CHAR
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => FND_API.G_MISS_NUM
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => FND_API.G_MISS_NUM
            ,p_OLD_CONFIG_INST_REV_NUM           => FND_API.G_MISS_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => FND_API.G_MISS_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => FND_API.G_MISS_CHAR
            ,p_NEW_CONFIG_VALID_STATUS           => FND_API.G_MISS_CHAR
            ,p_OLD_INSTANCE_DESCRIPTION          => FND_API.G_MISS_CHAR
            ,p_NEW_INSTANCE_DESCRIPTION          => FND_API.G_MISS_CHAR
            ,p_OLD_INSTALL_DATE                  => l_instance_hist_rec.OLD_INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_instance_hist_rec.NEW_INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => FND_API.G_MISS_DATE
            ,p_NEW_RETURN_BY_DATE                => FND_API.G_MISS_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => FND_API.G_MISS_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => FND_API.G_MISS_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_instance_hist_rec.OLD_LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_instance_hist_rec.NEW_LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_instance_hist_rec.OLD_LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_instance_hist_rec.NEW_LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_instance_hist_rec.OLD_LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => l_instance_hist_rec.NEW_LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_instance_hist_rec.OLD_LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => l_instance_hist_rec.NEW_LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_instance_hist_rec.OLD_LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => l_instance_hist_rec.NEW_LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_instance_hist_rec.OLD_LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => l_instance_hist_rec.NEW_LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_instance_hist_rec.OLD_LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => l_instance_hist_rec.NEW_LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_instance_hist_rec.OLD_LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_instance_hist_rec.NEW_LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_instance_hist_rec.OLD_LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => l_instance_hist_rec.NEW_LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => FND_API.G_MISS_CHAR
	    ,p_NEW_NETWORK_ASSET_FLAG             => FND_API.G_MISS_CHAR
	    ,p_OLD_MAINTAINABLE_FLAG              => FND_API.G_MISS_CHAR
	    ,p_NEW_MAINTAINABLE_FLAG              => FND_API.G_MISS_CHAR
	    ,p_OLD_PN_LOCATION_ID                 => FND_API.G_MISS_NUM
	    ,p_NEW_PN_LOCATION_ID                 => FND_API.G_MISS_NUM
	    ,p_OLD_ASSET_CRITICALITY_CODE         => FND_API.G_MISS_CHAR
	    ,p_NEW_ASSET_CRITICALITY_CODE         => FND_API.G_MISS_CHAR
	    ,p_OLD_CATEGORY_ID                    => FND_API.G_MISS_NUM
	    ,p_NEW_CATEGORY_ID                    => FND_API.G_MISS_NUM
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => FND_API.G_MISS_NUM
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => FND_API.G_MISS_NUM
	    ,p_OLD_INSTANTIATION_FLAG             => FND_API.G_MISS_CHAR
	    ,p_NEW_INSTANTIATION_FLAG             => FND_API.G_MISS_CHAR
	    ,p_OLD_LINEAR_LOCATION_ID             => FND_API.G_MISS_NUM
	    ,p_NEW_LINEAR_LOCATION_ID             => FND_API.G_MISS_NUM
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => FND_API.G_MISS_CHAR
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => FND_API.G_MISS_CHAR
	    ,p_OLD_CHECKIN_STATUS                 => FND_API.G_MISS_NUM
	    ,p_NEW_CHECKIN_STATUS                 => FND_API.G_MISS_NUM
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => FND_API.G_MISS_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => FND_API.G_MISS_DATE
            ,p_OLD_ATTRIBUTE16                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE16                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE17                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE17                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE18                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE18                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE19                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE19                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE20                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE20                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE21                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE21                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE22                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE22                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE23                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE23                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE24                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE24                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE25                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE25                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE26                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE26                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE27                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE27                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE28                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE28                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE29                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE29                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE30                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE30                    => FND_API.G_MISS_CHAR
  	    --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => FND_API.G_MISS_NUM
            ,p_NEW_PAYABLES_UNIT_PRICE            => FND_API.G_MISS_NUM
            ,p_OLD_PAYABLES_CURRENCY_CODE         => FND_API.G_MISS_CHAR
            ,p_NEW_PAYABLES_CURRENCY_CODE         => FND_API.G_MISS_CHAR
            ,p_OLD_PURCHASE_UNIT_PRICE            => FND_API.G_MISS_NUM
            ,p_NEW_PURCHASE_UNIT_PRICE            => FND_API.G_MISS_NUM
            ,p_OLD_PURCHASE_CURRENCY_CODE         => FND_API.G_MISS_CHAR
            ,p_NEW_PURCHASE_CURRENCY_CODE         => FND_API.G_MISS_CHAR
            ,p_OLD_SALES_UNIT_PRICE               => FND_API.G_MISS_NUM
            ,p_NEW_SALES_UNIT_PRICE               => FND_API.G_MISS_NUM
            ,p_OLD_SALES_CURRENCY_CODE            => FND_API.G_MISS_CHAR
            ,p_NEW_SALES_CURRENCY_CODE            => FND_API.G_MISS_CHAR
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_instance_hist_rec.old_operational_status_code
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_instance_hist_rec.new_operational_status_code
    -- End addition of columns for FA Integration
            );
	    End of insert...Bug:5615169 */

	--Start of: Added for Bug:5615169
	--Insert the data into bulk table
	l_ciih_blk_ins_cnt                                                       := l_ciih_blk_ins_cnt + 1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).instance_history_id          := l_csi_item_instance_h_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).instance_id                  := l_rel_tbl(j).subject_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).transaction_id               := p_txn_rec.TRANSACTION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_number          := l_curr_instance_rec.INSTANCE_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_number          := p_instance_rec.INSTANCE_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_external_reference       := l_curr_instance_rec.EXTERNAL_REFERENCE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_external_reference       := p_instance_rec.EXTERNAL_REFERENCE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inventory_item_id        := l_curr_instance_rec.INVENTORY_ITEM_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inventory_item_id        := p_instance_rec.INVENTORY_ITEM_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inventory_revision       := l_curr_instance_rec.INVENTORY_REVISION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inventory_revision       := p_instance_rec.INVENTORY_REVISION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_master_org_id        := l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_master_org_id        := p_instance_rec.INV_MASTER_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_serial_number            := l_curr_instance_rec.SERIAL_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_serial_number            := p_instance_rec.SERIAL_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_mfg_serial_number_flag   := l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_mfg_serial_number_flag   := p_instance_rec.MFG_SERIAL_NUMBER_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_lot_number               := l_curr_instance_rec.LOT_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_lot_number               := p_instance_rec.LOT_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_quantity                 := l_curr_instance_rec.QUANTITY;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_quantity                 := p_instance_rec.QUANTITY;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_unit_of_measure          := l_curr_instance_rec.UNIT_OF_MEASURE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_unit_of_measure          := p_instance_rec.UNIT_OF_MEASURE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_accounting_class_code    := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_accounting_class_code    := p_instance_rec.ACCOUNTING_CLASS_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_condition_id    := l_curr_instance_rec.INSTANCE_CONDITION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_condition_id    := p_instance_rec.INSTANCE_CONDITION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_status_id       := l_curr_instance_rec.INSTANCE_STATUS_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_status_id       := l_instance_status_id; --p_instance_rec.INSTANCE_STATUS_IDs_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_customer_view_flag       := l_curr_instance_rec.CUSTOMER_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_customer_view_flag       := p_instance_rec.CUSTOMER_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_merchant_view_flag       := l_curr_instance_rec.MERCHANT_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_merchant_view_flag       := p_instance_rec.MERCHANT_VIEW_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_sellable_flag            := l_curr_instance_rec.SELLABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_sellable_flag            := p_instance_rec.SELLABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_system_id                := l_curr_instance_rec.SYSTEM_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_system_id                := l_system_id;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_type_code       := l_curr_instance_rec.INSTANCE_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_type_code       := p_instance_rec.INSTANCE_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_active_start_date        := l_curr_instance_rec.ACTIVE_START_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_active_start_date        := p_instance_rec.ACTIVE_START_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_active_end_date          := l_curr_instance_rec.ACTIVE_END_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_active_end_date          := p_instance_rec.ACTIVE_END_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_location_type_code       := l_curr_instance_rec.LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_location_type_code       := p_instance_rec.LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_location_id              := l_curr_instance_rec.LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_location_id              := p_instance_rec.LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_organization_id      := l_curr_instance_rec.INV_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_organization_id      := p_instance_rec.INV_ORGANIZATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_subinventory_name    := l_curr_instance_rec.INV_SUBINVENTORY_NAME;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_subinventory_name    := p_instance_rec.INV_SUBINVENTORY_NAME;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_inv_locator_id           := l_curr_instance_rec.INV_LOCATOR_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_inv_locator_id           := p_instance_rec.INV_LOCATOR_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_pa_project_id            := l_curr_instance_rec.PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_pa_project_id            := p_instance_rec.PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_pa_project_task_id       := l_curr_instance_rec.PA_PROJECT_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_pa_project_task_id       := p_instance_rec.PA_PROJECT_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_in_transit_order_line_id := l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_in_transit_order_line_id := p_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_wip_job_id               := l_curr_instance_rec.WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_wip_job_id               := p_instance_rec.WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_po_order_line_id         := l_curr_instance_rec.PO_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_po_order_line_id         := p_instance_rec.PO_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_completeness_flag        := l_curr_instance_rec.COMPLETENESS_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_completeness_flag        := p_instance_rec.COMPLETENESS_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).full_dump_flag               := 'Y';
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_context                  := p_instance_rec.CONTEXT;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_context                  := l_curr_instance_rec.CONTEXT;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute1               := p_instance_rec.ATTRIBUTE1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute1               := l_curr_instance_rec.ATTRIBUTE1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute2               := p_instance_rec.ATTRIBUTE2;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute2               := l_curr_instance_rec.ATTRIBUTE2;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute3               := p_instance_rec.ATTRIBUTE3;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute3               := l_curr_instance_rec.ATTRIBUTE3;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute4               := p_instance_rec.ATTRIBUTE4;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute4               := l_curr_instance_rec.ATTRIBUTE4;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute5               := p_instance_rec.ATTRIBUTE5;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute5               := l_curr_instance_rec.ATTRIBUTE5;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute6               := p_instance_rec.ATTRIBUTE6;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute6               := l_curr_instance_rec.ATTRIBUTE6;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute7               := p_instance_rec.ATTRIBUTE7;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute7               := l_curr_instance_rec.ATTRIBUTE7;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute8               := p_instance_rec.ATTRIBUTE8;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute8               := l_curr_instance_rec.ATTRIBUTE8;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute9               := p_instance_rec.ATTRIBUTE9;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute9               := l_curr_instance_rec.ATTRIBUTE9;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute10              := p_instance_rec.ATTRIBUTE10;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute10              := l_curr_instance_rec.ATTRIBUTE10;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute11              := p_instance_rec.ATTRIBUTE11;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute11              := l_curr_instance_rec.ATTRIBUTE11;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute12              := p_instance_rec.ATTRIBUTE12;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute12              := l_curr_instance_rec.ATTRIBUTE12;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute13              := p_instance_rec.ATTRIBUTE13;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute13              := l_curr_instance_rec.ATTRIBUTE13;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute14              := p_instance_rec.ATTRIBUTE14;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute14              := l_curr_instance_rec.ATTRIBUTE14;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute15              := p_instance_rec.ATTRIBUTE15;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute15              := l_curr_instance_rec.ATTRIBUTE15;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).created_by                        := FND_GLOBAL.USER_ID;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).creation_date                     := SYSDATE;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).last_updated_by                   := FND_GLOBAL.USER_ID;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).last_update_date                  := SYSDATE;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).last_update_login                 := FND_GLOBAL.CONC_LOGIN_ID;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).object_version_number             := 1;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_install_location_type_code := l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_install_location_type_code := p_instance_rec.INSTALL_LOCATION_TYPE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_install_location_id        := l_curr_instance_rec.INSTALL_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_install_location_id        := p_instance_rec.INSTALL_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_usage_code        := l_curr_instance_rec.INSTANCE_USAGE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_usage_code        := p_instance_rec.INSTANCE_USAGE_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_vld_organization_id   := fnd_api.g_miss_num;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_vld_organization_id   := fnd_api.g_miss_num;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_config_inst_rev_num        := l_curr_instance_rec.CONFIG_INST_REV_NUM;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_config_inst_rev_num        := p_instance_rec.CONFIG_INST_REV_NUM;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_config_valid_status        := l_curr_instance_rec.CONFIG_VALID_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_config_valid_status        := p_instance_rec.CONFIG_VALID_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instance_description       := l_curr_instance_rec.INSTANCE_DESCRIPTION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instance_description       := p_instance_rec.INSTANCE_DESCRIPTION;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_install_date               := l_curr_instance_rec.INSTALL_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_install_date               := l_install_date;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_return_by_date             := l_curr_instance_rec.RETURN_BY_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_return_by_date             := p_instance_rec.RETURN_BY_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_actual_return_date         := l_curr_instance_rec.ACTUAL_RETURN_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_actual_return_date         := p_instance_rec.ACTUAL_RETURN_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_agreement_id       := l_curr_instance_rec.LAST_OE_AGREEMENT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_agreement_id       := p_instance_rec.LAST_OE_AGREEMENT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_order_line_id      := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_order_line_id      := p_instance_rec.LAST_OE_ORDER_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_rma_line_id        := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_rma_line_id        := p_instance_rec.LAST_OE_RMA_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_wip_job_id            := l_curr_instance_rec.LAST_WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_wip_job_id            := p_instance_rec.LAST_WIP_JOB_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_po_po_line_id         := l_curr_instance_rec.LAST_PO_PO_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_po_po_line_id         := p_instance_rec.LAST_PO_PO_LINE_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_pa_project_id         := l_curr_instance_rec.LAST_PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_pa_project_id         := p_instance_rec.LAST_PA_PROJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_pa_task_id            := l_curr_instance_rec.LAST_PA_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_pa_task_id            := p_instance_rec.LAST_PA_TASK_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_txn_line_detail_id    := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_txn_line_detail_id    := p_instance_rec.LAST_TXN_LINE_DETAIL_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_last_oe_po_number          := l_curr_instance_rec.LAST_OE_PO_NUMBER;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_last_oe_po_number          := p_instance_rec.LAST_OE_PO_NUMBER;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_capitalization_status         := l_curr_instance_rec.CAPITALIZATION_STATUS;
	--          l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_capitalization_status         := p_instance_rec.CAPITALIZATION_STATUS;
	--Start of parameters addition for eam integration
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_network_asset_flag      := l_curr_instance_rec.NETWORK_ASSET_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_network_asset_flag      := p_instance_rec.NETWORK_ASSET_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_maintainable_flag       := l_curr_instance_rec.MAINTAINABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_maintainable_flag       := p_instance_rec.MAINTAINABLE_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_pn_location_id          := l_curr_instance_rec.PN_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_pn_location_id          := p_instance_rec.PN_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_asset_criticality_code  := l_curr_instance_rec.ASSET_CRITICALITY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_asset_criticality_code  := p_instance_rec.ASSET_CRITICALITY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_category_id             := l_curr_instance_rec.CATEGORY_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_category_id             := p_instance_rec.CATEGORY_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_equipment_gen_object_id := l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_equipment_gen_object_id := p_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_instantiation_flag      := l_curr_instance_rec.INSTANTIATION_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_instantiation_flag      := p_instance_rec.INSTANTIATION_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_linear_location_id      := l_curr_instance_rec.LINEAR_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_linear_location_id      := p_instance_rec.LINEAR_LOCATION_ID;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_operational_log_flag    := l_curr_instance_rec.OPERATIONAL_LOG_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_operational_log_flag    := p_instance_rec.OPERATIONAL_LOG_FLAG;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_checkin_status          := l_curr_instance_rec.CHECKIN_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_checkin_status          := p_instance_rec.CHECKIN_STATUS;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_supplier_warranty_exp_date   := l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_supplier_warranty_exp_date   := p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute16             := l_curr_instance_rec.ATTRIBUTE16;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute16             := p_instance_rec.ATTRIBUTE16;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute17             := l_curr_instance_rec.ATTRIBUTE17;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute17             := p_instance_rec.ATTRIBUTE17;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute18             := l_curr_instance_rec.ATTRIBUTE18;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute18             := p_instance_rec.ATTRIBUTE18;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute19             := l_curr_instance_rec.ATTRIBUTE19;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute19             := p_instance_rec.ATTRIBUTE19;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute20             := l_curr_instance_rec.ATTRIBUTE20;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute20             := p_instance_rec.ATTRIBUTE20;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute21             := l_curr_instance_rec.ATTRIBUTE21;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute21             := p_instance_rec.ATTRIBUTE21;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute22             := l_curr_instance_rec.ATTRIBUTE22;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute22             := p_instance_rec.ATTRIBUTE22;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute23             := l_curr_instance_rec.ATTRIBUTE23;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute23             := p_instance_rec.ATTRIBUTE23;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute24             := l_curr_instance_rec.ATTRIBUTE24;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute24             := p_instance_rec.ATTRIBUTE24;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute25             := l_curr_instance_rec.ATTRIBUTE25;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute25             := p_instance_rec.ATTRIBUTE25;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute26             := l_curr_instance_rec.ATTRIBUTE26;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute26             := p_instance_rec.ATTRIBUTE26;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute27             := l_curr_instance_rec.ATTRIBUTE27;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute27             := p_instance_rec.ATTRIBUTE27;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute28             := l_curr_instance_rec.ATTRIBUTE28;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute28             := p_instance_rec.ATTRIBUTE28;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute29             := l_curr_instance_rec.ATTRIBUTE29;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute29             := p_instance_rec.ATTRIBUTE29;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_attribute30             := l_curr_instance_rec.ATTRIBUTE30;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_attribute30             := p_instance_rec.ATTRIBUTE30;
	--End of parameters addition for eam integration--
	--Addition of columns for FA Integration
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_payables_unit_price     := l_curr_instance_rec.PAYABLES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_payables_unit_price     := p_instance_rec.PAYABLES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_payables_currency_code  := l_curr_instance_rec.PAYABLES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_payables_currency_code  := p_instance_rec.PAYABLES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_purchase_unit_price     := l_curr_instance_rec.PURCHASE_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_purchase_unit_price     := p_instance_rec.PURCHASE_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_purchase_currency_code  := l_curr_instance_rec.PURCHASE_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_purchase_currency_code  := p_instance_rec.PURCHASE_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_sales_unit_price        := l_curr_instance_rec.SALES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_sales_unit_price        := p_instance_rec.SALES_UNIT_PRICE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_sales_currency_code     := l_curr_instance_rec.SALES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_sales_currency_code     := p_instance_rec.SALES_CURRENCY_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_operational_status_code := l_curr_instance_rec.OPERATIONAL_STATUS_CODE;
	l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_operational_status_code := p_instance_rec.OPERATIONAL_STATUS_CODE;
	--End addition of columns for FA Integration
	--End of Insert into bulk table
	--End of: Added for Bug:5615169
        -- Begin Add Code for Siebel Genesis Project
        l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).old_source_code   := fnd_api.g_miss_char;
        l_inst_hist_tbl_blk_ins(l_ciih_blk_ins_cnt).new_source_code   := fnd_api.g_miss_char;
        -- End Add Code for Siebel Genesis Project
      END IF;
     END;
     -- End of modifications for Bug#2547034 on 09/20/02 - rtalluri
     --
     -- Opening New Cursor to retrieve Child Id records Details
	OPEN new_instance_rec(l_rel_tbl(j).subject_id);
	FETCH new_instance_rec INTO l_new_instance_rec;
	   IF new_instance_rec%NOTFOUND THEN
	      FND_MESSAGE.Set_Name('CSI', 'CSI_API_RECORD_LOCKED');
	      FND_MSG_PUB.ADD;
	      RAISE FND_API.G_EXC_ERROR;
	   END IF;
	CLOSE new_instance_rec;
     --
     l_party_id := NULL;
     Begin
        select party_id
        into l_party_id
        from CSI_I_PARTIES
        where instance_id = l_rel_tbl(j).subject_id
        and   relationship_type_code = 'OWNER';
     Exception
        when no_data_found then
           l_party_id := null;
     End;
     -- p_instance_rec.call_contracts would've been set to FLASE whenever ownership is changed from
     -- external to internal or Internal to External. Since contracts call will be made
     -- at account update level, we are supressing the call here.
     IF l_party_id IS NOT NULL AND
        l_party_id <> l_internal_party_id AND
        p_instance_rec.call_contracts <> FND_API.G_FALSE THEN
	IF l_curr_instance_rec.instance_status_id <> l_new_instance_rec.instance_status_id AND
	   l_termination_status AND
	   p_instance_rec.call_contracts <> FND_API.G_FALSE THEN
	   IF p_txn_rec.transaction_type_id in (53,54) THEN
	      l_oks_txn_type := 'RET';
	   ELSE
	      l_oks_txn_type := 'TRM';
	   END IF;
	   --
           IF p_txn_rec.transaction_type_id <> 7   -- Added for bug 3973706
           THEN
	      csi_item_instance_pvt.Call_to_Contracts
	       ( p_transaction_type   =>   l_oks_txn_type
	        ,p_instance_id        =>   l_rel_tbl(j).SUBJECT_ID
	        ,p_new_instance_id    =>   NULL
	        ,p_vld_org_id         =>   l_curr_instance_rec.last_vld_organization_id
	        ,p_quantity           =>   NULL
	        ,p_party_account_id1  =>   NULL
	        ,p_party_account_id2  =>   NULL
	        ,p_transaction_date   =>   p_txn_rec.transaction_date
	        ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date
		,p_txn_type_id        => p_txn_rec.transaction_type_id  --added for BUG# 5752271
                ,p_oks_txn_inst_tbl   =>   p_oks_txn_inst_tbl
	        ,x_return_status      =>   x_return_status
	        ,x_msg_count          =>   x_msg_count
	        ,x_msg_data           =>   x_msg_data
	       );
              --
	      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
	         l_msg_index := 1;
	         l_msg_count := x_msg_count;
	         WHILE l_msg_count > 0 LOOP
		   x_msg_data := FND_MSG_PUB.GET
				 (  l_msg_index,
				    FND_API.G_FALSE
				  );
		   csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
		       l_msg_index := l_msg_index + 1;
		       l_msg_count := l_msg_count - 1;
		 END LOOP;
		 RAISE FND_API.G_EXC_ERROR;
	      END IF;
           END IF; -- Added for bug 3973706
	ELSE
	   IF ((nvl(l_curr_instance_rec.active_end_date,(sysdate+1)) <= sysdate) AND
	      ((p_instance_rec.active_end_date IS NULL) OR
	       (p_instance_rec.active_end_date IS NOT NULL AND p_instance_rec.active_end_date > sysdate AND
		p_instance_rec.active_end_date <> FND_API.G_MISS_DATE))) THEN
	      --
	      -- 11.5.10 ER. While un-expiring the instance, order Line ID will be passed only if it changes
	      IF l_new_instance_rec.location_type_code = 'IN_TRANSIT' THEN
		 IF nvl(l_curr_instance_rec.in_transit_order_line_id,-99999) <>
				    nvl(l_new_instance_rec.in_transit_order_line_id,-99999) THEN
		    l_order_line_id := l_new_instance_rec.in_transit_order_line_id;
		 ELSE
		    l_order_line_id := NULL;
		 END IF;
	      ELSE
		 IF nvl(l_curr_instance_rec.last_oe_order_line_id,-99999) <>
				  nvl(l_new_instance_rec.last_oe_order_line_id,-99999) THEN
		    l_order_line_id := l_new_instance_rec.last_oe_order_line_id;
		 ELSE
		    l_order_line_id := NULL;
		 END IF;
	      END IF;
	      --
              IF p_txn_rec.transaction_type_id <> 7   -- Added for bug 3973706
              THEN
		 csi_item_instance_pvt.Call_to_Contracts
		  ( p_transaction_type   =>   'NEW'
		   ,p_instance_id        =>   l_rel_tbl(j).SUBJECT_ID
		   ,p_new_instance_id    =>   NULL
		   ,p_vld_org_id         =>   l_curr_instance_rec.last_vld_organization_id
		   ,p_quantity           =>   NULL
		   ,p_party_account_id1  =>   NULL
		   ,p_party_account_id2  =>   NULL
		   ,p_transaction_date   =>   p_txn_rec.transaction_date
		   ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date
		   ,p_order_line_id      =>   l_order_line_id
		   ,p_oks_txn_inst_tbl   =>   p_oks_txn_inst_tbl
		   ,x_return_status      =>   x_return_status
		   ,x_msg_count          =>   x_msg_count
		   ,x_msg_data           =>   x_msg_data
		   );
                 --
		 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
		    l_msg_index := 1;
		    l_msg_count := x_msg_count;
		    WHILE l_msg_count > 0 LOOP
			 x_msg_data := FND_MSG_PUB.GET
				       (  l_msg_index,
					  FND_API.G_FALSE
					);
			 csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
			     l_msg_index := l_msg_index + 1;
			     l_msg_count := l_msg_count - 1;
		    END LOOP;
		    RAISE FND_API.G_EXC_ERROR;
		 END IF;
              END IF;  -- Added for bug 3973706
           -- 'IDC' is added as ELSE condition. If during un-expiry, install_date is also changed then
           -- OKS would have used that date when called with 'NEW'. In such cases, OKS need not be called
           -- with 'IDC'. Following call is exclusively for Install_date change only.
           ELSE -- Check for 'IDC'
              IF NVL(l_curr_instance_rec.install_date,fnd_api.g_miss_date) <>
                 NVL(l_new_instance_rec.install_date,fnd_api.g_miss_date) THEN
		 csi_item_instance_pvt.Call_to_Contracts
		  ( p_transaction_type   =>   'IDC'
		   ,p_instance_id        =>   l_rel_tbl(j).SUBJECT_ID
		   ,p_new_instance_id    =>   NULL
		   ,p_vld_org_id         =>   l_curr_instance_rec.last_vld_organization_id
		   ,p_quantity           =>   NULL
		   ,p_party_account_id1  =>   NULL
		   ,p_party_account_id2  =>   NULL
		   ,p_transaction_date   =>   p_txn_rec.transaction_date
		   ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date
		   ,p_order_line_id      =>   l_order_line_id
		   ,p_oks_txn_inst_tbl   =>   p_oks_txn_inst_tbl
		   ,x_return_status      =>   x_return_status
		   ,x_msg_count          =>   x_msg_count
		   ,x_msg_data           =>   x_msg_data
		   );
                 --
		 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
		    l_msg_index := 1;
		    l_msg_count := x_msg_count;
		    WHILE l_msg_count > 0 LOOP
			 x_msg_data := FND_MSG_PUB.GET
				       (  l_msg_index,
					  FND_API.G_FALSE
					);
			 csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
			     l_msg_index := l_msg_index + 1;
			     l_msg_count := l_msg_count - 1;
		    END LOOP;
		    RAISE FND_API.G_EXC_ERROR;
		 END IF;
              END IF;
	   END IF;
        END IF;
     END IF; -- Internal party and call_contracts check
 -- End of modifications for Bug#2887590
   EXCEPTION
     WHEN PROCESS_NEXT THEN
       NULL;
   END;
      -- Calling eam API to log instance update event
       IF l_eam_item
       THEN
          IF l_ins_hist_id IS NOT NULL
          THEN
             l_instance_history_id:=l_ins_hist_id;
          ELSE
             l_instance_history_id:=l_csi_item_instance_h_id;
          END IF;
          eam_asset_log_pvt.instance_update_event
          (p_api_version         => p_api_version
          ,p_init_msg_list       => fnd_api.g_false
          ,p_commit              => fnd_api.g_false
          ,p_validation_level    => fnd_api.g_valid_level_full
          ,x_return_status       => x_return_status
          ,x_msg_count           => x_msg_count
          ,x_msg_data            => x_msg_data
          ,p_instance_id         => l_rel_tbl(j).subject_id
          ,p_ref_id              => l_instance_history_id
          ,p_event_date          => sysdate);
         IF NOT(x_return_status = fnd_api.g_ret_sts_success)
         THEN
            csi_gen_utility_pvt.put_line('Error from eam_asset_log_pvt.instance_update_event API');
            RAISE fnd_api.g_exc_error;
         END IF;
       END IF;
      -- Calling eam API to log instance update event
 END LOOP;
--Start of:Added for Bug:5615169
 IF l_inst_hist_tbl_blk_ins.count > 0 THEN   -- BUG#6203160
--Do the ciih bulk insert
--Convert PL/SQl table to column table
build_inst_hist_rec_of_table ( p_inst_hist_tbl => l_inst_hist_tbl_blk_ins  -- csi_datastructures_pub.instance_history_tbl
,p_inst_hist_rec_tab                           => l_inst_hist_rec_tab      -- csi_item_instance_grp.instance_history_rec_tab
);
--Do the actual bulk Insert
-- Modified OLD_LAST_OE_AGREEMENT_ID, NEW_LAST_OE_AGREEMENT_ID for the bug 6967129
l_ciih_blk_ins_cnt := l_inst_hist_rec_tab.instance_history_id.count;
--
FORALL i in 1 .. l_ciih_blk_ins_cnt
INSERT
INTO    CSI_ITEM_INSTANCES_H
        ( INSTANCE_HISTORY_ID,
                INSTANCE_ID,
                TRANSACTION_ID,
                OLD_INSTANCE_NUMBER,
                NEW_INSTANCE_NUMBER,
                OLD_EXTERNAL_REFERENCE,
                NEW_EXTERNAL_REFERENCE,
                OLD_INVENTORY_ITEM_ID,
                NEW_INVENTORY_ITEM_ID,
                OLD_INVENTORY_REVISION,
                NEW_INVENTORY_REVISION,
                OLD_INV_MASTER_ORGANIZATION_ID,
                NEW_INV_MASTER_ORGANIZATION_ID,
                OLD_SERIAL_NUMBER,
                NEW_SERIAL_NUMBER ,
                OLD_MFG_SERIAL_NUMBER_FLAG,
                NEW_MFG_SERIAL_NUMBER_FLAG,
                OLD_LOT_NUMBER,
                NEW_LOT_NUMBER,
                OLD_QUANTITY,
                NEW_QUANTITY,
                OLD_UNIT_OF_MEASURE,
                NEW_UNIT_OF_MEASURE,
                OLD_ACCOUNTING_CLASS_CODE,
                NEW_ACCOUNTING_CLASS_CODE,
                OLD_INSTANCE_CONDITION_ID,
                NEW_INSTANCE_CONDITION_ID,
                OLD_INSTANCE_STATUS_ID,
                NEW_INSTANCE_STATUS_ID,
                OLD_CUSTOMER_VIEW_FLAG,
                NEW_CUSTOMER_VIEW_FLAG,
                OLD_MERCHANT_VIEW_FLAG,
                NEW_MERCHANT_VIEW_FLAG,
                OLD_SELLABLE_FLAG,
                NEW_SELLABLE_FLAG,
                OLD_SYSTEM_ID,
                NEW_SYSTEM_ID,
                OLD_INSTANCE_TYPE_CODE,
                NEW_INSTANCE_TYPE_CODE,
                OLD_ACTIVE_START_DATE,
                NEW_ACTIVE_START_DATE,
                OLD_ACTIVE_END_DATE,
                NEW_ACTIVE_END_DATE,
                OLD_LOCATION_TYPE_CODE,
                NEW_LOCATION_TYPE_CODE,
                OLD_LOCATION_ID,
                NEW_LOCATION_ID,
                OLD_INV_ORGANIZATION_ID,
                NEW_INV_ORGANIZATION_ID,
                OLD_INV_SUBINVENTORY_NAME,
                NEW_INV_SUBINVENTORY_NAME,
                OLD_INV_LOCATOR_ID,
                NEW_INV_LOCATOR_ID,
                OLD_PA_PROJECT_ID,
                NEW_PA_PROJECT_ID,
                OLD_PA_PROJECT_TASK_ID,
                NEW_PA_PROJECT_TASK_ID,
                OLD_IN_TRANSIT_ORDER_LINE_ID,
                NEW_IN_TRANSIT_ORDER_LINE_ID,
                OLD_WIP_JOB_ID,
                NEW_WIP_JOB_ID,
                OLD_PO_ORDER_LINE_ID,
                NEW_PO_ORDER_LINE_ID,
                OLD_COMPLETENESS_FLAG,
                NEW_COMPLETENESS_FLAG,
                FULL_DUMP_FLAG,
                OLD_CONTEXT,
                NEW_CONTEXT,
                OLD_ATTRIBUTE1,
                NEW_ATTRIBUTE1,
                OLD_ATTRIBUTE2,
                NEW_ATTRIBUTE2,
                OLD_ATTRIBUTE3,
                NEW_ATTRIBUTE3,
                OLD_ATTRIBUTE4,
                NEW_ATTRIBUTE4,
                OLD_ATTRIBUTE5,
                NEW_ATTRIBUTE5,
                OLD_ATTRIBUTE6,
                NEW_ATTRIBUTE6,
                OLD_ATTRIBUTE7,
                NEW_ATTRIBUTE7,
                OLD_ATTRIBUTE8,
                NEW_ATTRIBUTE8,
                OLD_ATTRIBUTE9,
                NEW_ATTRIBUTE9,
                OLD_ATTRIBUTE10,
                NEW_ATTRIBUTE10,
                OLD_ATTRIBUTE11,
                NEW_ATTRIBUTE11,
                OLD_ATTRIBUTE12,
                NEW_ATTRIBUTE12,
                OLD_ATTRIBUTE13,
                NEW_ATTRIBUTE13,
                OLD_ATTRIBUTE14,
                NEW_ATTRIBUTE14,
                OLD_ATTRIBUTE15,
                NEW_ATTRIBUTE15,
                CREATED_BY,
                CREATION_DATE,
                LAST_UPDATED_BY,
                LAST_UPDATE_DATE,
                LAST_UPDATE_LOGIN,
                OBJECT_VERSION_NUMBER,
                OLD_INST_LOC_TYPE_CODE,
                NEW_INST_LOC_TYPE_CODE,
                OLD_INST_LOC_ID,
                NEW_INST_LOC_ID,
                OLD_INST_USAGE_CODE,
                NEW_INST_USAGE_CODE,
                OLD_last_vld_organization_id,
                NEW_last_vld_organization_id,
                OLD_CONFIG_INST_REV_NUM ,
                NEW_CONFIG_INST_REV_NUM ,
                OLD_CONFIG_VALID_STATUS ,
                NEW_CONFIG_VALID_STATUS ,
                OLD_INSTANCE_DESCRIPTION ,
                NEW_INSTANCE_DESCRIPTION ,
                OLD_INSTALL_DATE ,
                NEW_INSTALL_DATE ,
                OLD_RETURN_BY_DATE ,
                NEW_RETURN_BY_DATE ,
                OLD_ACTUAL_RETURN_DATE ,
                NEW_ACTUAL_RETURN_DATE ,
                OLD_OE_AGREEMENT_ID ,
                NEW_OE_AGREEMENT_ID ,
                OLD_LAST_OE_ORDER_LINE_ID,
                NEW_LAST_OE_ORDER_LINE_ID,
                OLD_LAST_OE_RMA_LINE_ID,
                NEW_LAST_OE_RMA_LINE_ID,
                OLD_LAST_WIP_JOB_ID,
                NEW_LAST_WIP_JOB_ID,
                OLD_LAST_PO_PO_LINE_ID,
                NEW_LAST_PO_PO_LINE_ID,
                OLD_LAST_PA_PROJECT_ID,
                NEW_LAST_PA_PROJECT_ID,
                OLD_LAST_PA_TASK_ID,
                NEW_LAST_PA_TASK_ID,
                OLD_LAST_TXN_LINE_DETAIL_ID,
                NEW_LAST_TXN_LINE_DETAIL_ID,
                OLD_LAST_OE_PO_NUMBER,
                NEW_LAST_OE_PO_NUMBER,
                --Start of eam integration changes--
                OLD_NETWORK_ASSET_FLAG,
                NEW_NETWORK_ASSET_FLAG,
                OLD_MAINTAINABLE_FLAG,
                NEW_MAINTAINABLE_FLAG,
                OLD_PN_LOCATION_ID,
                NEW_PN_LOCATION_ID,
                OLD_ASSET_CRITICALITY_CODE,
                NEW_ASSET_CRITICALITY_CODE,
                OLD_CATEGORY_ID,
                NEW_CATEGORY_ID,
                OLD_EQUIPMENT_GEN_OBJECT_ID,
                NEW_EQUIPMENT_GEN_OBJECT_ID,
                OLD_INSTANTIATION_FLAG,
                NEW_INSTANTIATION_FLAG,
                OLD_LINEAR_LOCATION_ID,
                NEW_LINEAR_LOCATION_ID,
                OLD_OPERATIONAL_LOG_FLAG,
                NEW_OPERATIONAL_LOG_FLAG,
                OLD_CHECKIN_STATUS,
                NEW_CHECKIN_STATUS,
                OLD_SUPPLIER_WARRANTY_EXP_DATE,
                NEW_SUPPLIER_WARRANTY_EXP_DATE,
                OLD_ATTRIBUTE16,
                NEW_ATTRIBUTE16,
                OLD_ATTRIBUTE17,
                NEW_ATTRIBUTE17,
                OLD_ATTRIBUTE18,
                NEW_ATTRIBUTE18,
                OLD_ATTRIBUTE19,
                NEW_ATTRIBUTE19,
                OLD_ATTRIBUTE20,
                NEW_ATTRIBUTE20,
                OLD_ATTRIBUTE21,
                NEW_ATTRIBUTE21,
                OLD_ATTRIBUTE22,
                NEW_ATTRIBUTE22,
                OLD_ATTRIBUTE23,
                NEW_ATTRIBUTE23,
                OLD_ATTRIBUTE24,
                NEW_ATTRIBUTE24,
                OLD_ATTRIBUTE25,
                NEW_ATTRIBUTE25,
                OLD_ATTRIBUTE26,
                NEW_ATTRIBUTE26,
                OLD_ATTRIBUTE27,
                NEW_ATTRIBUTE27,
                OLD_ATTRIBUTE28,
                NEW_ATTRIBUTE28,
                OLD_ATTRIBUTE29,
                NEW_ATTRIBUTE29,
                OLD_ATTRIBUTE30,
                NEW_ATTRIBUTE30,
                --End of eam integration changes--
                --Addition of columns for FA Integration
                OLD_PAYABLES_UNIT_PRICE,
                NEW_PAYABLES_UNIT_PRICE,
                OLD_PAYABLES_CURRENCY_CODE,
                NEW_PAYABLES_CURRENCY_CODE,
                OLD_PURCHASE_UNIT_PRICE,
                NEW_PURCHASE_UNIT_PRICE,
                OLD_PURCHASE_CURRENCY_CODE,
                NEW_PURCHASE_CURRENCY_CODE,
                OLD_SALES_UNIT_PRICE,
                NEW_SALES_UNIT_PRICE,
                OLD_SALES_CURRENCY_CODE,
                NEW_SALES_CURRENCY_CODE,
                OLD_OPERATIONAL_STATUS_CODE,
                NEW_OPERATIONAL_STATUS_CODE
                --End addition of columns for FA Integration
        )
        VALUES
        (
                l_inst_hist_rec_tab.INSTANCE_HISTORY_ID(i),
                decode( l_inst_hist_rec_tab.INSTANCE_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.INSTANCE_ID(i)),
                decode( l_inst_hist_rec_tab.TRANSACTION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.TRANSACTION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANCE_NUMBER(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INSTANCE_NUMBER(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANCE_NUMBER(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INSTANCE_NUMBER(i)),
                decode( l_inst_hist_rec_tab.OLD_EXTERNAL_REFERENCE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_EXTERNAL_REFERENCE(i)),
                decode( l_inst_hist_rec_tab.NEW_EXTERNAL_REFERENCE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_EXTERNAL_REFERENCE(i)),
                decode( l_inst_hist_rec_tab.OLD_INVENTORY_ITEM_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INVENTORY_ITEM_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INVENTORY_ITEM_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INVENTORY_ITEM_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INVENTORY_REVISION(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INVENTORY_REVISION(i)),
                decode( l_inst_hist_rec_tab.NEW_INVENTORY_REVISION(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INVENTORY_REVISION(i)),
                decode( l_inst_hist_rec_tab.OLD_INV_MASTER_ORG_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INV_MASTER_ORG_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INV_MASTER_ORG_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INV_MASTER_ORG_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_SERIAL_NUMBER(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_SERIAL_NUMBER(i)),
                decode( l_inst_hist_rec_tab.NEW_SERIAL_NUMBER(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_SERIAL_NUMBER(i)),
                decode( l_inst_hist_rec_tab.OLD_MFG_SERIAL_NUMBER_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_MFG_SERIAL_NUMBER_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_MFG_SERIAL_NUMBER_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_MFG_SERIAL_NUMBER_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_LOT_NUMBER(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_LOT_NUMBER(i)),
                decode( l_inst_hist_rec_tab.NEW_LOT_NUMBER(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_LOT_NUMBER(i)),
                decode( l_inst_hist_rec_tab.OLD_QUANTITY(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_QUANTITY(i)),
                decode( l_inst_hist_rec_tab.NEW_QUANTITY(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_QUANTITY(i)),
                decode( l_inst_hist_rec_tab.OLD_UNIT_OF_MEASURE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_UNIT_OF_MEASURE(i)),
                decode( l_inst_hist_rec_tab.NEW_UNIT_OF_MEASURE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_UNIT_OF_MEASURE(i)),
                decode( l_inst_hist_rec_tab.OLD_ACCOUNTING_CLASS_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ACCOUNTING_CLASS_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_ACCOUNTING_CLASS_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ACCOUNTING_CLASS_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANCE_CONDITION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INSTANCE_CONDITION_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANCE_CONDITION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INSTANCE_CONDITION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANCE_STATUS_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INSTANCE_STATUS_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANCE_STATUS_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INSTANCE_STATUS_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_CUSTOMER_VIEW_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_CUSTOMER_VIEW_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_CUSTOMER_VIEW_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_CUSTOMER_VIEW_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_MERCHANT_VIEW_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_MERCHANT_VIEW_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_MERCHANT_VIEW_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_MERCHANT_VIEW_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_SELLABLE_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_SELLABLE_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_SELLABLE_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_SELLABLE_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_SYSTEM_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_SYSTEM_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_SYSTEM_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_SYSTEM_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANCE_TYPE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INSTANCE_TYPE_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANCE_TYPE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INSTANCE_TYPE_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_ACTIVE_START_DATE(i), FND_API.G_MISS_DATE, TO_DATE(NULL), l_inst_hist_rec_tab.OLD_ACTIVE_START_DATE(i)),
                decode( l_inst_hist_rec_tab.NEW_ACTIVE_START_DATE(i), FND_API.G_MISS_DATE, TO_DATE(NULL), l_inst_hist_rec_tab.NEW_ACTIVE_START_DATE(i)),
                decode( l_inst_hist_rec_tab.OLD_ACTIVE_END_DATE(i), FND_API.G_MISS_DATE, TO_DATE(NULL), l_inst_hist_rec_tab.OLD_ACTIVE_END_DATE(i)),
                decode( l_inst_hist_rec_tab.NEW_ACTIVE_END_DATE(i), FND_API.G_MISS_DATE, TO_DATE(NULL), l_inst_hist_rec_tab.NEW_ACTIVE_END_DATE(i)),
                decode( l_inst_hist_rec_tab.OLD_LOCATION_TYPE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_LOCATION_TYPE_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_LOCATION_TYPE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_LOCATION_TYPE_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_LOCATION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_LOCATION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INV_ORGANIZATION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INV_ORGANIZATION_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INV_ORGANIZATION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INV_ORGANIZATION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INV_SUBINVENTORY_NAME(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INV_SUBINVENTORY_NAME(i)),
                decode( l_inst_hist_rec_tab.NEW_INV_SUBINVENTORY_NAME(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INV_SUBINVENTORY_NAME(i)),
                decode( l_inst_hist_rec_tab.OLD_INV_LOCATOR_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INV_LOCATOR_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INV_LOCATOR_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INV_LOCATOR_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_PA_PROJECT_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_PA_PROJECT_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_PA_PROJECT_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_PA_PROJECT_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_PA_PROJECT_TASK_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_PA_PROJECT_TASK_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_PA_PROJECT_TASK_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_PA_PROJECT_TASK_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_IN_TRANSIT_ORDER_LINE_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_IN_TRANSIT_ORDER_LINE_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_IN_TRANSIT_ORDER_LINE_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_IN_TRANSIT_ORDER_LINE_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_WIP_JOB_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_WIP_JOB_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_WIP_JOB_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_WIP_JOB_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_PO_ORDER_LINE_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_PO_ORDER_LINE_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_PO_ORDER_LINE_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_PO_ORDER_LINE_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_COMPLETENESS_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_COMPLETENESS_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_COMPLETENESS_FLAG(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_COMPLETENESS_FLAG(i)),
                 'N',
                decode( l_inst_hist_rec_tab.OLD_CONTEXT(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_CONTEXT(i)),
                decode( l_inst_hist_rec_tab.NEW_CONTEXT(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_CONTEXT(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE1(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE1(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE1(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE1(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE2(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE2(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE2(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE2(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE3(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE3(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE3(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE3(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE4(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE4(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE4(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE4(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE5(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE5(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE5(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE5(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE6(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE6(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE6(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE6(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE7(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE7(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE7(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE7(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE8(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE8(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE8(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE8(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE9(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE9(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE9(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE9(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE10(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE10(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE10(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE10(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE11(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE11(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE11(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE11(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE12(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE12(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE12(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE12(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE13(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE13(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE13(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE13(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE14(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE14(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE14(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE14(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE15(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE15(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE15(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE15(i)),
                l_user_id,
                SYSDATE,
                l_user_id,
                SYSDATE,
                l_login_id,
                1,
                decode( l_inst_hist_rec_tab.OLD_INSTALL_LOCATION_TYPE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INSTALL_LOCATION_TYPE_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTALL_LOCATION_TYPE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INSTALL_LOCATION_TYPE_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTALL_LOCATION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_INSTALL_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTALL_LOCATION_ID(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_INSTALL_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANCE_USAGE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INSTANCE_USAGE_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANCE_USAGE_CODE(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INSTANCE_USAGE_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_last_vld_organization_id(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_last_vld_organization_id(i)),
                decode( l_inst_hist_rec_tab.NEW_last_vld_organization_id(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.new_last_vld_organization_id(i)),
                decode( l_inst_hist_rec_tab.OLD_CONFIG_INST_REV_NUM(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_CONFIG_INST_REV_NUM(i)),
                decode( l_inst_hist_rec_tab.NEW_CONFIG_INST_REV_NUM(i), FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_CONFIG_INST_REV_NUM(i)),
                decode( l_inst_hist_rec_tab.OLD_CONFIG_VALID_STATUS(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_CONFIG_VALID_STATUS(i)),
                decode( l_inst_hist_rec_tab.NEW_CONFIG_VALID_STATUS(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_CONFIG_VALID_STATUS(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANCE_DESCRIPTION(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INSTANCE_DESCRIPTION(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANCE_DESCRIPTION(i), FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INSTANCE_DESCRIPTION(i)),

                decode( l_inst_hist_rec_tab.OLD_INSTALL_DATE(i),FND_API.G_MISS_DATE, NULL, l_inst_hist_rec_tab.OLD_INSTALL_DATE(i)) ,
                decode(l_inst_hist_rec_tab.NEW_INSTALL_DATE(i),FND_API.G_MISS_DATE, NULL, l_inst_hist_rec_tab.NEW_INSTALL_DATE(i)) ,
                decode(l_inst_hist_rec_tab.OLD_RETURN_BY_DATE(i) ,FND_API.G_MISS_DATE,NULL, l_inst_hist_rec_tab.OLD_RETURN_BY_DATE(i)),
                decode(l_inst_hist_rec_tab.NEW_RETURN_BY_DATE(i) ,FND_API.G_MISS_DATE,NULL,l_inst_hist_rec_tab.NEW_RETURN_BY_DATE(i)),
                decode(l_inst_hist_rec_tab.OLD_ACTUAL_RETURN_DATE(i) ,FND_API.G_MISS_DATE,NULL,l_inst_hist_rec_tab.OLD_ACTUAL_RETURN_DATE(i)),
                decode(l_inst_hist_rec_tab.NEW_ACTUAL_RETURN_DATE(i) ,FND_API.G_MISS_DATE,NULL,l_inst_hist_rec_tab.NEW_ACTUAL_RETURN_DATE(i)),

                decode( l_inst_hist_rec_tab.OLD_LAST_OE_AGREEMENT_ID(i),FND_API.G_MISS_NUM, NULL,l_inst_hist_rec_tab.OLD_LAST_OE_AGREEMENT_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_LAST_OE_AGREEMENT_ID(i),FND_API.G_MISS_NUM, NULL,l_inst_hist_rec_tab.NEW_LAST_OE_AGREEMENT_ID(i)),

                decode(l_inst_hist_rec_tab.OLD_LAST_OE_ORDER_LINE_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_OE_ORDER_LINE_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_OE_ORDER_LINE_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_OE_ORDER_LINE_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_OE_RMA_LINE_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_OE_RMA_LINE_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_OE_RMA_LINE_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_OE_RMA_LINE_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_WIP_JOB_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_WIP_JOB_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_WIP_JOB_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_WIP_JOB_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_PO_PO_LINE_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_PO_PO_LINE_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_PO_PO_LINE_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_PO_PO_LINE_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_PA_PROJECT_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_PA_PROJECT_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_PA_PROJECT_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_PA_PROJECT_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_PA_TASK_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_PA_TASK_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_PA_TASK_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_PA_TASK_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_TXN_LINE_DETAIL_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.OLD_LAST_TXN_LINE_DETAIL_ID(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_TXN_LINE_DETAIL_ID(i) ,FND_API.G_MISS_NUM,NULL,l_inst_hist_rec_tab.NEW_LAST_TXN_LINE_DETAIL_ID(i)),
                decode(l_inst_hist_rec_tab.OLD_LAST_OE_PO_NUMBER(i) ,FND_API.G_MISS_CHAR,NULL,l_inst_hist_rec_tab.OLD_LAST_OE_PO_NUMBER(i)),
                decode(l_inst_hist_rec_tab.NEW_LAST_OE_PO_NUMBER(i) ,FND_API.G_MISS_CHAR,NULL,l_inst_hist_rec_tab.NEW_LAST_OE_PO_NUMBER(i)),
                --Start of eam integration changes--
                decode( l_inst_hist_rec_tab.OLD_NETWORK_ASSET_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_NETWORK_ASSET_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_NETWORK_ASSET_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_NETWORK_ASSET_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_MAINTAINABLE_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_MAINTAINABLE_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_MAINTAINABLE_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_MAINTAINABLE_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_PN_LOCATION_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_PN_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_PN_LOCATION_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_PN_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_ASSET_CRITICALITY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ASSET_CRITICALITY_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_ASSET_CRITICALITY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ASSET_CRITICALITY_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_CATEGORY_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_CATEGORY_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_CATEGORY_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_CATEGORY_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_EQUIPMENT_GEN_OBJECT_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_EQUIPMENT_GEN_OBJECT_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_EQUIPMENT_GEN_OBJECT_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_EQUIPMENT_GEN_OBJECT_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_INSTANTIATION_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_INSTANTIATION_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_INSTANTIATION_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_INSTANTIATION_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_LINEAR_LOCATION_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_LINEAR_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.NEW_LINEAR_LOCATION_ID(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_LINEAR_LOCATION_ID(i)),
                decode( l_inst_hist_rec_tab.OLD_OPERATIONAL_LOG_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_OPERATIONAL_LOG_FLAG(i)),
                decode( l_inst_hist_rec_tab.NEW_OPERATIONAL_LOG_FLAG(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_OPERATIONAL_LOG_FLAG(i)),
                decode( l_inst_hist_rec_tab.OLD_CHECKIN_STATUS(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_CHECKIN_STATUS(i)),
                decode( l_inst_hist_rec_tab.NEW_CHECKIN_STATUS(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_CHECKIN_STATUS(i)),
                decode( l_inst_hist_rec_tab.old_supplier_warranty_exp_date(i) ,FND_API.G_MISS_DATE, TO_DATE(NULL), l_inst_hist_rec_tab.old_supplier_warranty_exp_date(i)),
                decode( l_inst_hist_rec_tab.new_supplier_warranty_exp_date(i) ,FND_API.G_MISS_DATE, TO_DATE(NULL), l_inst_hist_rec_tab.new_supplier_warranty_exp_date(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE16(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE16(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE16(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE16(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE17(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE17(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE17(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE17(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE18(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE18(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE18(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE18(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE19(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE19(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE19(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE19(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE20(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE20(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE20(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE20(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE21(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE21(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE21(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE21(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE22(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE22(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE22(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE22(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE23(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE23(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE23(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE23(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE24(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE24(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE24(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE24(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE25(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE25(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE25(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE25(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE26(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE26(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE26(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE26(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE27(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE27(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE27(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE27(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE28(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE28(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE28(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE28(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE29(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE29(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE29(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE29(i)),
                decode( l_inst_hist_rec_tab.OLD_ATTRIBUTE30(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_ATTRIBUTE30(i)),
                decode( l_inst_hist_rec_tab.NEW_ATTRIBUTE30(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_ATTRIBUTE30(i)),
                --End of eam integration changes--
                --Addition of columns for FA Integration
                decode( l_inst_hist_rec_tab.OLD_PAYABLES_UNIT_PRICE(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_PAYABLES_UNIT_PRICE(i)),
                decode( l_inst_hist_rec_tab.NEW_PAYABLES_UNIT_PRICE(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_PAYABLES_UNIT_PRICE(i)),
                decode( l_inst_hist_rec_tab.OLD_PAYABLES_CURRENCY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_PAYABLES_CURRENCY_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_PAYABLES_CURRENCY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_PAYABLES_CURRENCY_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_PURCHASE_UNIT_PRICE(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_PURCHASE_UNIT_PRICE(i)),
                decode( l_inst_hist_rec_tab.NEW_PURCHASE_UNIT_PRICE(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_PURCHASE_UNIT_PRICE(i)),
                decode( l_inst_hist_rec_tab.OLD_PURCHASE_CURRENCY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_PURCHASE_CURRENCY_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_PURCHASE_CURRENCY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_PURCHASE_CURRENCY_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_SALES_UNIT_PRICE(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.OLD_SALES_UNIT_PRICE(i)),
                decode( l_inst_hist_rec_tab.NEW_SALES_UNIT_PRICE(i) ,FND_API.G_MISS_NUM, NULL, l_inst_hist_rec_tab.NEW_SALES_UNIT_PRICE(i)),
                decode( l_inst_hist_rec_tab.OLD_SALES_CURRENCY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_SALES_CURRENCY_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_SALES_CURRENCY_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_SALES_CURRENCY_CODE(i)),
                decode( l_inst_hist_rec_tab.OLD_OPERATIONAL_STATUS_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.OLD_OPERATIONAL_STATUS_CODE(i)),
                decode( l_inst_hist_rec_tab.NEW_OPERATIONAL_STATUS_CODE(i) ,FND_API.G_MISS_CHAR, NULL, l_inst_hist_rec_tab.NEW_OPERATIONAL_STATUS_CODE(i))
                --End addition of columns for FA Integration
        );
--End of:Added for Bug:5615169
END IF; -- Bug#6203160
END IF; -- check for l_rel_tbl count
  -- End of modifications for Bug#2887590

        IF FND_API.To_Boolean( p_commit )
        THEN
                COMMIT WORK;
        END IF;

    -- Standard call to get message count and if count is  get message info.
    FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count      =>       x_msg_count ,
             p_data       =>       x_msg_data
            );

EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            IF FND_API.To_Boolean( p_commit ) THEN
               ROLLBACK TO update_child_instance_pvt;
            END IF;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            IF FND_API.To_Boolean( p_commit ) THEN
               ROLLBACK TO update_child_instance_pvt;
            END IF;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );
    WHEN OTHERS THEN
            IF FND_API.To_Boolean( p_commit ) THEN
               ROLLBACK TO update_child_instance_pvt;
            END IF;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;

            IF     FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                    (      G_PKG_NAME            ,
                          l_api_name
                    );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );

END update_child_instance_location;

/*---------------------------------------------------*/
/* procedure name: call_contracts                    */
/* description   : call_contracts                    */
/*                                                   */
/*---------------------------------------------------*/

PROCEDURE  Call_to_Contracts
(  p_transaction_type         IN   VARCHAR2
  ,p_instance_id              IN   NUMBER
  ,p_new_instance_id          IN   NUMBER
  ,p_vld_org_id               IN   NUMBER
  ,p_quantity                 IN   NUMBER
  ,p_party_account_id1        IN   NUMBER
  ,p_party_account_id2        IN   NUMBER
  ,p_transaction_date         IN   DATE
  ,p_source_transaction_date  IN   DATE     -- Added by jpwilson
  ,p_transaction_id           IN   NUMBER   -- Added by sguthiva for TRF(HTML)
  ,p_grp_call_contracts       IN   VARCHAR2  -- Will be TRUE only from Group API
  ,p_txn_type_id              IN   NUMBER
  ,p_system_id                IN   NUMBER
  ,p_order_line_id            IN   NUMBER
  ,p_call_from_bom_expl       IN   VARCHAR2
  ,p_oks_txn_inst_tbl         IN OUT NOCOPY oks_ibint_pub.txn_instance_tbl
  ,x_return_status            OUT  NOCOPY VARCHAR2
  ,x_msg_count                OUT  NOCOPY NUMBER
  ,x_msg_data                 OUT  NOCOPY VARCHAR2
  )IS

   CURSOR instance_csr (p_ins_id IN NUMBER) IS
    SELECT  *
    FROM    csi_item_instances
    WHERE   instance_id = p_ins_id;

     --Start of: Added for bug 5615162
     CURSOR instance_txn_chk_csr(p_ins_id IN NUMBER,p_txn_id in NUMBER, p_src_txn_date in DATE)  IS
         SELECT 'X' FROM CSI_TRANSACTIONS CST,
         (
         SELECT CIIH.TRANSACTION_ID TRANSACTION_ID, CIIH.INSTANCE_ID INSTANCE_ID
         FROM CSI_ITEM_INSTANCES_H CIIH
         WHERE INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIVH.TRANSACTION_ID TRANSACTION_ID, CIV.INSTANCE_ID INSTANCE_ID
         FROM CSI_IEA_VALUES_H CIVH, CSI_IEA_VALUES CIV
         WHERE CIV.ATTRIBUTE_VALUE_ID = CIVH.ATTRIBUTE_VALUE_ID
         AND INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIRH.TRANSACTION_ID TRANSACTION_ID, CIR.SUBJECT_ID INSTANCE_ID
         FROM CSI_II_RELATIONSHIPS_H CIRH, CSI_II_RELATIONSHIPS CIR
         WHERE CIRH.RELATIONSHIP_ID = CIR.RELATIONSHIP_ID
         AND subject_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIRH.TRANSACTION_ID TRANSACTION_ID, CIR.OBJECT_ID INSTANCE_ID
         FROM CSI_II_RELATIONSHIPS_H CIRH, CSI_II_RELATIONSHIPS CIR
         WHERE CIRH.RELATIONSHIP_ID = CIR.RELATIONSHIP_ID
         AND object_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIPH.TRANSACTION_ID TRANSACTION_ID, CIP.INSTANCE_ID INSTANCE_ID
         FROM CSI_I_PARTIES_H CIPH, CSI_I_PARTIES CIP
         WHERE CIPH.INSTANCE_PARTY_ID = CIP.INSTANCE_PARTY_ID
         AND INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIAAH.TRANSACTION_ID TRANSACTION_ID, CIAA.INSTANCE_ID INSTANCE_ID
         FROM CSI_I_ASSETS_H CIAAH, CSI_I_ASSETS CIAA
         WHERE CIAAH.INSTANCE_ASSET_ID = CIAA.INSTANCE_ASSET_ID
         AND INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIAH.TRANSACTION_ID TRANSACTION_ID, CIP.INSTANCE_ID INSTANCE_ID
         FROM CSI_IP_ACCOUNTS_H CIAH, CSI_IP_ACCOUNTS CIA, CSI_I_PARTIES CIP
         WHERE CIAH.IP_ACCOUNT_ID = CIA.IP_ACCOUNT_ID
         AND CIA.INSTANCE_PARTY_ID = CIP.INSTANCE_PARTY_ID
         AND INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIOAH.TRANSACTION_ID TRANSACTION_ID, CIOA.INSTANCE_ID INSTANCE_ID
         FROM CSI_I_ORG_ASSIGNMENTS_H CIOAH, CSI_I_ORG_ASSIGNMENTS CIOA
         WHERE CIOAH.INSTANCE_OU_ID = CIOA.INSTANCE_OU_ID
         AND INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIVLH.TRANSACTION_ID TRANSACTION_ID, CIVL.INSTANCE_ID INSTANCE_ID
         FROM CSI_I_VERSION_LABELS_H CIVLH, CSI_I_VERSION_LABELS CIVL
         WHERE CIVLH.VERSION_LABEL_ID = CIVL.VERSION_LABEL_ID
         AND INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         UNION ALL

         SELECT CIPAH.TRANSACTION_ID TRANSACTION_ID, CIPA.INSTANCE_ID INSTANCE_ID
         FROM CSI_I_PRICING_ATTRIBS_H CIPAH, CSI_I_PRICING_ATTRIBS CIPA
         WHERE INSTANCE_ID=p_ins_id  AND TRANSACTION_ID<>p_txn_id
         AND CIPAH.PRICING_ATTRIBUTE_ID = CIPA.PRICING_ATTRIBUTE_ID
         ) CSA
	 WHERE CSA.TRANSACTION_ID=CST.TRANSACTION_ID
	 AND CST.TRANSACTION_ID <>p_txn_id
	 AND CST.SOURCE_TRANSACTION_DATE>p_src_txn_date
	 AND ROWNUM=1;
      --End of: Added for bug 5615162

    l_instance_csr             instance_csr%ROWTYPE;
    l_new_ins_csr              instance_csr%ROWTYPE;
    l_new_instance_csr         instance_csr%ROWTYPE;
    l_debug_level              NUMBER;
    l_contracts_status         VARCHAR2(3);
    l_internal_party_id        NUMBER;
    l_msg_count                NUMBER;
    l_msg_index                NUMBER;
    l_msg_dummy                NUMBER;
    l_transaction_date         DATE;
    l_call_contracts           BOOLEAN := FALSE;
    l_temp                     VARCHAR2(1);
    l_chg_owner                VARCHAR2(1);
    l_sql                      VARCHAR2(2000);     -- Added for ER 3378294
    l_found                    VARCHAR2(1) := 'N'; -- Added for ER 3378294
    l_rma_line_id              NUMBER;
    l_oks_txn_count            NUMBER;
    l_exists                   VARCHAR2(1);
    l_order_org_id             NUMBER;
    l_order_shipped_date       DATE;
    l_txn_date                 DATE;
    l_txn_exists               VARCHAR2(1) :=null; --5615162

BEGIN

   --  Initialize API return status to success
   x_return_status := FND_API.G_RET_STS_SUCCESS;
   --
   l_contracts_status := FND_PROFILE.VALUE('CSI_CONTRACTS_ENABLED');
   --
   IF UPPER(l_contracts_status) <> 'Y'  THEN
      RETURN;
   END IF;
   --
   csi_gen_utility_pvt.put_line('Begin Call_to_Contracts : '||to_char(sysdate,'DD-MON-YYYY HH24:MI:SS'));
   csi_gen_utility_pvt.put_line('Contracts Transaction Type: '||p_transaction_type);
   IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
      csi_gen_utility_pvt.populate_install_param_rec;
   END IF;
   --
   l_internal_party_id := csi_datastructures_pub.g_install_param_rec.internal_party_id;
   --
   IF l_internal_party_id IS NULL THEN
      FND_MESSAGE.SET_NAME('CSI','CSI_API_UNINSTALLED_PARAMETER');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
   END IF;
   --
   OPEN instance_csr (p_instance_id);
   FETCH instance_csr INTO l_instance_csr;
   CLOSE instance_csr;
   --
   csi_gen_utility_pvt.put_line('p_transaction_date: '||p_transaction_date);
   csi_gen_utility_pvt.put_line('p_source_transaction_date: '||p_source_transaction_date);
   --
   IF p_transaction_date IS NULL OR p_transaction_date = fnd_api.g_miss_date THEN
     l_txn_date:= SYSDATE;
   ELSE
     l_txn_date:= p_transaction_date;
   END IF;
   --
   l_exists := 'N';
   --
   IF ( l_instance_csr.owner_party_id IS NOT NULL
        AND l_instance_csr.owner_party_id <> l_internal_party_id
        AND l_instance_csr.owner_party_source_table = 'HZ_PARTIES')
        OR ( l_instance_csr.owner_party_id IS NOT NULL
        AND l_instance_csr.owner_party_id = l_internal_party_id
        AND p_transaction_type in ('TRM','RET')
        AND l_instance_csr.owner_party_source_table = 'HZ_PARTIES')
   THEN
      IF p_source_transaction_date IS NULL OR p_source_transaction_date = fnd_api.g_miss_date THEN
         l_transaction_date:= SYSDATE;
      ELSE
	 l_transaction_date:= p_source_transaction_date;
      END IF;
      --
      csi_gen_utility_pvt.put_line('l_transaction_date: '||l_transaction_date);

      IF p_oks_txn_inst_tbl.count > 0 THEN
      csi_gen_utility_pvt.put_line('p_oks_txn_inst_tbl has records ...');
	 FOR J in p_oks_txn_inst_tbl.FIRST .. p_oks_txn_inst_tbl.LAST LOOP
	    IF p_oks_txn_inst_tbl.EXISTS(J) THEN
	       IF p_oks_txn_inst_tbl(J).old_customer_product_id = p_instance_id THEN
		  IF p_transaction_type = 'TRM' THEN
		  -- Modified for bug 5442038
		     IF l_instance_csr.active_end_date IS NULL OR
		        l_instance_csr.active_end_date = fnd_api.g_miss_date
		     THEN
		        p_oks_txn_inst_tbl(J).termination_date := l_transaction_date;
		     ELSE
		        csi_gen_utility_pvt.put_line('1. Assigning user entered end date');
		        p_oks_txn_inst_tbl(J).termination_date := l_instance_csr.active_end_date;
		     END IF;
		     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                     p_oks_txn_inst_tbl(J).TRM := 'Y';
                  ELSIF p_transaction_type = 'RET' THEN
                     p_oks_txn_inst_tbl(J).termination_date := l_transaction_date;
		     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                     p_oks_txn_inst_tbl(J).RET := 'Y';
		  ELSIF p_transaction_type = 'TRF' THEN
		     IF p_system_id IS NOT NULL AND
			p_system_id <> FND_API.G_MISS_NUM THEN
			p_oks_txn_inst_tbl(J).system_id := p_system_id;
		     ELSE
			p_oks_txn_inst_tbl(J).system_id := NULL;
		     END IF;
		     p_oks_txn_inst_tbl(J).new_customer_product_id :=
						  p_oks_txn_inst_tbl(J).old_customer_product_id;
		     p_oks_txn_inst_tbl(J).new_inventory_item_id :=
						  p_oks_txn_inst_tbl(J).old_inventory_item_id;
		     p_oks_txn_inst_tbl(J).new_unit_of_measure :=
						  p_oks_txn_inst_tbl(J).old_unit_of_measure;
		     p_oks_txn_inst_tbl(J).new_quantity :=
						  p_oks_txn_inst_tbl(J).old_quantity;
		     p_oks_txn_inst_tbl(J).new_customer_acct_id := p_party_account_id2;
		     p_oks_txn_inst_tbl(J).old_customer_acct_id := p_party_account_id1;
		     --
		     -- The following code has been added by sguthiva in order to incorporate the
		     -- changes made by the HTML UI .
		     -- When HTML UI passes a transaction date which should be less than sysdate,
		     -- then before calling contracts we need to make sure that there are no transactions
		     -- between passed date and sysdate.
		     IF (( p_source_transaction_date IS NOT NULL) AND (p_source_transaction_date < SYSDATE)) AND
			p_source_transaction_date <> fnd_api.g_miss_date THEN
			l_temp:=NULL;
			-- srramakr changed to source_transaction_date instead of transaction_date (3804960)
			BEGIN
			 /*Commenting for bug 5615162 added more code below
			   SELECT 'x'
			   INTO   l_temp
			   FROM   csi_inst_transactions_v
			   WHERE  instance_id=p_instance_id
			   AND    source_transaction_date > p_source_transaction_date
			   AND    transaction_id <> p_transaction_id
			   AND    ROWNUM=1;
			   IF l_temp IS NOT NULL AND p_txn_type_id <> 53  --added for bug  5752271 */

			--Start of:Added for bug 5615162
			l_txn_exists :=null;
			OPEN instance_txn_chk_csr (p_instance_id,p_transaction_id,p_transaction_date);
			FETCH instance_txn_chk_csr INTO l_txn_exists;
			CLOSE instance_txn_chk_csr;

			IF l_txn_exists IS NOT NULL AND p_txn_type_id <> 53 --End of:Added for bug 5615162
			   THEN
			      x_return_status := fnd_api.g_ret_sts_error ;
			      fnd_message.set_name('CSI', 'CSI_HAS_TXNS_GT_SYS');
			      fnd_message.set_token('INSTANCE_ID',p_instance_id );
			      fnd_message.set_token('SOURCE_TXN_DATE',to_char(p_source_transaction_date, 'DD-MON-YYYY HH24:MI:SS'));
			      fnd_msg_pub.add;
			     RAISE fnd_api.g_exc_error;
			   END IF;
			EXCEPTION
			   WHEN fnd_api.g_exc_error THEN
			      RAISE fnd_api.g_exc_error;
			   WHEN OTHERS THEN
			      NULL;
			END;
		     ELSIF (( p_source_transaction_date IS NOT NULL) AND (p_source_transaction_date > SYSDATE)) AND
			     p_source_transaction_date <> fnd_api.g_miss_date THEN
			x_return_status := fnd_api.g_ret_sts_error ;
			fnd_message.set_name('CSI', 'CSI_PASS_TXNS_GT_SYS');
			fnd_message.set_token('SOURCE_TXN_DATE',to_char(p_source_transaction_date, 'DD-MON-YYYY HH24:MI:SS'));
			fnd_msg_pub.add;
			RAISE fnd_api.g_exc_error;
		     END IF;
		     p_oks_txn_inst_tbl(J).transfer_date := l_transaction_date;
		     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                     p_oks_txn_inst_tbl(J).TRF := 'Y';
		  ELSIF p_transaction_type = 'UPD' THEN
		     p_oks_txn_inst_tbl(J).new_quantity :=
						  p_oks_txn_inst_tbl(J).old_quantity;
		     p_oks_txn_inst_tbl(J).old_quantity := p_quantity; -- Passed old Qty
		     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                     p_oks_txn_inst_tbl(J).UPD := 'Y';
		     --
		     IF p_txn_type_id is NOT NULL AND
			p_txn_type_id <> FND_API.G_MISS_NUM AND
			p_txn_type_id in (53,54) THEN
			p_oks_txn_inst_tbl(J).return_reason_code := 'RETURN'; -- RMA
		     ELSE
			p_oks_txn_inst_tbl(J).return_reason_code := 'REGULAR';
		     END IF;
		  ELSIF p_transaction_type = 'SPL' THEN
		     OPEN instance_csr (p_new_instance_id);
		     FETCH instance_csr INTO l_new_ins_csr;
		     CLOSE instance_csr;
		     --
		     p_oks_txn_inst_tbl(J).new_customer_product_id := p_new_instance_id;
		     p_oks_txn_inst_tbl(J).new_customer_acct_id :=
						  p_oks_txn_inst_tbl(J).old_customer_acct_id;
		     p_oks_txn_inst_tbl(J).new_inventory_item_id :=
						  p_oks_txn_inst_tbl(J).old_inventory_item_id;
		     p_oks_txn_inst_tbl(J).new_unit_of_measure :=
						  p_oks_txn_inst_tbl(J).old_unit_of_measure;
		     p_oks_txn_inst_tbl(J).new_quantity := l_new_ins_csr.quantity;
		     p_oks_txn_inst_tbl(J).old_quantity := p_quantity; -- Passed old Qty
		     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                     p_oks_txn_inst_tbl(J).SPL := 'Y';
		  ELSIF p_transaction_type = 'RPL' THEN
		     OPEN instance_csr (p_new_instance_id);
		     FETCH instance_csr INTO l_new_instance_csr;
		     CLOSE instance_csr;
		     --
		     IF l_new_instance_csr.owner_party_id IS NOT NULL AND
			l_new_instance_csr.owner_party_id <> l_internal_party_id AND
			l_new_instance_csr.owner_party_source_table = 'HZ_PARTIES' THEN
			l_call_contracts  := TRUE;
			p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_product_id := p_new_instance_id;
			p_oks_txn_inst_tbl(l_oks_txn_count).new_quantity  := l_new_instance_csr.quantity;
			p_oks_txn_inst_tbl(l_oks_txn_count).new_unit_of_measure :=
						    l_new_instance_csr.unit_of_measure;
			p_oks_txn_inst_tbl(l_oks_txn_count).new_inventory_item_id :=
						    l_new_instance_csr.inventory_item_id;
			p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                        p_oks_txn_inst_tbl(J).RPL := 'Y';
		     END IF;
                  ELSIF p_transaction_type = 'IDC' THEN
                     p_oks_txn_inst_tbl(J).IDC := 'Y';
                     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
                  ELSIF p_transaction_type = 'NEW' THEN
                     p_oks_txn_inst_tbl(J).NEW := 'Y';
                     p_oks_txn_inst_tbl(J).transaction_date := l_txn_date;
		  END IF;
		  l_exists := 'Y';
		  exit;
	       END IF; -- Instance ID matches
	    END IF; -- row exists check
	 END LOOP;
      END IF;
      --
      IF l_exists = 'N' THEN
         csi_gen_utility_pvt.put_line('l_exists is N ...');
         l_oks_txn_count := p_oks_txn_inst_tbl.count + 1;
         --
         p_oks_txn_inst_tbl(l_oks_txn_count).installation_date := l_instance_csr.install_date;
         --
         IF l_instance_csr.location_type_code = 'IN_TRANSIT' THEN
            p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id := l_instance_csr.in_transit_order_line_id;
         ELSE
            p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id := l_instance_csr.last_oe_order_line_id;
         END IF;
         --
         l_order_shipped_date := NULL;
         l_order_org_id := NULL;
         --
	 IF p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id IS NOT NULL THEN
	    Begin
	       select NVL(actual_shipment_date,schedule_ship_date)
		      ,org_id
	       into   l_order_shipped_date,l_order_org_id
	       from   OE_ORDER_LINES_ALL
	       where  line_id = p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id;
            Exception  -- Added exception handling for bug 6870487, in case the order line no longer exist in oe_order_lines_all table
              When no_data_found Then
                p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id := NULL;
	    End;
	 END IF;
         --
         IF p_oks_txn_inst_tbl(l_oks_txn_count).installation_date IS NULL THEN
            p_oks_txn_inst_tbl(l_oks_txn_count).shipped_date := NVL(l_order_shipped_date,l_instance_csr.active_start_date);
         ELSE
            p_oks_txn_inst_tbl(l_oks_txn_count).shipped_date := NULL;
         END IF;
         --
         p_oks_txn_inst_tbl(l_oks_txn_count).old_customer_product_id := p_instance_id;
         p_oks_txn_inst_tbl(l_oks_txn_count).old_quantity          := l_instance_csr.quantity;
         p_oks_txn_inst_tbl(l_oks_txn_count).old_unit_of_measure   := l_instance_csr.unit_of_measure;
         p_oks_txn_inst_tbl(l_oks_txn_count).old_inventory_item_id := l_instance_csr.inventory_item_id;
         p_oks_txn_inst_tbl(l_oks_txn_count).old_customer_acct_id  := l_instance_csr.owner_party_account_id;
         --
         IF p_transaction_type ='TRM' THEN
           csi_gen_utility_pvt.put_line('TRM Transaction Type');
         -- p_party_account_id1 will be passed only for TRF
         --   p_oks_txn_inst_tbl(l_oks_txn_count).old_customer_acct_id  := p_party_account_id1;
            p_oks_txn_inst_tbl(l_oks_txn_count).TRM := 'Y';
            -- Modified for bug 5442038
		     IF l_instance_csr.active_end_date IS NULL OR
		        l_instance_csr.active_end_date = fnd_api.g_miss_date
		     THEN
		        p_oks_txn_inst_tbl(l_oks_txn_count).termination_date := l_transaction_date;
		     ELSE
                csi_gen_utility_pvt.put_line('2. Assigning user entered end date');
		        p_oks_txn_inst_tbl(l_oks_txn_count).termination_date := l_instance_csr.active_end_date;
		     END IF;

            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
         END IF;
         --
         IF p_transaction_type ='RET' THEN
           csi_gen_utility_pvt.put_line('RET Transaction Type');
            p_oks_txn_inst_tbl(l_oks_txn_count).RET := 'Y';
            p_oks_txn_inst_tbl(l_oks_txn_count).termination_date := l_transaction_date;
            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
         END IF;
         --
         IF p_transaction_type ='IDC' THEN
            csi_gen_utility_pvt.put_line('IDC Transaction Type');
            p_oks_txn_inst_tbl(l_oks_txn_count).IDC := 'Y';
            p_oks_txn_inst_tbl(l_oks_txn_count).termination_date := l_transaction_date;
            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
         END IF;
         --
         IF p_transaction_type = 'UPD' THEN
            csi_gen_utility_pvt.put_line('UPD Transaction Type');
            p_oks_txn_inst_tbl(l_oks_txn_count).new_quantity :=
                                          p_oks_txn_inst_tbl(l_oks_txn_count).old_quantity;
            p_oks_txn_inst_tbl(l_oks_txn_count).old_quantity := p_quantity; -- Passed old Qty
            p_oks_txn_inst_tbl(l_oks_txn_count).UPD := 'Y';
            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
            --
            IF p_txn_type_id is NOT NULL AND
               p_txn_type_id <> FND_API.G_MISS_NUM AND
               p_txn_type_id in (53,54) THEN
               p_oks_txn_inst_tbl(l_oks_txn_count).return_reason_code := 'RETURN'; -- RMA
            ELSE
               p_oks_txn_inst_tbl(l_oks_txn_count).return_reason_code := 'REGULAR';
            END IF;
         ELSE
            p_oks_txn_inst_tbl(l_oks_txn_count).return_reason_code := NULL;
         END IF;
         --
         IF p_transaction_type = 'NEW' THEN
            csi_gen_utility_pvt.put_line('NEW Transaction Type');
            IF p_call_from_bom_expl = FND_API.G_TRUE THEN
               p_oks_txn_inst_tbl(l_oks_txn_count).bom_explosion_flag := 'Y';
            ELSE
               p_oks_txn_inst_tbl(l_oks_txn_count).bom_explosion_flag := 'N';
            END IF;
            p_oks_txn_inst_tbl(l_oks_txn_count).NEW := 'Y';
            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
         END IF;
         --
         IF p_vld_org_id IS NULL OR
            p_vld_org_id = FND_API.G_MISS_NUM
         THEN
            p_oks_txn_inst_tbl(l_oks_txn_count).organization_id := l_instance_csr.last_vld_organization_id; -- Changed from Master Org
         ELSE
            p_oks_txn_inst_tbl(l_oks_txn_count).organization_id := p_vld_org_id ;
         END IF;
         -- Added by sk for bug 2190051
         IF l_order_org_id IS NOT NULL THEN
            p_oks_txn_inst_tbl(l_oks_txn_count).org_id := l_order_org_id;
         ELSE
            SELECT operating_unit
            INTO   p_oks_txn_inst_tbl(l_oks_txn_count).org_id
            FROM   org_organization_definitions
            WHERE  organization_id = p_oks_txn_inst_tbl(l_oks_txn_count).organization_id ;
         END IF;
         -- Added by sk for bug 2190051
         --
         -- Added for ER 3381250
         l_rma_line_id := l_instance_csr.last_oe_rma_line_id;
         --
	 IF l_rma_line_id IS NOT NULL THEN
	    BEGIN
	       csi_gen_utility_pvt.put_line('Calling package oe_service_credit_grp.get_service_credit_eligible');
	       csi_gen_utility_pvt.put_line('to retreive service_credit_eligible_code for rma line id :'||l_rma_line_id);
         --l_sql := 'BEGIN oe_service_credit_grp.get_service_credit_eligible( :l_line_id, :l_service_code); END;';
           oe_service_credit_grp.get_service_credit_eligible
                ( p_line_id                 => l_rma_line_id
                 ,p_service_credit_eligible => p_oks_txn_inst_tbl(l_oks_txn_count).raise_credit
                 );
         --   EXECUTE IMMEDIATE l_sql USING IN l_rma_line_id, OUT p_oks_txn_inst_tbl(l_oks_txn_count).raise_credit;
	       csi_gen_utility_pvt.put_line( 'Value of raise_credit is : '||p_oks_txn_inst_tbl(l_oks_txn_count).raise_credit);
	    EXCEPTION
	       WHEN OTHERS THEN
		  csi_gen_utility_pvt.put_line('Into when others exception. ');
		  csi_gen_utility_pvt.put_line( 'Nothing is assigned to raise_credit. ');
	    END;
	 ELSE
	    csi_gen_utility_pvt.put_line('RMA line id is null');
	 END IF;
	 -- End addition for ER 3381250
	 --
	 IF p_transaction_type= 'SPL' THEN
	    csi_gen_utility_pvt.put_line('SPL Transaction Type');
	    OPEN instance_csr (p_new_instance_id);
	    FETCH instance_csr INTO l_new_ins_csr;
	    CLOSE instance_csr;
	    --
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_product_id := p_new_instance_id;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_acct_id :=
					 p_oks_txn_inst_tbl(l_oks_txn_count).old_customer_acct_id;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_inventory_item_id :=
					 p_oks_txn_inst_tbl(l_oks_txn_count).old_inventory_item_id;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_unit_of_measure :=
					 p_oks_txn_inst_tbl(l_oks_txn_count).old_unit_of_measure;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_quantity := l_new_ins_csr.quantity;
	    p_oks_txn_inst_tbl(l_oks_txn_count).old_quantity := p_quantity; -- Passed old Qty
            p_oks_txn_inst_tbl(l_oks_txn_count).SPL := 'Y';
            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
	 END IF;
	 --
	 IF p_transaction_type = 'TRF' THEN
	   csi_gen_utility_pvt.put_line('TRF Transaction Type');
            -- Need to notify contracts with the system_id during 'TRF'.
	    IF p_system_id IS NOT NULL AND
	       p_system_id <> FND_API.G_MISS_NUM THEN
	       p_oks_txn_inst_tbl(l_oks_txn_count).system_id := p_system_id;
	    ELSE
	       p_oks_txn_inst_tbl(l_oks_txn_count).system_id := NULL;
	    END IF;
            --
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_product_id :=
				  p_oks_txn_inst_tbl(l_oks_txn_count).old_customer_product_id;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_inventory_item_id :=
				  p_oks_txn_inst_tbl(l_oks_txn_count).old_inventory_item_id;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_unit_of_measure :=
				  p_oks_txn_inst_tbl(l_oks_txn_count).old_unit_of_measure;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_quantity :=
				  p_oks_txn_inst_tbl(l_oks_txn_count).old_quantity;
	    p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_acct_id := p_party_account_id2;
	    p_oks_txn_inst_tbl(l_oks_txn_count).old_customer_acct_id := p_party_account_id1;
	    --
	    -- The following code has been added by sguthiva in order to incorporate the
	    -- changes made by the HTML UI .
	    -- When HTML UI passes a transaction date which should be less than sysdate,
	    -- then before calling contracts we need to make sure that there are no transactions
	    -- between passed date and sysdate.
	    IF (( p_source_transaction_date IS NOT NULL) AND (p_source_transaction_date < SYSDATE)) AND
	          p_source_transaction_date <> fnd_api.g_miss_date THEN
	       l_temp:=NULL;
	       -- srramakr changed to source_transaction_date instead of transaction_date (3804960)
	       BEGIN
		  SELECT 'x'
		  INTO   l_temp
		  FROM   csi_inst_transactions_v
		  WHERE  instance_id=p_instance_id
		  AND    source_transaction_date > p_source_transaction_date
		  AND    transaction_id <> p_transaction_id
		  AND    ROWNUM=1;
		  IF l_temp IS NOT NULL THEN
		     x_return_status := fnd_api.g_ret_sts_error ;
		     fnd_message.set_name('CSI', 'CSI_HAS_TXNS_GT_SYS');
		     fnd_message.set_token('INSTANCE_ID',p_instance_id );
		     fnd_message.set_token('SOURCE_TXN_DATE',to_char(p_source_transaction_date, 'DD-MON-YYYY HH24:MI:SS'));
		     fnd_msg_pub.add;
		     RAISE fnd_api.g_exc_error;
		  END IF;
	       EXCEPTION
		  WHEN fnd_api.g_exc_error THEN
		     RAISE fnd_api.g_exc_error;
		  WHEN OTHERS THEN
		     NULL;
	       END;
	    ELSIF (( p_source_transaction_date IS NOT NULL) AND (p_source_transaction_date > SYSDATE)) AND
		     p_source_transaction_date <> fnd_api.g_miss_date THEN
	       x_return_status := fnd_api.g_ret_sts_error ;
	       fnd_message.set_name('CSI', 'CSI_PASS_TXNS_GT_SYS');
	       fnd_message.set_token('SOURCE_TXN_DATE',to_char(p_source_transaction_date, 'DD-MON-YYYY HH24:MI:SS'));
	       fnd_msg_pub.add;
	       RAISE fnd_api.g_exc_error;
	    END IF;
            p_oks_txn_inst_tbl(l_oks_txn_count).transfer_date := l_transaction_date;
            p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;
            p_oks_txn_inst_tbl(l_oks_txn_count).TRF := 'Y';
	 -- End changes by sguthiva for HTML
         ELSE
            p_oks_txn_inst_tbl(l_oks_txn_count).system_id := NULL;
         END IF;
         --
         -- Start addition for 'RPL'
         IF p_transaction_type= 'RPL' THEN
            csi_gen_utility_pvt.put_line('RPL Transaction Type');
            OPEN instance_csr (p_new_instance_id);
            FETCH instance_csr INTO l_new_instance_csr;
            CLOSE instance_csr;
            --
            IF l_new_instance_csr.owner_party_id IS NOT NULL AND
               l_new_instance_csr.owner_party_id <> l_internal_party_id AND
               l_new_instance_csr.owner_party_source_table = 'HZ_PARTIES' THEN
               l_call_contracts  := TRUE;
               p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_product_id := p_new_instance_id;
               p_oks_txn_inst_tbl(l_oks_txn_count).new_quantity        := l_new_instance_csr.quantity;
               p_oks_txn_inst_tbl(l_oks_txn_count).new_unit_of_measure := l_new_instance_csr.unit_of_measure;
               p_oks_txn_inst_tbl(l_oks_txn_count).new_inventory_item_id := l_new_instance_csr.inventory_item_id;
               p_oks_txn_inst_tbl(l_oks_txn_count).RPL := 'Y';
               p_oks_txn_inst_tbl(l_oks_txn_count).transaction_date := l_txn_date;

               --Added for bug 6617569--
       	       csi_gen_utility_pvt.put_line('Addition of order line id........');
               p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id := l_new_instance_csr.last_oe_order_line_id;
       	       csi_gen_utility_pvt.put_line('New order line id........'||p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id);
       	       csi_gen_utility_pvt.put_line('New instance id........'||p_oks_txn_inst_tbl(l_oks_txn_count).new_customer_product_id);

            END IF;
         END IF;
	 IF p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id IS NULL THEN
	    p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id := okc_api.g_miss_num;
	 END IF;
         -- Pass G_MISS order line ID while un-expiring an Instance if there is no change to the line_id.
	 IF p_transaction_type= 'NEW' THEN
	     csi_gen_utility_pvt.put_line('NEW Transaction Type');
	     IF nvl(p_order_line_id,-99999) <> FND_API.G_MISS_NUM THEN
	        p_oks_txn_inst_tbl(l_oks_txn_count).order_line_id := nvl(p_order_line_id,FND_API.G_MISS_NUM);
	     END IF;
         END IF;
      END IF;
   END IF;
   --
   csi_gen_utility_pvt.put_line('End Call_to_Contracts : '||to_char(sysdate,'DD-MON-YYYY HH24:MI:SS'));
EXCEPTION
   WHEN fnd_api.g_exc_error THEN
      RAISE fnd_api.g_exc_error;
   WHEN OTHERS THEN
      FND_MESSAGE.Set_Name('CSI', 'CSI_UNEXP_SQL_ERROR');
      FND_MESSAGE.Set_Token('API_NAME', 'Call_to_Contracts');
      FND_MESSAGE.Set_Token('SQL_ERROR', sqlerrm);
      FND_MSG_PUB.Add;
      RAISE fnd_api.g_exc_error;
END Call_to_Contracts;

  PROCEDURE update_txn_status(
    px_txn_rec       IN OUT nocopy csi_datastructures_pub.transaction_rec,
    x_return_status     OUT nocopy varchar2)
  IS
    l_return_status    varchar2(1) := fnd_api.g_ret_sts_success;
    l_msg_count        number;
    l_msg_data         varchar2(2000);
  BEGIN

    x_return_status := fnd_api.g_ret_sts_success;

    SELECT object_version_number
    INTO   px_txn_rec.object_version_number
    FROM   csi_transactions
    WHERE  transaction_id = px_txn_rec.transaction_id;

    csi_transactions_pvt.update_transactions(
      p_api_version      => 1.0,
      p_init_msg_list    => fnd_api.g_true,
      p_commit           => fnd_api.g_false,
      p_validation_level => fnd_api.g_valid_level_full,
      p_transaction_rec  => px_txn_rec,
      x_return_status    => l_return_status,
      x_msg_count        => l_msg_count,
      x_msg_data         => l_msg_data);

    IF l_return_status <> fnd_api.g_ret_sts_success THEN
      RAISE fnd_api.g_exc_error;
    END IF;

  EXCEPTION
    WHEN fnd_api.g_exc_error THEN
      x_return_status := fnd_api.g_ret_sts_error;
  END update_txn_status;


/*------------------------------------------------------*/
/* Procedure name: update_item_instance                 */
/* Description   : procedure used to update an Item     */
/*                 Instance                             */
/*------------------------------------------------------*/

PROCEDURE Update_Item_Instance(
      p_api_version         IN      NUMBER
     ,p_commit              IN      VARCHAR2
     ,p_init_msg_list       IN      VARCHAR2
     ,p_validation_level    IN      NUMBER
     ,p_instance_rec        IN OUT  NOCOPY csi_datastructures_pub.instance_rec
     ,p_txn_rec             IN OUT  NOCOPY csi_datastructures_pub.transaction_rec
     ,x_instance_id_lst        OUT  NOCOPY csi_datastructures_pub.id_tbl
     ,x_return_status          OUT  NOCOPY VARCHAR2
     ,x_msg_count              OUT  NOCOPY NUMBER
     ,x_msg_data               OUT  NOCOPY VARCHAR2
     ,p_item_attribute_tbl  IN OUT  NOCOPY csi_item_instance_pvt.item_attribute_tbl
     ,p_location_tbl        IN OUT  NOCOPY csi_item_instance_pvt.location_tbl
     ,p_generic_id_tbl      IN OUT  NOCOPY csi_item_instance_pvt.generic_id_tbl
     ,p_lookup_tbl          IN OUT  NOCOPY csi_item_instance_pvt.lookup_tbl
     ,p_ins_count_rec       IN OUT  NOCOPY csi_item_instance_pvt.ins_count_rec
     ,p_called_from_rel     IN      VARCHAR2
     ,p_validation_mode     IN      VARCHAR2
     ,p_oks_txn_inst_tbl    IN OUT NOCOPY oks_ibint_pub.txn_instance_tbl
     ,p_child_inst_tbl      IN OUT NOCOPY csi_item_instance_grp.child_inst_tbl
 )
IS
    l_api_name               CONSTANT VARCHAR2(30)   := 'UPDATE_ITEM_INSTANCE';
    l_api_version            CONSTANT NUMBER         := 1.0;
    l_debug_level            NUMBER;
    l_instance_id            NUMBER;
    l_mod_curr_instance_rec  csi_datastructures_pub.instance_rec;
    l_party_tbl              csi_datastructures_pub.party_tbl;
    l_asset_tbl              csi_datastructures_pub.instance_asset_rec;
    l_dummy                  VARCHAR2(1);
    l_instance_rec           csi_datastructures_pub.instance_rec;
    l_get_instance_rec       csi_datastructures_pub.instance_rec;
    l_check_instance_rec     csi_datastructures_pub.instance_rec;
    l_version_label_rec      csi_datastructures_pub.version_label_rec;
    l_object_version_number  NUMBER;
    l_return_value           BOOLEAN;
    l_csi_item_instance_h_id NUMBER;
    l_full_dump_frequency    NUMBER;
    l_owner                  NUMBER;
    l_owner_count            NUMBER := 0;
    l_org_id                 NUMBER;
    l_inv_org_id             NUMBER;
    l_int_party_id           NUMBER;
    l_serial_control         NUMBER;
    l_lot_control            NUMBER;
    l_shelf_life_code        NUMBER;
    l_mod_value              NUMBER;
    l_dump_flag              VARCHAR2(1);
    l_msg_index              NUMBER;
    l_msg_count              NUMBER;
    l_msg_dummy              NUMBER;
    l_party_rec              csi_datastructures_pub.party_rec;
    l_party_owner_rec        csi_datastructures_pub.party_rec;
    l_location_type_code     VARCHAR2(20);
    l_location_id            NUMBER;
    l_inv_organization_id    NUMBER;
    l_inv_subinventory_name  VARCHAR2(10);
    l_inv_locator_id         NUMBER;
    l_pa_project_id          NUMBER;
    l_pa_project_task_id     NUMBER;
    l_in_tran_order_line_id  NUMBER;
    l_wip_job_id             NUMBER;
    l_po_order_line_id       NUMBER;
    l_acct_class_code        VARCHAR2(10);
    l_sys_date               DATE := SYSDATE;
    l_last_vld_organization_id NUMBER;
    l_trackable_flag         VARCHAR2(1);
    l_uom_code               VARCHAR2(3);
    l_rev_control            NUMBER;
    l_exists_flag            VARCHAR2(1);
    l_valid_flag             VARCHAR2(1);
    l_ctr_grp_id_template    NUMBER;
    l_ctr_grp_id_instance    NUMBER;
    l_ctr_id_template        csi_counter_template_pub.ctr_template_autoinst_tbl;
    l_ctr_id_instance        csi_counter_template_pub.counter_autoinstantiate_tbl;
    l_base_item_id           NUMBER;
    l_ctr_association_id     NUMBER;
    l_association_type       VARCHAR2(30) := 'PROD_ITEM';
--    l_desc_flex              CS_COUNTERS_EXT_PVT.DFF_Rec_Type;
-- Counter ref r12 changes
    l_desc_flex              CSI_CTR_DATASTRUCTURES_PUB.DFF_REC_TYPE;
    l_delete_status          VARCHAR2(1);
    l_exists                 VARCHAR2(1);
    l_instance_hist_rec      csi_datastructures_pub.instance_history_rec;
    l_prior_txn_id           NUMBER;
    l_oe_line_id             NUMBER;
    l_install_date           DATE;
    l_current_val            NUMBER;
    l_txn_status             varchar2(10) := 'COMPLETE';
    l_part_or_serial_change  BOOLEAN := FALSE;   --6176621
    l_number_open_ro         NUMBER;
    --
    l_mtl_txn_tbl            CSI_DATASTRUCTURES_PUB.MTL_TXN_TBL;  -- Added for the bug 6875664, base bug 6531599

     -- Added variables for FP bug 8551918
    l_exp_rltns_rec             csi_datastructures_pub.ii_relationship_rec;
    l_instance_id_lst           csi_datastructures_pub.id_tbl;
    l_msg_data                  VARCHAR2(2000);

    CURSOR CTR_GROUP(p_src_object_id IN NUMBER) IS
    SELECT  group_id,
            associated_to_group, --Added for bug 9142776
	    COUNTER_ID		--Added for bug 9142776
      FROM  csi_ctr_item_associations
     WHERE  inventory_item_id = p_src_object_id;

    CURSOR party_owner_rec (p_instance_id NUMBER) is
            SELECT
                 INSTANCE_PARTY_ID,
                 INSTANCE_ID,
                 PARTY_SOURCE_TABLE,
                 PARTY_ID,
                 RELATIONSHIP_TYPE_CODE,
                 CONTACT_FLAG,
                 CONTACT_IP_ID,
                 ACTIVE_START_DATE,
                 ACTIVE_END_DATE,
                 CONTEXT,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 ATTRIBUTE6,
                 ATTRIBUTE7,
                 ATTRIBUTE8,
                 ATTRIBUTE9,
                 ATTRIBUTE10,
                 ATTRIBUTE11,
                 ATTRIBUTE12,
                 ATTRIBUTE13,
                 ATTRIBUTE14,
                 ATTRIBUTE15,
                 OBJECT_VERSION_NUMBER,
                 PRIMARY_FLAG,
                 PREFERRED_FLAG,
                 NULL PARENT_TBL_INDEX,
                 --NULL PROCESSED_FLAG,
                 NULL CALL_CONTRACTS,
                 NULL INTERFACE_ID,
                 NULL CONTACT_PARENT_TBL_INDEX,
                 NULL CASCADE_OWNERSHIP_FLAG -- Added for bug 2972082
          FROM   csi_i_parties
          WHERE  instance_id = p_instance_id
          AND    relationship_type_code = 'OWNER';


    CURSOR curr_instance_rec(p_instance_id IN NUMBER)  IS
           SELECT
                 INSTANCE_ID,
                 INSTANCE_NUMBER,
                 EXTERNAL_REFERENCE,
                 INVENTORY_ITEM_ID,
                 NULL VLD_ORGANIZATION_ID,
                 INVENTORY_REVISION,
                 INV_MASTER_ORGANIZATION_ID,
                 SERIAL_NUMBER,
                 MFG_SERIAL_NUMBER_FLAG,
                 LOT_NUMBER,
                 QUANTITY,
                 UNIT_OF_MEASURE,
                 ACCOUNTING_CLASS_CODE,
                 INSTANCE_CONDITION_ID,
                 INSTANCE_STATUS_ID,
                 CUSTOMER_VIEW_FLAG,
                 MERCHANT_VIEW_FLAG,
                 SELLABLE_FLAG,
                 SYSTEM_ID,
                 INSTANCE_TYPE_CODE,
                 ACTIVE_START_DATE,
                 ACTIVE_END_DATE,
                 LOCATION_TYPE_CODE,
                 LOCATION_ID,
                 INV_ORGANIZATION_ID,
                 INV_SUBINVENTORY_NAME,
                 INV_LOCATOR_ID,
                 PA_PROJECT_ID,
                 PA_PROJECT_TASK_ID,
                 IN_TRANSIT_ORDER_LINE_ID,
                 WIP_JOB_ID,
                 PO_ORDER_LINE_ID,
                 LAST_OE_ORDER_LINE_ID,
                 LAST_OE_RMA_LINE_ID,
                 LAST_PO_PO_LINE_ID,
                 LAST_OE_PO_NUMBER,
                 LAST_WIP_JOB_ID,
                 LAST_PA_PROJECT_ID,
                 LAST_PA_TASK_ID,
                 LAST_OE_AGREEMENT_ID,
                 INSTALL_DATE,
                 MANUALLY_CREATED_FLAG,
                 RETURN_BY_DATE,
                 ACTUAL_RETURN_DATE,
                 CREATION_COMPLETE_FLAG,
                 COMPLETENESS_FLAG,
                 NULL VERSION_LABEL,
                 NULL VERSION_LABEL_DESCRIPTION,
                 CONTEXT,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 ATTRIBUTE6,
                 ATTRIBUTE7,
                 ATTRIBUTE8,
                 ATTRIBUTE9,
                 ATTRIBUTE10,
                 ATTRIBUTE11,
                 ATTRIBUTE12,
                 ATTRIBUTE13,
                 ATTRIBUTE14,
                 ATTRIBUTE15,
                 OBJECT_VERSION_NUMBER,
                 LAST_TXN_LINE_DETAIL_ID,
                 INSTALL_LOCATION_TYPE_CODE,
                 INSTALL_LOCATION_ID,
                 INSTANCE_USAGE_CODE,
                 LAST_VLD_ORGANIZATION_ID,
                 CONFIG_INST_HDR_ID,
                 CONFIG_INST_ITEM_ID,
                 CONFIG_INST_REV_NUM,
                 CONFIG_VALID_STATUS,
                 INSTANCE_DESCRIPTION,
                 -- Added for eam integration
                 NETWORK_ASSET_FLAG,
                 MAINTAINABLE_FLAG,
                 PN_LOCATION_ID,
                 ASSET_CRITICALITY_CODE,
                 CATEGORY_ID,
                 EQUIPMENT_GEN_OBJECT_ID,
                 INSTANTIATION_FLAG,
                 LINEAR_LOCATION_ID,
                 OPERATIONAL_LOG_FLAG,
                 CHECKIN_STATUS,
                 SUPPLIER_WARRANTY_EXP_DATE,
                 ATTRIBUTE16,
                 ATTRIBUTE17,
                 ATTRIBUTE18,
                 ATTRIBUTE19,
                 ATTRIBUTE20,
                 ATTRIBUTE21,
                 ATTRIBUTE22,
                 ATTRIBUTE23,
                 ATTRIBUTE24,
                 ATTRIBUTE25,
                 ATTRIBUTE26,
                 ATTRIBUTE27,
                 ATTRIBUTE28,
                 ATTRIBUTE29,
                 ATTRIBUTE30,
               -- End addition for eam integration
               -- Addition of columns for FA Integration
                 PURCHASE_UNIT_PRICE,
                 PURCHASE_CURRENCY_CODE,
                 PAYABLES_UNIT_PRICE,
                 PAYABLES_CURRENCY_CODE,
                 SALES_UNIT_PRICE,
                 SALES_CURRENCY_CODE,
                 OPERATIONAL_STATUS_CODE,
               -- End addition of columns for FA Integration
                 SOURCE_CODE -- Added Code for Siebel Genesis Project
           FROM  csi_item_instances
           WHERE instance_id = p_instance_id
           FOR UPDATE OF OBJECT_VERSION_NUMBER ;
           l_curr_instance_rec  curr_instance_rec%ROWTYPE;

      CURSOR cur_instance_rec(p_instance_id IN NUMBER)  IS
           SELECT   last_vld_organization_id
           FROM     csi_item_instances
           WHERE    instance_id = p_instance_id;

           l_cur_instance_rec   cur_instance_rec%ROWTYPE;

      CURSOR ins_hist_csr(p_instance_history_id NUMBER) IS
             SELECT  INSTANCE_HISTORY_ID
                    ,INSTANCE_ID
                    ,TRANSACTION_ID
                    ,OLD_INSTANCE_NUMBER
                    ,NEW_INSTANCE_NUMBER
                    ,OLD_EXTERNAL_REFERENCE
                    ,NEW_EXTERNAL_REFERENCE
                    ,OLD_INVENTORY_ITEM_ID
                    ,NEW_INVENTORY_ITEM_ID
                    ,OLD_INVENTORY_REVISION
                    ,NEW_INVENTORY_REVISION
                    ,OLD_INV_MASTER_ORGANIZATION_ID
                    ,NEW_INV_MASTER_ORGANIZATION_ID
                    ,OLD_SERIAL_NUMBER
                    ,NEW_SERIAL_NUMBER
                    ,OLD_MFG_SERIAL_NUMBER_FLAG
                    ,NEW_MFG_SERIAL_NUMBER_FLAG
                    ,OLD_LOT_NUMBER
                    ,NEW_LOT_NUMBER
                    ,OLD_QUANTITY
                    ,NEW_QUANTITY
                    ,OLD_UNIT_OF_MEASURE
                    ,NEW_UNIT_OF_MEASURE
                    ,OLD_ACCOUNTING_CLASS_CODE
                    ,NEW_ACCOUNTING_CLASS_CODE
                    ,OLD_INSTANCE_CONDITION_ID
                    ,NEW_INSTANCE_CONDITION_ID
                    ,OLD_INSTANCE_STATUS_ID
                    ,NEW_INSTANCE_STATUS_ID
                    ,OLD_CUSTOMER_VIEW_FLAG
                    ,NEW_CUSTOMER_VIEW_FLAG
                    ,OLD_MERCHANT_VIEW_FLAG
                    ,NEW_MERCHANT_VIEW_FLAG
                    ,OLD_SELLABLE_FLAG
                    ,NEW_SELLABLE_FLAG
                    ,OLD_SYSTEM_ID
                    ,NEW_SYSTEM_ID
                    ,OLD_INSTANCE_TYPE_CODE
                    ,NEW_INSTANCE_TYPE_CODE
                    ,OLD_ACTIVE_START_DATE
                    ,NEW_ACTIVE_START_DATE
                    ,OLD_ACTIVE_END_DATE
                    ,NEW_ACTIVE_END_DATE
                    ,OLD_LOCATION_TYPE_CODE
                    ,NEW_LOCATION_TYPE_CODE
                    ,OLD_LOCATION_ID
                    ,NEW_LOCATION_ID
                    ,OLD_INV_ORGANIZATION_ID
                    ,NEW_INV_ORGANIZATION_ID
                    ,OLD_INV_SUBINVENTORY_NAME
                    ,NEW_INV_SUBINVENTORY_NAME
                    ,OLD_INV_LOCATOR_ID
                    ,NEW_INV_LOCATOR_ID
                    ,OLD_PA_PROJECT_ID
                    ,NEW_PA_PROJECT_ID
                    ,OLD_PA_PROJECT_TASK_ID
                    ,NEW_PA_PROJECT_TASK_ID
                    ,OLD_IN_TRANSIT_ORDER_LINE_ID
                    ,NEW_IN_TRANSIT_ORDER_LINE_ID
                    ,OLD_WIP_JOB_ID
                    ,NEW_WIP_JOB_ID
                    ,OLD_PO_ORDER_LINE_ID
                    ,NEW_PO_ORDER_LINE_ID
                    ,OLD_COMPLETENESS_FLAG
                    ,NEW_COMPLETENESS_FLAG
                    ,OLD_CONTEXT
                    ,NEW_CONTEXT
                    ,OLD_ATTRIBUTE1
                    ,NEW_ATTRIBUTE1
                    ,OLD_ATTRIBUTE2
                    ,NEW_ATTRIBUTE2
                    ,OLD_ATTRIBUTE3
                    ,NEW_ATTRIBUTE3
                    ,OLD_ATTRIBUTE4
                    ,NEW_ATTRIBUTE4
                    ,OLD_ATTRIBUTE5
                    ,NEW_ATTRIBUTE5
                    ,OLD_ATTRIBUTE6
                    ,NEW_ATTRIBUTE6
                    ,OLD_ATTRIBUTE7
                    ,NEW_ATTRIBUTE7
                    ,OLD_ATTRIBUTE8
                    ,NEW_ATTRIBUTE8
                    ,OLD_ATTRIBUTE9
                    ,NEW_ATTRIBUTE9
                    ,OLD_ATTRIBUTE10
                    ,NEW_ATTRIBUTE10
                    ,OLD_ATTRIBUTE11
                    ,NEW_ATTRIBUTE11
                    ,OLD_ATTRIBUTE12
                    ,NEW_ATTRIBUTE12
                    ,OLD_ATTRIBUTE13
                    ,NEW_ATTRIBUTE13
                    ,OLD_ATTRIBUTE14
                    ,NEW_ATTRIBUTE14
                    ,OLD_ATTRIBUTE15
                    ,NEW_ATTRIBUTE15
                    ,FULL_DUMP_FLAG
                    ,OLD_INST_LOC_TYPE_CODE
                    ,NEW_INST_LOC_TYPE_CODE
                    ,OLD_INST_LOC_ID
                    ,NEW_INST_LOC_ID
                    ,OLD_INST_USAGE_CODE
                    ,NEW_INST_USAGE_CODE
                    ,OLD_LAST_VLD_ORGANIZATION_ID
                    ,NEW_LAST_VLD_ORGANIZATION_ID
                    ,OLD_CONFIG_INST_REV_NUM
                    ,NEW_CONFIG_INST_REV_NUM
                    ,OLD_CONFIG_VALID_STATUS
                    ,NEW_CONFIG_VALID_STATUS
                    ,OLD_INSTANCE_DESCRIPTION
                    ,NEW_INSTANCE_DESCRIPTION
                    ,OLD_INSTALL_DATE
                    ,NEW_INSTALL_DATE
                    ,OLD_RETURN_BY_DATE
                    ,NEW_RETURN_BY_DATE
                    ,OLD_ACTUAL_RETURN_DATE
                    ,NEW_ACTUAL_RETURN_DATE
                    ,OLD_OE_AGREEMENT_ID
                    ,NEW_OE_AGREEMENT_ID
                    ,OLD_LAST_OE_ORDER_LINE_ID
                    ,NEW_LAST_OE_ORDER_LINE_ID
                    ,OLD_LAST_OE_RMA_LINE_ID
                    ,NEW_LAST_OE_RMA_LINE_ID
                    ,OLD_LAST_WIP_JOB_ID
                    ,NEW_LAST_WIP_JOB_ID
                    ,OLD_LAST_PO_PO_LINE_ID
                    ,NEW_LAST_PO_PO_LINE_ID
                    ,OLD_LAST_PA_PROJECT_ID
                    ,NEW_LAST_PA_PROJECT_ID
                    ,OLD_LAST_PA_TASK_ID
                    ,NEW_LAST_PA_TASK_ID
                    ,OLD_LAST_TXN_LINE_DETAIL_ID
                    ,NEW_LAST_TXN_LINE_DETAIL_ID
                    ,OLD_LAST_OE_PO_NUMBER
                    ,NEW_LAST_OE_PO_NUMBER
		    --start of column addition for eam integration--
                    ,OLD_NETWORK_ASSET_FLAG
                    ,NEW_NETWORK_ASSET_FLAG
                    ,OLD_MAINTAINABLE_FLAG
                    ,NEW_MAINTAINABLE_FLAG
                    ,OLD_PN_LOCATION_ID
                    ,NEW_PN_LOCATION_ID
                    ,OLD_ASSET_CRITICALITY_CODE
                    ,NEW_ASSET_CRITICALITY_CODE
                    ,OLD_CATEGORY_ID
                    ,NEW_CATEGORY_ID
                    ,OLD_EQUIPMENT_GEN_OBJECT_ID
                    ,NEW_EQUIPMENT_GEN_OBJECT_ID
                    ,OLD_INSTANTIATION_FLAG
                    ,NEW_INSTANTIATION_FLAG
                    ,OLD_LINEAR_LOCATION_ID
                    ,NEW_LINEAR_LOCATION_ID
                    ,OLD_OPERATIONAL_LOG_FLAG
                    ,NEW_OPERATIONAL_LOG_FLAG
                    ,OLD_CHECKIN_STATUS
                    ,NEW_CHECKIN_STATUS
                    ,OLD_SUPPLIER_WARRANTY_EXP_DATE
                    ,NEW_SUPPLIER_WARRANTY_EXP_DATE
                    ,OLD_ATTRIBUTE16
                    ,NEW_ATTRIBUTE16
                    ,OLD_ATTRIBUTE17
                    ,NEW_ATTRIBUTE17
                    ,OLD_ATTRIBUTE18
                    ,NEW_ATTRIBUTE18
                    ,OLD_ATTRIBUTE19
                    ,NEW_ATTRIBUTE19
                    ,OLD_ATTRIBUTE20
                    ,NEW_ATTRIBUTE20
                    ,OLD_ATTRIBUTE21
                    ,NEW_ATTRIBUTE21
                    ,OLD_ATTRIBUTE22
                    ,NEW_ATTRIBUTE22
                    ,OLD_ATTRIBUTE23
                    ,NEW_ATTRIBUTE23
                    ,OLD_ATTRIBUTE24
                    ,NEW_ATTRIBUTE24
                    ,OLD_ATTRIBUTE25
                    ,NEW_ATTRIBUTE25
                    ,OLD_ATTRIBUTE26
                    ,NEW_ATTRIBUTE26
                    ,OLD_ATTRIBUTE27
                    ,NEW_ATTRIBUTE27
                    ,OLD_ATTRIBUTE28
                    ,NEW_ATTRIBUTE28
                    ,OLD_ATTRIBUTE29
                    ,NEW_ATTRIBUTE29
                    ,OLD_ATTRIBUTE30
                    ,NEW_ATTRIBUTE30
		    --end of column addition for eam integration--
            -- Addition of columns for FA Integration
                    ,OLD_PAYABLES_UNIT_PRICE
                    ,NEW_PAYABLES_UNIT_PRICE
                    ,OLD_PAYABLES_CURRENCY_CODE
                    ,NEW_PAYABLES_CURRENCY_CODE
                    ,OLD_PURCHASE_UNIT_PRICE
                    ,NEW_PURCHASE_UNIT_PRICE
                    ,OLD_PURCHASE_CURRENCY_CODE
                    ,NEW_PURCHASE_CURRENCY_CODE
                    ,OLD_SALES_UNIT_PRICE
                    ,NEW_SALES_UNIT_PRICE
                    ,OLD_SALES_CURRENCY_CODE
                    ,NEW_SALES_CURRENCY_CODE
                    ,OLD_OPERATIONAL_STATUS_CODE
                    ,NEW_OPERATIONAL_STATUS_CODE
             -- End addition of columns for FA Integration
                    -- Begin Add Code for Siebel Genesis Project
                    ,OLD_SOURCE_CODE
                    ,NEW_SOURCE_CODE
                    -- End Add Code for Siebel Genesis Project
             FROM   csi_item_instances_h
             WHERE  instance_history_id = p_instance_history_id
             FOR UPDATE OF OBJECT_VERSION_NUMBER ;


      CURSOR upd_ctr_assn_csr(p_source_object_id NUMBER) IS
             SELECT  instance_association_id
                    ,source_object_id
                    ,counter_id
                    ,object_version_number
                    ,start_date_active --Add for bug 6963602
               FROM csi_counter_associations
              WHERE source_object_id = p_source_object_id
                AND source_object_code = 'CP';

      -- Added cursor for bug 8516781, FP bug 8551918
      CURSOR relationship_csr (p_subject_id IN NUMBER) IS
             SELECT relationship_id,object_version_number
             FROM csi_ii_relationships
             WHERE (subject_id = p_subject_id
             or    object_id = p_subject_id)    -- added bug 8661671
			 AND   (active_end_date IS NULL OR active_end_date > SYSDATE); --Bug 9207673 FP Bug 9287115


l_ins_hist_id            NUMBER;
l_ins_hist_csr           ins_hist_csr%ROWTYPE;
l_temp_rec               VARCHAR2(1);
l_temp_rec1              VARCHAR2(1);
l_open_service           VARCHAR2(1);
l_config_key             csi_utility_grp.config_instance_key;
l_config_valid_status    VARCHAR2(10);
l_return_status          VARCHAR2(10);
l_return_message         VARCHAR2(100);
l_component_ins_type     VARCHAR2(1):=NULL;
l_config_hdr_id          NUMBER;
l_config_rev_nbr         NUMBER;
l_original_status_id     NUMBER;
l_original_system_id     NUMBER;
l_orig_install_date      DATE;
l_unexpire               VARCHAR2(1);
l_ins_flag               VARCHAR2(1);
l_temp                   VARCHAR2(1);
l_eam_item               BOOLEAN := FALSE;
l_eam_item_type          NUMBER;
l_instance_history_id    NUMBER;
l_maintenance_object_type NUMBER:=3;
l_reason_failed          VARCHAR2(30);
l_token                  VARCHAR2(30);
l_lock_status            NUMBER;
l_counter_group_id       NUMBER :=0;
l_ctr_item_associations_rec csi_ctr_datastructures_pub.ctr_item_associations_rec;
l_valid                  BOOLEAN     := TRUE;
l_creation_flag          VARCHAR2(1);
l_gen_object_id          NUMBER;
l_ctr_associations_tbl   csi_ctr_datastructures_pub.counter_associations_tbl;
l_ctr                    NUMBER;
l_curr_maint_org_id      NUMBER;
l_latest_maint_org_id    NUMBER;
l_equipment_type         NUMBER;
l_network_asset_flag     VARCHAR2(1);
l_pn_location_id         NUMBER;
BEGIN
   -- Standard Start of API savepoint
      IF FND_API.To_Boolean( p_commit )
      THEN
         SAVEPOINT  update_item_instance_pvt;
      END IF;

   -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version,
                                          p_api_version,
                                          l_api_name   ,
                                          G_PKG_NAME    )
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;

   -- Initialize message list if p_init_msg_list is set to TRUE.
       IF FND_API.to_Boolean( p_init_msg_list ) THEN
             FND_MSG_PUB.initialize;
       END IF;

   -- Initialize API return status to success
       x_return_status := FND_API.G_RET_STS_SUCCESS;
        -- Check the profile option debug_level for debug message reporting
        l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');
        -- If debug_level = 1 then dump the procedure name
        IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line ( 'update_item_instance_pvt');
        END IF;
        -- If the debug level = 2 then dump all the parameters values.

        IF (l_debug_level > 1) THEN
             csi_gen_utility_pvt.put_line ( 'update_item_instance_pvt:'     ||
                                                 p_api_version         ||'-'||
                                                 p_commit              ||'-'||
                                                 p_init_msg_list            );

       --dump the records in a log file
             csi_gen_utility_pvt.dump_instance_rec(p_instance_rec);
             csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
        END IF;
      -- Start API body
      --
      -- Initialize the Instance count
      --
      If p_ins_count_rec.inv_count is NULL OR
         p_ins_count_rec.inv_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.inv_count := 0;
      End if;
      --
      If p_ins_count_rec.generic_count is NULL OR
         p_ins_count_rec.generic_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.generic_count := 0;
      End if;
      --
      If p_ins_count_rec.location_count is NULL OR
         p_ins_count_rec.location_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.location_count := 0;
      End if;
      --
      If p_ins_count_rec.lookup_count is NULL OR
         p_ins_count_rec.lookup_count = FND_API.G_MISS_NUM THEN
         p_ins_count_rec.lookup_count := 0;
      End if;
      --
      -- check if the object_version_number passed matches with the one
      -- in the database else raise error
        OPEN curr_instance_rec(p_instance_rec.INSTANCE_ID);
            FETCH curr_instance_rec INTO l_curr_instance_rec;
                IF  (l_curr_instance_rec.object_version_number <> nvl(p_instance_rec.OBJECT_VERSION_NUMBER,0)) THEN
                        FND_MESSAGE.Set_Name('CSI', 'CSI_API_OBJ_VER_MISMATCH');
                        FND_MSG_PUB.ADD;
                        RAISE FND_API.G_EXC_ERROR;
                END IF;
        CLOSE curr_instance_rec;

/* Fix for bug 4632441 : Here g_miss and null values for eam_columns are flip-flopped
   since EAM API treats g_miss and null value differently compared to CSI API */
     IF p_instance_rec.department_id = FND_API.G_MISS_NUM THEN
        p_instance_rec.department_id := NULL;
     ELSIF p_instance_rec.department_id IS  NULL THEN
        p_instance_rec.department_id := FND_API.G_MISS_NUM;
     END IF;

    IF p_instance_rec.wip_accounting_class = FND_API.G_MISS_CHAR THEN
       p_instance_rec.wip_accounting_class := NULL;
    ELSIF p_instance_rec.wip_accounting_class IS  NULL THEN
       p_instance_rec.wip_accounting_class := FND_API.G_MISS_CHAR;
    END IF;

    IF p_instance_rec.area_id = FND_API.G_MISS_NUM THEN
       p_instance_rec.area_id := NULL;
    ELSIF p_instance_rec.area_id IS  NULL THEN
       p_instance_rec.area_id := FND_API.G_MISS_NUM;
    END IF;




    --Added for MACD lock functionality
    IF p_instance_rec.instance_id IS NOT NULL AND
       p_instance_rec.instance_id <> fnd_api.g_miss_num
    THEN
      csi_item_instance_pvt.get_instance_lock_status
      ( p_instance_id  => p_instance_rec.instance_id ,
        p_lock_status  => l_lock_status
      );
       IF (p_txn_rec.transaction_type_id = 401 AND
           (l_lock_status = 1 OR p_called_from_rel = fnd_api.g_true)) OR
          (l_lock_status = 0)
       THEN
          NULL;
       ELSE
        FND_MESSAGE.SET_NAME('CSI','CSI_INSTANCE_LOCKED');
        FND_MESSAGE.SET_TOKEN('INSTANCE_ID',p_instance_rec.instance_id);
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
       END IF;
    END IF;
    -- End addition for MACD lock functionality

        OPEN  cur_instance_rec(p_instance_rec.INSTANCE_ID);
        FETCH cur_instance_rec INTO l_cur_instance_rec;
        CLOSE cur_instance_rec;

         l_mod_curr_instance_rec.INSTANCE_ID  :=  l_curr_instance_rec.INSTANCE_ID;
         l_mod_curr_instance_rec.INSTANCE_NUMBER     :=  l_curr_instance_rec.INSTANCE_NUMBER;
         l_mod_curr_instance_rec.EXTERNAL_REFERENCE  := l_curr_instance_rec.EXTERNAL_REFERENCE            ;
         l_mod_curr_instance_rec.INVENTORY_ITEM_ID             :=  l_curr_instance_rec.INVENTORY_ITEM_ID             ;
         l_mod_curr_instance_rec.VLD_ORGANIZATION_ID           :=  l_curr_instance_rec.VLD_ORGANIZATION_ID           ;
         l_mod_curr_instance_rec.INVENTORY_REVISION            :=  l_curr_instance_rec.INVENTORY_REVISION            ;
         l_mod_curr_instance_rec.INV_MASTER_ORGANIZATION_ID    :=  l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID    ;
         l_mod_curr_instance_rec.SERIAL_NUMBER                 :=  l_curr_instance_rec.SERIAL_NUMBER                 ;
         l_mod_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG        :=  l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG        ;
         l_mod_curr_instance_rec.LOT_NUMBER                    :=  l_curr_instance_rec.LOT_NUMBER                    ;
         l_mod_curr_instance_rec.QUANTITY                      :=  l_curr_instance_rec.QUANTITY                      ;
         l_mod_curr_instance_rec.UNIT_OF_MEASURE               :=  l_curr_instance_rec.UNIT_OF_MEASURE               ;
         l_mod_curr_instance_rec.ACCOUNTING_CLASS_CODE         :=  l_curr_instance_rec.ACCOUNTING_CLASS_CODE         ;
         l_mod_curr_instance_rec.INSTANCE_CONDITION_ID         :=  l_curr_instance_rec.INSTANCE_CONDITION_ID         ;
         l_mod_curr_instance_rec.INSTANCE_STATUS_ID            :=  l_curr_instance_rec.INSTANCE_STATUS_ID            ;
         l_mod_curr_instance_rec.CUSTOMER_VIEW_FLAG            :=  l_curr_instance_rec.CUSTOMER_VIEW_FLAG            ;
         l_mod_curr_instance_rec.MERCHANT_VIEW_FLAG            :=  l_curr_instance_rec.MERCHANT_VIEW_FLAG            ;
         l_mod_curr_instance_rec.SELLABLE_FLAG                 :=  l_curr_instance_rec.SELLABLE_FLAG                 ;
         l_mod_curr_instance_rec.SYSTEM_ID                     :=  l_curr_instance_rec.SYSTEM_ID                     ;
         l_mod_curr_instance_rec.INSTANCE_TYPE_CODE            :=  l_curr_instance_rec.INSTANCE_TYPE_CODE            ;
         l_mod_curr_instance_rec.ACTIVE_START_DATE             :=  l_curr_instance_rec.ACTIVE_START_DATE             ;
         l_mod_curr_instance_rec.ACTIVE_END_DATE               :=  l_curr_instance_rec.ACTIVE_END_DATE               ;
         l_mod_curr_instance_rec.LOCATION_TYPE_CODE            :=  l_curr_instance_rec.LOCATION_TYPE_CODE            ;
         l_mod_curr_instance_rec.LOCATION_ID                   :=  l_curr_instance_rec.LOCATION_ID                   ;
         l_mod_curr_instance_rec.INV_ORGANIZATION_ID           :=  l_curr_instance_rec.INV_ORGANIZATION_ID           ;
         l_mod_curr_instance_rec.INV_SUBINVENTORY_NAME         :=  l_curr_instance_rec.INV_SUBINVENTORY_NAME         ;
         l_mod_curr_instance_rec.INV_LOCATOR_ID                :=  l_curr_instance_rec.INV_LOCATOR_ID                ;
         l_mod_curr_instance_rec.PA_PROJECT_ID                 :=  l_curr_instance_rec.PA_PROJECT_ID                 ;
         l_mod_curr_instance_rec.PA_PROJECT_TASK_ID            :=  l_curr_instance_rec.PA_PROJECT_TASK_ID            ;
         l_mod_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID      :=  l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID      ;
         l_mod_curr_instance_rec.WIP_JOB_ID                    :=  l_curr_instance_rec.WIP_JOB_ID                    ;
         l_mod_curr_instance_rec.PO_ORDER_LINE_ID              :=  l_curr_instance_rec.PO_ORDER_LINE_ID              ;
         l_mod_curr_instance_rec.LAST_OE_ORDER_LINE_ID         :=  l_curr_instance_rec.LAST_OE_ORDER_LINE_ID         ;
         l_mod_curr_instance_rec.LAST_OE_RMA_LINE_ID           :=  l_curr_instance_rec.LAST_OE_RMA_LINE_ID           ;
         l_mod_curr_instance_rec.LAST_PO_PO_LINE_ID            :=  l_curr_instance_rec.LAST_PO_PO_LINE_ID            ;
         l_mod_curr_instance_rec.LAST_OE_PO_NUMBER             :=  l_curr_instance_rec.LAST_OE_PO_NUMBER             ;
         l_mod_curr_instance_rec.LAST_WIP_JOB_ID               :=  l_curr_instance_rec.LAST_WIP_JOB_ID               ;
         l_mod_curr_instance_rec.LAST_PA_PROJECT_ID            :=  l_curr_instance_rec.LAST_PA_PROJECT_ID            ;
         l_mod_curr_instance_rec.LAST_PA_TASK_ID               :=  l_curr_instance_rec.LAST_PA_TASK_ID               ;
         l_mod_curr_instance_rec.LAST_OE_AGREEMENT_ID          :=  l_curr_instance_rec.LAST_OE_AGREEMENT_ID          ;
         l_mod_curr_instance_rec.INSTALL_DATE                  :=  l_curr_instance_rec.INSTALL_DATE                  ;
         l_mod_curr_instance_rec.MANUALLY_CREATED_FLAG         :=  l_curr_instance_rec.MANUALLY_CREATED_FLAG         ;
         l_mod_curr_instance_rec.RETURN_BY_DATE                :=  l_curr_instance_rec.RETURN_BY_DATE                ;
         l_mod_curr_instance_rec.ACTUAL_RETURN_DATE            :=  l_curr_instance_rec.ACTUAL_RETURN_DATE            ;
         l_mod_curr_instance_rec.CREATION_COMPLETE_FLAG        :=  l_curr_instance_rec.CREATION_COMPLETE_FLAG        ;
         l_mod_curr_instance_rec.COMPLETENESS_FLAG             :=  l_curr_instance_rec.COMPLETENESS_FLAG             ;
         l_mod_curr_instance_rec.VERSION_LABEL                 :=  l_curr_instance_rec.VERSION_LABEL                 ;
         l_mod_curr_instance_rec.VERSION_LABEL_DESCRIPTION     :=  l_curr_instance_rec.VERSION_LABEL_DESCRIPTION     ;
         l_mod_curr_instance_rec.CONTEXT                       :=  l_curr_instance_rec.CONTEXT                       ;
         l_mod_curr_instance_rec.ATTRIBUTE1                    :=  l_curr_instance_rec.ATTRIBUTE1                    ;
         l_mod_curr_instance_rec.ATTRIBUTE2                    :=  l_curr_instance_rec.ATTRIBUTE2                    ;
         l_mod_curr_instance_rec.ATTRIBUTE3                    :=  l_curr_instance_rec.ATTRIBUTE3                    ;
         l_mod_curr_instance_rec.ATTRIBUTE4                    :=  l_curr_instance_rec.ATTRIBUTE4                    ;
         l_mod_curr_instance_rec.ATTRIBUTE5                    :=  l_curr_instance_rec.ATTRIBUTE5                    ;
         l_mod_curr_instance_rec.ATTRIBUTE6                    :=  l_curr_instance_rec.ATTRIBUTE6                    ;
         l_mod_curr_instance_rec.ATTRIBUTE7                    :=  l_curr_instance_rec.ATTRIBUTE7                    ;
         l_mod_curr_instance_rec.ATTRIBUTE8                    :=  l_curr_instance_rec.ATTRIBUTE8                    ;
         l_mod_curr_instance_rec.ATTRIBUTE9                    :=  l_curr_instance_rec.ATTRIBUTE9                    ;
         l_mod_curr_instance_rec.ATTRIBUTE10                   :=  l_curr_instance_rec.ATTRIBUTE10                   ;
         l_mod_curr_instance_rec.ATTRIBUTE11                   :=  l_curr_instance_rec.ATTRIBUTE11                   ;
         l_mod_curr_instance_rec.ATTRIBUTE12                   :=  l_curr_instance_rec.ATTRIBUTE12                   ;
         l_mod_curr_instance_rec.ATTRIBUTE13                   :=  l_curr_instance_rec.ATTRIBUTE13                   ;
         l_mod_curr_instance_rec.ATTRIBUTE14                   :=  l_curr_instance_rec.ATTRIBUTE14                   ;
         l_mod_curr_instance_rec.ATTRIBUTE15                   :=  l_curr_instance_rec.ATTRIBUTE15                   ;
         l_mod_curr_instance_rec.OBJECT_VERSION_NUMBER         :=  l_curr_instance_rec.OBJECT_VERSION_NUMBER         ;
         l_mod_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID       :=  l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID       ;
         l_mod_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE    :=  l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE    ;
         l_mod_curr_instance_rec.INSTALL_LOCATION_ID           :=  l_curr_instance_rec.INSTALL_LOCATION_ID           ;
         l_mod_curr_instance_rec.INSTANCE_USAGE_CODE           :=  l_curr_instance_rec.INSTANCE_USAGE_CODE           ;
         --start of code for eam integration--
         l_mod_curr_instance_rec.NETWORK_ASSET_FLAG            :=  l_curr_instance_rec.NETWORK_ASSET_FLAG            ;
         l_mod_curr_instance_rec.MAINTAINABLE_FLAG             :=  l_curr_instance_rec.MAINTAINABLE_FLAG             ;
         l_mod_curr_instance_rec.PN_LOCATION_ID                :=  l_curr_instance_rec.PN_LOCATION_ID                ;
         l_mod_curr_instance_rec.ASSET_CRITICALITY_CODE        :=  l_curr_instance_rec.ASSET_CRITICALITY_CODE        ;
         l_mod_curr_instance_rec.CATEGORY_ID                   :=  l_curr_instance_rec.CATEGORY_ID                   ;
         l_mod_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID       :=  l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID       ;
         l_mod_curr_instance_rec.INSTANTIATION_FLAG            :=  l_curr_instance_rec.INSTANTIATION_FLAG            ;
         l_mod_curr_instance_rec.LINEAR_LOCATION_ID            :=  l_curr_instance_rec.LINEAR_LOCATION_ID            ;
         l_mod_curr_instance_rec.OPERATIONAL_LOG_FLAG          :=  l_curr_instance_rec.OPERATIONAL_LOG_FLAG          ;
         l_mod_curr_instance_rec.CHECKIN_STATUS                :=  l_curr_instance_rec.CHECKIN_STATUS                ;
         l_mod_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE    :=  l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE    ;
         l_mod_curr_instance_rec.ATTRIBUTE16                   :=  l_curr_instance_rec.ATTRIBUTE16                   ;
         l_mod_curr_instance_rec.ATTRIBUTE17                   :=  l_curr_instance_rec.ATTRIBUTE17                   ;
         l_mod_curr_instance_rec.ATTRIBUTE18                   :=  l_curr_instance_rec.ATTRIBUTE18                   ;
         l_mod_curr_instance_rec.ATTRIBUTE19                   :=  l_curr_instance_rec.ATTRIBUTE19                   ;
         l_mod_curr_instance_rec.ATTRIBUTE20                   :=  l_curr_instance_rec.ATTRIBUTE20                   ;
         l_mod_curr_instance_rec.ATTRIBUTE21                   :=  l_curr_instance_rec.ATTRIBUTE21                   ;
         l_mod_curr_instance_rec.ATTRIBUTE22                   :=  l_curr_instance_rec.ATTRIBUTE22                   ;
         l_mod_curr_instance_rec.ATTRIBUTE23                   :=  l_curr_instance_rec.ATTRIBUTE23                   ;
         l_mod_curr_instance_rec.ATTRIBUTE24                   :=  l_curr_instance_rec.ATTRIBUTE24                   ;
         l_mod_curr_instance_rec.ATTRIBUTE25                   :=  l_curr_instance_rec.ATTRIBUTE25                   ;
         l_mod_curr_instance_rec.ATTRIBUTE26                   :=  l_curr_instance_rec.ATTRIBUTE26                   ;
         l_mod_curr_instance_rec.ATTRIBUTE27                   :=  l_curr_instance_rec.ATTRIBUTE27                   ;
         l_mod_curr_instance_rec.ATTRIBUTE28                   :=  l_curr_instance_rec.ATTRIBUTE28                   ;
         l_mod_curr_instance_rec.ATTRIBUTE29                   :=  l_curr_instance_rec.ATTRIBUTE29                   ;
         l_mod_curr_instance_rec.ATTRIBUTE30                   :=  l_curr_instance_rec.ATTRIBUTE30                   ;
		 --end of code for eam integration--
       -- Addition of columns for FA Integration
         l_mod_curr_instance_rec.PAYABLES_UNIT_PRICE           := l_curr_instance_rec.PAYABLES_UNIT_PRICE            ;
         l_mod_curr_instance_rec.PAYABLES_CURRENCY_CODE        := l_curr_instance_rec.PAYABLES_CURRENCY_CODE         ;
         l_mod_curr_instance_rec.PURCHASE_UNIT_PRICE           := l_curr_instance_rec.PURCHASE_UNIT_PRICE            ;
         l_mod_curr_instance_rec.PURCHASE_CURRENCY_CODE        := l_curr_instance_rec.PURCHASE_CURRENCY_CODE         ;
         l_mod_curr_instance_rec.SALES_UNIT_PRICE              := l_curr_instance_rec.SALES_UNIT_PRICE               ;
         l_mod_curr_instance_rec.SALES_CURRENCY_CODE           := l_curr_instance_rec.SALES_CURRENCY_CODE            ;
         l_mod_curr_instance_rec.OPERATIONAL_STATUS_CODE       := l_curr_instance_rec.OPERATIONAL_STATUS_CODE        ;
        -- End addition of columns for FA Integration
        -- Begin Add Code for Siebel Genesis Project
        l_mod_curr_instance_rec.SOURCE_CODE                    := l_curr_instance_rec.SOURCE_CODE;
        -- End Add Code for Siebel Genesis Project

        csi_item_instance_vld_pvt.get_merge_rec   (p_instance_rec      =>   p_instance_rec,
                                                   l_curr_instance_rec =>   l_mod_curr_instance_rec,
                                                   l_get_instance_rec  =>   l_get_instance_rec
                                                   );
--Added for bug 2766787
      IF p_instance_rec.location_type_code='INVENTORY'
      THEN
         p_instance_rec.vld_organization_id := p_instance_rec.inv_organization_id;
      END IF;
--End addition for bug 2766787
      IF ((p_instance_rec.vld_organization_id IS NULL)  OR
          (p_instance_rec.vld_organization_id = FND_API.G_MISS_NUM))
      THEN
         p_instance_rec.vld_organization_id := l_cur_instance_rec.last_vld_organization_id;
         l_get_instance_rec.vld_organization_id := l_cur_instance_rec.last_vld_organization_id;
      ELSE
         l_get_instance_rec.vld_organization_id := p_instance_rec.vld_organization_id;
      END IF;

      l_last_vld_organization_id := p_instance_rec.vld_organization_id;

      IF   l_get_instance_rec.location_type_code <> 'INVENTORY' AND
           l_cur_instance_rec.last_vld_organization_id <> l_get_instance_rec.vld_organization_id
	   AND l_curr_instance_rec.instance_usage_code <> 'IN_TRANSIT' --Added for bug 6188180
      THEN
               FND_MESSAGE.Set_Name('CSI', 'CSI_CANNOT_MODIFY_VLD_ORG');
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
      END IF;

      -- Check if all the required parameters are passed
           CSI_Item_Instance_vld_pvt.Check_Reqd_Param_num
             (    p_instance_rec.INSTANCE_ID ,
                '  p_instance_rec.INSTANCE_ID ',
                   l_api_name                 );

      -- Check if the instance id  is valid
        IF NOT(CSI_Item_Instance_vld_pvt.Is_InstanceID_Valid
                                                     (p_instance_rec.INSTANCE_ID,
                                                      TRUE                    )) THEN
              RAISE FND_API.G_EXC_ERROR;
        END IF;
        FND_File.Put_Line(Fnd_File.LOG,'p_validation_mode is :'||p_validation_mode);
        IF (p_validation_mode <> 'U')
        THEN

       -- The following sequence will be set only from the Data Correction
        l_current_val := -9999999;
        --
        Begin
           select CSI_II_FORWARD_SYNC_TEMP_S.CURRVAL
           into l_current_val
           FROM DUAL;
        Exception
           when others then
              l_current_val := -9999999;
        End;
        --
        -- Proceed with Forward SYnch check if the sequence does not return any value.
        IF l_current_val = -9999999 THEN
           IF NOT(CSI_Item_Instance_vld_pvt.Is_Forward_Synch
                     (p_instance_id    =>  p_instance_rec.INSTANCE_ID,
                      p_stop_all_txn   =>  fnd_api.g_true,
                      p_mtl_txn_id     =>  fnd_api.g_miss_num)) THEN
              FND_MESSAGE.Set_Name('CSI', 'CSI_API_NO_FORWARD_SYNCH');
              FND_MESSAGE.Set_Token('INSTANCE', p_instance_rec.INSTANCE_ID);
              FND_MSG_PUB.ADD;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
        ELSE -- Even if seq exists, stop later txns
           IF NOT(CSI_Item_Instance_vld_pvt.Is_Forward_Synch
                     (p_instance_id    =>  p_instance_rec.INSTANCE_ID,
                      p_stop_all_txn   =>  fnd_api.g_false, -- Stop only later txns
                      p_mtl_txn_id     =>  p_txn_rec.inv_material_transaction_id)) THEN
              FND_MESSAGE.Set_Name('CSI', 'CSI_API_NO_FORWARD_SYNCH');
              FND_MESSAGE.Set_Token('INSTANCE', p_instance_rec.INSTANCE_ID);
              FND_MSG_PUB.ADD;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
        END IF;
        --
      -- validation for Instance id
        IF ((p_instance_rec.instance_id IS NULL) OR
            (p_instance_rec.instance_id <> FND_API.G_MISS_NUM)) THEN
            IF ((p_instance_rec.instance_id IS NULL) OR
                (p_instance_rec.instance_id <> l_curr_instance_rec.instance_id)) THEN
                    FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
                    FND_MESSAGE.Set_Token('COLUMN', 'INSTANCE_ID');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR;
            END IF;
        END IF;

      -- validation for Instance Number
        IF ((p_instance_rec.instance_number IS NULL) OR
            (p_instance_rec.instance_number <> FND_API.G_MISS_CHAR)) THEN
            IF ((p_instance_rec.instance_number IS NULL) OR
                (p_instance_rec.instance_number <> l_curr_instance_rec.instance_number))
            THEN
            -- Added for eam integration
              IF NOT csi_item_Instance_Vld_pvt.Is_InstanceNum_Valid(p_instance_rec.instance_id,
                                                                    p_instance_rec.instance_number,
                                                                    'UPDATE')
              THEN
               RAISE fnd_api.g_exc_error;
              END IF;
            -- End addition for eam integration
            /*
                    FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
                    FND_MESSAGE.Set_Token('COLUMN', 'INSTANCE_NUMBER');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR;
                    */
            END IF;
        END IF;
      -- validation for Inventory Item id

--start change for BUG:6176621

      /*  IF ((p_instance_rec.inventory_item_id IS NULL) OR
            (p_instance_rec.inventory_item_id <> FND_API.G_MISS_NUM)) THEN
            IF ((p_instance_rec.inventory_item_id IS NULL) OR
                (p_instance_rec.inventory_item_id <> l_curr_instance_rec.inventory_item_id)) THEN
		*/
IF p_txn_rec.transaction_type_id = 205
 THEN
 SELECT count(*)
   INTO l_number_open_ro
   FROM CSD_REPAIRS cr
   where  cr.STATUS <> 'C'AND
       (cr.CUSTOMER_PRODUCT_ID = p_instance_rec.instance_id or exists
            (select 'X' from csd_product_txns_v cptv
                  where cptv.repair_line_id = cr.repair_line_id and
                        (cptv.source_instance_id = p_instance_rec.instance_id or
                             cptv.non_source_instance_id = p_instance_rec.instance_id)));

		IF(l_number_open_ro>0)
		 THEN
		    FND_MESSAGE.Set_Name('CSI', 'CSI_OPEN_RO_EXISTS');
                    FND_MESSAGE.Set_Token('COLUMN', 'INVENTORY_ITEM_ID OR SERIAL_NUMBER');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR;

		  END IF;
	END IF;

						--validation for open depot repair orders for CMRO

          IF p_instance_rec.inventory_item_id IS NULL THEN
            FND_MESSAGE.Set_Name('CSI', 'CSI_API_INVALID_ITEM');
            FND_MESSAGE.Set_Token('INVENTORY_ITEM_ID',p_instance_rec.inventory_item_id);
	     fnd_message.set_token('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
	     FND_MSG_PUB.ADD;
 	       RAISE FND_API.G_EXC_ERROR;
 	     ELSE
 	       IF (p_instance_rec.inventory_item_id <> FND_API.G_MISS_NUM)
 	          AND
 	          (p_instance_rec.inventory_item_id <> l_curr_instance_rec.inventory_item_id)
 	       THEN
 	         IF p_txn_rec.transaction_type_id = 205

		 THEN
 	           l_part_or_serial_change := TRUE;
 	         ELSE
                    FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
                    FND_MESSAGE.Set_Token('COLUMN', 'INVENTORY_ITEM_ID');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR;
            END IF;
        END IF;
     END IF;


 	     IF nvl(p_instance_rec.serial_number, fnd_api.g_miss_char) <> fnd_api.g_miss_char
 	        AND
 	        p_instance_rec.serial_number <> l_curr_instance_rec.serial_number
 	     THEN
 	       IF p_txn_rec.transaction_type_id = 205

	       THEN
 	         l_part_or_serial_change := TRUE;
 	       /*ELSE -- Commented for bug 6965008
                 -- Modified else block for the bug 6875664, base bug 6531599
                 IF p_txn_rec.transaction_type_id = 1 THEN
                   l_mtl_txn_tbl.DELETE;
                   CSI_Item_Instance_vld_pvt.get_mtl_txn_for_srl(
                      p_inventory_item_id => p_instance_rec.inventory_item_id,
                      p_serial_number     => p_instance_rec.serial_number,
                      x_mtl_txn_tbl       => l_mtl_txn_tbl);
                   IF NVL(l_mtl_txn_tbl.Count,0) > 0 THEN
                      FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
                      FND_MESSAGE.Set_Token('COLUMN', 'SERIAL_NUMBER');
                      FND_MSG_PUB.ADD;
                      RAISE FND_API.G_EXC_ERROR;
                   END IF;
                 ELSE
 	           FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
 	           FND_MESSAGE.Set_Token('COLUMN', 'SERIAL_NUMBER');
 	           FND_MSG_PUB.ADD;
 	           RAISE FND_API.G_EXC_ERROR;
                 END IF;
		  */      -- Commented for bug 6965008
               END IF;
 	     END IF;
			--end of code for 6176621

        --
        IF p_instance_rec.instance_status_id IS NULL THEN
           FND_MESSAGE.Set_Name('CSI','CSI_API_MANDATORY_STATUS');
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
        --
        IF p_instance_rec.quantity IS NULL THEN
           FND_MESSAGE.Set_Name('CSI','CSI_API_MANDATORY_QUANTITY');
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
        --
        IF p_instance_rec.unit_of_measure IS NULL THEN
           FND_MESSAGE.Set_Name('CSI','CSI_API_MANDATORY_UOM');
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
        --
        -- validation for Inv Master Organization Id
        -- srramakr Bug 4163719. Master Organization can be changed under certain circumstances.
        -- For those customers who maintain multiple Inventory Master Oraganizations, shipping might
        -- happen from one org and RMA into another. Under these scenarios, the master organization
        -- will change. When this transaction lands in IB, we need to check the combination of
        -- Master org and Vld org and make the update. If the combination is not valid, we error out.
        --
        IF ((p_instance_rec.inv_master_organization_id IS NULL) OR
            (p_instance_rec.inv_master_organization_id <> FND_API.G_MISS_NUM)) THEN
           IF ((p_instance_rec.inv_master_organization_id IS NULL) OR
               (p_instance_rec.inv_master_organization_id <>
                                         l_curr_instance_rec.inv_master_organization_id)) THEN
	       BEGIN
		  SELECT  'x'
		  INTO    l_temp
		  FROM    mtl_parameters
		  WHERE   organization_id = p_instance_rec.vld_organization_id
		  AND     master_organization_id = p_instance_rec.inv_master_organization_id;
	       EXCEPTION
		 WHEN NO_DATA_FOUND THEN
		   FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_VLD_MAST_COMB');
		   FND_MSG_PUB.Add;
		   RAISE FND_API.G_EXC_ERROR;
	       END;
               /*****     FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
                    FND_MESSAGE.Set_Token('COLUMN', 'INV_MASTER_ORGANIZATION_ID');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR; *****/
            END IF;
        END IF;
      --


         IF (p_instance_rec.location_id IS NULL OR
             p_instance_rec.location_id =fnd_api.g_miss_num)
         THEN
           IF p_instance_rec.location_type_code IN ('WIP','HR_LOCATIONS','PROJECT','IN_TRANSIT','PO','INTERNAL_SITE')
           THEN
            BEGIN
              SELECT location_id
                INTO p_instance_rec.location_id
                FROM hr_all_organization_units
               WHERE organization_id = p_instance_rec.vld_organization_id;

               l_get_instance_rec.location_id:=p_instance_rec.location_id;

            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END;
            IF p_instance_rec.location_id IS NULL
            THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
         END IF;

         IF (p_instance_rec.install_location_id IS NULL OR
             p_instance_rec.install_location_id =fnd_api.g_miss_num)
         THEN
           IF p_instance_rec.install_location_type_code IN ('WIP','HR_LOCATIONS','PROJECT','IN_TRANSIT','PO','INTERNAL_SITE')
           THEN
            BEGIN
              SELECT location_id
                INTO p_instance_rec.install_location_id
                FROM hr_all_organization_units
               WHERE organization_id = p_instance_rec.vld_organization_id;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END;
            IF p_instance_rec.install_location_id IS NULL
            THEN
               fnd_message.set_name('CSI','CSI_NO_HR_LOCATIONS');
               fnd_message.set_token('ORGANIZATION_ID',p_instance_rec.vld_organization_id);
               fnd_msg_pub.ADD;
	           RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
         END IF;


      -- End code addition for eam integration

      -- validation for Active Start Date
        IF ((p_instance_rec.active_start_date IS NULL) OR
            (p_instance_rec.active_start_date <> FND_API.G_MISS_DATE)) THEN
            IF ((p_instance_rec.active_start_date IS NULL) OR
                (p_instance_rec.active_start_date <> l_curr_instance_rec.active_start_date)) THEN
                    FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
                    FND_MESSAGE.Set_Token('COLUMN', 'ACTIVE_START_DATE');
                    FND_MSG_PUB.ADD;
                    RAISE FND_API.G_EXC_ERROR;
            END IF;
        END IF;

      -- validating the effective active end date for an End-dated Instance
        IF l_curr_instance_rec.active_end_date <= SYSDATE THEN
            IF (p_instance_rec.active_end_date = FND_API.G_MISS_DATE) OR
               (p_instance_rec.active_end_date < SYSDATE) THEN
              IF (p_instance_rec.check_for_instance_expiry = fnd_api.g_true) THEN
                  IF NOT (p_called_from_rel = fnd_api.g_true OR p_txn_rec.transaction_type_id = 401)
                  THEN
                         FND_MESSAGE.SET_NAME('CSI','CSI_API_CANT_UPD_EXP_ITEM');
                         FND_MSG_PUB.ADD;
                         RAISE FND_API.G_EXC_ERROR;
                  END IF;
              END IF;
            END IF;
        END IF;

      -- validating the effective active end date
        IF  ( p_instance_rec.ACTIVE_END_DATE <> FND_API.G_MISS_DATE) THEN
             IF NOT(CSI_Item_Instance_vld_pvt.EndDate_Valid
                                 (l_curr_instance_rec.ACTIVE_START_DATE,
                                  p_instance_rec.ACTIVE_END_DATE ,
                                  p_instance_rec.INSTANCE_ID,
				  p_txn_rec.transaction_id))  THEN -- Bug 9081875
                RAISE FND_API.G_EXC_ERROR;
             END IF;
        END IF;

       -- Validate if the instance status is being changed to
       -- a new status with a termination_flag set to 'Y'
       -- If so, then the end_date should be checked
       -- srramakr. Bug # 2180425. If the status is changed to a Terminated Status, then the
       -- active_end_date should be validated. We do not allow future date in this case.
       -- For past dates, there should not be any Transactions between the active_end_date and sysdate.
        IF  ( (p_instance_rec.instance_status_id <> FND_API.G_MISS_NUM)
            AND (p_instance_rec.instance_status_id IS NOT NULL)
            AND (p_instance_rec.instance_status_id <>
                      l_curr_instance_rec.instance_status_id)
            AND (CSI_Item_Instance_vld_pvt.val_inst_ter_flag
                    (p_instance_rec.instance_status_id)))
            THEN
              IF  ((p_instance_rec.ACTIVE_END_DATE IS NULL) OR
                   (p_instance_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE)) THEN
                   FND_MESSAGE.Set_Name('CSI', 'CSI_API_TER_DATE');
                   FND_MSG_PUB.ADD;
                   RAISE FND_API.G_EXC_ERROR;
              ELSIF p_instance_rec.ACTIVE_END_DATE < sysdate THEN
                 IF NOT(CSI_Item_Instance_vld_pvt.EndDate_Valid
                                 (l_curr_instance_rec.ACTIVE_START_DATE,
                                  p_instance_rec.ACTIVE_END_DATE ,
                                  p_instance_rec.INSTANCE_ID,
				  p_txn_rec.transaction_id))  THEN -- Bug 9081875
                    RAISE FND_API.G_EXC_ERROR;
                 END IF;
              ELSIF ((p_instance_rec.ACTIVE_END_DATE <> FND_API.G_MISS_DATE) AND
                     (p_instance_rec.ACTIVE_END_DATE > sysdate)) THEN
                   FND_MESSAGE.Set_Name('CSI', 'CSI_API_FUTURE_DATE');
                   FND_MSG_PUB.ADD;
                   RAISE FND_API.G_EXC_ERROR;
              END IF;
        END IF;

        --
        -- Get the Required Inventory Attributes
        l_exists_flag := 'N';
        l_valid_flag := 'Y';
        IF p_item_attribute_tbl.count > 0 THEN
           FOR item_count in p_item_attribute_tbl.FIRST .. p_item_attribute_tbl.LAST
           LOOP
              IF p_item_attribute_tbl(item_count).inventory_item_id = l_get_instance_rec.inventory_item_id AND
                 p_item_attribute_tbl(item_count).organization_id = p_instance_rec.vld_organization_id AND
                 p_item_attribute_tbl(item_count).master_organization_id = l_get_instance_rec.inv_master_organization_id
              THEN
                 l_trackable_flag := p_item_attribute_tbl(item_count).trackable_flag;
                 l_rev_control := p_item_attribute_tbl(item_count).revision_control_code;
                 l_serial_control := p_item_attribute_tbl(item_count).serial_number_control_code;
                 l_lot_control := p_item_attribute_tbl(item_count).lot_control_code;
                 l_shelf_life_code := p_item_attribute_tbl(item_count).shelf_life_code;
                 l_uom_code := p_item_attribute_tbl(item_count).uom_code;
                 l_eam_item_type := p_item_attribute_tbl(item_count).eam_item_type;
                 l_equipment_type := p_item_attribute_tbl(item_count).equipment_type;
                 l_valid_flag := p_item_attribute_tbl(item_count).valid_flag;
                 l_exists_flag := 'Y';
                 EXIT;
              END IF;
           END LOOP;
           IF l_valid_flag = 'N' then
              FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM');
              FND_MESSAGE.SET_TOKEN('INVENTORY_ITEM_ID',p_instance_rec.inventory_item_id);
              FND_MESSAGE.SET_TOKEN('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
              FND_MSG_PUB.Add;
	      RAISE fnd_api.g_exc_error;
           END IF;
        END IF;
        --
        -- if item does not exist in cache then get from database.
        IF l_exists_flag = 'N' THEN
           p_ins_count_rec.inv_count := p_ins_count_rec.inv_count + 1;
           p_item_attribute_tbl(p_ins_count_rec.inv_count).inventory_item_id := l_get_instance_rec.inventory_item_id;
           p_item_attribute_tbl(p_ins_count_rec.inv_count).organization_id := p_instance_rec.vld_organization_id;
           p_item_attribute_tbl(p_ins_count_rec.inv_count).master_organization_id := l_get_instance_rec.inv_master_organization_id;
           BEGIN
              SELECT comms_nl_trackable_flag
                    ,primary_uom_code
              INTO   l_trackable_flag
                    ,l_uom_code
              FROM   MTL_SYSTEM_ITEMS_B
              WHERE  inventory_item_id = l_get_instance_rec.inventory_item_id
              AND    organization_id = l_get_instance_rec.inv_master_organization_id
	          AND    enabled_flag = 'Y'
	          AND    nvl (start_date_active, sysdate) <= sysdate
	          AND    nvl (end_date_active, sysdate+1) > sysdate;
              --
	      p_item_attribute_tbl(p_ins_count_rec.inv_count).trackable_flag := l_trackable_flag;
	      p_item_attribute_tbl(p_ins_count_rec.inv_count).uom_code := l_uom_code;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'Y';
	   EXCEPTION
	      WHEN OTHERS THEN
                 p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'N';
		 FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM');
                 FND_MESSAGE.SET_TOKEN('INVENTORY_ITEM_ID',l_get_instance_rec.inventory_item_id);
                 FND_MESSAGE.SET_TOKEN('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
                 FND_MSG_PUB.Add;
		 RAISE fnd_api.g_exc_error;
           END;

           --
     	   BEGIN
             SELECT revision_qty_control_code
                   ,serial_number_control_code
                   ,lot_control_code
                   ,shelf_life_code
                   ,eam_item_type
                   ,equipment_type
               INTO l_rev_control
                   ,l_serial_control
                   ,l_lot_control
                   ,l_shelf_life_code
                   ,l_eam_item_type
                   ,l_equipment_type
               FROM MTL_SYSTEM_ITEMS_B
              WHERE inventory_item_id = l_get_instance_rec.inventory_item_id
                AND organization_id = p_instance_rec.vld_organization_id
                AND enabled_flag = 'Y'
                AND nvl (start_date_active, sysdate) <= sysdate
                AND nvl (end_date_active, sysdate+1) > sysdate;
              --
              p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'Y';
              p_item_attribute_tbl(p_ins_count_rec.inv_count).revision_control_code := l_rev_control;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).serial_number_control_code := l_serial_control;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).lot_control_code := l_lot_control;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).shelf_life_code := l_shelf_life_code;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).eam_item_type := l_eam_item_type;
              p_item_attribute_tbl(p_ins_count_rec.inv_count).equipment_type := l_equipment_type;
 	   EXCEPTION
	      WHEN OTHERS THEN
              p_item_attribute_tbl(p_ins_count_rec.inv_count).valid_flag := 'N';
              FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM');
              FND_MESSAGE.SET_TOKEN('INVENTORY_ITEM_ID',l_get_instance_rec.inventory_item_id);
              FND_MESSAGE.SET_TOKEN('INVENTORY_ORGANIZATION_ID',p_instance_rec.vld_organization_id);
              FND_MSG_PUB.Add;
              RAISE fnd_api.g_exc_error;
           END;
        END IF;

      -- Added following code for eam integration
      -- Check if the item is a rebuildable or an asset group

        IF csi_item_instance_vld_pvt.Check_for_eam_item
           (p_inventory_item_id  => p_instance_rec.inventory_item_id,
            p_organization_id    => p_instance_rec.vld_organization_id,
            p_eam_item_type      => l_eam_item_type)
        THEN
          l_eam_item := TRUE;
        END IF;

         IF (
             ((p_instance_rec.network_asset_flag IS NULL AND
               l_curr_instance_rec.network_asset_flag IS NOT NULL) OR
              (p_instance_rec.network_asset_flag <> fnd_api.g_miss_char AND
               NVL(p_instance_rec.network_asset_flag,fnd_api.g_miss_char) <>
               NVL(l_curr_instance_rec.network_asset_flag,fnd_api.g_miss_char)))
              OR
             ((p_instance_rec.maintainable_flag IS NULL AND
               l_curr_instance_rec.maintainable_flag IS NOT NULL) OR
              (p_instance_rec.maintainable_flag <> fnd_api.g_miss_char AND
               NVL(p_instance_rec.maintainable_flag,fnd_api.g_miss_char) <>
               NVL(l_curr_instance_rec.maintainable_flag,fnd_api.g_miss_char)))
              OR
             ((p_instance_rec.pn_location_id IS NULL AND
               l_curr_instance_rec.pn_location_id IS NOT NULL) OR
              (p_instance_rec.pn_location_id <> fnd_api.g_miss_num AND
               NVL(p_instance_rec.pn_location_id,fnd_api.g_miss_num) <>
               NVL(l_curr_instance_rec.pn_location_id,fnd_api.g_miss_num)))
              OR
             ((p_instance_rec.asset_criticality_code IS NULL AND
               l_curr_instance_rec.asset_criticality_code IS NOT NULL) OR
              (p_instance_rec.asset_criticality_code <> fnd_api.g_miss_char AND
               NVL(p_instance_rec.asset_criticality_code,fnd_api.g_miss_char) <>
               NVL(l_curr_instance_rec.asset_criticality_code,fnd_api.g_miss_char)))
              OR
             ((p_instance_rec.category_id IS NULL AND
               l_curr_instance_rec.category_id IS NOT NULL) OR
              (p_instance_rec.category_id <> fnd_api.g_miss_num AND
               NVL(p_instance_rec.category_id,fnd_api.g_miss_num) <>
               NVL(l_curr_instance_rec.category_id,fnd_api.g_miss_num)))
              OR
             ((p_instance_rec.equipment_gen_object_id IS NULL AND
               l_curr_instance_rec.equipment_gen_object_id IS NOT NULL) OR
              (p_instance_rec.equipment_gen_object_id <> fnd_api.g_miss_num AND
               NVL(p_instance_rec.equipment_gen_object_id,fnd_api.g_miss_num) <>
               NVL(l_curr_instance_rec.equipment_gen_object_id,fnd_api.g_miss_num)))
              OR
             ((p_instance_rec.linear_location_id IS NULL AND
               l_curr_instance_rec.linear_location_id IS NOT NULL) OR
              (p_instance_rec.linear_location_id <> fnd_api.g_miss_num AND
               NVL(p_instance_rec.linear_location_id,fnd_api.g_miss_num) <>
               NVL(l_curr_instance_rec.linear_location_id,fnd_api.g_miss_num)))
              OR
             ((p_instance_rec.operational_log_flag IS NULL AND
               l_curr_instance_rec.operational_log_flag IS NOT NULL) OR
              (p_instance_rec.operational_log_flag <> fnd_api.g_miss_char AND
               NVL(p_instance_rec.operational_log_flag,fnd_api.g_miss_char) <>
               NVL(l_curr_instance_rec.operational_log_flag,fnd_api.g_miss_char)))
              OR
             ((p_instance_rec.checkin_status IS NULL AND
               l_curr_instance_rec.checkin_status IS NOT NULL) OR
              (p_instance_rec.checkin_status <> fnd_api.g_miss_num AND
               NVL(p_instance_rec.checkin_status,fnd_api.g_miss_num) <>
               NVL(l_curr_instance_rec.checkin_status,fnd_api.g_miss_num)))
              OR
             ((p_instance_rec.supplier_warranty_exp_date IS NULL AND
               l_curr_instance_rec.supplier_warranty_exp_date IS NOT NULL) OR
              (p_instance_rec.supplier_warranty_exp_date <> fnd_api.g_miss_date AND
               NVL(p_instance_rec.supplier_warranty_exp_date,fnd_api.g_miss_date) <>
               NVL(l_curr_instance_rec.supplier_warranty_exp_date,fnd_api.g_miss_date)))
            )
         THEN
          IF l_eam_item
          THEN
           IF NOT eam_assetnumber_pub.validate_fields
            (p_current_organization_id    => p_instance_rec.vld_organization_id
            ,p_inventory_item_id          => l_get_instance_rec.inventory_item_id
            ,p_serial_number              => l_get_instance_rec.serial_number
            ,p_network_asset_flag         => p_instance_rec.network_asset_flag
            ,p_maintainable_flag          => p_instance_rec.maintainable_flag
            ,p_pn_location_id             => p_instance_rec.pn_location_id
            ,p_asset_criticality_code     => p_instance_rec.asset_criticality_code
            ,p_category_id                => p_instance_rec.category_id
            ,p_equipment_object_id        => p_instance_rec.equipment_gen_object_id
            ,p_eam_linear_id              => p_instance_rec.linear_location_id
            ,p_operational_log_flag       => p_instance_rec.operational_log_flag
            ,p_checkin_status             => p_instance_rec.checkin_status
            ,p_supplier_warranty_exp_date => p_instance_rec.supplier_warranty_exp_date
            ,p_owning_department_id       => NULL
            ,x_reason_failed              => l_reason_failed
            ,x_token                      => l_token
            )
           THEN
           -- FND_MESSAGE.SET_NAME('CSI', l_reason_failed); -- commented for bug 5351886
           -- FND_MSG_PUB.Add;                              -- commented for bug 5351886
            csi_gen_utility_pvt.put_line('Call to eam_assetnumber_pub.validate_fields failed with following reason');
            csi_gen_utility_pvt.put_line(l_reason_failed);
            RAISE FND_API.G_EXC_ERROR;
           END IF;
          ELSE
            FND_MESSAGE.SET_NAME('CSI', 'CSI_NON_EAM_ITEM');
            FND_MSG_PUB.Add;
            RAISE FND_API.G_EXC_ERROR;
          END IF;
    END IF;

    -- Validate System
    IF l_get_instance_rec.system_id IS NOT NULL AND
       l_get_instance_rec.system_id <> FND_API.G_MISS_NUM THEN
       IF NOT csi_Item_Instance_Vld_pvt.Is_Valid_System_id(
                        l_get_instance_rec.system_id) THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_SYSTEM_ID');
          FND_MESSAGE.SET_TOKEN('SYSTEM_ID',l_get_instance_rec.system_id);
          FND_MSG_PUB.Add;
          RAISE FND_API.G_EXC_ERROR;
       END IF;
    END IF;
    --
    -- Lot Number Validation
    -- srramakr Mandated Lot Number validation irrespective of the update.
    -- Irrespective whether the item instance is standalone or component, lot number create/validation
    -- will be performed. This is because unlike serial control, lot control does not depend on
    -- instance location.
    IF l_get_instance_rec.lot_number IS NOT NULL AND
       l_get_instance_rec.lot_number <> FND_API.G_MISS_CHAR
    THEN
       csi_gen_utility_pvt.put_line('Calling Validate_Lot_Number..');
       -- Added for Bug# 4011408
       csi_Item_Instance_Vld_pvt.Validate_Lot_Number
               (
                 p_inv_org_id               => p_instance_rec.vld_organization_id,
                 p_inv_item_id              => l_get_instance_rec.inventory_item_id ,
                 p_lot_number               => l_get_instance_rec.lot_number,
                 p_mfg_serial_number_flag   => l_get_instance_rec.mfg_serial_number_flag,
                 p_txn_rec                  => p_txn_rec,
                 p_creation_complete_flag   => l_get_instance_rec.creation_complete_flag,
                 l_return_value             => l_return_value,
                 p_lot_control_code         => l_lot_control
               );
       IF l_return_value = FALSE THEN
          RAISE fnd_api.g_exc_error;
       END IF;
       -- Commented for Bug# 4011408 since Validate_Lot_Number will do the basic validation
       --
       -- Validates the lot uniqueness and creates lot numbers in MLNs for manually created Instances
       -- Bug# 4011408
       csi_gen_utility_pvt.put_line('Calling Create_Lot routine in Update_Item_Instance API...');
       csi_item_instance_vld_pvt.Create_Lot
	  (
	    p_inv_org_id                 =>  p_instance_rec.vld_organization_id,
	    p_inv_item_id                =>  l_get_instance_rec.inventory_item_id,
	    p_lot_number                 =>  l_get_instance_rec.lot_number,
            p_shelf_life_code            =>  l_shelf_life_code,
	    p_instance_id                =>  l_get_instance_rec.instance_id,
	    l_return_value               =>  l_return_value
	  );
       IF l_return_value = FALSE THEN
	  RAISE fnd_api.g_exc_error;
       END IF;
    END IF;
    --

--start code fix for 6176621

    IF l_serial_control not in (2, 5) and l_part_or_serial_change THEN
 	       FND_MESSAGE.SET_NAME('CSI','CSI_API_CANNOT_UPD_SRL');
 	       FND_MSG_PUB.Add;
 	       RAISE FND_API.g_exc_error;
 	     END IF;

		--end code fix for 6176621

    -- Updating a Serial Number to NULL is not allowed.
    IF l_curr_instance_rec.serial_number IS NOT NULL AND
       p_instance_rec.serial_number IS NULL THEN
       FND_MESSAGE.SET_NAME('CSI','CSI_API_CANNOT_UPD_SRL_NULL');
       FND_MSG_PUB.Add;
       RAISE FND_API.G_EXC_ERROR;
    END IF;
    --
    -- Serial number changes for CMRO
    -- Need to handle NULL to NOT NULL Serial Number
    IF p_instance_rec.serial_number IS NOT NULL AND
       p_instance_rec.serial_number <> fnd_api.g_miss_char AND
       p_instance_rec.serial_number <> nvl(l_curr_instance_rec.serial_number,fnd_api.g_miss_char)
    THEN
       csi_gen_utility_pvt.put_line('before csi_item_instance_vld_pvt.validate_serial_for_upd');
       csi_item_instance_vld_pvt.validate_serial_for_upd(
          p_instance_rec       => l_get_instance_rec,
          p_txn_rec            => p_txn_rec,
          p_old_serial_number  => l_curr_instance_rec.serial_number,
          x_return_status      => l_return_status);

       IF l_return_status = fnd_api.g_ret_sts_error THEN
          RAISE fnd_api.g_exc_error;
       END IF;
    END IF;
    --
    -- Since serial_number can't be updated to NULL the OR condition has been changed.
    -- With this, if p_instance_rec has a valid value then we call the serial validation routines.
    --
    -- Earlier, we were by-passing Create_Serial routine for components. This reason being Create_serial
    -- routine was inserting the serial number into MSN with current status as 3 (In Stores) if the
    -- location type is INVENTORY. For components, location type could become INVENTORY if the parent
    -- is received into INV. Under these cases if the serial number is inserted with status 3 then
    -- it would become un-usable when transacted standalone.
    -- Since Create_Serial routine has been fixed and we always create the serial# with status 4, we can
    -- call this routine for components.
    -- Moreover serial number could get updated for components. Under these cases, create_serial should be
    -- called. Otherwise, INV and IB will go out of synch.
    --
    l_ins_flag := FND_API.G_FALSE;

    IF l_get_instance_rec.serial_number IS NOT NULL AND
       l_get_instance_rec.serial_number <> FND_API.G_MISS_CHAR
    THEN
       csi_gen_utility_pvt.put_line('Calling Create_Serial...');
       csi_item_instance_vld_pvt.Create_Serial (
                         p_inv_org_id         =>  p_instance_rec.vld_organization_id,
                         p_inv_item_id        =>  l_get_instance_rec.inventory_item_id,
                         p_serial_number      =>  l_get_instance_rec.serial_number,
                         p_mfg_srl_num_flag   =>  l_get_instance_rec.mfg_serial_number_flag,
                         p_location_type_code =>  l_get_instance_rec.location_type_code,
                         p_ins_flag           =>  l_ins_flag,
                         p_lot_number         =>  l_get_instance_rec.lot_number,
                         p_gen_object_id      =>  l_gen_object_id,
                         l_return_value       =>  l_return_value);

           IF l_eam_item AND
              l_equipment_type = 1
           THEN
              p_instance_rec.equipment_gen_object_id := l_gen_object_id;
           END IF;

           IF l_return_value = FALSE
           THEN
              RAISE fnd_api.g_exc_error;
           ELSE
              p_instance_rec.mfg_serial_number_flag := 'Y';
           END IF;

           IF l_eam_item
           THEN
               IF p_instance_rec.network_asset_flag IS NULL OR
                  p_instance_rec.network_asset_flag = fnd_api.g_miss_char
               THEN
                  l_network_asset_flag := l_curr_instance_rec.network_asset_flag;
               ELSE
                  l_network_asset_flag := p_instance_rec.network_asset_flag;
               END IF;

               IF p_instance_rec.pn_location_id IS NULL OR
                  p_instance_rec.pn_location_id = fnd_api.g_miss_num
               THEN
                  l_pn_location_id := l_curr_instance_rec.pn_location_id;
               ELSE
                  l_pn_location_id := p_instance_rec.pn_location_id;
               END IF;

            csi_gen_utility_pvt.put_line( 'Calling eam_common_utilities_pvt.update_logical_asset...');
            csi_gen_utility_pvt.put_line( 'Inventory_item_id is       :'||l_get_instance_rec.inventory_item_id);
            csi_gen_utility_pvt.put_line( 'Serial_number is           :'||l_get_instance_rec.serial_number);
            csi_gen_utility_pvt.put_line( 'Network_asset_flag is      :'||l_network_asset_flag);
            csi_gen_utility_pvt.put_line( 'Pn_location_id is          :'||l_pn_location_id);
			csi_gen_utility_pvt.put_line( 'Equipment_gen_object_id is :'||p_instance_rec.equipment_gen_object_id);
             eam_common_utilities_pvt.update_logical_asset
               ( p_inventory_item_id       => l_get_instance_rec.inventory_item_id
                ,p_serial_number           => l_get_instance_rec.serial_number
                ,p_network_asset_flag      => l_network_asset_flag
                ,p_pn_location_id          => l_pn_location_id
                ,p_equipment_gen_object_id => p_instance_rec.equipment_gen_object_id
                ,x_return_status           => x_return_status
                );

	         IF NOT (x_return_status = FND_API.G_RET_STS_SUCCESS)
			 THEN
			    csi_gen_utility_pvt.put_line( 'Error from eam_common_utilities_pvt.update_logical_asset...');
	            RAISE fnd_api.g_exc_error;
	         END IF;
           END IF;

    END IF;
    --
    -- Mandated serial# uniqueness check irrespective of any change made to Item Instance.
    -- Because of Serial Update requrement, Update_serial_number has been moved out the IF condition
    -- catering to Create_Serial.
    -- If this is a component item instance then we just validate the serial uniqueness
    --
    IF l_get_instance_rec.serial_number IS NOT NULL AND
       l_get_instance_rec.serial_number <> FND_API.G_MISS_CHAR
    THEN
       IF nvl(l_get_instance_rec.instance_usage_code,'$#$') <> 'IN_RELATIONSHIP' THEN
	  csi_gen_utility_pvt.put_line('Calling Validate_Srl_Num_for_Inst_Upd');
	  csi_Item_Instance_Vld_pvt.Validate_Srl_Num_for_Inst_Upd(
	     p_inv_org_id               => p_instance_rec.vld_organization_id,
	     p_inv_item_id              => l_get_instance_rec.inventory_item_id , -- l_get
	     p_serial_number            => l_get_instance_rec.serial_number,
	     p_mfg_serial_number_flag   => l_get_instance_rec.mfg_serial_number_flag, -- l_get
	     p_txn_rec                  => p_txn_rec,
	     p_location_type_code       => l_get_instance_rec.location_type_code,
	     p_srl_control_code         => l_serial_control,
	     p_instance_usage_code      => l_get_instance_rec.instance_usage_code,
	     p_instance_id              => p_instance_rec.instance_id,
	     l_return_value             => l_return_value);
	  IF l_return_value = FALSE THEN
 	     RAISE fnd_api.g_exc_error;
	  END IF;
       ELSE -- If this is a component then just validate serial uniqueness
	  csi_Item_Instance_Vld_pvt.Validate_ser_uniqueness
	    ( p_inv_org_id      => p_instance_rec.vld_organization_id
	     ,p_inv_item_id     => l_get_instance_rec.inventory_item_id
	     ,p_serial_number   => l_get_instance_rec.serial_number
	     ,p_instance_id     => p_instance_rec.instance_id
	     ,l_return_value    => l_return_value
	    );
	  IF l_return_value = FALSE THEN
	     --Commented out code for bug 7657438, no need to raise more than one error message
	     --fnd_message.set_name('CSI','CSI_FAIL_UNIQUENESS');
	     --fnd_msg_pub.add;
	     RAISE fnd_api.g_exc_error;
	  END IF;
       END IF;
    END IF;
    --
     -- Transaction sequencing check
     IF l_get_instance_rec.serial_number IS NOT NULL AND
        l_get_instance_rec.serial_number <> FND_API.G_MISS_CHAR AND
        l_ins_flag = FND_API.G_FALSE THEN
        l_check_instance_rec.instance_id := p_instance_rec.instance_id;
        l_check_instance_rec.inventory_item_id := l_get_instance_rec.inventory_item_id;
        l_check_instance_rec.serial_number := l_get_instance_rec.serial_number;
        l_check_instance_rec.lot_number := l_get_instance_rec.lot_number;
        l_check_instance_rec.last_txn_line_detail_id := p_instance_rec.last_txn_line_detail_id;
        csi_gen_utility_pvt.put_line('Calling Check_Prior_Txn');
        csi_Item_Instance_Vld_pvt.Check_Prior_Txn
                  (
                    p_instance_rec              => l_check_instance_rec
                   ,p_txn_rec                   => p_txn_rec
                   ,p_prior_txn_id              => l_prior_txn_id
                   ,p_mode                      => 'UPDATE'
                   ,x_return_status             => x_return_status
                  );
        IF NOT (x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
           RAISE fnd_api.g_exc_error;
        END IF;
     END IF;
     --
      -- Revision Number Validation
      IF nvl(l_get_instance_rec.instance_usage_code,'$#$') <> 'IN_RELATIONSHIP' THEN
         IF l_get_instance_rec.inventory_revision IS NOT NULL AND
            l_get_instance_rec.inventory_revision <> FND_API.G_MISS_CHAR
         THEN
            csi_gen_utility_pvt.put_line('Calling Update_Revision');
            csi_item_instance_vld_pvt.Update_Revision
               (
                 p_inv_item_id              => l_get_instance_rec.inventory_item_id ,
                 p_inv_org_id               => p_instance_rec.vld_organization_id,
                 p_revision                 => l_get_instance_rec.inventory_revision,
                 l_return_value             => l_return_value,
                 p_rev_control_code         => l_rev_control
               );

            IF l_return_value = FALSE THEN
               RAISE fnd_api.g_exc_error;
            END IF;
         END IF;
      END IF;
      --quantity validation
        IF ((p_instance_rec.quantity <> FND_API.G_MISS_NUM ) AND
            (p_instance_rec.quantity IS NOT NULL ))THEN
           IF p_instance_rec.quantity <> l_curr_instance_rec.quantity THEN
             IF NOT csi_Item_Instance_Vld_pvt.Is_Quantity_Valid(
                         p_instance_id         => p_instance_rec.instance_id,
                         p_inv_organization_id => p_instance_rec.vld_organization_id,
                         p_quantity            => l_get_instance_rec.quantity ,
                         p_serial_control_code => l_serial_control,
                         p_location_type_code  => l_get_instance_rec.location_type_code,
                         p_csi_txn_type_id     => p_txn_rec.transaction_type_id,
                         p_current_qty         => l_curr_instance_rec.quantity,
                         p_flag                => 'UPDATE'
                         )
             THEN
                    RAISE fnd_api.g_exc_error;
             END IF;
           END IF;
        END IF;
        IF nvl(l_get_instance_rec.instance_usage_code,'$#$') <> 'IN_RELATIONSHIP' THEN
           IF p_instance_rec.vld_organization_id <> l_cur_instance_rec.last_vld_organization_id
           THEN
              csi_item_instance_vld_pvt.validate_org_dependent_params
              ( p_instance_rec   => l_get_instance_rec,
                p_txn_rec        => p_txn_rec,
                l_return_value   => l_return_value
              );

              IF l_return_value = FALSE
              THEN
                 FND_MESSAGE.Set_Name('CSI', 'CSI_CHANGE_VLD_ORG');
                 FND_MSG_PUB.ADD;
                 RAISE FND_API.G_EXC_ERROR;
              END IF;
           END IF;
        END IF;

      --Unit of measure validation
        IF ((p_instance_rec.unit_of_measure <> FND_API.G_MISS_CHAR) AND
            (p_instance_rec.unit_of_measure IS NOT NULL)) THEN
            IF ((p_instance_rec.unit_of_measure <> l_curr_instance_rec.unit_of_measure)
             AND (p_instance_rec.unit_of_measure <> l_uom_code)) THEN
              csi_item_instance_vld_pvt.Is_Valid_Uom
                 (
                   p_inv_org_id               => l_get_instance_rec.inv_master_organization_id, -- srramakr
                   p_inv_item_id              => l_get_instance_rec.inventory_item_id , --l_get
                   p_uom_code                 => p_instance_rec.unit_of_measure,
                   p_quantity                 => l_get_instance_rec.quantity, --l_get
                   p_creation_complete_flag   => l_get_instance_rec.creation_complete_flag, --l_get
                   l_return_value             => l_return_value
                 );
               IF l_return_value = FALSE THEN
                   RAISE FND_API.G_EXC_ERROR;
               END IF;
             END IF;
         END IF;

       --validation for accounting classification_code if
       --p_instance_rec.accounting_class_code is NULL OR <> FND_API.G_MISS_CHAR
       IF  ((p_instance_rec.accounting_class_code IS NULL) OR
            (p_instance_rec.accounting_class_code <> FND_API.G_MISS_CHAR)) THEN
            csi_item_instance_vld_pvt.get_valid_acct_class
                               ( p_instance_id            => p_instance_rec.instance_id
                                ,p_curr_acct_class_code   => l_get_instance_rec.accounting_class_code
                                ,p_loc_type_code          => l_get_instance_rec.location_type_code
                                ,x_acct_class_code        => l_acct_class_code
                               );
          IF   (p_instance_rec.accounting_class_code IS NULL)
          THEN
          -- The following code has been commented for bug 4906588
          /*
             IF l_eam_item
             THEN
                p_instance_rec.accounting_class_code := 'ASSET';
             ELSE
            */
                p_instance_rec.accounting_class_code  := l_acct_class_code;
          --   END IF;
          ELSE
            IF (p_instance_rec.accounting_class_code <> l_acct_class_code) THEN
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ACCOUNT_CLASS');
                  FND_MSG_PUB.Add;
                  RAISE FND_API.G_EXC_ERROR;
            END IF;
          END IF; -- not null

       END IF; -- not G_MISS

       --if the quantity is changing from something to '0' then
       --we change end_date to sysdate and status to 'expired'
         IF (p_instance_rec.quantity = 0 AND l_curr_instance_rec.quantity <> 0) THEN
             -- Bug 3804960 Need to honor the passed active_end_date
             IF p_instance_rec.active_end_date IS NULL OR
                p_instance_rec.active_end_date = FND_API.G_MISS_DATE OR
                p_instance_rec.active_end_date > SYSDATE THEN
                p_instance_rec.active_end_date := SYSDATE;
              END IF;
              -- End of 3804960
              -- p_instance_rec.instance_status_id := 1; -- Commented for bug 3179587
              -- The following changes were made for bug 3179587.
              -- When update_item_instance is called with a status that has terminated_flag set to 'Y'
              -- then the API should assign passed status. If the passed status doesn't have
              -- terminated_flag set to 'Y', then by default the status will be updated with an expired status.
               IF p_instance_rec.instance_status_id IS NOT NULL AND
                  p_instance_rec.instance_status_id <> fnd_api.g_miss_num AND
                  (CSI_Item_Instance_vld_pvt.val_inst_ter_flag
                   (p_instance_rec.instance_status_id))
               THEN
                  NULL;
               ELSE
                 p_instance_rec.instance_status_id := 1;
               END IF;
         END IF;

       -- if the quantity is changing from '0' to '0' or fnd_api.g_miss_num, and at the same time
       -- if also the end_date is changing to 'NULL' or ' > SYSDATE', then the instance cannot be un-expired
         IF (l_curr_instance_rec.quantity = 0)
          AND ((p_instance_rec.quantity = 0) OR (p_instance_rec.quantity = FND_API.G_MISS_NUM))
          AND ((p_instance_rec.active_end_date IS NULL) OR (p_instance_rec.active_end_date > SYSDATE))
         THEN
              FND_MESSAGE.Set_Name('CSI', 'CSI_API_CANNOT_UNEXPIRE');
              FND_MSG_PUB.ADD;
              RAISE FND_API.G_EXC_ERROR;
         END IF;

       -- added by rtalluri for Bugfix 2318211 on 04/16/02
       --if the end_date is changing from sysdate or a past date to 'null' or a future date,
       -- and if instance status is expired then change the status to null
         IF ((l_curr_instance_rec.active_end_date IS NOT NULL) AND
             (l_curr_instance_rec.active_end_date <= SYSDATE)) THEN
            IF ((p_instance_rec.active_end_date IS NULL ) OR
               ((p_instance_rec.active_end_date > SYSDATE) AND
                (p_instance_rec.active_end_date <> FND_API.G_MISS_DATE))) THEN
               IF (p_instance_rec.instance_status_id = NULL OR
                   p_instance_rec.instance_status_id = FND_API.G_MISS_NUM) THEN
                   p_instance_rec.instance_status_id := 510;
               ELSIF
                  (p_instance_rec.instance_status_id IS NOT NULL AND
                   p_instance_rec.instance_status_id <> FND_API.G_MISS_NUM)
               THEN
                    IF (CSI_Item_Instance_vld_pvt.val_inst_ter_flag   --added first change
                                (l_get_instance_rec.instance_status_id))
                    THEN
                        FND_MESSAGE.Set_Name('CSI', 'CSI_API_INVALID_STATUS');
                        FND_MSG_PUB.ADD;
                        RAISE FND_API.G_EXC_ERROR;
                    END IF;
               END IF;
            END IF;
         END IF;
       -- end of addition by rtalluri for Bugfix 2318211 on 04/16/02

--validation for the instance condition id
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         If ((p_instance_rec.instance_condition_id is not null) AND
             (p_instance_rec.instance_condition_id <> FND_API.G_MISS_NUM) AND
             (p_instance_rec.instance_condition_id <> l_curr_instance_rec.instance_condition_id))
         THEN
            if p_generic_id_tbl.count > 0 then
               For gen_count in p_generic_id_tbl.FIRST .. p_generic_id_tbl.LAST
               Loop
                  if p_generic_id_tbl(gen_count).generic_id = p_instance_rec.instance_condition_id AND
                     p_generic_id_tbl(gen_count).id_type = 'INS_CONDITION' then
                     l_valid_flag := p_generic_id_tbl(gen_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  end if;
               End Loop;
               --
               if l_valid_flag <> 'Y' then
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ITEM_CONDITION');
                  FND_MESSAGE.SET_TOKEN('INSTANCE_CONDITION_ID',p_instance_rec.instance_condition_id);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               end if;
            end if;
            --
	       if l_exists_flag = 'N' then
               p_ins_count_rec.generic_count := p_ins_count_rec.generic_count + 1;
               p_generic_id_tbl(p_ins_count_rec.generic_count).generic_id := p_instance_rec.instance_condition_id;
               p_generic_id_tbl(p_ins_count_rec.generic_count).id_type := 'INS_CONDITION';
                        csi_item_instance_vld_pvt.Is_Valid_Condition
                             (
                               p_instance_condition_id  => p_instance_rec.instance_condition_id,
                               p_creation_complete_flag => l_get_instance_rec.creation_complete_flag, -- l_get
                               l_return_value           => l_return_value
                              );
 	                  IF l_return_value = FALSE THEN
                         p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'N';
		                 RAISE fnd_api.g_exc_error;
                       ELSE
                         p_generic_id_tbl(p_ins_count_rec.generic_count).valid_flag := 'Y';
	                END IF;
           end if;
         end if;
         --
        OPEN party_owner_rec(p_instance_rec.instance_id);
        FETCH party_owner_rec INTO l_party_owner_rec;
              IF NOT (csi_item_instance_vld_pvt.Validate_Uniqueness
                                             (p_instance_rec     => l_get_instance_rec,
                                              p_party_rec        => l_party_owner_rec,
                                              p_srl_control_code => l_serial_control,
                                              p_csi_txn_type_id  => p_txn_rec.transaction_type_id))
              THEN
                  RAISE FND_API.G_EXC_ERROR;
              END IF;
        CLOSE party_owner_rec;

--validation for the instance type
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_instance_rec.instance_type_code <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.instance_type_code IS NOT NULL) AND
             (p_instance_rec.instance_type_code <> l_curr_instance_rec.instance_type_code)) THEN
            If p_lookup_tbl.count > 0 then
               For lookup_count in p_lookup_tbl.FIRST .. p_lookup_tbl.LAST
               Loop
                  if p_lookup_tbl(lookup_count).lookup_type = 'INSTANCE_TYPE' AND
                     p_lookup_tbl(lookup_count).lookup_code = p_instance_rec.instance_type_code then
                     l_valid_flag := p_lookup_tbl(lookup_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  end if;
               End Loop;
               --
               if l_valid_flag <> 'Y' then
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_INSTANCE_TYPE');
                  FND_MESSAGE.SET_TOKEN('INSTANCE_TYPE_CODE',p_instance_rec.instance_type_code);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               end if;
            End if;
            --
            If l_exists_flag <> 'Y' then
               p_ins_count_rec.lookup_count := p_ins_count_rec.lookup_count  + 1;
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_type := 'INSTANCE_TYPE';
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_code := p_instance_rec.instance_type_code;
                       IF NOT csi_Item_Instance_Vld_pvt.Is_Valid_Instance_Type(
                                         p_instance_rec.instance_type_code) THEN

                          p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'N';
                          RAISE fnd_api.g_exc_error;
                       ELSE
                          p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'Y';
                       END IF;
             End if;
          END IF;

--validation for the instance usage code
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_instance_rec.instance_usage_code <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.instance_usage_code IS NOT NULL) AND
             (p_instance_rec.instance_usage_code <> l_curr_instance_rec.instance_usage_code)) THEN
            If p_lookup_tbl.count > 0 then
               For lookup_count in p_lookup_tbl.FIRST .. p_lookup_tbl.LAST
               Loop
                  if p_lookup_tbl(lookup_count).lookup_type = 'INSTANCE_USAGE' AND
                     p_lookup_tbl(lookup_count).lookup_code = p_instance_rec.instance_usage_code then
                     l_valid_flag := p_lookup_tbl(lookup_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  end if;
               End Loop;
               --
               if l_valid_flag <> 'Y' then
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_USAGE_CODE');
                  FND_MESSAGE.SET_TOKEN('INSTANCE_USAGE_CODE',p_instance_rec.instance_usage_code);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               end if;
            End if;
            --
            If l_exists_flag <> 'Y' then
               p_ins_count_rec.lookup_count := p_ins_count_rec.lookup_count  + 1;
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_type := 'INSTANCE_USAGE';
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_code := p_instance_rec.instance_usage_code;
                     IF NOT csi_Item_Instance_Vld_pvt.Valid_Inst_Usage_Code(
                                         p_instance_rec.instance_usage_code) THEN
                        p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'N';
                        RAISE fnd_api.g_exc_error;
                     ELSE
                        p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'Y';
                     END IF;
            END IF;
         END IF;

   -- Addition of columns for FA Integration
   --validation for the operational status
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_instance_rec.operational_status_code IS NOT NULL) AND
             (p_instance_rec.operational_status_code <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.operational_status_code <> l_curr_instance_rec.operational_status_code)
             )
         THEN
            IF p_lookup_tbl.count > 0 THEN
               For lookup_count in p_lookup_tbl.FIRST .. p_lookup_tbl.LAST
               LOOP
                  IF p_lookup_tbl(lookup_count).lookup_type = 'OPERATIONAL_STATUS' AND
                     p_lookup_tbl(lookup_count).lookup_code = p_instance_rec.operational_status_code
                  THEN
                     l_valid_flag := p_lookup_tbl(lookup_count).valid_flag;
                     l_exists_flag := 'Y';
                     exit;
                  END IF;
               End Loop;
               --
               if l_valid_flag <> 'Y' then
                  FND_MESSAGE.SET_NAME('CSI','CSI_OPERATIONAL_STATUS_CODE');
                  FND_MESSAGE.SET_TOKEN('OPERATIONAL_STATUS_CODE',p_instance_rec.operational_status_code);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               end if;
            End if;
            --
            IF l_exists_flag <> 'Y' THEN
               p_ins_count_rec.lookup_count := p_ins_count_rec.lookup_count  + 1;
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_type := 'OPERATIONAL_STATUS';
               p_lookup_tbl(p_ins_count_rec.lookup_count).lookup_code := p_instance_rec.operational_status_code;
               IF NOT csi_Item_Instance_Vld_pvt.Valid_operational_status(
                         p_instance_rec.operational_status_code) THEN
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'N';
                  RAISE fnd_api.g_exc_error;
               ELSE
                  p_lookup_tbl(p_ins_count_rec.lookup_count).valid_flag := 'Y';
               END IF;
            END IF;
         ELSE
          IF p_instance_rec.operational_status_code IS NULL
          THEN
             p_instance_rec.operational_status_code:='NOT_USED';
          END IF;
         END IF;

 -- Following code has been added for operational_status_code
 -- If owner is Internal then
      l_int_party_id := csi_datastructures_pub.g_install_param_rec.internal_party_id;
      --
      IF l_int_party_id IS NULL THEN
        select internal_party_id
        into l_int_party_id
        from csi_install_parameters;

        IF l_int_party_id IS NULL THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_API_UNINSTALLED_PARAMETER');
         FND_MSG_PUB.ADD;
         RAISE FND_API.G_EXC_ERROR;
        END IF;
      END IF;

         IF p_instance_rec.owner_party_id IS NULL OR
            p_instance_rec.owner_party_id = fnd_api.g_miss_num
         THEN
             SELECT owner_party_id
               INTO p_instance_rec.owner_party_id
               FROM csi_item_instances
              WHERE instance_id=p_instance_rec.instance_id;
         END IF;

         IF p_instance_rec.owner_party_id = l_int_party_id
         THEN
            IF    l_get_instance_rec.location_type_code='INVENTORY'
            THEN
              IF  (p_instance_rec.operational_status_code IS NOT NULL AND
                   p_instance_rec.operational_status_code <> fnd_api.g_miss_char AND
                   p_instance_rec.operational_status_code <> l_curr_instance_rec.operational_status_code) --Added for bug 9275973
              AND l_curr_instance_rec.operational_status_code IN ('NOT_USED','INSTALLED','IN_SERVICE')
              AND p_instance_rec.operational_status_code <> 'OUT_OF_SERVICE'
              THEN
                  p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND l_curr_instance_rec.operational_status_code = 'OUT_OF_SERVICE'
              AND p_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE')
              THEN
                  p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN
                    ('NOT_USED','OUT_OF_SERVICE','INSTALLED','IN_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code IN ('WIP','IN_TRANSIT')
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'NOT_USED'
              AND   l_curr_instance_rec.operational_status_code = 'NOT_USED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'OUT_OF_SERVICE'
              AND   l_curr_instance_rec.operational_status_code = 'OUT_OF_SERVICE'
              THEN
                    p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code ='VENDOR_SITE'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'NOT_USED'
              AND   l_curr_instance_rec.operational_status_code IN ('NOT_USED','OUT_OF_SERVICE')
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code ='HZ_LOCATIONS'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
              AND   l_curr_instance_rec.operational_status_code IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;  --HZ_PARTY_SITES
            ELSIF l_get_instance_rec.location_type_code ='HZ_PARTY_SITES'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
              AND   l_curr_instance_rec.operational_status_code IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE')
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code = 'PROJECT'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'NOT_USED'
              AND   l_curr_instance_rec.operational_status_code = 'NOT_USED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'OUT_OF_SERVICE'
              AND   l_curr_instance_rec.operational_status_code = 'OUT_OF_SERVICE'
              THEN
                    p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('OUT_OF_SERVICE','NOT_USED')
              AND   l_curr_instance_rec.operational_status_code = 'INSTALLED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE','INSTALLED'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            END IF;
         ELSE -- External party
            IF    l_get_instance_rec.location_type_code='INVENTORY'
            THEN
              IF  (p_instance_rec.operational_status_code IS NOT NULL AND
                   p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND l_curr_instance_rec.operational_status_code IN ('NOT_USED','INSTALLED','IN_SERVICE','OUT_OF_SERVICE')
              AND p_instance_rec.operational_status_code NOT IN ('OUT_OF_SERVICE','NOT_USED')
              THEN
                  p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN
                    ('NOT_USED','OUT_OF_SERVICE','INSTALLED','IN_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              END IF;
            ELSIF l_get_instance_rec.location_type_code IN ('WIP','IN_TRANSIT')
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'NOT_USED'
              AND   l_curr_instance_rec.operational_status_code = 'NOT_USED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'OUT_OF_SERVICE'
              AND   l_curr_instance_rec.operational_status_code = 'OUT_OF_SERVICE'
              THEN
                    p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code ='VENDOR_SITE'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'NOT_USED'
              AND   l_curr_instance_rec.operational_status_code IN ('NOT_USED','OUT_OF_SERVICE')
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code = 'PROJECT'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'NOT_USED'
              AND   l_curr_instance_rec.operational_status_code = 'NOT_USED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code <> 'OUT_OF_SERVICE'
              AND   l_curr_instance_rec.operational_status_code = 'OUT_OF_SERVICE'
              THEN
                    p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('OUT_OF_SERVICE','NOT_USED')
              AND   l_curr_instance_rec.operational_status_code = 'INSTALLED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE','INSTALLED'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code ='HZ_PARTY_SITES'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
              AND   l_curr_instance_rec.operational_status_code ='NOT_USED'
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('INSTALLED','IN_SERVICE','NOT_USED')
              AND   l_curr_instance_rec.operational_status_code ='OUT_OF_SERVICE'
              THEN
                    p_instance_rec.operational_status_code := 'OUT_OF_SERVICE';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','OUT_OF_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            ELSIF l_get_instance_rec.location_type_code ='HZ_LOCATIONS'
            THEN
              IF    (p_instance_rec.operational_status_code IS NOT NULL AND
                     p_instance_rec.operational_status_code <> fnd_api.g_miss_char)
              AND   p_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
              AND   l_curr_instance_rec.operational_status_code IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE')
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              ELSIF l_curr_instance_rec.operational_status_code IS NULL OR
                   (l_curr_instance_rec.operational_status_code NOT IN ('NOT_USED','INSTALLED','OUT_OF_SERVICE','IN_SERVICE'))
              THEN
                    p_instance_rec.operational_status_code := 'NOT_USED';
              END IF;
            END IF;
         END IF;



         IF ((p_instance_rec.purchase_currency_code IS NOT NULL) AND
             (p_instance_rec.purchase_currency_code <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.purchase_currency_code <> nvl(l_curr_instance_rec.purchase_currency_code,'$$##$$'))
             )
         THEN
           p_instance_rec.purchase_currency_code := UPPER(p_instance_rec.purchase_currency_code);
           IF NOT csi_item_instance_vld_pvt.valid_currency_code
                 (p_currency_code => p_instance_rec.purchase_currency_code)
           THEN
              RAISE fnd_api.g_exc_error;
           END IF;
         END IF;

         IF ((p_instance_rec.payables_currency_code IS NOT NULL) AND
             (p_instance_rec.payables_currency_code <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.payables_currency_code <> nvl(l_curr_instance_rec.payables_currency_code,'$$##$$'))
             )
         THEN
           p_instance_rec.payables_currency_code := UPPER(p_instance_rec.payables_currency_code);
           IF NOT csi_item_instance_vld_pvt.valid_currency_code
                 (p_currency_code => p_instance_rec.payables_currency_code)
           THEN
              RAISE fnd_api.g_exc_error;
           END IF;
         END IF;

         IF ((p_instance_rec.sales_currency_code IS NOT NULL) AND
             (p_instance_rec.sales_currency_code <> FND_API.G_MISS_CHAR) AND
             (p_instance_rec.sales_currency_code <> nvl(l_curr_instance_rec.sales_currency_code,'$$##$$'))
             )
         THEN
           p_instance_rec.sales_currency_code := UPPER(p_instance_rec.sales_currency_code);
           IF NOT csi_item_instance_vld_pvt.valid_currency_code
                 (p_currency_code => p_instance_rec.sales_currency_code)
           THEN
              RAISE fnd_api.g_exc_error;
           END IF;
         END IF;
         IF (
             ((l_curr_instance_rec.purchase_currency_code IS NOT NULL AND
               l_curr_instance_rec.purchase_unit_price IS NOT NULL) AND
              ((p_instance_rec.purchase_currency_code IS NULL AND
                p_instance_rec.purchase_unit_price = FND_API.G_MISS_NUM) OR
               (p_instance_rec.purchase_unit_price IS NULL AND
                p_instance_rec.purchase_currency_code = FND_API.G_MISS_CHAR))
              )
               OR
             (
              (l_curr_instance_rec.purchase_currency_code IS NULL AND
               l_curr_instance_rec.purchase_unit_price IS NULL) AND
             (((p_instance_rec.purchase_currency_code IS NOT NULL AND
                p_instance_rec.purchase_currency_code <> FND_API.G_MISS_CHAR) AND
               (p_instance_rec.purchase_unit_price IS NULL OR
                p_instance_rec.purchase_unit_price = FND_API.G_MISS_NUM)) OR
              ((p_instance_rec.purchase_currency_code IS NULL OR
                p_instance_rec.purchase_currency_code = FND_API.G_MISS_CHAR) AND
               (p_instance_rec.purchase_unit_price IS NOT NULL AND
                p_instance_rec.purchase_unit_price <> FND_API.G_MISS_NUM)))
               )
            )
            OR
            (
             ((l_curr_instance_rec.payables_currency_code IS NOT NULL AND
               l_curr_instance_rec.payables_unit_price IS NOT NULL) AND
              ((p_instance_rec.payables_currency_code IS NULL AND
                p_instance_rec.payables_unit_price = FND_API.G_MISS_NUM) OR
               (p_instance_rec.payables_unit_price IS NULL AND
                p_instance_rec.payables_currency_code = FND_API.G_MISS_CHAR))
              )
               OR
             (
              (l_curr_instance_rec.payables_currency_code IS NULL AND
               l_curr_instance_rec.payables_unit_price IS NULL) AND
             (((p_instance_rec.payables_currency_code IS NOT NULL AND
                p_instance_rec.payables_currency_code <> FND_API.G_MISS_CHAR) AND
               (p_instance_rec.payables_unit_price IS NULL OR
                p_instance_rec.payables_unit_price = FND_API.G_MISS_NUM)) OR
              ((p_instance_rec.payables_currency_code IS NULL OR
                p_instance_rec.payables_currency_code = FND_API.G_MISS_CHAR) AND
               (p_instance_rec.payables_unit_price IS NOT NULL AND
                p_instance_rec.payables_unit_price <> FND_API.G_MISS_NUM)))
               )
            )
            OR
            (
             ((l_curr_instance_rec.sales_currency_code IS NOT NULL AND
               l_curr_instance_rec.sales_unit_price IS NOT NULL) AND
              ((p_instance_rec.sales_currency_code IS NULL AND
                p_instance_rec.sales_unit_price = FND_API.G_MISS_NUM) OR
               (p_instance_rec.sales_unit_price IS NULL AND
                p_instance_rec.sales_currency_code = FND_API.G_MISS_CHAR))
              )
               OR
             (
              (l_curr_instance_rec.sales_currency_code IS NULL AND
               l_curr_instance_rec.sales_unit_price IS NULL) AND
             (((p_instance_rec.sales_currency_code IS NOT NULL AND
                p_instance_rec.sales_currency_code <> FND_API.G_MISS_CHAR) AND
               (p_instance_rec.sales_unit_price IS NULL OR
                p_instance_rec.sales_unit_price = FND_API.G_MISS_NUM)) OR
              ((p_instance_rec.sales_currency_code IS NULL OR
                p_instance_rec.sales_currency_code = FND_API.G_MISS_CHAR) AND
               (p_instance_rec.sales_unit_price IS NOT NULL AND
                p_instance_rec.sales_unit_price <> FND_API.G_MISS_NUM)))
               )
            )
         THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_NO_PRICE_OR_CODE');
             FND_MSG_PUB.Add;
             RAISE fnd_api.g_exc_error;
         END IF;
       -- End addition of columns for FA Integration

       -- Start of bug fix 2151750 by sk on 02/04/02

       -- If location_type_code has been changing from something to INVENTORY
       -- then check if this record has been existing as a subject in csi_ii_relationships
       -- of COMPONENT-OF relationship_type_code and if exists then if
       -- l_get_instance_rec.instance_usage_code is not equal to
       -- IN_RELATIONSHIP then raise an error.

       IF l_curr_instance_rec.location_type_code <> 'INVENTORY' AND
          p_instance_rec.location_type_code = 'INVENTORY'
       THEN
          l_temp_rec := null;
          BEGIN
             SELECT 'x'
             INTO   l_temp_rec
             FROM   csi_ii_relationships
             WHERE  relationship_type_code = 'COMPONENT-OF'
             AND    subject_id = p_instance_rec.instance_id
             AND    (active_end_date IS NULL OR active_end_date > SYSDATE);
          EXCEPTION
            WHEN OTHERS THEN
                   null;
          END;

             IF ( l_get_instance_rec.instance_usage_code <> 'IN_RELATIONSHIP' OR
                l_get_instance_rec.instance_usage_code IS NULL OR
                l_get_instance_rec.instance_usage_code = fnd_api.g_miss_char) AND
                l_temp_rec IS NOT NULL
             THEN
                   FND_MESSAGE.Set_Name('CSI', 'CSI_INVALID_USAGE_CODE');
                   FND_MSG_PUB.ADD;
                   RAISE fnd_api.g_exc_error;
             END IF;


       END IF;


        -- The following code has been added to disallow updating instance_usage_code
        -- if the instance is in IN-RELATIONSHIP.
        IF l_curr_instance_rec.instance_usage_code = 'IN_RELATIONSHIP' AND
           ( ( p_instance_rec.instance_usage_code <> 'IN_RELATIONSHIP' AND
               p_instance_rec.instance_usage_code IS NOT NULL AND
               p_instance_rec.instance_usage_code <> fnd_api.g_miss_char)
            OR
		     ( p_instance_rec.instance_usage_code IS NULL)
		    )
        THEN
                l_temp_rec1 := NULL;
                BEGIN
                   SELECT 'x'
                   INTO   l_temp_rec1
                   FROM   csi_ii_relationships
                   WHERE  relationship_type_code = 'COMPONENT-OF'
                   AND    subject_id = p_instance_rec.instance_id
                   AND    (active_end_date IS NULL OR active_end_date > SYSDATE);

                   IF l_temp_rec1 IS NOT NULL
                   THEN
                      FND_MESSAGE.Set_Name('CSI', 'CSI_MODIFY_USAGE_CODE');
                      FND_MESSAGE.SET_TOKEN('INSTANCE_ID',p_instance_rec.instance_id);
                      FND_MSG_PUB.ADD;
                      RAISE fnd_api.g_exc_error;
                   END IF;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    NULL;
                END;
        END IF;
               -- End of bug fix 2151750 by sk on 02/04/02

     --location validation
     IF (
         (
          ((p_instance_rec.location_type_code IS NULL) AND (l_curr_instance_rec.location_type_code IS NOT NULL))
            OR
          (p_instance_rec.location_type_code <> FND_API.G_MISS_CHAR
            AND NVL(p_instance_rec.location_type_code, FND_API.G_MISS_CHAR) <> NVL(l_curr_instance_rec.location_type_code, FND_API.G_MISS_CHAR))
         )
         OR
         (
          ((p_instance_rec.location_id IS NULL) AND (l_curr_instance_rec.location_id IS NOT NULL))
            OR
          (p_instance_rec.location_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.location_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.location_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.install_location_type_code IS NULL) AND (l_curr_instance_rec.install_location_type_code IS NOT NULL))
            OR
          (p_instance_rec.install_location_type_code <> FND_API.G_MISS_CHAR
            AND NVL(p_instance_rec.install_location_type_code, FND_API.G_MISS_CHAR) <> NVL(l_curr_instance_rec.install_location_type_code, FND_API.G_MISS_CHAR))
         )
         OR
         (
          ((p_instance_rec.install_location_id IS NULL) AND (l_curr_instance_rec.install_location_id IS NOT NULL))
            OR
          (p_instance_rec.install_location_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.install_location_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.install_location_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.inv_organization_id IS NULL) AND (l_curr_instance_rec.inv_organization_id IS NOT NULL))
            OR
          (p_instance_rec.inv_organization_id  <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.inv_organization_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.inv_organization_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.inv_subinventory_name IS NULL) AND (l_curr_instance_rec.inv_subinventory_name IS NOT NULL))
            OR
          (p_instance_rec.inv_subinventory_name <> FND_API.G_MISS_CHAR
            AND NVL(p_instance_rec.inv_subinventory_name, FND_API.G_MISS_CHAR)  <> NVL(l_curr_instance_rec.inv_subinventory_name, FND_API.G_MISS_CHAR))
         )
         OR
         (
          ((p_instance_rec.inv_locator_id IS NULL) AND (l_curr_instance_rec.inv_locator_id IS NOT NULL))
            OR
          (p_instance_rec.inv_locator_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.inv_locator_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.inv_locator_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.pa_project_id IS NULL) AND (l_curr_instance_rec.pa_project_id IS NOT NULL))
            OR
          (p_instance_rec.pa_project_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.pa_project_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.pa_project_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.pa_project_task_id IS NULL) AND (l_curr_instance_rec.pa_project_task_id is not null))
            OR
          (p_instance_rec.pa_project_task_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.pa_project_task_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.pa_project_task_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.in_transit_order_line_id IS NULL) AND (l_curr_instance_rec.in_transit_order_line_id IS NOT NULL))
            OR
          (p_instance_rec.in_transit_order_line_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.in_transit_order_line_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.in_transit_order_line_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.wip_job_id IS NULL) AND (l_curr_instance_rec.wip_job_id IS NOT NULL))
            OR
          (p_instance_rec.wip_job_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.wip_job_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.wip_job_id, FND_API.G_MISS_NUM))
         )
         OR
         (
          ((p_instance_rec.po_order_line_id IS NULL) AND (l_curr_instance_rec.po_order_line_id IS NOT NULL))
            OR
          (p_instance_rec.po_order_line_id <> FND_API.G_MISS_NUM
            AND NVL(p_instance_rec.po_order_line_id, FND_API.G_MISS_NUM) <> NVL(l_curr_instance_rec.po_order_line_id, FND_API.G_MISS_NUM))
         )
        ) THEN

--bring has parent logic here
             IF csi_Item_Instance_Vld_Pvt.Instance_has_Parent(
                                            p_instance_id   =>  p_instance_rec.instance_id
                                                              ) THEN
                   FND_MESSAGE.Set_Name('CSI', 'CSI_API_INSTANCE_HAS_PARENT');
                   FND_MSG_PUB.ADD;
                   RAISE fnd_api.g_exc_error;
             END IF;
             -- Validate Location ID
             IF l_get_instance_rec.location_type_code IS NULL OR
                l_get_instance_rec.location_type_code = FND_API.G_MISS_CHAR OR
                l_get_instance_rec.location_id IS NULL OR
                l_get_instance_rec.location_id = FND_API.G_MISS_NUM THEN
		FND_MESSAGE.SET_NAME('CSI','CSI_API_LOCATION_NOT_VALID');
		FND_MSG_PUB.ADD;
		RAISE fnd_api.g_exc_error;
             END IF;
             --
	     l_exists_flag := 'N';
	     l_valid_flag := 'Y';
	     IF p_location_tbl.count > 0 THEN
		For loc_row in p_location_tbl.FIRST .. p_location_tbl.LAST
		Loop
		   IF p_location_tbl(loc_row).location_type_code = l_get_instance_rec.location_type_code AND
		      p_location_tbl(loc_row).location_id = l_get_instance_rec.location_id THEN
		      l_exists_flag := 'Y';
		      l_valid_flag := p_location_tbl(loc_row).valid_flag;
		      EXIT;
		   END IF;
		End Loop;
		--
		IF l_valid_flag <> 'Y' THEN
		   FND_MESSAGE.SET_NAME('CSI','CSI_API_LOCATION_NOT_VALID');
		   FND_MSG_PUB.ADD;
		   RAISE fnd_api.g_exc_error;
		END IF;
	     END IF; -- p_location_tbl count
	     --
	     IF l_exists_flag <> 'Y' THEN
		p_ins_count_rec.location_count := p_ins_count_rec.location_count + 1;
		p_location_tbl(p_ins_count_rec.location_count).location_type_code :=
                                                l_get_instance_rec.location_type_code;
		p_location_tbl(p_ins_count_rec.location_count).location_id := l_get_instance_rec.location_id;
		IF csi_item_instance_vld_pvt.Is_Valid_Location_ID
					    (p_location_source_table => l_get_instance_rec.location_type_code
					    ,p_location_id => l_get_instance_rec.location_id) THEN
		   p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'Y';
		ELSE
		   p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'N';
		   RAISE fnd_api.g_exc_error;
		END IF;
	     END IF;
             -- Validate Related Location Parameters
	     IF NOT csi_item_instance_vld_pvt.Validate_Related_Loc_Params
			       (
				 p_location_source_table => l_get_instance_rec.location_type_code,
				 p_location_id           => l_get_instance_rec.location_id,
				 p_organization_id       => l_get_instance_rec.inv_organization_id,
				 p_subinventory          => l_get_instance_rec.inv_subinventory_name,
				 p_locator_id            => l_get_instance_rec.inv_locator_id,
				 p_project_id            => l_get_instance_rec.pa_project_id,
				 p_task_id               => l_get_instance_rec.pa_project_task_id,
				 p_sales_ord_line_id     => l_get_instance_rec.in_transit_order_line_id,
				 p_wip_job_id            => l_get_instance_rec.wip_job_id,
				 p_po_line_id            => l_get_instance_rec.po_order_line_id,
				 p_inst_usage_code       => l_get_instance_rec.instance_usage_code
			       ) THEN
		RAISE fnd_api.g_exc_error;
	     END IF;
         -- validation for accounting classification_code if
         -- p_instance_rec.accounting_class_code = FND_API.G_MISS_CHAR

             IF ( p_instance_rec.accounting_class_code = FND_API.G_MISS_CHAR ) THEN

                      csi_item_instance_vld_pvt.get_valid_acct_class
                               ( p_instance_id            => p_instance_rec.instance_id
                                ,p_curr_acct_class_code   => l_get_instance_rec.accounting_class_code
                                ,p_loc_type_code          => l_get_instance_rec.location_type_code
                                ,x_acct_class_code        => l_acct_class_code
                               );
               -- The following code has been commented for bug 4906588
               /*
               IF l_eam_item
               THEN
                p_instance_rec.accounting_class_code := 'ASSET';
               ELSE
               */
                  p_instance_rec.accounting_class_code  := l_acct_class_code;
             --  END IF;
             END IF;

             IF l_curr_instance_rec.location_type_code = 'IN_TRANSIT' AND
                (p_instance_rec.location_type_code <> l_curr_instance_rec.location_type_code) THEN
                 BEGIN
                    SELECT decode(return_reason_code, 'RETURN', l_curr_instance_rec.last_oe_order_line_id, line_id),
                           decode(return_reason_code, 'RETURN', line_id, l_curr_instance_rec.last_oe_rma_line_id),
                           agreement_id
                    INTO   p_instance_rec.last_oe_order_line_id,
                           p_instance_rec.last_oe_rma_line_id,
                           p_instance_rec.last_oe_agreement_id
                    FROM   oe_order_lines_all
                    WHERE  line_id = l_curr_instance_rec.in_transit_order_line_id;
                  EXCEPTION
                    WHEN OTHERS THEN
                       NULL;
                  END ;

             ELSIF  l_curr_instance_rec.location_type_code = 'WIP' AND
                    (p_instance_rec.location_type_code <> l_curr_instance_rec.location_type_code) THEN
                    IF p_instance_rec.last_wip_job_id IS NULL OR
                       p_instance_rec.last_wip_job_id = fnd_api.g_miss_num
                    THEN
                        p_instance_rec.last_wip_job_id := l_curr_instance_rec.wip_job_id;
                    END IF;

             ELSIF  l_curr_instance_rec.location_type_code = 'PROJECT' AND
                   (p_instance_rec.location_type_code <> l_curr_instance_rec.location_type_code) THEN
                        p_instance_rec.last_pa_project_id := l_curr_instance_rec.pa_project_id;
                        p_instance_rec.last_pa_task_id := l_curr_instance_rec.pa_project_task_id;

             ELSIF  l_curr_instance_rec.location_type_code = 'HZ_LOCATIONS' AND
                   (p_instance_rec.location_type_code <> l_curr_instance_rec.location_type_code) THEN
                   IF ((l_curr_instance_rec.pa_project_id IS NOT NULL) AND
                       (l_curr_instance_rec.pa_project_task_id IS NOT NULL)) THEN
                        p_instance_rec.last_pa_project_id := l_curr_instance_rec.pa_project_id;
                        p_instance_rec.last_pa_task_id := l_curr_instance_rec.pa_project_task_id;
                   END IF;

             ELSIF  l_curr_instance_rec.location_type_code = 'PO' AND
                    (p_instance_rec.location_type_code <> l_curr_instance_rec.location_type_code) THEN
                        p_instance_rec.last_po_po_line_id := l_curr_instance_rec.po_order_line_id;
             END IF;

              --validating the owner
        OPEN party_owner_rec(p_instance_rec.instance_id);
        FETCH party_owner_rec INTO l_party_owner_rec;
              IF NOT (csi_item_instance_vld_pvt.Validate_Uniqueness
                                             (p_instance_rec     => l_get_instance_rec,
                                              p_party_rec        => l_party_owner_rec,
                                              p_srl_control_code => l_serial_control,
                                              p_csi_txn_type_id  => p_txn_rec.transaction_type_id))
              THEN
                  RAISE FND_API.G_EXC_ERROR;
              END IF;
        CLOSE party_owner_rec;

        END IF;




        IF l_get_instance_rec.instance_id IS NOT NULL
           AND l_get_instance_rec.inventory_item_id IS NOT NULL
           AND l_get_instance_rec.inv_master_organization_id IS NOT NULL
        -- AND (((l_serial_control IN (2,5,6))
           AND (((csi_Item_Instance_Vld_pvt.Is_treated_serialized
                                       ( p_serial_control_code => l_serial_control
                                        ,p_location_type_code  => l_get_instance_rec.location_type_code
                                        ,p_transaction_type_id => p_txn_rec.transaction_type_id
                                        )) -- Added by sk on 13/9/01
                   AND ((l_get_instance_rec.serial_number IS NOT NULL) AND (l_get_instance_rec.serial_number <> FND_API.G_MISS_CHAR)))
                -- OR     (l_serial_control NOT IN (2,5,6)))
                   OR   (NOT (csi_Item_Instance_Vld_pvt.Is_treated_serialized
                                                   ( p_serial_control_code => l_serial_control
                                                    ,p_location_type_code  => l_get_instance_rec.location_type_code
                                                    ,p_transaction_type_id => p_txn_rec.transaction_type_id
                                       )) ) )
           AND (((l_lot_control = 2)
                   AND ((l_get_instance_rec.lot_number IS NOT NULL) AND (l_get_instance_rec.lot_number <> FND_API.G_MISS_CHAR)))
                   OR     (l_lot_control <> 2))
           AND l_get_instance_rec.instance_status_id IS NOT NULL
           AND (((l_rev_control = 2)
                   AND ((l_get_instance_rec.inventory_revision IS NOT NULL)
                          AND (l_get_instance_rec.inventory_revision <> FND_API.G_MISS_CHAR)))
                   OR     (l_rev_control <> 2))
           AND l_get_instance_rec.location_type_code IS NOT NULL THEN

                IF (p_instance_rec.creation_complete_flag IS NULL) OR
                   (p_instance_rec.creation_complete_flag = FND_API.G_MISS_CHAR) THEN

                    p_instance_rec.creation_complete_flag := 'Y';
                END IF;

        ELSE
                IF  ((l_curr_instance_rec.creation_complete_flag = 'Y') OR
                    (nvl(p_instance_rec.creation_complete_flag, fnd_api.g_miss_char) = 'Y'))
                THEN
                    IF ((l_serial_control = 6) and (l_get_instance_rec.serial_number is null)) THEN
                        p_instance_rec.creation_complete_flag := 'N';
                    ELSE
                        FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ATTRIBUTES');
                        FND_MSG_PUB.Add;
                        RAISE fnd_api.g_exc_error;
                    END IF;
                ELSE
                    p_instance_rec.creation_complete_flag := 'N';
                END IF;
        END IF;
        --
        -- Check for active_end_date
        -- srramakr Instance Status ID should be made EXPIRED when the Active End Date is <= sysdate and
        -- the passed instance status not having Terminated Flag as Y.
        --
        IF (l_get_instance_rec.active_end_date <= l_sys_date) THEN
           -- TSO with Equipment changes.
           -- Nullifying the config keys
           p_instance_rec.config_inst_hdr_id := NULL;
           p_instance_rec.config_inst_rev_num := NULL;
           p_instance_rec.config_inst_item_id := NULL;
           p_instance_rec.config_valid_status := NULL;
           --
           IF NOT (CSI_Item_Instance_vld_pvt.val_inst_ter_flag(
                                            p_instance_rec.instance_status_id)) THEN
              -- Added by sguthiva for bug 2520978
              p_instance_rec.instance_status_id:=fnd_profile.value('CSI_SYS_TERM_INST_STATUS_ID');
              IF  p_instance_rec.instance_status_id IS NULL
               OR p_instance_rec.instance_status_id=fnd_api.g_miss_num
              THEN
                 p_instance_rec.instance_status_id := 1;
              END IF;
              -- End addition by sguthiva for bug 2520978.
           END IF;
           -- Start addition by sguthiva for bug 2416193
           -- Relaxing this check for RMA Receipt transaction
           IF p_txn_rec.transaction_type_id = 1
           THEN
              BEGIN
                 SELECT 'x'
                 INTO   l_open_service
                 FROM   cs_incidents_all csi,
                        cs_incident_statuses_b csb
                 WHERE  csi.incident_status_id = csb.incident_status_id
                 AND    csi.customer_product_id = p_instance_rec.instance_id
                 AND    NVL(close_flag,'N')<>'Y';

                 FND_MESSAGE.SET_NAME('CSI','CSI_IB_HAS_OPEN_SR');
                 FND_MSG_PUB.ADD;
                 RAISE FND_API.G_EXC_ERROR;

              EXCEPTION
                 WHEN TOO_MANY_ROWS THEN
                   FND_MESSAGE.SET_NAME('CSI','CSI_IB_HAS_OPEN_SR');
                   FND_MSG_PUB.ADD;
                   RAISE FND_API.G_EXC_ERROR;

                 WHEN NO_DATA_FOUND THEN -- modfied for bug 3693511
                    NULL;
              END;
           END IF;
           -- End addition for bug 2416193

         -- Added code to expire relationship where the instance expired is the child, bug 8516781, FP bug 8551918
           csi_gen_utility_pvt.put_line('Expiring relationship for the instance id - ' || p_instance_rec.instance_id);
           FOR l_inst_relationship_rec in relationship_csr(p_instance_rec.instance_id)
           LOOP
             BEGIN
               csi_gen_utility_pvt.put_line('Expiring relationship with id - ' || l_inst_relationship_rec.relationship_id);
               l_exp_rltns_rec.relationship_id := l_inst_relationship_rec.relationship_id;
               l_exp_rltns_rec.object_version_number := l_inst_relationship_rec.object_version_number;

               csi_t_gen_utility_pvt.dump_api_info(
                 p_pkg_name => 'csi_ii_relationships_pub',
                 p_api_name => 'expire_relationship');

               csi_ii_relationships_pub.expire_relationship(
                   p_api_version               => 1.0,
                   p_commit                    => fnd_api.g_false,
                   p_init_msg_list             => fnd_api.g_false,
                   p_validation_level          => fnd_api.g_valid_level_full,
                   p_relationship_rec          => l_exp_rltns_rec,
                   p_txn_rec                   => p_txn_rec,
                   x_instance_id_lst           => l_instance_id_lst,
                   x_return_status             => l_return_status,
                   x_msg_count                 => l_msg_count,
                   x_msg_data                  => l_msg_data);

               IF l_return_status <> fnd_api.g_ret_sts_success THEN
                 RAISE fnd_api.g_exc_error;
               END IF;
             END;
           END LOOP;

           csi_gen_utility_pvt.put_line('End of expiring relationships for instance with id - ' || p_instance_rec.instance_id);
         -- End of addition for the bug 8516781, FP bug 8551918

        END IF;
        -- Validation for install location
        -- Start addition by sk on 02/06/02 for bug 2213922
        IF p_instance_rec.install_location_type_code IS NOT NULL AND
           p_instance_rec.install_location_type_code <> fnd_api.g_miss_char
        THEN
           IF p_instance_rec.install_location_type_code = 'HZ_PARTY_SITES' OR
              p_instance_rec.install_location_type_code = 'HZ_LOCATIONS' OR
              p_instance_rec.install_location_type_code = 'VENDOR_SITE' OR
              p_instance_rec.install_location_type_code = 'INTERNAL_SITE' OR
	      p_instance_rec.install_location_type_code = 'HR_LOCATIONS' --4926773
           THEN
	      IF p_instance_rec.install_location_id IS NULL OR
		 p_instance_rec.install_location_id = FND_API.G_MISS_NUM THEN
		 FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INSTALL_LOC');
		 FND_MSG_PUB.ADD;
		 RAISE fnd_api.g_exc_error;
	      END IF;
	      --
	      l_exists_flag := 'N';
	      l_valid_flag := 'Y';
	      IF p_location_tbl.count > 0 THEN
		 For loc_row in p_location_tbl.FIRST .. p_location_tbl.LAST
		 Loop
		    IF p_location_tbl(loc_row).location_type_code = p_instance_rec.install_location_type_code
		       AND p_location_tbl(loc_row).location_id = p_instance_rec.install_location_id THEN
		       l_exists_flag := 'Y';
		       l_valid_flag := p_location_tbl(loc_row).valid_flag;
		       EXIT;
		    END IF;
		 End Loop;
		 --
		 IF l_valid_flag <> 'Y' THEN
		    FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INSTALL_LOC');
		    FND_MSG_PUB.ADD;
		    RAISE fnd_api.g_exc_error;
		 END IF;
	      END IF;
	      --
	       IF l_exists_flag <> 'Y' THEN
		  p_ins_count_rec.location_count := p_ins_count_rec.location_count + 1;
		  p_location_tbl(p_ins_count_rec.location_count).location_type_code :=
						     p_instance_rec.install_location_type_code;
		  p_location_tbl(p_ins_count_rec.location_count).location_id :=
						     p_instance_rec.install_location_id;
		  IF csi_item_instance_vld_pvt.Is_Valid_Location_ID
                                       (
				         p_location_source_table => p_instance_rec.install_location_type_code
					,p_location_id => p_instance_rec.install_location_id
                                       ) THEN
		     p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'Y';
		  ELSE
		     p_location_tbl(p_ins_count_rec.location_count).valid_flag := 'N';
		     RAISE fnd_api.g_exc_error;
		  END IF;
	       END IF;
           ELSE
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INSTALL_LOC');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
        END IF;
        -- End addition by sk on 02/06/02 for bug 2213922
        -- Added the following code for eam integration
           IF l_eam_item AND
             (p_instance_rec.active_end_date IS NOT NULL AND
              p_instance_rec.active_end_date <> fnd_api.g_miss_date)
           THEN
            IF NOT eam_common_utilities_pvt.check_deactivate
              (p_maintenance_object_id   => p_instance_rec.instance_id
              ,p_maintenance_object_type => l_maintenance_object_type)
            THEN
              csi_gen_utility_pvt.put_line('Error from eam_common_utilities_pvt.check_deactivate API ');
              RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
        -- End code addition for eam integration
    -- validate instance status id
       IF NVL(p_instance_rec.INSTANCE_STATUS_ID,fnd_api.g_miss_num) <> fnd_api.g_miss_num
       THEN
      --debug('Validate instance status id .');
         csi_item_instance_vld_pvt.is_valid_status(
           p_instance_status_id     => p_instance_rec.INSTANCE_STATUS_ID,
           p_creation_complete_flag => l_creation_flag,
           l_return_value           => l_valid);
          IF NOT(l_valid)
          THEN
             RAISE fnd_api.g_exc_error;
          END IF;
        END IF;

        IF p_instance_rec.INSTANCE_STATUS_ID IS NOT NULL AND
           p_instance_rec.INSTANCE_STATUS_ID <> FND_API.G_MISS_NUM AND
           p_instance_rec.INSTANCE_STATUS_ID <> l_curr_instance_rec.INSTANCE_STATUS_ID
        THEN
           IF NOT csi_item_instance_vld_pvt.is_status_updateable
                  (p_instance_status => p_instance_rec.INSTANCE_STATUS_ID
                  ,p_current_status  => l_curr_instance_rec.INSTANCE_STATUS_ID)
           THEN
             RAISE fnd_api.g_exc_error;
           END IF;
        END IF;

    END IF;

     IF (p_validation_mode <> 'V')
     THEN

        FND_File.Put_Line(Fnd_File.LOG,'Validate Mode...!!! I should not be here');
        -- txn_status logic
        IF (nvl(p_instance_rec.location_id, fnd_api.g_miss_num) <> fnd_api.g_miss_num
            AND
            p_instance_rec.location_id <> l_curr_instance_rec.location_id)
           OR
           nvl(p_instance_rec.active_end_date, fnd_api.g_miss_date) <> fnd_api.g_miss_date
        THEN
          l_txn_status := 'PENDING';
        END IF;

       --- Update the instance with the object version number incremented by 1.
       p_instance_rec.object_version_number := l_curr_instance_rec.object_version_number + 1;
       CSI_ITEM_INSTANCES_PKG.Update_Row
       (  p_INSTANCE_ID                 => p_instance_rec.INSTANCE_ID,
          p_INSTANCE_NUMBER             => p_instance_rec.INSTANCE_NUMBER,
          p_EXTERNAL_REFERENCE          => p_instance_rec.EXTERNAL_REFERENCE,
          p_INVENTORY_ITEM_ID           => p_instance_rec.INVENTORY_ITEM_ID,
          p_INVENTORY_REVISION          => p_instance_rec.INVENTORY_REVISION,
          p_INV_MASTER_ORGANIZATION_ID  => p_instance_rec.INV_MASTER_ORGANIZATION_ID,
          p_SERIAL_NUMBER               => p_instance_rec.SERIAL_NUMBER,
          p_MFG_SERIAL_NUMBER_FLAG      => p_instance_rec.MFG_SERIAL_NUMBER_FLAG,
          p_LOT_NUMBER                  => p_instance_rec.LOT_NUMBER,
          p_QUANTITY                    => p_instance_rec.QUANTITY,
          p_UNIT_OF_MEASURE             => p_instance_rec.UNIT_OF_MEASURE,
          p_ACCOUNTING_CLASS_CODE       => p_instance_rec.ACCOUNTING_CLASS_CODE,
          p_INSTANCE_CONDITION_ID       => p_instance_rec.INSTANCE_CONDITION_ID,
          p_INSTANCE_STATUS_ID          => p_instance_rec.INSTANCE_STATUS_ID,
          p_CUSTOMER_VIEW_FLAG          => p_instance_rec.CUSTOMER_VIEW_FLAG,
          p_MERCHANT_VIEW_FLAG          => p_instance_rec.MERCHANT_VIEW_FLAG,
          p_SELLABLE_FLAG               => p_instance_rec.SELLABLE_FLAG,
          p_SYSTEM_ID                   => p_instance_rec.SYSTEM_ID,
          p_INSTANCE_TYPE_CODE          => p_instance_rec.INSTANCE_TYPE_CODE,
          p_ACTIVE_START_DATE           => FND_API.G_MISS_DATE, --p_instance_rec.ACTIVE_START_DATE,
          p_ACTIVE_END_DATE             => p_instance_rec.ACTIVE_END_DATE,
          p_LOCATION_TYPE_CODE          => p_instance_rec.LOCATION_TYPE_CODE,
          p_LOCATION_ID                 => p_instance_rec.LOCATION_ID,
          p_INV_ORGANIZATION_ID         => p_instance_rec.INV_ORGANIZATION_ID,
          p_INV_SUBINVENTORY_NAME       => p_instance_rec.INV_SUBINVENTORY_NAME,
          p_INV_LOCATOR_ID              => p_instance_rec.INV_LOCATOR_ID,
          p_PA_PROJECT_ID               => p_instance_rec.PA_PROJECT_ID,
          p_PA_PROJECT_TASK_ID          => p_instance_rec.PA_PROJECT_TASK_ID,
          p_IN_TRANSIT_ORDER_LINE_ID    => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID,
          p_WIP_JOB_ID                  => p_instance_rec.WIP_JOB_ID,
          p_PO_ORDER_LINE_ID            => p_instance_rec.PO_ORDER_LINE_ID,
          p_LAST_OE_ORDER_LINE_ID       => p_instance_rec.LAST_OE_ORDER_LINE_ID,
          p_LAST_OE_RMA_LINE_ID         => p_instance_rec.LAST_OE_RMA_LINE_ID,
          p_LAST_PO_PO_LINE_ID          => p_instance_rec.LAST_PO_PO_LINE_ID,
          p_LAST_OE_PO_NUMBER           => p_instance_rec.LAST_OE_PO_NUMBER,
          p_LAST_WIP_JOB_ID             => p_instance_rec.LAST_WIP_JOB_ID,
          p_LAST_PA_PROJECT_ID          => p_instance_rec.LAST_PA_PROJECT_ID,
          p_LAST_PA_TASK_ID             => p_instance_rec.LAST_PA_TASK_ID,
          p_LAST_OE_AGREEMENT_ID        => p_instance_rec.LAST_OE_AGREEMENT_ID,
          p_INSTALL_DATE                => p_instance_rec.INSTALL_DATE,
          p_MANUALLY_CREATED_FLAG       => p_instance_rec.MANUALLY_CREATED_FLAG,
          p_RETURN_BY_DATE              => p_instance_rec.RETURN_BY_DATE,
          p_ACTUAL_RETURN_DATE          => p_instance_rec.ACTUAL_RETURN_DATE,
          p_CREATION_COMPLETE_FLAG      => p_instance_rec.CREATION_COMPLETE_FLAG,
          p_COMPLETENESS_FLAG           => p_instance_rec.COMPLETENESS_FLAG,
          p_CONTEXT                     => p_instance_rec.CONTEXT,
          p_ATTRIBUTE1                  => p_instance_rec.ATTRIBUTE1,
          p_ATTRIBUTE2                  => p_instance_rec.ATTRIBUTE2,
          p_ATTRIBUTE3                  => p_instance_rec.ATTRIBUTE3,
          p_ATTRIBUTE4                  => p_instance_rec.ATTRIBUTE4,
          p_ATTRIBUTE5                  => p_instance_rec.ATTRIBUTE5,
          p_ATTRIBUTE6                  => p_instance_rec.ATTRIBUTE6,
          p_ATTRIBUTE7                  => p_instance_rec.ATTRIBUTE7,
          p_ATTRIBUTE8                  => p_instance_rec.ATTRIBUTE8,
          p_ATTRIBUTE9                  => p_instance_rec.ATTRIBUTE9,
          p_ATTRIBUTE10                 => p_instance_rec.ATTRIBUTE10,
          p_ATTRIBUTE11                 => p_instance_rec.ATTRIBUTE11,
          p_ATTRIBUTE12                 => p_instance_rec.ATTRIBUTE12,
          p_ATTRIBUTE13                 => p_instance_rec.ATTRIBUTE13,
          p_ATTRIBUTE14                 => p_instance_rec.ATTRIBUTE14,
          p_ATTRIBUTE15                 => p_instance_rec.ATTRIBUTE15,
          p_CREATED_BY                  => fnd_api.g_miss_num,
          p_CREATION_DATE               => fnd_api.g_miss_date,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID,
          p_LAST_UPDATE_DATE            => SYSDATE,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.CONC_LOGIN_ID,
          p_OBJECT_VERSION_NUMBER       => p_instance_rec.OBJECT_VERSION_NUMBER,
          p_LAST_TXN_LINE_DETAIL_ID     => p_instance_rec.LAST_TXN_LINE_DETAIL_ID,
          p_INSTALL_LOCATION_TYPE_CODE  => p_instance_rec.INSTALL_LOCATION_TYPE_CODE,
          p_INSTALL_LOCATION_ID         => p_instance_rec.INSTALL_LOCATION_ID,
          p_INSTANCE_USAGE_CODE         => p_instance_rec.INSTANCE_USAGE_CODE,
          p_last_vld_organization_id    => l_last_vld_organization_id,
          p_CONFIG_INST_HDR_ID          => p_instance_rec.CONFIG_INST_HDR_ID,
          p_CONFIG_INST_REV_NUM         => p_instance_rec.CONFIG_INST_REV_NUM,
          p_CONFIG_INST_ITEM_ID         => p_instance_rec.CONFIG_INST_ITEM_ID,
          p_CONFIG_VALID_STATUS         => p_instance_rec.CONFIG_VALID_STATUS,
          p_INSTANCE_DESCRIPTION        => p_instance_rec.INSTANCE_DESCRIPTION,
          p_REQUEST_ID                  => p_instance_rec.REQUEST_ID,
          p_PROGRAM_APPLICATION_ID      => p_instance_rec.PROGRAM_APPLICATION_ID,
          p_PROGRAM_ID                  => p_instance_rec.PROGRAM_ID,
          p_PROGRAM_UPDATE_DATE         => p_instance_rec.PROGRAM_UPDATE_DATE,
	  --start of parameters addition for eam integration--
          p_NETWORK_ASSET_FLAG          => p_instance_rec.NETWORK_ASSET_FLAG,
          p_MAINTAINABLE_FLAG           => p_instance_rec.MAINTAINABLE_FLAG,
          p_PN_LOCATION_ID              => p_instance_rec.PN_LOCATION_ID,
          p_ASSET_CRITICALITY_CODE      => p_instance_rec.ASSET_CRITICALITY_CODE,
          p_CATEGORY_ID                 => p_instance_rec.CATEGORY_ID,
          p_EQUIPMENT_GEN_OBJECT_ID     => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID,
          p_INSTANTIATION_FLAG          => p_instance_rec.INSTANTIATION_FLAG,
          p_LINEAR_LOCATION_ID          => p_instance_rec.LINEAR_LOCATION_ID,
          p_OPERATIONAL_LOG_FLAG        => p_instance_rec.OPERATIONAL_LOG_FLAG,
          p_CHECKIN_STATUS              => p_instance_rec.CHECKIN_STATUS,
          p_SUPPLIER_WARRANTY_EXP_DATE  => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE,
          p_ATTRIBUTE16                 => p_instance_rec.ATTRIBUTE16,
          p_ATTRIBUTE17                 => p_instance_rec.ATTRIBUTE17,
          p_ATTRIBUTE18                 => p_instance_rec.ATTRIBUTE18,
          p_ATTRIBUTE19                 => p_instance_rec.ATTRIBUTE19,
          p_ATTRIBUTE20                 => p_instance_rec.ATTRIBUTE20,
          p_ATTRIBUTE21                 => p_instance_rec.ATTRIBUTE21,
          p_ATTRIBUTE22                 => p_instance_rec.ATTRIBUTE22,
          p_ATTRIBUTE23                 => p_instance_rec.ATTRIBUTE23,
          p_ATTRIBUTE24                 => p_instance_rec.ATTRIBUTE24,
          p_ATTRIBUTE25                 => p_instance_rec.ATTRIBUTE25,
          p_ATTRIBUTE26                 => p_instance_rec.ATTRIBUTE26,
          p_ATTRIBUTE27                 => p_instance_rec.ATTRIBUTE27,
          p_ATTRIBUTE28                 => p_instance_rec.ATTRIBUTE28,
          p_ATTRIBUTE29                 => p_instance_rec.ATTRIBUTE29,
          p_ATTRIBUTE30                 => p_instance_rec.ATTRIBUTE30,
	  --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
          p_PURCHASE_UNIT_PRICE         => p_instance_rec.PURCHASE_UNIT_PRICE,
          p_PURCHASE_CURRENCY_CODE      => p_instance_rec.PURCHASE_CURRENCY_CODE,
          p_PAYABLES_UNIT_PRICE         => p_instance_rec.PAYABLES_UNIT_PRICE,
          p_PAYABLES_CURRENCY_CODE      => p_instance_rec.PAYABLES_CURRENCY_CODE,
          p_SALES_UNIT_PRICE            => p_instance_rec.SALES_UNIT_PRICE,
          p_SALES_CURRENCY_CODE         => p_instance_rec.SALES_CURRENCY_CODE,
          p_OPERATIONAL_STATUS_CODE     => p_instance_rec.OPERATIONAL_STATUS_CODE,
    -- End addition of columns for FA Integration
          p_SOURCE_CODE                 => p_instance_rec.SOURCE_CODE -- Added Code for Siebel Genesis Project
          );

    IF l_eam_item
    THEN
      IF p_instance_rec.department_id IS NOT NULL OR
         p_instance_rec.wip_accounting_class IS NOT NULL OR
         p_instance_rec.area_id IS NOT NULL
      THEN
           eam_maint_attributes_pub.update_maint_attributes
                ( p_api_version           => 1.0
                 ,p_init_msg_list         => FND_API.G_FALSE
                 ,p_commit                => FND_API.G_FALSE
                 ,p_validation_level      => fnd_api.g_valid_level_full
                 ,p_instance_id           => p_instance_rec.instance_id
                 ,p_owning_department_id  => p_instance_rec.department_id
                 ,p_accounting_class_code => p_instance_rec.wip_accounting_class
                 ,p_area_id               => p_instance_rec.area_id
                 ,x_return_status         => x_return_status
                 ,x_msg_count             => x_msg_count
                 ,x_msg_data              => x_msg_data);

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS)
           THEN
              csi_gen_utility_pvt.put_line('Error from eam_maint_attributes_pub.update_maint_attributes..');
           RAISE FND_API.G_EXC_ERROR;
           END IF;
      END IF;
    END IF;
-- calling the Counters API to associate counters to an instance
-- Added to restrict the counter instantiation for an item in 'INVENTORY', by rtalluri for the enh. 2308703.
-- Start of Fix for Bug: 2411622 by rtalluri - 06/25/02
   csi_gen_utility_pvt.put_line('p_instance_rec.quantity is '||to_char(p_instance_rec.quantity));
   csi_gen_utility_pvt.put_line('l_curr_instance_rec.quantity is '||to_char(l_curr_instance_rec.quantity));
   csi_gen_utility_pvt.put_line('p_instance_rec.location_type_code is '||p_instance_rec.location_type_code);
   csi_gen_utility_pvt.put_line('l_get_instance_rec.location_type_code is '||l_get_instance_rec.location_type_code);
   csi_gen_utility_pvt.put_line('p_instance_rec.accounting_class_code is '||p_instance_rec.accounting_class_code);
   csi_gen_utility_pvt.put_line('l_curr_instance_rec.accounting_class_code is '||l_curr_instance_rec.accounting_class_code);
   csi_gen_utility_pvt.put_line('l_serial_control is '||l_serial_control);
   --
   -- srramakr Bug # 2484611. Eliminated counter instantiation for serialized items since it is already
   -- instantiated when the instance is in INV. Also used Accounting_class_code in the check for the case
   -- where shipping finds exact match in staging. (It just updates in this case).
   --l_curr_instance_rec.network_asset_flag
IF ( (p_instance_rec.quantity <> FND_API.G_MISS_NUM) AND
     (p_instance_rec.quantity IS NOT NULL) AND
     (l_serial_control not in (2,5)) AND
     (NVL(l_curr_instance_rec.network_asset_flag,'N')<>'Y' AND
      NVL(p_instance_rec.network_asset_flag,'N')<>'Y')
    )
THEN -- Since for Serial control the counter gets instantiated in INV
  IF p_instance_rec.quantity = 1 THEN
    IF ( (p_instance_rec.quantity <> l_curr_instance_rec.quantity) OR
	    (p_instance_rec.accounting_class_code = 'CUST_PROD' AND
	     p_instance_rec.accounting_class_code <> l_curr_instance_rec.accounting_class_code) ) THEN
     IF NOT((l_serial_control IN (1,6)) AND
            (l_get_instance_rec.location_type_code = 'INVENTORY')) THEN
      -- Since the replacement API CSI_COUNTER_TEMPLATE_PUB
      -- for  CS_Counters_PUB.Ctr_Grp_Template_Exists
      -- does not provide a function Ctr_Grp_Template_Exists,
      -- Hence writing the following code...
        --l_counter_group_id := NULL;
        BEGIN
          SELECT COUNT(*)
            INTO l_counter_group_id
            FROM csi_ctr_item_associations
           WHERE inventory_item_id = l_get_instance_rec.inventory_item_id
             AND ROWNUM=1;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
           NULL;
        END;
--       IF CS_Counters_PUB.Ctr_Grp_Template_Exists(l_get_instance_rec.inventory_item_id) THEN
	   IF l_counter_group_id <>0
       THEN
	 l_exists := 'N';
	 BEGIN

        SELECT  'Y'
          INTO  l_exists
          FROM  csi_counter_associations
         WHERE  source_object_id = p_instance_rec.instance_id
           AND  source_object_code = 'CP';

	 EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	       l_exists := 'N';
	    WHEN OTHERS THEN
	       l_exists := 'Y';
	 END;
         IF l_exists = 'N' THEN

          FND_File.Put_Line(Fnd_File.LOG,'Calling counter instantiate');

          csi_gen_utility_pvt.put_line('Calling Autoinstantiate counters');

           csi_counter_template_pub.autoinstantiate_counters
           ( p_api_version                => 1.0
            ,p_init_msg_list              => FND_API.G_FALSE
            ,p_commit                     => FND_API.G_FALSE
            ,x_return_status              => x_return_status
            ,x_msg_count                  => x_msg_count
            ,x_msg_data                   => x_msg_data
            ,p_source_object_id_template  => l_get_instance_rec.inventory_item_id
            ,p_source_object_id_instance  => p_instance_rec.instance_id
            ,x_ctr_id_template            => l_ctr_id_template
            ,x_ctr_id_instance            => l_ctr_id_instance
            ,x_ctr_grp_id_template        => l_ctr_grp_id_template
            ,x_ctr_grp_id_instance        => l_ctr_grp_id_instance
            ,p_organization_id            => l_last_vld_organization_id -- srramakr. should pass the organization_id
            );

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS)
           THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_API_NO_COUNTER_ASSOCIATION');
             FND_MESSAGE.SET_TOKEN('COUNTER','CSI_COUNTER_TEMPLATE_PUB.AUTOINSTANTIATE_COUNTERS');
             FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
           END IF;
          END IF;

      -- srramakr Bug # 2255391. In CTO, since the configured item is created as a part of Sales Order
      -- processing, there is no way a counter gets attached to this new item. In order to attach the counter,
      -- we look at the base model and use its counter group for the configured item. After attaching it,
      -- we call the Autoinstantiate API.
      ELSE  -- Check for the Base Model
        l_base_item_id := null;
        Begin
           select base_item_id
           into l_base_item_id
           from MTL_SYSTEM_ITEMS_B
           where inventory_item_id = l_get_instance_rec.inventory_item_id
           and   organization_id = l_last_vld_organization_id;
        Exception
           when no_data_found then
             null;
           when others then
             null;
        End;
	    --
        IF l_base_item_id is not null THEN
          -- call the Counter Grp association API for the Configured Item
          For ctr_rec in CTR_GROUP(l_base_item_id)
          Loop
             Begin
               IF(ctr_rec.group_id is not null) then
                l_ctr_item_associations_rec.group_id          := ctr_rec.group_id;
	       END IF;
	       IF(ctr_rec.counter_id is not null) then
                l_ctr_item_associations_rec.counter_id          := ctr_rec.counter_id;
	       END IF;
               l_ctr_item_associations_rec.inventory_item_id := p_instance_rec.inventory_item_id;
	       IF(ctr_rec.associated_to_group = 'Y') THEN
                l_ctr_item_associations_rec.associated_to_group := ctr_rec.associated_to_group;-- Added for bug 9142776
	       END IF;

             csi_counter_template_pub.create_item_association
               (p_api_version               => 1.0
               ,p_commit                    => fnd_api.g_false
               ,p_init_msg_list             => fnd_api.g_false
               ,p_validation_level          => p_validation_level
               ,p_ctr_item_associations_rec => l_ctr_item_associations_rec
               ,x_return_status             => x_return_status
               ,x_msg_count                 => x_msg_count
               ,x_msg_data                  => x_msg_data
               );
	     l_counter_group_id    := 1; -- Added for bug 9142776
         END;
          End Loop;
	    -- Call Autoinstantiate Counters
--         IF CS_Counters_PUB.Ctr_Grp_Template_Exists(l_get_instance_rec.inventory_item_id) THEN
	   IF l_counter_group_id <> 0
       THEN

         csi_counter_template_pub.autoinstantiate_counters
         ( p_api_version                => 1.0
          ,p_init_msg_list              => FND_API.G_FALSE
          ,p_commit                     => FND_API.G_FALSE
          ,x_return_status              => x_return_status
          ,x_msg_count                  => x_msg_count
          ,x_msg_data                   => x_msg_data
          ,p_source_object_id_template  => l_get_instance_rec.inventory_item_id
          ,p_source_object_id_instance  => p_instance_rec.instance_id
          ,x_ctr_id_template            => l_ctr_id_template
          ,x_ctr_id_instance            => l_ctr_id_instance
          ,x_ctr_grp_id_template        => l_ctr_grp_id_template
          ,x_ctr_grp_id_instance        => l_ctr_grp_id_instance
          ,p_organization_id            => l_last_vld_organization_id -- srramakr. should pass the organization_id
          );
	         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
		       FND_MESSAGE.SET_NAME('CSI','CSI_API_NO_COUNTER_ASSOCIATION');
               FND_MESSAGE.SET_TOKEN('COUNTER','CSI_COUNTER_TEMPLATE_PUB.AUTOINSTANTIATE_COUNTERS');
		       FND_MSG_PUB.Add;
		       RAISE FND_API.G_EXC_ERROR;
	         END IF;
	       END IF; -- COunter template existance check for the new item
	     END IF; -- Base Item ID check
       END IF;  -- Ctr Group check
     END IF; -- serial chk.
   END IF; --check for db qty and passed qty
 ELSE -- for qty > 1
   NULL;
   -- Delete counters is commented for Bug # 2978942.
 END IF; -- qty check
END IF; -- g_miss check
-- End of Fix for Bug: 2411622 by rtalluri - 06/25/02

-- Moving counter update code from above
	 l_exists := 'N';
       BEGIN
        SELECT  'Y'
          INTO  l_exists
          FROM  csi_counter_associations
         WHERE  source_object_id = p_instance_rec.instance_id
           AND  source_object_code = 'CP';
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
           l_exists := 'N';
        WHEN OTHERS THEN
           l_exists := 'Y';
       END;
      csi_gen_utility_pvt.put_line('Value of l_exists '||l_exists);

         IF l_exists='Y' AND
            l_eam_item AND
            (NVL(l_curr_instance_rec.network_asset_flag,'N')<>'Y' AND
             NVL(p_instance_rec.network_asset_flag,'N')<>'Y')
         THEN
          IF l_cur_instance_rec.last_vld_organization_id <> l_get_instance_rec.vld_organization_id
          THEN
             SELECT maint_organization_id
               INTO l_curr_maint_org_id
               FROM mtl_parameters
              WHERE organization_id = l_cur_instance_rec.last_vld_organization_id;

             SELECT maint_organization_id
               INTO l_latest_maint_org_id
               FROM mtl_parameters
              WHERE organization_id = l_get_instance_rec.vld_organization_id;
              l_ctr:=1;
              csi_gen_utility_pvt.put_line('There is a change in vld organization...');
              csi_gen_utility_pvt.put_line('Value of current maint org is :'||l_curr_maint_org_id);
              csi_gen_utility_pvt.put_line('Value of new maint org is     :'||l_latest_maint_org_id);
             IF NVL(l_curr_maint_org_id,fnd_api.g_miss_num) <>
                NVL(l_latest_maint_org_id,fnd_api.g_miss_num)
             THEN
               FOR l_upd_ctr_assn_csr IN upd_ctr_assn_csr(p_instance_rec.instance_id)
               LOOP
                l_ctr_associations_tbl(l_ctr).instance_association_id :=
                l_upd_ctr_assn_csr.instance_association_id;

                l_ctr_associations_tbl(l_ctr).source_object_id :=
                l_upd_ctr_assn_csr.source_object_id;

                l_ctr_associations_tbl(l_ctr).counter_id :=
                l_upd_ctr_assn_csr.counter_id;

                l_ctr_associations_tbl(l_ctr).object_version_number :=
                l_upd_ctr_assn_csr.object_version_number;

                l_ctr_associations_tbl(l_ctr).maint_organization_id :=
                l_latest_maint_org_id;

                --Added for bug 6963602, during migration to R12, the start_date_active for entries in
                --csi_counter_associations table are not properly populated, in that case, use the
                --active_start_date for the associated item instance
                IF l_upd_ctr_assn_csr.start_date_active IS NULL THEN
                  BEGIN
                    SELECT active_start_date
                    INTO   l_ctr_associations_tbl(l_ctr).start_date_active
                    FROM   csi_item_instances
                    WHERE  instance_id=p_instance_rec.instance_id;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      l_ctr_associations_tbl(l_ctr).start_date_active := p_instance_rec.active_start_date;
                    WHEN OTHERS THEN
                      l_ctr_associations_tbl(l_ctr).start_date_active := NULL;
                  END;
                ELSE
                  l_ctr_associations_tbl(l_ctr).start_date_active := l_upd_ctr_assn_csr.start_date_active;
                END IF;

                l_ctr:=l_ctr+1;
               END LOOP;

               IF l_ctr_associations_tbl.COUNT >0
               THEN
                 csi_gen_utility_pvt.put_line('Calling update counter associations.');
                 CSI_COUNTER_PUB.update_ctr_associations
                  (p_api_version               => 1.0
                  ,p_commit                    => FND_API.G_FALSE
                  ,p_init_msg_list             => FND_API.G_FALSE
                  ,p_validation_level          => p_validation_level
                  ,p_counter_associations_tbl  => l_ctr_associations_tbl
                  ,x_return_status             => x_return_status
                  ,x_msg_count                 => x_msg_count
                  ,x_msg_data                  => x_msg_data
                  );
                 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS)
                 THEN
                  csi_gen_utility_pvt.put_line('Error from csi_counter_pub.update_ctr_associations..');
                  RAISE FND_API.G_EXC_ERROR;
                 END IF;
               END IF;
             END IF;
          END IF;
         END IF;
-- Ends here


-- calling the transaction api
        CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_IF_Exists_Flag => 'Y'
            ,p_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_VALIDATE_TXN');
              FND_MESSAGE.SET_TOKEN('TRANSACTION_ID',p_txn_rec.transaction_id );
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;

-- Get the full_dump_frequency from csi_install_parameter
       --
      IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
          csi_gen_utility_pvt.populate_install_param_rec;
       END IF;
       --
       l_full_dump_frequency := csi_datastructures_pub.g_install_param_rec.history_full_dump_frequency;
       --
       IF l_full_dump_frequency IS NULL THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_FULL_DUMP_FAILED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
       END IF;
       --
-- Get a unique history item instance id from the sequence
-- l_csi_item_instance_h_id :=  csi_item_instance_vld_pvt.get_csi_item_instance_h_id;


       select mod(p_instance_rec.object_version_number,l_full_dump_frequency)
       into   l_mod_value
       from   dual;

     -- Start of modification for Bug#2547034 on 09/20/02 - rtalluri
      BEGIN
        SELECT  instance_history_id
        INTO    l_ins_hist_id
        FROM    csi_item_instances_h h
        WHERE   h.transaction_id = p_txn_rec.transaction_id
        AND     h.instance_id = p_instance_rec.instance_id;

        OPEN   ins_hist_csr(l_ins_hist_id);
        FETCH  ins_hist_csr INTO l_ins_hist_csr ;
        CLOSE  ins_hist_csr;

        IF l_ins_hist_csr.full_dump_flag = 'Y'
        THEN
          CSI_ITEM_INSTANCES_H_PKG.Update_Row
           ( p_INSTANCE_HISTORY_ID              => l_ins_hist_id
            ,p_INSTANCE_ID                       => fnd_api.g_miss_num
            ,p_TRANSACTION_ID                    => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_NUMBER               => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_NUMBER               => p_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => fnd_api.g_miss_char
            ,p_NEW_EXTERNAL_REFERENCE            => p_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => fnd_api.g_miss_num
            ,p_NEW_INVENTORY_ITEM_ID             => p_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => fnd_api.g_miss_char
            ,p_NEW_INVENTORY_REVISION            => p_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_MASTER_ORGZN_ID           => p_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => fnd_api.g_miss_char
            ,p_NEW_SERIAL_NUMBER                 => p_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => fnd_api.g_miss_char
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => p_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => fnd_api.g_miss_char
            ,p_NEW_LOT_NUMBER                    => p_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => fnd_api.g_miss_num
            ,p_NEW_QUANTITY                      => p_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => fnd_api.g_miss_char
            ,p_NEW_UNIT_OF_MEASURE               => p_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => fnd_api.g_miss_char
            ,p_NEW_ACCOUNTING_CLASS_CODE         => p_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_CONDITION_ID         => p_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_STATUS_ID            => p_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_CUSTOMER_VIEW_FLAG            => p_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_MERCHANT_VIEW_FLAG            => p_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => fnd_api.g_miss_char
            ,p_NEW_SELLABLE_FLAG                 => p_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => fnd_api.g_miss_num
            ,p_NEW_SYSTEM_ID                     => p_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_TYPE_CODE            => p_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_START_DATE             => p_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_END_DATE               => p_instance_rec.ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_LOCATION_TYPE_CODE            => p_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => fnd_api.g_miss_num
            ,p_NEW_LOCATION_ID                   => p_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_ORGANIZATION_ID           => p_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => fnd_api.g_miss_char
            ,p_NEW_INV_SUBINVENTORY_NAME         => p_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => fnd_api.g_miss_num
            ,p_NEW_INV_LOCATOR_ID                => p_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => fnd_api.g_miss_num
            ,p_NEW_PA_PROJECT_ID                 => p_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => fnd_api.g_miss_num
            ,p_NEW_PA_PROJECT_TASK_ID            => p_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => fnd_api.g_miss_num
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => fnd_api.g_miss_num
            ,p_NEW_WIP_JOB_ID                    => p_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => fnd_api.g_miss_num
            ,p_NEW_PO_ORDER_LINE_ID              => p_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => fnd_api.g_miss_char
            ,p_NEW_COMPLETENESS_FLAG             => p_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => fnd_api.g_miss_char
            ,p_NEW_CONTEXT                       => p_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE1                    => p_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE2                    => p_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE3                    => p_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE4                    => p_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE5                    => p_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE6                    => p_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE7                    => p_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE8                    => p_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE9                    => p_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE10                   => p_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE11                   => p_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE12                   => p_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE13                   => p_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE14                   => p_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE15                   => p_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => fnd_api.g_miss_char
            ,p_CREATED_BY                        => fnd_api.g_miss_num
            ,p_CREATION_DATE                     => fnd_api.g_miss_date
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => fnd_api.g_miss_num
            ,p_OLD_INST_LOC_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INST_LOC_TYPE_CODE            => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => fnd_api.g_miss_num
            ,p_NEW_INST_LOC_ID                   => p_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => fnd_api.g_miss_char
            ,p_NEW_INST_USAGE_CODE               => p_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => l_last_vld_organization_id
            ,p_OLD_CONFIG_INST_REV_NUM           => fnd_api.g_miss_num
            ,p_NEW_CONFIG_INST_REV_NUM           => p_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => fnd_api.g_miss_char
            ,p_NEW_CONFIG_VALID_STATUS           => p_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_DESCRIPTION          => p_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => fnd_api.g_miss_date
            ,p_NEW_INSTALL_DATE                  => p_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => fnd_api.g_miss_date
            ,p_NEW_RETURN_BY_DATE                => p_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => fnd_api.g_miss_date
            ,p_NEW_ACTUAL_RETURN_DATE            => p_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => fnd_api.g_miss_num
            ,p_NEW_LAST_OE_AGREEMENT_ID          => p_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => fnd_api.g_miss_num
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => p_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => fnd_api.g_miss_num
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => p_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => fnd_api.g_miss_num
	    ,p_NEW_LAST_WIP_JOB_ID               => p_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => fnd_api.g_miss_num
	    ,p_NEW_LAST_PO_PO_LINE_ID            => p_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => fnd_api.g_miss_num
	    ,p_NEW_LAST_PA_PROJECT_ID            => p_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => fnd_api.g_miss_num
	    ,p_NEW_LAST_PA_TASK_ID          => p_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => fnd_api.g_miss_num
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => p_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => fnd_api.g_miss_char
	    ,p_NEW_LAST_OE_PO_NUMBER             => p_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => fnd_api.g_miss_char
	    ,p_NEW_NETWORK_ASSET_FLAG             => p_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => fnd_api.g_miss_char
	    ,p_NEW_MAINTAINABLE_FLAG              => p_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => fnd_api.g_miss_num
	    ,p_NEW_PN_LOCATION_ID                 => p_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => fnd_api.g_miss_char
	    ,p_NEW_ASSET_CRITICALITY_CODE         => p_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => fnd_api.g_miss_num
	    ,p_NEW_CATEGORY_ID                    => p_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => fnd_api.g_miss_num
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => fnd_api.g_miss_char
	    ,p_NEW_INSTANTIATION_FLAG             => p_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => fnd_api.g_miss_num
	    ,p_NEW_LINEAR_LOCATION_ID             => p_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => fnd_api.g_miss_char
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => p_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => fnd_api.g_miss_num
	    ,p_NEW_CHECKIN_STATUS                 => p_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => fnd_api.g_miss_date
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE16                    => p_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE17                    => p_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE18                    => p_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE19                    => p_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE20                    => p_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE21                    => p_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE22                    => p_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE23                    => p_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE24                    => p_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE25                    => p_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE26                    => p_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE27                    => p_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE28                    => p_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE29                    => p_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE30                    => p_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--
        -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PAYABLES_UNIT_PRICE            => p_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PAYABLES_CURRENCY_CODE         => p_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PURCHASE_UNIT_PRICE            => p_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PURCHASE_CURRENCY_CODE         => p_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_NEW_SALES_UNIT_PRICE               => p_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_NEW_SALES_CURRENCY_CODE            => p_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => fnd_api.g_miss_char
            ,p_NEW_OPERATIONAL_STATUS_CODE        => p_instance_rec.OPERATIONAL_STATUS_CODE
        -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => fnd_api.g_miss_char
            ,p_NEW_SOURCE_CODE                   => p_instance_rec.SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );

        ELSE

             IF    ( l_ins_hist_csr.old_instance_number IS NULL
                AND  l_ins_hist_csr.new_instance_number IS NULL ) THEN
                     IF  ( p_instance_rec.instance_number = l_curr_instance_rec.instance_number )
                      OR ( p_instance_rec.instance_number = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_instance_number := NULL;
                           l_ins_hist_csr.new_instance_number := NULL;
                     ELSE
                           l_ins_hist_csr.old_instance_number := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_instance_number := p_instance_rec.instance_number;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_instance_number := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_instance_number := p_instance_rec.instance_number;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_external_reference IS NULL
                AND  l_ins_hist_csr.new_external_reference IS NULL ) THEN
                     IF  ( p_instance_rec.external_reference = l_curr_instance_rec.external_reference )
                      OR ( p_instance_rec.external_reference = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_external_reference := NULL;
                           l_ins_hist_csr.new_external_reference := NULL;
                     ELSE
                           l_ins_hist_csr.old_external_reference := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_external_reference := p_instance_rec.external_reference;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_external_reference := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_external_reference := p_instance_rec.external_reference;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inventory_item_id IS NULL
                AND  l_ins_hist_csr.new_inventory_item_id IS NULL ) THEN
                     IF  ( p_instance_rec.inventory_item_id = l_curr_instance_rec.inventory_item_id )
                      OR ( p_instance_rec.inventory_item_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inventory_item_id := NULL;
                           l_ins_hist_csr.new_inventory_item_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inventory_item_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inventory_item_id := p_instance_rec.inventory_item_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inventory_item_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inventory_item_id := p_instance_rec.inventory_item_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inventory_revision IS NULL
                AND  l_ins_hist_csr.new_inventory_revision IS NULL ) THEN
                     IF  ( p_instance_rec.inventory_revision = l_curr_instance_rec.inventory_revision )
                      OR ( p_instance_rec.inventory_revision = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_inventory_revision := NULL;
                           l_ins_hist_csr.new_inventory_revision := NULL;
                     ELSE
                           l_ins_hist_csr.old_inventory_revision := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_inventory_revision := p_instance_rec.inventory_revision;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inventory_revision := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_inventory_revision := p_instance_rec.inventory_revision;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_master_organization_id IS NULL
                AND  l_ins_hist_csr.new_inv_master_organization_id IS NULL ) THEN
                     IF  ( p_instance_rec.inv_master_organization_id = l_curr_instance_rec.inv_master_organization_id )
                      OR ( p_instance_rec.inv_master_organization_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inv_master_organization_id := NULL;
                           l_ins_hist_csr.new_inv_master_organization_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_master_organization_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inv_master_organization_id := p_instance_rec.inv_master_organization_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_master_organization_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inv_master_organization_id := p_instance_rec.inv_master_organization_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_serial_number IS NULL
                AND  l_ins_hist_csr.new_serial_number IS NULL ) THEN
                     IF  ( p_instance_rec.serial_number = l_curr_instance_rec.serial_number )
                      OR ( p_instance_rec.serial_number = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_serial_number := NULL;
                           l_ins_hist_csr.new_serial_number := NULL;
                     ELSE
                           l_ins_hist_csr.old_serial_number := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_serial_number := p_instance_rec.serial_number;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_serial_number := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_serial_number := p_instance_rec.serial_number;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_mfg_serial_number_flag IS NULL
                AND  l_ins_hist_csr.new_mfg_serial_number_flag IS NULL ) THEN
                     IF  ( p_instance_rec.mfg_serial_number_flag = l_curr_instance_rec.mfg_serial_number_flag )
                      OR ( p_instance_rec.mfg_serial_number_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_mfg_serial_number_flag := NULL;
                           l_ins_hist_csr.new_mfg_serial_number_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_mfg_serial_number_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_mfg_serial_number_flag := p_instance_rec.mfg_serial_number_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_mfg_serial_number_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_mfg_serial_number_flag := p_instance_rec.mfg_serial_number_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_lot_number IS NULL
                AND  l_ins_hist_csr.new_lot_number IS NULL ) THEN
                     IF  ( p_instance_rec.lot_number = l_curr_instance_rec.lot_number )
                      OR ( p_instance_rec.lot_number = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_lot_number := NULL;
                           l_ins_hist_csr.new_lot_number := NULL;
                     ELSE
                           l_ins_hist_csr.old_lot_number := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_lot_number := p_instance_rec.lot_number;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_lot_number := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_lot_number := p_instance_rec.lot_number;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_quantity IS NULL
                AND  l_ins_hist_csr.new_quantity IS NULL ) THEN
                     IF  ( p_instance_rec.quantity = l_curr_instance_rec.quantity )
                      OR ( p_instance_rec.quantity = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_quantity := NULL;
                           l_ins_hist_csr.new_quantity := NULL;
                     ELSE
                           l_ins_hist_csr.old_quantity := l_curr_instance_rec.quantity; --fnd_api.g_miss_num;
                           l_ins_hist_csr.new_quantity := p_instance_rec.quantity;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_quantity := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_quantity := p_instance_rec.quantity;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_unit_of_measure IS NULL
                AND  l_ins_hist_csr.new_unit_of_measure IS NULL ) THEN
                     IF  ( p_instance_rec.unit_of_measure = l_curr_instance_rec.unit_of_measure )
                      OR ( p_instance_rec.unit_of_measure = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_unit_of_measure := NULL;
                           l_ins_hist_csr.new_unit_of_measure := NULL;
                     ELSE
                           l_ins_hist_csr.old_unit_of_measure := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_unit_of_measure := p_instance_rec.unit_of_measure;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_unit_of_measure := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_unit_of_measure := p_instance_rec.unit_of_measure;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_accounting_class_code IS NULL
                AND  l_ins_hist_csr.new_accounting_class_code IS NULL ) THEN
                     IF  ( p_instance_rec.accounting_class_code = l_curr_instance_rec.accounting_class_code )
                      OR ( p_instance_rec.accounting_class_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_accounting_class_code := NULL;
                           l_ins_hist_csr.new_accounting_class_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_accounting_class_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_accounting_class_code := p_instance_rec.accounting_class_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_accounting_class_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_accounting_class_code := p_instance_rec.accounting_class_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_instance_condition_id IS NULL
                AND  l_ins_hist_csr.new_instance_condition_id IS NULL ) THEN
                     IF  ( p_instance_rec.instance_condition_id = l_curr_instance_rec.instance_condition_id )
                      OR ( p_instance_rec.instance_condition_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_instance_condition_id := NULL;
                           l_ins_hist_csr.new_instance_condition_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_instance_condition_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_instance_condition_id := p_instance_rec.instance_condition_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_instance_condition_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_instance_condition_id := p_instance_rec.instance_condition_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_instance_status_id IS NULL
                AND  l_ins_hist_csr.new_instance_status_id IS NULL ) THEN
                     IF  ( p_instance_rec.instance_status_id = l_curr_instance_rec.instance_status_id )
                      OR ( p_instance_rec.instance_status_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_instance_status_id := NULL;
                           l_ins_hist_csr.new_instance_status_id := NULL;
                     ELSE
                      /* Following has been added for bug 2935513 */
                        IF nvl(l_curr_instance_rec.instance_status_id,fnd_api.g_miss_num)<>
                           nvl(p_instance_rec.instance_status_id,fnd_api.g_miss_num)
                        THEN
                           l_ins_hist_csr.old_instance_status_id := l_curr_instance_rec.instance_status_id;
                           l_ins_hist_csr.new_instance_status_id := p_instance_rec.instance_status_id;
                        ELSE
                     /* End addition for bug 2935513 */
                           l_ins_hist_csr.old_instance_status_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_instance_status_id := p_instance_rec.instance_status_id;
                        END IF;

                     END IF;
             ELSE
                     l_ins_hist_csr.old_instance_status_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_instance_status_id := p_instance_rec.instance_status_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_customer_view_flag IS NULL
                AND  l_ins_hist_csr.new_customer_view_flag IS NULL ) THEN
                     IF  ( p_instance_rec.customer_view_flag = l_curr_instance_rec.customer_view_flag )
                      OR ( p_instance_rec.customer_view_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_customer_view_flag := NULL;
                           l_ins_hist_csr.new_customer_view_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_customer_view_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_customer_view_flag := p_instance_rec.customer_view_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_customer_view_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_customer_view_flag := p_instance_rec.customer_view_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_merchant_view_flag IS NULL
                AND  l_ins_hist_csr.new_merchant_view_flag IS NULL ) THEN
                     IF  ( p_instance_rec.merchant_view_flag = l_curr_instance_rec.merchant_view_flag )
                      OR ( p_instance_rec.merchant_view_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_merchant_view_flag := NULL;
                           l_ins_hist_csr.new_merchant_view_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_merchant_view_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_merchant_view_flag := p_instance_rec.merchant_view_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_merchant_view_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_merchant_view_flag := p_instance_rec.merchant_view_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_sellable_flag IS NULL
                AND  l_ins_hist_csr.new_sellable_flag IS NULL ) THEN
                     IF  ( p_instance_rec.sellable_flag = l_curr_instance_rec.sellable_flag )
                      OR ( p_instance_rec.sellable_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_sellable_flag := NULL;
                           l_ins_hist_csr.new_sellable_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_sellable_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_sellable_flag := p_instance_rec.sellable_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_sellable_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_sellable_flag := p_instance_rec.sellable_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_system_id IS NULL
                AND  l_ins_hist_csr.new_system_id IS NULL ) THEN
                     IF  ( p_instance_rec.system_id = l_curr_instance_rec.system_id )
                      OR ( p_instance_rec.system_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_system_id := NULL;
                           l_ins_hist_csr.new_system_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_system_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_system_id := p_instance_rec.system_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_system_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_system_id := p_instance_rec.system_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_instance_type_code IS NULL
                AND  l_ins_hist_csr.new_instance_type_code IS NULL ) THEN
                     IF  ( p_instance_rec.instance_type_code = l_curr_instance_rec.instance_type_code )
                      OR ( p_instance_rec.instance_type_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_instance_type_code := NULL;
                           l_ins_hist_csr.new_instance_type_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_instance_type_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_instance_type_code := p_instance_rec.instance_type_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_instance_type_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_instance_type_code := p_instance_rec.instance_type_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_active_start_date IS NULL
                AND  l_ins_hist_csr.new_active_start_date IS NULL ) THEN
                     IF  ( p_instance_rec.active_start_date = l_curr_instance_rec.active_start_date )
                      OR ( p_instance_rec.active_start_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_active_start_date := NULL;
                           l_ins_hist_csr.new_active_start_date := NULL;
                     ELSE
                           l_ins_hist_csr.old_active_start_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_active_start_date := p_instance_rec.active_start_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_active_start_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_active_start_date := p_instance_rec.active_start_date;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_active_end_date IS NULL
                AND  l_ins_hist_csr.new_active_end_date IS NULL ) THEN
                     IF  ( p_instance_rec.active_end_date = l_curr_instance_rec.active_end_date )
                      OR ( p_instance_rec.active_end_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_active_end_date := NULL;
                           l_ins_hist_csr.new_active_end_date := NULL;
                     ELSE
                           l_ins_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_active_end_date := p_instance_rec.active_end_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_active_end_date := p_instance_rec.active_end_date;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_location_type_code IS NULL
                AND  l_ins_hist_csr.new_location_type_code IS NULL ) THEN
                     IF  ( p_instance_rec.location_type_code = l_curr_instance_rec.location_type_code )
                      OR ( p_instance_rec.location_type_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_location_type_code := NULL;
                           l_ins_hist_csr.new_location_type_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_location_type_code := l_curr_instance_rec.location_type_code; --fnd_api.g_miss_char;
                           l_ins_hist_csr.new_location_type_code := p_instance_rec.location_type_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_location_type_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_location_type_code := p_instance_rec.location_type_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_location_id IS NULL
                AND  l_ins_hist_csr.new_location_id IS NULL ) THEN
                     IF  ( p_instance_rec.location_id = l_curr_instance_rec.location_id )
                      OR ( p_instance_rec.location_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_location_id := NULL;
                           l_ins_hist_csr.new_location_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_location_id := l_curr_instance_rec.location_id; --fnd_api.g_miss_num;
                           l_ins_hist_csr.new_location_id := p_instance_rec.location_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_location_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_location_id := p_instance_rec.location_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_organization_id IS NULL
                AND  l_ins_hist_csr.new_inv_organization_id IS NULL ) THEN
                     IF  ( p_instance_rec.inv_organization_id = l_curr_instance_rec.inv_organization_id )
                      OR ( p_instance_rec.inv_organization_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inv_organization_id := NULL;
                           l_ins_hist_csr.new_inv_organization_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_organization_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inv_organization_id := p_instance_rec.inv_organization_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_organization_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inv_organization_id := p_instance_rec.inv_organization_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_subinventory_name IS NULL
                AND  l_ins_hist_csr.new_inv_subinventory_name IS NULL ) THEN
                     IF  ( p_instance_rec.inv_subinventory_name = l_curr_instance_rec.inv_subinventory_name )
                      OR ( p_instance_rec.inv_subinventory_name = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_inv_subinventory_name := NULL;
                           l_ins_hist_csr.new_inv_subinventory_name := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_subinventory_name := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_inv_subinventory_name := p_instance_rec.inv_subinventory_name;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_subinventory_name := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_inv_subinventory_name := p_instance_rec.inv_subinventory_name;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inv_locator_id IS NULL
                AND  l_ins_hist_csr.new_inv_locator_id IS NULL ) THEN
                     IF  ( p_instance_rec.inv_locator_id = l_curr_instance_rec.inv_locator_id )
                      OR ( p_instance_rec.inv_locator_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inv_locator_id := NULL;
                           l_ins_hist_csr.new_inv_locator_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inv_locator_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inv_locator_id := p_instance_rec.inv_locator_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inv_locator_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inv_locator_id := p_instance_rec.inv_locator_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_pa_project_id IS NULL
                AND  l_ins_hist_csr.new_pa_project_id IS NULL ) THEN
                     IF  ( p_instance_rec.pa_project_id = l_curr_instance_rec.pa_project_id )
                      OR ( p_instance_rec.pa_project_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_pa_project_id := NULL;
                           l_ins_hist_csr.new_pa_project_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_pa_project_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_pa_project_id := p_instance_rec.pa_project_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_pa_project_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_pa_project_id := p_instance_rec.pa_project_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_pa_project_task_id IS NULL
                AND  l_ins_hist_csr.new_pa_project_task_id IS NULL ) THEN
                     IF  ( p_instance_rec.pa_project_task_id = l_curr_instance_rec.pa_project_task_id )
                      OR ( p_instance_rec.pa_project_task_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_pa_project_task_id := NULL;
                           l_ins_hist_csr.new_pa_project_task_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_pa_project_task_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_pa_project_task_id := p_instance_rec.pa_project_task_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_pa_project_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_pa_project_task_id := p_instance_rec.pa_project_task_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_in_transit_order_line_id IS NULL
                AND  l_ins_hist_csr.new_in_transit_order_line_id IS NULL ) THEN
                     IF  ( p_instance_rec.in_transit_order_line_id = l_curr_instance_rec.in_transit_order_line_id )
                      OR ( p_instance_rec.in_transit_order_line_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_in_transit_order_line_id := NULL;
                           l_ins_hist_csr.new_in_transit_order_line_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_in_transit_order_line_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_in_transit_order_line_id := p_instance_rec.in_transit_order_line_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_in_transit_order_line_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_in_transit_order_line_id := p_instance_rec.in_transit_order_line_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_oe_agreement_id IS NULL
                AND  l_ins_hist_csr.new_oe_agreement_id IS NULL ) THEN
                     IF  ( p_instance_rec.last_oe_agreement_id = l_curr_instance_rec.last_oe_agreement_id )
                      OR ( p_instance_rec.last_oe_agreement_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_oe_agreement_id := NULL;
                           l_ins_hist_csr.new_oe_agreement_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_oe_agreement_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_oe_agreement_id := p_instance_rec.last_oe_agreement_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_oe_agreement_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_oe_agreement_id := p_instance_rec.last_oe_agreement_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_OE_ORDER_LINE_ID = l_curr_instance_rec.LAST_OE_ORDER_LINE_ID )
                      OR ( p_instance_rec.LAST_OE_ORDER_LINE_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID := NULL;
                           l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_OE_ORDER_LINE_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_OE_RMA_LINE_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_OE_RMA_LINE_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_OE_RMA_LINE_ID = l_curr_instance_rec.LAST_OE_RMA_LINE_ID )
                      OR ( p_instance_rec.LAST_OE_RMA_LINE_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_OE_RMA_LINE_ID := NULL;
                           l_ins_hist_csr.new_LAST_OE_RMA_LINE_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_OE_RMA_LINE_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_OE_RMA_LINE_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_WIP_JOB_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_WIP_JOB_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_WIP_JOB_ID = l_curr_instance_rec.LAST_WIP_JOB_ID )
                      OR ( p_instance_rec.LAST_WIP_JOB_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_WIP_JOB_ID := NULL;
                           l_ins_hist_csr.new_LAST_WIP_JOB_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_WIP_JOB_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_WIP_JOB_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_PO_PO_LINE_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_PO_PO_LINE_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_PO_PO_LINE_ID = l_curr_instance_rec.LAST_PO_PO_LINE_ID )
                      OR ( p_instance_rec.LAST_PO_PO_LINE_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_PO_PO_LINE_ID := NULL;
                           l_ins_hist_csr.new_LAST_PO_PO_LINE_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_PO_PO_LINE_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_PO_PO_LINE_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_PA_PROJECT_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_PA_PROJECT_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_PA_PROJECT_ID = l_curr_instance_rec.LAST_PA_PROJECT_ID )
                      OR ( p_instance_rec.LAST_PA_PROJECT_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_PA_PROJECT_ID := NULL;
                           l_ins_hist_csr.new_LAST_PA_PROJECT_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_PA_PROJECT_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_PA_PROJECT_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_PA_TASK_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_PA_TASK_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_PA_TASK_ID = l_curr_instance_rec.LAST_PA_TASK_ID )
                      OR ( p_instance_rec.LAST_PA_TASK_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_PA_TASK_ID := NULL;
                           l_ins_hist_csr.new_LAST_PA_TASK_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_PA_TASK_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_PA_TASK_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID IS NULL
                AND  l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_TXN_LINE_DETAIL_ID = l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID )
                      OR ( p_instance_rec.LAST_TXN_LINE_DETAIL_ID = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID := NULL;
                           l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_TXN_LINE_DETAIL_ID := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_LAST_OE_PO_NUMBER IS NULL
                AND  l_ins_hist_csr.new_LAST_OE_PO_NUMBER IS NULL ) THEN
                     IF  ( p_instance_rec.LAST_OE_PO_NUMBER = l_curr_instance_rec.LAST_OE_PO_NUMBER )
                      OR ( p_instance_rec.LAST_OE_PO_NUMBER = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_LAST_OE_PO_NUMBER := NULL;
                           l_ins_hist_csr.new_LAST_OE_PO_NUMBER := NULL;
                     ELSE
                           l_ins_hist_csr.old_LAST_OE_PO_NUMBER := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_LAST_OE_PO_NUMBER := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_wip_job_id IS NULL
                AND  l_ins_hist_csr.new_wip_job_id IS NULL ) THEN
                     IF  ( p_instance_rec.wip_job_id = l_curr_instance_rec.wip_job_id )
                      OR ( p_instance_rec.wip_job_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_wip_job_id := NULL;
                           l_ins_hist_csr.new_wip_job_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_wip_job_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_wip_job_id := p_instance_rec.wip_job_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_wip_job_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_wip_job_id := p_instance_rec.wip_job_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_po_order_line_id IS NULL
                AND  l_ins_hist_csr.new_po_order_line_id IS NULL ) THEN
                     IF  ( p_instance_rec.po_order_line_id = l_curr_instance_rec.po_order_line_id )
                      OR ( p_instance_rec.po_order_line_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_po_order_line_id := NULL;
                           l_ins_hist_csr.new_po_order_line_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_po_order_line_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_po_order_line_id := p_instance_rec.po_order_line_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_po_order_line_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_po_order_line_id := p_instance_rec.po_order_line_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_completeness_flag IS NULL
                AND  l_ins_hist_csr.new_completeness_flag IS NULL ) THEN
                     IF  ( p_instance_rec.completeness_flag = l_curr_instance_rec.completeness_flag )
                      OR ( p_instance_rec.completeness_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_completeness_flag := NULL;
                           l_ins_hist_csr.new_completeness_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_completeness_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_completeness_flag := p_instance_rec.completeness_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_completeness_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_completeness_flag := p_instance_rec.completeness_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_context IS NULL
                AND  l_ins_hist_csr.new_context IS NULL ) THEN
                     IF  ( p_instance_rec.context = l_curr_instance_rec.context )
                      OR ( p_instance_rec.context = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_context := NULL;
                           l_ins_hist_csr.new_context := NULL;
                     ELSE
                           l_ins_hist_csr.old_context := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_context := p_instance_rec.context;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_context := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_context := p_instance_rec.context;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute1 IS NULL
                AND  l_ins_hist_csr.new_attribute1 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute1 = l_curr_instance_rec.attribute1 )
                      OR ( p_instance_rec.attribute1 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute1 := NULL;
                           l_ins_hist_csr.new_attribute1 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute1 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute1 := p_instance_rec.attribute1;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute1 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute1 := p_instance_rec.attribute1;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute2 IS NULL
                AND  l_ins_hist_csr.new_attribute2 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute2 = l_curr_instance_rec.attribute2 )
                      OR ( p_instance_rec.attribute2 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute2 := NULL;
                           l_ins_hist_csr.new_attribute2 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute2 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute2 := p_instance_rec.attribute2;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute2 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute2 := p_instance_rec.attribute2;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute3 IS NULL
                AND  l_ins_hist_csr.new_attribute3 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute3 = l_curr_instance_rec.attribute3 )
                      OR ( p_instance_rec.attribute3 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute3 := NULL;
                           l_ins_hist_csr.new_attribute3 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute3 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute3 := p_instance_rec.attribute3;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute3 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute3 := p_instance_rec.attribute3;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute4 IS NULL
                AND  l_ins_hist_csr.new_attribute4 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute4 = l_curr_instance_rec.attribute4 )
                      OR ( p_instance_rec.attribute4 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute4 := NULL;
                           l_ins_hist_csr.new_attribute4 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute4 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute4 := p_instance_rec.attribute4;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute4 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute4 := p_instance_rec.attribute4;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute5 IS NULL
                AND  l_ins_hist_csr.new_attribute5 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute5 = l_curr_instance_rec.attribute5 )
                      OR ( p_instance_rec.attribute5 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute5 := NULL;
                           l_ins_hist_csr.new_attribute5 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute5 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute5 := p_instance_rec.attribute5;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute5 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute5 := p_instance_rec.attribute5;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute6 IS NULL
                AND  l_ins_hist_csr.new_attribute6 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute6 = l_curr_instance_rec.attribute6 )
                      OR ( p_instance_rec.attribute6 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute6 := NULL;
                           l_ins_hist_csr.new_attribute6 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute6 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute6 := p_instance_rec.attribute6;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute6 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute6 := p_instance_rec.attribute6;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute7 IS NULL
                AND  l_ins_hist_csr.new_attribute7 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute7 = l_curr_instance_rec.attribute7 )
                      OR ( p_instance_rec.attribute7 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute7 := NULL;
                           l_ins_hist_csr.new_attribute7 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute7 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute7 := p_instance_rec.attribute7;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute7 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute7 := p_instance_rec.attribute7;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute8 IS NULL
                AND  l_ins_hist_csr.new_attribute8 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute8 = l_curr_instance_rec.attribute8 )
                      OR ( p_instance_rec.attribute8 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute8 := NULL;
                           l_ins_hist_csr.new_attribute8 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute8 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute8 := p_instance_rec.attribute8;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute8 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute8 := p_instance_rec.attribute8;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute9 IS NULL
                AND  l_ins_hist_csr.new_attribute9 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute9 = l_curr_instance_rec.attribute9 )
                      OR ( p_instance_rec.attribute9 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute9 := NULL;
                           l_ins_hist_csr.new_attribute9 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute9 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute9 := p_instance_rec.attribute9;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute9 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute9 := p_instance_rec.attribute9;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute10 IS NULL
                AND  l_ins_hist_csr.new_attribute10 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute10 = l_curr_instance_rec.attribute10 )
                      OR ( p_instance_rec.attribute10 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute10 := NULL;
                           l_ins_hist_csr.new_attribute10 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute10 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute10 := p_instance_rec.attribute10;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute10 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute10 := p_instance_rec.attribute10;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute11 IS NULL
                AND  l_ins_hist_csr.new_attribute11 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute11 = l_curr_instance_rec.attribute11 )
                      OR ( p_instance_rec.attribute11 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute11 := NULL;
                           l_ins_hist_csr.new_attribute11 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute11 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute11 := p_instance_rec.attribute11;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute11 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute11 := p_instance_rec.attribute11;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute12 IS NULL
                AND  l_ins_hist_csr.new_attribute12 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute12 = l_curr_instance_rec.attribute12 )
                      OR ( p_instance_rec.attribute12 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute12 := NULL;
                           l_ins_hist_csr.new_attribute12 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute12 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute12 := p_instance_rec.attribute12;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute12 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute12 := p_instance_rec.attribute12;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute13 IS NULL
                AND  l_ins_hist_csr.new_attribute13 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute13 = l_curr_instance_rec.attribute13 )
                      OR ( p_instance_rec.attribute13 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute13 := NULL;
                           l_ins_hist_csr.new_attribute13 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute13 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute13 := p_instance_rec.attribute13;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute13 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute13 := p_instance_rec.attribute13;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute14 IS NULL
                AND  l_ins_hist_csr.new_attribute14 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute14 = l_curr_instance_rec.attribute14 )
                      OR ( p_instance_rec.attribute14 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute14 := NULL;
                           l_ins_hist_csr.new_attribute14 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute14 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute14 := p_instance_rec.attribute14;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute14 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute14 := p_instance_rec.attribute14;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute15 IS NULL
                AND  l_ins_hist_csr.new_attribute15 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute15 = l_curr_instance_rec.attribute15 )
                      OR ( p_instance_rec.attribute15 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute15 := NULL;
                           l_ins_hist_csr.new_attribute15 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute15 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute15 := p_instance_rec.attribute15;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute15 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute15 := p_instance_rec.attribute15;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inst_loc_type_code IS NULL
                AND  l_ins_hist_csr.new_inst_loc_type_code IS NULL ) THEN
                     IF  ( p_instance_rec.install_location_type_code = l_curr_instance_rec.install_location_type_code )
                      OR ( p_instance_rec.install_location_type_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_inst_loc_type_code := NULL;
                           l_ins_hist_csr.new_inst_loc_type_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_inst_loc_type_code := l_curr_instance_rec.install_location_type_code; --fnd_api.g_miss_char;
                           l_ins_hist_csr.new_inst_loc_type_code := p_instance_rec.install_location_type_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inst_loc_type_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_inst_loc_type_code := p_instance_rec.install_location_type_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inst_loc_id IS NULL
                AND  l_ins_hist_csr.new_inst_loc_id IS NULL ) THEN
                     IF  ( p_instance_rec.install_location_id = l_curr_instance_rec.install_location_id )
                      OR ( p_instance_rec.install_location_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_inst_loc_id := NULL;
                           l_ins_hist_csr.new_inst_loc_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_inst_loc_id := l_curr_instance_rec.install_location_id; --fnd_api.g_miss_num;
                           l_ins_hist_csr.new_inst_loc_id := p_instance_rec.install_location_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inst_loc_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_inst_loc_id := p_instance_rec.install_location_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_inst_usage_code IS NULL
                AND  l_ins_hist_csr.new_inst_usage_code IS NULL ) THEN
                     IF  ( p_instance_rec.instance_usage_code = l_curr_instance_rec.instance_usage_code )
                      OR ( p_instance_rec.instance_usage_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_inst_usage_code := NULL;
                           l_ins_hist_csr.new_inst_usage_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_inst_usage_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_inst_usage_code := p_instance_rec.instance_usage_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_inst_usage_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_inst_usage_code := p_instance_rec.instance_usage_code;
             END IF;
		   --
             IF    ( l_ins_hist_csr.old_last_vld_organization_id IS NULL
                AND  l_ins_hist_csr.new_last_vld_organization_id IS NULL ) THEN
                     IF  ( p_instance_rec.vld_organization_id = l_curr_instance_rec.last_vld_organization_id )
                      OR ( p_instance_rec.vld_organization_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_last_vld_organization_id := NULL;
                           l_ins_hist_csr.new_last_vld_organization_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_last_vld_organization_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_last_vld_organization_id := p_instance_rec.vld_organization_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_last_vld_organization_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_last_vld_organization_id := p_instance_rec.vld_organization_id;
             END IF;
             IF    ( l_ins_hist_csr.old_config_inst_rev_num IS NULL
                AND  l_ins_hist_csr.new_config_inst_rev_num IS NULL ) THEN
                     IF  ( p_instance_rec.config_inst_rev_num = l_curr_instance_rec.config_inst_rev_num )
                      OR ( p_instance_rec.config_inst_rev_num = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_config_inst_rev_num := NULL;
                           l_ins_hist_csr.new_config_inst_rev_num := NULL;
                     ELSE
                           l_ins_hist_csr.old_config_inst_rev_num := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_config_inst_rev_num := p_instance_rec.config_inst_rev_num;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_config_inst_rev_num := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_config_inst_rev_num := p_instance_rec.config_inst_rev_num;
             END IF;
		   --
             IF    ( l_ins_hist_csr.old_config_valid_status IS NULL
                AND  l_ins_hist_csr.new_config_valid_status IS NULL ) THEN
                     IF  ( p_instance_rec.config_valid_status = l_curr_instance_rec.config_valid_status )
                      OR ( p_instance_rec.config_valid_status = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_config_valid_status := NULL;
                           l_ins_hist_csr.new_config_valid_status := NULL;
                     ELSE
                           l_ins_hist_csr.old_config_valid_status := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_config_valid_status := p_instance_rec.config_valid_status;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_config_valid_status := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_config_valid_status := p_instance_rec.config_valid_status;
             END IF;
		   --
             IF    ( l_ins_hist_csr.old_instance_description IS NULL
                AND  l_ins_hist_csr.new_instance_description IS NULL ) THEN
                     IF  ( p_instance_rec.instance_description = l_curr_instance_rec.instance_description )
                      OR ( p_instance_rec.instance_description = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_instance_description := NULL;
                           l_ins_hist_csr.new_instance_description := NULL;
                     ELSE
                           l_ins_hist_csr.old_instance_description := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_instance_description := p_instance_rec.instance_description;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_instance_description := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_instance_description := p_instance_rec.instance_description;
             END IF;
		   --
-- added for bug 2671179


             IF    ( l_ins_hist_csr.old_install_date IS NULL
                AND  l_ins_hist_csr.new_install_date IS NULL ) THEN
                     IF  ( p_instance_rec.install_date = l_curr_instance_rec.install_date )
                      OR ( p_instance_rec.install_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_install_date := fnd_api.g_miss_date; --jan15
                           l_ins_hist_csr.new_install_date := fnd_api.g_miss_date; --jan15
                     ELSE
                           l_ins_hist_csr.old_install_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_install_date := p_instance_rec.install_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_install_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_install_date := p_instance_rec.install_date;
             END IF;


             IF    ( l_ins_hist_csr.old_return_by_date IS NULL
                AND  l_ins_hist_csr.new_return_by_date IS NULL ) THEN
                     IF  ( p_instance_rec.return_by_date = l_curr_instance_rec.return_by_date)
                      OR ( p_instance_rec.return_by_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_return_by_date := fnd_api.g_miss_date; --jan15
                           l_ins_hist_csr.new_return_by_date := fnd_api.g_miss_date; --jan15
                     ELSE
                           l_ins_hist_csr.old_return_by_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_return_by_date := p_instance_rec.return_by_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_return_by_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_return_by_date := p_instance_rec.return_by_date;
             END IF;


             IF    ( l_ins_hist_csr.old_actual_return_date IS NULL
                AND  l_ins_hist_csr.new_actual_return_date IS NULL ) THEN
                     IF  ( p_instance_rec.actual_return_date = l_curr_instance_rec.actual_return_date)
                      OR ( p_instance_rec.actual_return_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_actual_return_date := fnd_api.g_miss_date; --jan15
                           l_ins_hist_csr.new_actual_return_date := fnd_api.g_miss_date; --jan15
                     ELSE
                           l_ins_hist_csr.old_actual_return_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_actual_return_date := p_instance_rec.actual_return_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_actual_return_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_actual_return_date := p_instance_rec.actual_return_date;
             END IF;
            --start of code for eam integration--
             --
             IF    ( l_ins_hist_csr.old_network_asset_flag IS NULL
                AND  l_ins_hist_csr.new_network_asset_flag IS NULL ) THEN
                     IF  ( p_instance_rec.network_asset_flag = l_curr_instance_rec.network_asset_flag )
                      OR ( p_instance_rec.network_asset_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_network_asset_flag := NULL;
                           l_ins_hist_csr.new_network_asset_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_network_asset_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_network_asset_flag := p_instance_rec.network_asset_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_network_asset_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_network_asset_flag := p_instance_rec.network_asset_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_maintainable_flag IS NULL
                AND  l_ins_hist_csr.new_maintainable_flag IS NULL ) THEN
                     IF  ( p_instance_rec.maintainable_flag = l_curr_instance_rec.maintainable_flag )
                      OR ( p_instance_rec.maintainable_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_maintainable_flag := NULL;
                           l_ins_hist_csr.new_maintainable_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_maintainable_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_maintainable_flag := p_instance_rec.maintainable_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_maintainable_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_maintainable_flag := p_instance_rec.maintainable_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_pn_location_id IS NULL
                AND  l_ins_hist_csr.new_pn_location_id IS NULL ) THEN
                     IF  ( p_instance_rec.pn_location_id = l_curr_instance_rec.pn_location_id )
                      OR ( p_instance_rec.pn_location_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_pn_location_id := NULL;
                           l_ins_hist_csr.new_pn_location_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_pn_location_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_pn_location_id := p_instance_rec.pn_location_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_pn_location_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_pn_location_id := p_instance_rec.pn_location_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_asset_criticality_code IS NULL
                AND  l_ins_hist_csr.new_asset_criticality_code IS NULL ) THEN
                     IF  ( p_instance_rec.asset_criticality_code = l_curr_instance_rec.asset_criticality_code )
                      OR ( p_instance_rec.asset_criticality_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_asset_criticality_code := NULL;
                           l_ins_hist_csr.new_asset_criticality_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_asset_criticality_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_asset_criticality_code := p_instance_rec.asset_criticality_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_asset_criticality_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_asset_criticality_code := p_instance_rec.asset_criticality_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_category_id IS NULL
                AND  l_ins_hist_csr.new_category_id IS NULL ) THEN
                     IF  ( p_instance_rec.category_id = l_curr_instance_rec.category_id )
                      OR ( p_instance_rec.category_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_category_id := NULL;
                           l_ins_hist_csr.new_category_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_category_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_category_id := p_instance_rec.category_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_category_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_category_id := p_instance_rec.category_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_equipment_gen_object_id IS NULL
                AND  l_ins_hist_csr.new_equipment_gen_object_id IS NULL ) THEN
                     IF  ( p_instance_rec.equipment_gen_object_id = l_curr_instance_rec.equipment_gen_object_id )
                      OR ( p_instance_rec.equipment_gen_object_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_equipment_gen_object_id := NULL;
                           l_ins_hist_csr.new_equipment_gen_object_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_equipment_gen_object_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_equipment_gen_object_id := p_instance_rec.equipment_gen_object_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_equipment_gen_object_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_equipment_gen_object_id := p_instance_rec.equipment_gen_object_id;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_instantiation_flag IS NULL
                AND  l_ins_hist_csr.new_instantiation_flag IS NULL ) THEN
                     IF  ( p_instance_rec.instantiation_flag = l_curr_instance_rec.instantiation_flag )
                      OR ( p_instance_rec.instantiation_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_instantiation_flag := NULL;
                           l_ins_hist_csr.new_instantiation_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_instantiation_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_instantiation_flag := p_instance_rec.instantiation_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_instantiation_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_instantiation_flag := p_instance_rec.instantiation_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_linear_location_id IS NULL
                AND  l_ins_hist_csr.new_linear_location_id IS NULL ) THEN
                     IF  ( p_instance_rec.linear_location_id = l_curr_instance_rec.linear_location_id )
                      OR ( p_instance_rec.linear_location_id = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_linear_location_id := NULL;
                           l_ins_hist_csr.new_linear_location_id := NULL;
                     ELSE
                           l_ins_hist_csr.old_linear_location_id := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_linear_location_id := p_instance_rec.linear_location_id;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_linear_location_id := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_linear_location_id := p_instance_rec.linear_location_id;
             END IF;

             IF    ( l_ins_hist_csr.old_operational_log_flag IS NULL
                AND  l_ins_hist_csr.new_operational_log_flag IS NULL ) THEN
                     IF  ( p_instance_rec.operational_log_flag = l_curr_instance_rec.operational_log_flag )
                      OR ( p_instance_rec.operational_log_flag = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_operational_log_flag := NULL;
                           l_ins_hist_csr.new_operational_log_flag := NULL;
                     ELSE
                           l_ins_hist_csr.old_operational_log_flag := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_operational_log_flag := p_instance_rec.operational_log_flag;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_operational_log_flag := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_operational_log_flag := p_instance_rec.operational_log_flag;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_checkin_status IS NULL
                AND  l_ins_hist_csr.new_checkin_status IS NULL ) THEN
                     IF  ( p_instance_rec.checkin_status = l_curr_instance_rec.checkin_status )
                      OR ( p_instance_rec.checkin_status = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_checkin_status := NULL;
                           l_ins_hist_csr.new_checkin_status := NULL;
                     ELSE
                           l_ins_hist_csr.old_checkin_status := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_checkin_status := p_instance_rec.checkin_status;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_checkin_status := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_checkin_status := p_instance_rec.checkin_status;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_supplier_warranty_exp_date IS NULL
                AND  l_ins_hist_csr.new_supplier_warranty_exp_date IS NULL ) THEN
                     IF  ( p_instance_rec.supplier_warranty_exp_date = l_curr_instance_rec.supplier_warranty_exp_date )
                      OR ( p_instance_rec.supplier_warranty_exp_date = fnd_api.g_miss_date ) THEN
                           l_ins_hist_csr.old_supplier_warranty_exp_date := NULL;
                           l_ins_hist_csr.new_supplier_warranty_exp_date := NULL;
                     ELSE
                           l_ins_hist_csr.old_supplier_warranty_exp_date := fnd_api.g_miss_date;
                           l_ins_hist_csr.new_supplier_warranty_exp_date := p_instance_rec.supplier_warranty_exp_date;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_supplier_warranty_exp_date := fnd_api.g_miss_date;
                     l_ins_hist_csr.new_supplier_warranty_exp_date := p_instance_rec.supplier_warranty_exp_date;
             END IF;

             --

             IF    ( l_ins_hist_csr.old_attribute16 IS NULL
                AND  l_ins_hist_csr.new_attribute16 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute16 = l_curr_instance_rec.attribute16 )
                      OR ( p_instance_rec.attribute16 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute16 := NULL;
                           l_ins_hist_csr.new_attribute16 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute16 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute16 := p_instance_rec.attribute16;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute16 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute16 := p_instance_rec.attribute16;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute17 IS NULL
                AND  l_ins_hist_csr.new_attribute17 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute17 = l_curr_instance_rec.attribute17 )
                      OR ( p_instance_rec.attribute17 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute17 := NULL;
                           l_ins_hist_csr.new_attribute17 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute17 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute17 := p_instance_rec.attribute17;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute17 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute17 := p_instance_rec.attribute17;
             END IF;

             IF    ( l_ins_hist_csr.old_attribute18 IS NULL
                AND  l_ins_hist_csr.new_attribute18 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute18 = l_curr_instance_rec.attribute18 )
                      OR ( p_instance_rec.attribute18 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute18 := NULL;
                           l_ins_hist_csr.new_attribute18 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute18 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute18 := p_instance_rec.attribute18;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute18 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute18 := p_instance_rec.attribute18;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute19 IS NULL
                AND  l_ins_hist_csr.new_attribute19 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute19 = l_curr_instance_rec.attribute19 )
                      OR ( p_instance_rec.attribute19 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute19 := NULL;
                           l_ins_hist_csr.new_attribute19 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute19 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute19 := p_instance_rec.attribute19;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute19 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute19 := p_instance_rec.attribute19;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute20 IS NULL
                AND  l_ins_hist_csr.new_attribute20 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute20 = l_curr_instance_rec.attribute20 )
                      OR ( p_instance_rec.attribute20 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute20 := NULL;
                           l_ins_hist_csr.new_attribute20 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute20 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute20 := p_instance_rec.attribute20;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute20 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute20 := p_instance_rec.attribute20;
             END IF;

             --
             IF    ( l_ins_hist_csr.old_attribute21 IS NULL
                AND  l_ins_hist_csr.new_attribute21 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute21 = l_curr_instance_rec.attribute21 )
                      OR ( p_instance_rec.attribute21 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute21 := NULL;
                           l_ins_hist_csr.new_attribute21 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute21 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute21 := p_instance_rec.attribute21;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute21 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute21 := p_instance_rec.attribute21;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute22 IS NULL
                AND  l_ins_hist_csr.new_attribute22 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute22 = l_curr_instance_rec.attribute22 )
                      OR ( p_instance_rec.attribute22 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute22 := NULL;
                           l_ins_hist_csr.new_attribute22 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute22 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute22 := p_instance_rec.attribute22;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute22 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute22 := p_instance_rec.attribute22;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute23 IS NULL
                AND  l_ins_hist_csr.new_attribute23 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute23 = l_curr_instance_rec.attribute23 )
                      OR ( p_instance_rec.attribute23 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute23 := NULL;
                           l_ins_hist_csr.new_attribute23 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute23 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute23 := p_instance_rec.attribute23;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute23 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute23 := p_instance_rec.attribute23;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute24 IS NULL
                AND  l_ins_hist_csr.new_attribute24 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute24 = l_curr_instance_rec.attribute24 )
                      OR ( p_instance_rec.attribute24 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute24 := NULL;
                           l_ins_hist_csr.new_attribute24 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute24 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute24 := p_instance_rec.attribute24;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute24 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute24 := p_instance_rec.attribute24;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute25 IS NULL
                AND  l_ins_hist_csr.new_attribute25 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute25 = l_curr_instance_rec.attribute25 )
                      OR ( p_instance_rec.attribute25 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute25 := NULL;
                           l_ins_hist_csr.new_attribute25 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute25 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute25 := p_instance_rec.attribute25;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute25 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute25 := p_instance_rec.attribute25;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute26 IS NULL
                AND  l_ins_hist_csr.new_attribute26 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute26 = l_curr_instance_rec.attribute26 )
                      OR ( p_instance_rec.attribute26 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute26 := NULL;
                           l_ins_hist_csr.new_attribute26 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute26 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute26 := p_instance_rec.attribute26;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute26 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute26 := p_instance_rec.attribute26;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute27 IS NULL
                AND  l_ins_hist_csr.new_attribute27 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute27 = l_curr_instance_rec.attribute27 )
                      OR ( p_instance_rec.attribute27 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute27 := NULL;
                           l_ins_hist_csr.new_attribute27 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute27 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute27 := p_instance_rec.attribute27;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute27 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute27 := p_instance_rec.attribute27;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute28 IS NULL
                AND  l_ins_hist_csr.new_attribute28 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute28 = l_curr_instance_rec.attribute28 )
                      OR ( p_instance_rec.attribute28 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute28 := NULL;
                           l_ins_hist_csr.new_attribute28 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute28 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute28 := p_instance_rec.attribute28;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute28 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute28 := p_instance_rec.attribute28;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute29 IS NULL
                AND  l_ins_hist_csr.new_attribute29 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute29 = l_curr_instance_rec.attribute29 )
                      OR ( p_instance_rec.attribute29 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute29 := NULL;
                           l_ins_hist_csr.new_attribute29 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute29 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute29 := p_instance_rec.attribute29;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute29 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute29 := p_instance_rec.attribute29;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_attribute30 IS NULL
                AND  l_ins_hist_csr.new_attribute30 IS NULL ) THEN
                     IF  ( p_instance_rec.attribute30 = l_curr_instance_rec.attribute30 )
                      OR ( p_instance_rec.attribute30 = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_attribute30 := NULL;
                           l_ins_hist_csr.new_attribute30 := NULL;
                     ELSE
                           l_ins_hist_csr.old_attribute30 := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_attribute30 := p_instance_rec.attribute30;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_attribute30 := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_attribute30 := p_instance_rec.attribute30;
             END IF;
             --
  	 --end of code for eam integration--
               -- Addition of columns for FA Integration
             IF    ( l_ins_hist_csr.old_purchase_unit_price IS NULL
                AND  l_ins_hist_csr.new_purchase_unit_price IS NULL ) THEN
                     IF  ( p_instance_rec.purchase_unit_price = l_curr_instance_rec.purchase_unit_price )
                      OR ( p_instance_rec.purchase_unit_price = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_purchase_unit_price := NULL;
                           l_ins_hist_csr.new_purchase_unit_price := NULL;
                     ELSE
                           l_ins_hist_csr.old_purchase_unit_price := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_purchase_unit_price := p_instance_rec.purchase_unit_price;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_purchase_unit_price := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_purchase_unit_price := p_instance_rec.purchase_unit_price;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_purchase_currency_code IS NULL
                AND  l_ins_hist_csr.new_purchase_currency_code IS NULL ) THEN
                     IF  ( p_instance_rec.purchase_currency_code = l_curr_instance_rec.purchase_currency_code )
                      OR ( p_instance_rec.purchase_currency_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_purchase_currency_code := NULL;
                           l_ins_hist_csr.new_purchase_currency_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_purchase_currency_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_purchase_currency_code := p_instance_rec.purchase_currency_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_purchase_currency_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_purchase_currency_code := p_instance_rec.purchase_currency_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_payables_unit_price IS NULL
                AND  l_ins_hist_csr.new_payables_unit_price IS NULL ) THEN
                     IF  ( p_instance_rec.payables_unit_price = l_curr_instance_rec.payables_unit_price )
                      OR ( p_instance_rec.payables_unit_price = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_payables_unit_price := NULL;
                           l_ins_hist_csr.new_payables_unit_price := NULL;
                     ELSE
                           l_ins_hist_csr.old_payables_unit_price := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_payables_unit_price := p_instance_rec.payables_unit_price;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_payables_unit_price := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_payables_unit_price := p_instance_rec.payables_unit_price;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_payables_currency_code IS NULL
                AND  l_ins_hist_csr.new_payables_currency_code IS NULL ) THEN
                     IF  ( p_instance_rec.payables_currency_code = l_curr_instance_rec.payables_currency_code )
                      OR ( p_instance_rec.payables_currency_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_payables_currency_code := NULL;
                           l_ins_hist_csr.new_payables_currency_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_payables_currency_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_payables_currency_code := p_instance_rec.payables_currency_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_payables_currency_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_payables_currency_code := p_instance_rec.payables_currency_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_sales_unit_price IS NULL
                AND  l_ins_hist_csr.new_sales_unit_price IS NULL ) THEN
                     IF  ( p_instance_rec.sales_unit_price = l_curr_instance_rec.sales_unit_price )
                      OR ( p_instance_rec.sales_unit_price = fnd_api.g_miss_num ) THEN
                           l_ins_hist_csr.old_sales_unit_price := NULL;
                           l_ins_hist_csr.new_sales_unit_price := NULL;
                     ELSE
                           l_ins_hist_csr.old_sales_unit_price := fnd_api.g_miss_num;
                           l_ins_hist_csr.new_sales_unit_price := p_instance_rec.sales_unit_price;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_sales_unit_price := fnd_api.g_miss_num;
                     l_ins_hist_csr.new_sales_unit_price := p_instance_rec.sales_unit_price;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_sales_currency_code IS NULL
                AND  l_ins_hist_csr.new_sales_currency_code IS NULL ) THEN
                     IF  ( p_instance_rec.sales_currency_code = l_curr_instance_rec.sales_currency_code )
                      OR ( p_instance_rec.sales_currency_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_sales_currency_code := NULL;
                           l_ins_hist_csr.new_sales_currency_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_sales_currency_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_sales_currency_code := p_instance_rec.sales_currency_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_sales_currency_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_sales_currency_code := p_instance_rec.sales_currency_code;
             END IF;
             --
             IF    ( l_ins_hist_csr.old_operational_status_code IS NULL
                AND  l_ins_hist_csr.new_operational_status_code IS NULL ) THEN
                     IF  ( p_instance_rec.operational_status_code = l_curr_instance_rec.operational_status_code )
                      OR ( p_instance_rec.operational_status_code = fnd_api.g_miss_char ) THEN
                           l_ins_hist_csr.old_operational_status_code := NULL;
                           l_ins_hist_csr.new_operational_status_code := NULL;
                     ELSE
                           l_ins_hist_csr.old_operational_status_code := fnd_api.g_miss_char;
                           l_ins_hist_csr.new_operational_status_code := p_instance_rec.operational_status_code;
                     END IF;
             ELSE
                     l_ins_hist_csr.old_operational_status_code := fnd_api.g_miss_char;
                     l_ins_hist_csr.new_operational_status_code := p_instance_rec.operational_status_code;
             END IF;
             --
               -- End addition of columns for FA Integration



-- End addition for bug 2671179
         CSI_ITEM_INSTANCES_H_PKG.Update_Row
           ( p_INSTANCE_HISTORY_ID               => l_ins_hist_id
            ,p_INSTANCE_ID                       => fnd_api.g_miss_num
            ,p_TRANSACTION_ID                    => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_NUMBER               => l_ins_hist_csr.OLD_INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => l_ins_hist_csr.NEW_INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_ins_hist_csr.OLD_EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => l_ins_hist_csr.NEW_EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_ins_hist_csr.OLD_INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => l_ins_hist_csr.NEW_INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_ins_hist_csr.OLD_INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => l_ins_hist_csr.NEW_INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_ins_hist_csr.OLD_INV_MASTER_ORGANIZATION_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => l_ins_hist_csr.NEW_INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => l_ins_hist_csr.OLD_SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => l_ins_hist_csr.NEW_SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_ins_hist_csr.OLD_MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => l_ins_hist_csr.NEW_MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_ins_hist_csr.OLD_LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => l_ins_hist_csr.NEW_LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_ins_hist_csr.OLD_QUANTITY
            ,p_NEW_QUANTITY                      => l_ins_hist_csr.NEW_QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_ins_hist_csr.OLD_UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => l_ins_hist_csr.NEW_UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_ins_hist_csr.OLD_ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_ins_hist_csr.NEW_ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_ins_hist_csr.OLD_INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => l_ins_hist_csr.NEW_INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_ins_hist_csr.OLD_INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_ins_hist_csr.NEW_INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_ins_hist_csr.OLD_CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => l_ins_hist_csr.NEW_CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_ins_hist_csr.OLD_MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => l_ins_hist_csr.NEW_MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_ins_hist_csr.OLD_SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => l_ins_hist_csr.NEW_SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_ins_hist_csr.OLD_SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_ins_hist_csr.NEW_SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => l_ins_hist_csr.OLD_INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => l_ins_hist_csr.NEW_INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_ins_hist_csr.OLD_ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => l_ins_hist_csr.NEW_ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_ins_hist_csr.OLD_ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_ins_hist_csr.NEW_ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_ins_hist_csr.OLD_LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_ins_hist_csr.NEW_LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_ins_hist_csr.OLD_LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_ins_hist_csr.NEW_LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_ins_hist_csr.OLD_INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_ins_hist_csr.NEW_INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_ins_hist_csr.OLD_INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_ins_hist_csr.NEW_INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_ins_hist_csr.OLD_INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_ins_hist_csr.NEW_INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_ins_hist_csr.OLD_PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_ins_hist_csr.NEW_PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_ins_hist_csr.OLD_PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_ins_hist_csr.NEW_PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_ins_hist_csr.OLD_IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_ins_hist_csr.NEW_IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_ins_hist_csr.OLD_WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_ins_hist_csr.NEW_WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_ins_hist_csr.OLD_PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_ins_hist_csr.NEW_PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_ins_hist_csr.OLD_COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => l_ins_hist_csr.NEW_COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => fnd_api.g_miss_char
            ,p_NEW_CONTEXT                       => l_ins_hist_csr.NEW_CONTEXT
            ,P_OLD_CONTEXT                       => l_ins_hist_csr.OLD_CONTEXT
            ,p_NEW_ATTRIBUTE1                    => l_ins_hist_csr.NEW_ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_ins_hist_csr.OLD_ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => l_ins_hist_csr.NEW_ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_ins_hist_csr.OLD_ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => l_ins_hist_csr.NEW_ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_ins_hist_csr.OLD_ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => l_ins_hist_csr.NEW_ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_ins_hist_csr.OLD_ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => l_ins_hist_csr.NEW_ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_ins_hist_csr.OLD_ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => l_ins_hist_csr.NEW_ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_ins_hist_csr.OLD_ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => l_ins_hist_csr.NEW_ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_ins_hist_csr.OLD_ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => l_ins_hist_csr.NEW_ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_ins_hist_csr.OLD_ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => l_ins_hist_csr.NEW_ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_ins_hist_csr.OLD_ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => l_ins_hist_csr.NEW_ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_ins_hist_csr.OLD_ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => l_ins_hist_csr.NEW_ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_ins_hist_csr.OLD_ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => l_ins_hist_csr.NEW_ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_ins_hist_csr.OLD_ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => l_ins_hist_csr.NEW_ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_ins_hist_csr.OLD_ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => l_ins_hist_csr.NEW_ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_ins_hist_csr.OLD_ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => l_ins_hist_csr.NEW_ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_ins_hist_csr.OLD_ATTRIBUTE15
            ,p_CREATED_BY                        => fnd_api.g_miss_num
            ,p_CREATION_DATE                     => fnd_api.g_miss_date
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => fnd_api.g_miss_num
            ,p_OLD_INST_LOC_TYPE_CODE            => l_ins_hist_csr.OLD_INST_LOC_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_ins_hist_csr.NEW_INST_LOC_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_ins_hist_csr.OLD_INST_LOC_ID
            ,p_NEW_INST_LOC_ID                   => l_ins_hist_csr.NEW_INST_LOC_ID
            ,p_OLD_INST_USAGE_CODE               => l_ins_hist_csr.OLD_INST_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => l_ins_hist_csr.NEW_INST_USAGE_CODE
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => l_ins_hist_csr.OLD_LAST_VLD_ORGANIZATION_ID
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => l_ins_hist_csr.NEW_LAST_VLD_ORGANIZATION_ID
            ,p_OLD_CONFIG_INST_REV_NUM           => l_ins_hist_csr.OLD_CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => l_ins_hist_csr.NEW_CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_ins_hist_csr.OLD_CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => l_ins_hist_csr.NEW_CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_ins_hist_csr.OLD_INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => l_ins_hist_csr.NEW_INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => l_ins_hist_csr.OLD_INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_ins_hist_csr.NEW_INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_ins_hist_csr.OLD_RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => l_ins_hist_csr.NEW_RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_ins_hist_csr.OLD_ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => l_ins_hist_csr.NEW_ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_ins_hist_csr.OLD_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_ins_hist_csr.NEW_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_ins_hist_csr.OLD_LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_ins_hist_csr.NEW_LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_ins_hist_csr.OLD_LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => l_ins_hist_csr.NEW_LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_ins_hist_csr.OLD_LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => l_ins_hist_csr.NEW_LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_ins_hist_csr.OLD_LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => l_ins_hist_csr.NEW_LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_ins_hist_csr.OLD_LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => l_ins_hist_csr.NEW_LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_ins_hist_csr.OLD_LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => l_ins_hist_csr.NEW_LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_ins_hist_csr.OLD_LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_ins_hist_csr.NEW_LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_ins_hist_csr.OLD_LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => l_ins_hist_csr.NEW_LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_ins_hist_csr.OLD_NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => l_ins_hist_csr.NEW_NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_ins_hist_csr.OLD_MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => l_ins_hist_csr.NEW_MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_ins_hist_csr.OLD_PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => l_ins_hist_csr.NEW_PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_ins_hist_csr.OLD_ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => l_ins_hist_csr.NEW_ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_ins_hist_csr.OLD_CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => l_ins_hist_csr.NEW_CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_ins_hist_csr.OLD_EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => l_ins_hist_csr.NEW_EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_ins_hist_csr.OLD_INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => l_ins_hist_csr.NEW_INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_ins_hist_csr.OLD_LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => l_ins_hist_csr.NEW_LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_ins_hist_csr.OLD_OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => l_ins_hist_csr.NEW_OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_ins_hist_csr.OLD_CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => l_ins_hist_csr.NEW_CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_ins_hist_csr.OLD_SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => l_ins_hist_csr.NEW_SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_ins_hist_csr.OLD_ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => l_ins_hist_csr.NEW_ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_ins_hist_csr.OLD_ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => l_ins_hist_csr.NEW_ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_ins_hist_csr.OLD_ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => l_ins_hist_csr.NEW_ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_ins_hist_csr.OLD_ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => l_ins_hist_csr.NEW_ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_ins_hist_csr.OLD_ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => l_ins_hist_csr.NEW_ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_ins_hist_csr.OLD_ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => l_ins_hist_csr.NEW_ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_ins_hist_csr.OLD_ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => l_ins_hist_csr.NEW_ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_ins_hist_csr.OLD_ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => l_ins_hist_csr.NEW_ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_ins_hist_csr.OLD_ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => l_ins_hist_csr.NEW_ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_ins_hist_csr.OLD_ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => l_ins_hist_csr.NEW_ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_ins_hist_csr.OLD_ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => l_ins_hist_csr.NEW_ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_ins_hist_csr.OLD_ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => l_ins_hist_csr.NEW_ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_ins_hist_csr.OLD_ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => l_ins_hist_csr.NEW_ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_ins_hist_csr.OLD_ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => l_ins_hist_csr.NEW_ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_ins_hist_csr.OLD_ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => l_ins_hist_csr.NEW_ATTRIBUTE30
  	    --end of parameters addition for eam integration--
        -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_ins_hist_csr.OLD_PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => l_ins_hist_csr.NEW_PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_ins_hist_csr.OLD_PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => l_ins_hist_csr.NEW_PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_ins_hist_csr.OLD_PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => l_ins_hist_csr.NEW_PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_ins_hist_csr.OLD_PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => l_ins_hist_csr.NEW_PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_ins_hist_csr.OLD_SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => l_ins_hist_csr.NEW_SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_ins_hist_csr.OLD_SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => l_ins_hist_csr.NEW_SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_ins_hist_csr.OLD_OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_ins_hist_csr.NEW_OPERATIONAL_STATUS_CODE
        -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => l_ins_hist_csr.OLD_SOURCE_CODE
            ,p_NEW_SOURCE_CODE                   => l_ins_hist_csr.NEW_SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );

        END IF;

      EXCEPTION

      WHEN NO_DATA_FOUND THEN

        IF (l_mod_value = 0) THEN

          -- If the mod value is 0 then dump all the columns both changed and unchanged
          -- changed columns have old and new values while the unchanged values have old and new values
          -- exactly same
          IF (p_instance_rec.INSTANCE_NUMBER = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INSTANCE_NUMBER := l_curr_instance_rec.INSTANCE_NUMBER;
          END IF;
          IF (p_instance_rec.EXTERNAL_REFERENCE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.EXTERNAL_REFERENCE := l_curr_instance_rec.EXTERNAL_REFERENCE;
          END IF;
          IF (p_instance_rec.INVENTORY_ITEM_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INVENTORY_ITEM_ID := l_curr_instance_rec.INVENTORY_ITEM_ID;
          END IF;
          IF (p_instance_rec.INVENTORY_REVISION = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INVENTORY_REVISION := l_curr_instance_rec.INVENTORY_REVISION;
          END IF;
          IF (p_instance_rec.INV_MASTER_ORGANIZATION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INV_MASTER_ORGANIZATION_ID := l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID;
          END IF;
          IF (p_instance_rec.SERIAL_NUMBER = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.SERIAL_NUMBER := l_curr_instance_rec.SERIAL_NUMBER;
          END IF;
          IF (p_instance_rec.MFG_SERIAL_NUMBER_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.MFG_SERIAL_NUMBER_FLAG := l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG;
          END IF;
          IF (p_instance_rec.LOT_NUMBER = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.LOT_NUMBER := l_curr_instance_rec.LOT_NUMBER;
          END IF;
          IF (p_instance_rec.QUANTITY = FND_API.G_MISS_NUM) THEN
              p_instance_rec.QUANTITY := l_curr_instance_rec.QUANTITY;
          END IF;
          IF (p_instance_rec.UNIT_OF_MEASURE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.UNIT_OF_MEASURE := l_curr_instance_rec.UNIT_OF_MEASURE;
          END IF;
          IF (p_instance_rec.ACCOUNTING_CLASS_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ACCOUNTING_CLASS_CODE := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
          END IF;
          IF (p_instance_rec.INSTANCE_CONDITION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INSTANCE_CONDITION_ID := l_curr_instance_rec.INSTANCE_CONDITION_ID;
          END IF;
          IF (p_instance_rec.INSTANCE_STATUS_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INSTANCE_STATUS_ID := l_curr_instance_rec.INSTANCE_STATUS_ID;
          END IF;
          IF (p_instance_rec.CUSTOMER_VIEW_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.CUSTOMER_VIEW_FLAG := l_curr_instance_rec.CUSTOMER_VIEW_FLAG;
          END IF;
          IF (p_instance_rec.MERCHANT_VIEW_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.MERCHANT_VIEW_FLAG := l_curr_instance_rec.MERCHANT_VIEW_FLAG;
          END IF;
          IF (p_instance_rec.SELLABLE_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.SELLABLE_FLAG := l_curr_instance_rec.SELLABLE_FLAG;
          END IF;
          IF (p_instance_rec.SYSTEM_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.SYSTEM_ID := l_curr_instance_rec.SYSTEM_ID;
          END IF;
          IF (p_instance_rec.INSTANCE_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INSTANCE_TYPE_CODE := l_curr_instance_rec.INSTANCE_TYPE_CODE;
          END IF;
          IF (p_instance_rec.ACTIVE_START_DATE = FND_API.G_MISS_DATE) THEN
              p_instance_rec.ACTIVE_START_DATE := l_curr_instance_rec.ACTIVE_START_DATE;
          END IF;
          IF (p_instance_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE) THEN
              p_instance_rec.ACTIVE_END_DATE := l_curr_instance_rec.ACTIVE_END_DATE;
          END IF;
          IF (p_instance_rec.LOCATION_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.LOCATION_TYPE_CODE := l_curr_instance_rec.LOCATION_TYPE_CODE;
          END IF;
          IF (p_instance_rec.LOCATION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LOCATION_ID := l_curr_instance_rec.LOCATION_ID;
          END IF;
          IF (p_instance_rec.INV_ORGANIZATION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INV_ORGANIZATION_ID := l_curr_instance_rec.INV_ORGANIZATION_ID;
          END IF;
          IF (p_instance_rec.INV_SUBINVENTORY_NAME = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INV_SUBINVENTORY_NAME := l_curr_instance_rec.INV_SUBINVENTORY_NAME;
          END IF;
          IF (p_instance_rec.INV_LOCATOR_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INV_LOCATOR_ID := l_curr_instance_rec.INV_LOCATOR_ID;
          END IF;
          IF (p_instance_rec.PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.PA_PROJECT_ID := l_curr_instance_rec.PA_PROJECT_ID;
          END IF;
          IF (p_instance_rec.PA_PROJECT_TASK_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.PA_PROJECT_TASK_ID := l_curr_instance_rec.PA_PROJECT_TASK_ID;
          END IF;
          IF (p_instance_rec.IN_TRANSIT_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.IN_TRANSIT_ORDER_LINE_ID := l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
          END IF;
          IF (p_instance_rec.LAST_OE_AGREEMENT_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_OE_AGREEMENT_ID := l_curr_instance_rec.LAST_OE_AGREEMENT_ID;
          END IF;
          IF (p_instance_rec.LAST_OE_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID;
          END IF;
          IF (p_instance_rec.LAST_OE_RMA_LINE_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
          END IF;
          IF (p_instance_rec.LAST_WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID;
          END IF;
          IF (p_instance_rec.LAST_PO_PO_LINE_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_PO_PO_LINE_ID := l_curr_instance_rec.LAST_PO_PO_LINE_ID;
          END IF;
          IF (p_instance_rec.LAST_PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID;
          END IF;
          IF (p_instance_rec.LAST_PA_TASK_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID;
          END IF;
          IF (p_instance_rec.LAST_TXN_LINE_DETAIL_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID;
          END IF;
          IF (p_instance_rec.LAST_OE_PO_NUMBER = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER;
          END IF;
          IF (p_instance_rec.WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.WIP_JOB_ID := l_curr_instance_rec.WIP_JOB_ID;
          END IF;
          IF (p_instance_rec.PO_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.PO_ORDER_LINE_ID := l_curr_instance_rec.PO_ORDER_LINE_ID;
          END IF;
          IF (p_instance_rec.INSTALL_DATE = FND_API.G_MISS_DATE) THEN
              p_instance_rec.INSTALL_DATE := l_curr_instance_rec.INSTALL_DATE;
          END IF;
          IF (p_instance_rec.MANUALLY_CREATED_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.MANUALLY_CREATED_FLAG := l_curr_instance_rec.MANUALLY_CREATED_FLAG;
          END IF;
          IF (p_instance_rec.RETURN_BY_DATE = FND_API.G_MISS_DATE) THEN
              p_instance_rec.RETURN_BY_DATE := l_curr_instance_rec.RETURN_BY_DATE;
          END IF;
          IF (p_instance_rec.ACTUAL_RETURN_DATE = FND_API.G_MISS_DATE) THEN
              p_instance_rec.ACTUAL_RETURN_DATE := l_curr_instance_rec.ACTUAL_RETURN_DATE;
          END IF;
          IF (p_instance_rec.CREATION_COMPLETE_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.CREATION_COMPLETE_FLAG := l_curr_instance_rec.CREATION_COMPLETE_FLAG;
          END IF;
          IF (p_instance_rec.COMPLETENESS_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.COMPLETENESS_FLAG := l_curr_instance_rec.COMPLETENESS_FLAG;
          END IF;
          IF (p_instance_rec.CONTEXT = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.CONTEXT := l_curr_instance_rec.CONTEXT;
          END IF;
          IF (p_instance_rec.ATTRIBUTE1 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE1 := l_curr_instance_rec.ATTRIBUTE1;
          END IF;
          IF (p_instance_rec.ATTRIBUTE2 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE2 := l_curr_instance_rec.ATTRIBUTE2;
          END IF;
          IF (p_instance_rec.ATTRIBUTE3 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE3 := l_curr_instance_rec.ATTRIBUTE3;
          END IF;
          IF (p_instance_rec.ATTRIBUTE4 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE4 := l_curr_instance_rec.ATTRIBUTE4;
          END IF;
          IF (p_instance_rec.ATTRIBUTE5 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE5 := l_curr_instance_rec.ATTRIBUTE5;
          END IF;
          IF (p_instance_rec.ATTRIBUTE6 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE6 := l_curr_instance_rec.ATTRIBUTE6;
          END IF;
          IF (p_instance_rec.ATTRIBUTE7 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE7 := l_curr_instance_rec.ATTRIBUTE7;
          END IF;
          IF (p_instance_rec.ATTRIBUTE8 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE8 := l_curr_instance_rec.ATTRIBUTE8;
          END IF;
          IF (p_instance_rec.ATTRIBUTE9 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE9 := l_curr_instance_rec.ATTRIBUTE9;
          END IF;
          IF (p_instance_rec.ATTRIBUTE10 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE10 := l_curr_instance_rec.ATTRIBUTE10;
          END IF;
          IF (p_instance_rec.ATTRIBUTE11 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE11 := l_curr_instance_rec.ATTRIBUTE11;
          END IF;
          IF (p_instance_rec.ATTRIBUTE12 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE12 := l_curr_instance_rec.ATTRIBUTE12;
          END IF;
          IF (p_instance_rec.ATTRIBUTE13 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE13 := l_curr_instance_rec.ATTRIBUTE13;
          END IF;
          IF (p_instance_rec.ATTRIBUTE14 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE14 := l_curr_instance_rec.ATTRIBUTE14;
          END IF;
          IF (p_instance_rec.ATTRIBUTE15 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE15 := l_curr_instance_rec.ATTRIBUTE15;
          END IF;
          IF (p_instance_rec.OBJECT_VERSION_NUMBER = FND_API.G_MISS_NUM) THEN
              p_instance_rec.OBJECT_VERSION_NUMBER := l_curr_instance_rec.OBJECT_VERSION_NUMBER;
          END IF;
          IF (p_instance_rec.INSTALL_LOCATION_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INSTALL_LOCATION_TYPE_CODE := l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE;
          END IF;
          IF (p_instance_rec.INSTALL_LOCATION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.INSTALL_LOCATION_ID := l_curr_instance_rec.INSTALL_LOCATION_ID;
          END IF;
          IF (p_instance_rec.INSTANCE_USAGE_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INSTANCE_USAGE_CODE := l_curr_instance_rec.INSTANCE_USAGE_CODE;
          END IF;
          IF L_LAST_VLD_ORGANIZATION_ID = FND_API.G_MISS_NUM THEN
             l_last_vld_organization_id := l_cur_instance_rec.LAST_VLD_ORGANIZATION_ID;
          END IF;
          IF (p_instance_rec.CONFIG_INST_REV_NUM = FND_API.G_MISS_NUM) THEN
              p_instance_rec.CONFIG_INST_REV_NUM := l_curr_instance_rec.CONFIG_INST_REV_NUM;
          END IF;
          IF (p_instance_rec.CONFIG_VALID_STATUS = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.CONFIG_VALID_STATUS := l_curr_instance_rec.CONFIG_VALID_STATUS;
          END IF;
          IF (p_instance_rec.INSTANCE_DESCRIPTION = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INSTANCE_DESCRIPTION := l_curr_instance_rec.INSTANCE_DESCRIPTION;
          END IF;
        --start of code for eam integration--
          IF (p_instance_rec.NETWORK_ASSET_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.NETWORK_ASSET_FLAG := l_curr_instance_rec.NETWORK_ASSET_FLAG;
          END IF;
          IF (p_instance_rec.MAINTAINABLE_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.MAINTAINABLE_FLAG := l_curr_instance_rec.MAINTAINABLE_FLAG;
          END IF;
          IF (p_instance_rec.PN_LOCATION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.PN_LOCATION_ID := l_curr_instance_rec.PN_LOCATION_ID;
          END IF;
          IF (p_instance_rec.ASSET_CRITICALITY_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ASSET_CRITICALITY_CODE := l_curr_instance_rec.ASSET_CRITICALITY_CODE;
          END IF;
          IF (p_instance_rec.CATEGORY_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.CATEGORY_ID := l_curr_instance_rec.CATEGORY_ID;
          END IF;
          IF (p_instance_rec.EQUIPMENT_GEN_OBJECT_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.EQUIPMENT_GEN_OBJECT_ID := l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
          END IF;
          IF (p_instance_rec.INSTANTIATION_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.INSTANTIATION_FLAG := l_curr_instance_rec.INSTANTIATION_FLAG;
          END IF;
          IF (p_instance_rec.LINEAR_LOCATION_ID = FND_API.G_MISS_NUM) THEN
              p_instance_rec.LINEAR_LOCATION_ID := l_curr_instance_rec.LINEAR_LOCATION_ID;
          END IF;
          IF (p_instance_rec.OPERATIONAL_LOG_FLAG = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.OPERATIONAL_LOG_FLAG := l_curr_instance_rec.OPERATIONAL_LOG_FLAG;
          END IF;

          IF (p_instance_rec.CHECKIN_STATUS = FND_API.G_MISS_NUM) THEN
              p_instance_rec.CHECKIN_STATUS := l_curr_instance_rec.CHECKIN_STATUS;
          END IF;
          IF (p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE = FND_API.G_MISS_DATE) THEN
              p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
          END IF;

          IF (p_instance_rec.ATTRIBUTE16 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE16 := l_curr_instance_rec.ATTRIBUTE16;
          END IF;
          IF (p_instance_rec.ATTRIBUTE17 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE17 := l_curr_instance_rec.ATTRIBUTE17;
          END IF;
          IF (p_instance_rec.ATTRIBUTE18 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE18 := l_curr_instance_rec.ATTRIBUTE18;
          END IF;
          IF (p_instance_rec.ATTRIBUTE19 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE19 := l_curr_instance_rec.ATTRIBUTE19;
          END IF;
          IF (p_instance_rec.ATTRIBUTE20 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE20 := l_curr_instance_rec.ATTRIBUTE20;
          END IF;
          IF (p_instance_rec.ATTRIBUTE21 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE21 := l_curr_instance_rec.ATTRIBUTE21;
          END IF;
          IF (p_instance_rec.ATTRIBUTE22 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE22 := l_curr_instance_rec.ATTRIBUTE22;
          END IF;
          IF (p_instance_rec.ATTRIBUTE23 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE23 := l_curr_instance_rec.ATTRIBUTE23;
          END IF;
          IF (p_instance_rec.ATTRIBUTE24 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE24 := l_curr_instance_rec.ATTRIBUTE24;
          END IF;
          IF (p_instance_rec.ATTRIBUTE25 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE25 := l_curr_instance_rec.ATTRIBUTE25;
          END IF;
          IF (p_instance_rec.ATTRIBUTE26 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE26 := l_curr_instance_rec.ATTRIBUTE26;
          END IF;
          IF (p_instance_rec.ATTRIBUTE27 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE27 := l_curr_instance_rec.ATTRIBUTE27;
          END IF;
          IF (p_instance_rec.ATTRIBUTE28 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE28 := l_curr_instance_rec.ATTRIBUTE28;
          END IF;
          IF (p_instance_rec.ATTRIBUTE29 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE29 := l_curr_instance_rec.ATTRIBUTE29;
          END IF;
          IF (p_instance_rec.ATTRIBUTE30 = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.ATTRIBUTE30 := l_curr_instance_rec.ATTRIBUTE30;
          END IF;

        --end of code for eam integration--
        -- Addition of columns for FA Integration
          IF (p_instance_rec.PURCHASE_UNIT_PRICE = FND_API.G_MISS_NUM) THEN
              p_instance_rec.PURCHASE_UNIT_PRICE := l_curr_instance_rec.PURCHASE_UNIT_PRICE;
          END IF;

          IF (p_instance_rec.PURCHASE_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.PURCHASE_CURRENCY_CODE := l_curr_instance_rec.PURCHASE_CURRENCY_CODE;
          END IF;

          IF (p_instance_rec.PAYABLES_UNIT_PRICE = FND_API.G_MISS_NUM) THEN
              p_instance_rec.PAYABLES_UNIT_PRICE := l_curr_instance_rec.PAYABLES_UNIT_PRICE;
          END IF;

          IF (p_instance_rec.PAYABLES_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.PAYABLES_CURRENCY_CODE := l_curr_instance_rec.PAYABLES_CURRENCY_CODE;
          END IF;

          IF (p_instance_rec.SALES_UNIT_PRICE = FND_API.G_MISS_NUM) THEN
              p_instance_rec.SALES_UNIT_PRICE := l_curr_instance_rec.SALES_UNIT_PRICE;
          END IF;

          IF (p_instance_rec.SALES_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.SALES_CURRENCY_CODE := l_curr_instance_rec.SALES_CURRENCY_CODE;
          END IF;

          IF (p_instance_rec.OPERATIONAL_STATUS_CODE = FND_API.G_MISS_CHAR) THEN
              p_instance_rec.OPERATIONAL_STATUS_CODE := l_curr_instance_rec.OPERATIONAL_STATUS_CODE;
          END IF;
        -- End addition of columns for FA Integration

          CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => p_instance_rec.instance_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => l_curr_instance_rec.INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => p_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_curr_instance_rec.EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => p_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_curr_instance_rec.INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => p_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_curr_instance_rec.INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => p_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => p_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => l_curr_instance_rec.SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => p_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => p_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_curr_instance_rec.LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => p_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_curr_instance_rec.QUANTITY
            ,p_NEW_QUANTITY                      => p_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_curr_instance_rec.UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => p_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_curr_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => p_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_curr_instance_rec.INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => p_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_curr_instance_rec.INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => p_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_curr_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => p_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_curr_instance_rec.MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => p_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_curr_instance_rec.SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => p_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_curr_instance_rec.SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => p_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => l_curr_instance_rec.INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => p_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_curr_instance_rec.ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => p_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_curr_instance_rec.ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => p_instance_rec.ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_curr_instance_rec.LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => p_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_curr_instance_rec.LOCATION_ID
            ,p_NEW_LOCATION_ID                   => p_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_curr_instance_rec.INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => p_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_curr_instance_rec.INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => p_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_curr_instance_rec.INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => p_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_curr_instance_rec.PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => p_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_curr_instance_rec.PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => p_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_curr_instance_rec.WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => p_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_curr_instance_rec.PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => p_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_curr_instance_rec.COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => p_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'Y'
            ,p_NEW_CONTEXT                       => p_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => l_curr_instance_rec.CONTEXT
            ,p_NEW_ATTRIBUTE1                    => p_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_curr_instance_rec.ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => p_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_curr_instance_rec.ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => p_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_curr_instance_rec.ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => p_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_curr_instance_rec.ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => p_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_curr_instance_rec.ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => p_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_curr_instance_rec.ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => p_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_curr_instance_rec.ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => p_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_curr_instance_rec.ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => p_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_curr_instance_rec.ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => p_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_curr_instance_rec.ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => p_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_curr_instance_rec.ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => p_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_curr_instance_rec.ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => p_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_curr_instance_rec.ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => p_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_curr_instance_rec.ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => p_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_curr_instance_rec.ATTRIBUTE15
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_curr_instance_rec.INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => p_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => l_curr_instance_rec.INSTANCE_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => p_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_last_vld_organization_id      => l_cur_instance_rec.last_vld_organization_id
            ,p_NEW_last_vld_organization_id      => l_last_vld_organization_id
            ,p_OLD_CONFIG_INST_REV_NUM           => l_curr_instance_rec.CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => p_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_curr_instance_rec.CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => p_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_curr_instance_rec.INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => p_instance_rec.INSTANCE_DESCRIPTION
            -- Added on jan1503
            ,p_OLD_INSTALL_DATE                  => l_curr_instance_rec.INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => p_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_curr_instance_rec.RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => p_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_curr_instance_rec.ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => p_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_curr_instance_rec.LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => p_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => p_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_curr_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => p_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_curr_instance_rec.LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => p_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_curr_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => p_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_curr_instance_rec.LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => p_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_curr_instance_rec.LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => p_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => p_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_curr_instance_rec.LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => p_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_curr_instance_rec.NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => p_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_curr_instance_rec.MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => p_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_curr_instance_rec.PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => p_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_curr_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => p_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_curr_instance_rec.CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => p_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_curr_instance_rec.INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => p_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_curr_instance_rec.LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => p_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_curr_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => p_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_curr_instance_rec.CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => p_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_curr_instance_rec.ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => p_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_curr_instance_rec.ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => p_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_curr_instance_rec.ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => p_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_curr_instance_rec.ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => p_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_curr_instance_rec.ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => p_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_curr_instance_rec.ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => p_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_curr_instance_rec.ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => p_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_curr_instance_rec.ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => p_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_curr_instance_rec.ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => p_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_curr_instance_rec.ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => p_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_curr_instance_rec.ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => p_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_curr_instance_rec.ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => p_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_curr_instance_rec.ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => p_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_curr_instance_rec.ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => p_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_curr_instance_rec.ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => p_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_curr_instance_rec.PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => p_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_curr_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => p_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_curr_instance_rec.PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => p_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_curr_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => p_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_curr_instance_rec.SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => p_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_curr_instance_rec.SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => p_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_curr_instance_rec.OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => p_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => l_curr_instance_rec.SOURCE_CODE
            ,p_NEW_SOURCE_CODE                   => p_instance_rec.SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );

         ELSE --  l_mod_value <> 0

          -- If the mod value is not equal to zero then dump only the changed columns
          -- while the unchanged values have old and new values as null

           IF (p_instance_rec.instance_number = fnd_api.g_miss_char) OR
               NVL(p_instance_rec.instance_number, fnd_api.g_miss_char) = NVL(l_curr_instance_rec.instance_number, fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_number := NULL;
                l_instance_hist_rec.new_instance_number := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_number,fnd_api.g_miss_char) <> NVL(p_instance_rec.instance_number,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_number := l_curr_instance_rec.instance_number ;
                l_instance_hist_rec.new_instance_number := p_instance_rec.instance_number ;
           END IF;
           --
           IF (p_instance_rec.external_reference = fnd_api.g_miss_char) OR
               NVL(p_instance_rec.external_reference, fnd_api.g_miss_char) = NVL(l_curr_instance_rec.external_reference, fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_external_reference := NULL;
                l_instance_hist_rec.new_external_reference := NULL;
           ELSIF
              NVL(l_curr_instance_rec.external_reference,fnd_api.g_miss_char) <> NVL(p_instance_rec.external_reference,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_external_reference := l_curr_instance_rec.external_reference ;
                l_instance_hist_rec.new_external_reference := p_instance_rec.external_reference ;
           END IF;
           --
           IF (p_instance_rec.inventory_item_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.inventory_item_id,fnd_api.g_miss_num) = NVL(p_instance_rec.inventory_item_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inventory_item_id := NULL;
                l_instance_hist_rec.new_inventory_item_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inventory_item_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.inventory_item_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inventory_item_id := l_curr_instance_rec.inventory_item_id ;
                l_instance_hist_rec.new_inventory_item_id := p_instance_rec.inventory_item_id ;
           END IF;
           --
           IF (p_instance_rec.inventory_revision = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.inventory_revision,fnd_api.g_miss_char) = NVL(p_instance_rec.inventory_revision,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_inventory_revision := NULL;
                l_instance_hist_rec.new_inventory_revision := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inventory_revision,fnd_api.g_miss_char) <> NVL(p_instance_rec.inventory_revision,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_inventory_revision := l_curr_instance_rec.inventory_revision ;
                l_instance_hist_rec.new_inventory_revision := p_instance_rec.inventory_revision ;
           END IF;
           --
           IF (p_instance_rec.inv_master_organization_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.inv_master_organization_id,fnd_api.g_miss_num) = NVL(p_instance_rec.inv_master_organization_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_master_org_id := NULL;
                l_instance_hist_rec.new_inv_master_org_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_master_organization_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.inv_master_organization_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_master_org_id := l_curr_instance_rec.inv_master_organization_id ;
                l_instance_hist_rec.new_inv_master_org_id := p_instance_rec.inv_master_organization_id ;
           END IF;
           --
           IF (p_instance_rec.serial_number = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.serial_number,fnd_api.g_miss_char) = NVL(p_instance_rec.serial_number,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_serial_number := NULL;
                l_instance_hist_rec.new_serial_number := NULL;
           ELSIF
              NVL(l_curr_instance_rec.serial_number,fnd_api.g_miss_char) <> NVL(p_instance_rec.serial_number,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_serial_number := l_curr_instance_rec.serial_number ;
                l_instance_hist_rec.new_serial_number := p_instance_rec.serial_number ;
           END IF;
           --
           IF (p_instance_rec.mfg_serial_number_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.mfg_serial_number_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.mfg_serial_number_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_mfg_serial_number_flag := NULL;
                l_instance_hist_rec.new_mfg_serial_number_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.mfg_serial_number_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.mfg_serial_number_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_mfg_serial_number_flag := l_curr_instance_rec.mfg_serial_number_flag ;
                l_instance_hist_rec.new_mfg_serial_number_flag := p_instance_rec.mfg_serial_number_flag ;
           END IF;
           --
           IF (p_instance_rec.lot_number = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.lot_number,fnd_api.g_miss_char) = NVL(p_instance_rec.lot_number,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_lot_number := NULL;
                l_instance_hist_rec.new_lot_number := NULL;
           ELSIF
              NVL(l_curr_instance_rec.lot_number,fnd_api.g_miss_char) <> NVL(p_instance_rec.lot_number,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_lot_number := l_curr_instance_rec.lot_number ;
                l_instance_hist_rec.new_lot_number := p_instance_rec.lot_number ;
           END IF;
           --
           IF (p_instance_rec.quantity = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.quantity,fnd_api.g_miss_num) = NVL(p_instance_rec.quantity,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_quantity := NULL;
                l_instance_hist_rec.new_quantity := NULL;
           ELSIF
              NVL(l_curr_instance_rec.quantity,fnd_api.g_miss_num) <> NVL(p_instance_rec.quantity,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_quantity := l_curr_instance_rec.quantity ;
                l_instance_hist_rec.new_quantity := p_instance_rec.quantity ;
           END IF;
           --
           IF (p_instance_rec.unit_of_measure = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.unit_of_measure,fnd_api.g_miss_char) = NVL(p_instance_rec.unit_of_measure,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_unit_of_measure := NULL;
                l_instance_hist_rec.new_unit_of_measure := NULL;
           ELSIF
              NVL(l_curr_instance_rec.unit_of_measure,fnd_api.g_miss_char) <> NVL(p_instance_rec.unit_of_measure,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_unit_of_measure := l_curr_instance_rec.unit_of_measure ;
                l_instance_hist_rec.new_unit_of_measure := p_instance_rec.unit_of_measure ;
           END IF;
           --
           IF (p_instance_rec.accounting_class_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.accounting_class_code,fnd_api.g_miss_char) = NVL(p_instance_rec.accounting_class_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_accounting_class_code := NULL;
                l_instance_hist_rec.new_accounting_class_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.accounting_class_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.accounting_class_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_accounting_class_code := l_curr_instance_rec.accounting_class_code ;
                l_instance_hist_rec.new_accounting_class_code := p_instance_rec.accounting_class_code ;
           END IF;
           --
           IF (p_instance_rec.instance_condition_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.instance_condition_id,fnd_api.g_miss_num) = NVL(p_instance_rec.instance_condition_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_instance_condition_id := NULL;
                l_instance_hist_rec.new_instance_condition_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_condition_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.instance_condition_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_instance_condition_id := l_curr_instance_rec.instance_condition_id ;
                l_instance_hist_rec.new_instance_condition_id := p_instance_rec.instance_condition_id ;
           END IF;
           --
           IF (p_instance_rec.instance_status_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.instance_status_id,fnd_api.g_miss_num) = NVL(p_instance_rec.instance_status_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_instance_status_id := NULL;
                l_instance_hist_rec.new_instance_status_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_status_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.instance_status_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_instance_status_id := l_curr_instance_rec.instance_status_id ;
                l_instance_hist_rec.new_instance_status_id := p_instance_rec.instance_status_id ;
           END IF;
           --
           IF (p_instance_rec.customer_view_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.customer_view_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.customer_view_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_customer_view_flag := NULL;
                l_instance_hist_rec.new_customer_view_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.customer_view_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.customer_view_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_customer_view_flag := l_curr_instance_rec.customer_view_flag ;
                l_instance_hist_rec.new_customer_view_flag := p_instance_rec.customer_view_flag ;
           END IF;
           --
           IF (p_instance_rec.merchant_view_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.merchant_view_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.merchant_view_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_merchant_view_flag := NULL;
                l_instance_hist_rec.new_merchant_view_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.merchant_view_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.merchant_view_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_merchant_view_flag := l_curr_instance_rec.merchant_view_flag ;
                l_instance_hist_rec.new_merchant_view_flag := p_instance_rec.merchant_view_flag ;
           END IF;
           --
           IF (p_instance_rec.sellable_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.sellable_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.sellable_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_sellable_flag := NULL;
                l_instance_hist_rec.new_sellable_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.sellable_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.sellable_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_sellable_flag := l_curr_instance_rec.sellable_flag ;
                l_instance_hist_rec.new_sellable_flag := p_instance_rec.sellable_flag ;
           END IF;
           --
           IF (p_instance_rec.system_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.system_id,fnd_api.g_miss_num) = NVL(p_instance_rec.system_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_system_id := NULL;
                l_instance_hist_rec.new_system_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.system_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.system_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_system_id := l_curr_instance_rec.system_id ;
                l_instance_hist_rec.new_system_id := p_instance_rec.system_id ;
           END IF;
           --
           IF (p_instance_rec.instance_type_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.instance_type_code,fnd_api.g_miss_char) = NVL(p_instance_rec.instance_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_type_code := NULL;
                l_instance_hist_rec.new_instance_type_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_type_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.instance_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_type_code := l_curr_instance_rec.instance_type_code ;
                l_instance_hist_rec.new_instance_type_code := p_instance_rec.instance_type_code ;
           END IF;
           --
           IF (p_instance_rec.active_start_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.active_start_date,fnd_api.g_miss_date) = NVL(p_instance_rec.active_start_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_active_start_date := NULL;
                l_instance_hist_rec.new_active_start_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.active_start_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.active_start_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_active_start_date := l_curr_instance_rec.active_start_date ;
                l_instance_hist_rec.new_active_start_date := p_instance_rec.active_start_date ;
           END IF;
           --
           IF (p_instance_rec.active_end_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.active_end_date,fnd_api.g_miss_date) = NVL(p_instance_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_active_end_date := NULL;
                l_instance_hist_rec.new_active_end_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.active_end_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_active_end_date := l_curr_instance_rec.active_end_date ;
                l_instance_hist_rec.new_active_end_date := p_instance_rec.active_end_date ;
           END IF;
           --
           IF (p_instance_rec.location_type_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.location_type_code,fnd_api.g_miss_char) = NVL(p_instance_rec.location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_location_type_code := NULL;
                l_instance_hist_rec.new_location_type_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.location_type_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_location_type_code := l_curr_instance_rec.location_type_code ;
                l_instance_hist_rec.new_location_type_code := p_instance_rec.location_type_code ;
           END IF;
           --
           IF (p_instance_rec.location_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.location_id,fnd_api.g_miss_num) = NVL(p_instance_rec.location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_location_id := NULL;
                l_instance_hist_rec.new_location_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.location_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_location_id := l_curr_instance_rec.location_id ;
                l_instance_hist_rec.new_location_id := p_instance_rec.location_id ;
           END IF;
           --
           IF (p_instance_rec.inv_organization_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.inv_organization_id,fnd_api.g_miss_num) = NVL(p_instance_rec.inv_organization_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_organization_id := NULL;
                l_instance_hist_rec.new_inv_organization_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_organization_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.inv_organization_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_organization_id := l_curr_instance_rec.inv_organization_id ;
                l_instance_hist_rec.new_inv_organization_id := p_instance_rec.inv_organization_id ;
           END IF;
           --
           IF (p_instance_rec.inv_subinventory_name = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) = NVL(p_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_inv_subinventory_name := NULL;
                l_instance_hist_rec.new_inv_subinventory_name := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) <> NVL(p_instance_rec.inv_subinventory_name,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_inv_subinventory_name := l_curr_instance_rec.inv_subinventory_name ;
                l_instance_hist_rec.new_inv_subinventory_name := p_instance_rec.inv_subinventory_name ;
           END IF;
           --
           IF (p_instance_rec.inv_locator_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.inv_locator_id,fnd_api.g_miss_num) = NVL(p_instance_rec.inv_locator_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_locator_id := NULL;
                l_instance_hist_rec.new_inv_locator_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.inv_locator_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.inv_locator_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_inv_locator_id := l_curr_instance_rec.inv_locator_id ;
                l_instance_hist_rec.new_inv_locator_id := p_instance_rec.inv_locator_id ;
           END IF;
           --
           IF (p_instance_rec.pa_project_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.pa_project_id,fnd_api.g_miss_num) = NVL(p_instance_rec.pa_project_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_id := NULL;
                l_instance_hist_rec.new_pa_project_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.pa_project_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.pa_project_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_id := l_curr_instance_rec.pa_project_id ;
                l_instance_hist_rec.new_pa_project_id := p_instance_rec.pa_project_id ;
           END IF;
           --
           IF (p_instance_rec.pa_project_task_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.pa_project_task_id,fnd_api.g_miss_num) = NVL(p_instance_rec.pa_project_task_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_task_id := NULL;
                l_instance_hist_rec.new_pa_project_task_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.pa_project_task_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.pa_project_task_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pa_project_task_id := l_curr_instance_rec.pa_project_task_id ;
                l_instance_hist_rec.new_pa_project_task_id := p_instance_rec.pa_project_task_id ;
           END IF;
           --
           IF (p_instance_rec.in_transit_order_line_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) = NVL(p_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_in_transit_order_line_id := NULL;
                l_instance_hist_rec.new_in_transit_order_line_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.in_transit_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_in_transit_order_line_id := l_curr_instance_rec.in_transit_order_line_id ;
                l_instance_hist_rec.new_in_transit_order_line_id := p_instance_rec.in_transit_order_line_id ;
           END IF;
           --
           IF (p_instance_rec.last_oe_agreement_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) = NVL(p_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_last_oe_agreement_id := NULL;
                l_instance_hist_rec.new_last_oe_agreement_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_last_oe_agreement_id := l_curr_instance_rec.last_oe_agreement_id ;
                l_instance_hist_rec.new_last_oe_agreement_id := p_instance_rec.last_oe_agreement_id ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_ORDER_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_ORDER_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_OE_ORDER_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID ;
                l_instance_hist_rec.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_RMA_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_RMA_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_OE_RMA_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID ;
                l_instance_hist_rec.new_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_WIP_JOB_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_WIP_JOB_ID := NULL;
                l_instance_hist_rec.new_LAST_WIP_JOB_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID ;
                l_instance_hist_rec.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PO_PO_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PO_PO_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_PO_PO_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PO_PO_LINE_ID := l_curr_instance_rec.LAST_PO_PO_LINE_ID ;
                l_instance_hist_rec.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PA_PROJECT_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_PROJECT_ID := NULL;
                l_instance_hist_rec.new_LAST_PA_PROJECT_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID ;
                l_instance_hist_rec.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PA_TASK_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_TASK_ID := NULL;
                l_instance_hist_rec.new_LAST_PA_TASK_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID ;
                l_instance_hist_rec.new_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_TXN_LINE_DETAIL_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_TXN_LINE_DETAIL_ID := NULL;
                l_instance_hist_rec.new_LAST_TXN_LINE_DETAIL_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID ;
                l_instance_hist_rec.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_PO_NUMBER = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) = NVL(p_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_LAST_OE_PO_NUMBER := NULL;
                l_instance_hist_rec.new_LAST_OE_PO_NUMBER := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) <> NVL(p_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER ;
                l_instance_hist_rec.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER ;
           END IF;
           --
           IF (p_instance_rec.wip_job_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.wip_job_id,fnd_api.g_miss_num) = NVL(p_instance_rec.wip_job_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_wip_job_id := NULL;
                l_instance_hist_rec.new_wip_job_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.wip_job_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.wip_job_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_wip_job_id := l_curr_instance_rec.wip_job_id ;
                l_instance_hist_rec.new_wip_job_id := p_instance_rec.wip_job_id ;
           END IF;
           --
           IF (p_instance_rec.po_order_line_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.po_order_line_id,fnd_api.g_miss_num) = NVL(p_instance_rec.po_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_po_order_line_id := NULL;
                l_instance_hist_rec.new_po_order_line_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.po_order_line_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.po_order_line_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_po_order_line_id := l_curr_instance_rec.po_order_line_id ;
                l_instance_hist_rec.new_po_order_line_id := p_instance_rec.po_order_line_id ;
           END IF;
           --
           IF (p_instance_rec.completeness_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.completeness_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.completeness_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_completeness_flag := NULL;
                l_instance_hist_rec.new_completeness_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.completeness_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.completeness_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_completeness_flag := l_curr_instance_rec.completeness_flag ;
                l_instance_hist_rec.new_completeness_flag := p_instance_rec.completeness_flag ;
           END IF;
           --
           IF (p_instance_rec.context = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.context,fnd_api.g_miss_char) = NVL(p_instance_rec.context,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_context := NULL;
                l_instance_hist_rec.new_context := NULL;
           ELSIF
              NVL(l_curr_instance_rec.context,fnd_api.g_miss_char) <> NVL(p_instance_rec.context,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_context := l_curr_instance_rec.context ;
                l_instance_hist_rec.new_context := p_instance_rec.context ;
           END IF;
           --
           IF (p_instance_rec.attribute1 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute1,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute1,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute1 := NULL;
                l_instance_hist_rec.new_attribute1 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute1,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute1,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute1 := l_curr_instance_rec.attribute1 ;
                l_instance_hist_rec.new_attribute1 := p_instance_rec.attribute1 ;
           END IF;
           --
           IF (p_instance_rec.attribute2 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute2,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute2,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute2 := NULL;
                l_instance_hist_rec.new_attribute2 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute2,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute2,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute2 := l_curr_instance_rec.attribute2 ;
                l_instance_hist_rec.new_attribute2 := p_instance_rec.attribute2 ;
           END IF;
           --
           IF (p_instance_rec.attribute3 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute3,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute3,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute3 := NULL;
                l_instance_hist_rec.new_attribute3 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute3,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute3,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute3 := l_curr_instance_rec.attribute3 ;
                l_instance_hist_rec.new_attribute3 := p_instance_rec.attribute3 ;
           END IF;
           --
           IF (p_instance_rec.attribute4 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute4,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute4,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute4 := NULL;
                l_instance_hist_rec.new_attribute4 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute4,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute4,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute4 := l_curr_instance_rec.attribute4 ;
                l_instance_hist_rec.new_attribute4 := p_instance_rec.attribute4 ;
           END IF;
           --
           IF (p_instance_rec.attribute5 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute5,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute5,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute5 := NULL;
                l_instance_hist_rec.new_attribute5 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute5,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute5,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute5 := l_curr_instance_rec.attribute5 ;
                l_instance_hist_rec.new_attribute5 := p_instance_rec.attribute5 ;
           END IF;
           --
           IF (p_instance_rec.attribute6 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute6,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute6,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute6 := NULL;
                l_instance_hist_rec.new_attribute6 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute6,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute6,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute6 := l_curr_instance_rec.attribute6 ;
                l_instance_hist_rec.new_attribute6 := p_instance_rec.attribute6 ;
           END IF;
           --
           IF (p_instance_rec.attribute7 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute7,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute7,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute7 := NULL;
                l_instance_hist_rec.new_attribute7 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute7,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute7,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute7 := l_curr_instance_rec.attribute7 ;
                l_instance_hist_rec.new_attribute7 := p_instance_rec.attribute7 ;
           END IF;
           --
           IF (p_instance_rec.attribute8 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute8,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute8,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute8 := NULL;
                l_instance_hist_rec.new_attribute8 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute8,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute8,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute8 := l_curr_instance_rec.attribute8 ;
                l_instance_hist_rec.new_attribute8 := p_instance_rec.attribute8 ;
           END IF;
           --
           IF (p_instance_rec.attribute9 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute9,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute9,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute9 := NULL;
                l_instance_hist_rec.new_attribute9 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute9,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute9,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute9 := l_curr_instance_rec.attribute9 ;
                l_instance_hist_rec.new_attribute9 := p_instance_rec.attribute9 ;
           END IF;
           --
           IF (p_instance_rec.attribute10 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute10,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute10,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute10 := NULL;
                l_instance_hist_rec.new_attribute10 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute10,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute10,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute10 := l_curr_instance_rec.attribute10 ;
                l_instance_hist_rec.new_attribute10 := p_instance_rec.attribute10 ;
           END IF;
           --
           IF (p_instance_rec.attribute11 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute11,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute11,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute11 := NULL;
                l_instance_hist_rec.new_attribute11 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute11,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute11,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute11 := l_curr_instance_rec.attribute11 ;
                l_instance_hist_rec.new_attribute11 := p_instance_rec.attribute11 ;
           END IF;
           --
           IF (p_instance_rec.attribute12 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute12,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute12,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute12 := NULL;
                l_instance_hist_rec.new_attribute12 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute12,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute12,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute12 := l_curr_instance_rec.attribute12 ;
                l_instance_hist_rec.new_attribute12 := p_instance_rec.attribute12 ;
           END IF;
           --
           IF (p_instance_rec.attribute13 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute13,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute13,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute13 := NULL;
                l_instance_hist_rec.new_attribute13 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute13,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute13,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute13 := l_curr_instance_rec.attribute13 ;
                l_instance_hist_rec.new_attribute13 := p_instance_rec.attribute13 ;
           END IF;
           --
           IF (p_instance_rec.attribute14 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute14,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute14,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute14 := NULL;
                l_instance_hist_rec.new_attribute14 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute14,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute14,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute14 := l_curr_instance_rec.attribute14 ;
                l_instance_hist_rec.new_attribute14 := p_instance_rec.attribute14 ;
           END IF;
           --
           IF (p_instance_rec.attribute15 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute15,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute15,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute15 := NULL;
                l_instance_hist_rec.new_attribute15 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute15,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute15,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute15 := l_curr_instance_rec.attribute15 ;
                l_instance_hist_rec.new_attribute15 := p_instance_rec.attribute15 ;
           END IF;
           --
           IF (p_instance_rec.install_location_type_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.install_location_type_code,fnd_api.g_miss_char) = NVL(p_instance_rec.install_location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_install_location_type_code := NULL;
                l_instance_hist_rec.new_install_location_type_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.install_location_type_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.install_location_type_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_install_location_type_code := l_curr_instance_rec.install_location_type_code ;
                l_instance_hist_rec.new_install_location_type_code := p_instance_rec.install_location_type_code ;
           END IF;
           --
           IF (p_instance_rec.install_location_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.install_location_id,fnd_api.g_miss_num) = NVL(p_instance_rec.install_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_install_location_id := NULL;
                l_instance_hist_rec.new_install_location_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.install_location_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.install_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_install_location_id := l_curr_instance_rec.install_location_id ;
                l_instance_hist_rec.new_install_location_id := p_instance_rec.install_location_id ;
           END IF;
           --
           IF (p_instance_rec.instance_usage_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.instance_usage_code,fnd_api.g_miss_char) = NVL(p_instance_rec.instance_usage_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_usage_code := NULL;
                l_instance_hist_rec.new_instance_usage_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_usage_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.instance_usage_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_usage_code := l_curr_instance_rec.instance_usage_code ;
                l_instance_hist_rec.new_instance_usage_code := p_instance_rec.instance_usage_code ;
           END IF;
           --
           IF (p_instance_rec.last_oe_agreement_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) = NVL(p_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_last_oe_agreement_id := NULL;
                l_instance_hist_rec.new_last_oe_agreement_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.last_oe_agreement_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_last_oe_agreement_id := l_curr_instance_rec.last_oe_agreement_id ;
                l_instance_hist_rec.new_last_oe_agreement_id := p_instance_rec.last_oe_agreement_id ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_ORDER_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_ORDER_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_OE_ORDER_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID ;
                l_instance_hist_rec.new_LAST_OE_ORDER_LINE_ID := p_instance_rec.LAST_OE_ORDER_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_RMA_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.OLD_LAST_OE_RMA_LINE_ID := NULL;
                l_instance_hist_rec.NEW_LAST_OE_RMA_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.OLD_LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID ;
                l_instance_hist_rec.NEW_LAST_OE_RMA_LINE_ID := p_instance_rec.LAST_OE_RMA_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_WIP_JOB_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_WIP_JOB_ID := NULL;
                l_instance_hist_rec.new_LAST_WIP_JOB_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_WIP_JOB_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID ;
                l_instance_hist_rec.new_LAST_WIP_JOB_ID := p_instance_rec.LAST_WIP_JOB_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PO_PO_LINE_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PO_PO_LINE_ID := NULL;
                l_instance_hist_rec.new_LAST_PO_PO_LINE_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PO_PO_LINE_ID := l_curr_instance_rec.LAST_PO_PO_LINE_ID ;
                l_instance_hist_rec.new_LAST_PO_PO_LINE_ID := p_instance_rec.LAST_PO_PO_LINE_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PA_PROJECT_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_PROJECT_ID := NULL;
                l_instance_hist_rec.new_LAST_PA_PROJECT_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PA_PROJECT_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID ;
                l_instance_hist_rec.new_LAST_PA_PROJECT_ID := p_instance_rec.LAST_PA_PROJECT_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_PA_TASK_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_TASK_ID := NULL;
                l_instance_hist_rec.new_LAST_PA_TASK_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_PA_TASK_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID ;
                l_instance_hist_rec.new_LAST_PA_TASK_ID := p_instance_rec.LAST_PA_TASK_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_TXN_LINE_DETAIL_ID = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) = NVL(p_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_TXN_LINE_DETAIL_ID := NULL;
                l_instance_hist_rec.new_LAST_TXN_LINE_DETAIL_ID := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) <> NVL(p_instance_rec.LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID ;
                l_instance_hist_rec.new_LAST_TXN_LINE_DETAIL_ID := p_instance_rec.LAST_TXN_LINE_DETAIL_ID ;
           END IF;
           --
           IF (p_instance_rec.LAST_OE_PO_NUMBER = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) = NVL(p_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_LAST_OE_PO_NUMBER := NULL;
                l_instance_hist_rec.new_LAST_OE_PO_NUMBER := NULL;
           ELSIF
              NVL(l_curr_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) <> NVL(p_instance_rec.LAST_OE_PO_NUMBER,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER ;
                l_instance_hist_rec.new_LAST_OE_PO_NUMBER := p_instance_rec.LAST_OE_PO_NUMBER ;
           END IF;
           --
           IF (p_instance_rec.vld_organization_id = fnd_api.g_miss_num) OR
              NVL(p_instance_rec.vld_organization_id, fnd_api.g_miss_num) = NVL(l_curr_instance_rec.last_vld_organization_id, fnd_api.g_miss_num) THEN
                l_curr_instance_rec.last_vld_organization_id := NULL;
                l_last_vld_organization_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.last_vld_organization_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.vld_organization_id,fnd_api.g_miss_num) THEN
                l_curr_instance_rec.last_vld_organization_id := l_curr_instance_rec.last_vld_organization_id;
                l_last_vld_organization_id := p_instance_rec.vld_organization_id;
           END IF;
           --
           IF (p_instance_rec.config_inst_rev_num = fnd_api.g_miss_num) OR
              NVL(p_instance_rec.config_inst_rev_num, fnd_api.g_miss_num) = NVL(l_curr_instance_rec.config_inst_rev_num, fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_config_inst_rev_num := NULL;
                l_instance_hist_rec.new_config_inst_rev_num := NULL;
           ELSIF
              NVL(l_curr_instance_rec.config_inst_rev_num,fnd_api.g_miss_num) <> NVL(p_instance_rec.config_inst_rev_num,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_config_inst_rev_num := l_curr_instance_rec.config_inst_rev_num;
                l_instance_hist_rec.new_config_inst_rev_num := p_instance_rec.config_inst_rev_num;
           END IF;
           --
           IF (p_instance_rec.config_valid_status = fnd_api.g_miss_char) OR
              NVL(p_instance_rec.config_valid_status, fnd_api.g_miss_char) = NVL(l_curr_instance_rec.config_valid_status, fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_config_valid_status := NULL;
                l_instance_hist_rec.new_config_valid_status := NULL;
           ELSIF
              NVL(l_curr_instance_rec.config_valid_status,fnd_api.g_miss_char) <> NVL(p_instance_rec.config_valid_status,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_config_valid_status := l_curr_instance_rec.config_valid_status;
                l_instance_hist_rec.new_config_valid_status := p_instance_rec.config_valid_status;
           END IF;
           --
           IF (p_instance_rec.instance_description = fnd_api.g_miss_char) OR
              NVL(p_instance_rec.instance_description, fnd_api.g_miss_char) = NVL(l_curr_instance_rec.instance_description, fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_description := NULL;
                l_instance_hist_rec.new_instance_description := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instance_description,fnd_api.g_miss_char) <> NVL(p_instance_rec.instance_description,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instance_description := l_curr_instance_rec.instance_description;
                l_instance_hist_rec.new_instance_description := p_instance_rec.instance_description;
           END IF;

           IF (p_instance_rec.install_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.install_date,fnd_api.g_miss_date) = NVL(p_instance_rec.install_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_install_date := NULL;
                l_instance_hist_rec.new_install_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.install_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.install_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_install_date := l_curr_instance_rec.install_date ;
                l_instance_hist_rec.new_install_date := p_instance_rec.install_date ;
           END IF;

           IF (p_instance_rec.return_by_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.return_by_date,fnd_api.g_miss_date) = NVL(p_instance_rec.return_by_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_return_by_date := NULL;
                l_instance_hist_rec.new_return_by_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.return_by_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.return_by_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_return_by_date := l_curr_instance_rec.return_by_date ;
                l_instance_hist_rec.new_return_by_date := p_instance_rec.return_by_date ;
           END IF;

           IF (p_instance_rec.actual_return_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.actual_return_date,fnd_api.g_miss_date) = NVL(p_instance_rec.actual_return_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_actual_return_date := NULL;
                l_instance_hist_rec.new_actual_return_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.actual_return_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.actual_return_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_actual_return_date := l_curr_instance_rec.actual_return_date ;
                l_instance_hist_rec.new_actual_return_date := p_instance_rec.actual_return_date ;
           END IF;

           --start of code for eam integration--
           --
           IF (p_instance_rec.network_asset_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.network_asset_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.network_asset_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_network_asset_flag := NULL;
                l_instance_hist_rec.new_network_asset_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.network_asset_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.network_asset_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_network_asset_flag := l_curr_instance_rec.network_asset_flag ;
                l_instance_hist_rec.new_network_asset_flag := p_instance_rec.network_asset_flag ;
           END IF;
           --
           IF (p_instance_rec.maintainable_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.maintainable_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.maintainable_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_maintainable_flag := NULL;
                l_instance_hist_rec.new_maintainable_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.maintainable_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.maintainable_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_maintainable_flag := l_curr_instance_rec.maintainable_flag ;
                l_instance_hist_rec.new_maintainable_flag := p_instance_rec.maintainable_flag ;
           END IF;
           --
           IF (p_instance_rec.pn_location_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.pn_location_id,fnd_api.g_miss_num) = NVL(p_instance_rec.pn_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pn_location_id := NULL;
                l_instance_hist_rec.new_pn_location_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.pn_location_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.pn_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_pn_location_id := l_curr_instance_rec.pn_location_id ;
                l_instance_hist_rec.new_pn_location_id := p_instance_rec.pn_location_id ;
           END IF;
           --
           IF (p_instance_rec.asset_criticality_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.asset_criticality_code,fnd_api.g_miss_char) = NVL(p_instance_rec.asset_criticality_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_asset_criticality_code := NULL;
                l_instance_hist_rec.new_asset_criticality_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.asset_criticality_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.asset_criticality_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_asset_criticality_code := l_curr_instance_rec.asset_criticality_code ;
                l_instance_hist_rec.new_asset_criticality_code := p_instance_rec.asset_criticality_code ;
           END IF;
           --
           IF (p_instance_rec.category_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.category_id,fnd_api.g_miss_num) = NVL(p_instance_rec.category_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_category_id := NULL;
                l_instance_hist_rec.new_category_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.category_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.category_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_category_id := l_curr_instance_rec.category_id ;
                l_instance_hist_rec.new_category_id := p_instance_rec.category_id ;
           END IF;
           --
           IF (p_instance_rec.equipment_gen_object_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.equipment_gen_object_id,fnd_api.g_miss_num) = NVL(p_instance_rec.equipment_gen_object_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_equipment_gen_object_id := NULL;
                l_instance_hist_rec.new_equipment_gen_object_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.equipment_gen_object_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.equipment_gen_object_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_equipment_gen_object_id := l_curr_instance_rec.equipment_gen_object_id ;
                l_instance_hist_rec.new_equipment_gen_object_id := p_instance_rec.equipment_gen_object_id ;
           END IF;
           --
           IF (p_instance_rec.instantiation_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.instantiation_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.instantiation_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instantiation_flag := NULL;
                l_instance_hist_rec.new_instantiation_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.instantiation_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.instantiation_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_instantiation_flag := l_curr_instance_rec.instantiation_flag ;
                l_instance_hist_rec.new_instantiation_flag := p_instance_rec.instantiation_flag ;
           END IF;
           --
           IF (p_instance_rec.linear_location_id = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.linear_location_id,fnd_api.g_miss_num) = NVL(p_instance_rec.linear_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_linear_location_id := NULL;
                l_instance_hist_rec.new_linear_location_id := NULL;
           ELSIF
              NVL(l_curr_instance_rec.linear_location_id,fnd_api.g_miss_num) <> NVL(p_instance_rec.linear_location_id,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_linear_location_id := l_curr_instance_rec.linear_location_id ;
                l_instance_hist_rec.new_linear_location_id := p_instance_rec.linear_location_id ;
           END IF;
           --
           IF (p_instance_rec.operational_log_flag = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.operational_log_flag,fnd_api.g_miss_char) = NVL(p_instance_rec.operational_log_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_operational_log_flag := NULL;
                l_instance_hist_rec.new_operational_log_flag := NULL;
           ELSIF
              NVL(l_curr_instance_rec.operational_log_flag,fnd_api.g_miss_char) <> NVL(p_instance_rec.operational_log_flag,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_operational_log_flag := l_curr_instance_rec.operational_log_flag ;
                l_instance_hist_rec.new_operational_log_flag := p_instance_rec.operational_log_flag ;
           END IF;
           --
           IF (p_instance_rec.checkin_status = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.checkin_status,fnd_api.g_miss_num) = NVL(p_instance_rec.checkin_status,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_checkin_status := NULL;
                l_instance_hist_rec.new_checkin_status := NULL;
           ELSIF
              NVL(l_curr_instance_rec.checkin_status,fnd_api.g_miss_num) <> NVL(p_instance_rec.checkin_status,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_checkin_status := l_curr_instance_rec.checkin_status ;
                l_instance_hist_rec.new_checkin_status := p_instance_rec.checkin_status ;
           END IF;
           --
           IF (p_instance_rec.supplier_warranty_exp_date = fnd_api.g_miss_date) OR
              NVL(l_curr_instance_rec.supplier_warranty_exp_date,fnd_api.g_miss_date) = NVL(p_instance_rec.supplier_warranty_exp_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_supplier_warranty_exp_date := NULL;
                l_instance_hist_rec.new_supplier_warranty_exp_date := NULL;
           ELSIF
              NVL(l_curr_instance_rec.supplier_warranty_exp_date,fnd_api.g_miss_date) <> NVL(p_instance_rec.supplier_warranty_exp_date,fnd_api.g_miss_date) THEN
                l_instance_hist_rec.old_supplier_warranty_exp_date := l_curr_instance_rec.supplier_warranty_exp_date ;
                l_instance_hist_rec.new_supplier_warranty_exp_date := p_instance_rec.supplier_warranty_exp_date ;
           END IF;
           --
           IF (p_instance_rec.attribute16 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute16,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute16,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute16 := NULL;
                l_instance_hist_rec.new_attribute16 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute16,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute16,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute16 := l_curr_instance_rec.attribute16 ;
                l_instance_hist_rec.new_attribute16 := p_instance_rec.attribute16 ;
           END IF;
           --
           IF (p_instance_rec.attribute17 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute17,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute17,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute17 := NULL;
                l_instance_hist_rec.new_attribute17 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute17,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute17,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute17 := l_curr_instance_rec.attribute17 ;
                l_instance_hist_rec.new_attribute17 := p_instance_rec.attribute17 ; -- code change for Bug 8421940 (FP of Bug 8413754)
           END IF;
           --
           IF (p_instance_rec.attribute18 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute18,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute18,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute18 := NULL;
                l_instance_hist_rec.new_attribute18 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute18,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute18,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute18 := l_curr_instance_rec.attribute18 ;
                l_instance_hist_rec.new_attribute18 := p_instance_rec.attribute18 ;
           END IF;
           --
           IF (p_instance_rec.attribute19 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute19,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute19,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute19 := NULL;
                l_instance_hist_rec.new_attribute19 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute19,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute19,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute19 := l_curr_instance_rec.attribute19 ;
                l_instance_hist_rec.new_attribute19 := p_instance_rec.attribute19 ;
           END IF;
           --
           IF (p_instance_rec.attribute20 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute20,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute20,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute20 := NULL;
                l_instance_hist_rec.new_attribute20 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute20,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute20,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute20 := l_curr_instance_rec.attribute20 ;
                l_instance_hist_rec.new_attribute20 := p_instance_rec.attribute20 ;
           END IF;
           --
           IF (p_instance_rec.attribute21 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute21,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute21,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute21 := NULL;
                l_instance_hist_rec.new_attribute21 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute21,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute21,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute21 := l_curr_instance_rec.attribute21 ;
                l_instance_hist_rec.new_attribute21 := p_instance_rec.attribute21 ;
           END IF;
           --
           IF (p_instance_rec.attribute22 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute22,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute22,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute22 := NULL;
                l_instance_hist_rec.new_attribute22 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute22,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute22,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute22 := l_curr_instance_rec.attribute22 ;
                l_instance_hist_rec.new_attribute22 := p_instance_rec.attribute22 ;
           END IF;
           --
           IF (p_instance_rec.attribute23 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute23,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute23,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute23 := NULL;
                l_instance_hist_rec.new_attribute23 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute23,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute23,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute23 := l_curr_instance_rec.attribute23 ;
                l_instance_hist_rec.new_attribute23 := p_instance_rec.attribute23 ;
           END IF;
           --
           IF (p_instance_rec.attribute24 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute24,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute24,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute24 := NULL;
                l_instance_hist_rec.new_attribute24 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute24,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute24,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute24 := l_curr_instance_rec.attribute24 ;
                l_instance_hist_rec.new_attribute24 := p_instance_rec.attribute24 ;
           END IF;
           --
           IF (p_instance_rec.attribute25 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute25,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute25,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute25 := NULL;
                l_instance_hist_rec.new_attribute25 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute25,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute25,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute25 := l_curr_instance_rec.attribute25 ;
                l_instance_hist_rec.new_attribute25 := p_instance_rec.attribute25 ;
           END IF;
           --
           IF (p_instance_rec.attribute26 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute26,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute26,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute26 := NULL;
                l_instance_hist_rec.new_attribute26 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute26,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute26,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute26 := l_curr_instance_rec.attribute26 ;
                l_instance_hist_rec.new_attribute26 := p_instance_rec.attribute26 ;
           END IF;
           --
           IF (p_instance_rec.attribute27 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute27,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute27,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute27 := NULL;
                l_instance_hist_rec.new_attribute27 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute27,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute27,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute27 := l_curr_instance_rec.attribute27 ;
                l_instance_hist_rec.new_attribute27 := p_instance_rec.attribute27 ;
           END IF;
           --
           IF (p_instance_rec.attribute28 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute28,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute28,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute28 := NULL;
                l_instance_hist_rec.new_attribute28 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute28,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute28,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute28 := l_curr_instance_rec.attribute28 ;
                l_instance_hist_rec.new_attribute28 := p_instance_rec.attribute28 ;
           END IF;
           --
           IF (p_instance_rec.attribute29 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute29,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute29,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute29 := NULL;
                l_instance_hist_rec.new_attribute29 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute29,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute14,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute29 := l_curr_instance_rec.attribute29 ;
                l_instance_hist_rec.new_attribute29 := p_instance_rec.attribute29 ;
           END IF;
           --
           IF (p_instance_rec.attribute30 = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.attribute30,fnd_api.g_miss_char) = NVL(p_instance_rec.attribute30,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute30 := NULL;
                l_instance_hist_rec.new_attribute30 := NULL;
           ELSIF
              NVL(l_curr_instance_rec.attribute30,fnd_api.g_miss_char) <> NVL(p_instance_rec.attribute30,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_attribute30 := l_curr_instance_rec.attribute30 ;
                l_instance_hist_rec.new_attribute30 := p_instance_rec.attribute30 ;
           END IF;
           --end of code for eam integration--

           -- Addition of columns for FA Integration

           IF (p_instance_rec.purchase_unit_price = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.purchase_unit_price,fnd_api.g_miss_num) = NVL(p_instance_rec.purchase_unit_price,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_purchase_unit_price := NULL;
                l_instance_hist_rec.new_purchase_unit_price := NULL;
           ELSIF
              NVL(l_curr_instance_rec.purchase_unit_price,fnd_api.g_miss_num) <> NVL(p_instance_rec.purchase_unit_price,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_purchase_unit_price := l_curr_instance_rec.purchase_unit_price ;
                l_instance_hist_rec.new_purchase_unit_price := p_instance_rec.purchase_unit_price ;
           END IF;

           IF (p_instance_rec.purchase_currency_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.purchase_currency_code,fnd_api.g_miss_char) = NVL(p_instance_rec.purchase_currency_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_purchase_currency_code := NULL;
                l_instance_hist_rec.new_purchase_currency_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.purchase_currency_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.purchase_currency_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_purchase_currency_code := l_curr_instance_rec.purchase_currency_code ;
                l_instance_hist_rec.new_purchase_currency_code := p_instance_rec.purchase_currency_code ;
           END IF;

           IF (p_instance_rec.payables_unit_price = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.payables_unit_price,fnd_api.g_miss_num) = NVL(p_instance_rec.payables_unit_price,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_payables_unit_price := NULL;
                l_instance_hist_rec.new_payables_unit_price := NULL;
           ELSIF
              NVL(l_curr_instance_rec.payables_unit_price,fnd_api.g_miss_num) <> NVL(p_instance_rec.payables_unit_price,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_payables_unit_price := l_curr_instance_rec.payables_unit_price ;
                l_instance_hist_rec.new_payables_unit_price := p_instance_rec.payables_unit_price ;
           END IF;

           IF (p_instance_rec.payables_currency_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.payables_currency_code,fnd_api.g_miss_char) = NVL(p_instance_rec.payables_currency_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_payables_currency_code := NULL;
                l_instance_hist_rec.new_payables_currency_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.payables_currency_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.payables_currency_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_payables_currency_code := l_curr_instance_rec.payables_currency_code ;
                l_instance_hist_rec.new_payables_currency_code := p_instance_rec.payables_currency_code ;
           END IF;

           IF (p_instance_rec.sales_unit_price = fnd_api.g_miss_num) OR
              NVL(l_curr_instance_rec.sales_unit_price,fnd_api.g_miss_num) = NVL(p_instance_rec.sales_unit_price,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_sales_unit_price := NULL;
                l_instance_hist_rec.new_sales_unit_price := NULL;
           ELSIF
              NVL(l_curr_instance_rec.sales_unit_price,fnd_api.g_miss_num) <> NVL(p_instance_rec.sales_unit_price,fnd_api.g_miss_num) THEN
                l_instance_hist_rec.old_sales_unit_price := l_curr_instance_rec.sales_unit_price ;
                l_instance_hist_rec.new_sales_unit_price := p_instance_rec.sales_unit_price ;
           END IF;

           IF (p_instance_rec.sales_currency_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.sales_currency_code,fnd_api.g_miss_char) = NVL(p_instance_rec.sales_currency_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_sales_currency_code := NULL;
                l_instance_hist_rec.new_sales_currency_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.sales_currency_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.sales_currency_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_sales_currency_code := l_curr_instance_rec.sales_currency_code ;
                l_instance_hist_rec.new_sales_currency_code := p_instance_rec.sales_currency_code ;
           END IF;

           IF (p_instance_rec.operational_status_code = fnd_api.g_miss_char) OR
              NVL(l_curr_instance_rec.operational_status_code,fnd_api.g_miss_char) = NVL(p_instance_rec.operational_status_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_operational_status_code := NULL;
                l_instance_hist_rec.new_operational_status_code := NULL;
           ELSIF
              NVL(l_curr_instance_rec.operational_status_code,fnd_api.g_miss_char) <> NVL(p_instance_rec.operational_status_code,fnd_api.g_miss_char) THEN
                l_instance_hist_rec.old_operational_status_code := l_curr_instance_rec.operational_status_code ;
                l_instance_hist_rec.new_operational_status_code := p_instance_rec.operational_status_code ;
           END IF;
           -- End addition of columns for FA Integration

          CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => p_instance_rec.instance_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => l_instance_hist_rec.OLD_INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => l_instance_hist_rec.NEW_INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_instance_hist_rec.OLD_EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => l_instance_hist_rec.NEW_EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_instance_hist_rec.OLD_INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => l_instance_hist_rec.NEW_INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_instance_hist_rec.OLD_INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => l_instance_hist_rec.NEW_INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_instance_hist_rec.OLD_INV_MASTER_ORG_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => l_instance_hist_rec.NEW_INV_MASTER_ORG_ID
            ,p_OLD_SERIAL_NUMBER                 => l_instance_hist_rec.OLD_SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => l_instance_hist_rec.NEW_SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_instance_hist_rec.OLD_MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => l_instance_hist_rec.NEW_MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_instance_hist_rec.OLD_LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => l_instance_hist_rec.NEW_LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_instance_hist_rec.OLD_QUANTITY
            ,p_NEW_QUANTITY                      => l_instance_hist_rec.NEW_QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_instance_hist_rec.OLD_UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => l_instance_hist_rec.NEW_UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_instance_hist_rec.OLD_ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_instance_hist_rec.NEW_ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_instance_hist_rec.OLD_INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => l_instance_hist_rec.NEW_INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_instance_hist_rec.OLD_INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_hist_rec.NEW_INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_instance_hist_rec.OLD_CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => l_instance_hist_rec.NEW_CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_instance_hist_rec.OLD_MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => l_instance_hist_rec.NEW_MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_instance_hist_rec.OLD_SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => l_instance_hist_rec.NEW_SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_instance_hist_rec.OLD_SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_instance_hist_rec.NEW_SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => l_instance_hist_rec.OLD_INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => l_instance_hist_rec.NEW_INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_instance_hist_rec.OLD_ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => l_instance_hist_rec.NEW_ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_instance_hist_rec.OLD_ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_instance_hist_rec.NEW_ACTIVE_END_DATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_instance_hist_rec.OLD_LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_instance_hist_rec.NEW_LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_instance_hist_rec.OLD_LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_instance_hist_rec.NEW_LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_instance_hist_rec.OLD_INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_instance_hist_rec.NEW_INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_instance_hist_rec.OLD_INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_instance_hist_rec.NEW_INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_instance_hist_rec.OLD_INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_instance_hist_rec.NEW_INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_instance_hist_rec.OLD_PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_instance_hist_rec.NEW_PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_instance_hist_rec.OLD_PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_instance_hist_rec.NEW_PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_instance_hist_rec.OLD_IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_instance_hist_rec.NEW_IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_instance_hist_rec.OLD_WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_instance_hist_rec.NEW_WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_instance_hist_rec.OLD_PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_instance_hist_rec.NEW_PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_instance_hist_rec.OLD_COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => l_instance_hist_rec.NEW_COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'N'
            ,p_NEW_CONTEXT                       => l_instance_hist_rec.NEW_CONTEXT
            ,P_OLD_CONTEXT                       => l_instance_hist_rec.OLD_CONTEXT
            ,p_NEW_ATTRIBUTE1                    => l_instance_hist_rec.NEW_ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_instance_hist_rec.OLD_ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => l_instance_hist_rec.NEW_ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_instance_hist_rec.OLD_ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => l_instance_hist_rec.NEW_ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_instance_hist_rec.OLD_ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => l_instance_hist_rec.NEW_ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_instance_hist_rec.OLD_ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => l_instance_hist_rec.NEW_ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_instance_hist_rec.OLD_ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => l_instance_hist_rec.NEW_ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_instance_hist_rec.OLD_ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => l_instance_hist_rec.NEW_ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_instance_hist_rec.OLD_ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => l_instance_hist_rec.NEW_ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_instance_hist_rec.OLD_ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => l_instance_hist_rec.NEW_ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_instance_hist_rec.OLD_ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => l_instance_hist_rec.NEW_ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_instance_hist_rec.OLD_ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => l_instance_hist_rec.NEW_ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_instance_hist_rec.OLD_ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => l_instance_hist_rec.NEW_ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_instance_hist_rec.OLD_ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => l_instance_hist_rec.NEW_ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_instance_hist_rec.OLD_ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => l_instance_hist_rec.NEW_ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_instance_hist_rec.OLD_ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => l_instance_hist_rec.NEW_ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_instance_hist_rec.OLD_ATTRIBUTE15
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_instance_hist_rec.OLD_INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_instance_hist_rec.NEW_INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_instance_hist_rec.OLD_INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => l_instance_hist_rec.NEW_INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => l_instance_hist_rec.OLD_INSTANCE_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => l_instance_hist_rec.NEW_INSTANCE_USAGE_CODE
            ,p_OLD_last_vld_organization_id      => l_curr_instance_rec.LAST_VLD_ORGANIZATION_ID
            ,p_NEW_last_vld_organization_id      => l_last_vld_organization_id
            ,p_OLD_CONFIG_INST_REV_NUM           => l_instance_hist_rec.OLD_CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => l_instance_hist_rec.NEW_CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_instance_hist_rec.OLD_CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => l_instance_hist_rec.NEW_CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_instance_hist_rec.OLD_INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => l_instance_hist_rec.NEW_INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => l_instance_hist_rec.OLD_INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_instance_hist_rec.NEW_INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_instance_hist_rec.OLD_RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => l_instance_hist_rec.NEW_RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_instance_hist_rec.OLD_ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => l_instance_hist_rec.NEW_ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_instance_hist_rec.OLD_LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_instance_hist_rec.NEW_LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_instance_hist_rec.OLD_LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_instance_hist_rec.NEW_LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_instance_hist_rec.OLD_LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => l_instance_hist_rec.NEW_LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_instance_hist_rec.OLD_LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => l_instance_hist_rec.NEW_LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_instance_hist_rec.OLD_LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => l_instance_hist_rec.NEW_LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_instance_hist_rec.OLD_LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => l_instance_hist_rec.NEW_LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_instance_hist_rec.OLD_LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => l_instance_hist_rec.NEW_LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_instance_hist_rec.OLD_LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_instance_hist_rec.NEW_LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_instance_hist_rec.OLD_LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => l_instance_hist_rec.NEW_LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_instance_hist_rec.OLD_NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => l_instance_hist_rec.NEW_NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_instance_hist_rec.OLD_MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => l_instance_hist_rec.NEW_MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_instance_hist_rec.OLD_PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => l_instance_hist_rec.NEW_PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_instance_hist_rec.OLD_ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => l_instance_hist_rec.NEW_ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_instance_hist_rec.OLD_CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => l_instance_hist_rec.NEW_CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_instance_hist_rec.OLD_EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => l_instance_hist_rec.NEW_EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_instance_hist_rec.OLD_INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => l_instance_hist_rec.NEW_INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_instance_hist_rec.OLD_LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => l_instance_hist_rec.NEW_LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_instance_hist_rec.OLD_OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => l_instance_hist_rec.NEW_OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_instance_hist_rec.OLD_CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => l_instance_hist_rec.NEW_CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_instance_hist_rec.OLD_SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => l_instance_hist_rec.NEW_SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_instance_hist_rec.OLD_ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => l_instance_hist_rec.NEW_ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_instance_hist_rec.OLD_ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => l_instance_hist_rec.NEW_ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_instance_hist_rec.OLD_ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => l_instance_hist_rec.NEW_ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_instance_hist_rec.OLD_ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => l_instance_hist_rec.NEW_ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_instance_hist_rec.OLD_ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => l_instance_hist_rec.NEW_ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_instance_hist_rec.OLD_ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => l_instance_hist_rec.NEW_ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_instance_hist_rec.OLD_ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => l_instance_hist_rec.NEW_ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_instance_hist_rec.OLD_ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => l_instance_hist_rec.NEW_ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_instance_hist_rec.OLD_ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => l_instance_hist_rec.NEW_ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_instance_hist_rec.OLD_ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => l_instance_hist_rec.NEW_ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_instance_hist_rec.OLD_ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => l_instance_hist_rec.NEW_ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_instance_hist_rec.OLD_ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => l_instance_hist_rec.NEW_ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_instance_hist_rec.OLD_ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => l_instance_hist_rec.NEW_ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_instance_hist_rec.OLD_ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => l_instance_hist_rec.NEW_ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_instance_hist_rec.OLD_ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => l_instance_hist_rec.NEW_ATTRIBUTE30
  	    --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_instance_hist_rec.OLD_PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => l_instance_hist_rec.NEW_PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_instance_hist_rec.OLD_PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => l_instance_hist_rec.NEW_PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_instance_hist_rec.OLD_PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => l_instance_hist_rec.NEW_PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_instance_hist_rec.OLD_PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => l_instance_hist_rec.NEW_PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_instance_hist_rec.OLD_SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => l_instance_hist_rec.NEW_SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_instance_hist_rec.OLD_SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => l_instance_hist_rec.NEW_SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_instance_hist_rec.OLD_OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_instance_hist_rec.NEW_OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => l_instance_hist_rec.OLD_SOURCE_CODE
            ,p_NEW_SOURCE_CODE                   => l_instance_hist_rec.NEW_SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );

         END IF;
      END; -- END OF HISTORY
      -- End of modification for Bug#2547034 on 09/20/02 - rtalluri
      -- Calling eam API to log instance update event
       IF l_eam_item
       THEN
          IF l_ins_hist_id IS NOT NULL
          THEN
             l_instance_history_id:=l_ins_hist_id;
          ELSE
             l_instance_history_id:=l_csi_item_instance_h_id;
          END IF;
          eam_asset_log_pvt.instance_update_event
          (p_api_version         => p_api_version
          ,p_init_msg_list       => fnd_api.g_false
          ,p_commit              => fnd_api.g_false
          ,p_validation_level    => fnd_api.g_valid_level_full
          ,x_return_status       => x_return_status
          ,x_msg_count           => x_msg_count
          ,x_msg_data            => x_msg_data
          ,p_instance_id         => p_instance_rec.instance_id
          ,p_ref_id              => l_instance_history_id
          ,p_event_date          => sysdate);
         IF NOT(x_return_status = fnd_api.g_ret_sts_success)
         THEN
            csi_gen_utility_pvt.put_line('Error from eam_asset_log_pvt.instance_update_event API');
            RAISE fnd_api.g_exc_error;
         END IF;
       END IF;
      -- Calling eam API to log instance update event
-- Check for any child instances in the csi ii relationships table by passing the parent instance id. If there exists
-- any child instances then inherit the changed attributes with the changes in parent.

        IF  l_curr_instance_rec.active_end_date IS NULL
        THEN l_curr_instance_rec.active_end_date:=FND_API.G_MISS_DATE;
        END IF;

        IF  l_curr_instance_rec.location_type_code IS NULL
        THEN l_curr_instance_rec.location_type_code:=FND_API.G_MISS_CHAR;
        END IF;

        IF  l_curr_instance_rec.location_id IS NULL
        THEN l_curr_instance_rec.location_id:=FND_API.G_MISS_NUM;
        END IF;

        IF  l_curr_instance_rec.inv_organization_id IS NULL
        THEN l_curr_instance_rec.inv_organization_id:=FND_API.G_MISS_NUM;
        END IF;

        IF  l_curr_instance_rec.inv_subinventory_name IS NULL
        THEN l_curr_instance_rec.inv_subinventory_name:=FND_API.G_MISS_CHAR;
        END IF;

        IF  l_curr_instance_rec.inv_locator_id IS NULL
        THEN l_curr_instance_rec.inv_locator_id:=FND_API.G_MISS_NUM;
        END IF;

        IF l_curr_instance_rec.pa_project_id IS NULL
        THEN l_curr_instance_rec.pa_project_id:=FND_API.G_MISS_NUM;
        END IF;

        IF  l_curr_instance_rec.pa_project_task_id IS NULL
        THEN l_curr_instance_rec.pa_project_task_id:=FND_API.G_MISS_NUM;
        END IF;

        IF  l_curr_instance_rec.in_transit_order_line_id IS NULL
        THEN l_curr_instance_rec.in_transit_order_line_id:=FND_API.G_MISS_NUM;
        END IF;

        IF l_curr_instance_rec.wip_job_id IS NULL
        THEN l_curr_instance_rec.wip_job_id:=FND_API.G_MISS_NUM;
        END IF;

        IF  l_curr_instance_rec.po_order_line_id IS NULL
        THEN l_curr_instance_rec.po_order_line_id:=FND_API.G_MISS_NUM;
        END IF;

        IF  l_curr_instance_rec.install_location_type_code IS NULL --1st change
        THEN l_curr_instance_rec.install_location_type_code:=FND_API.G_MISS_CHAR;
        END IF;

        IF  l_curr_instance_rec.install_location_id IS NULL
        THEN l_curr_instance_rec.install_location_id:=FND_API.G_MISS_NUM;
        END IF;
        --
        -- srramakr Need to inherit Install_date to the children
        -- If any of the location attributes or active_end_date are changing for an instance, then check are there
        -- any children associated to this instance. If there exists any, then change the location attributes for child instances
        IF (    p_instance_rec.active_end_date IS NOT NULL
            AND p_instance_rec.active_end_date           <>l_curr_instance_rec.active_end_date
            AND p_instance_rec.active_end_date           <>FND_API.G_MISS_DATE
            )
            OR
           (    p_instance_rec.active_end_date IS NULL AND
                nvl(p_instance_rec.active_end_date,fnd_api.g_miss_date) <> l_curr_instance_rec.active_end_date
           )
           OR
           (     p_instance_rec.system_id IS NOT NULL
             AND p_instance_rec.system_id <> FND_API.G_MISS_NUM
             AND p_instance_rec.system_id <> nvl(l_curr_instance_rec.system_id,FND_API.G_MISS_NUM)
           )
           OR
           (    p_instance_rec.system_id IS NULL
            AND l_curr_instance_rec.system_id IS NOT NULL
           )
           OR
           (    p_instance_rec.location_type_code IS NOT NULL
            AND p_instance_rec.location_type_code        <>FND_API.G_MISS_CHAR
            AND p_instance_rec.location_type_code        <>l_curr_instance_rec.location_type_code
            )
           OR
           (    p_instance_rec.location_id IS NOT NULL
            AND p_instance_rec.location_id               <>FND_API.G_MISS_NUM
            AND p_instance_rec.location_id               <>l_curr_instance_rec.location_id
            )
           OR
           (    p_instance_rec.inv_organization_id IS NOT NULL
            AND p_instance_rec.inv_organization_id       <>FND_API.G_MISS_NUM
            AND p_instance_rec.inv_organization_id       <>l_curr_instance_rec.inv_organization_id
            )
           OR
           (    p_instance_rec.inv_subinventory_name IS NOT NULL
            AND p_instance_rec.inv_subinventory_name     <>FND_API.G_MISS_CHAR
            AND p_instance_rec.inv_subinventory_name     <>l_curr_instance_rec.inv_subinventory_name
            )
           OR
           (    p_instance_rec.inv_locator_id IS NOT NULL
            AND p_instance_rec.inv_locator_id            <>FND_API.G_MISS_NUM
            AND p_instance_rec.inv_locator_id            <>l_curr_instance_rec.inv_locator_id
            )
           OR
           (    p_instance_rec.pa_project_id IS NOT NULL
            AND p_instance_rec.pa_project_id             <>FND_API.G_MISS_NUM
            AND p_instance_rec.pa_project_id             <>l_curr_instance_rec.pa_project_id
            )
           OR
           (    p_instance_rec.pa_project_task_id IS NOT NULL
            AND p_instance_rec.pa_project_task_id        <>FND_API.G_MISS_NUM
            AND p_instance_rec.pa_project_task_id        <>l_curr_instance_rec.pa_project_task_id
            )
           OR
           (    p_instance_rec.in_transit_order_line_id IS NOT NULL
            AND p_instance_rec.in_transit_order_line_id  <>FND_API.G_MISS_NUM
            AND p_instance_rec.in_transit_order_line_id  <>l_curr_instance_rec.in_transit_order_line_id
            )
           OR
           (    p_instance_rec.wip_job_id IS NOT NULL
            AND p_instance_rec.wip_job_id                <>FND_API.G_MISS_NUM
            AND p_instance_rec.wip_job_id                <>l_curr_instance_rec.wip_job_id
            )
           OR
           (    p_instance_rec.po_order_line_id IS NOT NULL
            AND p_instance_rec.po_order_line_id          <>FND_API.G_MISS_NUM
            AND p_instance_rec.po_order_line_id          <>l_curr_instance_rec.po_order_line_id
            )
           OR
           (    p_instance_rec.install_location_type_code IS NOT NULL
            AND p_instance_rec.install_location_type_code <>FND_API.G_MISS_CHAR
            AND p_instance_rec.install_location_type_code <>l_curr_instance_rec.install_location_type_code
            )
           OR
           (    p_instance_rec.install_location_id IS NOT NULL
            AND p_instance_rec.install_location_id    <>FND_API.G_MISS_NUM
            AND p_instance_rec.install_location_id    <>l_curr_instance_rec.install_location_id
            )
           OR
           (    p_instance_rec.install_location_id IS NULL AND
                nvl(p_instance_rec.install_location_id,fnd_api.g_miss_num) <> l_curr_instance_rec.install_location_id AND
                p_instance_rec.install_location_type_code IS NULL AND
                nvl(p_instance_rec.install_location_type_code,fnd_api.g_miss_char) <> l_curr_instance_rec.install_location_type_code
           )
           OR
           (    p_instance_rec.instance_status_id IS NOT NULL
            AND p_instance_rec.instance_status_id     <>FND_API.G_MISS_NUM
            AND p_instance_rec.instance_status_id     <>l_curr_instance_rec.instance_status_id
            )
           OR
           (    (p_instance_rec.install_date IS NULL AND l_curr_instance_rec.install_date IS NOT NULL) OR
                (p_instance_rec.install_date IS NOT NULL AND
                 p_instance_rec.install_date <> FND_API.G_MISS_DATE AND
                 nvl(l_curr_instance_rec.install_date,FND_API.G_MISS_DATE) <> p_instance_rec.install_date)
           )
           OR
           (    p_instance_rec.operational_status_code IS NOT NULL
            AND p_instance_rec.operational_status_code <> FND_API.G_MISS_CHAR
            AND p_instance_rec.operational_status_code <> NVL(l_curr_instance_rec.operational_status_code,'$$##$$')
            )
        THEN
       -- Added for bug 2957236
            IF  p_instance_rec.instance_status_id IS NOT NULL
            AND p_instance_rec.instance_status_id     <>FND_API.G_MISS_NUM
            AND p_instance_rec.instance_status_id     <>l_curr_instance_rec.instance_status_id
            THEN
              l_original_status_id:=l_curr_instance_rec.instance_status_id;
            ELSE
              l_original_status_id:=fnd_api.g_miss_num;
            END IF;
       -- End addition for bug 2957236
           --
           l_unexpire := FND_API.G_FALSE;
           IF l_curr_instance_rec.active_end_date <> FND_API.G_MISS_DATE AND
              l_curr_instance_rec.active_end_date <= sysdate THEN
              IF ((p_instance_rec.active_end_date IS NULL) OR
                  (p_instance_rec.active_end_date IS NOT NULL AND p_instance_rec.active_end_date <> FND_API.G_MISS_DATE AND
                    p_instance_rec.active_end_date > sysdate)) THEN
                 l_unexpire := FND_API.G_TRUE;
              END IF;
           END IF;
           -- System_id cascade
           l_original_system_id := fnd_api.g_miss_num;
           IF p_instance_rec.system_id IS NOT NULL AND
              p_instance_rec.system_id <> FND_API.G_MISS_NUM AND
              p_instance_rec.system_id <> nvl(l_curr_instance_rec.system_id,-999) THEN
              l_original_system_id := l_curr_instance_rec.system_id;
           ELSIF p_instance_rec.system_id IS NULL AND
                 l_curr_instance_rec.system_id IS NOT NULL THEN
              l_original_system_id := l_curr_instance_rec.system_id;
           END IF;
           -- End of System_id cascade
           -- Install Date cascade
           l_install_date := fnd_api.g_miss_date;
           IF p_instance_rec.install_date IS NOT NULL AND
              p_instance_rec.install_date <> FND_API.G_MISS_DATE AND
              p_instance_rec.install_date <> nvl(l_curr_instance_rec.install_date,fnd_api.g_miss_date) THEN
              l_orig_install_date := l_curr_instance_rec.install_date;
           ELSIF p_instance_rec.install_date IS NULL AND
                 l_curr_instance_rec.install_date IS NOT NULL THEN
              l_orig_install_date := l_curr_instance_rec.install_date;
           END IF;
           -- End of Install Date cascade

           update_child_instance_location(p_api_version         =>   p_api_version,
                                          p_commit              =>   p_commit,
                                          p_init_msg_list       =>   p_init_msg_list,
                                          p_validation_level    =>   p_validation_level,
                                          p_instance_rec        =>   p_instance_rec,
                                          p_original_status_id  =>   l_original_status_id,
                                          p_original_system_id  =>   l_original_system_id,
                                          p_txn_rec             =>   p_txn_rec,
                                          x_instance_id_lst     =>   x_instance_id_lst,
                                          p_unexpire            =>   l_unexpire,
                                          p_oks_txn_inst_tbl    =>   p_oks_txn_inst_tbl,
                                          p_child_inst_tbl      =>   p_child_inst_tbl,
                                          p_orig_install_date   =>   l_orig_install_date,
                                          x_return_status       =>   x_return_status,
                                          x_msg_count           =>   x_msg_count,
                                          x_msg_data            =>   x_msg_data
                                          );
            --
            --
            IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
               csi_gen_utility_pvt.put_line('Error from UPDATE_CHILD_INSTANCE_LOCATION..');
               RAISE FND_API.G_EXC_ERROR;
            END IF;

       END IF;
       --
       --
       IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
            RAISE FND_API.G_EXC_ERROR;
       END IF;

       FND_File.Put_Line(Fnd_File.LOG,'Return Status is' || x_return_status);
       IF nvl(p_txn_rec.transaction_status_code, fnd_api.g_miss_char) = fnd_api.g_miss_char THEN

         p_txn_rec.transaction_status_code := l_txn_status;

         update_txn_status(
           px_txn_rec       => p_txn_rec,
           x_return_status  => x_return_status);

         IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
           RAISE FND_API.G_EXC_ERROR;
         END IF;

       END IF;

       END IF;

      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
      END IF;

      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
             p_data       =>       x_msg_data
            );

EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
           IF FND_API.To_Boolean( p_commit )
           THEN
            ROLLBACK TO update_item_instance_pvt;
           END IF;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );

      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN

           IF FND_API.To_Boolean( p_commit )
           THEN
            ROLLBACK TO update_item_instance_pvt;
           END IF;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );
      WHEN OTHERS THEN
           IF FND_API.To_Boolean( p_commit )
           THEN
            ROLLBACK TO update_item_instance_pvt;
           END IF;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;

            IF     FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                    (      G_PKG_NAME            ,
                          l_api_name
                    );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );

END Update_Item_Instance;

/*---------------------------------------------------*/
/* Procedure name: expire_child_instances            */
/* Description   : procedure for                     */
/*                 Expiring all child Instance       */
/*                 associated with the parent        */
/*---------------------------------------------------*/

PROCEDURE expire_child_instances
   (   p_api_version         IN     NUMBER,
       p_commit              IN     VARCHAR2,
       p_init_msg_list       IN     VARCHAR2,
       p_validation_level    IN     NUMBER,
       p_instance_rec        IN     csi_datastructures_pub.instance_rec,
       p_expire_children     IN     VARCHAR2,
       p_txn_rec             IN OUT NOCOPY csi_datastructures_pub.transaction_rec,
       x_instance_id_lst     OUT    NOCOPY csi_datastructures_pub.id_tbl,
       p_oks_txn_inst_tbl    IN OUT NOCOPY oks_ibint_pub.txn_instance_tbl,
       x_return_status       OUT    NOCOPY VARCHAR2,
       x_msg_count           OUT    NOCOPY NUMBER,
       x_msg_data            OUT    NOCOPY VARCHAR2
   ) IS
    l_api_name               CONSTANT VARCHAR2(30)   := 'EXPIRE_CHILD_INSTANCE_PVT';
    l_api_version            CONSTANT NUMBER         := 1.0;
    l_debug_level            NUMBER;
    l_instance_id            NUMBER;
    l_dummy                  NUMBER;
    l_instance_rec           csi_datastructures_pub.instance_rec:=p_instance_rec;
    l_object_version_number  NUMBER;
    l_return_value           BOOLEAN;
    l_csi_item_instance_h_id NUMBER;
    l_full_dump_frequency    NUMBER;
    l_mod_value              NUMBER;
    l_dump_flag              VARCHAR2(1);
    l_rel_tbl                csi_datastructures_pub.ii_relationship_tbl;
    p_rel_query_rec          csi_datastructures_pub.relationship_query_rec;
    l_ii_relationship_level_tbl csi_ii_relationships_pvt.ii_relationship_level_tbl;

CURSOR curr_instance_rec(p_instance_id IN NUMBER)  IS
           SELECT
                 INSTANCE_ID,
                 INSTANCE_NUMBER,
                 EXTERNAL_REFERENCE,
                 INVENTORY_ITEM_ID,
                 NULL VLD_ORGANIZATION_ID,
                 INVENTORY_REVISION,
                 INV_MASTER_ORGANIZATION_ID,
                 SERIAL_NUMBER,
                 MFG_SERIAL_NUMBER_FLAG,
                 LOT_NUMBER,
                 QUANTITY,
                 UNIT_OF_MEASURE,
                 ACCOUNTING_CLASS_CODE,
                 INSTANCE_CONDITION_ID,
                 INSTANCE_STATUS_ID,
                 CUSTOMER_VIEW_FLAG,
                 MERCHANT_VIEW_FLAG,
                 SELLABLE_FLAG,
                 SYSTEM_ID,
                 INSTANCE_TYPE_CODE,
                 ACTIVE_START_DATE,
                 ACTIVE_END_DATE,
                 LOCATION_TYPE_CODE,
                 LOCATION_ID,
                 INV_ORGANIZATION_ID,
                 INV_SUBINVENTORY_NAME,
                 INV_LOCATOR_ID,
                 PA_PROJECT_ID,
                 PA_PROJECT_TASK_ID,
                 IN_TRANSIT_ORDER_LINE_ID,
                 WIP_JOB_ID,
                 PO_ORDER_LINE_ID,
                 LAST_OE_ORDER_LINE_ID,
                 LAST_OE_RMA_LINE_ID,
                 LAST_PO_PO_LINE_ID,
                 LAST_OE_PO_NUMBER,
                 LAST_WIP_JOB_ID,
                 LAST_PA_PROJECT_ID,
                 LAST_PA_TASK_ID,
                 LAST_OE_AGREEMENT_ID,
                 INSTALL_DATE,
                 MANUALLY_CREATED_FLAG,
                 RETURN_BY_DATE,
                 ACTUAL_RETURN_DATE,
                 CREATION_COMPLETE_FLAG,
                 COMPLETENESS_FLAG,
                 NULL VERSION_LABEL,
                 NULL VERSION_LABEL_DESCRIPTION,
                 CONTEXT,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 ATTRIBUTE6,
                 ATTRIBUTE7,
                 ATTRIBUTE8,
                 ATTRIBUTE9,
                 ATTRIBUTE10,
                 ATTRIBUTE11,
                 ATTRIBUTE12,
                 ATTRIBUTE13,
                 ATTRIBUTE14,
                 ATTRIBUTE15,
                 OBJECT_VERSION_NUMBER,
                 LAST_TXN_LINE_DETAIL_ID,
                 INSTALL_LOCATION_TYPE_CODE,
                 INSTALL_LOCATION_ID,
                 INSTANCE_USAGE_CODE,
                 CONFIG_INST_REV_NUM,
                 CONFIG_VALID_STATUS,
                 INSTANCE_DESCRIPTION,
		 --start of column addition for eam integration--
		 NETWORK_ASSET_FLAG,
		 MAINTAINABLE_FLAG,
		 PN_LOCATION_ID,
		 ASSET_CRITICALITY_CODE,
		 CATEGORY_ID,
		 EQUIPMENT_GEN_OBJECT_ID,
		 INSTANTIATION_FLAG,
		 LINEAR_LOCATION_ID,
		 OPERATIONAL_LOG_FLAG,
		 CHECKIN_STATUS,
		 SUPPLIER_WARRANTY_EXP_DATE,
		 ATTRIBUTE16,
		 ATTRIBUTE17,
		 ATTRIBUTE18,
		 ATTRIBUTE19,
		 ATTRIBUTE20,
		 ATTRIBUTE21,
		 ATTRIBUTE22,
		 ATTRIBUTE23,
		 ATTRIBUTE24,
		 ATTRIBUTE25,
		 ATTRIBUTE26,
		 ATTRIBUTE27,
		 ATTRIBUTE28,
		 ATTRIBUTE29,
		 ATTRIBUTE30,
		 --end of column addition for eam integration--
               -- Addition of columns for FA Integration
                 PURCHASE_UNIT_PRICE,
                 PURCHASE_CURRENCY_CODE,
                 PAYABLES_UNIT_PRICE,
                 PAYABLES_CURRENCY_CODE,
                 SALES_UNIT_PRICE,
                 SALES_CURRENCY_CODE,
                 OPERATIONAL_STATUS_CODE,
               -- End addition of columns for FA Integration
                 SOURCE_CODE -- Added Code for Siebel Genesis Project
           FROM  csi_item_instances
           WHERE instance_id = p_instance_id
           FOR UPDATE OF OBJECT_VERSION_NUMBER ;

CURSOR instance_csr (p_ins_id IN NUMBER) IS
      SELECT  *
      FROM    csi_item_instances
      WHERE   instance_id = p_ins_id;

l_curr_instance_rec     curr_instance_rec%ROWTYPE;
l_instance_csr             instance_csr%ROWTYPE;
l_temp                     VARCHAR2(1);
l_temp_date                DATE;
l_msg_count                NUMBER;
l_msg_index                NUMBER;
l_msg_dummy                NUMBER;
l_oks_txn_type             VARCHAR2(3);
l_eam_item                 BOOLEAN := FALSE;
l_vld_org                  NUMBER;
l_maintenance_object_type  NUMBER := 3;
l_ins_hist_id              NUMBER;
l_instance_history_id      NUMBER;
l_valid                    BOOLEAN     := TRUE;
l_creation_flag            VARCHAR2(1);
BEGIN
      -- Standard Start of API savepoint
        SAVEPOINT   expire_child_instance_pvt;

      -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (l_api_version,
                                            p_api_version,
                                            l_api_name,
                                            G_PKG_NAME   )
        THEN
              RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

      -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
              FND_MSG_PUB.initialize;
        END IF;

      --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option debug_level for debug message reporting
        l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

        -- If debug_level = 1 then dump the procedure name
        IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line ( 'expire_child_instance_pvt');
        END IF;

        -- If the debug level = 2 then dump all the parameters values.
        IF (l_debug_level >1) THEN
            csi_gen_utility_pvt.put_line ( 'expire_child_instance_pvt :'||
                                            p_api_version          ||'-'||
                                            p_commit               ||'-'||
                                            p_init_msg_list        );
        END IF;

       -- Start API body
       p_rel_query_rec.object_id := p_instance_rec.instance_id;
       p_rel_query_rec.relationship_type_code := 'COMPONENT-OF';
       --
      IF p_rel_query_rec.object_id IS NOT NULL AND
         p_rel_query_rec.object_id <> FND_API.G_MISS_NUM THEN
         csi_ii_relationships_pvt.Get_Children
          ( p_relationship_query_rec   => p_rel_query_rec,
            p_rel_tbl                  => l_rel_tbl,
            p_depth                    => NULL,
            p_active_relationship_only => FND_API.G_TRUE,
            p_time_stamp               => FND_API.G_MISS_DATE,
            p_get_dfs                  => FND_API.G_FALSE,
            p_ii_relationship_level_tbl => l_ii_relationship_level_tbl,
            x_return_status            => x_return_status,
            x_msg_count                => x_msg_count,
            x_msg_data                 => x_msg_data
          );
         IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_CHILDREN_ERROR');
            FND_MSG_PUB.Add;
            RAISE FND_API.G_EXC_ERROR;
         END IF;
      END IF;
       --
       -- FOR l_child_instance_id IN child_instances
       csi_gen_utility_pvt.put_line('Child 2 count is '||to_char(l_rel_tbl.count));
       IF l_rel_tbl.count > 0 THEN
          FOR j IN l_rel_tbl.FIRST .. l_rel_tbl.LAST
          LOOP
              -- Opening Cursor to retrieve Child Id records Details

                    OPEN curr_instance_rec(l_rel_tbl(j).subject_id);
                         FETCH curr_instance_rec INTO l_curr_instance_rec;
                               IF curr_instance_rec%NOTFOUND THEN
                                       FND_MESSAGE.Set_Name('CSI', 'CSI_API_RECORD_LOCKED');
                                       FND_MSG_PUB.ADD;
                                       RAISE FND_API.G_EXC_ERROR;
                               END IF;
                   CLOSE curr_instance_rec;

--  Added by sk for bug 2151760
     IF (( p_instance_rec.active_end_date IS NOT NULL) AND (p_instance_rec.active_end_date < SYSDATE))
      AND p_instance_rec.active_end_date <> fnd_api.g_miss_date
     THEN
       l_temp_date:= p_instance_rec.active_end_date;
       BEGIN
        SELECT 'x'
        INTO   l_temp
        FROM   csi_inst_transactions_v
        WHERE  instance_id=l_curr_instance_rec.instance_id
        AND    transaction_date>p_instance_rec.active_end_date
        AND    ROWNUM=1;

        IF l_temp IS NOT NULL
        THEN
           x_return_status := FND_API.G_RET_STS_ERROR ;
           FND_MESSAGE.Set_Name('CSI', 'CSI_CHILD_HAS_TXN');
           FND_MESSAGE.SET_TOKEN('INSTANCE_ID',l_curr_instance_rec.instance_number);
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
       EXCEPTION
         WHEN FND_API.G_EXC_ERROR THEN
              RAISE FND_API.G_EXC_ERROR;
         WHEN OTHERS THEN
           NULL;
       END;
     ELSE
       l_temp_date:=SYSDATE;
     END IF;
-- End addition by sk for bug 2151760
       l_instance_rec.object_version_number := l_curr_instance_rec.object_version_number + 1;
      -- l_instance_rec.instance_status_id    := 1;

     -- Added by sguthiva for bug 2520978
     -- Modified by srramakr for enhancement 2315522.
     -- This will allow the user to pass a Terminable status during expiration.
     IF p_instance_rec.instance_status_id IS NOT NULL AND
        p_instance_rec.instance_status_id <> fnd_api.g_miss_num THEN
        IF NOT (CSI_Item_Instance_vld_pvt.val_inst_ter_flag(
                                            p_instance_rec.instance_status_id)) THEN
           FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_TERM_STATUS');
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
        l_instance_rec.instance_status_id := p_instance_rec.instance_status_id;
     ELSE
        l_instance_rec.instance_status_id := fnd_profile.value('CSI_SYS_TERM_INST_STATUS_ID');
        IF  l_instance_rec.instance_status_id IS NULL
        OR l_instance_rec.instance_status_id=fnd_api.g_miss_num
        THEN
           l_instance_rec.instance_status_id := 1;
        END IF;
     END IF;
     -- End addition by sguthiva for bug 2520978.

        -- Added the following code for eam integration
           IF p_instance_rec.vld_organization_id IS NULL OR
              p_instance_rec.vld_organization_id = fnd_api.g_miss_num
           THEN
             BEGIN
              SELECT last_vld_organization_id
                INTO l_vld_org
                FROM csi_item_instances
               WHERE instance_id = p_instance_rec.instance_id;
             EXCEPTION
               WHEN NO_DATA_FOUND THEN
                fnd_message.set_name('CSI','CSI_API_INVALID_INSTANCE_ID');
                fnd_message.set_token('INSTANCE_ID',p_instance_rec.instance_id);
                fnd_msg_pub.ADD;
             END;
           ELSE
             l_vld_org := p_instance_rec.vld_organization_id;
           END IF;

           IF csi_item_instance_vld_pvt.Check_for_eam_item
              (p_inventory_item_id  => l_curr_instance_rec.inventory_item_id,
               p_organization_id    => l_vld_org)
           THEN
             l_eam_item := TRUE;
           END IF;

           IF l_eam_item AND
             (l_temp_date IS NOT NULL AND
              l_temp_date <> fnd_api.g_miss_date)
           THEN
            IF NOT eam_common_utilities_pvt.check_deactivate
              (p_maintenance_object_id   => p_instance_rec.instance_id
              ,p_maintenance_object_type => l_maintenance_object_type)
            THEN
              csi_gen_utility_pvt.put_line('Error from eam_common_utilities_pvt.check_deactivate API ');
              RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
        -- End code addition for eam integration
    -- validate instance status id
       IF NVL(l_instance_rec.instance_status_id,fnd_api.g_miss_num) <> fnd_api.g_miss_num
       THEN
         csi_item_instance_vld_pvt.is_valid_status(
           p_instance_status_id     => l_instance_rec.instance_status_id,
           p_creation_complete_flag => l_creation_flag,
           l_return_value           => l_valid);
          IF NOT(l_valid)
          THEN
             RAISE fnd_api.g_exc_error;
          END IF;
        END IF;

        IF l_instance_rec.instance_status_id IS NOT NULL AND
           l_instance_rec.instance_status_id <> FND_API.G_MISS_NUM AND
           l_instance_rec.instance_status_id <> l_curr_instance_rec.instance_status_id
        THEN
           IF NOT csi_item_instance_vld_pvt.is_status_updateable
                  (p_instance_status => l_instance_rec.instance_status_id
                  ,p_current_status  => l_curr_instance_rec.instance_status_id)
           THEN
             RAISE fnd_api.g_exc_error;
           END IF;
        END IF;

       CSI_ITEM_INSTANCES_PKG.Update_Row
       (  p_INSTANCE_ID                 => l_rel_tbl(j).subject_id,
          p_INSTANCE_NUMBER             => FND_API.G_MISS_CHAR,
          p_EXTERNAL_REFERENCE          => FND_API.G_MISS_CHAR,
          p_INVENTORY_ITEM_ID           => FND_API.G_MISS_NUM,
          p_INVENTORY_REVISION          => FND_API.G_MISS_CHAR,
          p_INV_MASTER_ORGANIZATION_ID  => FND_API.G_MISS_NUM,
          p_SERIAL_NUMBER               => FND_API.G_MISS_CHAR,
          p_MFG_SERIAL_NUMBER_FLAG      => FND_API.G_MISS_CHAR,
          p_LOT_NUMBER                  => FND_API.G_MISS_CHAR,
          p_QUANTITY                    => FND_API.G_MISS_NUM,
          p_UNIT_OF_MEASURE             => FND_API.G_MISS_CHAR,
          p_ACCOUNTING_CLASS_CODE       => FND_API.G_MISS_CHAR,
          p_INSTANCE_CONDITION_ID       => FND_API.G_MISS_NUM,
          p_INSTANCE_STATUS_ID          => l_instance_rec.instance_status_id,
          p_CUSTOMER_VIEW_FLAG          => FND_API.G_MISS_CHAR,
          p_MERCHANT_VIEW_FLAG          => FND_API.G_MISS_CHAR,
          p_SELLABLE_FLAG               => FND_API.G_MISS_CHAR,
          p_SYSTEM_ID                   => FND_API.G_MISS_NUM,
          p_INSTANCE_TYPE_CODE          => FND_API.G_MISS_CHAR,
          p_ACTIVE_START_DATE           => FND_API.G_MISS_DATE,
          p_ACTIVE_END_DATE             => l_temp_date,--SYSDATE, --p_instance_rec.active_end_date,
          p_LOCATION_TYPE_CODE          => FND_API.G_MISS_CHAR,
          p_LOCATION_ID                 => FND_API.G_MISS_NUM,
          p_INV_ORGANIZATION_ID         => FND_API.G_MISS_NUM,
          p_INV_SUBINVENTORY_NAME       => FND_API.G_MISS_CHAR,
          p_INV_LOCATOR_ID              => FND_API.G_MISS_NUM,
          p_PA_PROJECT_ID               => FND_API.G_MISS_NUM,
          p_PA_PROJECT_TASK_ID          => FND_API.G_MISS_NUM,
          p_IN_TRANSIT_ORDER_LINE_ID    => FND_API.G_MISS_NUM,
          p_WIP_JOB_ID                  => FND_API.G_MISS_NUM,
          p_PO_ORDER_LINE_ID            => FND_API.G_MISS_NUM,
          p_LAST_OE_ORDER_LINE_ID       => FND_API.G_MISS_NUM,
          p_LAST_OE_RMA_LINE_ID         => FND_API.G_MISS_NUM,
          p_LAST_PO_PO_LINE_ID          => FND_API.G_MISS_NUM,
          p_LAST_OE_PO_NUMBER           => FND_API.G_MISS_CHAR,
          p_LAST_WIP_JOB_ID             => FND_API.G_MISS_NUM,
          p_LAST_PA_PROJECT_ID          => FND_API.G_MISS_NUM,
          p_LAST_PA_TASK_ID             => FND_API.G_MISS_NUM,
          p_LAST_OE_AGREEMENT_ID        => FND_API.G_MISS_NUM,
          p_INSTALL_DATE                => FND_API.G_MISS_DATE,
          p_MANUALLY_CREATED_FLAG       => FND_API.G_MISS_CHAR,
          p_RETURN_BY_DATE              => FND_API.G_MISS_DATE,
          p_ACTUAL_RETURN_DATE          => FND_API.G_MISS_DATE,
          p_CREATION_COMPLETE_FLAG      => FND_API.G_MISS_CHAR,
          p_COMPLETENESS_FLAG           => FND_API.G_MISS_CHAR,
          p_CONTEXT                     => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE1                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE2                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE3                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE4                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE5                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE6                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE7                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE8                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE9                  => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE10                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE11                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE12                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE13                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE14                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE15                 => FND_API.G_MISS_CHAR,
          p_CREATED_BY                  => fnd_api.g_miss_num,
          p_CREATION_DATE               => fnd_api.g_miss_date,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID,
          p_LAST_UPDATE_DATE            => SYSDATE,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.CONC_LOGIN_ID,
          p_OBJECT_VERSION_NUMBER       => l_instance_rec.OBJECT_VERSION_NUMBER,
          p_LAST_TXN_LINE_DETAIL_ID     => FND_API.G_MISS_NUM,
          p_INSTALL_LOCATION_TYPE_CODE  => FND_API.G_MISS_CHAR,
          p_INSTALL_LOCATION_ID         => FND_API.G_MISS_NUM,
          p_INSTANCE_USAGE_CODE         => FND_API.G_MISS_CHAR,
          p_CONFIG_INST_HDR_ID          => NULL, -- FND_API.G_MISS_NUM,
          p_CONFIG_INST_REV_NUM         => NULL, -- FND_API.G_MISS_NUM,
          p_CONFIG_INST_ITEM_ID         => NULL, -- FND_API.G_MISS_NUM,
          p_CONFIG_VALID_STATUS         => NULL, -- FND_API.G_MISS_CHAR,
          p_INSTANCE_DESCRIPTION        => FND_API.G_MISS_CHAR,
          p_REQUEST_ID                  => FND_API.G_MISS_NUM,
          p_PROGRAM_APPLICATION_ID      => FND_API.G_MISS_NUM,
          p_PROGRAM_ID                  => FND_API.G_MISS_NUM,
          p_PROGRAM_UPDATE_DATE         => FND_API.G_MISS_DATE,
	  --start of parameters addition for eam integration--
          p_NETWORK_ASSET_FLAG          => FND_API.G_MISS_CHAR,
          p_MAINTAINABLE_FLAG           => FND_API.G_MISS_CHAR,
          p_PN_LOCATION_ID              => FND_API.G_MISS_NUM,
          p_ASSET_CRITICALITY_CODE      => FND_API.G_MISS_CHAR,
          p_CATEGORY_ID                 => FND_API.G_MISS_NUM,
          p_EQUIPMENT_GEN_OBJECT_ID     => FND_API.G_MISS_NUM,
          p_INSTANTIATION_FLAG          => FND_API.G_MISS_CHAR,
          p_LINEAR_LOCATION_ID          => FND_API.G_MISS_NUM,
          p_OPERATIONAL_LOG_FLAG        => FND_API.G_MISS_CHAR,
          p_CHECKIN_STATUS              => FND_API.G_MISS_NUM,
          p_SUPPLIER_WARRANTY_EXP_DATE  => FND_API.G_MISS_DATE,
          p_ATTRIBUTE16                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE17                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE18                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE19                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE20                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE21                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE22                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE23                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE24                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE25                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE26                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE27                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE28                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE29                 => FND_API.G_MISS_CHAR,
          p_ATTRIBUTE30                 => FND_API.G_MISS_CHAR,
	  --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
          p_PURCHASE_UNIT_PRICE         => FND_API.G_MISS_NUM,
          p_PURCHASE_CURRENCY_CODE      => FND_API.G_MISS_CHAR,
          p_PAYABLES_UNIT_PRICE         => FND_API.G_MISS_NUM,
          p_PAYABLES_CURRENCY_CODE      => FND_API.G_MISS_CHAR,
          p_SALES_UNIT_PRICE            => FND_API.G_MISS_NUM,
          p_SALES_CURRENCY_CODE         => FND_API.G_MISS_CHAR,
          p_OPERATIONAL_STATUS_CODE     => FND_API.G_MISS_CHAR,
    -- End addition of columns for FA Integration
          p_SOURCE_CODE                 => FND_API.G_MISS_CHAR -- Added Code for Siebel Genesis Project
           );

           CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_IF_Exists_Flag => 'Y'
            ,p_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN

              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_VALIDATE_TXN');
              FND_MESSAGE.SET_TOKEN('TRANSACTION_ID',p_txn_rec.transaction_id );
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;

-- Get the full_dump_frequency from csi_install_parameter
      IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
          csi_gen_utility_pvt.populate_install_param_rec;
       END IF;
       --
       l_full_dump_frequency := csi_datastructures_pub.g_install_param_rec.history_full_dump_frequency;
       --
       IF l_full_dump_frequency IS NULL THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_FULL_DUMP_FAILED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
       END IF;

 -- Get a unique history item instance id from the sequence
          l_csi_item_instance_h_id :=
                                 csi_item_instance_vld_pvt.get_csi_item_instance_h_id;

       SELECT MOD(p_instance_rec.object_version_number,l_full_dump_frequency)
       INTO   l_mod_value
       FROM   dual;


     IF (l_mod_value = 0) THEN
          -- If the mod value is 0 then dump all the columns both changed and unchanged
          -- changed columns have old and new values while the unchanged values have old and new values
          -- exactly same

       CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => l_rel_tbl(j).subject_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => l_curr_instance_rec.INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => l_curr_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_curr_instance_rec.EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => l_curr_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_curr_instance_rec.INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => l_curr_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_curr_instance_rec.INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => l_curr_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => l_curr_instance_rec.SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => l_curr_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_curr_instance_rec.LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => l_curr_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_curr_instance_rec.QUANTITY
            ,p_NEW_QUANTITY                      => l_curr_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_curr_instance_rec.UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => l_curr_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_curr_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_curr_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_curr_instance_rec.INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => l_curr_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_curr_instance_rec.INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_curr_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => l_curr_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_curr_instance_rec.MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => l_curr_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_curr_instance_rec.SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => l_curr_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_curr_instance_rec.SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_curr_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => l_curr_instance_rec.INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => l_curr_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_curr_instance_rec.ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => l_curr_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_curr_instance_rec.ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_temp_date --SYSDATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_curr_instance_rec.LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_curr_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_curr_instance_rec.LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_curr_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_curr_instance_rec.INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_curr_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_curr_instance_rec.INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_curr_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_curr_instance_rec.INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_curr_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_curr_instance_rec.PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_curr_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_curr_instance_rec.PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_curr_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_curr_instance_rec.WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_curr_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_curr_instance_rec.PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_curr_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_curr_instance_rec.COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => l_curr_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'Y'
            ,p_NEW_CONTEXT                       => l_curr_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => l_curr_instance_rec.CONTEXT
            ,p_NEW_ATTRIBUTE1                    => l_curr_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_curr_instance_rec.ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => l_curr_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_curr_instance_rec.ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => l_curr_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_curr_instance_rec.ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => l_curr_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_curr_instance_rec.ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => l_curr_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_curr_instance_rec.ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => l_curr_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_curr_instance_rec.ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => l_curr_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_curr_instance_rec.ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => l_curr_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_curr_instance_rec.ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => l_curr_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_curr_instance_rec.ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => l_curr_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_curr_instance_rec.ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => l_curr_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_curr_instance_rec.ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => l_curr_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_curr_instance_rec.ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => l_curr_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_curr_instance_rec.ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => l_curr_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_curr_instance_rec.ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => l_curr_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_curr_instance_rec.ATTRIBUTE15
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_curr_instance_rec.INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => l_curr_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => l_curr_instance_rec.INSTANCE_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => l_curr_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_CONFIG_INST_REV_NUM           => l_curr_instance_rec.CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => NULL -- l_curr_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_curr_instance_rec.CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => l_curr_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_curr_instance_rec.INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => l_curr_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => l_curr_instance_rec.INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_curr_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_curr_instance_rec.RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => l_curr_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_curr_instance_rec.ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => l_curr_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_curr_instance_rec.LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_curr_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_curr_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => l_curr_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_curr_instance_rec.LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => l_curr_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_curr_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => l_curr_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_curr_instance_rec.LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => l_curr_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_curr_instance_rec.LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => l_curr_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_curr_instance_rec.LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => l_curr_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_curr_instance_rec.NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => l_curr_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_curr_instance_rec.MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => l_curr_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_curr_instance_rec.PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => l_curr_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_curr_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => l_curr_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_curr_instance_rec.CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => l_curr_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_curr_instance_rec.INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => l_curr_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_curr_instance_rec.LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => l_curr_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_curr_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => l_curr_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_curr_instance_rec.CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => l_curr_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_curr_instance_rec.ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => l_curr_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_curr_instance_rec.ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => l_curr_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_curr_instance_rec.ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => l_curr_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_curr_instance_rec.ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => l_curr_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_curr_instance_rec.ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => l_curr_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_curr_instance_rec.ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => l_curr_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_curr_instance_rec.ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => l_curr_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_curr_instance_rec.ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => l_curr_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_curr_instance_rec.ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => l_curr_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_curr_instance_rec.ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => l_curr_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_curr_instance_rec.ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => l_curr_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_curr_instance_rec.ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => l_curr_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_curr_instance_rec.ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => l_curr_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_curr_instance_rec.ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => l_curr_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_curr_instance_rec.ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => l_curr_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_curr_instance_rec.PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => l_curr_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_curr_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => l_curr_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_curr_instance_rec.PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => l_curr_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_curr_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => l_curr_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_curr_instance_rec.SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => l_curr_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_curr_instance_rec.SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => l_curr_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_curr_instance_rec.OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_curr_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => l_curr_instance_rec.SOURCE_CODE
            ,p_NEW_SOURCE_CODE                   => l_curr_instance_rec.SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );

    ELSE
          -- If the mod value is not equal to zero then dump only the changed columns
          -- while the unchanged values have old and new values as null

       CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => l_rel_tbl(j).subject_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => FND_API.G_MISS_CHAR
            ,p_NEW_INSTANCE_NUMBER               => FND_API.G_MISS_CHAR
            ,p_OLD_EXTERNAL_REFERENCE            => FND_API.G_MISS_CHAR
            ,p_NEW_EXTERNAL_REFERENCE            => FND_API.G_MISS_CHAR
            ,p_OLD_INVENTORY_ITEM_ID             => FND_API.G_MISS_NUM
            ,p_NEW_INVENTORY_ITEM_ID             => FND_API.G_MISS_NUM
            ,p_OLD_INVENTORY_REVISION            => FND_API.G_MISS_CHAR
            ,p_NEW_INVENTORY_REVISION            => FND_API.G_MISS_CHAR
            ,p_OLD_INV_MASTER_ORGZN_ID           => FND_API.G_MISS_NUM
            ,p_NEW_INV_MASTER_ORGZN_ID           => FND_API.G_MISS_NUM
            ,p_OLD_SERIAL_NUMBER                 => FND_API.G_MISS_CHAR
            ,p_NEW_SERIAL_NUMBER                 => FND_API.G_MISS_CHAR
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => FND_API.G_MISS_CHAR
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => FND_API.G_MISS_CHAR
            ,p_OLD_LOT_NUMBER                    => FND_API.G_MISS_CHAR
            ,p_NEW_LOT_NUMBER                    => FND_API.G_MISS_CHAR
            ,p_OLD_QUANTITY                      => FND_API.G_MISS_NUM
            ,p_NEW_QUANTITY                      => FND_API.G_MISS_NUM
            ,p_OLD_UNIT_OF_MEASURE               => FND_API.G_MISS_CHAR
            ,p_NEW_UNIT_OF_MEASURE               => FND_API.G_MISS_CHAR
            ,p_OLD_ACCOUNTING_CLASS_CODE         => FND_API.G_MISS_CHAR
            ,p_NEW_ACCOUNTING_CLASS_CODE         => FND_API.G_MISS_CHAR
            ,p_OLD_INSTANCE_CONDITION_ID         => FND_API.G_MISS_NUM
            ,p_NEW_INSTANCE_CONDITION_ID         => FND_API.G_MISS_NUM
            ,p_OLD_INSTANCE_STATUS_ID            => l_curr_instance_rec.INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_NEW_CUSTOMER_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_OLD_MERCHANT_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_NEW_MERCHANT_VIEW_FLAG            => FND_API.G_MISS_CHAR
            ,p_OLD_SELLABLE_FLAG                 => FND_API.G_MISS_CHAR
            ,p_NEW_SELLABLE_FLAG                 => FND_API.G_MISS_CHAR
            ,p_OLD_SYSTEM_ID                     => FND_API.G_MISS_NUM
            ,p_NEW_SYSTEM_ID                     => FND_API.G_MISS_NUM
            ,p_OLD_INSTANCE_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_NEW_INSTANCE_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_OLD_ACTIVE_START_DATE             => FND_API.G_MISS_DATE
            ,p_NEW_ACTIVE_START_DATE             => FND_API.G_MISS_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_curr_instance_rec.ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_temp_date --SYSDATE
            ,p_OLD_LOCATION_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_NEW_LOCATION_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_OLD_LOCATION_ID                   => FND_API.G_MISS_NUM
            ,p_NEW_LOCATION_ID                   => FND_API.G_MISS_NUM
            ,p_OLD_INV_ORGANIZATION_ID           => FND_API.G_MISS_NUM
            ,p_NEW_INV_ORGANIZATION_ID           => FND_API.G_MISS_NUM
            ,p_OLD_INV_SUBINVENTORY_NAME         => FND_API.G_MISS_CHAR
            ,p_NEW_INV_SUBINVENTORY_NAME         => FND_API.G_MISS_CHAR
            ,p_OLD_INV_LOCATOR_ID                => FND_API.G_MISS_NUM
            ,p_NEW_INV_LOCATOR_ID                => FND_API.G_MISS_NUM
            ,p_OLD_PA_PROJECT_ID                 => FND_API.G_MISS_NUM
            ,p_NEW_PA_PROJECT_ID                 => FND_API.G_MISS_NUM
            ,p_OLD_PA_PROJECT_TASK_ID            => FND_API.G_MISS_NUM
            ,p_NEW_PA_PROJECT_TASK_ID            => FND_API.G_MISS_NUM
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => FND_API.G_MISS_NUM
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => FND_API.G_MISS_NUM
            ,p_OLD_WIP_JOB_ID                    => FND_API.G_MISS_NUM
            ,p_NEW_WIP_JOB_ID                    => FND_API.G_MISS_NUM
            ,p_OLD_PO_ORDER_LINE_ID              => FND_API.G_MISS_NUM
            ,p_NEW_PO_ORDER_LINE_ID              => FND_API.G_MISS_NUM
            ,p_OLD_COMPLETENESS_FLAG             => FND_API.G_MISS_CHAR
            ,p_NEW_COMPLETENESS_FLAG             => FND_API.G_MISS_CHAR
            ,p_FULL_DUMP_FLAG                    => 'N'
            ,p_NEW_CONTEXT                       => FND_API.G_MISS_CHAR
            ,P_OLD_CONTEXT                       => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE1                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE1                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE2                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE2                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE3                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE3                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE4                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE4                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE5                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE5                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE6                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE6                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE7                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE7                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE8                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE8                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE9                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE9                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE10                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE10                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE11                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE11                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE12                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE12                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE13                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE13                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE14                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE14                   => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE15                   => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE15                   => FND_API.G_MISS_CHAR
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_NEW_INST_LOC_TYPE_CODE            => FND_API.G_MISS_CHAR
            ,p_OLD_INST_LOC_ID                   => FND_API.G_MISS_NUM
            ,p_NEW_INST_LOC_ID                   => FND_API.G_MISS_NUM
            ,p_OLD_INST_USAGE_CODE               => FND_API.G_MISS_CHAR
            ,p_NEW_INST_USAGE_CODE               => FND_API.G_MISS_CHAR
            ,p_OLD_CONFIG_INST_REV_NUM           => FND_API.G_MISS_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => NULL -- FND_API.G_MISS_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => FND_API.G_MISS_CHAR
            ,p_NEW_CONFIG_VALID_STATUS           => FND_API.G_MISS_CHAR
            ,p_OLD_INSTANCE_DESCRIPTION          => FND_API.G_MISS_CHAR
            ,p_NEW_INSTANCE_DESCRIPTION          => FND_API.G_MISS_CHAR
            ,p_OLD_INSTALL_DATE                  => FND_API.G_MISS_DATE
            ,p_NEW_INSTALL_DATE                  => FND_API.G_MISS_DATE
            ,p_OLD_RETURN_BY_DATE                => FND_API.G_MISS_DATE
            ,p_NEW_RETURN_BY_DATE                => FND_API.G_MISS_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => FND_API.G_MISS_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => FND_API.G_MISS_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => FND_API.G_MISS_NUM
            ,p_NEW_LAST_OE_AGREEMENT_ID          => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_WIP_JOB_ID               => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_WIP_JOB_ID               => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_PO_PO_LINE_ID            => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_PO_PO_LINE_ID            => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_PA_PROJECT_ID            => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_PA_PROJECT_ID            => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_PA_TASK_ID          => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_PA_TASK_ID          => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => FND_API.G_MISS_NUM
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => FND_API.G_MISS_NUM
	    ,p_OLD_LAST_OE_PO_NUMBER             => FND_API.G_MISS_CHAR
	    ,p_NEW_LAST_OE_PO_NUMBER             => FND_API.G_MISS_CHAR
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => FND_API.G_MISS_CHAR
	    ,p_NEW_NETWORK_ASSET_FLAG             => FND_API.G_MISS_CHAR
	    ,p_OLD_MAINTAINABLE_FLAG              => FND_API.G_MISS_CHAR
	    ,p_NEW_MAINTAINABLE_FLAG              => FND_API.G_MISS_CHAR
	    ,p_OLD_PN_LOCATION_ID                 => FND_API.G_MISS_NUM
	    ,p_NEW_PN_LOCATION_ID                 => FND_API.G_MISS_NUM
	    ,p_OLD_ASSET_CRITICALITY_CODE         => FND_API.G_MISS_CHAR
	    ,p_NEW_ASSET_CRITICALITY_CODE         => FND_API.G_MISS_CHAR
	    ,p_OLD_CATEGORY_ID                    => FND_API.G_MISS_NUM
	    ,p_NEW_CATEGORY_ID                    => FND_API.G_MISS_NUM
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => FND_API.G_MISS_NUM
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => FND_API.G_MISS_NUM
	    ,p_OLD_INSTANTIATION_FLAG             => FND_API.G_MISS_CHAR
	    ,p_NEW_INSTANTIATION_FLAG             => FND_API.G_MISS_CHAR
	    ,p_OLD_LINEAR_LOCATION_ID             => FND_API.G_MISS_NUM
	    ,p_NEW_LINEAR_LOCATION_ID             => FND_API.G_MISS_NUM
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => FND_API.G_MISS_CHAR
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => FND_API.G_MISS_CHAR
	    ,p_OLD_CHECKIN_STATUS                 => FND_API.G_MISS_NUM
	    ,p_NEW_CHECKIN_STATUS                 => FND_API.G_MISS_NUM
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => FND_API.G_MISS_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => FND_API.G_MISS_DATE
            ,p_OLD_ATTRIBUTE16                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE16                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE17                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE17                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE18                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE18                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE19                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE19                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE20                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE20                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE21                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE21                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE22                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE22                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE23                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE23                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE24                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE24                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE25                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE25                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE26                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE26                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE27                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE27                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE28                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE28                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE29                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE29                    => FND_API.G_MISS_CHAR
            ,p_OLD_ATTRIBUTE30                    => FND_API.G_MISS_CHAR
            ,p_NEW_ATTRIBUTE30                    => FND_API.G_MISS_CHAR
  	    --end of parameters addition for eam integration--
       -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_OLD_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_OLD_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_OLD_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_OLD_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_NEW_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_OLD_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_NEW_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_OLD_OPERATIONAL_STATUS_CODE        => fnd_api.g_miss_char
            ,p_NEW_OPERATIONAL_STATUS_CODE        => fnd_api.g_miss_char
        -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => FND_API.G_MISS_CHAR
            ,p_NEW_SOURCE_CODE                   => FND_API.G_MISS_CHAR
            -- End Add Code for Siebel Genesis Project
            );


      END IF;


      -- Calling eam API to log instance update event
       IF l_eam_item
       THEN
          IF l_ins_hist_id IS NOT NULL
          THEN
             l_instance_history_id:=l_ins_hist_id;
          ELSE
             l_instance_history_id:=l_csi_item_instance_h_id;
          END IF;
          eam_asset_log_pvt.instance_update_event
          (p_api_version         => p_api_version
          ,p_init_msg_list       => fnd_api.g_false
          ,p_commit              => fnd_api.g_false
          ,p_validation_level    => fnd_api.g_valid_level_full
          ,x_return_status       => x_return_status
          ,x_msg_count           => x_msg_count
          ,x_msg_data            => x_msg_data
          ,p_instance_id         => l_rel_tbl(j).subject_id
          ,p_ref_id              => l_instance_history_id
          ,p_event_date          => sysdate);
         IF NOT(x_return_status = fnd_api.g_ret_sts_success)
         THEN
            csi_gen_utility_pvt.put_line('Error from eam_asset_log_pvt.instance_update_event API');
            RAISE fnd_api.g_exc_error;
         END IF;
       END IF;
      -- Calling eam API to log instance update event

       -- srramakr Bug # 3945813 We no longer look for service_order_allowed_flag to decide
       -- whether contracts should be terminated or not. Instead, we look for terminated_flag.
       -- Before terminating the contract check whether the terminated_flag is set to 'Y'
       -- for the instance_status passed. If set to 'N' dont make call to contracts.
       OPEN  instance_csr (l_rel_tbl(j).subject_id);
       FETCH instance_csr INTO l_instance_csr;
       CLOSE instance_csr;

       IF csi_item_instance_vld_pvt.termination_status
          ( p_instance_status_id => l_instance_csr.instance_status_id )
       THEN
         IF p_txn_rec.transaction_type_id in (53,54) THEN
            l_oks_txn_type := 'RET';
         ELSE
            l_oks_txn_type := 'TRM';
         END IF;
        csi_item_instance_pvt.Call_to_Contracts
         ( p_transaction_type   =>   l_oks_txn_type
          ,p_instance_id        =>   l_rel_tbl(j).subject_id
          ,p_new_instance_id    =>   NULL
          ,p_vld_org_id         =>   l_instance_csr.last_vld_organization_id
          ,p_quantity           =>   NULL
          ,p_party_account_id1  =>   NULL
          ,p_party_account_id2  =>   NULL
          ,p_transaction_date   =>   p_txn_rec.transaction_date --l_temp_date
          ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date --l_temp_date
	  ,p_txn_type_id        => p_txn_rec.transaction_type_id --added for  BUG  5752271
          ,p_grp_call_contracts =>   p_instance_rec.grp_call_contracts
          ,p_oks_txn_inst_tbl   =>   p_oks_txn_inst_tbl
          ,x_return_status      =>   x_return_status
          ,x_msg_count          =>   x_msg_count
          ,x_msg_data           =>   x_msg_data
          );

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
              WHILE l_msg_count > 0 LOOP
                x_msg_data := FND_MSG_PUB.GET
                              (  l_msg_index,
                                 FND_API.G_FALSE
                               );
                csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                    l_msg_index := l_msg_index + 1;
                    l_msg_count := l_msg_count - 1;
              END LOOP;
                RAISE FND_API.G_EXC_ERROR;
           END IF;
        END IF;

    END LOOP;
 END IF; -- l_rel_tbl count check
      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count   =>   x_msg_count ,
             p_data    =>   x_msg_data
            );

EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO expire_child_instance_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                 p_data   =>  x_msg_data
                );

    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO expire_child_instance_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                 p_data    =>  x_msg_data
                );
    WHEN OTHERS THEN
            ROLLBACK TO expire_child_instance_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF FND_MSG_PUB.Check_Msg_Level
                 (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
              THEN
                  FND_MSG_PUB.Add_Exc_Msg
                 ( G_PKG_NAME, l_api_name );
              END IF;
                  FND_MSG_PUB.Count_And_Get
                 ( p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                   p_data   =>  x_msg_data
                );

END expire_child_instances;

/*---------------------------------------------------*/
/* Procedure name: expire_item_instance              */
/* Description   : procedure for                     */
/*                 Expiring an Item Instance         */
/*---------------------------------------------------*/

PROCEDURE expire_item_instance
 (
      p_api_version       IN      NUMBER
     ,p_commit            IN      VARCHAR2
     ,p_init_msg_list     IN      VARCHAR2
     ,p_validation_level  IN      NUMBER
     ,p_instance_rec      IN      csi_datastructures_pub.instance_rec
     ,p_expire_children   IN      VARCHAR2
     ,p_txn_rec           IN OUT  NOCOPY csi_datastructures_pub.transaction_rec
     ,x_instance_id_lst   OUT     NOCOPY csi_datastructures_pub.id_tbl
     ,p_oks_txn_inst_tbl  IN OUT NOCOPY oks_ibint_pub.txn_instance_tbl
     ,x_return_status     OUT     NOCOPY VARCHAR2
     ,x_msg_count         OUT     NOCOPY NUMBER
     ,x_msg_data          OUT     NOCOPY VARCHAR2
 )

IS
    l_api_name                  CONSTANT VARCHAR2(30)   := 'EXPIRE_ITEM_NSTANCE';
    l_api_version               CONSTANT NUMBER         := 1.0;
    l_debug_level               NUMBER;
    l_instance_id               NUMBER;
    l_instance_rec              csi_datastructures_pub.instance_rec;
    l_temp_instance_rec         csi_datastructures_pub.instance_rec;
    l_csi_item_instance_h_id    NUMBER;
    l_full_dump_frequency       NUMBER;
    l_mod_value                 NUMBER;
    l_dump_flag                 VARCHAR2(1);
    l_dummy                     NUMBER;
    -- Added variables for bug 6788183
    l_exp_rltns_rec             csi_datastructures_pub.ii_relationship_rec;
    l_instance_id_lst           csi_datastructures_pub.id_tbl;
    l_return_status             VARCHAR2(1) := fnd_api.g_ret_sts_success;
    l_msg_data                  VARCHAR2(2000);

    CURSOR get_instance_rec(p_instance_id IN NUMBER)  IS
        SELECT
         INSTANCE_ID,
         INSTANCE_NUMBER,
         EXTERNAL_REFERENCE,
         INVENTORY_ITEM_ID,
         NULL VLD_ORGANIZATION_ID,
         INVENTORY_REVISION,
         INV_MASTER_ORGANIZATION_ID,
         SERIAL_NUMBER,
         MFG_SERIAL_NUMBER_FLAG,
         LOT_NUMBER,
         QUANTITY,
         UNIT_OF_MEASURE,
         ACCOUNTING_CLASS_CODE,
         INSTANCE_CONDITION_ID,
         INSTANCE_STATUS_ID,
         CUSTOMER_VIEW_FLAG,
         MERCHANT_VIEW_FLAG,
         SELLABLE_FLAG,
         SYSTEM_ID,
         INSTANCE_TYPE_CODE,
         ACTIVE_START_DATE,
         ACTIVE_END_DATE,
         LOCATION_TYPE_CODE,
         LOCATION_ID,
         INV_ORGANIZATION_ID,
         INV_SUBINVENTORY_NAME,
         INV_LOCATOR_ID,
         PA_PROJECT_ID,
         PA_PROJECT_TASK_ID,
         IN_TRANSIT_ORDER_LINE_ID,
         WIP_JOB_ID,
         PO_ORDER_LINE_ID,
         LAST_OE_ORDER_LINE_ID,
         LAST_OE_RMA_LINE_ID,
         LAST_PO_PO_LINE_ID,
         LAST_OE_PO_NUMBER,
         LAST_WIP_JOB_ID,
         LAST_PA_PROJECT_ID,
         LAST_PA_TASK_ID,
         LAST_OE_AGREEMENT_ID,
         INSTALL_DATE,
         MANUALLY_CREATED_FLAG,
         RETURN_BY_DATE,
         ACTUAL_RETURN_DATE,
         CREATION_COMPLETE_FLAG,
         COMPLETENESS_FLAG,
         NULL VERSION_LABEL,
         NULL VERSION_LABEL_DESCRIPTION,
         CONTEXT,
         ATTRIBUTE1,
         ATTRIBUTE2,
         ATTRIBUTE3,
         ATTRIBUTE4,
         ATTRIBUTE5,
         ATTRIBUTE6,
         ATTRIBUTE7,
         ATTRIBUTE8,
         ATTRIBUTE9,
         ATTRIBUTE10,
         ATTRIBUTE11,
         ATTRIBUTE12,
         ATTRIBUTE13,
         ATTRIBUTE14,
         ATTRIBUTE15,
         OBJECT_VERSION_NUMBER,
         LAST_TXN_LINE_DETAIL_ID,
         INSTALL_LOCATION_TYPE_CODE,
         INSTALL_LOCATION_ID,
         INSTANCE_USAGE_CODE,
         CONFIG_INST_HDR_ID,
         CONFIG_INST_REV_NUM,
         CONFIG_INST_ITEM_ID,
         CONFIG_VALID_STATUS,
         INSTANCE_DESCRIPTION,
	 --start of column addition for eam integration--
         NETWORK_ASSET_FLAG,
         MAINTAINABLE_FLAG,
         PN_LOCATION_ID,
         ASSET_CRITICALITY_CODE,
         CATEGORY_ID,
         EQUIPMENT_GEN_OBJECT_ID,
         INSTANTIATION_FLAG,
         LINEAR_LOCATION_ID,
         OPERATIONAL_LOG_FLAG,
         CHECKIN_STATUS,
         SUPPLIER_WARRANTY_EXP_DATE,
         ATTRIBUTE16,
         ATTRIBUTE17,
         ATTRIBUTE18,
         ATTRIBUTE19,
         ATTRIBUTE20,
         ATTRIBUTE21,
         ATTRIBUTE22,
         ATTRIBUTE23,
         ATTRIBUTE24,
         ATTRIBUTE25,
         ATTRIBUTE26,
         ATTRIBUTE27,
         ATTRIBUTE28,
         ATTRIBUTE29,
         ATTRIBUTE30,
       --end of column addition for eam integration--
   -- Addition of columns for FA Integration
         PURCHASE_UNIT_PRICE,
         PURCHASE_CURRENCY_CODE,
         PAYABLES_UNIT_PRICE,
         PAYABLES_CURRENCY_CODE,
         SALES_UNIT_PRICE,
         SALES_CURRENCY_CODE,
         OPERATIONAL_STATUS_CODE,
    -- End addition of columns for FA Integration
         SOURCE_CODE -- Added Code for Siebel Genesis Project
       FROM   csi_item_instances
       WHERE  instance_id = p_instance_id ;
      -- AND (( ACTIVE_END_DATE IS NULL) OR (ACTIVE_END_DATE >= SYSDATE)); -- COMMENTED BY SK bug 2151760
     l_curr_instance_rec    get_instance_rec%ROWTYPE;

    CURSOR instance_csr (p_ins_id IN NUMBER) IS
      SELECT  *
      FROM    csi_item_instances
      WHERE   instance_id = p_ins_id;

    -- Added cursor for bug 6788183
    CURSOR relationship_csr (p_subject_id IN NUMBER) IS
      SELECT relationship_id,object_version_number
      FROM csi_ii_relationships
      WHERE (subject_id = p_subject_id
      or    object_id = p_subject_id)    -- added bug 8661671
	  AND   (active_end_date IS NULL OR active_end_date > SYSDATE); --Bug 9207673 FP Bug 9287115

     l_instance_csr           instance_csr%ROWTYPE;

l_temp                     VARCHAR2(1);
l_temp_date                DATE;
l_txn_date                 DATE;
l_msg_count                NUMBER;
l_msg_index                NUMBER;
l_msg_dummy                NUMBER;
l_open_service             VARCHAR2(1);
l_oks_txn_type             VARCHAR2(3);
l_eam_item                 BOOLEAN := FALSE;
l_vld_org                  NUMBER;
l_maintenance_object_type  NUMBER := 3;
l_ins_hist_id              NUMBER;
l_instance_history_id      NUMBER;
l_valid                    BOOLEAN     := TRUE;
l_creation_flag            VARCHAR2(1);

BEGIN

      -- Standard Start of API savepoint
        SAVEPOINT      expire_item_instance_pvt;

      -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (l_api_version,
                                            p_api_version,
                                            l_api_name,
                                            G_PKG_NAME   )
        THEN
              RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

      -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
              FND_MSG_PUB.initialize;
        END IF;

      --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option debug_level for debug message reporting
        l_debug_level:=fnd_profile.value('DEBUG_LEVEL');

        -- If debug_level = 1 then dump the procedure name
        IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line ( 'expire_item_instance_pvt');
        END IF;

        -- If the debug level = 2 then dump all the parameters values.
        IF (l_debug_level > 1) THEN
            csi_gen_utility_pvt.put_line ( 'expire_item_instance_pvt :'||
                                            p_api_version         ||'-'||
                                            p_commit              ||'-'||
                                            p_init_msg_list       );

         --dump the records in to a log file
         csi_gen_utility_pvt.dump_instance_rec(p_instance_rec);
         csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
        END IF;

        -- Start API body
-- Check if all the required parameters are passed
         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_num
             (    p_instance_rec.instance_id ,
               '  p_instance_rec.instance_id ',
                  l_api_name       );

         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_num
             (    p_instance_rec.object_version_number ,
               '  p_instance_rec.object_version_number  ',
                  l_api_name       );

-- Check if the instance id  is valid
        IF NOT(CSI_Item_Instance_vld_pvt.Is_InstanceID_Valid
                                                     (p_instance_rec.instance_id,
                                                      TRUE         )) THEN
              RAISE FND_API.G_EXC_ERROR;
        END IF;

-- check if the object_version_number passed matches with the one
-- in the database else raise error
        OPEN get_instance_rec(p_instance_rec.instance_id);
        FETCH get_instance_rec INTO l_curr_instance_rec;
                IF  (l_curr_instance_rec.object_version_number <> nvl(p_instance_rec.OBJECT_VERSION_NUMBER,0)) THEN
                        FND_MESSAGE.Set_Name('CSI', 'CSI_API_OBJ_VER_MISMATCH');
                        FND_MSG_PUB.ADD;
                        RAISE FND_API.G_EXC_ERROR;
                END IF;

                IF get_instance_rec%NOTFOUND THEN
                    FND_MESSAGE.Set_Name('CSI', 'CSI_API_RECORD_LOCKED');
                    FND_MSG_PUB.ADD;
                       RAISE FND_API.G_EXC_ERROR;
                END IF;
        CLOSE get_instance_rec;

--  checking for any unexpired children in csi_ii_relationships table

--  Added by sk for bug 2151760
     IF (( p_instance_rec.active_end_date IS NOT NULL) AND (p_instance_rec.active_end_date < SYSDATE))
      AND  p_instance_rec.active_end_date <> fnd_api.g_miss_date
     THEN
       l_temp_date:= p_instance_rec.active_end_date;
       BEGIN
        SELECT MAX(transaction_date)
        INTO   l_txn_date
        FROM   csi_inst_transactions_v
        WHERE  instance_id=p_instance_rec.instance_id
        AND    transaction_date>p_instance_rec.active_end_date;

        IF l_txn_date IS NOT NULL
        THEN
           x_return_status := FND_API.G_RET_STS_ERROR ;
           FND_MESSAGE.Set_Name('CSI', 'CSI_PARENT_HAS_TXN');
           FND_MESSAGE.SET_TOKEN('INSTANCE_ID',l_curr_instance_rec.instance_number );
           FND_MESSAGE.SET_TOKEN('TXN_DATE',to_char(l_txn_date, 'DD-MON-YYYY HH24:MI:SS'));
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
       EXCEPTION
         WHEN FND_API.G_EXC_ERROR THEN
              RAISE FND_API.G_EXC_ERROR;
         WHEN OTHERS THEN
           NULL;
       END;
     ELSE
       l_temp_date:= SYSDATE;
     END IF;
-- End addition by sk for bug 2151760

    DECLARE
       l_dummy  NUMBER;
       l_has_unexpired_children BOOLEAN;
       p_rel_query_rec csi_datastructures_pub.relationship_query_rec;
       l_rel_tbl       csi_datastructures_pub.ii_relationship_tbl;
       l_ii_relationship_level_tbl csi_ii_relationships_pvt.ii_relationship_level_tbl;
    BEGIN
       p_rel_query_rec.object_id := p_instance_rec.instance_id;
       p_rel_query_rec.relationship_type_code := 'COMPONENT-OF';
       --
      IF p_rel_query_rec.object_id IS NOT NULL AND
         p_rel_query_rec.object_id <> FND_API.G_MISS_NUM THEN
         csi_ii_relationships_pvt.Get_Children
	  ( p_relationship_query_rec   => p_rel_query_rec,
	    p_rel_tbl                  => l_rel_tbl,
            p_depth                    => NULL,
	    p_active_relationship_only => FND_API.G_TRUE,
	    p_time_stamp               => FND_API.G_MISS_DATE,
            p_get_dfs                  => FND_API.G_FALSE,
            p_ii_relationship_level_tbl => l_ii_relationship_level_tbl,
	    x_return_status            => x_return_status,
	    x_msg_count                => x_msg_count,
	    x_msg_data                 => x_msg_data
	  );
	 --
  	 IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_CHILDREN_ERROR');
            FND_MSG_PUB.Add;
	    RAISE FND_API.G_EXC_ERROR;
	 END IF;
      END IF;
	--
      csi_gen_utility_pvt.put_line('Child count is ..'||to_char(l_rel_tbl.count));
        l_dummy := l_rel_tbl.count;
        IF l_dummy > 0 THEN
           l_has_unexpired_children := TRUE;
        ELSE
           l_has_unexpired_children := FALSE;
        END IF;

       IF l_has_unexpired_children = TRUE THEN
          IF p_expire_children = 'F' THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_CANT_EXPIRE_INSTANCE');
            FND_MSG_PUB.Add;
            RAISE FND_API.G_EXC_ERROR;

          ELSE
             -- Call the expire_child_instances api
             expire_child_instances(p_api_version         => p_api_version,
                                    p_commit              => p_commit,
                                    p_init_msg_list       => p_init_msg_list,
                                    p_validation_level    => p_validation_level,
                                    p_instance_rec        => p_instance_rec,
                                    p_expire_children     => fnd_api.g_true,
                                    p_txn_rec             => p_txn_rec,
                                    x_instance_id_lst     => x_instance_id_lst,
                                    p_oks_txn_inst_tbl    => p_oks_txn_inst_tbl,
                                    x_return_status       => x_return_status,
                                    x_msg_count           => x_msg_count,
                                    x_msg_data            => x_msg_data
                                    );

          END IF;
       END IF;
    END;
     -- Added by sguthiva for bug 2520978
     -- Modified by srramakr for enhancement 2315522.
     -- This will allow the user to pass a Terminable status during expiration.
     IF p_instance_rec.instance_status_id IS NOT NULL AND
        p_instance_rec.instance_status_id <> fnd_api.g_miss_num THEN
        IF NOT (CSI_Item_Instance_vld_pvt.val_inst_ter_flag(
                                            p_instance_rec.instance_status_id)) THEN
           FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_TERM_STATUS');
           FND_MSG_PUB.ADD;
           RAISE FND_API.G_EXC_ERROR;
        END IF;
        l_instance_rec.instance_status_id := p_instance_rec.instance_status_id;
     ELSE
        l_instance_rec.instance_status_id := fnd_profile.value('CSI_SYS_TERM_INST_STATUS_ID');
        IF  l_instance_rec.instance_status_id IS NULL
        OR l_instance_rec.instance_status_id=fnd_api.g_miss_num
        THEN
           l_instance_rec.instance_status_id := 1;
        END IF;
     END IF;
     -- End addition by sguthiva for bug 2520978.
     -- l_instance_rec.instance_status_id    := 1; -- '1' for expired instances defined in the csi instance statuses
      l_instance_rec.object_version_number := l_curr_instance_rec.object_version_number + 1;

      -- Start addition by sguthiva for bug 2416193
           -- Relaxing this check for RMA Receipt transaction
		-- Bug 8998695 - Checking for open SR should happen when
 	       -- Expired instances is processed for transaction type 5
      IF p_txn_rec.transaction_type_id in (1,5)
      THEN
      BEGIN
            SELECT 'x'
            INTO   l_open_service
            FROM   cs_incidents_all csi,
                   cs_incident_statuses_b csb
            WHERE  csi.incident_status_id = csb.incident_status_id
            AND    csi.customer_product_id = p_instance_rec.instance_id
            AND    NVL(close_flag,'N')<>'Y';

             FND_MESSAGE.SET_NAME('CSI','CSI_IB_HAS_OPEN_SR');
             FND_MSG_PUB.ADD;
             RAISE FND_API.G_EXC_ERROR;

      EXCEPTION
           WHEN TOO_MANY_ROWS THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_IB_HAS_OPEN_SR');
             FND_MSG_PUB.ADD;
             RAISE FND_API.G_EXC_ERROR;

           WHEN NO_DATA_FOUND THEN -- modfied for bug 3693511
            NULL;
      END;
      END IF;
      -- End addition for bug 2416193

      -- Added code to expire relationship where the instance expired is the child, bug 6788183
      csi_gen_utility_pvt.put_line('Expiring relationship for the instance id - ' || p_instance_rec.instance_id);
      FOR l_inst_relationship_rec in relationship_csr(p_instance_rec.instance_id)
      LOOP
        BEGIN
          csi_gen_utility_pvt.put_line('Expiring relationship with id - ' || l_inst_relationship_rec.relationship_id);
          l_exp_rltns_rec.relationship_id := l_inst_relationship_rec.relationship_id;
          l_exp_rltns_rec.object_version_number := l_inst_relationship_rec.object_version_number;

          csi_t_gen_utility_pvt.dump_api_info(
            p_pkg_name => 'csi_ii_relationships_pub',
            p_api_name => 'expire_relationship');

          csi_ii_relationships_pub.expire_relationship(
              p_api_version               => 1.0,
              p_commit                    => fnd_api.g_false,
              p_init_msg_list             => fnd_api.g_false,
              p_validation_level          => fnd_api.g_valid_level_full,
              p_relationship_rec          => l_exp_rltns_rec,
              p_txn_rec                   => p_txn_rec,
              x_instance_id_lst           => l_instance_id_lst,
              x_return_status             => l_return_status,
              x_msg_count                 => l_msg_count,
              x_msg_data                  => l_msg_data);

          IF l_return_status <> fnd_api.g_ret_sts_success THEN
            RAISE fnd_api.g_exc_error;
          END IF;
        END;
      END LOOP;

      csi_gen_utility_pvt.put_line('End of expiring relationships for instance with id - ' || p_instance_rec.instance_id);
      -- End of addition for the bug 6788183


        -- Added the following code for eam integration
           IF p_instance_rec.vld_organization_id IS NULL OR
              p_instance_rec.vld_organization_id = fnd_api.g_miss_num
           THEN
             BEGIN
              SELECT last_vld_organization_id
                INTO l_vld_org
                FROM csi_item_instances
               WHERE instance_id = p_instance_rec.instance_id;
             EXCEPTION
               WHEN NO_DATA_FOUND THEN
                fnd_message.set_name('CSI','CSI_API_INVALID_INSTANCE_ID');
                fnd_message.set_token('INSTANCE_ID',p_instance_rec.instance_id);
                fnd_msg_pub.ADD;
             END;
           ELSE
             l_vld_org := p_instance_rec.vld_organization_id;
           END IF;

           IF csi_item_instance_vld_pvt.Check_for_eam_item
              (p_inventory_item_id  => l_curr_instance_rec.inventory_item_id,
               p_organization_id    => l_vld_org)
           THEN
             l_eam_item := TRUE;
           END IF;

           IF l_eam_item AND
             (p_instance_rec.active_end_date IS NOT NULL AND
              p_instance_rec.active_end_date <> fnd_api.g_miss_date)
           THEN
            IF NOT eam_common_utilities_pvt.check_deactivate
              (p_maintenance_object_id   => p_instance_rec.instance_id
              ,p_maintenance_object_type => l_maintenance_object_type)
            THEN
              csi_gen_utility_pvt.put_line('Error from eam_common_utilities_pvt.check_deactivate API ');
              RAISE fnd_api.g_exc_error;
            END IF;
           END IF;
        -- End code addition for eam integration
    -- validate instance status id
       IF NVL(l_instance_rec.INSTANCE_STATUS_ID,fnd_api.g_miss_num) <> fnd_api.g_miss_num
       THEN
         csi_item_instance_vld_pvt.is_valid_status(
           p_instance_status_id     => l_instance_rec.INSTANCE_STATUS_ID,
           p_creation_complete_flag => l_creation_flag,
           l_return_value           => l_valid);
          IF NOT(l_valid)
          THEN
             RAISE fnd_api.g_exc_error;
          END IF;
        END IF;

        IF l_instance_rec.INSTANCE_STATUS_ID IS NOT NULL AND
           l_instance_rec.INSTANCE_STATUS_ID <> FND_API.G_MISS_NUM AND
           l_instance_rec.INSTANCE_STATUS_ID <> l_curr_instance_rec.INSTANCE_STATUS_ID
        THEN
           IF NOT csi_item_instance_vld_pvt.is_status_updateable
                  (p_instance_status => l_instance_rec.INSTANCE_STATUS_ID
                  ,p_current_status  => l_curr_instance_rec.INSTANCE_STATUS_ID)
           THEN
             RAISE fnd_api.g_exc_error;
           END IF;
        END IF;

    CSI_ITEM_INSTANCES_PKG.Update_Row
       (  p_INSTANCE_ID                 => p_instance_rec.INSTANCE_ID,
          p_INSTANCE_NUMBER             => l_instance_rec.INSTANCE_NUMBER,
          p_EXTERNAL_REFERENCE          => l_instance_rec.EXTERNAL_REFERENCE,
          p_INVENTORY_ITEM_ID           => l_instance_rec.INVENTORY_ITEM_ID,
          p_INVENTORY_REVISION          => l_instance_rec.INVENTORY_REVISION,
          p_INV_MASTER_ORGANIZATION_ID  => l_instance_rec.INV_MASTER_ORGANIZATION_ID,
          p_SERIAL_NUMBER               => l_instance_rec.SERIAL_NUMBER,
          p_MFG_SERIAL_NUMBER_FLAG      => l_instance_rec.MFG_SERIAL_NUMBER_FLAG,
          p_LOT_NUMBER                  => l_instance_rec.LOT_NUMBER,
          p_QUANTITY                    => l_instance_rec.QUANTITY,
          p_UNIT_OF_MEASURE             => l_instance_rec.UNIT_OF_MEASURE,
          p_ACCOUNTING_CLASS_CODE       => l_instance_rec.ACCOUNTING_CLASS_CODE,
          p_INSTANCE_CONDITION_ID       => l_instance_rec.INSTANCE_CONDITION_ID,
          p_INSTANCE_STATUS_ID          => l_instance_rec.INSTANCE_STATUS_ID,
          p_CUSTOMER_VIEW_FLAG          => l_instance_rec.CUSTOMER_VIEW_FLAG,
          p_MERCHANT_VIEW_FLAG          => l_instance_rec.MERCHANT_VIEW_FLAG,
          p_SELLABLE_FLAG               => l_instance_rec.SELLABLE_FLAG,
          p_SYSTEM_ID                   => l_instance_rec.SYSTEM_ID,
          p_INSTANCE_TYPE_CODE          => l_instance_rec.INSTANCE_TYPE_CODE,
          p_ACTIVE_START_DATE           => l_instance_rec.ACTIVE_START_DATE,
          p_ACTIVE_END_DATE             => l_temp_date,--SYSDATE,
          p_LOCATION_TYPE_CODE          => l_instance_rec.LOCATION_TYPE_CODE,
          p_LOCATION_ID                 => l_instance_rec.LOCATION_ID,
          p_INV_ORGANIZATION_ID         => l_instance_rec.INV_ORGANIZATION_ID,
          p_INV_SUBINVENTORY_NAME       => l_instance_rec.INV_SUBINVENTORY_NAME,
          p_INV_LOCATOR_ID              => l_instance_rec.INV_LOCATOR_ID,
          p_PA_PROJECT_ID               => l_instance_rec.PA_PROJECT_ID,
          p_PA_PROJECT_TASK_ID          => l_instance_rec.PA_PROJECT_TASK_ID,
          p_IN_TRANSIT_ORDER_LINE_ID    => l_instance_rec.IN_TRANSIT_ORDER_LINE_ID,
          p_WIP_JOB_ID                  => l_instance_rec.WIP_JOB_ID,
          p_PO_ORDER_LINE_ID            => l_instance_rec.PO_ORDER_LINE_ID,
          p_LAST_OE_ORDER_LINE_ID       => l_instance_rec.LAST_OE_ORDER_LINE_ID,
          p_LAST_OE_RMA_LINE_ID         => l_instance_rec.LAST_OE_RMA_LINE_ID,
          p_LAST_PO_PO_LINE_ID          => l_instance_rec.LAST_PO_PO_LINE_ID,
          p_LAST_OE_PO_NUMBER           => l_instance_rec.LAST_OE_PO_NUMBER,
          p_LAST_WIP_JOB_ID             => l_instance_rec.LAST_WIP_JOB_ID,
          p_LAST_PA_PROJECT_ID          => l_instance_rec.LAST_PA_PROJECT_ID,
          p_LAST_PA_TASK_ID             => l_instance_rec.LAST_PA_TASK_ID,
          p_LAST_OE_AGREEMENT_ID        => l_instance_rec.LAST_OE_AGREEMENT_ID,
          p_INSTALL_DATE                => l_instance_rec.INSTALL_DATE,
          p_MANUALLY_CREATED_FLAG       => l_instance_rec.MANUALLY_CREATED_FLAG,
          p_RETURN_BY_DATE              => l_instance_rec.RETURN_BY_DATE,
          p_ACTUAL_RETURN_DATE          => l_instance_rec.ACTUAL_RETURN_DATE,
          p_CREATION_COMPLETE_FLAG      => l_instance_rec.CREATION_COMPLETE_FLAG,
          p_COMPLETENESS_FLAG           => l_instance_rec.COMPLETENESS_FLAG,
          p_CONTEXT                     => l_instance_rec.CONTEXT,
          p_ATTRIBUTE1                  => l_instance_rec.ATTRIBUTE1,
          p_ATTRIBUTE2                  => l_instance_rec.ATTRIBUTE2,
          p_ATTRIBUTE3                  => l_instance_rec.ATTRIBUTE3,
          p_ATTRIBUTE4                  => l_instance_rec.ATTRIBUTE4,
          p_ATTRIBUTE5                  => l_instance_rec.ATTRIBUTE5,
          p_ATTRIBUTE6                  => l_instance_rec.ATTRIBUTE6,
          p_ATTRIBUTE7                  => l_instance_rec.ATTRIBUTE7,
          p_ATTRIBUTE8                  => l_instance_rec.ATTRIBUTE8,
          p_ATTRIBUTE9                  => l_instance_rec.ATTRIBUTE9,
          p_ATTRIBUTE10                 => l_instance_rec.ATTRIBUTE10,
          p_ATTRIBUTE11                 => l_instance_rec.ATTRIBUTE11,
          p_ATTRIBUTE12                 => l_instance_rec.ATTRIBUTE12,
          p_ATTRIBUTE13                 => l_instance_rec.ATTRIBUTE13,
          p_ATTRIBUTE14                 => l_instance_rec.ATTRIBUTE14,
          p_ATTRIBUTE15                 => l_instance_rec.ATTRIBUTE15,
          p_CREATED_BY                  => fnd_api.g_miss_num,
          p_CREATION_DATE               => fnd_api.g_miss_date,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID,
          p_LAST_UPDATE_DATE            => SYSDATE,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.CONC_LOGIN_ID,
          p_OBJECT_VERSION_NUMBER       => l_instance_rec.OBJECT_VERSION_NUMBER,
          p_LAST_TXN_LINE_DETAIL_ID     => l_instance_rec.LAST_TXN_LINE_DETAIL_ID,
          p_INSTALL_LOCATION_TYPE_CODE  => l_instance_rec.INSTALL_LOCATION_TYPE_CODE,
          p_INSTALL_LOCATION_ID         => l_instance_rec.INSTALL_LOCATION_ID,
          p_INSTANCE_USAGE_CODE         => l_instance_rec.INSTANCE_USAGE_CODE,
          p_CONFIG_INST_HDR_ID          => NULL, -- l_instance_rec.CONFIG_INST_HDR_ID,
          p_CONFIG_INST_REV_NUM         => NULL, -- l_instance_rec.CONFIG_INST_REV_NUM,
          p_CONFIG_INST_ITEM_ID         => NULL, -- l_instance_rec.CONFIG_INST_ITEM_ID,
          p_CONFIG_VALID_STATUS         => NULL, -- l_instance_rec.CONFIG_VALID_STATUS,
          p_INSTANCE_DESCRIPTION        => l_instance_rec.INSTANCE_DESCRIPTION,
          p_REQUEST_ID                  => l_instance_rec.REQUEST_ID,
          p_PROGRAM_APPLICATION_ID      => l_instance_rec.PROGRAM_APPLICATION_ID,
          p_PROGRAM_ID                  => l_instance_rec.PROGRAM_ID,
          p_PROGRAM_UPDATE_DATE         => l_instance_rec.PROGRAM_UPDATE_DATE,
	  --start of parameters addition for eam integration--
          p_NETWORK_ASSET_FLAG          => l_instance_rec.NETWORK_ASSET_FLAG,
          p_MAINTAINABLE_FLAG           => l_instance_rec.MAINTAINABLE_FLAG,
          p_PN_LOCATION_ID              => l_instance_rec.PN_LOCATION_ID,
          p_ASSET_CRITICALITY_CODE      => l_instance_rec.ASSET_CRITICALITY_CODE,
          p_CATEGORY_ID                 => l_instance_rec.CATEGORY_ID,
          p_EQUIPMENT_GEN_OBJECT_ID     => l_instance_rec.EQUIPMENT_GEN_OBJECT_ID,
          p_INSTANTIATION_FLAG          => l_instance_rec.INSTANTIATION_FLAG,
          p_LINEAR_LOCATION_ID          => l_instance_rec.LINEAR_LOCATION_ID,
          p_OPERATIONAL_LOG_FLAG        => l_instance_rec.OPERATIONAL_LOG_FLAG,
          p_CHECKIN_STATUS              => l_instance_rec.CHECKIN_STATUS,
          p_SUPPLIER_WARRANTY_EXP_DATE  => l_instance_rec.SUPPLIER_WARRANTY_EXP_DATE,
          p_ATTRIBUTE16                 => l_instance_rec.ATTRIBUTE16,
          p_ATTRIBUTE17                 => l_instance_rec.ATTRIBUTE17,
          p_ATTRIBUTE18                 => l_instance_rec.ATTRIBUTE18,
          p_ATTRIBUTE19                 => l_instance_rec.ATTRIBUTE19,
          p_ATTRIBUTE20                 => l_instance_rec.ATTRIBUTE20,
          p_ATTRIBUTE21                 => l_instance_rec.ATTRIBUTE21,
          p_ATTRIBUTE22                 => l_instance_rec.ATTRIBUTE22,
          p_ATTRIBUTE23                 => l_instance_rec.ATTRIBUTE23,
          p_ATTRIBUTE24                 => l_instance_rec.ATTRIBUTE24,
          p_ATTRIBUTE25                 => l_instance_rec.ATTRIBUTE25,
          p_ATTRIBUTE26                 => l_instance_rec.ATTRIBUTE26,
          p_ATTRIBUTE27                 => l_instance_rec.ATTRIBUTE27,
          p_ATTRIBUTE28                 => l_instance_rec.ATTRIBUTE28,
          p_ATTRIBUTE29                 => l_instance_rec.ATTRIBUTE29,
          p_ATTRIBUTE30                 => l_instance_rec.ATTRIBUTE30,
	  --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
          p_PURCHASE_UNIT_PRICE         => l_instance_rec.PURCHASE_UNIT_PRICE,
          p_PURCHASE_CURRENCY_CODE      => l_instance_rec.PURCHASE_CURRENCY_CODE,
          p_PAYABLES_UNIT_PRICE         => l_instance_rec.PAYABLES_UNIT_PRICE,
          p_PAYABLES_CURRENCY_CODE      => l_instance_rec.PAYABLES_CURRENCY_CODE,
          p_SALES_UNIT_PRICE            => l_instance_rec.SALES_UNIT_PRICE,
          p_SALES_CURRENCY_CODE         => l_instance_rec.SALES_CURRENCY_CODE,
          p_OPERATIONAL_STATUS_CODE     => l_instance_rec.OPERATIONAL_STATUS_CODE,
    -- End addition of columns for FA Integration
          p_SOURCE_CODE                 => l_instance_rec.SOURCE_CODE -- Added Code for Siebel Genesis Project
          );


-- calling the transaction api
--IF CSI_Item_Instance_vld_pvt.Is_Inst_creation_complete( l_instance_rec.INSTANCE_ID ) THEN

   -- Call create_transaction to create txn log
        CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_IF_Exists_Flag => 'Y'
            ,p_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN

              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_VALIDATE_TXN');
              FND_MESSAGE.SET_TOKEN('TRANSACTION_ID',p_txn_rec.transaction_id );
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;
-- END IF;

-- Get a unique history item instance id from the sequence
          l_csi_item_instance_h_id :=
                                 csi_item_instance_vld_pvt.get_csi_item_instance_h_id;

-- Get the full_dump_frequency from csi_install_parameter
       --
      IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
          csi_gen_utility_pvt.populate_install_param_rec;
       END IF;
       --
       l_full_dump_frequency := csi_datastructures_pub.g_install_param_rec.history_full_dump_frequency;
       --
       IF l_full_dump_frequency IS NULL THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_FULL_DUMP_FAILED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
       END IF;

       SELECT MOD(l_instance_rec.object_version_number,l_full_dump_frequency)
       INTO   l_mod_value
       FROM   dual;

     -- Added for the bug 6788183
     BEGIN
        SELECT  instance_history_id
        INTO    l_ins_hist_id
        FROM    csi_item_instances_h h
        WHERE   h.transaction_id = p_txn_rec.transaction_id
        AND     h.instance_id = p_instance_rec.instance_id;

         CSI_ITEM_INSTANCES_H_PKG.Update_Row
           ( p_INSTANCE_HISTORY_ID              => l_ins_hist_id
            ,p_INSTANCE_ID                       => fnd_api.g_miss_num
            ,p_TRANSACTION_ID                    => fnd_api.g_miss_num
            ,p_OLD_INSTANCE_NUMBER               => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_NUMBER               => p_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => fnd_api.g_miss_char
            ,p_NEW_EXTERNAL_REFERENCE            => p_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => fnd_api.g_miss_num
            ,p_NEW_INVENTORY_ITEM_ID             => p_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => fnd_api.g_miss_char
            ,p_NEW_INVENTORY_REVISION            => p_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_MASTER_ORGZN_ID           => p_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => fnd_api.g_miss_char
            ,p_NEW_SERIAL_NUMBER                 => p_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => fnd_api.g_miss_char
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => p_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => fnd_api.g_miss_char
            ,p_NEW_LOT_NUMBER                    => p_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => fnd_api.g_miss_num
            ,p_NEW_QUANTITY                      => p_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => fnd_api.g_miss_char
            ,p_NEW_UNIT_OF_MEASURE               => p_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => fnd_api.g_miss_char
            ,p_NEW_ACCOUNTING_CLASS_CODE         => p_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_CONDITION_ID         => p_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => fnd_api.g_miss_num
            ,p_NEW_INSTANCE_STATUS_ID            => p_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_CUSTOMER_VIEW_FLAG            => p_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => fnd_api.g_miss_char
            ,p_NEW_MERCHANT_VIEW_FLAG            => p_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => fnd_api.g_miss_char
            ,p_NEW_SELLABLE_FLAG                 => p_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => fnd_api.g_miss_num
            ,p_NEW_SYSTEM_ID                     => p_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_TYPE_CODE            => p_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_START_DATE             => p_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => fnd_api.g_miss_date
            ,p_NEW_ACTIVE_END_DATE               => l_temp_date
            ,p_OLD_LOCATION_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_LOCATION_TYPE_CODE            => p_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => fnd_api.g_miss_num
            ,p_NEW_LOCATION_ID                   => p_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => fnd_api.g_miss_num
            ,p_NEW_INV_ORGANIZATION_ID           => p_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => fnd_api.g_miss_char
            ,p_NEW_INV_SUBINVENTORY_NAME         => p_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => fnd_api.g_miss_num
            ,p_NEW_INV_LOCATOR_ID                => p_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => fnd_api.g_miss_num
            ,p_NEW_PA_PROJECT_ID                 => p_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => fnd_api.g_miss_num
            ,p_NEW_PA_PROJECT_TASK_ID            => p_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => fnd_api.g_miss_num
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => p_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => fnd_api.g_miss_num
            ,p_NEW_WIP_JOB_ID                    => p_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => fnd_api.g_miss_num
            ,p_NEW_PO_ORDER_LINE_ID              => p_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => fnd_api.g_miss_char
            ,p_NEW_COMPLETENESS_FLAG             => p_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => fnd_api.g_miss_char
            ,p_NEW_CONTEXT                       => p_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE1                    => p_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE2                    => p_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE3                    => p_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE4                    => p_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE5                    => p_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE6                    => p_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE7                    => p_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE8                    => p_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE9                    => p_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE10                   => p_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE11                   => p_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE12                   => p_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE13                   => p_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE14                   => p_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE15                   => p_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => fnd_api.g_miss_char
            ,p_CREATED_BY                        => fnd_api.g_miss_num
            ,p_CREATION_DATE                     => fnd_api.g_miss_date
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => fnd_api.g_miss_num
            ,p_OLD_INST_LOC_TYPE_CODE            => fnd_api.g_miss_char
            ,p_NEW_INST_LOC_TYPE_CODE            => p_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => fnd_api.g_miss_num
            ,p_NEW_INST_LOC_ID                   => p_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => fnd_api.g_miss_char
            ,p_NEW_INST_USAGE_CODE               => p_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_LAST_VLD_ORGANIZATION_ID      => fnd_api.g_miss_num
            ,p_NEW_LAST_VLD_ORGANIZATION_ID      => p_instance_rec.vld_organization_id
            ,p_OLD_CONFIG_INST_REV_NUM           => fnd_api.g_miss_num
            ,p_NEW_CONFIG_INST_REV_NUM           => p_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => fnd_api.g_miss_char
            ,p_NEW_CONFIG_VALID_STATUS           => p_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => fnd_api.g_miss_char
            ,p_NEW_INSTANCE_DESCRIPTION          => p_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => fnd_api.g_miss_date
            ,p_NEW_INSTALL_DATE                  => p_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => fnd_api.g_miss_date
            ,p_NEW_RETURN_BY_DATE                => p_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => fnd_api.g_miss_date
            ,p_NEW_ACTUAL_RETURN_DATE            => p_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => fnd_api.g_miss_num
            ,p_NEW_LAST_OE_AGREEMENT_ID          => p_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => fnd_api.g_miss_num
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => p_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => fnd_api.g_miss_num
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => p_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => fnd_api.g_miss_num
	    ,p_NEW_LAST_WIP_JOB_ID               => p_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => fnd_api.g_miss_num
	    ,p_NEW_LAST_PO_PO_LINE_ID            => p_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => fnd_api.g_miss_num
	    ,p_NEW_LAST_PA_PROJECT_ID            => p_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => fnd_api.g_miss_num
	    ,p_NEW_LAST_PA_TASK_ID          => p_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => fnd_api.g_miss_num
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => p_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => fnd_api.g_miss_char
	    ,p_NEW_LAST_OE_PO_NUMBER             => p_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => fnd_api.g_miss_char
	    ,p_NEW_NETWORK_ASSET_FLAG             => p_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => fnd_api.g_miss_char
	    ,p_NEW_MAINTAINABLE_FLAG              => p_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => fnd_api.g_miss_num
	    ,p_NEW_PN_LOCATION_ID                 => p_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => fnd_api.g_miss_char
	    ,p_NEW_ASSET_CRITICALITY_CODE         => p_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => fnd_api.g_miss_num
	    ,p_NEW_CATEGORY_ID                    => p_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => fnd_api.g_miss_num
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => p_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => fnd_api.g_miss_char
	    ,p_NEW_INSTANTIATION_FLAG             => p_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => fnd_api.g_miss_num
	    ,p_NEW_LINEAR_LOCATION_ID             => p_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => fnd_api.g_miss_char
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => p_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => fnd_api.g_miss_num
	    ,p_NEW_CHECKIN_STATUS                 => p_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => fnd_api.g_miss_date
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => p_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE16                    => p_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE17                    => p_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE18                    => p_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE19                    => p_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE20                    => p_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE21                    => p_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE22                    => p_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE23                    => p_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE24                    => p_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE25                    => p_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE26                    => p_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE27                    => p_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE28                    => p_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE29                    => p_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => fnd_api.g_miss_char
            ,p_NEW_ATTRIBUTE30                    => p_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--
        -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PAYABLES_UNIT_PRICE            => p_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PAYABLES_CURRENCY_CODE         => p_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => fnd_api.g_miss_num
            ,p_NEW_PURCHASE_UNIT_PRICE            => p_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => fnd_api.g_miss_char
            ,p_NEW_PURCHASE_CURRENCY_CODE         => p_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => fnd_api.g_miss_num
            ,p_NEW_SALES_UNIT_PRICE               => p_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => fnd_api.g_miss_char
            ,p_NEW_SALES_CURRENCY_CODE            => p_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => fnd_api.g_miss_char
            ,p_NEW_OPERATIONAL_STATUS_CODE        => p_instance_rec.OPERATIONAL_STATUS_CODE
        -- End addition of columns for FA Integration
            ,p_OLD_SOURCE_CODE                    => fnd_api.g_miss_char
            ,p_NEW_SOURCE_CODE                    => p_instance_rec.SOURCE_CODE
            );

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
-- Get a unique history item instance id from the sequence
          l_csi_item_instance_h_id :=
                                 csi_item_instance_vld_pvt.get_csi_item_instance_h_id;

     IF (l_mod_value = 0) THEN
          -- If the mod value is 0 then dump all the columns both changed and unchanged
          -- changed columns have old and new values while the unchanged values have old and new values
          -- exactly same
       CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => p_instance_rec.instance_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => l_curr_instance_rec.INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => l_curr_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_curr_instance_rec.EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => l_curr_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_curr_instance_rec.INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => l_curr_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_curr_instance_rec.INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => l_curr_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => l_curr_instance_rec.SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => l_curr_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_curr_instance_rec.LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => l_curr_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_curr_instance_rec.QUANTITY
            ,p_NEW_QUANTITY                      => l_curr_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_curr_instance_rec.UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => l_curr_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_curr_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_curr_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_curr_instance_rec.INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => l_curr_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_curr_instance_rec.INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_curr_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => l_curr_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_curr_instance_rec.MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => l_curr_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_curr_instance_rec.SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => l_curr_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_curr_instance_rec.SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_curr_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => l_curr_instance_rec.INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => l_curr_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_curr_instance_rec.ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => l_curr_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_curr_instance_rec.ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_temp_date --SYSDATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_curr_instance_rec.LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_curr_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_curr_instance_rec.LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_curr_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_curr_instance_rec.INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_curr_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_curr_instance_rec.INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_curr_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_curr_instance_rec.INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_curr_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_curr_instance_rec.PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_curr_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_curr_instance_rec.PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_curr_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_curr_instance_rec.WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_curr_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_curr_instance_rec.PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_curr_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_curr_instance_rec.COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => l_curr_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'Y'
            ,p_NEW_CONTEXT                       => l_curr_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => l_curr_instance_rec.CONTEXT
            ,p_NEW_ATTRIBUTE1                    => l_curr_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_curr_instance_rec.ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => l_curr_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_curr_instance_rec.ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => l_curr_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_curr_instance_rec.ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => l_curr_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_curr_instance_rec.ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => l_curr_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_curr_instance_rec.ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => l_curr_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_curr_instance_rec.ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => l_curr_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_curr_instance_rec.ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => l_curr_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_curr_instance_rec.ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => l_curr_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_curr_instance_rec.ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => l_curr_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_curr_instance_rec.ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => l_curr_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_curr_instance_rec.ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => l_curr_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_curr_instance_rec.ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => l_curr_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_curr_instance_rec.ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => l_curr_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_curr_instance_rec.ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => l_curr_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_curr_instance_rec.ATTRIBUTE15
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_curr_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_curr_instance_rec.INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => l_curr_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => l_curr_instance_rec.INSTANCE_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => l_curr_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_CONFIG_INST_REV_NUM           => l_curr_instance_rec.CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => NULL -- l_curr_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_curr_instance_rec.CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => l_curr_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_curr_instance_rec.INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => l_curr_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => l_curr_instance_rec.INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_curr_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_curr_instance_rec.RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => l_curr_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_curr_instance_rec.ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => l_curr_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_curr_instance_rec.LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_curr_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_curr_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_curr_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => l_curr_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_curr_instance_rec.LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => l_curr_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_curr_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => l_curr_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_curr_instance_rec.LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => l_curr_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_curr_instance_rec.LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => l_curr_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_curr_instance_rec.LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => l_curr_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_curr_instance_rec.NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => l_curr_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_curr_instance_rec.MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => l_curr_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_curr_instance_rec.PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => l_curr_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_curr_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => l_curr_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_curr_instance_rec.CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => l_curr_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_curr_instance_rec.INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => l_curr_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_curr_instance_rec.LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => l_curr_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_curr_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => l_curr_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_curr_instance_rec.CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => l_curr_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_curr_instance_rec.ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => l_curr_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_curr_instance_rec.ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => l_curr_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_curr_instance_rec.ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => l_curr_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_curr_instance_rec.ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => l_curr_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_curr_instance_rec.ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => l_curr_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_curr_instance_rec.ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => l_curr_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_curr_instance_rec.ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => l_curr_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_curr_instance_rec.ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => l_curr_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_curr_instance_rec.ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => l_curr_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_curr_instance_rec.ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => l_curr_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_curr_instance_rec.ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => l_curr_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_curr_instance_rec.ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => l_curr_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_curr_instance_rec.ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => l_curr_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_curr_instance_rec.ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => l_curr_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_curr_instance_rec.ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => l_curr_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--

   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_curr_instance_rec.PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => l_curr_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_curr_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => l_curr_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_curr_instance_rec.PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => l_curr_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_curr_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => l_curr_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_curr_instance_rec.SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => l_curr_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_curr_instance_rec.SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => l_curr_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_curr_instance_rec.OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_curr_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                    => l_curr_instance_rec.SOURCE_CODE
            ,p_NEW_SOURCE_CODE                    => l_instance_rec.SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );


    ELSE
          -- If the mod value is not equal to zero then dump only the changed columns
          -- while the unchanged values have old and new values as null
       CSI_ITEM_INSTANCES_H_PKG.Insert_Row
           ( px_INSTANCE_HISTORY_ID              => l_csi_item_instance_h_id
            ,p_INSTANCE_ID                       => p_instance_rec.instance_id
            ,p_TRANSACTION_ID                    => p_txn_rec.TRANSACTION_ID
            ,p_OLD_INSTANCE_NUMBER               => l_instance_rec.INSTANCE_NUMBER
            ,p_NEW_INSTANCE_NUMBER               => l_instance_rec.INSTANCE_NUMBER
            ,p_OLD_EXTERNAL_REFERENCE            => l_instance_rec.EXTERNAL_REFERENCE
            ,p_NEW_EXTERNAL_REFERENCE            => l_instance_rec.EXTERNAL_REFERENCE
            ,p_OLD_INVENTORY_ITEM_ID             => l_instance_rec.INVENTORY_ITEM_ID
            ,p_NEW_INVENTORY_ITEM_ID             => l_instance_rec.INVENTORY_ITEM_ID
            ,p_OLD_INVENTORY_REVISION            => l_instance_rec.INVENTORY_REVISION
            ,p_NEW_INVENTORY_REVISION            => l_instance_rec.INVENTORY_REVISION
            ,p_OLD_INV_MASTER_ORGZN_ID           => l_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_NEW_INV_MASTER_ORGZN_ID           => l_instance_rec.INV_MASTER_ORGANIZATION_ID
            ,p_OLD_SERIAL_NUMBER                 => l_instance_rec.SERIAL_NUMBER
            ,p_NEW_SERIAL_NUMBER                 => l_instance_rec.SERIAL_NUMBER
            ,p_OLD_MFG_SERIAL_NUMBER_FLAG        => l_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_NEW_MFG_SERIAL_NUMBER_FLAG        => l_instance_rec.MFG_SERIAL_NUMBER_FLAG
            ,p_OLD_LOT_NUMBER                    => l_instance_rec.LOT_NUMBER
            ,p_NEW_LOT_NUMBER                    => l_instance_rec.LOT_NUMBER
            ,p_OLD_QUANTITY                      => l_instance_rec.QUANTITY
            ,p_NEW_QUANTITY                      => l_instance_rec.QUANTITY
            ,p_OLD_UNIT_OF_MEASURE               => l_instance_rec.UNIT_OF_MEASURE
            ,p_NEW_UNIT_OF_MEASURE               => l_instance_rec.UNIT_OF_MEASURE
            ,p_OLD_ACCOUNTING_CLASS_CODE         => l_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_NEW_ACCOUNTING_CLASS_CODE         => l_instance_rec.ACCOUNTING_CLASS_CODE
            ,p_OLD_INSTANCE_CONDITION_ID         => l_instance_rec.INSTANCE_CONDITION_ID
            ,p_NEW_INSTANCE_CONDITION_ID         => l_instance_rec.INSTANCE_CONDITION_ID
            ,p_OLD_INSTANCE_STATUS_ID            => l_curr_instance_rec.INSTANCE_STATUS_ID
            ,p_NEW_INSTANCE_STATUS_ID            => l_instance_rec.INSTANCE_STATUS_ID
            ,p_OLD_CUSTOMER_VIEW_FLAG            => l_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_NEW_CUSTOMER_VIEW_FLAG            => l_instance_rec.CUSTOMER_VIEW_FLAG
            ,p_OLD_MERCHANT_VIEW_FLAG            => l_instance_rec.MERCHANT_VIEW_FLAG
            ,p_NEW_MERCHANT_VIEW_FLAG            => l_instance_rec.MERCHANT_VIEW_FLAG
            ,p_OLD_SELLABLE_FLAG                 => l_instance_rec.SELLABLE_FLAG
            ,p_NEW_SELLABLE_FLAG                 => l_instance_rec.SELLABLE_FLAG
            ,p_OLD_SYSTEM_ID                     => l_instance_rec.SYSTEM_ID
            ,p_NEW_SYSTEM_ID                     => l_instance_rec.SYSTEM_ID
            ,p_OLD_INSTANCE_TYPE_CODE            => l_instance_rec.INSTANCE_TYPE_CODE
            ,p_NEW_INSTANCE_TYPE_CODE            => l_instance_rec.INSTANCE_TYPE_CODE
            ,p_OLD_ACTIVE_START_DATE             => l_instance_rec.ACTIVE_START_DATE
            ,p_NEW_ACTIVE_START_DATE             => l_instance_rec.ACTIVE_START_DATE
            ,p_OLD_ACTIVE_END_DATE               => l_curr_instance_rec.ACTIVE_END_DATE
            ,p_NEW_ACTIVE_END_DATE               => l_temp_date--SYSDATE
            ,p_OLD_LOCATION_TYPE_CODE            => l_instance_rec.LOCATION_TYPE_CODE
            ,p_NEW_LOCATION_TYPE_CODE            => l_instance_rec.LOCATION_TYPE_CODE
            ,p_OLD_LOCATION_ID                   => l_instance_rec.LOCATION_ID
            ,p_NEW_LOCATION_ID                   => l_instance_rec.LOCATION_ID
            ,p_OLD_INV_ORGANIZATION_ID           => l_instance_rec.INV_ORGANIZATION_ID
            ,p_NEW_INV_ORGANIZATION_ID           => l_instance_rec.INV_ORGANIZATION_ID
            ,p_OLD_INV_SUBINVENTORY_NAME         => l_instance_rec.INV_SUBINVENTORY_NAME
            ,p_NEW_INV_SUBINVENTORY_NAME         => l_instance_rec.INV_SUBINVENTORY_NAME
            ,p_OLD_INV_LOCATOR_ID                => l_instance_rec.INV_LOCATOR_ID
            ,p_NEW_INV_LOCATOR_ID                => l_instance_rec.INV_LOCATOR_ID
            ,p_OLD_PA_PROJECT_ID                 => l_instance_rec.PA_PROJECT_ID
            ,p_NEW_PA_PROJECT_ID                 => l_instance_rec.PA_PROJECT_ID
            ,p_OLD_PA_PROJECT_TASK_ID            => l_instance_rec.PA_PROJECT_TASK_ID
            ,p_NEW_PA_PROJECT_TASK_ID            => l_instance_rec.PA_PROJECT_TASK_ID
            ,p_OLD_IN_TRANSIT_ORDER_LINE_ID      => l_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_NEW_IN_TRANSIT_ORDER_LINE_ID      => l_instance_rec.IN_TRANSIT_ORDER_LINE_ID
            ,p_OLD_WIP_JOB_ID                    => l_instance_rec.WIP_JOB_ID
            ,p_NEW_WIP_JOB_ID                    => l_instance_rec.WIP_JOB_ID
            ,p_OLD_PO_ORDER_LINE_ID              => l_instance_rec.PO_ORDER_LINE_ID
            ,p_NEW_PO_ORDER_LINE_ID              => l_instance_rec.PO_ORDER_LINE_ID
            ,p_OLD_COMPLETENESS_FLAG             => l_instance_rec.COMPLETENESS_FLAG
            ,p_NEW_COMPLETENESS_FLAG             => l_instance_rec.COMPLETENESS_FLAG
            ,p_FULL_DUMP_FLAG                    => 'N'
            ,p_NEW_CONTEXT                       => l_instance_rec.CONTEXT
            ,P_OLD_CONTEXT                       => l_instance_rec.CONTEXT
            ,p_NEW_ATTRIBUTE1                    => l_instance_rec.ATTRIBUTE1
            ,p_OLD_ATTRIBUTE1                    => l_instance_rec.ATTRIBUTE1
            ,p_NEW_ATTRIBUTE2                    => l_instance_rec.ATTRIBUTE2
            ,p_OLD_ATTRIBUTE2                    => l_instance_rec.ATTRIBUTE2
            ,p_NEW_ATTRIBUTE3                    => l_instance_rec.ATTRIBUTE3
            ,p_OLD_ATTRIBUTE3                    => l_instance_rec.ATTRIBUTE3
            ,p_NEW_ATTRIBUTE4                    => l_instance_rec.ATTRIBUTE4
            ,p_OLD_ATTRIBUTE4                    => l_instance_rec.ATTRIBUTE4
            ,p_NEW_ATTRIBUTE5                    => l_instance_rec.ATTRIBUTE5
            ,p_OLD_ATTRIBUTE5                    => l_instance_rec.ATTRIBUTE5
            ,p_NEW_ATTRIBUTE6                    => l_instance_rec.ATTRIBUTE6
            ,p_OLD_ATTRIBUTE6                    => l_instance_rec.ATTRIBUTE6
            ,p_NEW_ATTRIBUTE7                    => l_instance_rec.ATTRIBUTE7
            ,p_OLD_ATTRIBUTE7                    => l_instance_rec.ATTRIBUTE7
            ,p_NEW_ATTRIBUTE8                    => l_instance_rec.ATTRIBUTE8
            ,p_OLD_ATTRIBUTE8                    => l_instance_rec.ATTRIBUTE8
            ,p_NEW_ATTRIBUTE9                    => l_instance_rec.ATTRIBUTE9
            ,p_OLD_ATTRIBUTE9                    => l_instance_rec.ATTRIBUTE9
            ,p_NEW_ATTRIBUTE10                   => l_instance_rec.ATTRIBUTE10
            ,p_OLD_ATTRIBUTE10                   => l_instance_rec.ATTRIBUTE10
            ,p_NEW_ATTRIBUTE11                   => l_instance_rec.ATTRIBUTE11
            ,p_OLD_ATTRIBUTE11                   => l_instance_rec.ATTRIBUTE11
            ,p_NEW_ATTRIBUTE12                   => l_instance_rec.ATTRIBUTE12
            ,p_OLD_ATTRIBUTE12                   => l_instance_rec.ATTRIBUTE12
            ,p_NEW_ATTRIBUTE13                   => l_instance_rec.ATTRIBUTE13
            ,p_OLD_ATTRIBUTE13                   => l_instance_rec.ATTRIBUTE13
            ,p_NEW_ATTRIBUTE14                   => l_instance_rec.ATTRIBUTE14
            ,p_OLD_ATTRIBUTE14                   => l_instance_rec.ATTRIBUTE14
            ,p_NEW_ATTRIBUTE15                   => l_instance_rec.ATTRIBUTE15
            ,p_OLD_ATTRIBUTE15                   => l_instance_rec.ATTRIBUTE15
            ,p_CREATED_BY                        => FND_GLOBAL.USER_ID
            ,p_CREATION_DATE                     => SYSDATE
            ,p_LAST_UPDATED_BY                   => FND_GLOBAL.USER_ID
            ,p_LAST_UPDATE_DATE                  => SYSDATE
            ,p_LAST_UPDATE_LOGIN                 => FND_GLOBAL.CONC_LOGIN_ID
            ,p_OBJECT_VERSION_NUMBER             => 1
            ,p_OLD_INST_LOC_TYPE_CODE            => l_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_NEW_INST_LOC_TYPE_CODE            => l_instance_rec.INSTALL_LOCATION_TYPE_CODE
            ,p_OLD_INST_LOC_ID                   => l_instance_rec.INSTALL_LOCATION_ID
            ,p_NEW_INST_LOC_ID                   => l_instance_rec.INSTALL_LOCATION_ID
            ,p_OLD_INST_USAGE_CODE               => l_instance_rec.INSTANCE_USAGE_CODE
            ,p_NEW_INST_USAGE_CODE               => l_instance_rec.INSTANCE_USAGE_CODE
            ,p_OLD_CONFIG_INST_REV_NUM           => l_instance_rec.CONFIG_INST_REV_NUM
            ,p_NEW_CONFIG_INST_REV_NUM           => NULL -- l_instance_rec.CONFIG_INST_REV_NUM
            ,p_OLD_CONFIG_VALID_STATUS           => l_instance_rec.CONFIG_VALID_STATUS
            ,p_NEW_CONFIG_VALID_STATUS           => l_instance_rec.CONFIG_VALID_STATUS
            ,p_OLD_INSTANCE_DESCRIPTION          => l_instance_rec.INSTANCE_DESCRIPTION
            ,p_NEW_INSTANCE_DESCRIPTION          => l_instance_rec.INSTANCE_DESCRIPTION
            ,p_OLD_INSTALL_DATE                  => l_instance_rec.INSTALL_DATE
            ,p_NEW_INSTALL_DATE                  => l_instance_rec.INSTALL_DATE
            ,p_OLD_RETURN_BY_DATE                => l_instance_rec.RETURN_BY_DATE
            ,p_NEW_RETURN_BY_DATE                => l_instance_rec.RETURN_BY_DATE
            ,p_OLD_ACTUAL_RETURN_DATE            => l_instance_rec.ACTUAL_RETURN_DATE
            ,p_NEW_ACTUAL_RETURN_DATE            => l_instance_rec.ACTUAL_RETURN_DATE
            ,p_OLD_LAST_OE_AGREEMENT_ID          => l_instance_rec.LAST_OE_AGREEMENT_ID
            ,p_NEW_LAST_OE_AGREEMENT_ID          => l_instance_rec.LAST_OE_AGREEMENT_ID
	    ,p_OLD_LAST_OE_ORDER_LINE_ID         => l_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_NEW_LAST_OE_ORDER_LINE_ID         => l_instance_rec.LAST_OE_ORDER_LINE_ID
	    ,p_OLD_LAST_OE_RMA_LINE_ID        => l_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_NEW_LAST_OE_RMA_LINE_ID        => l_instance_rec.LAST_OE_RMA_LINE_ID
	    ,p_OLD_LAST_WIP_JOB_ID               => l_instance_rec.LAST_WIP_JOB_ID
	    ,p_NEW_LAST_WIP_JOB_ID               => l_instance_rec.LAST_WIP_JOB_ID
	    ,p_OLD_LAST_PO_PO_LINE_ID            => l_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_NEW_LAST_PO_PO_LINE_ID            => l_instance_rec.LAST_PO_PO_LINE_ID
	    ,p_OLD_LAST_PA_PROJECT_ID            => l_instance_rec.LAST_PA_PROJECT_ID
	    ,p_NEW_LAST_PA_PROJECT_ID            => l_instance_rec.LAST_PA_PROJECT_ID
	    ,p_OLD_LAST_PA_TASK_ID          => l_instance_rec.LAST_PA_TASK_ID
	    ,p_NEW_LAST_PA_TASK_ID          => l_instance_rec.LAST_PA_TASK_ID
	    ,p_OLD_LAST_TXN_LINE_DETAIL_ID       => l_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_NEW_LAST_TXN_LINE_DETAIL_ID       => l_instance_rec.LAST_TXN_LINE_DETAIL_ID
	    ,p_OLD_LAST_OE_PO_NUMBER             => l_instance_rec.LAST_OE_PO_NUMBER
	    ,p_NEW_LAST_OE_PO_NUMBER             => l_instance_rec.LAST_OE_PO_NUMBER
 	    --start of parameters addition for eam integration--
	    ,p_OLD_NETWORK_ASSET_FLAG             => l_instance_rec.NETWORK_ASSET_FLAG
	    ,p_NEW_NETWORK_ASSET_FLAG             => l_instance_rec.NETWORK_ASSET_FLAG
	    ,p_OLD_MAINTAINABLE_FLAG              => l_instance_rec.MAINTAINABLE_FLAG
	    ,p_NEW_MAINTAINABLE_FLAG              => l_instance_rec.MAINTAINABLE_FLAG
	    ,p_OLD_PN_LOCATION_ID                 => l_instance_rec.PN_LOCATION_ID
	    ,p_NEW_PN_LOCATION_ID                 => l_instance_rec.PN_LOCATION_ID
	    ,p_OLD_ASSET_CRITICALITY_CODE         => l_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_NEW_ASSET_CRITICALITY_CODE         => l_instance_rec.ASSET_CRITICALITY_CODE
	    ,p_OLD_CATEGORY_ID                    => l_instance_rec.CATEGORY_ID
	    ,p_NEW_CATEGORY_ID                    => l_instance_rec.CATEGORY_ID
	    ,p_OLD_EQUIPMENT_GEN_OBJECT_ID        => l_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_NEW_EQUIPMENT_GEN_OBJECT_ID        => l_instance_rec.EQUIPMENT_GEN_OBJECT_ID
	    ,p_OLD_INSTANTIATION_FLAG             => l_instance_rec.INSTANTIATION_FLAG
	    ,p_NEW_INSTANTIATION_FLAG             => l_instance_rec.INSTANTIATION_FLAG
	    ,p_OLD_LINEAR_LOCATION_ID             => l_instance_rec.LINEAR_LOCATION_ID
	    ,p_NEW_LINEAR_LOCATION_ID             => l_instance_rec.LINEAR_LOCATION_ID
	    ,p_OLD_OPERATIONAL_LOG_FLAG           => l_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_NEW_OPERATIONAL_LOG_FLAG           => l_instance_rec.OPERATIONAL_LOG_FLAG
	    ,p_OLD_CHECKIN_STATUS                 => l_instance_rec.CHECKIN_STATUS
	    ,p_NEW_CHECKIN_STATUS                 => l_instance_rec.CHECKIN_STATUS
	    ,p_OLD_SUP_WARRANTY_EXP_DATE          => l_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
	    ,p_NEW_SUP_WARRANTY_EXP_DATE          => l_instance_rec.SUPPLIER_WARRANTY_EXP_DATE
            ,p_OLD_ATTRIBUTE16                    => l_instance_rec.ATTRIBUTE16
            ,p_NEW_ATTRIBUTE16                    => l_instance_rec.ATTRIBUTE16
            ,p_OLD_ATTRIBUTE17                    => l_instance_rec.ATTRIBUTE17
            ,p_NEW_ATTRIBUTE17                    => l_instance_rec.ATTRIBUTE17
            ,p_OLD_ATTRIBUTE18                    => l_instance_rec.ATTRIBUTE18
            ,p_NEW_ATTRIBUTE18                    => l_instance_rec.ATTRIBUTE18
            ,p_OLD_ATTRIBUTE19                    => l_instance_rec.ATTRIBUTE19
            ,p_NEW_ATTRIBUTE19                    => l_instance_rec.ATTRIBUTE19
            ,p_OLD_ATTRIBUTE20                    => l_instance_rec.ATTRIBUTE20
            ,p_NEW_ATTRIBUTE20                    => l_instance_rec.ATTRIBUTE20
            ,p_OLD_ATTRIBUTE21                    => l_instance_rec.ATTRIBUTE21
            ,p_NEW_ATTRIBUTE21                    => l_instance_rec.ATTRIBUTE21
            ,p_OLD_ATTRIBUTE22                    => l_instance_rec.ATTRIBUTE22
            ,p_NEW_ATTRIBUTE22                    => l_instance_rec.ATTRIBUTE22
            ,p_OLD_ATTRIBUTE23                    => l_instance_rec.ATTRIBUTE23
            ,p_NEW_ATTRIBUTE23                    => l_instance_rec.ATTRIBUTE23
            ,p_OLD_ATTRIBUTE24                    => l_instance_rec.ATTRIBUTE24
            ,p_NEW_ATTRIBUTE24                    => l_instance_rec.ATTRIBUTE24
            ,p_OLD_ATTRIBUTE25                    => l_instance_rec.ATTRIBUTE25
            ,p_NEW_ATTRIBUTE25                    => l_instance_rec.ATTRIBUTE25
            ,p_OLD_ATTRIBUTE26                    => l_instance_rec.ATTRIBUTE26
            ,p_NEW_ATTRIBUTE26                    => l_instance_rec.ATTRIBUTE26
            ,p_OLD_ATTRIBUTE27                    => l_instance_rec.ATTRIBUTE27
            ,p_NEW_ATTRIBUTE27                    => l_instance_rec.ATTRIBUTE27
            ,p_OLD_ATTRIBUTE28                    => l_instance_rec.ATTRIBUTE28
            ,p_NEW_ATTRIBUTE28                    => l_instance_rec.ATTRIBUTE28
            ,p_OLD_ATTRIBUTE29                    => l_instance_rec.ATTRIBUTE29
            ,p_NEW_ATTRIBUTE29                    => l_instance_rec.ATTRIBUTE29
            ,p_OLD_ATTRIBUTE30                    => l_instance_rec.ATTRIBUTE30
            ,p_NEW_ATTRIBUTE30                    => l_instance_rec.ATTRIBUTE30
  	    --end of parameters addition for eam integration--
   -- Addition of columns for FA Integration
            ,p_OLD_PAYABLES_UNIT_PRICE            => l_instance_rec.PAYABLES_UNIT_PRICE
            ,p_NEW_PAYABLES_UNIT_PRICE            => l_instance_rec.PAYABLES_UNIT_PRICE
            ,p_OLD_PAYABLES_CURRENCY_CODE         => l_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_NEW_PAYABLES_CURRENCY_CODE         => l_instance_rec.PAYABLES_CURRENCY_CODE
            ,p_OLD_PURCHASE_UNIT_PRICE            => l_instance_rec.PURCHASE_UNIT_PRICE
            ,p_NEW_PURCHASE_UNIT_PRICE            => l_instance_rec.PURCHASE_UNIT_PRICE
            ,p_OLD_PURCHASE_CURRENCY_CODE         => l_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_NEW_PURCHASE_CURRENCY_CODE         => l_instance_rec.PURCHASE_CURRENCY_CODE
            ,p_OLD_SALES_UNIT_PRICE               => l_instance_rec.SALES_UNIT_PRICE
            ,p_NEW_SALES_UNIT_PRICE               => l_instance_rec.SALES_UNIT_PRICE
            ,p_OLD_SALES_CURRENCY_CODE            => l_instance_rec.SALES_CURRENCY_CODE
            ,p_NEW_SALES_CURRENCY_CODE            => l_instance_rec.SALES_CURRENCY_CODE
            ,p_OLD_OPERATIONAL_STATUS_CODE        => l_instance_rec.OPERATIONAL_STATUS_CODE
            ,p_NEW_OPERATIONAL_STATUS_CODE        => l_instance_rec.OPERATIONAL_STATUS_CODE
    -- End addition of columns for FA Integration
            -- Begin Add Code for Siebel Genesis Project
            ,p_OLD_SOURCE_CODE                   => l_curr_instance_rec.SOURCE_CODE
            ,p_NEW_SOURCE_CODE                   => l_instance_rec.SOURCE_CODE
            -- End Add Code for Siebel Genesis Project
            );


     END IF;
      END; -- End for update row, bug 6788183
       IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
            RAISE FND_API.G_EXC_ERROR;

       END IF;

      -- Calling eam API to log instance update event
       IF l_eam_item
       THEN
          IF l_ins_hist_id IS NOT NULL
          THEN
             l_instance_history_id:=l_ins_hist_id;
          ELSE
             l_instance_history_id:=l_csi_item_instance_h_id;
          END IF;
          eam_asset_log_pvt.instance_update_event
          (p_api_version         => p_api_version
          ,p_init_msg_list       => fnd_api.g_false
          ,p_commit              => fnd_api.g_false
          ,p_validation_level    => fnd_api.g_valid_level_full
          ,x_return_status       => x_return_status
          ,x_msg_count           => x_msg_count
          ,x_msg_data            => x_msg_data
          ,p_instance_id         => p_instance_rec.instance_id
          ,p_ref_id              => l_instance_history_id
          ,p_event_date          => sysdate);
         IF NOT(x_return_status = fnd_api.g_ret_sts_success)
         THEN
            csi_gen_utility_pvt.put_line('Error from eam_asset_log_pvt.instance_update_event API');
            RAISE fnd_api.g_exc_error;
         END IF;
       END IF;
      -- Calling eam API to log instance update event

       -- srramakr Bug # 3945813 We no longer look for service_order_allowed_flag to decide
       -- whether contracts should be terminated or not. Instead, we look for terminated_flag.
       -- Before terminating the contract check whether the service_order_allowed_flag is set to 'N'
       -- for the instance_status passed. If set to 'Y' there will be no call  to contracts.
       OPEN  instance_csr (p_instance_rec.instance_id);
       FETCH instance_csr INTO l_instance_csr;
       CLOSE instance_csr;

       IF csi_item_instance_vld_pvt.termination_status
          ( p_instance_status_id => l_instance_csr.instance_status_id )
       THEN
         IF p_txn_rec.transaction_type_id in (53,54) THEN
            l_oks_txn_type := 'RET';
         ELSE
            l_oks_txn_type := 'TRM';
         END IF;
         csi_item_instance_pvt.Call_to_Contracts
         ( p_transaction_type   =>   l_oks_txn_type
          ,p_instance_id        =>   p_instance_rec.instance_id
          ,p_new_instance_id    =>   NULL
          ,p_vld_org_id         =>   p_instance_rec.vld_organization_id
          ,p_quantity           =>   NULL
          ,p_party_account_id1  =>   NULL
          ,p_party_account_id2  =>   NULL
          ,p_transaction_date   =>   p_txn_rec.transaction_date -- l_temp_date
          ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date -- l_temp_date
	  ,p_txn_type_id        => p_txn_rec.transaction_type_id -- added for  BUG  5752271
          ,p_grp_call_contracts =>   p_instance_rec.grp_call_contracts
          ,p_oks_txn_inst_tbl   =>   p_oks_txn_inst_tbl
          ,x_return_status      =>   x_return_status
          ,x_msg_count          =>   x_msg_count
          ,x_msg_data           =>   x_msg_data
          );

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
              WHILE l_msg_count > 0 LOOP
                x_msg_data := FND_MSG_PUB.GET
                              (  l_msg_index,
                                 FND_API.G_FALSE
                               );
                csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                    l_msg_index := l_msg_index + 1;
                    l_msg_count := l_msg_count - 1;
              END LOOP;
                RAISE FND_API.G_EXC_ERROR;
           END IF;
       END IF;

      --
      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
      END IF;

      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count   =>   x_msg_count ,
             p_data    =>   x_msg_data
            );

EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO expire_item_instance_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (p_encoded =>  FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                 p_data    =>  x_msg_data
                );

    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO expire_item_instance_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                 p_data    =>  x_msg_data
                );
    WHEN OTHERS THEN
            ROLLBACK TO expire_item_instance_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF FND_MSG_PUB.Check_Msg_Level
                 (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
              THEN
                  FND_MSG_PUB.Add_Exc_Msg
                 ( G_PKG_NAME, l_api_name );
              END IF;
                  FND_MSG_PUB.Count_And_Get
                 ( p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                   p_data   =>  x_msg_data
                );

END expire_item_instance;

/*--------------------------------------------------------*/
/* Procedure name:  Split_Item_Instance                   */
/* Description   :  This procedure is used to create split*/
/*                  lines for instance                    */
/*--------------------------------------------------------*/


 PROCEDURE Split_Item_Instance
 (
   p_api_version                 IN      NUMBER
  ,p_commit                      IN      VARCHAR2
  ,p_init_msg_list               IN      VARCHAR2
  ,p_validation_level            IN      NUMBER
  ,p_source_instance_rec         IN OUT  NOCOPY csi_datastructures_pub.instance_rec
  ,p_quantity1                   IN      NUMBER
  ,p_quantity2                   IN      NUMBER
  ,p_copy_ext_attribs            IN      VARCHAR2
  ,p_copy_org_assignments        IN      VARCHAR2
  ,p_copy_parties                IN      VARCHAR2
--  ,p_copy_contacts               IN      VARCHAR2 := fnd_api.g_true
  ,p_copy_accounts               IN      VARCHAR2
  ,p_copy_asset_assignments      IN      VARCHAR2
  ,p_copy_pricing_attribs        IN      VARCHAR2
  ,p_txn_rec                     IN OUT  NOCOPY csi_datastructures_pub.transaction_rec
  ,x_new_instance_rec            OUT     NOCOPY csi_datastructures_pub.instance_rec
  ,x_return_status               OUT     NOCOPY VARCHAR2
  ,x_msg_count                   OUT     NOCOPY NUMBER
  ,x_msg_data                    OUT     NOCOPY VARCHAR2
 )

IS
    l_api_name              CONSTANT VARCHAR2(30)   := 'SPLIT_ITEM_INSTANCE';
    l_api_version           CONSTANT NUMBER         := 1.0;
    l_debug_level           NUMBER;
    l_serialized            NUMBER;
    l_return_value          BOOLEAN;
    l_object_version_number NUMBER;
    l_quantity              NUMBER;
    l_instance_id_lst       csi_datastructures_pub.id_tbl;
    l_new_instance_rec      csi_datastructures_pub.instance_rec;
    l_new_instance_tbl      csi_datastructures_pub.instance_tbl;
    l_msg_data              VARCHAR2(2000);
    l_msg_index             NUMBER;
    l_msg_count             NUMBER;
    x_msg_index_out         NUMBER;
    l_old_oks_cp_rec        oks_ibint_pub.cp_rec_type;
    l_new_oks_cp_rec        oks_ibint_pub.cp_rec_type;
    l_transaction_type      VARCHAR2(10);
    l_source_instance_rec   csi_datastructures_pub.instance_rec := p_source_instance_rec;
    l_contracts_status      VARCHAR2(3);
    l_new_instance_rec1     csi_datastructures_pub.instance_rec;
    l_internal_party_id     NUMBER;
    l_item_attribute_tbl    csi_item_instance_pvt.item_attribute_tbl;
    l_location_tbl          csi_item_instance_pvt.location_tbl;
    l_generic_id_tbl        csi_item_instance_pvt.generic_id_tbl;
    l_lookup_tbl            csi_item_instance_pvt.lookup_tbl;
    l_ins_count_rec         csi_item_instance_pvt.ins_count_rec;
    l_relationship_tbl      csi_datastructures_pub.ii_relationship_tbl;
    --
    px_oks_txn_inst_tbl     oks_ibint_pub.txn_instance_tbl;
    px_child_inst_tbl       csi_item_instance_grp.child_inst_tbl;
    l_batch_type            VARCHAR2(50);
    l_batch_id              NUMBER;
    --
    CURSOR c1 is
      SELECT serial_number_control_code
      FROM   mtl_system_items
      WHERE  inventory_item_id = p_source_instance_rec.inventory_item_id
      AND    organization_id   = p_source_instance_rec.vld_organization_id
      AND    enabled_flag = 'Y'
      AND    nvl (start_date_active, sysdate) <= sysdate
      AND    nvl (end_date_active, sysdate+1) > sysdate;

    l_account_id            NUMBER;
    l_dummy                 NUMBER;
BEGIN
    -- Standard Start of API savepoint
       SAVEPOINT      split_item_instance_pvt;

    -- Standard call to check for call compatibility.
       IF NOT FND_API.Compatible_API_Call (l_api_version,
                                           p_api_version,
                                           l_api_name,
                                           G_PKG_NAME  )
       THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
       END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
       IF FND_API.to_Boolean( p_init_msg_list ) THEN
             FND_MSG_PUB.initialize;
       END IF;

    -- Initialize API return status to success
       x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option debug_level for debug message reporting
        l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

       --  If debug_level = 1 then dump the procedure name
         IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line ( 'split_item_instance_pvt');
         END IF;

       -- If the debug level = 2 then dump all the parameters values.
         IF (l_debug_level > 1) THEN
               csi_gen_utility_pvt.put_line ('split_item_instance_pvt' ||
                                                   p_api_version      ||'-'||
                                                   p_commit           ||'-'||
                                                   p_init_msg_list          );
               -- Dump the records in the log file
               csi_gen_utility_pvt.dump_instance_rec(p_source_instance_rec);
               csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
         END IF;

       -- Start API body

--check for the required parameters
         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_Num
             (    p_source_instance_rec.INSTANCE_ID  ,
                '  p_source_instance_rec.INSTANCE_ID ',
                   l_api_name
             );
--validation for serialized or not

      IF   p_source_instance_rec.location_type_code = 'INVENTORY'
        OR p_source_instance_rec.location_type_code = 'WIP'
        OR p_source_instance_rec.location_type_code = 'PROJECT'
      THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_CANNOT_SPLIT');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
      END IF;

      BEGIN
          SELECT 1
          INTO  l_dummy
          FROM  csi_i_assets
          WHERE instance_id =p_source_instance_rec.instance_id;

          FND_MESSAGE.SET_NAME('CSI','CSI_CANNOT_SPLIT');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
      EXCEPTION
         WHEN OTHERS THEN
           NULL;
      END;


      OPEN C1;
      FETCH C1 into l_serialized;
      IF c1%FOUND THEN
     -- IF nvl(l_serialized,0) IN (2,5,6) then
        IF csi_Item_Instance_Vld_pvt.Is_treated_serialized
                                ( p_serial_control_code => l_serialized
                                 ,p_location_type_code  => p_source_instance_rec.location_type_code
                                 ,p_transaction_type_id => p_txn_rec.transaction_type_id
                                 ) -- Added by sk on 09/13/01
        THEN
            l_return_value := FALSE;
                FND_MESSAGE.SET_NAME('CSI','CSI_API_CANNOT_BE_SERIALIZED');
                FND_MESSAGE.SET_TOKEN('SERIAL_NUMBER', 'serial_number');
                FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
        END IF;
      END IF;
      CLOSE C1;

--get the quantity from the csi_item_instances for the instance_id passed

    BEGIN
          SELECT quantity
          INTO   l_quantity
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
    EXCEPTION
         WHEN NO_DATA_FOUND THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_QUANITY');
            FND_MSG_PUB.Add;
                   RAISE FND_API.G_EXC_ERROR;
    END;

--verifying the quantity
      IF (p_quantity1 + p_quantity2) <> l_quantity THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_INCORRECT_QUANTITY');
            FND_MSG_PUB.Add;
            RAISE FND_API.G_EXC_ERROR;
      END IF;

    -- Added by sk for bug 2186683
    IF p_source_instance_rec.vld_organization_id IS NULL OR
       p_source_instance_rec.vld_organization_id = fnd_api.g_miss_num
    THEN
       BEGIN
          SELECT last_vld_organization_id
          INTO   p_source_instance_rec.vld_organization_id
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
       EXCEPTION
         WHEN OTHERS THEN
            NULL;
       END;
    END IF;
    -- End addition by sk for bug 2186683
--if the passed quantities and the quantity in the table are same then
      p_source_instance_rec.quantity := p_quantity2;
--call the copy instance api to create a new record with 'p_quantity2')

     csi_item_instance_pvt.copy_item_instance
           ( p_api_version                 => p_api_version
            ,p_commit                      => fnd_api.g_false
            ,p_init_msg_list               => p_init_msg_list
            ,p_validation_level            => p_validation_level
            ,p_source_instance_rec         => p_source_instance_rec
            ,p_copy_ext_attribs            => p_copy_ext_attribs
            ,p_copy_org_assignments        => p_copy_org_assignments
            ,p_copy_parties                => p_copy_parties
            ,p_copy_contacts               => fnd_api.g_true
            ,p_copy_accounts               => p_copy_accounts
            ,p_copy_asset_assignments      => p_copy_asset_assignments
            ,p_copy_pricing_attribs        => p_copy_pricing_attribs
            ,p_copy_inst_children          => fnd_api.g_true
            ,p_call_from_split             => fnd_api.g_true
            ,p_txn_rec                     => p_txn_rec
            ,x_new_instance_tbl            => l_new_instance_tbl
            ,x_return_status               => x_return_status
            ,x_msg_count                   => x_msg_count
            ,x_msg_data                    => x_msg_data
           );

      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
          FOR i in 1..x_msg_Count LOOP
            FND_MSG_PUB.Get(p_msg_index     => i,
                            p_encoded       => 'F',
                            p_data          => x_msg_data,
                            p_msg_index_out => x_msg_index_out );

         End LOOP;
         RAISE fnd_api.g_exc_error;
      END IF;

      IF (l_new_instance_tbl.count <> 1) THEN
             -- If the number records in the PL/SQL table is more than 1 OR
             -- not equal to 1 than raise error
             RAISE fnd_api.g_exc_error;
      ELSE
         x_new_instance_rec := l_new_instance_tbl(1);
      END IF;

-- Start addition for bug 2823122
    IF l_new_instance_tbl(1).instance_usage_code='IN_RELATIONSHIP'
    THEN
       IF l_relationship_tbl.COUNT=0
       THEN
         BEGIN
          SELECT object_id
                ,relationship_type_code
                ,mandatory_flag
                ,context
                ,sysdate
                ,active_end_date
                ,position_reference
                ,display_order
                ,attribute1
                ,attribute2
                ,attribute3
                ,attribute4
                ,attribute5
                ,attribute6
                ,attribute7
                ,attribute8
                ,attribute9
                ,attribute10
                ,attribute11
                ,attribute12
                ,attribute13
                ,attribute14
                ,attribute15
          INTO   l_relationship_tbl(1).object_id
                ,l_relationship_tbl(1).relationship_type_code
                ,l_relationship_tbl(1).mandatory_flag
                ,l_relationship_tbl(1).context
                ,l_relationship_tbl(1).active_start_date
                ,l_relationship_tbl(1).active_end_date
                ,l_relationship_tbl(1).position_reference
                ,l_relationship_tbl(1).display_order
                ,l_relationship_tbl(1).attribute1
                ,l_relationship_tbl(1).attribute2
                ,l_relationship_tbl(1).attribute3
                ,l_relationship_tbl(1).attribute4
                ,l_relationship_tbl(1).attribute5
                ,l_relationship_tbl(1).attribute6
                ,l_relationship_tbl(1).attribute7
                ,l_relationship_tbl(1).attribute8
                ,l_relationship_tbl(1).attribute9
                ,l_relationship_tbl(1).attribute10
                ,l_relationship_tbl(1).attribute11
                ,l_relationship_tbl(1).attribute12
                ,l_relationship_tbl(1).attribute13
                ,l_relationship_tbl(1).attribute14
                ,l_relationship_tbl(1).attribute15
          FROM  csi_ii_relationships
          WHERE subject_id=p_source_instance_rec.instance_id
          AND   relationship_type_code='COMPONENT-OF'
          AND   (SYSDATE BETWEEN NVL(active_start_date, SYSDATE) AND NVL(active_end_date, SYSDATE));
         EXCEPTION
           WHEN OTHERS THEN
             NULL;
         END;
       END IF;

        IF l_relationship_tbl(1).object_id  IS NOT NULL
         AND l_relationship_tbl(1).object_id<>fnd_api.g_miss_num
        THEN
          l_relationship_tbl(1).subject_id:=l_new_instance_tbl(1).instance_id;
          csi_ii_relationships_pub.create_relationship(
            p_api_version      => 1.0,
            p_commit           => fnd_api.g_false,
            p_init_msg_list    => fnd_api.g_true,
            p_validation_level => fnd_api.g_valid_level_full,
            p_relationship_tbl => l_relationship_tbl,
            p_txn_rec          => p_txn_rec,
            x_return_status    => x_return_status,
            x_msg_count        => x_msg_count,
            x_msg_data         => x_msg_data);
           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
               FOR i in 1..x_msg_Count LOOP
                   FND_MSG_PUB.Get(p_msg_index     => i,
                                   p_encoded       => 'F',
                                   p_data          => x_msg_data,
                                   p_msg_index_out => x_msg_index_out );
               END LOOP;
              RAISE fnd_api.g_exc_error;
           END IF;
        END IF;
    END IF;
-- End addition for bug 2823122
--update the existing record with 'p_quantity1')
    BEGIN
          SELECT object_version_number
          INTO   l_object_version_number
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
    EXCEPTION
         WHEN NO_DATA_FOUND THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_OBJ_NUM');
            FND_MSG_PUB.ADD;
                   RAISE FND_API.G_EXC_ERROR;
    END;
    l_new_instance_rec.instance_id           := p_source_instance_rec.instance_id;
    l_new_instance_rec.quantity              := p_quantity1;
    l_new_instance_rec.object_version_number := l_object_version_number;
    l_new_instance_rec.vld_organization_id   := p_source_instance_rec.vld_organization_id;
    l_new_instance_rec.active_end_date   := p_source_instance_rec.active_end_date; -- bug 3704480
    l_new_instance_rec.instance_status_id   := p_source_instance_rec.instance_status_id; -- bug 3704480
--call the update api

    update_item_instance
           (
            p_api_version                => p_api_version
           ,p_commit                     => fnd_api.g_false
           ,p_init_msg_list              => p_init_msg_list
           ,p_validation_level           => p_validation_level
           ,p_instance_rec               => l_new_instance_rec
           ,p_txn_rec                    => p_txn_rec
           ,x_instance_id_lst            => l_instance_id_lst
           ,x_return_status              => x_return_status
           ,x_msg_count                  => x_msg_count
           ,x_msg_data                   => x_msg_data
           ,p_item_attribute_tbl         => l_item_attribute_tbl
           ,p_location_tbl               => l_location_tbl
           ,p_generic_id_tbl             => l_generic_id_tbl
           ,p_lookup_tbl                 => l_lookup_tbl
           ,p_ins_count_rec              => l_ins_count_rec
           ,p_oks_txn_inst_tbl           => px_oks_txn_inst_tbl
           ,p_child_inst_tbl             => px_child_inst_tbl
           );

      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
         FOR i in 1..x_msg_Count LOOP
            FND_MSG_PUB.Get(p_msg_index     => i,
                            p_encoded       => 'F',
                            p_data          => x_msg_data,
                            p_msg_index_out => x_msg_index_out );
         End LOOP;
         RAISE fnd_api.g_exc_error;
      END IF;
      -- Calling Contracts
      -- Added on 28-sep-01
      -- Modification starts
      --
      l_transaction_type := 'SPL';
      csi_item_instance_pvt.Call_to_Contracts
	( p_transaction_type   =>   l_transaction_type
	 ,p_instance_id        =>   p_source_instance_rec.instance_id
	 ,p_new_instance_id    =>   l_new_instance_tbl(1).instance_id
	 ,p_vld_org_id         =>   p_source_instance_rec.vld_organization_id
	 ,p_quantity           =>   p_quantity1 -- modified for bug 2103144
	 ,p_party_account_id1  =>   NULL
	 ,p_party_account_id2  =>   NULL
	 ,p_transaction_date   =>   p_txn_rec.transaction_date -- For 3483763
	 ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date -- For 3483763
	 ,p_txn_type_id        => p_txn_rec.transaction_type_id -- added for  BUG  5752271
	 ,p_oks_txn_inst_tbl   =>   px_oks_txn_inst_tbl
	 ,x_return_status      =>   x_return_status
	 ,x_msg_count          =>   x_msg_count
	 ,x_msg_data           =>   x_msg_data
        );
      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
         RAISE FND_API.G_EXC_ERROR;
      END IF;
      --
      IF px_oks_txn_inst_tbl.count > 0 THEN
	 csi_gen_utility_pvt.dump_oks_txn_inst_tbl(px_oks_txn_inst_tbl);
	 csi_gen_utility_pvt.put_line('Calling OKS Core API...');
         --
	 IF p_txn_rec.transaction_type_id = 3 THEN
	    l_batch_id := p_txn_rec.source_header_ref_id;
	    l_batch_type := p_txn_rec.source_group_ref;
	 ELSE
	    l_batch_id := NULL;
	    l_batch_type := NULL;
	 END IF;
	 --
         UPDATE CSI_TRANSACTIONS
         set contracts_invoked = 'Y'
         where transaction_id = p_txn_rec.transaction_id;
         --
	 OKS_IBINT_PUB.IB_interface
	    (
	      P_Api_Version           =>  1.0,
	      P_init_msg_list         =>  p_init_msg_list,
	      P_single_txn_date_flag  =>  'Y',
	      P_Batch_type            =>  l_batch_type,
	      P_Batch_ID              =>  l_batch_id,
	      P_OKS_Txn_Inst_tbl      =>  px_oks_txn_inst_tbl,
	      x_return_status         =>  x_return_status,
	      x_msg_count             =>  x_msg_count,
	      x_msg_data              =>  x_msg_data
	   );
	 --
	 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
	    l_msg_index := 1;
	    l_msg_count := x_msg_count;
	    WHILE l_msg_count > 0 LOOP
	       x_msg_data := FND_MSG_PUB.GET
		       (  l_msg_index,
			  FND_API.G_FALSE        );
	       csi_gen_utility_pvt.put_line( 'Error from OKS_IBINT_PUB.IB_interface..');
	       csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
	       l_msg_index := l_msg_index + 1;
	       l_msg_count := l_msg_count - 1;
	    END LOOP;
	    RAISE FND_API.G_EXC_ERROR;
	 END IF;
      END IF;
      -- Modification ends
      -- End Calling Contracts.
      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
           COMMIT WORK;
      END IF;

       -- End disable trace

      -- Standard call to get message count and IF count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count   =>   x_msg_count ,
             p_data    =>   x_msg_data
            );

EXCEPTION

     WHEN FND_API.G_EXC_ERROR THEN
          ROLLBACK TO split_item_instance_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                  p_data    =>  x_msg_data
                );
     WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            ROLLBACK TO split_item_instance_pvt;
            FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                  p_data    =>  x_msg_data
                );
     WHEN OTHERS THEN
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
          ROLLBACK TO split_item_instance_pvt;
            IF    FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                  FND_MSG_PUB.Add_Exc_Msg
                  ( G_PKG_NAME ,
                    l_api_name
                  );
            END IF;
            FND_MSG_PUB.Count_And_Get
                  ( p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                    p_data   =>  x_msg_data
                  );

END Split_Item_Instance;

/*---------------------------------------------------*/
/* Procedure name:  Split_Item_Instance_lines        */
/* Description   :  This procedure is used to create */
/*                  split lines for instance         */
/*---------------------------------------------------*/
 PROCEDURE Split_Item_Instance_Lines
 (
   p_api_version                 IN      NUMBER
  ,p_commit                      IN      VARCHAR2
  ,p_init_msg_list               IN      VARCHAR2
  ,p_validation_level            IN      NUMBER
  ,p_source_instance_rec         IN OUT  NOCOPY csi_datastructures_pub.instance_rec
  ,p_copy_ext_attribs            IN      VARCHAR2
  ,p_copy_org_assignments        IN      VARCHAR2
  ,p_copy_parties                IN      VARCHAR2
--  ,p_copy_contacts               IN      VARCHAR2 := fnd_api.g_true
  ,p_copy_accounts               IN      VARCHAR2
  ,p_copy_asset_assignments      IN      VARCHAR2
  ,p_copy_pricing_attribs        IN      VARCHAR2
  ,p_txn_rec                     IN OUT  NOCOPY csi_datastructures_pub.transaction_rec
  ,x_new_instance_tbl            OUT     NOCOPY csi_datastructures_pub.instance_tbl
  ,x_return_status               OUT     NOCOPY VARCHAR2
  ,x_msg_count                   OUT     NOCOPY NUMBER
  ,x_msg_data                    OUT     NOCOPY VARCHAR2
 )
IS
  CURSOR c1 is
    SELECT serial_number_control_code
    FROM   mtl_system_items
    WHERE  inventory_item_id = p_source_instance_rec.inventory_item_id
    AND    organization_id   = p_source_instance_rec.vld_organization_id
    AND    nvl(comms_nl_trackable_flag, 'N') = 'Y'
    AND    enabled_flag = 'Y'
    AND    nvl (start_date_active, sysdate) <= sysdate
    AND    nvl (end_date_active, sysdate+1) > sysdate;

    l_api_name              CONSTANT VARCHAR2(30)   := 'SPLIT_ITEM_INSTANCE_LINES';
    l_api_version           CONSTANT NUMBER         := 1.0;
    l_debug_level           NUMBER;
    l_serialized            NUMBER;
    l_return_value          BOOLEAN;
    l_object_version_number NUMBER;
    l_quantity              NUMBER;
    l_instance_id_lst       csi_datastructures_pub.id_tbl;
    l_new_instance_rec      csi_datastructures_pub.instance_rec;
    l_new_instance_tbl      csi_datastructures_pub.instance_tbl;
    l_count                 NUMBER;
    l_msg_data              VARCHAR2(2000);
    l_msg_index             NUMBER;
    l_msg_count             NUMBER;
    x_msg_index_out         NUMBER;
    l_dummy                 NUMBER;
    l_temp_qty              NUMBER;
    l_old_qty               NUMBER;
    l_item_attribute_tbl    csi_item_instance_pvt.item_attribute_tbl;
    l_location_tbl          csi_item_instance_pvt.location_tbl;
    l_generic_id_tbl        csi_item_instance_pvt.generic_id_tbl;
    l_lookup_tbl            csi_item_instance_pvt.lookup_tbl;
    l_ins_count_rec         csi_item_instance_pvt.ins_count_rec;
    l_relationship_tbl      csi_datastructures_pub.ii_relationship_tbl;
    --
    px_oks_txn_inst_tbl     oks_ibint_pub.txn_instance_tbl;
    px_child_inst_tbl       csi_item_instance_grp.child_inst_tbl;
    l_batch_type            VARCHAR2(50);
    l_batch_id              NUMBER;
    --
BEGIN

    -- Standard Start of API savepoint
       SAVEPOINT  split_item_instance_lines_pvt;

    -- Standard call to check for call compatibility.
       IF NOT FND_API.Compatible_API_Call (l_api_version,
                                           p_api_version,
                                           l_api_name,
                                           G_PKG_NAME  )
       THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
       END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
       IF FND_API.to_Boolean( p_init_msg_list ) THEN
             FND_MSG_PUB.initialize;
       END IF;

    -- Initialize API return status to success
       x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option debug_level for debug message reporting
        l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

       --  If debug_level = 1 then dump the procedure name
         IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line ( 'split_item_instance_lines_pvt');
         END IF;

       -- If the debug level = 2 then dump all the parameters values.
         IF (l_debug_level > 1) THEN
               csi_gen_utility_pvt.put_line ('split_item_instance_lines_pvt' ||
                                                   p_api_version      ||'-'||
                                                   p_commit           ||'-'||
                                                   p_init_msg_list          );
               -- Dump the records in the log file
               csi_gen_utility_pvt.dump_instance_rec(p_source_instance_rec);
               csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
         END IF;

       -- Start API body

--check for the required parameters
         CSI_Item_Instance_vld_pvt.Check_Reqd_Param_Num
             (    p_source_instance_rec.INSTANCE_ID  ,
                ' p_source_instance_rec.INSTANCE_ID ',
                  l_api_name
             );
--validation for serialized or not

      IF   p_source_instance_rec.location_type_code = 'INVENTORY'
        OR p_source_instance_rec.location_type_code = 'WIP'
        OR p_source_instance_rec.location_type_code = 'PROJECT'
      THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_CANNOT_SPLIT');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
      END IF;

      BEGIN
          SELECT 1
          INTO  l_dummy
          FROM  csi_i_assets
          WHERE instance_id =p_source_instance_rec.instance_id;

          FND_MESSAGE.SET_NAME('CSI','CSI_CANNOT_SPLIT');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
      EXCEPTION
         WHEN OTHERS THEN
           NULL;
      END;

      OPEN C1;
      FETCH C1 into l_serialized;
      IF C1%FOUND THEN
     -- IF nvl(l_serialized,0) IN (2,5,6) then
        IF csi_Item_Instance_Vld_pvt.Is_treated_serialized
                                ( p_serial_control_code => l_serialized
                                 ,p_location_type_code  => p_source_instance_rec.location_type_code
                                 ,p_transaction_type_id => p_txn_rec.transaction_type_id
                                 ) -- Added by sk on 09/13/01
        THEN
            l_return_value := FALSE;
                FND_MESSAGE.SET_NAME('CSI','CSI_API_CANNOT_BE_SERIALIZED');
                FND_MESSAGE.SET_TOKEN('SERIAL_NUMBER', 'serial_number');
                FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
        END IF;
      END IF;
      CLOSE C1;

--get the quantity from the csi_item_instances for the instance_id passed
    BEGIN
          SELECT quantity
          INTO   l_quantity
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
    EXCEPTION
         WHEN NO_DATA_FOUND THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_QUANITY');
            FND_MSG_PUB.Add;
                   RAISE FND_API.G_EXC_ERROR;
    END;
    -- Added by sk for bug 2186683
    IF p_source_instance_rec.vld_organization_id IS NULL OR
       p_source_instance_rec.vld_organization_id = fnd_api.g_miss_num
    THEN
       BEGIN
          SELECT last_vld_organization_id
          INTO   p_source_instance_rec.vld_organization_id
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
       EXCEPTION
         WHEN OTHERS THEN
            NULL;
       END;
    END IF;
    -- End addition by sk for bug 2186683
    l_temp_qty:=0;
 IF l_quantity > 1 THEN
    FOR i in 1..(l_quantity - 1) LOOP

    l_temp_qty  :=l_temp_qty+1;
    l_old_qty :=l_quantity-l_temp_qty; -- This will be our split old quantity.
    p_source_instance_rec.quantity := 1;
    l_new_instance_tbl.delete;
--call the copy instance api to create a new record with 'p_quantity2')
     csi_item_instance_pvt.copy_item_instance
           (
             p_api_version                 => p_api_version
            ,p_commit                      => fnd_api.g_false
            ,p_init_msg_list               => p_init_msg_list
            ,p_validation_level            => p_validation_level
            ,p_source_instance_rec         => p_source_instance_rec
            ,p_copy_ext_attribs            => p_copy_ext_attribs
            ,p_copy_org_assignments        => p_copy_org_assignments
            ,p_copy_parties                => p_copy_parties
            ,p_copy_contacts               => fnd_api.g_true
            ,p_copy_accounts               => p_copy_accounts
            ,p_copy_asset_assignments      => p_copy_asset_assignments
            ,p_copy_pricing_attribs        => p_copy_pricing_attribs
            ,p_copy_inst_children          => fnd_api.g_true
            ,p_call_from_split             => fnd_api.g_true
            ,p_txn_rec                     => p_txn_rec
            ,x_new_instance_tbl            => l_new_instance_tbl
            ,x_return_status               => x_return_status
            ,x_msg_count                   => x_msg_count
            ,x_msg_data                    => x_msg_data
           );

      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
--         x_error_message :=  'copy_item_instance failed '  ;
          FOR i in 1..x_msg_Count LOOP
            FND_MSG_PUB.Get(p_msg_index     => i,
                            p_encoded       => 'F',
                            p_data          => x_msg_data,
                            p_msg_index_out => x_msg_index_out );
         End LOOP;
         RAISE fnd_api.g_exc_error;
      END IF;
-- Start addition for bug 2823122
    IF l_new_instance_tbl(1).instance_usage_code='IN_RELATIONSHIP'
    THEN
       IF l_relationship_tbl.COUNT=0
       THEN
         BEGIN
          SELECT object_id
                ,relationship_type_code
                ,mandatory_flag
                ,context
                ,sysdate
                ,active_end_date
                ,position_reference
                ,display_order
                ,attribute1
                ,attribute2
                ,attribute3
                ,attribute4
                ,attribute5
                ,attribute6
                ,attribute7
                ,attribute8
                ,attribute9
                ,attribute10
                ,attribute11
                ,attribute12
                ,attribute13
                ,attribute14
                ,attribute15
          INTO   l_relationship_tbl(1).object_id
                ,l_relationship_tbl(1).relationship_type_code
                ,l_relationship_tbl(1).mandatory_flag
                ,l_relationship_tbl(1).context
                ,l_relationship_tbl(1).active_start_date
                ,l_relationship_tbl(1).active_end_date
                ,l_relationship_tbl(1).position_reference
                ,l_relationship_tbl(1).display_order
                ,l_relationship_tbl(1).attribute1
                ,l_relationship_tbl(1).attribute2
                ,l_relationship_tbl(1).attribute3
                ,l_relationship_tbl(1).attribute4
                ,l_relationship_tbl(1).attribute5
                ,l_relationship_tbl(1).attribute6
                ,l_relationship_tbl(1).attribute7
                ,l_relationship_tbl(1).attribute8
                ,l_relationship_tbl(1).attribute9
                ,l_relationship_tbl(1).attribute10
                ,l_relationship_tbl(1).attribute11
                ,l_relationship_tbl(1).attribute12
                ,l_relationship_tbl(1).attribute13
                ,l_relationship_tbl(1).attribute14
                ,l_relationship_tbl(1).attribute15
          FROM  csi_ii_relationships
          WHERE subject_id=p_source_instance_rec.instance_id
          AND   relationship_type_code='COMPONENT-OF'
          AND   (SYSDATE BETWEEN NVL(active_start_date, SYSDATE) AND NVL(active_end_date, SYSDATE));
         EXCEPTION
           WHEN OTHERS THEN
             NULL;
         END;
       END IF;

        IF l_relationship_tbl(1).object_id  IS NOT NULL
         AND l_relationship_tbl(1).object_id<>fnd_api.g_miss_num
        THEN
          l_relationship_tbl(1).relationship_id:=fnd_api.g_miss_num;
          l_relationship_tbl(1).subject_id:=l_new_instance_tbl(1).instance_id;
          csi_ii_relationships_pub.create_relationship(
            p_api_version      => 1.0,
            p_commit           => fnd_api.g_false,
            p_init_msg_list    => fnd_api.g_true,
            p_validation_level => fnd_api.g_valid_level_full,
            p_relationship_tbl => l_relationship_tbl,
            p_txn_rec          => p_txn_rec,
            x_return_status    => x_return_status,
            x_msg_count        => x_msg_count,
            x_msg_data         => x_msg_data);
           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
               FOR i in 1..x_msg_Count LOOP
                   FND_MSG_PUB.Get(p_msg_index     => i,
                                   p_encoded       => 'F',
                                   p_data          => x_msg_data,
                                   p_msg_index_out => x_msg_index_out );
               END LOOP;
              RAISE fnd_api.g_exc_error;
           END IF;
        END IF;
    END IF;
-- End addition for bug 2823122
         x_new_instance_tbl(i) := l_new_instance_tbl(1);

    -- Following code is added for fixing bug 2139782.
         BEGIN
            -- For each of the record contracts call will be made and px_oks_txn_inst_tbl will be refreshed
            px_oks_txn_inst_tbl.DELETE;
            --
            csi_item_instance_pvt.call_to_contracts
             ( p_transaction_type   =>   'SPL'
              ,p_instance_id        =>   p_source_instance_rec.instance_id
              ,p_new_instance_id    =>   l_new_instance_tbl(1).instance_id
              ,p_vld_org_id         =>   p_source_instance_rec.vld_organization_id
              ,p_quantity           =>   l_old_qty
              ,p_party_account_id1  =>   NULL
              ,p_party_account_id2  =>   NULL
              ,p_transaction_date   =>   p_txn_rec.transaction_date -- For 3483763
              ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date -- For 3483763
	      ,p_txn_type_id        => p_txn_rec.transaction_type_id -- added for  BUG  5752271
              ,p_oks_txn_inst_tbl   =>   px_oks_txn_inst_tbl
              ,x_return_status      =>   x_return_status
              ,x_msg_count          =>   x_msg_count
              ,x_msg_data           =>   x_msg_data
              );

             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  RAISE FND_API.G_EXC_ERROR;
             END IF;
             --
	     IF px_oks_txn_inst_tbl.count > 0 THEN
		csi_gen_utility_pvt.dump_oks_txn_inst_tbl(px_oks_txn_inst_tbl);
		csi_gen_utility_pvt.put_line('Calling OKS Core API...');
		--
		IF p_txn_rec.transaction_type_id = 3 THEN
		   l_batch_id := p_txn_rec.source_header_ref_id;
		   l_batch_type := p_txn_rec.source_group_ref;
		ELSE
		   l_batch_id := NULL;
		   l_batch_type := NULL;
		END IF;
		--
                UPDATE CSI_TRANSACTIONS
                set contracts_invoked = 'Y'
                where transaction_id = p_txn_rec.transaction_id;
                --
		OKS_IBINT_PUB.IB_interface
		   (
		     P_Api_Version           =>  1.0,
		     P_init_msg_list         =>  p_init_msg_list,
		     P_single_txn_date_flag  =>  'Y',
		     P_Batch_type            =>  l_batch_type,
		     P_Batch_ID              =>  l_batch_id,
		     P_OKS_Txn_Inst_tbl      =>  px_oks_txn_inst_tbl,
		     x_return_status         =>  x_return_status,
		     x_msg_count             =>  x_msg_count,
		     x_msg_data              =>  x_msg_data
		  );
		--
		IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
		   l_msg_index := 1;
		   l_msg_count := x_msg_count;
		   WHILE l_msg_count > 0 LOOP
		      x_msg_data := FND_MSG_PUB.GET
			      (  l_msg_index,
				 FND_API.G_FALSE        );
		      csi_gen_utility_pvt.put_line( 'Error from OKS_IBINT_PUB.IB_interface..');
		      csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
		      l_msg_index := l_msg_index + 1;
		      l_msg_count := l_msg_count - 1;
		   END LOOP;
		   RAISE FND_API.G_EXC_ERROR;
		END IF;
	     END IF;
         EXCEPTION
           WHEN FND_API.G_EXC_ERROR THEN
             RAISE FND_API.G_EXC_ERROR;
         END;
    -- End of code addition for fixing bug 2139782.
   END LOOP;
 Else   --l_quantity is <= 1

            FND_MESSAGE.SET_NAME('CSI','CSI_API_QUANTITY_NOT_VALID');
            FND_MESSAGE.SET_TOKEN('QUANTITY', l_quantity);
            FND_MSG_PUB.ADD;
--         RAISE fnd_api.g_exc_error;
 End If;

--update the existing record with 'p_quantity1')
    BEGIN
          SELECT object_version_number
          INTO   l_object_version_number
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
    EXCEPTION
         WHEN NO_DATA_FOUND THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_OBJ_NUM');
            FND_MSG_PUB.ADD;
                   RAISE FND_API.G_EXC_ERROR;
    END;
    --
    px_oks_txn_inst_tbl.DELETE;
    --
    l_new_instance_rec.instance_id           := p_source_instance_rec.instance_id;
    l_new_instance_rec.quantity              := 1;
    l_new_instance_rec.object_version_number := l_object_version_number;
    l_new_instance_rec.vld_organization_id   := p_source_instance_rec.vld_organization_id;

--call the update api
    update_item_instance
           (
            p_api_version                => p_api_version
           ,p_commit                     => fnd_api.g_false
           ,p_init_msg_list              => p_init_msg_list
           ,p_validation_level           => p_validation_level
           ,p_instance_rec               => l_new_instance_rec
           ,p_txn_rec                    => p_txn_rec
           ,x_instance_id_lst            => l_instance_id_lst
           ,x_return_status              => x_return_status
           ,x_msg_count                  => x_msg_count
           ,x_msg_data                   => x_msg_data
           ,p_item_attribute_tbl         => l_item_attribute_tbl
           ,p_location_tbl               => l_location_tbl
           ,p_generic_id_tbl             => l_generic_id_tbl
           ,p_lookup_tbl                 => l_lookup_tbl
           ,p_ins_count_rec              => l_ins_count_rec
           ,p_oks_txn_inst_tbl           => px_oks_txn_inst_tbl
           ,p_child_inst_tbl             => px_child_inst_tbl
           );

      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
         FOR i in 1..x_msg_Count LOOP
            FND_MSG_PUB.Get(p_msg_index     => i,
                            p_encoded       => 'F',
                            p_data          => x_msg_data,
                            p_msg_index_out => x_msg_index_out );
          End LOOP;
         RAISE fnd_api.g_exc_error;
      END IF;


      l_count := x_new_instance_tbl.count ;

      x_new_instance_tbl(l_count+1).instance_id := l_new_instance_rec.instance_id;

--               x_new_instance_tbl(i+1) := l_instance_id_lst(1);

      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
           COMMIT WORK;
      END IF;

       -- End disable trace

      -- Standard call to get message count and IF count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count   =>   x_msg_count ,
             p_data    =>   x_msg_data
            );

EXCEPTION

     WHEN FND_API.G_EXC_ERROR THEN
          ROLLBACK TO split_item_instance_lines_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                  p_data    =>  x_msg_data
                );
     WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            ROLLBACK TO split_item_instance_lines_pvt;
            FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count   =>  x_msg_count,
                  p_data    =>  x_msg_data
                );
     WHEN OTHERS THEN
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
          ROLLBACK TO split_item_instance_lines_pvt;
            IF    FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                  FND_MSG_PUB.Add_Exc_Msg
                  ( G_PKG_NAME ,
                    l_api_name
                  );
            END IF;
            FND_MSG_PUB.Count_And_Get
                  ( p_encoded => FND_API.G_FALSE,
                 p_count  =>  x_msg_count,
                    p_data   =>  x_msg_data
                  );

END Split_Item_Instance_lines;


/*----------------------------------------------------------*/
/* Procedure name:  Initialize_ver_rec_no_dump              */
/* Description : This procedure initializes the first       */
/*                 record from the history                  */
/*----------------------------------------------------------*/

PROCEDURE Initialize_ver_rec_no_dump
(
  x_version_label_rec      IN OUT NOCOPY csi_datastructures_pub.version_label_rec,
  p_version_label_id       IN NUMBER ,
  x_no_dump                IN OUT NOCOPY DATE
  ) IS

CURSOR Int_no_dump(p_ver_label_id IN NUMBER ) IS
SELECT
    CREATION_DATE                   ,
    NEW_VERSION_LABEL               ,
    NEW_DESCRIPTION                 ,
    NEW_DATE_TIME_STAMP             ,
    NEW_ACTIVE_START_DATE           ,
    NEW_ACTIVE_END_DATE             ,
    NEW_CONTEXT                     ,
    NEW_ATTRIBUTE1                  ,
    NEW_ATTRIBUTE2                  ,
    NEW_ATTRIBUTE3                  ,
    NEW_ATTRIBUTE4                  ,
    NEW_ATTRIBUTE5                  ,
    NEW_ATTRIBUTE6                  ,
    NEW_ATTRIBUTE7                  ,
    NEW_ATTRIBUTE8                  ,
    NEW_ATTRIBUTE9                  ,
    NEW_ATTRIBUTE10                 ,
    NEW_ATTRIBUTE11                 ,
    NEW_ATTRIBUTE12                 ,
    NEW_ATTRIBUTE13                 ,
    NEW_ATTRIBUTE14                 ,
    NEW_ATTRIBUTE15
 FROM CSI_I_VERSION_LABELS_H
WHERE version_label_id = p_ver_label_id
ORDER BY creation_date;


BEGIN

  FOR C1 IN Int_no_dump(p_version_label_id  ) LOOP
   IF Int_no_dump%ROWCOUNT = 1 THEN
     x_no_dump                              := C1.creation_date;
     x_version_label_rec.VERSION_LABEL      := C1.NEW_VERSION_LABEL;
     x_version_label_rec.DESCRIPTION        := C1.NEW_DESCRIPTION;
     x_version_label_rec.DATE_TIME_STAMP    := C1.NEW_DATE_TIME_STAMP;
     x_version_label_rec.ACTIVE_START_DATE  := C1.NEW_ACTIVE_START_DATE;
     x_version_label_rec.ACTIVE_END_DATE    := C1.NEW_ACTIVE_END_DATE;
     x_version_label_rec.CONTEXT            := C1.NEW_CONTEXT;
     x_version_label_rec.ATTRIBUTE1         := C1.NEW_ATTRIBUTE1;
     x_version_label_rec.ATTRIBUTE2         := C1.NEW_ATTRIBUTE2;
     x_version_label_rec.ATTRIBUTE3         := C1.NEW_ATTRIBUTE3;
     x_version_label_rec.ATTRIBUTE4         := C1.NEW_ATTRIBUTE4;
     x_version_label_rec.ATTRIBUTE5         := C1.NEW_ATTRIBUTE5;
     x_version_label_rec.ATTRIBUTE6         := C1.NEW_ATTRIBUTE6;
     x_version_label_rec.ATTRIBUTE7         := C1.NEW_ATTRIBUTE7;
     x_version_label_rec.ATTRIBUTE8         := C1.NEW_ATTRIBUTE8;
     x_version_label_rec.ATTRIBUTE9         := C1.NEW_ATTRIBUTE9;
     x_version_label_rec.ATTRIBUTE10        := C1.NEW_ATTRIBUTE10;
     x_version_label_rec.ATTRIBUTE11        := C1.NEW_ATTRIBUTE11;
     x_version_label_rec.ATTRIBUTE12        := C1.NEW_ATTRIBUTE12;
     x_version_label_rec.ATTRIBUTE13        := C1.NEW_ATTRIBUTE13;
     x_version_label_rec.ATTRIBUTE14        := C1.NEW_ATTRIBUTE14;
     x_version_label_rec.ATTRIBUTE15        := C1.NEW_ATTRIBUTE15;
   ELSE
     EXIT;
   END IF;

  END LOOP;
END Initialize_ver_rec_no_dump;


/*----------------------------------------------------------*/
/* Procedure name:  Initialize_ver_rec                      */
/* Description : This procudure recontructs the record      */
/*                 from the history                         */
/*----------------------------------------------------------*/

PROCEDURE Initialize_ver_rec
(
  x_version_label_rec           IN OUT NOCOPY csi_datastructures_pub.version_label_rec,
  p_version_label_hist_id       IN NUMBER ,
  x_nearest_full_dump           IN OUT NOCOPY DATE
  ) IS

CURSOR Int_nearest_full_dump(p_ver_label_hist_id IN NUMBER ) IS
SELECT
    CREATION_DATE                   ,
    NEW_VERSION_LABEL               ,
    NEW_DESCRIPTION                 ,
    NEW_DATE_TIME_STAMP             ,
    NEW_ACTIVE_START_DATE           ,
    NEW_ACTIVE_END_DATE             ,
    NEW_CONTEXT                     ,
    NEW_ATTRIBUTE1                  ,
    NEW_ATTRIBUTE2                  ,
    NEW_ATTRIBUTE3                  ,
    NEW_ATTRIBUTE4                  ,
    NEW_ATTRIBUTE5                  ,
    NEW_ATTRIBUTE6                  ,
    NEW_ATTRIBUTE7                  ,
    NEW_ATTRIBUTE8                  ,
    NEW_ATTRIBUTE9                  ,
    NEW_ATTRIBUTE10                 ,
    NEW_ATTRIBUTE11                 ,
    NEW_ATTRIBUTE12                 ,
    NEW_ATTRIBUTE13                 ,
    NEW_ATTRIBUTE14                 ,
    NEW_ATTRIBUTE15
 FROM CSI_I_VERSION_LABELS_H
WHERE version_label_history_id = p_ver_label_hist_id
  and  full_dump_flag = 'Y' ;

BEGIN

  FOR C1 IN Int_nearest_full_dump(p_version_label_hist_id  ) LOOP
     x_nearest_full_dump                    := C1.creation_date;
     x_version_label_rec.VERSION_LABEL      := C1.NEW_VERSION_LABEL;
     x_version_label_rec.DESCRIPTION        := C1.NEW_DESCRIPTION;
     x_version_label_rec.DATE_TIME_STAMP    := C1.NEW_DATE_TIME_STAMP;
     x_version_label_rec.ACTIVE_START_DATE  := C1.NEW_ACTIVE_START_DATE;
     x_version_label_rec.ACTIVE_END_DATE    := C1.NEW_ACTIVE_END_DATE;
     x_version_label_rec.CONTEXT            := C1.NEW_CONTEXT;
     x_version_label_rec.ATTRIBUTE1         := C1.NEW_ATTRIBUTE1;
     x_version_label_rec.ATTRIBUTE2         := C1.NEW_ATTRIBUTE2;
     x_version_label_rec.ATTRIBUTE3         := C1.NEW_ATTRIBUTE3;
     x_version_label_rec.ATTRIBUTE4         := C1.NEW_ATTRIBUTE4;
     x_version_label_rec.ATTRIBUTE5         := C1.NEW_ATTRIBUTE5;
     x_version_label_rec.ATTRIBUTE6         := C1.NEW_ATTRIBUTE6;
     x_version_label_rec.ATTRIBUTE7         := C1.NEW_ATTRIBUTE7;
     x_version_label_rec.ATTRIBUTE8         := C1.NEW_ATTRIBUTE8;
     x_version_label_rec.ATTRIBUTE9         := C1.NEW_ATTRIBUTE9;
     x_version_label_rec.ATTRIBUTE10        := C1.NEW_ATTRIBUTE10;
     x_version_label_rec.ATTRIBUTE11        := C1.NEW_ATTRIBUTE11;
     x_version_label_rec.ATTRIBUTE12        := C1.NEW_ATTRIBUTE12;
     x_version_label_rec.ATTRIBUTE13        := C1.NEW_ATTRIBUTE13;
     x_version_label_rec.ATTRIBUTE14        := C1.NEW_ATTRIBUTE14;
     x_version_label_rec.ATTRIBUTE15        := C1.NEW_ATTRIBUTE15;

  END LOOP;
END Initialize_ver_rec ;

/*----------------------------------------------------------*/
/* Procedure name:  Construct_ver_from_hist                 */
/* Description : This procudure recontructs the record      */
/*                 from the history                         */
/*----------------------------------------------------------*/

PROCEDURE Construct_ver_from_hist
(
  x_version_label_tbl      IN OUT NOCOPY csi_datastructures_pub.version_label_tbl,
  p_time_stamp             IN DATE
   ) IS

 l_nearest_full_dump      DATE := p_time_stamp;
 l_ver_label_hist_id      NUMBER;

CURSOR get_nearest_full_dump(p_ver_label_id IN NUMBER ,p_time IN DATE) IS
SELECT
  MAX(version_label_history_id)
FROM CSI_I_VERSION_LABELS_H
WHERE creation_date <= p_time
  and version_label_id = p_ver_label_id
  and  full_dump_flag = 'Y' ;

CURSOR get_ver_label_hist(p_ver_label_id IN NUMBER ,
                         p_nearest_full_dump IN DATE,
                         p_time IN DATE ) IS
SELECT
    OLD_VERSION_LABEL               ,
    NEW_VERSION_LABEL               ,
    OLD_DESCRIPTION                 ,
    NEW_DESCRIPTION                 ,
    OLD_DATE_TIME_STAMP             ,
    NEW_DATE_TIME_STAMP             ,
    OLD_ACTIVE_START_DATE           ,
    NEW_ACTIVE_START_DATE           ,
    OLD_ACTIVE_END_DATE             ,
    NEW_ACTIVE_END_DATE             ,
    OLD_CONTEXT                     ,
    NEW_CONTEXT                     ,
    OLD_ATTRIBUTE1                  ,
    NEW_ATTRIBUTE1                  ,
    OLD_ATTRIBUTE2                  ,
    NEW_ATTRIBUTE2                  ,
    OLD_ATTRIBUTE3                  ,
    NEW_ATTRIBUTE3                  ,
    OLD_ATTRIBUTE4                  ,
    NEW_ATTRIBUTE4                  ,
    OLD_ATTRIBUTE5                  ,
    NEW_ATTRIBUTE5                  ,
    OLD_ATTRIBUTE6                  ,
    NEW_ATTRIBUTE6                  ,
    OLD_ATTRIBUTE7                  ,
    NEW_ATTRIBUTE7                  ,
    OLD_ATTRIBUTE8                  ,
    NEW_ATTRIBUTE8                  ,
    OLD_ATTRIBUTE9                  ,
    NEW_ATTRIBUTE9                  ,
    OLD_ATTRIBUTE10                 ,
    NEW_ATTRIBUTE10                 ,
    OLD_ATTRIBUTE11                 ,
    NEW_ATTRIBUTE11                 ,
    OLD_ATTRIBUTE12                 ,
    NEW_ATTRIBUTE12                 ,
    OLD_ATTRIBUTE13                 ,
    NEW_ATTRIBUTE13                 ,
    OLD_ATTRIBUTE14                 ,
    NEW_ATTRIBUTE14                 ,
    OLD_ATTRIBUTE15                 ,
    NEW_ATTRIBUTE15
 FROM CSI_I_VERSION_LABELS_H
WHERE creation_date <= p_time
  and creation_date >= p_nearest_full_dump
  and version_label_id = p_ver_label_id
  ORDER BY creation_date;

l_time_stamp  DATE := p_time_stamp;

BEGIN

FOR i IN x_version_label_tbl.FIRST..x_version_label_tbl.LAST LOOP

  OPEN get_nearest_full_dump(x_version_label_tbl(i).version_label_id, p_time_stamp);
  FETCH get_nearest_full_dump INTO l_ver_label_hist_id;
  CLOSE get_nearest_full_dump;

  IF l_ver_label_hist_id IS NOT NULL THEN
     Initialize_ver_rec( x_version_label_tbl(i), l_ver_label_hist_id ,l_nearest_full_dump);
  ELSE
     Initialize_ver_rec_no_dump( x_version_label_tbl(i), x_version_label_tbl(i).version_label_id, l_time_stamp);

            l_nearest_full_dump :=  l_time_stamp;
         -- If the user chooses a date before the creation date of the instance
         -- then raise an error
           IF p_time_stamp < l_time_stamp THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_H_DATE_BEFORE_CRE_DATE');
               FND_MESSAGE.SET_TOKEN('CREATION_DATE',to_char(l_time_stamp, 'DD-MON-YYYY HH24:MI:SS'));
               FND_MESSAGE.SET_TOKEN('USER_DATE',to_char(p_time_stamp, 'DD-MON-YYYY HH24:MI:SS'));
               FND_MSG_PUB.Add;
               RAISE FND_API.G_EXC_ERROR;
           END IF;

  END IF;

  FOR C2 IN get_ver_label_hist(x_version_label_tbl(i).version_label_id ,l_nearest_full_dump,p_time_stamp ) LOOP

        IF (C2.OLD_VERSION_LABEL IS NULL AND C2.NEW_VERSION_LABEL IS NOT NULL)
        OR (C2.OLD_VERSION_LABEL IS NOT NULL AND C2.NEW_VERSION_LABEL IS NULL)
        OR (C2.OLD_VERSION_LABEL <> C2.NEW_VERSION_LABEL) THEN
             x_version_label_tbl(i).VERSION_LABEL := C2.NEW_VERSION_LABEL;
        END IF;

        IF (C2.OLD_DESCRIPTION IS NULL AND C2.NEW_DESCRIPTION IS NOT NULL)
        OR (C2.OLD_DESCRIPTION IS NOT NULL AND C2.NEW_DESCRIPTION IS NULL)
        OR (C2.OLD_DESCRIPTION <> C2.NEW_DESCRIPTION) THEN
             x_version_label_tbl(i).DESCRIPTION := C2.NEW_DESCRIPTION;
        END IF;

        IF (C2.OLD_DATE_TIME_STAMP IS NULL AND C2.NEW_DATE_TIME_STAMP IS NOT NULL)
        OR (C2.OLD_DATE_TIME_STAMP IS NOT NULL AND C2.NEW_DATE_TIME_STAMP IS NULL)
        OR (C2.OLD_DATE_TIME_STAMP <> C2.NEW_DATE_TIME_STAMP) THEN
             x_version_label_tbl(i).DATE_TIME_STAMP := C2.NEW_DATE_TIME_STAMP;
        END IF;

        IF (C2.OLD_ACTIVE_START_DATE IS NULL AND C2.NEW_ACTIVE_START_DATE IS NOT NULL)
        OR (C2.OLD_ACTIVE_START_DATE IS NOT NULL AND C2.NEW_ACTIVE_START_DATE IS NULL)
        OR (C2.OLD_ACTIVE_START_DATE <> C2.NEW_ACTIVE_START_DATE) THEN
             x_version_label_tbl(i).ACTIVE_START_DATE := C2.NEW_ACTIVE_START_DATE;
        END IF;


        IF (C2.OLD_ACTIVE_END_DATE IS NULL AND C2.NEW_ACTIVE_END_DATE IS NOT NULL)
        OR (C2.OLD_ACTIVE_END_DATE IS NOT NULL AND C2.NEW_ACTIVE_END_DATE IS NULL)
        OR (C2.OLD_ACTIVE_END_DATE <> C2.NEW_ACTIVE_END_DATE) THEN
             x_version_label_tbl(i).ACTIVE_END_DATE := C2.NEW_ACTIVE_END_DATE;
        END IF;


        IF (C2.OLD_CONTEXT IS NULL AND C2.NEW_CONTEXT IS NOT NULL)
        OR (C2.OLD_CONTEXT IS NOT NULL AND C2.NEW_CONTEXT IS NULL)
        OR (C2.OLD_CONTEXT <> C2.NEW_CONTEXT) THEN
             x_version_label_tbl(i).CONTEXT := C2.NEW_CONTEXT;
        END IF;

        IF (C2.OLD_ATTRIBUTE1 IS NULL AND C2.NEW_ATTRIBUTE1 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE1 IS NOT NULL AND C2.NEW_ATTRIBUTE1 IS NULL)
        OR (C2.OLD_ATTRIBUTE1 <> C2.NEW_ATTRIBUTE1) THEN
             x_version_label_tbl(i).ATTRIBUTE1 := C2.NEW_ATTRIBUTE1;
        END IF;

        IF (C2.OLD_ATTRIBUTE2 IS NULL AND C2.NEW_ATTRIBUTE2 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE2 IS NOT NULL AND C2.NEW_ATTRIBUTE2 IS NULL)
        OR (C2.OLD_ATTRIBUTE2 <> C2.NEW_ATTRIBUTE2) THEN
             x_version_label_tbl(i).ATTRIBUTE2 := C2.NEW_ATTRIBUTE2;
        END IF;

        IF (C2.OLD_ATTRIBUTE3 IS NULL AND C2.NEW_ATTRIBUTE3 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE3 IS NOT NULL AND C2.NEW_ATTRIBUTE3 IS NULL)
        OR (C2.OLD_ATTRIBUTE3 <> C2.NEW_ATTRIBUTE3) THEN
             x_version_label_tbl(i).ATTRIBUTE3 := C2.NEW_ATTRIBUTE3;
        END IF;

        IF (C2.OLD_ATTRIBUTE4 IS NULL AND C2.NEW_ATTRIBUTE4 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE4 IS NOT NULL AND C2.NEW_ATTRIBUTE4 IS NULL)
        OR (C2.OLD_ATTRIBUTE4 <> C2.NEW_ATTRIBUTE4) THEN
             x_version_label_tbl(i).ATTRIBUTE4 := C2.NEW_ATTRIBUTE4;
        END IF;


        IF (C2.OLD_ATTRIBUTE5 IS NULL AND C2.NEW_ATTRIBUTE5 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE5 IS NOT NULL AND C2.NEW_ATTRIBUTE5 IS NULL)
        OR (C2.OLD_ATTRIBUTE5 <> C2.NEW_ATTRIBUTE5) THEN
             x_version_label_tbl(i).ATTRIBUTE5 := C2.NEW_ATTRIBUTE5;
        END IF;


        IF (C2.OLD_ATTRIBUTE6 IS NULL AND C2.NEW_ATTRIBUTE6 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE6 IS NOT NULL AND C2.NEW_ATTRIBUTE6 IS NULL)
        OR (C2.OLD_ATTRIBUTE6 <> C2.NEW_ATTRIBUTE6) THEN
             x_version_label_tbl(i).ATTRIBUTE6 := C2.NEW_ATTRIBUTE6;
        END IF;

        IF (C2.OLD_ATTRIBUTE7 IS NULL AND C2.NEW_ATTRIBUTE7 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE7 IS NOT NULL AND C2.NEW_ATTRIBUTE7 IS NULL)
        OR (C2.OLD_ATTRIBUTE7 <> C2.NEW_ATTRIBUTE7) THEN
             x_version_label_tbl(i).ATTRIBUTE7 := C2.NEW_ATTRIBUTE7;
        END IF;

        IF (C2.OLD_ATTRIBUTE8 IS NULL AND C2.NEW_ATTRIBUTE8 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE8 IS NOT NULL AND C2.NEW_ATTRIBUTE8 IS NULL)
        OR (C2.OLD_ATTRIBUTE8 <> C2.NEW_ATTRIBUTE8) THEN
             x_version_label_tbl(i).ATTRIBUTE8 := C2.NEW_ATTRIBUTE8;
        END IF;

        IF (C2.OLD_ATTRIBUTE9 IS NULL AND C2.NEW_ATTRIBUTE9 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE9 IS NOT NULL AND C2.NEW_ATTRIBUTE9 IS NULL)
        OR (C2.OLD_ATTRIBUTE9 <> C2.NEW_ATTRIBUTE9) THEN
             x_version_label_tbl(i).ATTRIBUTE3 := C2.NEW_ATTRIBUTE3;
        END IF;


        IF (C2.OLD_ATTRIBUTE10 IS NULL AND C2.NEW_ATTRIBUTE10 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE10 IS NOT NULL AND C2.NEW_ATTRIBUTE10 IS NULL)
        OR (C2.OLD_ATTRIBUTE10 <> C2.NEW_ATTRIBUTE10) THEN
             x_version_label_tbl(i).ATTRIBUTE10 := C2.NEW_ATTRIBUTE10;
        END IF;



        IF (C2.OLD_ATTRIBUTE11 IS NULL AND C2.NEW_ATTRIBUTE11 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE11 IS NOT NULL AND C2.NEW_ATTRIBUTE11 IS NULL)
        OR (C2.OLD_ATTRIBUTE11 <> C2.NEW_ATTRIBUTE11) THEN
             x_version_label_tbl(i).ATTRIBUTE11 := C2.NEW_ATTRIBUTE11;
        END IF;

        IF (C2.OLD_ATTRIBUTE12 IS NULL AND C2.NEW_ATTRIBUTE12 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE12 IS NOT NULL AND C2.NEW_ATTRIBUTE12 IS NULL)
        OR (C2.OLD_ATTRIBUTE12 <> C2.NEW_ATTRIBUTE12) THEN
             x_version_label_tbl(i).ATTRIBUTE12 := C2.NEW_ATTRIBUTE12;
        END IF;


        IF (C2.OLD_ATTRIBUTE13 IS NULL AND C2.NEW_ATTRIBUTE13 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE13 IS NOT NULL AND C2.NEW_ATTRIBUTE13 IS NULL)
        OR (C2.OLD_ATTRIBUTE13 <> C2.NEW_ATTRIBUTE13) THEN
             x_version_label_tbl(i).ATTRIBUTE13 := C2.NEW_ATTRIBUTE13;
        END IF;


        IF (C2.OLD_ATTRIBUTE14 IS NULL AND C2.NEW_ATTRIBUTE14 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE14 IS NOT NULL AND C2.NEW_ATTRIBUTE14 IS NULL)
        OR (C2.OLD_ATTRIBUTE14 <> C2.NEW_ATTRIBUTE14) THEN
             x_version_label_tbl(i).ATTRIBUTE14 := C2.NEW_ATTRIBUTE14;
        END IF;

        IF (C2.OLD_ATTRIBUTE15 IS NULL AND C2.NEW_ATTRIBUTE15 IS NOT NULL)
        OR (C2.OLD_ATTRIBUTE15 IS NOT NULL AND C2.NEW_ATTRIBUTE15 IS NULL)
        OR (C2.OLD_ATTRIBUTE15 <> C2.NEW_ATTRIBUTE15) THEN
             x_version_label_tbl(i).ATTRIBUTE15 := C2.NEW_ATTRIBUTE15;
        END IF;


  END LOOP;
 END LOOP;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
     NULL;
END Construct_ver_from_hist;


/*--------------------------------------------------------*/
/* Procedure name:  Get_Ver_Column_Values                 */
/* Description : This procudure gets the column values    */
/*                        for the Dynamic SQL             */
/*--------------------------------------------------------*/

PROCEDURE Get_Ver_Column_Values
(
    p_get_ver_cursor_id    IN   NUMBER      ,
    x_ver_label_query_rec  OUT   NOCOPY csi_datastructures_pub.version_label_rec
    ) IS
BEGIN

 dbms_sql.column_value(p_get_ver_cursor_id, 1, x_ver_label_query_rec.version_label_id);
 dbms_sql.column_value(p_get_ver_cursor_id, 2, x_ver_label_query_rec.instance_id);
 dbms_sql.column_value(p_get_ver_cursor_id, 3, x_ver_label_query_rec.version_label);
 dbms_sql.column_value(p_get_ver_cursor_id, 4, x_ver_label_query_rec.date_time_stamp);
 dbms_sql.column_value(p_get_ver_cursor_id, 5, x_ver_label_query_rec.description );
 dbms_sql.column_value(p_get_ver_cursor_id, 6, x_ver_label_query_rec.active_start_date);
 dbms_sql.column_value(p_get_ver_cursor_id, 7, x_ver_label_query_rec.active_end_date);
 dbms_sql.column_value(p_get_ver_cursor_id, 8, x_ver_label_query_rec.context);
 dbms_sql.column_value(p_get_ver_cursor_id, 9, x_ver_label_query_rec.attribute1);
 dbms_sql.column_value(p_get_ver_cursor_id, 10, x_ver_label_query_rec.attribute2);
 dbms_sql.column_value(p_get_ver_cursor_id, 11, x_ver_label_query_rec.attribute3);
 dbms_sql.column_value(p_get_ver_cursor_id, 12, x_ver_label_query_rec.attribute4);
 dbms_sql.column_value(p_get_ver_cursor_id, 13, x_ver_label_query_rec.attribute5);
 dbms_sql.column_value(p_get_ver_cursor_id, 14, x_ver_label_query_rec.attribute6);
 dbms_sql.column_value(p_get_ver_cursor_id, 15, x_ver_label_query_rec.attribute7);
 dbms_sql.column_value(p_get_ver_cursor_id, 16, x_ver_label_query_rec.attribute8);
 dbms_sql.column_value(p_get_ver_cursor_id, 17, x_ver_label_query_rec.attribute9);
 dbms_sql.column_value(p_get_ver_cursor_id, 18, x_ver_label_query_rec.attribute10);
 dbms_sql.column_value(p_get_ver_cursor_id, 19, x_ver_label_query_rec.attribute11);
 dbms_sql.column_value(p_get_ver_cursor_id, 20, x_ver_label_query_rec.attribute12);
 dbms_sql.column_value(p_get_ver_cursor_id, 21, x_ver_label_query_rec.attribute13);
 dbms_sql.column_value(p_get_ver_cursor_id, 22, x_ver_label_query_rec.attribute14);
 dbms_sql.column_value(p_get_ver_cursor_id, 23, x_ver_label_query_rec.attribute15);
 dbms_sql.column_value(p_get_ver_cursor_id, 29, x_ver_label_query_rec.object_version_number);

END Get_Ver_Column_Values;


/*----------------------------------------------------------*/
/* Procedure name:  Define_Ver_Columns                      */
/* Description : This procudure defines the columns         */
/*                        for the Dynamic SQL               */
/*----------------------------------------------------------*/

PROCEDURE Define_Ver_Columns
(
    p_get_ver_cursor_id      IN   NUMBER
    ) IS

  l_ver_label_rec   csi_datastructures_pub.version_label_rec;

BEGIN

 dbms_sql.define_column(p_get_ver_cursor_id, 1, l_ver_label_rec.version_label_id);
 dbms_sql.define_column(p_get_ver_cursor_id, 2, l_ver_label_rec.instance_id);
 dbms_sql.define_column(p_get_ver_cursor_id, 3, l_ver_label_rec.version_label,30);
 dbms_sql.define_column(p_get_ver_cursor_id, 4, l_ver_label_rec.date_time_stamp);
 dbms_sql.define_column(p_get_ver_cursor_id, 5, l_ver_label_rec.description ,30);
 dbms_sql.define_column(p_get_ver_cursor_id, 6, l_ver_label_rec.active_start_date);
 dbms_sql.define_column(p_get_ver_cursor_id, 7, l_ver_label_rec.active_end_date);
 dbms_sql.define_column(p_get_ver_cursor_id, 8, l_ver_label_rec.context,30);
 dbms_sql.define_column(p_get_ver_cursor_id, 9, l_ver_label_rec.attribute1,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 10, l_ver_label_rec.attribute2,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 11, l_ver_label_rec.attribute3,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 12, l_ver_label_rec.attribute4,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 13, l_ver_label_rec.attribute5,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 14, l_ver_label_rec.attribute6,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 15, l_ver_label_rec.attribute7,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 16, l_ver_label_rec.attribute8,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 17, l_ver_label_rec.attribute9,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 18, l_ver_label_rec.attribute10,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 19, l_ver_label_rec.attribute11,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 20, l_ver_label_rec.attribute12,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 21, l_ver_label_rec.attribute13,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 22, l_ver_label_rec.attribute14,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 23, l_ver_label_rec.attribute15,150);
 dbms_sql.define_column(p_get_ver_cursor_id, 29, l_ver_label_rec.object_version_number);

END Define_Ver_Columns;

/*----------------------------------------------------------*/
/* Procedure name:  Bind_Ver_variable                       */
/* Description : Procedure used to  generate the where      */
/*                cluase  for Party relationship            */
/*----------------------------------------------------------*/
PROCEDURE Bind_Ver_variable
(
    p_ver_label_query_rec  IN    csi_datastructures_pub.version_label_query_rec,
    p_get_ver_cursor_id    IN    NUMBER
    ) IS

BEGIN
 IF( (p_ver_label_query_rec.version_label_id IS NOT NULL)
                  AND (p_ver_label_query_rec.version_label_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_get_ver_cursor_id, ':version_label_id', p_ver_label_query_rec.version_label_id);
 END IF;

 IF( (p_ver_label_query_rec.instance_id IS NOT NULL)
                  AND (p_ver_label_query_rec.instance_id <> FND_API.G_MISS_NUM))  THEN
    DBMS_SQL.BIND_VARIABLE(p_get_ver_cursor_id, ':instance_id', p_ver_label_query_rec.instance_id);
 END IF;

 IF( (p_ver_label_query_rec.version_label IS NOT NULL)
                  AND (p_ver_label_query_rec.version_label <> FND_API.G_MISS_CHAR))  THEN
    DBMS_SQL.BIND_VARIABLE(p_get_ver_cursor_id, ':version_label', p_ver_label_query_rec.version_label);
 END IF;

 IF( (p_ver_label_query_rec.date_time_stamp IS NOT NULL)
                  AND (p_ver_label_query_rec.date_time_stamp <> FND_API.G_MISS_DATE))  THEN
    DBMS_SQL.BIND_VARIABLE(p_get_ver_cursor_id, ':date_time_stamp', p_ver_label_query_rec.date_time_stamp);
 END IF;

END Bind_Ver_variable;


/*----------------------------------------------------------*/
/* Procedure name:  Gen_Acct_Where_Clause                   */
/* Description : Procedure used to  generate the where      */
/*                cluase  for Party relationship            */
/*----------------------------------------------------------*/

PROCEDURE Gen_Ver_Where_Clause
(   p_ver_label_query_rec      IN    csi_datastructures_pub.version_label_query_rec
   ,x_where_clause             OUT   NOCOPY VARCHAR2
   ) IS

BEGIN
 -- Assign null at the start
 x_where_clause := '';

IF (( p_ver_label_query_rec.version_label_id  IS NOT NULL)  AND
             ( p_ver_label_query_rec.version_label_id  <> FND_API.G_MISS_NUM)) THEN
     x_where_clause := ' version_label_id = :version_label_id ';
ELSIF ( p_ver_label_query_rec.version_label_id  IS NULL) THEN
     x_where_clause := ' version_label_id IS NULL ';
END IF;

IF ((p_ver_label_query_rec.instance_id IS NOT NULL)  AND
            (p_ver_label_query_rec.instance_id <> FND_API.G_MISS_NUM))   THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' instance_id = :instance_id ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' instance_id = :instance_id ';
        END IF;
ELSIF (p_ver_label_query_rec.instance_id IS NULL) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' instance_id IS NULL ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' instance_id IS NULL ';
        END IF;
END IF;

IF ((p_ver_label_query_rec.version_label  IS NOT NULL)   AND
         (p_ver_label_query_rec.version_label  <> FND_API.G_MISS_CHAR)) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' version_label = :version_label ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' version_label = :version_label ';
        END IF;
ELSIF (p_ver_label_query_rec.version_label  IS NULL) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' version_label IS NULL ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' version_label IS NULL ';
        END IF;
END IF ;

IF  ((p_ver_label_query_rec.date_time_stamp IS NOT NULL) AND
        (p_ver_label_query_rec.date_time_stamp <> FND_API.G_MISS_DATE)) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := '  date_time_stamp = :date_time_stamp ';
        ELSE
            x_where_clause := x_where_clause||' AND '||
                   '  date_time_stamp = :date_time_stamp ';
        END IF;
ELSIF (p_ver_label_query_rec.date_time_stamp IS  NULL) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := '  date_time_stamp IS NULL ';
        ELSE
            x_where_clause := x_where_clause||' AND '||
                   '  date_time_stamp IS NULL ';
        END IF;


END IF;

END Gen_Ver_Where_Clause;


/*-------------------------------------------*/
/* Pocedure name: Create_version_label       */
/* Description :   procedure for creating    */
/*                 version label for         */
/*                 an Item Instance          */
/*-------------------------------------------*/

PROCEDURE create_version_label
 (    p_api_version         IN  NUMBER
     ,p_commit              IN  VARCHAR2
     ,p_init_msg_list       IN  VARCHAR2
     ,p_validation_level    IN  NUMBER
     ,p_version_label_rec   IN OUT NOCOPY csi_datastructures_pub.version_label_rec
     ,p_txn_rec             IN OUT NOCOPY csi_datastructures_pub.transaction_rec
     ,x_return_status       OUT NOCOPY VARCHAR2
     ,x_msg_count           OUT NOCOPY NUMBER
     ,x_msg_data            OUT NOCOPY VARCHAR2
   ) IS

     l_api_name           CONSTANT VARCHAR2(30)   := 'CREATE_VERSION_LABEL';
     l_api_version       CONSTANT NUMBER           := 1.0                   ;
     l_debug_level            NUMBER                             ;
     l_process_flag           BOOLEAN        := TRUE                  ;
     l_msg_index              NUMBER                                  ;
     l_version_label_rec      csi_datastructures_pub.version_label_rec;
     l_version_label_hist_id  NUMBER                                  ;
     l_flag                   VARCHAR2(1)  :='N';

BEGIN
      -- Standard Start of API savepoint
        SAVEPOINT  create_version_label_pvt;

        -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version           ,
                                                           p_api_version           ,
                                                     l_api_name                 ,
                                                    G_PKG_NAME                 )
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
      IF FND_API.to_Boolean( p_init_msg_list ) THEN
            FND_MSG_PUB.initialize;
      END IF;

      --  Initialize API return status to success
      x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Check the profile option debug_level for debug message reporting
    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
           csi_gen_utility_pvt.put_line ( 'create_version_label');
    END IF;

    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
             csi_gen_utility_pvt.put_line ( 'create_version_label:'||
                                                   p_api_version           ||'-'||
                                                  p_commit                ||'-'||
                                                   p_init_msg_list                );
       -- Dump the records in the log file
       csi_gen_utility_pvt.dump_version_label_rec(p_version_label_rec);
    END IF;

    -- Start API body
      --
    -- Check if all the required parameters are passed
           CSI_Instance_parties_vld_pvt.Check_Reqd_Param_num
             (    p_version_label_rec.INSTANCE_ID ,
                '  p_version_label_rec.INSTANCE_ID ',
                   l_api_name           );

           CSI_Instance_parties_vld_pvt.Check_Reqd_Param_char
             (    p_version_label_rec.version_label  ,
                '  p_version_label_rec.version_label ',
                   l_api_name           );

           CSI_Instance_parties_vld_pvt.Check_Reqd_Param_date
             (    p_version_label_rec.date_time_stamp ,
                '  p_version_label_rec.date_time_stamp ',
                   l_api_name           );
        -- Validate the Instance id exists in csi_item_instances
        IF NOT( CSI_Instance_parties_vld_pvt.Is_InstanceID_Valid
                                     (p_version_label_rec.INSTANCE_ID)) THEN
             RAISE FND_API.G_EXC_ERROR;
        END IF;
        -- If active_start_date is null or G_MISS value then assign sysdate
        IF ((p_version_label_rec.ACTIVE_START_DATE IS NULL ) OR
           ( p_version_label_rec.ACTIVE_START_DATE = FND_API.G_MISS_DATE)) THEN
             p_version_label_rec.ACTIVE_START_DATE := SYSDATE;
        END IF;
        -- verify if the active_start_date is valid
        IF NOT(CSI_Item_Instance_Vld_Pvt.Is_Ver_StartDate_Valid
                                         (p_version_label_rec.ACTIVE_START_DATE,
                                          p_version_label_rec.ACTIVE_END_DATE ,
                                          p_version_label_rec.INSTANCE_ID  )) THEN
            RAISE FND_API.G_EXC_ERROR;
        END IF;
        -- Verify if the active_end_date is valid
        IF ((p_version_label_rec.ACTIVE_END_DATE is NOT NULL) AND
            (p_version_label_rec.ACTIVE_END_DATE <> FND_API.G_MISS_DATE ))  THEN
             IF NOT(CSI_Item_Instance_vld_pvt.Is_Ver_EndDate_Valid
                                 (p_version_label_rec.ACTIVE_START_DATE,
                                  p_version_label_rec.ACTIVE_END_DATE ,
                                  p_version_label_rec.INSTANCE_ID  ))  THEN
                RAISE FND_API.G_EXC_ERROR;
             END IF;
        END IF;

        -- Initialize the datetimestamp to SYSDATE if it is null
        IF ((p_version_label_rec.date_time_stamp IS NULL ) OR
           ( p_version_label_rec.date_time_stamp = FND_API.G_MISS_DATE)) THEN
             p_version_label_rec.date_time_stamp := SYSDATE;
        END IF;

        -- Verify the timestamp is less than the end effective date but greater then
        -- the start effective date
        IF p_version_label_rec.date_time_stamp is NOT NULL THEN
             IF NOT(CSI_Instance_parties_vld_pvt.Is_timestamp_Valid
                                 (p_version_label_rec.date_time_stamp,
                                  p_version_label_rec.INSTANCE_ID  ))  THEN
                RAISE FND_API.G_EXC_ERROR;
             END IF;
        END IF;


        IF  p_version_label_rec.VERSION_LABEL_ID is  NULL THEN

           -- If the vesrion label id passed is null then generate from sequence
           -- and check if the value exists . If exists then generate
           -- again from the sequence till we get a value that does not exist
           while l_process_flag loop
            p_version_label_rec.VERSION_LABEL_ID := CSI_Instance_parties_vld_pvt.gen_ver_label_id;
            IF NOT(CSI_Instance_parties_vld_pvt.Is_Ver_labelID_exists(p_version_label_rec.VERSION_LABEL_ID,
                                                                       FALSE                   )) THEN
                l_process_flag := FALSE;
            END IF;
           end loop;
         ELSE
            -- Validate the version label id if exist then raise CSI_API_INVALID_PRIMARY_KEY error
            IF CSI_Instance_parties_vld_pvt.Is_Ver_labelID_exists(p_version_label_rec.VERSION_LABEL_ID,
                                                                  TRUE                        ) THEN
                RAISE FND_API.G_EXC_ERROR;
            END IF;
        END IF;
        -- call the Table handlers to insert the record
        CSI_I_VERSION_LABELS_PKG.Insert_Row(
          p_VERSION_LABEL_ID  =>  p_version_label_rec.VERSION_LABEL_ID,
          p_INSTANCE_ID       =>  p_version_label_rec.instance_id ,
          p_VERSION_LABEL     =>  p_version_label_rec.version_label,
          p_DATE_TIME_STAMP   =>  p_version_label_rec.date_time_stamp,
          p_DESCRIPTION       =>  p_version_label_rec.description,
          p_ACTIVE_START_DATE =>  p_version_label_rec.active_start_date,
          p_ACTIVE_END_DATE   =>  p_version_label_rec.active_end_date,
          p_CONTEXT           =>  p_version_label_rec.context,
          p_ATTRIBUTE1        =>  p_version_label_rec.attribute1,
          p_ATTRIBUTE2        =>  p_version_label_rec.attribute2,
          p_ATTRIBUTE3        =>  p_version_label_rec.attribute3,
          p_ATTRIBUTE4        =>  p_version_label_rec.attribute4,
          p_ATTRIBUTE5        =>  p_version_label_rec.attribute5,
          p_ATTRIBUTE6        =>  p_version_label_rec.attribute6,
          p_ATTRIBUTE7        =>  p_version_label_rec.attribute7,
          p_ATTRIBUTE8        =>  p_version_label_rec.attribute8,
          p_ATTRIBUTE9        =>  p_version_label_rec.attribute9,
          p_ATTRIBUTE10       =>  p_version_label_rec.attribute10,
          p_ATTRIBUTE11       =>  p_version_label_rec.attribute11,
          p_ATTRIBUTE12       =>  p_version_label_rec.attribute12,
          p_ATTRIBUTE13       =>  p_version_label_rec.attribute13,
          p_ATTRIBUTE14       =>  p_version_label_rec.attribute14,
          p_ATTRIBUTE15       =>  p_version_label_rec.attribute15,
          p_CREATED_BY        =>  FND_GLOBAL.USER_ID             ,
          p_CREATION_DATE     =>   SYSDATE                       ,
          p_LAST_UPDATED_BY   =>  FND_GLOBAL.USER_ID             ,
          p_LAST_UPDATE_DATE  =>  SYSDATE                        ,
          p_LAST_UPDATE_LOGIN =>  FND_GLOBAL.LOGIN_ID            ,
          p_OBJECT_VERSION_NUMBER =>  1                          );


        -- Call create_transaction to create txn log
        CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_If_Exists_Flag => 'Y'
            ,P_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data      );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                l_msg_index := 1;
                WHILE x_msg_count > 0 LOOP
                        x_msg_data := FND_MSG_PUB.GET(
                                                    l_msg_index,
                                                    FND_API.G_FALSE      );
                      CSI_gen_utility_pvt.put_line( 'message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       x_msg_count := x_msg_count - 1;
                END LOOP;
                RAISE FND_API.G_EXC_ERROR;
         END IF;

       -- Generate a unique instance_party_history_id from the sequence
       l_version_label_hist_id   := CSI_Instance_parties_vld_pvt.gen_ver_label_hist_id;

       -- Call the table handlers to insert into history table

       CSI_I_VERSION_LABELS_H_PKG.Insert_Row
       (
          px_VERSION_LABEL_HISTORY_ID   => l_version_label_hist_id                 ,
          p_VERSION_LABEL_ID            => p_version_label_rec.VERSION_LABEL_ID    ,
          p_TRANSACTION_ID              => p_txn_rec.TRANSACTION_ID                ,
          p_OLD_VERSION_LABEL           => NULL                                    ,
          p_NEW_VERSION_LABEL           => p_version_label_rec.VERSION_LABEL       ,
          p_OLD_DESCRIPTION             => NULL                                    ,
          p_NEW_DESCRIPTION             => p_version_label_rec.DESCRIPTION         ,
          p_OLD_DATE_TIME_STAMP         => NULL                                    ,
          p_NEW_DATE_TIME_STAMP         => p_version_label_rec.DATE_TIME_STAMP     ,
          p_OLD_ACTIVE_START_DATE       => NULL                                    ,
          p_NEW_ACTIVE_START_DATE       => p_version_label_rec.ACTIVE_START_DATE   ,
          p_OLD_ACTIVE_END_DATE         => NULL                                    ,
          p_NEW_ACTIVE_END_DATE         => p_version_label_rec.ACTIVE_END_DATE     ,
          p_OLD_CONTEXT                 => NULL                           ,
          p_NEW_CONTEXT                 => p_version_label_rec.CONTEXT    ,
          p_OLD_ATTRIBUTE1              => NULL                           ,
          p_NEW_ATTRIBUTE1              => p_version_label_rec.ATTRIBUTE1 ,
          p_OLD_ATTRIBUTE2              => NULL                           ,
          p_NEW_ATTRIBUTE2              => p_version_label_rec.ATTRIBUTE2 ,
          p_OLD_ATTRIBUTE3              => NULL                           ,
          p_NEW_ATTRIBUTE3              => p_version_label_rec.ATTRIBUTE3 ,
          p_OLD_ATTRIBUTE4              => NULL                           ,
          p_NEW_ATTRIBUTE4              => p_version_label_rec.ATTRIBUTE4 ,
          p_OLD_ATTRIBUTE5              => NULL                           ,
          p_NEW_ATTRIBUTE5              => p_version_label_rec.ATTRIBUTE5 ,
          p_OLD_ATTRIBUTE6              => NULL                           ,
          p_NEW_ATTRIBUTE6              => p_version_label_rec.ATTRIBUTE6 ,
          p_OLD_ATTRIBUTE7              => NULL                           ,
          p_NEW_ATTRIBUTE7              => p_version_label_rec.ATTRIBUTE7 ,
          p_OLD_ATTRIBUTE8              => NULL                           ,
          p_NEW_ATTRIBUTE8              => p_version_label_rec.ATTRIBUTE8 ,
          p_OLD_ATTRIBUTE9              => NULL                           ,
          p_NEW_ATTRIBUTE9              => p_version_label_rec.ATTRIBUTE9 ,
          p_OLD_ATTRIBUTE10             => NULL                           ,
          p_NEW_ATTRIBUTE10             => p_version_label_rec.ATTRIBUTE10,
          p_OLD_ATTRIBUTE11             => NULL                           ,
          p_NEW_ATTRIBUTE11             => p_version_label_rec.ATTRIBUTE11,
          p_OLD_ATTRIBUTE12             => NULL                           ,
          p_NEW_ATTRIBUTE12             => p_version_label_rec.ATTRIBUTE12,
          p_OLD_ATTRIBUTE13             => NULL                           ,
          p_NEW_ATTRIBUTE13             => p_version_label_rec.ATTRIBUTE13,
          p_OLD_ATTRIBUTE14             => NULL                           ,
          p_NEW_ATTRIBUTE14             => p_version_label_rec.ATTRIBUTE14,
          p_OLD_ATTRIBUTE15             => NULL                           ,
          p_NEW_ATTRIBUTE15             => p_version_label_rec.ATTRIBUTE15,
          p_FULL_DUMP_FLAG              => 'N'                            ,
          p_CREATED_BY                  => FND_GLOBAL.USER_ID             ,
          p_CREATION_DATE               => SYSDATE                        ,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID             ,
          p_LAST_UPDATE_DATE            => SYSDATE                        ,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.LOGIN_ID            ,
          p_OBJECT_VERSION_NUMBER       => 1                              );


      --
      -- End of API body

    -- Standard check of p_commit.

      IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
      END IF;

      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
            p_data       =>       x_msg_data      );

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO create_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
                        FND_MSG_PUB.Count_And_Get
                (        p_encoded => FND_API.G_FALSE,
                 p_count       =>      x_msg_count,
                    p_data        =>      x_msg_data);
      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO create_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (        p_encoded => FND_API.G_FALSE,
                 p_count       =>      x_msg_count,
                    p_data         =>      x_msg_data);
      WHEN OTHERS THEN
            ROLLBACK TO create_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF FND_MSG_PUB.Check_Msg_Level
                 (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                         FND_MSG_PUB.Add_Exc_Msg
                    ( G_PKG_NAME, l_api_name );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (        p_encoded => FND_API.G_FALSE,
                 p_count       =>      x_msg_count,
                    p_data         =>      x_msg_data);
END create_version_label;


/*-------------------------------------------------------*/
/* Procedure name: Update_version_label                  */
/* Description :   procedure for Update                  */
/*                 version label for                     */
/*                 an Item Instance                      */
/*-------------------------------------------------------*/

PROCEDURE update_version_label
 (    p_api_version                 IN  NUMBER
     ,p_commit                      IN  VARCHAR2
     ,p_init_msg_list               IN  VARCHAR2
     ,p_validation_level            IN  NUMBER
     ,p_version_label_rec           IN  csi_datastructures_pub.version_label_rec
     ,p_txn_rec                     IN OUT NOCOPY csi_datastructures_pub.transaction_rec
     ,p_call_transaction            IN  VARCHAR2
     ,x_return_status               OUT NOCOPY VARCHAR2
     ,x_msg_count                   OUT NOCOPY NUMBER
     ,x_msg_data                    OUT NOCOPY VARCHAR2
   ) IS

   l_api_name                    CONSTANT VARCHAR2(30)   := 'UPDATE_VERSION_LABEL';
   l_api_version                CONSTANT NUMBER            := 1.0;
   l_debug_level                   NUMBER;
   l_version_label_rec        csi_datastructures_pub.version_label_rec;
   l_curr_ver_label_rec       csi_datastructures_pub.version_label_rec;
   l_temp_ver_label_rec       csi_datastructures_pub.version_label_rec;
   l_msg_index                NUMBER;
   l_OBJECT_VERSION_NUMBER    NUMBER;
   l_mod_value                NUMBER;
   l_version_label_hist_id    NUMBER;
   x_msg_index_out            NUMBER;
   l_full_dump_frequency      NUMBER;
   l_flag                     VARCHAR2(1)  :='N';
   l_ver_label_hist_rec       csi_datastructures_pub.version_label_history_rec;

  CURSOR get_curr_ver_label_rec (p_ver_label_id   IN  NUMBER) IS
   SELECT
     VERSION_LABEL_ID                 ,
     INSTANCE_ID                      ,
     VERSION_LABEL                    ,
     DESCRIPTION                      ,
     DATE_TIME_STAMP                  ,
     active_start_date                ,
     active_end_date                  ,
     context                          ,
     attribute1                       ,
     attribute2                       ,
     attribute3                       ,
     attribute4                       ,
     attribute5                       ,
     attribute6                       ,
     attribute7                       ,
     attribute8                       ,
     attribute9                       ,
     attribute10                      ,
     attribute11                      ,
     attribute12                      ,
     attribute13                      ,
     attribute14                      ,
     attribute15                      ,
     object_version_number          -- ,
    -- null parent_tbl_index                 ,
    -- null processed_flag                   ,
    -- null interface_id
    FROM CSI_I_VERSION_LABELS
   WHERE VERSION_LABEL_ID = p_ver_label_id
    AND (( ACTIVE_END_DATE IS NULL) OR (ACTIVE_END_DATE >= SYSDATE))
    FOR UPDATE OF OBJECT_VERSION_NUMBER ;

  CURSOR version_hist_csr (p_version_hist_id NUMBER) IS
   SELECT  *
   FROM    csi_i_version_labels_h
   WHERE   csi_i_version_labels_h.version_label_history_id = p_version_hist_id
   FOR UPDATE OF OBJECT_VERSION_NUMBER ;
   l_version_hist_csr    version_hist_csr%ROWTYPE;
   l_version_hist_id     NUMBER;
BEGIN

      -- Standard Start of API savepoint
         SAVEPOINT  update_version_label_pvt;

        -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version     ,
                                                         p_api_version     ,
                                                   l_api_name             ,
                                                    G_PKG_NAME             )
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
      IF FND_API.to_Boolean( p_init_msg_list ) THEN
            FND_MSG_PUB.initialize;
      END IF;

      --  Initialize API return status to success
      x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Check the profile option debug_level for debug message reporting
    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
            CSI_gen_utility_pvt.put_line( 'update_version_label');
    END IF;

    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
             CSI_gen_utility_pvt.put_line( 'update_version_label:'||
                                                 p_api_version             ||'-'||
                                                p_commit                  ||'-'||
                                                 p_init_msg_list           ||'-'||
                                 p_validation_level             );
    END IF;

    -- Start API body
      --
    -- Check if all the required parameters are passed
        CSI_Instance_parties_vld_pvt.Check_Reqd_Param_num
            (    p_version_label_rec.version_label_id  ,
                '  p_version_label_rec.version_label_id ',
                   l_api_name                           );

     -- Validate the Instance id exists in csi_item_instances
     IF  p_version_label_rec.INSTANCE_ID <> FND_API.G_MISS_NUM THEN
        IF NOT( CSI_Instance_parties_vld_pvt.Is_InstanceID_Valid
                             (p_version_label_rec.INSTANCE_ID)) THEN
             RAISE FND_API.G_EXC_ERROR;
        END IF;
     END IF;

     IF  p_version_label_rec.VERSION_LABEL_ID <> FND_API.G_MISS_NUM THEN

          -- Validate the version label id if exist then raise CSI_API_INVALID_PRIMARY_KEY error
          IF NOT(CSI_Instance_parties_vld_pvt.Is_Ver_labelID_exists(p_version_label_rec.VERSION_LABEL_ID,
                                                                 FALSE                        )) THEN
                RAISE FND_API.G_EXC_ERROR;
          END IF;
     END IF;

     -- check if the object_version_number passed matches with the one
     -- in the database else raise error
     OPEN get_curr_ver_label_rec(p_version_label_rec.VERSION_LABEL_ID);
     FETCH get_curr_ver_label_rec INTO l_curr_ver_label_rec;
     IF  (l_curr_ver_label_rec.object_version_number <> nvl(p_version_label_rec.OBJECT_VERSION_NUMBER,-1)) THEN
            FND_MESSAGE.Set_Name('CSI', 'CSI_API_OBJ_VER_MISMATCH');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
     END IF;
     IF get_curr_ver_label_rec%NOTFOUND THEN
        FND_MESSAGE.Set_Name('CSI', 'CSI_API_RECORD_LOCKED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
     END IF;
     CLOSE get_curr_ver_label_rec;

     -- Increment the object_version_number before updating
     l_OBJECT_VERSION_NUMBER := l_curr_ver_label_rec.OBJECT_VERSION_NUMBER + 1 ;

     CSI_I_VERSION_LABELS_PKG.Update_Row
     (
          p_VERSION_LABEL_ID    =>  p_version_label_rec.version_label_id,
          p_INSTANCE_ID         =>  p_version_label_rec.instance_id,
          p_VERSION_LABEL       =>  p_version_label_rec.VERSION_LABEL,
          p_DATE_TIME_STAMP     =>  p_version_label_rec.DATE_TIME_STAMP,
          p_DESCRIPTION         =>  p_version_label_rec.DESCRIPTION  ,
          p_ACTIVE_START_DATE   =>  p_version_label_rec.ACTIVE_START_DATE,
          p_ACTIVE_END_DATE     =>  p_version_label_rec.ACTIVE_END_DATE,
          p_CONTEXT             =>  p_version_label_rec.CONTEXT  ,
          p_ATTRIBUTE1          =>  p_version_label_rec.ATTRIBUTE1,
          p_ATTRIBUTE2          =>  p_version_label_rec.ATTRIBUTE2,
          p_ATTRIBUTE3          =>  p_version_label_rec.ATTRIBUTE3,
          p_ATTRIBUTE4          =>  p_version_label_rec.ATTRIBUTE4,
          p_ATTRIBUTE5          =>  p_version_label_rec.ATTRIBUTE5,
          p_ATTRIBUTE6          =>  p_version_label_rec.ATTRIBUTE6,
          p_ATTRIBUTE7          =>  p_version_label_rec.ATTRIBUTE7,
          p_ATTRIBUTE8          =>  p_version_label_rec.ATTRIBUTE8,
          p_ATTRIBUTE9          =>  p_version_label_rec.ATTRIBUTE9,
          p_ATTRIBUTE10         =>  p_version_label_rec.ATTRIBUTE10,
          p_ATTRIBUTE11         =>  p_version_label_rec.ATTRIBUTE11,
          p_ATTRIBUTE12         =>  p_version_label_rec.ATTRIBUTE12,
          p_ATTRIBUTE13         =>  p_version_label_rec.ATTRIBUTE13,
          p_ATTRIBUTE14         =>  p_version_label_rec.ATTRIBUTE14,
          p_ATTRIBUTE15         =>  p_version_label_rec.ATTRIBUTE15,
          p_CREATED_BY          =>  fnd_api.g_miss_num ,
          p_CREATION_DATE       =>  fnd_api.g_miss_date            ,
          p_LAST_UPDATED_BY     =>  FND_GLOBAL.USER_ID ,
          p_LAST_UPDATE_DATE    =>  sysdate            ,
          p_LAST_UPDATE_LOGIN   =>  FND_GLOBAL.LOGIN_ID,
          p_OBJECT_VERSION_NUMBER  =>  l_OBJECT_VERSION_NUMBER );


         -- Call create_transaction to create txn log
       IF p_call_transaction=fnd_api.g_true
       THEN
         CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_If_Exists_Flag => 'Y'
            ,P_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data         );

        IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              FOR i in 1..x_msg_Count LOOP
                FND_MSG_PUB.Get(p_msg_index     => i,
                                p_encoded       => 'F',
                                p_data          => x_msg_data,
                                p_msg_index_out => x_msg_index_out );
                CSI_gen_utility_pvt.put_line( 'message data = '||x_msg_data);
              End LOOP;
              RAISE FND_API.G_EXC_ERROR;
         END IF;
       END IF;
    -- Generate a unique instance_party_history_id from the sequence
    l_version_label_hist_id   := CSI_Instance_parties_vld_pvt.gen_ver_label_hist_id;

    -- Get the full_dump_frequency from csi_install_parameter
    --
    IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
       csi_gen_utility_pvt.populate_install_param_rec;
    END IF;
    --
    l_full_dump_frequency := csi_datastructures_pub.g_install_param_rec.history_full_dump_frequency;
    --
    IF l_full_dump_frequency IS NULL THEN
       FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_FULL_DUMP_FAILED');
       FND_MSG_PUB.ADD;
       RAISE FND_API.G_EXC_ERROR;
    END IF;
    --
    select mod(l_object_version_number,l_full_dump_frequency)
    into   l_mod_value
    from   dual;

     -- Start of modification for Bug#2547034 on 09/20/02 - rtalluri
    BEGIN
        SELECT  version_label_history_id
        INTO    l_version_hist_id
        FROM    csi_i_version_labels_h h
        WHERE   h.transaction_id = p_txn_rec.transaction_id
        AND     h.version_label_id = p_version_label_rec.version_label_id;

        OPEN   version_hist_csr(l_version_hist_id);
        FETCH  version_hist_csr INTO l_version_hist_csr ;
        CLOSE  version_hist_csr;

        IF l_version_hist_csr.full_dump_flag = 'Y'
        THEN
         CSI_I_VERSION_LABELS_H_PKG.Update_Row
         (
          p_VERSION_LABEL_HISTORY_ID    => l_version_hist_id                       ,
          p_VERSION_LABEL_ID            => fnd_api.g_miss_num                      ,
          p_TRANSACTION_ID              => fnd_api.g_miss_num                      ,
          p_OLD_VERSION_LABEL           => fnd_api.g_miss_char                     ,
          p_NEW_VERSION_LABEL           => p_version_label_rec.VERSION_LABEL       ,
          p_OLD_DESCRIPTION             => fnd_api.g_miss_char                     ,
          p_NEW_DESCRIPTION             => p_version_label_rec.DESCRIPTION         ,
          p_OLD_DATE_TIME_STAMP         => fnd_api.g_miss_date                     ,
          p_NEW_DATE_TIME_STAMP         => p_version_label_rec.DATE_TIME_STAMP     ,
          p_OLD_ACTIVE_START_DATE       => fnd_api.g_miss_date                     ,
          p_NEW_ACTIVE_START_DATE       => p_version_label_rec.ACTIVE_START_DATE   ,
          p_OLD_ACTIVE_END_DATE         => fnd_api.g_miss_date                     ,
          p_NEW_ACTIVE_END_DATE         => p_version_label_rec.ACTIVE_END_DATE     ,
          p_OLD_CONTEXT                 => fnd_api.g_miss_char                     ,
          p_NEW_CONTEXT                 => p_version_label_rec.CONTEXT             ,
          p_OLD_ATTRIBUTE1              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE1              => p_version_label_rec.ATTRIBUTE1          ,
          p_OLD_ATTRIBUTE2              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE2              => p_version_label_rec.ATTRIBUTE2          ,
          p_OLD_ATTRIBUTE3              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE3              => p_version_label_rec.ATTRIBUTE3          ,
          p_OLD_ATTRIBUTE4              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE4              => p_version_label_rec.ATTRIBUTE4          ,
          p_OLD_ATTRIBUTE5              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE5              => p_version_label_rec.ATTRIBUTE5          ,
          p_OLD_ATTRIBUTE6              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE6              => p_version_label_rec.ATTRIBUTE6          ,
          p_OLD_ATTRIBUTE7              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE7              => p_version_label_rec.ATTRIBUTE7          ,
          p_OLD_ATTRIBUTE8              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE8              => p_version_label_rec.ATTRIBUTE8          ,
          p_OLD_ATTRIBUTE9              => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE9              => p_version_label_rec.ATTRIBUTE9          ,
          p_OLD_ATTRIBUTE10             => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE10             => p_version_label_rec.ATTRIBUTE10         ,
          p_OLD_ATTRIBUTE11             => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE11             => p_version_label_rec.ATTRIBUTE11         ,
          p_OLD_ATTRIBUTE12             => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE12             => p_version_label_rec.ATTRIBUTE12         ,
          p_OLD_ATTRIBUTE13             => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE13             => p_version_label_rec.ATTRIBUTE13         ,
          p_OLD_ATTRIBUTE14             => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE14             => p_version_label_rec.ATTRIBUTE14         ,
          p_OLD_ATTRIBUTE15             => fnd_api.g_miss_char                     ,
          p_NEW_ATTRIBUTE15             => p_version_label_rec.ATTRIBUTE15         ,
          p_FULL_DUMP_FLAG              => fnd_api.g_miss_char                     ,
          p_CREATED_BY                  => fnd_api.g_miss_num                      ,
          p_CREATION_DATE               => fnd_api.g_miss_date                     ,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID                      ,
          p_LAST_UPDATE_DATE            => SYSDATE                                 ,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.LOGIN_ID                     ,
          p_OBJECT_VERSION_NUMBER       => fnd_api.g_miss_num                      );

        ELSE
          --
             IF    ( l_version_hist_csr.old_version_label IS NULL
                AND  l_version_hist_csr.new_version_label IS NULL ) THEN
                     IF  ( p_version_label_rec.version_label = l_curr_ver_label_rec.version_label )
                      OR ( p_version_label_rec.version_label = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_version_label := NULL;
                           l_version_hist_csr.new_version_label := NULL;
                     ELSE
                           l_version_hist_csr.old_version_label := fnd_api.g_miss_char;
                           l_version_hist_csr.new_version_label := p_version_label_rec.version_label;
                     END IF;
             ELSE
                     l_version_hist_csr.old_version_label := fnd_api.g_miss_char;
                     l_version_hist_csr.new_version_label := p_version_label_rec.version_label;
             END IF;
             --
             IF    ( l_version_hist_csr.old_date_time_stamp IS NULL
                AND  l_version_hist_csr.new_date_time_stamp IS NULL ) THEN
                     IF  ( p_version_label_rec.date_time_stamp = l_curr_ver_label_rec.date_time_stamp )
                      OR ( p_version_label_rec.date_time_stamp = fnd_api.g_miss_date ) THEN
                           l_version_hist_csr.old_date_time_stamp := NULL;
                           l_version_hist_csr.new_date_time_stamp := NULL;
                     ELSE
                           l_version_hist_csr.old_date_time_stamp := fnd_api.g_miss_date;
                           l_version_hist_csr.new_date_time_stamp := p_version_label_rec.date_time_stamp;
                     END IF;
             ELSE
                     l_version_hist_csr.old_date_time_stamp := fnd_api.g_miss_date;
                     l_version_hist_csr.new_date_time_stamp := p_version_label_rec.date_time_stamp;
             END IF;
             --
             IF    ( l_version_hist_csr.old_description IS NULL
                AND  l_version_hist_csr.new_description IS NULL ) THEN
                     IF  ( p_version_label_rec.description = l_curr_ver_label_rec.description )
                      OR ( p_version_label_rec.description = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_description := NULL;
                           l_version_hist_csr.new_description := NULL;
                     ELSE
                           l_version_hist_csr.old_description := fnd_api.g_miss_char;
                           l_version_hist_csr.new_description := p_version_label_rec.description;
                     END IF;
             ELSE
                     l_version_hist_csr.old_description := fnd_api.g_miss_char;
                     l_version_hist_csr.new_description := p_version_label_rec.description;
             END IF;
             --
             IF    ( l_version_hist_csr.old_active_start_date IS NULL
                AND  l_version_hist_csr.new_active_start_date IS NULL ) THEN
                     IF  ( p_version_label_rec.active_start_date = l_curr_ver_label_rec.active_start_date )
                      OR ( p_version_label_rec.active_start_date = fnd_api.g_miss_date ) THEN
                           l_version_hist_csr.old_active_start_date := NULL;
                           l_version_hist_csr.new_active_start_date := NULL;
                     ELSE
                           l_version_hist_csr.old_active_start_date := fnd_api.g_miss_date;
                           l_version_hist_csr.new_active_start_date := p_version_label_rec.active_start_date;
                     END IF;
             ELSE
                     l_version_hist_csr.old_active_start_date := fnd_api.g_miss_date;
                     l_version_hist_csr.new_active_start_date := p_version_label_rec.active_start_date;
             END IF;
             --
             IF    ( l_version_hist_csr.old_active_end_date IS NULL
                AND  l_version_hist_csr.new_active_end_date IS NULL ) THEN
                     IF  ( p_version_label_rec.active_end_date = l_curr_ver_label_rec.active_end_date )
                      OR ( p_version_label_rec.active_end_date = fnd_api.g_miss_date ) THEN
                           l_version_hist_csr.old_active_end_date := NULL;
                           l_version_hist_csr.new_active_end_date := NULL;
                     ELSE
                           l_version_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                           l_version_hist_csr.new_active_end_date := p_version_label_rec.active_end_date;
                     END IF;
             ELSE
                     l_version_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                     l_version_hist_csr.new_active_end_date := p_version_label_rec.active_end_date;
             END IF;
             --
             IF    ( l_version_hist_csr.old_context IS NULL
                AND  l_version_hist_csr.new_context IS NULL ) THEN
                     IF  ( p_version_label_rec.context = l_curr_ver_label_rec.context )
                      OR ( p_version_label_rec.context = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_context := NULL;
                           l_version_hist_csr.new_context := NULL;
                     ELSE
                           l_version_hist_csr.old_context := fnd_api.g_miss_char;
                           l_version_hist_csr.new_context := p_version_label_rec.context;
                     END IF;
             ELSE
                     l_version_hist_csr.old_context := fnd_api.g_miss_char;
                     l_version_hist_csr.new_context := p_version_label_rec.context;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute1 IS NULL
                AND  l_version_hist_csr.new_attribute1 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute1 = l_curr_ver_label_rec.attribute1 )
                      OR ( p_version_label_rec.attribute1 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute1 := NULL;
                           l_version_hist_csr.new_attribute1 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute1 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute1 := p_version_label_rec.attribute1;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute1 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute1 := p_version_label_rec.attribute1;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute2 IS NULL
                AND  l_version_hist_csr.new_attribute2 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute2 = l_curr_ver_label_rec.attribute2 )
                      OR ( p_version_label_rec.attribute2 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute2 := NULL;
                           l_version_hist_csr.new_attribute2 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute2 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute2 := p_version_label_rec.attribute2;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute2 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute2 := p_version_label_rec.attribute2;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute3 IS NULL
                AND  l_version_hist_csr.new_attribute3 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute3 = l_curr_ver_label_rec.attribute3 )
                      OR ( p_version_label_rec.attribute3 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute3 := NULL;
                           l_version_hist_csr.new_attribute3 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute3 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute3 := p_version_label_rec.attribute3;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute3 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute3 := p_version_label_rec.attribute3;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute4 IS NULL
                AND  l_version_hist_csr.new_attribute4 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute4 = l_curr_ver_label_rec.attribute4 )
                      OR ( p_version_label_rec.attribute4 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute4 := NULL;
                           l_version_hist_csr.new_attribute4 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute4 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute4 := p_version_label_rec.attribute4;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute4 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute4 := p_version_label_rec.attribute4;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute5 IS NULL
                AND  l_version_hist_csr.new_attribute5 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute5 = l_curr_ver_label_rec.attribute5 )
                      OR ( p_version_label_rec.attribute5 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute5 := NULL;
                           l_version_hist_csr.new_attribute5 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute5 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute5 := p_version_label_rec.attribute5;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute5 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute5 := p_version_label_rec.attribute5;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute6 IS NULL
                AND  l_version_hist_csr.new_attribute6 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute6 = l_curr_ver_label_rec.attribute6 )
                      OR ( p_version_label_rec.attribute6 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute6 := NULL;
                           l_version_hist_csr.new_attribute6 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute6 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute6 := p_version_label_rec.attribute6;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute6 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute6 := p_version_label_rec.attribute6;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute7 IS NULL
                AND  l_version_hist_csr.new_attribute7 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute7 = l_curr_ver_label_rec.attribute7 )
                      OR ( p_version_label_rec.attribute7 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute7 := NULL;
                           l_version_hist_csr.new_attribute7 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute7 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute7 := p_version_label_rec.attribute7;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute7 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute7 := p_version_label_rec.attribute7;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute8 IS NULL
                AND  l_version_hist_csr.new_attribute8 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute8 = l_curr_ver_label_rec.attribute8 )
                      OR ( p_version_label_rec.attribute8 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute8 := NULL;
                           l_version_hist_csr.new_attribute8 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute8 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute8 := p_version_label_rec.attribute8;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute8 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute8 := p_version_label_rec.attribute8;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute9 IS NULL
                AND  l_version_hist_csr.new_attribute9 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute9 = l_curr_ver_label_rec.attribute9 )
                      OR ( p_version_label_rec.attribute9 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute9 := NULL;
                           l_version_hist_csr.new_attribute9 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute9 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute9 := p_version_label_rec.attribute9;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute9 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute9 := p_version_label_rec.attribute9;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute10 IS NULL
                AND  l_version_hist_csr.new_attribute10 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute10 = l_curr_ver_label_rec.attribute10 )
                      OR ( p_version_label_rec.attribute10 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute10 := NULL;
                           l_version_hist_csr.new_attribute10 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute10 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute10 := p_version_label_rec.attribute10;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute10 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute10 := p_version_label_rec.attribute10;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute11 IS NULL
                AND  l_version_hist_csr.new_attribute11 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute11 = l_curr_ver_label_rec.attribute11 )
                      OR ( p_version_label_rec.attribute11 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute11 := NULL;
                           l_version_hist_csr.new_attribute11 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute11 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute11 := p_version_label_rec.attribute11;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute11 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute11 := p_version_label_rec.attribute11;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute12 IS NULL
                AND  l_version_hist_csr.new_attribute12 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute12 = l_curr_ver_label_rec.attribute12 )
                      OR ( p_version_label_rec.attribute12 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute12 := NULL;
                           l_version_hist_csr.new_attribute12 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute12 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute12 := p_version_label_rec.attribute12;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute12 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute12 := p_version_label_rec.attribute12;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute13 IS NULL
                AND  l_version_hist_csr.new_attribute13 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute13 = l_curr_ver_label_rec.attribute13 )
                      OR ( p_version_label_rec.attribute13 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute13 := NULL;
                           l_version_hist_csr.new_attribute13 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute13 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute13 := p_version_label_rec.attribute13;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute13 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute13 := p_version_label_rec.attribute13;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute14 IS NULL
                AND  l_version_hist_csr.new_attribute14 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute14 = l_curr_ver_label_rec.attribute14 )
                      OR ( p_version_label_rec.attribute14 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute14 := NULL;
                           l_version_hist_csr.new_attribute14 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute14 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute14 := p_version_label_rec.attribute14;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute14 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute14 := p_version_label_rec.attribute14;
             END IF;
             --
             IF    ( l_version_hist_csr.old_attribute15 IS NULL
                AND  l_version_hist_csr.new_attribute15 IS NULL ) THEN
                     IF  ( p_version_label_rec.attribute15 = l_curr_ver_label_rec.attribute15 )
                      OR ( p_version_label_rec.attribute15 = fnd_api.g_miss_char ) THEN
                           l_version_hist_csr.old_attribute15 := NULL;
                           l_version_hist_csr.new_attribute15 := NULL;
                     ELSE
                           l_version_hist_csr.old_attribute15 := fnd_api.g_miss_char;
                           l_version_hist_csr.new_attribute15 := p_version_label_rec.attribute15;
                     END IF;
             ELSE
                     l_version_hist_csr.old_attribute15 := fnd_api.g_miss_char;
                     l_version_hist_csr.new_attribute15 := p_version_label_rec.attribute15;
             END IF;
             --

         csi_i_version_labels_h_pkg.update_row
         (
          p_version_label_history_id    => l_version_hist_id                       ,
          p_version_label_id            => fnd_api.g_miss_num                      ,
          p_transaction_id              => fnd_api.g_miss_num                      ,
          p_old_version_label           => l_version_hist_csr.old_version_label    ,
          p_new_version_label           => l_version_hist_csr.new_version_label       ,
          p_old_description             => l_version_hist_csr.old_description      ,
          p_new_description             => l_version_hist_csr.new_description         ,
          p_old_date_time_stamp         => l_version_hist_csr.old_date_time_stamp  ,
          p_new_date_time_stamp         => l_version_hist_csr.new_date_time_stamp     ,
          p_old_active_start_date       => l_version_hist_csr.old_active_start_date,
          p_new_active_start_date       => l_version_hist_csr.new_active_start_date   ,
          p_old_active_end_date         => l_version_hist_csr.old_active_end_date  ,
          p_new_active_end_date         => l_version_hist_csr.new_active_end_date     ,
          p_old_context                 => l_version_hist_csr.old_context          ,
          p_new_context                 => l_version_hist_csr.new_context             ,
          p_old_attribute1              => l_version_hist_csr.old_attribute1       ,
          p_new_attribute1              => l_version_hist_csr.new_attribute1          ,
          p_old_attribute2              => l_version_hist_csr.old_attribute2       ,
          p_new_attribute2              => l_version_hist_csr.new_attribute2          ,
          p_old_attribute3              => l_version_hist_csr.old_attribute3       ,
          p_new_attribute3              => l_version_hist_csr.new_attribute3          ,
          p_old_attribute4              => l_version_hist_csr.old_attribute4       ,
          p_new_attribute4              => l_version_hist_csr.new_attribute4          ,
          p_old_attribute5              => l_version_hist_csr.old_attribute5       ,
          p_new_attribute5              => l_version_hist_csr.new_attribute5          ,
          p_old_attribute6              => l_version_hist_csr.old_attribute6       ,
          p_new_attribute6              => l_version_hist_csr.new_attribute6          ,
          p_old_attribute7              => l_version_hist_csr.old_attribute7       ,
          p_new_attribute7              => l_version_hist_csr.new_attribute7          ,
          p_old_attribute8              => l_version_hist_csr.old_attribute8       ,
          p_new_attribute8              => l_version_hist_csr.new_attribute8          ,
          p_old_attribute9              => l_version_hist_csr.old_attribute9       ,
          p_new_attribute9              => l_version_hist_csr.new_attribute9          ,
          p_old_attribute10             => l_version_hist_csr.old_attribute10      ,
          p_new_attribute10             => l_version_hist_csr.new_attribute10         ,
          p_old_attribute11             => l_version_hist_csr.old_attribute11      ,
          p_new_attribute11             => l_version_hist_csr.new_attribute11         ,
          p_old_attribute12             => l_version_hist_csr.old_attribute12      ,
          p_new_attribute12             => l_version_hist_csr.new_attribute12         ,
          p_old_attribute13             => l_version_hist_csr.old_attribute13      ,
          p_new_attribute13             => l_version_hist_csr.new_attribute13         ,
          p_old_attribute14             => l_version_hist_csr.old_attribute14      ,
          p_new_attribute14             => l_version_hist_csr.new_attribute14         ,
          p_old_attribute15             => l_version_hist_csr.old_attribute15      ,
          p_new_attribute15             => l_version_hist_csr.new_attribute15         ,
          p_full_dump_flag              => fnd_api.g_miss_char                     ,
          p_created_by                  => fnd_api.g_miss_num                      ,
          p_creation_date               => fnd_api.g_miss_date                     ,
          p_last_updated_by             => fnd_global.user_id                      ,
          p_last_update_date            => SYSDATE                                 ,
          p_last_update_login           => fnd_global.login_id                     ,
          p_object_version_number       => fnd_api.g_miss_num                      );
        END IF;
    EXCEPTION
         WHEN NO_DATA_FOUND THEN

         IF (l_mod_value = 0) THEN
          -- If the mod value is 0 then dump all the columns both changed and unchanged
          -- changed columns have old and new values while the unchanged values have old and new values
          -- exactly same

          IF (p_version_label_rec.version_label = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.version_label := l_curr_ver_label_rec.version_label ;
          END IF;
          IF (p_version_label_rec.DATE_TIME_STAMP = FND_API.G_MISS_DATE) THEN
              l_temp_ver_label_rec.DATE_TIME_STAMP := l_curr_ver_label_rec.DATE_TIME_STAMP ;
          END IF;
          IF (p_version_label_rec.DESCRIPTION = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.DESCRIPTION := l_curr_ver_label_rec.DESCRIPTION ;
          END IF;
          IF (p_version_label_rec.ACTIVE_START_DATE = FND_API.G_MISS_DATE) THEN
              l_temp_ver_label_rec.ACTIVE_START_DATE := l_curr_ver_label_rec.ACTIVE_START_DATE ;
          END IF;
          IF  (p_version_label_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE) THEN
              l_temp_ver_label_rec.ACTIVE_END_DATE := l_curr_ver_label_rec.ACTIVE_END_DATE ;
          END IF;
          IF  (p_version_label_rec.context = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.CONTEXT := l_curr_ver_label_rec.CONTEXT ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE1 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE1 := l_curr_ver_label_rec.ATTRIBUTE1 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE2 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE2 := l_curr_ver_label_rec.ATTRIBUTE2 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE3 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE3 := l_curr_ver_label_rec.ATTRIBUTE3 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE4 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE4 := l_curr_ver_label_rec.ATTRIBUTE4 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE5 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE5 := l_curr_ver_label_rec.ATTRIBUTE5 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE6 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE6 := l_curr_ver_label_rec.ATTRIBUTE6 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE7 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE7 := l_curr_ver_label_rec.ATTRIBUTE7 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE8 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE8 := l_curr_ver_label_rec.ATTRIBUTE8 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE9 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE9 := l_curr_ver_label_rec.ATTRIBUTE9 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE10 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE10 := l_curr_ver_label_rec.ATTRIBUTE10 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE11 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE11 := l_curr_ver_label_rec.ATTRIBUTE11 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE12 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE12 := l_curr_ver_label_rec.ATTRIBUTE12 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE13 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE13 := l_curr_ver_label_rec.ATTRIBUTE13 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE14 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE14 := l_curr_ver_label_rec.ATTRIBUTE14 ;
          END IF;
          IF  (p_version_label_rec.ATTRIBUTE15 = FND_API.G_MISS_CHAR) THEN
              l_temp_ver_label_rec.ATTRIBUTE15 := l_curr_ver_label_rec.ATTRIBUTE15 ;
          END IF;

       -- Call the table handlers to insert into history table

       CSI_I_VERSION_LABELS_H_PKG.Insert_Row
       (
          px_VERSION_LABEL_HISTORY_ID   => l_version_label_hist_id                 ,
          p_VERSION_LABEL_ID            => p_version_label_rec.VERSION_LABEL_ID    ,
          p_TRANSACTION_ID              => p_txn_rec.TRANSACTION_ID                ,
          p_OLD_VERSION_LABEL           => l_temp_ver_label_rec.VERSION_LABEL      ,
          p_NEW_VERSION_LABEL           => p_version_label_rec.VERSION_LABEL       ,
          p_OLD_DESCRIPTION             => l_temp_ver_label_rec.DESCRIPTION        ,
          p_NEW_DESCRIPTION             => p_version_label_rec.DESCRIPTION         ,
          p_OLD_DATE_TIME_STAMP         => l_temp_ver_label_rec.DATE_TIME_STAMP    ,
          p_NEW_DATE_TIME_STAMP         => p_version_label_rec.DATE_TIME_STAMP     ,
          p_OLD_ACTIVE_START_DATE       => l_temp_ver_label_rec.ACTIVE_START_DATE  ,
          p_NEW_ACTIVE_START_DATE       => p_version_label_rec.ACTIVE_START_DATE   ,
          p_OLD_ACTIVE_END_DATE         => l_temp_ver_label_rec.ACTIVE_END_DATE  ,
          p_NEW_ACTIVE_END_DATE         => p_version_label_rec.ACTIVE_END_DATE     ,
          p_OLD_CONTEXT                 => l_temp_ver_label_rec.CONTEXT  ,
          p_NEW_CONTEXT                 => p_version_label_rec.CONTEXT    ,
          p_OLD_ATTRIBUTE1              => l_temp_ver_label_rec.ATTRIBUTE1  ,
          p_NEW_ATTRIBUTE1              => p_version_label_rec.ATTRIBUTE1 ,
          p_OLD_ATTRIBUTE2              => l_temp_ver_label_rec.ATTRIBUTE2  ,
          p_NEW_ATTRIBUTE2              => p_version_label_rec.ATTRIBUTE2 ,
          p_OLD_ATTRIBUTE3              => l_temp_ver_label_rec.ATTRIBUTE3  ,
          p_NEW_ATTRIBUTE3              => p_version_label_rec.ATTRIBUTE3 ,
          p_OLD_ATTRIBUTE4              => l_temp_ver_label_rec.ATTRIBUTE4  ,
          p_NEW_ATTRIBUTE4              => p_version_label_rec.ATTRIBUTE4 ,
          p_OLD_ATTRIBUTE5              => l_temp_ver_label_rec.ATTRIBUTE5  ,
          p_NEW_ATTRIBUTE5              => p_version_label_rec.ATTRIBUTE5 ,
          p_OLD_ATTRIBUTE6              => l_temp_ver_label_rec.ATTRIBUTE6  ,
          p_NEW_ATTRIBUTE6              => p_version_label_rec.ATTRIBUTE6 ,
          p_OLD_ATTRIBUTE7              => l_temp_ver_label_rec.ATTRIBUTE7  ,
          p_NEW_ATTRIBUTE7              => p_version_label_rec.ATTRIBUTE7 ,
          p_OLD_ATTRIBUTE8              => l_temp_ver_label_rec.ATTRIBUTE8  ,
          p_NEW_ATTRIBUTE8              => p_version_label_rec.ATTRIBUTE8 ,
          p_OLD_ATTRIBUTE9              => l_temp_ver_label_rec.ATTRIBUTE9  ,
          p_NEW_ATTRIBUTE9              => p_version_label_rec.ATTRIBUTE9 ,
          p_OLD_ATTRIBUTE10             => l_temp_ver_label_rec.ATTRIBUTE10  ,
          p_NEW_ATTRIBUTE10             => p_version_label_rec.ATTRIBUTE10,
          p_OLD_ATTRIBUTE11             => l_temp_ver_label_rec.ATTRIBUTE11  ,
          p_NEW_ATTRIBUTE11             => p_version_label_rec.ATTRIBUTE11,
          p_OLD_ATTRIBUTE12             => l_temp_ver_label_rec.ATTRIBUTE12  ,
          p_NEW_ATTRIBUTE12             => p_version_label_rec.ATTRIBUTE12,
          p_OLD_ATTRIBUTE13             => l_temp_ver_label_rec.ATTRIBUTE13  ,
          p_NEW_ATTRIBUTE13             => p_version_label_rec.ATTRIBUTE13,
          p_OLD_ATTRIBUTE14             => l_temp_ver_label_rec.ATTRIBUTE14  ,
          p_NEW_ATTRIBUTE14             => p_version_label_rec.ATTRIBUTE14,
          p_OLD_ATTRIBUTE15             => l_temp_ver_label_rec.ATTRIBUTE15  ,
          p_NEW_ATTRIBUTE15             => p_version_label_rec.ATTRIBUTE15,
          p_FULL_DUMP_FLAG              => 'Y'                            ,
          p_CREATED_BY                  => FND_GLOBAL.USER_ID             ,
          p_CREATION_DATE               => SYSDATE                        ,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID             ,
          p_LAST_UPDATE_DATE            => SYSDATE                        ,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.LOGIN_ID            ,
          p_OBJECT_VERSION_NUMBER       => 1                              );


       ELSE
          -- If the mod value is not equal to zero then dump only the changed columns
          -- while the unchanged values have old and new values as null

           IF (p_version_label_rec.version_label = fnd_api.g_miss_char) OR
               NVL(p_version_label_rec.version_label, fnd_api.g_miss_char) = NVL(l_curr_ver_label_rec.version_label, fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_version_label := NULL;
                l_ver_label_hist_rec.new_version_label := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.version_label,fnd_api.g_miss_char) <> NVL(p_version_label_rec.version_label,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_version_label := l_curr_ver_label_rec.version_label ;
                l_ver_label_hist_rec.new_version_label := p_version_label_rec.version_label ;
           END IF;
           --
           IF (p_version_label_rec.date_time_stamp = fnd_api.g_miss_date) OR
               NVL(p_version_label_rec.date_time_stamp, fnd_api.g_miss_date) = NVL(l_curr_ver_label_rec.date_time_stamp, fnd_api.g_miss_date) THEN
                l_ver_label_hist_rec.old_date_time_stamp := NULL;
                l_ver_label_hist_rec.new_date_time_stamp := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.date_time_stamp,fnd_api.g_miss_date) <> NVL(p_version_label_rec.date_time_stamp,fnd_api.g_miss_date) THEN
                l_ver_label_hist_rec.old_date_time_stamp := l_curr_ver_label_rec.date_time_stamp ;
                l_ver_label_hist_rec.new_date_time_stamp := p_version_label_rec.date_time_stamp ;
           END IF;
           --
           IF (p_version_label_rec.description = fnd_api.g_miss_char) OR
               NVL(p_version_label_rec.description, fnd_api.g_miss_char) = NVL(l_curr_ver_label_rec.description, fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_description := NULL;
                l_ver_label_hist_rec.new_description := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.description,fnd_api.g_miss_char) <> NVL(p_version_label_rec.description,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_description := l_curr_ver_label_rec.description ;
                l_ver_label_hist_rec.new_description := p_version_label_rec.description ;
           END IF;
           --
           IF (p_version_label_rec.active_start_date = fnd_api.g_miss_date) OR
              NVL(l_curr_ver_label_rec.active_start_date,fnd_api.g_miss_date) = NVL(p_version_label_rec.active_start_date,fnd_api.g_miss_date) THEN
                l_ver_label_hist_rec.old_active_start_date := NULL;
                l_ver_label_hist_rec.new_active_start_date := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.active_start_date,fnd_api.g_miss_date) <> NVL(p_version_label_rec.active_start_date,fnd_api.g_miss_date) THEN
                l_ver_label_hist_rec.old_active_start_date := l_curr_ver_label_rec.active_start_date ;
                l_ver_label_hist_rec.new_active_start_date := p_version_label_rec.active_start_date ;
           END IF;
           --
           IF (p_version_label_rec.active_end_date = fnd_api.g_miss_date) OR
              NVL(l_curr_ver_label_rec.active_end_date,fnd_api.g_miss_date) = NVL(p_version_label_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_ver_label_hist_rec.old_active_end_date := NULL;
                l_ver_label_hist_rec.new_active_end_date := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.active_end_date,fnd_api.g_miss_date) <> NVL(p_version_label_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_ver_label_hist_rec.old_active_end_date := l_curr_ver_label_rec.active_end_date ;
                l_ver_label_hist_rec.new_active_end_date := p_version_label_rec.active_end_date ;
           END IF;
           --
           IF (p_version_label_rec.context = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.context,fnd_api.g_miss_char) = NVL(p_version_label_rec.context,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_context := NULL;
                l_ver_label_hist_rec.new_context := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.context,fnd_api.g_miss_char) <> NVL(p_version_label_rec.context,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_context := l_curr_ver_label_rec.context ;
                l_ver_label_hist_rec.new_context := p_version_label_rec.context ;
           END IF;
           --
           IF (p_version_label_rec.attribute1 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute1,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute1,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute1 := NULL;
                l_ver_label_hist_rec.new_attribute1 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute1,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute1,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute1 := l_curr_ver_label_rec.attribute1 ;
                l_ver_label_hist_rec.new_attribute1 := p_version_label_rec.attribute1 ;
           END IF;
           --
           IF (p_version_label_rec.attribute2 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute2,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute2,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute2 := NULL;
                l_ver_label_hist_rec.new_attribute2 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute2,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute2,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute2 := l_curr_ver_label_rec.attribute2 ;
                l_ver_label_hist_rec.new_attribute2 := p_version_label_rec.attribute2 ;
           END IF;
           --
           IF (p_version_label_rec.attribute3 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute3,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute3,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute3 := NULL;
                l_ver_label_hist_rec.new_attribute3 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute3,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute3,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute3 := l_curr_ver_label_rec.attribute3 ;
                l_ver_label_hist_rec.new_attribute3 := p_version_label_rec.attribute3 ;
           END IF;
           --
           IF (p_version_label_rec.attribute4 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute4,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute4,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute4 := NULL;
                l_ver_label_hist_rec.new_attribute4 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute4,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute4,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute4 := l_curr_ver_label_rec.attribute4 ;
                l_ver_label_hist_rec.new_attribute4 := p_version_label_rec.attribute4 ;
           END IF;
           --
           IF (p_version_label_rec.attribute5 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute5,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute5,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute5 := NULL;
                l_ver_label_hist_rec.new_attribute5 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute5,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute5,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute5 := l_curr_ver_label_rec.attribute5 ;
                l_ver_label_hist_rec.new_attribute5 := p_version_label_rec.attribute5 ;
           END IF;
           --
           IF (p_version_label_rec.attribute6 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute6,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute6,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute6 := NULL;
                l_ver_label_hist_rec.new_attribute6 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute6,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute6,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute6 := l_curr_ver_label_rec.attribute6 ;
                l_ver_label_hist_rec.new_attribute6 := p_version_label_rec.attribute6 ;
           END IF;
           --
           IF (p_version_label_rec.attribute7 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute7,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute7,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute7 := NULL;
                l_ver_label_hist_rec.new_attribute7 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute7,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute7,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute7 := l_curr_ver_label_rec.attribute7 ;
                l_ver_label_hist_rec.new_attribute7 := p_version_label_rec.attribute7 ;
           END IF;
           --
           IF (p_version_label_rec.attribute8 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute8,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute8,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute8 := NULL;
                l_ver_label_hist_rec.new_attribute8 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute8,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute8,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute8 := l_curr_ver_label_rec.attribute8 ;
                l_ver_label_hist_rec.new_attribute8 := p_version_label_rec.attribute8 ;
           END IF;
           --
           IF (p_version_label_rec.attribute9 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute9,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute9,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute9 := NULL;
                l_ver_label_hist_rec.new_attribute9 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute9,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute9,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute9 := l_curr_ver_label_rec.attribute9 ;
                l_ver_label_hist_rec.new_attribute9 := p_version_label_rec.attribute9 ;
           END IF;
           --
           IF (p_version_label_rec.attribute10 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute10,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute10,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute10 := NULL;
                l_ver_label_hist_rec.new_attribute10 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute10,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute10,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute10 := l_curr_ver_label_rec.attribute10 ;
                l_ver_label_hist_rec.new_attribute10 := p_version_label_rec.attribute10 ;
           END IF;
           --
           IF (p_version_label_rec.attribute11 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute11,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute11,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute11 := NULL;
                l_ver_label_hist_rec.new_attribute11 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute11,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute11,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute11 := l_curr_ver_label_rec.attribute11 ;
                l_ver_label_hist_rec.new_attribute11 := p_version_label_rec.attribute11 ;
           END IF;
           --
           IF (p_version_label_rec.attribute12 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute12,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute12,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute12 := NULL;
                l_ver_label_hist_rec.new_attribute12 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute12,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute12,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute12 := l_curr_ver_label_rec.attribute12 ;
                l_ver_label_hist_rec.new_attribute12 := p_version_label_rec.attribute12 ;
           END IF;
           --
           IF (p_version_label_rec.attribute13 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute13,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute13,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute13 := NULL;
                l_ver_label_hist_rec.new_attribute13 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute13,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute13,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute13 := l_curr_ver_label_rec.attribute13 ;
                l_ver_label_hist_rec.new_attribute13 := p_version_label_rec.attribute13 ;
           END IF;
           --
           IF (p_version_label_rec.attribute14 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute14,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute14,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute14 := NULL;
                l_ver_label_hist_rec.new_attribute14 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute14,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute14,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute14 := l_curr_ver_label_rec.attribute14 ;
                l_ver_label_hist_rec.new_attribute14 := p_version_label_rec.attribute14 ;
           END IF;
           --
           IF (p_version_label_rec.attribute15 = fnd_api.g_miss_char) OR
              NVL(l_curr_ver_label_rec.attribute15,fnd_api.g_miss_char) = NVL(p_version_label_rec.attribute15,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute15 := NULL;
                l_ver_label_hist_rec.new_attribute15 := NULL;
           ELSIF
              NVL(l_curr_ver_label_rec.attribute15,fnd_api.g_miss_char) <> NVL(p_version_label_rec.attribute15,fnd_api.g_miss_char) THEN
                l_ver_label_hist_rec.old_attribute15 := l_curr_ver_label_rec.attribute15 ;
                l_ver_label_hist_rec.new_attribute15 := p_version_label_rec.attribute15 ;
           END IF;

     -- Call the table handlers to insert into history table
       CSI_I_VERSION_LABELS_H_PKG.Insert_Row
       (
          px_VERSION_LABEL_HISTORY_ID   => l_version_label_hist_id                 ,
          p_VERSION_LABEL_ID            => p_version_label_rec.VERSION_LABEL_ID    ,
          p_TRANSACTION_ID              => p_txn_rec.TRANSACTION_ID                ,
          p_OLD_VERSION_LABEL           => l_ver_label_hist_rec.OLD_VERSION_LABEL      ,
          p_NEW_VERSION_LABEL           => l_ver_label_hist_rec.NEW_VERSION_LABEL       ,
          p_OLD_DESCRIPTION             => l_ver_label_hist_rec.OLD_DESCRIPTION        ,
          p_NEW_DESCRIPTION             => l_ver_label_hist_rec.NEW_DESCRIPTION         ,
          p_OLD_DATE_TIME_STAMP         => l_ver_label_hist_rec.OLD_DATE_TIME_STAMP    ,
          p_NEW_DATE_TIME_STAMP         => l_ver_label_hist_rec.NEW_DATE_TIME_STAMP     ,
          p_OLD_ACTIVE_START_DATE       => l_ver_label_hist_rec.OLD_ACTIVE_START_DATE  ,
          p_NEW_ACTIVE_START_DATE       => l_ver_label_hist_rec.NEW_ACTIVE_START_DATE   ,
          p_OLD_ACTIVE_END_DATE         => l_ver_label_hist_rec.OLD_ACTIVE_END_DATE    ,
          p_NEW_ACTIVE_END_DATE         => l_ver_label_hist_rec.NEW_ACTIVE_END_DATE     ,
          p_OLD_CONTEXT                 => l_ver_label_hist_rec.OLD_CONTEXT            ,
          p_NEW_CONTEXT                 => l_ver_label_hist_rec.NEW_CONTEXT    ,
          p_OLD_ATTRIBUTE1              => l_ver_label_hist_rec.OLD_ATTRIBUTE1,
          p_NEW_ATTRIBUTE1              => l_ver_label_hist_rec.NEW_ATTRIBUTE1 ,
          p_OLD_ATTRIBUTE2              => l_ver_label_hist_rec.OLD_ATTRIBUTE2,
          p_NEW_ATTRIBUTE2              => l_ver_label_hist_rec.NEW_ATTRIBUTE2 ,
          p_OLD_ATTRIBUTE3              => l_ver_label_hist_rec.OLD_ATTRIBUTE3,
          p_NEW_ATTRIBUTE3              => l_ver_label_hist_rec.NEW_ATTRIBUTE3 ,
          p_OLD_ATTRIBUTE4              => l_ver_label_hist_rec.OLD_ATTRIBUTE4,
          p_NEW_ATTRIBUTE4              => l_ver_label_hist_rec.NEW_ATTRIBUTE4 ,
          p_OLD_ATTRIBUTE5              => l_ver_label_hist_rec.OLD_ATTRIBUTE5,
          p_NEW_ATTRIBUTE5              => l_ver_label_hist_rec.NEW_ATTRIBUTE5 ,
          p_OLD_ATTRIBUTE6              => l_ver_label_hist_rec.OLD_ATTRIBUTE6,
          p_NEW_ATTRIBUTE6              => l_ver_label_hist_rec.NEW_ATTRIBUTE6 ,
          p_OLD_ATTRIBUTE7              => l_ver_label_hist_rec.OLD_ATTRIBUTE7,
          p_NEW_ATTRIBUTE7              => l_ver_label_hist_rec.NEW_ATTRIBUTE7 ,
          p_OLD_ATTRIBUTE8              => l_ver_label_hist_rec.OLD_ATTRIBUTE8,
          p_NEW_ATTRIBUTE8              => l_ver_label_hist_rec.NEW_ATTRIBUTE8 ,
          p_OLD_ATTRIBUTE9              => l_ver_label_hist_rec.OLD_ATTRIBUTE9,
          p_NEW_ATTRIBUTE9              => l_ver_label_hist_rec.NEW_ATTRIBUTE9 ,
          p_OLD_ATTRIBUTE10             => l_ver_label_hist_rec.OLD_ATTRIBUTE10,
          p_NEW_ATTRIBUTE10             => l_ver_label_hist_rec.NEW_ATTRIBUTE10,
          p_OLD_ATTRIBUTE11             => l_ver_label_hist_rec.OLD_ATTRIBUTE11,
          p_NEW_ATTRIBUTE11             => l_ver_label_hist_rec.NEW_ATTRIBUTE11,
          p_OLD_ATTRIBUTE12             => l_ver_label_hist_rec.OLD_ATTRIBUTE12,
          p_NEW_ATTRIBUTE12             => l_ver_label_hist_rec.NEW_ATTRIBUTE12,
          p_OLD_ATTRIBUTE13             => l_ver_label_hist_rec.OLD_ATTRIBUTE13,
          p_NEW_ATTRIBUTE13             => l_ver_label_hist_rec.NEW_ATTRIBUTE13,
          p_OLD_ATTRIBUTE14             => l_ver_label_hist_rec.OLD_ATTRIBUTE14,
          p_NEW_ATTRIBUTE14             => l_ver_label_hist_rec.NEW_ATTRIBUTE14,
          p_OLD_ATTRIBUTE15             => l_ver_label_hist_rec.OLD_ATTRIBUTE15,
          p_NEW_ATTRIBUTE15             => l_ver_label_hist_rec.NEW_ATTRIBUTE15,
          p_FULL_DUMP_FLAG              => 'N'                            ,
          p_CREATED_BY                  => FND_GLOBAL.USER_ID             ,
          p_CREATION_DATE               => SYSDATE                        ,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID             ,
          p_LAST_UPDATE_DATE            => SYSDATE                        ,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.LOGIN_ID            ,
          p_OBJECT_VERSION_NUMBER       => 1                              );


    END IF;

   END;
     -- End of modification for Bug#2547034 on 09/20/02 - rtalluri
      --
      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
      END IF;

      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
         p_data       =>       x_msg_data );

EXCEPTION
        WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO update_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (        p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count,
                    p_data         =>      x_msg_data);
      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO update_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (     p_encoded => FND_API.G_FALSE,
                    p_count         =>      X_msg_count,
                    p_data          =>      X_msg_data);
      WHEN OTHERS THEN
            ROLLBACK TO update_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF FND_MSG_PUB.Check_Msg_Level
                 (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                         FND_MSG_PUB.Add_Exc_Msg
                    ( G_PKG_NAME, l_api_name );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (      p_encoded => FND_API.G_FALSE,
                   p_count       =>      x_msg_count,
                    p_data        =>      x_msg_data );
END update_version_label;

/*---------------------------------------------*/
/* Procedure name: expire_version_label        */
/* Description :   procedure for Update        */
/*                 version label for           */
/*                 an Item Instance            */
/*---------------------------------------------*/

PROCEDURE expire_version_label
 (    p_api_version                 IN  NUMBER
     ,p_commit                      IN  VARCHAR2
     ,p_init_msg_list               IN  VARCHAR2
     ,p_validation_level            IN  NUMBER
     ,p_version_label_rec           IN  csi_datastructures_pub.version_label_rec
     ,p_txn_rec                     IN OUT NOCOPY csi_datastructures_pub.transaction_rec
     ,x_return_status               OUT NOCOPY VARCHAR2
     ,x_msg_count                   OUT NOCOPY NUMBER
     ,x_msg_data                    OUT NOCOPY VARCHAR2
   ) IS
      l_api_name                   CONSTANT VARCHAR2(30)   := 'EXPIRE_VERSION_LABEL';
      l_api_version                   CONSTANT NUMBER            := 1.0;
      l_debug_level                     NUMBER;
      l_version_label_rec        csi_datastructures_pub.version_label_rec;
      l_curr_ver_label_rec       csi_datastructures_pub.version_label_rec;
      l_msg_index                NUMBER;
      l_OBJECT_VERSION_NUMBER    NUMBER;
      l_mod_value                NUMBER;
      l_version_label_hist_id    NUMBER;
      x_msg_index_out            NUMBER;
      l_full_dump_frequency      NUMBER;
      l_flag                     VARCHAR2(1)  :='N';

  CURSOR get_curr_ver_label_rec (p_ver_label_id   IN  NUMBER) IS
   SELECT
     VERSION_LABEL_ID                 ,
     INSTANCE_ID                      ,
     VERSION_LABEL                    ,
     DESCRIPTION                      ,
     DATE_TIME_STAMP                  ,
     active_start_date                ,
     active_end_date                  ,
     context                          ,
     attribute1                       ,
     attribute2                       ,
     attribute3                       ,
     attribute4                       ,
     attribute5                       ,
     attribute6                       ,
     attribute7                       ,
     attribute8                       ,
     attribute9                       ,
     attribute10                      ,
     attribute11                      ,
     attribute12                      ,
     attribute13                      ,
     attribute14                      ,
     attribute15                      ,
     object_version_number            --,
    -- null parent_tbl_index                 ,
    -- null processed_flag                   ,
    -- null interface_id
    FROM CSI_I_VERSION_LABELS
   WHERE VERSION_LABEL_ID = p_ver_label_id
    AND (( ACTIVE_END_DATE IS NULL) OR (ACTIVE_END_DATE >= SYSDATE))
    FOR UPDATE OF OBJECT_VERSION_NUMBER ;

BEGIN
      -- Standard Start of API savepoint
    SAVEPOINT  expire_version_label_pvt;

        -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version            ,
                                                           p_api_version           ,
                                                     l_api_name                 ,
                                                    G_PKG_NAME                 )
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
      IF FND_API.to_Boolean( p_init_msg_list ) THEN
            FND_MSG_PUB.initialize;
      END IF;
      --  Initialize API return status to success
      x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Check the profile option debug_level for debug message reporting
    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
         CSI_gen_utility_pvt.put_line( 'update_version_label');
    END IF;

    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
             CSI_gen_utility_pvt.put_line( 'update_version_label:'||
                                                 p_api_version             ||'-'||
                                                p_commit                  ||'-'||
                                                 p_init_msg_list                 );
      END IF;

     -- Start API body

    -- Check if all the required parameters are passed
        CSI_Instance_parties_vld_pvt.Check_Reqd_Param_num
            (    p_version_label_rec.version_label_id  ,
                '  p_version_label_rec.version_label_id  ',
                   l_api_name           );

     CSI_Instance_parties_vld_pvt.Check_Reqd_Param_num
            (    p_version_label_rec.object_version_number  ,
                '  p_version_label_rec.object_version_number  ',
                   l_api_name           );

     CSI_Instance_parties_vld_pvt.Check_Reqd_Param_date
            (    p_version_label_rec.active_end_date  ,
                '  p_version_label_rec.active_end_date  ',
                   l_api_name           );

     IF  p_version_label_rec.version_label_id <> FND_API.G_MISS_NUM THEN
          -- Validate the version label id if exist then raise CSI_API_INVALID_PRIMARY_KEY error
          IF NOT(CSI_Instance_parties_vld_pvt.Is_Ver_labelID_exists
                                          (p_version_label_rec.version_label_id,
                                           FALSE                        )) THEN
                RAISE FND_API.G_EXC_ERROR;
          END IF;
     END IF;

     -- check if the object_version_number passed matches with the one
     -- in the database else raise error
     OPEN get_curr_ver_label_rec(p_version_label_rec.version_label_id);
     FETCH get_curr_ver_label_rec INTO l_curr_ver_label_rec;
     IF  (l_curr_ver_label_rec.object_version_number <> nvl(p_version_label_rec.OBJECT_VERSION_NUMBER,-1)) THEN
            FND_MESSAGE.Set_Name('CSI', 'CSI_API_OBJ_VER_MISMATCH');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
     END IF;

     IF get_curr_ver_label_rec%NOTFOUND THEN
        FND_MESSAGE.Set_Name('CSI', 'CSI_API_RECORD_LOCKED');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
     END IF;
     CLOSE get_curr_ver_label_rec;

     -- Increment the object_version_number before updating
     l_OBJECT_VERSION_NUMBER := l_curr_ver_label_rec.OBJECT_VERSION_NUMBER + 1 ;

     CSI_I_VERSION_LABELS_PKG.Update_Row(
          p_VERSION_LABEL_ID    =>  p_version_label_rec.version_label_id,
          p_INSTANCE_ID         =>  l_version_label_rec.instance_id,
          p_VERSION_LABEL       =>  l_version_label_rec.VERSION_LABEL,
          p_DATE_TIME_STAMP     =>  l_version_label_rec.DATE_TIME_STAMP,
          p_DESCRIPTION         =>  l_version_label_rec.DESCRIPTION  ,
          p_ACTIVE_START_DATE   =>  l_version_label_rec.ACTIVE_START_DATE,
          p_ACTIVE_END_DATE     =>  p_version_label_rec.ACTIVE_END_DATE,
          p_CONTEXT             =>  l_version_label_rec.CONTEXT  ,
          p_ATTRIBUTE1          =>  l_version_label_rec.ATTRIBUTE1,
          p_ATTRIBUTE2          =>  l_version_label_rec.ATTRIBUTE2,
          p_ATTRIBUTE3          =>  l_version_label_rec.ATTRIBUTE3,
          p_ATTRIBUTE4          =>  l_version_label_rec.ATTRIBUTE4,
          p_ATTRIBUTE5          =>  l_version_label_rec.ATTRIBUTE5,
          p_ATTRIBUTE6          =>  l_version_label_rec.ATTRIBUTE6,
          p_ATTRIBUTE7          =>  l_version_label_rec.ATTRIBUTE7,
          p_ATTRIBUTE8          =>  l_version_label_rec.ATTRIBUTE8,
          p_ATTRIBUTE9          =>  l_version_label_rec.ATTRIBUTE9,
          p_ATTRIBUTE10         =>  l_version_label_rec.ATTRIBUTE10,
          p_ATTRIBUTE11         =>  l_version_label_rec.ATTRIBUTE11,
          p_ATTRIBUTE12         =>  l_version_label_rec.ATTRIBUTE12,
          p_ATTRIBUTE13         =>  l_version_label_rec.ATTRIBUTE13,
          p_ATTRIBUTE14         =>  l_version_label_rec.ATTRIBUTE14,
          p_ATTRIBUTE15         =>  l_version_label_rec.ATTRIBUTE15,
          p_CREATED_BY          =>  fnd_api.g_miss_num ,
          p_CREATION_DATE       =>  fnd_api.g_miss_date ,
          p_LAST_UPDATED_BY     =>  FND_GLOBAL.USER_ID ,
          p_LAST_UPDATE_DATE    =>  sysdate            ,
          p_LAST_UPDATE_LOGIN   =>  FND_GLOBAL.LOGIN_ID  ,
          p_OBJECT_VERSION_NUMBER => l_OBJECT_VERSION_NUMBER );


         -- Call create_transaction to create txn log
         CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_If_Exists_Flag => 'Y'
            ,P_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data         );

          IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              FOR i in 1..x_msg_Count LOOP
                FND_MSG_PUB.Get(p_msg_index     => i,
                                p_encoded       => 'F',
                                p_data          => x_msg_data,
                                p_msg_index_out => x_msg_index_out );
                CSI_gen_utility_pvt.put_line( 'message data = '||x_msg_data);
              End LOOP;
              RAISE FND_API.G_EXC_ERROR;
          END IF;

    -- Generate a unique instance_party_history_id from the sequence
    l_version_label_hist_id   := CSI_Instance_parties_vld_pvt.gen_ver_label_hist_id;

    -- Get the full_dump_frequency from csi_install_parameter
    IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
       csi_gen_utility_pvt.populate_install_param_rec;
    END IF;
    --
    l_full_dump_frequency := csi_datastructures_pub.g_install_param_rec.history_full_dump_frequency;
    --
    IF l_full_dump_frequency IS NULL THEN
       FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_FULL_DUMP_FAILED');
       FND_MSG_PUB.ADD;
       RAISE FND_API.G_EXC_ERROR;
    END IF;

    select mod(l_object_version_number,l_full_dump_frequency)
    into   l_mod_value
    from   dual;

    IF (l_mod_value = 0) THEN
       -- If the mod value is 0 then dump all the columns both changed and unchanged
       -- changed columns have old and new values while the unchanged values have old and new values
       -- exactly same

       -- Call the table handlers to insert into history table
       CSI_I_VERSION_LABELS_H_PKG.Insert_Row
       (
          px_VERSION_LABEL_HISTORY_ID   => l_version_label_hist_id                 ,
          p_VERSION_LABEL_ID            => p_version_label_rec.version_label_id    ,
          p_TRANSACTION_ID              => p_txn_rec.TRANSACTION_ID                ,
          p_OLD_VERSION_LABEL           => l_curr_ver_label_rec.VERSION_LABEL      ,
          p_NEW_VERSION_LABEL           => l_curr_ver_label_rec.VERSION_LABEL      ,
          p_OLD_DESCRIPTION             => l_curr_ver_label_rec.DESCRIPTION        ,
          p_NEW_DESCRIPTION             => l_curr_ver_label_rec.DESCRIPTION        ,
          p_OLD_DATE_TIME_STAMP         => l_curr_ver_label_rec.DATE_TIME_STAMP    ,
          p_NEW_DATE_TIME_STAMP         => l_curr_ver_label_rec.DATE_TIME_STAMP    ,
          p_OLD_ACTIVE_START_DATE       => l_curr_ver_label_rec.ACTIVE_START_DATE  ,
          p_NEW_ACTIVE_START_DATE       => l_curr_ver_label_rec.ACTIVE_START_DATE  ,
          p_OLD_ACTIVE_END_DATE         => l_curr_ver_label_rec.ACTIVE_END_DATE    ,
          p_NEW_ACTIVE_END_DATE         => p_version_label_rec.ACTIVE_END_DATE     ,
          p_OLD_CONTEXT                 => l_curr_ver_label_rec.CONTEXT    ,
          p_NEW_CONTEXT                 => l_curr_ver_label_rec.CONTEXT    ,
          p_OLD_ATTRIBUTE1              => l_curr_ver_label_rec.ATTRIBUTE1 ,
          p_NEW_ATTRIBUTE1              => l_curr_ver_label_rec.ATTRIBUTE1 ,
          p_OLD_ATTRIBUTE2              => l_curr_ver_label_rec.ATTRIBUTE2 ,
          p_NEW_ATTRIBUTE2              => l_curr_ver_label_rec.ATTRIBUTE2 ,
          p_OLD_ATTRIBUTE3              => l_curr_ver_label_rec.ATTRIBUTE3 ,
          p_NEW_ATTRIBUTE3              => l_curr_ver_label_rec.ATTRIBUTE3 ,
          p_OLD_ATTRIBUTE4              => l_curr_ver_label_rec.ATTRIBUTE4 ,
          p_NEW_ATTRIBUTE4              => l_curr_ver_label_rec.ATTRIBUTE4 ,
          p_OLD_ATTRIBUTE5              => l_curr_ver_label_rec.ATTRIBUTE5 ,
          p_NEW_ATTRIBUTE5              => l_curr_ver_label_rec.ATTRIBUTE5 ,
          p_OLD_ATTRIBUTE6              => l_curr_ver_label_rec.ATTRIBUTE6 ,
          p_NEW_ATTRIBUTE6              => l_curr_ver_label_rec.ATTRIBUTE6 ,
          p_OLD_ATTRIBUTE7              => l_curr_ver_label_rec.ATTRIBUTE7 ,
          p_NEW_ATTRIBUTE7              => l_curr_ver_label_rec.ATTRIBUTE7 ,
          p_OLD_ATTRIBUTE8              => l_curr_ver_label_rec.ATTRIBUTE8 ,
          p_NEW_ATTRIBUTE8              => l_curr_ver_label_rec.ATTRIBUTE8 ,
          p_OLD_ATTRIBUTE9              => l_curr_ver_label_rec.ATTRIBUTE9 ,
          p_NEW_ATTRIBUTE9              => l_curr_ver_label_rec.ATTRIBUTE9 ,
          p_OLD_ATTRIBUTE10             => l_curr_ver_label_rec.ATTRIBUTE10,
          p_NEW_ATTRIBUTE10             => l_curr_ver_label_rec.ATTRIBUTE10,
          p_OLD_ATTRIBUTE11             => l_curr_ver_label_rec.ATTRIBUTE11,
          p_NEW_ATTRIBUTE11             => l_curr_ver_label_rec.ATTRIBUTE11,
          p_OLD_ATTRIBUTE12             => l_curr_ver_label_rec.ATTRIBUTE12,
          p_NEW_ATTRIBUTE12             => l_curr_ver_label_rec.ATTRIBUTE12,
          p_OLD_ATTRIBUTE13             => l_curr_ver_label_rec.ATTRIBUTE13,
          p_NEW_ATTRIBUTE13             => l_curr_ver_label_rec.ATTRIBUTE13,
          p_OLD_ATTRIBUTE14             => l_curr_ver_label_rec.ATTRIBUTE14,
          p_NEW_ATTRIBUTE14             => l_curr_ver_label_rec.ATTRIBUTE14,
          p_OLD_ATTRIBUTE15             => l_curr_ver_label_rec.ATTRIBUTE15,
          p_NEW_ATTRIBUTE15             => l_curr_ver_label_rec.ATTRIBUTE15,
          p_FULL_DUMP_FLAG              => 'Y'                            ,
          p_CREATED_BY                  => FND_GLOBAL.USER_ID             ,
          p_CREATION_DATE               => SYSDATE                        ,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID             ,
          p_LAST_UPDATE_DATE            => SYSDATE                        ,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.LOGIN_ID            ,
          p_OBJECT_VERSION_NUMBER       => 1                              );


       ELSE
          -- If the mod value is not equal to zero then dump only the changed columns
          -- while the unchanged values have old and new values as null

       -- Call the table handlers to insert into history table
       CSI_I_VERSION_LABELS_H_PKG.Insert_Row
       (
          px_VERSION_LABEL_HISTORY_ID   => l_version_label_hist_id                 ,
          p_VERSION_LABEL_ID            => p_version_label_rec.version_label_id    ,
          p_TRANSACTION_ID              => p_txn_rec.TRANSACTION_ID                ,
          p_OLD_VERSION_LABEL           => l_version_label_rec.VERSION_LABEL       ,
          p_NEW_VERSION_LABEL           => l_version_label_rec.VERSION_LABEL       ,
          p_OLD_DESCRIPTION             => l_version_label_rec.DESCRIPTION         ,
          p_NEW_DESCRIPTION             => l_version_label_rec.DESCRIPTION         ,
          p_OLD_DATE_TIME_STAMP         => l_version_label_rec.DATE_TIME_STAMP     ,
          p_NEW_DATE_TIME_STAMP         => l_version_label_rec.DATE_TIME_STAMP     ,
          p_OLD_ACTIVE_START_DATE       => l_version_label_rec.ACTIVE_START_DATE   ,
          p_NEW_ACTIVE_START_DATE       => l_version_label_rec.ACTIVE_START_DATE   ,
          p_OLD_ACTIVE_END_DATE         => l_version_label_rec.ACTIVE_END_DATE     ,
          p_NEW_ACTIVE_END_DATE         => p_version_label_rec.ACTIVE_END_DATE     ,
          p_OLD_CONTEXT                 => l_version_label_rec.CONTEXT             ,
          p_NEW_CONTEXT                 => l_version_label_rec.CONTEXT             ,
          p_OLD_ATTRIBUTE1              => l_version_label_rec.ATTRIBUTE1          ,
          p_NEW_ATTRIBUTE1              => l_version_label_rec.ATTRIBUTE1          ,
          p_OLD_ATTRIBUTE2              => l_version_label_rec.ATTRIBUTE2          ,
          p_NEW_ATTRIBUTE2              => l_version_label_rec.ATTRIBUTE2          ,
          p_OLD_ATTRIBUTE3              => l_version_label_rec.ATTRIBUTE3          ,
          p_NEW_ATTRIBUTE3              => l_version_label_rec.ATTRIBUTE3          ,
          p_OLD_ATTRIBUTE4              => l_version_label_rec.ATTRIBUTE4          ,
          p_NEW_ATTRIBUTE4              => l_version_label_rec.ATTRIBUTE4          ,
          p_OLD_ATTRIBUTE5              => l_version_label_rec.ATTRIBUTE5          ,
          p_NEW_ATTRIBUTE5              => l_version_label_rec.ATTRIBUTE5          ,
          p_OLD_ATTRIBUTE6              => l_version_label_rec.ATTRIBUTE6          ,
          p_NEW_ATTRIBUTE6              => l_version_label_rec.ATTRIBUTE6          ,
          p_OLD_ATTRIBUTE7              => l_version_label_rec.ATTRIBUTE7          ,
          p_NEW_ATTRIBUTE7              => l_version_label_rec.ATTRIBUTE7          ,
          p_OLD_ATTRIBUTE8              => l_version_label_rec.ATTRIBUTE8          ,
          p_NEW_ATTRIBUTE8              => l_version_label_rec.ATTRIBUTE8          ,
          p_OLD_ATTRIBUTE9              => l_version_label_rec.ATTRIBUTE9          ,
          p_NEW_ATTRIBUTE9              => l_version_label_rec.ATTRIBUTE9          ,
          p_OLD_ATTRIBUTE10             => l_version_label_rec.ATTRIBUTE10         ,
          p_NEW_ATTRIBUTE10             => l_version_label_rec.ATTRIBUTE10         ,
          p_OLD_ATTRIBUTE11             => l_version_label_rec.ATTRIBUTE11         ,
          p_NEW_ATTRIBUTE11             => l_version_label_rec.ATTRIBUTE11         ,
          p_OLD_ATTRIBUTE12             => l_version_label_rec.ATTRIBUTE12         ,
          p_NEW_ATTRIBUTE12             => l_version_label_rec.ATTRIBUTE12         ,
          p_OLD_ATTRIBUTE13             => l_version_label_rec.ATTRIBUTE13         ,
          p_NEW_ATTRIBUTE13             => l_version_label_rec.ATTRIBUTE13         ,
          p_OLD_ATTRIBUTE14             => l_version_label_rec.ATTRIBUTE14         ,
          p_NEW_ATTRIBUTE14             => l_version_label_rec.ATTRIBUTE14         ,
          p_OLD_ATTRIBUTE15             => l_version_label_rec.ATTRIBUTE15         ,
          p_NEW_ATTRIBUTE15             => l_version_label_rec.ATTRIBUTE15         ,
          p_FULL_DUMP_FLAG              => 'N'                            ,
          p_CREATED_BY                  => FND_GLOBAL.USER_ID             ,
          p_CREATION_DATE               => SYSDATE                        ,
          p_LAST_UPDATED_BY             => FND_GLOBAL.USER_ID             ,
          p_LAST_UPDATE_DATE            => SYSDATE                        ,
          p_LAST_UPDATE_LOGIN           => FND_GLOBAL.LOGIN_ID            ,
          p_OBJECT_VERSION_NUMBER       => 1                              );


    END IF;
      --
      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
      END IF;

      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
            (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
         p_data       =>       x_msg_data      );
EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO expire_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (      p_encoded => FND_API.G_FALSE,
                   p_count   =>      x_msg_count,
                    p_data    =>      x_msg_data);
      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO expire_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (       p_encoded => FND_API.G_FALSE,
                  p_count        =>      x_msg_count,
                    p_data         =>      x_msg_data);
      WHEN OTHERS THEN
            ROLLBACK TO expire_version_label_pvt;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF FND_MSG_PUB.Check_Msg_Level
                 (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                         FND_MSG_PUB.Add_Exc_Msg
                    ( G_PKG_NAME, l_api_name );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (     p_encoded => FND_API.G_FALSE,
                    p_count         =>      x_msg_count,
                    p_data         =>      x_msg_data);
END expire_version_label;

/*----------------------------------------------------------*/
/* Procedure name:  Initialize_ext_rec_no_dump              */
/* Description : This procedure initialises the first       */
/*                  record from the history                 */
/*----------------------------------------------------------*/

PROCEDURE Initialize_ext_rec_no_dump
(
 x_ext_rec               IN OUT  NOCOPY csi_datastructures_pub.extend_attrib_values_rec,
 p_ext_id              IN      NUMBER,
 x_no_dump     IN OUT  NOCOPY DATE
) IS

  CURSOR Int_no_dump(p_ext_id IN NUMBER ) IS
  SELECT    creation_date,
            NEW_attribute_value,
            NEW_active_start_date,
            NEW_active_end_date,
            NEW_context,
            NEW_attribute1 ,
            NEW_attribute2,
            NEW_attribute3,
            NEW_attribute4,
            NEW_attribute5,
            NEW_attribute6,
            NEW_attribute7,
            NEW_attribute8,
            NEW_attribute9,
            NEW_attribute10,
            NEW_attribute11,
            NEW_attribute12,
            NEW_attribute13,
            NEW_attribute14,
            NEW_attribute15
  FROM      csi_iea_values_h
  WHERE     attribute_value_id = p_ext_id
  ORDER BY  creation_date;

BEGIN

  FOR C1 IN Int_no_dump(p_ext_id)
  LOOP
   IF Int_no_dump%ROWCOUNT = 1 THEN
    x_no_dump                   := C1.creation_date;
    x_ext_rec.attribute_value   := C1.NEW_attribute_value;
    x_ext_rec.active_start_date := C1.NEW_active_start_date;
    x_ext_rec.active_end_date   := C1.NEW_active_end_date;
    x_ext_rec.context           := C1.NEW_context;
    x_ext_rec.attribute1        := C1.NEW_attribute1;
    x_ext_rec.attribute2        := C1.NEW_attribute2;
    x_ext_rec.attribute3        := C1.NEW_attribute3;
    x_ext_rec.attribute4        := C1.NEW_attribute4;
    x_ext_rec.attribute5        := C1.NEW_attribute5;
    x_ext_rec.attribute6        := C1.NEW_attribute6;
    x_ext_rec.attribute7        := C1.NEW_attribute7;
    x_ext_rec.attribute8        := C1.NEW_attribute8;
    x_ext_rec.attribute9        := C1.NEW_attribute9;
    x_ext_rec.attribute10       := C1.NEW_attribute10;
    x_ext_rec.attribute11       := C1.NEW_attribute11;
    x_ext_rec.attribute12       := C1.NEW_attribute12;
    x_ext_rec.attribute13       := C1.NEW_attribute13;
    x_ext_rec.attribute14       := C1.NEW_attribute14;
    x_ext_rec.attribute15       := C1.NEW_attribute15;
   ELSE
    EXIT;
   END IF;
  END LOOP;
END Initialize_ext_rec_no_dump;


/*----------------------------------------------------------*/
/* Procedure name:  Initialize_ext_rec                      */
/* Description : This procudure recontructs the record      */
/*                 from the history                         */
/*----------------------------------------------------------*/

PROCEDURE Initialize_ext_rec
(
 x_ext_rec               IN OUT  NOCOPY csi_datastructures_pub.extend_attrib_values_rec,
 p_ext_h_id              IN      NUMBER,
 x_nearest_full_dump     IN OUT  NOCOPY DATE
) IS

  CURSOR Int_nearest_full_dump(p_ext_hist_id IN NUMBER ) IS
  SELECT    creation_date,
            NEW_attribute_value,
            NEW_active_start_date,
            NEW_active_end_date,
            NEW_context,
            NEW_attribute1 ,
            NEW_attribute2,
            NEW_attribute3,
            NEW_attribute4,
            NEW_attribute5,
            NEW_attribute6,
            NEW_attribute7,
            NEW_attribute8,
            NEW_attribute9,
            NEW_attribute10,
            NEW_attribute11,
            NEW_attribute12,
            NEW_attribute13,
            NEW_attribute14,
            NEW_attribute15
  FROM      csi_iea_values_h
  WHERE     attribute_value_history_id = p_ext_hist_id
  AND       full_dump_flag = 'Y';

BEGIN

  FOR C1 IN Int_nearest_full_dump(p_ext_h_id)
  LOOP
    x_nearest_full_dump         := C1.creation_date;
    x_ext_rec.attribute_value   := C1.NEW_attribute_value;
    x_ext_rec.active_start_date := C1.NEW_active_start_date;
    x_ext_rec.active_end_date   := C1.NEW_active_end_date;
    x_ext_rec.context           := C1.NEW_context;
    x_ext_rec.attribute1        := C1.NEW_attribute1;
    x_ext_rec.attribute2        := C1.NEW_attribute2;
    x_ext_rec.attribute3        := C1.NEW_attribute3;
    x_ext_rec.attribute4        := C1.NEW_attribute4;
    x_ext_rec.attribute5        := C1.NEW_attribute5;
    x_ext_rec.attribute6        := C1.NEW_attribute6;
    x_ext_rec.attribute7        := C1.NEW_attribute7;
    x_ext_rec.attribute8        := C1.NEW_attribute8;
    x_ext_rec.attribute9        := C1.NEW_attribute9;
    x_ext_rec.attribute10       := C1.NEW_attribute10;
    x_ext_rec.attribute11       := C1.NEW_attribute11;
    x_ext_rec.attribute12       := C1.NEW_attribute12;
    x_ext_rec.attribute13       := C1.NEW_attribute13;
    x_ext_rec.attribute14       := C1.NEW_attribute14;
    x_ext_rec.attribute15       := C1.NEW_attribute15;
  END LOOP;
END Initialize_ext_rec ;



/*----------------------------------------------------------*/
/* Procedure name:  Construct_ext_from_hist                 */
/* Description : This procudure recontructs the record      */
/*                 from the history                         */
/*----------------------------------------------------------*/

PROCEDURE Construct_ext_from_hist
( x_ext_tbl           IN OUT  NOCOPY  csi_datastructures_pub.extend_attrib_values_tbl,
  p_time_stamp        IN       DATE
 ) IS

 l_nearest_full_dump      DATE := p_time_stamp;
 l_att_val_hist_id        NUMBER;
 l_ext_tbl                csi_datastructures_pub.extend_attrib_values_tbl;
 l_ext_count              NUMBER := 0;
 --
 Process_next             EXCEPTION;

 CURSOR get_nearest_full_dump(p_att_val_id IN NUMBER ,p_time IN DATE) IS
 SELECT MAX(attribute_value_history_id)
 FROM   csi_iea_values_h
 WHERE  creation_date <= p_time
 AND    attribute_value_id = p_att_val_id
 AND    full_dump_flag = 'Y' ;


 CURSOR get_ext_hist(p_att_val_id IN NUMBER ,
                     p_nearest_full_dump IN DATE,
                     p_time IN DATE ) IS
 SELECT    attribute_value_history_id,
           OLD_ATTRIBUTE_VALUE    ,
           NEW_ATTRIBUTE_VALUE,
           OLD_ACTIVE_START_DATE,
           NEW_ACTIVE_START_DATE,
           OLD_ACTIVE_END_DATE  ,
           NEW_ACTIVE_END_DATE  ,
           OLD_CONTEXT      ,
           NEW_CONTEXT      ,
           OLD_ATTRIBUTE1   ,
           NEW_ATTRIBUTE1   ,
           OLD_ATTRIBUTE2   ,
           NEW_ATTRIBUTE2   ,
           OLD_ATTRIBUTE3   ,
           NEW_ATTRIBUTE3   ,
           OLD_ATTRIBUTE4   ,
           NEW_ATTRIBUTE4   ,
           OLD_ATTRIBUTE5   ,
           NEW_ATTRIBUTE5   ,
           OLD_ATTRIBUTE6   ,
           NEW_ATTRIBUTE6   ,
           OLD_ATTRIBUTE7   ,
           NEW_ATTRIBUTE7   ,
           OLD_ATTRIBUTE8   ,
           NEW_ATTRIBUTE8   ,
           OLD_ATTRIBUTE9   ,
           NEW_ATTRIBUTE9   ,
           OLD_ATTRIBUTE10  ,
           NEW_ATTRIBUTE10  ,
           OLD_ATTRIBUTE11  ,
           NEW_ATTRIBUTE11  ,
           OLD_ATTRIBUTE12  ,
           NEW_ATTRIBUTE12  ,
           OLD_ATTRIBUTE13  ,
           NEW_ATTRIBUTE13  ,
           OLD_ATTRIBUTE14  ,
           NEW_ATTRIBUTE14  ,
           OLD_ATTRIBUTE15  ,
           NEW_ATTRIBUTE15
  FROM     csi_iea_values_h
  WHERE    creation_date <= p_time
  AND      creation_date >= p_nearest_full_dump
  AND      attribute_value_id = p_att_val_id
  ORDER BY creation_date;

  l_time_stamp  DATE := p_time_stamp;

BEGIN
  l_ext_tbl := x_ext_tbl;
  IF l_ext_tbl.COUNT > 0 THEN
    FOR i IN l_ext_tbl.FIRST..l_ext_tbl.LAST LOOP
     BEGIN
        OPEN get_nearest_full_dump(l_ext_tbl(i).attribute_value_id, p_time_stamp);
        FETCH get_nearest_full_dump INTO l_att_val_hist_id ;
        CLOSE get_nearest_full_dump;

        IF  l_att_val_hist_id IS NOT NULL THEN
           Initialize_ext_rec( l_ext_tbl(i), l_att_val_hist_id  ,l_nearest_full_dump);
        ELSE
           Initialize_ext_rec_no_dump( l_ext_tbl(i), l_ext_tbl(i).attribute_value_id, l_time_stamp);

           l_nearest_full_dump :=  l_time_stamp;
         -- If the user chooses a date before the creation date of the instance
         -- then raise an error
           IF p_time_stamp < l_time_stamp THEN
              -- Messages Commented for bug 2423342. Records that do not qualify should get deleted.
              -- FND_MESSAGE.SET_NAME('CSI','CSI_H_DATE_BEFORE_CRE_DATE');
              -- FND_MESSAGE.SET_TOKEN('CREATION_DATE',to_char(l_time_stamp, 'DD-MON-YYYY HH24:MI:SS'));
              -- FND_MESSAGE.SET_TOKEN('USER_DATE',to_char(p_time_stamp, 'DD-MON-YYYY HH24:MI:SS'));
              -- FND_MSG_PUB.Add;
              -- RAISE FND_API.G_EXC_ERROR;
              l_ext_tbl.DELETE(i);
              RAISE Process_next;
           END IF;
        END IF;

        FOR C2 IN get_ext_hist(l_ext_tbl(i).attribute_value_id ,l_nearest_full_dump,p_time_stamp )
        LOOP
              IF (C2.OLD_ATTRIBUTE_VALUE IS NULL AND C2.NEW_ATTRIBUTE_VALUE IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE_VALUE IS NOT NULL AND C2.NEW_ATTRIBUTE_VALUE IS NULL)
              OR (C2.OLD_ATTRIBUTE_VALUE <> C2.NEW_ATTRIBUTE_VALUE) THEN
                            l_ext_tbl(i).ATTRIBUTE_VALUE := C2.NEW_ATTRIBUTE_VALUE;
              END IF;

              IF (C2.OLD_ACTIVE_START_DATE IS NULL AND C2.NEW_ACTIVE_START_DATE IS NOT NULL)
              OR (C2.OLD_ACTIVE_START_DATE IS NOT NULL AND C2.NEW_ACTIVE_START_DATE IS NULL)
              OR (C2.OLD_ACTIVE_START_DATE <> C2.NEW_ACTIVE_START_DATE) THEN
                   l_ext_tbl(i).ACTIVE_START_DATE := C2.NEW_ACTIVE_START_DATE;
              END IF;


              IF (C2.OLD_ACTIVE_END_DATE IS NULL AND C2.NEW_ACTIVE_END_DATE IS NOT NULL)
              OR (C2.OLD_ACTIVE_END_DATE IS NOT NULL AND C2.NEW_ACTIVE_END_DATE IS NULL)
              OR (C2.OLD_ACTIVE_END_DATE <> C2.NEW_ACTIVE_END_DATE) THEN
                   l_ext_tbl(i).ACTIVE_END_DATE := C2.NEW_ACTIVE_END_DATE;
              END IF;


              IF (C2.OLD_CONTEXT IS NULL AND C2.NEW_CONTEXT IS NOT NULL)
              OR (C2.OLD_CONTEXT IS NOT NULL AND C2.NEW_CONTEXT IS NULL)
              OR (C2.OLD_CONTEXT <> C2.NEW_CONTEXT) THEN
                   l_ext_tbl(i).CONTEXT := C2.NEW_CONTEXT;
              END IF;

              IF (C2.OLD_ATTRIBUTE1 IS NULL AND C2.NEW_ATTRIBUTE1 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE1 IS NOT NULL AND C2.NEW_ATTRIBUTE1 IS NULL)
              OR (C2.OLD_ATTRIBUTE1 <> C2.NEW_ATTRIBUTE1) THEN
                   l_ext_tbl(i).ATTRIBUTE1 := C2.NEW_ATTRIBUTE1;
              END IF;

              IF (C2.OLD_ATTRIBUTE2 IS NULL AND C2.NEW_ATTRIBUTE2 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE2 IS NOT NULL AND C2.NEW_ATTRIBUTE2 IS NULL)
              OR (C2.OLD_ATTRIBUTE2 <> C2.NEW_ATTRIBUTE2) THEN
                   l_ext_tbl(i).ATTRIBUTE2 := C2.NEW_ATTRIBUTE2;
              END IF;

              IF (C2.OLD_ATTRIBUTE3 IS NULL AND C2.NEW_ATTRIBUTE3 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE3 IS NOT NULL AND C2.NEW_ATTRIBUTE3 IS NULL)
              OR (C2.OLD_ATTRIBUTE3 <> C2.NEW_ATTRIBUTE3) THEN
                   l_ext_tbl(i).ATTRIBUTE3 := C2.NEW_ATTRIBUTE3;
              END IF;

              IF (C2.OLD_ATTRIBUTE4 IS NULL AND C2.NEW_ATTRIBUTE4 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE4 IS NOT NULL AND C2.NEW_ATTRIBUTE4 IS NULL)
              OR (C2.OLD_ATTRIBUTE4 <> C2.NEW_ATTRIBUTE4) THEN
                   l_ext_tbl(i).ATTRIBUTE4 := C2.NEW_ATTRIBUTE4;
              END IF;


              IF (C2.OLD_ATTRIBUTE5 IS NULL AND C2.NEW_ATTRIBUTE5 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE5 IS NOT NULL AND C2.NEW_ATTRIBUTE5 IS NULL)
              OR (C2.OLD_ATTRIBUTE5 <> C2.NEW_ATTRIBUTE5) THEN
                   l_ext_tbl(i).ATTRIBUTE5 := C2.NEW_ATTRIBUTE5;
              END IF;


              IF (C2.OLD_ATTRIBUTE6 IS NULL AND C2.NEW_ATTRIBUTE6 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE6 IS NOT NULL AND C2.NEW_ATTRIBUTE6 IS NULL)
              OR (C2.OLD_ATTRIBUTE6 <> C2.NEW_ATTRIBUTE6) THEN
                   l_ext_tbl(i).ATTRIBUTE6 := C2.NEW_ATTRIBUTE6;
              END IF;

              IF (C2.OLD_ATTRIBUTE7 IS NULL AND C2.NEW_ATTRIBUTE7 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE7 IS NOT NULL AND C2.NEW_ATTRIBUTE7 IS NULL)
              OR (C2.OLD_ATTRIBUTE7 <> C2.NEW_ATTRIBUTE7) THEN
                   l_ext_tbl(i).ATTRIBUTE7 := C2.NEW_ATTRIBUTE7;
              END IF;

              IF (C2.OLD_ATTRIBUTE8 IS NULL AND C2.NEW_ATTRIBUTE8 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE8 IS NOT NULL AND C2.NEW_ATTRIBUTE8 IS NULL)
              OR (C2.OLD_ATTRIBUTE8 <> C2.NEW_ATTRIBUTE8) THEN
                   l_ext_tbl(i).ATTRIBUTE8 := C2.NEW_ATTRIBUTE8;
              END IF;

              IF (C2.OLD_ATTRIBUTE9 IS NULL AND C2.NEW_ATTRIBUTE9 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE9 IS NOT NULL AND C2.NEW_ATTRIBUTE9 IS NULL)
              OR (C2.OLD_ATTRIBUTE9 <> C2.NEW_ATTRIBUTE9) THEN
                   l_ext_tbl(i).ATTRIBUTE3 := C2.NEW_ATTRIBUTE3;
              END IF;


              IF (C2.OLD_ATTRIBUTE10 IS NULL AND C2.NEW_ATTRIBUTE10 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE10 IS NOT NULL AND C2.NEW_ATTRIBUTE10 IS NULL)
              OR (C2.OLD_ATTRIBUTE10 <> C2.NEW_ATTRIBUTE10) THEN
                   l_ext_tbl(i).ATTRIBUTE10 := C2.NEW_ATTRIBUTE10;
              END IF;



              IF (C2.OLD_ATTRIBUTE11 IS NULL AND C2.NEW_ATTRIBUTE11 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE11 IS NOT NULL AND C2.NEW_ATTRIBUTE11 IS NULL)
              OR (C2.OLD_ATTRIBUTE11 <> C2.NEW_ATTRIBUTE11) THEN
                   l_ext_tbl(i).ATTRIBUTE11 := C2.NEW_ATTRIBUTE11;
              END IF;

              IF (C2.OLD_ATTRIBUTE12 IS NULL AND C2.NEW_ATTRIBUTE12 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE12 IS NOT NULL AND C2.NEW_ATTRIBUTE12 IS NULL)
              OR (C2.OLD_ATTRIBUTE12 <> C2.NEW_ATTRIBUTE12) THEN
                   l_ext_tbl(i).ATTRIBUTE12 := C2.NEW_ATTRIBUTE12;
              END IF;


              IF (C2.OLD_ATTRIBUTE13 IS NULL AND C2.NEW_ATTRIBUTE13 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE13 IS NOT NULL AND C2.NEW_ATTRIBUTE13 IS NULL)
              OR (C2.OLD_ATTRIBUTE13 <> C2.NEW_ATTRIBUTE13) THEN
                   l_ext_tbl(i).ATTRIBUTE13 := C2.NEW_ATTRIBUTE13;
              END IF;


              IF (C2.OLD_ATTRIBUTE14 IS NULL AND C2.NEW_ATTRIBUTE14 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE14 IS NOT NULL AND C2.NEW_ATTRIBUTE14 IS NULL)
              OR (C2.OLD_ATTRIBUTE14 <> C2.NEW_ATTRIBUTE14) THEN
                   l_ext_tbl(i).ATTRIBUTE14 := C2.NEW_ATTRIBUTE14;
              END IF;

              IF (C2.OLD_ATTRIBUTE15 IS NULL AND C2.NEW_ATTRIBUTE15 IS NOT NULL)
              OR (C2.OLD_ATTRIBUTE15 IS NOT NULL AND C2.NEW_ATTRIBUTE15 IS NULL)
              OR (C2.OLD_ATTRIBUTE15 <> C2.NEW_ATTRIBUTE15) THEN
                   l_ext_tbl(i).ATTRIBUTE15 := C2.NEW_ATTRIBUTE15;
              END IF;
        END LOOP;
       EXCEPTION
          WHEN Process_next THEN
             NULL;
       END;
     END LOOP;
     x_ext_tbl.DELETE;
     IF l_ext_tbl.count > 0 THEN
        FOR ext_row in l_ext_tbl.FIRST .. l_ext_tbl.LAST
        LOOP
           IF l_ext_tbl.EXISTS(ext_row) THEN
              l_ext_count := l_ext_count + 1;
              x_ext_tbl(l_ext_count) := l_ext_tbl(ext_row);
           END IF;
        END LOOP;
     END IF;
  END IF;
END Construct_ext_from_hist;


/*----------------------------------------------------------*/
/* Procedure name:  Define_ext_Columns                      */
/* Description : This procudure defines the columns         */
/*                        for the Dynamic SQL               */
/*----------------------------------------------------------*/


PROCEDURE Define_ext_Columns
  ( p_get_ext_cursor_id      IN   NUMBER
   )
IS
  l_ext_rec           csi_datastructures_pub.extend_attrib_values_rec;

BEGIN
    dbms_sql.define_column(p_get_ext_cursor_id, 1,  l_ext_rec.attribute_value_id);
    dbms_sql.define_column(p_get_ext_cursor_id, 2,  l_ext_rec.attribute_id);
    dbms_sql.define_column(p_get_ext_cursor_id, 3,  l_ext_rec.instance_id);
    dbms_sql.define_column(p_get_ext_cursor_id, 4,  l_ext_rec.attribute_code,30);
    dbms_sql.define_column(p_get_ext_cursor_id, 5,  l_ext_rec.attribute_value,240);
    dbms_sql.define_column(p_get_ext_cursor_id, 6,  l_ext_rec.active_start_date);
    dbms_sql.define_column(p_get_ext_cursor_id, 7,  l_ext_rec.active_end_date);
    dbms_sql.define_column(p_get_ext_cursor_id, 8,  l_ext_rec.context,30);
    dbms_sql.define_column(p_get_ext_cursor_id, 9,  l_ext_rec.attribute1,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 10,  l_ext_rec.attribute2,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 11, l_ext_rec.attribute3,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 12, l_ext_rec.attribute4,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 13, l_ext_rec.attribute5,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 14, l_ext_rec.attribute6,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 15, l_ext_rec.attribute7,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 16, l_ext_rec.attribute8,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 17, l_ext_rec.attribute9,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 18, l_ext_rec.attribute10,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 19, l_ext_rec.attribute11,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 20, l_ext_rec.attribute12,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 21, l_ext_rec.attribute13,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 22, l_ext_rec.attribute14,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 23, l_ext_rec.attribute15,150);
    dbms_sql.define_column(p_get_ext_cursor_id, 24, l_ext_rec.object_version_number);
END Define_ext_Columns;


/*----------------------------------------------------------*/
/* Procedure name:  Get_ext_Column_Values                   */
/* Description : This procudure gets the column values      */
/*                        for the Dynamic SQL               */
/*----------------------------------------------------------*/

PROCEDURE Get_ext_Column_Values
   (p_get_ext_cursor_id      IN   NUMBER,
    x_ext_rec                OUT  NOCOPY csi_datastructures_pub.extend_attrib_values_rec
    )
IS
BEGIN
     dbms_sql.column_value(p_get_ext_cursor_id, 1, x_ext_rec.attribute_value_id);
     dbms_sql.column_value(p_get_ext_cursor_id, 2, x_ext_rec.attribute_id);
     dbms_sql.column_value(p_get_ext_cursor_id, 3, x_ext_rec.instance_id);
     dbms_sql.column_value(p_get_ext_cursor_id, 4, x_ext_rec.attribute_code);
     dbms_sql.column_value(p_get_ext_cursor_id, 5, x_ext_rec.attribute_value);
     dbms_sql.column_value(p_get_ext_cursor_id, 6, x_ext_rec.active_start_date);
     dbms_sql.column_value(p_get_ext_cursor_id, 7, x_ext_rec.active_end_date);
     dbms_sql.column_value(p_get_ext_cursor_id, 8, x_ext_rec.context);
     dbms_sql.column_value(p_get_ext_cursor_id, 9, x_ext_rec.attribute1);
     dbms_sql.column_value(p_get_ext_cursor_id, 10, x_ext_rec.attribute2);
     dbms_sql.column_value(p_get_ext_cursor_id, 11, x_ext_rec.attribute3);
     dbms_sql.column_value(p_get_ext_cursor_id, 12, x_ext_rec.attribute4);
     dbms_sql.column_value(p_get_ext_cursor_id, 13, x_ext_rec.attribute5);
     dbms_sql.column_value(p_get_ext_cursor_id, 14, x_ext_rec.attribute6);
     dbms_sql.column_value(p_get_ext_cursor_id, 15, x_ext_rec.attribute7);
     dbms_sql.column_value(p_get_ext_cursor_id, 16, x_ext_rec.attribute8);
     dbms_sql.column_value(p_get_ext_cursor_id, 17, x_ext_rec.attribute9);
     dbms_sql.column_value(p_get_ext_cursor_id, 18, x_ext_rec.attribute10);
     dbms_sql.column_value(p_get_ext_cursor_id, 19, x_ext_rec.attribute11);
     dbms_sql.column_value(p_get_ext_cursor_id, 20, x_ext_rec.attribute12);
     dbms_sql.column_value(p_get_ext_cursor_id, 21, x_ext_rec.attribute13);
     dbms_sql.column_value(p_get_ext_cursor_id, 22, x_ext_rec.attribute14);
     dbms_sql.column_value(p_get_ext_cursor_id, 23, x_ext_rec.attribute15);
     dbms_sql.column_value(p_get_ext_cursor_id, 24, x_ext_rec.object_version_number);

END Get_ext_Column_Values;




/*----------------------------------------------------------*/
/* Procedure name:  Bind_ext_variable                       */
/* Description : This procudure binds the column values     */
/*                        for the Dynamic SQL               */
/*----------------------------------------------------------*/

PROCEDURE Bind_ext_variable
 ( p_ext_query_rec    IN    csi_datastructures_pub.extend_attrib_query_rec,
   p_cur_get_ext      IN    NUMBER
 )
IS
BEGIN
     IF( (p_ext_query_rec.attribute_value_id IS NOT NULL)
       AND (p_ext_query_rec.attribute_value_id <> FND_API.G_MISS_NUM))  THEN
        DBMS_SQL.BIND_VARIABLE(p_cur_get_ext, ':attribute_value_id', p_ext_query_rec.attribute_value_id);
     END IF;

     IF( (p_ext_query_rec.instance_id IS NOT NULL)
       AND (p_ext_query_rec.instance_id <> FND_API.G_MISS_NUM))  THEN
        DBMS_SQL.BIND_VARIABLE(p_cur_get_ext, ':instance_id', p_ext_query_rec.instance_id);
     END IF;

     IF( (p_ext_query_rec.attribute_id IS NOT NULL)
       AND (p_ext_query_rec.attribute_id<> FND_API.G_MISS_NUM))  THEN
        DBMS_SQL.BIND_VARIABLE(p_cur_get_ext, ':attribute_id', p_ext_query_rec.attribute_id);
     END IF;

END Bind_ext_variable;





/*----------------------------------------------------------*/
/* Procedure name:  Gen_ext_Where_Clause                    */
/* Description : Procedure used to  generate the where      */
/*                clause  for Extended Attributes units     */
/*----------------------------------------------------------*/

PROCEDURE Gen_ext_Where_Clause
( p_ext_query_rec       IN       csi_datastructures_pub.extend_attrib_query_rec
 ,x_where_clause           OUT   NOCOPY VARCHAR2
 ) IS

BEGIN

   -- Assign null at the start
   x_where_clause := '';

   IF (( p_ext_query_rec.attribute_value_id  IS NOT NULL)  AND
       ( p_ext_query_rec.attribute_value_id  <> FND_API.G_MISS_NUM)) THEN
        x_where_clause := ' cv.attribute_value_id = :attribute_value_id ';
   ELSIF ( p_ext_query_rec.attribute_value_id  IS NULL)  THEN
        x_where_clause := ' cv.attribute_value_id IS NULL ';
   END IF;

   IF ((p_ext_query_rec.instance_id IS NOT NULL)  AND
       (p_ext_query_rec.instance_id <> FND_API.G_MISS_NUM))   THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' cv.instance_id = :instance_id ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' cv.instance_id = :instance_id ';
        END IF;
   ELSIF (p_ext_query_rec.instance_id IS NULL)  THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' cv.instance_id IS NULL ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' cv.instance_id IS NULL ';
        END IF;
   END IF;

   IF ((p_ext_query_rec.attribute_id  IS NOT NULL) AND
       (p_ext_query_rec.attribute_id  <> FND_API.G_MISS_NUM)) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' cv.attribute_id = :attribute_id ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' cv.attribute_id = :attribute_id ';
        END IF;
   ELSIF (p_ext_query_rec.attribute_id  IS NULL) THEN
        IF x_where_clause IS NULL THEN
            x_where_clause := ' cv.attribute_id IS NULL ';
        ELSE
            x_where_clause := x_where_clause||' AND '||' cv.attribute_id IS NULL ';
        END IF;
   END IF ;

END Gen_ext_Where_Clause;



/*------------------------------------------------------*/
/* procedure name: create_extended_attrib_values        */
/* description :  Associates extended attributes to an  */
/*                item instance                         */
/*                                                      */
/*------------------------------------------------------*/

PROCEDURE create_extended_attrib_values
 (
      p_api_version        IN       NUMBER
     ,p_commit             IN       VARCHAR2
     ,p_init_msg_list      IN       VARCHAR2
     ,p_validation_level   IN       NUMBER
     ,p_ext_attrib_rec     IN OUT NOCOPY csi_datastructures_pub.extend_attrib_values_rec
     ,p_txn_rec            IN OUT NOCOPY csi_datastructures_pub.transaction_rec
     ,x_return_status         OUT NOCOPY VARCHAR2
     ,x_msg_count             OUT NOCOPY NUMBER
     ,x_msg_data              OUT NOCOPY VARCHAR2
     ,p_ext_id_tbl         IN OUT NOCOPY csi_item_instance_pvt.ext_id_tbl
     ,p_ext_count_rec      IN OUT NOCOPY csi_item_instance_pvt.ext_count_rec
     ,p_ext_attr_tbl       IN OUT NOCOPY csi_item_instance_pvt.ext_attr_tbl
     ,p_ext_cat_tbl        IN OUT NOCOPY csi_item_instance_pvt.ext_cat_tbl
     ,p_called_from_grp    IN VARCHAR2
 )
IS
    l_api_name                   CONSTANT VARCHAR2(30) := 'create_extended_attrib_values';
    l_api_version                CONSTANT NUMBER       := 1.0;
    l_debug_level                         NUMBER;
    l_msg_index                           NUMBER;
    l_msg_count                           NUMBER;
    l_attribute_value_id                  NUMBER       := p_ext_attrib_rec.attribute_value_id;
    l_attribute_level                     VARCHAR2(30);
    l_master_organization_id              NUMBER;
    l_inventory_item_id                   NUMBER;
    l_ori_inventory_item_id               NUMBER;
    l_ori_master_org_id                   NUMBER;
    l_item_category_id                    NUMBER;
    l_instance_id                         NUMBER;
    l_attribute_value_h_id                NUMBER;
    l_dump_frequency_flag                 VARCHAR2(30);
    l_record_found               BOOLEAN := FALSE;
    l_exists_flag                         VARCHAR2(1);
    l_valid_flag                          VARCHAR2(1);

BEGIN

    -- Standard Start of API savepoint
    SAVEPOINT create_extended_attrib_values;

    -- Standard call to check for call compatibility.
    IF NOT FND_API.Compatible_API_Call (l_api_version,
                                        p_api_version,
                                        l_api_name ,
                                        g_pkg_name)
    THEN
      RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
    END IF;


    -- Initialize message list if p_init_msg_list is set to TRUE.
    IF FND_API.to_Boolean( p_init_msg_list ) THEN
      FND_MSG_PUB.initialize;
    END IF;


    --  Initialize API return status to success
    x_return_status := FND_API.G_RET_STS_SUCCESS;


    -- Check the profile option debug_level for debug message reporting
    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line( 'create_extended_attrib_values');
    END IF;


     -- If the debug level = 2 then dump all the parameters values.
     IF (l_debug_level > 1) THEN
           csi_gen_utility_pvt.put_line( p_api_version ||'-'
                                      || p_commit           ||'-'
                                      || p_init_msg_list     ||'-'
                                      || p_validation_level  );
         -- Dump extended attribute rec
         csi_gen_utility_pvt.dump_ext_attrib_values_rec(p_ext_attrib_rec);
          -- Dump txn_rec
         csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
      END IF;


      -- Start API body
      --
      -- Initialize the Extended Attrib count
      --
      IF p_ext_count_rec.ext_count IS NULL OR
         p_ext_count_rec.ext_count = FND_API.G_MISS_NUM THEN
         p_ext_count_rec.ext_count := 0;
      END IF;
      --
      IF p_ext_count_rec.ext_attr_count IS NULL OR
         p_ext_count_rec.ext_attr_count = FND_API.G_MISS_NUM THEN
         p_ext_count_rec.ext_attr_count := 0;
      END IF;
      IF p_ext_count_rec.ext_cat_count IS NULL OR
         p_ext_count_rec.ext_cat_count = FND_API.G_MISS_NUM THEN
         p_ext_count_rec.ext_cat_count := 0;
      END IF;
      --
      -- Verify if instance id is ok
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_ext_attrib_rec.instance_id IS NOT NULL AND
              p_ext_attrib_rec.instance_id <> FND_API.G_MISS_NUM))
         THEN
            IF p_ext_id_tbl.count > 0 THEN
               FOR ext_count in p_ext_id_tbl.FIRST .. p_ext_id_tbl.LAST
               LOOP
                  IF p_ext_id_tbl(ext_count).instance_id = p_ext_attrib_rec.instance_id
                  THEN
                     l_ori_inventory_item_id := p_ext_id_tbl(ext_count).inv_item_id;
                     l_ori_master_org_id  := p_ext_id_tbl(ext_count).inv_mast_org_id;
                     l_valid_flag := p_ext_id_tbl(ext_count).valid_flag;
                     l_exists_flag := 'Y';
                     EXIT;
                  END IF;
               END LOOP;
               --
               IF l_valid_flag <> 'Y'
               THEN
                   FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_INSTANCE_ID');
                   FND_MESSAGE.SET_TOKEN('INSTANCE_ID',p_ext_attrib_rec.instance_id);
                   FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               END IF;
            END IF;
            --
            IF l_exists_flag <> 'Y'
            THEN
               p_ext_count_rec.ext_count := p_ext_count_rec.ext_count + 1;
               p_ext_id_tbl(p_ext_count_rec.ext_count).instance_id := p_ext_attrib_rec.instance_id;
                   IF NOT(csi_extend_attrib_vld_pvt.Is_valid_instance_id
                              (p_ext_attrib_rec.instance_id
                               ,'INSERT'
                               ,l_ori_inventory_item_id
                               ,l_ori_master_org_id)) THEN
                      p_ext_id_tbl(p_ext_count_rec.ext_count).valid_flag := 'N';
                      RAISE fnd_api.g_exc_error;
                   ELSE
                      p_ext_id_tbl(p_ext_count_rec.ext_count).valid_flag := 'Y';
                      p_ext_id_tbl(p_ext_count_rec.ext_count).inv_item_id := l_ori_inventory_item_id;
                      p_ext_id_tbl(p_ext_count_rec.ext_count).inv_mast_org_id := l_ori_master_org_id;
                   END IF;
            END IF;
         END IF;
      --

      -- Verify if attribute_id is ok
         l_valid_flag := 'Y';
         l_exists_flag := 'N';
         IF ((p_ext_attrib_rec.attribute_id IS NOT NULL) AND
             (p_ext_attrib_rec.attribute_id <> FND_API.G_MISS_NUM))
         THEN
            IF p_ext_attr_tbl.count > 0
            THEN
               FOR ext_attr_count in p_ext_attr_tbl.FIRST .. p_ext_attr_tbl.LAST
               LOOP
                  IF p_ext_attr_tbl(ext_attr_count).attribute_id = p_ext_attrib_rec.attribute_id
                  THEN
                     l_inventory_item_id := p_ext_attr_tbl(ext_attr_count).inv_item_id;
                     l_master_organization_id := p_ext_attr_tbl(ext_attr_count).inv_mast_org_id;
                     l_item_category_id := p_ext_attr_tbl(ext_attr_count).item_category_id;
                     l_attribute_level := p_ext_attr_tbl(ext_attr_count).attribute_level;
                     l_instance_id := p_ext_attr_tbl(ext_attr_count).instance_id;
                     l_valid_flag := p_ext_attr_tbl(ext_attr_count).valid_flag;
                     l_exists_flag := 'Y';
                     EXIT;
                  END IF;
               END LOOP;
               --
               IF l_valid_flag <> 'Y'
               THEN
                  FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ATTRIBUTE_ID');
                  FND_MESSAGE.SET_TOKEN('ATTRIBUTE_ID',p_ext_attrib_rec.attribute_id);
                  FND_MSG_PUB.Add;
                  RAISE fnd_api.g_exc_error;
               END IF;
            END IF;
            --
            IF l_exists_flag <> 'Y'
            THEN
               p_ext_count_rec.ext_attr_count := p_ext_count_rec.ext_attr_count + 1;
               p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).attribute_id := p_ext_attrib_rec.attribute_id;
                   IF NOT(csi_extend_attrib_vld_pvt.Is_valid_attribute_id
                             (p_ext_attrib_rec.attribute_id
                              ,l_attribute_level
                              ,l_master_organization_id
                              ,l_inventory_item_id
                              ,l_item_category_id
                              ,l_instance_id
                            )) THEN
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).valid_flag := 'N';
                      RAISE fnd_api.g_exc_error;
                   ELSE
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).valid_flag := 'Y';
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).inv_item_id := l_inventory_item_id;
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).inv_mast_org_id := l_master_organization_id;
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).attribute_level := l_attribute_level;
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).item_category_id := l_item_category_id;
                       p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).instance_id := l_instance_id;
                   END IF;
            END IF;
         ELSE
            FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_ATTRIBUTE_ID');
            FND_MESSAGE.SET_TOKEN('ATTRIBUTE_ID',p_ext_attrib_rec.attribute_id);
            FND_MSG_PUB.Add;
         END IF;
       --

       -- Added by sk for bug 2232880
            l_record_found  := FALSE;
            IF ( (p_called_from_grp <> FND_API.G_TRUE) AND
                 (p_ext_attrib_rec.attribute_value_id IS NULL OR
                  p_ext_attrib_rec.attribute_value_id = fnd_api.g_miss_num) )
            THEN
             BEGIN
                  SELECT attribute_value_id,
                         object_version_number
                  INTO   p_ext_attrib_rec.attribute_value_id,
                         p_ext_attrib_rec.object_version_number
                  FROM csi_iea_values
                  WHERE instance_id          = p_ext_attrib_rec.instance_id
                  AND attribute_id           = p_ext_attrib_rec.attribute_id
                  AND active_end_date        < SYSDATE
                  AND ROWNUM=1;
                  l_record_found  := TRUE;
             EXCEPTION
               WHEN OTHERS THEN
                NULL;
             END;
            END IF;
        IF l_record_found
        THEN
           -- Unexpire the extended attrib values
            IF p_ext_attrib_rec.active_end_date = fnd_api.g_miss_date
            THEN
               p_ext_attrib_rec.active_end_date := NULL;
            END IF;
             csi_item_instance_pvt.update_extended_attrib_values
             (p_api_version       => p_api_version
             ,p_commit            => fnd_api.g_false
             ,p_init_msg_list     => p_init_msg_list
             ,p_validation_level  => p_validation_level
             ,p_ext_attrib_rec    => p_ext_attrib_rec
             ,p_txn_rec           => p_txn_rec
             ,x_return_status     => x_return_status
             ,x_msg_count         => x_msg_count
             ,x_msg_data          => x_msg_data
             );

             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                l_msg_index := 1;
                   l_msg_count := x_msg_count;
                WHILE l_msg_count > 0 LOOP
                     x_msg_data := FND_MSG_PUB.GET
                          (l_msg_index,
                           FND_API.G_FALSE      );

                     csi_gen_utility_pvt.put_line( ' Failed Pvt:update_extended_attrib_values..');
                     csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                     l_msg_index := l_msg_index + 1;
                     l_msg_count := l_msg_count - 1;
                END LOOP;
                RAISE FND_API.G_EXC_ERROR;
             END IF;
        ELSE -- -- Added by sk for bug 2232880
    -- Verify that alternate PK is valid
       IF p_called_from_grp <> FND_API.G_TRUE THEN
          IF NOT(csi_extend_attrib_vld_pvt.Alternate_PK_exists
               (p_ext_attrib_rec.instance_id
                ,p_ext_attrib_rec.attribute_id
                )) THEN
             RAISE FND_API.G_EXC_ERROR;
          END IF;
       END IF;

       -- Check start effective date
       IF p_called_from_grp <> FND_API.G_TRUE THEN
          IF NOT(csi_extend_attrib_vld_pvt.Is_StartDate_Valid
                                (p_ext_attrib_rec.ACTIVE_START_DATE,
                                 p_ext_attrib_rec.ACTIVE_END_DATE ,
                                 p_ext_attrib_rec.INSTANCE_ID )) THEN
             RAISE FND_API.G_EXC_ERROR;
          END IF;
       END IF;


       -- Check end effective date
       IF p_called_from_grp <> FND_API.G_TRUE THEN
          IF p_ext_attrib_rec.ACTIVE_END_DATE is NOT NULL THEN
             IF NOT(csi_extend_attrib_vld_pvt.Is_EndDate_Valid
                             (p_ext_attrib_rec.ACTIVE_START_DATE,
                              p_ext_attrib_rec.ACTIVE_END_DATE ,
                              p_ext_attrib_rec.INSTANCE_ID ,
                              p_ext_attrib_rec.ATTRIBUTE_VALUE_ID,
					          p_txn_rec.TRANSACTION_ID)) THEN
                RAISE FND_API.G_EXC_ERROR;
             END IF;
          END IF;
       END IF;
       --
       -- Verify that the attribute level satisfies all requirements
       IF l_attribute_level = 'CATEGORY'
       THEN
         IF ((l_item_category_id IS NOT NULL) AND (l_item_category_id <> FND_API.G_MISS_NUM))
         THEN
            l_valid_flag := 'Y';
            l_exists_flag := 'N';
              IF p_ext_cat_tbl.count > 0
              THEN
                 FOR ext_cat_count in p_ext_cat_tbl.FIRST .. p_ext_cat_tbl.LAST
                 LOOP
                    IF p_ext_cat_tbl(ext_cat_count).item_cat_id = l_item_category_id
                    THEN
                       l_valid_flag := p_ext_cat_tbl(ext_cat_count).valid_flag;
                       l_exists_flag := 'Y';
                       EXIT;
                    END IF;
                 END LOOP;
                 --
                 IF l_valid_flag <> 'Y'
                 THEN
                    FND_MESSAGE.SET_NAME('CSI','CSI_API_INV_ATT_LEV_CAT');
                    FND_MESSAGE.SET_TOKEN('ATTRIBUTE_LEVEL_ITEM',l_ori_inventory_item_id);
                    FND_MESSAGE.SET_TOKEN('ATTRIBUTE_LEVEL_ORG',l_ori_master_org_id);
                    FND_MESSAGE.SET_TOKEN('ATTRIBUTE_LEVEL_CAT',l_item_category_id);
                    FND_MSG_PUB.Add;
                    RAISE fnd_api.g_exc_error;
                 END IF;
              END IF;
              --
              IF l_exists_flag <> 'Y'
              THEN
                 p_ext_count_rec.ext_cat_count := p_ext_count_rec.ext_cat_count + 1;
                 p_ext_cat_tbl(p_ext_count_rec.ext_cat_count).item_cat_id := l_item_category_id;
                      IF NOT(csi_extend_attrib_vld_pvt.Is_Valid_attrib_level_content
                                ( l_attribute_level
                                 ,l_master_organization_id
                                 ,l_inventory_item_id
                                 ,l_item_category_id
                                 ,l_instance_id
                                 ,p_ext_attrib_rec.instance_id
                                 ,l_ori_inventory_item_id
                                 ,l_ori_master_org_id
                             )) THEN
                           --p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).valid_flag := 'N'; -- commented for bug 3114946
                           p_ext_cat_tbl(p_ext_count_rec.ext_cat_count).valid_flag := 'N'; -- Added for bug 3114946
                         RAISE fnd_api.g_exc_error;
                      ELSE
                           --p_ext_attr_tbl(p_ext_count_rec.ext_attr_count).valid_flag := 'Y'; -- commented for bug 3114946
                           p_ext_cat_tbl(p_ext_count_rec.ext_cat_count).valid_flag := 'Y'; -- Added for bug 3114946
                      END IF;
              END IF;
         END IF;
       ELSE -- attribute level <> 'CATEGORY'
            IF NOT(csi_extend_attrib_vld_pvt.Is_Valid_attrib_level_content
                    (l_attribute_level
                    ,l_master_organization_id
                    ,l_inventory_item_id
                    ,l_item_category_id
                    ,l_instance_id
                    ,p_ext_attrib_rec.instance_id
                    ,l_ori_inventory_item_id
                    ,l_ori_master_org_id
                  )) THEN
              RAISE FND_API.G_EXC_ERROR;
            END IF;
       END IF;

       -- If the attribute_value_id passed is null then generate from sequence
       -- and check if the value exists . If exists then generate again from the sequence
       -- till we get a value that does not exist
       IF l_attribute_value_id IS NULL OR
          l_attribute_value_id = FND_API.G_MISS_NUM THEN
             l_attribute_value_id := csi_extend_attrib_vld_pvt.get_attribute_value_id;
           p_ext_attrib_rec.attribute_value_id := l_attribute_value_id;
           WHILE NOT(csi_extend_attrib_vld_pvt.Is_valid_attribute_value_id
               (l_attribute_value_id))
           LOOP
              l_attribute_value_id := csi_extend_attrib_vld_pvt.get_attribute_value_id;
            p_ext_attrib_rec.attribute_value_id := l_attribute_value_id;
         END LOOP;
       ELSE
          -- Validate attribute_value_id
          IF NOT(csi_extend_attrib_vld_pvt.Is_valid_attribute_value_id
               (p_ext_attrib_rec.attribute_value_id)) THEN
            RAISE FND_API.G_EXC_ERROR;
          END IF;

       END IF;

       IF p_called_from_grp <> FND_API.G_TRUE THEN
          -- Create a record in csi_iea_values
          CSI_IEA_VALUES_PKG.Insert_Row
                  (
                  l_attribute_value_id
                  ,p_ext_attrib_rec.attribute_id
                  ,p_ext_attrib_rec.instance_id
                  ,p_ext_attrib_rec.attribute_value
                  ,p_ext_attrib_rec.active_start_date
                  ,p_ext_attrib_rec.active_end_date
                  ,p_ext_attrib_rec.context
                  ,p_ext_attrib_rec.attribute1
                  ,p_ext_attrib_rec.attribute2
                  ,p_ext_attrib_rec.attribute3
                  ,p_ext_attrib_rec.attribute4
                  ,p_ext_attrib_rec.attribute5
                  ,p_ext_attrib_rec.attribute6
                  ,p_ext_attrib_rec.attribute7
                  ,p_ext_attrib_rec.attribute8
                  ,p_ext_attrib_rec.attribute9
                  ,p_ext_attrib_rec.attribute10
                  ,p_ext_attrib_rec.attribute11
                  ,p_ext_attrib_rec.attribute12
                  ,p_ext_attrib_rec.attribute13
                  ,p_ext_attrib_rec.attribute14
                  ,p_ext_attrib_rec.attribute15
                  ,fnd_global.user_id
                  ,sysdate
                  ,fnd_global.user_id
                  ,sysdate
                  ,fnd_global.user_id
                  ,1
                  );


        -- IF CSI_Instance_parties_vld_pvt.Is_Instance_creation_complete( p_ext_attrib_rec.INSTANCE_ID ) THEN
        -- Call create_transaction to create txn log

        CSI_TRANSACTIONS_PVT.Create_transaction
          ( p_api_version             => p_api_version
            ,p_commit                 => fnd_api.g_false
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_If_Exists_Flag => 'Y'
            ,P_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                   l_msg_index := 1;
                   l_msg_count := x_msg_count;
                   WHILE l_msg_count > 0 LOOP
                      x_msg_data := FND_MSG_PUB.GET
                      (l_msg_index,
                       FND_API.G_FALSE      );

                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                   END LOOP;
                   RAISE FND_API.G_EXC_ERROR;
           END IF;


        -- Get a unique org_assignment number from the sequence
        l_attribute_value_h_id := csi_extend_attrib_vld_pvt.get_attribute_value_h_id;

        l_dump_frequency_flag :='N';
        -- Create a history
        CSI_IEA_VALUES_H_PKG.Insert_Row(
             l_attribute_value_h_id
            ,l_attribute_value_id
            ,p_txn_rec.transaction_id
            ,NULL
            ,p_ext_attrib_rec.attribute_value
            ,NULL
            ,p_ext_attrib_rec.active_start_date
            ,NULL
            ,p_ext_attrib_rec.active_end_date
            ,NULL
            ,p_ext_attrib_rec.context
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE1
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE2
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE3
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE4
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE5
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE6
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE7
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE8
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE9
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE10
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE11
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE12
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE13
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE14
            ,NULL
            ,p_ext_attrib_rec.ATTRIBUTE15
            ,l_dump_frequency_flag
            ,fnd_global.user_id
            ,sysdate
            ,fnd_global.user_id
            ,sysdate
            ,fnd_global.user_id
            ,1);


          -- END IF;
        END IF; -- Called from grp check

     END IF;  -- Added by sk for bug 2232880
      -- End of API body

      -- Standard check of p_commit.
      IF FND_API.To_Boolean( p_commit ) THEN
         COMMIT WORK;
      END IF;

      -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
          (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
           p_data        =>       x_msg_data
           );


EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO create_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count    =>      x_msg_count,
                   p_data     =>      x_msg_data
                );

      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO create_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                  p_count    =>      x_msg_count,
                   p_data     =>      x_msg_data
                );

      WHEN OTHERS THEN

            ROLLBACK TO  create_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;

            IF       FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                    (     g_pkg_name,
                          l_api_name
                     );
            END IF;

            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                  p_count   =>      x_msg_count,
                    p_data    =>      x_msg_data
                 );

END create_extended_attrib_values;


/*------------------------------------------------------*/
/* procedure name: update_extended_attrib_values        */
/* description :  Updates the existing extended         */
/*                attributes for an item instance       */
/*                                                      */
/*------------------------------------------------------*/

PROCEDURE update_extended_attrib_values
 (
      p_api_version        IN     NUMBER
     ,p_commit             IN     VARCHAR2
     ,p_init_msg_list      IN     VARCHAR2
     ,p_validation_level   IN     NUMBER
     ,p_ext_attrib_rec     IN     csi_datastructures_pub.extend_attrib_values_rec
     ,p_txn_rec            IN OUT NOCOPY csi_datastructures_pub.transaction_rec
     ,x_return_status         OUT NOCOPY VARCHAR2
     ,x_msg_count             OUT NOCOPY NUMBER
     ,x_msg_data              OUT NOCOPY VARCHAR2
 )

IS
    l_api_name                  CONSTANT VARCHAR2(30)   := 'update_extended_attrib_values';
    l_api_version               CONSTANT NUMBER         := 1.0;
    l_debug_level                        NUMBER;
    l_msg_index                          NUMBER;
    l_msg_count                          NUMBER;
    l_ori_inventory_item_id              NUMBER;
    l_ori_master_org_id                  NUMBER;
    l_attribute_value_id                 NUMBER:= p_ext_attrib_rec.attribute_value_id;
    l_attribute_value_h_id               NUMBER;
    l_dump_frequency                     NUMBER;
    l_dump_frequency_flag                VARCHAR2(30);
    l_ext_attrib_rec                     csi_datastructures_pub.extend_attrib_values_rec;
    l_temp_ext_attrib_rec                csi_datastructures_pub.extend_attrib_values_rec;
    l_ext_att_hist_rec                   csi_datastructures_pub.ext_attrib_val_history_rec;

CURSOR ieav_hist_csr (p_ieav_hist_id NUMBER) IS
       SELECT  *
       FROM    csi_iea_values_h
       WHERE   csi_iea_values_h.attribute_value_history_id = p_ieav_hist_id
       FOR UPDATE OF OBJECT_VERSION_NUMBER ;
l_ieav_hist_id    NUMBER;
l_ieav_hist_csr   ieav_hist_csr%ROWTYPE;

BEGIN
    -- Standard Start of API savepoint
    SAVEPOINT      update_extended_attrib_values;

    -- Standard call to check for call compatibility.
    IF NOT FND_API.Compatible_API_Call (l_api_version,
                                        p_api_version,
                                        l_api_name ,
                                        g_pkg_name)
    THEN
          RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
    END IF;


    -- Initialize message list if p_init_msg_list is set to TRUE.
    IF FND_API.to_Boolean( p_init_msg_list ) THEN
          FND_MSG_PUB.initialize;
    END IF;


    --  Initialize API return status to success
    x_return_status := FND_API.G_RET_STS_SUCCESS;


    -- Check the profile option debug_level for debug message reporting
    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
        csi_gen_utility_pvt.put_line( 'update_extended_attrib_values');
    END IF;


    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
          csi_gen_utility_pvt.put_line(
                                       p_api_version       ||'-'
                                    || p_commit            ||'-'
                                    || p_init_msg_list     ||'-'
                                    || p_validation_level   );
         -- Dump extended attribute rec
         csi_gen_utility_pvt.dump_ext_attrib_values_rec(p_ext_attrib_rec);
         -- Dump txn_rec
         csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
     END IF;


     -- Start API body

     -- Validate extended_attribute_value_id
     IF NOT(csi_extend_attrib_vld_pvt.Val_and_get_ext_att_id
             (p_ext_attrib_rec.attribute_value_id,
              l_ext_attrib_rec )) THEN
          RAISE FND_API.G_EXC_ERROR;
     END IF;


     -- Validate object_version_number
     IF NOT(csi_extend_attrib_vld_pvt.Is_valid_obj_ver_num
            (p_ext_attrib_rec.object_version_number
          ,l_ext_attrib_rec.object_version_number
          )) THEN
         RAISE FND_API.G_EXC_ERROR;
     END IF;


     -- Validate if the instance is updatable
     IF NOT(csi_extend_attrib_vld_pvt.Is_Updatable
             (l_ext_attrib_rec.active_end_date ,
            p_ext_attrib_rec.active_end_date )) THEN
         RAISE FND_API.G_EXC_ERROR;
     END IF;

     -- Validate instance id for which the update is related to
     IF NOT(csi_extend_attrib_vld_pvt.Is_Valid_instance_id
            (l_ext_attrib_rec.instance_id
           ,'UPDATE'
           ,l_ori_inventory_item_id
           ,l_ori_master_org_id)) THEN
        -- Check if it is an expire operation
           IF NOT(csi_extend_attrib_vld_pvt.Is_Expire_Op
                     (p_ext_attrib_rec)) THEN
           RAISE FND_API.G_EXC_ERROR;
           END IF;
     END IF;

     -- Validate instance id
     IF ( p_ext_attrib_rec.instance_id <> FND_API.G_MISS_NUM ) THEN
        IF NOT(csi_extend_attrib_vld_pvt.Val_inst_id_for_update
            (p_ext_attrib_rec.instance_id
           ,l_ext_attrib_rec.instance_id
          )) THEN
           RAISE FND_API.G_EXC_ERROR;
         END IF;
     END IF;


     -- Verify start effective date
     IF ( p_ext_attrib_rec.active_start_date <> FND_API.G_MISS_DATE) THEN
       IF (p_ext_attrib_rec.active_start_date <> l_ext_attrib_rec.active_start_date) THEN
               FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
               FND_MESSAGE.Set_Token('COLUMN', 'EXTENDED ATTRIBUTE START_DATE');
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
       END IF;
     END IF;

     -- Verify end effective date
     IF ( p_ext_attrib_rec.active_end_date <> FND_API.G_MISS_DATE) THEN
       IF p_ext_attrib_rec.active_end_date is NOT NULL THEN
         IF g_expire_ext_att_flag  <> 'Y' THEN
           IF NOT(csi_extend_attrib_vld_pvt.Is_EndDate_Valid
               (p_ext_attrib_rec.active_start_date,
                            p_ext_attrib_rec.active_end_date,
                            p_ext_attrib_rec.instance_id ,
					   p_ext_attrib_rec.attribute_value_id ,
					   p_txn_rec.transaction_id)) THEN
                RAISE FND_API.G_EXC_ERROR;
           END IF;
         END IF;
       END IF;
     END IF;

     -- Verify attribute id
     IF ( p_ext_attrib_rec.attribute_id <> FND_API.G_MISS_NUM) THEN
       IF (l_ext_attrib_rec.attribute_id <> l_ext_attrib_rec.attribute_id) THEN
               FND_MESSAGE.Set_Name('CSI', 'CSI_API_UPD_NOT_ALLOWED');
               FND_MESSAGE.Set_Token('COLUMN', 'EXTENDED ATTRIBUTE_ID');
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
       END IF;
     END IF;


     -- Get the new object version number
     l_ext_attrib_rec.object_version_number :=
      csi_extend_attrib_vld_pvt.get_object_version_number(l_ext_attrib_rec.object_version_number);

     CSI_IEA_VALUES_PKG.Update_Row
                  (
                  l_attribute_value_id
                  ,p_ext_attrib_rec.attribute_id
                  ,p_ext_attrib_rec.instance_id
                  ,p_ext_attrib_rec.attribute_value
                  ,p_ext_attrib_rec.active_start_date
                  ,p_ext_attrib_rec.active_end_date
                  ,p_ext_attrib_rec.context
                  ,p_ext_attrib_rec.attribute1
                  ,p_ext_attrib_rec.attribute2
                  ,p_ext_attrib_rec.attribute3
                  ,p_ext_attrib_rec.attribute4
                  ,p_ext_attrib_rec.attribute5
                  ,p_ext_attrib_rec.attribute6
                  ,p_ext_attrib_rec.attribute7
                  ,p_ext_attrib_rec.attribute8
                  ,p_ext_attrib_rec.attribute9
                  ,p_ext_attrib_rec.attribute10
                  ,p_ext_attrib_rec.attribute11
                  ,p_ext_attrib_rec.attribute12
                  ,p_ext_attrib_rec.attribute13
                  ,p_ext_attrib_rec.attribute14
                  ,p_ext_attrib_rec.attribute15
                  ,fnd_api.g_miss_num
                  ,fnd_api.g_miss_date
                  ,fnd_global.user_id
                  ,sysdate
                  ,fnd_global.user_id
                  ,l_ext_attrib_rec.object_version_number
                  );



    -- IF CSI_Instance_parties_vld_pvt.Is_Instance_creation_complete( p_ext_attrib_rec.INSTANCE_ID ) THEN
    -- Call create_transaction to create txn log

     CSI_TRANSACTIONS_PVT.Create_transaction
          (  p_api_version            => p_api_version
            ,p_commit                 => fnd_api.g_false
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_If_Exists_Flag => 'Y'
            ,p_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                   l_msg_index := 1;
                   l_msg_count := x_msg_count;
                   WHILE l_msg_count > 0 LOOP
                      x_msg_data := FND_MSG_PUB.GET
                      (l_msg_index,
                       FND_API.G_FALSE      );

                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                   END LOOP;
                   RAISE FND_API.G_EXC_ERROR;
           END IF;

     -- Get a unique org_assignment number from the sequence
     l_attribute_value_h_id := csi_extend_attrib_vld_pvt.get_attribute_value_h_id;

     -- Get full dump frequency from CSI_INSTALL_PARAMETERS
     l_dump_frequency := csi_org_unit_vld_pvt.get_full_dump_frequency;
     --
     IF l_dump_frequency IS NULL THEN
        RAISE FND_API.G_EXC_ERROR;
     END IF;

     -- Grab the input record in a temporary record
     l_temp_ext_attrib_rec := p_ext_attrib_rec;

     -- Start of modifications for Bug#2547034 on 09/20/02 - rtalluri
     BEGIN
       SELECT  attribute_value_history_id
       INTO    l_ieav_hist_id
       FROM    csi_iea_values_h h
       WHERE   h.transaction_id = p_txn_rec.transaction_id
       AND     h.attribute_value_id = p_ext_attrib_rec.attribute_value_id;

       OPEN   ieav_hist_csr(l_ieav_hist_id);
       FETCH  ieav_hist_csr INTO l_ieav_hist_csr ;
       CLOSE  ieav_hist_csr;

       IF l_ieav_hist_csr.full_dump_flag = 'Y'
       THEN
         csi_iea_values_h_pkg.update_row (
          p_attribute_value_history_id    => l_ieav_hist_id                         ,
          p_attribute_value_id            => fnd_api.g_miss_num                     ,
          p_transaction_id                => fnd_api.g_miss_num                     ,
          p_old_attribute_value           => fnd_api.g_miss_char                    ,
          p_new_attribute_value           => l_temp_ext_attrib_rec.attribute_value  ,
          p_old_active_start_date         => fnd_api.g_miss_date                    ,
          p_new_active_start_date         => l_temp_ext_attrib_rec.active_start_date,
          p_old_active_end_date           => fnd_api.g_miss_date                    ,
          p_new_active_end_date           => l_temp_ext_attrib_rec.active_end_date  ,
          p_old_context                   => fnd_api.g_miss_char                    ,
          p_new_context                   => l_temp_ext_attrib_rec.context          ,
          p_old_attribute1                => fnd_api.g_miss_char                    ,
          p_new_attribute1                => l_temp_ext_attrib_rec.attribute1       ,
          p_old_attribute2                => fnd_api.g_miss_char                    ,
          p_new_attribute2                => l_temp_ext_attrib_rec.attribute2       ,
          p_old_attribute3                => fnd_api.g_miss_char                    ,
          p_new_attribute3                => l_temp_ext_attrib_rec.attribute3       ,
          p_old_attribute4                => fnd_api.g_miss_char                    ,
          p_new_attribute4                => l_temp_ext_attrib_rec.attribute4       ,
          p_old_attribute5                => fnd_api.g_miss_char                    ,
          p_new_attribute5                => l_temp_ext_attrib_rec.attribute5       ,
          p_old_attribute6                => fnd_api.g_miss_char                    ,
          p_new_attribute6                => l_temp_ext_attrib_rec.attribute6       ,
          p_old_attribute7                => fnd_api.g_miss_char                    ,
          p_new_attribute7                => l_temp_ext_attrib_rec.attribute7       ,
          p_old_attribute8                => fnd_api.g_miss_char                    ,
          p_new_attribute8                => l_temp_ext_attrib_rec.attribute8       ,
          p_old_attribute9                => fnd_api.g_miss_char                    ,
          p_new_attribute9                => l_temp_ext_attrib_rec.attribute9       ,
          p_old_attribute10               => fnd_api.g_miss_char                    ,
          p_new_attribute10               => l_temp_ext_attrib_rec.attribute10      ,
          p_old_attribute11               => fnd_api.g_miss_char                    ,
          p_new_attribute11               => l_temp_ext_attrib_rec.attribute11      ,
          p_old_attribute12               => fnd_api.g_miss_char                    ,
          p_new_attribute12               => l_temp_ext_attrib_rec.attribute12      ,
          p_old_attribute13               => fnd_api.g_miss_char                    ,
          p_new_attribute13               => l_temp_ext_attrib_rec.attribute13      ,
          p_old_attribute14               => fnd_api.g_miss_char                    ,
          p_new_attribute14               => l_temp_ext_attrib_rec.attribute14      ,
          p_old_attribute15               => fnd_api.g_miss_char                    ,
          p_new_attribute15               => l_temp_ext_attrib_rec.attribute15      ,
          p_full_dump_flag                => fnd_api.g_miss_char                    ,
          p_created_by                    => fnd_api.g_miss_num                     ,
          p_creation_date                 => fnd_api.g_miss_date                    ,
          p_last_updated_by               => fnd_global.user_id                     ,
          p_last_update_date              => sysdate                                ,
          p_last_update_login             => fnd_global.user_id                     ,
          p_object_version_number         => fnd_api.g_miss_num);

       ELSE
          --
             IF    ( l_ieav_hist_csr.old_attribute_value IS NULL
                AND  l_ieav_hist_csr.new_attribute_value IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute_value = l_ext_attrib_rec.attribute_value )
                      OR ( l_temp_ext_attrib_rec.attribute_value = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute_value := NULL;
                           l_ieav_hist_csr.new_attribute_value := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute_value := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute_value := l_temp_ext_attrib_rec.attribute_value;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute_value := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute_value := l_temp_ext_attrib_rec.attribute_value;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_active_start_date IS NULL
                AND  l_ieav_hist_csr.new_active_start_date IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.active_start_date = l_ext_attrib_rec.active_start_date )
                      OR ( l_temp_ext_attrib_rec.active_start_date = fnd_api.g_miss_date ) THEN
                           l_ieav_hist_csr.old_active_start_date := NULL;
                           l_ieav_hist_csr.new_active_start_date := NULL;
                     ELSE
                           l_ieav_hist_csr.old_active_start_date := fnd_api.g_miss_date;
                           l_ieav_hist_csr.new_active_start_date := l_temp_ext_attrib_rec.active_start_date;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_active_start_date := fnd_api.g_miss_date;
                     l_ieav_hist_csr.new_active_start_date := l_temp_ext_attrib_rec.active_start_date;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_active_end_date IS NULL
                AND  l_ieav_hist_csr.new_active_end_date IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.active_end_date = l_ext_attrib_rec.active_end_date )
                      OR ( l_temp_ext_attrib_rec.active_end_date = fnd_api.g_miss_date ) THEN
                           l_ieav_hist_csr.old_active_end_date := NULL;
                           l_ieav_hist_csr.new_active_end_date := NULL;
                     ELSE
                           l_ieav_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                           l_ieav_hist_csr.new_active_end_date := l_temp_ext_attrib_rec.active_end_date;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_active_end_date := fnd_api.g_miss_date;
                     l_ieav_hist_csr.new_active_end_date := l_temp_ext_attrib_rec.active_end_date;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_context IS NULL
                AND  l_ieav_hist_csr.new_context IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.context = l_ext_attrib_rec.context )
                      OR ( l_temp_ext_attrib_rec.context = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_context := NULL;
                           l_ieav_hist_csr.new_context := NULL;
                     ELSE
                           l_ieav_hist_csr.old_context := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_context := l_temp_ext_attrib_rec.context;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_context := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_context := l_temp_ext_attrib_rec.context;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute1 IS NULL
                AND  l_ieav_hist_csr.new_attribute1 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute1 = l_ext_attrib_rec.attribute1 )
                      OR ( l_temp_ext_attrib_rec.attribute1 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute1 := NULL;
                           l_ieav_hist_csr.new_attribute1 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute1 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute1 := l_temp_ext_attrib_rec.attribute1;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute1 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute1 := l_temp_ext_attrib_rec.attribute1;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute2 IS NULL
                AND  l_ieav_hist_csr.new_attribute2 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute2 = l_ext_attrib_rec.attribute2 )
                      OR ( l_temp_ext_attrib_rec.attribute2 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute2 := NULL;
                           l_ieav_hist_csr.new_attribute2 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute2 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute2 := l_temp_ext_attrib_rec.attribute2;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute2 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute2 := l_temp_ext_attrib_rec.attribute2;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute3 IS NULL
                AND  l_ieav_hist_csr.new_attribute3 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute3 = l_ext_attrib_rec.attribute3 )
                      OR ( l_temp_ext_attrib_rec.attribute3 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute3 := NULL;
                           l_ieav_hist_csr.new_attribute3 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute3 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute3 := l_temp_ext_attrib_rec.attribute3;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute3 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute3 := l_temp_ext_attrib_rec.attribute3;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute4 IS NULL
                AND  l_ieav_hist_csr.new_attribute4 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute4 = l_ext_attrib_rec.attribute4 )
                      OR ( l_temp_ext_attrib_rec.attribute4 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute4 := NULL;
                           l_ieav_hist_csr.new_attribute4 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute4 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute4 := l_temp_ext_attrib_rec.attribute4;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute4 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute4 := l_temp_ext_attrib_rec.attribute4;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute5 IS NULL
                AND  l_ieav_hist_csr.new_attribute5 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute5 = l_ext_attrib_rec.attribute5 )
                      OR ( l_temp_ext_attrib_rec.attribute5 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute5 := NULL;
                           l_ieav_hist_csr.new_attribute5 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute5 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute5 := l_temp_ext_attrib_rec.attribute5;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute5 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute5 := l_temp_ext_attrib_rec.attribute5;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute6 IS NULL
                AND  l_ieav_hist_csr.new_attribute6 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute6 = l_ext_attrib_rec.attribute6 )
                      OR ( l_temp_ext_attrib_rec.attribute6 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute6 := NULL;
                           l_ieav_hist_csr.new_attribute6 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute6 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute6 := l_temp_ext_attrib_rec.attribute6;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute6 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute6 := l_temp_ext_attrib_rec.attribute6;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute7 IS NULL
                AND  l_ieav_hist_csr.new_attribute7 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute7 = l_ext_attrib_rec.attribute7 )
                      OR ( l_temp_ext_attrib_rec.attribute7 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute7 := NULL;
                           l_ieav_hist_csr.new_attribute7 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute7 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute7 := l_temp_ext_attrib_rec.attribute7;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute7 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute7 := l_temp_ext_attrib_rec.attribute7;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute8 IS NULL
                AND  l_ieav_hist_csr.new_attribute8 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute8 = l_ext_attrib_rec.attribute8 )
                      OR ( l_temp_ext_attrib_rec.attribute8 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute8 := NULL;
                           l_ieav_hist_csr.new_attribute8 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute8 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute8 := l_temp_ext_attrib_rec.attribute8;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute8 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute8 := l_temp_ext_attrib_rec.attribute8;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute9 IS NULL
                AND  l_ieav_hist_csr.new_attribute9 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute9 = l_ext_attrib_rec.attribute9 )
                      OR ( l_temp_ext_attrib_rec.attribute9 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute9 := NULL;
                           l_ieav_hist_csr.new_attribute9 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute9 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute9 := l_temp_ext_attrib_rec.attribute9;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute9 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute9 := l_temp_ext_attrib_rec.attribute9;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute10 IS NULL
                AND  l_ieav_hist_csr.new_attribute10 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute10 = l_ext_attrib_rec.attribute10 )
                      OR ( l_temp_ext_attrib_rec.attribute10 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute10 := NULL;
                           l_ieav_hist_csr.new_attribute10 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute10 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute10 := l_temp_ext_attrib_rec.attribute10;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute10 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute10 := l_temp_ext_attrib_rec.attribute10;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute11 IS NULL
                AND  l_ieav_hist_csr.new_attribute11 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute11 = l_ext_attrib_rec.attribute11 )
                      OR ( l_temp_ext_attrib_rec.attribute11 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute11 := NULL;
                           l_ieav_hist_csr.new_attribute11 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute11 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute11 := l_temp_ext_attrib_rec.attribute11;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute11 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute11 := l_temp_ext_attrib_rec.attribute11;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute12 IS NULL
                AND  l_ieav_hist_csr.new_attribute12 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute12 = l_ext_attrib_rec.attribute12 )
                      OR ( l_temp_ext_attrib_rec.attribute12 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute12 := NULL;
                           l_ieav_hist_csr.new_attribute12 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute12 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute12 := l_temp_ext_attrib_rec.attribute12;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute12 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute12 := l_temp_ext_attrib_rec.attribute12;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute13 IS NULL
                AND  l_ieav_hist_csr.new_attribute13 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute13 = l_ext_attrib_rec.attribute13 )
                      OR ( l_temp_ext_attrib_rec.attribute13 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute13 := NULL;
                           l_ieav_hist_csr.new_attribute13 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute13 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute13 := l_temp_ext_attrib_rec.attribute13;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute13 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute13 := l_temp_ext_attrib_rec.attribute13;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute14 IS NULL
                AND  l_ieav_hist_csr.new_attribute14 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute14 = l_ext_attrib_rec.attribute14 )
                      OR ( l_temp_ext_attrib_rec.attribute14 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute14 := NULL;
                           l_ieav_hist_csr.new_attribute14 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute14 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute14 := l_temp_ext_attrib_rec.attribute14;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute14 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute14 := l_temp_ext_attrib_rec.attribute14;
             END IF;
             --
             IF    ( l_ieav_hist_csr.old_attribute15 IS NULL
                AND  l_ieav_hist_csr.new_attribute15 IS NULL ) THEN
                     IF  ( l_temp_ext_attrib_rec.attribute15 = l_ext_attrib_rec.attribute15 )
                      OR ( l_temp_ext_attrib_rec.attribute15 = fnd_api.g_miss_char ) THEN
                           l_ieav_hist_csr.old_attribute15 := NULL;
                           l_ieav_hist_csr.new_attribute15 := NULL;
                     ELSE
                           l_ieav_hist_csr.old_attribute15 := fnd_api.g_miss_char;
                           l_ieav_hist_csr.new_attribute15 := l_temp_ext_attrib_rec.attribute15;
                     END IF;
             ELSE
                     l_ieav_hist_csr.old_attribute15 := fnd_api.g_miss_char;
                     l_ieav_hist_csr.new_attribute15 := l_temp_ext_attrib_rec.attribute15;
             END IF;
             --

         csi_iea_values_h_pkg.update_row (
          p_attribute_value_history_id    => l_ieav_hist_id                         ,
          p_attribute_value_id            => fnd_api.g_miss_num                     ,
          p_transaction_id                => fnd_api.g_miss_num                     ,
          p_old_attribute_value           => l_ieav_hist_csr.old_attribute_value    ,
          p_new_attribute_value           => l_temp_ext_attrib_rec.attribute_value  ,
          p_old_active_start_date         => l_ieav_hist_csr.old_active_start_date  ,
          p_new_active_start_date         => l_temp_ext_attrib_rec.active_start_date,
          p_old_active_end_date           => l_ieav_hist_csr.old_active_end_date    ,
          p_new_active_end_date           => l_temp_ext_attrib_rec.active_end_date  ,
          p_old_context                   => l_ieav_hist_csr.old_context            ,
          p_new_context                   => l_temp_ext_attrib_rec.context          ,
          p_old_attribute1                => l_ieav_hist_csr.old_attribute1         ,
          p_new_attribute1                => l_temp_ext_attrib_rec.attribute1       ,
          p_old_attribute2                => l_ieav_hist_csr.old_attribute2         ,
          p_new_attribute2                => l_temp_ext_attrib_rec.attribute2       ,
          p_old_attribute3                => l_ieav_hist_csr.old_attribute3         ,
          p_new_attribute3                => l_temp_ext_attrib_rec.attribute3       ,
          p_old_attribute4                => l_ieav_hist_csr.old_attribute4         ,
          p_new_attribute4                => l_temp_ext_attrib_rec.attribute4       ,
          p_old_attribute5                => l_ieav_hist_csr.old_attribute5         ,
          p_new_attribute5                => l_temp_ext_attrib_rec.attribute5       ,
          p_old_attribute6                => l_ieav_hist_csr.old_attribute6         ,
          p_new_attribute6                => l_temp_ext_attrib_rec.attribute6       ,
          p_old_attribute7                => l_ieav_hist_csr.old_attribute7         ,
          p_new_attribute7                => l_temp_ext_attrib_rec.attribute7       ,
          p_old_attribute8                => l_ieav_hist_csr.old_attribute8         ,
          p_new_attribute8                => l_temp_ext_attrib_rec.attribute8       ,
          p_old_attribute9                => l_ieav_hist_csr.old_attribute9         ,
          p_new_attribute9                => l_temp_ext_attrib_rec.attribute9       ,
          p_old_attribute10               => l_ieav_hist_csr.old_attribute10        ,
          p_new_attribute10               => l_temp_ext_attrib_rec.attribute10      ,
          p_old_attribute11               => l_ieav_hist_csr.old_attribute11        ,
          p_new_attribute11               => l_temp_ext_attrib_rec.attribute11      ,
          p_old_attribute12               => l_ieav_hist_csr.old_attribute12        ,
          p_new_attribute12               => l_temp_ext_attrib_rec.attribute12      ,
          p_old_attribute13               => l_ieav_hist_csr.old_attribute13        ,
          p_new_attribute13               => l_temp_ext_attrib_rec.attribute13      ,
          p_old_attribute14               => l_ieav_hist_csr.old_attribute14        ,
          p_new_attribute14               => l_temp_ext_attrib_rec.attribute14      ,
          p_old_attribute15               => l_ieav_hist_csr.old_attribute15        ,
          p_new_attribute15               => l_temp_ext_attrib_rec.attribute15      ,
          p_full_dump_flag                => fnd_api.g_miss_char                    ,
          p_created_by                    => fnd_api.g_miss_num                     ,
          p_creation_date                 => fnd_api.g_miss_date                    ,
          p_last_updated_by               => fnd_global.user_id                     ,
          p_last_update_date              => SYSDATE                                ,
          p_last_update_login             => fnd_global.user_id                     ,
          p_object_version_number         => fnd_api.g_miss_num);
       END IF;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN

          IF (mod(l_ext_attrib_rec.object_version_number, l_dump_frequency) = 0) THEN

          -- If the mod value is 0 then dump all the columns both changed and unchanged
          -- changed columns have old and new values while the unchanged values have old and new values
          -- exactly same

           l_dump_frequency_flag := 'Y';
          -- Grab the input record in a temporary record
          l_temp_ext_attrib_rec := p_ext_attrib_rec;

           IF (p_ext_attrib_rec.ATTRIBUTE_VALUE = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE_VALUE  := l_ext_attrib_rec.ATTRIBUTE_VALUE;
           END IF;

           IF (p_ext_attrib_rec.ACTIVE_START_DATE = FND_API.G_MISS_DATE) THEN
                l_temp_ext_attrib_rec.ACTIVE_START_DATE  := l_ext_attrib_rec.ACTIVE_START_DATE;
           END IF;

           IF (p_ext_attrib_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE) THEN
                l_temp_ext_attrib_rec.ACTIVE_END_DATE  := l_ext_attrib_rec.ACTIVE_END_DATE;
           END IF;

           IF (p_ext_attrib_rec.CONTEXT = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.CONTEXT  := l_ext_attrib_rec.CONTEXT;
           END IF;

           IF (p_ext_attrib_rec.ATTRIBUTE1 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE1  := l_ext_attrib_rec.ATTRIBUTE1;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE2 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE2  := l_ext_attrib_rec.ATTRIBUTE2;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE3 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE3  := l_ext_attrib_rec.ATTRIBUTE3;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE4 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE4  := l_ext_attrib_rec.ATTRIBUTE4;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE5 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE5  := l_ext_attrib_rec.ATTRIBUTE5;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE6 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE6  := l_ext_attrib_rec.ATTRIBUTE6;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE7 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE7  := l_ext_attrib_rec.ATTRIBUTE7;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE8 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE8  := l_ext_attrib_rec.ATTRIBUTE8;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE9 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE9  := l_ext_attrib_rec.ATTRIBUTE9;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE10 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE10  := l_ext_attrib_rec.ATTRIBUTE10;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE11 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE11  := l_ext_attrib_rec.ATTRIBUTE11;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE12 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE12  := l_ext_attrib_rec.ATTRIBUTE12;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE13 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE13  := l_ext_attrib_rec.ATTRIBUTE13;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE14 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE14  := l_ext_attrib_rec.ATTRIBUTE14;
           END IF;
           IF (p_ext_attrib_rec.ATTRIBUTE15 = FND_API.G_MISS_CHAR) THEN
                l_temp_ext_attrib_rec.ATTRIBUTE15  := l_ext_attrib_rec.ATTRIBUTE15;
           END IF;

           -- Create a history
           CSI_IEA_VALUES_H_PKG.Insert_Row(
             l_attribute_value_h_id
            ,l_attribute_value_id
            ,p_txn_rec.transaction_id
            ,l_ext_attrib_rec.attribute_value
            ,l_temp_ext_attrib_rec.attribute_value
            ,l_ext_attrib_rec.active_start_date
            ,l_temp_ext_attrib_rec.active_start_date
            ,l_ext_attrib_rec.active_end_date
            ,l_temp_ext_attrib_rec.active_end_date
            ,l_ext_attrib_rec.context
            ,l_temp_ext_attrib_rec.context
            ,l_ext_attrib_rec.ATTRIBUTE1
            ,l_temp_ext_attrib_rec.ATTRIBUTE1
            ,l_ext_attrib_rec.ATTRIBUTE2
            ,l_temp_ext_attrib_rec.ATTRIBUTE2
            ,l_ext_attrib_rec.ATTRIBUTE3
            ,l_temp_ext_attrib_rec.ATTRIBUTE3
            ,l_ext_attrib_rec.ATTRIBUTE4
            ,l_temp_ext_attrib_rec.ATTRIBUTE4
            ,l_ext_attrib_rec.ATTRIBUTE5
            ,l_temp_ext_attrib_rec.ATTRIBUTE5
            ,l_ext_attrib_rec.ATTRIBUTE6
            ,l_temp_ext_attrib_rec.ATTRIBUTE6
            ,l_ext_attrib_rec.ATTRIBUTE7
            ,l_temp_ext_attrib_rec.ATTRIBUTE7
            ,l_ext_attrib_rec.ATTRIBUTE8
            ,l_temp_ext_attrib_rec.ATTRIBUTE8
            ,l_ext_attrib_rec.ATTRIBUTE9
            ,l_temp_ext_attrib_rec.ATTRIBUTE9
            ,l_ext_attrib_rec.ATTRIBUTE10
            ,l_temp_ext_attrib_rec.ATTRIBUTE10
            ,l_ext_attrib_rec.ATTRIBUTE11
            ,l_temp_ext_attrib_rec.ATTRIBUTE11
            ,l_ext_attrib_rec.ATTRIBUTE12
            ,l_temp_ext_attrib_rec.ATTRIBUTE12
            ,l_ext_attrib_rec.ATTRIBUTE13
            ,l_temp_ext_attrib_rec.ATTRIBUTE13
            ,l_ext_attrib_rec.ATTRIBUTE14
            ,l_temp_ext_attrib_rec.ATTRIBUTE14
            ,l_ext_attrib_rec.ATTRIBUTE15
            ,l_temp_ext_attrib_rec.ATTRIBUTE15
            ,l_dump_frequency_flag
            ,fnd_global.user_id
            ,sysdate
            ,fnd_global.user_id
            ,sysdate
            ,fnd_global.user_id
            ,1);

     ELSE
            l_dump_frequency_flag := 'N';
         -- Grab the input record in a temporary record
            l_temp_ext_attrib_rec := l_ext_attrib_rec;

         -- If the mod value is not equal to zero then dump only the changed columns
         -- while the unchanged values have old and new values as null
           IF (p_ext_attrib_rec.attribute_value = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute_value, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute_value, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute_value := NULL;
                l_ext_att_hist_rec.new_attribute_value := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute_value,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute_value,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute_value := l_temp_ext_attrib_rec.attribute_value ;
                l_ext_att_hist_rec.new_attribute_value := p_ext_attrib_rec.attribute_value ;
           END IF;
           --
           IF (p_ext_attrib_rec.active_start_date = fnd_api.g_miss_date) OR
               NVL(p_ext_attrib_rec.active_start_date, fnd_api.g_miss_date) = NVL(l_temp_ext_attrib_rec.active_start_date, fnd_api.g_miss_date) THEN
                l_ext_att_hist_rec.old_active_start_date := NULL;
                l_ext_att_hist_rec.new_active_start_date := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.active_start_date,fnd_api.g_miss_date) <> NVL(p_ext_attrib_rec.active_start_date,fnd_api.g_miss_date) THEN
                l_ext_att_hist_rec.old_active_start_date := l_temp_ext_attrib_rec.active_start_date ;
                l_ext_att_hist_rec.new_active_start_date := p_ext_attrib_rec.active_start_date ;
           END IF;
           --
           IF (p_ext_attrib_rec.active_end_date = fnd_api.g_miss_date) OR
               NVL(p_ext_attrib_rec.active_end_date, fnd_api.g_miss_date) = NVL(l_temp_ext_attrib_rec.active_end_date, fnd_api.g_miss_date) THEN
                l_ext_att_hist_rec.old_active_end_date := NULL;
                l_ext_att_hist_rec.new_active_end_date := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.active_end_date,fnd_api.g_miss_date) <> NVL(p_ext_attrib_rec.active_end_date,fnd_api.g_miss_date) THEN
                l_ext_att_hist_rec.old_active_end_date := l_temp_ext_attrib_rec.active_end_date ;
                l_ext_att_hist_rec.new_active_end_date := p_ext_attrib_rec.active_end_date ;
           END IF;
           --
           IF (p_ext_attrib_rec.context = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.context, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.context, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_context := NULL;
                l_ext_att_hist_rec.new_context := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.context,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.context,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_context := l_temp_ext_attrib_rec.context ;
                l_ext_att_hist_rec.new_context := p_ext_attrib_rec.context ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute1 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute1, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute1, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute1 := NULL;
                l_ext_att_hist_rec.new_attribute1 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute1,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute1,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute1 := l_temp_ext_attrib_rec.attribute1 ;
                l_ext_att_hist_rec.new_attribute1 := p_ext_attrib_rec.attribute1 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute2 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute2, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute2, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute2 := NULL;
                l_ext_att_hist_rec.new_attribute2 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute2,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute2,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute2 := l_temp_ext_attrib_rec.attribute2 ;
                l_ext_att_hist_rec.new_attribute2 := p_ext_attrib_rec.attribute2 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute3 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute3, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute3, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute3 := NULL;
                l_ext_att_hist_rec.new_attribute3 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute3,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute3,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute3 := l_temp_ext_attrib_rec.attribute3 ;
                l_ext_att_hist_rec.new_attribute3 := p_ext_attrib_rec.attribute3 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute4 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute4, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute4, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute4 := NULL;
                l_ext_att_hist_rec.new_attribute4 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute4,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute4,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute4 := l_temp_ext_attrib_rec.attribute4 ;
                l_ext_att_hist_rec.new_attribute4 := p_ext_attrib_rec.attribute4 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute5 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute5, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute5, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute5 := NULL;
                l_ext_att_hist_rec.new_attribute5 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute5,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute5,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute5 := l_temp_ext_attrib_rec.attribute5 ;
                l_ext_att_hist_rec.new_attribute5 := p_ext_attrib_rec.attribute5 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute6 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute6, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute6, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute6 := NULL;
                l_ext_att_hist_rec.new_attribute6 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute6,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute6,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute6 := l_temp_ext_attrib_rec.attribute6 ;
                l_ext_att_hist_rec.new_attribute6 := p_ext_attrib_rec.attribute6 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute7 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute7, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute7, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute7 := NULL;
                l_ext_att_hist_rec.new_attribute7 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute7,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute7,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute7 := l_temp_ext_attrib_rec.attribute7 ;
                l_ext_att_hist_rec.new_attribute7 := p_ext_attrib_rec.attribute7 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute8 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute8, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute8, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute8 := NULL;
                l_ext_att_hist_rec.new_attribute8 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute8,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute8,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute8 := l_temp_ext_attrib_rec.attribute8 ;
                l_ext_att_hist_rec.new_attribute8 := p_ext_attrib_rec.attribute8 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute9 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute9, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute9, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute9 := NULL;
                l_ext_att_hist_rec.new_attribute9 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute9,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute9,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute9 := l_temp_ext_attrib_rec.attribute9 ;
                l_ext_att_hist_rec.new_attribute9 := p_ext_attrib_rec.attribute9 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute10 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute10, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute10, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute10 := NULL;
                l_ext_att_hist_rec.new_attribute10 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute10,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute10,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute10 := l_temp_ext_attrib_rec.attribute10 ;
                l_ext_att_hist_rec.new_attribute10 := p_ext_attrib_rec.attribute10 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute11 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute11, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute11, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute11 := NULL;
                l_ext_att_hist_rec.new_attribute11 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute11,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute11,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute11 := l_temp_ext_attrib_rec.attribute11 ;
                l_ext_att_hist_rec.new_attribute11 := p_ext_attrib_rec.attribute11 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute12 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute12, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute12, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute12 := NULL;
                l_ext_att_hist_rec.new_attribute12 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute12,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute12,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute12 := l_temp_ext_attrib_rec.attribute12 ;
                l_ext_att_hist_rec.new_attribute12 := p_ext_attrib_rec.attribute12 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute13 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute13, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute13, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute13 := NULL;
                l_ext_att_hist_rec.new_attribute13 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute13,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute13,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute13 := l_temp_ext_attrib_rec.attribute13 ;
                l_ext_att_hist_rec.new_attribute13 := p_ext_attrib_rec.attribute13 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute14 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute14, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute14, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute14 := NULL;
                l_ext_att_hist_rec.new_attribute14 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute14,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute14,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute14 := l_temp_ext_attrib_rec.attribute14 ;
                l_ext_att_hist_rec.new_attribute14 := p_ext_attrib_rec.attribute14 ;
           END IF;
           --
           IF (p_ext_attrib_rec.attribute15 = fnd_api.g_miss_char) OR
               NVL(p_ext_attrib_rec.attribute15, fnd_api.g_miss_char) = NVL(l_temp_ext_attrib_rec.attribute15, fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute15 := NULL;
                l_ext_att_hist_rec.new_attribute15 := NULL;
           ELSIF
              NVL(l_temp_ext_attrib_rec.attribute15,fnd_api.g_miss_char) <> NVL(p_ext_attrib_rec.attribute15,fnd_api.g_miss_char) THEN
                l_ext_att_hist_rec.old_attribute15 := l_temp_ext_attrib_rec.attribute15 ;
                l_ext_att_hist_rec.new_attribute15 := p_ext_attrib_rec.attribute15 ;
           END IF;

          -- Create a history
          CSI_IEA_VALUES_H_PKG.Insert_Row(
             l_attribute_value_h_id
            ,l_attribute_value_id
            ,p_txn_rec.transaction_id
            ,l_ext_att_hist_rec.old_attribute_value
            ,l_ext_att_hist_rec.new_attribute_value
            ,l_ext_att_hist_rec.old_active_start_date
            ,l_ext_att_hist_rec.new_active_start_date
            ,l_ext_att_hist_rec.old_active_end_date
            ,l_ext_att_hist_rec.new_active_end_date
            ,l_ext_att_hist_rec.old_context
            ,l_ext_att_hist_rec.new_context
            ,l_ext_att_hist_rec.old_attribute1
            ,l_ext_att_hist_rec.new_attribute1
            ,l_ext_att_hist_rec.old_attribute2
            ,l_ext_att_hist_rec.new_attribute2
            ,l_ext_att_hist_rec.old_attribute3
            ,l_ext_att_hist_rec.new_attribute3
            ,l_ext_att_hist_rec.old_attribute4
            ,l_ext_att_hist_rec.new_attribute4
            ,l_ext_att_hist_rec.old_attribute5
            ,l_ext_att_hist_rec.new_attribute5
            ,l_ext_att_hist_rec.old_attribute6
            ,l_ext_att_hist_rec.new_attribute6
            ,l_ext_att_hist_rec.old_attribute7
            ,l_ext_att_hist_rec.new_attribute7
            ,l_ext_att_hist_rec.old_attribute8
            ,l_ext_att_hist_rec.new_attribute8
            ,l_ext_att_hist_rec.old_attribute9
            ,l_ext_att_hist_rec.new_attribute9
            ,l_ext_att_hist_rec.old_attribute10
            ,l_ext_att_hist_rec.new_attribute10
            ,l_ext_att_hist_rec.old_attribute11
            ,l_ext_att_hist_rec.new_attribute11
            ,l_ext_att_hist_rec.old_attribute12
            ,l_ext_att_hist_rec.new_attribute12
            ,l_ext_att_hist_rec.old_attribute13
            ,l_ext_att_hist_rec.new_attribute13
            ,l_ext_att_hist_rec.old_attribute14
            ,l_ext_att_hist_rec.new_attribute14
            ,l_ext_att_hist_rec.old_attribute15
            ,l_ext_att_hist_rec.new_attribute15
            ,l_dump_frequency_flag
            ,fnd_global.user_id
            ,sysdate
            ,fnd_global.user_id
            ,sysdate
            ,fnd_global.user_id
            ,1);

     END IF;
     END;
     -- End of modifications for Bug#2547034 on 09/20/02 - rtalluri
     -- End of API body

     -- Standard check of p_commit.
     IF FND_API.To_Boolean( p_commit ) THEN
        COMMIT WORK;
     END IF;

     -- Standard call to get message count and if count is  get message info.
     FND_MSG_PUB.Count_And_Get
           (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
            p_data        =>       x_msg_data
            );

EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO update_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count    =>      x_msg_count,
                  p_data     =>      x_msg_data
                );

      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO update_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                  ( p_encoded => FND_API.G_FALSE,
                 p_count  =>      x_msg_count,
                    p_data   =>      x_msg_data
                  );

      WHEN OTHERS THEN
            ROLLBACK TO  update_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;

            IF FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                        ( g_pkg_name,
                          l_api_name
                        );
            END IF;

            FND_MSG_PUB.Count_And_Get
                    ( p_encoded => FND_API.G_FALSE,
                  p_count =>      x_msg_count,
                       p_data  =>      x_msg_data
                     );

END update_extended_attrib_values;




/*----------------------------------------------------------*/
/* procedure name: expire_extended_attrib_values            */
/* description :  Expires the existing extended             */
/*                attributes for an item instance           */
/*                                                          */
/*----------------------------------------------------------*/


PROCEDURE expire_extended_attrib_values
 (    p_api_version        IN       NUMBER
     ,p_commit             IN       VARCHAR2
     ,p_init_msg_list      IN       VARCHAR2
     ,p_validation_level   IN       NUMBER
     ,p_ext_attrib_rec     IN       csi_datastructures_pub.extend_attrib_values_rec
     ,p_txn_rec            IN   OUT NOCOPY csi_datastructures_pub.transaction_rec
     ,x_return_status           OUT NOCOPY VARCHAR2
     ,x_msg_count               OUT NOCOPY NUMBER
     ,x_msg_data                OUT NOCOPY VARCHAR2
 )

IS
     l_api_name             CONSTANT VARCHAR2(30)   := 'expire_extended_attrib_values';
     l_api_version          CONSTANT NUMBER         := 1.0;
     l_debug_level                   NUMBER;
     l_msg_index                     NUMBER;
     l_msg_count                     NUMBER;
     l_ext_attrib_rec                csi_datastructures_pub.extend_attrib_values_rec;
BEGIN

    -- Standard Start of API savepoint
    SAVEPOINT      expire_extended_attrib_values;

    -- Standard call to check for call compatibility.
    IF NOT FND_API.Compatible_API_Call (l_api_version,
                                        p_api_version,
                                        l_api_name ,
                                        g_pkg_name)
    THEN
          RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
    END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
    IF FND_API.to_Boolean( p_init_msg_list ) THEN
          FND_MSG_PUB.initialize;
    END IF;

    --  Initialize API return status to success
    x_return_status := FND_API.G_RET_STS_SUCCESS;


    -- Check the profile option debug_level for debug message reporting

    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
        csi_gen_utility_pvt.put_line( 'expire_extended_attrib_values');
    END IF;


    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
          csi_gen_utility_pvt.put_line(
                                       p_api_version     ||'-'
                                    || p_commit          ||'-'
                                    || p_init_msg_list   ||'-'
                                    || p_validation_level);
     -- Dump extended attribute rec
       csi_gen_utility_pvt.dump_ext_attrib_values_rec(p_ext_attrib_rec);
     -- Dump txn_rec
       csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
    END IF;


    -- Start API body
    -- Validate extended_attribute_value_id
      IF NOT(csi_extend_attrib_vld_pvt.Val_and_get_ext_att_id
             (p_ext_attrib_rec.attribute_value_id,
              l_ext_attrib_rec )) THEN
          RAISE FND_API.G_EXC_ERROR;
      END IF;


      l_ext_attrib_rec.attribute_value_id    :=    p_ext_attrib_rec.attribute_value_id;
      l_ext_attrib_rec.attribute_id          :=    FND_API.G_MISS_NUM;
      l_ext_attrib_rec.instance_id           :=    FND_API.G_MISS_NUM;
      l_ext_attrib_rec.attribute_value       :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.active_start_date     :=    FND_API.G_MISS_DATE ;
      l_ext_attrib_rec.active_end_date       :=    SYSDATE;
      l_ext_attrib_rec.context               :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute1            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute2            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute3            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute4            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute5            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute6            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute7            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute8            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute9            :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute10           :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute11           :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute12           :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute13           :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute14           :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.attribute15           :=    FND_API.G_MISS_CHAR;
      l_ext_attrib_rec.object_version_number :=    p_ext_attrib_rec.object_version_number;


      g_expire_ext_att_flag  := 'Y';
      csi_item_instance_pvt.update_extended_attrib_values
           (p_api_version       => p_api_version
           ,p_commit            => fnd_api.g_false
           ,p_init_msg_list     => p_init_msg_list
           ,p_validation_level  => p_validation_level
           ,p_ext_attrib_rec    => l_ext_attrib_rec
           ,p_txn_rec           => p_txn_rec
           ,x_return_status     => x_return_status
           ,x_msg_count         =>  x_msg_count
           ,x_msg_data          =>  x_msg_data
           );

      g_expire_ext_att_flag  := 'N';
           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                   l_msg_index := 1;
                   l_msg_count := x_msg_count;
                   WHILE l_msg_count > 0 LOOP
                      x_msg_data := FND_MSG_PUB.GET
                      (l_msg_index,
                       FND_API.G_FALSE      );

                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                   END LOOP;
                   RAISE FND_API.G_EXC_ERROR;
           END IF;



       -- End of API body

       -- Standard check of p_commit.
       IF FND_API.To_Boolean( p_commit ) THEN
          COMMIT WORK;
       END IF;

       -- Standard call to get message count and if count is  get message info.
       FND_MSG_PUB.Count_And_Get
           (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
            p_data        =>       x_msg_data
            );


EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO expire_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                   p_data      =>      x_msg_data
                );

      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO expire_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                   p_data      =>      x_msg_data
                 );

      WHEN OTHERS THEN
            ROLLBACK TO  expire_extended_attrib_values;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

              IF FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                        (g_pkg_name,
                         l_api_name
                        );
            END IF;

            FND_MSG_PUB.Count_And_Get
                    (  p_encoded => FND_API.G_FALSE,
                 p_count       =>      x_msg_count,
                       p_data        =>      x_msg_data
                     );

END expire_extended_attrib_values;


/*------------------------------------------------------*/
/* procedure name: copy_single_item_instance               */
/* description :  Copies an instace from an instance    */
/*                                                      */
/*------------------------------------------------------*/



PROCEDURE copy_single_item_instance
 (
   p_api_version            IN         NUMBER
  ,p_commit                 IN         VARCHAR2
  ,p_init_msg_list          IN         VARCHAR2
  ,p_validation_level       IN         NUMBER
  ,p_source_instance_rec    IN         csi_datastructures_pub.instance_rec
  ,p_copy_ext_attribs       IN         VARCHAR2
  ,p_copy_org_assignments   IN         VARCHAR2
  ,p_copy_parties           IN         VARCHAR2
  ,p_copy_contacts          IN         VARCHAR2
  ,p_copy_accounts          IN         VARCHAR2
  ,p_copy_asset_assignments IN         VARCHAR2
  ,p_copy_pricing_attribs   IN         VARCHAR2
  ,p_call_from_split        IN         VARCHAR2
  ,p_call_from_bom_expl     IN         VARCHAR2
  ,p_txn_rec                IN  OUT    NOCOPY csi_datastructures_pub.transaction_rec
  ,x_new_instance_tbl           OUT    NOCOPY csi_datastructures_pub.instance_tbl
  ,x_return_status              OUT    NOCOPY VARCHAR2
  ,x_msg_count                  OUT    NOCOPY NUMBER
  ,x_msg_data                   OUT    NOCOPY VARCHAR2
 )

 IS
    l_api_name                         CONSTANT VARCHAR2(30) := 'copy_single_item_instance';
    l_api_version                     CONSTANT NUMBER      := 1.0;
    l_debug_level                                NUMBER;
    l_curr_instance_rec                     csi_datastructures_pub.instance_rec;
    l_new_instance_rec                      csi_datastructures_pub.instance_rec;
    l_asset_tbl                             csi_datastructures_pub.instance_asset_tbl;
    l_asset_header_tbl                      csi_datastructures_pub.instance_asset_header_tbl;--rk
    l_ext_attrib_tbl                        csi_datastructures_pub.extend_attrib_values_tbl;
    l_ext_attrib_def_tbl                    csi_datastructures_pub.extend_attrib_tbl;
    l_ext_attribs_query_rec                 csi_datastructures_pub.extend_attrib_query_rec;
    l_ou_query_rec                          csi_datastructures_pub.organization_unit_query_rec;
    l_org_unit_tbl                          csi_datastructures_pub.organization_units_tbl;
    l_org_unit_header_tbl                   csi_datastructures_pub.org_units_header_tbl;--rk
    l_pricing_attribs_query_rec             csi_datastructures_pub.pricing_attribs_query_rec;
    l_pricing_attribs_tbl                   csi_datastructures_pub.pricing_attribs_tbl;
    l_account_header_tbl                    csi_datastructures_pub.party_account_header_tbl;
    l_instance_asset_query_rec              csi_datastructures_pub.instance_asset_query_rec;
    l_instance_asset_rec                    csi_datastructures_pub.instance_asset_rec;
    l_party_query_rec                       csi_datastructures_pub.party_query_rec;
    l_party_tbl                             csi_datastructures_pub.party_tbl;
    l_original_party_tbl                    csi_datastructures_pub.party_tbl;
    l_party_input_tbl                       csi_datastructures_pub.party_tbl;
    l_new_party_tbl                         csi_datastructures_pub.party_tbl;
    l_contact_tbl                           csi_datastructures_pub.party_tbl;
    l_contact_input_tbl                       csi_datastructures_pub.party_tbl;
    l_contact_found_flag                    BOOLEAN := FALSE;
    l_new_contact_tbl                       csi_datastructures_pub.party_tbl;
    l_party_header_tbl                      csi_datastructures_pub.party_header_tbl;
    l_party_account_query_rec               csi_datastructures_pub.party_account_query_rec;
    l_contact_account_query_rec             csi_datastructures_pub.party_account_query_rec;
    l_party_account_tbl                     csi_datastructures_pub.party_account_tbl;
    l_contact_account_tbl                   csi_datastructures_pub.party_account_tbl;
    l_temp_party_account_tbl                csi_datastructures_pub.party_account_tbl;
    l_msg_index                             NUMBER;
    l_msg_count                             NUMBER;
    l_attribute_level                       VARCHAR2(30);
    l_vld_org_id                            NUMBER;
    l_internal_party_id                     NUMBER;
    l_party_id                              NUMBER;
    l_item_attribute_tbl                    csi_item_instance_pvt.item_attribute_tbl;
    l_location_tbl                          csi_item_instance_pvt.location_tbl;
    l_generic_id_tbl                        csi_item_instance_pvt.generic_id_tbl;
    l_lookup_tbl                            csi_item_instance_pvt.lookup_tbl;
    l_ins_count_rec                         csi_item_instance_pvt.ins_count_rec;
    l_asset_lookup_tbl                      csi_asset_pvt.lookup_tbl;
    l_asset_count_rec                       csi_asset_pvt.asset_count_rec;
    l_asset_id_tbl                          csi_asset_pvt.asset_id_tbl;
    l_asset_loc_tbl                         csi_asset_pvt.asset_loc_tbl;
    l_version_label                         VARCHAR2(30);
    l_version_label_rec                     csi_datastructures_pub.version_label_rec;
    l_obj_id                                NUMBER;
    --
    px_oks_txn_inst_tbl                     oks_ibint_pub.txn_instance_tbl;
    l_batch_type                            VARCHAR2(50);
    l_batch_id                              NUMBER;
    --
BEGIN
    -- Standard Start of API savepoint
          SAVEPOINT      copy_single_item_instance;
    -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version,
                                          p_api_version,
                                          l_api_name ,
                                          G_PKG_NAME)
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;
   -- Initialize message list if p_init_msg_list is set to TRUE.
      IF FND_API.to_Boolean( p_init_msg_list ) THEN
            FND_MSG_PUB.initialize;
      END IF;
      --  Initialize API return status to success
          x_return_status := FND_API.G_RET_STS_SUCCESS;
    -- Check the profile option debug_level for debug message reporting
          l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');
    -- If debug_level = 1 then dump the procedure name
   IF (l_debug_level > 0) THEN
       csi_gen_utility_pvt.put_line('copy_single_item_instance ');
   END IF;
    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
         csi_gen_utility_pvt.put_line('copy_single_item_instance '||
                              p_api_version ||'-'
                           || p_commit ||'-'
                           || p_init_msg_list ||'-'
                           || p_validation_level ||'-'
                           || p_copy_ext_attribs ||'-'
                           || p_copy_org_assignments ||'-'
                           || p_copy_parties  ||'-'
                           || p_copy_contacts  ||'-'
                           || p_copy_accounts  ||'-'
                           || p_copy_asset_assignments ||'-'
                           || p_copy_pricing_attribs
                            );
     -- Dump item instanc red
         csi_gen_utility_pvt.dump_instance_rec(p_source_instance_rec);
     -- Dump txn_rec
         csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);

    END IF;
    -- Start API body
    -- Check if an instance id is passed in p_source_instance_rec or not.
    -- If yes, then query the item instance from from csi_item_instances table
    -- into l_curr_instance_rec.
    /*
     IF ((p_source_instance_rec.VLD_ORGANIZATION_ID = FND_API.G_MISS_NUM)
         OR (p_source_instance_rec.VLD_ORGANIZATION_ID IS NULL)) THEN
             FND_MESSAGE.SET_NAME('CSI','CSI_API_VLD_ORG_ID_NULL');
               FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
     ELSE
        l_new_instance_rec.VLD_ORGANIZATION_ID := p_source_instance_rec.VLD_ORGANIZATION_ID;
     END IF;
     */

    -- Added by sk for bug 2186683
    IF p_source_instance_rec.vld_organization_id IS NULL OR
       p_source_instance_rec.vld_organization_id = fnd_api.g_miss_num
    THEN
       BEGIN
          SELECT last_vld_organization_id
          INTO   l_vld_org_id
          FROM   csi_item_instances
          WHERE  instance_id = p_source_instance_rec.instance_id;
       EXCEPTION
         WHEN OTHERS THEN
            NULL;
       END;
    END IF;
    -- End addition by sk for bug 2186683

     IF (p_source_instance_rec.instance_id IS NULL) OR
         (p_source_instance_rec.instance_id = FND_API.G_MISS_NUM) THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_API_INSTANCE_ID_NULL');
                 FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
     ELSIF NOT (csi_Item_Instance_Vld_pvt.Val_and_get_inst_rec(
                  p_source_instance_rec.instance_id ,
                  l_curr_instance_rec )) THEN
               RAISE FND_API.G_EXC_ERROR;
     END IF;

    -- Check if the user has not passed incorrect options for contacts
     IF ((p_copy_parties  = fnd_api.g_false)
        AND (p_copy_contacts  = fnd_api.g_true)) THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_PTY_CONTACT_OPT');
          FND_MSG_PUB.Add;
          RAISE FND_API.G_EXC_ERROR;
     END IF;
     -- If the user has passed p_copy_parties as false get only the owner, else get all the parties
     IF (p_copy_parties  = fnd_api.g_true) THEN
          l_party_query_rec.instance_party_id         := FND_API.G_MISS_NUM;
          l_party_query_rec.instance_id               := l_curr_instance_rec.instance_id;
          l_party_query_rec.party_id                  := FND_API.G_MISS_NUM;
          l_party_query_rec.relationship_type_code    := FND_API.G_MISS_CHAR;
         csi_party_relationships_pub.get_inst_party_relationships
                    ( p_api_version                 => p_api_version
                     ,p_commit                      => p_commit
                     ,p_init_msg_list               => p_init_msg_list
                     ,p_validation_level            => p_validation_level
                     ,p_party_query_rec             => l_party_query_rec
                     ,p_resolve_id_columns          => fnd_api.g_true
                     ,p_time_stamp                  =>  NULL
                     ,x_party_header_tbl            => l_party_header_tbl
                     ,x_return_status               => x_return_status
                     ,x_msg_count                   => x_msg_count
                     ,x_msg_data                    => x_msg_data
                     );

                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );
                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                END IF;
     ELSE
          l_party_query_rec.instance_party_id         := FND_API.G_MISS_NUM;
          l_party_query_rec.instance_id               := l_curr_instance_rec.instance_id;
          l_party_query_rec.party_id                  := FND_API.G_MISS_NUM;
          l_party_query_rec.relationship_type_code    := 'OWNER';
         csi_party_relationships_pub.get_inst_party_relationships
                    ( p_api_version                 => p_api_version
                     ,p_commit                      => p_commit
                     ,p_init_msg_list               => p_init_msg_list
                     ,p_validation_level            => p_validation_level
                     ,p_party_query_rec             => l_party_query_rec
                     ,p_resolve_id_columns          => fnd_api.g_true
                     ,p_time_stamp                  => NULL
                     ,x_party_header_tbl            => l_party_header_tbl
                     ,x_return_status               => x_return_status
                     ,x_msg_count                   => x_msg_count
                     ,x_msg_data                    => x_msg_data
                     );

                 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );

                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                END IF;

    END IF;
--   This is mean to initialize the l_party_table in order to create an instance.
    IF l_party_header_tbl.COUNT > 0 THEN    /*****First change here 07/27/01 - RK***/
                FOR tab_row_party IN l_party_header_tbl.FIRST .. l_party_header_tbl.LAST
                LOOP
                     IF l_party_header_tbl.EXISTS(tab_row_party) THEN
                        IF  l_party_header_tbl(tab_row_party).contact_flag = 'Y' THEN
                            -- build the contacts table
                             l_contact_tbl(tab_row_party).instance_party_id := l_party_header_tbl(tab_row_party).instance_party_id;
                             l_contact_tbl(tab_row_party).instance_id := l_party_header_tbl(tab_row_party).instance_id;
                             l_contact_tbl(tab_row_party).party_id := l_party_header_tbl(tab_row_party).party_id;
                             l_contact_tbl(tab_row_party).party_source_table := l_party_header_tbl(tab_row_party).party_source_table;
                             l_contact_tbl(tab_row_party).relationship_type_code := l_party_header_tbl(tab_row_party).relationship_type_code;
                             l_contact_tbl(tab_row_party).contact_flag := l_party_header_tbl(tab_row_party).contact_flag;
                             l_contact_tbl(tab_row_party).contact_ip_id := l_party_header_tbl(tab_row_party).contact_ip_id;
                             l_contact_tbl(tab_row_party).active_start_date := l_party_header_tbl(tab_row_party).active_start_date;
                             l_contact_tbl(tab_row_party).active_end_date := l_party_header_tbl(tab_row_party).active_end_date;
                             l_contact_tbl(tab_row_party).context := l_party_header_tbl(tab_row_party).context;
                             l_contact_tbl(tab_row_party).attribute1 := l_party_header_tbl(tab_row_party).attribute1;
                             l_contact_tbl(tab_row_party).attribute2 := l_party_header_tbl(tab_row_party).attribute2;
                             l_contact_tbl(tab_row_party).attribute3 := l_party_header_tbl(tab_row_party).attribute3;
                             l_contact_tbl(tab_row_party).attribute4 := l_party_header_tbl(tab_row_party).attribute4;
                             l_contact_tbl(tab_row_party).attribute5 := l_party_header_tbl(tab_row_party).attribute5;
                             l_contact_tbl(tab_row_party).attribute6 := l_party_header_tbl(tab_row_party).attribute6;
                             l_contact_tbl(tab_row_party).attribute7 := l_party_header_tbl(tab_row_party).attribute7;
                             l_contact_tbl(tab_row_party).attribute8 := l_party_header_tbl(tab_row_party).attribute8;
                             l_contact_tbl(tab_row_party).attribute9 := l_party_header_tbl(tab_row_party).attribute9;
                             l_contact_tbl(tab_row_party).attribute10 := l_party_header_tbl(tab_row_party).attribute10;
                             l_contact_tbl(tab_row_party).attribute11 := l_party_header_tbl(tab_row_party).attribute11;
                             l_contact_tbl(tab_row_party).attribute12 := l_party_header_tbl(tab_row_party).attribute12;
                             l_contact_tbl(tab_row_party).attribute13 := l_party_header_tbl(tab_row_party).attribute13;
                             l_contact_tbl(tab_row_party).attribute14 := l_party_header_tbl(tab_row_party).attribute14;
                             l_contact_tbl(tab_row_party).attribute15 := l_party_header_tbl(tab_row_party).attribute15;
                             l_contact_tbl(tab_row_party).object_version_number := l_party_header_tbl(tab_row_party).object_version_number;
  --Start fo Addition for the Bugfix 2354589.
                             l_contact_tbl(tab_row_party).preferred_flag := l_party_header_tbl(tab_row_party).preferred_flag;
                             l_contact_tbl(tab_row_party).primary_flag := l_party_header_tbl(tab_row_party).primary_flag;
  --End of Addition for the Bugfix 2354589.
                        ELSE -- Build the parties table
                             l_party_tbl(tab_row_party).instance_party_id := l_party_header_tbl(tab_row_party).instance_party_id;
                             l_party_tbl(tab_row_party).instance_id := l_party_header_tbl(tab_row_party).instance_id;
                             l_party_tbl(tab_row_party).party_id := l_party_header_tbl(tab_row_party).party_id;
                             l_party_tbl(tab_row_party).party_source_table := l_party_header_tbl(tab_row_party).party_source_table;
                             l_party_tbl(tab_row_party).relationship_type_code := l_party_header_tbl(tab_row_party).relationship_type_code;
                             l_party_tbl(tab_row_party).contact_flag := l_party_header_tbl(tab_row_party).contact_flag;
                             l_party_tbl(tab_row_party).contact_ip_id := l_party_header_tbl(tab_row_party).contact_ip_id;
                             l_party_tbl(tab_row_party).active_start_date := l_party_header_tbl(tab_row_party).active_start_date;
                             l_party_tbl(tab_row_party).active_end_date := l_party_header_tbl(tab_row_party).active_end_date;
                             l_party_tbl(tab_row_party).context := l_party_header_tbl(tab_row_party).context;
                             l_party_tbl(tab_row_party).attribute1 := l_party_header_tbl(tab_row_party).attribute1;
                             l_party_tbl(tab_row_party).attribute2 := l_party_header_tbl(tab_row_party).attribute2;
                             l_party_tbl(tab_row_party).attribute3 := l_party_header_tbl(tab_row_party).attribute3;
                             l_party_tbl(tab_row_party).attribute4 := l_party_header_tbl(tab_row_party).attribute4;
                             l_party_tbl(tab_row_party).attribute5 := l_party_header_tbl(tab_row_party).attribute5;
                             l_party_tbl(tab_row_party).attribute6 := l_party_header_tbl(tab_row_party).attribute6;
                             l_party_tbl(tab_row_party).attribute7 := l_party_header_tbl(tab_row_party).attribute7;
                             l_party_tbl(tab_row_party).attribute8 := l_party_header_tbl(tab_row_party).attribute8;
                             l_party_tbl(tab_row_party).attribute9 := l_party_header_tbl(tab_row_party).attribute9;
                             l_party_tbl(tab_row_party).attribute10 := l_party_header_tbl(tab_row_party).attribute10;
                             l_party_tbl(tab_row_party).attribute11 := l_party_header_tbl(tab_row_party).attribute11;
                             l_party_tbl(tab_row_party).attribute12 := l_party_header_tbl(tab_row_party).attribute12;
                             l_party_tbl(tab_row_party).attribute13 := l_party_header_tbl(tab_row_party).attribute13;
                             l_party_tbl(tab_row_party).attribute14 := l_party_header_tbl(tab_row_party).attribute14;
                             l_party_tbl(tab_row_party).attribute15 := l_party_header_tbl(tab_row_party).attribute15;
                             l_party_tbl(tab_row_party).object_version_number := l_party_header_tbl(tab_row_party).object_version_number;
  --Start fo Addition for the Bugfix 2354589.
                             l_party_tbl(tab_row_party).preferred_flag := l_party_header_tbl(tab_row_party).preferred_flag;
                             l_party_tbl(tab_row_party).primary_flag := l_party_header_tbl(tab_row_party).primary_flag;
  --End of Addition for the Bugfix 2354589.
                         END IF;
                     END IF;
                END LOOP;
   END IF; --l_party_header_tbl.COUNT > 0
  l_original_party_tbl := l_party_tbl;
   -- Empty the party table
   l_party_header_tbl.DELETE;
    -- Create asset assignments if requested. Asset_assignment_tbl has alredy been fetched
    IF  (p_copy_asset_assignments  = fnd_api.g_true) THEN
          l_instance_asset_query_rec.instance_asset_id  := FND_API.G_MISS_NUM;
          l_instance_asset_query_rec.instance_id  := l_curr_instance_rec.instance_id;
          l_instance_asset_query_rec.fa_asset_id   := FND_API.G_MISS_NUM;
          l_instance_asset_query_rec.fa_book_type_code := FND_API.G_MISS_CHAR;
          l_instance_asset_query_rec.fa_location_id := FND_API.G_MISS_NUM;
          l_instance_asset_query_rec.update_status := FND_API.G_MISS_CHAR;
           csi_asset_pvt.get_instance_assets
            ( p_api_version                 => p_api_version
             ,p_commit                      => p_commit
             ,p_init_msg_list               => p_init_msg_list
             ,p_validation_level            => p_validation_level
             ,p_instance_asset_query_rec    => l_instance_asset_query_rec
             ,p_resolve_id_columns          => fnd_api.g_true
             ,p_time_stamp                  => NULL
             ,x_instance_asset_tbl          => l_asset_header_tbl
             ,x_return_status               => x_return_status
             ,x_msg_count                   => x_msg_count
             ,x_msg_data                    => x_msg_data
             );

                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );
                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                END IF;

    END IF;



    IF l_asset_header_tbl.COUNT > 0 THEN    /*****First change here 08/25/01 - RK***/
                FOR tab_row_party IN l_asset_header_tbl.FIRST .. l_asset_header_tbl.LAST
                LOOP
                     IF l_asset_header_tbl.EXISTS(tab_row_party) THEN
                             l_asset_tbl(tab_row_party).instance_asset_id := l_asset_header_tbl(tab_row_party).instance_asset_id;
                             l_asset_tbl(tab_row_party).instance_id := l_asset_header_tbl(tab_row_party).instance_id;
                             l_asset_tbl(tab_row_party).fa_asset_id := l_asset_header_tbl(tab_row_party).fa_asset_id;
                             l_asset_tbl(tab_row_party).fa_book_type_code := l_asset_header_tbl(tab_row_party).fa_book_type_code;
                             l_asset_tbl(tab_row_party).fa_location_id := l_asset_header_tbl(tab_row_party).fa_location_id;
                             l_asset_tbl(tab_row_party).asset_quantity := l_asset_header_tbl(tab_row_party).asset_quantity;
                             l_asset_tbl(tab_row_party).update_status := l_asset_header_tbl(tab_row_party).update_status;
                             l_asset_tbl(tab_row_party).active_start_date := l_asset_header_tbl(tab_row_party).active_start_date;
                             l_asset_tbl(tab_row_party).active_end_date := l_asset_header_tbl(tab_row_party).active_end_date;
                             l_asset_tbl(tab_row_party).object_version_number := l_asset_header_tbl(tab_row_party).object_version_number;
                     END IF;
                END LOOP;
   END IF; --l_asset_header_tbl.COUNT > 0
   -- Set the non-copiable attributes as follows

       l_new_instance_rec.CREATION_COMPLETE_FLAG := p_source_instance_rec.CREATION_COMPLETE_FLAG;
       l_new_instance_rec.COMPLETENESS_FLAG := p_source_instance_rec.COMPLETENESS_FLAG;

    IF (p_source_instance_rec.EXTERNAL_REFERENCE = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.EXTERNAL_REFERENCE := l_curr_instance_rec.EXTERNAL_REFERENCE;
    ELSE
        l_new_instance_rec.EXTERNAL_REFERENCE := p_source_instance_rec.EXTERNAL_REFERENCE;
    END IF;
    IF ((p_source_instance_rec.INVENTORY_ITEM_ID = FND_API.G_MISS_NUM)
            OR (p_source_instance_rec.INVENTORY_ITEM_ID IS NULL)) THEN
        l_new_instance_rec.INVENTORY_ITEM_ID := l_curr_instance_rec.INVENTORY_ITEM_ID;
    ELSE
        l_new_instance_rec.INVENTORY_ITEM_ID := p_source_instance_rec.INVENTORY_ITEM_ID;
    END IF;

     -- srramakr commented for bug # 2558156
     -- Uncommented for bug 2985165
     IF p_call_from_split=fnd_api.g_true
     THEN
         IF  (p_source_instance_rec.INVENTORY_REVISION = FND_API.G_MISS_CHAR) THEN
              l_new_instance_rec.INVENTORY_REVISION := l_curr_instance_rec.INVENTORY_REVISION;
         ELSE
              l_new_instance_rec.INVENTORY_REVISION := p_source_instance_rec.INVENTORY_REVISION;
         END IF;
     ELSE
     -- Uncommented for bug 2985165
     -- srramakr Bug # 2558156 Revision should not be copied
         IF p_source_instance_rec.INVENTORY_REVISION <> FND_API.G_MISS_CHAR THEN
            l_new_instance_rec.INVENTORY_REVISION := p_source_instance_rec.INVENTORY_REVISION;
         END IF;
     END IF;

     IF ((p_source_instance_rec.INV_MASTER_ORGANIZATION_ID = FND_API.G_MISS_NUM)
             OR (p_source_instance_rec.INV_MASTER_ORGANIZATION_ID IS NULL)) THEN
        l_new_instance_rec.INV_MASTER_ORGANIZATION_ID := l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID;
      ELSE
       l_new_instance_rec.INV_MASTER_ORGANIZATION_ID := p_source_instance_rec.INV_MASTER_ORGANIZATION_ID ;
      END IF;

     IF (p_source_instance_rec.SERIAL_NUMBER <> FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.SERIAL_NUMBER := p_source_instance_rec.SERIAL_NUMBER;
     END IF;

     IF ((p_source_instance_rec.MFG_SERIAL_NUMBER_FLAG = FND_API.G_MISS_CHAR)
        OR (p_source_instance_rec.MFG_SERIAL_NUMBER_FLAG IS NULL)) THEN
        l_new_instance_rec.MFG_SERIAL_NUMBER_FLAG := l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG;
      ELSE
       l_new_instance_rec.MFG_SERIAL_NUMBER_FLAG := p_source_instance_rec.MFG_SERIAL_NUMBER_FLAG ;
     END IF;

     IF (p_source_instance_rec.LOT_NUMBER = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.LOT_NUMBER := l_curr_instance_rec.LOT_NUMBER;
    ELSE
        l_new_instance_rec.LOT_NUMBER := p_source_instance_rec.LOT_NUMBER;
     END IF;

     IF ((p_source_instance_rec.QUANTITY = FND_API.G_MISS_NUM)
        OR (p_source_instance_rec.QUANTITY IS NULL)) THEN
        l_new_instance_rec.QUANTITY := l_curr_instance_rec.QUANTITY;
     ELSE
       l_new_instance_rec.QUANTITY := p_source_instance_rec.QUANTITY ;
     END IF;

     IF ((p_source_instance_rec.UNIT_OF_MEASURE = FND_API.G_MISS_CHAR)
        OR  (p_source_instance_rec.UNIT_OF_MEASURE IS NULL)) THEN
        l_new_instance_rec.UNIT_OF_MEASURE := l_curr_instance_rec.UNIT_OF_MEASURE;
     ELSE
       l_new_instance_rec.UNIT_OF_MEASURE := p_source_instance_rec.UNIT_OF_MEASURE ;
     END IF;

     IF (p_source_instance_rec.ACCOUNTING_CLASS_CODE = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ACCOUNTING_CLASS_CODE := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
     ELSE
         l_new_instance_rec.ACCOUNTING_CLASS_CODE := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
     END IF;

     IF (p_source_instance_rec.INSTANCE_CONDITION_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.INSTANCE_CONDITION_ID := l_curr_instance_rec.INSTANCE_CONDITION_ID;
     ELSE
        l_new_instance_rec.INSTANCE_CONDITION_ID := p_source_instance_rec.INSTANCE_CONDITION_ID;
     END IF;

     IF ((p_source_instance_rec.INSTANCE_STATUS_ID = FND_API.G_MISS_NUM)
        OR (p_source_instance_rec.INSTANCE_STATUS_ID IS NULL)) THEN
        l_new_instance_rec.INSTANCE_STATUS_ID := l_curr_instance_rec.INSTANCE_STATUS_ID;
        ELSE
       l_new_instance_rec.INSTANCE_STATUS_ID := p_source_instance_rec.INSTANCE_STATUS_ID ;
     END IF;

     IF ((p_source_instance_rec.CUSTOMER_VIEW_FLAG = FND_API.G_MISS_CHAR)
         OR (p_source_instance_rec.CUSTOMER_VIEW_FLAG IS NULL )) THEN
        l_new_instance_rec.CUSTOMER_VIEW_FLAG := l_curr_instance_rec.CUSTOMER_VIEW_FLAG;
       ELSE
       l_new_instance_rec.CUSTOMER_VIEW_FLAG := p_source_instance_rec.CUSTOMER_VIEW_FLAG ;
     END IF;

     IF ((p_source_instance_rec.MERCHANT_VIEW_FLAG = FND_API.G_MISS_CHAR)
        OR (p_source_instance_rec.MERCHANT_VIEW_FLAG IS NULL)) THEN
        l_new_instance_rec.MERCHANT_VIEW_FLAG := l_curr_instance_rec.MERCHANT_VIEW_FLAG;
      ELSE
       l_new_instance_rec.MERCHANT_VIEW_FLAG := p_source_instance_rec.MERCHANT_VIEW_FLAG ;
     END IF;

     IF (p_source_instance_rec.SELLABLE_FLAG = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.SELLABLE_FLAG := l_curr_instance_rec.SELLABLE_FLAG;
     ELSE
        l_new_instance_rec.SELLABLE_FLAG := p_source_instance_rec.SELLABLE_FLAG;
     END IF;

     IF (p_source_instance_rec.SYSTEM_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.SYSTEM_ID := l_curr_instance_rec.SYSTEM_ID;
     ELSE
        l_new_instance_rec.SYSTEM_ID := p_source_instance_rec.SYSTEM_ID;
     END IF;

     IF (p_source_instance_rec.INSTANCE_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.INSTANCE_TYPE_CODE := l_curr_instance_rec.INSTANCE_TYPE_CODE;
     ELSE
        l_new_instance_rec.INSTANCE_TYPE_CODE := p_source_instance_rec.INSTANCE_TYPE_CODE;
     END IF;

     IF (p_source_instance_rec.ACTIVE_START_DATE = FND_API.G_MISS_DATE) THEN
        l_new_instance_rec.ACTIVE_START_DATE := l_curr_instance_rec.ACTIVE_START_DATE;
     ELSE
        l_new_instance_rec.ACTIVE_START_DATE := p_source_instance_rec.ACTIVE_START_DATE;
      END IF;

      IF (p_source_instance_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE) THEN
        l_new_instance_rec.ACTIVE_END_DATE := l_curr_instance_rec.ACTIVE_END_DATE;
      ELSE
        l_new_instance_rec.ACTIVE_END_DATE := p_source_instance_rec.ACTIVE_END_DATE;
      END IF;

      IF (p_source_instance_rec.LOCATION_TYPE_CODE = FND_API.G_MISS_CHAR)  THEN
        l_new_instance_rec.LOCATION_TYPE_CODE := l_curr_instance_rec.LOCATION_TYPE_CODE;
      ELSE
        l_new_instance_rec.LOCATION_TYPE_CODE := p_source_instance_rec.LOCATION_TYPE_CODE;
      END IF;

      IF (p_source_instance_rec.LOCATION_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LOCATION_ID := l_curr_instance_rec.LOCATION_ID;
      ELSE
        l_new_instance_rec.LOCATION_ID := p_source_instance_rec.LOCATION_ID;
      END IF;

      IF (p_source_instance_rec.INV_ORGANIZATION_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.INV_ORGANIZATION_ID := l_curr_instance_rec.INV_ORGANIZATION_ID;
      ELSE
        l_new_instance_rec.INV_ORGANIZATION_ID := p_source_instance_rec.INV_ORGANIZATION_ID;
      END IF;

      IF (p_source_instance_rec.INV_SUBINVENTORY_NAME = FND_API.G_MISS_CHAR) THEN
         l_new_instance_rec.INV_SUBINVENTORY_NAME := l_curr_instance_rec.INV_SUBINVENTORY_NAME;
      ELSE
          l_new_instance_rec.INV_SUBINVENTORY_NAME := p_source_instance_rec.INV_SUBINVENTORY_NAME;
      END IF;

      IF (p_source_instance_rec.INV_LOCATOR_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.INV_LOCATOR_ID := l_curr_instance_rec.INV_LOCATOR_ID;
      ELSE
        l_new_instance_rec.INV_LOCATOR_ID := p_source_instance_rec.INV_LOCATOR_ID;
      END IF;

      IF (p_source_instance_rec.PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.PA_PROJECT_ID := l_curr_instance_rec.PA_PROJECT_ID;
      ELSE
        l_new_instance_rec.PA_PROJECT_ID := p_source_instance_rec.PA_PROJECT_ID;
      END IF;

      IF (p_source_instance_rec.PA_PROJECT_TASK_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.PA_PROJECT_TASK_ID := l_curr_instance_rec.PA_PROJECT_TASK_ID;
      ELSE
        l_new_instance_rec.PA_PROJECT_TASK_ID := p_source_instance_rec.PA_PROJECT_TASK_ID;
      END IF;

      IF (p_source_instance_rec.IN_TRANSIT_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.IN_TRANSIT_ORDER_LINE_ID := l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
      ELSE
        l_new_instance_rec.IN_TRANSIT_ORDER_LINE_ID := p_source_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
      END IF;

      IF (p_source_instance_rec.WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.WIP_JOB_ID := l_curr_instance_rec.WIP_JOB_ID;
      ELSE
        l_new_instance_rec.WIP_JOB_ID := p_source_instance_rec.WIP_JOB_ID;
      END IF;

      IF (p_source_instance_rec.PO_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.PO_ORDER_LINE_ID := l_curr_instance_rec.PO_ORDER_LINE_ID;
      ELSE
        l_new_instance_rec.PO_ORDER_LINE_ID := p_source_instance_rec.PO_ORDER_LINE_ID;
      END IF;

      IF (p_source_instance_rec.LAST_TXN_LINE_DETAIL_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID;
      ELSE
        l_new_instance_rec.LAST_TXN_LINE_DETAIL_ID := p_source_instance_rec.LAST_TXN_LINE_DETAIL_ID;
      END IF;

      IF (p_source_instance_rec.LAST_OE_RMA_LINE_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
      ELSE
        l_new_instance_rec.LAST_OE_RMA_LINE_ID := p_source_instance_rec.LAST_OE_RMA_LINE_ID;
      END IF;

      IF (p_source_instance_rec.LAST_PO_PO_LINE_ID  = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_PO_PO_LINE_ID  := l_curr_instance_rec.LAST_PO_PO_LINE_ID ;
      ELSE
         l_new_instance_rec.LAST_PO_PO_LINE_ID  := p_source_instance_rec.LAST_PO_PO_LINE_ID ;
      END IF;

      IF (p_source_instance_rec.LAST_OE_PO_NUMBER = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER;
      ELSE
         l_new_instance_rec.LAST_OE_PO_NUMBER := p_source_instance_rec.LAST_OE_PO_NUMBER;
      END IF;

      IF (p_source_instance_rec.LAST_WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID;
      ELSE
          l_new_instance_rec.LAST_WIP_JOB_ID := p_source_instance_rec.LAST_WIP_JOB_ID;
      END IF;

      IF (p_source_instance_rec.LAST_PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID;
      ELSE
        l_new_instance_rec.LAST_PA_PROJECT_ID := p_source_instance_rec.LAST_PA_PROJECT_ID;
      END IF;

      IF (p_source_instance_rec.LAST_PA_TASK_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID;
      ELSE
        l_new_instance_rec.LAST_PA_TASK_ID := p_source_instance_rec.LAST_PA_TASK_ID;
      END IF;

      IF (p_source_instance_rec.LAST_OE_AGREEMENT_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_OE_AGREEMENT_ID  := l_curr_instance_rec.LAST_OE_AGREEMENT_ID;
      ELSE
         l_new_instance_rec.LAST_OE_AGREEMENT_ID  := p_source_instance_rec.LAST_OE_AGREEMENT_ID;
      END IF;

      IF (p_source_instance_rec.INSTALL_DATE = FND_API.G_MISS_DATE) THEN
        l_new_instance_rec.INSTALL_DATE := l_curr_instance_rec.INSTALL_DATE;
      ELSE
        l_new_instance_rec.INSTALL_DATE := p_source_instance_rec.INSTALL_DATE;
      END IF;

      IF (p_source_instance_rec.MANUALLY_CREATED_FLAG = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.MANUALLY_CREATED_FLAG := l_curr_instance_rec.MANUALLY_CREATED_FLAG;
      ELSE
        l_new_instance_rec.MANUALLY_CREATED_FLAG := p_source_instance_rec.MANUALLY_CREATED_FLAG;
      END IF;

      IF (p_source_instance_rec.RETURN_BY_DATE  = FND_API.G_MISS_DATE) THEN
        l_new_instance_rec.RETURN_BY_DATE  := l_curr_instance_rec.RETURN_BY_DATE ;
      ELSE
        l_new_instance_rec.RETURN_BY_DATE  := p_source_instance_rec.RETURN_BY_DATE ;
      END IF;

      IF (p_source_instance_rec.ACTUAL_RETURN_DATE = FND_API.G_MISS_DATE) THEN
        l_new_instance_rec.ACTUAL_RETURN_DATE := l_curr_instance_rec.ACTUAL_RETURN_DATE;
      ELSE
        l_new_instance_rec.ACTUAL_RETURN_DATE := p_source_instance_rec.ACTUAL_RETURN_DATE;
      END IF;

      IF (p_source_instance_rec.VERSION_LABEL = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.VERSION_LABEL := l_curr_instance_rec.VERSION_LABEL;
      ELSE
        l_new_instance_rec.VERSION_LABEL := p_source_instance_rec.VERSION_LABEL;
      END IF;

      IF (p_source_instance_rec.VERSION_LABEL_DESCRIPTION = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.VERSION_LABEL_DESCRIPTION := l_curr_instance_rec.VERSION_LABEL_DESCRIPTION;
      ELSE
        l_new_instance_rec.VERSION_LABEL_DESCRIPTION := p_source_instance_rec.VERSION_LABEL_DESCRIPTION;
      END IF;

      IF (p_source_instance_rec.CONTEXT = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.CONTEXT := l_curr_instance_rec.CONTEXT;
      ELSE
        l_new_instance_rec.CONTEXT := p_source_instance_rec.CONTEXT;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE1 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE1 := l_curr_instance_rec.ATTRIBUTE1;
      ELSE
        l_new_instance_rec.ATTRIBUTE1 := p_source_instance_rec.ATTRIBUTE1;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE2 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE2 := l_curr_instance_rec.ATTRIBUTE2;
       ELSE
         l_new_instance_rec.ATTRIBUTE2 := p_source_instance_rec.ATTRIBUTE2;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE3 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE3 := l_curr_instance_rec.ATTRIBUTE3;
       ELSE
        l_new_instance_rec.ATTRIBUTE3 := p_source_instance_rec.ATTRIBUTE3;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE4 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE4 := l_curr_instance_rec.ATTRIBUTE4;
      ELSE
       l_new_instance_rec.ATTRIBUTE4 := p_source_instance_rec.ATTRIBUTE4;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE5 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE5 := l_curr_instance_rec.ATTRIBUTE5;
      ELSE
        l_new_instance_rec.ATTRIBUTE5 := p_source_instance_rec.ATTRIBUTE5;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE6 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE6 := l_curr_instance_rec.ATTRIBUTE6;
      ELSE
        l_new_instance_rec.ATTRIBUTE6 := p_source_instance_rec.ATTRIBUTE6;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE7 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE7 := l_curr_instance_rec.ATTRIBUTE7;
      ELSE
        l_new_instance_rec.ATTRIBUTE7 := p_source_instance_rec.ATTRIBUTE7;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE8 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE9 := l_curr_instance_rec.ATTRIBUTE9;
      ELSE
         l_new_instance_rec.ATTRIBUTE9 := p_source_instance_rec.ATTRIBUTE9;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE10 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE10 := l_curr_instance_rec.ATTRIBUTE10;
      ELSE
        l_new_instance_rec.ATTRIBUTE10 := p_source_instance_rec.ATTRIBUTE10;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE11 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE11 := l_curr_instance_rec.ATTRIBUTE11;
      ELSE
        l_new_instance_rec.ATTRIBUTE11 := p_source_instance_rec.ATTRIBUTE11;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE12 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE12 := l_curr_instance_rec.ATTRIBUTE12;
      ELSE
        l_new_instance_rec.ATTRIBUTE12 := p_source_instance_rec.ATTRIBUTE12;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE13 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE13 := l_curr_instance_rec.ATTRIBUTE13;
      ELSE
         l_new_instance_rec.ATTRIBUTE13 := p_source_instance_rec.ATTRIBUTE13;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE14 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE14 := l_curr_instance_rec.ATTRIBUTE14;
      ELSE
        l_new_instance_rec.ATTRIBUTE14 := p_source_instance_rec.ATTRIBUTE14;
      END IF;

      IF (p_source_instance_rec.ATTRIBUTE15 = FND_API.G_MISS_CHAR) THEN
        l_new_instance_rec.ATTRIBUTE15 := l_curr_instance_rec.ATTRIBUTE15;
      ELSE
        l_new_instance_rec.ATTRIBUTE15 := p_source_instance_rec.ATTRIBUTE15;
      END IF;

      IF (p_source_instance_rec.LAST_OE_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
        l_new_instance_rec.LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID;
      ELSE
        l_new_instance_rec.LAST_OE_ORDER_LINE_ID := p_source_instance_rec.LAST_OE_ORDER_LINE_ID;
      END IF;

               IF (p_source_instance_rec.LAST_OE_RMA_LINE_ID  = FND_API.G_MISS_NUM) THEN
                  l_new_instance_rec.LAST_OE_RMA_LINE_ID     := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
               ELSE
                  l_new_instance_rec.LAST_OE_RMA_LINE_ID     := p_source_instance_rec.LAST_OE_RMA_LINE_ID;
               END IF;

               IF (p_source_instance_rec.LAST_PO_PO_LINE_ID  = FND_API.G_MISS_NUM) THEN
                  l_new_instance_rec.LAST_PO_PO_LINE_ID    := l_curr_instance_rec.LAST_PO_PO_LINE_ID;
               ELSE
                  l_new_instance_rec.LAST_PO_PO_LINE_ID    := p_source_instance_rec.LAST_PO_PO_LINE_ID;
               END IF;

               IF (p_source_instance_rec.LAST_OE_PO_NUMBER = FND_API.G_MISS_CHAR) THEN
                 l_new_instance_rec.LAST_OE_PO_NUMBER       := l_curr_instance_rec.LAST_OE_PO_NUMBER;
               ELSE
                 l_new_instance_rec.LAST_OE_PO_NUMBER       := p_source_instance_rec.LAST_OE_PO_NUMBER;
               END IF;

               IF (p_source_instance_rec.LAST_WIP_JOB_ID  = FND_API.G_MISS_NUM) THEN
                 l_new_instance_rec.LAST_WIP_JOB_ID         := l_curr_instance_rec.LAST_WIP_JOB_ID;
               ELSE
                 l_new_instance_rec.LAST_WIP_JOB_ID         := p_source_instance_rec.LAST_WIP_JOB_ID;
               END IF;

               IF (p_source_instance_rec.LAST_PA_PROJECT_ID  = FND_API.G_MISS_NUM) THEN
                 l_new_instance_rec.LAST_PA_PROJECT_ID      := l_curr_instance_rec.LAST_PA_PROJECT_ID;
               ELSE
                 l_new_instance_rec.LAST_PA_PROJECT_ID      := p_source_instance_rec.LAST_PA_PROJECT_ID;
               END IF;

                IF (p_source_instance_rec.LAST_PA_TASK_ID = FND_API.G_MISS_NUM) THEN
                    l_new_instance_rec.LAST_PA_TASK_ID         := l_curr_instance_rec.LAST_PA_TASK_ID ;
                ELSE
                    l_new_instance_rec.LAST_PA_TASK_ID         := p_source_instance_rec.LAST_PA_TASK_ID ;
                 END IF;

                 IF (p_source_instance_rec.LAST_OE_AGREEMENT_ID  = FND_API.G_MISS_NUM) THEN
                  l_new_instance_rec.LAST_OE_AGREEMENT_ID    := l_curr_instance_rec.LAST_OE_AGREEMENT_ID ;
                 ELSE
                  l_new_instance_rec.LAST_OE_AGREEMENT_ID    := p_source_instance_rec.LAST_OE_AGREEMENT_ID ;
                 END IF;

                 IF (p_source_instance_rec.INSTALL_DATE = FND_API.G_MISS_DATE) THEN
                   l_new_instance_rec.INSTALL_DATE            := l_curr_instance_rec.INSTALL_DATE;
                 ELSE
                   l_new_instance_rec.INSTALL_DATE            := p_source_instance_rec.INSTALL_DATE;
                  END IF;

                 IF (p_source_instance_rec.RETURN_BY_DATE = FND_API.G_MISS_DATE) THEN
                   l_new_instance_rec.RETURN_BY_DATE          := l_curr_instance_rec.RETURN_BY_DATE;
                 ELSE
                   l_new_instance_rec.RETURN_BY_DATE          := p_source_instance_rec.RETURN_BY_DATE;
                 END IF;

                 IF (p_source_instance_rec.ACTUAL_RETURN_DATE = FND_API.G_MISS_DATE) THEN
                    l_new_instance_rec.ACTUAL_RETURN_DATE      := l_curr_instance_rec.ACTUAL_RETURN_DATE;
                 ELSE
                    l_new_instance_rec.ACTUAL_RETURN_DATE      := p_source_instance_rec.ACTUAL_RETURN_DATE;
                 END IF;

                 IF (p_source_instance_rec.instance_number = fnd_api.g_miss_char)
                 THEN
                   NULL;
                 ELSE
                   l_new_instance_rec.instance_number := p_source_instance_rec.instance_number;
                 END IF;

                 IF (p_source_instance_rec.instance_description = fnd_api.g_miss_char)
                 THEN
                   NULL;
                 ELSE
                   l_new_instance_rec.instance_description := p_source_instance_rec.instance_description;
                 END IF;

                 -- Set the non-copiable attributes as follows
                 l_new_instance_rec.instance_id        := FND_API.G_MISS_NUM;

                 -- uncommented for Bug 5348851
                 l_new_instance_rec.instance_number    := FND_API.G_MISS_CHAR;

		 --IF condition added for bug5248037--
	         If p_txn_rec.transaction_type_id <> 1 Then
		    l_new_instance_rec.active_start_date  := nvl(p_source_instance_rec.active_start_date,sysdate);
	         Else
		    l_new_instance_rec.active_start_date  := SYSDATE;
	         End If;

                 l_new_instance_rec.MANUALLY_CREATED_FLAG   := 'N';
                 l_new_instance_rec.COMPLETENESS_FLAG       := NULL;
                 l_new_instance_rec.OBJECT_VERSION_NUMBER   := 1;


                 -- The following is added for bug 2944298.
                 -- Value of instance_usage_code should be copied from the source instance
                 -- only if it is called from split.
                   IF p_call_from_split=fnd_api.g_true
                   THEN
                 -- Added by sguthiva for bug 2163942
                     IF (p_source_instance_rec.instance_usage_code = FND_API.G_MISS_CHAR) THEN
                         l_new_instance_rec.instance_usage_code := l_curr_instance_rec.instance_usage_code;
                     ELSE
                         l_new_instance_rec.instance_usage_code := p_source_instance_rec.instance_usage_code;
                     END IF;
                   ELSE
                      l_obj_id:=NULL;
                      csi_ii_relationships_pvt.Get_Top_Most_Parent
                         ( p_subject_id       => p_source_instance_rec.instance_id,
                           p_rel_type_code    => 'COMPONENT-OF',
                           p_object_id        => l_obj_id
                         );
                       --
                       IF l_obj_id <> p_source_instance_rec.instance_id THEN
                          BEGIN
                             SELECT instance_usage_code
                             INTO   l_new_instance_rec.instance_usage_code
                             FROM   csi_item_instances
                             WHERE  instance_id=l_obj_id;
                          EXCEPTION
                             WHEN NO_DATA_FOUND THEN
                                NULL;
                          END;
                       ELSE
                          l_new_instance_rec.instance_usage_code := l_curr_instance_rec.instance_usage_code;
                       END IF;
                   END IF;
                 -- End addition by sguthiva for bug 2163942
                 -- Added by sguthiva for bug 2230264

                 -- Added by sk for bug 2230264
                 IF (p_source_instance_rec.vld_organization_id = FND_API.G_MISS_NUM) THEN
                    l_new_instance_rec.vld_organization_id := l_vld_org_id;
                 ELSE
                    l_new_instance_rec.vld_organization_id := p_source_instance_rec.vld_organization_id;
                 END IF;

                 IF (p_source_instance_rec.install_location_type_code = FND_API.G_MISS_CHAR) THEN
                    l_new_instance_rec.install_location_type_code := l_curr_instance_rec.install_location_type_code;
                 ELSE
                    l_new_instance_rec.install_location_type_code := p_source_instance_rec.install_location_type_code;
                 END IF;

                 IF (p_source_instance_rec.install_location_id = FND_API.G_MISS_NUM) THEN
                    l_new_instance_rec.install_location_id := l_curr_instance_rec.install_location_id;
                 ELSE
                    l_new_instance_rec.install_location_id := p_source_instance_rec.install_location_id;
                 END IF;
                 -- End addition by sk for bug 2230264

                --start of code for eam integration--
   	        IF (p_source_instance_rec.NETWORK_ASSET_FLAG = FND_API.G_MISS_CHAR) THEN
		    l_new_instance_rec.NETWORK_ASSET_FLAG := l_curr_instance_rec.NETWORK_ASSET_FLAG;
		ELSE
		    l_new_instance_rec.NETWORK_ASSET_FLAG := p_source_instance_rec.NETWORK_ASSET_FLAG;
		END IF;

		IF (p_source_instance_rec.MAINTAINABLE_FLAG = FND_API.G_MISS_CHAR) THEN
		    l_new_instance_rec.MAINTAINABLE_FLAG := l_curr_instance_rec.MAINTAINABLE_FLAG;
		ELSE
		    l_new_instance_rec.MAINTAINABLE_FLAG := p_source_instance_rec.MAINTAINABLE_FLAG;
		END IF;

		IF (p_source_instance_rec.PN_LOCATION_ID = FND_API.G_MISS_NUM) THEN
		   l_new_instance_rec.PN_LOCATION_ID := l_curr_instance_rec.PN_LOCATION_ID;
		ELSE
		   l_new_instance_rec.PN_LOCATION_ID := p_source_instance_rec.PN_LOCATION_ID;
		END IF;

		IF (p_source_instance_rec.ASSET_CRITICALITY_CODE = FND_API.G_MISS_CHAR) THEN
		   l_new_instance_rec.ASSET_CRITICALITY_CODE := l_curr_instance_rec.ASSET_CRITICALITY_CODE;
		ELSE
		   l_new_instance_rec.ASSET_CRITICALITY_CODE := p_source_instance_rec.ASSET_CRITICALITY_CODE;
		END IF;

	        IF (p_source_instance_rec.CATEGORY_ID = FND_API.G_MISS_NUM) THEN
	           l_new_instance_rec.CATEGORY_ID  := l_curr_instance_rec.CATEGORY_ID;
	        ELSE
	           l_new_instance_rec.CATEGORY_ID  := p_source_instance_rec.CATEGORY_ID;
	       END IF;

  	       IF (p_source_instance_rec.EQUIPMENT_GEN_OBJECT_ID = FND_API.G_MISS_NUM) THEN
	          l_new_instance_rec.EQUIPMENT_GEN_OBJECT_ID := l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
	       ELSE
	          l_new_instance_rec.EQUIPMENT_GEN_OBJECT_ID := p_source_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
	       END IF;

	       IF (p_source_instance_rec.INSTANTIATION_FLAG = FND_API.G_MISS_CHAR) THEN
		   l_new_instance_rec.INSTANTIATION_FLAG := l_curr_instance_rec.INSTANTIATION_FLAG;
	       ELSE
		   l_new_instance_rec.INSTANTIATION_FLAG := p_source_instance_rec.INSTANTIATION_FLAG;
	       END IF;

	       IF (p_source_instance_rec.LINEAR_LOCATION_ID  = FND_API.G_MISS_NUM) THEN
	           l_new_instance_rec.LINEAR_LOCATION_ID  := l_curr_instance_rec.LINEAR_LOCATION_ID ;
	       ELSE
		   l_new_instance_rec.LINEAR_LOCATION_ID  := p_source_instance_rec.LINEAR_LOCATION_ID ;
	       END IF;

	       IF (p_source_instance_rec.OPERATIONAL_LOG_FLAG = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.OPERATIONAL_LOG_FLAG := l_curr_instance_rec.OPERATIONAL_LOG_FLAG;
	       ELSE
		  l_new_instance_rec.OPERATIONAL_LOG_FLAG := p_source_instance_rec.OPERATIONAL_LOG_FLAG;
	       END IF;

	       IF (p_source_instance_rec.CHECKIN_STATUS = FND_API.G_MISS_NUM) THEN
	          l_new_instance_rec.CHECKIN_STATUS := l_curr_instance_rec.CHECKIN_STATUS;
	       ELSE
	          l_new_instance_rec.CHECKIN_STATUS := p_source_instance_rec.CHECKIN_STATUS;
	       END IF;

	       IF (p_source_instance_rec.SUPPLIER_WARRANTY_EXP_DATE = FND_API.G_MISS_DATE) THEN
		  l_new_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
	       ELSE
	          l_new_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := p_source_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE16 = FND_API.G_MISS_CHAR) THEN
	         l_new_instance_rec.ATTRIBUTE16 := l_curr_instance_rec.ATTRIBUTE16;
	       ELSE
	         l_new_instance_rec.ATTRIBUTE16 := p_source_instance_rec.ATTRIBUTE16;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE17 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE17 := l_curr_instance_rec.ATTRIBUTE17;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE17 := p_source_instance_rec.ATTRIBUTE17;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE18 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE18 := l_curr_instance_rec.ATTRIBUTE18;
	       ELSE
		  l_new_instance_rec.ATTRIBUTE18 := p_source_instance_rec.ATTRIBUTE18;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE19 = FND_API.G_MISS_CHAR) THEN
		  l_new_instance_rec.ATTRIBUTE19 := l_curr_instance_rec.ATTRIBUTE19;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE19 := p_source_instance_rec.ATTRIBUTE19;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE20 = FND_API.G_MISS_CHAR) THEN
	           l_new_instance_rec.ATTRIBUTE20 := l_curr_instance_rec.ATTRIBUTE20;
	       ELSE
	           l_new_instance_rec.ATTRIBUTE20 := p_source_instance_rec.ATTRIBUTE20;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE21 = FND_API.G_MISS_CHAR) THEN
	           l_new_instance_rec.ATTRIBUTE21 := l_curr_instance_rec.ATTRIBUTE21;
	       ELSE
		   l_new_instance_rec.ATTRIBUTE21 := p_source_instance_rec.ATTRIBUTE21;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE22 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE22 := l_curr_instance_rec.ATTRIBUTE22;
	       ELSE
                  l_new_instance_rec.ATTRIBUTE22 := p_source_instance_rec.ATTRIBUTE22;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE23 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE23 := l_curr_instance_rec.ATTRIBUTE23;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE23 := p_source_instance_rec.ATTRIBUTE23;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE24 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE24 := l_curr_instance_rec.ATTRIBUTE24;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE24 := p_source_instance_rec.ATTRIBUTE24;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE25 = FND_API.G_MISS_CHAR) THEN
	           l_new_instance_rec.ATTRIBUTE25 := l_curr_instance_rec.ATTRIBUTE25;
	       ELSE
		   l_new_instance_rec.ATTRIBUTE25 := p_source_instance_rec.ATTRIBUTE25;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE26 = FND_API.G_MISS_CHAR) THEN
		  l_new_instance_rec.ATTRIBUTE26 := l_curr_instance_rec.ATTRIBUTE26;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE26 := p_source_instance_rec.ATTRIBUTE26;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE27 = FND_API.G_MISS_CHAR) THEN
		  l_new_instance_rec.ATTRIBUTE27 := l_curr_instance_rec.ATTRIBUTE27;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE27 := p_source_instance_rec.ATTRIBUTE27;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE28 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE28 := l_curr_instance_rec.ATTRIBUTE28;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE28 := p_source_instance_rec.ATTRIBUTE28;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE29 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE29 := l_curr_instance_rec.ATTRIBUTE29;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE29 := p_source_instance_rec.ATTRIBUTE29;
	       END IF;

	       IF (p_source_instance_rec.ATTRIBUTE30 = FND_API.G_MISS_CHAR) THEN
	          l_new_instance_rec.ATTRIBUTE30 := l_curr_instance_rec.ATTRIBUTE30;
	       ELSE
	          l_new_instance_rec.ATTRIBUTE30 := p_source_instance_rec.ATTRIBUTE30;
	       END IF;

	      --end of code for eam integration--

       -- Addition of columns for FA Integration
            IF (p_source_instance_rec.PAYABLES_UNIT_PRICE  = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.PAYABLES_UNIT_PRICE      := l_curr_instance_rec.PAYABLES_UNIT_PRICE;
            ELSE
                l_new_instance_rec.PAYABLES_UNIT_PRICE      := p_source_instance_rec.PAYABLES_UNIT_PRICE;
            END IF;

            IF (p_source_instance_rec.PAYABLES_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.PAYABLES_CURRENCY_CODE := l_curr_instance_rec.PAYABLES_CURRENCY_CODE;
            ELSE
                l_new_instance_rec.PAYABLES_CURRENCY_CODE := p_source_instance_rec.PAYABLES_CURRENCY_CODE;
            END IF;

            IF (p_source_instance_rec.PURCHASE_UNIT_PRICE  = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.PURCHASE_UNIT_PRICE      := l_curr_instance_rec.PURCHASE_UNIT_PRICE;
            ELSE
                l_new_instance_rec.PURCHASE_UNIT_PRICE      := p_source_instance_rec.PURCHASE_UNIT_PRICE;
            END IF;

            IF (p_source_instance_rec.PURCHASE_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.PURCHASE_CURRENCY_CODE := l_curr_instance_rec.PURCHASE_CURRENCY_CODE;
            ELSE
                l_new_instance_rec.PURCHASE_CURRENCY_CODE := p_source_instance_rec.PURCHASE_CURRENCY_CODE;
            END IF;

            IF (p_source_instance_rec.SALES_UNIT_PRICE  = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.SALES_UNIT_PRICE      := l_curr_instance_rec.SALES_UNIT_PRICE;
            ELSE
                l_new_instance_rec.SALES_UNIT_PRICE      := p_source_instance_rec.SALES_UNIT_PRICE;
            END IF;

            IF (p_source_instance_rec.SALES_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.SALES_CURRENCY_CODE := l_curr_instance_rec.SALES_CURRENCY_CODE;
            ELSE
                l_new_instance_rec.SALES_CURRENCY_CODE := p_source_instance_rec.SALES_CURRENCY_CODE;
            END IF;

            IF (p_source_instance_rec.OPERATIONAL_STATUS_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.OPERATIONAL_STATUS_CODE := l_curr_instance_rec.OPERATIONAL_STATUS_CODE;
            ELSE
                l_new_instance_rec.OPERATIONAL_STATUS_CODE := p_source_instance_rec.OPERATIONAL_STATUS_CODE;
            END IF;
        -- End addition of columns for FA Integration
     --  Call Create_item_instance to create the new instance in csi_item_instances table.

            CSI_ITEM_INSTANCE_PVT.create_item_instance
             (  p_api_version             => p_api_version
                ,p_commit                 => p_commit
                ,p_init_msg_list          => p_init_msg_list
                ,p_validation_level       => p_validation_level
                ,p_instance_rec           => l_new_instance_rec
                ,p_txn_rec                => p_txn_rec
                ,p_party_tbl              => l_party_tbl
                ,p_asset_tbl              => l_asset_tbl
                ,x_return_status          => x_return_status
                ,x_msg_count              => x_msg_count
                ,x_msg_data               => x_msg_data
                ,p_item_attribute_tbl     => l_item_attribute_tbl
                ,p_location_tbl           => l_location_tbl
                ,p_generic_id_tbl         => l_generic_id_tbl
                ,p_lookup_tbl             => l_lookup_tbl
                ,p_ins_count_rec          => l_ins_count_rec
             );

                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );

                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                ELSE
                   x_new_instance_tbl(1) := l_new_instance_rec;
                END IF;


          -- Create a party or parties for the new instances

          IF l_party_tbl.COUNT > 0 THEN
                FOR tab_row_party IN l_party_tbl.FIRST .. l_party_tbl.LAST
                LOOP
                    IF l_party_tbl.EXISTS(tab_row_party) THEN
                       -- Build account query rec
                       l_party_account_query_rec.instance_party_id := l_party_tbl(tab_row_party).instance_party_id ;
                       l_party_account_query_rec.ip_account_id  := FND_API.G_MISS_NUM;
                       l_party_account_query_rec.party_account_id   := FND_API.G_MISS_NUM;
                       l_party_account_query_rec.relationship_type_code  := FND_API.G_MISS_CHAR;

                       -- Get party accounts

                       csi_party_relationships_pub.get_inst_party_accounts
                          ( p_api_version                 => p_api_version
                           ,p_commit                      => p_commit
                           ,p_init_msg_list               => p_init_msg_list
                           ,p_validation_level            => p_validation_level
                           ,p_account_query_rec           => l_party_account_query_rec
                           ,p_resolve_id_columns          => fnd_api.g_true
                           ,p_time_stamp                  => NULL
                           ,x_account_header_tbl          => l_account_header_tbl
                           ,x_return_status               => x_return_status
                           ,x_msg_count                   => x_msg_count
                           ,x_msg_data                    => x_msg_data);

                            IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;


                         IF l_account_header_tbl.COUNT > 0 THEN       /***********Second Change 07/27/01 - RK**********/
                                 FOR tab_row_party IN l_account_header_tbl.FIRST .. l_account_header_tbl.LAST
                                 LOOP
                                    IF l_account_header_tbl.EXISTS(tab_row_party) THEN
                                      --  Donot copy accounts if user says so
                                      IF (p_copy_accounts <> fnd_api.g_true) THEN
                                        IF (l_account_header_tbl(tab_row_party).RELATIONSHIP_TYPE_CODE = 'OWNER') THEN
                                        l_party_account_tbl(tab_row_party).ip_account_id := l_account_header_tbl(tab_row_party).ip_account_id;
                                        l_party_account_tbl(tab_row_party).instance_party_id := l_account_header_tbl(tab_row_party).instance_party_id;
                                        l_party_account_tbl(tab_row_party).party_account_id := l_account_header_tbl(tab_row_party).party_account_id;
                                        l_party_account_tbl(tab_row_party).relationship_type_code := l_account_header_tbl(tab_row_party).relationship_type_code;
                                        l_party_account_tbl(tab_row_party).bill_to_address := l_account_header_tbl(tab_row_party).bill_to_address;
                                        l_party_account_tbl(tab_row_party).ship_to_address := l_account_header_tbl(tab_row_party).ship_to_address;
                                        l_party_account_tbl(tab_row_party).active_start_date := l_account_header_tbl(tab_row_party).active_start_date;
                                        l_party_account_tbl(tab_row_party).active_end_date := l_account_header_tbl(tab_row_party).active_end_date;
                                        l_party_account_tbl(tab_row_party).context := l_account_header_tbl(tab_row_party).context;
                                        l_party_account_tbl(tab_row_party).attribute1 := l_account_header_tbl(tab_row_party).attribute1;
                                        l_party_account_tbl(tab_row_party).attribute2 := l_account_header_tbl(tab_row_party).attribute2;
                                        l_party_account_tbl(tab_row_party).attribute3 := l_account_header_tbl(tab_row_party).attribute3;
                                        l_party_account_tbl(tab_row_party).attribute4 := l_account_header_tbl(tab_row_party).attribute4;
                                        l_party_account_tbl(tab_row_party).attribute5 := l_account_header_tbl(tab_row_party).attribute5;
                                        l_party_account_tbl(tab_row_party).attribute6 := l_account_header_tbl(tab_row_party).attribute6;
                                        l_party_account_tbl(tab_row_party).attribute7 := l_account_header_tbl(tab_row_party).attribute7;
                                        l_party_account_tbl(tab_row_party).attribute8 := l_account_header_tbl(tab_row_party).attribute8;
                                        l_party_account_tbl(tab_row_party).attribute9 := l_account_header_tbl(tab_row_party).attribute9;
                                        l_party_account_tbl(tab_row_party).attribute10 := l_account_header_tbl(tab_row_party).attribute10;
                                        l_party_account_tbl(tab_row_party).attribute11 := l_account_header_tbl(tab_row_party).attribute11;
                                        l_party_account_tbl(tab_row_party).attribute12 := l_account_header_tbl(tab_row_party).attribute12;
                                        l_party_account_tbl(tab_row_party).attribute13 := l_account_header_tbl(tab_row_party).attribute13;
                                        l_party_account_tbl(tab_row_party).attribute14 := l_account_header_tbl(tab_row_party).attribute14;
                                        l_party_account_tbl(tab_row_party).attribute15 := l_account_header_tbl(tab_row_party).attribute15;
                                        l_party_account_tbl(tab_row_party).object_version_number := l_account_header_tbl(tab_row_party).object_version_number;

                                         END IF;
                                       ELSE
                                        l_party_account_tbl(tab_row_party).ip_account_id := l_account_header_tbl(tab_row_party).ip_account_id;
                                        l_party_account_tbl(tab_row_party).instance_party_id := l_account_header_tbl(tab_row_party).instance_party_id;
                                        l_party_account_tbl(tab_row_party).party_account_id := l_account_header_tbl(tab_row_party).party_account_id;
                                        l_party_account_tbl(tab_row_party).relationship_type_code := l_account_header_tbl(tab_row_party).relationship_type_code;
                                        l_party_account_tbl(tab_row_party).bill_to_address := l_account_header_tbl(tab_row_party).bill_to_address;
                                        l_party_account_tbl(tab_row_party).ship_to_address := l_account_header_tbl(tab_row_party).ship_to_address;
                                        l_party_account_tbl(tab_row_party).active_start_date := l_account_header_tbl(tab_row_party).active_start_date;
                                        l_party_account_tbl(tab_row_party).active_end_date := l_account_header_tbl(tab_row_party).active_end_date;
                                        l_party_account_tbl(tab_row_party).context := l_account_header_tbl(tab_row_party).context;
                                        l_party_account_tbl(tab_row_party).attribute1 := l_account_header_tbl(tab_row_party).attribute1;
                                        l_party_account_tbl(tab_row_party).attribute2 := l_account_header_tbl(tab_row_party).attribute2;
                                        l_party_account_tbl(tab_row_party).attribute3 := l_account_header_tbl(tab_row_party).attribute3;
                                        l_party_account_tbl(tab_row_party).attribute4 := l_account_header_tbl(tab_row_party).attribute4;
                                        l_party_account_tbl(tab_row_party).attribute5 := l_account_header_tbl(tab_row_party).attribute5;
                                        l_party_account_tbl(tab_row_party).attribute6 := l_account_header_tbl(tab_row_party).attribute6;
                                        l_party_account_tbl(tab_row_party).attribute7 := l_account_header_tbl(tab_row_party).attribute7;
                                        l_party_account_tbl(tab_row_party).attribute8 := l_account_header_tbl(tab_row_party).attribute8;
                                        l_party_account_tbl(tab_row_party).attribute9 := l_account_header_tbl(tab_row_party).attribute9;
                                        l_party_account_tbl(tab_row_party).attribute10 := l_account_header_tbl(tab_row_party).attribute10;
                                        l_party_account_tbl(tab_row_party).attribute11 := l_account_header_tbl(tab_row_party).attribute11;
                                        l_party_account_tbl(tab_row_party).attribute12 := l_account_header_tbl(tab_row_party).attribute12;
                                        l_party_account_tbl(tab_row_party).attribute13 := l_account_header_tbl(tab_row_party).attribute13;
                                        l_party_account_tbl(tab_row_party).attribute14 := l_account_header_tbl(tab_row_party).attribute14;
                                        l_party_account_tbl(tab_row_party).attribute15 := l_account_header_tbl(tab_row_party).attribute15;
                                        l_party_account_tbl(tab_row_party).object_version_number := l_account_header_tbl(tab_row_party).object_version_number;

                                        END IF;
                                      END IF;
                                 END LOOP;
                         END IF; --l_account_header_tbl.COUNT > 0

                    -- Empty the account_header table
                       l_account_header_tbl.DELETE;
                    -- Build the party table
                       l_party_tbl(tab_row_party).instance_party_id             := FND_API.G_MISS_NUM;
                       l_party_tbl(tab_row_party).INSTANCE_ID                   := l_new_instance_rec.instance_id;
                       l_party_tbl(tab_row_party).ACTIVE_START_DATE             := FND_API.G_MISS_DATE;
                       l_party_tbl(tab_row_party).ACTIVE_END_DATE               := FND_API.G_MISS_DATE;
                   -- Build the temporary party table with only one record
                   -- for and grab all its accounts
                       l_party_input_tbl(1) := l_party_tbl(tab_row_party);


                -- Build its corresponding accounts

                        IF l_party_account_tbl.COUNT > 0 THEN
                            FOR tab_row_acct IN l_party_account_tbl.FIRST .. l_party_account_tbl.LAST
                            LOOP
                              -- l_party_account_tbl(tab_row_acct).parent_tbl_index := tab_row_party;
                               l_party_account_tbl(tab_row_acct).parent_tbl_index := 1;
                               l_party_account_tbl(tab_row_acct).ip_account_id  := FND_API.G_MISS_NUM;
                               l_party_account_tbl(tab_row_acct).instance_party_id := l_party_input_tbl(l_party_account_tbl(tab_row_acct).parent_tbl_index).instance_party_id;
                               l_party_account_tbl(tab_row_acct).ACTIVE_START_DATE := FND_API.G_MISS_DATE;
                               l_party_account_tbl(tab_row_acct).ACTIVE_END_DATE   := FND_API.G_MISS_DATE;
                               l_party_account_tbl(tab_row_acct).call_contracts    := FND_API.G_FALSE; -- Added for 2907563
                            END LOOP;
                        END IF;
                         -- Create instance party relationship and its accounts

                        csi_party_relationships_pub.create_inst_party_relationship
                            ( p_api_version                 => p_api_version
                             ,p_commit                      => p_commit
                             ,p_init_msg_list               => p_init_msg_list
                             ,p_validation_level            => p_validation_level
                             ,p_party_tbl                   => l_party_input_tbl
                             ,p_party_account_tbl           => l_party_account_tbl
                             ,p_txn_rec                     => p_txn_rec
                             ,p_oks_txn_inst_tbl            => px_oks_txn_inst_tbl
                             ,x_return_status               => x_return_status
                             ,x_msg_count                   => x_msg_count
                             ,x_msg_data                    => x_msg_data
                              );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                  (l_msg_index,
                                                  FND_API.G_FALSE      );

                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
                             -- Grab the new parties created in a new table
                               l_new_party_tbl(tab_row_party) := l_party_input_tbl(1);
                             -- Empty the party table
                               l_party_input_tbl.DELETE;
                             -- Empty the account table
                               l_party_account_tbl.DELETE;

           END IF;
          END LOOP;
      END IF;
-- ASH

          -- Create a contact or contacts for the new instances
      IF  (p_copy_contacts  = fnd_api.g_true) THEN
          IF l_contact_tbl.COUNT > 0 THEN
                FOR tab_row_contact IN l_contact_tbl.FIRST .. l_contact_tbl.LAST
                LOOP
                    IF l_contact_tbl.EXISTS(tab_row_contact) THEN

                      -- Find the contact_ip_id which was just created
                      -- for this contact
                       IF (l_original_party_tbl.COUNT > 0) THEN
                          FOR tab_row_party IN l_original_party_tbl.FIRST .. l_original_party_tbl.LAST
                          LOOP
                            IF l_original_party_tbl.EXISTS(tab_row_party) THEN
                              IF (l_original_party_tbl(tab_row_party).instance_party_id
                                 = l_contact_tbl(tab_row_contact).contact_ip_id )
                                THEN
                                 l_contact_tbl(tab_row_contact).contact_ip_id :=
                                   l_new_party_tbl(tab_row_party).instance_party_id;
                                 l_contact_found_flag := TRUE;
                              END IF;
                            END IF;
                          END LOOP;
                       END IF;
                    -- Check if the contact_ip_id exists
                       IF ((l_contact_tbl(tab_row_contact).contact_ip_id IS NULL) OR
                       (l_contact_tbl(tab_row_contact).contact_ip_id
                         = FND_API.G_MISS_NUM)
                        OR NOT(l_contact_found_flag) ) THEN
                           FND_MESSAGE.SET_NAME('CSI','CSI_API_CONTACT_IP_ID_NULL');
                           FND_MESSAGE.SET_TOKEN('INSTANCE_PARTY_ID',
                              l_contact_tbl(tab_row_contact).instance_party_id);
                           FND_MSG_PUB.Add;
                           RAISE FND_API.G_EXC_ERROR;
                       END IF;

                    -- Build other fiels of the contact table
                       l_contact_tbl(tab_row_contact).instance_party_id             := FND_API.G_MISS_NUM;
                       l_contact_tbl(tab_row_contact).contact_flag   := 'Y';
                       l_contact_tbl(tab_row_contact).INSTANCE_ID                   := l_new_instance_rec.instance_id;
                       l_contact_tbl(tab_row_contact).ACTIVE_START_DATE             := FND_API.G_MISS_DATE;
                       l_contact_tbl(tab_row_contact).ACTIVE_END_DATE               := FND_API.G_MISS_DATE;
                   -- Build the temporary party table with only one record
                   -- for and grab all its accounts
                       l_contact_input_tbl(1) := l_contact_tbl(tab_row_contact);

                         -- Create instance party relationship and its accounts
                        csi_party_relationships_pub.create_inst_party_relationship
                            ( p_api_version                 => p_api_version
                             ,p_commit                      => p_commit
                             ,p_init_msg_list               => p_init_msg_list
                             ,p_validation_level            => p_validation_level
                             ,p_party_tbl                   => l_contact_input_tbl
                             ,p_party_account_tbl           => l_contact_account_tbl
                             ,p_txn_rec                     => p_txn_rec
                             ,p_oks_txn_inst_tbl            => px_oks_txn_inst_tbl
                             ,x_return_status               => x_return_status
                             ,x_msg_count                   => x_msg_count
                             ,x_msg_data                    => x_msg_data
                              );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
                             -- Grab the new parties created in a new table
                               l_new_contact_tbl(tab_row_contact) := l_contact_input_tbl(1);
                             -- Empty the party table
                               l_contact_input_tbl.DELETE;
                             -- Empty the account table
                               l_contact_account_tbl.DELETE;
                             l_contact_found_flag := FALSE;
           END IF;
          END LOOP;
      END IF;
   END IF;
       -- Empty the party and contact tables
       l_new_contact_tbl.DELETE;
       l_new_party_tbl.DELETE;
-- ASH
  -- Create asset assignments if requested. Asset assignments have already been fetched before
    IF  (p_copy_asset_assignments  = fnd_api.g_true) THEN
       IF l_asset_tbl.COUNT > 0 THEN
         FOR tab_row IN l_asset_tbl.FIRST .. l_asset_tbl.LAST
         LOOP
            IF l_asset_tbl.EXISTS(tab_row) THEN
                 l_asset_tbl(tab_row).INSTANCE_ID          := l_new_instance_rec.instance_id;
                 l_asset_tbl(tab_row).INSTANCE_ASSET_ID   := FND_API.G_MISS_NUM;
                 l_asset_tbl(tab_row).ACTIVE_START_DATE    := FND_API.G_MISS_DATE;
                 l_asset_tbl(tab_row).ACTIVE_END_DATE      := FND_API.G_MISS_DATE;
                 -- Trap the row in a record and create assets row by row
                 l_instance_asset_rec := l_asset_tbl(tab_row);
                  csi_asset_pvt.create_instance_asset
                    ( p_api_version                 => p_api_version
                     ,p_commit                      => p_commit
                     ,p_init_msg_list               => p_init_msg_list
                     ,p_validation_level            => p_validation_level
                     ,p_instance_asset_rec          => l_instance_asset_rec
                     ,p_txn_rec                     => p_txn_rec
                     ,x_return_status               => x_return_status
                     ,x_msg_count                   => x_msg_count
                     ,x_msg_data                    => x_msg_data
                     ,p_lookup_tbl                  => l_asset_lookup_tbl
                     ,p_asset_count_rec             => l_asset_count_rec
                     ,p_asset_id_tbl                => l_asset_id_tbl
                     ,p_asset_loc_tbl               => l_asset_loc_tbl
                    );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
              END IF;
           END LOOP;
        END IF;
     END IF;
   -- Created extended attributes if requested
    IF (p_copy_ext_attribs =  fnd_api.g_true) THEN
        l_ext_attribs_query_rec.attribute_value_id  := FND_API.G_MISS_NUM;
        l_ext_attribs_query_rec.instance_id := l_curr_instance_rec.instance_id;
        l_ext_attribs_query_rec.attribute_id := FND_API.G_MISS_NUM;
        csi_item_instance_pub.get_extended_attrib_values
               (p_api_version            =>  p_api_version
               ,p_commit                 => p_commit
               ,p_init_msg_list          => p_init_msg_list
               ,p_validation_level       => p_validation_level
               ,p_ext_attribs_query_rec  => l_ext_attribs_query_rec
               ,p_time_stamp             => NULL
               ,x_ext_attrib_tbl         => l_ext_attrib_tbl
               ,x_ext_attrib_def_tbl     => l_ext_attrib_def_tbl
               ,x_return_status          => x_return_status
               ,x_msg_count              => x_msg_count
               ,x_msg_data               => x_msg_data
               );
                      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                      END IF;
      IF l_ext_attrib_tbl.COUNT > 0 THEN
         FOR tab_row IN l_ext_attrib_tbl.FIRST .. l_ext_attrib_tbl.LAST
         LOOP
            IF l_ext_attrib_tbl.EXISTS(tab_row) THEN
              IF NOT(csi_Item_Instance_Vld_pvt.get_ext_attrib_level(l_ext_attrib_tbl(tab_row).attribute_id,
                                        l_attribute_level ))THEN
                 RAISE FND_API.G_EXC_ERROR;
              END IF;

              IF (l_attribute_level = 'INSTANCE') THEN
                 l_ext_attrib_tbl.DELETE (tab_row);
              ELSE
                 l_ext_attrib_tbl(tab_row).INSTANCE_ID := l_new_instance_rec.instance_id;
                 l_ext_attrib_tbl(tab_row).ATTRIBUTE_VALUE_ID   := FND_API.G_MISS_NUM;
                 l_ext_attrib_tbl(tab_row).ACTIVE_START_DATE  := FND_API.G_MISS_DATE;
                 l_ext_attrib_tbl(tab_row).ACTIVE_END_DATE  := FND_API.G_MISS_DATE;
              END IF;
            END IF;
         END LOOP;

            -- It is possible that all the extended attributes were set at instance level and thus we have an empty table
            IF l_ext_attrib_tbl.COUNT > 0 THEN
              csi_item_instance_pub.create_extended_attrib_values
              ( p_api_version         => p_api_version
               ,p_commit              => p_commit
               ,p_init_msg_list       => p_init_msg_list
               ,p_validation_level    => p_validation_level
               ,p_ext_attrib_tbl      => l_ext_attrib_tbl
               ,p_txn_rec             => p_txn_rec
               ,x_return_status       => x_return_status
               ,x_msg_count           => x_msg_count
               ,x_msg_data            => x_msg_data
              );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
             END IF;
          END IF;
       END IF;

    -- Create org assignments if requested
    IF (p_copy_org_assignments = fnd_api.g_true) THEN
          l_ou_query_rec.instance_ou_id := FND_API.G_MISS_NUM;
          l_ou_query_rec.instance_id := l_curr_instance_rec.instance_id;
          l_ou_query_rec.operating_unit_id := FND_API.G_MISS_NUM;
          l_ou_query_rec.relationship_type_code  := FND_API.G_MISS_CHAR;

            csi_organization_unit_pub.get_organization_unit
               (
               p_api_version             => p_api_version
               ,p_commit                 => p_commit
               ,p_init_msg_list          => p_init_msg_list
               ,p_validation_level       => p_validation_level
               ,p_ou_query_rec           => l_ou_query_rec
               ,p_resolve_id_columns     => fnd_api.g_true
               ,p_time_stamp             => NULL
               ,x_org_unit_tbl           => l_org_unit_header_tbl
               ,x_return_status          => x_return_status
               ,x_msg_count              => x_msg_count
               ,x_msg_data               => x_msg_data
               );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                  (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;

              IF l_org_unit_header_tbl.COUNT > 0 THEN    /*****First change here 08/25/01 - RK***/
                FOR tab_row_party IN l_org_unit_header_tbl.FIRST .. l_org_unit_header_tbl.LAST
                LOOP
                     IF l_org_unit_header_tbl.EXISTS(tab_row_party) THEN
                             l_org_unit_tbl(tab_row_party).instance_ou_id := l_org_unit_header_tbl(tab_row_party).instance_ou_id;
                             l_org_unit_tbl(tab_row_party).instance_id := l_org_unit_header_tbl(tab_row_party).instance_id;
                             l_org_unit_tbl(tab_row_party).operating_unit_id := l_org_unit_header_tbl(tab_row_party).operating_unit_id;
                             l_org_unit_tbl(tab_row_party).relationship_type_code := l_org_unit_header_tbl(tab_row_party).relationship_type_code;
                             l_org_unit_tbl(tab_row_party).active_start_date := l_org_unit_header_tbl(tab_row_party).active_start_date;
                             l_org_unit_tbl(tab_row_party).active_end_date := l_org_unit_header_tbl(tab_row_party).active_end_date;
                             l_org_unit_tbl(tab_row_party).context := l_org_unit_header_tbl(tab_row_party).context;
                             l_org_unit_tbl(tab_row_party).attribute1 := l_org_unit_header_tbl(tab_row_party).attribute1;
                             l_org_unit_tbl(tab_row_party).attribute2 := l_org_unit_header_tbl(tab_row_party).attribute2;
                             l_org_unit_tbl(tab_row_party).attribute3 := l_org_unit_header_tbl(tab_row_party).attribute3;
                             l_org_unit_tbl(tab_row_party).attribute4 := l_org_unit_header_tbl(tab_row_party).attribute4;
                             l_org_unit_tbl(tab_row_party).attribute5 := l_org_unit_header_tbl(tab_row_party).attribute5;
                             l_org_unit_tbl(tab_row_party).attribute6 := l_org_unit_header_tbl(tab_row_party).attribute6;
                             l_org_unit_tbl(tab_row_party).attribute7 := l_org_unit_header_tbl(tab_row_party).attribute7;
                             l_org_unit_tbl(tab_row_party).attribute8 := l_org_unit_header_tbl(tab_row_party).attribute8;
                             l_org_unit_tbl(tab_row_party).attribute9 := l_org_unit_header_tbl(tab_row_party).attribute9;
                             l_org_unit_tbl(tab_row_party).attribute10 := l_org_unit_header_tbl(tab_row_party).attribute10;
                             l_org_unit_tbl(tab_row_party).attribute11 := l_org_unit_header_tbl(tab_row_party).attribute11;
                             l_org_unit_tbl(tab_row_party).attribute12 := l_org_unit_header_tbl(tab_row_party).attribute12;
                             l_org_unit_tbl(tab_row_party).attribute13 := l_org_unit_header_tbl(tab_row_party).attribute13;
                             l_org_unit_tbl(tab_row_party).attribute14 := l_org_unit_header_tbl(tab_row_party).attribute14;
                             l_org_unit_tbl(tab_row_party).attribute15 := l_org_unit_header_tbl(tab_row_party).attribute15;
                             l_org_unit_tbl(tab_row_party).object_version_number := l_org_unit_header_tbl(tab_row_party).object_version_number;
                     END IF;
                END LOOP;
             END IF; --l_org_unit_header_tbl.COUNT > 0

     IF l_org_unit_tbl.COUNT > 0 THEN
         FOR tab_row IN l_org_unit_tbl.FIRST .. l_org_unit_tbl.LAST
         LOOP
            IF l_org_unit_tbl.EXISTS(tab_row) THEN
                 l_org_unit_tbl(tab_row).INSTANCE_ID        := l_new_instance_rec.instance_id;
                 l_org_unit_tbl(tab_row).INSTANCE_OU_ID     := FND_API.G_MISS_NUM;
                 l_org_unit_tbl(tab_row).ACTIVE_START_DATE  := FND_API.G_MISS_DATE;
                 l_org_unit_tbl(tab_row).ACTIVE_END_DATE    := FND_API.G_MISS_DATE;
              END IF;
         END LOOP;
            csi_organization_unit_pub.create_organization_unit
            ( p_api_version       => p_api_version
             ,p_commit            => p_commit
             ,p_init_msg_list     => p_init_msg_list
             ,p_validation_level  => p_validation_level
             ,p_org_unit_tbl      => l_org_unit_tbl
             ,p_txn_rec           => p_txn_rec
             ,x_return_status     => x_return_status
             ,x_msg_count         => x_msg_count
             ,x_msg_data          => x_msg_data
            );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                   x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );

                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
         END IF;
    END IF;

   -- Create pricing attributes if requested
   IF (p_copy_pricing_attribs = fnd_api.g_true) THEN
      l_pricing_attribs_query_rec.pricing_attribute_id  := FND_API.G_MISS_NUM;
      l_pricing_attribs_query_rec.instance_id           := l_curr_instance_rec.instance_id;
       csi_pricing_attribs_pub.get_pricing_attribs
            ( p_api_version                 => p_api_version
             ,p_commit                      => p_commit
             ,p_init_msg_list               => p_init_msg_list
             ,p_validation_level            => p_validation_level
             ,p_pricing_attribs_query_rec   => l_pricing_attribs_query_rec
             ,p_time_stamp                  => NULL
             ,x_pricing_attribs_tbl         => l_pricing_attribs_tbl
             ,x_return_status               => x_return_status
             ,x_msg_count                   => x_msg_count
             ,x_msg_data                    => x_msg_data
            );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;

                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
     IF l_pricing_attribs_tbl.COUNT > 0 THEN
         FOR tab_row IN l_pricing_attribs_tbl.FIRST .. l_pricing_attribs_tbl.LAST
         LOOP
            IF l_pricing_attribs_tbl.EXISTS(tab_row) THEN
                 l_pricing_attribs_tbl(tab_row).INSTANCE_ID            := l_new_instance_rec.instance_id;
                 l_pricing_attribs_tbl(tab_row).PRICING_ATTRIBUTE_ID   := FND_API.G_MISS_NUM;
                 l_pricing_attribs_tbl(tab_row).ACTIVE_START_DATE      := FND_API.G_MISS_DATE;
                 l_pricing_attribs_tbl(tab_row).ACTIVE_END_DATE        := FND_API.G_MISS_DATE;
              END IF;
         END LOOP;
         csi_pricing_attribs_pub.create_pricing_attribs
            ( p_api_version                 => p_api_version
             ,p_commit                      => p_commit
             ,p_init_msg_list               => p_init_msg_list
             ,p_validation_level            => p_validation_level
             ,p_pricing_attribs_tbl         => l_pricing_attribs_tbl
             ,p_txn_rec                     => p_txn_rec
             ,x_return_status               => x_return_status
             ,x_msg_count                   => x_msg_count
             ,x_msg_data                    => x_msg_data
            );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
       END IF;
   END IF;

-- Added by rtalluri for Bug: 2420897 on 08/19/02
-- If version label is null, then we need read the the default value from the profile option
      IF (p_source_instance_rec.VERSION_LABEL IS NULL ) OR
         (p_source_instance_rec.VERSION_LABEL = FND_API.G_MISS_CHAR) THEN
          l_version_label := FND_PROFILE.VALUE('CSI_DEFAULT_VERSION_LABEL');
           IF  l_version_label IS NULL THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_VERSION_LABEL');
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
           ELSE
               l_new_instance_rec.version_label := l_version_label;
           END IF;
      ELSE
        l_new_instance_rec.VERSION_LABEL := p_source_instance_rec.VERSION_LABEL;
      END IF;

      --Calling the Create Version Label API to associate a version label for an instance created

        l_version_label_rec.instance_id           := l_new_instance_rec.instance_id;
        l_version_label_rec.version_label         := l_new_instance_rec.version_label;
        l_version_label_rec.date_time_stamp       := SYSDATE;
        l_version_label_rec.active_start_date     := l_new_instance_rec.active_start_date;
        l_version_label_rec.description           := l_new_instance_rec.version_label_description;

        csi_item_instance_pvt.create_version_label
          (
           p_api_version         => p_api_version
          ,p_commit              => fnd_api.g_false
          ,p_init_msg_list       => p_init_msg_list
          ,p_validation_level    => p_validation_level
          ,p_version_label_rec   => l_version_label_rec
          ,p_txn_rec             => p_txn_rec
          ,x_return_status       => x_return_status
          ,x_msg_count           => x_msg_count
          ,x_msg_data            => x_msg_data
           );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              csi_gen_utility_pvt.put_line( ' Error from COPY_SINGLE_ITEM_INSTANCE.CREATE_VERSION_LABEL..');
              csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_CREATE_VERSION');
              FND_MESSAGE.SET_TOKEN('API_ERROR','CREATE_VERSION_LABEL');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;
-- End of Addition by rtalluri for Bug: 2420897 on 08/19/02

      IF p_call_from_split = fnd_api.g_false
      THEN
          -- Added by sk for fixing the bug 2234365
           IF x_new_instance_tbl(1).instance_id IS NOT NULL AND
              x_new_instance_tbl(1).instance_id <> fnd_api.g_miss_num
           THEN
                  -- Added by sk for fixing bug 2245976
                  IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
                     csi_gen_utility_pvt.populate_install_param_rec;
                  END IF;
                  --
                  l_internal_party_id := csi_datastructures_pub.g_install_param_rec.internal_party_id;
                  --
                  IF l_internal_party_id IS NULL THEN
                     FND_MESSAGE.SET_NAME('CSI','CSI_API_UNINSTALLED_PARAMETER');
                     FND_MSG_PUB.ADD;
                     RAISE FND_API.G_EXC_ERROR;
                  END IF;
                  --
                  BEGIN
                      SELECT cip.party_id
                      INTO   l_party_id
                      FROM   csi_i_parties cip
                      WHERE  cip.instance_id = x_new_instance_tbl(1).instance_id
                      AND    cip.relationship_type_code = 'OWNER';
                 EXCEPTION
                   WHEN OTHERS THEN
                    l_party_id := NULL;
                   END;

                   IF l_party_id IS NOT NULL AND
                      l_internal_party_id IS NOT NULL AND
                      l_party_id <> l_internal_party_id
                   THEN
                      -- End addition by sk for fixing bug 2245976
                      csi_item_instance_pvt.Call_to_Contracts(
                              p_transaction_type   =>   'NEW'
                             ,p_instance_id        =>   x_new_instance_tbl(1).instance_id
                             ,p_new_instance_id    =>   NULL
                             ,p_vld_org_id         =>   x_new_instance_tbl(1).vld_organization_id
                             ,p_quantity           =>   NULL
                             ,p_party_account_id1  =>   NULL
                             ,p_party_account_id2  =>   NULL
                             ,p_call_from_bom_expl =>   p_call_from_bom_expl
                             ,p_transaction_date   =>   p_txn_rec.transaction_date -- For 3483763
                             ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date -- For 3483763
                             ,p_oks_txn_inst_tbl   =>   px_oks_txn_inst_tbl
                             ,x_return_status      =>   x_return_status
                             ,x_msg_count          =>   x_msg_count
                             ,x_msg_data           =>   x_msg_data
                              );

                      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS)
                      THEN
                         l_msg_index := 1;
                         l_msg_count := x_msg_count;
                         WHILE l_msg_count > 0 LOOP
                           x_msg_data := FND_MSG_PUB.GET
                                   (  l_msg_index,
                                      FND_API.G_FALSE
                                    );
                           csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                           l_msg_index := l_msg_index + 1;
                           l_msg_count := l_msg_count - 1;
                         END LOOP;
                         RAISE FND_API.G_EXC_ERROR;
                      END IF;
                      --
		      IF px_oks_txn_inst_tbl.count > 0 THEN
			 csi_gen_utility_pvt.dump_oks_txn_inst_tbl(px_oks_txn_inst_tbl);
			 csi_gen_utility_pvt.put_line('Calling OKS Core API...');
			 --
			 IF p_txn_rec.transaction_type_id = 3 THEN
			    l_batch_id := p_txn_rec.source_header_ref_id;
			    l_batch_type := p_txn_rec.source_group_ref;
			 ELSE
			    l_batch_id := NULL;
			    l_batch_type := NULL;
			 END IF;
			 --
                         UPDATE CSI_TRANSACTIONS
                         set contracts_invoked = 'Y'
                         where transaction_id = p_txn_rec.transaction_id;
                         --
			 OKS_IBINT_PUB.IB_interface
			    (
			      P_Api_Version           =>  1.0,
			      P_init_msg_list         =>  p_init_msg_list,
			      P_single_txn_date_flag  =>  'Y',
			      P_Batch_type            =>  l_batch_type,
			      P_Batch_ID              =>  l_batch_id,
			      P_OKS_Txn_Inst_tbl      =>  px_oks_txn_inst_tbl,
			      x_return_status         =>  x_return_status,
			      x_msg_count             =>  x_msg_count,
			      x_msg_data              =>  x_msg_data
			   );
			 --
			 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
			    l_msg_index := 1;
			    l_msg_count := x_msg_count;
			    WHILE l_msg_count > 0 LOOP
			       x_msg_data := FND_MSG_PUB.GET
				       (  l_msg_index,
					  FND_API.G_FALSE        );
			       csi_gen_utility_pvt.put_line( 'Error from OKS_IBINT_PUB.IB_interface..');
			       csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
			       l_msg_index := l_msg_index + 1;
			       l_msg_count := l_msg_count - 1;
			    END LOOP;
			    RAISE FND_API.G_EXC_ERROR;
			 END IF;
		      END IF;
                   END IF;
           END IF;
          -- End Addition by sk for fixing the bug 2234365
      END IF;
    -- End of API body
          -- Standard check of p_commit
       IF FND_API.To_Boolean( p_commit ) THEN
               COMMIT WORK;
       END IF;
          -- Standard call to get message count and if count is  get message info.
          FND_MSG_PUB.Count_And_Get
          (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
         p_data       =>       x_msg_data
           );
EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO copy_single_item_instance;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (      p_encoded => FND_API.G_FALSE,
                   p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                 );
      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO copy_single_item_instance;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (     p_encoded => FND_API.G_FALSE,
                    p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                 );

      WHEN OTHERS THEN
            ROLLBACK TO  copy_single_item_instance;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF       FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                    (      G_PKG_NAME            ,
                          l_api_name
                     );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (     p_encoded => FND_API.G_FALSE,
                    p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );
END  copy_single_item_instance;
--
/*---------------------------------------------------------*/
/* Procedure name:  Explode_Bom                            */
/* Description :    This procudure explodes the BOM and    */
/*                  creates instances and relationships    */
/* Author      :    Srinivasan Ramakrishnan                */
/*---------------------------------------------------------*/
PROCEDURE Explode_Bom
 (
   p_api_version            IN     NUMBER
  ,p_commit                 IN     VARCHAR2
  ,p_init_msg_list          IN     VARCHAR2
  ,p_validation_level       IN     NUMBER
  ,p_source_instance_rec    IN     csi_datastructures_pub.instance_rec
  ,p_explosion_level        IN     NUMBER
  ,p_item_tbl               OUT    NOCOPY csi_datastructures_pub.instance_tbl
  ,p_item_relation_tbl      OUT    NOCOPY csi_datastructures_pub.ii_relationship_tbl
  ,p_create_instance        IN     VARCHAR2
  ,p_txn_rec                IN OUT NOCOPY csi_datastructures_pub.transaction_rec
  ,x_return_status          OUT    NOCOPY VARCHAR2
  ,x_msg_count              OUT    NOCOPY NUMBER
  ,x_msg_data               OUT    NOCOPY VARCHAR2
 )
IS
   --
   l_api_name                    CONSTANT VARCHAR2(30) := 'explode_bom';
   l_api_version                 CONSTANT NUMBER      := 1.0;
   l_debug_level                 NUMBER;
   l_dump_frequency_flag         VARCHAR2(30);
   l_msg_index                   NUMBER;
   l_msg_count                   NUMBER;
   l_err_msg                     VARCHAR2(2000) := NULL;
   l_error_code                  VARCHAR2(30) := NULL;
   l_group_id                    NUMBER;
   l_session_id                  NUMBER := 0;
   l_parent_child_tbl            csi_item_instance_pvt.parent_child_tbl;
   l_parent_count                NUMBER := 0;
   l_per_parent                  NUMBER := 0;
   l_temp_per_parent             NUMBER := 0;
   l_csi_explode_bom             VARCHAR2(30)  := fnd_profile.value('CSI_EXPLODE_BOM');
   l_csi_bom_explosion_level     NUMBER;
   l_ins_count                   NUMBER := 0;
   l_curr_parent                 VARCHAR2(240);
   x_ins_tbl                     csi_datastructures_pub.instance_tbl;
   x_rel_tbl                     csi_datastructures_pub.ii_relationship_tbl;
   l_source_instance_rec         csi_datastructures_pub.instance_rec;
   x_new_ins_tbl                 csi_datastructures_pub.instance_tbl;
   l_init_source_instance_rec    csi_datastructures_pub.instance_rec;
   l_rel_count                   NUMBER := 0;
   l_count                       NUMBER;
   l_prev_parent                 VARCHAR2(240);
   l_prev_child                  VARCHAR2(240);
   l_split_qty                   NUMBER;
   l_master_organization_id      NUMBER;
   x_msg_index_out               NUMBER;
   l_child_expl_level            NUMBER;
   l_init_sort_code              VARCHAR2(2000);
   l_bom_sortcode_width          NUMBER := Bom_Common_Definitions.G_Bom_SortCode_Width;
   l_bom_sort_order_tbl          csi_item_instance_pvt.bom_sort_order_tbl;
   --
   CURSOR BOM_CSR (p_group_id NUMBER)
   IS
   SELECT bom.assembly_item_id parent_item_id
	 ,bet.component_item_id component_item_id
	 ,bet.organization_id organization_id
	 ,bet.component_quantity component_quantity
	 ,bet.extended_quantity extended_quantity
         ,bet.plan_level plan_level
	 ,substr(bet.sort_order,1,(length(sort_order)-l_bom_sortcode_width)) parent_sort_order
	 ,bet.sort_order child_sort_order
	 ,msi.serial_number_control_code serial_number_control_code
	 ,msi.primary_uom_code primary_uom_code
	 ,mp.master_organization_id master_organization_id
   FROM bom_small_expl_temp bet
       ,bom_bill_of_materials bom
       ,mtl_system_items msi
       ,mtl_system_items msip
       ,mtl_parameters mp
   WHERE    bet.group_id = p_group_id
   AND      bet.plan_level > 0               -- Ignore Top Most
   AND      bet.component_item_id = msi.inventory_item_id
   AND      bet.organization_id = msi.organization_id
   AND      bet.bill_sequence_id = bom.bill_sequence_id
   AND      bet.extended_quantity > 0
   AND      bom.assembly_item_id = msip.inventory_item_id
   AND      bom.organization_id = msip.organization_id
   AND      msi.organization_id = mp.organization_id
   ORDER BY bet.sort_order;
BEGIN
    -- Standard Start of API savepoint
    SAVEPOINT      explode_bom;
    -- Standard call to check for call compatibility.
    IF NOT FND_API.Compatible_API_Call (l_api_version,
                                        p_api_version,
                                        l_api_name ,
                                        G_PKG_NAME)
    THEN
       RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
    END IF;
    -- Initialize message list if p_init_msg_list is set to TRUE.
    IF FND_API.to_Boolean( p_init_msg_list ) THEN
       FND_MSG_PUB.initialize;
    END IF;
    --  Initialize API return status to success
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    -- Check the profile option debug_level for debug message reporting
    l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');
    -- If debug_level = 1 then dump the procedure name
    IF (l_debug_level > 0) THEN
        csi_gen_utility_pvt.put_line( 'explode_bom');
    END IF;
    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN
            csi_gen_utility_pvt.put_line('explode_standard_bom'||'-'
                           || p_api_version  ||'-'
                           || p_commit       ||'-'
                           || p_init_msg_list ||'-'
                           || p_validation_level ||'-'
                           || p_explosion_level);
     -- Dump item instanc rec
         csi_gen_utility_pvt.dump_instance_rec(p_source_instance_rec);
    END IF;
    -- Start API body
    IF l_csi_explode_bom  = 'Y' THEN
       -- Verify if the a Valid item and Org id is being passed
       IF NOT(csi_Item_Instance_Vld_pvt.val_item_org
                                  ( p_source_instance_rec.INVENTORY_ITEM_ID,
                                    p_source_instance_rec.VLD_ORGANIZATION_ID)) THEN
          RAISE FND_API.G_EXC_ERROR;
       END IF;
       -- Verify if the a Valid bom and Org id is being passed
       IF NOT(csi_Item_Instance_Vld_pvt.val_bom_org
                          ( p_source_instance_rec.INVENTORY_ITEM_ID,
                            p_source_instance_rec.VLD_ORGANIZATION_ID)) THEN
          RAISE FND_API.G_EXC_ERROR;
       END IF;
       -- Verify instance quantity
       IF ((p_source_instance_rec.QUANTITY IS NULL)
             OR (p_source_instance_rec.QUANTITY = FND_API.G_MISS_NUM )
             OR (p_source_instance_rec.QUANTITY <> 1)) THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_QUANTITY');
          FND_MESSAGE.SET_TOKEN('QUANTITY',p_source_instance_rec.QUANTITY);
          FND_MSG_PUB.Add;
          RAISE FND_API.G_EXC_ERROR;
       END IF;
       -- Verify the Passed Inventory Item is Trackable
       -- Get the Master Organization ID
       BEGIN
          select master_organization_id
          into l_master_organization_id
          from MTL_PARAMETERS
          where organization_id = p_source_instance_rec.VLD_ORGANIZATION_ID;
       EXCEPTION
          when others then
             csi_gen_utility_pvt.put_line('Unable to get the Master organization ID for '
                                          ||to_char(p_source_instance_rec.VLD_ORGANIZATION_ID));
	     RAISE FND_API.G_EXC_ERROR;
       END;
       --
       IF NOT csi_item_instance_vld_pvt.Is_Trackable
                       (p_inv_item_id => p_source_instance_rec.INVENTORY_ITEM_ID,
                        p_org_id => l_master_organization_id) THEN
          csi_gen_utility_pvt.put_line('Passed Inventory Item is not Trackable..');
          RAISE FND_API.G_EXC_ERROR;
       END IF;
       -- Instance_id should be passed if Instance needs to be created for the Exploded Items
       --
       IF p_create_instance = FND_API.G_TRUE THEN
          IF (p_source_instance_rec.instance_id IS NULL) OR
	         (p_source_instance_rec.instance_id = FND_API.G_MISS_NUM) THEN
	   	     FND_MESSAGE.SET_NAME('CSI','CSI_API_INSTANCE_ID_NULL');
		     FND_MSG_PUB.Add;
	   	     RAISE FND_API.G_EXC_ERROR;
          END IF;
	     --
          -- Verify if configruation has been exploded before
          IF (csi_Item_Instance_Vld_pvt.Is_config_exploded
             ( p_source_instance_rec.INSTANCE_ID)) THEN
	     csi_gen_utility_pvt.put_line('Configuration already Exploded');
             RAISE FND_API.G_EXC_ERROR;
          END IF;
       END IF;
       --
       IF p_explosion_level IS NULL OR
          p_explosion_level = FND_API.G_MISS_NUM THEN
          l_csi_bom_explosion_level := to_number(fnd_profile.value('CSI_BOM_EXPLOSION_LEVEL'));
       ELSE
          l_csi_bom_explosion_level := p_explosion_level;
       END IF;
       --
       SELECT Bom_Explosion_Temp_S.NextVal
       INTO   l_group_id
       FROM   sys.dual;
       --
       Bompxinq.Exploder_Userexit
         (
	   grp_id            => l_group_id,
	   org_id            => p_source_instance_rec.VLD_ORGANIZATION_ID,
	   item_id           => p_source_instance_rec.INVENTORY_ITEM_ID,
	   unit_number_from  => '',
	   unit_number_to    => '',
	   levels_to_explode => l_csi_bom_explosion_level,
	   expl_qty          => 1,
	   show_rev          => 1,
	   material_ctrl     => 1,
	   err_msg           => l_err_msg,
	   error_code        => l_error_code
        );
        --
        IF l_Error_Code <> 0 THEN
      	   csi_gen_utility_pvt.put_line (' Bom explosion error code <> 0 '|| l_Error_Code ||'  '||l_err_msg);
	   IF l_Error_Code < 0 THEN
	      csi_gen_utility_pvt.put_line (' Bom explosion error code > 0 '|| l_Error_Code ||'  '||l_err_msg);
	   ELSIF l_Error_Code > 0 THEN
	      csi_gen_utility_pvt.put_line (' Bom explosion error code < 0'|| l_Error_Code ||'  '||l_err_msg);
	   END IF;
       FND_MESSAGE.SET_NAME('CSI','CSI_API_CORE_BOM_EXPL_ERROR');
	   FND_MSG_PUB.Add;
	   RAISE FND_API.G_EXC_ERROR;
       END IF; -- error
       --
       l_init_sort_code := Bom_Common_Definitions.get_initial_sort_code;
       --
       -- Loop thru' the cursor and create the Parent_child_tbl
       csi_gen_utility_pvt.put_line('Start of BOM Explosion..');
       For v_rec in BOM_CSR(l_group_id)
       Loop
          l_parent_count := l_parent_count + 1;
	  l_parent_child_tbl(l_parent_count).parent_sort_order := v_rec.parent_sort_order;
	  l_parent_child_tbl(l_parent_count).child_sort_order := v_rec.child_sort_order;
       End Loop;
       --
       l_ins_count := 0;
       l_prev_parent := l_init_sort_code;  -- By default this will be Top Most Parent
       --
       For v_rec in BOM_CSR(l_group_id)
       Loop
          IF csi_Item_Instance_Vld_pvt.Is_Trackable
                           (p_inv_item_id => v_rec.component_item_id,
                            p_org_id => v_rec.master_organization_id,
                            p_stack_err_msg => FALSE) THEN
	     --
	     -- Check whether parent is trackable or not
	     l_curr_parent := v_rec.parent_sort_order;
	     IF l_curr_parent <> l_init_sort_code THEN -- no need for Top Most
	        -- Get the immediate Trackable Parent
	        csi_item_instance_pvt.Get_parent_sort_order
		      (
		        p_parent_sort_order   => l_curr_parent
                       ,p_parent_child_tbl    => l_parent_child_tbl
		       ,p_bom_sort_order_tbl  => l_bom_sort_order_tbl
                     );
             END IF;
	     --
             -- Since the Max level is determined by the parameter p_explosion_level, any sub-assembly
             -- will be exploded only to the remaining level.
             l_child_expl_level := l_csi_bom_explosion_level - v_rec.plan_level;
             --
	     IF ( (v_rec.serial_number_control_code in (2,5,6)) OR
                   ((csi_item_instance_pvt.Is_Parent(p_child_sort_order => v_rec.child_sort_order
	                                            ,p_parent_child_tbl => l_parent_child_tbl)) AND
                     -- Check for Trackable component under this
                     (csi_item_instance_pvt.Has_Trackable_Component
                                             (p_inventory_item_id => v_rec.component_item_id
                                             ,p_organization_id => v_rec.organization_id
                                             ,p_explosion_level => l_child_expl_level))) ) THEN
	        For i in 1..v_rec.extended_quantity
	        Loop
	           l_ins_count := l_ins_count + 1;
	           x_ins_tbl(l_ins_count).inventory_item_id := v_rec.component_item_id;
	           x_ins_tbl(l_ins_count).quantity := 1;
	           x_ins_tbl(l_ins_count).mfg_serial_number_flag := 'N';
                   x_ins_tbl(l_ins_count).unit_of_measure := v_rec.primary_uom_code;
                   x_ins_tbl(l_ins_count).lot_number := NULL;
	           x_ins_tbl(l_ins_count).instance_usage_code := NULL;
	          -- x_ins_tbl(l_ins_count).ATTRIBUTE12 := l_curr_parent;
	          -- x_ins_tbl(l_ins_count).ATTRIBUTE13 := v_rec.child_sort_order;
	          -- x_ins_tbl(l_ins_count).ATTRIBUTE14 := 'N'; -- Mark_flag
	          -- x_ins_tbl(l_ins_count).ATTRIBUTE15 := to_char(v_rec.extended_quantity); -- child occurance
                  l_bom_sort_order_tbl(l_ins_count).parent_sort_order := l_curr_parent;
                  l_bom_sort_order_tbl(l_ins_count).child_sort_order := v_rec.child_sort_order;
                  l_bom_sort_order_tbl(l_ins_count).mark_flag := 'N';
                  l_bom_sort_order_tbl(l_ins_count).child_occurance := v_rec.extended_quantity;
	        End Loop;
	     ELSE
		l_count := 0;
                IF l_bom_sort_order_tbl.count > 0 THEN
		   For ins_row in l_bom_sort_order_tbl.FIRST .. l_bom_sort_order_tbl.LAST
		   Loop
		      IF l_curr_parent = l_bom_sort_order_tbl(ins_row).child_sort_order then -- Getting the parent existance
		         l_count := l_bom_sort_order_tbl(ins_row).child_occurance;
		         EXIT;
		      END IF;
		   End Loop;
                END IF;
		--
		IF l_count > 0 THEN
		   l_split_qty := v_rec.extended_quantity/l_count;
		   For j in 1..l_count
		   Loop
		      l_ins_count := l_ins_count + 1;
		      x_ins_tbl(l_ins_count).inventory_item_id := v_rec.component_item_id;
		      x_ins_tbl(l_ins_count).quantity := l_split_qty;
		      x_ins_tbl(l_ins_count).mfg_serial_number_flag := 'N';
                      x_ins_tbl(l_ins_count).unit_of_measure := v_rec.primary_uom_code;
                      x_ins_tbl(l_ins_count).lot_number := NULL;
		      x_ins_tbl(l_ins_count).instance_usage_code := NULL;
		    --  x_ins_tbl(l_ins_count).ATTRIBUTE12 := l_curr_parent;
		    --  x_ins_tbl(l_ins_count).ATTRIBUTE13 := v_rec.child_sort_order;
		    --  x_ins_tbl(l_ins_count).ATTRIBUTE14 := 'N'; -- Mark_flag
		    --  x_ins_tbl(l_ins_count).ATTRIBUTE15 := to_char(l_count); -- # of child occurance
                      l_bom_sort_order_tbl(l_ins_count).parent_sort_order := l_curr_parent;
                      l_bom_sort_order_tbl(l_ins_count).child_sort_order := v_rec.child_sort_order;
                      l_bom_sort_order_tbl(l_ins_count).mark_flag := 'N';
                      l_bom_sort_order_tbl(l_ins_count).child_occurance := l_count;
		   End Loop;
		ELSE
		   l_ins_count := l_ins_count + 1;
		   x_ins_tbl(l_ins_count).inventory_item_id := v_rec.component_item_id;
		   x_ins_tbl(l_ins_count).quantity := v_rec.extended_quantity;
		   x_ins_tbl(l_ins_count).mfg_serial_number_flag := 'N';
                   x_ins_tbl(l_ins_count).unit_of_measure := v_rec.primary_uom_code;
                   x_ins_tbl(l_ins_count).lot_number := NULL;
		   x_ins_tbl(l_ins_count).instance_usage_code := NULL;
		  -- x_ins_tbl(l_ins_count).ATTRIBUTE12 := l_curr_parent;
		  -- x_ins_tbl(l_ins_count).ATTRIBUTE13 := v_rec.child_sort_order;
		  -- x_ins_tbl(l_ins_count).ATTRIBUTE14 := 'N'; -- Mark_flag
		  -- x_ins_tbl(l_ins_count).ATTRIBUTE15 := to_char(1); -- # of child occurance
                   l_bom_sort_order_tbl(l_ins_count).parent_sort_order := l_curr_parent;
                   l_bom_sort_order_tbl(l_ins_count).child_sort_order := v_rec.child_sort_order;
                   l_bom_sort_order_tbl(l_ins_count).mark_flag := 'N';
                   l_bom_sort_order_tbl(l_ins_count).child_occurance := 1;
		END IF;
	     END IF;
	  END IF;
       End Loop;
       -- Loop thru' the x_ins_tbl and create the x_rel_tbl
       -- x_ins_tbl and l_bom_sort_order_tbl are one-to-one. Since the sort order width is more
       -- and we can't accomodate in the ATTRIBUTE column, the new tbl has been created.
       l_rel_count := 0;
       l_prev_parent := l_init_sort_code;
       l_prev_child := l_init_sort_code;
       IF x_ins_tbl.count > 0 THEN
          For ins_tab in x_ins_tbl.FIRST .. x_ins_tbl.LAST
	  Loop
	     IF l_bom_sort_order_tbl(ins_tab).parent_sort_order = l_init_sort_code THEN   -- TOP MOST
	        l_rel_count := l_rel_count + 1;
		x_rel_tbl(l_rel_count).subject_id := ins_tab;
		x_rel_tbl(l_rel_count).object_id := 0; -- Change this to Passed Instance ID for Ins creation
		x_rel_tbl(l_rel_count).relationship_type_code := 'COMPONENT-OF';
		l_prev_parent := l_init_sort_code;
		l_prev_child := l_bom_sort_order_tbl(ins_tab).child_sort_order;
	     ELSE
	        IF l_bom_sort_order_tbl(ins_tab).parent_sort_order = l_prev_parent AND
		   l_bom_sort_order_tbl(ins_tab).child_sort_order = l_prev_child THEN
		   l_rel_count := l_rel_count + 1;
		   x_rel_tbl(l_rel_count).subject_id := ins_tab;
		   x_rel_tbl(l_rel_count).relationship_type_code := 'COMPONENT-OF';
		   For assign_count in l_bom_sort_order_tbl.FIRST .. l_bom_sort_order_tbl.LAST
		   Loop
		      IF l_bom_sort_order_tbl(ins_tab).parent_sort_order =
                              l_bom_sort_order_tbl(assign_count).child_sort_order AND
			 l_bom_sort_order_tbl(assign_count).mark_flag = 'N' THEN
			 x_rel_tbl(l_rel_count).object_id := assign_count;
			 l_prev_parent := l_bom_sort_order_tbl(ins_tab).parent_sort_order;
			 l_prev_child := l_bom_sort_order_tbl(ins_tab).child_sort_order;
			 l_temp_per_parent := l_temp_per_parent - 1;
			 IF l_temp_per_parent = 0 THEN
			    l_bom_sort_order_tbl(assign_count).mark_flag := 'Y'; -- Mark
			    l_temp_per_parent := l_per_parent;
			 END IF;
			 EXIT;
		      END IF;
		   End Loop;
		   --
		ELSE -- New Parent Child combination
		   l_parent_count := 0;
		   For par_row in l_bom_sort_order_tbl.FIRST .. l_bom_sort_order_tbl.LAST
		   Loop
		      -- At the end of this loop, l_parent_count will have the # of occurance of
		      -- the current instance's parent as a child in INS_TBL.
		      IF l_bom_sort_order_tbl(par_row).child_sort_order = l_bom_sort_order_tbl(ins_tab).parent_sort_order THEN
			 l_parent_count := l_bom_sort_order_tbl(par_row).child_occurance;
			 l_bom_sort_order_tbl(par_row).mark_flag := 'N';
			 -- Even though the occurance value will be same in all the above cases,
			 -- we just make use of this loop to assign the mark_flag to put back 'N'
		      END IF;
		   End Loop;
		   --
		   IF l_parent_count > 0 THEN
		      l_per_parent := l_bom_sort_order_tbl(ins_tab).child_occurance/l_parent_count;
		      l_temp_per_parent := l_per_parent;
		   END IF;
		   --
		   -- Use l_temp_per_parent to Loop thru' INS_TBL and use that slot as Object ID
		   -- and Mark wherever the l_bom_sort_order_tbl(ins_tab).parent_sort_order (current_parent)
		   -- is same as l_bom_sort_order_tbl(assign_count).child_sort_order (Child)
		   --
		   l_rel_count := l_rel_count + 1;
		   x_rel_tbl(l_rel_count).subject_id := ins_tab;
		   x_rel_tbl(l_rel_count).relationship_type_code := 'COMPONENT-OF';
		   For assign_count in l_bom_sort_order_tbl.FIRST .. l_bom_sort_order_tbl.LAST
		   Loop
		      IF l_bom_sort_order_tbl(ins_tab).parent_sort_order =
                                l_bom_sort_order_tbl(assign_count).child_sort_order AND
		 	 l_bom_sort_order_tbl(assign_count).mark_flag = 'N' THEN
			 x_rel_tbl(l_rel_count).object_id := assign_count;
			 l_prev_parent := l_bom_sort_order_tbl(ins_tab).parent_sort_order;
			 l_prev_child := l_bom_sort_order_tbl(ins_tab).child_sort_order;
			 l_temp_per_parent := l_temp_per_parent - 1;
			 IF l_temp_per_parent = 0 THEN
			    l_bom_sort_order_tbl(assign_count).mark_flag := 'Y'; -- Mark
			    l_temp_per_parent := l_per_parent;
			 END IF;
			 EXIT;
		      END IF;
		   End Loop;
		   --
	        END IF;
	     END IF;
          End Loop;
       END IF; -- Check for x_ins_tbl count
    END IF; -- Check CSI_EXPLODE_BOM
    --
    IF x_ins_tbl.count > 0 THEN
       For ins_tab in l_bom_sort_order_tbl.FIRST .. l_bom_sort_order_tbl.LAST
       Loop
          csi_gen_utility_pvt.put_line(l_bom_sort_order_tbl(ins_tab).parent_sort_order ||'  '
                                     ||to_char(x_ins_tbl(ins_tab).inventory_item_id)||'  '
                                     ||to_char(x_ins_tbl(ins_tab).quantity)||'  '
                                     ||l_bom_sort_order_tbl(ins_tab).child_sort_order);
       End Loop;
    END IF;
    --
    IF x_rel_tbl.count > 0 THEN
       For rel_tab in x_rel_tbl.FIRST .. x_rel_tbl.LAST
       Loop
          csi_gen_utility_pvt.put_line(to_char(x_rel_tbl(rel_tab).subject_id) ||'  '
                                      ||to_char(x_rel_tbl(rel_tab).object_id));
       End Loop;
    END IF;
    --
    -- Create Instance and II Relationships if the p_create_instance is TRUE
    IF p_create_instance = FND_API.G_TRUE THEN
       IF x_ins_tbl.count > 0 THEN
          csi_gen_utility_pvt.put_line('Calling Copy Single Item Instance..');
          For ins_tab in x_ins_tbl.FIRST .. x_ins_tbl.LAST
          Loop
             l_source_instance_rec := x_ins_tbl(ins_tab);
             l_source_instance_rec.instance_id := p_source_instance_rec.instance_id;
	     csi_item_instance_pvt.copy_single_item_instance
	      (
		p_api_version            =>  1.0
	       ,p_commit                 =>  fnd_api.g_false
	       ,p_init_msg_list          =>  fnd_api.g_true
	       ,p_validation_level       =>  fnd_api.g_valid_level_full
	       ,p_source_instance_rec    =>  l_source_instance_rec
	       ,p_copy_ext_attribs       =>  fnd_api.g_true
	       ,p_copy_org_assignments   =>  fnd_api.g_true
	       ,p_copy_parties           =>  fnd_api.g_true
	       ,p_copy_contacts          =>  fnd_api.g_true
	       ,p_copy_accounts          =>  fnd_api.g_true
	       ,p_copy_asset_assignments =>  fnd_api.g_true
	       ,p_copy_pricing_attribs   =>  fnd_api.g_true
	       ,p_call_from_split        =>  fnd_api.g_false
               ,p_call_from_bom_expl     =>  fnd_api.g_true
	       ,p_txn_rec                =>  p_txn_rec
	       ,x_new_instance_tbl       =>  x_new_ins_tbl
	       ,x_return_status          =>  x_return_status
	       ,x_msg_count              =>  x_msg_count
	       ,x_msg_data               =>  x_msg_data
	      );
	      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                 csi_gen_utility_pvt.put_line('Error while trying to Copy the Instance..');
		  FOR i in 1..x_msg_Count LOOP
		    FND_MSG_PUB.Get(p_msg_index     => i,
				    p_encoded       => 'F',
				    p_data          => x_msg_data,
				    p_msg_index_out => x_msg_index_out );
		    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
		 End LOOP;
		 RAISE FND_API.G_EXC_ERROR;
             END IF;
             -- Assign the new instance_id to x_ins_tbl.instance_id
             x_ins_tbl(ins_tab).instance_id := x_new_ins_tbl(1).instance_id;
             --
             -- On success Populate the relationship_tbl with the new instance_id
             IF x_rel_tbl.count > 0 THEN
                For rel_tab in x_rel_tbl.FIRST .. x_rel_tbl.LAST
                Loop
                   IF x_rel_tbl(rel_tab).object_id = 0 THEN -- Top Most
                      x_rel_tbl(rel_tab).object_id := p_source_instance_rec.instance_id;
                   END IF;
                   --
                   IF x_rel_tbl(rel_tab).subject_id = ins_tab THEN
                      x_rel_tbl(rel_tab).subject_id := x_new_ins_tbl(1).instance_id;
                   END IF;
                   --
                   IF x_rel_tbl(rel_tab).object_id = ins_tab THEN
                      x_rel_tbl(rel_tab).object_id := x_new_ins_tbl(1).instance_id;
                   END IF;
                   --
                End Loop;
             END IF;
          End Loop;
          --
          IF x_rel_tbl.count > 0 THEN
             csi_gen_utility_pvt.put_line('Calling II Relationship PUB...');
             csi_ii_relationships_pub.create_relationship
                (
                  p_api_version         => 1.0,
                  p_commit              => fnd_api.g_false,
                  p_init_msg_list       => fnd_api.g_true,
                  p_validation_level    => fnd_api.g_valid_level_full,
                  p_relationship_tbl    => x_rel_tbl,
                  p_txn_rec             => p_txn_rec,
                  x_return_status       => x_return_status,
                  x_msg_count           => x_msg_count,
                  x_msg_data            => x_msg_data
                );
	      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                 csi_gen_utility_pvt.put_line('Error while trying to Create II Relationships..');
		  FOR i in 1..x_msg_Count LOOP
		    FND_MSG_PUB.Get(p_msg_index     => i,
				    p_encoded       => 'F',
				    p_data          => x_msg_data,
				    p_msg_index_out => x_msg_index_out );
		    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
		 End LOOP;
		 RAISE FND_API.G_EXC_ERROR;
             END IF;
          END IF;
       END IF; -- End of x_ins_tbl_count
    END IF; -- Check for p_create_instance
    --
    -- Assign this to the OUT parameters
    p_item_tbl := x_ins_tbl;
    p_item_relation_tbl := x_rel_tbl;
    --
    -- Delete records from bom_small_exp_temp
    DELETE FROM bom_small_expl_temp where group_id = l_group_id;
    --
    -- End of API body
    -- Standard check of p_commit
    IF FND_API.To_Boolean( p_commit ) THEN
       COMMIT WORK;
    END IF;
    -- Standard call to get message count and if count is  get message info.
    FND_MSG_PUB.Count_And_Get
        ( p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
          p_data       =>       x_msg_data
        );
EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO explode_bom;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                 );
      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO explode_bom;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                 );
      WHEN OTHERS THEN
            ROLLBACK TO  explode_bom;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF       FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
            THEN
                    FND_MSG_PUB.Add_Exc_Msg
                    (      G_PKG_NAME            ,
                          l_api_name
                     );
            END IF;
            FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );
END Explode_Bom;
--
/*---------------------------------------------------*/
/* procedure name: get_instance_hist                 */
/* description   : Retreive history transactions     */
/*                 for an instance                   */
/*---------------------------------------------------*/

PROCEDURE get_instance_hist
( p_api_version           IN  NUMBER
 ,p_commit                IN  VARCHAR2
 ,p_init_msg_list         IN  VARCHAR2
 ,p_validation_level      IN  NUMBER
 ,p_transaction_id        IN  NUMBER
 ,x_instance_history_tbl  OUT NOCOPY csi_datastructures_pub.instance_history_tbl
 ,x_return_status         OUT NOCOPY VARCHAR2
 ,x_msg_count             OUT NOCOPY NUMBER
 ,x_msg_data              OUT NOCOPY VARCHAR2
 )  IS
CURSOR txn_hist_csr (p_txn_id IN NUMBER) IS
   SELECT *
   FROM   csi_item_instances_h
   WHERE  transaction_id = p_txn_id;

l_old_ins_header_rec  csi_datastructures_pub.instance_header_rec;
l_new_ins_header_rec  csi_datastructures_pub.instance_header_rec;
l_old_ins_header_tbl  csi_datastructures_pub.instance_header_tbl;
l_new_ins_header_tbl  csi_datastructures_pub.instance_header_tbl;
l_ins_header_rec      csi_datastructures_pub.instance_history_rec;
l_temp_ins_rec        csi_datastructures_pub.instance_history_rec;
l_temp_hdr_rec        csi_datastructures_pub.instance_header_rec;
l_api_name            CONSTANT   VARCHAR2(30) := 'get_instance_hist';
l_api_version         CONSTANT   NUMBER         := 1.0;
i                     NUMBER := 0;
l_time_stamp          DATE;
l_instance_rec        csi_datastructures_pub.instance_header_rec;
l_party_header_tbl    csi_datastructures_pub.party_header_tbl;
l_account_header_tbl  csi_datastructures_pub.party_account_header_tbl;
l_org_header_tbl      csi_datastructures_pub.org_units_header_tbl;
l_pricing_attrib_tbl  csi_datastructures_pub.pricing_attribs_tbl;
l_ext_attrib_tbl      csi_datastructures_pub.extend_attrib_values_tbl;
l_ext_attrib_def_tbl  csi_datastructures_pub.extend_attrib_tbl;
l_asset_header_tbl    csi_datastructures_pub.instance_asset_header_tbl;
BEGIN
        /*
        IF fnd_api.to_boolean(p_commit)
        THEN
           SAVEPOINT    get_instance_hist;
        END IF;
        */

        -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (l_api_version       ,
                                                    p_api_version       ,
                                                l_api_name              ,
                                                G_PKG_NAME              )
        THEN
                RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
                FND_MSG_PUB.initialize;
        END IF;

        --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

   /***** srramakr commented for bug # 3304439
   -- Check for the profile option and enable trace
   IF (fnd_profile.value('CSI_ENABLE_SQL_TRACE') = 'Y') THEN
                   dbms_session.set_sql_trace(TRUE);
   END IF;
   -- End enable trace
   ****/

   -- Start API body
   --


FOR l_hist_csr IN txn_hist_csr (p_transaction_id)
LOOP
          l_ins_header_rec := l_temp_ins_rec;
   -- Added for bug 3439348
          l_old_ins_header_rec := l_temp_hdr_rec;
          l_new_ins_header_rec := l_temp_hdr_rec;
   -- End addition for bug 3439348

          --start of code for bug 4754569--
          l_old_ins_header_rec.instance_id := l_hist_csr.instance_id;
          l_new_ins_header_rec.instance_id := l_hist_csr.instance_id;
          --end of code for bug 4754569--

          IF NVL(l_hist_csr.old_instance_number,fnd_api.g_miss_char) = NVL(l_hist_csr.new_instance_number,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.instance_number := NULL;
            l_new_ins_header_rec.instance_number := NULL;
          ELSE
            l_old_ins_header_rec.instance_number := l_hist_csr.old_instance_number;
            l_new_ins_header_rec.instance_number := l_hist_csr.new_instance_number;
          END IF;

          IF NVL(l_hist_csr.old_external_reference,fnd_api.g_miss_char) = NVL(l_hist_csr.new_external_reference,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.external_reference := NULL;
            l_new_ins_header_rec.external_reference := NULL;
          ELSE
            l_old_ins_header_rec.external_reference := l_hist_csr.old_external_reference;
            l_new_ins_header_rec.external_reference := l_hist_csr.new_external_reference;
          END IF;

          IF NVL(l_hist_csr.old_inventory_item_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_inventory_item_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.inventory_item_id := NULL;
            l_new_ins_header_rec.inventory_item_id := NULL;
          ELSE
            l_old_ins_header_rec.inventory_item_id := l_hist_csr.old_inventory_item_id;
            l_new_ins_header_rec.inventory_item_id := l_hist_csr.new_inventory_item_id;
          END IF;

          IF NVL(l_hist_csr.old_inventory_revision,fnd_api.g_miss_char) = NVL(l_hist_csr.new_inventory_revision,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.inventory_revision := NULL;
            l_new_ins_header_rec.inventory_revision := NULL;
          ELSE
            l_old_ins_header_rec.inventory_revision := l_hist_csr.old_inventory_revision;
            l_new_ins_header_rec.inventory_revision := l_hist_csr.new_inventory_revision;
          END IF;

          IF NVL(l_hist_csr.old_inv_master_organization_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_inv_master_organization_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.inv_master_organization_id := NULL;
            l_new_ins_header_rec.inv_master_organization_id := NULL;
          ELSE
            l_old_ins_header_rec.inv_master_organization_id := l_hist_csr.old_inv_master_organization_id;
            l_new_ins_header_rec.inv_master_organization_id := l_hist_csr.new_inv_master_organization_id;
          END IF;

          IF NVL(l_hist_csr.old_serial_number,fnd_api.g_miss_char) = NVL(l_hist_csr.new_serial_number,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.serial_number := NULL;
            l_new_ins_header_rec.serial_number := NULL;
          ELSE
            l_old_ins_header_rec.serial_number := l_hist_csr.old_serial_number;
            l_new_ins_header_rec.serial_number := l_hist_csr.new_serial_number;
          END IF;

          IF NVL(l_hist_csr.old_mfg_serial_number_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_mfg_serial_number_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.mfg_serial_number_flag := NULL;
            l_new_ins_header_rec.mfg_serial_number_flag := NULL;
          ELSE
            l_old_ins_header_rec.mfg_serial_number_flag := l_hist_csr.old_mfg_serial_number_flag;
            l_new_ins_header_rec.mfg_serial_number_flag := l_hist_csr.new_mfg_serial_number_flag;
          END IF;

          IF NVL(l_hist_csr.old_lot_number,fnd_api.g_miss_char) = NVL(l_hist_csr.new_lot_number,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.lot_number := NULL;
            l_new_ins_header_rec.lot_number := NULL;
          ELSE
            l_old_ins_header_rec.lot_number := l_hist_csr.old_lot_number;
            l_new_ins_header_rec.lot_number := l_hist_csr.new_lot_number;
          END IF;

          IF NVL(l_hist_csr.old_quantity,fnd_api.g_miss_num) = NVL(l_hist_csr.new_quantity,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.quantity := NULL;
            l_new_ins_header_rec.quantity := NULL;
          ELSE
            l_old_ins_header_rec.quantity := l_hist_csr.old_quantity;
            l_new_ins_header_rec.quantity := l_hist_csr.new_quantity;
          END IF;

          IF NVL(l_hist_csr.old_unit_of_measure,fnd_api.g_miss_char) = NVL(l_hist_csr.new_unit_of_measure,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.unit_of_measure := NULL;
            l_new_ins_header_rec.unit_of_measure := NULL;
          ELSE
            l_old_ins_header_rec.unit_of_measure := l_hist_csr.old_unit_of_measure;
            l_new_ins_header_rec.unit_of_measure := l_hist_csr.new_unit_of_measure;
          END IF;

          IF NVL(l_hist_csr.old_accounting_class_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_accounting_class_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.accounting_class_code := NULL;
            l_new_ins_header_rec.accounting_class_code := NULL;
          ELSE
            l_old_ins_header_rec.accounting_class_code := l_hist_csr.old_accounting_class_code;
            l_new_ins_header_rec.accounting_class_code := l_hist_csr.new_accounting_class_code;
          END IF;

          IF NVL(l_hist_csr.old_instance_condition_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_instance_condition_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.instance_condition_id := NULL;
            l_new_ins_header_rec.instance_condition_id := NULL;
          ELSE
            l_old_ins_header_rec.instance_condition_id := l_hist_csr.old_instance_condition_id;
            l_new_ins_header_rec.instance_condition_id := l_hist_csr.new_instance_condition_id;
          END IF;

          IF NVL(l_hist_csr.old_instance_status_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_instance_status_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.instance_status_id := NULL;
            l_new_ins_header_rec.instance_status_id := NULL;
          ELSE
            l_old_ins_header_rec.instance_status_id := l_hist_csr.old_instance_status_id;
            l_new_ins_header_rec.instance_status_id := l_hist_csr.new_instance_status_id;
          END IF;

          IF NVL(l_hist_csr.old_customer_view_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_customer_view_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.customer_view_flag := NULL;
            l_new_ins_header_rec.customer_view_flag := NULL;
          ELSE
            l_old_ins_header_rec.customer_view_flag := l_hist_csr.old_customer_view_flag;
            l_new_ins_header_rec.customer_view_flag := l_hist_csr.new_customer_view_flag;
          END IF;

          IF NVL(l_hist_csr.old_merchant_view_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_merchant_view_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.merchant_view_flag := NULL;
            l_new_ins_header_rec.merchant_view_flag := NULL;
          ELSE
            l_old_ins_header_rec.merchant_view_flag := l_hist_csr.old_merchant_view_flag;
            l_new_ins_header_rec.merchant_view_flag := l_hist_csr.new_merchant_view_flag;
          END IF;

          IF NVL(l_hist_csr.old_sellable_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_sellable_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.sellable_flag := NULL;
            l_new_ins_header_rec.sellable_flag := NULL;
          ELSE
            l_old_ins_header_rec.sellable_flag := l_hist_csr.old_sellable_flag;
            l_new_ins_header_rec.sellable_flag := l_hist_csr.new_sellable_flag;
          END IF;

          IF NVL(l_hist_csr.old_system_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_system_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.system_id := NULL;
            l_new_ins_header_rec.system_id := NULL;
          ELSE
            l_old_ins_header_rec.system_id := l_hist_csr.old_system_id;
            l_new_ins_header_rec.system_id := l_hist_csr.new_system_id;
          END IF;

          IF NVL(l_hist_csr.old_instance_type_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_instance_type_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.instance_type_code := NULL;
            l_new_ins_header_rec.instance_type_code := NULL;
          ELSE
            l_old_ins_header_rec.instance_type_code := l_hist_csr.old_instance_type_code;
            l_new_ins_header_rec.instance_type_code := l_hist_csr.new_instance_type_code;
          END IF;

          IF NVL(l_hist_csr.old_active_start_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_active_start_date,fnd_api.g_miss_date)
          THEN
            l_old_ins_header_rec.active_start_date := NULL;
            l_new_ins_header_rec.active_start_date := NULL;
          ELSE
            l_old_ins_header_rec.active_start_date := l_hist_csr.old_active_start_date;
            l_new_ins_header_rec.active_start_date := l_hist_csr.new_active_start_date;
          END IF;

          IF NVL(l_hist_csr.old_active_end_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_active_end_date,fnd_api.g_miss_date)
          THEN
            l_old_ins_header_rec.active_end_date := NULL;
            l_new_ins_header_rec.active_end_date := NULL;
          ELSE
            l_old_ins_header_rec.active_end_date := l_hist_csr.old_active_end_date;
            l_new_ins_header_rec.active_end_date := l_hist_csr.new_active_end_date;
          END IF;

       -- Added for bug 2671179
          IF NVL(l_hist_csr.old_install_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_install_date,fnd_api.g_miss_date)
          THEN
            l_old_ins_header_rec.install_date := NULL;
            l_new_ins_header_rec.install_date := NULL;
          ELSE
            l_old_ins_header_rec.install_date := l_hist_csr.old_install_date;
            l_new_ins_header_rec.install_date := l_hist_csr.new_install_date;
          END IF;

          IF NVL(l_hist_csr.old_return_by_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_return_by_date,fnd_api.g_miss_date)
          THEN
            l_old_ins_header_rec.return_by_date := NULL;
            l_new_ins_header_rec.return_by_date := NULL;
          ELSE
            l_old_ins_header_rec.return_by_date := l_hist_csr.old_return_by_date;
            l_new_ins_header_rec.return_by_date := l_hist_csr.new_return_by_date;
          END IF;

          IF NVL(l_hist_csr.old_actual_return_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_actual_return_date,fnd_api.g_miss_date)
          THEN
            l_old_ins_header_rec.actual_return_date := NULL;
            l_new_ins_header_rec.actual_return_date := NULL;
          ELSE
            l_old_ins_header_rec.actual_return_date := l_hist_csr.old_actual_return_date;
            l_new_ins_header_rec.actual_return_date := l_hist_csr.new_actual_return_date;
          END IF;
       -- End addition for bug 2671179

          IF NVL(l_hist_csr.old_location_type_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_location_type_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.location_type_code := NULL;
            l_new_ins_header_rec.location_type_code := NULL;
          ELSE
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_location_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_location_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.location_id := NULL;
            l_new_ins_header_rec.location_id := NULL;
          ELSE
            l_old_ins_header_rec.location_id := l_hist_csr.old_location_id;
            l_new_ins_header_rec.location_id := l_hist_csr.new_location_id;
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_inv_organization_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_inv_organization_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.inv_organization_id := NULL;
            l_new_ins_header_rec.inv_organization_id := NULL;
          ELSE
            l_old_ins_header_rec.inv_organization_id := l_hist_csr.old_inv_organization_id;
            l_new_ins_header_rec.inv_organization_id := l_hist_csr.new_inv_organization_id;
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_inv_subinventory_name,fnd_api.g_miss_char) = NVL(l_hist_csr.new_inv_subinventory_name,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.inv_subinventory_name := NULL;
            l_new_ins_header_rec.inv_subinventory_name := NULL;
          ELSE
            l_old_ins_header_rec.inv_subinventory_name := l_hist_csr.old_inv_subinventory_name;
            l_new_ins_header_rec.inv_subinventory_name := l_hist_csr.new_inv_subinventory_name;
          END IF;

          IF NVL(l_hist_csr.old_inv_locator_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_inv_locator_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.inv_locator_id := NULL;
            l_new_ins_header_rec.inv_locator_id := NULL;
          ELSE
            l_old_ins_header_rec.inv_locator_id := l_hist_csr.old_inv_locator_id;
            l_new_ins_header_rec.inv_locator_id := l_hist_csr.new_inv_locator_id;
          END IF;

          IF NVL(l_hist_csr.old_pa_project_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_pa_project_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.pa_project_id := NULL;
            l_new_ins_header_rec.pa_project_id := NULL;
          ELSE
            l_old_ins_header_rec.pa_project_id := l_hist_csr.old_pa_project_id;
            l_new_ins_header_rec.pa_project_id := l_hist_csr.new_pa_project_id;
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_pa_project_task_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_pa_project_task_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.pa_project_task_id := NULL;
            l_new_ins_header_rec.pa_project_task_id := NULL;
          ELSE
            l_old_ins_header_rec.pa_project_task_id := l_hist_csr.old_pa_project_task_id;
            l_new_ins_header_rec.pa_project_task_id := l_hist_csr.new_pa_project_task_id;
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_in_transit_order_line_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_in_transit_order_line_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.in_transit_order_line_id := NULL;
            l_new_ins_header_rec.in_transit_order_line_id := NULL;
          ELSE
            l_old_ins_header_rec.in_transit_order_line_id := l_hist_csr.old_in_transit_order_line_id;
            l_new_ins_header_rec.in_transit_order_line_id := l_hist_csr.new_in_transit_order_line_id;
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_wip_job_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_wip_job_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.wip_job_id := NULL;
            l_new_ins_header_rec.wip_job_id := NULL;
          ELSE
            l_old_ins_header_rec.wip_job_id := l_hist_csr.old_wip_job_id;
            l_new_ins_header_rec.wip_job_id := l_hist_csr.new_wip_job_id;
            l_old_ins_header_rec.location_type_code := l_hist_csr.old_location_type_code;
            l_new_ins_header_rec.location_type_code := l_hist_csr.new_location_type_code;
          END IF;

          IF NVL(l_hist_csr.old_po_order_line_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_po_order_line_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.po_order_line_id := NULL;
            l_new_ins_header_rec.po_order_line_id := NULL;
          ELSE
            l_old_ins_header_rec.po_order_line_id := l_hist_csr.old_po_order_line_id;
            l_new_ins_header_rec.po_order_line_id := l_hist_csr.new_po_order_line_id;
          END IF;

          IF NVL(l_hist_csr.old_oe_agreement_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_oe_agreement_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.last_oe_agreement_id := NULL;
            l_new_ins_header_rec.last_oe_agreement_id := NULL;
          ELSE
            l_old_ins_header_rec.last_oe_agreement_id := l_hist_csr.old_oe_agreement_id;
            l_new_ins_header_rec.last_oe_agreement_id := l_hist_csr.new_oe_agreement_id;
          END IF;

          IF NVL(l_hist_csr.old_LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_OE_ORDER_LINE_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_OE_ORDER_LINE_ID := NULL;
            l_new_ins_header_rec.LAST_OE_ORDER_LINE_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_OE_ORDER_LINE_ID := l_hist_csr.old_LAST_OE_ORDER_LINE_ID;
            l_new_ins_header_rec.LAST_OE_ORDER_LINE_ID := l_hist_csr.new_LAST_OE_ORDER_LINE_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_OE_RMA_LINE_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_OE_RMA_LINE_ID := NULL;
            l_new_ins_header_rec.LAST_OE_RMA_LINE_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_OE_RMA_LINE_ID := l_hist_csr.old_LAST_OE_RMA_LINE_ID;
            l_new_ins_header_rec.LAST_OE_RMA_LINE_ID := l_hist_csr.new_LAST_OE_RMA_LINE_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_WIP_JOB_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_WIP_JOB_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_WIP_JOB_ID := NULL;
            l_new_ins_header_rec.LAST_WIP_JOB_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_WIP_JOB_ID := l_hist_csr.old_LAST_WIP_JOB_ID;
            l_new_ins_header_rec.LAST_WIP_JOB_ID := l_hist_csr.new_LAST_WIP_JOB_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_PO_PO_LINE_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_PO_PO_LINE_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_PO_PO_LINE_ID := NULL;
            l_new_ins_header_rec.LAST_PO_PO_LINE_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_PO_PO_LINE_ID := l_hist_csr.old_LAST_PO_PO_LINE_ID;
            l_new_ins_header_rec.LAST_PO_PO_LINE_ID := l_hist_csr.new_LAST_PO_PO_LINE_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_PA_PROJECT_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_PA_PROJECT_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_PA_PROJECT_ID := NULL;
            l_new_ins_header_rec.LAST_PA_PROJECT_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_PA_PROJECT_ID := l_hist_csr.old_LAST_PA_PROJECT_ID;
            l_new_ins_header_rec.LAST_PA_PROJECT_ID := l_hist_csr.new_LAST_PA_PROJECT_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_PA_TASK_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_PA_TASK_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_PA_TASK_ID := NULL;
            l_new_ins_header_rec.LAST_PA_TASK_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_PA_TASK_ID := l_hist_csr.old_LAST_PA_TASK_ID;
            l_new_ins_header_rec.LAST_PA_TASK_ID := l_hist_csr.new_LAST_PA_TASK_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num) = NVL(l_hist_csr.new_LAST_TXN_LINE_DETAIL_ID,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.LAST_TXN_LINE_DETAIL_ID := NULL;
            l_new_ins_header_rec.LAST_TXN_LINE_DETAIL_ID := NULL;
          ELSE
            l_old_ins_header_rec.LAST_TXN_LINE_DETAIL_ID := l_hist_csr.old_LAST_TXN_LINE_DETAIL_ID;
            l_new_ins_header_rec.LAST_TXN_LINE_DETAIL_ID := l_hist_csr.new_LAST_TXN_LINE_DETAIL_ID;
          END IF;

          IF NVL(l_hist_csr.old_LAST_OE_PO_NUMBER,fnd_api.g_miss_char) = NVL(l_hist_csr.new_LAST_OE_PO_NUMBER,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.LAST_OE_PO_NUMBER := NULL;
            l_new_ins_header_rec.LAST_OE_PO_NUMBER := NULL;
          ELSE
            l_old_ins_header_rec.LAST_OE_PO_NUMBER := l_hist_csr.old_LAST_OE_PO_NUMBER;
            l_new_ins_header_rec.LAST_OE_PO_NUMBER := l_hist_csr.new_LAST_OE_PO_NUMBER;
          END IF;

          IF NVL(l_hist_csr.old_completeness_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_completeness_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.completeness_flag := NULL;
            l_new_ins_header_rec.completeness_flag := NULL;
          ELSE
            l_old_ins_header_rec.completeness_flag := l_hist_csr.old_completeness_flag;
            l_new_ins_header_rec.completeness_flag := l_hist_csr.new_completeness_flag;
          END IF;

          IF NVL(l_hist_csr.old_context,fnd_api.g_miss_char) = NVL(l_hist_csr.new_context,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.context := NULL;
            l_new_ins_header_rec.context := NULL;
          ELSE
            l_old_ins_header_rec.context := l_hist_csr.old_context;
            l_new_ins_header_rec.context := l_hist_csr.new_context;
          END IF;

          IF NVL(l_hist_csr.old_attribute1,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute1,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute1 := NULL;
            l_new_ins_header_rec.attribute1 := NULL;
          ELSE
            l_old_ins_header_rec.attribute1 := l_hist_csr.old_attribute1;
            l_new_ins_header_rec.attribute1 := l_hist_csr.new_attribute1;
          END IF;

          IF NVL(l_hist_csr.old_attribute2,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute2,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute2 := NULL;
            l_new_ins_header_rec.attribute2 := NULL;
          ELSE
            l_old_ins_header_rec.attribute2 := l_hist_csr.old_attribute2;
            l_new_ins_header_rec.attribute2 := l_hist_csr.new_attribute2;
          END IF;

          IF NVL(l_hist_csr.old_attribute3,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute3,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute3 := NULL;
            l_new_ins_header_rec.attribute3 := NULL;
          ELSE
            l_old_ins_header_rec.attribute3 := l_hist_csr.old_attribute3;
            l_new_ins_header_rec.attribute3 := l_hist_csr.new_attribute3;
          END IF;

          IF NVL(l_hist_csr.old_attribute4,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute4,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute4 := NULL;
            l_new_ins_header_rec.attribute4 := NULL;
          ELSE
            l_old_ins_header_rec.attribute4 := l_hist_csr.old_attribute4;
            l_new_ins_header_rec.attribute4 := l_hist_csr.new_attribute4;
          END IF;

          IF NVL(l_hist_csr.old_attribute5,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute5,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute5 := NULL;
            l_new_ins_header_rec.attribute5 := NULL;
          ELSE
            l_old_ins_header_rec.attribute5 := l_hist_csr.old_attribute5;
            l_new_ins_header_rec.attribute5 := l_hist_csr.new_attribute5;
          END IF;

          IF NVL(l_hist_csr.old_attribute6,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute6,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute6 := NULL;
            l_new_ins_header_rec.attribute6 := NULL;
          ELSE
            l_old_ins_header_rec.attribute6 := l_hist_csr.old_attribute6;
            l_new_ins_header_rec.attribute6 := l_hist_csr.new_attribute6;
          END IF;

          IF NVL(l_hist_csr.old_attribute7,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute7,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute7 := NULL;
            l_new_ins_header_rec.attribute7 := NULL;
          ELSE
            l_old_ins_header_rec.attribute7 := l_hist_csr.old_attribute7;
            l_new_ins_header_rec.attribute7 := l_hist_csr.new_attribute7;
          END IF;

          IF NVL(l_hist_csr.old_attribute8,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute8,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute8 := NULL;
            l_new_ins_header_rec.attribute8 := NULL;
          ELSE
            l_old_ins_header_rec.attribute8 := l_hist_csr.old_attribute8;
            l_new_ins_header_rec.attribute8 := l_hist_csr.new_attribute8;
          END IF;

          IF NVL(l_hist_csr.old_attribute9,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute9,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute9 := NULL;
            l_new_ins_header_rec.attribute9 := NULL;
          ELSE
            l_old_ins_header_rec.attribute9 := l_hist_csr.old_attribute9;
            l_new_ins_header_rec.attribute9 := l_hist_csr.new_attribute9;
          END IF;

          IF NVL(l_hist_csr.old_attribute10,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute10,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute10 := NULL;
            l_new_ins_header_rec.attribute10 := NULL;
          ELSE
            l_old_ins_header_rec.attribute10 := l_hist_csr.old_attribute10;
            l_new_ins_header_rec.attribute10 := l_hist_csr.new_attribute10;
          END IF;

          IF NVL(l_hist_csr.old_attribute11,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute11,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute11 := NULL;
            l_new_ins_header_rec.attribute11 := NULL;
          ELSE
            l_old_ins_header_rec.attribute11 := l_hist_csr.old_attribute11;
            l_new_ins_header_rec.attribute11 := l_hist_csr.new_attribute11;
          END IF;

          IF NVL(l_hist_csr.old_attribute12,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute12,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute12 := NULL;
            l_new_ins_header_rec.attribute12 := NULL;
          ELSE
            l_old_ins_header_rec.attribute12 := l_hist_csr.old_attribute12;
            l_new_ins_header_rec.attribute12 := l_hist_csr.new_attribute12;
          END IF;

          IF NVL(l_hist_csr.old_attribute13,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute13,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute13 := NULL;
            l_new_ins_header_rec.attribute13 := NULL;
          ELSE
            l_old_ins_header_rec.attribute13 := l_hist_csr.old_attribute13;
            l_new_ins_header_rec.attribute13 := l_hist_csr.new_attribute13;
          END IF;

          IF NVL(l_hist_csr.old_attribute14,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute14,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute14 := NULL;
            l_new_ins_header_rec.attribute14 := NULL;
          ELSE
            l_old_ins_header_rec.attribute14 := l_hist_csr.old_attribute14;
            l_new_ins_header_rec.attribute14 := l_hist_csr.new_attribute14;
          END IF;

          IF NVL(l_hist_csr.old_attribute15,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute15,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute15 := NULL;
            l_new_ins_header_rec.attribute15 := NULL;
          ELSE
            l_old_ins_header_rec.attribute15 := l_hist_csr.old_attribute15;
            l_new_ins_header_rec.attribute15 := l_hist_csr.new_attribute15;
          END IF;

          IF NVL(l_hist_csr.old_inst_loc_type_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_inst_loc_type_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.install_location_type_code := NULL;
            l_new_ins_header_rec.install_location_type_code := NULL;
          ELSE
            l_old_ins_header_rec.install_location_type_code := l_hist_csr.old_inst_loc_type_code;
            l_new_ins_header_rec.install_location_type_code := l_hist_csr.new_inst_loc_type_code;
          END IF;

          IF NVL(l_hist_csr.old_inst_loc_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_inst_loc_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.install_location_id := NULL;
            l_new_ins_header_rec.install_location_id := NULL;
          ELSE
            l_old_ins_header_rec.install_location_id := l_hist_csr.old_inst_loc_id;
            l_new_ins_header_rec.install_location_id := l_hist_csr.new_inst_loc_id;
            l_old_ins_header_rec.install_location_type_code := l_hist_csr.old_inst_loc_type_code;
            l_new_ins_header_rec.install_location_type_code := l_hist_csr.new_inst_loc_type_code;
          END IF;

          IF NVL(l_hist_csr.old_inst_usage_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_inst_usage_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.instance_usage_code := NULL;
            l_new_ins_header_rec.instance_usage_code := NULL;
          ELSE
            l_old_ins_header_rec.instance_usage_code := l_hist_csr.old_inst_usage_code;
            l_new_ins_header_rec.instance_usage_code := l_hist_csr.new_inst_usage_code;
          END IF;

          -- Added by sguthiva for att enhancements
          IF NVL(l_hist_csr.old_config_inst_rev_num,fnd_api.g_miss_num) = NVL(l_hist_csr.new_config_inst_rev_num,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.config_inst_rev_num := NULL;
            l_new_ins_header_rec.config_inst_rev_num := NULL;
          ELSE
            l_old_ins_header_rec.config_inst_rev_num := l_hist_csr.old_config_inst_rev_num;
            l_new_ins_header_rec.config_inst_rev_num := l_hist_csr.new_config_inst_rev_num;
          END IF;

          IF NVL(l_hist_csr.old_config_valid_status,fnd_api.g_miss_char) = NVL(l_hist_csr.new_config_valid_status,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.config_valid_status := NULL;
            l_new_ins_header_rec.config_valid_status := NULL;
          ELSE
            l_old_ins_header_rec.config_valid_status := l_hist_csr.old_config_valid_status;
            l_new_ins_header_rec.config_valid_status := l_hist_csr.new_config_valid_status;
          END IF;

          IF NVL(l_hist_csr.old_instance_description,fnd_api.g_miss_char) = NVL(l_hist_csr.new_instance_description,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.instance_description := NULL;
            l_new_ins_header_rec.instance_description := NULL;
          ELSE
            l_old_ins_header_rec.instance_description := l_hist_csr.old_instance_description;
            l_new_ins_header_rec.instance_description := l_hist_csr.new_instance_description;
          END IF;

          IF NVL(l_hist_csr.old_last_vld_organization_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_last_vld_organization_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.vld_organization_id := NULL;
            l_new_ins_header_rec.vld_organization_id := NULL;
          ELSE
            l_old_ins_header_rec.vld_organization_id := l_hist_csr.old_last_vld_organization_id;
            l_new_ins_header_rec.vld_organization_id := l_hist_csr.new_last_vld_organization_id;
          END IF;
          -- End of addition.

               -- Addition of columns for FA Integration
          IF NVL(l_hist_csr.old_purchase_unit_price,fnd_api.g_miss_num) = NVL(l_hist_csr.new_purchase_unit_price,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.purchase_unit_price := NULL;
            l_new_ins_header_rec.purchase_unit_price := NULL;
          ELSE
            l_old_ins_header_rec.purchase_unit_price := l_hist_csr.old_purchase_unit_price;
            l_new_ins_header_rec.purchase_unit_price := l_hist_csr.new_purchase_unit_price;
          END IF;

          IF NVL(l_hist_csr.old_purchase_currency_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_purchase_currency_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.purchase_currency_code := NULL;
            l_new_ins_header_rec.purchase_currency_code := NULL;
          ELSE
            l_old_ins_header_rec.purchase_currency_code := l_hist_csr.old_purchase_currency_code;
            l_new_ins_header_rec.purchase_currency_code := l_hist_csr.new_purchase_currency_code;
          END IF;

          IF NVL(l_hist_csr.old_payables_unit_price,fnd_api.g_miss_num) = NVL(l_hist_csr.new_payables_unit_price,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.payables_unit_price := NULL;
            l_new_ins_header_rec.payables_unit_price := NULL;
          ELSE
            l_old_ins_header_rec.payables_unit_price := l_hist_csr.old_payables_unit_price;
            l_new_ins_header_rec.payables_unit_price := l_hist_csr.new_payables_unit_price;
          END IF;

          IF NVL(l_hist_csr.old_payables_currency_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_payables_currency_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.payables_currency_code := NULL;
            l_new_ins_header_rec.payables_currency_code := NULL;
          ELSE
            l_old_ins_header_rec.payables_currency_code := l_hist_csr.old_payables_currency_code;
            l_new_ins_header_rec.payables_currency_code := l_hist_csr.new_payables_currency_code;
          END IF;

          IF NVL(l_hist_csr.old_sales_unit_price,fnd_api.g_miss_num) = NVL(l_hist_csr.new_sales_unit_price,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.sales_unit_price := NULL;
            l_new_ins_header_rec.sales_unit_price := NULL;
          ELSE
            l_old_ins_header_rec.sales_unit_price := l_hist_csr.old_sales_unit_price;
            l_new_ins_header_rec.sales_unit_price := l_hist_csr.new_sales_unit_price;
          END IF;

          IF NVL(l_hist_csr.old_sales_currency_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_sales_currency_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.sales_currency_code := NULL;
            l_new_ins_header_rec.sales_currency_code := NULL;
          ELSE
            l_old_ins_header_rec.sales_currency_code := l_hist_csr.old_sales_currency_code;
            l_new_ins_header_rec.sales_currency_code := l_hist_csr.new_sales_currency_code;
          END IF;

          IF NVL(l_hist_csr.old_operational_status_code,fnd_api.g_miss_char) =
          NVL(l_hist_csr.new_operational_status_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.operational_status_code := NULL;
            l_new_ins_header_rec.operational_status_code := NULL;
          ELSE
            l_old_ins_header_rec.operational_status_code := l_hist_csr.old_operational_status_code;
            l_new_ins_header_rec.operational_status_code := l_hist_csr.new_operational_status_code;
          END IF;
          -- End addition of columns for FA Integration
          -- Addition for bug 2696607
             IF  (l_new_ins_header_rec.install_location_id IS NOT NULL AND
                  l_new_ins_header_rec.install_location_type_code IS NULL )
              OR (l_new_ins_header_rec.location_id IS NOT NULL AND
                  l_new_ins_header_rec.location_type_code IS NULL )
              or (l_new_ins_header_rec.inv_organization_id IS NOT NULL AND
                  l_old_ins_header_rec.inv_organization_id IS NOT NULL
                  )
             THEN
             l_instance_rec.instance_id := l_hist_csr.instance_id;
             l_time_stamp := l_hist_csr.creation_date;
                csi_item_instance_pub.get_item_instance_details
               ( p_api_version         => 1.0
                ,p_commit              => fnd_api.g_false
                ,p_init_msg_list       => fnd_api.g_false
                ,p_validation_level    => fnd_api.g_valid_level_full
                ,p_instance_rec        => l_instance_rec
                ,p_get_parties         => fnd_api.g_false
                ,p_party_header_tbl    => l_party_header_tbl
                ,p_get_accounts        => fnd_api.g_false
                ,p_account_header_tbl  => l_account_header_tbl
                ,p_get_org_assignments => fnd_api.g_false
                ,p_org_header_tbl      => l_org_header_tbl
                ,p_get_pricing_attribs => fnd_api.g_false
                ,p_pricing_attrib_tbl  => l_pricing_attrib_tbl
                ,p_get_ext_attribs     => fnd_api.g_false
                ,p_ext_attrib_tbl      => l_ext_attrib_tbl
                ,p_ext_attrib_def_tbl  => l_ext_attrib_def_tbl
                ,p_get_asset_assignments  =>  fnd_api.g_false
                ,p_asset_header_tbl    => l_asset_header_tbl
                ,p_resolve_id_columns  => fnd_api.g_false
                ,p_time_stamp          => l_time_stamp
                ,x_return_status       => x_return_status
                ,x_msg_count           => x_msg_count
                ,x_msg_data            => x_msg_data
               );

              IF NOT(x_return_status = fnd_api.g_ret_sts_success) THEN
                  RAISE fnd_api.g_exc_error;
              END IF;

                IF  (l_new_ins_header_rec.install_location_id IS NOT NULL AND
                     l_new_ins_header_rec.install_location_type_code IS NULL )
                THEN
                   l_old_ins_header_rec.install_location_type_code:=l_instance_rec.install_location_type_code;
                   l_new_ins_header_rec.install_location_type_code:=l_instance_rec.install_location_type_code;
                END IF;

                IF  (l_new_ins_header_rec.location_id IS NOT NULL AND
                     l_new_ins_header_rec.location_type_code IS NULL )
                THEN
                   l_old_ins_header_rec.location_type_code:=l_instance_rec.location_type_code;
                   l_new_ins_header_rec.location_type_code:=l_instance_rec.location_type_code;
                END IF;

                IF  (l_new_ins_header_rec.inv_organization_id IS NOT NULL AND
                     l_old_ins_header_rec.inv_organization_id IS NOT NULL )
                THEN
                   l_old_ins_header_rec.location_type_code:=l_instance_rec.location_type_code;
                   l_new_ins_header_rec.location_type_code:=l_instance_rec.location_type_code;
                END IF;


             END IF;
          -- End addition for bug 2696607

	 --start of code for bug 4754569--
          IF l_old_ins_header_rec.criticality= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.criticality := NULL;
          END IF;

          IF l_new_ins_header_rec.criticality= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.criticality := NULL;
          END IF;

          IF l_old_ins_header_rec.category_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.category_name := NULL;
          END IF;

          IF l_new_ins_header_rec.category_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.category_name := NULL;
          END IF;

	  --included for bug 5211068
          IF l_old_ins_header_rec.maintainable = fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.maintainable := NULL;
          END IF;

          IF l_new_ins_header_rec.maintainable = fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.maintainable := NULL;
          END IF;

          IF NVL(l_hist_csr.old_maintainable_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_maintainable_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.maintainable_flag := NULL;
            l_new_ins_header_rec.maintainable_flag := NULL;
          ELSE
            l_old_ins_header_rec.maintainable_flag := l_hist_csr.old_maintainable_flag;
            l_new_ins_header_rec.maintainable_flag := l_hist_csr.new_maintainable_flag;
          END IF;
	  --end of fix 5211068



          IF NVL(l_hist_csr.old_asset_criticality_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_asset_criticality_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.asset_criticality_code := NULL;
            l_new_ins_header_rec.asset_criticality_code := NULL;
          ELSE
            l_old_ins_header_rec.asset_criticality_code := l_hist_csr.old_asset_criticality_code;
            l_new_ins_header_rec.asset_criticality_code := l_hist_csr.new_asset_criticality_code;
          END IF;

          IF NVL(l_hist_csr.old_category_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_category_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.category_id := NULL;
            l_new_ins_header_rec.category_id := NULL;
          ELSE
            l_old_ins_header_rec.category_id := l_hist_csr.old_category_id;
            l_new_ins_header_rec.category_id := l_hist_csr.new_category_id;
          END IF;


         --end of code for bug 4754569--

          l_old_ins_header_tbl(1):=l_old_ins_header_rec;
          csi_item_instance_pvt.Resolve_id_columns
           (p_instance_header_tbl  => l_old_ins_header_tbl);
          l_old_ins_header_rec:=l_old_ins_header_tbl(1);


          l_new_ins_header_tbl(1):=l_new_ins_header_rec;
          csi_item_instance_pvt.Resolve_id_columns
           (p_instance_header_tbl  => l_new_ins_header_tbl);
          l_new_ins_header_rec:=l_new_ins_header_tbl(1);


          /*
          IF NVL(l_old_ins_header_rec.location_type_code,fnd_api.g_miss_char) = NVL(l_new_ins_header_rec.location_type_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.location_type_code := NULL;
            l_new_ins_header_rec.location_type_code := NULL;
          END IF;

          IF NVL(l_old_ins_header_rec.install_location_type_code,fnd_api.g_miss_char) = NVL(l_new_ins_header_rec.install_location_type_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.install_location_type_code := NULL;
            l_new_ins_header_rec.install_location_type_code := NULL;
          END IF;
          */

          -- Added for bug 2763557
            IF l_old_ins_header_rec.in_transit_order_line_number = fnd_api.g_miss_num
            THEN
              l_old_ins_header_rec.in_transit_order_line_number := NULL;
            END IF;

            IF l_new_ins_header_rec.in_transit_order_line_number = fnd_api.g_miss_num
            THEN
              l_new_ins_header_rec.in_transit_order_line_number := NULL;
            END IF;
          -- End addition for bug 2763557

            IF l_old_ins_header_rec.in_transit_order_number = fnd_api.g_miss_num
            THEN
               l_old_ins_header_rec.in_transit_order_number := NULL;
            END IF;

            IF l_new_ins_header_rec.in_transit_order_number = fnd_api.g_miss_num
            THEN
               l_new_ins_header_rec.in_transit_order_number := NULL;
            END IF;


            IF l_old_ins_header_rec.sales_order_number = fnd_api.g_miss_num
            THEN
               l_old_ins_header_rec.sales_order_number := NULL;
            END IF;

            IF l_new_ins_header_rec.sales_order_number = fnd_api.g_miss_num
            THEN
               l_new_ins_header_rec.sales_order_number := NULL;
            END IF;

            IF l_old_ins_header_rec.sales_order_line_number = fnd_api.g_miss_num
            THEN
               l_old_ins_header_rec.sales_order_line_number := NULL;
            END IF;

            IF l_new_ins_header_rec.sales_order_line_number = fnd_api.g_miss_num
            THEN
               l_new_ins_header_rec.sales_order_line_number := NULL;
            END IF;


            IF l_old_ins_header_rec.sales_order_date = fnd_api.g_miss_date
            THEN
               l_old_ins_header_rec.sales_order_date := NULL;
            END IF;

            IF l_new_ins_header_rec.sales_order_date = fnd_api.g_miss_date
            THEN
               l_new_ins_header_rec.sales_order_date := NULL;
            END IF;


  -- Added for tar 14834588.600
          IF l_old_ins_header_rec.current_loc_address1= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_address1 := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_address1= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_address1 := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_address2= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_address2 := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_address2= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_address2 := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_address3= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_address3 := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_address3= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_address3 := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_address4= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_address4 := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_address4= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_address4 := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_city= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_city := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_city= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_city := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_state= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_state := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_state= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_state := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_postal_code= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_postal_code := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_postal_code= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_postal_code := NULL;
          END IF;

          IF l_old_ins_header_rec.current_loc_country= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.current_loc_country := NULL;
          END IF;

          IF l_new_ins_header_rec.current_loc_country= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.current_loc_country := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_address1= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_address1 := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_address1= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_address1 := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_address2= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_address2 := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_address2= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_address2 := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_address3= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_address3 := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_address3= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_address3 := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_address4= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_address4 := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_address4= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_address4 := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_city= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_city := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_city= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_city := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_state= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_state := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_state= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_state := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_postal_code= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_postal_code := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_postal_code= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_postal_code := NULL;
          END IF;

          IF l_old_ins_header_rec.install_loc_country= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.install_loc_country := NULL;
          END IF;

          IF l_new_ins_header_rec.install_loc_country= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.install_loc_country := NULL;
          END IF;

          IF l_old_ins_header_rec.unit_of_measure_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.unit_of_measure_name := NULL;
          END IF;

          IF l_new_ins_header_rec.unit_of_measure_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.unit_of_measure_name := NULL;
          END IF;

          IF l_old_ins_header_rec.accounting_class= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.accounting_class := NULL;
          END IF;

          IF l_new_ins_header_rec.accounting_class= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.accounting_class := NULL;
          END IF;

          IF l_old_ins_header_rec.instance_condition= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.instance_condition := NULL;
          END IF;

          IF l_new_ins_header_rec.instance_condition= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.instance_condition := NULL;
          END IF;

          IF l_old_ins_header_rec.instance_status= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.instance_status := NULL;
          END IF;

          IF l_new_ins_header_rec.instance_status= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.instance_status := NULL;
          END IF;

          IF l_old_ins_header_rec.system_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.system_name := NULL;
          END IF;

          IF l_new_ins_header_rec.system_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.system_name := NULL;
          END IF;

          IF l_old_ins_header_rec.instance_type_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.instance_type_name := NULL;
          END IF;

          IF l_new_ins_header_rec.instance_type_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.instance_type_name := NULL;
          END IF;

          IF l_old_ins_header_rec.inv_organization_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.inv_organization_name := NULL;
          END IF;

          IF l_new_ins_header_rec.inv_organization_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.inv_organization_name := NULL;
          END IF;

          IF l_old_ins_header_rec.pa_project_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.pa_project_name := NULL;
          END IF;

          IF l_new_ins_header_rec.pa_project_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.pa_project_name := NULL;
          END IF;

          IF l_old_ins_header_rec.pa_project_number= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.pa_project_number := NULL;
          END IF;

          IF l_new_ins_header_rec.pa_project_number= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.pa_project_number := NULL;
          END IF;

          IF l_old_ins_header_rec.pa_task_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.pa_task_name := NULL;
          END IF;

          IF l_new_ins_header_rec.pa_task_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.pa_task_name := NULL;
          END IF;

          IF l_old_ins_header_rec.pa_task_number= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.pa_task_number := NULL;
          END IF;

          IF l_new_ins_header_rec.pa_task_number= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.pa_task_number := NULL;
          END IF;

          IF l_old_ins_header_rec.wip_entity_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.wip_entity_name := NULL;
          END IF;

          IF l_new_ins_header_rec.wip_entity_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.wip_entity_name := NULL;
          END IF;

          IF l_old_ins_header_rec.purchase_order_number= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.purchase_order_number := NULL;
          END IF;

          IF l_new_ins_header_rec.purchase_order_number= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.purchase_order_number := NULL;
          END IF;

          IF l_old_ins_header_rec.instance_usage_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.instance_usage_name := NULL;
          END IF;

          IF l_new_ins_header_rec.instance_usage_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.instance_usage_name := NULL;
          END IF;

          IF l_old_ins_header_rec.inv_locator_name= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.inv_locator_name := NULL;
          END IF;

          IF l_new_ins_header_rec.inv_locator_name= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.inv_locator_name := NULL;
          END IF;

          IF   (l_old_ins_header_rec.current_loc_number= fnd_api.g_miss_char)
            OR (nvl(l_old_ins_header_rec.location_type_code,'$$$$') <> 'HZ_PARTY_SITES')
          THEN
                l_old_ins_header_rec.current_loc_number := NULL;
          END IF;

          IF   (l_new_ins_header_rec.current_loc_number= fnd_api.g_miss_char)
            OR (nvl(l_new_ins_header_rec.location_type_code, '$$$$') <> 'HZ_PARTY_SITES')
          THEN
                l_new_ins_header_rec.current_loc_number := NULL;
          END IF;

          IF   (l_old_ins_header_rec.install_loc_number= fnd_api.g_miss_char)
            OR (nvl(l_old_ins_header_rec.install_location_type_code, '$$$$') <> 'HZ_PARTY_SITES')
          THEN
             l_old_ins_header_rec.install_loc_number := NULL;
          END IF;

          IF   (l_new_ins_header_rec.install_loc_number= fnd_api.g_miss_char)
            OR (nvl(l_new_ins_header_rec.install_location_type_code, '$$$$') <> 'HZ_PARTY_SITES')
          THEN
             l_new_ins_header_rec.install_loc_number := NULL;
          END IF;
       -- End of Addition for tar 14834588.600

	        --Changes for bug 9177957
          IF l_old_ins_header_rec.INVENTORY_ITEM_NAME= fnd_api.g_miss_char
          THEN
             l_old_ins_header_rec.INVENTORY_ITEM_NAME := NULL;
          END IF;

          IF l_new_ins_header_rec.INVENTORY_ITEM_NAME= fnd_api.g_miss_char
          THEN
             l_new_ins_header_rec.INVENTORY_ITEM_NAME := NULL;
          END IF;
          --End of Changes for bug 9177957

          IF NVL(l_old_ins_header_rec.location_type_code,fnd_api.g_miss_char) = NVL(l_new_ins_header_rec.location_type_code,fnd_api.g_miss_char)
          THEN
             l_old_ins_header_rec.location_type_code := NULL;
             l_new_ins_header_rec.location_type_code := NULL;
          END IF;

          IF NVL(l_old_ins_header_rec.install_location_type_code,fnd_api.g_miss_char) = NVL(l_new_ins_header_rec.install_location_type_code,fnd_api.g_miss_char)
          THEN
             l_old_ins_header_rec.install_location_type_code := NULL;
             l_new_ins_header_rec.install_location_type_code := NULL;
          END IF;

	 --start of code for eam integration columns--
          IF NVL(l_hist_csr.old_network_asset_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_network_asset_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.network_asset_flag := NULL;
            l_new_ins_header_rec.network_asset_flag := NULL;
          ELSE
            l_old_ins_header_rec.network_asset_flag := l_hist_csr.old_network_asset_flag;
            l_new_ins_header_rec.network_asset_flag := l_hist_csr.new_network_asset_flag;
          END IF;

          IF NVL(l_hist_csr.old_maintainable_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_maintainable_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.maintainable_flag := NULL;
            l_new_ins_header_rec.maintainable_flag := NULL;
          ELSE
            l_old_ins_header_rec.maintainable_flag := l_hist_csr.old_maintainable_flag;
            l_new_ins_header_rec.maintainable_flag := l_hist_csr.new_maintainable_flag;
          END IF;

          IF NVL(l_hist_csr.old_pn_location_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_pn_location_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.pn_location_id := NULL;
            l_new_ins_header_rec.pn_location_id := NULL;
          ELSE
            l_old_ins_header_rec.pn_location_id := l_hist_csr.old_pn_location_id;
            l_new_ins_header_rec.pn_location_id := l_hist_csr.new_pn_location_id;
          END IF;

          IF NVL(l_hist_csr.old_asset_criticality_code,fnd_api.g_miss_char) = NVL(l_hist_csr.new_asset_criticality_code,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.asset_criticality_code := NULL;
            l_new_ins_header_rec.asset_criticality_code := NULL;
          ELSE
            l_old_ins_header_rec.asset_criticality_code := l_hist_csr.old_asset_criticality_code;
            l_new_ins_header_rec.asset_criticality_code := l_hist_csr.new_asset_criticality_code;
          END IF;

          IF NVL(l_hist_csr.old_category_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_category_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.category_id := NULL;
            l_new_ins_header_rec.category_id := NULL;
          ELSE
            l_old_ins_header_rec.category_id := l_hist_csr.old_category_id;
            l_new_ins_header_rec.category_id := l_hist_csr.new_category_id;
          END IF;


          IF NVL(l_hist_csr.old_equipment_gen_object_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_equipment_gen_object_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.equipment_gen_object_id := NULL;
            l_new_ins_header_rec.equipment_gen_object_id := NULL;
          ELSE
            l_old_ins_header_rec.equipment_gen_object_id := l_hist_csr.old_equipment_gen_object_id;
            l_new_ins_header_rec.equipment_gen_object_id := l_hist_csr.new_equipment_gen_object_id;
          END IF;

	  IF NVL(l_hist_csr.old_instantiation_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_instantiation_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.instantiation_flag := NULL;
            l_new_ins_header_rec.instantiation_flag := NULL;
          ELSE
            l_old_ins_header_rec.instantiation_flag := l_hist_csr.old_instantiation_flag;
            l_new_ins_header_rec.instantiation_flag := l_hist_csr.new_instantiation_flag;
          END IF;

	  IF NVL(l_hist_csr.old_linear_location_id,fnd_api.g_miss_num) = NVL(l_hist_csr.new_linear_location_id,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.linear_location_id := NULL;
            l_new_ins_header_rec.linear_location_id := NULL;
          ELSE
            l_old_ins_header_rec.linear_location_id := l_hist_csr.old_linear_location_id;
            l_new_ins_header_rec.linear_location_id := l_hist_csr.new_linear_location_id;
          END IF;

	  IF NVL(l_hist_csr.old_operational_log_flag,fnd_api.g_miss_char) = NVL(l_hist_csr.new_operational_log_flag,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.operational_log_flag := NULL;
            l_new_ins_header_rec.operational_log_flag := NULL;
          ELSE
            l_old_ins_header_rec.operational_log_flag := l_hist_csr.old_operational_log_flag;
            l_new_ins_header_rec.operational_log_flag := l_hist_csr.new_operational_log_flag;
          END IF;

	  IF NVL(l_hist_csr.old_checkin_status,fnd_api.g_miss_num) = NVL(l_hist_csr.new_checkin_status,fnd_api.g_miss_num)
          THEN
            l_old_ins_header_rec.checkin_status := NULL;
            l_new_ins_header_rec.checkin_status := NULL;
          ELSE
            l_old_ins_header_rec.checkin_status := l_hist_csr.old_checkin_status;
            l_new_ins_header_rec.checkin_status := l_hist_csr.new_checkin_status;
          END IF;

	  IF NVL(l_hist_csr.old_supplier_warranty_exp_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_supplier_warranty_exp_date,fnd_api.g_miss_date)
          THEN
            l_old_ins_header_rec.supplier_warranty_exp_date := NULL;
            l_new_ins_header_rec.supplier_warranty_exp_date := NULL;
          ELSE
            l_old_ins_header_rec.supplier_warranty_exp_date := l_hist_csr.old_supplier_warranty_exp_date;
            l_new_ins_header_rec.supplier_warranty_exp_date := l_hist_csr.new_supplier_warranty_exp_date;
          END IF;


	  IF NVL(l_hist_csr.old_attribute16,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute16,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute16 := NULL;
            l_new_ins_header_rec.attribute16 := NULL;
          ELSE
            l_old_ins_header_rec.attribute16 := l_hist_csr.old_attribute16;
            l_new_ins_header_rec.attribute16 := l_hist_csr.new_attribute16;
          END IF;

	  IF NVL(l_hist_csr.old_attribute17,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute17,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute17 := NULL;
            l_new_ins_header_rec.attribute17 := NULL;
          ELSE
            l_old_ins_header_rec.attribute17 := l_hist_csr.old_attribute17;
            l_new_ins_header_rec.attribute17 := l_hist_csr.new_attribute17;
          END IF;

	  IF NVL(l_hist_csr.old_attribute18,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute18,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute18 := NULL;
            l_new_ins_header_rec.attribute18 := NULL;
          ELSE
            l_old_ins_header_rec.attribute18 := l_hist_csr.old_attribute18;
            l_new_ins_header_rec.attribute18 := l_hist_csr.new_attribute18;
          END IF;

	  IF NVL(l_hist_csr.old_attribute19,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute19,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute19 := NULL;
            l_new_ins_header_rec.attribute19 := NULL;
          ELSE
            l_old_ins_header_rec.attribute19 := l_hist_csr.old_attribute19;
            l_new_ins_header_rec.attribute19 := l_hist_csr.new_attribute19;
          END IF;

	  IF NVL(l_hist_csr.old_attribute20,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute20,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute20 := NULL;
            l_new_ins_header_rec.attribute20 := NULL;
          ELSE
            l_old_ins_header_rec.attribute20 := l_hist_csr.old_attribute20;
            l_new_ins_header_rec.attribute20 := l_hist_csr.new_attribute20;
          END IF;

	  IF NVL(l_hist_csr.old_attribute21,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute21,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute21 := NULL;
            l_new_ins_header_rec.attribute21 := NULL;
          ELSE
            l_old_ins_header_rec.attribute21 := l_hist_csr.old_attribute21;
            l_new_ins_header_rec.attribute21 := l_hist_csr.new_attribute21;
          END IF;

	  IF NVL(l_hist_csr.old_attribute22,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute22,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute22 := NULL;
            l_new_ins_header_rec.attribute22 := NULL;
          ELSE
            l_old_ins_header_rec.attribute22 := l_hist_csr.old_attribute22;
            l_new_ins_header_rec.attribute22 := l_hist_csr.new_attribute22;
          END IF;

	  IF NVL(l_hist_csr.old_attribute23,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute23,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute23 := NULL;
            l_new_ins_header_rec.attribute23 := NULL;
          ELSE
            l_old_ins_header_rec.attribute23 := l_hist_csr.old_attribute23;
            l_new_ins_header_rec.attribute23 := l_hist_csr.new_attribute23;
          END IF;

	  IF NVL(l_hist_csr.old_attribute24,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute24,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute24 := NULL;
            l_new_ins_header_rec.attribute24 := NULL;
          ELSE
            l_old_ins_header_rec.attribute24 := l_hist_csr.old_attribute24;
            l_new_ins_header_rec.attribute24 := l_hist_csr.new_attribute24;
          END IF;

	  IF NVL(l_hist_csr.old_attribute25,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute25,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute25 := NULL;
            l_new_ins_header_rec.attribute25 := NULL;
          ELSE
            l_old_ins_header_rec.attribute25 := l_hist_csr.old_attribute25;
            l_new_ins_header_rec.attribute25 := l_hist_csr.new_attribute25;
          END IF;

	  IF NVL(l_hist_csr.old_attribute26,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute26,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute26 := NULL;
            l_new_ins_header_rec.attribute26 := NULL;
          ELSE
            l_old_ins_header_rec.attribute26 := l_hist_csr.old_attribute26;
            l_new_ins_header_rec.attribute26 := l_hist_csr.new_attribute26;
          END IF;

	  IF NVL(l_hist_csr.old_attribute27,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute27,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute27 := NULL;
            l_new_ins_header_rec.attribute27 := NULL;
          ELSE
            l_old_ins_header_rec.attribute27 := l_hist_csr.old_attribute27;
            l_new_ins_header_rec.attribute27 := l_hist_csr.new_attribute27;
          END IF;

	  IF NVL(l_hist_csr.old_attribute28,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute28,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute28 := NULL;
            l_new_ins_header_rec.attribute28 := NULL;
          ELSE
            l_old_ins_header_rec.attribute28 := l_hist_csr.old_attribute28;
            l_new_ins_header_rec.attribute28 := l_hist_csr.new_attribute28;
          END IF;

	  IF NVL(l_hist_csr.old_attribute29,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute29,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute29 := NULL;
            l_new_ins_header_rec.attribute29 := NULL;
          ELSE
            l_old_ins_header_rec.attribute29 := l_hist_csr.old_attribute29;
            l_new_ins_header_rec.attribute29 := l_hist_csr.new_attribute29;
          END IF;

	  IF NVL(l_hist_csr.old_attribute30,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute30,fnd_api.g_miss_char)
          THEN
            l_old_ins_header_rec.attribute30 := NULL;
            l_new_ins_header_rec.attribute30 := NULL;
          ELSE
            l_old_ins_header_rec.attribute30 := l_hist_csr.old_attribute30;
            l_new_ins_header_rec.attribute30 := l_hist_csr.new_attribute30;
          END IF;

	 --end of code for eam integration columns--





      l_ins_header_rec.instance_id                 := l_hist_csr.instance_id ;
      l_ins_header_rec.old_instance_number         := l_old_ins_header_rec.instance_number ;
      l_ins_header_rec.new_instance_number         := l_new_ins_header_rec.instance_number ;
      l_ins_header_rec.old_external_reference      := l_old_ins_header_rec.external_reference ;
      l_ins_header_rec.new_external_reference      := l_new_ins_header_rec.external_reference ;
      l_ins_header_rec.old_inventory_item_id       := l_old_ins_header_rec.inventory_item_id  ;
      l_ins_header_rec.new_inventory_item_id       := l_new_ins_header_rec.inventory_item_id  ;
      l_ins_header_rec.old_inventory_item_name     := l_old_ins_header_rec.inventory_item_name  ;  -- Bug 9177957
      l_ins_header_rec.new_inventory_item_name     := l_new_ins_header_rec.inventory_item_name  ;  -- Bug 9177957
      l_ins_header_rec.old_inventory_revision      := l_old_ins_header_rec.inventory_revision ;
      l_ins_header_rec.new_inventory_revision      := l_new_ins_header_rec.inventory_revision ;
      l_ins_header_rec.old_inv_master_org_id       := l_old_ins_header_rec.inv_master_organization_id ;
      l_ins_header_rec.new_inv_master_org_id       := l_new_ins_header_rec.inv_master_organization_id ;
      l_ins_header_rec.old_serial_number           := l_old_ins_header_rec.serial_number ;
      l_ins_header_rec.new_serial_number           := l_new_ins_header_rec.serial_number ;
      l_ins_header_rec.old_mfg_serial_number_flag  := l_old_ins_header_rec.mfg_serial_number_flag ;
      l_ins_header_rec.new_mfg_serial_number_flag  := l_new_ins_header_rec.mfg_serial_number_flag ;
      l_ins_header_rec.old_lot_number              := l_old_ins_header_rec.lot_number ;
      l_ins_header_rec.new_lot_number              := l_new_ins_header_rec.lot_number ;
      l_ins_header_rec.old_quantity                := l_old_ins_header_rec.quantity ;
      l_ins_header_rec.new_quantity                := l_new_ins_header_rec.quantity ;
      l_ins_header_rec.old_unit_of_measure_name    := l_old_ins_header_rec.unit_of_measure_name ;
      l_ins_header_rec.new_unit_of_measure_name    := l_new_ins_header_rec.unit_of_measure_name ;
      l_ins_header_rec.old_unit_of_measure         := l_old_ins_header_rec.unit_of_measure ;
      l_ins_header_rec.new_unit_of_measure         := l_new_ins_header_rec.unit_of_measure ;
      l_ins_header_rec.old_accounting_class        := l_old_ins_header_rec.accounting_class ;
      l_ins_header_rec.new_accounting_class        := l_new_ins_header_rec.accounting_class ;
      l_ins_header_rec.old_accounting_class_code   := l_old_ins_header_rec.accounting_class_code ;
      l_ins_header_rec.new_accounting_class_code   := l_new_ins_header_rec.accounting_class_code ;
      l_ins_header_rec.old_instance_condition      := l_old_ins_header_rec.instance_condition ;
      l_ins_header_rec.new_instance_condition      := l_new_ins_header_rec.instance_condition ;
      l_ins_header_rec.old_instance_condition_id   := l_old_ins_header_rec.instance_condition_id ;
      l_ins_header_rec.new_instance_condition_id   := l_new_ins_header_rec.instance_condition_id ;
      l_ins_header_rec.old_instance_status         := l_old_ins_header_rec.instance_status ;
      l_ins_header_rec.new_instance_status         := l_new_ins_header_rec.instance_status ;
      l_ins_header_rec.old_instance_status_id      := l_old_ins_header_rec.instance_status_id ;
      l_ins_header_rec.new_instance_status_id      := l_new_ins_header_rec.instance_status_id ;
      l_ins_header_rec.old_customer_view_flag      := l_old_ins_header_rec.customer_view_flag ;
      l_ins_header_rec.new_customer_view_flag      := l_new_ins_header_rec.customer_view_flag ;
      l_ins_header_rec.old_merchant_view_flag      := l_old_ins_header_rec.merchant_view_flag ;
      l_ins_header_rec.new_merchant_view_flag      := l_new_ins_header_rec.merchant_view_flag ;
      l_ins_header_rec.old_sellable_flag           := l_old_ins_header_rec.sellable_flag      ;
      l_ins_header_rec.new_sellable_flag           := l_new_ins_header_rec.sellable_flag      ;
      l_ins_header_rec.old_system_id               := l_old_ins_header_rec.system_id          ;
      l_ins_header_rec.new_system_id               := l_new_ins_header_rec.system_id          ;
      l_ins_header_rec.old_system_name             := l_old_ins_header_rec.system_name        ;
      l_ins_header_rec.new_system_name             := l_new_ins_header_rec.system_name        ;
      l_ins_header_rec.old_instance_type_code      := l_old_ins_header_rec.instance_type_code ;
      l_ins_header_rec.new_instance_type_code      := l_new_ins_header_rec.instance_type_code ;
      l_ins_header_rec.old_instance_type_name      := l_old_ins_header_rec.instance_type_name ;
      l_ins_header_rec.new_instance_type_name      := l_new_ins_header_rec.instance_type_name ;
      l_ins_header_rec.old_active_start_date       := l_old_ins_header_rec.active_start_date  ;
      l_ins_header_rec.new_active_start_date       := l_new_ins_header_rec.active_start_date  ;
      l_ins_header_rec.old_active_end_date         := l_old_ins_header_rec.active_end_date    ;
      l_ins_header_rec.new_active_end_date         := l_new_ins_header_rec.active_end_date    ;
      l_ins_header_rec.old_location_type_code      := l_old_ins_header_rec.location_type_code ;
      l_ins_header_rec.new_location_type_code      := l_new_ins_header_rec.location_type_code ;
      l_ins_header_rec.old_location_id             := l_old_ins_header_rec.location_id        ;
      l_ins_header_rec.new_location_id             := l_new_ins_header_rec.location_id        ;
      l_ins_header_rec.old_inv_organization_id     := l_old_ins_header_rec.inv_organization_id ;
      l_ins_header_rec.new_inv_organization_id     := l_new_ins_header_rec.inv_organization_id ;
      l_ins_header_rec.old_inv_organization_name   := l_old_ins_header_rec.inv_organization_name ;
      l_ins_header_rec.new_inv_organization_name   := l_new_ins_header_rec.inv_organization_name ;
      l_ins_header_rec.old_inv_subinventory_name   := l_old_ins_header_rec.inv_subinventory_name ;
      l_ins_header_rec.new_inv_subinventory_name   := l_new_ins_header_rec.inv_subinventory_name ;
      l_ins_header_rec.old_inv_locator_id          := l_old_ins_header_rec.inv_locator_id       ;
      l_ins_header_rec.new_inv_locator_id          := l_new_ins_header_rec.inv_locator_id       ;
      l_ins_header_rec.old_pa_project_id           := l_old_ins_header_rec.pa_project_id        ;
      l_ins_header_rec.new_pa_project_id           := l_new_ins_header_rec.pa_project_id        ;
      l_ins_header_rec.old_pa_project_task_id      := l_old_ins_header_rec.pa_project_task_id   ;
      l_ins_header_rec.new_pa_project_task_id      := l_new_ins_header_rec.pa_project_task_id   ;
      l_ins_header_rec.old_pa_project_name         := l_old_ins_header_rec.pa_project_name      ;
      l_ins_header_rec.new_pa_project_name         := l_new_ins_header_rec.pa_project_name      ;
      l_ins_header_rec.old_pa_project_number       := l_old_ins_header_rec.pa_project_number    ;
      l_ins_header_rec.new_pa_project_number       := l_new_ins_header_rec.pa_project_number    ;
      l_ins_header_rec.old_pa_task_name            := l_old_ins_header_rec.pa_task_name         ;
      l_ins_header_rec.new_pa_task_name            := l_new_ins_header_rec.pa_task_name         ;
      l_ins_header_rec.old_pa_task_number          := l_old_ins_header_rec.pa_task_number       ;
      l_ins_header_rec.new_pa_task_number          := l_new_ins_header_rec.pa_task_number       ;
      l_ins_header_rec.old_in_transit_order_line_id:= l_old_ins_header_rec.in_transit_order_line_id ;
      l_ins_header_rec.new_in_transit_order_line_id:= l_new_ins_header_rec.in_transit_order_line_id ;
      l_ins_header_rec.old_in_transit_order_line_num := l_old_ins_header_rec.in_transit_order_line_number ;
      l_ins_header_rec.new_in_transit_order_line_num := l_new_ins_header_rec.in_transit_order_line_number ;
      l_ins_header_rec.old_in_transit_order_number := l_old_ins_header_rec.in_transit_order_number ;
      l_ins_header_rec.new_in_transit_order_number := l_new_ins_header_rec.in_transit_order_number ;
      l_ins_header_rec.old_wip_job_id              := l_old_ins_header_rec.wip_job_id    ;
      l_ins_header_rec.new_wip_job_id              := l_new_ins_header_rec.wip_job_id    ;
      l_ins_header_rec.old_wip_entity_name         := l_old_ins_header_rec.wip_entity_name ;
      l_ins_header_rec.new_wip_entity_name         := l_new_ins_header_rec.wip_entity_name ;
      l_ins_header_rec.old_po_order_line_id        := l_old_ins_header_rec.po_order_line_id;
      l_ins_header_rec.new_po_order_line_id        := l_new_ins_header_rec.po_order_line_id;
      l_ins_header_rec.old_last_oe_order_line_id   := l_old_ins_header_rec.last_oe_order_line_id ;
      l_ins_header_rec.new_last_oe_order_line_id   := l_new_ins_header_rec.last_oe_order_line_id ;
      l_ins_header_rec.old_last_oe_rma_line_id     := l_old_ins_header_rec.last_oe_rma_line_id ;
      l_ins_header_rec.new_last_oe_rma_line_id     := l_new_ins_header_rec.last_oe_rma_line_id ;
      l_ins_header_rec.old_last_po_po_line_id      := l_old_ins_header_rec.last_po_po_line_id ;
      l_ins_header_rec.new_last_po_po_line_id      := l_new_ins_header_rec.last_po_po_line_id ;
      l_ins_header_rec.old_last_oe_po_number       := l_old_ins_header_rec.last_oe_po_number ;
      l_ins_header_rec.new_last_oe_po_number       := l_new_ins_header_rec.last_oe_po_number ;
      l_ins_header_rec.old_last_wip_job_id         := l_old_ins_header_rec.last_wip_job_id ;
      l_ins_header_rec.new_last_wip_job_id         := l_new_ins_header_rec.last_wip_job_id ;
      l_ins_header_rec.old_last_pa_project_id      := l_old_ins_header_rec.last_pa_project_id ;
      l_ins_header_rec.new_last_pa_project_id      := l_new_ins_header_rec.last_pa_project_id ;
      l_ins_header_rec.old_last_pa_task_id         := l_old_ins_header_rec.last_pa_task_id ;
      l_ins_header_rec.new_last_pa_task_id         := l_new_ins_header_rec.last_pa_task_id ;
      l_ins_header_rec.old_last_oe_agreement_id    := l_old_ins_header_rec.last_oe_agreement_id ;
      l_ins_header_rec.new_last_oe_agreement_id    := l_new_ins_header_rec.last_oe_agreement_id ;
      l_ins_header_rec.old_install_date            := l_old_ins_header_rec.install_date ;       --added for 2671179
      l_ins_header_rec.new_install_date            := l_new_ins_header_rec.install_date ;       --added for 2671179
      l_ins_header_rec.old_manually_created_flag   := NULL ;
      l_ins_header_rec.new_manually_created_flag   := NULL ;
      l_ins_header_rec.old_return_by_date          := l_old_ins_header_rec.return_by_date ;     --added for 2671179
      l_ins_header_rec.new_return_by_date          := l_new_ins_header_rec.return_by_date ;     --added for 2671179
      l_ins_header_rec.old_actual_return_date      := l_old_ins_header_rec.actual_return_date ; --added for 2671179
      l_ins_header_rec.new_actual_return_date      := l_new_ins_header_rec.actual_return_date ; --added for 2671179
      l_ins_header_rec.old_creation_complete_flag  := NULL ;
      l_ins_header_rec.new_creation_complete_flag  := NULL ;
      l_ins_header_rec.old_completeness_flag       := l_old_ins_header_rec.completeness_flag ;
      l_ins_header_rec.new_completeness_flag       := l_new_ins_header_rec.completeness_flag ;
      l_ins_header_rec.old_context                 := l_old_ins_header_rec.context ;
      l_ins_header_rec.new_context                 := l_new_ins_header_rec.context ;
      l_ins_header_rec.old_attribute1              := l_old_ins_header_rec.attribute1 ;
      l_ins_header_rec.new_attribute1              := l_new_ins_header_rec.attribute1 ;
      l_ins_header_rec.old_attribute2              := l_old_ins_header_rec.attribute2 ;
      l_ins_header_rec.new_attribute2              := l_new_ins_header_rec.attribute2 ;
      l_ins_header_rec.old_attribute3              := l_old_ins_header_rec.attribute3 ;
      l_ins_header_rec.new_attribute3              := l_new_ins_header_rec.attribute3 ;
      l_ins_header_rec.old_attribute4              := l_old_ins_header_rec.attribute4 ;
      l_ins_header_rec.new_attribute4              := l_new_ins_header_rec.attribute4 ;
      l_ins_header_rec.old_attribute5              := l_old_ins_header_rec.attribute5 ;
      l_ins_header_rec.new_attribute5              := l_new_ins_header_rec.attribute5 ;
      l_ins_header_rec.old_attribute6              := l_old_ins_header_rec.attribute6 ;
      l_ins_header_rec.new_attribute6              := l_new_ins_header_rec.attribute6 ;
      l_ins_header_rec.old_attribute7              := l_old_ins_header_rec.attribute7 ;
      l_ins_header_rec.new_attribute7              := l_new_ins_header_rec.attribute7 ;
      l_ins_header_rec.old_attribute8              := l_old_ins_header_rec.attribute8 ;
      l_ins_header_rec.new_attribute8              := l_new_ins_header_rec.attribute8 ;
      l_ins_header_rec.old_attribute9              := l_old_ins_header_rec.attribute9 ;
      l_ins_header_rec.new_attribute9              := l_new_ins_header_rec.attribute9 ;
      l_ins_header_rec.old_attribute10             := l_old_ins_header_rec.attribute10 ;
      l_ins_header_rec.new_attribute10             := l_new_ins_header_rec.attribute10 ;
      l_ins_header_rec.old_attribute11             := l_old_ins_header_rec.attribute11 ;
      l_ins_header_rec.new_attribute11             := l_new_ins_header_rec.attribute11 ;
      l_ins_header_rec.old_attribute12             := l_old_ins_header_rec.attribute12 ;
      l_ins_header_rec.new_attribute12             := l_new_ins_header_rec.attribute12 ;
      l_ins_header_rec.old_attribute13             := l_old_ins_header_rec.attribute13 ;
      l_ins_header_rec.new_attribute13             := l_new_ins_header_rec.attribute13 ;
      l_ins_header_rec.old_attribute14             := l_old_ins_header_rec.attribute14 ;
      l_ins_header_rec.new_attribute14             := l_new_ins_header_rec.attribute14 ;
      l_ins_header_rec.old_attribute15             := l_old_ins_header_rec.attribute15 ;
      l_ins_header_rec.new_attribute15             := l_new_ins_header_rec.attribute15 ;
      l_ins_header_rec.old_last_txn_line_detail_id := l_old_ins_header_rec.last_txn_line_detail_id ;
      l_ins_header_rec.new_last_txn_line_detail_id := l_new_ins_header_rec.last_txn_line_detail_id ;
      l_ins_header_rec.old_install_location_type_code := l_old_ins_header_rec.install_location_type_code ;
      l_ins_header_rec.new_install_location_type_code := l_new_ins_header_rec.install_location_type_code ;
      l_ins_header_rec.old_install_location_id     := l_old_ins_header_rec.install_location_id ;
      l_ins_header_rec.new_install_location_id     := l_new_ins_header_rec.install_location_id ;
      l_ins_header_rec.old_instance_usage_code     := l_old_ins_header_rec.instance_usage_code ;
      l_ins_header_rec.new_instance_usage_code     := l_new_ins_header_rec.instance_usage_code ;
      l_ins_header_rec.old_current_loc_address1    := l_old_ins_header_rec.current_loc_address1 ;
      l_ins_header_rec.new_current_loc_address1    := l_new_ins_header_rec.current_loc_address1 ;
      l_ins_header_rec.old_current_loc_address2    := l_old_ins_header_rec.current_loc_address2 ;
      l_ins_header_rec.new_current_loc_address2    := l_new_ins_header_rec.current_loc_address2 ;
      l_ins_header_rec.old_current_loc_address3    := l_old_ins_header_rec.current_loc_address3 ;
      l_ins_header_rec.new_current_loc_address3    := l_new_ins_header_rec.current_loc_address3 ;
      l_ins_header_rec.old_current_loc_address4    := l_old_ins_header_rec.current_loc_address4 ;
      l_ins_header_rec.new_current_loc_address4    := l_new_ins_header_rec.current_loc_address4 ;
      l_ins_header_rec.old_current_loc_city        := l_old_ins_header_rec.current_loc_city     ;
      l_ins_header_rec.new_current_loc_city        := l_new_ins_header_rec.current_loc_city     ;
      l_ins_header_rec.old_current_loc_postal_code := l_old_ins_header_rec.current_loc_postal_code ;
      l_ins_header_rec.new_current_loc_postal_code := l_new_ins_header_rec.current_loc_postal_code ;
      l_ins_header_rec.old_current_loc_country     := l_old_ins_header_rec.current_loc_country     ;
      l_ins_header_rec.new_current_loc_country     := l_new_ins_header_rec.current_loc_country     ;
      l_ins_header_rec.old_current_loc_state       := l_old_ins_header_rec.current_loc_state     ;
      l_ins_header_rec.new_current_loc_state       := l_new_ins_header_rec.current_loc_state     ;
      l_ins_header_rec.old_sales_order_number      := l_old_ins_header_rec.sales_order_number      ;
      l_ins_header_rec.new_sales_order_number      := l_new_ins_header_rec.sales_order_number      ;
      l_ins_header_rec.old_sales_order_line_number := l_old_ins_header_rec.sales_order_line_number ;
      l_ins_header_rec.new_sales_order_line_number := l_new_ins_header_rec.sales_order_line_number ;
      l_ins_header_rec.old_sales_order_date        := l_old_ins_header_rec.sales_order_date        ;
      l_ins_header_rec.new_sales_order_date        := l_new_ins_header_rec.sales_order_date        ;
      l_ins_header_rec.old_purchase_order_number   := l_old_ins_header_rec.purchase_order_number   ;
      l_ins_header_rec.new_purchase_order_number   := l_new_ins_header_rec.purchase_order_number   ;
      l_ins_header_rec.old_instance_usage_name     := l_old_ins_header_rec.instance_usage_name     ;
      l_ins_header_rec.new_instance_usage_name     := l_new_ins_header_rec.instance_usage_name     ;
      l_ins_header_rec.old_install_loc_address1    := l_old_ins_header_rec.install_loc_address1 ;
      l_ins_header_rec.new_install_loc_address1    := l_new_ins_header_rec.install_loc_address1 ;
      l_ins_header_rec.old_install_loc_address2    := l_old_ins_header_rec.install_loc_address2 ;
      l_ins_header_rec.new_install_loc_address2    := l_new_ins_header_rec.install_loc_address2 ;
      l_ins_header_rec.old_install_loc_address3    := l_old_ins_header_rec.install_loc_address3 ;
      l_ins_header_rec.new_install_loc_address3    := l_new_ins_header_rec.install_loc_address3 ;
      l_ins_header_rec.old_install_loc_address4    := l_old_ins_header_rec.install_loc_address4 ;
      l_ins_header_rec.new_install_loc_address4    := l_new_ins_header_rec.install_loc_address4 ;
      l_ins_header_rec.old_install_loc_city        := l_old_ins_header_rec.install_loc_city     ;
      l_ins_header_rec.new_install_loc_city        := l_new_ins_header_rec.install_loc_city     ;
      l_ins_header_rec.old_install_loc_postal_code := l_old_ins_header_rec.install_loc_postal_code ;
      l_ins_header_rec.new_install_loc_postal_code := l_new_ins_header_rec.install_loc_postal_code ;
      l_ins_header_rec.old_install_loc_country     := l_old_ins_header_rec.install_loc_country     ;
      l_ins_header_rec.new_install_loc_country     := l_new_ins_header_rec.install_loc_country     ;
      l_ins_header_rec.old_install_loc_state       := l_old_ins_header_rec.install_loc_state     ;
      l_ins_header_rec.new_install_loc_state       := l_new_ins_header_rec.install_loc_state     ;
      l_ins_header_rec.old_oe_agreement_name       := l_old_ins_header_rec.last_oe_agreement_name ;
      l_ins_header_rec.new_oe_agreement_name       := l_new_ins_header_rec.last_oe_agreement_name ;
      l_ins_header_rec.old_inv_locator_name        := l_old_ins_header_rec.inv_locator_name     ;
      l_ins_header_rec.new_inv_locator_name        := l_new_ins_header_rec.inv_locator_name     ;
      l_ins_header_rec.old_current_location_number := l_old_ins_header_rec.current_loc_number;
      l_ins_header_rec.new_current_location_number := l_new_ins_header_rec.current_loc_number;
      l_ins_header_rec.old_install_location_number := l_old_ins_header_rec.install_loc_number;
      l_ins_header_rec.new_install_location_number := l_new_ins_header_rec.install_loc_number;
      --start of code change for eam integration--
      l_ins_header_rec.old_network_asset_flag      := l_old_ins_header_rec.network_asset_flag ;
      l_ins_header_rec.new_network_asset_flag      := l_new_ins_header_rec.network_asset_flag ;
      l_ins_header_rec.old_maintainable_flag       := l_old_ins_header_rec.maintainable_flag ;
      l_ins_header_rec.new_maintainable_flag       := l_new_ins_header_rec.maintainable_flag ;
      l_ins_header_rec.old_pn_location_id          := l_old_ins_header_rec.pn_location_id ;
      l_ins_header_rec.new_pn_location_id          := l_new_ins_header_rec.pn_location_id ;
      l_ins_header_rec.old_asset_criticality_code  := l_old_ins_header_rec.asset_criticality_code ;
      l_ins_header_rec.new_asset_criticality_code  := l_new_ins_header_rec.asset_criticality_code ;
      l_ins_header_rec.old_category_id             := l_old_ins_header_rec.category_id ;
      l_ins_header_rec.new_category_id             := l_new_ins_header_rec.category_id ;

      --start of code for bug 4754569--
      l_ins_header_rec.old_criticality             := l_old_ins_header_rec.criticality ;
      l_ins_header_rec.new_criticality             := l_new_ins_header_rec.criticality ;
      l_ins_header_rec.old_category_name           := l_old_ins_header_rec.category_name ;
      l_ins_header_rec.new_category_name           := l_new_ins_header_rec.category_name ;
      --end of code for bug 4754569--

      l_ins_header_rec.old_maintainable                := l_old_ins_header_rec.maintainable; --for bug 5211068
      l_ins_header_rec.new_maintainable                := l_new_ins_header_rec.maintainable;

      l_ins_header_rec.old_equipment_gen_object_id := l_old_ins_header_rec.equipment_gen_object_id ;
      l_ins_header_rec.new_equipment_gen_object_id := l_new_ins_header_rec.equipment_gen_object_id ;
      l_ins_header_rec.old_instantiation_flag      := l_old_ins_header_rec.instantiation_flag ;
      l_ins_header_rec.new_instantiation_flag      := l_new_ins_header_rec.instantiation_flag ;
      l_ins_header_rec.old_linear_location_id      := l_old_ins_header_rec.linear_location_id ;
      l_ins_header_rec.new_linear_location_id      := l_new_ins_header_rec.linear_location_id ;
      l_ins_header_rec.old_operational_log_flag    := l_old_ins_header_rec.operational_log_flag ;
      l_ins_header_rec.new_operational_log_flag    := l_new_ins_header_rec.operational_log_flag ;
      l_ins_header_rec.old_checkin_status          := l_old_ins_header_rec.checkin_status;
      l_ins_header_rec.new_checkin_status          := l_new_ins_header_rec.checkin_status;
      l_ins_header_rec.old_supplier_warranty_exp_date := l_old_ins_header_rec.supplier_warranty_exp_date;
      l_ins_header_rec.new_supplier_warranty_exp_date := l_new_ins_header_rec.supplier_warranty_exp_date;
      l_ins_header_rec.old_attribute16              := l_old_ins_header_rec.attribute16 ;
      l_ins_header_rec.new_attribute16              := l_new_ins_header_rec.attribute16 ;
      l_ins_header_rec.old_attribute17              := l_old_ins_header_rec.attribute17 ;
      l_ins_header_rec.new_attribute17              := l_new_ins_header_rec.attribute17 ;
      l_ins_header_rec.old_attribute18              := l_old_ins_header_rec.attribute18 ;
      l_ins_header_rec.new_attribute18              := l_new_ins_header_rec.attribute18 ;
      l_ins_header_rec.old_attribute19              := l_old_ins_header_rec.attribute19 ;
      l_ins_header_rec.new_attribute19              := l_new_ins_header_rec.attribute19 ;
      l_ins_header_rec.old_attribute20              := l_old_ins_header_rec.attribute20 ;
      l_ins_header_rec.new_attribute20              := l_new_ins_header_rec.attribute20 ;
      l_ins_header_rec.old_attribute21              := l_old_ins_header_rec.attribute21 ;
      l_ins_header_rec.new_attribute21              := l_new_ins_header_rec.attribute21 ;
      l_ins_header_rec.old_attribute22              := l_old_ins_header_rec.attribute22 ;
      l_ins_header_rec.new_attribute22              := l_new_ins_header_rec.attribute22 ;
      l_ins_header_rec.old_attribute23              := l_old_ins_header_rec.attribute23 ;
      l_ins_header_rec.new_attribute23              := l_new_ins_header_rec.attribute23 ;
      l_ins_header_rec.old_attribute24              := l_old_ins_header_rec.attribute24 ;
      l_ins_header_rec.new_attribute24              := l_new_ins_header_rec.attribute24 ;
      l_ins_header_rec.old_attribute25              := l_old_ins_header_rec.attribute25 ;
      l_ins_header_rec.new_attribute25              := l_new_ins_header_rec.attribute25 ;
      l_ins_header_rec.old_attribute26              := l_old_ins_header_rec.attribute26 ;
      l_ins_header_rec.new_attribute26              := l_new_ins_header_rec.attribute26 ;
      l_ins_header_rec.old_attribute27              := l_old_ins_header_rec.attribute27 ;
      l_ins_header_rec.new_attribute27              := l_new_ins_header_rec.attribute27 ;
      l_ins_header_rec.old_attribute28              := l_old_ins_header_rec.attribute28 ;
      l_ins_header_rec.new_attribute28              := l_new_ins_header_rec.attribute28 ;
      l_ins_header_rec.old_attribute29              := l_old_ins_header_rec.attribute29 ;
      l_ins_header_rec.new_attribute29              := l_new_ins_header_rec.attribute29 ;
      l_ins_header_rec.old_attribute30              := l_old_ins_header_rec.attribute30 ;
      l_ins_header_rec.new_attribute30              := l_new_ins_header_rec.attribute30 ;
      --end of code change for eam integration--
-- Addition of columns for FA Integration
      l_ins_header_rec.old_payables_unit_price      := l_old_ins_header_rec.payables_unit_price;
      l_ins_header_rec.new_payables_unit_price      := l_new_ins_header_rec.payables_unit_price;
      l_ins_header_rec.old_payables_currency_code   := l_old_ins_header_rec.payables_currency_code;
      l_ins_header_rec.new_payables_currency_code   := l_new_ins_header_rec.payables_currency_code;
      l_ins_header_rec.old_purchase_unit_price      := l_old_ins_header_rec.purchase_unit_price;
      l_ins_header_rec.new_purchase_unit_price      := l_new_ins_header_rec.purchase_unit_price;
      l_ins_header_rec.old_purchase_currency_code   := l_old_ins_header_rec.purchase_currency_code;
      l_ins_header_rec.new_purchase_currency_code   := l_new_ins_header_rec.purchase_currency_code;
      l_ins_header_rec.old_sales_unit_price         := l_old_ins_header_rec.sales_unit_price;
      l_ins_header_rec.new_sales_unit_price         := l_new_ins_header_rec.sales_unit_price;
      l_ins_header_rec.old_sales_currency_code      := l_old_ins_header_rec.sales_currency_code;
      l_ins_header_rec.new_sales_currency_code      := l_new_ins_header_rec.sales_currency_code;
      l_ins_header_rec.old_operational_status_code  := l_old_ins_header_rec.operational_status_code;
      l_ins_header_rec.new_operational_status_code  := l_new_ins_header_rec.operational_status_code;

			l_ins_header_rec.old_instance_description  		:= l_old_ins_header_rec.instance_description;
			l_ins_header_rec.new_instance_description  		:= l_new_ins_header_rec.instance_description;
             -- End addition of columns for FA Integration
      i:=i+1;
      x_instance_history_tbl(i):= l_ins_header_rec;

END LOOP;

    -- End of API body

        -- Standard check of p_commit.
        /*
        IF FND_API.To_Boolean( p_commit ) THEN
                COMMIT WORK;
        END IF;
        */

    /***** srramakr commented for bug # 3304439
    -- Check for the profile option and disable the trace
        IF (fnd_profile.value('CSI_ENABLE_SQL_TRACE') = 'Y') THEN
                   dbms_session.set_sql_trace(false);
    END IF;
        -- End disable trace
    ****/

        -- Standard call to get message count and if count is  get message info.
        FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count ,
             p_data     =>      x_msg_data      );
EXCEPTION
        WHEN OTHERS THEN
                X_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                /*
                IF fnd_api.to_boolean(p_commit)
                THEN
                ROLLBACK TO get_instance_hist;
                END IF;
                */
                IF FND_MSG_PUB.Check_Msg_Level
                     (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
                THEN
                   FND_MSG_PUB.Add_Exc_Msg
                    ( G_PKG_NAME, l_api_name );
                END IF;
                FND_MSG_PUB.Count_And_Get
                (     p_encoded => FND_API.G_FALSE,
                   p_count         =>      x_msg_count,
                        p_data      =>      x_msg_data);


END get_instance_hist ;

/*---------------------------------------------------*/
/* procedure name: get_ext_attrib_val_hist           */
/* description   : Retreive history transactions     */
/*                 for extended attribute values     */
/*---------------------------------------------------*/

PROCEDURE get_ext_attrib_val_hist
( p_api_version             IN  NUMBER
 ,p_commit                  IN  VARCHAR2
 ,p_init_msg_list           IN  VARCHAR2
 ,p_validation_level        IN  NUMBER
 ,p_transaction_id          IN  NUMBER
 ,x_ext_attrib_val_hist_tbl OUT NOCOPY csi_datastructures_pub.ext_attrib_val_history_tbl
 ,x_return_status           OUT NOCOPY VARCHAR2
 ,x_msg_count               OUT NOCOPY NUMBER
 ,x_msg_data                OUT NOCOPY VARCHAR2
 )  IS
CURSOR txn_hist_csr (p_txn_id IN NUMBER) IS
   SELECT ieh.ATTRIBUTE_VALUE_HISTORY_ID     ,
          ieh.ATTRIBUTE_VALUE_ID             ,
          ieh.TRANSACTION_ID                 ,
          ieh.OLD_ATTRIBUTE_VALUE            ,
          ieh.NEW_ATTRIBUTE_VALUE            ,
          ieh.OLD_ACTIVE_START_DATE          ,
          ieh.NEW_ACTIVE_START_DATE          ,
          ieh.OLD_ACTIVE_END_DATE            ,
          ieh.NEW_ACTIVE_END_DATE            ,
          ieh.OLD_CONTEXT                    ,
          ieh.NEW_CONTEXT                    ,
          ieh.OLD_ATTRIBUTE1                 ,
          ieh.NEW_ATTRIBUTE1                 ,
          ieh.OLD_ATTRIBUTE2                 ,
          ieh.NEW_ATTRIBUTE2                 ,
          ieh.OLD_ATTRIBUTE3                 ,
          ieh.NEW_ATTRIBUTE3                 ,
          ieh.OLD_ATTRIBUTE4                 ,
          ieh.NEW_ATTRIBUTE4                 ,
          ieh.OLD_ATTRIBUTE5                 ,
          ieh.NEW_ATTRIBUTE5                 ,
          ieh.OLD_ATTRIBUTE6                 ,
          ieh.NEW_ATTRIBUTE6                 ,
          ieh.OLD_ATTRIBUTE7                 ,
          ieh.NEW_ATTRIBUTE7                 ,
          ieh.OLD_ATTRIBUTE8                 ,
          ieh.NEW_ATTRIBUTE8                 ,
          ieh.OLD_ATTRIBUTE9                 ,
          ieh.NEW_ATTRIBUTE9                 ,
          ieh.OLD_ATTRIBUTE10                ,
          ieh.NEW_ATTRIBUTE10                ,
          ieh.OLD_ATTRIBUTE11                ,
          ieh.NEW_ATTRIBUTE11                ,
          ieh.OLD_ATTRIBUTE12                ,
          ieh.NEW_ATTRIBUTE12                ,
          ieh.OLD_ATTRIBUTE13                ,
          ieh.NEW_ATTRIBUTE13                ,
          ieh.OLD_ATTRIBUTE14                ,
          ieh.NEW_ATTRIBUTE14                ,
          ieh.OLD_ATTRIBUTE15                ,
          ieh.NEW_ATTRIBUTE15                ,
          ieh.FULL_DUMP_FLAG                 ,
          ieh.OBJECT_VERSION_NUMBER          ,
          ie.INSTANCE_ID                     ,
          iea.attribute_code
   FROM   csi_iea_values_h ieh,
          csi_iea_values   ie ,
          csi_i_extended_attribs iea
   WHERE  ieh.transaction_id = p_txn_id
   AND    ieh.attribute_value_id = ie.attribute_value_id
   AND    ie.attribute_id= iea.attribute_id;

l_old_ext_header_rec  csi_datastructures_pub.extend_attrib_values_rec;
l_new_ext_header_rec  csi_datastructures_pub.extend_attrib_values_rec;
l_ext_header_rec      csi_datastructures_pub.ext_attrib_val_history_rec;
l_temp_ext_rec        csi_datastructures_pub.ext_attrib_val_history_rec;
l_api_name            CONSTANT   VARCHAR2(30)   := 'get_ext_attrib_val_hist';
l_api_version         CONSTANT   NUMBER         := 1.0;
i                     NUMBER := 0;
BEGIN
        /*
        IF fnd_api.to_boolean(p_commit)
        THEN
           SAVEPOINT    get_ext_attrib_val_hist;
        END IF;
        */

        -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (l_api_version       ,
                                            p_api_version       ,
                                            l_api_name          ,
                                            G_PKG_NAME          )
        THEN
                RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
                FND_MSG_PUB.initialize;
        END IF;

        --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

   /***** srramakr commented for bug # 3304439
   -- Check for the profile option and enable trace
   IF (fnd_profile.value('CSI_ENABLE_SQL_TRACE') = 'Y') THEN
                   dbms_session.set_sql_trace(TRUE);
   END IF;
   -- End enable trace
   ****/

   -- Start API body
   --




FOR l_hist_csr IN txn_hist_csr (p_transaction_id)
LOOP
          l_ext_header_rec := l_temp_ext_rec;
           --
          IF NVL(l_hist_csr.old_attribute_value,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute_value,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute_value := NULL;
            l_new_ext_header_rec.attribute_value := NULL;
          ELSE
            l_old_ext_header_rec.attribute_value := l_hist_csr.old_attribute_value;
            l_new_ext_header_rec.attribute_value := l_hist_csr.new_attribute_value;
          END IF;
          --
          IF NVL(l_hist_csr.old_active_start_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_active_start_date,fnd_api.g_miss_date)
          THEN
            l_old_ext_header_rec.active_start_date := NULL;
            l_new_ext_header_rec.active_start_date := NULL;
          ELSE
            l_old_ext_header_rec.active_start_date := l_hist_csr.old_active_start_date;
            l_new_ext_header_rec.active_start_date := l_hist_csr.new_active_start_date;
          END IF;
          --
          IF NVL(l_hist_csr.old_active_end_date,fnd_api.g_miss_date) = NVL(l_hist_csr.new_active_end_date,fnd_api.g_miss_date)
          THEN
            l_old_ext_header_rec.active_end_date := NULL;
            l_new_ext_header_rec.active_end_date := NULL;
          ELSE
            l_old_ext_header_rec.active_end_date := l_hist_csr.old_active_end_date;
            l_new_ext_header_rec.active_end_date := l_hist_csr.new_active_end_date;
          END IF;
          --
          IF NVL(l_hist_csr.old_context,fnd_api.g_miss_char) = NVL(l_hist_csr.new_context,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.context := NULL;
            l_new_ext_header_rec.context := NULL;
          ELSE
            l_old_ext_header_rec.context := l_hist_csr.old_context;
            l_new_ext_header_rec.context := l_hist_csr.new_context;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute1,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute1,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute1 := NULL;
            l_new_ext_header_rec.attribute1 := NULL;
          ELSE
            l_old_ext_header_rec.attribute1 := l_hist_csr.old_attribute1;
            l_new_ext_header_rec.attribute1 := l_hist_csr.new_attribute1;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute2,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute2,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute2 := NULL;
            l_new_ext_header_rec.attribute2 := NULL;
          ELSE
            l_old_ext_header_rec.attribute2 := l_hist_csr.old_attribute2;
            l_new_ext_header_rec.attribute2 := l_hist_csr.new_attribute2;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute3,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute3,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute3 := NULL;
            l_new_ext_header_rec.attribute3 := NULL;
          ELSE
            l_old_ext_header_rec.attribute3 := l_hist_csr.old_attribute3;
            l_new_ext_header_rec.attribute3 := l_hist_csr.new_attribute3;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute4,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute4,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute4 := NULL;
            l_new_ext_header_rec.attribute4 := NULL;
          ELSE
            l_old_ext_header_rec.attribute4 := l_hist_csr.old_attribute4;
            l_new_ext_header_rec.attribute4 := l_hist_csr.new_attribute4;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute5,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute5,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute5 := NULL;
            l_new_ext_header_rec.attribute5 := NULL;
          ELSE
            l_old_ext_header_rec.attribute5 := l_hist_csr.old_attribute5;
            l_new_ext_header_rec.attribute5 := l_hist_csr.new_attribute5;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute6,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute6,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute6 := NULL;
            l_new_ext_header_rec.attribute6 := NULL;
          ELSE
            l_old_ext_header_rec.attribute6 := l_hist_csr.old_attribute6;
            l_new_ext_header_rec.attribute6 := l_hist_csr.new_attribute6;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute7,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute7,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute7 := NULL;
            l_new_ext_header_rec.attribute7 := NULL;
          ELSE
            l_old_ext_header_rec.attribute7 := l_hist_csr.old_attribute7;
            l_new_ext_header_rec.attribute7 := l_hist_csr.new_attribute7;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute8,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute8,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute8 := NULL;
            l_new_ext_header_rec.attribute8 := NULL;
          ELSE
            l_old_ext_header_rec.attribute8 := l_hist_csr.old_attribute8;
            l_new_ext_header_rec.attribute8 := l_hist_csr.new_attribute8;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute9,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute9,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute9 := NULL;
            l_new_ext_header_rec.attribute9 := NULL;
          ELSE
            l_old_ext_header_rec.attribute9 := l_hist_csr.old_attribute9;
            l_new_ext_header_rec.attribute9 := l_hist_csr.new_attribute9;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute10,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute10,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute10 := NULL;
            l_new_ext_header_rec.attribute10 := NULL;
          ELSE
            l_old_ext_header_rec.attribute10 := l_hist_csr.old_attribute10;
            l_new_ext_header_rec.attribute10 := l_hist_csr.new_attribute10;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute11,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute11,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute11 := NULL;
            l_new_ext_header_rec.attribute11 := NULL;
          ELSE
            l_old_ext_header_rec.attribute11 := l_hist_csr.old_attribute11;
            l_new_ext_header_rec.attribute11 := l_hist_csr.new_attribute11;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute12,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute12,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute12 := NULL;
            l_new_ext_header_rec.attribute12 := NULL;
          ELSE
            l_old_ext_header_rec.attribute12 := l_hist_csr.old_attribute12;
            l_new_ext_header_rec.attribute12 := l_hist_csr.new_attribute12;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute13,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute13,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute13 := NULL;
            l_new_ext_header_rec.attribute13 := NULL;
          ELSE
            l_old_ext_header_rec.attribute13 := l_hist_csr.old_attribute13;
            l_new_ext_header_rec.attribute13 := l_hist_csr.new_attribute13;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute14,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute14,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute14 := NULL;
            l_new_ext_header_rec.attribute14 := NULL;
          ELSE
            l_old_ext_header_rec.attribute14 := l_hist_csr.old_attribute14;
            l_new_ext_header_rec.attribute14 := l_hist_csr.new_attribute14;
          END IF;
          --
          IF NVL(l_hist_csr.old_attribute15,fnd_api.g_miss_char) = NVL(l_hist_csr.new_attribute15,fnd_api.g_miss_char)
          THEN
            l_old_ext_header_rec.attribute15 := NULL;
            l_new_ext_header_rec.attribute15 := NULL;
          ELSE
            l_old_ext_header_rec.attribute15 := l_hist_csr.old_attribute15;
            l_new_ext_header_rec.attribute15 := l_hist_csr.new_attribute15;
          END IF;
          --
          l_ext_header_rec.attribute_value_id     := l_hist_csr.attribute_value_id ;
          l_ext_header_rec.transaction_id         := p_transaction_id;
          l_ext_header_rec.old_attribute_value    := l_old_ext_header_rec.attribute_value ;
          l_ext_header_rec.new_attribute_value    := l_new_ext_header_rec.attribute_value ;
          l_ext_header_rec.old_active_start_date  := l_old_ext_header_rec.active_start_date ;
          l_ext_header_rec.new_active_start_date  := l_new_ext_header_rec.active_start_date ;
          l_ext_header_rec.old_active_end_date    := l_old_ext_header_rec.active_end_date ;
          l_ext_header_rec.new_active_end_date    := l_new_ext_header_rec.active_end_date ;
          l_ext_header_rec.old_context            := l_old_ext_header_rec.context ;
          l_ext_header_rec.new_context            := l_new_ext_header_rec.context ;
          l_ext_header_rec.old_attribute1         := l_old_ext_header_rec.attribute1 ;
          l_ext_header_rec.new_attribute1         := l_new_ext_header_rec.attribute1 ;
          l_ext_header_rec.old_attribute2         := l_old_ext_header_rec.attribute2 ;
          l_ext_header_rec.new_attribute2         := l_new_ext_header_rec.attribute2 ;
          l_ext_header_rec.old_attribute3         := l_old_ext_header_rec.attribute3 ;
          l_ext_header_rec.new_attribute3         := l_new_ext_header_rec.attribute3 ;
          l_ext_header_rec.old_attribute4         := l_old_ext_header_rec.attribute4 ;
          l_ext_header_rec.new_attribute4         := l_new_ext_header_rec.attribute4 ;
          l_ext_header_rec.old_attribute5         := l_old_ext_header_rec.attribute5 ;
          l_ext_header_rec.new_attribute5         := l_new_ext_header_rec.attribute5 ;
          l_ext_header_rec.old_attribute6         := l_old_ext_header_rec.attribute6 ;
          l_ext_header_rec.new_attribute6         := l_new_ext_header_rec.attribute6 ;
          l_ext_header_rec.old_attribute7         := l_old_ext_header_rec.attribute7 ;
          l_ext_header_rec.new_attribute7         := l_new_ext_header_rec.attribute7 ;
          l_ext_header_rec.old_attribute8         := l_old_ext_header_rec.attribute8 ;
          l_ext_header_rec.new_attribute8         := l_new_ext_header_rec.attribute8 ;
          l_ext_header_rec.old_attribute9         := l_old_ext_header_rec.attribute9 ;
          l_ext_header_rec.new_attribute9         := l_new_ext_header_rec.attribute9 ;
          l_ext_header_rec.old_attribute10        := l_old_ext_header_rec.attribute10 ;
          l_ext_header_rec.new_attribute10        := l_new_ext_header_rec.attribute10 ;
          l_ext_header_rec.old_attribute11        := l_old_ext_header_rec.attribute11 ;
          l_ext_header_rec.new_attribute11        := l_new_ext_header_rec.attribute11 ;
          l_ext_header_rec.old_attribute12        := l_old_ext_header_rec.attribute12 ;
          l_ext_header_rec.new_attribute12        := l_new_ext_header_rec.attribute12 ;
          l_ext_header_rec.old_attribute13        := l_old_ext_header_rec.attribute13 ;
          l_ext_header_rec.new_attribute13        := l_new_ext_header_rec.attribute13 ;
          l_ext_header_rec.old_attribute14        := l_old_ext_header_rec.attribute14 ;
          l_ext_header_rec.new_attribute14        := l_new_ext_header_rec.attribute14 ;
          l_ext_header_rec.old_attribute15        := l_old_ext_header_rec.attribute15 ;
          l_ext_header_rec.new_attribute15        := l_new_ext_header_rec.attribute15 ;
          l_ext_header_rec.attribute_code         := l_hist_csr.attribute_code ;

          i:=i+1;

          x_ext_attrib_val_hist_tbl(i):= l_ext_header_rec;
          x_ext_attrib_val_hist_tbl(i).instance_id := l_hist_csr.instance_id;

END LOOP;

    -- End of API body

        -- Standard check of p_commit.
        /*
        IF FND_API.To_Boolean( p_commit ) THEN
                COMMIT WORK;
        END IF;
        */

    /***** srramakr commented for bug # 3304439
    -- Check for the profile option and disable the trace
        IF (fnd_profile.value('CSI_ENABLE_SQL_TRACE') = 'Y') THEN
                   dbms_session.set_sql_trace(false);
    END IF;
        -- End disable trace
    ****/

        -- Standard call to get message count and if count is  get message info.
        FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count ,
                 p_data         =>      x_msg_data      );
EXCEPTION
        WHEN OTHERS THEN
                X_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                /*
                IF fnd_api.to_boolean(p_commit)
                THEN
                ROLLBACK TO get_ext_attrib_val_hist;
                END IF;
                */
                IF FND_MSG_PUB.Check_Msg_Level
                     (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
                THEN
                   FND_MSG_PUB.Add_Exc_Msg
                    ( G_PKG_NAME, l_api_name );
                END IF;
                FND_MSG_PUB.Count_And_Get
                (       p_encoded => FND_API.G_FALSE,
                 p_count         =>      x_msg_count,
                        p_data      =>      x_msg_data);


END get_ext_attrib_val_hist ;


/*------------------------------------------------------*/
/* procedure name: copy_item_instance                   */
/* description :  Copies an instace from an instance.   */
/*                It has the configuration parameter    */
/*------------------------------------------------------*/


PROCEDURE copy_item_instance
 ( p_api_version            IN         NUMBER
  ,p_commit                 IN         VARCHAR2
  ,p_init_msg_list          IN         VARCHAR2
  ,p_validation_level       IN         NUMBER
  ,p_source_instance_rec    IN         csi_datastructures_pub.instance_rec
  ,p_copy_ext_attribs       IN         VARCHAR2
  ,p_copy_org_assignments   IN         VARCHAR2
  ,p_copy_parties           IN         VARCHAR2
  ,p_copy_contacts          IN         VARCHAR2
  ,p_copy_accounts          IN         VARCHAR2
  ,p_copy_asset_assignments IN         VARCHAR2
  ,p_copy_pricing_attribs   IN         VARCHAR2
  ,p_copy_inst_children     IN         VARCHAR2
  ,p_call_from_split        IN         VARCHAR2  -- Added
  ,p_txn_rec                IN  OUT    NOCOPY csi_datastructures_pub.transaction_rec
  ,x_new_instance_tbl           OUT    NOCOPY csi_datastructures_pub.instance_tbl
  ,x_return_status              OUT    NOCOPY VARCHAR2
  ,x_msg_count                  OUT    NOCOPY NUMBER
  ,x_msg_data                   OUT    NOCOPY VARCHAR2
 )

 IS

    l_api_name                   CONSTANT   VARCHAR2(30) := 'copy_item_instance';
    l_api_version                CONSTANT   NUMBER      := 1.0;
    l_debug_level                           NUMBER;
    l_msg_index                             NUMBER;
    l_msg_count                             NUMBER;
    x_msg_index_out                         NUMBER;
    j                                       NUMBER := 1;
    l_curr_instance_rec                     csi_datastructures_pub.instance_rec;
    l_new_instance_rec                      csi_datastructures_pub.instance_rec;
    l_source_child_instance_rec             csi_datastructures_pub.instance_rec;
    l_asset_tbl                             csi_datastructures_pub.instance_asset_tbl;
    l_asset_header_tbl                      csi_datastructures_pub.instance_asset_header_tbl;--rk
    l_ext_attrib_tbl                        csi_datastructures_pub.extend_attrib_values_tbl;
    l_ext_attrib_def_tbl                    csi_datastructures_pub.extend_attrib_tbl;
    l_ext_attribs_query_rec                 csi_datastructures_pub.extend_attrib_query_rec;
    l_ou_query_rec                          csi_datastructures_pub.organization_unit_query_rec;
    l_org_unit_tbl                          csi_datastructures_pub.organization_units_tbl;
    l_org_unit_header_tbl                   csi_datastructures_pub.org_units_header_tbl;--rk
    l_pricing_attribs_query_rec             csi_datastructures_pub.pricing_attribs_query_rec;
    l_pricing_attribs_tbl                   csi_datastructures_pub.pricing_attribs_tbl;
    l_account_header_tbl                    csi_datastructures_pub.party_account_header_tbl;
    l_instance_asset_query_rec              csi_datastructures_pub.instance_asset_query_rec;
    l_instance_asset_rec                    csi_datastructures_pub.instance_asset_rec;
    l_party_query_rec                       csi_datastructures_pub.party_query_rec;
    l_party_tbl                             csi_datastructures_pub.party_tbl;
    l_original_party_tbl                    csi_datastructures_pub.party_tbl;
    l_party_input_tbl                       csi_datastructures_pub.party_tbl;
    l_new_party_tbl                         csi_datastructures_pub.party_tbl;
    l_contact_tbl                           csi_datastructures_pub.party_tbl;
    l_contact_input_tbl                     csi_datastructures_pub.party_tbl;
    l_contact_found_flag                    BOOLEAN := FALSE;
    l_new_contact_tbl                       csi_datastructures_pub.party_tbl;
    l_party_header_tbl                      csi_datastructures_pub.party_header_tbl;
    l_party_account_query_rec               csi_datastructures_pub.party_account_query_rec;
    l_contact_account_query_rec             csi_datastructures_pub.party_account_query_rec;
    l_party_account_tbl                     csi_datastructures_pub.party_account_tbl;
    l_contact_account_tbl                   csi_datastructures_pub.party_account_tbl;
    l_temp_party_account_tbl                csi_datastructures_pub.party_account_tbl;
    l_ii_relationship_rec                   csi_datastructures_pub.ii_relationship_rec;
    l_ii_relationship_tbl                   csi_datastructures_pub.ii_relationship_tbl;
    l_new_ii_relationship_tbl               csi_datastructures_pub.ii_relationship_tbl;
    l_new_instance_tbl                      csi_datastructures_pub.instance_tbl;
    l_new_child_instance_tbl                csi_datastructures_pub.instance_tbl;
    l_parent_object_found_flag              VARCHAR2(1);
    l_attribute_level                       VARCHAR2(30);
    l_temp_acct_hdr_tbl                     csi_datastructures_pub.party_account_header_tbl;
    l_pty_acct_hdr_tbl                      csi_datastructures_pub.party_account_header_tbl;
    k                                       NUMBER;
    l_vld_org_id                            NUMBER;
    l_internal_party_id                     NUMBER;
    l_party_id                              NUMBER;
    l_item_attribute_tbl                    csi_item_instance_pvt.item_attribute_tbl;
    l_location_tbl                          csi_item_instance_pvt.location_tbl;
    l_generic_id_tbl                        csi_item_instance_pvt.generic_id_tbl;
    l_lookup_tbl                            csi_item_instance_pvt.lookup_tbl;
    l_ins_count_rec                         csi_item_instance_pvt.ins_count_rec;
    l_map_count                             NUMBER := 0;
    l_rel_count                             NUMBER := 0;
    l_map_inst_tbl                          csi_item_instance_pvt.map_inst_tbl;
    l_par_vld_organization_id               NUMBER;
    l_asset_lookup_tbl                      csi_asset_pvt.lookup_tbl;
    l_asset_count_rec                       csi_asset_pvt.asset_count_rec;
    l_asset_id_tbl                          csi_asset_pvt.asset_id_tbl;
    l_asset_loc_tbl                         csi_asset_pvt.asset_loc_tbl;
    l_version_label                         VARCHAR2(30);
    l_version_label_rec                     csi_datastructures_pub.version_label_rec;
    p_rel_query_rec                         csi_datastructures_pub.relationship_query_rec;
    l_rel_tbl                               csi_datastructures_pub.ii_relationship_tbl;
    l_ii_relationship_level_tbl             csi_ii_relationships_pvt.ii_relationship_level_tbl;
    l_obj_id   NUMBER;
    --
    px_oks_txn_inst_tbl                     oks_ibint_pub.txn_instance_tbl;
    l_batch_type                            VARCHAR2(50);
    l_batch_id                              NUMBER;
    --
    -- Begin Add Code for Siebel Genesis Project
    l_raise_bes_event                       VARCHAR2(1) := nvl(fnd_profile.value('CSI_RAISE_BES_CUST_OWNED_INSTANCES'),'N');
    l_link_to_line_id                       NUMBER;
    l_item_type_code                        VARCHAR2(30);
    l_owner_party_id                        NUMBER;
    -- End Add Code for Siebel Genesis Project
BEGIN

    -- Standard Start of API savepoint
      SAVEPOINT      copy_item_instance;

    -- Standard call to check for call compatibility.
      IF NOT FND_API.Compatible_API_Call (l_api_version,
                                          p_api_version,
                                          l_api_name ,
                                          G_PKG_NAME)
      THEN
            RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      END IF;

   -- Initialize message list if p_init_msg_list is set to TRUE.
      IF FND_API.to_Boolean( p_init_msg_list ) THEN
            FND_MSG_PUB.initialize;
      END IF;

   --  Initialize API return status to success
          x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Check the profile option debug_level for debug message reporting
          l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
   IF (l_debug_level > 0) THEN
       csi_gen_utility_pvt.put_line('copy_item_instance ');
   END IF;



    -- If the debug level = 2 then dump all the parameters values.
    IF (l_debug_level > 1) THEN

         csi_gen_utility_pvt.put_line('copy_item_instance '||
                              p_api_version ||'-'
                           || p_commit ||'-'
                           || p_init_msg_list ||'-'
                           || p_validation_level ||'-'
                           || p_copy_ext_attribs ||'-'
                           || p_copy_org_assignments ||'-'
                           || p_copy_parties  ||'-'
                           || p_copy_contacts  ||'-'
                           || p_copy_accounts  ||'-'
                           || p_copy_asset_assignments ||'-'
                           || p_copy_pricing_attribs ||'-'
                           || p_copy_inst_children
                            );
     -- Dump item instanc red
         csi_gen_utility_pvt.dump_instance_rec(p_source_instance_rec);
     -- Dump txn_rec
         csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
    END IF;

    -- Start API body

    -- Get the last_vld_organization_id for the instance_id passed
    BEGIN
       SELECT last_vld_organization_id
       INTO   l_par_vld_organization_id
       FROM   csi_item_instances
       WHERE  instance_id = p_source_instance_rec.instance_id;
    EXCEPTION
      WHEN OTHERS THEN
         NULL;
    END;

    -- Added by sguthiva for bug 2186683
    IF p_source_instance_rec.vld_organization_id IS NULL OR
       p_source_instance_rec.vld_organization_id = fnd_api.g_miss_num
    THEN
       l_vld_org_id := l_par_vld_organization_id;
    END IF;
    -- End addition by sguthiva for bug 2186683


     IF (p_source_instance_rec.instance_id IS NULL) OR
         (p_source_instance_rec.instance_id = FND_API.G_MISS_NUM) THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_API_INSTANCE_ID_NULL');
                 FND_MSG_PUB.Add;
             RAISE FND_API.G_EXC_ERROR;
     ELSIF NOT (csi_Item_Instance_Vld_pvt.Val_and_get_inst_rec(
                  p_source_instance_rec.instance_id ,
                  l_curr_instance_rec )) THEN
               RAISE FND_API.G_EXC_ERROR;
     END IF;


    -- Check if the user has not passed incorrect options for contacts
     IF ((p_copy_parties  = fnd_api.g_false)
        AND (p_copy_contacts  = fnd_api.g_true)) THEN
          FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_PTY_CONTACT_OPT');
          FND_MSG_PUB.Add;
          RAISE FND_API.G_EXC_ERROR;
     END IF;


     -- If the user has passed p_copy_parties as false get only the owner, else get all the parties
     IF (p_copy_parties  = fnd_api.g_true) THEN
          l_party_query_rec.instance_party_id         := FND_API.G_MISS_NUM;
          l_party_query_rec.instance_id               := l_curr_instance_rec.instance_id;
          l_party_query_rec.party_id                  := FND_API.G_MISS_NUM;
          l_party_query_rec.relationship_type_code    := FND_API.G_MISS_CHAR;

         csi_party_relationships_pub.get_inst_party_relationships
                    ( p_api_version                 => p_api_version
                     ,p_commit                      => p_commit
                     ,p_init_msg_list               => p_init_msg_list
                     ,p_validation_level            => p_validation_level
                     ,p_party_query_rec             => l_party_query_rec
                     ,p_resolve_id_columns          => fnd_api.g_true
                     ,p_time_stamp                  =>  NULL
                     ,x_party_header_tbl            => l_party_header_tbl
                     ,x_return_status               => x_return_status
                     ,x_msg_count                   => x_msg_count
                     ,x_msg_data                    => x_msg_data
                     );



                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );
                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                END IF;

     ELSE
          l_party_query_rec.instance_party_id         := FND_API.G_MISS_NUM;
          l_party_query_rec.instance_id               := l_curr_instance_rec.instance_id;
          l_party_query_rec.party_id                  := FND_API.G_MISS_NUM;
          l_party_query_rec.relationship_type_code    := 'OWNER';

         csi_party_relationships_pub.get_inst_party_relationships
                    ( p_api_version                 => p_api_version
                     ,p_commit                      => p_commit
                     ,p_init_msg_list               => p_init_msg_list
                     ,p_validation_level            => p_validation_level
                     ,p_party_query_rec             => l_party_query_rec
                     ,p_resolve_id_columns          => fnd_api.g_true
                     ,p_time_stamp                  => NULL
                     ,x_party_header_tbl            => l_party_header_tbl
                     ,x_return_status               => x_return_status
                     ,x_msg_count                   => x_msg_count
                     ,x_msg_data                    => x_msg_data
                     );

                 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );
                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                END IF;
    END IF;

--   This is mean to initialize the l_party_table in order to create an instance.
    IF l_party_header_tbl.COUNT > 0 THEN    /*****First change here 07/27/01 - RK***/
                FOR tab_row_party IN l_party_header_tbl.FIRST .. l_party_header_tbl.LAST
                LOOP
                     IF l_party_header_tbl.EXISTS(tab_row_party) THEN
                        IF  l_party_header_tbl(tab_row_party).contact_flag = 'Y' THEN
                           -- build the contacts table
                             l_contact_tbl(tab_row_party).instance_party_id := l_party_header_tbl(tab_row_party).instance_party_id;
                             l_contact_tbl(tab_row_party).instance_id := l_party_header_tbl(tab_row_party).instance_id;
                             l_contact_tbl(tab_row_party).party_id := l_party_header_tbl(tab_row_party).party_id;
                             l_contact_tbl(tab_row_party).party_source_table := l_party_header_tbl(tab_row_party).party_source_table;
                             l_contact_tbl(tab_row_party).relationship_type_code := l_party_header_tbl(tab_row_party).relationship_type_code;
                             l_contact_tbl(tab_row_party).contact_flag := l_party_header_tbl(tab_row_party).contact_flag;
                             l_contact_tbl(tab_row_party).contact_ip_id := l_party_header_tbl(tab_row_party).contact_ip_id;
                             l_contact_tbl(tab_row_party).active_start_date := l_party_header_tbl(tab_row_party).active_start_date;
                             l_contact_tbl(tab_row_party).active_end_date := l_party_header_tbl(tab_row_party).active_end_date;
                             l_contact_tbl(tab_row_party).context := l_party_header_tbl(tab_row_party).context;
                             l_contact_tbl(tab_row_party).attribute1 := l_party_header_tbl(tab_row_party).attribute1;
                             l_contact_tbl(tab_row_party).attribute2 := l_party_header_tbl(tab_row_party).attribute2;
                             l_contact_tbl(tab_row_party).attribute3 := l_party_header_tbl(tab_row_party).attribute3;
                             l_contact_tbl(tab_row_party).attribute4 := l_party_header_tbl(tab_row_party).attribute4;
                             l_contact_tbl(tab_row_party).attribute5 := l_party_header_tbl(tab_row_party).attribute5;
                             l_contact_tbl(tab_row_party).attribute6 := l_party_header_tbl(tab_row_party).attribute6;
                             l_contact_tbl(tab_row_party).attribute7 := l_party_header_tbl(tab_row_party).attribute7;
                             l_contact_tbl(tab_row_party).attribute8 := l_party_header_tbl(tab_row_party).attribute8;
                             l_contact_tbl(tab_row_party).attribute9 := l_party_header_tbl(tab_row_party).attribute9;
                             l_contact_tbl(tab_row_party).attribute10 := l_party_header_tbl(tab_row_party).attribute10;
                             l_contact_tbl(tab_row_party).attribute11 := l_party_header_tbl(tab_row_party).attribute11;
                             l_contact_tbl(tab_row_party).attribute12 := l_party_header_tbl(tab_row_party).attribute12;
                             l_contact_tbl(tab_row_party).attribute13 := l_party_header_tbl(tab_row_party).attribute13;
                             l_contact_tbl(tab_row_party).attribute14 := l_party_header_tbl(tab_row_party).attribute14;
                             l_contact_tbl(tab_row_party).attribute15 := l_party_header_tbl(tab_row_party).attribute15;
                             l_contact_tbl(tab_row_party).object_version_number := l_party_header_tbl(tab_row_party).object_version_number;
  --Start fo Addition for the Bugfix 2354589.
                             l_contact_tbl(tab_row_party).preferred_flag := l_party_header_tbl(tab_row_party).preferred_flag;
                             l_contact_tbl(tab_row_party).primary_flag := l_party_header_tbl(tab_row_party).primary_flag;
  --End of Addition for the Bugfix 2354589.
                        ELSE -- Build the parties table
                             l_party_tbl(tab_row_party).instance_party_id := l_party_header_tbl(tab_row_party).instance_party_id;
                             l_party_tbl(tab_row_party).instance_id := l_party_header_tbl(tab_row_party).instance_id;
                             l_party_tbl(tab_row_party).party_id := l_party_header_tbl(tab_row_party).party_id;
                             l_party_tbl(tab_row_party).party_source_table := l_party_header_tbl(tab_row_party).party_source_table;
                             l_party_tbl(tab_row_party).relationship_type_code := l_party_header_tbl(tab_row_party).relationship_type_code;
                             l_party_tbl(tab_row_party).contact_flag := l_party_header_tbl(tab_row_party).contact_flag;
                             l_party_tbl(tab_row_party).contact_ip_id := l_party_header_tbl(tab_row_party).contact_ip_id;
                             l_party_tbl(tab_row_party).active_start_date := l_party_header_tbl(tab_row_party).active_start_date;
                             l_party_tbl(tab_row_party).active_end_date := l_party_header_tbl(tab_row_party).active_end_date;
                             l_party_tbl(tab_row_party).context := l_party_header_tbl(tab_row_party).context;
                             l_party_tbl(tab_row_party).attribute1 := l_party_header_tbl(tab_row_party).attribute1;
                             l_party_tbl(tab_row_party).attribute2 := l_party_header_tbl(tab_row_party).attribute2;
                             l_party_tbl(tab_row_party).attribute3 := l_party_header_tbl(tab_row_party).attribute3;
                             l_party_tbl(tab_row_party).attribute4 := l_party_header_tbl(tab_row_party).attribute4;
                             l_party_tbl(tab_row_party).attribute5 := l_party_header_tbl(tab_row_party).attribute5;
                             l_party_tbl(tab_row_party).attribute6 := l_party_header_tbl(tab_row_party).attribute6;
                             l_party_tbl(tab_row_party).attribute7 := l_party_header_tbl(tab_row_party).attribute7;
                             l_party_tbl(tab_row_party).attribute8 := l_party_header_tbl(tab_row_party).attribute8;
                             l_party_tbl(tab_row_party).attribute9 := l_party_header_tbl(tab_row_party).attribute9;
                             l_party_tbl(tab_row_party).attribute10 := l_party_header_tbl(tab_row_party).attribute10;
                             l_party_tbl(tab_row_party).attribute11 := l_party_header_tbl(tab_row_party).attribute11;
                             l_party_tbl(tab_row_party).attribute12 := l_party_header_tbl(tab_row_party).attribute12;
                             l_party_tbl(tab_row_party).attribute13 := l_party_header_tbl(tab_row_party).attribute13;
                             l_party_tbl(tab_row_party).attribute14 := l_party_header_tbl(tab_row_party).attribute14;
                             l_party_tbl(tab_row_party).attribute15 := l_party_header_tbl(tab_row_party).attribute15;
                             l_party_tbl(tab_row_party).object_version_number := l_party_header_tbl(tab_row_party).object_version_number;
  --Start fo Addition for the Bugfix 2354589.
                             l_party_tbl(tab_row_party).preferred_flag := l_party_header_tbl(tab_row_party).preferred_flag;
                             l_party_tbl(tab_row_party).primary_flag := l_party_header_tbl(tab_row_party).primary_flag;
  --End of Addition for the Bugfix 2354589.
                         END IF;
                     END IF;
                END LOOP;
   END IF; --l_party_header_tbl.COUNT > 0
  l_original_party_tbl := l_party_tbl;
   -- Empty the party table
   l_party_header_tbl.DELETE;
    -- Create asset assignments if requested. Asset_assignment_tbl has alredy been fetched
    IF  (p_copy_asset_assignments  = fnd_api.g_true) THEN
          l_instance_asset_query_rec.instance_asset_id  := FND_API.G_MISS_NUM;
          l_instance_asset_query_rec.instance_id  := l_curr_instance_rec.instance_id;
          l_instance_asset_query_rec.fa_asset_id   := FND_API.G_MISS_NUM;
          l_instance_asset_query_rec.fa_book_type_code := FND_API.G_MISS_CHAR;
          l_instance_asset_query_rec.fa_location_id := FND_API.G_MISS_NUM;
          l_instance_asset_query_rec.update_status := FND_API.G_MISS_CHAR;
           csi_asset_pvt.get_instance_assets
            ( p_api_version                 => p_api_version
             ,p_commit                      => p_commit
             ,p_init_msg_list               => p_init_msg_list
             ,p_validation_level            => p_validation_level
             ,p_instance_asset_query_rec    => l_instance_asset_query_rec
             ,p_resolve_id_columns          => fnd_api.g_true
             ,p_time_stamp                  => NULL
             ,x_instance_asset_tbl          => l_asset_header_tbl
             ,x_return_status               => x_return_status
             ,x_msg_count                   => x_msg_count
             ,x_msg_data                    => x_msg_data
             );
                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );
                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                END IF;
    END IF;
    IF l_asset_header_tbl.COUNT > 0 THEN    /*****First change here 08/25/01 - RK***/
                FOR tab_row_party IN l_asset_header_tbl.FIRST .. l_asset_header_tbl.LAST
                LOOP
                     IF l_asset_header_tbl.EXISTS(tab_row_party) THEN
                             l_asset_tbl(tab_row_party).instance_asset_id := l_asset_header_tbl(tab_row_party).instance_asset_id;
                             l_asset_tbl(tab_row_party).instance_id := l_asset_header_tbl(tab_row_party).instance_id;
                             l_asset_tbl(tab_row_party).fa_asset_id := l_asset_header_tbl(tab_row_party).fa_asset_id;
                             l_asset_tbl(tab_row_party).fa_book_type_code := l_asset_header_tbl(tab_row_party).fa_book_type_code;
                             l_asset_tbl(tab_row_party).fa_location_id := l_asset_header_tbl(tab_row_party).fa_location_id;
                             l_asset_tbl(tab_row_party).asset_quantity := l_asset_header_tbl(tab_row_party).asset_quantity;
                             l_asset_tbl(tab_row_party).update_status := l_asset_header_tbl(tab_row_party).update_status;
                             l_asset_tbl(tab_row_party).active_start_date := l_asset_header_tbl(tab_row_party).active_start_date;
                             l_asset_tbl(tab_row_party).active_end_date := l_asset_header_tbl(tab_row_party).active_end_date;
                             l_asset_tbl(tab_row_party).object_version_number := l_asset_header_tbl(tab_row_party).object_version_number;
                     END IF;
                END LOOP;
   END IF; --l_asset_header_tbl.COUNT > 0

   -- Set the non-copiable attributes as follows

       l_new_instance_rec.CREATION_COMPLETE_FLAG := p_source_instance_rec.CREATION_COMPLETE_FLAG;
       l_new_instance_rec.COMPLETENESS_FLAG := p_source_instance_rec.COMPLETENESS_FLAG;

    IF  (p_source_instance_rec.EXTERNAL_REFERENCE = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.EXTERNAL_REFERENCE := l_curr_instance_rec.EXTERNAL_REFERENCE;
    ELSE
          l_new_instance_rec.EXTERNAL_REFERENCE := p_source_instance_rec.EXTERNAL_REFERENCE;
    END IF;
    IF ((p_source_instance_rec.INVENTORY_ITEM_ID = FND_API.G_MISS_NUM)
      OR (p_source_instance_rec.INVENTORY_ITEM_ID IS NULL)) THEN
          l_new_instance_rec.INVENTORY_ITEM_ID := l_curr_instance_rec.INVENTORY_ITEM_ID;
    ELSE
          l_new_instance_rec.INVENTORY_ITEM_ID := p_source_instance_rec.INVENTORY_ITEM_ID;
    END IF;

     -- srramakr commented for bug # 2558156
     -- Uncommented for bug 2985165
     IF p_call_from_split=fnd_api.g_true
     THEN
         IF  (p_source_instance_rec.INVENTORY_REVISION = FND_API.G_MISS_CHAR) THEN
              l_new_instance_rec.INVENTORY_REVISION := l_curr_instance_rec.INVENTORY_REVISION;
         ELSE
              l_new_instance_rec.INVENTORY_REVISION := p_source_instance_rec.INVENTORY_REVISION;
         END IF;
     ELSE
     -- Uncommented for bug 2985165
     -- srramakr Bug # 2558156 Revision should not be copied
         IF p_source_instance_rec.INVENTORY_REVISION <> FND_API.G_MISS_CHAR THEN
            l_new_instance_rec.INVENTORY_REVISION := p_source_instance_rec.INVENTORY_REVISION;
         END IF;
     END IF;
     --
     IF ((p_source_instance_rec.INV_MASTER_ORGANIZATION_ID = FND_API.G_MISS_NUM)
      OR (p_source_instance_rec.INV_MASTER_ORGANIZATION_ID IS NULL)) THEN
          l_new_instance_rec.INV_MASTER_ORGANIZATION_ID := l_curr_instance_rec.INV_MASTER_ORGANIZATION_ID;
     ELSE
          l_new_instance_rec.INV_MASTER_ORGANIZATION_ID := p_source_instance_rec.INV_MASTER_ORGANIZATION_ID ;
     END IF;
     IF  (p_source_instance_rec.SERIAL_NUMBER <> FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.SERIAL_NUMBER := p_source_instance_rec.SERIAL_NUMBER;
     END IF;
     IF ((p_source_instance_rec.MFG_SERIAL_NUMBER_FLAG = FND_API.G_MISS_CHAR)
      OR (p_source_instance_rec.MFG_SERIAL_NUMBER_FLAG IS NULL)) THEN
          l_new_instance_rec.MFG_SERIAL_NUMBER_FLAG := l_curr_instance_rec.MFG_SERIAL_NUMBER_FLAG;
     ELSE
          l_new_instance_rec.MFG_SERIAL_NUMBER_FLAG := p_source_instance_rec.MFG_SERIAL_NUMBER_FLAG ;
     END IF;
     IF  (p_source_instance_rec.LOT_NUMBER = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.LOT_NUMBER := l_curr_instance_rec.LOT_NUMBER;
     ELSE
          l_new_instance_rec.LOT_NUMBER := p_source_instance_rec.LOT_NUMBER;
     END IF;
     IF ((p_source_instance_rec.QUANTITY = FND_API.G_MISS_NUM)
      OR (p_source_instance_rec.QUANTITY IS NULL)) THEN
          l_new_instance_rec.QUANTITY := l_curr_instance_rec.QUANTITY;
     ELSE
          l_new_instance_rec.QUANTITY := p_source_instance_rec.QUANTITY ;
     END IF;
     IF ((p_source_instance_rec.UNIT_OF_MEASURE = FND_API.G_MISS_CHAR)
      OR (p_source_instance_rec.UNIT_OF_MEASURE IS NULL)) THEN
          l_new_instance_rec.UNIT_OF_MEASURE := l_curr_instance_rec.UNIT_OF_MEASURE;
     ELSE
          l_new_instance_rec.UNIT_OF_MEASURE := p_source_instance_rec.UNIT_OF_MEASURE ;
     END IF;
     IF  (p_source_instance_rec.ACCOUNTING_CLASS_CODE = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.ACCOUNTING_CLASS_CODE := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
     ELSE
          l_new_instance_rec.ACCOUNTING_CLASS_CODE := l_curr_instance_rec.ACCOUNTING_CLASS_CODE;
     END IF;
     IF  (p_source_instance_rec.INSTANCE_CONDITION_ID = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.INSTANCE_CONDITION_ID := l_curr_instance_rec.INSTANCE_CONDITION_ID;
     ELSE
          l_new_instance_rec.INSTANCE_CONDITION_ID := p_source_instance_rec.INSTANCE_CONDITION_ID;
     END IF;
     IF ((p_source_instance_rec.INSTANCE_STATUS_ID = FND_API.G_MISS_NUM)
      OR (p_source_instance_rec.INSTANCE_STATUS_ID IS NULL)) THEN
          l_new_instance_rec.INSTANCE_STATUS_ID := l_curr_instance_rec.INSTANCE_STATUS_ID;
     ELSE
          l_new_instance_rec.INSTANCE_STATUS_ID := p_source_instance_rec.INSTANCE_STATUS_ID ;
     END IF;
     IF ((p_source_instance_rec.CUSTOMER_VIEW_FLAG = FND_API.G_MISS_CHAR)
      OR (p_source_instance_rec.CUSTOMER_VIEW_FLAG IS NULL )) THEN
          l_new_instance_rec.CUSTOMER_VIEW_FLAG := l_curr_instance_rec.CUSTOMER_VIEW_FLAG;
     ELSE
          l_new_instance_rec.CUSTOMER_VIEW_FLAG := p_source_instance_rec.CUSTOMER_VIEW_FLAG ;
     END IF;
     IF ((p_source_instance_rec.MERCHANT_VIEW_FLAG = FND_API.G_MISS_CHAR)
      OR (p_source_instance_rec.MERCHANT_VIEW_FLAG IS NULL)) THEN
          l_new_instance_rec.MERCHANT_VIEW_FLAG := l_curr_instance_rec.MERCHANT_VIEW_FLAG;
     ELSE
          l_new_instance_rec.MERCHANT_VIEW_FLAG := p_source_instance_rec.MERCHANT_VIEW_FLAG ;
     END IF;
     IF  (p_source_instance_rec.SELLABLE_FLAG = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.SELLABLE_FLAG := l_curr_instance_rec.SELLABLE_FLAG;
     ELSE
          l_new_instance_rec.SELLABLE_FLAG := p_source_instance_rec.SELLABLE_FLAG;
     END IF;
     IF  (p_source_instance_rec.SYSTEM_ID = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.SYSTEM_ID := l_curr_instance_rec.SYSTEM_ID;
     ELSE
          l_new_instance_rec.SYSTEM_ID := p_source_instance_rec.SYSTEM_ID;
     END IF;
     IF  (p_source_instance_rec.INSTANCE_TYPE_CODE = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.INSTANCE_TYPE_CODE := l_curr_instance_rec.INSTANCE_TYPE_CODE;
     ELSE
          l_new_instance_rec.INSTANCE_TYPE_CODE := p_source_instance_rec.INSTANCE_TYPE_CODE;
     END IF;
     IF  (p_source_instance_rec.ACTIVE_START_DATE = FND_API.G_MISS_DATE) THEN
          l_new_instance_rec.ACTIVE_START_DATE := l_curr_instance_rec.ACTIVE_START_DATE;
     ELSE
          l_new_instance_rec.ACTIVE_START_DATE := p_source_instance_rec.ACTIVE_START_DATE;
     END IF;
     IF  (p_source_instance_rec.ACTIVE_END_DATE = FND_API.G_MISS_DATE) THEN
          l_new_instance_rec.ACTIVE_END_DATE := l_curr_instance_rec.ACTIVE_END_DATE;
     ELSE
          l_new_instance_rec.ACTIVE_END_DATE := p_source_instance_rec.ACTIVE_END_DATE;
     END IF;
     IF  (p_source_instance_rec.LOCATION_TYPE_CODE = FND_API.G_MISS_CHAR)  THEN
          l_new_instance_rec.LOCATION_TYPE_CODE := l_curr_instance_rec.LOCATION_TYPE_CODE;
     ELSE
          l_new_instance_rec.LOCATION_TYPE_CODE := p_source_instance_rec.LOCATION_TYPE_CODE;
     END IF;
     IF  (p_source_instance_rec.LOCATION_ID = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LOCATION_ID := l_curr_instance_rec.LOCATION_ID;
     ELSE
          l_new_instance_rec.LOCATION_ID := p_source_instance_rec.LOCATION_ID;
     END IF;
     IF  (p_source_instance_rec.INV_ORGANIZATION_ID = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.INV_ORGANIZATION_ID := l_curr_instance_rec.INV_ORGANIZATION_ID;
     ELSE
          l_new_instance_rec.INV_ORGANIZATION_ID := p_source_instance_rec.INV_ORGANIZATION_ID;
     END IF;
     IF  (p_source_instance_rec.INV_SUBINVENTORY_NAME = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.INV_SUBINVENTORY_NAME := l_curr_instance_rec.INV_SUBINVENTORY_NAME;
      ELSE
          l_new_instance_rec.INV_SUBINVENTORY_NAME := p_source_instance_rec.INV_SUBINVENTORY_NAME;
      END IF;
      IF  (p_source_instance_rec.INV_LOCATOR_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.INV_LOCATOR_ID := l_curr_instance_rec.INV_LOCATOR_ID;
      ELSE
           l_new_instance_rec.INV_LOCATOR_ID := p_source_instance_rec.INV_LOCATOR_ID;
      END IF;
      IF  (p_source_instance_rec.PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.PA_PROJECT_ID := l_curr_instance_rec.PA_PROJECT_ID;
      ELSE
           l_new_instance_rec.PA_PROJECT_ID := p_source_instance_rec.PA_PROJECT_ID;
      END IF;
      IF  (p_source_instance_rec.PA_PROJECT_TASK_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.PA_PROJECT_TASK_ID := l_curr_instance_rec.PA_PROJECT_TASK_ID;
      ELSE
           l_new_instance_rec.PA_PROJECT_TASK_ID := p_source_instance_rec.PA_PROJECT_TASK_ID;
      END IF;
      IF  (p_source_instance_rec.IN_TRANSIT_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.IN_TRANSIT_ORDER_LINE_ID := l_curr_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
      ELSE
           l_new_instance_rec.IN_TRANSIT_ORDER_LINE_ID := p_source_instance_rec.IN_TRANSIT_ORDER_LINE_ID;
      END IF;
      IF  (p_source_instance_rec.WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.WIP_JOB_ID := l_curr_instance_rec.WIP_JOB_ID;
      ELSE
           l_new_instance_rec.WIP_JOB_ID := p_source_instance_rec.WIP_JOB_ID;
      END IF;
      IF  (p_source_instance_rec.PO_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.PO_ORDER_LINE_ID := l_curr_instance_rec.PO_ORDER_LINE_ID;
      ELSE
           l_new_instance_rec.PO_ORDER_LINE_ID := p_source_instance_rec.PO_ORDER_LINE_ID;
      END IF;
      IF  (p_source_instance_rec.LAST_TXN_LINE_DETAIL_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_TXN_LINE_DETAIL_ID := l_curr_instance_rec.LAST_TXN_LINE_DETAIL_ID;
      ELSE
           l_new_instance_rec.LAST_TXN_LINE_DETAIL_ID := p_source_instance_rec.LAST_TXN_LINE_DETAIL_ID;
      END IF;
      IF  (p_source_instance_rec.LAST_OE_RMA_LINE_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_OE_RMA_LINE_ID := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
      ELSE
           l_new_instance_rec.LAST_OE_RMA_LINE_ID := p_source_instance_rec.LAST_OE_RMA_LINE_ID;
      END IF;
      IF  (p_source_instance_rec.LAST_PO_PO_LINE_ID  = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_PO_PO_LINE_ID  := l_curr_instance_rec.LAST_PO_PO_LINE_ID ;
      ELSE
           l_new_instance_rec.LAST_PO_PO_LINE_ID  := p_source_instance_rec.LAST_PO_PO_LINE_ID ;
      END IF;
      IF  (p_source_instance_rec.LAST_OE_PO_NUMBER = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.LAST_OE_PO_NUMBER := l_curr_instance_rec.LAST_OE_PO_NUMBER;
      ELSE
           l_new_instance_rec.LAST_OE_PO_NUMBER := p_source_instance_rec.LAST_OE_PO_NUMBER;
      END IF;
      IF  (p_source_instance_rec.LAST_WIP_JOB_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_WIP_JOB_ID := l_curr_instance_rec.LAST_WIP_JOB_ID;
      ELSE
           l_new_instance_rec.LAST_WIP_JOB_ID := p_source_instance_rec.LAST_WIP_JOB_ID;
      END IF;
      IF  (p_source_instance_rec.LAST_PA_PROJECT_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_PA_PROJECT_ID := l_curr_instance_rec.LAST_PA_PROJECT_ID;
      ELSE
           l_new_instance_rec.LAST_PA_PROJECT_ID := p_source_instance_rec.LAST_PA_PROJECT_ID;
      END IF;
      IF  (p_source_instance_rec.LAST_PA_TASK_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_PA_TASK_ID := l_curr_instance_rec.LAST_PA_TASK_ID;
      ELSE
           l_new_instance_rec.LAST_PA_TASK_ID := p_source_instance_rec.LAST_PA_TASK_ID;
      END IF;
      IF  (p_source_instance_rec.LAST_OE_AGREEMENT_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_OE_AGREEMENT_ID  := l_curr_instance_rec.LAST_OE_AGREEMENT_ID;
      ELSE
           l_new_instance_rec.LAST_OE_AGREEMENT_ID  := p_source_instance_rec.LAST_OE_AGREEMENT_ID;
      END IF;
      IF  (p_source_instance_rec.INSTALL_DATE = FND_API.G_MISS_DATE) THEN
           l_new_instance_rec.INSTALL_DATE := l_curr_instance_rec.INSTALL_DATE;
      ELSE
           l_new_instance_rec.INSTALL_DATE := p_source_instance_rec.INSTALL_DATE;
      END IF;
      IF  (p_source_instance_rec.MANUALLY_CREATED_FLAG = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.MANUALLY_CREATED_FLAG := l_curr_instance_rec.MANUALLY_CREATED_FLAG;
      ELSE
           l_new_instance_rec.MANUALLY_CREATED_FLAG := p_source_instance_rec.MANUALLY_CREATED_FLAG;
      END IF;
      IF  (p_source_instance_rec.RETURN_BY_DATE  = FND_API.G_MISS_DATE) THEN
           l_new_instance_rec.RETURN_BY_DATE  := l_curr_instance_rec.RETURN_BY_DATE ;
      ELSE
           l_new_instance_rec.RETURN_BY_DATE  := p_source_instance_rec.RETURN_BY_DATE ;
      END IF;
      IF  (p_source_instance_rec.ACTUAL_RETURN_DATE = FND_API.G_MISS_DATE) THEN
           l_new_instance_rec.ACTUAL_RETURN_DATE := l_curr_instance_rec.ACTUAL_RETURN_DATE;
      ELSE
           l_new_instance_rec.ACTUAL_RETURN_DATE := p_source_instance_rec.ACTUAL_RETURN_DATE;
      END IF;
      IF  (p_source_instance_rec.VERSION_LABEL = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.VERSION_LABEL := l_curr_instance_rec.VERSION_LABEL;
      ELSE
           l_new_instance_rec.VERSION_LABEL := p_source_instance_rec.VERSION_LABEL;
      END IF;
      IF  (p_source_instance_rec.VERSION_LABEL_DESCRIPTION = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.VERSION_LABEL_DESCRIPTION := l_curr_instance_rec.VERSION_LABEL_DESCRIPTION;
      ELSE
           l_new_instance_rec.VERSION_LABEL_DESCRIPTION := p_source_instance_rec.VERSION_LABEL_DESCRIPTION;
      END IF;
      IF  (p_source_instance_rec.CONTEXT = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.CONTEXT := l_curr_instance_rec.CONTEXT;
      ELSE
           l_new_instance_rec.CONTEXT := p_source_instance_rec.CONTEXT;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE1 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE1 := l_curr_instance_rec.ATTRIBUTE1;
      ELSE
           l_new_instance_rec.ATTRIBUTE1 := p_source_instance_rec.ATTRIBUTE1;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE2 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE2 := l_curr_instance_rec.ATTRIBUTE2;
      ELSE
           l_new_instance_rec.ATTRIBUTE2 := p_source_instance_rec.ATTRIBUTE2;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE3 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE3 := l_curr_instance_rec.ATTRIBUTE3;
      ELSE
           l_new_instance_rec.ATTRIBUTE3 := p_source_instance_rec.ATTRIBUTE3;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE4 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE4 := l_curr_instance_rec.ATTRIBUTE4;
      ELSE
           l_new_instance_rec.ATTRIBUTE4 := p_source_instance_rec.ATTRIBUTE4;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE5 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE5 := l_curr_instance_rec.ATTRIBUTE5;
      ELSE
           l_new_instance_rec.ATTRIBUTE5 := p_source_instance_rec.ATTRIBUTE5;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE6 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE6 := l_curr_instance_rec.ATTRIBUTE6;
      ELSE
           l_new_instance_rec.ATTRIBUTE6 := p_source_instance_rec.ATTRIBUTE6;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE7 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE7 := l_curr_instance_rec.ATTRIBUTE7;
      ELSE
           l_new_instance_rec.ATTRIBUTE7 := p_source_instance_rec.ATTRIBUTE7;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE8 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE8 := l_curr_instance_rec.ATTRIBUTE8;
      ELSE
           l_new_instance_rec.ATTRIBUTE8 := p_source_instance_rec.ATTRIBUTE8;
      END IF;
      -- Added for bug 2681745
      IF  (p_source_instance_rec.ATTRIBUTE9 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE9 := l_curr_instance_rec.ATTRIBUTE9;
      ELSE
           l_new_instance_rec.ATTRIBUTE9 := p_source_instance_rec.ATTRIBUTE9;
      END IF;
      -- End addition for bug 2681745
      IF  (p_source_instance_rec.ATTRIBUTE10 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE10 := l_curr_instance_rec.ATTRIBUTE10;
      ELSE
           l_new_instance_rec.ATTRIBUTE10 := p_source_instance_rec.ATTRIBUTE10;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE11 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE11 := l_curr_instance_rec.ATTRIBUTE11;
      ELSE
           l_new_instance_rec.ATTRIBUTE11 := p_source_instance_rec.ATTRIBUTE11;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE12 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE12 := l_curr_instance_rec.ATTRIBUTE12;
      ELSE
           l_new_instance_rec.ATTRIBUTE12 := p_source_instance_rec.ATTRIBUTE12;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE13 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE13 := l_curr_instance_rec.ATTRIBUTE13;
      ELSE
           l_new_instance_rec.ATTRIBUTE13 := p_source_instance_rec.ATTRIBUTE13;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE14 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE14 := l_curr_instance_rec.ATTRIBUTE14;
      ELSE
           l_new_instance_rec.ATTRIBUTE14 := p_source_instance_rec.ATTRIBUTE14;
      END IF;
      IF  (p_source_instance_rec.ATTRIBUTE15 = FND_API.G_MISS_CHAR) THEN
           l_new_instance_rec.ATTRIBUTE15 := l_curr_instance_rec.ATTRIBUTE15;
      ELSE
           l_new_instance_rec.ATTRIBUTE15 := p_source_instance_rec.ATTRIBUTE15;
      END IF;
      IF  (p_source_instance_rec.LAST_OE_ORDER_LINE_ID = FND_API.G_MISS_NUM) THEN
           l_new_instance_rec.LAST_OE_ORDER_LINE_ID := l_curr_instance_rec.LAST_OE_ORDER_LINE_ID;
      ELSE
           l_new_instance_rec.LAST_OE_ORDER_LINE_ID := p_source_instance_rec.LAST_OE_ORDER_LINE_ID;
      END IF;
      IF (p_source_instance_rec.LAST_OE_RMA_LINE_ID  = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_OE_RMA_LINE_ID     := l_curr_instance_rec.LAST_OE_RMA_LINE_ID;
      ELSE
          l_new_instance_rec.LAST_OE_RMA_LINE_ID     := p_source_instance_rec.LAST_OE_RMA_LINE_ID;
      END IF;
      IF (p_source_instance_rec.LAST_PO_PO_LINE_ID  = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_PO_PO_LINE_ID    := l_curr_instance_rec.LAST_PO_PO_LINE_ID;
      ELSE
          l_new_instance_rec.LAST_PO_PO_LINE_ID    := p_source_instance_rec.LAST_PO_PO_LINE_ID;
      END IF;
      IF (p_source_instance_rec.LAST_OE_PO_NUMBER = FND_API.G_MISS_CHAR) THEN
          l_new_instance_rec.LAST_OE_PO_NUMBER       := l_curr_instance_rec.LAST_OE_PO_NUMBER;
      ELSE
          l_new_instance_rec.LAST_OE_PO_NUMBER       := p_source_instance_rec.LAST_OE_PO_NUMBER;
      END IF;
      IF (p_source_instance_rec.LAST_WIP_JOB_ID  = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_WIP_JOB_ID         := l_curr_instance_rec.LAST_WIP_JOB_ID;
      ELSE
          l_new_instance_rec.LAST_WIP_JOB_ID         := p_source_instance_rec.LAST_WIP_JOB_ID;
      END IF;
      IF (p_source_instance_rec.LAST_PA_PROJECT_ID  = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_PA_PROJECT_ID      := l_curr_instance_rec.LAST_PA_PROJECT_ID;
      ELSE
          l_new_instance_rec.LAST_PA_PROJECT_ID      := p_source_instance_rec.LAST_PA_PROJECT_ID;
      END IF;
      IF (p_source_instance_rec.LAST_PA_TASK_ID = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_PA_TASK_ID         := l_curr_instance_rec.LAST_PA_TASK_ID ;
      ELSE
          l_new_instance_rec.LAST_PA_TASK_ID         := p_source_instance_rec.LAST_PA_TASK_ID ;
      END IF;
      IF (p_source_instance_rec.LAST_OE_AGREEMENT_ID  = FND_API.G_MISS_NUM) THEN
          l_new_instance_rec.LAST_OE_AGREEMENT_ID    := l_curr_instance_rec.LAST_OE_AGREEMENT_ID ;
      ELSE
          l_new_instance_rec.LAST_OE_AGREEMENT_ID    := p_source_instance_rec.LAST_OE_AGREEMENT_ID ;
      END IF;
      IF (p_source_instance_rec.INSTALL_DATE = FND_API.G_MISS_DATE) THEN
          l_new_instance_rec.INSTALL_DATE            := l_curr_instance_rec.INSTALL_DATE;
      ELSE
          l_new_instance_rec.INSTALL_DATE            := p_source_instance_rec.INSTALL_DATE;
      END IF;
      IF (p_source_instance_rec.RETURN_BY_DATE = FND_API.G_MISS_DATE) THEN
          l_new_instance_rec.RETURN_BY_DATE          := l_curr_instance_rec.RETURN_BY_DATE;
      ELSE
          l_new_instance_rec.RETURN_BY_DATE          := p_source_instance_rec.RETURN_BY_DATE;
      END IF;
      IF (p_source_instance_rec.ACTUAL_RETURN_DATE = FND_API.G_MISS_DATE) THEN
          l_new_instance_rec.ACTUAL_RETURN_DATE      := l_curr_instance_rec.ACTUAL_RETURN_DATE;
      ELSE
          l_new_instance_rec.ACTUAL_RETURN_DATE      := p_source_instance_rec.ACTUAL_RETURN_DATE;
      END IF;
	--start of code for eam integration--
	IF (p_source_instance_rec.NETWORK_ASSET_FLAG = FND_API.G_MISS_CHAR) THEN
	    l_new_instance_rec.NETWORK_ASSET_FLAG := l_curr_instance_rec.NETWORK_ASSET_FLAG;
	ELSE
	    l_new_instance_rec.NETWORK_ASSET_FLAG := p_source_instance_rec.NETWORK_ASSET_FLAG;
	END IF;

	IF (p_source_instance_rec.MAINTAINABLE_FLAG = FND_API.G_MISS_CHAR) THEN
	    l_new_instance_rec.MAINTAINABLE_FLAG := l_curr_instance_rec.MAINTAINABLE_FLAG;
	ELSE
	    l_new_instance_rec.MAINTAINABLE_FLAG := p_source_instance_rec.MAINTAINABLE_FLAG;
	END IF;

	IF (p_source_instance_rec.PN_LOCATION_ID = FND_API.G_MISS_NUM) THEN
	   l_new_instance_rec.PN_LOCATION_ID := l_curr_instance_rec.PN_LOCATION_ID;
	ELSE
	   l_new_instance_rec.PN_LOCATION_ID := p_source_instance_rec.PN_LOCATION_ID;
	END IF;

	IF (p_source_instance_rec.ASSET_CRITICALITY_CODE = FND_API.G_MISS_CHAR) THEN
	   l_new_instance_rec.ASSET_CRITICALITY_CODE := l_curr_instance_rec.ASSET_CRITICALITY_CODE;
	ELSE
	   l_new_instance_rec.ASSET_CRITICALITY_CODE := p_source_instance_rec.ASSET_CRITICALITY_CODE;
	END IF;

	IF (p_source_instance_rec.CATEGORY_ID = FND_API.G_MISS_NUM) THEN
	   l_new_instance_rec.CATEGORY_ID  := l_curr_instance_rec.CATEGORY_ID;
	ELSE
	   l_new_instance_rec.CATEGORY_ID  := p_source_instance_rec.CATEGORY_ID;
       END IF;

       IF (p_source_instance_rec.EQUIPMENT_GEN_OBJECT_ID = FND_API.G_MISS_NUM) THEN
	  l_new_instance_rec.EQUIPMENT_GEN_OBJECT_ID := l_curr_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
       ELSE
	  l_new_instance_rec.EQUIPMENT_GEN_OBJECT_ID := p_source_instance_rec.EQUIPMENT_GEN_OBJECT_ID;
       END IF;

       IF (p_source_instance_rec.INSTANTIATION_FLAG = FND_API.G_MISS_CHAR) THEN
	   l_new_instance_rec.INSTANTIATION_FLAG := l_curr_instance_rec.INSTANTIATION_FLAG;
       ELSE
	   l_new_instance_rec.INSTANTIATION_FLAG := p_source_instance_rec.INSTANTIATION_FLAG;
       END IF;

       IF (p_source_instance_rec.LINEAR_LOCATION_ID  = FND_API.G_MISS_NUM) THEN
	   l_new_instance_rec.LINEAR_LOCATION_ID  := l_curr_instance_rec.LINEAR_LOCATION_ID ;
       ELSE
	   l_new_instance_rec.LINEAR_LOCATION_ID  := p_source_instance_rec.LINEAR_LOCATION_ID ;
       END IF;

       IF (p_source_instance_rec.OPERATIONAL_LOG_FLAG = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.OPERATIONAL_LOG_FLAG := l_curr_instance_rec.OPERATIONAL_LOG_FLAG;
       ELSE
	  l_new_instance_rec.OPERATIONAL_LOG_FLAG := p_source_instance_rec.OPERATIONAL_LOG_FLAG;
       END IF;

       IF (p_source_instance_rec.CHECKIN_STATUS = FND_API.G_MISS_NUM) THEN
	  l_new_instance_rec.CHECKIN_STATUS := l_curr_instance_rec.CHECKIN_STATUS;
       ELSE
	  l_new_instance_rec.CHECKIN_STATUS := p_source_instance_rec.CHECKIN_STATUS;
       END IF;

       IF (p_source_instance_rec.SUPPLIER_WARRANTY_EXP_DATE = FND_API.G_MISS_DATE) THEN
	  l_new_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := l_curr_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
       ELSE
	  l_new_instance_rec.SUPPLIER_WARRANTY_EXP_DATE := p_source_instance_rec.SUPPLIER_WARRANTY_EXP_DATE;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE16 = FND_API.G_MISS_CHAR) THEN
	 l_new_instance_rec.ATTRIBUTE16 := l_curr_instance_rec.ATTRIBUTE16;
       ELSE
	 l_new_instance_rec.ATTRIBUTE16 := p_source_instance_rec.ATTRIBUTE16;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE17 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE17 := l_curr_instance_rec.ATTRIBUTE17;
       ELSE
	  l_new_instance_rec.ATTRIBUTE17 := p_source_instance_rec.ATTRIBUTE17;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE18 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE18 := l_curr_instance_rec.ATTRIBUTE18;
       ELSE
	  l_new_instance_rec.ATTRIBUTE18 := p_source_instance_rec.ATTRIBUTE18;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE19 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE19 := l_curr_instance_rec.ATTRIBUTE19;
       ELSE
	  l_new_instance_rec.ATTRIBUTE19 := p_source_instance_rec.ATTRIBUTE19;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE20 = FND_API.G_MISS_CHAR) THEN
	   l_new_instance_rec.ATTRIBUTE20 := l_curr_instance_rec.ATTRIBUTE20;
       ELSE
	   l_new_instance_rec.ATTRIBUTE20 := p_source_instance_rec.ATTRIBUTE20;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE21 = FND_API.G_MISS_CHAR) THEN
	   l_new_instance_rec.ATTRIBUTE21 := l_curr_instance_rec.ATTRIBUTE21;
       ELSE
	   l_new_instance_rec.ATTRIBUTE21 := p_source_instance_rec.ATTRIBUTE21;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE22 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE22 := l_curr_instance_rec.ATTRIBUTE22;
       ELSE
	  l_new_instance_rec.ATTRIBUTE22 := p_source_instance_rec.ATTRIBUTE22;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE23 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE23 := l_curr_instance_rec.ATTRIBUTE23;
       ELSE
	  l_new_instance_rec.ATTRIBUTE23 := p_source_instance_rec.ATTRIBUTE23;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE24 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE24 := l_curr_instance_rec.ATTRIBUTE24;
       ELSE
	  l_new_instance_rec.ATTRIBUTE24 := p_source_instance_rec.ATTRIBUTE24;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE25 = FND_API.G_MISS_CHAR) THEN
	   l_new_instance_rec.ATTRIBUTE25 := l_curr_instance_rec.ATTRIBUTE25;
       ELSE
	   l_new_instance_rec.ATTRIBUTE25 := p_source_instance_rec.ATTRIBUTE25;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE26 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE26 := l_curr_instance_rec.ATTRIBUTE26;
       ELSE
	  l_new_instance_rec.ATTRIBUTE26 := p_source_instance_rec.ATTRIBUTE26;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE27 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE27 := l_curr_instance_rec.ATTRIBUTE27;
       ELSE
	  l_new_instance_rec.ATTRIBUTE27 := p_source_instance_rec.ATTRIBUTE27;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE28 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE28 := l_curr_instance_rec.ATTRIBUTE28;
       ELSE
	  l_new_instance_rec.ATTRIBUTE28 := p_source_instance_rec.ATTRIBUTE28;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE29 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE29 := l_curr_instance_rec.ATTRIBUTE29;
       ELSE
	  l_new_instance_rec.ATTRIBUTE29 := p_source_instance_rec.ATTRIBUTE29;
       END IF;

       IF (p_source_instance_rec.ATTRIBUTE30 = FND_API.G_MISS_CHAR) THEN
	  l_new_instance_rec.ATTRIBUTE30 := l_curr_instance_rec.ATTRIBUTE30;
       ELSE
	  l_new_instance_rec.ATTRIBUTE30 := p_source_instance_rec.ATTRIBUTE30;
       END IF;

       IF (p_source_instance_rec.instance_number = fnd_api.g_miss_char)
       THEN
         NULL;
       ELSE
         l_new_instance_rec.instance_number := p_source_instance_rec.instance_number;
       END IF;

       IF (p_source_instance_rec.instance_description = fnd_api.g_miss_char)
       THEN
         NULL;
       ELSE
         l_new_instance_rec.instance_description := p_source_instance_rec.instance_description;
       END IF;

      --end of code for eam integration--
       -- Addition of columns for FA Integration

            IF (p_source_instance_rec.PAYABLES_UNIT_PRICE  = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.PAYABLES_UNIT_PRICE      := l_curr_instance_rec.PAYABLES_UNIT_PRICE;
            ELSE
                l_new_instance_rec.PAYABLES_UNIT_PRICE      := p_source_instance_rec.PAYABLES_UNIT_PRICE;
            END IF;

            IF (p_source_instance_rec.PAYABLES_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.PAYABLES_CURRENCY_CODE := l_curr_instance_rec.PAYABLES_CURRENCY_CODE;
            ELSE
                l_new_instance_rec.PAYABLES_CURRENCY_CODE := p_source_instance_rec.PAYABLES_CURRENCY_CODE;
            END IF;

            IF (p_source_instance_rec.PURCHASE_UNIT_PRICE  = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.PURCHASE_UNIT_PRICE      := l_curr_instance_rec.PURCHASE_UNIT_PRICE;
            ELSE
                l_new_instance_rec.PURCHASE_UNIT_PRICE      := p_source_instance_rec.PURCHASE_UNIT_PRICE;
            END IF;

            IF (p_source_instance_rec.PURCHASE_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.PURCHASE_CURRENCY_CODE := l_curr_instance_rec.PURCHASE_CURRENCY_CODE;
            ELSE
                l_new_instance_rec.PURCHASE_CURRENCY_CODE := p_source_instance_rec.PURCHASE_CURRENCY_CODE;
            END IF;

            IF (p_source_instance_rec.SALES_UNIT_PRICE  = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.SALES_UNIT_PRICE      := l_curr_instance_rec.SALES_UNIT_PRICE;
            ELSE
                l_new_instance_rec.SALES_UNIT_PRICE      := p_source_instance_rec.SALES_UNIT_PRICE;
            END IF;

            IF (p_source_instance_rec.SALES_CURRENCY_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.SALES_CURRENCY_CODE := l_curr_instance_rec.SALES_CURRENCY_CODE;
            ELSE
                l_new_instance_rec.SALES_CURRENCY_CODE := p_source_instance_rec.SALES_CURRENCY_CODE;
            END IF;

            IF (p_source_instance_rec.OPERATIONAL_STATUS_CODE = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.OPERATIONAL_STATUS_CODE := l_curr_instance_rec.OPERATIONAL_STATUS_CODE;
            ELSE
                l_new_instance_rec.OPERATIONAL_STATUS_CODE := p_source_instance_rec.OPERATIONAL_STATUS_CODE;
            END IF;

        -- End addition of columns for FA Integration
      -- Set the non-copiable attributes as follows
            l_new_instance_rec.instance_id        := FND_API.G_MISS_NUM;
         --   l_new_instance_rec.instance_number    := FND_API.G_MISS_CHAR;

         -- Added if condition for bug 6368191
         IF (p_source_instance_rec.active_start_date = FND_API.G_MISS_DATE)
         THEN
         --Default the active_start_date to system date if nothing was set
           l_new_instance_rec.active_start_date := SYSDATE;
         END IF;

            l_new_instance_rec.MANUALLY_CREATED_FLAG   := 'N';
            l_new_instance_rec.COMPLETENESS_FLAG       := NULL;
            l_new_instance_rec.OBJECT_VERSION_NUMBER   := 1;
                 -- The following is added for bug 2944298.
                 -- Value of instance_usage_code should be copied from the source instance
                 -- only if it is called from split.
                   IF p_call_from_split=fnd_api.g_true
                   THEN
                 -- Added by sguthiva for bug 2163942
                     IF (p_source_instance_rec.instance_usage_code = FND_API.G_MISS_CHAR) THEN
                         l_new_instance_rec.instance_usage_code := l_curr_instance_rec.instance_usage_code;
                     ELSE
                         l_new_instance_rec.instance_usage_code := p_source_instance_rec.instance_usage_code;
                     END IF;

                   ELSE
                      l_obj_id:=NULL;
		      csi_ii_relationships_pvt.Get_Top_Most_Parent
		        ( p_subject_id       => p_source_instance_rec.instance_id,
		          p_rel_type_code    => 'COMPONENT-OF',
			  p_object_id        => l_obj_id
			);
			--
			IF l_obj_id <> p_source_instance_rec.instance_id THEN
			   BEGIN
			      SELECT instance_usage_code
			      INTO   l_new_instance_rec.instance_usage_code
			      FROM   csi_item_instances
			      WHERE  instance_id=l_obj_id;
			   EXCEPTION
			      WHEN NO_DATA_FOUND THEN
			         NULL;
			   END;
			 ELSE
			    l_new_instance_rec.instance_usage_code := l_curr_instance_rec.instance_usage_code;
			 END IF;
                   END IF;
                 -- End addition by sguthiva for bug 2163942
                 -- Added by sguthiva for bug 2230264

            IF (p_source_instance_rec.vld_organization_id = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.vld_organization_id := l_vld_org_id;
            ELSE
                l_new_instance_rec.vld_organization_id := p_source_instance_rec.vld_organization_id;
            END IF;
            IF (p_source_instance_rec.install_location_type_code = FND_API.G_MISS_CHAR) THEN
                l_new_instance_rec.install_location_type_code := l_curr_instance_rec.install_location_type_code;
            ELSE
                l_new_instance_rec.install_location_type_code := p_source_instance_rec.install_location_type_code;
            END IF;
            IF (p_source_instance_rec.install_location_id = FND_API.G_MISS_NUM) THEN
                l_new_instance_rec.install_location_id := l_curr_instance_rec.install_location_id;
            ELSE
                l_new_instance_rec.install_location_id := p_source_instance_rec.install_location_id;
            END IF;
        -- End addition by sguthiva for bug 2230264

			IF p_source_instance_rec.SOURCE_CODE IS NULL THEN
              l_new_instance_rec.SOURCE_CODE := l_curr_instance_rec.SOURCE_CODE;
            ELSE
              l_new_instance_rec.SOURCE_CODE := p_source_instance_rec.SOURCE_CODE;
            END IF;

     --  Call Create_item_instance to create the new instance in csi_item_instances table.
            CSI_ITEM_INSTANCE_PVT.create_item_instance
             (  p_api_version             => p_api_version
                ,p_commit                 => p_commit
                ,p_init_msg_list          => p_init_msg_list
                ,p_validation_level       => p_validation_level
                ,p_instance_rec           => l_new_instance_rec
                ,p_txn_rec                => p_txn_rec
                ,p_party_tbl              => l_party_tbl
                ,p_asset_tbl              => l_asset_tbl
                ,x_return_status          => x_return_status
                ,x_msg_count              => x_msg_count
                ,x_msg_data               => x_msg_data
                ,p_item_attribute_tbl     => l_item_attribute_tbl
                ,p_location_tbl           => l_location_tbl
                ,p_generic_id_tbl         => l_generic_id_tbl
                ,p_lookup_tbl             => l_lookup_tbl
                ,p_ins_count_rec          => l_ins_count_rec
             );
                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                  l_msg_index := 1;
                  l_msg_count := x_msg_count;
                  WHILE l_msg_count > 0 LOOP
                       x_msg_data := FND_MSG_PUB.GET
                                      (l_msg_index,
                                     FND_API.G_FALSE      );

                       csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       l_msg_index := l_msg_index + 1;
                       l_msg_count := l_msg_count - 1;
                  END LOOP;
                  RAISE FND_API.G_EXC_ERROR;
                ELSE
                   x_new_instance_tbl(1) := l_new_instance_rec;
                   l_map_count := l_map_count + 1;
                   l_map_inst_tbl(l_map_count).old_instance_id := p_source_instance_rec.instance_id;
                   l_map_inst_tbl(l_map_count).new_instance_id := l_new_instance_rec.instance_id;
                END IF;


          -- Create a party or parties for the new instances
          IF l_party_tbl.COUNT > 0 THEN

                FOR tab_row_party IN l_party_tbl.FIRST .. l_party_tbl.LAST

                LOOP

                    IF l_party_tbl.EXISTS(tab_row_party) THEN

                       -- Build account query rec
                       l_party_account_query_rec.instance_party_id := l_party_tbl(tab_row_party).instance_party_id ;
                       l_party_account_query_rec.ip_account_id  := FND_API.G_MISS_NUM;
                       l_party_account_query_rec.party_account_id   := FND_API.G_MISS_NUM;
                       l_party_account_query_rec.relationship_type_code  := FND_API.G_MISS_CHAR;

                       -- Get party accounts

                       csi_party_relationships_pub.get_inst_party_accounts
                          ( p_api_version                 => p_api_version
                           ,p_commit                      => p_commit
                           ,p_init_msg_list               => p_init_msg_list
                           ,p_validation_level            => p_validation_level
                           ,p_account_query_rec           => l_party_account_query_rec
                           ,p_resolve_id_columns          => fnd_api.g_true
                           ,p_time_stamp                  => NULL
                           ,x_account_header_tbl          => l_account_header_tbl
                           ,x_return_status               => x_return_status
                           ,x_msg_count                   => x_msg_count
                           ,x_msg_data                    => x_msg_data);

                            IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;

                         -- Start Addition for Bug 2186704
                         IF l_account_header_tbl.count>0
                         THEN
                           k:=1;
                            FOR i IN l_account_header_tbl.FIRST..l_account_header_tbl.LAST
                            LOOP
                                IF l_account_header_tbl(i).active_end_date IS NULL OR
                                   l_account_header_tbl(i).active_end_date > SYSDATE
                                THEN
                                   l_pty_acct_hdr_tbl(k):= l_account_header_tbl(i);
                                   k := k+1;
                                END IF;
                            END LOOP;
                            l_account_header_tbl:=l_temp_acct_hdr_tbl;
                            l_account_header_tbl:=l_pty_acct_hdr_tbl;
                         END IF;
                         -- End Addition for Bug 2186704

                         IF l_account_header_tbl.COUNT > 0 THEN       /***********Second Change 07/27/01 - RK**********/
                                 FOR tab_row_party IN l_account_header_tbl.FIRST .. l_account_header_tbl.LAST
                                 LOOP
                                    IF l_account_header_tbl.EXISTS(tab_row_party) THEN
                                      --  Donot copy accounts if user says so
                                      IF (p_copy_accounts <> fnd_api.g_true) THEN
                                        IF (l_account_header_tbl(tab_row_party).RELATIONSHIP_TYPE_CODE = 'OWNER') THEN
                                        l_party_account_tbl(tab_row_party).ip_account_id := l_account_header_tbl(tab_row_party).ip_account_id;
                                        l_party_account_tbl(tab_row_party).instance_party_id := l_account_header_tbl(tab_row_party).instance_party_id;
                                        l_party_account_tbl(tab_row_party).party_account_id := l_account_header_tbl(tab_row_party).party_account_id;
                                        l_party_account_tbl(tab_row_party).relationship_type_code := l_account_header_tbl(tab_row_party).relationship_type_code;
                                        l_party_account_tbl(tab_row_party).bill_to_address := l_account_header_tbl(tab_row_party).bill_to_address;
                                        l_party_account_tbl(tab_row_party).ship_to_address := l_account_header_tbl(tab_row_party).ship_to_address;
                                        l_party_account_tbl(tab_row_party).active_start_date := l_account_header_tbl(tab_row_party).active_start_date;
                                        l_party_account_tbl(tab_row_party).active_end_date := l_account_header_tbl(tab_row_party).active_end_date;
                                        l_party_account_tbl(tab_row_party).context := l_account_header_tbl(tab_row_party).context;
                                        l_party_account_tbl(tab_row_party).attribute1 := l_account_header_tbl(tab_row_party).attribute1;
                                        l_party_account_tbl(tab_row_party).attribute2 := l_account_header_tbl(tab_row_party).attribute2;
                                        l_party_account_tbl(tab_row_party).attribute3 := l_account_header_tbl(tab_row_party).attribute3;
                                        l_party_account_tbl(tab_row_party).attribute4 := l_account_header_tbl(tab_row_party).attribute4;
                                        l_party_account_tbl(tab_row_party).attribute5 := l_account_header_tbl(tab_row_party).attribute5;
                                        l_party_account_tbl(tab_row_party).attribute6 := l_account_header_tbl(tab_row_party).attribute6;
                                        l_party_account_tbl(tab_row_party).attribute7 := l_account_header_tbl(tab_row_party).attribute7;
                                        l_party_account_tbl(tab_row_party).attribute8 := l_account_header_tbl(tab_row_party).attribute8;
                                        l_party_account_tbl(tab_row_party).attribute9 := l_account_header_tbl(tab_row_party).attribute9;
                                        l_party_account_tbl(tab_row_party).attribute10 := l_account_header_tbl(tab_row_party).attribute10;
                                        l_party_account_tbl(tab_row_party).attribute11 := l_account_header_tbl(tab_row_party).attribute11;
                                        l_party_account_tbl(tab_row_party).attribute12 := l_account_header_tbl(tab_row_party).attribute12;
                                        l_party_account_tbl(tab_row_party).attribute13 := l_account_header_tbl(tab_row_party).attribute13;
                                        l_party_account_tbl(tab_row_party).attribute14 := l_account_header_tbl(tab_row_party).attribute14;
                                        l_party_account_tbl(tab_row_party).attribute15 := l_account_header_tbl(tab_row_party).attribute15;
                                        l_party_account_tbl(tab_row_party).object_version_number := l_account_header_tbl(tab_row_party).object_version_number;
                                         END IF;
                                       ELSE
                                        l_party_account_tbl(tab_row_party).ip_account_id := l_account_header_tbl(tab_row_party).ip_account_id;
                                        l_party_account_tbl(tab_row_party).instance_party_id := l_account_header_tbl(tab_row_party).instance_party_id;
                                        l_party_account_tbl(tab_row_party).party_account_id := l_account_header_tbl(tab_row_party).party_account_id;
                                        l_party_account_tbl(tab_row_party).relationship_type_code := l_account_header_tbl(tab_row_party).relationship_type_code;
                                        l_party_account_tbl(tab_row_party).bill_to_address := l_account_header_tbl(tab_row_party).bill_to_address;
                                        l_party_account_tbl(tab_row_party).ship_to_address := l_account_header_tbl(tab_row_party).ship_to_address;
                                        l_party_account_tbl(tab_row_party).active_start_date := l_account_header_tbl(tab_row_party).active_start_date;
                                        l_party_account_tbl(tab_row_party).active_end_date := l_account_header_tbl(tab_row_party).active_end_date;
                                        l_party_account_tbl(tab_row_party).context := l_account_header_tbl(tab_row_party).context;
                                        l_party_account_tbl(tab_row_party).attribute1 := l_account_header_tbl(tab_row_party).attribute1;
                                        l_party_account_tbl(tab_row_party).attribute2 := l_account_header_tbl(tab_row_party).attribute2;
                                        l_party_account_tbl(tab_row_party).attribute3 := l_account_header_tbl(tab_row_party).attribute3;
                                        l_party_account_tbl(tab_row_party).attribute4 := l_account_header_tbl(tab_row_party).attribute4;
                                        l_party_account_tbl(tab_row_party).attribute5 := l_account_header_tbl(tab_row_party).attribute5;
                                        l_party_account_tbl(tab_row_party).attribute6 := l_account_header_tbl(tab_row_party).attribute6;
                                        l_party_account_tbl(tab_row_party).attribute7 := l_account_header_tbl(tab_row_party).attribute7;
                                        l_party_account_tbl(tab_row_party).attribute8 := l_account_header_tbl(tab_row_party).attribute8;
                                        l_party_account_tbl(tab_row_party).attribute9 := l_account_header_tbl(tab_row_party).attribute9;
                                        l_party_account_tbl(tab_row_party).attribute10 := l_account_header_tbl(tab_row_party).attribute10;
                                        l_party_account_tbl(tab_row_party).attribute11 := l_account_header_tbl(tab_row_party).attribute11;
                                        l_party_account_tbl(tab_row_party).attribute12 := l_account_header_tbl(tab_row_party).attribute12;
                                        l_party_account_tbl(tab_row_party).attribute13 := l_account_header_tbl(tab_row_party).attribute13;
                                        l_party_account_tbl(tab_row_party).attribute14 := l_account_header_tbl(tab_row_party).attribute14;
                                        l_party_account_tbl(tab_row_party).attribute15 := l_account_header_tbl(tab_row_party).attribute15;
                                        l_party_account_tbl(tab_row_party).object_version_number := l_account_header_tbl(tab_row_party).object_version_number;
                                        END IF;
                                      END IF;
                                 END LOOP;
                         END IF; --l_account_header_tbl.COUNT > 0
                    -- Empty the account_header table
                       l_account_header_tbl.DELETE;
                    -- Build the party table
                       l_party_tbl(tab_row_party).instance_party_id             := FND_API.G_MISS_NUM;
                       l_party_tbl(tab_row_party).INSTANCE_ID                   := l_new_instance_rec.instance_id;
                       l_party_tbl(tab_row_party).ACTIVE_START_DATE             := FND_API.G_MISS_DATE;
                       l_party_tbl(tab_row_party).ACTIVE_END_DATE               := FND_API.G_MISS_DATE;
                   -- Build the temporary party table with only one record
                   -- for and grab all its accounts
                       l_party_input_tbl(1) := l_party_tbl(tab_row_party);
                -- Build its corresponding accounts
                        IF l_party_account_tbl.COUNT > 0 THEN
                            FOR tab_row_acct IN l_party_account_tbl.FIRST .. l_party_account_tbl.LAST
                            LOOP
                               -- l_party_account_tbl(tab_row_acct).parent_tbl_index := tab_row_party;
                               l_party_account_tbl(tab_row_acct).parent_tbl_index := 1;
                               l_party_account_tbl(tab_row_acct).ip_account_id  := FND_API.G_MISS_NUM;
                               l_party_account_tbl(tab_row_acct).instance_party_id := l_party_input_tbl(l_party_account_tbl(tab_row_acct).parent_tbl_index).instance_party_id;
                               l_party_account_tbl(tab_row_acct).ACTIVE_START_DATE := FND_API.G_MISS_DATE;
                               l_party_account_tbl(tab_row_acct).ACTIVE_END_DATE   := FND_API.G_MISS_DATE;
                               l_party_account_tbl(tab_row_acct).call_contracts := FND_API.G_FALSE; -- srramakr Bug 2468638
                            END LOOP;
                        END IF;
                         -- Creae instance party relationship and its accounts
                        csi_party_relationships_pub.create_inst_party_relationship
                            ( p_api_version                 => p_api_version
                             ,p_commit                      => p_commit
                             ,p_init_msg_list               => p_init_msg_list
                             ,p_validation_level            => p_validation_level
                             ,p_party_tbl                   => l_party_input_tbl
                             ,p_party_account_tbl           => l_party_account_tbl
                             ,p_txn_rec                     => p_txn_rec
                             ,p_oks_txn_inst_tbl            => px_oks_txn_inst_tbl
                             ,x_return_status               => x_return_status
                             ,x_msg_count                   => x_msg_count
                             ,x_msg_data                    => x_msg_data
                              );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
                             -- Grab the new parties created in a new table
                               l_new_party_tbl(tab_row_party) := l_party_input_tbl(1);
                             -- Empty the party table
                               l_party_input_tbl.DELETE;
                             -- Empty the account table
                               l_party_account_tbl.DELETE;
           END IF;
          END LOOP;
      END IF;
          -- Create a contact or contacts for the new instances
      IF  (p_copy_contacts  = fnd_api.g_true) THEN
          IF l_contact_tbl.COUNT > 0 THEN
                FOR tab_row_contact IN l_contact_tbl.FIRST .. l_contact_tbl.LAST
                LOOP
                    IF l_contact_tbl.EXISTS(tab_row_contact) THEN
                      -- Find the contact_ip_id which was just created
                      -- for this contact
                       IF (l_original_party_tbl.COUNT > 0) THEN
                          FOR tab_row_party IN l_original_party_tbl.FIRST .. l_original_party_tbl.LAST
                          LOOP
                            IF l_original_party_tbl.EXISTS(tab_row_party) THEN
                              IF (l_original_party_tbl(tab_row_party).instance_party_id
                                 = l_contact_tbl(tab_row_contact).contact_ip_id )
                                THEN
                                 l_contact_tbl(tab_row_contact).contact_ip_id :=
                                   l_new_party_tbl(tab_row_party).instance_party_id;
                                 l_contact_found_flag := TRUE;
                              END IF;
                            END IF;
                          END LOOP;
                       END IF;
                    -- Check if the contact_ip_id exists
                       IF ((l_contact_tbl(tab_row_contact).contact_ip_id IS NULL) OR
                       (l_contact_tbl(tab_row_contact).contact_ip_id
                         = FND_API.G_MISS_NUM)
                        OR NOT(l_contact_found_flag) ) THEN
                           FND_MESSAGE.SET_NAME('CSI','CSI_API_CONTACT_IP_ID_NULL');
                           FND_MESSAGE.SET_TOKEN('INSTANCE_PARTY_ID',
                              l_contact_tbl(tab_row_contact).instance_party_id);
                           FND_MSG_PUB.Add;
                           RAISE FND_API.G_EXC_ERROR;
                       END IF;
                    -- Build other fiels of the contact table
                       l_contact_tbl(tab_row_contact).instance_party_id             := FND_API.G_MISS_NUM;
                       l_contact_tbl(tab_row_contact).contact_flag   := 'Y';
                       l_contact_tbl(tab_row_contact).INSTANCE_ID                   := l_new_instance_rec.instance_id;
                       l_contact_tbl(tab_row_contact).ACTIVE_START_DATE             := FND_API.G_MISS_DATE;
                       l_contact_tbl(tab_row_contact).ACTIVE_END_DATE               := FND_API.G_MISS_DATE;
                   -- Build the temporary party table with only one record
                   -- for and grab all its accounts
                       l_contact_input_tbl(1) := l_contact_tbl(tab_row_contact);

                         -- Create instance party relationship and its accounts
                        csi_party_relationships_pub.create_inst_party_relationship
                            ( p_api_version                 => p_api_version
                             ,p_commit                      => p_commit
                             ,p_init_msg_list               => p_init_msg_list
                             ,p_validation_level            => p_validation_level
                             ,p_party_tbl                   => l_contact_input_tbl
                             ,p_party_account_tbl           => l_contact_account_tbl
                             ,p_txn_rec                     => p_txn_rec
                             ,p_oks_txn_inst_tbl            => px_oks_txn_inst_tbl
                             ,x_return_status               => x_return_status
                             ,x_msg_count                   => x_msg_count
                             ,x_msg_data                    => x_msg_data
                              );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
                             -- Grab the new parties created in a new table
                               l_new_contact_tbl(tab_row_contact) := l_contact_input_tbl(1);
                             -- Empty the party table
                               l_contact_input_tbl.DELETE;
                             -- Empty the account table
                               l_contact_account_tbl.DELETE;
                             l_contact_found_flag := FALSE;
           END IF;
          END LOOP;
      END IF;
   END IF;
       -- Empty the party and contact tables
       l_new_contact_tbl.DELETE;
       l_new_party_tbl.DELETE;
  -- Create asset assignments if requested. Asset assignments have already been fetched before
    IF  (p_copy_asset_assignments  = fnd_api.g_true) THEN
       IF l_asset_tbl.COUNT > 0 THEN
         FOR tab_row IN l_asset_tbl.FIRST .. l_asset_tbl.LAST
         LOOP
            IF l_asset_tbl.EXISTS(tab_row) THEN
                 l_asset_tbl(tab_row).INSTANCE_ID          := l_new_instance_rec.instance_id;
                 l_asset_tbl(tab_row).INSTANCE_ASSET_ID   := FND_API.G_MISS_NUM;
                 l_asset_tbl(tab_row).ACTIVE_START_DATE    := FND_API.G_MISS_DATE;
                 l_asset_tbl(tab_row).ACTIVE_END_DATE      := FND_API.G_MISS_DATE;
                 -- Trap the row in a record and create assets row by row
                 l_instance_asset_rec := l_asset_tbl(tab_row);
                  csi_asset_pvt.create_instance_asset
                    ( p_api_version                 => p_api_version
                     ,p_commit                      => p_commit
                     ,p_init_msg_list               => p_init_msg_list
                     ,p_validation_level            => p_validation_level
                     ,p_instance_asset_rec          => l_instance_asset_rec
                     ,p_txn_rec                     => p_txn_rec
                     ,x_return_status               => x_return_status
                     ,x_msg_count                   => x_msg_count
                     ,x_msg_data                    => x_msg_data
                     ,p_lookup_tbl                  => l_asset_lookup_tbl
                     ,p_asset_count_rec             => l_asset_count_rec
                     ,p_asset_id_tbl                => l_asset_id_tbl
                     ,p_asset_loc_tbl               => l_asset_loc_tbl
                    );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
              END IF;
           END LOOP;
        END IF;
     END IF;
   -- Created extended attributes if requested
    IF (p_copy_ext_attribs =  fnd_api.g_true) THEN
        l_ext_attribs_query_rec.attribute_value_id  := FND_API.G_MISS_NUM;
        l_ext_attribs_query_rec.instance_id := l_curr_instance_rec.instance_id;
        l_ext_attribs_query_rec.attribute_id := FND_API.G_MISS_NUM;
        csi_item_instance_pub.get_extended_attrib_values
               (p_api_version            =>  p_api_version
               ,p_commit                 => p_commit
               ,p_init_msg_list          => p_init_msg_list
               ,p_validation_level       => p_validation_level
               ,p_ext_attribs_query_rec  => l_ext_attribs_query_rec
               ,p_time_stamp             => NULL
               ,x_ext_attrib_tbl         => l_ext_attrib_tbl
               ,x_ext_attrib_def_tbl     => l_ext_attrib_def_tbl
               ,x_return_status          => x_return_status
               ,x_msg_count              => x_msg_count
               ,x_msg_data               => x_msg_data
               );
                      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                      END IF;
      IF l_ext_attrib_tbl.COUNT > 0 THEN
         FOR tab_row IN l_ext_attrib_tbl.FIRST .. l_ext_attrib_tbl.LAST
         LOOP
            IF l_ext_attrib_tbl.EXISTS(tab_row) THEN
              IF NOT(csi_Item_Instance_Vld_pvt.get_ext_attrib_level(l_ext_attrib_tbl(tab_row).attribute_id,
                                        l_attribute_level ))THEN
                 RAISE FND_API.G_EXC_ERROR;
              END IF;
              IF (l_attribute_level = 'INSTANCE') THEN
                 l_ext_attrib_tbl.DELETE (tab_row);
              ELSE
                 l_ext_attrib_tbl(tab_row).INSTANCE_ID := l_new_instance_rec.instance_id;
                 l_ext_attrib_tbl(tab_row).ATTRIBUTE_VALUE_ID   := FND_API.G_MISS_NUM;
                 l_ext_attrib_tbl(tab_row).ACTIVE_START_DATE  := FND_API.G_MISS_DATE;
                 l_ext_attrib_tbl(tab_row).ACTIVE_END_DATE  := FND_API.G_MISS_DATE;
              END IF;
            END IF;
         END LOOP;
            -- It is possible that all the extended attributes were set at instance level and thus we have an empty table
            IF l_ext_attrib_tbl.COUNT > 0 THEN
              csi_item_instance_pub.create_extended_attrib_values
              ( p_api_version         => p_api_version
               ,p_commit              => p_commit
               ,p_init_msg_list       => p_init_msg_list
               ,p_validation_level    => p_validation_level
               ,p_ext_attrib_tbl      => l_ext_attrib_tbl
               ,p_txn_rec             => p_txn_rec
               ,x_return_status       => x_return_status
               ,x_msg_count           => x_msg_count
               ,x_msg_data            => x_msg_data
              );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
             END IF;
          END IF;
       END IF;
    -- Create org assignments if requested
    IF (p_copy_org_assignments = fnd_api.g_true) THEN
          l_ou_query_rec.instance_ou_id := FND_API.G_MISS_NUM;
          l_ou_query_rec.instance_id := l_curr_instance_rec.instance_id;
          l_ou_query_rec.operating_unit_id := FND_API.G_MISS_NUM;
          l_ou_query_rec.relationship_type_code  := FND_API.G_MISS_CHAR;
            csi_organization_unit_pub.get_organization_unit
               (
               p_api_version             => p_api_version
               ,p_commit                 => p_commit
               ,p_init_msg_list          => p_init_msg_list
               ,p_validation_level       => p_validation_level
               ,p_ou_query_rec           => l_ou_query_rec
               ,p_resolve_id_columns     => fnd_api.g_true
               ,p_time_stamp             => NULL
               ,x_org_unit_tbl           => l_org_unit_header_tbl
               ,x_return_status          => x_return_status
               ,x_msg_count              => x_msg_count
               ,x_msg_data               => x_msg_data
               );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
              IF l_org_unit_header_tbl.COUNT > 0 THEN    /*****First change here 08/25/01 - RK***/
                FOR tab_row_party IN l_org_unit_header_tbl.FIRST .. l_org_unit_header_tbl.LAST
                LOOP
                     IF l_org_unit_header_tbl.EXISTS(tab_row_party) THEN
                             l_org_unit_tbl(tab_row_party).instance_ou_id := l_org_unit_header_tbl(tab_row_party).instance_ou_id;
                             l_org_unit_tbl(tab_row_party).instance_id := l_org_unit_header_tbl(tab_row_party).instance_id;
                             l_org_unit_tbl(tab_row_party).operating_unit_id := l_org_unit_header_tbl(tab_row_party).operating_unit_id;
                             l_org_unit_tbl(tab_row_party).relationship_type_code := l_org_unit_header_tbl(tab_row_party).relationship_type_code;
                             l_org_unit_tbl(tab_row_party).active_start_date := l_org_unit_header_tbl(tab_row_party).active_start_date;
                             l_org_unit_tbl(tab_row_party).active_end_date := l_org_unit_header_tbl(tab_row_party).active_end_date;
                             l_org_unit_tbl(tab_row_party).context := l_org_unit_header_tbl(tab_row_party).context;
                             l_org_unit_tbl(tab_row_party).attribute1 := l_org_unit_header_tbl(tab_row_party).attribute1;
                             l_org_unit_tbl(tab_row_party).attribute2 := l_org_unit_header_tbl(tab_row_party).attribute2;
                             l_org_unit_tbl(tab_row_party).attribute3 := l_org_unit_header_tbl(tab_row_party).attribute3;
                             l_org_unit_tbl(tab_row_party).attribute4 := l_org_unit_header_tbl(tab_row_party).attribute4;
                             l_org_unit_tbl(tab_row_party).attribute5 := l_org_unit_header_tbl(tab_row_party).attribute5;
                             l_org_unit_tbl(tab_row_party).attribute6 := l_org_unit_header_tbl(tab_row_party).attribute6;
                             l_org_unit_tbl(tab_row_party).attribute7 := l_org_unit_header_tbl(tab_row_party).attribute7;
                             l_org_unit_tbl(tab_row_party).attribute8 := l_org_unit_header_tbl(tab_row_party).attribute8;
                             l_org_unit_tbl(tab_row_party).attribute9 := l_org_unit_header_tbl(tab_row_party).attribute9;
                             l_org_unit_tbl(tab_row_party).attribute10 := l_org_unit_header_tbl(tab_row_party).attribute10;
                             l_org_unit_tbl(tab_row_party).attribute11 := l_org_unit_header_tbl(tab_row_party).attribute11;
                             l_org_unit_tbl(tab_row_party).attribute12 := l_org_unit_header_tbl(tab_row_party).attribute12;
                             l_org_unit_tbl(tab_row_party).attribute13 := l_org_unit_header_tbl(tab_row_party).attribute13;
                             l_org_unit_tbl(tab_row_party).attribute14 := l_org_unit_header_tbl(tab_row_party).attribute14;
                             l_org_unit_tbl(tab_row_party).attribute15 := l_org_unit_header_tbl(tab_row_party).attribute15;
                             l_org_unit_tbl(tab_row_party).object_version_number := l_org_unit_header_tbl(tab_row_party).object_version_number;
                     END IF;
                END LOOP;
             END IF; --l_org_unit_header_tbl.COUNT > 0
     IF l_org_unit_tbl.COUNT > 0 THEN
         FOR tab_row IN l_org_unit_tbl.FIRST .. l_org_unit_tbl.LAST
         LOOP
            IF l_org_unit_tbl.EXISTS(tab_row) THEN
                 l_org_unit_tbl(tab_row).INSTANCE_ID        := l_new_instance_rec.instance_id;
                 l_org_unit_tbl(tab_row).INSTANCE_OU_ID     := FND_API.G_MISS_NUM;
                 l_org_unit_tbl(tab_row).ACTIVE_START_DATE  := FND_API.G_MISS_DATE;
                 l_org_unit_tbl(tab_row).ACTIVE_END_DATE    := FND_API.G_MISS_DATE;
              END IF;
         END LOOP;
            csi_organization_unit_pub.create_organization_unit
            ( p_api_version       => p_api_version
             ,p_commit            => p_commit
             ,p_init_msg_list     => p_init_msg_list
             ,p_validation_level  => p_validation_level
             ,p_org_unit_tbl      => l_org_unit_tbl
             ,p_txn_rec           => p_txn_rec
             ,x_return_status     => x_return_status
             ,x_msg_count         => x_msg_count
             ,x_msg_data          => x_msg_data
            );
                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
         END IF;
    END IF;
   -- Create pricing attributes if requested
   IF (p_copy_pricing_attribs = fnd_api.g_true) THEN
      l_pricing_attribs_query_rec.pricing_attribute_id  := FND_API.G_MISS_NUM;
      l_pricing_attribs_query_rec.instance_id           := l_curr_instance_rec.instance_id;

       csi_pricing_attribs_pub.get_pricing_attribs
            ( p_api_version                 => p_api_version
             ,p_commit                      => p_commit
             ,p_init_msg_list               => p_init_msg_list
             ,p_validation_level            => p_validation_level
             ,p_pricing_attribs_query_rec   => l_pricing_attribs_query_rec
             ,p_time_stamp                  => NULL
             ,x_pricing_attribs_tbl         => l_pricing_attribs_tbl
             ,x_return_status               => x_return_status
             ,x_msg_count                   => x_msg_count
             ,x_msg_data                    => x_msg_data
            );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;


     IF l_pricing_attribs_tbl.COUNT > 0 THEN
         FOR tab_row IN l_pricing_attribs_tbl.FIRST .. l_pricing_attribs_tbl.LAST
         LOOP
            IF l_pricing_attribs_tbl.EXISTS(tab_row) THEN
                 l_pricing_attribs_tbl(tab_row).INSTANCE_ID            := l_new_instance_rec.instance_id;
                 l_pricing_attribs_tbl(tab_row).PRICING_ATTRIBUTE_ID   := FND_API.G_MISS_NUM;
                 l_pricing_attribs_tbl(tab_row).ACTIVE_START_DATE      := FND_API.G_MISS_DATE;
                 l_pricing_attribs_tbl(tab_row).ACTIVE_END_DATE        := FND_API.G_MISS_DATE;
              END IF;
         END LOOP;

         csi_pricing_attribs_pub.create_pricing_attribs
            ( p_api_version                 => p_api_version
             ,p_commit                      => p_commit
             ,p_init_msg_list               => p_init_msg_list
             ,p_validation_level            => p_validation_level
             ,p_pricing_attribs_tbl         => l_pricing_attribs_tbl
             ,p_txn_rec                     => p_txn_rec
             ,x_return_status               => x_return_status
             ,x_msg_count                   => x_msg_count
             ,x_msg_data                    => x_msg_data
            );

                             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                               l_msg_index := 1;
                               l_msg_count := x_msg_count;
                               WHILE l_msg_count > 0 LOOP
                                    x_msg_data := FND_MSG_PUB.GET
                                                   (l_msg_index,
                                                  FND_API.G_FALSE      );
                                    csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                                    l_msg_index := l_msg_index + 1;
                                    l_msg_count := l_msg_count - 1;
                               END LOOP;
                               RAISE FND_API.G_EXC_ERROR;
                             END IF;
       END IF;
   END IF;


-- Added by rtalluri for Bug: 2420897 on 08/19/02
-- If version label is null, then we need read the the default value from the profile option
      IF (p_source_instance_rec.VERSION_LABEL IS NULL ) OR
         (p_source_instance_rec.VERSION_LABEL = FND_API.G_MISS_CHAR) THEN
          l_version_label := FND_PROFILE.VALUE('CSI_DEFAULT_VERSION_LABEL');
           IF  l_version_label IS NULL THEN
               FND_MESSAGE.SET_NAME('CSI','CSI_API_INVALID_VERSION_LABEL');
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
           ELSE
               l_new_instance_rec.version_label := l_version_label;
           END IF;
      ELSE
        l_new_instance_rec.VERSION_LABEL := p_source_instance_rec.VERSION_LABEL;
      END IF;

      --Calling the Create Version Label API to associate a version label for an instance created

        l_version_label_rec.instance_id           := l_new_instance_rec.instance_id;
        l_version_label_rec.version_label         := l_new_instance_rec.version_label;
        l_version_label_rec.date_time_stamp       := SYSDATE;
        l_version_label_rec.active_start_date     := l_new_instance_rec.active_start_date;
        l_version_label_rec.description           := l_new_instance_rec.version_label_description;

        csi_item_instance_pvt.create_version_label
          (
           p_api_version         => p_api_version
          ,p_commit              => fnd_api.g_false
          ,p_init_msg_list       => p_init_msg_list
          ,p_validation_level    => p_validation_level
          ,p_version_label_rec   => l_version_label_rec
          ,p_txn_rec             => p_txn_rec
          ,x_return_status       => x_return_status
          ,x_msg_count           => x_msg_count
          ,x_msg_data            => x_msg_data
           );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              csi_gen_utility_pvt.put_line( ' Error from COPY_ITEM_INSTANCE.CREATE_VERSION_LABEL..');
              csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_CREATE_VERSION');
              FND_MESSAGE.SET_TOKEN('API_ERROR','CREATE_VERSION_LABEL');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;
-- End of Addition by rtalluri for Bug: 2420897 on 08/19/02

      IF p_call_from_split = fnd_api.g_false
      THEN
           -- Added by sk for fixing the bug 2234365
           IF x_new_instance_tbl(1).instance_id IS NOT NULL AND
              x_new_instance_tbl(1).instance_id <> fnd_api.g_miss_num
           THEN
                  -- Added by sk for fixing bug 2245976
                  IF csi_datastructures_pub.g_install_param_rec.fetch_flag IS NULL THEN
                     csi_gen_utility_pvt.populate_install_param_rec;
                  END IF;
                  --
                  l_internal_party_id := csi_datastructures_pub.g_install_param_rec.internal_party_id;
                  --
                  IF l_internal_party_id IS NULL THEN
                     FND_MESSAGE.SET_NAME('CSI','CSI_API_UNINSTALLED_PARAMETER');
                     FND_MSG_PUB.ADD;
                     RAISE FND_API.G_EXC_ERROR;
                  END IF;

                  BEGIN
                      SELECT cip.party_id
                      INTO   l_party_id
                      FROM   csi_i_parties cip
                      WHERE  cip.instance_id = x_new_instance_tbl(1).instance_id
                      AND    cip.relationship_type_code = 'OWNER';
                 EXCEPTION
                   WHEN OTHERS THEN
                    l_party_id := NULL;
                   END;

                   IF l_party_id IS NOT NULL AND
                      l_internal_party_id IS NOT NULL AND
                      l_party_id <> l_internal_party_id
                   THEN
                      -- End addition by sk for fixing bug 2245976
                      csi_item_instance_pvt.Call_to_Contracts(
                              p_transaction_type   =>   'NEW'
                             ,p_instance_id        =>   x_new_instance_tbl(1).instance_id
                             ,p_new_instance_id    =>   NULL
                             ,p_vld_org_id         =>   x_new_instance_tbl(1).vld_organization_id
                             ,p_quantity           =>   NULL
                             ,p_party_account_id1  =>   NULL
                             ,p_party_account_id2  =>   NULL
                             ,p_transaction_date   =>   p_txn_rec.transaction_date -- For 3483763
                             ,p_source_transaction_date   =>   p_txn_rec.source_transaction_date -- For 3483763
                             ,p_oks_txn_inst_tbl   =>   px_oks_txn_inst_tbl
                             ,x_return_status      =>   x_return_status
                             ,x_msg_count          =>   x_msg_count
                             ,x_msg_data           =>   x_msg_data
                              );

                      IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS)
                      THEN
                         l_msg_index := 1;
                         l_msg_count := x_msg_count;
                         WHILE l_msg_count > 0 LOOP
                          x_msg_data := FND_MSG_PUB.GET
                                   (  l_msg_index,
                                      FND_API.G_FALSE
                                    );
                           csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                             l_msg_index := l_msg_index + 1;
                             l_msg_count := l_msg_count - 1;
                         END LOOP;
                         RAISE FND_API.G_EXC_ERROR;
                      END IF;
                      --
		      IF px_oks_txn_inst_tbl.count > 0 THEN
			 csi_gen_utility_pvt.dump_oks_txn_inst_tbl(px_oks_txn_inst_tbl);
			 csi_gen_utility_pvt.put_line('Calling OKS Core API...');
			 --
			 IF p_txn_rec.transaction_type_id = 3 THEN
			    l_batch_id := p_txn_rec.source_header_ref_id;
			    l_batch_type := p_txn_rec.source_group_ref;
			 ELSE
			    l_batch_id := NULL;
			    l_batch_type := NULL;
			 END IF;
			 --
                         UPDATE CSI_TRANSACTIONS
                         set contracts_invoked = 'Y'
                         where transaction_id = p_txn_rec.transaction_id;
                         --
			 OKS_IBINT_PUB.IB_interface
			    (
			      P_Api_Version           =>  1.0,
			      P_init_msg_list         =>  p_init_msg_list,
			      P_single_txn_date_flag  =>  'Y',
			      P_Batch_type            =>  l_batch_type,
			      P_Batch_ID              =>  l_batch_id,
			      P_OKS_Txn_Inst_tbl      =>  px_oks_txn_inst_tbl,
			      x_return_status         =>  x_return_status,
			      x_msg_count             =>  x_msg_count,
			      x_msg_data              =>  x_msg_data
			   );
			 --
			 IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
			    l_msg_index := 1;
			    l_msg_count := x_msg_count;
			    WHILE l_msg_count > 0 LOOP
			       x_msg_data := FND_MSG_PUB.GET
				       (  l_msg_index,
					  FND_API.G_FALSE        );
			       csi_gen_utility_pvt.put_line( 'Error from OKS_IBINT_PUB.IB_interface..');
			       csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
			       l_msg_index := l_msg_index + 1;
			       l_msg_count := l_msg_count - 1;
			    END LOOP;
			    RAISE FND_API.G_EXC_ERROR;
			 END IF;
		      END IF;
                   END IF;
           END IF;
          -- End Addition by sk for fixing the bug 2234365
      END IF;

   -- Copy child instances if desired
   IF (p_copy_inst_children = fnd_api.g_true) THEN

      p_rel_query_rec.object_id := p_source_instance_rec.instance_id;
      p_rel_query_rec.relationship_type_code := 'COMPONENT-OF';
      --
      IF p_rel_query_rec.object_id IS NOT NULL AND
         p_rel_query_rec.object_id <> FND_API.G_MISS_NUM THEN
        csi_ii_relationships_pvt.Get_Children
	 ( p_relationship_query_rec   => p_rel_query_rec,
	   p_rel_tbl                  => l_rel_tbl,
           p_depth                    => NULL,
	   p_active_relationship_only => FND_API.G_TRUE,
	   p_time_stamp               => FND_API.G_MISS_DATE,
           p_get_dfs                  => FND_API.G_FALSE,
           p_ii_relationship_level_tbl => l_ii_relationship_level_tbl,
	   x_return_status            => x_return_status,
	   x_msg_count                => x_msg_count,
	   x_msg_data                 => x_msg_data
	 );
         --
         IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
	    FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_CHILDREN_ERROR');
	    FND_MSG_PUB.Add;
	    RAISE FND_API.G_EXC_ERROR;
         END IF;
      END IF;
       --
     -- FOR inst_config_rec IN inst_children_cur( p_source_instance_rec.instance_id)
      IF l_rel_tbl.count > 0 THEN
         FOR j in l_rel_tbl.FIRST .. l_rel_tbl.LAST
         LOOP
              IF NOT(csi_Item_Instance_Vld_pvt.Val_and_get_inst_rec(
                     l_rel_tbl(j).SUBJECT_ID,
                     l_source_child_instance_rec)) THEN
                  RAISE FND_API.G_EXC_ERROR;
              END IF;

              IF l_source_child_instance_rec.vld_organization_id = l_par_vld_organization_id
              THEN
                 l_source_child_instance_rec.vld_organization_id := l_new_instance_rec.vld_organization_id;
              END IF;

              -- Added by rtalluri for the Bug: 2297972
	      IF l_source_child_instance_rec.serial_number IS NOT NULL
	      THEN
		 l_source_child_instance_rec.serial_number := NULL;
		 l_source_child_instance_rec.mfg_serial_number_flag := 'N';
		 l_source_child_instance_rec.creation_complete_flag := FND_API.G_MISS_CHAR;
              END IF;
              -- End of Addition by rtalluri for the Bug: 2297972
                    csi_item_instance_pvt.copy_single_item_instance
                     ( p_api_version                 => p_api_version
                      ,p_commit                      => fnd_api.g_false
                      ,p_init_msg_list               => p_init_msg_list
                      ,p_validation_level            => p_validation_level
                      ,p_source_instance_rec         => l_source_child_instance_rec
                      ,p_copy_ext_attribs            => p_copy_ext_attribs
                      ,p_copy_org_assignments        => p_copy_org_assignments
                      ,p_copy_parties                => p_copy_parties
                      ,p_copy_contacts               => p_copy_contacts
                      ,p_copy_accounts               => p_copy_accounts
                      ,p_copy_asset_assignments      => p_copy_asset_assignments
                      ,p_copy_pricing_attribs        => p_copy_pricing_attribs
                      ,p_call_from_split             => p_call_from_split
                      -- ,p_copy_inst_children          => fnd_api.g_false
                      ,p_txn_rec                     => p_txn_rec
                      ,x_new_instance_tbl            => l_new_child_instance_tbl
                      ,x_return_status               => x_return_status
                      ,x_msg_count                   => x_msg_count
                      ,x_msg_data                    => x_msg_data
                     );
                  IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                      FOR i in 1..x_msg_Count LOOP
                        FND_MSG_PUB.Get(p_msg_index     => i,
                                        p_encoded       => 'F',
                                        p_data          => x_msg_data,
                                        p_msg_index_out => x_msg_index_out );
                                        csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                     End LOOP;
                     RAISE fnd_api.g_exc_error;
                  ELSE
                     l_map_count := l_map_count + 1;
                     l_map_inst_tbl(l_map_count).old_instance_id := l_rel_tbl(j).subject_id;
                     l_map_inst_tbl(l_map_count).new_instance_id := l_new_child_instance_tbl(1).instance_id;
                  END IF;
       END LOOP;

       l_new_ii_relationship_tbl.DELETE;
       IF l_map_inst_tbl.count > 0
       THEN
          -- FOR inst_config_rec in inst_children_cur(p_source_instance_rec.instance_id)
           FOR j in l_rel_tbl.FIRST .. l_rel_tbl.LAST
           LOOP
              l_rel_count := l_rel_count + 1;
              l_new_ii_relationship_tbl(l_rel_count).relationship_type_code := l_rel_tbl(j).relationship_type_code;
              FOR map_row in l_map_inst_tbl.FIRST..l_map_inst_tbl.LAST
              LOOP
                 IF l_rel_tbl(j).subject_id = l_map_inst_tbl(map_row).old_instance_id
                 THEN
                    l_new_ii_relationship_tbl(l_rel_count).subject_id := l_map_inst_tbl(map_row).new_instance_id;
                    EXIT;
                 END IF;
              END LOOP;
            --
              FOR map_row in l_map_inst_tbl.FIRST..l_map_inst_tbl.LAST
              LOOP
                 IF l_rel_tbl(j).object_id = l_map_inst_tbl(map_row).old_instance_id
                 THEN
                    l_new_ii_relationship_tbl(l_rel_count).object_id := l_map_inst_tbl(map_row).new_instance_id;
                    EXIT;
                 END IF;
              END LOOP;
           END LOOP;
       END IF;

       -- Create the new configuration
       IF l_new_ii_relationship_tbl.count > 0
       THEN
         csi_ii_relationships_pvt.create_relationship
                        (  p_api_version            => p_api_version
                          ,p_commit                 => p_commit
                          ,p_init_msg_list          => p_init_msg_list
                          ,p_validation_level       => p_validation_level
                          ,p_relationship_tbl       => l_new_ii_relationship_tbl
                          ,p_txn_rec                => p_txn_rec
                          ,x_return_status          => x_return_status
                          ,x_msg_count              => x_msg_count
                          ,x_msg_data               => x_msg_data
                       );

                    IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                       FOR i in 1..x_msg_Count LOOP
                          FND_MSG_PUB.Get(p_msg_index     => i,
                                          p_encoded       => 'F',
                                          p_data          => x_msg_data,
                                          p_msg_index_out => x_msg_index_out );
                                          csi_gen_utility_pvt.put_line('message data = '||x_msg_data);
                       END LOOP;
                       RAISE fnd_api.g_exc_error;
                    END IF;
       END IF;
     END IF; -- l_rel_tbl count check
  END IF;

    -- Begin Add Code for Siebel Genesis Project
    csi_gen_utility_pvt.put_line('Calling Siebel Genesis Event in Copy Item Instance');

    IF l_raise_bes_event = 'Y' THEN
       BEGIN
          SELECT internal_party_id
          INTO   l_internal_party_id
          FROM   csi_install_parameters;
       EXCEPTION
          when no_data_found then
             l_internal_party_id := null;
       END;

       BEGIN
          SELECT owner_party_id
          INTO   l_owner_party_id
          FROM   csi_item_instances
          WHERE  instance_id = l_new_instance_rec.instance_id;
       EXCEPTION
          when no_data_found then
             l_owner_party_id := null;
       END;

       csi_gen_utility_pvt.put_line(' l_internal_party_Id = '||to_char(l_internal_party_id));
       csi_gen_utility_pvt.put_line(' l_party_Id = '||to_char(l_owner_party_id));
       csi_gen_utility_pvt.put_line(' fnd_api.g_miss_num = '||to_char(fnd_api.g_miss_num));
       IF l_internal_party_id <> l_owner_party_id THEN
          IF (l_new_instance_rec.last_oe_order_line_id IS NULL OR l_new_instance_rec.last_oe_order_line_id = fnd_api.g_miss_num) THEN
             csi_gen_utility_pvt.put_line('Firing the CREATE INSTANCE EVENT ');
             CSI_BUSINESS_EVENT_PVT.CREATE_INSTANCE_EVENT
                (p_api_version          => p_api_version
                 ,p_commit              => fnd_api.g_false
                 ,p_init_msg_list       => p_init_msg_list
                 ,p_validation_level    => p_validation_level
                 ,p_instance_id         => l_new_instance_rec.instance_id
                 ,p_subject_instance_id => null
                 ,x_return_status       => x_return_status
                 ,x_msg_count           => x_msg_count
                 ,x_msg_data            => x_msg_data
                );

             IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                l_msg_index := 1;
                l_msg_count := x_msg_count;

                WHILE l_msg_count > 0 LOOP
                   x_msg_data := FND_MSG_PUB.GET
                           (l_msg_index,
                            FND_API.G_FALSE );
                   csi_gen_utility_pvt.put_line('Error from CSI_BUSINESS_EVENT.CREATE_INSTANCE_EVENT');
                   csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                   l_msg_index := l_msg_index + 1;
                   l_msg_count := l_msg_count - 1;
                END LOOP;
                RAISE FND_API.G_EXC_ERROR;
             END IF;
          ELSIF (l_new_instance_rec.last_oe_order_line_id IS NOT NULL OR l_new_instance_rec.last_oe_order_line_id <> fnd_api.g_miss_num) THEN
             csi_gen_utility_pvt.put_line('Before link to line id ');
             BEGIN
                SELECT link_to_line_id, item_type_code
                INTO   l_link_to_line_id, l_item_type_code
                FROM   oe_order_lines_all
                WHERE  line_id = l_new_instance_rec.last_oe_order_line_id;
             EXCEPTION
                WHEN OTHERS THEN
                   l_link_to_line_id := null;
                   l_item_type_code := null;
             END;

             IF l_link_to_line_id is null and l_item_type_code = 'STANDARD' THEN
                CSI_BUSINESS_EVENT_PVT.CREATE_INSTANCE_EVENT
                   (p_api_version          => p_api_version
                    ,p_commit              => fnd_api.g_false
                    ,p_init_msg_list       => p_init_msg_list
                    ,p_validation_level    => p_validation_level
                    ,p_instance_id         => l_new_instance_rec.instance_id
                    ,p_subject_instance_id => null
                    ,x_return_status       => x_return_status
                    ,x_msg_count           => x_msg_count
                    ,x_msg_data            => x_msg_data
                   );

                IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                   l_msg_index := 1;
                   l_msg_count := x_msg_count;

                   WHILE l_msg_count > 0 LOOP
                      x_msg_data := FND_MSG_PUB.GET
                           (l_msg_index,
                            FND_API.G_FALSE );
                      csi_gen_utility_pvt.put_line('Error from CSI_BUSINESS_EVENT.CREATE_INSTANCE_EVENT');
                      csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                      l_msg_index := l_msg_index + 1;
                      l_msg_count := l_msg_count - 1;
                   END LOOP;
                   RAISE FND_API.G_EXC_ERROR;
                END IF;
             END IF;
          END IF;
       END IF;
    END IF;
  -- End Add Code for Siebel Genesis Project

  -- End of API body

         -- Standard check of p_commit
       IF FND_API.To_Boolean( p_commit ) THEN
               COMMIT WORK;
       END IF;


          -- Standard call to get message count and if count is  get message info.
          FND_MSG_PUB.Count_And_Get
          (p_encoded => FND_API.G_FALSE,
                 p_count       =>       x_msg_count ,
         p_data       =>       x_msg_data
           );
EXCEPTION

    WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO copy_item_instance;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                 );

      WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
            ROLLBACK TO copy_item_instance;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                 );

      WHEN OTHERS THEN
            ROLLBACK TO  copy_item_instance;
            x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
              IF       FND_MSG_PUB.Check_Msg_Level
                  (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
              THEN
                  FND_MSG_PUB.Add_Exc_Msg
                    (      G_PKG_NAME            ,
                          l_api_name
                     );
            END IF;

            FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count               =>      x_msg_count,
                    p_data                =>      x_msg_data
                );

END  copy_item_instance;



/*------------------------------------------------------------*/
/* Procedure name:   get_version_label_history                */
/* Description :     Procedure used to  get version lables    */
/*                   from history given a transaction_id      */
/*------------------------------------------------------------*/

PROCEDURE get_version_label_history
 (    p_api_version             IN  NUMBER
     ,p_commit                  IN  VARCHAR2
     ,p_init_msg_list           IN  VARCHAR2
     ,p_validation_level        IN  NUMBER
     ,p_transaction_id          IN  NUMBER
     ,x_version_label_hist_tbl  OUT NOCOPY csi_datastructures_pub.version_label_history_tbl
     ,x_return_status           OUT NOCOPY VARCHAR2
     ,x_msg_count               OUT NOCOPY NUMBER
     ,x_msg_data                OUT NOCOPY VARCHAR2
    )IS

     l_api_name      CONSTANT VARCHAR2(30)   := 'get_version_label_history' ;
     l_api_version   CONSTANT NUMBER         := 1.0                         ;
     l_csi_debug_level        NUMBER                                        ;
     x_msg_index_out          NUMBER                                        ;
     l_count                  NUMBER         := 0                           ;
     l_flag                   VARCHAR2(1)    :='N'                          ;
     i                        NUMBER :=1;

     CURSOR get_version_label_hist(i_transaction_id NUMBER)
     IS
     SELECT      vlh.VERSION_LABEL_HISTORY_ID,
                 vlh.VERSION_LABEL_ID,
                 vlh.TRANSACTION_ID   ,
                 vlh.OLD_VERSION_LABEL,
                 vlh.NEW_VERSION_LABEL,
                 vlh.OLD_DESCRIPTION  ,
                 vlh.NEW_DESCRIPTION  ,
                 vlh.OLD_DATE_TIME_STAMP,
                 vlh.NEW_DATE_TIME_STAMP,
                 vlh.OLD_ACTIVE_START_DATE,
                 vlh.NEW_ACTIVE_START_DATE,
                 vlh.OLD_ACTIVE_END_DATE ,
                 vlh.NEW_ACTIVE_END_DATE ,
                 vlh.OLD_CONTEXT        ,
                 vlh.NEW_CONTEXT        ,
                 vlh.OLD_ATTRIBUTE1     ,
                 vlh.NEW_ATTRIBUTE1     ,
                 vlh.OLD_ATTRIBUTE2     ,
                 vlh.NEW_ATTRIBUTE2     ,
                 vlh.OLD_ATTRIBUTE3     ,
                 vlh.NEW_ATTRIBUTE3     ,
                 vlh.OLD_ATTRIBUTE4     ,
                 vlh.NEW_ATTRIBUTE4     ,
                 vlh.OLD_ATTRIBUTE5     ,
                 vlh.NEW_ATTRIBUTE5     ,
                 vlh.OLD_ATTRIBUTE6     ,
                 vlh.NEW_ATTRIBUTE6     ,
                 vlh.OLD_ATTRIBUTE7     ,
                 vlh.NEW_ATTRIBUTE7     ,
                 vlh.OLD_ATTRIBUTE8     ,
                 vlh.NEW_ATTRIBUTE8     ,
                 vlh.OLD_ATTRIBUTE9     ,
                 vlh.NEW_ATTRIBUTE9     ,
                 vlh.OLD_ATTRIBUTE10    ,
                 vlh.NEW_ATTRIBUTE10    ,
                 vlh.OLD_ATTRIBUTE11    ,
                 vlh.NEW_ATTRIBUTE11    ,
                 vlh.OLD_ATTRIBUTE12    ,
                 vlh.NEW_ATTRIBUTE12    ,
                 vlh.OLD_ATTRIBUTE13    ,
                 vlh.NEW_ATTRIBUTE13    ,
                 vlh.OLD_ATTRIBUTE14    ,
                 vlh.NEW_ATTRIBUTE14    ,
                 vlh.OLD_ATTRIBUTE15    ,
                 vlh.NEW_ATTRIBUTE15    ,
                 vlh.FULL_DUMP_FLAG     ,
                 vlh.OBJECT_VERSION_NUMBER,
                 vl.INSTANCE_ID
     FROM     csi_i_version_labels_h vlh,
              csi_i_version_labels vl
     WHERE    vlh.transaction_id = i_transaction_id
     AND      vlh.version_label_id = vl.version_label_id;


BEGIN
        -- Standard Start of API savepoint
     --   SAVEPOINT   get_version_label_history;


        -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (    l_api_version           ,
                                                p_api_version           ,
                                                l_api_name              ,
                                                g_pkg_name              )
        THEN
           RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

        -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
                FND_MSG_PUB.initialize;
        END IF;

        --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option CSI_DEBUG_LEVEL for debug message reporting
        l_csi_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

        -- If CSI_DEBUG_LEVEL = 1 then dump the procedure name
        IF (l_csi_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line( 'get_version_label_history');
        END IF;

        -- If the debug level = 2 then dump all the parameters values.
        IF (l_csi_debug_level > 1) THEN
            csi_gen_utility_pvt.put_line(  'get_version_label_history'   ||
                                                 p_api_version           ||'-'||
                                                 p_commit                ||'-'||
                                                 p_init_msg_list         ||'-'||
                                                 p_validation_level      ||'-'||
                                                 p_transaction_id               );
             -- dump the in parameter in the log file

        END IF;

        /***** srramakr commented for bug # 3304439
        -- Check for the profile option and enable trace
        l_flag:=csi_gen_utility_pvt.enable_trace(l_trace_flag => l_flag);
        -- End enable trace
        ****/

        -- Start API body

        FOR C1 IN get_version_label_hist(p_transaction_id)
        LOOP




              x_version_label_hist_tbl(i).VERSION_LABEL_HISTORY_ID:= C1.VERSION_LABEL_HISTORY_ID;
              x_version_label_hist_tbl(i).VERSION_LABEL_ID       := C1.VERSION_LABEL_ID;
              x_version_label_hist_tbl(i).TRANSACTION_ID        := C1.TRANSACTION_ID;
              x_version_label_hist_tbl(i).OLD_VERSION_LABEL := C1.OLD_VERSION_LABEL;
              x_version_label_hist_tbl(i).NEW_VERSION_LABEL := C1.NEW_VERSION_LABEL;
              x_version_label_hist_tbl(i).OLD_DESCRIPTION  := C1.OLD_DESCRIPTION ;
              x_version_label_hist_tbl(i).NEW_DESCRIPTION := C1.NEW_DESCRIPTION;
              x_version_label_hist_tbl(i).OLD_DATE_TIME_STAMP := C1.OLD_DATE_TIME_STAMP ;
              x_version_label_hist_tbl(i).NEW_DATE_TIME_STAMP := C1.NEW_DATE_TIME_STAMP;
              x_version_label_hist_tbl(i).OLD_ACTIVE_START_DATE:= C1.OLD_ACTIVE_START_DATE;
              x_version_label_hist_tbl(i).NEW_ACTIVE_START_DATE:= C1.NEW_ACTIVE_START_DATE;
              x_version_label_hist_tbl(i).OLD_ACTIVE_END_DATE:= C1.OLD_ACTIVE_END_DATE;
              x_version_label_hist_tbl(i).NEW_ACTIVE_END_DATE:= C1.NEW_ACTIVE_END_DATE;
              x_version_label_hist_tbl(i).OLD_CONTEXT:= C1.OLD_CONTEXT;
              x_version_label_hist_tbl(i).NEW_CONTEXT:= C1.NEW_CONTEXT;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE1:= C1.OLD_ATTRIBUTE1;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE1:= C1.NEW_ATTRIBUTE1;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE2:= C1.OLD_ATTRIBUTE2;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE2:= C1.NEW_ATTRIBUTE2;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE3:= C1.OLD_ATTRIBUTE3;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE3:= C1.OLD_ATTRIBUTE3;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE4:= C1.OLD_ATTRIBUTE4;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE4:= C1.NEW_ATTRIBUTE4;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE5:= C1.OLD_ATTRIBUTE5;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE5:= C1.NEW_ATTRIBUTE5;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE6:= C1.OLD_ATTRIBUTE6;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE6:= C1.NEW_ATTRIBUTE6;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE7:= C1.OLD_ATTRIBUTE7;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE7:= C1.NEW_ATTRIBUTE7;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE8:= C1.OLD_ATTRIBUTE8;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE8:= C1.NEW_ATTRIBUTE8;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE9:= C1.OLD_ATTRIBUTE9;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE9:= C1.NEW_ATTRIBUTE9;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE10:= C1.OLD_ATTRIBUTE10;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE10:= C1.NEW_ATTRIBUTE10;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE11:= C1.OLD_ATTRIBUTE11;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE11:= C1.NEW_ATTRIBUTE11;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE12:= C1.OLD_ATTRIBUTE12;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE12:= C1.NEW_ATTRIBUTE12;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE13:= C1.OLD_ATTRIBUTE13;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE13:= C1.NEW_ATTRIBUTE13;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE14:= C1.OLD_ATTRIBUTE14;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE14:= C1.NEW_ATTRIBUTE14;
              x_version_label_hist_tbl(i).OLD_ATTRIBUTE15:= C1.OLD_ATTRIBUTE15;
              x_version_label_hist_tbl(i).NEW_ATTRIBUTE15:= C1.NEW_ATTRIBUTE15;
              x_version_label_hist_tbl(i).FULL_DUMP_FLAG:= C1.FULL_DUMP_FLAG;
              x_version_label_hist_tbl(i).OBJECT_VERSION_NUMBER := C1.OBJECT_VERSION_NUMBER;
              x_version_label_hist_tbl(i).INSTANCE_ID := C1.INSTANCE_ID;
              i := i + 1;

      END LOOP;

       -- End of API body

       -- Standard check of p_commit.
       /*
       IF FND_API.To_Boolean( p_commit ) THEN
             COMMIT WORK;
       END IF;
       */

       /***** srramakr commented for bug # 3304439
       -- Check for the profile option and disable the trace
       IF (l_flag = 'Y') THEN
            dbms_session.set_sql_trace(false);
       END IF;
       -- End disable trace
       ****/

       -- Standard call to get message count and if count is  get message info.
       FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count ,
                 p_data         =>      x_msg_data   );
EXCEPTION
        WHEN FND_API.G_EXC_ERROR THEN
             --   ROLLBACK TO get_version_label_history;
                x_return_status := FND_API.G_RET_STS_ERROR ;
                FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                    p_data    =>      x_msg_data );
        WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
              --  ROLLBACK TO get_version_label_history;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                    p_data    =>      x_msg_data  );
        WHEN OTHERS THEN
              --  ROLLBACK TO get_version_label_history;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                IF      FND_MSG_PUB.Check_Msg_Level(FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR) THEN
                FND_MSG_PUB.Add_Exc_Msg
                (       g_pkg_name          ,
                        l_api_name           );
                END IF;
                FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                  p_data      =>      x_msg_data  );

END get_version_label_history;

/*----------------------------------------------------*/
/* Procedure name: get_instance_link_locations        */
/* Description :   procedure to                       */
/*                 get an Item Instance               */
/*----------------------------------------------------*/

PROCEDURE get_instance_link_locations
 (
      p_api_version          IN  NUMBER
     ,p_commit               IN  VARCHAR2
     ,p_init_msg_list        IN  VARCHAR2
     ,p_validation_level     IN  NUMBER
     ,p_instance_id          IN  NUMBER
     ,x_instance_link_rec    OUT NOCOPY csi_datastructures_pub.instance_link_rec
     ,x_return_status        OUT NOCOPY VARCHAR2
     ,x_msg_count            OUT NOCOPY NUMBER
     ,x_msg_data             OUT NOCOPY VARCHAR2
    )IS

    l_api_name               CONSTANT VARCHAR2(30)   := 'GET_INSTANCE_LINK_LOCATIONS';
    l_api_version            CONSTANT NUMBER         := 1.0;
    l_debug_level            NUMBER;
    l_flag                   VARCHAR2(1)             := 'N';
    l_instance_header_tbl    csi_datastructures_pub.instance_header_tbl;

 BEGIN
    -- Standard Start of API savepoint
      -- SAVEPOINT  get_instance_link_locations;

    -- Check for freeze_flag in csi_install_parameters is set to 'Y'
       csi_utility_grp.check_ib_active;

    -- Standard call to check for call compatibility.
       IF NOT FND_API.Compatible_API_Call (l_api_version,
                                            p_api_version,
                                            l_api_name,
                                            G_PKG_NAME    )
       THEN
               RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
       END IF;

    -- Initialize message list if p_init_msg_list is set to TRUE.
       IF FND_API.to_Boolean( p_init_msg_list ) THEN
               FND_MSG_PUB.initialize;
       END IF;

    -- Initialize API return status to success
       x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Check the profile option debug_level for debug message reporting
       l_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

    -- If debug_level = 1 then dump the procedure name
       IF (l_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line( 'get_instance_link_locations');
       END IF;

    -- If the debug level = 2 then dump all the parameters values.
       IF (l_debug_level > 1) THEN
            csi_gen_utility_pvt.put_line( 'get_instance_link_locations'         ||
                                          p_api_version           ||'-'||
                                          p_commit                ||'-'||
                                          p_init_msg_list         ||'-'||
                                          p_validation_level            );
         -- dump the query records into a log file
            csi_gen_utility_pvt.put_line(p_instance_id);
       END IF;

    /***** srramakr commented for bug # 3304439
    -- Check for the profile option and enable trace
       l_flag:=CSI_GEN_UTILITY_PVT.enable_trace(l_trace_flag => l_flag);
    -- End enable trace
    ****/

    -- Start API body
       IF   (p_instance_id IS NULL)
       THEN
             FND_MESSAGE.Set_Name('CSI', 'CSI_API_INVALID_INSTANCE_ID');
             FND_MESSAGE.Set_Token('INSTANCE_ID', p_instance_id);
             FND_MSG_PUB.ADD;
             RAISE FND_API.G_EXC_ERROR;
       END IF;

       l_instance_header_tbl(1).instance_id := p_instance_id;

       BEGIN
         SELECT last_vld_organization_id,
                inventory_item_id
         INTO   l_instance_header_tbl(1).vld_organization_id,
                l_instance_header_tbl(1).inventory_item_id
         FROM   csi_item_instances
         WHERE  instance_id =l_instance_header_tbl(1).instance_id;
      EXCEPTION
         WHEN OTHERS THEN
          NULL;
      END;

      csi_item_instance_vld_pvt.get_link_locations
                             (
                               p_instance_header_tbl => l_instance_header_tbl,
                               x_return_status       => x_return_status
                             );
      IF NOT x_return_status = FND_API.G_RET_STS_SUCCESS THEN
         RAISE FND_API.G_EXC_ERROR;
      END IF;

        x_instance_link_rec.instance_id           := l_instance_header_tbl(1).instance_id;
        x_instance_link_rec.start_loc_address1    := l_instance_header_tbl(1).start_loc_address1;
        x_instance_link_rec.start_loc_address2    := l_instance_header_tbl(1).start_loc_address2;
        x_instance_link_rec.start_loc_address3    := l_instance_header_tbl(1).start_loc_address3;
        x_instance_link_rec.start_loc_address4    := l_instance_header_tbl(1).start_loc_address4;
        x_instance_link_rec.start_loc_city        := l_instance_header_tbl(1).start_loc_city;
        x_instance_link_rec.start_loc_state       := l_instance_header_tbl(1).start_loc_state;
        x_instance_link_rec.start_loc_postal_code := l_instance_header_tbl(1).start_loc_postal_code;
        x_instance_link_rec.start_loc_country     := l_instance_header_tbl(1).start_loc_country;

        x_instance_link_rec.end_loc_address1      := l_instance_header_tbl(1).end_loc_address1;
        x_instance_link_rec.end_loc_address2      := l_instance_header_tbl(1).end_loc_address2;
        x_instance_link_rec.end_loc_address3      := l_instance_header_tbl(1).end_loc_address3;
        x_instance_link_rec.end_loc_address4      := l_instance_header_tbl(1).end_loc_address4;
        x_instance_link_rec.end_loc_city          := l_instance_header_tbl(1).end_loc_city;
        x_instance_link_rec.end_loc_state         := l_instance_header_tbl(1).end_loc_state;
        x_instance_link_rec.end_loc_postal_code   := l_instance_header_tbl(1).end_loc_postal_code;
        x_instance_link_rec.end_loc_country       := l_instance_header_tbl(1).end_loc_country;

   -- End of API body
   -- Standard check of p_commit.
   /*
      IF FND_API.To_Boolean( p_commit ) THEN
          COMMIT WORK;
      END IF;
      */
    /***** srramakr commented for bug # 3304439
   -- Check for the profile option and disable the trace
      IF (l_flag = 'Y') THEN
          dbms_session.set_sql_trace(FALSE);
      END IF;
   -- End disable trace
   ****/

   -- Standard call to get message count and if count is  get message info.
      FND_MSG_PUB.Count_And_Get
                   (p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count ,
                    p_data         =>      x_msg_data
                    );

EXCEPTION

        WHEN FND_API.G_EXC_ERROR THEN
           --     ROLLBACK TO get_instance_link_locations;
                x_return_status := FND_API.G_RET_STS_ERROR ;
                FND_MSG_PUB.Count_And_Get
                     (  p_encoded => FND_API.G_FALSE,
                 p_count     =>     x_msg_count,
                        p_data      =>     x_msg_data );
        WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
             --   ROLLBACK TO get_instance_link_locations;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                FND_MSG_PUB.Count_And_Get
                     ( p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                       p_data      =>      x_msg_data  );
        WHEN OTHERS THEN
            --    ROLLBACK TO get_instance_link_locations;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                IF FND_MSG_PUB.Check_Msg_Level
                     ( FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
                THEN
                   FND_MSG_PUB.Add_Exc_Msg
                     ( G_PKG_NAME, l_api_name );
                END IF;
                FND_MSG_PUB.Count_And_Get
                     ( p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                       p_data      =>      x_msg_data  );

END get_instance_link_locations;

PROCEDURE Update_version_time
 (
     p_api_version           IN     NUMBER
    ,p_commit                IN     VARCHAR2
    ,p_init_msg_list         IN     VARCHAR2
    ,p_validation_level      IN     NUMBER
    ,p_txn_rec               IN OUT NOCOPY csi_datastructures_pub.transaction_rec
    ,x_return_status         OUT NOCOPY   VARCHAR2
    ,x_msg_count             OUT NOCOPY   NUMBER
    ,x_msg_data              OUT NOCOPY   VARCHAR2)
     IS
CURSOR c_ver_csr (p_txn_id NUMBER) IS
  SELECT cv.version_label_id      version_label_id
        ,cv.object_version_number object_version_number
        ,cv.instance_id instance_id
  FROM   csi_i_version_labels cv,
         csi_i_version_labels_h ch
  WHERE  cv.version_label_id=ch.version_label_id
  AND    ch.transaction_id=p_txn_id;
  l_sysdate               DATE :=SYSDATE;
  l_return_status         VARCHAR2(1);
  l_msg_data              VARCHAR2(2000);
  l_msg_count             NUMBER;
  l_msg_index             NUMBER;
  l_version_label_rec     csi_datastructures_pub.version_label_rec;
  l_temp_label_rec        csi_datastructures_pub.version_label_rec;
BEGIN
        SAVEPOINT   Update_version_time;

        x_return_status := FND_API.G_RET_STS_SUCCESS;

      FOR l_ver_csr IN c_ver_csr(p_txn_rec.transaction_id)
      LOOP
         l_version_label_rec:=l_temp_label_rec;
         l_version_label_rec.version_label_id:=l_ver_csr.version_label_id;
         l_version_label_rec.date_time_stamp:=l_sysdate;
         l_version_label_rec.object_version_number:=l_ver_csr.object_version_number;
           csi_item_instance_pvt.update_version_label
            ( p_api_version             => p_api_version
             ,p_commit                  => p_commit
             ,p_init_msg_list           => p_init_msg_list
             ,p_validation_level        => p_validation_level
             ,p_version_label_rec       => l_version_label_rec
             ,p_txn_rec                 => p_txn_rec
             ,p_call_transaction        => fnd_api.g_false
             ,x_return_status           => l_return_status
             ,x_msg_count               => l_msg_count
             ,x_msg_data                => l_msg_data);

           IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
                     l_msg_index := 1;
                     l_msg_count := x_msg_count;
               WHILE l_msg_count > 0 LOOP
                          x_msg_data := FND_MSG_PUB.GET
                          (  l_msg_index,
                                         FND_API.G_FALSE        );
                  csi_gen_utility_pvt.put_line( ' Error from update_version_label..');
                  csi_gen_utility_pvt.put_line('MESSAGE DATA = '||x_msg_data);
                   l_msg_index := l_msg_index + 1;
                   l_msg_count := l_msg_count - 1;
               END LOOP;
                RAISE FND_API.G_EXC_ERROR;
           END IF;
      END LOOP;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        NULL;
   WHEN FND_API.G_EXC_ERROR THEN
            ROLLBACK TO Update_version_time;
            x_return_status := FND_API.G_RET_STS_ERROR ;
            FND_MSG_PUB.Count_And_Get
            (   p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                p_data    =>      x_msg_data );
   WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
                ROLLBACK TO Update_version_time;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                FND_MSG_PUB.Count_And_Get
                (   p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                    p_data    =>      x_msg_data  );
END Update_version_time;

PROCEDURE get_config_keys
    (p_instance_id     IN  NUMBER,
     p_config_rec      OUT NOCOPY csi_item_instance_pvt.lock_config_rec
    )
IS
BEGIN
    SELECT config_inst_hdr_id
          ,config_inst_rev_num
          ,config_inst_item_id
      INTO p_config_rec.config_inst_hdr_id
          ,p_config_rec.config_inst_rev_num
          ,p_config_rec.config_inst_item_id
      FROM csi_item_instances
     WHERE instance_id=p_instance_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
END get_config_keys;

PROCEDURE get_instance_lock_status
(    p_instance_id         IN   NUMBER ,
     p_lock_status         OUT NOCOPY  NUMBER
) IS
 l_lock_status   NUMBER :=0;
BEGIN
    SELECT lock_status
      INTO p_lock_status
      FROM csi_item_instance_locks
     WHERE lock_status <> l_lock_status
       AND instance_id=p_instance_id;
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
     p_lock_status  := l_lock_status;
  WHEN TOO_MANY_ROWS THEN
    csi_gen_utility_pvt.put_line ('In csi_item_instance_pvt.get_instance_lock_status - too_many_rows exception ');
     p_lock_status := 2;
END get_instance_lock_status;

-- Return TRUE if instance is locked
FUNCTION check_item_instance_lock
(    p_instance_id         IN  NUMBER ,
     p_config_inst_hdr_id  IN  NUMBER ,
     p_config_inst_item_id IN  NUMBER ,
     p_config_inst_rev_num IN  NUMBER
) RETURN BOOLEAN IS
 l_return_value  BOOLEAN := FALSE;
 l_lock_id       NUMBER;
 l_lock_status   NUMBER :=0;
BEGIN
 IF p_instance_id IS NOT NULL AND
    p_instance_id <> fnd_api.g_miss_num
 THEN
     BEGIN
        SELECT lock_id
          INTO l_lock_id
          FROM csi_item_instance_locks
         WHERE lock_status IS NOT NULL
           AND lock_status <> l_lock_status
           AND instance_id=p_instance_id;
    l_return_value := TRUE;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           l_return_value  := FALSE;
      WHEN TOO_MANY_ROWS THEN
           l_return_value := TRUE;
     END;
 ELSIF (p_config_inst_hdr_id IS NOT NULL AND
        p_config_inst_hdr_id <> fnd_api.g_miss_num AND
        p_config_inst_item_id IS NOT NULL AND
        p_config_inst_item_id <> fnd_api.g_miss_num AND
        p_config_inst_rev_num IS NOT NULL AND
        p_config_inst_rev_num <> fnd_api.g_miss_num )
 THEN
     BEGIN
        SELECT lock_id
          INTO l_lock_id
          FROM csi_item_instance_locks
         WHERE lock_status IS NOT NULL
           AND lock_status <> l_lock_status
           AND config_inst_hdr_id  = p_config_inst_hdr_id
           AND config_inst_rev_num = p_config_inst_rev_num
           AND config_inst_item_id = p_config_inst_item_id;
    l_return_value := TRUE;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           l_return_value  := FALSE;
      WHEN TOO_MANY_ROWS THEN
           l_return_value := TRUE;
     END;
 END IF;
 RETURN l_return_value;
END check_item_instance_lock;


PROCEDURE lock_item_instances
 (
     p_api_version           IN   NUMBER
    ,p_commit                IN   VARCHAR2
    ,p_init_msg_list         IN   VARCHAR2
    ,p_validation_level      IN   NUMBER
    ,px_config_tbl           IN   OUT NOCOPY csi_cz_int.config_tbl
--    ,p_txn_rec               IN   OUT NOCOPY csi_datastructures_pub.transaction_rec
    ,x_return_status         OUT  NOCOPY VARCHAR2
    ,x_msg_count             OUT  NOCOPY NUMBER
    ,x_msg_data              OUT  NOCOPY VARCHAR2
 )
AS
l_api_name         CONSTANT VARCHAR2(30)   := 'LOCK_ITEM_INSTANCES';
l_api_version      CONSTANT NUMBER         := 1.0;
l_csi_debug_level  NUMBER;
l_rel_type_code    VARCHAR2(30) := 'COMPONENT-OF';
l_root_node        NUMBER;
l_config_tbl       csi_cz_int.config_tbl := px_config_tbl;
l_count            NUMBER;
l_rel_tbl          csi_datastructures_pub.ii_relationship_tbl;
l_ii_relationship_level_tbl csi_ii_relationships_pvt.ii_relationship_level_tbl;
l_rel_query_rec    csi_datastructures_pub.relationship_query_rec;
l_lock_tbl         CSI_ITEM_INSTANCE_PVT.lock_instances_tbl; --csi_cz_int.config_tbl;
l_root             NUMBER:=0;
l_found            VARCHAR2(1):='N';
l_root_hdr_id      NUMBER;
l_root_item_id     NUMBER;
l_root_rev_num     NUMBER;
l_lock_config_rec  csi_item_instance_pvt.lock_config_rec;
l_lock_count       NUMBER;
l_lock_id          NUMBER;
l_dup_count        NUMBER;
BEGIN

  SAVEPOINT    csi_lock_item_instance;


        -- Check for freeze_flag in csi_install_parameters is set to 'Y'

     csi_utility_grp.check_ib_active;

        -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (    l_api_version           ,
                                                p_api_version           ,
                                                l_api_name              ,
                                                g_pkg_name              )
        THEN
                RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

        -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
                FND_MSG_PUB.initialize;
        END IF;

        --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option CSI_DEBUG_LEVEL for debug message reporting
        l_csi_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

        -- If CSI_DEBUG_LEVEL = 1 then dump the procedure name
        IF (l_csi_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line( 'lock_item_instances');
        END IF;


        -- If the debug level = 2 then dump all the parameters values.
        IF (l_csi_debug_level > 1) THEN
               csi_gen_utility_pvt.put_line( 'lock_item_instances'||
                                                   p_api_version           ||'-'||
                                                   p_commit                ||'-'||
                                                   p_init_msg_list         ||'-'||
                                                   p_validation_level            );
               -- Dump the records in the log file
          IF px_config_tbl.COUNT > 0
          THEN
           FOR tab_row IN px_config_tbl.FIRST .. px_config_tbl.LAST
           LOOP
             csi_gen_utility_pvt.put_line('                                         ');
             csi_gen_utility_pvt.put_line('Dumping the values for config tbl Rec # :'||tab_row);
             csi_gen_utility_pvt.put_line('source_application_id    :'||px_config_tbl(tab_row).source_application_id);
             csi_gen_utility_pvt.put_line('source_txn_header_ref    :'||px_config_tbl(tab_row).source_txn_header_ref);
             csi_gen_utility_pvt.put_line('source_txn_line_ref1     :'||px_config_tbl(tab_row).source_txn_line_ref1);
             csi_gen_utility_pvt.put_line('source_txn_line_ref2     :'||px_config_tbl(tab_row).source_txn_line_ref2);
             csi_gen_utility_pvt.put_line('source_txn_line_ref3     :'||px_config_tbl(tab_row).source_txn_line_ref3);
             csi_gen_utility_pvt.put_line('instance_id              :'||px_config_tbl(tab_row).instance_id);
             csi_gen_utility_pvt.put_line('lock_id                  :'||px_config_tbl(tab_row).lock_id);
             csi_gen_utility_pvt.put_line('config_inst_hdr_id       :'||px_config_tbl(tab_row).config_inst_hdr_id);
             csi_gen_utility_pvt.put_line('config_inst_item_id      :'||px_config_tbl(tab_row).config_inst_item_id);
             csi_gen_utility_pvt.put_line('config_inst_rev_num      :'||px_config_tbl(tab_row).config_inst_rev_num);
             csi_gen_utility_pvt.put_line('lock_status              :'||px_config_tbl(tab_row).lock_status);
           END LOOP;
          END IF;
               --csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
        END IF;

  l_lock_tbl.DELETE;

 IF px_config_tbl.count > 0
 THEN
  FOR i IN px_config_tbl.FIRST .. px_config_tbl.LAST
  LOOP
   IF px_config_tbl.EXISTS(i)
   THEN
    IF (px_config_tbl(i).instance_id IS NOT NULL AND
        px_config_tbl(i).instance_id <> fnd_api.g_miss_num) OR
       (px_config_tbl(i).config_inst_hdr_id IS NOT NULL AND
        px_config_tbl(i).config_inst_hdr_id <> fnd_api.g_miss_num AND
        px_config_tbl(i).config_inst_item_id IS NOT NULL AND
        px_config_tbl(i).config_inst_item_id <> fnd_api.g_miss_num AND
        px_config_tbl(i).config_inst_rev_num IS NOT NULL AND
        px_config_tbl(i).config_inst_rev_num <> fnd_api.g_miss_num )
    THEN

     -- Check for duplicate instances
    IF (px_config_tbl(i).instance_id IS NOT NULL AND
        px_config_tbl(i).instance_id <> fnd_api.g_miss_num)
    THEN
      l_dup_count:=0;
      FOR dup_csr IN px_config_tbl.FIRST .. px_config_tbl.LAST
      LOOP
          IF (px_config_tbl(dup_csr).instance_id IS NOT NULL AND
              px_config_tbl(dup_csr).instance_id <> fnd_api.g_miss_num AND
              px_config_tbl(dup_csr).instance_id = px_config_tbl(i).instance_id)
          THEN
             l_dup_count := l_dup_count +1;
          END IF;
      END LOOP;

      IF  l_dup_count > 1
      THEN
        FND_MESSAGE.SET_NAME('CSI','CSI_DUPLICATE_INS_KEY');
        FND_MESSAGE.SET_TOKEN('INSTANCE_ID',px_config_tbl(i).instance_id);
        FND_MSG_PUB.Add;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
    END IF;

     -- Check for duplicate config keys
    IF (px_config_tbl(i).config_inst_hdr_id IS NOT NULL AND
        px_config_tbl(i).config_inst_hdr_id <> fnd_api.g_miss_num AND
        px_config_tbl(i).config_inst_item_id IS NOT NULL AND
        px_config_tbl(i).config_inst_item_id <> fnd_api.g_miss_num AND
        px_config_tbl(i).config_inst_rev_num IS NOT NULL AND
        px_config_tbl(i).config_inst_rev_num <> fnd_api.g_miss_num )
    THEN
      l_dup_count:=0;
      FOR dup_csr IN px_config_tbl.FIRST .. px_config_tbl.LAST
      LOOP
          IF (px_config_tbl(dup_csr).config_inst_hdr_id IS NOT NULL AND
              px_config_tbl(dup_csr).config_inst_hdr_id <> fnd_api.g_miss_num AND
              px_config_tbl(dup_csr).config_inst_hdr_id =px_config_tbl(i).config_inst_hdr_id) AND
             (px_config_tbl(dup_csr).config_inst_item_id IS NOT NULL AND
              px_config_tbl(dup_csr).config_inst_item_id <> fnd_api.g_miss_num AND
              px_config_tbl(dup_csr).config_inst_item_id=px_config_tbl(i).config_inst_item_id) AND
             (px_config_tbl(dup_csr).config_inst_rev_num IS NOT NULL AND
              px_config_tbl(dup_csr).config_inst_rev_num <> fnd_api.g_miss_num AND
              px_config_tbl(dup_csr).config_inst_rev_num=px_config_tbl(i).config_inst_rev_num)
          THEN
             l_dup_count := l_dup_count +1;
          END IF;
      END LOOP;

      IF  l_dup_count > 1
      THEN
            FND_MESSAGE.SET_NAME('CSI','CSI_DUPLICATE_KEYS_LOCKED');
            FND_MESSAGE.SET_TOKEN('CONFIG_INST_HDR_ID',px_config_tbl(i).config_inst_hdr_id);
            FND_MESSAGE.SET_TOKEN('CONFIG_INST_ITEM_ID',px_config_tbl(i).config_inst_item_id);
            FND_MESSAGE.SET_TOKEN('CONFIG_INST_REV_NUM',px_config_tbl(i).config_inst_rev_num);
            FND_MSG_PUB.Add;
            RAISE FND_API.G_EXC_ERROR;
      END IF;
    END IF;


     IF (px_config_tbl(i).instance_id IS NOT NULL AND
         px_config_tbl(i).instance_id <> fnd_api.g_miss_num)
     THEN
      IF csi_item_instance_pvt.check_item_instance_lock (p_instance_id => px_config_tbl(i).instance_id)
      THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_INS_ALREADY_LOCKED');
         FND_MESSAGE.SET_TOKEN('INSTANCE_ID',px_config_tbl(i).instance_id);
         FND_MSG_PUB.Add;
         RAISE FND_API.G_EXC_ERROR;
      ELSE
        l_found:='N';
        IF l_lock_tbl.COUNT > 0
        THEN
         FOR j IN l_lock_tbl.FIRST .. l_lock_tbl.LAST
         LOOP
          IF (l_lock_tbl(j).instance_id IS NOT NULL AND
              l_lock_tbl(j).instance_id <> fnd_api.g_miss_num) AND
              l_lock_tbl(j).instance_id=px_config_tbl(i).instance_id
          THEN
           l_found:='Y';
          END IF;
         END LOOP;
        END IF;

        IF l_found='N'
        THEN

          csi_ii_relationships_pvt.get_top_most_parent
          ( p_subject_id      => px_config_tbl(i).instance_id,
            p_rel_type_code   => l_rel_type_code,
            p_object_id       => l_root_node
           );


        l_rel_query_rec.object_id := l_root_node;
        l_rel_query_rec.relationship_type_code := l_rel_type_code;

         csi_ii_relationships_pvt.get_children
          ( p_relationship_query_rec    => l_rel_query_rec,
            p_rel_tbl                   => l_rel_tbl,
            p_depth                     => NULL,
            p_active_relationship_only  => FND_API.G_TRUE,
            p_config_only               => FND_API.G_TRUE,
            p_time_stamp                => FND_API.G_MISS_DATE,
            p_get_dfs                   => FND_API.G_FALSE,
            p_ii_relationship_level_tbl => l_ii_relationship_level_tbl,
		    x_return_status             => x_return_status,
            x_msg_count                 => x_msg_count,
            x_msg_data                  => x_msg_data
		   );


           IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_API_GET_CHILDREN_ERROR');
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
          l_lock_count:=l_lock_tbl.COUNT+1;
          l_lock_tbl(l_lock_count).instance_id:=l_root_node;
          l_lock_tbl(l_lock_count).root_instance_id:=l_root_node;
          l_root_hdr_id := null;
          l_root_item_id:= null;
          l_root_rev_num:= null;
         FOR l_root_config IN px_config_tbl.FIRST .. px_config_tbl.LAST
         LOOP
          IF px_config_tbl(l_root_config).instance_id=l_root_node
          THEN
            l_lock_tbl(l_lock_count).root_config_inst_hdr_id := px_config_tbl(l_root_config).config_inst_hdr_id;
            l_lock_tbl(l_lock_count).root_config_inst_item_id:= px_config_tbl(l_root_config).config_inst_item_id;
            l_lock_tbl(l_lock_count).root_config_inst_rev_num:= px_config_tbl(l_root_config).config_inst_rev_num;
            l_root_hdr_id := px_config_tbl(l_root_config).config_inst_hdr_id;
            l_root_item_id:= px_config_tbl(l_root_config).config_inst_item_id;
            l_root_rev_num:= px_config_tbl(l_root_config).config_inst_rev_num;
           EXIT;
          END IF;
         END LOOP;

         IF l_rel_tbl.COUNT>0
         THEN
          FOR l_chld_csr IN l_rel_tbl.FIRST .. l_rel_tbl.LAST
          LOOP
           l_lock_count:=l_lock_tbl.COUNT+1;
           l_lock_tbl(l_lock_count).instance_id:=l_rel_tbl(l_chld_csr).subject_id;
            IF csi_item_instance_pvt.check_item_instance_lock (p_instance_id => l_rel_tbl(l_chld_csr).subject_id)
            THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_INS_ALREADY_LOCKED');
              FND_MESSAGE.SET_TOKEN('INSTANCE_ID',l_lock_tbl(l_lock_count).instance_id);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
            END IF;
           l_lock_tbl(l_lock_count).root_instance_id:=l_root_node;
           l_lock_tbl(l_lock_count).root_config_inst_hdr_id := l_root_hdr_id;
           l_lock_tbl(l_lock_count).root_config_inst_item_id:= l_root_item_id;
           l_lock_tbl(l_lock_count).root_config_inst_rev_num:= l_root_rev_num;
          END LOOP;
         END IF;
        END IF;
      END IF;
     ELSIF (px_config_tbl(i).config_inst_hdr_id IS NOT NULL AND
            px_config_tbl(i).config_inst_hdr_id <> fnd_api.g_miss_num AND
            px_config_tbl(i).config_inst_item_id IS NOT NULL AND
            px_config_tbl(i).config_inst_item_id <> fnd_api.g_miss_num AND
            px_config_tbl(i).config_inst_rev_num IS NOT NULL AND
            px_config_tbl(i).config_inst_rev_num <> fnd_api.g_miss_num )
     THEN
       IF csi_item_instance_pvt.check_item_instance_lock ( p_config_inst_hdr_id  => px_config_tbl(i).config_inst_hdr_id
                                        ,p_config_inst_item_id => px_config_tbl(i).config_inst_item_id
                                        ,p_config_inst_rev_num => px_config_tbl(i).config_inst_rev_num
                                        )
       THEN
         FND_MESSAGE.SET_NAME('CSI','CSI_CONFIG_KEYS_LOCKED');
         FND_MESSAGE.SET_TOKEN('CONFIG_INST_HDR_ID',px_config_tbl(i).config_inst_hdr_id);
         FND_MESSAGE.SET_TOKEN('CONFIG_INST_ITEM_ID',px_config_tbl(i).config_inst_item_id);
         FND_MESSAGE.SET_TOKEN('CONFIG_INST_REV_NUM',px_config_tbl(i).config_inst_rev_num);
         FND_MSG_PUB.Add;
         RAISE FND_API.G_EXC_ERROR;
       ELSE
        l_lock_count:=l_lock_tbl.COUNT+1;
        l_lock_tbl(l_lock_count).config_inst_hdr_id    :=px_config_tbl(i).config_inst_hdr_id;
        l_lock_tbl(l_lock_count).config_inst_item_id   :=px_config_tbl(i).config_inst_item_id;
        l_lock_tbl(l_lock_count).config_inst_rev_num   :=px_config_tbl(i).config_inst_rev_num;
        l_lock_tbl(l_lock_count).source_application_id :=px_config_tbl(i).source_application_id;
        l_lock_tbl(l_lock_count).source_txn_header_ref :=px_config_tbl(i).source_txn_header_ref;

        BEGIN
          SELECT instance_hdr_id  -- root_config_hdr_id
                ,config_item_id   -- root_config_item_id
                ,instance_rev_nbr -- root_config_rev_nbr
          INTO   l_lock_tbl(l_lock_count).root_config_inst_hdr_id
                ,l_lock_tbl(l_lock_count).root_config_inst_item_id
                ,l_lock_tbl(l_lock_count).root_config_inst_rev_num
          FROM   cz_config_items czItems
          WHERE  czItems.instance_hdr_id  = px_config_tbl(i).config_inst_hdr_id
          AND    czItems.instance_rev_nbr = px_config_tbl(i).config_inst_rev_num
          AND    czItems.component_instance_type = 'I'  -- I = Root instance
          AND    czItems.deleted_flag = '0';
        EXCEPTION
          WHEN OTHERS THEN
             NULL;
        END;

        --l_lock_tbl(l_lock_count).root_config_inst_hdr_id := px_config_tbl(i).config_inst_hdr_id;
        --l_lock_tbl(l_lock_count).root_config_inst_item_id:= px_config_tbl(i).config_inst_item_id;
        --l_lock_tbl(l_lock_count).root_config_inst_rev_num:= px_config_tbl(i).config_inst_rev_num;
        l_lock_tbl(l_lock_count).lock_status:=2;
        px_config_tbl(i).lock_status:=2;
       END IF;
     END IF;
    ELSE
         FND_MESSAGE.SET_NAME('CSI','CSI_PASSED_INVALID_KEYS');
         FND_MSG_PUB.Add;
         RAISE FND_API.G_EXC_ERROR;
    END IF;

   END IF;
  END LOOP;
 END IF;

   IF l_lock_tbl.COUNT > 0
   THEN
    FOR root IN l_lock_tbl.FIRST .. l_lock_tbl.LAST
    LOOP
    IF l_lock_tbl.EXISTS(root)
    THEN
     IF (l_lock_tbl(root).root_config_inst_hdr_id IS NOT NULL AND
         l_lock_tbl(root).root_config_inst_hdr_id <> fnd_api.g_miss_num AND
         l_lock_tbl(root).root_config_inst_item_id IS NOT NULL AND
         l_lock_tbl(root).root_config_inst_item_id <> fnd_api.g_miss_num AND
         l_lock_tbl(root).root_config_inst_rev_num IS NOT NULL AND
         l_lock_tbl(root).root_config_inst_rev_num <> fnd_api.g_miss_num ) AND
        (l_lock_tbl(root).instance_id IS NULL OR
         l_lock_tbl(root).instance_id = fnd_api.g_miss_num)
     THEN
        FOR chd IN l_lock_tbl.FIRST .. l_lock_tbl.LAST
        LOOP
           IF ( (l_lock_tbl(chd).root_config_inst_hdr_id IS NULL OR
                 l_lock_tbl(chd).root_config_inst_hdr_id = fnd_api.g_miss_num) AND
                (l_lock_tbl(chd).root_config_inst_item_id IS NULL OR
                 l_lock_tbl(chd).root_config_inst_item_id = fnd_api.g_miss_num) AND
                (l_lock_tbl(chd).root_config_inst_rev_num IS NULL OR
                 l_lock_tbl(chd).root_config_inst_rev_num = fnd_api.g_miss_num)) AND
              (  l_lock_tbl(chd).instance_id IS NULL OR
                 l_lock_tbl(chd).instance_id = fnd_api.g_miss_num) AND
              (  l_lock_tbl(chd).config_inst_hdr_id = l_lock_tbl(root).config_inst_hdr_id AND
                 l_lock_tbl(chd).config_inst_rev_num = l_lock_tbl(root).config_inst_rev_num )
           THEN
              l_lock_tbl(chd).root_config_inst_hdr_id  := l_lock_tbl(root).root_config_inst_hdr_id;
              l_lock_tbl(chd).root_config_inst_item_id := l_lock_tbl(root).root_config_inst_item_id;
              l_lock_tbl(chd).root_config_inst_rev_num := l_lock_tbl(root).root_config_inst_rev_num;
           END IF;
        END LOOP;
     END IF;
    END IF;
    END LOOP;
   END IF;



   SELECT csi_item_instance_locks_s.NEXTVAL
     INTO l_lock_id
     FROM SYS.dual;

     IF px_config_tbl.COUNT > 0
     THEN
       FOR i IN px_config_tbl.FIRST .. px_config_tbl.LAST
       LOOP
         IF px_config_tbl.EXISTS(i)
         THEN
           px_config_tbl(i).lock_id:=l_lock_id;
         END IF;
       END LOOP;
     END IF;


   IF l_lock_tbl.COUNT > 0 AND
      px_config_tbl.COUNT>0
   THEN
     FOR l_lock IN 1..l_lock_tbl.COUNT
     LOOP
     IF l_lock_tbl.EXISTS(l_lock)
     THEN
      FOR l_config IN px_config_tbl.FIRST .. px_config_tbl.LAST
      LOOP
      IF px_config_tbl.EXISTS(l_config)
      THEN
       IF l_lock_tbl(l_lock).instance_id=px_config_tbl(l_config).instance_id AND
         (l_lock_tbl(l_lock).instance_id IS NOT NULL AND
          l_lock_tbl(l_lock).instance_id <> fnd_api.g_miss_num) AND
         (px_config_tbl(l_config).instance_id IS NOT NULL AND
          px_config_tbl(l_config).instance_id <> fnd_api.g_miss_num)
       THEN
          l_lock_tbl(l_lock).lock_status           :=2;
         -- l_lock_tbl(l_lock).lock_id               :=l_lock_id;
          l_lock_tbl(l_lock).source_application_id :=px_config_tbl(l_config).source_application_id;
          l_lock_tbl(l_lock).source_txn_header_ref :=px_config_tbl(l_config).source_txn_header_ref;
          l_lock_tbl(l_lock).source_txn_line_ref1  :=px_config_tbl(l_config).source_txn_line_ref1;
          l_lock_tbl(l_lock).source_txn_line_ref2  :=px_config_tbl(l_config).source_txn_line_ref2;
          l_lock_tbl(l_lock).source_txn_line_ref3  :=px_config_tbl(l_config).source_txn_line_ref3;
          l_lock_tbl(l_lock).config_inst_hdr_id    :=px_config_tbl(l_config).config_inst_hdr_id;
          l_lock_tbl(l_lock).config_inst_item_id   :=px_config_tbl(l_config).config_inst_item_id;
          l_lock_tbl(l_lock).config_inst_rev_num   :=px_config_tbl(l_config).config_inst_rev_num;
          px_config_tbl(l_config).lock_id          :=l_lock_id;
          px_config_tbl(l_config).lock_status      :=2;
       END IF;
      END IF;
      END LOOP; -- For config_tbl loop
      IF l_lock_tbl(l_lock).lock_status IS NULL OR
         l_lock_tbl(l_lock).lock_status = fnd_api.g_miss_num
      THEN
        l_lock_tbl(l_lock).lock_status:=1;
        l_lock_tbl(l_lock).source_application_id :=px_config_tbl(1).source_application_id;
        l_lock_tbl(l_lock).source_txn_header_ref :=px_config_tbl(1).source_txn_header_ref;
       IF (l_lock_tbl(l_lock).instance_id IS NOT NULL AND
           l_lock_tbl(l_lock).instance_id <> fnd_api.g_miss_num) AND
          ( (l_lock_tbl(l_lock).config_inst_hdr_id IS NULL OR
             l_lock_tbl(l_lock).config_inst_hdr_id = fnd_api.g_miss_num) AND
            (l_lock_tbl(l_lock).config_inst_item_id IS NULL OR
             l_lock_tbl(l_lock).config_inst_item_id = fnd_api.g_miss_num) AND
            (l_lock_tbl(l_lock).config_inst_rev_num IS NULL OR
             l_lock_tbl(l_lock).config_inst_rev_num = fnd_api.g_miss_num) )
       THEN
         -- CALL GET CONFIG KEYS
            get_config_keys(p_instance_id => l_lock_tbl(l_lock).instance_id,
                            p_config_rec  => l_lock_config_rec
                            );
            l_lock_tbl(l_lock).config_inst_hdr_id:=l_lock_config_rec.config_inst_hdr_id;
            l_lock_tbl(l_lock).config_inst_item_id:=l_lock_config_rec.config_inst_item_id;
            l_lock_tbl(l_lock).config_inst_rev_num:=l_lock_config_rec.config_inst_rev_num;
       END IF;

      END IF;
     END IF;
     END LOOP; -- For lock_tbl loop
   END IF;



   -- Call table handler
   IF l_lock_tbl.COUNT>0
   THEN
    FOR l_insert_csr IN l_lock_tbl.FIRST .. l_lock_tbl.LAST
    LOOP
     IF l_lock_tbl.EXISTS(l_insert_csr)
     THEN
      INSERT INTO csi_item_instance_locks
      (    lock_id
          ,lock_status
          ,instance_id
          ,config_inst_hdr_id
          ,config_inst_item_id
          ,config_inst_rev_num
          ,root_instance_id
          ,root_config_inst_hdr_id
          ,root_config_inst_item_id
          ,root_config_inst_rev_num
          ,lock_source_appln_id
          ,lock_source_header_ref
          ,lock_source_line_ref1
          ,lock_source_line_ref2
          ,lock_source_line_ref3
          ,date_locked
          ,last_updated_by
          ,last_update_date
          ,object_version_number
          ,last_update_login
          ,created_by
          ,creation_date
      )
      VALUES
      (
           l_lock_id
          ,l_lock_tbl(l_insert_csr).lock_status
          ,decode(l_lock_tbl(l_insert_csr).instance_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).instance_id)
          ,decode(l_lock_tbl(l_insert_csr).config_inst_hdr_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).config_inst_hdr_id)
          ,decode(l_lock_tbl(l_insert_csr).config_inst_item_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).config_inst_item_id)
          ,decode(l_lock_tbl(l_insert_csr).config_inst_rev_num,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).config_inst_rev_num)
          ,decode(l_lock_tbl(l_insert_csr).root_instance_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).root_instance_id)
          ,decode(l_lock_tbl(l_insert_csr).root_config_inst_hdr_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).root_config_inst_hdr_id)
          ,decode(l_lock_tbl(l_insert_csr).root_config_inst_item_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).root_config_inst_item_id)
          ,decode(l_lock_tbl(l_insert_csr).root_config_inst_rev_num,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).root_config_inst_rev_num)
          ,decode(l_lock_tbl(l_insert_csr).source_application_id,fnd_api.g_miss_num,NULL,l_lock_tbl(l_insert_csr).source_application_id)
          ,decode(l_lock_tbl(l_insert_csr).source_txn_header_ref,fnd_api.g_miss_char,NULL,l_lock_tbl(l_insert_csr).source_txn_header_ref)
          ,decode(l_lock_tbl(l_insert_csr).source_txn_line_ref1,fnd_api.g_miss_char,NULL,l_lock_tbl(l_insert_csr).source_txn_line_ref1)
          ,decode(l_lock_tbl(l_insert_csr).source_txn_line_ref2,fnd_api.g_miss_char,NULL,l_lock_tbl(l_insert_csr).source_txn_line_ref2)
          ,decode(l_lock_tbl(l_insert_csr).source_txn_line_ref3,fnd_api.g_miss_char,NULL,l_lock_tbl(l_insert_csr).source_txn_line_ref3)
          ,SYSDATE --p_txn_rec.source_transaction_date
          ,fnd_global.user_id
          ,SYSDATE
          ,1
          ,fnd_global.user_id
          ,fnd_global.user_id
          ,SYSDATE
      );
     END IF;
    END LOOP;
    /*
          CSI_TRANSACTIONS_PVT.Create_transaction
          (
             p_api_version            => p_api_version
            ,p_commit                 => p_commit
            ,p_init_msg_list          => p_init_msg_list
            ,p_validation_level       => p_validation_level
            ,p_Success_IF_Exists_Flag => 'Y'
            ,p_transaction_rec        => p_txn_rec
            ,x_return_status          => x_return_status
            ,x_msg_count              => x_msg_count
            ,x_msg_data               => x_msg_data
          );

         IF NOT(x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_FAILED_TO_VALIDATE_TXN');
              FND_MESSAGE.SET_TOKEN('TRANSACTION_ID',p_txn_rec.transaction_id );
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
         END IF;
         */
   END IF;

        IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
        END IF;

        -- Standard call to get message count and if count is  get message info.
        FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count ,
                 p_data         =>      x_msg_data   );

EXCEPTION
        WHEN FND_API.G_EXC_ERROR THEN
                ROLLBACK TO csi_lock_item_instance;
                x_return_status := FND_API.G_RET_STS_ERROR ;
                FND_MSG_PUB.Count_And_Get
                (       p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                        p_data    =>      x_msg_data    );
        WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
                ROLLBACK TO csi_lock_item_instance;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                  p_data      =>      x_msg_data  );
        WHEN OTHERS THEN
                ROLLBACK TO csi_lock_item_instance;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                IF FND_MSG_PUB.Check_Msg_Level
                     (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
                THEN
                   FND_MSG_PUB.Add_Exc_Msg
                    ( g_pkg_name, l_api_name );
                END IF;
                FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                   p_data    =>      x_msg_data   );
END lock_item_instances;

PROCEDURE validate_lock
(    p_lock_id             IN  NUMBER ,
     p_instance_id         IN  NUMBER ,
     p_config_inst_hdr_id  IN  NUMBER ,
     p_config_inst_item_id IN  NUMBER ,
     p_config_inst_rev_num IN  NUMBER ,
     p_lock_status         OUT NOCOPY NUMBER,
     p_root                OUT NOCOPY BOOLEAN
) AS
 l_lock_status            NUMBER :=3;
 l_root_value             BOOLEAN := FALSE;
 l_root_config_hdr_id     NUMBER;
 l_root_config_item_id    NUMBER;
 l_root_config_rev_num    NUMBER;
 l_root_instance_id       NUMBER;
BEGIN
    p_root := l_root_value;
 IF p_instance_id IS NOT NULL AND
    p_instance_id <> fnd_api.g_miss_num AND
    p_lock_id IS NOT NULL AND
    p_lock_id <> fnd_api.g_miss_num
 THEN
     BEGIN
        SELECT lock_status
              ,root_instance_id
          INTO l_lock_status
              ,l_root_instance_id
          FROM csi_item_instance_locks
         WHERE instance_id=p_instance_id
           AND lock_id = p_lock_id;
       IF p_instance_id = l_root_instance_id
       THEN
         p_root := TRUE;
       END IF;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           l_lock_status :=3;
     END;
 ELSIF (p_config_inst_hdr_id IS NOT NULL AND
        p_config_inst_hdr_id <> fnd_api.g_miss_num AND
        p_config_inst_item_id IS NOT NULL AND
        p_config_inst_item_id <> fnd_api.g_miss_num AND
        p_config_inst_rev_num IS NOT NULL AND
        p_config_inst_rev_num <> fnd_api.g_miss_num ) AND
       (p_lock_id IS NOT NULL AND
        p_lock_id <> fnd_api.g_miss_num)
 THEN
     BEGIN
        SELECT lock_status
              ,root_config_inst_hdr_id
              ,root_config_inst_item_id
              ,root_config_inst_rev_num
          INTO l_lock_status
              ,l_root_config_hdr_id
              ,l_root_config_item_id
              ,l_root_config_rev_num
          FROM csi_item_instance_locks
         WHERE config_inst_hdr_id  = p_config_inst_hdr_id
           AND config_inst_rev_num = p_config_inst_rev_num
           AND config_inst_item_id = p_config_inst_item_id
           AND lock_id = p_lock_id;
       IF p_config_inst_hdr_id = l_root_config_hdr_id AND
          p_config_inst_rev_num = l_root_config_rev_num AND
          p_config_inst_item_id = l_root_config_item_id
       THEN
         p_root := TRUE;
       END IF;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           l_lock_status :=3;
     END;
 ELSE
   l_lock_status :=3;
 END IF;
  p_lock_status :=l_lock_status;
END validate_lock;


PROCEDURE build_unlock_config
(p_lock_id              IN NUMBER,
 p_config_inst_hdr_id   IN NUMBER,
 p_config_inst_item_id  IN NUMBER,
 p_config_inst_rev_num  IN NUMBER,
 p_bld_unlock_tbl       OUT NOCOPY csi_item_instance_pvt.lock_instances_tbl
 )
AS
CURSOR config_csr(p_root_hdr    IN NUMBER,
                  p_root_rev    IN NUMBER,
                  p_lock_status IN NUMBER)
 IS
 SELECT config_inst_hdr_id,
        config_inst_item_id,
        config_inst_rev_num,
        lock_status
   FROM csi_item_instance_locks
  WHERE root_config_inst_hdr_id = p_root_hdr
    AND root_config_inst_rev_num = p_root_rev
    AND lock_id = p_lock_id
    AND lock_status <> p_lock_status;
l_root_hdr_id   NUMBER;
l_root_rev_num  NUMBER;
l_ctr           NUMBER;
l_unlock_status NUMBER:=0;
BEGIN
 BEGIN
   SELECT root_config_inst_hdr_id,
          root_config_inst_rev_num
     INTO l_root_hdr_id,
          l_root_rev_num
     FROM csi_item_instance_locks
    WHERE lock_id = p_lock_id
      AND config_inst_hdr_id = p_config_inst_hdr_id
      AND config_inst_rev_num = p_config_inst_rev_num
      AND config_inst_item_id = p_config_inst_item_id;
      l_ctr:=0;
      FOR l_config_csr IN config_csr (p_root_hdr    => l_root_hdr_id
                                     ,p_root_rev    => l_root_rev_num
                                     ,p_lock_status => l_unlock_status)
      LOOP
         l_ctr := l_ctr+1;
         p_bld_unlock_tbl(l_ctr).config_inst_hdr_id := l_config_csr.config_inst_hdr_id;
         p_bld_unlock_tbl(l_ctr).config_inst_rev_num := l_config_csr.config_inst_rev_num;
         p_bld_unlock_tbl(l_ctr).config_inst_item_id := l_config_csr.config_inst_item_id;
         p_bld_unlock_tbl(l_ctr).lock_status :=l_config_csr.lock_status;
      END LOOP;
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
 END;
END build_unlock_config;

PROCEDURE unlock_tbl_handler
(p_unlock_tbl            IN   CSI_ITEM_INSTANCE_PVT.lock_instances_tbl,
 p_unlock_param          IN   VARCHAR2,
 p_date                  IN   DATE
 )
AS
l_last_updated_by   NUMBER;
l_last_update_login NUMBER;
l_unlock_status     NUMBER;
BEGIN
l_unlock_status     := 0;
l_last_updated_by   := fnd_global.user_id;
l_last_update_login := fnd_global.login_id;

 IF p_unlock_param = 'INSTANCE'
 THEN
  IF p_unlock_tbl.COUNT>0
  THEN
   FOR i IN p_unlock_tbl.FIRST .. p_unlock_tbl.LAST
   LOOP
    IF p_unlock_tbl.EXISTS(i)
    THEN
     UPDATE csi_item_instance_locks
        SET lock_status= p_unlock_tbl(i).lock_status
           ,unlock_source_appln_id    = decode (p_unlock_tbl(i).source_application_id,fnd_api.g_miss_num,unlock_source_appln_id,p_unlock_tbl(i).source_application_id)
           ,unlock_source_header_ref  = decode (p_unlock_tbl(i).source_txn_header_ref,fnd_api.g_miss_char,unlock_source_header_ref,p_unlock_tbl(i).source_txn_header_ref)
           ,unlock_source_line_ref1   = decode (p_unlock_tbl(i).source_txn_line_ref1,fnd_api.g_miss_char,unlock_source_line_ref1,p_unlock_tbl(i).source_txn_line_ref1)
           ,unlock_source_line_ref2   = decode (p_unlock_tbl(i).source_txn_line_ref2,fnd_api.g_miss_char,unlock_source_line_ref2,p_unlock_tbl(i).source_txn_line_ref2)
           ,unlock_source_line_ref3   = decode (p_unlock_tbl(i).source_txn_line_ref3,fnd_api.g_miss_char,unlock_source_line_ref3,p_unlock_tbl(i).source_txn_line_ref3)
           ,date_unlocked             = p_date
           ,object_version_number     = object_version_number+1
           ,last_updated_by           = l_last_updated_by
           ,last_update_date          = SYSDATE
           ,last_update_login         = l_last_update_login
      WHERE instance_id = p_unlock_tbl(i).instance_id
        AND lock_id =   p_unlock_tbl(i).lock_id;
    END IF;
   END LOOP;
  END IF;
 ELSIF p_unlock_param = 'CONFIG'
 THEN
  IF p_unlock_tbl.COUNT>0
  THEN
   FOR i IN p_unlock_tbl.FIRST .. p_unlock_tbl.LAST
   LOOP
    IF p_unlock_tbl.EXISTS(i)
    THEN
     UPDATE csi_item_instance_locks
        SET lock_status= p_unlock_tbl(i).lock_status
           ,unlock_source_appln_id    = decode (p_unlock_tbl(i).source_application_id,fnd_api.g_miss_num,unlock_source_appln_id,p_unlock_tbl(i).source_application_id)
           ,unlock_source_header_ref  = decode (p_unlock_tbl(i).source_txn_header_ref,fnd_api.g_miss_char,unlock_source_header_ref,p_unlock_tbl(i).source_txn_header_ref)
           ,unlock_source_line_ref1   = decode (p_unlock_tbl(i).source_txn_line_ref1,fnd_api.g_miss_char,unlock_source_line_ref1,p_unlock_tbl(i).source_txn_line_ref1)
           ,unlock_source_line_ref2   = decode (p_unlock_tbl(i).source_txn_line_ref2,fnd_api.g_miss_char,unlock_source_line_ref2,p_unlock_tbl(i).source_txn_line_ref2)
           ,unlock_source_line_ref3   = decode (p_unlock_tbl(i).source_txn_line_ref3,fnd_api.g_miss_char,unlock_source_line_ref3,p_unlock_tbl(i).source_txn_line_ref3)
           ,date_unlocked             = p_date
           ,object_version_number     = object_version_number+1
           ,last_updated_by           = l_last_updated_by
           ,last_update_date          = SYSDATE
           ,last_update_login         = l_last_update_login
      WHERE config_inst_hdr_id  = p_unlock_tbl(i).config_inst_hdr_id
        AND config_inst_item_id = p_unlock_tbl(i).config_inst_item_id
        AND config_inst_rev_num = p_unlock_tbl(i).config_inst_rev_num
        AND lock_id             = p_unlock_tbl(i).lock_id;
    END IF;
   END LOOP;
  END IF;
 END IF;

END unlock_tbl_handler;


PROCEDURE unlock_item_instances
 (
     p_api_version           IN   NUMBER
    ,p_commit                IN   VARCHAR2
    ,p_init_msg_list         IN   VARCHAR2
    ,p_validation_level      IN   NUMBER
    ,p_config_tbl            IN   csi_cz_int.config_tbl
    ,p_unlock_all            IN   VARCHAR2
--    ,p_txn_rec               IN   OUT NOCOPY csi_datastructures_pub.transaction_rec
    ,x_return_status         OUT  NOCOPY VARCHAR2
    ,x_msg_count             OUT  NOCOPY NUMBER
    ,x_msg_data              OUT  NOCOPY VARCHAR2
 )
AS
l_api_name         CONSTANT VARCHAR2(30)   := 'UNLOCK_ITEM_INSTANCES';
l_api_version      CONSTANT NUMBER         := 1.0;
l_csi_debug_level  NUMBER;
l_rel_tbl          csi_datastructures_pub.ii_relationship_tbl;
l_ii_relationship_level_tbl csi_ii_relationships_pvt.ii_relationship_level_tbl;
l_rel_query_rec    csi_datastructures_pub.relationship_query_rec;
l_rel_type_code    VARCHAR2(30) := 'COMPONENT-OF';
l_unlock_tbl       csi_item_instance_pvt.lock_instances_tbl;
l_unlock_ins_tbl   csi_item_instance_pvt.lock_instances_tbl;
l_unlock_count     NUMBER;
l_unlock_config    csi_item_instance_pvt.lock_instances_tbl;
l_unlock_root      csi_item_instance_pvt.lock_instances_tbl;
l_bld_unlock_tbl   csi_item_instance_pvt.lock_instances_tbl;
l_config_count     NUMBER;
l_config_root      NUMBER;
l_instance_ctr     NUMBER;
l_config_ctr       NUMBER;
l_warning          VARCHAR2(1) :='N';
l_valid_lock_status NUMBER;
l_found            VARCHAR2(1);
l_root_value       BOOLEAN := FALSE;
l_unlock_root_ins  NUMBER;
BEGIN

  SAVEPOINT csi_unlock_item_instance;

        -- Check for freeze_flag in csi_install_parameters is set to 'Y'

     csi_utility_grp.check_ib_active;

        -- Standard call to check for call compatibility.
        IF NOT FND_API.Compatible_API_Call (    l_api_version           ,
                                                p_api_version           ,
                                                l_api_name              ,
                                                g_pkg_name              )
        THEN
                RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;

        -- Initialize message list if p_init_msg_list is set to TRUE.
        IF FND_API.to_Boolean( p_init_msg_list ) THEN
                FND_MSG_PUB.initialize;
        END IF;

        --  Initialize API return status to success
        x_return_status := FND_API.G_RET_STS_SUCCESS;

        -- Check the profile option CSI_DEBUG_LEVEL for debug message reporting
        l_csi_debug_level:=fnd_profile.value('CSI_DEBUG_LEVEL');

        -- If CSI_DEBUG_LEVEL = 1 then dump the procedure name
        IF (l_csi_debug_level > 0) THEN
            csi_gen_utility_pvt.put_line( 'unlock_item_instances');
        END IF;


        -- If the debug level = 2 then dump all the parameters values.
        IF (l_csi_debug_level > 1) THEN
               csi_gen_utility_pvt.put_line( 'unlock_item_instances'||
                                                   p_api_version           ||'-'||
                                                   p_commit                ||'-'||
                                                   p_init_msg_list         ||'-'||
                                                   p_validation_level            );
               -- Dump the records in the log file
          IF p_config_tbl.COUNT > 0
          THEN
           FOR tab_row IN p_config_tbl.FIRST .. p_config_tbl.LAST
           LOOP
             csi_gen_utility_pvt.put_line('                                         ');
             csi_gen_utility_pvt.put_line('Dumping the values for config tbl Rec # :'||tab_row);
             csi_gen_utility_pvt.put_line('source_application_id    :'||p_config_tbl(tab_row).source_application_id);
             csi_gen_utility_pvt.put_line('source_txn_header_ref    :'||p_config_tbl(tab_row).source_txn_header_ref);
             csi_gen_utility_pvt.put_line('source_txn_line_ref1     :'||p_config_tbl(tab_row).source_txn_line_ref1);
             csi_gen_utility_pvt.put_line('source_txn_line_ref2     :'||p_config_tbl(tab_row).source_txn_line_ref2);
             csi_gen_utility_pvt.put_line('source_txn_line_ref3     :'||p_config_tbl(tab_row).source_txn_line_ref3);
             csi_gen_utility_pvt.put_line('instance_id              :'||p_config_tbl(tab_row).instance_id);
             csi_gen_utility_pvt.put_line('lock_id                  :'||p_config_tbl(tab_row).lock_id);
             csi_gen_utility_pvt.put_line('config_inst_hdr_id       :'||p_config_tbl(tab_row).config_inst_hdr_id);
             csi_gen_utility_pvt.put_line('config_inst_item_id      :'||p_config_tbl(tab_row).config_inst_item_id);
             csi_gen_utility_pvt.put_line('config_inst_rev_num      :'||p_config_tbl(tab_row).config_inst_rev_num);
             csi_gen_utility_pvt.put_line('lock_status              :'||p_config_tbl(tab_row).lock_status);
           END LOOP;
          END IF;
               --csi_gen_utility_pvt.dump_txn_rec(p_txn_rec);
        END IF;



  l_unlock_tbl.DELETE;
             csi_gen_utility_pvt.put_line('p_unlock_all             :'||p_unlock_all);
  IF p_unlock_all IS NOT NULL AND
     p_unlock_all = fnd_api.g_true
  THEN
             csi_gen_utility_pvt.put_line('Processing to unlock all locked instances.');
  -- This is the case where root node(instance_id) is passed and
  -- we need to get all its children and unlock them.
   IF p_config_tbl.COUNT >0
   THEN
    FOR i IN p_config_tbl.FIRST .. p_config_tbl.LAST
    LOOP
     IF p_config_tbl.EXISTS(i)
     THEN
      IF ((p_config_tbl(i).config_inst_hdr_id IS NOT NULL AND
           p_config_tbl(i).config_inst_hdr_id <> fnd_api.g_miss_num AND
           p_config_tbl(i).config_inst_item_id IS NOT NULL AND
           p_config_tbl(i).config_inst_item_id <> fnd_api.g_miss_num AND
           p_config_tbl(i).config_inst_rev_num IS NOT NULL AND
           p_config_tbl(i).config_inst_rev_num <> fnd_api.g_miss_num )) AND
          (p_config_tbl(i).lock_id IS NOT NULL AND
           p_config_tbl(i).lock_id <> fnd_api.g_miss_num)
      THEN
             csi_gen_utility_pvt.put_line('Processing where config keys were passed.');
       l_found:='N';
       IF l_unlock_config.count>0
       THEN
        FOR l_un_csr IN l_unlock_config.FIRST .. l_unlock_config.LAST
        LOOP
         IF l_unlock_config.EXISTS(l_un_csr)
         THEN
           IF l_unlock_config(l_un_csr).lock_id=p_config_tbl(i).lock_id AND
              l_unlock_config(l_un_csr).config_inst_hdr_id=p_config_tbl(i).config_inst_hdr_id AND
              l_unlock_config(l_un_csr).config_inst_item_id=p_config_tbl(i).config_inst_item_id AND
              l_unlock_config(l_un_csr).config_inst_rev_num=p_config_tbl(i).config_inst_rev_num
           THEN
            l_found:='Y';
           END IF;
         END IF;
        END LOOP;
       END IF;

       IF l_found='N'
       THEN

                 l_valid_lock_status:=NULL;
                 validate_lock
                    (    p_lock_id             => p_config_tbl(i).lock_id,
                         p_instance_id         => fnd_api.g_miss_num,
                         p_config_inst_hdr_id  => p_config_tbl(i).config_inst_hdr_id,
                         p_config_inst_item_id => p_config_tbl(i).config_inst_item_id,
                         p_config_inst_rev_num => p_config_tbl(i).config_inst_rev_num,
                         p_lock_status         => l_valid_lock_status,
                         p_root                => l_root_value
                    );
        IF l_valid_lock_status NOT IN (0,3) AND
           l_valid_lock_status IS NOT NULL
        THEN
          --p_config_tbl(i).lock_status:=0;
           build_unlock_config(p_lock_id             => p_config_tbl(i).lock_id,
                               p_config_inst_hdr_id  => p_config_tbl(i).config_inst_hdr_id,
                               p_config_inst_item_id => p_config_tbl(i).config_inst_item_id,
                               p_config_inst_rev_num => p_config_tbl(i).config_inst_rev_num,
                               p_bld_unlock_tbl      => l_bld_unlock_tbl
                               );

           l_config_count := l_unlock_config.count;
         IF l_bld_unlock_tbl.COUNT >0
         THEN
          FOR l_bld IN l_bld_unlock_tbl.FIRST .. l_bld_unlock_tbl.LAST
          LOOP
           IF l_bld_unlock_tbl.EXISTS(l_bld)
           THEN

           l_unlock_config(l_config_count+l_bld).config_inst_hdr_id    :=l_bld_unlock_tbl(l_bld).config_inst_hdr_id;
           l_unlock_config(l_config_count+l_bld).config_inst_item_id   :=l_bld_unlock_tbl(l_bld).config_inst_item_id;
           l_unlock_config(l_config_count+l_bld).config_inst_rev_num   :=l_bld_unlock_tbl(l_bld).config_inst_rev_num;
           l_unlock_config(l_config_count+l_bld).lock_id:=p_config_tbl(i).lock_id;
           l_unlock_config(l_config_count+l_bld).lock_status:=p_config_tbl(i).lock_status;
           l_unlock_config(l_config_count+l_bld).source_application_id :=p_config_tbl(i).source_application_id;
           l_unlock_config(l_config_count+l_bld).source_txn_header_ref :=p_config_tbl(i).source_txn_header_ref;
           --l_unlock_config(l_config_count+l_bld).source_txn_line_ref1  :=p_config_tbl(i).source_txn_line_ref1;
           --l_unlock_config(l_config_count+l_bld).source_txn_line_ref2  :=p_config_tbl(i).source_txn_line_ref2;
           --l_unlock_config(l_config_count+l_bld).source_txn_line_ref3  :=p_config_tbl(i).source_txn_line_ref3;
             IF l_bld_unlock_tbl(l_bld).lock_status = 2 AND
                p_config_tbl(i).source_application_id = 542
             THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_CANT_UNLOCK_TREE');
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_HDR_ID',l_bld_unlock_tbl(l_bld).config_inst_hdr_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_ITEM_ID',l_bld_unlock_tbl(l_bld).config_inst_item_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_REV_NUM',l_bld_unlock_tbl(l_bld).config_inst_rev_num);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
             ELSIF (p_config_tbl(i).lock_status IS NULL OR
                 p_config_tbl(i).lock_status NOT IN (0,1)) OR
                 p_config_tbl(i).lock_status > l_bld_unlock_tbl(l_bld).lock_status
             THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_CON_STATUS');
              FND_MESSAGE.SET_TOKEN('ORIGINAL_STATUS',l_bld_unlock_tbl(l_bld).lock_status);
              FND_MESSAGE.SET_TOKEN('LOCK_STATUS',p_config_tbl(i).lock_status);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_HDR_ID',l_bld_unlock_tbl(l_bld).config_inst_hdr_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_ITEM_ID',l_bld_unlock_tbl(l_bld).config_inst_item_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_REV_NUM',l_bld_unlock_tbl(l_bld).config_inst_rev_num);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
             END IF;
           END IF;
          END LOOP;
         END IF;

        ELSE
           IF l_valid_lock_status=3
           THEN
              l_warning := 'E';
           ELSE
             IF l_valid_lock_status=0 AND
                l_warning <> 'E'
             THEN
              l_warning := 'Y';
             END IF;
           END IF;
        END IF;
       END IF;
      ELSE
       l_warning := 'E';
      END IF;
     END IF;
    END LOOP;
   END IF;

  ELSE -- Case where p_unlock_all is fnd_api.g_false

             csi_gen_utility_pvt.put_line('P_unlock_all is false : Processing to unlock instances ');
   IF p_config_tbl.COUNT >0
   THEN
    FOR i IN p_config_tbl.FIRST .. p_config_tbl.LAST
    LOOP
     IF p_config_tbl.EXISTS(i)
     THEN
      IF ((p_config_tbl(i).instance_id IS NOT NULL AND
           p_config_tbl(i).instance_id <> fnd_api.g_miss_num) OR
          (p_config_tbl(i).config_inst_hdr_id IS NOT NULL AND
           p_config_tbl(i).config_inst_hdr_id <> fnd_api.g_miss_num AND
           p_config_tbl(i).config_inst_item_id IS NOT NULL AND
           p_config_tbl(i).config_inst_item_id <> fnd_api.g_miss_num AND
           p_config_tbl(i).config_inst_rev_num IS NOT NULL AND
           p_config_tbl(i).config_inst_rev_num <> fnd_api.g_miss_num )) AND
          (p_config_tbl(i).lock_id IS NOT NULL AND
           p_config_tbl(i).lock_id <> fnd_api.g_miss_num)
      THEN

        IF (p_config_tbl(i).instance_id IS NOT NULL AND
            p_config_tbl(i).instance_id <> fnd_api.g_miss_num)
        THEN

                 l_valid_lock_status:=NULL;
                validate_lock
                    (    p_lock_id             => p_config_tbl(i).lock_id,
                         p_instance_id         => p_config_tbl(i).instance_id,
                         p_config_inst_hdr_id  => fnd_api.g_miss_num,
                         p_config_inst_item_id => fnd_api.g_miss_num,
                         p_config_inst_rev_num => fnd_api.g_miss_num,
                         p_lock_status         => l_valid_lock_status,
                         p_root                => l_root_value
                    );


         IF l_valid_lock_status IS NOT NULL AND
            l_valid_lock_status NOT IN (0,3)
         THEN
          --p_config_tbl(i).lock_status:=0;
          IF NOT l_root_value
          THEN
           l_unlock_count:=l_unlock_tbl.COUNT+1;
           l_unlock_tbl(l_unlock_count).instance_id:=p_config_tbl(i).instance_id;
           l_unlock_tbl(l_unlock_count).lock_id:=p_config_tbl(i).lock_id;
           l_unlock_tbl(l_unlock_count).lock_status:=p_config_tbl(i).lock_status;
           l_unlock_tbl(l_unlock_count).source_application_id :=p_config_tbl(i).source_application_id;
           l_unlock_tbl(l_unlock_count).source_txn_header_ref :=p_config_tbl(i).source_txn_header_ref;
           l_unlock_tbl(l_unlock_count).source_txn_line_ref1  :=p_config_tbl(i).source_txn_line_ref1;
           l_unlock_tbl(l_unlock_count).source_txn_line_ref2  :=p_config_tbl(i).source_txn_line_ref2;
           l_unlock_tbl(l_unlock_count).source_txn_line_ref3  :=p_config_tbl(i).source_txn_line_ref3;
          ELSE
           l_unlock_root_ins:=l_unlock_ins_tbl.COUNT+1;
           l_unlock_ins_tbl(l_unlock_root_ins).instance_id:=p_config_tbl(i).instance_id;
           l_unlock_ins_tbl(l_unlock_root_ins).lock_id:=p_config_tbl(i).lock_id;
           l_unlock_ins_tbl(l_unlock_root_ins).lock_status:=p_config_tbl(i).lock_status;
           l_unlock_ins_tbl(l_unlock_root_ins).source_application_id :=p_config_tbl(i).source_application_id;
           l_unlock_ins_tbl(l_unlock_root_ins).source_txn_header_ref :=p_config_tbl(i).source_txn_header_ref;
           l_unlock_ins_tbl(l_unlock_root_ins).source_txn_line_ref1  :=p_config_tbl(i).source_txn_line_ref1;
           l_unlock_ins_tbl(l_unlock_root_ins).source_txn_line_ref2  :=p_config_tbl(i).source_txn_line_ref2;
           l_unlock_ins_tbl(l_unlock_root_ins).source_txn_line_ref3  :=p_config_tbl(i).source_txn_line_ref3;
          END IF;

             IF (p_config_tbl(i).lock_status IS NULL OR
                 p_config_tbl(i).lock_status NOT IN (0,1)) OR
                 p_config_tbl(i).lock_status > l_valid_lock_status
             THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INS_STATUS');
              FND_MESSAGE.SET_TOKEN('ORIGINAL_STATUS',l_valid_lock_status);
              FND_MESSAGE.SET_TOKEN('LOCK_STATUS',p_config_tbl(i).lock_status);
              FND_MESSAGE.SET_TOKEN('INSTANCE_ID',p_config_tbl(i).instance_id);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
             END IF;
         ELSE
           IF l_valid_lock_status=3
           THEN
              l_warning := 'E';
           ELSE
             IF l_valid_lock_status=0 AND
                l_warning <> 'E'
             THEN
              l_warning := 'Y';
             END IF;
           END IF;
         END IF;
        ELSIF (p_config_tbl(i).config_inst_hdr_id IS NOT NULL AND
               p_config_tbl(i).config_inst_hdr_id <> fnd_api.g_miss_num AND
               p_config_tbl(i).config_inst_item_id IS NOT NULL AND
               p_config_tbl(i).config_inst_item_id <> fnd_api.g_miss_num AND
               p_config_tbl(i).config_inst_rev_num IS NOT NULL AND
               p_config_tbl(i).config_inst_rev_num <> fnd_api.g_miss_num )
        THEN
                  l_valid_lock_status:=NULL;
                validate_lock
                    (    p_lock_id             => p_config_tbl(i).lock_id,
                         p_instance_id         => fnd_api.g_miss_num,
                         p_config_inst_hdr_id  => p_config_tbl(i).config_inst_hdr_id,
                         p_config_inst_item_id => p_config_tbl(i).config_inst_item_id,
                         p_config_inst_rev_num => p_config_tbl(i).config_inst_rev_num,
                         p_lock_status         => l_valid_lock_status,
                         p_root                => l_root_value
                    );


         IF l_valid_lock_status NOT IN (0,3) AND
            l_valid_lock_status IS NOT NULL
         THEN
          -- p_config_tbl(i).lock_status:=0;
          IF NOT l_root_value
          THEN
           l_config_count := l_unlock_config.count+1;
           l_unlock_config(l_config_count).config_inst_hdr_id    :=p_config_tbl(i).config_inst_hdr_id;
           l_unlock_config(l_config_count).config_inst_item_id   :=p_config_tbl(i).config_inst_item_id;
           l_unlock_config(l_config_count).config_inst_rev_num   :=p_config_tbl(i).config_inst_rev_num;
           l_unlock_config(l_config_count).lock_id:=p_config_tbl(i).lock_id;
           l_unlock_config(l_config_count).lock_status:=p_config_tbl(i).lock_status;
           l_unlock_config(l_config_count).source_application_id :=p_config_tbl(i).source_application_id;
           l_unlock_config(l_config_count).source_txn_header_ref :=p_config_tbl(i).source_txn_header_ref;
           l_unlock_config(l_config_count).source_txn_line_ref1  :=p_config_tbl(i).source_txn_line_ref1;
           l_unlock_config(l_config_count).source_txn_line_ref2  :=p_config_tbl(i).source_txn_line_ref2;
           l_unlock_config(l_config_count).source_txn_line_ref3  :=p_config_tbl(i).source_txn_line_ref3;
          ELSE
           l_config_root := l_unlock_root.count+1;
           l_unlock_root(l_config_root).config_inst_hdr_id    :=p_config_tbl(i).config_inst_hdr_id;
           l_unlock_root(l_config_root).config_inst_item_id   :=p_config_tbl(i).config_inst_item_id;
           l_unlock_root(l_config_root).config_inst_rev_num   :=p_config_tbl(i).config_inst_rev_num;
           l_unlock_root(l_config_root).lock_id:=p_config_tbl(i).lock_id;
           l_unlock_root(l_config_root).lock_status:=p_config_tbl(i).lock_status;
           l_unlock_root(l_config_root).source_application_id :=p_config_tbl(i).source_application_id;
           l_unlock_root(l_config_root).source_txn_header_ref :=p_config_tbl(i).source_txn_header_ref;
           l_unlock_root(l_config_root).source_txn_line_ref1  :=p_config_tbl(i).source_txn_line_ref1;
           l_unlock_root(l_config_root).source_txn_line_ref2  :=p_config_tbl(i).source_txn_line_ref2;
           l_unlock_root(l_config_root).source_txn_line_ref3  :=p_config_tbl(i).source_txn_line_ref3;
          END IF;
             IF (p_config_tbl(i).lock_status IS NULL OR
                 p_config_tbl(i).lock_status NOT IN (0,1)) OR
                 p_config_tbl(i).lock_status > l_valid_lock_status
             THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_CON_STATUS');
              FND_MESSAGE.SET_TOKEN('ORIGINAL_STATUS',l_valid_lock_status);
              FND_MESSAGE.SET_TOKEN('LOCK_STATUS',p_config_tbl(i).lock_status);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_HDR_ID',p_config_tbl(i).config_inst_hdr_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_ITEM_ID',p_config_tbl(i).config_inst_item_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_REV_NUM',p_config_tbl(i).config_inst_rev_num);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
             END IF;
         ELSE
           IF l_valid_lock_status=3
           THEN
              l_warning := 'E';
           ELSE
             IF l_valid_lock_status=0 AND
                l_warning <> 'E'
             THEN
              l_warning := 'Y';
             END IF;
           END IF;
         END IF;
        END IF;
      ELSE
        l_warning := 'E';
      END IF;
     END IF;
    END LOOP;
   END IF;
  END IF;

   IF l_warning = 'Y'
   THEN
      FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_LOCKS');
      FND_MSG_PUB.Add;
   ELSIF l_warning = 'E'
   THEN
      FND_MESSAGE.SET_NAME('CSI','CSI_LOCKID_NOT_PASSED');
      FND_MSG_PUB.Add;
      RAISE FND_API.G_EXC_ERROR;
   END IF;
      csi_gen_utility_pvt.put_line('Count of l_unlock_tbl is :'||l_unlock_tbl.count);
   IF l_unlock_tbl.COUNT>0
   THEN
      csi_gen_utility_pvt.put_line('Before calling unlock_tbl_handler in instance mode. ');
      unlock_tbl_handler (l_unlock_tbl,'INSTANCE',SYSDATE);
   END IF;

      csi_gen_utility_pvt.put_line('Count of l_unlock_config is :'||l_unlock_config.count);
   IF l_unlock_config.COUNT>0
   THEN
      csi_gen_utility_pvt.put_line('Before calling unlock_tbl_handler in config mode. ');
      unlock_tbl_handler (l_unlock_config,'CONFIG',SYSDATE);
   END IF;

      csi_gen_utility_pvt.put_line('Count of l_unlock_ins_tbl is :'||l_unlock_ins_tbl.count);
   IF l_unlock_ins_tbl.COUNT>0
   THEN
      csi_gen_utility_pvt.put_line('Before calling unlock_tbl_handler in instance root mode. ');

     FOR i IN l_unlock_ins_tbl.FIRST .. l_unlock_ins_tbl.LAST
     LOOP
        IF l_unlock_ins_tbl.EXISTS(i)
        THEN
         IF l_unlock_ins_tbl(i).lock_status=0
         THEN
           SELECT COUNT(*)
             INTO l_instance_ctr
             FROM csi_item_instance_locks
            WHERE root_instance_id =l_unlock_ins_tbl(i).instance_id
              AND lock_id = l_unlock_ins_tbl(i).lock_id
              AND lock_status IN (1,2);
           IF l_instance_ctr >1  -- this includes root
           THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_INST_STATUS');
              FND_MESSAGE.SET_TOKEN('INSTANCE_ID',l_unlock_ins_tbl(i).instance_id);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
         END IF;
        END IF;
     END LOOP;
      unlock_tbl_handler (l_unlock_ins_tbl,'INSTANCE',SYSDATE);
   END IF;

   IF l_unlock_root.COUNT>0
   THEN
      csi_gen_utility_pvt.put_line('Before calling unlock_tbl_handler in config root mode. ');

     FOR i IN l_unlock_root.FIRST .. l_unlock_root.LAST
     LOOP
        IF l_unlock_root.EXISTS(i)
        THEN
         IF l_unlock_root(i).lock_status=0
         THEN
           SELECT COUNT(*)
             INTO l_config_ctr
             FROM csi_item_instance_locks
            WHERE root_config_inst_hdr_id =l_unlock_root(i).config_inst_hdr_id
              AND root_config_inst_item_id = l_unlock_root(i).config_inst_item_id
              AND root_config_inst_rev_num = l_unlock_root(i).config_inst_rev_num
              AND lock_id = l_unlock_root(i).lock_id
              AND lock_status IN (1,2);
           IF l_config_ctr >1  -- this includes root
           THEN
              FND_MESSAGE.SET_NAME('CSI','CSI_INVALID_CONF_STATUS');
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_HDR_ID',l_unlock_root(i).config_inst_hdr_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_ITEM_ID',l_unlock_root(i).config_inst_item_id);
              FND_MESSAGE.SET_TOKEN('CONFIG_INST_REV_NUM',l_unlock_root(i).config_inst_rev_num);
              FND_MSG_PUB.Add;
              RAISE FND_API.G_EXC_ERROR;
           END IF;
         END IF;
        END IF;
     END LOOP;

     unlock_tbl_handler (l_unlock_root,'CONFIG',SYSDATE);

   END IF;

        IF FND_API.To_Boolean( p_commit ) THEN
            COMMIT WORK;
        END IF;

        -- Standard call to get message count and if count is  get message info.
        FND_MSG_PUB.Count_And_Get
                (p_encoded => FND_API.G_FALSE,
                 p_count        =>      x_msg_count ,
                 p_data         =>      x_msg_data   );

             csi_gen_utility_pvt.put_line('Reached to the end of csi_unlock_item_instance procedure.');

EXCEPTION
        WHEN FND_API.G_EXC_ERROR THEN
                ROLLBACK TO csi_unlock_item_instance;
                x_return_status := FND_API.G_RET_STS_ERROR ;
                FND_MSG_PUB.Count_And_Get
                (       p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                        p_data    =>      x_msg_data    );
        WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
                ROLLBACK TO csi_unlock_item_instance;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                FND_MSG_PUB.Count_And_Get
                ( p_encoded => FND_API.G_FALSE,
                 p_count     =>      x_msg_count,
                  p_data      =>      x_msg_data  );
        WHEN OTHERS THEN
                ROLLBACK TO csi_unlock_item_instance;
                x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
                IF FND_MSG_PUB.Check_Msg_Level
                     (FND_MSG_PUB.G_MSG_LVL_UNEXP_ERROR)
                THEN
                   FND_MSG_PUB.Add_Exc_Msg
                    ( g_pkg_name, l_api_name );
                END IF;
                FND_MSG_PUB.Count_And_Get
                (  p_encoded => FND_API.G_FALSE,
                 p_count   =>      x_msg_count,
                   p_data    =>      x_msg_data   );
END unlock_item_instances;


END CSI_ITEM_INSTANCE_PVT;

/
