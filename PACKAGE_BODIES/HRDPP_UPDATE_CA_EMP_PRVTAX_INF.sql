--------------------------------------------------------
--  DDL for Package Body HRDPP_UPDATE_CA_EMP_PRVTAX_INF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_UPDATE_CA_EMP_PRVTAX_INF" as
/*
 * Generated by hr_pump_meta_mapper at: 2007/01/04 09:01:15
 * Generated for API: PAY_CA_EMP_PRVTAX_INF_API.UPDATE_CA_EMP_PRVTAX_INF
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_LEGISLATION_CODE in varchar2 default null
,P_ASSIGNMENT_ID in number default null
,I_ASSIGNMENT_ID in varchar2 default 'N'
,P_PROVINCE_CODE in varchar2 default null
,P_JURISDICTION_CODE in varchar2 default null
,P_TAX_CREDIT_AMOUNT in number default null
,I_TAX_CREDIT_AMOUNT in varchar2 default 'N'
,P_BASIC_EXEMPTION_FLAG in varchar2 default null
,P_DEDUCTION_CODE in varchar2 default null
,P_EXTRA_INFO_NOT_PROVIDED in varchar2 default null
,P_MARRIAGE_STATUS in varchar2 default null
,P_NO_OF_INFIRM_DEPENDANTS in number default null
,I_NO_OF_INFIRM_DEPENDANTS in varchar2 default 'N'
,P_NON_RESIDENT_STATUS in varchar2 default null
,P_DISABILITY_STATUS in varchar2 default null
,P_NO_OF_DEPENDANTS in number default null
,I_NO_OF_DEPENDANTS in varchar2 default 'N'
,P_ANNUAL_DEDN in number default null
,I_ANNUAL_DEDN in varchar2 default 'N'
,P_TOTAL_EXPENSE_BY_COMMISSION in number default null
,I_TOTAL_EXPENSE_BY_COMMISSION in varchar2 default 'N'
,P_TOTAL_REMNRTN_BY_COMMISSION in number default null
,I_TOTAL_REMNRTN_BY_COMMISSION in varchar2 default 'N'
,P_PRESCRIBED_ZONE_DEDN_AMT in number default null
,I_PRESCRIBED_ZONE_DEDN_AMT in varchar2 default 'N'
,P_ADDITIONAL_TAX in number default null
,I_ADDITIONAL_TAX in varchar2 default 'N'
,P_PROV_OVERRIDE_RATE in number default null
,I_PROV_OVERRIDE_RATE in varchar2 default 'N'
,P_PROV_OVERRIDE_AMOUNT in number default null
,I_PROV_OVERRIDE_AMOUNT in varchar2 default 'N'
,P_PROV_EXEMPT_FLAG in varchar2 default null
,P_PMED_EXEMPT_FLAG in varchar2 default null
,P_WC_EXEMPT_FLAG in varchar2 default null
,P_QPP_EXEMPT_FLAG in varchar2 default null
,P_TAX_CALC_METHOD in varchar2 default null
,P_OTHER_TAX_CREDIT in number default null
,I_OTHER_TAX_CREDIT in varchar2 default 'N'
,P_CA_TAX_INFORMATION_CATEGORY in varchar2 default null
,P_CA_TAX_INFORMATION1 in varchar2 default null
,P_CA_TAX_INFORMATION2 in varchar2 default null
,P_CA_TAX_INFORMATION3 in varchar2 default null
,P_CA_TAX_INFORMATION4 in varchar2 default null
,P_CA_TAX_INFORMATION5 in varchar2 default null
,P_CA_TAX_INFORMATION6 in varchar2 default null
,P_CA_TAX_INFORMATION7 in varchar2 default null
,P_CA_TAX_INFORMATION8 in varchar2 default null
,P_CA_TAX_INFORMATION9 in varchar2 default null
,P_CA_TAX_INFORMATION10 in varchar2 default null
,P_CA_TAX_INFORMATION11 in varchar2 default null
,P_CA_TAX_INFORMATION12 in varchar2 default null
,P_CA_TAX_INFORMATION13 in varchar2 default null
,P_CA_TAX_INFORMATION14 in varchar2 default null
,P_CA_TAX_INFORMATION15 in varchar2 default null
,P_CA_TAX_INFORMATION16 in varchar2 default null
,P_CA_TAX_INFORMATION17 in varchar2 default null
,P_CA_TAX_INFORMATION18 in varchar2 default null
,P_CA_TAX_INFORMATION19 in varchar2 default null
,P_CA_TAX_INFORMATION20 in varchar2 default null
,P_CA_TAX_INFORMATION21 in varchar2 default null
,P_CA_TAX_INFORMATION22 in varchar2 default null
,P_CA_TAX_INFORMATION23 in varchar2 default null
,P_CA_TAX_INFORMATION24 in varchar2 default null
,P_CA_TAX_INFORMATION25 in varchar2 default null
,P_CA_TAX_INFORMATION26 in varchar2 default null
,P_CA_TAX_INFORMATION27 in varchar2 default null
,P_CA_TAX_INFORMATION28 in varchar2 default null
,P_CA_TAX_INFORMATION29 in varchar2 default null
,P_CA_TAX_INFORMATION30 in varchar2 default null
,P_PROV_LSP_AMOUNT in number default null
,I_PROV_LSP_AMOUNT in varchar2 default 'N'
,P_EFFECTIVE_DATE in date
,P_DATETRACK_MODE in varchar2
,P_PPIP_EXEMPT_FLAG in varchar2 default null
,P_EMP_PROV_TAX_INF_USER_KEY in varchar2) is
blid number := p_data_pump_batch_line_id;
begin
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025
,pval026
,pval027
,pval028
,pval029
,pval030
,pval031
,pval032
,pval033
,pval034
,pval035
,pval036
,pval037
,pval038
,pval039
,pval040
,pval041
,pval042
,pval043
,pval044
,pval045
,pval046
,pval047
,pval048
,pval049
,pval050
,pval051
,pval052
,pval053
,pval054
,pval055
,pval056
,pval057
,pval058
,pval059
,pval060
,pval061
,pval062
,pval063
,pval064)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,1160
,'U'
,p_user_sequence
,p_link_value
,P_LEGISLATION_CODE
,nd(P_ASSIGNMENT_ID,I_ASSIGNMENT_ID)
,P_PROVINCE_CODE
,P_JURISDICTION_CODE
,nd(P_TAX_CREDIT_AMOUNT,I_TAX_CREDIT_AMOUNT)
,P_BASIC_EXEMPTION_FLAG
,P_DEDUCTION_CODE
,P_EXTRA_INFO_NOT_PROVIDED
,P_MARRIAGE_STATUS
,nd(P_NO_OF_INFIRM_DEPENDANTS,I_NO_OF_INFIRM_DEPENDANTS)
,P_NON_RESIDENT_STATUS
,P_DISABILITY_STATUS
,nd(P_NO_OF_DEPENDANTS,I_NO_OF_DEPENDANTS)
,nd(P_ANNUAL_DEDN,I_ANNUAL_DEDN)
,nd(P_TOTAL_EXPENSE_BY_COMMISSION,I_TOTAL_EXPENSE_BY_COMMISSION)
,nd(P_TOTAL_REMNRTN_BY_COMMISSION,I_TOTAL_REMNRTN_BY_COMMISSION)
,nd(P_PRESCRIBED_ZONE_DEDN_AMT,I_PRESCRIBED_ZONE_DEDN_AMT)
,nd(P_ADDITIONAL_TAX,I_ADDITIONAL_TAX)
,nd(P_PROV_OVERRIDE_RATE,I_PROV_OVERRIDE_RATE)
,nd(P_PROV_OVERRIDE_AMOUNT,I_PROV_OVERRIDE_AMOUNT)
,P_PROV_EXEMPT_FLAG
,P_PMED_EXEMPT_FLAG
,P_WC_EXEMPT_FLAG
,P_QPP_EXEMPT_FLAG
,P_TAX_CALC_METHOD
,nd(P_OTHER_TAX_CREDIT,I_OTHER_TAX_CREDIT)
,P_CA_TAX_INFORMATION_CATEGORY
,P_CA_TAX_INFORMATION1
,P_CA_TAX_INFORMATION2
,P_CA_TAX_INFORMATION3
,P_CA_TAX_INFORMATION4
,P_CA_TAX_INFORMATION5
,P_CA_TAX_INFORMATION6
,P_CA_TAX_INFORMATION7
,P_CA_TAX_INFORMATION8
,P_CA_TAX_INFORMATION9
,P_CA_TAX_INFORMATION10
,P_CA_TAX_INFORMATION11
,P_CA_TAX_INFORMATION12
,P_CA_TAX_INFORMATION13
,P_CA_TAX_INFORMATION14
,P_CA_TAX_INFORMATION15
,P_CA_TAX_INFORMATION16
,P_CA_TAX_INFORMATION17
,P_CA_TAX_INFORMATION18
,P_CA_TAX_INFORMATION19
,P_CA_TAX_INFORMATION20
,P_CA_TAX_INFORMATION21
,P_CA_TAX_INFORMATION22
,P_CA_TAX_INFORMATION23
,P_CA_TAX_INFORMATION24
,P_CA_TAX_INFORMATION25
,P_CA_TAX_INFORMATION26
,P_CA_TAX_INFORMATION27
,P_CA_TAX_INFORMATION28
,P_CA_TAX_INFORMATION29
,P_CA_TAX_INFORMATION30
,nd(P_PROV_LSP_AMOUNT,I_PROV_LSP_AMOUNT)
,dc(P_EFFECTIVE_DATE)
,P_DATETRACK_MODE
,P_PPIP_EXEMPT_FLAG
,P_EMP_PROV_TAX_INF_USER_KEY);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,dn,d(l.pval001)) p1,
decode(l.pval002,cn,dn,d(l.pval002)) p2,
decode(l.pval003,cn,vn,vn,vh,l.pval003) p3,
l.pval003 d3,
decode(l.pval004,cn,nn,vn,nh,n(l.pval004)) p4,
l.pval004 d4,
decode(l.pval005,cn,vn,vn,vh,l.pval005) p5,
l.pval005 d5,
decode(l.pval006,cn,vn,vn,vh,l.pval006) p6,
l.pval006 d6,
decode(l.pval007,cn,nn,vn,nh,n(l.pval007)) p7,
l.pval007 d7,
decode(l.pval008,cn,vn,vn,vh,l.pval008) p8,
l.pval008 d8,
decode(l.pval009,cn,vn,vn,vh,l.pval009) p9,
l.pval009 d9,
decode(l.pval010,cn,vn,vn,vh,l.pval010) p10,
l.pval010 d10,
decode(l.pval011,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval011,'YES_NO',d(l.pval061),vn)) p11,
l.pval011 d11,
decode(l.pval012,cn,nn,vn,nh,n(l.pval012)) p12,
l.pval012 d12,
decode(l.pval013,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval013,'YES_NO',d(l.pval061),vn)) p13,
l.pval013 d13,
decode(l.pval014,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval014,'YES_NO',d(l.pval061),vn)) p14,
l.pval014 d14,
decode(l.pval015,cn,nn,vn,nh,n(l.pval015)) p15,
l.pval015 d15,
decode(l.pval016,cn,nn,vn,nh,n(l.pval016)) p16,
l.pval016 d16,
decode(l.pval017,cn,nn,vn,nh,n(l.pval017)) p17,
l.pval017 d17,
decode(l.pval018,cn,nn,vn,nh,n(l.pval018)) p18,
l.pval018 d18,
decode(l.pval019,cn,nn,vn,nh,n(l.pval019)) p19,
l.pval019 d19,
decode(l.pval020,cn,nn,vn,nh,n(l.pval020)) p20,
l.pval020 d20,
decode(l.pval021,cn,nn,vn,nh,n(l.pval021)) p21,
l.pval021 d21,
decode(l.pval022,cn,nn,vn,nh,n(l.pval022)) p22,
l.pval022 d22,
decode(l.pval023,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval023,'YES_NO',d(l.pval061),vn)) p23,
l.pval023 d23,
decode(l.pval024,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval024,'YES_NO',d(l.pval061),vn)) p24,
l.pval024 d24,
decode(l.pval025,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval025,'YES_NO',d(l.pval061),vn)) p25,
l.pval025 d25,
decode(l.pval026,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval026,'YES_NO',d(l.pval061),vn)) p26,
l.pval026 d26,
decode(l.pval027,cn,vn,vn,vh,l.pval027) p27,
l.pval027 d27,
decode(l.pval028,cn,nn,vn,nh,n(l.pval028)) p28,
l.pval028 d28,
decode(l.pval029,cn,vn,vn,vh,l.pval029) p29,
l.pval029 d29,
decode(l.pval030,cn,vn,vn,vh,l.pval030) p30,
l.pval030 d30,
decode(l.pval031,cn,vn,vn,vh,l.pval031) p31,
l.pval031 d31,
decode(l.pval032,cn,vn,vn,vh,l.pval032) p32,
l.pval032 d32,
decode(l.pval033,cn,vn,vn,vh,l.pval033) p33,
l.pval033 d33,
decode(l.pval034,cn,vn,vn,vh,l.pval034) p34,
l.pval034 d34,
decode(l.pval035,cn,vn,vn,vh,l.pval035) p35,
l.pval035 d35,
decode(l.pval036,cn,vn,vn,vh,l.pval036) p36,
l.pval036 d36,
decode(l.pval037,cn,vn,vn,vh,l.pval037) p37,
l.pval037 d37,
decode(l.pval038,cn,vn,vn,vh,l.pval038) p38,
l.pval038 d38,
decode(l.pval039,cn,vn,vn,vh,l.pval039) p39,
l.pval039 d39,
decode(l.pval040,cn,vn,vn,vh,l.pval040) p40,
l.pval040 d40,
decode(l.pval041,cn,vn,vn,vh,l.pval041) p41,
l.pval041 d41,
decode(l.pval042,cn,vn,vn,vh,l.pval042) p42,
l.pval042 d42,
decode(l.pval043,cn,vn,vn,vh,l.pval043) p43,
l.pval043 d43,
decode(l.pval044,cn,vn,vn,vh,l.pval044) p44,
l.pval044 d44,
decode(l.pval045,cn,vn,vn,vh,l.pval045) p45,
l.pval045 d45,
decode(l.pval046,cn,vn,vn,vh,l.pval046) p46,
l.pval046 d46,
decode(l.pval047,cn,vn,vn,vh,l.pval047) p47,
l.pval047 d47,
decode(l.pval048,cn,vn,vn,vh,l.pval048) p48,
l.pval048 d48,
decode(l.pval049,cn,vn,vn,vh,l.pval049) p49,
l.pval049 d49,
decode(l.pval050,cn,vn,vn,vh,l.pval050) p50,
l.pval050 d50,
decode(l.pval051,cn,vn,vn,vh,l.pval051) p51,
l.pval051 d51,
decode(l.pval052,cn,vn,vn,vh,l.pval052) p52,
l.pval052 d52,
decode(l.pval053,cn,vn,vn,vh,l.pval053) p53,
l.pval053 d53,
decode(l.pval054,cn,vn,vn,vh,l.pval054) p54,
l.pval054 d54,
decode(l.pval055,cn,vn,vn,vh,l.pval055) p55,
l.pval055 d55,
decode(l.pval056,cn,vn,vn,vh,l.pval056) p56,
l.pval056 d56,
decode(l.pval057,cn,vn,vn,vh,l.pval057) p57,
l.pval057 d57,
decode(l.pval058,cn,vn,vn,vh,l.pval058) p58,
l.pval058 d58,
decode(l.pval059,cn,vn,vn,vh,l.pval059) p59,
l.pval059 d59,
decode(l.pval060,cn,nn,vn,nh,n(l.pval060)) p60,
l.pval060 d60,
decode(l.pval061,cn,dn,d(l.pval061)) p61,
decode(l.pval062,cn,vn,l.pval062) p62,
decode(l.pval063,cn,vn,vn,vh,l.pval063) p63,
l.pval063 d63,
decode(l.pval064,cn,vn,l.pval064) p64
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_EMP_PROVINCE_TAX_INF_ID number;
L_OBJECT_VERSION_NUMBER number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if c.p64 is null then
L_EMP_PROVINCE_TAX_INF_ID:=nn;
else
L_EMP_PROVINCE_TAX_INF_ID := 
hr_pump_get.get_emp_province_tax_inf_id
(P_EMP_PROV_TAX_INF_USER_KEY => c.p64);
end if;
--
if c.p64 is null or
c.p61 is null then
L_OBJECT_VERSION_NUMBER:=nn;
else
L_OBJECT_VERSION_NUMBER := 
hr_pump_get.GET_CA_EMP_PRVTAX_INF_OVN
(P_EMP_PROV_TAX_INF_USER_KEY => c.p64
,P_EFFECTIVE_DATE => c.p61);
end if;
--
hr_data_pump.api_trc_on;
PAY_CA_EMP_PRVTAX_INF_API.UPDATE_CA_EMP_PRVTAX_INF
(p_validate => l_validate
,P_EMP_PROVINCE_TAX_INF_ID => L_EMP_PROVINCE_TAX_INF_ID
,P_EFFECTIVE_START_DATE => c.p1
,P_EFFECTIVE_END_DATE => c.p2
,P_LEGISLATION_CODE => c.p3
,P_ASSIGNMENT_ID => c.p4
,p_business_group_id => p_business_group_id
,P_PROVINCE_CODE => c.p5
,P_JURISDICTION_CODE => c.p6
,P_TAX_CREDIT_AMOUNT => c.p7
,P_BASIC_EXEMPTION_FLAG => c.p8
,P_DEDUCTION_CODE => c.p9
,P_EXTRA_INFO_NOT_PROVIDED => c.p10
,P_MARRIAGE_STATUS => c.p11
,P_NO_OF_INFIRM_DEPENDANTS => c.p12
,P_NON_RESIDENT_STATUS => c.p13
,P_DISABILITY_STATUS => c.p14
,P_NO_OF_DEPENDANTS => c.p15
,P_ANNUAL_DEDN => c.p16
,P_TOTAL_EXPENSE_BY_COMMISSION => c.p17
,P_TOTAL_REMNRTN_BY_COMMISSION => c.p18
,P_PRESCRIBED_ZONE_DEDN_AMT => c.p19
,P_ADDITIONAL_TAX => c.p20
,P_PROV_OVERRIDE_RATE => c.p21
,P_PROV_OVERRIDE_AMOUNT => c.p22
,P_PROV_EXEMPT_FLAG => c.p23
,P_PMED_EXEMPT_FLAG => c.p24
,P_WC_EXEMPT_FLAG => c.p25
,P_QPP_EXEMPT_FLAG => c.p26
,P_TAX_CALC_METHOD => c.p27
,P_OTHER_TAX_CREDIT => c.p28
,P_CA_TAX_INFORMATION_CATEGORY => c.p29
,P_CA_TAX_INFORMATION1 => c.p30
,P_CA_TAX_INFORMATION2 => c.p31
,P_CA_TAX_INFORMATION3 => c.p32
,P_CA_TAX_INFORMATION4 => c.p33
,P_CA_TAX_INFORMATION5 => c.p34
,P_CA_TAX_INFORMATION6 => c.p35
,P_CA_TAX_INFORMATION7 => c.p36
,P_CA_TAX_INFORMATION8 => c.p37
,P_CA_TAX_INFORMATION9 => c.p38
,P_CA_TAX_INFORMATION10 => c.p39
,P_CA_TAX_INFORMATION11 => c.p40
,P_CA_TAX_INFORMATION12 => c.p41
,P_CA_TAX_INFORMATION13 => c.p42
,P_CA_TAX_INFORMATION14 => c.p43
,P_CA_TAX_INFORMATION15 => c.p44
,P_CA_TAX_INFORMATION16 => c.p45
,P_CA_TAX_INFORMATION17 => c.p46
,P_CA_TAX_INFORMATION18 => c.p47
,P_CA_TAX_INFORMATION19 => c.p48
,P_CA_TAX_INFORMATION20 => c.p49
,P_CA_TAX_INFORMATION21 => c.p50
,P_CA_TAX_INFORMATION22 => c.p51
,P_CA_TAX_INFORMATION23 => c.p52
,P_CA_TAX_INFORMATION24 => c.p53
,P_CA_TAX_INFORMATION25 => c.p54
,P_CA_TAX_INFORMATION26 => c.p55
,P_CA_TAX_INFORMATION27 => c.p56
,P_CA_TAX_INFORMATION28 => c.p57
,P_CA_TAX_INFORMATION29 => c.p58
,P_CA_TAX_INFORMATION30 => c.p59
,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER
,P_PROV_LSP_AMOUNT => c.p60
,P_EFFECTIVE_DATE => c.p61
,P_DATETRACK_MODE => c.p62
,P_PPIP_EXEMPT_FLAG => c.p63);
hr_data_pump.api_trc_off;

--
update hr_pump_batch_lines l set
l.pval001 = decode(c.p1,null,cn,dc(c.p1)),
l.pval002 = decode(c.p2,null,cn,dc(c.p2))
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_UPDATE_CA_EMP_PRVTAX_INF;

/
