--------------------------------------------------------
--  DDL for Package Body PA_PARCPRJR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PARCPRJR_XMLP_PKG" AS
/* $Header: PARCPRJRB.pls 120.1 2008/04/09 11:59:56 krreddy noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  L_CP_STATUS BOOLEAN;
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    IF (P_RET_STATUS = 'Y') THEN
      L_CP_STATUS := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING'
                                                         ,'');
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_RETURN_STATUS VARCHAR2(1);
    L_MSG_COUNT NUMBER;
    L_MSG_DATA VARCHAR2(10000);
    L_DATE DATE;
    L_API_VERSION NUMBER := 1.0;
    L_RESOURCE_ID NUMBER(15);
    L_EXCEPTION EXCEPTION;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

    P_TERM_RANGE_DATE1:=to_char(P_TERM_RANGE_DATE,'DD-MON-YY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    IF P_SELECTION_OPTION = 'EMP_RANGE' THEN
      IF (P_FROM_EMP_NUM IS NULL OR P_TO_EMP_NUM IS NULL) THEN
        CP_CHK_EMP_RANGE := 'N';
        RETURN (TRUE);
      END IF;
    ELSIF P_SELECTION_OPTION = 'EMP_RANGE_ORG' THEN
      IF (P_ORGANIZATION_ID IS NULL OR P_FROM_EMP_NUM IS NULL OR P_TO_EMP_NUM IS NULL) THEN
        CP_CHK_ORG_AND_EMP_RANGE := 'N';
        RETURN (TRUE);
      END IF;
    ELSIF P_SELECTION_OPTION = 'SINGLE_ORG' THEN
      IF (P_ORGANIZATION_ID IS NULL) THEN
        CP_CHK_SINGLE_ORG := 'N';
        RETURN (TRUE);
      END IF;
    ELSIF P_SELECTION_OPTION = 'START_ORG' THEN
      IF (P_ORG_STR_VERSION_ID IS NULL OR P_START_ORGANIZATION_ID IS NULL) THEN
        CP_CHK_START_ORG := 'N';
        RETURN (TRUE);
      END IF;
    END IF;
    P_DEBUG_MODE := FND_PROFILE.VALUE('PA_DEBUG_MODE');
    BEGIN
      SELECT
        SYSDATE
      INTO L_DATE
      FROM
        DUAL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        /*SRW.MESSAGE(100
                   ,' OTHER PROBLEM IN SELECTING THE SYSDATE ' || SQLERRM)*/NULL;
    END;
    PA_R_PROJECT_RESOURCES_PUB.CREATE_RESOURCE(P_API_VERSION => L_API_VERSION
                                              ,P_FROM_EMP_NUM => P_FROM_EMP_NUM
                                              ,P_TO_EMP_NUM => P_TO_EMP_NUM
                                              ,P_ORGANIZATION_ID => P_ORGANIZATION_ID
                                              ,P_REFRESH => P_REFRESH
                                              ,P_PULL_TERM_RES => P_PULL_TERM_RES
                                              ,P_TERM_RANGE_DATE => P_TERM_RANGE_DATE
                                              ,P_PERSON_TYPE => P_PERSON_TYPE
                                              ,P_SELECTION_OPTION => P_SELECTION_OPTION
                                              ,P_ORG_STR_VERSION_ID => P_ORG_STR_VERSION_ID
                                              ,P_START_ORGANIZATION_ID => P_START_ORGANIZATION_ID
                                              ,X_RETURN_STATUS => L_RETURN_STATUS
                                              ,X_MSG_COUNT => L_MSG_COUNT
                                              ,X_MSG_DATA => L_MSG_DATA
                                              ,X_RESOURCE_ID => L_RESOURCE_ID);
  /*  IF L_RETURN_STATUS <> 'S' THEN
      RAISE L_EXCEPTION;
    END IF;*/
      IF (L_RETURN_STATUS <> 'S' AND L_RETURN_STATUS <> 'W') THEN
      RAISE L_EXCEPTION;
    END IF;
    IF (L_RETURN_STATUS = 'W') THEN
      P_RET_STATUS := 'Y';
    END IF;

    SELECT
      count(*)
    INTO CP_COUNT
    FROM
      PA_RESOURCES RES,
      PA_RESOURCES_DENORM OU,
      HR_ALL_ORGANIZATION_UNITS HRORG
    WHERE RES.RESOURCE_ID = OU.RESOURCE_ID
      AND HRORG.ORGANIZATION_ID = OU.RESOURCE_ORGANIZATION_ID
      AND ( DECODE(RES.REQUEST_ID
          ,P_CONC_REQUEST_ID
          ,RES.REQUEST_ID
          ,NULL) = P_CONC_REQUEST_ID
    OR DECODE(OU.REQUEST_ID
          ,P_CONC_REQUEST_ID
          ,OU.REQUEST_ID
          ,NULL) = P_CONC_REQUEST_ID );
    RETURN (TRUE);
  EXCEPTION
    WHEN L_EXCEPTION THEN
      FND_MSG_PUB.GET(P_ENCODED => 'F'
                     ,P_MSG_INDEX => 1
                     ,P_DATA => L_MSG_DATA
                     ,P_MSG_INDEX_OUT => L_MSG_COUNT);
      IF NVL(L_MSG_COUNT
         ,0) > 0 THEN
        /*SRW.MESSAGE(L_MSG_COUNT
                   ,L_MSG_DATA)*/NULL;
        RAISE;
      END IF;
    WHEN OTHERS THEN
      RAISE;
      RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_ORGANIZATION_NAMEFORMULA RETURN CHAR IS
    L_NAME PA_R_EXPENDITURE_ORGS_V.NAME%TYPE := NULL;
  BEGIN
    IF P_ORGANIZATION_ID IS NOT NULL THEN
      SELECT
        SUBSTR(NAME
              ,1
              ,60)
      INTO L_NAME
      FROM
        PA_R_EXPENDITURE_ORGS_V
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    END IF;
    RETURN L_NAME;
  END CF_ORGANIZATION_NAMEFORMULA;

  FUNCTION CF_REFRESHFORMULA RETURN CHAR IS
    L_MEANING FND_LOOKUPS.MEANING%TYPE := NULL;
  BEGIN
    IF P_REFRESH = 'Y' THEN
      SELECT
        MEANING
      INTO L_MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = 'Y';
    ELSIF P_REFRESH = 'N' THEN
      SELECT
        MEANING
      INTO L_MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = 'N';
    END IF;
    RETURN L_MEANING;
  END CF_REFRESHFORMULA;

  FUNCTION CF_SELECTION_OPTIONFORMULA RETURN CHAR IS
    L_SELECTION_OPTION PA_LOOKUPS.MEANING%TYPE := NULL;
  BEGIN
    IF P_SELECTION_OPTION IS NOT NULL THEN
      SELECT
        MEANING
      INTO L_SELECTION_OPTION
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_TYPE = 'PA_RES_PULL_SELECT_TYPE'
        AND LOOKUP_CODE = P_SELECTION_OPTION;
    END IF;
    RETURN L_SELECTION_OPTION;
  END CF_SELECTION_OPTIONFORMULA;

  FUNCTION CF_ORG_STR_VERSION_IDFORMULA RETURN CHAR IS
    L_ORG_STR_VERSION_ID PER_ORGANIZATION_STRUCTURES.NAME%TYPE := NULL;
    L_ORG_STR_VERSION_NUM PER_ORG_STRUCTURE_VERSIONS.VERSION_NUMBER%TYPE := NULL;
  BEGIN
    IF P_ORG_STR_VERSION_ID IS NOT NULL THEN
      SELECT
        SUBSTR(POS.NAME
              ,1
              ,60),
        POSV.VERSION_NUMBER
      INTO L_ORG_STR_VERSION_ID,L_ORG_STR_VERSION_NUM
      FROM
        PER_ORGANIZATION_STRUCTURES POS,
        PER_ORG_STRUCTURE_VERSIONS POSV
      WHERE POSV.ORGANIZATION_STRUCTURE_ID = POS.ORGANIZATION_STRUCTURE_ID
        AND POSV.ORG_STRUCTURE_VERSION_ID = P_ORG_STR_VERSION_ID;
    END IF;
    IF P_ORG_STR_VERSION_ID IS NOT NULL THEN
      RETURN L_ORG_STR_VERSION_ID || ' (' || L_ORG_STR_VERSION_NUM || ')';
    ELSE
      RETURN NULL;
    END IF;
  END CF_ORG_STR_VERSION_IDFORMULA;

  FUNCTION CF_START_ORG_IDFORMULA RETURN CHAR IS
    L_START_ORG_ID HR_ORGANIZATION_UNITS.NAME%TYPE := NULL;
  BEGIN
    IF P_START_ORGANIZATION_ID IS NOT NULL THEN
      SELECT
        SUBSTR(NAME
              ,1
              ,60)
      INTO L_START_ORG_ID
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_START_ORGANIZATION_ID;
    END IF;
    RETURN L_START_ORG_ID;
  END CF_START_ORG_IDFORMULA;

  FUNCTION CF_PULL_TERM_RESFORMULA RETURN CHAR IS
    L_PULL_TERM_RES PA_LOOKUPS.MEANING%TYPE := NULL;
  BEGIN
    IF P_PULL_TERM_RES IS NOT NULL THEN
      SELECT
        MEANING
      INTO L_PULL_TERM_RES
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_PULL_TERM_RES;
    END IF;
    RETURN L_PULL_TERM_RES;
  END CF_PULL_TERM_RESFORMULA;

  FUNCTION CF_PERSON_TYPEFORMULA RETURN CHAR IS
    L_PERSON_TYPE FND_LOOKUP_VALUES.MEANING%TYPE := NULL;
  BEGIN
    IF P_PERSON_TYPE IS NOT NULL THEN
      SELECT
        MEANING
      INTO L_PERSON_TYPE
      FROM
        FND_LOOKUP_VALUES
      WHERE LOOKUP_TYPE in ( 'PA_REP_ALL' , 'PERSON_TYPE' )
        AND LOOKUP_CODE = P_PERSON_TYPE
        AND LANGUAGE = USERENV('LANG');
    END IF;
    RETURN L_PERSON_TYPE;
  END CF_PERSON_TYPEFORMULA;

  FUNCTION CP_NODATAFOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NODATAFOUND;
  END CP_NODATAFOUND_P;

  FUNCTION CP_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_COUNT;
  END CP_COUNT_P;

  FUNCTION CP_CHK_ORG_OR_EMP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CHK_ORG_OR_EMP;
  END CP_CHK_ORG_OR_EMP_P;

  FUNCTION CP_CHK_EMP_RANGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CHK_EMP_RANGE;
  END CP_CHK_EMP_RANGE_P;

  FUNCTION CP_CHK_ORG_AND_EMP_RANGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CHK_ORG_AND_EMP_RANGE;
  END CP_CHK_ORG_AND_EMP_RANGE_P;

  FUNCTION CP_CHK_SINGLE_ORG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CHK_SINGLE_ORG;
  END CP_CHK_SINGLE_ORG_P;

  FUNCTION CP_CHK_START_ORG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CHK_START_ORG;
  END CP_CHK_START_ORG_P;

END PA_PARCPRJR_XMLP_PKG;


/
