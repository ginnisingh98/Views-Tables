--------------------------------------------------------
--  DDL for Package Body WMS_WMSSCHS1_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WMS_WMSSCHS1_XMLP_PKG" AS
/* $Header: WMSSCHS1B.pls 120.1.12010000.2 2008/08/19 09:56:25 anviswan ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_REPORT_NAME VARCHAR2(10000);
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Init')*/NULL;
    END;
    BEGIN
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
	L_REPORT_NAME := SUBSTR(L_REPORT_NAME,1,INSTR(L_REPORT_NAME,' (XML)'));
      P_REPORT_NAME := L_REPORT_NAME;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_REPORT_NAME := 'Schedule Shipment Report';
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(2
                   ,'Failed in before report trigger:MSTK')*/NULL;
    END;
    BEGIN
      SELECT
        REQUEST_DATE,
        ACTUAL_START_DATE,
        SAVE_OUTPUT_FLAG,
        PRINTER
      INTO P_REQUEST_DATE,P_ACTUAL_START_DATE,P_SAVE_OUTPUT_FLAG,P_PRINTER
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_CONC_REQUEST_ID;
      RETURN (TRUE);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(5
                   ,'Failed flexsql loc select in before report trigger')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    L_VALUE_YES MFG_LOOKUPS.MEANING%TYPE;
    L_VALUE_NO MFG_LOOKUPS.MEANING%TYPE;
    L_MASTER_ORG_ID NUMBER;
  BEGIN

  P_PROJECT_1:=P_PROJECT;
  P_TASK_1:=P_TASK;
    /*SRW.MESSAGE(1
               ,'org_id:' || P_ORG_ID)*/NULL;
    SELECT
      OPERATING_UNIT
    INTO L_MASTER_ORG_ID
    FROM
      ORG_ORGANIZATION_DEFINITIONS
    WHERE ORGANIZATION_ID = P_ORG_ID;
    FND_CLIENT_INFO.SET_ORG_CONTEXT(L_MASTER_ORG_ID);
    IF P_SCHEDULE_SHIPMENT_FROM_DATE IS NOT NULL AND P_SCHEDULE_SHIPMENT_TO_DATE IS NOT NULL THEN
      LP_SHIPMENT_SCHEDULE_DATE := ' AND to_char(OE1.SCHEDULE_SHIP_DATE,''YYYY/MM/DD'') BETWEEN ''' || SUBSTR(P_SCHEDULE_SHIPMENT_FROM_DATE
                                         ,1
                                         ,10) || ''' AND ''' || SUBSTR(P_SCHEDULE_SHIPMENT_TO_DATE
                                         ,1
                                         ,10) || '''';
    ELSIF P_SCHEDULE_SHIPMENT_FROM_DATE IS NOT NULL AND P_SCHEDULE_SHIPMENT_TO_DATE IS NULL THEN
      LP_SHIPMENT_SCHEDULE_DATE := ' AND to_char(OE1.SCHEDULE_SHIP_DATE,''YYYY/MM/DD'') >= ''' || SUBSTR(P_SCHEDULE_SHIPMENT_FROM_DATE
                                         ,1
                                         ,10) || '''';
    ELSIF P_SCHEDULE_SHIPMENT_FROM_DATE IS NULL AND P_SCHEDULE_SHIPMENT_TO_DATE IS NOT NULL THEN
      LP_SHIPMENT_SCHEDULE_DATE := ' AND to_char(OE1.SCHEDULE_SHIP_DATE,''YYYY/MM/DD'') <= ''' || SUBSTR(P_SCHEDULE_SHIPMENT_TO_DATE
                                         ,1
                                         ,10) || '''';
    END IF;
    IF P_REQUEST_DATE_FROM IS NOT NULL AND P_REQUEST_DATE_TO IS NOT NULL THEN
      LP_REQUEST_DATE := ' AND to_char(OE1.REQUEST_DATE,''YYYY/MM/DD'') BETWEEN ''' || SUBSTR(P_REQUEST_DATE_FROM
                               ,1
                               ,10) || ''' AND ''' || SUBSTR(P_REQUEST_DATE_TO
                               ,1
                               ,10) || '''';
    ELSIF P_REQUEST_DATE_FROM IS NOT NULL AND P_REQUEST_DATE_TO IS NULL THEN
      LP_REQUEST_DATE := ' AND to_char(OE1.REQUEST_DATE,''YYYY/MM/DD'')  >= ''' || SUBSTR(P_REQUEST_DATE_FROM
                               ,1
                               ,10) || '''';
    ELSIF P_REQUEST_DATE_FROM IS NULL AND P_REQUEST_DATE_TO IS NOT NULL THEN
      LP_REQUEST_DATE := ' AND to_char(OE1.REQUEST_DATE,''YYYY/MM/DD'')  <= ''' || SUBSTR(P_REQUEST_DATE_TO
                               ,1
                               ,10) || '''';
    END IF;
    IF P_DELIVERY_ID IS NOT NULL THEN
      LP_DELIVERY_ID := ' AND WND.DELIVERY_ID = ' || P_DELIVERY_ID;
    END IF;
    IF P_TRIP_ID IS NOT NULL THEN
      LP_TRIP_STOP := ' AND WT.TRIP_ID = ' || P_TRIP_ID;
    END IF;
    IF P_PROJECT_ID IS NOT NULL THEN
      LP_PROJECT := ' AND WDD.PROJECT_ID =' || P_PROJECT_ID;
    END IF;
    IF P_TASK_ID IS NOT NULL THEN
      LP_TASK := ' AND WDD.TASK_ID =' || P_TASK_ID;
    END IF;
    IF P_PRIOR_RES_FLAG = 1 THEN
      LP_PRIOR_RES_FLAG := ' AND OE1.LINE_ID= MR.DEMAND_SOURCE_LINE_ID';
    ELSE
      LP_PRIOR_RES_FLAG := ' AND OE1.LINE_ID= MR.DEMAND_SOURCE_LINE_ID(+)';
    END IF;
    /*SRW.MESSAGE(1
               ,'Order header' || P_ORDER_HEADER_ID)*/NULL;
    IF P_ORDER_HEADER_ID IS NOT NULL THEN
      LP_SO_HEADER := ' AND  OE1.HEADER_ID =' || P_ORDER_HEADER_ID;
    END IF;
    /*SRW.MESSAGE(1
               ,'Order header' || LP_SO_HEADER)*/NULL;
    IF P_ORDER_LINE_ID IS NOT NULL THEN
      LP_SO_LINE := ' AND  OE1.LINE_ID  =' || P_ORDER_LINE_ID;
    END IF;
    IF P_ORG_ID IS NOT NULL THEN
      SELECT
        ORGANIZATION_CODE,
        ORGANIZATION_NAME
      INTO P_ORG_CODE,P_ORG_NAME
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = P_ORG_ID;
    END IF;
    IF P_CUSTOMER_ID IS NOT NULL THEN
      SELECT
        PARTY.PARTY_NAME,
        PARTY.PARTY_NUMBER
      INTO P_CUSTOMER_NAME,P_CUSTOMER_NUMBER
      FROM
        HZ_PARTIES PARTY,
        HZ_CUST_ACCOUNTS CUST_ACCT
      WHERE CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER_ID
        AND CUST_ACCT.PARTY_ID = PARTY.PARTY_ID;
    END IF;
    SELECT
      MEANING
    INTO L_VALUE_NO
    FROM
      MFG_LOOKUPS
    WHERE LOOKUP_TYPE = 'SYS_YES_NO'
      AND LOOKUP_CODE = 2;
    SELECT
      MEANING
    INTO L_VALUE_YES
    FROM
      MFG_LOOKUPS
    WHERE LOOKUP_TYPE = 'SYS_YES_NO'
      AND LOOKUP_CODE = 1;
    IF P_PRINT_CUS_PROD_DET = 1 THEN
      P_PRINT_CUS_DETAILS := L_VALUE_YES;
    ELSE
      P_PRINT_CUS_DETAILS := L_VALUE_NO;
    END IF;
    IF P_PRIOR_RES_FLAG = 1 THEN
      P_RES_FLAG := L_VALUE_YES;
    ELSE
      P_RES_FLAG := L_VALUE_NO;
    END IF;
    IF P_ORDER_TYPE IS NOT NULL THEN
      BEGIN
        /*SRW.MESSAGE(1
                   ,'so_type' || P_ORDER_TYPE)*/NULL;
        SELECT
          NAME
        INTO P_SO_TYPE
        FROM
          OE_TRANSACTION_TYPES
        WHERE TRANSACTION_TYPE_ID = P_ORDER_TYPE;
        /*SRW.MESSAGE(1
                   ,'SO_TYPE' || P_SO_TYPE)*/NULL;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(1
                     ,'hi..no type found' || SQLERRM)*/NULL;
      END;
    END IF;
    IF P_ORDER_HEADER_ID IS NOT NULL THEN
      BEGIN
        SELECT
          ORDER_NUMBER
        INTO P_ORDER_NUMBER
        FROM
          OE_ORDER_HEADERS_ALL
        WHERE HEADER_ID = P_ORDER_HEADER_ID;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(1
                     ,'ORDER NUMBER NOT FOUND')*/NULL;
      END;
    END IF;
    IF P_ORDER_HEADER_ID IS NOT NULL AND P_ORDER_LINE_ID IS NOT NULL THEN
      BEGIN
        SELECT
          LINE_NUMBER || '.' || SHIPMENT_NUMBER || '.' || DECODE(OPTION_NUMBER
                ,NULL
                ,' '
                ,'.' || OPTION_NUMBER)
        INTO P_LINE_NUMBER
        FROM
          OE_ORDER_LINES_ALL
        WHERE HEADER_ID = P_ORDER_HEADER_ID
          AND LINE_ID = P_ORDER_LINE_ID;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(1
                     ,'hi..no line found' || SQLERRM)*/NULL;
      END;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN TRUE;
  END AFTERREPORT;

  FUNCTION CF_LOC_FLEX_FIELDFORMULA RETURN CHAR IS
  BEGIN
    RETURN '  ';
  END CF_LOC_FLEX_FIELDFORMULA;

  FUNCTION CF_LPN_NUMBERFORMULA(LPN_ID_1 IN NUMBER) RETURN CHAR IS
  BEGIN
    IF LPN_ID_1 IS NOT NULL THEN
      SELECT
        LICENSE_PLATE_NUMBER
      INTO P_LICENSE_PLATE_NUMBER
      FROM
        WMS_LICENSE_PLATE_NUMBERS
      WHERE LPN_ID = LPN_ID_1;
    ELSE
      P_LICENSE_PLATE_NUMBER := '';
    END IF;
    RETURN (P_LICENSE_PLATE_NUMBER);
  END CF_LPN_NUMBERFORMULA;

  FUNCTION CF_OUTERMOST_LPNFORMULA(LPN_ID_1 IN NUMBER) RETURN CHAR IS
  BEGIN
    IF LPN_ID_1 IS NOT NULL THEN
      SELECT
        LICENSE_PLATE_NUMBER
      INTO P_OUTERMOST_LPN
      FROM
        WMS_LICENSE_PLATE_NUMBERS
      WHERE LPN_ID = (
        SELECT
          OUTERMOST_LPN_ID
        FROM
          WMS_LICENSE_PLATE_NUMBERS
        WHERE LPN_ID = LPN_ID_1 );
    ELSE
      P_OUTERMOST_LPN := '  ';
    END IF;
    RETURN (P_OUTERMOST_LPN);
  END CF_OUTERMOST_LPNFORMULA;

  FUNCTION CF_PROJECTFORMULA(PROJECT_ID_1 IN NUMBER) RETURN CHAR IS
  BEGIN
    IF PROJECT_ID_1 IS NOT NULL THEN
      SELECT
        PROJECT_NAME
      INTO P_PROJECT_1
      FROM
        PJM_PROJECTS_ORG_V
      WHERE INVENTORY_ORGANIZATION_ID = P_ORG_ID
        AND PROJECT_ID = PROJECT_ID_1;
    ELSE
      P_PROJECT_1 := '  ';
    END IF;
    RETURN (P_PROJECT_1);
  END CF_PROJECTFORMULA;

  FUNCTION CF_TASKFORMULA(TASK_ID_1 IN NUMBER
                         ,PROJECT_ID_1 IN NUMBER) RETURN CHAR IS
  BEGIN
    IF TASK_ID_1 IS NOT NULL THEN
      SELECT
        TASK_NAME
      INTO P_TASK_1
      FROM
        PJM_TASKS_V
      WHERE PROJECT_ID = PROJECT_ID_1
        AND TASK_ID = TASK_ID_1;
    ELSE
      P_TASK_1 := '';
    END IF;
    RETURN (P_TASK_1);
  END CF_TASKFORMULA;

  FUNCTION CF_SHIP_TO_LOCATIONFORMULA(SHIP_TO_LOCATION_ID_1 IN NUMBER) RETURN CHAR IS
  BEGIN
    BEGIN
      SELECT
        LOCATION_CODE
      INTO P_SHIP_TO_LOCATION
      FROM
        HR_LOCATIONS
      WHERE LOCATION_ID = SHIP_TO_LOCATION_ID_1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_SHIP_TO_LOCATION := '  ';
    END;
    RETURN (P_SHIP_TO_LOCATION);
  END CF_SHIP_TO_LOCATIONFORMULA;

  FUNCTION CF_BARCODEFORMULA RETURN VARCHAR2 IS
    L_BARCODE_TYPE VARCHAR2(30);
    L_BARCODE_FONT_NAME VARCHAR2(30);
    BARCODE_STRING VARCHAR2(30);
    L_START_DIGIT VARCHAR2(3);
    L_STOP_DIGIT VARCHAR2(3);
    L_CARRIAGE_RETURN VARCHAR2(10);
    L_CHECKSUMDATA VARCHAR2(100);
    L_CHECKSUM NUMBER;
    L_ADDITIONAL_CHECKSUM NUMBER;
  BEGIN
    RETURN '  ';
  END CF_BARCODEFORMULA;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

END WMS_WMSSCHS1_XMLP_PKG;



/
