--------------------------------------------------------
--  DDL for Package Body JA_JAINVAR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINVAR_XMLP_PKG" AS
/* $Header: JAINVARB.pls 120.1 2007/12/25 16:32:57 dwkrishn noship $ */
  FUNCTION CF_1FORMULA(CUSTOMER_TRX_ID IN NUMBER
                      ,CUSTOMER_TRX_LINE_ID IN NUMBER
                      ,EXCISE_INVOICE_NO IN VARCHAR2
                      ,CF_4 IN NUMBER
                      ,AUTO_INVOICE_FLAG IN VARCHAR2
                      ,INVENTORY_ITEM_ID IN NUMBER
                      ,PAYMENT_REGISTER IN VARCHAR2) RETURN VARCHAR2 IS
    V_FOLIO_NO VARCHAR2(100);
    V_PICKING_LINE_ID NUMBER;
    V_INVENTORY_ITEM_ID NUMBER;
    CURSOR GET_PICKING_LINE_ID_CUR IS
      SELECT
        INTERFACE_LINE_ATTRIBUTE7
      FROM
        RA_CUSTOMER_TRX_LINES_ALL
      WHERE CUSTOMER_TRX_ID = CF_1FORMULA.CUSTOMER_TRX_ID
        AND CUSTOMER_TRX_LINE_ID = CF_1FORMULA.CUSTOMER_TRX_LINE_ID
        AND INTERFACE_LINE_ATTRIBUTE7 IS NOT NULL;
    CURSOR GET_ITEM_ID_CUR(V_PICKING_LINE_ID IN NUMBER) IS
      SELECT
        INVENTORY_ITEM_ID
      FROM
        SO_PICKING_LINES_ALL
      WHERE PICKING_LINE_ID = V_PICKING_LINE_ID;
    CURSOR FOLIO_NUM1(V_INVENTORY_ITEM_ID IN NUMBER) IS
      SELECT
        TO_CHAR(A.INVENTORY_ITEM_ID) || '/' || TO_CHAR(A.SLNO)
      FROM
        JAI_CMN_RG_23AC_II_TRXS A
      WHERE A.EXCISE_INVOICE_NO = EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = V_INVENTORY_ITEM_ID
        AND A.DR_BASIC_ED = CF_4;
    CURSOR FOLIO_NUM2(V_INVENTORY_ITEM_ID IN NUMBER) IS
      SELECT
        TO_CHAR(A.INVENTORY_ITEM_ID) || '/' || TO_CHAR(A.SLNO)
      FROM
        JAI_CMN_RG_PLA_TRXS A
      WHERE A.EXCISE_INVOICE_NO = EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = V_INVENTORY_ITEM_ID;
  BEGIN
    IF NVL(AUTO_INVOICE_FLAG
       ,'N') = 'Y' THEN
      OPEN GET_PICKING_LINE_ID_CUR;
      FETCH GET_PICKING_LINE_ID_CUR
       INTO V_PICKING_LINE_ID;
      CLOSE GET_PICKING_LINE_ID_CUR;
      OPEN GET_ITEM_ID_CUR(V_PICKING_LINE_ID);
      FETCH GET_ITEM_ID_CUR
       INTO V_INVENTORY_ITEM_ID;
      CLOSE GET_ITEM_ID_CUR;
    ELSE
      V_INVENTORY_ITEM_ID := INVENTORY_ITEM_ID;
    END IF;
    IF PAYMENT_REGISTER in ('RG23A','RG23C') THEN
      OPEN FOLIO_NUM1(V_INVENTORY_ITEM_ID);
      FETCH FOLIO_NUM1
       INTO V_FOLIO_NO;
      CLOSE FOLIO_NUM1;
    ELSIF PAYMENT_REGISTER in ('PLA') THEN
      OPEN FOLIO_NUM2(V_INVENTORY_ITEM_ID);
      FETCH FOLIO_NUM2
       INTO V_FOLIO_NO;
      CLOSE FOLIO_NUM2;
    END IF;
    RETURN V_FOLIO_NO;
  END CF_1FORMULA;

  FUNCTION CF_2FORMULA RETURN VARCHAR2 IS
  BEGIN
--    RETURN CHR(15);
    RETURN NULL;
  END CF_2FORMULA;

  FUNCTION CF_3FORMULA RETURN VARCHAR2 IS
  BEGIN
--    RETURN CHR(18);
    RETURN NULL;
  END CF_3FORMULA;

  FUNCTION CF_4FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_EXCISE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_4FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_EXCISE
      ORDER BY
        1;
    V_BASIC_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Excise') LOOP
      V_BASIC_AMOUNT := NVL(V_BASIC_AMOUNT
                           ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                           ,0);
    END LOOP;
    RETURN V_BASIC_AMOUNT;
  END CF_4FORMULA;

  FUNCTION CF_5FORMULA(EXCISE_INVOICE_NO IN VARCHAR2
                      ,INVENTORY_ITEM_ID IN NUMBER
                      ,PAYMENT_REGISTER IN VARCHAR2) RETURN NUMBER IS
    CURSOR EXCISE_AMOUNT1 IS
      SELECT
        DR_ADDITIONAL_ED
      FROM
        JAI_CMN_RG_23AC_II_TRXS A
      WHERE A.EXCISE_INVOICE_NO = CF_5FORMULA.EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = CF_5FORMULA.INVENTORY_ITEM_ID;
    CURSOR EXCISE_AMOUNT2 IS
      SELECT
        DR_ADDITIONAL_ED
      FROM
        JAI_CMN_RG_PLA_TRXS A
      WHERE A.EXCISE_INVOICE_NO = CF_5FORMULA.EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = CF_5FORMULA.INVENTORY_ITEM_ID;
    V_ADDITIONAL_ED NUMBER;
  BEGIN
    IF PAYMENT_REGISTER in ('RG23A','RG23C') THEN
      OPEN EXCISE_AMOUNT1;
      FETCH EXCISE_AMOUNT1
       INTO V_ADDITIONAL_ED;
      CLOSE EXCISE_AMOUNT1;
    ELSIF PAYMENT_REGISTER in ('PLA') THEN
      OPEN EXCISE_AMOUNT2;
      FETCH EXCISE_AMOUNT2
       INTO V_ADDITIONAL_ED;
      CLOSE EXCISE_AMOUNT2;
    END IF;
    RETURN NVL(V_ADDITIONAL_ED
              ,0);
  END CF_5FORMULA;

  FUNCTION CF_6FORMULA(EXCISE_INVOICE_NO IN VARCHAR2
                      ,INVENTORY_ITEM_ID IN NUMBER
                      ,PAYMENT_REGISTER IN VARCHAR2) RETURN NUMBER IS
    CURSOR EXCISE_AMOUNT1 IS
      SELECT
        DR_OTHER_ED
      FROM
        JAI_CMN_RG_23AC_II_TRXS A
      WHERE A.EXCISE_INVOICE_NO = CF_6FORMULA.EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = CF_6FORMULA.INVENTORY_ITEM_ID;
    CURSOR EXCISE_AMOUNT2 IS
      SELECT
        DR_OTHER_ED
      FROM
        JAI_CMN_RG_PLA_TRXS A
      WHERE A.EXCISE_INVOICE_NO = CF_6FORMULA.EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = CF_6FORMULA.INVENTORY_ITEM_ID;
    V_OTHER_ED NUMBER;
  BEGIN
    IF PAYMENT_REGISTER in ('RG23A','RG23C') THEN
      OPEN EXCISE_AMOUNT1;
      FETCH EXCISE_AMOUNT1
       INTO V_OTHER_ED;
      CLOSE EXCISE_AMOUNT1;
    ELSIF PAYMENT_REGISTER in ('PLA') THEN
      OPEN EXCISE_AMOUNT2;
      FETCH EXCISE_AMOUNT2
       INTO V_OTHER_ED;
      CLOSE EXCISE_AMOUNT2;
    END IF;
    RETURN NVL(V_OTHER_ED
              ,0);
  END CF_6FORMULA;

  FUNCTION CF_7FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_7FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_FREIGHT_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Freight') LOOP
      V_FREIGHT_AMOUNT := NVL(V_FREIGHT_AMOUNT
                             ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                             ,0);
    END LOOP;
    RETURN V_FREIGHT_AMOUNT;
  END CF_7FORMULA;

  FUNCTION CF_8FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_8FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_INSURANCE_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Insurance') LOOP
      V_INSURANCE_AMOUNT := NVL(V_INSURANCE_AMOUNT
                               ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                               ,0);
    END LOOP;
    RETURN V_INSURANCE_AMOUNT;
  END CF_8FORMULA;

  FUNCTION CF_9FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_9FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_CST_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('CST') LOOP
      V_CST_AMOUNT := NVL(V_CST_AMOUNT
                         ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                         ,0);
    END LOOP;
    RETURN V_CST_AMOUNT;
  END CF_9FORMULA;

  FUNCTION CF_10FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_10FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_CVD_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('CVD') LOOP
      V_CVD_AMOUNT := NVL(V_CVD_AMOUNT
                         ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                         ,0);
    END LOOP;
    RETURN V_CVD_AMOUNT;
  END CF_10FORMULA;

  FUNCTION CF_11FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_11FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_CUSTOM_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Customs') LOOP
      V_CUSTOM_AMOUNT := NVL(V_CUSTOM_AMOUNT
                            ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                            ,0);
    END LOOP;
    RETURN V_CUSTOM_AMOUNT;
  END CF_11FORMULA;

  FUNCTION CF_12FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_12FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_OCTRAI_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Octrai') LOOP
      V_OCTRAI_AMOUNT := NVL(V_OCTRAI_AMOUNT
                            ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                            ,0);
    END LOOP;
    RETURN V_OCTRAI_AMOUNT;
  END CF_12FORMULA;

  FUNCTION CF_13FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_13FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_OTHER_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Other') LOOP
      V_OTHER_AMOUNT := NVL(V_OTHER_AMOUNT
                           ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                           ,0);
    END LOOP;
    RETURN V_OTHER_AMOUNT;
  END CF_13FORMULA;

  FUNCTION CF_14FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_14FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_SALES_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Sales Tax') LOOP
      V_SALES_AMOUNT := NVL(V_SALES_AMOUNT
                           ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                           ,0);
    END LOOP;
    RETURN V_SALES_AMOUNT;
  END CF_14FORMULA;

  FUNCTION CF_15FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_15FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_SERVICE_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('Service') LOOP
      V_SERVICE_AMOUNT := NVL(V_SERVICE_AMOUNT
                             ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                             ,0);
    END LOOP;
    RETURN V_SERVICE_AMOUNT;
  END CF_15FORMULA;

  FUNCTION CF_16FORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR EXCISE_CAL_CUR(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.FUNC_TAX_AMOUNT FUNC_AMT,
        B.TAX_TYPE T_TYPE
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE LINK_TO_CUST_TRX_LINE_ID = CF_16FORMULA.CUSTOMER_TRX_LINE_ID
        AND A.TAX_ID = B.TAX_ID
        AND B.TAX_TYPE = CP_TAX_TYPE
      ORDER BY
        1;
    V_TDS_AMOUNT NUMBER := 0;
  BEGIN
    FOR excise_cal_rec IN EXCISE_CAL_CUR('TDS') LOOP
      V_TDS_AMOUNT := NVL(V_TDS_AMOUNT
                         ,0) + NVL(EXCISE_CAL_REC.FUNC_AMT
                         ,0);
    END LOOP;
    RETURN V_TDS_AMOUNT;
  END CF_16FORMULA;

  FUNCTION CF_17FORMULA(EXCISE_INVOICE_NO IN VARCHAR2
                       ,CF_4 IN NUMBER
                       ,CUSTOMER_TRX_ID IN NUMBER
                       ,CUSTOMER_TRX_LINE_ID IN NUMBER
                       ,AUTO_INVOICE_FLAG IN VARCHAR2
                       ,INVENTORY_ITEM_ID IN NUMBER
                       ,PAYMENT_REGISTER IN VARCHAR2) RETURN NUMBER IS
    V_SLNO VARCHAR2(100);
    V_PICKING_LINE_ID NUMBER;
    V_INVENTORY_ITEM_ID NUMBER;
    CURSOR SLNO1(V_INVENTORY_ITEM_ID IN NUMBER) IS
      SELECT
        A.SLNO
      FROM
        JAI_CMN_RG_23AC_II_TRXS A
      WHERE A.EXCISE_INVOICE_NO = CF_17FORMULA.EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = CF_17FORMULA.V_INVENTORY_ITEM_ID
        AND A.DR_BASIC_ED = CF_4;
    CURSOR SLNO2(V_INVENTORY_ITEM_ID IN NUMBER) IS
      SELECT
        A.SLNO
      FROM
        JAI_CMN_RG_PLA_TRXS A
      WHERE A.EXCISE_INVOICE_NO = CF_17FORMULA.EXCISE_INVOICE_NO
        AND A.INVENTORY_ITEM_ID = CF_17FORMULA.V_INVENTORY_ITEM_ID;
    CURSOR GET_PICKING_LINE_ID_CUR IS
      SELECT
        INTERFACE_LINE_ATTRIBUTE7
      FROM
        RA_CUSTOMER_TRX_LINES_ALL
      WHERE CUSTOMER_TRX_ID = CF_17FORMULA.CUSTOMER_TRX_ID
        AND CUSTOMER_TRX_LINE_ID = CF_17FORMULA.CUSTOMER_TRX_LINE_ID
        AND INTERFACE_LINE_ATTRIBUTE7 IS NOT NULL;
    CURSOR GET_ITEM_ID_CUR(V_PICKING_LINE_ID IN NUMBER) IS
      SELECT
        INVENTORY_ITEM_ID
      FROM
        SO_PICKING_LINES_ALL
      WHERE PICKING_LINE_ID = V_PICKING_LINE_ID;
  BEGIN
    IF NVL(AUTO_INVOICE_FLAG
       ,'N') = 'Y' THEN
      OPEN GET_PICKING_LINE_ID_CUR;
      FETCH GET_PICKING_LINE_ID_CUR
       INTO V_PICKING_LINE_ID;
      CLOSE GET_PICKING_LINE_ID_CUR;
      OPEN GET_ITEM_ID_CUR(V_PICKING_LINE_ID);
      FETCH GET_ITEM_ID_CUR
       INTO V_INVENTORY_ITEM_ID;
      CLOSE GET_ITEM_ID_CUR;
    ELSE
      V_INVENTORY_ITEM_ID := INVENTORY_ITEM_ID;
    END IF;
    IF PAYMENT_REGISTER in ('RG23A','RG23C') THEN
      OPEN SLNO1(V_INVENTORY_ITEM_ID);
      FETCH SLNO1
       INTO V_SLNO;
      CLOSE SLNO1;
    ELSIF PAYMENT_REGISTER in ('PLA') THEN
      OPEN SLNO2(V_INVENTORY_ITEM_ID);
      FETCH SLNO2
       INTO V_SLNO;
      CLOSE SLNO2;
    END IF;
    RETURN V_SLNO;
  END CF_17FORMULA;

  FUNCTION CF_18FORMULA(CUSTOMER_TRX_ID1 IN NUMBER) RETURN VARCHAR2 IS
    CURSOR TRANSACTION_CURR_CUR IS
      SELECT
        INVOICE_CURRENCY_CODE
      FROM
        RA_CUSTOMER_TRX_ALL
      WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID1;
    V_TRANS_CURR VARCHAR2(15);
  BEGIN
    OPEN TRANSACTION_CURR_CUR;
    FETCH TRANSACTION_CURR_CUR
     INTO V_TRANS_CURR;
    CLOSE TRANSACTION_CURR_CUR;
    RETURN V_TRANS_CURR;
  END CF_18FORMULA;

  FUNCTION CF_19FORMULA(CUSTOMER_TRX_ID1 IN NUMBER) RETURN VARCHAR2 IS
    CURSOR FUNC_CURR_CUR IS
      SELECT
        CURRENCY_CODE
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID in (
        SELECT
          SET_OF_BOOKS_ID
        FROM
          RA_CUSTOMER_TRX_ALL
        WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID1 );
    V_FUNC_CURR VARCHAR2(15);
  BEGIN
    OPEN FUNC_CURR_CUR;
    FETCH FUNC_CURR_CUR
     INTO V_FUNC_CURR;
    CLOSE FUNC_CURR_CUR;
    RETURN V_FUNC_CURR;
  END CF_19FORMULA;

  FUNCTION CF_20FORMULA(CUSTOMER_TRX_ID IN NUMBER
                       ,CUSTOMER_TRX_LINE_ID IN NUMBER
                       ,AUTO_INVOICE_FLAG IN VARCHAR2
                       ,UNIT_SELLING_PRICE IN NUMBER) RETURN NUMBER IS
    V_PICKING_LINE_ID NUMBER;
    V_SELLING_PRICE NUMBER;
    CURSOR GET_PICKING_LINE_ID_CUR IS
      SELECT
        INTERFACE_LINE_ATTRIBUTE7
      FROM
        RA_CUSTOMER_TRX_LINES_ALL
      WHERE CUSTOMER_TRX_ID = CF_20FORMULA.CUSTOMER_TRX_ID
        AND CUSTOMER_TRX_LINE_ID = CF_20FORMULA.CUSTOMER_TRX_LINE_ID
        AND INTERFACE_LINE_ATTRIBUTE7 IS NOT NULL;
    CURSOR GET_SELLING_PRICE_CUR(V_PICKING_LINE_ID IN NUMBER) IS
      SELECT
        SELLING_PRICE
      FROM
        JAI_OM_WSH_LINES_ALL
      WHERE PICKING_LINE_ID = V_PICKING_LINE_ID;
  BEGIN
    IF NVL(AUTO_INVOICE_FLAG
       ,'N') = 'Y' THEN
      OPEN GET_PICKING_LINE_ID_CUR;
      FETCH GET_PICKING_LINE_ID_CUR
       INTO V_PICKING_LINE_ID;
      CLOSE GET_PICKING_LINE_ID_CUR;
      OPEN GET_SELLING_PRICE_CUR(V_PICKING_LINE_ID);
      FETCH GET_SELLING_PRICE_CUR
       INTO V_SELLING_PRICE;
      CLOSE GET_SELLING_PRICE_CUR;
    ELSE
      V_SELLING_PRICE := UNIT_SELLING_PRICE;
    END IF;
    RETURN V_SELLING_PRICE;
  END CF_20FORMULA;

  FUNCTION CF_21FORMULA(AUTO_INVOICE_FLAG IN VARCHAR2
                       ,QUANTITY IN NUMBER
                       ,CF_20 IN NUMBER
                       ,LINE_AMOUNT IN NUMBER) RETURN NUMBER IS
    V_LINE_AMOUNT NUMBER;
  BEGIN
    IF NVL(AUTO_INVOICE_FLAG
       ,'N') = 'Y' THEN
      V_LINE_AMOUNT := NVL(QUANTITY
                          ,0) * CF_20;
    ELSE
      V_LINE_AMOUNT := LINE_AMOUNT;
    END IF;
    RETURN V_LINE_AMOUNT;
  END CF_21FORMULA;

  FUNCTION CF_22FORMULA(CUSTOMER_TRX_ID1 IN NUMBER
                       ,CF_20 IN NUMBER) RETURN NUMBER IS
    CURSOR TRANSACTION_CURR_CUR IS
      SELECT
        SET_OF_BOOKS_ID,
        INVOICE_CURRENCY_CODE,
        EXCHANGE_RATE_TYPE,
        NVL(EXCHANGE_DATE
           ,TRX_DATE) EXCHANGE_DATE,
        EXCHANGE_RATE
      FROM
        RA_CUSTOMER_TRX_ALL
      WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID1;
    V_BOOKS_ID NUMBER := 1;
    C_FROM_CURRENCY_CODE VARCHAR2(15);
    C_CONVERSION_TYPE VARCHAR2(30);
    C_CONVERSION_DATE DATE;
    C_CONVERSION_RATE NUMBER := 0;
    V_CONVERTED_RATE NUMBER := 1;
    V_UNIT_PRICE VARCHAR2(15);
  BEGIN
    OPEN TRANSACTION_CURR_CUR;
    FETCH TRANSACTION_CURR_CUR
     INTO V_BOOKS_ID,C_FROM_CURRENCY_CODE,C_CONVERSION_TYPE,C_CONVERSION_DATE,C_CONVERSION_RATE;
    CLOSE TRANSACTION_CURR_CUR;
    V_CONVERTED_RATE := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_BOOKS_ID
                                                             ,C_FROM_CURRENCY_CODE
                                                             ,C_CONVERSION_DATE
                                                             ,C_CONVERSION_TYPE
                                                             ,C_CONVERSION_RATE);
    V_UNIT_PRICE := V_CONVERTED_RATE * CF_20;
    RETURN V_UNIT_PRICE;
  END CF_22FORMULA;

  FUNCTION CF_23FORMULA(CUSTOMER_TRX_ID1 IN NUMBER
                       ,CF_21 IN NUMBER) RETURN NUMBER IS
    CURSOR TRANSACTION_CURR_CUR IS
      SELECT
        SET_OF_BOOKS_ID,
        INVOICE_CURRENCY_CODE,
        EXCHANGE_RATE_TYPE,
        NVL(EXCHANGE_DATE
           ,TRX_DATE) EXCHANGE_DATE,
        EXCHANGE_RATE
      FROM
        RA_CUSTOMER_TRX_ALL
      WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID1;
    V_BOOKS_ID NUMBER := 1;
    C_FROM_CURRENCY_CODE VARCHAR2(15);
    C_CONVERSION_TYPE VARCHAR2(30);
    C_CONVERSION_DATE DATE;
    C_CONVERSION_RATE NUMBER := 0;
    V_CONVERTED_RATE NUMBER := 1;
    V_LINE_AMOUNT VARCHAR2(15);
  BEGIN
    OPEN TRANSACTION_CURR_CUR;
    FETCH TRANSACTION_CURR_CUR
     INTO V_BOOKS_ID,C_FROM_CURRENCY_CODE,C_CONVERSION_TYPE,C_CONVERSION_DATE,C_CONVERSION_RATE;
    CLOSE TRANSACTION_CURR_CUR;
    V_CONVERTED_RATE := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_BOOKS_ID
                                                             ,C_FROM_CURRENCY_CODE
                                                             ,C_CONVERSION_DATE
                                                             ,C_CONVERSION_TYPE
                                                             ,C_CONVERSION_RATE);
    V_LINE_AMOUNT := V_CONVERTED_RATE * CF_21;
    RETURN V_LINE_AMOUNT;
  END CF_23FORMULA;

  FUNCTION CONV_ASSESSABLEFORMULA(CUSTOMER_TRX_ID IN NUMBER
                                 ,CUSTOMER_TRX_LINE_ID IN NUMBER
                                 ,CUSTOMER_TRX_ID1 IN NUMBER
                                 ,AUTO_INVOICE_FLAG IN VARCHAR2
                                 ,ASSESSABLE_VALUE IN NUMBER) RETURN NUMBER IS
    V_PICKING_LINE_ID NUMBER;
    V_ASSESSABLE_VALUE NUMBER;
    V_BOOKS_ID NUMBER := 1;
    C_FROM_CURRENCY_CODE VARCHAR2(15);
    C_CONVERSION_TYPE VARCHAR2(30);
    C_CONVERSION_DATE DATE;
    C_CONVERSION_RATE NUMBER := 0;
    V_CONVERTED_RATE NUMBER := 1;
    CURSOR GET_PICKING_LINE_ID_CUR IS
      SELECT
        INTERFACE_LINE_ATTRIBUTE7
      FROM
        RA_CUSTOMER_TRX_LINES_ALL
      WHERE CUSTOMER_TRX_ID = CONV_ASSESSABLEFORMULA.CUSTOMER_TRX_ID
        AND CUSTOMER_TRX_LINE_ID = CONV_ASSESSABLEFORMULA.CUSTOMER_TRX_LINE_ID
        AND INTERFACE_LINE_ATTRIBUTE7 IS NOT NULL;
    CURSOR GET_ASSESSABLE_VALUE_CUR(V_PICKING_LINE_ID IN NUMBER) IS
      SELECT
        ASSESSABLE_VALUE
      FROM
        JAI_OM_WSH_LINES_ALL
      WHERE PICKING_LINE_ID = V_PICKING_LINE_ID;
    CURSOR TRANSACTION_CURR_CUR IS
      SELECT
        SET_OF_BOOKS_ID,
        INVOICE_CURRENCY_CODE,
        EXCHANGE_RATE_TYPE,
        NVL(EXCHANGE_DATE
           ,TRX_DATE) EXCHANGE_DATE,
        EXCHANGE_RATE
      FROM
        RA_CUSTOMER_TRX_ALL
      WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID1;
  BEGIN
    IF NVL(AUTO_INVOICE_FLAG
       ,'N') = 'Y' THEN
      OPEN GET_PICKING_LINE_ID_CUR;
      FETCH GET_PICKING_LINE_ID_CUR
       INTO V_PICKING_LINE_ID;
      CLOSE GET_PICKING_LINE_ID_CUR;
      OPEN GET_ASSESSABLE_VALUE_CUR(V_PICKING_LINE_ID);
      FETCH GET_ASSESSABLE_VALUE_CUR
       INTO V_ASSESSABLE_VALUE;
      CLOSE GET_ASSESSABLE_VALUE_CUR;
    ELSE
      V_ASSESSABLE_VALUE := ASSESSABLE_VALUE;
    END IF;
    OPEN TRANSACTION_CURR_CUR;
    FETCH TRANSACTION_CURR_CUR
     INTO V_BOOKS_ID,C_FROM_CURRENCY_CODE,C_CONVERSION_TYPE,C_CONVERSION_DATE,C_CONVERSION_RATE;
    CLOSE TRANSACTION_CURR_CUR;
    V_CONVERTED_RATE := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_BOOKS_ID
                                                             ,C_FROM_CURRENCY_CODE
                                                             ,C_CONVERSION_DATE
                                                             ,C_CONVERSION_TYPE
                                                             ,C_CONVERSION_RATE);
    V_ASSESSABLE_VALUE := NVL(V_ASSESSABLE_VALUE
                             ,0) * V_CONVERTED_RATE;
    RETURN V_ASSESSABLE_VALUE;
  END CONV_ASSESSABLEFORMULA;

  FUNCTION TOT_ASSESSABLE_VALUEFORMULA(CONV_ASSESSABLE IN NUMBER
                                      ,QUANTITY IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CONV_ASSESSABLE * NVL(QUANTITY
              ,1));
  END TOT_ASSESSABLE_VALUEFORMULA;

  FUNCTION BASIC_RATEFORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR GET_TAX_RATE(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        TAX_RATE
      FROM
        JAI_AR_TRX_TAX_LINES
      WHERE LINK_TO_CUST_TRX_LINE_ID = BASIC_RATEFORMULA.CUSTOMER_TRX_LINE_ID
        AND TAX_ID IN (
        SELECT
          TAX_ID
        FROM
          JAI_CMN_TAXES_ALL
        WHERE TAX_TYPE LIKE CP_TAX_TYPE );
    V_TOT_TAX NUMBER := 0;
    V_AVG_DUTY NUMBER := 0;
    V_TAX_COUNT NUMBER := 0;
  BEGIN
    FOR each_record IN GET_TAX_RATE('Excise') LOOP
      IF EACH_RECORD.TAX_RATE IS NOT NULL THEN
        V_TOT_TAX := V_TOT_TAX + EACH_RECORD.TAX_RATE;
        V_TAX_COUNT := V_TAX_COUNT + 1;
      END IF;
    END LOOP;
    IF V_TAX_COUNT = 0 THEN
      V_TAX_COUNT := 1;
    END IF;
    V_AVG_DUTY := V_TOT_TAX / V_TAX_COUNT;
    RETURN V_AVG_DUTY;
  END BASIC_RATEFORMULA;

  FUNCTION SPECIAL_RATEFORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR GET_TAX_RATE(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        TAX_RATE
      FROM
        JAI_AR_TRX_TAX_LINES
      WHERE LINK_TO_CUST_TRX_LINE_ID = SPECIAL_RATEFORMULA.CUSTOMER_TRX_LINE_ID
        AND TAX_ID IN (
        SELECT
          TAX_ID
        FROM
          JAI_CMN_TAXES_ALL
        WHERE TAX_TYPE LIKE CP_TAX_TYPE );
    V_TOT_TAX NUMBER := 0;
    V_AVG_DUTY NUMBER := 0;
    V_TAX_COUNT NUMBER := 0;
  BEGIN
    FOR each_record IN GET_TAX_RATE('Other Excise') LOOP
      IF EACH_RECORD.TAX_RATE IS NOT NULL THEN
        V_TOT_TAX := V_TOT_TAX + EACH_RECORD.TAX_RATE;
        V_TAX_COUNT := V_TAX_COUNT + 1;
      END IF;
    END LOOP;
    IF V_TAX_COUNT = 0 THEN
      V_TAX_COUNT := 1;
    END IF;
    V_AVG_DUTY := V_TOT_TAX / V_TAX_COUNT;
    RETURN V_AVG_DUTY;
  END SPECIAL_RATEFORMULA;

  FUNCTION ADDL_RATEFORMULA(CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR GET_TAX_RATE(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        TAX_RATE
      FROM
        JAI_AR_TRX_TAX_LINES
      WHERE LINK_TO_CUST_TRX_LINE_ID = ADDL_RATEFORMULA.CUSTOMER_TRX_LINE_ID
        AND TAX_ID IN (
        SELECT
          TAX_ID
        FROM
          JAI_CMN_TAXES_ALL
        WHERE TAX_TYPE LIKE CP_TAX_TYPE );
    V_TOT_TAX NUMBER := 0;
    V_AVG_DUTY NUMBER := 0;
    V_TAX_COUNT NUMBER := 0;
  BEGIN
    FOR each_record IN GET_TAX_RATE('Addl. Excise') LOOP
      IF EACH_RECORD.TAX_RATE IS NOT NULL THEN
        V_TOT_TAX := V_TOT_TAX + EACH_RECORD.TAX_RATE;
        V_TAX_COUNT := V_TAX_COUNT + 1;
      END IF;
    END LOOP;
    IF V_TAX_COUNT = 0 THEN
      V_TAX_COUNT := 1;
    END IF;
    V_AVG_DUTY := V_TOT_TAX / V_TAX_COUNT;
    RETURN V_AVG_DUTY;
  END ADDL_RATEFORMULA;

  FUNCTION ITEM_CODEFORMULA(ITEM_CODE_ID IN NUMBER
                           ,ORGANIZATION_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR GET_ITEM_CODE IS
      SELECT
        SEGMENT1
      FROM
        MTL_SYSTEM_ITEMS
      WHERE INVENTORY_ITEM_ID = ITEM_CODEFORMULA.ITEM_CODE_ID
        AND ORGANIZATION_ID = ITEM_CODEFORMULA.ORGANIZATION_ID;
    V_ITEM_CODE VARCHAR2(120);
  BEGIN
    OPEN GET_ITEM_CODE;
    FETCH GET_ITEM_CODE
     INTO V_ITEM_CODE;
    CLOSE GET_ITEM_CODE;
    RETURN V_ITEM_CODE;
  END ITEM_CODEFORMULA;

  FUNCTION ITEM_CODE_IDFORMULA(CUSTOMER_TRX_ID IN NUMBER
                              ,CUSTOMER_TRX_LINE_ID IN NUMBER
                              ,AUTO_INVOICE_FLAG IN VARCHAR2
                              ,INVENTORY_ITEM_ID IN NUMBER) RETURN NUMBER IS
    V_PICKING_LINE_ID NUMBER;
    V_ITEM_CODE_ID NUMBER;
    CURSOR GET_PICKING_LINE_ID_CUR IS
      SELECT
        INTERFACE_LINE_ATTRIBUTE7
      FROM
        RA_CUSTOMER_TRX_LINES_ALL
      WHERE CUSTOMER_TRX_ID = ITEM_CODE_IDFORMULA.CUSTOMER_TRX_ID
        AND CUSTOMER_TRX_LINE_ID = ITEM_CODE_IDFORMULA.CUSTOMER_TRX_LINE_ID
        AND INTERFACE_LINE_ATTRIBUTE7 IS NOT NULL;
    CURSOR GET_INVENTORY_ITEM_ID(V_PICKING_LINE_ID IN NUMBER) IS
      SELECT
        INVENTORY_ITEM_ID
      FROM
        JAI_OM_WSH_LINES_ALL
      WHERE PICKING_LINE_ID = V_PICKING_LINE_ID;
  BEGIN
    IF NVL(AUTO_INVOICE_FLAG
       ,'N') = 'Y' THEN
      OPEN GET_PICKING_LINE_ID_CUR;
      FETCH GET_PICKING_LINE_ID_CUR
       INTO V_PICKING_LINE_ID;
      CLOSE GET_PICKING_LINE_ID_CUR;
      OPEN GET_INVENTORY_ITEM_ID(V_PICKING_LINE_ID);
      FETCH GET_INVENTORY_ITEM_ID
       INTO V_ITEM_CODE_ID;
      CLOSE GET_INVENTORY_ITEM_ID;
    ELSE
      V_ITEM_CODE_ID := INVENTORY_ITEM_ID;
    END IF;
    RETURN V_ITEM_CODE_ID;
  END ITEM_CODE_IDFORMULA;

  FUNCTION CF_24FORMULA(ORGANIZATION_ID IN NUMBER
                       ,LOCATION_ID IN NUMBER
                       ,CUSTOMER_TRX_LINE_ID IN NUMBER
                       ,INVENTORY_ITEM_ID IN NUMBER
                       ,EXCISE_EXEMPT_TYPE IN VARCHAR2
                       ,QUANTITY IN NUMBER
                       ,UNIT_SELLING_PRICE IN NUMBER) RETURN NUMBER IS
    CURSOR FOR_MODVAT_PERCENTAGE IS
      SELECT
        MODVAT_REVERSE_PERCENT
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = CF_24FORMULA.ORGANIZATION_ID
        AND NVL(LOCATION_ID
         ,0) = NVL(LOCATION_ID
         ,0);
    CURSOR FOR_MODVAT_TAX_RATE(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        A.TAX_RATE,
        B.ROUNDING_FACTOR
      FROM
        JAI_AR_TRX_TAX_LINES A,
        JAI_CMN_TAXES_ALL B
      WHERE A.TAX_ID = B.TAX_ID
        AND A.LINK_TO_CUST_TRX_LINE_ID = CF_24FORMULA.CUSTOMER_TRX_LINE_ID
        AND B.TAX_TYPE = CP_TAX_TYPE;
    CURSOR ITEM_CLASS_CUR IS
      SELECT
        ITEM_CLASS
      FROM
        JAI_INV_ITM_SETUPS
      WHERE INVENTORY_ITEM_ID = CF_24FORMULA.INVENTORY_ITEM_ID
        AND ORGANIZATION_ID = CF_24FORMULA.ORGANIZATION_ID;
    V_TAX_RATE NUMBER;
    V_ROUNDING_FACTOR NUMBER;
    V_ITEM_CLASS VARCHAR2(10);
    V_BASIC_ED NUMBER;
  BEGIN
    OPEN ITEM_CLASS_CUR;
    FETCH ITEM_CLASS_CUR
     INTO V_ITEM_CLASS;
    CLOSE ITEM_CLASS_CUR;
    IF NVL(EXCISE_EXEMPT_TYPE
       ,'@@@') in ('CT2','EXCISE_EXEMPT_CERT') AND V_ITEM_CLASS not in ('OTIN','OTEX') THEN
      OPEN FOR_MODVAT_PERCENTAGE;
      FETCH FOR_MODVAT_PERCENTAGE
       INTO V_TAX_RATE;
      CLOSE FOR_MODVAT_PERCENTAGE;
      V_BASIC_ED := ROUND((QUANTITY * UNIT_SELLING_PRICE * V_TAX_RATE) / 100);
    ELSIF NVL(EXCISE_EXEMPT_TYPE
       ,'@@@') in ('CT2_OTH','EXCISE_EXEMPT_CERT_OTH') AND V_ITEM_CLASS not in ('OTIN','OTEX') THEN
      OPEN FOR_MODVAT_TAX_RATE('Modvat Recovery');
      FETCH FOR_MODVAT_TAX_RATE
       INTO V_TAX_RATE,V_ROUNDING_FACTOR;
      CLOSE FOR_MODVAT_TAX_RATE;
      V_BASIC_ED := (QUANTITY * UNIT_SELLING_PRICE * V_TAX_RATE) / 100;
      IF V_ROUNDING_FACTOR IS NOT NULL THEN
        V_BASIC_ED := ROUND(V_BASIC_ED
                           ,V_ROUNDING_FACTOR);
      ELSE
        V_BASIC_ED := ROUND(V_BASIC_ED);
      END IF;
    END IF;
    RETURN (NVL(V_BASIC_ED
              ,0));
  END CF_24FORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 25/07/2005')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

FUNCTION F_10FORMATTRIGGER(CUSTOMER_TRX_ID1 IN NUMBER) RETURN NUMBER IS

LV_CT2                  JAI_AR_TRX_LINES.EXCISE_EXEMPT_TYPE%TYPE ;--'CT2';
LV_EXCISE_EXEMPT_CERT   JAI_AR_TRX_LINES.EXCISE_EXEMPT_TYPE%TYPE ;--'EXCISE_EXEMPT_CERT';
LV_CRT2_OTH             JAI_AR_TRX_LINES.EXCISE_EXEMPT_TYPE%TYPE ;--'CT2_OTH';
LV_EXCISE_EXEMPT_OTH    JAI_AR_TRX_LINES.EXCISE_EXEMPT_TYPE%TYPE ;--'EXCISE_EXEMPT_CERT_OTH' ;

CURSOR C1 IS
SELECT COUNT(*)
FROM JAI_AR_TRX_LINES
WHERE CUSTOMER_TRX_ID = CUSTOMER_TRX_ID1
AND EXCISE_EXEMPT_TYPE IN (LV_CT2, LV_EXCISE_EXEMPT_CERT, LV_CRT2_OTH, LV_EXCISE_EXEMPT_OTH) ;
--AND EXCISE_EXEMPT_TYPE IN ('CT2', 'EXCISE_EXEMPT_CERT','CT2_OTH', 'EXCISE_EXEMPT_CERT_OTH');
V_COUNT NUMBER;
BEGIN

LV_CT2                  := 'CT2';
LV_EXCISE_EXEMPT_CERT   := 'EXCISE_EXEMPT_CERT';
LV_CRT2_OTH             := 'CT2_OTH';
LV_EXCISE_EXEMPT_OTH    := 'EXCISE_EXEMPT_CERT_OTH' ;

  OPEN C1;
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  RETURN (V_COUNT);
END;
END JA_JAINVAR_XMLP_PKG;



/
