--------------------------------------------------------
--  DDL for Package Body INV_INVARCLI_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVARCLI_XMLP_PKG" AS
/* $Header: INVARCLIB.pls 120.2 2008/01/08 06:16:10 dwkrishn noship $ */
  FUNCTION C_FORMATTEDCURRENCYCODEFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      TEMP_C VARCHAR2(20);
    BEGIN
      TEMP_C := '(' || CURRENCY_CODE || ')';
      RETURN (TEMP_C);
    END;
    RETURN NULL;
  END C_FORMATTEDCURRENCYCODEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
        LP_FROMDATE :=P_FROMDATE ;
        LP_TODATE:= P_TODATE;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Init')*/NULL;
    END;
    DECLARE
      P_ORG_ID_CHAR VARCHAR2(100) := TO_CHAR(P_ORG_ID);
    BEGIN
      /*SRW.USER_EXIT('FND PUTPROFILE NAME="' || 'MFG_ORGANIZATION_ID' || '" FIELD="' || P_ORG_ID_CHAR || '"')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(020
                   ,'Failed in before report trigger, setting org profile ')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: LocatorFlex')*/NULL;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: ItemFlex')*/NULL;
    END;
    DECLARE
      M_RETURN_STATUS VARCHAR2(1);
      M_MSG_COUNT NUMBER;
      M_MSG_DATA VARCHAR2(2000);
    BEGIN
      IF (WMS_INSTALL.CHECK_INSTALL(X_RETURN_STATUS => M_RETURN_STATUS
                               ,X_MSG_COUNT => M_MSG_COUNT
                               ,X_MSG_DATA => M_MSG_DATA
                               ,P_ORGANIZATION_ID => P_ORG_ID)) THEN
        P_WMS_INSTALLED := 'TRUE';
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION F_RECOUNTONLYFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF P_RECOUNTONLY = 1 THEN
        RETURN ('Recounts Only');
      ELSE
        RETURN ('');
      END IF;
    END;
    RETURN NULL;
  END F_RECOUNTONLYFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_SYSQTYFORMULA(SERIAL_NUMBER_CONTROL_CODE IN NUMBER
                           ,SERIAL_COUNT_OPTION IN NUMBER
                           ,INVENTORY_ITEM_ID_v IN NUMBER
                           ,SUBINVENTORY IN VARCHAR2
                           ,LOTNUMBER IN VARCHAR2
                           ,REVISION IN VARCHAR2
                           ,LOCATOR IN NUMBER
                           ,PARENT_LPN_ID IN NUMBER
                           ,SERIAL_NUMBER IN VARCHAR2) RETURN NUMBER IS
    V_PRIMARY_SYS_QTY NUMBER := 0;
  BEGIN
    IF (SERIAL_NUMBER_CONTROL_CODE in (1,6) OR SERIAL_COUNT_OPTION = 1) THEN
      SELECT
        NVL(SUM(PRIMARY_TRANSACTION_QUANTITY)
           ,0)
      INTO V_PRIMARY_SYS_QTY
      FROM
        MTL_ONHAND_QUANTITIES_DETAIL
      WHERE INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_V
        AND ORGANIZATION_ID = P_ORG_ID
        AND SUBINVENTORY_CODE = SUBINVENTORY
        AND NVL(LOT_NUMBER
         ,'XX') = NVL(LOTNUMBER
         ,'XX')
        AND NVL(REVISION
         ,'XXX') = NVL(REVISION
         ,'XXX')
        AND NVL(LOCATOR_ID
         ,-2) = NVL(LOCATOR
         ,-2)
        AND NVL(LPN_ID
         ,-3) = NVL(PARENT_LPN_ID
         ,-3);
    ELSIF (SERIAL_NUMBER_CONTROL_CODE in (2,5) AND SERIAL_COUNT_OPTION > 1) THEN
      SELECT
        NVL(SUM(DECODE(MSN.CURRENT_STATUS
                      ,3
                      ,1
                      ,0))
           ,0)
      INTO V_PRIMARY_SYS_QTY
      FROM
        MTL_SERIAL_NUMBERS MSN
      WHERE MSN.SERIAL_NUMBER = NVL(SERIAL_NUMBER
         ,SERIAL_NUMBER)
        AND MSN.INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_V
        AND MSN.CURRENT_ORGANIZATION_ID = P_ORG_ID
        AND MSN.CURRENT_SUBINVENTORY_CODE = SUBINVENTORY
        AND NVL(MSN.LOT_NUMBER
         ,'XX') = NVL(LOTNUMBER
         ,'XX')
        AND NVL(MSN.REVISION
         ,'XXX') = NVL(REVISION
         ,'XXX')
        AND NVL(MSN.CURRENT_LOCATOR_ID
         ,-2) = NVL(LOCATOR
         ,-2)
        AND NVL(LPN_ID
         ,-3) = NVL(PARENT_LPN_ID
         ,-3);
    END IF;
    RETURN NVL(V_PRIMARY_SYS_QTY
              ,0);
  END CF_SYSQTYFORMULA;

  FUNCTION CF_ISSERIALPRESENTFORMULA(SL_SERIAL_NUMBER IN VARCHAR2
                                    ,INVENTORY_ITEM_ID_V IN NUMBER
                                    ,SUBINVENTORY IN VARCHAR2
                                    ,LOTNUMBER IN VARCHAR2
                                    ,REVISION IN VARCHAR2
                                    ,LOCATOR IN NUMBER) RETURN VARCHAR2 IS
    V_ISSERIALPRESENT VARCHAR2(1);
  BEGIN
    SELECT
      DECODE(MSN.CURRENT_STATUS
            ,3
            ,'Y'
            ,'N')
    INTO V_ISSERIALPRESENT
    FROM
      MTL_SERIAL_NUMBERS MSN
    WHERE MSN.SERIAL_NUMBER = SL_SERIAL_NUMBER
      AND MSN.INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_V
      AND MSN.CURRENT_ORGANIZATION_ID = P_ORG_ID
      AND ( MSN.CURRENT_STATUS = 6
    OR ( MSN.CURRENT_SUBINVENTORY_CODE = SUBINVENTORY
      AND NVL(MSN.LOT_NUMBER
       ,'XX') = NVL(LOTNUMBER
       ,'XX')
      AND NVL(MSN.REVISION
       ,'XXX') = NVL(REVISION
       ,'XXX')
      AND NVL(MSN.CURRENT_LOCATOR_ID
       ,-2) = NVL(LOCATOR
       ,-2) ) );
    RETURN V_ISSERIALPRESENT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('N');
  END CF_ISSERIALPRESENTFORMULA;

  FUNCTION CF_COST_GROUPFORMULA(COST_GROUP_ID IN NUMBER) RETURN CHAR IS
    M_COST_GROUP VARCHAR2(10) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (COST_GROUP_ID IS NOT NULL)) THEN
      BEGIN
        SELECT
          COST_GROUP
        INTO M_COST_GROUP
        FROM
          CST_COST_GROUPS
        WHERE COST_GROUP_ID = COST_GROUP_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          M_COST_GROUP := NULL;
      END;
    END IF;
    RETURN (M_COST_GROUP);
  END CF_COST_GROUPFORMULA;

  FUNCTION CF_OUTERMOST_LPNFORMULA(CONTAINER_ENABLED_FLAG IN NUMBER
                                  ,OUTERMOST_LPN_ID IN NUMBER) RETURN CHAR IS
    M_OUTERMOST_LPN VARCHAR2(30) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (NVL(CONTAINER_ENABLED_FLAG
       ,-99) > 0)) THEN
      IF (OUTERMOST_LPN_ID IS NOT NULL) THEN
        SELECT
          LICENSE_PLATE_NUMBER
        INTO M_OUTERMOST_LPN
        FROM
          WMS_LICENSE_PLATE_NUMBERS
        WHERE LPN_ID = OUTERMOST_LPN_ID;
        IF SQL%NOTFOUND THEN
          M_OUTERMOST_LPN := 'ERROR';
        END IF;
      END IF;
    END IF;
    RETURN (M_OUTERMOST_LPN);
  END CF_OUTERMOST_LPNFORMULA;

  FUNCTION CF_PARENT_LPNFORMULA(CONTAINER_ENABLED_FLAG IN NUMBER
                               ,PARENT_LPN_ID IN NUMBER) RETURN CHAR IS
    M_PARENT_LPN VARCHAR2(30) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (NVL(CONTAINER_ENABLED_FLAG
       ,-99) > 0)) THEN
      IF (PARENT_LPN_ID IS NOT NULL) THEN
        SELECT
          LICENSE_PLATE_NUMBER
        INTO M_PARENT_LPN
        FROM
          WMS_LICENSE_PLATE_NUMBERS
        WHERE LPN_ID = PARENT_LPN_ID;
        IF SQL%NOTFOUND THEN
          M_PARENT_LPN := 'ERROR';
        END IF;
      END IF;
    END IF;
    RETURN (M_PARENT_LPN);
  END CF_PARENT_LPNFORMULA;

END INV_INVARCLI_XMLP_PKG;


/
