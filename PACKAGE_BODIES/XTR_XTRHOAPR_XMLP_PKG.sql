--------------------------------------------------------
--  DDL for Package Body XTR_XTRHOAPR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRHOAPR_XMLP_PKG" AS
/* $Header: XTRHOAPRB.pls 120.1 2007/12/31 07:18:29 npannamp noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    P_AR_FROM VARCHAR2(100);
    P_AP_FROM VARCHAR2(100);
    P_AR_WHERE VARCHAR2(10000);
    P_AP_WHERE VARCHAR2(10000);
    V_DATE_FROM VARCHAR2(80);
    V_DATE_TO VARCHAR2(80);
    CURSOR GET_SOURCE_NAME(P_SOURCE IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_HEDGE_SOURCES'
        AND LOOKUP_CODE = P_SOURCE;
    CURSOR GET_MISC(P_MISC IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_HEDGE_MISC'
        AND LOOKUP_CODE = P_MISC;
    CURSOR GET_YES_NO(P_YES_NO IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_YES_NO;
    CURSOR GET_COMPANY_NAME(P_COMPANY_CODE IN VARCHAR2) IS
      SELECT
        FULL_NAME
      FROM
        XTR_PARTY_INFO_V
      WHERE PARTY_CODE = P_COMPANY_CODE;
    CURSOR GET_FACTOR(P_FACTOR IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_NUM_FACTOR'
        AND LOOKUP_CODE = P_FACTOR;
    CURSOR GET_REPORT_NAME(P_CONC_REQUEST_ID IN VARCHAR2) IS
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
  BEGIN
  P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
  P_CRITERIA_SET_V := P_CRITERIA_SET;
    IF (P_SEARCH_BY <> 'ADVANCED') THEN
      P_CRITERIA_SET_V := NULL;
    END IF;
    V_DATE_FROM := TO_CHAR(P_DATE_FROM
                          ,'RRRR/MM/DD');
    V_DATE_TO := TO_CHAR(P_DATE_TO
                        ,'RRRR/MM/DD');
--added as fix
   P_DATE_FROM_v := P_DATE_FROM;
   P_DATE_TO_v := P_DATE_TO;
    XTR_HEDGE_PROCESS_P.GET_HOAPR_REPORT_PARAMETERS(P_CRITERIA_SET_V
                                                   ,P_CRITERIA_SET_OWNER
                                                   ,P_SOURCE
                                                   ,P_CURRENCY
                                                   ,P_COMPANY_CODE
                                                   ,P_SOB_CURRENCY
                                                   ,P_DISCOUNT_METHOD
                                                   ,P_FACTOR
                                                   ,V_DATE_FROM
                                                   ,V_DATE_TO
                                                   ,P_UNAPLD_RECEIPTS
                                                   ,P_UNAPLD_PREPAYMENTS
                                                   ,AR_FROM_CLAUSE
                                                   ,AP_FROM_CLAUSE
                                                   ,AR_WHERE_CLAUSE
                                                   ,AP_WHERE_CLAUSE);
    IF (P_DUMMY1 <> 'D') THEN
      DSP_CRITERIA_SET := P_CRITERIA_SET_V;
    END IF;
  /*  P_DATE_FROM := TO_DATE(V_DATE_FROM
                          ,'RRRR/MM/DD');
    P_DATE_TO := TO_DATE(V_DATE_TO
                        ,'RRRR/MM/DD');*/
    P_DATE_FROM_V := TO_DATE(V_DATE_FROM
                              ,'RRRR/MM/DD');
        P_DATE_TO_V := TO_DATE(V_DATE_TO
                        ,'RRRR/MM/DD');
    OPEN GET_SOURCE_NAME('AR');
    FETCH GET_SOURCE_NAME
     INTO AR_SOURCE_NAME;
    CLOSE GET_SOURCE_NAME;
    OPEN GET_SOURCE_NAME('AP');
    FETCH GET_SOURCE_NAME
     INTO AP_SOURCE_NAME;
    CLOSE GET_SOURCE_NAME;
    IF (P_DISCOUNT_METHOD = 'MAX') THEN
      AP_ORDER_CLAUSE := 'MAX_DISCOUNTED_DATE ';
    ELSIF (P_DISCOUNT_METHOD = 'MIN') THEN
      AP_ORDER_CLAUSE := 'MIN_DISCOUNTED_DATE ';
    ELSE
      AP_ORDER_CLAUSE := 'MIN_DUE_DATE ';
    END IF;
    IF P_FACTOR = '0' THEN
      P_UNIT := 1;
    ELSE
      P_UNIT := TO_NUMBER(P_FACTOR);
    END IF;
    P_REF_DATE := TRUNC(SYSDATE);
    OPEN GET_COMPANY_NAME(P_COMPANY_CODE);
    FETCH GET_COMPANY_NAME
     INTO DSP_COMPANY_NAME;
    CLOSE GET_COMPANY_NAME;
    OPEN GET_MISC(P_DISCOUNT_METHOD);
    FETCH GET_MISC
     INTO DSP_DISCOUNT_METHOD;
    CLOSE GET_MISC;
    OPEN GET_MISC(P_SEARCH_BY);
    FETCH GET_MISC
     INTO DSP_SEARCH_BY;
    CLOSE GET_MISC;
    OPEN GET_SOURCE_NAME(P_SOURCE);
    FETCH GET_SOURCE_NAME
     INTO DSP_SOURCE;
    CLOSE GET_SOURCE_NAME;
    OPEN GET_YES_NO(P_SHOW_TRANSACTIONS);
    FETCH GET_YES_NO
     INTO DSP_SHOW_TRANSACTIONS;
    CLOSE GET_YES_NO;
    OPEN GET_YES_NO(P_UNAPLD_PREPAYMENTS);
    FETCH GET_YES_NO
     INTO DSP_UNAPLD_PREPAYMENTS;
    CLOSE GET_YES_NO;
    OPEN GET_YES_NO(P_UNAPLD_RECEIPTS);
    FETCH GET_YES_NO
     INTO DSP_UNAPLD_RECEIPTS;
    CLOSE GET_YES_NO;
    OPEN GET_FACTOR(P_FACTOR);
    FETCH GET_FACTOR
     INTO DSP_FACTOR;
    CLOSE GET_FACTOR;
    OPEN GET_REPORT_NAME(P_CONC_REQUEST_ID);
    FETCH GET_REPORT_NAME
     INTO P_REPORT_NAME;
    CLOSE GET_REPORT_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(100
                 ,SQLERRM)*/NULL;
  END AFTERPFORM;

  FUNCTION CF_NET_POSITIONFORMULA(SUMSUMAMOUNTPERRPT IN NUMBER
                                 ,SUMHPAMOUNTPERRPT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN NVL(SUMSUMAMOUNTPERRPT
              ,0) + NVL(SUMHPAMOUNTPERRPT
              ,0);
  END CF_NET_POSITIONFORMULA;

  FUNCTION AMOUNT_DSPFORMULA(AMOUNT IN NUMBER
                            ,AMOUNT_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(AMOUNT)*/NULL;
    /*SRW.REFERENCE(AMOUNT_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD('amount');
    RETURN (AMOUNT_DSP);
  END AMOUNT_DSPFORMULA;

  FUNCTION SUMAMOUNTPERAR_SRC_DSPFORMULA(SUMAMOUNTPERAR_SRC IN NUMBER
                                        ,SUMAMOUNTPERAR_SRC_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SUMAMOUNTPERAR_SRC)*/NULL;
    /*SRW.REFERENCE(SUMAMOUNTPERAR_SRC_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD('SumAMOUNTPerAR_SRC');
    RETURN (SUMAMOUNTPERAR_SRC_DSP);
  END SUMAMOUNTPERAR_SRC_DSPFORMULA;

  FUNCTION SUMAMOUNTPERAP_SRC_DSPFORMULA(SUMAMOUNTPERAP_SRC IN NUMBER
                                        ,SUMAMOUNTPERAP_SRC_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SUMAMOUNTPERAP_SRC)*/NULL;
    /*SRW.REFERENCE(SUMAMOUNTPERAP_SRC_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD('sumamountperap_src');
    RETURN (SUMAMOUNTPERAP_SRC_DSP);
  END SUMAMOUNTPERAP_SRC_DSPFORMULA;

  FUNCTION AMOUNT1_DSPFORMULA(AMOUNT1 IN NUMBER
                             ,AMOUNT1_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(AMOUNT1)*/NULL;
    /*SRW.REFERENCE(AMOUNT1_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD('amount1');
    RETURN (AMOUNT1_DSP);
  END AMOUNT1_DSPFORMULA;

  FUNCTION SUM_AMOUNT_DSPFORMULA(SUM_AMOUNT IN NUMBER
                                ,SUM_AMOUNT_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SUM_AMOUNT)*/NULL;
    /*SRW.REFERENCE(SUM_AMOUNT_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD_LARGE('sum_amount');
    RETURN (SUM_AMOUNT_DSP);
  END SUM_AMOUNT_DSPFORMULA;

  FUNCTION HP_AMOUNT_DSPFORMULA(HP_AMOUNT IN NUMBER
                               ,HP_AMOUNT_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(HP_AMOUNT)*/NULL;
    /*SRW.REFERENCE(HP_AMOUNT_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD_LARGE('hp_amount');
    RETURN (HP_AMOUNT_DSP);
  END HP_AMOUNT_DSPFORMULA;

  FUNCTION SUMSUMAMOUNTPERRPT_DSPFORMULA(SUMSUMAMOUNTPERRPT IN NUMBER
                                        ,SUMSUMAMOUNTPERRPT_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SUMSUMAMOUNTPERRPT)*/NULL;
    /*SRW.REFERENCE(SUMSUMAMOUNTPERRPT_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD_LARGE('SumSUMAMOUNTPerRPT');
    RETURN (SUMSUMAMOUNTPERRPT_DSP);
  END SUMSUMAMOUNTPERRPT_DSPFORMULA;

  FUNCTION SUMHPAMOUNTPERRPT_DSPFORMULA(SUMHPAMOUNTPERRPT IN NUMBER
                                       ,SUMHPAMOUNTPERRPT_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SUMHPAMOUNTPERRPT)*/NULL;
    /*SRW.REFERENCE(SUMHPAMOUNTPERRPT_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD_LARGE('SumHPAMOUNTPerRPT');
    RETURN (SUMHPAMOUNTPERRPT_DSP);
  END SUMHPAMOUNTPERRPT_DSPFORMULA;

  FUNCTION CF_NET_POSITION_DSPFORMULA(CF_NET_POSITION IN NUMBER
                                     ,CF_NET_POSITION_DSP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_NET_POSITION)*/NULL;
    /*SRW.REFERENCE(CF_NET_POSITION_DSP)*/NULL;
    FORMAT_AMOUNT_FIELD_LARGE('cf_net_position');
    RETURN (CF_NET_POSITION_DSP);
  END CF_NET_POSITION_DSPFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        TEXT LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRHOAPR';
  BEGIN
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z_REPORT_DATE' THEN
        Z_REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_PAGE' THEN
        Z_PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_SEARCH_BY' THEN
        Z_SEARCH_BY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_SOURCE' THEN
        Z_SOURCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_CURRENCY' THEN
        Z_CURRENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_COMPANY' THEN
        Z_COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_SOB_CURRENCY' THEN
        Z_SOB_CURRENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_AP_DISCOUNT' THEN
        Z_AP_DISCOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_FACTOR' THEN
        Z_FACTOR := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DUE_DATE_FROM' THEN
        Z_DUE_DATE_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DUE_DATE_TO' THEN
        Z_DUE_DATE_TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_UNAPPLIED_PREPAYMENTS' THEN
        Z_UNAPPLIED_PREPAYMENTS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_UNAPPLIED_RECEIPTS' THEN
        Z_UNAPPLIED_RECEIPTS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_SHOW_TRANSACTIONS' THEN
        Z_SHOW_TRANSACTIONS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_CRITERIA_SET' THEN
        Z_CRITERIA_SET := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_PARAMETERS' THEN
        Z_PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_BASIC_SEARCH_CRITERIA' THEN
        Z_BASIC_SEARCH_CRITERIA := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_ADVANCED_SEARCH_CRITERIA' THEN
        Z_ADVANCED_SEARCH_CRITERIA := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_OPEN_ARAP_HEDGE_POSITION' THEN
        Z_OPEN_ARAP_HEDGE_POSITION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_AS_OF_DATE' THEN
        Z_AS_OF_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_SUMMARY_POSITION' THEN
        Z_SUMMARY_POSITION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_NET_POSITION' THEN
        Z_NET_POSITION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_ACTUAL_HEDGE_POSITION' THEN
        Z_ACTUAL_HEDGE_POSITION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_UNDER_APPLIED' THEN
        Z_UNDER_APPLIED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_OVER_APPLIED' THEN
        Z_OVER_APPLIED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_EVEN' THEN
        Z_EVEN := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_ACTUAL_OPEN_POSITION_SUM' THEN
        Z_ACTUAL_OPEN_POSITION_SUM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_OUTSTANDING_AMOUNT' THEN
        Z_OUTSTANDING_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_ACTUAL_HEDGE_POSITION_SUM' THEN
        Z_ACTUAL_HEDGE_POSITION_SUM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_HEDGE_NUMBER' THEN
        Z_HEDGE_NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DEAL_NUMBER' THEN
        Z_DEAL_NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_OFFSET' THEN
        Z_OFFSET := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DAYS' THEN
        Z_DAYS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_REMAINING' THEN
        Z_REMAINING := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_RECEIVABLES' THEN
        Z_RECEIVABLES := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_TRANS_TYPE' THEN
        Z_TRANS_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_OPERATING_UNIT' THEN
        Z_OPERATING_UNIT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_CUSTOMER' THEN
        Z_CUSTOMER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_TRANS_DATE' THEN
        Z_TRANS_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DUE_DATE' THEN
        Z_DUE_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_TRANS_NUMBER' THEN
        Z_TRANS_NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_TRANS_AMOUNT' THEN
        Z_TRANS_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_TOTAL' THEN
        Z_TOTAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_PAYABLES' THEN
        Z_PAYABLES := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_INVOICE_TYPE' THEN
        Z_INVOICE_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_SUPPLIER' THEN
        Z_SUPPLIER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_INVOICE_DATE' THEN
        Z_INVOICE_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_INVOICE_NUMBER' THEN
        Z_INVOICE_NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_INVOICE_AMOUNT' THEN
        Z_INVOICE_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_END_OF_REPORT' THEN
        Z_END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_NO_DATA_FOUND' THEN
        Z_NO_DATA_FOUND := C.LANG_NAME;
      END IF;
    END LOOP;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    IF (P_DUMMY1 = 'D') THEN
      DELETE FROM XTR_HEDGE_CRITERIA
       WHERE CRITERIA_SET = P_CRITERIA_SET_V
         AND CRITERIA_SET_OWNER = P_CRITERIA_SET_OWNER;
      COMMIT;
      P_CRITERIA_SET_V := NULL;
    END IF;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_FROM_VALUE_DSPFORMULA(CRITERIA_CODE IN VARCHAR2
                                   ,FROM_VALUE IN VARCHAR2) RETURN CHAR IS
    V_VALUE VARCHAR2(240);
    CURSOR C_COMN_OPUNIT(P_VALUE IN VARCHAR2) IS
      SELECT
        NAME
      FROM
        HR_OPERATING_UNITS OU
      WHERE ORGANIZATION_ID = P_VALUE;
    CURSOR C_AP_SUPPLIER(P_VALUE IN VARCHAR2) IS
      SELECT
        VENDOR_NAME
      FROM
        PO_VENDORS
      WHERE VENDOR_ID = P_VALUE;
    CURSOR C_AP_INVTYPE(P_VALUE IN VARCHAR2) IS
      SELECT
        DISPLAYED_FIELD
      FROM
        AP_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'INVOICE TYPE'
        AND LOOKUP_CODE = P_VALUE;
    CURSOR C_AP_SOURCE(P_VALUE IN VARCHAR2) IS
      SELECT
        DISPLAYED_FIELD
      FROM
        AP_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'SOURCE'
        AND LOOKUP_CODE = P_VALUE;
  BEGIN
    IF CRITERIA_CODE in ('AR_SOURCE','AR_TRXTYPE','AR_CUSTOMER') THEN
      V_VALUE := FROM_VALUE;
    ELSIF CRITERIA_CODE = 'COMN_OPUNIT' THEN
      OPEN C_COMN_OPUNIT(FROM_VALUE);
      FETCH C_COMN_OPUNIT
       INTO V_VALUE;
      CLOSE C_COMN_OPUNIT;
    ELSIF CRITERIA_CODE = 'AP_SUPPLIER' THEN
      OPEN C_AP_SUPPLIER(FROM_VALUE);
      FETCH C_AP_SUPPLIER
       INTO V_VALUE;
      CLOSE C_AP_SUPPLIER;
    ELSIF CRITERIA_CODE = 'AP_INVTYPE' THEN
      OPEN C_AP_INVTYPE(FROM_VALUE);
      FETCH C_AP_INVTYPE
       INTO V_VALUE;
      CLOSE C_AP_INVTYPE;
    ELSIF CRITERIA_CODE = 'AP_SOURCE' THEN
      IF FROM_VALUE = 'XTR_AP_SOURCE_MANUAL' THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_AP_SOURCE_MANUAL');
        V_VALUE := SUBSTR(FND_MESSAGE.GET
                         ,1
                         ,80);
      ELSIF FROM_VALUE = 'XTR_AP_SOURCE_OTHER' THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_AP_SOURCE_OTHER');
        V_VALUE := SUBSTR(FND_MESSAGE.GET
                         ,1
                         ,80);
      ELSE
        OPEN C_AP_SOURCE(FROM_VALUE);
        FETCH C_AP_SOURCE
         INTO V_VALUE;
        CLOSE C_AP_SOURCE;
      END IF;
    END IF;
    RETURN V_VALUE;
  END CF_FROM_VALUE_DSPFORMULA;

PROCEDURE FORMAT_AMOUNT_FIELD(p_amt_field VARCHAR2) IS
  l_precision number;
BEGIN

/*SRW.REFERENCE(:p_currency);
SRW.REFERENCE(L_PRECISION);*/

If P_FACTOR = '0' then

  /* SRW.USER_EXIT('FND FORMAT_CURRENCY
                CODE=":p_currency"
                DISPLAY_WIDTH="20"
                AMOUNT=":'||p_amt_field||'"
                DISPLAY=":'||p_amt_field||'_dsp"
                PRECISION="STANDARD"
	        ');*/null;

Else

  /* SRW.USER_EXIT('FND FORMAT_CURRENCY
                CODE=":p_currency"
                DISPLAY_WIDTH="20"
                AMOUNT=":'||p_amt_field||'"
                DISPLAY=":'||p_amt_field||'_dsp"
                PRECISION="STANDARD"
                DISPLAY_SCALING_FACTOR="'||to_char(length(:p_factor)-1)||'"
	        ');*/ null;
End If;

END;

PROCEDURE FORMAT_AMOUNT_FIELD_LARGE(p_amt_field VARCHAR2) IS
  l_precision number;
BEGIN

/*SRW.REFERENCE(:p_currency);
SRW.REFERENCE(L_PRECISION);
*/
If P_FACTOR = '0' then

   /*SRW.USER_EXIT('FND FORMAT_CURRENCY
                CODE=":p_currency"
                DISPLAY_WIDTH="50"
                AMOUNT=":'||p_amt_field||'"
                DISPLAY=":'||p_amt_field||'_dsp"
                PRECISION="STANDARD"
	        ');*/null;

Else

  /* SRW.USER_EXIT('FND FORMAT_CURRENCY
                CODE=":p_currency"
                DISPLAY_WIDTH="50"
                AMOUNT=":'||p_amt_field||'"
                DISPLAY=":'||p_amt_field||'_dsp"
                PRECISION="STANDARD"
                DISPLAY_SCALING_FACTOR="'||to_char(length(:p_factor)-1)||'"
	        ');*/ null;
End If;

END;

END XTR_XTRHOAPR_XMLP_PKG;


/
