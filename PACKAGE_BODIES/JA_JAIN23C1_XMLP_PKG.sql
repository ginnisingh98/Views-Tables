--------------------------------------------------------
--  DDL for Package Body JA_JAIN23C1_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAIN23C1_XMLP_PKG" AS
/* $Header: JAIN23C1B.pls 120.1 2007/12/25 16:07:03 dwkrishn noship $ */
  FUNCTION CF_1FORMULA(REGISTER_ID IN NUMBER
                      ,OPENING_BALANCE_QTY IN NUMBER
                      ,CLOSING_BALANCE_QTY IN NUMBER
                      ,INVENTORY_ITEM_ID IN NUMBER
                      ,SLNO IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.MESSAGE(11
               ,'register_id = ' || REGISTER_ID || ', opening balance = ' || OPENING_BALANCE_QTY)*/NULL;
    /*SRW.MESSAGE(12
               ,'register_id = ' || REGISTER_ID || ', closing balance = ' || CLOSING_BALANCE_QTY)*/NULL;
    RETURN (TO_CHAR(INVENTORY_ITEM_ID) || '/' || TO_CHAR(SLNO));
  END CF_1FORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    V_MONTH VARCHAR2(3);
    V_FINAL_FOLIO NUMBER;
  BEGIN
    V_MONTH := TO_CHAR(P_TRN_FROM_DATE_1
                      ,'MON');
    V_FINAL_FOLIO := PREV_PAGE + LAST_PAGE;
    IF VALIDATION_FLAG = 'Y' THEN
      NULL;
    END IF;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    FOLIOMONTH DATE;
    MAXENDDATE DATE;
  BEGIN
  P_TRN_FROM_DATE_1 :=P_TRN_FROM_DATE;
	P_TRN_TO_DATE_1 := P_TRN_TO_DATE;
    IF P_FISCAL_YEAR IS NOT NULL AND P_MONTH IS NOT NULL THEN
      FOLIOMONTH := TO_DATE('01-' || UPPER(P_MONTH) || TO_CHAR(P_FISCAL_YEAR
                                   ,'-YYYY')
                           ,'DD-MON-YYYY');
      IF TRUNC(FOLIOMONTH) < TRUNC(P_FISCAL_YEAR) THEN
        FOLIOMONTH := ADD_MONTHS(FOLIOMONTH
                                ,12);
      END IF;
            IF TRUNC(LAST_DAY(FOLIOMONTH)) < TRUNC(SYSDATE) THEN
        P_TRN_FROM_DATE_1 := TO_DATE('01-' || TO_CHAR(FOLIOMONTH
                                          ,'MON-YYYY')
                                  ,'DD-MON-YYYY');
        P_TRN_TO_DATE_1 := LAST_DAY(P_TRN_FROM_DATE_1);
        VALIDATION_FLAG := 'Y';
        IF PREV_PAGE = -1 THEN
          /*SRW.MESSAGE(999
                     ,'This Report is not run for the Previous Month')*/NULL;
          VALIDATION_FLAG := 'N';
        END IF;
      END IF;
    ELSE
      VALIDATION_FLAG := 'N';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION CF_QTY_RECEIVEDFORMULA(SLNO_1 IN NUMBER
                                 ,INVENTORY_ITEM_ID_1 IN NUMBER
                                 ,TRANSACTION_DATE_1 IN DATE
                                 ,TRANSACTION_TYPE IN VARCHAR2) RETURN NUMBER IS
    RCVD_QTY NUMBER;
  BEGIN
    BEGIN
      SELECT
        QUANTITY_RECEIVED
      INTO RCVD_QTY
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    EXCEPTION
      WHEN OTHERS THEN
        RCVD_QTY := '';
    END;
    IF RCVD_QTY IS NULL THEN
      BEGIN
        SELECT
          OTH_RECEIPT_QUANTITY
        INTO RCVD_QTY
        FROM
          JAI_CMN_RG_23AC_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND SLNO = SLNO_1
          AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
          AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
      EXCEPTION
        WHEN OTHERS THEN
          RCVD_QTY := '';
      END;
    END IF;
    IF TRANSACTION_TYPE = 'RTV' THEN
      RCVD_QTY := NULL;
    END IF;
    RETURN (RCVD_QTY);
  END CF_QTY_RECEIVEDFORMULA;
  FUNCTION CF_INV_IDFORMULA(SLNO_1 IN NUMBER
                           ,INVENTORY_ITEM_ID_1 IN NUMBER
                           ,TRANSACTION_DATE_1 IN DATE) RETURN CHAR IS
    RCVD_QTY NUMBER;
    INV_ID VARCHAR2(30);
  BEGIN
    BEGIN
      SELECT
        QUANTITY_RECEIVED
      INTO RCVD_QTY
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    EXCEPTION
      WHEN OTHERS THEN
        RCVD_QTY := '';
    END;
    IF RCVD_QTY IS NOT NULL THEN
      BEGIN
        SELECT
          EXCISE_INVOICE_NO
        INTO INV_ID
        FROM
          JAI_CMN_RG_23AC_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND SLNO = SLNO_1
          AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
          AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
      EXCEPTION
        WHEN OTHERS THEN
          INV_ID := '';
      END;
    ELSE
      BEGIN
        SELECT
          OTH_RECEIPT_QUANTITY
        INTO RCVD_QTY
        FROM
          JAI_CMN_RG_23AC_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND SLNO = SLNO_1
          AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
          AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
      EXCEPTION
        WHEN OTHERS THEN
          RCVD_QTY := '';
      END;
      IF RCVD_QTY IS NOT NULL THEN
        BEGIN
          SELECT
            OTH_RECEIPT_ID_REF
          INTO INV_ID
          FROM
            JAI_CMN_RG_23AC_I_TRXS
          WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
            AND LOCATION_ID = P_LOCATION_ID
            AND SLNO = SLNO_1
            AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
            AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
        EXCEPTION
          WHEN OTHERS THEN
            INV_ID := '';
        END;
      END IF;
    END IF;
    RETURN (INV_ID);
  END CF_INV_IDFORMULA;
  FUNCTION CF_INV_DTFORMULA(SLNO_1 IN NUMBER
                           ,INVENTORY_ITEM_ID_1 IN NUMBER
                           ,TRANSACTION_DATE_1 IN DATE) RETURN DATE IS
    RCVD_QTY NUMBER;
    INV_DT DATE;
  BEGIN
    BEGIN
      SELECT
        QUANTITY_RECEIVED
      INTO RCVD_QTY
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    EXCEPTION
      WHEN OTHERS THEN
        RCVD_QTY := '';
    END;
    IF RCVD_QTY IS NOT NULL THEN
      BEGIN
        SELECT
          EXCISE_INVOICE_DATE
        INTO INV_DT
        FROM
          JAI_CMN_RG_23AC_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND SLNO = SLNO_1
          AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
          AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
      EXCEPTION
        WHEN OTHERS THEN
          INV_DT := '';
      END;
    ELSE
      BEGIN
        SELECT
          OTH_RECEIPT_QUANTITY
        INTO RCVD_QTY
        FROM
          JAI_CMN_RG_23AC_I_TRXS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND SLNO = SLNO_1
          AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
          AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
      EXCEPTION
        WHEN OTHERS THEN
          RCVD_QTY := '';
      END;
      IF RCVD_QTY IS NOT NULL THEN
        BEGIN
          SELECT
            OTH_RECEIPT_DATE
          INTO INV_DT
          FROM
            JAI_CMN_RG_23AC_I_TRXS
          WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
            AND LOCATION_ID = P_LOCATION_ID
            AND SLNO = SLNO_1
            AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
            AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
        EXCEPTION
          WHEN OTHERS THEN
            INV_DT := '';
        END;
      END IF;
    END IF;
    RETURN (INV_DT);
  END CF_INV_DTFORMULA;
  FUNCTION CF_SALES_INV_IDFORMULA(SLNO_1 IN NUMBER
                                 ,INVENTORY_ITEM_ID_1 IN NUMBER
                                 ,TRANSACTION_DATE_1 IN DATE) RETURN CHAR IS
    B_ED NUMBER;
    A_ED NUMBER;
    O_ED NUMBER;
    S_INV_ID VARCHAR2(30);
    LN_ADD_CVD JAI_CMN_RG_23AC_I_TRXS.ADDITIONAL_CVD%TYPE := 0;
  BEGIN
    BEGIN
      SELECT
        NVL(BASIC_ED
           ,0),
        NVL(ADDITIONAL_ED
           ,0),
        NVL(OTHER_ED
           ,0),
        NVL(ADDITIONAL_CVD
           ,0)
      INTO B_ED,A_ED,O_ED,LN_ADD_CVD
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    EXCEPTION
      WHEN OTHERS THEN
        B_ED := 0;
        A_ED := 0;
        O_ED := 0;
        LN_ADD_CVD := 0;
    END;
    IF B_ED + A_ED + O_ED + LN_ADD_CVD > 0 THEN
      SELECT
        SALES_INVOICE_NO
      INTO S_INV_ID
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    ELSE
      S_INV_ID := '';
    END IF;
    RETURN (S_INV_ID);
  END CF_SALES_INV_IDFORMULA;
  FUNCTION CF_SALES_INV_DTFORMULA(SLNO_1 IN NUMBER
                                 ,INVENTORY_ITEM_ID_1 IN NUMBER
                                 ,TRANSACTION_DATE_1 IN DATE) RETURN DATE IS
    B_ED NUMBER;
    A_ED NUMBER;
    O_ED NUMBER;
    S_INV_DT DATE;
    LN_ADD_CVD JAI_CMN_RG_23AC_I_TRXS.ADDITIONAL_CVD%TYPE := 0;
  BEGIN
    BEGIN
      SELECT
        NVL(BASIC_ED
           ,0),
        NVL(ADDITIONAL_ED
           ,0),
        NVL(OTHER_ED
           ,0),
        NVL(ADDITIONAL_CVD
           ,0)
      INTO B_ED,A_ED,O_ED,LN_ADD_CVD
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    EXCEPTION
      WHEN OTHERS THEN
        B_ED := 0;
        A_ED := 0;
        O_ED := 0;
        LN_ADD_CVD := 0;
    END;
    IF (B_ED + A_ED + O_ED + LN_ADD_CVD) > 0 THEN
      SELECT
        SALES_INVOICE_DATE
      INTO S_INV_DT
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    ELSE
      S_INV_DT := '';
    END IF;
    RETURN (S_INV_DT);
  END CF_SALES_INV_DTFORMULA;
  FUNCTION CF_SALES_INV_QTYFORMULA(SLNO_1 IN NUMBER
                                  ,INVENTORY_ITEM_ID_1 IN NUMBER
                                  ,TRANSACTION_DATE_1 IN DATE
                                  ,TRANSACTION_TYPE IN VARCHAR2) RETURN NUMBER IS
    B_ED NUMBER;
    A_ED NUMBER;
    O_ED NUMBER;
    S_INV_QTY NUMBER;
    LN_ADD_CVD JAI_CMN_RG_23AC_I_TRXS.ADDITIONAL_CVD%TYPE := 0;
    CURSOR C_FETCH_QTY_FOR_RTV IS
      SELECT
        ABS(QUANTITY_RECEIVED)
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
  BEGIN
    BEGIN
      SELECT
        NVL(BASIC_ED
           ,0),
        NVL(ADDITIONAL_ED
           ,0),
        NVL(OTHER_ED
           ,0),
        NVL(ADDITIONAL_CVD
           ,0)
      INTO B_ED,A_ED,O_ED,LN_ADD_CVD
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    EXCEPTION
      WHEN OTHERS THEN
        B_ED := 0;
        A_ED := 0;
        O_ED := 0;
        LN_ADD_CVD := 0;
    END;
    IF B_ED + A_ED + O_ED + LN_ADD_CVD > 0 THEN
      SELECT
        SALES_INVOICE_QUANTITY
      INTO S_INV_QTY
      FROM
        JAI_CMN_RG_23AC_I_TRXS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND SLNO = SLNO_1
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND TRUNC(TRANSACTION_DATE) = TRUNC(TRANSACTION_DATE_1);
    ELSE
      S_INV_QTY := '';
    END IF;
    IF TRANSACTION_TYPE = 'RTV' THEN
      OPEN C_FETCH_QTY_FOR_RTV;
      FETCH C_FETCH_QTY_FOR_RTV
       INTO S_INV_QTY;
      CLOSE C_FETCH_QTY_FOR_RTV;
    END IF;
    RETURN (S_INV_QTY);
  END CF_SALES_INV_QTYFORMULA;
  FUNCTION CF_FOLIO_A2FORMULA(A2FOLIONO2 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF A2FOLIONO2 = '/' THEN
      RETURN (NULL);
    ELSE
      RETURN (A2FOLIONO2);
    END IF;
  END CF_FOLIO_A2FORMULA;
  FUNCTION CF_ITEM_TARRIFFORMULA(INVENTORY_ITEM_ID_1 IN NUMBER) RETURN CHAR IS
    I_TARRIF VARCHAR2(50);
  BEGIN
    BEGIN
      SELECT
        ITEM_TARIFF
      INTO I_TARRIF
      FROM
        JAI_INV_ITM_SETUPS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1;
    EXCEPTION
      WHEN OTHERS THEN
        I_TARRIF := '';
    END;
    RETURN (I_TARRIF);
  END CF_ITEM_TARRIFFORMULA;
  FUNCTION CF_ITEM_FOLIOFORMULA(INVENTORY_ITEM_ID_1 IN NUMBER) RETURN CHAR IS
    I_FOLIO VARCHAR2(50);
  BEGIN
    BEGIN
      SELECT
        ITEM_FOLIO
      INTO I_FOLIO
      FROM
        JAI_INV_ITM_SETUPS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1;
    EXCEPTION
      WHEN OTHERS THEN
        I_FOLIO := '';
    END;
    RETURN (I_FOLIO);
  END CF_ITEM_FOLIOFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 22/11/2006')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION CF_VEND_DTLSFORMULA(VENDOR_ID IN NUMBER
                              ,VENDOR_SITE_ID IN NUMBER
                              ,RECEIPT_ID IN VARCHAR2
                              ,VEND_DTLS IN VARCHAR2) RETURN CHAR IS
    LV_RCV_TRANSACTION CONSTANT RCV_TRANSACTIONS.TRANSACTION_TYPE%TYPE DEFAULT 'RECEIVE';
    LCV_INT_ORD CONSTANT RCV_SHIPMENT_HEADERS.RECEIPT_SOURCE_CODE%TYPE DEFAULT 'INTERNAL ORDER';
    CURSOR INT_ORDER_CUR(P_RECEIPT_ID IN VARCHAR2) IS
      SELECT
        SUBSTR(HRU.NAME
              ,1
              ,20) || ' ' || SUBSTR(HRL.ADDRESS_LINE_1
              ,1
              ,12) || ' ' || SUBSTR(HRL.ADDRESS_LINE_2
              ,1
              ,8) || ' ' || SUBSTR(HRL.ADDRESS_LINE_3
              ,1
              ,7) || ' ' || SUBSTR(HRL.TOWN_OR_CITY
              ,1
              ,15) || ' ' || SUBSTR(HRL.POSTAL_CODE
              ,1
              ,10) || ' ' || SUBSTR(HRL.COUNTRY
              ,1
              ,10)
      FROM
        HR_LOCATIONS HRL,
        RCV_TRANSACTIONS RCVT,
        RCV_SHIPMENT_HEADERS RCVSH,
        JAI_OM_WSH_LINES_ALL JSPL,
        HR_ALL_ORGANIZATION_UNITS HRU
      WHERE RCVT.TRANSACTION_ID = P_RECEIPT_ID
        AND RCVT.TRANSACTION_TYPE = LV_RCV_TRANSACTION
        AND RCVT.SHIPMENT_HEADER_ID = RCVSH.SHIPMENT_HEADER_ID
        AND RCVSH.RECEIPT_SOURCE_CODE = LCV_INT_ORD
        AND RCVSH.SHIPMENT_NUM = JSPL.DELIVERY_ID
        AND HRL.LOCATION_ID = JSPL.LOCATION_ID
        AND HRU.ORGANIZATION_ID = RCVSH.ORGANIZATION_ID;
    CURSOR C_VENDOR_NAME_FOR_ISO IS
      SELECT
        SUBSTR(HRU.NAME
              ,1
              ,20) || ' ' || SUBSTR(HRL.ADDRESS_LINE_1
              ,1
              ,12) || ' ' || SUBSTR(HRL.ADDRESS_LINE_2
              ,1
              ,8) || ' ' || SUBSTR(HRL.ADDRESS_LINE_3
              ,1
              ,7) || ' ' || SUBSTR(HRL.TOWN_OR_CITY
              ,1
              ,15) || ' ' || SUBSTR(HRL.POSTAL_CODE
              ,1
              ,10) || ' ' || SUBSTR(HRL.COUNTRY
              ,1
              ,10)
      FROM
        HR_ALL_ORGANIZATION_UNITS HRU,
        HR_LOCATIONS HRL
      WHERE HRU.ORGANIZATION_ID = ABS(VENDOR_ID)
        AND HRL.LOCATION_ID = ABS(VENDOR_SITE_ID)
        AND HRU.LOCATION_ID = HRL.LOCATION_ID;
    V_VENDOR_DTLS VARCHAR2(200);
  BEGIN
    IF VENDOR_ID IS NULL THEN
      OPEN INT_ORDER_CUR(RECEIPT_ID);
      FETCH INT_ORDER_CUR
       INTO V_VENDOR_DTLS;
      CLOSE INT_ORDER_CUR;
      RETURN V_VENDOR_DTLS;
    ELSIF VENDOR_ID < 0 THEN
      OPEN C_VENDOR_NAME_FOR_ISO;
      FETCH C_VENDOR_NAME_FOR_ISO
       INTO V_VENDOR_DTLS;
      CLOSE C_VENDOR_NAME_FOR_ISO;
      RETURN V_VENDOR_DTLS;
    ELSE
      RETURN VEND_DTLS;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(1275
                 ,'Unable to fetch vendor details in case of an Internal Order' || SQLERRM)*/NULL;
      RETURN NULL;
  END CF_VEND_DTLSFORMULA;
  FUNCTION CF_RANGE1FORMULA(VENDOR_ID IN NUMBER
                           ,VENDOR_SITE_ID IN NUMBER
                           ,RECEIPT_ID IN VARCHAR2
                           ,RANGE1 IN VARCHAR2) RETURN CHAR IS
    LV_RCV_TRANSACTION CONSTANT RCV_TRANSACTIONS.TRANSACTION_TYPE%TYPE DEFAULT 'RECEIVE';
    LV_INT_ORD CONSTANT RCV_SHIPMENT_HEADERS.RECEIPT_SOURCE_CODE%TYPE DEFAULT 'INTERNAL ORDER';
    CURSOR C_RANGE_NO_FOR_ISO IS
      SELECT
        EXCISE_DUTY_RANGE
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = ABS(VENDOR_ID)
        AND LOCATION_ID = ABS(VENDOR_SITE_ID);
    CURSOR INT_ORDER_CUR(P_RECEIPT_ID IN VARCHAR2) IS
      SELECT
        DISTINCT
        JU.EXCISE_DUTY_RANGE
      FROM
        RCV_TRANSACTIONS RCVT,
        RCV_SHIPMENT_HEADERS RCVSH,
        JAI_CMN_INVENTORY_ORGS JU
      WHERE RCVT.TRANSACTION_ID = P_RECEIPT_ID
        AND RCVT.TRANSACTION_TYPE = LV_RCV_TRANSACTION
        AND RCVT.SHIPMENT_HEADER_ID = RCVSH.SHIPMENT_HEADER_ID
        AND RCVSH.RECEIPT_SOURCE_CODE = LV_INT_ORD
        AND RCVSH.ORGANIZATION_ID = JU.ORGANIZATION_ID;
    V_RANGE_NO JAI_CMN_INVENTORY_ORGS.EXCISE_DUTY_RANGE%TYPE;
  BEGIN
    IF VENDOR_ID < 0 THEN
      OPEN C_RANGE_NO_FOR_ISO;
      FETCH C_RANGE_NO_FOR_ISO
       INTO V_RANGE_NO;
      CLOSE C_RANGE_NO_FOR_ISO;
      RETURN V_RANGE_NO;
    ELSIF VENDOR_ID IS NULL THEN
      OPEN INT_ORDER_CUR(RECEIPT_ID);
      FETCH INT_ORDER_CUR
       INTO V_RANGE_NO;
      CLOSE INT_ORDER_CUR;
      RETURN V_RANGE_NO;
    ELSE
      RETURN RANGE1;
    END IF;
  END CF_RANGE1FORMULA;
  FUNCTION CF_DIVISION1FORMULA(VENDOR_ID IN NUMBER
                              ,VENDOR_SITE_ID IN NUMBER
                              ,RECEIPT_ID IN VARCHAR2
                              ,DIVISION1 IN VARCHAR2) RETURN CHAR IS
    LV_RCV_TRANSACTION CONSTANT RCV_TRANSACTIONS.TRANSACTION_TYPE%TYPE DEFAULT 'RECEIVE';
    LV_INT_ORD CONSTANT RCV_SHIPMENT_HEADERS.RECEIPT_SOURCE_CODE%TYPE DEFAULT 'INTERNAL ORDER';
    CURSOR C_DIVISION_NO_FOR_ISO IS
      SELECT
        EXCISE_DUTY_DIVISION
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = ABS(VENDOR_ID)
        AND LOCATION_ID = ABS(VENDOR_SITE_ID);
    CURSOR INT_ORDER_CUR(P_RECEIPT_ID IN VARCHAR2) IS
      SELECT
        DISTINCT
        JU.EXCISE_DUTY_DIVISION
      FROM
        RCV_TRANSACTIONS RCVT,
        RCV_SHIPMENT_HEADERS RCVSH,
        JAI_CMN_INVENTORY_ORGS JU
      WHERE RCVT.TRANSACTION_ID = P_RECEIPT_ID
        AND RCVT.TRANSACTION_TYPE = LV_RCV_TRANSACTION
        AND RCVT.SHIPMENT_HEADER_ID = RCVSH.SHIPMENT_HEADER_ID
        AND RCVSH.RECEIPT_SOURCE_CODE = LV_INT_ORD
        AND RCVSH.ORGANIZATION_ID = JU.ORGANIZATION_ID;
    V_DIVISION_NO JAI_CMN_INVENTORY_ORGS.EXCISE_DUTY_DIVISION%TYPE;
  BEGIN
    IF VENDOR_ID < 0 THEN
      OPEN C_DIVISION_NO_FOR_ISO;
      FETCH C_DIVISION_NO_FOR_ISO
       INTO V_DIVISION_NO;
      CLOSE C_DIVISION_NO_FOR_ISO;
      RETURN V_DIVISION_NO;
    ELSIF VENDOR_ID IS NULL THEN
      OPEN INT_ORDER_CUR(RECEIPT_ID);
      FETCH INT_ORDER_CUR
       INTO V_DIVISION_NO;
      CLOSE INT_ORDER_CUR;
      RETURN V_DIVISION_NO;
    ELSE
      RETURN DIVISION1;
    END IF;
  END CF_DIVISION1FORMULA;
  FUNCTION CP_PAGE_NO_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PAGE_NO;
  END CP_PAGE_NO_P;
  FUNCTION CP_PAGE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PAGE;
  END CP_PAGE_P;
END JA_JAIN23C1_XMLP_PKG;



/
