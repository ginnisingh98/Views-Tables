--------------------------------------------------------
--  DDL for Package Body ENG_COPY_TABLE_ROWS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ENG_COPY_TABLE_ROWS_PKG" AS
/* $Header: ENGPCTRB.pls 120.3.12010000.2 2009/03/26 18:55:57 vbrobbey ship $ */

PROCEDURE C_MTL_RTG_ITEM_REVISIONS (
X_inventory_item_id		IN NUMBER,
X_organization_id		IN NUMBER,
X_process_revision		IN VARCHAR2,
X_last_update_date		IN DATE,
X_last_updated_by		IN NUMBER,
X_creation_date			IN DATE,
X_created_by			IN NUMBER,
X_last_update_login		IN NUMBER,
X_effectivity_date		IN DATE,
X_change_notice			IN VARCHAR2,
X_implementation_date		IN DATE)
IS
BEGIN

  INSERT INTO MTL_RTG_ITEM_REVISIONS(
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    PROCESS_REVISION,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    EFFECTIVITY_DATE,
    CHANGE_NOTICE,
    IMPLEMENTATION_DATE)
  VALUES(
    X_inventory_item_id,
    X_organization_id,
    X_process_revision,
    X_last_update_date,
    X_last_updated_by,
    X_creation_date,
    X_created_by,
    X_last_update_login,
    X_effectivity_date,
    X_change_notice,
    X_implementation_date);

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_RTG_ITEM_REVISIONS',
                                         stmt_num => 1000,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_RTG_ITEM_REVISIONS;

PROCEDURE C_MTL_ITEM_REVISIONS (
X_inventory_item_id		IN NUMBER,
X_organization_id		IN NUMBER,
X_revision			IN VARCHAR2,
X_last_update_date		IN DATE,
X_last_updated_by		IN NUMBER,
X_creation_date			IN DATE,
X_created_by			IN NUMBER,
X_last_update_login		IN NUMBER,
X_effectivity_date		IN DATE,
X_change_notice			IN VARCHAR2,
X_implementation_date		IN DATE)
IS
        l_language_code	VARCHAR2(3);
	l_revision_id	NUMBER;
BEGIN

  INSERT INTO MTL_ITEM_REVISIONS_B(
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    REVISION,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    EFFECTIVITY_DATE,
    CHANGE_NOTICE,
    IMPLEMENTATION_DATE,
    REVISION_ID,
    OBJECT_VERSION_NUMBER,
    REVISION_LABEL) --Added for bug 3067402
  values
    (X_inventory_item_id,
    X_organization_id,
    X_revision,
    X_last_update_date,
    X_last_updated_by,
    X_creation_date,
    X_created_by,
    X_last_update_login,
    X_effectivity_date,
    X_change_notice,
    X_implementation_date,
    mtl_item_revisions_b_s.NEXTVAL,
    1,
    X_revision) --Added for bug 3067402
    RETURNING revision_id INTO l_revision_id;

   SELECT userenv('LANG') INTO l_language_code FROM dual;
          insert into MTL_ITEM_REVISIONS_TL (
			inventory_item_id,
			organization_id,
			revision_id,
			language,
                        source_lang,
			last_update_date,
			last_updated_by,
			creation_date,
			created_by,
			last_update_login
			 )
		 SELECT X_inventory_item_id,
                        X_organization_id,
                        l_revision_id,
                        lang.language_code,
                        l_language_code,
                        X_last_update_date,
			X_last_updated_by,
			X_creation_date,
		        X_created_by,
			X_last_update_login
			FROM FND_LANGUAGES lang
                 WHERE lang.installed_flag in ('I', 'B')
 		 and not exists
	        (select NULL
		      from MTL_ITEM_REVISIONS_TL T
		      where T.revision_id = l_revision_id
		      and T.LANGUAGE = lang.LANGUAGE_CODE);


EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_ITEM_REVISIONS',
                                         stmt_num => 1001,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_ITEM_REVISIONS;

PROCEDURE C_MTL_SYSTEM_ITEMS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id			IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2,
X_segment1			IN VARCHAR2,
X_segment2			IN VARCHAR2,
X_segment3			IN VARCHAR2,
X_segment4			IN VARCHAR2,
X_segment5			IN VARCHAR2,
X_segment6			IN VARCHAR2,
X_segment7			IN VARCHAR2,
X_segment8			IN VARCHAR2,
X_segment9			IN VARCHAR2,
X_segment10			IN VARCHAR2,
X_segment11			IN VARCHAR2,
X_segment12			IN VARCHAR2,
X_segment13			IN VARCHAR2,
X_segment14			IN VARCHAR2,
X_segment15			IN VARCHAR2,
X_segment16			IN VARCHAR2,
X_segment17			IN VARCHAR2,
X_segment18			IN VARCHAR2,
X_segment19			IN VARCHAR2,
X_segment20			IN VARCHAR2
)
IS

/* Bug 4466566 */
X_sales_account			NUMBER;
X_cost_of_sales_account		NUMBER;
X_expense_account		NUMBER;
X_encumbrance_account		NUMBER;
/* Bug 4466566 */

X_long_description VARCHAR2(4000); /* Bug 7591561 */

BEGIN

/* Bug 4466566 */
 If (x_master_org <> X_org_id ) then
	select
		sales_account,
		cost_of_sales_account,
		expense_account,
		encumbrance_account
	into
		X_sales_account,
		X_cost_of_sales_account,
		X_expense_account,
		X_encumbrance_account
	from    mtl_parameters
	where organization_id = X_master_org;
end if;
/* Bug 4466566 */

  INSERT INTO MTL_SYSTEM_ITEMS(
    ACCEPTABLE_EARLY_DAYS,
    ACCEPTABLE_RATE_DECREASE,
    ACCEPTABLE_RATE_INCREASE,
    ACCOUNTING_RULE_ID,
    ALLOWED_UNITS_LOOKUP_CODE,
    ALLOW_EXPRESS_DELIVERY_FLAG,
    ALLOW_ITEM_DESC_UPDATE_FLAG,
    ALLOW_SUBSTITUTE_RECEIPTS_FLAG,
    ALLOW_UNORDERED_RECEIPTS_FLAG,
    ASSET_CATEGORY_ID,
    ATO_FORECAST_CONTROL,
    ATP_COMPONENTS_FLAG,
    ATP_FLAG,
    ATP_RULE_ID,
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    AUTO_CREATED_CONFIG_FLAG,
    AUTO_LOT_ALPHA_PREFIX,
    AUTO_REDUCE_MPS,
    AUTO_SERIAL_ALPHA_PREFIX,
    BASE_ITEM_ID,
    BASE_WARRANTY_SERVICE_ID,
    BOM_ENABLED_FLAG,
    BOM_ITEM_TYPE,
    BUILD_IN_WIP_FLAG,
    BUYER_ID,
    CARRYING_COST,
    CATALOG_STATUS_FLAG,
    COLLATERAL_FLAG,
    COSTING_ENABLED_FLAG,
    COST_OF_SALES_ACCOUNT,
    COVERAGE_SCHEDULE_ID,
    CREATED_BY,
    CREATION_DATE,
    CUMULATIVE_TOTAL_LEAD_TIME,
    CUM_MANUFACTURING_LEAD_TIME,
    CUSTOMER_ORDER_ENABLED_FLAG,
    CUSTOMER_ORDER_FLAG,
    CYCLE_COUNT_ENABLED_FLAG,
    DAYS_EARLY_RECEIPT_ALLOWED,
    DAYS_LATE_RECEIPT_ALLOWED,
    DEFAULT_INCLUDE_IN_ROLLUP_FLAG,
    DEFAULT_SHIPPING_ORG,
    DEMAND_TIME_FENCE_CODE,
    DEMAND_TIME_FENCE_DAYS,
    DESCRIPTION,
    EFFECTIVITY_CONTROL,
    ENABLED_FLAG,
    ENCUMBRANCE_ACCOUNT,
    END_ASSEMBLY_PEGGING_FLAG,
    END_DATE_ACTIVE,
    ENFORCE_SHIP_TO_LOCATION_CODE,
    ENGINEERING_DATE,
    ENGINEERING_ECN_CODE,
    ENGINEERING_ITEM_ID,
    ENG_ITEM_FLAG,
    EXPENSE_ACCOUNT,
    EXPENSE_BILLABLE_FLAG,
    FIXED_DAYS_SUPPLY,
    FIXED_LEAD_TIME,
    FIXED_LOT_MULTIPLIER,
    FIXED_ORDER_QUANTITY,
    FULL_LEAD_TIME,
    HAZARD_CLASS_ID,
    INSPECTION_REQUIRED_FLAG,
    INTERNAL_ORDER_ENABLED_FLAG,
    INTERNAL_ORDER_FLAG,
    INVENTORY_ASSET_FLAG,
    INVENTORY_ITEM_FLAG,
    INVENTORY_ITEM_ID,
    INVENTORY_ITEM_STATUS_CODE,
    INVENTORY_PLANNING_CODE,
    INVOICEABLE_ITEM_FLAG,
    INVOICE_CLOSE_TOLERANCE,
    INVOICE_ENABLED_FLAG,
    INVOICING_RULE_ID,
    ITEM_CATALOG_GROUP_ID,
    ITEM_TYPE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LEAD_TIME_LOT_SIZE,
    LIST_PRICE_PER_UNIT,
    LOCATION_CONTROL_CODE,
    LOT_CONTROL_CODE,
    MARKET_PRICE,
    MATERIAL_BILLABLE_FLAG,
    MAXIMUM_ORDER_QUANTITY,
    MAX_MINMAX_QUANTITY,
    MAX_WARRANTY_AMOUNT,
    MINIMUM_ORDER_QUANTITY,
    MIN_MINMAX_QUANTITY,
    MODEL_CONFIG_CLAUSE_NAME,
    MRP_CALCULATE_ATP_FLAG,
    MRP_PLANNING_CODE,
    MRP_SAFETY_STOCK_CODE,
    MRP_SAFETY_STOCK_PERCENT,
    MTL_TRANSACTIONS_ENABLED_FLAG,
    MUST_USE_APPROVED_VENDOR_FLAG,
    NEGATIVE_MEASUREMENT_ERROR,
    NEW_REVISION_CODE,
    ORDER_COST,
    ORGANIZATION_ID,
    OUTSIDE_OPERATION_FLAG,
    OUTSIDE_OPERATION_UOM_TYPE,
    OVERRUN_PERCENTAGE,
    PAYMENT_TERMS_ID,
    PICKING_RULE_ID,
    PICK_COMPONENTS_FLAG,
    PLANNER_CODE,
    PLANNING_EXCEPTION_SET,
    PLANNING_MAKE_BUY_CODE,
    PLANNING_TIME_FENCE_CODE,
    PLANNING_TIME_FENCE_DAYS,
    POSITIVE_MEASUREMENT_ERROR,
    POSTPROCESSING_LEAD_TIME,
    PREPROCESSING_LEAD_TIME,
    PREVENTIVE_MAINTENANCE_FLAG,
    PRICE_TOLERANCE_PERCENT,
    PRIMARY_SPECIALIST_ID,
    PRIMARY_UNIT_OF_MEASURE,
    PRIMARY_UOM_CODE,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    PRORATE_SERVICE_FLAG,
    PURCHASING_ENABLED_FLAG,
    PURCHASING_ITEM_FLAG,
    QTY_RCV_EXCEPTION_CODE,
    QTY_RCV_TOLERANCE,
    RECEIPT_DAYS_EXCEPTION_CODE,
    RECEIPT_REQUIRED_FLAG,
    RECEIVE_CLOSE_TOLERANCE,
    RECEIVING_ROUTING_ID,
    RELEASE_TIME_FENCE_CODE,
    RELEASE_TIME_FENCE_DAYS,
    REPETITIVE_PLANNING_FLAG,
    REPLENISH_TO_ORDER_FLAG,
    REQUEST_ID,
    RESERVABLE_TYPE,
    RESPONSE_TIME_PERIOD_CODE,
    RESPONSE_TIME_VALUE,
    RESTRICT_LOCATORS_CODE,
    RESTRICT_SUBINVENTORIES_CODE,
    RETURNABLE_FLAG,
    RETURN_INSPECTION_REQUIREMENT,
    REVISION_QTY_CONTROL_CODE,
    RFQ_REQUIRED_FLAG,
    ROUNDING_CONTROL_TYPE,
    ROUNDING_FACTOR,
    SAFETY_STOCK_BUCKET_DAYS,
    SALES_ACCOUNT,
    SECONDARY_SPECIALIST_ID,
    SEGMENT1,
    SEGMENT10,
    SEGMENT11,
    SEGMENT12,
    SEGMENT13,
    SEGMENT14,
    SEGMENT15,
    SEGMENT16,
    SEGMENT17,
    SEGMENT18,
    SEGMENT19,
    SEGMENT2,
    SEGMENT20,
    SEGMENT3,
    SEGMENT4,
    SEGMENT5,
    SEGMENT6,
    SEGMENT7,
    SEGMENT8,
    SEGMENT9,
    SERIAL_NUMBER_CONTROL_CODE,
    SERVICEABLE_COMPONENT_FLAG,
    SERVICEABLE_ITEM_CLASS_ID,
    SERVICEABLE_PRODUCT_FLAG,
    SERVICE_DURATION,
    SERVICE_DURATION_PERIOD_CODE,
    SERVICE_ITEM_FLAG,
    SERVICE_STARTING_DELAY,
    SHELF_LIFE_CODE,
    SHELF_LIFE_DAYS,
    SHIPPABLE_ITEM_FLAG,
    SHIP_MODEL_COMPLETE_FLAG,
    SHRINKAGE_RATE,
    SOURCE_ORGANIZATION_ID,
    SOURCE_SUBINVENTORY,
    SOURCE_TYPE,
    SO_TRANSACTIONS_FLAG,
    START_AUTO_LOT_NUMBER,
    START_AUTO_SERIAL_NUMBER,
    START_DATE_ACTIVE,
    STD_LOT_SIZE,
    STOCK_ENABLED_FLAG,
    SUMMARY_FLAG,
    TAXABLE_FLAG,
    TAX_CODE,
    TIME_BILLABLE_FLAG,
    UNIT_OF_ISSUE,
    UNIT_VOLUME,
    UNIT_WEIGHT,
    UN_NUMBER_ID,
    VARIABLE_LEAD_TIME,
    VENDOR_WARRANTY_FLAG,
    VOLUME_UOM_CODE,
    WARRANTY_VENDOR_ID,
    WEIGHT_UOM_CODE,
    WIP_SUPPLY_LOCATOR_ID,
    WIP_SUPPLY_SUBINVENTORY,
    WIP_SUPPLY_TYPE,
    GLOBAL_ATTRIBUTE_CATEGORY,
    GLOBAL_ATTRIBUTE1,
    GLOBAL_ATTRIBUTE2,
    GLOBAL_ATTRIBUTE3,
    GLOBAL_ATTRIBUTE4,
    GLOBAL_ATTRIBUTE5,
    GLOBAL_ATTRIBUTE6,
    GLOBAL_ATTRIBUTE7,
    GLOBAL_ATTRIBUTE8,
    GLOBAL_ATTRIBUTE9,
    GLOBAL_ATTRIBUTE10,
    DEFAULT_SO_SOURCE_TYPE,
    CREATE_SUPPLY_FLAG,
    WEB_STATUS  ,
   CHECK_SHORTAGES_FLAG,
   PURCHASING_TAX_CODE,
   CONTAINER_ITEM_FLAG,
   VEHICLE_ITEM_FLAG,
   CONTAINER_TYPE_CODE,
   INTERNAL_VOLUME,
   MAXIMUM_LOAD_WEIGHT,
   MINIMUM_FILL_PERCENT,
   OVERCOMPLETION_TOLERANCE_TYPE ,
   OVERCOMPLETION_TOLERANCE_VALUE ,
   CONTRACT_ITEM_TYPE_CODE ,
   SUBSCRIPTION_DEPEND_FLAG ,
   OVER_SHIPMENT_TOLERANCE,
   UNDER_SHIPMENT_TOLERANCE,
   OVER_RETURN_TOLERANCE ,
   UNDER_RETURN_TOLERANCE ,
   EQUIPMENT_TYPE ,
   RECOVERED_PART_DISP_CODE ,
   DEFECT_TRACKING_ON_FLAG ,
   EVENT_FLAG ,
   ELECTRONIC_FLAG ,
   DOWNLOADABLE_FLAG,
   VOL_DISCOUNT_EXEMPT_FLAG ,
   COUPON_EXEMPT_FLAG ,
   COMMS_NL_TRACKABLE_FLAG ,
   ASSET_CREATION_CODE ,
   COMMS_ACTIVATION_REQD_FLAG ,
   ORDERABLE_ON_WEB_FLAG ,
   BACK_ORDERABLE_FLAG ,
   INDIVISIBLE_FLAG ,
   DIMENSION_UOM_CODE ,
   UNIT_LENGTH ,
   UNIT_WIDTH ,
   UNIT_HEIGHT ,
   BULK_PICKED_FLAG ,
   LOT_STATUS_ENABLED ,
   DEFAULT_LOT_STATUS_ID ,
   SERIAL_STATUS_ENABLED ,
   DEFAULT_SERIAL_STATUS_ID ,
   LOT_SPLIT_ENABLED ,
   LOT_MERGE_ENABLED ,
   INVENTORY_CARRY_PENALTY ,
   OPERATION_SLACK_PENALTY ,
   FINANCING_ALLOWED_FLAG ,
   EAM_ITEM_TYPE ,
   EAM_ACTIVITY_TYPE_CODE ,
   EAM_ACTIVITY_CAUSE_CODE ,
   EAM_ACT_NOTIFICATION_FLAG,
   EAM_ACT_SHUTDOWN_STATUS ,
   DUAL_UOM_CONTROL ,
   SECONDARY_UOM_CODE,
   DUAL_UOM_DEVIATION_HIGH ,
   DUAL_UOM_DEVIATION_LOW ,
   SERV_REQ_ENABLED_CODE ,
   SERV_BILLING_ENABLED_FLAG ,
   SERV_IMPORTANCE_LEVEL ,
   PLANNED_INV_POINT_FLAG ,
   LOT_TRANSLATE_ENABLED ,
   SUBSTITUTION_WINDOW_CODE ,
   SUBSTITUTION_WINDOW_DAYS ,
   IB_ITEM_INSTANCE_CLASS ,
   CONFIG_MODEL_TYPE ,
   LOT_SUBSTITUTION_ENABLED ,
   MINIMUM_LICENSE_QUANTITY ,
   EAM_ACTIVITY_SOURCE_CODE ,
   CURRENT_PHASE_ID  ,
   LIFECYCLE_ID ,
   PRODUCT_FAMILY_ITEM_ID,
   USAGE_ITEM_FLAG,
   TRACKING_QUANTITY_IND,
   ONT_PRICING_QTY_SOURCE,
   CONSIGNED_FLAG,
   ASN_AUTOEXPIRE_FLAG,
   VMI_FORECAST_TYPE,
   EXCLUDE_FROM_BUDGET_FLAG,
   DRP_PLANNED_FLAG,
   CRITICAL_COMPONENT_FLAG,
   CONTINOUS_TRANSFER,
   CONVERGENCE,
   DIVERGENCE,
   APPROVAL_STATUS
   /* Start Bug 3713912 */
  ,SECONDARY_DEFAULT_IND,
   ATTRIBUTE16,
   ATTRIBUTE17,
   ATTRIBUTE18,
   ATTRIBUTE19,
   ATTRIBUTE20,
   ATTRIBUTE21,
   ATTRIBUTE22,
   ATTRIBUTE23,
   ATTRIBUTE24,
   ATTRIBUTE25,
   ATTRIBUTE26,
   ATTRIBUTE27,
   ATTRIBUTE28,
   ATTRIBUTE29,
   ATTRIBUTE30,
   LOT_DIVISIBLE_FLAG,
   GRADE_CONTROL_FLAG,
   DEFAULT_GRADE,
   CHILD_LOT_FLAG,
   PARENT_CHILD_GENERATION_FLAG,
   CHILD_LOT_PREFIX,
   CHILD_LOT_STARTING_NUMBER,
   CHILD_LOT_VALIDATION_FLAG,
   COPY_LOT_ATTRIBUTE_FLAG,
   RECIPE_ENABLED_FLAG,
   PROCESS_COSTING_ENABLED_FLAG,
   RETEST_INTERVAL,
   EXPIRATION_ACTION_INTERVAL,
   EXPIRATION_ACTION_CODE,
   MATURITY_DAYS,
   HOLD_DAYS,
   PROCESS_QUALITY_ENABLED_FLAG,
   PROCESS_EXECUTION_ENABLED_FLAG,
   PROCESS_SUPPLY_SUBINVENTORY,
   PROCESS_SUPPLY_LOCATOR_ID,
   PROCESS_YIELD_SUBINVENTORY,
   PROCESS_YIELD_LOCATOR_ID,
   HAZARDOUS_MATERIAL_FLAG,
   CAS_NUMBER
  /* End Bug 3713912 */
    )
  SELECT
    ACCEPTABLE_EARLY_DAYS,
    ACCEPTABLE_RATE_DECREASE,
    ACCEPTABLE_RATE_INCREASE,
    ACCOUNTING_RULE_ID,
    ALLOWED_UNITS_LOOKUP_CODE,
    ALLOW_EXPRESS_DELIVERY_FLAG,
    ALLOW_ITEM_DESC_UPDATE_FLAG,
    ALLOW_SUBSTITUTE_RECEIPTS_FLAG,
    ALLOW_UNORDERED_RECEIPTS_FLAG,
    ASSET_CATEGORY_ID,
    ATO_FORECAST_CONTROL,
    ATP_COMPONENTS_FLAG,
    ATP_FLAG,
    ATP_RULE_ID,
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    AUTO_CREATED_CONFIG_FLAG,
    AUTO_LOT_ALPHA_PREFIX,
    AUTO_REDUCE_MPS,
    AUTO_SERIAL_ALPHA_PREFIX,
    BASE_ITEM_ID,
    BASE_WARRANTY_SERVICE_ID,
    BOM_ENABLED_FLAG,
    BOM_ITEM_TYPE,
    BUILD_IN_WIP_FLAG,
    BUYER_ID,
    CARRYING_COST,
    CATALOG_STATUS_FLAG,
    COLLATERAL_FLAG,
    COSTING_ENABLED_FLAG,
    decode(x_master_org,X_org_id,COST_OF_SALES_ACCOUNT,X_cost_of_sales_account), -- Bug 4466566
    COVERAGE_SCHEDULE_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    CUMULATIVE_TOTAL_LEAD_TIME,
    CUM_MANUFACTURING_LEAD_TIME,
    CUSTOMER_ORDER_ENABLED_FLAG,
    CUSTOMER_ORDER_FLAG,
    CYCLE_COUNT_ENABLED_FLAG,
    DAYS_EARLY_RECEIPT_ALLOWED,
    DAYS_LATE_RECEIPT_ALLOWED,
    DEFAULT_INCLUDE_IN_ROLLUP_FLAG,
    DEFAULT_SHIPPING_ORG,
    DEMAND_TIME_FENCE_CODE,
    DEMAND_TIME_FENCE_DAYS,
    X_mfg_description,
    EFFECTIVITY_CONTROL,
    ENABLED_FLAG,
    decode(X_master_org,X_org_id,ENCUMBRANCE_ACCOUNT,X_ENCUMBRANCE_ACCOUNT),  -- Bug 4466566
    END_ASSEMBLY_PEGGING_FLAG,
    END_DATE_ACTIVE,
    ENFORCE_SHIP_TO_LOCATION_CODE,
    SYSDATE,
    X_ecn_name,
    X_eng_item_id,
    'N',
    decode(X_master_org,X_org_id,EXPENSE_ACCOUNT,X_expense_account),  -- Bug 4466566
    EXPENSE_BILLABLE_FLAG,
    FIXED_DAYS_SUPPLY,
    FIXED_LEAD_TIME,
    FIXED_LOT_MULTIPLIER,
    FIXED_ORDER_QUANTITY,
    FULL_LEAD_TIME,
    HAZARD_CLASS_ID,
    INSPECTION_REQUIRED_FLAG,
    INTERNAL_ORDER_ENABLED_FLAG,
    INTERNAL_ORDER_FLAG,
    INVENTORY_ASSET_FLAG,
    INVENTORY_ITEM_FLAG,
    X_mfg_item_id,
    INVENTORY_ITEM_STATUS_CODE,
    INVENTORY_PLANNING_CODE,
    INVOICEABLE_ITEM_FLAG,
    INVOICE_CLOSE_TOLERANCE,
    INVOICE_ENABLED_FLAG,
    INVOICING_RULE_ID,
    ITEM_CATALOG_GROUP_ID,
    ITEM_TYPE,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    LEAD_TIME_LOT_SIZE,
    LIST_PRICE_PER_UNIT,
    LOCATION_CONTROL_CODE,
    LOT_CONTROL_CODE,
    MARKET_PRICE,
    MATERIAL_BILLABLE_FLAG,
    MAXIMUM_ORDER_QUANTITY,
    MAX_MINMAX_QUANTITY,
    MAX_WARRANTY_AMOUNT,
    MINIMUM_ORDER_QUANTITY,
    MIN_MINMAX_QUANTITY,
    MODEL_CONFIG_CLAUSE_NAME,
    MRP_CALCULATE_ATP_FLAG,
    MRP_PLANNING_CODE,
    MRP_SAFETY_STOCK_CODE,
    MRP_SAFETY_STOCK_PERCENT,
    MTL_TRANSACTIONS_ENABLED_FLAG,
    MUST_USE_APPROVED_VENDOR_FLAG,
    NEGATIVE_MEASUREMENT_ERROR,
    NEW_REVISION_CODE,
    ORDER_COST,
    X_master_org,
    OUTSIDE_OPERATION_FLAG,
    OUTSIDE_OPERATION_UOM_TYPE,
    OVERRUN_PERCENTAGE,
    PAYMENT_TERMS_ID,
    PICKING_RULE_ID,
    PICK_COMPONENTS_FLAG,
    decode(x_master_org,X_org_id,PLANNER_CODE,NULL), --Bug5916866
    decode(x_master_org,X_org_id,PLANNING_EXCEPTION_SET,NULL), --Bug5916866
    PLANNING_MAKE_BUY_CODE,
    PLANNING_TIME_FENCE_CODE,
    PLANNING_TIME_FENCE_DAYS,
    POSITIVE_MEASUREMENT_ERROR,
    POSTPROCESSING_LEAD_TIME,
    PREPROCESSING_LEAD_TIME,
    PREVENTIVE_MAINTENANCE_FLAG,
    PRICE_TOLERANCE_PERCENT,
    PRIMARY_SPECIALIST_ID,
    PRIMARY_UNIT_OF_MEASURE,
    PRIMARY_UOM_CODE,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    PRORATE_SERVICE_FLAG,
    PURCHASING_ENABLED_FLAG,
    PURCHASING_ITEM_FLAG,
    QTY_RCV_EXCEPTION_CODE,
    QTY_RCV_TOLERANCE,
    RECEIPT_DAYS_EXCEPTION_CODE,
    RECEIPT_REQUIRED_FLAG,
    RECEIVE_CLOSE_TOLERANCE,
    RECEIVING_ROUTING_ID,
    RELEASE_TIME_FENCE_CODE,
    RELEASE_TIME_FENCE_DAYS,
    REPETITIVE_PLANNING_FLAG,
    REPLENISH_TO_ORDER_FLAG,
    REQUEST_ID,
    RESERVABLE_TYPE,
    RESPONSE_TIME_PERIOD_CODE,
    RESPONSE_TIME_VALUE,
    RESTRICT_LOCATORS_CODE,
    RESTRICT_SUBINVENTORIES_CODE,
    RETURNABLE_FLAG,
    RETURN_INSPECTION_REQUIREMENT,
    REVISION_QTY_CONTROL_CODE,
    RFQ_REQUIRED_FLAG,
    ROUNDING_CONTROL_TYPE,
    ROUNDING_FACTOR,
    SAFETY_STOCK_BUCKET_DAYS,
    decode(x_master_org,X_org_id,SALES_ACCOUNT,X_sales_account),  -- Bug 4466566
    SECONDARY_SPECIALIST_ID,
    X_segment1,
    X_segment10,
    X_segment11,
    X_segment12,
    X_segment13,
    X_segment14,
    X_segment15,
    X_segment16,
    X_segment17,
    X_segment18,
    X_segment19,
    X_segment2,
    X_segment20,
    X_segment3,
    X_segment4,
    X_segment5,
    X_segment6,
    X_segment7,
    X_segment8,
    X_segment9,
    SERIAL_NUMBER_CONTROL_CODE,
    SERVICEABLE_COMPONENT_FLAG,
    SERVICEABLE_ITEM_CLASS_ID,
    SERVICEABLE_PRODUCT_FLAG,
    SERVICE_DURATION,
    SERVICE_DURATION_PERIOD_CODE,
    SERVICE_ITEM_FLAG,
    SERVICE_STARTING_DELAY,
    SHELF_LIFE_CODE,
    SHELF_LIFE_DAYS,
    SHIPPABLE_ITEM_FLAG,
    SHIP_MODEL_COMPLETE_FLAG,
    SHRINKAGE_RATE,
    SOURCE_ORGANIZATION_ID,
    SOURCE_SUBINVENTORY,
    SOURCE_TYPE,
    SO_TRANSACTIONS_FLAG,
    START_AUTO_LOT_NUMBER,
    START_AUTO_SERIAL_NUMBER,
    START_DATE_ACTIVE,
    STD_LOT_SIZE,
    STOCK_ENABLED_FLAG,
    SUMMARY_FLAG,
    TAXABLE_FLAG,
    TAX_CODE,
    TIME_BILLABLE_FLAG,
    UNIT_OF_ISSUE,
    UNIT_VOLUME,
    UNIT_WEIGHT,
    UN_NUMBER_ID,
    VARIABLE_LEAD_TIME,
    VENDOR_WARRANTY_FLAG,
    VOLUME_UOM_CODE,
    WARRANTY_VENDOR_ID,
    WEIGHT_UOM_CODE,
    decode(x_master_org,X_org_id,WIP_SUPPLY_LOCATOR_ID,NULL), --Bug5916866
    decode(x_master_org,X_org_id,WIP_SUPPLY_SUBINVENTORY,NULL), --Bug5916866
    WIP_SUPPLY_TYPE,
    GLOBAL_ATTRIBUTE_CATEGORY,
    GLOBAL_ATTRIBUTE1,
    GLOBAL_ATTRIBUTE2,
    GLOBAL_ATTRIBUTE3,
    GLOBAL_ATTRIBUTE4,
    GLOBAL_ATTRIBUTE5,
    GLOBAL_ATTRIBUTE6,
    GLOBAL_ATTRIBUTE7,
    GLOBAL_ATTRIBUTE8,
    GLOBAL_ATTRIBUTE9,
    GLOBAL_ATTRIBUTE10,
    DEFAULT_SO_SOURCE_TYPE,
    CREATE_SUPPLY_FLAG  ,
    WEB_STATUS     ,
   CHECK_SHORTAGES_FLAG,
   PURCHASING_TAX_CODE,
   CONTAINER_ITEM_FLAG,
   VEHICLE_ITEM_FLAG,
   CONTAINER_TYPE_CODE,
   INTERNAL_VOLUME,
   MAXIMUM_LOAD_WEIGHT,
   MINIMUM_FILL_PERCENT,
   OVERCOMPLETION_TOLERANCE_TYPE ,
   OVERCOMPLETION_TOLERANCE_VALUE ,
   CONTRACT_ITEM_TYPE_CODE ,
   SUBSCRIPTION_DEPEND_FLAG ,
   OVER_SHIPMENT_TOLERANCE,
   UNDER_SHIPMENT_TOLERANCE,
   OVER_RETURN_TOLERANCE ,
   UNDER_RETURN_TOLERANCE ,
   EQUIPMENT_TYPE ,
   RECOVERED_PART_DISP_CODE ,
   DEFECT_TRACKING_ON_FLAG ,
   EVENT_FLAG ,
   ELECTRONIC_FLAG ,
   DOWNLOADABLE_FLAG,
   VOL_DISCOUNT_EXEMPT_FLAG ,
   COUPON_EXEMPT_FLAG ,
   COMMS_NL_TRACKABLE_FLAG ,
   ASSET_CREATION_CODE ,
   COMMS_ACTIVATION_REQD_FLAG ,
   ORDERABLE_ON_WEB_FLAG ,
   BACK_ORDERABLE_FLAG ,
   INDIVISIBLE_FLAG ,
   DIMENSION_UOM_CODE ,
   UNIT_LENGTH ,
   UNIT_WIDTH ,
   UNIT_HEIGHT ,
   BULK_PICKED_FLAG ,
   LOT_STATUS_ENABLED ,
   DEFAULT_LOT_STATUS_ID ,
   SERIAL_STATUS_ENABLED ,
   DEFAULT_SERIAL_STATUS_ID ,
   LOT_SPLIT_ENABLED ,
   LOT_MERGE_ENABLED ,
   INVENTORY_CARRY_PENALTY ,
   OPERATION_SLACK_PENALTY ,
   FINANCING_ALLOWED_FLAG ,
   EAM_ITEM_TYPE ,
   EAM_ACTIVITY_TYPE_CODE ,
   EAM_ACTIVITY_CAUSE_CODE ,
   EAM_ACT_NOTIFICATION_FLAG,
   EAM_ACT_SHUTDOWN_STATUS ,
   DUAL_UOM_CONTROL ,
   SECONDARY_UOM_CODE,
   DUAL_UOM_DEVIATION_HIGH ,
   DUAL_UOM_DEVIATION_LOW ,
   SERV_REQ_ENABLED_CODE ,
   SERV_BILLING_ENABLED_FLAG ,
   SERV_IMPORTANCE_LEVEL ,
   PLANNED_INV_POINT_FLAG ,
   LOT_TRANSLATE_ENABLED ,
   SUBSTITUTION_WINDOW_CODE ,
   SUBSTITUTION_WINDOW_DAYS ,
   IB_ITEM_INSTANCE_CLASS ,
   CONFIG_MODEL_TYPE ,
   LOT_SUBSTITUTION_ENABLED ,
   MINIMUM_LICENSE_QUANTITY ,
   EAM_ACTIVITY_SOURCE_CODE   ,
   CURRENT_PHASE_ID  ,
   LIFECYCLE_ID ,
   PRODUCT_FAMILY_ITEM_ID,
   USAGE_ITEM_FLAG,
   TRACKING_QUANTITY_IND,
   ONT_PRICING_QTY_SOURCE,
   CONSIGNED_FLAG,
   ASN_AUTOEXPIRE_FLAG,
   VMI_FORECAST_TYPE,
   EXCLUDE_FROM_BUDGET_FLAG,
   DRP_PLANNED_FLAG,
   CRITICAL_COMPONENT_FLAG,
   CONTINOUS_TRANSFER,
   CONVERGENCE,
   DIVERGENCE,
   APPROVAL_STATUS
   /* Start Bug 3713912 */
  ,SECONDARY_DEFAULT_IND,
   ATTRIBUTE16,
   ATTRIBUTE17,
   ATTRIBUTE18,
   ATTRIBUTE19,
   ATTRIBUTE20,
   ATTRIBUTE21,
   ATTRIBUTE22,
   ATTRIBUTE23,
   ATTRIBUTE24,
   ATTRIBUTE25,
   ATTRIBUTE26,
   ATTRIBUTE27,
   ATTRIBUTE28,
   ATTRIBUTE29,
   ATTRIBUTE30,
   LOT_DIVISIBLE_FLAG,
   GRADE_CONTROL_FLAG,
   DEFAULT_GRADE,
   CHILD_LOT_FLAG,
   PARENT_CHILD_GENERATION_FLAG,
   CHILD_LOT_PREFIX,
   CHILD_LOT_STARTING_NUMBER,
   CHILD_LOT_VALIDATION_FLAG,
   COPY_LOT_ATTRIBUTE_FLAG,
   RECIPE_ENABLED_FLAG,
   PROCESS_COSTING_ENABLED_FLAG,
   RETEST_INTERVAL,
   EXPIRATION_ACTION_INTERVAL,
   EXPIRATION_ACTION_CODE,
   MATURITY_DAYS,
   HOLD_DAYS,
   PROCESS_QUALITY_ENABLED_FLAG,
   PROCESS_EXECUTION_ENABLED_FLAG,
   PROCESS_SUPPLY_SUBINVENTORY,
   PROCESS_SUPPLY_LOCATOR_ID,
   PROCESS_YIELD_SUBINVENTORY,
   PROCESS_YIELD_LOCATOR_ID,
   HAZARDOUS_MATERIAL_FLAG,
   CAS_NUMBER
  /* End Bug 3713912 */

  FROM MTL_SYSTEM_ITEMS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

  /* Select Statement to fetch Long_Descrition -Bug 7591561 */
    SELECT  long_description
    INTO  X_long_description
    FROM  MTL_SYSTEM_ITEMS_TL
    WHERE  INVENTORY_ITEM_ID = X_eng_item_id
    AND  ORGANIZATION_ID = X_org_id
    AND  LANGUAGE=userenv('LANG');
  /* End Bug 7591561 */

 insert into MTL_SYSTEM_ITEMS_TL (
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    LANGUAGE,
    SOURCE_LANG,
    DESCRIPTION,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    long_description  /* Bug 7591561 */

  ) select
    X_mfg_item_id,
    X_master_org,
    L.LANGUAGE_CODE,
    userenv('LANG'),
    X_mfg_description,
    sysdate,
    to_number(Fnd_Profile.Value('USER_ID')),
    sysdate,
    to_number(Fnd_Profile.Value('USER_ID')),
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_long_description /* Bug 7591561 */

  from  FND_LANGUAGES  L
  where  L.INSTALLED_FLAG in ('I', 'B')
    and  not exists
         ( select NULL
           from  MTL_SYSTEM_ITEMS_TL  T
           where  T.INVENTORY_ITEM_ID = X_mfg_item_id
             and  T.ORGANIZATION_ID = X_master_org
             and  T.LANGUAGE = L.LANGUAGE_CODE );
EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_SYSTEM_ITEMS',
                                         stmt_num => 1002,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_SYSTEM_ITEMS;

PROCEDURE C_MTL_ITEM_CATEGORIES (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id			IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN
  INSERT INTO MTL_ITEM_CATEGORIES(
    CATEGORY_ID,
    CATEGORY_SET_ID,
    CREATED_BY,
    CREATION_DATE,
    INVENTORY_ITEM_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ORGANIZATION_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID)
  SELECT
    CATEGORY_ID,
    CATEGORY_SET_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    X_mfg_item_id,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_master_org,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID
  FROM MTL_ITEM_CATEGORIES
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_ITEM_CATEGORIES',
                                         stmt_num => 1003,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_ITEM_CATEGORIES;

PROCEDURE C_MTL_DESCR_ELEMENT_VALUES (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id			IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO MTL_DESCR_ELEMENT_VALUES(
    CREATED_BY,
    CREATION_DATE,
    DEFAULT_ELEMENT_FLAG,
    ELEMENT_NAME,
    ELEMENT_SEQUENCE,
    ELEMENT_VALUE,
    INVENTORY_ITEM_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID)
  SELECT
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    DEFAULT_ELEMENT_FLAG,
    ELEMENT_NAME,
    ELEMENT_SEQUENCE,
    ELEMENT_VALUE,
    X_mfg_item_id,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID
  FROM MTL_DESCR_ELEMENT_VALUES
  WHERE INVENTORY_ITEM_ID = X_eng_item_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_DESCR_ELEMENT_VALUES',
                                         stmt_num => 1004,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_DESCR_ELEMENT_VALUES;

PROCEDURE C_MTL_RELATED_ITEMS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO MTL_RELATED_ITEMS(
    CREATED_BY,
    CREATION_DATE,
    INVENTORY_ITEM_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ORGANIZATION_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    RECIPROCAL_FLAG,
    RELATED_ITEM_ID,
    RELATIONSHIP_TYPE_ID,
    REQUEST_ID)
  SELECT
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    X_mfg_item_id,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_master_org,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    RECIPROCAL_FLAG,
    RELATED_ITEM_ID,
    RELATIONSHIP_TYPE_ID,
    REQUEST_ID
  FROM MTL_RELATED_ITEMS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_RELATED_ITEMS',
                                         stmt_num => 1005,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_RELATED_ITEMS;

PROCEDURE C_CST_ITEM_COSTS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO CST_ITEM_COSTS(
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    BASED_ON_ROLLUP_FLAG,
    BURDEN_COST,
    COST_TYPE_ID,
    COST_UPDATE_ID,
    CREATED_BY,
    CREATION_DATE,
    DEFAULTED_FLAG,
    INVENTORY_ASSET_FLAG,
    INVENTORY_ITEM_ID,
    ITEM_COST,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LOT_SIZE,
    MATERIAL_COST,
    MATERIAL_OVERHEAD_COST,
    ORGANIZATION_ID,
    OUTSIDE_PROCESSING_COST,
    OVERHEAD_COST,
    PL_ITEM_COST,
    PL_MATERIAL,
    PL_MATERIAL_OVERHEAD,
    PL_OUTSIDE_PROCESSING,
    PL_OVERHEAD,
    PL_RESOURCE,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    RESOURCE_COST,
    SHRINKAGE_RATE,
    TL_ITEM_COST,
    TL_MATERIAL,
    TL_MATERIAL_OVERHEAD,
    TL_OUTSIDE_PROCESSING,
    TL_OVERHEAD,
    TL_RESOURCE,
    UNBURDENED_COST)
  SELECT
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    BASED_ON_ROLLUP_FLAG,
    BURDEN_COST,
    COST_TYPE_ID,
    COST_UPDATE_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    DEFAULTED_FLAG,
    INVENTORY_ASSET_FLAG,
    X_mfg_item_id,
    ITEM_COST,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    LOT_SIZE,
    MATERIAL_COST,
    MATERIAL_OVERHEAD_COST,
    X_master_org,
    OUTSIDE_PROCESSING_COST,
    OVERHEAD_COST,
    PL_ITEM_COST,
    PL_MATERIAL,
    PL_MATERIAL_OVERHEAD,
    PL_OUTSIDE_PROCESSING,
    PL_OVERHEAD,
    PL_RESOURCE,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    RESOURCE_COST,
    SHRINKAGE_RATE,
    TL_ITEM_COST,
    TL_MATERIAL,
    TL_MATERIAL_OVERHEAD,
    TL_OUTSIDE_PROCESSING,
    TL_OVERHEAD,
    TL_RESOURCE,
    UNBURDENED_COST
  FROM CST_ITEM_COSTS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_CST_ITEM_COSTS',
                                         stmt_num => 1006,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_CST_ITEM_COSTS;

PROCEDURE C_CST_ITEM_COST_DETAILS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO CST_ITEM_COST_DETAILS(
    ACTIVITY_CONTEXT,
    ACTIVITY_ID,
    ACTIVITY_UNITS,
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    BASIS_FACTOR,
    BASIS_RESOURCE_ID,
    BASIS_TYPE,
    COST_ELEMENT_ID,
    COST_TYPE_ID,
    CREATED_BY,
    CREATION_DATE,
    DEPARTMENT_ID,
    INVENTORY_ITEM_ID,
    ITEM_COST,
    ITEM_UNITS,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LEVEL_TYPE,
    NET_YIELD_OR_SHRINKAGE_FACTOR,
    OPERATION_SEQUENCE_ID,
    OPERATION_SEQ_NUM,
    ORGANIZATION_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    RESOURCE_ID,
    RESOURCE_RATE,
    RESOURCE_SEQ_NUM,
    ROLLUP_SOURCE_TYPE,
    USAGE_RATE_OR_AMOUNT)
  SELECT
    ACTIVITY_CONTEXT,
    ACTIVITY_ID,
    ACTIVITY_UNITS,
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    BASIS_FACTOR,
    BASIS_RESOURCE_ID,
    BASIS_TYPE,
    COST_ELEMENT_ID,
    COST_TYPE_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    DEPARTMENT_ID,
    X_mfg_item_id,
    ITEM_COST,
    ITEM_UNITS,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    LEVEL_TYPE,
    NET_YIELD_OR_SHRINKAGE_FACTOR,
    OPERATION_SEQUENCE_ID,
    OPERATION_SEQ_NUM,
    X_master_org,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    RESOURCE_ID,
    RESOURCE_RATE,
    RESOURCE_SEQ_NUM,
    ROLLUP_SOURCE_TYPE,
    USAGE_RATE_OR_AMOUNT
  FROM CST_ITEM_COST_DETAILS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_CST_ITEM_COST_DETAILS',
                                         stmt_num => 1007,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_CST_ITEM_COST_DETAILS;

PROCEDURE C_MTL_ITEM_SUB_INVENTORIES (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO MTL_ITEM_SUB_INVENTORIES(
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    CREATED_BY,
    CREATION_DATE,
    ENCUMBRANCE_ACCOUNT,
    FIXED_LOT_MULTIPLE,
    INVENTORY_ITEM_ID,
    INVENTORY_PLANNING_CODE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    MAXIMUM_ORDER_QUANTITY,
    MAX_MINMAX_QUANTITY,
    MINIMUM_ORDER_QUANTITY,
    MIN_MINMAX_QUANTITY,
    ORGANIZATION_ID,
    PICKING_ORDER,
    POSTPROCESSING_LEAD_TIME,
    PREPROCESSING_LEAD_TIME,
    PRIMARY_SUBINVENTORY_FLAG,
    PROCESSING_LEAD_TIME,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    SECONDARY_INVENTORY,
    SOURCE_ORGANIZATION_ID,
    SOURCE_SUBINVENTORY,
    SOURCE_TYPE)
  SELECT
    ATTRIBUTE1,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE_CATEGORY,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    ENCUMBRANCE_ACCOUNT,
    FIXED_LOT_MULTIPLE,
    X_mfg_item_id,
    INVENTORY_PLANNING_CODE,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    MAXIMUM_ORDER_QUANTITY,
    MAX_MINMAX_QUANTITY,
    MINIMUM_ORDER_QUANTITY,
    MIN_MINMAX_QUANTITY,
    X_master_org,
    PICKING_ORDER,
    POSTPROCESSING_LEAD_TIME,
    PREPROCESSING_LEAD_TIME,
    PRIMARY_SUBINVENTORY_FLAG,
    PROCESSING_LEAD_TIME,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    SECONDARY_INVENTORY,
    SOURCE_ORGANIZATION_ID,
    SOURCE_SUBINVENTORY,
    SOURCE_TYPE
  FROM MTL_ITEM_SUB_INVENTORIES
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_master_org;-- Bug:3264573 X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_ITEM_SUB_INVENTORIES',
                                         stmt_num => 1008,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_ITEM_SUB_INVENTORIES;

PROCEDURE C_MTL_SECONDARY_LOCATORS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO MTL_SECONDARY_LOCATORS(
    CREATED_BY,
    CREATION_DATE,
    INVENTORY_ITEM_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ORGANIZATION_ID,
    PICKING_ORDER,
    PRIMARY_LOCATOR_FLAG,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    SECONDARY_LOCATOR,
    SUBINVENTORY_CODE,
    STATUS_ID,
    MAXIMUM_QUANTITY)
  SELECT
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    X_mfg_item_id,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_master_org,
    PICKING_ORDER,
    PRIMARY_LOCATOR_FLAG,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    SECONDARY_LOCATOR,-- Bug:3264573 All the new missing columns added
    SUBINVENTORY_CODE,
    STATUS_ID,
    MAXIMUM_QUANTITY
  FROM MTL_SECONDARY_LOCATORS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_master_org; --Bug:3264573 X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_SECONDARY_LOCATORS',
                                         stmt_num => 1009,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_SECONDARY_LOCATORS;

PROCEDURE C_MTL_CROSS_REFERENCES (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
/*	Bug : 4466566 We have to use the MTL_CROSS_REFERENCES_PKG.INSERT_ROW API for inserting data */
	CURSOR CUR_MTL_CROSS_REF IS
		SELECT
			SOURCE_SYSTEM_ID,
			START_DATE_ACTIVE,
			END_DATE_ACTIVE,
			OBJECT_VERSION_NUMBER,
			UOM_CODE,
			REVISION_ID,
			EPC_GTIN_SERIAL,
			INVENTORY_ITEM_ID,
			ORGANIZATION_ID,
			CROSS_REFERENCE_TYPE,
			CROSS_REFERENCE,
			ORG_INDEPENDENT_FLAG,
			REQUEST_ID,
			ATTRIBUTE1,
			ATTRIBUTE2,
			ATTRIBUTE3,
			ATTRIBUTE4,
			ATTRIBUTE5,
			ATTRIBUTE6,
			ATTRIBUTE7,
			ATTRIBUTE8,
			ATTRIBUTE9,
			ATTRIBUTE10,
			ATTRIBUTE11,
			ATTRIBUTE12,
			ATTRIBUTE13,
			ATTRIBUTE14,
			ATTRIBUTE15,
			ATTRIBUTE_CATEGORY,
			DESCRIPTION,
			CREATION_DATE,
			CREATED_BY,
			LAST_UPDATE_DATE,
			LAST_UPDATED_BY,
			LAST_UPDATE_LOGIN,
			PROGRAM_APPLICATION_ID,
			PROGRAM_ID,
			PROGRAM_UPDATE_DATE
		  FROM MTL_CROSS_REFERENCES_VL
		  WHERE INVENTORY_ITEM_ID = X_eng_item_id
		  AND ORGANIZATION_ID = X_org_id;

	cross_ref_cursor CUR_MTL_CROSS_REF%ROWTYPE;
	x_cross_ref_id NUMBER;
BEGIN
	FOR cross_ref_cursor in CUR_MTL_CROSS_REF LOOP
		MTL_CROSS_REFERENCES_PKG.INSERT_ROW (
			 P_SOURCE_SYSTEM_ID			=>	cross_ref_cursor.SOURCE_SYSTEM_ID
			,P_START_DATE_ACTIVE		=>	cross_ref_cursor.START_DATE_ACTIVE
			,P_END_DATE_ACTIVE			=>	cross_ref_cursor.END_DATE_ACTIVE
			,P_OBJECT_VERSION_NUMBER		=>	cross_ref_cursor.OBJECT_VERSION_NUMBER
			,P_UOM_CODE				=>	cross_ref_cursor.UOM_CODE
			,P_REVISION_ID				=>	cross_ref_cursor.REVISION_ID
			,P_EPC_GTIN_SERIAL			=>	cross_ref_cursor.EPC_GTIN_SERIAL
			,P_INVENTORY_ITEM_ID		=>	cross_ref_cursor.INVENTORY_ITEM_ID
			,P_ORGANIZATION_ID			=>	cross_ref_cursor.ORGANIZATION_ID
			,P_CROSS_REFERENCE_TYPE		=>	cross_ref_cursor.CROSS_REFERENCE_TYPE
			,P_CROSS_REFERENCE			=>	cross_ref_cursor.CROSS_REFERENCE
			,P_ORG_INDEPENDENT_FLAG		=>	cross_ref_cursor.ORG_INDEPENDENT_FLAG
			,P_REQUEST_ID				=>	cross_ref_cursor.REQUEST_ID
			,P_ATTRIBUTE1				=>	cross_ref_cursor.ATTRIBUTE1
			,P_ATTRIBUTE2				=>	cross_ref_cursor.ATTRIBUTE2
			,P_ATTRIBUTE3				=>	cross_ref_cursor.ATTRIBUTE3
			,P_ATTRIBUTE4				=>	cross_ref_cursor.ATTRIBUTE4
			,P_ATTRIBUTE5				=>	cross_ref_cursor.ATTRIBUTE5
			,P_ATTRIBUTE6				=>	cross_ref_cursor.ATTRIBUTE6
			,P_ATTRIBUTE7				=>	cross_ref_cursor.ATTRIBUTE7
			,P_ATTRIBUTE8				=>	cross_ref_cursor.ATTRIBUTE8
			,P_ATTRIBUTE9				=>	cross_ref_cursor.ATTRIBUTE9
			,P_ATTRIBUTE10				=>	cross_ref_cursor.ATTRIBUTE10
			,P_ATTRIBUTE11				=>	cross_ref_cursor.ATTRIBUTE11
			,P_ATTRIBUTE12				=>	cross_ref_cursor.ATTRIBUTE12
			,P_ATTRIBUTE13				=>	cross_ref_cursor.ATTRIBUTE13
			,P_ATTRIBUTE14				=>	cross_ref_cursor.ATTRIBUTE14
			,P_ATTRIBUTE15				=>	cross_ref_cursor.ATTRIBUTE15
			,P_ATTRIBUTE_CATEGORY		=>	cross_ref_cursor.ATTRIBUTE_CATEGORY
			,P_DESCRIPTION				=>	cross_ref_cursor.DESCRIPTION
			,P_CREATION_DATE			=>	cross_ref_cursor.CREATION_DATE
			,P_CREATED_BY				=>	cross_ref_cursor.CREATED_BY
			,P_LAST_UPDATE_DATE			=>	cross_ref_cursor.LAST_UPDATE_DATE
			,P_LAST_UPDATED_BY			=>	cross_ref_cursor.LAST_UPDATED_BY
			,P_LAST_UPDATE_LOGIN		=>	cross_ref_cursor.LAST_UPDATE_LOGIN
			,P_PROGRAM_APPLICATION_ID	=>	cross_ref_cursor.PROGRAM_APPLICATION_ID
			,P_PROGRAM_ID				=>	cross_ref_cursor.PROGRAM_ID
			,P_PROGRAM_UPDATE_DATE		=>	cross_ref_cursor.PROGRAM_UPDATE_DATE
			,X_CROSS_REFERENCE_ID		=>	x_cross_ref_id
		);
	END LOOP;
/*	End Bug : 4466566 */
END C_MTL_CROSS_REFERENCES;

PROCEDURE C_MTL_PENDING_ITEM_STATUS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO MTL_PENDING_ITEM_STATUS(
    CREATED_BY,
    CREATION_DATE,
    EFFECTIVE_DATE,
    IMPLEMENTED_DATE,
    INVENTORY_ITEM_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ORGANIZATION_ID,
    PENDING_FLAG,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    STATUS_CODE)
  SELECT
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    EFFECTIVE_DATE,
    IMPLEMENTED_DATE,
    X_mfg_item_id,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_master_org,
    PENDING_FLAG,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    STATUS_CODE
  FROM MTL_PENDING_ITEM_STATUS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_MTL_PENDING_ITEM_STATUS',
                                         stmt_num => 1011,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_MTL_PENDING_ITEM_STATUS;

PROCEDURE C_CST_STANDARD_COSTS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id                 IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO CST_STANDARD_COSTS(
    COST_UPDATE_ID,
    CREATED_BY,
    CREATION_DATE,
    INTRANSIT_ADJUSTMENT_QUANTITY,
    INTRANSIT_ADJUSTMENT_VALUE,
    INVENTORY_ADJUSTMENT_QUANTITY,
    INVENTORY_ADJUSTMENT_VALUE,
    INVENTORY_ITEM_ID,
    LAST_COST_UPDATE_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ORGANIZATION_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    STANDARD_COST,
    STANDARD_COST_REVISION_DATE,
    WIP_ADJUSTMENT_QUANTITY,
    WIP_ADJUSTMENT_VALUE)
  SELECT
    COST_UPDATE_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    INTRANSIT_ADJUSTMENT_QUANTITY,
    INTRANSIT_ADJUSTMENT_VALUE,
    INVENTORY_ADJUSTMENT_QUANTITY,
    INVENTORY_ADJUSTMENT_VALUE,
    X_mfg_item_id,
    LAST_COST_UPDATE_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_master_org,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    STANDARD_COST,
    STANDARD_COST_REVISION_DATE,
    WIP_ADJUSTMENT_QUANTITY,
    WIP_ADJUSTMENT_VALUE
  FROM CST_STANDARD_COSTS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_CST_STANDARD_COSTS',
                                         stmt_num => 1012,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_CST_STANDARD_COSTS;

PROCEDURE C_CST_ELEMENTAL_COSTS (
X_org_id			IN NUMBER,
X_master_org			IN NUMBER,
X_eng_item_id			IN NUMBER,
X_mfg_item_id			IN NUMBER,
X_last_login_id			IN NUMBER,
X_mfg_description		IN VARCHAR2,
X_ecn_name			IN VARCHAR2
)
IS
BEGIN

  INSERT INTO CST_ELEMENTAL_COSTS(
    COST_ELEMENT_ID,
    COST_UPDATE_ID,
    CREATED_BY,
    CREATION_DATE,
    INVENTORY_ITEM_ID,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ORGANIZATION_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    STANDARD_COST)
  SELECT
    COST_ELEMENT_ID,
    COST_UPDATE_ID,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    X_mfg_item_id,
    to_number(Fnd_Profile.Value('USER_ID')),
    SYSDATE,
    to_number(Fnd_Profile.Value('LOGIN_ID')),
    X_master_org,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    REQUEST_ID,
    STANDARD_COST
  FROM CST_ELEMENTAL_COSTS
  WHERE INVENTORY_ITEM_ID = X_eng_item_id
  AND ORGANIZATION_ID = X_org_id;

EXCEPTION
  WHEN OTHERS THEN
    ENG_BOM_RTG_TRANSFER_PKG.RAISE_ERROR(func_name => 'C_CST_ELEMENTAL_COSTS',
                                         stmt_num => 1013,
                                         message_name => 'ENG_ENUBRT_ERROR',
                                         token => SQLERRM);

END C_CST_ELEMENTAL_COSTS;

END ENG_COPY_TABLE_ROWS_PKG;


/
