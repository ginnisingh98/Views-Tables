--------------------------------------------------------
--  DDL for Package Body PA_PACCGLTR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PACCGLTR_XMLP_PKG" AS
/* $Header: PACCGLTRB.pls 120.0 2008/01/02 10:53:10 krreddy noship $ */
  FUNCTION CF_ACCOUNT_IDFORMULA(ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN FND_FLEX_EXT.GET_SEGS('SQLGL'
                                ,'GL#'
                                ,P_COA_ID
                                ,ACCOUNT_ID);
  END CF_ACCOUNT_IDFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      V_DUMMY NUMBER;
      V_COMPANY_NAME VARCHAR2(200);
      NDF VARCHAR2(80);
      V_PROCESS_MODE VARCHAR2(20) := 'REPORT';
      X_RETCODE VARCHAR2(630) := NULL;
      X_ERRBUF VARCHAR2(630);
      NUMBER_OF_MESSAGES NUMBER;
      MESSAGE_BUF VARCHAR2(2000);
      V_CHART_OF_ACCOUNT_ID NUMBER;
      INIT_FAILURE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      P_END_GL_DATE_1:=to_char(P_END_GL_DATE,'DD-MON-YY');
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF NOT GET_COMPANY_NAME_CHART_OF_ACCT THEN
        RAISE INIT_FAILURE;
      END IF;
      IF P_PROCESS_CATEGORY = 'BORROWED_LENT' THEN
        P_GL_CATEGORY := 'BL';
      ELSIF P_PROCESS_CATEGORY = 'PROVIDER_COST_RECLASS' THEN
        P_GL_CATEGORY := 'PC';
      END IF;
      PA_CC_GL_TRANS_CCDS.TRANSFER_CCDS_TO_GL(P_GL_CATEGORY
                                             ,P_EXPENDITURE_BATCH
                                             ,P_START_PROJECT_NUMBER
                                             ,P_END_PROJECT_NUMBER
                                             ,P_END_GL_DATE
                                             ,P_DEBUG_MODE
                                             ,X_RETCODE
                                             ,X_ERRBUF);
      IF (X_RETCODE <> '0') THEN
        /*SRW.MESSAGE('101'
                   ,X_ERRBUF)*/NULL;
        NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
        /*SRW.MESSAGE(1
                   ,'Debug Messages:')*/NULL;
        FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
          PA_DEBUG.GET_MESSAGE(I
                              ,MESSAGE_BUF);
          /*SRW.MESSAGE(1
                     ,MESSAGE_BUF)*/NULL;
        END LOOP;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        CP_NODATAFOUND := NDF;
      WHEN INIT_FAILURE THEN
        /*SRW.MESSAGE('102'
                   ,'Unable to get the Title')*/NULL;
      WHEN OTHERS THEN
        X_RETCODE := SQLCODE;
        X_ERRBUF := SQLERRM;
        /*SRW.MESSAGE('101'
                   ,SUBSTR(X_ERRBUF
                         ,1
                         ,100))*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_ACCOUNT_ID2FORMULA(ACCOUNT_ID2 IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN FND_FLEX_EXT.GET_SEGS('SQLGL'
                                ,'GL#'
                                ,P_COA_ID
                                ,ACCOUNT_ID2);
  END CF_ACCOUNT_ID2FORMULA;

  FUNCTION EXCEPTION_EXIST RETURN VARCHAR2 IS
    EXCEP varchar2(10);
  BEGIN
    SELECT
      'Y'
    INTO EXCEP
    FROM
      DUAL
    WHERE exists (
      SELECT
        'yes'
      FROM
        PA_CC_DIST_LINES
      WHERE TRANSFER_STATUS_CODE = 'R'
        AND REQUEST_ID = FND_GLOBAL.CONC_REQUEST_ID );
    RETURN EXCEP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
        EXCEP := 'N';
      RETURN EXCEP;
  END EXCEPTION_EXIST;

  FUNCTION SUCCESS_EXIST RETURN VARCHAR2 IS
    SUCCESS varchar2(10);
  BEGIN
    SELECT
      'Y'
    INTO SUCCESS
    FROM
      DUAL
    WHERE exists (
      SELECT
        'yes'
      FROM
        PA_CC_DIST_LINES
      WHERE TRANSFER_STATUS_CODE = 'A'
        AND REQUEST_ID = FND_GLOBAL.CONC_REQUEST_ID );
    RETURN SUCCESS;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SUCCESS := 'N';
      RETURN SUCCESS;
  END SUCCESS_EXIST;

  FUNCTION GET_COMPANY_NAME_CHART_OF_ACCT RETURN BOOLEAN IS
    V_DUMMY NUMBER;
    V_COMPANY_NAME VARCHAR2(200);
  BEGIN
    SELECT
      GLB.CHART_OF_ACCOUNTS_ID,
      GLB.NAME
    INTO V_DUMMY,V_COMPANY_NAME
    FROM
      GL_SETS_OF_BOOKS GLB,
      PA_IMPLEMENTATIONS IMP
    WHERE GLB.SET_OF_BOOKS_ID = IMP.SET_OF_BOOKS_ID;
    P_COA_ID := V_DUMMY;
    CP_COMPANY_NAME := V_COMPANY_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME_CHART_OF_ACCT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_CURRENCY_CODEFORMULA RETURN VARCHAR2 IS
    L_CURR_CODE GL_SETS_OF_BOOKS.CURRENCY_CODE%TYPE;
  BEGIN
    RETURN (PA_MULTI_CURRENCY.GET_ACCT_CURRENCY_CODE);
  END CF_CURRENCY_CODEFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COMPANY_NAME;
  END CP_COMPANY_NAME_P;

  FUNCTION CP_NODATAFOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NODATAFOUND;
  END CP_NODATAFOUND_P;

END PA_PACCGLTR_XMLP_PKG;


/
