--------------------------------------------------------
--  DDL for Package Body AMS_LISTIMPORT_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AMS_LISTIMPORT_PVT" AS
/* $Header: amsvimlb.pls 120.10.12010000.4 2009/11/30 05:20:59 hbandi ship $ */

-----------------------------------------------------------

-- PACKAGE
--   AMS_ListImport_PVT
--
-- PURPOSE
--   This purpose of this program is to create organization,person
--   ,party relationship, org contacts, locations , party sites,
--   email and phone records for B2B or B2C type customer's
--
-- 	Call TCA API's to create the records in HZ schema.
--
--
--	 For B2B creates the following  using TCA API's
--
--		 1. 	Create organization
--		 2. 	Create Person
--		 3. 	Create Party Relation
--		 4. 	Create Party for Party Relationship
--		 5. 	Create Org contact
--		 6. 	Create Location (if address is available)
--		 7. 	Create Party Site (if address  is available)
--		 8. 	Create Contact Points (if contact points are available)
--
--
--	 For B2C creates the following  using TCA API's
--
--		1. 	Create Person
--		2. 	Create Location (if address is available)
--		3. 	Create Party Site (if address  is available)
--		4. 	Create Contact Points (if contact points are available)
--
-- PROCEDURES
--       list_import_to_hz
--
-- PARAMETERS
--           INPUT
--               p_import_list_header_id NUMBER.
--
--           OUTPUT
--              Errbuf                  VARCHAR2 -- Conc Pgm Error mesgs.
--              RetCode                 VARCHAR2 -- Conc Pgm Error Code.
--                                      0 - Success, 2 - Failure.
--
-- HISTORY amsvimlb.pls
-- 19-Mar-2001 usingh      Created.
-- ---------------------------------------------------------
G_ARC_IMPORT_HEADER  CONSTANT VARCHAR2(30) := 'IMPH';
g_pkg_name  CONSTANT VARCHAR2(30):='AMS_LISTIMPORT_PVT';
g_prof VARCHAR2(50) := fnd_profile.value('HZ_EXECUTE_API_CALLOUTS');
--
-- This program processes the xml data.
--
AMS_DEBUG_HIGH_ON boolean := FND_MSG_PUB.CHECK_MSG_LEVEL(FND_MSG_PUB.G_MSG_LVL_DEBUG_HIGH);
AMS_DEBUG_LOW_ON boolean := FND_MSG_PUB.CHECK_MSG_LEVEL(FND_MSG_PUB.G_MSG_LVL_DEBUG_LOW);
AMS_DEBUG_MEDIUM_ON boolean := FND_MSG_PUB.CHECK_MSG_LEVEL(FND_MSG_PUB.G_MSG_LVL_DEBUG_MEDIUM);

-- SOLIN, Bug 3792806
-- Using binded variables to replace literals.
G_STATUS_SUCCESS   CONSTANT VARCHAR2(30) := 'SUCCESS';
G_STATUS_DUPLICATE CONSTANT VARCHAR2(30) := 'DUPLICATE';
G_STATUS_ERROR     CONSTANT VARCHAR2(30) := 'ERROR';
G_STATUS_RELOAD    CONSTANT VARCHAR2(30) := 'RELOAD';
-- SOLIN, end

PROCEDURE Process_b2b_xml_data (
    p_import_list_header_id    IN    NUMBER,
    p_xml_element_id		IN    NUMBER,
    p_cust_tbl                  IN OUT NOCOPY   cust_data_in_tbl,
    x_return_status             OUT NOCOPY   VARCHAR2,
    x_msg_data                  OUT NOCOPY   VARCHAR2
);

--
-- This program processes the xml data.
--
PROCEDURE Process_b2c_xml_data (
    p_import_list_header_id    IN    NUMBER,
    p_xml_element_id            IN    NUMBER,
    p_cust_tbl                  IN OUT NOCOPY   cust_b2c_data_in_tbl,
    x_return_status             OUT NOCOPY   VARCHAR2,
    x_msg_data                  OUT NOCOPY   VARCHAR2
);

--
-- This program populates the ams_imp-source_lines table.
--
Procedure      Create_b2b_src_lines(
                p_import_list_header_id   IN number,
                p_cust_b2b_tbl            in cust_data_in_tbl,
                x_return_status           OUT NOCOPY varchar2,
                x_msg_data                OUT NOCOPY varchar2) ;

--
-- This program populates the ams_imp-source_lines table.
--
Procedure      Create_b2c_src_lines(
                p_import_list_header_id   IN number,
                p_cust_b2c_tbl            in cust_b2c_data_in_tbl,
                x_return_status           OUT NOCOPY varchar2,
                x_msg_data                OUT NOCOPY varchar2) ;

--
-- This procedure validates the date column.
--

procedure date_validate (
   p_import_list_header_id    IN    NUMBER,
   p_import_source_line_id    IN    NUMBER,
   p_batch_id			IN    NUMBER,
   p_column1		      IN    VARCHAR2,
   p_column2		      IN    VARCHAR2,
   p_column3		      IN    VARCHAR2,
   p_column4		      IN    VARCHAR2,
   p_column5		      IN    VARCHAR2,
   p_column6		      IN    VARCHAR2
			);
--
-- This procedure generates the status of import
--
--
PROCEDURE process_status_code (
   p_import_list_header_id    IN    NUMBER
                            );

--
-- This procedure is used to capture lead errors.
--
--
PROCEDURE capture_lead_error(
   p_import_list_header_id    IN    NUMBER
                            );

--
-- for XML updates the error in the element table
--
PROCEDURE update_xml_error_text (
   				 p_import_list_header_id    IN    NUMBER,
                                 p_import_type        IN varchar2);


--
-- This procedure creates list notes from import
--
--
PROCEDURE create_list_note
        (  p_import_list_header_id in number,
           p_import_source_line_id in number,
           p_party_id             in number,
           p_source_object_code   in varchar2,
           p_note_text            in varchar2,
           x_return_status         OUT NOCOPY    VARCHAR2,
           x_msg_count             OUT NOCOPY    NUMBER,
           x_msg_data              OUT NOCOPY    VARCHAR2
        );


--
-- This procedure is used to update the status for b2b/b2c import.
--
--
PROCEDURE update_cust_import_status(
   p_import_list_header_id    IN    NUMBER
                            );

--
-- This procedure is updates the records with request_id ordered by party_name
--
--
PROCEDURE org_party_update(
   p_import_list_header_id IN    NUMBER,
   p_request_id		   IN    NUMBER,
   p_batch_size		   IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for organization
--
--
PROCEDURE org_existence_checking(
   p_import_list_header_id IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for organization with orig system reference
--
--
PROCEDURE org_existence_checking_osr(
   p_import_list_header_id IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for Person
--
--
PROCEDURE per_existence_checking(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );
--
-- This procedure is used for existence checking for Person with osr
--
--
PROCEDURE per_existence_checking_osr(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );
--
-- This procedure is used for existence checking for organization contacts
--
--
PROCEDURE org_cont_existence_checking(
   p_import_list_header_id IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for organization contacts with osr
--
--
PROCEDURE org_cont_existence_chk_osr(
   p_import_list_header_id IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for organization address
--
--
PROCEDURE org_address_existence_checking(
   p_import_list_header_id IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for organization address
--
--
PROCEDURE org_address1_exist_checking(
   p_import_list_header_id IN    NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

--
-- This procedure is used for existence checking for person address
--
--
PROCEDURE per_address_existence_checking(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );


--
-- This procedure is updates the records with transposed phone number.
--
--
PROCEDURE gen_transposed_phone_number(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       );

-- *********************************************************
--
-- This function returns the value for the element.
--
FUNCTION  Get_Element_VALUE (p_column_name IN VARCHAR2,
                             p_search_tbl  IN AMS_IMPORT_XML_PVT.xml_element_set_type)
RETURN  VARCHAR2
IS
x_element_id   NUMBER;
x_value        VARCHAR2(2000) := null;
BEGIN
     for i in 1..p_search_tbl.COUNT loop

        if (p_search_tbl(i).column_name = p_column_name) then
              x_value      :=  p_search_tbl(i).data;
              exit;
        end if;
     end loop;
    RETURN (x_value);
END  Get_Element_VALUE;


--
-- This function returns the id for the element.
--
FUNCTION  Get_Element_ID (p_column_name IN VARCHAR2,
                             p_search_tbl  IN AMS_IMPORT_XML_PVT.xml_element_set_type)
RETURN NUMBER
IS
x_element_id   NUMBER;
x_value        VARCHAR2(2000);
BEGIN
     for i in 1..p_search_tbl.COUNT loop

        if (p_search_tbl(i).column_name = p_column_name) then
              x_element_id :=  p_search_tbl(i).imp_xml_element_id;
              exit;
        end if;
     end loop;
    RETURN (x_element_id);
END  Get_Element_ID;


--
-- ---------------------------------------------------------
-- This concurrent program populates the data to TCA tables
-- from OMO table.
--

PROCEDURE list_import_to_hz (
			    Errbuf          OUT NOCOPY     VARCHAR2,
			    Retcode         OUT NOCOPY     VARCHAR2,
			    p_import_list_header_id NUMBER,
			    p_number_of_processes NUMBER DEFAULT 1
			    ) IS
x_return_status          	varchar(1);
l_ret_status             	varchar(1);
x_msg_count		     	number;
x_msg_data		     	varchar(4000);
x_b2b				varchar(30);
x_tmp_var                  	VARCHAR2(4000);
x_tmp_var1                 	VARCHAR2(4000);
l_return_status                 VARCHAR2(1);
i_import_source_line_id         number;
i_number_of_rows_processed      number := 0;
i_party_id 			number;

L_COUNT          NUMBER := 0;
l_overlay  	VARCHAR2(1);
l_b2b_party_id    number;
l_b2c_party_id    number;
l_enabled_flag     VARCHAR2(1);
x_new_party        VARCHAR2(1);
x_component_name   VARCHAR2(60);
x_notes                         varchar(2000);
x_source_object_code            varchar2(60);
l_sa_email        VARCHAR2(2000);
l_vr_code          VARCHAR2(30);
l_vr_code_exists   VARCHAR2(1);
l_resource_id     number;
-- sranka 1/14/2003
-- added l_import_source_line_id
l_import_source_line_id number;

l_header_status         VARCHAR2(30);
l_request_id        number;
l_total_recs            number;
l_batch_size            number;
l_numb_of_inst          number;
l_lookup_code           varchar2(60);
l_user_status_id        number;
l_mod                   number;
new_request_id          number;
l_parent_request_id          number;

-- For the Parent Wait for child to finish
l_req_data               VARCHAR2(10);
l_req_data_counter       NUMBER;
i_batch_size             number;


cursor c_header_status is
select nvl(batch_size,0),parent_request_id from ams_imp_list_headers_all
where import_list_header_id = p_import_list_header_id;

cursor c_total_recs is
select count(*) from ams_imp_source_lines
where import_list_header_id = p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD');



-- Cursor to check if it's B2B or B2C party type.

cursor b2borb2c is
	  select import_type from ams_imp_list_headers_all
	  where  import_list_header_id = p_import_list_header_id;


/*  For Mapped party */
cursor party_mapped is
SELECT 'Y'  FROM ams_list_src_fields sf,
ams_imp_list_headers_all hd
WHERE sf.field_column_name = 'PARTY_ID'
  AND sf.enabled_flag = 'Y'
  AND sf.list_source_type_id = hd.list_source_type_id
  and hd.import_type = 'CUSTOMER'
  AND hd.import_list_header_id = p_import_list_header_id;

-- Cursor for B2B party type

cursor b2b is
 SELECT
 IMPORT_SOURCE_LINE_ID,
 PARTY_NAME,
 FISCAL_YEAREND_MONTH,
 DUNS_NUMBER,
 EMPLOYEES_TOTAL,
 LINE_OF_BUSINESS,
 YEAR_ESTABLISHED,
 TAX_REFERENCE,
 CEO_NAME,
 PERSON_FIRST_NAME,
 PERSON_MIDDLE_NAME,
 PERSON_LAST_NAME,
 PERSON_NAME_SUFFIX,
 PERSON_name_prefix,
 -- to_date(BEST_TIME_CONTACT_BEGIN,'MM/DD/YYYY'),
 -- to_date(BEST_TIME_CONTACT_END,'MM/DD/YYYY'),
 COUNTRY,
 ADDRESS1,
 ADDRESS2,
 CITY,
 COUNTY,
 STATE,
 PROVINCE,
 POSTAL_CODE,
 --TIME_ZONE,
 EMAIL_ADDRESS,
 PHONE_COUNTRY_CODE,
 PHONE_AREA_CODE,
 PHONE_NUMBER,
 PHONE_EXTENTION,
 DEPARTMENT,
 JOB_TITLE,
 JOB_TITLE_CODE, -- 5033551
 DECISION_MAKER_FLAG,
 SIC_CODE,
 SIC_CODE_TYPE,
--  TOTAL_NUM_OF_ORDERS,
-- TOTAL_ORDERED_AMOUNT,
-- to_date(LAST_ORDERED_DATE,'MM/DD/YYYY'),
 ANALYSIS_FY         ,
 CURR_FY_POTENTIAL_REVENUE,
 NEXT_FY_POTENTIAL_REVENUE,
 GSA_INDICATOR_FLAG       ,
 MISSION_STATEMENT        ,
 ORGANIZATION_NAME_PHONETIC,
 CATEGORY_CODE              ,
 JGZZ_FISCAL_CODE           ,
 -- TAX_NAME                   ,
 ADDRESS3                   ,
 ADDRESS4                   ,
 ADDRESS_LINES_PHONETIC     ,
 -- APARTMENT_FLAG             ,
 -- bug 4641591: columns obsolete
 -- PO_BOX_NUMBER              ,
 --  HOUSE_NUMBER               ,
 --  STREET_SUFFIX              ,
 -- SECONDARY_SUFFIX_ELENENT   ,
 --  STREET                     ,
 -- RURAL_ROUTE_TYPE           ,
 -- RURAL_ROUTE_NUMBER         ,
 --  STREET_NUMBER              ,
 --  FLOOR                      ,
 --  SUITE                      ,
 POSTAL_PLUS4_CODE          ,
 -- OVERSEAS_ADDRESS_FLAG      ,
 identifying_address_flag   ,
 party_id ,
-- to_date(ADDRESS_EFFECTIVE_DATE,'MM/DD/YYYY'),
-- to_date(ADDRESS_EXPIRATION_DATE,'MM/DD/YYYY'),
ADDRESS_EFFECTIVE_DATE,
ADDRESS_EXPIRATION_DATE,
--ANNUAL_REVENUE,
--ANNUAL_REVENUE_CURRENCY,
BRANCH_FLAG,
NVL(BUSINESS_LINE,LINE_OF_BUSINESS),
BUSINESS_SCOPE,
CHIEF_EXECUTIVE_TITLE,
CONGRESSIONAL_DISTRICT_CODE,
CONTROL_YEAR,
CORPORATION_CLASS,
CREDIT_SCORE,
CREDIT_SCORE_COMMENTARY,
--CUSTOMER_CATEGORY,
DB_RATING,
DATE_OF_BIRTH,
DATE_OF_DEATH,
-- to_date(DATE_OF_BIRTH,'MM/DD/YYYY'),
-- to_date(DATE_OF_DEATH,'MM/DD/YYYY'),
DEBARMENTS_COUNT,
DEBARTMENTS_DATE,
-- to_date(DEBARTMENTS_DATE,'MM/DD/YYYY'),
DECLARED_ETHNICITY,
DEPARTMENT_INDICATOR,
DESCRIPTION,
DISADVANTAGED_INDICATOR,
ENQUIRY_DUNS,
EXPORT_INDICATOR,
FAILURE_SCORE,
FAILURE_SCORE_COMMENTARY,
FAILURE_SCORE_NATL_PERCENTILE,
FAILURE_SCORE_OVERRIDE_CODE,
--FISCAL_CODE,
GLOBAL_FAILURE_SCORE,
HEADQUARTER_BRANCH_INDICATOR,
HEAD_OF_HOUSEHOLD_FLAG,
HOUSEHOLD_SIZE,
IMPORT_INDICATOR,
ORGANIZATION_KNOWN_AS,
ORGANIZATION_KNOWN_AS2,
ORGANIZATION_KNOWN_AS3,
ORGANIZATION_KNOWN_AS4,
ORGANIZATION_KNOWN_AS5,
PERSON_KNOWN_AS,
PERSON_KNOWN_AS2,
PERSON_KNOWN_AS3,
PERSON_KNOWN_AS4,
PERSON_KNOWN_AS5,
LABOR_SURPLUS_INDICATOR,
LOCAL_ACTIVITY_CODE,
LOCAL_ACTIVITY_CODE_TYPE,
LOCATION_DIRECTIONS ,
--LOCATION_STATUS,
MARITAL_STATUS,
-- to_date(MARITAL_STATUS_EFFECTIVE_DATE,'MM/DD/YYYY'),
MARITAL_STATUS_EFFECTIVE_DATE,
MINORITY_OWNED_INDICATOR,
MINORITY_OWNED_TYPE,
--ORGANIZATION_ALIAS,
ORGANIZATION_TYPE,
ORGANIZATION_URL,
OUT_OF_BUSINESS_INDICATOR,
PERSONAL_INCOME,
PERSON_ACADEMIC_TITLE,
PERSON_FIRST_NAME_PHONETIC,
PERSON_LAST_NAME_PHONETIC,
MIDDLE_NAME_PHONETIC,
PERSON_NAME_PHONETIC,
PERSON_PREVIOUS_TITLE_NAME,
PLACE_OF_BIRTH,
--PREFERRED_NAME,
PRINCIPAL_NAME,
PRINCIPAL_TITLE,
PUBLIC_PRIVATE_OWNERSHIP_FLAG,
RENT_OWNED_INDICATOR,
--RENT_OWNER_INDICATOR,
SECOND_TITLE,
SHORT_DESCRIPTION,
SMALL_BUSINESS_INDICATOR,
-- TAX_ID,
WOMAN_OWNED_INDICATOR,
ORGANIZATION_ATTRIBUTE1,
ORGANIZATION_ATTRIBUTE2,
ORGANIZATION_ATTRIBUTE3,
ORGANIZATION_ATTRIBUTE4,
ORGANIZATION_ATTRIBUTE5,
ORGANIZATION_ATTRIBUTE6,
ORGANIZATION_ATTRIBUTE7,
ORGANIZATION_ATTRIBUTE8,
ORGANIZATION_ATTRIBUTE9,
ORGANIZATION_ATTRIBUTE10,
ORGANIZATION_ATTRIBUTE11,
ORGANIZATION_ATTRIBUTE12,
ORGANIZATION_ATTRIBUTE13,
ORGANIZATION_ATTRIBUTE14,
ORGANIZATION_ATTRIBUTE15,
PERSON_ATTRIBUTE1,
PERSON_ATTRIBUTE2,
PERSON_ATTRIBUTE3,
PERSON_ATTRIBUTE4,
PERSON_ATTRIBUTE5,
PERSON_ATTRIBUTE6,
PERSON_ATTRIBUTE7,
PERSON_ATTRIBUTE8,
PERSON_ATTRIBUTE9,
PERSON_ATTRIBUTE10,
PERSON_ATTRIBUTE11,
PERSON_ATTRIBUTE12,
PERSON_ATTRIBUTE13,
PERSON_ATTRIBUTE14,
PERSON_ATTRIBUTE15,
ORG_CONTACT_ATTRIBUTE1,
ORG_CONTACT_ATTRIBUTE2,
ORG_CONTACT_ATTRIBUTE3,
ORG_CONTACT_ATTRIBUTE4,
ORG_CONTACT_ATTRIBUTE5,
ORG_CONTACT_ATTRIBUTE6,
ORG_CONTACT_ATTRIBUTE7,
ORG_CONTACT_ATTRIBUTE8,
ORG_CONTACT_ATTRIBUTE9,
ORG_CONTACT_ATTRIBUTE10,
ORG_CONTACT_ATTRIBUTE11,
ORG_CONTACT_ATTRIBUTE12,
ORG_CONTACT_ATTRIBUTE13,
ORG_CONTACT_ATTRIBUTE14,
ORG_CONTACT_ATTRIBUTE15,
ADDRESS_ATTRIBUTE1,
ADDRESS_ATTRIBUTE2,
ADDRESS_ATTRIBUTE3,
ADDRESS_ATTRIBUTE4,
ADDRESS_ATTRIBUTE5,
ADDRESS_ATTRIBUTE6,
ADDRESS_ATTRIBUTE7,
ADDRESS_ATTRIBUTE8,
ADDRESS_ATTRIBUTE9,
ADDRESS_ATTRIBUTE10,
ADDRESS_ATTRIBUTE11,
ADDRESS_ATTRIBUTE12,
ADDRESS_ATTRIBUTE13,
ADDRESS_ATTRIBUTE14,
ADDRESS_ATTRIBUTE15,
FAX_COUNTRY_CODE,
FAX_AREA_CODE,
FAX_NUMBER,
ORG_ATTRIBUTE_CATEGORY,
PERSON_ATTRIBUTE_CATEGORY,
ORG_CONTACT_ATTRIBUTE_CATEGORY,
ADDRESS_ATTRIBUTE_CATEGORY ,
PARTY_SITE_USE,
notes,
VEHICLE_RESPONSE_CODE      ,
SALES_AGENT_EMAIL_ADDRESS ,
ORIG_SYSTEM_REFERENCE,

-- sranka 3/21/2003
-- made changes for supporting EMPLOYEE_OF" relationship
 RELATIONSHIP_TYPE,
 RELATIONSHIP_CODE,
 org_email_address,
ORG_PH_COUNTRY_CODE,
ORG_PH_AREA_CODE,
ORG_PH_NUMBER,
ORG_PH_EXTENSION,
ORG_PHONE_TYPE,
PHONE_TYPE,


-- sranka Made the changes for COLT Enhancement 7/15/2003
ORG_COUNTRY,
ORG_ADDRESS1,
ORG_ADDRESS2,
ORG_ADDRESS3,
ORG_ADDRESS4,
ORG_CITY,
ORG_COUNTY,
ORG_STATE,
ORG_PROVINCE,
ORG_POSTAL_CODE,
ORG_ADDR_ATTRIBUTE_CATEGORY,
ORG_ADDR_ATTRIBUTE1,
ORG_ADDR_ATTRIBUTE2,
ORG_ADDR_ATTRIBUTE3,
ORG_ADDR_ATTRIBUTE4,
ORG_ADDR_ATTRIBUTE5,
ORG_ADDR_ATTRIBUTE6,
ORG_ADDR_ATTRIBUTE7,
ORG_ADDR_ATTRIBUTE8,
ORG_ADDR_ATTRIBUTE9,
ORG_ADDR_ATTRIBUTE10,
ORG_ADDR_ATTRIBUTE11,
ORG_ADDR_ATTRIBUTE12,
ORG_ADDR_ATTRIBUTE13,
ORG_ADDR_ATTRIBUTE14,
ORG_ADDR_ATTRIBUTE15,
ORG_ADDR_ATTRIBUTE16,
ORG_ADDR_ATTRIBUTE17,
ORG_ADDR_ATTRIBUTE18,
ORG_ADDR_ATTRIBUTE19,
ORG_ADDR_ATTRIBUTE20,
ORG_PS_ATTRIBUTE_CATEGORY,
ORG_PS_ATTRIBUTE1,
ORG_PS_ATTRIBUTE2,
ORG_PS_ATTRIBUTE3,
ORG_PS_ATTRIBUTE4,
ORG_PS_ATTRIBUTE5,
ORG_PS_ATTRIBUTE6,
ORG_PS_ATTRIBUTE7,
ORG_PS_ATTRIBUTE8,
ORG_PS_ATTRIBUTE9,
ORG_PS_ATTRIBUTE10,
ORG_PS_ATTRIBUTE11,
ORG_PS_ATTRIBUTE12,
ORG_PS_ATTRIBUTE13,
ORG_PS_ATTRIBUTE14,
ORG_PS_ATTRIBUTE15,
ORG_PS_ATTRIBUTE16,
ORG_PS_ATTRIBUTE17,
ORG_PS_ATTRIBUTE18,
ORG_PS_ATTRIBUTE19,
ORG_PS_ATTRIBUTE20,
ORG_CPS_ATTRIBUTE_CATEGORY,
ORG_CPS_ATTRIBUTE1,
ORG_CPS_ATTRIBUTE2,
ORG_CPS_ATTRIBUTE3,
ORG_CPS_ATTRIBUTE4,
ORG_CPS_ATTRIBUTE5,
ORG_CPS_ATTRIBUTE6,
ORG_CPS_ATTRIBUTE7,
ORG_CPS_ATTRIBUTE8,
ORG_CPS_ATTRIBUTE9,
ORG_CPS_ATTRIBUTE10,
ORG_CPS_ATTRIBUTE11,
ORG_CPS_ATTRIBUTE12,
ORG_CPS_ATTRIBUTE13,
ORG_CPS_ATTRIBUTE14,
ORG_CPS_ATTRIBUTE15,
ORG_CPS_ATTRIBUTE16,
ORG_CPS_ATTRIBUTE17,
ORG_CPS_ATTRIBUTE18,
ORG_CPS_ATTRIBUTE19,
ORG_CPS_ATTRIBUTE20,
NATIVE_LANGUAGE,
ORGANIZATION_ATTRIBUTE16,
ORGANIZATION_ATTRIBUTE17,
ORGANIZATION_ATTRIBUTE18,
ORGANIZATION_ATTRIBUTE19,
ORGANIZATION_ATTRIBUTE20,
ORGANIZATION_ATTRIBUTE21,
ORGANIZATION_ATTRIBUTE22,
ORGANIZATION_ATTRIBUTE23,
ORGANIZATION_ATTRIBUTE24,
PERSON_ATTRIBUTE16,
PERSON_ATTRIBUTE17,
PERSON_ATTRIBUTE18,
PERSON_ATTRIBUTE19,
PERSON_ATTRIBUTE20,
--PERSON_ATTRIBUTE21,
--PERSON_ATTRIBUTE22,
--PERSON_ATTRIBUTE23,
--PERSON_ATTRIBUTE24,
ORG_CONTACT_ATTRIBUTE16,
ORG_CONTACT_ATTRIBUTE17,
ORG_CONTACT_ATTRIBUTE18,
ORG_CONTACT_ATTRIBUTE19,
ORG_CONTACT_ATTRIBUTE20,
ORG_CONTACT_ATTRIBUTE21,
ORG_CONTACT_ATTRIBUTE22,
ORG_CONTACT_ATTRIBUTE23,
ORG_CONTACT_ATTRIBUTE24,
ADDRESS_ATTRIBUTE16,
ADDRESS_ATTRIBUTE17,
ADDRESS_ATTRIBUTE18,
ADDRESS_ATTRIBUTE19,
ADDRESS_ATTRIBUTE20
 FROM AMS_HZ_B2B_MAPPING_V
 WHERE IMPORT_LIST_HEADER_ID =  p_import_list_header_id
   and request_id = l_request_id
   AND load_status in ('ACTIVE','RELOAD');

-- Cursor B2C Party Type

CURSOR B2C IS
 SELECT
 IMPORT_SOURCE_LINE_ID,
 PERSON_FIRST_NAME,
 PERSON_MIDDLE_NAME,
 PERSON_LAST_NAME,
 PERSON_NAME_SUFFIX,
 PERSON_name_prefix,
 -- to_date(BEST_TIME_CONTACT_BEGIN,'MM/DD/YYYY'),
 -- to_date(BEST_TIME_CONTACT_END,'MM/DD/YYYY'),
 COUNTRY,
 ADDRESS1,
 ADDRESS2,
 CITY,
 COUNTY,
 STATE,
 PROVINCE,
 POSTAL_CODE,
 -- TIME_ZONE,
 EMAIL_ADDRESS,
 PHONE_COUNTRY_CODE,
 PHONE_AREA_CODE,
 PHONE_NUMBER,
 PHONE_EXTENTION,
-- PERSON_PRE_NAME_ADJUNCT,
 SALUTATION,
 ADDRESS3                   ,
 ADDRESS4                   ,
 ADDRESS_LINES_PHONETIC     ,
 -- APARTMENT_FLAG             ,
 -- bug 4641591: columns obsolete
 -- PO_BOX_NUMBER              ,
 --  HOUSE_NUMBER               ,
 --  STREET_SUFFIX              ,
 -- SECONDARY_SUFFIX_ELEMENT   ,
 --  STREET                     ,
 -- RURAL_ROUTE_TYPE           ,
 -- RURAL_ROUTE_NUMBER         ,
 --  STREET_NUMBER              ,
 --  FLOOR                      ,
 --  SUITE                      ,
 POSTAL_PLUS4_CODE          ,
 -- OVERSEAS_ADDRESS_FLAG      ,
 identifying_address_flag   ,
 party_id ,
 PERSON_LAST_NAME_PHONETIC,
 PERSON_FIRST_NAME_PHONETIC ,
--PREFERRED_NAME,
URL,-- replace PREFERRED_NAME with URL
SECOND_TITLE,
-- DATE_OF_BIRTH,
-- to_date(DATE_OF_BIRTH,'MM/DD/YYYY'),
DATE_OF_BIRTH,
PERSON_ACADEMIC_TITLE,
PERSON_PREVIOUS_TITLE_NAME,
PERSON_KNOWN_AS,
PERSON_KNOWN_AS2,
PERSON_KNOWN_AS3,
PERSON_KNOWN_AS4,
PERSON_KNOWN_AS5,
PERSON_NAME_PHONETIC,
MIDDLE_NAME_PHONETIC,
FISCAL_CODE,
PLACE_OF_BIRTH,
DATE_OF_DEATH,
-- to_date(DATE_OF_DEATH,'MM/DD/YYYY'),
DECLARED_ETHNICITY,
MARITAL_STATUS, PERSONAL_INCOME,
-- to_date(MARITAL_STATUS_EFFECTIVE_DATE,'MM/DD/YYYY'),
MARITAL_STATUS_EFFECTIVE_DATE,
HEAD_OF_HOUSEHOLD_FLAG,
HOUSEHOLD_SIZE, LOCATION_DIRECTIONS,
ADDRESS_EFFECTIVE_DATE, ADDRESS_EXPIRATION_DATE,
PERSON_ATTRIBUTE1, PERSON_ATTRIBUTE2,
PERSON_ATTRIBUTE3, PERSON_ATTRIBUTE4,
PERSON_ATTRIBUTE5, PERSON_ATTRIBUTE6,
PERSON_ATTRIBUTE7, PERSON_ATTRIBUTE8,
PERSON_ATTRIBUTE9, PERSON_ATTRIBUTE10,
PERSON_ATTRIBUTE11, PERSON_ATTRIBUTE12,
PERSON_ATTRIBUTE13, PERSON_ATTRIBUTE14,
PERSON_ATTRIBUTE15, ADDRESS_ATTRIBUTE1,
ADDRESS_ATTRIBUTE2, ADDRESS_ATTRIBUTE3,
ADDRESS_ATTRIBUTE4, ADDRESS_ATTRIBUTE5,
ADDRESS_ATTRIBUTE6, ADDRESS_ATTRIBUTE7,
ADDRESS_ATTRIBUTE8, ADDRESS_ATTRIBUTE9,
ADDRESS_ATTRIBUTE10, ADDRESS_ATTRIBUTE11,
ADDRESS_ATTRIBUTE12, ADDRESS_ATTRIBUTE13,
ADDRESS_ATTRIBUTE14, ADDRESS_ATTRIBUTE15,
FAX_COUNTRY_CODE, FAX_AREA_CODE,
FAX_NUMBER,
PERSON_ATTRIBUTE_CATEGORY,
ADDRESS_ATTRIBUTE_CATEGORY ,
SHORT_DESCRIPTION,
DESCRIPTION,
PARTY_SITE_USE,
notes,
VEHICLE_RESPONSE_CODE      ,
SALES_AGENT_EMAIL_ADDRESS,
ORIG_SYSTEM_REFERENCE,
TAX_REFERENCE,
RENT_OWNED_INDICATOR,
gender,
HOUSEHOLD_INCOME,
phone_type,
-- sranka changes done for COLT Enhancements 7/15/2003
PS_ATTRIBUTE_CATEGORY,
PS_ATTRIBUTE1,
PS_ATTRIBUTE2,
PS_ATTRIBUTE3,
PS_ATTRIBUTE4,
PS_ATTRIBUTE5,
PS_ATTRIBUTE6,
PS_ATTRIBUTE7,
PS_ATTRIBUTE8,
PS_ATTRIBUTE9,
PS_ATTRIBUTE10,
PS_ATTRIBUTE11,
PS_ATTRIBUTE12,
PS_ATTRIBUTE13,
PS_ATTRIBUTE14,
PS_ATTRIBUTE15,
PS_ATTRIBUTE16,
PS_ATTRIBUTE17,
PS_ATTRIBUTE18,
PS_ATTRIBUTE19,
PS_ATTRIBUTE20,
NATIVE_LANGUAGE,
PERSON_ATTRIBUTE16,
PERSON_ATTRIBUTE17,
PERSON_ATTRIBUTE18,
PERSON_ATTRIBUTE19,
PERSON_ATTRIBUTE20,
PERSON_ATTRIBUTE21,
PERSON_ATTRIBUTE22,
PERSON_ATTRIBUTE23,
PERSON_ATTRIBUTE24,
ADDRESS_ATTRIBUTE16,
ADDRESS_ATTRIBUTE17,
ADDRESS_ATTRIBUTE18,
ADDRESS_ATTRIBUTE19,
ADDRESS_ATTRIBUTE20
FROM  AMS_HZ_B2C_MAPPING_V
WHERE IMPORT_LIST_HEADER_ID = P_IMPORT_LIST_HEADER_ID
and request_id = l_request_id
AND   load_status in ('ACTIVE','RELOAD');


CURSOR vehicle_code_exists (x_vehicle_code varchar) IS
select 'Y' from ams_lookups where lookup_type = 'AMS_VEHICLE_RESPONSE_CODE'
and lookup_code = x_vehicle_code  and enabled_flag = 'Y';


CURSOR resource_exists (x_sa_email_address varchar) IS
select ams.resource_id from ams_jtf_rs_emp_v ams , fnd_user fnd
where fnd.user_Name = upper(x_sa_email_address)
  and fnd.user_id = ams.user_id;

cursor c_hdr_status is
select status_code from ams_imp_list_headers_all
where import_list_header_id = p_import_list_header_id;

 party_rec       hz_party_v2pub.party_rec_type;
 org_rec         hz_party_v2pub.organization_rec_type;
 person_rec      hz_party_v2pub.person_rec_type;
 location_rec    hz_location_v2pub.location_rec_type;
 psite_rec       hz_party_site_v2pub.party_site_rec_type;
 psiteuse_rec    hz_party_site_v2pub.party_site_use_rec_type;
 cpoint_rec      hz_contact_point_v2pub.contact_point_rec_type;
 email_rec       hz_contact_point_v2pub.email_rec_type;
 phone_rec       hz_contact_point_v2pub.phone_rec_type;
 fax_rec         hz_contact_point_v2pub.phone_rec_type;
 ocon_rec        hz_party_contact_v2pub.org_contact_rec_type;
 edi_rec         hz_contact_point_v2pub.edi_rec_type;
 telex_rec       hz_contact_point_v2pub.telex_rec_type;
 web_rec         hz_contact_point_v2pub.web_rec_type;

 org_email_rec       hz_contact_point_v2pub.email_rec_type;
 org_phone_rec       hz_contact_point_v2pub.phone_rec_type;
 org_location_rec    hz_location_v2pub.location_rec_type;
 org_psite_rec       hz_party_site_v2pub.party_site_rec_type;
 language_rec        HZ_PERSON_INFO_V2PUB.person_language_rec_type;


begin

-- Checks if it's B2B or B2C party type.
	OPEN b2borb2c;
	FETCH b2borb2c into x_b2b;
        CLOSE b2borb2c;
 -- Checks if party_id is mapped
        open party_mapped;
        fetch party_mapped into G_PARTY_MAPPED;
        close party_mapped;

 FND_PROFILE.Get('CONC_REQUEST_ID', l_request_id);
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'IN import to HZ Request Id: '|| to_char(l_request_id),
              p_msg_type        => 'DEBUG');
-- ******************************************************
IF p_number_of_processes > 0 then
   if p_number_of_processes >= 10 then
       l_numb_of_inst := 10;
     else
       l_numb_of_inst := p_number_of_processes;
   end if;
 open  c_total_recs;
 fetch c_total_recs into  l_total_recs;
 close c_total_recs;
 open  c_hdr_status;
 fetch c_hdr_status into l_header_status;
 close c_hdr_status;
 if l_header_status = 'ERROR' then
	l_total_recs := 0;
	i_batch_size := 0;
 end if;
 if l_total_recs = 0 then
   open c_header_status;
   fetch c_header_status into i_batch_size,l_parent_request_id;
   close c_header_status;
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'l_parent_request_id = '|| to_char(l_parent_request_id),
         p_msg_type        => 'DEBUG'
       );
 if l_request_id = l_parent_request_id then
   AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Stop processing size = '||to_char(i_batch_size),
         p_msg_type        => 'DEBUG'
         );
     if i_batch_size < 1 then

       --TCA mandate: bug 4587049
       --Enable/restore TCA events status
       --g_prof := fnd_profile.value('HZ_EXECUTE_API_CALLOUTS');
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Restoring g_prof HZ_EXECUTE_API_CALLOUTS: '|| g_prof,
              p_msg_type        => 'DEBUG');

       if g_prof <> 'N' then
         fnd_profile.put('HZ_EXECUTE_API_CALLOUTS',g_prof);
       end if;

       update_cust_import_status(p_import_list_header_id);
     end if;
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'AMSILHZC ----- no records to process ZERO not submittng any child request.',
         p_msg_type        => 'DEBUG'
       );
      return;
 end if;
  ELSE
   l_req_data := fnd_conc_global.request_data;
/*
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'l_req_data : '|| l_req_data,
              p_msg_type        => 'DEBUG');
*/
   if (l_req_data is not null) then
        l_req_data_counter := to_number(l_req_data);
        l_req_data_counter := l_req_data_counter + 1;
   else
        l_req_data_counter := 1;
   end if;
/*
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'l_req_data_counter : '|| to_char(l_req_data_counter),
              p_msg_type        => 'DEBUG');
*/
 end if; -- if l_total_recs = 0 then

 if l_numb_of_inst = 1 then
          l_batch_size := l_total_recs;
   else
          l_batch_size := ROUND(l_total_recs / l_numb_of_inst) + 1;
 end if;

             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'l_batch_size : '|| to_char(l_batch_size),
              p_msg_type        => 'DEBUG');

 if l_numb_of_inst > l_total_recs then
    l_numb_of_inst := l_total_recs;
 end if;
 if l_numb_of_inst > 10 then
    l_numb_of_inst := 10;
 end if;
 update ams_imp_list_headers_all set BATCH_SIZE = l_numb_of_inst,
                                     parent_request_id = l_request_id
 where import_list_header_id = p_import_list_header_id;
 commit;

             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'l_numb_of_inst : '|| to_char(l_numb_of_inst),
              p_msg_type        => 'DEBUG');

       --TCA mandate: bug 4587049
       --Disable TCA events just before starting list import child to process TCA data
       --g_prof := fnd_profile.value('HZ_EXECUTE_API_CALLOUTS');
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Disabling g_prof HZ_EXECUTE_API_CALLOUTS: '|| g_prof,
              p_msg_type        => 'DEBUG');

       if g_prof <> 'N' then
         fnd_profile.put('HZ_EXECUTE_API_CALLOUTS','N');
       end if;

    FOR loop_counter IN 1..l_numb_of_inst LOOP
        new_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',
                      program           => 'AMSILHZC',
                      description       => 'List Import Child Req ' || to_char(loop_counter),
                      sub_request       => TRUE,
                      argument1         => p_import_list_header_id,
                      argument2         => 0);

              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'List Import Child Req : -- concurrent program_id is '||to_char(new_request_id),
              p_msg_type        => 'DEBUG'
              );
     IF new_request_id = 0 THEN
     --     RAISE FND_API.g_exc_unexpected_error;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'List Import Child Req : Error in submitting request',
              p_msg_type        => 'DEBUG'
              );
     end if;

        update ams_imp_source_lines
           set request_id = new_request_id
         where import_list_header_id = p_import_list_header_id
           and request_id is null
           and load_status in ('ACTIVE','RELOAD')
           and ROWNUM <= l_batch_size;
         commit;
/*
     if x_b2b = 'Y' then
	org_party_update(
   	p_import_list_header_id,
   	new_request_id,
   	l_batch_size,
   	x_return_status       ,
   	x_msg_count           ,
   	x_msg_data           );
      else
        update ams_imp_source_lines
           set request_id = new_request_id
         where import_list_header_id = p_import_list_header_id
           and request_id is null
           and ROWNUM <= l_batch_size;
     end if;
*/
    END LOOP;
/*
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start child prog pause --l_req_data_counter= '||to_char(l_req_data_counter),
              p_msg_type        => 'DEBUG');
*/
    fnd_conc_global.set_req_globals(conc_status  => 'PAUSED',
                                    request_data => to_char(l_req_data_counter));

/*
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End AMSILHZC '||to_char(sysdate),
              p_msg_type        => 'DEBUG');
*/
ELSIF p_number_of_processes = 0 THEN

 update ams_imp_list_headers_all set BATCH_SIZE = BATCH_SIZE - 1
 where import_list_header_id = p_import_list_header_id;
 commit;


-- *****************************************************

if x_b2b = 'B2B' then
    AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'TCA import -- Start b2b customer import',
         p_msg_type        => 'DEBUG'
         );

	   OPEN b2b;
 LOOP
	   FETCH b2b into
-- sranka 1/14/2003
-- added l_import_source_line_id to put the correct val of the import_source_line_id
       l_import_source_line_id,
	   org_rec.organization_name,
	   org_rec.fiscal_yearend_month,
	   org_rec.duns_number_c,
	   org_rec.employees_total,
	   org_rec.line_of_business,
	   org_rec.year_established,
	   org_rec.tax_reference,
	   org_rec.ceo_name,
	   person_rec.person_first_name,
	   person_rec.person_middle_name,
	   person_rec.person_last_name,
	   person_rec.person_name_suffix,
	   person_rec.person_pre_name_adjunct,
	   -- person_rec.best_time_contact_begin,
	   -- person_rec.best_time_contact_end,
	   location_rec.country,
	   location_rec.address1,
	   location_rec.address2,
	   location_rec.city,
	   location_rec.county,
	   location_rec.state,
	   location_rec.province,
	   location_rec.postal_code,
--	   location_rec.time_zone,
	   email_rec.email_address,
	   phone_rec.phone_country_code,
	   phone_rec.phone_area_code,
           phone_rec.phone_number,
           phone_rec.phone_extension,
	   ocon_rec.department,
	   ocon_rec.job_title,
	   ocon_rec.job_title_code, -- 5033551
	   ocon_rec.decision_maker_flag,
           org_rec.sic_code,
           org_rec.sic_code_type,
 --          org_rec.party_rec.TOTAL_NUM_OF_ORDERS,
  --         org_rec.party_rec.TOTAL_ORDERED_AMOUNT,
   --        org_rec.party_rec.LAST_ORDERED_DATE,
           org_rec.analysis_fy,
           org_rec.CURR_FY_POTENTIAL_REVENUE,
           org_rec.NEXT_FY_POTENTIAL_REVENUE,
           org_rec.GSA_INDICATOR_FLAG,
           org_rec.MISSION_STATEMENT,
           org_rec.ORGANIZATION_NAME_PHONETIC,
           org_rec.party_rec.CATEGORY_CODE,
           org_rec.JGZZ_FISCAL_CODE,
    --       org_rec.TAX_NAME,
           location_rec.ADDRESS3,
           location_rec.ADDRESS4,
           location_rec.ADDRESS_LINES_PHONETIC,
           -- location_rec.APARTMENT_FLAG,
           -- bug 4641591: columns obsolete
           -- 	   location_rec.PO_BOX_NUMBER,
           --            location_rec.HOUSE_NUMBER,
           --            location_rec.STREET_SUFFIX,
           -- location_rec.SECONDARY_SUFFIX_ELEMENT,
           --            location_rec.STREET,
           -- location_rec.RURAL_ROUTE_TYPE,
           -- location_rec.RURAL_ROUTE_NUMBER,
           --            location_rec.STREET_NUMBER,
           --            location_rec.FLOOR,
           --            location_rec.SUITE,
           location_rec.POSTAL_PLUS4_CODE,
           -- location_rec.OVERSEAS_ADDRESS_FLAG,
           psite_rec.identifying_address_flag,
           l_b2b_party_id,
	   location_rec.address_effective_date,
	   location_rec.address_expiration_date,
           --ANNUAL_REVENUE,
	   --ANNUAL_REVENUE_CURRENCY,
	   org_rec.branch_flag,
	   org_rec.line_of_business,
           org_rec.business_scope,
	   org_rec.ceo_title,
           org_rec.cong_dist_code,
	   org_rec.control_yr,
           org_rec.corporation_class,
	   org_rec.credit_score,
           org_rec.credit_score_commentary,
	   --CUSTOMER_CATEGORY,
           org_rec.db_rating,
           person_rec.date_of_birth,
           person_rec.date_of_death,
           org_rec.debarments_count,
           org_rec.debarments_date,
	   person_rec.declared_ethnicity,
           org_rec.debarment_ind,
	   location_rec.description,
           org_rec.disadv_8a_ind,
	   org_rec.enquiry_duns,
           org_rec.export_ind,
	   org_rec.failure_score,
           org_rec.failure_score_commentary,
	   org_rec.failure_score_natnl_percentile,
           org_rec.failure_score_override_code,
	   --FISCAL_CODE,
           org_rec.global_failure_score,
	   org_rec.hq_branch_ind,
           person_rec.head_of_household_flag,
	   person_rec.household_size,
           org_rec.import_ind,
           org_rec.known_as,
	   org_rec.known_as2,
           org_rec.known_as3,
	   org_rec.known_as4,
           org_rec.known_as5,
           person_rec.known_as,
           person_rec.known_as2,
           person_rec.known_as3,
           person_rec.known_as4,
           person_rec.known_as5,
           org_rec.labor_surplus_ind,
           org_rec.local_activity_code,
	   org_rec.local_activity_code_type,
           location_rec.location_directions,
	   --LOCATION_STATUS,
           person_rec.marital_status,
	   person_rec.marital_status_effective_date,
           org_rec.minority_owned_ind,
	   org_rec.minority_owned_type,
           --ORGANIZATION_ALIAS,
	   org_rec.organization_type,
           web_rec.url,
	   org_rec.oob_ind,
           person_rec.personal_income,
	   person_rec.person_academic_title,
           person_rec.person_first_name_phonetic,
	   person_rec.person_last_name_phonetic,
           person_rec.middle_name_phonetic,
	   person_rec.person_name_phonetic,
           person_rec.person_previous_last_name, --modify ak
	   person_rec.place_of_birth,
           --PREFERRED_NAME,
	   org_rec.principal_name,
           org_rec.principal_title,
	   org_rec.public_private_ownership_flag,
           org_rec.rent_own_ind,
	   --RENT_OWNER_INDICATOR,
           person_rec.person_academic_title,
	   location_rec.short_description,
           org_rec.small_bus_ind,
	   -- person_rec.tax_reference,
           org_rec.woman_owned_ind,
           org_rec.party_rec.attribute1,
           org_rec.party_rec.attribute2,
           org_rec.party_rec.attribute3,
           org_rec.party_rec.attribute4,
           org_rec.party_rec.attribute5,
           org_rec.party_rec.attribute6,
           org_rec.party_rec.attribute7,
           org_rec.party_rec.attribute8,
           org_rec.party_rec.attribute9,
           org_rec.party_rec.attribute10,
           org_rec.party_rec.attribute11,
           org_rec.party_rec.attribute12,
           org_rec.party_rec.attribute13,
           org_rec.party_rec.attribute14,
           org_rec.party_rec.attribute15,
           person_rec.attribute1,
           person_rec.attribute2,
           person_rec.attribute3,
           person_rec.attribute4,
           person_rec.attribute5,
           person_rec.attribute6,
           person_rec.attribute7,
           person_rec.attribute8,
           person_rec.attribute9,
           person_rec.attribute10,
           person_rec.attribute11,
           person_rec.attribute12,
           person_rec.attribute13,
           person_rec.attribute14,
           person_rec.attribute15,
           ocon_rec.attribute1,
           ocon_rec.attribute2,
           ocon_rec.attribute3,
           ocon_rec.attribute4,
           ocon_rec.attribute5,
           ocon_rec.attribute6,
           ocon_rec.attribute7,
           ocon_rec.attribute8,
           ocon_rec.attribute9,
           ocon_rec.attribute10,
           ocon_rec.attribute11,
           ocon_rec.attribute12,
           ocon_rec.attribute13,
           ocon_rec.attribute14,
           ocon_rec.attribute15,
           location_rec.attribute1,
           location_rec.attribute2,
           location_rec.attribute3,
           location_rec.attribute4,
           location_rec.attribute5,
           location_rec.attribute6,
           location_rec.attribute7,
           location_rec.attribute8,
           location_rec.attribute9,
           location_rec.attribute10,
           location_rec.attribute11,
           location_rec.attribute12,
           location_rec.attribute13,
           location_rec.attribute14,
           location_rec.attribute15,
           fax_rec.phone_country_code,
	   fax_rec.phone_area_code,
           fax_rec.phone_number,
           org_rec.party_rec.attribute_category,
           person_rec.attribute_category,
           ocon_rec.attribute_category,
           location_rec.attribute_category,
           psiteuse_rec.site_use_type,
           x_notes,
           l_vr_code,
           l_sa_email,
           org_rec.party_rec.orig_system_reference,
-- sranka 3/4/2003
-- made changes for supporting EMPLOYEE_OF" relationship
           ocon_rec.party_rel_rec.relationship_type,
           ocon_rec.party_rel_rec.relationship_code,
           org_email_rec.email_address,
           org_phone_rec.phone_country_code,
           org_phone_rec.phone_area_code,
           org_phone_rec.phone_number,
           org_phone_rec.phone_extension,
           org_phone_rec.phone_line_type,
           phone_rec.phone_line_type,

org_location_rec.country,
org_location_rec.address1,
org_location_rec.address2,
org_location_rec.address3,
org_location_rec.address4,
org_location_rec.city,
org_location_rec.county,
org_location_rec.state,
org_location_rec.province,
org_location_rec.postal_code,
org_location_rec.attribute_category,
org_location_rec.attribute1,
org_location_rec.attribute2,
org_location_rec.attribute3,
org_location_rec.attribute4,
org_location_rec.attribute5,
org_location_rec.attribute6,
org_location_rec.attribute7,
org_location_rec.attribute8,
org_location_rec.attribute9,
org_location_rec.attribute10,
org_location_rec.attribute11,
org_location_rec.attribute12,
org_location_rec.attribute13,
org_location_rec.attribute14,
org_location_rec.attribute15,
org_location_rec.attribute16,
org_location_rec.attribute17,
org_location_rec.attribute18,
org_location_rec.attribute19,
org_location_rec.attribute20,
org_psite_rec.attribute_category,
org_psite_rec.attribute1,
org_psite_rec.attribute2,
org_psite_rec.attribute3,
org_psite_rec.attribute4,
org_psite_rec.attribute5,
org_psite_rec.attribute6,
org_psite_rec.attribute7,
org_psite_rec.attribute8,
org_psite_rec.attribute9,
org_psite_rec.attribute10,
org_psite_rec.attribute11,
org_psite_rec.attribute12,
org_psite_rec.attribute13,
org_psite_rec.attribute14,
org_psite_rec.attribute15,
org_psite_rec.attribute16,
org_psite_rec.attribute17,
org_psite_rec.attribute18,
org_psite_rec.attribute19,
org_psite_rec.attribute20,
psite_rec.attribute_category,
psite_rec.attribute1,
psite_rec.attribute2,
psite_rec.attribute3,
psite_rec.attribute4,
psite_rec.attribute5,
psite_rec.attribute6,
psite_rec.attribute7,
psite_rec.attribute8,
psite_rec.attribute9,
psite_rec.attribute10,
psite_rec.attribute11,
psite_rec.attribute12,
psite_rec.attribute13,
psite_rec.attribute14,
psite_rec.attribute15,
psite_rec.attribute16,
psite_rec.attribute17,
psite_rec.attribute18,
psite_rec.attribute19,
psite_rec.attribute20,
language_rec.language_name,
org_rec.party_rec.attribute16,
org_rec.party_rec.attribute17,
org_rec.party_rec.attribute18,
org_rec.party_rec.attribute19,
org_rec.party_rec.attribute20,
org_rec.party_rec.attribute21,
org_rec.party_rec.attribute22,
org_rec.party_rec.attribute23,
org_rec.party_rec.attribute24,
person_rec.attribute16,
person_rec.attribute17,
person_rec.attribute18,
person_rec.attribute19,
person_rec.attribute20,
--person_rec.attribute21,
--person_rec.attribute22,
--person_rec.attribute23,
--person_rec.attribute24,
ocon_rec.attribute16,
ocon_rec.attribute17,
ocon_rec.attribute18,
ocon_rec.attribute19,
ocon_rec.attribute20,
ocon_rec.attribute21,
ocon_rec.attribute22,
ocon_rec.attribute23,
ocon_rec.attribute24,
location_rec.attribute16,
location_rec.attribute17,
location_rec.attribute18,
location_rec.attribute19,
location_rec.attribute20  ;




           person_rec.party_rec.attribute1 := ocon_rec.attribute1;
           person_rec.party_rec.attribute2 := ocon_rec.attribute2;
           person_rec.party_rec.attribute3 := ocon_rec.attribute3;
           person_rec.party_rec.attribute4 := ocon_rec.attribute4;
           person_rec.party_rec.attribute5 := ocon_rec.attribute5;
           person_rec.party_rec.attribute6 := ocon_rec.attribute6;
           person_rec.party_rec.attribute7 := ocon_rec.attribute7;
           person_rec.party_rec.attribute8 := ocon_rec.attribute8;
           person_rec.party_rec.attribute9 := ocon_rec.attribute9;
           person_rec.party_rec.attribute10 := ocon_rec.attribute10;
           person_rec.party_rec.attribute11 := ocon_rec.attribute11;
           person_rec.party_rec.attribute12 := ocon_rec.attribute12;
           person_rec.party_rec.attribute13 := ocon_rec.attribute13;
           person_rec.party_rec.attribute14 := ocon_rec.attribute14;
           person_rec.party_rec.attribute15 := ocon_rec.attribute15;
           person_rec.party_rec.attribute_category:= ocon_rec.attribute_category;

	     -- hbandi code change for the Bug # 7498992
	   person_rec.party_rec.attribute16 := ocon_rec.attribute16;
	   person_rec.party_rec.attribute17 := ocon_rec.attribute17;
	   person_rec.party_rec.attribute18 := ocon_rec.attribute18;
	   person_rec.party_rec.attribute19 := ocon_rec.attribute19;
	   person_rec.party_rec.attribute20 := ocon_rec.attribute20;
	   person_rec.party_rec.attribute21 := ocon_rec.attribute21;
	   person_rec.party_rec.attribute22 := ocon_rec.attribute22;
	   person_rec.party_rec.attribute23 := ocon_rec.attribute23;
	   person_rec.party_rec.attribute24 := ocon_rec.attribute24;
	   --  End of Hbandi Code

	   if b2b%notfound then
		 exit;
        end if;

-- sranka 1/14/2003
-- made the changes to populate the correct import_source_line_id and support orig_system_reference

--  i_import_source_line_id := org_rec.party_rec.orig_system_reference; // Original line
  i_import_source_line_id := l_import_source_line_id;

-- TCA mandates changes: bug 4587049
--  org_rec.party_rec.created_by_module := 'AMS_LIST_IMPORT';
  org_rec.created_by_module := 'AMS_LIST_IMPORT';
  person_rec.created_by_module := 'AMS_LIST_IMPORT';
  ocon_rec.created_by_module := 'AMS_LIST_IMPORT';
  language_rec.created_by_module := 'AMS_LIST_IMPORT';
  location_rec.created_by_module := 'AMS_LIST_IMPORT';
  psite_rec.created_by_module := 'AMS_LIST_IMPORT';
  psiteuse_rec.created_by_module := 'AMS_LIST_IMPORT';
  cpoint_rec.created_by_module := 'AMS_LIST_IMPORT';

  AMS_List_Import_PUB.Create_Customer (
  p_api_version              => 1,
  p_init_msg_list            => 'T',
  p_commit                   => 'F',
  x_return_status            => x_return_status,
  x_msg_count                => x_msg_count,
  x_msg_data                 => x_msg_data,
  p_party_id                 => l_b2b_party_id,
  p_b2b_flag                 => 'Y',
  p_import_list_header_id    => P_IMPORT_LIST_HEADER_ID,
  p_party_rec                => party_rec,
  p_org_rec                  => org_rec,
  p_person_rec               => person_rec,
  p_location_rec             => location_rec,
  p_psite_rec                => psite_rec,
  p_cpoint_rec               => cpoint_rec,
  p_email_rec                => email_rec,
  p_phone_rec                => phone_rec,
  p_fax_rec                  => fax_rec,
  p_ocon_rec                 => ocon_rec,
  p_siteuse_rec		     => psiteuse_rec,
  p_web_rec                  => web_rec,
  x_new_party                => x_new_party,
  p_component_name           => x_component_name,
  l_import_source_line_id    => l_import_source_line_id  ,
  p_org_email_rec            => org_email_rec,
  p_org_phone_rec            => org_phone_rec,
  p_org_location_rec         => org_location_rec,
  p_org_psite_rec            => org_psite_rec,
  p_language_rec          =>  language_rec
  );

    if x_return_status = 'S' and x_notes is not null and l_b2b_party_id is not null  then
      if x_notes is not null then
        create_list_note
        (  p_import_list_header_id,
           i_import_source_line_id,
           l_b2b_party_id,
           'PARTY'   ,
           x_notes,
           x_return_status,
           x_msg_count    ,
           x_msg_data );
          if x_return_status <> 'S' then
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR', ENABLED_FLAG = null
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1, 'T', 'F', null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                i_import_source_line_id,
                null, null, null,null,
                'Error in note creation' );

          end if;
      end if;
    end if;
    if l_vr_code is not null then
         open vehicle_code_exists(l_vr_code);
         fetch vehicle_code_exists into l_vr_code_exists;
         close vehicle_code_exists;
         if l_vr_code_exists is null then
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR',ENABLED_FLAG = null
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1,
                'T',
                'F',
                null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                i_import_source_line_id,
                null, null, null,null,
                'VEHICLE_RESPONSE_CODE : Invalid value for column VEHICLE_RESPONSE_CODE');
        end if;
    end if;
    if l_sa_email is not null then
        open resource_exists (l_sa_email);
        fetch resource_exists into l_resource_id;
        close resource_exists;
        if l_resource_id is null then
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR',ENABLED_FLAG = null
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1,
                'T',
                'F',
                null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                i_import_source_line_id,
                null, null, null,null,
                'SALES_AGENT_EMAIL_ADDRESS : Resource ID does not exist for this sales agent.');
        end if;
        UPDATE ams_imp_source_lines
          SET resource_id     = l_resource_id
        WHERE import_source_line_id = i_import_source_line_id;
    end if;

   if x_msg_count > 1 then
    FOR i IN 1..x_msg_count  LOOP
	 x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
	 x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
    END LOOP;
    x_msg_data := x_tmp_var1;
   END IF;
    errbuf := 'ERROR -'||substr(x_msg_data,1,180);
   if x_return_status <> 'S' then
      UPDATE ams_imp_source_lines
         SET load_status = 'ERROR',ENABLED_FLAG = null
       WHERE import_source_line_id = i_import_source_line_id;
       AMS_List_Import_PUB.error_capture (
        1,
        'T',
        'F',
        null,
        x_return_status,
        x_msg_count,
        x_msg_data,
        p_import_list_header_id,
        i_import_source_line_id,
        null,
        null,
        x_component_name,
        null,
        errbuf);
        if (x_return_status = 'E' and x_msg_data = 'Threshold')
          then
          exit;
        end if;
   end if;
   i_number_of_rows_processed := i_number_of_rows_processed + 1;
   i_import_source_line_id := null;
   x_return_status      := null;
   x_msg_count	        := null;
   x_msg_data           := null;
   x_new_party          := null;
   errbuf		:= null;
   x_tmp_var            := null;
   x_tmp_var1           := null;
   l_resource_id        := null;
   l_vr_code_exists     := null;
END LOOP;
CLOSE b2b;

UPDATE ams_imp_list_headers_all
   -- SET processed_rows = i_number_of_rows_processed
   SET processed_rows = nvl(processed_rows,0) + i_number_of_rows_processed
 WHERE import_list_header_id = p_import_list_header_id;

end if;

-- >>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<
if x_b2b = 'B2C' then
    i_number_of_rows_processed := 0;
    AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'TCA import -- Start b2c customer import',
         p_msg_type        => 'DEBUG'
         );

          OPEN b2c;
 LOOP
  AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'before FETCH  ..................  ',
         p_msg_type        => 'DEBUG'
         );
           FETCH b2c into
           l_import_source_line_id,
           person_rec.person_first_name,
           person_rec.person_middle_name,
           person_rec.person_last_name,
           person_rec.person_name_suffix,
           person_rec.person_pre_name_adjunct,
           -- person_rec.best_time_contact_begin,
           -- person_rec.best_time_contact_end,
           location_rec.country,
           location_rec.address1,
           location_rec.address2,
           location_rec.city,
           location_rec.county,
           location_rec.state,
           location_rec.province,
           location_rec.postal_code,
 --          location_rec.time_zone,
	   email_rec.email_address,
	   phone_rec.phone_country_code,
	   phone_rec.phone_area_code,
           phone_rec.phone_number,
           phone_rec.phone_extension,
          --  person_rec.person_pre_name_adjunct,
           person_rec.party_rec.SALUTATION,
           location_rec.ADDRESS3,
           location_rec.ADDRESS4,
           location_rec.ADDRESS_LINES_PHONETIC,
           -- location_rec.APARTMENT_FLAG,
           -- bug 4641591: columns obsolete
           -- 	   location_rec.PO_BOX_NUMBER,
           --            location_rec.HOUSE_NUMBER,
           --            location_rec.STREET_SUFFIX,
           -- location_rec.SECONDARY_SUFFIX_ELEMENT,
           --            location_rec.STREET,
           -- location_rec.RURAL_ROUTE_TYPE,
           -- location_rec.RURAL_ROUTE_NUMBER,
           --            location_rec.STREET_NUMBER,
           --            location_rec.FLOOR,
           --            location_rec.SUITE,
           location_rec.POSTAL_PLUS4_CODE,
           -- location_rec.OVERSEAS_ADDRESS_FLAG,
           psite_rec.identifying_address_flag,
           l_b2c_party_id,
	   person_rec.person_last_name_phonetic,
	   person_rec.person_first_name_phonetic,
           --PREFERRED_NAME,
	   web_rec.url, -- replace PREFERRED_NAME with URL
	   person_rec.person_academic_title,
           person_rec.date_of_birth,
	   person_rec.person_academic_title,
           person_rec.person_previous_last_name,
	   person_rec.known_as,
           person_rec.known_as2,
	   person_rec.known_as3,
           person_rec.known_as4,
	   person_rec.known_as5,
           person_rec.person_name_phonetic,
	   person_rec.middle_name_phonetic,
           person_rec.jgzz_fiscal_code,
	   person_rec.place_of_birth,
           person_rec.date_of_death,
	   person_rec.declared_ethnicity,
           person_rec.marital_status,
	   person_rec.personal_income,
           person_rec.marital_status_effective_date,
	   person_rec.head_of_household_flag,
           person_rec.household_size,
	   location_rec.location_directions,
           location_rec.address_effective_date,
	   location_rec.address_expiration_date,
           person_rec.party_rec.attribute1,
           person_rec.party_rec.attribute2,
           person_rec.party_rec.attribute3,
           person_rec.party_rec.attribute4,
           person_rec.party_rec.attribute5,
           person_rec.party_rec.attribute6,
           person_rec.party_rec.attribute7,
           person_rec.party_rec.attribute8,
           person_rec.party_rec.attribute9,
           person_rec.party_rec.attribute10,
           person_rec.party_rec.attribute11,
           person_rec.party_rec.attribute12,
           person_rec.party_rec.attribute13,
           person_rec.party_rec.attribute14,
           person_rec.party_rec.attribute15,
           location_rec.attribute1,
           location_rec.attribute2,
           location_rec.attribute3,
           location_rec.attribute4,
           location_rec.attribute5,
           location_rec.attribute6,
           location_rec.attribute7,
           location_rec.attribute8,
           location_rec.attribute9,
           location_rec.attribute10,
           location_rec.attribute11,
           location_rec.attribute12,
           location_rec.attribute13,
           location_rec.attribute14,
           location_rec.attribute15,
           fax_rec.phone_country_code,
	   fax_rec.phone_area_code,
           fax_rec.phone_number,
           person_rec.party_rec.attribute_category,
           location_rec.attribute_category ,
	   location_rec.short_description,
	   location_rec.description,
           psiteuse_rec.site_use_type,
           x_notes,
           l_vr_code,
           l_sa_email,
           person_rec.party_rec.orig_system_reference,
           person_rec.tax_reference,
           person_rec.rent_own_ind,
           person_rec.gender,
           person_rec.HOUSEHOLD_INCOME,
	   phone_rec.phone_line_type,
-- sranka changed for COLT Enhancement 7/15/2003
        psite_rec.attribute_category,
        psite_rec.attribute1,
        psite_rec.attribute2,
        psite_rec.attribute3,
        psite_rec.attribute4,
        psite_rec.attribute5,
        psite_rec.attribute6,
        psite_rec.attribute7,
        psite_rec.attribute8,
        psite_rec.attribute9,
        psite_rec.attribute10,
        psite_rec.attribute11,
        psite_rec.attribute12,
        psite_rec.attribute13,
        psite_rec.attribute14,
        psite_rec.attribute15,
        psite_rec.attribute16,
        psite_rec.attribute17,
        psite_rec.attribute18,
        psite_rec.attribute19,
        psite_rec.attribute20,
 language_rec.language_name,
           person_rec.party_rec.attribute16,
           person_rec.party_rec.attribute17,
           person_rec.party_rec.attribute18,
           person_rec.party_rec.attribute19,
           person_rec.party_rec.attribute20,
           person_rec.party_rec.attribute21,
           person_rec.party_rec.attribute22,
           person_rec.party_rec.attribute23,
           person_rec.party_rec.attribute24,
           location_rec.attribute16,
           location_rec.attribute17,
           location_rec.attribute18,
           location_rec.attribute19,
           location_rec.attribute20 ;

           if b2c%notfound then
                 exit;
           end if;
  AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'After  FETCH  ..................  ',
         p_msg_type        => 'DEBUG'
         );
-- sranka 1/17/2003
--  i_import_source_line_id := person_rec.party_rec.orig_system_reference; //original
  i_import_source_line_id := l_import_source_line_id;

  AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'before Create_Customer  ',
         p_msg_type        => 'DEBUG'
         );

  -- TCA mandates changes: bug 4587049
--  org_rec.party_rec.created_by_module := 'AMS_LIST_IMPORT';
  org_rec.created_by_module := 'AMS_LIST_IMPORT';
  person_rec.created_by_module := 'AMS_LIST_IMPORT';
  ocon_rec.created_by_module := 'AMS_LIST_IMPORT';
  --language_rec.created_by_module := 'AMS_LIST_IMPORT';
  location_rec.created_by_module := 'AMS_LIST_IMPORT';
  psite_rec.created_by_module := 'AMS_LIST_IMPORT';
  psiteuse_rec.created_by_module := 'AMS_LIST_IMPORT';
  cpoint_rec.created_by_module := 'AMS_LIST_IMPORT';

  AMS_List_Import_PUB.Create_Customer (
  p_api_version              => 1,
  p_init_msg_list            => 'T',
  p_commit                   => 'F',
  x_return_status            => x_return_status,
  x_msg_count                => x_msg_count,
  x_msg_data                 => x_msg_data,
  p_party_id                 => l_b2c_party_id,
  p_b2b_flag                 => 'N',
  p_import_list_header_id    => P_IMPORT_LIST_HEADER_ID,
  p_party_rec                => party_rec,
  p_org_rec                  => org_rec,
  p_person_rec               => person_rec,
  p_location_rec             => location_rec,
  p_psite_rec                => psite_rec,
  p_cpoint_rec               => cpoint_rec,
  p_email_rec                => email_rec,
  p_phone_rec                => phone_rec,
  p_fax_rec                  => fax_rec,
  p_ocon_rec                 => ocon_rec,
  p_siteuse_rec		     => psiteuse_rec,
  p_web_rec                  => web_rec,
  x_new_party                => x_new_party,
  p_component_name           => x_component_name,
  l_import_source_line_id    => l_import_source_line_id
  );

   AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'after Create_Customer  ' ,
         p_msg_type        => 'DEBUG'
         );

   AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'after Create_Customer x_return_status  = '||x_return_status,
         p_msg_type        => 'DEBUG'
         );

  AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'after Create_Customer x_msg_count = '||to_char(x_msg_count),
         p_msg_type        => 'DEBUG'
         );

  AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'after Create_Customer x_msg_data = '||x_msg_data,
         p_msg_type        => 'DEBUG'
         );

    if x_return_status = 'S' and x_notes is not null and l_b2c_party_id is not null then
      if x_notes is not null then
        create_list_note
        (  p_import_list_header_id,
           i_import_source_line_id,
           l_b2c_party_id,
           'PARTY'   ,
           x_notes,
           x_return_status,
           x_msg_count    ,
           x_msg_data );
          if x_return_status <> 'S' then
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR',ENABLED_FLAG = null
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1, 'T', 'F', null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                i_import_source_line_id,
                null, null, null,null,
                'Error in note creation' );

          end if;
      end if;
    end if;
    if l_vr_code is not null then
         open vehicle_code_exists(l_vr_code);
         fetch vehicle_code_exists into l_vr_code_exists;
         close vehicle_code_exists;
         if l_vr_code_exists is null then
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR',ENABLED_FLAG = null
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1,
                'T',
                'F',
                null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                i_import_source_line_id,
                null, null, null,null,
                'VEHICLE_RESPONSE_CODE : Invalid value for column VEHICLE_RESPONSE_CODE');
        end if;
    end if;
    if l_sa_email is not null then
        open resource_exists (l_sa_email);
        fetch resource_exists into l_resource_id;
        close resource_exists;
        if l_resource_id is null then
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR',ENABLED_FLAG = null
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1,
                'T',
                'F',
                null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                i_import_source_line_id,
                null, null, null,null,
                'SALES_AGENT_EMAIL_ADDRESS : Resource ID does not exist for this sales agent.');
        end if;
        UPDATE ams_imp_source_lines
          SET resource_id     = l_resource_id
        WHERE import_source_line_id = i_import_source_line_id
          AND import_list_header_id = p_import_list_header_id;
     end if;

   if x_msg_count > 1 then
    FOR i IN 1..x_msg_count  LOOP
         x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
         x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
    END LOOP;
    x_msg_data := x_tmp_var1;
  END IF;
    errbuf := 'ERROR -'||substr(x_msg_data,1,180);
    if x_return_status <> 'S' then
      UPDATE ams_imp_source_lines
         SET load_status = 'ERROR',ENABLED_FLAG = null
       WHERE import_source_line_id = i_import_source_line_id;
      AMS_List_Import_PUB.error_capture (
        1,
        'T',
        'F',
        null,
        x_return_status,
        x_msg_count,
        x_msg_data,
        p_import_list_header_id,
        i_import_source_line_id,
        null,
        null,
        x_component_name,
        null,
        substrb(errbuf,1,2000));
        if (x_return_status = 'E' and x_msg_data = 'Threshold')
          then
          exit;
        end if;
    end if;
    i_number_of_rows_processed := i_number_of_rows_processed + 1;
    i_import_source_line_id := null;
    x_return_status      := null;
    x_msg_count          := null;
    x_msg_data           := null;
    x_new_party	     	 := null;
    errbuf		:= null;
   x_tmp_var            := null;
   x_tmp_var1           := null;
   l_resource_id        := null;
   l_vr_code_exists     := null;

END LOOP;
CLOSE b2c;

UPDATE ams_imp_list_headers_all
   -- SET processed_rows = i_number_of_rows_processed
   SET processed_rows  = nvl(processed_rows,0) + i_number_of_rows_processed
 WHERE import_list_header_id = p_import_list_header_id;

end if; --  b2c
END IF;  -- IF p_number_of_processes > 0 then
/*
open c_header_status;
fetch c_header_status into i_batch_size,l_parent_request_id;
close c_header_status;
   AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Stop processing size = '||to_char(i_batch_size),
         p_msg_type        => 'DEBUG'
         );
if i_batch_size < 1 then
   update_cust_import_status(p_import_list_header_id);
end if;
*/
      errbuf:= 'TCA import  Program(-)';
      retcode:=0;
   AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'TCA import  Program(-)',
         p_msg_type        => 'DEBUG'
         );

EXCEPTION
 WHEN OTHERS THEN
   errbuf:= substr(SQLERRM,1,254);
   retcode:= 2;
                UPDATE ams_imp_source_lines
                SET load_status = 'ERROR'
                WHERE import_source_line_id = i_import_source_line_id;
               AMS_List_Import_PUB.error_capture (
                 1,
                'T',
                'F',
                null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                nvl(i_import_source_line_id,0),
                null, null, null,null,
                'Error in TCA load program ' || SQLERRM||' '||SQLCODE);
       l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                 commit;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in TCA load program ' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );
end list_import_to_hz;

-- --------------------------------------------------------
-- This program invokes sql*loader from concurrent program
-- to populate the data from the data file to the OMO application.
--

PROCEDURE load_to_ams(
                    Errbuf                     OUT NOCOPY   VARCHAR2,
                    Retcode                    OUT NOCOPY   VARCHAR2,
                    p_import_list_header_id    IN    NUMBER,     -- To be used as part of executable name.
                    p_control_file             IN    VARCHAR2,   -- Name of file to be used by the SQL*Loader process.
                    p_staged_only              IN    VARCHAR2 , -- Used for staged table import.
                    p_owner_user_id            IN    NUMBER,     -- Used for list generation (resource_id),
                    p_generate_list            IN    VARCHAR2 ,
                    p_list_name                IN    VARCHAR2    --  For list generation name.
                     ) IS

   L_SQL_LOADER      		CONSTANT VARCHAR2(30) := 'SQL*Loader';
   l_short_name      		 	 VARCHAR2(30);
   l_request_id      			 NUMBER;
   l_return_status   			 VARCHAR2(1);
   l_start_time      			 DATE;
   l_import_list_header_name 		 VARCHAR2(120);
   l_msg_count 			         NUMBER;
   l_msg_data        		         VARCHAR2(2000);
   l_msg_buf            		 VARCHAR2(4000);
   l_phase              		 VARCHAR2(30);
   l_status             		 VARCHAR2(30);
   l_dev_phase          		 VARCHAR2(30);
   l_dev_status         		 VARCHAR2(30);
   l_message            		 VARCHAR2(240);
   l_wait_status        		 BOOLEAN;
   l_loaded_rows        		 NUMBER;
   l_post_request_id    		 NUMBER;
   l_server_flag   			 VARCHAR2(1);
   l_dedupe_flag   			 VARCHAR2(1);
   l_status_code   			 VARCHAR2(30);
   l_st_code     			 VARCHAR2(30);
   l_lookup_code     			 VARCHAR2(30);
   i_msg_count 			         NUMBER;
   i_return_status   			 VARCHAR2(1);
   i_msg_data        		         VARCHAR2(2000);
   i_msg_buf            		 VARCHAR2(4000);
   l_list_header_id                      NUMBER;
   l_duplicate_records                   NUMBER;
   l_user_status_id                      NUMBER;
   l_imp_type     			 VARCHAR2(30);
   l_finish_status                       VARCHAR2(30);
   l_execute_mode                        VARCHAR2(1);
   l_batch_id                            NUMBER;
   l_rec_in_stag_tab                     VARCHAR2(1);
   l_load_rows			 	 NUMBER;
 l_total_records             NUMBER;
   l_mesg_text                 VARCHAR2(2000);
   x_import_list_header_id number;
   X_RETURN_STATUS      VARCHAR2(1);
   x_msg_count          NUMBER;
   x_msg_data           VARCHAR2(2000);
   x_hz_dup_check  VARCHAR2(60);
   l_b2b_flag                            VARCHAR2(1);
   l_osr_mapped			VARCHAR2(1);

  CURSOR c_loaded_rows IS
      SELECT COUNT(*)
      FROM   ams_imp_source_lines
      WHERE  import_list_header_id = p_import_list_header_id;

   cursor c_header_name is
          select name, server_flag, status_code, import_type, execute_mode from ams_imp_list_headers_all
          where import_list_header_id = p_import_list_header_id;

   cursor c_status is
          select status_code, nvl(dedupe_flag,'N') from ams_imp_list_headers_all
          where import_list_header_id = p_import_list_header_id;

   cursor c_dup_recs is
          select count(*) from ams_imp_source_lines
          where import_list_header_id = p_import_list_header_id
            and duplicate_flag = 'Y';

   cursor c_loaded_rows_for_lead IS
          SELECT COUNT(*) FROM ams_imp_source_lines
          WHERE import_list_header_id = p_import_list_header_id;

  cursor c_rec_in_stag_tab is
  select 'Y' from ams_imp_source_lines
  where import_list_header_id = p_import_list_header_id
    and load_status in ('ACTIVE','RELOAD')
    and rownum < 2;

 cursor c_total_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status in ('ACTIVE','RELOAD');

-- For Mapped osr
cursor osr_mapped is
SELECT 'Y'  FROM ams_list_src_fields sf,
ams_imp_list_headers_all hd
WHERE sf.field_column_name = 'ORIG_SYSTEM_REFERENCE'
  AND sf.enabled_flag = 'Y'
  AND sf.list_source_type_id = hd.list_source_type_id
  and hd.import_type in ('B2B','B2C')
  AND hd.import_list_header_id = p_import_list_header_id;
BEGIN

--
-- For SQL*Loader programs, the executable file name is equivalent to the
-- control file.  The field "Executable" on the screen is the same as "program"
-- in the API.  We will use the short name for both program and program short name.
--
   l_short_name := 'AMS' || FND_GLOBAL.LOGIN_ID || 'IMP' || p_import_list_header_id;
 x_import_list_header_id := p_import_list_header_id;
    x_hz_dup_check          := fnd_profile.value('AMS_HZ_DEDUPE_RULE');
     if x_hz_dup_check <> 'Y' then
       x_hz_dup_check := 'N';
     end if;

--
   open  c_header_name;
   fetch c_header_name into l_import_list_header_name, l_server_flag, l_status_code, l_imp_type, l_execute_mode;
   close c_header_name;

   if l_execute_mode = 'R' then
         l_lookup_code := 'STAGED';
         l_status_code := 'STAGED';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'STAGED' and default_flag = 'Y';

         select as_import_interface_s.nextval into l_batch_id from dual;

         UPDATE ams_imp_list_headers_all
         set status_code      =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            batch_id          =  l_batch_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;

         UPDATE ams_imp_source_lines
            set batch_id          =  l_batch_id,
                request_id        =  NULL
         where import_list_header_id = p_import_list_header_id
           and load_status in ('RELOAD','ACTIVE');



              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting List Import in RELOAD Mode.',
              p_msg_type        => 'DEBUG'
              );
    end if;

 --  commented by ndadwal for Bug 5113207
 /*  if l_status_code = 'NEW' then
   if l_server_flag = 'Y' then
    if p_staged_only = 'Y' then
     UPDATE ams_imp_list_headers_all
        set loaded_no_of_rows =  l_loaded_rows,
            loaded_date       =  sysdate,
            status_code       =  'STAGING',
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;
       commit;
    end if;

*/
-- added by ndadwal for Bug 5113207
   if l_status_code = 'NEW' then
   if l_server_flag = 'Y' then
    if p_staged_only = 'Y' then
     UPDATE ams_imp_list_headers_all
        set loaded_no_of_rows =  l_loaded_rows,
            loaded_date       =  sysdate,
            status_code       =  'STAGED',
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;
       commit;
    end if;

    l_lookup_code    := 'STAGED';
    l_user_status_id := null;
    SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
    WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
    system_status_code = 'STAGED' and default_flag = 'Y';

    UPDATE ams_imp_list_headers_all
       set loaded_no_of_rows =  l_loaded_rows,
           loaded_date       =  sysdate,
           status_code       =  l_lookup_code,
           user_status_id    =  l_user_status_id,
           status_date       =  sysdate
     where import_list_header_id = p_import_list_header_id;
-- end ndadwal changes

       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Starting SQL*LOADER program to load the data.',
         p_msg_type        => 'DEBUG'
       );

    -- Create the Executable entry.
    FND_PROGRAM.EXECUTABLE (
      executable           => l_short_name,
      application          => 'AMS',
      short_name           => l_short_name,
      description          => l_import_list_header_name,
      execution_method     => L_SQL_LOADER,
      execution_file_name  => p_control_file,
      language_code        => USERENV ('LANG')
      );

    --
    -- Register the concurrent program.
    FND_PROGRAM.REGISTER (
      program                 => l_short_name,
      application             => 'AMS',
      enabled                 => 'Y',
      short_name              => l_short_name,
      executable_short_name   => l_short_name,
      executable_application  => 'AMS',
      language_code           => USERENV ('LANG')
      );

    --
    -- Since this is a SQL*Loader concurrent program,
    -- we don't need to specify other parameters.  The
    -- only other parameter would be the data file name,
    -- but we will include that in the control file.
    --
     l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application      => 'AMS',
                      program          => l_short_name,
                      start_time       => l_start_time
                   );

     IF l_request_id = 0 THEN
                    l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR'  and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                 commit;
          RAISE FND_API.g_exc_unexpected_error;
       ELSE
         FND_MESSAGE.set_name ('AMS', 'AMS_IMP_LOAD_REQUEST_ID');
         FND_MESSAGE.set_token ('REQUEST_ID', l_request_id);

        Ams_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => FND_MESSAGE.get,
         p_msg_type        => 'MILESTONE'
        );
     END IF;
     Commit;
       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'SQL*LOADER -- For details Please check the log file '||p_control_file||'.log',
         p_msg_type        => 'DEBUG'
       );

       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'SQL*LOADER -- For bad records Please check the bad file '||p_control_file||'.bad',
         p_msg_type        => 'DEBUG'
       );


     --

     -- The sql*loader concurrent program MUST finish
     -- before invoking the destination application
     -- concurrent program like TCA or LEADS.
     -- This is also required for the clean up process.

      l_wait_status := FND_CONCURRENT.WAIT_FOR_REQUEST (
                        request_id        => l_request_id,
                        phase             => l_phase,
                        status            => l_status,
                        dev_phase         => l_dev_phase,
                        dev_status        => l_dev_status,
                        message           => l_message
                        );

     ---------------------------------------------
     -- WAIT_STATUS should only come back as
     -- TRUE.  It only comes back as FALSE if
     -- the conc request was not successfully
     -- submitted.
     ---------------------------------------------
     IF NOT l_wait_status THEN
                    l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;
        RAISE FND_API.g_exc_unexpected_error;
     END IF;

     ---------------------------------------------
          OPEN c_loaded_rows;
          FETCH c_loaded_rows INTO l_loaded_rows;
          CLOSE c_loaded_rows;

     FND_MESSAGE.set_name ('AMS', 'AMS_IMP_LOADED_NO_ROWS');
     FND_MESSAGE.set_token ('NUM_ROWS', l_loaded_rows);

     Ams_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_level       => 80,
      p_msg_type        => 'MILESTONE'
     );

     l_lookup_code    := 'STAGED';
     l_user_status_id := null;
     SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
     WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
     system_status_code = 'STAGED' and default_flag = 'Y';

     UPDATE ams_imp_list_headers_all
        set loaded_no_of_rows =  l_loaded_rows,
            loaded_date       =  sysdate,
            status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;

     --
     -- Clean-up the concurrent programs which were created
     -- during program execution.
     FND_PROGRAM.DELETE_PROGRAM (
          program_short_name   => l_short_name,
          application          => 'AMS'
     );

     --
     -- The "executable" will be the same as the program short name
     -- for all run-time generated concurrent programs.  The registered
     -- program must be deleted before the executable can be.
     FND_PROGRAM.DELETE_EXECUTABLE (
        executable_short_name      => l_short_name,
        application                => 'AMS'
     );
  end if; -- for server_flag
  end if; -- for status_code

 -- for post processing here the data is populated to the TCA and OSM
 -- applications using concurrent programs.

    open c_status;
    fetch c_status into l_st_code, l_dedupe_flag;
    close c_status;


  open c_rec_in_stag_tab;
   fetch c_rec_in_stag_tab into l_rec_in_stag_tab;
   close c_rec_in_stag_tab;
   if l_rec_in_stag_tab is NULL then
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting import process, Staging table not populated.',
         p_msg_type        => 'DEBUG'
       );
       l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
      return;
   end if;

-- ------------------------------------------------------
-- ------------RAISE PRE BUSINESS EVENT START ---------------------

              Raise_Business_event(p_import_list_header_id,
                                        'oracle.apps.ams.list.ListImportPreEvent');

-- ------------RAISE PRE BUSINESS EVENT END ---------------------
-- ------------------------------------------------------


   open osr_mapped;
   fetch osr_mapped into l_osr_mapped;
   close osr_mapped;
-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   gen_transposed_phone_number( x_import_list_header_id, x_return_status,
                                x_msg_count, x_msg_data );

if l_imp_type = 'B2B' then
--if party_id is provided and if its of type relationship
--update org_party_id and ocont_party_id
update ams_hz_b2b_mapping_v b2b
set (org_party_id, ocont_party_id) = (select object_id, subject_id from hz_relationships
where party_id = b2b.party_id and object_type = 'ORGANIZATION'
and subject_type = 'PERSON' and relationship_type = 'CONTACT'
and nvl(status,'A') = 'A')
where import_list_header_id = p_import_list_header_id
and party_id is not null
and org_party_id is null;

--if party_id is of type organization then update org_party_id with party_id
update ams_hz_b2b_mapping_v b2b
set org_party_id = party_id
where import_list_header_id = p_import_list_header_id
and party_id is not null
and org_party_id is null;

update ams_hz_b2b_mapping_v
set org_exist = 'Y'
where import_list_header_id = p_import_list_header_id
and org_party_id is not null;

update ams_hz_b2b_mapping_v
set ocont_exist = 'Y'
where import_list_header_id = p_import_list_header_id
and ocont_party_id is not null;

elsif l_imp_type = 'B2C' then

    --aanjaria: bug 4913239: copy party_id to person_party_id so that existence check is by passed
       UPDATE ams_hz_b2c_mapping_v
          SET person_party_id = party_id,
	      person_exist = 'Y'
	WHERE import_list_header_id = p_import_list_header_id
	  AND party_id is not null
	  AND person_party_id is null;
end if;

commit;

 if x_hz_dup_check = 'Y' then
   if l_imp_type = 'B2B' then
     if l_osr_mapped = 'Y' then
       org_existence_checking_osr(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
     end if;
      org_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

     if l_osr_mapped = 'Y' then
      org_cont_existence_chk_osr(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
     end if;
      org_cont_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_cont_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

      org_address_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_address_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

      org_address1_exist_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_address1_exist_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

    ELSE

     if l_osr_mapped = 'Y' then
      per_existence_checking_osr(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
     end if;
      per_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting per_existence_checking.',
         p_msg_type        => 'DEBUG');         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

      per_address_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting per_address_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;
end if;    -- l_imp_type
end if;    --  if x_hz_dup_check = 'Y' then
-- >>>>>>>>>>>>>

    if l_dedupe_flag = 'Y' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting De-Duplicate check in the Marketing tables .',
              p_msg_type        => 'DEBUG'
              );

              dedup_check( p_import_list_header_id);

              open c_dup_recs;
              fetch c_dup_recs into l_duplicate_records;
              close c_dup_recs;
              update ams_imp_list_headers_all
              set number_of_duplicate_records = l_duplicate_records
              where import_list_header_id = p_import_list_header_id;

              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'END De-Duplicate check in the Marketing tables .',
              p_msg_type        => 'DEBUG'
              );
    end if;

        if p_staged_only = 'N' then
            if l_st_code = 'STAGED' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting TCA/LEAD/EVENT program to load the data.',
              p_msg_type        => 'DEBUG'
              );
              open c_total_records;
              fetch c_total_records into l_total_records;
              close c_total_records;
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data  => 'Total Number of records available for processing: '||to_char(l_total_records),
                  p_msg_type        => 'DEBUG'
                );
       execute_reltnship_validation( p_import_list_header_id, l_return_status);
           l_total_records := 0;
           open c_total_records;
           fetch c_total_records into l_total_records;
           close c_total_records;
           if l_total_records = 0 then
                update_cust_import_status(p_import_list_header_id);
                return;
           end if;

             list_loader ( p_import_list_header_id ,
                           l_post_request_id
                         );
             l_total_records := 0;
             open c_total_records;
             fetch c_total_records into l_total_records;
             close c_total_records;
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data  => 'Total Number of records not processed: '||to_char(l_total_records),
                  p_msg_type        => 'DEBUG'
                );


--aanjaria: bug 3888657
-- commenting out follwoing code as list gen was already called by AMSILHZC conc prog
-- spawned from within list_loader API. This was generating a duplicate list.
/*
             if p_generate_list = 'Y' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting List Generation for List Import.',
              p_msg_type        => 'DEBUG'
              );
              l_load_rows := 0;
              select LOADED_NO_OF_ROWS into l_load_rows from ams_imp_list_headers_all
              where import_list_header_id = p_import_list_header_id;

             if l_load_rows > 0 then


             AMS_ListGeneration_PKG.create_import_list
                ( 1,
                  'T',
                  'T',
                  FND_API.G_VALID_LEVEL_FULL,
                  p_owner_user_id,
                  p_import_list_header_id,
                  i_return_status,
                  i_msg_count,
                  i_msg_data,
                  l_list_header_id,
                  p_list_name) ;

             If i_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Error in List Generation --'||i_msg_data,
              p_msg_type        => 'DEBUG'
              );
             End if;
             end if;
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End List Generation for List Import.',
              p_msg_type        => 'DEBUG'
              );
             end if; */
            end if;
        end if;


     -- Import completed successfully
     FND_MESSAGE.set_name ('AMS', 'AMS_IMP_LOAD_COMPLETE');
     FND_MESSAGE.set_token ('REQUEST_ID', l_request_id);

     AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
     );

   errbuf := SUBSTR (FND_MESSAGE.GET, 1, 240);
   retcode := 0;  -- no problems.

EXCEPTION
   WHEN OTHERS THEN
      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
      );
      FND_MESSAGE.set_name ('AMS', 'AMS_IMP_LOAD_FAILED');
      FND_MESSAGE.set_token ('REQUEST_ID', l_request_id);
      l_msg_buf := FND_MESSAGE.get;

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => l_msg_buf,
         p_msg_type        => 'DEBUG'
      );
      errbuf := SUBSTR (l_msg_buf, 1, 240);
      retcode := 2;

END load_to_ams;

-- ------------------------------------------------------
-- This program calls concurrent programs for TCA , Leads
-- etc to populate the data.
--

PROCEDURE list_loader (
                      p_import_list_header_id NUMBER,
                      x_request_id   OUT NOCOPY NUMBER
                     ) IS

   l_request_id         NUMBER;
   l_return_status      VARCHAR2(1);
   l_import_type        VARCHAR2(30);
   l_conc_prog_name     VARCHAR2(60);
   l_lookup_code        VARCHAR2(30);
   l_user_status_id     NUMBER;

   l_phase              VARCHAR2(30);
   l_appli              VARCHAR2(30);
   l_prog               VARCHAR2(30);
   l_status             VARCHAR2(30);
   l_dev_phase          VARCHAR2(30);
   l_dev_status         VARCHAR2(30);
   l_message            VARCHAR2(240);
   l_rstatus            BOOLEAN;
   l_wait_status        BOOLEAN;
   l_batch_id           NUMBER;
   l_validate_file      VARCHAR2(1);
   l_error_exist        VARCHAR2(1);
   l_loaded_records     NUMBER;
   l_failed_records     NUMBER;

   i_msg_buf            VARCHAR2(4000);
   i_msg_code           NUMBER;
   l_mesg_text          VARCHAR2(2000);
   l_numb_of_inst       number;


   cursor c_import_type is
   select import_type,VALIDATE_FILE,NUMBER_OF_INSTANCES from ams_imp_list_headers_all
   where import_list_header_id = p_import_list_header_id;

   cursor c_conc_name is
   SELECT concurrent_program FROM ams_imp_list_import_types
   where  import_type = l_import_type;

   cursor c_error_exist is
         select 'Y' from ams_list_import_errors
            where import_list_header_id = p_import_list_header_id
            and error_type = 'E'
            and rownum < 2;

 cursor c_loaded_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_SUCCESS;

 cursor c_failed_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_ERROR;



begin

   open  c_import_type;
   fetch c_import_type into l_import_type,l_validate_file,l_numb_of_inst;
   close c_import_type;
   open  c_conc_name;
   fetch c_conc_name into l_conc_prog_name;
   close c_conc_name;

      l_lookup_code    := 'SCHEDULED';
      l_user_status_id := null;
     SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
     WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
     system_status_code = 'SCHEDULED' and default_flag = 'Y';


      UPDATE ams_imp_list_headers_all
        set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;

   -- if l_import_type = 'CUSTOMER' then
   if (l_import_type = 'B2B' or l_import_type = 'B2C') then
        -- Call the Validate Process
        if l_validate_file = 'Y' then
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Starting Validation for Customer data.',
                  p_msg_type        => 'DEBUG'
                );

             -- Delete all the errors from the errors table which are reloaded.
		 delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id = 0;
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_RELOAD);
/*
                if l_file_type = 'XML' then
                     update_xml_error_text (
                                        p_import_list_header_id,
                                        l_import_type);
                end if;
*/
                l_return_status := null;
                execute_cust_data_validation ( p_import_list_header_id, l_return_status);
             if l_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Customer import terminated because of error in Data validation process.',
                  p_msg_type        => 'DEBUG'
                );

                l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                return;
             end if;

             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'End Validation for Customer data.',
                  p_msg_type        => 'DEBUG'
                );
        end if;

      l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',
                      program           => l_conc_prog_name,    -- 'AMSILHZC',
                      argument1         => p_import_list_header_id,
		      argument2         => l_numb_of_inst
                   );

              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting TCA program (AMSILHZC) -- concurrent program_id is '||to_char(l_request_id),
              p_msg_type        => 'DEBUG'
              );

   end if;

     IF l_request_id = 0 THEN
                    l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;
          RAISE FND_API.g_exc_unexpected_error;
     end if;

    if l_import_type = 'LEAD' then
/*
      SELECT batch_id into l_batch_id FROM as_import_interface
      WHERE IMP_LIST_HEADER_NUMBER =  p_import_list_header_id AND ROWNUM < 2;
      l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AS',             -- 'AST',
                      program           => l_conc_prog_name, -- ' ASXSLIMP' 'AST_LEAD_IMPORT',
                      argument1         => 'NEW',            -- 'ORACLE.COM',
                      argument2         => NULL,
                      argument3         => l_batch_id,       --  NULL,
                      argument4         => 'N'
                   );
*/
        execute_lead_import ( p_import_list_header_id);
/*
        l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',
                      program           => 'AMSILLDC',
                      argument1         => p_import_list_header_id
                   );
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
             p_msg_data        => 'Starting LEAD program (ASXSLIMP) -- concurrent program_id is '||to_char(l_request_id),
              p_msg_type        => 'DEBUG'
              );
*/
   end if;
/*
    IF l_request_id = 0 THEN
          RAISE FND_API.g_exc_unexpected_error;
     end if;
*/
    if l_import_type = 'EVENT' then
        -- Call the Validate Process
        if l_validate_file = 'Y' then
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Starting Validation for Event data.',
                  p_msg_type        => 'DEBUG'
                );

             -- Delete all the errors from the errors table which are reloaded.
                 delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id = 0;
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_RELOAD);

                l_return_status := null;
                execute_event_data_validation ( p_import_list_header_id, l_return_status);
             if l_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Event import terminated because of error in Data validation process.',
                  p_msg_type        => 'DEBUG'
                );

                l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                return;
             end if;

             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'End Validation for Event data.',
                  p_msg_type        => 'DEBUG'
                );
        end if;

      l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',             -- 'AST',
                      program           => l_conc_prog_name, -- ' AMSERIMP',
                      argument1         => p_import_list_header_id
                   );

           AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
            p_msg_data        => 'Starting EVENT program (AMSERIMP) -- concurrent program_id is '||to_char(l_request_id),
              p_msg_type        => 'DEBUG'
              );

   end if;
     commit;
     -- The sql*loader concurrent program MUST finish
     -- before updating the status_code

      l_wait_status := FND_CONCURRENT.WAIT_FOR_REQUEST (
                        request_id        => l_request_id,
                        phase             => l_phase,
                        status            => l_status,
                        dev_phase         => l_dev_phase,
                        dev_status        => l_dev_status,
                        message           => l_message
                        );

     ---------------------------------------------
     -- WAIT_STATUS should only come back as
     -- TRUE.  It only comes back as FALSE if
     -- the conc request was not successfully
     -- submitted.
     ---------------------------------------------
     IF NOT l_wait_status THEN
                    l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;
        RAISE FND_API.g_exc_unexpected_error;
     END IF;
/*
    if l_import_type = 'LEAD' then
          capture_lead_error(p_import_list_header_id);
    end if;
*/
     l_rstatus := FND_CONCURRENT.get_REQUEST_status (
                        request_id        => l_request_id,
                        APPL_SHORTNAME    => l_appli,
                        program           => l_prog,
                        phase             => l_phase,
                        status            => l_status,
                        dev_phase         => l_dev_phase,
                        dev_status        => l_dev_status,
                        message           => l_message
                        );

     if l_dev_phase = 'COMPLETE' then
      if l_dev_status = 'NORMAL' then
       l_lookup_code    := 'COMPLETED';
       l_user_status_id := null;
       SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
       WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
       system_status_code = 'COMPLETED' and default_flag = 'Y';
      end if;
      if l_dev_status = 'ERROR' then
       l_lookup_code    := 'ERROR';
       l_user_status_id := null;
       SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
       WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
       system_status_code = 'ERROR' and default_flag = 'Y';
      end if;

       UPDATE ams_imp_list_headers_all
        set status_code       = l_lookup_code,
            user_status_id    = l_user_status_id,
            status_date       =  sysdate
       where import_list_header_id = p_import_list_header_id;
     end if;

         -- Delete all the errors from the errors table which are sucessful.
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_SUCCESS);

     open c_loaded_records;
     fetch c_loaded_records into l_loaded_records;
     close c_loaded_records;
     open c_failed_records;
     fetch c_failed_records into l_failed_records;
     close c_failed_records;
     UPDATE ams_imp_list_headers_all
        SET loaded_no_of_rows = l_loaded_records,
            number_of_failed_records = l_failed_records,
            loaded_date = sysdate
      WHERE import_list_header_id = p_import_list_header_id;


   COMMIT;
   x_request_id := l_request_id;
     open c_error_exist;
      fetch c_error_exist into l_error_exist;
      close c_error_exist;
      if l_error_exist = 'Y' then
         l_lookup_code := 'ERROR';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'ERROR' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;

EXCEPTION
       WHEN  others THEN
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
        raise;

end list_loader;

-- --------------------------------------------
--
-- This is the main program which calls all the concurrent programs
-- to populate the data in OMO and then other destination application
-- like TCA or Oracle sales etc.
--
PROCEDURE Import_process (
   p_import_list_header_id    IN    NUMBER,
   p_start_time               IN    DATE,
   p_control_file             IN    VARCHAR2,   -- Name of file to be used by the SQL*Loader process.
   p_staged_only              IN    VARCHAR2 , -- Used for staged table import.
   p_owner_user_id            IN    NUMBER,     -- Used for list generation (resource_id)
   p_generate_list            IN    VARCHAR2 ,
   p_list_name                IN    VARCHAR2,   -- For list generation name.
   x_request_id               OUT NOCOPY   NUMBER     -- Used for concurrent program monitoring (for sql*loader).
) IS

   l_request_id    	NUMBER;
   l_message            VARCHAR2(240);
   l_return_status      VARCHAR2(1);
   l_ret_status         VARCHAR2(1);
   l_msg_count          NUMBER;
   l_msg_data           VARCHAR2(2000);
   l_msg_buf            VARCHAR2(4000);
   l_file_type          VARCHAR2(30);
   L_LOOKUP_CODE        VARCHAR2(30);
   L_USER_STATUS_ID     NUMBER;
   x_imp_type           VARCHAR2(240);
      L_MESG_TEXT		VARCHAR2(2000);


 cursor c_file_type is
 select file_type from ams_imp_documents where import_list_header_id = p_import_list_header_id;

cursor c_imptype is
select import_type from ams_imp_list_headers_all where import_list_header_id = p_import_list_header_id;


begin

       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Starting List Import Process',
         p_msg_type        => 'DEBUG'
       );
        update ams_imp_list_headers_all
           set GENERATE_LIST = decode(p_generate_list,'Y','Y','DUMMY','N','N'),
               GENERATED_LIST_NAME = p_list_name
        where import_list_header_id = p_import_list_header_id;
        commit;

     open c_file_type;
     fetch c_file_type into l_file_type;
     close c_file_type;
   if l_file_type is NULL then
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting import process, File type missing.',
         p_msg_type        => 'DEBUG'
       );
       l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
      return;
   end if;

    open c_imptype;
    fetch c_imptype into x_imp_type;
    close c_imptype;
    if (l_file_type = 'XML' and x_imp_type in ('LEAD','EVENT')) then
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'XML import is not available for EVENT and LEADS, Aborting import process',
         p_msg_type        => 'DEBUG'
       );
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code   =  'ERROR',
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
      return;
    end if;

  if l_file_type = 'CSV' then
  --
  -- SQL*LOADER call to populate the data in OMO tables.
  --
   l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application   => 'AMS',
                      program       => 'AMSILOMC',
                      argument1     => p_import_list_header_id,
                      argument2     => p_control_file,
                      argument3     => p_staged_only,
                      argument4     => p_owner_user_id,
                      argument5     => p_generate_list,
                      argument6     => p_list_name
                   );
     IF l_request_id = 0 THEN
                    l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR'  and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;

          RAISE FND_API.g_exc_unexpected_error;
     end if;
       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'List Import Concurrent Program AMSILOMC Started.',
         p_msg_type        => 'DEBUG'
       );
    x_request_id := l_request_id;
  end if;
  if l_file_type = 'XML' then
            client_load_direct (
                      p_import_list_header_id,
                      p_owner_user_id,
                      p_generate_list,
                      p_list_name);
  end if;

EXCEPTION
       WHEN  others THEN
          raise;

end Import_process;


-- ------------------------------------------

PROCEDURE client_load(
                      p_import_list_header_id  IN NUMBER,
                      p_owner_user_id          IN NUMBER,
                      p_generate_list          IN    VARCHAR2 ,
                      p_list_name              IN    VARCHAR2   -- For list generation name.
                     ) IS

x_prof_file_size       VARCHAR2(100);
x_file_type            VARCHAR2(100);
x_imp_type             VARCHAR2(100);
x_client_file_size     NUMBER;
l_return_status        VARCHAR2(1);
l_request_id           NUMBER;
l_user_status_id       number;
L_MESG_TEXT             varchar2(2000);
L_LOOKUP_CODE           varchar2(30);

cursor c_prof_file_size is
select file_size, file_type from AMS_IMP_DOCUMENTS where import_list_header_id = p_import_list_header_id;

cursor c_imptype is
select import_type from ams_imp_list_headers_all where import_list_header_id = p_import_list_header_id;

BEGIN
 --   x_prof_file_size := fnd_profile.value('AMS_IMP_CLIENT_FILE_SIZE');
    open c_prof_file_size;
    fetch c_prof_file_size into x_client_file_size,x_file_type;
    close c_prof_file_size;
    open c_imptype;
    fetch c_imptype into x_imp_type;
    close c_imptype;
            update ams_imp_list_headers_all
           set GENERATE_LIST = decode(p_generate_list,'Y','Y','DUMMY','N','N'),
               GENERATED_LIST_NAME = p_list_name
        where import_list_header_id = p_import_list_header_id;
        commit;

    if (x_file_type = 'XML' and x_imp_type in ('LEAD','EVENT')) then
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'XML import is not available for EVENT and LEADS, Aborting import process',
         p_msg_type        => 'DEBUG'
       );
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code   =  'ERROR',
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
      return;
    end if;
           l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',
                      program           => 'AMSIMCCM',
                      argument1         => p_import_list_header_id,
                      argument2         => p_owner_user_id,
                      argument3         => p_generate_list,
                      argument4         => p_list_name
                      );
           AMS_Utility_PVT.Create_Log (
           x_return_status   => l_return_status,
           p_arc_log_used_by => G_ARC_IMPORT_HEADER,
           p_log_used_by_id  => p_import_list_header_id,
           p_msg_data        => 'Starting client side import program (AMSIMCCM) -- concurrent program_id is '||to_char(l_request_id),
           p_msg_type        => 'DEBUG');
           commit;
           IF l_request_id = 0 THEN
	                  l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;
              RAISE FND_API.g_exc_unexpected_error;
           end if;

EXCEPTION
       WHEN  others THEN
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
          raise;
end client_load;


-- -------------------------------------------
--
-- This progam checkes the de-duplication rules

PROCEDURE dedup_check(
                      p_import_list_header_id NUMBER
                     ) IS

  i_rule_id        NUMBER;
  i                NUMBER := 0;
  i_col_string     VARCHAR2(2000);
  i_string         VARCHAR2(4000);
  i_str            VARCHAR2(4000);
  i_str1           VARCHAR2(4000);
  i_str2           VARCHAR2(4000);
  i_column         VARCHAR2(60);
  i_table_name     VARCHAR2(60);
  l_return_status  VARCHAR2(1);
  l_word_replace   VARCHAR2(1);
  l_b2b_flag       VARCHAR2(1);
  i_org_value      VARCHAR2(60);
  i_rep_value      VARCHAR2(60);
  i_replace_value  VARCHAR2(60);
  i_imp_src_line_id        NUMBER;
  i_word_rep_type  VARCHAR2(60);
  i_file_type  VARCHAR2(60);
  i_xml_element_id        NUMBER;
  l_rule_type VARCHAR2(30);


/* mayjain bug 5235979 */
  cursor c_rule_type is
         SELECT 'IMPORT_CUST_' || import_type
         FROM ams_imp_list_headers_all
         where import_list_header_id = p_import_list_header_id;

  cursor c_ruleid (p_rule_type VARCHAR2) is
         SELECT us.list_rule_id
         FROM ams_list_rule_usages us, ams_list_rules_all rules
         WHERE us.list_header_id = p_import_list_header_id
         AND us.list_rule_id = rules.list_rule_id
         AND rules.list_rule_type = p_rule_type;
/* mayjain bug 5235979 */

  cursor c_rule_field is
         SELECT field_column_name, WORD_REPLACEMENT_CODE
         FROM ams_list_rule_fields
         WHERE list_rule_id =  i_rule_id;

  cursor c_table_name is
         SELECT field_table_name FROM ams_list_rule_fields
         WHERE list_rule_id =  i_rule_id;

  cursor c_word is
         select nvl(ENABLE_WORD_REPLACEMENT_FLAG,'N'), nvl(b2b_flag,'N') from
         ams_imp_list_headers_all
         WHERE import_list_header_id = p_import_list_header_id;

  cursor c_imp_src is
         select import_source_line_id from ams_imp_source_lines
         WHERE import_list_header_id = p_import_list_header_id
         AND load_status <> 'DUPLICATE';

  cursor c_file_type is
	 select file_type from ams_imp_documents
	 where import_list_header_id = p_import_list_header_id;

  cursor c_dup_recs is
	 select COL68 from ams_imp_source_lines
	 where load_status = 'DUPLICATE'
           AND import_list_header_id = p_import_list_header_id;


begin
  /* mayjain bug 5235979 */
  open c_rule_type ;
  fetch c_rule_type into l_rule_type;
  close c_rule_type;

  AMS_Utility_PVT.Create_Log (
           x_return_status   => l_return_status,
           p_arc_log_used_by => G_ARC_IMPORT_HEADER,
           p_log_used_by_id  => p_import_list_header_id,
           p_msg_data        => 'Dedupe Check Rule Type '||l_rule_type,
           p_msg_type        => 'DEBUG');
  commit;

  open c_ruleid (l_rule_type);
  fetch c_ruleid into i_rule_id;
  close c_ruleid;

  AMS_Utility_PVT.Create_Log (
           x_return_status   => l_return_status,
           p_arc_log_used_by => G_ARC_IMPORT_HEADER,
           p_log_used_by_id  => p_import_list_header_id,
           p_msg_data        => 'Dedupe Check Rule Id '||i_rule_id,
           p_msg_type        => 'DEBUG');
  commit;
  /* mayjain bug 5235979 */

  open c_table_name;
  fetch c_table_name into i_table_name;
  close c_table_name;

  open c_word;
  fetch c_word into l_word_replace, l_b2b_flag;
  close c_word;

  open c_file_type;
  fetch c_file_type into i_file_type;
  close c_file_type;

  i_string := 'update '||i_table_name||' set dedupe_key = ';

 if l_word_replace = 'N' then
  open c_rule_field;
  LOOP
    fetch c_rule_field into i_column, i_word_rep_type;
    exit when c_rule_field%notfound;
    if i = 0 then
        i_string := i_string||i_column;
      else
        i_string := i_string||'||'||'''.'''||'||'||i_column;
    end if;
    i := 1;
  END LOOP;
  close c_rule_field;
  i_string := i_string||'' ;
  i_string := i_string||' where import_list_header_id = :1';

   EXECUTE IMMEDIATE i_string USING IN p_import_list_header_id;
 end if ; -- l_word_replace = 'N;


 if l_word_replace = 'Y' then
  open c_imp_src;
  LOOP
  fetch c_imp_src into i_imp_src_line_id;
    exit when c_imp_src%notfound;
  i_string := 'update '||i_table_name||' set dedupe_key = ';
  i := 0;
  open c_rule_field;
  LOOP
    fetch c_rule_field into i_column, i_word_rep_type;
    exit when c_rule_field%notfound;
    i_org_value := null;
    i_rep_value := null;
    i_replace_value := null;
     i_str := 'select '||i_column||' from '||i_table_name;
     i_str := i_str||' where import_source_line_id = :i_imp_src_line_id ';

    EXECUTE IMMEDIATE i_str INTO i_org_value using i_imp_src_line_id;

    i_rep_value := AMS_ListDedupe_PVT.Replace_Word(upper(i_org_value),i_word_rep_type);
    if i_rep_value is not null then
      i_replace_value := '''';
      i_replace_value := i_replace_value||i_rep_value;
      i_replace_value := i_replace_value||'''';
      i_column := i_replace_value;
    end if;
    if i = 0 then
        i_string := i_string||i_column;
      else
        i_string := i_string||'||'||'''.'''||'||'||i_column;
    end if;
    i := 1;
  END LOOP;
  close c_rule_field;
  i_string := i_string||'' ;
  i_string := i_string||' where import_list_header_id = :p_import_list_header_id ';
  i_string := i_string||' and    import_source_line_id = :i_imp_src_line_id ';

    EXECUTE IMMEDIATE i_string USING p_import_list_header_id, i_imp_src_line_id;
   i_string    := null;
  END LOOP;
  close c_imp_src;
 end if ; -- l_word_replace = 'y  ;


  UPDATE ams_imp_source_lines a SET a.duplicate_flag = 'Y' , load_status = 'DUPLICATE'
  WHERE a.import_list_header_id = p_import_list_header_id
    AND a.ROWID > (SELECT MIN(b.ROWID) FROM ams_imp_source_lines b
                      WHERE b.import_list_header_id = a.import_list_header_id
  		        AND b.dedupe_key = a.dedupe_key
		        AND b.import_list_header_id = p_import_list_header_id
                   );
  exception
     when others then
       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
        raise;

end dedup_check;

PROCEDURE capture_lead_error(
   p_import_list_header_id  IN    NUMBER
                            ) IS

i_lead_error      VARCHAR2(2000);
l_ret_status      varchar(1);

cursor c_error is
 	SELECT error.error_text
	FROM as_lead_import_errors error,
     	     as_import_interface inter
	WHERE error.batch_id = inter.batch_id
  	AND inter.IMP_LIST_HEADER_NUMBER = p_import_list_header_id;

BEGIN

 OPEN c_error;
 LOOP
    FETCH c_error into i_lead_error;
    exit when c_error%notfound;
    AMS_Utility_PVT.Create_Log (
       x_return_status   => l_ret_status,
       p_arc_log_used_by => G_ARC_IMPORT_HEADER,
       p_log_used_by_id  => p_import_list_header_id,
       p_msg_data        => 'Lead Error- '||i_lead_error,
       p_msg_type        => 'DEBUG'
    );
 END LOOP;
 CLOSE c_error;
 exception
     when others then
       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
        raise;
END capture_lead_error;
--

PROCEDURE execute_lead_import (
          --                  Errbuf          OUT NOCOPY     VARCHAR2,
          --                  Retcode         OUT NOCOPY     VARCHAR2,
                            p_import_list_header_id NUMBER
                            ) IS

   l_phase              VARCHAR2(30);
   l_appli              VARCHAR2(30);
   l_prog               VARCHAR2(30);
   l_status             VARCHAR2(30);
   l_dev_phase          VARCHAR2(30);
   l_dev_status         VARCHAR2(30);
   l_message            VARCHAR2(240);
   l_rstatus            BOOLEAN;
   l_wait_status        BOOLEAN;

   l_source_system      VARCHAR2(100);
   l_lead_status        VARCHAR2(30);
   i_processed_records  NUMBER;
   i_failed_records     NUMBER;
   l_request_id         NUMBER;
   l_conc_prog_name     VARCHAR2(60);

   l_ret_status      varchar(1);

   l_import_type        VARCHAR2(30);
   l_batch_id           NUMBER;
   l_lookup_code        VARCHAR2(30);
   l_return_status      VARCHAR2(1);
   l_user_status_id     NUMBER;
   l_execute_mode	VARCHAR2(1);
   l_validate_file	VARCHAR2(1);
   x_return_status      VARCHAR2(1);
   l_error_exist        VARCHAR2(1);
   l_rec_in_ams		NUMBER;
   l_rec_failed_in_ams	NUMBER;
   l_rec_in_as		NUMBER;
   l_rec_succ_in_as	NUMBER;
   l_rec_fail_in_as     NUMBER;
   l_loaded_records     NUMBER;
   l_failed_records     NUMBER;
   l_rec_dup_in_as      NUMBER;
 L_MESG_TEXT          varchar2(2000);

  cursor c_lead_status is
   SELECT distinct load_status FROM as_import_interface
   WHERE load_status = 'ERROR' AND batch_id = l_batch_id;

   cursor c_lead_status_sucess is
   SELECT distinct load_status FROM as_import_interface
   WHERE load_status = 'SUCCESS' AND batch_id = l_batch_id;

   cursor c_event_status is
   select nvl(PROCESSED_ROWS,0), nvl(NUMBER_OF_FAILED_RECORDS,0)
   from ams_imp_list_headers_all
   where import_list_header_id = p_import_list_header_id;

  cursor c_conc_name is
   SELECT concurrent_program FROM ams_imp_list_import_types
   where  import_type = 'LEAD';

  cursor c_lead_process is
      SELECT batch_id, VALIDATE_FILE, EXECUTE_MODE FROM ams_imp_list_headers_all
      WHERE import_list_header_id =  p_import_list_header_id ;

  cursor c_lead_source_system is
  select source_system from ams_lead_mapping_v
  where import_list_header_id =  p_import_list_header_id
    and load_status in ('ACTIVE','RELOAD')
    and source_system is not NULL
    and rownum < 2;

/*
  cursor c_error_exist is
   select 'Y' from ams_imp_source_lines -- ams_list_import_errors
   where import_list_header_id = p_import_list_header_id
     and load_status = 'ERROR'
     -- and error_type = 'E'
     and rownum < 2;
*/
 cursor c_error_exist is
   select 'Y' from ams_list_import_errors
   where import_list_header_id = p_import_list_header_id
     and error_type = 'E'
     and col1 <> 'This is a duplicate lead.'
     and rownum < 2;

  cursor c_rec_in_ams is
  select count(*) from ams_imp_source_lines
  where import_list_header_id = p_import_list_header_id
    and load_status in ('ACTIVE','RELOAD');

  cursor c_rec_failed_in_ams is
  select count(*) from ams_imp_source_lines lines
  where lines.import_list_header_id = p_import_list_header_id
    and lines.load_status = G_STATUS_ERROR;

/*
  cursor c_rec_failed_in_ams is
  select count(*) from ams_imp_source_lines lines,
                       ams_list_import_errors errors
  where lines.import_list_header_id = p_import_list_header_id
    and lines.load_status = 'ERROR'
    and lines.import_list_header_id = errors.import_list_header_id
    and lines.IMPORT_SOURCE_LINE_ID = errors.IMPORT_SOURCE_LINE_ID
    and errors.batch_id = l_batch_id
    and errors.error_type = 'E';
*/

  cursor c_rec_uploaded_in_as is
  select count(*) from as_import_interface
  where batch_id = l_batch_id;

  cursor c_rec_pro_succ_in_as is
  select count(*) from as_import_interface
  where batch_id = l_batch_id
    and load_status = 'SUCCESS';

 cursor c_rec_pro_fail_in_as is
  select count(*) from as_import_interface
  where batch_id = l_batch_id
    and load_status in ('ERROR','T-ERROR','UNEXP_ERROR');


 cursor c_loaded_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_SUCCESS;

 cursor c_failed_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
   and load_status = G_STATUS_ERROR;

  cursor c_rec_pro_dup_in_as is
  select count(*) from as_import_interface
  where batch_id = l_batch_id
    and load_status = 'DUPLICATE';


BEGIN

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Starting import for LEAD.',
         p_msg_type        => 'DEBUG'
       );

     open  c_conc_name;
     fetch c_conc_name into l_conc_prog_name;
     close c_conc_name;

   open c_rec_in_ams;
   fetch c_rec_in_ams into l_rec_in_ams;
   close c_rec_in_ams;

/*
      SELECT batch_id into l_batch_id FROM as_import_interface
      WHERE IMP_LIST_HEADER_NUMBER =  p_import_list_header_id AND ROWNUM < 2;
       as_import_sl_pvt.main(l_msg_buf,
                             l_msg_code,
                             'NEW', -- 'MARKETING',
                              sysdate,
                              l_batch_id,
                              'N'
                             );
       capture_lead_error(p_import_list_header_id);
*/
	open c_lead_process;
        fetch c_lead_process into l_batch_id,l_validate_file, l_execute_mode;
	close c_lead_process;

	-- Call the Validate Process
	if l_validate_file = 'Y' then
	     AMS_Utility_PVT.Create_Log (
       		  x_return_status   => l_return_status,
        	  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
        	  p_log_used_by_id  => p_import_list_header_id,
         	  p_msg_data        => 'Starting Validation for LEAD data.',
         	  p_msg_type        => 'DEBUG'
       		);

	-- Delete all the errors from the errors table which are reloaded.
                 delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id = 0;
		delete from ams_list_import_errors where import_list_header_id
		= p_import_list_header_id and import_source_line_id in
		(select import_source_line_id from ams_imp_source_lines where
		import_list_header_id = p_import_list_header_id and load_status = G_STATUS_RELOAD);

                x_return_status := null;
		execute_lead_data_validation ( p_import_list_header_id,x_return_status );
             if x_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Lead import terminated because of error in Data validation process.',
                  p_msg_type        => 'DEBUG'
                );

                l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                return;
             end if;

	     AMS_Utility_PVT.Create_Log (
       		  x_return_status   => l_return_status,
        	  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
        	  p_log_used_by_id  => p_import_list_header_id,
         	  p_msg_data        => 'End Validation for LEAD data.',
         	  p_msg_type        => 'DEBUG'
       		);
	end if;
   	open c_rec_failed_in_ams;
   	fetch c_rec_failed_in_ams into l_rec_failed_in_ams;
   	close c_rec_failed_in_ams;

	-- Uploads the Lead's interface table.
	     AMS_Utility_PVT.Create_Log (
       		  x_return_status   => l_return_status,
        	  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
        	  p_log_used_by_id  => p_import_list_header_id,
         	  p_msg_data        => 'Starting LEAD data upload.',
         	  p_msg_type        => 'DEBUG'
       		);
	     AMS_ImportClient_PVT.Load_Lead_Data_To_Interface(p_import_list_header_id,x_return_status);
	     AMS_Utility_PVT.Create_Log (
       		  x_return_status   => l_return_status,
        	  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
        	  p_log_used_by_id  => p_import_list_header_id,
         	  p_msg_data        => 'End LEAD data upload.',
         	  p_msg_type        => 'DEBUG'
       		);

              if x_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Lead import terminated because of Data upload error.',
                  p_msg_type        => 'DEBUG'
                );

	        l_lookup_code := 'ERROR';
         	l_user_status_id := null;
         	SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         	WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         	system_status_code = 'ERROR' and default_flag = 'Y';

         	UPDATE ams_imp_list_headers_all
         	set status_code       =  l_lookup_code,
            	user_status_id    =  l_user_status_id,
            	status_date       =  sysdate
         	where import_list_header_id = p_import_list_header_id;
		return;
	     end if;

	     open c_lead_source_system;
     	     fetch c_lead_source_system into l_source_system;
      	     close c_lead_source_system;
     	     if l_source_system is NULL then
         	AMS_Utility_PVT.Create_Log (
         	x_return_status   => l_return_status,
         	p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         	p_log_used_by_id  => p_import_list_header_id,
         	p_msg_data        => 'Aborting import process because SOURCE_SYSTEM is NULL.',
         	p_msg_type        => 'DEBUG'
       		);
                open c_rec_failed_in_ams;
                fetch c_rec_failed_in_ams into l_rec_failed_in_ams;
                close c_rec_failed_in_ams;

         	l_lookup_code := 'ERROR';
         	l_user_status_id := null;
         	SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         	WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         	system_status_code = 'ERROR' and default_flag = 'Y';

         	UPDATE ams_imp_list_headers_all
         	set status_code       =  l_lookup_code,
            	user_status_id    =  l_user_status_id,
            	status_date       =  sysdate,
                number_of_failed_records = l_rec_failed_in_ams
         	where import_list_header_id = p_import_list_header_id;

       		return;
     	     end if;

      l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AS',             -- 'AST',
                      program           => l_conc_prog_name, -- ' ASXSLIMP' 'AST_LEAD_IMPORT',
                      argument1         => l_source_system, -- 'NEW',    -- 'ORACLE.COM',
                      argument2         => NULL,
                      argument3         => l_batch_id,       --  NULL,
                      argument4         => 'N'
                   );

             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
             p_msg_data        => 'Starting LEAD program (ASXSLIMP) -- concurrent program_id is '||to_char(l_request_id),
              p_msg_type        => 'DEBUG'
              );

      IF l_request_id = 0 THEN
                          l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR'  and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;
          RAISE FND_API.g_exc_unexpected_error;
     end if;

     commit;
     -- The concurrent program MUST finish
     -- before updating the status_code

      l_wait_status := FND_CONCURRENT.WAIT_FOR_REQUEST (
                        request_id        => l_request_id,
                        phase             => l_phase,
                        status            => l_status,
                        dev_phase         => l_dev_phase,
                        dev_status        => l_dev_status,
                        message           => l_message
                        );

     ---------------------------------------------
     -- WAIT_STATUS should only come back as
     -- TRUE.  It only comes back as FALSE if
     -- the conc request was not successfully
     -- submitted.
     ---------------------------------------------
     IF NOT l_wait_status THEN
        RAISE FND_API.g_exc_unexpected_error;
     END IF;


   l_rstatus := FND_CONCURRENT.get_REQUEST_status (
                        request_id        => l_request_id,
                        APPL_SHORTNAME    => l_appli,
                        program           => l_prog,
                        phase             => l_phase,
                        status            => l_status,
                        dev_phase         => l_dev_phase,
                        dev_status        => l_dev_status,
                        message           => l_message
                        );
     if l_dev_phase = 'COMPLETE' then
/*
      if l_dev_status = 'NORMAL' then
       l_lookup_code    := 'COMPLETED';
       l_user_status_id := null;
       SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
       WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
       system_status_code = 'COMPLETED' and default_flag = 'Y';
      end if;
*/
      if l_dev_status = 'ERROR' then
       l_lookup_code    := 'ERROR';
       l_user_status_id := null;
       SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
       WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
       system_status_code = 'ERROR' and default_flag = 'Y';
       UPDATE ams_imp_list_headers_all
        set status_code       = l_lookup_code,
            user_status_id    = l_user_status_id,
            status_date       =  sysdate
       where import_list_header_id = p_import_list_header_id;
           AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'LEAD program completed with errors Please check the log file.',
              p_msg_type        => 'DEBUG'
              );
      end if;

      -- Post process for Lead import.
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Starting LEAD post process.',
                  p_msg_type        => 'DEBUG'
                );
             AMS_ImportClient_PVT.Mark_Insert_Lead_Errors(p_import_list_header_id,x_return_status);
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'End LEAD post process.',
                  p_msg_type        => 'DEBUG'
                );
     end if;

       open c_lead_status;
       fetch c_lead_status into l_lead_status;
       close c_lead_status;
       if l_lead_status = 'ERROR' then
/*
         l_lookup_code := 'ERROR';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'ERROR' and default_flag = 'Y';
*/
          AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Some of the leads in the batch has errors.',
              p_msg_type        => 'DEBUG'
              );
/*
         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
*/
       end if;

         --  capture_lead_error(p_import_list_header_id);

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'End client load for LEAD.',
         p_msg_type        => 'DEBUG'
       );
      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Processing is done for Batch : '||to_char(l_batch_id),
         p_msg_type        => 'DEBUG'
       );

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Records available for process : '||to_char(l_rec_in_ams),
         p_msg_type        => 'DEBUG'
       );

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Records failed data validation : '||to_char(l_rec_failed_in_ams),
         p_msg_type        => 'DEBUG'
       );

   open c_rec_uploaded_in_as;
   fetch c_rec_uploaded_in_as into l_rec_in_as;
   close c_rec_uploaded_in_as;
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Records uploaded/available for Lead import process : '||to_char(l_rec_in_as),
         p_msg_type        => 'DEBUG'
       );

   open c_rec_pro_fail_in_as;
   fetch c_rec_pro_fail_in_as into l_rec_fail_in_as;
   close c_rec_pro_fail_in_as;
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Records failed during Lead import process : '||to_char(l_rec_fail_in_as),
         p_msg_type        => 'DEBUG'
       );


   open c_rec_pro_succ_in_as;
   fetch c_rec_pro_succ_in_as into l_rec_succ_in_as;
   close c_rec_pro_succ_in_as;
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Records successfully processed Lead import : '||to_char(l_rec_succ_in_as),
         p_msg_type        => 'DEBUG'
       );
   l_rec_dup_in_as := null;
   open c_rec_pro_dup_in_as;
   fetch c_rec_pro_dup_in_as into l_rec_dup_in_as;
   close c_rec_pro_dup_in_as;
     if nvl(l_rec_dup_in_as,0) > 0 then
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Duplicate Leads in Lead import process : '||to_char(l_rec_dup_in_as),
         p_msg_type        => 'DEBUG'
       );
      end if;

        -- Delete all the errors from the errors table which are sucessful.
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_SUCCESS);

    -- STATUS CODE PROCESS

     process_status_code (p_import_list_header_id);


 exception
     when others then
       AMS_Utility_PVT.Create_Log (
         x_return_status   => l_ret_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
        raise;

END execute_lead_import;


--
--
-- This progam updates the party for the rented list
--
PROCEDURE update_rented_list_party (
       p_party_id                  IN      NUMBER,
       p_return_status             OUT NOCOPY     VARCHAR2,
       p_msg_count                 OUT NOCOPY     NUMBER,
       p_msg_data                  OUT NOCOPY     VARCHAR2

                     ) IS

x_b2b                           varchar(30);
x_rented_list_flag              varchar(1);
x_email_address                 varchar2(2000);
x_phone_country_code            VARCHAR2(10);
x_phone_area_code               VARCHAR2(10);
x_phone_number                  VARCHAR2(40);
x_phone_extention               VARCHAR2(20);
x_date1                         DATE := sysdate;
l_last_update_date              DATE;
l_last_update_date1             DATE;
x_profile_id                    NUMBER;
x_return_status                 VARCHAR2(100);
x_msg_count                     NUMBER;
x_msg_data                      VARCHAR2(2000);
x_tmp_var                       VARCHAR2(2000);
x_tmp_var1                      VARCHAR2(2000);
X_PARTY_REL_PARTY_ID            NUMBER;
x_relationship_id               NUMBER;
x_org_contact_id                NUMBER;
x_date_one                      DATE := sysdate;
x_date_two                      DATE := sysdate;
x_date_three                    DATE := sysdate;
x_org_party_id                  NUMBER;
x_person_id                     NUMBER;
x_gen_party_site_number         VARCHAR2(1);
x_hz_dup_check                  VARCHAR2(60);
x_import_list_header_id         NUMBER;
x_location_id                   number;
l_lp_psite_id                   NUMBER;
x_Party_site_id                 number;
x_party_site_number             VARCHAR2(30);
l_phone_exists                  VARCHAR2(1);
l_email_exists                  VARCHAR2(1);
x_contact_point_id              number;
x_per_party_id                  number;
l_object_version		number;
l_object_version2		number;
l_object_version3		number;
-- Cursor for B2B party type

cursor b2b is
 SELECT
 IMPORT_SOURCE_LINE_ID,
 PARTY_NAME,
 FISCAL_YEAREND_MONTH,
 DUNS_NUMBER,
 EMPLOYEES_TOTAL,
 LINE_OF_BUSINESS,
 YEAR_ESTABLISHED,
 TAX_REFERENCE,
 CEO_NAME,
 PERSON_FIRST_NAME,
 PERSON_MIDDLE_NAME,
 PERSON_LAST_NAME,
 PERSON_NAME_SUFFIX,
 PERSON_name_prefix,
 -- BEST_TIME_CONTACT_BEGIN,
 -- BEST_TIME_CONTACT_END,
 COUNTRY,
 ADDRESS1,
 ADDRESS2,
 CITY,
 COUNTY,
 STATE,
 PROVINCE,
 POSTAL_CODE,
 -- TIME_ZONE,
 EMAIL_ADDRESS,
 PHONE_COUNTRY_CODE,
 PHONE_AREA_CODE,
 PHONE_NUMBER,
 PHONE_EXTENTION,
 DEPARTMENT,
 JOB_TITLE,
 DECISION_MAKER_FLAG,
 SIC_CODE,
 SIC_CODE_TYPE,
 -- TOTAL_NUM_OF_ORDERS,
 -- TOTAL_ORDERED_AMOUNT,
 -- LAST_ORDERED_DATE   ,
 ANALYSIS_FY         ,
 CURR_FY_POTENTIAL_REVENUE,
 NEXT_FY_POTENTIAL_REVENUE,
 GSA_INDICATOR_FLAG       ,
 MISSION_STATEMENT        ,
 ORGANIZATION_NAME_PHONETIC,
 CATEGORY_CODE              ,
 JGZZ_FISCAL_CODE           ,
 -- TAX_NAME                   ,
 ADDRESS3                   ,
 ADDRESS4                   ,
 ADDRESS_LINES_PHONETIC     ,
 -- APARTMENT_FLAG             ,
 -- bug 4641591: columns obsolete
 -- PO_BOX_NUMBER              ,
 --  HOUSE_NUMBER               ,
 --  STREET_SUFFIX              ,
 -- SECONDARY_SUFFIX_ELENENT   ,
 --  STREET                     ,
 -- RURAL_ROUTE_TYPE           ,
 -- RURAL_ROUTE_NUMBER         ,
 --  STREET_NUMBER              ,
 --  FLOOR                      ,
 --  SUITE                      ,
 POSTAL_PLUS4_CODE          ,
 -- OVERSEAS_ADDRESS_FLAG   ,
 identifying_address_flag   ,
 to_date(ADDRESS_EFFECTIVE_DATE,'MM/DD/YYYY'),
to_date(ADDRESS_EXPIRATION_DATE,'MM/DD/YYYY'),
--ANNUAL_REVENUE,
--ANNUAL_REVENUE_CURRENCY,
BRANCH_FLAG,
BUSINESS_LINE,
BUSINESS_SCOPE,
CHIEF_EXECUTIVE_TITLE,
CONGRESSIONAL_DISTRICT_CODE,
CONTROL_YEAR,
CORPORATION_CLASS,
CREDIT_SCORE,
CREDIT_SCORE_COMMENTARY,
--CUSTOMER_CATEGORY,
DB_RATING,
to_date(DATE_OF_BIRTH,'MM/DD/YYYY'),
to_date(DATE_OF_DEATH,'MM/DD/YYYY'),
DEBARMENTS_COUNT,
to_date(DEBARTMENTS_DATE,'MM/DD/YYYY'),
DECLARED_ETHNICITY,
DEPARTMENT_INDICATOR,
DESCRIPTION,
DISADVANTAGED_INDICATOR,
ENQUIRY_DUNS,
EXPORT_INDICATOR,
FAILURE_SCORE,
FAILURE_SCORE_COMMENTARY,
FAILURE_SCORE_NATL_PERCENTILE,
FAILURE_SCORE_OVERRIDE_CODE,
--FISCAL_CODE,
GLOBAL_FAILURE_SCORE,
HEADQUARTER_BRANCH_INDICATOR,
HEAD_OF_HOUSEHOLD_FLAG,
HOUSEHOLD_SIZE,
IMPORT_INDICATOR,
ORGANIZATION_KNOWN_AS,
ORGANIZATION_KNOWN_AS2,
ORGANIZATION_KNOWN_AS3,
ORGANIZATION_KNOWN_AS4,
ORGANIZATION_KNOWN_AS5,
PERSON_KNOWN_AS,
PERSON_KNOWN_AS2,
PERSON_KNOWN_AS3,
PERSON_KNOWN_AS4,
PERSON_KNOWN_AS5,
LABOR_SURPLUS_INDICATOR,
LOCAL_ACTIVITY_CODE,
LOCAL_ACTIVITY_CODE_TYPE,
LOCATION_DIRECTIONS ,
--LOCATION_STATUS,
MARITAL_STATUS,
to_date(MARITAL_STATUS_EFFECTIVE_DATE,'MM/DD/YYYY'),
MINORITY_OWNED_INDICATOR,
MINORITY_OWNED_TYPE,
--ORGANIZATION_ALIAS,
ORGANIZATION_TYPE,
ORGANIZATION_URL,
OUT_OF_BUSINESS_INDICATOR,
PERSONAL_INCOME,
PERSON_ACADEMIC_TITLE,
PERSON_FIRST_NAME_PHONETIC,
PERSON_LAST_NAME_PHONETIC,
MIDDLE_NAME_PHONETIC,
PERSON_NAME_PHONETIC,
PERSON_PREVIOUS_TITLE_NAME,
PLACE_OF_BIRTH,
--PREFERRED_NAME,
PRINCIPAL_NAME,
PRINCIPAL_TITLE,
PUBLIC_PRIVATE_OWNERSHIP_FLAG,
RENT_OWNED_INDICATOR,
--RENT_OWNER_INDICATOR,
SECOND_TITLE,
SHORT_DESCRIPTION,
SMALL_BUSINESS_INDICATOR,
TAX_ID,
WOMAN_OWNED_INDICATOR,
ORGANIZATION_ATTRIBUTE1,
ORGANIZATION_ATTRIBUTE2,
ORGANIZATION_ATTRIBUTE3,
ORGANIZATION_ATTRIBUTE4,
ORGANIZATION_ATTRIBUTE5,
ORGANIZATION_ATTRIBUTE6,
ORGANIZATION_ATTRIBUTE7,
ORGANIZATION_ATTRIBUTE8,
ORGANIZATION_ATTRIBUTE9,
ORGANIZATION_ATTRIBUTE10,
ORGANIZATION_ATTRIBUTE11,
ORGANIZATION_ATTRIBUTE12,
ORGANIZATION_ATTRIBUTE13,
ORGANIZATION_ATTRIBUTE14,
ORGANIZATION_ATTRIBUTE15,
PERSON_ATTRIBUTE1,
PERSON_ATTRIBUTE2,
PERSON_ATTRIBUTE3,
PERSON_ATTRIBUTE4,
PERSON_ATTRIBUTE5,
PERSON_ATTRIBUTE6,
PERSON_ATTRIBUTE7,
PERSON_ATTRIBUTE8,
PERSON_ATTRIBUTE9,
PERSON_ATTRIBUTE10,
PERSON_ATTRIBUTE11,
PERSON_ATTRIBUTE12,
PERSON_ATTRIBUTE13,
PERSON_ATTRIBUTE14,
PERSON_ATTRIBUTE15,
ORG_CONTACT_ATTRIBUTE1,
ORG_CONTACT_ATTRIBUTE2,
ORG_CONTACT_ATTRIBUTE3,
ORG_CONTACT_ATTRIBUTE4,
ORG_CONTACT_ATTRIBUTE5,
ORG_CONTACT_ATTRIBUTE6,
ORG_CONTACT_ATTRIBUTE7,
ORG_CONTACT_ATTRIBUTE8,
ORG_CONTACT_ATTRIBUTE9,
ORG_CONTACT_ATTRIBUTE10,
ORG_CONTACT_ATTRIBUTE11,
ORG_CONTACT_ATTRIBUTE12,
ORG_CONTACT_ATTRIBUTE13,
ORG_CONTACT_ATTRIBUTE14,
ORG_CONTACT_ATTRIBUTE15,
ADDRESS_ATTRIBUTE1,
ADDRESS_ATTRIBUTE2,
ADDRESS_ATTRIBUTE3,
ADDRESS_ATTRIBUTE4,
ADDRESS_ATTRIBUTE5,
ADDRESS_ATTRIBUTE6,
ADDRESS_ATTRIBUTE7,
ADDRESS_ATTRIBUTE8,
ADDRESS_ATTRIBUTE9,
ADDRESS_ATTRIBUTE10,
ADDRESS_ATTRIBUTE11,
ADDRESS_ATTRIBUTE12,
ADDRESS_ATTRIBUTE13,
ADDRESS_ATTRIBUTE14,
ADDRESS_ATTRIBUTE15,
FAX_COUNTRY_CODE,
FAX_AREA_CODE,
FAX_NUMBER,
ORG_ATTRIBUTE_CATEGORY,
PERSON_ATTRIBUTE_CATEGORY,
ORG_CONTACT_ATTRIBUTE_CATEGORY,
ADDRESS_ATTRIBUTE_CATEGORY ,
PARTY_SITE_USE

 FROM AMS_HZ_B2B_MAPPING_V
 WHERE party_id =  p_party_id
 and   load_status = 'SUCCESS';

-- Cursor B2C Party Type

CURSOR B2C IS
 SELECT
 IMPORT_SOURCE_LINE_ID,
 PERSON_FIRST_NAME,
 PERSON_MIDDLE_NAME,
 PERSON_LAST_NAME,
 PERSON_NAME_SUFFIX,
 PERSON_name_prefix,
 -- BEST_TIME_CONTACT_BEGIN,
 -- BEST_TIME_CONTACT_END,
 COUNTRY,
 ADDRESS1,
 ADDRESS2,
 CITY,
 COUNTY,
 STATE,
 PROVINCE,
 POSTAL_CODE,
 -- TIME_ZONE,
 EMAIL_ADDRESS,
 PHONE_COUNTRY_CODE,
 PHONE_AREA_CODE,
 PHONE_NUMBER,
 PHONE_EXTENTION,
--  PERSON_PRE_NAME_ADJUNCT,
 SALUTATION,
 ADDRESS3                   ,
 ADDRESS4                   ,
 ADDRESS_LINES_PHONETIC     ,
 -- APARTMENT_FLAG             ,
 -- bug 4641591: columns obsolete
 --  PO_BOX_NUMBER              ,
 --  HOUSE_NUMBER               ,
 --  STREET_SUFFIX              ,
 -- SECONDARY_SUFFIX_ELEMENT   ,
 --  STREET                     ,
 -- RURAL_ROUTE_TYPE           ,
 -- RURAL_ROUTE_NUMBER         ,
 --  STREET_NUMBER              ,
 --  FLOOR                      ,
 --  SUITE                      ,
 POSTAL_PLUS4_CODE          ,
 -- OVERSEAS_ADDRESS_FLAG   ,
 identifying_address_flag   ,
  PERSON_LAST_NAME_PHONETIC,
 PERSON_FIRST_NAME_PHONETIC ,
--PREFERRED_NAME,
URL,-- replace PREFERRED_NAME with URL
SECOND_TITLE,
to_date(DATE_OF_BIRTH,'MM/DD/YYYY'),
PERSON_ACADEMIC_TITLE,
PERSON_PREVIOUS_TITLE_NAME,
PERSON_KNOWN_AS,
PERSON_KNOWN_AS2,
PERSON_KNOWN_AS3,
PERSON_KNOWN_AS4,
PERSON_KNOWN_AS5,
PERSON_NAME_PHONETIC,
MIDDLE_NAME_PHONETIC,
FISCAL_CODE,
PLACE_OF_BIRTH,
to_date(DATE_OF_DEATH,'MM/DD/YYYY'),
DECLARED_ETHNICITY,
MARITAL_STATUS, PERSONAL_INCOME,
to_date(MARITAL_STATUS_EFFECTIVE_DATE,'MM/DD/YYYY'),
HEAD_OF_HOUSEHOLD_FLAG,
HOUSEHOLD_SIZE, LOCATION_DIRECTIONS,
ADDRESS_EFFECTIVE_DATE, ADDRESS_EXPIRATION_DATE,
PERSON_ATTRIBUTE1, PERSON_ATTRIBUTE2,
PERSON_ATTRIBUTE3, PERSON_ATTRIBUTE4,
PERSON_ATTRIBUTE5, PERSON_ATTRIBUTE6,
PERSON_ATTRIBUTE7, PERSON_ATTRIBUTE8,
PERSON_ATTRIBUTE9, PERSON_ATTRIBUTE10,
PERSON_ATTRIBUTE11, PERSON_ATTRIBUTE12,
PERSON_ATTRIBUTE13, PERSON_ATTRIBUTE14,
PERSON_ATTRIBUTE15, ADDRESS_ATTRIBUTE1,
ADDRESS_ATTRIBUTE2, ADDRESS_ATTRIBUTE3,
ADDRESS_ATTRIBUTE4, ADDRESS_ATTRIBUTE5,
ADDRESS_ATTRIBUTE6, ADDRESS_ATTRIBUTE7,
ADDRESS_ATTRIBUTE8, ADDRESS_ATTRIBUTE9,
ADDRESS_ATTRIBUTE10, ADDRESS_ATTRIBUTE11,
ADDRESS_ATTRIBUTE12, ADDRESS_ATTRIBUTE13,
ADDRESS_ATTRIBUTE14, ADDRESS_ATTRIBUTE15,
FAX_COUNTRY_CODE, FAX_AREA_CODE,
FAX_NUMBER,
PERSON_ATTRIBUTE_CATEGORY,
ADDRESS_ATTRIBUTE_CATEGORY ,
SHORT_DESCRIPTION,
DESCRIPTION,
PARTY_SITE_USE
 FROM AMS_HZ_B2C_MAPPING_V
 WHERE party_id =  p_party_id
 and   load_status = 'SUCCESS';


cursor b2borb2c is
          select hd.import_type, hd.rented_list_flag, hd.import_list_header_id
          from ams_imp_list_headers_all hd, ams_imp_source_lines sr
          where hd.import_list_header_id = sr.import_list_header_id
            and sr.party_id =  p_party_id;

cursor c_relationship is
          SELECT RELATIONSHIP_ID, OBJECT_VERSION_NUMBER FROM hz_relationships WHERE subject_type = 'PERSON'
          AND party_id = p_party_id;

CURSOR LOCATION_EXISTS IS
          SELECT party_site_id FROM hz_party_sites
          WHERE party_id = x_org_party_id
            AND location_id = x_location_id;

CURSOR CHECK_PSITE_EXISTS IS
SELECT party_site_id FROM hz_party_sites
WHERE party_id = x_party_rel_party_id
  AND location_id = x_location_id;

CURSOR phone_exists (x_hz_party_id number) IS
SELECT 'Y' FROM hz_contact_points
WHERE contact_point_type          = 'PHONE'
  AND phone_line_type             = 'GEN'
  AND owner_table_name            = 'HZ_PARTIES'
  AND owner_table_id              = x_hz_party_id
  AND phone_number                = x_phone_number
  AND NVL(phone_country_code,'x') = NVL(x_phone_country_code,'x')
  AND NVL(phone_area_code,'x')    = NVL(x_phone_area_code,'x')
  AND NVL(phone_extension,'x')    = NVL(x_phone_extention,'x');


CURSOR email_exists (x_hz_party_id number) IS
SELECT 'Y' FROM hz_contact_points
WHERE contact_point_type          = 'EMAIL'
  AND owner_table_name            = 'HZ_PARTIES'
  AND owner_table_id              = x_hz_party_id
  AND email_address               = x_email_address;

CURSOR PER_LOCATION_EXISTS IS
SELECT party_site_id FROM hz_party_sites
WHERE party_id = x_per_party_id
  AND location_id = x_location_id;

 party_rec       hz_party_v2pub.party_rec_type;
 org_rec         hz_party_v2pub.organization_rec_type;
 person_rec      hz_party_v2pub.person_rec_type;
 location_rec    hz_location_v2pub.location_rec_type;
 psite_rec       hz_party_site_v2pub.party_site_rec_type;
 psiteuse_rec    hz_party_site_v2pub.party_site_use_rec_type;
 cpoint_rec      hz_contact_point_v2pub.contact_point_rec_type;
 email_rec       hz_contact_point_v2pub.email_rec_type;
 phone_rec       hz_contact_point_v2pub.phone_rec_type;
 ocon_rec        hz_party_contact_v2pub.org_contact_rec_type;
 edi_rec         hz_contact_point_v2pub.edi_rec_type;
 telex_rec       hz_contact_point_v2pub.telex_rec_type;
 web_rec         hz_contact_point_v2pub.web_rec_type;
 fax_rec         hz_contact_point_v2pub.phone_rec_type;


begin

 x_gen_party_site_number := fnd_profile.value('HZ_GENERATE_PARTY_SITE_NUMBER');
 x_hz_dup_check          := fnd_profile.value('AMS_HZ_DEDUPE_RULE');
  if x_hz_dup_check <> 'Y' then
    x_hz_dup_check := 'N';
 end if;
 -- Checks if it's B2B or B2C party type.
        OPEN b2borb2c;
        FETCH b2borb2c into x_b2b,x_rented_list_flag,x_import_list_header_id;
        CLOSE b2borb2c;

    if x_rented_list_flag <> 'R' then
        p_return_status  := FND_API.G_RET_STS_UNEXP_ERROR;
        FND_MESSAGE.SET_NAME('AMS', 'API_DEBUG_MESSAGE');
        FND_MESSAGE.SET_TOKEN('ROW','Party was not created through rented list.');
        FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
        FND_MSG_PUB.ADD;
       ROLLBACK;
       RETURN;
    end if;

if x_b2b = 'B2B' then
     SELECT subject_id into x_org_party_id FROM hz_relationships WHERE subject_type = 'ORGANIZATION'
     AND party_id = p_party_id;
           OPEN b2b;
          FETCH b2b into
           org_rec.party_rec.orig_system_reference,
           org_rec.organization_name,
           org_rec.fiscal_yearend_month,
           org_rec.duns_number_c,
           org_rec.employees_total,
           org_rec.line_of_business,
           org_rec.year_established,
           org_rec.tax_reference,
           org_rec.ceo_name,
           person_rec.person_first_name,
           person_rec.person_middle_name,
           person_rec.person_last_name,
           person_rec.person_name_suffix,
           person_rec.person_pre_name_adjunct,
           -- person_rec.best_time_contact_begin,
           -- person_rec.best_time_contact_end,
           location_rec.country,
           location_rec.address1,
           location_rec.address2,
           location_rec.city,
           location_rec.county,
           location_rec.state,
           location_rec.province,
           location_rec.postal_code,
  --         location_rec.time_zone,
           x_email_address,
           x_phone_country_code,
           x_phone_area_code,
           x_phone_number,
           x_phone_extention,
           ocon_rec.department,
           ocon_rec.job_title,
           ocon_rec.decision_maker_flag,
           org_rec.sic_code,
           org_rec.sic_code_type,
        --   org_rec.party_rec.TOTAL_NUM_OF_ORDERS,
        --   org_rec.party_rec.TOTAL_ORDERED_AMOUNT,
        --   org_rec.party_rec.LAST_ORDERED_DATE,
           org_rec.analysis_fy,
           org_rec.CURR_FY_POTENTIAL_REVENUE,
           org_rec.NEXT_FY_POTENTIAL_REVENUE,
           org_rec.GSA_INDICATOR_FLAG,
           org_rec.MISSION_STATEMENT,
           org_rec.ORGANIZATION_NAME_PHONETIC,
           org_rec.party_rec.CATEGORY_CODE,
           org_rec.JGZZ_FISCAL_CODE,
         --  org_rec.TAX_NAME,
           location_rec.ADDRESS3,
           location_rec.ADDRESS4,
           location_rec.ADDRESS_LINES_PHONETIC,
           -- location_rec.APARTMENT_FLAG,
           -- bug 4641591: columns obsolete
           -- 	   location_rec.PO_BOX_NUMBER,
           --            location_rec.HOUSE_NUMBER,
           --            location_rec.STREET_SUFFIX,
           -- location_rec.SECONDARY_SUFFIX_ELEMENT,
           --            location_rec.STREET,
           -- location_rec.RURAL_ROUTE_TYPE,
           -- location_rec.RURAL_ROUTE_NUMBER,
           --            location_rec.STREET_NUMBER,
           --            location_rec.FLOOR,
           --            location_rec.SUITE,
           location_rec.POSTAL_PLUS4_CODE,
           -- location_rec.OVERSEAS_ADDRESS_FLAG,
           psite_rec.identifying_address_flag,

	   location_rec.ADDRESS_EFFECTIVE_DATE,
           location_rec.ADDRESS_EXPIRATION_DATE,
           org_rec.BRANCH_FLAG,
           org_rec.line_of_business,
           org_rec.BUSINESS_SCOPE,
           org_rec.ceo_title,
           org_rec.cong_dist_code,
           org_rec.control_yr,
           org_rec.corporation_class,
           org_rec.credit_score,
           org_rec.credit_score_commentary,
           org_rec.DB_RATING,
           person_rec.DATE_OF_BIRTH,
           person_rec.DATE_OF_DEATH,
           org_rec.debarments_count,
           org_rec.debarments_date,
           person_rec.DECLARED_ETHNICITY,
           org_rec.debarment_ind,
           location_rec.description,
           org_rec.disadv_8a_ind,
           org_rec.ENQUIRY_DUNS,
           org_rec.export_ind,
           org_rec.failure_score,
           org_rec.FAILURE_SCORE_COMMENTARY,
           org_rec.failure_score_natnl_percentile,
           org_rec.FAILURE_SCORE_OVERRIDE_CODE,
           org_rec.GLOBAL_FAILURE_SCORE,
           org_rec.hq_branch_ind,
           person_rec.HEAD_OF_HOUSEHOLD_FLAG,
           person_rec.HOUSEHOLD_SIZE,
           org_rec.import_ind,
           org_rec.known_as,
           org_rec.known_as2,
           org_rec.known_as3,
           org_rec.known_as4,
           org_rec.known_as5,
           person_rec.KNOWN_AS,
           person_rec.KNOWN_AS2,
           PERSON_rec.KNOWN_AS3,
           PERSON_rec.KNOWN_AS4,
           PERSON_rec.KNOWN_AS5,
           org_rec.labor_surplus_ind,
           org_rec.LOCAL_ACTIVITY_CODE,
           org_rec.LOCAL_ACTIVITY_CODE_TYPE,
           location_rec.LOCATION_DIRECTIONS ,
           person_rec.MARITAL_STATUS,
           person_rec.MARITAL_STATUS_EFFECTIVE_DATE,
           org_rec.minority_owned_ind,
	   org_rec.minority_owned_type,
	   org_rec.organization_type,
           web_rec.url,
	   org_rec.oob_ind,
           person_rec.personal_income,
	   person_rec.person_academic_title,
           person_rec.person_first_name_phonetic,
	   person_rec.person_last_name_phonetic,
           person_rec.middle_name_phonetic,
	   person_rec.person_name_phonetic,
           person_rec.person_previous_last_name, --modify ak
	   person_rec.place_of_birth,
	   org_rec.principal_name,
           org_rec.principal_title,
	   org_rec.public_private_ownership_flag,
           person_rec.rent_own_ind,
           person_rec.person_academic_title,
	   location_rec.short_description,
           org_rec.small_bus_ind,
	   person_rec.tax_reference,
           org_rec.woman_owned_ind,
           org_rec.ATTRIBUTE1,
           org_rec.ATTRIBUTE2,
           org_rec.ATTRIBUTE3,
           org_rec.ATTRIBUTE4,
           org_rec.ATTRIBUTE5,
           org_rec.ATTRIBUTE6,
           org_rec.ATTRIBUTE7,
           org_rec.ATTRIBUTE8,
           org_rec.ATTRIBUTE9,
           org_rec.ATTRIBUTE10,
           org_rec.ATTRIBUTE11,
           org_rec.ATTRIBUTE12,
           org_rec.ATTRIBUTE13,
           org_rec.ATTRIBUTE14,
           org_rec.ATTRIBUTE15,
           person_rec.ATTRIBUTE1,
           person_rec.ATTRIBUTE2,
           person_rec.ATTRIBUTE3,
           person_rec.ATTRIBUTE4,
           person_rec.ATTRIBUTE5,
           person_rec.ATTRIBUTE6,
           person_rec.ATTRIBUTE7,
           person_rec.ATTRIBUTE8,
           person_rec.ATTRIBUTE9,
           person_rec.ATTRIBUTE10,
           person_rec.ATTRIBUTE11,
           person_rec.ATTRIBUTE12,
           person_rec.ATTRIBUTE13,
           person_rec.ATTRIBUTE14,
           person_rec.ATTRIBUTE15,
           ocon_rec.ATTRIBUTE1,
           ocon_rec.ATTRIBUTE2,
           ocon_rec.ATTRIBUTE3,
           ocon_rec.ATTRIBUTE4,
           ocon_rec.ATTRIBUTE5,
           ocon_rec.ATTRIBUTE6,
           ocon_rec.ATTRIBUTE7,
           ocon_rec.ATTRIBUTE8,
           ocon_rec.ATTRIBUTE9,
           ocon_rec.ATTRIBUTE10,
           ocon_rec.ATTRIBUTE11,
           ocon_rec.ATTRIBUTE12,
           ocon_rec.ATTRIBUTE13,
           ocon_rec.ATTRIBUTE14,
           ocon_rec.ATTRIBUTE15,
           location_rec.ATTRIBUTE1,
           location_rec.ATTRIBUTE2,
           location_rec.ATTRIBUTE3,
           location_rec.ATTRIBUTE4,
           location_rec.ATTRIBUTE5,
           location_rec.ATTRIBUTE6,
           location_rec.ATTRIBUTE7,
           location_rec.ATTRIBUTE8,
           location_rec.ATTRIBUTE9,
           location_rec.ATTRIBUTE10,
           location_rec.ATTRIBUTE11,
           location_rec.ATTRIBUTE12,
           location_rec.ATTRIBUTE13,
           location_rec.ATTRIBUTE14,
           location_rec.ATTRIBUTE15,
	   fax_rec.phone_country_code,
	   fax_rec.phone_area_code,
           fax_rec.phone_number,
           org_rec.attribute_category,
           person_rec.attribute_category,
           ocon_rec.attribute_category,
           location_rec.attribute_category,
           psiteuse_rec.site_use_type;


           if b2b%notfound then
                 return;
           end if;

-- Update Organization

           org_rec.party_rec.party_id     := x_org_party_id;
           org_rec.CREATED_BY_MODULE        := 'AMS_LIST_IMPORT';
           org_rec.application_id := 530;
           -- SELECT last_update_date INTO l_last_update_date
           SELECT OBJECT_VERSION_NUMBER INTO l_object_version
           FROM hz_parties
           WHERE party_id= x_org_party_id;
           x_date1 := l_last_update_date;
           org_rec.party_rec.status := 'A';
                hz_party_v2pub.update_organization(
                'F',
                org_rec,
                l_object_version,
                x_profile_id,
                x_return_status,
                x_msg_count,
                x_msg_data);
        if x_msg_count > 1 then
         FOR i IN 1..x_msg_count  LOOP
         x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
	 x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
        END LOOP;
        x_msg_data := x_tmp_var1;
        END IF;

        if x_return_status <> 'S' then
          p_return_status  :=  x_return_status;
          p_msg_count      :=  x_msg_count;
          p_msg_data       :=  x_msg_data;
        ROLLBACK;
        RETURN;
       end if;

    -- Update Person

       SELECT subject_id into x_person_id FROM hz_relationships WHERE subject_type = 'PERSON'
       AND party_id = p_party_id;
      -- SELECT last_update_date INTO l_last_update_date1
       SELECT OBJECT_VERSION_NUMBER INTO l_object_version
       FROM HZ_PARTIES
       WHERE party_id = x_person_id;
       x_date1 := l_last_update_date1;
       person_rec.party_rec.party_id     := x_person_id;
       person_rec.party_rec.status := 'A';
       person_rec.CREATED_BY_MODULE        := 'AMS_LIST_IMPORT';
       person_rec.application_id  := 530;
          hz_party_v2pub.update_person(
                'F',
                person_rec,
                l_object_version,
                x_profile_id,
                x_return_status,
                x_msg_count,
                x_msg_data);
       if x_msg_count > 1 then
         FOR i IN 1..x_msg_count  LOOP
         x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
         x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
        END LOOP;
        x_msg_data := x_tmp_var1;
        END IF;

       if x_return_status <> 'S' then
          p_return_status  :=  x_return_status;
          p_msg_count      :=  x_msg_count;
          p_msg_data       :=  x_msg_data;
        ROLLBACK;
        RETURN;
       end if;

     -- Update Org Contacts
       open c_relationship;
       fetch c_relationship into x_relationship_id,l_object_version2;
       close c_relationship;

       SELECT ORG_CONTACT_ID, OBJECT_VERSION_NUMBER into x_org_contact_id ,l_object_version3 FROM hz_org_contacts WHERE
       PARTY_RELATIONSHIP_ID = x_relationship_id;

       select last_update_date into x_date_three from hz_parties where party_id = p_party_id;
       -- ocon_rec.status     := 'A';
       ocon_rec.org_contact_id     := x_org_contact_id;
       ocon_rec.party_rel_rec.status     := 'A';
       ocon_rec.CREATED_BY_MODULE        := 'AMS_LIST_IMPORT';
       ocon_rec.application_id := 530;
       hz_party_contact_v2pub.update_org_contact(
                'F',
                ocon_rec,
                l_object_version,
                l_object_version2,
                l_object_version3,
                x_return_status,
                x_msg_count,
                x_msg_data);
      if x_msg_count > 1 then
         FOR i IN 1..x_msg_count  LOOP
         x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
          x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
        END LOOP;
        x_msg_data := x_tmp_var1;
        END IF;

      if x_return_status <> 'S' then
          p_return_status  :=  x_return_status;
          p_msg_count      :=  x_msg_count;
          p_msg_data       :=  x_msg_data;
        ROLLBACK;
        RETURN;
       end if;


 -- Create Location

 if x_hz_dup_check = 'Y' then
    address_echeck(
   p_party_id              => x_org_party_id,
   x_return_status       => x_return_status,
   x_msg_count           => x_msg_count,
   x_msg_data            => x_msg_data,
   p_location_id           => x_locatiON_Id,
   p_address1              => location_rec.address1,
   p_city                  => location_rec.city,
   p_pcode                 => location_rec.postal_code,
   p_country               => location_rec.country
                  );
      if x_return_status <> 'S' then
          p_return_status  :=  x_return_status;
          p_msg_count      :=  x_msg_count;
          p_msg_data       :=  x_msg_data;
        ROLLBACK;
        RETURN;
       end if;

 end if;

  if x_location_id is null and x_org_party_id is not null then
  if location_rec.address1 is not NULL then
      x_return_status  := null;
      x_msg_count      := null;
      x_msg_data       := null;

       create_location (
        location_rec  ,
        x_return_status ,
        x_msg_count     ,
        x_msg_data      ,
        x_location_id   );
      if x_return_status <> 'S' then
         rollback;
         return;
      end if;
  end if; -- if location_rec.address1 is not NULL
  end if; -- x_location_id is null;

-- Create Party Site
   l_lp_psite_id := null;
   open LOCATION_EXISTS;
   fetch LOCATION_EXISTS into l_lp_psite_id;
   close LOCATION_EXISTS;
 if l_lp_psite_id is null and x_org_party_id is not null and x_location_id is not null then
  psite_rec.party_id                 := x_org_party_id;
  psite_rec.location_id              := x_location_id;
  psite_rec.status                   := 'A';

  create_party_site(
                psite_rec,
                x_return_status,
                x_msg_count,
                x_msg_data,
                x_party_site_id,
                x_party_site_number
                );
     if x_return_status <> 'S' then
         rollback;
         return;
      end if;
 end if;

   -- Creating party_site for Contacts.
   x_party_rel_party_id := p_party_id;
   if person_rec.person_first_name is not null and x_party_rel_party_id is not null then
      if location_rec.address1 is not NULL and  x_location_id is not null then
         l_lp_psite_id := null;
         open CHECK_PSITE_EXISTS;
         fetch CHECK_PSITE_EXISTS into l_lp_psite_id;
         close CHECK_PSITE_EXISTS;
         if l_lp_psite_id is null then
            -- Create Party Site
            x_return_status  := null;
            x_msg_count      := null;
            x_msg_data       := null;
            x_party_site_number := null;

            psite_rec.party_id                 := x_party_rel_party_id;
            psite_rec.location_id              := x_location_id;
            psite_rec.status                   := 'A';
            create_party_site(
                psite_rec,
                x_return_status,
                x_msg_count,
                x_msg_data,
                x_party_site_id,
                x_party_site_number
                );
              if x_return_status <> 'S' then
                  rollback;
                  return;
              end if;
          end if;
        end if;
    end if;

-- Create contact points  Phone

   if x_phone_number is not NULL and x_party_rel_party_id is not null then

   x_return_status  := null;
   x_msg_count      := null;
   x_msg_data       := null;
  cpoint_rec.contact_point_type     := 'PHONE';
  cpoint_rec.status                 := 'A';
  cpoint_rec.owner_table_name       := 'HZ_PARTIES';
  cpoint_rec.owner_table_id         := x_party_rel_party_id;
  phone_rec.phone_line_type         := 'GEN';
  phone_rec.phone_number            := x_phone_number;
  phone_rec.phone_country_code      := x_phone_country_code;
  phone_rec.phone_area_code         := x_phone_area_code;
  phone_rec.phone_extension         := x_phone_extention;

  l_phone_exists := NULL;
  open phone_exists(x_party_rel_party_id);
  fetch phone_exists into l_phone_exists;
  close phone_exists;
   if l_phone_exists is NULL then
       create_contact_point(
                   cpoint_rec,
                   edi_rec,
                   email_rec,
                   phone_rec,
                   telex_rec,
                   web_rec,
                   x_return_status,
                   x_msg_count,
                   x_msg_data,
                   x_contact_point_id);
            if x_return_status <> 'S' then
                  rollback;
                  return;
              end if;
   end if;
  end if;

-- Create contact points Email

if x_email_address is not NULL  and x_party_rel_party_id is not null  then

   x_return_status  := null;
   x_msg_count      := null;
   x_msg_data       := null;
         cpoint_rec.contact_point_type     := 'EMAIL';
         cpoint_rec.status                 := 'A';
         cpoint_rec.owner_table_name       := 'HZ_PARTIES';
         cpoint_rec.owner_table_id         := x_party_rel_party_id;
         email_rec.email_address := x_email_address;
        l_email_exists := NULL;
        open email_exists(x_party_rel_party_id);
        fetch email_exists into l_email_exists;
        close email_exists;
        if l_email_exists is NULL then
           create_contact_point(
                   cpoint_rec,
                   edi_rec,
                   email_rec,
                   phone_rec,
                   telex_rec,
                   web_rec,
                   x_return_status,
                   x_msg_count,
                   x_msg_data,
                   x_contact_point_id);
            if x_return_status <> 'S' then
                  rollback;
                  return;
              end if;
       end if;
   end if;

 end if;  -- b2b = 'Y'

if x_b2b = 'B2C' then
        OPEN b2c;
           FETCH b2c into
           person_rec.party_rec.orig_system_reference,
           person_rec.person_first_name,
           person_rec.person_middle_name,
           person_rec.person_last_name,
           person_rec.person_name_suffix,
           person_rec.person_pre_name_adjunct,
           -- person_rec.best_time_contact_begin,
           -- person_rec.best_time_contact_end,
           location_rec.country,
           location_rec.address1,
           location_rec.address2,
           location_rec.city,
           location_rec.county,
           location_rec.state,
           location_rec.province,
           location_rec.postal_code,
          -- location_rec.time_zone,
           x_email_address,
           x_phone_country_code,
           x_phone_area_code,
           x_phone_number,
           x_phone_extention,
           -- person_rec.person_pre_name_adjunct,
           person_rec.party_rec.SALUTATION,
           location_rec.ADDRESS3,
           location_rec.ADDRESS4,
           location_rec.ADDRESS_LINES_PHONETIC,
           -- location_rec.APARTMENT_FLAG,
           -- bug 4641591: columns obsolete
           -- location_rec.PO_BOX_NUMBER,
           -- location_rec.HOUSE_NUMBER,
           --            location_rec.STREET_SUFFIX,
           -- location_rec.SECONDARY_SUFFIX_ELEMENT,
           --            location_rec.STREET,
           -- location_rec.RURAL_ROUTE_TYPE,
           -- location_rec.RURAL_ROUTE_NUMBER,
           --            location_rec.STREET_NUMBER,
           --            location_rec.FLOOR,
           --            location_rec.SUITE,
           location_rec.POSTAL_PLUS4_CODE,
           -- location_rec.OVERSEAS_ADDRESS_FLAG,
           psite_rec.identifying_address_flag,

	   person_rec.person_last_name_phonetic,
	   person_rec.person_first_name_phonetic,
           --PREFERRED_NAME,
	   web_rec.url, -- replace PREFERRED_NAME with URL
	   person_rec.person_academic_title,
           person_rec.date_of_birth,
	   person_rec.person_academic_title,
           person_rec.person_previous_last_name,
	   person_rec.known_as,
           person_rec.known_as2,
	   person_rec.known_as3,
           person_rec.known_as4,
	   person_rec.known_as5,
           person_rec.person_name_phonetic,
	   person_rec.middle_name_phonetic,
           person_rec.jgzz_fiscal_code,
	   person_rec.place_of_birth,
           person_rec.date_of_death,
	   person_rec.declared_ethnicity,
           person_rec.marital_status,
	   person_rec.personal_income,
           person_rec.marital_status_effective_date,
	   person_rec.head_of_household_flag,
           person_rec.household_size,
	   location_rec.location_directions,
           location_rec.address_effective_date,
	   location_rec.address_expiration_date,
           person_rec.attribute1,
           person_rec.attribute2,
           person_rec.attribute3,
           person_rec.attribute4,
           person_rec.attribute5,
           person_rec.attribute6,
           person_rec.attribute7,
           person_rec.attribute8,
           person_rec.attribute9,
           person_rec.attribute10,
           person_rec.attribute11,
           person_rec.attribute12,
           person_rec.attribute13,
           person_rec.attribute14,
           person_rec.attribute15,
           location_rec.attribute1,
           location_rec.attribute2,
           location_rec.attribute3,
           location_rec.attribute4,
           location_rec.attribute5,
           location_rec.attribute6,
           location_rec.attribute7,
           location_rec.attribute8,
           location_rec.attribute9,
           location_rec.attribute10,
           location_rec.attribute11,
           location_rec.attribute12,
           location_rec.attribute13,
           location_rec.attribute14,
           location_rec.attribute15,
           fax_rec.phone_country_code,
	   fax_rec.phone_area_code,
           fax_rec.phone_number,
           person_rec.attribute_category,
           location_rec.attribute_category ,
	   location_rec.short_description,
	   location_rec.description,
           psiteuse_rec.site_use_type;
        CLOSE b2c;

    -- Update Person

       -- SELECT last_update_date INTO l_last_update_date1
       l_object_version := NULL;
       SELECT OBJECT_VERSION_NUMBER INTO l_object_version
       FROM HZ_PARTIES
       WHERE party_id = p_party_id;
       x_date1 := l_last_update_date1;
       person_rec.party_rec.party_id     := p_party_id;
       person_rec.party_rec.status := 'A';
       person_rec.CREATED_BY_MODULE        := 'AMS_LIST_IMPORT';
       person_rec.application_id := 530;
          hz_party_v2pub.update_person(
                'F',
                person_rec,
                l_object_version,
                x_profile_id,
                x_return_status,
                x_msg_count,
                x_msg_data);
       if x_msg_count > 1 then
         FOR i IN 1..x_msg_count  LOOP
         x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
         x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
        END LOOP;
        x_msg_data := x_tmp_var1;
        END IF;

       if x_return_status <> 'S' then
          p_return_status  :=  x_return_status;
          p_msg_count      :=  x_msg_count;
          p_msg_data       :=  x_msg_data;
        ROLLBACK;
        RETURN;
       end if;

 -- Create Location
 x_per_party_id := p_party_id;
 if x_hz_dup_check = 'Y' then
   address_echeck(
   p_party_id              => x_per_party_id,
   x_return_status       => x_return_status,
   x_msg_count           => x_msg_count,
   x_msg_data            => x_msg_data,
   p_location_id           => x_locatiON_Id,
   p_address1              => location_rec.address1,
   p_city                  => location_rec.city,
   p_pcode                 => location_rec.postal_code,
   p_country               => location_rec.country
                  );
      if x_return_status <> 'S' then
          p_return_status  :=  x_return_status;
          p_msg_count      :=  x_msg_count;
          p_msg_data       :=  x_msg_data;
        ROLLBACK;
        RETURN;
       end if;

 end if;

  if x_location_id is null and x_per_party_id is not null then
  if location_rec.address1 is not NULL then
      x_return_status  := null;
      x_msg_count      := null;
      x_msg_data       := null;

       create_location (
        location_rec  ,
        x_return_status ,
        x_msg_count     ,
        x_msg_data      ,
        x_location_id   );
      if x_return_status <> 'S' then
         rollback;
         return;
      end if;
  end if; -- if location_rec.address1 is not NULL
  end if; -- x_location_id is null;


   l_lp_psite_id := null;
   open PER_LOCATION_EXISTS;
   fetch PER_LOCATION_EXISTS into l_lp_psite_id;
   close PER_LOCATION_EXISTS;
if l_lp_psite_id is null and x_per_party_id is not null and x_location_id is not null then
-- Create Party Site
   x_return_status  := null;
   x_msg_count      := null;
   x_msg_data       := null;
   x_party_site_number := null;
  psite_rec.party_id                 := x_per_party_id;
  psite_rec.location_id              := x_location_id;
  psite_rec.status                   := 'A';

  create_party_site(
                psite_rec,
                x_return_status,
                x_msg_count,
                x_msg_data,
                x_party_site_id,
                x_party_site_number
                );
     if x_return_status <> 'S' then
         rollback;
         return;
      end if;
 end if;


-- Create contact points  Phone

  if x_phone_number is not NULL and x_per_party_id is not null then

   x_return_status  := null;
   x_msg_count      := null;
   x_msg_data       := null;
  cpoint_rec.contact_point_type     := 'PHONE';
  cpoint_rec.status                 := 'A';
  cpoint_rec.owner_table_name       := 'HZ_PARTIES';
  cpoint_rec.owner_table_id         := x_per_party_id;
  phone_rec.phone_line_type         := 'GEN';
  phone_rec.phone_number            := x_phone_number;
  phone_rec.phone_country_code      := x_phone_country_code;
  phone_rec.phone_area_code         := x_phone_area_code;
  phone_rec.phone_extension         := x_phone_extention;

  l_phone_exists := NULL;
  open phone_exists(x_per_party_id);
  fetch phone_exists into l_phone_exists;
  close phone_exists;
   if l_phone_exists is NULL then
       create_contact_point(
                   cpoint_rec,
                   edi_rec,
                   email_rec,
                   phone_rec,
                   telex_rec,
                   web_rec,
                   x_return_status,
                   x_msg_count,
                   x_msg_data,
                   x_contact_point_id);
            if x_return_status <> 'S' then
                  rollback;
                  return;
              end if;
   end if;
  end if;


-- Create contact points Email

if x_email_address is not NULL  and x_per_party_id is not null  then

   x_return_status  := null;
   x_msg_count      := null;
   x_msg_data       := null;
         cpoint_rec.contact_point_type     := 'EMAIL';
         cpoint_rec.status                 := 'A';
         cpoint_rec.owner_table_name       := 'HZ_PARTIES';
         cpoint_rec.owner_table_id         := x_per_party_id;
         email_rec.email_address := x_email_address;
        l_email_exists := NULL;
        open email_exists(x_per_party_id);
        fetch email_exists into l_email_exists;
        close email_exists;
        if l_email_exists is NULL then
           create_contact_point(
                   cpoint_rec,
                   edi_rec,
                   email_rec,
                   phone_rec,
                   telex_rec,
                   web_rec,
                   x_return_status,
                   x_msg_count,
                   x_msg_data,
                   x_contact_point_id);
            if x_return_status <> 'S' then
                  rollback;
                  return;
              end if;
       end if;
   end if;

end if; -- if x_b2b = 'N' then
end update_rented_list_party;

-- -------------------------------------------------------------

-- This program performs error checks in ams_import_interface table.

PROCEDURE execute_lead_data_validation (
                            p_import_list_header_id NUMBER,
                            p_return_status OUT NOCOPY     VARCHAR2
                            ) IS

TYPE num_data_set_type_w IS
  TABLE OF NUMBER INDEX BY BINARY_INTEGER;

TYPE varchar2_250_set_type IS
        TABLE OF VARCHAR2(4000) INDEX BY BINARY_INTEGER;

L_MAX_ROW_COUNT                                 CONSTANT NUMBER := 1000;
l_batch_id						 NUMBER;
l_assign_date					varchar2(150);
l_lead_date					varchar2(150);
l_address_effective_date			varchar2(150);
l_last_ordered_date				varchar2(150);
l_program_update_date				varchar2(150);
x_import_list_header_id				number;
x_import_source_line_id 			number;
l_message					varchar2(100);
l_invalid_number varchar2(4000) ;
l_invalid_size   varchar2(4000) ;
l_null_value     varchar2(4000) ;
l_invalid_src_system     varchar2(4000) ;
l_return_status           			varchar2(1);
l_total_rec	number;
l_source_system	varchar2(60);
l_error_exists  varchar2(1);



       l_import_source_line_id                 num_data_set_type_w;
       l_import_list_header_id                 num_data_set_type_w;

       l_col1	                               varchar2_250_set_type;
       l_col2 	                               varchar2_250_set_type;
       l_col3 	                               varchar2_250_set_type;
       l_col4 	                               varchar2_250_set_type;
       l_col5 	                               varchar2_250_set_type;
       l_col6 	                               varchar2_250_set_type;
       l_col7 	                               varchar2_250_set_type;
       l_col8 	                               varchar2_250_set_type;
       l_col9 	                               varchar2_250_set_type;
       l_col10 	                               varchar2_250_set_type;
       l_col11 	                               varchar2_250_set_type;
       l_col12 	                               varchar2_250_set_type;
       l_col13 	                               varchar2_250_set_type;
       l_col14 	                               varchar2_250_set_type;
       l_col15 	                               varchar2_250_set_type;
       l_col16 	                               varchar2_250_set_type;
       l_col17 	                               varchar2_250_set_type;
       l_col18 	                               varchar2_250_set_type;
       l_col19 	                               varchar2_250_set_type;
       l_col20 	                               varchar2_250_set_type;
       l_col21 	                               varchar2_250_set_type;
       l_col22 	                               varchar2_250_set_type;
       l_col23 	                               varchar2_250_set_type;
       l_col24 	                               varchar2_250_set_type;
       l_col25 	                               varchar2_250_set_type;
       l_col26 	                               varchar2_250_set_type;
       l_col27 	                               varchar2_250_set_type;
       l_col28 	                               varchar2_250_set_type;
       l_col29 	                               varchar2_250_set_type;
       l_col30 	                               varchar2_250_set_type;
       l_col31 	                               varchar2_250_set_type;
       l_col32 	                               varchar2_250_set_type;
       l_col33 	                               varchar2_250_set_type;
       l_col34 	                               varchar2_250_set_type;
       l_col35 	                               varchar2_250_set_type;
       l_col36 	                               varchar2_250_set_type;
       l_col37 	                               varchar2_250_set_type;
       l_col38 	                               varchar2_250_set_type;
       l_col39 	                               varchar2_250_set_type;
       l_col40 	                               varchar2_250_set_type;
       l_col41 	                               varchar2_250_set_type;
       l_col42 	                               varchar2_250_set_type;
       l_col43 	                               varchar2_250_set_type;
       l_col44 	                               varchar2_250_set_type;
       l_col45 	                               varchar2_250_set_type;
       l_col46 	                               varchar2_250_set_type;
       l_col47 	                               varchar2_250_set_type;
       l_col48 	                               varchar2_250_set_type;
       l_col49 	                               varchar2_250_set_type;
       l_col50 	                               varchar2_250_set_type;
       l_col51 	                               varchar2_250_set_type;
       l_col52 	                               varchar2_250_set_type;
       l_col53 	                               varchar2_250_set_type;
       l_col54 	                               varchar2_250_set_type;
       l_col55 	                               varchar2_250_set_type;
       l_col56 	                               varchar2_250_set_type;
       l_col57 	                               varchar2_250_set_type;
       l_col58 	                               varchar2_250_set_type;
       l_col59 	                               varchar2_250_set_type;
       l_col60 	                               varchar2_250_set_type;
       l_col61 	                               varchar2_250_set_type;
       l_col62 	                               varchar2_250_set_type;
       l_col63 	                               varchar2_250_set_type;
       l_col64 	                               varchar2_250_set_type;
       l_col65 	                               varchar2_250_set_type;
       l_col66 	                               varchar2_250_set_type;
       l_col67 	                               varchar2_250_set_type;
       l_col68 	                               varchar2_250_set_type;
       l_col69 	                               varchar2_250_set_type;
       l_col70 	                               varchar2_250_set_type;
       l_col71 	                               varchar2_250_set_type;
       l_col72 	                               varchar2_250_set_type;
       l_col73 	                               varchar2_250_set_type;
       l_col74 	                               varchar2_250_set_type;
       l_col75 	                               varchar2_250_set_type;
       l_col76 	                               varchar2_250_set_type;
       l_col77 	                               varchar2_250_set_type;
       l_col78 	                               varchar2_250_set_type;
       l_col79 	                               varchar2_250_set_type;
       l_col80 	                               varchar2_250_set_type;
       l_col81 	                               varchar2_250_set_type;
       l_col82 	                               varchar2_250_set_type;
       l_col83 	                               varchar2_250_set_type;
       l_col84 	                               varchar2_250_set_type;
       l_col85 	                               varchar2_250_set_type;
       l_col86 	                               varchar2_250_set_type;
       l_col87 	                               varchar2_250_set_type;
       l_col88 	                               varchar2_250_set_type;
       l_col89 	                               varchar2_250_set_type;
       l_col90 	                               varchar2_250_set_type;
       l_col91 	                               varchar2_250_set_type;
       l_col92 	                               varchar2_250_set_type;
       l_col93 	                               varchar2_250_set_type;
       l_col94 	                               varchar2_250_set_type;
       l_col95 	                               varchar2_250_set_type;
       l_col96 	                               varchar2_250_set_type;
       l_col97 	                               varchar2_250_set_type;
       l_col98 	                               varchar2_250_set_type;
       l_col99 	                               varchar2_250_set_type;
       l_col100                                varchar2_250_set_type;
       l_col101                                  varchar2_250_set_type;
       l_col102                                  varchar2_250_set_type;
       l_col103                                  varchar2_250_set_type;
       l_col104                                  varchar2_250_set_type;
       l_col105                                  varchar2_250_set_type;
       l_col106                                  varchar2_250_set_type;
       l_col107                                  varchar2_250_set_type;
       l_col108                                  varchar2_250_set_type;
       l_col109                                  varchar2_250_set_type;
       l_col110                                 varchar2_250_set_type;
       l_col111                                 varchar2_250_set_type;
       l_col112                                 varchar2_250_set_type;
       l_col113                                 varchar2_250_set_type;
       l_col114                                 varchar2_250_set_type;
       l_col115                                 varchar2_250_set_type;
       l_col116                                 varchar2_250_set_type;
       l_col117                                 varchar2_250_set_type;
       l_col118                                 varchar2_250_set_type;
       l_col119                                 varchar2_250_set_type;
       l_col120                                 varchar2_250_set_type;
       l_col121                                 varchar2_250_set_type;
       l_col122                                 varchar2_250_set_type;
       l_col123                                 varchar2_250_set_type;
       l_col124                                 varchar2_250_set_type;
       l_col125                                 varchar2_250_set_type;
       l_col126                                 varchar2_250_set_type;
       l_col127                                 varchar2_250_set_type;
       l_col128                                 varchar2_250_set_type;
       l_col129                                 varchar2_250_set_type;
       l_col130                                 varchar2_250_set_type;
       l_col131                                 varchar2_250_set_type;
       l_col132                                 varchar2_250_set_type;
       l_col133                                 varchar2_250_set_type;
       l_col134                                 varchar2_250_set_type;
       l_col135                                 varchar2_250_set_type;
       l_col136                                 varchar2_250_set_type;
       l_col137                                 varchar2_250_set_type;
       l_col138                                 varchar2_250_set_type;
       l_col139                                 varchar2_250_set_type;
       l_col140                                 varchar2_250_set_type;
       l_col141                                 varchar2_250_set_type;
       l_col142                                 varchar2_250_set_type;
       l_col143                                 varchar2_250_set_type;
       l_col144                                 varchar2_250_set_type;
       l_col145                                 varchar2_250_set_type;
       l_col146                                 varchar2_250_set_type;
       l_col147                                 varchar2_250_set_type;
       l_col148                                 varchar2_250_set_type;
       l_col149                                 varchar2_250_set_type;
       l_col150                                 varchar2_250_set_type;
       l_col151                                 varchar2_250_set_type;
       l_col152                                 varchar2_250_set_type;
       l_col153                                 varchar2_250_set_type;
       l_col154                                 varchar2_250_set_type;
       l_col155                                 varchar2_250_set_type;
       l_col156                                 varchar2_250_set_type;
       l_col157                                 varchar2_250_set_type;
       l_col158                                 varchar2_250_set_type;
       l_col159                                 varchar2_250_set_type;
       l_col160                                 varchar2_250_set_type;
       l_col161                                 varchar2_250_set_type;
       l_col162                                 varchar2_250_set_type;
       l_col163                                 varchar2_250_set_type;
       l_col164                                 varchar2_250_set_type;
       l_col165                                 varchar2_250_set_type;
       l_col166                                 varchar2_250_set_type;
       l_col167                                 varchar2_250_set_type;
       l_col168                                 varchar2_250_set_type;
       l_col169                                 varchar2_250_set_type;
       l_col170                                 varchar2_250_set_type;
       l_col171                                 varchar2_250_set_type;
       l_col172                                 varchar2_250_set_type;
       l_col173                                 varchar2_250_set_type;
       l_col174                                 varchar2_250_set_type;
       l_col175                                 varchar2_250_set_type;
       l_col176                                 varchar2_250_set_type;
       l_col177                                 varchar2_250_set_type;
       l_col178                                 varchar2_250_set_type;
       l_col179                                 varchar2_250_set_type;
       l_col180                                 varchar2_250_set_type;
       l_col181                                 varchar2_250_set_type;
       l_col182                                 varchar2_250_set_type;
       l_col183                                 varchar2_250_set_type;
       l_col184                                 varchar2_250_set_type;
       l_col185                                 varchar2_250_set_type;
       l_col186                                 varchar2_250_set_type;
       l_col187                                 varchar2_250_set_type;
       l_col188                                 varchar2_250_set_type;
       l_col189                                 varchar2_250_set_type;
       l_col190                                 varchar2_250_set_type;
       l_col191                                 varchar2_250_set_type;
       l_col192                                 varchar2_250_set_type;
       l_col193                                 varchar2_250_set_type;
       l_col194                                 varchar2_250_set_type;
       l_col195                                 varchar2_250_set_type;
       l_col196                                 varchar2_250_set_type;
       l_col197                                 varchar2_250_set_type;
       l_col198                                 varchar2_250_set_type;
       l_col199                                 varchar2_250_set_type;
       l_col200                                varchar2_250_set_type;
       l_col201                                  varchar2_250_set_type;
       l_col202                                  varchar2_250_set_type;
       l_col203                                  varchar2_250_set_type;
       l_col204                                  varchar2_250_set_type;
       l_col205                                  varchar2_250_set_type;
       l_col206                                  varchar2_250_set_type;
       l_col207                                  varchar2_250_set_type;
       l_col208                                  varchar2_250_set_type;
       l_col209                                  varchar2_250_set_type;
       l_col210                                 varchar2_250_set_type;
       l_col211                                 varchar2_250_set_type;
       l_col212                                 varchar2_250_set_type;
       l_col213                                 varchar2_250_set_type;
       l_col214                                 varchar2_250_set_type;
       l_col215                                 varchar2_250_set_type;
       l_col216                                 varchar2_250_set_type;
       l_col217                                 varchar2_250_set_type;
       l_col218                                 varchar2_250_set_type;
       l_col219                                 varchar2_250_set_type;
       l_col220                                 varchar2_250_set_type;
       l_col221                                 varchar2_250_set_type;
       l_col222                                 varchar2_250_set_type;
       l_col223                                 varchar2_250_set_type;
       l_col224                                 varchar2_250_set_type;
       l_col225                                 varchar2_250_set_type;
       l_col226                                 varchar2_250_set_type;
       l_col227                                 varchar2_250_set_type;
       l_col228                                 varchar2_250_set_type;


       l_col229                                 varchar2_250_set_type;
       l_col230                                 varchar2_250_set_type;
       l_col231                                 varchar2_250_set_type;
       l_col232                                 varchar2_250_set_type;
       l_col233                                 varchar2_250_set_type;
       l_col234                                 varchar2_250_set_type;
       l_col235                                 varchar2_250_set_type;
       l_col236                                 varchar2_250_set_type;
       l_col237                                 varchar2_250_set_type;
       l_col238                                 varchar2_250_set_type;



CURSOR c_lead_fields is
SELECT
import_source_line_id,
import_list_header_id,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(source_system))),30) - 30,0,' ','SOURCE_SYSTEM :'||decode(nvl(source_system,'x'),'x',l_null_value,l_invalid_size)||'(30)') source_system,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LEAD_NOTE)),'x')),2000) - 2000,0,' ','LEAD_NOTE :'||l_invalid_size||'(2000)') LEAD_NOTE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROMOTION_CODE)),'x')),50) - 50,0,' ','PROMOTION_CODE :'||l_invalid_size||'(50)') PROMOTION_CODE,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(CUSTOMER_NAME))),255) - 255,0,' ','CUSTOMER_NAME :'||l_invalid_size||'(255)') CUSTOMER_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE)),'x')),30) - 30,0,' ','SIC_CODE :'||l_invalid_size||'(30)') SIC_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ANALYSIS_FY)),'x')),5) - 5,0,' ','ANALYSIS_FY :'||l_invalid_size||'(5)') ANALYSIS_FY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CUSTOMER_CATEGORY_CODE)),'x')),30) -30,0,' ','CUSTOMER_CATEGORY_CODE:'||l_invalid_size||'(30)') CUSTOMER_CATEGORY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FISCAL_YEAREND_MONTH)),'x')),30) - 30,0,' ','FISCAL_YEAREND_MONTH :'||l_invalid_size||'(30)') FISCAL_YEAREND_MONTH,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(num_of_employees,' ','x'))),'0123456789.','           x'))),0),0,' ','NUM_OF_EMPLOYEES :'||l_invalid_number) NUM_OF_EMPLOYE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(POTENTIAL_REVENUE_CURR_FY,' ','x'))),'0123456789.','           x'))),0),0,' ','POTENTIAL_REVENUE_CURR_FY :'||l_invalid_number) POTENTIAL_REVENUE_CURR_FY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(POTENTIAL_REVENUE_NEXT_FY,' ','x'))),'0123456789.','           x'))),0),0,' ','POTENTIAL_REVENUE_NEXT_FY :'||l_invalid_number) POTENTIAL_REVENUE_CURR_FY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CUSTOMER_RANK)),'x')),30) - 30,0,' ','CUSTOMER_RANK :'||l_invalid_size||'(30)') CUSTOMER_RANK,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),50) - 50,0,' ','TAX_REFERENCE :'||l_invalid_size||'(50)') TAX_REFERENCE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(YEAR_ESTABLISHED,' ','x'))),'0123456789.','           x'))),0),0,' ','YEAR_ESTABLISHED :'||l_invalid_number) YEAR_ESTABLISHED,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDR_DO_NOT_MAIL_FLAG)),'x')),1) - 1,0,' ','ADDR_DO_NOT_MAIL_FLAG :'||l_invalid_size||'(1)') ADDR_DO_NOT_MAIL_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URL)),'x')),2000) - 2000,0,' ','URL :'||l_invalid_size) URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONT_DO_NOT_MAIL_FLAG)),'x')),1) - 1,0,' ','CONT_DO_NOT_MAIL_FLAG :'||l_invalid_size||'(1)') CONT_DO_NOT_MAIL_FLAG,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(COUNTRY))),60) - 60,0,' ','COUNTRY :'||decode(nvl(COUNTRY,'x'),'x',l_null_value,l_invalid_size)||'(60)') COUNTRY,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(ADDRESS1))),240) - 240,0,' ','ADDRESS1 :'||decode(nvl(ADDRESS1,'x'),'x',l_null_value,l_invalid_size)||'(240)') ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,' ','ADDRESS2 :'||l_invalid_size||'(240)') ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,' ','ADDRESS3 :'||l_invalid_size||'(240)') ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,' ','ADDRESS4 :'||l_invalid_size||'(240)') ADDRESS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,' ','CITY :'||l_invalid_size||'(60)') CITY ,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,' ','POSTAL_CODE :'||l_invalid_size||'(60)') POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,' ','STATE :'||l_invalid_size||'(60)') STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,' ','PROVINCE :'||l_invalid_size||'(60)') PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,' ','COUNTY :'||l_invalid_size||'(60)') COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,' ','EMAIL_ADDRESS :'||l_invalid_size||'(240)') EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SEX_CODE)),'x')),30) - 30,0,' ','SEX_CODE :'||l_invalid_size||'(30)') SEX_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALUTATION)),'x')),60) - 60,0,' ','SALUTATION :'||l_invalid_size||'(60)') SALUTATION,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(LAST_NAME))),50) - 50,0,' ','LAST_NAME :'||decode(nvl(LAST_NAME,'x'),'x',l_null_value,l_invalid_size)||'(50)') LAST_NAME,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(FIRST_NAME))),40) - 40,0,' ','FIRST_NAME :'||decode(nvl(FIRST_NAME,'x'),'x',l_null_value,l_invalid_size)||'(40)') FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TITLE)),'x')),40) - 40,0,' ','TITLE :'||l_invalid_size||'(40)') TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE)),'x')),100) - 100,0,' ','JOB_TITLE :'||l_invalid_size||'(100)') JOB_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,' ','PHONE_NUMBER :'||l_invalid_size||'(25)') PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_STATUS)),'x')),1) - 1,0,' ','PHONE_STATUS :'||l_invalid_size||'(1)') PHONE_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_TYPE)),'x')),30) - 30,0,' ','PHONE_TYPE :'||l_invalid_size||'(30)') PHONE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(AREA_CODE)),'x')),10) - 10,0,' ','AREA_CODE :'||l_invalid_size||'(10)') AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EXTENSION)),'x')),20) - 20,0,' ','EXTENSION :'||l_invalid_size||'(20)') EXTENSION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_INITIAL)),'x')),10) - 10,0,' ','MIDDLE_INITIAL :'||l_invalid_size||'(10)') MIDDLE_INITIAL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE_CODE)),'x')),30) - 30,0,' ','JOB_TITLE_CODE :'||l_invalid_size||'(30)') JOB_TITLE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MAIL_STOP)),'x')),60) - 60,0,' ','MAIL_STOP :'||l_invalid_size||'(60)') MAIL_STOP,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),25) - 25,0,' ','FAX_NUMBER:'||l_invalid_size||'(25)') FAX_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,' ','FAX_AREA_CODE :'||l_invalid_size||'(1)') FAX_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DO_NOT_PHONE_FLAG)),'x')),1) - 1,0,' ','DO_NOT_PHONE_FLAG :'||l_invalid_size||'(1)') DO_NOT_PHONE_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DO_NOT_FAX_FLAG)),'x')),1) - 1,0,' ','DO_NOT_FAX_FLAG :'||l_invalid_size||'(1)') DO_NOT_FAX_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DO_NOT_EMAIL_FLAG)),'x')),1) - 1,0,' ','DO_NOT_EMAIL_FLAG :'||l_invalid_size||'(1)') DO_NOT_EMAIL_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URGENT_FLAG)),'x')),1) - 1,0,' ','URGENT_FLAG :'||l_invalid_size||'(1)') URGENT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ACCEPT_FLAG)),'x')),1) - 1,0,' ','ACCEPT_FLAG :'||l_invalid_size||'(1)') ACCEPT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DELETED_FLAG)),'x')),1) - 1,0,' ','DELETED_FLAG :'||l_invalid_size||'(1)') DELETED_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(IMPORT_FLAG)),'x')),1) - 1,0,' ','IMPORT_FLAG :'||l_invalid_size||'(1)') IMPORT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KEEP_FLAG)),'x')),1) - 1,0,' ','KEEP_FLAG :'||l_invalid_size||'(1)') KEEP_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(QUALIFIED_FLAG)),'x')),1) - 1,0,' ','QUALIFIED_FLAG :'||l_invalid_size||'(1)') QUALIFIED_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRIMARY_CONTACT_FLAG)),'x')),1) - 1,0,' ','PRIMARY_CONTACT_FLAG :'||l_invalid_size||'(1)') PRIMARY_CONTACT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOC_VALIDATED_FLAG)),'x')),1) - 1,0,' ','LOC_VALIDATED_FLAG :'||l_invalid_size||'(1)') LOC_VALIDATED_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GSA_INDICATOR_FLAG)),'x')),1) - 1,0,' ','GSA_INDICATOR_FLAG :'||l_invalid_size||'(1)') GSA_INDICATOR_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_REFERENCE_USE_FLAG)),'x')),1) - 1,0,' ','PARTY_REFERENCE_USE_FLAG :'||l_invalid_size||'(1)') PARTY_REFERENCE_USE_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTIES_VALIDATED_FLAG)),'x')),1) - 1,0,' ','PARTIES_VALIDATED_FLAG:'||l_invalid_size||'(1)') PARTIES_VALIDATED_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,' ','DECISION_MAKER_FLAG :'||l_invalid_size||'(1)') DECISION_MAKER_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_EXEC_SPONSOR_FLAG)),'x')),1) - 1,0,' ','PRM_EXEC_SPONSOR_FLAG :'||l_invalid_size||'(1)') PRM_EXEC_SPONSOR_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_PRJ_LEAD_IN_PLACE_FLAG)),'x')),1) - 1,0,' ','PRM_PRJ_LEAD_IN_PLACE_FLAG :'||l_invalid_size||'(1)') PRM_PRJ_LEAD_IN_PLACE_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_PARTY_FLAG)),'x')),1) - 1,0,' ','NEW_PARTY_FLAG :'||l_invalid_size||'(1)') NEW_PARTY_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,' ','DECISION_MAKER_FLAG :'||l_invalid_size||'(1)') NEW_LOC_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_PS_FLAG)),'x')),1) - 1,0,' ','NEW_PS_FLAG :'||l_invalid_size||'(1)') NEW_PS_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_REL_FLAG)),'x')),1) - 1,0,' ','NEW_REL_FLAG :'||l_invalid_size||'(1)') NEW_REL_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_CON_FLAG)),'x')),1) - 1,0,' ','NEW_CON_FLAG :'||l_invalid_size||'(1)') NEW_CON_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTACT_ROLE_CODE)),'x')),30) - 30,0,' ','CONTACT_ROLE_CODE :'||l_invalid_size||'(30)') CONTACT_ROLE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CHANNEL_CODE)),'x')),30) - 30,0,' ','CHANNEL_CODE :'||l_invalid_size||'(30)') CHANNEL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUDGET_STATUS_CODE)),'x')),30) - 30,0,' ','BUDGET_STATUS_CODE :'||l_invalid_size||'(30)') BUDGET_STATUS_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_TIMEFRAME_CODE)),'x')),30) - 30,0,' ','DECISION_TIMEFRAME_CODE :'||l_invalid_size||'(30)') DECISION_TIMEFRAME_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CURRENCY_CODE)),'x')),15) - 15,0,' ','CURRENCY_CODE :'||l_invalid_size||'(15)') CURRENCY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,' ','VEHICLE_RESPONSE_CODE :'||l_invalid_size||'(30)') VEHICLE_RESPONSE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_1)),'x')),3) - 3,0,' ','UOM_CODE_1 :'||l_invalid_size||'(3)') UOM_CODE_1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_2)),'x')),3) - 3,0,' ','UOM_CODE_2 :'||l_invalid_size||'(3)') UOM_CODE_2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_3)),'x')),3) - 3,0,' ','UOM_CODE_3 :'||l_invalid_size||'(3)') UOM_CODE_3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_4)),'x')),3) - 3,0,' ','UOM_CODE_4 :'||l_invalid_size||'(3)') UOM_CODE_4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_5)),'x')),3) - 3,0,' ','UOM_CODE_5 :'||l_invalid_size||'(3)') UOM_CODE_5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS)),'x')),240) - 240,0,' ','KNOWN_AS :'||l_invalid_size||'(3)') KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS2)),'x')),240) - 240,0,' ','KNOWN_AS2 :'||l_invalid_size||'(240)') KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS3)),'x')),240) - 240,0,' ','KNOWN_AS3 :'||l_invalid_size||'(240)') KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS4)),'x')),240) - 240,0,' ','KNOWN_AS4 :'||l_invalid_size||'(240)') KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS5)),'x')),240) - 240,0,' ','KNOWN_AS5 :'||l_invalid_size||'(240)') KNOWN_AS5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','INTEREST_TYPE_ID_1 :'||l_invalid_number) INTEREST_TYPE_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','INTEREST_TYPE_ID_2 :'||l_invalid_number) INTEREST_TYPE_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','INTEREST_TYPE_ID_3 :'||l_invalid_number) INTEREST_TYPE_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','INTEREST_TYPE_ID_4 :'||l_invalid_number) INTEREST_TYPE_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','INTEREST_TYPE_ID_5 :'||l_invalid_number) INTEREST_TYPE_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','PRIMARY_INTEREST_CODE_ID_1 :'||l_invalid_number) PRIMARY_INTEREST_CODE_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','PRIMARY_INTEREST_CODE_ID_2 :'||l_invalid_number) PRIMARY_INTEREST_CODE_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','PRIMARY_INTEREST_CODE_ID_3 :'||l_invalid_number) PRIMARY_INTEREST_CODE_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','PRIMARY_INTEREST_CODE_ID_4 :'||l_invalid_number) PRIMARY_INTEREST_CODE_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','PRIMARY_INTEREST_CODE_ID_5 :'||l_invalid_number) PRIMARY_INTEREST_CODE_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','SECONDARY_INTEREST_CODE_ID_1 :'||l_invalid_number) SECONDARY_INTEREST_CODE_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','SECONDARY_INTEREST_CODE_ID_2 :'||l_invalid_number) SECONDARY_INTEREST_CODE_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','SECONDARY_INTEREST_CODE_ID_3 :'||l_invalid_number) SECONDARY_INTEREST_CODE_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','SECONDARY_INTEREST_CODE_ID_4 :'||l_invalid_number) SECONDARY_INTEREST_CODE_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','SECONDARY_INTEREST_CODE_ID_5 :'||l_invalid_number) SECONDARY_INTEREST_CODE_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','INVENTORY_ITEM_ID_1 :'||l_invalid_number) INVENTORY_ITEM_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','INVENTORY_ITEM_ID_2 :'||l_invalid_number) INVENTORY_ITEM_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','INVENTORY_ITEM_ID_3 :'||l_invalid_number) INVENTORY_ITEM_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','INVENTORY_ITEM_ID_4 :'||l_invalid_number) INVENTORY_ITEM_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','INVENTORY_ITEM_ID_5 :'||l_invalid_number) INVENTORY_ITEM_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','ORGANIZATION_ID_1 :'||l_invalid_number) ORGANIZATION_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','ORGANIZATION_ID_2 :'||l_invalid_number) ORGANIZATION_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','ORGANIZATION_ID_3 :'||l_invalid_number) ORGANIZATION_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','ORGANIZATION_ID_4 :'||l_invalid_number) ORGANIZATION_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','ORGANIZATION_ID_5 :'||l_invalid_number) ORGANIZATION_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_1,' ','x'))),'0123456789.','           x'))),0),0,' ','BUDGET_AMOUNT_1 :'||l_invalid_number) BUDGET_AMOUNT_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_2,' ','x'))),'0123456789.','           x'))),0),0,' ','BUDGET_AMOUNT_2 :'||l_invalid_number) BUDGET_AMOUNT_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_3,' ','x'))),'0123456789.','           x'))),0),0,' ','BUDGET_AMOUNT_3 :'||l_invalid_number) BUDGET_AMOUNT_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_4,' ','x'))),'0123456789.','           x'))),0),0,' ','BUDGET_AMOUNT_4 :'||l_invalid_number) BUDGET_AMOUNT_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_5,' ','x'))),'0123456789.','           x'))),0),0,' ','BUDGET_AMOUNT_5 :'||l_invalid_number) BUDGET_AMOUNT_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT,' ','x'))),'0123456789.','           x'))),0),0,' ','BUDGET_AMOUNT :'||l_invalid_number) BUDGET_AMOUNT,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_1,' ','x'))),'0123456789.','           x'))),0),0,' ','QUANTITY_1:'||l_invalid_number) QUANTITY_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_2,' ','x'))),'0123456789.','           x'))),0),0,' ','QUANTITY_2:'||l_invalid_number) QUANTITY_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_3,' ','x'))),'0123456789.','           x'))),0),0,' ','QUANTITY_3:'||l_invalid_number) QUANTITY_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_4,' ','x'))),'0123456789.','           x'))),0),0,' ','QUANTITY_4:'||l_invalid_number) QUANTITY_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_5,' ','x'))),'0123456789.','           x'))),0),0,' ','QUANTITY_5:'||l_invalid_number) QUANTITY_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','SOURCE_PROMOTION_ID_1 :'||l_invalid_number) SOURCE_PROMOTION_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','SOURCE_PROMOTION_ID_2 :'||l_invalid_number) SOURCE_PROMOTION_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','SOURCE_PROMOTION_ID_3 :'||l_invalid_number) SOURCE_PROMOTION_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','SOURCE_PROMOTION_ID_4 :'||l_invalid_number) SOURCE_PROMOTION_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','SOURCE_PROMOTION_ID_5 :'||l_invalid_number) SOURCE_PROMOTION_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','OFFER_ID_1 :'||l_invalid_number) OFFER_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','OFFER_ID_2 :'||l_invalid_number) OFFER_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','OFFER_ID_3 :'||l_invalid_number) OFFER_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','OFFER_ID_4 :'||l_invalid_number) OFFER_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','OFFER_ID_5 :'||l_invalid_number) OFFER_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ASSIGN_SALES_GROUP_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','ASSIGN_SALES_GROUP_ID :'||l_invalid_number) ASSIGN_SALES_GROUP_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ASSIGN_TO_PERSON_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','ASSIGN_TO_PERSON_ID :'||l_invalid_number) ASSIGN_TO_PERSON_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ASSIGN_TO_SALESFORCE_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','ASSIGN_TO_SALESFORCE_ID :'||l_invalid_number) ASSIGN_TO_SALESFORCE_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SCORECARD_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','SCORECARD_ID :'||l_invalid_number) SCORECARD_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(LOC_HIERARCHY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','LOC_HIERARCHY_ID :'||l_invalid_number) LOC_HIERARCHY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(FA_LOCATION_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','FA_LOCATION_ID :'||l_invalid_number) FA_LOCATION_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PROMOTION_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','PROMOTION_ID :'||l_invalid_number) PROMOTION_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','OFFER_ID :'||l_invalid_number) OFFER_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REQUEST_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','REQUEST_ID :'||l_invalid_number) REQUEST_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PROGRAM_APPLICATION_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','PROGRAM_APPLICATION_ID :'||l_invalid_number) PROGRAM_APPLICATION_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PROGRAM_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','PROGRAM_ID :'||l_invalid_number) PROGRAM_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PHONE_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','PHONE_ID :'||l_invalid_number) PHONE_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CONTACT_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','CONTACT_PARTY_ID :'||l_invalid_number) CONTACT_PARTY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECURITY_GROUP_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','SECURITY_GROUP_ID :'||l_invalid_number) SECURITY_GROUP_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INCUMBENT_PARTNER_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','INCUMBENT_PARTNER_PARTY_ID :'||l_invalid_number) INCUMBENT_PARTNER_PARTY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INCUMBENT_PARTNER_RESOURCE_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','INCUMBENT_PARTNER_RESOURCE_ID :'||l_invalid_number) INCUMBENT_PARTNER_RESOURCE_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','PARTY_ID :'||l_invalid_number) PARTY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PARTY_SITE_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','PARTY_SITE_ID :'||l_invalid_number) PARTY_SITE_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(LOCATION_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','LOCATION_ID :'||l_invalid_number) LOCATION_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REL_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','REL_PARTY_ID :'||l_invalid_number) REL_PARTY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SALES_LEAD_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','SALES_LEAD_ID :'||l_invalid_number) SALES_LEAD_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(LEAD_RANK_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','LEAD_RANK_ID :'||l_invalid_number) LEAD_RANK_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_ORDERED_AMOUNT,' ','x'))),'0123456789.','           x'))),0),0,' ','TOTAL_ORDERED_AMOUNT :'||l_invalid_number) TOTAL_ORDERED_AMOUNT,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_NUM_OF_ORDERS,' ','x'))),'0123456789.','           x'))),0),0,' ','TOTAL_NUM_OF_ORDERS :'||l_invalid_number) TOTAL_NUM_OF_ORDERS,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(NET_WORTH,' ','x'))),'0123456789.','           x'))),0),0,' ','NET_WORTH :'||l_invalid_number) NET_WORTH,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CUSTOMER_KEY)),'x')),500) - 500,0,' ','CUSTOMER_KEY :'||l_invalid_size||'(500)') CUSTOMER_KEY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_KEY)),'x')),500) - 500,0,' ','ADDRESS_KEY :'||l_invalid_size||'(500)') ADDRESS_KEY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTACT_KEY)),'x')),80) - 80,0,' ','CONTACT_KEY :'||l_invalid_size||'(80)') CONTACT_KEY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CLOSE_REASON)),'x')),30) - 30,0,' ','CLOSE_REASON :'||l_invalid_size||'(30)') CLOSE_REASON,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARENT_PROJECT)),'x')),80) - 80,0,' ','PARENT_PROJECT :'||l_invalid_size||'(80)') PARENT_PROJECT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION :'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) -240,0,' ','ORIG_SYSTEM_REFERENCE :'||l_invalid_size||'(240)') ORIG_SYSTEM_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIG_SYSTEM_CODE)),'x')),30) - 30,0,' ','ORIG_SYSTEM_CODE :'||l_invalid_size||'(30)') ORIG_SYSTEM_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(AUTO_ASSIGNMENT_TYPE)),'x')),30) - 30,0,' ','AUTO_ASSIGNMENT_TYPE :'||l_invalid_size||'(30)') AUTO_ASSIGNMENT_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_ASSIGNMENT_TYPE)),'x')),30) - 30,0,' ','PRM_ASSIGNMENT_TYPE :'||l_invalid_size||'(30)') PRM_ASSIGNMENT_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REJECT_REASON_CODE)),'x')),30) - 30,0,' ','REJECT_REASON_CODE :'||l_invalid_size||'(30)') REJECT_REASON_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_STYLE)),'x')),30) - 30,0,' ','ADDRESS_STYLE :'||l_invalid_size||'(30)') ADDRESS_STYLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,' ','ADDRESS_LINES_PHONETIC :'||l_invalid_size||'(560)') ADDRESS_LINES_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTENT_SOURCE_TYPE)),'x')),30) - 30,0,' ','CONTENT_SOURCE_TYPE :'||l_invalid_size||'(30)') CONTENT_SOURCE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOC_DESCRIPTION)),'x')),2000) - 2000,0,' ','LOC_DESCRIPTION :'||l_invalid_size||'(2000)') LOC_DESCRIPTION,
-- bug 4641591: columns obsolete
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,' ','FLOOR :'||l_invalid_size||'(50)') FLOOR,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,' ','HOUSE_NUMBER :'||l_invalid_size||'(50)') HOUSE_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,' ','PO_BOX_NUMBER :'||l_invalid_size||'(50)') PO_BOX_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_POSITION)),'x')),50) - 50,0,' ','LOCATION_POSITION :'||l_invalid_size||'(50)') LOCATION_POSITION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LANGUAGE)),'x')),4) - 4,0,' ','LANGUAGE :'||l_invalid_size||'(4)') LANGUAGE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,' ','LOCATION_DIRECTIONS :'||l_invalid_size||'(640)') LOCATION_DIRECTIONS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),10) - 10,0,' ','POSTAL_PLUS4_CODE :'||l_invalid_size||'(10)') POSTAL_PLUS4_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALES_TAX_GEOCODE)),'x')),30) - 30,0,' ','SALES_TAX_GEOCODE :'||l_invalid_size||'(30)') SALES_TAX_GEOCODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALES_TAX_INSIDE_CITY_LIMITS)),'x')),30) - 30,0,' ','SALES_TAX_INSIDE_CITY_LIMITS :'||l_invalid_size||'(30)') SALES_TAX_INSIDE_CITY_LIMITS,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,' ','STREET :'||l_invalid_size||'(50)') STREET,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,' ','STREET_NUMBER :'||l_invalid_size||'(50)') STREET_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,' ','STREET_SUFFIX :'||l_invalid_size||'(50)') STREET_SUFFIX,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SUITE)),'x')),50) - 50,0,' ','SUITE :'||l_invalid_size||'(50)') SUITE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,' ','TIME_ZONE :'||l_invalid_size||'(50)') TIME_ZONE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) -240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,/*
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DUNS_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,' ','DUNS_NUMBER :'||l_invalid_number) DUNS_NUMBER, */
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DUNS_NUMBER)),'x')),30) - 30,0,' ','DUNS_NUMBER:'||l_invalid_size||'(30)') DUNS_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GROUP_TYPE)),'x')),30) - 30,0,' ','GROUP_TYPE :'||l_invalid_size||'(30)') GROUP_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HQ_BRANCH_IND)),'x')),30) - 30,0,' ','HQ_BRANCH_IND :'||l_invalid_size||'(30)') HQ_BRANCH_IND,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JGZZ_FISCAL_CODE)),'x')),20) - 20,0,' ','JGZZ_FISCAL_CODE :'||l_invalid_size||'(20)') JGZZ_FISCAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LANGUAGE_NAME)),'x')),30) - 30,0,' ','LANGUAGE_NAME :'||l_invalid_size||'(30)') LANGUAGE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_NUMBER)),'x')),30) - 30,0,' ','PARTY_NUMBER :'||l_invalid_size||'(30)') PARTY_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MISSION_STATEMENT)),'x')),2000) - 2000,0,' ','MISSION_STATEMENT :'||l_invalid_size||'(2000)') MISSION_STATEMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_NAME_PHONETIC)),'x')),320) - 320,0,' ','ORGANIZATION_NAME_PHONETIC :'||l_invalid_size||'(320)') ORGANIZATION_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_FIRST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_FIRST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_IDENTIFIER)),'x')),60) - 60,0,' ','PERSON_IDENTIFIER :'||l_invalid_size||'(60)') PERSON_IDENTIFIER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_LAST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_LAST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_NAME)),'x')),60) - 60,0,' ','TAX_NAME :'||l_invalid_size||'(60)') TAX_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_IDEN_TYPE)),'x')),30) - 30,0,' ','PERSON_IDEN_TYPE :'||l_invalid_size||'(30)') PERSON_IDEN_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,' ','PERSON_NAME_SUFFIX :'||l_invalid_size||'(30)') PERSON_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE_TYPE)),'x')),30) - 30,0,' ','SIC_CODE_TYPE :'||l_invalid_size||'(30)') SIC_CODE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_LAST_NAME)),'x')),150) - 150,0,' ','PERSON_PREVIOUS_LAST_NAME :'||l_invalid_size||'(150)') PERSON_PREVIOUS_LAST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_IND_CLASSIFICATION_CODE)),'x')),30) - 30,0,' ','PRM_IND_CLASSIFICATION_CODE :'||l_invalid_size||'(30)') PRM_IND_CLASSIFICATION_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_TYPE)),'x')),30) - 30,0,' ','PARTY_TYPE :'||l_invalid_size||'(30)') PARTY_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LEAD_NUMBER)),'x')),30) - 30,0,' ','LEAD_NUMBER :'||l_invalid_size||'(30)') LEAD_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_SALES_LEAD_TYPE)),'x')),30) - 30,0,' ','PRM_SALES_LEAD_TYPE :'||l_invalid_size||'(30)') PRM_SALES_LEAD_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT_CODE)),'x')),30) - 30,0,' ','DEPARTMENT_CODE :'||l_invalid_size||'(30)') DEPARTMENT_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RANK)),'x')),30) - 30,0,' ','RANK :'||l_invalid_size||'(30)') RANK,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ROLE_LEVEL)),'x')),30) - 30,0,' ','ROLE_LEVEL :'||l_invalid_size||'(30)') ROLE_LEVEL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CNT_PNT_CONTENT_SOURCE_TYPE)),'x')),30) - 30,0,' ','CNT_PNT_CONTENT_SOURCE_TYPE :'||l_invalid_size||'(30)') CNT_PNT_CONTENT_SOURCE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,' ','PHONE_COUNTRY_CODE :'||l_invalid_size||'(30)') PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),30) - 30,0,' ','FAX_COUNTRY_CODE :'||l_invalid_size||'(30)') FAX_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_CALLING_CALENDAR)),'x')),30) - 30,0,' ','PHONE_CALLING_CALENDAR :'||l_invalid_size||'(30)') PHONE_CALLING_CALENDAR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_FORMAT)),'x')),30) - 30,0,' ','EMAIL_FORMAT :'||l_invalid_size||'(30)') EMAIL_FORMAT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CNT_TITLE)),'x')),30) - 30,0,' ','ORG_CNT_TITLE :'||l_invalid_size||'(30)') ORG_CNT_TITLE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CNT_PNT_TIME_ZONE,' ','x'))),'0123456789.','           x'))),0),0,' ','CNT_PNT_TIME_ZONE :'||l_invalid_number) CNT_PNT_TIME_ZONE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RAW_PHONE_NUMBER)),'x')),60) - 60,0,' ','RAW_PHONE_NUMBER :'||l_invalid_size||'(60)') RAW_PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_EXTENSION)),'x')),20) - 20,0,' ','FAX_EXTENSION :'||l_invalid_size||'(20)') FAX_EXTENSION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT)),'x')),60) - 60,0,' ','DEPARTMENT :'||l_invalid_size||'(60)') DEPARTMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRIMARY_CONTACT_PER_ROLE_TYPE)),'x')),1) - 1,0,' ','PRIMARY_CONTACT_PER_ROLE_TYPE :'||l_invalid_size||'(1)') PRIMARY_CONTACT_PER_ROLE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRIMARY_PER_TYPE)),'x')),1) - 1,0,' ','PRIMARY_PER_TYPE :'||l_invalid_size||'(1)') PRIMARY_PER_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_USES_COMMENTS)),'x')),240) - 240,0,' ','PS_USES_COMMENTS :'||l_invalid_size||'(240)') PS_USES_COMMENTS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_SITE_NAME)),'x')),240) - 240,0,' ','PARTY_SITE_NAME :'||l_invalid_size||'(240)') PARTY_SITE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CNT_COMMENTS)),'x')),240) - 240,0,' ','ORG_CNT_COMMENTS :'||l_invalid_size||'(240)') ORG_CNT_COMMENTS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SITE_USE_TYPE)),'x')),30) - 30,0,' ','SITE_USE_TYPE :'||l_invalid_size||'(30)') SITE_USE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_SITE_NUMBER)),'x')),30) - 30,0,' ','PARTY_SITE_NUMBER :'||l_invalid_size||'(30)') PARTY_SITE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTACT_NUMBER)),'x')),30) - 30,0,' ','CONTACT_NUMBER :'||l_invalid_size||'(30)') CONTACT_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESSEE)),'x')),360) - 360,0,' ','ADDRESSEE :'||l_invalid_size||'(360)') ADDRESSEE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MAILSTOP)),'x')),60) - 60,0,' ','MAILSTOP :'||l_invalid_size||'(60)') MAILSTOP,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(MARKETING_SCORE,' ','x'))),'0123456789.','           x'))),0),0,' ','MARKETING_SCORE :'||l_invalid_number) MARKETING_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_INITIALS)),'x')),6) - 6,0,' ','PERSON_INITIALS :'||l_invalid_size||'(6)') PERSON_INITIALS,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_1,' ','x'))),'0123456789.','           x'))),0),0,' ','CATEGORY_ID_1 :'||l_invalid_number) CATEGORY_ID_1,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_2,' ','x'))),'0123456789.','           x'))),0),0,' ','CATEGORY_ID_2 :'||l_invalid_number) CATEGORY_ID_2,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_3,' ','x'))),'0123456789.','           x'))),0),0,' ','CATEGORY_ID_3 :'||l_invalid_number) CATEGORY_ID_3,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_4,' ','x'))),'0123456789.','           x'))),0),0,' ','CATEGORY_ID_4 :'||l_invalid_number) CATEGORY_ID_4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_5,' ','x'))),'0123456789.','           x'))),0),0,' ','CATEGORY_ID_5 :'||l_invalid_number) CATEGORY_ID_5,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SALES_METHODOLOGY_ID,' ','x'))),'0123456789.','
x'))),0),0,' ','SALES_METHODOLOGY_ID :'||l_invalid_number) SALES_METHODOLOGY_ID,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DUNS_NUMBER_C)),'x')),30) - 30,0,' ','DUNS_NUMBER_C :'||l_invalid_size||'(30)') DUNS_NUMBER_C,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SOURCE_PRIMARY_REFERENCE)),'x')),30) - 30,0,' ','SOURCE_PRIMARY_REFERENCE :'||l_invalid_size||'(30)') SOURCE_PRIMARY_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SOURCE_SECONDARY_REFERENCE)),'x')),30) - 30,0,' ','SOURCE_SECONDARY_REFERENCE :'||l_invalid_size||'(30)') SOURCE_SECONDARY_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NOTE_TYPE)),'x')),30) - 30,0,' ','NOTE_TYPE :'||l_invalid_size||'(30)')
NOTE_TYPE
FROM ams_lead_mapping_v
WHERE import_list_header_id = p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
  and
(
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(source_system))),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LEAD_NOTE)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROMOTION_CODE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(CUSTOMER_NAME))),255) - 255,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ANALYSIS_FY)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CUSTOMER_CATEGORY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DUNS_NUMBER_C)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SOURCE_PRIMARY_REFERENCE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SOURCE_SECONDARY_REFERENCE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NOTE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
 or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CATEGORY_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SALES_METHODOLOGY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FISCAL_YEAREND_MONTH)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(num_of_employees,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(POTENTIAL_REVENUE_CURR_FY,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(POTENTIAL_REVENUE_NEXT_FY,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CUSTOMER_RANK)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(YEAR_ESTABLISHED,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDR_DO_NOT_MAIL_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONT_DO_NOT_MAIL_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(COUNTRY))),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(ADDRESS1))),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SEX_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALUTATION)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(LAST_NAME))),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(FIRST_NAME))),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TITLE)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE)),'x')),100) - 100,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_STATUS)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EXTENSION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_INITIAL)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MAIL_STOP)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DO_NOT_PHONE_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DO_NOT_FAX_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DO_NOT_EMAIL_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URGENT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ACCEPT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DELETED_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(IMPORT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KEEP_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(QUALIFIED_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRIMARY_CONTACT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOC_VALIDATED_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GSA_INDICATOR_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_REFERENCE_USE_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTIES_VALIDATED_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_EXEC_SPONSOR_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_PRJ_LEAD_IN_PLACE_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_PARTY_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_LOC_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_PS_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_REL_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NEW_CON_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTACT_ROLE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CHANNEL_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUDGET_STATUS_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_TIMEFRAME_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CURRENCY_CODE)),'x')),15) - 15,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_1)),'x')),3) - 3,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_2)),'x')),3) - 3,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_3)),'x')),3) - 3,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_4)),'x')),3) - 3,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(UOM_CODE_5)),'x')),3) - 3,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INTEREST_TYPE_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PRIMARY_INTEREST_CODE_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECONDARY_INTEREST_CODE_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INVENTORY_ITEM_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ORGANIZATION_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(BUDGET_AMOUNT,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(QUANTITY_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SOURCE_PROMOTION_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_1,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_2,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_3,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_4,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID_5,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ASSIGN_SALES_GROUP_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ASSIGN_TO_PERSON_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SCORECARD_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(LOC_HIERARCHY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(FA_LOCATION_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PROMOTION_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(OFFER_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REQUEST_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PROGRAM_APPLICATION_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PROGRAM_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PHONE_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CONTACT_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SECURITY_GROUP_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INCUMBENT_PARTNER_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(INCUMBENT_PARTNER_RESOURCE_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PARTY_SITE_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(LOCATION_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REL_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(SALES_LEAD_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(LEAD_RANK_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_ORDERED_AMOUNT,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_NUM_OF_ORDERS,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(NET_WORTH,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CUSTOMER_KEY)),'x')),500) - 500,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_KEY)),'x')),500) - 500,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTACT_KEY)),'x')),80) - 80,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CLOSE_REASON)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARENT_PROJECT)),'x')),80) - 80,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIG_SYSTEM_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(AUTO_ASSIGNMENT_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_ASSIGNMENT_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REJECT_REASON_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_STYLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTENT_SOURCE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOC_DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_POSITION)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LANGUAGE)),'x')),4) - 4,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALES_TAX_GEOCODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALES_TAX_INSIDE_CITY_LIMITS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SUITE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,'OK','NO') = 'NO'
/* or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DUNS_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
*/
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DUNS_NUMBER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GROUP_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HQ_BRANCH_IND)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JGZZ_FISCAL_CODE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LANGUAGE_NAME)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HQ_BRANCH_IND)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MISSION_STATEMENT)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_NAME_PHONETIC)),'x')),320) - 320,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_IDENTIFIER)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_IDEN_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_LAST_NAME)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_IND_CLASSIFICATION_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LEAD_NUMBER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRM_SALES_LEAD_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RANK)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ROLE_LEVEL)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CNT_PNT_CONTENT_SOURCE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_CALLING_CALENDAR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_FORMAT)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CNT_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CNT_PNT_TIME_ZONE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RAW_PHONE_NUMBER)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_EXTENSION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRIMARY_CONTACT_PER_ROLE_TYPE)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRIMARY_PER_TYPE)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_USES_COMMENTS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_SITE_NAME)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CNT_COMMENTS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SITE_USE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PARTY_SITE_NUMBER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONTACT_NUMBER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESSEE)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MAILSTOP)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(MARKETING_SCORE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_INITIALS)),'x')),6) - 6,0,'OK','NO') = 'NO'
)
;

CURSOR c_lead_batch_id is
SELECT
batch_id
FROM ams_imp_list_headers_all
WHERE import_list_header_id = p_import_list_header_id;

CURSOR c_lead_date_fields is
SELECT
import_list_header_id,
import_source_line_id,
assign_date,
address_effective_date,
last_ordered_date,
program_update_date,
lead_date
FROM ams_lead_mapping_v
WHERE import_list_header_id = p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
  AND (assign_date is not null or address_effective_date is not null or
       last_ordered_date is not null or program_update_date is not null
       or lead_date is not null);

CURSOR c_source_system is
SELECT COUNT(*) total_rec, source_system FROM ams_lead_mapping_v
WHERE import_list_header_id = p_import_list_header_id
GROUP BY source_system ORDER BY COUNT(*) DESC;


CURSOR c_invalid_src_sys is
SELECT
import_list_header_id,
import_source_line_id
FROM ams_lead_mapping_v
WHERE import_list_header_id = p_import_list_header_id
  AND source_system <> l_source_system;

cursor c_error_exists is
select 'Y'
from ams_list_import_errors
where import_list_header_id = x_import_source_line_id
  and import_source_line_id = x_import_source_line_id
  and batch_id		    = l_batch_id;

begin

        IF p_import_list_header_id IS NULL THEN
                RAISE FND_API.G_EXC_ERROR;
        END IF;
    p_return_status := FND_API.G_RET_STS_SUCCESS;

    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_DATATYPE_ERROR_CHK');
    l_invalid_number := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_SIZE_ERROR_CHK');
    l_invalid_size := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_NULL_ERROR_CHK');
    l_null_value := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_SOUR_SYS_ERROR_CHK');
    l_invalid_src_system := FND_MESSAGE.get;

    OPEN c_lead_batch_id;
    FETCH c_lead_batch_id into l_batch_id;
    CLOSE c_lead_batch_id;

    OPEN c_lead_fields;
     LOOP
      FETCH c_lead_fields BULK COLLECT INTO
       l_import_source_line_id,
       l_import_list_header_id,
       l_col1                                  ,
       l_col2                                  ,
       l_col3                                  ,
       l_col4                                  ,
       l_col5                                  ,
       l_col6                                  ,
       l_col7                                  ,
       l_col8                                  ,
       l_col9                                  ,
       l_col10                                 ,
       l_col11                                 ,
       l_col12                                 ,
       l_col13                                 ,
       l_col14                                 ,
       l_col15                                 ,
       l_col16                                 ,
       l_col17                                 ,
       l_col18                                 ,
       l_col19                                 ,
       l_col20                                 ,
       l_col21                                 ,
       l_col22                                 ,
       l_col23                                 ,
       l_col24                                 ,
       l_col25                                 ,
       l_col26                                 ,
       l_col27                                 ,
       l_col28                                 ,
       l_col29                                 ,
       l_col30                                 ,
       l_col31                                 ,
       l_col32                                 ,
       l_col33                                 ,
       l_col34                                 ,
       l_col35                                 ,
       l_col36                                 ,
       l_col37                                 ,
       l_col38                                 ,
       l_col39                                 ,
       l_col40                                 ,
       l_col41                                 ,
       l_col42                                 ,
       l_col43                                 ,
       l_col44                                 ,
       l_col45                                 ,
       l_col46                                 ,
       l_col47                                 ,
       l_col48                                 ,
       l_col49                                 ,
       l_col50                                 ,
       l_col51                                 ,
       l_col52                                 ,
       l_col53                                 ,
       l_col54                                 ,
       l_col55                                 ,
       l_col56                                 ,
       l_col57                                 ,
       l_col58                                 ,
       l_col59                                 ,
       l_col60                                 ,
       l_col61                                 ,
       l_col62                                 ,
       l_col63                                 ,
       l_col64                                 ,
       l_col65                                 ,
       l_col66                                 ,
       l_col67                                 ,
       l_col68                                 ,
       l_col69                                 ,
       l_col70                                 ,
       l_col71                                 ,
       l_col72                                 ,
       l_col73                                 ,
       l_col74                                 ,
       l_col75                                 ,
       l_col76                                 ,
       l_col77                                 ,
       l_col78                                 ,
       l_col79                                 ,
       l_col80                                 ,
       l_col81                                 ,
       l_col82                                 ,
       l_col83                                 ,
       l_col84                                 ,
       l_col85                                 ,
       l_col86                                 ,
       l_col87                                 ,
       l_col88                                 ,
       l_col89                                 ,
       l_col90                                 ,
       l_col91                                 ,
       l_col92                                 ,
       l_col93                                 ,
       l_col94                                 ,
       l_col95                                 ,
       l_col96                                 ,
       l_col97                                 ,
       l_col98                                 ,
       l_col99                                 ,
       l_col100                                ,
       l_col101                                  ,
       l_col102                                  ,
       l_col103                                  ,
       l_col104                                  ,
       l_col105                                  ,
       l_col106                                  ,
       l_col107                                  ,
       l_col108                                  ,
       l_col109                                  ,
       l_col110                                 ,
       l_col111                                 ,
       l_col112                                 ,
       l_col113                                 ,
       l_col114                                 ,
       l_col115                                 ,
       l_col116                                 ,
       l_col117                                 ,
       l_col118                                 ,
       l_col119                                 ,
       l_col120                                 ,
       l_col121                                 ,
       l_col122                                 ,
       l_col123                                 ,
       l_col124                                 ,
       l_col125                                 ,
       l_col126                                 ,
       l_col127                                 ,
       l_col128                                 ,
       l_col129                                 ,
       l_col130                                 ,
       l_col131                                 ,
       l_col132                                 ,
       l_col133                                 ,
       l_col134                                 ,
       l_col135                                 ,
       l_col136                                 ,
       l_col137                                 ,
       l_col138                                 ,
       l_col139                                 ,
       l_col140                                 ,
       l_col141                                 ,
       l_col142                                 ,
       l_col143                                 ,
       l_col144                                 ,
       l_col145                                 ,
       l_col146                                 ,
       l_col147                                 ,
       l_col148                                 ,
       l_col149                                 ,
       l_col150                                 ,
       l_col151                                 ,
       l_col152                                 ,
       l_col153                                 ,
       l_col154                                 ,
       l_col155                                 ,
       l_col156                                 ,
       l_col157                                 ,
       l_col158                                 ,
       l_col159                                 ,
       l_col160                                 ,
       l_col161                                 ,
       l_col162                                 ,
       l_col163                                 ,
       l_col164                                 ,
       l_col165                                 ,
       l_col166                                 ,
       l_col167                                 ,
       l_col168                                 ,
--       l_col169                                 ,
--       l_col170                                 ,
--       l_col171                                 ,
       l_col172                                 ,
       l_col173                                 ,
       l_col174                                 ,
       l_col175                                 ,
       l_col176                                 ,
       l_col177                                 ,
--       l_col178                                 ,
--       l_col179                                 ,
--       l_col180                                 ,
--       l_col181                                 ,
       l_col182                                 ,
       l_col183                                 ,
       l_col184                                 ,
       l_col185                                 ,
       l_col186                                 ,
       l_col187                                 ,
       l_col188                                 ,
       l_col189                                 ,
       l_col190                                 ,
       l_col191                                 ,
       l_col192                                 ,
       l_col193                                 ,
       l_col194                                 ,
       l_col195                                 ,
       l_col196                                 ,
       l_col197                                 ,
       l_col198                                 ,
       l_col199                                 ,
       l_col200                                ,
       l_col201                                  ,
       l_col202                                  ,
       l_col203                                  ,
       l_col204                                  ,
       l_col205                                  ,
       l_col206                                  ,
       l_col207                                  ,
       l_col208                                  ,
       l_col209                                  ,
       l_col210                                 ,
       l_col211                                 ,
       l_col212                                 ,
       l_col213                                 ,
       l_col214                                 ,
       l_col215                                 ,
       l_col216                                 ,
       l_col217                                 ,
       l_col218                                 ,
       l_col219                                 ,
       l_col220                                 ,
       l_col221                                 ,
       l_col222                                 ,
       l_col223                                 ,
       l_col224                                 ,
       l_col225                                 ,
       l_col226                                 ,
       l_col227                                 ,
       l_col228                             ,
       l_col229,
       l_col230,
       l_col231,
       l_col232,
       l_col233,
       l_col234,
       l_col235,
       l_col236,
       l_col237,
       l_col238
      LIMIT L_MAX_ROW_COUNT;


      FORALL i IN 1 .. l_import_source_line_id.count
       INSERT INTO ams_list_import_errors
       (
	LIST_IMPORT_ERROR_ID,
	LAST_UPDATED_BY,
	LAST_UPDATE_DATE,
	CREATION_DATE,
	CREATED_BY,
	LAST_UPDATE_LOGIN,
	IMPORT_SOURCE_LINE_ID,
	IMPORT_LIST_HEADER_ID,
	IMPORT_TYPE,
	ERROR_TYPE,
        BATCH_ID,
        ERROR_FLAG,
        col1                                  ,
        col2                                  ,
        col3                                  ,
        col4                                  ,
        col5                                  ,
        col6                                  ,
        col7                                  ,
        col8                                  ,
        col9                                  ,
        col10                                 ,
        col11                                 ,
        col12                                 ,
        col13                                 ,
        col14                                 ,
        col15                                 ,
        col16                                 ,
        col17                                 ,
        col18                                 ,
        col19                                 ,
        col20                                 ,
        col21                                 ,
        col22                                 ,
        col23                                 ,
        col24                                 ,
        col25                                 ,
        col26                                 ,
        col27                                 ,
        col28                                 ,
        col29                                 ,
        col30                                 ,
        col31                                 ,
        col32                                 ,
        col33                                 ,
        col34                                 ,
        col35                                 ,
        col36                                 ,
        col37                                 ,
        col38                                 ,
        col39                                 ,
        col40                                 ,
        col41                                 ,
        col42                                 ,
        col43                                 ,
        col44                                 ,
        col45                                 ,
        col46                                 ,
        col47                                 ,
        col48                                 ,
        col49                                 ,
        col50                                 ,
        col51                                 ,
        col52                                 ,
        col53                                 ,
        col54                                 ,
        col55                                 ,
        col56                                 ,
        col57                                 ,
        col58                                 ,
        col59                                 ,
        col60                                 ,
        col61                                 ,
        col62                                 ,
        col63                                 ,
        col64                                 ,
        col65                                 ,
        col66                                 ,
        col67                                 ,
        col68                                 ,
        col69                                 ,
        col70                                 ,
        col71                                 ,
        col72                                 ,
        col73                                 ,
        col74                                 ,
        col75                                 ,
        col76                                 ,
        col77                                 ,
        col78                                 ,
        col79                                 ,
        col80                                 ,
        col81                                 ,
        col82                                 ,
        col83                                 ,
        col84                                 ,
        col85                                 ,
        col86                                 ,
        col87                                 ,
        col88                                 ,
        col89                                 ,
        col90                                 ,
        col91                                 ,
        col92                                 ,
        col93                                 ,
        col94                                 ,
        col95                                 ,
        col96                                 ,
        col97                                 ,
        col98                                 ,
        col99                                 ,
        col100                                ,
        col101                                  ,
        col102                                  ,
        col103                                  ,
        col104                                  ,
        col105                                  ,
        col106                                  ,
        col107                                  ,
        col108                                  ,
        col109                                  ,
        col110                                 ,
        col111                                 ,
        col112                                 ,
        col113                                 ,
        col114                                 ,
        col115                                 ,
        col116                                 ,
        col117                                 ,
        col118                                 ,
        col119                                 ,
        col120                                 ,
        col121                                 ,
        col122                                 ,
        col123                                 ,
        col124                                 ,
        col125                                 ,
        col126                                 ,
        col127                                 ,
        col128                                 ,
        col129                                 ,
        col130                                 ,
        col131                                 ,
        col132                                 ,
        col133                                 ,
        col134                                 ,
        col135                                 ,
        col136                                 ,
        col137                                 ,
        col138                                 ,
        col139                                 ,
        col140                                 ,
        col141                                 ,
        col142                                 ,
        col143                                 ,
        col144                                 ,
        col145                                 ,
        col146                                 ,
        col147                                 ,
        col148                                 ,
        col149                                 ,
        col150                                 ,
        col151                                 ,
        col152                                 ,
        col153                                 ,
        col154                                 ,
        col155                                 ,
        col156                                 ,
        col157                                 ,
        col158                                 ,
        col159                                 ,
        col160                                 ,
        col161                                 ,
        col162                                 ,
        col163                                 ,
        col164                                 ,
        col165                                 ,
        col166                                 ,
        col167                                 ,
        col168                                 ,
--        col169                                 ,
--        col170                                 ,
--        col171                                 ,
        col172                                 ,
        col173                                 ,
        col174                                 ,
        col175                                 ,
        col176                                 ,
        col177                                 ,
--        col178                                 ,
--        col179                                 ,
--        col180                                 ,
--        col181                                 ,
        col182                                 ,
        col183                                 ,
        col184                                 ,
        col185                                 ,
        col186                                 ,
        col187                                 ,
        col188                                 ,
        col189                                 ,
        col190                                 ,
        col191                                 ,
        col192                                 ,
        col193                                 ,
        col194                                 ,
        col195                                 ,
        col196                                 ,
        col197                                 ,
        col198                                 ,
        col199                                 ,
        col200                                ,
        col201                                  ,
        col202                                  ,
        col203                                  ,
        col204                                  ,
        col205                                  ,
        col206                                  ,
        col207                                  ,
        col208                                  ,
        col209                                  ,
        col210                                 ,
        col211                                 ,
        col212                                 ,
        col213                                 ,
        col214                                 ,
        col215                                 ,
        col216                                 ,
        col217                                 ,
        col218                                 ,
        col219                                 ,
        col220                                 ,
        col221                                 ,
        col222                                 ,
        col223                                 ,
        col224                                 ,
        col225                                 ,
        col226                                 ,
	col227                                 ,
	col228,
       col229,
       col230,
       col231,
       col232,
       col233,
       col234,
       col235,
       col236,
       col237,
       col238
        )
       VALUES
       (
	ams_list_import_errors_s.nextval,      -- LIST_IMPORT_ERROR_ID,
	FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
	SYSDATE,                              -- LAST_UPDATE_DATE,
	SYSDATE,                              -- CREATION_DATE,
	FND_GLOBAL.User_ID,                   -- CREATED_BY,
	FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
        l_import_source_line_id(i),
        l_import_list_header_id(i),
	'LEAD',                                -- IMPORT_TYPE,
	'E',                                  -- ERROR_TYPE,
        l_batch_id,
       'Y',
       l_col1(i),
       l_col2(i),
       l_col3(i),
       l_col4(i),
       l_col5(i),
       l_col6(i),
       l_col7(i),
       l_col8(i),
       l_col9(i),
       l_col10(i),
       l_col11(i),
       l_col12(i),
       l_col13(i),
       l_col14(i),
       l_col15(i),
       l_col16(i),
       l_col17(i),
       l_col18(i),
       l_col19(i),
       l_col20(i),
       l_col21(i),
       l_col22(i),
       l_col23(i),
       l_col24(i),
       l_col25(i),
       l_col26(i),
       l_col27(i),
       l_col28(i),
       l_col29(i),
       l_col30(i),
       l_col31(i),
       l_col32(i),
       l_col33(i),
       l_col34(i),
       l_col35(i),
       l_col36(i),
       l_col37(i),
       l_col38(i),
       l_col39(i),
       l_col40(i),
       l_col41(i),
       l_col42(i),
       l_col43(i),
       l_col44(i),
       l_col45(i),
       l_col46(i),
       l_col47(i),
       l_col48(i),
       l_col49(i),
       l_col50(i),
       l_col51(i),
       l_col52(i),
       l_col53(i),
       l_col54(i),
       l_col55(i),
       l_col56(i),
       l_col57(i),
       l_col58(i),
       l_col59(i),
       l_col60(i),
       l_col61(i),
       l_col62(i),
       l_col63(i),
       l_col64(i),
       l_col65(i),
       l_col66(i),
       l_col67(i),
       l_col68(i),
--       l_col69(i),
--       l_col70(i),
--       l_col71(i),
       l_col72(i),
       l_col73(i),
       l_col74(i),
       l_col75(i),
       l_col76(i),
       l_col77(i),
--       l_col78(i),
--       l_col79(i),
--       l_col80(i),
--       l_col81(i),
       l_col82(i),
       l_col83(i),
       l_col84(i),
       l_col85(i),
       l_col86(i),
       l_col87(i),
       l_col88(i),
       l_col89(i),
       l_col90(i),
       l_col91(i),
       l_col92(i),
       l_col93(i),
       l_col94(i),
       l_col95(i),
       l_col96(i),
       l_col97(i),
       l_col98(i),
       l_col99(i),
       l_col100(i),
       l_col101(i),
       l_col102(i),
       l_col103(i),
       l_col104(i),
       l_col105(i),
       l_col106(i),
       l_col107(i),
       l_col108(i),
       l_col109(i),
       l_col110(i),
       l_col111(i),
       l_col112(i),
       l_col113(i),
       l_col114(i),
       l_col115(i),
       l_col116(i),
       l_col117(i),
       l_col118(i),
       l_col119(i),
       l_col120(i),
       l_col121(i),
       l_col122(i),
       l_col123(i),
       l_col124(i),
       l_col125(i),
       l_col126(i),
       l_col127(i),
       l_col128(i),
       l_col129(i),
       l_col130(i),
       l_col131(i),
       l_col132(i),
       l_col133(i),
       l_col134(i),
       l_col135(i),
       l_col136(i),
       l_col137(i),
       l_col138(i),
       l_col139(i),
       l_col140(i),
       l_col141(i),
       l_col142(i),
       l_col143(i),
       l_col144(i),
       l_col145(i),
       l_col146(i),
       l_col147(i),
       l_col148(i),
       l_col149(i),
       l_col150(i),
       l_col151(i),
       l_col152(i),
       l_col153(i),
       l_col154(i),
       l_col155(i),
       l_col156(i),
       l_col157(i),
       l_col158(i),
       l_col159(i),
       l_col160(i),
       l_col161(i),
       l_col162(i),
       l_col163(i),
       l_col164(i),
       l_col165(i),
       l_col166(i),
       l_col167(i),
       l_col168(i),
       l_col169(i),
       l_col170(i),
       l_col171(i),
       l_col172(i),
       l_col173(i),
       l_col174(i),
       l_col175(i),
       l_col176(i),
       l_col177(i),
       l_col178(i),
       l_col179(i),
       l_col180(i),
       l_col181(i),
       l_col182(i),
       l_col183(i),
       l_col184(i),
       l_col185(i),
       l_col186(i),
       l_col187(i),
       l_col188(i),
       l_col189(i),
       l_col190(i),
       l_col191(i),
       l_col192(i),
       l_col193(i),
       l_col194(i),
       l_col195(i),
       l_col196(i),
       l_col197(i),
       l_col198(i),
       l_col199(i),
       l_col200(i),
       l_col201(i),
       l_col202(i),
       l_col203(i),
       l_col204(i),
       l_col205(i),
       l_col206(i),
       l_col207(i),
       l_col208(i),
       l_col209(i),
       l_col210(i),
       l_col211(i),
       l_col212(i),
       l_col213(i),
       l_col214(i),
       l_col215(i),
       l_col216(i),
       l_col217(i),
       l_col218(i),
       l_col219(i),
       l_col220(i),
       l_col221(i),
       l_col222(i),
       l_col223(i),
       l_col224(i),
       l_col225(i),
       l_col226(i),
       l_col227(i),
       l_col228(i),
       l_col229(i),
       l_col230(i),
       l_col231(i),
       l_col232(i),
       l_col233(i),
       l_col234(i),
       l_col235(i),
       l_col236(i),
       l_col237(i),
       l_col238(i)
       );
      EXIT WHEN c_lead_fields%NOTFOUND;
    END LOOP;
      CLOSE c_lead_fields;

       OPEN c_lead_date_fields;
       LOOP
       FETCH c_lead_date_fields into x_import_list_header_id,x_import_source_line_id,l_assign_date,
             l_address_effective_date, l_last_ordered_date,l_program_update_date,l_lead_date;
       EXIT WHEN c_lead_date_fields%NOTFOUND;
       date_validate( x_import_list_header_id,x_import_source_line_id,l_batch_id,l_assign_date,
             l_address_effective_date, l_last_ordered_date,l_program_update_date,l_lead_date,null);
       End Loop;
       CLOSE c_lead_date_fields;

       open c_source_system;
       fetch c_source_system into l_total_rec, l_source_system;
       close c_source_system;
      if l_source_system is not NULL then
       open c_invalid_src_sys;
       loop
        fetch c_invalid_src_sys into x_import_list_header_id,x_import_source_line_id;
        exit when c_invalid_src_sys%notfound;
        l_error_exists := null;
        open c_error_exists;
        fetch c_error_exists into l_error_exists;
        close c_error_exists;
        if l_error_exists = 'Y' then
          update ams_list_import_errors
          set col1 =  'SOURCE_SYSTEM:'||l_invalid_src_system
          where import_list_header_id = x_import_list_header_id
          and import_source_line_id = x_import_source_line_id
          and batch_id                = l_batch_id;
        end if;
        if l_error_exists is null then
          INSERT INTO ams_list_import_errors
          (
           LIST_IMPORT_ERROR_ID,
           LAST_UPDATED_BY,
           LAST_UPDATE_DATE,
           CREATION_DATE,
           CREATED_BY,
           LAST_UPDATE_LOGIN,
           IMPORT_SOURCE_LINE_ID,
           IMPORT_LIST_HEADER_ID,
           IMPORT_TYPE,
           ERROR_TYPE,
           BATCH_ID,
           col1
           )
          VALUES
          (
          ams_list_import_errors_s.nextval,      -- LIST_IMPORT_ERROR_ID,
          FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
          SYSDATE,                              -- LAST_UPDATE_DATE,
          SYSDATE,                              -- CREATION_DATE,
          FND_GLOBAL.User_ID,                   -- CREATED_BY,
          FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
          x_import_source_line_id,
          x_import_list_header_id,
          'LEAD',                                -- IMPORT_TYPE,
          'E',                                  -- ERROR_TYPE,
          l_batch_id,
           'SOURCE_SYSTEM:'||l_invalid_src_system);
        end if;
       end loop;
       close c_invalid_src_sys;
      end if;

       UPDATE ams_imp_source_lines
         SET load_status = decode(load_status,'DUPLICATE','DUPLICATE','ERROR')
       WHERE import_list_header_id = p_import_list_header_id
         and import_source_line_id in
       (select import_source_line_id from ams_list_import_errors
        where import_list_header_id = p_import_list_header_id
          and error_type = 'E');


EXCEPTION
 WHEN OTHERS THEN
    p_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in execute_lead_data_validation:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end execute_lead_data_validation;

-- ---------------------------------------
procedure date_validate (
   p_import_list_header_id    IN    NUMBER,
   p_import_source_line_id    IN    NUMBER,
   p_batch_id                   IN    NUMBER,
   p_column1                  IN    VARCHAR2,
   p_column2                  IN    VARCHAR2,
   p_column3                  IN    VARCHAR2,
   p_column4                  IN    VARCHAR2,
   p_column5                  IN    VARCHAR2,
   p_column6                  IN    VARCHAR2
                        ) IS

l_col1          varchar2(1);
l_col2          varchar2(1);
l_col3          varchar2(1);
l_col4          varchar2(1);
l_col5          varchar2(1);
l_col6          varchar2(1);
l_date1         date;
l_date2         date;
l_date3         date;
l_date4         date;
l_date5         date;
l_date6         date;
l_error_exist   varchar2(1);
l_imp_type      varchar2(60);
l_col11         varchar2(60);
l_col22         varchar2(60);
l_col33         varchar2(60);
l_col44         varchar2(60);
l_col55         varchar2(60);
l_col66         varchar2(60);
l_return_status varchar2(1);
l_invalid_date varchar2(4000) ;

l_org_imp_xml_element_id        number;
l_add_imp_xml_element_id        number;
l_ocont_imp_xml_element_id      number;
l_cp_imp_xml_element_id         number;
l_em_imp_xml_element_id         number;
l_per_imp_xml_element_id        number;
l_file_type                     varchar2(60);
x_date_format    VARCHAR2(50);

cursor c_error_exists is
select 'Y'
from ams_list_import_errors
where import_list_header_id = p_import_list_header_id
  and import_source_line_id = p_import_source_line_id
  and batch_id              = p_batch_id;

cursor c_imp_type is
select import_type
from ams_imp_list_headers_all
where import_list_header_id = p_import_list_header_id;

cursor c_b2bxmlrec is
select org_imp_xml_element_id, add_imp_xml_element_id, ocont_imp_xml_element_id,
cp_imp_xml_element_id, em_imp_xml_element_id
from ams_hz_b2b_mapping_v where import_source_line_id = p_import_source_line_id;

cursor c_b2cxmlrec is
select per_imp_xml_element_id, add_imp_xml_element_id,cp_imp_xml_element_id, em_imp_xml_element_id
from ams_hz_b2c_mapping_v where import_source_line_id = p_import_source_line_id;

cursor c_file_type is
select file_type from AMS_IMP_DOCUMENTS where import_list_header_id = p_import_list_header_id;

begin
 FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_DATE_VAL_ERROR_CHK');
 l_invalid_date := FND_MESSAGE.get;
 x_date_format             := fnd_profile.value('ICX_DATE_FORMAT_MASK');
 open c_file_type;
 fetch c_file_type into l_file_type;
 close c_file_type;

 open c_b2bxmlrec;
 fetch c_b2bxmlrec into l_org_imp_xml_element_id, l_add_imp_xml_element_id, l_ocont_imp_xml_element_id,
                     l_cp_imp_xml_element_id, l_em_imp_xml_element_id;
 close c_b2bxmlrec;
 open c_imp_type;
 fetch c_imp_type into l_imp_type;
 close c_imp_type;
 open c_error_exists;
 fetch c_error_exists into l_error_exist;
 close c_error_exists;

 if l_imp_type = 'B2B' then
 open c_b2bxmlrec;
 fetch c_b2bxmlrec into l_org_imp_xml_element_id, l_add_imp_xml_element_id, l_ocont_imp_xml_element_id,
                     l_cp_imp_xml_element_id, l_em_imp_xml_element_id;
 close c_b2bxmlrec;
 end if;
 if l_imp_type = 'B2C' then
 open c_b2cxmlrec;
 fetch c_b2cxmlrec into l_per_imp_xml_element_id, l_add_imp_xml_element_id,
                     l_cp_imp_xml_element_id, l_em_imp_xml_element_id;
 close c_b2cxmlrec;
 end if;
l_col1 := null;
l_col2 := null;
l_col3 := null;
l_col4 := null;
l_col5 := null;
l_col6 := null;
/*
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'p_column1 = '||p_column1,
      p_msg_type        => 'DEBUG'
   );
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'p_column2 = '||p_column2,
      p_msg_type        => 'DEBUG'
   );
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'p_column3 = '||p_column3,
      p_msg_type        => 'DEBUG'
   );
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'p_column4 = '||p_column4,
      p_msg_type        => 'DEBUG'
   );
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'p_column5 = '||p_column5,
      p_msg_type        => 'DEBUG'
   );
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'p_column6 = '||p_column6,
      p_msg_type        => 'DEBUG'
   );
*/
 if p_column1 is not null then
  begin
 --   l_date1 := to_date(p_column1,'MM/DD/YYYY');
select to_date(p_column1, x_date_format) into l_date1 from dual;
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'l_date1 = '||to_char(l_date1),
      p_msg_type        => 'DEBUG'
   );

  exception
  when others then
                l_col1 := 'Y';
  end;
 end if;
 if p_column2 is not null then
  begin
   -- l_date2 :=  to_date(p_column2,'MM/DD/YYYY');
select to_date(p_column2, x_date_format) into l_date2 from dual;
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'l_date2 = '||to_char(l_date2),
      p_msg_type        => 'DEBUG'
   );

  exception
  when others then
                l_col2 := 'Y';
  end;
 end if;
 if p_column3 is not null then
  begin
--     l_date3 :=  to_date(p_column3,'MM/DD/YYYY');
select to_date(p_column3, x_date_format) into l_date3 from dual;
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'l_date3 = '||to_char(l_date3),
      p_msg_type        => 'DEBUG'
   );

  exception
  when others then
                l_col3 := 'Y';
  end;
 end if;

 if p_column4 is not null then
  begin
    -- l_date4 :=  to_date(p_column4,'MM/DD/YYYY');
select to_date(p_column4, x_date_format) into l_date4 from dual;
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'l_date4 = '||to_char(l_date4),
      p_msg_type        => 'DEBUG'
   );

  exception
  when others then
                l_col4 := 'Y';
  end;
 end if;


 if p_column5 is not null then
  begin
    -- l_date5 :=  to_date(p_column5,'MM/DD/YYYY');
select to_date(p_column5, x_date_format) into l_date5 from dual;
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'l_date5 = '||to_char(l_date5),
      p_msg_type        => 'DEBUG'
   );
  exception
  when others then
                l_col5 := 'Y';
  end;
 end if;

 if p_column6 is not null then
  begin
    -- l_date6 :=  to_date(p_column6,'MM/DD/YYYY');
select to_date(p_column6, x_date_format) into l_date6 from dual;
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => 'l_date6 = '||to_char(l_date6),
      p_msg_type        => 'DEBUG'
   );
  exception
  when others then
                l_col6 := 'Y';
  end;
 end if;

 if  l_imp_type = 'LEAD' then
    l_col11 := 'ASSIGN_DATE: ';
    l_col22 := 'ADDRESS_EFFECTIVE_DATE: ';
    l_col55 := 'LEAD_DATE: ';
 end if;

 if  (l_imp_type = 'B2B' or l_imp_type = 'B2C') then
    l_col11 := 'ADDRESS_EFFECTIVE_DATE : ';
    l_col22 := 'ADDRESS_EXPIRATION_DATE : ';
    l_col33 := 'DATE_OF_BIRTH : ';
    l_col44 := 'DATE_OF_DEATH : ';
    l_col55 := 'DEBARTMENTS_DATE : ';
    l_col66 := 'MARITAL_STATUS_EFFECTIVE_DATE : ';
 end if;

 if (l_col1 = 'Y' or l_col2 = 'Y' or l_col3 = 'Y' or l_col4 = 'Y' or l_col5 = 'Y' or l_col6 = 'Y') then
    if l_error_exist = 'Y' then
        update ams_list_import_errors
        set col227 =  decode(l_col1,'Y',l_col11||l_invalid_date),
         col228 =  decode(l_col2,'Y',l_col22||l_invalid_date),
        -- col229 =  decode(l_col3,'Y','LAST_ORDERED_DATE:'||l_invalid_date),
        -- col230 =  decode(l_col4,'Y','PROGRAM_UPDATE_DATE:'||l_invalid_date),
         col233 =  decode(l_col3,'Y',l_col33||l_invalid_date),
         col234 =  decode(l_col4,'Y',l_col44||l_invalid_date),
         col235 =  decode(l_col5,'Y',l_col55||l_invalid_date),
         col236 =  decode(l_col6,'Y',l_col66||l_invalid_date)
        where import_list_header_id = p_import_list_header_id
        and import_source_line_id = p_import_source_line_id
        and batch_id                = p_batch_id;
    end if;
    if l_file_type = 'XML' then
       if (l_imp_type in ('B2B','B2C') and (l_col1 = 'Y' or l_col2 = 'Y'))then
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col1,'Y',l_col11||l_invalid_date)||','||
                             decode(l_col2,'Y',l_col22||l_invalid_date),
                LOAD_STATUS = 'ERROR'
            where  imp_xml_element_id = l_add_imp_xml_element_id;
       end if;
       if (l_imp_type in ('B2B') and (l_col3 = 'Y' or l_col4 = 'Y' or l_col5 = 'Y' or l_col6 = 'Y'))then
           if l_col3 = 'Y' then
              update AMS_IMP_XML_ELEMENTS
              set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col3,'Y',l_col33||l_invalid_date),
                LOAD_STATUS = 'ERROR'
              where  imp_xml_element_id = l_ocont_imp_xml_element_id;
           end if;
           if l_col4 = 'Y' then
              update AMS_IMP_XML_ELEMENTS
              set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col4,'Y',l_col44||l_invalid_date),
                LOAD_STATUS = 'ERROR'
              where  imp_xml_element_id = l_ocont_imp_xml_element_id;
           end if;
           if l_col6 = 'Y' then
              update AMS_IMP_XML_ELEMENTS
              set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col6,'Y',l_col66||l_invalid_date),
                LOAD_STATUS = 'ERROR'
              where  imp_xml_element_id = l_ocont_imp_xml_element_id;
           end if;
           if l_col5 = 'Y' then
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col5,'Y',l_col55||l_invalid_date),
                LOAD_STATUS = 'ERROR'
            where  imp_xml_element_id = l_org_imp_xml_element_id;
           end if;
       end if;
       if (l_imp_type in ('B2C') and (l_col3 = 'Y' or l_col4 = 'Y' or l_col6 = 'Y'))then
           if l_col3 = 'Y' then
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col3,'Y',l_col33||l_invalid_date),
                LOAD_STATUS = 'ERROR'
            where  imp_xml_element_id = l_per_imp_xml_element_id;
           end if;
           if l_col4 = 'Y' then
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col4,'Y',l_col44||l_invalid_date),
                LOAD_STATUS = 'ERROR'
            where  imp_xml_element_id = l_per_imp_xml_element_id;
           end if;
           if l_col6 = 'Y' then
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = ERROR_TEXT ||','||decode(l_col6,'Y',l_col66||l_invalid_date),
                LOAD_STATUS = 'ERROR'
            where  imp_xml_element_id = l_per_imp_xml_element_id;
           end if;
       end if;

    end if;
 end if;
 if l_error_exist is null then
    if (l_col1 = 'Y' or l_col2 = 'Y' or l_col3 = 'Y' or l_col4 = 'Y' or l_col5 = 'Y' or l_col6 = 'Y') then
       INSERT INTO ams_list_import_errors
       (
        LIST_IMPORT_ERROR_ID,
        LAST_UPDATED_BY,
        LAST_UPDATE_DATE,
        CREATION_DATE,
        CREATED_BY,
        LAST_UPDATE_LOGIN,
        IMPORT_SOURCE_LINE_ID,
        IMPORT_LIST_HEADER_ID,
        IMPORT_TYPE,
        ERROR_TYPE,
        BATCH_ID,
        col227,
        col228,
        -- col229,
        -- col230,
        col233,
        col234,
        col235,
        col236
        )
       VALUES
       (
        ams_list_import_errors_s.nextval,      -- LIST_IMPORT_ERROR_ID,
        FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
        SYSDATE,                              -- LAST_UPDATE_DATE,
        SYSDATE,                              -- CREATION_DATE,
        FND_GLOBAL.User_ID,                   -- CREATED_BY,
        FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
        p_import_source_line_id,
        p_import_list_header_id,
        'LEAD',                                -- IMPORT_TYPE,
        'E',                                  -- ERROR_TYPE,
        p_batch_id,
        decode(l_col1,'Y',l_col11||l_invalid_date),
        decode(l_col2,'Y',l_col22||l_invalid_date),
        -- decode(l_col3,'Y','LAST_ORDERED_DATE:'||l_invalid_date),
        -- decode(l_col4,'Y','PROGRAM_UPDATE_DATE:'||l_invalid_date),
        -- decode(l_col5,'Y','LEAD_DATE:'||l_invalid_date)
        decode(l_col3,'Y',l_col33||l_invalid_date),
        decode(l_col4,'Y',l_col44||l_invalid_date),
        decode(l_col5,'Y',l_col55||l_invalid_date),
        decode(l_col6,'Y',l_col66||l_invalid_date)
        );
     end if;
 end if;
EXCEPTION
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in date_validate:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end date_validate;


-- ---------------------------------------
--  sranka 3/6/2003
--  Using for support of "EMPLOYEE_OF"
PROCEDURE execute_reltnship_validation (
  			    p_import_list_header_id NUMBER,
                            p_return_status OUT NOCOPY     VARCHAR2
                            ) IS

--TYPE l_batch_id     IS TABLE OF AMS_IMP_SOURCE_LINES.BATCH_ID%TYPE;
TYPE l_imp_list_header_id                 IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_LIST_HEADER_ID%TYPE;
TYPE l_imp_source_line_id                 IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE l_relationship_type         IS TABLE OF AMS_IMP_SOURCE_LINES.COL69%TYPE;
TYPE l_relationship_code         IS TABLE OF AMS_IMP_SOURCE_LINES.COL70%TYPE;
TYPE l_import_failure_reason     IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_FAILURE_REASON%TYPE;

l_last_fetch            BOOLEAN := FALSE;
l_limit_rows            number := 1000;


L_MAX_ROW_COUNT                                 CONSTANT NUMBER := 1000;
l_batch_id                                      NUMBER;
l_BEST_TIME_CONTACT_END                         varchar2(150);
l_BEST_TIME_CONTACT_BEGIN                       varchar2(150);
l_last_ordered_date                             varchar2(150);
x_import_list_header_id                         number;
x_import_source_line_id                         number;
l_invalid_number                                varchar2(4000) ;
l_invalid_value                                 varchar2(4000) ;
l_null_value                                    varchar2(4000) ;
x_b2b                                           varchar(1);
l_return_status                                 varchar(1);


CURSOR c_lead_batch_id is
SELECT
batch_id
FROM ams_imp_list_headers_all
WHERE import_list_header_id = p_import_list_header_id;

CURSOR  c_as_list_headers is
SELECT
--  BATCH_ID,
  IMPORT_SOURCE_LINE_ID,
  IMPORT_LIST_HEADER_ID,
  RELATIONSHIP_CODE,
  RELATIONSHIP_TYPE,
  l_invalid_value
FROM
  AMS_HZ_B2B_MAPPING_V B2B
WHERE
  IMPORT_LIST_HEADER_ID=p_import_list_header_id  and
  ( PERSON_FIRST_NAME IS NOT NULL OR PERSON_LAST_NAME IS NOT NULL )
  AND ((        RELATIONSHIP_CODE is not null
            AND RELATIONSHIP_TYPE is not null )
                OR(RELATIONSHIP_CODE is  null
            AND RELATIONSHIP_TYPE is not null
                )
                OR(RELATIONSHIP_CODE is not null
            AND RELATIONSHIP_TYPE is  null
                )
          )
  AND (nvl(RELATIONSHIP_CODE,'DUMMY')
  not IN (  SELECT
              b.FORWARD_REL_CODE
            FROM
              HZ_CODE_ASSIGNMENTS a,
              HZ_RELATIONSHIP_TYPES b
            WHERE
              a.owner_table_name = 'HZ_RELATIONSHIP_TYPES'  and
              a.owner_table_id = b.RELATIONSHIP_TYPE_ID  and
              a.class_code= 'PARTY_REL_GRP_CONTACTS'  and
              b.subject_type = 'PERSON'  and
              b.object_type = 'ORGANIZATION'  and
              b.DIRECTION_CODE = 'P'and
--              B2B.RELATIONSHIP_CODE = b.FORWARD_REL_CODE
              B2B.RELATIONSHIP_TYPE = b.RELATIONSHIP_TYPE
  )
--OR RELATIONSHIP_TYPE
--  not IN (  SELECT
--              b.RELATIONSHIP_TYPE
--            FROM
--              HZ_CODE_ASSIGNMENTS a,
--              HZ_RELATIONSHIP_TYPES b
--            WHERE
--              a.owner_table_name = 'HZ_RELATIONSHIP_TYPES'  and
--              a.owner_table_id = b.RELATIONSHIP_TYPE_ID  and
--              a.class_code= 'PARTY_REL_GRP_CONTACTS'  and
--              b.subject_type = 'PERSON'  and
--              b.object_type = 'ORGANIZATION'  and
--              b.DIRECTION_CODE = 'P'and
--              B2B.RELATIONSHIP_TYPE = b.RELATIONSHIP_TYPE
--  )

);

--I_batch_id l_batch_id;
I_imp_source_line_id l_imp_source_line_id;
I_imp_list_header_id l_imp_list_header_id;
I_relationship_type l_relationship_type;
I_relationship_code l_relationship_code;
I_import_failure_reason l_import_failure_reason;



BEGIN


    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_INVALID_VAL');
    l_invalid_value := 'RELATIONSHIP_TYPE :: RELATIONSHIP_CODE :: ' || FND_MESSAGE.get;



OPEN c_lead_batch_id;
    FETCH c_lead_batch_id into l_batch_id;
CLOSE c_lead_batch_id;


open c_as_list_headers;
LOOP
    fetch c_as_list_headers BULK COLLECT into
--    I_batch_id,
    I_imp_source_line_id,
    I_imp_list_header_id,
    I_relationship_type,
    I_relationship_code,
    I_import_failure_reason LIMIT l_limit_rows;



  IF c_as_list_headers%NOTFOUND THEN

        l_last_fetch := TRUE;
  END IF;

  IF I_imp_source_line_id.COUNT = 0 AND l_last_fetch THEN
        EXIT;
  END IF;


FORALL i IN I_imp_source_line_id.FIRST..I_imp_source_line_id.LAST
    INSERT INTO ams_list_import_errors
    (
        LIST_IMPORT_ERROR_ID,
        LAST_UPDATED_BY,
        LAST_UPDATE_DATE,
        CREATION_DATE,
        CREATED_BY,
        LAST_UPDATE_LOGIN,
        ERROR_TYPE,
        BATCH_ID,
        IMPORT_LIST_HEADER_ID,
        IMPORT_SOURCE_LINE_ID,
        COL1
    )
    values
    (
        ams_list_import_errors_s.nextval,      -- LIST_IMPORT_ERROR_ID,
        FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
        SYSDATE,                              -- LAST_UPDATE_DATE,
        SYSDATE,                              -- CREATION_DATE,
        FND_GLOBAL.User_ID,                   -- CREATED_BY,
        FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
        'E',
        l_batch_id,
        I_imp_list_header_id(i),
        I_imp_source_line_id(i),
        I_import_failure_reason(i)
    );
  COMMIT;
--
  IF  l_last_fetch = TRUE THEN
     EXIT;
  END IF;

END LOOP;
CLOSE c_as_list_headers;



       UPDATE ams_imp_source_lines
         SET load_status = 'ERROR'
       WHERE import_list_header_id = p_import_list_header_id
         and import_source_line_id in
       (select import_source_line_id from ams_list_import_errors
        where import_list_header_id = p_import_list_header_id
          and error_type = 'E');


EXCEPTION
 WHEN OTHERS THEN
    p_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in execute_relationship_validation:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end execute_reltnship_validation;






PROCEDURE execute_cust_data_validation (
  			    p_import_list_header_id NUMBER,
                            p_return_status OUT NOCOPY     VARCHAR2
                            ) IS

TYPE num_data_set_type_w IS
  TABLE OF NUMBER INDEX BY BINARY_INTEGER;

TYPE varchar2_250_set_type IS
        TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;

L_MAX_ROW_COUNT                                 CONSTANT NUMBER := 1000;
l_batch_id                                      NUMBER;
l_ADDRESS_EFFECTIVE_DATE			varchar2(150);
l_ADDRESS_EXPIRATION_DATE			varchar2(150);
l_DATE_OF_BIRTH					varchar2(150);
l_DATE_OF_DEATH					varchar2(150);
l_DEBARTMENTS_DATE				varchar2(150);
l_MARITAL_STATUS_EFF_DATE			varchar2(150);
l_last_ordered_date                             varchar2(150);
x_import_list_header_id                         number;
x_import_source_line_id                         number;
l_invalid_number varchar2(4000) ;
l_invalid_size   varchar2(4000) ;
l_null_value     varchar2(4000) ;
x_b2b                           varchar(30);
l_return_status                 varchar(1);
l_imp_type         varchar2(60);


       l_import_source_line_id                 num_data_set_type_w;
       l_import_list_header_id                 num_data_set_type_w;

       l_col1                                  varchar2_250_set_type;
       l_col2                                  varchar2_250_set_type;
       l_col3                                  varchar2_250_set_type;
       l_col4                                  varchar2_250_set_type;
       l_col5                                  varchar2_250_set_type;
       l_col6                                  varchar2_250_set_type;
       l_col7                                  varchar2_250_set_type;
       l_col8                                  varchar2_250_set_type;
       l_col9                                  varchar2_250_set_type;
       l_col10                                 varchar2_250_set_type;
       l_col11                                 varchar2_250_set_type;
       l_col12                                 varchar2_250_set_type;
       l_col13                                 varchar2_250_set_type;
       l_col14                                 varchar2_250_set_type;
       l_col15                                 varchar2_250_set_type;
       l_col16                                 varchar2_250_set_type;
       l_col17                                 varchar2_250_set_type;
       l_col18                                 varchar2_250_set_type;
       l_col19                                 varchar2_250_set_type;
       l_col20                                 varchar2_250_set_type;
       l_col21                                 varchar2_250_set_type;
       l_col22                                 varchar2_250_set_type;
       l_col23                                 varchar2_250_set_type;
       l_col24                                 varchar2_250_set_type;
       l_col25                                 varchar2_250_set_type;
       l_col26                                 varchar2_250_set_type;
       l_col27                                 varchar2_250_set_type;
       l_col28                                 varchar2_250_set_type;
       l_col29                                 varchar2_250_set_type;
       l_col30                                 varchar2_250_set_type;
       l_col31                                 varchar2_250_set_type;
       l_col32                                 varchar2_250_set_type;
       l_col33                                 varchar2_250_set_type;
       l_col34                                 varchar2_250_set_type;
       l_col35                                 varchar2_250_set_type;
       l_col36                                 varchar2_250_set_type;
       l_col37                                 varchar2_250_set_type;
       l_col38                                 varchar2_250_set_type;
       l_col39                                 varchar2_250_set_type;
       l_col40                                 varchar2_250_set_type;
       l_col41                                 varchar2_250_set_type;
       l_col42                                 varchar2_250_set_type;
       l_col43                                 varchar2_250_set_type;
       l_col44                                 varchar2_250_set_type;
       l_col45                                 varchar2_250_set_type;
       l_col46                                 varchar2_250_set_type;
       l_col47                                 varchar2_250_set_type;
       l_col48                                 varchar2_250_set_type;
       l_col49                                 varchar2_250_set_type;
       l_col50                                 varchar2_250_set_type;
       l_col51                                 varchar2_250_set_type;
       l_col52                                 varchar2_250_set_type;
       l_col53                                 varchar2_250_set_type;
       l_col54                                 varchar2_250_set_type;
       l_col55                                 varchar2_250_set_type;
       l_col56                                 varchar2_250_set_type;
       l_col57                                 varchar2_250_set_type;
       l_col58                                 varchar2_250_set_type;
       l_col59                                 varchar2_250_set_type;
       l_col60                                 varchar2_250_set_type;
       l_col61                                 varchar2_250_set_type;
       l_col62                                 varchar2_250_set_type;
       l_col63                                 varchar2_250_set_type;
       l_col64                                 varchar2_250_set_type;
       l_col65                                 varchar2_250_set_type;
       l_col66                                 varchar2_250_set_type;
       l_col67                                 varchar2_250_set_type;
       l_col68                                 varchar2_250_set_type;
       l_col69                                 varchar2_250_set_type;
       l_col70                                 varchar2_250_set_type;
       l_col71                                 varchar2_250_set_type;
       l_col72                                 varchar2_250_set_type;
       l_col73                                 varchar2_250_set_type;
       l_col74                                 varchar2_250_set_type;
       l_col75                                 varchar2_250_set_type;
       l_col76                                 varchar2_250_set_type;
       l_col77                                 varchar2_250_set_type;
       l_col78                                 varchar2_250_set_type;
       l_col79                                 varchar2_250_set_type;
       l_col80                                 varchar2_250_set_type;
       l_col81                                 varchar2_250_set_type;
       l_col82                                 varchar2_250_set_type;
       l_col83                                 varchar2_250_set_type;
       l_col84                                 varchar2_250_set_type;
       l_col85                                 varchar2_250_set_type;
       l_col86                                 varchar2_250_set_type;
       l_col87                                 varchar2_250_set_type;
       l_col88                                 varchar2_250_set_type;
       l_col89                                 varchar2_250_set_type;
       l_col90                                 varchar2_250_set_type;
       l_col91                                 varchar2_250_set_type;
       l_col92                                 varchar2_250_set_type;
       l_col93                                 varchar2_250_set_type;
       l_col94                                 varchar2_250_set_type;
       l_col95                                 varchar2_250_set_type;
       l_col96                                 varchar2_250_set_type;
       l_col97                                 varchar2_250_set_type;
       l_col98                                 varchar2_250_set_type;
       l_col99                                 varchar2_250_set_type;
       l_col100                                varchar2_250_set_type;
       l_col101                                varchar2_250_set_type;
       l_col102                                varchar2_250_set_type;
       l_col103                                varchar2_250_set_type;
       l_col104                                varchar2_250_set_type;
       l_col105                                varchar2_250_set_type;
       l_col106                                varchar2_250_set_type;
       l_col107                                varchar2_250_set_type;
       l_col108                                varchar2_250_set_type;
       l_col109                                varchar2_250_set_type;
       l_col110                                varchar2_250_set_type;
       l_col111                                varchar2_250_set_type;
       l_col112                                varchar2_250_set_type;
       l_col113                                varchar2_250_set_type;
       l_col114                                varchar2_250_set_type;
       l_col115                                varchar2_250_set_type;
       l_col116                                varchar2_250_set_type;
       l_col117                                varchar2_250_set_type;
       l_col118                                varchar2_250_set_type;
       l_col119                                varchar2_250_set_type;
       l_col120                                varchar2_250_set_type;
       l_col121                                varchar2_250_set_type;
       l_col122                                varchar2_250_set_type;
       l_col123                                varchar2_250_set_type;
       l_col124                                varchar2_250_set_type;
       l_col125                                varchar2_250_set_type;
       l_col126                                varchar2_250_set_type;
       l_col127                                varchar2_250_set_type;
       l_col128                                varchar2_250_set_type;
       l_col129                                varchar2_250_set_type;
       l_col130                                varchar2_250_set_type;
       l_col131                                varchar2_250_set_type;
       l_col132                                varchar2_250_set_type;
       l_col133                                varchar2_250_set_type;
       l_col134                                varchar2_250_set_type;
       l_col135                                varchar2_250_set_type;
       l_col136                                varchar2_250_set_type;
       l_col137                                varchar2_250_set_type;
       l_col138                                varchar2_250_set_type;
       l_col139                                varchar2_250_set_type;
       l_col140                                varchar2_250_set_type;
       l_col141                                varchar2_250_set_type;
       l_col142                                varchar2_250_set_type;
       l_col143                                varchar2_250_set_type;
       l_col144                                varchar2_250_set_type;
       l_col145                                varchar2_250_set_type;
       l_col146                                varchar2_250_set_type;
       l_col147                                varchar2_250_set_type;
       l_col148                                varchar2_250_set_type;
       l_col149                                varchar2_250_set_type;
       l_col150                                varchar2_250_set_type;
       l_col151                                varchar2_250_set_type;
       l_col152                                varchar2_250_set_type;
       l_col153                                varchar2_250_set_type;
       l_col154                                varchar2_250_set_type;
       l_col155                                varchar2_250_set_type;
       l_col156                                varchar2_250_set_type;
       l_col157                                varchar2_250_set_type;
       l_col158                                varchar2_250_set_type;
       l_col159                                varchar2_250_set_type;
       l_col160                                varchar2_250_set_type;
       l_col161                                varchar2_250_set_type;
       l_col162                                varchar2_250_set_type;
       l_col163                                varchar2_250_set_type;
       l_col164                                varchar2_250_set_type;
       l_col165                                varchar2_250_set_type;
       l_col166                                varchar2_250_set_type;
       l_col167                                varchar2_250_set_type;
       l_col168                                varchar2_250_set_type;
       l_col169                                varchar2_250_set_type;
       l_col170                                varchar2_250_set_type;
       l_col171                                varchar2_250_set_type;
       l_col172                                varchar2_250_set_type;
       l_col173                                varchar2_250_set_type;
       l_col174                                varchar2_250_set_type;
       l_col175                                varchar2_250_set_type;
       l_col176                                varchar2_250_set_type;
       l_col177                                varchar2_250_set_type;
       l_col178                                varchar2_250_set_type;
       l_col179                                varchar2_250_set_type;
       l_col180                                varchar2_250_set_type;
       l_col181                                varchar2_250_set_type;
       l_col182                                varchar2_250_set_type;
       l_col183                                varchar2_250_set_type;
       l_col184                                varchar2_250_set_type;
       l_col185                                varchar2_250_set_type;
       l_col186                                varchar2_250_set_type;
       l_col187                                varchar2_250_set_type;
       l_col188                                varchar2_250_set_type;
       l_col189                                varchar2_250_set_type;
       l_col190                                varchar2_250_set_type;
       l_col191                                varchar2_250_set_type;
       l_col192                                varchar2_250_set_type;
       l_col193                                varchar2_250_set_type;
       l_col194                                varchar2_250_set_type;
       l_col195                                varchar2_250_set_type;
       l_col196                                varchar2_250_set_type;
       l_col197                                varchar2_250_set_type;
       l_col198                                varchar2_250_set_type;
       l_col199                                varchar2_250_set_type;
       l_col200                                varchar2_250_set_type;
       l_col201                                varchar2_250_set_type;
-- sranka modiefied for COLT Enhacement 7/15/2003
        l_col221   varchar2_250_set_type;
        l_col222   varchar2_250_set_type;
        l_col223   varchar2_250_set_type;
        l_col224   varchar2_250_set_type;
        l_col225   varchar2_250_set_type;
        l_col226   varchar2_250_set_type;
        l_col227   varchar2_250_set_type;
        l_col228   varchar2_250_set_type;
        l_col229   varchar2_250_set_type;
        l_col230   varchar2_250_set_type;
        l_col231   varchar2_250_set_type;
        l_col232   varchar2_250_set_type;
        l_col233   varchar2_250_set_type;
        l_col234   varchar2_250_set_type;
        l_col235   varchar2_250_set_type;
        l_col236   varchar2_250_set_type;
        l_col237   varchar2_250_set_type;
        l_col238   varchar2_250_set_type;
        l_col239   varchar2_250_set_type;
        l_col240   varchar2_250_set_type;
        l_col241   varchar2_250_set_type;
        l_col242   varchar2_250_set_type;
        l_col243   varchar2_250_set_type;
        l_col244   varchar2_250_set_type;
        l_col245   varchar2_250_set_type;
        l_col246   varchar2_250_set_type;
        l_col247   varchar2_250_set_type;
        l_col248   varchar2_250_set_type;
        l_col249   varchar2_250_set_type;
        l_col251   varchar2_250_set_type;
        l_col252   varchar2_250_set_type;
        l_col253   varchar2_250_set_type;
        l_col254   varchar2_250_set_type;
        l_col255   varchar2_250_set_type;
        l_col256   varchar2_250_set_type;
        l_col257   varchar2_250_set_type;
        l_col258   varchar2_250_set_type;
        l_col259   varchar2_250_set_type;
        l_col260   varchar2_250_set_type;
        l_col261   varchar2_250_set_type;
        l_col262   varchar2_250_set_type;
        l_col263   varchar2_250_set_type;
        l_col264   varchar2_250_set_type;
        l_col265   varchar2_250_set_type;
        l_col266   varchar2_250_set_type;
        l_col267   varchar2_250_set_type;
        l_col268   varchar2_250_set_type;
        l_col269   varchar2_250_set_type;
        l_col270   varchar2_250_set_type;
        l_col271   varchar2_250_set_type;
        l_col272   varchar2_250_set_type;
        l_col273   varchar2_250_set_type;
        l_col274   varchar2_250_set_type;
        l_col275   varchar2_250_set_type;
        l_col276   varchar2_250_set_type;
        l_col277   varchar2_250_set_type;
        l_col278   varchar2_250_set_type;
        l_col279   varchar2_250_set_type;
        l_col280   varchar2_250_set_type;
        l_col281   varchar2_250_set_type;
        l_col282   varchar2_250_set_type;
        l_col283   varchar2_250_set_type;
        l_col284   varchar2_250_set_type;
        l_col285   varchar2_250_set_type;
        l_col286   varchar2_250_set_type;
        l_col287   varchar2_250_set_type;
        l_col288   varchar2_250_set_type;
        l_col289   varchar2_250_set_type;
        l_col290   varchar2_250_set_type;
        l_col291   varchar2_250_set_type;
        l_col292   varchar2_250_set_type;
        l_col293   varchar2_250_set_type;
        l_col294   varchar2_250_set_type;
        l_col295   varchar2_250_set_type;
        l_col296   varchar2_250_set_type;
        l_col297   varchar2_250_set_type;
        l_col298   varchar2_250_set_type;
        l_col299   varchar2_250_set_type;
        l_col300   varchar2_250_set_type;
        l_col301   varchar2_250_set_type;
        l_col302   varchar2_250_set_type;

CURSOR c_lead_batch_id is
SELECT
batch_id
FROM ams_imp_list_headers_all
WHERE import_list_header_id = p_import_list_header_id;

-- Cursor for B2B party type

cursor b2b is
 SELECT
 IMPORT_SOURCE_LINE_ID,
 import_list_header_id,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(PARTY_NAME))),255) - 255,0,' ','PARTY_NAME :'||decode(nvl(PARTY_NAME,'x'),'x',l_null_value,l_invalid_size)||'(255)') PARTY_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FISCAL_YEAREND_MONTH)),'x')),30) - 30,0,' ','FISCAL_YEAREND_MONTH :'||l_invalid_size||'(30)') FISCAL_YEAREND_MONTH,
/*
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DUNS_NUMBER,' ','x'))),'0123456789.',           'x'))),0),0,' ','DUNS_NUMBER :'||l_invalid_number) DUNS_NUMBER,
*/
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DUNS_NUMBER)),'x')),30) - 30,0,' ','DUNS_NUMBER:'||l_invalid_size||'(30)') DUNS_NUMBER,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(EMPLOYEES_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,' ','EMPLOYEES_TOTAL :'||l_invalid_number) EMPLOYEES_TOTAL,
DECODE(GREATEST(lengthb(nvl(LINE_OF_BUSINESS,'x')),240) - 240,0,' ','LINE_OF_BUSINESS :'||l_invalid_size) LINE_OF_BUSINESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,' ','ADDRESS1 :'||l_invalid_size||'(240)') ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,' ','ADDRESS2 :'||l_invalid_size||'(240)') ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,' ','ADDRESS3 :'||l_invalid_size||'(240)') ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,' ','ADDRESS4 :'||l_invalid_size||'(240)') ADDRESS4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(YEAR_ESTABLISHED,' ','x'))),'0123456789.','           x'))),0),0,' ','YEAR_ESTABLISHED :'||l_invalid_number) YEAR_ESTABLISHED,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),50) - 50,0,' ','TAX_REFERENCE :'||l_invalid_size||'(50)') TAX_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CEO_NAME)),'x')),240) - 240,0,' ','CEO_NAME :'||l_invalid_size||'(240)') CEO_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME)),'x')),50) - 50,0,' ','PERSON_LAST_NAME :'||l_invalid_size||'(50)') PERSON_LAST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME)),'x')),40) - 40,0,' ','PERSON_FIRST_NAME :'||l_invalid_size||'(40)') PERSON_FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,' ','PERSON_NAME_PREFIX :'||l_invalid_size||'(30)') PERSON_NAME_PREFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE)),'x')),100) - 100,0,' ','JOB_TITLE :'||l_invalid_size||'(100)') JOB_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,' ','PERSON_MIDDLE_NAME :'||l_invalid_size||'(60)') PERSON_MIDDLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,' ','PERSON_NAME_SUFFIX :'||l_invalid_size||'(30)') PERSON_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,' ','CITY :'||l_invalid_size||'(60)') CITY ,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,' ','POSTAL_CODE :'||l_invalid_size||'(60)') POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,' ','STATE :'||l_invalid_size||'(60)') STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,' ','PROVINCE :'||l_invalid_size||'(60)') PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,' ','COUNTY :'||l_invalid_size||'(60)') COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,' ','COUNTRY :'||l_invalid_size||'(60)') COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,' ','TIME_ZONE :'||l_invalid_size||'(50)') TIME_ZONE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,' ','EMAIL_ADDRESS :'||l_invalid_size||'(240)') EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,' ','PHONE_COUNTRY_CODE :'||l_invalid_size||'(30)') PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,' ','PHONE_AREA_CODE :'||l_invalid_size||'(10)') PHONE_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,' ','PHONE_NUMBER :'||l_invalid_size||'(25)') PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,' ','PHONE_EXTENTION :'||l_invalid_size||'(20)') PHONE_EXTENTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT)),'x')),60) - 60,0,' ','DEPARTMENT :'||l_invalid_size||'(60)') DEPARTMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,' ','DECISION_MAKER_FLAG :'||l_invalid_size||'(1)') DECISION_MAKER_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE)),'x')),30) - 30,0,' ','SIC_CODE :'||l_invalid_size||'(30)') SIC_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE_TYPE)),'x')),30) - 30,0,' ','SIC_CODE_TYPE :'||l_invalid_size||'(30)') SIC_CODE_TYPE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_NUM_OF_ORDERS,' ','x'))),'0123456789.','           x'))),0),0,' ','TOTAL_NUM_OF_ORDERS :'||l_invalid_number) TOTAL_NUM_OF_ORDERS,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_ORDERED_AMOUNT,' ','x'))),'0123456789.','           x'))),0),0,' ','TOTAL_ORDERED_AMOUNT :'||l_invalid_number) TOTAL_ORDERED_AMOUNT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ANALYSIS_FY)),'x')),5) - 5,0,' ','ANALYSIS_FY :'||l_invalid_size||'(5)') ANALYSIS_FY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CURR_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,' ','CURR_FY_POTENTIAL_REVENUE :'||l_invalid_number) CURR_FY_POTENTIAL_REVENUE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(NEXT_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,' ','NEXT_FY_POTENTIAL_REVENUE :'||l_invalid_number) NEXT_FY_POTENTIAL_REVENUE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GSA_INDICATOR_FLAG)),'x')),1) - 1,0,' ','GSA_INDICATOR_FLAG :'||l_invalid_size||'(1)') GSA_INDICATOR_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OVERSEAS_ADDRESS_FLAG)),'x')),1) - 1,0,' ','OVERSEAS_ADDRESS_FLAG :'||l_invalid_size||'(1)') OVERSEAS_ADDRESS_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,' ','identifying_address_flag :'||l_invalid_size||'(1)') identifying_address_flag,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(APARTMENT_FLAG)),'x')),1) - 1,0,' ','APARTMENT_FLAG :'||l_invalid_size||'(1)') APARTMENT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MISSION_STATEMENT)),'x')),2000) - 2000,0,' ','MISSION_STATEMENT :'||l_invalid_size||'(2000)') MISSION_STATEMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_NAME_PHONETIC)),'x')),320) - 320,0,' ','ORGANIZATION_NAME_PHONETIC :'||l_invalid_size||'(320)') ORGANIZATION_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CATEGORY_CODE)),'x')),30) -30,0,' ','CATEGORY_CODE:'||l_invalid_size||'(30)') CATEGORY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JGZZ_FISCAL_CODE)),'x')),20) - 20,0,' ','JGZZ_FISCAL_CODE :'||l_invalid_size||'(20)') JGZZ_FISCAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_NAME)),'x')),60) - 60,0,' ','TAX_NAME :'||l_invalid_size||'(60)') TAX_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,' ','ADDRESS_LINES_PHONETIC :'||l_invalid_size||'(560)') ADDRESS_LINES_PHONETIC,
-- bug 4641591: columns obsolete
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,' ','PO_BOX_NUMBER :'||l_invalid_size||'(50)') PO_BOX_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,' ','FLOOR :'||l_invalid_size||'(50)') FLOOR,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,' ','HOUSE_NUMBER :'||l_invalid_size||'(50)') HOUSE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),10) - 10,0,' ','POSTAL_PLUS4_CODE :'||l_invalid_size||'(10)') POSTAL_PLUS4_CODE,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,' ','STREET_SUFFIX :'||l_invalid_size||'(50)') STREET_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECONDARY_SUFFIX_ELENENT)),'x')),240) - 240,0,' ','SECONDARY_SUFFIX_ELENENT :'||l_invalid_size||'(240)') SECONDARY_SUFFIX_ELENENT,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,' ','STREET :'||l_invalid_size||'(50)') STREET,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,' ','STREET_NUMBER :'||l_invalid_size||'(50)') STREET_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SUITE)),'x')),50) - 50,0,' ','SUITE :'||l_invalid_size||'(50)') SUITE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_TYPE)),'x')),50) - 50,0,' ','RURAL_ROUTE_TYPE :'||l_invalid_size||'(50)') RURAL_ROUTE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_NUMBER)),'x')),50) - 50,0,' ','RURAL_ROUTE_NUMBER :'||l_invalid_size||'(50)') RURAL_ROUTE_NUMBER,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,' ','PARTY_ID :'||l_invalid_number) party_id,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_URL)),'x')),2000) - 2000,0,' ','ORGANIZATION_URL :'||l_invalid_size||'(2000)') ORGANIZATION_URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BRANCH_FLAG)),'x')),1) - 1,0,' ','BRANCH_FLAG :'||l_invalid_size||'(1)') BRANCH_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_LINE)),'x')),240) - 240,0,' ','BUSINESS_LINE :'||l_invalid_size||'(240)') BUSINESS_LINE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_SCOPE)),'x')),20) - 20,0,' ','BUSINESS_SCOPE :'||l_invalid_size||'(20)') BUSINESS_SCOPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CHIEF_EXECUTIVE_TITLE)),'x')),240) - 240,0,' ','CHIEF_EXECUTIVE_TITLE :'||l_invalid_size||'(240)') CHIEF_EXECUTIVE_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONGRESSIONAL_DISTRICT_CODE)),'x')),2) - 2,0,' ','CONGRESSIONAL_DISTRICT_CODE :'||l_invalid_size||'(2)') CONGRESSIONAL_DISTRICT_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CORPORATION_CLASS)),'x')),60) - 60,0,' ','CORPORATION_CLASS :'||l_invalid_size||'(60)') CORPORATION_CLASS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE)),'x')),30) - 30,0,' ','CREDIT_SCORE :'||l_invalid_size||'(30)') CREDIT_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE_COMMENTARY)),'x')),30) - 30,0,' ','CREDIT_SCORE_COMMENTARY :'||l_invalid_size||'(30)') CREDIT_SCORE_COMMENTARY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DB_RATING)),'x')),5) - 5,0,' ','DB_RATING :'||l_invalid_size||'(5)') DB_RATING,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,' ','DECLARED_ETHNICITY :'||l_invalid_size||'(60)') DECLARED_ETHNICITY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT_INDICATOR)),'x')),30) - 30,0,' ','DEPARTMENT_INDICATOR :'||l_invalid_size||'(30)') DEPARTMENT_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION:'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DISADVANTAGED_INDICATOR)),'x')),30) - 30,0,' ','DISADVANTAGED_INDICATOR :'||l_invalid_size||'(30)') DISADVANTAGED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ENQUIRY_DUNS)),'x')),15) - 15,0,' ','ENQUIRY_DUNS :'||l_invalid_size||'(15)') ENQUIRY_DUNS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EXPORT_INDICATOR)),'x')),30) - 30,0,' ','EXPORT_INDICATOR :'||l_invalid_size||'(30)') EXPORT_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE)),'x')),30) - 30,0,' ','FAILURE_SCORE :'||l_invalid_size||'(30)') FAILURE_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_COMMENTARY)),'x')),30) - 30,0,' ','FAILURE_SCORE_COMMENTARY :'||l_invalid_size||'(30)') FAILURE_SCORE_COMMENTARY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_OVERRIDE_CODE)),'x')),30) - 30,0,' ','FAILURE_SCORE_OVERRIDE_CODE :'||l_invalid_size||'(30)') FAILURE_SCORE_OVERRIDE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GLOBAL_FAILURE_SCORE)),'x')),5) - 5,0,' ','GLOBAL_FAILURE_SCORE :'||l_invalid_size||'(5)') GLOBAL_FAILURE_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEADQUARTER_BRANCH_INDICATOR)),'x')),30) - 30,0,' ','HEADQUARTER_BRANCH_INDICATOR :'||l_invalid_size||'(30)') HEADQUARTER_BRANCH_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEAD_OF_HOUSEHOLD_FLAG)),'x')),1) - 1,0,' ','HEAD_OF_HOUSEHOLD_FLAG :'||l_invalid_size||'(1)') HEAD_OF_HOUSEHOLD_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(IMPORT_INDICATOR)),'x')),30) - 30,0,' ','IMPORT_INDICATOR :'||l_invalid_size||'(30)') IMPORT_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS2)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS2 :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS3)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS3 :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS4)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS4 :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS5)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS5:'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS :'||l_invalid_size||'(240)') PERSON_KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS2 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS3 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS4 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS5 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LABOR_SURPLUS_INDICATOR)),'x')),30) - 30,0,' ','LABOR_SURPLUS_INDICATOR :'||l_invalid_size||'(30)') LABOR_SURPLUS_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE)),'x')),30) - 30,0,' ','LOCAL_ACTIVITY_CODE :'||l_invalid_size||'(30)') LOCAL_ACTIVITY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE_TYPE)),'x')),30) - 30,0,' ','LOCAL_ACTIVITY_CODE_TYPE :'||l_invalid_size||'(30)') LOCAL_ACTIVITY_CODE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,' ','LOCATION_DIRECTIONS :'||l_invalid_size||'(640)') LOCATION_DIRECTIONS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,' ','MARITAL_STATUS :'||l_invalid_size||'(30)') MARITAL_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_INDICATOR)),'x')),30) - 30,0,' ','MINORITY_OWNED_INDICATOR :'||l_invalid_size||'(30)') MINORITY_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_TYPE)),'x')),30) - 30,0,' ','MINORITY_OWNED_TYPE :'||l_invalid_size||'(30)') MINORITY_OWNED_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_TYPE)),'x')),30) - 30,0,' ','ORGANIZATION_TYPE :'||l_invalid_size||'(30)') ORGANIZATION_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OUT_OF_BUSINESS_INDICATOR)),'x')),30) - 30,0,' ','OUT_OF_BUSINESS_INDICATOR :'||l_invalid_size||'(30)') OUT_OF_BUSINESS_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,' ','PERSON_ACADEMIC_TITLE :'||l_invalid_size||'(30)') PERSON_ACADEMIC_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_FIRST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_FIRST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_LAST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_LAST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,' ','MIDDLE_NAME_PHONETIC :'||l_invalid_size||'(60)') MIDDLE_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),320) - 320,0,' ','PERSON_NAME_PHONETIC :'||l_invalid_size||'(320)') PERSON_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,' ','PERSON_PREVIOUS_TITLE_NAME :'||l_invalid_size||'(150)') PERSON_PREVIOUS_TITLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PLACE_OF_BIRTH)),'x')),60) - 60,0,' ','PLACE_OF_BIRTH :'||l_invalid_size||'(60)') PLACE_OF_BIRTH,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_NAME)),'x')),240) - 240,0,' ','PRINCIPAL_NAME :'||l_invalid_size||'(240)') PRINCIPAL_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_TITLE)),'x')),240) - 240,0,' ','PRINCIPAL_TITLE :'||l_invalid_size||'(240)') PRINCIPAL_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PUBLIC_PRIVATE_OWNERSHIP_FLAG)),'x')),1) - 1,0,' ','PUBLIC_PRIVATE_OWNERSHIP_FLAG :'||l_invalid_size||'(1)') PUBLIC_PRIVATE_OWNERSHIP_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,' ','RENT_OWNED_INDICATOR :'||l_invalid_size||'(30)') RENT_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECOND_TITLE)),'x')),30) - 30,0,' ','SECOND_TITLE :'||l_invalid_size||'(30)') SECOND_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SMALL_BUSINESS_INDICATOR)),'x')),30) - 30,0,' ','SMALL_BUSINESS_INDICATOR :'||l_invalid_size||'(30)') SMALL_BUSINESS_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_ID)),'x')),60) - 60,0,' ','TAX_ID :'||l_invalid_size||'(60)') TAX_ID,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(WOMAN_OWNED_INDICATOR)),'x')),30) - 30,0,' ',' WOMAN_OWNED_INDICATOR :'||l_invalid_size||'(30)') WOMAN_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE11)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE11 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE1)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE1 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE2)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE2 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE3)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE3 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE4)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE4 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE5)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE5 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE6)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE6 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE7)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE7 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE8)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE8 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE9)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE9 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE10)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE10 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE11)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE11 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE12)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE12 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE13)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE13 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE14)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE14 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE15)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE15 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE1 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE2 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE3 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE4 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE5 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE6 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE7 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE8 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE9 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE10 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE11 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE12 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE13 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE14 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE15 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,' ','FAX_COUNTRY_CODE :'||l_invalid_size||'(10)') FAX_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,' ','FAX_AREA_CODE :'||l_invalid_size||'(10)') FAX_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,' ','FAX_NUMBER :'||l_invalid_size||'(40)') FAX_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','PERSON_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') PERSON_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_CONTACT_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_CONTACT_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ADDRESS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ADDRESS_ATTRIBUTE_CATEGORY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CONTROL_YEAR,' ','x'))),'0123456789.','           x'))),0),0,' ','CONTROL_YEAR :'||l_invalid_number) CONTROL_YEAR,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DEBARMENTS_COUNT,' ','x'))),'0123456789.','           x'))),0),0,' ','DEBARMENTS_COUNT :'||l_invalid_number) DEBARMENTS_COUNT,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,' ','HOUSEHOLD_SIZE :'||l_invalid_number) HOUSEHOLD_SIZE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','PERSONAL_INCOME :'||l_invalid_number) PERSONAL_INCOME,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,' ','NOTES :'||l_invalid_size||'(2000)') NOTES,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,' ','VEHICLE_RESPONSE_CODE :'||l_invalid_size||'(30)') VEHICLE_RESPONSE_CODE,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,' ','SALES_AGENT_EMAIL_ADDRESS:'||l_invalid_size||'(2000)') SALES_AGENT_EMAIL_ADDRESS,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,' ','ORIG_SYSTEM_REFERENCE:'||l_invalid_size||'(240)') ORIG_SYSTEM_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_EMAIL_ADDRESS)),'x')),240) - 240,0,' ','ORG_EMAIL_ADDRESS :'||l_invalid_size||'(240)') ORG_EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PHONE_TYPE)),'x')),30) - 30,0,' ','ORG_PHONE_TYPE :'||l_invalid_size||'(30)') ORG_PHONE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_TYPE)),'x')),30) - 30,0,' ','PHONE_TYPE :'||l_invalid_size||'(30)') PHONE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_COUNTRY_CODE)),'x')),30) - 30,0,' ','ORG_PH_COUNTRY_CODE :'||l_invalid_size||'(30)') ORG_PH_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_AREA_CODE)),'x')),10) - 10,0,' ','ORG_PH_AREA_CODE :'||l_invalid_size||'(10)') ORG_PH_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_NUMBER)),'x')),25) - 25,0,' ','ORG_PH_NUMBER :'||l_invalid_size||'(25)') ORG_PH_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_EXTENSION)),'x')),20) - 20,0,' ','ORG_PH_EXTENSION :'||l_invalid_size||'(20)') ORG_PH_EXTENSION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS1)),'x')),240) - 240,0,' ','ORG_ADDRESS1 :'||l_invalid_size||'(240)') ORG_ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS2)),'x')),240) - 240,0,' ','ORG_ADDRESS2 :'||l_invalid_size||'(240)') ORG_ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS3)),'x')),240) - 240,0,' ','ORG_ADDRESS3 :'||l_invalid_size||'(240)') ORG_ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS4)),'x')),240) - 240,0,' ','ORG_ADDRESS4 :'||l_invalid_size||'(240)') ORG_ADDRESS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CITY)),'x')),60) - 60,0,' ','ORG_CITY :'||l_invalid_size||'(60)') ORG_CITY ,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_POSTAL_CODE)),'x')),60) - 60,0,' ','ORG_POSTAL_CODE :'||l_invalid_size||'(60)') ORG_POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_STATE)),'x')),60) - 60,0,' ','ORG_STATE :'||l_invalid_size||'(60)') ORG_STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PROVINCE)),'x')),60) - 60,0,' ','ORG_PROVINCE :'||l_invalid_size||'(60)') ORG_PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_COUNTY)),'x')),60) - 60,0,' ','ORG_COUNTY :'||l_invalid_size||'(60)') ORG_COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_COUNTRY)),'x')),60) - 60,0,' ','ORG_COUNTRY :'||l_invalid_size||'(60)') ORG_COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_ADDR_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_ADDR_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE11)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE11 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE16)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE16 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE16,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE17)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE17 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE17,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE18)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE18 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE18,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE19)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE19 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE19,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE20)),'x')),150) - 150,0,' ','ORG_ADDR_ATTRIBUTE20 :'||l_invalid_size||'(150)') ORG_ADDR_ATTRIBUTE20,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_CPS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_CPS_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE11)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE11 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE16)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE16 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE16,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE17)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE17 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE17,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE18)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE18 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE18,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE19)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE19 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE19,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE20)),'x')),150) - 150,0,' ','ORG_CPS_ATTRIBUTE20 :'||l_invalid_size||'(150)') ORG_CPS_ATTRIBUTE20,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_PS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_PS_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE11)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE11 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE16)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE16 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE16,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE17)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE17 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE17,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE18)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE18 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE18,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE19)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE19 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE19,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE20)),'x')),150) - 150,0,' ','ORG_PS_ATTRIBUTE20 :'||l_invalid_size||'(150)') ORG_PS_ATTRIBUTE20,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NATIVE_LANGUAGE)),'x')),4) - 4,0,' ','LANGUAGE :'||l_invalid_size||'(4)') NATIVE_LANGUAGE
 FROM AMS_HZ_B2B_MAPPING_V
 WHERE IMPORT_LIST_HEADER_ID =  p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
   AND
 (
 DECODE(GREATEST(lengthb(LTRIM(RTRIM(PARTY_NAME))),255) - 255,0,'OK','NO') = 'NO'
or
 DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FISCAL_YEAREND_MONTH)),'x')),30) - 30,0,'OK','NO') = 'NO'
/* or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DUNS_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
*/
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(EMPLOYEES_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(YEAR_ESTABLISHED,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_ORDERED_AMOUNT,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(TOTAL_NUM_OF_ORDERS,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CURR_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(NEXT_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LINE_OF_BUSINESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CEO_NAME)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE)),'x')),100) - 100,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DUNS_NUMBER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(SIC_CODE,'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(SIC_CODE_TYPE,'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(ANALYSIS_FY,'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GSA_INDICATOR_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OVERSEAS_ADDRESS_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(APARTMENT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MISSION_STATEMENT)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_NAME_PHONETIC)),'x')),320) - 320,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CATEGORY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JGZZ_FISCAL_CODE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
--  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,'OK','NO') = 'NO'
--or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECONDARY_SUFFIX_ELENENT)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_TYPE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BRANCH_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEAD_OF_HOUSEHOLD_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PUBLIC_PRIVATE_OWNERSHIP_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_LINE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_SCOPE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CHIEF_EXECUTIVE_TITLE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_NAME)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_TITLE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONGRESSIONAL_DISTRICT_CODE)),'x')),2) - 2,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CORPORATION_CLASS)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PLACE_OF_BIRTH)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_ID)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(WOMAN_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECOND_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SMALL_BUSINESS_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OUT_OF_BUSINESS_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LABOR_SURPLUS_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(IMPORT_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DISADVANTAGED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE_COMMENTARY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EXPORT_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_COMMENTARY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_OVERRIDE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DB_RATING)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GLOBAL_FAILURE_SCORE)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ENQUIRY_DUNS)),'x')),15) - 15,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CONTROL_YEAR,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DEBARMENTS_COUNT,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PHONE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PH_EXTENSION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE16)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE17)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE18)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE19)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ADDR_ATTRIBUTE20)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE16)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE17)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE18)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE19)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CPS_ATTRIBUTE20)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE16)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE17)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE18)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE19)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_PS_ATTRIBUTE20)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NATIVE_LANGUAGE)),'x')),4) - 4,0,'OK','NO') = 'NO'

 );




-- Cursor for B2C party type

cursor b2c is
 SELECT
 IMPORT_SOURCE_LINE_ID,
 import_list_header_id,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,' ','ADDRESS1 :'||l_invalid_size||'(240)') ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,' ','ADDRESS2 :'||l_invalid_size||'(240)') ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,' ','ADDRESS3 :'||l_invalid_size||'(240)') ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,' ','ADDRESS4 :'||l_invalid_size||'(240)') ADDRESS4,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(PERSON_LAST_NAME))),50) - 50,0,' ','PERSON_LAST_NAME :'||decode(nvl(PERSON_LAST_NAME,'x'),'x',l_null_value,l_invalid_size)||'(50)') PERSON_LAST_NAME,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(PERSON_FIRST_NAME))),40) - 40,0,' ','PERSON_FIRST_NAME :'||decode(nvl(PERSON_FIRST_NAME,'x'),'x',l_null_value,l_invalid_size)||'(40)') PERSON_FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,' ','PERSON_NAME_PREFIX :'||l_invalid_size||'(30)') PERSON_NAME_PREFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,' ','PERSON_MIDDLE_NAME :'||l_invalid_size||'(60)') PERSON_MIDDLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,' ','PERSON_NAME_SUFFIX :'||l_invalid_size||'(30)') PERSON_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,' ','CITY :'||l_invalid_size||'(60)') CITY ,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALUTATION)),'x')),60) - 60,0,' ','SALUTATION :'||l_invalid_size||'(60)') SALUTATION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,' ','POSTAL_CODE :'||l_invalid_size||'(60)') POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,' ','STATE :'||l_invalid_size||'(60)') STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,' ','PROVINCE :'||l_invalid_size||'(60)') PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,' ','COUNTY :'||l_invalid_size||'(60)') COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,' ','COUNTRY :'||l_invalid_size||'(60)') COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,' ','TIME_ZONE :'||l_invalid_size||'(50)') TIME_ZONE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,' ','EMAIL_ADDRESS :'||l_invalid_size||'(240)') EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,' ','PHONE_COUNTRY_CODE :'||l_invalid_size||'(30)') PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,' ','PHONE_AREA_CODE :'||l_invalid_size||'(10)') PHONE_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,' ','PHONE_NUMBER :'||l_invalid_size||'(25)') PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,' ','PHONE_EXTENTION :'||l_invalid_size||'(20)') PHONE_EXTENTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OVERSEAS_ADDRESS_FLAG)),'x')),1) - 1,0,' ','OVERSEAS_ADDRESS_FLAG :'||l_invalid_size||'(1)') OVERSEAS_ADDRESS_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,' ','identifying_address_flag :'||l_invalid_size||'(1)') identifying_address_flag,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(APARTMENT_FLAG)),'x')),1) - 1,0,' ','APARTMENT_FLAG :'||l_invalid_size||'(1)') APARTMENT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,' ','ADDRESS_LINES_PHONETIC :'||l_invalid_size||'(560)') ADDRESS_LINES_PHONETIC,
-- bug 4641591: columns obsolete
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,' ','PO_BOX_NUMBER :'||l_invalid_size||'(50)') PO_BOX_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,' ','FLOOR :'||l_invalid_size||'(50)') FLOOR,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,' ','HOUSE_NUMBER :'||l_invalid_size||'(50)') HOUSE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),10) - 10,0,' ','POSTAL_PLUS4_CODE :'||l_invalid_size||'(10)') POSTAL_PLUS4_CODE,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,' ','STREET_SUFFIX :'||l_invalid_size||'(50)') STREET_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECONDARY_SUFFIX_ELEMENT)),'x')),240) - 240,0,' ','SECONDARY_SUFFIX_ELEMENT :'||l_invalid_size||'(240)') SECONDARY_SUFFIX_ELEMENT,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,' ','STREET :'||l_invalid_size||'(50)') STREET,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,' ','STREET_NUMBER :'||l_invalid_size||'(50)') STREET_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SUITE)),'x')),50) - 50,0,' ','SUITE :'||l_invalid_size||'(50)') SUITE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_TYPE)),'x')),50) - 50,0,' ','RURAL_ROUTE_TYPE :'||l_invalid_size||'(50)') RURAL_ROUTE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_NUMBER)),'x')),50) - 50,0,' ','RURAL_ROUTE_NUMBER :'||l_invalid_size||'(50)') RURAL_ROUTE_NUMBER,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,' ','PARTY_ID :'||l_invalid_number) party_id,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URL)),'x')),2000) - 2000,0,' ','URL :'||l_invalid_size||'(2000)') URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,' ','DECLARED_ETHNICITY :'||l_invalid_size||'(60)') DECLARED_ETHNICITY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION:'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEAD_OF_HOUSEHOLD_FLAG)),'x')),1) - 1,0,' ','HEAD_OF_HOUSEHOLD_FLAG :'||l_invalid_size||'(1)') HEAD_OF_HOUSEHOLD_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS :'||l_invalid_size||'(240)') PERSON_KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS2 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS3 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS4 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS5 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,' ','LOCATION_DIRECTIONS:'||l_invalid_size||'(640)') LOCATION_DIRECTIONS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,' ','MARITAL_STATUS :'||l_invalid_size||'(30)') MARITAL_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,' ','PERSON_ACADEMIC_TITLE :'||l_invalid_size||'(30)') PERSON_ACADEMIC_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_FIRST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_FIRST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_LAST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_LAST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,' ','MIDDLE_NAME_PHONETIC :'||l_invalid_size||'(60)') MIDDLE_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),320) - 320,0,' ','PERSON_NAME_PHONETIC :'||l_invalid_size||'(320)') PERSON_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,' ','PERSON_PREVIOUS_TITLE_NAME :'||l_invalid_size||'(150)') PERSON_PREVIOUS_TITLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECOND_TITLE)),'x')),30) - 30,0,' ','SECOND_TITLE :'||l_invalid_size||'(30)') SECOND_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE1)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE1 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE2)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE2 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE3)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE3 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE4)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE4 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE5)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE5 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE6)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE6 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE7)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE7 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE8)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE8 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE9)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE9 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE10)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE10 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE11)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE11 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE12)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE12 : '||l_invalid_size||'(150)') PERSON_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE13)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE13 : '||l_invalid_size||'(150)') PERSON_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE14)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE14 : '||l_invalid_size||'(150)') PERSON_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE15)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE15 : '||l_invalid_size||'(150)') PERSON_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE1 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE2 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE3 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE4 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE5 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE6 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE7 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE8 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE9 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE10 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE11 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE12 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE13 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE14 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE15 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,' ','FAX_COUNTRY_CODE :'||l_invalid_size||'(10)') FAX_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,' ','FAX_AREA_CODE :'||l_invalid_size||'(10)') FAX_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,' ','FAX_NUMBER :'||l_invalid_size||'(40)') FAX_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','PERSON_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') PERSON_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ADDRESS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ADDRESS_ATTRIBUTE_CATEGORY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,' ','HOUSEHOLD_SIZE :'||l_invalid_number) HOUSEHOLD_SIZE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','HOUSEHOLD_INCOME :'||l_invalid_number) HOUSEHOLD_INCOME,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','PERSONAL_INCOME :'||l_invalid_number) PERSONAL_INCOME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION:'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,' ','NOTES :'||l_invalid_size||'(2000)') NOTES,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,' ','VEHICLE_RESPONSE_CODE :'||l_invalid_size||'(30)') VEHICLE_RESPONSE_CODE,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,' ','SALES_AGENT_EMAIL_ADDRESS:'||l_invalid_size||'(2000)') SALES_AGENT_EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),60) - 60,0,' ','TAX_REFERENCE :'||l_invalid_size||'(60)') TAX_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,' ','RENT_OWNED_INDICATOR :'||l_invalid_size||'(30)') RENT_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GENDER)),'x')),30) - 30,0,' ','GENDER :'||l_invalid_size||'(30)') GENDER,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,' ','ORIG_SYSTEM_REFERENCE:'||l_invalid_size||'(240)') ORIG_SYSTEM_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_TYPE)),'x')),30) - 30,0,' ','PHONE_TYPE :'||l_invalid_size||'(30)') PHONE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','PS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') PS_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE1)),'x')),150) - 150,0,' ','PS_ATTRIBUTE1 :'||l_invalid_size||'(150)') PS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE2)),'x')),150) - 150,0,' ','PS_ATTRIBUTE2 :'||l_invalid_size||'(150)') PS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE3)),'x')),150) - 150,0,' ','PS_ATTRIBUTE3 :'||l_invalid_size||'(150)') PS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE4)),'x')),150) - 150,0,' ','PS_ATTRIBUTE4 :'||l_invalid_size||'(150)') PS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE5)),'x')),150) - 150,0,' ','PS_ATTRIBUTE5 :'||l_invalid_size||'(150)') PS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE6)),'x')),150) - 150,0,' ','PS_ATTRIBUTE6 :'||l_invalid_size||'(150)') PS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE7)),'x')),150) - 150,0,' ','PS_ATTRIBUTE7 :'||l_invalid_size||'(150)') PS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE8)),'x')),150) - 150,0,' ','PS_ATTRIBUTE8 :'||l_invalid_size||'(150)') PS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE9)),'x')),150) - 150,0,' ','PS_ATTRIBUTE9 :'||l_invalid_size||'(150)') PS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE10)),'x')),150) - 150,0,' ','PS_ATTRIBUTE10 :'||l_invalid_size||'(150)') PS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE11)),'x')),150) - 150,0,' ','PS_ATTRIBUTE11 :'||l_invalid_size||'(150)') PS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE12)),'x')),150) - 150,0,' ','PS_ATTRIBUTE12 :'||l_invalid_size||'(150)') PS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE13)),'x')),150) - 150,0,' ','PS_ATTRIBUTE13 :'||l_invalid_size||'(150)') PS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE14)),'x')),150) - 150,0,' ','PS_ATTRIBUTE14 :'||l_invalid_size||'(150)') PS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE15)),'x')),150) - 150,0,' ','PS_ATTRIBUTE15 :'||l_invalid_size||'(150)') PS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE16)),'x')),150) - 150,0,' ','PS_ATTRIBUTE16 :'||l_invalid_size||'(150)') PS_ATTRIBUTE16,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE17)),'x')),150) - 150,0,' ','PS_ATTRIBUTE17 :'||l_invalid_size||'(150)') PS_ATTRIBUTE17,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE18)),'x')),150) - 150,0,' ','PS_ATTRIBUTE18 :'||l_invalid_size||'(150)') PS_ATTRIBUTE18,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE19)),'x')),150) - 150,0,' ','PS_ATTRIBUTE19 :'||l_invalid_size||'(150)') PS_ATTRIBUTE19,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE20)),'x')),150) - 150,0,' ','PS_ATTRIBUTE20 :'||l_invalid_size||'(150)') PS_ATTRIBUTE20,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NATIVE_LANGUAGE)),'x')),4) - 4,0,' ','LANGUAGE :'||l_invalid_size||'(4)') NATIVE_LANGUAGE,
Null  col1,
Null  col2,
Null  col3,
Null  col4,
Null  col5,
Null  col6,
Null  col7,
Null  col8,
Null  col9,
Null  col10,
Null  col11,
Null  col12,
Null  col13,
Null  col14,
Null  col15,
Null  col16,
Null  col17,
Null  col18,
Null  col19,
Null  col20,
Null  col21,
Null  col22,
Null  col23,
Null  col24,
Null  col25,
Null  col26,
Null  col27,
Null  col28,
Null  col29,
Null  col30,
Null  col31,
Null  col32,
Null  col33,
Null  col34,
Null  col35,
Null  col36,
Null  col37,
Null  col38,
Null  col39,
Null  col40,
Null  col41,
Null  col42,
Null  col43,
Null  col44,
Null  col45,
Null  col46,
Null  col47,
Null  col48,
Null  col49,
Null  col50,
Null  col51,
Null  col52,
Null  col53,
Null  col54,
Null  col55,
Null  col56,
Null  col57,
Null  col58,
Null  col59,
Null  col60,
Null  col61,
Null  col62,
Null  col63,
Null  col64,
Null  col65,
Null  col66,
Null  col67,
Null  col68,
Null  col69,
Null  col70,
Null  col71,
Null  col72,
Null  col73,
Null  col74,
Null  col75,
Null  col76,
Null  col77,
Null  col78,
Null  col79,
Null  col80,
Null  col81,
Null  col82,
Null  col83,
Null  col84,
Null  col85,
Null  col86,
Null  col87,
Null  col88,
Null  col89,
Null  col90,
Null  col91,
Null  col92,
Null  col93,
Null  col94,
Null  col95,
Null  col96,
Null  col97,
Null  col98,
Null  col99,
Null  col100,
Null  col101,
Null  col102,
Null  col103,
Null  col104,
Null  col105,
Null  col106,
Null  col107,
Null  col108,
Null  col109,
Null  col110,
Null  col111,
Null  col112,
Null  col113,
Null  col114,
Null  col115,
Null  col116,
Null  col117,
Null  col118,
Null  col119,
Null  col120,
Null  col121,
Null  col122,
Null  col123,
Null  col124,
Null  col125,
Null  col126,
Null  col127,
Null  col128,
Null  col129,
Null  col130,
Null  col131,
Null  col132,
Null  col133,
Null  col134,
Null  col135,
Null  col136,
Null  col137,
Null  col138,
Null  col139,
Null  col140,
Null  col141,
Null  col142,
Null  col143,
Null  col144,
Null  col145,
Null  col146,
Null  col147,
Null  col148
 FROM AMS_HZ_B2C_MAPPING_V
 WHERE IMPORT_LIST_HEADER_ID =  p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
   AND
 (
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALUTATION)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OVERSEAS_ADDRESS_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(APARTMENT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
--  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,'OK','NO') = 'NO'
--or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECONDARY_SUFFIX_ELEMENT)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_TYPE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PLACE_OF_BIRTH)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SECOND_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GENDER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE16)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE17)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE18)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE19)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PS_ATTRIBUTE20)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(NATIVE_LANGUAGE)),'x')),4) - 4,0,'OK','NO') = 'NO'
 );



-- Cursor to check if it's B2B or B2C party type.

cursor b2borb2c is
          select import_type  from ams_imp_list_headers_all
          where  import_list_header_id = p_import_list_header_id;


CURSOR c_b2b_date_fields is
SELECT
import_list_header_id,
import_source_line_id,
ADDRESS_EFFECTIVE_DATE,
ADDRESS_EXPIRATION_DATE,
DATE_OF_BIRTH,
DATE_OF_DEATH,
DEBARTMENTS_DATE,
MARITAL_STATUS_EFFECTIVE_DATE
FROM ams_hz_b2b_mapping_v
WHERE import_list_header_id = p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
  AND (ADDRESS_EFFECTIVE_DATE is not null or ADDRESS_EXPIRATION_DATE is not null or
       DATE_OF_BIRTH is not null or DATE_OF_DEATH is not null or DEBARTMENTS_DATE is not null
       or MARITAL_STATUS_EFFECTIVE_DATE is not null);

CURSOR c_b2c_date_fields is
SELECT
import_list_header_id,
import_source_line_id,
ADDRESS_EFFECTIVE_DATE,
ADDRESS_EXPIRATION_DATE,
DATE_OF_BIRTH,
DATE_OF_DEATH,
null date1,
MARITAL_STATUS_EFFECTIVE_DATE
FROM ams_hz_b2c_mapping_v
WHERE import_list_header_id = p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
  AND (ADDRESS_EFFECTIVE_DATE is not null or ADDRESS_EXPIRATION_DATE is not null or
       DATE_OF_BIRTH is not null or DATE_OF_DEATH is not null or MARITAL_STATUS_EFFECTIVE_DATE is not null);

begin

        IF p_import_list_header_id IS NULL THEN
                RAISE FND_API.G_EXC_ERROR;
        END IF;
    p_return_status := FND_API.G_RET_STS_SUCCESS;

    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_DATATYPE_ERROR_CHK');
    l_invalid_number := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_SIZE_ERROR_CHK');
    l_invalid_size := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_NULL_ERROR_CHK');
    l_null_value := FND_MESSAGE.get;

        OPEN b2borb2c;
        FETCH b2borb2c into l_imp_type;
        CLOSE b2borb2c;
        x_b2b := l_imp_type;
    OPEN c_lead_batch_id;
    FETCH c_lead_batch_id into l_batch_id;
    CLOSE c_lead_batch_id;

    if x_b2b = 'B2B' then
    	OPEN b2b;
     else
    	OPEN b2c;
    end if;
     LOOP
    if x_b2b = 'B2B' then
      FETCH b2b BULK COLLECT INTO
       l_import_source_line_id,
       l_import_list_header_id,
       l_col1                                  ,
       l_col2                                  ,
       l_col3                                  ,
       l_col4                                  ,
       l_col5                                  ,
       l_col6                                  ,
       l_col7                                  ,
       l_col8                                  ,
       l_col9                                  ,
       l_col10                                 ,
       l_col11                                 ,
       l_col12                                 ,
       l_col13                                 ,
       l_col14                                 ,
       l_col15                                 ,
       l_col16                                 ,
       l_col17                                 ,
       l_col18                                 ,
       l_col19                                 ,
       l_col20                                 ,
       l_col21                                 ,
       l_col22                                 ,
       l_col23                                 ,
       l_col24                                 ,
       l_col25                                 ,
       l_col26                                 ,
       l_col27                                 ,
       l_col28                                 ,
       l_col29                                 ,
       l_col30                                 ,
       l_col31                                 ,
       l_col32                                 ,
       l_col33                                 ,
       l_col34                                 ,
       l_col35                                 ,
       l_col36                                 ,
       l_col37                                 ,
       l_col38                                 ,
       l_col39                                 ,
       l_col40                                 ,
       l_col41                                 ,
       l_col42                                 ,
       l_col43                                 ,
       l_col44                                 ,
       l_col45                                 ,
       l_col46                                 ,
       l_col47                                 ,
       l_col48                                 ,
       l_col49                                 ,
--       l_col50                                 ,
--       l_col51                                 ,
--       l_col52                                 ,
       l_col53                                 ,
--       l_col54                                 ,
       l_col55                                 ,
--       l_col56                                 ,
--       l_col57                                 ,
--       l_col58                                 ,
       l_col59                                 ,
       l_col60                                 ,
       l_col61                                 ,
       l_col62                                 ,
       l_col63                                 ,
       l_col64                                 ,
       l_col65                                 ,
       l_col66                                 ,
       l_col67                                 ,
       l_col68                                 ,
       l_col69                                 ,
       l_col70                                 ,
       l_col71                                 ,
       l_col72                                 ,
       l_col73                                 ,
       l_col74                                 ,
       l_col75                                 ,
       l_col76                                 ,
       l_col77                                 ,
       l_col78                                 ,
       l_col79                                 ,
       l_col80                                 ,
       l_col81                                 ,
       l_col82                                 ,
       l_col83                                 ,
       l_col84                                 ,
       l_col85                                 ,
       l_col86                                 ,
       l_col87                                 ,
       l_col88                                 ,
       l_col89                                 ,
       l_col90                                 ,
       l_col91                                 ,
       l_col92                                 ,
       l_col93                                 ,
       l_col94                                 ,
       l_col95                                 ,
       l_col96                                 ,
       l_col97                                 ,
       l_col98                                 ,
       l_col99                                 ,
       l_col100                                ,
       l_col101                                ,
       l_col102                                ,
       l_col103                                ,
       l_col104                                ,
       l_col105                                ,
       l_col106                                ,
       l_col107                                ,
       l_col108                                ,
       l_col109                                ,
       l_col110                                ,
       l_col111                                ,
       l_col112                                ,
       l_col113                                ,
       l_col114                                ,
       l_col115                                ,
       l_col116                                ,
       l_col117                                ,
       l_col118                                ,
       l_col119                                ,
       l_col120                                ,
       l_col121                                ,
       l_col122                                ,
       l_col123                                ,
       l_col124                                ,
       l_col125                                ,
       l_col126                                ,
       l_col127                                ,
       l_col128                                ,
       l_col129                                ,
       l_col130                                ,
       l_col131                                ,
       l_col132                                ,
       l_col133                                ,
       l_col134                                ,
       l_col135                                ,
       l_col136                                ,
       l_col137                                ,
       l_col138                                ,
       l_col139                                ,
       l_col140                                ,
       l_col141                                ,
       l_col142                                ,
       l_col143                                ,
       l_col144                                ,
       l_col145                                ,
       l_col146                                ,
       l_col147                                ,
       l_col148                                ,
       l_col149                                ,
       l_col150                                ,
       l_col151                                ,
       l_col152                                ,
       l_col153                                ,
       l_col154                                ,
       l_col155                                ,
       l_col156                                ,
       l_col157                                ,
       l_col158                                ,
       l_col159                                ,
       l_col160                                ,
       l_col161                                ,
       l_col162                                ,
       l_col163                                ,
       l_col164                                ,
       l_col165                                ,
       l_col166                                ,
       l_col167                                ,
       l_col168                                ,
       l_col169                                ,
       l_col170                                ,
       l_col171                                ,
       l_col172                                ,
       l_col173                                ,
       l_col174                                ,
       l_col175                                ,
       l_col176                                ,
       l_col177                                ,
       l_col178                                ,
       l_col179                                ,
       l_col180                                ,
       l_col181                                ,
       l_col182                                ,
       l_col183                                ,
       l_col184                                ,
       l_col185                                ,
       l_col186                                ,
       l_col187                                ,
       l_col188                                ,
       l_col189                                ,
       l_col190                                ,
       l_col191                                ,
       l_col192                                ,
       l_col193                                ,
       l_col194                                ,
        l_col221,
        l_col222,
        l_col223,
        l_col224,
        l_col225,
        l_col226,
        l_col227,
        l_col228,
        l_col229,
        l_col230,
        l_col231,
        l_col232,
        l_col233,
        l_col234,
        l_col235,
        l_col236,
        l_col237,
        l_col238,
        l_col239,
        l_col240,
        l_col241,
        l_col242,
        l_col243,
        l_col244,
        l_col245,
        l_col246,
        l_col247,
        l_col248,
        l_col249,
        l_col251,
        l_col252,
        l_col253,
        l_col254,
        l_col255,
        l_col256,
        l_col257,
        l_col258,
        l_col259,
        l_col260,
        l_col261,
        l_col262,
        l_col263,
        l_col264,
        l_col265,
        l_col266,
        l_col267,
        l_col268,
        l_col269,
        l_col270,
        l_col271,
        l_col272,
        l_col273,
        l_col274,
        l_col275,
        l_col276,
        l_col277,
        l_col278,
        l_col279,
        l_col280,
        l_col281,
        l_col282,
        l_col283,
        l_col284,
        l_col285,
        l_col286,
        l_col287,
        l_col288,
        l_col289,
        l_col290,
        l_col291,
        l_col292,
        l_col293,
        l_col294,
        l_col295,
        l_col296,
        l_col297,
        l_col298,
        l_col299,
        l_col300,
        l_col301,
        l_col302
      LIMIT L_MAX_ROW_COUNT;
     else
     FETCH b2c BULK COLLECT INTO
       l_import_source_line_id,
       l_import_list_header_id,
       l_col1                                  ,
       l_col2                                  ,
       l_col3                                  ,
       l_col4                                  ,
       l_col5                                  ,
       l_col6                                  ,
       l_col7                                  ,
       l_col8                                  ,
       l_col9                                  ,
       l_col10                                 ,
       l_col11                                 ,
       l_col12                                 ,
       l_col13                                 ,
       l_col14                                 ,
       l_col15                                 ,
       l_col16                                 ,
       l_col17                                 ,
       l_col18                                 ,
       l_col19                                 ,
       l_col20                                 ,
       l_col21                                 ,
       l_col22                                 ,
       l_col23                                 ,
       l_col24                                 ,
       l_col25                                 ,
       l_col26                                 ,
--       l_col27                                 ,
--       l_col28                                 ,
--       l_col29                                 ,
       l_col30                                 ,
--       l_col31                                 ,
       l_col32                                 ,
--       l_col33                                 ,
--       l_col34                                 ,
--       l_col35                                 ,
       l_col36                                 ,
       l_col37                                 ,
       l_col38                                 ,
       l_col39                                 ,
       l_col40                                 ,
       l_col41                                 ,
       l_col42                                 ,
       l_col43                                 ,
       l_col44                                 ,
       l_col45                                 ,
       l_col46                                 ,
       l_col47                                 ,
       l_col48                                 ,
       l_col49                                 ,
       l_col50                                 ,
       l_col51                                 ,
       l_col52                                 ,
       l_col53                                 ,
       l_col54                                 ,
       l_col55                                 ,
       l_col56                                 ,
       l_col57                                 ,
       l_col58                                 ,
       l_col59                                 ,
       l_col60                                 ,
       l_col61                                 ,
       l_col62                                 ,
       l_col63                                 ,
       l_col64                                 ,
       l_col65                                 ,
       l_col66                                 ,
       l_col67                                 ,
       l_col68                                 ,
       l_col69                                 ,
       l_col70                                 ,
       l_col71                                 ,
       l_col72                                 ,
       l_col73                                 ,
       l_col74                                 ,
       l_col75                                 ,
       l_col76                                 ,
       l_col77                                 ,
       l_col78                                 ,
       l_col79                                 ,
       l_col80                                 ,
       l_col81                                 ,
       l_col82                                 ,
       l_col83                                 ,
       l_col84                                 ,
       l_col85                                 ,
       l_col86                                 ,
       l_col87                                 ,
       l_col88                                 ,
       l_col89                                 ,
       l_col90                                 ,
       l_col91                                 ,
       l_col92                                 ,
       l_col93                                 ,
       l_col94                                 ,
       l_col95                                 ,
       l_col96                                 ,
       l_col97                                 ,
       l_col98                                 ,
       l_col99                                 ,
       l_col100                                ,
       l_col101                                ,
       l_col102                                ,
       l_col103                                ,
       l_col104                                ,
       l_col105                                ,
       l_col106                                ,
       l_col107                                ,
       l_col108                                ,
       l_col109                                ,
       l_col110                                ,
       l_col111                                ,
       l_col112                                ,
       l_col113                                ,
       l_col114                                ,
       l_col115                                ,
       l_col116                                ,
       l_col117                                ,
       l_col118                                ,
       l_col119                                ,
       l_col120                                ,
       l_col121                                ,
       l_col122                                ,
       l_col123                                ,
       l_col124                                ,
       l_col125                                ,
       l_col126                                ,
       l_col127                                ,
       l_col128                                ,
       l_col129                                ,
       l_col130                                ,
       l_col131                                ,
       l_col132                                ,
       l_col133                                ,
       l_col134                                ,
       l_col135                                ,
       l_col136                                ,
       l_col137                                ,
       l_col138                                ,
       l_col139                                ,
       l_col140                                ,
       l_col141                                ,
       l_col142                                ,
       l_col143                                ,
       l_col144                                ,
       l_col145                                ,
       l_col146                                ,
       l_col147                                ,
       l_col148                                ,
       l_col149                                ,
       l_col150                                ,
       l_col151                                ,
       l_col152                                ,
       l_col153                                ,
       l_col154                                ,
       l_col155                                ,
       l_col156                                ,
       l_col157                                ,
       l_col158                                ,
       l_col159                                ,
       l_col160                                ,
       l_col161                                ,
       l_col162                                ,
       l_col163                                ,
       l_col164                                ,
       l_col165                                ,
       l_col166                                ,
       l_col167                                ,
       l_col168                                ,
       l_col169                                ,
       l_col170                                ,
       l_col171                                ,
       l_col172                                ,
       l_col173                                ,
       l_col174                                ,
       l_col175                                ,
       l_col176                                ,
       l_col177                                ,
       l_col178                                ,
       l_col179                                ,
       l_col180                                ,
       l_col181                                ,
       l_col182                                ,
       l_col183                                ,
       l_col184                                ,
       l_col185                                ,
       l_col186                                ,
       l_col187                                ,
       l_col188                                ,
       l_col189                                ,
       l_col190                                ,
       l_col191                                ,
       l_col192                                ,
       l_col193                                ,
       l_col194                                ,
        l_col221,
        l_col222,
        l_col223,
        l_col224,
        l_col225,
        l_col226,
        l_col227,
        l_col228,
        l_col229,
        l_col230,
        l_col231,
        l_col232,
        l_col233,
        l_col234,
        l_col235,
        l_col236,
        l_col237,
        l_col238,
        l_col239,
        l_col240,
        l_col241,
        l_col242,
        l_col243,
        l_col244,
        l_col245,
        l_col246,
        l_col247,
        l_col248,
        l_col249,
        l_col251,
        l_col252,
        l_col253,
        l_col254,
        l_col255,
        l_col256,
        l_col257,
        l_col258,
        l_col259,
        l_col260,
        l_col261,
        l_col262,
        l_col263,
        l_col264,
        l_col265,
        l_col266,
        l_col267,
        l_col268,
        l_col269,
        l_col270,
        l_col271,
        l_col272,
        l_col273,
        l_col274,
        l_col275,
        l_col276,
        l_col277,
        l_col278,
        l_col279,
        l_col280,
        l_col281,
        l_col282,
        l_col283,
        l_col284,
        l_col285,
        l_col286,
        l_col287,
        l_col288,
        l_col289,
        l_col290,
        l_col291,
        l_col292,
        l_col293,
        l_col294,
        l_col295,
        l_col296,
        l_col297,
        l_col298,
        l_col299,
        l_col300,
        l_col301,
        l_col302
      LIMIT L_MAX_ROW_COUNT;
    end if;

      FORALL i IN 1 .. l_import_source_line_id.count
       INSERT INTO ams_list_import_errors
       (
        LIST_IMPORT_ERROR_ID,
        LAST_UPDATED_BY,
        LAST_UPDATE_DATE,
        CREATION_DATE,
        CREATED_BY,
        LAST_UPDATE_LOGIN,
        IMPORT_SOURCE_LINE_ID,
        IMPORT_LIST_HEADER_ID,
        IMPORT_TYPE,
        ERROR_TYPE,
        batch_id,
        error_flag,
        col1                                  ,
        col2                                  ,
        col3                                  ,
        col4                                  ,
        col5                                  ,
        col6                                  ,
        col7                                  ,
        col8                                  ,
        col9                                  ,
        col10                                 ,
        col11                                 ,
        col12                                 ,
        col13                                 ,
        col14                                 ,
        col15                                 ,
        col16                                 ,
        col17                                 ,
        col18                                 ,
        col19                                 ,
        col20                                 ,
        col21                                 ,
        col22                                 ,
        col23                                 ,
        col24                                 ,
        col25                                 ,
        col26                                 ,
        col27                                 ,
        col28                                 ,
        col29                                 ,
        col30                                 ,
        col31                                 ,
        col32                                 ,
        col33                                 ,
        col34                                 ,
        col35                                 ,
        col36                                 ,
        col37                                 ,
        col38                                 ,
        col39                                 ,
        col40                                 ,
        col41                                 ,
        col42                                 ,
        col43                                 ,
        col44                                 ,
        col45                                 ,
        col46                                 ,
        col47                                 ,
        col48                                 ,
        col49                                 ,
       -- col50                                 ,
        --col51                                 ,
        --col52                                 ,
        col53                                 ,
        --col54                                 ,
        col55                                 ,
        --col56                                 ,
        --col57                                 ,
        --col58                                 ,
        col59                                 ,
        col60                                 ,
        col61                                 ,
        col62                                 ,
        col63                                 ,
        col64                                 ,
        col65                                 ,
        col66                                 ,
        col67                                 ,
        col68                                 ,
        col69                                 ,
        col70                                 ,
        col71                                 ,
        col72                                 ,
        col73                                 ,
        col74                                 ,
        col75                                 ,
        col76                                 ,
        col77                                 ,
        col78                                 ,
        col79                                 ,
        col80                                 ,
        col81                                 ,
        col82                                 ,
        col83                                 ,
        col84                                 ,
        col85                                 ,
        col86                                 ,
        col87                                 ,
        col88                                 ,
        col89                                 ,
        col90                                 ,
        col91                                 ,
        col92                                 ,
        col93                                 ,
        col94                                 ,
        col95                                 ,
        col96                                 ,
        col97                                 ,
        col98                                 ,
        col99                                 ,
        col100                                ,
        col101                                ,
        col102                                ,
        col103                                ,
        col104                                ,
        col105                                ,
        col106                                ,
        col107                                ,
        col108                                ,
        col109                                ,
        col110                                ,
        col111                                ,
        col112                                ,
        col113                                ,
        col114                                ,
        col115                                ,
        col116                                ,
        col117                                ,
        col118                                ,
        col119                                ,
        col120                                ,
        col121                                ,
        col122                                ,
        col123                                ,
        col124                                ,
        col125                                ,
        col126                                ,
        col127                                ,
        col128                                ,
        col129                                ,
        col130                                ,
        col131                                ,
        col132                                ,
        col133                                ,
        col134                                ,
        col135                                ,
        col136                                ,
        col137                                ,
        col138                                ,
        col139                                ,
        col140                                ,
        col141                                ,
        col142                                ,
        col143                                ,
        col144                                ,
        col145                                ,
        col146                                ,
        col147                                ,
        col148                                ,
        col149                                ,
        col150                                ,
        col151                                ,
        col152                                ,
        col153                                ,
        col154                                ,
        col155                                ,
        col156                                ,
        col157                                ,
        col158                                ,
        col159                                ,
        col160                                ,
        col161                                ,
        col162                                ,
        col163                                ,
        col164                                ,
        col165                                ,
        col166                                ,
        col167                                ,
        col168                                ,
        col169                                ,
        col170                                ,
        col171                                ,
        col172                                ,
        col173                                ,
        col174                                ,
        col175                                ,
        col176                                ,
        col177                                ,
        col178                                ,
        col179                                ,
        col180                                ,
        col181                                ,
        col182                                ,
        col183                                ,
        col184                                ,
        col185                                ,
        col186                                ,
        col187                                ,
        col188                                ,
        col189                                ,
        col190                                ,
        col191                                ,
        col192                                ,
        col193                                ,
        col194
       )
       VALUES
       (
        ams_list_import_errors_s.nextval,      -- LIST_IMPORT_ERROR_ID,
        FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
        SYSDATE,                              -- LAST_UPDATE_DATE,
        SYSDATE,                              -- CREATION_DATE,
        FND_GLOBAL.User_ID,                   -- CREATED_BY,
        FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
        l_import_source_line_id(i),
        l_import_list_header_id(i),
        l_imp_type,  -- 'CUSTOMER',                                -- IMPORT_TYPE,
        'E',                                  -- ERROR_TYPE,
        l_batch_id,
       'Y',
       l_col1(i),
       l_col2(i),
       l_col3(i),
       l_col4(i),
       l_col5(i),
       l_col6(i),
       l_col7(i),
       l_col8(i),
       l_col9(i),
       l_col10(i),
       l_col11(i),
       l_col12(i),
       l_col13(i),
       l_col14(i),
       l_col15(i),
       l_col16(i),
       l_col17(i),
       l_col18(i),
       l_col19(i),
       l_col20(i),
       l_col21(i),
       l_col22(i),
       l_col23(i),
       l_col24(i),
       l_col25(i),
       l_col26(i),
       l_col27(i),
       l_col28(i),
       l_col29(i),
       l_col30(i),
       l_col31(i),
       l_col32(i),
       l_col33(i),
       l_col34(i),
       l_col35(i),
       l_col36(i),
       l_col37(i),
       l_col38(i),
       l_col39(i),
       l_col40(i),
       l_col41(i),
       l_col42(i),
       l_col43(i),
       l_col44(i),
       l_col45(i),
       l_col46(i),
       l_col47(i),
       l_col48(i),
       l_col49(i),
      -- l_col50(i),
     --  l_col51(i),
     --  l_col52(i),
       l_col53(i),
      -- l_col54(i),
       l_col55(i),
    --   l_col56(i),
      -- l_col57(i),
       --l_col58(i),
       l_col59(i),
       l_col60(i),
       l_col61(i),
       l_col62(i),
       l_col63(i),
       l_col64(i),
       l_col65(i),
       l_col66(i),
       l_col67(i),
       l_col68(i),
       l_col69(i),
       l_col70(i),
       l_col71(i),
       l_col72(i),
       l_col73(i),
       l_col74(i),
       l_col75(i),
       l_col76(i),
       l_col77(i),
       l_col78(i),
       l_col79(i),
       l_col80(i),
       l_col81(i),
       l_col82(i),
       l_col83(i),
       l_col84(i),
       l_col85(i),
       l_col86(i),
       l_col87(i),
       l_col88(i),
       l_col89(i),
       l_col90(i),
       l_col91(i),
       l_col92(i),
       l_col93(i),
       l_col94(i),
       l_col95(i),
       l_col96(i),
       l_col97(i),
       l_col98(i),
       l_col99(i),
       l_col100(i),
       l_col101(i),
       l_col102(i),
       l_col103(i),
       l_col104(i),
       l_col105(i),
       l_col106(i),
       l_col107(i),
       l_col108(i),
       l_col109(i),
       l_col110(i),
       l_col111(i),
       l_col112(i),
       l_col113(i),
       l_col114(i),
       l_col115(i),
       l_col116(i),
       l_col117(i),
       l_col118(i),
       l_col119(i),
       l_col120(i),
       l_col121(i),
       l_col122(i),
       l_col123(i),
       l_col124(i),
       l_col125(i),
       l_col126(i),
       l_col127(i),
       l_col128(i),
       l_col129(i),
       l_col130(i),
       l_col131(i),
       l_col132(i),
       l_col133(i),
       l_col134(i),
       l_col135(i),
       l_col136(i),
       l_col137(i),
       l_col138(i),
       l_col139(i),
       l_col140(i),
       l_col141(i),
       l_col142(i),
       l_col143(i),
       l_col144(i),
       l_col145(i),
       l_col146(i),
       l_col147(i),
       l_col148(i),
       l_col149(i),
       l_col150(i),
       l_col151(i),
       l_col152(i),
       l_col153(i),
       l_col154(i),
       l_col155(i),
       l_col156(i),
       l_col157(i),
       l_col158(i),
       l_col159(i),
       l_col160(i),
       l_col161(i),
       l_col162(i),
       l_col163(i),
       l_col164(i),
       l_col165(i),
       l_col166(i),
       l_col167(i),
       l_col168(i),
       l_col169(i),
       l_col170(i),
       l_col171(i),
       l_col172(i),
       l_col173(i),
       l_col174(i),
       l_col175(i),
       l_col176(i),
       l_col177(i),
       l_col178(i),
       l_col189(i),
       l_col180(i),
       l_col181(i),
       l_col182(i),
       l_col183(i),
       l_col184(i),
       l_col185(i),
       l_col186(i),
       l_col187(i),
       l_col188(i),
       l_col189(i),
       l_col190(i),
       l_col191(i),
       l_col192(i),
       l_col193(i),
       l_col194(i)
      );
    if x_b2b = 'B2B' then
      EXIT WHEN b2b%NOTFOUND;
     else
      EXIT WHEN b2c%NOTFOUND;
    end if;
    END LOOP;
    if x_b2b = 'B2B' then
      CLOSE b2b;
     else
      CLOSE b2c;
    end if;
         if x_b2b = 'B2B' then
           OPEN c_b2b_date_fields;
           LOOP
           FETCH c_b2b_date_fields into x_import_list_header_id,x_import_source_line_id,l_ADDRESS_EFFECTIVE_DATE,
                 l_ADDRESS_EXPIRATION_DATE,l_DATE_OF_BIRTH,l_DATE_OF_DEATH,l_DEBARTMENTS_DATE,
		 l_MARITAL_STATUS_EFF_DATE;
           EXIT WHEN c_b2b_date_fields%NOTFOUND;
           date_validate( x_import_list_header_id,x_import_source_line_id,l_batch_id,l_ADDRESS_EFFECTIVE_DATE,
                 l_ADDRESS_EXPIRATION_DATE, l_DATE_OF_BIRTH,l_DATE_OF_DEATH,l_DEBARTMENTS_DATE,l_MARITAL_STATUS_EFF_DATE);
           End Loop;
           CLOSE c_b2b_date_fields;
         end if;
         if x_b2b = 'B2C' then
           OPEN c_b2c_date_fields;
           LOOP
           FETCH c_b2c_date_fields into x_import_list_header_id,x_import_source_line_id,l_ADDRESS_EFFECTIVE_DATE,
                 l_ADDRESS_EXPIRATION_DATE,l_DATE_OF_BIRTH,l_DATE_OF_DEATH,l_DEBARTMENTS_DATE,
		 l_MARITAL_STATUS_EFF_DATE;
           EXIT WHEN c_b2c_date_fields%NOTFOUND;
           date_validate( x_import_list_header_id,x_import_source_line_id,l_batch_id,l_ADDRESS_EFFECTIVE_DATE,
                 l_ADDRESS_EXPIRATION_DATE, l_DATE_OF_BIRTH,l_DATE_OF_DEATH,null,l_MARITAL_STATUS_EFF_DATE);
           End Loop;
           CLOSE c_b2c_date_fields;
         end if;
       UPDATE ams_imp_source_lines
         SET load_status = decode(load_status,'DUPLICATE','DUPLICATE','ERROR')
       WHERE import_list_header_id = p_import_list_header_id
         and import_source_line_id in
       (select import_source_line_id from ams_list_import_errors
        where import_list_header_id = p_import_list_header_id
          and error_type = 'E');

EXCEPTION
 WHEN OTHERS THEN
    p_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in execute_cust_data_validation:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end execute_cust_data_validation;
-- ----------------------------------------------



--
-- This program performs error checks in ams_import_interface table.

PROCEDURE exe_custxml_data_validation (
  			    p_import_list_header_id NUMBER,
                            p_return_status OUT NOCOPY     VARCHAR2
                            ) IS
l_batch_id                                      NUMBER;
l_import_list_header_id                         number;
l_import_source_line_id                         number;
l_invalid_number varchar2(4000) ;
l_invalid_size   varchar2(4000) ;
l_null_value     varchar2(4000) ;
x_b2b                           varchar(30);
l_return_status                 varchar(1);
l_imp_type         varchar2(60);

   l_cust_b2b_rec		data_in_rec_type;
   l_cust_b2c_rec		data_in_rec_b2c_type;


CURSOR c_lead_batch_id is
SELECT
batch_id
FROM ams_imp_list_headers_all
WHERE import_list_header_id = p_import_list_header_id;

-- Cursor for B2B party type

cursor b2b is
 SELECT
 IMPORT_SOURCE_LINE_ID,
 import_list_header_id,
 org_imp_xml_element_id,
 add_imp_xml_element_id,
 ocont_imp_xml_element_id,
 cp_imp_xml_element_id,
 em_imp_xml_element_id,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(PARTY_NAME))),255) - 255,0,' ','PARTY_NAME :'||decode(nvl(PARTY_NAME,'x'),'x',l_null_value,l_invalid_size)||'(255)') PARTY_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FISCAL_YEAREND_MONTH)),'x')),30) - 30,0,' ','FISCAL_YEAREND_MONTH :'||l_invalid_size||'(30)') FISCAL_YEAREND_MONTH,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DUNS_NUMBER,' ','x'))),'0123456789.',           'x'))),0),0,' ','DUNS_NUMBER :'||l_invalid_number) DUNS_NUMBER,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(EMPLOYEES_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,' ','EMPLOYEES_TOTAL :'||l_invalid_number) EMPLOYEES_TOTAL,
DECODE(GREATEST(lengthb(nvl(LINE_OF_BUSINESS,'x')),240) - 240,0,' ','LINE_OF_BUSINESS :'||l_invalid_size) LINE_OF_BUSINESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,' ','ADDRESS1 :'||l_invalid_size||'(240)') ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,' ','ADDRESS2 :'||l_invalid_size||'(240)') ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,' ','ADDRESS3 :'||l_invalid_size||'(240)') ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,' ','ADDRESS4 :'||l_invalid_size||'(240)') ADDRESS4,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(YEAR_ESTABLISHED,' ','x'))),'0123456789.','           x'))),0),0,' ','YEAR_ESTABLISHED :'||l_invalid_number) YEAR_ESTABLISHED,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),50) - 50,0,' ','TAX_REFERENCE :'||l_invalid_size||'(50)') TAX_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CEO_NAME)),'x')),240) - 240,0,' ','CEO_NAME :'||l_invalid_size||'(240)') CEO_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME)),'x')),50) - 50,0,' ','PERSON_LAST_NAME :'||l_invalid_size||'(50)') PERSON_LAST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME)),'x')),40) - 40,0,' ','PERSON_FIRST_NAME :'||l_invalid_size||'(40)') PERSON_FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,' ','PERSON_NAME_PREFIX :'||l_invalid_size||'(30)') PERSON_NAME_PREFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE)),'x')),100) - 100,0,' ','JOB_TITLE :'||l_invalid_size||'(100)') JOB_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,' ','PERSON_MIDDLE_NAME :'||l_invalid_size||'(60)') PERSON_MIDDLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,' ','PERSON_NAME_SUFFIX :'||l_invalid_size||'(30)') PERSON_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,' ','CITY :'||l_invalid_size||'(60)') CITY ,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,' ','POSTAL_CODE :'||l_invalid_size||'(60)') POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,' ','STATE :'||l_invalid_size||'(60)') STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,' ','PROVINCE :'||l_invalid_size||'(60)') PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,' ','COUNTY :'||l_invalid_size||'(60)') COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,' ','COUNTRY :'||l_invalid_size||'(60)') COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,' ','EMAIL_ADDRESS :'||l_invalid_size||'(240)') EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,' ','PHONE_COUNTRY_CODE :'||l_invalid_size||'(30)') PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,' ','PHONE_AREA_CODE :'||l_invalid_size||'(10)') PHONE_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,' ','PHONE_NUMBER :'||l_invalid_size||'(25)') PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,' ','PHONE_EXTENTION :'||l_invalid_size||'(20)') PHONE_EXTENTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT)),'x')),60) - 60,0,' ','DEPARTMENT :'||l_invalid_size||'(60)') DEPARTMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,' ','DECISION_MAKER_FLAG :'||l_invalid_size||'(1)') DECISION_MAKER_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE)),'x')),30) - 30,0,' ','SIC_CODE :'||l_invalid_size||'(30)') SIC_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SIC_CODE_TYPE)),'x')),30) - 30,0,' ','SIC_CODE_TYPE :'||l_invalid_size||'(30)') SIC_CODE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ANALYSIS_FY)),'x')),5) - 5,0,' ','ANALYSIS_FY :'||l_invalid_size||'(5)') ANALYSIS_FY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CURR_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,' ','CURR_FY_POTENTIAL_REVENUE :'||l_invalid_number) CURR_FY_POTENTIAL_REVENUE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(NEXT_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,' ','NEXT_FY_POTENTIAL_REVENUE :'||l_invalid_number) NEXT_FY_POTENTIAL_REVENUE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GSA_INDICATOR_FLAG)),'x')),1) - 1,0,' ','GSA_INDICATOR_FLAG :'||l_invalid_size||'(1)') GSA_INDICATOR_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,' ','identifying_address_flag :'||l_invalid_size||'(1)') identifying_address_flag,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MISSION_STATEMENT)),'x')),2000) - 2000,0,' ','MISSION_STATEMENT :'||l_invalid_size||'(2000)') MISSION_STATEMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_NAME_PHONETIC)),'x')),320) - 320,0,' ','ORGANIZATION_NAME_PHONETIC :'||l_invalid_size||'(320)') ORGANIZATION_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CATEGORY_CODE)),'x')),30) -30,0,' ','CATEGORY_CODE:'||l_invalid_size||'(30)') CATEGORY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JGZZ_FISCAL_CODE)),'x')),20) - 20,0,' ','JGZZ_FISCAL_CODE :'||l_invalid_size||'(20)') JGZZ_FISCAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,' ','ADDRESS_LINES_PHONETIC :'||l_invalid_size||'(560)') ADDRESS_LINES_PHONETIC,
-- bug 4641591: columns obsolete
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,' ','PO_BOX_NUMBER :'||l_invalid_size||'(50)') PO_BOX_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,' ','FLOOR :'||l_invalid_size||'(50)') FLOOR,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,' ','HOUSE_NUMBER :'||l_invalid_size||'(50)') HOUSE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),10) - 10,0,' ','POSTAL_PLUS4_CODE :'||l_invalid_size||'(10)') POSTAL_PLUS4_CODE,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,' ','STREET_SUFFIX :'||l_invalid_size||'(50)') STREET_SUFFIX,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,' ','STREET :'||l_invalid_size||'(50)') STREET,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,' ','STREET_NUMBER :'||l_invalid_size||'(50)') STREET_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SUITE)),'x')),50) - 50,0,' ','SUITE :'||l_invalid_size||'(50)') SUITE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,' ','PARTY_ID :'||l_invalid_number) party_id,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_URL)),'x')),2000) - 2000,0,' ','ORGANIZATION_URL :'||l_invalid_size||'(2000)') ORGANIZATION_URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BRANCH_FLAG)),'x')),1) - 1,0,' ','BRANCH_FLAG :'||l_invalid_size||'(1)') BRANCH_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_LINE)),'x')),240) - 240,0,' ','BUSINESS_LINE :'||l_invalid_size||'(240)') BUSINESS_LINE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_SCOPE)),'x')),20) - 20,0,' ','BUSINESS_SCOPE :'||l_invalid_size||'(20)') BUSINESS_SCOPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CHIEF_EXECUTIVE_TITLE)),'x')),240) - 240,0,' ','CHIEF_EXECUTIVE_TITLE :'||l_invalid_size||'(240)') CHIEF_EXECUTIVE_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONGRESSIONAL_DISTRICT_CODE)),'x')),2) - 2,0,' ','CONGRESSIONAL_DISTRICT_CODE :'||l_invalid_size||'(2)') CONGRESSIONAL_DISTRICT_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CORPORATION_CLASS)),'x')),60) - 60,0,' ','CORPORATION_CLASS :'||l_invalid_size||'(60)') CORPORATION_CLASS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE)),'x')),30) - 30,0,' ','CREDIT_SCORE :'||l_invalid_size||'(30)') CREDIT_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE_COMMENTARY)),'x')),30) - 30,0,' ','CREDIT_SCORE_COMMENTARY :'||l_invalid_size||'(30)') CREDIT_SCORE_COMMENTARY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DB_RATING)),'x')),5) - 5,0,' ','DB_RATING :'||l_invalid_size||'(5)') DB_RATING,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,' ','DECLARED_ETHNICITY :'||l_invalid_size||'(60)') DECLARED_ETHNICITY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT_INDICATOR)),'x')),30) - 30,0,' ','DEPARTMENT_INDICATOR :'||l_invalid_size||'(30)') DEPARTMENT_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION:'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DISADVANTAGED_INDICATOR)),'x')),30) - 30,0,' ','DISADVANTAGED_INDICATOR :'||l_invalid_size||'(30)') DISADVANTAGED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ENQUIRY_DUNS)),'x')),15) - 15,0,' ','ENQUIRY_DUNS :'||l_invalid_size||'(15)') ENQUIRY_DUNS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EXPORT_INDICATOR)),'x')),30) - 30,0,' ','EXPORT_INDICATOR :'||l_invalid_size||'(30)') EXPORT_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE)),'x')),30) - 30,0,' ','FAILURE_SCORE :'||l_invalid_size||'(30)') FAILURE_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_COMMENTARY)),'x')),30) - 30,0,' ','FAILURE_SCORE_COMMENTARY :'||l_invalid_size||'(30)') FAILURE_SCORE_COMMENTARY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_OVERRIDE_CODE)),'x')),30) - 30,0,' ','FAILURE_SCORE_OVERRIDE_CODE :'||l_invalid_size||'(30)') FAILURE_SCORE_OVERRIDE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GLOBAL_FAILURE_SCORE)),'x')),5) - 5,0,' ','GLOBAL_FAILURE_SCORE :'||l_invalid_size||'(5)') GLOBAL_FAILURE_SCORE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEADQUARTER_BRANCH_INDICATOR)),'x')),30) - 30,0,' ','HEADQUARTER_BRANCH_INDICATOR :'||l_invalid_size||'(30)') HEADQUARTER_BRANCH_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEAD_OF_HOUSEHOLD_FLAG)),'x')),1) - 1,0,' ','HEAD_OF_HOUSEHOLD_FLAG :'||l_invalid_size||'(1)') HEAD_OF_HOUSEHOLD_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(IMPORT_INDICATOR)),'x')),30) - 30,0,' ','IMPORT_INDICATOR :'||l_invalid_size||'(30)') IMPORT_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS2)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS2 :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS3)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS3 :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS4)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS4 :'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS5)),'x')),240) - 240,0,' ','ORGANIZATION_KNOWN_AS5:'||l_invalid_size||'(240)') ORGANIZATION_KNOWN_AS5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS :'||l_invalid_size||'(240)') PERSON_KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS2 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS3 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS4 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS5 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LABOR_SURPLUS_INDICATOR)),'x')),30) - 30,0,' ','LABOR_SURPLUS_INDICATOR :'||l_invalid_size||'(30)') LABOR_SURPLUS_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE)),'x')),30) - 30,0,' ','LOCAL_ACTIVITY_CODE :'||l_invalid_size||'(30)') LOCAL_ACTIVITY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE_TYPE)),'x')),30) - 30,0,' ','LOCAL_ACTIVITY_CODE_TYPE :'||l_invalid_size||'(30)') LOCAL_ACTIVITY_CODE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,' ','LOCATION_DIRECTIONS :'||l_invalid_size||'(640)') LOCATION_DIRECTIONS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,' ','MARITAL_STATUS :'||l_invalid_size||'(30)') MARITAL_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_INDICATOR)),'x')),30) - 30,0,' ','MINORITY_OWNED_INDICATOR :'||l_invalid_size||'(30)') MINORITY_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_TYPE)),'x')),30) - 30,0,' ','MINORITY_OWNED_TYPE :'||l_invalid_size||'(30)') MINORITY_OWNED_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_TYPE)),'x')),30) - 30,0,' ','ORGANIZATION_TYPE :'||l_invalid_size||'(30)') ORGANIZATION_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OUT_OF_BUSINESS_INDICATOR)),'x')),30) - 30,0,' ','OUT_OF_BUSINESS_INDICATOR :'||l_invalid_size||'(30)') OUT_OF_BUSINESS_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,' ','PERSON_ACADEMIC_TITLE :'||l_invalid_size||'(30)') PERSON_ACADEMIC_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_FIRST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_FIRST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_LAST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_LAST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,' ','MIDDLE_NAME_PHONETIC :'||l_invalid_size||'(60)') MIDDLE_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),320) - 320,0,' ','PERSON_NAME_PHONETIC :'||l_invalid_size||'(320)') PERSON_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,' ','PERSON_PREVIOUS_TITLE_NAME :'||l_invalid_size||'(150)') PERSON_PREVIOUS_TITLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PLACE_OF_BIRTH)),'x')),60) - 60,0,' ','PLACE_OF_BIRTH :'||l_invalid_size||'(60)') PLACE_OF_BIRTH,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_NAME)),'x')),240) - 240,0,' ','PRINCIPAL_NAME :'||l_invalid_size||'(240)') PRINCIPAL_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_TITLE)),'x')),240) - 240,0,' ','PRINCIPAL_TITLE :'||l_invalid_size||'(240)') PRINCIPAL_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PUBLIC_PRIVATE_OWNERSHIP_FLAG)),'x')),1) - 1,0,' ','PUBLIC_PRIVATE_OWNERSHIP_FLAG :'||l_invalid_size||'(1)') PUBLIC_PRIVATE_OWNERSHIP_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,' ','RENT_OWNED_INDICATOR :'||l_invalid_size||'(30)') RENT_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SMALL_BUSINESS_INDICATOR)),'x')),30) - 30,0,' ','SMALL_BUSINESS_INDICATOR :'||l_invalid_size||'(30)') SMALL_BUSINESS_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_ID)),'x')),60) - 60,0,' ','TAX_ID :'||l_invalid_size||'(60)') TAX_ID,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(WOMAN_OWNED_INDICATOR)),'x')),30) - 30,0,' ',' WOMAN_OWNED_INDICATOR :'||l_invalid_size||'(30)') WOMAN_OWNED_INDICATOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE11)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE11 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORGANIZATION_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORGANIZATION_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE1)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE1 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE2)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE2 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE3)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE3 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE4)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE4 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE5)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE5 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE6)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE6 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE7)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE7 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE8)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE8 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE9)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE9 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE10)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE10 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE13)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE13 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE14)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE14 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE15)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE15 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE12)),'x')),150) - 150,0,' ','ORG_CONTACT_ATTRIBUTE12 :'||l_invalid_size||'(150)') ORG_CONTACT_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE1 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE2 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE3 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE4 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE5 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE6 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE7 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE8 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE9 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE10 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE11 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE12 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE13 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE14 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE15 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,' ','FAX_COUNTRY_CODE :'||l_invalid_size||'(10)') FAX_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,' ','FAX_AREA_CODE :'||l_invalid_size||'(10)') FAX_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,' ','FAX_NUMBER :'||l_invalid_size||'(40)') FAX_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ORG_CONTACT_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ORG_CONTACT_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ADDRESS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ADDRESS_ATTRIBUTE_CATEGORY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CONTROL_YEAR,' ','x'))),'0123456789.','           x'))),0),0,' ','CONTROL_YEAR :'||l_invalid_number) CONTROL_YEAR,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DEBARMENTS_COUNT,' ','x'))),'0123456789.','           x'))),0),0,' ','DEBARMENTS_COUNT :'||l_invalid_number) DEBARMENTS_COUNT,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,' ','HOUSEHOLD_SIZE :'||l_invalid_number) HOUSEHOLD_SIZE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','PERSONAL_INCOME :'||l_invalid_number) PERSONAL_INCOME,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,' ','NOTES :'||l_invalid_size||'(2000)') NOTES,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,' ','VEHICLE_RESPONSE_CODE :'||l_invalid_size||'(30)') VEHICLE_RESPONSE_CODE,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,' ','SALES_AGENT_EMAIL_ADDRESS:'||l_invalid_size||'(2000)') SALES_AGENT_EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) -240,0,' ','ORIG_SYSTEM_REFERENCE :'||l_invalid_size
||'(240)') ORIG_SYSTEM_REFERENCE
 FROM AMS_HZ_B2B_MAPPING_V
 WHERE IMPORT_LIST_HEADER_ID =  p_import_list_header_id
  and load_status = 'ERROR'
   AND
 (
 DECODE(GREATEST(lengthb(LTRIM(RTRIM(PARTY_NAME))),255) - 255,0,'OK','NO') = 'NO'
or
 DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FISCAL_YEAREND_MONTH)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DUNS_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(EMPLOYEES_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(YEAR_ESTABLISHED,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CURR_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(NEXT_FY_POTENTIAL_REVENUE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LINE_OF_BUSINESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CEO_NAME)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JOB_TITLE)),'x')),100) - 100,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TIME_ZONE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECISION_MAKER_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(SIC_CODE,'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(SIC_CODE_TYPE,'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(ANALYSIS_FY,'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GSA_INDICATOR_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MISSION_STATEMENT)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_NAME_PHONETIC)),'x')),320) - 320,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CATEGORY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(JGZZ_FISCAL_CODE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_TYPE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RURAL_ROUTE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BRANCH_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEAD_OF_HOUSEHOLD_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PUBLIC_PRIVATE_OWNERSHIP_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_LINE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(BUSINESS_SCOPE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CHIEF_EXECUTIVE_TITLE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_NAME)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PRINCIPAL_TITLE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONGRESSIONAL_DISTRICT_CODE)),'x')),2) - 2,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CORPORATION_CLASS)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PLACE_OF_BIRTH)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_ID)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(WOMAN_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SMALL_BUSINESS_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MINORITY_OWNED_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(OUT_OF_BUSINESS_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LABOR_SURPLUS_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCAL_ACTIVITY_CODE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(IMPORT_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DISADVANTAGED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DEPARTMENT_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CREDIT_SCORE_COMMENTARY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EXPORT_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_COMMENTARY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAILURE_SCORE_OVERRIDE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DB_RATING)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(GLOBAL_FAILURE_SCORE)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ENQUIRY_DUNS)),'x')),15) - 15,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORGANIZATION_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORG_CONTACT_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(CONTROL_YEAR,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(DEBARMENTS_COUNT,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,'OK','NO') = 'NO'
 );




-- Cursor for B2C party type

cursor b2c is
 SELECT
 IMPORT_SOURCE_LINE_ID,
 import_list_header_id,
 per_imp_xml_element_id,
 add_imp_xml_element_id,
 cp_imp_xml_element_id,
 em_imp_xml_element_id,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,' ','ADDRESS1 :'||l_invalid_size||'(240)') ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,' ','ADDRESS2 :'||l_invalid_size||'(240)') ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,' ','ADDRESS3 :'||l_invalid_size||'(240)') ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,' ','ADDRESS4 :'||l_invalid_size||'(240)') ADDRESS4,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(PERSON_LAST_NAME))),50) - 50,0,' ','PERSON_LAST_NAME :'||decode(nvl(PERSON_LAST_NAME,'x'),'x',l_null_value,l_invalid_size)||'(50)') PERSON_LAST_NAME,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(PERSON_FIRST_NAME))),40) - 40,0,' ','PERSON_FIRST_NAME :'||decode(nvl(PERSON_FIRST_NAME,'x'),'x',l_null_value,l_invalid_size)||'(40)') PERSON_FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,' ','PERSON_NAME_PREFIX :'||l_invalid_size||'(30)') PERSON_NAME_PREFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,' ','PERSON_MIDDLE_NAME :'||l_invalid_size||'(60)') PERSON_MIDDLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,' ','PERSON_NAME_SUFFIX :'||l_invalid_size||'(30)') PERSON_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,' ','CITY :'||l_invalid_size||'(60)') CITY ,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALUTATION)),'x')),60) - 60,0,' ','SALUTATION :'||l_invalid_size||'(60)') SALUTATION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,' ','POSTAL_CODE :'||l_invalid_size||'(60)') POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,' ','STATE :'||l_invalid_size||'(60)') STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,' ','PROVINCE :'||l_invalid_size||'(60)') PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,' ','COUNTY :'||l_invalid_size||'(60)') COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,' ','COUNTRY :'||l_invalid_size||'(60)') COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,' ','EMAIL_ADDRESS :'||l_invalid_size||'(240)') EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,' ','PHONE_COUNTRY_CODE :'||l_invalid_size||'(30)') PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,' ','PHONE_AREA_CODE :'||l_invalid_size||'(10)') PHONE_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,' ','PHONE_NUMBER :'||l_invalid_size||'(25)') PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,' ','PHONE_EXTENTION :'||l_invalid_size||'(20)') PHONE_EXTENTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,' ','identifying_address_flag :'||l_invalid_size||'(1)') identifying_address_flag,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,' ','ADDRESS_LINES_PHONETIC :'||l_invalid_size||'(560)') ADDRESS_LINES_PHONETIC,
-- bug 4641591: columns obsolete
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,' ','PO_BOX_NUMBER :'||l_invalid_size||'(50)') PO_BOX_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,' ','FLOOR :'||l_invalid_size||'(50)') FLOOR,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,' ','HOUSE_NUMBER :'||l_invalid_size||'(50)') HOUSE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),10) - 10,0,' ','POSTAL_PLUS4_CODE :'||l_invalid_size||'(10)') POSTAL_PLUS4_CODE,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,' ','STREET_SUFFIX :'||l_invalid_size||'(50)') STREET_SUFFIX,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,' ','STREET :'||l_invalid_size||'(50)') STREET,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,' ','STREET_NUMBER :'||l_invalid_size||'(50)') STREET_NUMBER,
-- DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SUITE)),'x')),50) - 50,0,' ','SUITE :'||l_invalid_size||'(50)') SUITE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,' ','PARTY_ID :'||l_invalid_number) party_id,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URL)),'x')),2000) - 2000,0,' ','URL :'||l_invalid_size||'(2000)') URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,' ','DECLARED_ETHNICITY :'||l_invalid_size||'(60)') DECLARED_ETHNICITY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION:'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HEAD_OF_HOUSEHOLD_FLAG)),'x')),1) - 1,0,' ','HEAD_OF_HOUSEHOLD_FLAG :'||l_invalid_size||'(1)') HEAD_OF_HOUSEHOLD_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS :'||l_invalid_size||'(240)') PERSON_KNOWN_AS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS2 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS3 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS4 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,' ','PERSON_KNOWN_AS5 :'||l_invalid_size||'(240)') PERSON_KNOWN_AS5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,' ','LOCATION_DIRECTIONS:'||l_invalid_size||'(640)') LOCATION_DIRECTIONS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,' ','MARITAL_STATUS :'||l_invalid_size||'(30)') MARITAL_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,' ','PERSON_ACADEMIC_TITLE :'||l_invalid_size||'(30)') PERSON_ACADEMIC_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_FIRST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_FIRST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,' ','PERSON_LAST_NAME_PHONETIC :'||l_invalid_size||'(60)') PERSON_LAST_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,' ','MIDDLE_NAME_PHONETIC :'||l_invalid_size||'(60)') MIDDLE_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),320) - 320,0,' ','PERSON_NAME_PHONETIC :'||l_invalid_size||'(320)') PERSON_NAME_PHONETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,' ','PERSON_PREVIOUS_TITLE_NAME :'||l_invalid_size||'(150)') PERSON_PREVIOUS_TITLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE1)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE1 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE2)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE2 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE3)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE3 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE4)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE4 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE5)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE5 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE6)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE6 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE7)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE7 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE8)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE8 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE9)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE9 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE10)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE10 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE11)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE11 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE12)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE12 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE13)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE13 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE14)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE14 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE15)),'x')),150) - 150,0,' ','PERSON_ATTRIBUTE15 :'||l_invalid_size||'(150)') PERSON_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE1 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE2 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE3 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE4 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE5 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE5,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE6 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE6,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE7 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE7,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE8 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE8,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE9 : '||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE9,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE10 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE10,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE11 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE11,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE12 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE12,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE13 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE13,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE14 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE14,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,' ','ADDRESS_ATTRIBUTE15 :'||l_invalid_size||'(150)') ADDRESS_ATTRIBUTE15,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,' ','FAX_COUNTRY_CODE :'||l_invalid_size||'(10)') FAX_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,' ','FAX_AREA_CODE :'||l_invalid_size||'(10)') FAX_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,' ','FAX_NUMBER :'||l_invalid_size||'(40)') FAX_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','ADDRESS_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') ADDRESS_ATTRIBUTE_CATEGORY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,' ','PERSON_ATTRIBUTE_CATEGORY :'||l_invalid_size||'(30)') PERSON_ATTRIBUTE_CATEGORY,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,' ','HOUSEHOLD_SIZE :'||l_invalid_number) HOUSEHOLD_SIZE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','PERSONAL_INCOME :'||l_invalid_number) PERSONAL_INCOME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,' ','DESCRIPTION:'||l_invalid_size||'(2000)') DESCRIPTION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,' ','SHORT_DESCRIPTION :'||l_invalid_size||'(240)') SHORT_DESCRIPTION,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,' ','NOTES :'||l_invalid_size||'(2000)') NOTES,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,' ','VEHICLE_RESPONSE_CODE :'||l_invalid_size||'(30)') VEHICLE_RESPONSE_CODE,
DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,' ','SALES_AGENT_EMAIL_ADDRESS:'||l_invalid_size||'(2000)') SALES_AGENT_EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) -240,0,' ','ORIG_SYSTEM_REFERENCE :'||l_invalid_size
||'(240)') ORIG_SYSTEM_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),60) - 60,0,' ','TAX_REFERENCE :'||l_invalid_size||'(60)') TAX_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,' ','RENT_OWNED_INDICATOR :'||l_invalid_size||'(30)') RENT_OWNED_INDICATOR
 FROM AMS_HZ_B2C_MAPPING_V
 WHERE IMPORT_LIST_HEADER_ID =  p_import_list_header_id
  and load_status = 'ERROR'
   AND
 (
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(party_id,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PREFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_MIDDLE_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SALUTATION)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_COUNTRY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PHONE_EXTENTION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(identifying_address_flag)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_LINES_PHONETIC)),'x')),560) - 560,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PO_BOX_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FLOOR)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(HOUSE_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(POSTAL_PLUS4_CODE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
/*
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_SUFFIX)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(STREET_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
*/
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_KNOWN_AS5)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(SHORT_DESCRIPTION)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_NAME_PHONETIC)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(LOCATION_DIRECTIONS)),'x')),640) - 640,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_FIRST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_LAST_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MIDDLE_NAME_PHONETIC)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PLACE_OF_BIRTH)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_PREVIOUS_TITLE_NAME)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(MARITAL_STATUS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ACADEMIC_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DECLARED_ETHNICITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(DESCRIPTION)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE1)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE2)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE3)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE4)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE5)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE6)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE7)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE8)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE9)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE10)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE11)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE12)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE13)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE14)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE15)),'x')),150) - 150,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(PERSON_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ADDRESS_ATTRIBUTE_CATEGORY)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_COUNTRY_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(FAX_NUMBER)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(HOUSEHOLD_SIZE,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(PERSONAL_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(NOTES)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(VEHICLE_RESPONSE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(SALES_AGENT_EMAIL_ADDRESS)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(LENGTH(nvl(LTRIM(RTRIM(ORIG_SYSTEM_REFERENCE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(TAX_REFERENCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(RENT_OWNED_INDICATOR)),'x')),30) - 30,0,'OK','NO') = 'NO'
 );


-- Cursor to check if it's B2B or B2C party type.

cursor b2borb2c is
          select import_type  from ams_imp_list_headers_all
          where  import_list_header_id = p_import_list_header_id;


begin

        IF p_import_list_header_id IS NULL THEN
                RAISE FND_API.G_EXC_ERROR;
        END IF;
    p_return_status := FND_API.G_RET_STS_SUCCESS;

    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_DATATYPE_ERROR_CHK');
    l_invalid_number := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_SIZE_ERROR_CHK');
    l_invalid_size := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_NULL_ERROR_CHK');
    l_null_value := FND_MESSAGE.get;

        OPEN b2borb2c;
        FETCH b2borb2c into x_b2b;
        close b2borb2c;
    OPEN c_lead_batch_id;
    FETCH c_lead_batch_id into l_batch_id;
    CLOSE c_lead_batch_id;

    if x_b2b = 'B2B' then
    	OPEN b2b;
     LOOP
      FETCH b2b  INTO
        l_import_source_line_id,
        l_import_list_header_id,
        l_cust_b2b_rec.org_imp_xml_element_id,
	l_cust_b2b_rec.add_imp_xml_element_id,
	l_cust_b2b_rec.ocont_imp_xml_element_id,
	l_cust_b2b_rec.cp_imp_xml_element_id,
	l_cust_b2b_rec.em_imp_xml_element_id,
	l_cust_b2b_rec.PARTY_NAME,
	l_cust_b2b_rec.FISCAL_YEAREND_MONTH,
	l_cust_b2b_rec.DUNS_NUMBER,
	l_cust_b2b_rec.EMPLOYEES_TOTAL,
	l_cust_b2b_rec.LINE_OF_BUSINESS,
	l_cust_b2b_rec.ADDRESS1,
	l_cust_b2b_rec.ADDRESS2,
	l_cust_b2b_rec.ADDRESS3,
	l_cust_b2b_rec.ADDRESS4,
	l_cust_b2b_rec.YEAR_ESTABLISHED,
	l_cust_b2b_rec.TAX_REFERENCE,
	l_cust_b2b_rec.CEO_NAME,
	l_cust_b2b_rec.PERSON_LAST_NAME,
	l_cust_b2b_rec.PERSON_FIRST_NAME,
	l_cust_b2b_rec.PERSON_NAME_PREFIX,
	l_cust_b2b_rec.JOB_TITLE,
	l_cust_b2b_rec.PERSON_MIDDLE_NAME,
	l_cust_b2b_rec.PERSON_NAME_SUFFIX,
	l_cust_b2b_rec.CITY,
	l_cust_b2b_rec.POSTAL_CODE,
	l_cust_b2b_rec.STATE,
	l_cust_b2b_rec.PROVINCE,
	l_cust_b2b_rec.COUNTY,
	l_cust_b2b_rec.COUNTRY,
	l_cust_b2b_rec.EMAIL_ADDRESS,
	l_cust_b2b_rec.PHONE_COUNTRY_CODE,
	l_cust_b2b_rec.PHONE_AREA_CODE,
	l_cust_b2b_rec.PHONE_NUMBER,
	l_cust_b2b_rec.PHONE_EXTENSION,
	l_cust_b2b_rec.DEPARTMENT,
	l_cust_b2b_rec.DECISION_MAKER_FLAG,
	l_cust_b2b_rec.SIC_CODE,
	l_cust_b2b_rec.SIC_CODE_TYPE,
	l_cust_b2b_rec.ANALYSIS_FY,
	l_cust_b2b_rec.CURR_FY_POTENTIAL_REVENUE,
	l_cust_b2b_rec.NEXT_FY_POTENTIAL_REVENUE,
	l_cust_b2b_rec.GSA_INDICATOR_FLAG,
	l_cust_b2b_rec.identifying_address_flag,
	l_cust_b2b_rec.MISSION_STATEMENT,
	l_cust_b2b_rec.ORGANIZATION_NAME_PHONETIC,
	l_cust_b2b_rec.CATEGORY_CODE,
	l_cust_b2b_rec.JGZZ_FISCAL_CODE,
	l_cust_b2b_rec.ADDRESS_LINES_PHONETIC,
-- bug 4641591: columns obsolete
--	l_cust_b2b_rec.PO_BOX_NUMBER,
--	l_cust_b2b_rec.FLOOR,
--	l_cust_b2b_rec.HOUSE_NUMBER,
	l_cust_b2b_rec.POSTAL_PLUS4_CODE,
--	l_cust_b2b_rec.STREET_SUFFIX,
--	l_cust_b2b_rec.STREET,
--	l_cust_b2b_rec.STREET_NUMBER,
--	l_cust_b2b_rec.SUITE,
	l_cust_b2b_rec.party_id,
	l_cust_b2b_rec.ORGANIZATION_URL,
	l_cust_b2b_rec.BRANCH_FLAG,
	l_cust_b2b_rec.BUSINESS_LINE,
	l_cust_b2b_rec.BUSINESS_SCOPE,
	l_cust_b2b_rec.CHIEF_EXECUTIVE_TITLE,
	l_cust_b2b_rec.CONGRESSIONAL_DISTRICT_CODE,
	l_cust_b2b_rec.CORPORATION_CLASS,
	l_cust_b2b_rec.CREDIT_SCORE,
	l_cust_b2b_rec.CREDIT_SCORE_COMMENTARY,
	l_cust_b2b_rec.DB_RATING,
	l_cust_b2b_rec.DECLARED_ETHNICITY,
	l_cust_b2b_rec.DEPARTMENT_INDICATOR,
	l_cust_b2b_rec.DESCRIPTION,
	l_cust_b2b_rec.DISADVANTAGED_INDICATOR,
	l_cust_b2b_rec.ENQUIRY_DUNS,
	l_cust_b2b_rec.EXPORT_INDICATOR,
	l_cust_b2b_rec.FAILURE_SCORE,
	l_cust_b2b_rec.FAILURE_SCORE_COMMENTARY,
	l_cust_b2b_rec.FAILURE_SCORE_OVERRIDE_CODE,
	l_cust_b2b_rec.GLOBAL_FAILURE_SCORE,
	l_cust_b2b_rec.HEADQUARTER_BRANCH_INDICATOR,
	l_cust_b2b_rec.HEAD_OF_HOUSEHOLD_FLAG,
	l_cust_b2b_rec.IMPORT_INDICATOR,
	l_cust_b2b_rec.ORGANIZATION_KNOWN_AS,
	l_cust_b2b_rec.ORGANIZATION_KNOWN_AS2,
	l_cust_b2b_rec.ORGANIZATION_KNOWN_AS3,
	l_cust_b2b_rec.ORGANIZATION_KNOWN_AS4,
	l_cust_b2b_rec.ORGANIZATION_KNOWN_AS5,
	l_cust_b2b_rec.PERSON_KNOWN_AS,
	l_cust_b2b_rec.PERSON_KNOWN_AS2,
	l_cust_b2b_rec.PERSON_KNOWN_AS3,
	l_cust_b2b_rec.PERSON_KNOWN_AS4,
	l_cust_b2b_rec.PERSON_KNOWN_AS5,
	l_cust_b2b_rec.LABOR_SURPLUS_INDICATOR,
	l_cust_b2b_rec.LOCAL_ACTIVITY_CODE,
	l_cust_b2b_rec.LOCAL_ACTIVITY_CODE_TYPE,
	l_cust_b2b_rec.LOCATION_DIRECTIONS,
	l_cust_b2b_rec.MARITAL_STATUS,
	l_cust_b2b_rec.MINORITY_OWNED_INDICATOR,
	l_cust_b2b_rec.MINORITY_OWNED_TYPE,
	l_cust_b2b_rec.ORGANIZATION_TYPE,
	l_cust_b2b_rec.OUT_OF_BUSINESS_INDICATOR,
	l_cust_b2b_rec.PERSON_ACADEMIC_TITLE,
	l_cust_b2b_rec.PERSON_FIRST_NAME_PHONETIC,
	l_cust_b2b_rec.PERSON_LAST_NAME_PHONETIC,
	l_cust_b2b_rec.MIDDLE_NAME_PHONETIC,
	l_cust_b2b_rec.PERSON_NAME_PHONETIC,
	l_cust_b2b_rec.PERSON_PREVIOUS_TITLE_NAME,
	l_cust_b2b_rec.PLACE_OF_BIRTH,
	l_cust_b2b_rec.PRINCIPAL_NAME,
	l_cust_b2b_rec.PRINCIPAL_TITLE,
	l_cust_b2b_rec.PUBLIC_PRIVATE_OWNERSHIP_FLAG,
	l_cust_b2b_rec.RENT_OWNED_INDICATOR,
	-- l_cust_b2b_rec.SECOND_TITLE,
	l_cust_b2b_rec.SHORT_DESCRIPTION,
	l_cust_b2b_rec.SMALL_BUSINESS_INDICATOR,
	l_cust_b2b_rec.TAX_ID,
	l_cust_b2b_rec.WOMAN_OWNED_INDICATOR,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE1,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE2,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE3,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE4,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE5,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE6,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE7,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE8,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE9,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE10,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE11,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE12,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE13,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE14,
	l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE15,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE1,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE2,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE3,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE4,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE5,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE6,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE7,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE8,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE9,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE10,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE11,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE12,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE13,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE14,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE15,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE1,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE2,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE3,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE4,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE5,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE6,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE7,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE8,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE9,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE10,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE11,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE12,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE13,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE14,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE15,
	l_cust_b2b_rec.FAX_COUNTRY_CODE,
	l_cust_b2b_rec.FAX_AREA_CODE,
	l_cust_b2b_rec.FAX_NUMBER,
	l_cust_b2b_rec.ORG_ATTRIBUTE_CATEGORY,
	-- l_cust_b2b_rec.PERSON_ATTRIBUTE_CATEGORY,
	l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE_CATEGORY,
	l_cust_b2b_rec.ADDRESS_ATTRIBUTE_CATEGORY,
	l_cust_b2b_rec.CONTROL_YEAR,
	l_cust_b2b_rec.DEBARMENTS_COUNT,
	l_cust_b2b_rec.HOUSEHOLD_SIZE,
	l_cust_b2b_rec.PERSONAL_INCOME,
	l_cust_b2b_rec.NOTES,
	l_cust_b2b_rec.VEHICLE_RESPONSE_CODE,
	l_cust_b2b_rec.SALES_AGENT_EMAIL_ID,
	l_cust_b2b_rec.orig_system_reference;


      EXIT WHEN b2b%NOTFOUND;

       if trim(l_cust_b2b_rec.PARTY_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'PARTY_NAME', l_cust_b2b_rec.PARTY_NAME);
       end if;

       if trim(l_cust_b2b_rec.FISCAL_YEAREND_MONTH) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'FISCAL_YEAREND_MONTH', l_cust_b2b_rec.FISCAL_YEAREND_MONTH);
       end if;
       if trim(l_cust_b2b_rec.DUNS_NUMBER) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'DUNS_NUMBER', l_cust_b2b_rec.DUNS_NUMBER);
       end if;
       if trim(l_cust_b2b_rec.EMPLOYEES_TOTAL) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'EMPLOYEES_TOTAL', l_cust_b2b_rec.EMPLOYEES_TOTAL);
       end if;
       if trim(l_cust_b2b_rec.LINE_OF_BUSINESS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'LINE_OF_BUSINESS', l_cust_b2b_rec.LINE_OF_BUSINESS);
       end if;
       if trim(l_cust_b2b_rec.ORIG_SYSTEM_REFERENCE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORIG_SYSTEM_REFERENCE', l_cust_b2b_rec.ORIG_SYSTEM_REFERENCE);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS1) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'ADDRESS1', l_cust_b2b_rec.ADDRESS1);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS2) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'ADDRESS2', l_cust_b2b_rec.ADDRESS2);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS3) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'ADDRESS3', l_cust_b2b_rec.ADDRESS3);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS4) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'ADDRESS4', l_cust_b2b_rec.ADDRESS4);
       end if;
       if trim(l_cust_b2b_rec.YEAR_ESTABLISHED) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'YEAR_ESTABLISHED', l_cust_b2b_rec.YEAR_ESTABLISHED);
       end if;
       if trim(l_cust_b2b_rec.TAX_REFERENCE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'TAX_REFERENCE', l_cust_b2b_rec.TAX_REFERENCE);
       end if;
       if trim(l_cust_b2b_rec.CEO_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CEO_NAME', l_cust_b2b_rec.CEO_NAME);
       end if;

       if trim(l_cust_b2b_rec.PERSON_LAST_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_LAST_NAME', l_cust_b2b_rec.PERSON_LAST_NAME);
       end if;
       if trim(l_cust_b2b_rec.PERSON_FIRST_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_FIRST_NAME', l_cust_b2b_rec.PERSON_FIRST_NAME);
       end if;
       if trim(l_cust_b2b_rec.PERSON_NAME_PREFIX) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_NAME_PREFIX', l_cust_b2b_rec.PERSON_NAME_PREFIX);
       end if;
       if trim(l_cust_b2b_rec.JOB_TITLE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'JOB_TITLE', l_cust_b2b_rec.JOB_TITLE);
       end if;
       if trim(l_cust_b2b_rec.PERSON_MIDDLE_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_MIDDLE_NAME', l_cust_b2b_rec.PERSON_MIDDLE_NAME);
       end if;
       if trim(l_cust_b2b_rec.PERSON_NAME_SUFFIX) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_NAME_SUFFIX', l_cust_b2b_rec.PERSON_NAME_SUFFIX);
       end if;
       if trim(l_cust_b2b_rec.CITY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'CITY', l_cust_b2b_rec.CITY);
       end if;
       if trim(l_cust_b2b_rec.POSTAL_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'POSTAL_CODE', l_cust_b2b_rec.POSTAL_CODE);
       end if;
       if trim(l_cust_b2b_rec.STATE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'STATE', l_cust_b2b_rec.STATE);
       end if;
       if trim(l_cust_b2b_rec.PROVINCE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'PROVINCE', l_cust_b2b_rec.PROVINCE);
       end if;
       if trim(l_cust_b2b_rec.COUNTY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'COUNTY', l_cust_b2b_rec.COUNTY);
       end if;

       if trim(l_cust_b2b_rec.COUNTRY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'COUNTRY', l_cust_b2b_rec.COUNTRY);
       end if;
       if trim(l_cust_b2b_rec.EMAIL_ADDRESS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.em_imp_xml_element_id,
			       'EMAIL_ADDRESS', l_cust_b2b_rec.EMAIL_ADDRESS);
       end if;
       if trim(l_cust_b2b_rec.PHONE_COUNTRY_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.cp_imp_xml_element_id,
			       'PHONE_COUNTRY_CODE', l_cust_b2b_rec.PHONE_COUNTRY_CODE);
       end if;
       if trim(l_cust_b2b_rec.PHONE_AREA_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.cp_imp_xml_element_id,
			       'PHONE_AREA_CODE', l_cust_b2b_rec.PHONE_AREA_CODE);
       end if;
       if trim(l_cust_b2b_rec.PHONE_NUMBER) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.cp_imp_xml_element_id,
			       'PHONE_NUMBER', l_cust_b2b_rec.PHONE_NUMBER);
       end if;
       if trim(l_cust_b2b_rec.PHONE_EXTENSION) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.cp_imp_xml_element_id,
			       'PHONE_EXTENSION', l_cust_b2b_rec.PHONE_EXTENSION);
       end if;
       if trim(l_cust_b2b_rec.DEPARTMENT) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'DEPARTMENT', l_cust_b2b_rec.DEPARTMENT);
       end if;
       if trim(l_cust_b2b_rec.DECISION_MAKER_FLAG) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'DECISION_MAKER_FLAG', l_cust_b2b_rec.DECISION_MAKER_FLAG);
       end if;
       if trim(l_cust_b2b_rec.SIC_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'SIC_CODE', l_cust_b2b_rec.SIC_CODE);
       end if;
       if trim(l_cust_b2b_rec.SIC_CODE_TYPE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'SIC_CODE_TYPE', l_cust_b2b_rec.SIC_CODE_TYPE);
       end if;
       if trim(l_cust_b2b_rec.ANALYSIS_FY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ANALYSIS_FY', l_cust_b2b_rec.ANALYSIS_FY);
       end if;

       if trim(l_cust_b2b_rec.CURR_FY_POTENTIAL_REVENUE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CURR_FY_POTENTIAL_REVENUE', l_cust_b2b_rec.CURR_FY_POTENTIAL_REVENUE);
       end if;
       if trim(l_cust_b2b_rec.NEXT_FY_POTENTIAL_REVENUE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'NEXT_FY_POTENTIAL_REVENUE', l_cust_b2b_rec.NEXT_FY_POTENTIAL_REVENUE);
       end if;
       if trim(l_cust_b2b_rec.GSA_INDICATOR_FLAG) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'GSA_INDICATOR_FLAG', l_cust_b2b_rec.GSA_INDICATOR_FLAG);
       end if;
       if trim(l_cust_b2b_rec.identifying_address_flag) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'IDENTIFYING_ADDRESS_FLAG', l_cust_b2b_rec.IDENTIFYING_ADDRESS_FLAG);
       end if;
       if trim(l_cust_b2b_rec.MISSION_STATEMENT) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'MISSION_STATEMENT', l_cust_b2b_rec.MISSION_STATEMENT);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_NAME_PHONETIC) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_NAME_PHONETIC', l_cust_b2b_rec.ORGANIZATION_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2b_rec.CATEGORY_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CATEGORY_CODE', l_cust_b2b_rec.CATEGORY_CODE);
       end if;
       if trim(l_cust_b2b_rec.JGZZ_FISCAL_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'JGZZ_FISCAL_CODE', l_cust_b2b_rec.JGZZ_FISCAL_CODE);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_LINES_PHONETIC) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'ADDRESS_LINES_PHONETIC', l_cust_b2b_rec.ADDRESS_LINES_PHONETIC);
       end if;
/* -- bug 4641591: columns obsolete
       if trim(l_cust_b2b_rec.PO_BOX_NUMBER) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'PO_BOX_NUMBER', l_cust_b2b_rec.PO_BOX_NUMBER);
       end if;
       if trim(l_cust_b2b_rec.FLOOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'FLOOR', l_cust_b2b_rec.FLOOR);
       end if;

       if trim(l_cust_b2b_rec.HOUSE_NUMBER) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'HOUSE_NUMBER', l_cust_b2b_rec.HOUSE_NUMBER);
       end if;
*/
       if trim(l_cust_b2b_rec.POSTAL_PLUS4_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'POSTAL_PLUS4_CODE', l_cust_b2b_rec.POSTAL_PLUS4_CODE);
       end if;
/* -- bug 4641591: columns obsolete
       if trim(l_cust_b2b_rec.STREET_SUFFIX) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'STREET_SUFFIX', l_cust_b2b_rec.STREET_SUFFIX);
       end if;
       if trim(l_cust_b2b_rec.STREET) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'STREET', l_cust_b2b_rec.STREET);
       end if;
       if trim(l_cust_b2b_rec.STREET_NUMBER) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'STREET_NUMBER', l_cust_b2b_rec.STREET_NUMBER);
       end if;
       if trim(l_cust_b2b_rec.SUITE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'SUITE', l_cust_b2b_rec.SUITE);
       end if;
*/
       if trim(l_cust_b2b_rec.party_id) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'PARTY_ID', l_cust_b2b_rec.PARTY_ID);
       end if;

    -- **********************************
       if trim(l_cust_b2b_rec.ORGANIZATION_URL) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_URL', l_cust_b2b_rec.ORGANIZATION_URL);
       end if;
       if trim(l_cust_b2b_rec.BRANCH_FLAG) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'BRANCH_FLAG', l_cust_b2b_rec.BRANCH_FLAG);
       end if;
       if trim(l_cust_b2b_rec.BUSINESS_LINE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'BUSINESS_LINE', l_cust_b2b_rec.BUSINESS_LINE);
       end if;
       if trim(l_cust_b2b_rec.BUSINESS_SCOPE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'BUSINESS_SCOPE', l_cust_b2b_rec.BUSINESS_SCOPE);
       end if;
       if trim(l_cust_b2b_rec.CHIEF_EXECUTIVE_TITLE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CHIEF_EXECUTIVE_TITLE', l_cust_b2b_rec.CHIEF_EXECUTIVE_TITLE);
       end if;
       if trim(l_cust_b2b_rec.CONGRESSIONAL_DISTRICT_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CONGRESSIONAL_DISTRICT_CODE', l_cust_b2b_rec.CONGRESSIONAL_DISTRICT_CODE);
       end if;
       if trim(l_cust_b2b_rec.CORPORATION_CLASS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CORPORATION_CLASS', l_cust_b2b_rec.CORPORATION_CLASS);
       end if;
       if trim(l_cust_b2b_rec.CREDIT_SCORE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CREDIT_SCORE', l_cust_b2b_rec.CREDIT_SCORE);
       end if;
       if trim(l_cust_b2b_rec.CREDIT_SCORE_COMMENTARY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CREDIT_SCORE_COMMENTARY', l_cust_b2b_rec.CREDIT_SCORE_COMMENTARY);
       end if;
       if trim(l_cust_b2b_rec.DB_RATING) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'DB_RATING', l_cust_b2b_rec.DB_RATING);
       end if;
       if trim(l_cust_b2b_rec.DECLARED_ETHNICITY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'DECLARED_ETHNICITY', l_cust_b2b_rec.DECLARED_ETHNICITY);
       end if;
       if trim(l_cust_b2b_rec.DEPARTMENT_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'DEPARTMENT_INDICATOR', l_cust_b2b_rec.DEPARTMENT_INDICATOR);
       end if;
       if trim(l_cust_b2b_rec.DESCRIPTION) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'DESCRIPTION', l_cust_b2b_rec.DESCRIPTION);
       end if;
       if trim(l_cust_b2b_rec.DISADVANTAGED_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'DISADVANTAGED_INDICATOR', l_cust_b2b_rec.DISADVANTAGED_INDICATOR);
       end if;
       if trim(l_cust_b2b_rec.ENQUIRY_DUNS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ENQUIRY_DUNS', l_cust_b2b_rec.ENQUIRY_DUNS);
       end if;
       if trim(l_cust_b2b_rec.EXPORT_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'EXPORT_INDICATOR', l_cust_b2b_rec.EXPORT_INDICATOR);
       end if;
       if trim(l_cust_b2b_rec.FAILURE_SCORE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'FAILURE_SCORE', l_cust_b2b_rec.FAILURE_SCORE);
       end if;
       if trim(l_cust_b2b_rec.FAILURE_SCORE_COMMENTARY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'FAILURE_SCORE_COMMENTARY', l_cust_b2b_rec.FAILURE_SCORE_COMMENTARY);
       end if;
       if trim(l_cust_b2b_rec.FAILURE_SCORE_OVERRIDE_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'FAILURE_SCORE_OVERRIDE_CODE', l_cust_b2b_rec.FAILURE_SCORE_OVERRIDE_CODE);
       end if;
       if trim(l_cust_b2b_rec.GLOBAL_FAILURE_SCORE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'GLOBAL_FAILURE_SCORE', l_cust_b2b_rec.GLOBAL_FAILURE_SCORE);
       end if;
       if trim(l_cust_b2b_rec.HEADQUARTER_BRANCH_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'HEADQUARTER_BRANCH_INDICATOR', l_cust_b2b_rec.HEADQUARTER_BRANCH_INDICATOR);
       end if;
       if trim(l_cust_b2b_rec.HEAD_OF_HOUSEHOLD_FLAG) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'HEAD_OF_HOUSEHOLD_FLAG', l_cust_b2b_rec.HEAD_OF_HOUSEHOLD_FLAG);
       end if;
       if trim(l_cust_b2b_rec.IMPORT_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'IMPORT_INDICATOR', l_cust_b2b_rec.IMPORT_INDICATOR);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_KNOWN_AS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_KNOWN_AS', l_cust_b2b_rec.ORGANIZATION_KNOWN_AS);
       end if;
              if trim(l_cust_b2b_rec.ORGANIZATION_KNOWN_AS2) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_KNOWN_AS2', l_cust_b2b_rec.ORGANIZATION_KNOWN_AS2);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_KNOWN_AS3) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_KNOWN_AS3', l_cust_b2b_rec.ORGANIZATION_KNOWN_AS3);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_KNOWN_AS4) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_KNOWN_AS4', l_cust_b2b_rec.ORGANIZATION_KNOWN_AS4);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_KNOWN_AS5) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_KNOWN_AS5', l_cust_b2b_rec.ORGANIZATION_KNOWN_AS5);
       end if;

       if trim(l_cust_b2b_rec.PERSON_KNOWN_AS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_KNOWN_AS', l_cust_b2b_rec.PERSON_KNOWN_AS);
       end if;
              if trim(l_cust_b2b_rec.PERSON_KNOWN_AS2) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_KNOWN_AS2', l_cust_b2b_rec.PERSON_KNOWN_AS2);
       end if;
              if trim(l_cust_b2b_rec.PERSON_KNOWN_AS3) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_KNOWN_AS3', l_cust_b2b_rec.PERSON_KNOWN_AS3);
       end if;
              if trim(l_cust_b2b_rec.PERSON_KNOWN_AS4) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_KNOWN_AS4', l_cust_b2b_rec.PERSON_KNOWN_AS4);
       end if;
              if trim(l_cust_b2b_rec.PERSON_KNOWN_AS5) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_KNOWN_AS5', l_cust_b2b_rec.PERSON_KNOWN_AS5);
       end if;
       if trim(l_cust_b2b_rec.LABOR_SURPLUS_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'LABOR_SURPLUS_INDICATOR', l_cust_b2b_rec.LABOR_SURPLUS_INDICATOR);
       end if;
       if trim(l_cust_b2b_rec.LOCAL_ACTIVITY_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'LOCAL_ACTIVITY_CODE', l_cust_b2b_rec.LOCAL_ACTIVITY_CODE);
       end if;
       if trim(l_cust_b2b_rec.LOCAL_ACTIVITY_CODE_TYPE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'LOCAL_ACTIVITY_CODE_TYPE', l_cust_b2b_rec.LOCAL_ACTIVITY_CODE_TYPE);
       end if;
       if trim(l_cust_b2b_rec.LOCATION_DIRECTIONS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'LOCATION_DIRECTIONS', l_cust_b2b_rec.LOCATION_DIRECTIONS);
       end if;
       if trim(l_cust_b2b_rec.MARITAL_STATUS) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'MARITAL_STATUS', l_cust_b2b_rec.MARITAL_STATUS);
       end if;

       if trim(l_cust_b2b_rec.MINORITY_OWNED_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'MINORITY_OWNED_INDICATOR', l_cust_b2b_rec.MINORITY_OWNED_INDICATOR);
       end if;

       if trim(l_cust_b2b_rec.MINORITY_OWNED_TYPE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'MINORITY_OWNED_TYPE', l_cust_b2b_rec.MINORITY_OWNED_TYPE);
       end if;

       if trim(l_cust_b2b_rec.ORGANIZATION_TYPE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_TYPE', l_cust_b2b_rec.ORGANIZATION_TYPE);
       end if;

       if trim(l_cust_b2b_rec.OUT_OF_BUSINESS_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'OUT_OF_BUSINESS_INDICATOR', l_cust_b2b_rec.OUT_OF_BUSINESS_INDICATOR);
       end if;

       if trim(l_cust_b2b_rec.PERSON_ACADEMIC_TITLE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_ACADEMIC_TITLE', l_cust_b2b_rec.PERSON_ACADEMIC_TITLE);
       end if;
       if trim(l_cust_b2b_rec.PERSON_FIRST_NAME_PHONETIC) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_FIRST_NAME_PHONETIC', l_cust_b2b_rec.PERSON_FIRST_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2b_rec.PERSON_LAST_NAME_PHONETIC) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_LAST_NAME_PHONETIC', l_cust_b2b_rec.PERSON_LAST_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2b_rec.MIDDLE_NAME_PHONETIC) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'MIDDLE_NAME_PHONETIC', l_cust_b2b_rec.MIDDLE_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2b_rec.PERSON_NAME_PHONETIC) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_NAME_PHONETIC', l_cust_b2b_rec.PERSON_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2b_rec.PERSON_PREVIOUS_TITLE_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSON_PREVIOUS_TITLE_NAME', l_cust_b2b_rec.PERSON_PREVIOUS_TITLE_NAME);
       end if;
       if trim(l_cust_b2b_rec.PLACE_OF_BIRTH) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PLACE_OF_BIRTH', l_cust_b2b_rec.PLACE_OF_BIRTH);
       end if;
       if trim(l_cust_b2b_rec.PRINCIPAL_NAME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PRINCIPAL_NAME', l_cust_b2b_rec.PRINCIPAL_NAME);
       end if;
       if trim(l_cust_b2b_rec.PRINCIPAL_TITLE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PRINCIPAL_TITLE', l_cust_b2b_rec.PRINCIPAL_TITLE);
       end if;

       if trim(l_cust_b2b_rec.PUBLIC_PRIVATE_OWNERSHIP_FLAG) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'PUBLIC_PRIVATE_OWNERSHIP_FLAG', l_cust_b2b_rec.PUBLIC_PRIVATE_OWNERSHIP_FLAG);
       end if;
       if trim(l_cust_b2b_rec.RENT_OWNED_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'RENT_OWNED_INDICATOR', l_cust_b2b_rec.RENT_OWNED_INDICATOR);
       end if;

       if trim(l_cust_b2b_rec.SHORT_DESCRIPTION) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'SHORT_DESCRIPTION', l_cust_b2b_rec.SHORT_DESCRIPTION);
       end if;

       if trim(l_cust_b2b_rec.SMALL_BUSINESS_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'SMALL_BUSINESS_INDICATOR', l_cust_b2b_rec.SMALL_BUSINESS_INDICATOR);
       end if;

       if trim(l_cust_b2b_rec.TAX_ID) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'TAX_ID', l_cust_b2b_rec.TAX_ID);
       end if;

       if trim(l_cust_b2b_rec.WOMAN_OWNED_INDICATOR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'WOMAN_OWNED_INDICATOR', l_cust_b2b_rec.WOMAN_OWNED_INDICATOR);
       end if;

       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE1) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE1', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE1);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE2) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE2', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE2);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE3) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE3', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE3);
       end if;

       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE4) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE4', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE4);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE5) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE5', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE5);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE6) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE6', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE6);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE7) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE7', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE7);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE8) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE8', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE8);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE9) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE9', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTe9);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE10) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE10', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE10);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE11) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE11', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE11);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE12) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE12', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE12);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE13) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE13', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE13);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE14) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE14', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE14);
       end if;
       if trim(l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE15) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORGANIZATION_ATTRIBUTE15', l_cust_b2b_rec.ORGANIZATION_ATTRIBUTE15);
       end if;

       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE1) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE1', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE1);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE2) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE2', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE2);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE3) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE3', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE3);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE4) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE4', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE4);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE5) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE5', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE5);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE6) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE6', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE6);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE7) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE7', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE7);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE8) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE8', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE8);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE9) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE9', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE9);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE10) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE10', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE10);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE11) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE11', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE11);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE12) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE12', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE12);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE13) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE13', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE13);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE14) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE14', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE14);
       end if;
       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE15) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE15', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE15);
       end if;

       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE1) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE1', l_cust_b2b_rec.ADDRESS_ATTRIBUTE1);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE2) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE2', l_cust_b2b_rec.ADDRESS_ATTRIBUTE2);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE3) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE3', l_cust_b2b_rec.ADDRESS_ATTRIBUTE3);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE4) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE4', l_cust_b2b_rec.ADDRESS_ATTRIBUTE4);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE5) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE5', l_cust_b2b_rec.ADDRESS_ATTRIBUTE5);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE6) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE6', l_cust_b2b_rec.ADDRESS_ATTRIBUTE6);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE7) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE7', l_cust_b2b_rec.ADDRESS_ATTRIBUTE7);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE8) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE8', l_cust_b2b_rec.ADDRESS_ATTRIBUTE8);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE9) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE9', l_cust_b2b_rec.ADDRESS_ATTRIBUTE9);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE10) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE10', l_cust_b2b_rec.ADDRESS_ATTRIBUTE10);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE11) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE11', l_cust_b2b_rec.ADDRESS_ATTRIBUTE11);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE12) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE12', l_cust_b2b_rec.ADDRESS_ATTRIBUTE12);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE13) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE13', l_cust_b2b_rec.ADDRESS_ATTRIBUTE13);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE14) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE14', l_cust_b2b_rec.ADDRESS_ATTRIBUTE14);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE15) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE15', l_cust_b2b_rec.ADDRESS_ATTRIBUTE15);
       end if;

       if trim(l_cust_b2b_rec.FAX_COUNTRY_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.fx_imp_xml_element_id,
			       'FAX_COUNTRY_CODE', l_cust_b2b_rec.FAX_COUNTRY_CODE);
       end if;
       if trim(l_cust_b2b_rec.FAX_AREA_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.fx_imp_xml_element_id,
			       'FAX_AREA_CODE', l_cust_b2b_rec.FAX_AREA_CODE);
       end if;
       if trim(l_cust_b2b_rec.FAX_NUMBER) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.fx_imp_xml_element_id,
			       'FAX_NUMBER', l_cust_b2b_rec.FAX_NUMBER);
       end if;
       if trim(l_cust_b2b_rec.ORG_ATTRIBUTE_CATEGORY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'ORG_ATTRIBUTE_CATEGORY', l_cust_b2b_rec.ORG_ATTRIBUTE_CATEGORY);
       end if;

       if trim(l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE_CATEGORY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'ORG_CONTACT_ATTRIBUTE_CATEGORY', l_cust_b2b_rec.ORG_CONTACT_ATTRIBUTE_CATEGORY);
       end if;
       if trim(l_cust_b2b_rec.ADDRESS_ATTRIBUTE_CATEGORY) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.add_imp_xml_element_id,
			       'ADDRESS_ATTRIBUTE_CATEGORY', l_cust_b2b_rec.ADDRESS_ATTRIBUTE_CATEGORY);
       end if;
       if trim(l_cust_b2b_rec.CONTROL_YEAR) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'CONTROL_YEAR', l_cust_b2b_rec.CONTROL_YEAR);
       end if;
       if trim(l_cust_b2b_rec.DEBARMENTS_COUNT) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'DEBARMENTS_COUNT', l_cust_b2b_rec.DEBARMENTS_COUNT);
       end if;
       if trim(l_cust_b2b_rec.HOUSEHOLD_SIZE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'HOUSEHOLD_SIZE', l_cust_b2b_rec.HOUSEHOLD_SIZE);
       end if;
       if trim(l_cust_b2b_rec.PERSONAL_INCOME) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.ocont_imp_xml_element_id,
			       'PERSONAL_INCOME', l_cust_b2b_rec.PERSONAL_INCOME);
       end if;
       if trim(l_cust_b2b_rec.NOTES) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'NOTES', l_cust_b2b_rec.NOTES);
       end if;
       if trim(l_cust_b2b_rec.VEHICLE_RESPONSE_CODE) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'VEHICLE_RESPONSE_CODE', l_cust_b2b_rec.VEHICLE_RESPONSE_CODE);
       end if;
       if trim(l_cust_b2b_rec.SALES_AGENT_EMAIL_ID) is not null then
 	 update_element_error (p_import_list_header_id,l_cust_b2b_rec.org_imp_xml_element_id,
			       'SALES_AGENT_EMAIL_ID', l_cust_b2b_rec.SALES_AGENT_EMAIL_ID);
       end if;

    -- **********************************
    END LOOP;
     CLOSE b2b;
    end if;

-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if x_b2b = 'B2C' then
        OPEN b2c;
     LOOP
      FETCH b2c  INTO
        l_import_source_line_id,
        l_import_list_header_id,
        l_cust_b2c_rec.per_imp_xml_element_id,
        l_cust_b2c_rec.add_imp_xml_element_id,
        l_cust_b2c_rec.cp_imp_xml_element_id,
        l_cust_b2c_rec.em_imp_xml_element_id,
        l_cust_b2c_rec.ADDRESS1,
        l_cust_b2c_rec.ADDRESS2,
        l_cust_b2c_rec.ADDRESS3,
        l_cust_b2c_rec.ADDRESS4,
        l_cust_b2c_rec.PERSON_LAST_NAME,
        l_cust_b2c_rec.PERSON_FIRST_NAME,
        l_cust_b2c_rec.PERSON_NAME_PREFIX,
        l_cust_b2c_rec.PERSON_MIDDLE_NAME,
        l_cust_b2c_rec.PERSON_NAME_SUFFIX,
        -- l_cust_b2c_rec.PERSON_PRE_NAME_ADJUNCT,
        l_cust_b2c_rec.CITY,
        l_cust_b2c_rec.SALUTATION,
        l_cust_b2c_rec.POSTAL_CODE,
        l_cust_b2c_rec.STATE,
        l_cust_b2c_rec.PROVINCE,
        l_cust_b2c_rec.COUNTY,
        l_cust_b2c_rec.COUNTRY,
        l_cust_b2c_rec.EMAIL_ADDRESS,
        l_cust_b2c_rec.PHONE_COUNTRY_CODE,
        l_cust_b2c_rec.PHONE_AREA_CODE,
        l_cust_b2c_rec.PHONE_NUMBER,
        l_cust_b2c_rec.PHONE_EXTENSION,
        l_cust_b2c_rec.identifying_address_flag,
        l_cust_b2c_rec.ADDRESS_LINES_PHONETIC,
-- bug 4641591: columns obsolete
--	l_cust_b2c_rec.PO_BOX_NUMBER,
--        l_cust_b2c_rec.FLOOR,
--        l_cust_b2c_rec.HOUSE_NUMBER,
        l_cust_b2c_rec.POSTAL_PLUS4_CODE,
--        l_cust_b2c_rec.STREET_SUFFIX,
--        l_cust_b2c_rec.STREET,
--        l_cust_b2c_rec.STREET_NUMBER,
--        l_cust_b2c_rec.SUITE,
        l_cust_b2c_rec.party_id,
        l_cust_b2c_rec.URL,
	l_cust_b2c_rec.DECLARED_ETHNICITY,
	l_cust_b2c_rec.DESCRIPTION,
	l_cust_b2c_rec.HEAD_OF_HOUSEHOLD_FLAG,
	l_cust_b2c_rec.PERSON_KNOWN_AS,
	l_cust_b2c_rec.PERSON_KNOWN_AS2,
	l_cust_b2c_rec.PERSON_KNOWN_AS3,
	l_cust_b2c_rec.PERSON_KNOWN_AS4,
	l_cust_b2c_rec.PERSON_KNOWN_AS5,
	l_cust_b2c_rec.LOCATION_DIRECTIONS,
	l_cust_b2c_rec.MARITAL_STATUS,
	l_cust_b2c_rec.PERSON_ACADEMIC_TITLE,
	l_cust_b2c_rec.PERSON_FIRST_NAME_PHONETIC,
	l_cust_b2c_rec.PERSON_LAST_NAME_PHONETIC,
	l_cust_b2c_rec.MIDDLE_NAME_PHONETIC,
	l_cust_b2c_rec.PERSON_NAME_PHONETIC,
	l_cust_b2c_rec.PERSON_PREVIOUS_TITLE_NAME,
	-- l_cust_b2c_rec.SECOND_TITLE,
	l_cust_b2c_rec.SHORT_DESCRIPTION,
	l_cust_b2c_rec.PERSON_ATTRIBUTE1,
	l_cust_b2c_rec.PERSON_ATTRIBUTE2,
	l_cust_b2c_rec.PERSON_ATTRIBUTE3,
	l_cust_b2c_rec.PERSON_ATTRIBUTE4,
	l_cust_b2c_rec.PERSON_ATTRIBUTE5,
	l_cust_b2c_rec.PERSON_ATTRIBUTE6,
	l_cust_b2c_rec.PERSON_ATTRIBUTE7,
	l_cust_b2c_rec.PERSON_ATTRIBUTE8,
	l_cust_b2c_rec.PERSON_ATTRIBUTE9,
	l_cust_b2c_rec.PERSON_ATTRIBUTE10,
	l_cust_b2c_rec.PERSON_ATTRIBUTE11,
	l_cust_b2c_rec.PERSON_ATTRIBUTE12,
	l_cust_b2c_rec.PERSON_ATTRIBUTE13,
	l_cust_b2c_rec.PERSON_ATTRIBUTE14,
	l_cust_b2c_rec.PERSON_ATTRIBUTE15,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE1,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE2,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE3,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE4,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE5,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE6,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE7,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE8,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE9,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE10,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE11,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE12,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE13,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE14,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE15,
	l_cust_b2c_rec.FAX_COUNTRY_CODE,
	l_cust_b2c_rec.FAX_AREA_CODE,
	l_cust_b2c_rec.FAX_NUMBER,
	l_cust_b2c_rec.PERSON_ATTRIBUTE_CATEGORY,
	l_cust_b2c_rec.ADDRESS_ATTRIBUTE_CATEGORY,
	l_cust_b2c_rec.HOUSEHOLD_SIZE,
	l_cust_b2c_rec.PERSONAL_INCOME,
	l_cust_b2c_rec.DESCRIPTION,
	l_cust_b2c_rec.SHORT_DESCRIPTION,
	l_cust_b2c_rec.NOTES,
	l_cust_b2c_rec.VEHICLE_RESPONSE_CODE,
	l_cust_b2c_rec.SALES_AGENT_EMAIL_ID,
	l_cust_b2c_rec.orig_system_reference,
	l_cust_b2c_rec.tax_reference,
	l_cust_b2c_rec.rent_owned_indicator;
      EXIT WHEN b2c%NOTFOUND;

       if trim(l_cust_b2c_rec.ADDRESS1) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS1', l_cust_b2c_rec.ADDRESS1);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS2) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS2', l_cust_b2c_rec.ADDRESS2);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS3) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS3', l_cust_b2c_rec.ADDRESS3);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS4) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS4', l_cust_b2c_rec.ADDRESS4);
       end if;
       if trim(l_cust_b2c_rec.PERSON_LAST_NAME) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_LAST_NAME', l_cust_b2c_rec.PERSON_LAST_NAME);
       end if;
       if trim(l_cust_b2c_rec.PERSON_FIRST_NAME) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_FIRST_NAME', l_cust_b2c_rec.PERSON_FIRST_NAME);
       end if;
       if trim(l_cust_b2c_rec.orig_system_reference) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'ORIG_SYSTEM_REFERENCE', l_cust_b2c_rec.ORIG_SYSTEM_REFERENCE);
       end if;
       if trim(l_cust_b2c_rec.TAX_REFERENCE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'TAX_REFERENCE', l_cust_b2c_rec.TAX_REFERENCE);
       end if;
       if trim(l_cust_b2c_rec.RENT_OWNED_INDICATOR) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'RENT_OWNED_INDICATOR', l_cust_b2c_rec.RENT_OWNED_INDICATOR);
       end if;
       if trim(l_cust_b2c_rec.PERSON_NAME_PREFIX) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_NAME_PREFIX', l_cust_b2c_rec.PERSON_NAME_PREFIX);
       end if;
       if trim(l_cust_b2c_rec.PERSON_MIDDLE_NAME) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_MIDDLE_NAME', l_cust_b2c_rec.PERSON_MIDDLE_NAME);
       end if;
       if trim(l_cust_b2c_rec.PERSON_NAME_SUFFIX) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_NAME_SUFFIX', l_cust_b2c_rec.PERSON_NAME_SUFFIX);
       end if;
       if trim(l_cust_b2c_rec.CITY) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'CITY', l_cust_b2c_rec.CITY);
       end if;
       if trim(l_cust_b2c_rec.SALUTATION) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'SALUTATION', l_cust_b2c_rec.SALUTATION);
       end if;
       if trim(l_cust_b2c_rec.POSTAL_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'POSTAL_CODE', l_cust_b2c_rec.POSTAL_CODE);
       end if;
       if trim(l_cust_b2c_rec.STATE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'STATE', l_cust_b2c_rec.STATE);
       end if;
       if trim(l_cust_b2c_rec.PROVINCE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'PROVINCE', l_cust_b2c_rec.PROVINCE);
       end if;
       if trim(l_cust_b2c_rec.COUNTY) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'COUNTY', l_cust_b2c_rec.COUNTY);
       end if;

       if trim(l_cust_b2c_rec.COUNTRY) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'COUNTRY', l_cust_b2c_rec.COUNTRY);
       end if;
       if trim(l_cust_b2c_rec.EMAIL_ADDRESS) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.em_imp_xml_element_id,
                               'EMAIL_ADDRESS', l_cust_b2c_rec.EMAIL_ADDRESS);
       end if;
       if trim(l_cust_b2c_rec.PHONE_COUNTRY_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.cp_imp_xml_element_id,
                               'PHONE_COUNTRY_CODE', l_cust_b2c_rec.PHONE_COUNTRY_CODE);
       end if;
       if trim(l_cust_b2c_rec.PHONE_AREA_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.cp_imp_xml_element_id,
                               'PHONE_AREA_CODE', l_cust_b2c_rec.PHONE_AREA_CODE);
       end if;
       if trim(l_cust_b2c_rec.PHONE_NUMBER) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.cp_imp_xml_element_id,
                               'PHONE_NUMBER', l_cust_b2c_rec.PHONE_NUMBER);
       end if;
       if trim(l_cust_b2c_rec.PHONE_EXTENSION) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.cp_imp_xml_element_id,
                               'PHONE_EXTENSION', l_cust_b2c_rec.PHONE_EXTENSION);
       end if;
       if trim(l_cust_b2c_rec.identifying_address_flag) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'IDENTIFYING_ADDRESS_FLAG', l_cust_b2c_rec.IDENTIFYING_ADDRESS_FLAG);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_LINES_PHONETIC) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_LINES_PHONETIC', l_cust_b2c_rec.ADDRESS_LINES_PHONETIC);
       end if;
/* -- bug 4641591: columns obsolete
       if trim(l_cust_b2c_rec.PO_BOX_NUMBER) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'PO_BOX_NUMBER', l_cust_b2c_rec.PO_BOX_NUMBER);
       end if;
       if trim(l_cust_b2c_rec.FLOOR) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'FLOOR', l_cust_b2c_rec.FLOOR);
       end if;
       if trim(l_cust_b2c_rec.HOUSE_NUMBER) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'HOUSE_NUMBER', l_cust_b2c_rec.HOUSE_NUMBER);
       end if;
*/
       if trim(l_cust_b2c_rec.POSTAL_PLUS4_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'POSTAL_PLUS4_CODE', l_cust_b2c_rec.POSTAL_PLUS4_CODE);
       end if;
/* -- bug 4641591: columns obsolete
       if trim(l_cust_b2c_rec.STREET_SUFFIX) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'STREET_SUFFIX', l_cust_b2c_rec.STREET_SUFFIX);
       end if;
       if trim(l_cust_b2c_rec.STREET) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'STREET', l_cust_b2c_rec.STREET);
       end if;
       if trim(l_cust_b2c_rec.STREET_NUMBER) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'STREET_NUMBER', l_cust_b2c_rec.STREET_NUMBER);
       end if;
       if trim(l_cust_b2c_rec.SUITE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'SUITE', l_cust_b2c_rec.SUITE);
       end if;
*/
       if trim(l_cust_b2c_rec.party_id) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PARTY_ID', l_cust_b2c_rec.PARTY_ID);
       end if;

       if trim(l_cust_b2c_rec.URL) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'URL', l_cust_b2c_rec.URL);
       end if;
       if trim(l_cust_b2c_rec.DECLARED_ETHNICITY) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'DECLARED_ETHNICITY', l_cust_b2c_rec.DECLARED_ETHNICITY);
       end if;
       if trim(l_cust_b2c_rec.DESCRIPTION) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'DESCRIPTION', l_cust_b2c_rec.DESCRIPTION);
       end if;
       if trim(l_cust_b2c_rec.HEAD_OF_HOUSEHOLD_FLAG) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'HEAD_OF_HOUSEHOLD_FLAG', l_cust_b2c_rec.HEAD_OF_HOUSEHOLD_FLAG);
       end if;
       if trim(l_cust_b2c_rec.PERSON_KNOWN_AS) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_KNOWN_AS', l_cust_b2c_rec.PERSON_KNOWN_AS);
       end if;
              if trim(l_cust_b2c_rec.PERSON_KNOWN_AS2) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_KNOWN_AS2', l_cust_b2c_rec.PERSON_KNOWN_AS2);
       end if;
       if trim(l_cust_b2c_rec.PERSON_KNOWN_AS3) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_KNOWN_AS3', l_cust_b2c_rec.PERSON_KNOWN_AS3);
       end if;
       if trim(l_cust_b2c_rec.PERSON_KNOWN_AS4) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_KNOWN_AS4', l_cust_b2c_rec.PERSON_KNOWN_AS4);
       end if;
       if trim(l_cust_b2c_rec.PERSON_KNOWN_AS5) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_KNOWN_AS5', l_cust_b2c_rec.PERSON_KNOWN_AS5);
       end if;

       if trim(l_cust_b2c_rec.LOCATION_DIRECTIONS) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'LOCATION_DIRECTIONS', l_cust_b2c_rec.LOCATION_DIRECTIONS);
       end if;
       if trim(l_cust_b2c_rec.MARITAL_STATUS) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'MARITAL_STATUS', l_cust_b2c_rec.MARITAL_STATUS);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ACADEMIC_TITLE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ACADEMIC_TITLE', l_cust_b2c_rec.PERSON_ACADEMIC_TITLE);
       end if;
       if trim(l_cust_b2c_rec.PERSON_FIRST_NAME_PHONETIC) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_FIRST_NAME_PHONETIC', l_cust_b2c_rec.PERSON_FIRST_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2c_rec.PERSON_LAST_NAME_PHONETIC) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_LAST_NAME_PHONETIC', l_cust_b2c_rec.PERSON_LAST_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2c_rec.MIDDLE_NAME_PHONETIC) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'MIDDLE_NAME_PHONETIC', l_cust_b2c_rec.MIDDLE_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2c_rec.PERSON_NAME_PHONETIC) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_NAME_PHONETIC', l_cust_b2c_rec.PERSON_NAME_PHONETIC);
       end if;
       if trim(l_cust_b2c_rec.PERSON_PREVIOUS_TITLE_NAME) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_PREVIOUS_TITLE_NAME', l_cust_b2c_rec.PERSON_PREVIOUS_TITLE_NAME);
       end if;
       if trim(l_cust_b2c_rec.SHORT_DESCRIPTION) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'SHORT_DESCRIPTION', l_cust_b2c_rec.SHORT_DESCRIPTION);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE1) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE1', l_cust_b2c_rec.PERSON_ATTRIBUTE1);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE2) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE2', l_cust_b2c_rec.PERSON_ATTRIBUTE2);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE3) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE3', l_cust_b2c_rec.PERSON_ATTRIBUTE3);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE4) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE4', l_cust_b2c_rec.PERSON_ATTRIBUTE4);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE5) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE5', l_cust_b2c_rec.PERSON_ATTRIBUTE5);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE6) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE6', l_cust_b2c_rec.PERSON_ATTRIBUTE6);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE7) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE7', l_cust_b2c_rec.PERSON_ATTRIBUTE7);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE8) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE8', l_cust_b2c_rec.PERSON_ATTRIBUTE8);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE9) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE9', l_cust_b2c_rec.PERSON_ATTRIBUTE9);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE10) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE10', l_cust_b2c_rec.PERSON_ATTRIBUTE10);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE11) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE11', l_cust_b2c_rec.PERSON_ATTRIBUTE11);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE12) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE12', l_cust_b2c_rec.PERSON_ATTRIBUTE12);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE13) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE13', l_cust_b2c_rec.PERSON_ATTRIBUTE13);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE14) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE14', l_cust_b2c_rec.PERSON_ATTRIBUTE14);
       end if;
       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE15) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE15', l_cust_b2c_rec.PERSON_ATTRIBUTE15);
       end if;

       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE1) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE1', l_cust_b2c_rec.ADDRESS_ATTRIBUTE1);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE2) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE2', l_cust_b2c_rec.ADDRESS_ATTRIBUTE2);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE3) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE3', l_cust_b2c_rec.ADDRESS_ATTRIBUTE3);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE4) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE4', l_cust_b2c_rec.ADDRESS_ATTRIBUTE4);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE5) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE5', l_cust_b2c_rec.ADDRESS_ATTRIBUTE5);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE6) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE6', l_cust_b2c_rec.ADDRESS_ATTRIBUTE6);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE7) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE7', l_cust_b2c_rec.ADDRESS_ATTRIBUTE7);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE8) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE8', l_cust_b2c_rec.ADDRESS_ATTRIBUTE8);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE9) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE9', l_cust_b2c_rec.ADDRESS_ATTRIBUTE9);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE10) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE11', l_cust_b2c_rec.ADDRESS_ATTRIBUTE11);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE12) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE12', l_cust_b2c_rec.ADDRESS_ATTRIBUTE12);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE13) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE13', l_cust_b2c_rec.ADDRESS_ATTRIBUTE13);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE14) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE14', l_cust_b2c_rec.ADDRESS_ATTRIBUTE14);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE15) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE15', l_cust_b2c_rec.ADDRESS_ATTRIBUTE15);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE11) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE11', l_cust_b2c_rec.ADDRESS_ATTRIBUTE11);
       end if;
       if trim(l_cust_b2c_rec.FAX_COUNTRY_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.fx_imp_xml_element_id,
                               'FAX_COUNTRY_CODE', l_cust_b2c_rec.FAX_COUNTRY_CODE);
       end if;
       if trim(l_cust_b2c_rec.FAX_AREA_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.fx_imp_xml_element_id,
                               'FAX_AREA_CODE', l_cust_b2c_rec.FAX_AREA_CODE);
       end if;
       if trim(l_cust_b2c_rec.FAX_NUMBER) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.fx_imp_xml_element_id,
                               'FAX_NUMBER', l_cust_b2c_rec.FAX_NUMBER);
       end if;

       if trim(l_cust_b2c_rec.PERSON_ATTRIBUTE_CATEGORY) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSON_ATTRIBUTE_CATEGORY', l_cust_b2c_rec.PERSON_ATTRIBUTE_CATEGORY);
       end if;
       if trim(l_cust_b2c_rec.ADDRESS_ATTRIBUTE_CATEGORY) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.add_imp_xml_element_id,
                               'ADDRESS_ATTRIBUTE_CATEGORY', l_cust_b2c_rec.ADDRESS_ATTRIBUTE_CATEGORY);
       end if;
       if trim(l_cust_b2c_rec.HOUSEHOLD_SIZE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'HOUSEHOLD_SIZE', l_cust_b2c_rec.HOUSEHOLD_SIZE);
       end if;
       if trim(l_cust_b2c_rec.PERSONAL_INCOME) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'PERSONAL_INCOME', l_cust_b2c_rec.PERSONAL_INCOME);
       end if;
       if trim(l_cust_b2c_rec.DESCRIPTION) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'DESCRIPTION', l_cust_b2c_rec.DESCRIPTION);
       end if;
       if trim(l_cust_b2c_rec.SHORT_DESCRIPTION) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'SHORT_DESCRIPTION', l_cust_b2c_rec.SHORT_DESCRIPTION);
       end if;
       if trim(l_cust_b2c_rec.NOTES) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'NOTES', l_cust_b2c_rec.NOTES);
       end if;
       if trim(l_cust_b2c_rec.VEHICLE_RESPONSE_CODE) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'VEHICLE_RESPONSE_CODE', l_cust_b2c_rec.VEHICLE_RESPONSE_CODE);
       end if;
       if trim(l_cust_b2c_rec.SALES_AGENT_EMAIL_ID) is not null then
         update_element_error (p_import_list_header_id,l_cust_b2c_rec.per_imp_xml_element_id,
                               'SALES_AGENT_EMAIL_ID', l_cust_b2c_rec.SALES_AGENT_EMAIL_ID);
       end if;

    END LOOP;
     CLOSE b2c;
    end if;

-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

EXCEPTION
 WHEN OTHERS THEN
    p_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in exe_custxml_data_validation:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end exe_custxml_data_validation;
-- ----------------------------------------------

procedure create_contact_point(
        p_cpoint_rec              IN      hz_contact_point_v2pub.contact_point_rec_type,
        p_edi_rec                 IN      hz_contact_point_v2pub.edi_rec_type,
        p_email_rec               IN      hz_contact_point_v2pub.email_rec_type,
        p_phone_rec               IN      hz_contact_point_v2pub.phone_rec_type,
        p_telex_rec               IN      hz_contact_point_v2pub.telex_rec_type,
        p_web_rec                 IN      hz_contact_point_v2pub.web_rec_type,
        x_return_status         OUT NOCOPY     VARCHAR2,
        x_msg_count             OUT NOCOPY     NUMBER,
        x_msg_data              OUT NOCOPY     VARCHAR2,
        x_contact_point_id      OUT NOCOPY     NUMBER
) is

 cpoint_rec      hz_contact_point_v2pub.contact_point_rec_type := p_cpoint_rec;
 email_rec       hz_contact_point_v2pub.email_rec_type := p_email_rec;
 phone_rec       hz_contact_point_v2pub.phone_rec_type := p_phone_rec;
 edi_rec         hz_contact_point_v2pub.edi_rec_type := p_edi_rec;
 telex_rec       hz_contact_point_v2pub.telex_rec_type := p_telex_rec;
 web_rec         hz_contact_point_v2pub.web_rec_type := p_web_rec ;

begin
   SELECT  hz_contact_points_s.nextval into x_contact_point_id from dual;

  cpoint_rec.contact_point_id       := x_contact_point_id;
  cpoint_rec.orig_system_reference  := x_contact_point_id;
  cpoint_rec.CREATED_BY_MODULE      := 'AMS_LIST_IMPORT';
  cpoint_rec.application_id      := 530;
  hz_contact_point_v2pub.create_contact_point(
                   'F',
                   cpoint_rec,
                   edi_rec,
                   email_rec,
                   phone_rec,
                   telex_rec,
                   web_rec,
                   x_contact_point_id,
                   x_return_status,
                   x_msg_count,
                   x_msg_data);

end create_contact_point;
-- ---------------------------------------------------------------------
--
-- This procedure is used for existence checking for address.
--
--
PROCEDURE address_echeck(
   p_party_id              IN       NUMBER,
   x_return_status      OUT NOCOPY    VARCHAR2,
   x_msg_count          OUT NOCOPY    NUMBER,
   x_msg_data           OUT NOCOPY    VARCHAR2,
   p_location_id           IN OUT NOCOPY   NUMBER,
   p_address1              IN       VARCHAR2,
   p_city                  IN       VARCHAR2,
   p_pcode                 IN       VARCHAR2,
   p_country               IN       VARCHAR2
                       ) is

l_address_key       varchar(1000);
l_loc_id            number;
l_ret_status        varchar(1);


cursor c_addr_ps is
       select max(loc.location_id)
       from  hz_party_sites ps, hz_locations loc
       where ps.party_id          = p_party_id
         and ps.location_id       = loc.location_id
         and loc.address_key      = l_address_key
         and loc.country          = p_country
         and nvl(loc.city,nvl(p_city,'x')) = nvl(p_city,'x');

cursor c_addr is
       select max(loc.location_id)
       from   hz_locations loc
       where  loc.address_key     = l_address_key
         and loc.country          = p_country
         and nvl(loc.city,nvl(p_city,'x')) = nvl(p_city,'x');

begin
 x_return_status := FND_API.g_ret_sts_success;
      l_address_key := hz_fuzzy_pub.Generate_Key (
                                p_key_type => 'ADDRESS',
                                p_address1 =>  p_address1,
                                p_postal_code => p_pcode
                               );

      open c_addr_ps;
      fetch c_addr_ps into l_loc_id;
      close c_addr_ps;
      if l_loc_id is null then
         open c_addr;
         fetch c_addr into l_loc_id;
         close c_addr;
      end if;
      p_location_id := l_loc_id;
 exception
     when others then
      x_return_status := FND_API.g_ret_sts_unexp_error ;
      IF FND_MSG_PUB.check_msg_level(FND_MSG_PUB.g_msg_lvl_unexp_error) THEN
         FND_MSG_PUB.add_exc_msg(g_pkg_name,'address_echeck');
      END IF;
      FND_MSG_PUB.count_and_get(
            p_encoded => FND_API.g_false,
            p_count   => x_msg_count,
            p_data    => x_msg_data
      );

end address_echeck;
-- --------------------------------------------------

procedure create_location (
        p_location_rec          IN      HZ_LOCATION_v2PUB.LOCATION_REC_TYPE,
        x_return_status         OUT NOCOPY     VARCHAR2,
        x_msg_count             OUT NOCOPY     NUMBER,
        x_msg_data              OUT NOCOPY     VARCHAR2,
        x_location_id           OUT NOCOPY     NUMBER
) IS

location_rec    hz_location_v2pub.location_rec_type := p_location_rec;

BEGIN

   select hr_locations_s.nextval into x_location_id from dual;
   location_rec.location_id           := x_location_Id;
   location_rec.orig_system_reference := x_location_id ;
   location_rec.CREATED_BY_MODULE := 'AMS_LIST_IMPORT';
   location_rec.application_id := 530;

       hz_location_v2pub.create_location(
        'F',
        location_rec,
        x_location_id,
        x_return_status,
        x_msg_count,
        x_msg_data
        );

end create_location;

-- --------------------------------------------------------

procedure create_party_site (
        p_psite_rec             IN      hz_party_site_v2pub.party_site_rec_type,
        x_return_status         OUT NOCOPY     VARCHAR2,
        x_msg_count             OUT NOCOPY     NUMBER,
        x_msg_data              OUT NOCOPY     VARCHAR2,
        x_party_site_id         OUT NOCOPY     NUMBER,
        x_party_site_number     OUT NOCOPY     VARCHAR2
) IS

x_gen_party_site_number       VARCHAR2(1);
psite_rec       hz_party_site_v2pub.party_site_rec_type := p_psite_rec;

begin
  x_gen_party_site_number := fnd_profile.value('HZ_GENERATE_PARTY_SITE_NUMBER');
  x_party_site_number := null;
   select hz_party_sites_s.nextval into x_party_site_id from dual;
   if x_gen_party_site_number = 'N' then
       select hz_party_site_number_s.nextval into x_party_site_number from dual;
   end if;

  psite_rec.party_site_id            := x_party_site_id;
  psite_rec.party_site_number        := x_party_site_number;
  psite_rec.orig_system_reference    := x_party_site_id;
  psite_rec.CREATED_BY_MODULE        := 'AMS_LIST_IMPORT';
  psite_rec.application_id := 530;
/*
  hz_party_pub.create_party_site(
                1,
                'T',
                'F',
                psite_rec,
                x_return_status,
                x_msg_count,
                x_msg_data,
                x_party_site_id,
                x_party_site_number
                );
*/
  hz_party_site_v2pub.create_party_site(
                'F',
                psite_rec,
                x_party_site_id,
                x_party_site_number,
                x_return_status,
                x_msg_count,
                x_msg_data
                );
end create_party_site;
-- -------------------------------------------------------

PROCEDURE client_load_direct (
                      p_import_list_header_id  IN NUMBER,
                      p_owner_user_id          IN NUMBER,
                      p_generate_list          IN    VARCHAR2 ,
                      p_list_name              IN    VARCHAR2   -- For list generation name.
                     ) IS
   l_import_type        VARCHAR2(30);
   l_msg_code           NUMBER;
   l_msg_buf            VARCHAR2(4000);
   l_batch_id           NUMBER;
   l_lookup_code        VARCHAR2(30);
   l_return_status      VARCHAR2(1);
   i_return_status      VARCHAR2(1);
   l_dedupe_flag        VARCHAR2(1);
   l_validate_file      VARCHAR2(1);
   i_msg_data           VARCHAR2(2000);
   i_msg_buf            VARCHAR2(4000);
   i_msg_count          NUMBER;
   l_list_header_id     NUMBER;
   l_duplicate_records  NUMBER;
   l_user_status_id     NUMBER;

   x_rstatus         VARCHAR2(1);
   x_mdata           VARCHAR2(2000);
   x_mcount          NUMBER;

   l_lead_status        VARCHAR2(30);
   i_processed_records  NUMBER;
   i_failed_records     NUMBER;
   l_request_id         NUMBER;
   l_conc_prog_name     VARCHAR2(60);
   l_finish_status      VARCHAR2(30);
   l_status_code        VARCHAR2(30);

   l_error_exist        VARCHAR2(1);
   l_execute_mode       VARCHAR2(1);
   l_rec_in_stag_tab    VARCHAR2(1);
   l_loaded_records     NUMBER;
   l_failed_records     NUMBER;
   l_string         VARCHAR2(4000);
   l_program        varchar2(100);
   l_file_type        VARCHAR2(30);
   l_loaded_rows        NUMBER;
   l_rec_update_flag    VARCHAR2(1);
   x_tmp_var                  	VARCHAR2(4000);
   x_tmp_var1                 	VARCHAR2(4000);
L_TOTAL_RECORDS      NUMBER;
   l_numb_of_inst       number;
   x_hz_dup_check  VARCHAR2(60);
   l_b2b_flag           VARCHAR2(1);
   x_import_list_header_id number;
   X_RETURN_STATUS      VARCHAR2(1);
   x_msg_count 		NUMBER;
   x_msg_data           VARCHAR2(2000);
   l_osr_mapped		VARCHAR2(1);

L_MESG_TEXT             varchar2(2000);

   cursor c_import_type is
   select import_type, dedupe_flag, nvl(VALIDATE_FILE,'N'),status_code,EXECUTE_MODE,nvl(RECORD_UPDATE_FLAG,'N')
   ,nvl(NUMBER_OF_INSTANCES,1) from ams_imp_list_headers_all
   where import_list_header_id = p_import_list_header_id;

   cursor c_dup_recs is
          select count(*) from ams_imp_source_lines
          where import_list_header_id = p_import_list_header_id
            and duplicate_flag = 'Y';

   cursor c_event_status is
   select nvl(PROCESSED_ROWS,0), nvl(NUMBER_OF_FAILED_RECORDS,0)
   from ams_imp_list_headers_all
   where import_list_header_id = p_import_list_header_id;

  cursor c_conc_name is
   SELECT concurrent_program FROM ams_imp_list_import_types
   where  import_type = 'LEAD';

 cursor c_error_exist is
   select 'Y' from ams_list_import_errors
   where import_list_header_id = p_import_list_header_id
     and error_type = 'E'
     and rownum < 2;

  cursor c_rec_in_stag_tab is
  select 'Y' from ams_imp_source_lines
  where import_list_header_id = p_import_list_header_id
    and load_status in ('ACTIVE','RELOAD')
    and rownum < 2;

  cursor c_rec_in_xml_stag_tab is
  select 'Y' from ams_imp_xml_elements e, ams_imp_documents d
  where d.import_list_header_id = p_import_list_header_id
    and d.imp_document_id = e.imp_xml_document_id
    and e.load_status in ('ACTIVE','RELOAD')
    and rownum < 2;

 cursor c_loaded_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_SUCCESS;

 cursor c_failed_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_ERROR;

  cursor c_prog_name (x_imp_type varchar2) is
   SELECT concurrent_program FROM ams_imp_list_import_types
   where  import_type = x_imp_type;

cursor c_file_type is
 select file_type from ams_imp_documents where import_list_header_id = p_import_list_header_id;

 cursor c_total_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status in ('ACTIVE','RELOAD');

-- For Mapped osr
cursor osr_mapped is
SELECT 'Y'  FROM ams_list_src_fields sf,
ams_imp_list_headers_all hd
WHERE sf.field_column_name = 'ORIG_SYSTEM_REFERENCE'
  AND sf.enabled_flag = 'Y'
  AND sf.list_source_type_id = hd.list_source_type_id
  and hd.import_type in ('B2B','B2C')
  AND hd.import_list_header_id = p_import_list_header_id;

begin
   x_import_list_header_id := p_import_list_header_id;
   x_hz_dup_check          := fnd_profile.value('AMS_HZ_DEDUPE_RULE');
   if x_hz_dup_check <> 'Y' then
    x_hz_dup_check := 'N';
   end if;

   open  c_import_type;
   fetch c_import_type into l_import_type, l_dedupe_flag,l_validate_file,l_status_code,l_execute_mode,
                            l_rec_update_flag,l_numb_of_inst;
   close c_import_type;
   open  c_conc_name;
   fetch c_conc_name into l_conc_prog_name;
   close c_conc_name;
   open osr_mapped;
   fetch osr_mapped into l_osr_mapped;
   close osr_mapped;

   open c_file_type;
   fetch c_file_type into l_file_type;
   close c_file_type;
   if l_file_type = 'CSV' then
   	open c_rec_in_stag_tab;
   	fetch c_rec_in_stag_tab into l_rec_in_stag_tab;
   	close c_rec_in_stag_tab;
   end if;
   if l_file_type = 'XML' then
   	open c_rec_in_xml_stag_tab;
   	fetch c_rec_in_xml_stag_tab into l_rec_in_stag_tab;
   	close c_rec_in_xml_stag_tab;
   end if;
   if l_rec_in_stag_tab is NULL then
     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting import process, Staging table not populated.',
         p_msg_type        => 'DEBUG'
       );
       l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
      return;
   end if;
-- ------------------------------------------------------
-- ------------RAISE PRE BUSINESS EVENT START ---------------------

              Raise_Business_event(p_import_list_header_id,
                                        'oracle.apps.ams.list.ListImportPreEvent');

-- ------------RAISE PRE BUSINESS EVENT END ---------------------
-- ------------------------------------------------------
    if l_execute_mode = 'R' then
         l_lookup_code := 'STAGED';
         l_status_code := 'STAGED';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'STAGED' and default_flag = 'Y';

         select as_import_interface_s.nextval into l_batch_id from dual;

         UPDATE ams_imp_list_headers_all
         set status_code      =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            batch_id          =  l_batch_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;

         UPDATE ams_imp_source_lines
            set batch_id          =  l_batch_id,
                request_id        =  NULL
         where import_list_header_id = p_import_list_header_id
           and load_status in ('RELOAD','ACTIVE');

              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting List Import in RELOAD Mode.',
              p_msg_type        => 'DEBUG'
              );
    end if;

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Starting Import process.',
         p_msg_type        => 'DEBUG'
       );

   if (l_import_type = 'B2B' or l_import_type = 'B2C') then
    if l_status_code = 'STAGED' then
      if l_file_type = 'XML' and l_execute_mode  <> 'R' then
 	Process_customers_xml (
    	1, -- p_api_version_number
    	FND_API.G_FALSE , -- p_init_msg_list
    	FND_API.G_FALSE , -- p_commit
    	FND_API.G_VALID_LEVEL_FULL, -- p_validation_level
    	x_rstatus          ,
    	x_mcount              ,
    	x_mdata               ,
    	p_import_list_header_id ,
    	l_rec_update_flag   -- p_update_flag
        );
        if x_mcount > 1 then
          FOR i IN 1..x_mcount  LOOP
         	x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
                x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
    	  END LOOP;
    	x_mdata := x_tmp_var1;
  	END IF;
    	if x_rstatus <> 'S' then
        	AMS_Utility_PVT.Create_Log (
         	x_return_status   => l_return_status,
         	p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         	p_log_used_by_id  => p_import_list_header_id,
         	p_msg_data        => 'Error while executing Process_customers_xml process.',
         	p_msg_type        => 'DEBUG'
        	);
      		AMS_List_Import_PUB.error_capture (
        	1,
        	'T',
        	'F',
        	null,
        	x_rstatus,
        	x_mcount,
        	x_mdata,
        	p_import_list_header_id,
        	null, -- i_import_source_line_id,
        	null,
        	null,
                null,
        	null,
        	substr(x_mdata,1,2000));
    	end if;
      end if;
      UPDATE ams_imp_list_headers_all
        set status_code       =  'SCHEDULED',
            loaded_date       =  sysdate,
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;
           open c_total_records;
           fetch c_total_records into l_total_records;
           close c_total_records;
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
              p_msg_data  => 'Total Number of records available for processing: '||to_char(l_total_records),
                  p_msg_type        => 'DEBUG'
                );

-- ****************************************************8
    if l_dedupe_flag = 'Y' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting De-Duplicate check in the Marketing tables .',
              p_msg_type        => 'DEBUG'
              );

              dedup_check( p_import_list_header_id);

              open c_dup_recs;
              fetch c_dup_recs into l_duplicate_records;
              close c_dup_recs;
              update ams_imp_list_headers_all
              set number_of_duplicate_records = l_duplicate_records
              where import_list_header_id = p_import_list_header_id;

              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'END De-Duplicate check in the Marketing tables .',
              p_msg_type        => 'DEBUG'
              );
    end if;
-- ****************************************************8
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start gen_transposed_phone_number.',
              p_msg_type        => 'DEBUG'
              );

        gen_transposed_phone_number( x_import_list_header_id, x_return_status,
                                     x_msg_count, x_msg_data );
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End gen_transposed_phone_number.',
              p_msg_type        => 'DEBUG'
              );

if l_import_type = 'B2B' then
  --if party_id is provided and if its of type relationship
  --update org_party_id and ocont_party_id
  update ams_hz_b2b_mapping_v b2b
  set (org_party_id, ocont_party_id) = (select object_id, subject_id from hz_relationships
  where party_id = b2b.party_id and object_type = 'ORGANIZATION'
  and subject_type = 'PERSON' and relationship_type = 'CONTACT'
  and nvl(status,'A') = 'A')
  where import_list_header_id = p_import_list_header_id
  and party_id is not null
  and org_party_id is null;

  --if party_id is of type organization then update org_party_id with party_id
  update ams_hz_b2b_mapping_v b2b
  set org_party_id = (select party_id from hz_parties where party_type = 'ORGANIZATION' and party_id = b2b.party_id and nvl(status,'A') = 'A') -- bug 5100612
  where import_list_header_id = p_import_list_header_id
  and party_id is not null
  and org_party_id is null;

  update ams_hz_b2b_mapping_v
  set org_exist = 'Y'
  where import_list_header_id = p_import_list_header_id
  and org_party_id is not null;

  update ams_hz_b2b_mapping_v
  set ocont_exist = 'Y'
  where import_list_header_id = p_import_list_header_id
  and ocont_party_id is not null;

elsif l_import_type = 'B2C' then

    --aanjaria: bug 4913239: copy party_id to person_party_id so that existence check is by passed
    -- mayjain bug 5100612 this update should be done only if the party_id is a valid one.
       UPDATE ams_hz_b2c_mapping_v b2c
       SET person_party_id = (select party_id from hz_parties where party_type = 'PERSON' and party_id = b2c.party_id and nvl(status,'A') = 'A') -- bug 5100612,
       WHERE import_list_header_id = p_import_list_header_id
       AND party_id is not null
       AND person_party_id is null;

      -- bug 5100612
      UPDATE ams_hz_b2c_mapping_v b2c
      SET person_exist = 'Y'
      WHERE import_list_header_id = p_import_list_header_id
      and person_party_id is not null;
end if;

commit;

 if x_hz_dup_check = 'Y' then
   if l_import_type = 'B2B' then
     if l_osr_mapped = 'Y' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start org_existence_checking_osr.',
              p_msg_type        => 'DEBUG'
              );
       org_existence_checking_osr(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End org_existence_checking_osr.',
              p_msg_type        => 'DEBUG'
              );
     end if;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start org_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      org_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End org_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      if x_return_status <> 'S' then
	AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR'  and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;
     if l_osr_mapped = 'Y' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start org_cont_existence_chk_osr.',
              p_msg_type        => 'DEBUG'
              );
      org_cont_existence_chk_osr(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End org_cont_existence_chk_osr.',
              p_msg_type        => 'DEBUG'
              );
     end if;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start org_cont_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      org_cont_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End org_cont_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      if x_return_status <> 'S' then
	AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_cont_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start org_address_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      org_address_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End org_address_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      if x_return_status <> 'S' then
	AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_address_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start org_address1_exist_checking.',
              p_msg_type        => 'DEBUG'
              );
      org_address1_exist_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End org_address1_exist_checking.',
              p_msg_type        => 'DEBUG'
              );
      if x_return_status <> 'S' then
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting org_address1_exist_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

    ELSE

     if l_osr_mapped = 'Y' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start per_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      per_existence_checking_osr(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End per_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
     end if;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start per_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      per_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End  per_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      if x_return_status <> 'S' then
	AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting per_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Start per_address_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      per_address_existence_checking(x_import_list_header_id,
                          x_return_status,x_msg_count,x_msg_data);
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End per_address_existence_checking.',
              p_msg_type        => 'DEBUG'
              );
      if x_return_status <> 'S' then
	AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Aborting per_address_existence_checking.',
         p_msg_type        => 'DEBUG');
         l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
         return;
      end if;

   end if;
end if ; --  if x_hz_dup_check = 'Y' then
-- >>>>>>>>>>>>>>>

-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        -- Call the Validate Process
        if l_validate_file = 'Y' then
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Starting Validation for CUSTOMER data.',
                  p_msg_type        => 'DEBUG'
                );
       -- Delete all the errors from the errors table which are reloaded.
                 delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id = 0;
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_RELOAD);
                if l_file_type = 'XML' then
                     update_xml_error_text (
                                        p_import_list_header_id,
                                        l_import_type);
                end if;
                l_return_status := null;
                execute_cust_data_validation ( p_import_list_header_id, l_return_status);
             if l_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Customer import terminated because of error in Data validation process.',
                  p_msg_type        => 'DEBUG'
                );

                l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                return;
             end if;
-- ((((((((((((((((((((((((((((((((((((((((((((((
   	    if l_file_type = 'XML' then
                l_return_status := null;
                exe_custxml_data_validation ( p_import_list_header_id, l_return_status);
             if l_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Customer import terminated because of error in XML Data validation process.',
                  p_msg_type        => 'DEBUG'
                );
                l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                return;
             end if;
	    end if;
-- ((((((((((((((((((((((((((((((((((((((((((((((

             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'End Validation for CUSTOMER data.',
                  p_msg_type        => 'DEBUG'
                );
        end if;

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Starting client load for TCA.',
         p_msg_type        => 'DEBUG'
       );

-- sranka 3/21/2003
-- made changes for "EMPLOYEE_OF" support
       execute_reltnship_validation( p_import_list_header_id, l_return_status);
           l_total_records := 0;
           open c_total_records;
           fetch c_total_records into l_total_records;
           close c_total_records;
           if l_total_records = 0 then
                update_cust_import_status(p_import_list_header_id);
                return;
           end if;

       -- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..
      l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',
                      program           => 'AMSILHZC',
                      argument1         => p_import_list_header_id,
                      argument2         => l_numb_of_inst
                   );

           AMS_Utility_PVT.Create_Log (
           x_return_status   => l_return_status,
           p_arc_log_used_by => G_ARC_IMPORT_HEADER,
           p_log_used_by_id  => p_import_list_header_id,
           p_msg_data        => 'Starting TCA program (AMSILHZC) -- concurrent program_id is '||to_char(l_request_id),
           p_msg_type        => 'DEBUG');

     IF l_request_id = 0 THEN
           AMS_Utility_PVT.Create_Log (
           x_return_status   => l_return_status,
           p_arc_log_used_by => G_ARC_IMPORT_HEADER,
           p_log_used_by_id  => p_import_list_header_id,
           p_msg_data        => 'Error in (AMSILHZC) -- concurrent program_id is '||to_char(l_request_id),
           p_msg_type        => 'DEBUG');
	                  l_mesg_text := fnd_message.get;
               AMS_Utility_PVT.Create_Log (
                x_return_status   => l_return_status,
                p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                p_log_used_by_id  => p_import_list_header_id,
                p_msg_data        => l_mesg_text,
                p_msg_type        => 'DEBUG' );

                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                commit;

          RAISE FND_API.g_exc_unexpected_error;
     end if;

-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..
/*
       list_import_to_hz (
                            l_msg_buf,
                            l_msg_code,
                            p_import_list_header_id
                         );
*/
      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'End client load for TCA.',
         p_msg_type        => 'DEBUG'
       );

 /*
       if l_msg_code = 2 then
         l_lookup_code := 'ERROR';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'ERROR' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
       end if;
 */
     end if; -- STAGED
 /*
      open c_error_exist;
      fetch c_error_exist into l_error_exist;
      close c_error_exist;
      if l_error_exist = 'Y' then
         l_lookup_code := 'ERROR';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'ERROR' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;
      if l_error_exist is NULL then
       l_lookup_code := 'COMPLETED';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'COMPLETED' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;

        -- Delete all the errors from the errors table which are sucessful.
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_SUCCESS);
     open c_loaded_records;
     fetch c_loaded_records into l_loaded_records;
     close c_loaded_records;
     open c_failed_records;
     fetch c_failed_records into l_failed_records;
     close c_failed_records;
     UPDATE ams_imp_list_headers_all
        SET loaded_no_of_rows = l_loaded_records,
            number_of_failed_records = l_failed_records,
            loaded_date = sysdate
      WHERE import_list_header_id = p_import_list_header_id;
 */
   end if; -- CUSTOMER
/*
   if p_generate_list = 'Y' then
            AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting List Generation for List Import.',
              p_msg_type        => 'DEBUG'
              );

              l_loaded_rows := 0;
              select LOADED_NO_OF_ROWS into l_loaded_rows from ams_imp_list_headers_all
              where import_list_header_id = p_import_list_header_id;

             if l_loaded_rows > 0 then

             AMS_ListGeneration_PKG.create_import_list
                ( 1,
                  'T',
                  'T',
                  FND_API.G_VALID_LEVEL_FULL,
                  p_owner_user_id,
                  p_import_list_header_id,
                  i_return_status,
                  i_msg_count,
                  i_msg_data,
                  l_list_header_id,
                  p_list_name) ;

             If i_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Error in List Generation --'||i_msg_data,
              p_msg_type        => 'DEBUG'
              );
             End if;
             end if;
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End List Generation for List Import.',
              p_msg_type        => 'DEBUG'
              );
  end if;  -- p_generate_list

*/
--  STARTING CLIENT SIDE LEAD IMPORT --------------
--
--

    if l_import_type = 'LEAD' then
     if l_status_code = 'STAGED' then
      UPDATE ams_imp_list_headers_all
        set status_code       =  'SCHEDULED',
            loaded_date       =  sysdate,
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;
        execute_lead_import ( p_import_list_header_id);
/*
        l_request_id := FND_REQUEST.SUBMIT_REQUEST (
                      application       => 'AMS',
                      program           => 'AMSILLDC',
                      argument1         => p_import_list_header_id
                   );
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
             p_msg_data        => 'Starting LEAD data upload program (AMSILLDC) -- concurrent program_id is '||to_char(l_request_id),
              p_msg_type        => 'DEBUG'
              );
         commit;
      IF l_request_id = 0 THEN
          RAISE FND_API.g_exc_unexpected_error;
     end if;
*/
    end if;
   end if;

--  STARTING CLIENT SIDE EVENT IMPORT --------------
--
--

    if l_import_type = 'EVENT' then
     if l_status_code = 'STAGED' then
      UPDATE ams_imp_list_headers_all
        set status_code       =  'SCHEDULED',
            loaded_date       =  sysdate,
            status_date       =  sysdate
      where import_list_header_id = p_import_list_header_id;

        -- Call the Validate Process
        if l_validate_file = 'Y' then
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Starting Validation for EVENT data.',
                  p_msg_type        => 'DEBUG'
                );
       -- Delete all the errors from the errors table which are reloaded.
                 delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id = 0;
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_RELOAD);

                l_return_status := null;
                execute_event_data_validation ( p_import_list_header_id, l_return_status);
             if l_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'EVENT import terminated because of error in Data validation process.',
                  p_msg_type        => 'DEBUG'
                );

                l_lookup_code := 'ERROR';
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR' and default_flag = 'Y';

                UPDATE ams_imp_list_headers_all
                set status_code       =  l_lookup_code,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;
                return;
             end if;

             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'End Validation for Event data.',
                  p_msg_type        => 'DEBUG'
                );
        end if;

      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'Starting client load for EVENT.',
         p_msg_type        => 'DEBUG'
       );
       ams_imp_reg_detail_pvt.LoadProcess(
                            l_msg_buf,
                            l_msg_code,
			    p_import_list_header_id
                         );
      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'End client load for EVENT.',
         p_msg_type        => 'DEBUG'
       );

      open c_error_exist;
      fetch c_error_exist into l_error_exist;
      close c_error_exist;
      if l_error_exist = 'Y' then
         l_lookup_code := 'ERROR';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'ERROR' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;
      if l_error_exist is NULL then
       l_lookup_code := 'COMPLETED';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'COMPLETED' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;
    -- Delete all the errors from the errors table which are sucessful.
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_SUCCESS);
     open c_loaded_records;
     fetch c_loaded_records into l_loaded_records;
     close c_loaded_records;
     open c_failed_records;
     fetch c_failed_records into l_failed_records;
     close c_failed_records;

         UPDATE ams_imp_list_headers_all
          SET loaded_no_of_rows = l_loaded_records,
            number_of_failed_records = l_failed_records,
            loaded_date = sysdate
         where import_list_header_id = p_import_list_header_id;
       -- end if;
      end if;
    end if;



if (l_import_type = 'EVENT' or l_import_type = 'LEAD')then

           l_total_records := 0;
           open c_total_records;
           fetch c_total_records into l_total_records;
           close c_total_records;
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data  => 'Total Number of records not processed: '||to_char(l_total_records),
                  p_msg_type        => 'DEBUG'
                );
END IF;

-- **********************************************************

EXCEPTION
       WHEN  others THEN
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
          raise;
end client_load_direct ;


-- -------------------------------------------
PROCEDURE client_load_cm (
                      Errbuf          OUT NOCOPY     VARCHAR2,
                      Retcode         OUT NOCOPY     VARCHAR2,
                      p_import_list_header_id IN    NUMBER,
                      p_owner_user_id         IN    NUMBER,
                      p_generate_list         IN    VARCHAR2 , -- Used for staged table import.
                      p_list_name             IN    VARCHAR2   -- For list generation name.
                     ) IS
l_return_status		varchar2(1);
BEGIN
                 client_load_direct (
                      p_import_list_header_id ,
                      p_owner_user_id,
                      p_generate_list,
                      p_list_name  );
EXCEPTION
       WHEN  others THEN
        AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => G_ARC_IMPORT_HEADER,
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => sqlerrm ,
         p_msg_type        => 'DEBUG'
        );
          raise;

end client_load_cm;


-- -------------------------------------------------------------

-- This program performs error checks errors for event import.

PROCEDURE execute_event_data_validation (
                            p_import_list_header_id NUMBER,
                            p_return_status OUT NOCOPY     VARCHAR2
                            ) IS

TYPE num_data_set_type_w IS
  TABLE OF NUMBER INDEX BY BINARY_INTEGER;

TYPE varchar2_250_set_type IS
        TABLE OF VARCHAR2(4000) INDEX BY BINARY_INTEGER;

L_MAX_ROW_COUNT                                 CONSTANT NUMBER := 1000;
l_batch_id						 NUMBER;
x_import_list_header_id				number;
x_import_source_line_id 			number;
l_message					varchar2(100);
l_invalid_number varchar2(4000) ;
l_invalid_size   varchar2(4000) ;
l_null_value     varchar2(4000) ;
l_invalid_src_system     varchar2(4000) ;
l_return_status           			varchar2(1);
l_total_rec	number;
l_source_system	varchar2(60);
l_error_exists  varchar2(1);



       l_import_source_line_id                 num_data_set_type_w;
       l_import_list_header_id                 num_data_set_type_w;

       l_col1	                               varchar2_250_set_type;
       l_col2 	                               varchar2_250_set_type;
       l_col3 	                               varchar2_250_set_type;
       l_col4 	                               varchar2_250_set_type;
       l_col5 	                               varchar2_250_set_type;
       l_col6 	                               varchar2_250_set_type;
       l_col7 	                               varchar2_250_set_type;
       l_col8 	                               varchar2_250_set_type;
       l_col9 	                               varchar2_250_set_type;
       l_col10 	                               varchar2_250_set_type;
       l_col11 	                               varchar2_250_set_type;
       l_col12 	                               varchar2_250_set_type;
       l_col13 	                               varchar2_250_set_type;
       l_col14 	                               varchar2_250_set_type;
       l_col15 	                               varchar2_250_set_type;
       l_col16 	                               varchar2_250_set_type;
       l_col17 	                               varchar2_250_set_type;
       l_col18 	                               varchar2_250_set_type;
       l_col19 	                               varchar2_250_set_type;
       l_col20 	                               varchar2_250_set_type;
       l_col21 	                               varchar2_250_set_type;
       l_col22 	                               varchar2_250_set_type;
       l_col23 	                               varchar2_250_set_type;
       l_col24 	                               varchar2_250_set_type;
       l_col25 	                               varchar2_250_set_type;
       l_col26 	                               varchar2_250_set_type;
       l_col27 	                               varchar2_250_set_type;
       l_col28 	                               varchar2_250_set_type;
       l_col29 	                               varchar2_250_set_type;
       l_col30 	                               varchar2_250_set_type;
       l_col31 	                               varchar2_250_set_type;
       l_col32 	                               varchar2_250_set_type;
       l_col33 	                               varchar2_250_set_type;
       l_col34 	                               varchar2_250_set_type;
       l_col35 	                               varchar2_250_set_type;
       l_col36 	                               varchar2_250_set_type;
       l_col37 	                               varchar2_250_set_type;
       l_col38 	                               varchar2_250_set_type;
       l_col39 	                               varchar2_250_set_type;
       l_col40 	                               varchar2_250_set_type;
       l_col41 	                               varchar2_250_set_type;
       l_col42 	                               varchar2_250_set_type;
       l_col43 	                               varchar2_250_set_type;
       l_col44 	                               varchar2_250_set_type;
       l_col45 	                               varchar2_250_set_type;
       l_col46 	                               varchar2_250_set_type;
       l_col47 	                               varchar2_250_set_type;
       l_col48 	                               varchar2_250_set_type;
       l_col49 	                               varchar2_250_set_type;
       l_col50 	                               varchar2_250_set_type;
       l_col51 	                               varchar2_250_set_type;
       l_col52 	                               varchar2_250_set_type;
       l_col53 	                               varchar2_250_set_type;
       l_col54 	                               varchar2_250_set_type;
       l_col55 	                               varchar2_250_set_type;
       l_col56 	                               varchar2_250_set_type;
       l_col57 	                               varchar2_250_set_type;
       l_col58 	                               varchar2_250_set_type;
       l_col59 	                               varchar2_250_set_type;
       l_col60 	                               varchar2_250_set_type;
       l_col61 	                               varchar2_250_set_type;
       l_col62 	                               varchar2_250_set_type;
       l_col63 	                               varchar2_250_set_type;
       l_col64 	                               varchar2_250_set_type;
       l_col65 	                               varchar2_250_set_type;
       l_col66 	                               varchar2_250_set_type;
       l_col67 	                               varchar2_250_set_type;
       l_col68 	                               varchar2_250_set_type;
       l_col69 	                               varchar2_250_set_type;
       l_col70 	                               varchar2_250_set_type;
       l_col71 	                               varchar2_250_set_type;
       l_col72 	                               varchar2_250_set_type;
       l_col73 	                               varchar2_250_set_type;
       l_col74 	                               varchar2_250_set_type;
       l_col75 	                               varchar2_250_set_type;
       l_col76 	                               varchar2_250_set_type;
       l_col77 	                               varchar2_250_set_type;
       l_col78 	                               varchar2_250_set_type;
       l_col79 	                               varchar2_250_set_type;
       l_col80 	                               varchar2_250_set_type;
       l_col81 	                               varchar2_250_set_type;
       l_col82 	                               varchar2_250_set_type;
       l_col83 	                               varchar2_250_set_type;
       l_col84 	                               varchar2_250_set_type;
       l_col85 	                               varchar2_250_set_type;
       l_col86 	                               varchar2_250_set_type;
       l_col87 	                               varchar2_250_set_type;
       l_col88 	                               varchar2_250_set_type;
       l_col89 	                               varchar2_250_set_type;
       l_col90 	                               varchar2_250_set_type;
       l_col91 	                               varchar2_250_set_type;
       l_col92 	                               varchar2_250_set_type;
       l_col93 	                               varchar2_250_set_type;
       l_col94 	                               varchar2_250_set_type;
       l_col95 	                               varchar2_250_set_type;
       l_col96 	                               varchar2_250_set_type;
       l_col97 	                               varchar2_250_set_type;
       l_col98 	                               varchar2_250_set_type;
       l_col99 	                               varchar2_250_set_type;
       l_col100                                varchar2_250_set_type;
       l_col101                                  varchar2_250_set_type;
       l_col102                                  varchar2_250_set_type;
       l_col103                                  varchar2_250_set_type;
       l_col104                                  varchar2_250_set_type;
       l_col105                                  varchar2_250_set_type;
       l_col106                                  varchar2_250_set_type;
       l_col107                                  varchar2_250_set_type;
       l_col108                                  varchar2_250_set_type;
       l_col109                                  varchar2_250_set_type;
       l_col110                                 varchar2_250_set_type;
       l_col111                                 varchar2_250_set_type;
       l_col112                                 varchar2_250_set_type;
       l_col113                                 varchar2_250_set_type;
       l_col114                                 varchar2_250_set_type;
       l_col115                                 varchar2_250_set_type;
       l_col116                                 varchar2_250_set_type;
       l_col117                                 varchar2_250_set_type;
       l_col118                                 varchar2_250_set_type;
       l_col119                                 varchar2_250_set_type;
       l_col120                                 varchar2_250_set_type;
       l_col121                                 varchar2_250_set_type;
       l_col122                                 varchar2_250_set_type;
       l_col123                                 varchar2_250_set_type;
       l_col124                                 varchar2_250_set_type;
       l_col125                                 varchar2_250_set_type;
       l_col126                                 varchar2_250_set_type;
       l_col127                                 varchar2_250_set_type;
       l_col128                                 varchar2_250_set_type;
       l_col129                                 varchar2_250_set_type;
       l_col130                                 varchar2_250_set_type;
       l_col131                                 varchar2_250_set_type;
       l_col132                                 varchar2_250_set_type;
       l_col133                                 varchar2_250_set_type;
       l_col134                                 varchar2_250_set_type;
       l_col135                                 varchar2_250_set_type;

CURSOR c_event_fields is
SELECT
import_source_line_id,
import_list_header_id,
DECODE(GREATEST(lengthb(LTRIM(RTRIM(EVENT_SOURCE_CODE))),100) - 100,0,' ','EVENT_SOURCE_CODE:'||decode(nvl(EVENT_SOURCE_CODE,'x'),'x',l_null_value,l_invalid_size)||'(100)') EVENT_SOURCE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REGISTRATION_SOURCE_TYPE)),'x')),30) - 30,0,' ','REGISTRATION_SOURCE_TYPE:'||l_invalid_size||'(30)') REGISTRATION_SOURCE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PARTY_NAME)),'x')),360) - 360,0,' ','REG_PARTY_NAME:'||l_invalid_size||'(360)') REG_PARTY_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SIC_CODE)),'x')),30) - 30,0,' ','REG_SIC_CODE:'||l_invalid_size||'(30)') REG_SIC_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SIC_CODE)),'x')),30) - 30,0,' ','ATT_SIC_CODE:'||l_invalid_size||'(30)') ATT_SIC_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ANALYSIS_FY)),'x')),5) - 5,0,' ','REG_ANALYSIS_FY:'||l_invalid_size||'(5)') REG_ANALYSIS_FY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ANALYSIS_FY)),'x')),5) - 5,0,' ','ATT_ANALYSIS_FY:'||l_invalid_size||'(5)') ATT_ANALYSIS_FY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CATEGORY_CODE)),'x')),30) -30,0,' ','REG_CATEGORY_CODE:'||l_invalid_size||'(30)') REG_CATEGORY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CATEGORY_CODE)),'x')),30) -30,0,' ','ATT_CATEGORY_CODE:'||l_invalid_size||'(30)') ATT_CATEGORY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_TAX_REFERENCE)),'x')),50) - 50,0,' ','REG_TAX_REFERENCE:'||l_invalid_size||'(50)') REG_TAX_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_TAX_REFERENCE)),'x')),50) - 50,0,' ','ATT_TAX_REFERENCE:'||l_invalid_size||'(50)') ATT_TAX_REFERENCE,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_YEAR_ESTABLISED,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_YEAR_ESTABLISED:'||l_invalid_number) ATT_YEAR_ESTABLISED,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_URL)),'x')),2000) - 2000,0,' ','REG_URL:'||l_invalid_size) REG_URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_URL)),'x')),2000) - 2000,0,' ','ATT_URL:'||l_invalid_size) ATT_URL,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_COUNTRY)),'x')),60) - 60,0,' ','REG_COUNTRY:'||l_invalid_size||'(60)') REG_COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_COUNTRY)),'x')),60) - 60,0,' ','ATT_COUNTRY:'||l_invalid_size||'(60)') ATT_COUNTRY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS1)),'x')),240) - 240,0,' ','REG_ADDRESS1:'||l_invalid_size||'(240)') REG_ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS2)),'x')),240) - 240,0,' ','REG_ADDRESS2:'||l_invalid_size||'(240)') REG_ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS3)),'x')),240) - 240,0,' ','REG_ADDRESS3:'||l_invalid_size||'(240)') REG_ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS4)),'x')),240) - 240,0,' ','REG_ADDRESS4:'||l_invalid_size||'(240)') REG_ADDRESS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CITY)),'x')),60) - 60,0,' ','REG_CITY:'||l_invalid_size||'(60)') REG_CITY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_POSTAL_CODE)),'x')),60) - 60,0,' ','REG_POSTAL_CODE:'||l_invalid_size||'(60)') REG_POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STATE)),'x')),60) - 60,0,' ','REG_STATE:'||l_invalid_size||'(60)') REG_STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PROVINCE)),'x')),60) - 60,0,' ','REG_PROVINCE:'||l_invalid_size||'(60)') REG_PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_COUNTY)),'x')),60) - 60,0,' ','REG_COUNTY:'||l_invalid_size||'(60)') REG_COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS1)),'x')),240) - 240,0,' ','ATT_ADDRESS1:'||l_invalid_size||'(240)') ATT_ADDRESS1,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS2)),'x')),240) - 240,0,' ','ATT_ADDRESS2:'||l_invalid_size||'(240)') ATT_ADDRESS2,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS3)),'x')),240) - 240,0,' ','ATT_ADDRESS3:'||l_invalid_size||'(240)') ATT_ADDRESS3,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS4)),'x')),240) - 240,0,' ','ATT_ADDRESS4:'||l_invalid_size||'(240)') ATT_ADDRESS4,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CITY)),'x')),60) - 60,0,' ','ATT_CITY:'||l_invalid_size||'(60)') ATT_CITY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_POSTAL_CODE)),'x')),60) - 60,0,' ','ATT_POSTAL_CODE:'||l_invalid_size||'(60)') ATT_POSTAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STATE)),'x')),60) - 60,0,' ','ATT_STATE:'||l_invalid_size||'(60)') ATT_STATE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PROVINCE)),'x')),60) - 60,0,' ','ATT_PROVINCE:'||l_invalid_size||'(60)') ATT_PROVINCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_COUNTY)),'x')),60) - 60,0,' ','ATT_COUNTY:'||l_invalid_size||'(60)') ATT_COUNTY,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_EMAIL_ADDRESS)),'x')),240) - 240,0,' ','REG_EMAIL_ADDRESS:'||l_invalid_size||'(240)') REG_EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_EMAIL_ADDRESS)),'x')),240) - 240,0,' ','ATT_EMAIL_ADDRESS:'||l_invalid_size||'(240)') ATT_EMAIL_ADDRESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_GENDER)),'x')),30) - 30,0,' ','REG_GENDER:'||l_invalid_size||'(30)') REG_GENDER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_GENDER)),'x')),30) - 30,0,' ','ATT_GENDER:'||l_invalid_size||'(30)') ATT_GENDER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_LAST_NAME)),'x')),50) - 50,0,' ','REG_LAST_NAME:'||l_invalid_size||'(50)') REG_LAST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_FIRST_NAME)),'x')),40) - 40,0,' ','REG_FIRST_NAME:'||l_invalid_size||'(40)') REG_FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_LAST_NAME)),'x')),50) - 50,0,' ','ATT_LAST_NAME:'||l_invalid_size||'(50)') ATT_LAST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_FIRST_NAME)),'x')),40) - 40,0,' ','ATT_FIRST_NAME:'||l_invalid_size||'(40)') ATT_FIRST_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_TITLE)),'x')),30) - 30,0,' ','REG_TITLE:'||l_invalid_size||'(30)') REG_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_TITLE)),'x')),30) - 30,0,' ','ATT_TITLE:'||l_invalid_size||'(30)') ATT_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_JOB_TITLE)),'x')),100) - 100,0,' ','REG_JOB_TITLE:'||l_invalid_size||'(100)') REG_JOB_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_JOB_TITLE)),'x')),100) - 100,0,' ','ATT_JOB_TITLE:'||l_invalid_size||'(100)') ATT_JOB_TITLE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_NUMBER)),'x')),25) - 25,0,' ','REG_PHONE_NUMBER:'||l_invalid_size||'(25)') REG_PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_AREA_CODE)),'x')),10) - 10,0,' ','REG_PHONE_AREA_CODE:'||l_invalid_size||'(10)') REG_PHONE_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_COUNTRY_CODE)),'x')),10) - 10,0,' ','REG_PHONE_COUNTRY_CODE:'||l_invalid_size||'(10)') REG_PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_EXTENSION)),'x')),20) - 20,0,' ','REG_PHONE_EXTENSION:'||l_invalid_size||'(20)') REG_PHONE_EXTENSION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_NUMBER)),'x')),25) - 25,0,' ','ATT_PHONE_NUMBER:'||l_invalid_size||'(25)') ATT_PHONE_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_AREA_CODE)),'x')),10) - 10,0,' ','ATT_PHONE_AREA_CODE:'||l_invalid_size||'(10)') ATT_PHONE_AREA_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_COUNTRY_CODE)),'x')),10) - 10,0,' ','ATT_PHONE_COUNTRY_CODE:'||l_invalid_size||'(10)') ATT_PHONE_COUNTRY_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_EXTENSION)),'x')),20) - 20,0,' ','ATT_PHONE_EXTENSION:'||l_invalid_size||'(20)') ATT_PHONE_EXTENSION,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_MIDDLE_NAME)),'x')),60) - 60,0,' ','REG_MIDDLE_NAME:'||l_invalid_size||'(10)') REG_MIDDLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_MIDDLE_NAME)),'x')),60) - 60,0,' ','ATT_MIDDLE_NAME:'||l_invalid_size||'(10)') ATT_MIDDLE_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATTENDANCE_FLAG)),'x')),1) - 1,0,' ','ATTENDANCE_FLAG:'||l_invalid_size||'(1)') ATTENDANCE_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CANCELLATION_FLAG)),'x')),1) - 1,0,' ','CANCELLATION_FLAG:'||l_invalid_size||'(1)') CANCELLATION_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_DECISION_MAKER_FLAG)),'x')),1) - 1,0,' ','REG_DECISION_MAKER_FLAG:'||l_invalid_size||'(1)') REG_DECISION_MAKER_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_GSA_INDICATOR_FLAG)),'x')),30) - 30,0,' ','REG_GSA_INDICATOR_FLAG:'||l_invalid_size||'(30)') REG_GSA_INDICATOR_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_GSA_INDICATOR_FLAG)),'x')),30) - 30,0,' ','ATT_GSA_INDICATOR_FLAG:'||l_invalid_size||'(30)') ATT_GSA_INDICATOR_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_IDENTIFYING_ADDRESS_FLAG)),'x')),1) - 1,0,' ','REG_IDENTIFYING_ADDRESS_FLAG:'||l_invalid_size||'(1)') REG_IDENTIFYING_ADDRESS_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_IDENTIFYING_ADDRESS_FLAG)),'x')),1) - 1,0,' ','ATT_IDENTIFYING_ADDRESS_FLAG:'||l_invalid_size||'(1)') ATT_IDENTIFYING_ADDRESS_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CONTACT_ME_FLAG)),'x')),1) - 1,0,' ','REG_CONTACT_ME_FLAG:'||l_invalid_size||'(1)') REG_CONTACT_ME_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_EMAIL_OK_FLAG)),'x')),1) - 1,0,' ','REG_EMAIL_OK_FLAG:'||l_invalid_size||'(1)') REG_EMAIL_OK_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_APT_FLAG)),'x')),1) - 1,0,' ','ATT_APT_FLAG:'||l_invalid_size||'(1)') ATT_APT_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_DECISION_MAKER_FLAG)),'x')),1) - 1,0,' ','ATT_DECISION_MAKER_FLAG:'||l_invalid_size||'(1)') ATT_DECISION_MAKER_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CONTACT_ME_FLAG)),'x')),1) - 1,0,' ','ATT_CONTACT_ME_FLAG:'||l_invalid_size||'(1)') ATT_CONTACT_ME_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_EMAIL_OK_FLAG)),'x')),1) - 1,0,' ','ATT_EMAIL_OK_FLAG:'||l_invalid_size||'(1)') ATT_EMAIL_OK_FLAG,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CANCELLATION_REASON_CODE)),'x')),30) - 30,0,' ','CANCELLATION_REASON_CODE:'||l_invalid_size||'(30)') CANCELLATION_REASON_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONFIRMATION_CODE)),'x')),30) - 30,0,' ','CONFIRMATION_CODE:'||l_invalid_size||'(30)') CONFIRMATION_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PARTY_TYPE)),'x')),30) - 30,0,' ','REG_PARTY_TYPE:'||l_invalid_size||'(30)') REG_PARTY_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PARTY_TYPE)),'x')),30) - 30,0,' ','ATT_PARTY_TYPE:'||l_invalid_size||'(30)') ATT_PARTY_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIGINAL_SYSTEM_REFERENCE)),'x')),240) - 240,0,' ','ORIGINAL_SYSTEM_REFERENCE:'||l_invalid_size||'(3)') ORIGINAL_SYSTEM_REFERENCE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PARTY_NAME)),'x')),360) - 360,0,' ','ATT_PARTY_NAME:'||l_invalid_size||'(360)') ATT_PARTY_NAME,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_PARTY_ID:'||l_invalid_number) REG_PARTY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_PARTY_ID:'||l_invalid_number) ATT_PARTY_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_CONTACT_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_CONTACT_ID:'||l_invalid_number) REG_CONTACT_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_CONTACT_ID,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_CONTACT_ID:'||l_invalid_number) ATT_CONTACT_ID,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_CURRENT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_CURRENT_FY_POTENTIAL_REV:'||l_invalid_number) REG_CURRENT_FY_POTENTIAL_REV,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_CURRENT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_CURRENT_FY_POTENTIAL_REV:'||l_invalid_number) ATT_CURRENT_FY_POTENTIAL_REV,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_NEXT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_NEXT_FY_POTENTIAL_REV:'||l_invalid_number) REG_NEXT_FY_POTENTIAL_REV,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_NEXT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_NEXT_FY_POTENTIAL_REV:'||l_invalid_number) ATT_NEXT_FY_POTENTIAL_REV,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_HOUSEHOLD_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_HOUSEHOLD_INCOME:'||l_invalid_number) REG_HOUSEHOLD_INCOME,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_HOUSEHOLD_INCOME,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_HOUSEHOLD_INCOME:'||l_invalid_number) ATT_HOUSEHOLD_INCOME,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_EMPLOYEE_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_EMPLOYEE_TOTAL:'||l_invalid_number) REG_EMPLOYEE_TOTAL,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_HOUSE_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_HOUSE_NUMBER:'||l_invalid_number) REG_HOUSE_NUMBER,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_YEAR_ESTABLISED,' ','x'))),'0123456789.','           x'))),0),0,' ','REG_YEAR_ESTABLISED:'||l_invalid_number) REG_YEAR_ESTABLISED,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_EMPLOYEE_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_EMPLOYEE_TOTAL:'||l_invalid_number) ATT_EMPLOYEE_TOTAL,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_FLOOR,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_FLOOR:'||l_invalid_number) ATT_FLOOR,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_HOUSE_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_HOUSE_NUMBER:'||l_invalid_number) ATT_HOUSE_NUMBER,
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_PO_BOX_NO,' ','x'))),'0123456789.','           x'))),0),0,' ','ATT_PO_BOX_NO:'||l_invalid_number) ATT_PO_BOX_NO,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_FLOOR)),'x')),50) - 50,0,' ','REG_FLOOR:'||l_invalid_size||'(50)') REG_FLOOR,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PO_BOX_NO)),'x')),50) - 50,0,' ','REG_PO_BOX_NO:'||l_invalid_size||'(50)') REG_PO_BOX_NO,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_POSTAL_PLUS4_CODE)),'x')),4) - 4,0,' ','REG_POSTAL_PLUS4_CODE:'||l_invalid_size||'(4)') REG_POSTAL_PLUS4_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_POSTAL_PLUS4_CODE)),'x')),4) - 4,0,' ','ATT_POSTAL_PLUS4_CODE:'||l_invalid_size||'(4)') ATT_POSTAL_PLUS4_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STREET)),'x')),50) - 50,0,' ','REG_STREET:'||l_invalid_size||'(50)') REG_STREET,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STREET_NUMBER)),'x')),50) - 50,0,' ','REG_STREET_NUMBER:'||l_invalid_size||'(50)') REG_STREET_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STREET_SUFFIX)),'x')),50) - 50,0,' ','REG_STREET_SUFFIX:'||l_invalid_size||'(50)') REG_STREET_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SUITE)),'x')),50) - 50,0,' ','REG_SUITE:'||l_invalid_size||'(50)') REG_SUITE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS_LINE_PHOENETIC)),'x')),360) -360,0,' ','REG_ADDRESS_LINE_PHOENETIC:'||l_invalid_size||'(360)') REG_ADDRESS_LINE_PHOENETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS_LINE_PHOENETIC)),'x')),360) -360,0,' ','ATT_ADDRESS_LINE_PHOENETIC:'||l_invalid_size||'(360)') ATT_ADDRESS_LINE_PHOENETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CEO_NAME)),'x')),360) -360,0,' ','REG_CEO_NAME:'||l_invalid_size||'(360)') REG_CEO_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CEO_NAME)),'x')),360) -360,0,' ','ATT_CEO_NAME:'||l_invalid_size||'(360)') ATT_CEO_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_DEPARTMENT)),'x')),360) -360,0,' ','REG_DEPARTMENT:'||l_invalid_size||'(360)') REG_DEPARTMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_DEPARTMENT)),'x')),360) -360,0,' ','ATT_DEPARTMENT:'||l_invalid_size||'(360)') ATT_DEPARTMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_DUN_NO_C)),'x')),30) - 30,0,' ','REG_DUN_NO_C:'||l_invalid_size||'(30)') REG_DUN_NO_C,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_DUN_NO)),'x')),30) - 30,0,' ','ATT_DUN_NO:'||l_invalid_size||'(30)') ATT_DUN_NO,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_FY_END_MONTH)),'x')),30) - 30,0,' ','ATT_FY_END_MONTH:'||l_invalid_size||'(30)') ATT_FY_END_MONTH,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_FY_END_MONTH)),'x')),30) - 30,0,' ','REG_FY_END_MONTH:'||l_invalid_size||'(30)') REG_FY_END_MONTH,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SIC_CODE)),'x')),30) - 30,0,' ','ATT_SIC_CODE:'||l_invalid_size||'(30)') ATT_SIC_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SIC_CODE_TYPE)),'x')),30) - 30,0,' ','ATT_SIC_CODE_TYPE:'||l_invalid_size||'(30)') ATT_SIC_CODE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ORG_LEGAL_STATUS)),'x')),30) - 30,0,' ','REG_ORG_LEGAL_STATUS:'||l_invalid_size||'(30)') REG_ORG_LEGAL_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SITE_USE_CODE)),'x')),30) - 30,0,' ','ATT_SITE_USE_CODE:'||l_invalid_size||'(30)') ATT_SITE_USE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STREET)),'x')),30) - 30,0,' ','ATT_STREET:'||l_invalid_size||'(30)') ATT_STREET,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STREET_NUMBER)),'x')),30) - 30,0,' ','ATT_STREET_NUMBER:'||l_invalid_size||'(30)') ATT_STREET_NUMBER,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STREET_SUFFIX)),'x')),30) - 30,0,' ','ATT_STREET_SUFFIX:'||l_invalid_size||'(30)') ATT_STREET_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SUITE)),'x')),30) - 30,0,' ','ATT_SUITE:'||l_invalid_size||'(30)') ATT_SUITE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_LEGAL_STATUS)),'x')),30) - 30,0,' ','ATT_LEGAL_STATUS:'||l_invalid_size||'(30)') ATT_LEGAL_STATUS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_NAME_SUFFIX)),'x')),30) - 30,0,' ','REG_NAME_SUFFIX:'||l_invalid_size||'(30)') REG_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_NAME_SUFFIX)),'x')),30) - 30,0,' ','ATT_NAME_SUFFIX:'||l_invalid_size||'(30)') ATT_NAME_SUFFIX,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SIC_CODE_TYPE)),'x')),30) - 30,0,' ','REG_SIC_CODE_TYPE:'||l_invalid_size||'(30)') REG_SIC_CODE_TYPE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SITE_USE_CODE)),'x')),30) - 30,0,' ','REG_SITE_USE_CODE:'||l_invalid_size||'(30)') REG_SITE_USE_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_TAX_NAME)),'x')),30) - 30,0,' ','REG_TAX_NAME:'||l_invalid_size||'(30)') REG_TAX_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_TAX_NAME)),'x')),30) - 30,0,' ','ATT_TAX_NAME:'||l_invalid_size||'(30)') ATT_TAX_NAME,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_JGZZ_FISCAL_CODE)),'x')),20) - 20,0,' ','REG_JGZZ_FISCAL_CODE:'||l_invalid_size||'(20)') REG_JGZZ_FISCAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_JGZZ_FISCAL_CODE)),'x')),20) - 20,0,' ','ATT_JGZZ_FISCAL_CODE:'||l_invalid_size||'(20)') ATT_JGZZ_FISCAL_CODE,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_MISSION_STATEMENT)),'x')),2000) - 2000,0,' ','ATT_MISSION_STATEMENT:'||l_invalid_size||'(2000)') ATT_MISSION_STATEMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ORG_NAME_PHOENETIC)),'x')),320) - 320,0,' ','REG_ORG_NAME_PHOENETIC:'||l_invalid_size||'(320)') REG_ORG_NAME_PHOENETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ORG_NAME_PHOENETIC)),'x')),320) - 320,0,' ','ATT_ORG_NAME_PHOENETIC:'||l_invalid_size||'(320)') ATT_ORG_NAME_PHOENETIC,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_MISSION_STATEMENT)),'x')),2000) - 2000,0,' ','REG_MISSION_STATEMENT:'||l_invalid_size||'(2000)') REG_MISSION_STATEMENT,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_LINE_OF_BUSINESS)),'x')),240) - 240,0,' ','REG_LINE_OF_BUSINESS:'||l_invalid_size||'(240)') REG_LINE_OF_BUSINESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SERVEY_NOTES)),'x')),240) - 240,0,' ','ATT_SERVEY_NOTES:'||l_invalid_size||'(240)') ATT_SERVEY_NOTES,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_LINE_OF_BUSINESS)),'x')),240) - 240,0,' ','ATT_LINE_OF_BUSINESS:'||l_invalid_size||'(240)') ATT_LINE_OF_BUSINESS,
DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SERVEY_NOTES)),'x')),240) - 240,0,' ','REG_SERVEY_NOTES:'||l_invalid_size||'(240)') REG_SERVEY_NOTES
FROM ams_event_mapping_v
WHERE import_list_header_id = p_import_list_header_id
  and load_status in ('ACTIVE','RELOAD')
  and
(
  DECODE(GREATEST(lengthb(LTRIM(RTRIM(EVENT_SOURCE_CODE))),100) - 100,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REGISTRATION_SOURCE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PARTY_NAME)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SIC_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SIC_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ANALYSIS_FY)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ANALYSIS_FY)),'x')),5) - 5,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CATEGORY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CATEGORY_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_CURRENT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_CURRENT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_NEXT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_NEXT_FY_POTENTIAL_REV,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_TAX_REFERENCE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_TAX_REFERENCE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_YEAR_ESTABLISED,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_URL)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_COUNTRY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS1)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS2)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS3)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS4)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CITY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_POSTAL_CODE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STATE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PROVINCE)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_COUNTY)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_EMAIL_ADDRESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_GENDER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_GENDER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_LAST_NAME)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_FIRST_NAME)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_LAST_NAME)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_FIRST_NAME)),'x')),40) - 40,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_TITLE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_JOB_TITLE)),'x')),100) - 100,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_JOB_TITLE)),'x')),100) - 100,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_COUNTRY_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PHONE_EXTENSION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_NUMBER)),'x')),25) - 25,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_AREA_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_COUNTRY_CODE)),'x')),10) - 10,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PHONE_EXTENSION)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_MIDDLE_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_MIDDLE_NAME)),'x')),60) - 60,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATTENDANCE_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CANCELLATION_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_DECISION_MAKER_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_GSA_INDICATOR_FLAG)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_IDENTIFYING_ADDRESS_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_IDENTIFYING_ADDRESS_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CONTACT_ME_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_EMAIL_OK_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_APT_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_DECISION_MAKER_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CONTACT_ME_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_EMAIL_OK_FLAG)),'x')),1) - 1,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CANCELLATION_REASON_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(CONFIRMATION_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PARTY_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PARTY_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ORIGINAL_SYSTEM_REFERENCE)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_PARTY_NAME)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_PARTY_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_CONTACT_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_CONTACT_ID,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_HOUSEHOLD_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_HOUSEHOLD_INCOME,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_EMPLOYEE_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_HOUSE_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(REG_YEAR_ESTABLISED,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_EMPLOYEE_TOTAL,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_FLOOR,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_HOUSE_NUMBER,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
DECODE(NVL(lengthb(trim(TRANSLATE(LTRIM(RTRIM(REPLACE(ATT_PO_BOX_NO,' ','x'))),'0123456789.','           x'))),0),0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_FLOOR)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_PO_BOX_NO)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_POSTAL_PLUS4_CODE)),'x')),4) - 4,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_POSTAL_PLUS4_CODE)),'x')),4) - 4,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STREET)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STREET_NUMBER)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_STREET_SUFFIX)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SUITE)),'x')),50) - 50,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ADDRESS_LINE_PHOENETIC)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ADDRESS_LINE_PHOENETIC)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_CEO_NAME)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_CEO_NAME)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_DEPARTMENT)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_DEPARTMENT)),'x')),360) - 360,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_DUN_NO_C)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_DUN_NO)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_FY_END_MONTH)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_FY_END_MONTH)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SIC_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SIC_CODE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ORG_LEGAL_STATUS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SITE_USE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STREET)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STREET_NUMBER)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_STREET_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SUITE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_LEGAL_STATUS)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_NAME_SUFFIX)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SIC_CODE_TYPE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_TAX_NAME)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_TAX_NAME)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SITE_USE_CODE)),'x')),30) - 30,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_JGZZ_FISCAL_CODE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_JGZZ_FISCAL_CODE)),'x')),20) - 20,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_MISSION_STATEMENT)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_ORG_NAME_PHOENETIC)),'x')),320) - 320,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_ORG_NAME_PHOENETIC)),'x')),320) - 320,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_MISSION_STATEMENT)),'x')),2000) - 2000,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_LINE_OF_BUSINESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_SERVEY_NOTES)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(ATT_LINE_OF_BUSINESS)),'x')),240) - 240,0,'OK','NO') = 'NO'
or
  DECODE(GREATEST(lengthb(nvl(LTRIM(RTRIM(REG_SERVEY_NOTES)),'x')),240) - 240,0,'OK','NO') = 'NO'
)
;

CURSOR c_lead_batch_id is
SELECT
batch_id
FROM ams_imp_list_headers_all
WHERE import_list_header_id = p_import_list_header_id;

begin

        IF p_import_list_header_id IS NULL THEN
                RAISE FND_API.G_EXC_ERROR;
        END IF;
    p_return_status := FND_API.G_RET_STS_SUCCESS;

    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_DATATYPE_ERROR_CHK');
    l_invalid_number := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_SIZE_ERROR_CHK');
    l_invalid_size := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_COL_NULL_ERROR_CHK');
    l_null_value := FND_MESSAGE.get;
    FND_MESSAGE.set_name('AMS', 'AMS_IMP_FLD_SOUR_SYS_ERROR_CHK');
    l_invalid_src_system := FND_MESSAGE.get;

    OPEN c_lead_batch_id;
    FETCH c_lead_batch_id into l_batch_id;
    CLOSE c_lead_batch_id;

    OPEN c_event_fields;
     LOOP
      FETCH c_event_fields BULK COLLECT INTO
       l_import_source_line_id,
       l_import_list_header_id,
       l_col1                                  ,
       l_col2                                  ,
       l_col3                                  ,
       l_col4                                  ,
       l_col5                                  ,
       l_col6                                  ,
       l_col7                                  ,
       l_col8                                  ,
       l_col9                                  ,
       l_col10                                 ,
       l_col11                                 ,
       l_col12                                 ,
       l_col13                                 ,
       l_col14                                 ,
       l_col15                                 ,
       l_col16                                 ,
       l_col17                                 ,
       l_col18                                 ,
       l_col19                                 ,
       l_col20                                 ,
       l_col21                                 ,
       l_col22                                 ,
       l_col23                                 ,
       l_col24                                 ,
       l_col25                                 ,
       l_col26                                 ,
       l_col27                                 ,
       l_col28                                 ,
       l_col29                                 ,
       l_col30                                 ,
       l_col31                                 ,
       l_col32                                 ,
       l_col33                                 ,
       l_col34                                 ,
       l_col35                                 ,
       l_col36                                 ,
       l_col37                                 ,
       l_col38                                 ,
       l_col39                                 ,
       l_col40                                 ,
       l_col41                                 ,
       l_col42                                 ,
       l_col43                                 ,
       l_col44                                 ,
       l_col45                                 ,
       l_col46                                 ,
       l_col47                                 ,
       l_col48                                 ,
       l_col49                                 ,
       l_col50                                 ,
       l_col51                                 ,
       l_col52                                 ,
       l_col53                                 ,
       l_col54                                 ,
       l_col55                                 ,
       l_col56                                 ,
       l_col57                                 ,
       l_col58                                 ,
       l_col59                                 ,
       l_col60                                 ,
       l_col61                                 ,
       l_col62                                 ,
       l_col63                                 ,
       l_col64                                 ,
       l_col65                                 ,
       l_col66                                 ,
       l_col67                                 ,
       l_col68                                 ,
       l_col69                                 ,
       l_col70                                 ,
       l_col71                                 ,
       l_col72                                 ,
       l_col73                                 ,
       l_col74                                 ,
       l_col75                                 ,
       l_col76                                 ,
       l_col77                                 ,
       l_col78                                 ,
       l_col79                                 ,
       l_col80                                 ,
       l_col81                                 ,
       l_col82                                 ,
       l_col83                                 ,
       l_col84                                 ,
       l_col85                                 ,
       l_col86                                 ,
       l_col87                                 ,
       l_col88                                 ,
       l_col89                                 ,
       l_col90                                 ,
       l_col91                                 ,
       l_col92                                 ,
       l_col93                                 ,
       l_col94                                 ,
       l_col95                                 ,
       l_col96                                 ,
       l_col97                                 ,
       l_col98                                 ,
       l_col99                                 ,
       l_col100                                ,
       l_col101                                  ,
       l_col102                                  ,
       l_col103                                  ,
       l_col104                                  ,
       l_col105                                  ,
       l_col106                                  ,
       l_col107                                  ,
       l_col108                                  ,
       l_col109                                  ,
       l_col110                                 ,
       l_col111                                 ,
       l_col112                                 ,
       l_col113                                 ,
       l_col114                                 ,
       l_col115                                 ,
       l_col116                                 ,
       l_col117                                 ,
       l_col118                                 ,
       l_col119                                 ,
       l_col120                                 ,
       l_col121                                 ,
       l_col122                                 ,
       l_col123                                 ,
       l_col124                                 ,
       l_col125                                 ,
       l_col126                                 ,
       l_col127                                 ,
       l_col128                                 ,
       l_col129                                 ,
       l_col130                                 ,
       l_col131                                 ,
       l_col132                                 ,
       l_col133                                 ,
       l_col134                                 ,
       l_col135
      LIMIT L_MAX_ROW_COUNT;


      FORALL i IN 1 .. l_import_source_line_id.count
       INSERT INTO ams_list_import_errors
       (
	LIST_IMPORT_ERROR_ID,
	LAST_UPDATED_BY,
	LAST_UPDATE_DATE,
	CREATION_DATE,
	CREATED_BY,
	LAST_UPDATE_LOGIN,
	IMPORT_SOURCE_LINE_ID,
	IMPORT_LIST_HEADER_ID,
	IMPORT_TYPE,
	ERROR_TYPE,
        BATCH_ID,
        ERROR_FLAG,
        col1                                  ,
        col2                                  ,
        col3                                  ,
        col4                                  ,
        col5                                  ,
        col6                                  ,
        col7                                  ,
        col8                                  ,
        col9                                  ,
        col10                                 ,
        col11                                 ,
        col12                                 ,
        col13                                 ,
        col14                                 ,
        col15                                 ,
        col16                                 ,
        col17                                 ,
        col18                                 ,
        col19                                 ,
        col20                                 ,
        col21                                 ,
        col22                                 ,
        col23                                 ,
        col24                                 ,
        col25                                 ,
        col26                                 ,
        col27                                 ,
        col28                                 ,
        col29                                 ,
        col30                                 ,
        col31                                 ,
        col32                                 ,
        col33                                 ,
        col34                                 ,
        col35                                 ,
        col36                                 ,
        col37                                 ,
        col38                                 ,
        col39                                 ,
        col40                                 ,
        col41                                 ,
        col42                                 ,
        col43                                 ,
        col44                                 ,
        col45                                 ,
        col46                                 ,
        col47                                 ,
        col48                                 ,
        col49                                 ,
        col50                                 ,
        col51                                 ,
        col52                                 ,
        col53                                 ,
        col54                                 ,
        col55                                 ,
        col56                                 ,
        col57                                 ,
        col58                                 ,
        col59                                 ,
        col60                                 ,
        col61                                 ,
        col62                                 ,
        col63                                 ,
        col64                                 ,
        col65                                 ,
        col66                                 ,
        col67                                 ,
        col68                                 ,
        col69                                 ,
        col70                                 ,
        col71                                 ,
        col72                                 ,
        col73                                 ,
        col74                                 ,
        col75                                 ,
        col76                                 ,
        col77                                 ,
        col78                                 ,
        col79                                 ,
        col80                                 ,
        col81                                 ,
        col82                                 ,
        col83                                 ,
        col84                                 ,
        col85                                 ,
        col86                                 ,
        col87                                 ,
        col88                                 ,
        col89                                 ,
        col90                                 ,
        col91                                 ,
        col92                                 ,
        col93                                 ,
        col94                                 ,
        col95                                 ,
        col96                                 ,
        col97                                 ,
        col98                                 ,
        col99                                 ,
        col100                                ,
        col101                                  ,
        col102                                  ,
        col103                                  ,
        col104                                  ,
        col105                                  ,
        col106                                  ,
        col107                                  ,
        col108                                  ,
        col109                                  ,
        col110                                 ,
        col111                                 ,
        col112                                 ,
        col113                                 ,
        col114                                 ,
        col115                                 ,
        col116                                 ,
        col117                                 ,
        col118                                 ,
        col119                                 ,
        col120                                 ,
        col121                                 ,
        col122                                 ,
        col123                                 ,
        col124                                 ,
        col125                                 ,
        col126                                 ,
        col127                                 ,
        col128                                 ,
        col129                                 ,
        col130                                 ,
        col131                                 ,
        col132                                 ,
        col133                                 ,
        col134                                 ,
        col135
        )
       VALUES
       (
	ams_list_import_errors_s.nextval,      -- LIST_IMPORT_ERROR_ID,
	FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
	SYSDATE,                              -- LAST_UPDATE_DATE,
	SYSDATE,                              -- CREATION_DATE,
	FND_GLOBAL.User_ID,                   -- CREATED_BY,
	FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
        l_import_source_line_id(i),
        l_import_list_header_id(i),
	'EVENT',                                -- IMPORT_TYPE,
	'E',                                  -- ERROR_TYPE,
        l_batch_id,
       'Y',
       l_col1(i),
       l_col2(i),
       l_col3(i),
       l_col4(i),
       l_col5(i),
       l_col6(i),
       l_col7(i),
       l_col8(i),
       l_col9(i),
       l_col10(i),
       l_col11(i),
       l_col12(i),
       l_col13(i),
       l_col14(i),
       l_col15(i),
       l_col16(i),
       l_col17(i),
       l_col18(i),
       l_col19(i),
       l_col20(i),
       l_col21(i),
       l_col22(i),
       l_col23(i),
       l_col24(i),
       l_col25(i),
       l_col26(i),
       l_col27(i),
       l_col28(i),
       l_col29(i),
       l_col30(i),
       l_col31(i),
       l_col32(i),
       l_col33(i),
       l_col34(i),
       l_col35(i),
       l_col36(i),
       l_col37(i),
       l_col38(i),
       l_col39(i),
       l_col40(i),
       l_col41(i),
       l_col42(i),
       l_col43(i),
       l_col44(i),
       l_col45(i),
       l_col46(i),
       l_col47(i),
       l_col48(i),
       l_col49(i),
       l_col50(i),
       l_col51(i),
       l_col52(i),
       l_col53(i),
       l_col54(i),
       l_col55(i),
       l_col56(i),
       l_col57(i),
       l_col58(i),
       l_col59(i),
       l_col60(i),
       l_col61(i),
       l_col62(i),
       l_col63(i),
       l_col64(i),
       l_col65(i),
       l_col66(i),
       l_col67(i),
       l_col68(i),
       l_col69(i),
       l_col70(i),
       l_col71(i),
       l_col72(i),
       l_col73(i),
       l_col74(i),
       l_col75(i),
       l_col76(i),
       l_col77(i),
       l_col78(i),
       l_col79(i),
       l_col80(i),
       l_col81(i),
       l_col82(i),
       l_col83(i),
       l_col84(i),
       l_col85(i),
       l_col86(i),
       l_col87(i),
       l_col88(i),
       l_col89(i),
       l_col90(i),
       l_col91(i),
       l_col92(i),
       l_col93(i),
       l_col94(i),
       l_col95(i),
       l_col96(i),
       l_col97(i),
       l_col98(i),
       l_col99(i),
       l_col100(i),
       l_col101(i),
       l_col102(i),
       l_col103(i),
       l_col104(i),
       l_col105(i),
       l_col106(i),
       l_col107(i),
       l_col108(i),
       l_col109(i),
       l_col110(i),
       l_col111(i),
       l_col112(i),
       l_col113(i),
       l_col114(i),
       l_col115(i),
       l_col116(i),
       l_col117(i),
       l_col118(i),
       l_col119(i),
       l_col120(i),
       l_col121(i),
       l_col122(i),
       l_col123(i),
       l_col124(i),
       l_col125(i),
       l_col126(i),
       l_col127(i),
       l_col128(i),
       l_col129(i),
       l_col130(i),
       l_col131(i),
       l_col132(i),
       l_col133(i),
       l_col134(i),
       l_col135(i)
       );
      EXIT WHEN c_event_fields%NOTFOUND;
    END LOOP;
      CLOSE c_event_fields;

      UPDATE ams_imp_source_lines
         SET load_status = 'ERROR'
       WHERE import_list_header_id = p_import_list_header_id
         and import_source_line_id in
       (select import_source_line_id from ams_list_import_errors
        where import_list_header_id = p_import_list_header_id
          and error_type = 'E');


EXCEPTION
 WHEN OTHERS THEN
    p_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in execute_event_data_validation:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end execute_event_data_validation;

--
-- This procedure generates the status of import
--
--
PROCEDURE process_status_code (
   p_import_list_header_id    IN    NUMBER
                            ) is


l_tot_numb_records            NUMBER;
l_tot_numb_error_records           NUMBER;
l_tot_numb_dup_records             NUMBER;
l_tot_numb_success_records         NUMBER;
l_tot_numb_active_records          NUMBER;
l_status_code                 VARCHAR2(30);
l_user_status_id              NUMBER;
L_RETURN_STATUS                    VARCHAR2(1);



cursor c_tot_numb_records is
     select count(*) from ams_imp_source_lines
     where import_list_header_id = p_import_list_header_id;

cursor c_tot_numb_error_records is
     select count(*) from ams_imp_source_lines
     where import_list_header_id = p_import_list_header_id
     and   load_status = G_STATUS_ERROR;

cursor c_tot_numb_dup_records is
     select count(*) from ams_imp_source_lines
     where import_list_header_id = p_import_list_header_id
     and   load_status = G_STATUS_DUPLICATE;

cursor c_tot_numb_success_records is
     select count(*) from ams_imp_source_lines
     where import_list_header_id = p_import_list_header_id
     and   load_status = G_STATUS_SUCCESS;

cursor c_tot_numb_active_records is
     select count(*) from ams_imp_source_lines
     where import_list_header_id = p_import_list_header_id
     and   load_status in ('ACTIVE','RELOAD');




begin
     open c_tot_numb_records;
     fetch c_tot_numb_records into l_tot_numb_records;
     close c_tot_numb_records;

     open c_tot_numb_error_records;
     fetch c_tot_numb_error_records into l_tot_numb_error_records;
     close c_tot_numb_error_records;

     open c_tot_numb_dup_records;
     fetch c_tot_numb_dup_records into l_tot_numb_dup_records;
     close c_tot_numb_dup_records;

        open c_tot_numb_success_records;
     fetch c_tot_numb_success_records into l_tot_numb_success_records;
     close c_tot_numb_success_records;

     open c_tot_numb_active_records;
     fetch c_tot_numb_active_records into l_tot_numb_active_records;
     close c_tot_numb_active_records;

     -- ALL SUCCESSFUL
        if (((l_tot_numb_records = l_tot_numb_success_records) and l_tot_numb_records > 0)
           and l_tot_numb_error_records = 0 and l_tot_numb_dup_records = 0) then
           l_status_code := 'COMPLETED';
     end if;

     -- ALL ERROR
        if (((l_tot_numb_records = l_tot_numb_error_records) and l_tot_numb_records > 0)
           and l_tot_numb_success_records = 0 and l_tot_numb_dup_records = 0) then
           l_status_code := 'ERROR';
     end if;

     -- ALL DUPLICATE
        if (((l_tot_numb_records = l_tot_numb_dup_records) and l_tot_numb_records > 0)
           and l_tot_numb_success_records = 0 and l_tot_numb_error_records = 0) then
           l_status_code := 'DUPLICATE';
     end if;

     -- INCOMPLETE WITH ERRORS
     if (l_tot_numb_success_records > 0 and l_tot_numb_error_records > 0
        and l_tot_numb_dup_records = 0) then
           l_status_code := 'INCOMPERR';
     end if;

     -- INCOMPLETE WITH DUPLICATES
     if (l_tot_numb_success_records > 0 and l_tot_numb_dup_records > 0
        and l_tot_numb_error_records = 0) then
           l_status_code := 'INCOMPDUP';
     end if;

     -- INCOMPLETE WITH DUPLICATES AND ERRORS
     if (l_tot_numb_success_records > 0 and l_tot_numb_dup_records > 0
        and l_tot_numb_error_records > 0) then
           l_status_code := 'INCOMPDUPERR';
     end if;

        -- CHECK ACTIVE/RELOAD STATUS RECORD
     if l_tot_numb_active_records > 0 then
              AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data        => 'Some of the records are not processed .' ,
                  p_msg_type        => 'DEBUG'
                );
     end if;

     if l_status_code is NULL then
            l_status_code := 'ERROR';
        end if;
        l_user_status_id := null;
        SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
        WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
        system_status_code = l_status_code and default_flag = 'Y';

        UPDATE ams_imp_list_headers_all
        set status_code                 =  l_status_code,
        user_status_id             =  l_user_status_id,
        loaded_no_of_rows          =  l_tot_numb_success_records,
     number_of_duplicate_records   =  l_tot_numb_dup_records,
     number_of_failed_records =  l_tot_numb_error_records,
        status_date                =  sysdate
        where import_list_header_id = p_import_list_header_id;

 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in process_status_code :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end process_status_code;

-- 00000000000000000000000000000000000000000000000000000000000000000000000000000000
-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-- This program is for customer import for XML data.

PROCEDURE Process_customers_xml (
    p_api_version_number        IN    NUMBER,
    p_init_msg_list             IN    VARCHAR2   := FND_API.G_FALSE,
    p_commit                    IN    VARCHAR2   := FND_API.G_FALSE,
    p_validation_level          IN    NUMBER     := FND_API.G_VALID_LEVEL_FULL,
    x_return_status             OUT NOCOPY   VARCHAR2,
    x_msg_count                 OUT NOCOPY   NUMBER,
    x_msg_data                  OUT NOCOPY   VARCHAR2,
    p_import_list_header_id     IN    NUMBER,
    p_update_flag               IN    VARCHAR2
) IS


   root_node_rec_type     AMS_IMP_XML_ELEMENTS%ROWTYPE;
   l_child_node_rec       AMS_IMP_XML_ELEMENTS%ROWTYPE;
   l_orgid_data_in_tbl    AMS_IMPORT_XML_PVT.xml_element_key_set_type;

   l_perid_data_in_tbl    AMS_IMPORT_XML_PVT.xml_element_key_set_type;

   l_cust_b2b_tbl 		cust_data_in_tbl;
   l_cust_b2c_tbl 		cust_b2c_data_in_tbl;
   l_cust_b2b_rec		data_in_rec_type;
   l_cust_b2c_rec		data_in_rec_b2c_type;

   l_b2b_flag	VARCHAR2(1);

  cursor c_b2b is
         select decode(import_type,'B2B','Y','N') from ams_imp_list_headers_all
         WHERE import_list_header_id = p_import_list_header_id;

begin

 open c_b2b;
 fetch c_b2b into l_b2b_flag;
 close c_b2b;


/********* Get the Root Node  *****************************/

  AMS_IMPORT_XML_PVT.Get_Root_Node (
    p_import_list_header_id    => p_import_list_header_id,
    x_node_rec                 => root_node_rec_type,
    x_return_status            => x_return_status,
    x_msg_data                 => x_msg_data);

    -- dbms_output.put_line( ' Root Id '||root_node_rec_type.IMP_XML_ELEMENT_ID);
IF l_b2b_flag = 'Y' then
/********* Get all the Organizations for the Root Node  *****************************/

  AMS_IMPORT_XML_PVT.Get_Children_Nodes (
    p_imp_xml_element_id => root_node_rec_type.IMP_XML_ELEMENT_ID,
    x_child_ids          => l_orgid_data_in_tbl,
    x_return_status      => x_return_status,
    x_msg_data           => x_msg_data);

    FOR i IN 1..l_orgid_data_in_tbl.COUNT LOOP
       -- dbms_output.put_line( ' Organizations Id '||l_orgid_data_in_tbl(i));
       -- dbms_output.put_line( ' Organizations count '||l_orgid_data_in_tbl.COUNT);

	 Process_b2b_xml_data (
                p_import_list_header_id   => p_import_list_header_id,
    		p_xml_element_id          => l_orgid_data_in_tbl(i),
    		p_cust_tbl                => l_cust_b2b_tbl,
    		x_return_status           => x_return_status,
    		x_msg_data                => x_msg_data);
       -- dbms_output.put_line( ' in Createtotal count '||l_cust_b2b_tbl.COUNT);
      Create_b2b_src_lines(
                p_import_list_header_id  => p_import_list_header_id,
                p_cust_b2b_tbl           => l_cust_b2b_tbl,
                x_return_status          => x_return_status,
                x_msg_data               => x_msg_data);
    END LOOP;
/*
      Create_b2b_src_lines(
                p_import_list_header_id  => p_import_list_header_id,
                p_cust_b2b_tbl           => l_cust_b2b_tbl,
                x_return_status          => x_return_status,
                x_msg_data               => x_msg_data);
*/
END if;

IF l_b2b_flag = 'N' then
/********* Get all the Persons for the Root Node  *****************************/

  AMS_IMPORT_XML_PVT.Get_Children_Nodes (
    p_imp_xml_element_id => root_node_rec_type.IMP_XML_ELEMENT_ID,
    x_child_ids          => l_perid_data_in_tbl,
    x_return_status      => x_return_status,
    x_msg_data           => x_msg_data);

    FOR i IN 1..l_perid_data_in_tbl.COUNT LOOP
       -- dbms_output.put_line( ' Person Id '||l_perid_data_in_tbl(i));
       -- dbms_output.put_line( ' Person count '||l_perid_data_in_tbl.COUNT);

         Process_b2c_xml_data (
                p_import_list_header_id   => p_import_list_header_id,
                p_xml_element_id          => l_perid_data_in_tbl(i),
                p_cust_tbl                => l_cust_b2c_tbl,
                x_return_status           => x_return_status,
                x_msg_data                => x_msg_data);

      Create_b2c_src_lines(
                p_import_list_header_id  => p_import_list_header_id,
                p_cust_b2c_tbl           => l_cust_b2c_tbl,
                x_return_status          => x_return_status,
                x_msg_data               => x_msg_data);
       -- dbms_output.put_line( ' total count '||l_cust_b2c_tbl.COUNT);
    END LOOP;
/*
      Create_b2c_src_lines(
                p_import_list_header_id  => p_import_list_header_id,
                p_cust_b2c_tbl           => l_cust_b2c_tbl,
                x_return_status          => x_return_status,
                x_msg_data               => x_msg_data);
*/
END if;

 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in Process_customers_xml :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );



end Process_customers_xml;
-- **********************************************
--
-- This program processes the xml data.

PROCEDURE Process_b2b_xml_data (
    p_import_list_header_id     IN    NUMBER,
    p_xml_element_id            IN    NUMBER,
    p_cust_tbl                  IN OUT NOCOPY   cust_data_in_tbl,
    x_return_status             OUT NOCOPY   VARCHAR2,
    x_msg_data                  OUT NOCOPY   VARCHAR2
) IS
   l_loc_element_id	NUMBER;
   l_oct_element_id	NUMBER;
   l_pho_element_id	NUMBER;
   l_ema_element_id	NUMBER;
   l_rec	NUMBER := 1;

 party_rec       hz_party_v2pub.party_rec_type;
 org_rec         hz_party_v2pub.organization_rec_type;
 person_rec      hz_party_v2pub.person_rec_type;
 location_rec    hz_location_v2pub.location_rec_type;
 psite_rec       hz_party_site_v2pub.party_site_rec_type;
 cpoint_rec      hz_contact_point_v2pub.contact_point_rec_type;
 email_rec       hz_contact_point_v2pub.email_rec_type;
 phone_rec       hz_contact_point_v2pub.phone_rec_type;
 ocon_rec        hz_party_contact_v2pub.org_contact_rec_type;
 edi_rec         hz_contact_point_v2pub.edi_rec_type;
 telex_rec       hz_contact_point_v2pub.telex_rec_type;
 web_rec         hz_contact_point_v2pub.web_rec_type;


   l_orgid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_locid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_addid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_octid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_conid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_phoid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_phiid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_emaid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_emlid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_customer_tbl 		cust_data_in_tbl;

begin
    /********* Get all the elements for the Organizations *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => p_xml_element_id,
        x_child_set          => l_orgid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

       -- dbms_output.put_line( ' Organizations attribute count '||l_orgid_record_in_tbl.COUNT);
/*
       FOR i IN 1..l_orgid_record_in_tbl.COUNT LOOP
       -- dbms_output.put_line('Org att '||l_orgid_record_in_tbl(i).column_name||'>>>'||l_orgid_record_in_tbl(i).data);
       END LOOP;
*/
       l_customer_tbl(l_rec).cust_data_id := l_rec;
       l_customer_tbl(l_rec).org_imp_xml_element_id := p_xml_element_id;
       l_customer_tbl(l_rec).PARTY_NAME := Get_Element_VALUE('PARTY_NAME',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).FISCAL_YEAREND_MONTH := Get_Element_VALUE('FISCAL_YEAREND_MONTH',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).DUNS_NUMBER := Get_Element_VALUE('DUNS_NUMBER',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).EMPLOYEES_TOTAL := Get_Element_VALUE('EMPLOYEES_TOTAL',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).LINE_OF_BUSINESS := Get_Element_VALUE('LINE_OF_BUSINESS',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).YEAR_ESTABLISHED := Get_Element_VALUE('YEAR_ESTABLISHED',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).TAX_REFERENCE := Get_Element_VALUE('TAX_REFERENCE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := Get_Element_VALUE('ORIG_SYSTEM_REFERENCE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).CEO_NAME := Get_Element_VALUE('CEO_NAME',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).SIC_CODE := Get_Element_VALUE('SIC_CODE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).SIC_CODE_TYPE := Get_Element_VALUE('SIC_CODE_TYPE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).ANALYSIS_FY := Get_Element_VALUE('ANALYSIS_FY',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).CURR_FY_POTENTIAL_REVENUE := Get_Element_VALUE('CURR_FY_POTENTIAL_REVENUE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).NEXT_FY_POTENTIAL_REVENUE := Get_Element_VALUE('NEXT_FY_POTENTIAL_REVENUE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).GSA_INDICATOR_FLAG := Get_Element_VALUE('GSA_INDICATOR_FLAG',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).MISSION_STATEMENT := Get_Element_VALUE('MISSION_STATEMENT',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).ORGANIZATION_NAME_PHONETIC := Get_Element_VALUE('ORGANIZATION_NAME_PHONETIC',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).CATEGORY_CODE := Get_Element_VALUE('CATEGORY_CODE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).JGZZ_FISCAL_CODE := Get_Element_VALUE('JGZZ_FISCAL_CODE',l_orgid_record_in_tbl);
       l_customer_tbl(l_rec).PARTY_ID := Get_Element_VALUE('PARTY_ID',l_orgid_record_in_tbl);

l_customer_tbl(l_rec).BRANCH_FLAG := Get_Element_VALUE('BRANCH_FLAG',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).BUSINESS_LINE := Get_Element_VALUE('BUSINESS_LINE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).BUSINESS_SCOPE := Get_Element_VALUE('BUSINESS_SCOPE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CHIEF_EXECUTIVE_TITLE := Get_Element_VALUE('CHIEF_EXECUTIVE_TITLE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CONGRESSIONAL_DISTRICT_CODE := Get_Element_VALUE('CONGRESSIONAL_DISTRICT_CODE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CONTROL_YEAR := Get_Element_VALUE('CONTROL_YEAR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CORPORATION_CLASS := Get_Element_VALUE('CORPORATION_CLASS',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CREDIT_SCORE := Get_Element_VALUE('CREDIT_SCORE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CREDIT_SCORE_COMMENTARY := Get_Element_VALUE('CREDIT_SCORE_COMMENTARY',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).CUSTOMER_CATEGORY := Get_Element_VALUE('CUSTOMER_CATEGORY',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).DB_RATING := Get_Element_VALUE('DB_RATING',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).DEBARMENTS_COUNT := Get_Element_VALUE('DEBARMENTS_COUNT',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).DEBARTMENTS_DATE := Get_Element_VALUE('DEBARTMENTS_DATE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).DEPARTMENT_INDICATOR := Get_Element_VALUE('DEPARTMENT_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).DISADVANTAGED_INDICATOR := Get_Element_VALUE('DISADVANTAGED_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ENQUIRY_DUNS := Get_Element_VALUE('ENQUIRY_DUNS',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).EXPORT_INDICATOR := Get_Element_VALUE('EXPORT_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).FAILURE_SCORE := Get_Element_VALUE('FAILURE_SCORE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).FAILURE_SCORE_COMMENTARY := Get_Element_VALUE('FAILURE_SCORE_COMMENTARY',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).FAILURE_SCORE_NATL_PERCENTILE := Get_Element_VALUE('FAILURE_SCORE_NATL_PERCENTILE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).FAILURE_SCORE_OVERRIDE_CODE := Get_Element_VALUE('FAILURE_SCORE_OVERRIDE_CODE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).GLOBAL_FAILURE_SCORE := Get_Element_VALUE('GLOBAL_FAILURE_SCORE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).HEADQUARTER_BRANCH_INDICATOR := Get_Element_VALUE('HEADQUARTER_BRANCH_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).IMPORT_INDICATOR := Get_Element_VALUE('IMPORT_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS := Get_Element_VALUE('ORGANIZATION_KNOWN_AS',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS2 := Get_Element_VALUE('ORGANIZATION_KNOWN_AS2',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS3 := Get_Element_VALUE('ORGANIZATION_KNOWN_AS3',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS4 := Get_Element_VALUE('ORGANIZATION_KNOWN_AS4',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS5 := Get_Element_VALUE('ORGANIZATION_KNOWN_AS5',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).LABOR_SURPLUS_INDICATOR := Get_Element_VALUE('LABOR_SURPLUS_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE := Get_Element_VALUE('LOCAL_ACTIVITY_CODE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE_TYPE := Get_Element_VALUE('LOCAL_ACTIVITY_CODE_TYPE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).MINORITY_OWNED_INDICATOR := Get_Element_VALUE('MINORITY_OWNED_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).MINORITY_OWNED_TYPE := Get_Element_VALUE('MINORITY_OWNED_TYPE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_TYPE := Get_Element_VALUE('ORGANIZATION_TYPE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_URL := Get_Element_VALUE('ORGANIZATION_URL',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).OUT_OF_BUSINESS_INDICATOR := Get_Element_VALUE('OUT_OF_BUSINESS_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).PRINCIPAL_NAME := Get_Element_VALUE('PRINCIPAL_NAME',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).PRINCIPAL_TITLE := Get_Element_VALUE('PRINCIPAL_TITLE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).PUBLIC_PRIVATE_OWNERSHIP_FLAG := Get_Element_VALUE('PUBLIC_PRIVATE_OWNERSHIP_FLAG',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := Get_Element_VALUE('RENT_OWNED_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).RENT_OWNER_INDICATOR := Get_Element_VALUE('RENT_OWNER_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).SMALL_BUSINESS_INDICATOR := Get_Element_VALUE('SMALL_BUSINESS_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).WOMAN_OWNED_INDICATOR := Get_Element_VALUE('WOMAN_OWNED_INDICATOR',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORG_ATTRIBUTE_CATEGORY := Get_Element_VALUE('ORG_ATTRIBUTE_CATEGORY',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE1 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE1',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE2 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE2',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE3 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE3',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE4 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE4',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE5 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE5',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE6 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE6',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE7 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE7',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE8 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE8',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE9 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE9',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE10 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE10',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE11 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE11',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE12 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE12',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE13 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE13',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE14 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE14',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE15 := Get_Element_VALUE('ORGANIZATION_ATTRIBUTE15',l_orgid_record_in_tbl);


l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := Get_Element_VALUE('VEHICLE_RESPONSE_CODE',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := Get_Element_VALUE('SALES_AGENT_EMAIL_ID',l_orgid_record_in_tbl);
l_customer_tbl(l_rec).NOTES := Get_Element_VALUE('NOTES',l_orgid_record_in_tbl);



/*
       -- dbms_output.put_line( ' cust_data_id '||l_customer_tbl(l_rec).cust_data_id);
       -- dbms_output.put_line( ' org_imp_xml_element_id '||l_customer_tbl(l_rec).org_imp_xml_element_id);
       -- dbms_output.put_line( ' Pat-name '||l_customer_tbl(l_rec).PARTY_NAME);
*/
       -- Process for location data.
       l_loc_element_id := Get_Element_ID('LOCATION',l_orgid_record_in_tbl);
       -- dbms_output.put_line( ' l_loc_element_id = '||to_char(l_loc_element_id));

    /********* Get all the elements for the location *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_loc_element_id,
        x_child_set          => l_locid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
       -- dbms_output.put_line( ' Location attribute count '||l_locid_record_in_tbl.COUNT);
       FOR i IN 1..l_locid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_locid_record_in_tbl(i).imp_xml_element_id,
        x_child_set          => l_addid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

        l_rec := l_customer_tbl.count;
         if i > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;
             l_customer_tbl(l_rec).org_imp_xml_element_id := l_customer_tbl(l_rec - 1).org_imp_xml_element_id;
             l_customer_tbl(l_rec).party_name := l_customer_tbl(l_rec - 1).party_name;
             l_customer_tbl(l_rec).FISCAL_YEAREND_MONTH := l_customer_tbl(l_rec - 1).FISCAL_YEAREND_MONTH;
             l_customer_tbl(l_rec).DUNS_NUMBER := l_customer_tbl(l_rec - 1).DUNS_NUMBER;
             l_customer_tbl(l_rec).EMPLOYEES_TOTAL := l_customer_tbl(l_rec - 1).EMPLOYEES_TOTAL;
             l_customer_tbl(l_rec).LINE_OF_BUSINESS := l_customer_tbl(l_rec - 1).LINE_OF_BUSINESS;
             l_customer_tbl(l_rec).YEAR_ESTABLISHED := l_customer_tbl(l_rec - 1).YEAR_ESTABLISHED;
             l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
             l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
             l_customer_tbl(l_rec).CEO_NAME := l_customer_tbl(l_rec - 1).CEO_NAME;
             l_customer_tbl(l_rec).SIC_CODE := l_customer_tbl(l_rec - 1).SIC_CODE;
             l_customer_tbl(l_rec).SIC_CODE_TYPE := l_customer_tbl(l_rec - 1).SIC_CODE_TYPE;
             l_customer_tbl(l_rec).ANALYSIS_FY := l_customer_tbl(l_rec - 1).ANALYSIS_FY;
             l_customer_tbl(l_rec).CURR_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).CURR_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).NEXT_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).NEXT_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).GSA_INDICATOR_FLAG := l_customer_tbl(l_rec - 1).GSA_INDICATOR_FLAG;
             l_customer_tbl(l_rec).MISSION_STATEMENT := l_customer_tbl(l_rec - 1).MISSION_STATEMENT;
             l_customer_tbl(l_rec).ORGANIZATION_NAME_PHONETIC := l_customer_tbl(l_rec - 1).ORGANIZATION_NAME_PHONETIC;
             l_customer_tbl(l_rec).CATEGORY_CODE := l_customer_tbl(l_rec - 1).CATEGORY_CODE;
             l_customer_tbl(l_rec).JGZZ_FISCAL_CODE := l_customer_tbl(l_rec - 1).JGZZ_FISCAL_CODE;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;
l_customer_tbl(l_rec).BRANCH_FLAG := l_customer_tbl(l_rec - 1).BRANCH_FLAG;
l_customer_tbl(l_rec).BUSINESS_LINE := l_customer_tbl(l_rec - 1).BUSINESS_LINE;
l_customer_tbl(l_rec).BUSINESS_SCOPE := l_customer_tbl(l_rec - 1).BUSINESS_SCOPE;
l_customer_tbl(l_rec).CHIEF_EXECUTIVE_TITLE := l_customer_tbl(l_rec - 1).CHIEF_EXECUTIVE_TITLE;
l_customer_tbl(l_rec).CONGRESSIONAL_DISTRICT_CODE := l_customer_tbl(l_rec - 1).CONGRESSIONAL_DISTRICT_CODE;
l_customer_tbl(l_rec).CONTROL_YEAR := l_customer_tbl(l_rec - 1).CONTROL_YEAR;
l_customer_tbl(l_rec).CORPORATION_CLASS := l_customer_tbl(l_rec - 1).CORPORATION_CLASS;
l_customer_tbl(l_rec).CREDIT_SCORE := l_customer_tbl(l_rec - 1).CREDIT_SCORE;
l_customer_tbl(l_rec).CREDIT_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).CREDIT_SCORE_COMMENTARY;
l_customer_tbl(l_rec).CUSTOMER_CATEGORY := l_customer_tbl(l_rec - 1).CUSTOMER_CATEGORY;
l_customer_tbl(l_rec).DB_RATING := l_customer_tbl(l_rec - 1).DB_RATING;
l_customer_tbl(l_rec).DEBARMENTS_COUNT := l_customer_tbl(l_rec - 1).DEBARMENTS_COUNT;
l_customer_tbl(l_rec).DEBARTMENTS_DATE := l_customer_tbl(l_rec - 1).DEBARTMENTS_DATE;
l_customer_tbl(l_rec).DEPARTMENT_INDICATOR := l_customer_tbl(l_rec - 1).DEPARTMENT_INDICATOR;
l_customer_tbl(l_rec).DISADVANTAGED_INDICATOR := l_customer_tbl(l_rec - 1).DISADVANTAGED_INDICATOR;
l_customer_tbl(l_rec).ENQUIRY_DUNS := l_customer_tbl(l_rec - 1).ENQUIRY_DUNS;
l_customer_tbl(l_rec).EXPORT_INDICATOR := l_customer_tbl(l_rec - 1).EXPORT_INDICATOR;
l_customer_tbl(l_rec).FAILURE_SCORE := l_customer_tbl(l_rec - 1).FAILURE_SCORE;
l_customer_tbl(l_rec).FAILURE_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).FAILURE_SCORE_COMMENTARY;
l_customer_tbl(l_rec).FAILURE_SCORE_NATL_PERCENTILE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_NATL_PERCENTILE;
l_customer_tbl(l_rec).FAILURE_SCORE_OVERRIDE_CODE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_OVERRIDE_CODE;
l_customer_tbl(l_rec).GLOBAL_FAILURE_SCORE := l_customer_tbl(l_rec - 1).GLOBAL_FAILURE_SCORE;
l_customer_tbl(l_rec).HEADQUARTER_BRANCH_INDICATOR := l_customer_tbl(l_rec - 1).HEADQUARTER_BRANCH_INDICATOR;
l_customer_tbl(l_rec).IMPORT_INDICATOR := l_customer_tbl(l_rec - 1).IMPORT_INDICATOR;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS2 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS2;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS3 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS3;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS4 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS4;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS5 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS5;
l_customer_tbl(l_rec).LABOR_SURPLUS_INDICATOR := l_customer_tbl(l_rec - 1).LABOR_SURPLUS_INDICATOR;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE_TYPE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE_TYPE;
l_customer_tbl(l_rec).MINORITY_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).MINORITY_OWNED_INDICATOR;
l_customer_tbl(l_rec).MINORITY_OWNED_TYPE := l_customer_tbl(l_rec - 1).MINORITY_OWNED_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_TYPE := l_customer_tbl(l_rec - 1).ORGANIZATION_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_URL := l_customer_tbl(l_rec - 1).ORGANIZATION_URL;
l_customer_tbl(l_rec).OUT_OF_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).OUT_OF_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).PRINCIPAL_NAME := l_customer_tbl(l_rec - 1).PRINCIPAL_NAME;
l_customer_tbl(l_rec).PRINCIPAL_TITLE := l_customer_tbl(l_rec - 1).PRINCIPAL_TITLE;
l_customer_tbl(l_rec).PUBLIC_PRIVATE_OWNERSHIP_FLAG := l_customer_tbl(l_rec - 1).PUBLIC_PRIVATE_OWNERSHIP_FLAG;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).RENT_OWNER_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNER_INDICATOR;
l_customer_tbl(l_rec).SMALL_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).SMALL_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).WOMAN_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).WOMAN_OWNED_INDICATOR;
l_customer_tbl(l_rec).ORG_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ORG_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE1;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE2;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE3;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE4;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE5;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE6;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE7;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE8;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE9;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE10;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE11;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE12;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE13;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE14;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE15;
l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;
         end if;
         -- l_customer_tbl(l_rec).add_imp_xml_element_id := l_addid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).add_imp_xml_element_id := l_locid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).address1 := Get_Element_VALUE('ADDRESS1',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).address2 := Get_Element_VALUE('ADDRESS2',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).address3 := Get_Element_VALUE('ADDRESS3',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).address4 := Get_Element_VALUE('ADDRESS4',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).CITY := Get_Element_VALUE('CITY',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).COUNTY := Get_Element_VALUE('COUNTY',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).PROVINCE := Get_Element_VALUE('PROVINCE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).STATE := Get_Element_VALUE('STATE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).POSTAL_CODE := Get_Element_VALUE('POSTAL_CODE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).COUNTRY := Get_Element_VALUE('COUNTRY',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).ADDRESS_LINES_PHONETIC := Get_Element_VALUE('ADDRESS_LINES_PHONETIC',l_addid_record_in_tbl);
-- bug 4641591: columns obsolete
--	 l_customer_tbl(l_rec).PO_BOX_NUMBER := Get_Element_VALUE('PO_BOX_NUMBER',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).HOUSE_NUMBER := Get_Element_VALUE('HOUSE_NUMBER',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).STREET_SUFFIX := Get_Element_VALUE('STREET_SUFFIX',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).STREET := Get_Element_VALUE('STREET',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).STREET_NUMBER := Get_Element_VALUE('STREET_NUMBER',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).FLOOR := Get_Element_VALUE('FLOOR',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).SUITE := Get_Element_VALUE('SUITE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).POSTAL_PLUS4_CODE := Get_Element_VALUE('POSTAL_PLUS4_CODE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).IDENTIFYING_ADDRESS_FLAG := Get_Element_VALUE('IDENTIFYING_ADDRESS_FLAG',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := Get_Element_VALUE('ADDRESS_ATTRIBUTE1',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := Get_Element_VALUE('ADDRESS_ATTRIBUTE2',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := Get_Element_VALUE('ADDRESS_ATTRIBUTE3',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := Get_Element_VALUE('ADDRESS_ATTRIBUTE4',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := Get_Element_VALUE('ADDRESS_ATTRIBUTE5',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := Get_Element_VALUE('ADDRESS_ATTRIBUTE6',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := Get_Element_VALUE('ADDRESS_ATTRIBUTE7',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := Get_Element_VALUE('ADDRESS_ATTRIBUTE8',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := Get_Element_VALUE('ADDRESS_ATTRIBUTE9',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := Get_Element_VALUE('ADDRESS_ATTRIBUTE10',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := Get_Element_VALUE('ADDRESS_ATTRIBUTE11',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := Get_Element_VALUE('ADDRESS_ATTRIBUTE12',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := Get_Element_VALUE('ADDRESS_ATTRIBUTE13',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := Get_Element_VALUE('ADDRESS_ATTRIBUTE14',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := Get_Element_VALUE('ADDRESS_ATTRIBUTE15',l_addid_record_in_tbl);
l_customer_tbl(l_rec).DESCRIPTION := Get_Element_VALUE('DESCRIPTION',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := Get_Element_VALUE('ADDRESS_ATTRIBUTE_CATEGORY',l_addid_record_in_tbl);
l_customer_tbl(l_rec).PARTY_SITE_USE := Get_Element_VALUE('PARTY_SITE_USE',l_addid_record_in_tbl);
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := Get_Element_VALUE('LOCATION_DIRECTIONS',l_addid_record_in_tbl);
l_customer_tbl(l_rec).SHORT_DESCRIPTION := Get_Element_VALUE('SHORT_DESCRIPTION',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := Get_Element_VALUE('ADDRESS_EFFECTIVE_DATE',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := Get_Element_VALUE('ADDRESS_EXPIRATION_DATE',l_addid_record_in_tbl);

         l_rec := 0;
     -- ****************************** End Location process

       -- Process for Org Contact data.
       l_oct_element_id := Get_Element_ID('ORG_CONTACT',l_addid_record_in_tbl);
       -- dbms_output.put_line( ' l_oct_element_id = '||to_char(l_oct_element_id));

    /********* Get all the elements for Org Contact *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_oct_element_id,
        x_child_set          => l_octid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
       -- dbms_output.put_line( ' Org Con attribute count '||l_octid_record_in_tbl.COUNT);
       FOR j IN 1..l_octid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_octid_record_in_tbl(j).imp_xml_element_id,
        x_child_set          => l_conid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

        l_rec := l_customer_tbl.count;
         if j > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;
             l_customer_tbl(l_rec).org_imp_xml_element_id := l_customer_tbl(l_rec - 1).org_imp_xml_element_id;
             l_customer_tbl(l_rec).party_name := l_customer_tbl(l_rec - 1).party_name;
             l_customer_tbl(l_rec).FISCAL_YEAREND_MONTH := l_customer_tbl(l_rec - 1).FISCAL_YEAREND_MONTH;
             l_customer_tbl(l_rec).DUNS_NUMBER := l_customer_tbl(l_rec - 1).DUNS_NUMBER;
             l_customer_tbl(l_rec).EMPLOYEES_TOTAL := l_customer_tbl(l_rec - 1).EMPLOYEES_TOTAL;
             l_customer_tbl(l_rec).LINE_OF_BUSINESS := l_customer_tbl(l_rec - 1).LINE_OF_BUSINESS;
             l_customer_tbl(l_rec).YEAR_ESTABLISHED := l_customer_tbl(l_rec - 1).YEAR_ESTABLISHED;
             l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
             l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
             l_customer_tbl(l_rec).CEO_NAME := l_customer_tbl(l_rec - 1).CEO_NAME;
             l_customer_tbl(l_rec).SIC_CODE := l_customer_tbl(l_rec - 1).SIC_CODE;
             l_customer_tbl(l_rec).SIC_CODE_TYPE := l_customer_tbl(l_rec - 1).SIC_CODE_TYPE;
             l_customer_tbl(l_rec).ANALYSIS_FY := l_customer_tbl(l_rec - 1).ANALYSIS_FY;
             l_customer_tbl(l_rec).CURR_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).CURR_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).NEXT_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).NEXT_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).GSA_INDICATOR_FLAG := l_customer_tbl(l_rec - 1).GSA_INDICATOR_FLAG;
             l_customer_tbl(l_rec).MISSION_STATEMENT := l_customer_tbl(l_rec - 1).MISSION_STATEMENT;
             l_customer_tbl(l_rec).ORGANIZATION_NAME_PHONETIC := l_customer_tbl(l_rec - 1).ORGANIZATION_NAME_PHONETIC;
             l_customer_tbl(l_rec).CATEGORY_CODE := l_customer_tbl(l_rec - 1).CATEGORY_CODE;
             l_customer_tbl(l_rec).JGZZ_FISCAL_CODE := l_customer_tbl(l_rec - 1).JGZZ_FISCAL_CODE;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;
l_customer_tbl(l_rec).BRANCH_FLAG := l_customer_tbl(l_rec - 1).BRANCH_FLAG;
l_customer_tbl(l_rec).BUSINESS_LINE := l_customer_tbl(l_rec - 1).BUSINESS_LINE;
l_customer_tbl(l_rec).BUSINESS_SCOPE := l_customer_tbl(l_rec - 1).BUSINESS_SCOPE;
l_customer_tbl(l_rec).CHIEF_EXECUTIVE_TITLE := l_customer_tbl(l_rec - 1).CHIEF_EXECUTIVE_TITLE;
l_customer_tbl(l_rec).CONGRESSIONAL_DISTRICT_CODE := l_customer_tbl(l_rec - 1).CONGRESSIONAL_DISTRICT_CODE;
l_customer_tbl(l_rec).CONTROL_YEAR := l_customer_tbl(l_rec - 1).CONTROL_YEAR;
l_customer_tbl(l_rec).CORPORATION_CLASS := l_customer_tbl(l_rec - 1).CORPORATION_CLASS;
l_customer_tbl(l_rec).CREDIT_SCORE := l_customer_tbl(l_rec - 1).CREDIT_SCORE;
l_customer_tbl(l_rec).CREDIT_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).CREDIT_SCORE_COMMENTARY;
l_customer_tbl(l_rec).CUSTOMER_CATEGORY := l_customer_tbl(l_rec - 1).CUSTOMER_CATEGORY;
l_customer_tbl(l_rec).DB_RATING := l_customer_tbl(l_rec - 1).DB_RATING;
l_customer_tbl(l_rec).DEBARMENTS_COUNT := l_customer_tbl(l_rec - 1).DEBARMENTS_COUNT;
l_customer_tbl(l_rec).DEBARTMENTS_DATE := l_customer_tbl(l_rec - 1).DEBARTMENTS_DATE;
l_customer_tbl(l_rec).DEPARTMENT_INDICATOR := l_customer_tbl(l_rec - 1).DEPARTMENT_INDICATOR;
l_customer_tbl(l_rec).DISADVANTAGED_INDICATOR := l_customer_tbl(l_rec - 1).DISADVANTAGED_INDICATOR;
l_customer_tbl(l_rec).ENQUIRY_DUNS := l_customer_tbl(l_rec - 1).ENQUIRY_DUNS;
l_customer_tbl(l_rec).EXPORT_INDICATOR := l_customer_tbl(l_rec - 1).EXPORT_INDICATOR;
l_customer_tbl(l_rec).FAILURE_SCORE := l_customer_tbl(l_rec - 1).FAILURE_SCORE;
l_customer_tbl(l_rec).FAILURE_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).FAILURE_SCORE_COMMENTARY;
l_customer_tbl(l_rec).FAILURE_SCORE_NATL_PERCENTILE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_NATL_PERCENTILE;
l_customer_tbl(l_rec).FAILURE_SCORE_OVERRIDE_CODE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_OVERRIDE_CODE;
l_customer_tbl(l_rec).GLOBAL_FAILURE_SCORE := l_customer_tbl(l_rec - 1).GLOBAL_FAILURE_SCORE;
l_customer_tbl(l_rec).HEADQUARTER_BRANCH_INDICATOR := l_customer_tbl(l_rec - 1).HEADQUARTER_BRANCH_INDICATOR;
l_customer_tbl(l_rec).IMPORT_INDICATOR := l_customer_tbl(l_rec - 1).IMPORT_INDICATOR;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS2 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS2;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS3 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS3;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS4 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS4;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS5 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS5;
l_customer_tbl(l_rec).LABOR_SURPLUS_INDICATOR := l_customer_tbl(l_rec - 1).LABOR_SURPLUS_INDICATOR;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE_TYPE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE_TYPE;
l_customer_tbl(l_rec).MINORITY_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).MINORITY_OWNED_INDICATOR;
l_customer_tbl(l_rec).MINORITY_OWNED_TYPE := l_customer_tbl(l_rec - 1).MINORITY_OWNED_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_TYPE := l_customer_tbl(l_rec - 1).ORGANIZATION_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_URL := l_customer_tbl(l_rec - 1).ORGANIZATION_URL;
l_customer_tbl(l_rec).OUT_OF_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).OUT_OF_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).PRINCIPAL_NAME := l_customer_tbl(l_rec - 1).PRINCIPAL_NAME;
l_customer_tbl(l_rec).PRINCIPAL_TITLE := l_customer_tbl(l_rec - 1).PRINCIPAL_TITLE;
l_customer_tbl(l_rec).PUBLIC_PRIVATE_OWNERSHIP_FLAG := l_customer_tbl(l_rec - 1).PUBLIC_PRIVATE_OWNERSHIP_FLAG;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).RENT_OWNER_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNER_INDICATOR;
l_customer_tbl(l_rec).SMALL_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).SMALL_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).WOMAN_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).WOMAN_OWNED_INDICATOR;
l_customer_tbl(l_rec).ORG_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ORG_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE1;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE2;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE3;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE4;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE5;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE6;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE7;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE8;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE9;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE10;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE11;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE12;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE13;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE14;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE15;
l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;



             l_customer_tbl(l_rec).add_imp_xml_element_id := l_customer_tbl(l_rec - 1).add_imp_xml_element_id;
             l_customer_tbl(l_rec).address1 := l_customer_tbl(l_rec - 1).address1;
             l_customer_tbl(l_rec).address2 := l_customer_tbl(l_rec - 1).address2;
             l_customer_tbl(l_rec).address3 := l_customer_tbl(l_rec - 1).address3;
             l_customer_tbl(l_rec).address4 := l_customer_tbl(l_rec - 1).address4;
             l_customer_tbl(l_rec).city := l_customer_tbl(l_rec - 1).city;
             l_customer_tbl(l_rec).county := l_customer_tbl(l_rec - 1).county;
             l_customer_tbl(l_rec).province := l_customer_tbl(l_rec - 1).province;
             l_customer_tbl(l_rec).state := l_customer_tbl(l_rec - 1).state;
             l_customer_tbl(l_rec).postal_code := l_customer_tbl(l_rec - 1).postal_code;
             l_customer_tbl(l_rec).country  := l_customer_tbl(l_rec - 1).country;
             l_customer_tbl(l_rec).address_lines_phonetic := l_customer_tbl(l_rec - 1).address_lines_phonetic;
-- bug 4641591: columns obsolete
--	     l_customer_tbl(l_rec).po_box_number := l_customer_tbl(l_rec - 1).po_box_number;
--             l_customer_tbl(l_rec).house_number := l_customer_tbl(l_rec - 1).house_number;
--             l_customer_tbl(l_rec).street_suffix := l_customer_tbl(l_rec - 1).street_suffix;
--             l_customer_tbl(l_rec).street := l_customer_tbl(l_rec - 1).street;
--             l_customer_tbl(l_rec).street_number := l_customer_tbl(l_rec - 1).street_number;
--             l_customer_tbl(l_rec).floor := l_customer_tbl(l_rec - 1).floor;
--             l_customer_tbl(l_rec).suite := l_customer_tbl(l_rec - 1).suite;
             l_customer_tbl(l_rec).postal_plus4_code := l_customer_tbl(l_rec - 1).postal_plus4_code;
             l_customer_tbl(l_rec).identifying_address_flag := l_customer_tbl(l_rec - 1).identifying_address_flag;

l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE1;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE2;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE3;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE4;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE5;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE6;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE7;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE8;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE9;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE10;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE11;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE12;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE13;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE14;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE15;
l_customer_tbl(l_rec).DESCRIPTION := l_customer_tbl(l_rec - 1).DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).PARTY_SITE_USE := l_customer_tbl(l_rec - 1).PARTY_SITE_USE;
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := l_customer_tbl(l_rec - 1).LOCATION_DIRECTIONS;
l_customer_tbl(l_rec).SHORT_DESCRIPTION := l_customer_tbl(l_rec - 1).SHORT_DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EXPIRATION_DATE;

         end if;
         -- l_customer_tbl(l_rec).ocont_imp_xml_element_id := l_conid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).ocont_imp_xml_element_id := l_octid_record_in_tbl(j).imp_xml_element_id;
         l_customer_tbl(l_rec).person_first_name := Get_Element_VALUE('PERSON_FIRST_NAME',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).person_last_name := Get_Element_VALUE('PERSON_LAST_NAME',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).person_middle_name := Get_Element_VALUE('PERSON_MIDDLE_NAME',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).person_name_suffix := Get_Element_VALUE('PERSON_NAME_SUFFIX',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).PERSON_NAME_PREFIX := Get_Element_VALUE('PERSON_NAME_PREFIX',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).department := Get_Element_VALUE('DEPARTMENT',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).job_title := Get_Element_VALUE('JOB_TITLE',l_conid_record_in_tbl);
         l_customer_tbl(l_rec).decision_maker_flag := Get_Element_VALUE('DECISION_MAKER_FLAG',l_conid_record_in_tbl);



l_customer_tbl(l_rec).PERSONAL_INCOME := Get_Element_VALUE('PERSONAL_INCOME',l_conid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := Get_Element_VALUE('PERSON_ACADEMIC_TITLE',l_conid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := Get_Element_VALUE('PERSON_FIRST_NAME_PHONETIC',l_conid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := Get_Element_VALUE('PERSON_LAST_NAME_PHONETIC',l_conid_record_in_tbl);
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := Get_Element_VALUE('MIDDLE_NAME_PHONETIC',l_conid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := Get_Element_VALUE('PERSON_NAME_PHONETIC',l_conid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := Get_Element_VALUE('PERSON_PREVIOUS_TITLE_NAME',l_conid_record_in_tbl);
l_customer_tbl(l_rec).PLACE_OF_BIRTH := Get_Element_VALUE('PLACE_OF_BIRTH',l_conid_record_in_tbl);
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := Get_Element_VALUE('HEAD_OF_HOUSEHOLD_FLAG',l_conid_record_in_tbl);
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := Get_Element_VALUE('HOUSEHOLD_SIZE',l_conid_record_in_tbl);
l_customer_tbl(l_rec).TAX_ID := Get_Element_VALUE('TAX_ID',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE_CATEGORY := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE_CATEGORY',l_conid_record_in_tbl);
l_customer_tbl(l_rec).DATE_OF_BIRTH := Get_Element_VALUE('DATE_OF_BIRTH',l_conid_record_in_tbl);
l_customer_tbl(l_rec).DATE_OF_DEATH := Get_Element_VALUE('DATE_OF_DEATH',l_conid_record_in_tbl);
l_customer_tbl(l_rec).DECLARED_ETHNICITY := Get_Element_VALUE('DECLARED_ETHNICITY',l_conid_record_in_tbl);
l_customer_tbl(l_rec).MARITAL_STATUS := Get_Element_VALUE('MARITAL_STATUS',l_conid_record_in_tbl);
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := Get_Element_VALUE('MARITAL_STATUS_EFFECTIVE_DATE',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE1 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE1',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE2 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE2',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE3 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE3',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE4 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE4',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE5 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE5',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE6 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE6',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE7 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE7',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE8 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE8',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE9 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE9',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE10 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE10',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE11 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE11',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE12 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE12',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE13 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE13',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE14 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE14',l_conid_record_in_tbl);
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE15 := Get_Element_VALUE('ORG_CONTACT_ATTRIBUTE15',l_conid_record_in_tbl);

         l_rec := 0;


       -- Process  of Phone data.
       l_pho_element_id := Get_Element_ID('PHONE',l_conid_record_in_tbl);
       -- dbms_output.put_line( ' l_pho_element_id = '||to_char(l_pho_element_id));

    /********* Get all the elements for phone *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_pho_element_id,
        x_child_set          => l_phoid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
 --      dbms_output.put_line( ' Phone attribute count '||l_phoid_record_in_tbl.COUNT);
       FOR k IN 1..l_phoid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_phoid_record_in_tbl(k).imp_xml_element_id,
        x_child_set          => l_phiid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

        l_rec := l_customer_tbl.count;
         if k > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;
             l_customer_tbl(l_rec).org_imp_xml_element_id := l_customer_tbl(l_rec - 1).org_imp_xml_element_id;
             l_customer_tbl(l_rec).party_name := l_customer_tbl(l_rec - 1).party_name;
             l_customer_tbl(l_rec).FISCAL_YEAREND_MONTH := l_customer_tbl(l_rec - 1).FISCAL_YEAREND_MONTH;
             l_customer_tbl(l_rec).DUNS_NUMBER := l_customer_tbl(l_rec - 1).DUNS_NUMBER;
             l_customer_tbl(l_rec).EMPLOYEES_TOTAL := l_customer_tbl(l_rec - 1).EMPLOYEES_TOTAL;
             l_customer_tbl(l_rec).LINE_OF_BUSINESS := l_customer_tbl(l_rec - 1).LINE_OF_BUSINESS;
             l_customer_tbl(l_rec).YEAR_ESTABLISHED := l_customer_tbl(l_rec - 1).YEAR_ESTABLISHED;
             l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
             l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
             l_customer_tbl(l_rec).CEO_NAME := l_customer_tbl(l_rec - 1).CEO_NAME;
             l_customer_tbl(l_rec).SIC_CODE := l_customer_tbl(l_rec - 1).SIC_CODE;
             l_customer_tbl(l_rec).SIC_CODE_TYPE := l_customer_tbl(l_rec - 1).SIC_CODE_TYPE;
             l_customer_tbl(l_rec).ANALYSIS_FY := l_customer_tbl(l_rec - 1).ANALYSIS_FY;
             l_customer_tbl(l_rec).CURR_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).CURR_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).NEXT_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).NEXT_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).GSA_INDICATOR_FLAG := l_customer_tbl(l_rec - 1).GSA_INDICATOR_FLAG;
             l_customer_tbl(l_rec).MISSION_STATEMENT := l_customer_tbl(l_rec - 1).MISSION_STATEMENT;
             l_customer_tbl(l_rec).ORGANIZATION_NAME_PHONETIC := l_customer_tbl(l_rec - 1).ORGANIZATION_NAME_PHONETIC;
             l_customer_tbl(l_rec).CATEGORY_CODE := l_customer_tbl(l_rec - 1).CATEGORY_CODE;
             l_customer_tbl(l_rec).JGZZ_FISCAL_CODE := l_customer_tbl(l_rec - 1).JGZZ_FISCAL_CODE;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;
l_customer_tbl(l_rec).BRANCH_FLAG := l_customer_tbl(l_rec - 1).BRANCH_FLAG;
l_customer_tbl(l_rec).BUSINESS_LINE := l_customer_tbl(l_rec - 1).BUSINESS_LINE;
l_customer_tbl(l_rec).BUSINESS_SCOPE := l_customer_tbl(l_rec - 1).BUSINESS_SCOPE;
l_customer_tbl(l_rec).CHIEF_EXECUTIVE_TITLE := l_customer_tbl(l_rec - 1).CHIEF_EXECUTIVE_TITLE;
l_customer_tbl(l_rec).CONGRESSIONAL_DISTRICT_CODE := l_customer_tbl(l_rec - 1).CONGRESSIONAL_DISTRICT_CODE;
l_customer_tbl(l_rec).CONTROL_YEAR := l_customer_tbl(l_rec - 1).CONTROL_YEAR;
l_customer_tbl(l_rec).CORPORATION_CLASS := l_customer_tbl(l_rec - 1).CORPORATION_CLASS;
l_customer_tbl(l_rec).CREDIT_SCORE := l_customer_tbl(l_rec - 1).CREDIT_SCORE;
l_customer_tbl(l_rec).CREDIT_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).CREDIT_SCORE_COMMENTARY;
l_customer_tbl(l_rec).CUSTOMER_CATEGORY := l_customer_tbl(l_rec - 1).CUSTOMER_CATEGORY;
l_customer_tbl(l_rec).DB_RATING := l_customer_tbl(l_rec - 1).DB_RATING;
l_customer_tbl(l_rec).DEBARMENTS_COUNT := l_customer_tbl(l_rec - 1).DEBARMENTS_COUNT;
l_customer_tbl(l_rec).DEBARTMENTS_DATE := l_customer_tbl(l_rec - 1).DEBARTMENTS_DATE;
l_customer_tbl(l_rec).DEPARTMENT_INDICATOR := l_customer_tbl(l_rec - 1).DEPARTMENT_INDICATOR;
l_customer_tbl(l_rec).DISADVANTAGED_INDICATOR := l_customer_tbl(l_rec - 1).DISADVANTAGED_INDICATOR;
l_customer_tbl(l_rec).ENQUIRY_DUNS := l_customer_tbl(l_rec - 1).ENQUIRY_DUNS;
l_customer_tbl(l_rec).EXPORT_INDICATOR := l_customer_tbl(l_rec - 1).EXPORT_INDICATOR;
l_customer_tbl(l_rec).FAILURE_SCORE := l_customer_tbl(l_rec - 1).FAILURE_SCORE;
l_customer_tbl(l_rec).FAILURE_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).FAILURE_SCORE_COMMENTARY;
l_customer_tbl(l_rec).FAILURE_SCORE_NATL_PERCENTILE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_NATL_PERCENTILE;
l_customer_tbl(l_rec).FAILURE_SCORE_OVERRIDE_CODE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_OVERRIDE_CODE;
l_customer_tbl(l_rec).GLOBAL_FAILURE_SCORE := l_customer_tbl(l_rec - 1).GLOBAL_FAILURE_SCORE;
l_customer_tbl(l_rec).HEADQUARTER_BRANCH_INDICATOR := l_customer_tbl(l_rec - 1).HEADQUARTER_BRANCH_INDICATOR;
l_customer_tbl(l_rec).IMPORT_INDICATOR := l_customer_tbl(l_rec - 1).IMPORT_INDICATOR;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS2 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS2;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS3 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS3;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS4 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS4;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS5 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS5;
l_customer_tbl(l_rec).LABOR_SURPLUS_INDICATOR := l_customer_tbl(l_rec - 1).LABOR_SURPLUS_INDICATOR;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE_TYPE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE_TYPE;
l_customer_tbl(l_rec).MINORITY_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).MINORITY_OWNED_INDICATOR;
l_customer_tbl(l_rec).MINORITY_OWNED_TYPE := l_customer_tbl(l_rec - 1).MINORITY_OWNED_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_TYPE := l_customer_tbl(l_rec - 1).ORGANIZATION_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_URL := l_customer_tbl(l_rec - 1).ORGANIZATION_URL;
l_customer_tbl(l_rec).OUT_OF_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).OUT_OF_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).PRINCIPAL_NAME := l_customer_tbl(l_rec - 1).PRINCIPAL_NAME;
l_customer_tbl(l_rec).PRINCIPAL_TITLE := l_customer_tbl(l_rec - 1).PRINCIPAL_TITLE;
l_customer_tbl(l_rec).PUBLIC_PRIVATE_OWNERSHIP_FLAG := l_customer_tbl(l_rec - 1).PUBLIC_PRIVATE_OWNERSHIP_FLAG;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).RENT_OWNER_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNER_INDICATOR;
l_customer_tbl(l_rec).SMALL_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).SMALL_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).WOMAN_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).WOMAN_OWNED_INDICATOR;
l_customer_tbl(l_rec).ORG_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ORG_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE1;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE2;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE3;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE4;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE5;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE6;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE7;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE8;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE9;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE10;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE11;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE12;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE13;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE14;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE15;
l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;



             l_customer_tbl(l_rec).add_imp_xml_element_id := l_customer_tbl(l_rec - 1).add_imp_xml_element_id;
             l_customer_tbl(l_rec).address1 := l_customer_tbl(l_rec - 1).address1;
             l_customer_tbl(l_rec).address2 := l_customer_tbl(l_rec - 1).address2;
             l_customer_tbl(l_rec).address3 := l_customer_tbl(l_rec - 1).address3;
             l_customer_tbl(l_rec).address4 := l_customer_tbl(l_rec - 1).address4;
             l_customer_tbl(l_rec).city := l_customer_tbl(l_rec - 1).city;
             l_customer_tbl(l_rec).county := l_customer_tbl(l_rec - 1).county;
             l_customer_tbl(l_rec).province := l_customer_tbl(l_rec - 1).province;
             l_customer_tbl(l_rec).state := l_customer_tbl(l_rec - 1).state;
             l_customer_tbl(l_rec).postal_code := l_customer_tbl(l_rec - 1).postal_code;
             l_customer_tbl(l_rec).country  := l_customer_tbl(l_rec - 1).country;
             l_customer_tbl(l_rec).address_lines_phonetic := l_customer_tbl(l_rec - 1).address_lines_phonetic;
-- bug 4641591: columns obsolete
--	     l_customer_tbl(l_rec).po_box_number := l_customer_tbl(l_rec - 1).po_box_number;
--             l_customer_tbl(l_rec).house_number := l_customer_tbl(l_rec - 1).house_number;
--             l_customer_tbl(l_rec).street_suffix := l_customer_tbl(l_rec - 1).street_suffix;
--             l_customer_tbl(l_rec).street := l_customer_tbl(l_rec - 1).street;
--             l_customer_tbl(l_rec).street_number := l_customer_tbl(l_rec - 1).street_number;
--             l_customer_tbl(l_rec).floor := l_customer_tbl(l_rec - 1).floor;
--             l_customer_tbl(l_rec).suite := l_customer_tbl(l_rec - 1).suite;
             l_customer_tbl(l_rec).postal_plus4_code := l_customer_tbl(l_rec - 1).postal_plus4_code;
             l_customer_tbl(l_rec).identifying_address_flag := l_customer_tbl(l_rec - 1).identifying_address_flag;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE1;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE2;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE3;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE4;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE5;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE6;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE7;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE8;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE9;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE10;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE11;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE12;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE13;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE14;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE15;
l_customer_tbl(l_rec).DESCRIPTION := l_customer_tbl(l_rec - 1).DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).PARTY_SITE_USE := l_customer_tbl(l_rec - 1).PARTY_SITE_USE;
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := l_customer_tbl(l_rec - 1).LOCATION_DIRECTIONS;
l_customer_tbl(l_rec).SHORT_DESCRIPTION := l_customer_tbl(l_rec - 1).SHORT_DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EXPIRATION_DATE;


             l_customer_tbl(l_rec).ocont_imp_xml_element_id := l_customer_tbl(l_rec - 1).ocont_imp_xml_element_id;
             l_customer_tbl(l_rec).person_first_name := l_customer_tbl(l_rec - 1).person_first_name;
             l_customer_tbl(l_rec).person_middle_name := l_customer_tbl(l_rec - 1).person_middle_name;
             l_customer_tbl(l_rec).person_name_suffix := l_customer_tbl(l_rec - 1).person_name_suffix;
             l_customer_tbl(l_rec).person_last_name := l_customer_tbl(l_rec - 1).person_last_name;
             l_customer_tbl(l_rec).PERSON_NAME_PREFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_PREFIX;
             l_customer_tbl(l_rec).department := l_customer_tbl(l_rec - 1).department;
             l_customer_tbl(l_rec).job_title := l_customer_tbl(l_rec - 1).job_title;
             l_customer_tbl(l_rec).decision_maker_flag := l_customer_tbl(l_rec - 1).decision_maker_flag;

l_customer_tbl(l_rec).PERSONAL_INCOME := l_customer_tbl(l_rec - 1).PERSONAL_INCOME;
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := l_customer_tbl(l_rec - 1).PERSON_ACADEMIC_TITLE;
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME_PHONETIC ;
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME_PHONETIC;
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := l_customer_tbl(l_rec - 1).MIDDLE_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := l_customer_tbl(l_rec - 1).PERSON_PREVIOUS_TITLE_NAME ;
l_customer_tbl(l_rec).PLACE_OF_BIRTH := l_customer_tbl(l_rec - 1).PLACE_OF_BIRTH;
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := l_customer_tbl(l_rec - 1).HEAD_OF_HOUSEHOLD_FLAG;
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := l_customer_tbl(l_rec - 1).HOUSEHOLD_SIZE;
l_customer_tbl(l_rec).TAX_ID := l_customer_tbl(l_rec - 1).TAX_ID;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).DATE_OF_BIRTH := l_customer_tbl(l_rec - 1).DATE_OF_BIRTH;
l_customer_tbl(l_rec).DATE_OF_DEATH := l_customer_tbl(l_rec - 1).DATE_OF_DEATH;
l_customer_tbl(l_rec).DECLARED_ETHNICITY := l_customer_tbl(l_rec - 1).DECLARED_ETHNICITY;
l_customer_tbl(l_rec).MARITAL_STATUS := l_customer_tbl(l_rec - 1).MARITAL_STATUS;
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).MARITAL_STATUS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE1;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE2;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE3;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE4;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE5;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE6;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE7;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE8;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE9;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE10;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE11;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE12;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE13;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE14;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE15;

         end if;
        -- l_customer_tbl(l_rec).cp_imp_xml_element_id := l_phiid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).cp_imp_xml_element_id := l_phoid_record_in_tbl(k).imp_xml_element_id;
         l_customer_tbl(l_rec).phone_number := Get_Element_VALUE('PHONE_NUMBER',l_phiid_record_in_tbl);
         l_customer_tbl(l_rec).phone_country_code := Get_Element_VALUE('PHONE_COUNTRY_CODE',l_phiid_record_in_tbl);
         l_customer_tbl(l_rec).phone_area_code := Get_Element_VALUE('PHONE_AREA_CODE',l_phiid_record_in_tbl);
         l_customer_tbl(l_rec).phone_extension := Get_Element_VALUE('PHONE_EXTENTION',l_phiid_record_in_tbl);
         l_rec := 0;
       END LOOP; -- Phone


       -- Process  of Email data.
       l_ema_element_id := Get_Element_ID('EMAIL',l_conid_record_in_tbl);
       -- dbms_output.put_line( ' l_ema_element_id = '||to_char(l_ema_element_id));

    /********* Get all the elements for email *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_ema_element_id,
        x_child_set          => l_emaid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
       -- dbms_output.put_line( ' attributl email count '||l_emaid_record_in_tbl.COUNT);
       FOR l IN 1..l_emaid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_emaid_record_in_tbl(l).imp_xml_element_id,
        x_child_set          => l_emlid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
       -- dbms_output.put_line( ' in l_emlid_record_in_tbl count '||l_emlid_record_in_tbl.COUNT);

        l_rec := l_customer_tbl.count;
         if l > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;
             l_customer_tbl(l_rec).org_imp_xml_element_id := l_customer_tbl(l_rec - 1).org_imp_xml_element_id;
             l_customer_tbl(l_rec).party_name := l_customer_tbl(l_rec - 1).party_name;
             l_customer_tbl(l_rec).FISCAL_YEAREND_MONTH := l_customer_tbl(l_rec - 1).FISCAL_YEAREND_MONTH;
             l_customer_tbl(l_rec).DUNS_NUMBER := l_customer_tbl(l_rec - 1).DUNS_NUMBER;
             l_customer_tbl(l_rec).EMPLOYEES_TOTAL := l_customer_tbl(l_rec - 1).EMPLOYEES_TOTAL;
             l_customer_tbl(l_rec).LINE_OF_BUSINESS := l_customer_tbl(l_rec - 1).LINE_OF_BUSINESS;
             l_customer_tbl(l_rec).YEAR_ESTABLISHED := l_customer_tbl(l_rec - 1).YEAR_ESTABLISHED;
             l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
             l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
             l_customer_tbl(l_rec).CEO_NAME := l_customer_tbl(l_rec - 1).CEO_NAME;
             l_customer_tbl(l_rec).SIC_CODE := l_customer_tbl(l_rec - 1).SIC_CODE;
             l_customer_tbl(l_rec).SIC_CODE_TYPE := l_customer_tbl(l_rec - 1).SIC_CODE_TYPE;
             l_customer_tbl(l_rec).ANALYSIS_FY := l_customer_tbl(l_rec - 1).ANALYSIS_FY;
             l_customer_tbl(l_rec).CURR_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).CURR_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).NEXT_FY_POTENTIAL_REVENUE := l_customer_tbl(l_rec - 1).NEXT_FY_POTENTIAL_REVENUE;
             l_customer_tbl(l_rec).GSA_INDICATOR_FLAG := l_customer_tbl(l_rec - 1).GSA_INDICATOR_FLAG;
             l_customer_tbl(l_rec).MISSION_STATEMENT := l_customer_tbl(l_rec - 1).MISSION_STATEMENT;
             l_customer_tbl(l_rec).ORGANIZATION_NAME_PHONETIC := l_customer_tbl(l_rec - 1).ORGANIZATION_NAME_PHONETIC;
             l_customer_tbl(l_rec).CATEGORY_CODE := l_customer_tbl(l_rec - 1).CATEGORY_CODE;
             l_customer_tbl(l_rec).JGZZ_FISCAL_CODE := l_customer_tbl(l_rec - 1).JGZZ_FISCAL_CODE;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;
l_customer_tbl(l_rec).BRANCH_FLAG := l_customer_tbl(l_rec - 1).BRANCH_FLAG;
l_customer_tbl(l_rec).BUSINESS_LINE := l_customer_tbl(l_rec - 1).BUSINESS_LINE;
l_customer_tbl(l_rec).BUSINESS_SCOPE := l_customer_tbl(l_rec - 1).BUSINESS_SCOPE;
l_customer_tbl(l_rec).CHIEF_EXECUTIVE_TITLE := l_customer_tbl(l_rec - 1).CHIEF_EXECUTIVE_TITLE;
l_customer_tbl(l_rec).CONGRESSIONAL_DISTRICT_CODE := l_customer_tbl(l_rec - 1).CONGRESSIONAL_DISTRICT_CODE;
l_customer_tbl(l_rec).CONTROL_YEAR := l_customer_tbl(l_rec - 1).CONTROL_YEAR;
l_customer_tbl(l_rec).CORPORATION_CLASS := l_customer_tbl(l_rec - 1).CORPORATION_CLASS;
l_customer_tbl(l_rec).CREDIT_SCORE := l_customer_tbl(l_rec - 1).CREDIT_SCORE;
l_customer_tbl(l_rec).CREDIT_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).CREDIT_SCORE_COMMENTARY;
l_customer_tbl(l_rec).CUSTOMER_CATEGORY := l_customer_tbl(l_rec - 1).CUSTOMER_CATEGORY;
l_customer_tbl(l_rec).DB_RATING := l_customer_tbl(l_rec - 1).DB_RATING;
l_customer_tbl(l_rec).DEBARMENTS_COUNT := l_customer_tbl(l_rec - 1).DEBARMENTS_COUNT;
l_customer_tbl(l_rec).DEBARTMENTS_DATE := l_customer_tbl(l_rec - 1).DEBARTMENTS_DATE;
l_customer_tbl(l_rec).DEPARTMENT_INDICATOR := l_customer_tbl(l_rec - 1).DEPARTMENT_INDICATOR;
l_customer_tbl(l_rec).DISADVANTAGED_INDICATOR := l_customer_tbl(l_rec - 1).DISADVANTAGED_INDICATOR;
l_customer_tbl(l_rec).ENQUIRY_DUNS := l_customer_tbl(l_rec - 1).ENQUIRY_DUNS;
l_customer_tbl(l_rec).EXPORT_INDICATOR := l_customer_tbl(l_rec - 1).EXPORT_INDICATOR;
l_customer_tbl(l_rec).FAILURE_SCORE := l_customer_tbl(l_rec - 1).FAILURE_SCORE;
l_customer_tbl(l_rec).FAILURE_SCORE_COMMENTARY := l_customer_tbl(l_rec - 1).FAILURE_SCORE_COMMENTARY;
l_customer_tbl(l_rec).FAILURE_SCORE_NATL_PERCENTILE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_NATL_PERCENTILE;
l_customer_tbl(l_rec).FAILURE_SCORE_OVERRIDE_CODE := l_customer_tbl(l_rec - 1).FAILURE_SCORE_OVERRIDE_CODE;
l_customer_tbl(l_rec).GLOBAL_FAILURE_SCORE := l_customer_tbl(l_rec - 1).GLOBAL_FAILURE_SCORE;
l_customer_tbl(l_rec).HEADQUARTER_BRANCH_INDICATOR := l_customer_tbl(l_rec - 1).HEADQUARTER_BRANCH_INDICATOR;
l_customer_tbl(l_rec).IMPORT_INDICATOR := l_customer_tbl(l_rec - 1).IMPORT_INDICATOR;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS2 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS2;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS3 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS3;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS4 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS4;
l_customer_tbl(l_rec).ORGANIZATION_KNOWN_AS5 := l_customer_tbl(l_rec - 1).ORGANIZATION_KNOWN_AS5;
l_customer_tbl(l_rec).LABOR_SURPLUS_INDICATOR := l_customer_tbl(l_rec - 1).LABOR_SURPLUS_INDICATOR;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE;
l_customer_tbl(l_rec).LOCAL_ACTIVITY_CODE_TYPE := l_customer_tbl(l_rec - 1).LOCAL_ACTIVITY_CODE_TYPE;
l_customer_tbl(l_rec).MINORITY_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).MINORITY_OWNED_INDICATOR;
l_customer_tbl(l_rec).MINORITY_OWNED_TYPE := l_customer_tbl(l_rec - 1).MINORITY_OWNED_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_TYPE := l_customer_tbl(l_rec - 1).ORGANIZATION_TYPE;
l_customer_tbl(l_rec).ORGANIZATION_URL := l_customer_tbl(l_rec - 1).ORGANIZATION_URL;
l_customer_tbl(l_rec).OUT_OF_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).OUT_OF_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).PRINCIPAL_NAME := l_customer_tbl(l_rec - 1).PRINCIPAL_NAME;
l_customer_tbl(l_rec).PRINCIPAL_TITLE := l_customer_tbl(l_rec - 1).PRINCIPAL_TITLE;
l_customer_tbl(l_rec).PUBLIC_PRIVATE_OWNERSHIP_FLAG := l_customer_tbl(l_rec - 1).PUBLIC_PRIVATE_OWNERSHIP_FLAG;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).RENT_OWNER_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNER_INDICATOR;
l_customer_tbl(l_rec).SMALL_BUSINESS_INDICATOR := l_customer_tbl(l_rec - 1).SMALL_BUSINESS_INDICATOR;
l_customer_tbl(l_rec).WOMAN_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).WOMAN_OWNED_INDICATOR;
l_customer_tbl(l_rec).ORG_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ORG_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE1;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE2;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE3;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE4;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE5;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE6;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE7;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE8;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE9;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE10;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE11;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE12;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE13;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE14;
l_customer_tbl(l_rec).ORGANIZATION_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ORGANIZATION_ATTRIBUTE15;
l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;


             l_customer_tbl(l_rec).add_imp_xml_element_id := l_customer_tbl(l_rec - 1).add_imp_xml_element_id;
             l_customer_tbl(l_rec).address1 := l_customer_tbl(l_rec - 1).address1;
             l_customer_tbl(l_rec).address2 := l_customer_tbl(l_rec - 1).address2;
             l_customer_tbl(l_rec).address3 := l_customer_tbl(l_rec - 1).address3;
             l_customer_tbl(l_rec).address4 := l_customer_tbl(l_rec - 1).address4;
             l_customer_tbl(l_rec).city := l_customer_tbl(l_rec - 1).city;
             l_customer_tbl(l_rec).county := l_customer_tbl(l_rec - 1).county;
             l_customer_tbl(l_rec).province := l_customer_tbl(l_rec - 1).province;
             l_customer_tbl(l_rec).state := l_customer_tbl(l_rec - 1).state;
             l_customer_tbl(l_rec).postal_code := l_customer_tbl(l_rec - 1).postal_code;
             l_customer_tbl(l_rec).country  := l_customer_tbl(l_rec - 1).country;
             l_customer_tbl(l_rec).address_lines_phonetic := l_customer_tbl(l_rec - 1).address_lines_phonetic;
-- bug 4641591: columns obsolete
--	     l_customer_tbl(l_rec).po_box_number := l_customer_tbl(l_rec - 1).po_box_number;
--             l_customer_tbl(l_rec).house_number := l_customer_tbl(l_rec - 1).house_number;
--             l_customer_tbl(l_rec).street_suffix := l_customer_tbl(l_rec - 1).street_suffix;
--             l_customer_tbl(l_rec).street := l_customer_tbl(l_rec - 1).street;
--             l_customer_tbl(l_rec).street_number := l_customer_tbl(l_rec - 1).street_number;
--             l_customer_tbl(l_rec).floor := l_customer_tbl(l_rec - 1).floor;
--             l_customer_tbl(l_rec).suite := l_customer_tbl(l_rec - 1).suite;
             l_customer_tbl(l_rec).postal_plus4_code := l_customer_tbl(l_rec - 1).postal_plus4_code;
             l_customer_tbl(l_rec).identifying_address_flag := l_customer_tbl(l_rec - 1).identifying_address_flag;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE1;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE2;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE3;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE4;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE5;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE6;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE7;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE8;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE9;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE10;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE11;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE12;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE13;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE14;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE15;
l_customer_tbl(l_rec).DESCRIPTION := l_customer_tbl(l_rec - 1).DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).PARTY_SITE_USE := l_customer_tbl(l_rec - 1).PARTY_SITE_USE;
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := l_customer_tbl(l_rec - 1).LOCATION_DIRECTIONS;
l_customer_tbl(l_rec).SHORT_DESCRIPTION := l_customer_tbl(l_rec - 1).SHORT_DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EXPIRATION_DATE;


             l_customer_tbl(l_rec).ocont_imp_xml_element_id := l_customer_tbl(l_rec - 1).ocont_imp_xml_element_id;
             l_customer_tbl(l_rec).person_first_name := l_customer_tbl(l_rec - 1).person_first_name;
             l_customer_tbl(l_rec).person_middle_name := l_customer_tbl(l_rec - 1).person_middle_name;
             l_customer_tbl(l_rec).person_name_suffix := l_customer_tbl(l_rec - 1).person_name_suffix;
             l_customer_tbl(l_rec).person_last_name := l_customer_tbl(l_rec - 1).person_last_name;
             l_customer_tbl(l_rec).PERSON_NAME_PREFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_PREFIX;
             l_customer_tbl(l_rec).department := l_customer_tbl(l_rec - 1).department;
             l_customer_tbl(l_rec).job_title := l_customer_tbl(l_rec - 1).job_title;
             l_customer_tbl(l_rec).decision_maker_flag := l_customer_tbl(l_rec - 1).decision_maker_flag;
l_customer_tbl(l_rec).PERSONAL_INCOME := l_customer_tbl(l_rec - 1).PERSONAL_INCOME;
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := l_customer_tbl(l_rec - 1).PERSON_ACADEMIC_TITLE;
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME_PHONETIC ;
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME_PHONETIC;
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := l_customer_tbl(l_rec - 1).MIDDLE_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := l_customer_tbl(l_rec - 1).PERSON_PREVIOUS_TITLE_NAME ;
l_customer_tbl(l_rec).PLACE_OF_BIRTH := l_customer_tbl(l_rec - 1).PLACE_OF_BIRTH;
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := l_customer_tbl(l_rec - 1).HEAD_OF_HOUSEHOLD_FLAG;
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := l_customer_tbl(l_rec - 1).HOUSEHOLD_SIZE;
l_customer_tbl(l_rec).TAX_ID := l_customer_tbl(l_rec - 1).TAX_ID;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).DATE_OF_BIRTH := l_customer_tbl(l_rec - 1).DATE_OF_BIRTH;
l_customer_tbl(l_rec).DATE_OF_DEATH := l_customer_tbl(l_rec - 1).DATE_OF_DEATH;
l_customer_tbl(l_rec).DECLARED_ETHNICITY := l_customer_tbl(l_rec - 1).DECLARED_ETHNICITY;
l_customer_tbl(l_rec).MARITAL_STATUS := l_customer_tbl(l_rec - 1).MARITAL_STATUS;
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).MARITAL_STATUS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE1;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE2;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE3;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE4;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE5;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE6;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE7;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE8;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE9;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE10;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE11;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE12;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE13;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE14;
l_customer_tbl(l_rec).ORG_CONTACT_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ORG_CONTACT_ATTRIBUTE15;

         end if;
         l_customer_tbl(l_rec).em_imp_xml_element_id := l_emaid_record_in_tbl(l).imp_xml_element_id;
         -- l_customer_tbl(l_rec).em_imp_xml_element_id := l_emlid_record_in_tbl(l).imp_xml_element_id;
         l_customer_tbl(l_rec).email_address := Get_Element_VALUE('EMAIL_ADDRESS',l_emlid_record_in_tbl);
/*
       -- dbms_output.put_line( ' em_imp_xml_element_id '||l_customer_tbl(l_rec).em_imp_xml_element_id);
       -- dbms_output.put_line( ' EMAIL_ADDRESS '||l_customer_tbl(l_rec).EMAIL_ADDRESS);
*/
         l_rec := 0;
       END LOOP; -- Email

       END LOOP; -- Org Contaaaaat  process
     -- ******************************Location process

       END LOOP; -- Locarion process
       p_cust_tbl := l_customer_tbl;

 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in Process_b2b_xml_data :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );


end Process_b2b_xml_data;
-- ********************************************************************
--
-- This program processes the xml data.
--
PROCEDURE Process_b2c_xml_data (
    p_import_list_header_id    IN    NUMBER,
    p_xml_element_id            IN    NUMBER,
    p_cust_tbl                  IN OUT NOCOPY   cust_b2c_data_in_tbl,
    x_return_status             OUT NOCOPY   VARCHAR2,
    x_msg_data                  OUT NOCOPY   VARCHAR2
) IS
   l_loc_element_id     NUMBER;
   l_oct_element_id     NUMBER;
   l_pho_element_id     NUMBER;
   l_ema_element_id     NUMBER;
   l_rec        NUMBER := 1;

 party_rec       hz_party_v2pub.party_rec_type;
 org_rec         hz_party_v2pub.organization_rec_type;
 person_rec      hz_party_v2pub.person_rec_type;
 location_rec    hz_location_v2pub.location_rec_type;
 psite_rec       hz_party_site_v2pub.party_site_rec_type;
 cpoint_rec      hz_contact_point_v2pub.contact_point_rec_type;
 email_rec       hz_contact_point_v2pub.email_rec_type;
 phone_rec       hz_contact_point_v2pub.phone_rec_type;
 ocon_rec        hz_party_contact_v2pub.org_contact_rec_type;
 edi_rec         hz_contact_point_v2pub.edi_rec_type;
 telex_rec       hz_contact_point_v2pub.telex_rec_type;
 web_rec         hz_contact_point_v2pub.web_rec_type;

   l_perid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_locid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_addid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_octid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_conid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_phoid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_phiid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_emaid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_emlid_record_in_tbl  AMS_IMPORT_XML_PVT.xml_element_set_type;
   l_customer_tbl               cust_b2c_data_in_tbl;

begin
    /********* Get all the elements for the Person *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => p_xml_element_id,
        x_child_set          => l_perid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

       -- dbms_output.put_line( ' Person attribute count '||l_perid_record_in_tbl.COUNT);
/*
       FOR i IN 1..l_perid_record_in_tbl.COUNT LOOP
       -- dbms_output.put_line('Per att '||l_perid_record_in_tbl(i).column_name||'>>>'||l_perid_record_in_tbl(i).data);
       END LOOP;
*/
       l_customer_tbl(l_rec).cust_data_id := l_rec;
       l_customer_tbl(l_rec).per_imp_xml_element_id := p_xml_element_id;

       l_customer_tbl(l_rec).person_first_name := Get_Element_VALUE('PERSON_FIRST_NAME',l_perid_record_in_tbl);
       l_customer_tbl(l_rec).person_last_name := Get_Element_VALUE('PERSON_LAST_NAME',l_perid_record_in_tbl);
       l_customer_tbl(l_rec).person_middle_name := Get_Element_VALUE('PERSON_MIDDLE_NAME',l_perid_record_in_tbl);
       l_customer_tbl(l_rec).person_name_suffix := Get_Element_VALUE('PERSON_NAME_SUFFIX',l_perid_record_in_tbl);
       l_customer_tbl(l_rec).PERSON_NAME_PREFIX := Get_Element_VALUE('PERSON_NAME_PREFIX',l_perid_record_in_tbl);
       l_customer_tbl(l_rec).SALUTATION := Get_Element_VALUE('SALUTATION',l_perid_record_in_tbl);

       l_customer_tbl(l_rec).PARTY_ID := Get_Element_VALUE('PARTY_ID',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSONAL_INCOME := Get_Element_VALUE('PERSONAL_INCOME',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := Get_Element_VALUE('PERSON_ACADEMIC_TITLE',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := Get_Element_VALUE('PERSON_FIRST_NAME_PHONETIC',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := Get_Element_VALUE('PERSON_LAST_NAME_PHONETIC',l_perid_record_in_tbl);
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := Get_Element_VALUE('MIDDLE_NAME_PHONETIC',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := Get_Element_VALUE('PERSON_NAME_PHONETIC',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := Get_Element_VALUE('PERSON_PREVIOUS_TITLE_NAME',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PLACE_OF_BIRTH := Get_Element_VALUE('PLACE_OF_BIRTH',l_perid_record_in_tbl);
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := Get_Element_VALUE('HEAD_OF_HOUSEHOLD_FLAG',l_perid_record_in_tbl);
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := Get_Element_VALUE('HOUSEHOLD_SIZE',l_perid_record_in_tbl);
l_customer_tbl(l_rec).TAX_REFERENCE := Get_Element_VALUE('TAX_REFERENCE',l_perid_record_in_tbl);
l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := Get_Element_VALUE('ORIG_SYSTEM_REFERENCE',l_perid_record_in_tbl);
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := Get_Element_VALUE('RENT_OWNED_INDICATOR',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE_CATEGORY := Get_Element_VALUE('PERSON_ATTRIBUTE_CATEGORY',l_perid_record_in_tbl);
l_customer_tbl(l_rec).DATE_OF_BIRTH := Get_Element_VALUE('DATE_OF_BIRTH',l_perid_record_in_tbl);
l_customer_tbl(l_rec).DATE_OF_DEATH := Get_Element_VALUE('DATE_OF_DEATH',l_perid_record_in_tbl);
l_customer_tbl(l_rec).DECLARED_ETHNICITY := Get_Element_VALUE('DECLARED_ETHNICITY',l_perid_record_in_tbl);
l_customer_tbl(l_rec).MARITAL_STATUS := Get_Element_VALUE('MARITAL_STATUS',l_perid_record_in_tbl);
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := Get_Element_VALUE('MARITAL_STATUS_EFFECTIVE_DATE',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE1 := Get_Element_VALUE('PERSON_ATTRIBUTE1',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE2 := Get_Element_VALUE('PERSON_ATTRIBUTE2',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE3 := Get_Element_VALUE('PERSON_ATTRIBUTE3',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE4 := Get_Element_VALUE('PERSON_ATTRIBUTE4',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE5 := Get_Element_VALUE('PERSON_ATTRIBUTE5',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE6 := Get_Element_VALUE('PERSON_ATTRIBUTE6',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE7 := Get_Element_VALUE('PERSON_ATTRIBUTE7',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE8 := Get_Element_VALUE('PERSON_ATTRIBUTE8',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE9 := Get_Element_VALUE('PERSON_ATTRIBUTE9',l_perid_record_in_tbl);
l_customer_tbl(l_rec).PERSON_ATTRIBUTE10 := Get_Element_VALUE('PERSON_ATTRIBUTE10',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE11 := Get_Element_VALUE('PERSON_ATTRIBUTE11',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE12 := Get_Element_VALUE('PERSON_ATTRIBUTE12',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE13 := Get_Element_VALUE('PERSON_ATTRIBUTE13',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE14 := Get_Element_VALUE('PERSON_ATTRIBUTE14',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE15 := Get_Element_VALUE('PERSON_ATTRIBUTE15',l_perid_record_in_tbl) ;

l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := Get_Element_VALUE('VEHICLE_RESPONSE_CODE',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := Get_Element_VALUE('SALES_AGENT_EMAIL_ID',l_perid_record_in_tbl) ;
l_customer_tbl(l_rec).NOTES := Get_Element_VALUE('NOTES',l_perid_record_in_tbl) ;

/*
       -- dbms_output.put_line( ' cust_data_id '||l_customer_tbl(l_rec).cust_data_id);
       -- dbms_output.put_line( ' per_imp_xml_element_id '||l_customer_tbl(l_rec).per_imp_xml_element_id);
       -- dbms_output.put_line( ' Pat-name '||l_customer_tbl(l_rec).PERSON_FIRST_NAME);
*/
       -- Process for location data.
       l_loc_element_id := Get_Element_ID('LOCATION',l_perid_record_in_tbl);
       -- dbms_output.put_line( ' l_loc_element_id = '||to_char(l_loc_element_id));

    /********* Get all the elements for the location *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_loc_element_id,
        x_child_set          => l_locid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
       -- dbms_output.put_line( ' Location attribute count '||l_locid_record_in_tbl.COUNT);
       FOR i IN 1..l_locid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_locid_record_in_tbl(i).imp_xml_element_id,
        x_child_set          => l_addid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

        l_rec := l_customer_tbl.count;
         if i > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;
             l_customer_tbl(l_rec).per_imp_xml_element_id := l_customer_tbl(l_rec - 1).per_imp_xml_element_id;
             l_customer_tbl(l_rec).PERSON_FIRST_NAME := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME;
             l_customer_tbl(l_rec).PERSON_LAST_NAME := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME;
             l_customer_tbl(l_rec).PERSON_MIDDLE_NAME := l_customer_tbl(l_rec - 1).PERSON_MIDDLE_NAME;
             l_customer_tbl(l_rec).PERSON_NAME_SUFFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_SUFFIX;
             l_customer_tbl(l_rec).PERSON_NAME_PREFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_PREFIX;
             l_customer_tbl(l_rec).SALUTATION := l_customer_tbl(l_rec - 1).SALUTATION;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;

l_customer_tbl(l_rec).PERSONAL_INCOME := l_customer_tbl(l_rec - 1).PERSONAL_INCOME;
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := l_customer_tbl(l_rec - 1).PERSON_ACADEMIC_TITLE;
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME_PHONETIC ;
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME_PHONETIC;
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := l_customer_tbl(l_rec - 1).MIDDLE_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := l_customer_tbl(l_rec - 1).PERSON_PREVIOUS_TITLE_NAME ;
l_customer_tbl(l_rec).PLACE_OF_BIRTH := l_customer_tbl(l_rec - 1).PLACE_OF_BIRTH;
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := l_customer_tbl(l_rec - 1).HEAD_OF_HOUSEHOLD_FLAG;
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := l_customer_tbl(l_rec - 1).HOUSEHOLD_SIZE;
l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).DATE_OF_BIRTH := l_customer_tbl(l_rec - 1).DATE_OF_BIRTH;
l_customer_tbl(l_rec).DATE_OF_DEATH := l_customer_tbl(l_rec - 1).DATE_OF_DEATH;
l_customer_tbl(l_rec).DECLARED_ETHNICITY := l_customer_tbl(l_rec - 1).DECLARED_ETHNICITY;
l_customer_tbl(l_rec).MARITAL_STATUS := l_customer_tbl(l_rec - 1).MARITAL_STATUS;
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).MARITAL_STATUS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE1;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE2;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE3;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE4;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE5;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE6;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE7;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE8;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE9;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE10;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE11;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE12;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE13;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE14;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE15;

l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;
         end if;
         -- l_customer_tbl(l_rec).add_imp_xml_element_id := l_addid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).add_imp_xml_element_id := l_locid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).address1 := Get_Element_VALUE('ADDRESS1',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).address2 := Get_Element_VALUE('ADDRESS2',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).address3 := Get_Element_VALUE('ADDRESS3',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).address4 := Get_Element_VALUE('ADDRESS4',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).CITY := Get_Element_VALUE('CITY',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).COUNTY := Get_Element_VALUE('COUNTY',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).PROVINCE := Get_Element_VALUE('PROVINCE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).STATE := Get_Element_VALUE('STATE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).POSTAL_CODE := Get_Element_VALUE('POSTAL_CODE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).COUNTRY := Get_Element_VALUE('COUNTRY',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).ADDRESS_LINES_PHONETIC := Get_Element_VALUE('ADDRESS_LINES_PHONETIC',l_addid_record_in_tbl);
-- bug 4641591: columns obsolete
--	 l_customer_tbl(l_rec).PO_BOX_NUMBER := Get_Element_VALUE('PO_BOX_NUMBER',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).HOUSE_NUMBER := Get_Element_VALUE('HOUSE_NUMBER',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).STREET_SUFFIX := Get_Element_VALUE('STREET_SUFFIX',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).STREET := Get_Element_VALUE('STREET',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).STREET_NUMBER := Get_Element_VALUE('STREET_NUMBER',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).FLOOR := Get_Element_VALUE('FLOOR',l_addid_record_in_tbl);
--         l_customer_tbl(l_rec).SUITE := Get_Element_VALUE('SUITE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).POSTAL_PLUS4_CODE := Get_Element_VALUE('POSTAL_PLUS4_CODE',l_addid_record_in_tbl);
         l_customer_tbl(l_rec).IDENTIFYING_ADDRESS_FLAG := Get_Element_VALUE('IDENTIFYING_ADDRESS_FLAG',l_addid_record_in_tbl);

l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := Get_Element_VALUE('ADDRESS_ATTRIBUTE1',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := Get_Element_VALUE('ADDRESS_ATTRIBUTE2',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := Get_Element_VALUE('ADDRESS_ATTRIBUTE3',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := Get_Element_VALUE('ADDRESS_ATTRIBUTE4',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := Get_Element_VALUE('ADDRESS_ATTRIBUTE5',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := Get_Element_VALUE('ADDRESS_ATTRIBUTE6',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := Get_Element_VALUE('ADDRESS_ATTRIBUTE7',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := Get_Element_VALUE('ADDRESS_ATTRIBUTE8',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := Get_Element_VALUE('ADDRESS_ATTRIBUTE9',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := Get_Element_VALUE('ADDRESS_ATTRIBUTE10',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := Get_Element_VALUE('ADDRESS_ATTRIBUTE11',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := Get_Element_VALUE('ADDRESS_ATTRIBUTE12',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := Get_Element_VALUE('ADDRESS_ATTRIBUTE13',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := Get_Element_VALUE('ADDRESS_ATTRIBUTE14',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := Get_Element_VALUE('ADDRESS_ATTRIBUTE15',l_addid_record_in_tbl);
l_customer_tbl(l_rec).DESCRIPTION := Get_Element_VALUE('DESCRIPTION',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := Get_Element_VALUE('ADDRESS_ATTRIBUTE_CATEGORY',l_addid_record_in_tbl);
l_customer_tbl(l_rec).PARTY_SITE_USE := Get_Element_VALUE('PARTY_SITE_USE',l_addid_record_in_tbl);
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := Get_Element_VALUE('LOCATION_DIRECTIONS',l_addid_record_in_tbl);
l_customer_tbl(l_rec).SHORT_DESCRIPTION := Get_Element_VALUE('SHORT_DESCRIPTION',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := Get_Element_VALUE('ADDRESS_EFFECTIVE_DATE',l_addid_record_in_tbl);
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := Get_Element_VALUE('ADDRESS_EXPIRATION_DATE',l_addid_record_in_tbl) ;


       -- dbms_output.put_line( ' cust_data_id '||l_customer_tbl(l_rec).cust_data_id);
       -- dbms_output.put_line( ' add_imp_xml_element_id'||l_customer_tbl(l_rec).add_imp_xml_element_id);
       -- dbms_output.put_line( ' address1 '||l_customer_tbl(l_rec).address1);

         l_rec := 0;
     -- ****************************** End Location process

       -- Process  of Phone data.
       l_pho_element_id := Get_Element_ID('PHONE',l_addid_record_in_tbl);
       -- dbms_output.put_line( ' l_pho_element_id = '||to_char(l_pho_element_id));

    /********* Get all the elements for phone *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_pho_element_id,
        x_child_set          => l_phoid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
 --      dbms_output.put_line( ' Phone attribute count '||l_phoid_record_in_tbl.COUNT);
       FOR k IN 1..l_phoid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_phoid_record_in_tbl(k).imp_xml_element_id,
        x_child_set          => l_phiid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

        l_rec := l_customer_tbl.count;
         if k > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;

             l_customer_tbl(l_rec).per_imp_xml_element_id := l_customer_tbl(l_rec - 1).per_imp_xml_element_id;
             l_customer_tbl(l_rec).PERSON_FIRST_NAME := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME;
             l_customer_tbl(l_rec).PERSON_LAST_NAME := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME;
             l_customer_tbl(l_rec).PERSON_MIDDLE_NAME := l_customer_tbl(l_rec - 1).PERSON_MIDDLE_NAME;
             l_customer_tbl(l_rec).PERSON_NAME_SUFFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_SUFFIX;
             l_customer_tbl(l_rec).PERSON_NAME_PREFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_PREFIX;
             l_customer_tbl(l_rec).SALUTATION := l_customer_tbl(l_rec - 1).SALUTATION;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;

l_customer_tbl(l_rec).PERSONAL_INCOME := l_customer_tbl(l_rec - 1).PERSONAL_INCOME;
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := l_customer_tbl(l_rec - 1).PERSON_ACADEMIC_TITLE;
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME_PHONETIC ;
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME_PHONETIC;
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := l_customer_tbl(l_rec - 1).MIDDLE_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := l_customer_tbl(l_rec - 1).PERSON_PREVIOUS_TITLE_NAME ;
l_customer_tbl(l_rec).PLACE_OF_BIRTH := l_customer_tbl(l_rec - 1).PLACE_OF_BIRTH;
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := l_customer_tbl(l_rec - 1).HEAD_OF_HOUSEHOLD_FLAG;
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := l_customer_tbl(l_rec - 1).HOUSEHOLD_SIZE;
l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).DATE_OF_BIRTH := l_customer_tbl(l_rec - 1).DATE_OF_BIRTH;
l_customer_tbl(l_rec).DATE_OF_DEATH := l_customer_tbl(l_rec - 1).DATE_OF_DEATH;
l_customer_tbl(l_rec).DECLARED_ETHNICITY := l_customer_tbl(l_rec - 1).DECLARED_ETHNICITY;
l_customer_tbl(l_rec).MARITAL_STATUS := l_customer_tbl(l_rec - 1).MARITAL_STATUS;
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).MARITAL_STATUS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE1;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE2;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE3;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE4;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE5;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE6;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE7;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE8;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE9;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE10;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE11;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE12;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE13;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE14;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE15;
l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;


             l_customer_tbl(l_rec).add_imp_xml_element_id := l_customer_tbl(l_rec - 1).add_imp_xml_element_id;
             l_customer_tbl(l_rec).address1 := l_customer_tbl(l_rec - 1).address1;
             l_customer_tbl(l_rec).address2 := l_customer_tbl(l_rec - 1).address2;
             l_customer_tbl(l_rec).address3 := l_customer_tbl(l_rec - 1).address3;
             l_customer_tbl(l_rec).address4 := l_customer_tbl(l_rec - 1).address4;
             l_customer_tbl(l_rec).city := l_customer_tbl(l_rec - 1).city;
             l_customer_tbl(l_rec).county := l_customer_tbl(l_rec - 1).county;
             l_customer_tbl(l_rec).province := l_customer_tbl(l_rec - 1).province;
             l_customer_tbl(l_rec).state := l_customer_tbl(l_rec - 1).state;
             l_customer_tbl(l_rec).postal_code := l_customer_tbl(l_rec - 1).postal_code;
             l_customer_tbl(l_rec).country  := l_customer_tbl(l_rec - 1).country;
             l_customer_tbl(l_rec).address_lines_phonetic := l_customer_tbl(l_rec - 1).address_lines_phonetic;
-- bug 4641591: columns obsolete
--	     l_customer_tbl(l_rec).po_box_number := l_customer_tbl(l_rec - 1).po_box_number;
--             l_customer_tbl(l_rec).house_number := l_customer_tbl(l_rec - 1).house_number;
--             l_customer_tbl(l_rec).street_suffix := l_customer_tbl(l_rec - 1).street_suffix;
--             l_customer_tbl(l_rec).street := l_customer_tbl(l_rec - 1).street;
--             l_customer_tbl(l_rec).street_number := l_customer_tbl(l_rec - 1).street_number;
--             l_customer_tbl(l_rec).floor := l_customer_tbl(l_rec - 1).floor;
--             l_customer_tbl(l_rec).suite := l_customer_tbl(l_rec - 1).suite;
             l_customer_tbl(l_rec).postal_plus4_code := l_customer_tbl(l_rec - 1).postal_plus4_code;
             l_customer_tbl(l_rec).identifying_address_flag := l_customer_tbl(l_rec - 1).identifying_address_flag;

l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE1;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE2;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE3;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE4;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE5;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE6;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE7;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE8;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE9;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE10;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE11;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE12;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE13;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE14;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE15;
l_customer_tbl(l_rec).DESCRIPTION := l_customer_tbl(l_rec - 1).DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).PARTY_SITE_USE := l_customer_tbl(l_rec - 1).PARTY_SITE_USE;
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := l_customer_tbl(l_rec - 1).LOCATION_DIRECTIONS;
l_customer_tbl(l_rec).SHORT_DESCRIPTION := l_customer_tbl(l_rec - 1).SHORT_DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EXPIRATION_DATE;

         end if;

         -- l_customer_tbl(l_rec).cp_imp_xml_element_id := l_phiid_record_in_tbl(i).imp_xml_element_id;
         l_customer_tbl(l_rec).cp_imp_xml_element_id := l_phoid_record_in_tbl(k).imp_xml_element_id;
         l_customer_tbl(l_rec).phone_number := Get_Element_VALUE('PHONE_NUMBER',l_phiid_record_in_tbl);
         l_customer_tbl(l_rec).phone_country_code := Get_Element_VALUE('PHONE_COUNTRY_CODE',l_phiid_record_in_tbl);
         l_customer_tbl(l_rec).phone_area_code := Get_Element_VALUE('PHONE_AREA_CODE',l_phiid_record_in_tbl);
         l_customer_tbl(l_rec).phone_extension := Get_Element_VALUE('PHONE_EXTENTION',l_phiid_record_in_tbl);
         l_rec := 0;
       END LOOP; -- Phone


       -- Process  of Email data.
       l_ema_element_id := Get_Element_ID('EMAIL',l_addid_record_in_tbl);
       -- dbms_output.put_line( ' l_ema_element_id = '||to_char(l_ema_element_id));

    /********* Get all the elements for email *****************************/
      AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_ema_element_id,
        x_child_set          => l_emaid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);
       -- dbms_output.put_line( ' attributl email count '||l_emaid_record_in_tbl.COUNT);
       FOR l IN 1..l_emaid_record_in_tbl.COUNT LOOP
        AMS_IMPORT_XML_PVT.Get_Children_Nodes (
        p_imp_xml_element_id => l_emaid_record_in_tbl(l).imp_xml_element_id,
        x_child_set          => l_emlid_record_in_tbl,
        x_return_status      => x_return_status,
        x_msg_data           => x_msg_data);

        l_rec := l_customer_tbl.count;
         if l > 1 then
             l_rec := l_customer_tbl.count+1;
             l_customer_tbl(l_rec).cust_data_id := l_rec;


             l_customer_tbl(l_rec).per_imp_xml_element_id := l_customer_tbl(l_rec - 1).per_imp_xml_element_id;
             l_customer_tbl(l_rec).PERSON_FIRST_NAME := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME;
             l_customer_tbl(l_rec).PERSON_LAST_NAME := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME;
             l_customer_tbl(l_rec).PERSON_MIDDLE_NAME := l_customer_tbl(l_rec - 1).PERSON_MIDDLE_NAME;
             l_customer_tbl(l_rec).PERSON_NAME_SUFFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_SUFFIX;
             l_customer_tbl(l_rec).PERSON_NAME_PREFIX := l_customer_tbl(l_rec - 1).PERSON_NAME_PREFIX;
             l_customer_tbl(l_rec).SALUTATION := l_customer_tbl(l_rec - 1).SALUTATION;
             l_customer_tbl(l_rec).party_id := l_customer_tbl(l_rec - 1).party_id;

l_customer_tbl(l_rec).PERSONAL_INCOME := l_customer_tbl(l_rec - 1).PERSONAL_INCOME;
l_customer_tbl(l_rec).PERSON_ACADEMIC_TITLE := l_customer_tbl(l_rec - 1).PERSON_ACADEMIC_TITLE;
l_customer_tbl(l_rec).PERSON_FIRST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_FIRST_NAME_PHONETIC ;
l_customer_tbl(l_rec).PERSON_LAST_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_LAST_NAME_PHONETIC;
l_customer_tbl(l_rec).MIDDLE_NAME_PHONETIC := l_customer_tbl(l_rec - 1).MIDDLE_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_NAME_PHONETIC := l_customer_tbl(l_rec - 1).PERSON_NAME_PHONETIC;
l_customer_tbl(l_rec).PERSON_PREVIOUS_TITLE_NAME := l_customer_tbl(l_rec - 1).PERSON_PREVIOUS_TITLE_NAME ;
l_customer_tbl(l_rec).PLACE_OF_BIRTH := l_customer_tbl(l_rec - 1).PLACE_OF_BIRTH;
l_customer_tbl(l_rec).HEAD_OF_HOUSEHOLD_FLAG := l_customer_tbl(l_rec - 1).HEAD_OF_HOUSEHOLD_FLAG;
l_customer_tbl(l_rec).HOUSEHOLD_SIZE := l_customer_tbl(l_rec - 1).HOUSEHOLD_SIZE;
l_customer_tbl(l_rec).TAX_REFERENCE := l_customer_tbl(l_rec - 1).TAX_REFERENCE;
l_customer_tbl(l_rec).ORIG_SYSTEM_REFERENCE := l_customer_tbl(l_rec - 1).ORIG_SYSTEM_REFERENCE;
l_customer_tbl(l_rec).RENT_OWNED_INDICATOR := l_customer_tbl(l_rec - 1).RENT_OWNED_INDICATOR;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).DATE_OF_BIRTH := l_customer_tbl(l_rec - 1).DATE_OF_BIRTH;
l_customer_tbl(l_rec).DATE_OF_DEATH := l_customer_tbl(l_rec - 1).DATE_OF_DEATH;
l_customer_tbl(l_rec).DECLARED_ETHNICITY := l_customer_tbl(l_rec - 1).DECLARED_ETHNICITY;
l_customer_tbl(l_rec).MARITAL_STATUS := l_customer_tbl(l_rec - 1).MARITAL_STATUS;
l_customer_tbl(l_rec).MARITAL_STATUS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).MARITAL_STATUS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE1;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE2;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE3;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE4;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE5;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE6;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE7;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE8;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE9;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE10;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE11;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE12;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE13;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE14;
l_customer_tbl(l_rec).PERSON_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).PERSON_ATTRIBUTE15;
l_customer_tbl(l_rec).VEHICLE_RESPONSE_CODE := l_customer_tbl(l_rec - 1).VEHICLE_RESPONSE_CODE;
l_customer_tbl(l_rec).SALES_AGENT_EMAIL_ID := l_customer_tbl(l_rec - 1).SALES_AGENT_EMAIL_ID;
l_customer_tbl(l_rec).NOTES := l_customer_tbl(l_rec - 1).NOTES;


             l_customer_tbl(l_rec).add_imp_xml_element_id := l_customer_tbl(l_rec - 1).add_imp_xml_element_id;
             l_customer_tbl(l_rec).address1 := l_customer_tbl(l_rec - 1).address1;
             l_customer_tbl(l_rec).address2 := l_customer_tbl(l_rec - 1).address2;
             l_customer_tbl(l_rec).address3 := l_customer_tbl(l_rec - 1).address3;
             l_customer_tbl(l_rec).address4 := l_customer_tbl(l_rec - 1).address4;
             l_customer_tbl(l_rec).city := l_customer_tbl(l_rec - 1).city;
             l_customer_tbl(l_rec).county := l_customer_tbl(l_rec - 1).county;
             l_customer_tbl(l_rec).province := l_customer_tbl(l_rec - 1).province;
             l_customer_tbl(l_rec).state := l_customer_tbl(l_rec - 1).state;
             l_customer_tbl(l_rec).postal_code := l_customer_tbl(l_rec - 1).postal_code;
             l_customer_tbl(l_rec).country  := l_customer_tbl(l_rec - 1).country;
             l_customer_tbl(l_rec).address_lines_phonetic := l_customer_tbl(l_rec - 1).address_lines_phonetic;
-- bug 4641591: columns obsolete
--	     l_customer_tbl(l_rec).po_box_number := l_customer_tbl(l_rec - 1).po_box_number;
--             l_customer_tbl(l_rec).house_number := l_customer_tbl(l_rec - 1).house_number;
--             l_customer_tbl(l_rec).street_suffix := l_customer_tbl(l_rec - 1).street_suffix;
--             l_customer_tbl(l_rec).street := l_customer_tbl(l_rec - 1).street;
--             l_customer_tbl(l_rec).street_number := l_customer_tbl(l_rec - 1).street_number;
--             l_customer_tbl(l_rec).floor := l_customer_tbl(l_rec - 1).floor;
--             l_customer_tbl(l_rec).suite := l_customer_tbl(l_rec - 1).suite;
             l_customer_tbl(l_rec).postal_plus4_code := l_customer_tbl(l_rec - 1).postal_plus4_code;
             l_customer_tbl(l_rec).identifying_address_flag := l_customer_tbl(l_rec - 1).identifying_address_flag;

l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE1 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE1;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE2 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE2;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE3 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE3;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE4 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE4;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE5 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE5;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE6 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE6;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE7 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE7;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE8 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE8;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE9 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE9;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE10 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE10;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE11 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE11;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE12 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE12;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE13 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE13;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE14 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE14;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE15 := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE15;
l_customer_tbl(l_rec).DESCRIPTION := l_customer_tbl(l_rec - 1).DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_ATTRIBUTE_CATEGORY := l_customer_tbl(l_rec - 1).ADDRESS_ATTRIBUTE_CATEGORY;
l_customer_tbl(l_rec).PARTY_SITE_USE := l_customer_tbl(l_rec - 1).PARTY_SITE_USE;
l_customer_tbl(l_rec).LOCATION_DIRECTIONS := l_customer_tbl(l_rec - 1).LOCATION_DIRECTIONS;
l_customer_tbl(l_rec).SHORT_DESCRIPTION := l_customer_tbl(l_rec - 1).SHORT_DESCRIPTION;
l_customer_tbl(l_rec).ADDRESS_EFFECTIVE_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EFFECTIVE_DATE;
l_customer_tbl(l_rec).ADDRESS_EXPIRATION_DATE := l_customer_tbl(l_rec - 1).ADDRESS_EXPIRATION_DATE;

         end if;
         l_customer_tbl(l_rec).em_imp_xml_element_id := l_emaid_record_in_tbl(l).imp_xml_element_id;
         l_customer_tbl(l_rec).email_address := Get_Element_VALUE('EMAIL_ADDRESS',l_emlid_record_in_tbl);
         l_rec := 0;
       END LOOP; -- Email

     -- ******************************Location process

       END LOOP; -- Locarion process
       p_cust_tbl := l_customer_tbl;

 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in Process_b2c_xml_data :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

END Process_b2c_xml_data;
-- -----------------------------------------------------
--
-- This program populates the ams_imp-source_lines table.
--
Procedure      Create_b2b_src_lines(
                p_import_list_header_id   IN number,
                p_cust_b2b_tbl            in cust_data_in_tbl,
                x_return_status           OUT NOCOPY varchar2,
                x_msg_data                OUT NOCOPY varchar2) is

l_batch_id      number;
cursor c_batchID is select batch_id from ams_imp_list_headers_all
where import_list_header_id = p_import_list_header_id;

begin
 open c_batchID;
 fetch c_batchID into l_batch_id;
 close c_batchID;
 FOR i IN 1..p_cust_b2b_tbl.COUNT LOOP
 Insert into AMS_HZ_B2B_MAPPING_V(
 IMPORT_SOURCE_LINE_ID,
 LAST_UPDATED_BY,
 LAST_UPDATE_DATE,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_LOGIN,
 IMPORT_SUCCESSFUL_FLAG,
 OBJECT_VERSION_NUMBER,
 IMPORT_LIST_HEADER_ID,
 LOAD_STATUS,
 batch_id,
 PARTY_NAME,
 FISCAL_YEAREND_MONTH,
 DUNS_NUMBER,
 EMPLOYEES_TOTAL,
 LINE_OF_BUSINESS,
 YEAR_ESTABLISHED,
 TAX_REFERENCE,
 CEO_NAME,
 PERSON_FIRST_NAME,
 PERSON_MIDDLE_NAME,
 PERSON_LAST_NAME,
 PERSON_NAME_SUFFIX,
 PERSON_NAME_PREFIX,
 COUNTRY,
 ADDRESS1,
 ADDRESS2,
 CITY,
 COUNTY,
 STATE,
 PROVINCE,
 POSTAL_CODE,
 EMAIL_ADDRESS,
 PHONE_COUNTRY_CODE,
 PHONE_AREA_CODE,
 PHONE_NUMBER,
 PHONE_EXTENTION,
 DEPARTMENT,
 JOB_TITLE,
 DECISION_MAKER_FLAG,
 SIC_CODE,
 SIC_CODE_TYPE,
 ANALYSIS_FY         ,
 CURR_FY_POTENTIAL_REVENUE,
 NEXT_FY_POTENTIAL_REVENUE,
 GSA_INDICATOR_FLAG       ,
 MISSION_STATEMENT        ,
 ORGANIZATION_NAME_PHONETIC,
 CATEGORY_CODE              ,
 JGZZ_FISCAL_CODE           ,
 ADDRESS3                   ,
 ADDRESS4                   ,
 ADDRESS_LINES_PHONETIC     ,
-- bug 4641591: columns obsolete
-- PO_BOX_NUMBER              ,
-- HOUSE_NUMBER               ,
-- STREET_SUFFIX              ,
-- STREET                     ,
-- STREET_NUMBER              ,
-- FLOOR                      ,
-- SUITE                      ,
 POSTAL_PLUS4_CODE          ,
 identifying_address_flag   ,
 party_id,
org_imp_xml_element_id,
add_imp_xml_element_id,
ocont_imp_xml_element_id,
cp_imp_xml_element_id,
em_imp_xml_element_id,
ADDRESS_EFFECTIVE_DATE,
ADDRESS_EXPIRATION_DATE,
-- ANNUAL_REVENUE,
-- ANNUAL_REVENUE_CURRENCY,
BRANCH_FLAG,
BUSINESS_LINE,
BUSINESS_SCOPE,
CHIEF_EXECUTIVE_TITLE,
CONGRESSIONAL_DISTRICT_CODE,
CONTROL_YEAR,
CORPORATION_CLASS,
CREDIT_SCORE,
CREDIT_SCORE_COMMENTARY,
CUSTOMER_CATEGORY,
DB_RATING,
DATE_OF_BIRTH,
DATE_OF_DEATH,
DEBARMENTS_COUNT,
DEBARTMENTS_DATE,
DECLARED_ETHNICITY,
DEPARTMENT_INDICATOR,
DESCRIPTION,
DISADVANTAGED_INDICATOR,
ENQUIRY_DUNS,
EXPORT_INDICATOR,
FAILURE_SCORE,
FAILURE_SCORE_COMMENTARY,
FAILURE_SCORE_NATL_PERCENTILE,
FAILURE_SCORE_OVERRIDE_CODE,
-- FISCAL_CODE,
GLOBAL_FAILURE_SCORE,
HEADQUARTER_BRANCH_INDICATOR,
HEAD_OF_HOUSEHOLD_FLAG,
HOUSEHOLD_SIZE,
IMPORT_INDICATOR,
ORGANIZATION_KNOWN_AS,
ORGANIZATION_KNOWN_AS2,
ORGANIZATION_KNOWN_AS3,
ORGANIZATION_KNOWN_AS4,
ORGANIZATION_KNOWN_AS5,
PERSON_KNOWN_AS,
PERSON_KNOWN_AS2,
PERSON_KNOWN_AS3,
PERSON_KNOWN_AS4,
PERSON_KNOWN_AS5,
LABOR_SURPLUS_INDICATOR,
LOCAL_ACTIVITY_CODE,
LOCAL_ACTIVITY_CODE_TYPE,
LOCATION_DIRECTIONS,
-- LOCATION_STATUS,
MARITAL_STATUS,
MARITAL_STATUS_EFFECTIVE_DATE,
MINORITY_OWNED_INDICATOR,
MINORITY_OWNED_TYPE,
-- ORGANIZATION_ALIAS,
ORGANIZATION_TYPE,
ORGANIZATION_URL,
OUT_OF_BUSINESS_INDICATOR,
PERSONAL_INCOME,
PERSON_ACADEMIC_TITLE,
PERSON_FIRST_NAME_PHONETIC,
PERSON_LAST_NAME_PHONETIC,
MIDDLE_NAME_PHONETIC,
PERSON_NAME_PHONETIC,
PERSON_PREVIOUS_TITLE_NAME,
PLACE_OF_BIRTH,
-- PREFERRED_NAME,
PRINCIPAL_NAME,
PRINCIPAL_TITLE,
PUBLIC_PRIVATE_OWNERSHIP_FLAG,
RENT_OWNED_INDICATOR,
-- RENT_OWNER_INDICATOR,
-- SECOND_TITLE,
SHORT_DESCRIPTION,
SMALL_BUSINESS_INDICATOR,
TAX_ID,
WOMAN_OWNED_INDICATOR,
ORGANIZATION_ATTRIBUTE1,
ORGANIZATION_ATTRIBUTE2,
ORGANIZATION_ATTRIBUTE3,
ORGANIZATION_ATTRIBUTE4,
ORGANIZATION_ATTRIBUTE5,
ORGANIZATION_ATTRIBUTE6,
ORGANIZATION_ATTRIBUTE7,
ORGANIZATION_ATTRIBUTE8,
ORGANIZATION_ATTRIBUTE9,
ORGANIZATION_ATTRIBUTE10,
ORGANIZATION_ATTRIBUTE11,
ORGANIZATION_ATTRIBUTE12,
ORGANIZATION_ATTRIBUTE13,
ORGANIZATION_ATTRIBUTE14,
ORGANIZATION_ATTRIBUTE15,
ORG_CONTACT_ATTRIBUTE1,
ORG_CONTACT_ATTRIBUTE2,
ORG_CONTACT_ATTRIBUTE3,
ORG_CONTACT_ATTRIBUTE4,
ORG_CONTACT_ATTRIBUTE5,
ORG_CONTACT_ATTRIBUTE6,
ORG_CONTACT_ATTRIBUTE7,
ORG_CONTACT_ATTRIBUTE8,
ORG_CONTACT_ATTRIBUTE9,
ORG_CONTACT_ATTRIBUTE10,
ORG_CONTACT_ATTRIBUTE11,
ORG_CONTACT_ATTRIBUTE12,
ORG_CONTACT_ATTRIBUTE13,
ORG_CONTACT_ATTRIBUTE14,
ORG_CONTACT_ATTRIBUTE15,
ADDRESS_ATTRIBUTE1,
ADDRESS_ATTRIBUTE2,
ADDRESS_ATTRIBUTE3,
ADDRESS_ATTRIBUTE4,
ADDRESS_ATTRIBUTE5,
ADDRESS_ATTRIBUTE6,
ADDRESS_ATTRIBUTE7,
ADDRESS_ATTRIBUTE8,
ADDRESS_ATTRIBUTE9,
ADDRESS_ATTRIBUTE10,
ADDRESS_ATTRIBUTE11,
ADDRESS_ATTRIBUTE12,
ADDRESS_ATTRIBUTE13,
ADDRESS_ATTRIBUTE14,
ADDRESS_ATTRIBUTE15,
ORG_ATTRIBUTE_CATEGORY,
ORG_CONTACT_ATTRIBUTE_CATEGORY,
ADDRESS_ATTRIBUTE_CATEGORY,
PARTY_SITE_USE,
VEHICLE_RESPONSE_CODE,
SALES_AGENT_EMAIL_ADDRESS,
NOTES,
orig_system_reference
)
 VALUES
 (
 ams_imp_source_lines_s.nextval,    -- IMPORT_SOURCE_LINE_ID,
 FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
 SYSDATE,                              -- LAST_UPDATE_DATE,
 SYSDATE,                              -- CREATION_DATE,
 FND_GLOBAL.User_ID,                   -- CREATED_BY,
 FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
 'N',
 '1',
 p_import_list_header_id,
 'ACTIVE',
 l_batch_id,
 p_cust_b2b_tbl(i).PARTY_NAME,
 p_cust_b2b_tbl(i).FISCAL_YEAREND_MONTH,
 p_cust_b2b_tbl(i).DUNS_NUMBER,
 p_cust_b2b_tbl(i).EMPLOYEES_TOTAL,
 p_cust_b2b_tbl(i).LINE_OF_BUSINESS,
 p_cust_b2b_tbl(i).YEAR_ESTABLISHED,
 p_cust_b2b_tbl(i).TAX_REFERENCE,
 p_cust_b2b_tbl(i).CEO_NAME,
 p_cust_b2b_tbl(i).PERSON_FIRST_NAME,
 p_cust_b2b_tbl(i).PERSON_MIDDLE_NAME,
 p_cust_b2b_tbl(i).PERSON_LAST_NAME,
 p_cust_b2b_tbl(i).PERSON_NAME_SUFFIX,
 p_cust_b2b_tbl(i).PERSON_NAME_PREFIX,
 p_cust_b2b_tbl(i).COUNTRY,
 p_cust_b2b_tbl(i).ADDRESS1,
 p_cust_b2b_tbl(i).ADDRESS2,
 p_cust_b2b_tbl(i).CITY,
 p_cust_b2b_tbl(i).COUNTY,
 p_cust_b2b_tbl(i).STATE,
 p_cust_b2b_tbl(i).PROVINCE,
 p_cust_b2b_tbl(i).POSTAL_CODE,
 p_cust_b2b_tbl(i).EMAIL_ADDRESS,
 p_cust_b2b_tbl(i).PHONE_COUNTRY_CODE,
 p_cust_b2b_tbl(i).PHONE_AREA_CODE,
 p_cust_b2b_tbl(i).PHONE_NUMBER,
 p_cust_b2b_tbl(i).PHONE_EXTENSION,
 p_cust_b2b_tbl(i).DEPARTMENT,
 p_cust_b2b_tbl(i).JOB_TITLE,
 p_cust_b2b_tbl(i).DECISION_MAKER_FLAG,
 p_cust_b2b_tbl(i).SIC_CODE,
 p_cust_b2b_tbl(i).SIC_CODE_TYPE,
 p_cust_b2b_tbl(i).ANALYSIS_FY         ,
 p_cust_b2b_tbl(i).CURR_FY_POTENTIAL_REVENUE,
 p_cust_b2b_tbl(i).NEXT_FY_POTENTIAL_REVENUE,
 p_cust_b2b_tbl(i).GSA_INDICATOR_FLAG       ,
 p_cust_b2b_tbl(i).MISSION_STATEMENT        ,
 p_cust_b2b_tbl(i).ORGANIZATION_NAME_PHONETIC,
 p_cust_b2b_tbl(i).CATEGORY_CODE              ,
 p_cust_b2b_tbl(i).JGZZ_FISCAL_CODE           ,
 p_cust_b2b_tbl(i).ADDRESS3                   ,
 p_cust_b2b_tbl(i).ADDRESS4                   ,
 p_cust_b2b_tbl(i).ADDRESS_LINES_PHONETIC     ,
-- bug 4641591: columns obsolete
-- p_cust_b2b_tbl(i).PO_BOX_NUMBER              ,
-- p_cust_b2b_tbl(i).HOUSE_NUMBER               ,
-- p_cust_b2b_tbl(i).STREET_SUFFIX              ,
-- p_cust_b2b_tbl(i).STREET                     ,
-- p_cust_b2b_tbl(i).STREET_NUMBER              ,
-- p_cust_b2b_tbl(i).FLOOR                      ,
-- p_cust_b2b_tbl(i).SUITE                      ,
 p_cust_b2b_tbl(i).POSTAL_PLUS4_CODE          ,
 p_cust_b2b_tbl(i).identifying_address_flag   ,
 p_cust_b2b_tbl(i).party_id,
p_cust_b2b_tbl(i).org_imp_xml_element_id,
p_cust_b2b_tbl(i).add_imp_xml_element_id,
p_cust_b2b_tbl(i).ocont_imp_xml_element_id,
p_cust_b2b_tbl(i).cp_imp_xml_element_id,
p_cust_b2b_tbl(i).em_imp_xml_element_id,
p_cust_b2b_tbl(i).ADDRESS_EFFECTIVE_DATE,
p_cust_b2b_tbl(i).ADDRESS_EXPIRATION_DATE,
-- p_cust_b2b_tbl(i).ANNUAL_REVENUE,
-- p_cust_b2b_tbl(i).ANNUAL_REVENUE_CURRENCY,
p_cust_b2b_tbl(i).BRANCH_FLAG,
p_cust_b2b_tbl(i).BUSINESS_LINE,
p_cust_b2b_tbl(i).BUSINESS_SCOPE,
p_cust_b2b_tbl(i).CHIEF_EXECUTIVE_TITLE,
p_cust_b2b_tbl(i).CONGRESSIONAL_DISTRICT_CODE,
p_cust_b2b_tbl(i).CONTROL_YEAR,
p_cust_b2b_tbl(i).CORPORATION_CLASS,
p_cust_b2b_tbl(i).CREDIT_SCORE,
p_cust_b2b_tbl(i).CREDIT_SCORE_COMMENTARY,
p_cust_b2b_tbl(i).CUSTOMER_CATEGORY,
p_cust_b2b_tbl(i).DB_RATING,
p_cust_b2b_tbl(i).DATE_OF_BIRTH,
p_cust_b2b_tbl(i).DATE_OF_DEATH,
p_cust_b2b_tbl(i).DEBARMENTS_COUNT,
p_cust_b2b_tbl(i).DEBARTMENTS_DATE,
p_cust_b2b_tbl(i).DECLARED_ETHNICITY,
p_cust_b2b_tbl(i).DEPARTMENT_INDICATOR,
p_cust_b2b_tbl(i).DESCRIPTION,
p_cust_b2b_tbl(i).DISADVANTAGED_INDICATOR,
p_cust_b2b_tbl(i).ENQUIRY_DUNS,
p_cust_b2b_tbl(i).EXPORT_INDICATOR,
p_cust_b2b_tbl(i).FAILURE_SCORE,
p_cust_b2b_tbl(i).FAILURE_SCORE_COMMENTARY,
p_cust_b2b_tbl(i).FAILURE_SCORE_NATL_PERCENTILE,
p_cust_b2b_tbl(i).FAILURE_SCORE_OVERRIDE_CODE,
-- p_cust_b2b_tbl(i).FISCAL_CODE,
p_cust_b2b_tbl(i).GLOBAL_FAILURE_SCORE,
p_cust_b2b_tbl(i).HEADQUARTER_BRANCH_INDICATOR,
p_cust_b2b_tbl(i).HEAD_OF_HOUSEHOLD_FLAG,
p_cust_b2b_tbl(i).HOUSEHOLD_SIZE,
p_cust_b2b_tbl(i).IMPORT_INDICATOR,
p_cust_b2b_tbl(i).ORGANIZATION_KNOWN_AS,
p_cust_b2b_tbl(i).ORGANIZATION_KNOWN_AS2,
p_cust_b2b_tbl(i).ORGANIZATION_KNOWN_AS3,
p_cust_b2b_tbl(i).ORGANIZATION_KNOWN_AS4,
p_cust_b2b_tbl(i).ORGANIZATION_KNOWN_AS5,
p_cust_b2b_tbl(i).PERSON_KNOWN_AS,
p_cust_b2b_tbl(i).PERSON_KNOWN_AS2,
p_cust_b2b_tbl(i).PERSON_KNOWN_AS3,
p_cust_b2b_tbl(i).PERSON_KNOWN_AS4,
p_cust_b2b_tbl(i).PERSON_KNOWN_AS5,
p_cust_b2b_tbl(i).LABOR_SURPLUS_INDICATOR,
p_cust_b2b_tbl(i).LOCAL_ACTIVITY_CODE,
p_cust_b2b_tbl(i).LOCAL_ACTIVITY_CODE_TYPE,
p_cust_b2b_tbl(i).LOCATION_DIRECTIONS,
-- p_cust_b2b_tbl(i).LOCATION_STATUS,
p_cust_b2b_tbl(i).MARITAL_STATUS,
p_cust_b2b_tbl(i).MARITAL_STATUS_EFFECTIVE_DATE,
p_cust_b2b_tbl(i).MINORITY_OWNED_INDICATOR,
p_cust_b2b_tbl(i).MINORITY_OWNED_TYPE,
-- p_cust_b2b_tbl(i).ORGANIZATION_ALIAS,
p_cust_b2b_tbl(i).ORGANIZATION_TYPE,
p_cust_b2b_tbl(i).ORGANIZATION_URL,
p_cust_b2b_tbl(i).OUT_OF_BUSINESS_INDICATOR,
p_cust_b2b_tbl(i).PERSONAL_INCOME,
p_cust_b2b_tbl(i).PERSON_ACADEMIC_TITLE,
p_cust_b2b_tbl(i).PERSON_FIRST_NAME_PHONETIC,
p_cust_b2b_tbl(i).PERSON_LAST_NAME_PHONETIC,
p_cust_b2b_tbl(i).MIDDLE_NAME_PHONETIC,
p_cust_b2b_tbl(i).PERSON_NAME_PHONETIC,
p_cust_b2b_tbl(i).PERSON_PREVIOUS_TITLE_NAME,
p_cust_b2b_tbl(i).PLACE_OF_BIRTH,
-- p_cust_b2b_tbl(i).PREFERRED_NAME,
p_cust_b2b_tbl(i).PRINCIPAL_NAME,
p_cust_b2b_tbl(i).PRINCIPAL_TITLE,
p_cust_b2b_tbl(i).PUBLIC_PRIVATE_OWNERSHIP_FLAG,
p_cust_b2b_tbl(i).RENT_OWNED_INDICATOR,
-- p_cust_b2b_tbl(i).RENT_OWNER_INDICATOR,
-- p_cust_b2b_tbl(i).SECOND_TITLE,
p_cust_b2b_tbl(i).SHORT_DESCRIPTION,
p_cust_b2b_tbl(i).SMALL_BUSINESS_INDICATOR,
p_cust_b2b_tbl(i).TAX_ID,
p_cust_b2b_tbl(i).WOMAN_OWNED_INDICATOR,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE1,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE2,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE3,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE4,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE5,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE6,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE7,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE8,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE9,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE10,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE11,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE12,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE13,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE14,
p_cust_b2b_tbl(i).ORGANIZATION_ATTRIBUTE15,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE1,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE2,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE3,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE4,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE5,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE6,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE7,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE8,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE9,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE10,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE11,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE12,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE13,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE14,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE15,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE1,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE2,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE3,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE4,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE5,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE6,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE7,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE8,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE9,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE10,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE11,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE12,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE13,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE14,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE15,
p_cust_b2b_tbl(i).ORG_ATTRIBUTE_CATEGORY,
p_cust_b2b_tbl(i).ORG_CONTACT_ATTRIBUTE_CATEGORY,
p_cust_b2b_tbl(i).ADDRESS_ATTRIBUTE_CATEGORY,
p_cust_b2b_tbl(i).PARTY_SITE_USE,
p_cust_b2b_tbl(i).VEHICLE_RESPONSE_CODE,
p_cust_b2b_tbl(i).SALES_AGENT_EMAIL_ID,
p_cust_b2b_tbl(i).NOTES,
p_cust_b2b_tbl(i).orig_system_reference
);
 END LOOP;
commit;

 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in Create_b2b_src_lines:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end Create_b2b_src_lines;
-- -------------------------------------------------------------------
--
-- This program populates the ams_imp-source_lines table.
--
Procedure      Create_b2c_src_lines(
                p_import_list_header_id   IN number,
                p_cust_b2c_tbl            in cust_b2c_data_in_tbl,
                x_return_status           OUT NOCOPY varchar2,
                x_msg_data                OUT NOCOPY varchar2) IS

l_batch_id	number;
cursor c_batchID is select batch_id from ams_imp_list_headers_all
where import_list_header_id = p_import_list_header_id;

begin
 open c_batchID;
 fetch c_batchID into l_batch_id;
 close c_batchID;
 FOR i IN 1..p_cust_b2c_tbl.COUNT LOOP
 Insert into AMS_HZ_B2C_MAPPING_V(
 IMPORT_SOURCE_LINE_ID,
 LAST_UPDATED_BY,
 LAST_UPDATE_DATE,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_LOGIN,
 IMPORT_SUCCESSFUL_FLAG,
 OBJECT_VERSION_NUMBER,
 IMPORT_LIST_HEADER_ID,
 LOAD_STATUS,
 batch_id,
 PERSON_FIRST_NAME,
 PERSON_MIDDLE_NAME,
 PERSON_LAST_NAME,
 PERSON_NAME_SUFFIX,
 PERSON_NAME_PREFIX,
 -- PERSON_PRE_NAME_ADJUNCT,
 SALUTATION,
 COUNTRY,
 ADDRESS1,
 ADDRESS2,
 CITY,
 COUNTY,
 STATE,
 PROVINCE,
 POSTAL_CODE,
 EMAIL_ADDRESS,
 PHONE_COUNTRY_CODE,
 PHONE_AREA_CODE,
 PHONE_NUMBER,
 PHONE_EXTENTION,
 ADDRESS3                   ,
 ADDRESS4                   ,
 ADDRESS_LINES_PHONETIC     ,
-- bug 4641591: columns obsolete
-- PO_BOX_NUMBER              ,
-- HOUSE_NUMBER               ,
-- STREET_SUFFIX              ,
-- STREET                     ,
-- STREET_NUMBER              ,
-- FLOOR                      ,
-- SUITE                      ,
 POSTAL_PLUS4_CODE          ,
 identifying_address_flag   ,
 party_id,
per_imp_xml_element_id,
add_imp_xml_element_id,
cp_imp_xml_element_id,
em_imp_xml_element_id,
PERSON_LAST_NAME_PHONETIC,
PERSON_FIRST_NAME_PHONETIC,
URL,
DATE_OF_BIRTH,
PERSON_ACADEMIC_TITLE,
PERSON_PREVIOUS_TITLE_NAME,
PERSON_KNOWN_AS,
PERSON_KNOWN_AS2,
PERSON_KNOWN_AS3,
PERSON_KNOWN_AS4,
PERSON_KNOWN_AS5,
PERSON_NAME_PHONETIC,
MIDDLE_NAME_PHONETIC,
FISCAL_CODE,
PLACE_OF_BIRTH,
DATE_OF_DEATH,
DECLARED_ETHNICITY,
MARITAL_STATUS,
PERSONAL_INCOME,
MARITAL_STATUS_EFFECTIVE_DATE,
HEAD_OF_HOUSEHOLD_FLAG,
HOUSEHOLD_SIZE,
LOCATION_DIRECTIONS,
ADDRESS_EFFECTIVE_DATE,
ADDRESS_EXPIRATION_DATE,
PERSON_ATTRIBUTE1,
PERSON_ATTRIBUTE2,
PERSON_ATTRIBUTE3,
PERSON_ATTRIBUTE4,
PERSON_ATTRIBUTE5,
PERSON_ATTRIBUTE6,
PERSON_ATTRIBUTE7,
PERSON_ATTRIBUTE8,
PERSON_ATTRIBUTE9,
PERSON_ATTRIBUTE10,
PERSON_ATTRIBUTE11,
PERSON_ATTRIBUTE12,
PERSON_ATTRIBUTE13,
PERSON_ATTRIBUTE14,
PERSON_ATTRIBUTE15,
ADDRESS_ATTRIBUTE1,
ADDRESS_ATTRIBUTE2,
ADDRESS_ATTRIBUTE3,
ADDRESS_ATTRIBUTE4,
ADDRESS_ATTRIBUTE5,
ADDRESS_ATTRIBUTE6,
ADDRESS_ATTRIBUTE7,
ADDRESS_ATTRIBUTE8,
ADDRESS_ATTRIBUTE9,
ADDRESS_ATTRIBUTE10,
ADDRESS_ATTRIBUTE11,
ADDRESS_ATTRIBUTE12,
ADDRESS_ATTRIBUTE13,
ADDRESS_ATTRIBUTE14,
ADDRESS_ATTRIBUTE15,
PERSON_ATTRIBUTE_CATEGORY,
ADDRESS_ATTRIBUTE_CATEGORY,
PARTY_SITE_USE,
SHORT_DESCRIPTION,
DESCRIPTION,
VEHICLE_RESPONSE_CODE,
SALES_AGENT_EMAIL_ADDRESS,
NOTES,
orig_system_reference,
tax_reference,
rent_owned_indicator
)
 VALUES
 (
 ams_imp_source_lines_s.nextval,    -- IMPORT_SOURCE_LINE_ID,
 FND_GLOBAL.User_ID,                   -- LAST_UPDATED_BY,
 SYSDATE,                              -- LAST_UPDATE_DATE,
 SYSDATE,                              -- CREATION_DATE,
 FND_GLOBAL.User_ID,                   -- CREATED_BY,
 FND_GLOBAL.Conc_Login_ID,             -- LAST_UPDATE_LOGIN,
 'N',
 '1',
 p_import_list_header_id,
 'ACTIVE',
 l_batch_id,
 p_cust_b2c_tbl(i).PERSON_FIRST_NAME,
 p_cust_b2c_tbl(i).PERSON_MIDDLE_NAME,
 p_cust_b2c_tbl(i).PERSON_LAST_NAME,
 p_cust_b2c_tbl(i).PERSON_NAME_SUFFIX,
 p_cust_b2c_tbl(i).PERSON_NAME_PREFIX,
--  p_cust_b2c_tbl(i).PERSON_PRE_NAME_ADJUNCT,
 p_cust_b2c_tbl(i).salutation,
 p_cust_b2c_tbl(i).COUNTRY,
 p_cust_b2c_tbl(i).ADDRESS1,
 p_cust_b2c_tbl(i).ADDRESS2,
 p_cust_b2c_tbl(i).CITY,
 p_cust_b2c_tbl(i).COUNTY,
 p_cust_b2c_tbl(i).STATE,
 p_cust_b2c_tbl(i).PROVINCE,
 p_cust_b2c_tbl(i).POSTAL_CODE,
 p_cust_b2c_tbl(i).EMAIL_ADDRESS,
 p_cust_b2c_tbl(i).PHONE_COUNTRY_CODE,
 p_cust_b2c_tbl(i).PHONE_AREA_CODE,
 p_cust_b2c_tbl(i).PHONE_NUMBER,
 p_cust_b2c_tbl(i).PHONE_EXTENSION,
 p_cust_b2c_tbl(i).ADDRESS3                   ,
 p_cust_b2c_tbl(i).ADDRESS4                   ,
 p_cust_b2c_tbl(i).ADDRESS_LINES_PHONETIC     ,
-- bug 4641591: columns obsolete
-- p_cust_b2c_tbl(i).PO_BOX_NUMBER              ,
-- p_cust_b2c_tbl(i).HOUSE_NUMBER               ,
-- p_cust_b2c_tbl(i).STREET_SUFFIX              ,
-- p_cust_b2c_tbl(i).STREET                     ,
-- p_cust_b2c_tbl(i).STREET_NUMBER              ,
-- p_cust_b2c_tbl(i).FLOOR                      ,
-- p_cust_b2c_tbl(i).SUITE                      ,
 p_cust_b2c_tbl(i).POSTAL_PLUS4_CODE          ,
 p_cust_b2c_tbl(i).identifying_address_flag   ,
 p_cust_b2c_tbl(i).party_id,
p_cust_b2c_tbl(i).per_imp_xml_element_id,
p_cust_b2c_tbl(i).add_imp_xml_element_id,
p_cust_b2c_tbl(i).cp_imp_xml_element_id,
p_cust_b2c_tbl(i).em_imp_xml_element_id,
p_cust_b2c_tbl(i).PERSON_LAST_NAME_PHONETIC,
p_cust_b2c_tbl(i).PERSON_FIRST_NAME_PHONETIC,
p_cust_b2c_tbl(i).URL,
p_cust_b2c_tbl(i).DATE_OF_BIRTH,
p_cust_b2c_tbl(i).PERSON_ACADEMIC_TITLE,
p_cust_b2c_tbl(i).PERSON_PREVIOUS_TITLE_NAME,
p_cust_b2c_tbl(i).PERSON_KNOWN_AS,
p_cust_b2c_tbl(i).PERSON_KNOWN_AS2,
p_cust_b2c_tbl(i).PERSON_KNOWN_AS3,
p_cust_b2c_tbl(i).PERSON_KNOWN_AS4,
p_cust_b2c_tbl(i).PERSON_KNOWN_AS5,
p_cust_b2c_tbl(i).PERSON_NAME_PHONETIC,
p_cust_b2c_tbl(i).MIDDLE_NAME_PHONETIC,
p_cust_b2c_tbl(i).FISCAL_CODE,
p_cust_b2c_tbl(i).PLACE_OF_BIRTH,
p_cust_b2c_tbl(i).DATE_OF_DEATH,
p_cust_b2c_tbl(i).DECLARED_ETHNICITY,
p_cust_b2c_tbl(i).MARITAL_STATUS,
p_cust_b2c_tbl(i).PERSONAL_INCOME,
p_cust_b2c_tbl(i).MARITAL_STATUS_EFFECTIVE_DATE,
p_cust_b2c_tbl(i).HEAD_OF_HOUSEHOLD_FLAG,
p_cust_b2c_tbl(i).HOUSEHOLD_SIZE,
p_cust_b2c_tbl(i).LOCATION_DIRECTIONS,
p_cust_b2c_tbl(i).ADDRESS_EFFECTIVE_DATE,
p_cust_b2c_tbl(i).ADDRESS_EXPIRATION_DATE,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE1,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE2,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE3,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE4,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE5,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE6,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE7,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE8,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE9,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE10,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE11,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE12,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE13,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE14,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE15,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE1,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE2,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE3,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE4,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE5,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE6,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE7,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE8,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE9,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE10,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE11,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE12,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE13,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE14,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE15,
p_cust_b2c_tbl(i).PERSON_ATTRIBUTE_CATEGORY,
p_cust_b2c_tbl(i).ADDRESS_ATTRIBUTE_CATEGORY,
p_cust_b2c_tbl(i).PARTY_SITE_USE,
p_cust_b2c_tbl(i).SHORT_DESCRIPTION,
p_cust_b2c_tbl(i).DESCRIPTION,
p_cust_b2c_tbl(i).VEHICLE_RESPONSE_CODE,
p_cust_b2c_tbl(i).SALES_AGENT_EMAIL_ID,
p_cust_b2c_tbl(i).NOTES,
p_cust_b2c_tbl(i).orig_system_reference,
p_cust_b2c_tbl(i).tax_reference,
p_cust_b2c_tbl(i).rent_owned_indicator
);
 END LOOP;
commit;

 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in Create_b2c_src_lines:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end Create_b2c_src_lines;

--
-- for XML updates the error in the element table
--
PROCEDURE update_element_error (
   				 p_import_list_header_id    IN    NUMBER,
				 p_xml_element_id IN NUMBER,
                                 p_colName        IN varchar2,
                                 p_error_text     IN varchar2) IS

    x_return_status             VARCHAR2(1);
    x_msg_data                  VARCHAR2(2000);
    l_error_exist               VARCHAR2(1);
cursor c_error_text is
select 'Y' from AMS_IMP_XML_ELEMENTS where IMP_XML_ELEMENT_ID = p_xml_element_id
and error_text like '%'||p_colName||'%';
begin
	open c_error_text;
	fetch c_error_text into l_error_exist;
	close c_error_text;
		if l_error_exist is NULL then
			update AMS_IMP_XML_ELEMENTS
			   set ERROR_TEXT = substr((ERROR_TEXT ||','||p_error_text),1,4000),
	                       LOAD_STATUS = 'ERROR'
			where  imp_xml_element_id = p_xml_element_id;
		end if;
 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in update_element_error :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );


end update_element_error;


--
-- This procedure is used to create party site use
--

procedure create_party_site_use (
        p_psiteuse_rec          IN      hz_party_site_v2pub.party_site_use_rec_type,
        x_return_status         OUT NOCOPY     VARCHAR2,
        x_msg_count             OUT NOCOPY     NUMBER,
        x_msg_data              OUT NOCOPY     VARCHAR2,
        x_party_site_use_id     OUT NOCOPY     NUMBER
) IS

psiteuse_rec    hz_party_site_v2pub.party_site_use_rec_type := p_psiteuse_rec;

begin

  psiteuse_rec.CREATED_BY_MODULE        := 'AMS_LIST_IMPORT';
  psiteuse_rec.application_id := 530;
  hz_party_site_v2pub.create_party_site_use(
                'F',
                psiteuse_rec,
                x_party_site_use_id,
                x_return_status,
                x_msg_count,
                x_msg_data
                );
end create_party_site_use;
-- -------------------------------------------------------


--
-- This procedure creates list notes from import
--
--
PROCEDURE create_list_note
        (  p_import_list_header_id in number,
           p_import_source_line_id in number,
           p_party_id             in number,
           p_source_object_code   in varchar2,
           p_note_text            in varchar2,
           x_return_status         OUT NOCOPY    VARCHAR2,
           x_msg_count             OUT NOCOPY    NUMBER,
           x_msg_data              OUT NOCOPY    VARCHAR2
        ) IS

   l_api_version        NUMBER;
   l_init_msg_list      VARCHAR2(1);
   l_validation_level   NUMBER;
   l_commit             VARCHAR2(1);
   l_return_status      VARCHAR2(1);
   l_msg_count          NUMBER;
   l_msg_data           VARCHAR2(2000);
   l_jtf_note_id        NUMBER;
   l_source_object_id   NUMBER;
   l_source_object_code VARCHAR2(8);
   l_note_status        VARCHAR2(8);
   l_note_type          VARCHAR2(80);
   l_notes              VARCHAR2(2000);
   l_notes_detail       VARCHAR2(8000);
   l_last_update_date   DATE;
   l_last_updated_by    NUMBER;
   l_creation_date      DATE;
   l_created_by         NUMBER;
   l_last_update_login  NUMBER;
   l_entered_by         NUMBER;
   l_entered_date       DATE;
   l_note_contexts      JTF_NOTES_PUB.jtf_note_contexts_tbl_type;
   l_msg_index          NUMBER;
   l_msg_index_out      NUMBER;

   x_tmp_var                       VARCHAR2(4000);
   x_tmp_var1                      VARCHAR2(4000);
   L_NOTE_CONTEXT_ID    NUMBER;

begin

  --==============================================================
  --      INITIALIZE THE API STATIC VALUES                     ===
  --==============================================================
   l_api_version        := 1.0;
   l_init_msg_list      := FND_API.g_true;
   l_validation_level   := FND_API.g_valid_level_full;
   l_commit             := FND_API.g_true;
   l_msg_count          := 0;
   l_source_object_code := nvl(p_source_object_code,'PARTY');
   l_note_status        := 'I';
   l_note_type          := 'AS_USER';
   l_last_update_date   := SYSDATE;
   l_last_updated_by    := FND_GLOBAL.user_id; --LEADS_US
   l_last_update_login  := FND_GLOBAL.conc_login_id; --LEADS_US
   l_jtf_note_id        := null;
  --============================================================
  --==        SET THE API VARIABLE VALUES                    ===
  --============================================================
   l_source_object_id   := p_party_id;
   l_notes              := p_note_text;
   l_notes_detail       := p_note_text;
   l_creation_date      := sysdate;
   l_created_by         := FND_GLOBAL.user_id; --LEADS_US
   l_entered_date       := sysdate;
   l_entered_by         := FND_GLOBAL.user_id; --LEADS_US


    --============================================================
    --==           CALL THE API to create a note               ===
    --============================================================
    jtf_notes_pub.Create_note
      (
         p_api_version          => l_api_version
        ,p_init_msg_list        => l_init_msg_list
        ,p_commit               => l_commit
        ,p_validation_level     => l_validation_level
        ,x_return_status        => x_return_status
        ,x_msg_count            => x_msg_count
        ,x_msg_data             => x_msg_data
        ,p_jtf_note_id          => l_jtf_note_id
        ,p_entered_by           => l_entered_by
        ,p_entered_date         => l_entered_date
        ,p_source_object_id     => l_source_object_id
        ,p_source_object_code   => l_source_object_code
        ,p_notes                => l_notes
        ,p_notes_detail         => l_notes_detail
        ,p_note_type            => l_note_type
        ,p_note_status          => l_note_status
        ,p_jtf_note_contexts_tab => l_note_contexts
        ,x_jtf_note_id          => l_jtf_note_id
        ,p_last_update_date     => l_last_update_date
        ,p_last_updated_by      => l_last_updated_by
        ,p_creation_date        => l_creation_date
        ,p_created_by           => l_created_by
        ,p_last_update_login    => l_last_update_login
      );
    if x_msg_count > 1 then
     FOR i IN 1..x_msg_count  LOOP
           x_tmp_var := fnd_msg_pub.get(p_encoded => fnd_api.g_false);
           x_tmp_var1 := substrb(x_tmp_var1 || ' '|| x_tmp_var,1,4000);
     END LOOP;
    END IF;
    if x_return_status <> 'S' then
               AMS_List_Import_PUB.error_capture (
                 1, 'T', 'F', null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                p_import_source_line_id,
                null, null, null,null,
                'Error in create_list_note :' || SQLERRM||' '||SQLCODE);
      return;
    end if;
 exception
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in create_list_note :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );
      update ams_imp_source_lines set load_status = 'ERROR'
    where import_list_header_id = p_import_list_header_id
      and load_status in ('ACTIVE','RELOAD');

               AMS_List_Import_PUB.error_capture (
                 1, 'T', 'F', null,
                x_return_status,
                x_msg_count,
                x_msg_data,
                p_import_list_header_id,
                p_import_source_line_id,
                null, null, null,null,
                'Error in create_list_note :' || SQLERRM||' '||SQLCODE);
       x_return_status := 'E';

end create_list_note;

-- --------------------------------------------------------------------------
--
-- This procedure is used for existence checking for import process
--
--
PROCEDURE org_existence_checking(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE ORG_KEY_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.ORG_KEY%TYPE;
TYPE ORG_EXIST_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.ORG_EXIST%TYPE;
TYPE ORG_PARTY_ID_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.ORG_PARTY_ID%TYPE;
TYPE PARTY_NAME_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.COL1%TYPE;

L_IMPORT_SOURCE_LINE_ID		IMPORT_SOURCE_LINE_ID_LIST;
L_ORG_KEY			ORG_KEY_LIST;
L_ORG_EXIST			ORG_EXIST_LIST;
L_ORG_PARTY_ID			ORG_PARTY_ID_LIST;
L_PARTY_NAME			PARTY_NAME_LIST;

cursor c_org_key is
select b2b.party_name, 'N',
hz_fuzzy_pub.Generate_Key('ORGANIZATION',b2b.party_name,null,null,null,null,null,null,null) "org_key"
from ams_hz_b2b_mapping_v b2b
where b2b.import_list_header_id = p_import_list_header_id
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.party_name is not null
  and b2b.org_key is null
  and b2b.org_party_id is null
group by b2b.party_name;


cursor c_customer_exists is
      select b2b.org_key, 'Y'
	from ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = 40236
         --  and nvl(b2b.org_exist,'N') = 'N'
	     and b2b.org_key is not null
         and b2b.load_status in ('ACTIVE','RELOAD')
         and exists (select 1 from hz_parties pty
             where pty.customer_key = b2b.org_key
               and pty.party_type   = 'ORGANIZATION'
               and pty.status   = 'A')
      group by b2b.org_key;


cursor c_address_country is
        select b2b.import_source_line_id, max(psite.party_id)
	from hz_party_sites psite, hz_locations loc,
        hz_parties party, ams_hz_b2b_mapping_v b2b
        where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.org_exist = 'Y'
          and b2b.address1 is not null
	  and b2b.country is not null
	  and b2b.org_party_id is null
          and loc.address1      = b2b.address1
          and loc.country       = b2b.country
          and party.customer_key = b2b.org_key
          and party.party_type   = 'ORGANIZATION'
	  and psite.location_id = loc.location_id
          and psite.party_id    = party.party_id
          and party.status   = 'A'
        group by b2b.import_source_line_id;

cursor c_country is
        select b2b.import_source_line_id, max(psite.party_id)
        from hz_party_sites psite, hz_locations loc,
        hz_parties party, ams_hz_b2b_mapping_v b2b
        where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.org_exist = 'Y'
          and b2b.country is not null
	  and b2b.org_party_id is null
          and loc.country       = b2b.country
          and party.customer_key = b2b.org_key
          and party.party_type   = 'ORGANIZATION'
          and psite.location_id = loc.location_id
          and psite.party_id    = party.party_id
          and party.status   = 'A'
        group by b2b.import_source_line_id;

cursor c_max_party is
       select b2b.import_source_line_id, max(pty. party_id)
	from hz_parties pty, ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.org_exist = 'Y'
          and b2b.org_party_id is null
	 and customer_key = b2b.org_key
         and party_type   = 'ORGANIZATION'
         and pty.status   = 'A'
        group by b2b.import_source_line_id;

BEGIN
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE ORG_KEY
l_last_fetch   := FALSE;

open c_org_key;
LOOP
    fetch c_org_key BULK COLLECT into
	L_PARTY_NAME,
	L_ORG_EXIST,
	L_ORG_KEY LIMIT l_limit_rows;

	IF c_org_key%NOTFOUND THEN
        	l_last_fetch := TRUE;
  	END IF;

  	IF L_PARTY_NAME.COUNT = 0 AND l_last_fetch THEN
       		 EXIT;
  	END IF;
    FORALL i IN L_PARTY_NAME.FIRST..L_PARTY_NAME.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_key = L_ORG_KEY(I),
	     org_exist = L_ORG_EXIST(I)
    WHERE  party_name = L_PARTY_NAME(i)
      and  import_list_header_id = p_import_list_header_id  ;

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_org_key;
-- TO POPULATE ORG_KEY

-- TO POPULATE ORG_EXIST
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ORG_EXIST		:= null;
L_ORG_KEY               := null;
open c_customer_exists;
LOOP
    fetch c_customer_exists BULK COLLECT into
        L_ORG_KEY,
        L_ORG_EXIST LIMIT l_limit_rows;

        IF c_customer_exists%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_ORG_KEY.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_ORG_KEY.FIRST..L_ORG_KEY.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_exist = L_ORG_EXIST(I)
    WHERE  org_key = L_ORG_KEY(i)
      -- and  org_key is null
      and  import_list_header_id = p_import_list_header_id  ;

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_customer_exists;
-- TO POPULATE ORG_EXIST


-- TO CHECK WITH ADDRESS AND COUNTRY
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_address_country;
LOOP
    fetch c_address_country BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ORG_PARTY_ID LIMIT l_limit_rows;

        IF c_address_country%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_party_id = L_ORG_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_address_country;
-- TO CHECK WITH ADDRESS AND COUNTRY


-- TO CHECK WITH  COUNTRY
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ORG_PARTY_ID		:= null;
open c_country;
LOOP
    fetch c_country BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ORG_PARTY_ID LIMIT l_limit_rows;

        IF c_country%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_party_id = L_ORG_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_country;
-- TO CHECK WITH COUNTRY


-- TO GET THE MAX PARTY_ID
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ORG_PARTY_ID          := null;
open c_max_party;
LOOP
    fetch c_max_party BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ORG_PARTY_ID LIMIT l_limit_rows;

        IF c_max_party%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_party_id = L_ORG_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_max_party;
-- TO GET THE MAX PARTY_ID

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_existence_checking :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_existence_checking;


-- --------------------------------------------------------------------------
--
-- This procedure is used for existence checking for import process with osr
--
--
PROCEDURE org_existence_checking_osr(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE ORG_KEY_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.ORG_KEY%TYPE;
TYPE ORG_EXIST_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.ORG_EXIST%TYPE;
TYPE ORG_PARTY_ID_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.ORG_PARTY_ID%TYPE;
TYPE PARTY_NAME_LIST 		IS TABLE OF AMS_IMP_SOURCE_LINES.COL1%TYPE;

L_IMPORT_SOURCE_LINE_ID		IMPORT_SOURCE_LINE_ID_LIST;
L_ORG_KEY			ORG_KEY_LIST;
L_ORG_EXIST			ORG_EXIST_LIST;
L_ORG_PARTY_ID			ORG_PARTY_ID_LIST;
L_PARTY_NAME			PARTY_NAME_LIST;

cursor c_org_key is
select b2b.party_name, 'N',
hz_fuzzy_pub.Generate_Key('ORGANIZATION',b2b.party_name,null,null,null,null,null,null,null) "org_key"
from ams_hz_b2b_mapping_v b2b
where b2b.import_list_header_id = p_import_list_header_id
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.party_name is not null
  and b2b.org_key is null
  and b2b.org_party_id is null

group by b2b.party_name;


cursor c_customer_exists is
       select b2b.org_key, 'Y'
	from hz_parties pty, ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
         and pty.customer_key = b2b.org_key
	 and b2b.org_key is not null
         and b2b.org_party_id is null
	 and b2b.load_status in ('ACTIVE','RELOAD')
         and pty.party_type   = 'ORGANIZATION'
	 and pty.orig_system_reference = b2b.orig_system_reference
         and pty.status = 'A'
      group by b2b.org_key,b2b.orig_system_reference;


cursor c_address_country is
        select b2b.import_source_line_id, max(psite.party_id)
	from hz_party_sites psite, hz_locations loc,
        hz_parties party, ams_hz_b2b_mapping_v b2b
        where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.org_exist = 'Y'
          and b2b.address1 is not null
	  and b2b.country is not null
  	  and b2b.org_party_id is null
          and loc.address1      = b2b.address1
          and loc.country       = b2b.country
          and party.customer_key = b2b.org_key
          and party.party_type   = 'ORGANIZATION'
	  and psite.location_id = loc.location_id
          and psite.party_id    = party.party_id
	  and party.orig_system_reference = b2b.orig_system_reference
         and party.status = 'A'
        group by b2b.import_source_line_id;

cursor c_country is
        select b2b.import_source_line_id, max(psite.party_id)
        from hz_party_sites psite, hz_locations loc,
        hz_parties party, ams_hz_b2b_mapping_v b2b
        where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.org_exist = 'Y'
          and b2b.country is not null
	  and b2b.org_party_id is null
          and loc.country       = b2b.country
          and party.customer_key = b2b.org_key
          and party.party_type   = 'ORGANIZATION'
          and psite.location_id = loc.location_id
          and psite.party_id    = party.party_id
	  and party.orig_system_reference = b2b.orig_system_reference
         and party.status = 'A'
        group by b2b.import_source_line_id;

cursor c_max_party is
       select b2b.import_source_line_id, max(pty. party_id)
	from hz_parties pty, ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.org_exist = 'Y'
          and b2b.org_party_id is null
	 and customer_key = b2b.org_key
         and party_type   = 'ORGANIZATION'
	 and pty.orig_system_reference = b2b.orig_system_reference
         and pty.status = 'A'
        group by b2b.import_source_line_id;

BEGIN
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE ORG_KEY
l_last_fetch   := FALSE;
open c_org_key;
LOOP
    fetch c_org_key BULK COLLECT into
	L_PARTY_NAME,
	L_ORG_EXIST,
	L_ORG_KEY LIMIT l_limit_rows;

	IF c_org_key%NOTFOUND THEN
        	l_last_fetch := TRUE;
  	END IF;

  	IF L_PARTY_NAME.COUNT = 0 AND l_last_fetch THEN
       		 EXIT;
  	END IF;
    FORALL i IN L_PARTY_NAME.FIRST..L_PARTY_NAME.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_key = L_ORG_KEY(I),
	     org_exist = L_ORG_EXIST(I)
    WHERE  party_name = L_PARTY_NAME(i)
      and  import_list_header_id = p_import_list_header_id  ;

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_org_key;
-- TO POPULATE ORG_KEY

-- TO POPULATE ORG_EXIST
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ORG_EXIST		:= null;
L_ORG_KEY               := null;
open c_customer_exists;
LOOP
    fetch c_customer_exists BULK COLLECT into
        L_ORG_KEY,
        L_ORG_EXIST LIMIT l_limit_rows;

        IF c_customer_exists%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_ORG_KEY.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_ORG_KEY.FIRST..L_ORG_KEY.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_exist = L_ORG_EXIST(I)
    WHERE  org_key = L_ORG_KEY(i)
      and  org_key is null
      and  import_list_header_id = p_import_list_header_id  ;

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_customer_exists;
-- TO POPULATE ORG_EXIST


-- TO CHECK WITH ADDRESS AND COUNTRY
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_address_country;
LOOP
    fetch c_address_country BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ORG_PARTY_ID LIMIT l_limit_rows;

        IF c_address_country%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_party_id = L_ORG_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_address_country;
-- TO CHECK WITH ADDRESS AND COUNTRY


-- TO CHECK WITH  COUNTRY
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ORG_PARTY_ID		:= null;
open c_country;
LOOP
    fetch c_country BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ORG_PARTY_ID LIMIT l_limit_rows;

        IF c_country%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_party_id = L_ORG_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_country;
-- TO CHECK WITH COUNTRY


-- TO GET THE MAX PARTY_ID
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ORG_PARTY_ID          := null;
open c_max_party;
LOOP
    fetch c_max_party BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ORG_PARTY_ID LIMIT l_limit_rows;

        IF c_max_party%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_party_id = L_ORG_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_max_party;
-- TO GET THE MAX PARTY_ID

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_existence_checking_osr :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_existence_checking_osr;

-- ------------------------------------------------------
--
-- This procedure is used for existence checking for Person
--
--
PROCEDURE per_existence_checking(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE person_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.person_KEY%TYPE;
TYPE person_EXIST_LIST             IS TABLE OF AMS_IMP_SOURCE_LINES.person_EXIST%TYPE;
TYPE person_PARTY_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.person_PARTY_ID%TYPE;

TYPE person_email_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.col1%TYPE;
TYPE person_phone_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.col1%TYPE;
TYPE person_address1_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.col1%TYPE;
TYPE person_country_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.col1%TYPE;
TYPE person_status_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.load_status%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_person_KEY                       person_KEY_LIST;
L_person_EXIST                     person_EXIST_LIST;
L_person_PARTY_ID                  person_PARTY_ID_LIST;

L_person_email                     person_email_LIST;
L_person_phone                  person_phone_LIST;
L_person_address1                  person_address1_LIST;
L_person_country                  person_country_LIST;
L_person_status                         person_status_LIST;

cursor c_per_key is
select b2c.import_source_line_id, 'N',
hz_fuzzy_pub.Generate_Key('PERSON',null,null,null,null,null,null,b2c.PERSON_FIRST_NAME,b2c.PERSON_LAST_NAME) "per_key"
from ams_hz_b2c_mapping_v b2c
where b2c.import_list_header_id = p_import_list_header_id
  and b2c.load_status in ('ACTIVE','RELOAD')
  and b2c.PERSON_FIRST_NAME is not null
  and b2c.PERSON_LAST_NAME is not null
  and b2c.PERSON_PARTY_ID is null;

cursor c_person_exists is
       select distinct b2c.import_source_line_id, 'Y'
        from hz_parties pty, ams_hz_b2c_mapping_v b2c
       where b2c.import_list_header_id = p_import_list_header_id
         and pty.customer_key = b2c.person_key
         and b2c.person_key is not null
	 and b2c.PERSON_PARTY_ID is null
         and b2c.load_status in ('ACTIVE','RELOAD')
         and pty.status = 'A'
         and pty.party_type   = 'PERSON';

cursor c_email_address is
        select b2c.import_source_line_id, max(p.party_id)
          from hz_contact_points cp, hz_parties p, ams_hz_b2c_mapping_v b2c
        where b2c.import_list_header_id = p_import_list_header_id
          and b2c.load_status in ('ACTIVE','RELOAD')
          and b2c.person_exist = 'Y'
          and b2c.email_address is not null
	  and b2c.PERSON_PARTY_ID is null
          and p.customer_key = b2c.person_key
          and p.party_type = 'PERSON'
         and p.status = 'A'
          and cp.owner_table_id = p.party_id
          and cp.owner_table_name = 'HZ_PARTIES'
          and upper(cp.email_address) = upper(b2c.email_address)
          --and cp.primary_flag = 'Y' -- Hbandi Commented for fixing the bug #8726177 (list import creates new party when imported phone number does not match primary)
        group by b2c.import_source_line_id;

cursor c_ph_number is
        select b2c.import_source_line_id, max(p.party_id)
          from hz_contact_points cp, hz_parties p, ams_hz_b2c_mapping_v b2c
        where b2c.import_list_header_id = p_import_list_header_id
          and b2c.load_status in ('ACTIVE','RELOAD')
          and b2c.person_exist = 'Y'
          and b2c.phone_number is not null
          and b2c.person_party_id is null
	  and p.customer_key = b2c.person_key
          and p.party_type = 'PERSON'
         and p.status = 'A'
          and cp.owner_table_id = p.party_id
          and cp.owner_table_name = 'HZ_PARTIES'
         -- and cp.primary_flag = 'Y' -- Hbandi Commented for fixing the bug #8726177 (list import creates new party when imported phone number does not match primary)
          and cp.transposed_phone_number = b2c.transposed_phone_number
         -- and cp.phone_number = b2c.phone_number
         -- and nvl(cp.phone_country_code,nvl(b2c.phone_country_code,'x')) = nvl(b2c.phone_country_code,'x')
         -- and nvl(cp.phone_area_code,nvl(b2c.phone_area_code,'x')) = nvl(b2c.phone_area_code,'x')
        group by b2c.import_source_line_id;

cursor c_address_country is
        select b2c.import_source_line_id, max(psite.party_id)
	  from hz_party_sites psite, hz_locations loc, hz_parties party, ams_hz_b2c_mapping_v b2c
         where b2c.import_list_header_id = p_import_list_header_id
          and b2c.load_status in ('ACTIVE','RELOAD')
          and b2c.person_exist = 'Y'
          and b2c.address1 is not null
          and b2c.country is not null
          and b2c.person_party_id is null
	  and psite.location_id = loc.location_id
          and loc.address1      = b2c.address1
          and loc.country       = b2c.country
          and party.customer_key = b2c.person_key
          and party.party_type = 'PERSON'
         and party.status = 'A'
          and psite.party_id      = party.party_id
        group by b2c.import_source_line_id;

cursor c_per_dedup is
       select max(import_source_line_id),person_key,email_address,transposed_phone_number,address1,
              country, 'DUPLICATE' status
         from ams_hz_b2c_mapping_v
        where import_list_header_id = p_import_list_header_id
          and load_status in ('ACTIVE','RELOAD')
          group by person_key,email_address,transposed_phone_number,address1,country;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE person_KEY
l_last_fetch   := FALSE;

open c_per_key;
LOOP
    fetch c_per_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_EXIST,
        L_person_KEY LIMIT l_limit_rows;

        IF c_per_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
	   EXIT;
        END IF;

        FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST
         UPDATE AMS_HZ_B2C_MAPPING_V
           SET person_key = L_person_KEY(I),
               person_exist = L_person_EXIST(I)
         WHERE IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_per_key;
-- TO POPULATE person_KEY

-- TO POPULATE person_EXIST
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_EXIST             := null;
open c_person_exists;
LOOP
    fetch c_person_exists BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_EXIST LIMIT l_limit_rows;

        IF c_person_exists%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_exist = L_person_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_person_exists;
-- TO POPULATE person_EXIST

-- TO CHECK WITH email_address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_email_address;
LOOP
    fetch c_email_address BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_PARTY_ID LIMIT l_limit_rows;

        IF c_email_address%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_party_id = L_person_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_email_address;
-- TO CHECK WITH email_address

-- TO CHECK WITH phone number
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_PARTY_ID	:= null;
open c_ph_number;
LOOP
    fetch c_ph_number BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_PARTY_ID LIMIT l_limit_rows;

        IF c_ph_number%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_party_id = L_person_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_ph_number;
-- TO CHECK WITH phone_number

-- TO CHECK WITH address and country
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_PARTY_ID       := null;
open c_address_country;
LOOP
    fetch c_address_country BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_PARTY_ID LIMIT l_limit_rows;

        IF c_address_country%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_party_id = L_person_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_address_country;
-- TO CHECK WITH address and country

-- TO CHECK WITH dedup
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_KEY           := null;
L_person_email                := null;
L_person_phone               := null;
L_person_address1            := null;
L_person_country            := null;
L_person_status              := null;

open c_per_dedup;
LOOP
    fetch c_per_dedup BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,L_person_KEY,L_person_email,L_person_phone,L_person_address1,
        L_person_country, L_person_status  LIMIT l_limit_rows;

        IF c_per_dedup%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET load_status = L_person_status(i)
    WHERE import_list_header_id = p_import_list_header_id
      and IMPORT_SOURCE_LINE_ID < L_IMPORT_SOURCE_LINE_ID(i)
      and load_status in ('ACTIVE','RELOAD')
      and person_key = L_person_KEY(i)
      and email_address = L_person_email(i)
      and transposed_phone_number = L_person_phone(i)
      and address1 = L_person_address1(i)
      and country = L_person_country(i);


    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_per_dedup;
-- TO CHECK WITH dedup

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in per_existence_checking :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end per_existence_checking;


-- ------------------------------------------------------
--
-- This procedure is used for existence checking for Person with osr
--
--
PROCEDURE per_existence_checking_osr(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE person_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.person_KEY%TYPE;
TYPE person_EXIST_LIST             IS TABLE OF AMS_IMP_SOURCE_LINES.person_EXIST%TYPE;
TYPE person_PARTY_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.person_PARTY_ID%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_person_KEY                       person_KEY_LIST;
L_person_EXIST                     person_EXIST_LIST;
L_person_PARTY_ID                  person_PARTY_ID_LIST;

cursor c_per_key is
select b2c.import_source_line_id, 'N',
hz_fuzzy_pub.Generate_Key('PERSON',null,null,null,null,null,null,b2c.PERSON_FIRST_NAME,b2c.PERSON_LAST_NAME) "per_key"
from ams_hz_b2c_mapping_v b2c
where b2c.import_list_header_id = p_import_list_header_id
  and b2c.load_status in ('ACTIVE','RELOAD')
  and b2c.PERSON_FIRST_NAME is not null
  and b2c.PERSON_LAST_NAME is not null;

cursor c_person_exists is
      select b2c.import_source_line_id, 'Y'
        from ams_hz_b2c_mapping_v b2c
       where b2c.import_list_header_id = p_import_list_header_id
         and b2c.person_key is not null
         and b2c.PERSON_PARTY_ID is null
         and b2c.load_status in ('ACTIVE','RELOAD')
         and exists (select 1 from hz_parties pty
             where pty.customer_key = b2c.person_key
               and pty.status = 'A'
               and pty.party_type   = 'PERSON');

cursor c_email_address is
        select b2c.import_source_line_id, max(p.party_id)
          from hz_contact_points cp, hz_parties p, ams_hz_b2c_mapping_v b2c
        where b2c.import_list_header_id = p_import_list_header_id
          and b2c.load_status in ('ACTIVE','RELOAD')
          and b2c.person_exist = 'Y'
	  and b2c.orig_system_reference = p.orig_system_reference
          and b2c.email_address is not null
          and p.customer_key = b2c.person_key
          and p.party_type = 'PERSON'
         and p.status = 'A'
          and cp.owner_table_id = p.party_id
          and cp.owner_table_name = 'HZ_PARTIES'
          and upper(cp.email_address) = upper(b2c.email_address)
          and cp.primary_flag = 'Y'
        group by b2c.import_source_line_id;

cursor c_ph_number is
        select b2c.import_source_line_id, max(p.party_id)
          from hz_contact_points cp, hz_parties p, ams_hz_b2c_mapping_v b2c
        where b2c.import_list_header_id = p_import_list_header_id
          and b2c.load_status in ('ACTIVE','RELOAD')
          and b2c.person_exist = 'Y'
          and b2c.phone_number is not null
          and b2c.person_party_id is null
	  and b2c.orig_system_reference = p.orig_system_reference
	  and p.customer_key = b2c.person_key
          and p.party_type = 'PERSON'
         and p.status = 'A'
          and cp.owner_table_id = p.party_id
          and cp.owner_table_name = 'HZ_PARTIES'
          and cp.primary_flag = 'Y'
          and cp.transposed_phone_number = b2c.transposed_phone_number
          -- and cp.phone_number = b2c.phone_number
          -- and nvl(cp.phone_country_code,nvl(b2c.phone_country_code,'x')) = nvl(b2c.phone_country_code,'x')
          -- and nvl(cp.phone_area_code,nvl(b2c.phone_area_code,'x')) = nvl(b2c.phone_area_code,'x')
        group by b2c.import_source_line_id;

cursor c_address_country is
        select b2c.import_source_line_id, max(psite.party_id)
	  from hz_party_sites psite, hz_locations loc, hz_parties party, ams_hz_b2c_mapping_v b2c
         where b2c.import_list_header_id = p_import_list_header_id
          and b2c.load_status in ('ACTIVE','RELOAD')
          and b2c.person_exist = 'Y'
          and b2c.address1 is not null
          and b2c.country is not null
          and b2c.person_party_id is null
	  and psite.location_id = loc.location_id
          and loc.address1      = b2c.address1
          and loc.country       = b2c.country
          and party.customer_key = b2c.person_key
          and party.party_type = 'PERSON'
         and party.status = 'A'
          and psite.party_id      = party.party_id
	  and b2c.orig_system_reference = party.orig_system_reference
        group by b2c.import_source_line_id;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE person_KEY
l_last_fetch   := FALSE;
open c_per_key;
LOOP
    fetch c_per_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_EXIST,
        L_person_KEY LIMIT l_limit_rows;

        IF c_per_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_key = L_person_KEY(I),
             person_exist = L_person_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_per_key;
-- TO POPULATE person_KEY

-- TO POPULATE person_EXIST
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_EXIST             := null;
open c_person_exists;
LOOP
    fetch c_person_exists BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_EXIST LIMIT l_limit_rows;

        IF c_person_exists%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_exist = L_person_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_person_exists;
-- TO POPULATE person_EXIST

-- TO CHECK WITH email_address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_email_address;
LOOP
    fetch c_email_address BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_PARTY_ID LIMIT l_limit_rows;

        IF c_email_address%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_party_id = L_person_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_email_address;
-- TO CHECK WITH email_address

-- TO CHECK WITH phone number
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_PARTY_ID	:= null;
open c_ph_number;
LOOP
    fetch c_ph_number BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_PARTY_ID LIMIT l_limit_rows;

        IF c_ph_number%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_party_id = L_person_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_ph_number;
-- TO CHECK WITH phone_number

-- TO CHECK WITH address and country
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_person_PARTY_ID       := null;
open c_address_country;
LOOP
    fetch c_address_country BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_person_PARTY_ID LIMIT l_limit_rows;

        IF c_address_country%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET person_party_id = L_person_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_address_country;
-- TO CHECK WITH address and country
EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in per_existence_checking_osr :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end per_existence_checking_osr;

-- -------------------------------------------------------
--
-- This procedure is used for existence checking for organization contacts
--
--
PROCEDURE org_cont_existence_checking(
   p_import_list_header_id IN  NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE person_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.person_KEY%TYPE;
TYPE ocont_EXIST_LIST             IS TABLE OF AMS_IMP_SOURCE_LINES.ocont_EXIST%TYPE;
TYPE ocont_PARTY_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.ocont_PARTY_ID%TYPE;
TYPE ocont_org_key_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.org_key%TYPE;
TYPE ocont_person_key_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.person_key%TYPE;
TYPE ocont_email_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.col1%TYPE;
TYPE ocont_phnumb_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.transposed_phone_number%TYPE;
TYPE ocont_status_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.col1%TYPE;


L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_person_KEY                       person_KEY_LIST;
L_ocont_EXIST                     ocont_EXIST_LIST;
L_ocont_PARTY_ID                  ocont_PARTY_ID_LIST;

L_ocont_status                  ocont_status_LIST;


L_ocont_org_key                  ocont_org_key_LIST;
L_ocont_person_key               ocont_person_key_LIST;
L_ocont_email                    ocont_email_LIST;
L_ocont_phnumb                   ocont_phnumb_LIST;

cursor c_per_key is
select b2b.import_source_line_id, 'N',
hz_fuzzy_pub.Generate_Key('PERSON',null,null,null,null,null,null,b2b.PERSON_FIRST_NAME,b2b.PERSON_LAST_NAME)
"per_key"
from ams_hz_b2b_mapping_v b2b
where b2b.import_list_header_id = p_import_list_header_id
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.PERSON_FIRST_NAME is not null
  and b2b.PERSON_LAST_NAME is not null
--  and b2b.org_party_id is not null
  and b2b.OCONT_PARTY_ID is null;

cursor c_person_exists is
SELECT b2b.import_source_line_id, 'Y'
  from ams_hz_b2b_mapping_v b2b
 where b2b.import_list_header_id = p_import_list_header_id
  and b2b.person_key is not null
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.OCONT_PARTY_ID is null
  and exists
    ( select null
        from hz_parties pty
        where pty.customer_key = b2b.person_key
          and pty.party_type  = 'PERSON'
          and pty.status = 'A' );
/*
       select b2b.import_source_line_id, 'Y'
        from hz_parties pty, ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
         and pty.customer_key = b2b.person_key
         and b2b.person_key is not null
         and b2b.load_status in ('ACTIVE','RELOAD')
         and pty.party_type   = 'PERSON'
         and pty.status = 'A'
 --        and b2b.org_party_id is not null
	 and b2b.OCONT_PARTY_ID is null;
*/
cursor c_cont_email_phone is
       select b2b.import_source_line_id, max(per.party_id) from
       hz_parties org,
       hz_parties per,
       hz_relationships rel,
       hz_contact_points cpoint,
       hz_contact_points cpoint1,
       ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.ocont_exist = 'Y'
          and b2b.phone_number is not null
          and b2b.email_address is not null
          and b2b.org_party_id is not null
	  and b2b.OCONT_PARTY_ID is null
         and org.party_id           = b2b.org_party_id
         and org.party_type         = 'ORGANIZATION'
         and rel.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
         and rel.SUBJECT_TYPE       = 'PERSON'
         and rel.OBJECT_TABLE_NAME  = 'HZ_PARTIES'
         and rel.RELATIONSHIP_CODE  = 'CONTACT_OF'
         and rel.OBJECT_ID          = org.party_id
         and rel.SUBJECT_ID         = per.PARTY_ID
         and per.customer_key       = b2b.person_key
         and per.status = 'A'
         and org.status = 'A'
         and cpoint.owner_table_id  = rel.party_id
         and cpoint.owner_table_name = 'HZ_PARTIES'
         and cpoint.contact_point_type = 'EMAIL'
         and upper(cpoint.email_address)    = upper(b2b.email_address)
         and cpoint.status           = 'A'
         and cpoint1.owner_table_id  = rel.party_id
         and cpoint1.owner_table_name = 'HZ_PARTIES'
         and cpoint1.contact_point_type = 'PHONE'
         and cpoint1.transposed_phone_number = b2b.transposed_phone_number
         -- and cpoint1.phone_area_code||'-'||cpoint1.phone_number||'-'||cpoint1.phone_extension  =
         --   b2b.phone_area_code||'-'||b2b.phone_number||'-'||b2b.phone_extention
         and (cpoint1.phone_line_type<>'FAX' or cpoint1.phone_line_type is null)
         and cpoint1.status           = 'A'
	group by b2b.import_source_line_id;

cursor c_cont_email is
       select b2b.import_source_line_id,max(per.party_id) from
       hz_parties org,
       hz_parties per,
       hz_relationships rel,
       hz_contact_points cpoint,
       ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.ocont_exist = 'Y'
          and b2b.email_address is not null
          and b2b.org_party_id is not null
          and b2b.ocont_party_id is null
	  and b2b.OCONT_PARTY_ID is null
         and org.party_id           = b2b.org_party_id
         and org.party_type         = 'ORGANIZATION'
         and rel.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
         and rel.SUBJECT_TYPE       = 'PERSON'
         and rel.OBJECT_TABLE_NAME  = 'HZ_PARTIES'
         and rel.RELATIONSHIP_CODE  = 'CONTACT_OF'
         and rel.OBJECT_ID          = org.party_id
         and rel.SUBJECT_ID         = per.PARTY_ID
         and per.customer_key       = b2b.person_key
         and per.status = 'A'
         and org.status = 'A'
         and cpoint.owner_table_id  = rel.party_id
         and cpoint.owner_table_name = 'HZ_PARTIES'
         and cpoint.contact_point_type = 'EMAIL'
         and upper(cpoint.email_address)    = upper(b2b.email_address)
         and cpoint.status           = 'A'
	group by b2b.import_source_line_id;

cursor c_cont_phone is
       select b2b.import_source_line_id,max(per.party_id) from
       hz_parties org,
       hz_parties per,
       hz_relationships rel,
       hz_contact_points cpoint,
       ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.ocont_exist = 'Y'
          and b2b.phone_number is not null
          and b2b.org_party_id is not null
          and b2b.ocont_party_id is null
	  and b2b.OCONT_PARTY_ID is null
         and org.party_id           = b2b.org_party_id
         and org.party_type         = 'ORGANIZATION'
         and rel.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
         and rel.SUBJECT_TYPE       = 'PERSON'
         and rel.OBJECT_TABLE_NAME  = 'HZ_PARTIES'
         and rel.RELATIONSHIP_CODE  = 'CONTACT_OF'
         and rel.OBJECT_ID          = org.party_id
         and rel.SUBJECT_ID         = per.PARTY_ID
         and per.customer_key       = b2b.person_key
          and per.status = 'A'
         and org.status = 'A'
         and cpoint.owner_table_id  = rel.party_id
         and cpoint.owner_table_name = 'HZ_PARTIES'
         and cpoint.contact_point_type = 'PHONE'
         and cpoint.transposed_phone_number = b2b.transposed_phone_number
        -- and cpoint.phone_area_code||'-'||cpoint.phone_number||'-'||cpoint.phone_extension  =
         --    b2b.phone_area_code||'-'||b2b.phone_number||'-'||b2b.phone_extention
         and (cpoint.phone_line_type<>'FAX' or cpoint.phone_line_type is null)
         and cpoint.status           = 'A'
	group by b2b.import_source_line_id;

cursor c_cont_dedup is
       select max(import_source_line_id), org_key,person_key,email_address,transposed_phone_number ,
              'DUPLICATE' status
         from ams_hz_b2b_mapping_v
        where import_list_header_id = p_import_list_header_id
         -- and ocont_party_id is null
          and load_status in ('ACTIVE','RELOAD')
          group by org_key,person_key,email_address,transposed_phone_number;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE person_KEY
l_last_fetch   := FALSE;
open c_per_key;
LOOP
    fetch c_per_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_EXIST,
        L_person_KEY LIMIT l_limit_rows;

        IF c_per_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET person_key = L_person_KEY(I),
             ocont_exist = L_ocont_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_per_key;
-- TO POPULATE person_KEY

-- TO POPULATE person_EXIST
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_EXIST             := null;
open c_person_exists;
LOOP
    fetch c_person_exists BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_EXIST LIMIT l_limit_rows;

        IF c_person_exists%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_exist = L_ocont_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_person_exists;
-- TO POPULATE person_EXIST

-- TO CHECK WITH email_address and phone
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_cont_email_phone;
LOOP
    fetch c_cont_email_phone BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_PARTY_ID LIMIT l_limit_rows;

        IF c_cont_email_phone%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_party_id = L_ocont_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_email_phone;
-- TO CHECK WITH email_address and phone

-- TO CHECK WITH email_address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_PARTY_ID	:= null;
open c_cont_email;
LOOP
    fetch c_cont_email BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_PARTY_ID LIMIT l_limit_rows;

        IF c_cont_email%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_party_id = L_ocont_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_email;
-- TO CHECK WITH email_address

-- TO CHECK WITH phone
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_PARTY_ID        := null;
open c_cont_phone;
LOOP
    fetch c_cont_phone BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_PARTY_ID LIMIT l_limit_rows;

        IF c_cont_phone%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_party_id = L_ocont_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_phone;
-- TO CHECK WITH phone

-- TO CHECK WITH dedup
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_org_key      := null;
L_ocont_person_key    := null;
L_ocont_email          := null;
L_ocont_phnumb         := null;
L_ocont_status        := null;
open c_cont_dedup;
LOOP
    fetch c_cont_dedup BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,L_ocont_org_key,L_ocont_person_key,L_ocont_email,
        L_ocont_phnumb,L_ocont_status LIMIT l_limit_rows;

        IF c_cont_dedup%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET load_status = L_ocont_status(i)
    WHERE import_list_header_id = p_import_list_header_id
      and IMPORT_SOURCE_LINE_ID < L_IMPORT_SOURCE_LINE_ID(i)
      and load_status in ('ACTIVE','RELOAD')
      and org_key = L_ocont_org_key(i)
      and person_key = L_ocont_person_key(i)
      and email_address = L_ocont_email(i)
      and transposed_phone_number = L_ocont_phnumb(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_dedup;
-- TO CHECK WITH dedup

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_cont_existence_checking :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_cont_existence_checking;


-- -------------------------------------------------------
--
-- This procedure is used for existence checking for organization contacts with osr
--
--
PROCEDURE org_cont_existence_chk_osr(
   p_import_list_header_id IN  NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE person_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.person_KEY%TYPE;
TYPE ocont_EXIST_LIST             IS TABLE OF AMS_IMP_SOURCE_LINES.ocont_EXIST%TYPE;
TYPE ocont_PARTY_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.ocont_PARTY_ID%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_person_KEY                       person_KEY_LIST;
L_ocont_EXIST                     ocont_EXIST_LIST;
L_ocont_PARTY_ID                  ocont_PARTY_ID_LIST;

cursor c_per_key is
select b2b.import_source_line_id, 'N',
hz_fuzzy_pub.Generate_Key('PERSON',null,null,null,null,null,null,b2b.PERSON_FIRST_NAME,b2b.PERSON_LAST_NAME)
"per_key"
from ams_hz_b2b_mapping_v b2b
where b2b.import_list_header_id = p_import_list_header_id
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.PERSON_FIRST_NAME is not null
  and b2b.PERSON_LAST_NAME is not null
  and b2b.org_party_id is not null;

cursor c_person_exists is
       select b2b.import_source_line_id, 'Y'
        from hz_parties pty, ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
         and pty.customer_key = b2b.person_key
         and b2b.person_key is not null
         and b2b.load_status in ('ACTIVE','RELOAD')
         and pty.party_type   = 'PERSON'
         and pty.status = 'A'
	 and pty.orig_system_reference = b2b.orig_system_reference
         and b2b.org_party_id is not null;

cursor c_cont_email_phone is
       select b2b.import_source_line_id, max(per.party_id) from
       hz_parties org,
       hz_parties per,
       hz_relationships rel,
       hz_contact_points cpoint,
       hz_contact_points cpoint1,
       ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.ocont_exist = 'Y'
          and b2b.phone_number is not null
          and b2b.email_address is not null
          and b2b.org_party_id is not null
         and org.party_id           = b2b.org_party_id
	 and org.orig_system_reference = b2b.orig_system_reference
         and org.party_type         = 'ORGANIZATION'
         and rel.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
         and rel.SUBJECT_TYPE       = 'PERSON'
         and rel.OBJECT_TABLE_NAME  = 'HZ_PARTIES'
         and rel.RELATIONSHIP_CODE  = 'CONTACT_OF'
         and rel.OBJECT_ID          = org.party_id
         and rel.SUBJECT_ID         = per.PARTY_ID
         and per.customer_key       = b2b.person_key
         and per.status = 'A'
         and org.status = 'A'
         and cpoint.owner_table_id  = rel.party_id
         and cpoint.owner_table_name = 'HZ_PARTIES'
         and cpoint.contact_point_type = 'EMAIL'
         and upper(cpoint.email_address)    = upper(b2b.email_address)
         and cpoint.status           = 'A'
         and cpoint1.owner_table_id  = rel.party_id
         and cpoint1.owner_table_name = 'HZ_PARTIES'
         and cpoint1.contact_point_type = 'PHONE'
         and cpoint1.transposed_phone_number = b2b.transposed_phone_number
         -- and cpoint1.phone_area_code||'-'||cpoint1.phone_number||'-'||cpoint1.phone_extension  =
         --    b2b.phone_area_code||'-'||b2b.phone_number||'-'||b2b.phone_extention
         and (cpoint1.phone_line_type<>'FAX' or cpoint1.phone_line_type is null)
         and cpoint1.status           = 'A'
	group by b2b.import_source_line_id;

cursor c_cont_email is
       select b2b.import_source_line_id,max(per.party_id) from
       hz_parties org,
       hz_parties per,
       hz_relationships rel,
       hz_contact_points cpoint,
       ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.ocont_exist = 'Y'
          and b2b.email_address is not null
          and b2b.org_party_id is not null
          and b2b.ocont_party_id is null
         and org.party_id           = b2b.org_party_id
	 and org.orig_system_reference = b2b.orig_system_reference
         and org.party_type         = 'ORGANIZATION'
         and rel.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
         and rel.SUBJECT_TYPE       = 'PERSON'
         and rel.OBJECT_TABLE_NAME  = 'HZ_PARTIES'
         and rel.RELATIONSHIP_CODE  = 'CONTACT_OF'
         and rel.OBJECT_ID          = org.party_id
         and rel.SUBJECT_ID         = per.PARTY_ID
         and per.customer_key       = b2b.person_key
         and per.status = 'A'
         and org.status = 'A'
         and cpoint.owner_table_id  = rel.party_id
         and cpoint.owner_table_name = 'HZ_PARTIES'
         and cpoint.contact_point_type = 'EMAIL'
         and upper(cpoint.email_address)    = upper(b2b.email_address)
         and cpoint.status           = 'A'
	group by b2b.import_source_line_id;

cursor c_cont_phone is
       select b2b.import_source_line_id,max(per.party_id) from
       hz_parties org,
       hz_parties per,
       hz_relationships rel,
       hz_contact_points cpoint,
       ams_hz_b2b_mapping_v b2b
       where b2b.import_list_header_id = p_import_list_header_id
          and b2b.load_status in ('ACTIVE','RELOAD')
          and b2b.ocont_exist = 'Y'
          and b2b.phone_number is not null
          and b2b.org_party_id is not null
          and b2b.ocont_party_id is null
         and org.party_id           = b2b.org_party_id
	 and org.orig_system_reference = b2b.orig_system_reference
         and org.party_type         = 'ORGANIZATION'
         and rel.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
         and rel.SUBJECT_TYPE       = 'PERSON'
         and rel.OBJECT_TABLE_NAME  = 'HZ_PARTIES'
         and rel.RELATIONSHIP_CODE  = 'CONTACT_OF'
         and rel.OBJECT_ID          = org.party_id
         and rel.SUBJECT_ID         = per.PARTY_ID
         and per.customer_key       = b2b.person_key
         and per.status = 'A'
         and org.status = 'A'
         and cpoint.owner_table_id  = rel.party_id
         and cpoint.owner_table_name = 'HZ_PARTIES'
         and cpoint.contact_point_type = 'PHONE'
         and cpoint.transposed_phone_number = b2b.transposed_phone_number
         -- and cpoint.phone_area_code||'-'||cpoint.phone_number||'-'||cpoint.phone_extension  =
         --    b2b.phone_area_code||'-'||b2b.phone_number||'-'||b2b.phone_extention
         and (cpoint.phone_line_type<>'FAX' or cpoint.phone_line_type is null)
         and cpoint.status           = 'A'
	group by b2b.import_source_line_id;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE person_KEY
l_last_fetch   := FALSE;
open c_per_key;
LOOP
    fetch c_per_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_EXIST,
        L_person_KEY LIMIT l_limit_rows;

        IF c_per_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET person_key = L_person_KEY(I),
             ocont_exist = L_ocont_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_per_key;
-- TO POPULATE person_KEY

-- TO POPULATE person_EXIST
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_EXIST             := null;
open c_person_exists;
LOOP
    fetch c_person_exists BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_EXIST LIMIT l_limit_rows;

        IF c_person_exists%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_exist = L_ocont_EXIST(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_person_exists;
-- TO POPULATE person_EXIST

-- TO CHECK WITH email_address and phone
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_cont_email_phone;
LOOP
    fetch c_cont_email_phone BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_PARTY_ID LIMIT l_limit_rows;

        IF c_cont_email_phone%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_party_id = L_ocont_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_email_phone;
-- TO CHECK WITH email_address and phone

-- TO CHECK WITH email_address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_PARTY_ID	:= null;
open c_cont_email;
LOOP
    fetch c_cont_email BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_PARTY_ID LIMIT l_limit_rows;

        IF c_cont_email%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_party_id = L_ocont_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_email;
-- TO CHECK WITH email_address

-- TO CHECK WITH phone
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_ocont_PARTY_ID        := null;
open c_cont_phone;
LOOP
    fetch c_cont_phone BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_ocont_PARTY_ID LIMIT l_limit_rows;

        IF c_cont_phone%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET ocont_party_id = L_ocont_PARTY_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_cont_phone;
-- TO CHECK WITH phone

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_cont_existence_chk_osr :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_cont_existence_chk_osr;

-- -------------------------------------------------------------------
-- This procedure is used for existence checking for organization address
--
--
PROCEDURE org_address_existence_checking(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) is
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE address_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.address_KEY%TYPE;
TYPE PARTY_location_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.PARTY_location_ID%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_address_KEY                       address_KEY_LIST;
L_PARTY_location_ID                  PARTY_location_ID_LIST;

cursor c_addr_key is
select b2b.import_source_line_id,
hz_fuzzy_pub.Generate_Key('ADDRESS',null,b2b.address1,b2b.address2,b2b.address3,b2b.address4,b2b.postal_code,null,null)
"add_key"
from ams_hz_b2b_mapping_v b2b
where b2b.import_list_header_id = p_import_list_header_id
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.address1 is not null;

cursor c_addr_ps is
       select b2b.import_source_line_id,max(loc.location_id)
       from  hz_party_sites ps, hz_locations loc,ams_hz_b2b_mapping_v b2b
	where b2b.import_list_header_id = p_import_list_header_id
  	and b2b.load_status in ('ACTIVE','RELOAD')
  	and b2b.address_key is not null
        and b2b.org_party_id is not null
        and ps.party_id          = b2b.org_party_id
         and ps.location_id       = loc.location_id
         and loc.address_key      = b2b.address_key
         and loc.country          = b2b.country
         and nvl(loc.city,nvl(b2b.city,'x')) = nvl(b2b.city,'x')
	group by b2b.import_source_line_id;

cursor c_addr is
       select b2b.import_source_line_id,max(loc.location_id)
       from   hz_locations loc,ams_hz_b2b_mapping_v b2b
        where b2b.import_list_header_id = p_import_list_header_id
        and b2b.load_status in ('ACTIVE','RELOAD')
        and b2b.address_key is not null
        and b2b.party_location_id is null
        and loc.address_key     = b2b.address_key
         and loc.country          = b2b.country
         and nvl(loc.city,nvl(b2b.city,'x')) = nvl(b2b.city,'x')
	group by b2b.import_source_line_id;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE address_KEY
l_last_fetch   := FALSE;
open c_addr_key;
LOOP
    fetch c_addr_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_address_KEY LIMIT l_limit_rows;

        IF c_addr_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET address_key = L_address_KEY(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr_key;
-- TO POPULATE address_KEY

-- TO CHECK WITH address with ps
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_addr_ps;
LOOP
    fetch c_addr_ps BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_PARTY_location_ID LIMIT l_limit_rows;

        IF c_addr_ps%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET party_location_id = L_PARTY_location_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr_ps;
-- TO CHECK WITH address ps

-- TO CHECK WITH address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_PARTY_location_ID := null;
open c_addr;
LOOP
    fetch c_addr BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_PARTY_location_ID LIMIT l_limit_rows;

        IF c_addr%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET party_location_id = L_PARTY_location_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr;
-- TO CHECK WITH address

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_address_existence_checking :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_address_existence_checking;



-- -------------------------------------------------------------------
-- This procedure is used for existence checking for organization address
--
--
PROCEDURE org_address1_exist_checking(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) is
l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE address_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.org_address_KEY%TYPE;
TYPE PARTY_location_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.org_location_ID%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_org_address_KEY                       address_KEY_LIST;
L_org_location_ID                  party_location_ID_LIST;

cursor c_addr_key is
select b2b.import_source_line_id,
hz_fuzzy_pub.Generate_Key('ADDRESS',null,b2b.org_address1,b2b.org_address2,b2b.org_address3,b2b.org_address4,b2b.org_postal_code,null,null)
"add_key"
from ams_hz_b2b_mapping_v b2b
where b2b.import_list_header_id = p_import_list_header_id
  and b2b.load_status in ('ACTIVE','RELOAD')
  and b2b.org_address1 is not null;

cursor c_addr_ps is
       select b2b.import_source_line_id,max(loc.location_id)
       from  hz_party_sites ps, hz_locations loc,ams_hz_b2b_mapping_v b2b
	where b2b.import_list_header_id = p_import_list_header_id
  	and b2b.load_status in ('ACTIVE','RELOAD')
  	and b2b.org_address_key is not null
        and b2b.org_party_id is not null
        and ps.party_id          = b2b.org_party_id
         and ps.location_id       = loc.location_id
         and loc.address_key      = b2b.org_address_key
         and loc.country          = b2b.org_country
         and nvl(loc.city,nvl(b2b.org_city,'x')) = nvl(b2b.org_city,'x')
	group by b2b.import_source_line_id;

cursor c_addr is
       select b2b.import_source_line_id,max(loc.location_id)
       from   hz_locations loc,ams_hz_b2b_mapping_v b2b
        where b2b.import_list_header_id = p_import_list_header_id
        and b2b.load_status in ('ACTIVE','RELOAD')
        and b2b.org_address_key is not null
        and b2b.org_location_id is null
        and loc.address_key     = b2b.org_address_key
         and loc.country          = b2b.org_country
         and nvl(loc.city,nvl(b2b.org_city,'x')) = nvl(b2b.org_city,'x')
	group by b2b.import_source_line_id;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE address_KEY
l_last_fetch   := FALSE;
open c_addr_key;
LOOP
    fetch c_addr_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_org_address_KEY LIMIT l_limit_rows;

        IF c_addr_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_address_key = L_org_address_KEY(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr_key;
-- TO POPULATE address_KEY

-- TO CHECK WITH address with ps
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_addr_ps;
LOOP
    fetch c_addr_ps BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_org_location_ID LIMIT l_limit_rows;

        IF c_addr_ps%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_location_id = L_org_location_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr_ps;
-- TO CHECK WITH address ps

-- TO CHECK WITH address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_org_location_ID := null;
open c_addr;
LOOP
    fetch c_addr BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_org_location_ID LIMIT l_limit_rows;

        IF c_addr%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2B_MAPPING_V
         SET org_location_id = L_org_location_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr;
-- TO CHECK WITH address

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_address1_exist_checking :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_address1_exist_checking;

-- -------------------------------------------------------------
--
-- This procedure is used for existence checking for person address
--
--
PROCEDURE per_address_existence_checking(
   p_import_list_header_id IN NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS

l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE address_KEY_LIST            IS TABLE OF AMS_IMP_SOURCE_LINES.address_KEY%TYPE;
TYPE PARTY_location_ID_LIST          IS TABLE OF AMS_IMP_SOURCE_LINES.PARTY_location_ID%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_address_KEY                       address_KEY_LIST;
L_PARTY_location_ID                  PARTY_location_ID_LIST;

cursor c_addr_key is
select b2c.import_source_line_id,
hz_fuzzy_pub.Generate_Key('ADDRESS',null,b2c.address1,b2c.address2,b2c.address3,b2c.address4,b2c.postal_code,null,null)
"add_key"
from ams_hz_b2c_mapping_v b2c
where b2c.import_list_header_id = p_import_list_header_id
  and b2c.load_status in ('ACTIVE','RELOAD')
  and b2c.address1 is not null;

cursor c_addr_ps is
       select b2c.import_source_line_id,max(loc.location_id)
       from  hz_party_sites ps, hz_locations loc,ams_hz_b2c_mapping_v b2c
	where b2c.import_list_header_id = p_import_list_header_id
  	and b2c.load_status in ('ACTIVE','RELOAD')
  	and b2c.address_key is not null
        and b2c.person_party_id is not null
        and ps.party_id          = b2c.person_party_id
         and ps.location_id       = loc.location_id
         and loc.address_key      = b2c.address_key
         and loc.country          = b2c.country
         and nvl(loc.city,nvl(b2c.city,'x')) = nvl(b2c.city,'x')
	group by b2c.import_source_line_id;

cursor c_addr is
       select b2c.import_source_line_id,max(loc.location_id)
       from   hz_locations loc,ams_hz_b2c_mapping_v b2c
        where b2c.import_list_header_id = p_import_list_header_id
        and b2c.load_status in ('ACTIVE','RELOAD')
        and b2c.address_key is not null
        and b2c.party_location_id is null
        and loc.address_key     = b2c.address_key
         and loc.country          = b2c.country
         and nvl(loc.city,nvl(b2c.city,'x')) = nvl(b2c.city,'x')
	group by b2c.import_source_line_id;

begin
x_return_status := FND_API.G_RET_STS_SUCCESS;
-- TO POPULATE address_KEY
l_last_fetch   := FALSE;
open c_addr_key;
LOOP
    fetch c_addr_key BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_address_KEY LIMIT l_limit_rows;

        IF c_addr_key%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET address_key = L_address_KEY(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr_key;
-- TO POPULATE address_KEY

-- TO CHECK WITH address with ps
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_addr_ps;
LOOP
    fetch c_addr_ps BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_PARTY_location_ID LIMIT l_limit_rows;

        IF c_addr_ps%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET party_location_id = L_PARTY_location_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr_ps;
-- TO CHECK WITH address ps

-- TO CHECK WITH address
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
L_PARTY_location_ID := null;
open c_addr;
LOOP
    fetch c_addr BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID,
        L_PARTY_location_ID LIMIT l_limit_rows;

        IF c_addr%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_HZ_B2C_MAPPING_V
         SET party_location_id = L_PARTY_location_ID(I)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_addr;
-- TO CHECK WITH address

EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in per_address_existence_checking :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end per_address_existence_checking;

-- ---------------------------------------
--
-- This procedure is used to update the status for b2b/b2c import.
--
--
PROCEDURE update_cust_import_status(
   p_import_list_header_id    IN    NUMBER
                            ) IS
   x_import_list_header_id number;
   l_import_type        VARCHAR2(30);
   l_msg_code           NUMBER;
   l_msg_buf            VARCHAR2(4000);
   l_batch_id           NUMBER;
   l_lookup_code        VARCHAR2(30);
   l_return_status      VARCHAR2(1);
   X_RETURN_STATUS      VARCHAR2(1);
   x_msg_count          NUMBER;
   x_msg_data           VARCHAR2(2000);
   i_return_status      VARCHAR2(1);
   l_dedupe_flag        VARCHAR2(1);
   l_b2b_flag           VARCHAR2(1);
   l_validate_file      VARCHAR2(1);
   i_msg_data           VARCHAR2(2000);
   i_msg_buf            VARCHAR2(4000);
   i_msg_code           NUMBER;
   i_msg_count          NUMBER;
   l_list_header_id     NUMBER;
   l_duplicate_records  NUMBER;
   l_user_status_id     NUMBER;

   l_lead_status        VARCHAR2(30);
   i_processed_records  NUMBER;
   i_failed_records     NUMBER;
   l_request_id         NUMBER;
   l_conc_prog_name     VARCHAR2(60);
   l_finish_status      VARCHAR2(30);
   l_status_code        VARCHAR2(30);

   l_error_exist        VARCHAR2(1);
   l_execute_mode       VARCHAR2(1);
   l_rec_in_stag_tab    VARCHAR2(1);
   l_loaded_records     NUMBER;
   l_failed_records     NUMBER;
   l_loaded_rows        NUMBER;
   L_TOTAL_RECORDS      NUMBER;
   l_gen_list           VARCHAR2(1);
   l_list_name          VARCHAR2(240);
   l_OWNER_USER_ID      NUMBER;
      L_TOTAL_DUP_RECORDS  number;
   i_file_type VARCHAR2(30);
   i_xml_element_id     NUMBER;
   i_dedupe_flag        VARCHAR2(1);

   cursor c_import_type is
   select
   GENERATE_LIST,GENERATED_LIST_NAME,OWNER_USER_ID,dedupe_flag
   from ams_imp_list_headers_all
   where import_list_header_id = p_import_list_header_id;

   cursor c_dup_recs is
          select count(*) from ams_imp_source_lines
          where import_list_header_id = p_import_list_header_id
            and duplicate_flag = 'Y';

 cursor c_error_exist is
   select 'Y' from ams_list_import_errors
   where import_list_header_id = p_import_list_header_id
     and error_type = 'E'
     and rownum < 2;

 cursor c_loaded_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_SUCCESS;

 cursor c_failed_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_ERROR;

 cursor c_total_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = 'ACTIVE';

 cursor c_dup_records is
   select count(*) from ams_imp_source_lines
   where import_list_header_id = p_import_list_header_id
     and load_status = G_STATUS_DUPLICATE;

 cursor c_file_type is
    select file_type from ams_imp_documents
    where import_list_header_id = p_import_list_header_id;

 cursor c_dup_xml_recs is
     select COL68 from ams_imp_source_lines
     where load_status = 'DUPLICATE'
    AND import_list_header_id = p_import_list_header_id;


begin
      open c_import_type;
      fetch c_import_type into l_gen_list,l_list_name,l_OWNER_USER_ID,i_dedupe_flag;
      close c_import_type;

-- ------------------------------------------------------
-- ------------RAISE POST BUSINESS EVENT START ---------------------

              Raise_Business_event(p_import_list_header_id,
                                        'oracle.apps.ams.list.ListImportPostEvent');

-- ------------RAISE POST BUSINESS EVENT END ---------------------
-- ------------------------------------------------------
      open c_error_exist;
      fetch c_error_exist into l_error_exist;
      close c_error_exist;
      if l_error_exist = 'Y' then
         l_lookup_code := 'ERROR';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'ERROR' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;
      if l_error_exist is NULL then
       l_lookup_code := 'COMPLETED';
         l_user_status_id := null;
         SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
         WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
         system_status_code = 'COMPLETED' and default_flag = 'Y';

         UPDATE ams_imp_list_headers_all
         set status_code       =  l_lookup_code,
            user_status_id    =  l_user_status_id,
            status_date       =  sysdate
         where import_list_header_id = p_import_list_header_id;
      end if;

        -- Delete all the errors from the errors table which are sucessful.
                delete from ams_list_import_errors where import_list_header_id
                = p_import_list_header_id and import_source_line_id in
                (select import_source_line_id from ams_imp_source_lines where
                import_list_header_id = p_import_list_header_id and load_status = G_STATUS_SUCCESS);
     open c_loaded_records;
     fetch c_loaded_records into l_loaded_records;
     close c_loaded_records;
     open c_failed_records;
     fetch c_failed_records into l_failed_records;
     close c_failed_records;
     open c_dup_records;
     fetch c_dup_records into L_TOTAL_DUP_RECORDS;
     close c_dup_records;
     UPDATE ams_imp_list_headers_all
        SET loaded_no_of_rows = l_loaded_records,
            number_of_failed_records = l_failed_records,
            number_of_duplicate_records = L_TOTAL_DUP_RECORDS,
            loaded_date = sysdate
      WHERE import_list_header_id = p_import_list_header_id;

  open c_file_type;
  fetch c_file_type into i_file_type;
  close c_file_type;

 if i_file_type = 'XML' and i_dedupe_flag = 'Y' then
        open  c_dup_xml_recs;
        LOOP
           fetch c_dup_xml_recs into i_xml_element_id;

           exit when c_dup_xml_recs%notfound;
           AMS_List_Import_PUB.process_element_duplicate (
                                 p_import_list_header_id,
                                 i_xml_element_id);
        END LOOP;
        close c_dup_xml_recs;
 end if;

   if l_gen_list = 'Y' then
            AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Starting List Generation for List Import.',
              p_msg_type        => 'DEBUG'
              );
              l_loaded_rows := 0;
              select LOADED_NO_OF_ROWS into l_loaded_rows from ams_imp_list_headers_all
              where import_list_header_id = p_import_list_header_id;

             if l_loaded_rows > 0 then
               AMS_ListGeneration_PKG.create_import_list
                ( 1,
                  'T',
                  'T',
                  FND_API.G_VALID_LEVEL_FULL,
                  l_owner_user_id,
                  p_import_list_header_id,
                  i_return_status,
                  i_msg_count,
                  i_msg_data,
                  l_list_header_id,
                  l_list_name) ;

             If i_return_status <> 'S' then
              AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'Error in List Generation --'||i_msg_data,
              p_msg_type        => 'DEBUG'
              );
             End if;
             end if;
             AMS_Utility_PVT.Create_Log (
              x_return_status   => l_return_status,
              p_arc_log_used_by => G_ARC_IMPORT_HEADER,
              p_log_used_by_id  => p_import_list_header_id,
              p_msg_data        => 'End List Generation for List Import.',
              p_msg_type        => 'DEBUG'
              );
  end if;  -- p_generate_list

           l_total_records := 0;
           open c_total_records;
           fetch c_total_records into l_total_records;
           close c_total_records;
             AMS_Utility_PVT.Create_Log (
                  x_return_status   => l_return_status,
                  p_arc_log_used_by => G_ARC_IMPORT_HEADER,
                  p_log_used_by_id  => p_import_list_header_id,
                  p_msg_data  => 'Total Number of records not processed: '||to_char(l_total_records),
                  p_msg_type        => 'DEBUG'
                );

end update_cust_import_status;


--
-- This procedure is updates the records with request_id ordered by party_name
--
--
PROCEDURE org_party_update(
   p_import_list_header_id IN   NUMBER,
   p_request_id            IN   NUMBER,
   p_batch_size            IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS

l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;

TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;

cursor c_ordered_recs is

select ab.import_source_line_id from
(select import_source_line_id from ams_imp_source_lines
where import_list_header_id = p_import_list_header_id
  and request_id is  null
order by org_key) ab
where  rownum <= p_batch_size;
/*
select import_source_line_id from ams_imp_source_lines
where import_list_header_id = p_import_list_header_id
  and request_id is null
  and rownum <= p_batch_size;


SELECT AB.import_source_line_id
from
( select import_source_line_id, org_key ,ROW_NUMBER() OVER (order by org_key)  as id
 from  ams_imp_source_lines
where import_list_header_id = p_import_list_header_id
  and request_id is null ) AB
where AB.id <= p_batch_size;
*/

begin
l_last_fetch   := FALSE;
L_IMPORT_SOURCE_LINE_ID := null;
open c_ordered_recs;
LOOP
    fetch c_ordered_recs BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID LIMIT l_limit_rows;

        IF c_ordered_recs%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_IMP_SOURCE_LINES
         SET request_id = p_request_id
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);

    if l_last_fetch then
      exit;
    end if;
    commit;
END LOOP;
close c_ordered_recs;
commit;
EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in org_party_update:' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end org_party_update;

-- ------------------------------------
--
-- This procedure is updates the records with transposed phone number.
--
--
PROCEDURE gen_transposed_phone_number(
   p_import_list_header_id IN   NUMBER,
   x_return_status            OUT NOCOPY    VARCHAR2,
   x_msg_count                OUT NOCOPY    NUMBER,
   x_msg_data                 OUT NOCOPY    VARCHAR2
                       ) IS

l_limit_rows            number := 1000;
l_last_fetch            BOOLEAN;
l_imp_type              varchar2(30);

TYPE IMPORT_SOURCE_LINE_ID_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.IMPORT_SOURCE_LINE_ID%TYPE;
TYPE TRANSPOSED_PH_NUMBER_LIST IS TABLE OF AMS_IMP_SOURCE_LINES.TRANSPOSED_PHONE_NUMBER%TYPE;

L_IMPORT_SOURCE_LINE_ID         IMPORT_SOURCE_LINE_ID_LIST;
L_TRANSPOSED_PHONE_NUMBER       TRANSPOSED_PH_NUMBER_LIST;

cursor c_imp_type is
select import_type from ams_imp_list_headers_all
where import_list_header_id = p_import_list_header_id;

cursor c_b2b_ph_no is
select IMPORT_SOURCE_LINE_ID ,
hz_phone_number_pkg.transpose(PHONE_COUNTRY_CODE||PHONE_AREA_CODE||PHONE_NUMBER) "TRANS_PHONE_NUMBER"
from
ams_hz_b2b_mapping_v
where import_list_header_id = p_import_list_header_id
  and phone_number is not null
  and TRANSPOSED_PHONE_NUMBER is null
  and load_status in ('ACTIVE','RELOAD');

cursor c_b2c_ph_no is
select IMPORT_SOURCE_LINE_ID ,
hz_phone_number_pkg.transpose(PHONE_COUNTRY_CODE||PHONE_AREA_CODE||PHONE_NUMBER) "TRANS_PHONE_NUMBER"
from
ams_hz_b2c_mapping_v
where import_list_header_id = p_import_list_header_id
  and phone_number is not null
  and TRANSPOSED_PHONE_NUMBER is null
  and load_status in ('ACTIVE','RELOAD');
begin
l_last_fetch   := FALSE;
open c_imp_type;
fetch c_imp_type into l_imp_type;
close c_imp_type;

if l_imp_type = 'B2B' then
  open c_b2b_ph_no;
  LOOP
    fetch c_b2b_ph_no BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID, L_TRANSPOSED_PHONE_NUMBER LIMIT l_limit_rows;

        IF c_b2b_ph_no%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_IMP_SOURCE_LINES
         SET TRANSPOSED_PHONE_NUMBER = L_TRANSPOSED_PHONE_NUMBER(i)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);
    if l_last_fetch then
      exit;
    end if;
    commit;
  END LOOP;
close c_b2b_ph_no;
end if ; -- _b2b_flag = 'Y'
if l_imp_type = 'B2C' then
  open c_b2c_ph_no;
  LOOP
    fetch c_b2c_ph_no BULK COLLECT into
        L_IMPORT_SOURCE_LINE_ID, L_TRANSPOSED_PHONE_NUMBER LIMIT l_limit_rows;

        IF c_b2c_ph_no%NOTFOUND THEN
                l_last_fetch := TRUE;
        END IF;

        IF L_IMPORT_SOURCE_LINE_ID.COUNT = 0 AND l_last_fetch THEN
                 EXIT;
        END IF;
    FORALL i IN L_IMPORT_SOURCE_LINE_ID.FIRST..L_IMPORT_SOURCE_LINE_ID.LAST UPDATE AMS_IMP_SOURCE_LINES
         SET TRANSPOSED_PHONE_NUMBER = L_TRANSPOSED_PHONE_NUMBER(i)
    WHERE  IMPORT_SOURCE_LINE_ID = L_IMPORT_SOURCE_LINE_ID(i);
    if l_last_fetch then
      exit;
    end if;
    commit;
  END LOOP;
close c_b2c_ph_no;
end if ; -- l_b2b_flag = 'N'
commit;
EXCEPTION
 WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in gen_transposed_phone_number :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => x_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end gen_transposed_phone_number;


--
-- for XML updates the error in the element table
--
PROCEDURE update_xml_error_text (
                                 p_import_list_header_id    IN    NUMBER,
                                 p_import_type        IN varchar2) IS

l_org_imp_xml_element_id        number;
l_add_imp_xml_element_id        number;
l_ocont_imp_xml_element_id      number;
l_cp_imp_xml_element_id         number;
l_em_imp_xml_element_id         number;
l_per_imp_xml_element_id        number;
l_return_status			varchar2(1000);

cursor c_b2bxmlrec is
select org_imp_xml_element_id, add_imp_xml_element_id, ocont_imp_xml_element_id,
cp_imp_xml_element_id, em_imp_xml_element_id
from ams_hz_b2b_mapping_v
where import_list_header_id = p_import_list_header_id
  and load_status = 'RELOAD';

cursor c_b2cxmlrec is
select per_imp_xml_element_id, add_imp_xml_element_id,cp_imp_xml_element_id, em_imp_xml_element_id
from ams_hz_b2c_mapping_v
where import_list_header_id = p_import_list_header_id
  and load_status = 'RELOAD';

begin
 if p_import_type = 'B2B' then
    open c_b2bxmlrec;
    loop
      fetch c_b2bxmlrec into l_org_imp_xml_element_id, l_add_imp_xml_element_id,
            l_ocont_imp_xml_element_id, l_cp_imp_xml_element_id, l_em_imp_xml_element_id;
      exit when c_b2bxmlrec%notfound;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_org_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_add_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_ocont_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_cp_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_em_imp_xml_element_id;
    end loop;
    close c_b2bxmlrec;
 end if;


 if p_import_type = 'B2C' then
    open c_b2cxmlrec;
    loop
      fetch c_b2cxmlrec into l_per_imp_xml_element_id , l_add_imp_xml_element_id,
            l_cp_imp_xml_element_id, l_em_imp_xml_element_id;
      exit when c_b2cxmlrec%notfound;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_per_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_add_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_cp_imp_xml_element_id;
            update AMS_IMP_XML_ELEMENTS
            set ERROR_TEXT = NULL
            where  imp_xml_element_id = l_em_imp_xml_element_id;
    end loop;
    close c_b2cxmlrec;
 end if;

EXCEPTION
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in update_xml_error_text :' || SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end update_xml_error_text;
-- -----------------------------
-- This Program will raise pre business event from list import
PROCEDURE Raise_Business_event(
                            p_import_list_header_id NUMBER,
                            p_event                 VARCHAR2
                            ) IS

 l_parameter_list  WF_PARAMETER_LIST_T;
 l_new_item_key    VARCHAR2(30);
 l_return_status   VARCHAR2(30);
 l_import_type     VARCHAR2(30);
 l_user_id 	   NUMBER;
 l_vendor_id       NUMBER;
 l_lang_encoding   VARCHAR2(30);
 l_resp_id         NUMBER :=  FND_GLOBAL.resp_id;
 l_error_code      VARCHAR2(1);
 l_error_text      VARCHAR2(4000);
 l_user_status_id  NUMBER;

 Cursor c_header_info is
        select import_type,last_updated_by,vendor_id,charset from ams_imp_list_headers_all
        where  import_list_header_id = p_import_list_header_id;

Begin
      AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => 'IMPH',
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => ' Start Business event : '||p_event,
         p_msg_type        => 'DEBUG'
       );
    open c_header_info;
    fetch c_header_info into l_import_type,l_user_id,l_vendor_id,l_lang_encoding;
    close c_header_info;
         l_new_item_key    := p_import_list_header_id|| TO_CHAR(SYSDATE,'DDMMRRRRHH24MISS');
         l_parameter_list := WF_PARAMETER_LIST_T();

         wf_event.AddParameterToList(p_name           => 'IMPORT_LIST_HEADER_ID',
                                    p_value           => p_import_list_header_id,
                                    p_parameterlist   => l_parameter_list);

         wf_event.AddParameterToList(p_name           => 'IMPORT_TYPE',
                                    p_value           => l_import_type,
                                    p_parameterlist   => l_parameter_list);

         wf_event.AddParameterToList(p_name           => 'USER_ID',
                                    p_value           => l_user_id,
                                    p_parameterlist   => l_parameter_list);

         wf_event.AddParameterToList(p_name           => 'VENDOR_ID',
                                    p_value           => l_vendor_id,
                                    p_parameterlist   => l_parameter_list);

         wf_event.AddParameterToList(p_name           => 'LANGUAGE_ENCODING',
                                    p_value           => l_lang_encoding,
                                    p_parameterlist   => l_parameter_list);

         wf_event.AddParameterToList(p_name           => 'RESPONSIBILITY_ID',
                                    p_value           => l_resp_id,
                                    p_parameterlist   => l_parameter_list);
/*
         wf_event.AddParameterToList(p_name           => 'ERROR_CODE',
                                    p_value           => l_error_code,
                                    p_parameterlist   => l_parameter_list);

         wf_event.AddParameterToList(p_name           => 'ERROR_TEXT',
                                    p_value           => l_error_text,
                                    p_parameterlist   => l_parameter_list);
*/
         WF_EVENT.Raise
            ( p_event_name   =>  p_event,
              p_event_key    =>  l_new_item_key,
              p_parameters   =>  l_parameter_list);

     AMS_Utility_PVT.Create_Log (
         x_return_status   => l_return_status,
         p_arc_log_used_by => 'IMPH',
         p_log_used_by_id  => p_import_list_header_id,
         p_msg_data        => 'End Business event : '||p_event,
         p_msg_type        => 'DEBUG'
       );
      commit;
/*
      if l_error_code = 'E' then
	    AMS_Utility_PVT.Create_Log (
      		x_return_status   => l_return_status,
      		p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      		p_log_used_by_id  => p_import_list_header_id,
      		p_msg_data        => 'Business Event Error: '||l_error_text,
      		p_msg_type        => 'DEBUG'
   		);
                l_user_status_id := null;
                SELECT user_status_id into l_user_status_id FROM ams_user_statuses_vl
                WHERE system_status_type = 'AMS_IMPORT_STATUS' AND
                system_status_code = 'ERROR'  and default_flag = 'Y';
                UPDATE ams_imp_list_headers_all
                set status_code       = 'ERROR' ,
                user_status_id    =  l_user_status_id,
                status_date       =  sysdate
                where import_list_header_id = p_import_list_header_id;

         return;
      end if;
*/
 EXCEPTION
 WHEN OTHERS THEN
    FND_MESSAGE.set_name('AMS', 'API_DEBUG_MESSAGE');
    FND_MESSAGE.Set_Token('ROW','Error in Raise_Business_event :' ||SQLERRM||' '||SQLCODE);
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => G_ARC_IMPORT_HEADER,
      p_log_used_by_id  => p_import_list_header_id,
      p_msg_data        => FND_MESSAGE.get,
      p_msg_type        => 'DEBUG'
   );

end Raise_Business_event;

-- -----------------------------
FUNCTION TEST_Pre_sub
( p_subscription_guid In RAW
, p_event IN OUT NOCOPY WF_EVENT_T
)
RETURN VARCHAR2 IS

l_return_status		varchar2(30);
l_import_list_header_id	number;
l_import_type		varchar2(30);
l_user_id         NUMBER;
l_resp_id         NUMBER;
l_VENDOR_ID	  NUMBER;
l_LANGUAGE_ENCODING	varchar2(30);


begin
  -- SAVEPOINT TEST_Pre_sub;

  l_import_list_header_id := p_event.GetValueForParameter('IMPORT_LIST_HEADER_ID');
  l_import_type           := p_event.GetValueForParameter('IMPORT_TYPE');
  l_user_id		  := p_event.GetValueForParameter('USER_ID');
  l_resp_id		  := p_event.GetValueForParameter('RESPONSIBILITY_ID');
  l_VENDOR_ID		  := p_event.GetValueForParameter('VENDOR_ID');
  l_LANGUAGE_ENCODING	  := p_event.GetValueForParameter('LANGUAGE_ENCODING');
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'COMING INSIDE TEST_Pre_sub EVENT.......',
      p_msg_type        => 'DEBUG'
   );

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'IMPORT_LIST_HEADER_ID = '||to_char(l_import_list_header_id),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'IMPORT_TYPE = '||l_import_type,
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'USER_ID = '||to_char(l_user_id),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'RESPONSIBILITY_ID = '||to_char(l_resp_id),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'VENDOR_ID = '||to_char(l_VENDOR_ID),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'LANGUAGE_ENCODING = '||l_LANGUAGE_ENCODING,
      p_msg_type        => 'DEBUG');

   update ams_hz_b2b_mapping_v
      set CUSTOM_PROCESSING_STATUS = 'pre-processing'
   where import_list_header_id = l_import_list_header_id;

   return 'SUCCESS';
EXCEPTION
    WHEN OTHERS  THEN
--     ROLLBACK TO TEST_Pre_sub;
/*
     FND_MESSAGE.SET_NAME( 'AMS', 'API_DEBUG_MESSAGE' );
     FND_MESSAGE.SET_TOKEN( 'GENERIC_TEXT' ,SQLERRM );
     FND_MSG_PUB.ADD;
*/
     WF_CORE.CONTEXT('AMS_LIST_IMPORT_PUB', 'TEST_Pre_sub', p_event.getEventName(), p_subscription_guid);
     WF_EVENT.setErrorInfo(p_event, 'ERROR');

     RETURN 'ERROR';

end TEST_Pre_sub;

-- -----------------------------
FUNCTION TEST_Post_sub
( p_subscription_guid In RAW
, p_event IN OUT NOCOPY WF_EVENT_T
)
RETURN VARCHAR2 IS

l_return_status         varchar2(30);
l_import_list_header_id number;
l_import_type           varchar2(30);
l_user_id         NUMBER;
l_resp_id         NUMBER;
l_VENDOR_ID       NUMBER;
l_LANGUAGE_ENCODING     varchar2(30);


begin
  -- SAVEPOINT TEST_Post_sub;

  l_import_list_header_id := p_event.GetValueForParameter('IMPORT_LIST_HEADER_ID');
  l_import_type           := p_event.GetValueForParameter('IMPORT_TYPE');
  l_user_id               := p_event.GetValueForParameter('USER_ID');
  l_resp_id               := p_event.GetValueForParameter('RESPONSIBILITY_ID');
  l_VENDOR_ID             := p_event.GetValueForParameter('VENDOR_ID');
  l_LANGUAGE_ENCODING     := p_event.GetValueForParameter('LANGUAGE_ENCODING');
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'COMING INSIDE TEST_Post_sub EVENT.......',
      p_msg_type        => 'DEBUG'
   );
    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'IMPORT_LIST_HEADER_ID = '||to_char(l_import_list_header_id),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'IMPORT_TYPE = '||l_import_type,
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'USER_ID = '||to_char(l_user_id),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'RESPONSIBILITY_ID = '||to_char(l_resp_id),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'VENDOR_ID = '||to_char(l_VENDOR_ID),
      p_msg_type        => 'DEBUG');

    AMS_Utility_PVT.Create_Log (
      x_return_status   => l_return_status,
      p_arc_log_used_by => 'IMPH',
      p_log_used_by_id  => l_import_list_header_id,
      p_msg_data        => 'LANGUAGE_ENCODING = '||l_LANGUAGE_ENCODING,
      p_msg_type        => 'DEBUG');
/*
   update ams_hz_b2b_mapping_v
      set CUSTOM_PROCESSING_STATUS = 'pre-processing'
   where import_list_header_id = l_import_list_header_id;
*/
   return 'SUCCESS';
EXCEPTION
    WHEN OTHERS  THEN
--     ROLLBACK TO TEST_Post_sub;
/*
     FND_MESSAGE.SET_NAME( 'AMS', 'API_DEBUG_MESSAGE' );
     FND_MESSAGE.SET_TOKEN( 'GENERIC_TEXT' ,SQLERRM );
     FND_MSG_PUB.ADD;
*/
     WF_CORE.CONTEXT('AMS_LIST_IMPORT_PUB', 'TEST_Post_sub', p_event.getEventName(), p_subscription_guid);
     WF_EVENT.setErrorInfo(p_event, 'ERROR');

     RETURN 'ERROR';

end TEST_Post_sub;

end AMS_ListImport_PVT;

/
