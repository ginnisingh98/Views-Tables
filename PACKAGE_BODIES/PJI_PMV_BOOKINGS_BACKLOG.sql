--------------------------------------------------------
--  DDL for Package Body PJI_PMV_BOOKINGS_BACKLOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PJI_PMV_BOOKINGS_BACKLOG" AS
/* $Header: PJIRF02B.pls 120.6 2005/10/31 17:00:02 appldev noship $ */

/*
** ----------------------------------------------------------
** Procedure: Get_SQL_PJI_REP_PBB1
** This procedure returns sql statement generated by the base
** engine api for the report PJI_REP_PBB1.
** ----------------------------------------------------------
*/
PROCEDURE Get_SQL_PJI_REP_PBB1(p_page_parameter_tbl IN BIS_PMV_PAGE_PARAMETER_TBL
                    , x_PMV_Sql OUT NOCOPY  VARCHAR2
                    , x_PMV_Output OUT NOCOPY  BIS_QUERY_ATTRIBUTES_TBL)
IS
l_Err_Message	VARCHAR2(3200);
l_PMV_Sql       VARCHAR2(3200);
BEGIN
	PJI_PMV_ENGINE.Generate_SQL(P_PAGE_PARAMETER_TBL => p_page_parameter_tbl,
			 P_SELECT_LIST =>
                       'FACT.TOTAL_BOOKINGS  "PJI_REP_MSR_1",
                        FACT.BOOKINGS_CHANGE  "PJI_REP_MSR_2",
                        FACT.TOTAL_ENDING_BACKLOG  "PJI_REP_MSR_3",
                        FACT.BACKLOG_CHANGE  "PJI_REP_MSR_4",
                        FACT.BTB_RATIO  "PJI_REP_MSR_5",
                        FACT.BTB_CHANGE  "PJI_REP_MSR_6",
                        FACT.PRIOR_TOTAL_BOOKINGS  "PJI_REP_MSR_7",
                        FACT.PRIOR_TOTAL_ENDING_BACKLOG  "PJI_REP_MSR_8",
                        FACT.BTB_TOTAL_BOOKINGS  "PJI_REP_MSR_9",
                        FACT.BTB_REVENUE  "PJI_REP_MSR_10",
                        FACT.PRIOR_BTB_TOTAL_BOOKINGS  "PJI_REP_MSR_11",
                        FACT.PRIOR_BTB_REVENUE  "PJI_REP_MSR_12",
                        FACT.TOTAL_BOOKINGS  "PJI_REP_MSR_13",
                        FACT.TOTAL_ENDING_BACKLOG  "PJI_REP_MSR_14",
                        FACT.PRIOR_YEAR_BTB_RATIO  "PJI_REP_MSR_16",
                        FACT.CURRENT_YEAR_BTB_RATIO  "PJI_REP_MSR_15",
                        FACT.PJI_REP_TOTAL_1 "PJI_REP_TOTAL_1",
                        FACT.PJI_REP_TOTAL_2 "PJI_REP_TOTAL_2",
                        FACT.PJI_REP_TOTAL_3 "PJI_REP_TOTAL_3",
                        FACT.PJI_REP_TOTAL_4 "PJI_REP_TOTAL_4",
                        FACT.PJI_REP_TOTAL_5 "PJI_REP_TOTAL_5",
                        FACT.PJI_REP_TOTAL_6 "PJI_REP_TOTAL_6",
                        FACT.PJI_REP_TOTAL_7 "PJI_REP_TOTAL_7",
                        FACT.PJI_REP_TOTAL_8 "PJI_REP_TOTAL_8",
                        FACT.PJI_REP_TOTAL_1 "PJI_REP_TOTAL_13",
                        FACT.PJI_REP_TOTAL_3 "PJI_REP_TOTAL_14",
                        FACT.PJI_REP_TOTAL_5 "PJI_REP_TOTAL_15",
                        FACT.PJI_REP_TOTAL_16 "PJI_REP_TOTAL_16"'
             , P_SQL_STATEMENT => x_PMV_Sql
             , P_PMV_OUTPUT => x_PMV_Output
             , P_REGION_CODE => 'PJI_REP_PBB1'
			 , P_PLSQL_DRIVER => 'PJI_PMV_BOOKINGS_BACKLOG.PLSQLDriver_PJI_REP_PBB1'
			 , P_PLSQL_DRIVER_PARAMS => '  <<ORGANIZATION+FII_OPERATING_UNITS>>'||
			  ', <<ORGANIZATION+PJI_ORGANIZATIONS>>'||
			  ', <<CURRENCY+FII_CURRENCIES>>'||
			  ', <<AS_OF_DATE>>'||
			  ', <<PERIOD_TYPE>>'||
			  ', <<VIEW_BY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CATEGORY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CODE>>'||
			  ', <<TIME_COMPARISON_TYPE>>');
END Get_SQL_PJI_REP_PBB1;

/*
** ----------------------------------------------------------
** Procedure: Get_SQL_PJI_REP_PBB2
** This procedure returns sql statement generated by the base
** engine api for the report PJI_REP_PBB2.
** ----------------------------------------------------------
*/
PROCEDURE Get_SQL_PJI_REP_PBB2(p_page_parameter_tbl IN BIS_PMV_PAGE_PARAMETER_TBL
                    , x_PMV_Sql OUT NOCOPY  VARCHAR2
                    , x_PMV_Output OUT NOCOPY  BIS_QUERY_ATTRIBUTES_TBL)
IS
l_Err_Message	VARCHAR2(3200);
l_PMV_Sql       VARCHAR2(3200);
BEGIN
	PJI_PMV_ENGINE.Generate_SQL(P_PAGE_PARAMETER_TBL => p_page_parameter_tbl,
        P_SELECT_LIST =>    'FACT.PROJECT_ID  "PJI_REP_MSR_28",
		    FACT.PROJECT_NAME  "VIEWBY",
                    FACT.PROJECT_NUMBER  "PJI_REP_MSR_2",
		    FACT.URL_PARAMETERS01  "PJI_REP_MSR_27",
                    FACT.URL_PARAMETERS01  "PJI_REP_MSR_30",
		    FACT.PRIMARY_CUSTOMER  "PJI_REP_MSR_3",
                    FACT.PROJECT_TYPE  "PJI_REP_MSR_4",
                    FACT.ORGANIZATION  "PJI_REP_MSR_5",
                    FACT.PROJECT_MANAGER  "PJI_REP_MSR_6",
                    FACT.PROJECT_START_DATE  "PJI_REP_MSR_7",
                    FACT.XTD_ORIG_BKNG_AMT  "PJI_REP_MSR_8",
                    FACT.XTD_ADDT_BKNG_AMT  "PJI_REP_MSR_9",
                    FACT.XTD_TOTAL_BOOKINGS  "PJI_REP_MSR_10",
                    FACT.ITD_TOTAL_BOOKINGS  "PJI_REP_MSR_11",
                    FACT.BACKLOG_NOT_STARTED  "PJI_REP_MSR_12",
                    FACT.ACTIVE_BACKLOG  "PJI_REP_MSR_13",
                    FACT.DORMANT_BACKLOG  "PJI_REP_MSR_14",
                    FACT.TOTAL_ENDING_BACKLOG  "PJI_REP_MSR_15",
                    FACT.PROJECT_CLOSE_DATE  "PJI_REP_MSR_16",
                    FACT.LOST_BACKLOG  "PJI_REP_MSR_17",
                    FACT.REVENUE_AT_RISK  "PJI_REP_MSR_18",
                    FACT.XTD_ADJT_BKNG_AMT  "PJI_REP_MSR_19",
                    FACT.XTD_CANC_BKNG_AMT  "PJI_REP_MSR_20",
                    FACT.XTD_REVENUE  "PJI_REP_MSR_21",
                    FACT.ITD_ORIG_BKNG_AMT  "PJI_REP_MSR_22",
                    FACT.ITD_ADDT_BKNG_AMT  "PJI_REP_MSR_23",
                    FACT.ITD_ADJT_BKNG_AMT  "PJI_REP_MSR_24",
                    FACT.ITD_CANC_BKNG_AMT  "PJI_REP_MSR_25",
                    FACT.ITD_REVENUE  "PJI_REP_MSR_26",
                    FACT.PJI_REP_TOTAL_1 "PJI_REP_TOTAL_1",
                    FACT.PJI_REP_TOTAL_2 "PJI_REP_TOTAL_2",
                    FACT.PJI_REP_TOTAL_3 "PJI_REP_TOTAL_3",
                    FACT.PJI_REP_TOTAL_4 "PJI_REP_TOTAL_4",
                    FACT.PJI_REP_TOTAL_5 "PJI_REP_TOTAL_5",
                    FACT.PJI_REP_TOTAL_6 "PJI_REP_TOTAL_6",
                    FACT.PJI_REP_TOTAL_7 "PJI_REP_TOTAL_7",
                    FACT.PJI_REP_TOTAL_8 "PJI_REP_TOTAL_8",
                    FACT.PJI_REP_TOTAL_9 "PJI_REP_TOTAL_9",
                    FACT.PJI_REP_TOTAL_10 "PJI_REP_TOTAL_10"'
			, P_SQL_STATEMENT => x_PMV_Sql
            		, P_PMV_OUTPUT => x_PMV_Output
            		, P_REGION_CODE => 'PJI_REP_PBB2'
			, P_PLSQL_DRIVER => 'PJI_PMV_BOOKINGS_BACKLOG.PLSQLDriver_PJI_REP_PBB2'
			, P_PLSQL_DRIVER_PARAMS => '  <<ORGANIZATION+FII_OPERATING_UNITS>>'||
			  ', <<ORGANIZATION+PJI_ORGANIZATIONS>>'||
			  ', <<CURRENCY+FII_CURRENCIES>>'||
			  ', <<AS_OF_DATE>>'||
			  ', <<PERIOD_TYPE>>'||
			  ', <<VIEW_BY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CATEGORY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CODE>>'||
			  ', <<REV_AT_RISK_FLAG+REV_AT_RISK_FLAG>>');
END Get_SQL_PJI_REP_PBB2;

/*
** ----------------------------------------------------------
** Procedure: Get_SQL_PJI_REP_PBB3
** This procedure returns sql statement generated by the base
** engine api for the report PJI_REP_PBB3.
** ----------------------------------------------------------
*/
PROCEDURE Get_SQL_PJI_REP_PBB3(p_page_parameter_tbl IN BIS_PMV_PAGE_PARAMETER_TBL
                    , x_PMV_Sql OUT NOCOPY  VARCHAR2
                    , x_PMV_Output OUT NOCOPY  BIS_QUERY_ATTRIBUTES_TBL)
IS
l_Err_Message   VARCHAR2(3200);
l_PMV_Sql       VARCHAR2(3200);
BEGIN
	PJI_PMV_ENGINE.Generate_SQL(P_PAGE_PARAMETER_TBL => p_page_parameter_tbl,
			P_SELECT_LIST => 'FACT.BACKLOG  "PJI_REP_MSR_1",
                                FACT.ORIGINAL_BOOKINGS  "PJI_REP_MSR_2",
                                FACT.ADDITIONAL_BOOKINGS  "PJI_REP_MSR_3",
                                FACT.BOOKINGS_ADJUSTMENTS  "PJI_REP_MSR_4",
                                FACT.CANCELLATIONS  "PJI_REP_MSR_5",
                                FACT.TOTAL_NET_BOOKINGS  "PJI_REP_MSR_6",
                                FACT.ACCRUED_REVENUE  "PJI_REP_MSR_7",
                                FACT.REVENUE_AT_RISK_ITD  "PJI_REP_MSR_8",
                                FACT.LOST_BACKLOG_ITD  "PJI_REP_MSR_9",
                                FACT.BACKLOG_ITD  "PJI_REP_MSR_10",
                                FACT.PJI_REP_TOTAL_1 "PJI_REP_TOTAL_1",
                                FACT.PJI_REP_TOTAL_2 "PJI_REP_TOTAL_2",
                                FACT.PJI_REP_TOTAL_3 "PJI_REP_TOTAL_3",
                                FACT.PJI_REP_TOTAL_4 "PJI_REP_TOTAL_4",
                                FACT.PJI_REP_TOTAL_5 "PJI_REP_TOTAL_5",
                                FACT.PJI_REP_TOTAL_6 "PJI_REP_TOTAL_6",
                                FACT.PJI_REP_TOTAL_7 "PJI_REP_TOTAL_7",
                                FACT.PJI_REP_TOTAL_8 "PJI_REP_TOTAL_8",
                                FACT.PJI_REP_TOTAL_9 "PJI_REP_TOTAL_9",
                                FACT.PJI_REP_TOTAL_10 "PJI_REP_TOTAL_10"'
            , P_SQL_STATEMENT => x_PMV_Sql
            		, P_PMV_OUTPUT => x_PMV_Output
            		, P_REGION_CODE => 'PJI_REP_PBB3'
			, P_PLSQL_DRIVER => 'PJI_PMV_BOOKINGS_BACKLOG.PLSQLDriver_PBB3'
			, P_PLSQL_DRIVER_PARAMS => '  <<ORGANIZATION+FII_OPERATING_UNITS>>'||
			  ', <<ORGANIZATION+PJI_ORGANIZATIONS>>'||
			  ', <<CURRENCY+FII_CURRENCIES>>'||
			  ', <<AS_OF_DATE>>'||
			  ', <<PERIOD_TYPE>>'||
			  ', <<VIEW_BY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CATEGORY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CODE>> ');
END Get_SQL_PJI_REP_PBB3;

/*
** ----------------------------------------------------------
** Procedure: Get_SQL_PJI_REP_PBB4
** This procedure returns sql statement generated by the base
** engine api for the report PJI_REP_PBB4.
** ----------------------------------------------------------
*/
PROCEDURE Get_SQL_PJI_REP_PBB4(p_page_parameter_tbl IN BIS_PMV_PAGE_PARAMETER_TBL
                    , x_PMV_Sql OUT NOCOPY  VARCHAR2
                    , x_PMV_Output OUT NOCOPY  BIS_QUERY_ATTRIBUTES_TBL)
IS
l_Err_Message	VARCHAR2(3200);
l_PMV_Sql       VARCHAR2(3200);
BEGIN
	PJI_PMV_ENGINE.Generate_SQL(P_PAGE_PARAMETER_TBL => p_page_parameter_tbl,
    P_SELECT_LIST =>   'FACT.PROJECT_ID  "PJI_REP_MSR_18",
    			FACT.PROJECT_NAME  "VIEWBY",
                        FACT.PROJECT_NUMBER  "PJI_REP_MSR_2",
			FACT.URL_PARAMETERS01 "PJI_REP_MSR_20",
                        FACT.URL_PARAMETERS01 "PJI_REP_MSR_30",
			FACT.PRIMARY_CUSTOMER  "PJI_REP_MSR_3",
			FACT.PROJECT_TYPE  "PJI_REP_MSR_4",
                        FACT.ORGANIZATION  "PJI_REP_MSR_5",
                        FACT.PROJECT_MANAGER  "PJI_REP_MSR_6",
                        FACT.PROJECT_START_DATE  "PJI_REP_MSR_7",
                        FACT.BEGINNING_BACKLOG  "PJI_REP_MSR_8",
                        FACT.XTD_ORIG_BKNG_AMT  "PJI_REP_MSR_9",
                        FACT.XTD_ADDT_BKNG_AMT  "PJI_REP_MSR_10",
                        FACT.XTD_ADJT_BKNG_AMT  "PJI_REP_MSR_11",
                        FACT.XTD_CANC_BKNG_AMT  "PJI_REP_MSR_12",
                        FACT.XTD_TOTAL_BOOKINGS  "PJI_REP_MSR_13",
                        FACT.XTD_REVENUE  "PJI_REP_MSR_14",
                        FACT.REVENUE_AT_RISK  "PJI_REP_MSR_15",
                        FACT.LOST_BACKLOG  "PJI_REP_MSR_16",
                        FACT.TOTAL_ENDING_BACKLOG  "PJI_REP_MSR_17",
                        FACT.PJI_REP_TOTAL_14 "PJI_REP_TOTAL_14",
                        FACT.PJI_REP_TOTAL_1 "PJI_REP_TOTAL_1",
                        FACT.PJI_REP_TOTAL_2 "PJI_REP_TOTAL_2",
                        FACT.PJI_REP_TOTAL_11 "PJI_REP_TOTAL_11",
                        FACT.PJI_REP_TOTAL_12 "PJI_REP_TOTAL_12",
                        FACT.PJI_REP_TOTAL_3 "PJI_REP_TOTAL_3",
                        FACT.PJI_REP_TOTAL_13 "PJI_REP_TOTAL_13",
                        FACT.PJI_REP_TOTAL_10 "PJI_REP_TOTAL_10",
                        FACT.PJI_REP_TOTAL_9 "PJI_REP_TOTAL_9",
                        FACT.PJI_REP_TOTAL_8 "PJI_REP_TOTAL_8"'
			, P_SQL_STATEMENT => x_PMV_Sql
       		, P_PMV_OUTPUT => x_PMV_Output
       		, P_REGION_CODE => 'PJI_REP_PBB4'
			, P_PLSQL_DRIVER => 'PJI_PMV_BOOKINGS_BACKLOG.PLSQLDriver_PJI_REP_PBB2'
			, P_PLSQL_DRIVER_PARAMS => '  <<ORGANIZATION+FII_OPERATING_UNITS>>'||
			  ', <<ORGANIZATION+PJI_ORGANIZATIONS>>'||
			  ', <<CURRENCY+FII_CURRENCIES>>'||
			  ', <<AS_OF_DATE>>'||
			  ', <<PERIOD_TYPE>>'||
			  ', <<VIEW_BY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CATEGORY>>'||
			  ', <<PROJECT CLASSIFICATION+CLASS_CODE>>'||
			  ', ''N''');
END Get_SQL_PJI_REP_PBB4;

/*
** ----------------------------------------------------------
** Function: PLSQLDriver_PJI_REP_PBB1
** This function is called from select statement
** generated by PJI engine. The function returns PL/SQL table
** of records which have to be displayed in the pmv report.
** Following are the reports to which this function caters:
** 1. PJI_REP_PBB1 - Project Bookings & Backlog Summary
** ----------------------------------------------------------
*/
FUNCTION PLSQLDriver_PJI_REP_PBB1(
  p_Operating_Unit		IN VARCHAR2 DEFAULT NULL
, p_Organization		IN VARCHAR2
, p_Currency_Type		IN VARCHAR2
, p_As_Of_Date			IN NUMBER
, p_Period_Type 		IN VARCHAR2
, p_View_BY 			IN VARCHAR2
, p_Classifications		IN VARCHAR2 DEFAULT NULL
, p_Class_Codes			IN VARCHAR2 DEFAULT NULL
, p_Comparator_Type		IN VARCHAR2 DEFAULT NULL
)RETURN PJI_REP_PBB1_TBL
IS
PRAGMA AUTONOMOUS_TRANSACTION;
l_Total_Bookings_Backlog_Tab		PJI_REP_PBB1_TBL:=PJI_REP_PBB1_TBL();
l_Parse_Class_Codes		VARCHAR2(1);
l_BTB_C_As_Of_Date		NUMBER;
l_BTB_End_Date			NUMBER;
l_BTB_C_End_Date		NUMBER;
l_BTB_Days			    NUMBER;
l_Calendar_Type			VARCHAR2(1);

l_Top_Organization_Name     VARCHAR2(240);
l_Top_Org_Index             NUMBER:=0;

x_Total_Bookings                NUMBER:=0;
x_Prior_Total_Bookings          NUMBER:=0;
x_Total_Ending_Backlog          NUMBER:=0;
x_Prior_Total_Ending_Backlog    NUMBER:=0;
x_BTB_Total_Bookings            NUMBER:=0;
x_BTB_Revenue                   NUMBER:=0;
x_Prior_BTB_Total_Bookings      NUMBER:=0;
x_Prior_BTB_Revenue             NUMBER:=0;

l_Total_Bookings                NUMBER:=0;
l_Prior_Total_Bookings          NUMBER:=0;
l_Total_Ending_Backlog          NUMBER:=0;
l_Prior_Total_Ending_Backlog    NUMBER:=0;
l_BTB_Total_Bookings            NUMBER:=0;
l_BTB_Revenue                   NUMBER:=0;
l_Prior_BTB_Total_Bookings      NUMBER:=0;
l_Prior_BTB_Revenue             NUMBER:=0;
l_curr_record_type_id           NUMBER:= 1;


BEGIN

	/*
	** Call the Convert_AS_OF_DATE api to derive the
	** as of date as per comparator type selected
	** in the pmv report.
	*/
	l_BTB_C_As_Of_Date   :=PJI_PMV_ENGINE.Convert_AS_OF_DATE(p_As_Of_Date, p_Period_Type, p_Comparator_Type);
	l_curr_record_type_id:=PJI_PMV_ENGINE.Convert_Currency_Record_Type(p_Currency_Type);

	/*
	** Place a call to all the parse API's which parse the
	** parameters passed by PMV and populate all the
	** temporary tables.
	*/
	PJI_PMV_ENGINE.Convert_Operating_Unit(p_Operating_Unit_IDS=>p_Operating_Unit, p_View_BY=>p_View_BY);
        PJI_PMV_ENGINE.Convert_Organization(p_Top_Organization_ID=>p_Organization,
                                        p_View_BY=>p_View_BY,
                                        p_Top_Organization_Name =>l_Top_Organization_Name);
	PJI_PMV_ENGINE.Convert_Time(p_As_Of_Date=>p_As_Of_Date, p_Period_Type=>p_Period_Type, p_View_BY=>p_View_BY, p_Parse_Prior=>'N', p_Report_Type=>'DBI', p_Comparator=>p_Comparator_Type, p_Parse_ITD=>'Y');

	/*
	** Determine the lag days between book to bill based on
	** PJI setup.
	*/

	BEGIN
		SELECT NVL(book_to_bill_days,0)
		INTO l_BTB_Days
		FROM
		pji_system_settings;
	EXCEPTION
		WHEN OTHERS THEN
			l_BTB_Days:=0;
	END;

	IF p_Period_Type LIKE '%PA%' THEN
		l_Calendar_Type:='P';
	ELSE
		l_Calendar_Type:='C';
	END IF;

	/*
	** Determine the fact tables you choose to run the database
	** query on ( this step is what we call manual query re-write).
	*/

	IF PJI_PMV_ENGINE.Convert_Classification(p_Classification_ID=>p_Classifications, p_Class_Code_IDS=>p_Class_Codes, p_View_BY=>p_View_BY) = 'N' THEN

		/*
		** Code the SQL statement for all of the following conditions
		** 1. Current Year
		** 2. Prior Year
		** 3. SQL to generate rows with zero's for the view by dimension
		** Bulk-Collect the output into a pl/sql table to be returned to
		** pmv.
		*/

		SELECT PJI_REP_PBB1( ORG_ID
			, ORGANIZATION_ID
			, TIME_ID
			, TIME_KEY
			, PROJECT_CLASS_ID
			, SUM( TOTAL_BOOKINGS )
			, SUM( PRIOR_TOTAL_BOOKINGS )
			, 0
            , SUM( TOTAL_ENDING_BACKLOG )
			, SUM( PRIOR_TOTAL_ENDING_BACKLOG )
			, 0
            , SUM( BTB_TOTAL_BOOKINGS )
			, SUM( BTB_REVENUE )
			, 0
            , SUM( PRIOR_BTB_TOTAL_BOOKINGS )
			, SUM( PRIOR_BTB_REVENUE )
			, 0
                        , 0
			, 0
			, 0
			, 0
                        , 0
                        , 0
			, 0
			, 0,0,0,0,0)
		BULK COLLECT INTO l_Total_Bookings_Backlog_Tab
		FROM
		( SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, '-1' project_class_id
			, (FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount + FCT.cancelled_funding_amount) total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM 	pji_pmv_time_dim_tmp TIME
			, pji_pmv_orgz_dim_tmp HORG
			, pji_ac_orgo_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.org_id = HOU.id
			AND FCT.organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, '-1' project_class_id
			, 0 total_bookings
			, (FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount +FCT.cancelled_funding_amount) prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM    pji_pmv_tcmp_dim_tmp TIME
			, pji_pmv_orgz_dim_tmp HORG
			, pji_ac_orgo_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.org_id = HOU.id
			AND FCT.organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, '-1' project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , (FCT.dormant_backlog_start+FCT.active_backlog+FCT.dormant_backlog_inactiv) total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
  FROM	pji_pmv_itd_dim_tmp TIME
		 	, pji_pmv_orgz_dim_tmp HORG
			, pji_ac_orgo_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.org_id = HOU.id
			AND FCT.organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND TIME.comparator_type = 'I'
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, '-1' project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, (FCT.dormant_backlog_start+FCT.active_backlog+FCT.dormant_backlog_inactiv) prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM	 pji_pmv_itd_dim_tmp TIME
		  	, pji_pmv_orgz_dim_tmp HORG
			, pji_ac_orgo_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.org_id = HOU.id
			AND FCT.organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND TIME.comparator_type = 'D'
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, '-1' time_id
			, -1   time_key
			, '-1' project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount+FCT.cancelled_funding_amount btb_total_bookings
			, FCT.revenue btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM 	pji_pmv_orgz_dim_tmp HORG
			, pji_ac_orgo_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.org_id = HOU.id
			AND FCT.organization_id = HORG.id
			AND FCT.time_id BETWEEN p_As_Of_Date-l_BTB_Days AND p_As_Of_Date
			AND FCT.PERIOD_TYPE_ID = 1
			AND FCT.CALENDAR_TYPE = l_Calendar_Type
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, '-1' time_id
			, -1   time_key
			, '-1' project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount+FCT.cancelled_funding_amount prior_btb_total_bookings
			, FCT.revenue prior_btb_revenue
        FROM 	pji_pmv_orgz_dim_tmp HORG
			, pji_ac_orgo_f_mv FCT
			, pji_pmv_org_dim_tmp HOU

		WHERE
			FCT.org_id = HOU.id
			AND FCT.organization_id = HORG.id
			AND FCT.time_id BETWEEN l_BTB_C_As_Of_Date-l_BTB_Days AND l_BTB_C_As_Of_Date
			AND FCT.PERIOD_TYPE_ID = 1
			AND FCT.CALENDAR_TYPE = l_Calendar_Type
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT  name 	org_id
			, '-1'	organization_id
			, '-1'	time_id
			, -1		time_key
			, '-1'	project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM pji_pmv_org_dim_tmp
		WHERE name <> '-1'
		UNION ALL
		SELECT  '-1' 	org_id
			, name	organization_id
			, '-1'	time_id
			, -1		time_key
			, '-1'	project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM pji_pmv_orgz_dim_tmp
		WHERE name <> '-1'
		UNION ALL
		SELECT  '-1' 		org_id
			, '-1'		organization_id
			, name		time_id
			, order_by_id	time_key
			, '-1'		project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM pji_pmv_time_dim_tmp
		WHERE name <> '-1')
		GROUP BY
			ORG_ID
			, ORGANIZATION_ID
			, TIME_KEY
			, TIME_ID
			, PROJECT_CLASS_ID;
	ELSE
		/*
		** Code the SQL statement for all of the following conditions
		** 1. Current Year
		** 2. Prior Year
		** 3. SQL to generate rows with zero's for the view by dimension
		*/

		SELECT PJI_REP_PBB1( ORG_ID
			, ORGANIZATION_ID
			, TIME_ID
			, TIME_KEY
			, PROJECT_CLASS_ID
			, SUM( TOTAL_BOOKINGS )
			, SUM( PRIOR_TOTAL_BOOKINGS )
			, 0
            , SUM( TOTAL_ENDING_BACKLOG )
			, SUM( PRIOR_TOTAL_ENDING_BACKLOG )
			, 0
            , SUM( BTB_TOTAL_BOOKINGS )
			, SUM( BTB_REVENUE )
			, 0
            , SUM( PRIOR_BTB_TOTAL_BOOKINGS )
			, SUM( PRIOR_BTB_REVENUE )
			, 0
                        , 0
			, 0
			, 0
                        , 0
                        , 0
			, 0
			, 0
			, 0,0,0,0,0)
		BULK COLLECT INTO l_Total_Bookings_Backlog_Tab
		FROM
		( SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, CLS.name  project_class_id
			, (FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount+FCT.cancelled_funding_amount) total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM    pji_pmv_time_dim_tmp TIME
			, pji_pmv_orgz_dim_tmp HORG
			, pji_pmv_cls_dim_tmp CLS
			, pji_ac_clso_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.project_org_id = HOU.id
			AND FCT.project_organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND FCT.project_class_id = CLS.id
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, CLS.name  project_class_id
			, 0 total_bookings
			, (FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount+FCT.cancelled_funding_amount) prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM 	pji_pmv_tcmp_dim_tmp TIME
			, pji_pmv_orgz_dim_tmp HORG
			, pji_pmv_cls_dim_tmp CLS
			, pji_ac_clso_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.project_org_id = HOU.id
			AND FCT.project_organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND FCT.project_class_id = CLS.id
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, CLS.name  project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , (FCT.dormant_backlog_start+FCT.active_backlog+FCT.dormant_backlog_inactiv) total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM 	pji_pmv_itd_dim_tmp TIME
			, pji_pmv_orgz_dim_tmp HORG
			, pji_pmv_cls_dim_tmp CLS
			, pji_ac_clso_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.project_org_id = HOU.id
			AND FCT.project_organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND TIME.comparator_type = 'I'
			AND FCT.project_class_id = CLS.id
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, TIME.name time_id
			, -1   time_key
			, CLS.name  project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, (FCT.dormant_backlog_start+FCT.active_backlog+FCT.dormant_backlog_inactiv) prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM 	pji_pmv_itd_dim_tmp TIME
			, pji_pmv_orgz_dim_tmp HORG
			, pji_pmv_cls_dim_tmp CLS
			, pji_ac_clso_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.project_org_id = HOU.id
			AND FCT.project_organization_id = HORG.id
			AND FCT.time_id = TIME.id
			AND TIME.id IS NOT NULL
			AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
			AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
			AND TIME.comparator_type = 'D'
			AND FCT.project_class_id = CLS.id
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, '-1' time_id
			, -1   time_key
			, CLS.name  project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount+FCT.cancelled_funding_amount btb_total_bookings
			, FCT.revenue btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM 	pji_pmv_orgz_dim_tmp HORG
			, pji_pmv_cls_dim_tmp CLS
			, pji_ac_clso_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
			WHERE
			FCT.project_org_id = HOU.id
			AND FCT.project_organization_id = HORG.id
			AND FCT.time_id BETWEEN p_As_Of_Date-l_BTB_Days AND p_As_Of_Date
			AND FCT.PERIOD_TYPE_ID = 1
			AND FCT.CALENDAR_TYPE = l_Calendar_Type
			AND FCT.project_class_id = CLS.id
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT /*+ ORDERED */
			  HOU.name	org_id
			, HORG.name	organization_id
			, '-1' time_id
			, -1   time_key
			, CLS.name  project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , FCT.initial_funding_amount+FCT.additional_funding_amount+FCT.funding_adjustment_amount+FCT.cancelled_funding_amount prior_btb_total_bookings
			, FCT.revenue prior_btb_revenue
      FROM 	 pji_pmv_orgz_dim_tmp HORG
			, pji_pmv_cls_dim_tmp CLS
			, pji_ac_clso_f_mv FCT
			, pji_pmv_org_dim_tmp HOU
		WHERE
			FCT.project_org_id = HOU.id
			AND FCT.project_organization_id = HORG.id
			AND FCT.time_id BETWEEN l_BTB_C_As_Of_Date-l_BTB_Days AND l_BTB_C_As_Of_Date
			AND FCT.PERIOD_TYPE_ID = 1
			AND FCT.CALENDAR_TYPE = l_Calendar_Type
			AND FCT.project_class_id = CLS.id
			AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
		UNION ALL
		SELECT  name 	org_id
			, '-1'	organization_id
			, '-1'	time_id
			, -1		time_key
			, '-1'	project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM pji_pmv_org_dim_tmp
		WHERE name <> '-1'
		UNION ALL
		SELECT  '-1' 	org_id
			, name	organization_id
			, '-1'	time_id
			, -1		time_key
			, '-1'	project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM pji_pmv_orgz_dim_tmp
		WHERE name <> '-1'
		UNION ALL
		SELECT  '-1' 		org_id
			, '-1'		organization_id
			, name		time_id
			, order_by_id	time_key
			, '-1'		project_class_id
			, 0 total_bookings
			, 0 prior_total_bookings
			, 0
            , 0 total_ending_backlog
			, 0 prior_total_ending_backlog
			, 0
            , 0 btb_total_bookings
			, 0 btb_revenue
			, 0
            , 0 prior_btb_total_bookings
			, 0 prior_btb_revenue
        FROM pji_pmv_time_dim_tmp
		WHERE name <> '-1'
		UNION ALL
                 SELECT '-1' ORG_ID
                 	,'-1' ORGANIZATION_ID
                 	,'-1' TIME_ID
                    , -1 TIME_KEY
                    , NAME PROJECT_CLASS_ID
                    , 0 TOTAL_BOOKINGS
                    , 0 PRIOR_TOTAL_BOOKINGS
                    , 0
                    , 0 TOTAL_ENDING_BACKLOG
                    , 0 PRIOR_TOTAL_ENDING_BACKLOG
                    , 0
                    , 0 BTB_TOTAL_BOOKINGS
                    , 0 BTB_REVENUE
                    , 0
                    , 0 PRIOR_BTB_TOTAL_BOOKINGS
                    , 0 PRIOR_BTB_REVENUE
                     FROM PJI_PMV_CLS_DIM_TMP
                    WHERE NAME <> '-1'
		)
		GROUP BY
			ORG_ID
			, ORGANIZATION_ID
			, TIME_KEY
			, TIME_ID
			, PROJECT_CLASS_ID;
	END IF;

FOR i in 1..l_Total_Bookings_Backlog_Tab.COUNT
  LOOP
    IF p_View_By = 'OG' THEN
        IF l_Total_Bookings_Backlog_Tab(i).ORGANIZATION_ID = l_Top_Organization_Name THEN
        l_Top_Org_Index:=i;

        l_Total_Bookings        := NVL(l_Total_Bookings_Backlog_Tab(i).TOTAL_BOOKINGS,0);
        l_Prior_Total_Bookings  := NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_BOOKINGS,0);
        l_Total_Ending_Backlog  := NVL(l_Total_Bookings_Backlog_Tab(i).TOTAL_ENDING_BACKLOG,0);
        l_Prior_Total_Ending_Backlog := NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_ENDING_BACKLOG,0);
        l_BTB_Total_Bookings    := NVL(l_Total_Bookings_Backlog_Tab(i).BTB_TOTAL_BOOKINGS,0);
        l_BTB_Revenue           := NVL(l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE,0);
        l_Prior_BTB_Total_Bookings := NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_TOTAL_BOOKINGS,0);
        l_Prior_BTB_Revenue     :=NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE,0);

        ELSE
        x_Total_Bookings       :=x_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).TOTAL_BOOKINGS,0);
        x_Prior_Total_Bookings    :=x_Prior_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_BOOKINGS,0);
        x_Total_Ending_Backlog   :=x_Total_Ending_Backlog
                    + NVL(l_Total_Bookings_Backlog_Tab(i).TOTAL_ENDING_BACKLOG,0);
        x_Prior_Total_Ending_Backlog:=x_Prior_Total_Ending_Backlog
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_ENDING_BACKLOG,0);
        x_BTB_Total_Bookings   :=x_BTB_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).BTB_TOTAL_BOOKINGS,0);
        x_BTB_Revenue       :=x_BTB_Revenue
                    + NVL(l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE,0);
        x_Prior_BTB_Total_Bookings :=x_Prior_BTB_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_TOTAL_BOOKINGS,0);
        x_Prior_BTB_Revenue :=x_Prior_BTB_Revenue
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE,0);
        END IF;
    ELSE
        x_Total_Bookings       :=x_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).TOTAL_BOOKINGS,0);
        x_Prior_Total_Bookings    :=x_Prior_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_BOOKINGS,0);
        x_Total_Ending_Backlog   :=x_Total_Ending_Backlog
                    + NVL(l_Total_Bookings_Backlog_Tab(i).TOTAL_ENDING_BACKLOG,0);
        x_Prior_Total_Ending_Backlog:=x_Prior_Total_Ending_Backlog
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_ENDING_BACKLOG,0);
        x_BTB_Total_Bookings   :=x_BTB_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).BTB_TOTAL_BOOKINGS,0);
        x_BTB_Revenue       :=x_BTB_Revenue
                    + NVL(l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE,0);
        x_Prior_BTB_Total_Bookings :=x_Prior_BTB_Total_Bookings
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_TOTAL_BOOKINGS,0);
        x_Prior_BTB_Revenue :=x_Prior_BTB_Revenue
                    + NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE,0);
END IF;

IF NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_BOOKINGS, 0)=0 THEN
         l_Total_Bookings_Backlog_Tab(i).BOOKINGS_CHANGE:= NULL;
    ELSE
       l_Total_Bookings_Backlog_Tab(i).BOOKINGS_CHANGE:=
           ((l_Total_Bookings_Backlog_Tab(i).TOTAL_BOOKINGS
                   -l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_BOOKINGS)
                   /ABS(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_BOOKINGS))*100;
END IF;

IF
        NVL(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_ENDING_BACKLOG, 0)=0 THEN
        l_Total_Bookings_Backlog_Tab(i).BACKLOG_CHANGE :=NULL;
        ELSE
        l_Total_Bookings_Backlog_Tab(i).BACKLOG_CHANGE :=
        ((l_Total_Bookings_Backlog_Tab(i).TOTAL_ENDING_BACKLOG
                -l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_ENDING_BACKLOG)
            /ABS(l_Total_Bookings_Backlog_Tab(i).PRIOR_TOTAL_ENDING_BACKLOG))*100;
END IF;



IF
       l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE=0 THEN
            l_Total_Bookings_Backlog_Tab(i).BTB_RATIO :=NULL;
            l_Total_Bookings_Backlog_Tab(i).CURRENT_YEAR_BTB_RATIO:=NULL;
     ELSE
        l_Total_Bookings_Backlog_Tab(i).BTB_RATIO :=
            l_Total_Bookings_Backlog_Tab(i).BTB_TOTAL_BOOKINGS/
                l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE;
        l_Total_Bookings_Backlog_Tab(i).CURRENT_YEAR_BTB_RATIO:=
                l_Total_Bookings_Backlog_Tab(i).BTB_TOTAL_BOOKINGS/
                l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE;

END IF;
IF
      l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE =0 THEN
       l_Total_Bookings_Backlog_Tab(i).PRIOR_YEAR_BTB_RATIO:= NULL;
        ELSE
       l_Total_Bookings_Backlog_Tab(i).PRIOR_YEAR_BTB_RATIO:=
               l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_TOTAL_BOOKINGS/
               l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE;
END IF;

IF
     NVL(l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE, 0)=0
        OR  l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE=0 THEN
            l_Total_Bookings_Backlog_Tab(i).BTB_CHANGE :=NULL;
     ELSE
        l_Total_Bookings_Backlog_Tab(i).BTB_CHANGE :=
            (l_Total_Bookings_Backlog_Tab(i).BTB_TOTAL_BOOKINGS/
                l_Total_Bookings_Backlog_Tab(i).BTB_REVENUE) -
                (l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_TOTAL_BOOKINGS/
                 l_Total_Bookings_Backlog_Tab(i).PRIOR_BTB_REVENUE);
END IF;
END LOOP;

IF p_View_By='OG' THEN
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_BOOKINGS
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_BOOKINGS,0)
                - x_Total_Bookings;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_BOOKINGS
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_BOOKINGS,0)
                - x_Prior_Total_Bookings;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_ENDING_BACKLOG
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_ENDING_BACKLOG,0)
                - x_Total_Ending_Backlog;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_ENDING_BACKLOG
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_ENDING_BACKLOG, 0)
                - x_Prior_Total_Ending_Backlog;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_TOTAL_BOOKINGS
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_TOTAL_BOOKINGS,0)
                - x_BTB_Total_Bookings;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE,0)
                - x_BTB_Revenue;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_TOTAL_BOOKINGS
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_TOTAL_BOOKINGS,0)
                - x_Prior_BTB_Total_Bookings;
   l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE
        :=   NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE,0)
                - x_Prior_BTB_Revenue;

IF NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_BOOKINGS, 0)=0 THEN
         l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BOOKINGS_CHANGE:= NULL;
    ELSE
       l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BOOKINGS_CHANGE:=
           ((l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_BOOKINGS
                   -l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_BOOKINGS)
                   /ABS(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_BOOKINGS))*100;
END IF;

IF
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_ENDING_BACKLOG, 0)=0 THEN
        l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BACKLOG_CHANGE :=NULL;
        ELSE
        l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BACKLOG_CHANGE :=
        ((l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_ENDING_BACKLOG
                -l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_ENDING_BACKLOG)
            /ABS(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_ENDING_BACKLOG))*100;
END IF;

IF
       l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE=0 THEN
            l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_RATIO :=NULL;
            l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).CURRENT_YEAR_BTB_RATIO:=NULL;
     ELSE
        l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_RATIO :=
            l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_TOTAL_BOOKINGS/
                l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE;
        l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).CURRENT_YEAR_BTB_RATIO:=
                l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_TOTAL_BOOKINGS/
                l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE;

END IF;
IF
      l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE =0 THEN
       l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_YEAR_BTB_RATIO:= NULL;
        ELSE
       l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_YEAR_BTB_RATIO:=
               l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_TOTAL_BOOKINGS/
               l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE;
END IF;

IF
     NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE, 0)=0
        OR  l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE=0 THEN
            l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_CHANGE :=NULL;
     ELSE
        l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_CHANGE :=
            (l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_TOTAL_BOOKINGS/
                l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE) -
                (l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_TOTAL_BOOKINGS/
                 l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE);
END IF;

    IF
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_BOOKINGS, 0)=0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_BOOKINGS, 0)=0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).TOTAL_ENDING_BACKLOG, 0)=0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_TOTAL_ENDING_BACKLOG, 0)=0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_TOTAL_BOOKINGS, 0)=0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).BTB_REVENUE, 0) =0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_TOTAL_BOOKINGS, 0)=0 AND
        NVL(l_Total_Bookings_Backlog_Tab(l_Top_Org_Index).PRIOR_BTB_REVENUE, 0)=0
    THEN
        l_Total_Bookings_Backlog_Tab.DELETE(l_Top_Org_Index);
    END IF;

        x_Total_Bookings             := l_Total_Bookings;
        x_Prior_Total_Bookings       := l_Prior_Total_Bookings;
        x_Total_Ending_Backlog       := l_Total_Ending_Backlog;
        x_Prior_Total_Ending_Backlog := l_Prior_Total_Ending_Backlog;
        x_BTB_Total_Bookings         := l_BTB_Total_Bookings;
        x_BTB_Revenue                := l_BTB_Revenue;
        x_Prior_BTB_Total_Bookings   := l_Prior_BTB_Total_Bookings;
        x_Prior_BTB_Revenue          := l_Prior_BTB_Revenue;

END IF;

	/*
	** Calculating Grand Total based on the values in
	** the bulk collected pl/sql table.
	*/

IF l_Total_Bookings_Backlog_Tab.COUNT > 0 THEN
FOR i IN l_Total_Bookings_Backlog_Tab.FIRST..l_Total_Bookings_Backlog_Tab.LAST
LOOP
  IF l_Total_Bookings_Backlog_Tab.EXISTS(i) THEN

	l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_1:=x_Total_Bookings;
        l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_7:=x_Prior_Total_Bookings;
        l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_3:=x_Total_Ending_Backlog;
        l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_8:=x_Prior_Total_Ending_Backlog;

           IF NVL(x_Prior_BTB_Revenue,0) > 0 THEN
		 l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_16:=
                  x_Prior_BTB_Total_Bookings/x_Prior_BTB_Revenue;

           ELSE
           l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_16:=NULL;
        END IF;

           IF x_Prior_Total_Bookings <> 0 AND x_Prior_Total_Bookings IS NOT NULL THEN
               l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_2:=
                 (x_Total_Bookings - x_Prior_Total_Bookings)*100/abs(x_Prior_Total_Bookings);
           ELSE   l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_2:=NULL;
           END IF;

           l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_3:=x_Total_Ending_Backlog;

           IF
             x_Prior_Total_Ending_Backlog<>0 AND x_Prior_Total_Ending_Backlog IS NOT NULL THEN
               l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_4:=
                  (x_Total_Ending_Backlog - x_Prior_Total_Ending_Backlog)*100
                   /abs(x_Prior_Total_Ending_Backlog);
           ELSE
                   l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_4:=NULL;

           END IF;

   	   IF x_BTB_Revenue >0 AND x_BTB_Revenue IS NOT NULL THEN
			l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_5:=
                           x_BTB_Total_Bookings/x_BTB_Revenue;
 	   ELSE
	             l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_5:=NULL;
 	   END IF;

	   IF NVL(x_Prior_BTB_Revenue,0) > 0 AND NVL(x_BTB_Revenue, 0) >0 THEN
		 l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_6:=
                  x_BTB_Total_Bookings/x_BTB_Revenue -
                     x_Prior_BTB_Total_Bookings/x_Prior_BTB_Revenue;
           ELSE
           l_Total_Bookings_Backlog_Tab(i).PJI_REP_TOTAL_6:=NULL;
           END IF;


  END IF;
END LOOP;
END IF;
	/*
	** Return the bulk collected table back to pmv.
	*/

	COMMIT;
 RETURN l_Total_Bookings_Backlog_Tab;
END PLSQLDriver_PJI_REP_PBB1;

/*
** ----------------------------------------------------------
** FUNCTION: PLSQLDRIVER_PJI_REP_PBB2
** THIS TABLE FUNCTION IS CALLED FROM SELECT STATEMENT
** GENERATED BY PJI ENGINE. THE FUNCTION RETURNS PL/SQL TABLE
** OF RECORDS WHICH HAVE TO BE DISPLAYED IN THE PMV REPORT.
** FOLLOWING ARE THE REPORTS TO WHICH THIS FUNCTION CATERS:
** 1. PJI_REP_PBB2 - PROJECT BOOKINGS & BACKLOG SUMMARY
** 2. PJI_REP_PBB4 - PROJECT BOOKINGS & BACKLOG SUMMARY
** ----------------------------------------------------------
*/

   FUNCTION PLSQLDRIVER_PJI_REP_PBB2 (
      P_OPERATING_UNIT        IN   VARCHAR2 DEFAULT NULL,
      P_ORGANIZATION          IN   VARCHAR2,
      P_CURRENCY_TYPE         IN   VARCHAR2,
      P_AS_OF_DATE            IN   NUMBER,
      P_PERIOD_TYPE           IN   VARCHAR2,
      P_VIEW_BY               IN   VARCHAR2,
      P_CLASSIFICATIONS       IN   VARCHAR2 DEFAULT NULL,
      P_CLASS_CODES           IN   VARCHAR2 DEFAULT NULL,
      P_RUN_REVENUE_AT_RISK   IN   VARCHAR2 DEFAULT 'N'
   )
      RETURN PJI_REP_PBB2_TBL
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      L_TOTAL_BOOKINGS_BACKLOG_TAB   PJI_REP_PBB2_TBL := PJI_REP_PBB2_TBL ();
      X_TOTAL_BOOKINGS_BACKLOG_TAB   PJI_REP_PBB2_TBL := PJI_REP_PBB2_TBL ();
      L_PARSE_CLASS_CODES            VARCHAR2 (1);
      L_REORG_ROWCOUNT               NUMBER;
      L_ACTUAL_ROWCOUNT              NUMBER;


        l_beginning_backlog     NUMBER:=0;
        l_total_ending_backlog  NUMBER:=0;
        l_backlog_not_started   NUMBER:=0;
        l_active_backlog        NUMBER:=0;
        l_dormant_backlog       NUMBER:=0;
        l_xtd_orig_bkng_amt     NUMBER:=0;
        l_xtd_addt_bkng_amt     NUMBER:=0;
        l_xtd_adjt_bkng_amt     NUMBER:=0;
        l_xtd_canc_bkng_amt     NUMBER:=0;
        l_total_bookings_amount NUMBER:=0;
        l_total_bookings_amount_itd  NUMBER:=0;
        l_xtd_revenue           NUMBER:=0;
        l_lost_backlog          NUMBER:=0;
        l_revenue_at_risk       NUMBER:=0;
	l_curr_record_type_id   NUMBER := 1;

   BEGIN
      /*
      ** PLACE A CALL TO ALL THE PARSE API'S WHICH PARSE THE
      ** PARAMETERS PASSED BY PMV AND POPULATE ALL THE
      ** TEMPORARY TABLES.
      */
      PJI_PMV_ENGINE.CONVERT_OPERATING_UNIT (
         P_OPERATING_UNIT_IDS=> P_OPERATING_UNIT,
         P_VIEW_BY=> P_VIEW_BY
      );
      PJI_PMV_ENGINE.CONVERT_ORGANIZATION (
         P_TOP_ORGANIZATION_ID=> P_ORGANIZATION,
         P_VIEW_BY=> P_VIEW_BY
      );
      PJI_PMV_ENGINE.CONVERT_TIME (
         P_AS_OF_DATE=> P_AS_OF_DATE,
         P_PERIOD_TYPE=> P_PERIOD_TYPE,
         P_VIEW_BY=> P_VIEW_BY,
         P_PARSE_PRIOR=> 'N',
         P_REPORT_TYPE=> NULL,
         P_COMPARATOR=> NULL,
         P_PARSE_ITD=> 'Y'
      );


      l_curr_record_type_id:=PJI_PMV_ENGINE.Convert_Currency_Record_Type(p_Currency_Type);


      /*
      ** DETERMINE THE FACT TABLES YOU CHOOSE TO RUN THE DATABASE
      ** QUERY ON ( THIS STEP IS WHAT WE CALL MANUAL QUERY RE-WRITE).
      */

      IF PJI_PMV_ENGINE.CONVERT_CLASSIFICATION (
            P_CLASSIFICATIONS,
            P_CLASS_CODES,
            P_VIEW_BY
         ) = 'N'
      THEN
         /*
         ** CODE THE SQL STATEMENT FOR ALL OF THE FOLLOWING CONDITIONS
         ** 1. CURRENT YEAR
         ** 2. PRIOR YEAR
         ** 3. SQL TO GENERATE ROWS WITH ZERO'S FOR THE VIEW BY DIMENSION
         ** BULK-COLLECT THE OUTPUT INTO A PL/SQL TABLE TO BE RETURNED TO
         ** PMV.
         */

         SELECT   PJI_REP_PBB2 (PROJECT_ID,
                     PROJECT_NAME,
                     PROJECT_NUMBER,
		     PJI_PMV_UTIL.Drill_To_Proj_Perf_URL(PROJECT_ID, l_curr_record_type_id, p_As_Of_Date,p_Period_Type),
		     PRIMARY_CUSTOMER,
                     PROJECT_TYPE,
                     ORGANIZATION,
                     PROJECT_MANAGER,
                     TRUNC (PROJECT_START_DATE),
                     TRUNC (PROJECT_CLOSE_DATE),
                     SUM (ORIGINAL_BOOKINGS_AMOUNT),
                     SUM (ADDITIONAL_BOOKINGS_AMOUNT),
                     SUM (ADJUSTMENT_BOOKINGS_AMOUNT),
                     -SUM (CANCELLED_BOOKINGS_AMOUNT),
                     SUM (REVENUE),
                     0,
                     SUM (ITD_ORIGINAL_BOOKINGS_AMOUNT),
                     SUM (ITD_ADDITIONAL_BOOKINGS_AMOUNT),
                     SUM (ITD_ADJUSTMENT_BOOKINGS_AMOUNT),
                     -SUM (ITD_CANCELLED_BOOKINGS_AMOUNT),
                     SUM (ITD_REVENUE),
                     0,
                     SUM (BACKLOG_NOT_STARTED),
                     SUM (ACTIVE_BACKLOG),
                     SUM (DORMANT_BACKLOG),
                     SUM (BEGINNING_BACKLOG),
                     SUM (LOST_BACKLOG),
                     SUM (
                          BACKLOG_NOT_STARTED
                        + ACTIVE_BACKLOG
                        + DORMANT_BACKLOG),
                     SUM (REVENUE_AT_RISK),
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0)
             BULK COLLECT INTO L_TOTAL_BOOKINGS_BACKLOG_TAB
             FROM (SELECT /*+ NO_MERGE(FCT) */
	                  FCT.PROJECT_ID,
                          NULL  PROJECT_NAME,
                          FCT.PROJECT_ID        PROJECT_NUMBER,
                          NULL PRIMARY_CUSTOMER,
                          NULL PROJECT_TYPE,
                          FCT.ORGANIZATION_ID ORGANIZATION,
                          NULL PROJECT_MANAGER,
                          NULL PROJECT_START_DATE,
                          NULL PROJECT_CLOSE_DATE,
                          FCT.ORIGINAL_BOOKINGS_AMOUNT          ORIGINAL_BOOKINGS_AMOUNT,
                          FCT.ADDITIONAL_BOOKINGS_AMOUNT        ADDITIONAL_BOOKINGS_AMOUNT,
                          FCT.ADJUSTMENT_BOOKINGS_AMOUNT        ADJUSTMENT_BOOKINGS_AMOUNT,
                          FCT.CANCELLED_BOOKINGS_AMOUNT         CANCELLED_BOOKINGS_AMOUNT,
                          FCT.REVENUE                           REVENUE,
                          0,
                          FCT.ITD_ORIGINAL_BOOKINGS_AMOUNT      ITD_ORIGINAL_BOOKINGS_AMOUNT,
                          FCT.ITD_ADDITIONAL_BOOKINGS_AMOUNT    ITD_ADDITIONAL_BOOKINGS_AMOUNT,
                          FCT.ITD_ADJUSTMENT_BOOKINGS_AMOUNT    ITD_ADJUSTMENT_BOOKINGS_AMOUNT,
                          FCT.ITD_CANCELLED_BOOKINGS_AMOUNT     ITD_CANCELLED_BOOKINGS_AMOUNT,
                          FCT.ITD_REVENUE                       ITD_REVENUE,
                          0,
                          FCT.BACKLOG_NOT_STARTED               BACKLOG_NOT_STARTED,
                          FCT.DORMANT_BACKLOG                   DORMANT_BACKLOG,
                          FCT.ACTIVE_BACKLOG                    ACTIVE_BACKLOG,
                          FCT.BEGINNING_BACKLOG                 BEGINNING_BACKLOG,
                          FCT.LOST_BACKLOG                      LOST_BACKLOG,
                          FCT.REVENUE_AT_RISK                   REVENUE_AT_RISK,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                     0,
                     0,
                     0,
                     0,
                          0,
                          0,
                          0,
                          0
                     FROM (SELECT /*+ ORDERED */
                                  FCT.PROJECT_ID PROJECT_ID,
                                  FCT.PROJECT_ORGANIZATION_ID		ORGANIZATION_ID,
                                  FCT.INITIAL_FUNDING_AMOUNT        ORIGINAL_BOOKINGS_AMOUNT,
                                  FCT.ADDITIONAL_FUNDING_AMOUNT     ADDITIONAL_BOOKINGS_AMOUNT,
                                  FCT.FUNDING_ADJUSTMENT_AMOUNT     ADJUSTMENT_BOOKINGS_AMOUNT,
                                  FCT.CANCELLED_FUNDING_AMOUNT      CANCELLED_BOOKINGS_AMOUNT,
                                  FCT.REVENUE                       REVENUE,
                                  0,
                                  0         ITD_ORIGINAL_BOOKINGS_AMOUNT,
                                  0         ITD_ADDITIONAL_BOOKINGS_AMOUNT,
                                  0         ITD_ADJUSTMENT_BOOKINGS_AMOUNT,
                                  0         ITD_CANCELLED_BOOKINGS_AMOUNT,
                                  0         ITD_REVENUE,
                                  0,
                                  0         BACKLOG_NOT_STARTED,
                                  0         DORMANT_BACKLOG,
                                  0         ACTIVE_BACKLOG,
                                  -(NVL(DORMANT_BACKLOG_START
                                    + DORMANT_BACKLOG_INACTIV
                                    + ACTIVE_BACKLOG, 0))    BEGINNING_BACKLOG,
                                  0         LOST_BACKLOG,
                                  0         REVENUE_AT_RISK,
                                  0,
                                  0,
                                  0,
                                  0,
                     0,
                     0,
                     0,
                     0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0
                            FROM PJI_PMV_TIME_DIM_TMP TIME,
                                  PJI_PMV_ORGZ_DIM_TMP TORG,
                                  PJI_AC_PROJ_F FCT,
                                  PJI_PMV_ORG_DIM_TMP TOU
                               WHERE FCT.PROJECT_ORG_ID = TOU.ID
                              AND FCT.TIME_ID = TIME.ID
			      AND TIME.ID IS NOT NULL
                              AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                              AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                              AND FCT.PROJECT_ORGANIZATION_ID = TORG.ID
                              AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
                           UNION ALL
                           SELECT /*+ ORDERED */
                                  FCT.PROJECT_ID PROJECT_ID,
                                  FCT.PROJECT_ORGANIZATION_ID ORGANIZATION_ID,
                                  0 ORIGINAL_BOOKINGS_AMOUNT,
                                  0 ADDITIONAL_BOOKINGS_AMOUNT,
                                  0 ADJUSTMENT_BOOKINGS_AMOUNT,
                                  0 CANCELLED_BOOKINGS_AMOUNT,
                                  0 REVENUE,
                                  0,
                                  FCT.INITIAL_FUNDING_AMOUNT        ITD_ORIGINAL_BOOKINGS_AMOUNT,
                                  FCT.ADDITIONAL_FUNDING_AMOUNT     ITD_ADDITIONAL_BOOKINGS_AMOUNT,
                                  FCT.FUNDING_ADJUSTMENT_AMOUNT     ITD_ADJUSTMENT_BOOKINGS_AMOUNT,
                                  FCT.CANCELLED_FUNDING_AMOUNT      ITD_CANCELLED_BOOKINGS_AMOUNT,
                                  FCT.REVENUE                       ITD_REVENUE,
                                  0,
                                  DORMANT_BACKLOG_START             BACKLOG_NOT_STARTED,
                                  DORMANT_BACKLOG_INACTIV           DORMANT_BACKLOG,
                                  ACTIVE_BACKLOG                    ACTIVE_BACKLOG,
                                  NVL(DORMANT_BACKLOG_START
                                    + DORMANT_BACKLOG_INACTIV
                                    + ACTIVE_BACKLOG,0)             BEGINNING_BACKLOG,
                                  LOST_BACKLOG                      LOST_BACKLOG,
                                  REVENUE_AT_RISK                   REVENUE_AT_RISK,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                     0,
                     0,
                     0,
                     0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0
                             FROM PJI_PMV_ITD_DIM_TMP TIME,
                                  PJI_PMV_ORGZ_DIM_TMP TORG,
                            	  PJI_AC_PROJ_F FCT,
                            	  PJI_PMV_ORG_DIM_TMP TOU
                            WHERE FCT.PROJECT_ORG_ID = TOU.ID
                              AND FCT.TIME_ID = TIME.ID
			      AND TIME.ID IS NOT NULL
                              AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                              AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                              AND FCT.PROJECT_ORGANIZATION_ID = TORG.ID
                              AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id) FCT
                    WHERE 1 = 1) FCT
         GROUP BY PROJECT_ID,
	          PROJECT_NAME,
                  PROJECT_NUMBER,
                  PRIMARY_CUSTOMER,
                  PROJECT_TYPE,
                  ORGANIZATION,
                  PROJECT_MANAGER,
                  PROJECT_START_DATE,
                  PROJECT_CLOSE_DATE;
      ELSE
        BEGIN
                DELETE pji_pmv_prj_dim_tmp;
                INSERT INTO pji_pmv_prj_dim_tmp (id, name)
                SELECT DISTINCT prj.project_id, '-1' name
                FROM
                pji_project_classes PJM
                , pji_pmv_cls_dim_tmp PTM
                , pji_pmv_orgz_dim_tmp org
                , pa_projects_all prj
                WHERE
                pjm.project_class_id = ptm.id
                AND prj.project_id = pjm.project_id
                AND prj.carrying_out_organization_id = org.ID;
         END;

         SELECT   PJI_REP_PBB2 (PROJECT_ID,
                     PROJECT_NAME,
                     PROJECT_NUMBER,
		     PJI_PMV_UTIL.Drill_To_Proj_Perf_URL(PROJECT_ID, l_curr_record_type_id, p_As_Of_Date,p_Period_Type),
		     PRIMARY_CUSTOMER,
                     PROJECT_TYPE,
                     ORGANIZATION,
                     PROJECT_MANAGER,
                     TRUNC (PROJECT_START_DATE),
                     TRUNC (PROJECT_CLOSE_DATE),
                     SUM (ORIGINAL_BOOKINGS_AMOUNT),
                     SUM (ADDITIONAL_BOOKINGS_AMOUNT),
                     SUM (ADJUSTMENT_BOOKINGS_AMOUNT),
                     -SUM (CANCELLED_BOOKINGS_AMOUNT),
                     SUM (REVENUE),
                     0,
                     SUM (ITD_ORIGINAL_BOOKINGS_AMOUNT),
                     SUM (ITD_ADDITIONAL_BOOKINGS_AMOUNT),
                     SUM (ITD_ADJUSTMENT_BOOKINGS_AMOUNT),
                     -SUM (ITD_CANCELLED_BOOKINGS_AMOUNT),
                     SUM (ITD_REVENUE),
                     0,
                     SUM (BACKLOG_NOT_STARTED),
                     SUM (ACTIVE_BACKLOG),
                     SUM (DORMANT_BACKLOG),
                     SUM (BEGINNING_BACKLOG),
                     SUM (LOST_BACKLOG),
                     SUM (
                          BACKLOG_NOT_STARTED
                        + ACTIVE_BACKLOG
                        + DORMANT_BACKLOG
                            ),
                     SUM (REVENUE_AT_RISK),
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0 )
             BULK COLLECT INTO L_TOTAL_BOOKINGS_BACKLOG_TAB
             FROM (SELECT /*+ NO_MERGE(FCT) */
	                  FCT.PROJECT_ID,
                          NULL PROJECT_NAME,
                          FCT.PROJECT_ID PROJECT_NUMBER,
                          NULL PRIMARY_CUSTOMER,
                          NULL PROJECT_TYPE,
                          FCT.ORGANIZATION_ID  ORGANIZATION,
                          NULL PROJECT_MANAGER,
                          NULL PROJECT_START_DATE,
                          NULL PROJECT_CLOSE_DATE,
                          FCT.ORIGINAL_BOOKINGS_AMOUNT           ORIGINAL_BOOKINGS_AMOUNT,
                          FCT.ADDITIONAL_BOOKINGS_AMOUNT         ADDITIONAL_BOOKINGS_AMOUNT,
                          FCT.ADJUSTMENT_BOOKINGS_AMOUNT         ADJUSTMENT_BOOKINGS_AMOUNT,
                          FCT.CANCELLED_BOOKINGS_AMOUNT          CANCELLED_BOOKINGS_AMOUNT,
                          FCT.REVENUE REVENUE,
                          0,
                          FCT.ITD_ORIGINAL_BOOKINGS_AMOUNT       ITD_ORIGINAL_BOOKINGS_AMOUNT,
                          FCT.ITD_ADDITIONAL_BOOKINGS_AMOUNT     ITD_ADDITIONAL_BOOKINGS_AMOUNT,
                          FCT.ITD_ADJUSTMENT_BOOKINGS_AMOUNT     ITD_ADJUSTMENT_BOOKINGS_AMOUNT,
                          FCT.ITD_CANCELLED_BOOKINGS_AMOUNT      ITD_CANCELLED_BOOKINGS_AMOUNT,
                          FCT.ITD_REVENUE                        ITD_REVENUE,
                          0,
                          FCT.BACKLOG_NOT_STARTED      BACKLOG_NOT_STARTED,
                          FCT.DORMANT_BACKLOG          DORMANT_BACKLOG,
                          FCT.ACTIVE_BACKLOG           ACTIVE_BACKLOG,
                          FCT.BEGINNING_BACKLOG        BEGINNING_BACKLOG,
                          FCT.LOST_BACKLOG             LOST_BACKLOG,
                          FCT.REVENUE_AT_RISK          REVENUE_AT_RISK,
                          0,
                          0,
                          0,
                          0,
                          0,
                     0,
                     0,
                     0,
                     0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM (SELECT /*+ ORDERED */
                                  FCT.PROJECT_ID PROJECT_ID,
                                  FCT.PROJECT_ORGANIZATION_ID ORGANIZATION_ID,
                                  FCT.INITIAL_FUNDING_AMOUNT
                                        ORIGINAL_BOOKINGS_AMOUNT,
                                  FCT.ADDITIONAL_FUNDING_AMOUNT
                                        ADDITIONAL_BOOKINGS_AMOUNT,
                                  FCT.FUNDING_ADJUSTMENT_AMOUNT
                                        ADJUSTMENT_BOOKINGS_AMOUNT,
                                  FCT.CANCELLED_FUNDING_AMOUNT
                                        CANCELLED_BOOKINGS_AMOUNT,
                                  FCT.REVENUE REVENUE,
                                  0,
                                  0 ITD_ORIGINAL_BOOKINGS_AMOUNT,
                                  0 ITD_ADDITIONAL_BOOKINGS_AMOUNT,
                                  0 ITD_ADJUSTMENT_BOOKINGS_AMOUNT,
                                  0 ITD_CANCELLED_BOOKINGS_AMOUNT,
                                  0 ITD_REVENUE,
                                  0,
                                  0 BACKLOG_NOT_STARTED,
                                  0 DORMANT_BACKLOG,
                                  0 ACTIVE_BACKLOG,
                                  -(NVL(DORMANT_BACKLOG_START
                                    + DORMANT_BACKLOG_INACTIV
                                    + ACTIVE_BACKLOG, 0))       BEGINNING_BACKLOG,
                                  0 LOST_BACKLOG,
                                  0 REVENUE_AT_RISK,
                                  0,
                                  0,
                                  0,
                                  0,
                     0,
                     0,
                     0,
                     0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0
                             FROM PJI_PMV_TIME_DIM_TMP TIME,
                             	  PJI_PMV_PRJ_DIM_TMP TPRJ,
                                  PJI_AC_PROJ_F FCT,
                                  PJI_PMV_ORG_DIM_TMP TOU
                            WHERE FCT.PROJECT_ORG_ID = TOU.ID
                              AND FCT.TIME_ID = TIME.ID
							  AND TIME.ID IS NOT NULL
                              AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                              AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                              AND FCT.PROJECT_ID = TPRJ.ID
                              AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
                           UNION ALL
                           SELECT /*+ ORDERED */
                                  FCT.PROJECT_ID PROJECT_ID,
                                  FCT.PROJECT_ORGANIZATION_ID ORGANIZATION_ID,
                                  0 ORIGINAL_BOOKINGS_AMOUNT,
                                  0 ADDITIONAL_BOOKINGS_AMOUNT,
                                  0 ADJUSTMENT_BOOKINGS_AMOUNT,
                                  0 CANCELLED_BOOKINGS_AMOUNT,
                                  0 REVENUE,
                                  0 XTD_TOTAL_BOOKINGS,
                                  FCT.INITIAL_FUNDING_AMOUNT        ITD_ORIGINAL_BOOKINGS_AMOUNT,
                                  FCT.ADDITIONAL_FUNDING_AMOUNT     ITD_ADDITIONAL_BOOKINGS_AMOUNT,
                                  FCT.FUNDING_ADJUSTMENT_AMOUNT     ITD_ADJUSTMENT_BOOKINGS_AMOUNT,
                                  FCT.CANCELLED_FUNDING_AMOUNT      ITD_CANCELLED_BOOKINGS_AMOUNT,
                                  FCT.REVENUE                       ITD_REVENUE,
                                  0,
                                  DORMANT_BACKLOG_START BACKLOG_NOT_STARTED,
                                  DORMANT_BACKLOG_INACTIV           DORMANT_BACKLOG,
                                  ACTIVE_BACKLOG                    ACTIVE_BACKLOG,
                                  NVL(DORMANT_BACKLOG_START
                                    + DORMANT_BACKLOG_INACTIV
                                    + ACTIVE_BACKLOG, 0)            BEGINNING_BACKLOG,
                                  LOST_BACKLOG                      LOST_BACKLOG,
                                  REVENUE_AT_RISK                   REVENUE_AT_RISK,
                                  0,
                                  0,
                                  0,
                     0,
                     0,
                     0,
                     0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0
                            FROM PJI_PMV_ITD_DIM_TMP TIME,
                                  PJI_PMV_PRJ_DIM_TMP TPRJ,
                                  PJI_AC_PROJ_F FCT,
                                  PJI_PMV_ORG_DIM_TMP TOU
                            WHERE FCT.PROJECT_ORG_ID = TOU.ID
                              AND FCT.TIME_ID = TIME.ID
							  AND TIME.ID IS NOT NULL
                              AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                              AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                              AND FCT.PROJECT_ID = TPRJ.ID
                              AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id) FCT
                    WHERE 1 = 1) FCT
         GROUP BY PROJECT_ID,
	 	  PROJECT_NAME,
                  PROJECT_NUMBER,
                  PRIMARY_CUSTOMER,
                  PROJECT_TYPE,
                  ORGANIZATION,
                  PROJECT_MANAGER,
                  PROJECT_START_DATE,
                  PROJECT_CLOSE_DATE;
      END IF;

      /*
      ** IF THE REPORT IS REQUESTED FOR REVENUE AT RISK
      ** RECORDS ONLY, DELETE THE RECORDS WITH REVENUE AT RISK
      ** LESS THAN EQUAL TO ZERO.
      ** THE PL/SQL APPROACH WAS CHOOSEN BECAUSE OF PERFORMANCE
      ** REASONS.
      */
      IF P_RUN_REVENUE_AT_RISK = 'Y'
      THEN
         IF L_TOTAL_BOOKINGS_BACKLOG_TAB.COUNT > 0
         THEN
            FOR I IN
                L_TOTAL_BOOKINGS_BACKLOG_TAB.FIRST .. L_TOTAL_BOOKINGS_BACKLOG_TAB.LAST
            LOOP
               IF L_TOTAL_BOOKINGS_BACKLOG_TAB (I).REVENUE_AT_RISK <= 0
               THEN
                  L_TOTAL_BOOKINGS_BACKLOG_TAB.DELETE (I);
               END IF;
            END LOOP;
         END IF;
      END IF;

      /*
      ** THE FOLLOWING LOGIC IS CODED AS PL/SQL WOULD
      ** NOT RE-ORGANIZE THE TABLE OF RECORDS
      ** AFTER THE DELETE OPERATION.
      */
      L_ACTUAL_ROWCOUNT := L_TOTAL_BOOKINGS_BACKLOG_TAB.FIRST;
      L_REORG_ROWCOUNT := 1;

      WHILE L_ACTUAL_ROWCOUNT <= L_TOTAL_BOOKINGS_BACKLOG_TAB.LAST
      LOOP
         X_TOTAL_BOOKINGS_BACKLOG_TAB.EXTEND;
         X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT) :=
                             L_TOTAL_BOOKINGS_BACKLOG_TAB (L_ACTUAL_ROWCOUNT);
         /*
         ** PLACE A CALL TO THE PA API'S TO GET THE PRIMARY
         ** CUSTOMER NAME AND PROJECT MANAGER NAME.
         */
         X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PRIMARY_CUSTOMER :=
               PA_PROJECTS_MAINT_UTILS.GET_PRIMARY_CUSTOMER_NAME (
                  X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_NUMBER
               );
         X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_MANAGER :=
               PA_PROJECTS_MAINT_UTILS.GET_PROJECT_MANAGER_NAME (
                  X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_NUMBER
               );

         /*
         ** FETCH THE PROJECT ATTRIBUTES.
         */

         SELECT NAME,
                SEGMENT1,
                PROJECT_TYPE,
                START_DATE,
                CLOSED_DATE
           INTO X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_NAME,
                X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_NUMBER,
                X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_TYPE,
                X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_START_DATE,
                X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_CLOSE_DATE
           FROM PA_PROJECTS_ALL
          WHERE PROJECT_ID =
                      X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).PROJECT_NUMBER;

         /*
         ** FETCH THE ORGANIZATION NAME.
         */
         SELECT NAME
           INTO X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).ORGANIZATION
           FROM HR_ALL_ORGANIZATION_UNITS_TL
          WHERE LANGUAGE = USERENV ('LANG')
            AND ORGANIZATION_ID =
                      X_TOTAL_BOOKINGS_BACKLOG_TAB (L_REORG_ROWCOUNT).ORGANIZATION;

         /*
         ** INCREMENT ALL THE COUNTER VARIABLES.
         */
         L_ACTUAL_ROWCOUNT :=
                        L_TOTAL_BOOKINGS_BACKLOG_TAB.NEXT (L_ACTUAL_ROWCOUNT);
         L_REORG_ROWCOUNT :=   L_REORG_ROWCOUNT
                             + 1;
      END LOOP;

FOR i in 1..X_TOTAL_BOOKINGS_BACKLOG_TAB.COUNT
   LOOP
        X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_TOTAL_BOOKINGS:=
            X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_ORIG_BKNG_AMT
        +   X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_ADDT_BKNG_AMT
        +   X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_ADJT_BKNG_AMT
        -   X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_CANC_BKNG_AMT;

        X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ITD_TOTAL_BOOKINGS:=
            X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ITD_ORIG_BKNG_AMT
        +   X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ITD_ADDT_BKNG_AMT
        +   X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ITD_ADJT_BKNG_AMT
        -   X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ITD_CANC_BKNG_AMT;
END LOOP;

/*
** Calculation of Grand Totals
*/

FOR i in 1..X_TOTAL_BOOKINGS_BACKLOG_TAB.COUNT
    LOOP
       l_beginning_backlog:=l_beginning_backlog
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).BEGINNING_BACKLOG,0);
       l_xtd_orig_bkng_amt :=l_xtd_orig_bkng_amt
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_ORIG_BKNG_AMT,0);
       l_xtd_addt_bkng_amt :=l_xtd_addt_bkng_amt
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_ADDT_BKNG_AMT,0);
       l_xtd_adjt_bkng_amt:= l_xtd_adjt_bkng_amt
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_ADJT_BKNG_AMT,0);
       l_xtd_canc_bkng_amt:=l_xtd_canc_bkng_amt
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_CANC_BKNG_AMT,0);
       l_xtd_revenue := l_xtd_revenue
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_REVENUE,0);
       l_total_bookings_amount :=l_total_bookings_amount
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).XTD_TOTAL_BOOKINGS,0);
       l_total_bookings_amount_itd :=l_total_bookings_amount_itd
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ITD_TOTAL_BOOKINGS,0);
       l_backlog_not_started :=l_backlog_not_started
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).BACKLOG_NOT_STARTED,0);
       l_active_backlog :=l_active_backlog
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).ACTIVE_BACKLOG,0);
       l_dormant_backlog :=l_dormant_backlog
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).DORMANT_BACKLOG,0);
       l_total_ending_backlog :=l_total_ending_backlog
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).TOTAL_ENDING_BACKLOG,0);
       l_lost_backlog :=l_lost_backlog
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).LOST_BACKLOG,0);
       l_revenue_at_risk :=l_revenue_at_risk
                + NVL(X_TOTAL_BOOKINGS_BACKLOG_TAB(i).REVENUE_AT_RISK,0);
 END LOOP;

FOR i in 1..X_TOTAL_BOOKINGS_BACKLOG_TAB.COUNT
      LOOP
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_1:=l_xtd_orig_bkng_amt;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_2:=l_xtd_addt_bkng_amt;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_3:=l_total_bookings_amount;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_4:=l_total_bookings_amount_itd;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_5:=l_backlog_not_started;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_6:=l_active_backlog;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_7:=l_dormant_backlog;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_8:=l_total_ending_backlog;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_9:=l_lost_backlog;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_10:=l_revenue_at_risk;

                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_11:=l_xtd_adjt_bkng_amt;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_12:=l_xtd_canc_bkng_amt;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_13:=l_xtd_revenue;
                    X_TOTAL_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_14:=l_beginning_backlog;

    END LOOP;
   COMMIT;
  RETURN X_TOTAL_BOOKINGS_BACKLOG_TAB;
END PLSQLDRIVER_PJI_REP_PBB2;

/*
** ----------------------------------------------------------
** FUNCTION: PLSQLDRIVER_PJI_REP_PBB3
** THIS TABLE FUNCTION IS CALLED FROM SELECT STATEMENT
** GENERATED BY PJI ENGINE. THE FUNCTION RETURNS PL/SQL TABLE
** OF RECORDS WHICH HAVE TO BE DISPLAYED IN THE PMV REPORT.
** FOLLOWING ARE THE REPORTS TO WHICH THIS FUNCTION CATERS:
** 1. PJI_REP_PBB3 - PROJECT BOOKINGS ACTIVITY
** ----------------------------------------------------------
*/

   FUNCTION PLSQLDRIVER_PBB3 (
      P_OPERATING_UNIT    IN   VARCHAR2 DEFAULT NULL,
      P_ORGANIZATION      IN   VARCHAR2,
      P_CURRENCY_TYPE     IN   VARCHAR2,
      P_AS_OF_DATE        IN   NUMBER,
      P_PERIOD_TYPE       IN   VARCHAR2,
      P_VIEW_BY           IN   VARCHAR2,
      P_CLASSIFICATIONS   IN   VARCHAR2 DEFAULT NULL,
      P_CLASS_CODES       IN   VARCHAR2 DEFAULT NULL
   )
      RETURN PJI_REP_PBB3_TBL
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      L_AC_BOOKINGS_BACKLOG_TAB   PJI_REP_PBB3_TBL := PJI_REP_PBB3_TBL ();
      L_PARSE_CLASS_CODES         VARCHAR2 (1);

      l_Top_Organization_Name VARCHAR2(240);
      l_Top_Org_Index         NUMBER:=0;

        l_Original_Bookings         NUMBER:=0;
        l_Additional_Bookings       NUMBER:=0;
        l_Bookings_Adjustments      NUMBER:=0;
        l_Cancellations             NUMBER:=0;
        l_Total_Net_Bookings        NUMBER:=0;
        l_Accrued_Revenue           NUMBER:=0;
        l_Lost_Backlog              NUMBER:=0;
        l_Lost_Backlog_Itd          NUMBER:=0;
        l_Backlog		    NUMBER:=0;
        l_Backlog_Itd	            NUMBER:=0;
        l_Revenue_At_Risk           NUMBER:=0;
        l_Revenue_At_Risk_Itd       NUMBER:=0;

        l_TO_Original_Bookings         NUMBER:=0;
        l_TO_Additional_Bookings       NUMBER:=0;
        l_TO_Bookings_Adjustments      NUMBER:=0;
        l_TO_Cancellations             NUMBER:=0;
        l_TO_Total_Net_Bookings        NUMBER:=0;
        l_TO_Accrued_Revenue           NUMBER:=0;
        l_TO_Lost_Backlog              NUMBER:=0;
        l_TO_Lost_Backlog_Itd          NUMBER:=0;
        l_TO_Backlog		       NUMBER:=0;
        l_TO_Backlog_Itd	       NUMBER:=0;
        l_TO_Revenue_At_Risk           NUMBER:=0;
        l_TO_Revenue_At_Risk_Itd       NUMBER:=0;
        l_curr_record_type_id           NUMBER := 1;

   BEGIN
      /*
      ** PLACE A CALL TO ALL THE PARSE API'S WHICH PARSE THE
      ** PARAMETERS PASSED BY PMV AND POPULATE ALL THE
      ** TEMPORARY TABLES.
      */


      PJI_PMV_ENGINE.CONVERT_OPERATING_UNIT (P_OPERATING_UNIT, P_VIEW_BY);
      PJI_PMV_ENGINE.Convert_Organization(P_TOP_ORGANIZATION_ID => p_Organization,
                                        	P_VIEW_BY => p_View_BY,
                                        	p_Top_Organization_Name => l_Top_Organization_Name);
      PJI_PMV_ENGINE.CONVERT_TIME (
         P_AS_OF_DATE,
         P_PERIOD_TYPE,
         P_VIEW_BY,
         'Y',
         NULL,
         NULL,
         'Y'
      );

      l_curr_record_type_id:=PJI_PMV_ENGINE.Convert_Currency_Record_Type(p_Currency_Type);

      /*
      ** DETERMINE THE FACT TABLES YOU CHOOSE TO RUN THE DATABASE
      ** QUERY ON ( THIS STEP IS WHAT WE CALL MANUAL QUERY RE-WRITE).
      */
      IF PJI_PMV_ENGINE.CONVERT_CLASSIFICATION (
            P_CLASSIFICATIONS,
            P_CLASS_CODES,
            P_VIEW_BY
         ) = 'N'
      THEN
         /*
         ** CODE THE SQL STATEMENT FOR ALL OF THE FOLLOWING CONDITIONS
         ** 1. CURRENT YEAR
         ** 2. PRIOR YEAR
         ** 3. SQL TO GENERATE ROWS WITH ZERO'S FOR THE VIEW BY DIMENSION
         ** BULK-COLLECT THE OUTPUT INTO A PL/SQL TABLE TO BE RETURNED TO
         ** PMV.
         */
         SELECT   PJI_REP_PBB3 (
                     ORG_ID,
                     ORGANIZATION_ID,
                     TIME_ID,
                     TIME_KEY,
                     PROJECT_CLASS_ID,
                     SUM (ORIGINAL_BOOKINGS),
                     SUM (ADDITIONAL_BOOKINGS),
                     SUM (BOOKINGS_ADJUSTMENTS),
                     -SUM (CANCELLATIONS),
                     SUM (TOTAL_NET_BOOKINGS),
                     SUM (ACCRUED_REVENUE),
                     SUM (LOST_BACKLOG),
                     SUM (LOST_BACKLOG_ITD),
                     SUM (BACKLOG),
                     SUM (BACKLOG_ITD),
                     SUM (REVENUE_AT_RISK),
                     SUM (REVENUE_AT_RISK_ITD),
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0 )
             BULK COLLECT INTO L_AC_BOOKINGS_BACKLOG_TAB
             FROM (SELECT /*+ ORDERED */
                          HOU.NAME ORG_ID, HORG.NAME ORGANIZATION_ID,
                          TIME.NAME TIME_ID,
                          DECODE (P_VIEW_BY, 'TM', TIME.ORDER_BY_ID, -1) TIME_KEY,
                          '-1' PROJECT_CLASS_ID,
                          INITIAL_FUNDING_AMOUNT ORIGINAL_BOOKINGS,
                          ADDITIONAL_FUNDING_AMOUNT ADDITIONAL_BOOKINGS,
                          FUNDING_ADJUSTMENT_AMOUNT BOOKINGS_ADJUSTMENTS,
                          CANCELLED_FUNDING_AMOUNT CANCELLATIONS,
                            INITIAL_FUNDING_AMOUNT
                          + ADDITIONAL_FUNDING_AMOUNT
                          + FUNDING_ADJUSTMENT_AMOUNT
                          + CANCELLED_FUNDING_AMOUNT TOTAL_NET_BOOKINGS,
                          REVENUE ACCRUED_REVENUE, LOST_BACKLOG LOST_BACKLOG,
                          0 LOST_BACKLOG_ITD,
                            DORMANT_BACKLOG_START
                          + DORMANT_BACKLOG_INACTIV
                          + ACTIVE_BACKLOG BACKLOG,
                          0 BACKLOG_ITD, REVENUE_AT_RISK REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_TIME_DIM_TMP TIME,
                          PJI_PMV_ORGZ_DIM_TMP HORG,
                     	  PJI_AC_ORGO_F_MV FCT,
                          PJI_PMV_ORG_DIM_TMP HOU
                     WHERE FCT.ORG_ID = HOU.ID
                      AND FCT.ORGANIZATION_ID = HORG.ID
                      AND FCT.TIME_ID = TIME.ID
					  AND TIME.ID IS NOT NULL
                      AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                      AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                      AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
                   UNION ALL
                   SELECT /*+ ORDERED */
                          HOU.NAME ORG_ID, HORG.NAME ORGANIZATION_ID,
                          TIME.NAME TIME_ID,
                          DECODE (P_VIEW_BY, 'TM', TIME.ORDER_BY_ID, -1) TIME_KEY,
                          '-1' PROJECT_CLASS_ID, 0 ORIGINAL_BOOKINGS,
                          0 ADDITIONAL_BOOKINGS, 0 BOOKINGS_ADJUSTMENTS,
                          0 CANCELLATIONS, 0 TOTAL_NET_BOOKINGS,
                          0 ACCRUED_REVENUE, 0 LOST_BACKLOG,
                          LOST_BACKLOG LOST_BACKLOG_ITD, 0 BACKLOG,
                            DORMANT_BACKLOG_START
                          + DORMANT_BACKLOG_INACTIV
                          + ACTIVE_BACKLOG BACKLOG_ITD,
                          0 REVENUE_AT_RISK,
                          REVENUE_AT_RISK REVENUE_AT_RISK_ITD,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                     FROM PJI_PMV_ITD_DIM_TMP TIME,
                     	  PJI_PMV_ORGZ_DIM_TMP HORG,
                          PJI_AC_ORGO_F_MV FCT,
                    	  PJI_PMV_ORG_DIM_TMP HOU
                    WHERE FCT.ORG_ID = HOU.ID
                      AND FCT.ORGANIZATION_ID = HORG.ID
                      AND FCT.TIME_ID = TIME.ID
					  AND TIME.ID IS NOT NULL
                      AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                      AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                      AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
                   UNION ALL
                   SELECT NAME ORG_ID, '-1' ORGANIZATION_ID, '-1' TIME_ID,
                          -1 TIME_KEY, '-1' PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,0,0,0,0,0,0,0,0,0
                     FROM PJI_PMV_ORG_DIM_TMP
                    WHERE NAME <> '-1'
                   UNION ALL
                   SELECT '-1' ORG_ID, NAME ORGANIZATION_ID, '-1' TIME_ID,
                          -1 TIME_KEY, '-1' PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,0,0,0,0,0,0,0,0,0
                     FROM PJI_PMV_ORGZ_DIM_TMP
                    WHERE NAME <> '-1'
                   UNION ALL
                   SELECT '-1' ORG_ID, '-1' ORGANIZATION_ID, NAME TIME_ID,
                          ID TIME_KEY, '-1' PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,0,0,0,0,0,0,0,0,0
                     FROM PJI_PMV_TIME_DIM_TMP
                    WHERE NAME <> '-1')
         GROUP BY ORG_ID, ORGANIZATION_ID, TIME_KEY, TIME_ID, PROJECT_CLASS_ID;
      ELSE
         /*
         ** CODE THE SQL STATEMENT FOR ALL OF THE FOLLOWING CONDITIONS
         ** 1. CURRENT YEAR
         ** 2. PRIOR YEAR
         ** 3. SQL TO GENERATE ROWS WITH ZERO'S FOR THE VIEW BY DIMENSION
         */
         SELECT   PJI_REP_PBB3 (
                     ORG_ID,
                     ORGANIZATION_ID,
                     TIME_ID,
                     TIME_KEY,
                     PROJECT_CLASS_ID,
                     SUM (ORIGINAL_BOOKINGS),
                     SUM (ADDITIONAL_BOOKINGS),
                     SUM (BOOKINGS_ADJUSTMENTS),
                     -SUM (CANCELLATIONS),
                     SUM (TOTAL_NET_BOOKINGS),
                     SUM (ACCRUED_REVENUE),
                     SUM (LOST_BACKLOG),
                     SUM (LOST_BACKLOG_ITD),
                     SUM (BACKLOG),
                     SUM (BACKLOG_ITD),
                     SUM (REVENUE_AT_RISK),
                     SUM (REVENUE_AT_RISK_ITD),
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0 )
             BULK COLLECT INTO L_AC_BOOKINGS_BACKLOG_TAB
             FROM (SELECT /*+ ORDERED */
                          HOU.NAME ORG_ID,
                          HORG.NAME ORGANIZATION_ID,
                          TIME.NAME TIME_ID,
                          DECODE (P_VIEW_BY, 'TM', TIME.ORDER_BY_ID, -1) TIME_KEY,
                          CLS.NAME PROJECT_CLASS_ID,
                          INITIAL_FUNDING_AMOUNT ORIGINAL_BOOKINGS,
                          ADDITIONAL_FUNDING_AMOUNT ADDITIONAL_BOOKINGS,
                          FUNDING_ADJUSTMENT_AMOUNT BOOKINGS_ADJUSTMENTS,
                          CANCELLED_FUNDING_AMOUNT CANCELLATIONS,
                            INITIAL_FUNDING_AMOUNT
                          + ADDITIONAL_FUNDING_AMOUNT
                          + FUNDING_ADJUSTMENT_AMOUNT
                          + CANCELLED_FUNDING_AMOUNT TOTAL_NET_BOOKINGS,
                          REVENUE ACCRUED_REVENUE, LOST_BACKLOG LOST_BACKLOG,
                          0 LOST_BACKLOG_ITD,
                            DORMANT_BACKLOG_START
                          + DORMANT_BACKLOG_INACTIV
                          + ACTIVE_BACKLOG BACKLOG,
                          0 BACKLOG_ITD, REVENUE_AT_RISK REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_TIME_DIM_TMP TIME,
                          PJI_PMV_ORGZ_DIM_TMP HORG,
                          PJI_PMV_CLS_DIM_TMP CLS,
                          PJI_AC_CLSO_F_MV FCT,
                          PJI_PMV_ORG_DIM_TMP HOU
                    WHERE FCT.PROJECT_ORG_ID = HOU.ID
                      AND FCT.PROJECT_ORGANIZATION_ID = HORG.ID
                      AND FCT.TIME_ID = TIME.ID
					  AND TIME.ID IS NOT NULL
                      AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                      AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                      AND FCT.PROJECT_CLASS_ID = CLS.ID
                      AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
                   UNION ALL
                   SELECT /*+ ORDERED */
                          HOU.NAME ORG_ID, HORG.NAME ORGANIZATION_ID,
                          TIME.NAME TIME_ID,
                          DECODE (P_VIEW_BY, 'TM', TIME.ORDER_BY_ID, -1) TIME_KEY,
                          CLS.NAME PROJECT_CLASS_ID, 0 ORIGINAL_BOOKINGS,
                          0 ADDITIONAL_BOOKINGS, 0 BOOKINGS_ADJUSTMENTS,
                          0 CANCELLATIONS, 0 TOTAL_NET_BOOKINGS,
                          0 ACCRUED_REVENUE, 0 LOST_BACKLOG,
                          LOST_BACKLOG LOST_BACKLOG_ITD, 0 BACKLOG,
                            DORMANT_BACKLOG_START
                          + DORMANT_BACKLOG_INACTIV
                          + ACTIVE_BACKLOG BACKLOG_ITD,
                          0 REVENUE_AT_RISK,
                          REVENUE_AT_RISK REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_ITD_DIM_TMP TIME,
                          PJI_PMV_ORGZ_DIM_TMP HORG,
                          PJI_PMV_CLS_DIM_TMP CLS,
                    	  PJI_AC_CLSO_F_MV FCT,
                    	  PJI_PMV_ORG_DIM_TMP HOU
                    WHERE FCT.PROJECT_ORG_ID = HOU.ID
                      AND FCT.PROJECT_ORGANIZATION_ID = HORG.ID
                      AND FCT.TIME_ID = TIME.ID
					  AND TIME.ID IS NOT NULL
                      AND FCT.PERIOD_TYPE_ID = TIME.PERIOD_TYPE
                      AND FCT.CALENDAR_TYPE = TIME.CALENDAR_TYPE
                      AND FCT.PROJECT_CLASS_ID = CLS.ID
                      AND bitand(fct.curr_record_type_id, l_curr_record_type_id) = l_curr_record_type_id
                   UNION ALL
                   SELECT NAME ORG_ID, '-1' ORGANIZATION_ID, '-1' TIME_ID,
                          -1 TIME_KEY, '-1' PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_ORG_DIM_TMP
                    WHERE NAME <> '-1'
                   UNION ALL
                   SELECT '-1' ORG_ID, NAME ORGANIZATION_ID, '-1' TIME_ID,
                          -1 TIME_KEY, '-1' PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_ORGZ_DIM_TMP
                    WHERE NAME <> '-1'
                   UNION ALL
                   SELECT '-1' ORG_ID, '-1' ORGANIZATION_ID, NAME TIME_ID,
                          ID TIME_KEY, '-1' PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_TIME_DIM_TMP
                    WHERE NAME <> '-1'
                   UNION ALL
                   SELECT '-1' ORG_ID, '-1' ORGANIZATION_ID, '-1' TIME_ID,
                          -1 TIME_KEY, NAME PROJECT_CLASS_ID,
                          0 ORIGINAL_BOOKINGS, 0 ADDITIONAL_BOOKINGS,
                          0 BOOKINGS_ADJUSTMENTS, 0 CANCELLATIONS,
                          0 TOTAL_NET_BOOKINGS, 0 ACCRUED_REVENUE,
                          0 LOST_BACKLOG, 0 LOST_BACKLOG_ITD, 0 BACKLOG,
                          0 BACKLOG_ITD, 0 REVENUE_AT_RISK,
                          0 REVENUE_AT_RISK_ITD,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                     FROM PJI_PMV_CLS_DIM_TMP
                    WHERE NAME <> '-1') FACT
         GROUP BY ORG_ID, ORGANIZATION_ID, TIME_KEY, TIME_ID, PROJECT_CLASS_ID;
      END IF;

FOR i in 1..l_ac_bookings_backlog_tab.COUNT
  LOOP
   l_ac_bookings_backlog_tab(i).BACKLOG:=
                NVL(l_ac_bookings_backlog_tab(i).BACKLOG_ITD,0)
                    - NVL(l_ac_bookings_backlog_tab(i).BACKLOG,0);
   l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK:=
                NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK_ITD,0)
                    -  NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK,0);
   l_ac_bookings_backlog_tab(i).LOST_BACKLOG:=
                NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG_ITD,0)
                    -  NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG,0);

    IF p_View_By = 'OG' THEN
        IF l_ac_bookings_backlog_tab(i).ORGANIZATION_ID = l_Top_Organization_Name THEN
     l_Top_Org_Index:=i;

     l_TO_Original_Bookings    :=  NVL(l_ac_bookings_backlog_tab(i).ORIGINAL_BOOKINGS,0);
     l_TO_Additional_Bookings  :=  NVL(l_ac_bookings_backlog_tab(i).ADDITIONAL_BOOKINGS,0);
     l_TO_Bookings_Adjustments :=  NVL(l_ac_bookings_backlog_tab(i).BOOKINGS_ADJUSTMENTS,0);
     l_TO_Cancellations        :=  NVL(l_ac_bookings_backlog_tab(i).CANCELLATIONS,0);
     l_TO_Total_Net_Bookings   :=  NVL(l_ac_bookings_backlog_tab(i).TOTAL_NET_BOOKINGS,0);
     l_TO_Accrued_Revenue      :=  NVL(l_ac_bookings_backlog_tab(i).ACCRUED_REVENUE,0);
     l_TO_Lost_Backlog         :=  NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG,0);
     l_TO_Lost_Backlog_Itd     :=  NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG_ITD,0);
     l_TO_Backlog              :=  NVL(l_ac_bookings_backlog_tab(i).BACKLOG,0);
     l_TO_Backlog_Itd          :=  NVL(l_ac_bookings_backlog_tab(i).BACKLOG_ITD,0);
     l_TO_Revenue_At_Risk      :=  NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK,0);
     l_TO_Revenue_At_Risk_Itd  :=  NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK_ITD,0);

   ELSE
     l_Original_Bookings  :=l_Original_Bookings
                + NVL(l_ac_bookings_backlog_tab(i).ORIGINAL_BOOKINGS,0);
     l_Additional_Bookings  :=   l_Additional_Bookings
                + NVL(l_ac_bookings_backlog_tab(i).ADDITIONAL_BOOKINGS,0);
     l_Bookings_Adjustments := l_Bookings_Adjustments
                + NVL(l_ac_bookings_backlog_tab(i).BOOKINGS_ADJUSTMENTS,0);
     l_Cancellations       := l_Cancellations
                + NVL(l_ac_bookings_backlog_tab(i).CANCELLATIONS,0);
     l_Total_Net_Bookings     := l_Total_Net_Bookings
                + NVL(l_ac_bookings_backlog_tab(i).TOTAL_NET_BOOKINGS,0);
     l_Accrued_Revenue        := l_Accrued_Revenue
                + NVL(l_ac_bookings_backlog_tab(i).ACCRUED_REVENUE,0);
     l_Lost_Backlog     	   := l_Lost_Backlog
                + NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG,0);
     l_Lost_Backlog_Itd      := l_Lost_Backlog_Itd
                + NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG_ITD,0);
     l_Backlog			   := l_Backlog
                + NVL(l_ac_bookings_backlog_tab(i).BACKLOG,0);
     l_Backlog_Itd		   := l_Backlog_Itd
                + NVL(l_ac_bookings_backlog_tab(i).BACKLOG_ITD,0);
     l_Revenue_At_Risk     := l_Revenue_At_Risk
                + NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK,0);
     l_Revenue_At_Risk_Itd := l_Revenue_At_Risk_Itd
                + NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK_ITD,0);
    END IF;
 ELSE
     l_Original_Bookings  :=l_Original_Bookings
                + NVL(l_ac_bookings_backlog_tab(i).ORIGINAL_BOOKINGS,0);
     l_Additional_Bookings  :=   l_Additional_Bookings
                + NVL(l_ac_bookings_backlog_tab(i).ADDITIONAL_BOOKINGS,0);
     l_Bookings_Adjustments := l_Bookings_Adjustments
                + NVL(l_ac_bookings_backlog_tab(i).BOOKINGS_ADJUSTMENTS,0);
     l_Cancellations       := l_Cancellations
                + NVL(l_ac_bookings_backlog_tab(i).CANCELLATIONS,0);
     l_Total_Net_Bookings     := l_Total_Net_Bookings
                + NVL(l_ac_bookings_backlog_tab(i).TOTAL_NET_BOOKINGS,0);
     l_Accrued_Revenue        := l_Accrued_Revenue
                + NVL(l_ac_bookings_backlog_tab(i).ACCRUED_REVENUE,0);
     l_Lost_Backlog     	   := l_Lost_Backlog
                + NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG,0);
     l_Lost_Backlog_Itd      := l_Lost_Backlog_Itd
                + NVL(l_ac_bookings_backlog_tab(i).LOST_BACKLOG_ITD,0);
     l_Backlog			   := l_Backlog
                + NVL(l_ac_bookings_backlog_tab(i).BACKLOG,0);
     l_Backlog_Itd		   := l_Backlog_Itd
                + NVL(l_ac_bookings_backlog_tab(i).BACKLOG_ITD,0);
     l_Revenue_At_Risk     := l_Revenue_At_Risk
                + NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK,0);
     l_Revenue_At_Risk_Itd := l_Revenue_At_Risk_Itd
                + NVL(l_ac_bookings_backlog_tab(i).REVENUE_AT_RISK_ITD,0);
 END IF;
END LOOP;

IF p_View_By = 'OG' THEN

   l_ac_bookings_backlog_tab(l_Top_Org_Index).ORIGINAL_BOOKINGS
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).ORIGINAL_BOOKINGS,0)
                    - l_Original_Bookings;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).ADDITIONAL_BOOKINGS
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).ADDITIONAL_BOOKINGS,0)
                    - l_Additional_Bookings;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).BOOKINGS_ADJUSTMENTS
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).BOOKINGS_ADJUSTMENTS,0)
                    - l_Bookings_Adjustments;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).CANCELLATIONS
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).CANCELLATIONS,0)
                    - l_Cancellations;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).TOTAL_NET_BOOKINGS
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).TOTAL_NET_BOOKINGS,0)
                    - l_Total_Net_Bookings;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).ACCRUED_REVENUE
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).ACCRUED_REVENUE,0)
                    - l_Accrued_Revenue ;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).LOST_BACKLOG
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).LOST_BACKLOG,0)
                    - l_Lost_Backlog;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).LOST_BACKLOG_ITD
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).LOST_BACKLOG_ITD,0)
                    - l_Lost_Backlog_Itd;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).BACKLOG
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).BACKLOG,0)
                    - l_Backlog;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).BACKLOG_ITD
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).BACKLOG_ITD,0)
                    - l_Backlog_Itd;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).REVENUE_AT_RISK
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).REVENUE_AT_RISK,0)
                    - l_Revenue_At_Risk;
   l_ac_bookings_backlog_tab(l_Top_Org_Index).REVENUE_AT_RISK_ITD
                :=NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).REVENUE_AT_RISK_ITD,0)
                    - l_Revenue_At_Risk_Itd;

    IF
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).BACKLOG,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).ORIGINAL_BOOKINGS,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).ADDITIONAL_BOOKINGS,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).BOOKINGS_ADJUSTMENTS,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).CANCELLATIONS,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).TOTAL_NET_BOOKINGS,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).ACCRUED_REVENUE,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).REVENUE_AT_RISK_ITD,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).LOST_BACKLOG_ITD,0)=0 AND
    NVL(l_ac_bookings_backlog_tab(l_Top_Org_Index).BACKLOG_ITD,0)=0
    THEN
    l_ac_bookings_backlog_tab.DELETE(l_Top_Org_Index);
    END IF;

        l_Original_Bookings        :=l_TO_Original_Bookings;
        l_Additional_Bookings      :=l_TO_Additional_Bookings;
        l_Bookings_Adjustments     :=l_TO_Bookings_Adjustments;
        l_Cancellations            :=l_TO_Cancellations;
        l_Total_Net_Bookings       :=l_TO_Total_Net_Bookings;
        l_Accrued_Revenue          :=l_TO_Accrued_Revenue;
        l_Lost_Backlog_Itd         :=l_TO_Lost_Backlog_Itd;
        l_Backlog		   :=l_TO_Backlog;
        l_Backlog_Itd	           :=l_TO_Backlog_Itd;
        l_Revenue_At_Risk_Itd      :=l_TO_Revenue_At_Risk_Itd;

 END IF;

IF L_AC_BOOKINGS_BACKLOG_TAB.COUNT > 0 THEN
 FOR I IN L_AC_BOOKINGS_BACKLOG_TAB.FIRST..L_AC_BOOKINGS_BACKLOG_TAB.LAST
   LOOP
     IF L_AC_BOOKINGS_BACKLOG_TAB.EXISTS(i) THEN
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_1:=l_Backlog;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_2:=l_Original_Bookings;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_3:=l_Additional_Bookings;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_4:=l_Bookings_Adjustments;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_5:=l_Cancellations;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_6:=l_Total_Net_Bookings;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_7:=l_Accrued_Revenue;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_8:=l_Revenue_At_Risk_Itd;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_9:=l_Lost_Backlog_Itd;
        L_AC_BOOKINGS_BACKLOG_TAB(i).PJI_REP_TOTAL_10:=l_Backlog_Itd;
    END IF;
 END LOOP;
 END IF;
 COMMIT;

  RETURN L_AC_BOOKINGS_BACKLOG_TAB;
END PLSQLDRIVER_PBB3;

END PJI_PMV_BOOKINGS_BACKLOG;

/
