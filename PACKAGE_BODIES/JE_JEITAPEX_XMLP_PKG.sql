--------------------------------------------------------
--  DDL for Package Body JE_JEITAPEX_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEITAPEX_XMLP_PKG" AS
/* $Header: JEITAPEXB.pls 120.1 2007/12/25 16:55:37 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    P_SET_OF_BKS_ID NUMBER;
    --P_FIRST_DAY DATE;
    --P_LAST_DAY DATE;
    L_LE_ID_COUNT NUMBER;
    ERRBUF VARCHAR2(200);
    RETCODE NUMBER;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    P_LEGAL_ENTITY_ID_V := P_LEGAL_ENTITY_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      C_LISTNUM := 0;
      IF P_SET_OF_BOOKS_ID IS NULL THEN
        P_SET_OF_BKS_ID := FND_PROFILE.VALUE('GL_SET_OF_BKS_ID');
      ELSE
        P_SET_OF_BKS_ID := P_SET_OF_BOOKS_ID;
      END IF;
      SELECT
        count(*)
      INTO L_LE_ID_COUNT
      FROM
        JE_IT_EXEMPT_LETTERS
      WHERE SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID
        AND LEGAL_ENTITY_ID IS NULL;
      /*SRW.MESSAGE(1
                 ,L_LE_ID_COUNT)*/NULL;
      SELECT
        NVL(A.LEGAL_ENTITY_ID
           ,B.LEGAL_ENTITY_ID)
      INTO P_LEGAL_ENTITY_ID_V
      FROM
        JG_ZZ_VAT_REP_ENTITIES A,
        JG_ZZ_VAT_REP_ENTITIES B
      WHERE A.MAPPING_VAT_REP_ENTITY_ID = B.VAT_REPORTING_ENTITY_ID (+)
        AND A.VAT_REPORTING_ENTITY_ID = P_REP_IDENTIFIER;
      IF L_LE_ID_COUNT > 0 THEN
        JE_IT_TAX_EX_UPGRADE.UPGRADE_MAIN(ERRBUF
                                         ,RETCODE
                                         ,P_SET_OF_BOOKS_ID
                                         ,P_LEGAL_ENTITY_ID_V);
      END IF;
      SELECT
        TO_DATE(START_DATE
               ,'DD-MM-RRRR')
      INTO P_FIRST_DAY
      FROM
        GL_PERIODS
      WHERE PERIOD_SET_NAME = P_PERIOD_SET_NAME
        AND PERIOD_NAME = P_PERIOD_FROM;
      SELECT
        TO_DATE(END_DATE
               ,'DD-MM-RRRR')
      INTO P_LAST_DAY
      FROM
        GL_PERIODS
      WHERE PERIOD_SET_NAME = P_PERIOD_SET_NAME
        AND PERIOD_NAME = P_PERIOD_TO;
      SELECT
        LEDGER.NAME,
        LEDGER.CURRENCY_CODE
      INTO C_OUR_SOB_NAME,C_FUNCTIONAL_CURRENCY
      FROM
        GL_LEDGERS_PUBLIC_V LEDGER
      WHERE LEDGER.LEDGER_ID = P_SET_OF_BKS_ID;
      DECLARE
        P_EFFECTIVE_DATE DATE;
        X_RETURN_STATUS VARCHAR2(100);
        X_MSG_COUNT NUMBER;
        X_MSG_DATA VARCHAR2(100);
        X_ME_PARTY_ID NUMBER;
        X_REGISTRATION_NUMBER VARCHAR2(100);
        P_COUNTRY VARCHAR2(100);
      BEGIN
        SELECT
          sysdate
        INTO P_EFFECTIVE_DATE
        FROM
          DUAL;
        SELECT
          ETBP.PARTY_ID
        INTO X_ME_PARTY_ID
        FROM
          XLE_ETB_PROFILES ETBP
        WHERE ETBP.MAIN_ESTABLISHMENT_FLAG = 'Y'
          AND ETBP.LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID_V;
        IF X_ME_PARTY_ID IS NOT NULL THEN
          X_REGISTRATION_NUMBER := ZX_API_PUB.GET_DEFAULT_TAX_REG(P_API_VERSION => 1.0
                                                                 ,P_INIT_MSG_LIST => NULL
                                                                 ,P_COMMIT => NULL
                                                                 ,P_VALIDATION_LEVEL => NULL
                                                                 ,X_RETURN_STATUS => X_RETURN_STATUS
                                                                 ,X_MSG_COUNT => X_MSG_COUNT
                                                                 ,X_MSG_DATA => X_MSG_DATA
                                                                 ,P_PARTY_ID => X_ME_PARTY_ID
                                                                 ,P_PARTY_TYPE => 'LEGAL_ESTABLISHMENT'
                                                                 ,P_EFFECTIVE_DATE => P_EFFECTIVE_DATE);
        END IF;
        C_VAT_REG_NUM := X_REGISTRATION_NUMBER;
        SELECT
          XFIV.NAME,
          XFIV.ADDRESS_LINE_1,
          SUBSTR(SUBSTR(XFIV.POSTAL_CODE
                       ,1
                       ,5) || '       ' || XFIV.TOWN_OR_CITY || ' ' || XFIV.REGION_1
                ,1
                ,40),
          SUBSTR(XFIV.POSTAL_CODE
                ,1
                ,5) || '       ' || XFIV.TOWN_OR_CITY,
          SUBSTR(HRL.DESCRIPTION
                ,1
                ,43),
          XFIV.COUNTRY
        INTO C_LE_NAME,C_OUR_STREET,C_OUR_ZIPCITY,C_OUR_ZIP_CITY,C_LOCATION,P_COUNTRY
        FROM
          XLE_FIRSTPARTY_INFORMATION_V XFIV,
          HR_LOCATIONS HRL
        WHERE XFIV.LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID_V
          AND XFIV.LOCATION_ID = HRL.LOCATION_ID;
        C_COUNTRY_CODE := P_COUNTRY;
        SELECT
          GEOGRAPHY_NAME
        INTO C_OUR_COUNTRY
        FROM
          HZ_GEOGRAPHIES
        WHERE GEOGRAPHY_CODE = P_COUNTRY
          AND GEOGRAPHY_TYPE = 'COUNTRY';
        SELECT
          REGISTRATION_NUMBER
        INTO C_TAXPAYER_ID
        FROM
          XLE_REGISTRATIONS_V
        WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID_V
          AND LEGISLATIVE_CATEGORY = 'INCOME_TAX';
        SELECT
          REGISTRATION_NUMBER
        INTO C_COMMERCIAL_NUM
        FROM
          XLE_REGISTRATIONS_V
        WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID_V
          AND LEGISLATIVE_CATEGORY = 'COMMERCIAL_LAW';
      EXCEPTION
        WHEN TOO_MANY_ROWS THEN
          /*SRW.MESSAGE(9999
                     ,'Esiste piu'' di una company nell'' organizzazione')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        WHEN NO_DATA_FOUND THEN
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION LISTNUMFORMULA RETURN NUMBER IS
  BEGIN
    C_LISTNUM := C_LISTNUM + 1;
    RETURN (C_LISTNUM);
  END LISTNUMFORMULA;

  FUNCTION PRINT_COMMITFORMULA(PRINT_ROWID IN VARCHAR2) RETURN VARCHAR2 IS
  pragma autonomous_transaction;
  BEGIN
    /*SRW.REFERENCE(PRINT_ROWID)*/NULL;

    BEGIN
      UPDATE
        JE_IT_EXEMPT_LETTERS
      SET
        PRINT_FLAG = 'N'
      WHERE ROWID = PRINT_ROWID;
      commit;
    END;
    RETURN NULL;
  END PRINT_COMMITFORMULA;

  FUNCTION ISSUE_COMMITFORMULA(ISSUE_ROWID IN VARCHAR2) RETURN NUMBER IS
  pragma autonomous_transaction;
  BEGIN
    /*SRW.REFERENCE(ISSUE_ROWID)*/NULL;

    BEGIN
      UPDATE
        JE_IT_EXEMPT_LETTERS
      SET
        ISSUE_FLAG = 'N'
        ,ISSUE_DATE = SYSDATE
      WHERE ROWID = ISSUE_ROWID;
      commit;
    END;
    RETURN (0);
  END ISSUE_COMMITFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_CURRENT_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(SYSDATE);
  END CF_CURRENT_DATEFORMULA;

  FUNCTION CF_PLACE_DATE_ISSUEDFORMULA(CF_CURRENT_DATE IN VARCHAR2) RETURN CHAR IS
    PLACE_DATE VARCHAR2(40);
  BEGIN
    PLACE_DATE := P_PROVINCE || ' ' || CF_CURRENT_DATE;
    RETURN (PLACE_DATE);
  END CF_PLACE_DATE_ISSUEDFORMULA;

  FUNCTION CF_PERSON_PROFILEFORMULA(PTYPE IN VARCHAR2
                                   ,PARTYID IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF PTYPE = 'PERSON' THEN
      SELECT
        PLACE_OF_BIRTH || ' ' || DATE_OF_BIRTH,
        GENDER
      INTO C_PLACE,C_SEX
      FROM
        HZ_PERSON_PROFILES HPP
      WHERE EXISTS (
        SELECT
          null
        FROM
          HZ_PARTIES HP
        WHERE HP.PARTY_ID = HPP.PARTY_ID
          AND HP.PARTY_NAME = HPP.PERSON_NAME
          AND HP.PARTY_ID = PARTYID );
      RETURN (1);
    ELSE
      RETURN (0);
    END IF;
  END CF_PERSON_PROFILEFORMULA;

  FUNCTION C_OUR_STREET_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OUR_STREET;
  END C_OUR_STREET_P;

  FUNCTION C_OUR_ZIPCITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OUR_ZIPCITY;
  END C_OUR_ZIPCITY_P;

  FUNCTION C_LISTNUM_P RETURN NUMBER IS
  BEGIN
    RETURN C_LISTNUM;
  END C_LISTNUM_P;

  FUNCTION C_COMMIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_COMMIT;
  END C_COMMIT_P;

  FUNCTION C_OUR_VATCODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OUR_VATCODE;
  END C_OUR_VATCODE_P;

  FUNCTION C_OUR_SOB_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OUR_SOB_NAME;
  END C_OUR_SOB_NAME_P;

  FUNCTION C_LOCATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_LOCATION;
  END C_LOCATION_P;

  FUNCTION C_FUNCTIONAL_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FUNCTIONAL_CURRENCY;
  END C_FUNCTIONAL_CURRENCY_P;

  FUNCTION C_LE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_LE_NAME;
  END C_LE_NAME_P;

  FUNCTION C_OUR_ZIP_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OUR_ZIP_CITY;
  END C_OUR_ZIP_CITY_P;

  FUNCTION C_OUR_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OUR_COUNTRY;
  END C_OUR_COUNTRY_P;

  FUNCTION C_TAXPAYER_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TAXPAYER_ID;
  END C_TAXPAYER_ID_P;

  FUNCTION C_COMMERCIAL_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMMERCIAL_NUM;
  END C_COMMERCIAL_NUM_P;

  FUNCTION C_VAT_REG_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_VAT_REG_NUM;
  END C_VAT_REG_NUM_P;

  FUNCTION C_PLACE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PLACE;
  END C_PLACE_P;

  FUNCTION C_SEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SEX;
  END C_SEX_P;

  FUNCTION C_COUNTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COUNTRY_CODE;
  END C_COUNTRY_CODE_P;

  FUNCTION P_FIRST_DAY_P RETURN DATE IS
  BEGIN
    RETURN P_FIRST_DAY;
  END P_FIRST_DAY_P;

  FUNCTION P_LAST_DAY_P RETURN DATE IS
  BEGIN
    RETURN P_LAST_DAY;
  END P_LAST_DAY_P;

END JE_JEITAPEX_XMLP_PKG;



/
