--------------------------------------------------------
--  DDL for Package Body PAY_PAYGBACT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PAYGBACT_XMLP_PKG" AS
/* $Header: PAYGBACTB.pls 120.1 2008/01/07 15:57:55 srikrish noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      --HR_STANDARD.EVENT('BEFORE REPORT');
      P_SESSION_DATE_T := TO_CHAR(P_SESSION_DATE,'DD-MON-YYYY');
      P_START_DATE_T := TO_CHAR(P_START_DATE,'DD-MON-YYYY');
      C_BUSINESS_GROUP_NAME := GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
      IF P_PERSON_ID IS NOT NULL THEN
        C_PERSON_NAME := GET_PERSON_NAME(P_SESSION_DATE
                                        ,P_PERSON_ID);
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_STAT_PERIOD_START(ASSIGNMENT_ACTION_ID IN NUMBER) RETURN DATE IS
    L_STAT_PERIOD_START DATE;
  BEGIN
    BEGIN
      L_STAT_PERIOD_START := APPS.HR_GBNIDIR.STATUTORY_PERIOD_START_DATE(ASSIGNMENT_ACTION_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_STAT_PERIOD_START := TO_DATE('01-01-0001'
                                      ,'dd-mm-yyyy');
    END;
    RETURN L_STAT_PERIOD_START;
  END GET_STAT_PERIOD_START;

  FUNCTION GET_NI_PTD(ASSIGNMENT_ACTION_ID IN NUMBER
                     ,ELEMENT_NAME IN VARCHAR2
                     ,INPUT_NAME IN VARCHAR2) RETURN NUMBER IS
    DEF_BAL_ID NUMBER;
    TEMP_VALUE NUMBER;
  BEGIN
    SET_CONTEXT('BUSINESS_GROUP_ID'
               ,TO_CHAR(P_BUSINESS_GROUP_ID));
    SET_CONTEXT('ASSIGNMENT_ACTION_ID'
               ,TO_CHAR(ASSIGNMENT_ACTION_ID));
    BEGIN
      SELECT
        BDEF.DEFINED_BALANCE_ID
      INTO DEF_BAL_ID
      FROM
        PAY_DEFINED_BALANCES BDEF,
        PAY_BALANCE_TYPES BTYP,
        PAY_BALANCE_DIMENSIONS BDIM
      WHERE BDEF.BALANCE_TYPE_ID = BTYP.BALANCE_TYPE_ID
        AND ( ( BTYP.BALANCE_NAME = ELEMENT_NAME || DECODE(INPUT_NAME
            ,'Pay Value'
            ,' Employee'
            ,'NI Employer'
            ,' Employer'
            ,'NI Able'
            ,' Able'
            ,'NI CO Able'
            ,' CO Able'
            ,'NI CO Employee'
            ,' CO'
            ,'')
        AND BDIM.DIMENSION_NAME = '_PER_NI_PTD' )
      OR ( BTYP.BALANCE_NAME = ELEMENT_NAME
        AND BDIM.DIMENSION_NAME = '_PER_NI_PTD' )
      OR ( BTYP.BALANCE_NAME = ELEMENT_NAME
        AND NVL(INPUT_NAME
         ,'Pay Value') = 'Pay Value'
        AND BDIM.DIMENSION_NAME = '_PER_PAYE_PTD' ) )
        AND BDEF.BALANCE_DIMENSION_ID = BDIM.BALANCE_DIMENSION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        TEMP_VALUE := 0;
        RETURN TEMP_VALUE;
    END;
    BEGIN
      TEMP_VALUE := GET_VALUE(DEF_BAL_ID
                             ,ASSIGNMENT_ACTION_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        TEMP_VALUE := 0;
    END;
    RETURN TEMP_VALUE;
  END GET_NI_PTD;

  FUNCTION GET_NI_YTD(ASSIGNMENT_ACTION_ID IN NUMBER
                     ,ELEMENT_NAME IN VARCHAR2
                     ,INPUT_NAME IN VARCHAR2) RETURN NUMBER IS
    DEF_BAL_ID NUMBER;
    TEMP_VALUE NUMBER;
  BEGIN
    SET_CONTEXT('BUSINESS_GROUP_ID'
               ,TO_CHAR(P_BUSINESS_GROUP_ID));
    SET_CONTEXT('ASSIGNMENT_ACTION_ID'
               ,TO_CHAR(ASSIGNMENT_ACTION_ID));
    BEGIN
      SELECT
        BDEF.DEFINED_BALANCE_ID
      INTO DEF_BAL_ID
      FROM
        PAY_DEFINED_BALANCES BDEF,
        PAY_BALANCE_TYPES BTYP,
        PAY_BALANCE_DIMENSIONS BDIM
      WHERE BDEF.BALANCE_TYPE_ID = BTYP.BALANCE_TYPE_ID
        AND ( ( BTYP.BALANCE_NAME = ELEMENT_NAME || DECODE(INPUT_NAME
            ,'Pay Value'
            ,' Employee'
            ,'NI Employer'
            ,' Employer'
            ,'NI Able'
            ,' Able'
            ,'NI CO Able'
            ,' CO Able'
            ,'NI CO Employee'
            ,' CO'
            ,'x') )
      OR ( BTYP.BALANCE_NAME = ELEMENT_NAME
        AND NVL(INPUT_NAME
         ,'Pay Value') = 'Pay Value' ) )
        AND BDEF.BALANCE_DIMENSION_ID = BDIM.BALANCE_DIMENSION_ID
        AND BDIM.DIMENSION_NAME = '_PER_TD_YTD';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        TEMP_VALUE := 0;
        RETURN TEMP_VALUE;
    END;
    BEGIN
      TEMP_VALUE := GET_VALUE(DEF_BAL_ID
                             ,ASSIGNMENT_ACTION_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        TEMP_VALUE := 0;
    END;
    RETURN TEMP_VALUE;
  END GET_NI_YTD;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BUSINESS_GROUP_NAME;
  END C_BUSINESS_GROUP_NAME_P;

  FUNCTION C_REPORT_SUBTITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_SUBTITLE;
  END C_REPORT_SUBTITLE_P;

  FUNCTION C_PERSON_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PERSON_NAME;
  END C_PERSON_NAME_P;

  FUNCTION GET_BUDGET(P_BUDGET_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUDGET(:P_BUDGET_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUDGET_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_BUDGET;

  FUNCTION GET_BUDGET_VERSION(P_BUDGET_ID IN NUMBER
                             ,P_BUDGET_VERSION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUDGET_VERSION(:P_BUDGET_ID, :P_BUDGET_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUDGET_ID);
    STPROC.BIND_I(P_BUDGET_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_BUDGET_VERSION;

  PROCEDURE GET_ORGANIZATION(P_ORGANIZATION_ID IN NUMBER
                            ,P_ORG_NAME OUT NOCOPY VARCHAR2
                            ,P_ORG_TYPE OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_ORGANIZATION(:P_ORGANIZATION_ID, :P_ORG_NAME, :P_ORG_TYPE); end;');
    STPROC.BIND_I(P_ORGANIZATION_ID);
    STPROC.BIND_O(P_ORG_NAME);
    STPROC.BIND_O(P_ORG_TYPE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ORG_NAME);
    STPROC.RETRIEVE(3
                   ,P_ORG_TYPE);*/NULL;
  END GET_ORGANIZATION;

  FUNCTION GET_JOB(P_JOB_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_JOB(:P_JOB_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_JOB_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_JOB;

  FUNCTION GET_POSITION(P_POSITION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_POSITION(:P_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_POSITION;

  FUNCTION GET_GRADE(P_GRADE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_GRADE(:P_GRADE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_GRADE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_GRADE;

  FUNCTION GET_STATUS(P_BUSINESS_GROUP_ID IN NUMBER
                     ,P_ASSIGNMENT_STATUS_TYPE_ID IN NUMBER
                     ,P_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_STATUS(:P_BUSINESS_GROUP_ID, :P_ASSIGNMENT_STATUS_TYPE_ID,
    :P_LEGISLATION_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_ASSIGNMENT_STATUS_TYPE_ID);
    STPROC.BIND_I(P_LEGISLATION_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_STATUS;

  FUNCTION GET_ABS_TYPE(P_ABS_ATT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_ABS_TYPE(:P_ABS_ATT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ABS_ATT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_ABS_TYPE;

  PROCEDURE GET_TIME_PERIOD(P_TIME_PERIOD_ID IN NUMBER
                           ,P_PERIOD_NAME OUT NOCOPY VARCHAR2
                           ,P_START_DATE OUT NOCOPY DATE
                           ,P_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_TIME_PERIOD(:P_TIME_PERIOD_ID, :P_PERIOD_NAME, :P_START_DATE,
    :P_END_DATE); end;');
    STPROC.BIND_I(P_TIME_PERIOD_ID);
    STPROC.BIND_O(P_PERIOD_NAME);
    STPROC.BIND_O(P_START_DATE);
    STPROC.BIND_O(P_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_PERIOD_NAME);
    STPROC.RETRIEVE(3
                   ,P_START_DATE);
    STPROC.RETRIEVE(4
                   ,P_END_DATE);*/NULL;
  END GET_TIME_PERIOD;

  FUNCTION GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    X0 := HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    /*STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_BUSINESS_GROUP;

  FUNCTION COUNT_ORG_SUBORDINATES(P_ORG_STRUCTURE_VERSION_ID IN NUMBER
                                 ,P_PARENT_ORGANIZATION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
   /* STPROC.INIT('begin :X0 := HR_REPORTS.COUNT_ORG_SUBORDINATES(:P_ORG_STRUCTURE_VERSION_ID,
   :P_PARENT_ORGANIZATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.BIND_I(P_PARENT_ORGANIZATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END COUNT_ORG_SUBORDINATES;

  FUNCTION COUNT_POS_SUBORDINATES(P_POS_STRUCTURE_VERSION_ID IN NUMBER
                                 ,P_PARENT_POSITION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.COUNT_POS_SUBORDINATES(:P_POS_STRUCTURE_VERSION_ID,
    :P_PARENT_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POS_STRUCTURE_VERSION_ID);
    STPROC.BIND_I(P_PARENT_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END COUNT_POS_SUBORDINATES;

  PROCEDURE GET_ORGANIZATION_HIERARCHY(P_ORGANIZATION_STRUCTURE_ID IN NUMBER
                                      ,P_ORG_STRUCTURE_VERSION_ID IN NUMBER
                                      ,P_ORG_STRUCTURE_NAME OUT NOCOPY VARCHAR2
                                      ,P_ORG_VERSION OUT NOCOPY NUMBER
                                      ,P_VERSION_START_DATE OUT NOCOPY DATE
                                      ,P_VERSION_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_ORGANIZATION_HIERARCHY(:P_ORGANIZATION_STRUCTURE_ID,
    :P_ORG_STRUCTURE_VERSION_ID, :P_ORG_STRUCTURE_NAME, :P_ORG_VERSION, :P_VERSION_START_DATE,
    :P_VERSION_END_DATE); end;');
    STPROC.BIND_I(P_ORGANIZATION_STRUCTURE_ID);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.BIND_O(P_ORG_STRUCTURE_NAME);
    STPROC.BIND_O(P_ORG_VERSION);
    STPROC.BIND_O(P_VERSION_START_DATE);
    STPROC.BIND_O(P_VERSION_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_ORG_STRUCTURE_NAME);
    STPROC.RETRIEVE(4
                   ,P_ORG_VERSION);
    STPROC.RETRIEVE(5
                   ,P_VERSION_START_DATE);
    STPROC.RETRIEVE(6
                   ,P_VERSION_END_DATE);*/NULL;
  END GET_ORGANIZATION_HIERARCHY;

  PROCEDURE GET_POSITION_HIERARCHY(P_POSITION_STRUCTURE_ID IN NUMBER
                                  ,P_POS_STRUCTURE_VERSION_ID IN NUMBER
                                  ,P_POS_STRUCTURE_NAME OUT NOCOPY VARCHAR2
                                  ,P_POS_VERSION OUT NOCOPY NUMBER
                                  ,P_VERSION_START_DATE OUT NOCOPY DATE
                                  ,P_VERSION_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_POSITION_HIERARCHY(:P_POSITION_STRUCTURE_ID, :P_POS_STRUCTURE_VERSION_ID,
    :P_POS_STRUCTURE_NAME, :P_POS_VERSION, :P_VERSION_START_DATE, :P_VERSION_END_DATE); end;');
    STPROC.BIND_I(P_POSITION_STRUCTURE_ID);
    STPROC.BIND_I(P_POS_STRUCTURE_VERSION_ID);
    STPROC.BIND_O(P_POS_STRUCTURE_NAME);
    STPROC.BIND_O(P_POS_VERSION);
    STPROC.BIND_O(P_VERSION_START_DATE);
    STPROC.BIND_O(P_VERSION_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_POS_STRUCTURE_NAME);
    STPROC.RETRIEVE(4
                   ,P_POS_VERSION);
    STPROC.RETRIEVE(5
                   ,P_VERSION_START_DATE);
    STPROC.RETRIEVE(6
                   ,P_VERSION_END_DATE);*/NULL;
  END GET_POSITION_HIERARCHY;

  FUNCTION GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                             ,P_LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_LOOKUP_MEANING(:P_LOOKUP_TYPE, :P_LOOKUP_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOOKUP_TYPE);
    STPROC.BIND_I(P_LOOKUP_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_LOOKUP_MEANING;

  FUNCTION PERSON_MATCHING_SKILLS(P_PERSON_ID IN NUMBER
                                 ,P_JOB_POSITION_ID IN NUMBER
                                 ,P_JOB_POSITION_TYPE IN VARCHAR2
                                 ,P_MATCHING_LEVEL IN VARCHAR2
                                 ,P_NO_OF_ESSENTIAL IN NUMBER
                                 ,P_NO_OF_DESIRABLE IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := HR_REPORTS.PERSON_MATCHING_SKILLS(:P_PERSON_ID,
    :P_JOB_POSITION_ID, :P_JOB_POSITION_TYPE,
    :P_MATCHING_LEVEL, :P_NO_OF_ESSENTIAL, :P_NO_OF_DESIRABLE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_JOB_POSITION_ID);
    STPROC.BIND_I(P_JOB_POSITION_TYPE);
    STPROC.BIND_I(P_MATCHING_LEVEL);
    STPROC.BIND_I(P_NO_OF_ESSENTIAL);
    STPROC.BIND_I(P_NO_OF_DESIRABLE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(7
                   ,X0);*/NULL;
    RETURN X0;
  END PERSON_MATCHING_SKILLS;

  FUNCTION GET_PAYROLL_NAME(P_SESSION_DATE IN DATE
                           ,P_PAYROLL_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := HR_REPORTS.GET_PAYROLL_NAME(:P_SESSION_DATE, :P_PAYROLL_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_PAYROLL_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_PAYROLL_NAME;

  FUNCTION GET_ELEMENT_NAME(P_SESSION_DATE IN DATE
                           ,P_ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_ELEMENT_NAME(:P_SESSION_DATE, :P_ELEMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_ELEMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_ELEMENT_NAME;

  PROCEDURE GEN_PARTIAL_MATCHING_LEXICAL(P_CONCATENATED_SEGMENTS IN VARCHAR2
                                        ,P_ID_FLEX_NUM IN NUMBER
                                        ,P_MATCHING_LEXICAL IN OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin HR_REPORTS.GEN_PARTIAL_MATCHING_LEXICAL(:P_CONCATENATED_SEGMENTS, :P_ID_FLEX_NUM, :P_MATCHING_LEXICAL); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_ID_FLEX_NUM);
    STPROC.BIND_IO(P_MATCHING_LEXICAL);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_MATCHING_LEXICAL);*/NULL;
  END GEN_PARTIAL_MATCHING_LEXICAL;

  PROCEDURE GET_ATTRIBUTES(P_CONCATENATED_SEGMENTS IN VARCHAR2
                          ,P_NAME IN VARCHAR2
                          ,P_SEGMENTS_USED OUT NOCOPY NUMBER
                          ,P_VALUE1 OUT NOCOPY VARCHAR2
                          ,P_VALUE2 OUT NOCOPY VARCHAR2
                          ,P_VALUE3 OUT NOCOPY VARCHAR2
                          ,P_VALUE4 OUT NOCOPY VARCHAR2
                          ,P_VALUE5 OUT NOCOPY VARCHAR2
                          ,P_VALUE6 OUT NOCOPY VARCHAR2
                          ,P_VALUE7 OUT NOCOPY VARCHAR2
                          ,P_VALUE8 OUT NOCOPY VARCHAR2
                          ,P_VALUE9 OUT NOCOPY VARCHAR2
                          ,P_VALUE10 OUT NOCOPY VARCHAR2
                          ,P_VALUE11 OUT NOCOPY VARCHAR2
                          ,P_VALUE12 OUT NOCOPY VARCHAR2
                          ,P_VALUE13 OUT NOCOPY VARCHAR2
                          ,P_VALUE14 OUT NOCOPY VARCHAR2
                          ,P_VALUE15 OUT NOCOPY VARCHAR2
                          ,P_VALUE16 OUT NOCOPY VARCHAR2
                          ,P_VALUE17 OUT NOCOPY VARCHAR2
                          ,P_VALUE18 OUT NOCOPY VARCHAR2
                          ,P_VALUE19 OUT NOCOPY VARCHAR2
                          ,P_VALUE20 OUT NOCOPY VARCHAR2
                          ,P_VALUE21 OUT NOCOPY VARCHAR2
                          ,P_VALUE22 OUT NOCOPY VARCHAR2
                          ,P_VALUE23 OUT NOCOPY VARCHAR2
                          ,P_VALUE24 OUT NOCOPY VARCHAR2
                          ,P_VALUE25 OUT NOCOPY VARCHAR2
                          ,P_VALUE26 OUT NOCOPY VARCHAR2
                          ,P_VALUE27 OUT NOCOPY VARCHAR2
                          ,P_VALUE28 OUT NOCOPY VARCHAR2
                          ,P_VALUE29 OUT NOCOPY VARCHAR2
                          ,P_VALUE30 OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin HR_REPORTS.GET_ATTRIBUTES(:P_CONCATENATED_SEGMENTS,
   :P_NAME, :P_SEGMENTS_USED, :P_VALUE1, :P_VALUE2, :P_VALUE3, :P_VALUE4, :P_VALUE5,
   :P_VALUE6, :P_VALUE7, :P_VALUE8, :P_VALUE9, :P_VALUE10, :P_VALUE11, :P_VALUE12, :P_VALUE13,
   :P_VALUE14, :P_VALUE15, :P_VALUE16, :P_VALUE17, :P_VALUE18, :P_VALUE19, :P_VALUE20, :P_VALUE21,
   :P_VALUE22, :P_VALUE23, :P_VALUE24, :P_VALUE25, :P_VALUE26, :P_VALUE27, :P_VALUE28, :P_VALUE29,
   :P_VALUE30); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_NAME);
    STPROC.BIND_O(P_SEGMENTS_USED);
    STPROC.BIND_O(P_VALUE1);
    STPROC.BIND_O(P_VALUE2);
    STPROC.BIND_O(P_VALUE3);
    STPROC.BIND_O(P_VALUE4);
    STPROC.BIND_O(P_VALUE5);
    STPROC.BIND_O(P_VALUE6);
    STPROC.BIND_O(P_VALUE7);
    STPROC.BIND_O(P_VALUE8);
    STPROC.BIND_O(P_VALUE9);
    STPROC.BIND_O(P_VALUE10);
    STPROC.BIND_O(P_VALUE11);
    STPROC.BIND_O(P_VALUE12);
    STPROC.BIND_O(P_VALUE13);
    STPROC.BIND_O(P_VALUE14);
    STPROC.BIND_O(P_VALUE15);
    STPROC.BIND_O(P_VALUE16);
    STPROC.BIND_O(P_VALUE17);
    STPROC.BIND_O(P_VALUE18);
    STPROC.BIND_O(P_VALUE19);
    STPROC.BIND_O(P_VALUE20);
    STPROC.BIND_O(P_VALUE21);
    STPROC.BIND_O(P_VALUE22);
    STPROC.BIND_O(P_VALUE23);
    STPROC.BIND_O(P_VALUE24);
    STPROC.BIND_O(P_VALUE25);
    STPROC.BIND_O(P_VALUE26);
    STPROC.BIND_O(P_VALUE27);
    STPROC.BIND_O(P_VALUE28);
    STPROC.BIND_O(P_VALUE29);
    STPROC.BIND_O(P_VALUE30);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SEGMENTS_USED);
    STPROC.RETRIEVE(4
                   ,P_VALUE1);
    STPROC.RETRIEVE(5
                   ,P_VALUE2);
    STPROC.RETRIEVE(6
                   ,P_VALUE3);
    STPROC.RETRIEVE(7
                   ,P_VALUE4);
    STPROC.RETRIEVE(8
                   ,P_VALUE5);
    STPROC.RETRIEVE(9
                   ,P_VALUE6);
    STPROC.RETRIEVE(10
                   ,P_VALUE7);
    STPROC.RETRIEVE(11
                   ,P_VALUE8);
    STPROC.RETRIEVE(12
                   ,P_VALUE9);
    STPROC.RETRIEVE(13
                   ,P_VALUE10);
    STPROC.RETRIEVE(14
                   ,P_VALUE11);
    STPROC.RETRIEVE(15
                   ,P_VALUE12);
    STPROC.RETRIEVE(16
                   ,P_VALUE13);
    STPROC.RETRIEVE(17
                   ,P_VALUE14);
    STPROC.RETRIEVE(18
                   ,P_VALUE15);
    STPROC.RETRIEVE(19
                   ,P_VALUE16);
    STPROC.RETRIEVE(20
                   ,P_VALUE17);
    STPROC.RETRIEVE(21
                   ,P_VALUE18);
    STPROC.RETRIEVE(22
                   ,P_VALUE19);
    STPROC.RETRIEVE(23
                   ,P_VALUE20);
    STPROC.RETRIEVE(24
                   ,P_VALUE21);
    STPROC.RETRIEVE(25
                   ,P_VALUE22);
    STPROC.RETRIEVE(26
                   ,P_VALUE23);
    STPROC.RETRIEVE(27
                   ,P_VALUE24);
    STPROC.RETRIEVE(28
                   ,P_VALUE25);
    STPROC.RETRIEVE(29
                   ,P_VALUE26);
    STPROC.RETRIEVE(30
                   ,P_VALUE27);
    STPROC.RETRIEVE(31
                   ,P_VALUE28);
    STPROC.RETRIEVE(32
                   ,P_VALUE29);
    STPROC.RETRIEVE(33
                   ,P_VALUE30);*/ NULL;
  END GET_ATTRIBUTES;

  PROCEDURE GET_SEGMENTS(P_CONCATENATED_SEGMENTS IN VARCHAR2
                        ,P_ID_FLEX_NUM IN NUMBER
                        ,P_SEGMENTS_USED OUT NOCOPY NUMBER
                        ,P_VALUE1 OUT NOCOPY VARCHAR2
                        ,P_VALUE2 OUT NOCOPY VARCHAR2
                        ,P_VALUE3 OUT NOCOPY VARCHAR2
                        ,P_VALUE4 OUT NOCOPY VARCHAR2
                        ,P_VALUE5 OUT NOCOPY VARCHAR2
                        ,P_VALUE6 OUT NOCOPY VARCHAR2
                        ,P_VALUE7 OUT NOCOPY VARCHAR2
                        ,P_VALUE8 OUT NOCOPY VARCHAR2
                        ,P_VALUE9 OUT NOCOPY VARCHAR2
                        ,P_VALUE10 OUT NOCOPY VARCHAR2
                        ,P_VALUE11 OUT NOCOPY VARCHAR2
                        ,P_VALUE12 OUT NOCOPY VARCHAR2
                        ,P_VALUE13 OUT NOCOPY VARCHAR2
                        ,P_VALUE14 OUT NOCOPY VARCHAR2
                        ,P_VALUE15 OUT NOCOPY VARCHAR2
                        ,P_VALUE16 OUT NOCOPY VARCHAR2
                        ,P_VALUE17 OUT NOCOPY VARCHAR2
                        ,P_VALUE18 OUT NOCOPY VARCHAR2
                        ,P_VALUE19 OUT NOCOPY VARCHAR2
                        ,P_VALUE20 OUT NOCOPY VARCHAR2
                        ,P_VALUE21 OUT NOCOPY VARCHAR2
                        ,P_VALUE22 OUT NOCOPY VARCHAR2
                        ,P_VALUE23 OUT NOCOPY VARCHAR2
                        ,P_VALUE24 OUT NOCOPY VARCHAR2
                        ,P_VALUE25 OUT NOCOPY VARCHAR2
                        ,P_VALUE26 OUT NOCOPY VARCHAR2
                        ,P_VALUE27 OUT NOCOPY VARCHAR2
                        ,P_VALUE28 OUT NOCOPY VARCHAR2
                        ,P_VALUE29 OUT NOCOPY VARCHAR2
                        ,P_VALUE30 OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_SEGMENTS(:P_CONCATENATED_SEGMENTS,
    :P_ID_FLEX_NUM, :P_SEGMENTS_USED, :P_VALUE1, :P_VALUE2, :P_VALUE3, :P_VALUE4,
    :P_VALUE5, :P_VALUE6, :P_VALUE7, :P_VALUE8, :P_VALUE9, :P_VALUE10, :P_VALUE11,
    :P_VALUE12, :P_VALUE13, :P_VALUE14, :P_VALUE15, :P_VALUE16, :P_VALUE17, :P_VALUE18,
    :P_VALUE19, :P_VALUE20, :P_VALUE21, :P_VALUE22, :P_VALUE23, :P_VALUE24, :P_VALUE25,
    :P_VALUE26, :P_VALUE27, :P_VALUE28, :P_VALUE29, :P_VALUE30); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_ID_FLEX_NUM);
    STPROC.BIND_O(P_SEGMENTS_USED);
    STPROC.BIND_O(P_VALUE1);
    STPROC.BIND_O(P_VALUE2);
    STPROC.BIND_O(P_VALUE3);
    STPROC.BIND_O(P_VALUE4);
    STPROC.BIND_O(P_VALUE5);
    STPROC.BIND_O(P_VALUE6);
    STPROC.BIND_O(P_VALUE7);
    STPROC.BIND_O(P_VALUE8);
    STPROC.BIND_O(P_VALUE9);
    STPROC.BIND_O(P_VALUE10);
    STPROC.BIND_O(P_VALUE11);
    STPROC.BIND_O(P_VALUE12);
    STPROC.BIND_O(P_VALUE13);
    STPROC.BIND_O(P_VALUE14);
    STPROC.BIND_O(P_VALUE15);
    STPROC.BIND_O(P_VALUE16);
    STPROC.BIND_O(P_VALUE17);
    STPROC.BIND_O(P_VALUE18);
    STPROC.BIND_O(P_VALUE19);
    STPROC.BIND_O(P_VALUE20);
    STPROC.BIND_O(P_VALUE21);
    STPROC.BIND_O(P_VALUE22);
    STPROC.BIND_O(P_VALUE23);
    STPROC.BIND_O(P_VALUE24);
    STPROC.BIND_O(P_VALUE25);
    STPROC.BIND_O(P_VALUE26);
    STPROC.BIND_O(P_VALUE27);
    STPROC.BIND_O(P_VALUE28);
    STPROC.BIND_O(P_VALUE29);
    STPROC.BIND_O(P_VALUE30);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SEGMENTS_USED);
    STPROC.RETRIEVE(4
                   ,P_VALUE1);
    STPROC.RETRIEVE(5
                   ,P_VALUE2);
    STPROC.RETRIEVE(6
                   ,P_VALUE3);
    STPROC.RETRIEVE(7
                   ,P_VALUE4);
    STPROC.RETRIEVE(8
                   ,P_VALUE5);
    STPROC.RETRIEVE(9
                   ,P_VALUE6);
    STPROC.RETRIEVE(10
                   ,P_VALUE7);
    STPROC.RETRIEVE(11
                   ,P_VALUE8);
    STPROC.RETRIEVE(12
                   ,P_VALUE9);
    STPROC.RETRIEVE(13
                   ,P_VALUE10);
    STPROC.RETRIEVE(14
                   ,P_VALUE11);
    STPROC.RETRIEVE(15
                   ,P_VALUE12);
    STPROC.RETRIEVE(16
                   ,P_VALUE13);
    STPROC.RETRIEVE(17
                   ,P_VALUE14);
    STPROC.RETRIEVE(18
                   ,P_VALUE15);
    STPROC.RETRIEVE(19
                   ,P_VALUE16);
    STPROC.RETRIEVE(20
                   ,P_VALUE17);
    STPROC.RETRIEVE(21
                   ,P_VALUE18);
    STPROC.RETRIEVE(22
                   ,P_VALUE19);
    STPROC.RETRIEVE(23
                   ,P_VALUE20);
    STPROC.RETRIEVE(24
                   ,P_VALUE21);
    STPROC.RETRIEVE(25
                   ,P_VALUE22);
    STPROC.RETRIEVE(26
                   ,P_VALUE23);
    STPROC.RETRIEVE(27
                   ,P_VALUE24);
    STPROC.RETRIEVE(28
                   ,P_VALUE25);
    STPROC.RETRIEVE(29
                   ,P_VALUE26);
    STPROC.RETRIEVE(30
                   ,P_VALUE27);
    STPROC.RETRIEVE(31
                   ,P_VALUE28);
    STPROC.RETRIEVE(32
                   ,P_VALUE29);
    STPROC.RETRIEVE(33
                   ,P_VALUE30);*/NULL;
  END GET_SEGMENTS;

  PROCEDURE GET_DESC_FLEX(P_APPL_SHORT_NAME IN VARCHAR2
                         ,P_DESC_FLEX_NAME IN VARCHAR2
                         ,P_TABLE_ALIAS IN VARCHAR2
                         ,P_TITLE OUT NOCOPY VARCHAR2
                         ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                         ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_DESC_FLEX(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME,
    :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR, :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_TITLE);
    STPROC.RETRIEVE(5
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(6
                   ,P_COLUMN_EXPR);*/ NULL;
  END GET_DESC_FLEX;

  PROCEDURE GET_DESC_FLEX_CONTEXT(P_APPL_SHORT_NAME IN VARCHAR2
                                 ,P_DESC_FLEX_NAME IN VARCHAR2
                                 ,P_TABLE_ALIAS IN VARCHAR2
                                 ,P_TITLE OUT NOCOPY VARCHAR2
                                 ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                                 ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_DESC_FLEX_CONTEXT(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME,
    :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR, :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_TITLE);
    STPROC.RETRIEVE(5
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(6
                   ,P_COLUMN_EXPR);*/ NULL;
  END GET_DESC_FLEX_CONTEXT;

  PROCEDURE GET_DVLPR_DESC_FLEX(P_APPL_SHORT_NAME IN VARCHAR2
                               ,P_DESC_FLEX_NAME IN VARCHAR2
                               ,P_DESC_FLEX_CONTEXT IN VARCHAR2
                               ,P_TABLE_ALIAS IN VARCHAR2
                               ,P_TITLE OUT NOCOPY VARCHAR2
                               ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                               ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin HR_REPORTS.GET_DVLPR_DESC_FLEX(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME,
   :P_DESC_FLEX_CONTEXT, :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR, :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_DESC_FLEX_CONTEXT);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(5
                   ,P_TITLE);
    STPROC.RETRIEVE(6
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(7
                   ,P_COLUMN_EXPR);*/ NULL;
  END GET_DVLPR_DESC_FLEX;

  FUNCTION GET_PERSON_NAME(P_SESSION_DATE IN DATE
                          ,P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    X0 := HR_REPORTS.GET_PERSON_NAME(P_SESSION_DATE, P_PERSON_ID);
    /*STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_PERSON_NAME;

  PROCEDURE SET_CONTEXT(P_CONTEXT_NAME IN VARCHAR2
                       ,P_CONTEXT_VALUE IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin PAY_BALANCE_PKG.SET_CONTEXT(:P_CONTEXT_NAME, :P_CONTEXT_VALUE); end;');
    STPROC.BIND_I(P_CONTEXT_NAME);
    STPROC.BIND_I(P_CONTEXT_VALUE);
    STPROC.EXECUTE;*/ NULL;
  END SET_CONTEXT;

  FUNCTION RUN_DB_ITEM(P_DATABASE_NAME IN VARCHAR2
                      ,P_BUS_GROUP_ID IN NUMBER
                      ,P_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := PAY_BALANCE_PKG.RUN_DB_ITEM(:P_DATABASE_NAME, :P_BUS_GROUP_ID,
  :P_LEGISLATION_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DATABASE_NAME);
    STPROC.BIND_I(P_BUS_GROUP_ID);
    STPROC.BIND_I(P_LEGISLATION_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END RUN_DB_ITEM;

  FUNCTION CHECK_BAL_EXPIRY(P_BAL_OWNER_ASG_ACTION IN NUMBER
                           ,P_ASSIGNMENT_ACTION_ID IN NUMBER
                           ,P_DIMENSION_NAME IN VARCHAR2
                           ,P_EXPIRY_CHECKING_LEVEL IN VARCHAR2
                           ,P_EXPIRY_CHECKING_CODE IN VARCHAR2
                           ,P_BAL_CONTEXT_STR IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
   /* STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := PAY_BALANCE_PKG.CHECK_BAL_EXPIRY(:P_BAL_OWNER_ASG_ACTION,
   :P_ASSIGNMENT_ACTION_ID, :P_DIMENSION_NAME, :P_EXPIRY_CHECKING_LEVEL, :P_EXPIRY_CHECKING_CODE, :P_BAL_CONTEXT_STR);
   :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_BAL_OWNER_ASG_ACTION);
    STPROC.BIND_I(P_ASSIGNMENT_ACTION_ID);
    STPROC.BIND_I(P_DIMENSION_NAME);
    STPROC.BIND_I(P_EXPIRY_CHECKING_LEVEL);
    STPROC.BIND_I(P_EXPIRY_CHECKING_CODE);
    STPROC.BIND_I(P_BAL_CONTEXT_STR);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(7
                   ,X0);*/NULL;
    RETURN X0;
  END CHECK_BAL_EXPIRY;

  FUNCTION GET_VALUE(P_DEFINED_BALANCE_ID IN NUMBER
                    ,P_ASSIGNMENT_ACTION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
   /* STPROC.INIT('begin :X0 := PAY_BALANCE_PKG.GET_VALUE(:P_DEFINED_BALANCE_ID, :P_ASSIGNMENT_ACTION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DEFINED_BALANCE_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ACTION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_VALUE;

  FUNCTION GET_VALUE(P_DEFINED_BALANCE_ID IN NUMBER
                    ,P_ASSIGNMENT_ACTION_ID IN NUMBER
                    ,P_ALWAYS_GET_DB_ITEM IN BOOLEAN) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
  /*  STPROC.INIT('declare X0P_ALWAYS_GET_DB_ITEM BOOLEAN;
  begin X0P_ALWAYS_GET_DB_ITEM := sys.diutil.int_to_bool(:P_ALWAYS_GET_DB_ITEM);
  :X0 := PAY_BALANCE_PKG.GET_VALUE(:P_DEFINED_BALANCE_ID, :P_ASSIGNMENT_ACTION_ID, X0P_ALWAYS_GET_DB_ITEM); end;');
    STPROC.BIND_I(P_ALWAYS_GET_DB_ITEM);
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DEFINED_BALANCE_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ACTION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);*/NULL;
    RETURN X0;
  END GET_VALUE;

  FUNCTION GET_VALUE(P_DEFINED_BALANCE_ID IN NUMBER
                    ,P_ASSIGNMENT_ID IN NUMBER
                    ,P_VIRTUAL_DATE IN DATE) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := PAY_BALANCE_PKG.GET_VALUE(:P_DEFINED_BALANCE_ID, :P_ASSIGNMENT_ID, :P_VIRTUAL_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DEFINED_BALANCE_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_VIRTUAL_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_VALUE;

  FUNCTION GET_VALUE(P_DEFINED_BALANCE_ID IN NUMBER
                    ,P_ASSIGNMENT_ID IN NUMBER
                    ,P_VIRTUAL_DATE IN DATE
                    ,P_ALWAYS_GET_DB_ITEM IN BOOLEAN) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('declare X0P_ALWAYS_GET_DB_ITEM BOOLEAN;
    begin X0P_ALWAYS_GET_DB_ITEM :=     sys.diutil.int_to_bool(:P_ALWAYS_GET_DB_ITEM);
    :X0 := PAY_BALANCE_PKG.GET_VALUE(:P_DEFINED_BALANCE_ID, :P_ASSIGNMENT_ID, :P_VIRTUAL_DATE, X0P_ALWAYS_GET_DB_ITEM); end;');
    STPROC.BIND_I(P_ALWAYS_GET_DB_ITEM);
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DEFINED_BALANCE_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_VIRTUAL_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);*/NULL;
    RETURN X0;
  END GET_VALUE;

  FUNCTION GET_VALUE_LOCK(P_DEFINED_BALANCE_ID IN NUMBER
                         ,P_ASSIGNMENT_ID IN NUMBER
                         ,P_VIRTUAL_DATE IN DATE
                         ,P_ASG_LOCK IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
   /* STPROC.INIT('begin :X0 := PAY_BALANCE_PKG.GET_VALUE_LOCK(:P_DEFINED_BALANCE_ID, :P_ASSIGNMENT_ID, :P_VIRTUAL_DATE, :P_ASG_LOCK); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DEFINED_BALANCE_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_VIRTUAL_DATE);
    STPROC.BIND_I(P_ASG_LOCK);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_VALUE_LOCK;

  FUNCTION GET_VALUE_LOCK(P_DEFINED_BALANCE_ID IN NUMBER
                         ,P_ASSIGNMENT_ID IN NUMBER
                         ,P_VIRTUAL_DATE IN DATE
                         ,P_ALWAYS_GET_DB_ITEM IN BOOLEAN
                         ,P_ASG_LOCK IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
   /* STPROC.INIT('declare X0P_ALWAYS_GET_DB_ITEM BOOLEAN;
   begin X0P_ALWAYS_GET_DB_ITEM := sys.diutil.int_to_bool(:P_ALWAYS_GET_DB_ITEM);
   :X0 := PAY_BALANCE_PKG.GET_VALUE_LOCK(:P_DEFINED_BALANCE_ID, :P_ASSIGNMENT_ID,
   :P_VIRTUAL_DATE, X0P_ALWAYS_GET_DB_ITEM, :P_ASG_LOCK); end;');
    STPROC.BIND_I(P_ALWAYS_GET_DB_ITEM);
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_DEFINED_BALANCE_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_VIRTUAL_DATE);
    STPROC.BIND_I(P_ASG_LOCK);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);*/NULL;
    RETURN X0;
  END GET_VALUE_LOCK;

END PAY_PAYGBACT_XMLP_PKG;

/
