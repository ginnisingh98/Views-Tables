--------------------------------------------------------
--  DDL for Package Body JA_JAIN23P2_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAIN23P2_XMLP_PKG" AS
/* $Header: JAIN23P2B.pls 120.1 2007/12/25 16:08:04 dwkrishn noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    V_ERROR_MESSAGE VARCHAR2(500);
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    AUDSID NUMBER := USERENV('SESSIONID');
    SID NUMBER;
    SERIAL NUMBER;
    SPID VARCHAR2(9);
    NAME1 VARCHAR2(25);
    NL CONSTANT VARCHAR2(1) DEFAULT fnd_global.local_chr(10);
    LD_TODAY DATE := TRUNC(SYSDATE);
    LD_BALANCES_START_DATE DATE;
    LV_MESSAGE VARCHAR2(200);
    LN_REPORT_START_DATE NUMBER;
    LN_BALANCES_END_DATE NUMBER;
    LD_DELTA_START_DATE DATE;
    LN_DELTA_OPENING_BAL NUMBER;
    LN_DELTA_AMOUNT NUMBER;
    LV_REGISTER_TYPE JAI_CMN_RG_PERIOD_BALS.REGISTER_TYPE%TYPE;
    R_PERIOD_BAL JAI_CMN_RG_PERIOD_BALS%ROWTYPE;
    CURSOR C_PERIOD_BAL(CP_ORGANIZATION_ID IN NUMBER,CP_LOCATION_ID IN NUMBER,CP_REGISTER_TYPE IN VARCHAR2,CP_START_DATE IN DATE) IS
      SELECT
        *
      FROM
        JAI_CMN_RG_PERIOD_BALS
      WHERE ORGANIZATION_ID = CP_ORGANIZATION_ID
        AND LOCATION_ID = CP_LOCATION_ID
        AND REGISTER_TYPE = CP_REGISTER_TYPE
        AND CP_START_DATE BETWEEN START_DATE
        AND END_DATE;
    CURSOR C_MAX_PERIOD_BAL(CP_ORGANIZATION_ID IN NUMBER,CP_LOCATION_ID IN NUMBER,CP_REGISTER_TYPE IN VARCHAR2) IS
      SELECT
        *
      FROM
        JAI_CMN_RG_PERIOD_BALS
      WHERE ORGANIZATION_ID = CP_ORGANIZATION_ID
        AND LOCATION_ID = CP_LOCATION_ID
        AND REGISTER_TYPE = CP_REGISTER_TYPE
        AND ( START_DATE , END_DATE ) = (
        SELECT
          MAX(START_DATE),
          MAX(END_DATE)
        FROM
          JAI_CMN_RG_PERIOD_BALS
        WHERE ORGANIZATION_ID = CP_ORGANIZATION_ID
          AND LOCATION_ID = CP_LOCATION_ID
          AND REGISTER_TYPE = CP_REGISTER_TYPE );
    LN_DE_EXC_EDU_SH_CESS_OP_BAL NUMBER;
    LN_DE_CVD_EDU_SH_CESS_OP_BAL NUMBER;
    LN_EXC_SH_CESS_DELTA_AMOUNT NUMBER;
    LN_CVD_SH_CESS_DELTA_AMOUNT NUMBER;
    LN_DELTA_EXC_EDU_CESS_OP_BAL NUMBER;
    LN_DELTA_CVD_EDU_CESS_OP_BAL NUMBER;
    LN_EXC_CESS_DELTA_AMOUNT NUMBER;
    LN_CVD_CESS_DELTA_AMOUNT NUMBER;
    CURSOR C_GET_CESS_DELTA_BAL(CP_DELTA_START_DATE IN DATE,CP_TAX_TYPE IN VARCHAR2) IS
      SELECT
        SUM(NVL(CREDIT
               ,0) - NVL(DEBIT
               ,0))
      FROM
        JAI_CMN_RG_23AC_II_TRXS A,
        JAI_CMN_RG_OTHERS B
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND REGISTER_TYPE = P_REGISTER_TYPE
        AND TRUNC(A.CREATION_DATE) > CP_DELTA_START_DATE
        AND TRUNC(A.CREATION_DATE) < P_TRN_FROM_DATE
        AND A.REGISTER_ID = B.SOURCE_REGISTER_ID
        AND B.SOURCE_TYPE = 1
        AND B.TAX_TYPE = CP_TAX_TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 21/02/2007')*/NULL;
    OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
    FETCH C_PROGRAM_ID
     INTO V_PROGRAM_ID,V_ENABLE_TRACE;
    CLOSE C_PROGRAM_ID;
    /*SRW.MESSAGE(1275
               ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
    IF V_ENABLE_TRACE = 'Y' THEN
      OPEN GET_AUDSID;
      FETCH GET_AUDSID
       INTO SID,SERIAL,SPID;
      CLOSE GET_AUDSID;
      OPEN GET_DBNAME;
      FETCH GET_DBNAME
       INTO NAME1;
      CLOSE GET_DBNAME;
      /*SRW.MESSAGE(1275
                 ,'TraceFile Name = ' || LOWER(NAME1) || '_ora_' || SPID || '.trc')*/NULL;
      EXECUTE IMMEDIATE
        'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
    END IF;
    IF P_TRN_FROM_DATE > LD_TODAY THEN
      /*SRW.MESSAGE(1275
                 ,'-------------------------Error Message--------------------------')*/NULL;
      /*SRW.MESSAGE(1275
                 ,'Start Date of report cannot be more SYSTEM Date')*/NULL;
      /*SRW.MESSAGE(1275
                 ,'----------------------------------------------------------------')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF P_REGISTER_TYPE = 'A' THEN
      LV_REGISTER_TYPE := 'RG23A';
    ELSIF P_REGISTER_TYPE = 'C' THEN
      LV_REGISTER_TYPE := 'RG23C';
    ELSE
      LV_REGISTER_TYPE := 'XXXX';
    END IF;
    OPEN C_PERIOD_BAL(P_ORGANIZATION_ID,P_LOCATION_ID,LV_REGISTER_TYPE,P_TRN_FROM_DATE);
    FETCH C_PERIOD_BAL
     INTO R_PERIOD_BAL;
    CLOSE C_PERIOD_BAL;
    IF R_PERIOD_BAL.ORGANIZATION_ID IS NULL THEN
      OPEN C_MAX_PERIOD_BAL(P_ORGANIZATION_ID,P_LOCATION_ID,LV_REGISTER_TYPE);
      FETCH C_MAX_PERIOD_BAL
       INTO R_PERIOD_BAL;
      CLOSE C_MAX_PERIOD_BAL;
      LD_DELTA_START_DATE := R_PERIOD_BAL.END_DATE;
      LN_DELTA_OPENING_BAL := R_PERIOD_BAL.CLOSING_BALANCE + NVL(R_PERIOD_BAL.MISC_ADJUSTMENT
                                 ,0) + R_PERIOD_BAL.ROUNDING_ADJUSTMENT + NVL(R_PERIOD_BAL.CUMULATIVE_MISC_ADJUSTMENT
                                 ,0) + R_PERIOD_BAL.CUMULATIVE_ROUNDING_ADJUSTMENT;
      LN_DELTA_EXC_EDU_CESS_OP_BAL := R_PERIOD_BAL.EXC_EDU_CESS_CL_BAL + NVL(R_PERIOD_BAL.EXC_EDU_CESS_ADJ
                                         ,0) + NVL(R_PERIOD_BAL.EXC_EDU_CESS_ADJ_OP_BAL
                                         ,0);
      LN_DELTA_CVD_EDU_CESS_OP_BAL := R_PERIOD_BAL.CVD_EDU_CESS_CL_BAL + NVL(R_PERIOD_BAL.CVD_EDU_CESS_ADJ
                                         ,0) + NVL(R_PERIOD_BAL.CVD_EDU_CESS_ADJ_OP_BAL
                                         ,0);
      LN_DE_EXC_EDU_SH_CESS_OP_BAL := R_PERIOD_BAL.SH_EXC_EDU_CESS_CL_BAL + NVL(R_PERIOD_BAL.SH_EXC_EDU_CESS_ADJ
                                         ,0) + NVL(R_PERIOD_BAL.SH_EXC_EDU_CESS_ADJ_OP_BAL
                                         ,0);
      LN_DE_CVD_EDU_SH_CESS_OP_BAL := R_PERIOD_BAL.SH_CVD_EDU_CESS_CL_BAL + NVL(R_PERIOD_BAL.SH_CVD_EDU_CESS_ADJ
                                         ,0) + NVL(R_PERIOD_BAL.SH_CVD_EDU_CESS_ADJ_OP_BAL
                                         ,0);
    ELSE
      LD_DELTA_START_DATE := R_PERIOD_BAL.START_DATE - 1;
      LN_DELTA_OPENING_BAL := R_PERIOD_BAL.OPENING_BALANCE + R_PERIOD_BAL.CUMULATIVE_MISC_ADJUSTMENT + R_PERIOD_BAL.CUMULATIVE_ROUNDING_ADJUSTMENT;
      LN_DELTA_EXC_EDU_CESS_OP_BAL := JAI_CMN_RG_PERIOD_BALS_PKG.GET_CESS_OPENING_BALANCE(CP_ORGANIZATION_ID => R_PERIOD_BAL.ORGANIZATION_ID
                                                                                         ,CP_LOCATION_ID => R_PERIOD_BAL.LOCATION_ID
                                                                                         ,CP_REGISTER_TYPE => R_PERIOD_BAL.REGISTER_TYPE
                                                                                         ,CP_PERIOD_START_DATE => R_PERIOD_BAL.START_DATE
                                                                                         ,CP_TAX_TYPE => 'EXCISE_EDUCATION_CESS') + NVL(R_PERIOD_BAL.EXC_EDU_CESS_ADJ_OP_BAL
                                         ,0);
      LN_DELTA_CVD_EDU_CESS_OP_BAL := JAI_CMN_RG_PERIOD_BALS_PKG.GET_CESS_OPENING_BALANCE(CP_ORGANIZATION_ID => R_PERIOD_BAL.ORGANIZATION_ID
                                                                                         ,CP_LOCATION_ID => R_PERIOD_BAL.LOCATION_ID
                                                                                         ,CP_REGISTER_TYPE => R_PERIOD_BAL.REGISTER_TYPE
                                                                                         ,CP_PERIOD_START_DATE => R_PERIOD_BAL.START_DATE
                                                                                         ,CP_TAX_TYPE => 'CVD_EDUCATION_CESS') + NVL(R_PERIOD_BAL.CVD_EDU_CESS_ADJ_OP_BAL
                                         ,0);
      LN_DE_EXC_EDU_SH_CESS_OP_BAL := JAI_CMN_RG_PERIOD_BALS_PKG.GET_CESS_OPENING_BALANCE(CP_ORGANIZATION_ID => R_PERIOD_BAL.ORGANIZATION_ID
                                                                                         ,CP_LOCATION_ID => R_PERIOD_BAL.LOCATION_ID
                                                                                         ,CP_REGISTER_TYPE => R_PERIOD_BAL.REGISTER_TYPE
                                                                                         ,CP_PERIOD_START_DATE => R_PERIOD_BAL.START_DATE
                                                                                         ,CP_TAX_TYPE => 'EXCISE_SH_EDU_CESS') + NVL(R_PERIOD_BAL.SH_EXC_EDU_CESS_ADJ_OP_BAL
                                         ,0);
      LN_DE_CVD_EDU_SH_CESS_OP_BAL := JAI_CMN_RG_PERIOD_BALS_PKG.GET_CESS_OPENING_BALANCE(CP_ORGANIZATION_ID => R_PERIOD_BAL.ORGANIZATION_ID
                                                                                         ,CP_LOCATION_ID => R_PERIOD_BAL.LOCATION_ID
                                                                                         ,CP_REGISTER_TYPE => R_PERIOD_BAL.REGISTER_TYPE
                                                                                         ,CP_PERIOD_START_DATE => R_PERIOD_BAL.START_DATE
                                                                                         ,CP_TAX_TYPE => 'CVD_SH_EDU_CESS') + NVL(R_PERIOD_BAL.SH_CVD_EDU_CESS_ADJ_OP_BAL
                                         ,0);
    END IF;
    IF R_PERIOD_BAL.START_DATE IS NOT NULL THEN
      LN_REPORT_START_DATE := TO_NUMBER(TO_CHAR(P_TRN_FROM_DATE
                                               ,'yyyymm'));
      LN_BALANCES_END_DATE := TO_NUMBER(TO_CHAR(ADD_MONTHS(R_PERIOD_BAL.END_DATE
                                                          ,1)
                                               ,'yyyymm'));
      /*SRW.MESSAGE(1275
                 ,'ln_report_start_date->' || LN_REPORT_START_DATE || ', ln_balances_end_date->' || LN_BALANCES_END_DATE || ', ld_delta_start_date->' || LD_DELTA_START_DATE)*/NULL;
      IF LN_REPORT_START_DATE > LN_BALANCES_END_DATE THEN
        LV_MESSAGE := 'Please submit the request for India - RG23 Period Balances request and then fire the request for this report';
      END IF;
      LD_BALANCES_START_DATE := R_PERIOD_BAL.START_DATE;
    ELSE
      LV_MESSAGE := 'Please submit the request for India - RG23 Period Balances request and then fire the request for this report';
    END IF;
    IF LV_MESSAGE IS NOT NULL THEN
      /*SRW.MESSAGE(1275
                 ,'-------------------------Error Message--------------------------')*/NULL;
      /*SRW.MESSAGE(1275
                 ,LV_MESSAGE)*/NULL;
      /*SRW.MESSAGE(1275
                 ,'----------------------------------------------------------------')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    SELECT
      SUM(NVL(CR_BASIC_ED
             ,0) + NVL(CR_ADDITIONAL_ED
             ,0) + NVL(CR_ADDITIONAL_CVD
             ,0) + NVL(CR_OTHER_ED
             ,0) - NVL(DR_BASIC_ED
             ,0) - NVL(DR_ADDITIONAL_ED
             ,0) - NVL(DR_ADDITIONAL_CVD
             ,0) - NVL(DR_OTHER_ED
             ,0))
    INTO LN_DELTA_AMOUNT
    FROM
      JAI_CMN_RG_23AC_II_TRXS
    WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
      AND LOCATION_ID = P_LOCATION_ID
      AND REGISTER_TYPE = P_REGISTER_TYPE
      AND TRUNC(CREATION_DATE) > LD_DELTA_START_DATE
      AND TRUNC(CREATION_DATE) < P_TRN_FROM_DATE;
    /*SRW.MESSAGE(1275
               ,'start_date:' || LD_DELTA_START_DATE || ', endDate:' || P_TRN_FROM_DATE || ', ln_delta_amount->' || LN_DELTA_AMOUNT)*/NULL;
    P_OPEN_BAL := LN_DELTA_OPENING_BAL + NVL(LN_DELTA_AMOUNT
                     ,0);
    OPEN C_GET_CESS_DELTA_BAL(LD_DELTA_START_DATE,'EXCISE_EDUCATION_CESS');
    FETCH C_GET_CESS_DELTA_BAL
     INTO LN_EXC_CESS_DELTA_AMOUNT;
    CLOSE C_GET_CESS_DELTA_BAL;
    P_EXC_EDU_CESS_OP_BAL := NVL(LN_DELTA_EXC_EDU_CESS_OP_BAL
                                ,0) + NVL(LN_EXC_CESS_DELTA_AMOUNT
                                ,0);
    OPEN C_GET_CESS_DELTA_BAL(LD_DELTA_START_DATE,'EXCISE_SH_EDU_CESS');
    FETCH C_GET_CESS_DELTA_BAL
     INTO LN_EXC_SH_CESS_DELTA_AMOUNT;
    CLOSE C_GET_CESS_DELTA_BAL;
    P_EXC_EDU_SH_CESS_OP_BAL := NVL(LN_DE_EXC_EDU_SH_CESS_OP_BAL
                                   ,0) + NVL(LN_EXC_SH_CESS_DELTA_AMOUNT
                                   ,0);
    OPEN C_GET_CESS_DELTA_BAL(LD_DELTA_START_DATE,'CVD_EDUCATION_CESS');
    FETCH C_GET_CESS_DELTA_BAL
     INTO LN_CVD_CESS_DELTA_AMOUNT;
    CLOSE C_GET_CESS_DELTA_BAL;
    P_CVD_EDU_CESS_OP_BAL := NVL(LN_DELTA_CVD_EDU_CESS_OP_BAL
                                ,0) + NVL(LN_CVD_CESS_DELTA_AMOUNT
                                ,0);
    OPEN C_GET_CESS_DELTA_BAL(LD_DELTA_START_DATE,'CVD_SH_EDU_CESS');
    FETCH C_GET_CESS_DELTA_BAL
     INTO LN_CVD_SH_CESS_DELTA_AMOUNT;
    CLOSE C_GET_CESS_DELTA_BAL;
    P_CVD_EDU_SH_CESS_OP_BAL := NVL(LN_DE_CVD_EDU_SH_CESS_OP_BAL
                                   ,0) + NVL(LN_CVD_SH_CESS_DELTA_AMOUNT
                                   ,0);
    /*SRW.MESSAGE(1275
               ,'ExcCessOpBal->' || LN_DELTA_EXC_EDU_CESS_OP_BAL || ', CvdCessOpBal->' || LN_DELTA_CVD_EDU_CESS_OP_BAL || 'ExcCessDelta:' || LN_EXC_CESS_DELTA_AMOUNT || ', CvdCessDelta:' || LN_CVD_CESS_DELTA_AMOUNT)*/NULL;
    IF P_TRN_FROM_DATE IS NOT NULL AND P_TRN_TO_DATE IS NOT NULL THEN
      IF P_TRN_FROM_DATE = P_TRN_TO_DATE THEN
        P_QUERY_CONCAT := 'AND trunc(a.creation_date) = :p_trn_from_date ' || ' ' || NL;
      ELSE
        P_QUERY_CONCAT := 'AND trunc(a.creation_date) between :p_trn_from_date and :p_trn_to_date' || ' ' || NL;
      END IF;
    ELSIF P_TRN_FROM_DATE IS NOT NULL AND P_TRN_TO_DATE IS NULL THEN
      P_QUERY_CONCAT := 'AND trunc(a.creation_date) >= :p_trn_from_date ' || ' ' || NL;
    ELSIF P_TRN_FROM_DATE IS NULL AND P_TRN_TO_DATE IS NOT NULL THEN
      P_QUERY_CONCAT := 'AND trunc(a.creation_date) <= :p_trn_to_date ' || ' ' || NL;
      ELSIF P_TRN_FROM_DATE IS NULL AND P_TRN_TO_DATE IS  NULL THEN
      P_QUERY_CONCAT := 'AND 1=1';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_ORGN_DTLS(CP_ORGANIZATION_ID IN NUMBER,CP_LOCATION_ID IN NUMBER) IS
      SELECT
        B.NAME,
        C.DESCRIPTION,
        C.ADDRESS_LINE_1,
        C.ADDRESS_LINE_2,
        C.ADDRESS_LINE_3,
        D.EXCISE_DUTY_RANGE,
        D.EXCISE_DUTY_DIVISION,
        D.EXCISE_DUTY_COMM,
        D.EXCISE_DUTY_CIRCLE,
        D.EC_CODE
      FROM
        JAI_CMN_INVENTORY_ORGS D,
        HR_ALL_ORGANIZATION_UNITS B,
        HR_LOCATIONS C
      WHERE D.ORGANIZATION_ID = CP_ORGANIZATION_ID
        AND D.LOCATION_ID = CP_LOCATION_ID
        AND D.ORGANIZATION_ID = B.ORGANIZATION_ID
        AND D.LOCATION_ID = C.LOCATION_ID;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_ORGN_DTLS(P_ORGANIZATION_ID,P_LOCATION_ID);
      FETCH C_ORGN_DTLS
       INTO C_NAME,C_DESCRIPTION,C_ADDRESS_LINE_1,C_ADDRESS_LINE_2,C_ADDRESS_LINE_3,C_EXCISERANGE,C_EXCISEDIVISION,C_EXCISECOMM,C_EXCISECIRCLE,C_EC_CODE;
      CLOSE C_ORGN_DTLS;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error while fetching setup details. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    CP_REPORT_TITLE := 'FORM R.G.23 ' || P_REGISTER_TYPE || ' PART II ';
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION CF_DIVISION_NOFORMULA(VENDOR_ID IN NUMBER
                                ,VENDOR_SITE_ID IN NUMBER
                                ,RECEIPT_ID IN VARCHAR2
                                ,DIVISION_NO IN VARCHAR2) RETURN CHAR IS
    CURSOR C_DIVISION_NO_FOR_ISO IS
      SELECT
        EXCISE_DUTY_DIVISION
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = ABS(VENDOR_ID)
        AND LOCATION_ID = ABS(VENDOR_SITE_ID);
    CURSOR INT_ORDER_CUR(P_RECEIPT_ID IN VARCHAR2,CP_TRANSACTION_TYPE IN RCV_TRANSACTIONS.TRANSACTION_TYPE%TYPE,CP_RCPT_SRC_CODE IN RCV_SHIPMENT_HEADERS.RECEIPT_SOURCE_CODE%TYPE) IS
      SELECT
        DISTINCT
        JU.EXCISE_DUTY_DIVISION
      FROM
        RCV_TRANSACTIONS RCVT,
        RCV_SHIPMENT_HEADERS RCVSH,
        JAI_CMN_INVENTORY_ORGS JU
      WHERE RCVT.TRANSACTION_ID = P_RECEIPT_ID
        AND RCVT.TRANSACTION_TYPE = CP_TRANSACTION_TYPE
        AND RCVT.SHIPMENT_HEADER_ID = RCVSH.SHIPMENT_HEADER_ID
        AND RCVSH.RECEIPT_SOURCE_CODE = CP_RCPT_SRC_CODE
        AND RCVSH.ORGANIZATION_ID = JU.ORGANIZATION_ID;
    V_DIVISION_NO JAI_CMN_INVENTORY_ORGS.EXCISE_DUTY_DIVISION%TYPE;
  BEGIN
    IF VENDOR_ID < 0 THEN
      OPEN C_DIVISION_NO_FOR_ISO;
      FETCH C_DIVISION_NO_FOR_ISO
       INTO V_DIVISION_NO;
      CLOSE C_DIVISION_NO_FOR_ISO;
      RETURN V_DIVISION_NO;
    ELSIF VENDOR_ID IS NULL THEN
      OPEN INT_ORDER_CUR(RECEIPT_ID,'RECEIVE','INTERNAL ORDER');
      FETCH INT_ORDER_CUR
       INTO V_DIVISION_NO;
      CLOSE INT_ORDER_CUR;
      RETURN V_DIVISION_NO;
    ELSE
      RETURN DIVISION_NO;
    END IF;
  END CF_DIVISION_NOFORMULA;
  FUNCTION CF_RANGE_NOFORMULA(VENDOR_ID IN NUMBER
                             ,VENDOR_SITE_ID IN NUMBER
                             ,RECEIPT_ID IN VARCHAR2
                             ,RANGE_NO IN VARCHAR2) RETURN CHAR IS
    CURSOR C_RANGE_NO_FOR_ISO IS
      SELECT
        EXCISE_DUTY_RANGE
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = ABS(VENDOR_ID)
        AND LOCATION_ID = ABS(VENDOR_SITE_ID);
    CURSOR INT_ORDER_CUR(P_RECEIPT_ID IN VARCHAR2,CP_TRANSACTION_TYPE IN RCV_TRANSACTIONS.TRANSACTION_TYPE%TYPE,CP_RCPT_SRC_CODE IN RCV_SHIPMENT_HEADERS.RECEIPT_SOURCE_CODE%TYPE) IS
      SELECT
        DISTINCT
        JU.EXCISE_DUTY_RANGE
      FROM
        RCV_TRANSACTIONS RCVT,
        RCV_SHIPMENT_HEADERS RCVSH,
        JAI_CMN_INVENTORY_ORGS JU
      WHERE RCVT.TRANSACTION_ID = P_RECEIPT_ID
        AND RCVT.TRANSACTION_TYPE = CP_TRANSACTION_TYPE
        AND RCVT.SHIPMENT_HEADER_ID = RCVSH.SHIPMENT_HEADER_ID
        AND RCVSH.RECEIPT_SOURCE_CODE = CP_RCPT_SRC_CODE
        AND RCVSH.ORGANIZATION_ID = JU.ORGANIZATION_ID;
    V_RANGE_NO JAI_CMN_INVENTORY_ORGS.EXCISE_DUTY_RANGE%TYPE;
  BEGIN
    IF VENDOR_ID < 0 THEN
      OPEN C_RANGE_NO_FOR_ISO;
      FETCH C_RANGE_NO_FOR_ISO
       INTO V_RANGE_NO;
      CLOSE C_RANGE_NO_FOR_ISO;
      RETURN V_RANGE_NO;
    ELSIF VENDOR_ID IS NULL THEN
      OPEN INT_ORDER_CUR(RECEIPT_ID,'RECEIVE','INTERNAL ORDER');
      FETCH INT_ORDER_CUR
       INTO V_RANGE_NO;
      CLOSE INT_ORDER_CUR;
      RETURN V_RANGE_NO;
    ELSE
      RETURN RANGE_NO;
    END IF;
  END CF_RANGE_NOFORMULA;
  FUNCTION CF_EC_CODE_SUPPFORMULA(VENDOR_ID IN NUMBER
                                 ,VENDOR_SITE_ID IN NUMBER
                                 ,CR_BASIC_ED IN NUMBER
                                 ,CR_ADDITIONAL_ED IN NUMBER
                                 ,CR_ADDITIONAL_CVD IN NUMBER
                                 ,CR_OTHER_ED IN NUMBER
                                 ,RECEIPT_ID IN VARCHAR2) RETURN VARCHAR2 IS
    CURSOR C_FETCH_EC_CODE IS
      SELECT
        EC_CODE
      FROM
        JAI_CMN_VENDOR_SITES
      WHERE VENDOR_ID = VENDOR_ID
        AND VENDOR_SITE_ID = VENDOR_SITE_ID;
    CURSOR C_FETCH_EC_CODE_FOR_ISO IS
      SELECT
        EC_CODE
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = ABS(VENDOR_ID)
        AND LOCATION_ID = ABS(VENDOR_SITE_ID);
    CURSOR INT_ORDER_CUR(P_RECEIPT_ID IN VARCHAR2,CP_TRANSACTION_TYPE IN RCV_TRANSACTIONS.TRANSACTION_TYPE%TYPE,CP_RCPT_SRC_CODE IN RCV_SHIPMENT_HEADERS.RECEIPT_SOURCE_CODE%TYPE) IS
      SELECT
        DISTINCT
        JU.EC_CODE
      FROM
        RCV_TRANSACTIONS RCVT,
        RCV_SHIPMENT_HEADERS RCVSH,
        JAI_CMN_INVENTORY_ORGS JU
      WHERE RCVT.TRANSACTION_ID = P_RECEIPT_ID
        AND RCVT.TRANSACTION_TYPE = CP_TRANSACTION_TYPE
        AND RCVT.SHIPMENT_HEADER_ID = RCVSH.SHIPMENT_HEADER_ID
        AND RCVSH.RECEIPT_SOURCE_CODE = CP_RCPT_SRC_CODE
        AND RCVSH.ORGANIZATION_ID = JU.ORGANIZATION_ID;
    V_EC_CODE_SUP JAI_CMN_VENDOR_SITES.EC_CODE%TYPE;
  BEGIN
    IF (NVL(CR_BASIC_ED
       ,0) + NVL(CR_ADDITIONAL_ED
       ,0) + NVL(CR_ADDITIONAL_CVD
       ,0) + NVL(CR_OTHER_ED
       ,0) > 0) THEN
      IF VENDOR_ID IS NOT NULL THEN
        BEGIN
          IF VENDOR_ID < 0 THEN
            OPEN C_FETCH_EC_CODE_FOR_ISO;
            FETCH C_FETCH_EC_CODE_FOR_ISO
             INTO V_EC_CODE_SUP;
            CLOSE C_FETCH_EC_CODE_FOR_ISO;
          ELSE
            OPEN C_FETCH_EC_CODE;
            FETCH C_FETCH_EC_CODE
             INTO V_EC_CODE_SUP;
            CLOSE C_FETCH_EC_CODE;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            V_EC_CODE_SUP := '';
        END;
      ELSE
        OPEN INT_ORDER_CUR(RECEIPT_ID,'RECEIVE','INTERNAL ORDER');
        FETCH INT_ORDER_CUR
         INTO V_EC_CODE_SUP;
        CLOSE INT_ORDER_CUR;
      END IF;
    END IF;
    RETURN (V_EC_CODE_SUP);
  END CF_EC_CODE_SUPPFORMULA;
  FUNCTION CF_EC_CODE_CUSTFORMULA(CUSTOMER_ID_1 IN NUMBER
                                 ,CUSTOMER_SITE_ID IN NUMBER
                                 ,DR_BASIC_ED IN NUMBER
                                 ,DR_ADDITIONAL_ED IN NUMBER
                                 ,DR_OTHER_ED IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_ECCODE_CUSTOMER IS
      SELECT
        EC_CODE
      FROM
        JAI_CMN_CUS_ADDRESSES
      WHERE CUSTOMER_ID = CUSTOMER_ID_1
        AND ADDRESS_ID = CUSTOMER_SITE_ID;
    V_EC_CODE_CUS JAI_CMN_CUS_ADDRESSES.EC_CODE%TYPE;
  BEGIN
    IF (NVL(DR_BASIC_ED
       ,0) + NVL(DR_ADDITIONAL_ED
       ,0) + NVL(DR_OTHER_ED
       ,0) > 0) THEN
      BEGIN
        OPEN C_ECCODE_CUSTOMER;
        FETCH C_ECCODE_CUSTOMER
         INTO V_EC_CODE_CUS;
        CLOSE C_ECCODE_CUSTOMER;
      EXCEPTION
        WHEN OTHERS THEN
          V_EC_CODE_CUS := '';
      END;
    END IF;
    RETURN (V_EC_CODE_CUS);
  END CF_EC_CODE_CUSTFORMULA;
  FUNCTION CF_SEQUENCE_NOFORMULA RETURN NUMBER IS
  BEGIN
    P_REPORT_SEQ_NO := P_REPORT_SEQ_NO + 1;
    RETURN (P_REPORT_SEQ_NO);
  END CF_SEQUENCE_NOFORMULA;
  FUNCTION CF_ROUNDING_AMOUNTFORMULA(TRANSACTION_ID IN NUMBER
                                    ,EXCISE_INVOICE_NO IN VARCHAR2
                                    ,EXCISE_INVOICE_DATE IN DATE
                                    ,RECEIPT_ID IN VARCHAR2) RETURN NUMBER IS
    CURSOR C_CHK_PARENT_INCLUDED(P_REGISTER_ID IN NUMBER) IS
      SELECT
        COUNT(1)
      FROM
        JAI_CMN_RG_23AC_II_TRXS A
      WHERE A.ORGANIZATION_ID = P_ORGANIZATION_ID
        AND A.LOCATION_ID = P_LOCATION_ID
        AND REGISTER_TYPE = P_REGISTER_TYPE
        AND A.INVENTORY_ITEM_ID <> 0
        AND REGISTER_ID = P_REGISTER_ID
        AND TRUNC(CREATION_DATE) BETWEEN P_TRN_FROM_DATE
        AND P_TRN_TO_DATE;
    V_ROUND_AMOUNT JAI_CMN_RG_23AC_II_TRXS.CR_BASIC_ED%TYPE := 0;
    V_RND_ENTRY_CNT NUMBER;
    V_PARENT_REGISTER_ID NUMBER;
    V_PARENT_INCLUDED_CNT NUMBER;
    V_TOTAL_ROUND_AMOUNT NUMBER := 0;
    LN_EXCISE_CESS NUMBER := 0;
    LN_CVD_CESS NUMBER := 0;
    CURSOR C_ROUNDED_EXCISE_CESS(CP_REGISTER_ID IN NUMBER,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(DEBIT
           ,0) - NVL(CREDIT
           ,0)
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = CP_REGISTER_ID
        AND SOURCE_TYPE = 1
        AND TAX_TYPE = CP_TAX_TYPE;
    CURSOR C_ROUNDED_CVD_CESS(CP_REGISTER_ID IN NUMBER,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(DEBIT
           ,0) - NVL(CREDIT
           ,0)
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = CP_REGISTER_ID
        AND SOURCE_TYPE = 1
        AND TAX_TYPE = CP_TAX_TYPE;
    CURSOR C_RCV_TRX_TYPE(CP_TRANSACTION_ID IN NUMBER) IS
      SELECT
        TRANSACTION_TYPE,
        PARENT_TRANSACTION_TYPE
      FROM
        JAI_RCV_TRANSACTIONS
      WHERE TRANSACTION_ID = CP_TRANSACTION_ID;
    R_RCV_TRX_TYPE C_RCV_TRX_TYPE%ROWTYPE;
  BEGIN
    IF TRANSACTION_ID = 18 THEN
      CP_ADDITIONAL_ROUNDING := 0;
      CP_ADDITIONALCVD_ROUNDING := 0;
      CP_OTHER_ROUNDING := 0;
      CP_ROUNDED_EXCISE_CESS := 0;
      CP_ROUNDED_CVD_CESS := 0;
      FOR rnd_rec IN (SELECT
                        REGISTER_ID,
                        NVL(CR_BASIC_ED
                           ,0) - NVL(DR_BASIC_ED
                           ,0) AMOUNT,
                        NVL(CR_ADDITIONAL_ED
                           ,0) - NVL(DR_ADDITIONAL_ED
                           ,0) ADDITIONAL_AMOUNT,
                        NVL(CR_ADDITIONAL_CVD
                           ,0) - NVL(DR_ADDITIONAL_CVD
                           ,0) ADDITIONALCVD_AMOUNT,
                        NVL(CR_OTHER_ED
                           ,0) - NVL(DR_OTHER_ED
                           ,0) OTHER_AMOUNT
                      FROM
                        JAI_CMN_RG_23AC_II_TRXS
                      WHERE EXCISE_INVOICE_NO = CF_ROUNDING_AMOUNTFORMULA.EXCISE_INVOICE_NO
                        AND EXCISE_INVOICE_DATE = CF_ROUNDING_AMOUNTFORMULA.EXCISE_INVOICE_DATE
                        AND INVENTORY_ITEM_ID = 0
                        AND TRANSACTION_SOURCE_NUM = 18
                        AND REGISTER_TYPE = P_REGISTER_TYPE) LOOP
        V_PARENT_INCLUDED_CNT := 0;
        V_PARENT_REGISTER_ID := JAI_RCV_RND_PKG.GET_PARENT_REGISTER_ID(RND_REC.REGISTER_ID);
        OPEN C_CHK_PARENT_INCLUDED(V_PARENT_REGISTER_ID);
        FETCH C_CHK_PARENT_INCLUDED
         INTO V_PARENT_INCLUDED_CNT;
        CLOSE C_CHK_PARENT_INCLUDED;
        /*SRW.MESSAGE('1275'
                   ,'v_parent_included_cnt is :' || V_PARENT_INCLUDED_CNT || 'For register id ' || RND_REC.REGISTER_ID)*/NULL;
        IF V_PARENT_INCLUDED_CNT > 0 THEN
          OPEN C_ROUNDED_EXCISE_CESS(RND_REC.REGISTER_ID,'EXCISE_EDUCATION_CESS');
          FETCH C_ROUNDED_EXCISE_CESS
           INTO LN_EXCISE_CESS;
          CLOSE C_ROUNDED_EXCISE_CESS;
          OPEN C_ROUNDED_CVD_CESS(RND_REC.REGISTER_ID,'CVD_EDUCATION_CESS');
          FETCH C_ROUNDED_CVD_CESS
           INTO LN_CVD_CESS;
          CLOSE C_ROUNDED_CVD_CESS;
          V_TOTAL_ROUND_AMOUNT := V_TOTAL_ROUND_AMOUNT + RND_REC.AMOUNT;
          CP_ADDITIONAL_ROUNDING := NVL(CP_ADDITIONAL_ROUNDING
                                       ,0) + RND_REC.ADDITIONAL_AMOUNT;
          CP_ADDITIONALCVD_ROUNDING := NVL(CP_ADDITIONALCVD_ROUNDING
                                          ,0) + RND_REC.ADDITIONALCVD_AMOUNT;
          CP_OTHER_ROUNDING := NVL(CP_OTHER_ROUNDING
                                  ,0) + RND_REC.OTHER_AMOUNT;
          CP_ROUNDED_EXCISE_CESS := LN_EXCISE_CESS;
          CP_ROUNDED_CVD_CESS := LN_CVD_CESS;
          /*SRW.MESSAGE('1275'
                     ,'Excise Cess amount is  : ' || LN_EXCISE_CESS || ' CVD Cess amount is ' || LN_CVD_CESS || 'for register id :' || RND_REC.REGISTER_ID)*/NULL;
        END IF;
        /*SRW.MESSAGE('1000'
                   ,'Rounding Amount for Excise In No: ' || EXCISE_INVOICE_NO || ' is = ' || V_ROUND_AMOUNT)*/NULL;
      END LOOP;
      OPEN C_RCV_TRX_TYPE(RECEIPT_ID);
      FETCH C_RCV_TRX_TYPE
       INTO R_RCV_TRX_TYPE;
      CLOSE C_RCV_TRX_TYPE;
      IF R_RCV_TRX_TYPE.TRANSACTION_TYPE = 'RETURN TO VENDOR' OR R_RCV_TRX_TYPE.PARENT_TRANSACTION_TYPE = 'RETURN TO VENDOR' THEN
        CP_RND_DR_BASIC_ED := -V_TOTAL_ROUND_AMOUNT;
        CP_RND_DR_ADDL_ED := -CP_ADDITIONAL_ROUNDING;
        CP_RND_DR_ADDL_CVD := -CP_ADDITIONALCVD_ROUNDING;
        CP_RND_DR_OTHER_ED := -CP_OTHER_ROUNDING;
        CP_RND_DR_EXC_EDU_CESS := -CP_ROUNDED_EXCISE_CESS;
        CP_RND_DR_CVD_EDU_CESS := -CP_ROUNDED_CVD_CESS;
        V_TOTAL_ROUND_AMOUNT := 0;
        CP_ADDITIONAL_ROUNDING := 0;
        CP_ADDITIONALCVD_ROUNDING := 0;
        CP_OTHER_ROUNDING := 0;
        CP_ROUNDED_EXCISE_CESS := 0;
        CP_ROUNDED_CVD_CESS := 0;
      ELSE
        CP_RND_DR_BASIC_ED := 0;
        CP_RND_DR_ADDL_ED := 0;
        CP_RND_DR_ADDL_CVD := 0;
        CP_RND_DR_OTHER_ED := 0;
        CP_RND_DR_EXC_EDU_CESS := 0;
        CP_RND_DR_CVD_EDU_CESS := 0;
      END IF;
    ELSE
      CP_RND_DR_BASIC_ED := 0;
      CP_RND_DR_ADDL_ED := 0;
      CP_RND_DR_ADDL_CVD := 0;
      CP_RND_DR_OTHER_ED := 0;
      CP_RND_DR_EXC_EDU_CESS := 0;
      CP_RND_DR_CVD_EDU_CESS := 0;
      V_TOTAL_ROUND_AMOUNT := 0;
      CP_ADDITIONAL_ROUNDING := 0;
      CP_ADDITIONALCVD_ROUNDING := 0;
      CP_OTHER_ROUNDING := 0;
      CP_ROUNDED_EXCISE_CESS := 0;
      CP_ROUNDED_CVD_CESS := 0;
    END IF;
    RETURN (V_TOTAL_ROUND_AMOUNT);
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE('1001'
                 ,'Error In Rounding Calc')*/NULL;
      RETURN 0;
  END CF_ROUNDING_AMOUNTFORMULA;
  FUNCTION CF_CR_BASIC_EDFORMULA(CR_BASIC_ED IN NUMBER
                                ,CF_ROUNDING_AMOUNT IN NUMBER) RETURN NUMBER IS
    V_CR_BASIC_ED NUMBER;
  BEGIN
    V_CR_BASIC_ED := CR_BASIC_ED;
    IF NVL(CF_ROUNDING_AMOUNT
       ,0) <> 0 THEN
      /*SRW.MESSAGE('1002'
                 ,'Rounding Amount = ' || CF_ROUNDING_AMOUNT)*/NULL;
      V_CR_BASIC_ED := CR_BASIC_ED + CF_ROUNDING_AMOUNT;
      RETURN (V_CR_BASIC_ED);
    END IF;
    RETURN (V_CR_BASIC_ED);
  END CF_CR_BASIC_EDFORMULA;
  FUNCTION CF_RECEIPT_NUMFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                                ,EXCISE_INVOICE_DATE_1 IN DATE
                                ,RECEIPT_ID IN VARCHAR2
                                ,TRANSACTION_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_GET_REMARKS IS
      SELECT
        REMARKS
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE ( EXCISE_INVOICE_NO IS NULL
      OR EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 )
        AND ( EXCISE_INVOICE_DATE IS NULL
      OR EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 )
        AND REGISTER_TYPE = P_REGISTER_TYPE
        AND ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID
        AND INVENTORY_ITEM_ID <> 0
        AND RECEIPT_REF = CF_RECEIPT_NUMFORMULA.RECEIPT_ID
        AND TRUNC(CREATION_DATE) between NVL(P_TRN_FROM_DATE
         ,TRUNC(CREATION_DATE))
        AND NVL(P_TRN_TO_DATE
         ,TRUNC(CREATION_DATE))
        AND TRANSACTION_SOURCE_NUM = CF_RECEIPT_NUMFORMULA.TRANSACTION_ID;
    CURSOR C_GET_RECEIPT_NUM IS
      SELECT
        RCV.RECEIPT_NUM
      FROM
        RCV_SHIPMENT_HEADERS RCV,
        RCV_TRANSACTIONS RTRAN
      WHERE rtran.transaction_id (+) = RECEIPT_ID
        AND rcv.shipment_header_id (+) = RTRAN.SHIPMENT_HEADER_ID;
    V_RECEIPT_NUM RCV_SHIPMENT_HEADERS.RECEIPT_NUM%TYPE;
    LV_REMARKS JAI_CMN_RG_23AC_II_TRXS.REMARKS%TYPE;
  BEGIN
    V_RECEIPT_NUM := ' ';
    LV_REMARKS := '';
    BEGIN
      OPEN C_GET_REMARKS;
      FETCH C_GET_REMARKS
       INTO LV_REMARKS;
      CLOSE C_GET_REMARKS;
      IF LV_REMARKS = 'RG Funds Transfer' THEN
        V_RECEIPT_NUM := ' ';
      ELSE
        OPEN C_GET_RECEIPT_NUM;
        FETCH C_GET_RECEIPT_NUM
         INTO V_RECEIPT_NUM;
        CLOSE C_GET_RECEIPT_NUM;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        V_RECEIPT_NUM := '';
    END;
    RETURN (V_RECEIPT_NUM);
  END CF_RECEIPT_NUMFORMULA;
  FUNCTION CF_FOLIO_PART_IFORMULA(P_EXCISE_INVOICE_NO IN VARCHAR2
                                 ,P_EXCISE_INVOICE_DATE IN DATE) RETURN VARCHAR2 IS
    V_CONCATENATED_FOLIO_PARTI VARCHAR2(500);
    CURSOR C_GET_FOLIO_PART_I IS
      SELECT
        RG23_1.INVENTORY_ITEM_ID || '-' || RG23_1.SLNO FOLIO
      FROM
        JAI_CMN_RG_23AC_II_TRXS RG23_2,
        JAI_CMN_RG_23AC_I_TRXS RG23_1
      WHERE RG23_2.ORGANIZATION_ID = P_ORGANIZATION_ID
        AND RG23_2.LOCATION_ID = P_LOCATION_ID
        AND RG23_2.EXCISE_INVOICE_NO = P_EXCISE_INVOICE_NO
        AND RG23_2.EXCISE_INVOICE_DATE = P_EXCISE_INVOICE_DATE
        AND rg23_2.register_id_part_i (+) = RG23_1.REGISTER_ID
        AND RG23_2.INVENTORY_ITEM_ID = RG23_1.INVENTORY_ITEM_ID
        AND RG23_2.INVENTORY_ITEM_ID <> 0
      UNION
      SELECT
        (RG_1.INVENTORY_ITEM_ID || '-' || RG_1.SLNO) FOLIO
      FROM
        JAI_CMN_RG_23AC_II_TRXS RG23_2,
        JAI_CMN_RG_I_TRXS RG_1
      WHERE RG23_2.ORGANIZATION_ID = P_ORGANIZATION_ID
        AND RG23_2.LOCATION_ID = P_LOCATION_ID
        AND RG23_2.EXCISE_INVOICE_NO = P_EXCISE_INVOICE_NO
        AND RG23_2.EXCISE_INVOICE_DATE = P_EXCISE_INVOICE_DATE
        AND rg23_2.register_id_part_i (+) = RG_1.REGISTER_ID
        AND RG23_2.INVENTORY_ITEM_ID = RG_1.INVENTORY_ITEM_ID
        AND RG23_2.INVENTORY_ITEM_ID <> 0;
  BEGIN
    FOR rec IN C_GET_FOLIO_PART_I LOOP
      IF V_CONCATENATED_FOLIO_PARTI IS NOT NULL THEN
        V_CONCATENATED_FOLIO_PARTI := V_CONCATENATED_FOLIO_PARTI || ',' || REC.FOLIO;
      ELSE
        V_CONCATENATED_FOLIO_PARTI := REC.FOLIO;
      END IF;
    END LOOP;
    RETURN V_CONCATENATED_FOLIO_PARTI;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      V_CONCATENATED_FOLIO_PARTI := ' ';
      RETURN V_CONCATENATED_FOLIO_PARTI;
  END CF_FOLIO_PART_IFORMULA;
  FUNCTION CF_CLOSING_BALFORMULA(CS_CR_BASIC_ED IN NUMBER
                                ,CS_CR_ADDL_ED IN NUMBER
                                ,CS_CR_OTHER_ED IN NUMBER
                                ,CS_CR_ADDL_CVD IN NUMBER
                                ,CS_DR_BASIC_ED IN NUMBER
                                ,CS_DR_ADDL_N_OTH IN NUMBER
                                ,CS_DR_ADDL_CVD IN NUMBER) RETURN NUMBER IS
    LN_CLOSING_BALANCE NUMBER;
  BEGIN
    LN_CLOSING_BALANCE := (P_OPEN_BAL + CS_CR_BASIC_ED + CS_CR_ADDL_ED + CS_CR_OTHER_ED + CS_CR_ADDL_CVD - CS_DR_BASIC_ED - CS_DR_ADDL_N_OTH - CS_DR_ADDL_CVD);
    RETURN LN_CLOSING_BALANCE;
  END CF_CLOSING_BALFORMULA;
  FUNCTION CF_EXC_CLOSING_BALANCEFORMULA(CS_CR_EXCISE IN NUMBER
                                        ,CS_DR_EXCISE IN NUMBER) RETURN NUMBER IS
    LN_EXC_CLOSING_BAL NUMBER;
  BEGIN
    LN_EXC_CLOSING_BAL := (CS_CR_EXCISE - CS_DR_EXCISE + P_EXC_EDU_CESS_OP_BAL);
    RETURN LN_EXC_CLOSING_BAL;
  END CF_EXC_CLOSING_BALANCEFORMULA;
  FUNCTION CF_CR_CVDFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                           ,EXCISE_INVOICE_DATE_1 IN DATE
                           ,VENDOR_ID_1 IN NUMBER
                           ,VENDOR_SITE_ID_1 IN NUMBER
                           ,CUSTOMER_ID_1 IN NUMBER
                           ,CUSTOMER_SITE_ID_1 IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CREDIT(CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        SUM(NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = DECODE(P_REGISTER_TYPE
            ,'A'
            ,'RG23A_P2'
            ,'C'
            ,'RG23C_P2')
        AND TAX_TYPE = CP_TAX_TYPE
        AND SOURCE_REGISTER_ID IN (
        SELECT
          REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS
        WHERE ( ( EXCISE_INVOICE_NO IS NULL
          AND EXCISE_INVOICE_NO IS NULL )
        OR ( EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 ) )
          AND ( ( EXCISE_INVOICE_DATE IS NULL
          AND EXCISE_INVOICE_DATE IS NULL )
        OR ( EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 ) )
          AND ( ( VENDOR_ID IS NULL
          AND VENDOR_ID IS NULL )
        OR ( VENDOR_ID = VENDOR_ID_1 ) )
          AND ( ( VENDOR_SITE_ID IS NULL
          AND VENDOR_SITE_ID IS NULL )
        OR ( VENDOR_SITE_ID = VENDOR_SITE_ID_1 ) )
          AND ( ( CUSTOMER_ID IS NULL
          AND CUSTOMER_ID IS NULL )
        OR ( CUSTOMER_ID = CUSTOMER_ID_1 ) )
          AND ( ( CUSTOMER_SITE_ID IS NULL
          AND CUSTOMER_SITE_ID IS NULL )
        OR ( CUSTOMER_SITE_ID = CUSTOMER_SITE_ID_1 ) )
          AND REGISTER_TYPE = P_REGISTER_TYPE
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID );
    V_CREDIT JAI_CMN_RG_OTHERS.CREDIT%TYPE;
  BEGIN
    OPEN CUR_CREDIT('CVD_EDUCATION_CESS');
    FETCH CUR_CREDIT
     INTO V_CREDIT;
    CLOSE CUR_CREDIT;
    RETURN NVL(V_CREDIT - NVL(CP_ROUNDED_CVD_CESS
                  ,0)
              ,0);
  END CF_CR_CVDFORMULA;


  FUNCTION CF_CR_EXCISEFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                              ,EXCISE_INVOICE_DATE_1 IN DATE
                              ,VENDOR_ID_1 IN NUMBER
                              ,VENDOR_SITE_ID_1 IN NUMBER
                              ,CUSTOMER_ID_1 IN NUMBER
                              ,CUSTOMER_SITE_ID_1 IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CREDIT(CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        SUM(NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = DECODE(P_REGISTER_TYPE
            ,'A'
            ,'RG23A_P2'
            ,'C'
            ,'RG23C_P2')
        AND TAX_TYPE = CP_TAX_TYPE
        AND SOURCE_REGISTER_ID IN (
        SELECT
          REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS
        WHERE ( ( EXCISE_INVOICE_NO IS NULL
          AND EXCISE_INVOICE_NO IS NULL )
        OR ( EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 ) )
          AND ( ( EXCISE_INVOICE_DATE IS NULL
          AND EXCISE_INVOICE_DATE IS NULL )
        OR ( EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 ) )
          AND ( ( VENDOR_ID IS NULL
          AND VENDOR_ID IS NULL )
        OR ( VENDOR_ID = VENDOR_ID_1 ) )
          AND ( ( VENDOR_SITE_ID IS NULL
          AND VENDOR_SITE_ID IS NULL )
        OR ( VENDOR_SITE_ID = VENDOR_SITE_ID_1 ) )
          AND ( ( CUSTOMER_ID IS NULL
          AND CUSTOMER_ID IS NULL )
        OR ( CUSTOMER_ID = CUSTOMER_ID_1 ) )
          AND ( ( CUSTOMER_SITE_ID IS NULL
          AND CUSTOMER_SITE_ID IS NULL )
        OR ( CUSTOMER_SITE_ID = CUSTOMER_SITE_ID_1 ) )
          AND REGISTER_TYPE = P_REGISTER_TYPE
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID );
    V_CREDIT JAI_CMN_RG_OTHERS.CREDIT%TYPE;
  BEGIN
    OPEN CUR_CREDIT('EXCISE_EDUCATION_CESS');
    FETCH CUR_CREDIT
     INTO V_CREDIT;
    CLOSE CUR_CREDIT;
    RETURN NVL(V_CREDIT - NVL(CP_ROUNDED_EXCISE_CESS
                  ,0)
              ,0);
  END CF_CR_EXCISEFORMULA;



  FUNCTION CF_DR_EXCISEFORMULA(OTHER_TAX_DEBIT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(OTHER_TAX_DEBIT
              ,0) - NVL(CP_RND_DR_EXC_EDU_CESS
              ,0) - NVL(CP_RND_DR_CVD_EDU_CESS
              ,0));
  END CF_DR_EXCISEFORMULA;
  FUNCTION CF_DR_CVDFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (0);
  END CF_DR_CVDFORMULA;


  FUNCTION CF_REGISTER_IDFORMULA(RECEIPT_ID IN VARCHAR2) RETURN NUMBER IS
    CURSOR CUR_REG_ID IS
      SELECT
        REGISTER_ID
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE RECEIPT_REF = RECEIPT_ID;
    LV_REG_ID JAI_CMN_RG_23AC_II_TRXS.REGISTER_ID%TYPE;
  BEGIN
    OPEN CUR_REG_ID;
    FETCH CUR_REG_ID
     INTO LV_REG_ID;
    CLOSE CUR_REG_ID;
    RETURN LV_REG_ID;
  END CF_REGISTER_IDFORMULA;
  FUNCTION CF_CVD_CLOSING_BALFORMULA(CS_CR_CVD IN NUMBER
                                    ,CS_DR_CVD IN NUMBER) RETURN NUMBER IS
    LN_CVD_CLOSING_BALANCE NUMBER;
  BEGIN
    LN_CVD_CLOSING_BALANCE := (CS_CR_CVD - CS_DR_CVD + P_CVD_EDU_CESS_OP_BAL);
    RETURN LN_CVD_CLOSING_BALANCE;
  END CF_CVD_CLOSING_BALFORMULA;
  FUNCTION CF_OTHER_AMOUNTFORMULA(CR_OTHER_ED IN NUMBER) RETURN NUMBER IS
    V_CR_OTHER_ED NUMBER;
  BEGIN
    V_CR_OTHER_ED := CR_OTHER_ED;
    IF NVL(CP_OTHER_ROUNDING
       ,0) <> 0 THEN
      /*SRW.MESSAGE('1002'
                 ,'Other Rounding Amount = ' || CP_OTHER_ROUNDING)*/NULL;
      V_CR_OTHER_ED := CR_OTHER_ED + CP_OTHER_ROUNDING;
      RETURN (V_CR_OTHER_ED);
    END IF;
    RETURN (V_CR_OTHER_ED);
  END CF_OTHER_AMOUNTFORMULA;
  FUNCTION CF_ADDITIONAL_AMOUNTFORMULA(CR_ADDITIONAL_ED IN NUMBER) RETURN NUMBER IS
    V_CR_ADDITIONAL_ED NUMBER;
  BEGIN
    V_CR_ADDITIONAL_ED := CR_ADDITIONAL_ED;
    IF NVL(CP_ADDITIONAL_ROUNDING
       ,0) <> 0 THEN
      /*SRW.MESSAGE('1002'
                 ,'additional Rounding Amount = ' || CP_ADDITIONAL_ROUNDING)*/NULL;
      V_CR_ADDITIONAL_ED := CR_ADDITIONAL_ED + CP_ADDITIONAL_ROUNDING;
      RETURN (V_CR_ADDITIONAL_ED);
    END IF;
    RETURN (V_CR_ADDITIONAL_ED);
  END CF_ADDITIONAL_AMOUNTFORMULA;
  FUNCTION CF_DR_BASIC_EDFORMULA(DR_BASIC_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN NVL(DR_BASIC_ED
              ,0) + NVL(CP_RND_DR_BASIC_ED
              ,0);
  END CF_DR_BASIC_EDFORMULA;
  FUNCTION CF_DR_ADDL_N_OTH_EDFORMULA(DR_ADDL_N_OTH_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_ADDL_N_OTH_ED
              ,0) + NVL(CP_RND_DR_ADDL_ED
              ,0) + NVL(CP_RND_DR_OTHER_ED
              ,0));
  END CF_DR_ADDL_N_OTH_EDFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION CF_ADDITIONALCVD_AMOUNTFORMULA(CR_ADDITIONAL_CVD IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CR_ADDITIONAL_CVD + NVL(CP_ADDITIONALCVD_ROUNDING
              ,0));
  END CF_ADDITIONALCVD_AMOUNTFORMULA;
  FUNCTION CF_DR_ADDL_CVDFORMULA(DR_ADDITIONAL_CVD IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_ADDITIONAL_CVD
              ,0) + NVL(CP_RND_DR_ADDL_CVD
              ,0));
  END CF_DR_ADDL_CVDFORMULA;
  FUNCTION CF_CR_SH_CVDFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                              ,EXCISE_INVOICE_DATE_1 IN DATE
                              ,VENDOR_ID_1 IN NUMBER
                              ,VENDOR_SITE_ID_1 IN NUMBER
                              ,CUSTOMER_ID_1 IN NUMBER
                              ,CUSTOMER_SITE_ID_1 IN NUMBER
                              ,TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CREDIT IS
      SELECT
        SUM(NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = DECODE(P_REGISTER_TYPE
            ,'A'
            ,'RG23A_P2'
            ,'C'
            ,'RG23C_P2')
        AND TAX_TYPE = 'CVD_SH_EDU_CESS'
        AND SOURCE_TYPE = 1
        AND SOURCE_REGISTER_ID IN (
        SELECT
          REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS
        WHERE ( ( EXCISE_INVOICE_NO IS NULL
          AND EXCISE_INVOICE_NO IS NULL )
        OR ( EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 ) )
          AND ( ( EXCISE_INVOICE_DATE IS NULL
          AND EXCISE_INVOICE_DATE IS NULL )
        OR ( EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 ) )
          AND ( ( VENDOR_ID IS NULL
          AND VENDOR_ID IS NULL )
        OR ( VENDOR_ID = VENDOR_ID_1 ) )
          AND ( ( VENDOR_SITE_ID IS NULL
          AND VENDOR_SITE_ID IS NULL )
        OR ( VENDOR_SITE_ID = VENDOR_SITE_ID_1 ) )
          AND ( ( CUSTOMER_ID IS NULL
          AND CUSTOMER_ID IS NULL )
        OR ( CUSTOMER_ID = CUSTOMER_ID_1 ) )
          AND ( ( CUSTOMER_SITE_ID IS NULL
          AND CUSTOMER_SITE_ID IS NULL )
        OR ( CUSTOMER_SITE_ID = CUSTOMER_SITE_ID_1 ) )
          AND REGISTER_TYPE = P_REGISTER_TYPE
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND INVENTORY_ITEM_ID <> 0
          AND TRUNC(CREATION_DATE) between NVL(P_TRN_FROM_DATE
           ,TRUNC(CREATION_DATE))
          AND NVL(P_TRN_TO_DATE
           ,TRUNC(CREATION_DATE))
          AND ( ( TRANSACTION_SOURCE_NUM IS NULL
          AND TRANSACTION_ID IS NULL )
        OR ( TRANSACTION_SOURCE_NUM = TRANSACTION_ID ) ) );
    V_CREDIT JAI_CMN_RG_OTHERS.CREDIT%TYPE;
  BEGIN
    OPEN CUR_CREDIT;
    FETCH CUR_CREDIT
     INTO V_CREDIT;
    CLOSE CUR_CREDIT;
    RETURN NVL(V_CREDIT - NVL(CP_ROUNDED_SH_CVD_CESS
                  ,0)
              ,0);
  END CF_CR_SH_CVDFORMULA;
  FUNCTION CF_CR_SH_EXCISEFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                                 ,EXCISE_INVOICE_DATE_1 IN DATE
                                 ,VENDOR_ID_1 IN NUMBER
                                 ,VENDOR_SITE_ID_1 IN NUMBER
                                 ,CUSTOMER_ID_1 IN NUMBER
                                 ,CUSTOMER_SITE_ID_1 IN NUMBER
                                 ,TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CREDIT IS
      SELECT
        SUM(NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = DECODE(P_REGISTER_TYPE
            ,'A'
            ,'RG23A_P2'
            ,'C'
            ,'RG23C_P2')
        AND TAX_TYPE = 'EXCISE_SH_EDU_CESS'
        AND SOURCE_TYPE = 1
        AND SOURCE_REGISTER_ID IN (
        SELECT
          REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS
        WHERE ( ( EXCISE_INVOICE_NO IS NULL
          AND EXCISE_INVOICE_NO IS NULL )
        OR ( EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 ) )
          AND ( ( EXCISE_INVOICE_DATE IS NULL
          AND EXCISE_INVOICE_DATE IS NULL )
        OR ( EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 ) )
          AND ( ( VENDOR_ID IS NULL
          AND VENDOR_ID IS NULL )
        OR ( VENDOR_ID = VENDOR_ID_1 ) )
          AND ( ( VENDOR_SITE_ID IS NULL
          AND VENDOR_SITE_ID IS NULL )
        OR ( VENDOR_SITE_ID = VENDOR_SITE_ID_1 ) )
          AND ( ( CUSTOMER_ID IS NULL
          AND CUSTOMER_ID IS NULL )
        OR ( CUSTOMER_ID = CUSTOMER_ID_1 ) )
          AND ( ( CUSTOMER_SITE_ID IS NULL
          AND CUSTOMER_SITE_ID IS NULL )
        OR ( CUSTOMER_SITE_ID = CUSTOMER_SITE_ID_1 ) )
          AND REGISTER_TYPE = P_REGISTER_TYPE
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND INVENTORY_ITEM_ID <> 0
          AND TRUNC(CREATION_DATE) between NVL(P_TRN_FROM_DATE
           ,TRUNC(CREATION_DATE))
          AND NVL(P_TRN_TO_DATE
           ,TRUNC(CREATION_DATE))
          AND ( ( TRANSACTION_SOURCE_NUM IS NULL
          AND TRANSACTION_ID IS NULL )
        OR ( TRANSACTION_SOURCE_NUM = TRANSACTION_ID ) ) );
    V_CREDIT JAI_CMN_RG_OTHERS.CREDIT%TYPE;
  BEGIN
    OPEN CUR_CREDIT;
    FETCH CUR_CREDIT
     INTO V_CREDIT;
    CLOSE CUR_CREDIT;
    RETURN NVL(V_CREDIT - NVL(CP_ROUNDED_SH_EXCISE_CESS
                  ,0)
              ,0);
  END CF_CR_SH_EXCISEFORMULA;
  FUNCTION CF_DR_SH_EXCISEFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                                 ,EXCISE_INVOICE_DATE_1 IN DATE
                                 ,VENDOR_ID_1 IN NUMBER
                                 ,VENDOR_SITE_ID_1 IN NUMBER
                                 ,CUSTOMER_ID_1 IN NUMBER
                                 ,CUSTOMER_SITE_ID_1 IN NUMBER
                                 ,TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_DEBIT IS
      SELECT
        SUM(NVL(DEBIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = DECODE(P_REGISTER_TYPE
            ,'A'
            ,'RG23A_P2'
            ,'C'
            ,'RG23C_P2')
        AND TAX_TYPE = 'EXCISE_SH_EDU_CESS'
        AND SOURCE_TYPE = 1
        AND SOURCE_REGISTER_ID IN (
        SELECT
          REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS
        WHERE ( ( EXCISE_INVOICE_NO IS NULL
          AND EXCISE_INVOICE_NO IS NULL )
        OR ( EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 ) )
          AND ( ( EXCISE_INVOICE_DATE IS NULL
          AND EXCISE_INVOICE_DATE IS NULL )
        OR ( EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 ) )
          AND ( ( VENDOR_ID IS NULL
          AND VENDOR_ID IS NULL )
        OR ( VENDOR_ID = VENDOR_ID_1 ) )
          AND ( ( VENDOR_SITE_ID IS NULL
          AND VENDOR_SITE_ID IS NULL )
        OR ( VENDOR_SITE_ID = VENDOR_SITE_ID_1 ) )
          AND ( ( CUSTOMER_ID IS NULL
          AND CUSTOMER_ID IS NULL )
        OR ( CUSTOMER_ID = CUSTOMER_ID ) )
          AND ( ( CUSTOMER_SITE_ID IS NULL
          AND CUSTOMER_SITE_ID IS NULL )
        OR ( CUSTOMER_SITE_ID = CUSTOMER_SITE_ID_1 ) )
          AND REGISTER_TYPE = P_REGISTER_TYPE
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND INVENTORY_ITEM_ID <> 0
          AND TRUNC(CREATION_DATE) between NVL(P_TRN_FROM_DATE
           ,TRUNC(CREATION_DATE))
          AND NVL(P_TRN_TO_DATE
           ,TRUNC(CREATION_DATE))
          AND ( ( TRANSACTION_SOURCE_NUM IS NULL
          AND TRANSACTION_ID IS NULL )
        OR ( TRANSACTION_SOURCE_NUM = TRANSACTION_ID ) ) );
    V_DEBIT JAI_CMN_RG_OTHERS.CREDIT%TYPE;
  BEGIN
    OPEN CUR_DEBIT;
    FETCH CUR_DEBIT
     INTO V_DEBIT;
    CLOSE CUR_DEBIT;
    RETURN NVL(V_DEBIT
              ,0) - NVL(CP_RND_DR_SH_EXC_EDU_CESS
              ,0);
  END CF_DR_SH_EXCISEFORMULA;
  FUNCTION CF_DR_SH_CVDFORMULA(EXCISE_INVOICE_NO_1 IN VARCHAR2
                              ,EXCISE_INVOICE_DATE_1 IN DATE
                              ,VENDOR_ID_1 IN NUMBER
                              ,VENDOR_SITE_ID_1 IN NUMBER
                              ,CUSTOMER_ID_1 IN NUMBER
                              ,CUSTOMER_SITE_ID_1 IN NUMBER
                              ,TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_DEBIT IS
      SELECT
        SUM(NVL(DEBIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = DECODE(P_REGISTER_TYPE
            ,'A'
            ,'RG23A_P2'
            ,'C'
            ,'RG23C_P2')
        AND TAX_TYPE = 'CVD_SH_EDU_CESS'
        AND SOURCE_TYPE = 1
        AND SOURCE_REGISTER_ID IN (
        SELECT
          REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS
        WHERE ( ( EXCISE_INVOICE_NO IS NULL
          AND EXCISE_INVOICE_NO IS NULL )
        OR ( EXCISE_INVOICE_NO = EXCISE_INVOICE_NO_1 ) )
          AND ( ( EXCISE_INVOICE_DATE IS NULL
          AND EXCISE_INVOICE_DATE IS NULL )
        OR ( EXCISE_INVOICE_DATE = EXCISE_INVOICE_DATE_1 ) )
          AND ( ( VENDOR_ID IS NULL
          AND VENDOR_ID IS NULL )
        OR ( VENDOR_ID = VENDOR_ID_1 ) )
          AND ( ( VENDOR_SITE_ID IS NULL
          AND VENDOR_SITE_ID IS NULL )
        OR ( VENDOR_SITE_ID = VENDOR_SITE_ID ) )
          AND ( ( CUSTOMER_ID IS NULL
          AND CUSTOMER_ID IS NULL )
        OR ( CUSTOMER_ID = CUSTOMER_ID_1 ) )
          AND ( ( CUSTOMER_SITE_ID IS NULL
          AND CUSTOMER_SITE_ID IS NULL )
        OR ( CUSTOMER_SITE_ID = CUSTOMER_SITE_ID_1 ) )
          AND REGISTER_TYPE = P_REGISTER_TYPE
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND INVENTORY_ITEM_ID <> 0
          AND TRUNC(CREATION_DATE) between NVL(P_TRN_FROM_DATE
           ,TRUNC(CREATION_DATE))
          AND NVL(P_TRN_TO_DATE
           ,TRUNC(CREATION_DATE))
          AND ( ( TRANSACTION_SOURCE_NUM IS NULL
          AND TRANSACTION_ID IS NULL )
        OR ( TRANSACTION_SOURCE_NUM = TRANSACTION_ID ) ) );
    V_DEBIT JAI_CMN_RG_OTHERS.CREDIT%TYPE;
  BEGIN
    OPEN CUR_DEBIT;
    FETCH CUR_DEBIT
     INTO V_DEBIT;
    CLOSE CUR_DEBIT;
    RETURN NVL(V_DEBIT
              ,0) - NVL(CP_RND_DR_SH_CVD_EDU_CESS
              ,0);
  END CF_DR_SH_CVDFORMULA;
  FUNCTION CF_SH_CVD_CLOSING_BALANCEFORMU(CS_CR_SH_CVD IN NUMBER
                                         ,CS_DR_SH_CVD IN NUMBER) RETURN NUMBER IS
    LN_CVD_CLOSING_BALANCE NUMBER;
  BEGIN
    LN_CVD_CLOSING_BALANCE := NVL(CS_CR_SH_CVD
                                 ,0) - NVL(CS_DR_SH_CVD
                                 ,0) + NVL(P_CVD_EDU_SH_CESS_OP_BAL
                                 ,0);
    RETURN LN_CVD_CLOSING_BALANCE;
  END CF_SH_CVD_CLOSING_BALANCEFORMU;
  FUNCTION CF_SH_EXC_CLOSING_BALANCEFORMU(CS_CR_SH_EXCISE IN NUMBER
                                         ,CS_DR_SH_EXCISE IN NUMBER) RETURN NUMBER IS
    LN_EXC_CLOSING_BAL NUMBER;
  BEGIN
    LN_EXC_CLOSING_BAL := NVL(CS_CR_SH_EXCISE
                             ,0) - NVL(CS_DR_SH_EXCISE
                             ,0) + NVL(P_EXC_EDU_SH_CESS_OP_BAL
                             ,0);
    RETURN LN_EXC_CLOSING_BAL;
  END CF_SH_EXC_CLOSING_BALANCEFORMU;
  FUNCTION CP_ADDITIONAL_ROUNDING_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ADDITIONAL_ROUNDING;
  END CP_ADDITIONAL_ROUNDING_P;
  FUNCTION CP_ADDITIONALCVD_ROUNDING_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ADDITIONALCVD_ROUNDING;
  END CP_ADDITIONALCVD_ROUNDING_P;
  FUNCTION CP_OTHER_ROUNDING_P RETURN NUMBER IS
  BEGIN
    RETURN CP_OTHER_ROUNDING;
  END CP_OTHER_ROUNDING_P;
  FUNCTION CP_ROUNDED_EXCISE_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUNDED_EXCISE_CESS;
  END CP_ROUNDED_EXCISE_CESS_P;
  FUNCTION CP_ROUNDED_SH_EXCISE_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUNDED_SH_EXCISE_CESS;
  END CP_ROUNDED_SH_EXCISE_CESS_P;
  FUNCTION CP_ROUNDED_CVD_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUNDED_CVD_CESS;
  END CP_ROUNDED_CVD_CESS_P;
  FUNCTION CP_ROUNDED_SH_CVD_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUNDED_SH_CVD_CESS;
  END CP_ROUNDED_SH_CVD_CESS_P;
  FUNCTION CP_RND_DR_BASIC_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_BASIC_ED;
  END CP_RND_DR_BASIC_ED_P;
  FUNCTION CP_RND_DR_ADDL_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_ADDL_ED;
  END CP_RND_DR_ADDL_ED_P;
  FUNCTION CP_RND_DR_ADDL_CVD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_ADDL_CVD;
  END CP_RND_DR_ADDL_CVD_P;
  FUNCTION CP_RND_DR_OTHER_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_OTHER_ED;
  END CP_RND_DR_OTHER_ED_P;
  FUNCTION CP_RND_DR_EXC_EDU_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_EXC_EDU_CESS;
  END CP_RND_DR_EXC_EDU_CESS_P;
  FUNCTION CP_RND_DR_SH_CVD_EDU_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_SH_CVD_EDU_CESS;
  END CP_RND_DR_SH_CVD_EDU_CESS_P;
  FUNCTION CP_RND_DR_CVD_EDU_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_CVD_EDU_CESS;
  END CP_RND_DR_CVD_EDU_CESS_P;
  FUNCTION CP_RND_DR_SH_EXC_EDU_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_DR_SH_EXC_EDU_CESS;
  END CP_RND_DR_SH_EXC_EDU_CESS_P;
  FUNCTION CP_1_P RETURN NUMBER IS
  BEGIN
    RETURN CP_1;
  END CP_1_P;
  FUNCTION C_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NAME;
  END C_NAME_P;
  FUNCTION C_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DESCRIPTION;
  END C_DESCRIPTION_P;
  FUNCTION C_ADDRESS_LINE_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ADDRESS_LINE_1;
  END C_ADDRESS_LINE_1_P;
  FUNCTION C_ADDRESS_LINE_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ADDRESS_LINE_2;
  END C_ADDRESS_LINE_2_P;
  FUNCTION C_ADDRESS_LINE_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ADDRESS_LINE_3;
  END C_ADDRESS_LINE_3_P;
  FUNCTION C_EC_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EC_CODE;
  END C_EC_CODE_P;
  FUNCTION C_EXCISECOMM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EXCISECOMM;
  END C_EXCISECOMM_P;
  FUNCTION C_EXCISEDIVISION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EXCISEDIVISION;
  END C_EXCISEDIVISION_P;
  FUNCTION C_EXCISECIRCLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EXCISECIRCLE;
  END C_EXCISECIRCLE_P;
  FUNCTION C_EXCISERANGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EXCISERANGE;
  END C_EXCISERANGE_P;
  FUNCTION CP_REPORT_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_TITLE;
  END CP_REPORT_TITLE_P;
END JA_JAIN23P2_XMLP_PKG;


/
