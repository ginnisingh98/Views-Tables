--------------------------------------------------------
--  DDL for Package Body PSP_PSPLDORG_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPLDORG_XMLP_PKG" AS
/* $Header: PSPLDORGB.pls 120.3 2007/10/29 07:24:03 amakrish noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR C1(P_LOOKUP_CODE IN VARCHAR2,L_TEMPLATE_ID IN NUMBER) IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = L_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = P_LOOKUP_CODE;
    L_NUM NUMBER;
    L_NUM1 NUMBER;
  BEGIN
    IF P_ORG_TEMPLATE_ID IS NULL THEN
      P_ORG_ID := ' 1 = 1  ';
    ELSE
      OPEN C1('ORG',P_ORG_TEMPLATE_ID);
      FETCH C1
       INTO L_NUM;
      CLOSE C1;
      IF L_NUM <> 0 THEN
        P_ORG_ID := '  paf.organization_id  IN (select criteria_value1 from psp_report_template_details
                           where template_id = ' || P_ORG_TEMPLATE_ID || '
                           and   criteria_lookup_type = ''PSP_SELECTION_CRITERIA''
                           and   criteria_lookup_code = ''ORG'' ' || ' ) ';
      ELSE
        P_ORG_ID := '  1 = 1 ';
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREPFORM(ORIENTATION IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    --ORIENTATION := 'LANDSCAPE';
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION CF_EMPLOYEE_NUMBERFORMULA(PERSON_ID1 IN NUMBER
                                    ,EFFECTIVE_DATE IN DATE) RETURN VARCHAR2 IS
    V_EMPLOYEE_NUMBER VARCHAR2(30);
    V_OGM_PERIOD_END DATE;
  BEGIN
    IF P_OGM_PERIOD IS NOT NULL THEN
      SELECT
        END_DATE
      INTO V_OGM_PERIOD_END
      FROM
        PA_PERIODS
      WHERE PERIOD_NAME = P_OGM_PERIOD;
      SELECT
        DISTINCT
        EMPLOYEE_NUMBER
      INTO V_EMPLOYEE_NUMBER
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = PERSON_ID1
        AND ( V_OGM_PERIOD_END Between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE );
    ELSE
      SELECT
        EMPLOYEE_NUMBER
      INTO V_EMPLOYEE_NUMBER
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = PERSON_ID1
        AND TRUNC(EFFECTIVE_DATE) BETWEEN EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE;
    END IF;
    RETURN V_EMPLOYEE_NUMBER;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('No data Found');
    WHEN TOO_MANY_ROWS THEN
      RETURN ('Too Many Rows');
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_EMPLOYEE_NUMBERFORMULA;

  FUNCTION CF_TIME_PERIOD_NAMEFORMULA RETURN VARCHAR2 IS
    V_PERIOD_NAME VARCHAR2(35);
  BEGIN
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_TIME_PERIOD_NAMEFORMULA;

  FUNCTION CF_INSTITUTION_NAMEFORMULA RETURN VARCHAR2 IS
    V_INSTITUTION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    V_INSTITUTION_ID VARCHAR2(30);
  BEGIN
    V_INSTITUTION_ID := VALUE('PSP_ORG_REPORT');
    IF V_INSTITUTION_ID IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      NAME
    INTO V_INSTITUTION_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE ORGANIZATION_ID = TO_NUMBER(V_INSTITUTION_ID);
    RETURN V_INSTITUTION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('No Data Found');
    WHEN TOO_MANY_ROWS THEN
      RETURN ('Too Many Rows');
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_INSTITUTION_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('BEFORE REPORT');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_CHARGING_DESCFORMULA(GL_ID IN NUMBER
                                  ,PROJECT_NUMBER IN VARCHAR2
                                  ,TASK_NUMBER IN VARCHAR2
                                  ,AWARD_NUMBER IN VARCHAR2
                                  ,EXPENDITURE_ORGANIZATION_NAME IN VARCHAR2
                                  ,EXP_TYPE1 IN VARCHAR2) RETURN VARCHAR2 IS
    T_NAME VARCHAR2(2000);
    PROJ_NAME VARCHAR2(25);
    TASK_NAME VARCHAR2(25);
    AWARD_NAME VARCHAR2(15);
    EXP_TYPE VARCHAR2(100);
    EXP_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    V_RETCODE NUMBER;
    L_CHART_OF_ACCTS VARCHAR2(20);
  BEGIN
    IF GL_ID IS NOT NULL THEN
      V_RETCODE := PSP_GENERAL.FIND_CHART_OF_ACCTS(TO_NUMBER(P_SET_OF_BOOKS_ID)
                                                  ,L_CHART_OF_ACCTS);
      T_NAME := FND_FLEX_EXT.GET_SEGS(APPLICATION_SHORT_NAME => 'SQLGL'
                                     ,KEY_FLEX_CODE => 'GL#'
                                     ,STRUCTURE_NUMBER => TO_NUMBER(L_CHART_OF_ACCTS)
                                     ,COMBINATION_ID => GL_ID);
      RETURN (T_NAME);
    ELSE
      RETURN (PROJECT_NUMBER || ' ' || TASK_NUMBER || ' ' || AWARD_NUMBER || ' ' || EXPENDITURE_ORGANIZATION_NAME || ' ' || EXP_TYPE1);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN ('NO_DATA_FOUND');
    WHEN OTHERS THEN
      RETURN ('OTHER ERROR OCCURED');
  END CF_CHARGING_DESCFORMULA;

  FUNCTION CF_CURRENCY_FORMATFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN (FND_CURRENCY.GET_FORMAT_MASK(CURRENCY_CODE
                                       ,30));
  END CF_CURRENCY_FORMATFORMULA;

  FUNCTION CF_EARNINGS_AMOUNT_DSPFORMULA(EARNINGS_AMOUNT IN NUMBER
                                        ,CF_CURRENCY_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(EARNINGS_AMOUNT)*/NULL;
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    RETURN (TO_CHAR(EARNINGS_AMOUNT
                  ,CF_CURRENCY_FORMAT));
  END CF_EARNINGS_AMOUNT_DSPFORMULA;

  FUNCTION CF_CURRENCY_CODEFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN ('(' || CURRENCY_CODE || ')');
  END CF_CURRENCY_CODEFORMULA;

  FUNCTION CF_ORG_CURR_AMT_TOTAL_DSPFORMU(CF_CURRENCY_FORMAT IN VARCHAR2
                                         ,CS_ORG_CURR_AMT_TOTAL IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(CS_ORG_CURR_AMT_TOTAL)*/NULL;
    RETURN (TO_CHAR(CS_ORG_CURR_AMT_TOTAL
                  ,CF_CURRENCY_FORMAT));
  END CF_ORG_CURR_AMT_TOTAL_DSPFORMU;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_DATE_FORMATFORMULA RETURN CHAR IS
  BEGIN
    RETURN (VALUE('ICX_DATE_FORMAT_MASK'));
  END CF_DATE_FORMATFORMULA;

  FUNCTION CF_RUN_DATEFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SYSDATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SYSDATE
                  ,CF_DATE_FORMAT));
  END CF_RUN_DATEFORMULA;

  FUNCTION CF_START_DATE_SIPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_BEGIN_DATE
                  ,CF_DATE_FORMAT));
  END CF_START_DATE_SIPFORMULA;

  FUNCTION CF_END_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_END_DATE_DISPFORMULA;

  PROCEDURE PUT(NAME IN VARCHAR2
               ,VAL IN VARCHAR2) IS
  BEGIN
    --STPROC.INIT('begin FND_PROFILE.PUT(:NAME, :VAL); end;');
        begin
	FND_PROFILE.PUT(NAME, VAL);
	end;

    --STPROC.BIND_I(NAME);
    --STPROC.BIND_I(VAL);
    --STPROC.EXECUTE;
  END PUT;

  FUNCTION DEFINED(NAME IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    --STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.DEFINED(:NAME); :X0 := sys.diutil.bool_to_int(X0rv); end;');
declare
X0rv BOOLEAN;
begin
X0 := FND_PROFILE.DEFINED(NAME);
--X0 := sys.diutil.bool_to_int(X0rv);
end;
    --STPROC.BIND_I(NAME);
    --STPROC.BIND_O(X0);
    --STPROC.EXECUTE;
    --STPROC.RETRIEVE(2,X0);
    RETURN X0;
  END DEFINED;

  PROCEDURE GET(NAME IN VARCHAR2
               ,VAL OUT NOCOPY VARCHAR2) IS
  BEGIN
    --STPROC.INIT('begin FND_PROFILE.GET(:NAME, :VAL); end;');
    begin
    FND_PROFILE.GET(NAME, VAL);
    end;
    --STPROC.BIND_I(NAME);
    --STPROC.BIND_O(VAL);
    --STPROC.EXECUTE;
    --STPROC.RETRIEVE(2,VAL);
  END GET;

  FUNCTION VALUE(NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    --STPROC.INIT('begin :X0 := FND_PROFILE.VALUE(:NAME); end;');
	begin
	X0 := FND_PROFILE.VALUE(NAME);
	end;
/*    STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END VALUE;

  FUNCTION SAVE_USER(X_NAME IN VARCHAR2
                    ,X_VALUE IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    --STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE_USER(:X_NAME, :X_VALUE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    declare
    X0rv BOOLEAN;
    begin
    X0 := FND_PROFILE.SAVE_USER(X_NAME, X_VALUE);
    --X0 := sys.diutil.bool_to_int(X0rv);
    end;
    /*STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,X0);*/
    RETURN X0;
  END SAVE_USER;

  FUNCTION SAVE(X_NAME IN VARCHAR2
               ,X_VALUE IN VARCHAR2
               ,X_LEVEL_NAME IN VARCHAR2
               ,X_LEVEL_VALUE IN VARCHAR2
               ,X_LEVEL_VALUE_APP_ID IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    --STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE(:X_NAME, :X_VALUE, :X_LEVEL_NAME, :X_LEVEL_VALUE, :X_LEVEL_VALUE_APP_ID); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    declare
    X0rv BOOLEAN;
    begin
    X0 := FND_PROFILE.SAVE(X_NAME, X_VALUE, X_LEVEL_NAME, X_LEVEL_VALUE, X_LEVEL_VALUE_APP_ID);
    --X0 := sys.diutil.bool_to_int(X0rv);
    end;
    /*STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_I(X_LEVEL_NAME);
    STPROC.BIND_I(X_LEVEL_VALUE);
    STPROC.BIND_I(X_LEVEL_VALUE_APP_ID);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(6
                   ,X0);*/
    RETURN X0;
  END SAVE;

  PROCEDURE GET_SPECIFIC(NAME_Z IN VARCHAR2
                        ,USER_ID_Z IN NUMBER
                        ,RESPONSIBILITY_ID_Z IN NUMBER
                        ,APPLICATION_ID_Z IN NUMBER
                        ,VAL_Z OUT NOCOPY VARCHAR2
                        ,DEFINED_Z OUT NOCOPY BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare DEFINED_Z BOOLEAN; begin DEFINED_Z := sys.diutil.int_to_bool(:DEFINED_Z); FND_PROFILE.GET_SPECIFIC
    (:NAME_Z, :USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :VAL_Z, DEFINED_Z); :DEFINED_Z := sys.diutil.bool_to_int(DEFINED_Z); end;');*/
  /*  declare
    DEFINED_Z BOOLEAN;
    begin
    DEFINED_Z := sys.diutil.int_to_bool(DEFINED_Z);
    FND_PROFILE.GET_SPECIFIC(NAME_Z, USER_ID_Z, RESPONSIBILITY_ID_Z, APPLICATION_ID_Z, VAL_Z, DEFINED_Z);
    DEFINED_Z := sys.diutil.bool_to_int(DEFINED_Z);
    end;*/
    /*STPROC.BIND_O(DEFINED_Z);
    STPROC.BIND_I(NAME_Z);
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_O(VAL_Z);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,DEFINED_Z);
    STPROC.RETRIEVE(6
                   ,VAL_Z);*/
		   null;
  END GET_SPECIFIC;

  FUNCTION VALUE_SPECIFIC(NAME IN VARCHAR2
                         ,USER_ID IN NUMBER
                         ,RESPONSIBILITY_ID IN NUMBER
                         ,APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    --STPROC.INIT('begin :X0 := FND_PROFILE.VALUE_SPECIFIC(:NAME, :USER_ID, :RESPONSIBILITY_ID, :APPLICATION_ID); end;');
    begin
    X0 := FND_PROFILE.VALUE_SPECIFIC(NAME, USER_ID, RESPONSIBILITY_ID, APPLICATION_ID);
    end;
    /*STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(USER_ID);
    STPROC.BIND_I(RESPONSIBILITY_ID);
    STPROC.BIND_I(APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END VALUE_SPECIFIC;

  PROCEDURE INITIALIZE(USER_ID_Z IN NUMBER
                      ,RESPONSIBILITY_ID_Z IN NUMBER
                      ,APPLICATION_ID_Z IN NUMBER
                      ,SITE_ID_Z IN NUMBER) IS
  BEGIN
    --STPROC.INIT('begin FND_PROFILE.INITIALIZE(:USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :SITE_ID_Z); end;');
	begin
	FND_PROFILE.INITIALIZE(USER_ID_Z, RESPONSIBILITY_ID_Z, APPLICATION_ID_Z, SITE_ID_Z);
	end;
    /*STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_I(SITE_ID_Z);
    STPROC.EXECUTE;*/
  END INITIALIZE;

  PROCEDURE PUTMULTIPLE(NAMES IN VARCHAR2
                       ,VALS IN VARCHAR2
                       ,NUM IN NUMBER) IS
  BEGIN
    --STPROC.INIT('begin FND_PROFILE.PUTMULTIPLE(:NAMES, :VALS, :NUM); end;');
    begin
    FND_PROFILE.PUTMULTIPLE(NAMES, VALS, NUM);
    end;
    /*STPROC.BIND_I(NAMES);
    STPROC.BIND_I(VALS);
    STPROC.BIND_I(NUM);
    STPROC.EXECUTE;*/
  END PUTMULTIPLE;

END PSP_PSPLDORG_XMLP_PKG;

/
