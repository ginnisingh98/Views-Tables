--------------------------------------------------------
--  DDL for Package Body OKL_LA_STREAM_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OKL_LA_STREAM_PVT" as
/* $Header: OKLRSGAB.pls 120.141.12010000.32 2010/03/04 12:01:33 nikshah ship $ */
-------------------------------------------------------------------------------------------------
-- GLOBAL MESSAGE CONSTANTS
-------------------------------------------------------------------------------------------------
  G_NO_PARENT_RECORD    CONSTANT  VARCHAR2(200) := 'OKL_NO_PARENT_RECORD';
  G_FND_APP		        CONSTANT  VARCHAR2(200) := OKL_API.G_FND_APP;
  g_rep_req_yn                    VARCHAR2(3) := 'N';
  G_SFE_TYPE_SUBSIDY            CONSTANT VARCHAR2(200) := okl_create_streams_pvt.G_SFE_TYPE_SUBSIDY;
  G_REQUIRED_VALUE	    CONSTANT  VARCHAR2(200) := OKL_API.G_REQUIRED_VALUE;
  G_INVALID_VALUE		CONSTANT  VARCHAR2(200) := OKL_API.G_INVALID_VALUE;
  G_UNEXPECTED_ERROR    CONSTANT  VARCHAR2(200) := 'OKL_CONTRACTS_UNEXP_ERROR';
  G_DB_ERROR             CONSTANT VARCHAR2(12)  := 'OKL_DB_ERROR';
  G_PROG_NAME_TOKEN      CONSTANT VARCHAR2(9)   := 'PROG_NAME';
  G_SQLCODE_TOKEN        CONSTANT VARCHAR2(7)   := 'SQLCODE';
  G_SQLERRM_TOKEN        CONSTANT VARCHAR2(7)   := 'SQLERRM';
  G_UPPERCASE_REQUIRED	CONSTANT  VARCHAR2(200) := 'OKL_CONTRACTS_UPPERCASE_REQ';
  G_COL_NAME_TOKEN      CONSTANT  VARCHAR2(200) := OKL_API.G_COL_NAME_TOKEN;
  -- Start modification Bug#3066346 bakuchib
  G_LLA_NO_MATCHING_RECORD  CONSTANT VARCHAR2(200) := 'OKL_LLA_NO_MATCHING_RECORD';
  l_pay_tbl                          OKL_STREAM_GENERATOR_PVT.payment_tbl_type;
  -- End modification Bug#3066346 bakuchib
  -- Variable put by HKPATEL for rollover quote
  l_link_fee_asset_yn			  VARCHAR2(12)  := 'NONE';
-- srsreeni - Bug#5699923 - Added - Start
 G_STREAM_ACTIVITY_WORK CONSTANT VARCHAR2(4) := OKL_PROCESS_STREAMS_PVT.G_STREAM_ACTIVITY_WORK;
 G_FEE_ROLLOVER CONSTANT VARCHAR2(30) := 'ROLLOVER';
 G_FEE_FINANCED CONSTANT VARCHAR2(30) := 'FINANCED';
 G_ORIGIN_STRM_PURPOSE CONSTANT VARCHAR2(30) := 'ORIGIN';
 G_REPORT_STRM_PURPOSE CONSTANT VARCHAR2(30) := 'REPORT';
-- srsreeni - Bug#5699923 - Added - End
------------------------------------------------------------------------------------
-- GLOBAL EXCEPTION
------------------------------------------------------------------------------------
  G_EXCEPTION_HALT_VALIDATION             EXCEPTION;
  G_EXCEPTION_STOP_VALIDATION             EXCEPTION;
  G_API_TYPE                CONSTANT  VARCHAR2(4) := '_PVT';
  G_API_VERSION             CONSTANT  NUMBER      := 1.0;
  G_SCOPE                   CONSTANT  VARCHAR2(4) := '_PVT';

  --Added by kthiruva for Bug 5161075 on 19-Apr-2006
  G_FALSE                   CONSTANT VARCHAR2(10) := 'false';
 -- GLOBAL COMPOSITE DATA TYPE
  --Added for debug_logging
  L_DEBUG_ENABLED VARCHAR2(10) := OKL_DEBUG_PUB.CHECK_LOG_ENABLED;


-----------------------------------------------------------------------------------
-- Start of Bug#2757289 modification bakuchib
  TYPE stub_rec_type IS RECORD (
       number_of_periods   NUMBER := 1,
       advance_or_arrears  OKL_SIF_FEES_V.advance_or_arrears%TYPE := OKL_CREATE_STREAMS_PVT.G_ARREARS,
       period              OKL_SIF_FEES_V.period%TYPE := 'T');
  g_stub_rec               stub_rec_type;
  SUBTYPE pdtv_rec_type           IS okl_setupproducts_pvt.pdtv_rec_type;
  SUBTYPE ast_dtl_tbl_type        IS okl_activate_asset_pvt.ast_dtl_tbl_type;
  SUBTYPE pdt_param_rec_type      IS okl_setupproducts_pvt.pdt_parameters_rec_type;
  SUBTYPE asbv_tbl_type           IS okl_subsidy_process_pvt.asbv_tbl_type;
-- End of Bug#2757289 modification  bakuchib
-----------------------------------------------------------------------------------
 --Added by kthiruva for the Variable Rate Build
 --Record type declaration for storing the date and amount all the paydowns on a contract
 TYPE ppd_rec_type IS RECORD (
    paydown_date          DATE,
    paydown_amount        NUMBER,
    curr_paydown          VARCHAR2(1),
    diff_to_next          NUMBER,
    ppd_processed_yn      VARCHAR2(1)
    );

 TYPE ppd_tbl_type is TABLE OF ppd_rec_Type INDEX BY BINARY_INTEGER;
 l_ppd_tbl                  ppd_tbl_type;
 l_ppd_count                NUMBER := 0;
 g_paydown_date             DATE;
 l_days_in_period           NUMBER;
 l_first_batch              VARCHAR2(1) := 'N';
 l_periods_after_ppd        NUMBER;
 l_period_end_date          DATE;
 l_adjusting_stub_date      DATE;
 l_days_between             NUMBER;
 --End of Changes

  --Added by kthiruva on 27-Mar-2006 for logging purposes
  --Start of Changes
  PROCEDURE WRITE_TO_LOG(p_message	IN	VARCHAR2)
  IS
  BEGIN
      IF L_DEBUG_ENABLED = 'Y' then
        fnd_file.put_line (fnd_file.log,p_message);
      END IF;
  END WRITE_TO_LOG;


--Debuging procedures
  PROCEDURE print(p_proc_name     IN VARCHAR2,
                  p_message       IN VARCHAR2,
	              x_return_status IN VARCHAR2) IS
  BEGIN
     NULL;
  END;
  PROCEDURE print(p_proc_name     IN VARCHAR2,
                  p_message       IN VARCHAR2) IS
  BEGIN
     print(p_proc_name, p_message, 'S' );
  END;
    -- Added new procedure for get the streams for reporting and original product
PROCEDURE get_primary_pricing_name
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_sty_id                IN okl_strm_type_b.ID%TYPE,
 x_return_status		OUT NOCOPY VARCHAR2,
 x_primary_pricing_name	OUT NOCOPY OKL_ST_GEN_TMPT_LNS.PRICING_NAME%TYPE
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR pry_prc_csr (l_pdt_id NUMBER, l_contract_start_date DATE) IS
SELECT PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE STL.PRIMARY_YN = 'Y'
AND STL.PDT_ID = l_pdt_id
AND    (STL.START_DATE <= l_contract_start_date)
AND    (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_ID =   p_sty_id;

CURSOR sty_csr IS
SELECT CODE
FROM okl_strm_type_b
WHERE id = p_sty_id;


  l_primary_pricing_name	VARCHAR2(30);

  l_contract_start_date 	DATE;
  l_product_id 		  	    NUMBER;
  l_sty_code okl_strm_type_b.code%TYPE;

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;



  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
    OPEN pry_prc_csr (l_product_id, l_contract_start_date);
    FETCH pry_prc_csr INTO l_primary_pricing_name;
      IF  pry_prc_csr%NOTFOUND THEN

-- Bug 4064253

      	  OPEN sty_csr;
      	  FETCH sty_csr INTO l_sty_code;
      	  CLOSE sty_csr;

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_PRY_STY_CODE_NOT_FOUND',
                          p_token1        => 'STY_CODE',
                          p_token1_value  => l_sty_code);
            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE pry_prc_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_primary_pricing_name := l_primary_pricing_name;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_prc_csr%ISOPEN THEN
	    CLOSE pry_prc_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_prc_csr%ISOPEN THEN
	    CLOSE pry_prc_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_prc_csr%ISOPEN THEN
	    CLOSE pry_prc_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;


END get_primary_pricing_name;

PROCEDURE get_dependent_pricing_name
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_sty_id                IN okl_strm_type_b.ID%TYPE,
 x_return_status		OUT NOCOPY VARCHAR2,
 x_dependent_pricing_name	OUT NOCOPY OKL_ST_GEN_TMPT_LNS.PRICING_NAME%TYPE
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR pry_prc_csr (l_pdt_id NUMBER, l_contract_start_date DATE) IS
SELECT PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE STL.PRIMARY_YN = 'N'
AND STL.PDT_ID = l_pdt_id
AND    (STL.START_DATE <= l_contract_start_date)
AND    (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   DEPENDENT_STY_ID =   p_sty_id
AND PRICING_NAME IS NOT NULL;

CURSOR sty_csr IS
SELECT CODE
FROM okl_strm_type_b
WHERE id = p_sty_id;

  l_dependent_pricing_name	VARCHAR2(40);

  l_contract_start_date 	DATE;
  l_product_id 		  	    NUMBER;
  l_sty_code okl_strm_type_b.code%TYPE;

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;



  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
    --okl_debug_pub.logmessage('Product Id1'||l_product_id);
	--okl_debug_pub.logmessage('Contract Strat Date1'||l_contract_start_date);
    OPEN pry_prc_csr (l_product_id, l_contract_start_date);
    FETCH pry_prc_csr INTO l_dependent_pricing_name;
      IF  pry_prc_csr%NOTFOUND THEN

-- Bug 4064253
      	  OPEN sty_csr;
      	  FETCH sty_csr INTO l_sty_code;
      	  CLOSE sty_csr;

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_DEP_STY_CODE_NOT_FOUND',
                          p_token1        => 'STY_CODE',
                          p_token1_value  => l_sty_code);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE pry_prc_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_pricing_name := l_dependent_pricing_name;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_prc_csr%ISOPEN THEN
	    CLOSE pry_prc_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_prc_csr%ISOPEN THEN
	    CLOSE pry_prc_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_prc_csr%ISOPEN THEN
	    CLOSE pry_prc_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;
      --okl_debug_pub.logmessage(SQLERRM);

END get_dependent_pricing_name;

PROCEDURE get_primary_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_primary_sty_purpose   IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 x_return_status		OUT NOCOPY VARCHAR2,
 x_primary_sty_id 		OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR pry_sty_csr (l_pdt_id NUMBER, l_contract_start_date DATE) IS
SELECT PRIMARY_STY_ID, PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE STL.PRIMARY_YN = 'Y'
AND STL.PDT_ID = l_pdt_id
AND    (STL.START_DATE <= l_contract_start_date)
AND    (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_PURPOSE =   p_primary_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  					NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_primary_sty_id 			  	NUMBER;
  l_primary_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;



  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
    OPEN pry_sty_csr (l_product_id, l_contract_start_date);
    FETCH pry_sty_csr INTO l_strm_rec_type;
      IF  pry_sty_csr%NOTFOUND THEN

-- Bug 4064253

                  l_primary_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
                  			('OKL_STREAM_TYPE_PURPOSE', p_primary_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PRY_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_primary_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE pry_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_primary_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;


END get_primary_stream_type;

 PROCEDURE get_primary_no_prc_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id  		   	     IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_purpose   IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 x_return_status		OUT NOCOPY VARCHAR2,
 x_primary_sty_id 		OUT NOCOPY strm_rec_type
)



IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR pry_sty_csr (l_pdt_id NUMBER, l_contract_start_date DATE) IS
SELECT PRIMARY_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE STL.PRIMARY_YN = 'Y'
AND STL.PDT_ID = l_pdt_id
AND    (STL.START_DATE <= l_contract_start_date)
AND    (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_PURPOSE =   p_primary_sty_purpose;

  l_product_id 			  					NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_primary_sty_id 			  	NUMBER;
  l_primary_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;



  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    OPEN pry_sty_csr (l_product_id, l_contract_start_date);
    FETCH pry_sty_csr INTO l_strm_rec_type;
      IF  pry_sty_csr%NOTFOUND THEN

-- Bug 4064253

                  l_primary_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
                  			('OKL_STREAM_TYPE_PURPOSE', p_primary_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PRY_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_primary_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE pry_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_primary_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;


END get_primary_no_prc_stream_type;

PROCEDURE get_dep_no_prc_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id                IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_purpose   IN okl_strm_type_b.stream_type_purpose%TYPE,
 p_dependent_sty_purpose IN okl_strm_type_b.stream_type_purpose%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND (STL.START_DATE <= l_contract_start_date)
AND (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	PRIMARY_STY_PURPOSE =   p_primary_sty_purpose
AND DEPENDENT_STY_PURPOSE = p_dependent_sty_purpose;

  l_product_id 				NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id		NUMBER;
  rec_count                 NUMBER := 0;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;


  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    OPEN dep_sty_csr (p_pdt_id, l_contract_start_date);
    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
      END IF;
    CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dep_no_prc_stream_type;

PROCEDURE get_dep_no_prc_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id                IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_id        IN okl_strm_type_b.id%TYPE,
 p_dependent_sty_purpose IN okl_strm_type_b.stream_type_purpose%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND (STL.START_DATE <= l_contract_start_date)
AND (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	PRIMARY_STY_ID =   p_primary_sty_id
AND DEPENDENT_STY_PURPOSE = p_dependent_sty_purpose;

  l_product_id 				NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id		NUMBER;
  rec_count                 NUMBER := 0;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    OPEN dep_sty_csr (p_pdt_id, l_contract_start_date);
    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
      END IF;
    CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dep_no_prc_stream_type;

PROCEDURE get_dep_no_prc_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_primary_sty_id   IN okl_strm_type_b.id%TYPE,
 p_dependent_sty_purpose IN okl_strm_type_b.stream_type_purpose%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND (STL.START_DATE <= l_contract_start_date)
AND (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	PRIMARY_STY_ID =   p_primary_sty_id
AND DEPENDENT_STY_PURPOSE = p_dependent_sty_purpose;

  l_product_id 				NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id		NUMBER;
  rec_count                 NUMBER := 0;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    OPEN dep_sty_csr (l_product_id, l_contract_start_date);
    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
      END IF;
    CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dep_no_prc_stream_type;


 PROCEDURE get_primary_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id  		   	     IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_purpose   IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 x_return_status		OUT NOCOPY VARCHAR2,
 x_primary_sty_id 		OUT NOCOPY strm_rec_type
)



IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR pry_sty_csr (l_pdt_id NUMBER, l_contract_start_date DATE) IS
SELECT PRIMARY_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE STL.PRIMARY_YN = 'Y'
AND STL.PDT_ID = l_pdt_id
AND    (STL.START_DATE <= l_contract_start_date)
AND    (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_PURPOSE =   p_primary_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  					NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_primary_sty_id 			  	NUMBER;
  l_primary_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;



  -- Bug 7703744: change l_product_id to p_pdt_id. l_product_id is always primary product.
  -- The product_id passed should be used instead.

  -- IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
  IF (p_pdt_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    -- Bug 7703744: change l_product_id to p_pdt_id.
    --OPEN pry_sty_csr (l_product_id, l_contract_start_date);
    OPEN pry_sty_csr (p_pdt_id, l_contract_start_date);
    FETCH pry_sty_csr INTO l_strm_rec_type;
      IF  pry_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_primary_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
                  			('OKL_STREAM_TYPE_PURPOSE', p_primary_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PRY_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_primary_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE pry_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_primary_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;


END get_primary_stream_type;

PROCEDURE get_primary_stream_types
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_primary_sty_purpose   IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 x_return_status		OUT NOCOPY VARCHAR2,
 x_primary_sty_id 		OUT NOCOPY okl_strm_type_id_tbl_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR pry_sty_csr (l_pdt_id NUMBER, l_contract_start_date DATE) IS
SELECT PRIMARY_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE STL.PRIMARY_YN = 'Y'
AND STL.PDT_ID = l_pdt_id
AND    (STL.START_DATE <= l_contract_start_date)
AND    (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_PURPOSE =   p_primary_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  	NUMBER;
  l_contract_start_date 	DATE;
  l_primary_sty_id 			NUMBER;
  rec_count                     INTEGER := 0;
  l_primary_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;
  x_primary_sty_id.delete;


  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    FOR l_pry_sty_csr_rec in pry_sty_csr(l_product_id, l_contract_start_date) LOOP
	   rec_count := rec_count + 1;
	   x_primary_sty_id(rec_count).id := l_pry_sty_csr_rec.primary_sty_id;
	   x_primary_sty_id(rec_count).pricing_name := l_pry_sty_csr_rec.pricing_name;
	END LOOP;

-- Bug 4064253
    IF  (x_primary_sty_id.count = 0) THEN
        l_primary_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
                  			('OKL_STREAM_TYPE_PURPOSE', p_primary_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PRY_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_primary_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

 -- x_primary_sty_id := l_primary_sty_id;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF pry_sty_csr%ISOPEN THEN
	    CLOSE pry_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;


END get_primary_stream_types;

PROCEDURE get_dependent_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_primary_sty_purpose   IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 p_dependent_sty_purpose IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND    (STL.START_DATE <= l_contract_start_date)
AND   (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_PURPOSE =   p_primary_sty_purpose
AND	   DEPENDENT_STY_PURPOSE =   p_dependent_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  					NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id 			  					NUMBER;
  l_dep_sty_purpose_meaning VARCHAR2(4000);
BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
    OPEN dep_sty_csr (l_product_id, l_contract_start_date);
    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dependent_stream_type;

PROCEDURE get_dependent_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_primary_sty_id        IN okl_strm_type_b.ID%TYPE,
 p_dependent_sty_purpose IN okl_strm_type_b.STREAM_TYPE_PURPOSE%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND    (STL.START_DATE <= l_contract_start_date)
AND   (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_ID =   p_primary_sty_id
AND	   DEPENDENT_STY_PURPOSE =   p_dependent_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  					NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id 			  					NUMBER;
  l_dep_sty_purpose_meaning VARCHAR2(4000);
BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
    OPEN dep_sty_csr (l_product_id, l_contract_start_date);
    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
	 END IF;
     CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dependent_stream_type;
PROCEDURE get_dependent_stream_types
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_primary_sty_id        IN okl_strm_type_b.ID%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY okl_strm_type_id_tbl_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND    (STL.START_DATE <= l_contract_start_date)
AND   (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_ID =   p_primary_sty_id
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  					NUMBER;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id 			  					NUMBER;
  rec_count                 NUMBER:= 0 ;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN
    FOR l_dep_sty_csr_rec in dep_sty_csr(l_product_id, l_contract_start_date) LOOP
	   rec_count := rec_count + 1;
	   x_dependent_sty_id(rec_count).id := l_dep_sty_csr_rec.dependent_sty_id;
	   x_dependent_sty_id(rec_count).pricing_name := l_dep_sty_csr_rec.pricing_name;
	END LOOP;

-- Bug 4064253
/*
    IF  (x_dependent_sty_id.count = 0) THEN
       Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                           p_msg_name     => 'OKL_NO_PDT_FOUND');,

       RAISE Okl_Api.G_EXCEPTION_ERROR;
	END IF;
*/

  ELSE
	 Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                         p_msg_name     => 'OKL_NO_PDT_FOUND');
     RAISE Okl_Api.G_EXCEPTION_ERROR;
  END IF;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dependent_stream_types;



PROCEDURE get_dependent_stream_types
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id                IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_id        IN okl_strm_type_b.ID%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY okl_strm_type_id_tbl_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID, PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND    (STL.START_DATE <= l_contract_start_date)
AND   (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_ID =   p_primary_sty_id
AND PRICING_NAME IS NOT NULL;

  l_product_id 			  					NUMBER;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id 			  					NUMBER;
  rec_count                 NUMBER := 0 ;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    FOR l_dep_sty_csr_rec in dep_sty_csr(p_pdt_id, l_contract_start_date) LOOP
	   rec_count := rec_count + 1;
	   x_dependent_sty_id(rec_count).id := l_dep_sty_csr_rec.dependent_sty_id;
	   x_dependent_sty_id(rec_count).pricing_name := l_dep_sty_csr_rec.pricing_name;
	END LOOP;

-- Bug 4064253
/*
    IF  (x_primary_sty_id.count = 0) THEN
       Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                           p_msg_name     => 'OKL_NO_PDT_FOUND');
       RAISE Okl_Api.G_EXCEPTION_ERROR;
   END IF;
*/


  ELSE
	 Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                         p_msg_name     => 'OKL_NO_PDT_FOUND');
     RAISE Okl_Api.G_EXCEPTION_ERROR;
  END IF;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dependent_stream_types;

PROCEDURE get_dependent_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id                IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_id        IN okl_strm_type_b.ID%TYPE,
 p_dependent_sty_purpose IN okl_strm_type_b.stream_type_purpose%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND (STL.START_DATE <= l_contract_start_date)
AND (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	PRIMARY_STY_ID =   p_primary_sty_id
AND DEPENDENT_STY_PURPOSE = p_dependent_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 				NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id		NUMBER;
  rec_count                 NUMBER := 0;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

  /* sechawla 27-nov-09 bug 9001267
  IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    OPEN dep_sty_csr (l_product_id, l_contract_start_date);
    */
    --Modified by sechawla for bug 9001267  to check p_pdt_id variable instead of l_product_id
    IF (p_pdt_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    --Modified by sechawla for bug 9001267  to pass p_pdt_id instead of l_product_id
    OPEN dep_sty_csr (p_pdt_id, l_contract_start_date);
    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN

-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
      END IF;
    CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dependent_stream_type;

PROCEDURE get_dependent_stream_type
(
 p_khr_id  		   	     IN okl_k_headers_full_v.id%TYPE,
 p_pdt_id                IN okl_k_headers_full_v.pdt_id%TYPE,
 p_primary_sty_purpose       IN okl_strm_type_b.stream_type_purpose%TYPE,
 p_dependent_sty_purpose     IN okl_strm_type_b.stream_type_purpose%TYPE,
 x_return_status		 OUT NOCOPY VARCHAR2,
 x_dependent_sty_id 	 OUT NOCOPY strm_rec_type
)

IS

CURSOR cntrct_csr (l_khr_id NUMBER)IS
SELECT pdt_id, start_date
FROM     okl_k_headers_full_v
WHERE id = l_khr_id;

CURSOR dep_sty_csr (l_product_id NUMBER, l_contract_start_date DATE) IS
SELECT DEPENDENT_STY_ID,PRICING_NAME
FROM   OKL_STRM_TMPT_LINES_UV STL
WHERE PRIMARY_YN = 'N'
AND STL.PDT_ID = l_product_id
AND    (STL.START_DATE <= l_contract_start_date)
AND   (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
AND	   PRIMARY_STY_PURPOSE =   p_primary_sty_purpose
AND	   DEPENDENT_STY_PURPOSE =   p_dependent_sty_purpose
AND PRICING_NAME IS NOT NULL;

  l_product_id 				NUMBER;
  l_strm_rec_type strm_rec_type;
  l_contract_start_date 	DATE;
  l_dependetn_sty_id		NUMBER;
  rec_count                 NUMBER;
  l_dep_sty_purpose_meaning VARCHAR2(4000);

BEGIN

  x_return_status         := Okl_Api.G_RET_STS_SUCCESS;

  OPEN cntrct_csr (p_khr_id);
  FETCH cntrct_csr INTO l_product_id, l_contract_start_date;
  CLOSE cntrct_csr;

/*  --sechawla 27-NOV-09 9001267
   IF (l_product_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    OPEN dep_sty_csr (l_product_id, l_contract_start_date);
    */
      --Modified by sechawla for bug 9001267 to check p_pdt_id variable instead of l_product_id
  IF (p_pdt_id IS NOT NULL) AND (l_contract_start_date IS NOT NULL) THEN

    --Modified by sechawla for bug 9001267 to pass p_pdt_id instead of l_product_id
    OPEN dep_sty_csr (p_pdt_id, l_contract_start_date);

    FETCH dep_sty_csr INTO l_strm_rec_type;
      IF  dep_sty_csr%NOTFOUND THEN
-- Bug 4064253

            l_dep_sty_purpose_meaning := OKL_ACCOUNTING_UTIL.GET_LOOKUP_MEANING
            			('OKL_STREAM_TYPE_PURPOSE', p_dependent_sty_purpose);

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_DEP_STY_FOUND',
                          p_token1        => 'PURPOSE',
                          p_token1_value  => l_dep_sty_purpose_meaning);

            RAISE Okl_Api.G_EXCEPTION_ERROR;
      END IF;
    CLOSE dep_sty_csr;

  ELSE

	        Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                          p_msg_name     => 'OKL_NO_PDT_FOUND');
            RAISE Okl_Api.G_EXCEPTION_ERROR;

  END IF;

  x_dependent_sty_id := l_strm_rec_type;

  EXCEPTION
  WHEN Okl_Api.G_EXCEPTION_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_ERROR ;

  WHEN Okl_Api.G_EXCEPTION_UNEXPECTED_ERROR THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

  WHEN OTHERS THEN
     IF cntrct_csr%ISOPEN THEN
	    CLOSE cntrct_csr;
	 END IF;
     IF dep_sty_csr%ISOPEN THEN
	    CLOSE dep_sty_csr;
	 END IF;
     x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;

END get_dependent_stream_type;

-- End code for new procedures of stream type

-- gboomina BUG#4508077 changes start
     -- procedure to update the rvi_amount and delete the primary stream
     PROCEDURE update_rvi_amount(p_api_version     IN  NUMBER,
                                 p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
                                 p_chr_id          IN  NUMBER,
                                 p_purpose         IN  VARCHAR2,
                                 x_return_status   OUT NOCOPY VARCHAR2,
                                 x_msg_count       OUT NOCOPY NUMBER,
                                 x_msg_data        OUT NOCOPY VARCHAR2)
     IS
       -- cursor to fetch the abosrbed fee line with purpose as RVI
       CURSOR rvi_fee_csr IS
         SELECT KLE.ID ID
         FROM OKL_K_LINES KLE, OKC_K_LINES_B CLE, OKC_LINE_STYLES_B LSE
         WHERE CLE.CHR_ID = p_chr_id
         AND CLE.DNZ_CHR_ID = p_chr_id
         AND CLE.ID = KLE.ID
         AND CLE.LSE_ID = LSE.ID
         AND LSE.LTY_CODE = 'FEE'
         AND KLE.FEE_PURPOSE_CODE = 'RVI'
         AND KLE.FEE_TYPE = 'ABSORBED';
       -- cursor to fetch the fee line details
       CURSOR get_fee_dtls_csr(p_line_id NUMBER) IS
         SELECT LINE_ID, ITEM_ID, ITEM_OBJECT1_ID1, ITEM_OBJECT1_ID2, LINE_START_DATE, LINE_END_DATE, LINE_AMOUNT
         FROM okl_k_fee_lines_uv
         WHERE LINE_ID = p_line_id;
       -- cursor to fetch the stream element amount
       CURSOR get_strmele_csr(p_khr_id NUMBER, p_strm_id NUMBER, p_sty_id NUMBER) IS
         SELECT ele.amount
         FROM okl_strm_elements ele,
              okl_streams str
         WHERE ele.stm_id = p_strm_id
         AND str.khr_id = p_khr_id
         AND str.sty_id = p_sty_id
         AND upper(str.say_code) = 'CURR'
         AND upper(str.active_yn) = 'Y';

       l_line_id NUMBER;
       lx_fee_types_rec okl_maintain_fee_pvt.fee_types_rec_type;
       l_fee_types_rec okl_maintain_fee_pvt.fee_types_rec_type;
       l_rvi_amount NUMBER;
       l_strm_id NUMBER;
       l_stmv_rec okl_streams_pub.stmv_rec_type;
       l_api_name VARCHAR2(255) := 'update_rvi_amount';
     BEGIN
       x_return_status := OKL_API.G_RET_STS_SUCCESS;
       -- Call start_activity to create savepoint, check compatibility
       -- and initialize message list
       x_return_status := OKL_API.START_ACTIVITY (
                                  l_api_name
                                  ,p_init_msg_list
                                  ,'_PVT'
                                  ,x_return_status);
       -- Check if activity started successfully
       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
       l_line_id := NULL;
       l_rvi_amount := NULL;
       -- get the abosrbed fee line with purpose code as RVI
       FOR l_rvi_fee_rec IN rvi_fee_csr
       LOOP
         l_line_id := l_rvi_fee_rec.ID;
       END LOOP;
       -- if abosrbed fee line with purpose code as RVI exists
       -- populate the fee record
       IF l_line_id IS NOT NULL THEN
          FOR l_fee_dtls_rec IN get_fee_dtls_csr(p_line_id => l_line_id)
          LOOP
            l_fee_types_rec.line_id     := l_line_id;
            l_fee_types_rec.dnz_chr_id  := p_chr_id;
            l_fee_types_rec.fee_type    := 'ABSORBED';
            l_fee_types_rec.item_id     := l_fee_dtls_rec.item_id;
            l_fee_types_rec.item_id1    := l_fee_dtls_rec.item_object1_id1;
            l_fee_types_rec.item_id2    := l_fee_dtls_rec.item_object1_id2;
            l_fee_types_rec.effective_from := l_fee_dtls_rec.line_start_date;
            l_fee_types_rec.effective_to   := l_fee_dtls_rec.line_end_date;
          END LOOP;
          -- fetch the residual value insurance amount
          -- get the stream header id
          FOR l_strm_rec IN strm_csr(p_chr_id,l_line_id,'CURR',p_purpose,l_fee_types_rec.item_id1)
          LOOP
            l_stmv_rec.id := l_strm_rec.strm_id;
            l_strm_id     := l_strm_rec.strm_id;
          END LOOP;

          IF l_strm_id IS NOT NULL THEN
            -- update the line amount only when the API is called for main product
            IF p_purpose = 'ORIGIN' THEN
              -- get the amount
              FOR l_strmele_rec IN get_strmele_csr(p_chr_id, l_strm_id, l_fee_types_rec.item_id1)
              LOOP
                l_rvi_amount := l_strmele_rec.amount;
              END LOOP;
              -- update the fee line amount when the stream element returns a value
              IF l_rvi_amount IS NOT NULL THEN
                l_fee_types_rec.amount    := l_rvi_amount;
                -- update the fee line
                okl_maintain_fee_pvt.update_fee_type(p_api_version   => p_api_version,
                                                     p_init_msg_list => OKL_API.G_FALSE,
                                                     x_return_status => x_return_status,
                                                     x_msg_count     => x_msg_count,
                                                     x_msg_data      => x_msg_data,
                                                     p_fee_types_rec => l_fee_types_rec,
                                                     x_fee_types_rec => lx_fee_types_rec);
                IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
              END IF; -- end of stream element check
            END IF; -- end of main product check
            -- delete the primary stream for all products
            okl_streams_pub.delete_streams(p_api_version => p_api_version,
                                           p_init_msg_list => OKL_API.G_FALSE,
                                           x_return_status => x_return_status,
                                           x_msg_count => x_msg_count,
                                           x_msg_data => x_msg_data,
                                           p_stmv_rec => l_stmv_rec);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF; -- end of strm id not null check
       END IF; -- end of line id not null check
       OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data  => x_msg_data);
     EXCEPTION
           WHEN OKL_API.G_EXCEPTION_ERROR THEN
                   x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                           p_api_name  => l_api_name,
                           p_pkg_name  => g_pkg_name,
                           p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
                           x_msg_count => x_msg_count,
                           x_msg_data  => x_msg_data,
                           p_api_type  => g_api_type);

        WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
                   x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                           p_api_name  => l_api_name,
                           p_pkg_name  => g_pkg_name,
                           p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
                           x_msg_count => x_msg_count,
                           x_msg_data  => x_msg_data,
                           p_api_type  => g_api_type);

           WHEN OTHERS then
          x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                           p_api_name  => l_api_name,
                           p_pkg_name  => g_pkg_name,
                           p_exc_name  => 'OTHERS',
                           x_msg_count => x_msg_count,
                           x_msg_data  => x_msg_data,
                           p_api_type  => g_api_type);
     END update_rvi_amount;
-- gboomina BUG#4508077 changes end

--Debuging procedures
-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : yield_request
-- Description          : Making of Yield requests
-- Business Rules       : Yields are requested from the pricing engine as needed
-- Parameters           : out yield pl/sql table of recors
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  FUNCTION yield_request(x_csm_yields_tbl OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type)
  RETURN VARCHAR2 IS
    l_prog_name                     VARCHAR2(100) := 'YIELD_REQUEST';
    x_return_status                 VARCHAR2(3)   := okl_api.g_ret_sts_success;
    l_csm_yields_tbl                okl_create_streams_pub.csm_yields_tbl_type;
  BEGIN
    -- Pre tax IRR with subsidy
    l_csm_yields_tbl(1).yield_name        := 'PTIRR';
    l_csm_yields_tbl(1).method            := 'Internal rate-of-return';
    l_csm_yields_tbl(1).array_type        := 'PTCF';
    l_csm_yields_tbl(1).compounded_method := 'Periodic';
    l_csm_yields_tbl(1).nominal_yn        := 'Y';
    l_csm_yields_tbl(1).pre_tax_yn        := 'Y';
    l_csm_yields_tbl(1).siy_type          := okl_create_streams_pvt.g_siy_type_yield;
    -- After tax IRR with subsidy
    l_csm_yields_tbl(2).yield_name        := 'NAT';
    l_csm_yields_tbl(2).method            := 'Internal rate-of-return';
    l_csm_yields_tbl(2).array_type        := 'ATCF';
    l_csm_yields_tbl(2).compounded_method := 'Periodic';
    l_csm_yields_tbl(2).nominal_yn        := 'Y';
    l_csm_yields_tbl(2).pre_tax_yn        := 'Y';
    l_csm_yields_tbl(2).siy_type          := okl_create_streams_pvt.g_siy_type_yield;
     -- Booking yield with subsidy
    l_csm_yields_tbl(3).yield_name        := 'Booking';
    l_csm_yields_tbl(3).method            := 'FAS 13 accounting';
    l_csm_yields_tbl(3).array_type        := 'Full-term rate and subsidies';
    l_csm_yields_tbl(3).compounded_method := 'Periodic';
    l_csm_yields_tbl(3).nominal_yn        := 'Y';
    l_csm_yields_tbl(3).pre_tax_yn        := 'Y';
    l_csm_yields_tbl(3).siy_type          := okl_create_streams_pvt.g_siy_type_yield;
    -- Pre tax IRR without subsidy
    l_csm_yields_tbl(4).yield_name        := 'PTIRRWS';
    l_csm_yields_tbl(4).method            := 'Internal rate-of-return';
    l_csm_yields_tbl(4).array_type        := 'PTCF w/o subsidies';
    l_csm_yields_tbl(4).compounded_method := 'Periodic';
    l_csm_yields_tbl(4).nominal_yn        := 'Y';
    l_csm_yields_tbl(4).pre_tax_yn        := 'Y';
    l_csm_yields_tbl(4).siy_type          := okl_create_streams_pvt.g_siy_type_yield;
    -- After tax IRR without subsidy
    l_csm_yields_tbl(5).yield_name        := 'NATWS';
    l_csm_yields_tbl(5).method            := 'Internal rate-of-return';
    l_csm_yields_tbl(5).array_type        := 'ATCF w/o subsidies';
    l_csm_yields_tbl(5).compounded_method := 'Periodic';
    l_csm_yields_tbl(5).nominal_yn        := 'Y';
    l_csm_yields_tbl(5).pre_tax_yn        := 'N';
    l_csm_yields_tbl(5).siy_type          := okl_create_streams_pvt.g_siy_type_yield;
    -- Booking yield without subsidy
    l_csm_yields_tbl(6).yield_name        := 'BookingWS';
    l_csm_yields_tbl(6).method            := 'FAS 13 accounting';
    l_csm_yields_tbl(6).array_type        := 'Full-term rate';
    l_csm_yields_tbl(6).compounded_method := 'Periodic';
    l_csm_yields_tbl(6).nominal_yn        := 'Y';
    l_csm_yields_tbl(6).pre_tax_yn        := 'N';
    l_csm_yields_tbl(6).siy_type          := okl_create_streams_pvt.g_siy_type_yield;
    -- Assign output rec
    x_csm_yields_tbl := l_csm_yields_tbl;
    RETURN x_return_status;
  EXCEPTION
    WHEN OTHERS THEN
      okl_api.set_message (p_app_name     => G_APP_NAME,
                           p_msg_name     => G_DB_ERROR,
                           p_token1       => G_PROG_NAME_TOKEN,
                           p_token1_value => l_prog_name,
                           p_token2       => G_SQLCODE_TOKEN,
                           p_token2_value => sqlcode,
                           p_token3       => G_SQLERRM_TOKEN,
                           p_token3_value => sqlerrm);
      x_return_status := okl_api.g_ret_sts_error;
      RETURN x_return_status;
  END yield_request;
--------------------------------------------------------------------------------
-- Start modification 11i9 bakuchib
-- Start modification Bug#3066346 bakuchib
--------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : validate_txd_tax_book
-- Description          : Validate the Tax book for an asset number
-- Business Rules       : If there is only a single tax book and it is not
--                        designated as either Federal or State,
--                        We assume it as Federal.
--                        IF there are two tax books and neither is designated
--                        as either Federal or State, We issue an error
--                        during stream generation.
-- Parameters           : p_asset_number
-- Version              : 1.0
-- History              : BAKUCHIB  29-JUL-2003 - 3066346 created
--                      : BAKUCHIB  05-FEB-2004 - 3381853 Modified
-- End of Commnets
--------------------------------------------------------------------------------
  FUNCTION validate_txd_tax_book(p_asset_number       IN OKL_TXD_ASSETS_B.ASSET_NUMBER%TYPE,
                                 x_fed_only_tax_book  OUT NOCOPY OKL_TXD_ASSETS_B.TAX_BOOK%TYPE,
                                 x_fed_only           OUT NOCOPY VARCHAR2)
  RETURN VARCHAR2 IS
    l_prog_name                   VARCHAR2(100) := 'VAL_TXD_TAX_BOOK';
    g_process_error               EXCEPTION;
    G_NO_SETUP_TAX_BOOK  CONSTANT VARCHAR2(200) := 'OKL_LLP_TAX_BOOK_MAP';
    x_return_status               VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    i                             NUMBER := 0;
    lv_tax_book                   OKL_TXD_ASSETS_B.TAX_BOOK%TYPE := NULL;
    -- Get the OKL_TXD_ASSETS_B info
    CURSOR l_txd_csr(p_asset_num VARCHAR2)
    IS
    SELECT tax_book
    FROM okl_txd_assets_v txd
    WHERE txd.asset_number = p_asset_num;
    -- Get the types of TAX BOOKS defined in the setup
    -- We get first for the Federal or state
    CURSOR l_txtrans_csr (p_book  fa_book_controls.book_type_code%TYPE)
    IS
    SELECT trns.value,
           books.book_type_code
    FROM okl_sgn_translations trns,
         fa_book_controls books
    WHERE trns.jtot_object1_code = 'FA_BOOK_CONTROLS'
    AND trns.object1_id1 = books.book_type_code
    AND books.book_type_code = p_book;
    TYPE tax_book_value_rec IS RECORD(
      tax_book           okl_txd_assets_b.tax_book%TYPE  := NULL ,
      value              okl_sgn_translations.value%TYPE := NULL);
    TYPE tax_book_value_tbl IS TABLE OF tax_book_value_rec
        INDEX BY BINARY_INTEGER;
    lt_tax_book_value_tbl tax_book_value_tbl;
  BEGIN
    -- We scan thru OKL_TXD_ASSETS_B for tax book
    FOR r_txd_csr IN l_txd_csr(p_asset_num => p_asset_number) LOOP
      OPEN  l_txtrans_csr(p_book  => r_txd_csr.tax_book);
      FETCH l_txtrans_csr INTO lt_tax_book_value_tbl(i).value,
                               lt_tax_book_value_tbl(i).tax_book;
      IF l_txtrans_csr%NOTFOUND THEN
        lt_tax_book_value_tbl(i).tax_book := r_txd_csr.tax_book;
      END IF;
      CLOSE l_txtrans_csr;
      i := i + 1;
    END LOOP;
    x_fed_only          := 'N';
    x_fed_only_tax_book := NULL;
    IF lt_tax_book_value_tbl.COUNT = 1 THEN
      IF lt_tax_book_value_tbl(lt_tax_book_value_tbl.FIRST).VALUE IS NULL THEN
        x_fed_only          := 'Y';
        x_fed_only_tax_book := lt_tax_book_value_tbl(lt_tax_book_value_tbl.FIRST).tax_book;
        RETURN x_return_status;
      END IF;
    ELSIF lt_tax_book_value_tbl.COUNT > 1 THEN
      FOR j IN lt_tax_book_value_tbl.FIRST..lt_tax_book_value_tbl.LAST LOOP
        EXIT WHEN(j = j + 1);
        IF lt_tax_book_value_tbl(j).VALUE IS NULL AND
           lt_tax_book_value_tbl(j+1).VALUE IS NULL THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_NO_SETUP_TAX_BOOK,
                              p_token1        => 'TAX_BOOK',
                              p_token1_value  => lt_tax_book_value_tbl(j).tax_book);
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
      END LOOP;
    ELSE
      x_fed_only          := 'N';
      x_fed_only_tax_book := NULL;
      RETURN x_return_status;
    END IF;
    IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
      RAISE g_process_error;
    END IF;
    RETURN x_return_status;
  EXCEPTION
    WHEN g_process_error THEN
      IF l_txtrans_csr%ISOPEN THEN
        CLOSE l_txtrans_csr;
      END IF;
      IF l_txd_csr%ISOPEN THEN
        CLOSE l_txd_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
      RETURN x_return_status;
    WHEN OTHERS THEN
      IF l_txtrans_csr%ISOPEN THEN
        CLOSE l_txtrans_csr;
      END IF;
      IF l_txd_csr%ISOPEN THEN
        CLOSE l_txd_csr;
      END IF;
      OKL_API.SET_MESSAGE (p_app_name     => G_APP_NAME,
                           p_msg_name     => G_DB_ERROR,
                           p_token1       => G_PROG_NAME_TOKEN,
                           p_token1_value => l_prog_name,
                           p_token2       => G_SQLCODE_TOKEN,
                           p_token2_value => sqlcode,
                           p_token3       => G_SQLERRM_TOKEN,
                           p_token3_value => sqlerrm);
      x_return_status := OKL_API.G_RET_STS_ERROR;
      RETURN x_return_status;
  END validate_txd_tax_book;
-------------------------------------------------------------------------------------------------
-- Start modification 11i10 bakuchib
-- Start modification Bug#3447917 bakuchib
--------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Function Name        : is_rep_pdt
-- Description          : Validate if the original product has a reporting product
-- Business Rules       : If there is a reporting product then we would generated
--                        book depreciation streams for the reporting tax book.
--                        and not generate federal depreciation streams or state
--                        depreciation streams.
-- Parameters           :
-- Version              : 1.0
-- History              : BAKUCHIB  20-FEB-2004 - 3447917 created
-- End of Commnets
--------------------------------------------------------------------------------
  -- bug 4194673 fixed by HKPATEL
  FUNCTION is_rep_pdt(--p_asset_number IN okl_txd_assets_b.asset_number%TYPE,
                      p_corp_book IN VARCHAR2,
                      x_mg_tax_yn    OUT NOCOPY VARCHAR2)
  RETURN VARCHAR2 IS
    l_prog_name                   VARCHAR2(100) := 'IS_REP_PDT';
    x_return_status               VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    lv_mg_tax_yn                   VARCHAR2(3) := 'N';
	/*
    CURSOR get_rep_tax_csr(p_asset_number okl_txd_assets_b.asset_number%TYPE)
    IS
    SELECT 'Y'
    FROM DUAL
    WHERE EXISTS (SELECT 'Y'
                  FROM okl_txd_assets_b txd
                  WHERE txd.asset_number = p_asset_number
                  AND txd.tax_book = fnd_profile.value('OKL_REPORTING_PDT_ASSET_BOOK'));
   */
   CURSOR get_rep_tax_csr(p_corp_book VARCHAR2)
   IS
   SELECT 'Y'
   FROM   fa_book_controls
   WHERE  book_class = 'TAX'
   AND    mass_copy_source_book = p_corp_book
   AND    book_type_code = OKL_SYSTEM_PARAMS_ALL_PUB.get_system_param_value(OKL_SYSTEM_PARAMS_ALL_PUB.G_RPT_PROD_BOOK_TYPE_CODE);

  BEGIN
    --OPEN  get_rep_tax_csr(p_asset_number => p_asset_number);
	OPEN  get_rep_tax_csr(p_corp_book => p_corp_book);
    FETCH get_rep_tax_csr INTO lv_mg_tax_yn;
    CLOSE get_rep_tax_csr;
    x_mg_tax_yn := NVL(lv_mg_tax_yn,'N');
    RETURN x_return_status;
  EXCEPTION
    WHEN OTHERS THEN
      IF get_rep_tax_csr%ISOPEN THEN
        CLOSE get_rep_tax_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
      RETURN x_return_status;
  END is_rep_pdt;
-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : execute_formula
-- Description          : Execution of Formula Based on Line Status
-- Business Rules       : Execution of the formula will be based on the line status
--                        of the contract, presently we will be considering the TERMINATED
--                        line to compute the forumla since the resultant value will be
--                        included in yield calculations.
-- Parameters           : Standard Parameters with p_khr_id and p_line_id
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE execute_formula(p_api_version   IN  NUMBER,
                            p_init_msg_list IN  VARCHAR2,
                            x_return_status OUT NOCOPY VARCHAR2,
                            x_msg_count     OUT NOCOPY NUMBER,
                            x_msg_data      OUT NOCOPY VARCHAR2,
                            p_formula_name  IN  okl_formulae_v.name%TYPE,
                            p_contract_id   IN  okl_k_headers_v.id%TYPE,
                            p_line_id       IN  okl_k_lines_v.id%TYPE,
                            x_value         OUT NOCOPY NUMBER)
  IS
    l_api_name      CONSTANT VARCHAR2(30) := 'EXECUTE_FORMULA';
    lv_hdr_ter               VARCHAR2(3) := 'N';
    lv_lne_ter               VARCHAR2(3) := 'N';
    SUBTYPE ctxt_val_tbl_type IS
            okl_execute_formula_pvt.ctxt_val_tbl_type;
    l_additional_parameters  ctxt_val_tbl_type;
    -- To check if the chr_id has TERMINATED Line
    CURSOR l_hdr_ter_csr (p_chr_id NUMBER)
    IS
    SELECT 'Y'
    FROM dual
    WHERE EXISTS (SELECT 'Y'
                  FROM okc_k_lines_b cle,
                       okc_line_styles_b lse
                  WHERE cle.dnz_chr_id = p_chr_id
                  AND cle.lse_id = lse.id
                  AND cle.sts_code = 'TERMINATED'
                  AND lse.lty_code = 'FREE_FORM1');
    -- To check if the chr_id and line_id is a TERMINATED Line
    CURSOR l_lne_ter_csr (p_chr_id NUMBER,
                          p_cle_id NUMBER)
    IS
    SELECT 'Y'
    FROM dual
    WHERE EXISTS (SELECT 'Y'
                  FROM okc_k_lines_b cle,
                       okc_line_styles_b lse
                  WHERE cle.dnz_chr_id = p_chr_id
                  AND cle.id = p_cle_id
                  AND cle.lse_id = lse.id
                  AND cle.sts_code = 'TERMINATED'
                  AND lse.lty_code = 'FREE_FORM1');
  BEGIN
    x_return_status      := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    IF (p_contract_id IS NOT NULL OR
       p_contract_id <> okl_api.g_miss_num) AND
       (p_line_id IS NULL OR
        p_line_id = okl_api.g_miss_num) THEN
      OPEN  l_hdr_ter_csr(p_chr_id => p_contract_id);
      FETCH l_hdr_ter_csr INTO lv_hdr_ter;
      CLOSE l_hdr_ter_csr;
      IF lv_hdr_ter = 'Y' THEN
        -- We need to set the global formula addtional parameter to Y and reset the
        -- same to N after using the formula since we need to consider TERMINATED lines
        l_additional_parameters(0).name  := 'TERMINATED_LINES_YN';
        l_additional_parameters(0).value := 'Y';
        -- Calling the formula Engine with additional parameter
        -- so that the terminated lines are included for computing
        OKL_EXECUTE_FORMULA_PUB.execute(p_api_version           => p_api_version,
                                        p_init_msg_list         => p_init_msg_list,
                                        x_return_status         => x_return_status,
                                        x_msg_count             => x_msg_count,
                                        x_msg_data              => x_msg_data,
                                        p_formula_name          => p_formula_name,
                                        p_contract_id           => p_contract_id,
                                        p_line_id               => NULL,
                                        p_additional_parameters => l_additional_parameters,
                                        x_value                 => x_value);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        -- We need to set the global formula addtional parameter to Y and reset the
        -- same to N after using the formula since we need to consider TERMINATED lines
        l_additional_parameters.delete;
      ELSIF lv_hdr_ter <> 'Y' THEN
        -- Normal calling of the formula engine
        OKL_EXECUTE_FORMULA_PUB.execute(p_api_version           => p_api_version,
                                        p_init_msg_list         => p_init_msg_list,
                                        x_return_status         => x_return_status,
                                        x_msg_count             => x_msg_count,
                                        x_msg_data              => x_msg_data,
                                        p_formula_name          => p_formula_name,
                                        p_contract_id           => p_contract_id,
                                        p_line_id               => NULL,
                                        x_value                 => x_value);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
    ELSIF (p_contract_id IS NOT NULL OR
       p_contract_id <> okl_api.g_miss_num) AND
       (p_line_id IS NOT NULL OR
        p_line_id <> okl_api.g_miss_num) THEN
      OPEN  l_lne_ter_csr(p_chr_id => p_contract_id,
                          p_cle_id => p_line_id);
      FETCH l_lne_ter_csr INTO lv_lne_ter;
      CLOSE l_lne_ter_csr;
      IF lv_lne_ter = 'Y' THEN
        -- We need to set the global formula addtional parameter to Y and reset the
        -- same to N after using the formula since we need to consider TERMINATED lines
        l_additional_parameters(0).name  := 'TERMINATED_LINES_YN';
        l_additional_parameters(0).value := 'Y';
        -- Calling the formula Engine with additional parameter
        -- so that the terminated lines are included for computing
        OKL_EXECUTE_FORMULA_PUB.execute(p_api_version           => p_api_version,
                                        p_init_msg_list         => p_init_msg_list,
                                        x_return_status         => x_return_status,
                                        x_msg_count             => x_msg_count,
                                        x_msg_data              => x_msg_data,
                                        p_formula_name          => p_formula_name,
                                        p_contract_id           => p_contract_id,
                                        p_line_id               => p_line_id,
                                        p_additional_parameters => l_additional_parameters,
                                        x_value                 => x_value);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        -- We need to set the global formula addtional parameter to Y and reset the
        -- same to N after using the formula since we need to consider TERMINATED lines
        l_additional_parameters.delete;
      ELSIF lv_lne_ter <> 'Y' THEN
        -- Normal calling of the formula engine
        OKL_EXECUTE_FORMULA_PUB.execute(p_api_version           => p_api_version,
                                        p_init_msg_list         => p_init_msg_list,
                                        x_return_status         => x_return_status,
                                        x_msg_count             => x_msg_count,
                                        x_msg_data              => x_msg_data,
                                        p_formula_name          => p_formula_name,
                                        p_contract_id           => p_contract_id,
                                        p_line_id               => p_line_id,
                                        x_value                 => x_value);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
    ELSE
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_REQUIRED_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Stub days, Periods');
      x_return_status := okl_api.g_ret_sts_error;
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR then
      IF l_hdr_ter_csr%ISOPEN THEN
        CLOSE l_hdr_ter_csr;
      END IF;
      IF l_lne_ter_csr%ISOPEN THEN
        CLOSE l_lne_ter_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
      IF l_hdr_ter_csr%ISOPEN THEN
        CLOSE l_hdr_ter_csr;
      END IF;
      IF l_lne_ter_csr%ISOPEN THEN
        CLOSE l_lne_ter_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS then
      IF l_hdr_ter_csr%ISOPEN THEN
        CLOSE l_hdr_ter_csr;
      END IF;
      IF l_lne_ter_csr%ISOPEN THEN
        CLOSE l_lne_ter_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END execute_formula;
-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : append_perd_exp_tbl
-- Description          : append_perd_exp_tbl
-- Business Rules       : If the start date of the contract and start of the payment level
--                        are different we then append the periodic expenses table
--                        to include a stub.This is done for Fee lines only.
-- Parameters           : Standard Parameters with p_khr_id and p_csm_perd_exp_tbl
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  FUNCTION append_perd_exp_tbl(p_khr_id           IN OKC_K_HEADERS_B.ID%TYPE,
                               p_csm_perd_exp_tbl IN OUT NOCOPY OKL_CREATE_STREAMS_PUB.csm_periodic_expenses_tbl_type)
  RETURN VARCHAR2 IS
    l_csm_perd_exp_tbl     OKL_CREATE_STREAMS_PUB.csm_periodic_expenses_tbl_type := p_csm_perd_exp_tbl;
    m_csm_perd_exp_tbl     OKL_CREATE_STREAMS_PUB.csm_periodic_expenses_tbl_type;
    mx_csm_perd_exp_tbl    OKL_CREATE_STREAMS_PUB.csm_periodic_expenses_tbl_type;
    lx_csm_perd_exp_tbl    OKL_CREATE_STREAMS_PUB.csm_periodic_expenses_tbl_type;
    i                      NUMBER := 0;
    m                      NUMBER := 0;
    n                      NUMBER := 0;
    ld_start_date          OKC_K_HEADERS_B.START_DATE%TYPE;
    g_process_error        EXCEPTION;
    x_return_status        VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    -- Cursor to get the Start of the contract
    -- To compare the date Start of the table of Records
    CURSOR c_start_date_khr_csr(p_khr_id OKC_K_HEADERS_B.ID%TYPE)
    IS
    SELECT start_date
    FROM okc_k_headers_b
    WHERE id = p_khr_id;
    -- Since We are now Dealing with fee lines
    -- So we look for Fee lines in the Table of Records
    CURSOR c_fee_line_csr(p_khr_id OKC_K_HEADERS_B.ID%TYPE)
    IS
    SELECT cle.id id
    FROM okc_k_lines_b cle,
         okc_line_styles_b lse
    WHERE dnz_chr_id =  p_khr_id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'FEE';
  BEGIN
    IF p_khr_id IS NOT NULL OR
       p_khr_id <> OKL_API.G_MISS_NUM THEN
      -- Cursor to get the Start of the contract
      -- To compare the date Start of the table of Records
      OPEN  c_start_date_khr_csr(p_khr_id => p_khr_id);
      FETCH c_start_date_khr_csr INTO ld_start_date;
      IF c_start_date_khr_csr%NOTFOUND THEN
        RAISE g_process_error;
      END IF;
      CLOSE c_start_date_khr_csr;
      IF l_csm_perd_exp_tbl.COUNT > 0 THEN
        -- Since We are now Dealing with fee lines
        -- So we look for Fee lines in the Table of Records
        FOR r_fee_line_csr IN c_fee_line_csr(p_khr_id => p_khr_id) LOOP
          -- Now scanning the table of records and build a temp table of
          -- records which match the below condition
          FOR i IN l_csm_perd_exp_tbl.FIRST..l_csm_perd_exp_tbl.LAST LOOP
            IF l_csm_perd_exp_tbl(i).kle_fee_id = r_fee_line_csr.id AND
               l_csm_perd_exp_tbl(i).level_index_number = 1  AND
               (ld_start_date IS NOT NULL                    OR
               ld_start_date <> OKL_API.G_MISS_DATE)         AND
               l_csm_perd_exp_tbl(i).date_start <> ld_start_date THEN
              m_csm_perd_exp_tbl(i) := l_csm_perd_exp_tbl(i);
            END IF;
          END LOOP;
        END LOOP;
        -- If the Temp table of records are there
        IF m_csm_perd_exp_tbl.COUNT > 0 THEN
          -- Scan each record of the temp table
          i :=  m_csm_perd_exp_tbl.FIRST;
          LOOP
            -- Scan each record of the org table
            FOR j IN l_csm_perd_exp_tbl.FIRST..l_csm_perd_exp_tbl.LAST LOOP
              IF j = (i + m) THEN
                -- if the record of the org table matches the temp table records.
                -- Then re arrange the table of record index number.
                FOR k IN REVERSE j..l_csm_perd_exp_tbl.LAST LOOP
                  l_csm_perd_exp_tbl(k+1) := l_csm_perd_exp_tbl(k);
                END LOOP;
                -- Now after re arrangement we are Modifying the stub record.
                l_csm_perd_exp_tbl(j).level_index_number := 0;
                l_csm_perd_exp_tbl(j).number_of_periods := 1;
                l_csm_perd_exp_tbl(j).lock_level_step := NULL;
                -- Start modification bug#3145540,3145597
                l_csm_perd_exp_tbl(j).advance_or_arrears :=  OKL_CREATE_STREAMS_PUB.G_ARREARS;
                -- End modification bug#3145540,3145597
                l_csm_perd_exp_tbl(j).query_level_yn := NULL;
                l_csm_perd_exp_tbl(j).structure := NULL;
                l_csm_perd_exp_tbl(j).amount := 0;
                l_csm_perd_exp_tbl(j).period := 'T';
              END IF;
            END LOOP;
            EXIT WHEN (i = m_csm_perd_exp_tbl.LAST);
            i := m_csm_perd_exp_tbl.NEXT(i);
            m := m + 1;
          END LOOP;
        END IF;
        IF l_csm_perd_exp_tbl.COUNT > 0 THEN
          -- Since We are now Dealing with fee lines
          -- So we look for Fee lines in the Table of Records
          FOR r_fee_line_csr IN c_fee_line_csr(p_khr_id => p_khr_id) LOOP
            n := 0;
            -- We are now re arranging the Level index number so that it
            -- should start from 1 instead of 0 .
            FOR i IN l_csm_perd_exp_tbl.FIRST..l_csm_perd_exp_tbl.LAST LOOP
              IF l_csm_perd_exp_tbl(i).kle_fee_id = r_fee_line_csr.id AND
                 l_csm_perd_exp_tbl(i).level_index_number = n AND
                 (ld_start_date IS NOT NULL                    OR
                 ld_start_date <> OKL_API.G_MISS_DATE)         AND
                 l_csm_perd_exp_tbl(i).date_start <> ld_start_date THEN
                 n := n + 1;
                 l_csm_perd_exp_tbl(i).level_index_number := n;
              END IF;
            END LOOP;
          END LOOP;
        END IF;
      END IF;
    ELSE
      RAISE g_process_error;
    END IF;
    p_csm_perd_exp_tbl := l_csm_perd_exp_tbl;
    RETURN x_return_status;
  EXCEPTION
    WHEN g_process_error THEN
      IF c_start_date_khr_csr%ISOPEN THEN
        CLOSE c_start_date_khr_csr;
      END IF;
      IF c_fee_line_csr%ISOPEN THEN
        CLOSE c_fee_line_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
      RETURN x_return_status;
    WHEN OTHERS THEN
      IF c_start_date_khr_csr%ISOPEN THEN
        CLOSE c_start_date_khr_csr;
      END IF;
      IF c_fee_line_csr%ISOPEN THEN
        CLOSE c_fee_line_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
      RETURN x_return_status;
  END append_perd_exp_tbl;
-- End modification 11i9 bakuchib
  PROCEDURE delete_working_streams(
            p_api_version   IN NUMBER,
            p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status OUT NOCOPY VARCHAR2,
            x_msg_count     OUT NOCOPY NUMBER,
            x_msg_data      OUT NOCOPY VARCHAR2,
            p_chr_id        IN  NUMBER) AS
    l_api_name		CONSTANT VARCHAR2(30) := 'DELETE_WKG_STRMS';
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    l_api_version       NUMBER                := 1.0;

    l_stmv_tbl okl_streams_pub.stmv_tbl_type;
    x_stmv_tbl okl_streams_pub.stmv_tbl_type;
    l_strms_orig_rec strms_csr%ROWTYPE;
    l_strms_rep_rec strms_csr%ROWTYPE;

    i NUMBER;

  Begin

     print( l_api_name, 'begin');
     l_return_status := OKL_API.START_ACTIVITY(
 			p_api_name      => l_api_name,
 			p_pkg_name      => g_pkg_name,
 			p_init_msg_list => p_init_msg_list,
 			l_api_version   => l_api_version,
 			p_api_version   => p_api_version,
 			p_api_type      => G_API_TYPE,
 			x_return_status => x_return_status);

     -- check if activity started successfully
     If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
     End If;

     i := 0;
     FOR l_strms_orig_rec in strms_csr ( p_chr_id, 'WORK', 'ORIGIN')
     LOOP

         i := i + 1;
         print( l_api_name, 'DELETE:'||to_char(l_strms_orig_rec.strm_id));
         l_stmv_tbl(i).id := l_strms_orig_rec.STRM_ID;
         l_stmv_tbl(i).sty_id := l_strms_orig_rec.STY_ID;
         l_stmv_tbl(i).khr_id := p_chr_id;
         l_stmv_tbl(i).sgn_code := l_strms_orig_rec.SGN_CODE;
         l_stmv_tbl(i).transaction_number := l_strms_orig_rec.TRN_NUM;

     END LOOP;
     FOR l_strms_rep_rec in strms_csr ( p_chr_id, 'WORK', 'REPORT')
     LOOP

         i := i + 1;
         print( l_api_name, 'DELETE:'||to_char(l_strms_rep_rec.strm_id));
         l_stmv_tbl(i).id := l_strms_rep_rec.STRM_ID;
         l_stmv_tbl(i).sty_id := l_strms_rep_rec.STY_ID;
         l_stmv_tbl(i).khr_id := p_chr_id;
         l_stmv_tbl(i).sgn_code := l_strms_rep_rec.SGN_CODE;
         l_stmv_tbl(i).transaction_number := l_strms_rep_rec.TRN_NUM;

     END LOOP;

     If ( i > 0 ) Then

         Okl_Streams_pub.delete_streams(
                          p_api_version => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count => x_msg_count,
                          x_msg_data => x_msg_data,
                          p_stmv_tbl => l_stmv_tbl);

         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;

    End If;

     print( l_api_name, 'end');
  EXCEPTION
	when OKL_API.G_EXCEPTION_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;

	when OTHERS then
          	l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;


  End delete_working_streams;


  --Added by rgooty for bug 8399461
  -- Start of comments
  -- Procedure Name     : get_pth_fee_due_amount
  -- Description        : This procedure calculates and returns the passthrough
  --                      fee payment due amount before payout out date
  -- End of comments
  PROCEDURE get_pth_fee_due_amount(p_chr_id           IN NUMBER,
                                   p_kle_id           IN NUMBER,
                                   p_prev_payout_date IN DATE,
                                   p_payout_date      IN DATE,
                                   x_bill_amount      OUT NOCOPY NUMBER,
                                   x_return_status    OUT NOCOPY VARCHAR2) AS
    l_api_name          CONSTANT VARCHAR2(30) := 'get_pth_fee_due_amount';
    l_payment_date      DATE;
    l_arrears           VARCHAR2(1) := NULL;
    l_recurrence_day    NUMBER;
    l_rl_rec2           l_rl_csr2%ROWTYPE;
    l_num_of_periods    NUMBER;
    l_period_start_date DATE;
    l_bill_amount       NUMBER := 0;
    x_msg_data          VARCHAR2(4000);
    x_msg_count         NUMBER;
    l_arrears_pay_dates_option  VARCHAR2(60);
    l_pdt_id_rec                l_hdr_pdt_csr%ROWTYPE;

    CURSOR c_arrears_option_at_sgt_csr (p_pdt_id NUMBER)
    IS
    SELECT tst.isg_arrears_pay_dates_option
      FROM okl_st_gen_tmpt_sets tst,
           okl_ae_tmpt_sets     aes,
           okl_products         pdt
     WHERE pdt.id = p_pdt_id
       AND aes.id = pdt.aes_id
       AND tst.id = aes.gts_id;

  BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     l_recurrence_day := NULL;
     OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), p_kle_id);
     FETCH l_rl_csr2 INTO l_rl_rec2;
     IF l_rl_csr2%FOUND THEN
        FOR l_rl_rec in l_rl_csr (l_rl_rec2.slh_id, 'LALEVL', 'LASLL', p_chr_id, p_kle_id) LOOP
           IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
              IF(l_arrears IS NULL) THEN
                  OPEN l_hdr_pdt_csr(p_chr_id);
                  FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
                  CLOSE l_hdr_pdt_csr;

                  IF(g_rep_req_yn = 'Y') THEN
                    OPEN  c_arrears_option_at_sgt_csr(l_pdt_id_rec.report_pdt_id);
                    FETCH c_arrears_option_at_sgt_csr INTO l_arrears_pay_dates_option;
                    CLOSE c_arrears_option_at_sgt_csr;
                  ELSE
                    OPEN  c_arrears_option_at_sgt_csr(l_pdt_id_rec.pid);
                    FETCH c_arrears_option_at_sgt_csr INTO l_arrears_pay_dates_option;
                    CLOSE c_arrears_option_at_sgt_csr;
                  END IF;
              END IF;
              l_arrears := 'Y';
            ELSE
              l_arrears := 'N';
            END IF;

            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
               l_recurrence_day := NULL;
               IF(l_arrears = 'Y') THEN
                 IF l_arrears_pay_dates_option = 'FIRST_DAY_OF_NEXT_PERIOD' THEN
                  l_payment_date := TRUNC(FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7));
                 ELSE
                  l_payment_date := TRUNC(FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7))-1;
                 END IF;
               ELSE
                 l_payment_date := TRUNC(FND_DATE.canonical_to_date(l_rl_rec.rule_information2));
               END IF;

               IF (l_payment_date >= NVL(p_prev_payout_date,l_payment_date)) AND
                  (l_payment_date < p_payout_date) THEN
                 l_bill_amount := l_bill_amount + TO_NUMBER(l_rl_rec.rule_information8);
               ELSIF(l_payment_date >= p_payout_date) THEN
                 EXIT;
               END IF;
            ELSE
              IF(l_recurrence_day IS NULL) THEN
                  l_recurrence_day := TO_CHAR(TRUNC(FND_DATE.canonical_to_date(l_rl_rec.rule_information2)), 'DD');
               END IF;

               l_num_of_periods := TO_NUMBER(l_rl_rec.RULE_INFORMATION3);
               l_period_start_date := TRUNC(FND_DATE.canonical_to_date(l_rl_rec.rule_information2));
               FOR k in 1 .. l_num_of_periods
               LOOP
                 IF(l_arrears = 'Y') THEN
                   l_payment_date := Okl_Lla_Util_Pvt.calculate_end_date(
                                        p_start_date => l_period_start_date,
                                        p_months     => TO_NUMBER(l_rl_rec.decoded_object1_id1) * k,
                                        p_start_day  => l_recurrence_day);
                   IF l_arrears_pay_dates_option = 'FIRST_DAY_OF_NEXT_PERIOD' THEN
                      l_payment_date := l_payment_date + 1;
                   END IF;
                 ELSE
                   l_payment_date := ADD_MONTHS(l_period_start_date, TO_NUMBER(l_rl_rec.decoded_object1_id1) * (k-1));
                 END IF;

                 IF(l_payment_date >= NVL(p_prev_payout_date,l_payment_date)) AND
                   (l_payment_date < p_payout_date) THEN
                   l_bill_amount := l_bill_amount + TO_NUMBER(l_rl_rec.RULE_INFORMATION6);
                 ELSIF(l_payment_date >= p_payout_date) THEN
                   EXIT;
                 END IF;
               END LOOP; --Periods Loop
            END IF;
        END LOOP; --SLL Loop
     END IF;
     CLOSE l_rl_csr2;

     x_bill_amount := l_bill_amount;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	WHEN OTHERS THEN
      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

  END get_pth_fee_due_amount;


  -- Start of comments
  -- Procedure Name     : consolidate_pth_acc_streams
  -- Description        : This procedure sorts and consolidates the Passthrough
  --                      Expense Accrual Stream elements
  -- End of comments
  PROCEDURE consolidate_pth_acc_streams(p_chr_id        IN NUMBER,
                                        p_selv_tbl      IN okl_streams_pub.selv_tbl_type,
                                        x_selv_tbl      OUT NOCOPY okl_streams_pub.selv_tbl_type,
                                        x_return_status OUT NOCOPY VARCHAR2) AS

    l_api_name          CONSTANT VARCHAR2(30) := 'consolidate_pth_acc_streams';
    l_tmp_selv_tbl       okl_streams_pub.selv_tbl_type;
    i                    NUMBER;
    j                    NUMBER;
    x_msg_data           VARCHAR2(4000);
    x_msg_count          NUMBER;
    l_init_loop          BOOLEAN := TRUE;
    l_sort_line_number   NUMBER := 0;
    l_next_lowest_date   DATE;
    l_rec_exists         BOOLEAN := FALSE;

  BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     l_tmp_selv_tbl := p_selv_tbl;

     -- Start sorting and consolidation
     IF(l_tmp_selv_tbl.COUNT > 0) THEN
       FOR j IN 1..l_tmp_selv_tbl.COUNT loop
        -- find the lowest date value in the original table
        FOR i in 1..l_tmp_selv_tbl.LAST loop
          IF l_init_loop THEN
            IF l_tmp_selv_tbl.EXISTS(i) THEN
              l_next_lowest_date := l_tmp_selv_tbl(i).stream_element_date;
              l_init_loop := FALSE;
            END IF;
          END IF;
          IF l_tmp_selv_tbl.EXISTS(i) AND l_tmp_selv_tbl(i).stream_element_date < l_next_lowest_date THEN
            l_next_lowest_date := l_tmp_selv_tbl(i).stream_element_date;
          END IF;
        END LOOP;

        -- reset flag, ready for use again
        l_init_loop := TRUE;
        l_rec_exists := FALSE;
        FOR i IN 1..l_tmp_selv_tbl.LAST LOOP
          IF l_tmp_selv_tbl.EXISTS(i) AND l_tmp_selv_tbl(i).stream_element_date = l_next_lowest_date THEN
            IF l_rec_exists THEN
              x_selv_tbl(l_sort_line_number).amount := x_selv_tbl(l_sort_line_number).amount + l_tmp_selv_tbl(i).amount;
            ELSE
              l_sort_line_number := l_sort_line_number+1;
              x_selv_tbl(l_sort_line_number).se_line_number := l_sort_line_number;
              x_selv_tbl(l_sort_line_number).stream_element_date := l_tmp_selv_tbl(i).stream_element_date;
              x_selv_tbl(l_sort_line_number).amount := l_tmp_selv_tbl(i).amount;
              l_rec_exists := TRUE;
            END IF;
            l_tmp_selv_tbl.DELETE(i);
          END IF;
        END LOOP;
        EXIT WHEN l_tmp_selv_tbl.LAST IS NULL;
      END LOOP;
     END IF;
     -- End sorting and consolidation

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	WHEN OTHERS THEN
      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

  END consolidate_pth_acc_streams;


  -- Start of comments
  -- Procedure Name     : get_passthru_exp_accruals
  -- Description        : This procedure generates the Passthrough Expense
  --                      Accrual Stream elements
  -- End of comments
  PROCEDURE get_passthru_exp_accruals(p_chr_id        IN NUMBER,
                                      p_disb_amount   IN NUMBER,
                                      p_start_date    IN DATE,
                                      p_end_date      IN DATE,
                                      x_selv_tbl      OUT NOCOPY okl_streams_pub.selv_tbl_type,
                                      x_return_status OUT NOCOPY VARCHAR2) AS

    l_api_name         CONSTANT VARCHAR2(30) := 'get_passthru_exp_accruals';
    l_end_date         DATE;
    l_total_days       NUMBER;
    l_daily_amt        NUMBER;
    l_start_date       DATE;
    l_month_end        DATE;
    l_disb_amt_bal     NUMBER;
    l_days             NUMBER;
    i                  BINARY_INTEGER := 0;
    x_msg_data         VARCHAR2(4000);
    x_msg_count        NUMBER;
    l_rounded_amount   NUMBER;
    l_currency_code       OKC_K_HEADERS_B.CURRENCY_CODE%TYPE;
    l_day_convention_month  VARCHAR2(30);
    l_day_convention_year   VARCHAR2(30);

    --Cursor to get the contract currency code
    CURSOR get_currency_code
    IS
    SELECT CURRENCY_CODE
      FROM OKC_K_HEADERS_B
     WHERE ID = p_chr_id;

  BEGIN

     x_return_status  := OKL_API.G_RET_STS_SUCCESS;

     --Get the day convention
     OKL_PRICING_UTILS_PVT.get_day_convention(
          p_id              => p_chr_id,
          p_source          => 'ISG',
          x_days_in_month   => l_day_convention_month,
          x_days_in_year    => l_day_convention_year,
          x_return_status   => x_return_status);
     IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
     END IF;

     OPEN  get_currency_code;
     FETCH get_currency_code INTO l_currency_code;
     CLOSE get_currency_code;

     okl_accounting_util.round_amount(p_api_version   => 1.0,
                                      p_init_msg_list => OKL_API.G_FALSE,
                                      x_return_status => x_return_status,
                                      x_msg_count     => x_msg_count,
                                      x_msg_data      => x_msg_data,
                                      p_amount        => p_disb_amount,
                                      p_currency_code => l_currency_code,
                                      p_round_option  => 'STM',
                                      x_rounded_amount => l_disb_amt_bal);
     IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
     END IF;

     l_start_date  :=  p_start_date;
     l_end_date    :=  p_end_date;
     l_month_end   :=  LAST_DAY(l_start_date);

     l_total_days  := OKL_PRICING_UTILS_PVT.get_day_count(
                            p_start_date    => l_start_date,
                            p_days_in_month => l_day_convention_month,
                            p_days_in_year  => l_day_convention_year,
                            p_end_date      => l_end_date,
                            p_arrears       => 'Y',
                            x_return_status => x_return_status);
     IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
     END IF;

     l_daily_amt   :=  p_disb_amount / l_total_days;

     LOOP
       i := i + 1;
       IF TO_CHAR(l_month_end, 'MON') IN ('JAN', 'MAR', 'MAY', 'JUL', 'AUG', 'OCT', 'DEC') THEN
         x_selv_tbl(i).stream_element_date := l_month_end - 1;
       ELSE
         x_selv_tbl(i).stream_element_date := l_month_end;
       END IF;

       x_selv_tbl(i).se_line_number :=  i;

       IF l_month_end >= l_end_date THEN
           okl_accounting_util.round_amount(p_api_version   => 1.0,
                                            p_init_msg_list => OKL_API.G_FALSE,
                                            x_return_status => x_return_status,
                                            x_msg_count     => x_msg_count,
                                            x_msg_data      => x_msg_data,
                                            p_amount        => l_disb_amt_bal,
                                            p_currency_code => l_currency_code,
                                            p_round_option  => 'STM',
                                            x_rounded_amount => l_rounded_amount);
           IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
             RAISE OKL_API.G_EXCEPTION_ERROR;
           END IF;

           x_selv_tbl(i).amount := l_rounded_amount;
         EXIT;
       ELSE
         l_days := OKL_PRICING_UTILS_PVT.get_day_count(
                        p_start_date    => l_start_date,
                        p_days_in_month => l_day_convention_month,
                        p_days_in_year  => l_day_convention_year,
                        p_end_date      => l_month_end,
                        p_arrears       => 'Y',
                        x_return_status => x_return_status);
         IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;

         okl_accounting_util.round_amount(p_api_version   => 1.0,
                                          p_init_msg_list => OKL_API.G_FALSE,
                                          x_return_status => x_return_status,
                                          x_msg_count     => x_msg_count,
                                          x_msg_data      => x_msg_data,
                                          p_amount        => l_days * l_daily_amt,
                                          p_currency_code => l_currency_code,
                                          p_round_option  => 'STM',
                                          x_rounded_amount => l_rounded_amount);
         IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;

         x_selv_tbl(i).amount := l_rounded_amount;
       END IF;

       l_disb_amt_bal  := l_disb_amt_bal - x_selv_tbl(i).amount;
       l_start_date    := LAST_DAY(l_start_date) + 1;
       l_month_end     := ADD_MONTHS(l_month_end, 1);

     END LOOP;

  EXCEPTION
    when OKL_API.G_EXCEPTION_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OTHERS then
      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

  END get_passthru_exp_accruals;
  --end rgooty for bug 8399461



---------------------------------------------------------------------------------------------
-- Procedure adjust_passthrough_streams to handle passthrough streams.
---------------------------------------------------------------------------------------------
-- 10-Aug-09 sechawla   8677460 PRB ESG Enhancements : Support PRB for Pass Through accrual streams
  PROCEDURE adjust_passthrough_streams(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status   OUT NOCOPY VARCHAR2,
            x_msg_count       OUT NOCOPY NUMBER,
            x_msg_data        OUT NOCOPY VARCHAR2,
            p_chr_id          IN  VARCHAR2,
            p_purpose          IN  VARCHAR2) AS
    l_api_name    CONSTANT     VARCHAR2(30) := 'ADJUST_PASSTHROUGH_STREAMS';
    i                          BINARY_INTEGER := 0;
--srsreeni Bug 5917582 start
    j                          BINARY_INTEGER := 0;
--srsreeni Bug 5917582 end
    l_passthru_percent         NUMBER := 0;
    --l_sty_id                   NUMBER;
	l_sty_id                    strm_rec_type;
    l_sty_name                 VARCHAR2(150);
    lx_return_status           VARCHAR2(1);
    lx_isAllowed               BOOLEAN;
    lx_passStatus              VARCHAR2(30);
    lx_failStatus              VARCHAR2(30);
    c_kle_id                   NUMBER;
    c_sty_id                   NUMBER;
    v_adj_amt                  NUMBER;
    l_stmv_tbl                 okl_streams_pub.stmv_tbl_type;
    x_stmv_tbl                 okl_streams_pub.stmv_tbl_type;
    l_selv_tbl                 okl_streams_pvt.selv_tbl_type;
    l_pt_tbl                   okl_streams_pub.selv_tbl_type;
--srsreeni Bug 5917582 start
    l_pt_tbl_tmp               okl_streams_pub.selv_tbl_type;
--srsreeni Bug 5917582 end
    lx_selv_tbl                okl_streams_pvt.selv_tbl_type;
    l_stmv_rec                 okl_streams_pub.stmv_rec_type;
    lx_stmv_rec                okl_streams_pub.stmv_rec_type;
--srsreeni bug 5869271 start add
    l_old_cle_id               okc_k_lines_b.ID%TYPE;
    l_old_sty_id               okl_strm_type_b.ID%TYPE;
    l_old_str_stmv_rec         okl_streams_pub.stmv_rec_type;
    l_old_acr_stmv_rec         okl_streams_pub.stmv_rec_type;
    l_last_se_line_number      OKL_STRM_ELEMENTS_V.SE_LINE_NUMBER%TYPE;
    l_last_acr_se_line_number  OKL_STRM_ELEMENTS_V.SE_LINE_NUMBER%TYPE;
--srsreeni bug 5869271 end add
    l_purpose_code             VARCHAR2(30) := p_purpose;
    -- To get the header information
    CURSOR c_hdr
    IS
    SELECT chr.template_yn,
           chr.currency_code,
           chr.start_date,
           chr.end_date, --sechawla 10-aug-09 : added
           khr.deal_type,
           khr.term_duration,
           NVL(khr.generate_accrual_yn, 'Y')
    FROM okc_k_headers_b chr,
         okl_k_headers khr
    WHERE khr.id = p_chr_id
    AND chr.id = khr.id;

    --Added order by rul2.rule_information2 by djanaswa for bug 6007644
    -- To get the payment information
    CURSOR c_inflows
    IS
    SELECT rgp.cle_id cle_id,
           TO_NUMBER(rul1.object1_id1) sty_id,
           FND_DATE.canonical_to_date(rul2.rule_information2) start_date,
           TO_NUMBER(rul2.rule_information3) periods,
 	-- srsreeni Bug 5917582 start
 	   TO_NUMBER(rul2.rule_information7) stub_days,
 	   TO_NUMBER(rul2.rule_information8) stub_amount,
 	-- srsreeni Bug 5917582 end
           rul2.object1_id1 frequency,
           rul2.rule_information5 structure,
           DECODE(rul2.rule_information10, 'Y', 'ARREARS', 'ADVANCE') advance_arrears,
           FND_NUMBER.canonical_to_number(rul2.rule_information6) amount,
           lse.lty_code lty_code,
           kle.capital_amount capital_amount,
           kle.residual_value residual_value
    FROM okc_rule_groups_b rgp,
         okc_rules_b rul1,
         okc_rules_b rul2,
         okc_k_lines_b cle,
         okl_k_lines kle,
         okc_line_styles_b lse
    WHERE rul2.dnz_chr_id = p_chr_id
    AND  rul2.rule_information_category = 'LASLL'
    AND  rgp.RGD_CODE = 'LALEVL'
    AND  rul2.rgp_id = rgp.id
    AND  TO_NUMBER(rul2.object2_id1) = rul1.id
    AND  rgp.cle_id = cle.id
    AND  cle.sts_code IN ('PASSED','TERMINATED', 'COMPLETE')
    AND  lse.lty_code = 'FEE'
    AND  kle.fee_type = 'PASSTHROUGH'
    AND  cle.id = kle.id
    AND  cle.lse_id = lse.id
--srsreeni bug 5869271 start add
    ORDER BY cle_id,sty_id, FND_DATE.canonical_to_date(rul2.rule_information2);
--srsreeni bug 5869271 end add
    -- To get the streams information
    CURSOR l_stmp_yn_csr(khrid NUMBER, p VARCHAR2) IS
    SELECT 'Y' What
    FROM dual
    WHERE EXISTS(SELECT stm.id  stmid
                 FROM   okl_streams stm
                 WHERE stm.khr_id = khrid
                 --AND stm.say_code = 'CURR'
				 AND stm.say_code = 'WORK'
                 AND stm.sgn_code = 'STMP'
                 AND NVL(stm.purpose_code, 'ORIGIN') = p
                 AND stm.active_yn    = 'N');
    -- To get the stream information
    CURSOR l_stm_csr(khrid NUMBER, kleid NUMBER, styid NUMBER, p VARCHAR2) IS
    SELECT stm.id  stmid
    FROM   okl_streams	stm
    WHERE stm.khr_id = khrid
    AND stm.kle_id = kleid
    AND stm.sty_id = styid
    AND stm.say_code = 'CURR'
    AND nvl(stm.purpose_code, 'ORIGIN') = p
    AND stm.active_yn    = 'Y';

	-- Added for user defined streams HKPATEL
	Cursor dependent_sty_csr (payment_type_id NUMBER, p_purpose VARCHAR2)
	IS
	Select dependent_sty_id,dependent_sty_name
	FROM OKL_STRM_TMPT_LINES_UV where primary_sty_id = payment_type_id
	and pdt_id = (select pdt_id from okl_k_headers where id = p_chr_id)
	and dependent_sty_purpose = p_purpose
	and dependent_sty_id is not null;

	l_dependent_strm_rec      dependent_sty_csr%ROWTYPE;
	-- Added code ends here
 l_rl_rec1                      l_rl_csr1%ROWTYPE;
 l_stm_rec                      l_stm_csr%ROWTYPE;
 l_stmp_yn_rec                  l_stmp_yn_csr%ROWTYPE;
 l_hdr                          c_hdr%ROWTYPE;
 l_hdr_rec                      l_hdr_csr%ROWTYPE;
 l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
 l_pdt_id NUMBER;
 l_primary_sty_id NUMBER;

  -- gboomina Bug 4746368 - Added - Start
  l_pt_pro_fee_tbl         okl_streams_pub.selv_tbl_type;
  l_fee_strm_type_rec  fee_strm_type_csr%ROWTYPE;
  -- gboomina Bug 4746368 - Added - End
--srsreeni Bug 5917582 start
 l_pt_pro_fee_tbl_tmp     okl_streams_pub.selv_tbl_type;
--srsreeni Bug 5917582 end

    --Added by djanaswa for bug 6007644
    l_recurrence_date    DATE := NULL;
    l_old_cleId         NUMBER;
    l_old_styId         NUMBER;
    --end djanaswa

    --sechawla 10-aug-09 : PRB ESG enhancements : begin
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from   okl_sys_acct_opts;

    -- Prospective Rebooking Enhancement
    CURSOR sg_during_rbk_csr( p_khr_id    IN NUMBER)
    IS
    SELECT rbk_chr.contract_number       rbk_contract_number,
           rbk_chr.orig_system_id1       original_chr_id,
           trx.rbr_code                  rbk_reason_code,
           trx.date_transaction_occurred revision_date,
           'ONLINE_REBOOK'               rebook_type
           ,rbk_chr.start_date           rbk_chr_start_date
           ,orig_chr.start_date          orig_chr_start_date
      FROM okc_k_headers_all_b   rbk_chr,
           okc_k_headers_all_b   orig_chr,
           okl_trx_contracts_all trx
     WHERE rbk_chr.id = p_khr_id
       AND rbk_chr.orig_system_source_code = 'OKL_REBOOK'
       AND trx.khr_id_new = rbk_chr.id
       AND trx.tsu_code = 'ENTERED'
       AND trx.tcn_type = 'TRBK'
       AND rbk_chr.orig_system_id1 = orig_chr.id
    UNION
    SELECT orig_chr.contract_number       rbk_contract_number,
           orig_chr.id                    original_chr_id,
           trx.rbr_code                   rbk_reason_code,
           trx.date_transaction_occurred  revision_date,
           'MASS_REBOOK'                  rebook_type
           ,orig_chr.start_date           rbk_chr_start_date
           ,orig_chr.start_date           orig_chr_start_date
      FROM okc_k_headers_all_b orig_chr,
           okl_trx_contracts_all trx
     WHERE  orig_chr.id    =  p_khr_id
      AND  trx.khr_id     =  orig_chr.id
      AND  trx.tsu_code   = 'ENTERED'
      AND  trx.tcn_type   = 'TRBK'
      AND  EXISTS
           (
            SELECT '1'
              FROM okl_rbk_selected_contract rbk_chr
             WHERE rbk_chr.khr_id = orig_chr.id
               AND rbk_chr.status <> 'PROCESSED'
            );

    l_PROSPECTIVE_REBOOK_YN   VARCHAR2(1);
    l_is_during_rebook_yn     VARCHAR2(3);
    l_rebook_date             DATE;
    l_prb_orig_khr_id         NUMBER;
    l_rebook_type             VARCHAR2(100);
    l_orig_khr_start_date     DATE;
    l_rbk_khr_start_date      DATE;
    --sechawla 10-aug-09 : PRB ESG enhancements : end

    --Added by rgooty for bug 8399461
    --Cursor to get the Passthrough Disbursement information
    CURSOR c_pass(khrId NUMBER, cleId NUMBER) IS
    SELECT vDtls.DISBURSEMENT_BASIS,
           vDtls.DISBURSEMENT_FIXED_AMOUNT,
           vDtls.DISBURSEMENT_PERCENT,
           vDtls.PAYMENT_START_DATE,
           vDtls.PAYMENT_FREQUENCY,
           chr.END_DATE CONTRACT_END_DATE
      FROM okl_party_payment_hdr vHdr,
           okl_party_payment_dtls vDtls,
           okc_k_headers_b chr
     WHERE vDtls.payment_hdr_id = vHdr.id
       AND vHdr.CLE_ID = cleId
       AND vHdr.DNZ_CHR_ID = khrId
       AND vHdr.PASSTHRU_TERM = 'BASE'
       AND vHdr.DNZ_CHR_ID = chr.id;

    --Cursor to get the fee payment frequency
    CURSOR c_feepayment_freq(khrId NUMBER, cleId NUMBER) IS
    SELECT rul.object1_id1 frequency
      FROM okc_rule_groups_b rgp,
           okc_rules_b rul
     WHERE rgp.dnz_chr_id = khrId
       AND rgp.cle_id = cleId
       AND rgp.RGD_CODE = 'LALEVL'
       AND rgp.id = rul.rgp_id
       AND rul.RULE_INFORMATION_CATEGORY = 'LASLL'
       AND ROWNUM < 2;

    l_disb_amount         NUMBER;
    l_frequency           VARCHAR2(1);
    l_pay_start_date      DATE;
    l_pay_end_date        DATE;
    l_months_factor       NUMBER;
    l_pth_selv_tbl        okl_streams_pub.selv_tbl_type;
    l_pth_exp_selv_tbl    okl_streams_pub.selv_tbl_type;
    l_bill_amount         NUMBER;
    l_prev_pay_start_date DATE;
    --end rgooty

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    OPEN  l_stmp_yn_csr( TO_NUMBER(p_chr_id), p_purpose);
    FETCH l_stmp_yn_csr INTO l_stmp_yn_rec;
    CLOSE l_stmp_yn_csr;
    IF ( NVL(l_stmp_yn_rec.What, 'N') = 'N' ) THEN
      RETURN;
    END IF;
    OPEN  c_hdr;
    FETCH c_hdr INTO l_hdr;
    CLOSE c_hdr;
    l_stmv_tbl.delete;
    FOR l_inflow IN c_inflows LOOP
      OPEN  l_rl_csr1 ( 'LAPSTH', 'LAPTPR', TO_NUMBER(p_chr_id), l_inflow.cle_id );
      FETCH l_rl_csr1 INTO l_rl_rec1;
      CLOSE l_rl_csr1;
      l_passthru_percent := nvl( l_rl_rec1.rule_information1, 0.0 );
	  /*Commented for bug 4203804
      i := 0;
      FOR l_stm_rec in l_stm_csr(p_chr_id, l_inflow.cle_id, l_inflow.sty_id, p_purpose) LOOP
        i := i + 1;
        l_stmv_tbl(i).id	:= l_stm_rec.stmid;
      END LOOP;
      IF ( i > 0 ) THEN
        okl_streams_pub.delete_streams(p_api_version     =>   p_api_version,
                                       x_return_status   =>   x_return_status,
                                       p_init_msg_list   =>   p_init_msg_list,
                                       x_msg_count       =>   x_msg_count,
                                       x_msg_data        =>   x_msg_data,
                                       p_stmv_tbl        =>   l_stmv_tbl);
        IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
          EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
        ELSIF x_return_status = okl_api.g_ret_sts_error THEN
          EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
        END IF;
      END IF;
	  */

    --Added by djanaswa for bug 6007644
      IF((l_inflow.periods IS NULL) AND (l_inflow.stub_days IS NOT NULL)) THEN
        --Set the recurrence date to null for stub payment
        l_recurrence_date := NULL;
      ELSIF(l_recurrence_date IS NULL
          OR l_old_cleId <> l_inflow.cle_id
          OR l_old_styId <> l_inflow.sty_id) THEN
        --Set the recurrence date as periodic payment level start date
        l_recurrence_date := l_inflow.start_date;
      END IF;
      l_old_cleId := l_inflow.cle_id;
      l_old_styId := l_inflow.sty_id;
      --end djanaswa


     -- gboomina Bug 4746368 - Start
      -- calling get_stream_elements with l_pt_pro_fee_tbl parameter
 -- Added parameter p_recurrence_date by djanaswa for bug 6007644
      okl_stream_generator_pvt.get_stream_elements(
                               p_start_date         =>   l_inflow.start_date,
                               p_periods             =>   l_inflow.periods,
                               p_frequency           =>   l_inflow.frequency,
                               p_structure           =>   l_inflow.structure,
                               p_advance_or_arrears  =>   l_inflow.advance_arrears,
                               p_amount              =>   l_inflow.amount,
--srsreeni Bug 5917582 start
                               --p_stub_days           =>   NULL,
                               --p_stub_amount         =>   NULL,
                               p_stub_days           =>   l_inflow.stub_days,
                               p_stub_amount         =>   l_inflow.stub_amount,
--srsreeni Bug 5917582 end
                               p_currency_code       =>   l_hdr.currency_code,
                               p_khr_id              =>   p_chr_id,
                               p_kle_id              =>   l_inflow.cle_id,
                               p_purpose_code        =>   l_purpose_code,
                               x_selv_tbl            =>   l_selv_tbl,
                               x_pt_tbl              =>   l_pt_tbl,
                               x_pt_pro_fee_tbl      =>   l_pt_pro_fee_tbl,
                               x_return_status       =>   x_return_status,
                               x_msg_count           =>   x_msg_count,
                               x_msg_data            =>   x_msg_data,
                               p_recurrence_date     =>   l_recurrence_date);
      -- gboomina Bug 4746368 - End
      IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
        EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
      ELSIF x_return_status = okl_api.g_ret_sts_error THEN
        EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
      END IF;



	  -- Code commented and added for user defined streams - HKPATEL
      -- Payment level streams LASLL stream type
	  -- Put the code for bug 4203804
--srsreeni bug 5869271 start add
      IF (l_old_cle_id IS NULL OR (l_old_cle_id <> l_inflow.cle_id OR l_old_sty_id <> l_inflow.sty_id)) THEN
--srsreeni bug 5869271 end add
        okl_stream_generator_pvt.get_stream_header(
                               p_khr_id      =>   p_chr_id,
                               p_kle_id         =>   l_inflow.cle_id,
                               p_sty_id         =>   l_inflow.sty_id,
                               p_purpose_code   =>   l_purpose_code,
                               x_stmv_rec       =>   l_stmv_rec,
                               x_return_status  =>   x_return_status);
        IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
          EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
        ELSIF x_return_status = okl_api.g_ret_sts_error THEN
          EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
        END IF;
        --l_stmv_rec.say_code := 'CURR';
	      	l_stmv_rec.say_code := 'WORK';
          l_stmv_rec.active_yn := 'Y';
          l_stmv_rec.date_working := SYSDATE;
        --Added by kthiruva on 09-Feb-2006
        --Bug 5029161 - Start of Changes
        IF l_selv_tbl.COUNT > 0 THEN
           okl_streams_pub.create_streams(p_api_version     =>   p_api_version,
                                     p_init_msg_list   =>   p_init_msg_list,
                                     x_return_status   =>   x_return_status,
                                     x_msg_count       =>   x_msg_count,
                                     x_msg_data        =>   x_msg_data,
                                     p_stmv_rec        =>   l_stmv_rec,
                                     p_selv_tbl        =>   l_selv_tbl,
                                     x_stmv_rec        =>   lx_stmv_rec,
                                     x_selv_tbl        =>   lx_selv_tbl);
          IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
            EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
          ELSIF x_return_status = okl_api.g_ret_sts_error THEN
            EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
          END IF;
        END IF;
        --Bug 5029161 - End of Changes
        --srsreeni bug 5869271 start
         l_old_str_stmv_rec := lx_stmv_rec;
         l_last_se_line_number := l_selv_tbl(l_selv_tbl.LAST).se_line_number;
      ELSE
         -- populate the foreign key for the stream elements
         IF (l_selv_tbl.COUNT > 0) THEN
           i:= l_selv_tbl.FIRST;
           LOOP
             l_selv_tbl(i).stm_id := l_old_str_stmv_rec.id;
             l_last_se_line_number := l_last_se_line_number + 1;
             l_selv_tbl(i).se_line_number := l_last_se_line_number;
             EXIT WHEN(i = l_selv_tbl.LAST);
             i := l_selv_tbl.NEXT(i);
           END LOOP;
           -- populate the detail
           okl_streams_pub.create_stream_elements(
                               p_api_version   => p_api_version
                              ,p_init_msg_list => p_init_msg_list
                              ,x_return_status => x_return_status
                              ,x_msg_count     => x_msg_count
                              ,x_msg_data      => x_msg_data
                              ,p_selv_tbl      => l_selv_tbl
                              ,x_selv_tbl      => lx_selv_tbl);
           IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
             EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
           ELSIF x_return_status = okl_api.g_ret_sts_error THEN
             EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
           END IF;
         END IF;
       END IF;
       --srsreeni bug 5869271 end

      okl_stream_generator_pvt.get_accrual_elements(
                               p_start_date     =>    l_inflow.start_date,
                               p_periods             =>   l_inflow.periods,
                               p_frequency           =>   l_inflow.frequency,
                               p_structure           =>   l_inflow.structure,
                               p_advance_or_arrears  =>   l_inflow.advance_arrears,
                               p_amount              =>   l_inflow.amount,
--srsreeni Bug 5917582 start
                               --p_stub_days           =>   NULL,
                               --p_stub_amount         =>   NULL,
                               p_stub_days           =>   l_inflow.stub_days,
                               p_stub_amount         =>   l_inflow.stub_amount,
--srsreeni Bug 5917582 end
                               p_currency_code       =>   l_hdr.currency_code,
                               x_selv_tbl            =>   l_selv_tbl,
                               x_return_status       =>   x_return_status);
      IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
        EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
      ELSIF x_return_status = okl_api.g_ret_sts_error THEN
        EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
      END IF;

--srsreeni bug 5869271 start add
      IF (l_old_cle_id IS NULL OR (l_old_cle_id <> l_inflow.cle_id OR l_old_sty_id <> l_inflow.sty_id)) THEN
--srsreeni bug 5869271 end add
	  -- Code commented and added for user defined streams - HKPATEL
	  IF(g_rep_req_yn = 'Y') THEN

	    OPEN l_hdr_pdt_csr(p_chr_id);
		FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
		CLOSE l_hdr_pdt_csr;

	    get_dep_no_prc_stream_type
		(
 		  p_khr_id => p_chr_id,
 		  p_pdt_id => l_pdt_id_rec.report_pdt_id,
 		  p_primary_sty_id => l_inflow.sty_id,
 		  p_dependent_sty_purpose => 'PASS_THRU_REV_ACCRUAL',
 		  x_return_status => x_return_status,
 		  x_dependent_sty_id => l_sty_id
		);
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	  ELSE
	    get_dep_no_prc_stream_type
		(
 		  p_khr_id => p_chr_id,
 		  p_primary_sty_id => l_inflow.sty_id,
 		  p_dependent_sty_purpose => 'PASS_THRU_REV_ACCRUAL',
 		  x_return_status => x_return_status,
 		  x_dependent_sty_id => l_sty_id
		);
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	  END IF;

	  /*
      okl_stream_generator_pvt.get_sty_details (
                               p_sty_name     => 'PASS THROUGH REVENUE ACCRUAL',
                               x_sty_id        => l_sty_id,
                               x_sty_name      => l_sty_name,
                               x_return_status => x_return_status);
      IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
        EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
      ELSIF x_return_status = okl_api.g_ret_sts_error THEN
        EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
      END IF;
	  */
	  -- Code commented and added for user defined streams ends here- HKPATEL
	  IF(l_sty_id.id IS NOT NULL) THEN
        okl_stream_generator_pvt.get_stream_header(
                               p_khr_id        =>   p_chr_id,
                               p_kle_id         =>   l_inflow.cle_id,
                               p_sty_id         =>   l_sty_id.id,
                               p_purpose_code   =>   l_purpose_code,
                               x_stmv_rec       =>   l_stmv_rec,
                               x_return_status  =>   x_return_status);
        IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
          EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
        ELSIF x_return_status = okl_api.g_ret_sts_error THEN
          EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
        END IF;
        --l_stmv_rec.say_code := 'CURR';
		    l_stmv_rec.say_code := 'WORK';
        l_stmv_rec.active_yn := 'Y';
        l_stmv_rec.date_working := SYSDATE;
        --Added by kthiruva on 09-Feb-2006
        --Bug 5029161 - Start of Changes
        IF l_selv_tbl.COUNT > 0 THEN
          okl_streams_pub.create_streams(p_api_version     =>   p_api_version,
                                     p_init_msg_list   =>   p_init_msg_list,
                                     x_return_status   =>   x_return_status,
                                     x_msg_count       =>   x_msg_count,
                                     x_msg_data        =>   x_msg_data,
                                     p_stmv_rec        =>   l_stmv_rec,
                                     p_selv_tbl        =>   l_selv_tbl,
                                     x_stmv_rec        =>   lx_stmv_rec,
                                     x_selv_tbl        =>   lx_selv_tbl);
          IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
            EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
          ELSIF x_return_status = okl_api.g_ret_sts_error THEN
            EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
          END IF;
        END IF;
         --Bug 5029161 - Start of Changes
 	           --srsreeni bug 5869271 start add
         l_old_acr_stmv_rec := lx_stmv_rec;
         l_last_acr_se_line_number := l_selv_tbl(l_selv_tbl.LAST).se_line_number;
        END IF;
      ELSE
         -- populate the foreign key for the stream elements
         IF (l_selv_tbl.COUNT > 0) THEN
           i:= l_selv_tbl.FIRST;
           LOOP
             l_selv_tbl(i).stm_id := l_old_acr_stmv_rec.id;
             l_last_acr_se_line_number := l_last_acr_se_line_number + 1;
             l_selv_tbl(i).se_line_number := l_last_acr_se_line_number;
             EXIT WHEN(i = l_selv_tbl.LAST);
             i := l_selv_tbl.NEXT(i);
           END LOOP;
           -- populate the detail
           okl_streams_pub.create_stream_elements(
                               p_api_version   => p_api_version
                              ,p_init_msg_list => p_init_msg_list
                              ,x_return_status => x_return_status
                              ,x_msg_count     => x_msg_count
                              ,x_msg_data      => x_msg_data
                              ,p_selv_tbl      => l_selv_tbl
                              ,x_selv_tbl      => lx_selv_tbl);
           IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
             EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
           ELSIF x_return_status = okl_api.g_ret_sts_error THEN
             EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
           END IF;
         END IF;
     END IF;
      l_old_cle_id := l_inflow.cle_id;
      l_old_sty_id := l_inflow.sty_id;
     --srsreeni bug 5869271 ends
      -- Clear out reusable data structures
      l_sty_name  :=  NULL;
      l_sty_id    :=  NULL;
      l_stmv_rec := NULL;
      l_selv_tbl.delete;
      lx_stmv_rec := NULL;
      lx_selv_tbl.delete;
    END LOOP;


	  -- gboomina - Bug 4746368 - Start
   -- moved PASS_THRU_EXP_ACCRUAL stream generation outside the Loop such that PASS_THRU_EXP_ACCRUAL will be dependent on PASS THROUGH FEE purpose.
   -------------------------------------------------------------------------------
   ----        Code for Generating PASS_THRU_EXP_ACCRUAL Streams              ----
   -------------------------------------------------------------------------------

   --Created separate API for generating pass through expense accrual streams
   --As part of bug 8624532 by NIKSHAH
   --API NAME: GENERATE_PASSTHRU_EXP_STREAMS
   --This api will be called from ESG (i.e. the next call) and from ISG
   -- (i.e. from OKL_STREAM_GENERATOR_PVT)
   GENERATE_PASSTHRU_EXP_STREAMS
   (
     p_api_version      => p_api_version
    ,p_init_msg_list    => p_init_msg_list
    ,P_CHR_ID           => p_chr_id
    ,P_PURPOSE_CODE     => l_purpose_code
    ,x_return_status    => x_return_status
    ,x_msg_count        => x_msg_count
    ,x_msg_data         => x_msg_data
   );

   -- gboomina Bug 4746368 - End
   IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
     RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
   ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
     RAISE OKL_API.G_EXCEPTION_ERROR;
   END IF;

    --------------------- sechawla 10-Aug-09 - begin ------------------------
    -- Just Before completing the Stream Generation Process, adjust the
    -- Accrual Streams based on the Straight Line Logic for Prospective Rebooking
    -- IF Prospective Rebooking Options is switched On
    -- And Stream Generation is during Rebook process,
    -- And the Rebook Date <> Contract Start Date

    open   get_rebook_type ;
    fetch  get_rebook_type into l_PROSPECTIVE_REBOOK_YN ;
    close  get_rebook_type;


    IF l_PROSPECTIVE_REBOOK_YN = 'Y' THEN
       -- Inquire whether the Contract being processed is during Rebook or not
       l_is_during_rebook_yn := 'N';
       FOR t_rec IN sg_during_rbk_csr( p_khr_id => p_chr_id )
       LOOP
         l_is_during_rebook_yn := 'Y';
         l_rebook_date         := t_rec.revision_date;
         l_prb_orig_khr_id     := t_rec.original_chr_id;
         l_rebook_type         := t_rec.rebook_type;
         l_orig_khr_start_date := TRUNC(t_rec.orig_chr_start_date);
         l_rbk_khr_start_date  := TRUNC(t_rec.rbk_chr_start_date);
       END LOOP;

     END IF;

     write_to_log(l_api_name|| '--------------------------------------------------------' );
     write_to_log(l_api_name|| '--------------- Prospective Rebooking Changes ----------' );
     write_to_log(l_api_name|| '--------------------------------------------------------' );
     write_to_log(l_api_name|| 'l_prosp_rebook_flag   : ' || l_PROSPECTIVE_REBOOK_YN );
     write_to_log(l_api_name|| 'l_is_during_rebook_yn : ' || l_is_during_rebook_yn);
     write_to_log(l_api_name|| 'l_rebook_date         : ' || l_rebook_date );
     write_to_log(l_api_name|| 'l_hdr.start_date      : ' || l_hdr.start_date );
     write_to_log(l_api_name|| 'l_prb_orig_khr_id     : ' || l_prb_orig_khr_id );
     write_to_log(l_api_name|| 'l_orig_khr_start_date : ' || l_orig_khr_start_date );
     write_to_log(l_api_name|| 'l_rbk_khr_start_date  : ' || l_rbk_khr_start_date );

     IF l_rebook_type = 'ONLINE_REBOOK' AND
        l_orig_khr_start_date <> l_rbk_khr_start_date
     THEN
       -- Case: During Online Revision, Contract Start Date has been Changed
       --       Hence, consider this as a Retrospective Case only
       l_prospective_rebook_yn := 'N';
     END IF;


    IF l_PROSPECTIVE_REBOOK_YN = 'Y'
       AND l_is_during_rebook_yn = 'Y'
       AND l_rebook_date <> TRUNC(l_hdr.start_date)
    THEN
      IF l_purpose_code = 'ORIGIN'
      THEN
        l_purpose_code := '-99';
      ELSE
        l_purpose_code := 'REPORT';
      END IF;
      okl_stream_generator_pvt.prosp_adj_acc_strms(
              p_api_version         => p_api_version
             ,p_init_msg_list       => p_init_msg_list
             ,p_rebook_type         => l_rebook_type
             ,p_rebook_date         => l_rebook_date
             ,p_khr_id              => p_chr_id
             ,p_deal_type           => l_hdr.deal_type
             ,p_currency_code       => l_hdr.currency_code
             ,p_start_date          => l_hdr.start_date
             ,p_end_date            => l_hdr.end_date
		     ,p_context             => 'PASSTHRU_ONLY'
             ,p_purpose_code        => l_purpose_code
             ,x_return_status       => x_return_status
             ,x_msg_count           => x_msg_count
             ,x_msg_data            => x_msg_data);

      IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;


    OKL_API.SET_MESSAGE (p_app_name     => G_APP_NAME,
                         p_msg_name     => 'OKL_STREAM_GENERATION_SUCCESS');

    --------------------- sechawla 10-Aug-09 - end ------------------------

   OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF c_hdr%ISOPEN THEN
        CLOSE c_hdr;
      END IF;
      IF c_inflows%ISOPEN THEN
        CLOSE c_hdr;
      END IF;
      IF l_stmp_yn_csr%ISOPEN THEN
        CLOSE l_stmp_yn_csr;
      END IF;
      IF l_stm_csr%ISOPEN THEN
        CLOSE l_stm_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF c_hdr%ISOPEN THEN
        CLOSE c_hdr;
      END IF;
      IF c_inflows%ISOPEN THEN
        CLOSE c_hdr;
      END IF;
      IF l_stmp_yn_csr%ISOPEN THEN
        CLOSE l_stmp_yn_csr;
      END IF;
      IF l_stm_csr%ISOPEN THEN
        CLOSE l_stm_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS THEN
      IF c_hdr%ISOPEN THEN
        CLOSE c_hdr;
      END IF;
      IF c_inflows%ISOPEN THEN
        CLOSE c_hdr;
      END IF;
      IF l_stmp_yn_csr%ISOPEN THEN
        CLOSE l_stmp_yn_csr;
      END IF;
      IF l_stm_csr%ISOPEN THEN
        CLOSE l_stm_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END adjust_passthrough_streams;

---------------------------------------------------------------------------------------------
-- Procedure to create passthrough expense accrual streams which
-- will be called from both ISG and ESG
-- Created by NIKSHAH, 13-Aug-2009 as part of bug 8624532
---------------------------------------------------------------------------------------------
PROCEDURE GENERATE_PASSTHRU_EXP_STREAMS
(
  p_api_version     IN  NUMBER,
  p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
  P_CHR_ID IN NUMBER,
  P_PURPOSE_CODE IN VARCHAR2,
  x_return_status   OUT NOCOPY VARCHAR2,
  x_msg_count       OUT NOCOPY NUMBER,
  x_msg_data        OUT NOCOPY VARCHAR2
)
AS
    l_api_name    CONSTANT     VARCHAR2(30) := 'GENERATE_PASSTHRU_EXP_STREAMS';
    i                          BINARY_INTEGER := 0;
    j                          BINARY_INTEGER := 0;
    l_purpose_code             VARCHAR2(30) := p_purpose_code;
    l_pdt_id NUMBER;
    l_primary_sty_id NUMBER;
    l_disb_amount         NUMBER;
    l_frequency           VARCHAR2(1);
    l_pay_start_date      DATE;
    l_pay_end_date        DATE;
    l_months_factor       NUMBER;
    l_bill_amount         NUMBER;
    l_prev_pay_start_date DATE;

    --Added by rgooty for bug 8399461
    --Cursor to get the Passthrough Disbursement information
    CURSOR c_pass(khrId NUMBER, cleId NUMBER) IS
    SELECT vDtls.DISBURSEMENT_BASIS,
           vDtls.DISBURSEMENT_FIXED_AMOUNT,
           vDtls.DISBURSEMENT_PERCENT,
           vDtls.PAYMENT_START_DATE,
           vDtls.PAYMENT_FREQUENCY,
           chr.END_DATE CONTRACT_END_DATE
      FROM okl_party_payment_hdr vHdr,
           okl_party_payment_dtls vDtls,
           okc_k_headers_b chr
     WHERE vDtls.payment_hdr_id = vHdr.id
       AND vHdr.CLE_ID = cleId
       AND vHdr.DNZ_CHR_ID = khrId
       AND vHdr.PASSTHRU_TERM = 'BASE'
       AND vHdr.DNZ_CHR_ID = chr.id;
    --Cursor to get the fee payment frequency
    CURSOR c_feepayment_freq(khrId NUMBER, cleId NUMBER) IS
    SELECT rul.object1_id1 frequency
      FROM okc_rule_groups_b rgp,
           okc_rules_b rul
     WHERE rgp.dnz_chr_id = khrId
       AND rgp.cle_id = cleId
       AND rgp.RGD_CODE = 'LALEVL'
       AND rgp.id = rul.rgp_id
       AND rul.RULE_INFORMATION_CATEGORY = 'LASLL'
       AND ROWNUM < 2;

    l_pt_tbl_tmp               okl_streams_pub.selv_tbl_type;
    l_pth_selv_tbl        okl_streams_pub.selv_tbl_type;
    l_pth_exp_selv_tbl    okl_streams_pub.selv_tbl_type;
    l_fee_strm_type_rec  fee_strm_type_csr%ROWTYPE;
    l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
    l_sty_id                    strm_rec_type;
    l_stmv_rec                 okl_streams_pub.stmv_rec_type;
    lx_stmv_rec                okl_streams_pub.stmv_rec_type;
    lx_selv_tbl                okl_streams_pvt.selv_tbl_type;

BEGIN

   FOR l_lne_rec in l_line_rec_csr ( p_chr_id, 'FEE' )
   LOOP
    --Added by kthiruva on 04-Apr-2006
    --Perform the below processing only for Passthrough Fees
    --Bug 5137824 - Start of Changes
    IF (l_lne_rec.fee_type = 'PASSTHROUGH') THEN
      --Added by rgooty for bug 8399461
      l_pth_selv_tbl.delete;
      FOR r_pass IN c_pass(p_chr_id, l_lne_rec.id)
      LOOP
         l_pay_start_date := r_pass.PAYMENT_START_DATE;
         l_frequency := r_pass.PAYMENT_FREQUENCY;
         --If disbursement frequency is null then take the fee payment frequency
         IF(l_frequency IS NULL) THEN
           OPEN c_feepayment_freq(p_chr_id, l_lne_rec.id);
           FETCH c_feepayment_freq INTO l_frequency;
           CLOSE c_feepayment_freq;
         END IF;
         l_months_factor := OKL_STREAM_GENERATOR_PVT.get_months_factor(
                                  p_frequency     => l_frequency,
                                  x_return_status => x_return_status);
         IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;
         l_prev_pay_start_date := NULL;
         LOOP
             IF (r_pass.disbursement_basis = 'PERCENT' ) THEN
               --When disbursement basis is PERCENT, then disbursement amount
               --is calculated by applying the percentage to all the billable
               --amounts due before the payout date
               get_pth_fee_due_amount(p_chr_id           =>  p_chr_id,
                                      p_kle_id           =>  l_lne_rec.id,
                                      p_prev_payout_date =>  l_prev_pay_start_date,
                                      p_payout_date      =>  l_pay_start_date,
                                      x_bill_amount      =>  l_bill_amount,
                                      x_return_status    =>  x_return_status);
               IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
               ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
               END IF;
               l_disb_amount := (l_bill_amount * r_pass.DISBURSEMENT_PERCENT)/100;
             ELSE
               l_disb_amount := r_pass.disbursement_fixed_amount;
             END IF;
             l_pay_end_date := ADD_MONTHS(l_pay_start_date, l_months_factor) - 1;
             IF(l_pay_end_date > r_pass.CONTRACT_END_DATE) THEN
                l_pay_end_date := r_pass.CONTRACT_END_DATE;
             END IF;
             get_passthru_exp_accruals(p_chr_id      => p_chr_id,
                                       p_disb_amount => l_disb_amount,
                                       p_start_date  => l_pay_start_date,
                                       p_end_date    => l_pay_end_date,
                                       x_selv_tbl    => l_pt_tbl_tmp,
                                       x_return_status => x_return_status);
             IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
             IF (l_pt_tbl_tmp.COUNT > 0) THEN
                i := l_pt_tbl_tmp.FIRST;
                j := 1;
                IF (l_pth_selv_tbl.COUNT > 0) THEN
                  j := l_pth_selv_tbl.LAST + 1;
                END IF;
                LOOP
                  l_pth_selv_tbl(j) := l_pt_tbl_tmp(i);
                  l_pth_selv_tbl(j).se_line_number := j;
                  EXIT WHEN (i = l_pt_tbl_tmp.LAST);
                  i := l_pt_tbl_tmp.NEXT(i);
                  j := j + 1;
                END LOOP;
             END IF;
             l_prev_pay_start_date := l_pay_start_date;
             l_pay_start_date := l_pay_end_date + 1;
             EXIT WHEN (l_pay_start_date > r_pass.CONTRACT_END_DATE);
         END LOOP;
      END LOOP;
      --Sort and consolidate the streams
      consolidate_pth_acc_streams(p_chr_id    => p_chr_id,
                                  p_selv_tbl  => l_pth_selv_tbl,
                                  x_selv_tbl  => l_pth_exp_selv_tbl,
                                  x_return_status => x_return_status);
      IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
         RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
     --end rgooty for bug 8399461
     OPEN  fee_strm_type_csr  ( l_lne_rec.id, 'FEE' );
     FETCH fee_strm_type_csr into l_fee_strm_type_rec;
     CLOSE fee_strm_type_csr;
     IF(g_rep_req_yn = 'Y') THEN
  	    OPEN l_hdr_pdt_csr(p_chr_id);
		     FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
     		CLOSE l_hdr_pdt_csr;
		     l_pdt_id := l_pdt_id_rec.report_pdt_id;
     		l_primary_sty_id := l_fee_strm_type_rec.styp_id;
	      get_dep_no_prc_stream_type
		     (
 		       p_khr_id => p_chr_id,
      		  p_pdt_id => l_pdt_id_rec.report_pdt_id,
      		  p_primary_sty_id => l_fee_strm_type_rec.styp_id,
      		  p_dependent_sty_purpose => 'PASS_THRU_EXP_ACCRUAL',
      		  x_return_status => x_return_status,
      		  x_dependent_sty_id => l_sty_id
     		);
   		  IF x_return_status = 'E' THEN
		       x_return_status := 'S';
   		  END IF;
	    ELSE
	      get_dep_no_prc_stream_type
     		(
 		      p_khr_id => p_chr_id,
     		  p_primary_sty_id => l_fee_strm_type_rec.styp_id,
 		      p_dependent_sty_purpose => 'PASS_THRU_EXP_ACCRUAL',
      	  x_return_status => x_return_status,
     		  x_dependent_sty_id => l_sty_id
     		);
		     IF x_return_status = 'E' THEN
		       x_return_status := 'S';
		     END IF;
     END IF;
     IF(l_sty_id.id IS NOT NULL) THEN
       okl_stream_generator_pvt.get_stream_header(
                               p_khr_id      =>   p_chr_id,
                               p_kle_id         =>   l_lne_rec.id,
                               p_sty_id         =>   l_sty_id.id,
                               p_purpose_code   =>   l_purpose_code,
                               x_stmv_rec       =>   l_stmv_rec,
                               x_return_status  =>   x_return_status);
       IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
         EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
       ELSIF x_return_status = okl_api.g_ret_sts_error THEN
         EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
       END IF;
       l_stmv_rec.say_code := 'WORK';
       l_stmv_rec.active_yn := 'Y';
       l_stmv_rec.date_working := SYSDATE;
        --Added by kthiruva on 09-Feb-2006
        --Bug 5029161 - Start of Changes
        --Made change by bkatraga for bug 8226735
        IF l_pth_exp_selv_tbl.COUNT > 0 THEN
           okl_streams_pub.create_streams(p_api_version     =>   p_api_version,
                                      p_init_msg_list   =>   p_init_msg_list,
                                      x_return_status   =>   x_return_status,
                                      x_msg_count       =>   x_msg_count,
                                      x_msg_data        =>   x_msg_data,
                                      p_stmv_rec        =>   l_stmv_rec,
                                      p_selv_tbl        =>   l_pth_exp_selv_tbl,  --Changed by rgooty for bug 8399461
                                      x_stmv_rec        =>   lx_stmv_rec,
                                      x_selv_tbl        =>   lx_selv_tbl);
          IF x_return_status = okl_api.g_ret_sts_unexp_error THEN
            EXIT WHEN (x_return_status = okl_api.g_ret_sts_unexp_error);
          ELSIF x_return_status = okl_api.g_ret_sts_error THEN
            EXIT WHEN (x_return_status = okl_api.g_ret_sts_error);
          END IF;
        END IF;
        --Bug 5029161 - End of Changes
     END IF;
	    -- Clear out reusable data structures
     l_sty_id    :=  NULL;
     l_stmv_rec := NULL;
     lx_stmv_rec := NULL;
     lx_selv_tbl.delete;
    END IF;
    --Bug 5137824 - End of Changes
   END LOOP;
   -- gboomina Bug 4746368 - End
   IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
     RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
   ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
     RAISE OKL_API.G_EXCEPTION_ERROR;
   END IF;
EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS THEN
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
END GENERATE_PASSTHRU_EXP_STREAMS;

  Procedure alloc_strms_basis_level(
            p_api_version   IN NUMBER,
            p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status OUT NOCOPY VARCHAR2,
            x_msg_count     OUT NOCOPY NUMBER,
            x_msg_data      OUT NOCOPY VARCHAR2,
            p_chr_id        IN  NUMBER,
            p_sty_id        IN NUMBER,
            p_ctrt_cap_amnt IN NUMBER,
            p_strmele_tbl   IN strmele_tbl_type) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'ALLOC_STRMS_BASIS_LEVEL';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;


    l_ctrt_cap_amnt NUMBER := p_ctrt_cap_amnt;

    l_stmv_rec Okl_Streams_pub.stmv_rec_type;
    l_selv_tbl Okl_Streams_pub.selv_tbl_type;
    x_stmv_rec Okl_Streams_pub.stmv_rec_type;
    x_selv_tbl Okl_Streams_pub.selv_tbl_type;

    i NUMBER;
    j NUMBER;
    k NUMBER;
    TYPE amounts_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    amounts amounts_tbl_type;
    l_num_per NUMBER;

    l_finline_rec l_line_rec_csr%ROWTYPE;
    l_subfee_rec     l_subfee_csr%ROWTYPE;
    l_strmele_tbl   strmele_tbl_type := p_strmele_tbl;

  BEGIN

    l_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);

    -- check if activity started successfully
    If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    FOR l_finline_rec in l_line_rec_csr ( p_chr_id, 'FREE_FORM1')
    LOOP

        l_stmv_rec.sty_id := p_sty_id;
        l_stmv_rec.khr_id := p_chr_id;
        l_stmv_rec.kle_id := l_finline_rec.id;
        l_stmv_rec.say_code := 'WORK';
        l_stmv_rec.active_yn := 'N';
        l_stmv_rec.date_working := sysdate;

        l_stmv_rec.transaction_number := l_strmele_tbl(1).transaction_number;
        l_stmv_rec.sgn_code := l_strmele_tbl(1).sgn_code;

        k := 0;
        FOR l_rl_rec1 in l_rl_csr1 ( 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_finline_rec.id )
        LOOP

            l_num_per  := l_rl_rec1.object1_id1;
            k := amounts.COUNT;
            FOR j in 1..l_num_per
            LOOP
                amounts(j+k) := l_rl_rec1.RULE_INFORMATION6;
            END LOOP;

        END LOOP;

        FOR i in 1..l_strmele_tbl.COUNT
        LOOP

            l_selv_tbl(i).amount := amounts(i);
            l_selv_tbl(i).accrued_yn := l_strmele_tbl(i).accrued_yn;
            l_selv_tbl(i).stream_element_date := l_strmele_tbl(i).stream_element_date;
            l_selv_tbl(i).date_billed := l_strmele_tbl(i).date_billed;
            l_selv_tbl(i).se_line_number := l_strmele_tbl(i).SE_LINE_NUMBER;
            l_selv_tbl(i).comments := l_strmele_tbl(i).comments;

        END LOOP;



        Okl_Streams_Pub.create_streams(
                           p_api_version   => l_api_version
                          ,p_init_msg_list => p_init_msg_list
                          ,x_return_status => l_return_status
                          ,x_msg_count     => x_msg_count
                          ,x_msg_data      => x_msg_data
                          ,p_stmv_rec      => l_stmv_rec
                          ,p_selv_tbl      => l_selv_tbl
                          ,x_stmv_rec      => x_stmv_rec
                          ,x_selv_tbl      => x_selv_tbl);

       If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
           raise OKL_API.G_EXCEPTION_ERROR;
       End If;

       l_selv_tbl.DELETE(1, l_selv_tbl.COUNT);
       amounts.DELETE(1, amounts.COUNT);
       l_stmv_rec := NULL;


    END LOOP;


    x_return_status := l_return_status;

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

  EXCEPTION
	when OKL_API.G_EXCEPTION_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;
                If( l_strmele_csr%ISOPEN ) Then
                    CLOSE l_strmele_csr;
                End If;


	when OTHERS then
          	l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;


  END alloc_strms_basis_level;


  Procedure alloc_strms_basis_capital(
            p_api_version   IN NUMBER,
            p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status OUT NOCOPY VARCHAR2,
            x_msg_count     OUT NOCOPY NUMBER,
            x_msg_data      OUT NOCOPY VARCHAR2,
            p_chr_id        IN  NUMBER,
            p_sty_id        IN NUMBER,
            p_ctrt_cap_amnt IN NUMBER,
            p_strmele_tbl   IN strmele_tbl_type) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'ALLOC_STRMS_BASIS_CAPITAL';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;



    l_finline_rec l_line_rec_csr%ROWTYPE;
    l_strmele_tbl   strmele_tbl_type := p_strmele_tbl;
    l_subfee_rec     l_subfee_csr%ROWTYPE;

    i NUMBER;
    l_line_amnt NUMBER;
    l_feeline_amnt NUMBER;
    l_superTval NUMBER;
    l_alloc_value NUMBER;
    l_ctrt_cap_amnt NUMBER := p_ctrt_cap_amnt;

    l_stmv_rec Okl_Streams_pub.stmv_rec_type;
    l_selv_tbl Okl_Streams_pub.selv_tbl_type;
    x_stmv_rec Okl_Streams_pub.stmv_rec_type;
    x_selv_tbl Okl_Streams_pub.selv_tbl_type;

  BEGIN

    l_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);


    -- check if activity started successfully
    If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;


    FOR l_finline_rec in l_line_rec_csr ( p_chr_id, 'FREE_FORM1')
    LOOP

        l_stmv_rec.sty_id := p_sty_id;
        l_stmv_rec.khr_id := p_chr_id;
        l_stmv_rec.kle_id := l_finline_rec.id;
        l_stmv_rec.say_code := 'CURR';
        l_stmv_rec.active_yn :=  'Y';
        l_stmv_rec.date_current := sysdate;

        l_stmv_rec.transaction_number := l_strmele_tbl(1).transaction_number;
        l_stmv_rec.sgn_code := l_strmele_tbl(1).sgn_code;
        l_stmv_rec.id := l_strmele_tbl(1).stm_id;


        l_line_amnt := l_finline_rec.capital_amount;

        OPEN l_subfee_csr( l_finline_rec.id,
                           'LINK_FEE_ASSET',
                           'OKX_COVASST');
        FETCH l_subfee_csr INTO l_subfee_rec;
        If( l_subfee_csr%NOTFOUND ) Then
            l_feeline_amnt := 0.0;
        Else
            l_feeline_amnt := l_subfee_rec.capital_amount;
        End If;
        CLOSE l_subfee_csr;

        FOR i in 1..l_strmele_tbl.COUNT
        LOOP
            l_superTval := l_strmele_tbl(i).AMOUNT;
            l_alloc_value := (l_superTval * ( l_line_amnt + l_feeline_amnt )) / l_ctrt_cap_amnt;

            l_selv_tbl(i).amount := l_alloc_value;
            l_selv_tbl(i).accrued_yn := l_strmele_tbl(i).accrued_yn;
            l_selv_tbl(i).stream_element_date := l_strmele_tbl(i).stream_element_date;
            l_selv_tbl(i).date_billed := l_strmele_tbl(i).date_billed;
            l_selv_tbl(i).comments := l_strmele_tbl(i).comments;
            l_selv_tbl(i).se_line_number := l_strmele_tbl(i).SE_LINE_NUMBER;

        END LOOP;


        Okl_Streams_Pub.update_streams(
                           p_api_version   => l_api_version
                          ,p_init_msg_list => p_init_msg_list
                          ,x_return_status => l_return_status
                          ,x_msg_count     => x_msg_count
                          ,x_msg_data      => x_msg_data
                          ,p_stmv_rec      => l_stmv_rec
                          ,x_stmv_rec      => x_stmv_rec);



        If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
            raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
            raise OKL_API.G_EXCEPTION_ERROR;
        End If;



	FOR i in 1..l_selv_tbl.COUNT
        LOOP
          l_selv_tbl(i).stm_id := x_stmv_rec.id;
        END LOOP;

        Okl_Streams_Pub.create_stream_elements(
                           p_api_version   => l_api_version
                          ,p_init_msg_list => p_init_msg_list
                          ,x_return_status => l_return_status
                          ,x_msg_count     => x_msg_count
                          ,x_msg_data      => x_msg_data
                          ,p_selv_tbl      => l_selv_tbl
                          ,x_selv_tbl      => x_selv_tbl);

       If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
           raise OKL_API.G_EXCEPTION_ERROR;
       End If;

       l_selv_tbl.DELETE(1, l_selv_tbl.COUNT);
       l_stmv_rec := NULL;


    END LOOP;

    x_return_status := l_return_status;

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

  EXCEPTION
	when OKL_API.G_EXCEPTION_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;
                If( l_strmele_csr%ISOPEN ) Then
                    CLOSE l_strmele_csr;
                End If;


	when OTHERS then
          	l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;


  END alloc_strms_basis_capital;

  Procedure allocate_streams(
            p_api_version   IN NUMBER,
            p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status OUT NOCOPY VARCHAR2,
            x_msg_count     OUT NOCOPY NUMBER,
            x_msg_data      OUT NOCOPY VARCHAR2,
            p_chr_id        IN  NUMBER) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'ALLOCATE_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    l_ctrt_cap_amnt     NUMBER;
    l_strmele_rec l_strmele_csr%ROWTYPE;
    l_strmele_tbl   strmele_tbl_type;
    i NUMBER;

    Cursor l_strms_csr ( chrId NUMBER, st VARCHAR2 ) IS
    Select sty.id sty_id,
           sty.name
    From okl_streams str,
         okl_strm_type_tl sty
    Where sty.id = str.sty_id
       and str.khr_id = chrId
       and sty.name = st
       and sty.language = 'US'
       and nvl( str.kle_id, 'XXX' ) = 'XXX';

    l_strm_rec l_strms_csr%ROWTYPE;

  BEGIN

    print( l_api_name, 'begin');

    l_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);

    -- check if activity started successfully
    If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    execute_formula(p_api_version   => l_api_version,
                    p_init_msg_list => p_init_msg_list,
                    x_return_status => l_return_status,
                    x_msg_count     => x_msg_count,
                    x_msg_data      => x_msg_data,
                    --Bug# 9299451
                    p_formula_name  => 'CONTRACT_CAP_AMNT_PRICE',
                    p_contract_id   => p_chr_id,
                    p_line_id       => NULL,
                    x_value         => l_ctrt_cap_amnt);
    print( l_api_name, 'execute formula', x_return_status);

    -- check if activity started successfully
    If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    If (l_ctrt_cap_amnt <= 0) Then
        okl_api.set_message(
           p_app_name => G_APP_NAME,
           p_msg_name => 'G_INVALID_CONTRACT_CAP_AMNT');
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

/*
    FOR j in 1..n l_strms_csr ( TO_NUMBER(p_chr_id ), 'STREAM TYPE')
    LOOP
    */

            OPEN  l_strms_csr(  TO_NUMBER(p_chr_id ), 'STREAM TYPE');
            FETCH l_strms_csr INTO l_strm_rec;
            CLOSE l_strms_csr;

            i := 0;
            FOR l_strmele_rec in l_strmele_csr ( p_chr_id, l_strm_rec.sty_id)
            LOOP

                i := i + 1;
                l_strmele_tbl(i).DATE_BILLED := l_strmele_rec.DATE_BILLED;
                l_strmele_tbl(i).STREAM_ELEMENT_DATE := l_strmele_rec.STREAM_ELEMENT_DATE;
                l_strmele_tbl(i).AMOUNT := l_strmele_rec.AMOUNT;
                l_strmele_tbl(i).ACCRUED_YN := l_strmele_rec.ACCRUED_YN;
                l_strmele_tbl(i).comments := l_strmele_rec.comments;
                l_strmele_tbl(i).se_line_number := l_strmele_rec.SE_LINE_NUMBER;
                l_strmele_tbl(i).sgn_code := l_strmele_rec.SGN_CODE;
                l_strmele_tbl(i).stm_id := l_strmele_rec.STM_ID;
                l_strmele_tbl(i).transaction_number := l_strmele_rec.TRANSACTION_NUMBER;

            END LOOP;


            alloc_strms_basis_capital(
                        p_api_version       => p_api_version,
                        p_init_msg_list     => p_init_msg_list,
                        x_return_status     => l_return_status,
                        x_msg_count         => x_msg_count,
                        x_msg_data          => x_msg_data,
                        p_chr_id            => TO_NUMBER(p_chr_id),
                        p_sty_id            => l_strm_rec.sty_id,
                        p_ctrt_cap_amnt     => l_ctrt_cap_amnt,
                        p_strmele_tbl       => l_strmele_tbl );

            IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

       l_strmele_tbl.DELETE(1, l_strmele_tbl.COUNT);

--    END LOOP;

    x_return_status := l_return_status;

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

  EXCEPTION
	when OKL_API.G_EXCEPTION_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;
                If( strm_name_csr%ISOPEN ) Then
                    CLOSE strm_name_csr;
                End If;

	when OTHERS then
          	l_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                x_return_status := l_return_status;

  End allocate_streams;
-- Start modification 11i10 bakuchib
    PROCEDURE create_interim_rental_streams(p_api_version    IN NUMBER,
                                          p_init_msg_list  IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
                                          x_return_status  OUT NOCOPY VARCHAR2,
                                          x_msg_count      OUT NOCOPY NUMBER,
                                          x_msg_data       OUT NOCOPY VARCHAR2,
                                          p_chr_id         IN  NUMBER,
                                          p_purpose        IN VARCHAR2) AS
    l_api_name		CONSTANT VARCHAR2(256) := 'INTERIM_STREAMS';
    l_return_status	         VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    i                         NUMBER;
    j                         NUMBER;
    l_orig_amount             NUMBER;
    l_rebook_amount           NUMBER;
    l_structure               NUMBER;
    error                     VARCHAR2(256);
    --styid                     NUMBER;
	styid                     strm_rec_type;
    stream_name               VARCHAR2(256);
    lv_chr_secure             VARCHAR2(3) := OKL_API.G_FALSE;
    ln_secure_amt             NUMBER := 0;
    -- get the transaction number
    CURSOR l_strm_csr (chrId NUMBER, pp VARCHAR2 )
    IS
    SELECT DISTINCT str.transaction_number transaction_number
    FROM okl_streams str
    WHERE str.khr_id = chrId
    AND str.say_code = 'CURR'
    AND nvl(str.purpose_code, 'ORIGIN') = pp;
    -- Billable rents

    -- Bug 4164120 changes start

    CURSOR l_billedrents_csr(chrId NUMBER, kleid NUMBER, p VARCHAR2)
    IS
    SELECT nvl(sum(ele.AMOUNT),0)
    FROM okl_strm_elements ele,
         okl_streams str,
	 okl_strm_type_b sty
    WHERE str.khr_id = chrId
    AND nvl(str.kle_id, -1) = kleid
    AND str.sty_id  = sty.id
    AND str.say_code = 'CURR'
    AND nvl(str.purpose_code, 'ORIGIN') = p
    AND sty.stream_type_purpose <> 'REBOOK_BILLING_ADJUSTMENT'
    AND ele.stm_id = str.id
    AND nvl(ele.date_billed, sysdate+1) < sysdate;

    -- Bug 4164120 changes end

    -- Get the Line info
    CURSOR l_line_csr( chrid NUMBER )
    IS
    SELECT kle.id,
           kle.oec,
           kle.residual_code,
           kle.capital_amount,
           kle.delivered_date,
           kle.date_funding_required,
           kle.residual_grnty_amount,
           kle.date_funding,
           kle.residual_value,
           kle.amount,
           kle.price_negotiated,
           kle.start_date,
           kle.end_date,
           kle.orig_system_id1,
           kle.initial_direct_cost,
           tl.item_description,
           tl.name
    FROM okl_k_lines_full_v kle,
         okc_line_styles_b lse,
         okc_k_lines_tl tl,
         okc_statuses_b sts
    WHERE kle.lse_id = lse.id
    AND lse.lty_code in ( 'FREE_FORM1', 'FEE', 'SOLD_SERVICE', 'LINK_SERV_ASSET')--bug# 3343133 (ssiruvol)
    AND tl.id = kle.id
    AND tl.language = USERENV('LANG')
    AND kle.dnz_chr_id = chrid
    AND sts.code = kle.sts_code
--Start of bug#3121708 modification BAKUCHIB
    AND sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED');
--End of bug#3121708 modification BAKUCHIB

    --  Get the Header info
    CURSOR l_hdr_csr(  chrId NUMBER )
    IS
    SELECT chr.orig_system_source_code,
           chr.start_date,
           chr.authoring_org_id,
           chr.inv_organization_id,
           khr.deal_type,
           pdt.id  pid,
           chr.currency_code currency_code,
           khr.term_duration term,
           chr.orig_system_id1
    FROM okc_k_headers_v chr,
         okl_k_headers khr,
         okl_products_v pdt
    WHERE khr.id = chr.id
    AND chr.id = chrId
    AND khr.pdt_id = pdt.id(+);
    -- Get the Stream id
    CURSOR get_styid_csr(p_strm_name OKL_STRM_TYPE_TL.NAME%TYPE)
    IS
    SELECT nvl(tl.id,-1) id,
           b.stream_type_subclass
    FROM okl_strm_type_tl tl,
         okl_strm_type_b b
    WHERE tl.language = USERENV('LANG')
    AND tl.name = p_strm_name
    AND tl.id = b.id;

	-- Added for user defined streams - HKPATEL
	l_strm_name VARCHAR2(30);

	-- Added code ends here - HKPATEL

    l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
    l_hdr_rec                 l_hdr_csr%ROWTYPE;
    l_rl_rec1                 l_rl_csr1%ROWTYPE;
    l_line_rec                l_line_csr%ROWTYPE;
    l_strm_rec                l_strm_csr%ROWTYPE;
    l_styid_rec               get_styid_csr%ROWTYPE;
    l_stmv_rec                Okl_Streams_pub.stmv_rec_type;
    l_stmv_rec_intm_rentals   Okl_Streams_pub.stmv_rec_type;
    l_selv_tbl                Okl_Streams_pub.selv_tbl_type;
    l_selv_tbl_intm_rentals   Okl_Streams_pub.selv_tbl_type;
    x_stmv_rec                Okl_Streams_pub.stmv_rec_type;
    x_selv_tbl                Okl_Streams_pub.selv_tbl_type;
    l_stmv_rec_secure         Okl_Streams_pub.stmv_rec_type;
    l_selv_tbl_secure         Okl_Streams_pub.selv_tbl_type;
    lx_stmv_rec_secure        Okl_Streams_pub.stmv_rec_type;
    lx_selv_tbl_secure        Okl_Streams_pub.selv_tbl_type;
    lx_inv_agmt_chr_id_tbl    okl_securitization_pvt.inv_agmt_chr_id_tbl_type;
  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- get the stream id
	-- Code added and commented for user defined streams - HKPATEL
	IF(g_rep_req_yn = 'Y') THEN

	  OPEN l_hdr_pdt_csr(p_chr_id);
	  FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	  CLOSE l_hdr_pdt_csr;

      get_primary_no_prc_stream_type
      (
        p_khr_id =>p_chr_id,
        p_pdt_id =>l_pdt_id_rec.report_pdt_id,
        p_primary_sty_purpose =>'REBOOK_BILLING_ADJUSTMENT',
        x_return_status => x_return_status,
        x_primary_sty_id =>styid
      );
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;


	ELSE
      get_primary_no_prc_stream_type
      (
        p_khr_id =>p_chr_id,
        p_pdt_id =>l_pdt_id_rec.pid,
        p_primary_sty_purpose =>'REBOOK_BILLING_ADJUSTMENT',
        x_return_status => x_return_status,
        x_primary_sty_id =>styid
      );
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	END IF;

	/*
	OPEN primary_sty_name_csr(p_chr_id => p_chr_id,
		 				  p_purpose => 'REBOOK_BILLING_ADJUSTMENT');
	FETCH primary_sty_name_csr into l_strm_name;
    IF primary_sty_name_csr%NOTFOUND THEN
       okl_api.set_message(p_app_name      => G_APP_NAME,
                           p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'Stream name');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
	CLOSE primary_sty_name_csr;


    OPEN  get_styid_csr(p_strm_name => l_strm_name);
    FETCH get_styid_csr INTO l_styid_rec;
    IF get_styid_csr%NOTFOUND THEN
       okl_api.set_message(p_app_name      => G_APP_NAME,
                           p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'Stream name');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE get_styid_csr;



    IF l_styid_rec.id = -1 THEN
       okl_api.set_message(p_app_name      => G_APP_NAME,
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'Stream ID');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
	-- added code for user defined streams ends here
	*/
    -- get the transaction number
    OPEN  l_strm_csr (p_chr_id, p_purpose);
    FETCH l_strm_csr INTO l_strm_rec;
    IF l_strm_csr%NOTFOUND THEN
       okl_api.set_message(p_app_name      => G_APP_NAME,
                           p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'Chr_id and for '||p_purpose);
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_strm_csr;
    -- Get the header info
    OPEN  l_hdr_csr (p_chr_id);
    FETCH l_hdr_csr INTO l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
       okl_api.set_message(p_app_name      => G_APP_NAME,
                           p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'Chr_id ');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_hdr_csr;
    -- Get the line info
    FOR l_line_rec IN l_line_csr (p_chr_id) LOOP
      l_stmv_rec_intm_rentals.khr_id := p_chr_id;
      l_stmv_rec_intm_rentals.kle_id := l_line_rec.id;
      l_stmv_rec_intm_rentals.say_code := 'CURR';
      IF (p_purpose = 'REPORT') THEN
        l_stmv_rec_intm_rentals.active_yn := 'N';
      ELSE
        l_stmv_rec_intm_rentals.active_yn := 'Y';
      END IF;
      l_stmv_rec_intm_rentals.date_current := sysdate;
      l_stmv_rec_intm_rentals.transaction_number := l_strm_rec.transaction_number;
      l_stmv_rec_intm_rentals.sgn_code := 'MANL';
      -- get Billabel Rentals original contract


	  OPEN l_hdr_pdt_csr(p_chr_id);
      FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	  CLOSE l_hdr_pdt_csr;

        OPEN  l_billedrents_csr(l_hdr_rec.orig_system_id1, l_line_rec.orig_system_id1, p_purpose );
        FETCH l_billedrents_csr INTO l_orig_amount;
        IF l_billedrents_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name     => G_APP_NAME,
                             p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'Orig System Chr_id/Line id and for '||p_purpose);
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE l_billedrents_csr;
      -- get Billabel Rentals contract id sent as parameter
        OPEN  l_billedrents_csr(p_chr_id,l_line_rec.id,p_purpose );
        FETCH l_billedrents_csr INTO l_rebook_amount;
        IF l_billedrents_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name     => G_APP_NAME,
                             p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'Chr_id/Line id and for '||p_purpose);
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE l_billedrents_csr;


      l_selv_tbl_intm_rentals(1).amount := l_rebook_amount - l_orig_amount;
      l_selv_tbl_intm_rentals(1).accrued_yn := 'Y';
      l_selv_tbl_intm_rentals(1).stream_element_date := sysdate;
      l_selv_tbl_intm_rentals(1).se_line_number := 1;
      l_selv_tbl_intm_rentals(1).comments := 'Interim Rentals for a Rebooked Rentals';
      --bug# 3014721
      --l_selv_tbl_intm_rentals(1).date_billed := sysdate;
      --l_stmv_rec_intm_rentals.sty_id := l_styid_rec.id;
	  l_stmv_rec_intm_rentals.sty_id := styid.id;
      IF l_selv_tbl_intm_rentals(1).amount <> 0 THEN
        Okl_Streams_Pub.create_streams(
                        p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_stmv_rec      => l_stmv_rec_intm_rentals,
                        p_selv_tbl      => l_selv_tbl_intm_rentals,
                        x_stmv_rec      => x_stmv_rec,
                        x_selv_tbl      => x_selv_tbl);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
      END IF;
      -- Check for Original contract is securitized
      okl_securitization_pvt.check_khr_securitized(
                             p_api_version              => p_api_version,
                             p_init_msg_list            => p_init_msg_list,
                             x_return_status            => x_return_status,
                             x_msg_count                => x_msg_count,
                             x_msg_data                 => x_msg_data,
                             p_khr_id                   => l_hdr_rec.orig_system_id1,
                             p_effective_date           => l_line_rec.start_date,
                             p_effective_date_operator  => okl_securitization_pvt.G_GREATER_THAN_EQUAL_TO,
                             p_stream_type_subclass     => l_styid_rec.stream_type_subclass,
                             x_value                    => lv_chr_secure,
                             x_inv_agmt_chr_id_tbl      => lx_inv_agmt_chr_id_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
      END IF;
      IF lv_chr_secure = OKL_API.G_TRUE THEN
        -- get the stream id
		-- code added for user defined stream
	    IF(g_rep_req_yn = 'Y') THEN
          get_primary_no_prc_stream_type
          (
            p_khr_id =>p_chr_id,
            p_pdt_id =>l_pdt_id_rec.report_pdt_id,
            p_primary_sty_purpose =>'INVESTOR_DISB_ADJUSTMENT',
            x_return_status => x_return_status,
            x_primary_sty_id =>styid
          );
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	    ELSE
          get_primary_no_prc_stream_type
          (
            p_khr_id =>p_chr_id,
            p_pdt_id =>l_pdt_id_rec.pid,
            p_primary_sty_purpose =>'INVESTOR_DISB_ADJUSTMENT',
            x_return_status => x_return_status,
            x_primary_sty_id =>styid
          );
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	    END IF;
	/*
        --OPEN  get_styid_csr(p_strm_name => 'INVESTOR DISBURSEMENT ADJUSTMENT');
		OPEN  get_styid_csr(p_strm_name => l_strm_name);


        FETCH get_styid_csr INTO l_styid_rec;
        IF get_styid_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Stream name');
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE get_styid_csr;
        IF l_styid_rec.id = -1 THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_INVALID_VALUE,
                              p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'Stream ID');
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
	*/
-- Added code for user defined stream ends here
        -- Get the amount
	-- LOOP start.
        okl_securitization_pvt.check_kle_securitized(
                               p_api_version              => p_api_version,
                               p_init_msg_list            => p_init_msg_list,
                               x_return_status            => x_return_status,
                               x_msg_count                => x_msg_count,
                               x_msg_data                 => x_msg_data,
                               p_kle_id                   => l_line_rec.orig_system_id1,
                               p_effective_date           => l_line_rec.start_date,
                               p_effective_date_operator  => okl_securitization_pvt.G_GREATER_THAN_EQUAL_TO,
                               p_stream_type_subclass     => l_styid_rec.stream_type_subclass,
                               x_value                    => lv_chr_secure,
                               x_inv_agmt_chr_id_tbl      => lx_inv_agmt_chr_id_tbl);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;

--Start of modification Bug#3293300 - BAKUCHIB
   FOR i in lx_inv_agmt_chr_id_tbl.FIRST..lx_inv_agmt_chr_id_tbl.LAST LOOP
--End of modification Bug#3293300 - BAKUCHIB
        ln_secure_amt := okl_investor_invoice_disb_pvt.get_disb_amt(
	                                               p_ia_id       => lx_inv_agmt_chr_id_tbl(i).khr_id,
                                                       p_rbk_khr_id => l_hdr_rec.orig_system_id1,
                                                       p_rbk_kle_id => l_line_rec.orig_system_id1);
        l_stmv_rec_secure := l_stmv_rec_intm_rentals;
        l_selv_tbl_secure := l_selv_tbl_intm_rentals;
        --l_stmv_rec_secure.sty_id := l_styid_rec.id;
		l_stmv_rec_secure.sty_id := styid.id;

        l_stmv_rec_secure.source_id := lx_inv_agmt_chr_id_tbl(i).khr_id;
        l_stmv_rec_secure.source_table := 'OKL_K_HEADERS';

        l_selv_tbl_secure(1).amount := ln_secure_amt * -1;

        IF l_selv_tbl_secure(1).amount <> 0 THEN

          okl_streams_pub.create_streams(
                          p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_stmv_rec      => l_stmv_rec_secure,
                          p_selv_tbl      => l_selv_tbl_secure,
                          x_stmv_rec      => lx_stmv_rec_secure,
                          x_selv_tbl      => lx_selv_tbl_secure);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;

        END IF;

        l_selv_tbl_secure.DELETE;
        l_selv_tbl_secure := l_selv_tbl;
        l_stmv_rec_secure := l_stmv_rec;

  END LOOP;

	-- LOOP end.
      END if;
      l_selv_tbl_intm_rentals.DELETE;
      l_selv_tbl_intm_rentals := l_selv_tbl;
      l_stmv_rec_intm_rentals := l_stmv_rec;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- for the contract header level.
    l_stmv_rec_intm_rentals.khr_id := TO_NUMBER(p_chr_id);
    l_stmv_rec_intm_rentals.kle_id := NULL;
    l_stmv_rec_intm_rentals.say_code := 'CURR';
    IF ( p_purpose = 'REPORT') THEN
      l_stmv_rec_intm_rentals.active_yn := 'N';
    ELSE
      l_stmv_rec_intm_rentals.active_yn := 'Y';
    END IF;
    l_stmv_rec_intm_rentals.date_current := sysdate;
    l_stmv_rec_intm_rentals.transaction_number := l_strm_rec.transaction_number;
    l_stmv_rec_intm_rentals.sgn_code := 'MANL';
    -- Get Billabel rentals

      OPEN  l_billedrents_csr(l_hdr_rec.orig_system_id1, -1, p_purpose );
      FETCH l_billedrents_csr INTO l_orig_amount;
      IF l_billedrents_csr%NOTFOUND THEN
        okl_api.set_message(p_app_name     => G_APP_NAME,
                            p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Orig System Chr_id and for '||p_purpose);
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_billedrents_csr;
    -- Get Billabel rentals
      OPEN  l_billedrents_csr(TO_NUMBER(p_chr_id),  -1, p_purpose );
      FETCH l_billedrents_csr INTO l_rebook_amount;
      IF l_billedrents_csr%NOTFOUND THEN
        okl_api.set_message(p_app_name     => G_APP_NAME,
                            p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Chr_id and for '||p_purpose);
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_billedrents_csr;

    l_selv_tbl_intm_rentals(1).amount := l_rebook_amount - l_orig_amount;
    l_selv_tbl_intm_rentals(1).accrued_yn := 'Y';
    l_selv_tbl_intm_rentals(1).stream_element_date := sysdate;
    l_selv_tbl_intm_rentals(1).se_line_number := 1;
    l_selv_tbl_intm_rentals(1).comments := 'Interim Rentals for a Rebooked Rentals';
    --bug# 3014721
    --l_selv_tbl_intm_rentals(1).date_billed := sysdate;
    --l_stmv_rec_intm_rentals.sty_id := l_styid_rec.id;
	l_stmv_rec_intm_rentals.sty_id := styid.id;
    IF l_selv_tbl_intm_rentals(1).amount <> 0 THEN
      Okl_Streams_Pub.create_streams(
                      p_api_version   => p_api_version,
                      p_init_msg_list => p_init_msg_list,
                      x_return_status => x_return_status,
                      x_msg_count     => x_msg_count,
                      x_msg_data      => x_msg_data,
                      p_stmv_rec      => l_stmv_rec_intm_rentals,
                      p_selv_tbl      => l_selv_tbl_intm_rentals,
                      x_stmv_rec      => x_stmv_rec,
                      x_selv_tbl      => x_selv_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;
    l_selv_tbl_intm_rentals.DELETE(1, l_selv_tbl_intm_rentals.LAST);
    l_stmv_rec_intm_rentals := NULL;
    -- for the contract header level.
    OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF l_strm_csr%ISOPEN THEN
        CLOSE l_strm_csr;
      END IF;
      IF l_billedrents_csr%ISOPEN THEN
        CLOSE l_billedrents_csr;
      END IF;
      IF l_line_csr%ISOPEN THEN
        CLOSE l_line_csr;
      END IF;
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF get_styid_csr%ISOPEN THEN
        CLOSE get_styid_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF l_strm_csr%ISOPEN THEN
        CLOSE l_strm_csr;
      END IF;
      IF l_billedrents_csr%ISOPEN THEN
        CLOSE l_billedrents_csr;
      END IF;
      IF l_line_csr%ISOPEN THEN
        CLOSE l_line_csr;
      END IF;
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF get_styid_csr%ISOPEN THEN
        CLOSE get_styid_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS THEN
      IF l_strm_csr%ISOPEN THEN
        CLOSE l_strm_csr;
      END IF;
      IF l_billedrents_csr%ISOPEN THEN
        CLOSE l_billedrents_csr;
      END IF;
      IF l_line_csr%ISOPEN THEN
        CLOSE l_line_csr;
      END IF;
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF get_styid_csr%ISOPEN THEN
        CLOSE get_styid_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END create_interim_rental_streams;

-- Added by HKPATEL for mass rebook fix
PROCEDURE adjust_massrebook_streams(
              p_api_version     IN  NUMBER,
              p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
              x_return_status   OUT NOCOPY VARCHAR2,
              x_msg_count       OUT NOCOPY NUMBER,
              x_msg_data        OUT NOCOPY VARCHAR2,
              p_chr_id          IN  VARCHAR2,
              p_purpose          IN  VARCHAR2) AS

       l_api_name		 CONSTANT VARCHAR2(256) := 'ADJUSTMENT_STREAMS';
       --styid                    NUMBER;
	   styid                     strm_rec_type;
       stream_name               VARCHAR2(256);
       lv_chr_secure             VARCHAR2(3) := OKL_API.G_FALSE;
       ln_secure_amt             NUMBER := 0;

  -- To check if the contract is MASS REBOOK candidate
       CURSOR c_chk_msrbk_csr(p_chr_id NUMBER)
       IS
       SELECT 'Y'
       FROM DUAL
       WHERE EXISTS (SELECT 'Y'
                     FROM okl_rbk_selected_contract
                     WHERE khr_id = p_chr_id
                     AND status = 'UNDER REVISION');
      -- Billable rents

      -- Bug 4164120 changes start

      CURSOR l_billedrents_csr(p_chr_id  NUMBER,
                               p_kle_id  NUMBER,
                               p_purpose VARCHAR2)
      IS
      SELECT	NVL(SUM(ele.AMOUNT),0) amount
      FROM	okl_strm_elements ele,
		okl_streams str,
		okl_strm_type_b sty
      WHERE	str.khr_id = p_chr_id
      AND NVL(str.kle_id, -1) = p_kle_id
      AND str.sty_id  = sty.id
      AND str.say_code = 'CURR'
      AND nvl(str.purpose_code, 'ORIGIN') = p_purpose
      AND sty.stream_type_purpose <> 'REBOOK_BILLING_ADJUSTMENT'
      AND ele.stm_id = str.id
      AND NVL(ele.date_billed, SYSDATE+1) < SYSDATE;

      -- Get billing adjustment stream amount which are not billed
      CURSOR l_bill_adjust_csr(p_chr_id  NUMBER,
                               p_kle_id  NUMBER,
                               p_purpose VARCHAR2)
      IS
      SELECT NVL(SUM(ele.AMOUNT),0) amount
      FROM okl_strm_elements ele,
           okl_streams str,
           okl_strm_type_b sty
      WHERE str.khr_id = p_chr_id
      AND NVL(str.kle_id, -1) = p_kle_id
      AND str.sty_id  = sty.id
      AND str.say_code = 'CURR'
      AND nvl(str.purpose_code, 'ORIGIN') = p_purpose
      AND sty.stream_type_purpose = 'REBOOK_BILLING_ADJUSTMENT'
      AND ele.stm_id = str.id
      AND ele.date_billed IS NULL;

      -- Bug 4164120 changes end

      -- Get the Line info
      CURSOR l_line_csr( p_chr_id NUMBER )
      IS
      SELECT kle.id kle_id,
             kle.start_date
      FROM okc_k_lines_b kle,
           okc_line_styles_b lse
      WHERE kle.lse_id = lse.id
      AND lse.lty_code in ( 'FREE_FORM1', 'FEE', 'SOLD_SERVICE', 'LINK_SERV_ASSET')--bug# 3343133 (ssiruvol)
      AND kle.dnz_chr_id = p_chr_id;

      -- Get the Stream id
      CURSOR get_styid_csr(p_strm_name OKL_STRM_TYPE_TL.NAME%TYPE)
      IS
      SELECT nvl(tl.id,-1) id,
      b.stream_type_subclass
      FROM okl_strm_type_tl tl,
      okl_strm_type_b b
      WHERE tl.language = USERENV('LANG')
      AND tl.name = p_strm_name
      AND tl.id = b.id;

	-- Added for user defined streams - HKPATEL

	l_strm_name VARCHAR2(30);

	-- Added code ends here - HKPATEL


      -- get the transaction number
      CURSOR l_trx_num_csr
      IS
--      SELECT DISTINCT str.transaction_number transaction_number
--      FROM okl_streams str
--      WHERE str.khr_id = p_chr_id
--      AND str.say_code = 'CURR'
--      AND nvl(str.purpose_code, 'ORIGIN') = p_purpose;
      SELECT OKL_SIF_SEQ.NEXTVAL
      FROM dual;

      -- Bucket to store the billed amonts
      TYPE bill_rec_type IS RECORD (
         kle_id     NUMBER := NULL,
         billed_amt NUMBER := NULL);
      lt_bill_rec             bill_rec_type;
      k                       NUMBER := 0;
      ln_billed_adj_amt       NUMBER := 0;
      ln_transaction_number   NUMBER := 0;
      lv_msrbk_yn             VARCHAR2(3) := 'N';
      l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
      r_line_rec                l_line_csr%ROWTYPE;
      l_strm_rec                l_trx_num_csr%ROWTYPE;
      l_styid_rec               get_styid_csr%ROWTYPE;
      l_stmv_rec                Okl_Streams_pub.stmv_rec_type;
      l_stmv_rec_intm_rentals   Okl_Streams_pub.stmv_rec_type;
      l_selv_tbl                Okl_Streams_pub.selv_tbl_type;
      l_selv_tbl_intm_rentals   Okl_Streams_pub.selv_tbl_type;
      x_stmv_rec                Okl_Streams_pub.stmv_rec_type;
      x_selv_tbl                Okl_Streams_pub.selv_tbl_type;
      l_stmv_rec_secure         Okl_Streams_pub.stmv_rec_type;
      l_selv_tbl_secure         Okl_Streams_pub.selv_tbl_type;
      lx_stmv_rec_secure        Okl_Streams_pub.stmv_rec_type;
      lx_selv_tbl_secure        Okl_Streams_pub.selv_tbl_type;
      lx_inv_agmt_chr_id_tbl    okl_securitization_pvt.inv_agmt_chr_id_tbl_type;
    Begin
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      -- Call start_activity to create savepoint, check compatibility
      -- and initialize message list
      x_return_status := OKL_API.START_ACTIVITY (
  			       l_api_name
  			       ,p_init_msg_list
  			       ,'_PVT'
  			       ,x_return_status);
      -- Check if activity started successfully
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
         RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

	  OPEN l_hdr_pdt_csr(p_chr_id);
	  FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	  CLOSE l_hdr_pdt_csr;

      OPEN  c_chk_msrbk_csr(p_chr_id => p_chr_id);
      FETCH c_chk_msrbk_csr INTO lv_msrbk_yn;
      CLOSE c_chk_msrbk_csr;
      IF lv_msrbk_yn = 'Y' THEN
	-- Code added and commented for user defined streams - HKPATEL
	    IF(g_rep_req_yn = 'Y') THEN

          get_primary_no_prc_stream_type
         (
          p_khr_id =>p_chr_id,
          p_pdt_id =>l_pdt_id_rec.report_pdt_id,
          p_primary_sty_purpose =>'REBOOK_BILLING_ADJUSTMENT',
          x_return_status => x_return_status,
          x_primary_sty_id =>styid
         );
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	    ELSE
          get_primary_no_prc_stream_type
         (
          p_khr_id =>p_chr_id,
          p_pdt_id =>l_pdt_id_rec.pid,
          p_primary_sty_purpose =>'REBOOK_BILLING_ADJUSTMENT',
          x_return_status => x_return_status,
          x_primary_sty_id =>styid
         );
		  IF x_return_status = 'E' THEN
		     x_return_status := 'S';
		  END IF;

	    END IF;
	  /*
        -- get the stream id
        OPEN  get_styid_csr(p_strm_name => l_strm_name);
		--OPEN  get_styid_csr(p_strm_name => 'BILLING ADJUSTMENT');

        FETCH get_styid_csr INTO l_styid_rec;
        IF get_styid_csr%NOTFOUND THEN
           okl_api.set_message(p_app_name      => G_APP_NAME,
  			     p_msg_name      => G_LLA_NO_MATCHING_RECORD,
  			     p_token1        => G_COL_NAME_TOKEN,
  			     p_token1_value  => 'Stream name');
           RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE get_styid_csr;
        IF l_styid_rec.id = -1 THEN
           okl_api.set_message(p_app_name      => G_APP_NAME,
  			     p_msg_name      => G_INVALID_VALUE,
  			     p_token1        => G_COL_NAME_TOKEN,
  			     p_token1_value  => 'Stream ID');
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
		*/
		-- Added code for user defined stream ends here
        -- Get the line info
        FOR r_line_rec IN l_line_csr (p_chr_id) LOOP
          l_stmv_rec_intm_rentals.khr_id             := p_chr_id;
          l_stmv_rec_intm_rentals.kle_id             := r_line_rec.kle_id;
          l_stmv_rec_intm_rentals.say_code := 'WORK';
          l_stmv_rec_intm_rentals.date_working := SYSDATE;

          IF (p_purpose = 'REPORT') THEN
            l_stmv_rec_intm_rentals.active_yn := 'N';
          ELSE
            l_stmv_rec_intm_rentals.active_yn := 'Y';
          END IF;

          -- to get the transaction number of the contract
          OPEN  l_trx_num_csr;
          FETCH l_trx_num_csr INTO ln_transaction_number;
          CLOSE l_trx_num_csr;
          l_stmv_rec_intm_rentals.transaction_number := ln_transaction_number;
          l_stmv_rec_intm_rentals.sgn_code           := 'MANL';
          l_stmv_rec_intm_rentals.sty_id             := styid.id;
          -- Get the billed amount + not billed billing adjustment amount
          -- When the billing adjustment streams are billed then
          -- we need to take the same into account.
            OPEN  l_bill_adjust_csr(p_chr_id  => p_chr_id,
                                    p_kle_id  => r_line_rec.kle_id,
                                    p_purpose => p_purpose);
            FETCH l_bill_adjust_csr INTO ln_billed_adj_amt;
            IF l_bill_adjust_csr%NOTFOUND THEN
              okl_api.set_message(p_app_name     => G_APP_NAME,
                                 p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'Chr_id/Line id and for '||p_purpose);
              x_return_status := OKL_API.G_RET_STS_ERROR;
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            CLOSE l_bill_adjust_csr;
          -- to get the billed amount of all the rent that have been
          -- billed but does not include the billing adjustment stream amount
            OPEN  l_billedrents_csr(p_chr_id  => p_chr_id,
                                    p_kle_id  => r_line_rec.kle_id,
                                    p_purpose => p_purpose);
            FETCH l_billedrents_csr INTO lt_bill_rec.billed_amt;
            IF l_billedrents_csr%NOTFOUND THEN
              okl_api.set_message(p_app_name     => G_APP_NAME,
                                 p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'Chr_id/Line id and for '||p_purpose);
              x_return_status := OKL_API.G_RET_STS_ERROR;
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            CLOSE l_billedrents_csr;

          l_selv_tbl_intm_rentals(1).amount := (lt_bill_rec.billed_amt) * -1 + ln_billed_adj_amt;
          l_selv_tbl_intm_rentals(1).accrued_yn := 'Y';
          l_selv_tbl_intm_rentals(1).stream_element_date := sysdate;
          l_selv_tbl_intm_rentals(1).se_line_number := 1;
          l_selv_tbl_intm_rentals(1).comments := 'Interim Rentals for a Mass Rebooked Rentals';
          IF l_selv_tbl_intm_rentals(1).amount <> 0 THEN
            Okl_Streams_Pub.create_streams(
                            p_api_version   => p_api_version,
                            p_init_msg_list => p_init_msg_list,
                            x_return_status => x_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            p_stmv_rec      => l_stmv_rec_intm_rentals,
                            p_selv_tbl      => l_selv_tbl_intm_rentals,
                            x_stmv_rec      => x_stmv_rec,
                            x_selv_tbl      => x_selv_tbl);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
          END IF;
          -- Check for Original contract is securitized
          okl_securitization_pvt.check_khr_securitized(
                                 p_api_version              => p_api_version,
                                 p_init_msg_list            => p_init_msg_list,
                                 x_return_status            => x_return_status,
                                 x_msg_count                => x_msg_count,
                                 x_msg_data                 => x_msg_data,
                                 p_khr_id                   => p_chr_id,
                                 p_effective_date           => r_line_rec.start_date,
                                 p_effective_date_operator  => okl_securitization_pvt.G_GREATER_THAN_EQUAL_TO,
                                 p_stream_type_subclass     => l_styid_rec.stream_type_subclass,
                                 x_value                    => lv_chr_secure,
                                 x_inv_agmt_chr_id_tbl      => lx_inv_agmt_chr_id_tbl);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          IF lv_chr_secure = OKL_API.G_TRUE THEN
   	        IF(g_rep_req_yn = 'Y') THEN
            get_primary_no_prc_stream_type
            (
              p_khr_id =>p_chr_id,
              p_pdt_id =>l_pdt_id_rec.report_pdt_id,
              p_primary_sty_purpose =>'INVESTOR_DISB_ADJUSTMENT',
              x_return_status => x_return_status,
              x_primary_sty_id =>styid
            );
		     IF x_return_status = 'E' THEN
		        x_return_status := 'S';
		     END IF;


	      ELSE
            get_primary_no_prc_stream_type
            (
              p_khr_id =>p_chr_id,
              p_pdt_id =>l_pdt_id_rec.pid,
              p_primary_sty_purpose =>'INVESTOR_DISB_ADJUSTMENT',
              x_return_status => x_return_status,
              x_primary_sty_id =>styid
            );
		     IF x_return_status = 'E' THEN
		        x_return_status := 'S';
		     END IF;

	      END IF;

/*
            --OPEN  get_styid_csr(p_strm_name => 'INVESTOR DISBURSEMENT ADJUSTMENT');
			OPEN  get_styid_csr(p_strm_name => l_strm_name);
            FETCH get_styid_csr INTO l_styid_rec;
            IF get_styid_csr%NOTFOUND THEN
              okl_api.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'Stream name');
              x_return_status := OKL_API.G_RET_STS_ERROR;
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            CLOSE get_styid_csr;
            IF l_styid_rec.id = -1 THEN
              okl_api.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_INVALID_VALUE,
                                  p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'Stream ID');
              x_return_status := OKL_API.G_RET_STS_ERROR;
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
*/
            -- Get the amount
  	  -- LOOP start.
            okl_securitization_pvt.check_kle_securitized(
                                   p_api_version              => p_api_version,
                                   p_init_msg_list            => p_init_msg_list,
                                   x_return_status            => x_return_status,
                                   x_msg_count                => x_msg_count,
                                   x_msg_data                 => x_msg_data,
                                   p_kle_id                   => r_line_rec.kle_id,
                                   p_effective_date           => r_line_rec.start_date,
                                   p_effective_date_operator  => okl_securitization_pvt.G_GREATER_THAN_EQUAL_TO,
                                   p_stream_type_subclass     => l_styid_rec.stream_type_subclass,
                                   x_value                    => lv_chr_secure,
                                   x_inv_agmt_chr_id_tbl      => lx_inv_agmt_chr_id_tbl);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            FOR i in lx_inv_agmt_chr_id_tbl.FIRST..lx_inv_agmt_chr_id_tbl.LAST LOOP
              ln_secure_amt := okl_investor_invoice_disb_pvt.get_disb_amt(
  	                                                   p_ia_id       => lx_inv_agmt_chr_id_tbl(i).khr_id,
                                                             p_rbk_khr_id => p_chr_id,
                                                             p_rbk_kle_id => r_line_rec.kle_id);
              l_stmv_rec_secure := l_stmv_rec_intm_rentals;
              l_selv_tbl_secure := l_selv_tbl_intm_rentals;
              l_stmv_rec_secure.sty_id := styid.id;
              l_stmv_rec_secure.source_id := lx_inv_agmt_chr_id_tbl(i).khr_id;
              l_stmv_rec_secure.source_table := 'OKL_K_HEADERS';
              l_selv_tbl_secure(1).amount := ln_secure_amt * -1;
              IF l_selv_tbl_secure(1).amount <> 0 THEN
                okl_streams_pub.create_streams(
                                p_api_version   => p_api_version,
                                p_init_msg_list => p_init_msg_list,
                                x_return_status => x_return_status,
                                x_msg_count     => x_msg_count,
                                x_msg_data      => x_msg_data,
                                p_stmv_rec      => l_stmv_rec_secure,
                                p_selv_tbl      => l_selv_tbl_secure,
                                x_stmv_rec      => lx_stmv_rec_secure,
                                x_selv_tbl      => lx_selv_tbl_secure);
                IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                  EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
                END IF;
              END IF;
              l_selv_tbl_secure.DELETE;
              l_selv_tbl_secure := l_selv_tbl;
              l_stmv_rec_secure := l_stmv_rec;
            END LOOP;
          END IF;
          l_selv_tbl_intm_rentals.DELETE;
          l_selv_tbl_intm_rentals := l_selv_tbl;
          l_stmv_rec_intm_rentals := l_stmv_rec;
        END LOOP;
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        -- generate for the contract lines
        l_stmv_rec_intm_rentals.khr_id             := p_chr_id;
        l_stmv_rec_intm_rentals.kle_id             := NULL;
        l_stmv_rec_intm_rentals.say_code := 'WORK';
        IF (p_purpose = 'REPORT') THEN
          l_stmv_rec_intm_rentals.active_yn := 'N';
        ELSE
          l_stmv_rec_intm_rentals.active_yn := 'Y';
        END IF;
        l_stmv_rec_intm_rentals.date_working       := sysdate;
        l_stmv_rec_intm_rentals.transaction_number := ln_transaction_number;
        l_stmv_rec_intm_rentals.sgn_code           := 'MANL';
        l_stmv_rec_intm_rentals.sty_id             := l_styid_rec.id;
        -- Get the billed amount + not billed billing adjustment amount
        -- When the billing adjustment streams are billed then
        -- we need to take the same into account.
          OPEN  l_bill_adjust_csr(p_chr_id  => p_chr_id,
                                  p_kle_id  => NULL,
                                  p_purpose => p_purpose);
          FETCH l_bill_adjust_csr INTO ln_billed_adj_amt;
          IF l_bill_adjust_csr%NOTFOUND THEN
            okl_api.set_message(p_app_name     => G_APP_NAME,
                               p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                               p_token1        => G_COL_NAME_TOKEN,
                               p_token1_value  => 'Chr_id/Line id and for '||p_purpose);
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_bill_adjust_csr;
        -- to get the billed amount of all the rent that have been
        -- billed but does not include the billing adjustment stream amount
          OPEN  l_billedrents_csr(p_chr_id  => p_chr_id,
                                  p_kle_id  => NULL,
                                  p_purpose => p_purpose);
          FETCH l_billedrents_csr INTO lt_bill_rec.billed_amt;
          IF l_billedrents_csr%NOTFOUND THEN
            okl_api.set_message(p_app_name     => G_APP_NAME,
                                p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'Chr_id/Line id and for '||p_purpose);
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_billedrents_csr;

        l_selv_tbl_intm_rentals(1).amount := (lt_bill_rec.billed_amt) * -1 + ln_billed_adj_amt;
        l_selv_tbl_intm_rentals(1).accrued_yn := 'Y';
        l_selv_tbl_intm_rentals(1).stream_element_date := sysdate;
        l_selv_tbl_intm_rentals(1).se_line_number := 1;
        l_selv_tbl_intm_rentals(1).comments := 'Interim Rentals for a Mass Rebooked Rentals';
        IF l_selv_tbl_intm_rentals(1).amount <> 0 THEN
          Okl_Streams_Pub.create_streams(
                          p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_stmv_rec      => l_stmv_rec_intm_rentals,
                          p_selv_tbl      => l_selv_tbl_intm_rentals,
                          x_stmv_rec      => x_stmv_rec,
                          x_selv_tbl      => x_selv_tbl);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;
      END IF;
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      OKL_API.END_ACTIVITY (x_msg_count,
                            x_msg_data );
    EXCEPTION
      WHEN OKL_API.G_EXCEPTION_ERROR then
        IF c_chk_msrbk_csr%ISOPEN THEN
          CLOSE c_chk_msrbk_csr;
        END IF;
        IF l_billedrents_csr%ISOPEN THEN
          CLOSE l_billedrents_csr;
        END IF;
        IF l_bill_adjust_csr%ISOPEN THEN
          CLOSE l_bill_adjust_csr;
        END IF;
        IF l_line_csr%ISOPEN THEN
          CLOSE l_line_csr;
        END IF;
        IF get_styid_csr%ISOPEN THEN
          CLOSE get_styid_csr;
        END IF;
        IF l_trx_num_csr%ISOPEN THEN
          CLOSE l_trx_num_csr;
        END IF;
        x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                  l_api_name,
                                 G_PKG_NAME,
                                 'OKL_API.G_RET_STS_ERROR',
                                 x_msg_count,
                                 x_msg_data,
                                 '_PVT');
      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
        IF c_chk_msrbk_csr%ISOPEN THEN
          CLOSE c_chk_msrbk_csr;
        END IF;
        IF l_billedrents_csr%ISOPEN THEN
          CLOSE l_billedrents_csr;
        END IF;
        IF l_bill_adjust_csr%ISOPEN THEN
          CLOSE l_bill_adjust_csr;
        END IF;
        IF l_line_csr%ISOPEN THEN
          CLOSE l_line_csr;
        END IF;
        IF get_styid_csr%ISOPEN THEN
          CLOSE get_styid_csr;
        END IF;
        IF l_trx_num_csr%ISOPEN THEN
          CLOSE l_trx_num_csr;
        END IF;
        x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                  l_api_name,
                                  G_PKG_NAME,
                                  'OKL_API.G_RET_STS_UNEXP_ERROR',
                                  x_msg_count,
                                  x_msg_data,
                                  '_PVT');
      WHEN OTHERS then
        IF c_chk_msrbk_csr%ISOPEN THEN
          CLOSE c_chk_msrbk_csr;
        END IF;
        IF l_billedrents_csr%ISOPEN THEN
          CLOSE l_billedrents_csr;
        END IF;
        IF l_bill_adjust_csr%ISOPEN THEN
          CLOSE l_bill_adjust_csr;
        END IF;
        IF l_line_csr%ISOPEN THEN
          CLOSE l_line_csr;
        END IF;
        IF get_styid_csr%ISOPEN THEN
          CLOSE get_styid_csr;
        END IF;
        IF l_trx_num_csr%ISOPEN THEN
          CLOSE l_trx_num_csr;
        END IF;
        x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                  l_api_name,
                                  G_PKG_NAME,
                                  'OTHERS',
                                  x_msg_count,
                                  x_msg_data,
                                  '_PVT');
    END adjust_massrebook_streams;


-- End modification 11i10 bakuchib
-- Start modification 11i10 bakuchib
  procedure create_advance_rental_streams(
            p_api_version   IN NUMBER,
            p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status OUT NOCOPY VARCHAR2,
            x_msg_count     OUT NOCOPY NUMBER,
            x_msg_data      OUT NOCOPY VARCHAR2,
            p_chr_id        IN  NUMBER,
            p_purpose    IN VARCHAR2) AS

    l_api_name		CONSTANT VARCHAR2(256) := 'CREATE_ADV_RTL_STRMS';
    l_api_version	CONSTANT NUMBER	      := 1;
    i                            NUMBER;
    j                            NUMBER;
    l_amount                     NUMBER;
    l_pay_amount                 NUMBER;
    l_structure                  NUMBER;
    error                        VARCHAR2(256);
    --styid                        NUMBER;
	styid                        strm_rec_type;
    stream_name                  VARCHAR2(256);
    l_stmv_rec                   okl_streams_pub.stmv_rec_type;
    l_stmv_rec_adv_rentals       okl_streams_pub.stmv_rec_type;
    l_selv_tbl                   okl_streams_pub.selv_tbl_type;
    l_selv_tbl_adv_rentals       okl_streams_pub.selv_tbl_type;
    x_stmv_rec                   okl_streams_pub.stmv_rec_type;
    x_selv_tbl                   okl_streams_pub.selv_tbl_type;

    --Modified for streams performance
    -- This cursors fetches all the line id's for the contract whose Rent streams
    -- have a structure that is not -1 or 0
    --Bug 4346646 - Start of Changes
    -- arajagop added disticnt to the cursor below
    CURSOR l_struct_csr(chrId NUMBER , styId NUMBER)
    IS
    SELECT distinct crg.cle_id             line_id,
           (NVL(crl.rule_information5,-1)) structure
           ,cle.sts_code                   sts_code
           ,date_terminated                date_terminated
    FROM okc_rule_groups_b crg,
         okc_rules_b crl,
         okc_rules_b crl1,
         -- Bug 7653893 : RGOOTY
         okc_k_lines_b cle
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = 'LALEVL'
    AND crl.rule_information_category = 'LASLL'
    AND crl1.rule_information_category = 'LASLH'
    AND crl.object2_id1 = crl1.id
    AND crl1.object1_id1 = styid
    AND crg.dnz_chr_id = chrId
    AND (NVL(crl.rule_information5,-1)) not in (-1,0)
    AND crg.cle_id = cle.id; -- Bug 7653893 : RGOOTY
    --Bug 4346646 - End of Changes

    --Added by kthiruva on 04-Jul-2005
    --Bug 4414441 - Start of Changes
    --This cursor fetches the details of the payment plan the would be used in the Advance Rent Calculation
    CURSOR l_payment_csr(chrId NUMBER , styId NUMBER,kleId NUMBER)
    IS
    SELECT (NVL(crl.rule_information5,-1)) structure,
           fnd_date.canonical_to_date(crl.RULE_INFORMATION2) START_DATE,
           crl.RULE_INFORMATION3 PERIOD_IN_MONTHS,
           crl.RULE_INFORMATION6 AMOUNT,
           nvl(crl.RULE_INFORMATION10,'N') ARREARS,
           crl.RULE_INFORMATION7 STUB_DAYS,
           crl.RULE_INFORMATION8 STUB_AMOUNT,
           TUOM.ID1 FREQUENCY,
           null END_DATE
    FROM okc_rule_groups_b crg,
         okc_rules_b crl,
         okc_rules_b crl1,
         okl_time_units_v tuom
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = 'LALEVL'
    AND crl.rule_information_category = 'LASLL'
    AND crl1.rule_information_category = 'LASLH'
    AND crl.object2_id1 = crl1.id
    AND crl1.object1_id1 = styId
    AND crg.dnz_chr_id = chrId
    AND TUOM.ID1=crl.OBJECT1_ID1
    AND (NVL(crl.rule_information5,-1)) not in (-1,0)
    AND crg.cle_id = kleId
    ORDER BY start_date ASC;
   --Bug 4414441 - End of Changes

    CURSOR l_strm_csr (chrId NUMBER,
                       kleId NUMBER,
                       styId NUMBER,
                       status VARCHAR2,
                       pp VARCHAR2)
    IS
    SELECT str.Id,
           str.transaction_number,
           str.sgn_code sgn_code,
           str.khr_id,
           str.sty_id,
           str.say_code,
           str.active_yn,
           str.kle_id
    FROM okl_streams str
    WHERE str.khr_id = chrId
    AND str.kle_id = kleId
    AND str.say_code = 'WORK'
    --Added by kthiruva for Streams Performance Patch
    --Bug 4346646 - Start of Changes
    AND str.sty_id = styId
    --Bug 4346646 -End of Changes
    AND nvl( str.purpose_code, 'ORIGIN') = pp;

    CURSOR l_strmele1_csr(stmid NUMBER)
    IS
    SELECT ele.id,
           ele.date_billed,
           ele.stream_element_date,
           ele.amount,
           ele.accrued_yn,
           ele.comments,
           ele.stm_id stm_id,
           ele.se_line_number se_line_number
    FROM  okl_strm_elements ele
    WHERE ele.stm_id = stmid
    ORDER BY ele.stream_element_date;

    CURSOR l_stmp_yn_csr(khrid NUMBER, p VARCHAR2) IS
    SELECT count(stm.id) cnt
    FROM   okl_streams	stm
    WHERE stm.khr_id = khrid
    AND stm.say_code = 'WORK'
    AND stm.sgn_code = 'STMP'
    AND nvl(stm.purpose_code, 'ORIGIN') = p;

    l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
    l_struct_rec                 l_struct_csr%ROWTYPE;
    l_strm_rec                   l_strm_csr%ROWTYPE;
    l_strmele_rec                l_strmele1_csr%ROWTYPE;
    l_line_rec                   l_line_rec_csr%ROWTYPE;
    l_rl_rec1                    l_rl_csr1%ROWTYPE;
    l_stmp_yn_rec                l_stmp_yn_csr%ROWTYPE;
    --Added for Streams Perf by kthiruva
    --Bug 4346646 - Start of Changes
    l_sty_id                     strm_rec_type;
    --Bug 4346646 - End of Changes
    --Added by kthiruva for Bug 4402229
    l_product_id                 NUMBER;
    --Added by kthiruva for handling the Advance Rent Streams esp for stub payments
    --Bug 4414441 - Start of Changes
    l_payment_rec                l_payment_csr%ROWTYPE;
    TYPE l_payment_tbl_type IS TABLE OF l_payment_csr%ROWTYPE INDEX BY BINARY_INTEGER;
    l_payment_tbl                l_payment_tbl_type;
    l_rent_amt_tbl               Okl_Streams_Util.NumberTabTyp;
    k                            NUMBER;
    l_next_position              NUMBER;
    --Bug 4414441 - End of Changes
  BEGIN
    print( l_api_name, 'begin');
    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);
    -- check if activity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       RAISE OKL_API.G_EXCEPTION_ERROR;
    End If;

    OPEN  l_stmp_yn_csr (TO_NUMBER(p_chr_id), p_purpose);
    FETCH l_stmp_yn_csr INTO l_stmp_yn_rec;
    CLOSE l_stmp_yn_csr;
    --Added by kthiruva on 01-Jun-2005
    --Bug 4402229 - Start of Changes
    --Fetching the contract details
    OPEN l_hdr_pdt_csr(p_chr_id);
    FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	  CLOSE l_hdr_pdt_csr;
    IF ( p_purpose = 'ORIGIN') THEN
       l_product_id  := l_pdt_id_rec.pid;
    ELSIF (p_purpose = 'REPORT') THEN
       l_product_id  := l_pdt_id_rec.report_pdt_id;
    END IF;
    --Added by kthiruva for Streams Performance
    --This call returns the id of the stream type of purpose 'RENT' in the contract's Stream Generation Template.
    get_primary_no_prc_stream_type
     (
      p_khr_id =>p_chr_id,
      p_pdt_id =>l_product_id,
      p_primary_sty_purpose =>'RENT',
      x_return_status => x_return_status,
      x_primary_sty_id =>l_sty_id
      );
    --Bug 4402229 - End of Changes
    --Looping through all the contract lines that have a structure payment defined on them
    --Initialising the counter variable k

    -- get the stream type id based on the type of the product
    IF(g_rep_req_yn = 'Y')
    THEN
      get_dep_no_prc_stream_type
      (
         p_khr_id =>p_chr_id,
         p_pdt_id =>l_pdt_id_rec.report_pdt_id,
         p_primary_sty_purpose=>'RENT',
         p_dependent_sty_purpose=>'ADVANCE_RENT',
         x_return_status => x_return_status,
         x_dependent_sty_id => styid
       );
       IF x_return_status = 'E' THEN
         x_return_status := 'S';
       END IF;
    ELSE
      get_dep_no_prc_stream_type
      (
        p_khr_id =>p_chr_id,
        p_pdt_id =>l_pdt_id_rec.pid,
        p_primary_sty_purpose=>'RENT',
        p_dependent_sty_purpose=>'ADVANCE_RENT',
        x_return_status => x_return_status,
        x_dependent_sty_id => styid
      );
      IF x_return_status = 'E' THEN
        x_return_status := 'S';
      END IF;
    END IF;

    FOR l_struct_rec IN l_struct_csr(TO_NUMBER(p_chr_id),l_sty_id.id)
    LOOP
      -- Bug 7653893 : RGOOTY
      IF l_struct_rec.sts_code = 'TERMINATED' AND
         l_stmp_yn_rec.cnt > 0  -- Stream Generation happening using ESG
      THEN
        -- Introduced Logic to handle the Advance Rentals of the Terminated Assets seperately.
        -- Requirement:
        --  For the Terminated Assets, Advance Rental Streams which are
        --   <= Termination Date should be copied over, rather than re-generating it again.
        --
        --  This copy over logic is actually handled in okl_la_stream_pvt.RECREATE_TMT_LN_STRMS
        --    This API currently copies all the Streams generated using ESG for the Terminated Assets
        --  As part of this bug 7653893, we will be modifying the okl_la_stream_pvt.RECREATE_TMT_LN_STRMS
        --   to consider the Advance_Rent streams also to copy over [as its currently ignoring those]
        --  Also modifying the create_advance_rental_streams API not to worry about the
        --   Advance Rental Streams Generation for the Terminated Assets in ESG contract.
        NULL;
      ELSE
        k := 0;
        l_payment_tbl.delete;
        l_structure := TO_NUMBER(l_struct_rec.structure);
        --Added by kthiruva on 04-Jul-2005
        --Bug 4414441 - Start of Changes
        --Fetching the payment lines
        FOR l_payment_rec IN l_payment_csr(chrId => TO_NUMBER(p_chr_id),
                                       styId => l_sty_id.id,
               kleId => l_struct_rec.line_id)
        LOOP
          l_payment_tbl(k) := l_payment_rec;
          k  := k + 1;
        END LOOP;
        -- If the structure exists then, the amount for the 1st element has to be copied
        --from the payments table for the Rent Streams
        IF (l_payment_tbl(0).stub_days is not null) AND (l_payment_tbl(0).period_in_months is null)
        THEN
          l_rent_amt_tbl(0) :=  l_payment_tbl(0).stub_amount;
        ELSE
          l_rent_amt_tbl(0) :=  l_payment_tbl(0).amount;
        END IF;
        --Fetching the values from the payment definition for the Last n elements where n refers
        --to the structure for Rent Streams
        --To fetch the values of the last n stream elements, we loop through the payment table
        --from LAST to FIRST
        k := l_payment_tbl.LAST;
        i := 1;
        WHILE (i <= l_structure  )
        LOOP
          WHILE (k >= l_payment_tbl.FIRST )
          LOOP
            --If the line is a stub payment,then we take the amount as it is and move to the previous line
            --in the payments table
            IF (l_payment_tbl(k).stub_days IS NOT NULL) AND (l_payment_tbl(k).period_in_months IS NULL)
            THEN
              l_rent_amt_tbl(l_structure - i + 1) := l_payment_tbl(k).stub_amount;
              k := k - 1;
              i := i + 1;
            ELSE
              --If the payment is periodic then we take the amount.We then check if the number of periods is
              --greater than 1. If so, the same line is used
              l_rent_amt_tbl(l_structure - i + 1) :=  l_payment_tbl(k).amount;
              i := i + 1;
              IF ( i > l_payment_tbl(k).period_in_months)
              THEN
                k := k - 1;
              END IF;
            END IF;
            --If the amounts of all the advance rent elements are derived then we exit the loop.
            IF (i > l_structure)
              THEN
              EXIT;
            END IF;
          END LOOP;
        END LOOP;
        --Bug 4414441 - End of Changes

        OPEN l_strm_csr (TO_NUMBER(p_chr_id),
                         l_struct_rec.line_id,
                         l_sty_id.id,
                         'WORK',
                         p_purpose);
        FETCH l_strm_csr into l_strm_rec;
        IF l_strm_csr%FOUND THEN
          l_stmv_rec.id     := l_strm_rec.id;
          -- Start of BUG# 3101439 modification
          --l_stmv_rec.active_yn := 'Y';
          -- End of BUG# 3101439 modification
          l_stmv_rec.date_current := sysdate;
          l_stmv_rec_adv_rentals.khr_id := TO_NUMBER(p_chr_id);
          l_stmv_rec_adv_rentals.kle_id := l_struct_rec.line_id;
          --l_stmv_rec_adv_rentals.say_code := 'CURR';
          l_stmv_rec_adv_rentals.say_code := 'WORK';
          IF (p_purpose = 'REPORT') THEN
            -- Start of BUG# 3101439 modification
            l_stmv_rec.active_yn := 'N';
            -- End of BUG# 3101439 modification
            l_stmv_rec_adv_rentals.active_yn := 'N';
            l_stmv_rec_adv_rentals.purpose_code := p_purpose;
          ELSE
            l_stmv_rec_adv_rentals.purpose_code := NULL;
            l_stmv_rec_adv_rentals.active_yn := 'N';
            -- Start of BUG# 3101439 modification
            l_stmv_rec.active_yn := 'N';
            -- End of BUG# 3101439 modification
          END IF;
          l_stmv_rec_adv_rentals.date_working := sysdate;
          l_stmv_rec_adv_rentals.transaction_number := l_strm_rec.transaction_number;
          l_stmv_rec_adv_rentals.sgn_code := 'MANL';
          i := 0;
          FOR l_strmele_rec IN l_strmele1_csr ( l_strm_rec.id) LOOP
            i := i + 1;
            l_selv_tbl(i).id := l_strmele_rec.id;
            l_selv_tbl(i).date_billed := l_strmele_rec.date_billed;
            l_selv_tbl(i).stream_element_date := l_strmele_rec.stream_element_date;
            l_selv_tbl(i).amount := l_strmele_rec.amount;
            l_selv_tbl(i).accrued_yn := l_strmele_rec.accrued_yn;
            l_selv_tbl(i).comments := l_strmele_rec.comments;
            l_selv_tbl(i).se_line_number := l_strmele_rec.se_line_number;
            l_selv_tbl(i).stm_id := l_strmele_rec.STM_ID;
          END LOOP;
          -- arajagop : the following calculation is needed for ESG
          -- where the RENT stream itself comes adjusted (8000, 4000, 0) say for a
          -- 4000 Advance First and  Last payment
          j := 1;
          l_pay_amount := 0;
          --Added by kthiruva on 04-Jul-2005 for the Advance Rent Fix
          --Bug 4414441 - Start of Changes
          k := 1;
          l_pay_amount := 0;
          IF (l_stmp_yn_rec.cnt > 0) THEN
            --Assign the value for the first rent stream element from the rent amount table populated
            l_selv_tbl(1).amount := l_rent_amt_tbl(0);
          END IF;
          --Bug 4414441 - End of Changes

          l_selv_tbl_adv_rentals(j).accrued_yn := l_selv_tbl(1).accrued_yn;
          l_selv_tbl_adv_rentals(j).stream_element_date := l_selv_tbl(1).stream_element_date;
          l_selv_tbl_adv_rentals(j).se_line_number := j; --l_selv_tbl(i).SE_LINE_NUMBER;
          l_selv_tbl_adv_rentals(j).comments := l_selv_tbl(1).comments;
          FOR i IN (l_selv_tbl.COUNT-l_structure+1)..l_selv_tbl.COUNT LOOP
            j := j + 1;
            IF (l_stmp_yn_rec.cnt > 0) THEN
              --Modified by kthriuva on 04-Jul-2005
              --Bug 4414441 - Start of Changes
              --Assign the values derived from the payment plan cursor to the last n stream elements for Rent
              l_selv_tbl(i).amount := l_rent_amt_tbl(k);
              l_selv_tbl_adv_rentals(j).amount := -1.0 * l_rent_amt_tbl(k);
              l_pay_amount := l_pay_amount+ l_rent_amt_tbl(k);
              k := k + 1;
              --Bug 4414441 - End of Changes
            ELSE
              -- sum up this value and store it for ISG first element
              l_pay_amount := l_pay_amount + l_selv_tbl(i).amount;
              -- store the same value as negative of the stream element value
              l_selv_tbl_adv_rentals(j).amount := -1.0 * l_selv_tbl(i).amount;
            END IF;
            l_selv_tbl_adv_rentals(j).accrued_yn := l_selv_tbl(i).accrued_yn;
            l_selv_tbl_adv_rentals(j).stream_element_date := l_selv_tbl(i).stream_element_date;
            l_selv_tbl_adv_rentals(j).date_billed := l_selv_tbl(i).date_billed;
            l_selv_tbl_adv_rentals(j).se_line_number := j; --l_selv_tbl(i).se_line_number;
            l_selv_tbl_adv_rentals(j).comments := l_selv_tbl(i).comments;
          END LOOP;
          IF (l_stmp_yn_rec.cnt > 0) THEN
            --Added by kthiruva on 04-Jul-2005
            --Bug 4414441 - Start of Changes
            --Assigning the value of the sum of the last n element amounts to the first advance rent stream
            l_selv_tbl_adv_rentals(1).amount := l_pay_amount;
            --Bug 4414441 - End of Changes
            -- update the rent streams for ESG to reflect uniform rental payment
            okl_streams_pub.update_streams(
                           p_api_version   => l_api_version
                          ,p_init_msg_list => p_init_msg_list
                          ,x_return_status => x_return_status
                          ,x_msg_count     => x_msg_count
                          ,x_msg_data      => x_msg_data
                          ,p_stmv_rec      => l_stmv_rec
                          ,p_selv_tbl      => l_selv_tbl
                          ,x_stmv_rec      => x_stmv_rec
                          ,x_selv_tbl      => x_selv_tbl);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          ELSE
             -- FOR ISG store the value for the first element alone
             -- as the sum of all the elements based on the structure (1,2,3)
             l_selv_tbl_adv_rentals(1).amount := l_pay_amount;
          END IF;

          l_stmv_rec_adv_rentals.sty_id := styid.id;
          okl_streams_pub.create_streams(
                           p_api_version   => l_api_version
                          ,p_init_msg_list => p_init_msg_list
                          ,x_return_status => x_return_status
                          ,x_msg_count     => x_msg_count
                          ,x_msg_data      => x_msg_data
                          ,p_stmv_rec      => l_stmv_rec_adv_rentals
                          ,p_selv_tbl      => l_selv_tbl_adv_rentals
                          ,x_stmv_rec      => x_stmv_rec
                          ,x_selv_tbl      => x_selv_tbl);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          l_selv_tbl.DELETE(1, l_selv_tbl.COUNT);
          l_selv_tbl_adv_rentals.DELETE(1, l_selv_tbl_adv_rentals.COUNT);
          l_stmv_rec := NULL;
          l_stmv_rec_adv_rentals := NULL;
  /* Dont raise any exceptions if you dont find any thing for rent streams ..
      ELSE
         RAISE OKL_API.G_EXCEPTION_ERROR;
  */
        END IF;
        CLOSE l_Strm_csr;
      END IF;
    END LOOP;
    --Bug 4346646 - End of Changes

    print( l_api_name, 'end', x_return_status);
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data   => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
        p_api_name  => l_api_name,
        p_pkg_name  => g_pkg_name,
        p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
        x_msg_count => x_msg_count,
        x_msg_data  => x_msg_data,
        p_api_type  => g_api_type);
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
        p_api_name  => l_api_name,
        p_pkg_name  => g_pkg_name,
        p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count => x_msg_count,
        x_msg_data  => x_msg_data,
        p_api_type  => g_api_type);
      If( strm_name_csr%ISOPEN ) Then
          CLOSE strm_name_csr;
      End If;
    WHEN OTHERS THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
        p_api_name  => l_api_name,
        p_pkg_name  => g_pkg_name,
        p_exc_name  => 'OTHERS',
        x_msg_count => x_msg_count,
        x_msg_data  => x_msg_data,
        p_api_type  => g_api_type);
  End create_advance_rental_streams;

-- End modification 11i10 bakuchib
-- Start modification Bug#3121708 bakuchib
  Procedure update_contract_yields(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status   OUT NOCOPY VARCHAR2,
            x_msg_count       OUT NOCOPY NUMBER,
            x_msg_data        OUT NOCOPY VARCHAR2,
            p_chr_id          IN  VARCHAR2,
            p_chr_yields      IN  yields_rec_type) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'UPDATE_CONTRACT_YIELDS';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

    pl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    pl_khrv_rec okl_contract_pvt.khrv_rec_type;
    xl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    xl_khrv_rec okl_contract_pub.khrv_rec_type;

    l_trxH_in_rec        Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    l_trxH_out_rec       Okl_Trx_Contracts_Pvt.tcnv_rec_type;

    i NUMBER;
    l_tcnCode VARCHAR2(256);
    l_transaction_type VARCHAR2(256) := 'Miscellaneous';--'Generate Yields';

    l_fnd_rec fnd_lookups_csr%ROWTYPE;
    l_trx_rec trx_csr%ROWTYPE;
    l_hdr_rec l_hdr_csr%ROWTYPE;

    l_chr_id NUMBER := TO_NUMBER(p_chr_id);
    ln_sub_exists      NUMBER := 0;
    ln_esg_isg         NUMBER := 0;

    -- Validate weather the stream generation is done thru internal/external stream generation
    CURSOR validate_esg_isg (p_dnz_chr_id OKC_K_LINES_B.DNZ_CHR_ID%TYPE)
    IS
    SELECT 1
    FROM dual
    WHERE EXISTS (SELECT 1
                  FROM okl_streams
                  WHERE khr_id= p_dnz_chr_id
                  AND say_code = 'WORK'
                  AND sgn_code = 'STMP');
    -- Validate the contract has Subsidy line
    CURSOR validate_sub_line (p_dnz_chr_id OKC_K_LINES_B.DNZ_CHR_ID%TYPE)
    IS
    SELECT 1
    FROM dual
    WHERE EXISTS (SELECT '1'
                  FROM okl_subsidies_b subb,
                       okc_k_lines_b cle_fin,
                       okc_line_styles_b lse_fin,
                       okc_k_lines_b cle,
                       okl_k_headers khr,
                       okl_k_lines kle,
                       okc_line_styles_b lse
                  WHERE cle.dnz_chr_id = p_dnz_chr_id
                  AND cle.dnz_chr_id = khr.id
                  AND khr.deal_type IN ('LEASEDF','LEASEOP','LEASEST','LOAN')
                  AND cle.cle_id = cle_fin.id
                  AND cle.dnz_chr_id = cle_fin.dnz_chr_id
                  AND cle.id = kle.id
                  AND cle.lse_id = lse.id
                  AND lse.lty_code = 'SUBSIDY'
                  AND subb.id = kle.subsidy_id
                  AND cle_fin.id = cle.cle_id
                  AND cle_fin.lse_id = lse_fin.id
                  AND lse_fin.lty_code = 'FREE_FORM1');
  begin

    print( l_api_name, 'begin');

    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);

    -- check if activity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    OPEN  validate_sub_line(p_dnz_chr_id => l_chr_id);
    FETCH validate_sub_line INTO ln_sub_exists;
    CLOSE validate_sub_line;
--Start of modifcation BAKUCHIB
-- If the contract has Subsidy line then now we are populating
-- Sub yield record of the okl_k_headers with regular yield's
-- given by super trump/Internal stream generation
    OPEN  validate_esg_isg(p_dnz_chr_id => l_chr_id);
    FETCH validate_esg_isg INTO ln_esg_isg;
    CLOSE validate_esg_isg;
    IF ln_sub_exists = 1 THEN
      print( l_api_name, ' contract # subsidy ' || to_char( l_chr_id ));
      pl_chrv_rec.id     := l_chr_id;
      pl_khrv_rec.id     := l_chr_id;
      --Start of modifcation Bug#3254058 BAKUCHIB
      -- Depending on the value of ln_esg_isg we decide weather stream generated by extrenal/internal
      IF ln_esg_isg = 1  THEN
        pl_khrv_rec.sub_pre_tax_yield := TRUNC(p_chr_yields.sub_pre_tax_yield*100.00,3);
        pl_khrv_rec.sub_after_tax_yield := TRUNC(p_chr_yields.sub_after_tax_yield*100.00,3);
        pl_khrv_rec.sub_pre_tax_irr := TRUNC(p_chr_yields.sub_pre_tax_irr*100.00,3);
        pl_khrv_rec.sub_after_tax_irr := TRUNC(p_chr_yields.sub_after_tax_irr*100.00,3);
        --Bug 4687692 dpsingh
	pl_khrv_rec.sub_impl_interest_rate := TRUNC(p_chr_yields.sub_impl_interest_rate*100.00,3);
	--Bug 4687692 end
        pl_khrv_rec.pre_tax_yield := TRUNC(p_chr_yields.pre_tax_yield*100.00,3);
        pl_khrv_rec.after_tax_yield := TRUNC(p_chr_yields.after_tax_yield*100.00,3);
        pl_khrv_rec.pre_tax_irr := TRUNC(p_chr_yields.pre_tax_irr*100.00,3);
        pl_khrv_rec.after_tax_irr := TRUNC(p_chr_yields.after_tax_irr*100.00,3);
        pl_khrv_rec.implicit_interest_rate := TRUNC(p_chr_yields.implicit_interest_rate*100.00,3);
      ELSIF ln_esg_isg = 0 THEN
        pl_khrv_rec.sub_pre_tax_yield := TRUNC(p_chr_yields.sub_pre_tax_yield*100.00,3);
        pl_khrv_rec.sub_after_tax_yield := TRUNC(p_chr_yields.sub_after_tax_yield*100.00,3);
        pl_khrv_rec.sub_pre_tax_irr := TRUNC(p_chr_yields.sub_pre_tax_irr*100.00,3);
        pl_khrv_rec.sub_after_tax_irr := TRUNC(p_chr_yields.sub_after_tax_irr*100.00,3);
        pl_khrv_rec.sub_impl_interest_rate := TRUNC(p_chr_yields.sub_impl_interest_rate*100.00,3);
        pl_khrv_rec.pre_tax_yield := TRUNC(p_chr_yields.pre_tax_yield*100.00,3);
        pl_khrv_rec.after_tax_yield := TRUNC(p_chr_yields.after_tax_yield*100.00,3);
        pl_khrv_rec.pre_tax_irr := TRUNC(p_chr_yields.pre_tax_irr*100.00,3);
        pl_khrv_rec.after_tax_irr := TRUNC(p_chr_yields.after_tax_irr*100.00,3);
        pl_khrv_rec.implicit_interest_rate := TRUNC(p_chr_yields.implicit_interest_rate*100.00,3);
      END IF;
      --End of modifcation Bug#3254058 BAKUCHIB
    ELSIF ln_sub_exists = 0 THEN
      print( l_api_name, ' contract # ' || to_char( l_chr_id ));
      pl_chrv_rec.id     := l_chr_id;
      pl_khrv_rec.id     := l_chr_id;
      pl_khrv_rec.pre_tax_yield := TRUNC(p_chr_yields.pre_tax_yield*100.00,3);
      pl_khrv_rec.after_tax_yield := TRUNC(p_chr_yields.after_tax_yield*100.00,3);
      pl_khrv_rec.pre_tax_irr := TRUNC(p_chr_yields.pre_tax_irr*100.00,3);
      pl_khrv_rec.after_tax_irr := TRUNC(p_chr_yields.after_tax_irr*100.00,3);
      pl_khrv_rec.implicit_interest_rate := TRUNC(p_chr_yields.implicit_interest_rate*100.00,3);
      pl_khrv_rec.sub_pre_tax_yield := NULL;
      pl_khrv_rec.sub_after_tax_yield := NULL;
      pl_khrv_rec.sub_pre_tax_irr := NULL;
      pl_khrv_rec.sub_after_tax_irr := NULL;
      pl_khrv_rec.sub_impl_interest_rate := NULL;
    END IF;
--End of modifcation BAKUCHIB
    okl_contract_pvt.update_contract_header(
                 p_api_version       => p_api_version,
                 p_init_msg_list     => p_init_msg_list,
                 x_return_status     => x_return_status,
                 x_msg_count         => x_msg_count,
                 x_msg_data          => x_msg_data,
                 p_restricted_update => OKL_API.G_FALSE,
                 p_chrv_rec          => pl_chrv_rec,
                 p_khrv_rec          => pl_khrv_rec,
                 p_edit_mode         => 'N',
                 x_chrv_rec          => xl_chrv_rec,
                 x_khrv_rec          => xl_khrv_rec);


    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;


    print( l_api_name, 'end', x_return_status);

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception
	when OKL_API.G_EXCEPTION_ERROR then
          IF validate_sub_line%ISOPEN THEN
            CLOSE validate_sub_line;
          END IF;
          IF validate_esg_isg%ISOPEN THEN
            CLOSE validate_esg_isg;
          END IF;
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
          IF validate_sub_line%ISOPEN THEN
            CLOSE validate_sub_line;
          END IF;
          IF validate_esg_isg%ISOPEN THEN
            CLOSE validate_esg_isg;
          END IF;
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;

	when OTHERS then
          IF validate_sub_line%ISOPEN THEN
            CLOSE validate_sub_line;
          END IF;
          IF validate_esg_isg%ISOPEN THEN
            CLOSE validate_esg_isg;
          END IF;
             	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;

  end update_contract_yields;
-- Start modification Bug#3121708 bakuchib
-- gboomina BUG#4508077 added p_source_call as a parameter
  Procedure adjust_streams(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status   OUT NOCOPY VARCHAR2,
            x_msg_count       OUT NOCOPY NUMBER,
            x_msg_data        OUT NOCOPY VARCHAR2,
            p_chr_id          IN  VARCHAR2,
            p_purpose          IN  VARCHAR2,
	    p_source_call     IN  VARCHAR2) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'ADJUST_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

    pl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    pl_khrv_rec okl_contract_pvt.khrv_rec_type;
    xl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    xl_khrv_rec okl_contract_pub.khrv_rec_type;

    l_trxH_in_rec        Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    l_trxH_out_rec       Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
    l_strm_rec  strm_csr%ROWTYPE;
    l_strms_rec strms_csr%ROWTYPE;

    l_stmv_tbl okl_streams_pub.stmv_tbl_type;
    x_stmv_tbl okl_streams_pub.stmv_tbl_type;
    l_selv_tbl Okl_Streams_pub.selv_tbl_type;
    x_selv_tbl Okl_Streams_pub.selv_tbl_type;

    -- Code for bulk update -02/28/2004 - HKPATEL
    l_id_tbl okl_streams_util.NumberTabTyp;
	l_say_code_tbl okl_streams_util.Var10TabTyp;
	l_active_yn_tbl okl_streams_util.Var10TabTyp;
	l_date_history_tbl okl_streams_util.DateTabTyp;
	l_date_curr_tbl okl_streams_util.DateTabTyp;

	-- Code for bulk update ends here -02/28/2004 - HKPATEL


    i NUMBER;
    j NUMBER;
    l_tcnCode VARCHAR2(256);
    l_transaction_type VARCHAR2(256) := 'Miscellaneous';--'Generate Yields';

    l_fnd_rec fnd_lookups_csr%ROWTYPE;
    l_trx_rec trx_csr%ROWTYPE;
    l_hdr_rec l_hdr_csr%ROWTYPE;

    l_strm_name_rec  strm_name_csr%ROWTYPE;
    l_strm_name VARCHAR2(256);

    l_chr_id NUMBER := TO_NUMBER(p_chr_id);

--  Changed this cursor for user defined streams
    Cursor l_secdep_csr( chrId NUMBER,pdtId NUMBER, pp VARCHAR2 ) is
    Select ele.id
    From  okl_strm_elements ele,
          okl_streams str,
          --okl_strm_type_v sty,
		  OKL_STRM_TMPT_LINES_UV sty,
          okl_k_lines_full_v kle,
          okc_line_styles_b lse,
	  okc_statuses_b sts
    Where ele.stm_id = str.id
         and str.khr_id = chrId
         and str.kle_id = kle.id
         and str.sty_id = sty.primary_sty_id
         --and sty.name = 'SECURITY DEPOSIT'
		 and sty.primary_sty_purpose = 'SECURITY_DEPOSIT'
		 and sty.pdt_id = pdtId
         and str.say_code = 'CURR'
         and nvl(str.purpose_code, 'ORIGIN') =  pp
         --and str.active_yn = 'Y'  --sechawla 10-nov-09 9001318 : commented out
         and KLE.LSE_ID = LSE.ID
         and KLE.fee_type = 'SECDEPOSIT'
         and lse.lty_code = 'FEE'
         and kle.dnz_chr_id = str.khr_id
	 and sts.code = kle.sts_code
--Start of bug#3121708 modification BAKUCHIB
	 and sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED')
--End of bug#3121708 modification BAKUCHIB
         and ele.amount < 0
    Order By ele.stream_element_date;

    l_secdep_rec l_secdep_csr%ROWTYPE;

     CURSOR l_stmp_yn_csr(khrid NUMBER, p VARCHAR2) IS
     SELECT count(stm.id) cnt
     FROM   okl_streams	stm
     WHERE stm.khr_id        = khrid
        AND stm.say_code     = 'WORK'
        AND stm.sgn_code     = 'STMP'
        AND nvl(stm.purpose_code, 'ORIGIN') = p;

     l_stmp_yn_rec l_stmp_yn_csr%ROWTYPE;
     -- added for bugfix 4034007
     CURSOR l_report_deal_csr (product_id number) IS
     select value
     from okl_pdt_pqy_vals_uv
     where name = 'LEASE' and pdt_id = product_id;
     l_rep_pdt_deal_type VARCHAR2(10);
     l_deal_type VARCHAR2(10);
     l_origin_purpose VARCHAR2(10);

	-- Cursor for rebook enhancement - HKPATEL - 4212626
	l_hist_flag VARCHAR2(1) := 'Y';
     CURSOR bill_strm_hist_csr(chrId NUMBER,
                               styId NUMBER,
                               status VARCHAR2,
                               pp VARCHAR2 )
     IS

     SELECT 'N'
     FROM OKL_STREAMS str
     WHERE EXISTS (SELECT ID FROM OKL_STRM_ELEMENTS ele WHERE ele.STM_ID = str.ID AND ele.DATE_BILLED IS NULL )
     AND str.KHR_ID = chrId
     AND str.STY_ID = styId
     AND str.SAY_CODE = status
     AND nvl(str.purpose_code, 'ORIGIN') = pp;
	-- Cursor for rebook enhancement ends here - HKPATEL



  begin

    --Added by kthiruva for Debugging
    write_to_log('Inside procedure adjust_Streams');

    print( l_api_name, 'begin');
    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);
    -- check if activity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    OPEN l_hdr_pdt_csr(p_chr_id);
    FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
    CLOSE l_hdr_pdt_csr;

    OPEN  l_stmp_yn_csr( TO_NUMBER(p_chr_id), p_purpose);
    FETCH l_stmp_yn_csr INTO l_stmp_yn_rec;
    CLOSE l_stmp_yn_csr;
    If ( l_stmp_yn_rec.cnt > 0 ) Then

        OPEN l_hdr_csr( p_chr_id );
        FETCH l_hdr_csr INTO l_hdr_rec;
        CLOSE l_hdr_csr;
         -- added for bugfix 4034007
        if (p_purpose = 'ORIGIN') then
            l_origin_purpose := '-99';
            l_deal_type := l_hdr_rec.deal_type;
        else
            l_origin_purpose := p_purpose;

            OPEN l_report_deal_csr( l_hdr_rec.report_pdt_id );
            FETCH l_report_deal_csr INTO l_rep_pdt_deal_type;
            CLOSE l_report_deal_csr;

            l_deal_type := l_rep_pdt_deal_type;
        end if;

     -- gboomina BUG#4508077 start - generating IDC streams only for ISG
     IF(p_source_call = 'ISG') THEN
        OKL_EXPENSE_STREAMS_PVT.generate_idc(
                      p_khr_id         => p_chr_id,
                      p_purpose_code   => l_origin_purpose,
                      p_currency_code  => l_hdr_rec.currency_code,
                      p_start_date     => l_hdr_rec.start_date,
                      p_end_date       => l_hdr_rec.end_date,
                      p_deal_type      => l_deal_type,
                      x_return_status  => x_return_status);
        If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
            raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
            raise OKL_API.G_EXCEPTION_ERROR;
        End If;
     END IF;
     -- gboomina BUG#4508077 end
    END IF;
    --Added by kthiruva for Debugging
    write_To_log('Prior to the call to OKL_STREAM_GENERATOR_PUB.GEN_VAR_INT_SCHEDULE');
    OKL_STREAM_GENERATOR_PUB.GEN_VAR_INT_SCHEDULE(
                                   p_api_version         => p_api_version,
                                   p_init_msg_list       => p_init_msg_list,
                                   p_khr_id              => p_chr_id,
				   p_purpose_code        => p_purpose,
                                   x_return_status       => x_return_status,
                                   x_msg_count           => x_msg_count,
                                   x_msg_data            => x_msg_data);

    --Added by kthiruva for Debugging
    write_to_log('After the call to OKL_STREAM_GENERATOR_PUB.GEN_VAR_INT_SCHEDULE, return status is :'||x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      raise OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Added by HKPATEL for mass rebook fix
	/*
	Commented by HKPATEL for bug 4212626
    adjust_massrebook_streams(p_api_version     => p_api_version,
                              p_init_msg_list   => p_init_msg_list,
                              x_return_status   => x_return_status,
                              x_msg_count       => x_msg_count,
                              x_msg_data        => x_msg_data,
                              p_chr_id          => p_chr_id,
                              p_purpose         => p_purpose);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      raise OKL_API.G_EXCEPTION_ERROR;
    END IF;
    */

  -- Code for rebook enhancement - HKPATEL	- 4212626
     --Added by kthiruva for Debugging
     write_to_log('Prior to the call to create_advance_rental_streams');
     create_advance_rental_streams(
            p_api_version       => p_api_version,
            p_init_msg_list     => p_init_msg_list,
            x_return_status     => x_return_status,
            x_msg_count         => x_msg_count,
            x_msg_data          => x_msg_data,
            p_chr_id            => l_chr_id,
	        p_purpose           => p_purpose);

    --Added by kthiruva for Debugging
    write_to_log('After the call to create_advance_rental_streams, return status is :'||x_return_status);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      raise OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --Added by kthiruva for Debugging
    write_to_log('Prior to the call to adjust_passthrough_streams ');
    adjust_passthrough_streams(
                         p_api_version   => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count     => x_msg_count,
                         x_msg_data      => x_msg_data,
                         p_chr_id        => p_chr_id,
                         p_purpose       => p_purpose);

    --Added by kthiruva for Debugging
    write_to_log('After the call to adjust_passthrough_streams, return status is :'||x_return_status);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

  	--Added by kthiruva for Debugging
    write_to_log('Prior to the call to OKL_CONTRACT_REBOOK_PVT.link_streams');
	OKL_CONTRACT_REBOOK_PVT.link_streams(
                        p_api_version => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count => x_msg_count,
                        x_msg_data => x_msg_data,
                        p_khr_id => p_chr_id);

    --Added by kthiruva for Debugging
    write_to_log('After the call to OKL_CONTRACT_REBOOK_PVT.link_streams, return status is :'||x_return_status);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
  -- Code for rebook enhancement ends here - HKPATEL

    i := 0;
    FOR  l_strms_rec in strms_csr ( l_chr_id, 'CURR', p_purpose )
    LOOP
	-- code change for rebook enhancement - HKPATEL-4212626
	    l_hist_flag := 'Y';
        OPEN  strm_name_csr ( l_strms_rec.sty_id );
        FETCH strm_name_csr into l_strm_name_rec;
		IF strm_name_csr%NOTFOUND THEN
            CLOSE strm_name_csr;
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_strm_name_rec.name = 'BILLING ADJUSTMENT') THEN
		  OPEN bill_strm_hist_csr(l_chr_id,l_strms_rec.sty_id,'CURR',p_purpose);
		  FETCH bill_strm_hist_csr into l_hist_flag;
		  IF bill_strm_hist_csr%NOTFOUND THEN
            CLOSE bill_strm_hist_csr;
		  END IF;
		END IF;
        CLOSE strm_name_csr;

	-- code change for rebook enhancement ends here- HKPATEL

        OPEN  strm_name_csr ( l_strms_rec.sty_id );
        FETCH strm_name_csr into l_strm_name_rec;

		IF strm_name_csr%NOTFOUND THEN
            CLOSE strm_name_csr;
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;

	ELSIF (l_strm_name_rec.stream_type_purpose NOT IN (
                       'INVESTOR_CNTRCT_OBLIGATION_PAY', 'INVESTOR_DISB_ADJUSTMENT',
                       'INVESTOR_EVERGREEN_RENT_PAY', 'INVESTOR_INTEREST_INCOME',
                       'INVESTOR_INTEREST_PAYABLE', 'INVESTOR_LATE_FEE_PAYABLE',
                       'INVESTOR_LATE_INTEREST_PAY', 'INVESTOR_PAYABLE',
                       'INVESTOR_PRETAX_INCOME', 'INVESTOR_PRINCIPAL_PAYABLE',
                       'INVESTOR_RECEIVABLE', 'INVESTOR_RENTAL_ACCRUAL',
                       'INVESTOR_RENT_BUYBACK', 'INVESTOR_RENT_DISB_BASIS',
                       'INVESTOR_RENT_PAYABLE', 'INVESTOR_RESIDUAL_BUYBACK',
                       'INVESTOR_RESIDUAL_DISB_BASIS', 'INVESTOR_RESIDUAL_PAY',
                       'INVESTOR_VARIABLE_INTEREST', 'PV_RENT_SECURITIZED',
                       'PV_RV_SECURITIZED')
                        -- INVESTOR_CNTRCT_OBLIGATION_PAY' --'INVESTOR_CONTRACT_OBLIGATION_PAYABLE'
                       --  ,'INVESTOR_RESIDUAL_PAY' ) --'INVESTOR_RESIDUAL_PAYABLE')

               --Condition added by kthiruva for Bug 4737555 .Streams generated by Interest Calc Prog should not be historised
               AND (l_strms_rec.SGN_CODE NOT IN ('INTC','LATE_CALC')) -- bug 6472228
               AND l_hist_flag = 'Y') THEN
            i := i + 1;
            print( l_api_name, 'to HIST STMID:' || to_char(l_strm_rec.strm_id ));
			-- Code commented and added for bulk update by HKPATEL - 02/28/2005
			/*
            l_stmv_tbl(i).id := l_strms_rec.STRM_ID;
            l_stmv_tbl(i).say_code := 'HIST';
            l_stmv_tbl(i).active_yn := 'N';
            l_stmv_tbl(i).date_history := sysdate;
			*/

            l_id_tbl(i):= l_strms_rec.STRM_ID;
	        l_say_code_tbl(i) := 'HIST';
			l_active_yn_tbl(i) := 'N';
			l_date_history_tbl(i) := sysdate;
			l_date_curr_tbl(i) := l_strms_rec.date_current;
			-- Code commented and added ends here for bulk update by HKPATEL - 02/28/2005


        END IF;
        CLOSE strm_name_csr;

    END LOOP;
    FOR l_strms_rec in strms_csr ( l_chr_id, 'WORK', p_purpose)
    LOOP
        OPEN  strm_name_csr ( l_strms_rec.sty_id );
        FETCH strm_name_csr into l_strm_name_rec;
        IF strm_name_csr%NOTFOUND THEN
            CLOSE strm_name_csr;
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        CLOSE strm_name_csr;
		-- Code commented and added for use defined streams
        --l_strm_name := l_strm_name_rec.name;
		l_strm_name := l_strm_name_rec.stream_type_purpose;


        -- Added and commented code ends here.
        i := i + 1;
        print( l_api_name, 'to CURR STMID:' || to_char(l_strms_rec.strm_id ));
		-- Code for bulk update -02/28/2004 - HKPATEL
        l_id_tbl(i):= l_strms_rec.STRM_ID;
	    l_say_code_tbl(i) := 'CURR';
		l_date_curr_tbl(i) := sysdate;
		l_date_history_tbl(i) := NULL;

        --l_stmv_tbl(i).id := l_strms_rec.STRM_ID;
        --l_stmv_tbl(i).say_code := 'CURR';


    	-- Code for bulk update ends here -02/28/2004 - HKPATEL

-- code added and commented for user defined streams
/*
        If (( l_strm_name = 'FEDERAL DEPRECIATION' ) OR
            ( l_strm_name = 'STATE DEPRECIATION' ) OR
            ( l_strm_name = 'BOOK DEPRECIATION' ))  THEN
*/
        If (( l_strm_name = 'FEDERAL_DEPRECIATION' ) OR
            ( l_strm_name = 'STATE_DEPRECIATION' ) OR
            ( l_strm_name = 'BOOK_DEPRECIATION' ))  THEN

            --l_stmv_tbl(i).active_yn := 'N';
			l_active_yn_tbl(i) := 'N';
        Else
            --l_stmv_tbl(i).active_yn := 'Y';
			l_active_yn_tbl(i) := 'Y';
        End If;

        If ( p_purpose = 'REPORT')  THEN
            --l_stmv_tbl(i).active_yn := 'N';
			l_active_yn_tbl(i) := 'N';
        Else
            --l_stmv_tbl(i).active_yn := 'Y';
			l_active_yn_tbl(i) := 'Y';
        End If;

        --l_stmv_tbl(i).date_current := sysdate;


    END LOOP;
    If ( l_id_tbl.COUNT > 0 ) Then
   /* Commented for Bulk update by HKPATEL -02/18/2005
   If ( l_stmv_tbl.COUNT > 0 ) Then
        Okl_Streams_pub.update_streams(
                         p_api_version => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count => x_msg_count,
                         x_msg_data => x_msg_data,
                         p_stmv_tbl => l_stmv_tbl,
                         x_stmv_tbl => x_stmv_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      raise OKL_API.G_EXCEPTION_ERROR;
    END IF;
	Commented code for Bulk update ends here by HKPATEL -02/18/2005 */

	-- Bulk update
	BEGIN
      --Added by kthiruva for Debugging
      write_to_log('Prior to the Historing of Current streams and updation of Work streams to current');

	  FORALL i IN l_id_tbl.FIRST..l_id_tbl.LAST
		UPDATE OKL_STREAMS
		SET 	say_code = l_say_code_tbl(i),
		active_yn = l_active_yn_tbl(i),
		date_history = l_date_history_tbl(i),
		date_current = l_date_curr_tbl(i)
		WHERE 	ID = l_id_tbl(i);

     --Added by kthiruva for Debugging
     write_to_log('Statuses updated successfully');

             -- Added by mansrini for bug 4728636 (G bug 4520466)
             IF p_purpose <> 'REPORT' THEN
	       OKL_BILLING_CONTROLLER_PVT.track_next_bill_date(p_chr_id);
             END IF;
	     -- end changes
     --Added by kthiruva for Debugging
     write_to_log('After the call to OKL_BILLING_CONTROLLER_PVT.track_next_bill_date');

	EXCEPTION
		WHEN OTHERS THEN
		      okl_api.set_message (p_app_name     => G_APP_NAME,
                           p_msg_name     => G_DB_ERROR,
                           p_token1       => G_PROG_NAME_TOKEN,
                           p_token1_value => l_api_name,
                           p_token2       => G_SQLCODE_TOKEN,
                           p_token2_value => sqlcode,
                           p_token3       => G_SQLERRM_TOKEN,
                           p_token3_value => sqlerrm);
		   l_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;
		   raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
	END;

	-- Bulk update ends here

     End If;
	 /* Changed the position of code for bug 4212626
     create_advance_rental_streams(
            p_api_version       => p_api_version,
            p_init_msg_list     => p_init_msg_list,
            x_return_status     => x_return_status,
            x_msg_count         => x_msg_count,
            x_msg_data          => x_msg_data,
            p_chr_id            => l_chr_id,
	    p_purpose           => p_purpose);


    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      raise OKL_API.G_EXCEPTION_ERROR;
    END IF;
    */
     OPEN  l_hdr_csr( l_chr_id);
     FETCH l_hdr_csr INTO l_hdr_rec;

     IF l_hdr_csr%NOTFOUND THEN
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     Elsif (l_hdr_rec.orig_system_source_code = 'OKL_REBOOK') Then
	   NULL;
	 /* Changed the position of code for bug 4212626
         create_interim_rental_streams(
                p_api_version       => p_api_version,
                p_init_msg_list     => p_init_msg_list,
                x_return_status     => x_return_status,
                x_msg_count         => x_msg_count,
                x_msg_data          => x_msg_data,
                p_chr_id            => l_chr_id,
                p_purpose           => p_purpose);

         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         END IF;
	 */
     END IF;
     CLOSE l_hdr_csr;

/*
 *   get rid of return negative stream value for Security Deposit.
 */
     l_selv_tbl.delete(1, l_selv_tbl.COUNT );
     i := 0;
	 IF(g_rep_req_yn = 'Y') THEN
       FOR l_secdep_rec in l_secdep_csr ( p_chr_id,l_pdt_id_rec.report_pdt_id, p_purpose )
       LOOP

           i := i + 1;
           l_selv_tbl(i).id := l_secdep_rec.ID;

       END LOOP;
	 ELSE
       FOR l_secdep_rec in l_secdep_csr ( p_chr_id,l_pdt_id_rec.pid, p_purpose )
       LOOP

           i := i + 1;
           l_selv_tbl(i).id := l_secdep_rec.ID;

       END LOOP;

	 END IF;


     If ( i > 0 ) Then

          Okl_Streams_pub.delete_stream_elements(
                     p_api_version => p_api_version,
                     p_init_msg_list => p_init_msg_list,
                     x_return_status => x_return_status,
                     x_msg_count => x_msg_count,
                     x_msg_data => x_msg_data,
                     p_selv_tbl => l_selv_tbl);


             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                 RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                 RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
      End If;
	 /* Changed the position of code for bug 4212626
      adjust_passthrough_streams(
                         p_api_version   => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count     => x_msg_count,
                         x_msg_data      => x_msg_data,
                         p_chr_id        => p_chr_id,
                         p_purpose       => p_purpose);


       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
      */
       x_return_status := l_return_status;

    print( l_api_name, 'end', x_return_status);

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception
	when OKL_API.G_EXCEPTION_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                If ( strm_csr%ISOPEN ) Then
                    CLOSE strm_csr;
                End If;

                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;

	when OTHERS THEN
             	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;

  end adjust_streams;
   --vdamerla Bug6149951 - Added - Start
   -- New procedure to identify and retrieve the khr_id
   -- of a original contract if the input contract is REBOOK copy
   -- Else input contract is returned as output
   PROCEDURE retrive_orig_hdr_id(p_chr_id  IN VARCHAR2
                               , x_chr_id OUT NOCOPY VARCHAR2
) IS
        l_orig_chr_id OKC_K_HEADERS_B.ID%TYPE;
        cursor c_online_rbk_csr(cp_chr_id in okc_k_headers_b.id%TYPE) is
        select ORIG_SYSTEM_ID1
        from okc_k_headers_b
        where id=cp_chr_id
        and trim(ORIG_SYSTEM_SOURCE_CODE)='OKL_REBOOK';

    begin
        open c_online_rbk_csr(p_chr_id);
        fetch c_online_rbk_csr into l_orig_chr_id;
        IF c_online_rbk_csr%FOUND THEN
          x_chr_id := l_orig_chr_id;
        ELSE
          x_chr_id := p_chr_id;
        END IF;
        close c_online_rbk_csr;

    end retrive_orig_hdr_id;
--vdamerla Bug6149951 - Added - End

   -- srsreeni - Bug#5699923 - Added - Start
 	   -- Start of comments
 	   -- Procedure Name     : RECREATE_TMT_LN_STRMS
 	   -- Description        : Creates Working copy of the CURRENT streams of LOAN Components
 	   --                      of TERMINATED LINES. LOAN components refer to
 	   --                      lines on a LOAN contract or FINANCED or
 	   --                      ROLLOVER Fees.
 	   -- Business Rules     : During partial termination, mass rebook re-generates streams of terminated lines.
 	   --                      This process has been modified not to generate streams for
 	   --                      Loan components. Instead the current streams are copied over.
 	   -- Parameters         : p_chr_id      - Contract Identifier
 	   --                      p_source_call - Identifies if this is ESG or ISG
 	   -- Version            : 1.0 - Introduced as part of Bug#5699923
 	   --
 	   -- End of comments
  PROCEDURE RECREATE_TMT_LN_STRMS(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status   OUT NOCOPY VARCHAR2,
            x_msg_count       OUT NOCOPY NUMBER,
            x_msg_data        OUT NOCOPY VARCHAR2,
            p_chr_id          IN  VARCHAR2,
	    p_trx_number      IN  NUMBER,
            p_source_call     IN  VARCHAR2 default 'ESG') AS

    -- Declare Variables
    l_api_name          CONSTANT VARCHAR2(30) := 'RECREATE_TMT_LN_STRMS';
    l_strm_index        NUMBER;
    l_sel_index        NUMBER;
    l_prev_stm_id       OKL_STREAMS.ID%TYPE;

    -- vdamerla Forward Ported Bug6149951  starts

    l_orig_chr_id       OKC_K_HEADERS_B.ID%TYPE; -- smadhava - Bug# 6149951
    l_new_stm_cle_id    OKC_K_LINES_B.ID%TYPE; -- smadhava - Bug# 6149951

    -- vdamerla Forward Ported Bug6149951 ends

    -- Declare records/table types
    l_stmv_tbl          okl_streams_pub.stmv_tbl_type;
    lx_stmv_tbl         okl_streams_pub.stmv_tbl_type;
    l_selv_tbl          okl_streams_pub.selv_tbl_type;
    lx_selv_tbl         okl_streams_pub.selv_tbl_type;
    -- vdamerla Forward Port
    -- Cursor to get fees linked to a terminated Asset
    CURSOR c_lnk_fin_rol_trm_fee (cp_chr_id OKC_K_HEADERS_B.ID%TYPE) IS
      SELECT LNK_CLE.ID LNK_ID
           , FEE_CLE.ID FEE_ID
           , LNK_CLE.DATE_TERMINATED
        FROM OKC_K_LINES_B     LNK_CLE
           , OKC_LINE_STYLES_B LNK_LSE
           , OKL_K_LINES       FEE_KLE
           , OKC_K_LINES_B     FEE_CLE
           , OKC_STATUSES_B    STS
       WHERE LNK_CLE.CLE_ID     = FEE_CLE.ID
         AND LNK_CLE.DNZ_CHR_ID = cp_chr_id
         AND FEE_CLE.DNZ_CHR_ID = cp_chr_id
         AND LNK_LSE.ID         = LNK_CLE.LSE_ID
         AND LNK_LSE.LTY_CODE   = 'LINK_FEE_ASSET'
         AND STS.CODE           = LNK_CLE.STS_CODE
         AND STS.STE_CODE       = 'TERMINATED' -- LINKED line is terminated
         AND FEE_KLE.ID         = FEE_CLE.ID;
         -- vdamerla Forward Ported Bug6149951
         --AND FEE_KLE.ID         = FEE_CLE.ID
         --AND FEE_KLE.FEE_TYPE   IN (G_FEE_FINANCED,G_FEE_ROLLOVER);


    -- Cursor to get Terminated Asset lines of a LOAN contract
    CURSOR c_tmt_asset_loan (cp_chr_id OKC_K_HEADERS_B.ID%TYPE) IS
      SELECT CLE.ID LINE_ID
           , CLE.DATE_TERMINATED
        FROM OKL_K_HEADERS KHR
           , OKC_K_LINES_B CLE
           , OKC_LINE_STYLES_B LSE
           , OKC_STATUSES_B    STS
       WHERE CLE.DNZ_CHR_ID = KHR.ID
         AND LSE.ID         = CLE.LSE_ID
         AND LSE.LTY_CODE   ='FREE_FORM1'
         AND STS.CODE       = CLE.STS_CODE
         AND STS.STE_CODE   = 'TERMINATED'
         AND KHR.ID         = cp_chr_id
        --vdamerla Bug6149951 starts. Need to restrict only LOAN-REVOLVING deal type for a terminated asset
        --LOAN and LEASE stream types needs to be copied as they will not be requested for a terminated asset
        --         AND KHR.DEAL_TYPE  = 'LOAN' -- only LOAN contracts (exclude REV-LOAN)
         AND KHR.DEAL_TYPE  <> 'LOAN-REVOLVING'
        --vdamerla Bug6149951 ends
         ;

   -- Modified by bkatraga for bug 5704245. Added bind condition for purpose_code
   -- Cursor to get Current Streams and elements for a particular line of a contract
   -- Modified the cursor by vdamerla for bug 6344223
   -- Added ISG generated stream type purposes so that these streams will not be
   -- copied over during mass/online rebook. Streams will be regenerated by ISG

   CURSOR c_streams (cp_chr_id OKC_K_HEADERS_B.ID%TYPE
            , cp_cle_id OKC_K_LINES_B.ID%TYPE
            , cp_date_terminated DATE
            , cp_trx_number okl_streams.transaction_number%TYPE) IS
     SELECT STM.ID STREAM_ID
          , STM.STY_ID
          , STM.SGN_CODE
          , STM.PURPOSE_CODE
          , STM.ACTIVE_YN  -- vdamerla Forward Ported Bug 6082209
          , SEL.STREAM_ELEMENT_DATE
          , SEL.AMOUNT
          , SEL.SE_LINE_NUMBER
          , SEL.COMMENTS -- vdamerla Forward Ported Bug 6344223
       FROM OKL_STREAMS STM
          , OKL_STRM_ELEMENTS SEL
          , OKL_STRM_TYPE_B STY -- vdamerla Forward Ported Bug 6082209
      WHERE SEL.STM_ID = STM.ID
        AND STM.KHR_ID = cp_chr_id
        AND STM.KLE_ID = cp_cle_id
        AND (nvl(STM.purpose_code,'ORIG') = (select nvl(si.PURPOSE_CODE,'ORIG') from okl_stream_interfaces si
                                             where transaction_number = cp_trx_number))
        AND STM.SAY_CODE = 'CURR'
        -- vdamerla Forward Ported Bug6344223
        AND SEL.STREAM_ELEMENT_DATE <= nvl(cp_date_terminated, SEL.STREAM_ELEMENT_DATE)
        AND STM.SGN_CODE <> 'INTC'
        AND STM.STY_ID = STY.ID
        AND STY.stream_type_purpose NOT IN
          ('INVESTOR_CNTRCT_OBLIGATION_PAY', 'INVESTOR_DISB_ADJUSTMENT', 'INVESTOR_EVERGREEN_RENT_PAY', 'INVESTOR_INTEREST_INCOME',
           'INVESTOR_INTEREST_PAYABLE', 'INVESTOR_LATE_FEE_PAYABLE', 'INVESTOR_LATE_INTEREST_PAY', 'INVESTOR_PAYABLE',
           'INVESTOR_PRETAX_INCOME', 'INVESTOR_PRINCIPAL_PAYABLE', 'INVESTOR_RECEIVABLE', 'INVESTOR_RENTAL_ACCRUAL',
           'INVESTOR_RENT_BUYBACK', 'INVESTOR_RENT_DISB_BASIS', 'INVESTOR_RENT_PAYABLE', 'INVESTOR_RESIDUAL_BUYBACK',
           'INVESTOR_RESIDUAL_DISB_BASIS', 'INVESTOR_RESIDUAL_PAY', 'INVESTOR_VARIABLE_INTEREST', 'PV_RENT_SECURITIZED',
           'PV_RV_SECURITIZED' --, 'ADVANCE_RENT' -- 7653893: Modified to consider Advance Rental Streams for copy over
           , 'PASS_THROUGH_EVERGREEN_FEE', 'PASS_THROUGH_EVERGREEN_RENT', 'PASS_THROUGH_EVERGREEN_SERVICE',
           'PASS_THROUGH_FEE', 'PASS_THROUGH_SERVICE', 'PASS_THRU_EXP_ACCRUAL', 'PASS_THRU_REV_ACCRUAL', 'PASS_THRU_SVC_EXP_ACCRUAL',
           'PASS_THRU_SVC_REV_ACCRUAL', 'PV_RV', 'PV_RV_GUARANTEED', 'PV_RV_UNGUARANTEED', 'RESIDUAL_GUARANTEED', 'RESIDUAL_VALUE',
           'SECURITY_DEPOSIT', 'SERVICE_EXPENSE', 'SERVICE_FEE_AMORT_SCHEDULE', 'SERVICE_FEE_AUDIT_LETTER', 'SERVICE_FEE_DOCUMENT_REQ',
           'SERVICE_FEE_EXCHG_REQUEST', 'SERVICE_FEE_GENERAL', 'SERVICE_FEE_INTEREST_CONV', 'SERVICE_FEE_INVOICE_DEMAND',
           'SERVICE_FEE_INVOICE_REPRINT', 'SERVICE_FEE_PMT_CHANGE', 'SERVICE_FEE_REST_REQUEST', 'SERVICE_FEE_TERM_REQUEST',
           'SERVICE_FEE_TRANS_REQUEST', 'SERVICE_FEE_VAR_RATE_STMNT', 'SERVICE_FEE_VAT_SCHEDULE', 'SERVICE_INCOME', 'SERVICE_PAYMENT',
           'SERVICE_RENEWAL')

        --AND SEL.STREAM_ELEMENT_DATE <= cp_date_terminated
        -- vdamerla End Forward Ported Bug6344223
        AND STM.SGN_CODE  NOT IN ('INTC','LATE_CALC') -- Bug 6472228
       ORDER BY STM.ID  -- to get the stream elements of a stream together
       ;

     lnk_fin_rol_trm_fee_rec  c_lnk_fin_rol_trm_fee%ROWTYPE;
     tmt_asset_loan_rec       c_tmt_asset_loan%ROWTYPE;
     streams_rec              c_streams%ROWTYPE;
    --Added by vdamerla for bug 6082209
     --Cursor to check whether it is a partial termination mass rebook transaction
     CURSOR  l_chk_mass_rbk_csr IS
       SELECT '!'
         FROM  okc_k_headers_b CHR,
               okl_trx_contracts ktrx,
               okl_trx_contracts trx
        WHERE  CHR.ID         = p_chr_id
          AND  ktrx.KHR_ID    =  chr.id
          AND  ktrx.tsu_code  = 'ENTERED'
          AND  ktrx.rbr_code  IS NOT NULL
          AND  ktrx.tcn_type  = 'TRBK'
--rkuttiya added for 12.1.1 Multi GAAP
          AND  ktrx.representation_type = 'PRIMARY'
--
          AND  ktrx.source_trx_type  = 'TCN'
          AND  trx.tcn_type   = 'ALT'
          AND  trx.id         = ktrx.source_trx_id
          AND  EXISTS (SELECT '1'
                         FROM  okl_rbk_selected_contract rbk_khr
                        WHERE  rbk_khr.KHR_ID = chr.id
                          AND  rbk_khr.STATUS <> 'PROCESSED');

     --Modified by vdamerla for bug 6344223
     --This cursor will get the terminated lines of current streams
     CURSOR l_get_curr_streams_lines
      IS
      SELECT distinct stm.kle_id
        FROM okl_streams stm,
             okc_k_lines_b ln
       WHERE stm.khr_id = p_chr_id
         AND stm.say_code = 'CURR'
         AND stm.kle_id = ln.id
         AND ln.STS_CODE = 'TERMINATED'
         AND (nvl(stm.purpose_code,'ORIG') = (select nvl(si.PURPOSE_CODE,'ORIG')
                                                from okl_stream_interfaces si
                                               where si.transaction_number = p_trx_number));

     --Cursor to get the line terminated date
     --Modified by vdamerla for bug 6344223
     CURSOR l_get_line_term_date(p_line_id OKC_K_LINES_B.ID%TYPE)
      IS
      SELECT date_terminated
        FROM okc_k_lines_b
       WHERE id = p_line_id;

     --To get the streams for which kle_id is null
     --Also streams related to Investor and Interest Calc Prog should not be copied over as these streams are not historized
     --Modified the cursor by vdamerla for bug 6344223
     --Added ISG generated stream type purposes so that these streams will not be
     --copied over during mass/online rebook. Streams will be regenerated by ISG
     CURSOR c_streams1 (cp_chr_id OKC_K_HEADERS_B.ID%TYPE
                        ,cp_trx_number okl_streams.transaction_number%TYPE) IS
     SELECT STM.ID STREAM_ID
          , STM.STY_ID
          , STM.SGN_CODE
          , STM.PURPOSE_CODE
          , STM.ACTIVE_YN
          , SEL.STREAM_ELEMENT_DATE
          , SEL.AMOUNT
          , SEL.SE_LINE_NUMBER
          , SEL.COMMENTS
       FROM OKL_STREAMS STM
          , OKL_STRM_ELEMENTS SEL
          , OKL_STRM_TYPE_B STY
      WHERE SEL.STM_ID = STM.ID
        AND STM.KHR_ID = cp_chr_id
        AND STM.KLE_ID IS NULL
        AND (nvl(STM.purpose_code,'ORIG') = (select nvl(si.PURPOSE_CODE,'ORIG') from okl_stream_interfaces si
                                             where transaction_number = cp_trx_number))
        AND STM.SAY_CODE = 'CURR'
        AND STM.SGN_CODE <> 'INTC'
        AND STM.STY_ID = STY.ID
        AND STY.stream_type_purpose NOT IN
                ('INVESTOR_CNTRCT_OBLIGATION_PAY', 'INVESTOR_DISB_ADJUSTMENT', 'INVESTOR_EVERGREEN_RENT_PAY', 'INVESTOR_INTEREST_INCOME',
                 'INVESTOR_INTEREST_PAYABLE', 'INVESTOR_LATE_FEE_PAYABLE', 'INVESTOR_LATE_INTEREST_PAY', 'INVESTOR_PAYABLE',
                 'INVESTOR_PRETAX_INCOME', 'INVESTOR_PRINCIPAL_PAYABLE', 'INVESTOR_RECEIVABLE', 'INVESTOR_RENTAL_ACCRUAL',
                 'INVESTOR_RENT_BUYBACK', 'INVESTOR_RENT_DISB_BASIS', 'INVESTOR_RENT_PAYABLE', 'INVESTOR_RESIDUAL_BUYBACK',
                 'INVESTOR_RESIDUAL_DISB_BASIS', 'INVESTOR_RESIDUAL_PAY', 'INVESTOR_VARIABLE_INTEREST', 'PV_RENT_SECURITIZED',
                 'PV_RV_SECURITIZED', 'ADVANCE_RENT', 'PASS_THROUGH_EVERGREEN_FEE', 'PASS_THROUGH_EVERGREEN_RENT', 'PASS_THROUGH_EVERGREEN_SERVICE',
                 'PASS_THROUGH_FEE', 'PASS_THROUGH_SERVICE', 'PASS_THRU_EXP_ACCRUAL', 'PASS_THRU_REV_ACCRUAL', 'PASS_THRU_SVC_EXP_ACCRUAL',
                 'PASS_THRU_SVC_REV_ACCRUAL', 'PV_RV', 'PV_RV_GUARANTEED', 'PV_RV_UNGUARANTEED', 'RESIDUAL_GUARANTEED', 'RESIDUAL_VALUE',
                 'SECURITY_DEPOSIT', 'SERVICE_EXPENSE', 'SERVICE_FEE_AMORT_SCHEDULE', 'SERVICE_FEE_AUDIT_LETTER', 'SERVICE_FEE_DOCUMENT_REQ',
                 'SERVICE_FEE_EXCHG_REQUEST', 'SERVICE_FEE_GENERAL', 'SERVICE_FEE_INTEREST_CONV', 'SERVICE_FEE_INVOICE_DEMAND',
                 'SERVICE_FEE_INVOICE_REPRINT', 'SERVICE_FEE_PMT_CHANGE', 'SERVICE_FEE_REST_REQUEST', 'SERVICE_FEE_TERM_REQUEST',
                 'SERVICE_FEE_TRANS_REQUEST', 'SERVICE_FEE_VAR_RATE_STMNT', 'SERVICE_FEE_VAT_SCHEDULE', 'SERVICE_INCOME', 'SERVICE_PAYMENT',
                 'SERVICE_RENEWAL')
       ORDER BY STM.ID;  -- to get the stream elements of a stream together

     l_mass_rbk_khr   VARCHAR2(1) DEFAULT '?';
     l_terminated_date DATE;
     --end vdamerla

     --smadhava - Bug# 6149951 - Added - Start
     -- Get Line ID in rebook copy that was copied from LINE the original contract
     -- cp_rbk_chr_id is the rebook copy contract
     -- cp_ole_id is original contract line ID
     CURSOR c_get_orig_line_id (cp_rbk_chr_id IN okc_k_headers_b.id%type
                              , cp_ole_id IN OKC_K_LINES_B.ID%TYPE) is
       SELECT cle.id new_cle_id
        FROM okc_k_lines_b cle
            ,okc_k_lines_b ole
        WHERE cle.dnz_chr_id=cp_rbk_chr_id
          and ole.id = cp_ole_id
          and ole.lse_id = cle.lse_id
          and ole.id=cle.orig_system_id1;
     --smadhava - Bug# 6149951 - Added - End
     --Added by vdamerla for bug 6149951
     CURSOR c_chk_accrual_sty_on_pdt(cp_pdt_id OKL_PRODUCTS.ID%TYPE,
                                     cp_sty_id OKL_STRM_TYPE_B.ID%TYPE) IS
     SELECT 'Y'
       FROM OKL_STRM_TYPE_B sty,
            OKL_PROD_STRM_TYPES psty
      WHERE sty.id = psty.sty_id
        AND psty.pdt_id = cp_pdt_id
        AND psty.accrual_yn = 'Y'
--srsreeni Might need this
	AND psty.sty_id=cp_sty_id;
        -- 9001154  - Commented to ensure subsidy income streams are considered as accrual streams
        --AND sty.stream_type_purpose NOT IN ('SUBSIDY_INCOME');

     --Cursor to get the purpose code to identify whether it is a regular or reporting product call
     CURSOR c_get_purpose_code IS
     select nvl(purpose_code,'ORIGIN')
       from okl_stream_interfaces
      where transaction_number = p_trx_number;

     --To get the regular product id
     CURSOR c_get_regular_product_id IS
     SELECT pdt_id
       FROM okl_k_headers
      WHERE id = p_chr_id;

     --To get the reporting product id
     CURSOR c_get_report_product_id IS
     SELECT pdt.reporting_pdt_id
       FROM okl_k_headers khr,
            okl_products pdt
      WHERE khr.id = p_chr_id
        AND khr.pdt_id = pdt.id;

     --To check whether the accrual flag is checked or not
     CURSOR check_accrual_previous_csr IS
     SELECT NVL(CHK_ACCRUAL_PREVIOUS_MNTH_YN,'N')
       FROM OKL_SYSTEM_PARAMS_ALL;


     CURSOR chk_curr_terminated_line(p_kle_id IN OKC_K_LINES_B.ID%TYPE) IS
     SELECT 'Y'
       FROM okc_k_headers_b CHR,
            okl_trx_contracts ktrx,
            okl_trx_contracts trx,
            okl_txl_quote_lines_b txl
      WHERE CHR.ID         = p_chr_id
        AND ktrx.KHR_ID    =  chr.id
        AND ktrx.tsu_code  = 'ENTERED'
        AND ktrx.rbr_code  IS NOT NULL
        AND ktrx.tcn_type  = 'TRBK'
--rkuttiya added for 12.1.1 Multi GAAP
        AND ktrx.representation_type = 'PRIMARY'
--
        AND ktrx.source_trx_type  = 'TCN'
        AND trx.tcn_type   = 'ALT'
        AND trx.id         = ktrx.source_trx_id
        AND TXL.QTE_ID = TRX.QTE_ID
        AND TXL.qlt_code = 'AMCFIA'
        AND TXL.kle_id = p_kle_id
        AND EXISTS (SELECT '1'
                      FROM  okl_rbk_selected_contract rbk_khr
                     WHERE  rbk_khr.KHR_ID = chr.id
                       AND rbk_khr.STATUS <> 'PROCESSED')
        AND TXL.QTE_ID = TRX.QTE_ID
       UNION -- 24-Mar-2008  sechawla   FP fix 7445633 for base bug 7421107 : Added union part
     SELECT 'Y'
       FROM okc_k_headers_b CHR,
            okl_trx_contracts ktrx,
            okl_trx_contracts trx,
            okl_txl_quote_lines_b txl
          , OKC_K_ITEMS LNK_ITM
      WHERE CHR.ID         = p_chr_id
        AND ktrx.KHR_ID    =  chr.id
        AND ktrx.tsu_code  = 'ENTERED'
        AND ktrx.rbr_code  IS NOT NULL
        AND ktrx.tcn_type  = 'TRBK'
        AND ktrx.source_trx_type  = 'TCN'
        AND trx.tcn_type   = 'ALT'
        AND trx.id         = ktrx.source_trx_id
        AND TXL.QTE_ID = TRX.QTE_ID
        AND TXL.qlt_code = 'AMCFIA'
        AND TXL.kle_id = LNK_ITM.OBJECT1_ID1
        AND LNK_ITM.CLE_ID = p_kle_id
        AND LNK_ITM.DNZ_CHR_ID = p_chr_id
        AND LNK_ITM.JTOT_OBJECT1_CODE = 'OKX_COVASST'
        AND LNK_ITM.OBJECT1_ID2       = '#'
        AND EXISTS (SELECT '1'
                      FROM  okl_rbk_selected_contract rbk_khr
                     WHERE  rbk_khr.KHR_ID = chr.id
                       AND rbk_khr.STATUS <> 'PROCESSED')
        AND TXL.QTE_ID = TRX.QTE_ID;


     l_accrual_previous_mnth_yn VARCHAR2(3);
     l_purpose_code okl_stream_interfaces.purpose_code%TYPE;
     l_product_id   okl_products.id%TYPE;
     l_temp_term_date DATE;
     l_chk_accrual_stream VARCHAR2(1);
     l_curr_term_flag VARCHAR2(1);
     --end vdamerla
     -- vdamerla End Forward Ported Bug 6082209



  BEGIN

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Initialize variables/records
    l_strm_index  := 0;
    l_sel_index   := 0;
    l_prev_stm_id := NULL;

    -- Currently as part of Bug#5668947, logic written for ESG flow
    -- If fix is made for ISG, this check can be removed and the logic can be
    -- opened to ISG also. The only place where p_source_call will then be useful
    -- is in case of determining the transaction_number
    IF p_source_call = 'ESG' THEN
      --Added by vdamerla for bug 6082209
      --check for mass rebook contract
      --If termination mass rebook transaction exists, then copy the old streams as
      --new streams instead of re-generating them
      l_mass_rbk_khr := '?';
      OPEN l_chk_mass_rbk_csr;
      FETCH l_chk_mass_rbk_csr INTO l_mass_rbk_khr;
      CLOSE l_chk_mass_rbk_csr;

      IF l_mass_rbk_khr = '!' THEN

        --Added by vdamerla for bug 6149951
        --Check whether the stream type is accrual or not
        OPEN c_get_purpose_code;
        FETCH c_get_purpose_code INTO l_purpose_code;
        CLOSE c_get_purpose_code;

        IF(l_purpose_code = 'ORIGIN') THEN
           OPEN c_get_regular_product_id;
           FETCH c_get_regular_product_id INTO l_product_id;
           CLOSE c_get_regular_product_id;
        ELSE
           OPEN c_get_report_product_id;
           FETCH c_get_report_product_id INTO l_product_id;
           CLOSE c_get_report_product_id;
        END IF;

        --Check whether the CHECK_ACCRUALS_TILL_PREVIOUS_MONTH flag is checked or not
         OPEN check_accrual_previous_csr;
         FETCH check_accrual_previous_csr INTO l_accrual_previous_mnth_yn;
         CLOSE check_accrual_previous_csr;
         --end vdamerla

        FOR curr_rec IN l_get_curr_streams_lines
        LOOP
            --Modified by vdamerla for bug 6344223
            OPEN l_get_line_term_date (p_line_id => curr_rec.kle_id);
            FETCH l_get_line_term_date INTO l_terminated_date;
            CLOSE l_get_line_term_date;

            --Added by vdamerla for bug 6149951
            l_curr_term_flag := NULL;
            OPEN chk_curr_terminated_line (p_kle_id => curr_rec.kle_id);
            FETCH chk_curr_terminated_line INTO l_curr_term_flag;
            CLOSE chk_curr_terminated_line;
            --end vdamerla

            FOR streams_rec IN c_streams (p_chr_id
                                         ,curr_rec.kle_id
                                         ,TRUNC(LAST_DAY(l_terminated_date)) --Added by vdamerla for bug 6149951
                                         ,p_trx_number)
            LOOP
              -- Set the Stream record if this is a new Stream
              IF l_prev_stm_id IS NULL OR (l_prev_stm_id <> streams_rec.STREAM_ID) THEN
                l_prev_stm_id := streams_rec.STREAM_ID;
                l_strm_index := l_strm_index + 1;

                l_stmv_tbl(l_strm_index).khr_id       := p_chr_id;
                l_stmv_tbl(l_strm_index).kle_id       := curr_rec.kle_id;
                l_stmv_tbl(l_strm_index).sty_id       := streams_rec.STY_ID;
                l_stmv_tbl(l_strm_index).sgn_code     := streams_rec.sgn_code;
                l_stmv_tbl(l_strm_index).purpose_code := streams_rec.purpose_code;
                l_stmv_tbl(l_strm_index).say_code     := G_STREAM_ACTIVITY_WORK;
                l_stmv_tbl(l_strm_index).active_yn    := streams_rec.active_yn;
                l_stmv_tbl(l_strm_index).date_working := SYSDATE;

                --Added by bkatraga for bug 5704245
                l_stmv_tbl(l_strm_index).transaction_number := p_trx_number;
                --end bkatraga
                --Added by vdamerla for bug 6149951
                l_temp_term_date := NULL;
                l_chk_accrual_stream := NULL;
                IF(l_terminated_date IS NOT NULL AND l_curr_term_flag = 'Y') THEN
                  OPEN c_chk_accrual_sty_on_pdt(cp_pdt_id => l_product_id,
                                                cp_sty_id => streams_rec.STY_ID);
                  FETCH c_chk_accrual_sty_on_pdt INTO l_chk_accrual_stream;
                  CLOSE c_chk_accrual_sty_on_pdt;

                  --To check whether the stream is accrual or not
                  IF(l_chk_accrual_stream = 'Y') THEN
                     IF nvl(l_accrual_previous_mnth_yn,'N') = 'N' THEN
                        l_temp_term_date := TRUNC(LAST_DAY(l_terminated_date));
                      ELSE
                        l_temp_term_date := LAST_DAY(TRUNC(l_terminated_date, 'MONTH')-1);
                      END IF;
                  ELSE
                     l_temp_term_date := TRUNC(l_terminated_date);
                  END IF;
                END IF;
                --end bkatraga

              END IF; -- end of check for new stream record

              ----------------------------------------------------
              -- Get the Stream Elements
              ----------------------------------------------------
              --Added if condition by bkatraga for bug 6149951
            IF(l_temp_term_date IS NULL
                 OR streams_rec.stream_element_date <= l_temp_term_date) THEN
              l_sel_index := l_sel_index + 1;
              l_selv_tbl(l_sel_index).parent_index := l_strm_index;
              l_selv_tbl(l_sel_index).stream_element_date := streams_rec.stream_element_date;
              l_selv_tbl(l_sel_index).amount := streams_rec.amount;
              l_selv_tbl(l_sel_index).se_line_number := streams_rec.se_line_number;
        l_selv_tbl(l_sel_index).comments := streams_rec.comments;
      END IF; --Added by vdamerla for bug 6149951

            END LOOP; -- END of FOR for Streams

        END LOOP;

     ELSE
     --end bkatraga

       -- srsreeni - Bug# 6149951 - Added - Start
       -- Determine if this ESG call is from a rebook copy, if so rebook copies
       -- donot have streams to copy from. Hence look at the original contract
       retrive_orig_hdr_id(p_chr_id, l_orig_chr_id);
       -- srsreeni - Bug# 6149951 - Added - End

      -- vdamerla End Forward Ported Bug6082209


      -- STEP 1(a)
      ----------------------------------------------------
      -- Get the FINANCED/ROLLOVER FEE lines attached to
      -- TERMINATED Assets
      ----------------------------------------------------

      -- vdamerla Forward Ported Bug6082209
      FOR lnk_fin_rol_trm_fee_rec IN c_lnk_fin_rol_trm_fee (l_orig_chr_id)
      --FOR lnk_fin_rol_trm_fee_rec IN c_lnk_fin_rol_trm_fee (p_chr_id)
      -- vdamerla End Forward Ported Bug6082209
      LOOP

        -- STEP 1(b)
        ----------------------------------------------------
        -- Get the CURRENT Streams of fees attached to
        -- TERMINATED Asset Lines of the contract.
        -- And Create a WORKING COPY.
        ----------------------------------------------------
        -- vdamerla Forward Ported Bug6082209
        FOR streams_rec IN c_streams (l_orig_chr_id
        --FOR streams_rec IN c_streams (p_chr_id
        -- vdamerla End Forward Ported Bug6082209
                                 , lnk_fin_rol_trm_fee_rec.LNK_ID
                                 -- vdamerla Forward Port Bug6149951
                                 , NULL -- smadhava - Bug# 6149951 -- Blindly copy stream elements
                                                                   -- of terminated lines during flows other than partial termination mass rebook of the asset
                               -- vdamerla End Forward Port Bug6149951

                               --, TRUNC(lnk_fin_rol_trm_fee_rec.DATE_TERMINATED)
                                 , p_trx_number)  --Added by bkatraga for bug 5704245
        LOOP
          -- Set the Stream record if this is a new Stream
          IF l_prev_stm_id IS NULL OR (l_prev_stm_id <> streams_rec.STREAM_ID) THEN
            l_prev_stm_id := streams_rec.STREAM_ID;
            l_strm_index := l_strm_index + 1;

            -- vdamerla Forward Port Bug6149951

            -- srsreeni - Bug# 6149951 - Added - Start
            IF l_orig_chr_id <> p_chr_id THEN
              OPEN c_get_orig_line_id(cp_rbk_chr_id => p_chr_id,
                                      cp_ole_id     => lnk_fin_rol_trm_fee_rec.LNK_ID);
                FETCH c_get_orig_line_id INTO l_new_stm_cle_id;
              CLOSE c_get_orig_line_id;
             ELSE
               l_new_stm_cle_id := lnk_fin_rol_trm_fee_rec.LNK_ID;
             END IF;
            -- srsreeni - Bug# 6149951 - Added - End
            -- vdamerla End Forward Port Bug6149951



            l_stmv_tbl(l_strm_index).khr_id       := p_chr_id;
            -- vdamerla  Forward Ported Bug6149951
            l_stmv_tbl(l_strm_index).kle_id       := l_new_stm_cle_id;
            --l_stmv_tbl(l_strm_index).kle_id       := lnk_fin_rol_trm_fee_rec.LNK_ID;
            -- vdamerla  End Forward Ported Bug6149951
            l_stmv_tbl(l_strm_index).sty_id       := streams_rec.STY_ID;
            l_stmv_tbl(l_strm_index).sgn_code     := streams_rec.sgn_code;
            l_stmv_tbl(l_strm_index).purpose_code := streams_rec.purpose_code;
            l_stmv_tbl(l_strm_index).say_code     := G_STREAM_ACTIVITY_WORK;
            l_stmv_tbl(l_strm_index).active_yn    :=  'N';
            l_stmv_tbl(l_strm_index).date_working := SYSDATE;

            --Added by bkatraga for bug 5704245
            l_stmv_tbl(l_strm_index).transaction_number := p_trx_number;
            --end bkatraga

          END IF; -- end of check for new stream record

          -- STEP 1(c)
          ----------------------------------------------------
          -- Get the Stream Elements of FINANCED/ROLLOVER fee attached
          -- to TERMINATED Asset Lines of the contract.
          -- Only Elements ON or BEFORE the TERMINATION DATE of Fee are copied
          ----------------------------------------------------
          l_sel_index := l_sel_index + 1;
          l_selv_tbl(l_sel_index).parent_index := l_strm_index;
          l_selv_tbl(l_sel_index).stream_element_date := streams_rec.stream_element_date;
          l_selv_tbl(l_sel_index).amount := streams_rec.amount;
          l_selv_tbl(l_sel_index).se_line_number := streams_rec.se_line_number;
          --Added by vdamerla for bug 6082209
             l_selv_tbl(l_sel_index).comments := streams_rec.comments;
          --end bkatraga
          -- vdamerla End Forward Ported Bug6082209


        END LOOP; -- END of FOR for Streams
      END LOOP; -- END of FOR For FINANCED/ROLLOVER

      -- Reinitialize variables
      l_prev_stm_id := NULL;

      -- STEP 2(a)
      ----------------------------------------------------
      -- Get the TERMINATED Asset lines of contracts
      ----------------------------------------------------
      -- vdamerla Forward Ported Bug6149951
      FOR tmt_asset_loan_rec IN c_tmt_asset_loan (l_orig_chr_id) -- smadhava - Bug# 6149951
      --FOR tmt_asset_loan_rec IN c_tmt_asset_loan (p_chr_id)
      -- vdamerla End Forward Ported Bug6149951
      LOOP

        -- STEP 2(b)
        ----------------------------------------------------
        -- Get the CURRENT Streams of Asset lines.
        -- And Create a WORKING COPY.
        ----------------------------------------------------
        -- vdamerla Forward Ported Bug6149951
        FOR streams_rec IN c_streams (l_orig_chr_id -- smadhava - Bug# 6149951
        -- FOR streams_rec IN c_streams (p_chr_id
                                 , tmt_asset_loan_rec.LINE_ID
                                 , NULL -- smadhava - Bug# 6149951 -- Blindly copy stream elements
                                        -- of terminated lines during flows other than partial termination mass rebook of the asset
                             --, TRUNC(tmt_asset_loan_rec.DATE_TERMINATED)
        -- vdamerla End Forward Ported Bug6149951
                                 , p_trx_number)  --Added by bkatraga for bug 5704245
        LOOP
          -- Set the Stream record if this is a new Stream
          IF l_prev_stm_id IS NULL OR (l_prev_stm_id <> streams_rec.STREAM_ID) THEN
            l_prev_stm_id := streams_rec.STREAM_ID;
            l_strm_index := l_strm_index + 1;
            -- vdamerla - Bug# 6149951 - Added - Start
            IF l_orig_chr_id <> p_chr_id THEN
              OPEN c_get_orig_line_id(cp_rbk_chr_id => p_chr_id,
                                      cp_ole_id     => tmt_asset_loan_rec.LINE_ID);
                FETCH c_get_orig_line_id INTO l_new_stm_cle_id;
              CLOSE c_get_orig_line_id;
             ELSE
               l_new_stm_cle_id := tmt_asset_loan_rec.LINE_ID;
             END IF;
            -- vdamerla End Forward Ported Bug6149951




            l_stmv_tbl(l_strm_index).khr_id       := p_chr_id;
            -- vdamerla Forward Ported Bug6149951
            l_stmv_tbl(l_strm_index).kle_id       := l_new_stm_cle_id; -- smadhava Bug# 6149951
            --l_stmv_tbl(l_strm_index).kle_id       := tmt_asset_loan_rec.LINE_ID;
            -- vdamerla End Forward Ported Bug6149951
            l_stmv_tbl(l_strm_index).sty_id       := streams_rec.STY_ID;
            l_stmv_tbl(l_strm_index).sgn_code     := streams_rec.sgn_code;
            l_stmv_tbl(l_strm_index).purpose_code := streams_rec.purpose_code;
            l_stmv_tbl(l_strm_index).say_code     := G_STREAM_ACTIVITY_WORK;
            l_stmv_tbl(l_strm_index).active_yn    :=  'N';
            l_stmv_tbl(l_strm_index).date_working := SYSDATE;

            --Added by bkatraga for bug 5704245
            l_stmv_tbl(l_strm_index).transaction_number := p_trx_number;
            --end bkatraga

          END IF; -- end of check for new stream record

          -- STEP 2(c)
          ----------------------------------------------------
          -- Get the Stream Elements of of LOAN Asset lines.
          -- Only Elements ON or BEFORE the TERMINATION DATE of lines are copied
          ----------------------------------------------------
          l_sel_index := l_sel_index + 1;
          l_selv_tbl(l_sel_index).parent_index := l_strm_index;
          l_selv_tbl(l_sel_index).stream_element_date := streams_rec.stream_element_date;
          l_selv_tbl(l_sel_index).amount := streams_rec.amount;
          l_selv_tbl(l_sel_index).se_line_number := streams_rec.se_line_number;
        --Added by vdamerla for bug 6082209
          l_selv_tbl(l_sel_index).comments := streams_rec.comments;
        --end bkatraga
        -- vdamerla End Forward Ported Bug 6082209



        END LOOP; -- END of FOR for Streams
      END LOOP; -- END of For loop over Terminated loan assets
      END IF; --Added by bkatraga for bug 6082209

      -- STEP 3
      IF l_stmv_tbl.COUNT > 0 THEN
        -- Call the API to bulk insert data into streams and stream elements
         OKL_STREAMS_PUB.CREATE_STREAMS_PERF(p_api_version
                                         , p_init_msg_list
                                         , x_return_status
                                         , x_msg_count
                                         , x_msg_data
                                         , l_stmv_tbl
                                         , l_selv_tbl
                                         , lx_stmv_tbl
                                         , lx_selv_tbl);
         IF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
         ELSIF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         END IF;
      END IF; -- l_stmv_tbl count check

    END IF; -- END IF p_source_call check

    -- End of API
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data  => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
              p_api_name  => l_api_name,
              p_pkg_name  => g_pkg_name,
              p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
              x_msg_count => x_msg_count,
              x_msg_data  => x_msg_data,
              p_api_type  => g_api_type);
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
            x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                    p_api_name  => l_api_name,
                    p_pkg_name  => g_pkg_name,
                    p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
                    x_msg_count => x_msg_count,
                    x_msg_data  => x_msg_data,
                    p_api_type  => g_api_type);
     WHEN OTHERS THEN
             x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                     p_api_name  => l_api_name,
                     p_pkg_name  => g_pkg_name,
                     p_exc_name  => 'OTHERS',
                     x_msg_count => x_msg_count,
                     x_msg_data  => x_msg_data,
                     p_api_type  => g_api_type);
 	   END RECREATE_TMT_LN_STRMS;
 	   -- srsreeni - Bug#5699923 - Added - End

-- Start modification 11i10 bakuchib
  Procedure process_streams(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status   OUT NOCOPY VARCHAR2,
            x_msg_count       OUT NOCOPY NUMBER,
            x_msg_data        OUT NOCOPY VARCHAR2,
            p_chr_id          IN  VARCHAR2,
            p_process_yn      IN  VARCHAR2,
            p_chr_yields      IN  yields_rec_type,
            p_source_call     IN   VARCHAR2) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'PROCESS_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

    pl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    pl_khrv_rec okl_contract_pvt.khrv_rec_type;
    xl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    xl_khrv_rec okl_contract_pub.khrv_rec_type;

    l_chr_yields   yields_rec_type;

    l_trxH_in_rec        Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    l_trxH_out_rec       Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    -- Code for bulk update -02/18/2004 - HKPATEL
    l_id_tbl okl_streams_util.NumberTabTyp;
	-- Code for bulk update ends here -02/18/2004 - HKPATEL


    Cursor ylds_csr( chrId NUMBER )  IS
    Select 'N' exist
    from   okl_k_headers_full_v
    where id = chrId
        and pre_tax_yield is NULL
        and after_tax_yield is NULL
        and pre_tax_irr is NULL
        and after_tax_irr is NULL
        and implicit_interest_rate is NULL;
    --  get rates and line id for a financed fee
    CURSOR get_fin_lne_csr(p_chr_id NUMBER)
    IS
    SELECT DISTINCT cle.id line_id,
                    lev.rate
    FROM okl_sif_ret_levels lev,
         okl_sif_rets ret,
         okl_stream_interfaces sif,
         okl_sif_lines line,
         okc_k_lines_b cle,
         okl_k_lines kle,
         okc_line_styles_b lse,
         okl_sif_fees fee
    WHERE lev.sir_id = ret.id
    AND lev.level_type = 'Payment'
    AND ret.transaction_number = sif.transaction_number
    AND sif.id = line.sif_id
    AND line.sif_id = fee.sif_id
    AND line.id = fee.sil_id
    AND line.kle_id = cle.id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'FEE'
    AND cle.id = kle.id
    AND kle.fee_type = 'FINANCED'
    AND fee.fee_index_number = lev.index_number
    AND line.sil_type = 'SGN'
    AND sif.transaction_number IN (SELECT MAX(transaction_number)
                                   FROM okl_stream_interfaces
                                   WHERE khr_id = p_chr_id
                                   AND purpose_code IS NULL);
    --  get payment levels for line
    CURSOR get_level_csr(p_chr_id NUMBER,
                         p_cle_id NUMBER)
    IS
    SELECT sll.id sll_id,
           slh.id slh_id
    FROM okc_rule_groups_b rgp,
         okc_rules_b slh,
         okc_rules_b sll
    WHERE rgp.dnz_chr_id = p_chr_id
    AND rgp.rgd_code = 'LALEVL'
    AND rgp.cle_id = p_cle_id
    AND rgp.id = slh.rgp_id
    AND sll.rgp_id = slh.rgp_id
    AND sll.dnz_chr_id = slh.dnz_chr_id
    AND slh.dnz_chr_id = rgp.dnz_chr_id
    AND sll.object2_id1 = slh.id
    AND sll.object2_id2 = '#'
    AND sll.jtot_object2_code = 'OKL_STRMHDR';
    --  validate the contract is reporting product or not
    CURSOR validate_pdt_csr(p_chr_id NUMBER)
    IS
    SELECT 'Y'
    FROM DUAL
    WHERE EXISTS (SELECT 1
                  FROM okl_k_headers khr,
                       okl_products_v pdt
                  WHERE khr.id = p_chr_id
                  AND khr.pdt_id = pdt.id
                  AND pdt.reporting_pdt_id IS NOT NULL);
    --  Check for reporting streams for non MGAPP prodcut
    -- Modified by kthiruva on 17-Nov-2005.
    -- Streams having an SGN_CODE = 'INTC' should not be historized
    -- Bug 4737555 - Start of Changes
    CURSOR non_mg_rep_csr(p_chr_id NUMBER)
    IS
    SELECT str.id strm_id,
           str.kle_id,
           str.sty_id sty_id,
           str.sgn_code sgn_code,
           str.sgn_code alloc_yn,
           str.comments alloc_basis,
           str.transaction_number trn_num,
           str.purpose_code,
           str.say_code,
           str.active_yn
    FROM okl_streams str
    WHERE str.khr_id = p_chr_id
    AND str.purpose_code = 'REPORT'
    AND str.say_code = 'CURR'
    AND str.sgn_code NOT IN ('INTC','LATE_CALC') -- bug 6472228
    AND (NVL( str.kle_id, -1) = -1 OR
         str.kle_id IN (SELECT kle.id
                        FROM  okl_k_lines_full_v kle,
                              okc_line_styles_b lse,
                              okc_statuses_b sts
                        WHERE KLE.LSE_ID = LSE.ID
                        AND kle.dnz_chr_id = p_chr_id
                        AND sts.code = kle.sts_code
                        AND lse.lty_code NOT IN ('INSURANCE')));
   -- Bug 4737555 - End of Changes

    lv_pdt_no_rep      VARCHAR2(3) := 'N';
    j                  NUMBER := 0;
    m_stmv_tbl  okl_streams_pub.stmv_tbl_type;
    mx_stmv_tbl okl_streams_pub.stmv_tbl_type;
    ylds_rec ylds_csr%ROWTYPE;

    l_strm_rec strm_csr%ROWTYPE;
    l_stmv_tbl okl_streams_pub.stmv_tbl_type;
    x_stmv_tbl okl_streams_pub.stmv_tbl_type;

    i NUMBER;
    l_tcnCode VARCHAR2(256);
    l_transaction_type VARCHAR2(256) := 'Miscellaneous';--'Generate Yields';

    l_fnd_rec fnd_lookups_csr%ROWTYPE;
    l_trx_rec trx_csr%ROWTYPE;
    l_hdr_rec l_hdr_csr%ROWTYPE;

    l_strm_name_rec  strm_name_csr%ROWTYPE;
    l_strms_orig_rec strms_csr%ROWTYPE;
    l_strms_rep_rec strms_csr%ROWTYPE;
    l_strm_name VARCHAR2(256);

    l_chr_id NUMBER := TO_NUMBER(p_chr_id);

    l_process_yn VARCHAR2(1) := 'N';
    l_orig_yn VARCHAR2(1) := 'N';
    l_rep_yn  VARCHAR2(1) := 'N';
    l_mgaap_yn  VARCHAR2(1) := 'N';

    c_num VARCHAR2(256);
-- Start of modification for bug#3320656 -- bakuchib
-- Start of modification for bug#3320656 revoked to OKL_RULE_PUB -- bakuchib
    l_rulv_rec               OKL_RULE_PUB.rulv_rec_type;
    lx_rulv_rec              OKL_RULE_PUB.rulv_rec_type;
    r_rulv_rec               OKL_RULE_PUB.rulv_rec_type;
    rx_rulv_rec              OKL_RULE_PUB.rulv_rec_type;
-- End of modification for bug#3320656 revoked to OKL_RULE_PUB -- bakuchib
-- End of modification for bug#3320656 -- bakuchib
    --Added by kthiruva on 11-Aug-2005
    --Bug 4541302 - Start of Changes
    CURSOR get_stream_req_status_csr(p_khr_id NUMBER)
    IS
    SELECT * FROM (
                    SELECT SIF.SIS_CODE REQUEST_STATUS
                    FROM OKL_STREAM_INTERFACES  SIF
                    WHERE SIF.KHR_ID = p_khr_id
                    AND SIF.PURPOSE_CODE = 'REPORT'
                    ORDER BY SIF.TRANSACTION_NUMBER DESC)
    WHERE ROWNUM < 2;

    -- To get the reporting request transaction number
    CURSOR get_rep_trans_num(p_khr_id NUMBER)
    IS
    SELECT * FROM (
                    SELECT SIF.TRANSACTION_NUMBER TRANSACTION_NUMBER
                    FROM OKL_STREAM_INTERFACES  SIF
                    WHERE SIF.KHR_ID = p_khr_id
                    AND SIF.PURPOSE_CODE = 'REPORT'
                    ORDER BY SIF.TRANSACTION_NUMBER DESC)
    WHERE ROWNUM < 2;

    l_report_req_status  VARCHAR2(100);
    l_message            VARCHAR2(30);
    l_status             NUMBER := 0;
    l_timeout            NUMBER := 120;
    l_alert_name         VARCHAR2(20) := 'REP_PROD_COMPLETE';
    l_rep_message        VARCHAR2(30) := 'PROCESSED';
    --Bug 4541302 - End of Changes


  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    IF p_process_yn = OKL_API.G_TRUE Then
      l_process_yn := 'Y';
    END IF;

    --Added by kthiruva for Debug Logging
    write_to_log('Just inside process_streams   ');

    FOR get_fin_lne_rec IN get_fin_lne_csr(p_chr_id => p_chr_id) LOOP
      FOR get_level_rec IN get_level_csr(p_chr_id => p_chr_id,
                                         p_cle_id => get_fin_lne_rec.line_id) LOOP
          r_rulv_rec.id                 := get_level_rec.slh_id;
          r_rulv_rec.rule_information2  := 'IMPL_INTEREST_RATE';
-- Start of modification for bug#3320656 -- bakuchib
-- Start of modification for bug#3320656 revoked to OKL_RULE_PUB -- bakuchib
          OKL_RULE_PUB.update_rule(
-- End of modification for bug#3320656 revoked to OKL_RULE_PUB -- bakuchib
-- end of modification for bug#3320656 -- bakuchib
                       p_api_version   => p_api_version,
                       p_init_msg_list => p_init_msg_list,
                       x_return_status => x_return_status,
                       x_msg_count     => x_msg_count,
                       x_msg_data      => x_msg_data,
                       p_rulv_rec      => r_rulv_rec,
                       p_edit_mode     => 'N',
                       x_rulv_rec      => rx_rulv_rec);
          l_rulv_rec.id                 := get_level_rec.sll_id;
          l_rulv_rec.rule_information13 := get_fin_lne_rec.rate;
-- Start of modification for bug#3320656 -- bakuchib
-- Start of modification for bug#3320656 revoked to OKL_RULE_PUB -- bakuchib
          OKL_RULE_PUB.update_rule(
-- End of modification for bug#3320656 revoked to OKL_RULE_PUB -- bakuchib
-- end of modification for bug#3320656 -- bakuchib
                       p_api_version   => p_api_version,
                       p_init_msg_list => p_init_msg_list,
                       x_return_status => x_return_status,
                       x_msg_count     => x_msg_count,
                       x_msg_data      => x_msg_data,
                       p_rulv_rec      => l_rulv_rec,
                       p_edit_mode     => 'N',
                       x_rulv_rec      => lx_rulv_rec);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
      END LOOP;
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
      END IF;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- getting the header info
    OPEN l_hdr_csr( p_chr_id );
    FETCH l_hdr_csr INTO l_hdr_rec;
    CLOSE l_hdr_csr;
    -- Checking if the normal streams which are in working status
    OPEN  strms_csr(p_chr_id, 'WORK', 'ORIGIN');
    FETCH strms_csr INTO l_strms_orig_rec;
    IF strms_csr%FOUND THEN
      l_orig_yn := 'Y';
    END IF;
    CLOSE strms_csr;
    -- bug# 2763523
    okl_context.set_okc_org_context(l_hdr_rec.authoring_org_id,l_hdr_rec.inv_organization_id);
    IF l_hdr_rec.report_pdt_id <> -1 THEN
      -- Checking if the Reporting streams which are in working status
      OPEN strms_csr(p_chr_id, 'WORK', 'REPORT');
      FETCH strms_csr into l_strms_rep_rec;
      IF strms_csr%FOUND THEN
        l_rep_yn := 'Y';
      END IF;
      CLOSE strms_csr;
      l_mgaap_yn := 'Y';
    END IF;
    IF ((l_mgaap_yn='N' AND l_process_yn='N') OR
        (l_mgaap_yn='Y' AND l_orig_yn='N' AND l_rep_yn='N' AND l_process_yn='N')) Then
      RETURN;
    END IF;
    IF ((l_orig_yn='Y' ) AND (l_process_yn='Y' )) THEN
      l_chr_yields.pre_tax_yield           := p_chr_yields.PRE_TAX_YIELD;
      l_chr_yields.after_tax_yield         := p_chr_yields.AFTER_TAX_YIELD;
      l_chr_yields.pre_tax_irr             := p_chr_yields.PRE_TAX_IRR;
      l_chr_yields.after_tax_irr           := p_chr_yields.AFTER_TAX_IRR;
      l_chr_yields.implicit_interest_rate  := p_chr_yields.IMPLICIT_INTEREST_RATE;
      l_chr_yields.sub_pre_Tax_yield       := p_chr_yields.sub_pre_Tax_yield;
      l_chr_yields.sub_after_tax_yield     := p_chr_yields.sub_after_tax_yield;
      l_chr_yields.sub_pre_tax_irr         := p_chr_yields.sub_pre_tax_irr;
      l_chr_yields.sub_after_tax_irr       := p_chr_yields.sub_after_tax_irr;
      l_chr_yields.sub_impl_interest_rate  := p_chr_yields.sub_impl_interest_rate;
    END IF;
    OPEN ylds_csr(p_chr_id);
    FETCH ylds_csr into ylds_rec;
    CLOSE ylds_csr;
 --Modified by kthiruva on 08-Feb-2005
 --Ensure that the reporting producti does not update the contract yields
 --Bug 3955561 - Start of Changes
  --  IF NOT (l_orig_yn='Y' AND l_rep_yn='Y' AND ylds_rec.exist = 'Y' ) THEN
    IF not(l_orig_yn='N' AND l_rep_yn='Y' AND ylds_rec.exist = 'N' ) THEN
 --Bug 3955561 - End of Changes
        --Added by kthiruva for Logging Purposes
        write_to_log('Before the call to update_contract_yields');

        update_contract_yields(
                p_api_version => p_api_version,
                p_init_msg_list => p_init_msg_list,
                x_return_status => x_return_status,
                x_msg_count => x_msg_count,
                x_msg_data => x_msg_data,
                p_chr_id => p_chr_id,
                p_chr_yields => l_chr_yields);

        --Added by kthiruva for Logging Purposes
        write_to_log('After the call to update_contract_yields, the return status is :'||x_return_status);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
    END IF;
    IF p_source_call = 'ESG' THEN
      --Added by kthiruva for Debugging
      write_to_log('The source call is ESG');
      IF l_mgaap_yn = 'Y' THEN
        IF l_process_yn='N' THEN
          i := 0;
          FOR l_strms_orig_rec in strms_csr ( p_chr_id, 'WORK', 'ORIGIN') LOOP
            i := i + 1;
            l_stmv_tbl(i).id := l_strms_orig_rec.STRM_ID;
            l_stmv_tbl(i).sty_id := l_strms_orig_rec.STY_ID;
            l_stmv_tbl(i).khr_id := p_chr_id;
            l_stmv_tbl(i).sgn_code := l_strms_orig_rec.SGN_CODE;
            l_stmv_tbl(i).transaction_number := l_strms_orig_rec.TRN_NUM;
          END LOOP;
          FOR l_strms_rep_rec in strms_csr ( p_chr_id, 'WORK', 'REPORT')  LOOP
            i := i + 1;
            l_stmv_tbl(i).id := l_strms_rep_rec.STRM_ID;
            l_stmv_tbl(i).sty_id := l_strms_rep_rec.STY_ID;
            l_stmv_tbl(i).khr_id := p_chr_id;
            l_stmv_tbl(i).sgn_code := l_strms_rep_rec.SGN_CODE;
            l_stmv_tbl(i).transaction_number := l_strms_rep_rec.TRN_NUM;
          END LOOP;
          IF i > 0 THEN
            Okl_Streams_pub.delete_streams(
                           p_api_version => p_api_version,
                           p_init_msg_list => p_init_msg_list,
                           x_return_status => x_return_status,
                           x_msg_count => x_msg_count,
                           x_msg_data => x_msg_data,
                           p_stmv_tbl => l_stmv_tbl);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;
          RETURN;
  -- Start for bug#3388812  modification - BAKUCHIB
  --      ELSIF (l_orig_yn <> l_rep_yn ) THEN -- when (orig=Y and rep=N) OR (orig=N and rep=Y)
  --        RETURN;
  -- End for bug#3388812  modification - BAKUCHIB
        ELSIF l_rep_yn='Y' THEN
	-- gboomina BUG#4508077 passing p_source_call as a parameter

          --Added by kthiruva for Debug Purposes
          write_to_log('Value of l_rep_yn is Y');
          write_to_log('Before the call to Adjust Streams');

          adjust_streams(p_api_version => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count => x_msg_count,
                         x_msg_data => x_msg_data,
                         p_chr_id => p_chr_id,
                         p_purpose => 'REPORT',
			 p_source_call => p_source_call);

          --Added by kthiruva for Debug Purposes
          write_to_log('After the call to adjust_streams, the return status is :'||x_return_status);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;
      END If;
      IF l_orig_yn = 'Y' THEN
      -- gboomina BUG#4508077 passing p_source_call as a parameter
        --Added by kthiruva for Debug Purposes
        write_to_log('Value of l_orig_yn is Y');
        write_to_log('Before the call to Adjust Streams');
        adjust_streams(p_api_version => p_api_version,
                       p_init_msg_list => p_init_msg_list,
                       x_return_status => x_return_status,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       p_chr_id => p_chr_id,
                       p_purpose => 'ORIGIN',
		       p_source_call => p_source_call);

          --Added by kthiruva for Debug Purposes
          write_to_log('After the call to adjust_streams, the return status is :'||x_return_status);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
    ELSIF p_source_call = 'ISG' THEN
      --Added by kthiruva for Debugging
      write_to_log('The source call is ISG');
      IF l_mgaap_yn = 'Y' THEN
        IF l_process_yn='N' THEN
          i := 0;
          FOR l_strms_orig_rec in strms_csr ( p_chr_id, 'WORK', 'ORIGIN') LOOP
            i := i + 1;
            l_stmv_tbl(i).id := l_strms_orig_rec.STRM_ID;
            l_stmv_tbl(i).sty_id := l_strms_orig_rec.STY_ID;
            l_stmv_tbl(i).khr_id := p_chr_id;
            l_stmv_tbl(i).sgn_code := l_strms_orig_rec.SGN_CODE;
            l_stmv_tbl(i).transaction_number := l_strms_orig_rec.TRN_NUM;
          END LOOP;
          FOR l_strms_rep_rec in strms_csr ( p_chr_id, 'WORK', 'REPORT')  LOOP
            i := i + 1;
            l_stmv_tbl(i).id := l_strms_rep_rec.STRM_ID;
            l_stmv_tbl(i).sty_id := l_strms_rep_rec.STY_ID;
            l_stmv_tbl(i).khr_id := p_chr_id;
            l_stmv_tbl(i).sgn_code := l_strms_rep_rec.SGN_CODE;
            l_stmv_tbl(i).transaction_number := l_strms_rep_rec.TRN_NUM;
          END LOOP;
          IF i > 0 THEN
            Okl_Streams_pub.delete_streams(
                           p_api_version => p_api_version,
                           p_init_msg_list => p_init_msg_list,
                           x_return_status => x_return_status,
                           x_msg_count => x_msg_count,
                           x_msg_data => x_msg_data,
                           p_stmv_tbl => l_stmv_tbl);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;
          RETURN;
  -- Start for bug#3388812  modification - BAKUCHIB
  --      ELSIF (l_orig_yn <> l_rep_yn ) THEN -- when (orig=Y and rep=N) OR (orig=N and rep=Y)
  --        RETURN;
  -- End for bug#3388812  modification - BAKUCHIB
  -- gboomina BUG#4508077 passing p_source_call as a parameter
        ELSIF l_rep_yn='Y' THEN
          adjust_streams(p_api_version => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count => x_msg_count,
                         x_msg_data => x_msg_data,
                         p_chr_id => p_chr_id,
                         p_purpose => 'REPORT',
			 p_source_call => p_source_call);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
         -- gboomina BUG#4508077 passing p_source_call as a parameter
          adjust_streams(p_api_version => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count => x_msg_count,
                         x_msg_data => x_msg_data,
                         p_chr_id => p_chr_id,
                         p_purpose => 'ORIGIN',
			 p_source_call => p_source_call);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;
      ELSE
        write_to_log('Before the call to Adjust Streams');
        -- gboomina BUG#4508077 passing p_source_call as a parameter
        adjust_streams(p_api_version => p_api_version,
                       p_init_msg_list => p_init_msg_list,
                       x_return_status => x_return_status,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       p_chr_id => p_chr_id,
                       p_purpose => 'ORIGIN',
           	       p_source_call => p_source_call);

        --Added by kthiruva for Debug Purposes
        write_to_log('After the call to adjust_streams, the return status is :'||x_return_status);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END If;
    END IF;

-- Start for bug#3388812  modification - BAKUCHIB
    -- We are explicitly making the non MGAAP streams to History if the product
    -- is non MGAPP.
    OPEN  validate_pdt_csr(p_chr_id => p_chr_id);
    FETCH validate_pdt_csr INTO lv_pdt_no_rep;
    CLOSE validate_pdt_csr;
    IF lv_pdt_no_rep = 'N' THEN
      FOR  non_mg_rep_rec IN  non_mg_rep_csr(p_chr_id => p_chr_id) LOOP
        j := j + 1;
		/* Commeneted for Bulk update by HKPATEL -02/28/04
        m_stmv_tbl(j).id           := non_mg_rep_rec.strm_id;
        m_stmv_tbl(j).say_code     := 'HIST';
        m_stmv_tbl(j).active_yn    := 'N';
        m_stmv_tbl(j).date_history := sysdate;
		*/

		l_id_tbl(j)                := non_mg_rep_rec.strm_id;
      END LOOP;
      IF (l_id_tbl.COUNT > 0) THEN

		BEGIN
          --Added by kthiruva for Debugging
          write_to_log('Prior to the call to historing current streams');
	      FORALL i IN l_id_tbl.FIRST..l_id_tbl.LAST
		    UPDATE OKL_STREAMS
		    SET 	say_code = 'HIST',
		    active_yn = 'N',
		    date_history = sysdate
		    WHERE 	ID = l_id_tbl(i);
          write_to_log('Streams historised successfully');

	    EXCEPTION
		    WHEN OTHERS THEN
		          okl_api.set_message (p_app_name     => G_APP_NAME,
                               p_msg_name     => G_DB_ERROR,
                               p_token1       => G_PROG_NAME_TOKEN,
                               p_token1_value => l_api_name,
                               p_token2       => G_SQLCODE_TOKEN,
                               p_token2_value => sqlcode,
                               p_token3       => G_SQLERRM_TOKEN,
                               p_token3_value => sqlerrm);
		       l_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;
		       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
	    END;
/*	Commented for Bulk Update - HKPATEL - 02/18/2004
      IF (m_stmv_tbl.COUNT > 0) THEN
        okl_streams_pub.update_streams(
                         p_api_version   => p_api_version,
                         p_init_msg_list => p_init_msg_list,
                         x_return_status => x_return_status,
                         x_msg_count     => x_msg_count,
                         x_msg_data      => x_msg_data,
                         p_stmv_tbl      => m_stmv_tbl,
                         x_stmv_tbl      => mx_stmv_tbl);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
          raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
          raise OKL_API.G_EXCEPTION_ERROR;
        END IF;
*/
      END IF;
    END IF;

    -- gboomina BUG#4508077 changes start
       -- for main product
       IF l_orig_yn = 'Y' THEN
         --Added by kthiruva for Debugging
         write_to_log('Value of l_orig_yn = Y');
         write_to_log('Prior to the call to update_rvi_amount');

         update_rvi_amount(p_api_version  =>  p_api_version,
                           p_init_msg_list => OKL_API.G_FALSE,
                           p_chr_id => p_chr_id,
                           p_purpose => 'ORIGIN',
                           x_return_status => x_return_status,
                           x_msg_count => x_msg_count,
                           x_msg_data => x_msg_data);

         --Added by kthiruva for Debugging
         write_to_log('After the call to Update_rvi_amount, the return status is :'||x_return_status);
         -- raise appropriate exceptions depending on the return status
         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;
       END IF;
       -- for reporting product
       IF l_rep_yn = 'Y' THEN
         --Added by kthiruva for Debugging
         write_to_log('Value of l_rep_yn = Y');
         write_to_log('Prior to the call to update_rvi_amount');

         update_rvi_amount(p_api_version  =>  p_api_version,
                           p_init_msg_list => OKL_API.G_FALSE,
                           p_chr_id => p_chr_id,
                           p_purpose => 'REPORT',
                           x_return_status => x_return_status,
                           x_msg_count => x_msg_count,
                           x_msg_data => x_msg_data);

         --Added by kthiruva for Debugging
         write_to_log('After the call to Update_rvi_amount, the return status is :'||x_return_status);
         -- raise appropriate exceptions depending on the return status
         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;
       END IF;
       -- gboomina BUG#4508077 changes end
-- End for bug#3388812  modification - BAKUCHIB
    IF (x_return_status = Okl_Api.G_RET_STS_SUCCESS) THEN
      --PAGARG 25-Feb-2005 Bug 4037658 starts
      IF (p_source_call = 'ESG') THEN
        IF not (l_orig_yn='N' AND l_rep_yn='Y') THEN
          --Added by kthiruva on 11-Aug-2005
          --Bug 4541302 - Start of Changes
          --1)If the regular product has a Multi-GAAP product then, we check to see if the Reporting
          --  Product's stream generation request is already completed.
		  --2)If yes, we update the contract status
		  --3)If no and the request is still being processed, we register an alert and wait on the alert.
		  --4)The alert would be signalled by the reporting product once its stream generation request
		  --  is complete.
		  --5)Once the alert is received, the regular product can update the contract status to complete.
		  --6)If the reporting product's stream generation request does not complete, and there is no
		  --  alert signalled, then the contract status is not updated.
          IF l_mgaap_yn = 'Y' THEN
             --Fetching the request status of the Reporting Product
             OPEN get_stream_req_status_csr(p_chr_id);
             FETCH get_stream_req_status_csr INTO l_report_req_status;
             CLOSE get_stream_req_status_csr;

             --When the reporting request has completed with the below statuses, we do not want to update
             --the contract status. We therefore, update l_status to 1.
             IF l_report_req_status IN ('PROCESSING_FAILED','PROCESS_ABORTED','SERVER_NA','TIME_OUT') THEN
                 l_status := 1;
             END IF;

             IF(l_report_req_status NOT IN('PROCESS_COMPLETE', 'PROCESS_COMPLETE_ERRORS','PROCESSING_FAILED'
			                               ,'PROCESS_ABORTED','SERVER_NA','TIME_OUT')) THEN

                 --Fetching the value of the time out variable
                 l_timeout := FND_PROFILE.value('OKL_STREAMS_TIME_OUT');
                 l_timeout := l_timeout * 60;

                 OPEN get_rep_trans_num(p_chr_id);
                 FETCH get_rep_trans_num INTO l_alert_name;
                 CLOSE get_rep_trans_num;

                 DBMS_ALERT.REGISTER(l_alert_name);
                 DBMS_ALERT.WAITONE(l_alert_name,l_message,l_status,l_timeout);
                 DBMS_ALERT.REMOVE(l_alert_name);

                 IF l_status = 1 THEN
                    --Fetching the request status of the Reporting Product
                    OPEN get_stream_req_status_csr(p_chr_id);
                    FETCH get_stream_req_status_csr INTO l_report_req_status;
                    CLOSE get_stream_req_status_csr;
                 END IF;
             END IF;
          END IF;
          IF(l_status = 0 OR (l_report_req_status IN('PROCESS_COMPLETE', 'PROCESS_COMPLETE_ERRORS'))) THEN
             print( l_api_name, 'updating the status');
             --Added by kthiruva for Debugging
             write_to_log('Prior to the call to update_contract_status');
             okl_contract_status_pub.update_contract_status(
                                    l_api_version,
                                    p_init_msg_list,
                                    x_return_status,
                                    x_msg_count,
                                    x_msg_data,
                                    'COMPLETE',
                                    p_chr_id );
             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
             --Added by kthiruva for Debugging
             write_to_log('After the call to update_contract_status, return status is :'||x_return_status);

             --call to cascade status on to lines
             OKL_CONTRACT_STATUS_PVT.cascade_lease_status(
                                    p_api_version     => l_api_version,
                                    p_init_msg_list   => p_init_msg_list,
                                    x_return_status   => x_return_status,
                                    x_msg_count       => x_msg_count,
                                    x_msg_data        => x_msg_data,
                                    p_chr_id          => l_chr_id);
             --Added by kthiruva for Debugging
             write_to_log('After the call to cascade_lease_status, return status is :'||x_return_status);

             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
--srsreeni Bug6011651 starts
OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
     p_api_version         => l_api_version,
     p_init_msg_list       => p_init_msg_list,
     x_return_status       => x_return_status,
     x_msg_count           => x_msg_count,
     x_msg_data            => x_msg_data,
     p_khr_id              => l_chr_id,
     p_prog_short_name     => OKL_BOOK_CONTROLLER_PVT.G_PRICE_CONTRACT,
     p_progress_status     => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_COMPLETE);
             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
--srsreeni Bug6011651 ends
          END IF;

        ELSE --For the if condition that checks if the request is of the regular product
          OPEN get_rep_trans_num(p_chr_id);
          FETCH get_rep_trans_num INTO l_alert_name;
          CLOSE get_rep_trans_num;

          DBMS_ALERT.SIGNAL(l_alert_name,l_rep_message);
          COMMIT;
          -- Bug 4541302 - End of Changes
        END IF;
      ELSE
      --PAGARG 25-Feb-2005 Bug 4037658 ends

      print( l_api_name, 'updating the status');
      okl_contract_status_pub.update_contract_status(
                              l_api_version,
                              p_init_msg_list,
                              x_return_status,
                              x_msg_count,
                              x_msg_data,
                              'COMPLETE',
                              p_chr_id );

             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
      --call to cascade status on to lines
      OKL_CONTRACT_STATUS_PVT.cascade_lease_status
            (p_api_version     => l_api_version,
             p_init_msg_list   => p_init_msg_list,
             x_return_status   => x_return_status,
             x_msg_count       => x_msg_count,
             x_msg_data        => x_msg_data,
             p_chr_id          => l_chr_id);

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
--srsreeni Bug6011651 starts
OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
     p_api_version         => l_api_version,
     p_init_msg_list       => p_init_msg_list,
     x_return_status       => x_return_status,
     x_msg_count           => x_msg_count,
     x_msg_data            => x_msg_data,
     p_khr_id              => l_chr_id,
     p_prog_short_name     => OKL_BOOK_CONTROLLER_PVT.G_PRICE_CONTRACT,
     p_progress_status     => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_COMPLETE);
             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
               RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
--srsreeni Bug6011651 ends
    END IF;
    --PAGARG 25-Feb-2005 Bug 4037658 starts
    END IF; -- for p_source_call = 'ESG' check

      IF (p_source_call = 'ESG') THEN
        IF not (l_orig_yn='N' AND l_rep_yn='Y') THEN
          -- rebook contract.
          print( l_api_name, 'calling  mass rebook api');
          --Added by kthiruva for Debugging
          write_to_log('Prior to the call to mass_rebook_after_yield'||x_return_status);
          OKL_MASS_REBOOK_PUB.mass_rebook_after_yield(
                  p_api_version      => l_api_version
                 ,p_init_msg_list    => p_init_msg_list
                 ,x_return_status    => x_return_status
                 ,x_msg_count        => x_msg_count
                 ,x_msg_data         => x_msg_data
                 ,p_chr_id           => l_chr_id);
          --Added by kthiruva for Debugging
          write_to_log('After the call to mass_rebook_after_yield, return status is '||x_return_status);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

          -- after yield processing for an imported contract.
          print( l_api_name, 'calling  import api');
          --Added by kthiruva for Debugging
          write_to_log('Prior to the call to contract_after_yield'||x_return_status);
          OKL_OPEN_INTERFACE_PVT.contract_after_yield(
 	              p_api_version      => l_api_version
 	             ,p_init_msg_list    => p_init_msg_list
 	             ,x_return_status    => x_return_status
 	             ,x_msg_count        => x_msg_count
 	             ,x_msg_data         => x_msg_data
 	             ,p_chr_id           => l_chr_id);

          --Added by kthiruva for Debugging
          write_to_log('After the call to contract_after_yield, return status is '||x_return_status);

          print( l_api_name, 'import api', x_return_status);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          --Bug 8814790: Moved split_asset_after_yield for ESG to be inside the IF condition
          --Added by vdamerla for bug 6344223
          print( l_api_name, 'calling  split asset api');
          --Added by kthiruva for Debugging
          write_to_log('Prior to the call to split_asset_after_yield'||x_return_status);
          OKL_SPLIT_ASSET_PVT.split_asset_after_yield(
             p_api_version      => l_api_version
            ,p_init_msg_list    => p_init_msg_list
            ,x_return_status    => x_return_status
            ,x_msg_count        => x_msg_count
            ,x_msg_data         => x_msg_data
            ,p_chr_id           => l_chr_id);
          --Added by kthiruva for Debugging
          write_to_log('After the call to split_asset_after_yield, return status is '||x_return_status);
          print( l_api_name, 'split asset api', x_return_status);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          --end vdamerla for bug 6344223
        END IF;
 	  ELSE -- For Internal Stream generator
      --PAGARG 25-Feb-2005 Bug 4037658 ends

-- rebook contract.
    print( l_api_name, 'calling  mass rebook api');
    OKL_MASS_REBOOK_PUB.mass_rebook_after_yield(
             p_api_version      => l_api_version
            ,p_init_msg_list    => p_init_msg_list
            ,x_return_status    => x_return_status
            ,x_msg_count        => x_msg_count
            ,x_msg_data         => x_msg_data
            ,p_chr_id           => l_chr_id);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

-- after yield processing for an imported contract.
    print( l_api_name, 'calling  import api');
    OKL_OPEN_INTERFACE_PVT.contract_after_yield(
             p_api_version      => l_api_version
            ,p_init_msg_list    => p_init_msg_list
            ,x_return_status    => x_return_status
            ,x_msg_count        => x_msg_count
            ,x_msg_data         => x_msg_data
            ,p_chr_id           => l_chr_id);

    print( l_api_name, 'import api', x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

   --Bug 8814790: Moved split_asset_after_yield for ISG to be inside the ELSE condition
   --Added by vdamerla for bug 6344223
    print( l_api_name, 'calling  split asset api');
    OKL_SPLIT_ASSET_PVT.split_asset_after_yield(
             p_api_version      => l_api_version
            ,p_init_msg_list    => p_init_msg_list
            ,x_return_status    => x_return_status
            ,x_msg_count        => x_msg_count
            ,x_msg_data         => x_msg_data
            ,p_chr_id           => l_chr_id);
    print( l_api_name, 'split asset api', x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    --end vdamerla for bug 6344223
    --PAGARG 25-Feb-2005 Bug 4037658
    END IF; -- for p_source_call = 'ESG' check

    print( l_api_name, 'end', x_return_status);
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);
  EXCEPTION
	WHEN OKL_API.G_EXCEPTION_ERROR THEN
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;
                IF get_fin_lne_csr%ISOPEN THEN
                  CLOSE get_fin_lne_csr;
                End If;
     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                If ( strms_csr%ISOPEN ) Then
                    CLOSE strms_csr;
                End If;

                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;
                IF get_fin_lne_csr%ISOPEN THEN
                  CLOSE get_fin_lne_csr;
                End If;
	when OTHERS then
             	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                IF l_hdr_csr%ISOPEN THEN
                    CLOSE l_hdr_csr;
                End If;
                IF get_fin_lne_csr%ISOPEN THEN
                  CLOSE get_fin_lne_csr;
                End If;
  end process_streams;
-- End modification 11i10 bakuchib
-- Start modification 11i10 bakuchib
  PROCEDURE check_for_mandatory_streams(
            p_api_version        IN  NUMBER,
            p_init_msg_list      IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2,
            p_chr_id             IN  OKC_K_HEADERS_B.ID%TYPE,
            p_deal_type          IN  VARCHAR2,
            p_stream_types_tbl   IN  okl_create_streams_pub.csm_stream_types_tbl_type,
            x_stream_types_tbl   OUT NOCOPY  okl_create_streams_pub.csm_stream_types_tbl_type) AS
    l_api_name          VARCHAR2(256) := 'CHECK_FOR_MD_STRMS';
    i                   NUMBER;
    styid               NUMBER;
    l_return_status     VARCHAR2(1);
    j                   NUMBER;
    k                   NUMBER :=0;
    ln_dummy            NUMBER := 0;
    ln_income           NUMBER := 0;
    l_strm_name         VARCHAR2(256) := OKL_API.G_MISS_CHAR;
    l_blnInclude        VARCHAR2(3) := OKL_API.G_TRUE;
    l_blnhasfees        VARCHAR2(3) := OKL_API.G_FALSE;
    l_blnhasfin         VARCHAR2(3) := OKL_API.G_FALSE;
    TYPE l_streams_tbl_type IS TABLE OF VARCHAR2(256)
         INDEX BY BINARY_INTEGER;
    TYPE fin_id_tbl_type IS TABLE OF NUMBER
         INDEX BY BINARY_INTEGER;
    l_streams_tbl       l_streams_tbl_type;
    l_fin_id_tbl        fin_id_tbl_type;
    l_strm_type_id_tbl okl_strm_type_id_tbl_type;
    -- get Stream name
    CURSOR strm_name_csr (styid NUMBER)
    IS
    SELECT tl.name name,
           stm.stream_type_class stream_type_class,
           tl.description alloc_basis,
           stm.capitalize_yn capitalize_yn,
           stm.periodic_yn  periodic_yn
    FROM okl_strm_type_b stm,
         okl_strm_type_tl tl
    WHERE tl.id = stm.id
    AND tl.language = 'US'
    AND stm.id = styid;
    --get finance strms
   -- nikshah -- Bug # 5484903 Fixed,
  -- Removed CURSOR c_finance_strm_csr

    -- Get the stream type id
    CURSOR l_strmid_csr (strmName VARCHAR2)
    IS
    SELECT id styid
    FROM okl_strm_type_tl
    WHERE LANGUAGE = 'US'
    AND NAME = strmName;
    -- get the Contract line info
    CURSOR l_line_rec_csr(chrid NUMBER)
    IS
    SELECT cle.id
    FROM okc_k_lines_b cle,
         okc_line_styles_b lse,
         okc_statuses_b sts
    WHERE cle.dnz_chr_id = chrid
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'FREE_FORM1'
    AND sts.code = cle.sts_code
--Start of bug#3121708 modification BAKUCHIB
    AND sts.ste_code NOT IN ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED');
--End of bug#3121708 modification BAKUCHIB
    -- Get all valid fee lines
    CURSOR l_fee_type_csr ( chrId NUMBER, feeId NUMBER ) IS
    SELECT kle.fee_type
    FROM okl_k_lines kle,
         okc_k_lines_b cle,
         okc_line_styles_b lse,
         okc_statuses_b sts
    WHERE cle.lse_id = lse.id
    AND lse.lty_code = 'FEE'
    AND cle.dnz_chr_id = chrid
    AND cle.id = kle.id
    AND kle.id = feeId
    AND sts.code = cle.sts_code
--Start of bug#3121708 modification BAKUCHIB
    AND sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED');
--End of bug#3121708 modification BAKUCHIB

    -- To check if the chr_id has Financed fee feetype defined
    CURSOR l_fin_type_csr (chrId NUMBER)
    IS
    SELECT cle.id fin_id
    FROM okc_k_lines_b cle,
         okc_line_styles_b lse,
         okl_k_lines kle,
         okc_statuses_b sts
    WHERE cle.dnz_chr_id = chrId
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'FEE'
    AND cle.id = kle.id
    AND sts.code = cle.sts_code
    AND sts.ste_code NOT IN ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED')
    AND kle.fee_type = 'FINANCED';

	-- Code required for rollover quote- HKPATEL
    CURSOR l_rollover_csr(chrId NUMBER)
    IS
    SELECT cle.id fin_id
    FROM okc_k_lines_b cle,
         okc_line_styles_b lse,
         okl_k_lines kle,
         okc_statuses_b sts
    WHERE cle.dnz_chr_id = chrId
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'FEE'
    AND cle.id = kle.id
    AND sts.code = cle.sts_code
    AND sts.ste_code NOT IN ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED')
    AND kle.fee_type = 'ROLLOVER';

    CURSOR l_link_rollover_csr(cleId NUMBER)
    IS
    SELECT okc.id kle_id
    FROM   okc_k_lines_b okc,
       	   okl_k_lines kle ,
       	   okc_line_styles_b lse
    WHERE  okc.cle_id = cleId
    AND    okc.lse_id = lse.id
    AND    okc.id = kle.id
    AND    lty_code = 'LINK_FEE_ASSET';
    -- Code for rollover quotes ends here- HKPATEL

    -- To get the Subsidy Income Accural stream type id
    -- and also fetch the sub line id
/*
    CURSOR get_sub_line_csr (p_dnz_chr_id okc_k_lines_b.dnz_chr_id%TYPE)
    IS
    SELECT TO_NUMBER(sgn.value) sty_id,
           cle.id
    FROM okl_sgn_translations sgn,
         okl_strm_type_b sty,
         okl_subsidies_v sub,
         okl_k_lines kle,
         okc_statuses_b sts,
         okc_line_styles_b lse,
         okc_k_lines_b cle
    WHERE cle.dnz_chr_id = p_dnz_chr_id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'SUBSIDY'
    AND sts.code = cle.sts_code
    AND sts.ste_code NOT IN ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED')
    AND cle.id = kle.id
    AND TO_CHAR(kle.sty_id) = sgn.object1_id1
    AND sgn.object1_id1 = TO_CHAR(sty.id)
    AND sgn.jtot_object1_code = 'OKL_STRMTYP'
    AND kle.subsidy_id = sub.id;
*/
    CURSOR get_sub_line_csr(p_dnz_chr_id IN okc_k_lines_b.dnz_chr_id%TYPE)
    IS
	SELECT kle.sty_id,
	       cle.id
--srsreeni Bug5699923 Start
		,sts.ste_code
--srsreeni Bug5699923 End
    FROM okl_k_lines kle,
	     okc_k_lines_b cle,
		 okl_subsidies_v sub,
		 okc_statuses_b sts,
		 okc_line_styles_b lse
    WHERE cle.dnz_chr_id = p_dnz_chr_id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'SUBSIDY'
    AND sts.code = cle.sts_code
    AND sts.ste_code NOT IN ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED')
    AND cle.id = kle.id
    AND kle.subsidy_id = sub.id;

	     -- srsreeni - Bug#5699923 - Added - Start
 	     CURSOR c_is_loan_khr(p_chr_id OKC_K_HEADERS_B.ID%TYPE) IS
 	       SELECT 'Y'
 	         FROM OKL_K_HEADERS
 	         WHERE ID = p_chr_id
 	           AND DEAL_TYPE = 'LOAN';

 	     l_is_loan_khr VARCHAR2(1) := 'N';
 	     -- srsreeni - Bug#569923 - Added - End

    l_fee_type_rec      l_fee_type_csr%ROWTYPE;
    l_strm_name_rec     strm_name_csr%ROWTYPE;
    l_strmid_rec        l_strmid_csr%ROWTYPE;
    r_strmid_rec        l_strmid_csr%ROWTYPE;
    m_strmid_rec        l_strmid_csr%ROWTYPE;

	-- Code added by HKPATEL for user defined streams
	l_flag 					VARCHAR2(3) := 'YES';

	-- Added code ends here for user defined streams
        -- Added by mansrini for Bug 5111058 (Fwd port bug 5061024)
           l_pricing_name       VARCHAR2(40);
       -- end mansrini

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    l_streams_tbl(1) := 'RENT';
    l_streams_tbl(2) := 'PRINCIPAL BALANCE';
    l_streams_tbl(3) := 'RATE PARTICIPATION';
    l_streams_tbl(4) := 'INTEREST PAYMENT';
    l_streams_tbl(5) := 'PRINCIPAL PAYMENT';
    l_streams_tbl(6) := 'FAS 91 FEE INCOME';
    l_streams_tbl(7) :=  'RENTAL ACCRUAL';
    l_streams_tbl(8) := 'FINANCED EXTENSION FEE INCOME';
    l_streams_tbl(9) := 'RATE SUBSIDY';
    l_streams_tbl(10) := 'PRE-TAX INCOME';
    l_streams_tbl(11) := 'RENT';--'PRESENT VALUE RESIDUAL'; --TBC
    l_streams_tbl(12) := 'RENT';--'PV GUARANTEE';--TBC
    l_streams_tbl(13) := 'RESIDUAL VALUE INSURANCE PREMIUM';
    l_streams_tbl(14) := 'GUARANTEED RESIDUAL INSURED'; -- RVI takes care of requesting by default.
    l_streams_tbl(15) := 'RENT';--'PRESENT VALUE INSURED RESIDUAL';--TBC
    l_streams_tbl(16) := 'RENT';--'UNEARNED INCOME';
    l_streams_tbl(17) := 'RENT'; --'DEFERRED INCOME';
    l_streams_tbl(18) := 'TERMINATION VALUE';
    l_streams_tbl(19) := 'STIP LOSS VALUE';
    l_streams_tbl(20) := 'LOAN PAYMENT';
    l_streams_tbl(21) := 'FEE INCOME';
    l_streams_tbl(22) := 'PERIODIC EXPENSE PAYABLE';
    l_streams_tbl(23) := 'INTEREST INCOME';
    -- Populating the O/P Stream Type tables with the existing one
    IF p_stream_types_tbl.COUNT > 0 THEN
      FOR i IN p_stream_types_tbl.FIRST..p_stream_types_tbl.LAST LOOP
        x_stream_types_tbl(i).stream_type_id := p_stream_types_tbl(i).stream_type_id;
		x_stream_types_tbl(i).pricing_name   := p_stream_types_tbl(i).pricing_name;
        x_stream_types_tbl(i).kle_asset_id := p_stream_types_tbl(i).kle_asset_id;
        x_stream_types_tbl(i).kle_fee_id := p_stream_types_tbl(i).kle_fee_id;
        IF x_stream_types_tbl(i).kle_fee_id <> OKL_API.G_MISS_NUM AND
          l_blnhasfees = OKL_API.G_FALSE THEN
          l_blnhasfees := OKL_API.G_TRUE;
        END IF;
      END LOOP;
    END IF;

	-- Code commented by HKPATEL for user defined stream
	/*
    -- Scan through Stream types tables
    FOR i IN l_streams_tbl.FIRST..l_streams_tbl.LAST LOOP
      j := 1;
      -- Validate the Stream type
      WHILE (( l_strm_name <> l_streams_tbl(i) ) AND ( j <= x_stream_types_tbl.COUNT))  LOOP
        OPEN  strm_name_csr ( x_stream_types_tbl(j).stream_type_id );
        FETCH strm_name_csr into l_strm_name_rec;
        IF strm_name_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Stream Type id');
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE strm_name_csr;
        l_strm_name := l_strm_name_rec.name;
        j := j + 1;
      END LOOP;
      IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
        EXIT WHEN (x_return_status <> OKL_API.G_RET_STS_SUCCESS);
      END IF;
      IF ((j > x_stream_types_tbl.COUNT ) AND ( l_strm_name <> l_streams_tbl(i))) THEN
        l_blnInclude := OKL_API.G_FALSE;
        -- If the Deal type Containing Lease
        IF (INSTR( p_deal_type, 'LEASE') > 0) THEN
          -- Then we can include RENT,RENT,RENT,RESIDUAL VALUE INSURANCE PREMIUM
          -- RENT,RENT
          IF l_streams_tbl(i) = 'RENT' OR
             l_streams_tbl(i) = 'RESIDUAL VALUE INSURANCE PREMIUM' THEN
            l_blnInclude := OKL_API.G_TRUE;
          -- then we can include PRE-TAX INCOME if Deal type is Lease Direct finance
          -- then we can include PRE-TAX INCOME if Deal type is Lease Sale Type
          ELSIF l_streams_tbl(i) = 'PRE-TAX INCOME' AND
                trim(p_deal_type) IN ('LEASEDF','LEASEST') THEN
            l_blnInclude := OKL_API.G_TRUE;
          -- Then we can include FINANCED EXTENSION FEE INCOME if the Lease contract has Fee line
          ELSIF l_streams_tbl(i) = 'FINANCED EXTENSION FEE INCOME' AND
                l_blnhasfees = OKL_API.G_TRUE THEN
            l_blnInclude := OKL_API.G_TRUE;
          -- then we can include RENTAL ACCRUAL if Deal type is Lease operating
          ELSIF l_streams_tbl(i) = 'RENTAL ACCRUAL' AND
                trim(p_deal_type) = 'LEASEOP' THEN
            l_blnInclude := OKL_API.G_TRUE;
          END IF;
        -- If the Deal type Containing Loan
        ELSIF (INSTR(p_deal_type, 'LOAN') > 0) THEN
          -- Then we can include PRINCIPAL BALANCE,INTEREST PAYMENT,PRINCIPAL PAYMENT,
          -- LOAN PAYMENT, PRE-TAX INCOME
          IF l_streams_tbl(i) = 'PRINCIPAL BALANCE' OR
             l_streams_tbl(i) = 'INTEREST PAYMENT' OR
             l_streams_tbl(i) = 'PRINCIPAL PAYMENT' OR
             l_streams_tbl(i) = 'LOAN PAYMENT' OR
             l_streams_tbl(i) = 'PRE-TAX INCOME' THEN
            l_blnInclude := OKL_API.G_TRUE;
          END IF;
        END IF;
        -- We include the below streams independent of the Deal type but
        -- Conditional basis of weather the contact has Fee line
        -- RATE PARTICIPATION,FAS 91 FEE INCOME,RATE SUBSIDY,
        -- TERMINATION VALUE,STIP LOSS VALUE,FEE INCOME,PERIODIC EXPENSE PAYABLE
        IF (l_streams_tbl(i) = 'RATE PARTICIPATION' AND
            l_blnhasfees = OKL_API.G_TRUE) OR
            (l_streams_tbl(i) = 'RATE SUBSIDY' AND
             l_blnhasfees = OKL_API.G_TRUE) OR
            (l_streams_tbl(i) = 'FEE INCOME' AND
             l_blnhasfees = OKL_API.G_TRUE) OR
            (l_streams_tbl(i) = 'FAS 91 FEE INCOME') OR
            (l_streams_tbl(i) = 'TERMINATION VALUE') OR
            (l_streams_tbl(i) = 'STIP LOSS VALUE') THEN
          l_blnInclude := OKL_API.G_TRUE;
        -- Start of BUG#2997914 fix
        END IF;
        -- End of BUG#2997914 fix
        -- Handling only fee receivable Streams
        IF l_streams_tbl(i) = 'FEE INCOME' AND
           l_blnInclude = OKL_API.G_TRUE  THEN
          FOR k IN p_stream_types_tbl.FIRST..p_stream_types_tbl.LAST   LOOP
            IF p_stream_types_tbl(k).kle_fee_id <> OKL_API.G_MISS_NUM THEN
              OPEN  l_fee_type_csr (p_chr_id,
                                    p_stream_types_tbl(k).kle_fee_id);
              FETCH l_fee_type_csr INTO l_fee_type_rec;
              CLOSE l_fee_type_csr;
              IF l_fee_type_rec.fee_type IN ('PASSTHROUGH','MISCELLANEOUS') THEN
                l_blnInclude := OKL_API.G_TRUE;
                EXIT;
              ELSE
                l_blnInclude := OKL_API.G_FALSE;
              END IF;
            END IF;
          END LOOP;
        END IF;
        IF (l_blnInclude = OKL_API.G_TRUE) THEN
          OPEN  l_strmid_csr(l_streams_tbl(i));
          FETCH l_strmid_csr into l_strmid_rec;
          IF l_strmid_csr%NOTFOUND THEN
            okl_api.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'Stream Type');
            x_return_status := OKL_API.G_RET_STS_ERROR;
            EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          CLOSE l_strmid_csr;
          styid := l_strmid_rec.styid;
          -- Then we can include PRINCIPAL BALANCE,INTEREST PAYMENT,PRINCIPAL PAYMENT,
          -- LOAN PAYMENT
          -- This will be true for Loan deal type
          IF (l_streams_tbl(i) = 'PRINCIPAL BALANCE' OR
              l_streams_tbl(i) = 'INTEREST PAYMENT' OR
              l_streams_tbl(i) = 'PRE-TAX INCOME' OR
              l_streams_tbl(i) = 'PRINCIPAL PAYMENT' OR
              l_streams_tbl(i) = 'LOAN PAYMENT') AND
              p_deal_type = 'LOAN' THEN
            FOR l_line_rec in l_line_rec_csr(p_chr_id) LOOP
              x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := styid;
              x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_asset_id := l_line_rec.id;
            END LOOP;
-- Added by dedey, arun, since mandatory sterams are not getting picked up
-- during Lease Contract stream generation
-- starts 06/14/2002
          ELSE
            x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := styid;
-- end 06/14/2002
          END IF;
        END IF;
      END IF;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

	--Code commented by HKPATEL for userdefined streams */
/*
    IF x_stream_types_tbl.COUNT > 0 THEN
      FOR l_fin_type_rec IN l_fin_type_csr(chrId => p_chr_id) LOOP
        FOR r_finance_strm_rec IN c_finance_strm_csr LOOP
          x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := r_finance_strm_rec.id;
          x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_asset_id := l_fin_type_rec.fin_id;
        END LOOP;
        l_blnhasfin := OKL_API.G_TRUE;
      END LOOP;
      -- Now we get the Subsidy Income Accural stream type id , wil be fetched from
      -- Subsidy setup
      FOR get_sub_line_rec IN get_sub_line_csr (p_dnz_chr_id => p_chr_id) LOOP
        x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := get_sub_line_rec.sty_id;
        x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_fee_id := get_sub_line_rec.id;
      END LOOP;
    END IF;

	-- Requesting streams for rollover quote- HKPATEL
    IF x_stream_types_tbl.COUNT > 0 THEN
	  IF l_link_fee_asset_yn = 'FALSE' THEN
        FOR l_rollover_rec IN l_rollover_csr(chrId => p_chr_id) LOOP
		  FOR r_finance_strm_rec IN c_finance_strm_csr LOOP
            x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := r_finance_strm_rec.id;
            x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_asset_id := l_rollover_rec.fin_id;
          END LOOP;
        END LOOP;
	  ELSIF l_link_fee_asset_yn = 'TRUE' THEN
        FOR l_rollover_rec IN l_rollover_csr(chrId => p_chr_id) LOOP
		  FOR l_link_rollover_rec IN l_link_rollover_csr(cleId => l_rollover_rec.fin_id) LOOP
		    FOR r_finance_strm_rec IN c_finance_strm_csr LOOP
              x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := r_finance_strm_rec.id;
              x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_asset_id := l_link_rollover_rec.kle_id;
            END LOOP;
		  END LOOP;
		END LOOP;
      END IF;
	END IF;
	-- Stream request for rollover quote ends here - HKPATEL

*/
	     -- srsreeni - Bug#5699923 - Added - Start
 	     -- Determine if the contract is a loan contract (rev-loan excluded)
 	     OPEN c_is_loan_khr(p_chr_id);
 	       FETCH c_is_loan_khr INTO l_is_loan_khr;
 	     CLOSE c_is_loan_khr;
 	     -- srsreeni - Bug#5699923 - Added - End
    IF x_stream_types_tbl.COUNT > 0 THEN
      -- Now we get the Subsidy Income Accural stream type id , wil be fetched from
      -- Subsidy setup
      FOR get_sub_line_rec IN get_sub_line_csr (p_dnz_chr_id => p_chr_id) LOOP
         -- srsreeni - Bug#5699923 - Added - Start
 	         -- DONOT request SuperTrump to generate streams
 	         -- for TERMINATED lines. Fix for Bug#5699923 deals with LOAN
 	         -- contracts alone and hence this check is restricted to LOAN
           --vdamerla Bug6149951 start commented the following as streams should not be requested for any terminated asset line
           --of a contract of any book classification and not just LOAN
           --          IF l_is_loan_khr ='Y' AND get_sub_line_rec.ste_code = 'TERMINATED' THEN
          IF get_sub_line_rec.ste_code = 'TERMINATED' THEN
           --srsreeni Bug6149951 ends
 	             NULL; -- Donot request streams if LOAN and line TERMINATED
 	           ELSE
	    get_dependent_stream_types
        (
          p_khr_id => p_chr_id,
          p_primary_sty_id => get_sub_line_rec.sty_id,
          x_return_status => l_return_status,
          x_dependent_sty_id => l_strm_type_id_tbl
        );
        IF l_return_status = 'E' THEN
		  l_return_status := 'S';
		END IF;

        IF l_strm_type_id_tbl.COUNT > 0 THEN
          FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
            x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := l_strm_type_id_tbl(i).id;
		    x_stream_types_tbl(x_stream_types_tbl.COUNT).pricing_name := l_strm_type_id_tbl(i).pricing_name;
            x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_fee_id := get_sub_line_rec.id;
		  END LOOP;
		END IF;

           -- Added by bkatraga for bug 5061024
           -- To generate the primary stream of purpose Subsidy
           get_primary_pricing_name
           (
            p_khr_id => p_chr_id,
            p_sty_id => get_sub_line_rec.sty_id,
            x_return_status => l_return_status,
            x_primary_pricing_name => l_pricing_name
           );

           IF l_return_status = 'E' THEN
              l_return_status := 'S';
           END IF;

           IF l_pricing_name IS NOT NULL THEN
              x_stream_types_tbl(x_stream_types_tbl.COUNT+1).stream_type_id := get_sub_line_rec.sty_id;
              x_stream_types_tbl(x_stream_types_tbl.COUNT).pricing_name := l_pricing_name;
              x_stream_types_tbl(x_stream_types_tbl.COUNT).kle_fee_id := get_sub_line_rec.id;
           END IF;
           -- end bkatraga for bug 5061024
         END IF; -- Check for terminated lines on a LOAN contract
 	         -- srsreeni - Bug#5699923 - Added - End

      END LOOP;
    END IF;

	-- Code for user defined streams ends here


    OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF get_sub_line_csr%ISOPEN THEN
        CLOSE get_sub_line_csr;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_strmid_csr%ISOPEN THEN
        CLOSE l_strmid_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_fee_type_csr%ISOPEN THEN
        CLOSE l_fee_type_csr;
      END IF;
      IF l_fin_type_csr%ISOPEN THEN
        CLOSE l_fin_type_csr;
      END IF;

      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF get_sub_line_csr%ISOPEN THEN
        CLOSE get_sub_line_csr;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_strmid_csr%ISOPEN THEN
        CLOSE l_strmid_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_fee_type_csr%ISOPEN THEN
        CLOSE l_fee_type_csr;
      END IF;
      IF l_fin_type_csr%ISOPEN THEN
        CLOSE l_fin_type_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS THEN
      IF get_sub_line_csr%ISOPEN THEN
        CLOSE get_sub_line_csr;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_strmid_csr%ISOPEN THEN
        CLOSE l_strmid_csr;
      END IF;

      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_fee_type_csr%ISOPEN THEN
        CLOSE l_fee_type_csr;
      END IF;
      IF l_fin_type_csr%ISOPEN THEN
        CLOSE l_fin_type_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END check_for_mandatory_streams;
-- End modification 11i10 bakuchib
  Procedure extract_security_deposit( p_api_version IN  NUMBER,
                               p_chr_id  IN NUMBER,
                               p_deal_type IN VARCHAR2,
                               p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
                               x_msg_count OUT NOCOPY NUMBER,
                               x_msg_data  OUT NOCOPY VARCHAR2,
                               x_return_status OUT NOCOPY VARCHAR2,
                               px_csm_lease_header IN OUT NOCOPY okl_create_streams_pub.csm_lease_rec_type,
                               px_csm_one_off_fee_tbl  IN  OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
                               px_csm_periodic_expenses_tbl IN OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
                               px_csm_stream_types_tbl IN OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type)  AS

     l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_SECURITY_DEPOSIT';
     l_api_version	CONSTANT NUMBER	      := 1;

     l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
     x                  NUMBER := 0;

     CURSOR c_deposit_date( chrId NUMBER) IS
     SELECT FND_DATE.canonical_to_date(rule_information5) date_returned
     FROM   okc_rules_b
     WHERE  dnz_chr_id  = chrId
         AND  rule_information_category = 'LASDEP';

     l_c_deposit_date c_deposit_date%ROWTYPE;

     cursor l_line_rec_csr1( chrid NUMBER, lnetype VARCHAR2 ) is
     select kle.id,
           kle.oec,
           kle.residual_code,
           kle.capital_amount,
           kle.delivered_date,
           kle.date_funding_required,
           kle.residual_grnty_amount,
           kle.date_funding,
           kle.residual_value,
           kle.amount,
           kle.price_negotiated,
           kle.start_date,
           kle.end_date,
           kle.orig_system_id1,
	   kle.fee_type,
	   kle.initial_direct_cost,
           tl.item_description,
           tl.name ,
           kle.orig_contract_line_id --sechawla 15-jul-09 PRB ESG Enhancements : added orig_contract_line_id
     from  okl_k_lines_full_v kle,
           okc_line_styles_b lse,
           okc_k_lines_tl tl,
	   okc_statuses_b sts
     where KLE.LSE_ID = LSE.ID
          and lse.lty_code = lnetype
	  and tl.id = kle.id
          and tl.language = userenv('LANG')
          and kle.dnz_chr_id = chrid
	  and kle.fee_type = 'SECDEPOSIT'
	  and sts.code = kle.sts_code
--Start of bug#3121708 modification BAKUCHIB
	  and sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED');
--End of bug#3121708 modification BAKUCHIB


--- sgorantl added for bug#4084201
 CURSOR fee_strm_type_csr1 (kleid NUMBER,
                            linestyle VARCHAR2 )
  IS
  SELECT stl.ST_GEN_TMPT_SET_NAME strm_name,
         stl.pricing_name pricing_name,
         kle.id   line_id,
         stl.id   styp_id
  FROM OKL_STRM_TMPT_LINES_UV stl,
       okc_k_items cim,
       okl_k_lines_full_v kle,
       okc_line_styles_b ls
  WHERE cim.cle_id = kle.id
  AND ls.id = kle.lse_id
  AND ls.lty_code = 'FEE'
  AND cim.object1_id1 = stl.primary_sty_id
  AND cim.object1_id2 = '#'
  AND kle.id = kleid
  AND stl.pricing_name is not null;
--- sgorantl added for bug#4084201 --end


  -- sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;

    l_PROSPECTIVE_REBOOK_YN   VARCHAR2(1);


     l_line_rec1           l_line_rec_csr1%ROWTYPE;
     l_rl_rec             l_rl_csr%ROWTYPE;
     l_rl_rec1            l_rl_csr1%ROWTYPE;
     l_rl_rec2            l_rl_csr2%ROWTYPE;
     l_fee_strm_type_rec1  fee_strm_type_csr1%ROWTYPE;
     l_fee_strm_type_rec  fee_strm_type_csr%ROWTYPE;
     l_strm_name_rec      strm_name_csr%ROWTYPE;

     l_hdr_rec l_hdr_csr%ROWTYPE;

     l_level_type NUMBER;
     l_strm_name VARCHAR2(200);
     i BINARY_INTEGER := 0;
     j BINARY_INTEGER := 0;
     k BINARY_INTEGER := 0;
     l BINARY_INTEGER := 0;
     m BINARY_INTEGER := 0;
     idx BINARY_INTEGER := 0;


  Begin

    print( l_api_name, 'begin');

    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,

			x_return_status => x_return_status);

	    -- check if ac1tivity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    open   get_rebook_type ;
    fetch  get_rebook_type into l_PROSPECTIVE_REBOOK_YN ;
    close  get_rebook_type;

    l := px_csm_one_off_fee_tbl.COUNT;
    m := px_csm_stream_types_tbl.COUNT;

    FOR l_lne_rec1 in l_line_rec_csr1 ( p_chr_id, 'FEE' )
    LOOP

        IF( l_lne_rec1.fee_type = 'SECDEPOSIT' )  THEN
          --- sgorantl added for bug#4084201 --end
             OPEN  fee_strm_type_csr1  ( l_lne_rec1.id, 'FEE' );
             FETCH fee_strm_type_csr1 into l_fee_strm_type_rec1;
             CLOSE fee_strm_type_csr1;
          IF l_fee_strm_type_rec1.PRICING_NAME IS NOT NULL THEN
          --end
             OPEN  fee_strm_type_csr  ( l_lne_rec1.id, 'FEE' );
             FETCH fee_strm_type_csr into l_fee_strm_type_rec;
             CLOSE fee_strm_type_csr;

             l_level_type := l_fee_strm_type_rec.styp_id;
             l_strm_name  := l_fee_strm_type_rec.strm_name;

            --px_csm_lease_header.security_deposit_amount := l_lne_rec.amount;
            --px_csm_lease_header.date_sec_deposit_collected := l_lne_rec.start_date;

             print( l_api_name, 'requesting sec dep streams');
             m := m + 1;
             px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
             px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec1.id;
             --- sgorantl added for bug#4084201
             px_csm_stream_types_tbl(m).pricing_name   := l_fee_strm_type_rec1.PRICING_NAME;
             --end
             l := l + 1;
             px_csm_one_off_fee_tbl(l).description       := l_strm_name;
             px_csm_one_off_fee_tbl(l).fee_type          := 'SECDEPOSIT';
             px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
             px_csm_one_off_fee_tbl(l).kle_fee_id        := l_lne_rec1.id;

             --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
             if l_PROSPECTIVE_REBOOK_YN = 'Y' then
      		    px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_lne_rec1.orig_contract_line_id;
      		 end if;

             OPEN  l_rl_csr1 ( 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_lne_rec1.id );
             FETCH l_rl_csr1 INTO l_rl_rec1;
             CLOSE l_rl_csr1;
             px_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(nvl(l_rl_rec1.RULE_INFORMATION6,'0'));
             IF(l_rl_rec1.RULE_INFORMATION2 IS NULL or l_rl_rec1.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
               px_csm_one_off_fee_tbl(l).date_start        := l_lne_rec1.start_date ;
             ELSE
               px_csm_one_off_fee_tbl(l).date_start        := FND_DATE.canonical_to_date(l_rl_rec1.RULE_INFORMATION2);
             END IF;

             OPEN  c_deposit_date ( TO_NUMBER(p_chr_id) );
             FETCH c_deposit_date INTO l_c_deposit_date;
	     CLOSE c_deposit_date;

             OPEN l_hdr_csr( p_chr_id );
             FETCH l_hdr_csr INTO l_hdr_rec;
             CLOSE l_hdr_csr;

             px_csm_one_off_fee_tbl(l).date_paid         := nvl(l_c_deposit_date.date_returned, l_hdr_rec.end_date);

             print( l_api_name, 'amnt='||to_char(px_csm_one_off_fee_tbl(l).amount)||
  	                        'dateStart='||to_char(px_csm_one_off_fee_tbl(l).date_paid));

        End If;
      END IF;
    END LOOP;

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    print( l_api_name, 'end', x_return_status);

    Exception

	when OKL_API.G_EXCEPTION_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                If (fee_strm_type_csr1%ISOPEN) Then
                    CLOSE fee_strm_type_csr1;
                End If;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(

			p_api_name  => l_api_name,

			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                If (fee_strm_type_csr%ISOPEN) Then
                    CLOSE fee_strm_type_csr;
                End If;

	when OTHERS then
      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                If (fee_strm_type_csr%ISOPEN) Then
                    CLOSE fee_strm_type_csr;
                End If;

                If (fee_strm_type_csr1%ISOPEN) Then
                    CLOSE fee_strm_type_csr1;
                End If;

  end extract_security_deposit;
-- Start modification 11i10 release
--------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : extract_subsidized_lines
-- Description          : extraction of subsidized lines for amortized
--                        accounting methode code
-- Business Rules       : extraction of subsidized lines for amortized
--                        accounting methode code
-- Parameters           : p_chr_id, p_csm_line_details_tbl and
--                        px_csm_one_off_fee_tbl
-- Version              : 1.0
-- History              : BAKUCHIB  21-oct-2003
--                      : BAKUCHIB  24-FEB-2004
--                      : BAKUCHIB  19-MAR-2004
-- End of Commnets
--------------------------------------------------------------------------------
  PROCEDURE extract_subsidized_lines(p_api_version          IN  NUMBER,
                                     p_init_msg_list        IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
                                     x_return_status        OUT NOCOPY VARCHAR2,
                                     x_msg_count            OUT NOCOPY NUMBER,
                                     x_msg_data             OUT NOCOPY VARCHAR2,
                                     p_chr_id               IN NUMBER,
                                     px_csm_one_off_fee_tbl IN  OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type)

  AS
    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_SUBSIDIZED_LINES';
    l_csm_one_off_fee_tbl    okl_create_streams_pub.csm_one_off_fee_tbl_type := px_csm_one_off_fee_tbl;
    i                        BINARY_INTEGER         := 0;
    lv_acc_mtd_code          okl_subsidies_b.accounting_method_code%TYPE := NULL;
    lv_strm_desc             VARCHAR2(200);
    ln_sub_id                okc_k_lines_b.id%TYPE := NULL;
    ln_dummy                 NUMBER := 0;
    ln_cap_wos               okl_k_lines.capital_amount%TYPE := 0;
    ln_cap_amt               okl_k_lines.capital_amount%TYPE := 0;
    ln_cap_dis               okl_k_lines.capital_amount%TYPE := 0;
    l_asbv_tbl               asbv_tbl_type;
	l_sty_id                 NUMBER;
	l_dep_sty_id             NUMBER;
	l_return_status          VARCHAR2(1);
    -- get Asset lines for the contract
    CURSOR get_asset_lines_csr (p_chr_id okc_k_lines_b.id%TYPE)
    IS
    SELECT cle.id,
           NVL(kle.date_funding,cle.start_date) date_funding ,
           kle.orig_contract_line_id --sechawla 15-jun-09 PRB ESG Enhancement : added orig_contract_line_id
    FROM okc_k_lines_b cle,
         okl_k_lines kle,
         okc_line_styles_b lse
    WHERE cle.dnz_chr_id = p_chr_id
    AND cle.sts_code NOT IN ('HOLD', 'EXPIRED', 'CANCELLED','ABANDONED')
    AND cle.id = kle.id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'FREE_FORM1';
    -- get the accouting method to send only Amoritized Subsidy lines
    --Modified bug 9306619 to not pick ABANDONED subsidy lines
    -- get the accouting method to send only Amoritized Subsidy lines
    CURSOR get_acc_mth_code (p_line_id OKL_K_LINES.ID%TYPE)
    IS
    SELECT subb.accounting_method_code,
           cle.id
    FROM okl_subsidies_b subb,
         okc_k_lines_b cle_fin,
         okc_line_styles_b lse_fin,
         okc_k_lines_b cle,
         okl_k_lines kle,
         okc_line_styles_b lse
    WHERE cle.cle_id = p_line_id
    AND cle.id = kle.id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'SUBSIDY'
    AND cle.sts_code <> 'ABANDONED'
    AND subb.id = kle.subsidy_id
    AND cle_fin.id = cle.cle_id
    AND cle_fin.lse_id = lse_fin.id
    AND lse_fin.lty_code = 'FREE_FORM1';
    -- Validate the contract has Subsidy line
    CURSOR validate_sub_line (p_dnz_chr_id OKC_K_LINES_B.DNZ_CHR_ID%TYPE)
    IS
    SELECT 1
    FROM dual
    WHERE EXISTS (SELECT '1'
                  FROM okl_subsidies_b subb,
                       okc_k_lines_b cle_fin,
                       okc_line_styles_b lse_fin,
                       okc_k_lines_b cle,
                       okl_k_lines kle,
                       okc_line_styles_b lse
                  WHERE cle.dnz_chr_id = p_dnz_chr_id
                  AND cle.cle_id = cle_fin.id
                  AND cle.dnz_chr_id = cle_fin.dnz_chr_id
                  AND cle.id = kle.id
                  AND cle.lse_id = lse.id
                  AND lse.lty_code = 'SUBSIDY'
                  AND subb.id = kle.subsidy_id
                  AND cle_fin.id = cle.cle_id
                  AND cle_fin.lse_id = lse_fin.id
                  AND lse_fin.lty_code = 'FREE_FORM1');
    -- To get the Subsidy Income Accural Description
	-- Changed for bug 4044089 by HKPATEL 12/02/2004
    CURSOR get_sub_income_strm_csr (p_dnz_chr_id IN okc_k_lines_b.dnz_chr_id%TYPE,
                                    p_sub_cle_id IN okc_k_lines_b.id%TYPE)
    IS

	SELECT kle.sty_id
    FROM okl_k_lines kle,
	     okc_k_lines_b cle,
		 okc_line_styles_b lse,
         okl_subsidies_v sub

    WHERE cle.dnz_chr_id = p_dnz_chr_id
    AND cle.id = p_sub_cle_id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'SUBSIDY'
    AND cle.id = kle.id
    AND kle.subsidy_id = sub.id;
	/*
    SELECT sty_inc.code strm_desc
    FROM okl_sgn_translations sgn,
         okl_strm_type_b sty_inc,
         okl_strm_type_b sty,
         okl_subsidies_v sub,
         okl_k_lines kle,
         okc_line_styles_b lse,
         okc_k_lines_b cle
    WHERE cle.dnz_chr_id = p_dnz_chr_id
    AND cle.id = p_sub_cle_id
    AND cle.lse_id = lse.id
    AND lse.lty_code = 'SUBSIDY'
    AND cle.id = kle.id
    AND TO_CHAR(kle.sty_id) = sgn.object1_id1
    AND sgn.object1_id1 = TO_CHAR(sty.id)
    AND TO_CHAR(sty_inc.id) = sgn.value
    AND sgn.jtot_object1_code = 'OKL_STRMTYP'
    AND kle.subsidy_id = sub.id;
	*/
	-- New code for bug 4044089 by HKPATEL 12/02/2004
    CURSOR get_strm_type_code (p_sty_id IN okl_strm_type_b.ID%TYPE)
    IS

	SELECT code
    FROM okl_strm_type_b
    WHERE id = p_sty_id;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;
    l_PROSPECTIVE_REBOOK_YN   VARCHAR2(1);

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- check if ac1tivity started successfully
    IF  (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE  OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    open  get_rebook_type;
    fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN;
    close get_rebook_type;


    OPEN  validate_sub_line (p_dnz_chr_id => p_chr_id );
    FETCH validate_sub_line INTO ln_dummy;
    CLOSE validate_sub_line;
    IF ln_dummy = 1 THEN
      IF l_csm_one_off_fee_tbl.COUNT > 0 THEN
          -- Get the last record of each one off table
        i := l_csm_one_off_fee_tbl.LAST;
        -- Now scan thru the CSM line details table for the asset id
        -- and then call the OKL_SUBSIDY_PROCESS_PVT to get the total subsidized amount for an asset
        FOR get_asset_lines_rec IN get_asset_lines_csr (p_chr_id => p_chr_id) LOOP
          IF get_asset_lines_rec.id IS NOT NULL OR
             get_asset_lines_rec.id <> OKL_API.G_MISS_NUM THEN
            execute_formula(p_api_version   => p_api_version,
                            p_init_msg_list => p_init_msg_list,
                            x_return_status => x_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            --Bug# 9299451
                            p_formula_name  => 'LINE_CAP_AMNT_PRICE',
                            p_contract_id   => p_chr_id,
                            p_line_id       => get_asset_lines_rec.id,
                            x_value         => ln_cap_amt);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            execute_formula(p_api_version   => p_api_version,
                            p_init_msg_list => p_init_msg_list,
                            x_return_status => x_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            p_formula_name  => 'LINE_DISCOUNT',
                            p_contract_id   => p_chr_id,
                            p_line_id       => get_asset_lines_rec.id,
                            x_value         => ln_cap_dis);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            -- We are doing the above since we need the cap amt for each line
            -- and since the cap amt is inclusive of the discount then
            -- we need to exclude the same and then use to send the same to
            -- pricing engine since we need to send the subsidyl in %
            -- This is applicable to NET accouting method of Subsidy only

            --Modified by kthiruva on 15-Mar-2006
            --Bug 4898772 - Start of Changes
            --As the subsidy is not being deducted in the formula LINE_CAP_AMNT_PRICE, it does not have to be added again
            ln_cap_wos := ln_cap_amt;
            --Bug 4898772 - End of Changes
            FOR get_acc_mth_code_rec IN get_acc_mth_code (p_line_id => get_asset_lines_rec.id) LOOP
              i := i + 1;
              -- Changing the over loaded get_asset_subsidy_amont the tbl version
              okl_subsidy_process_pvt.get_asset_subsidy_amount(
                                      p_api_version    => p_api_version,
                                      p_init_msg_list  => p_init_msg_list,
                                      x_return_status  => x_return_status,
                                      x_msg_count      => x_msg_count,
                                      x_msg_data       => x_msg_data,
                                      p_asset_cle_id   => get_asset_lines_rec.id,
                                      x_asbv_tbl       => l_asbv_tbl);
              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
              ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              IF l_asbv_tbl.COUNT > 0 THEN
                FOR k IN l_asbv_tbl.FIRST..l_asbv_tbl.LAST LOOP
                  /* Bug# 7534196 - Commented
                  IF get_acc_mth_code_rec.accounting_method_code = 'AMORTIZE' AND
                     l_asbv_tbl(k).subsidy_cle_id = get_acc_mth_code_rec.id THEN
                    l_csm_one_off_fee_tbl(i).amount := l_asbv_tbl(k).amount;
                  ELSIF get_acc_mth_code_rec.accounting_method_code = 'NET' AND
                     l_asbv_tbl(k).subsidy_cle_id = get_acc_mth_code_rec.id THEN
                    IF l_asbv_tbl(k).amount < ln_cap_wos THEN
                      l_csm_one_off_fee_tbl(i).rate := l_asbv_tbl(k).amount/ln_cap_wos;
                    END IF;
                  END IF;
                  */
                  -- Bug#7534196 - Always pass subsidy amount to supertrump irrespective of account method
                  IF l_asbv_tbl(k).subsidy_cle_id = get_acc_mth_code_rec.id THEN
                     l_csm_one_off_fee_tbl(i).amount := l_asbv_tbl(k).amount;
                  END IF;
                END LOOP;
              ELSE
                okl_api.set_message(
                        p_app_name      => G_APP_NAME,
                        p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                        p_token1        => G_COL_NAME_TOKEN,
                        p_token1_value  => 'Subsidy Records');
                x_return_status := OKL_API.G_RET_STS_ERROR;
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              l_csm_one_off_fee_tbl(i).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_one_off_fee_tbl(i).date_paid         := get_asset_lines_rec.date_funding;
              l_csm_one_off_fee_tbl(i).kle_asset_id      := get_asset_lines_rec.id;

              --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
      		     l_csm_one_off_fee_tbl(i).orig_contract_line_id := get_asset_lines_rec.orig_contract_line_id;
      		  end if;

              l_csm_one_off_fee_tbl(i).other_type_id     := get_acc_mth_code_rec.id;
              l_csm_one_off_fee_tbl(i).other_type        := G_SFE_TYPE_SUBSIDY;

              OPEN  get_sub_income_strm_csr(p_dnz_chr_id => p_chr_id,
                                            p_sub_cle_id => get_acc_mth_code_rec.id);
	          -- Changed for bug 4044089 by HKPATEL 12/02/2004
              --FETCH get_sub_income_strm_csr INTO l_csm_one_off_fee_tbl(i).description;
			  FETCH get_sub_income_strm_csr INTO l_sty_id;
              IF get_sub_income_strm_csr%NOTFOUND THEN
                OKL_API.set_message(p_app_name      => G_APP_NAME,
                                    p_msg_name      => G_REQUIRED_VALUE,
                                    p_token1        => G_COL_NAME_TOKEN,
                                    p_token1_value  => 'Subsidy Income Stream Description');
                x_return_status := OKL_API.G_RET_STS_ERROR;
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              CLOSE get_sub_income_strm_csr;

	          -- New code for bug 4044089 by HKPATEL 12/02/2004
			  OKL_STREAMS_UTIL.get_dependent_stream_type
                               (
                                p_khr_id =>p_chr_id,
                                p_primary_sty_id =>l_sty_id,
                                p_dependent_sty_purpose=>'SUBSIDY_INCOME',
                                x_return_status => l_return_status,
                                x_dependent_sty_id=>l_dep_sty_id
								);
              IF l_return_status = 'E' THEN
			    l_return_status := 'S';
			  END IF;

              IF l_dep_sty_id IS NOT NULL THEN
			    l_sty_id := l_dep_sty_id;
			  END IF;

              OPEN  get_strm_type_code(p_sty_id => l_sty_id);
              FETCH get_strm_type_code INTO l_csm_one_off_fee_tbl(i).description;
			  CLOSE get_strm_type_code;
	          -- New code for bug 4044089 by HKPATEL 12/02/2004	ends here

            END LOOP;
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
          ELSE
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_REQUIRED_VALUE,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'kle_asset_id');
            x_return_status := OKL_API.G_RET_STS_ERROR;
            EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
        END LOOP;
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          RAISE  OKL_API.G_EXCEPTION_ERROR;
        END IF;
      ELSE
        -- Since there are no One off tbl create one
        -- Now scan thru the CSM line details table for the asset id
        -- and then call the OKL_SUBSIDY_PROCESS_PVT to get the total subsidized amount for an asset
        FOR get_asset_lines_rec IN get_asset_lines_csr (p_chr_id => p_chr_id) LOOP
          IF get_asset_lines_rec.id IS NOT NULL OR
             get_asset_lines_rec.id <> OKL_API.G_MISS_NUM THEN
            execute_formula(p_api_version   => p_api_version,
                            p_init_msg_list => p_init_msg_list,
                            x_return_status => x_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            --Bug# 9299451
                            p_formula_name  => 'LINE_CAP_AMNT_PRICE',
                            p_contract_id   => p_chr_id,
                            p_line_id       => get_asset_lines_rec.id,
                            x_value         => ln_cap_amt);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            execute_formula(p_api_version   => p_api_version,
                            p_init_msg_list => p_init_msg_list,
                            x_return_status => x_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            p_formula_name  => 'LINE_DISCOUNT',
                            p_contract_id   => p_chr_id,
                            p_line_id       => get_asset_lines_rec.id,
                            x_value         => ln_cap_dis);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            -- We are doing the above since we need the cap amt for each line
            -- and since the cap amt is inclusive of the discount then
            -- we need to exclude the same and then use to send the same to
            -- pricing engine since we need to send the subsidyl in %
            -- This is applicable to NET accouting method of Subsidy only

            --Modified by kthiruva on 15-Mar-2006
            --Bug 4898772 - Start of Changes
            --As the subsidy is not being deducted in the formula LINE_CAP_AMNT_PRICE, it does not have to be added again
            ln_cap_wos := ln_cap_amt;
            --Bug 4898772 - End of Changes

            FOR get_acc_mth_code_rec IN get_acc_mth_code (p_line_id => get_asset_lines_rec.id) LOOP
              i := i + 1;
              -- Changing the over loaded get_asset_subsidy_amont the tbl version
              okl_subsidy_process_pvt.get_asset_subsidy_amount(
                                      p_api_version    => p_api_version,
                                      p_init_msg_list  => p_init_msg_list,
                                      x_return_status  => x_return_status,
                                      x_msg_count      => x_msg_count,
                                      x_msg_data       => x_msg_data,
                                      p_asset_cle_id   => get_asset_lines_rec.id,
                                      x_asbv_tbl       => l_asbv_tbl);
              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
              ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              IF l_asbv_tbl.COUNT > 0 THEN
                FOR k IN l_asbv_tbl.FIRST..l_asbv_tbl.LAST LOOP
                   /* Bug# 7534196 - Commented
                  IF get_acc_mth_code_rec.accounting_method_code = 'AMORTIZE' AND
                     l_asbv_tbl(k).subsidy_cle_id = get_acc_mth_code_rec.id THEN
                    l_csm_one_off_fee_tbl(i).amount := l_asbv_tbl(k).amount;
                  ELSIF get_acc_mth_code_rec.accounting_method_code = 'NET' AND
                     l_asbv_tbl(k).subsidy_cle_id = get_acc_mth_code_rec.id THEN
                    IF l_asbv_tbl(k).amount < ln_cap_wos THEN
                      l_csm_one_off_fee_tbl(i).rate := l_asbv_tbl(k).amount/ln_cap_wos;
                    END IF;
                  END IF;
                  */
                  -- Bug#7534196 - Always pass subsidy amount to supertrump irrespective of account method
                  IF l_asbv_tbl(k).subsidy_cle_id = get_acc_mth_code_rec.id THEN
                     l_csm_one_off_fee_tbl(i).amount := l_asbv_tbl(k).amount;
                  END IF;
                END LOOP;
              ELSE
                okl_api.set_message(
                        p_app_name      => G_APP_NAME,
                        p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                        p_token1        => G_COL_NAME_TOKEN,
                        p_token1_value  => 'Subsidy Records');
                x_return_status := OKL_API.G_RET_STS_ERROR;
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              l_csm_one_off_fee_tbl(i).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_one_off_fee_tbl(i).date_paid         := get_asset_lines_rec.date_funding;
              l_csm_one_off_fee_tbl(i).kle_asset_id      := get_asset_lines_rec.id;

              --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
      		     l_csm_one_off_fee_tbl(i).orig_contract_line_id := get_asset_lines_rec.orig_contract_line_id;
      		  end if;

              l_csm_one_off_fee_tbl(i).other_type_id     := get_acc_mth_code_rec.id;
              l_csm_one_off_fee_tbl(i).other_type        := G_SFE_TYPE_SUBSIDY;
              OPEN  get_sub_income_strm_csr(p_dnz_chr_id => p_chr_id,
                                            p_sub_cle_id => get_acc_mth_code_rec.id);
              --FETCH get_sub_income_strm_csr INTO l_csm_one_off_fee_tbl(i).description;
			  FETCH get_sub_income_strm_csr INTO l_sty_id;
              IF get_sub_income_strm_csr%NOTFOUND THEN
                OKL_API.set_message(p_app_name      => G_APP_NAME,
                                    p_msg_name      => G_REQUIRED_VALUE,
                                    p_token1        => G_COL_NAME_TOKEN,
                                    p_token1_value  => 'Subsidy Income Stream Description');
                x_return_status := OKL_API.G_RET_STS_ERROR;
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              CLOSE get_sub_income_strm_csr;
	          -- New code for bug 4044089 by HKPATEL 12/02/2004
			  OKL_STREAMS_UTIL.get_dependent_stream_type
                               (
                                p_khr_id =>p_chr_id,
                                p_primary_sty_id =>l_sty_id,
                                p_dependent_sty_purpose=>'SUBSIDY_INCOME',
                                x_return_status => l_return_status,
                                x_dependent_sty_id=>l_dep_sty_id
								);
              IF l_return_status = 'E' THEN
			    l_return_status := 'S';
			  END IF;

              IF l_dep_sty_id IS NOT NULL THEN
			    l_sty_id := l_dep_sty_id;
			  END IF;

              OPEN  get_strm_type_code(p_sty_id => l_sty_id);
              FETCH get_strm_type_code INTO l_csm_one_off_fee_tbl(i).description;
			  CLOSE get_strm_type_code;
	          -- New code for bug 4044089 by HKPATEL 12/02/2004	ends here

            END LOOP;
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
          ELSE
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_REQUIRED_VALUE,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'kle_asset_id');
              x_return_status := OKL_API.G_RET_STS_ERROR;
              EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
        END LOOP;
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          RAISE  OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
    END IF;
    px_csm_one_off_fee_tbl := l_csm_one_off_fee_tbl;
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count,
                           x_msg_data	 => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF get_asset_lines_csr%ISOPEN THEN
        CLOSE get_asset_lines_csr;
      END IF;
      IF get_sub_income_strm_csr%ISOPEN THEN
        CLOSE get_sub_income_strm_csr;
      END IF;
      IF get_acc_mth_code%ISOPEN THEN
        CLOSE get_acc_mth_code;
      END IF;
      IF validate_sub_line%ISOPEN THEN
        CLOSE validate_sub_line;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                 p_api_name  => l_api_name,
                                 p_pkg_name  => g_pkg_name,
                                 p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
                                 x_msg_count => x_msg_count,
                                 x_msg_data  => x_msg_data,
                                 p_api_type  => g_api_type);
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF get_asset_lines_csr%ISOPEN THEN
        CLOSE get_asset_lines_csr;
      END IF;
      IF get_sub_income_strm_csr%ISOPEN THEN
        CLOSE get_sub_income_strm_csr;
      END IF;
      IF get_acc_mth_code%ISOPEN THEN
        CLOSE get_acc_mth_code;
      END IF;
      IF validate_sub_line%ISOPEN THEN
        CLOSE validate_sub_line;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                 p_api_name  => l_api_name,
                                 p_pkg_name  => g_pkg_name,
                                 p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
                                 x_msg_count => x_msg_count,
                                 x_msg_data  => x_msg_data,
                                 p_api_type  => g_api_type);
    WHEN OTHERS THEN
      IF get_asset_lines_csr%ISOPEN THEN
        CLOSE get_asset_lines_csr;
      END IF;
      IF get_sub_income_strm_csr%ISOPEN THEN
        CLOSE get_sub_income_strm_csr;
      END IF;
      IF get_acc_mth_code%ISOPEN THEN
        CLOSE get_acc_mth_code;
      END IF;
      IF validate_sub_line%ISOPEN THEN
        CLOSE validate_sub_line;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                 p_api_name  => l_api_name,
                                 p_pkg_name  => g_pkg_name,
                                 p_exc_name  => 'OTHERS',
                                 x_msg_count => x_msg_count,
                                 x_msg_data  => x_msg_data,
                                 p_api_type  => g_api_type);
  END extract_subsidized_lines;
 -- End modification 11i10 release
-- Start modification 11i10 bakuchib
  Procedure extract_fee_lines( p_api_version IN  NUMBER,
                               p_chr_id  IN NUMBER,
                               p_deal_type IN VARCHAR2,
                               p_init_msg_list IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
                               x_msg_count OUT NOCOPY NUMBER,
                               x_msg_data  OUT NOCOPY VARCHAR2,
                               x_return_status OUT NOCOPY VARCHAR2,
                               px_csm_one_off_fee_tbl  IN  OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
                               px_csm_periodic_expenses_tbl IN OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
                               px_csm_stream_types_tbl IN OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type)  AS

     l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_FEE_LINES';
     l_api_version	CONSTANT NUMBER	      := 1;
     l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
     ln_level_cnt            NUMBER := 0;
     l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;
     l_line_rec           l_line_rec_csr%ROWTYPE;
     l_lne_rec            l_line_rec_csr%ROWTYPE;
     l_rl_rec             l_rl_csr%ROWTYPE;
     r_rl_rec             l_rl_csr%ROWTYPE;
     l_rl_rec1            l_rl_csr1%ROWTYPE;
     l_rl_rec2            l_rl_csr2%ROWTYPE;
     l_rl_rec2_exp        l_rl_csr2%ROWTYPE;
     l_fee_strm_type_rec  fee_strm_type_csr%ROWTYPE;
     l_strm_name_rec      strm_name_csr%ROWTYPE;

     l_hdr_rec l_hdr_csr%ROWTYPE;

     l_level_type NUMBER;
     l_strm_name VARCHAR2(200);
     i BINARY_INTEGER := 0;
     j BINARY_INTEGER := 0;
     k BINARY_INTEGER := 0;
     l BINARY_INTEGER := 0;
     m BINARY_INTEGER := 0;
     idx BINARY_INTEGER := 0;
	 --l_sty_id NUMBER;
	 l_sty_id           strm_rec_type;
	 l_pricing_name                VARCHAR2(40);

     l_passthru_percent NUMBER := 0;
     l_fee_type apps.OKL_K_LINES.FEE_TYPE%TYPE;

     --TYPE okl_strm_type_id_tbl_type IS TABLE OF okl_strm_type_b.ID%TYPE
     --INDEX BY BINARY_INTEGER;
     l_strm_type_id_tbl okl_strm_type_id_tbl_type;


     px_csm_lease_header okl_create_streams_pub.csm_lease_rec_type;

    /* ER# 5150038 */
    /* This cursor is used to fetch the linked asset lines when fees are associated to assets */
	CURSOR l_linked_asset_line_csr (p_chr_d  NUMBER,
	                                p_cle_id NUMBER)
	IS
	SELECT lse.lty_code,
	       kle.fee_type,
	       tl.name,
	       tl.item_description,
	       kle.id,
	       kle.cle_id,
	       kle.oec,
	       kle.residual_code,
	       kle.capital_amount,
	       kle.initial_direct_cost,
	       kle.delivered_date,
	       kle.date_funding_required,
	       kle.residual_grnty_amount,
	       kle.date_funding,
	       kle.residual_value,
	       kle.date_delivery_expected,
	       kle.orig_system_id1 old_line_id,
	       kle.amount,
	       kle.price_negotiated,
	       kle.start_date,
	       kle.end_date,
	       kle.orig_system_id1,
	       sts.ste_code,
	       kle.tradein_amount,
	       kle.date_funding_expected,
	       kle.capital_reduction,
	       kle.capitalize_down_payment_yn,
	       kle.orig_contract_line_id --sechawla 15-jul-09 ESG PRB Enhancements : added orig_contract_line_id
	  FROM okl_k_lines_full_v kle,
	       okc_line_styles_b lse,
	       okc_k_lines_tl tl,
	       okc_statuses_b sts
	 WHERE kle.lse_id = lse.id
	   AND lse.lty_code = 'LINK_FEE_ASSET'
	   AND tl.id = kle.id
	   AND kle.cle_id = p_cle_id
	   AND tl.language = userenv('LANG')
	   AND kle.dnz_chr_id = p_chr_d
	   AND sts.code = kle.sts_code
	   AND sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED');

    l_linked_asset_line_rec l_linked_asset_line_csr%ROWTYPE;
    l_asset_association BOOLEAN := FALSE;
    l_expense_exists BOOLEAN := FALSE;
    l_ratio NUMBER := 0.0;

    CURSOR get_strm_name_fin_csr(p_chr_d  NUMBER,
                                 p_cle_id NUMBER )
    IS
    SELECT crl.rule_information2 amount,
           styt.name strm_name
    FROM okl_strm_type_tl styt,
         okc_k_items cim,
         okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crg.RGD_CODE = 'LAFEXP'
    AND crl.RULE_INFORMATION_CATEGORY = 'LAFEXP'
    AND crg.dnz_chr_id = p_chr_d
    AND crg.cle_id = p_cle_id
    AND cim.dnz_chr_id = crg.dnz_chr_id
    AND cim.cle_id = crg.cle_id
    AND cim.object1_id1 = TO_CHAR(styt.id)
    AND cim.object1_id2 = '#'
    AND cim.jtot_object1_code = 'OKL_STRMTYP'
    AND styt.language = USERENV('lang');

	-- Cursor put by HKPATEL for rollover fee associated with asset
	CURSOR link_rollover_csr(cleId NUMBER)
	IS
	SELECT okc.id id,
       	   okc.chr_id chr_id,
       	   okc.cle_id cle_id,
       	   okc.dnz_chr_id dnz_chr_id,
       	   kle.capital_amount capital_amount,
       	   kle.amount amount,
       	   lse.lty_code lty_code
	            -- srsreeni - Bug#5699923 - Added - Start
 	          , sts.ste_code
 	            -- srsreeni - Bug#5699923 - Added - End
 	          , kle.orig_contract_line_id ,--sechawla 15-jul-09 PRB ESG enhancements : added orig_contract_line_id
 	       okc.start_date --11-Sep-09 sechawla  8798556 : added
	FROM   okc_k_lines_b okc,
       	   okl_k_lines kle ,
       	   okc_line_styles_b lse
	  ,okc_statuses_b sts
	WHERE  okc.cle_id = cleId
    AND    okc.lse_id = lse.id
    AND    okc.id = kle.id
    AND    lty_code = 'LINK_FEE_ASSET'
    AND    sts.code=okc.sts_code;

    --Start of modification for Bug#3320656 BAKUCHIB Modified
    -- to get the absorbed fees amount
    -- gboomina BUG#4508077 changes start - selecting the fee purpose and stream type
    CURSOR get_strm_name_abs_csr(p_chr_d  NUMBER,
                                 p_cle_id NUMBER )
    IS
    SELECT kle.amount amount,
           styt.name strm_name,
	   kle.fee_purpose_code fee_purpose_code,
           styt.id sty_id
    FROM okl_strm_type_tl styt,
         okc_k_items cim,
         okc_k_lines_b cle,
         okl_k_lines kle
    WHERE cle.dnz_chr_id = p_chr_d
    AND cle.id = p_cle_id
    AND cle.id = kle.id
    AND cim.dnz_chr_id = cle.dnz_chr_id
    AND cim.cle_id = cle.id
    AND cim.object1_id1 = TO_CHAR(styt.id)
    AND cim.object1_id2 = '#'
    AND cim.jtot_object1_code = 'OKL_STRMTYP'
    AND styt.language = USERENV('lang');
    --End of modification for Bug#3320656 BAKUCHIB Modified
    -- get the self referencing Line based rule information
    CURSOR l_rl_income_csr(rlgpId NUMBER,
                           rgcode okc_rule_groups_b.rgd_code%TYPE,
                           rlcat  okc_rules_b.rule_information_category%TYPE,
                           chrId  NUMBER,
                            cleId  NUMBER )
    IS
--srsreeni Bug5890437 start
-- Start of modification for Bug#3322910 BAKUCHIB Modified
    SELECT SUM(TO_NUMBER(NVL(crl.rule_information3,1))) level_cnt
-- End of modification for Bug#3322910 BAKUCHIB Modified
--srsreeni Bug5890437 end
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crl.object2_id1 = rlgpId
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    ORDER BY FND_DATE.canonical_to_date(crl.rule_information2);

	-- nikshah -- Bug # 5484903 Fixed
        -- Removed CURSOR c_finance_strm_csr (payment_type_id NUMBER, p_chr_id NUMBER)

    --mansrini : Code for VR build
    CURSOR  get_day_conv_on_contrct
    IS
    SELECT
--Added by srsreeni for bug6076113
--            rate_params.days_in_a_year_code,
--            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code
            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code,
            rate_params.days_in_a_year_code
--srsreeni bug6076113 ends
    FROM    okl_k_rate_params rate_params
    WHERE   khr_id = p_chr_id;

    CURSOR  get_day_conv_on_sgt
    IS
    SELECT  DECODE(gts.days_in_month_code,'30','360',gts.days_in_month_code) days_in_month_code,
            gts.days_in_yr_code
    FROM
            okl_k_headers khr,
            okl_products_v pdt,
            okl_ae_tmpt_sets_v aes,
            OKL_ST_GEN_TMPT_SETS gts
    WHERE
            khr.pdt_id = pdt.id AND
            pdt.aes_id = aes.id AND
            aes.gts_id = gts.id AND
            khr.id  = p_chr_id;

    l_strm_name_fin_rec          get_strm_name_fin_csr%ROWTYPE;
    --Start of modification for Bug#3320656 BAKUCHIB Modified
    l_strm_name_abs_rec          get_strm_name_abs_csr%ROWTYPE;
    l_strmid_rec         l_strmid_csr%ROWTYPE;
    --End of modification for Bug#3320656 BAKUCHIB Modified
	   -- Rollover modification by HKPATEL
	   link_rollover_rec    link_rollover_csr%ROWTYPE;
   	-- Rollover modification ends here
    l_days_in_month_code OKL_ST_GEN_TMPT_SETS.days_in_month_code%type;
    l_days_in_yr_code  OKL_ST_GEN_TMPT_SETS.days_in_yr_code%type;

    -- gboomina Bug 4746368 - Added - Start
    -- Condition added to the cursor by kthiruva on 09-Feb-2006
    --Only disbursement and processing fee details specified in Base Term should be picked
    --Bug 4746189 - Start of Changes
    --Made changes by rgooty for bug 8399461 to add new fields
    Cursor c_pass ( khrId NUMBER, cleId NUMBER) IS
    select vDtls.DISBURSEMENT_BASIS,
           vDtls.DISBURSEMENT_FIXED_AMOUNT,
       	   vDtls.DISBURSEMENT_PERCENT,
    	      vDtls.PROCESSING_FEE_BASIS,
    	      vDtls.PROCESSING_FEE_FIXED_AMOUNT,
       	   vDtls.PROCESSING_FEE_PERCENT,
           vDtls.PAYMENT_START_DATE,
           vDtls.PAYMENT_FREQUENCY,
           chr.END_DATE CONTRACT_END_DATE,
           vDtls.ORIG_CONTRACT_LINE_ID --sechawla 21-Jul-09 8677460  : PRB ESG Enhancements
    from okl_party_payment_hdr vHdr,
         okl_party_payment_dtls vDtls,
         okc_k_headers_b chr
    where vDtls.payment_hdr_id = vHdr.id
      and vHdr.CLE_ID = cleId
      and vHdr.DNZ_CHR_ID = khrId
      and vHdr.PASSTHRU_TERM = 'BASE'
      and vHdr.DNZ_CHR_ID = chr.id;
    --Bug 4746189 - End of Changes

    r_pass c_pass%ROWTYPE;
    -- gboomina Bug 4746368 - Added - End

    --Added by rgooty for bug 8399461
    --Cursor to get the fee payment frequency
    CURSOR c_feepayment_freq(khrId NUMBER, cleId NUMBER) IS
    SELECT rul.object1_id1 frequency
      FROM okc_rule_groups_b rgp,
           okc_rules_b rul
     WHERE rgp.dnz_chr_id = khrId
       AND rgp.cle_id = cleId
       AND rgp.RGD_CODE = 'LALEVL'
       AND rgp.id = rul.rgp_id
       AND rul.RULE_INFORMATION_CATEGORY = 'LASLL'
       AND ROWNUM < 2;

    --Cursor to get the number of disbursements
    CURSOR c_num_of_disb(p_contract_end_date DATE, p_payout_date DATE, p_frequency VARCHAR2)
    IS
    SELECT CEIL(Months_between(p_contract_end_date, p_payout_date)/
           DECODE(p_frequency,'A',12,'S',6,'Q',3,1))
      FROM DUAL;


    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;
    l_PROSPECTIVE_REBOOK_YN  varchar2(1);

    l_calc_disb_amount     NUMBER;
    l_disb_amount          NUMBER;
    l_num_of_disb          NUMBER;
    l_frequency            VARCHAR2(1);
    l_bill_amount          NUMBER;
    l_desc_index           NUMBER := 0;
    l_pay_start_date       DATE;
    l_prev_pay_start_date  DATE;
    l_months_factor        NUMBER;
    --end rgooty


  Begin
    print( l_api_name, 'begin');
    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);
    -- check if activity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    open  get_rebook_type;
    fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN  ;
    close get_rebook_type;

    --get day convention info : mansrini
    OPEN  get_day_conv_on_contrct;
    FETCH get_day_conv_on_contrct INTO l_days_in_month_code,l_days_in_yr_code;
    CLOSE get_day_conv_on_contrct;

--Added by srsreeni for bug6076113
--    IF l_days_in_month_code IS NULL OR l_days_in_month_code IS NULL
    IF l_days_in_month_code IS NULL OR l_days_in_yr_code IS NULL
--srsreeni bug6076113 ends
    THEN
      OPEN  get_day_conv_on_sgt;
      FETCH get_day_conv_on_sgt INTO l_days_in_month_code,l_days_in_yr_code;
      CLOSE get_day_conv_on_sgt;
    END IF;

	OPEN l_hdr_pdt_csr(p_chr_id);
	FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	CLOSE l_hdr_pdt_csr;

    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr into l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;
    i := 0; j := 0;
    k := px_csm_periodic_expenses_tbl.COUNT;
    l := px_csm_one_off_fee_tbl.COUNT;
    m := px_csm_stream_types_tbl.COUNT;
    FOR l_lne_rec in l_line_rec_csr ( p_chr_id, 'FEE' ) LOOP

      OPEN  fee_strm_type_csr  ( l_lne_rec.id, 'FEE' );
      FETCH fee_strm_type_csr into l_fee_strm_type_rec;
      CLOSE fee_strm_type_csr;
      l_level_type := l_fee_strm_type_rec.styp_id;
      l_strm_name  := l_fee_strm_type_rec.strm_name;
      print( l_api_name, 'Fee Line='||l_strm_name);

      l_fee_type := nvl(l_lne_rec.fee_type, 'NOFEETYPE');
      If (( l_fee_type = 'PASSTHROUGH' ) AND (l_passthru_percent < 0.0)) Then
        okl_api.set_message(
                p_app_name => G_APP_NAME,
                p_msg_name => 'OKL_LLA_NEG_PASSTHRU');
        raise OKL_API.G_EXCEPTION_ERROR;
   	  End If;

      print( l_api_name, 'fee type'||l_fee_type);
      If (( l_fee_strm_type_rec.capitalize_yn = 'Y') OR ( l_fee_type = 'CAPITALIZED' )) Then
      /*      The fee amounts are already prorated into
       *      asset costs. This is true only for
       *      capitalized fees.
       */
	       NULL;
  	   Elsif ( l_fee_type = 'PASSTHROUGH' ) Then

        /* ER# 5150038 */
        /* Getting the linked asset line for the EXPENSE or MISCELLANEOUS fee.
         * If there is an asset association, this cursor will return those linked asset association.
         * In the case of MISCELLANEOUS fee, only if the relevant payment is also associated to an asset,
         * it is considered as an asset association.
         */
        OPEN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id);
        FETCH l_linked_asset_line_csr INTO l_linked_asset_line_rec;

		OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_linked_asset_line_rec.id );
		FETCH l_rl_csr2 INTO l_rl_rec2;

        IF l_linked_asset_line_csr%FOUND AND
           l_rl_csr2%FOUND
        THEN
        	l_asset_association := TRUE;
        ELSE
        	l_asset_association := FALSE;
        END IF;
        CLOSE l_linked_asset_line_csr;
        CLOSE l_rl_csr2;


	--Added by rgooty for bug 8399461 to pass disbursement as Expense
        FOR r_pass IN c_pass( p_chr_id, l_lne_rec.id)
        LOOP
          l_frequency := r_pass.PAYMENT_FREQUENCY;
          --If disbursement frequency is null then take the fee payment frequency
          IF(l_frequency IS NULL) THEN
            OPEN c_feepayment_freq(p_chr_id, l_lne_rec.id);
            FETCH c_feepayment_freq INTO l_frequency;
            CLOSE c_feepayment_freq;
          END IF;

          IF (r_pass.disbursement_basis = 'PERCENT' ) THEN

            l_months_factor := OKL_STREAM_GENERATOR_PVT.get_months_factor(
                                   p_frequency     => l_frequency,
                                   x_return_status => x_return_status);
            IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            l_pay_start_date := r_pass.PAYMENT_START_DATE;
            l_prev_pay_start_date := NULL;
            idx := 0;
            l_desc_index := l_desc_index + 1;
            LOOP
               --When disbursement basis is PERCENT, then disbursement amount
               --is calculated by applying the percentage to all the billable
               --amounts due before the payout date
               get_pth_fee_due_amount(p_chr_id        =>  p_chr_id,
                                      p_kle_id        =>  l_lne_rec.id,
                                      p_prev_payout_date => l_prev_pay_start_date,
                                      p_payout_date   =>  l_pay_start_date,
                                      x_bill_amount   =>  l_bill_amount,
                                      x_return_status =>  x_return_status);
               IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
               ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
               END IF;

               l_calc_disb_amount := (l_bill_amount * r_pass.DISBURSEMENT_PERCENT)/100;

               okl_accounting_util.round_amount(p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_amount        => l_calc_disb_amount,
                                                p_currency_code => l_hdr_rec.currency_code,
                                                p_round_option  => 'STM',
                                                x_rounded_amount => l_disb_amount);
               IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
               ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
               END IF;

               IF(l_disb_amount <> 0) THEN
                  k := k + 1;
                  idx := idx + 1;
                  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
                  px_csm_periodic_expenses_tbl(k).amount             := l_disb_amount;
                  px_csm_periodic_expenses_tbl(k).date_start         := l_pay_start_date;
                  px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
                  px_csm_periodic_expenses_tbl(k).period             := l_frequency;
                  px_csm_periodic_expenses_tbl(k).description        := l_strm_name || l_desc_index;
                  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

                  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
                  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                     --px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id; --sechawla 21-Jul-09
                     --sechawla 21-Jul-09
                     --get the original contract line ID from party payment details, for passthru fee of type expense
                     px_csm_periodic_expenses_tbl(k).orig_contract_line_id := r_pass.orig_contract_line_id;
                  end if;

                  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
                  px_csm_periodic_expenses_tbl(k).days_in_month      := l_days_in_month_code;
                  px_csm_periodic_expenses_tbl(k).days_in_year       := l_days_in_yr_code;
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
               END IF;

               l_prev_pay_start_date := l_pay_start_date;
               l_pay_start_date := ADD_MONTHS(l_pay_start_date, l_months_factor);
              EXIT WHEN (l_pay_start_date > r_pass.CONTRACT_END_DATE);
            END LOOP;
          ELSE
             l_disb_amount := r_pass.disbursement_fixed_amount;

             IF(l_disb_amount <> 0) THEN
                OPEN c_num_of_disb(r_pass.CONTRACT_END_DATE, r_pass.PAYMENT_START_DATE, l_frequency);
                FETCH c_num_of_disb INTO l_num_of_disb;
                CLOSE c_num_of_disb;

                k := k + 1;
                l_desc_index := l_desc_index + 1;
                px_csm_periodic_expenses_tbl(k).level_index_number := 1;
                px_csm_periodic_expenses_tbl(k).amount             := l_disb_amount;
                px_csm_periodic_expenses_tbl(k).date_start         := r_pass.PAYMENT_START_DATE;
                px_csm_periodic_expenses_tbl(k).number_of_periods  := l_num_of_disb;
                px_csm_periodic_expenses_tbl(k).period             := l_frequency;
                px_csm_periodic_expenses_tbl(k).description        := l_strm_name || l_desc_index;
                px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

                --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
                if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                   --px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id; --sechawla 21-Jul-09
                   --sechawla 21-Jul-09
                   --get the original contract line ID from party payment details, for passthru fee of type expense
                   px_csm_periodic_expenses_tbl(k).orig_contract_line_id := r_pass.orig_contract_line_id ;
                end if;

                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
                px_csm_periodic_expenses_tbl(k).days_in_month      := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year       := l_days_in_yr_code;
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
             END IF;
          END IF;
        END LOOP;
        --end rgooty for bug 8399461



		IF l_asset_association THEN

			FOR l_linked_asset_line_rec IN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id) LOOP

				/* Calculate the ratio */
				l_ratio := l_linked_asset_line_rec.amount / l_lne_rec.amount;

				-- gboomina Bug 4746368 - Start
				OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_linked_asset_line_rec.id );
				FETCH l_rl_csr2 INTO l_rl_rec2;
				IF l_rl_csr2%FOUND THEN
				  idx := 0;
				  FOR l_rl_rec in l_rl_csr (l_rl_rec2.slh_id, 'LALEVL', 'LASLL', p_chr_id, l_linked_asset_line_rec.id ) LOOP

						-- Start of Bug#2757289 modification
						IF (l_rl_rec.rule_information7 IS NOT NULL OR
						   l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
						   (l_rl_rec.rule_information8 IS NOT NULL OR
							l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
						  k := k + 1;
						  idx := idx + 1;
						  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
						  px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
						  px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
						  px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
						  px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
						  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
						  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

						  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
						  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                             px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                          end if;

						  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
						  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
						  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
						  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
						  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

						  IF(l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
							px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
						  END IF;
						  -- End of Bug#2757289 modification

						  -- Added by kthiruva on 29-Dec-2005.
						  -- The value of the Advance and Arrears flag needs to be obtained from the rule information
						  -- Bug 4915938 - Start of Changes
						  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
							px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
						  ELSE
							px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
						  END IF;
						  -- Bug 4915938 - End of Changes

						ELSIF (l_rl_rec.rule_information7 IS NULL OR
							   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
							  (l_rl_rec.rule_information8 IS NULL OR
							   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
						  k := k + 1;
						  idx := idx + 1;
						  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
						  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
						  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
						  px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
						  px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
						  px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
						  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
						  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

						  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
						  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                             px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                          end if;

						  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
						  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
						  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

						  IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
							px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
						  END IF;
						  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
							px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
						  ELSE
							px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
						  END IF;
						  IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
							--11-Sep-09 sechawla  8798556
                            --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
							px_csm_periodic_expenses_tbl(k).date_start:= l_linked_asset_line_rec.start_date;
						  ELSE
							px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
						  END IF;
						END IF;

				  END LOOP;-- end-loop: l_rl_rec
				Else -- this condition is never reached.
				  k := k + 1;
					 px_csm_periodic_expenses_tbl(k).level_index_number := 1;
					 px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
					 px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
					 px_csm_periodic_expenses_tbl(k).period             := 'M';
					 --Added by rgooty for bug 8399461
					 px_csm_periodic_expenses_tbl(k).amount             := l_linked_asset_line_rec.amount;
					 --end rgooty
					 px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
					 px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					 px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					 px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

					 --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                        px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                     end if;
				  px_csm_periodic_expenses_tbl(k).date_start         := l_linked_asset_line_rec.start_date;
				  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
				  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
				  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

				  print( l_api_name, 'amnt='||to_char(px_csm_periodic_expenses_tbl(k).amount)||
								   '#ofPer='||to_char(px_csm_periodic_expenses_tbl(k).number_of_periods)||
										 'dateStart='||to_char(px_csm_periodic_expenses_tbl(k).date_start));
				   End If;
				CLOSE l_rl_csr2;
			END LOOP; -- end-for-loop: l_linked_asset_line_rec
		ELSE
			-- gboomina Bug 4746368 - Start
			OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_lne_rec.id );
			FETCH l_rl_csr2 INTO l_rl_rec2;
			IF l_rl_csr2%FOUND THEN
			  idx := 0;
			  FOR l_rl_rec in l_rl_csr (l_rl_rec2.slh_id, 'LALEVL', 'LASLL', p_chr_id, l_lne_rec.id ) LOOP


				-- Start of Bug#2757289 modification
				IF (l_rl_rec.rule_information7 IS NOT NULL OR
				   l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
				   (l_rl_rec.rule_information8 IS NOT NULL OR
					l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
				  k := k + 1;
				  idx := idx + 1;
				  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
				  px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
				  px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
				  px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
				  px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
				  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
				  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

				  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                     px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                  end if;

				  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
				  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
				  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

				  IF(l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
					px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
				  END IF;
				  -- End of Bug#2757289 modification

				  -- Added by kthiruva on 29-Dec-2005.
				  -- The value of the Advance and Arrears flag needs to be obtained from the rule information
				  -- Bug 4915938 - Start of Changes
				  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
				  ELSE
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
				  END IF;
				  -- Bug 4915938 - End of Changes

				ELSIF (l_rl_rec.rule_information7 IS NULL OR
					   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
					  (l_rl_rec.rule_information8 IS NULL OR
					   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
				  k := k + 1;
				  idx := idx + 1;
				  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
				  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
				  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				  px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
				  px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
				  px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
				  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

				  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                     px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                  end if;

				  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
				  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
				  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

				  IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
					px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
				  END IF;
				  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
				  ELSE
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
				  END IF;
				  IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
				    --11-Sep-09 sechawla  8798556
					--px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
					px_csm_periodic_expenses_tbl(k).date_start:= l_lne_rec.start_date;
				  ELSE
					px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
				  END IF;
				END IF;

			  END LOOP;
			Else -- this condition is never reached.
			  k := k + 1;
				 px_csm_periodic_expenses_tbl(k).level_index_number := 1;
				 px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
				 px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				 px_csm_periodic_expenses_tbl(k).period             := 'M';
				 --Added by rgooty for bug 8399461
				 px_csm_periodic_expenses_tbl(k).amount             := l_lne_rec.amount;
				 --end rgooty
				 px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
				 px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				 px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
				 px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

				 --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                    px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                 end if;

			  px_csm_periodic_expenses_tbl(k).date_start         := l_lne_rec.start_date;
			  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
			  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
			  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

			  print( l_api_name, 'amnt='||to_char(px_csm_periodic_expenses_tbl(k).amount)||
							   '#ofPer='||to_char(px_csm_periodic_expenses_tbl(k).number_of_periods)||
									 'dateStart='||to_char(px_csm_periodic_expenses_tbl(k).date_start));
			   End If;
			CLOSE l_rl_csr2;
		 END IF; -- end-if l_asset_association
       Elsif (( l_fee_type = 'EXPENSE' )OR ( l_fee_type = 'MISCELLANEOUS' )) THEN
        /* ER# 5150038 */
        /* Getting the linked asset line for the EXPENSE or MISCELLANEOUS fee.
         * If there is an asset association, this cursor will return those linked asset association.
         * In the case of MISCELLANEOUS fee, only if the relevant payment is also associated to an asset,
         * it is considered as an asset association.
         */
        OPEN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id);
        FETCH l_linked_asset_line_csr INTO l_linked_asset_line_rec;

		OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_linked_asset_line_rec.id );
		FETCH l_rl_csr2 INTO l_rl_rec2;

        IF l_linked_asset_line_csr%FOUND AND
           ((l_rl_csr2%FOUND AND l_fee_type = 'MISCELLANEOUS') OR
            l_fee_type = 'EXPENSE')
        THEN
        	l_asset_association := TRUE;
        ELSE
        	l_asset_association := FALSE;
        END IF;
        CLOSE l_linked_asset_line_csr;
        CLOSE l_rl_csr2;

		OPEN  l_rl_csr2 ( 'LAFEXP', 'LAFEXP', TO_NUMBER(p_chr_id), l_lne_rec.id );
		FETCH l_rl_csr2 INTO l_rl_rec2_exp;
	    IF l_rl_csr2%FOUND THEN
			l_expense_exists := TRUE;
		ELSE
			l_expense_exists := FALSE;
		END IF;
		CLOSE l_rl_csr2;

        IF l_expense_exists THEN
			OPEN  l_rl_csr1 ( 'LAFEXP', 'LAFREQ', TO_NUMBER(p_chr_id), l_lne_rec.id );
			FETCH l_rl_csr1 INTO l_rl_rec1;
			CLOSE l_rl_csr1;
		END IF;

		IF l_asset_association THEN
			FOR l_linked_asset_line_rec IN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id)
			LOOP
			     /* IDC amount needs to be prorated based on the fee amounts allocated to each assets
			      * Hence the formula of the ratio calculation = (fee amounts allocated to each assets) / (total fee amount)
			      * fee amounts allocated to each assets = l_linked_asset_line_rec.amount
			      * total fee amount = l_lne_rec.amount
			      * Hence the IDC amount to be prorated = (IDC amount) * ratio
			      */
			     l_ratio := l_linked_asset_line_rec.amount / l_lne_rec.amount;

				 If ( nvl(l_lne_rec.initial_direct_cost,0) > 0.0 ) Then
				   l := l + 1;
				   px_csm_one_off_fee_tbl(l).description       := l_fee_strm_type_rec.strm_name;
				   px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
				   px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
				   px_csm_one_off_fee_tbl(l).amount            := l_lne_rec.initial_direct_cost * l_ratio;
				   px_csm_one_off_fee_tbl(l).date_paid         := l_linked_asset_line_rec.start_date;
				   px_csm_one_off_fee_tbl(l).kle_fee_id        := l_linked_asset_line_rec.id; -- Assign linked fee asset line id

				   --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
				   if l_PROSPECTIVE_REBOOK_YN = 'Y' then
				      px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
				   end if;

				   -- gboomina BUG#4508077 IDC changes start
				   px_csm_one_off_fee_tbl(l).idc_accounting_flag := OKL_CREATE_STREAMS_PUB.G_FND_YES;
				   -- gboomina BUG#4508077 IDC changes end
				End If;
				   --Added by kthiruva on 15-Feb-2006
				   -- Streams for the fee need to be retrieved if Pricing Name is setup for the same
				   --Bug 4930293 - Start of Changes
--Added by srsreeni for bug5841892
--				   m := m + 1;
--				   px_csm_stream_types_tbl(m).stream_type_id := l_fee_strm_type_rec.styp_id;
--bug5841892 end of changes
        --vdamerla Bug6149951 start
        IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN
				   get_primary_pricing_name
					(
					 p_khr_id =>p_chr_id,
					 p_sty_id =>l_fee_strm_type_rec.styp_id,
					 x_return_status =>x_return_status,
					 x_primary_pricing_name	=>l_pricing_name
					 );
--Added by srsreeni for bug5841892
			 	if l_pricing_name is not null then
				   m := m + 1;
				   px_csm_stream_types_tbl(m).stream_type_id := l_fee_strm_type_rec.styp_id;
				   px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
				   px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id; -- Assign linked fee asset line id
				end if;
--bug5841892 end of changes
				   --Bug 4930293 - End of Changes

			  -- gboomina BUG#4508077 IDC changes start
			  -- get dependent streams for the reporting product
				IF(g_rep_req_yn = 'Y') THEN

				get_dependent_stream_types
					   (
						p_khr_id => p_chr_id,
						p_pdt_id => l_pdt_id_rec.report_pdt_id,
						p_primary_sty_id => l_fee_strm_type_rec.styp_id,
						x_return_status => x_return_status,
						x_dependent_sty_id => l_strm_type_id_tbl
					   );
					   IF(x_return_status = 'E') THEN
						 x_return_status := 'S';
					   END IF;
				-- get dependent streams for the main product
					 ELSE
					   get_dependent_stream_types
					   (
						p_khr_id => p_chr_id,
						p_primary_sty_id => l_fee_strm_type_rec.styp_id,
						x_return_status => x_return_status,
						x_dependent_sty_id =>  l_strm_type_id_tbl
					   );
					   IF(x_return_status = 'E') THEN
						 x_return_status := 'S';
					   END IF;

					 END IF; -- end of dependent streams block
			 -- populate the dependent stream types
			 IF l_strm_type_id_tbl.COUNT > 0 THEN
					  FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
						 m := m + 1;
						 --Modified by kthiruva on 21-Oct-2005
						 --Bug 4690770 - Start of Changes
						 --l_strm_type_id_tbl should be referenced, not l_sty_id during the assignments
				 px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
				 px_csm_stream_types_tbl(m).pricing_name   := l_strm_type_id_tbl(i).pricing_name;
						 px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;-- Assign linked fee asset line id
						 --Bug 4690770 - End of Changes
					  END LOOP;
			 END IF; -- end of populate dependent stream types
		 -- gboomina BUG#4508077 IDC changes end
     END IF;--vdamerla Bug6149951 ends

			 IF l_expense_exists THEN
				-- sjalasut, bug 4872258. assumption is now -1 instead of zero. START
				IF  NVL(l_lne_rec.amount,-1) <> NVL(l_lne_rec.initial_direct_cost,-1) THEN
					-- sjalasut, bug 4872258.  assumption is now -1 instead of zero. END
					k := k + 1;
					px_csm_periodic_expenses_tbl(k).level_index_number := 1;
					px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					px_csm_periodic_expenses_tbl(k).description        := l_fee_strm_type_rec.strm_name;
					px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				  	px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(nvl(l_rl_rec2_exp.RULE_INFORMATION2,'0'));
					px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec2_exp.RULE_INFORMATION1, l_hdr_rec.term));
					px_csm_periodic_expenses_tbl(k).amount             := px_csm_periodic_expenses_tbl(k).amount - (NVL(l_lne_rec.initial_direct_cost,0)/px_csm_periodic_expenses_tbl(k).number_of_periods);
					px_csm_periodic_expenses_tbl(k).amount             := px_csm_periodic_expenses_tbl(k).amount * l_ratio;
					px_csm_periodic_expenses_tbl(k).period             := l_rl_rec1.object1_id1;
					px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

					--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                       px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                    end if;

					px_csm_periodic_expenses_tbl(k).date_start         := l_linked_asset_line_rec.start_date;
					px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					px_csm_periodic_expenses_tbl(k).days_in_month     := l_days_in_month_code;
					px_csm_periodic_expenses_tbl(k).days_in_year      := l_days_in_yr_code;
				END IF;
         	Elsif ( l_fee_type <> 'MISCELLANEOUS' ) Then
                --m := m + 1;
                --px_csm_stream_types_tbl(m).stream_type_id := l_fee_strm_type_rec.styp_id;
                --px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
				k := k + 1;
				px_csm_periodic_expenses_tbl(k).level_index_number := 1;
				px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				px_csm_periodic_expenses_tbl(k).description        := l_fee_strm_type_rec.strm_name;
				px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				px_csm_periodic_expenses_tbl(k).amount             := nvl(l_lne_rec.amount,0)-nvl(l_lne_rec.initial_direct_cost,0);
				px_csm_periodic_expenses_tbl(k).amount             := px_csm_periodic_expenses_tbl(k).amount * l_ratio;
				px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
				px_csm_periodic_expenses_tbl(k).period             := 'M';
				px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

				--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                   px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                end if;

				px_csm_periodic_expenses_tbl(k).date_start         := l_linked_asset_line_rec.start_date;
                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                px_csm_periodic_expenses_tbl(k).days_in_month      := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year       := l_days_in_yr_code;

                print( l_api_name, 'amnt='||to_char(px_csm_periodic_expenses_tbl(k).amount)||
		                   '#ofPer='||to_char(px_csm_periodic_expenses_tbl(k).number_of_periods)||
				   'dateStart='||to_char(px_csm_periodic_expenses_tbl(k).date_start));

		    End If; -- end-if: l_expense_exists

            -- Process payments
			IF ( l_fee_type = 'MISCELLANEOUS' ) Then
				OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_linked_asset_line_rec.id );
				FETCH l_rl_csr2 INTO l_rl_rec2;

				IF l_rl_csr2%FOUND THEN

--Added by srsreeni for bug5841892
--					m := m + 1;
--					px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
--bug5841892 end of changes
          -- vdamerla Forward Port Bug6149951
          --vdamerla Bug6149951 start
        IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN

					get_primary_pricing_name
					(
					 p_khr_id =>p_chr_id,
					 p_sty_id =>l_rl_rec2.object1_id1,
					 x_return_status =>x_return_status,
					 x_primary_pricing_name	=>l_pricing_name
					);
--Added by srsreeni for bug5841892
	            if l_pricing_name is not null then
					m := m + 1;
					px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
					px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
					px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
				end if;
--bug5841892 end of changes
-- vdamerla Forward Port Bug6149951
					--OPEN strm_name_csr( l_rl_rec2.object1_id1);
					--FETCH strm_name_csr INTO l_strm_name_rec;
					--CLOSE strm_name_csr;

					--l_level_type := l_rl_rec2.object1_id1;
					--l_strm_name := l_strm_name_rec.name;

--Added by srsreeni for bug5841892
--					px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
--bug5841892 end of changes
					--Added by kthiruva on 07-Dec-2005
					--Accrued Fee Income streams are retrieved and requested if defined
					--Bug 3410253 - Start of Changes
					IF(g_rep_req_yn = 'Y') THEN

						 get_dependent_stream_type
						 (
						  p_khr_id =>p_chr_id,
						  p_pdt_id =>l_pdt_id_rec.report_pdt_id,
						  p_primary_sty_id => l_level_type,
						  p_dependent_sty_purpose =>'ACCRUED_FEE_INCOME',
						  x_return_status => x_return_status,
						  x_dependent_sty_id =>l_sty_id
						 );

						 IF(x_return_status = 'E') THEN
							x_return_status := 'S';
						 END IF;

					ELSE
						 get_dependent_stream_type
						 (
						  p_khr_id => p_chr_id,
						  p_primary_sty_id => l_level_type,
						  p_dependent_sty_purpose =>'ACCRUED_FEE_INCOME',
						  x_return_status => x_return_status,
						  x_dependent_sty_id =>l_sty_id
						 );

						 IF x_return_status = 'E' THEN
							x_return_status := 'S';
						 END IF;
					END IF;

					IF(l_sty_id.id IS NOT NULL) THEN
						m := m + 1;
						px_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
						px_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
						px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
					END IF;

					--Bug 3410253 - End of Changes
        END IF;--vdamerla Bug6149951 ends

          OPEN strm_name_csr( l_rl_rec2.object1_id1);
          FETCH strm_name_csr INTO l_strm_name_rec;
          CLOSE strm_name_csr;

          l_level_type := l_rl_rec2.object1_id1;
          l_strm_name := l_strm_name_rec.name;


					idx := 0;
					FOR l_rl_rec in l_rl_csr (l_rl_rec2.slh_id, 'LALEVL', 'LASLL', p_chr_id, l_linked_asset_line_rec.id ) LOOP
						-- Start of Bug#2757289 modification
						IF (l_rl_rec.rule_information7 IS NOT NULL OR
							l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
						   (l_rl_rec.rule_information8 IS NOT NULL OR
							l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
							k := k + 1;
							idx := idx + 1;
							px_csm_periodic_expenses_tbl(k).level_index_number := idx;
							px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
							px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
							px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
							px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
							px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
							px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
							px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
							px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

							--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
							if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                               px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                            end if;

							px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
							px_csm_periodic_expenses_tbl(k).days_in_month	   := l_days_in_month_code;
							px_csm_periodic_expenses_tbl(k).days_in_year	   := l_days_in_yr_code;

							IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
							  px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
							END IF;

							-- Added by kthiruva on 29-Dec-2005.
							-- The value of the Advance and Arrears flag needs to be obtained from the rule information
							-- Bug 4915938 - Start of Changes
							IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
							ELSE
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
							END IF;
							-- Bug 4915938 - End of Changes
						ELSIF (l_rl_rec.rule_information7 IS NULL OR
							   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
							  (l_rl_rec.rule_information8 IS NULL OR
							   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
							-- End of Bug#2757289 modification
							k := k + 1;
							idx := idx + 1;
							px_csm_periodic_expenses_tbl(k).level_index_number := idx;
							px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
							px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
							px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
							px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
							px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
							px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
							px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
							px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

							--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
							if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                               px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                            end if;

							px_csm_periodic_expenses_tbl(k).days_in_month	   := l_days_in_month_code;
							px_csm_periodic_expenses_tbl(k).days_in_year	   := l_days_in_yr_code;

							IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
							  px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
							END IF;
							IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
							ELSE
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
							END IF;
							IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
   							  --11-Sep-09 sechawla  8798556
							  --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
							  px_csm_periodic_expenses_tbl(k).date_start:=l_linked_asset_line_rec.start_date;
							ELSE
							  px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
							END IF;
						END IF;
					END LOOP; -- END-FOR-LOOP: l_rl_csr
				Else -- l_rl_csr2%NOTFOUND
--Added by srsreeni for bug5841892
--					m := m + 1;
--					px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
--vdamerla Bug6149951 start
      IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN
					get_primary_pricing_name
					(
					 p_khr_id =>p_chr_id,
					 p_sty_id =>l_level_type,
					 x_return_status =>x_return_status,
					 x_primary_pricing_name	=>l_pricing_name
					);
--Added by srsreeni for bug5841892
				 if l_pricing_name is not null then
					m := m + 1;
					px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
					px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
					px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
				 end if;
      END IF;--vdamerla Bug6149951 ends

--bug5841892 end of changes
					k := k + 1;
					px_csm_periodic_expenses_tbl(k).level_index_number := 1;
					px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
					px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
					px_csm_periodic_expenses_tbl(k).period             := 'M';
					px_csm_periodic_expenses_tbl(k).amount             := l_linked_asset_line_rec.amount;
					px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
					px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

					--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                       px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                    end if;

					px_csm_periodic_expenses_tbl(k).date_start         := l_linked_asset_line_rec.start_date;
					px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
					px_csm_periodic_expenses_tbl(k).days_in_month      := l_days_in_month_code;
					px_csm_periodic_expenses_tbl(k).days_in_year       := l_days_in_yr_code;

					print( l_api_name, 'amnt='||to_char(px_csm_periodic_expenses_tbl(k).amount)||
							   '#ofPer='||to_char(px_csm_periodic_expenses_tbl(k).number_of_periods)||
					   'dateStart='||to_char(px_csm_periodic_expenses_tbl(k).date_start));

				End If; -- end-if l_rl_csr2%FOUND
				CLOSE l_rl_csr2;
			End If; -- end-if l_fee_type = 'MISCELLANEOUS'

		 END LOOP; -- end-loop: l_linked_asset_line_rec
	   ELSE -- No asset association found
			 If ( nvl(l_lne_rec.initial_direct_cost,0) > 0.0 ) Then
			   l := l + 1;
			   px_csm_one_off_fee_tbl(l).description       := l_strm_name;
			   px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
			   px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
			   px_csm_one_off_fee_tbl(l).amount            := l_lne_rec.initial_direct_cost;
			   px_csm_one_off_fee_tbl(l).date_paid         := l_lne_rec.start_date;
			   px_csm_one_off_fee_tbl(l).kle_fee_id        := l_lne_rec.id;

			   --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
			   if l_PROSPECTIVE_REBOOK_YN = 'Y' then
			      px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
			   end if;

			   -- gboomina BUG#4508077 IDC changes start
			   px_csm_one_off_fee_tbl(l).idc_accounting_flag := OKL_CREATE_STREAMS_PUB.G_FND_YES;
			   -- gboomina BUG#4508077 IDC changes end
			End If;
			   --Added by kthiruva on 15-Feb-2006
			   -- Streams for the fee need to be retrieved if Pricing Name is setup for the same
			   --Bug 4930293 - Start of Changes
--Added by srsreeni for bug5841892
--			   m := m + 1;
--			   px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
			   get_primary_pricing_name
				(
				 p_khr_id =>p_chr_id,
				 p_sty_id =>l_level_type,
				 x_return_status =>x_return_status,
				 x_primary_pricing_name	=>l_pricing_name
				 );
--Added by srsreeni for bug5841892
			 if l_pricing_name is not null then
			   m := m + 1;
			   px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
			   px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
			   px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
			 end if;
--bug5841892 end of changes
			   --Bug 4930293 - End of Changes

			  -- gboomina BUG#4508077 IDC changes start
			  -- get dependent streams for the reporting product
		      IF(g_rep_req_yn = 'Y') THEN

				   get_dependent_stream_types
				   (
					p_khr_id => p_chr_id,
					p_pdt_id => l_pdt_id_rec.report_pdt_id,
					p_primary_sty_id => l_level_type,
					x_return_status => x_return_status,
					x_dependent_sty_id => l_strm_type_id_tbl
				   );
				   IF(x_return_status = 'E') THEN
					 x_return_status := 'S';
				   END IF;
			  -- get dependent streams for the main product
			  ELSE
				   get_dependent_stream_types
				   (
					p_khr_id => p_chr_id,
					p_primary_sty_id => l_level_type,
					x_return_status => x_return_status,
					x_dependent_sty_id =>  l_strm_type_id_tbl
				   );
				   IF(x_return_status = 'E') THEN
					 x_return_status := 'S';
				   END IF;

			  END IF; -- end of dependent streams block

			  -- populate the dependent stream types
			  IF l_strm_type_id_tbl.COUNT > 0 THEN
					  FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
						 m := m + 1;
						 --Modified by kthiruva on 21-Oct-2005
						 --Bug 4690770 - Start of Changes
						 --l_strm_type_id_tbl should be referenced, not l_sty_id during the assignments
				 px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
				 px_csm_stream_types_tbl(m).pricing_name   := l_strm_type_id_tbl(i).pricing_name;
						 px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
						 --Bug 4690770 - End of Changes
					  END LOOP;
			  -- gboomina BUG#4508077 IDC changes end
			 END IF; -- end of populate dependent stream types

			 IF l_expense_exists THEN
				-- sjalasut, bug 4872258. assumption is now -1 instead of zero. START
				IF  NVL(l_lne_rec.amount,-1) <> NVL(l_lne_rec.initial_direct_cost,-1) THEN
					-- sjalasut, bug 4872258.  assumption is now -1 instead of zero. END
					k := k + 1;
					px_csm_periodic_expenses_tbl(k).level_index_number := 1;
					px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
					px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				  	px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(nvl(l_rl_rec2_exp.RULE_INFORMATION2,'0'));
					px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec2_exp.RULE_INFORMATION1, l_hdr_rec.term));
					px_csm_periodic_expenses_tbl(k).amount           := px_csm_periodic_expenses_tbl(k).amount - (NVL(l_lne_rec.initial_direct_cost,0)/px_csm_periodic_expenses_tbl(k).number_of_periods);
					px_csm_periodic_expenses_tbl(k).period             := l_rl_rec1.object1_id1;
					px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

					--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                       px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                    end if;

					px_csm_periodic_expenses_tbl(k).date_start         := l_lne_rec.start_date;
					px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					px_csm_periodic_expenses_tbl(k).days_in_month     := l_days_in_month_code;
					px_csm_periodic_expenses_tbl(k).days_in_year      := l_days_in_yr_code;
				END IF;
         	Elsif ( l_fee_type <> 'MISCELLANEOUS' ) Then
                --m := m + 1;
                --px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
      --srsreeni Bug6149951 start
      IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN
          get_primary_pricing_name
          (
           p_khr_id =>p_chr_id,
           p_sty_id =>l_level_type,
           x_return_status =>x_return_status,
           x_primary_pricing_name =>l_pricing_name
          );
           IF l_pricing_name IS NOT NULL
           THEN
           m := m + 1;
           px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
           px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
           px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
           END IF;
       END IF;
      --srsreeni Bug6149951 ends
                --px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
				k := k + 1;
				px_csm_periodic_expenses_tbl(k).level_index_number := 1;
				px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
				px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				px_csm_periodic_expenses_tbl(k).amount             := nvl(l_lne_rec.amount,0)-nvl(l_lne_rec.initial_direct_cost,0);
				px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
				px_csm_periodic_expenses_tbl(k).period             := 'M';
				px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

				--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                   px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                end if;

				px_csm_periodic_expenses_tbl(k).date_start         := l_lne_rec.start_date;
                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                px_csm_periodic_expenses_tbl(k).days_in_month      := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year       := l_days_in_yr_code;

                print( l_api_name, 'amnt='||to_char(px_csm_periodic_expenses_tbl(k).amount)||
		                   '#ofPer='||to_char(px_csm_periodic_expenses_tbl(k).number_of_periods)||
				   'dateStart='||to_char(px_csm_periodic_expenses_tbl(k).date_start));

		    End If; -- end-if: l_expense_exists

			IF ( l_fee_type = 'MISCELLANEOUS' ) Then
				OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_lne_rec.id );
				FETCH l_rl_csr2 INTO l_rl_rec2;

				IF l_rl_csr2%FOUND THEN
--Added by srsreeni for bug5841892
--					m := m + 1;
--					px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
--bug5841892 end of changes
					get_primary_pricing_name
					(
					 p_khr_id =>p_chr_id,
					 p_sty_id =>l_rl_rec2.object1_id1,
					 x_return_status =>x_return_status,
					 x_primary_pricing_name	=>l_pricing_name
					);
--Added by srsreeni for bug5841892
					if l_pricing_name is not null then
						m := m + 1;
						px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
						px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
						px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
					end if;
--bug5841892 end of changes
					OPEN strm_name_csr( l_rl_rec2.object1_id1);
					FETCH strm_name_csr INTO l_strm_name_rec;
					CLOSE strm_name_csr;

					l_level_type := l_rl_rec2.object1_id1;
					l_strm_name := l_strm_name_rec.name;
--Added by srsreeni for bug5841892
--					px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
--bug5841892 end of changes
					--Added by kthiruva on 07-Dec-2005
					--Accrued Fee Income streams are retrieved and requested if defined
					--Bug 3410253 - Start of Changes
					IF(g_rep_req_yn = 'Y') THEN

						 get_dependent_stream_type
						 (
						  p_khr_id =>p_chr_id,
						  p_pdt_id =>l_pdt_id_rec.report_pdt_id,
						  p_primary_sty_id => l_level_type,
						  p_dependent_sty_purpose =>'ACCRUED_FEE_INCOME',
						  x_return_status => x_return_status,
						  x_dependent_sty_id =>l_sty_id
						 );

						 IF(x_return_status = 'E') THEN
							x_return_status := 'S';
						 END IF;

					ELSE
						 get_dependent_stream_type
						 (
						  p_khr_id => p_chr_id,
						  p_primary_sty_id => l_level_type,
						  p_dependent_sty_purpose =>'ACCRUED_FEE_INCOME',
						  x_return_status => x_return_status,
						  x_dependent_sty_id =>l_sty_id
						 );

						 IF x_return_status = 'E' THEN
							x_return_status := 'S';
						 END IF;
					END IF;

					IF(l_sty_id.id IS NOT NULL) THEN
						m := m + 1;
						px_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
						px_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
						px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
					END IF;

					--Bug 3410253 - End of Changes

					idx := 0;
					FOR l_rl_rec in l_rl_csr (l_rl_rec2.slh_id, 'LALEVL', 'LASLL', p_chr_id, l_lne_rec.id ) LOOP
						-- Start of Bug#2757289 modification
						IF (l_rl_rec.rule_information7 IS NOT NULL OR
							l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
						   (l_rl_rec.rule_information8 IS NOT NULL OR
							l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
							k := k + 1;
							idx := idx + 1;
							px_csm_periodic_expenses_tbl(k).level_index_number := idx;
							px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
							px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
							px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
							px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
							px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
							px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
							px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
							px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

							--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
							if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                               px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                            end if;

							px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
							px_csm_periodic_expenses_tbl(k).days_in_month	   := l_days_in_month_code;
							px_csm_periodic_expenses_tbl(k).days_in_year	   := l_days_in_yr_code;

							IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
							  px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
							END IF;

							-- Added by kthiruva on 29-Dec-2005.
							-- The value of the Advance and Arrears flag needs to be obtained from the rule information
							-- Bug 4915938 - Start of Changes
							IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
							ELSE
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
							END IF;
							-- Bug 4915938 - End of Changes
						ELSIF (l_rl_rec.rule_information7 IS NULL OR
							   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
							  (l_rl_rec.rule_information8 IS NULL OR
							   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
							-- End of Bug#2757289 modification
							k := k + 1;
							idx := idx + 1;
							px_csm_periodic_expenses_tbl(k).level_index_number := idx;
							px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
							px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
							px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
							px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
							px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
							px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
							px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
							px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

							--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
							if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                               px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                            end if;

							px_csm_periodic_expenses_tbl(k).days_in_month	   := l_days_in_month_code;
							px_csm_periodic_expenses_tbl(k).days_in_year	   := l_days_in_yr_code;

							IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
							  px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
							END IF;
							IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
							ELSE
							  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
							END IF;
							IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
							  --11-Sep-09 sechawla  8798556
							  --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
							  px_csm_periodic_expenses_tbl(k).date_start:= l_lne_rec.start_date;
							ELSE
							  px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
							END IF;
						END IF;
					END LOOP; -- END-FOR-LOOP: l_rl_csr
				Else -- l_rl_csr2%NOTFOUND
--Added by srsreeni for bug5841892
--					m := m + 1;
--					px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes

					get_primary_pricing_name
					(
					 p_khr_id =>p_chr_id,
					 p_sty_id =>l_level_type,
					 x_return_status =>x_return_status,
					 x_primary_pricing_name	=>l_pricing_name
					);
--Added by srsreeni for bug5841892
				if l_pricing_name is not null then
					m := m + 1;
					px_csm_stream_types_tbl(m).stream_type_id := l_level_type;
					px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
					px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
				end if;

--bug5841892 end of changes
					k := k + 1;
					px_csm_periodic_expenses_tbl(k).level_index_number := 1;
					px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
					px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
					px_csm_periodic_expenses_tbl(k).period             := 'M';
					px_csm_periodic_expenses_tbl(k).amount             := l_lne_rec.amount;
					px_csm_periodic_expenses_tbl(k).number_of_periods  := 1;
					px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

					--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                       px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                    end if;

					px_csm_periodic_expenses_tbl(k).date_start         := l_lne_rec.start_date;
					px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
					px_csm_periodic_expenses_tbl(k).days_in_month      := l_days_in_month_code;
					px_csm_periodic_expenses_tbl(k).days_in_year       := l_days_in_yr_code;

					print( l_api_name, 'amnt='||to_char(px_csm_periodic_expenses_tbl(k).amount)||
							   '#ofPer='||to_char(px_csm_periodic_expenses_tbl(k).number_of_periods)||
					   'dateStart='||to_char(px_csm_periodic_expenses_tbl(k).date_start));

				End If; -- end-if l_rl_csr2%FOUND
				CLOSE l_rl_csr2;
			End If; -- end-if l_fee_type = 'MISCELLANEOUS'

		END IF;	-- end-if: l_asset_association

      ELSIF l_fee_type = 'FINANCED' THEN
        OPEN  get_strm_name_fin_csr(p_chr_d  => p_chr_id,
                                    p_cle_id => l_lne_rec.id);
        FETCH get_strm_name_fin_csr INTO l_strm_name_fin_rec;
        CLOSE get_strm_name_fin_csr;

        /* ER# 5150038 */
        /* Getting the linked asset line for the current financed fee.
         * If there is an asset association, this cursor will return those linked asset association.
         * Only if the relevant payment is also associated to an asset, then use the amount allocated to
         * each asset as funding amount since the number of periods in expense is always 1.
         * You don't have to split the expense amount based on a ratio of amount allocated to each assets.
         */
        OPEN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id);
        FETCH l_linked_asset_line_csr INTO l_linked_asset_line_rec;

		OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_linked_asset_line_rec.id );
		FETCH l_rl_csr2 INTO l_rl_rec2;

        IF l_linked_asset_line_csr%FOUND AND
           l_rl_csr2%FOUND
        THEN
        	l_asset_association := TRUE;
        ELSE
        	l_asset_association := FALSE;
        END IF;
        CLOSE l_linked_asset_line_csr;
        CLOSE l_rl_csr2;

        IF l_asset_association THEN
        	FOR l_linked_asset_line_rec IN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id) LOOP
				l := l + 1;
				px_csm_one_off_fee_tbl(l).description       := l_strm_name_fin_rec.strm_name;
				px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
				px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
				px_csm_one_off_fee_tbl(l).amount            := l_linked_asset_line_rec.amount;
				px_csm_one_off_fee_tbl(l).date_paid         := l_linked_asset_line_rec.start_date;
				px_csm_one_off_fee_tbl(l).kle_fee_id        := l_linked_asset_line_rec.id;

                --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
                if l_PROSPECTIVE_REBOOK_YN = 'Y' then
			       px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
			    end if;

 				OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_linked_asset_line_rec.id );
				FETCH l_rl_csr2 INTO l_rl_rec2;
				IF l_rl_csr2%FOUND THEN
				  -- Code added and commented for user defined streams
				  --m := m + 1;
	                                   -- srsreeni - Bug#5699923 - Added - Start
 	                                   -- DONOT request SuperTrump to generate streams
 	                                   -- for TERMINATED lines
 	                                   IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN

				  IF(g_rep_req_yn = 'Y') THEN

					get_dependent_stream_types
					(
					 p_khr_id =>p_chr_id,
					 p_pdt_id =>l_pdt_id_rec.report_pdt_id,
					 p_primary_sty_id =>l_rl_rec2.object1_id1,
					 x_return_status => x_return_status,
					 x_dependent_sty_id =>l_strm_type_id_tbl
					);
					IF x_return_status = 'E' THEN
						x_return_status := 'S';
					END IF;

				  ELSE
					get_dependent_stream_types
					(
					 p_khr_id =>p_chr_id,
					 p_primary_sty_id =>l_rl_rec2.object1_id1,
					 x_return_status => x_return_status,
					 x_dependent_sty_id =>l_strm_type_id_tbl
					);
					IF x_return_status = 'E' THEN
						x_return_status := 'S';
					END IF;
				  END IF;

				  IF l_strm_type_id_tbl.COUNT > 0 THEN
					FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
					  m := m + 1;

					  px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
					  px_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
					  px_csm_stream_types_tbl(m).kle_asset_id   := l_linked_asset_line_rec.id;
					END LOOP;
				  END IF;
	                                   END IF; -- End of check for TERMINATED status
 	                                   -- srsreeni - Bug#5699923 - Added - End

				  OPEN strm_name_csr( l_rl_rec2.object1_id1);
				  FETCH strm_name_csr INTO l_strm_name_rec;
				  CLOSE strm_name_csr;
				  l_level_type := l_rl_rec2.object1_id1;
				  l_strm_name := l_strm_name_rec.name;
				  idx := 0;
				  FOR l_rl_rec IN l_rl_csr (l_rl_rec2.slh_id,'LALEVL','LASLL',p_chr_id, l_linked_asset_line_rec.id) LOOP
					-- Start of Bug#2757289 modification
					IF (l_rl_rec.rule_information7 IS NOT NULL OR
						l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
					   (l_rl_rec.rule_information8 IS NOT NULL OR
						l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
					  k := k + 1;
					  idx := idx + 1;
					  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
					  px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
					  px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
					  px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
					  px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
					  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
					  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
					  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

					  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                         px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                      end if;
					  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
					  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
					  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

					  IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
						px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
					  END IF;
					  -- End of Bug#2757289 modification

					  -- Added by kthiruva on 29-Dec-2005.
					  -- The value of the Advance and Arrears flag needs to be obtained from the rule information
					  -- Bug 4915938 - Start of Changes
					  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
						px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
					  ELSE
						px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					  END IF;
					  -- Bug 4915938 - End of Changes

					ELSIF (l_rl_rec.rule_information7 IS NULL OR
						   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
						  (l_rl_rec.rule_information8 IS NULL OR
						   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
					  k := k + 1;
					  idx := idx + 1;
					  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
					  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
					  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
					  px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
					  px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.rule_information6,'0'));
					  px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.rule_information3, l_hdr_rec.term));
					  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
					  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_linked_asset_line_rec.id;

					   --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
					  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                         px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
                      end if;

					  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
					  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
					  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

					  IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
						px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
					  END IF;
					  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
						px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
					  ELSE
						px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
					  END IF;
					  IF(l_rl_rec.rule_information2 IS NULL OR
						 l_rl_rec.rule_information2 = OKL_API.G_MISS_CHAR) THEN
						 --11-Sep-09 sechawla  8798556
						 --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
						 px_csm_periodic_expenses_tbl(k).date_start:= l_linked_asset_line_rec.start_date;
					  ELSE
						px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
					  END IF;
					END IF;
				  END LOOP;

				END IF; -- l_rl_csr2%FOUND
				CLOSE l_rl_csr2;
			END LOOP; -- l_linked_asset_line_csr
		ELSE
			l := l + 1;
			px_csm_one_off_fee_tbl(l).description       := l_strm_name_fin_rec.strm_name;
			px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
			px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
			px_csm_one_off_fee_tbl(l).amount            := l_strm_name_fin_rec.amount;
			px_csm_one_off_fee_tbl(l).date_paid         := l_lne_rec.start_date;
			px_csm_one_off_fee_tbl(l).kle_fee_id        := l_lne_rec.id;

			--sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
			if l_PROSPECTIVE_REBOOK_YN = 'Y' then
    	       px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
            end if;

			OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_lne_rec.id );
			FETCH l_rl_csr2 INTO l_rl_rec2;
			IF l_rl_csr2%FOUND THEN
			  -- Code added and commented for user defined streams
			  --m := m + 1;
			  IF(g_rep_req_yn = 'Y') THEN

				get_dependent_stream_types
				(
				 p_khr_id =>p_chr_id,
				 p_pdt_id =>l_pdt_id_rec.report_pdt_id,
				 p_primary_sty_id =>l_rl_rec2.object1_id1,
				 x_return_status => x_return_status,
				 x_dependent_sty_id =>l_strm_type_id_tbl
				);
				IF x_return_status = 'E' THEN
					x_return_status := 'S';
				END IF;

			  ELSE
				get_dependent_stream_types
				(
				 p_khr_id =>p_chr_id,
				 p_primary_sty_id =>l_rl_rec2.object1_id1,
				 x_return_status => x_return_status,
				 x_dependent_sty_id =>l_strm_type_id_tbl
				);
				IF x_return_status = 'E' THEN
					x_return_status := 'S';
				END IF;

			  END IF;

			  IF l_strm_type_id_tbl.COUNT > 0 THEN
				FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
				  m := m + 1;

				  px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
				  px_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
				  px_csm_stream_types_tbl(m).kle_asset_id   := l_lne_rec.id;
				END LOOP;
			  END IF;

			  --px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
			  --px_csm_stream_types_tbl(m).kle_asset_id   := l_lne_rec.id;

			  --Added Code ends here
			  OPEN strm_name_csr( l_rl_rec2.object1_id1);
			  FETCH strm_name_csr INTO l_strm_name_rec;
			  CLOSE strm_name_csr;
			  l_level_type := l_rl_rec2.object1_id1;
			  l_strm_name := l_strm_name_rec.name;
			  idx := 0;
			  FOR l_rl_rec IN l_rl_csr (l_rl_rec2.slh_id,'LALEVL','LASLL',p_chr_id, l_lne_rec.id) LOOP
				-- Start of Bug#2757289 modification
				IF (l_rl_rec.rule_information7 IS NOT NULL OR
					l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
				   (l_rl_rec.rule_information8 IS NOT NULL OR
					l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
				  k := k + 1;
				  idx := idx + 1;
				  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
				  px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
				  px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
				  px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
				  px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
				  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
				  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
				  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

				   --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                     px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                  end if;
				  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
				  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

				  IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
					px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
				  END IF;
				  -- End of Bug#2757289 modification

				  -- Added by kthiruva on 29-Dec-2005.
				  -- The value of the Advance and Arrears flag needs to be obtained from the rule information
				  -- Bug 4915938 - Start of Changes
				  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
				  ELSE
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
				  END IF;
				  -- Bug 4915938 - End of Changes

				ELSIF (l_rl_rec.rule_information7 IS NULL OR
					   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
					  (l_rl_rec.rule_information8 IS NULL OR
					   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
				  k := k + 1;
				  idx := idx + 1;
				  px_csm_periodic_expenses_tbl(k).level_index_number := idx;
				  px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
				  px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
				  px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
				  px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.rule_information6,'0'));
				  px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.rule_information3, l_hdr_rec.term));
				  px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
				  px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

				  --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
				  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                     px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                  end if;

				  px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
				  px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
				  px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

				  IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
					px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
				  END IF;
				  IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
				  ELSE
					px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
				  END IF;
				  IF(l_rl_rec.rule_information2 IS NULL OR
					 l_rl_rec.rule_information2 = OKL_API.G_MISS_CHAR) THEN
					 --11-Sep-09 sechawla  8798556
					 --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
					 px_csm_periodic_expenses_tbl(k).date_start:=l_lne_rec.start_date;
				  ELSE
					px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
				  END IF;
				END IF;
			  END LOOP;

			END IF; -- l_rl_csr2%FOUND
			CLOSE l_rl_csr2;
        END IF; -- l_asset_association

        /* -- End of the process for Funding section considering asset association -- */


	-- Code added by HKPATEL 04-AUG-2004 for ROLLOVER QUOTE changes

	  ELSIF l_fee_type = 'ROLLOVER' THEN
        OPEN  get_strm_name_abs_csr(p_chr_d  => p_chr_id,
                                    p_cle_id => l_lne_rec.id);
        FETCH get_strm_name_abs_csr INTO l_strm_name_abs_rec;
        CLOSE get_strm_name_abs_csr;

		l_link_fee_asset_yn := 'FALSE';
	-- Code for linked asset with rollover fee
   	   OPEN  link_rollover_csr(l_lne_rec.id);
   	   FETCH link_rollover_csr INTO link_rollover_rec;
   	   IF link_rollover_csr%FOUND THEN
         OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), link_rollover_rec.id );
     	 FETCH l_rl_csr2 INTO l_rl_rec2;
     	 IF l_rl_csr2%FOUND THEN
       	   l_link_fee_asset_yn := 'TRUE';
     	 END IF;
     	 CLOSE l_rl_csr2;
   	   END IF;
   	   CLOSE link_rollover_csr;

		IF l_link_fee_asset_yn = 'TRUE' THEN
		  FOR link_rollover_rec IN link_rollover_csr(l_lne_rec.id) LOOP

            l := l + 1;
            px_csm_one_off_fee_tbl(l).description       := l_strm_name_abs_rec.strm_name;
            px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
            px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
            px_csm_one_off_fee_tbl(l).amount            := link_rollover_rec.amount;
            px_csm_one_off_fee_tbl(l).date_paid         := l_lne_rec.start_date;
            px_csm_one_off_fee_tbl(l).kle_fee_id        := link_rollover_rec.id;

            --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
    	       px_csm_one_off_fee_tbl(l).orig_contract_line_id := link_rollover_rec.orig_contract_line_id;
    	    end if;

            OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), link_rollover_rec.id );
            FETCH l_rl_csr2 INTO l_rl_rec2;
            IF l_rl_csr2%FOUND THEN
            /*m := m + 1;
            px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
            px_csm_stream_types_tbl(m).kle_asset_id   := link_rollover_rec.id;
			*/

	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF link_rollover_rec.STE_CODE <> 'TERMINATED' THEN
		      IF(g_rep_req_yn = 'Y') THEN

		        get_dependent_stream_types
                (
                 p_khr_id =>p_chr_id,
                 p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                 p_primary_sty_id =>l_rl_rec2.object1_id1,
                 x_return_status => x_return_status,
                 x_dependent_sty_id =>l_strm_type_id_tbl
                );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		      ELSE
		        get_dependent_stream_types
                (
                 p_khr_id =>p_chr_id,
                 p_primary_sty_id =>l_rl_rec2.object1_id1,
                 x_return_status => x_return_status,
                 x_dependent_sty_id =>l_strm_type_id_tbl
		        );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		      END IF;

              IF l_strm_type_id_tbl.COUNT > 0 THEN
                FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
			      m := m + 1;
    		      px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
    		      px_csm_stream_types_tbl(m).pricing_name   := l_strm_type_id_tbl(i).pricing_name;
				  --smahapat for bug 4100031
                  --px_csm_stream_types_tbl(m).kle_asset_id   := l_lne_rec.id;
                  px_csm_stream_types_tbl(m).kle_asset_id   := link_rollover_rec.id;
				  -- end change for bug 4100031
			    END LOOP;
		      END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End


            OPEN strm_name_csr( l_rl_rec2.object1_id1);
            FETCH strm_name_csr INTO l_strm_name_rec;
            CLOSE strm_name_csr;
            l_level_type := l_rl_rec2.object1_id1;
            l_strm_name := l_strm_name_rec.name;
            idx := 0;
            FOR l_rl_rec IN l_rl_csr (l_rl_rec2.slh_id,'LALEVL','LASLL',p_chr_id, link_rollover_rec.id) LOOP
            -- Start of Bug#2757289 modification
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                  l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                  l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                px_csm_periodic_expenses_tbl(k).level_index_number := idx;
                px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
                px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                px_csm_periodic_expenses_tbl(k).kle_fee_id         := link_rollover_rec.id;

				--sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
			    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                  px_csm_periodic_expenses_tbl(k).orig_contract_line_id := link_rollover_rec.orig_contract_line_id;
			    end if;

                px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
                px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

                IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
                  px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
                END IF;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

              ELSIF (l_rl_rec.rule_information7 IS NULL OR
                     l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                    (l_rl_rec.rule_information8 IS NULL OR
                     l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                px_csm_periodic_expenses_tbl(k).level_index_number := idx;
                px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
                px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
                px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.rule_information6,'0'));
                px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.rule_information3, l_hdr_rec.term));
                px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                px_csm_periodic_expenses_tbl(k).kle_fee_id         := link_rollover_rec.id;

                --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
                if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                   px_csm_periodic_expenses_tbl(k).orig_contract_line_id := link_rollover_rec.orig_contract_line_id;
                end if;

                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

                IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
                  px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
                END IF;
                IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                IF(l_rl_rec.rule_information2 IS NULL OR
                   l_rl_rec.rule_information2 = OKL_API.G_MISS_CHAR) THEN
                  --11-Sep-09 sechawla  8798556
                  --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
                  px_csm_periodic_expenses_tbl(k).date_start:= link_rollover_rec.start_date;
                ELSE
                  px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                END IF;
              END IF;
            END LOOP;
          END IF;
        CLOSE l_rl_csr2;
      END LOOP;
	END IF;
	-- Code for linked asset ends here

    IF l_link_fee_asset_yn = 'FALSE' THEN
	    l := l + 1;
        px_csm_one_off_fee_tbl(l).description       := l_strm_name_abs_rec.strm_name;
        px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
        px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
        px_csm_one_off_fee_tbl(l).amount            := l_strm_name_abs_rec.amount;
        px_csm_one_off_fee_tbl(l).date_paid         := l_lne_rec.start_date;
        px_csm_one_off_fee_tbl(l).kle_fee_id        := l_lne_rec.id;

        --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
         	px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
        end if;

        OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_lne_rec.id );
        FETCH l_rl_csr2 INTO l_rl_rec2;
        IF l_rl_csr2%FOUND THEN
		/*
          m := m + 1;
          px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
          px_csm_stream_types_tbl(m).kle_asset_id   := l_lne_rec.id;
		 */
		  IF(g_rep_req_yn = 'Y') THEN

		    get_dependent_stream_types
            (
            p_khr_id =>p_chr_id,
            p_pdt_id =>l_pdt_id_rec.report_pdt_id,
            p_primary_sty_id =>l_rl_rec2.object1_id1,
            x_return_status => x_return_status,
            x_dependent_sty_id =>l_strm_type_id_tbl
            );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  ELSE
		   get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_primary_sty_id =>l_rl_rec2.object1_id1,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
		    );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  END IF;

          IF l_strm_type_id_tbl.COUNT > 0 THEN
            FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
			  m := m + 1;
    		  px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
    		  px_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
              px_csm_stream_types_tbl(m).kle_asset_id   := l_lne_rec.id;
			END LOOP;
		  END IF;

          OPEN strm_name_csr( l_rl_rec2.object1_id1);
          FETCH strm_name_csr INTO l_strm_name_rec;
          CLOSE strm_name_csr;
          l_level_type := l_rl_rec2.object1_id1;
          l_strm_name := l_strm_name_rec.name;
          idx := 0;
          FOR l_rl_rec IN l_rl_csr (l_rl_rec2.slh_id,'LALEVL','LASLL',p_chr_id, l_lne_rec.id) LOOP
            -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              px_csm_periodic_expenses_tbl(k).level_index_number := idx;
              px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

              --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
              end if;

              px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
              px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
                px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
              END IF;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              px_csm_periodic_expenses_tbl(k).level_index_number := idx;
              px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
              px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.rule_information6,'0'));
              px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.rule_information3, l_hdr_rec.term));
              px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

              --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
              end if;

              px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
                px_csm_periodic_expenses_tbl(k).structure  := TO_NUMBER(l_rl_rec.rule_information5);
              END IF;
              IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF(l_rl_rec.rule_information2 IS NULL OR
                 l_rl_rec.rule_information2 = OKL_API.G_MISS_CHAR) THEN
                 --11-Sep-09 sechawla  8798556
                 --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
                 px_csm_periodic_expenses_tbl(k).date_start:= l_lne_rec.start_date;
              ELSE
                px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
              END IF;
            END IF;
          END LOOP;
        END IF;
        CLOSE l_rl_csr2;
	END IF;

	--CLOSE link_rollover_csr;

	-- Code added by HKPATEL 04-AUG-2004 for ROLLOVER QUOTE ends here

      ELSIF l_fee_type = 'ABSORBED' THEN
      --Start of modification for Bug#3320656 BAKUCHIB Modified
        OPEN  get_strm_name_abs_csr(p_chr_d  => p_chr_id,
                                    p_cle_id => l_lne_rec.id);
        FETCH get_strm_name_abs_csr INTO l_strm_name_abs_rec;
        CLOSE get_strm_name_abs_csr;

        /* ER# 5150038 */
        /* Getting the linked asset line for the current absorbed fee.
         * If absorbed fee is associated to assets, this cursor will return those linked asset association.
         * Use the amount allocated to each asset as one-time fee amount.
         * Since no payments are expected for absorbed fee,
         * you don't have to check if payment lines are associated to assets.
         */
        OPEN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id);
        FETCH l_linked_asset_line_csr INTO l_linked_asset_line_rec;

        IF l_linked_asset_line_csr%FOUND THEN
        	l_asset_association := TRUE;
        ELSE
        	l_asset_association := FALSE;
        END IF;
        CLOSE l_linked_asset_line_csr;

        IF l_asset_association THEN
        	FOR l_linked_asset_line_rec IN l_linked_asset_line_csr(p_chr_id, l_lne_rec.id) LOOP
				l := l + 1;
				px_csm_one_off_fee_tbl(l).description       := l_strm_name_abs_rec.strm_name;
				px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
				px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
				px_csm_one_off_fee_tbl(l).amount            := l_linked_asset_line_rec.amount;
				px_csm_one_off_fee_tbl(l).date_paid         := l_linked_asset_line_rec.start_date;
				px_csm_one_off_fee_tbl(l).kle_fee_id        := l_linked_asset_line_rec.id;

				--sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
				if l_PROSPECTIVE_REBOOK_YN = 'Y' then
     		    	px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_linked_asset_line_rec.orig_contract_line_id;
     		    end if;

			-- gboomina BUG#4508077 changes start
			   IF('RVI' = l_strm_name_abs_rec.fee_purpose_code) THEN
				 px_csm_one_off_fee_tbl(l).idc_accounting_flag := OKL_CREATE_STREAMS_PUB.G_FND_YES;
				 -- populating the interface table records if pricing name is not null
      -- vdamerla Bug6149951
      --vdamerla Bug6149951 start
         IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN
				    get_primary_pricing_name
				    (
				     p_khr_id =>p_chr_id,
				     p_sty_id =>l_strm_name_abs_rec.sty_id,
				     x_return_status =>x_return_status,
				     x_primary_pricing_name  => l_pricing_name
				    );
				    IF l_pricing_name IS NOT NULL THEN
				      m := m + 1;
				      px_csm_stream_types_tbl(m).stream_type_id := l_strm_name_abs_rec.sty_id;
				      px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
				      px_csm_stream_types_tbl(m).kle_fee_id     := l_linked_asset_line_rec.id;
				    END IF;
         -- vdamerla Forward Ported Bug6149951
         END IF;
			   --Added by kthiruva on 03-Jan-2005
			   --Dependents on Absorbd Fees need to be requested always
			   --Bug 4918934 - Start of Changes
 			   END IF;
      -- vdamerla Forward Ported Bug6149951
      --srsreeni Bug6149951 start
         IF l_linked_asset_line_rec.STE_CODE <> 'TERMINATED' THEN
			   --Bug 4918934 - End of Changes
			   -- get dependent streams for the reporting product
			   IF(g_rep_req_yn = 'Y') THEN
				  get_dependent_stream_types(p_khr_id => p_chr_id,
											 p_pdt_id => l_pdt_id_rec.report_pdt_id,
											 p_primary_sty_id => l_strm_name_abs_rec.sty_id,
											 x_return_status => x_return_status,
											 x_dependent_sty_id => l_strm_type_id_tbl);
				  IF(x_return_status = 'E') THEN
					 x_return_status := 'S';
				  END IF;
			   -- get dependent streams for the main product
			   ELSE
				 get_dependent_stream_types(p_khr_id => p_chr_id,
											p_primary_sty_id => l_strm_name_abs_rec.sty_id,
											x_return_status => x_return_status,
											x_dependent_sty_id => l_strm_type_id_tbl);
				 IF(x_return_status = 'E') THEN
					x_return_status := 'S';
				 END IF;
			   END IF; -- end of dependent streams block
			   -- populate the dependent stream types
			   IF l_strm_type_id_tbl.COUNT > 0 THEN
				  FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
					  m := m + 1;
					  px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
					  px_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
					  px_csm_stream_types_tbl(m).kle_fee_id   := l_linked_asset_line_rec.id;
				  END LOOP;
			   END IF; -- end of populate dependent stream types
			   -- gboomina BUG#4508077 changes end
         END IF;--vdamerla Bug6149951 ends

			  --End of modification for Bug#3320656 BAKUCHIB Modified
			  -- gboomina BUG#4598620 changes start
			  -- requesting all ABSORBED fees as IDC fees
				 px_csm_one_off_fee_tbl(l).idc_accounting_flag := OKL_CREATE_STREAMS_PUB.G_FND_YES;
			  -- gboomina BUG#4598620 changes end
			END LOOP; -- l_linked_asset_line_csr
		ELSE
			l := l + 1;
			px_csm_one_off_fee_tbl(l).description       := l_strm_name_abs_rec.strm_name;
			px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
			px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
			px_csm_one_off_fee_tbl(l).amount            := l_strm_name_abs_rec.amount;
			px_csm_one_off_fee_tbl(l).date_paid         := l_lne_rec.start_date;
			px_csm_one_off_fee_tbl(l).kle_fee_id        := l_lne_rec.id;

		    --sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
		    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
    			px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
	        end if;

			-- gboomina BUG#4508077 changes start
			   IF('RVI' = l_strm_name_abs_rec.fee_purpose_code) THEN
				 px_csm_one_off_fee_tbl(l).idc_accounting_flag := OKL_CREATE_STREAMS_PUB.G_FND_YES;
				 -- populating the interface table records if pricing name is not null
				 get_primary_pricing_name
				 (
				  p_khr_id =>p_chr_id,
				  p_sty_id =>l_strm_name_abs_rec.sty_id,
				  x_return_status =>x_return_status,
				  x_primary_pricing_name  => l_pricing_name
				 );
				 IF l_pricing_name IS NOT NULL THEN
				   m := m + 1;
				   px_csm_stream_types_tbl(m).stream_type_id := l_strm_name_abs_rec.sty_id;
				   px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
				   px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
				 END IF;
			   --Added by kthiruva on 03-Jan-2005
			   --Dependents on Absorbd Fees need to be requested always
			   --Bug 4918934 - Start of Changes
			   END IF;
			   --Bug 4918934 - End of Changes
			   -- get dependent streams for the reporting product
			   IF(g_rep_req_yn = 'Y') THEN
				  get_dependent_stream_types(p_khr_id => p_chr_id,
											 p_pdt_id => l_pdt_id_rec.report_pdt_id,
											 p_primary_sty_id => l_strm_name_abs_rec.sty_id,
											 x_return_status => x_return_status,
											 x_dependent_sty_id => l_strm_type_id_tbl);
				  IF(x_return_status = 'E') THEN
					 x_return_status := 'S';
				  END IF;
			   -- get dependent streams for the main product
			   ELSE
				 get_dependent_stream_types(p_khr_id => p_chr_id,
											p_primary_sty_id => l_strm_name_abs_rec.sty_id,
											x_return_status => x_return_status,
											x_dependent_sty_id => l_strm_type_id_tbl);
				 IF(x_return_status = 'E') THEN
					x_return_status := 'S';
				 END IF;
			   END IF; -- end of dependent streams block
			   -- populate the dependent stream types
			   IF l_strm_type_id_tbl.COUNT > 0 THEN
				  FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
					  m := m + 1;
					  px_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
					  px_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
					  px_csm_stream_types_tbl(m).kle_fee_id   := l_lne_rec.id;
				  END LOOP;
			   END IF; -- end of populate dependent stream types
			   -- gboomina BUG#4508077 changes end

			  --End of modification for Bug#3320656 BAKUCHIB Modified
			  -- gboomina BUG#4598620 changes start
			  -- requesting all ABSORBED fees as IDC fees
				 px_csm_one_off_fee_tbl(l).idc_accounting_flag := OKL_CREATE_STREAMS_PUB.G_FND_YES;
			  -- gboomina BUG#4598620 changes end
		END IF; -- l_asset_association

      ELSIF l_fee_type = 'INCOME' THEN
        OPEN  l_rl_csr2 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_lne_rec.id );
        FETCH l_rl_csr2 INTO l_rl_rec2;
        IF l_rl_csr2%FOUND THEN
          -- rabhupat BUG#4234441 start
          -- populating the interface table records if pricing name is not null
          get_primary_pricing_name
          (
           p_khr_id =>p_chr_id,
           p_sty_id =>l_rl_rec2.object1_id1,
           x_return_status =>x_return_status,
           x_primary_pricing_name       =>l_pricing_name
          );
          IF l_pricing_name IS NOT NULL THEN
          -- rabhupat BUG#4234441 end
          m := m + 1;
          px_csm_stream_types_tbl(m).stream_type_id := l_rl_rec2.object1_id1;
          px_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;

          px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
          OPEN strm_name_csr( l_rl_rec2.object1_id1);
          FETCH strm_name_csr INTO l_strm_name_rec;
          CLOSE strm_name_csr;
          l_level_type := l_rl_rec2.object1_id1;
          l_strm_name := l_strm_name_rec.name;
          -- Bakuchib
          -- we need to find the number of payment levels for the income fees to
          -- decide weather we should send the one off table of records or
          -- Periodic expense table of records
          OPEN l_rl_income_csr(rlgpId => l_rl_rec2.slh_id,
                               rgcode => 'LALEVL',
                               rlcat  => 'LASLL',
                               chrId  => p_chr_id,
                               cleId  => l_lne_rec.id);
          FETCH l_rl_income_csr INTO ln_level_cnt;
          CLOSE l_rl_income_csr;
          IF ln_level_cnt = 1 THEN
            -- Requesting for Amortized Fee Income streams Additionaly
			-- added and commented code for user defined streams
			IF(g_rep_req_yn = 'Y') THEN

              get_dependent_stream_type
              (
                p_khr_id =>p_chr_id,
                p_pdt_id =>l_pdt_id_rec.report_pdt_id,
				p_primary_sty_id => l_level_type,
                p_dependent_sty_purpose =>'AMORTIZE_FEE_INCOME',
                x_return_status => x_return_status,
                x_dependent_sty_id =>l_sty_id
              );
			   IF(x_return_status = 'E') THEN
			     x_return_status := 'S';
			   END IF;

            ELSE
	          get_dependent_stream_type
	          (
 	            p_khr_id => p_chr_id,
 	            p_primary_sty_id => l_level_type,
				p_dependent_sty_purpose =>'AMORTIZE_FEE_INCOME',
 	            x_return_status => x_return_status,
 	            x_dependent_sty_id =>l_sty_id
	          );
			   IF x_return_status = 'E' THEN
			     x_return_status := 'S';
			   END IF;
	        END IF;

		/*
            OPEN  l_strmid_csr('AMORTIZED FEE INCOME');
            FETCH l_strmid_csr into l_strmid_rec;
            IF l_strmid_csr%NOTFOUND THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'AMORTIZED FEE INCOME');
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            END IF;
            CLOSE l_strmid_csr;
		*/
		-- added and commented code ends here.
		    IF (l_sty_id.id IS NOT NULL) THEN
            m := m + 1;
            --px_csm_stream_types_tbl(m).stream_type_id := l_strmid_rec.styid;
			px_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
			px_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
            px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
			END IF;
            l := l + 1;
            OPEN l_rl_csr(rlgpId => l_rl_rec2.slh_id,
                               rgcode => 'LALEVL',
                               rlcat  => 'LASLL',
                               chrId  => p_chr_id,
                               cleId  => l_lne_rec.id);
            FETCH l_rl_csr INTO r_rl_rec;
            CLOSE l_rl_csr;
            px_csm_one_off_fee_tbl(l).description       := l_strm_name;
            px_csm_one_off_fee_tbl(l).fee_type          := l_fee_type;
            px_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
            px_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(r_rl_rec.rule_information6);
            px_csm_one_off_fee_tbl(l).date_paid         := l_lne_rec.start_date;
            px_csm_one_off_fee_tbl(l).kle_fee_id        := l_lne_rec.id;

			--sechawla 15-jul-09 PRB ESG enhancements : assign orig_contract_line_id
			if l_PROSPECTIVE_REBOOK_YN = 'Y' then
    			px_csm_one_off_fee_tbl(l).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
	        end if;

          ELSIF ln_level_cnt > 1 THEN
            -- Requesting for Amortized Fee Income streams Additionaly
			-- added and commented code for user defined streams

			-- Put the rignt stream purpose 'ACCRUED_FEE_INCOME'- hkpatel- 4374085
			IF(g_rep_req_yn = 'Y') THEN

              get_dependent_stream_type
              (
                p_khr_id =>p_chr_id,
                p_pdt_id =>l_pdt_id_rec.report_pdt_id,
				p_primary_sty_id => l_level_type,
                p_dependent_sty_purpose =>'ACCRUED_FEE_INCOME',
                x_return_status => x_return_status,
                x_dependent_sty_id =>l_sty_id
              );
			   IF(x_return_status = 'E') THEN
			     x_return_status := 'S';
			   END IF;

            ELSE
	          get_dependent_stream_type
	          (
 	            p_khr_id => p_chr_id,
 	            p_primary_sty_id => l_level_type,
				p_dependent_sty_purpose =>'ACCRUED_FEE_INCOME',
 	            x_return_status => x_return_status,
 	            x_dependent_sty_id =>l_sty_id
	          );
			    IF x_return_status = 'E' THEN
				  x_return_status := 'S';
				END IF;
	        END IF;

			-- End Put the rignt stream purpose 'ACCRUED_FEE_INCOME'- hkpatel- 4374085
/*
            OPEN  l_strmid_csr('FEE INCOME');
            FETCH l_strmid_csr into l_strmid_rec;
            IF l_strmid_csr%NOTFOUND THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'FEE INCOME');
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            END IF;
            CLOSE l_strmid_csr;
*/
            IF(l_sty_id.id IS NOT NULL) THEN
            m := m + 1;
            --px_csm_stream_types_tbl(m).stream_type_id := l_strmid_rec.styid;
			px_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
			px_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
            px_csm_stream_types_tbl(m).kle_fee_id     := l_lne_rec.id;
			END IF;
            idx := 0;
            FOR l_rl_rec IN l_rl_csr (l_rl_rec2.slh_id,'LALEVL','LASLL',p_chr_id, l_lne_rec.id) LOOP
              -- Start of Bug#2757289 modification
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                  l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                  l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                px_csm_periodic_expenses_tbl(k).level_index_number := idx;
                px_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                px_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                px_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
                px_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

                --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
                if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                   px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                end if;

                px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
                px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

                IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
                  px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.rule_information5);
                END IF;
                -- End of Bug#2757289 modification

                -- Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes

              ELSIF (l_rl_rec.rule_information7 IS NULL OR
                     l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                    (l_rl_rec.rule_information8 IS NULL OR
                     l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                px_csm_periodic_expenses_tbl(k).level_index_number := idx;
                px_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                px_csm_periodic_expenses_tbl(k).fee_type           := l_fee_type;
                px_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
                px_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.rule_information6,'0'));
                px_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.rule_information3, l_hdr_rec.term));
                px_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                px_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                px_csm_periodic_expenses_tbl(k).kle_fee_id         := l_lne_rec.id;

                --sechawla 15-jul-09 : PRb ESg enhancements : assign orig_contract_line_id
                if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                   px_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_lne_rec.orig_contract_line_id;
                end if;

                px_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                px_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

                IF(l_rl_rec.rule_information5 IS NOT NULL) THEN
                    px_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.rule_information5);
                END IF;
                IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  px_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                IF(l_rl_rec.rule_information2 IS NULL OR
                   l_rl_rec.rule_information2 = OKL_API.G_MISS_CHAR) THEN
                   --11-Sep-09 sechawla  8798556
                   --px_csm_periodic_expenses_tbl(k).date_start:=l_hdr_rec.start_date;
                   px_csm_periodic_expenses_tbl(k).date_start:=l_lne_rec.start_date;
                ELSE
                  px_csm_periodic_expenses_tbl(k).date_start:=FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                END IF;
              END IF;

              -- RGOOTY: Bug 7552496: Start
              --  Issue: Periodic Income Streams are not correct when Fee starts later Contract Start Date
              --  Solution: Passing the Fee Start Date in okl_sif_fees_b.date_paid to pass it to SuperTrump
              --            using the StartAccrual tag only for the First Cash flow level
              IF idx = 1
              THEN
                IF(l_rl_rec.rule_information2 IS NULL OR
                   l_rl_rec.rule_information2 = OKL_API.G_MISS_CHAR) THEN
                  px_csm_periodic_expenses_tbl(k).date_paid := l_hdr_rec.start_date;
                ELSE
                  px_csm_periodic_expenses_tbl(k).date_paid := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                END IF;
              END IF;
              -- RGOOTY: Bug 7552496: End

            END LOOP;
           END IF;
          -- rabhupat BUG#4234441 start
          END IF; -- end of pricing name check
          -- rabhupat BUG#4234441 end
        END IF;
        CLOSE l_rl_csr2;
      ElsIF( l_lne_rec.fee_type = 'SECDEPOSIT' )  THEN

            extract_security_deposit( p_api_version => p_api_version,
                       p_chr_id => TO_NUMBER(p_chr_id),
                       p_deal_type => p_deal_type,
                       p_init_msg_list => p_init_msg_list,
                       x_return_status => x_return_status,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       px_csm_lease_header => px_csm_lease_header,
                       px_csm_stream_types_tbl => px_csm_stream_types_tbl,
                       px_csm_one_off_fee_tbl => px_csm_one_off_fee_tbl,
                       px_csm_periodic_expenses_tbl => px_csm_periodic_expenses_tbl);

            If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
                raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
                raise OKL_API.G_EXCEPTION_ERROR;
            End If;

            k := px_csm_periodic_expenses_tbl.COUNT;
            l := px_csm_one_off_fee_tbl.COUNT;
            m := px_csm_stream_types_tbl.COUNT;

	Else

            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_NO_FEETYPE');
           raise OKL_API.G_EXCEPTION_ERROR;

	End If;

    END LOOP;

    print( l_api_name, 'end', x_return_status);

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception

	when OKL_API.G_EXCEPTION_ERROR THEN

		x_return_status := OKL_API.HANDLE_EXCEPTIONS(

			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

                If(l_rl_csr1%ISOPEN) Then
                    CLOSE l_rl_csr1;
                End If;
                If(l_rl_csr2%ISOPEN) Then
                    CLOSE l_rl_csr2;
                End If;

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                If(l_rl_csr1%ISOPEN) Then
                    CLOSE l_rl_csr1;
                End If;
                If(l_rl_csr2%ISOPEN) Then
                    CLOSE l_rl_csr2;
                End If;

	when OTHERS THEN

      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
                If(l_rl_csr1%ISOPEN) Then
                    CLOSE l_rl_csr1;
                End If;
                If(l_rl_csr2%ISOPEN) Then
                    CLOSE l_rl_csr2;
                End If;

  End extract_fee_lines;
-- End modification 11i10 bakuchib
-- Start modification 11i10 bakuchib
  PROCEDURE extract_params_loan_deal(
            p_api_version               IN  NUMBER,
            p_init_msg_list             IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id                    IN  VARCHAR2,
            p_deal_type                 IN  VARCHAR2,
            x_return_status             OUT NOCOPY VARCHAR2,
            x_msg_count                 OUT NOCOPY NUMBER,
            x_msg_data                  OUT NOCOPY VARCHAR2,
            x_csm_loan_header           OUT NOCOPY okl_create_streams_pvt.csm_loan_rec_type,
            x_csm_loan_lines_tbl        OUT NOCOPY okl_create_streams_pvt.csm_loan_line_tbl_type,
            x_csm_loan_levels_tbl       OUT NOCOPY okl_create_streams_pvt.csm_loan_level_tbl_type,
            x_csm_one_off_fee_tbl       OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl            OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_csm_stream_types_tbl      OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type,
            p_orp_code                  IN  VARCHAR2 DEFAULT NULL )  AS

    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_LOAN_DEAL';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	         VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    l_level_type                 NUMBER;
    l_strm_name                  VARCHAR2(200);
    i                            BINARY_INTEGER := 0;
    j                            BINARY_INTEGER := 0;
    k                            BINARY_INTEGER := 0;
    l                            BINARY_INTEGER := 0;
    m                            BINARY_INTEGER := 0;
    idx                          BINARY_INTEGER := 0;
    idx_exp                      BINARY_INTEGER := 0;  -- bug6245602
    l_basis_percent              NUMBER;
    styid                        NUMBER;
    l_pricing_name               VARCHAR2(40);
    l_salvage                    NUMBER;
    l_purchase_option            VARCHAR2(256);
    l_deal_type                  VARCHAR2(256);
    l_purchase_option_amount     NUMBER;
    l_msg_count                  Number;
    l_msg_data                   varchar2(2000);
    l_chr_id                     Number := TO_NUMBER(p_chr_id);
    l_cle_id                     Number;
    l_rgd_code                   Varchar2(30) := 'LAPSTH';
    l_rdf_code                   Varchar2(30) := 'LASTRM';
    l_rdf_name                   Varchar2(80) := 'xxx';
    l_id1                        Varchar2(40);
    l_id2                        Varchar2(200);
    l_name                       Varchar2(200);
    l_description                Varchar2(2000);
    l_status                     Varchar2(1);
    l_start_date                 date;
    l_end_date                   date;
    l_org_id                     Number;
    l_inv_org_id                 Number;
    l_book_type_code             Varchar2(15);
    l_select                     Varchar2(2000);
    l_msg_index_out              Number;
    l_total_lending              NUMBER;


     Cursor l_struct_csr( chrId NUMBER ) is
     select distinct(nvl(crl.RULE_INFORMATION5,-1)) structure
     from   OKC_RULE_GROUPS_B crg,
            OKC_RULES_B crl
     where  crl.rgp_id = crg.id
            and crg.RGD_CODE = 'LALEVL'
            and crl.RULE_INFORMATION_CATEGORY = 'LASLL'
            and crg.dnz_chr_id = chrId;


    l_line_rec                   l_line_rec_csr%ROWTYPE;
    l_lne_rec                    l_line_rec_csr%ROWTYPE;
    l_hdr_rec                    l_hdr_csr%ROWTYPE;
    l_rl_rec                     l_rl_csr%ROWTYPE;
    l_hdrrl_rec                  l_hdrrl_csr%ROWTYPE;
    l_rl_rec1                    l_rl_csr1%ROWTYPE;
    l_tx_rec                     l_tx_csr%ROWTYPE;
    l_fee_strm_type_rec          fee_strm_type_csr%ROWTYPE;
    l_strm_name_rec              strm_name_csr%ROWTYPE;
    l_ib_rec                     ib_csr%ROWTYPE;
    l_struct_rec                 l_struct_csr%ROWTYPE;
    l_pdt_id_rec                 l_hdr_pdt_csr%ROWTYPE;
    l_csm_loan_header            okl_create_streams_pvt.csm_loan_rec_type;
    l_csm_loan_levels_tbl        okl_create_streams_pvt.csm_loan_line_tbl_type;
    l_csm_one_off_fee_tbl        okl_create_streams_pub.csm_one_off_fee_tbl_type;
    l_csm_periodic_expenses_tbl  okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_csm_yields_tbl             okl_create_streams_pub.csm_yields_tbl_type;
    l_csm_stream_types_tbl       okl_create_streams_pub.csm_stream_types_tbl_type;
    l_req_stream_types_tbl       okl_create_streams_pub.csm_stream_types_tbl_type;
    l_csm_line_details_tbl       okl_create_streams_pvt.csm_loan_level_tbl_type;
    l_rents_tbl                  okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_strm_type_id_tbl okl_strm_type_id_tbl_type;

    --mansrini : Code for VR build
    CURSOR  get_day_conv_on_contrct
    IS
    SELECT
--Added by srsreeni for bug6076113
--            rate_params.days_in_a_year_code,
--            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code
            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code,
            rate_params.days_in_a_year_code
--srsreeni bug6076113 ends
    FROM    okl_k_rate_params rate_params
    WHERE   khr_id = p_chr_id;

    CURSOR  get_day_conv_on_sgt
    IS
    SELECT  DECODE(gts.days_in_month_code,'30','360',gts.days_in_month_code) days_in_month_code,
            gts.days_in_yr_code
    FROM
            okl_k_headers khr,
            okl_products_v pdt,
            okl_ae_tmpt_sets_v aes,
            OKL_ST_GEN_TMPT_SETS gts
    WHERE
            khr.pdt_id = pdt.id AND
            pdt.aes_id = aes.id AND
            aes.gts_id = gts.id AND
            khr.id  = p_chr_id;

    l_days_in_month_code OKL_ST_GEN_TMPT_SETS.days_in_month_code%type;
    l_days_in_yr_code  OKL_ST_GEN_TMPT_SETS.days_in_yr_code%type;

    --Added by kthiruva on 13-Sep-2005 for the VR build
    --The base rate defined on the contract is captured when the payment type is Principal
    CURSOR get_base_rate_csr(p_chr_id   IN NUMBER,
                             p_date     IN DATE)
    IS
    SELECT PARM.BASE_RATE
    FROM OKL_K_RATE_PARAMS parm
    WHERE PARM.KHR_ID = p_chr_id
    AND PARM.PARAMETER_TYPE_CODE = 'ACTUAL'
    AND p_date BETWEEN EFFECTIVE_FROM_DATE AND NVL(EFFECTIVE_TO_DATE,p_date);


    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;
    l_PROSPECTIVE_REBOOK_YN  varchar2(1);


    l_base_rate             NUMBER;
    l_rent_sty_id           strm_rec_type;
    --Added by kthiruva on 22-Nov-2005 for the Down Payment CR
    --Bug 4738011 - Start of Changes
        l_sty_id           strm_rec_type;
    --Bug 4738011 - End of Changes

  BEGIN
    --Added by kthiruva for Debugging
    write_to_log('Inside procedure extract_params_loan_deal');

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    open  get_rebook_type ;
    fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN;
    close get_rebook_type;


	OPEN l_hdr_pdt_csr(p_chr_id);
	FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	CLOSE l_hdr_pdt_csr;

    --get day convention info : mansrini
    OPEN  get_day_conv_on_contrct;
    FETCH get_day_conv_on_contrct INTO l_days_in_month_code,l_days_in_yr_code;
    CLOSE get_day_conv_on_contrct;

--Added by srsreeni for bug6076113
--    IF l_days_in_month_code IS NULL OR l_days_in_month_code IS NULL
    IF l_days_in_month_code IS NULL OR l_days_in_yr_code IS NULL
--srsreeni bug6076113 ends
    THEN
      OPEN  get_day_conv_on_sgt;
      FETCH get_day_conv_on_sgt INTO l_days_in_month_code,l_days_in_yr_code;
      CLOSE get_day_conv_on_sgt;
    END IF;

    --Added by kthiruva for Debugging
    write_to_log('Prior to the call to validate_payments');
    -- Validate the payments
    validate_payments(p_api_version    => p_api_version,
                      p_init_msg_list  => p_init_msg_list,
                      x_return_status  => x_return_status,
                      x_msg_count      => x_msg_count,
                      x_msg_data       => x_msg_data,
                      p_khr_id         => p_chr_id,
                      p_paym_tbl       => l_pay_tbl);
    --Added by kthiruva for Debugging
    write_to_log('After the call to validate_payments, the return status is :'|| x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    i := 0; j := 0; k := 0; l := 0; m := 0;

    -- Header infro
    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr into l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
      --Added by kthiruva for Debugging
      write_to_log('Cursor l_hdr_csr not found ');
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;
    l_csm_loan_header.khr_id                     := p_chr_id;
    l_csm_loan_header.date_payments_commencement := l_hdr_rec.start_date;
    l_csm_loan_header.date_start                 := l_hdr_rec.start_date;
    l_csm_loan_header.pdt_id                     := l_hdr_rec.pid;
    IF ( p_deal_type IS NULL ) THEN
      l_deal_type := l_hdr_rec.deal_type;
    ELSE
      l_deal_type := p_deal_type;
    END IF;
    -- Fetching the location of the asset
    OPEN  ib_csr(TO_NUMBER(p_chr_id));
    FETCH ib_csr into l_ib_rec;
    IF ib_csr%NOTFOUND THEN
      --Added by kthiruva for Debugging
      write_to_log('Cursor ib_csr not found ');
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE ib_csr;
    l_csm_loan_header.country := l_ib_rec.country;
    IF p_orp_code IS NOT NULL
    THEN
      l_csm_loan_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_UPGRADE;
    ELSE
      l_csm_loan_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
    END IF;
    -- l_csm_loan_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
    -- Callling the formual ccontract cap amount
    --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
    --The Capital Reduction should not be removed from the Funding amount
    --Bug 4738011 - Start of Changes

    --Added by kthiruva for Debugging
    write_to_log('Prior to the call to execute_formula');

    execute_formula(p_api_version   => p_api_version,
                    p_init_msg_list => p_init_msg_list,
                    x_return_status => x_return_status,
                    x_msg_count     => x_msg_count,
                    x_msg_data      => x_msg_data,
                    p_formula_name  => 'CONTRACT_CAP_AMNT_LOAN',
                    p_contract_id   => p_chr_id,
                    p_line_id       => NULL,
                    x_value         => l_total_lending);

    --Added by kthiruva for Debugging
    write_to_log('After the call to execute_formula, the return status is :'||x_return_status);
    --Bug 4738011 - End of Changes
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    l_csm_loan_header.total_lending := l_total_lending;
    l_csm_loan_header.sif_mode := OKL_CREATE_STREAMS_PUB.G_MODE_LENDER;
    -- asset infor
    FOR l_line_rec IN l_line_rec_csr ( p_chr_id , 'FREE_FORM1') LOOP
      i := i + 1;
	  idx := 0;
	  idx_exp := 0;  -- bug6245602
      l_csm_loan_levels_tbl(i).kle_loan_id   := l_line_rec.id;

       --sechawla 27-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id for loans
      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
         l_csm_loan_levels_tbl(i).orig_contract_line_id := l_line_rec.orig_contract_line_id;
      end if;

      --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
      --When the Down payment is not capitalised, the Down payment amount needs to be passed through the Down
      --payment tag in the Lending Loans tag of the Outbound XML.
      --Bug 4738011 - Start of Changes
      IF l_line_rec.capitalize_down_payment_yn = 'N' THEN
         l_csm_loan_levels_tbl(i).capitalize_down_payment_yn := l_line_rec.capitalize_down_payment_yn;
         l_csm_loan_levels_tbl(i).down_payment_amount := l_line_rec.capital_reduction;
      END IF;
      --Bug 4738011 - End of Changes
      FOR l_rl_rec1 in l_rl_csr1 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
        l_level_type := l_rl_rec1.object1_id1;

        OPEN  strm_name_csr ( l_level_type );
        FETCH strm_name_csr into l_strm_name_rec;
        IF strm_name_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Contract id');
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE strm_name_csr;
        --l_strm_name := l_strm_name_rec.name;
         l_strm_name := l_strm_name_rec.stream_type_purpose;
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
        --Modified by kthiruva for the VR build
        --Including PRINCIPAL_PAYMENT Stream in the condition.
        --From OKL.H,in addition to Rent, Payment of type Principal can also be defined on assets
--srsreeni Bug6245602 Added DOWN_PAYMENT and ESTIMATED_PROPERTY_TAX
        IF( UPPER(TRIM(l_strm_name)) NOT IN ('RENT','PRINCIPAL_PAYMENT','DOWN_PAYMENT','ESTIMATED_PROPERTY_TAX') ) THEN
--srsreeni Bug6245602 ends
--Added by srsreeni for bug5841892
--          m := m + 1;
--          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
          get_dependent_pricing_name
          (
             p_khr_id =>p_chr_id,
             p_sty_id =>l_level_type,
             x_return_status =>x_return_status,
             x_dependent_pricing_name =>l_pricing_name
          );
--Added by srsreeni for bug5841892
		if l_pricing_name is not null then
          m := m + 1;
          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
          l_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
          l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
        end if;
--bug5841892 end of changes
		END IF;
        --idx := 0;
        --Added by kthiruva on 16-Nov-2005 for the Down Payment CR
        --Bug 4738011 - Start of Changes
        IF( UPPER(TRIM(l_strm_name)) ='DOWN_PAYMENT' ) THEN
--Added by srsreeni for bug5841892
--           l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
           get_primary_pricing_name
            (
             p_khr_id =>p_chr_id,
             p_sty_id =>l_level_type,
             x_return_status =>x_return_status,
             x_primary_pricing_name =>l_pricing_name
            );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
--Added by srsreeni for bug5841892
 		if l_pricing_name is not null then
 		  m:=m+1; --added to increase the counter
          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
          l_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
          l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
        end if;
--bug5841892 end of changes
        END IF;
        --Bug 4738011 - End of Changes
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End

        IF( UPPER(TRIM(l_strm_name)) = 'RENT' ) THEN
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
          IF(g_rep_req_yn = 'Y') THEN
            get_dependent_stream_types
            (
              p_khr_id =>p_chr_id,
              p_pdt_id =>l_pdt_id_rec.report_pdt_id,
              p_primary_sty_id =>l_level_type,
              x_return_status => x_return_status,
              x_dependent_sty_id =>l_strm_type_id_tbl
            );
            IF x_return_status = 'E' THEN
              x_return_status := 'S';
            END IF;
          ELSE
            get_dependent_stream_types
            (
               p_khr_id =>p_chr_id,
               p_primary_sty_id =>l_level_type,
               x_return_status => x_return_status,
               x_dependent_sty_id =>l_strm_type_id_tbl
            );
            IF x_return_status = 'E' THEN
              x_return_status := 'S';
            END IF;
          END IF;
          IF l_strm_type_id_tbl.COUNT > 0 THEN
            FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
              m := m + 1;
              l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
              l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
              l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
            END LOOP;
         END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
          j := j + 1;
          idx := idx + 1;
          l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;
          l_csm_line_details_tbl(j).description  := 'Funding';

          --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
          if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
          end if;

          --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
          --The Capital Reduction should not be removed from the Funding amount
          --Bug 4738011 - Start of Changes
          execute_formula(p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_formula_name  => 'LINE_CAP_AMNT_LOAN',
                          p_contract_id   => p_chr_id,
                          p_line_id       => l_line_rec.id,
                          x_value         => l_total_lending);
          --Bug 4738011 - End of Changes
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          l_csm_line_details_tbl(j).amount       := l_total_lending;
          --Modified by kthiruva on 2-Sep-2005 for Pricing Enhancements
          --Bug 4576794 - Start of Changes
          --When a funding date is specified on the asset,it needs to be used as the date_start
          --When funding date is not specified, we use the contract start date

          --sechawla 11-sep-09 8798556 : When funding date is not specified, use asset start date, instead of contract start dt
          --l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_hdr_rec.start_date);
          l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_line_rec.start_date);

          --Bug 4576794 - End of Changes
          l_csm_line_details_tbl(j).level_index_number := idx;
          l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
          l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
          l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;

          --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
          --If the Down Payment is capitalised then , a new funding line with the opposite sign
          --needs to be added
          --If the downpayment is billable,the amount needs to be populated in okl_sif_lines
          --Bug 4738011 - Start of Changes
          IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
            j := j + 1;
            idx := idx + 1;
            l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

            --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

            l_csm_line_details_tbl(j).description  := 'Funding';
            l_csm_line_details_tbl(j).amount       := l_line_rec.capital_reduction * (-1);
            --sechawla 11-sep-09 8798556 :
            --l_csm_line_details_tbl(j).date_start   := l_hdr_rec.start_date;
            l_csm_line_details_tbl(j).date_start   := l_line_rec.start_date;

            l_csm_line_details_tbl(j).level_index_number := idx;
            l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN

            --Fetching and Requesting the Capital Reduction stream type if it has been defined on
            --the Stream Generation Template
            get_primary_stream_type
            (
             p_khr_id => p_chr_id,
             p_primary_sty_purpose => 'CAPITAL_REDUCTION',
             x_return_status => x_return_status,
             x_primary_sty_id =>l_sty_id
             );
            IF x_return_status = 'E' THEN
              x_return_status := 'S';
            END IF;
            IF (l_sty_id.id IS NOT NULL ) THEN
               m := m + 1;
               l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
               l_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
               l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
            END IF;
          END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
          --Bug 4738011 - End of Changes


          FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              j := j + 1;
              idx := idx + 1;
              l_csm_line_details_tbl(j).level_index_number := idx;
              l_csm_line_details_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_line_details_tbl(j).period             := g_stub_rec.period;
              l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

              --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
	              l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_line_details_tbl(j).description        := l_strm_name;
              l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
              l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
              --Added by kthiruva on 09-Dec-2005
              --This rate column is relevant for rent payments only in the rebook scenarios
              --after a reamort
              --Bug 4766555 - Start of Changes
              l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;
              --Bug 4766555 - End of Changes

              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              j := j + 1;
              idx := idx + 1;
              l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

              --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_line_details_tbl(j).description        := l_strm_name;
              l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              --Modified by kthiruva on 09-Dec-2005 for the VR build
              --Bug 4766555 - Start of Changes
              l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              --Bug 4766555 - End of Changes
              l_csm_line_details_tbl(j).level_index_number := idx;
              l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
              l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
              l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
              --Added by kthiruva on 09-Dec-2005
              --This rate column is relevant for rent payments only in the rebook scenarios
              --after a reamort
              --Bug 4766555 - Start of Changes
              l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;
              --Bug 4766555 - End of Changes

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
            END IF;
          END LOOP;
        --Code for the new payment type 'PRINCIPAL_PAYMENT' that is allowed for Loan Contracts
        --Added by kthiruva on 13-Sep-2005 for the VR Build
        --Bug - Start of Changes
        ELSIF( UPPER(TRIM(l_strm_name)) = 'PRINCIPAL_PAYMENT' ) THEN
          IF(g_rep_req_yn = 'Y') THEN
           --Added by kthriuva for VR build
           --For payment of type principal, we need to request the dependents
           --on Rent. Hence obtaining the stream type id of Rent
           get_primary_no_prc_stream_type
           (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_purpose =>'RENT',
             x_return_status => x_return_status,
             x_primary_sty_id => l_rent_sty_id
           );
            --kthriuva - End of Changes for VR build
          get_dependent_stream_types
          (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_id =>l_rent_sty_id.id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        ELSE
            --Added by kthriuva for VR build
            --For payment of type principal, we need to request the dependents
            --on Rent. Hence obtaining the stream type id of Rent
            get_primary_no_prc_stream_type
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.pid,
             p_primary_sty_purpose =>'RENT',
             x_return_status => x_return_status,
             x_primary_sty_id => l_rent_sty_id
             );

            --kthriuva - End of Changes for VR build
            get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_primary_sty_id =>l_rent_sty_id.id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
            );
            IF x_return_status = 'E' THEN
              x_return_status := 'S';
            END IF;
        END IF;
        --Fetching the base rate
        OPEN get_base_rate_csr(p_chr_id => p_chr_id,
                               p_date   => l_hdr_rec.start_date);
        FETCH get_base_rate_csr INTO l_base_rate;
        IF get_base_rate_csr%NOTFOUND THEN
          Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                              p_msg_name     => 'OKL_LLAP_BASE_RATE_NOT_DEF');
          RAISE Okl_Api.G_EXCEPTION_ERROR;
        END IF;
        CLOSE get_base_rate_csr;
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
        IF l_strm_type_id_tbl.COUNT > 0 THEN
          FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
            m := m + 1;
            l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
            l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
            l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
          END LOOP;
        END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
          j := j + 1;
          idx := idx + 1;
          l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

          --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
          if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
          end if;

          l_csm_line_details_tbl(j).description  := 'Funding';
          --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
          --The Capital Reduction should not be removed from the Funding amount
          --Bug 4738011 - Start of Changes
          execute_formula(p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_formula_name  => 'LINE_CAP_AMNT_LOAN',
                          p_contract_id   => p_chr_id,
                          p_line_id       => l_line_rec.id,
                          x_value         => l_total_lending);
          --Bug 4738011 - End of Changes
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          l_csm_line_details_tbl(j).amount       := l_total_lending;
          --Modified by kthiruva on 2-Sep-2005 for Pricing Enhancements
          --Bug 4576794 - Start of Changes
          --When a funding date is specified on the asset,it needs to be used as the date_start
          --When funding date is not specified, we use the contract start date

          --sechawla 11-sep-09 8798556 : When funding date is not specified, use asset start date, instead of contract start dt
          --l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_hdr_rec.start_date);
          l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_line_rec.start_date);


          --Bug 4576794 - End of Changes
          l_csm_line_details_tbl(j).level_index_number := idx;
          l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
          l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
          l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;

          --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
          --If the Down Payment is capitalised then , a new funding line with the opposite sign
          --needs to be added
          --If the downpayment is billable,the amount needs to be populated in okl_sif_lines
          --Bug 4738011 - Start of Changes
          IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
            j := j + 1;
            idx := idx + 1;
            l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

            --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

            l_csm_line_details_tbl(j).description  := 'Funding';
            l_csm_line_details_tbl(j).amount       := l_line_rec.capital_reduction * (-1);
            --sechawla 11-sep-09 8798556
            --l_csm_line_details_tbl(j).date_start   := l_hdr_rec.start_date;
            l_csm_line_details_tbl(j).date_start   := l_line_rec.start_date;

            l_csm_line_details_tbl(j).level_index_number := idx;
            l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN

            --Fetching and Requesting the Capital Reduction stream type if it has been defined on
            --the Stream Generation Template
            get_primary_stream_type
            (
             p_khr_id => p_chr_id,
             p_primary_sty_purpose => 'CAPITAL_REDUCTION',
             x_return_status => x_return_status,
             x_primary_sty_id =>l_sty_id
             );
            IF x_return_status = 'E' THEN
              x_return_status := 'S';
            END IF;
            IF (l_sty_id.id IS NOT NULL ) THEN
               m := m + 1;
               l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
               l_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
               l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
            END IF;

             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
          END IF;
          --Bug 4738011 - End of Changes

          FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              j := j + 1;
              idx := idx + 1;
              l_csm_line_details_tbl(j).level_index_number := idx;
              l_csm_line_details_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_line_details_tbl(j).period             := g_stub_rec.period;
              l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

              --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_line_details_tbl(j).description        := l_strm_name;
              l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
              l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
              --When the payment type is Principal, the Base Rate specified in the contract needs to be
              --captured and passed. This rate is used in calculation of the Interest Payment Streams
              --Modified by kthiruva on 09-Dec-2005
              --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
              --l_base_Rate needs to be used.
              --Bug 4766555 - Start of Changes
              l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);
              --Bug 4766555 - End of Changes

              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;

            -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              j := j + 1;
              idx := idx + 1;
              l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

			  --sechawla 15-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id
			  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_line_details_tbl(j).description        := l_strm_name;
              l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              --Modified by kthiruva on 09-Dec-2005 for the VR build
              --Bug 4766555 - Start of Changes
              l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              --Bug 4766555 - End of Changes
              l_csm_line_details_tbl(j).level_index_number := idx;
              --Modified by kthiruva on 09-Nov-2005.The level type should be
              --set as PRINCIPAL as the payment type is PRINCIPAL_PAYMENT
              --Bug 4726209 - Start of Changes
              l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              --Bug 4726209 - End of Changes
              l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
              l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
              l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
              --When the payment type is Principal, the Base Rate specified in the contract needs to be
              --captured and passed. This rate is used in calculation of the Interest Payment Streams
              --Modified by kthiruva on 09-Dec-2005
              --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
              --l_base_Rate needs to be used.
              --Bug 4766555 - Start of Changes
              l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);
              --Bug 4766555 - End of Changes

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
            END IF;
          END LOOP;

        -- Code for Estimated Property Tax Starts Here
        ELSIF( UPPER(TRIM(l_strm_name)) = 'ESTIMATED_PROPERTY_TAX' ) THEN
--srsreeni Bug6245602 start. Added logic to request for streams
            IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
           get_primary_pricing_name
            (
             p_khr_id =>p_chr_id,
             p_sty_id =>l_level_type,
             x_return_status =>x_return_status,
             x_primary_pricing_name =>l_pricing_name
            );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
 		if l_pricing_name is not null then
 		  m:=m+1; --added to increase the counter
          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
          l_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
          l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
        end if;
--get dependent
        IF(g_rep_req_yn = 'Y') THEN
          get_dependent_stream_types
          (
            p_khr_id =>p_chr_id,
            p_pdt_id =>l_pdt_id_rec.report_pdt_id,
            p_primary_sty_id =>l_level_type,
            x_return_status => x_return_status,
            x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        ELSE
          get_dependent_stream_types
          (
            p_khr_id =>p_chr_id,
            p_primary_sty_id =>l_level_type,
            x_return_status => x_return_status,
            x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        END IF;
        IF l_strm_type_id_tbl.COUNT > 0 THEN
          FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
            m := m + 1;
            l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
            l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
            l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
          END LOOP;
	end if;
        end if;
--srsreeni Bug6245602 end
          FOR l_rl_rec in l_rl_csr(l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              -- idx := idx + 1;   bug6245602
              idx_exp := idx_exp + 1;  -- bug6245602
              l_csm_periodic_expenses_tbl(k).level_index_number := idx_exp;  -- bug6245602
              l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-Jul-09 PRb ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).cash_effect_yn     := 'N';
              l_csm_periodic_expenses_tbl(k).tax_effect_yn      := 'N';
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              -- idx := idx + 1;   bug6245602
              idx_exp := idx_exp + 1;  -- bug6245602
              l_csm_periodic_expenses_tbl(k).level_index_number := idx_exp;  -- bug6245602
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-Jul-09 PRb ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).cash_effect_yn     := 'N';
              l_csm_periodic_expenses_tbl(k).tax_effect_yn      := 'N';
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                --sechawla 11-sep-09 8798556
                --l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                l_csm_periodic_expenses_tbl(k).date_start  := l_line_rec.start_date;

              ELSE
                l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
            END IF;
          END LOOP;
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;

        -- Code for Estimated Property Tax Ends Here

        ELSIF (((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                (UPPER(l_strm_name_rec.stream_type_purpose) = 'FEE') AND
                (l_strm_name_rec.capitalize_yn = 'N')) OR
               ((l_strm_name_rec.periodic_yn = 'Y'  ) AND
      -- code for user defined streams
                --(UPPER(l_strm_name_rec.name) <> 'FEE'))) THEN
    (UPPER(l_strm_name_rec.stream_type_purpose) <> 'FEE'))) THEN
    -- code for use defined streams ends here
          FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              -- idx := idx + 1;  bug6245602
              idx_exp := idx_exp + 1;  -- bug6245602
              l_csm_periodic_expenses_tbl(k).level_index_number := idx_exp;
              l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+l_rl_rec.rule_information7;
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).advance_or_arrears := g_stub_rec.advance_or_arrears;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-Jul-09 PRb ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              -- Code for user defined streams
     --IF ( UPPER(l_strm_name_rec.name) = 'INTEREST PAYMENT' ) THEN
     IF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'INTEREST_PAYMENT' ) THEN
     -- code ends here
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
              --ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL PAYMENT' ) THEN
     ELSIF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'PRINCIPAL_PAYMENT' ) THEN
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              ELSE
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              END If;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                  l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              -- idx := idx + 1;  bug6245602
              idx_exp := idx_exp + 1;  -- bug6245602
              l_csm_periodic_expenses_tbl(k).level_index_number := idx_exp;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-Jul-09 PRb ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF (l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                --sechawla 11-sep-09 8798556
                --l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                l_csm_periodic_expenses_tbl(k).date_start  := l_line_rec.start_date;
              ELSE
                l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              --IF ( UPPER(l_strm_name_rec.name) = 'INTEREST PAYMENT' ) THEN
     IF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'INTEREST_PAYMENT' ) THEN
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
              --ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL PAYMENT' ) Then
     ELSIF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'PRINCIPAL_PAYMENT' ) Then
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              ELSE
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              END If;
            END IF;
          END LOOP;
        ELSIf ((UPPER(TRIM(l_strm_name_rec.periodic_yn)) = 'N' )) Then
          FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            l := l + 1;
            l_csm_one_off_fee_tbl(l).description       := l_strm_name_rec.name;
            l_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
     l_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
            If(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
       l_csm_one_off_fee_tbl(l).date_paid         := l_hdr_rec.start_date;
            Else
       l_csm_one_off_fee_tbl(l).date_paid         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
            End If;
            l_csm_one_off_fee_tbl(l).kle_asset_id      := l_line_rec.id;

            --sechawla 16-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_one_off_fee_tbl(l).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

          END LOOP;
        END IF;
      END LOOP;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    End If;
    -- Extract fee line
    -- Added by kthiruva for Debugging
    write_to_log('Before the call to extract_fee_lines');
    extract_fee_lines( p_api_version => p_api_version,
                       p_chr_id => TO_NUMBER(p_chr_id),
                       p_deal_type => l_deal_type,
                       p_init_msg_list => p_init_msg_list,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       x_return_status => x_return_status,
                       px_csm_stream_types_tbl => l_csm_stream_types_tbl,
                       px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl,
                       px_csm_periodic_expenses_tbl => l_csm_periodic_expenses_tbl);
    --Added by kthiruva for Debugging
    write_to_log('After the call to extract_fee_lines, the return status is :'||x_return_status);

    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    extract_subsidized_lines(p_api_version => p_api_version,
                             p_init_msg_list => p_init_msg_list,
                             x_return_status => x_return_status,
                             x_msg_count => x_msg_count,
                             x_msg_data => x_msg_data,
                             p_chr_id => TO_NUMBER(p_chr_id),
                             px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl);
    --Added by kthiruva for Debugging
    write_to_log('After the call to extract_subsidized_lines, the return status is :'||x_return_status);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    check_for_mandatory_streams(
            p_api_version        => p_api_version,
            p_init_msg_list      => p_init_msg_list,
            x_msg_count          => x_msg_count,
            x_msg_data           => x_msg_data,
            x_return_status      => x_return_status,
            p_chr_id             => p_chr_id,
            p_deal_type          => l_deal_type,
            p_stream_types_tbl   => l_csm_stream_types_tbl,
            x_stream_types_tbl   => l_req_stream_types_tbl);
    --Added by kthiruva for Debugging
    write_to_log('After the call to check_for_mandatory_streams, the return status is :'||x_return_status);

    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    -- Requesting for yields
    x_return_status := yield_request(x_csm_yields_tbl => l_csm_yields_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
           raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    x_csm_loan_header := l_csm_loan_header;
    x_csm_loan_lines_tbl := l_csm_loan_levels_tbl;
    x_csm_loan_levels_tbl  := l_csm_line_details_tbl;
    x_csm_one_off_fee_tbl := l_csm_one_off_fee_tbl;
    x_csm_periodic_expenses_tbl := l_csm_periodic_expenses_tbl;
    x_csm_yields_tbl := l_csm_yields_tbl;
    x_csm_stream_types_tbl := l_req_stream_types_tbl;
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count,
                         x_msg_data  => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS then
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END extract_params_loan_deal;
-- End modification 11i10 bakuchib
  PROCEDURE extract_params_loan_paydown(
            p_api_version                IN  NUMBER,
            p_init_msg_list              IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id                     IN  VARCHAR2,
            p_deal_type                  IN  VARCHAR2,
	        p_paydown_type               IN  VARCHAR2,
	        p_paydown_date               IN  DATE,
	        p_paydown_amount             IN  NUMBER,
            p_balance_type_code          IN  VARCHAR2,
            x_return_status              OUT NOCOPY VARCHAR2,
            x_msg_count                  OUT NOCOPY NUMBER,
            x_msg_data                   OUT NOCOPY VARCHAR2,
            x_csm_loan_header            OUT NOCOPY okl_create_streams_pvt.csm_loan_rec_type,
            x_csm_loan_lines_tbl         OUT NOCOPY okl_create_streams_pvt.csm_loan_line_tbl_type,
            x_csm_loan_levels_tbl        OUT NOCOPY okl_create_streams_pvt.csm_loan_level_tbl_type,
            x_csm_one_off_fee_tbl        OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl  OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl             OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_csm_stream_types_tbl       OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_LOAN_PPD';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	         VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    l_level_type                 NUMBER;
    l_strm_name                  VARCHAR2(200);
    i                            BINARY_INTEGER := 0;
    j                            BINARY_INTEGER := 0;
    k                            BINARY_INTEGER := 0;
    l                            BINARY_INTEGER := 0;
    m                            BINARY_INTEGER := 0;
    idx                          BINARY_INTEGER := 0;
    l_basis_percent              NUMBER;
    styid                        NUMBER;
	l_pricing_name               VARCHAR2(40);
    l_salvage                    NUMBER;
    l_purchase_option            VARCHAR2(256);
    l_deal_type                  VARCHAR2(256);
    l_purchase_option_amount     NUMBER;
    l_msg_count                  Number;
    l_msg_data                   varchar2(2000);
    l_chr_id                     Number := TO_NUMBER(p_chr_id);
    l_cle_id                     Number;
    l_rgd_code                   Varchar2(30) := 'LAPSTH';
    l_rdf_code                   Varchar2(30) := 'LASTRM';
    l_rdf_name                   Varchar2(80) := 'xxx';
    l_id1                        Varchar2(40);
    l_id2                        Varchar2(200);
    l_name                       Varchar2(200);
    l_description                Varchar2(2000);
    l_status                     Varchar2(1);
    l_start_date                 date;
    l_end_date                   date;
    l_org_id                     Number;
    l_inv_org_id                 Number;
    l_book_type_code             Varchar2(15);
    l_select                     Varchar2(2000);
    l_msg_index_out              Number;
    l_total_lending              NUMBER;

     --Bug 5146545 dpsingh start
     l_ic                             VARCHAR2(30);

     --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
     cursor get_rebook_type is
     select nvl(amort_inc_adj_rev_dt_yn, 'N')
     from okl_sys_acct_opts;
     l_PROSPECTIVE_REBOOK_YN  varchar2(1);

     Cursor check_fixed_contract(chrId VARCHAR2) is
     SELECT
     gts.interest_calc_meth_code
     FROM
     okl_k_headers khr,
     okl_products_v pdt,
     okl_ae_tmpt_sets_v aes,
     OKL_ST_GEN_TMPT_SETS gts
     WHERE
     khr.pdt_id = pdt.id AND
     pdt.aes_id = aes.id AND
     aes.gts_id = gts.id AND
     khr.id  =chrId;

     Cursor get_iir_value(chrId VARCHAR2) is
     SELECT
     implicit_interest_rate
     FROM
     okl_k_headers
     WHERE id=chrId;
     --Bug 5146545 dpsingh end


     Cursor l_struct_csr( chrId NUMBER ) is
     select distinct(nvl(crl.RULE_INFORMATION5,-1)) structure
     from   OKC_RULE_GROUPS_B crg,
            OKC_RULES_B crl
     where  crl.rgp_id = crg.id
            and crg.RGD_CODE = 'LALEVL'
            and crl.RULE_INFORMATION_CATEGORY = 'LASLL'
            and crg.dnz_chr_id = chrId;


    l_line_rec                   l_line_rec_csr%ROWTYPE;
    l_lne_rec                    l_line_rec_csr%ROWTYPE;
    l_hdr_rec                    l_hdr_csr%ROWTYPE;
    l_rl_rec                     l_rl_csr%ROWTYPE;
    l_hdrrl_rec                  l_hdrrl_csr%ROWTYPE;
    l_rl_rec1                    l_rl_csr1%ROWTYPE;
    l_tx_rec                     l_tx_csr%ROWTYPE;
    l_fee_strm_type_rec          fee_strm_type_csr%ROWTYPE;
    l_strm_name_rec              strm_name_csr%ROWTYPE;
    l_ib_rec                     ib_csr%ROWTYPE;
    l_struct_rec                 l_struct_csr%ROWTYPE;
	l_pdt_id_rec                 l_hdr_pdt_csr%ROWTYPE;
    l_csm_loan_header            okl_create_streams_pvt.csm_loan_rec_type;
    l_csm_loan_levels_tbl        okl_create_streams_pvt.csm_loan_line_tbl_type;
    l_csm_one_off_fee_tbl        okl_create_streams_pub.csm_one_off_fee_tbl_type;
    l_csm_periodic_expenses_tbl  okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_csm_yields_tbl             okl_create_streams_pub.csm_yields_tbl_type;
    l_csm_stream_types_tbl       okl_create_streams_pub.csm_stream_types_tbl_type;
    l_req_stream_types_tbl       okl_create_streams_pub.csm_stream_types_tbl_type;
    l_csm_line_details_tbl       okl_create_streams_pvt.csm_loan_level_tbl_type;
    l_rents_tbl                  okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_strm_type_id_tbl okl_strm_type_id_tbl_type;
    --p_deal_type                  okl_st_gen_tmpt_sets.deal_type%TYPE;

    --mansrini : Code for VR build
    CURSOR  get_day_conv_on_contrct
    IS
    SELECT
--Added by srsreeni for bug6076113
--            rate_params.days_in_a_year_code,
--            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code
            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code,
            rate_params.days_in_a_year_code
--srsreeni bug6076113 ends
    FROM    okl_k_rate_params rate_params
    WHERE   khr_id = p_chr_id;

    CURSOR  get_day_conv_on_sgt
    IS
    SELECT  DECODE(gts.days_in_month_code,'30','360',gts.days_in_month_code) days_in_month_code,
            gts.days_in_yr_code
    FROM
            okl_k_headers khr,
            okl_products_v pdt,
            okl_ae_tmpt_sets_v aes,
            OKL_ST_GEN_TMPT_SETS gts
    WHERE
            khr.pdt_id = pdt.id AND
            pdt.aes_id = aes.id AND
            aes.gts_id = gts.id AND
            khr.id  = p_chr_id;

    l_days_in_month_code OKL_ST_GEN_TMPT_SETS.days_in_month_code%type;
    l_days_in_yr_code  OKL_ST_GEN_TMPT_SETS.days_in_yr_code%type;
    l_number_periods_remaining okl_sif_fees.number_of_periods%TYPE;
    l_number_periods_completed okl_sif_fees.number_of_periods%TYPE;
    l_number_periods_completed_cpy okl_sif_fees.number_of_periods%TYPE;
    l_variable_rate okl_sif_fees.rate%TYPE;
    l_total_oec     okl_k_lines_full_v.oec%TYPE;
    --Added by kthiruva for the VR build
    l_ppd_assigned    VARCHAR2(1) := 'N';
    l_rent_sty_id     strm_rec_type;
    l_prev_ppd        NUMBER := 0;

    --This Cursor fetches the Principal Paydown lines existing per asset line
    --on the contract
    CURSOR get_prev_ppd_csr(rgcode okc_rule_groups_b.rgd_code%TYPE,
                            rlcat  okc_rules_b.rule_information_category%TYPE,
                            chrId NUMBER,
                            cleId NUMBER )
    IS
    SELECT crl.id slh_id,
         crl.object1_id1,
         crl.rule_information1,
         crl.rule_information2,
         crl.rule_information3,
         crl.rule_information5,
         crl.rule_information6,
         crl.rule_information7,
         crl.rule_information8,
         crl.rule_information13,
         crl.rule_information10
    FROM okc_rule_groups_b crg,
         okc_rules_b crl,
         okl_strm_type_v sty
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    AND crl.object1_id1 = sty.id
    AND sty.stream_type_purpose = 'UNSCHEDULED_PRINCIPAL_PAYMENT'
    ORDER BY crl.rule_information1;

    get_prev_ppd_rec        get_prev_ppd_csr%ROWTYPE;


FUNCTION get_end_date(
    l_start_date      IN  DATE,
    p_frequency       IN  VARCHAR2,
    p_period          IN  NUMBER,
    ---- cklee/mvasudev,06-02-2005,Bug#4392051/okl.h 4437938
    p_start_day   IN NUMBER DEFAULT NULL
)
    RETURN DATE IS
    l_end_date date;
    factor number := 0;
    BEGIN
     if(p_frequency = 'M') then
        factor := 1;
     elsif(p_frequency = 'Q') then
        factor := 3;
     elsif(p_frequency = 'S') then
        factor := 6;
     elsif(p_frequency = 'A') then
        factor := 12;
     end if;
     l_end_date := Okl_Lla_Util_Pvt.calculate_end_date(p_start_date => l_start_date,
	                                                   p_months     =>  factor * NVL(p_period,0),
							   p_start_day => p_start_day);

     return l_end_date;
EXCEPTION
    WHEN OTHERS THEN
      RETURN null;
END get_end_date;

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    open  get_rebook_type;
    fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN ;
    close get_rebook_type;


	OPEN l_hdr_pdt_csr(p_chr_id);
	FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	CLOSE l_hdr_pdt_csr;

    --get day convention info : mansrini
    OPEN  get_day_conv_on_contrct;
    FETCH get_day_conv_on_contrct INTO l_days_in_month_code,l_days_in_yr_code;
    CLOSE get_day_conv_on_contrct;

--Added by srsreeni for bug6076113
--    IF l_days_in_month_code IS NULL OR l_days_in_month_code IS NULL
    IF l_days_in_month_code IS NULL OR l_days_in_yr_code IS NULL
--srsreeni bug6076113 ends
    THEN
      OPEN  get_day_conv_on_sgt;
      FETCH get_day_conv_on_sgt INTO l_days_in_month_code,l_days_in_yr_code;
      CLOSE get_day_conv_on_sgt;
    END IF;
    -- Validate the payments
    validate_payments(p_api_version    => p_api_version,
                      p_init_msg_list  => p_init_msg_list,
                      x_return_status  => x_return_status,
                      x_msg_count      => x_msg_count,
                      x_msg_data       => x_msg_data,
                      p_khr_id         => p_chr_id,
                      p_paym_tbl       => l_pay_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    i := 0; j := 0; k := 0; l := 0; m := 0;
	/*
    OPEN  l_hdr_pdt_csr(p_chr_id);
    FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
    CLOSE l_hdr_pdt_csr;
	*/
    -- Header infro
    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr into l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;
    l_csm_loan_header.khr_id                     := p_chr_id;
    l_csm_loan_header.date_payments_commencement := l_hdr_rec.start_date;
    l_csm_loan_header.date_start             := l_hdr_rec.start_date;
    l_csm_loan_header.pdt_id                     := l_hdr_rec.pid;
    IF ( p_deal_type IS NULL ) THEN
      l_deal_type := l_hdr_rec.deal_type;
    ELSE
      l_deal_type := p_deal_type;
    END IF;
    -- Fetching the location of the asset
    OPEN  ib_csr(TO_NUMBER(p_chr_id));
    FETCH ib_csr into l_ib_rec;
    IF ib_csr%NOTFOUND THEN
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE ib_csr;
    l_csm_loan_header.country := l_ib_rec.country;
    --The orp code for the Principal Paydown process is used here.
    l_csm_loan_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_RENEWAL;
    -- Callling the formual ccontract cap amount
    --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
    --The Capital Reduction should not be removed from the Funding amount
    --Bug 4738011 - Start of Changes
    execute_formula(p_api_version   => p_api_version,
                    p_init_msg_list => p_init_msg_list,
                    x_return_status => x_return_status,
                    x_msg_count     => x_msg_count,
                    x_msg_data      => x_msg_data,
                    p_formula_name  => 'CONTRACT_CAP_AMNT_LOAN',
                    p_contract_id   => p_chr_id,
                    p_line_id       => NULL,
                    x_value         => l_total_lending);
    --Bug 4738011 - End of Changes
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    l_csm_loan_header.total_lending := l_total_lending;
    l_csm_loan_header.sif_mode := OKL_CREATE_STREAMS_PUB.G_MODE_LENDER;

    --kthiruva : for PR proj
    --Fetch the total OEC for this contract so that it can be prorated for each asset in
    --the following loop
    OPEN total_oec_csr(p_chr_id);
    FETCH total_oec_csr INTO l_total_oec;
    CLOSE total_oec_csr;

    -- asset infor
    FOR l_line_rec IN l_line_rec_csr ( p_chr_id , 'FREE_FORM1') LOOP
      i := i + 1;
	  idx := 0;
      l_csm_loan_levels_tbl(i).kle_loan_id   := l_line_rec.id;

      --sechawla 27-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id for loans
      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
         l_csm_loan_levels_tbl(i).orig_contract_line_id := l_line_rec.orig_contract_line_id;
      end if;

      --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
      --When the Down payment is not capitalised, the Down payment amount needs to be passed through the Down
      --payment tag in the Lending Loans tag of the Outbound XML.
      --Bug 4738011 - Start of Changes
      IF l_line_rec.capitalize_down_payment_yn = 'N' THEN
         l_csm_loan_levels_tbl(i).capitalize_down_payment_yn := l_line_rec.capitalize_down_payment_yn;
         l_csm_loan_levels_tbl(i).down_payment_amount := l_line_rec.capital_reduction;
      END IF;
      --Bug 4738011 - End of Changes

      FOR l_rl_rec1 in l_rl_csr1 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          --Added by kthiruva on 05-Dec-2005
         --Initialising l_first_batch for every asset line
         --Bug 4777531 - Start of Changes
         l_first_batch := 'N';
         l_ppd_assigned := 'N';
         --Bug 4777531 - End of Changes

	l_level_type := l_rl_rec1.object1_id1;

        OPEN  strm_name_csr ( l_level_type );
        FETCH strm_name_csr into l_strm_name_rec;
        IF strm_name_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Contract id');
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE strm_name_csr;

        --Bug 5146545 dpsingh start
       OPEN check_fixed_contract(p_chr_id);
       FETCH check_fixed_contract INTO l_ic;
       CLOSE check_fixed_contract;

       IF l_ic = 'FIXED' THEN
          OPEN get_iir_value(p_chr_id);
          FETCH get_iir_value INTO l_variable_rate ;
          CLOSE get_iir_value;
       ELSE
        --Added by kthiruva on 04-Oct-2005
        --Calling the variable Rate utility to determine the rate that needs to be used to solve for payment
        l_variable_rate := OKL_VARIABLE_INT_UTIL_PVT.get_effective_int_rate(
                                                                           x_return_status  => l_return_status,
                                                                           p_khr_id         => p_chr_id,
                                                                           p_effective_date => p_paydown_date);


        If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
          raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
          raise OKL_API.G_EXCEPTION_ERROR;
        End If;
       END IF;
       --Bug 5146545 dpsingh end
        --l_strm_name := l_strm_name_rec.name;
		l_strm_name := l_strm_name_rec.stream_type_purpose;
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
--srsreeni Bug6245602 Added DOWN_PAYMENT and ESTIMATED_PROPERTY_TAX
        IF( UPPER(TRIM(l_strm_name)) NOT IN ('RENT','PRINCIPAL_PAYMENT','DOWN_PAYMENT','ESTIMATED_PROPERTY_TAX') ) THEN
--srsreeni Bug6245602 end
--Added by srsreeni for bug5841892
--          m := m + 1;
--          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
		  get_dependent_pricing_name
          (
           p_khr_id =>p_chr_id,
           p_sty_id =>l_level_type,
           x_return_status =>x_return_status,
           x_dependent_pricing_name	=>l_pricing_name
          );
--Added by srsreeni for bug5841892
		if l_pricing_name is not null then
          m := m + 1;
          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
          l_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
          l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
        end if;
--bug5841892 end of changes
        END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
        --idx := 0;
        IF( UPPER(TRIM(l_strm_name)) = 'RENT' ) THEN
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
		  IF(g_rep_req_yn = 'Y') THEN

		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_id =>l_level_type,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
            );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  ELSE

		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_primary_sty_id =>l_level_type,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
		    );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  END IF;


          IF l_strm_type_id_tbl.COUNT > 0 THEN
            FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
			  m := m + 1;

    		  l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
    		  l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
              l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
			END LOOP;
		  END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End

          j := j + 1;
          idx := idx + 1;
          l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

          --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
          if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
          end if;


          l_csm_line_details_tbl(j).description  := 'Funding';
          --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
          --The Capital Reduction should not be removed from the Funding amount
          --Bug 4738011 - Start of Changes
          execute_formula(p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_formula_name  => 'LINE_CAP_AMNT_LOAN',
                          p_contract_id   => p_chr_id,
                          p_line_id       => l_line_rec.id,
                          x_value         => l_total_lending);
          --Bug 4738011 - End of Changes
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          --Initialising l_ppd_count for every asset and deleting the existing l_ppd_Tbl
          l_ppd_count := 0;
          l_ppd_tbl.delete;
          --Modified by kthiruva on 26-Sep-2005
          --All previous PPDs defined on the contract are fetched and added to a PL/SQL table
          FOR get_prev_ppd_rec IN get_prev_ppd_csr('LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id) LOOP
            FOR l_rl_rec in l_rl_csr ( get_prev_ppd_rec.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                 l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                 l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                   l_ppd_tbl(l_ppd_count).paydown_date := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                   l_ppd_tbl(l_ppd_count).paydown_amount := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION8,'0'));
                   l_ppd_tbl(l_ppd_count).curr_paydown := 'N';
                   l_ppd_count := l_ppd_count + 1;
               END IF;
            END LOOP;
          END LOOP;
          --Adding the current paydown to the ppd_tbl as the current paydown is not yet updated on the contract
          l_ppd_tbl(l_ppd_count).paydown_date := p_paydown_date;
          --Assigning it to 0 initially the paydown amount per line needs to be derived after proration
          l_ppd_tbl(l_ppd_count).paydown_amount := 0;
          l_ppd_tbl(l_ppd_count).curr_paydown := 'Y';
          --kthiruva : End of Changes

          --Populating the diff_to_next column for all records in the l_ppd_tbl
          --The diff_to_next stores the number of days between a paydown and its subsequent paydown
          --If there is no subsequent paydown then the diff_to_next column stores a value 0
          FOR k in l_ppd_tbl.FIRST.. l_ppd_tbl.LAST LOOP
            IF l_ppd_tbl.COUNT = 1 THEN
              l_ppd_tbl(k).diff_to_next := 0;
            ELSE
              IF (k = l_ppd_tbl.LAST) THEN
                l_ppd_tbl(k).diff_to_next := 0;
              ELSE
                l_ppd_tbl(k).diff_to_next := l_ppd_tbl(k+1).paydown_date - l_ppd_tbl(k).paydown_date;
              END IF;
            END IF;
          END LOOP;

          l_csm_line_details_tbl(j).amount       := l_total_lending;
          --Modified by kthiruva on 2-Sep-2005 for Pricing Enhancements
          --Bug 4576794 - Start of Changes
          --When a funding date is specified on the asset,it needs to be used as the date_start
          --When funding date is not specified, we use the contract start date

          --sechawla 11-sep-09 8798556 : When funding date is not specified, use asset start date, instead of contract start dt
          --l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_hdr_rec.start_date);
          l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_line_rec.start_date);


          --Bug 4576794 - End of Changes
	      l_csm_line_details_tbl(j).level_index_number := idx;
	      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
          l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
          l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
          l_csm_line_details_tbl(j).rate               := l_variable_rate;

          --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
          --If the Down Payment is capitalised then , a new funding line with the opposite sign
          --needs to be added
          --If the downpayment is billable,the amount needs to be populated in okl_sif_lines
          --Bug 4738011 - Start of Changes
          IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
            j := j + 1;
            idx := idx + 1;
            l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

            --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

            l_csm_line_details_tbl(j).description  := 'Funding';
            l_csm_line_details_tbl(j).amount       := l_line_rec.capital_reduction * (-1);
            --sechawla 11-sep-09 8798556
            --l_csm_line_details_tbl(j).date_start   := l_hdr_rec.start_date;
            l_csm_line_details_tbl(j).date_start   := l_line_rec.start_date;

            l_csm_line_details_tbl(j).level_index_number := idx;
            l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
          END IF;
          --Bug 4738011 - End of Changes

          FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          -- Start of Bug#2757289 modification

            l_number_periods_remaining :=0;
            l_number_periods_completed := 0;
            l_number_periods_completed_cpy :=0;
            --If the payment is a stub
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN

               IF p_paydown_type = OKL_CREATE_STREAMS_PVT.G_PAYDOWN_TYPE_PPD THEN
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    --Modified by kthiruva on 13-Feb-2006
                    --Bug 4964710 - Start of Changes
                    --============================================================================================
                    --Step 1 : If payment is in Arrears created the PPD stub First
                    --============================================================================================
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                        AND (l_rl_rec.RULE_INFORMATION10 IS NOT NULL) THEN
	                     j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                         end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         IF l_ppd_tbl(k).curr_paydown = 'Y' THEN
 	                        l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount(p_amount  => (l_line_rec.oec/l_total_oec) * p_paydown_amount,
                                                                                                      p_currency_code => l_hdr_rec.currency_code) ;
                            --The flag l_ppd_assigned is set to true.
                            --The flag is used to track whether a stub is appearing after the Prinicpal Paydown stub
                            l_ppd_assigned                               := 'Y';
	                     ELSE
                            l_csm_line_details_tbl(j).amount          := l_ppd_tbl(k).paydown_amount;
                         END IF;
                         l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
	                     l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                     l_csm_line_details_tbl(j).level_index_number := idx;
	                     l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                     l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
	                     l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
		                 l_csm_line_details_tbl(j).rate               := l_variable_rate;
		                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                        l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                     ELSE
		                    l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                 END IF;

   		                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                 END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                   END IF;
                 END LOOP;
                 --=====================================================================
                 --Step 2 : The payment like for the existing stub is being created here
                 --=====================================================================
                 --The payment line for the existing stub is created here
                 j := j + 1;
                 idx := idx + 1;
                 l_csm_line_details_tbl(j).level_index_number := idx;
                 l_csm_line_details_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                 IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                 THEN
                    l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                 ELSE
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                 END IF;
                 l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                 l_csm_line_details_tbl(j).period             := g_stub_rec.period;
                 l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
                 l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                 l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                 --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
                 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            		 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                 end if;

                 l_csm_line_details_tbl(j).description        := l_strm_name;
                 l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                 l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
   	         l_csm_line_details_tbl(j).rate               := l_variable_rate;
	         l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
                 --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                 --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                 --solving for the new payment plan.
                 --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                 --both rate and amount
                 IF l_ppd_assigned = 'Y' THEN
  		            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                 ELSIF l_ppd_assigned = 'N' THEN
                    l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                 END IF;

                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                 ELSE
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                 END IF;

                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                   l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                 END IF;

                 IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                 ELSE
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                 END IF;
                 --=======================================================================================
                 --Step 3 : IF the Payment is Advance then the PPD stub is created after the existing stub
                 --=======================================================================================
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                        AND (l_rl_rec.RULE_INFORMATION10 IS NULL) THEN
	                     j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                         end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         IF l_ppd_tbl(k).curr_paydown = 'Y' THEN
 	                        l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount(p_amount  => (l_line_rec.oec/l_total_oec) * p_paydown_amount,
                                                                                                      p_currency_code => l_hdr_rec.currency_code) ;
                            --The flag l_ppd_assigned is set to true.
                            --The flag is used to track whether a stub is appearing after the Prinicpal Paydown stub
                            l_ppd_assigned                               := 'Y';
	                     ELSE
                            l_csm_line_details_tbl(j).amount          := l_ppd_tbl(k).paydown_amount;
                         END IF;
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                         l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                 l_csm_line_details_tbl(j).level_index_number := idx;
	                 l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                 l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
	                 l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
		         l_csm_line_details_tbl(j).rate               := l_variable_rate;
		         IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                 ELSE
		           l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		         END IF;

   		         IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                           l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		         END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                   END IF;
                 END LOOP;
                 --Bug 4964710 - End of Changes

               END IF;
-- End of Bug#2757289 modification
          /*mansrini Handle PPD for non-stub payments here*/
            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN

                --When there is no PPD in the range of the periodic payment, the payment is retained as is
                IF (l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date  > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3))
                  AND (l_ppd_tbl(l_ppd_tbl.LAST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.LAST).paydown_date > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3)) THEN /*chk date cols*/

         	        j := j + 1;
                    idx := idx + 1;
                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                    --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            			l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            		end if;

                    l_csm_line_details_tbl(j).description        := l_strm_name;
                    l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                    l_csm_line_details_tbl(j).level_index_number := idx;
                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
 		            l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));

                    l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                    l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
		            l_csm_line_details_tbl(j).rate               := l_variable_rate;
                    --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                    --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                    --solving for the new payment plan.
                    --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                    --both rate and amount
                    IF l_ppd_assigned = 'Y' THEN
  		              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                    ELSIF l_ppd_assigned = 'N' THEN
                      l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                    END IF;

                    IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                    END IF;

                    IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                    ELSE
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                    END IF;

                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                    ELSE
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                    END IF;

                ELSE

                  FOR k in l_ppd_tbl.FIRST .. l_ppd_tbl.LAST LOOP
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) THEN /*chk date cols*/
                      --=============================================================
                      --Step 1 : Obtaining the number of periods prior to the paydown
                      --=============================================================
                      l_number_periods_remaining := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term))  ;
                      --Modified by kthiruva on 12-Dec-2005
                      --Instead  of round, the function trunc needs to be used as we want the number
                      --of periods elapsed completely
                      --Bug 4878162 - Start of Changes
                      l_number_periods_completed := trunc (months_between(l_ppd_tbl(k).paydown_date, FND_DATE.canonical_to_date(l_rl_rec.rule_information2))  / l_rl_rec.decoded_object1_id1,0);
                      --Bug 4878162 - End of Changes

        		      IF l_number_periods_completed = 0 THEN
		                l_number_periods_completed_cpy := 0;
  		                l_number_periods_remaining     := l_number_periods_remaining - 1;
		              ELSE
		                l_number_periods_completed_cpy := l_number_periods_completed;
                        l_number_periods_remaining  := l_number_periods_remaining  - l_number_periods_completed - 1;
                      END IF;
                      --======================================================================================
                      --Step 2 : Creating the first payment line with the periods preceeding the first paydown
                      --         yet to be processed
                      --=======================================================================================

		              IF (l_first_batch = 'N') AND (NVL(l_number_periods_completed,0) > 0 OR l_csm_line_details_tbl(j).date_start > l_ppd_tbl(k).paydown_date) THEN /*Periods that have been complete before paydown*/
                     	 j := j + 1;
                         idx := idx + 1;
                         l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                         --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
                         if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			 end if;

                         l_csm_line_details_tbl(j).description        := l_strm_name;
                         l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                         l_csm_line_details_tbl(j).level_index_number := idx;
                         l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;

                         IF l_number_periods_completed_cpy = 0  THEN
   		                    l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
		                 ELSE
  		                    l_csm_line_details_tbl(j).number_of_periods  := l_number_periods_completed_cpy;
		                 END IF;

                         l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                         l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                         l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                         l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                     l_csm_line_details_tbl(j).rate               := l_variable_rate;
                         --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                         --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                         --solving for the new payment plan.
                         --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                         --both rate and amount
                         IF l_ppd_assigned = 'Y' THEN
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                         ELSIF l_ppd_assigned = 'N' THEN
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                         END IF;

                         IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                         END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                         IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                         ELSE
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                         END IF;
                         l_first_batch := 'Y';
                      END IF;
                      --=====================================================================
                      --Step 3 : If the payment is in Advance Create the Adjusting stub first
                      --=====================================================================
                      --If the payment is in Advance, the Adjusting stub needs to be created
                      --first followed up the PPD Stub
                      --For Payment in Arrears, the PPD stub is creted first followed by the
                      --Adjusting Stub
                      --Added by kthiruva on 10-Feb-2006
                      --Bug 4964710 - Start of Changes
                      IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                      THEN
                        --Calculating the days between the Paydown date and the due date of the next periodic payment
                        l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                        l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                        --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                        --line for remaining payments are created.
                        --If only one PPD is within a period then an adjusting stub is created for the rest
                        --of the period and one payment line for the remaining periods until the next paydown date
                        IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                  j := j + 1;
	                      idx := idx + 1;
	                      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                      l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                      l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                      l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                      l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                      --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				  l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			  end if;

	                      l_csm_line_details_tbl(j).description        := l_strm_name;
                              l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                          --The adjusting stub would end one day before the PPD date
	                      l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                              l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                      l_csm_line_details_tbl(j).level_index_number := idx;
	                      l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                      l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		              l_csm_line_details_tbl(j).rate               := l_variable_rate;
                          --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                          --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                          --solving for the new payment plan.
                          --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                          --both rate and amount
                          IF l_ppd_assigned = 'Y' THEN
  		            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                          ELSIF l_ppd_assigned = 'N' THEN
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                          END IF;

 		          IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
 		            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		          END IF;

   		          IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		          ELSE
		            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		          END IF;

 		          IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		          ELSE
		            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		          END IF;
                        END IF;
                      END IF;
                      --Bug 4964710 - End of Changes

                      --=================================
                      --Step 4 : Create the paydown stub
                      --=================================

  	                   IF p_paydown_type = OKL_CREATE_STREAMS_PVT.G_PAYDOWN_TYPE_PPD THEN
                        /*PPD stub*/
	                    j := j + 1;
	                    idx := idx + 1;
	                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                    l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                    l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                    l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                    --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			end if;

	                    l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                        --Calculating the prorated paydown amount if it is the current PPD
                        IF l_ppd_tbl(k).curr_paydown = 'Y' THEN
	                      l_csm_line_details_tbl(j).amount           :=  okl_accounting_util.round_amount(p_amount  => (l_line_rec.oec/l_total_oec) * p_paydown_amount,
                                                                                                          p_currency_code => l_hdr_rec.currency_code) ;
                          --The flag l_ppd_assigned is set to true.
                          --The flag is used to track whether a payment is appearing after the Prinicpal Paydown stub
                          l_ppd_assigned                               := 'Y';
                        ELSE
                          l_csm_line_details_tbl(j).amount           := l_ppd_tbl(k).paydown_amount;
                        END IF;
                        IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                        THEN
	                      l_csm_line_details_tbl(j).date_start         := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                        ELSE
                          l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                        END IF;
	                    l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                    l_csm_line_details_tbl(j).level_index_number := idx;
	                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
  		                l_csm_line_details_tbl(j).rate               := l_variable_rate;

		                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                  l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                END IF;

                        IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                ELSE
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                END IF;

   		                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                ELSE
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                END IF;
                        --===============================================================================
                        --Step 5: Check whether Ajusting stub needs to be created and create if necessary
                        --================================================================================
                        --Added by kthiruva on 10-Feb-2006
                        --Bug 4964710 - Start of Changes
                        IF (l_rl_rec.RULE_INFORMATION10 IS NOT NULL)
                        THEN
                          --Calculating the days between the Paydown date and the due date of the next periodic payment
                          l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                          l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                          --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                          --line for remaining payments are created.
                          --If only one PPD is within a period then an adjusting stub is created for the rest
                          --of the period and one payment line for the remaining periods until the next paydown date
                          IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                    /*Adjusting stub*/
	                        j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                        l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                        l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;
	                        --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				    l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
	                        l_csm_line_details_tbl(j).date_start         := l_adjusting_stub_date;
                            l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                    l_csm_line_details_tbl(j).rate               := l_variable_rate;
                            --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                            --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                            --solving for the new payment plan.
                            --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                            --both rate and amount
                            IF l_ppd_assigned = 'Y' THEN
  		                      l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                            ELSIF l_ppd_assigned = 'N' THEN
                              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                            END IF;

   		                    IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
 		                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                    END IF;

   		                    IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                    ELSE
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                    END IF;

 		                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                    ELSE
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                    END IF;
                          END IF;
                        END IF;
                        --Bug 4964710 - Start of Changes
                        --===================================================================================
                        --Step 6 : Check whether a payment line for the remaining payments needs to be created
                        --===================================================================================

                        --The periods between the end date of the adjusting stub and the next PPD is calculated
                        --If number of periods > 0, then a payment line for that many periods needs to be created.
                          IF k = l_ppd_tbl.LAST THEN
                            l_period_end_date := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3);
                          ELSE
                            l_period_end_date := l_ppd_tbl(k+1).paydown_date;
                          END IF;
                          --Modified by kthiruva on 12-Dec-2005
                          --Use round  here
                          --Bug 4878162 - Start of Changes
                          l_periods_after_ppd := round (months_between(l_period_end_date,l_csm_line_details_tbl(j).date_start )  / l_rl_rec.decoded_object1_id1,0);
                          --Bug 4878162 - End of Changes

                          --Create a payment line only if the number of periods till the next paydown is greater than 0
                          IF (l_periods_after_ppd > 0) THEN
		                    /*Remaining amts*/
		                    j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                        l_csm_line_details_tbl(j).number_of_periods  := l_periods_after_ppd;
                            l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
	                        l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                    l_csm_line_details_tbl(j).date_start         := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) ;
 		                    l_csm_line_details_tbl(j).rate               := l_variable_rate;
                            --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                            --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                            --solving for the new payment plan.
                            --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                            --both rate and amount
                            IF l_ppd_assigned = 'Y' THEN
  		                      l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                            ELSIF l_ppd_assigned = 'N' THEN
                              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                            END IF;

           		            IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                    END IF;

          	                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                    ELSE
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                    END IF;

		                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                    ELSE
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                    END IF;
                          END IF;--End of condition l_periods_after_ppd >0
                      END IF;--The condition that checks the paydown type
                    END IF;--The condition check for the date of every PPD in the ppd_tbl
                  END LOOP;--loop for l_ppd_tbl
                END IF;--The condition checking if there is any PPD inside the date range of the periodic payment
            END IF;--The condition checking for Stub or periodic payment
          END LOOP;
        --Added by kthiruva for VR Build
        --When the Payment Type on the loan contract is PRINCIPAL.
        ELSIF( UPPER(TRIM(l_strm_name)) = 'PRINCIPAL_PAYMENT' ) THEN
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
		  IF(g_rep_req_yn = 'Y') THEN

          --Added by kthriuva for VR build
          --For payment of type principal, we need to request the dependents
          --on Rent. Hence obtaining the stream type id of Rent
           get_primary_no_prc_stream_type
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_purpose =>'RENT',
             x_return_status => x_return_status,
             x_primary_sty_id => l_rent_sty_id
             );
           --kthriuva - End of Changes for VR build

		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_id =>l_rent_sty_id.id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
            );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  ELSE
          --Added by kthriuva for VR build
          --For payment of type principal, we need to request the dependents
          --on Rent. Hence obtaining the stream type id of Rent
           get_primary_no_prc_stream_type
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.pid,
             p_primary_sty_purpose =>'RENT',
             x_return_status => x_return_status,
             x_primary_sty_id => l_rent_sty_id
             );

           --kthriuva - End of Changes for VR build
		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_primary_sty_id =>l_rent_sty_id.id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
		    );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  END IF;


          IF l_strm_type_id_tbl.COUNT > 0 THEN
            FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
			  m := m + 1;

    		  l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
    		  l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
              l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
			END LOOP;
		  END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End

          j := j + 1;
          idx := idx + 1;
          l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

          --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
          if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
          end if;

          l_csm_line_details_tbl(j).description  := 'Funding';
          --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
          --The Capital Reduction should not be removed from the Funding amount
          --Bug 4738011 - Start of Changes
          execute_formula(p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_formula_name  => 'LINE_CAP_AMNT_LOAN',
                          p_contract_id   => p_chr_id,
                          p_line_id       => l_line_rec.id,
                          x_value         => l_total_lending);
          --Bug 4738011 - End of Changes
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          --Initialising l_ppd_count for every asset and deleting the existing l_ppd_Tbl
          l_ppd_count := 0;
          l_ppd_tbl.delete;
          --Added by kthiruva on 19-Sep-2005
          --All previous PPDs defined on the contract are fetched and added to a PL/SQL table
          FOR get_prev_ppd_rec IN get_prev_ppd_csr('LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id) LOOP
            FOR l_rl_rec in l_rl_csr ( get_prev_ppd_rec.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                 l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                 l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                   l_ppd_tbl(l_ppd_count).paydown_date := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                   l_ppd_tbl(l_ppd_count).paydown_amount := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION8,'0'));
                   l_ppd_tbl(l_ppd_count).curr_paydown := 'N';
                   l_ppd_count := l_ppd_count + 1;
               END IF;
            END LOOP;
          END LOOP;
          --Adding the current paydown to the ppd_tbl as the current paydown is not yet updated on the contract
          l_ppd_tbl(l_ppd_count).paydown_date := p_paydown_date;
          --Assigning it to 0 initially the paydown amount per line needs to be derived after proration
          l_ppd_tbl(l_ppd_count).paydown_amount := 0;
          l_ppd_tbl(l_ppd_count).curr_paydown := 'Y';
          --kthiruva : End of Changes

          --Populating the diff_to_next column for all records in the l_ppd_tbl
          --The diff_to_next stores the number of days between a paydown and its subsequent paydown
          --If there is no subsequent paydown then the diff_to_next column stores a value 0
          FOR k in l_ppd_tbl.FIRST.. l_ppd_tbl.LAST LOOP
            IF l_ppd_tbl.COUNT = 1 THEN
              l_ppd_tbl(k).diff_to_next := 0;
            ELSE
              IF (k = l_ppd_tbl.LAST) THEN
                l_ppd_tbl(k).diff_to_next := 0;
              ELSE
                l_ppd_tbl(k).diff_to_next := l_ppd_tbl(k+1).paydown_date - l_ppd_tbl(k).paydown_date;
              END IF;
            END IF;
          END LOOP;

          l_csm_line_details_tbl(j).amount       := l_total_lending;
          --Modified by kthiruva on 2-Sep-2005 for Pricing Enhancements
          --Bug 4576794 - Start of Changes
          --When a funding date is specified on the asset,it needs to be used as the date_start
          --When funding date is not specified, we use the contract start date

          --sechawla 11-sep-09 8798556 : When funding date is not specified, use asset start date, instead of contract start dt
          --l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_hdr_rec.start_date);
          l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_line_rec.start_date);


          --Bug 4576794 - End of Changes
	      l_csm_line_details_tbl(j).level_index_number := idx;
	      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
          l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
          l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
          l_csm_line_details_tbl(j).rate               := l_variable_rate;

          --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
          --If the Down Payment is capitalised then , a new funding line with the opposite sign
          --needs to be added
          --If the downpayment is billable,the amount needs to be populated in okl_sif_lines
          --Bug 4738011 - Start of Changes
          IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
            j := j + 1;
            idx := idx + 1;
            l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

            --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

            l_csm_line_details_tbl(j).description  := 'Funding';
            l_csm_line_details_tbl(j).amount       := l_line_rec.capital_reduction * (-1);
            --sechawla 11-sep-09 8798556
            --l_csm_line_details_tbl(j).date_start   := l_hdr_rec.start_date;
            l_csm_line_details_tbl(j).date_start   := l_line_rec.start_date;

            l_csm_line_details_tbl(j).level_index_number := idx;
            l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
          END IF;
          --Bug 4738011 - End of Changes

          FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          -- Start of Bug#2757289 modification

            l_number_periods_remaining :=0;
            l_number_periods_completed := 0;
            l_number_periods_completed_cpy :=0;
            --If payment is a stub
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
               IF p_paydown_type = OKL_CREATE_STREAMS_PVT.G_PAYDOWN_TYPE_PPD THEN
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    --Modified by kthiruva on 13-Feb-2006
                    --Bug 4964710 - Start of Changes
                    --============================================================================================
                    --Step 1 : If payment is in Arrears created the PPD stub First
                    --============================================================================================
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                    AND (l_rl_rec.RULE_INFORMATION10 IS NOT NULL) THEN
                             j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             			 end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                             IF l_ppd_tbl(k).curr_paydown = 'Y' THEN
 	                        l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount(p_amount  => (l_line_rec.oec/l_total_oec) * p_paydown_amount,
                                  p_currency_code => l_hdr_rec.currency_code) ;
                            --The flag l_ppd_assigned is set to true.
                            --The flag is used to track whether a stub is appearing after the Prinicpal Paydown stub
                            l_ppd_assigned                               := 'Y';
	                     ELSE
                            l_csm_line_details_tbl(j).amount          := l_ppd_tbl(k).paydown_amount;
                         END IF;
                         l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
	                     l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                     l_csm_line_details_tbl(j).level_index_number := idx;
	                     l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                     l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
	                     l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
		                 l_csm_line_details_tbl(j).rate               := l_variable_rate;
		                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                        l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                     ELSE
		                    l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                 END IF;

   		                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                 END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                   END IF;
                 END LOOP;
                 --=====================================================================
                 --Step 2 : The payment like for the existing stub is being created here
                 --=====================================================================
                 --The payment line for the existing stub is created here
                 j := j + 1;
                 idx := idx + 1;
                 l_csm_line_details_tbl(j).level_index_number := idx;
                 l_csm_line_details_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                 IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                 THEN
                    l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                 ELSE
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                 END IF;
                 l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                 l_csm_line_details_tbl(j).period             := g_stub_rec.period;
                 l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
                 l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
                 l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                 --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
                 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            		 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            	 end if;

                 l_csm_line_details_tbl(j).description        := l_strm_name;
                 l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                 l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
   	             l_csm_line_details_tbl(j).rate               := l_variable_rate;
	             l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
                 --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                 --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                 --solving for the new payment plan.
                 --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                 --both rate and amount
                 IF l_ppd_assigned = 'Y' THEN
  		            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                 ELSIF l_ppd_assigned = 'N' THEN
                    l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                 END IF;

                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                 ELSE
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                 END IF;

                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                   l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                 END IF;

                 IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                 ELSE
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                 END IF;
                 --=======================================================================================
                 --Step 3 : IF the Payment is Advance then the PPD stub is created after the existing stub
                 --=======================================================================================
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                        AND (l_rl_rec.RULE_INFORMATION10 IS NULL) THEN
	                     j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			 end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         IF l_ppd_tbl(k).curr_paydown = 'Y' THEN
 	                        l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount(p_amount  => (l_line_rec.oec/l_total_oec) * p_paydown_amount,
                                                                                                      p_currency_code => l_hdr_rec.currency_code) ;
                            --The flag l_ppd_assigned is set to true.
                            --The flag is used to track whether a stub is appearing after the Prinicpal Paydown stub
                            l_ppd_assigned                               := 'Y';
	                     ELSE
                            l_csm_line_details_tbl(j).amount          := l_ppd_tbl(k).paydown_amount;
                         END IF;
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                         l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                     l_csm_line_details_tbl(j).level_index_number := idx;
	                     l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                     l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
	                     l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
		                 l_csm_line_details_tbl(j).rate               := l_variable_rate;
		                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                        l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                     ELSE
		                    l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
  		                 END IF;

     	  	             IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                 END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                    END IF;
                 END LOOP;
                 --Bug 4964710 - End of Changes
               END IF;
-- End of Bug#2757289 modification
          /*mansrini Handle PPD for non-stub payments here*/
            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN

                --When there is no PPD in the range of the periodic payment, the payment is retained as is
                IF (l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date  > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3))
                  AND (l_ppd_tbl(l_ppd_tbl.LAST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.LAST).paydown_date > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3)) THEN /*chk date cols*/

         	        j := j + 1;
                    idx := idx + 1;
                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                    --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            			l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            		end if;

                    l_csm_line_details_tbl(j).description        := l_strm_name;
                    l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                    l_csm_line_details_tbl(j).level_index_number := idx;
                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
 		            l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));

                    l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                    l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
		            l_csm_line_details_tbl(j).rate               := l_variable_rate;
                    --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                    --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                    --solving for the new payment plan.
                    --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                    --both rate and amount
                    IF l_ppd_assigned = 'Y' THEN
  		              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                    ELSIF l_ppd_assigned = 'N' THEN
                      l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                    END IF;

                    IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                    END IF;

                    IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                    ELSE
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                    END IF;

                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                    ELSE
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                    END IF;

                ELSE

                  FOR k in l_ppd_tbl.FIRST .. l_ppd_tbl.LAST LOOP
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) THEN
                      --=============================================================
                      --Step 1 : Obtaining the number of periods prior to the paydown
                      --=============================================================
                      l_number_periods_remaining := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term))  ;
                      --Modified by kthiruva on 12-Dec-2005
                      --Use trunc instead of round as we need the number of periods elapsed completely
                      --Bug 4878162 - Start of Changes
                      l_number_periods_completed := trunc (months_between(l_ppd_tbl(k).paydown_date, FND_DATE.canonical_to_date(l_rl_rec.rule_information2))  / l_rl_rec.decoded_object1_id1,0);
                      --Bug 4878162 - End of Changes


        		      IF l_number_periods_completed = 0 THEN
		                l_number_periods_completed_cpy := 0;
  		                l_number_periods_remaining     := l_number_periods_remaining - 1;
		              ELSE
		                l_number_periods_completed_cpy := l_number_periods_completed;
                        l_number_periods_remaining  := l_number_periods_remaining  - l_number_periods_completed - 1;
                      END IF;
                      --======================================================================================
                      --Step 2 : Creating the first payment line with the periods preceeding the first paydown
                      --         yet to be processed
                      --=======================================================================================

		             IF (l_first_batch = 'N') AND (NVL(l_number_periods_completed,0) > 0 OR l_csm_line_details_tbl(j).date_start > l_ppd_tbl(k).paydown_date) THEN /*Periods that have been complete before paydown*/
                     	 j := j + 1;
                         idx := idx + 1;
                         l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                         --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
                         if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			 end if;

                         l_csm_line_details_tbl(j).description        := l_strm_name;
                         l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                         l_csm_line_details_tbl(j).level_index_number := idx;
                         l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;

                         IF l_number_periods_completed_cpy = 0  THEN
   		                    l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
		                 ELSE
  		                    l_csm_line_details_tbl(j).number_of_periods  := l_number_periods_completed_cpy;
		                 END IF;

                         l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                         l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                         l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                         l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                     l_csm_line_details_tbl(j).rate               := l_variable_rate;
                         --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                         --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                         --solving for the new payment plan.
                         --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                         --both rate and amount
                         IF l_ppd_assigned = 'Y' THEN
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                         ELSIF l_ppd_assigned = 'N' THEN
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                         END IF;

                         IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                         END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                         IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                         ELSE
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                         END IF;
                         l_first_batch := 'Y';
                      END IF;
                      --=====================================================================
                      --Step 3 : If the payment is in Advance Create the Adjusting stub first
                      --=====================================================================
                      --If the payment is in Advance, the Adjusting stub needs to be created
                      --first followed up the PPD Stub
                      --For Payment in Arrears, the PPD stub is creted first followed by the
                      --Adjusting Stub
                      --Added by kthiruva on 10-Feb-2006
                      --Bug 4964710 - Start of Changes
                      IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                      THEN
                        --Calculating the days between the Paydown date and the due date of the next periodic payment
                        l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1)  ;
                        l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                        --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                        --line for remaining payments are created.
                        --If only one PPD is within a period then an adjusting stub is created for the rest
                        --of the period and one payment line for the remaining periods until the next paydown date
                        IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                  j := j + 1;
	                      idx := idx + 1;
	                      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                      l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                      l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                      l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                      l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                      --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				  l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                          end if;

	                      l_csm_line_details_tbl(j).description        := l_strm_name;
                              l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                          --The adjusting stub would end one day before the PPD date
	                      l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                          l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                      l_csm_line_details_tbl(j).level_index_number := idx;
	                      l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                      l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                  l_csm_line_details_tbl(j).rate               := l_variable_rate;
                          --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                          --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                          --solving for the new payment plan.
                          --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                          --both rate and amount
                          IF l_ppd_assigned = 'Y' THEN
  		                    l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                          ELSIF l_ppd_assigned = 'N' THEN
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                          END IF;

          		          IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
 		                    l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                  END IF;

      		              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                  ELSE
		                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                  END IF;

 		                  IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                     l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                  ELSE
		                     l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                  END IF;
                        END IF;
                      END IF;
                      --Bug 4964710 - End of Changes

                      --=================================
                      --Step 4 : Create the paydown stub
                      --=================================

  	                   IF p_paydown_type = OKL_CREATE_STREAMS_PVT.G_PAYDOWN_TYPE_PPD THEN
                        /*PPD stub*/
	                    j := j + 1;
	                    idx := idx + 1;
	                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                    l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                    l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                    l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

						--sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
						if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                        end if;

	                    l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                        --Calculating the prorated paydown amount if it is the current PPD
                        IF l_ppd_tbl(k).curr_paydown = 'Y' THEN
	                      l_csm_line_details_tbl(j).amount           :=  okl_accounting_util.round_amount(p_amount  => (l_line_rec.oec/l_total_oec) * p_paydown_amount,
                                                                                                          p_currency_code => l_hdr_rec.currency_code) ;
                          --The flag l_ppd_assigned is set to true.
                          --The flag is used to track whether a payment is appearing after the Prinicpal Paydown stub
                          l_ppd_assigned                               := 'Y';
                        ELSE
                          l_csm_line_details_tbl(j).amount           := l_ppd_tbl(k).paydown_amount;
                        END IF;
                        IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                        THEN
	                      l_csm_line_details_tbl(j).date_start         := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                        ELSE
                          l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                        END IF;
	                    l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                    l_csm_line_details_tbl(j).level_index_number := idx;
	                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
  		                l_csm_line_details_tbl(j).rate               := l_variable_rate;

                        /*Populate the accrual end date as well*/
	   	                /*Create a stub for principal paydown*/
		                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                  l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                END IF;

                        IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                ELSE
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                END IF;

   		                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                ELSE
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                END IF;
                        --===============================================================================
                        --Step 5: Check whether Ajusting stub needs to be created and create if necessary
                        --================================================================================
                        --Added by kthiruva on 10-Feb-2006
                        --Bug 4964710 - Start of Changes
                        IF (l_rl_rec.RULE_INFORMATION10 IS NOT NULL)
                        THEN
                          --Calculating the days between the Paydown date and the due date of the next periodic payment
                          l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1)  ;
                          l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                          --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                          --line for remaining payments are created.
                          --If only one PPD is within a period then an adjusting stub is created for the rest
                          --of the period and one payment line for the remaining periods until the next paydown date
                          IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                    /*Adjusting stub*/
	                        j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                        l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                        l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
	                        l_csm_line_details_tbl(j).date_start         := l_adjusting_stub_date;
                            l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                    l_csm_line_details_tbl(j).rate               := l_variable_rate;
                            --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                            --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                            --solving for the new payment plan.
                            --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                            --both rate and amount
                            IF l_ppd_assigned = 'Y' THEN
  		                      l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                            ELSIF l_ppd_assigned = 'N' THEN
                              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                            END IF;

 	  	               IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
  		                  l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		               END IF;

   		               IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		               ELSE
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		               END IF;

   		               IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		               ELSE
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		               END IF;
                            END IF;
                          END IF;
                          --===================================================================================
                          --Step 6 : Check whether a payment line for the remaining payments needs to be creted
                          --===================================================================================

                          --The periods between the end date of the adjusting stub and the next PPD is calculated
                          --If number of periods > 0, then a payment line for that many periods needs to be created.
                          IF k = l_ppd_tbl.LAST THEN
                            l_period_end_date := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3);
                          ELSE
                            l_period_end_date := l_ppd_tbl(k+1).paydown_date;
                          END IF;
                          --Modified by kthiruva on 12-Dec-2005
                          --Use round here
                          --Bug 4878162 - Start of Changes
                          l_periods_after_ppd := round (months_between(l_period_end_date,l_csm_line_details_tbl(j).date_start )  / l_rl_rec.decoded_object1_id1,0);
                          --Bug 4878162 - Start of Changes
                          --Create a payment line only if the number of periods till the next paydown is greater than 0
                          IF (l_periods_after_ppd > 0) THEN
		                    /*Remaining amts*/
		                    j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                        l_csm_line_details_tbl(j).number_of_periods  := l_periods_after_ppd;
                            l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 16-Jul-09 PRB ESG Enhanceents : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
	                        l_csm_line_details_tbl(j).balance_type_code  := p_balance_type_code;
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
		                    l_csm_line_details_tbl(j).date_start         := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) ;
 		                    l_csm_line_details_tbl(j).rate               := l_variable_rate;
                            --When l_ppd_assigned is 'Y', the PPD stub has already been created. And therefore
                            --for the subsequent stubs we lock only the Rate.The amount is unlocked as we are
                            --solving for the new payment plan.
                            --When l_ppd_assigned is 'N', the payment is prior to paydown and we therefore lock
                            --both rate and amount
                            IF l_ppd_assigned = 'Y' THEN
  		                      l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_RATE;
                            ELSIF l_ppd_assigned = 'N' THEN
                              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_BOTH;
                            END IF;

           		            IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                    END IF;

          	                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                    ELSE
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                    END IF;

		                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                    ELSE
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                    END IF;
                          END IF;--End of condition l_periods_after_ppd >0

                      END IF;--The condition that checks the paydown type
                    END IF;--The condition check for the date of every PPD in the ppd_tbl
                  END LOOP;--loop for l_ppd_tbl
                END IF;--The condition checking if there is any PPD inside the date range of the periodic payment
            END IF;--The condition checking for Stub or periodic payment
          END LOOP;
        --Emd of Changes for payment type 'PRINCIPAL_PAYMENT'
        ELSIF (((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                (UPPER(l_strm_name_rec.stream_type_purpose) = 'FEE') AND
                (l_strm_name_rec.capitalize_yn = 'N')) OR
               ((l_strm_name_rec.periodic_yn = 'Y'  ) AND
			   -- code for user defined streams
                --(UPPER(l_strm_name_rec.name) <> 'FEE'))) THEN
				(UPPER(l_strm_name_rec.stream_type_purpose) <> 'FEE'))) THEN
				-- code for use defined streams ends here
          FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+l_rl_rec.rule_information7;
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-JUl-09 PRB ESg Enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              -- Code for user defined streams
			  --IF ( UPPER(l_strm_name_rec.name) = 'INTEREST PAYMENT' ) THEN
			  IF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'INTEREST_PAYMENT' ) THEN
			  -- code ends here
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
              --ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL PAYMENT' ) THEN
			  ELSIF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'PRINCIPAL_PAYMENT' ) THEN
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              ELSE
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              END If;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                  l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

               --sechawla 16-JUl-09 PRB ESg Enhancements : assign orig_contract_line_id
               if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                  l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
               end if;

              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
             IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF (l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                --sechawla 11-sep-09 8798556
                --l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                l_csm_periodic_expenses_tbl(k).date_start  := l_line_rec.start_date;
              ELSE
                l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              --IF ( UPPER(l_strm_name_rec.name) = 'INTEREST PAYMENT' ) THEN
			  IF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'INTEREST_PAYMENT' ) THEN
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
              --ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL PAYMENT' ) Then
			  ELSIF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'PRINCIPAL_PAYMENT' ) Then
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              ELSE
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              END If;
            END IF;
          END LOOP;
        ELSIf ((UPPER(TRIM(l_strm_name_rec.periodic_yn)) = 'N' )) Then
          FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            l := l + 1;
            l_csm_one_off_fee_tbl(l).description       := l_strm_name_rec.name;
            l_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
	    l_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
            If(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
	      l_csm_one_off_fee_tbl(l).date_paid         := l_hdr_rec.start_date;
            Else
	      l_csm_one_off_fee_tbl(l).date_paid         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
            End If;
            l_csm_one_off_fee_tbl(l).kle_asset_id      := l_line_rec.id;

            --sechawla 16-Jul-09 PRb ESg Enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_one_off_fee_tbl(l).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

          END LOOP;
        END IF;
      END LOOP;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    End If;
    -- Extract fee line
    extract_fee_lines( p_api_version => p_api_version,
                       p_chr_id => TO_NUMBER(p_chr_id),
                       p_deal_type => l_deal_type,
                       p_init_msg_list => p_init_msg_list,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       x_return_status => x_return_status,
                       px_csm_stream_types_tbl => l_csm_stream_types_tbl,
                       px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl,
                       px_csm_periodic_expenses_tbl => l_csm_periodic_expenses_tbl);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    extract_subsidized_lines(p_api_version => p_api_version,
                             p_init_msg_list => p_init_msg_list,
                             x_return_status => x_return_status,
                             x_msg_count => x_msg_count,
                             x_msg_data => x_msg_data,
                             p_chr_id => TO_NUMBER(p_chr_id),
                             px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    check_for_mandatory_streams(
            p_api_version        => p_api_version,
            p_init_msg_list      => p_init_msg_list,
            x_msg_count          => x_msg_count,
            x_msg_data           => x_msg_data,
            x_return_status      => x_return_status,
            p_chr_id             => p_chr_id,
            p_deal_type          => l_deal_type,
            p_stream_types_tbl   => l_csm_stream_types_tbl,
            x_stream_types_tbl   => l_req_stream_types_tbl);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    -- Requesting for yields
    x_return_status := yield_request(x_csm_yields_tbl => l_csm_yields_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
           raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    x_csm_loan_header := l_csm_loan_header;
    x_csm_loan_lines_tbl := l_csm_loan_levels_tbl;
    x_csm_loan_levels_tbl  := l_csm_line_details_tbl;
    x_csm_one_off_fee_tbl := l_csm_one_off_fee_tbl;
    x_csm_periodic_expenses_tbl := l_csm_periodic_expenses_tbl;
    x_csm_yields_tbl := l_csm_yields_tbl;
    x_csm_stream_types_tbl := l_req_stream_types_tbl;
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count,
                         x_msg_data	 => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS then
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END extract_params_loan_paydown;

  PROCEDURE extract_params_ppd_rebook(
            p_api_version                IN  NUMBER,
            p_init_msg_list              IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id                     IN  VARCHAR2,
	        x_return_status              OUT NOCOPY VARCHAR2,
            x_msg_count                  OUT NOCOPY NUMBER,
            x_msg_data                   OUT NOCOPY VARCHAR2,
            x_csm_loan_header            OUT NOCOPY okl_create_streams_pvt.csm_loan_rec_type,
            x_csm_loan_lines_tbl         OUT NOCOPY okl_create_streams_pvt.csm_loan_line_tbl_type,
            x_csm_loan_levels_tbl        OUT NOCOPY okl_create_streams_pvt.csm_loan_level_tbl_type,
            x_csm_one_off_fee_tbl        OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl  OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl             OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_csm_stream_types_tbl       OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_PPD_REBOOK';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	         VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    l_level_type                 NUMBER;
    l_strm_name                  VARCHAR2(200);
    i                            BINARY_INTEGER := 0;
    j                            BINARY_INTEGER := 0;
    k                            BINARY_INTEGER := 0;
    l                            BINARY_INTEGER := 0;
    m                            BINARY_INTEGER := 0;
    idx                          BINARY_INTEGER := 0;
    l_basis_percent              NUMBER;
    styid                        NUMBER;
	l_pricing_name               VARCHAR2(40);
    l_salvage                    NUMBER;
    l_purchase_option            VARCHAR2(256);
    l_deal_type                  VARCHAR2(256);
    l_purchase_option_amount     NUMBER;
    l_msg_count                  Number;
    l_msg_data                   varchar2(2000);
    l_chr_id                     Number := TO_NUMBER(p_chr_id);
    l_cle_id                     Number;
    l_rgd_code                   Varchar2(30) := 'LAPSTH';
    l_rdf_code                   Varchar2(30) := 'LASTRM';
    l_rdf_name                   Varchar2(80) := 'xxx';
    l_id1                        Varchar2(40);
    l_id2                        Varchar2(200);
    l_name                       Varchar2(200);
    l_description                Varchar2(2000);
    l_status                     Varchar2(1);
    l_start_date                 date;
    l_end_date                   date;
    l_org_id                     Number;
    l_inv_org_id                 Number;
    l_book_type_code             Varchar2(15);
    l_select                     Varchar2(2000);
    l_msg_index_out              Number;
    l_total_lending              NUMBER;


     Cursor l_struct_csr( chrId NUMBER ) is
     select distinct(nvl(crl.RULE_INFORMATION5,-1)) structure
     from   OKC_RULE_GROUPS_B crg,
            OKC_RULES_B crl
     where  crl.rgp_id = crg.id
            and crg.RGD_CODE = 'LALEVL'
            and crl.RULE_INFORMATION_CATEGORY = 'LASLL'
            and crg.dnz_chr_id = chrId;


    l_line_rec                   l_line_rec_csr%ROWTYPE;
    l_lne_rec                    l_line_rec_csr%ROWTYPE;
    l_hdr_rec                    l_hdr_csr%ROWTYPE;
    l_rl_rec                     l_rl_csr%ROWTYPE;
    l_hdrrl_rec                  l_hdrrl_csr%ROWTYPE;
    l_rl_rec1                    l_rl_csr1%ROWTYPE;
    l_tx_rec                     l_tx_csr%ROWTYPE;
    l_fee_strm_type_rec          fee_strm_type_csr%ROWTYPE;
    l_strm_name_rec              strm_name_csr%ROWTYPE;
    l_ib_rec                     ib_csr%ROWTYPE;
    l_struct_rec                 l_struct_csr%ROWTYPE;
	l_pdt_id_rec                 l_hdr_pdt_csr%ROWTYPE;
    l_csm_loan_header            okl_create_streams_pvt.csm_loan_rec_type;
    l_csm_loan_levels_tbl        okl_create_streams_pvt.csm_loan_line_tbl_type;
    l_csm_one_off_fee_tbl        okl_create_streams_pub.csm_one_off_fee_tbl_type;
    l_csm_periodic_expenses_tbl  okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_csm_yields_tbl             okl_create_streams_pub.csm_yields_tbl_type;
    l_csm_stream_types_tbl       okl_create_streams_pub.csm_stream_types_tbl_type;
    l_req_stream_types_tbl       okl_create_streams_pub.csm_stream_types_tbl_type;
    l_csm_line_details_tbl       okl_create_streams_pvt.csm_loan_level_tbl_type;
    l_rents_tbl                  okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_strm_type_id_tbl okl_strm_type_id_tbl_type;
    --p_deal_type                  okl_st_gen_tmpt_sets.deal_type%TYPE;

    --mansrini : Code for VR build
    CURSOR  get_day_conv_on_contrct
    IS
    SELECT
--Added by srsreeni for bug6076113
--            rate_params.days_in_a_year_code,
--            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code
            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code,
            rate_params.days_in_a_year_code
--srsreeni bug6076113 ends
    FROM    okl_k_rate_params rate_params
    WHERE   khr_id = p_chr_id;

    CURSOR  get_day_conv_on_sgt
    IS
    SELECT  DECODE(gts.days_in_month_code,'30','360',gts.days_in_month_code) days_in_month_code,
            gts.days_in_yr_code
    FROM
            okl_k_headers khr,
            okl_products_v pdt,
            okl_ae_tmpt_sets_v aes,
            OKL_ST_GEN_TMPT_SETS gts
    WHERE
            khr.pdt_id = pdt.id AND
            pdt.aes_id = aes.id AND
            aes.gts_id = gts.id AND
            khr.id  = p_chr_id;

    l_days_in_month_code OKL_ST_GEN_TMPT_SETS.days_in_month_code%type;
    l_days_in_yr_code  OKL_ST_GEN_TMPT_SETS.days_in_yr_code%type;
    l_number_periods_remaining okl_sif_fees.number_of_periods%TYPE;
    l_number_periods_completed okl_sif_fees.number_of_periods%TYPE;
    l_number_periods_completed_cpy okl_sif_fees.number_of_periods%TYPE;
    l_variable_rate okl_sif_fees.rate%TYPE;
    l_total_oec     okl_k_lines_full_v.oec%TYPE;
    --Added by kthiruva for the VR build
    l_rent_sty_id     strm_rec_type;
    l_prev_ppd        NUMBER := 0;

    --Added by NIKSHAH for bug 9103807 :START
    l_total_amount        NUMBER;
    l_index_flag        NUMBER;
    l_funded_amount        NUMBER;
    l_diff_amount        NUMBER;
    --Added by NIKSHAH for bug 9103807 :END


    --This Cursor fetches the Principal Paydown lines existing per asset line
    --on the contract
    CURSOR get_prev_ppd_csr(rgcode okc_rule_groups_b.rgd_code%TYPE,
                            rlcat  okc_rules_b.rule_information_category%TYPE,
                            chrId NUMBER,
                            cleId NUMBER )
    IS
    SELECT crl.id slh_id,
         crl.object1_id1,
         crl.rule_information1,
         crl.rule_information2,
         crl.rule_information3,
         crl.rule_information5,
         crl.rule_information6,
         crl.rule_information7,
         crl.rule_information8,
         crl.rule_information13,
         crl.rule_information10
    FROM okc_rule_groups_b crg,
         okc_rules_b crl,
         okl_strm_type_v sty
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    AND crl.object1_id1 = sty.id
    AND sty.stream_type_purpose = 'UNSCHEDULED_PRINCIPAL_PAYMENT'
    ORDER BY crl.rule_information1;

    get_prev_ppd_rec        get_prev_ppd_csr%ROWTYPE;

    --Added by kthiruva on 15-Jun-2006 for Bug 5261952
    --The base rate defined on the contract is captured when the payment type is Principal
    CURSOR get_base_rate_csr(p_chr_id   IN NUMBER,
                             p_date     IN DATE)
    IS
    SELECT PARM.BASE_RATE
    FROM OKL_K_RATE_PARAMS parm
    WHERE PARM.KHR_ID = p_chr_id
    AND PARM.PARAMETER_TYPE_CODE = 'ACTUAL'
    AND p_date BETWEEN EFFECTIVE_FROM_DATE AND NVL(EFFECTIVE_TO_DATE,p_date);

    l_base_rate             NUMBER;

    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;
    l_PROSPECTIVE_REBOOK_YN  varchar2(1);


FUNCTION get_end_date(
    l_start_date      IN  DATE,
    p_frequency       IN  VARCHAR2,
    p_period          IN  NUMBER,
    ---- cklee/mvasudev,06-02-2005,Bug#4392051/okl.h 4437938
    p_start_day   IN NUMBER DEFAULT NULL
)
    RETURN DATE IS
    l_end_date date;
    factor number := 0;
    BEGIN
     if(p_frequency = 'M') then
        factor := 1;
     elsif(p_frequency = 'Q') then
        factor := 3;
     elsif(p_frequency = 'S') then
        factor := 6;
     elsif(p_frequency = 'A') then
        factor := 12;
     end if;
     l_end_date := Okl_Lla_Util_Pvt.calculate_end_date(p_start_date => l_start_date,
	                                                   p_months     =>  factor * NVL(p_period,0),
							   p_start_day => p_start_day);

     return l_end_date;
EXCEPTION
    WHEN OTHERS THEN
      RETURN null;
END get_end_date;

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;


    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
     open  get_rebook_type;
     fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN;
     close get_rebook_type;


	OPEN l_hdr_pdt_csr(p_chr_id);
	FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
	CLOSE l_hdr_pdt_csr;

    --get day convention info : mansrini
    OPEN  get_day_conv_on_contrct;
    FETCH get_day_conv_on_contrct INTO l_days_in_month_code,l_days_in_yr_code;
    CLOSE get_day_conv_on_contrct;

--Added by srsreeni for bug6076113
--    IF l_days_in_month_code IS NULL OR l_days_in_month_code IS NULL
    IF l_days_in_month_code IS NULL OR l_days_in_yr_code IS NULL
--srsreeni bug6076113 ends
    THEN
      OPEN  get_day_conv_on_sgt;
      FETCH get_day_conv_on_sgt INTO l_days_in_month_code,l_days_in_yr_code;
      CLOSE get_day_conv_on_sgt;
    END IF;
    -- Validate the payments
    validate_payments(p_api_version    => p_api_version,
                      p_init_msg_list  => p_init_msg_list,
                      x_return_status  => x_return_status,
                      x_msg_count      => x_msg_count,
                      x_msg_data       => x_msg_data,
                      p_khr_id         => p_chr_id,
                      p_paym_tbl       => l_pay_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    i := 0; j := 0; k := 0; l := 0; m := 0;
	/*
    OPEN  l_hdr_pdt_csr(p_chr_id);
    FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
    CLOSE l_hdr_pdt_csr;
	*/
    -- Header infro
    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr into l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;
    l_csm_loan_header.khr_id                     := p_chr_id;
    l_csm_loan_header.date_payments_commencement := l_hdr_rec.start_date;
    l_csm_loan_header.date_start             := l_hdr_rec.start_date;
    l_csm_loan_header.pdt_id                     := l_hdr_rec.pid;
    l_deal_type := l_hdr_rec.deal_type;
    -- Fetching the location of the asset
    OPEN  ib_csr(TO_NUMBER(p_chr_id));
    FETCH ib_csr into l_ib_rec;
    IF ib_csr%NOTFOUND THEN
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE ib_csr;
    l_csm_loan_header.country := l_ib_rec.country;
    --The orp code for the Principal Paydown process is used here.
    l_csm_loan_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
    -- Callling the formual ccontract cap amount
    --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
    --The Capital Reduction should not be removed from the Funding amount
    --Bug 4738011 - Start of Changes
    execute_formula(p_api_version   => p_api_version,
                    p_init_msg_list => p_init_msg_list,
                    x_return_status => x_return_status,
                    x_msg_count     => x_msg_count,
                    x_msg_data      => x_msg_data,
                    p_formula_name  => 'CONTRACT_CAP_AMNT_LOAN',
                    p_contract_id   => p_chr_id,
                    p_line_id       => NULL,
                    x_value         => l_total_lending);
    --Bug 4738011 - End of Changes
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    l_csm_loan_header.total_lending := l_total_lending;
    l_csm_loan_header.sif_mode := OKL_CREATE_STREAMS_PUB.G_MODE_LENDER;

    --kthiruva : for PR proj
    --Fetch the total OEC for this contract so that it can be prorated for each asset in
    --the following loop
    OPEN total_oec_csr(p_chr_id);
    FETCH total_oec_csr INTO l_total_oec;
    CLOSE total_oec_csr;

    -- asset infor
    FOR l_line_rec IN l_line_rec_csr ( p_chr_id , 'FREE_FORM1') LOOP
      i := i + 1;
	  idx := 0;
      l_csm_loan_levels_tbl(i).kle_loan_id   := l_line_rec.id;

      --sechawla 27-JUL-09 :ESG PRB Enhancements :populate orig_contract_line_id for loans
      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
         l_csm_loan_levels_tbl(i).orig_contract_line_id := l_line_rec.orig_contract_line_id;
      end if;

      --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
      --When the Down payment is not capitalised, the Down payment amount needs to be passed through the Down
      --payment tag in the Lending Loans tag of the Outbound XML.
      --Bug 4738011 - Start of Changes
      IF l_line_rec.capitalize_down_payment_yn = 'N' THEN
         l_csm_loan_levels_tbl(i).capitalize_down_payment_yn := l_line_rec.capitalize_down_payment_yn;
         l_csm_loan_levels_tbl(i).down_payment_amount := l_line_rec.capital_reduction;
      END IF;
      --Bug 4738011 - End of Changes

      FOR l_rl_rec1 in l_rl_csr1 ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          --Added by kthiruva on 05-Dec-2005
         --Initialising l_first_batch for every asset line
         --Bug 4777531 - Start of Changes
         l_first_batch := 'N';
         --Bug 4777531 - End of Changes

	     l_level_type := l_rl_rec1.object1_id1;

        OPEN  strm_name_csr ( l_level_type );
        FETCH strm_name_csr into l_strm_name_rec;
        IF strm_name_csr%NOTFOUND THEN
          okl_api.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Contract id');
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE strm_name_csr;

        --l_strm_name := l_strm_name_rec.name;
		l_strm_name := l_strm_name_rec.stream_type_purpose;
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
--srsreeni Bug6245602 Added DOWN_PAYMENT and ESTIMATED_PROPERTY_TAX
        IF( UPPER(TRIM(l_strm_name)) NOT IN ('RENT','PRINCIPAL_PAYMENT','DOWN_PAYMENT','ESTIMATED_PROPERTY_TAX') ) THEN
--srsreeni Bug6245602 end
--Added by srsreeni for bug5841892
--          m := m + 1;
--          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
		  get_dependent_pricing_name
          (
           p_khr_id =>p_chr_id,
           p_sty_id =>l_level_type,
           x_return_status =>x_return_status,
           x_dependent_pricing_name	=>l_pricing_name
          );
--Added by srsreeni for bug5841892
		if l_pricing_name is not null then
          m := m + 1;
          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
          l_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;

          l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
		end if;
--bug5841892 end of changes
        END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
        --idx := 0;
        IF( UPPER(TRIM(l_strm_name)) = 'RENT' ) THEN
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
		  IF(g_rep_req_yn = 'Y') THEN

		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_id =>l_level_type,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
            );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  ELSE

		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_primary_sty_id =>l_level_type,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
		    );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  END IF;


          IF l_strm_type_id_tbl.COUNT > 0 THEN
            FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
			  m := m + 1;

    		  l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
    		  l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
              l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
			END LOOP;
		  END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End

          j := j + 1;
          idx := idx + 1;
          l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

          --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
          if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
          end if;

          l_csm_line_details_tbl(j).description  := 'Funding';
          --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
          --The Capital Reduction should not be removed from the Funding amount
          --Bug 4738011 - Start of Changes
          execute_formula(p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_formula_name  => 'LINE_CAP_AMNT_LOAN',
                          p_contract_id   => p_chr_id,
                          p_line_id       => l_line_rec.id,
                          x_value         => l_total_lending);
          --Bug 4738011 - End of Changes
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          --Initialising l_ppd_count for every asset and deleting the existing l_ppd_Tbl
          l_ppd_count := 0;
          l_ppd_tbl.delete;
          --Modified by kthiruva on 26-Sep-2005
          --All previous PPDs defined on the contract are fetched and added to a PL/SQL table
          FOR get_prev_ppd_rec IN get_prev_ppd_csr('LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id) LOOP
            FOR l_rl_rec in l_rl_csr ( get_prev_ppd_rec.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                 l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                 l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                   l_ppd_tbl(l_ppd_count).paydown_date := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                   l_ppd_tbl(l_ppd_count).paydown_amount := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION8,'0'));
                   l_ppd_tbl(l_ppd_count).curr_paydown := 'N';
                   l_ppd_count := l_ppd_count + 1;
               END IF;
            END LOOP;
          END LOOP;

          --Populating the diff_to_next column for all records in the l_ppd_tbl
          --The diff_to_next stores the number of days between a paydown and its subsequent paydown
          --If there is no subsequent paydown then the diff_to_next column stores a value 0
          FOR k in l_ppd_tbl.FIRST.. l_ppd_tbl.LAST LOOP
            IF l_ppd_tbl.COUNT = 1 THEN
              l_ppd_tbl(k).diff_to_next := 0;
            ELSE
              IF (k = l_ppd_tbl.LAST) THEN
                l_ppd_tbl(k).diff_to_next := 0;
              ELSE
                l_ppd_tbl(k).diff_to_next := l_ppd_tbl(k+1).paydown_date - l_ppd_tbl(k).paydown_date;
              END IF;
            END IF;
          END LOOP;

          l_csm_line_details_tbl(j).amount       := okl_accounting_util.round_amount (p_amount => l_total_lending, p_currency_code => l_hdr_rec.currency_code);
          --Modified by kthiruva on 2-Sep-2005 for Pricing Enhancements
          --Bug 4576794 - Start of Changes
          --When a funding date is specified on the asset,it needs to be used as the date_start
          --When funding date is not specified, we use the contract start date

          --sechawla 11-sep-09 8798556 : When funding date is not specified, use asset start date, instead of contract start dt
          --l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_hdr_rec.start_date);
          l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_line_rec.start_date);


          --Bug 4576794 - End of Changes
	      l_csm_line_details_tbl(j).level_index_number := idx;
	      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
          l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
          l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;

          --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
          --If the Down Payment is capitalised then , a new funding line with the opposite sign
          --needs to be added
          --If the downpayment is billable,the amount needs to be populated in okl_sif_lines
          --Bug 4738011 - Start of Changes
          IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
            j := j + 1;
            idx := idx + 1;
            l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

            --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

            l_csm_line_details_tbl(j).description  := 'Funding';
            l_csm_line_details_tbl(j).amount       := okl_accounting_util.round_amount (p_amount => l_line_rec.capital_reduction * (-1), p_currency_code => l_hdr_rec.currency_code);
            --sechawla 11-sep-09 8798556
            --l_csm_line_details_tbl(j).date_start   := l_hdr_rec.start_date;
            l_csm_line_details_tbl(j).date_start   := l_line_rec.start_date;

            l_csm_line_details_tbl(j).level_index_number := idx;
            l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
          END IF;
          --Bug 4738011 - End of Changes

          FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          -- Start of Bug#2757289 modification

            l_number_periods_remaining :=0;
            l_number_periods_completed := 0;
            l_number_periods_completed_cpy :=0;
            --If the payment is a stub
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN

               FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    --Modified by kthiruva on 13-Feb-2006
                    --Bug 4964710 - Start of Changes
                    --============================================================================================
                    --Step 1 : If payment is in Arrears created the PPD stub First
                    --============================================================================================
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                        AND (l_rl_rec.RULE_INFORMATION10 IS NOT NULL) THEN
	                     j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                         end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount (p_amount => l_ppd_tbl(k).paydown_amount, p_currency_code => l_hdr_rec.currency_code);
                         l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
	                     l_csm_line_details_tbl(j).level_index_number := idx;
	                     l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                     l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                             --This rate column is relevant for rent payments only in the rebook scenarios
                             --after a reamort
                             l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                         --When the cashflow step is a payment line, both amount and rate should not be locked
                         -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                         -- we are solving for rate.
	                     l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT;
		                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                        l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                     ELSE
		                    l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                 END IF;

   		                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                 END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                   END IF;
                 END LOOP;
                 --=====================================================================
                 --Step 2 : The payment like for the existing stub is being created here
                 --=====================================================================
                 --The payment line for the existing stub is created here
                 j := j + 1;
                 idx := idx + 1;
                 l_csm_line_details_tbl(j).level_index_number := idx;
                 l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => TO_NUMBER(l_rl_rec.rule_information8), p_currency_code => l_hdr_rec.currency_code);
                 IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                 THEN
                    l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                 ELSE
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                 END IF;
                 l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                 l_csm_line_details_tbl(j).period             := g_stub_rec.period;
                 l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
                 l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                 l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                 --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
                 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             		 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             	 end if;

                 l_csm_line_details_tbl(j).description        := l_strm_name;
                 l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                 l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                 --This rate column is relevant for rent payments only in the rebook scenarios
                 --after a reamort
                 l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                 --When the cashflow step is a payment line, both amount and rate should not be locked
                 -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                 -- we are solving for rate.
  	             l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                 ELSE
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                 END IF;

                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                   l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                 END IF;

                 IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                 ELSE
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                 END IF;
                 --=======================================================================================
                 --Step 3 : IF the Payment is Advance then the PPD stub is created after the existing stub
                 --=======================================================================================
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                        AND (l_rl_rec.RULE_INFORMATION10 IS NULL) THEN
	                     j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			 end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount (p_amount => l_ppd_tbl(k).paydown_amount, p_currency_code => l_hdr_rec.currency_code);
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
	                 l_csm_line_details_tbl(j).level_index_number := idx;
	                 l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                 l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                         --This rate column is relevant for rent payments only in the rebook scenarios
                         --after a reamort
                         l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                     --When the cashflow step is a payment line, both amount and rate should not be locked
                     -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                     -- we are solving for rate.
	                 l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT;
		         IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                 ELSE
		           l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		         END IF;

   		         IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                           l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		         END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                   END IF;
                 END LOOP;
                 --Bug 4964710 - End of Changes
-- End of Bug#2757289 modification
          /*mansrini Handle PPD for non-stub payments here*/
            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN

                --When there is no PPD in the range of the periodic payment, the payment is retained as is
                IF (l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date  > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3))
                  AND (l_ppd_tbl(l_ppd_tbl.LAST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.LAST).paydown_date > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3)) THEN /*chk date cols*/

         	        j := j + 1;
                    idx := idx + 1;
                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                    --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            			l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            		end if;

                    l_csm_line_details_tbl(j).description        := l_strm_name;
                    l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')), p_currency_code => l_hdr_rec.currency_code);
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                    l_csm_line_details_tbl(j).level_index_number := idx;
                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
 		            l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));

                    l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                    --This rate column is relevant for rent payments only in the rebook scenarios
                    --after a reamort
                    l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                    --When the cashflow step is a payment line, both amount and rate should not be locked
                    -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                    -- we are solving for rate.
                    l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

                    IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                    END IF;

                    IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                    ELSE
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                    END IF;

                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                    ELSE
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                    END IF;

                ELSE

                  FOR k in l_ppd_tbl.FIRST .. l_ppd_tbl.LAST LOOP
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) THEN /*chk date cols*/
                      --=============================================================
                      --Step 1 : Obtaining the number of periods prior to the paydown
                      --=============================================================
                      l_number_periods_remaining := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term))  ;
                      --Modified by kthiruva on 12-Dec-2005
                      --Instead  of round, the function trunc needs to be used as we want the number
                      --of periods elapsed completely
                      --Bug 4878162 - Start of Changes
                      l_number_periods_completed := trunc (months_between(l_ppd_tbl(k).paydown_date, FND_DATE.canonical_to_date(l_rl_rec.rule_information2))  / l_rl_rec.decoded_object1_id1,0);
                      --Bug 4878162 - End of Changes

        		      IF l_number_periods_completed = 0 THEN
		                l_number_periods_completed_cpy := 0;
  		                l_number_periods_remaining     := l_number_periods_remaining - 1;
		              ELSE
		                l_number_periods_completed_cpy := l_number_periods_completed;
                        l_number_periods_remaining  := l_number_periods_remaining  - l_number_periods_completed - 1;
                      END IF;
                      --======================================================================================
                      --Step 2 : Creating the first payment line with the periods preceeding the first paydown
                      --         yet to be processed
                      --=======================================================================================

		              IF (l_first_batch = 'N') AND (NVL(l_number_periods_completed,0) > 0 OR l_csm_line_details_tbl(j).date_start > l_ppd_tbl(k).paydown_date) THEN /*Periods that have been complete before paydown*/
                     	 j := j + 1;
                         idx := idx + 1;
                         l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                         --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
                         if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			 end if;

                         l_csm_line_details_tbl(j).description        := l_strm_name;
                         l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')), p_currency_code => l_hdr_rec.currency_code);
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                         l_csm_line_details_tbl(j).level_index_number := idx;
                         l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;

                         IF l_number_periods_completed_cpy = 0  THEN
   		                    l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
		                 ELSE
  		                    l_csm_line_details_tbl(j).number_of_periods  := l_number_periods_completed_cpy;
		                 END IF;

                         l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                         l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                         l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                         --This rate column is relevant for rent payments only in the rebook scenarios
                         --after a reamort
                         l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                         --When the cashflow step is a payment line, both amount and rate should not be locked
                         -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                         -- we are solving for rate.
                         l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

                         IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                         END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                         IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                         ELSE
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                         END IF;
                         l_first_batch := 'Y';
                      END IF;
                      --=====================================================================
                      --Step 3 : If the payment is in Advance Create the Adjusting stub first
                      --=====================================================================
                      --If the payment is in Advance, the Adjusting stub needs to be created
                      --first followed up the PPD Stub
                      --For Payment in Arrears, the PPD stub is creted first followed by the
                      --Adjusting Stub
                      --Added by kthiruva on 10-Feb-2006
                      --Bug 4964710 - Start of Changes
                      IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                      THEN
                        --Calculating the days between the Paydown date and the due date of the next periodic payment
                        l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                        l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                        --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                        --line for remaining payments are created.
                        --If only one PPD is within a period then an adjusting stub is created for the rest
                        --of the period and one payment line for the remaining periods until the next paydown date
                        IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                  j := j + 1;
	                      idx := idx + 1;
	                      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                      l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                      l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                      l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                      l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                      --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				  l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			  end if;

	                      l_csm_line_details_tbl(j).description        := l_strm_name;
                              l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')), p_currency_code => l_hdr_rec.currency_code);
                          --The adjusting stub would end one day before the PPD date
	                      l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
	                      l_csm_line_details_tbl(j).level_index_number := idx;
	                      l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                      l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                              --This rate column is relevant for rent payments only in the rebook scenarios
                              --after a reamort
                              l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                          --When the cashflow step is a payment line, both amount and rate should not be locked
                          -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                          -- we are solving for rate.
       		              l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

 		          IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
 		            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		          END IF;

   		          IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		          ELSE
		            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		          END IF;

 		          IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		          ELSE
		            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		          END IF;
                        END IF;
                      END IF;
                      --Bug 4964710 - End of Changes

                      --=================================
                      --Step 4 : Create the paydown stub
                      --=================================

  	                     /*PPD stub*/
	                    j := j + 1;
	                    idx := idx + 1;
	                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                    l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                    l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                    l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                    --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			end if;

	                    l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                        l_csm_line_details_tbl(j).amount           := okl_accounting_util.round_amount (p_amount => l_ppd_tbl(k).paydown_amount, p_currency_code => l_hdr_rec.currency_code);
                        IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                        THEN
	                      l_csm_line_details_tbl(j).date_start         := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                        ELSE
                          l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                        END IF;
	                    l_csm_line_details_tbl(j).level_index_number := idx;
	                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                            --This rate column is relevant for rent payments only in the rebook scenarios
                            --after a reamort
                            l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                        --When the cashflow step is a payment line, both amount and rate should not be locked
                        -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                        -- we are solving for rate.
		                l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT;

		                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                  l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                END IF;

                        IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                ELSE
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                END IF;

   		                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                ELSE
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                END IF;
                        --===============================================================================
                        --Step 5: Check whether Ajusting stub needs to be created and create if necessary
                        --================================================================================
                        --Added by kthiruva on 10-Feb-2006
                        --Bug 4964710 - Start of Changes
                        IF (l_rl_rec.RULE_INFORMATION10 IS NOT NULL)
                        THEN
                          --Calculating the days between the Paydown date and the due date of the next periodic payment
                          l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                          l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                          --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                          --line for remaining payments are created.
                          --If only one PPD is within a period then an adjusting stub is created for the rest
                          --of the period and one payment line for the remaining periods until the next paydown date
                          IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                    /*Adjusting stub*/
	                        j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                        l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                        l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')), p_currency_code => l_hdr_rec.currency_code);
	                        l_csm_line_details_tbl(j).date_start         := l_adjusting_stub_date;
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                                --This rate column is relevant for rent payments only in the rebook scenarios
                                --after a reamort
                                l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

                            --When the cashflow step is a payment line, both amount and rate should not be locked
                            -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                            -- we are solving for rate.
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

   		                    IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
 		                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                    END IF;

   		                    IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                    ELSE
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                    END IF;

 		                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                    ELSE
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                    END IF;
                          END IF;
                        END IF;
                        --Bug 4964710 - Start of Changes
                        --===================================================================================
                        --Step 6 : Check whether a payment line for the remaining payments needs to be created
                        --===================================================================================

                        --The periods between the end date of the adjusting stub and the next PPD is calculated
                        --If number of periods > 0, then a payment line for that many periods needs to be created.
                          IF k = l_ppd_tbl.LAST THEN
                            l_period_end_date := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3);
                          ELSE
                            l_period_end_date := l_ppd_tbl(k+1).paydown_date;
                          END IF;
                          --Modified by kthiruva on 12-Dec-2005
                          --Use round here
                          --Bug 4878162 - Start of Changes
                          l_periods_after_ppd := round (months_between(l_period_end_date,l_csm_line_details_tbl(j).date_start )  / l_rl_rec.decoded_object1_id1,0);
                          --Bug 4878162 - End of Changes

                          --Create a payment line only if the number of periods till the next paydown is greater than 0
                          IF (l_periods_after_ppd > 0) THEN
		                    /*Remaining amts*/
		                    j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                        l_csm_line_details_tbl(j).number_of_periods  := l_periods_after_ppd;
                            l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')), p_currency_code => l_hdr_rec.currency_code);
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                                --This rate column is relevant for rent payments only in the rebook scenarios
                                --after a reamort
                                l_csm_line_details_tbl(j).rate            := l_rl_rec.rule_information13;

		                    l_csm_line_details_tbl(j).date_start         := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) ;
                            --When the cashflow step is a payment line, both amount and rate should not be locked
                            -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                            -- we are solving for rate.
  	                        l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

           		            IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                    END IF;

          	                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                    ELSE
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                    END IF;

		                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                    ELSE
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                    END IF;
                          END IF;--End of condition l_periods_after_ppd >0
                    END IF;--The condition check for the date of every PPD in the ppd_tbl
                  END LOOP;--loop for l_ppd_tbl
                END IF;--The condition checking if there is any PPD inside the date range of the periodic payment
            END IF;--The condition checking for Stub or periodic payment
          END LOOP;
        --Added by kthiruva for VR Build
        --When the Payment Type on the loan contract is PRINCIPAL.
        ELSIF( UPPER(TRIM(l_strm_name)) = 'PRINCIPAL_PAYMENT' ) THEN
	             -- srsreeni - Bug#5699923 - Added - Start
 	             -- DONOT request SuperTrump to generate streams
 	             -- for TERMINATED lines
 	             IF l_line_rec.STE_CODE <> 'TERMINATED' THEN
		  IF(g_rep_req_yn = 'Y') THEN

          --Added by kthriuva for VR build
          --For payment of type principal, we need to request the dependents
          --on Rent. Hence obtaining the stream type id of Rent
           get_primary_no_prc_stream_type
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_purpose =>'RENT',
             x_return_status => x_return_status,
             x_primary_sty_id => l_rent_sty_id
             );
           --kthriuva - End of Changes for VR build

		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_id =>l_rent_sty_id.id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
            );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  ELSE
          --Added by kthriuva for VR build
          --For payment of type principal, we need to request the dependents
          --on Rent. Hence obtaining the stream type id of Rent
           get_primary_no_prc_stream_type
            (
             p_khr_id =>p_chr_id,
             p_pdt_id =>l_pdt_id_rec.pid,
             p_primary_sty_purpose =>'RENT',
             x_return_status => x_return_status,
             x_primary_sty_id => l_rent_sty_id
             );

           --kthriuva - End of Changes for VR build
		    get_dependent_stream_types
            (
             p_khr_id =>p_chr_id,
             p_primary_sty_id =>l_rent_sty_id.id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
		    );
		              IF x_return_status = 'E' THEN
		                x_return_status := 'S';
		              END IF;

		  END IF;


          IF l_strm_type_id_tbl.COUNT > 0 THEN
            FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
			  m := m + 1;

    		  l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
    		  l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
              l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
			END LOOP;
		  END IF;
             END IF; -- End of check for TERMINATED status
 	             -- srsreeni - Bug#5699923 - Added - End
        --Fetching the base rate
        OPEN get_base_rate_csr(p_chr_id => p_chr_id,
                               p_date   => l_hdr_rec.start_date);
        FETCH get_base_rate_csr INTO l_base_rate;
        IF get_base_rate_csr%NOTFOUND THEN
          Okl_Api.SET_MESSAGE(p_app_name     => g_app_name,
                              p_msg_name     => 'OKL_LLAP_BASE_RATE_NOT_DEF');
          RAISE Okl_Api.G_EXCEPTION_ERROR;
        END IF;
        CLOSE get_base_rate_csr;

          j := j + 1;
          idx := idx + 1;
          l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

          --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
          if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
          end if;

          l_csm_line_details_tbl(j).description  := 'Funding';
          --Modified by kthiruva on 24-Nov-2005 for the Down payment CR
          --The Capital Reduction should not be removed from the Funding amount
          --Bug 4738011 - Start of Changes
          execute_formula(p_api_version   => p_api_version,
                          p_init_msg_list => p_init_msg_list,
                          x_return_status => x_return_status,
                          x_msg_count     => x_msg_count,
                          x_msg_data      => x_msg_data,
                          p_formula_name  => 'LINE_CAP_AMNT_LOAN',
                          p_contract_id   => p_chr_id,
                          p_line_id       => l_line_rec.id,
                          x_value         => l_total_lending);
          --Bug 4738011 - End of Changes
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          --Initialising l_ppd_count for every asset and deleting the existing l_ppd_Tbl
          l_ppd_count := 0;
          l_ppd_tbl.delete;
          --Added by kthiruva on 19-Sep-2005
          --All previous PPDs defined on the contract are fetched and added to a PL/SQL table
          FOR get_prev_ppd_rec IN get_prev_ppd_csr('LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id) LOOP
            FOR l_rl_rec in l_rl_csr ( get_prev_ppd_rec.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                 l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                 l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                   l_ppd_tbl(l_ppd_count).paydown_date := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
                   l_ppd_tbl(l_ppd_count).paydown_amount := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION8,'0'));
                   l_ppd_tbl(l_ppd_count).curr_paydown := 'N';
                   l_ppd_count := l_ppd_count + 1;
               END IF;
            END LOOP;
          END LOOP;

          --Populating the diff_to_next column for all records in the l_ppd_tbl
          --The diff_to_next stores the number of days between a paydown and its subsequent paydown
          --If there is no subsequent paydown then the diff_to_next column stores a value 0
          FOR k in l_ppd_tbl.FIRST.. l_ppd_tbl.LAST LOOP
            IF l_ppd_tbl.COUNT = 1 THEN
              l_ppd_tbl(k).diff_to_next := 0;
            ELSE
              IF (k = l_ppd_tbl.LAST) THEN
                l_ppd_tbl(k).diff_to_next := 0;
              ELSE
                l_ppd_tbl(k).diff_to_next := l_ppd_tbl(k+1).paydown_date - l_ppd_tbl(k).paydown_date;
              END IF;
            END IF;
          END LOOP;

          l_csm_line_details_tbl(j).amount       := okl_accounting_util.round_amount (p_amount => l_total_lending, p_currency_code => l_hdr_rec.currency_code);
          --Modified by kthiruva on 2-Sep-2005 for Pricing Enhancements
          --Bug 4576794 - Start of Changes
          --When a funding date is specified on the asset,it needs to be used as the date_start
          --When funding date is not specified, we use the contract start date

          --sechawla 11-sep-09 8798556 : When funding date is not specified, use asset start date, instead of contract start dt
          --l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_hdr_rec.start_date);
          l_csm_line_details_tbl(j).date_start   := nvl(l_line_rec.date_funding_expected,l_line_rec.start_date);


          --Bug 4576794 - End of Changes
	      l_csm_line_details_tbl(j).level_index_number := idx;
	      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
          l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
          l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;

          --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
          --If the Down Payment is capitalised then , a new funding line with the opposite sign
          --needs to be added
          --If the downpayment is billable,the amount needs to be populated in okl_sif_lines
          --Bug 4738011 - Start of Changes
          IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
            j := j + 1;
            idx := idx + 1;
            l_csm_line_details_tbl(j).kle_loan_id  := l_line_rec.id;

            --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

            l_csm_line_details_tbl(j).description  := 'Funding';
            l_csm_line_details_tbl(j).amount       := okl_accounting_util.round_amount (p_amount => l_line_rec.capital_reduction * (-1), p_currency_code => l_hdr_rec.currency_code);
            --sechawla 11-sep-09 8798556
            --l_csm_line_details_tbl(j).date_start   := l_hdr_rec.start_date;
            l_csm_line_details_tbl(j).date_start   := l_line_rec.start_date;

            l_csm_line_details_tbl(j).level_index_number := idx;
            l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_line_details_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_line_details_tbl(j).days_in_year    := l_days_in_yr_code;
          END IF;
          --Bug 4738011 - End of Changes

          FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
          -- Start of Bug#2757289 modification

            l_number_periods_remaining :=0;
            l_number_periods_completed := 0;
            l_number_periods_completed_cpy :=0;
            --If payment is a stub
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    --Modified by kthiruva on 13-Feb-2006
                    --Bug 4964710 - Start of Changes
                    --============================================================================================
                    --Step 1 : If payment is in Arrears created the PPD stub First
                    --============================================================================================
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                    AND (l_rl_rec.RULE_INFORMATION10 IS NOT NULL) THEN
                             j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             			 end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount (p_amount => l_ppd_tbl(k).paydown_amount, p_currency_code => l_hdr_rec.currency_code);
                         l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
	                     l_csm_line_details_tbl(j).level_index_number := idx;
	                     l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                     l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                             --When the payment type is Principal, the Base Rate specified in the contract needs to be
                             --captured and passed. This rate is used in calculation of the Interest Payment Streams
                             --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                             --l_base_Rate needs to be used.
                             l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                         --When the cashflow step is a payment line, both amount and rate should not be locked
                         -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                         -- we are solving for rate.
	                     l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT;
		                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                        l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                     ELSE
		                    l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                 END IF;

   		                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                 END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                   END IF;
                 END LOOP;
                 --=====================================================================
                 --Step 2 : The payment like for the existing stub is being created here
                 --=====================================================================
                 --The payment line for the existing stub is created here
                 j := j + 1;
                 idx := idx + 1;
                 l_csm_line_details_tbl(j).level_index_number := idx;
                 l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => TO_NUMBER(l_rl_rec.rule_information8) , p_currency_code => l_hdr_rec.currency_code);
                 IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                 THEN
                    l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                 ELSE
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                 END IF;
                 l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                 l_csm_line_details_tbl(j).period             := g_stub_rec.period;
                 l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
                 l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
                 l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                 --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
                 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                    l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                 end if;


                 l_csm_line_details_tbl(j).description        := l_strm_name;
                 l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                 l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                 --When the payment type is Principal, the Base Rate specified in the contract needs to be
                 --captured and passed. This rate is used in calculation of the Interest Payment Streams
                 --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                 --l_base_Rate needs to be used.
                 l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                 --When the cashflow step is a payment line, both amount and rate should not be locked
                 -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                 -- we are solving for rate.
                 l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                 ELSE
                   l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                 END IF;

                 IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                   l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                 END IF;

                 IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                 ELSE
                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                 END IF;
                 --=======================================================================================
                 --Step 3 : IF the Payment is Advance then the PPD stub is created after the existing stub
                 --=======================================================================================
                 FOR k in l_ppd_tbl.FIRST..l_ppd_tbl.LAST LOOP
                    --If the paydown date lies inside the stub's start and end date, create a stub for the paydown
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7)
                        AND (l_rl_rec.RULE_INFORMATION10 IS NULL) THEN
	                     j := j + 1;
	                     idx := idx + 1;
	                     l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                     l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                     l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                     l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                     l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                     --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                     if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             			 end if;

	                     l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                         l_csm_line_details_tbl(j).amount          := okl_accounting_util.round_amount (p_amount => l_ppd_tbl(k).paydown_amount , p_currency_code => l_hdr_rec.currency_code);
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
	                     l_csm_line_details_tbl(j).level_index_number := idx;
	                     l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                     l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                             --When the payment type is Principal, the Base Rate specified in the contract needs to be
                             --captured and passed. This rate is used in calculation of the Interest Payment Streams
                             --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                             --l_base_Rate needs to be used.
                             l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                         --When the cashflow step is a payment line, both amount and rate should not be locked
                         -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                         -- we are solving for rate.
	                     l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT;
		                 IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
	                        l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
	                     ELSE
		                    l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
  		                 END IF;

     	  	             IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                 END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                    END IF;
                 END LOOP;
                 --Bug 4964710 - End of Changes
-- End of Bug#2757289 modification
          /*mansrini Handle PPD for non-stub payments here*/
            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN

                --When there is no PPD in the range of the periodic payment, the payment is retained as is
                IF (l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.FIRST).paydown_date  > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3))
                  AND (l_ppd_tbl(l_ppd_tbl.LAST).paydown_date < FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	              OR l_ppd_tbl(l_ppd_tbl.LAST).paydown_date > get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3)) THEN /*chk date cols*/

         	        j := j + 1;
                    idx := idx + 1;
                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

                    --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             			l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             		end if;

                    l_csm_line_details_tbl(j).description        := l_strm_name;
                    l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
                    l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                    l_csm_line_details_tbl(j).level_index_number := idx;
                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
 		            l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));

                    l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                    --When the payment type is Principal, the Base Rate specified in the contract needs to be
                    --captured and passed. This rate is used in calculation of the Interest Payment Streams
                    --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                    --l_base_Rate needs to be used.
                    l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                    --When the cashflow step is a payment line, both amount and rate should not be locked
                    -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                    -- we are solving for rate.
  		            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

                    IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                    END IF;

                    IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                    ELSE
                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                    END IF;

                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                    ELSE
                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                    END IF;

                ELSE

                  FOR k in l_ppd_tbl.FIRST .. l_ppd_tbl.LAST LOOP
                    IF l_ppd_tbl(k).paydown_date  >= FND_DATE.canonical_to_date(l_rl_rec.rule_information2)
	                AND l_ppd_tbl(k).paydown_date  < get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) THEN
                      --=============================================================
                      --Step 1 : Obtaining the number of periods prior to the paydown
                      --=============================================================
                      l_number_periods_remaining := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term))  ;
                      --Modified by kthiruva on 12-Dec-2005
                      --Use trunc instead of round as we need the number of periods elapsed completely
                      --Bug 4878162 - Start of Changes
                      l_number_periods_completed := trunc (months_between(l_ppd_tbl(k).paydown_date, FND_DATE.canonical_to_date(l_rl_rec.rule_information2))  / l_rl_rec.decoded_object1_id1,0);
                      --Bug 4878162 - End of Changes


        		      IF l_number_periods_completed = 0 THEN
		                l_number_periods_completed_cpy := 0;
  		                l_number_periods_remaining     := l_number_periods_remaining - 1;
		              ELSE
		                l_number_periods_completed_cpy := l_number_periods_completed;
                        l_number_periods_remaining  := l_number_periods_remaining  - l_number_periods_completed - 1;
                      END IF;
                      --======================================================================================
                      --Step 2 : Creating the first payment line with the periods preceeding the first paydown
                      --         yet to be processed
                      --=======================================================================================

		             IF (l_first_batch = 'N') AND (NVL(l_number_periods_completed,0) > 0 OR l_csm_line_details_tbl(j).date_start > l_ppd_tbl(k).paydown_date) THEN /*Periods that have been complete before paydown*/
                     	 j := j + 1;
                         idx := idx + 1;
                         l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

						 --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
						 if l_PROSPECTIVE_REBOOK_YN = 'Y' then
             				 l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
             			 end if;

                         l_csm_line_details_tbl(j).description        := l_strm_name;
                         l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
                         l_csm_line_details_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2) ;
                         l_csm_line_details_tbl(j).level_index_number := idx;
                         l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;

                         IF l_number_periods_completed_cpy = 0  THEN
   		                    l_csm_line_details_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
		                 ELSE
  		                    l_csm_line_details_tbl(j).number_of_periods  := l_number_periods_completed_cpy;
		                 END IF;

                         l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
                         l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
                         l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                         --When the payment type is Principal, the Base Rate specified in the contract needs to be
                         --captured and passed. This rate is used in calculation of the Interest Payment Streams
                         --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                         --l_base_Rate needs to be used.
                         l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                         --When the cashflow step is a payment line, both amount and rate should not be locked
                         -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                         -- we are solving for rate.
                         l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

                         IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                            l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                         END IF;

                         IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                         ELSE
                            l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                         END IF;

                         IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                         ELSE
                            l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                         END IF;
                         l_first_batch := 'Y';
                      END IF;
                      --=====================================================================
                      --Step 3 : If the payment is in Advance Create the Adjusting stub first
                      --=====================================================================
                      --If the payment is in Advance, the Adjusting stub needs to be created
                      --first followed up the PPD Stub
                      --For Payment in Arrears, the PPD stub is creted first followed by the
                      --Adjusting Stub
                      --Added by kthiruva on 10-Feb-2006
                      --Bug 4964710 - Start of Changes
                      IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                      THEN
                        --Calculating the days between the Paydown date and the due date of the next periodic payment
                        l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1)  ;
                        l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                        --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                        --line for remaining payments are created.
                        --If only one PPD is within a period then an adjusting stub is created for the rest
                        --of the period and one payment line for the remaining periods until the next paydown date
                        IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                  j := j + 1;
	                      idx := idx + 1;
	                      l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
	                      l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                      l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                      l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                      l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                      --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				  l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
                          end if;

	                      l_csm_line_details_tbl(j).description        := l_strm_name;
                              l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
                          --The adjusting stub would end one day before the PPD date
	                      l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
	                      l_csm_line_details_tbl(j).level_index_number := idx;
	                      l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                      l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                              --When the payment type is Principal, the Base Rate specified in the contract needs to be
                              --captured and passed. This rate is used in calculation of the Interest Payment Streams
                              --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                              --l_base_Rate needs to be used.
                              l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                          --When the cashflow step is a payment line, both amount and rate should not be locked
                          -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                          -- we are solving for rate.
                          l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

          		          IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
 		                    l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                  END IF;

      		              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                  ELSE
		                    l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                  END IF;

 		                  IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                     l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                  ELSE
		                     l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                  END IF;
                        END IF;
                      END IF;
                      --Bug 4964710 - End of Changes

                      --=================================
                      --Step 4 : Create the paydown stub
                      --=================================

  	                     /*PPD stub*/
	                    j := j + 1;
	                    idx := idx + 1;
	                    l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                    l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                    l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                    l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                    l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                    --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                    if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            				l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            			end if;


	                    l_csm_line_details_tbl(j).description        := 'UNSCHEDULED_PRINCIPAL_PAYMENT';
                        l_csm_line_details_tbl(j).amount           := okl_accounting_util.round_amount (p_amount => l_ppd_tbl(k).paydown_amount , p_currency_code => l_hdr_rec.currency_code);
                        IF (l_rl_rec.RULE_INFORMATION10 IS NULL)
                        THEN
	                      l_csm_line_details_tbl(j).date_start         := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1) ;
                        ELSE
                          l_csm_line_details_tbl(j).date_start         := l_ppd_tbl(k).paydown_date;
                        END IF;
	                    l_csm_line_details_tbl(j).level_index_number := idx;
	                    l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                    l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                            --When the payment type is Principal, the Base Rate specified in the contract needs to be
                            --captured and passed. This rate is used in calculation of the Interest Payment Streams
                            --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                            --l_base_Rate needs to be used.
                            l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);


                        --When the cashflow step is a payment line, both amount and rate should not be locked
                        -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                        -- we are solving for rate.
		                l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT;

                        /*Populate the accrual end date as well*/
	   	                /*Create a stub for principal paydown*/
		                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                  l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                END IF;

                        IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                ELSE
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                END IF;

   		                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                ELSE
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                END IF;
                        --===============================================================================
                        --Step 5: Check whether Ajusting stub needs to be created and create if necessary
                        --================================================================================
                        --Added by kthiruva on 10-Feb-2006
                        --Bug 4964710 - Start of Changes
                        IF (l_rl_rec.RULE_INFORMATION10 IS NOT NULL)
                        THEN
                          --Calculating the days between the Paydown date and the due date of the next periodic payment
                          l_adjusting_stub_date := add_months(FND_DATE.canonical_to_date(l_rl_rec.rule_information2), (l_number_periods_completed_cpy+1)*l_rl_rec.decoded_object1_id1)  ;
                          l_days_between := l_adjusting_stub_date - l_ppd_tbl(k).paydown_date;

                          --Checking to see if 2 PPD's lie inside a single period.If so, no adjusting stub and
                          --line for remaining payments are created.
                          --If only one PPD is within a period then an adjusting stub is created for the rest
                          --of the period and one payment line for the remaining periods until the next paydown date
                          IF (l_ppd_tbl(k).diff_to_next = 0 OR (l_ppd_tbl(k).diff_to_next > l_days_between)) THEN
   		                    /*Adjusting stub*/
	                        j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                        l_csm_line_details_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
	                        l_csm_line_details_tbl(j).period             := g_stub_rec.period;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
	                        l_csm_line_details_tbl(j).date_start         := l_adjusting_stub_date;
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                                --When the payment type is Principal, the Base Rate specified in the contract needs to be
                                --captured and passed. This rate is used in calculation of the Interest Payment Streams
                                --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                                --l_base_Rate needs to be used.
                                l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

                            --When the cashflow step is a payment line, both amount and rate should not be locked
                            -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                            -- we are solving for rate.
  	                        l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

 	  	               IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
  		                  l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		               END IF;

   		               IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		               ELSE
		                  l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		               END IF;

   		               IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		               ELSE
		                  l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		               END IF;
                            END IF;
                          END IF;
                          --===================================================================================
                          --Step 6 : Check whether a payment line for the remaining payments needs to be creted
                          --===================================================================================

                          --The periods between the end date of the adjusting stub and the next PPD is calculated
                          --If number of periods > 0, then a payment line for that many periods needs to be created.
                          IF k = l_ppd_tbl.LAST THEN
                            l_period_end_date := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3);
                          ELSE
                            l_period_end_date := l_ppd_tbl(k+1).paydown_date;
                          END IF;
                          --Modified by kthiruva on 12-Dec-2005
                          --Use round here
                          --Bug 4878162 - Start of Changes
                          l_periods_after_ppd := round (months_between(l_period_end_date,l_csm_line_details_tbl(j).date_start )  / l_rl_rec.decoded_object1_id1,0);
                          --Bug 4878162 - Start of Changes
                          --Create a payment line only if the number of periods till the next paydown is greater than 0
                          IF (l_periods_after_ppd > 0) THEN
		                    /*Remaining amts*/
		                    j := j + 1;
	                        idx := idx + 1;
	                        l_csm_line_details_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
	                        l_csm_line_details_tbl(j).number_of_periods  := l_periods_after_ppd;
                            l_csm_line_details_tbl(j).period             := l_rl_rec.object1_id1;
	                        l_csm_line_details_tbl(j).advance_or_arrears := g_stub_rec.advance_or_arrears;
	                        l_csm_line_details_tbl(j).kle_loan_id        := l_line_rec.id;

	                        --sechawla 17-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
	                        if l_PROSPECTIVE_REBOOK_YN = 'Y' then
            					l_csm_line_details_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            				end if;

	                        l_csm_line_details_tbl(j).description        := l_strm_name;
                            l_csm_line_details_tbl(j).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
	                        l_csm_line_details_tbl(j).level_index_number := idx;
	                        l_csm_line_details_tbl(j).days_in_month      := l_days_in_month_code;
	                        l_csm_line_details_tbl(j).days_in_year       := l_days_in_yr_code;
                                --When the payment type is Principal, the Base Rate specified in the contract needs to be
                                --captured and passed. This rate is used in calculation of the Interest Payment Streams
                                --During the booking scenario, the SLL lines do not contain the rate info.Therefore,
                                --l_base_Rate needs to be used.
                                l_csm_line_details_tbl(j).rate            := nvl(l_rl_rec.rule_information13,l_base_rate);

		                    l_csm_line_details_tbl(j).date_start         := get_end_date(FND_DATE.canonical_to_date(l_rl_rec.rule_information2),l_rl_rec.OBJECT1_ID1,l_rl_rec.rule_information3) ;
                            --When the cashflow step is a payment line, both amount and rate should not be locked
                            -- For the PPD stub, the amount should be locked , but rate should be unlocked, as
                            -- we are solving for rate.
                            l_csm_line_details_tbl(j).LOCK_LEVEL_STEP    := G_FALSE;

           		            IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
		                      l_csm_line_details_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
		                    END IF;

          	                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
		                    ELSE
		                      l_csm_line_details_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
		                    END IF;

		                    IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
		                    ELSE
		                      l_csm_line_details_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
		                    END IF;
                          END IF;--End of condition l_periods_after_ppd >0

                    END IF;--The condition check for the date of every PPD in the ppd_tbl
                  END LOOP;--loop for l_ppd_tbl
                END IF;--The condition checking if there is any PPD inside the date range of the periodic payment
            END IF;--The condition checking for Stub or periodic payment
          END LOOP;
        --Emd of Changes for payment type 'PRINCIPAL_PAYMENT'
        ELSIF (((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                (UPPER(l_strm_name_rec.stream_type_purpose) = 'FEE') AND
                (l_strm_name_rec.capitalize_yn = 'N')) OR
               ((l_strm_name_rec.periodic_yn = 'Y'  ) AND
			   -- code for user defined streams
                --(UPPER(l_strm_name_rec.name) <> 'FEE'))) THEN
				(UPPER(l_strm_name_rec.stream_type_purpose) <> 'FEE'))) THEN
				-- code for use defined streams ends here
          FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).amount             := okl_accounting_util.round_amount (p_amount => TO_NUMBER(l_rl_rec.rule_information8) , p_currency_code => l_hdr_rec.currency_code);
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+l_rl_rec.rule_information7;
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-Jul-09 PRB ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              -- Code for user defined streams
			  --IF ( UPPER(l_strm_name_rec.name) = 'INTEREST PAYMENT' ) THEN
			  IF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'INTEREST_PAYMENT' ) THEN
			  -- code ends here
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
              --ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL PAYMENT' ) THEN
			  ELSIF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'PRINCIPAL_PAYMENT' ) THEN
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              ELSE
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              END If;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                  l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              l_csm_periodic_expenses_tbl(k).amount             := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
              l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 16-Jul-09 PRB ESg enhancements : assign orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END IF;
             IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF (l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                --sechawla 11-sep-09 8798556
                --l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                l_csm_periodic_expenses_tbl(k).date_start  := l_line_rec.start_date;
              ELSE
                l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
              IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
              ELSE
                l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              END IF;
              --IF ( UPPER(l_strm_name_rec.name) = 'INTEREST PAYMENT' ) THEN
			  IF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'INTEREST_PAYMENT' ) THEN
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
              --ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL PAYMENT' ) Then
			  ELSIF ( UPPER(l_strm_name_rec.stream_type_purpose) = 'PRINCIPAL_PAYMENT' ) Then
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
              ELSE
                l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              END If;
            END IF;
          END LOOP;
        ELSIf ((UPPER(TRIM(l_strm_name_rec.periodic_yn)) = 'N' )) Then
          FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            l := l + 1;
            l_csm_one_off_fee_tbl(l).description       := l_strm_name_rec.name;
            l_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
	    l_csm_one_off_fee_tbl(l).amount            := okl_accounting_util.round_amount (p_amount => FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0')) , p_currency_code => l_hdr_rec.currency_code);
            If(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
	      l_csm_one_off_fee_tbl(l).date_paid         := l_hdr_rec.start_date;
            Else
	      l_csm_one_off_fee_tbl(l).date_paid         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
            End If;
            l_csm_one_off_fee_tbl(l).kle_asset_id      := l_line_rec.id;

            --sechawla 16-Jul-09 PRB ESG Enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_one_off_fee_tbl(l).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;

          END LOOP;
        END IF;
      END LOOP;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    End If;
    -- Extract fee line
    extract_fee_lines( p_api_version => p_api_version,
                       p_chr_id => TO_NUMBER(p_chr_id),
                       p_deal_type => l_deal_type,
                       p_init_msg_list => p_init_msg_list,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       x_return_status => x_return_status,
                       px_csm_stream_types_tbl => l_csm_stream_types_tbl,
                       px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl,
                       px_csm_periodic_expenses_tbl => l_csm_periodic_expenses_tbl);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    extract_subsidized_lines(p_api_version => p_api_version,
                             p_init_msg_list => p_init_msg_list,
                             x_return_status => x_return_status,
                             x_msg_count => x_msg_count,
                             x_msg_data => x_msg_data,
                             p_chr_id => TO_NUMBER(p_chr_id),
                             px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    check_for_mandatory_streams(
            p_api_version        => p_api_version,
            p_init_msg_list      => p_init_msg_list,
            x_msg_count          => x_msg_count,
            x_msg_data           => x_msg_data,
            x_return_status      => x_return_status,
            p_chr_id             => p_chr_id,
            p_deal_type          => l_deal_type,
            p_stream_types_tbl   => l_csm_stream_types_tbl,
            x_stream_types_tbl   => l_req_stream_types_tbl);
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;
    -- Requesting for yields
    x_return_status := yield_request(x_csm_yields_tbl => l_csm_yields_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
           raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  Begin(+)');
    IF l_csm_line_details_tbl.COUNT > 0 THEN
      FOR z IN l_csm_line_details_tbl.FIRST..l_csm_line_details_tbl.LAST
      LOOP
        IF l_csm_line_details_tbl.exists(z) THEN
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').description :' || l_csm_line_details_tbl(z).description);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').date_start :' || l_csm_line_details_tbl(z).date_start);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').kle_loan_id :' || l_csm_line_details_tbl(z).kle_loan_id);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').level_index_number :' || l_csm_line_details_tbl(z).level_index_number);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').level_type :' || l_csm_line_details_tbl(z).level_type);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').number_of_periods :' || l_csm_line_details_tbl(z).number_of_periods);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').amount :' || l_csm_line_details_tbl(z).amount);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').lock_level_step :' || l_csm_line_details_tbl(z).lock_level_step);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').rate :' || l_csm_line_details_tbl(z).rate);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').period :' || l_csm_line_details_tbl(z).period);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').advance_or_arrears :' || l_csm_line_details_tbl(z).advance_or_arrears);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').income_or_expense :' || l_csm_line_details_tbl(z).income_or_expense);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').structure :' || l_csm_line_details_tbl(z).structure);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').query_level_yn :' || l_csm_line_details_tbl(z).query_level_yn);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').days_in_month :' || l_csm_line_details_tbl(z).days_in_month);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').days_in_year :' || l_csm_line_details_tbl(z).days_in_year);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').balance_type_code :' || l_csm_line_details_tbl(z).balance_type_code);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').payment_type :' || l_csm_line_details_tbl(z).payment_type);
          write_to_log('  okl_la_stream_pvt.extract_params_ppd_rebook: l_csm_line_details_tbl(' || z || ').orig_contract_line_id :' || l_csm_line_details_tbl(z).orig_contract_line_id);
        END IF;
      END LOOP;
    END IF;
    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  End(-)');

    --Added by NIKSHAH for bug 9103807 :START
    l_total_amount := 0;
    l_index_flag := -1;
    l_funded_amount := 0;
    IF l_csm_line_details_tbl.COUNT > 0 THEN
      FOR z IN l_csm_line_details_tbl.FIRST..l_csm_line_details_tbl.LAST
      LOOP
        IF l_csm_line_details_tbl.exists(z) THEN
          IF l_csm_line_details_tbl(z).level_type = 'PRINCIPAL' OR
             l_csm_line_details_tbl(z).level_type = 'PRINCIPAL_PAYMENT' THEN
            IF l_csm_line_details_tbl(z).period = 'T' AND
               l_index_flag = -1 AND
               l_csm_line_details_tbl(z).lock_level_step <> OKL_CREATE_STREAMS_PVT.G_LOCK_AMOUNT
            THEN
              l_index_flag := z;
            END IF;
            l_total_amount := l_total_amount + (l_csm_line_details_tbl(z).amount * l_csm_line_details_tbl(z).number_of_periods);
          ELSIF l_csm_line_details_tbl(z).level_type = 'FUNDING' THEN
            l_funded_amount := l_csm_line_details_tbl(z).amount;
          END IF;
        END IF;
      END LOOP;
    END IF;
    l_total_amount := okl_accounting_util.round_amount (p_amount => l_total_amount , p_currency_code => l_hdr_rec.currency_code);
    IF l_index_flag <> -1 THEN
      l_diff_amount := l_funded_amount - l_total_amount;
      l_csm_line_details_tbl(l_index_flag).amount := l_csm_line_details_tbl(l_index_flag).amount + l_diff_amount;
    END IF;
    --Added by NIKSHAH for bug 9103807 :END
    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  l_index_flag: ' || l_index_flag);
    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  l_diff_amount: ' || l_diff_amount);
    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  l_funded_amount: ' || l_funded_amount);
    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  l_total_amount: ' || l_total_amount);
    write_to_log('okl_la_stream_pvt.extract_params_ppd_rebook:  l_csm_line_details_tbl(l_index_flag).amount: ' || l_csm_line_details_tbl(l_index_flag).amount);

    x_csm_loan_header := l_csm_loan_header;
    x_csm_loan_lines_tbl := l_csm_loan_levels_tbl;
    x_csm_loan_levels_tbl  := l_csm_line_details_tbl;
    x_csm_one_off_fee_tbl := l_csm_one_off_fee_tbl;
    x_csm_periodic_expenses_tbl := l_csm_periodic_expenses_tbl;
    x_csm_yields_tbl := l_csm_yields_tbl;
    x_csm_stream_types_tbl := l_req_stream_types_tbl;
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count,
                         x_msg_data	 => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS then
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END extract_params_ppd_rebook;


  Procedure extract_params_loan(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id          IN  VARCHAR2,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2,
            x_csm_loan_header           OUT NOCOPY okl_create_streams_pvt.csm_loan_rec_type,
            x_csm_loan_lines_tbl        OUT NOCOPY okl_create_streams_pvt.csm_loan_line_tbl_type,
            x_csm_loan_levels_tbl       OUT NOCOPY okl_create_streams_pvt.csm_loan_level_tbl_type,
            x_csm_one_off_fee_tbl       OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl            OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_csm_stream_types_tbl      OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type,
            p_orp_code                  IN  VARCHAR2 DEFAULT NULL)  AS

    --Added by kthiruva on 18-Apr-2006 for Bug 5161075
    --This cursor determines whether there have been any Paydowns on this Contract
    CURSOR is_ppd_available_csr(chrId NUMBER)
    IS
    SELECT count(crl.id)
    FROM okc_rule_groups_b crg,
         okc_rules_b crl,
         okl_strm_type_v sty
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = 'LALEVL'
    AND crl.rule_information_category = 'LASLH'
    AND crg.dnz_chr_id = chrId
    AND crl.object1_id1 = sty.id
    AND sty.stream_type_purpose = 'UNSCHEDULED_PRINCIPAL_PAYMENT'
    ORDER BY crl.rule_information1;

    --Added by kthiruva on 18-Apr-2006 for Bug 5161075
    l_ppd_cnt                   NUMBER := 0;

    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_LOAN';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

   Begin

    --Added by kthiruva on 18-Apr-2006
    --If there is a PPD defined on the Contract, then make a call to extract_params_ppd_rebook
    --else call extract_params_loan
    --Bug 5161075- Start of Changes
    OPEN is_ppd_available_csr(p_chr_id);
    FETCH is_ppd_available_csr INTO l_ppd_cnt;
    CLOSE is_ppd_available_csr;

    IF l_ppd_cnt > 0 THEN

          extract_params_ppd_rebook(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl);

          --Added by kthiruva for Debugging
          write_to_log('After the call to extract_params_ppd_rebook, the return status is :'||x_return_status);
          If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
              okl_api.set_message(
                 p_app_name => G_APP_NAME,
                 p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
              raise OKL_API.G_EXCEPTION_ERROR;
          End If;

    ELSE
          extract_params_loan_deal(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
		            NULL,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl,
                    p_orp_code ); -- p_orp_code -- RG: 11-Aug-2009: PRB Upgrade

          --Added by kthiruva for Debugging
          write_to_log('After the call to extract_params_loan, the return status is :'||x_return_status);
          If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
              okl_api.set_message(
                 p_app_name => G_APP_NAME,
                 p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
              raise OKL_API.G_EXCEPTION_ERROR;
          End If;

    END IF;
    print( l_api_name, 'end', x_return_status);
  end  extract_params_loan;

  --Added by kthiruva for Bug 5161075
  Procedure extract_params_loan_reamort(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id          IN  VARCHAR2,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2,
            x_csm_loan_header           OUT NOCOPY okl_create_streams_pvt.csm_loan_rec_type,
            x_csm_loan_lines_tbl        OUT NOCOPY okl_create_streams_pvt.csm_loan_line_tbl_type,
            x_csm_loan_levels_tbl       OUT NOCOPY okl_create_streams_pvt.csm_loan_level_tbl_type,
            x_csm_one_off_fee_tbl       OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl            OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_csm_stream_types_tbl      OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type)  AS

    --Added by kthiruva on 18-Apr-2006 for Bug 5161075
    --This cursor determines whether there have been any Paydowns on this Contract
    CURSOR is_payment_available_csr(chrId NUMBER,
                                    strmPurpose VARCHAR2)
    IS
    SELECT count(crl.id)
    FROM okc_rule_groups_b crg,
         okc_rules_b crl,
         okl_strm_type_v sty
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = 'LALEVL'
    AND crl.rule_information_category = 'LASLH'
    AND crg.dnz_chr_id = chrId
    AND crl.object1_id1 = sty.id
    AND sty.stream_type_purpose = strmPurpose
    ORDER BY crl.rule_information1;

    --Added by kthiruva on 18-Apr-2006 for Bug 5161075
    l_prin_cnt                   NUMBER := 0;
    l_ppd_cnt                    NUMBER := 0;


    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_LOAN_REAMORT';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

   Begin

    --Added by kthiruva on 18-Apr-2006
    --If there is a PPD defined on the Contract, then make a call to extract_params_ppd_rebook
    --else call extract_params_loan
    --Bug 5161075- Start of Changes
    OPEN is_payment_available_csr(p_chr_id,
                               'PRINCIPAL_PAYMENT');
    FETCH is_payment_available_csr INTO l_prin_cnt;
    CLOSE is_payment_available_csr;

    --Added by kthiruva on 18-Apr-2006
    --If there is a PPD defined on the Contract, then make a call to extract_params_ppd_rebook
    --else call extract_params_loan
    --Bug 5161075- Start of Changes
    OPEN is_payment_available_csr(p_chr_id,
                              'UNSCHEDULED_PRINCIPAL_PAYMENT');
    FETCH is_payment_available_csr INTO l_ppd_cnt;
    CLOSE is_payment_available_csr;

    IF l_prin_cnt > 0   THEN
          extract_params_loan_deal(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
		            NULL,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl,
                    NULL ); -- p_orp_code

          --Added by kthiruva for Debugging
          write_to_log('After the call to extract_params_loan_deal, the return status is :'||x_return_status);
          If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
              okl_api.set_message(
                 p_app_name => G_APP_NAME,
                 p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
              raise OKL_API.G_EXCEPTION_ERROR;
          End If;
      ELSE
          --Payment type on the contract is Rent
          --IF there is a PPD on the contract then call extract_params_loan_deal
          --otherwise call extract_params_ppd_rebook
          IF l_ppd_cnt = 0 THEN
              extract_params_loan_deal(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
		            NULL,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl,
                    NULL ); -- p_orp_code

              --Added by kthiruva for Debugging
              write_to_log('After the call to extract_params_loan_deal, the return status is :'||x_return_status);
              If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
                okl_api.set_message(
                   p_app_name => G_APP_NAME,
                   p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
                raise OKL_API.G_EXCEPTION_ERROR;
              End If;
           ELSIF l_ppd_cnt > 0 THEN

              --Payment on the contract is Rent. Therefore the PPD should also be incorporated
              --into the payment table that needs to be built to be sent to SuperTrump
              extract_params_ppd_rebook(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl);

              --Added by kthiruva for Debugging
              write_to_log('After the call to extract_params_ppd_rebook, the return status is :'||x_return_status);
              If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
                  okl_api.set_message(
                     p_app_name => G_APP_NAME,
                     p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
                  raise OKL_API.G_EXCEPTION_ERROR;
              End If;
           END IF;
      END IF;
      print( l_api_name, 'end', x_return_status);
  end  extract_params_loan_reamort;

-- Start modification 11i10 bakuchib
  PROCEDURE extract_params_lease_deal(
            p_api_version               IN  NUMBER,
            p_init_msg_list             IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id                    IN  VARCHAR2,
            p_deal_type                 IN  VARCHAR2,
            x_return_status             OUT NOCOPY VARCHAR2,
            x_msg_count                 OUT NOCOPY NUMBER,
            x_msg_data                  OUT NOCOPY VARCHAR2,
            x_csm_lease_header          OUT NOCOPY okl_create_streams_pub.csm_lease_rec_type,
            x_csm_one_off_fee_tbl       OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl            OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_req_stream_types_tbl      OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type,
            x_csm_line_details_tbl      OUT NOCOPY okl_create_streams_pub.csm_line_details_tbl_type,
            x_rents_tbl                 OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            p_orp_code                  IN  VARCHAR2 DEFAULT NULL ) AS

    l_api_name		CONSTANT  VARCHAR2(30) := 'EXTRACT_PARAMS_LEASE_DEAL';
    l_api_version	CONSTANT  NUMBER	      := 1;
    l_return_status	          VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    lv_fed_only                   VARCHAR2(3) := 'N';
    ln_value                      NUMBER := 0;
    lv_fed_only_tax_book          OKL_TXD_ASSETS_B.TAX_BOOK%TYPE := NULL;
    lv_mg_tax_yn                  VARCHAR2(3) := 'N';
    ln_org_id                     okc_k_headers_b.authoring_org_id%TYPE;
    lv_currency_code              okc_k_headers_b.currency_code%TYPE;
    l_rnd_basis_percent           NUMBER;
    l_level_type                  NUMBER;
    l_strm_name                   VARCHAR2(200);
    ln_fin_yn                     NUMBER := 0;
    i                             BINARY_INTEGER := 0;
    j                             BINARY_INTEGER := 0;
    k                             BINARY_INTEGER := 0;
    l                             BINARY_INTEGER := 0;
    m                             BINARY_INTEGER := 0;
    idx                           BINARY_INTEGER := 0;
    l_basis_percent               NUMBER;
    styid                         NUMBER;
    l_salvage                     NUMBER;
    l_purchase_option             VARCHAR2(256);
    l_deal_type                   VARCHAR2(256);
    l_purchase_option_amount      NUMBER;
    l_msg_count                   Number;
    l_msg_data                    varchar2(2000);
    l_chr_id                      Number := TO_NUMBER(p_chr_id);
    l_cle_id                      Number;
    l_rgd_code                    Varchar2(30) := 'LAPSTH';
    l_rdf_code                    Varchar2(30) := 'LASTRM';
    l_rdf_name                    Varchar2(80) := 'xxx';
    l_id1                         Varchar2(40);
    l_id2                         Varchar2(200);
    l_name                        Varchar2(200);
    l_description                 Varchar2(2000);
    l_status                      Varchar2(1);
    l_start_date                  date;
    l_end_date                    date;
    l_org_id                      Number;
    l_inv_org_id                  Number;
    l_book_type_code              Varchar2(15);
    l_select                      Varchar2(2000);
    l_msg_index_out               Number;
    lv_diff_date                  VARCHAR2(3) := 'N';
    l_value                       OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_tradein                     OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_capreduc                    OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_feecap                      OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_capint                      OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_discount                    OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_corp_dep_cost               OKL_TXL_ASSETS_B.DEPRECIATION_COST%TYPE := 0;
    l_tax_dep_cost                OKL_TXD_ASSETS_B.COST%TYPE := 0;
    l_lease_tax_owner             okc_rules_b.rule_information1%TYPE := NULL;
    lx_no_data_found              BOOLEAN;
    --  l_sty_id                      NUMBER;
    l_sty_id                      strm_rec_type;
    l_down_payment_sty_id         strm_rec_type;
    l_dummy_sty_id                strm_rec_type;
    l_pricing_name                VARCHAR2(40);

    l_dependent_sty_id			  NUMBER;
    l_strm_type_id_tbl okl_strm_type_id_tbl_type;
    l_sub_amt                  OKL_K_LINES.AMOUNT%TYPE := 0;
    l_sub_override_amt         OKL_K_LINES.SUBSIDY_OVERRIDE_AMOUNT%TYPE := 0;


    -- To check if the chr_id has Financed fee feetype defined
    CURSOR l_financed_type_csr (chrId NUMBER)
    IS
    SELECT 1
    FROM dual
    WHERE EXISTS (SELECT 1
                  FROM okc_k_lines_b cle,
                       okc_line_styles_b lse,
                       okl_k_lines kle
                  WHERE cle.dnz_chr_id = chrId
                  AND cle.lse_id = lse.id
                  AND lse.lty_code = 'FEE'
                  AND cle.id = kle.id
                  AND kle.fee_type in ('ROLLOVER', 'FINANCED'));
    -- get the currency_code and Authoring_org_id
    -- from okc_k_headers_b
    CURSOR get_org_id(p_chr_id  okc_k_headers_b.id%TYPE)
    IS
    SELECT authoring_org_id,
           currency_code
    FROM okc_k_headers_b
    WHERE id = p_chr_id;
    -- get the Lease Contract Header info
    CURSOR l_hdr_csr_lease(chrId  NUMBER)
    IS
    SELECT chr.orig_system_source_code,
           chr.start_date,
           chr.end_date,
           chr.template_yn,
           chr.authoring_org_id,
           khr.expected_delivery_date,
           chr.inv_organization_id,
           khr.deal_type,
           pdt.id  pid,
           NVL(pdt.reporting_pdt_id, -1) report_pdt_id,
           chr.currency_code currency_code,
           khr.term_duration term
    FROM okc_k_headers_v chr,
         okl_k_headers khr,
         okl_products_v pdt
    WHERE khr.id = chr.id
    AND chr.id = chrId
    AND khr.pdt_id = pdt.id(+);
    -- get the Lease Header rule information
    CURSOR l_hdrrl_csr_lease(rgcode okc_rule_groups_b.rgd_code%TYPE,
                             rlcat  okc_rules_b.rule_information_category%TYPE,
                             chrId NUMBER)
    IS
    SELECT crl.object1_id1,
           crl.rule_information1,
           crl.rule_information2,
           crl.rule_information3,
           crl.rule_information4,
           crl.rule_information5,
           crl.rule_information6,
           crl.rule_information10,
           crl.rule_information13,
           crl.rule_information11
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId;
    -- get the Lease install based location
    CURSOR ib_csr_lease (chrId NUMBER)
    IS
    SELECT DISTINCT hl.country country
    FROM hz_locations hl,
         hz_party_sites hps,
         hz_party_site_uses hpsu,
         okl_txl_itm_insts iti,
         okc_line_styles_b lse_ib,
         okc_k_lines_b cle_ib
    WHERE cle_ib.dnz_chr_id = chrId
    AND cle_ib.lse_id = lse_ib.id
    AND lse_ib.lty_code = 'INST_ITEM'
    AND iti.kle_id = cle_ib.id
    AND iti.object_id1_new = hpsu.party_site_use_id
    AND iti.object_id2_new = '#'
    AND hpsu.party_site_id = hps.party_site_id
    AND hps.location_id = hl.location_id;
    -- Get the stream type id
    CURSOR l_strmid_csr_lease (strmName VARCHAR2)
    IS
    SELECT id styid
    FROM okl_strm_type_tl
    WHERE LANGUAGE = 'US'
    AND NAME = strmName;
    -- get the lease Contract line info
    -- Modified by kthiruva on 26-Aug-05
    -- Added trade-in amount and expected funding date to the Select clause of the
    -- cursor for Pricing Enhancements
    CURSOR l_line_rec_csr_lease(chrid NUMBER, lnetype VARCHAR2)
    IS
    SELECT kle.id,
           kle.oec,
           kle.residual_code,
           kle.capital_amount,
           kle.delivered_date,
           kle.date_funding_required,
           kle.residual_grnty_amount,
           kle.date_funding,
           kle.date_terminated,
           kle.residual_value,
           kle.date_delivery_expected,
           kle.orig_system_id1 old_line_id,
           kle.amount,
           kle.price_negotiated,
           kle.start_date,
           kle.end_date,
           kle.orig_system_id1,
           kle.fee_type,
           kle.initial_direct_cost,
           tl.item_description,
           tl.name,
           sts.ste_code,
           --Added for Pricing Enhancements
           kle.tradein_amount,
           kle.date_funding_expected,
           -- Added for Down Payment Enhancement
           kle.capital_reduction,
           kle.capitalize_down_payment_yn,
           kle.orig_contract_line_id --sechawla 10-jul-09 PRB ESG enhancements : added
    FROM okl_k_lines_full_v kle,
         okc_line_styles_b lse,
         okc_k_lines_tl tl,
         okc_statuses_b sts
    WHERE kle.lse_id = lse.id
    AND lse.lty_code = lnetype
    AND tl.id = kle.id
    AND tl.language = userenv('LANG')
    AND kle.dnz_chr_id = chrid
    AND sts.code = kle.sts_code
    AND sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED');
    -- get discount amount on the line
    CURSOR get_dis_amt_csr_lease(p_chr_id NUMBER, p_cle_id NUMBER)
    IS
    SELECT kle_sub.amount, kle_sub.SUBSIDY_OVERRIDE_AMOUNT
    FROM okl_subsidies_b subb,
         okc_k_lines_b cle_fin,
         okc_line_styles_b lse_fin,
         okc_k_lines_b cle_sub,
         okl_k_lines kle_sub,
         okc_line_styles_b lse_sub
    WHERE cle_fin.id = p_cle_id
    AND cle_fin.dnz_chr_id = p_chr_id
    AND cle_sub.id = kle_sub.id
    AND cle_sub.lse_id = lse_sub.id
    AND lse_sub.lty_code = 'SUBSIDY'
    AND subb.id = kle_sub.subsidy_id
    AND cle_fin.id = cle_sub.cle_id
    AND cle_fin.lse_id = lse_fin.id
    AND lse_fin.lty_code = 'FREE_FORM1'
    AND subb.accounting_method_code = 'NET';
    -- get the lease setup values for tax book and coporate book
    CURSOR l_txtrans_csr_lease (Book  Varchar2)
    IS
    SELECT trns.value,
           books.book_type_code
    FROM okl_sgn_translations trns,
         fa_book_controls books
    WHERE trns.jtot_object1_code = 'FA_BOOK_CONTROLS'
    AND trns.object1_id1 = books.book_type_code
    AND books.book_type_code = Book
    AND trns.sgn_code = 'STMP';
    -- get the lease Line rule information
    CURSOR l_slh_csr_lease(rgcode okc_rule_groups_b.rgd_code%TYPE,
                     rlcat  okc_rules_b.rule_information_category%TYPE,
                     chrId NUMBER,
                     cleId NUMBER )
    IS
    SELECT crl.id slh_id,
           crl.object1_id1,
           crl.rule_information1,
           crl.rule_information2,
           crl.rule_information3,
           crl.rule_information5,
           crl.rule_information6,
           crl.rule_information7,
           crl.rule_information8,
           crl.rule_information13,
           crl.rule_information10
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    ORDER BY crl.rule_information1;
    -- get Stream name
    CURSOR strm_name_csr_lease (styid NUMBER)
    IS
    SELECT tl.name name,
	       stm.stream_type_purpose stream_type_purpose,
           stm.stream_type_class stream_type_class,
           tl.description alloc_basis,
           stm.capitalize_yn capitalize_yn,
           stm.periodic_yn  periodic_yn
    FROM okl_strm_type_b stm,
         okl_strm_type_tl tl
    WHERE tl.id = stm.id
    AND tl.language = 'US'
    AND stm.id = styid;
    -- get the self referencing Line based rule information
    CURSOR l_sll_csr_lease(rlgpId NUMBER,
                    rgcode okc_rule_groups_b.rgd_code%TYPE,
                    rlcat  okc_rules_b.rule_information_category%TYPE,
                    chrId  NUMBER,
                    cleId  NUMBER )
    IS
    SELECT crl.object1_id1,
           crl.rule_information1,
           crl.rule_information2,
           crl.rule_information3,
           crl.rule_information5,
           crl.rule_information6,
           crl.rule_information7,
           crl.rule_information8,
           crl.rule_information13,
           crl.rule_information10
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crl.object2_id1 = rlgpId
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    ORDER BY FND_DATE.canonical_to_date(crl.rule_information2);

    --mansrini : Code for VR build
    CURSOR  get_day_conv_on_contrct
    IS
    SELECT
--Added by srsreeni for bug6076113
--            rate_params.days_in_a_year_code,
--            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code
            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code,
            rate_params.days_in_a_year_code
--srsreeni bug6076113 ends
    FROM    okl_k_rate_params rate_params
    WHERE   khr_id = p_chr_id;

    CURSOR  get_day_conv_on_sgt
    IS
    SELECT  DECODE(gts.days_in_month_code,'30','360',gts.days_in_month_code) days_in_month_code,
            gts.days_in_yr_code
    FROM
            okl_k_headers khr,
            okl_products_v pdt,
            okl_ae_tmpt_sets_v aes,
            OKL_ST_GEN_TMPT_SETS gts
    WHERE
            khr.pdt_id = pdt.id AND
            pdt.aes_id = aes.id AND
            aes.gts_id = gts.id AND
            khr.id  = p_chr_id;


    -- Code added by HKPATEL for user defined streams
    -- Accrual Streams for Reporting product

    --l_dependent_rep_sty_rec dependent_rep_sty_id_csr%ROWTYPE;

l_dependent_sty_name VARCHAR2(30);

  -- nikshah -- Bug # 5484903 Fixed,
  -- Removed CURSOR primary_sty_id_csr definition


	--added by bkatraga for residual streams. Bug 4274539
	l_primary_sty_id  OKL_ST_GEN_TMPT_LNS.PRIMARY_STY_ID%TYPE;

	--To get the styid for primary stream purpose Residual Value
	CURSOR get_residual_primary_sty_id (l_pdt_id NUMBER, l_contract_start_date DATE)
	IS
	SELECT PRIMARY_STY_ID
	FROM OKL_STRM_TMPT_LINES_UV STL
	WHERE STL.PRIMARY_YN = 'Y'
	AND STL.PDT_ID = l_pdt_id
	AND (STL.START_DATE <= l_contract_start_date)
	AND (STL.END_DATE >= l_contract_start_date OR STL.END_DATE IS NULL)
	AND	PRIMARY_STY_PURPOSE = 'RESIDUAL_VALUE';
	-- end bkatraga


	l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;

	-- Added code ends here


    l_pdtv_rec                    pdtv_rec_type;
    lx_pdt_param_rec              pdt_param_rec_type;
    l_ast_dtl_tbl                 ast_dtl_tbl_type;
    l_csm_lease_header            okl_create_streams_pub.csm_lease_rec_type;
    l_csm_one_off_fee_tbl         okl_create_streams_pub.csm_one_off_fee_tbl_type;
    l_csm_periodic_expenses_tbl   okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_csm_yields_tbl              okl_create_streams_pub.csm_yields_tbl_type;
    l_csm_stream_types_tbl        okl_create_streams_pub.csm_stream_types_tbl_type;
    l_req_stream_types_tbl        okl_create_streams_pub.csm_stream_types_tbl_type;
    l_csm_line_details_tbl        okl_create_streams_pub.csm_line_details_tbl_type;
    l_rents_tbl                   okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_line_rec                    l_line_rec_csr_lease%ROWTYPE;
    l_hdr_rec                     l_hdr_csr_lease%ROWTYPE;
    l_rl_rec                      l_sll_csr_lease%ROWTYPE;
    l_hdrrl_rec                   l_hdrrl_csr_lease%ROWTYPE;
    l_rl_rec1                     l_slh_csr_lease%ROWTYPE;
    l_txtrans_rec                 l_txtrans_csr_lease%ROWTYPE;
    l_fee_strm_type_rec           fee_strm_type_csr%ROWTYPE;
    l_strm_name_rec               strm_name_csr_lease%ROWTYPE;
    l_ib_rec                      ib_csr_lease%ROWTYPE;
    l_strmid_rec                  l_strmid_csr_lease%ROWTYPE;
    l_adrconv_rec                 l_adrconv_csr%ROWTYPE;
    l_days_in_month_code          OKL_ST_GEN_TMPT_SETS.days_in_month_code%type;
    l_days_in_yr_code 	  OKL_ST_GEN_TMPT_SETS.days_in_yr_code%type;

    -- Start fix for bug 6858487
    l_orig_chr_id       OKC_K_HEADERS_B.ID%TYPE;
    l_orig_cle_id       OKC_K_LINES_B.ID%TYPE;

    -- Get Line ID in rebook copy that was copied from LINE the original contract
    -- cp_rbk_chr_id is the rebook copy contract
    -- cp_ole_id is original contract line ID
    CURSOR c_get_orig_line_id (cp_rbk_chr_id IN okc_k_headers_b.id%type
                              , cp_ole_id IN OKC_K_LINES_B.ID%TYPE) is
       SELECT --cle.id new_cle_id
              cle.orig_system_id1
        FROM okc_k_lines_b cle
            ,okc_k_lines_b ole
        WHERE cle.dnz_chr_id=cp_rbk_chr_id
          and cle.id = cp_ole_id
          and ole.lse_id = cle.lse_id
          and ole.id=cle.orig_system_id1;

   -- End fix for bug 6858487
  l_rep_pdt_book        fa_books.book_type_code%TYPE; --sechawla bug 8464912 : added

  --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    cursor get_rebook_type is
    select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;
    l_PROSPECTIVE_REBOOK_YN  varchar2(1);


  BEGIN
    --Added by kthiruva for Debugging
    write_to_log('Inside procedure extract_params_lease_deal');

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;


    --sechawla 20-Jul-09 PRB ESG Enhancements : check rebook option
    open  get_rebook_type ;
    fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN;
    close get_rebook_type;

    -- Validate the payments
    --Added by kthiruva for Debugging
    write_to_log('Prior to the call to validate_payments');
    validate_payments(p_api_version    => p_api_version,
                      p_init_msg_list  => p_init_msg_list,
                      x_return_status  => x_return_status,
                      x_msg_count      => x_msg_count,
                      x_msg_data       => x_msg_data,
                      p_khr_id         => p_chr_id,
                      p_paym_tbl       => l_pay_tbl);

    --Added by kthiruva for Debugging
    write_to_log('After the call to validate_payments, the return status is :'||x_return_status);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    i := 0; j := 0; k := 0; l := 0; m := 0;

    OPEN  l_hdr_pdt_csr(p_chr_id);
    FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
    CLOSE l_hdr_pdt_csr;

    --get day convention info : mansrini
    OPEN  get_day_conv_on_contrct;
    FETCH get_day_conv_on_contrct INTO l_days_in_month_code,l_days_in_yr_code;
    CLOSE get_day_conv_on_contrct;

--Added by srsreeni for bug6076113
--    IF l_days_in_month_code IS NULL OR l_days_in_month_code IS NULL
    IF l_days_in_month_code IS NULL OR l_days_in_yr_code IS NULL
--srsreeni bug6076113 ends
    THEN
      OPEN  get_day_conv_on_sgt;
      FETCH get_day_conv_on_sgt INTO l_days_in_month_code,l_days_in_yr_code;
      CLOSE get_day_conv_on_sgt;
    END IF;


    -- get header info
    OPEN  l_hdr_csr_lease(p_chr_id);
    FETCH l_hdr_csr_lease into l_hdr_rec;
    IF l_hdr_csr_lease%NOTFOUND THEN
      --Added by kthiruva for Debugging
      write_to_log('Cursor l_hdr_csr_lease not found');
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr_lease;
    -- get header rule info
    OPEN  l_hdrrl_csr_lease('LATOWN', 'LATOWN', TO_NUMBER(p_chr_id));
    FETCH l_hdrrl_csr_lease into l_hdrrl_rec;
    IF l_hdrrl_csr_lease%NOTFOUND THEN
      --Added by kthiruva for Debugging
      write_to_log('Cursor l_hdrrl_csr_lease not found');
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdrrl_csr_lease;
    l_csm_lease_header.irs_tax_treatment_method := l_hdrrl_rec.RULE_INFORMATION1;
    l_lease_tax_owner := l_hdrrl_rec.RULE_INFORMATION1;
    IF p_deal_type IS NULL THEN
      l_deal_type := l_hdr_rec.deal_type;
    ELSE
      l_deal_type := p_deal_type;
    END IF;
    l_csm_lease_header.khr_id                     := p_chr_id;
    l_csm_lease_header.date_payments_commencement := l_hdr_rec.start_date;
    l_csm_lease_header.fasb_acct_treatment_method := l_deal_type;
    l_csm_lease_header.date_delivery              := l_hdr_rec.expected_delivery_date;
    l_csm_lease_header.term                       := l_hdr_rec.term;
    l_csm_lease_header.pdt_id                     := l_hdr_rec.pid;
    -- to send the right sif code
    OPEN l_financed_type_csr (chrId => p_chr_id);
    FETCH l_financed_type_csr INTO ln_fin_yn;
    CLOSE l_financed_type_csr;
    IF ln_fin_yn = 1 THEN
      l_csm_lease_header.sif_mode  := OKL_CREATE_STREAMS_PUB.G_MODE_BOTH;
    ELSIF ln_fin_yn = 0 THEN
      l_csm_lease_header.sif_mode  := OKL_CREATE_STREAMS_PUB.G_MODE_LESSOR;
    END IF;
    -- to get the locatin of the asset
    OPEN  ib_csr_lease(TO_NUMBER(p_chr_id));
    FETCH ib_csr_lease into l_ib_rec;
    IF ib_csr_lease%NOTFOUND THEN
      --Added by kthiruva for Debugging
      write_to_log('Cursor ib_csr_lease not found');
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE ib_csr_lease;
    l_csm_lease_header.country := l_ib_rec.country;
    IF p_orp_code IS NOT NULL
    THEN
      l_csm_lease_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_UPGRADE;
    ELSE
      l_csm_lease_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
    END IF;
    -- l_csm_lease_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
    l_csm_lease_header.rvi_yn := OKL_CREATE_STREAMS_PUB.G_FND_NO;
    -- get header rule info
    OPEN  l_hdrrl_csr_lease('LARVIN', 'LARVAU', TO_NUMBER(p_chr_id));
    FETCH l_hdrrl_csr_lease into l_hdrrl_rec;
    CLOSE l_hdrrl_csr_lease;
    IF l_hdrrl_rec.RULE_INFORMATION1 = 'Y' THEN
      IF(g_rep_req_yn = 'Y') THEN
        get_primary_stream_type(
           p_khr_id =>p_chr_id,
           p_pdt_id =>l_pdt_id_rec.report_pdt_id,
           p_primary_sty_purpose =>'RESIDUAL_VALUE_INSURANCE_PREMIUM',
           x_return_status => x_return_status,
           x_primary_sty_id =>l_sty_id );
        IF x_return_status = 'E' THEN
          x_return_status := 'S';
        END IF;
      ELSE
        get_primary_stream_type (
          p_khr_id => p_chr_id,
          p_primary_sty_purpose => 'RESIDUAL_VALUE_INSURANCE_PREMIUM',
          x_return_status => x_return_status,
          x_primary_sty_id =>l_sty_id
        );
        IF x_return_status = 'E' THEN
          x_return_status := 'S';
        END IF;
      END IF;
      IF (l_sty_id.id IS NOT NULL) THEN
         m := m + 1;
         --l_csm_stream_types_tbl(m).stream_type_id := l_strmid_rec.styid;
         l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
         l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
      END IF;
      l_csm_lease_header.rvi_yn := OKL_CREATE_STREAMS_PUB.G_FND_YES;
      -- get header rule info
      OPEN  l_hdrrl_csr_lease('LARVIN', 'LARVAM', TO_NUMBER(p_chr_id));
      FETCH l_hdrrl_csr_lease into l_hdrrl_rec;
      CLOSE l_hdrrl_csr_lease;
      l_csm_lease_header.rvi_rate := TO_NUMBER(nvl(l_hdrrl_rec.RULE_INFORMATION4,'0'));
    END IF;
    -- Purchase option,
    OPEN  l_hdrrl_csr_lease('AMTFOC', 'AMBPOC', TO_NUMBER(p_chr_id));
    FETCH l_hdrrl_csr_lease into l_hdrrl_rec;
    CLOSE l_hdrrl_csr_lease;
    l_purchase_option := l_hdrrl_rec.RULE_INFORMATION11;
    IF (l_hdrrl_rec.rule_information1 IS NOT NULL OR
        l_hdrrl_rec.rule_information1 <> okl_api.g_miss_char) AND
        LTRIM(RTRIM(l_hdrrl_rec.rule_information1)) = 'USE_FORMULA' AND
        (l_hdrrl_rec.rule_information3 IS NOT NULL OR
        l_hdrrl_rec.rule_information3 <> okl_api.g_miss_char) THEN
      -- Executing the formula defined
      --Added by kthiruva for Debugging
      write_to_log('Prior to the call to execute_formula');
      execute_formula(p_api_version   => l_api_version,
                      p_init_msg_list => p_init_msg_list,
                      x_return_status => l_return_status,
                      x_msg_count     => x_msg_count,
                      x_msg_data      => x_msg_data,
                      p_formula_name  => LTRIM(RTRIM(l_hdrrl_rec.rule_information3)),
                      p_contract_id   => p_chr_id,
                      p_line_id       => NULL,
                      x_value         => l_purchase_option_amount);
      --Added by kthiruva for Debugging
      write_to_log('After the call to execute_formula, the return status is :'||l_return_status);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    ELSIF (l_hdrrl_rec.rule_information1 IS NOT NULL OR
       l_hdrrl_rec.rule_information1 <> okl_api.g_miss_char) AND
       LTRIM(RTRIM(l_hdrrl_rec.rule_information1)) = 'USE_FIXED_AMOUNT' AND
       (l_hdrrl_rec.rule_information2 IS NOT NULL OR
       l_hdrrl_rec.rule_information2 <> okl_api.g_miss_char) THEN
      l_purchase_option_amount := TO_NUMBER(l_hdrrl_rec.RULE_INFORMATION2);
    ELSE
      l_purchase_option := 'NONE';
      l_purchase_option_amount := NULL;
    END IF;

    -- Added by bkatraga for bug 4194641
    IF(l_purchase_option IS NOT NULL AND l_purchase_option = 'FMV') THEN
      l_purchase_option_amount := NULL;
    END IF;
    -- end bkatraga

    -- Added by kthiruva for Stream Performance
    -- This cursor was moved outside the loop to improve performance
    -- Get the org id
    --Bug 4346646 - Start of Changes
    OPEN  get_org_id(p_chr_id => p_chr_id);
    FETCH get_org_id INTO ln_org_id,
                          lv_currency_code;
    IF get_org_id%NOTFOUND THEN
      --Added by kthiruva for Debugging
      write_to_log('Cursor get_org_id not found');
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
    CLOSE get_org_id;
    --Bug 4346646 - End of Changes

    -- fetching the line record
    --Added by kthiruva for Debugging
    write_to_log('Fetching the line details for the contract ');
    FOR l_line_rec in l_line_rec_csr_lease ( p_chr_id , 'FREE_FORM1') LOOP
      i := i + 1;
      l_csm_line_details_tbl(i).kle_asset_id := l_line_rec.id;

      ----Sechawla 7-aug-09 PRB ESG : Populate orig_contract_line_id

      if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_line_details_tbl(i).orig_contract_line_id := l_line_rec.orig_contract_line_id;
      END IF;

      l_csm_line_details_tbl(i).state_depre_dmnshing_value_rt := 0; -- TBD
      l_csm_line_details_tbl(i).book_depre_dmnshing_value_rt := 0; -- TBD
      l_csm_line_details_tbl(i).residual_guarantee_method := l_line_rec.residual_code;
      l_csm_line_details_tbl(i).fed_depre_dmnshing_value_rate := 0; -- TBD
      l_csm_line_details_tbl(i).purchase_option := l_purchase_option;
      l_csm_line_details_tbl(i).purchase_option_amount := l_purchase_option_amount;
      IF l_line_rec.ste_code = 'TERMINATED' THEN
        l_csm_line_details_tbl(i).residual_date := l_line_rec.date_terminated;
      ELSE
        l_csm_line_details_tbl(i).residual_date := NULL;
      END IF;
      IF l_line_rec.residual_value IS NULL THEN
        l_csm_line_details_tbl(i).residual_amount := 0;
      END IF;   -- Added by gboomina for BUG 4384784
      -- calling the asset mangement API
      -- to get the residual value of Terminated line
      -- Changed the ELSIF to IF by gboomina for BUG 4384784
      IF l_line_rec.ste_code = 'TERMINATED' THEN
        -- Start fix for bug 6858487
        retrive_orig_hdr_id(p_chr_id, l_orig_chr_id);
        IF l_orig_chr_id <> p_chr_id THEN
           OPEN c_get_orig_line_id(cp_rbk_chr_id => p_chr_id,
                                   cp_ole_id     => l_line_rec.id);
           FETCH c_get_orig_line_id INTO l_orig_cle_id;
           CLOSE c_get_orig_line_id;
        ELSE
           l_orig_cle_id := l_line_rec.id;
        END IF;
        l_csm_line_details_tbl(i).residual_amount := okl_am_util_pvt.get_actual_asset_residual(p_khr_id => l_orig_chr_id,
               p_kle_id => l_orig_cle_id);

      -- End fix for bug 6858487
      -- Changed the ELSE to ELSIF condition by gboomina for BUG 4384784
     ELSIF l_line_rec.residual_value IS NOT NULL THEN
        l_csm_line_details_tbl(i).residual_amount := l_line_rec.residual_value;
      END IF;
      IF l_line_rec.delivered_date IS NULL THEN
        l_csm_line_details_tbl(i).date_delivery := l_line_rec.start_date;
      ELSE
        l_csm_line_details_tbl(i).date_delivery := l_line_rec.delivered_date;
      END IF;
      l_csm_line_details_tbl(i).residual_guarantee_amount := l_line_rec.residual_grnty_amount;
      --Modified by kthiruva for Pricing Enhancements
      --Currently the funding date defaults to the start date for all asset lines
      --The funding date is now a user enterable value and hence date_funding should
      --obtain its value from the date_funding_expected column.
      l_csm_line_details_tbl(i).date_funding := NVL(l_line_rec.date_funding_expected,l_line_rec.start_date);

      l_csm_line_details_tbl(i).description := l_line_rec.item_description;

      -- we need to set the context since the records in
      -- OKL_SYS_ACCT_OPTS table are stored with regards to the context
      -- To calculate basis percent for Corp or tax book
      -- we need the Line capital amount.
      -- Now since new version of the pricing eng
      -- NET subsidies , amount of sudsidy is sent to
      -- pricing eng as percent so we exclude the discout as below
      -- Now we are fetching the line capital amount and not using the
      -- formulas.
      -- Get line Discount
      l_discount := 0;
         FOR l_subsidy_rec IN get_dis_amt_csr_lease(p_chr_id => p_chr_id, p_cle_id => l_line_rec.id) LOOP
            IF(l_subsidy_rec.SUBSIDY_OVERRIDE_AMOUNT IS NULL) THEN
               l_discount := l_discount + NVL(l_subsidy_rec.AMOUNT,0);
            ELSE
               l_discount := l_discount + l_subsidy_rec.SUBSIDY_OVERRIDE_AMOUNT;
            END IF;
         END LOOP;

      l_value  := l_line_rec.capital_amount;
      ln_value := l_value - NVL(l_discount,0); -- Bug# 7534196 - Subtract Net Subsidy

      --Made changes by bkatraga for bug 5243586
      --Commenting the code below as Trade-in amount is already deducted from the asset cost during authoring itself
      /*
      --Added by kthiruva for Pricing Enhancements
      --If a tradein_amount is defined on an asset, it needs to be deducted from
      --the asset cost
      IF l_line_rec.tradein_amount is not null THEN
        ln_value := ln_value - l_line_rec.tradein_amount;
      END IF;
      --End of Changes for Pricing Enhancements
      */
      --end changes by bkatraga

      -- Modified by RGOOTY Bug 4629365: Start
      l_csm_line_details_tbl(i).capitalize_down_payment_yn := l_line_rec.capitalize_down_payment_yn;
      -- Modified by RGOOTY Bug 4629365: End
      --Added by kthiruva on 15-Nov-2005 for the Down Payment CR
      --Bug 4738011 - Start of Changes
      IF l_line_rec.capitalize_down_payment_yn = 'Y' THEN
         l_csm_line_details_tbl(i).down_payment_amount := l_line_rec.capital_reduction;
         --If the Down Payment is capitalised then we fetch and request stream of Type Capital Reduction
--vdamerla Bug6149951 starts
       IF l_line_rec.ste_code <> 'TERMINATED' THEN

         get_primary_stream_type
          (
           p_khr_id => p_chr_id,
           p_primary_sty_purpose => 'CAPITAL_REDUCTION',
           x_return_status => x_return_status,
           x_primary_sty_id =>l_sty_id
           );
         IF x_return_status = 'E' THEN
            x_return_status := 'S';
         END IF;

         IF (l_sty_id.id IS NOT NULL ) THEN
            m := m + 1;
            l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
            l_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
            l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
         END IF;
      END IF;
--vdamerla Bug6149951 ends
      END IF;

      --Modified by kthiruva for the Down Payment CR
      --Deducting the Capital Reduction is already being done by Authoring.Hence,commenting the code
      /*IF l_line_rec.capitalize_down_payment_yn = 'Y' AND l_line_rec.capital_reduction IS NOT NULL THEN
          l_csm_line_details_tbl(i).asset_cost := ln_value - l_line_rec.capital_reduction;
      ELSE
          l_csm_line_details_tbl(i).asset_cost := ln_value;
      END IF;*/
      l_csm_line_details_tbl(i).asset_cost := l_value; -- Bug# 7534196 - Ensure Asset cost is passed to Supertrump as is
      --Bug 4738011 - End of Changes

      -- Now we are dealing with corp book and building
      -- Book Depreciation Stream info
      l_ast_dtl_tbl.delete;
      --Added by kthiruva for Debugging
      write_To_log('Prior to the call to okl_activate_asset_pvt.get_pricing_parameters');
      okl_activate_asset_pvt.get_pricing_parameters(
                            p_api_version   => p_api_version,
                            p_init_msg_list => p_init_msg_list,
                            x_return_status => x_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            p_chr_id        => p_chr_id,
                            p_cle_id        => l_line_rec.id,
                            x_ast_dtl_tbl   => l_ast_dtl_tbl);
      --Added by kthiruva for Debugging
      write_To_log('After the call to okl_activate_asset_pvt.get_pricing_parameters, return status is :'||x_return_status);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
      END IF;
      -- bug 4194673 fixed by HKPATEL
      IF l_ast_dtl_tbl.COUNT > 0 THEN
        l_book_type_code := NULL;
        FOR j IN l_ast_dtl_tbl.FIRST..l_ast_dtl_tbl.LAST LOOP
          IF l_ast_dtl_tbl(j).book_class = 'CORPORATE'  THEN
            l_book_type_code := l_ast_dtl_tbl(j).book_type_code;
          END IF;
        END LOOP;
      END IF;

      IF l_ast_dtl_tbl.COUNT > 0 THEN
        FOR j IN l_ast_dtl_tbl.FIRST..l_ast_dtl_tbl.LAST LOOP
          -- Thru this we will know if the there is reporting product or not
          -- and the g_rep_yn flag will let us know that there reporting streams
          -- requested so we try to generate the reporting dep streasm based on the
          -- the belwo condition.
          IF l_hdr_rec.report_pdt_id <> -1 AND
              g_rep_req_yn = 'Y' AND
              l_ast_dtl_tbl(j).book_class = 'TAX'  THEN
            l_pdtv_rec.id := l_hdr_rec.report_pdt_id;
            --Added by kthiruva for Debugging
            write_to_log('Prior to the call to okl_setupproducts_pvt.getpdt_parameters');
            okl_setupproducts_pvt.getpdt_parameters(
                                  p_api_version       => p_api_version,
                                  p_init_msg_list     => p_init_msg_list,
                                  x_return_status     => x_return_status,
                                  x_msg_count         => x_msg_count,
                                  x_msg_data          => x_msg_data,
                                  p_pdtv_rec          => l_pdtv_rec,
                                  x_no_data_found     => lx_no_data_found,
                                  p_pdt_parameter_rec => lx_pdt_param_rec);

            --Added by kthiruva for Debugging
            write_to_log('After the call to okl_setupproducts_pvt.getpdt_parameters, the return status is :'||x_return_status);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            -- bug 4194673 fixed by HKPATEL
            x_return_status := is_rep_pdt(--p_asset_number => l_line_rec.name,
                                          p_corp_book    => l_book_type_code,
                                          x_mg_tax_yn    => lv_mg_tax_yn);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
            -- If the reporting book is of deal type and if the
            -- if there is multi gaap tax book create in okl_txd_assets_b table
            -- then we go and generate the book dep streams for the Mg tax book
            -- else we do not generate stream for the Multi gaap
            IF lx_pdt_param_rec.deal_type = 'LEASEOP' AND lv_mg_tax_yn = 'Y' THEN
               --sechawla bug 8464912 : begin
              l_rep_pdt_book := OKL_SYSTEM_PARAMS_ALL_PUB.get_system_param_value(OKL_SYSTEM_PARAMS_ALL_PUB.G_RPT_PROD_BOOK_TYPE_CODE);
              IF(l_rep_pdt_book = l_ast_dtl_tbl(j).BOOK_TYPE_CODE) THEN
               --sechawla bug 8464912 : end

              -- Now we are determing the Basis percent for the corp book
              -- Basis percent = Depreciable Cost (for each asset defined corp book)
              --                / Total Asset Capital Cost
              l_basis_percent     := 0;
              l_rnd_basis_percent := 0;
              l_salvage           := 0;
              IF (l_ast_dtl_tbl(j).cost IS NULL OR
                l_ast_dtl_tbl(j).cost = 0 ) THEN
                l_basis_percent := 0;
              ELSE
                -- Now we are including Trade In, Capital Reduction, Capitalized Fee,
                -- Capitalized Interest and Discount for getting the corporate depreciation cost
                -- Now since new version of the pricing eng
                -- NET subsidies , amount of sudsidy is sent to
                -- pricing eng as percent so we exclude the discout as below
                --  l_tax_dep_cost := l_ast_dtl_tbl(j).cost - NVL(l_tradein,0) - NVL(l_capreduc,0) + NVL(l_feecap,0) + NVL(l_capint,0);
                --Commneted the above by virtue of Authoring API
                -- getting the Actual cost going into /in FA
                l_tax_dep_cost := l_ast_dtl_tbl(j).cost - NVL(l_discount,0); -- Bug# 7534196 - Subtract Net Subsidy
                l_basis_percent := (NVL(l_tax_dep_cost,0)/ln_value) * 100;
              END IF;
              IF l_basis_percent <> 0 THEN
                -- Now we round the Basis Percent
                l_rnd_basis_percent := OKL_ACCOUNTING_UTIL.round_amount(p_currency_code => lv_currency_code,
                                                                        p_amount  => l_basis_percent);
              ELSIF l_basis_percent = 0 THEN
                l_rnd_basis_percent := 0;
              END IF;
              -- Now we are determing the Salvage value
              l_salvage := NVL(l_ast_dtl_tbl(j).salvage_value,0);
              IF( l_salvage = 0) Then
                l_salvage := (NVL(l_ast_dtl_tbl(j).percent_salvage_value,0) * ln_value)/100;
              END IF;
              l_csm_line_details_tbl(i).book_adr_convention  := l_ast_dtl_tbl(j).prorate_convention_code;
              l_csm_line_details_tbl(i).book_term            := l_ast_dtl_tbl(j).life_in_months;
              l_csm_line_details_tbl(i).book_method          := TO_CHAR(l_ast_dtl_tbl(j).deprn_method_id);
              l_csm_line_details_tbl(i).book_salvage         := l_salvage;
              l_csm_line_details_tbl(i).date_book            := l_ast_dtl_tbl(j).in_service_date;
              l_csm_line_details_tbl(i).book_basis_percent   := l_rnd_basis_percent;
              -- AND condition added below by HKPATEL for bug 4194673
              IF l_lease_tax_owner = 'LESSOR' AND l_rnd_basis_percent <> 0 THEN
                IF(g_rep_req_yn = 'Y') THEN
                  get_primary_stream_type
                  (
                     p_khr_id =>p_chr_id,
                     p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                     p_primary_sty_purpose =>'BOOK_DEPRECIATION',
                     x_return_status => x_return_status,
                     x_primary_sty_id =>l_sty_id
                  );
                  IF x_return_status = 'E' THEN
                    x_return_status := 'S';
                  END IF;
                ELSE
                  get_primary_stream_type
                  (
                    p_khr_id => p_chr_id,
                    p_primary_sty_purpose => 'BOOK_DEPRECIATION',
                    x_return_status => x_return_status,
                    x_primary_sty_id =>l_sty_id
                  );
                  IF x_return_status = 'E' THEN
                    x_return_status := 'S';
                  END IF;
                END IF;
            --vdamerla Bug6149951 starts
              IF l_line_rec.ste_code <> 'TERMINATED' THEN
                IF (l_sty_id.id IS NOT NULL ) THEN
                  m := m + 1;
                  l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
                  l_csm_stream_types_tbl(m).pricing_name   := l_sty_id.pricing_name;
                  l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
                END IF;
               END IF;--srsreeni Bug6149951 ends
              END IF;
             END IF; --sechawla bug 8464912
            END IF;
          ELSIF l_ast_dtl_tbl(j).book_class = 'CORPORATE' AND
                g_rep_req_yn = 'N' THEN
            -- Now we are determing the Basis percent for the corp book
            -- Basis percent = Depreciable Cost (for each asset defined corp book)
            --                / Total Asset Capital Cost
            IF (l_ast_dtl_tbl(j).cost IS NULL OR
              l_ast_dtl_tbl(j).cost = 0 ) THEN
              l_basis_percent := 0;
            ELSE
              -- Now we are including Trade In, Capital Reduction, Capitalized Fee,
              -- Capitalized Interest and Discount for getting the corporate depreciation cost
              -- Now since new version of the pricing eng
              -- NET subsidies , amount of sudsidy is sent to
              -- pricing eng as percent so we exclude the discout as below
              -- l_corp_dep_cost := l_ast_dtl_tbl(j).cost - NVL(l_tradein,0) - NVL(l_capreduc,0) + NVL(l_feecap,0) + NVL(l_capint,0);
              --Commneted the above by virtue of Authoring API
              -- getting the Actual cost going into /in FA
              l_corp_dep_cost := l_ast_dtl_tbl(j).cost - NVL(l_discount,0);
              l_basis_percent := (NVL(l_corp_dep_cost,0) / ln_value) * 100;
            END IF;
            IF l_basis_percent <> 0 THEN
              -- Now we round the Basis Percent
              l_rnd_basis_percent := OKL_ACCOUNTING_UTIL.round_amount(p_currency_code => lv_currency_code,
                                                                      p_amount  => l_basis_percent);
            ELSIF l_basis_percent = 0 THEN
              l_rnd_basis_percent := 0;
            END IF;
            -- Now we are determing the Salvage value
            l_salvage := nvl(l_ast_dtl_tbl(j).salvage_value,0);
            IF( l_salvage = 0) Then
              l_salvage := (NVL(l_ast_dtl_tbl(j).percent_salvage_value,0) * ln_value)/100.00;
            END IF;
            l_csm_line_details_tbl(i).book_adr_convention  := l_ast_dtl_tbl(j).prorate_convention_code;
            l_csm_line_details_tbl(i).book_term            := l_ast_dtl_tbl(j).life_in_months;
            l_csm_line_details_tbl(i).book_method          := TO_CHAR(l_ast_dtl_tbl(j).deprn_method_id);
            l_csm_line_details_tbl(i).book_salvage         := l_salvage;
            l_csm_line_details_tbl(i).date_book            := l_ast_dtl_tbl(j).in_service_date;
            l_csm_line_details_tbl(i).book_basis_percent   := l_rnd_basis_percent;
            -- AND condition added below by HKPATEL for bug 4194673
            IF l_lease_tax_owner = 'LESSOR' AND l_rnd_basis_percent <> 0 THEN
-- vdamerla  Forward Port Bug6149951
--vdamerla Bug6149951 starts
      IF l_line_rec.ste_code <> 'TERMINATED' THEN

              IF(g_rep_req_yn = 'Y') THEN
                get_primary_stream_type
                (
                   p_khr_id =>p_chr_id,
                   p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                   p_primary_sty_purpose =>'BOOK_DEPRECIATION',
                   x_return_status => x_return_status,
                   x_primary_sty_id =>l_sty_id
                );
                IF x_return_status = 'E' THEN
                  x_return_status := 'S';
                END IF;
              ELSE
                get_primary_stream_type
                (
                  p_khr_id => p_chr_id,
                  p_primary_sty_purpose => 'BOOK_DEPRECIATION',
                  x_return_status => x_return_status,
                  x_primary_sty_id =>l_sty_id
                );
                IF x_return_status = 'E' THEN
                  x_return_status := 'S';
                END IF;
              END IF;
              --l_csm_stream_types_tbl(m).stream_type_id := l_strmid_rec.styid;
              IF (l_sty_id.id IS NOT NULL ) THEN
                m := m + 1;
                l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
                l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
                l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
              END IF;
      -- vdamerla Forward Port Bug6149951
      END IF;--vdamerla Bug6149951 ends
            END IF;
          ELSIF l_ast_dtl_tbl(j).book_class = 'TAX' AND
                g_rep_req_yn = 'N' THEN
            -- Now we are changing the approach for generating Tax book Depreciation streams
            -- by the virtue of Bug#3447917 so changes because of bug#3066346 is reverted.
            -- We need to validate tax book for a given asset number
            -- and also validate if there has been setups done for these
            -- tax books
            -- Now we are dealing with Tax book and building
            -- Federal/State Depreciation Stream info
            -- Since there could be more than one tax book we need to loop for each
            -- tax book
            -- Now we are determing the Basis percent for the Tax book
            -- Basis percent = Depreciable Cost (for each asset defined tax book)
            --                / Total Asset Capital Cost
            -- Intialize the variable
            l_basis_percent     := 0;
            l_rnd_basis_percent := 0;
            l_salvage           := 0;
            IF (l_ast_dtl_tbl(j).cost IS NULL OR
                l_ast_dtl_tbl(j).cost = 0) THEN
                l_basis_percent := 0;
            ELSE
              -- Now we are including Trade In, Capital Reduction, Capitalized Fee,
              -- Capitalized Interest and Discount for getting the Tax book cost
              -- Now since new version of the pricing eng
              -- NET subsidies , amount of sudsidy is sent to
              -- pricing eng as percent so we exclude the discout as below
              -- l_tax_dep_cost := l_ast_dtl_tbl(j).cost - NVL(l_tradein,0) - NVL(l_capreduc,0) + NVL(l_feecap,0) + NVL(l_capint,0);
              --Commneted the above by virtue of Authoring API
              -- getting the Actual cost going into /in FA
              l_tax_dep_cost := l_ast_dtl_tbl(j).cost - NVL(l_discount,0); -- Bug# 7534196 - Subtract Net Subsidy
              l_basis_percent := (NVL(l_tax_dep_cost,0) / ln_value) * 100;
            END IF;
            IF l_basis_percent <> 0 THEN
              -- Now we round the Basis Percent
              l_rnd_basis_percent := OKL_ACCOUNTING_UTIL.round_amount(p_currency_code => lv_currency_code,
                                                                      p_amount    => l_basis_percent);
            ELSIF l_basis_percent = 0 THEN
              l_rnd_basis_percent := 0;
            END IF;
            -- Now we are determing the Salvage value
            l_salvage := nvl(l_ast_dtl_tbl(j).salvage_value,0);
            IF( l_salvage = 0) Then
              l_salvage := (NVL(l_ast_dtl_tbl(j).percent_salvage_value,0) * ln_value)/100;
            END IF;
            -- we build both federal and state Depreciation Stream
            FOR l_txtrans_rec in l_txtrans_csr_lease (l_ast_dtl_tbl(j).book_type_code) LOOP
              IF l_txtrans_rec.value IS NOT NULL AND
                 l_txtrans_rec.value = 'FEDERAL' THEN
                l_csm_line_details_tbl(i).fed_depre_adr_conve     := l_ast_dtl_tbl(j).prorate_convention_code;
                l_csm_line_details_tbl(i).fed_depre_term          := l_ast_dtl_tbl(j).life_in_months;
                l_csm_line_details_tbl(i).fed_depre_method        := TO_CHAR(l_ast_dtl_tbl(j).deprn_method_id);
                l_csm_line_details_tbl(i).fed_depre_salvage       := l_salvage;
                l_csm_line_details_tbl(i).date_fed_depre          := l_ast_dtl_tbl(j).in_service_date;
                l_csm_line_details_tbl(i).fed_depre_basis_percent := l_rnd_basis_percent;
                IF l_lease_tax_owner = 'LESSOR' THEN
-- vdamerla Forward Port Bug61130937
--vdamerla Bug61130937 starts
    IF l_line_rec.ste_code <> 'TERMINATED' THEN
                  IF(g_rep_req_yn = 'Y') THEN
                    get_primary_stream_type
                    (
                      p_khr_id =>p_chr_id,
                      p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                      p_primary_sty_purpose =>'FEDERAL_DEPRECIATION',
                      x_return_status => x_return_status,
                      x_primary_sty_id =>l_sty_id
                    );
                    IF x_return_status = 'E' THEN
                      x_return_status := 'S';
                    END IF;
                  ELSE
                    get_primary_stream_type
                    (
                      p_khr_id => p_chr_id,
                      p_primary_sty_purpose => 'FEDERAL_DEPRECIATION',
                      x_return_status => x_return_status,
                      x_primary_sty_id =>l_sty_id
                    );
                    IF x_return_status = 'E' THEN
                      x_return_status := 'S';
                    END IF;
                  END IF;
                  --l_csm_stream_types_tbl(m).stream_type_id := l_strmid_rec.styid;
                  IF (l_sty_id.id IS NOT NULL ) THEN
                    m := m + 1;
                    l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
                    l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
                    l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
                  END IF;
                  END IF; --vdamerla Bug6149951 ends
                END IF;
              ELSIF l_txtrans_rec.value IS NOT NULL AND
                    l_txtrans_rec.value = 'STATE' THEN
                l_csm_line_details_tbl(i).state_depre_adr_convent   := l_ast_dtl_tbl(j).prorate_convention_code;
                l_csm_line_details_tbl(i).state_depre_term          := l_ast_dtl_tbl(j).life_in_months;
                l_csm_line_details_tbl(i).state_depre_method        := TO_CHAR(l_ast_dtl_tbl(j).deprn_method_id);
                l_csm_line_details_tbl(i).state_depre_salvage       := l_salvage;
                l_csm_line_details_tbl(i).date_state_depre          := l_ast_dtl_tbl(j).in_service_date;
                l_csm_line_details_tbl(i).state_depre_basis_percent := l_rnd_basis_percent;
                IF l_lease_tax_owner = 'LESSOR' THEN
--vdamerla Bug61130937 starts
                IF l_line_rec.ste_code <> 'TERMINATED' THEN
                  IF(g_rep_req_yn = 'Y') THEN
                    get_primary_stream_type
                    (
                      p_khr_id =>p_chr_id,
                      p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                      p_primary_sty_purpose =>'STATE_DEPRECIATION',
                      x_return_status => x_return_status,
                      x_primary_sty_id =>l_sty_id
                    );
                    IF x_return_status = 'E' THEN
                      x_return_status := 'S';
                    END IF;
                  ELSE
                    get_primary_stream_type
                    (
                      p_khr_id => p_chr_id,
                      p_primary_sty_purpose => 'STATE_DEPRECIATION',
                      x_return_status => x_return_status,
                      x_primary_sty_id =>l_sty_id
                    );
                    IF x_return_status = 'E' THEN
                      x_return_status := 'S';
                    END IF;
                  END IF;
                  --l_csm_stream_types_tbl(m).stream_type_id := l_strmid_rec.styid;
                  IF (l_sty_id.id IS NOT NULL ) THEN
                    m := m + 1;
                    l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
                    l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
                    l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
                  END IF;
                END IF;--vdamerla Bug6149951 ends
                END IF;
              END IF;
            END LOOP;
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
            END IF;
          END IF;
        END LOOP;
      ELSE
        okl_api.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Asset Number : '||l_line_rec.name);
        x_return_status := OKL_API.G_RET_STS_ERROR;
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
      END IF;


      -- added by bkatraga for residual streams. Bug 4274539
      IF(l_line_rec.residual_value IS NOT NULL) THEN
        -- To get the primary stream purpose Residual Value id into l_primary_sty_id
        OPEN  get_residual_primary_sty_id(l_hdr_rec.pid, l_hdr_rec.start_date);
        FETCH get_residual_primary_sty_id INTO l_primary_sty_id;
        CLOSE get_residual_primary_sty_id;
        -- To check if the product is reporting one or not
--vdamerla Bug61130937 starts
       IF l_line_rec.ste_code <> 'TERMINATED' THEN

        IF(g_rep_req_yn = 'Y') THEN
          -- To get the dependant stream types of purpose Residual Value which have pricing name defined
          get_dependent_stream_types
          (
             p_khr_id =>p_chr_id,
              p_pdt_id =>l_pdt_id_rec.report_pdt_id,
             p_primary_sty_id =>l_primary_sty_id,
             x_return_status => x_return_status,
             x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        ELSE
          get_dependent_stream_types
          (
            p_khr_id =>p_chr_id,
            p_primary_sty_id =>l_primary_sty_id,
            x_return_status => x_return_status,
            x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        END IF;
        -- Populate the dependant stream types
        IF l_strm_type_id_tbl.COUNT > 0 THEN
          FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
            m := m + 1;
            l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
            l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
            l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
          END LOOP;
        END IF;
       END IF;--vdamerla Bug6149951 ends
      END IF;
      -- end bkatraga
      FOR l_rl_rec1 in l_slh_csr_lease ( 'LALEVL', 'LASLH', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
        l_level_type := l_rl_rec1.object1_id1;
        OPEN  strm_name_csr_lease ( l_level_type );
        FETCH strm_name_csr_lease into l_strm_name_rec;
        IF strm_name_csr_lease%NOTFOUND THEN
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE strm_name_csr_lease;
        l_strm_name := l_strm_name_rec.stream_type_purpose;
--Added by srsreeni for bug5841892
--        m := m + 1;
--        l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
--bug5841892 end of changes
--vdamerla Bug61130937 starts
        IF l_line_rec.ste_code <> 'TERMINATED' THEN
        get_primary_pricing_name
        (
          p_khr_id =>p_chr_id,
          p_sty_id =>l_level_type,
          x_return_status =>x_return_status,
          x_primary_pricing_name =>l_pricing_name
        );
        IF x_return_status = 'E' THEN
         x_return_status := 'S';
        END IF;
--Added by srsreeni for bug5841892
	if l_pricing_name is not null then
        m := m + 1;
        l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
        l_csm_stream_types_tbl(m).pricing_name   := l_pricing_name;
        l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
    end if;
--bug5841892 end of changes
        --Commented as we want to generate all the dependents of RENT streams
        IF(g_rep_req_yn = 'Y') THEN
          get_dependent_stream_types
          (
            p_khr_id =>p_chr_id,
            p_pdt_id =>l_pdt_id_rec.report_pdt_id,
            p_primary_sty_id =>l_level_type,
            x_return_status => x_return_status,
            x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        ELSE
          get_dependent_stream_types
          (
            p_khr_id =>p_chr_id,
            p_primary_sty_id =>l_level_type,
            x_return_status => x_return_status,
            x_dependent_sty_id =>l_strm_type_id_tbl
          );
          IF x_return_status = 'E' THEN
            x_return_status := 'S';
          END IF;
        END IF;
        IF l_strm_type_id_tbl.COUNT > 0 THEN
          FOR i IN l_strm_type_id_tbl.FIRST..l_strm_type_id_tbl.LAST LOOP
            m := m + 1;
            l_csm_stream_types_tbl(m).stream_type_id := l_strm_type_id_tbl(i).id;
            l_csm_stream_types_tbl(m).pricing_name := l_strm_type_id_tbl(i).pricing_name;
            l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
          END LOOP;
        END IF;
        END IF;--vdamerla Bug6149951 ends
        lv_diff_date := 'N';
        idx := 0;
        IF( UPPER(TRIM(l_strm_name)) = 'RENT' ) THEN
          FOR l_rl_rec in l_sll_csr_lease ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            -- Start of Bug#3401024 modification BAKUCHIB
            /*IF FND_DATE.canonical_to_date(l_rl_rec.rule_information2) <> l_hdr_rec.start_date AND
               lv_diff_date = 'N' AND
               idx = 0 THEN
              j := j + 1;
              idx := idx + 1;
              l_rents_tbl(j).level_index_number := idx;
              l_rents_tbl(j).amount             := 0;
              l_rents_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
              l_rents_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
              l_rents_tbl(j).period             := g_stub_rec.period;
              l_rents_tbl(j).description        := l_strm_name;
              l_rents_tbl(j).kle_asset_id       := l_line_rec.id;
              l_rents_tbl(j).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_rents_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_rents_tbl(j).days_in_month := l_days_in_month_code;
              l_rents_tbl(j).days_in_year    := l_days_in_yr_code;
              -- Added by RGOOTY : ESG Down Payment Enhancements. Bug 4629365: Start
              IF  l_line_rec.capitalize_down_payment_yn = 'N' AND
                 l_line_rec.capital_reduction IS NOT NULL
              THEN
                l_rents_tbl(j).down_payment_amount := l_line_rec.capital_reduction;
              END IF;
              -- Added by RGOOTY : ESG Down Payment Enhancements. Bug 4629365: End
              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                l_rents_tbl(j).structure          := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              lv_diff_date := 'Y';
              l_rents_tbl(j).rate               := l_rl_rec.rule_information13;

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes
              -- Bug 8978040 : RGOOTY
              IF l_PROSPECTIVE_REBOOK_YN = 'Y' THEN
                 l_rents_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              END IF;

            END IF; */
            -- End of Bug#3401024 modification BAKUCHIB
            -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              j := j + 1;
              idx := idx + 1;
              l_rents_tbl(j).level_index_number := idx;
              l_rents_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_rents_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              l_rents_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
              l_rents_tbl(j).period             := g_stub_rec.period;
              l_rents_tbl(j).description        := l_strm_name;
              l_rents_tbl(j).kle_asset_id       := l_line_rec.id;
              l_rents_tbl(j).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_rents_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_rents_tbl(j).days_in_month := l_days_in_month_code;
              l_rents_tbl(j).days_in_year    := l_days_in_yr_code;
              -- Added by RGOOTY : ESG Down Payment Enhancements. Bug 4629365: Start
              IF l_line_rec.capitalize_down_payment_yn = 'N' AND
                 l_line_rec.capital_reduction IS NOT NULL
              THEN
                l_rents_tbl(j).down_payment_amount := l_line_rec.capital_reduction;
              END IF;
              -- Added by RGOOTY : ESG Down Payment Enhancements. Bug 4629365: End
              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                l_rents_tbl(j).structure          := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              l_rents_tbl(j).rate               := l_rl_rec.rule_information13;
            -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes
              -- Bug 8978040 : RGOOTY
              IF l_PROSPECTIVE_REBOOK_YN = 'Y' THEN
                 l_rents_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              END IF;
            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              j := j + 1;
              idx := idx + 1;
              l_rents_tbl(j).level_index_number := idx;
              l_rents_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_rents_tbl(j).description        := l_strm_name;
              l_rents_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_rents_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              l_rents_tbl(j).period             := l_rl_rec.object1_id1;
              l_rents_tbl(j).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_rents_tbl(j).kle_asset_id       := l_line_rec.id;
              l_rents_tbl(j).days_in_month := l_days_in_month_code;
              l_rents_tbl(j).days_in_year    := l_days_in_yr_code;
              -- Added by RGOOTY : ESG Down Payment Enhancements. Bug 4629365: Start
              IF l_line_rec.capitalize_down_payment_yn = 'N' AND
                 l_line_rec.capital_reduction IS NOT NULL
              THEN
                l_rents_tbl(j).down_payment_amount := l_line_rec.capital_reduction;
              END IF;

              --sechawla 14-Jul-09 PRB ESG enhancements : set orig_contract_line_id on Rent
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_rents_tbl(j).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              -- Added by RGOOTY : ESG Down Payment Enhancements. Bug 4629365: End
              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                l_rents_tbl(j).structure          := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
                --sechawla 11-sep-09 8798556
                --l_rents_tbl(j).date_start  := l_hdr_rec.start_date;
                l_rents_tbl(j).date_start  := l_line_rec.start_date;
              ELSE
                l_rents_tbl(j).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
              l_rents_tbl(j).rate               := l_rl_rec.rule_information13;
            END IF;
          END LOOP;
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
        -- Code for Estimated Property Tax Starts Here
        ELSIF( UPPER(TRIM(l_strm_name)) = 'ESTIMATED_PROPERTY_TAX' ) THEN
          FOR l_rl_rec in l_sll_csr_lease (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
/*
            IF FND_DATE.canonical_to_date(l_rl_rec.rule_information2) <> l_hdr_rec.start_date AND
               lv_diff_date = 'N' AND
               idx = 0 THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).amount             := 0;
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 15-JUL-09 : PRB ESG Enhancements : assigne orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).cash_effect_yn     := 'N';
              l_csm_periodic_expenses_tbl(k).tax_effect_yn      := 'N';
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                l_csm_periodic_expenses_tbl(k).structure        := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              lv_diff_date := 'Y';

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes
            END IF;
*/

            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 15-Jul-09 PRB ESG enhancements : set orig_contract_line_id on Rent
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).cash_effect_yn     := 'N';
              l_csm_periodic_expenses_tbl(k).tax_effect_yn      := 'N';
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 15-JUL-09 : PRB ESG Enhancements : assigne orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).cash_effect_yn     := 'N';
              l_csm_periodic_expenses_tbl(k).tax_effect_yn      := 'N';
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                --sechawla 11-sep-09 8798556
                --l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                l_csm_periodic_expenses_tbl(k).date_start  := l_line_rec.start_date;

              ELSE
                l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
            END IF;
          END LOOP;
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;

		-- Code for Estimated Property Tax Ends Here
		ELSIF (((l_strm_name_rec.periodic_yn = 'Y'  ) AND
               (UPPER(l_strm_name_rec.name) = 'FEE') AND
               (l_strm_name_rec.capitalize_yn = 'N') ) OR
              ((l_strm_name_rec.periodic_yn = 'Y'  ) AND (UPPER(l_strm_name_rec.name) <> 'FEE'))) Then
          FOR l_rl_rec in l_sll_csr_lease (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
                  -- Start of Bug#3401024 modification BAKUCHIB
            /*
            IF FND_DATE.canonical_to_date(l_rl_rec.rule_information2) <> l_hdr_rec.start_date AND
               lv_diff_date = 'N' AND
               idx = 0 THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).amount             := 0;
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2);
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 15-JUL-09 : PRB ESG Enhancements : assigne orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                l_csm_periodic_expenses_tbl(k).structure        := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              lv_diff_date := 'Y';

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            END IF;
            */
            -- End of Bug#3401024 modification BAKUCHIB
            -- Start of Bug#2757289 modification
            IF (l_rl_rec.rule_information7 IS NOT NULL OR
                l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
               (l_rl_rec.rule_information8 IS NOT NULL OR
                l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
              l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
              l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
              l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
              l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

              --sechawla 15-JUL-09 : PRB ESG Enhancements : assigne orig_contract_line_id
              if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              -- End of Bug#2757289 modification

              -- Added by kthiruva on 29-Dec-2005.
              -- The value of the Advance and Arrears flag needs to be obtained from the rule information
              -- Bug 4915938 - Start of Changes
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              -- Bug 4915938 - End of Changes

            ELSIF (l_rl_rec.rule_information7 IS NULL OR
                   l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                  (l_rl_rec.rule_information8 IS NULL OR
                   l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
              k := k + 1;
              idx := idx + 1;
              l_csm_periodic_expenses_tbl(k).level_index_number := idx;
              l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
              l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
              l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
              l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_line_rec.id;

			  --sechawla 15-jul-09 PRB ESg enhancements : assign orig_contract_line_id
			  if l_PROSPECTIVE_REBOOK_YN = 'Y' then
                 l_csm_periodic_expenses_tbl(k).orig_contract_line_id := l_line_rec.orig_contract_line_id;
              end if;

			  l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
              l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

              IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
              END If;
              IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
              ELSE
                l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
              END IF;
              IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                --sechawla 11-sep-09 8798556
                --l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                l_csm_periodic_expenses_tbl(k).date_start  := l_line_rec.start_date;

              ELSE
                l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
            END IF;
          END LOOP;
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
        ELSIF ((UPPER(TRIM(l_strm_name_rec.periodic_yn)) = 'N' ) AND
               (UPPER(TRIM(l_strm_name)) <> 'DOWN_PAYMENT') ) THEN
          FOR l_rl_rec in l_sll_csr_lease (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_line_rec.id ) LOOP
            l := l + 1;
            l_csm_one_off_fee_tbl(l).description       := l_strm_name_rec.name;
            l_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
            l_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
            IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
              l_csm_one_off_fee_tbl(l).date_paid         := l_hdr_rec.start_date;
            ELSE
             l_csm_one_off_fee_tbl(l).date_paid         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
            END IF;
            l_csm_one_off_fee_tbl(l).kle_asset_id      := l_line_rec.id;

            --sechawla 15-Jul-09 : PRB ESg enhancements : assign orig_contract_line_id
            if l_PROSPECTIVE_REBOOK_YN = 'Y' then
               l_csm_one_off_fee_tbl(l).orig_contract_line_id := l_line_rec.orig_contract_line_id;
            end if;


          END LOOP;
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
        END IF;
      END LOOP;
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        EXIT WHEN(x_return_status = OKL_API.G_RET_STS_ERROR);
      END IF;
    END LOOP;
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    --Added for Debugging
    write_to_log('Prior to the call to extract_fee_lines');
   -- g_rep_req_yn := 'N'; --sechawla for bug 9001267
    -- Extract Fee lines
    extract_fee_lines( p_api_version => p_api_version,
                       p_chr_id => TO_NUMBER(p_chr_id),
                       p_deal_type => l_deal_type,
                       p_init_msg_list => p_init_msg_list,
                       x_return_status => x_return_status,
                       x_msg_count => x_msg_count,
                       x_msg_data => x_msg_data,
                       px_csm_stream_types_tbl => l_csm_stream_types_tbl,
                       px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl,
                       px_csm_periodic_expenses_tbl => l_csm_periodic_expenses_tbl);
    --Added for Debugging
    write_to_log('After the call to extract_fee_lines, the return status is :'|| x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- Check for mandatory stream for pricing eng
    check_for_mandatory_streams(
            p_api_version        => p_api_version,
            p_init_msg_list      => p_init_msg_list,
            x_msg_count          => x_msg_count,
            x_msg_data           => x_msg_data,
            x_return_status      => x_return_status,
            p_chr_id             => p_chr_id,
            p_deal_type          => l_deal_type,
            p_stream_types_tbl   => l_csm_stream_types_tbl,
            x_stream_types_tbl   => l_req_stream_types_tbl);
    --Added for Debugging
    write_to_log('After the call to check_for_mandatory_streams, the return status is :'||x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- Requesting for yields
    x_return_status := yield_request(x_csm_yields_tbl => l_csm_yields_tbl);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- Extract Subsidy line
    extract_subsidized_lines(p_api_version => p_api_version,
                             p_init_msg_list => p_init_msg_list,
                             x_return_status => x_return_status,
                             x_msg_count => x_msg_count,
                             x_msg_data => x_msg_data,
                             p_chr_id => TO_NUMBER(p_chr_id),
                             px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl);
    --Added by kthiruva for debugging
    write_to_log('After the call to extract_subsidized_lines, the return status is :'||x_return_status);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
      okl_api.set_message(p_app_name => G_APP_NAME,
                          p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    g_rep_req_yn := 'N'; --Added by sechawla for bug 9001267

    x_csm_lease_header := l_csm_lease_header;
    x_csm_one_off_fee_tbl := l_csm_one_off_fee_tbl;
    x_csm_periodic_expenses_tbl := l_csm_periodic_expenses_tbl;
    x_csm_yields_tbl := l_csm_yields_tbl;
    x_req_stream_types_tbl := l_req_stream_types_tbl;
    x_csm_line_details_tbl := l_csm_line_details_tbl;
    x_rents_tbl := l_rents_tbl;
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count,
                         x_msg_data  => x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR then
      IF l_hdr_csr_lease%ISOPEN THEN
        CLOSE l_hdr_csr_lease;
      END IF;
      IF l_line_rec_csr_lease%ISOPEN THEN
        CLOSE l_line_rec_csr_lease;
      END IF;
      IF l_hdrrl_csr_lease%ISOPEN THEN
        CLOSE l_hdrrl_csr_lease;
      END IF;
      IF l_financed_type_csr%ISOPEN THEN
        CLOSE l_financed_type_csr;
      END IF;
      IF ib_csr_lease%ISOPEN THEN
        CLOSE ib_csr_lease;
      END IF;
      IF get_org_id%ISOPEN THEN
        CLOSE get_org_id;
      END IF;
      IF l_strmid_csr_lease%ISOPEN THEN
        CLOSE l_strmid_csr_lease;
      END IF;
      IF strm_name_csr_lease%ISOPEN THEN
        CLOSE strm_name_csr_lease;
      END IF;
      IF l_slh_csr_lease%ISOPEN THEN
        CLOSE l_slh_csr_lease;
      END IF;
      IF l_sll_csr_lease%ISOPEN THEN
        CLOSE l_sll_csr_lease;
      END IF;
      IF get_dis_amt_csr_lease%ISOPEN THEN
        CLOSE get_dis_amt_csr_lease;
      END IF;
      IF l_txtrans_csr_lease%ISOPEN THEN
        CLOSE l_txtrans_csr_lease;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
      IF l_hdr_csr_lease%ISOPEN THEN
        CLOSE l_hdr_csr_lease;
      END IF;
      IF l_line_rec_csr_lease%ISOPEN THEN
        CLOSE l_line_rec_csr_lease;
      END IF;
      IF l_hdrrl_csr_lease%ISOPEN THEN
        CLOSE l_hdrrl_csr_lease;
      END IF;
      IF l_financed_type_csr%ISOPEN THEN
        CLOSE l_financed_type_csr;
      END IF;
      IF ib_csr_lease%ISOPEN THEN
        CLOSE ib_csr_lease;
      END IF;
      IF get_org_id%ISOPEN THEN
        CLOSE get_org_id;
      END IF;
      IF l_strmid_csr_lease%ISOPEN THEN
        CLOSE l_strmid_csr_lease;
      END IF;
      IF strm_name_csr_lease%ISOPEN THEN
        CLOSE strm_name_csr_lease;
      END IF;
      IF l_slh_csr_lease%ISOPEN THEN
        CLOSE l_slh_csr_lease;
      END IF;
      IF l_sll_csr_lease%ISOPEN THEN
        CLOSE l_sll_csr_lease;
      END IF;
      IF get_dis_amt_csr_lease%ISOPEN THEN
        CLOSE get_dis_amt_csr_lease;
      END IF;
      IF l_txtrans_csr_lease%ISOPEN THEN
        CLOSE l_txtrans_csr_lease;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS then
      IF l_hdr_csr_lease%ISOPEN THEN
        CLOSE l_hdr_csr_lease;
      END IF;
      IF l_line_rec_csr_lease%ISOPEN THEN
        CLOSE l_line_rec_csr_lease;
      END IF;
      IF l_hdrrl_csr_lease%ISOPEN THEN
        CLOSE l_hdrrl_csr_lease;
      END IF;
      IF l_financed_type_csr%ISOPEN THEN
        CLOSE l_financed_type_csr;
      END IF;
      IF ib_csr_lease%ISOPEN THEN
        CLOSE ib_csr_lease;
      END IF;
      IF get_org_id%ISOPEN THEN
        CLOSE get_org_id;
      END IF;
      IF l_strmid_csr_lease%ISOPEN THEN
        CLOSE l_strmid_csr_lease;
      END IF;
      IF strm_name_csr_lease%ISOPEN THEN
        CLOSE strm_name_csr_lease;
      END IF;
      IF l_slh_csr_lease%ISOPEN THEN
        CLOSE l_slh_csr_lease;
      END IF;
      IF l_sll_csr_lease%ISOPEN THEN
        CLOSE l_sll_csr_lease;
      END IF;
      IF get_dis_amt_csr_lease%ISOPEN THEN
        CLOSE get_dis_amt_csr_lease;
      END IF;
      IF l_txtrans_csr_lease%ISOPEN THEN
        CLOSE l_txtrans_csr_lease;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END extract_params_lease_deal;
-- End modification 11i10 bakuchib
  Procedure extract_params_lease(
            p_api_version     IN  NUMBER,
            p_init_msg_list   IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id          IN  VARCHAR2,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2,
            x_csm_lease_header          OUT NOCOPY okl_create_streams_pub.csm_lease_rec_type,
            x_csm_one_off_fee_tbl       OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl            OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_req_stream_types_tbl      OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type,
            x_csm_line_details_tbl      OUT NOCOPY okl_create_streams_pub.csm_line_details_tbl_type,
            x_rents_tbl                 OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            p_orp_code                  IN  VARCHAR2 DEFAULT NULL ) AS

    l_api_name		CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_LEASE';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

  Begin

    print( l_api_name, 'begin');

       extract_params_lease_deal(
            l_api_version,
            p_init_msg_list,
            p_chr_id,
            NULL,
            x_return_status,
            x_msg_count,
            x_msg_data,
            x_csm_lease_header,
            x_csm_one_off_fee_tbl,
            x_csm_periodic_expenses_tbl,
            x_csm_yields_tbl,
            x_req_stream_types_tbl,
            x_csm_line_details_tbl,
            x_rents_tbl,
            p_orp_code );

    print( l_api_name, 'end', x_return_status);
   End extract_params_lease;

  Procedure generate_reporting_streams(
            p_api_version        IN  NUMBER,
            p_init_msg_list      IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id             IN  VARCHAR2,
            p_report_deal_type   IN  VARCHAR2,
            p_generation_context IN  VARCHAR2,
            p_skip_prc_engine    IN  VARCHAR2,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2,
            x_request_id         IN OUT NOCOPY NUMBER,
            x_trans_status       OUT NOCOPY VARCHAR2,
            p_orp_code           IN  VARCHAR2)  AS

    l_api_name		CONSTANT VARCHAR2(30) := 'GEN_REPORT_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;
    l_fnd_rec          fnd_lookups_csr%ROWTYPE;

    l_isStrmGenAllowed BOOLEAN := TRUE;
    l_passStatus       VARCHAR2(256);
    l_failStatus       VARCHAR2(256);

    l_trxH_in_rec        Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    l_trxH_out_rec       Okl_Trx_Contracts_Pvt.tcnv_rec_type;

    l_lines_rec l_line_rec_csr%ROWTYPE;
    l_transaction_type VARCHAR2(256):= 'Miscellaneous';--'Generate Yields';
    l_request_id NUMBER;

    cursor l_nullrl_csr( rgcode OKC_RULE_GROUPS_B.RGD_CODE%TYPE,
                     rlcat  OKC_RULES_B.RULE_INFORMATION_CATEGORY%TYPE,
                     chrId NUMBER,
                     cleId NUMBER ) IS
    select crl.id
    from   OKC_RULE_GROUPS_B crg,
           OKC_RULES_B crl
    where  crl.rgp_id = crg.id
           and crg.RGD_CODE = rgcode
           and crl.RULE_INFORMATION_CATEGORY = rlcat
           and crl.RULE_INFORMATION2 is null
           and crg.dnz_chr_id = chrId
           and crg.cle_id = cleId;

    l_nullrl_rec l_nullrl_csr%ROWTYPE;

    l_rulv_rec OKL_RULE_PUB.rulv_rec_type;

    l_Trx_Type_rec Transaction_Type_csr%ROWTYPE;
    l_hdr_rec l_hdr_csr%ROWTYPE;

    x_csm_lease_header          okl_create_streams_pub.csm_lease_rec_type;
    x_csm_one_off_fee_tbl       okl_create_streams_pub.csm_one_off_fee_tbl_type;
    x_csm_periodic_expenses_tbl okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    x_csm_yields_tbl            okl_create_streams_pub.csm_yields_tbl_type;
    x_csm_stream_types_tbl      okl_create_streams_pub.csm_stream_types_tbl_type;
    x_req_stream_types_tbl      okl_create_streams_pub.csm_stream_types_tbl_type;
    x_csm_line_details_tbl      okl_create_streams_pub.csm_line_details_tbl_type;
    x_rents_tbl                 okl_create_streams_pub.csm_periodic_expenses_tbl_type;

    x_csm_loan_header           okl_create_streams_pvt.csm_loan_rec_type;
    x_csm_lines_details_tbl     okl_create_streams_pvt.csm_loan_level_tbl_type;
    x_csm_loan_lines_tbl        okl_create_streams_pvt.csm_loan_line_tbl_type;
    x_csm_loan_levels_tbl       okl_create_streams_pvt.csm_loan_level_tbl_type;

  BEGIN


    print( l_api_name, 'begin');

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);

    -- check if activity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    print( l_api_name, 'Reporting Deal Type='||p_report_deal_type);

    IF (INSTR( p_report_deal_type, 'LEASE') > 0) THEN

        g_rep_req_yn:= 'Y';
        extract_params_lease_deal(
                   p_api_version,
                   p_init_msg_list,
                   p_chr_id,
		   p_report_deal_type,
                   x_return_status,
                   x_msg_count,
                   x_msg_data,
                   x_csm_lease_header,
                   x_csm_one_off_fee_tbl,
                   x_csm_periodic_expenses_tbl,
                   x_csm_yields_tbl,
                   x_req_stream_types_tbl,
                   x_csm_line_details_tbl,
                   x_rents_tbl,
                   p_orp_code);

        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then  -- Modified 06/14/2002. dedey
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;

        x_csm_lease_header.purpose_code := 'REPORT';
        x_csm_lease_header.sif_id := x_request_id;

        okl_create_streams_pub.create_streams_lease_book(
                             p_api_version,
                             p_init_msg_list,
                             p_skip_prc_engine,
                             x_csm_lease_header,
                             x_csm_one_off_fee_tbl,
                             x_csm_periodic_expenses_tbl,
                             x_csm_yields_tbl,
                             x_req_stream_types_tbl,
                             x_csm_line_details_tbl,
                             x_rents_tbl,
                             x_request_id,
                             x_trans_status,
                             x_return_status,
                             x_msg_count,
                             x_msg_data);
        -- rabhupat BUG#4259056 start
        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
        -- rabhupat BUG#4259056 end
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_REPSTRMS_REQ_FLD');
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;

    ELSIF (INSTR(p_report_deal_type, 'LOAN') > 0) THEN
	    -- Reporting loan streams were not getting generated- hkpatel- Bug 4734085
        g_rep_req_yn:= 'Y';


        extract_params_loan(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl,
                    p_orp_code);

        --Added by kthiruva for Debugging
        write_to_log('After the call to extract_params_loan, the return status is :'||x_return_status);
        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
            raise OKL_API.G_EXCEPTION_ERROR;
        End If;

        x_csm_loan_header.purpose_code := 'REPORT';
        x_csm_loan_header.sif_id := x_request_id;

        okl_create_streams_pub.create_streams_loan_book(
                             p_api_version => p_api_version,
                             p_init_msg_list => p_init_msg_list,
                             p_skip_prc_engine => p_skip_prc_engine,
                             p_csm_loan_header => x_csm_loan_header,
                             p_csm_loan_lines_tbl => x_csm_loan_lines_tbl,
                             p_csm_loan_levels_tbl  => x_csm_loan_levels_tbl,
                             p_csm_one_off_fee_tbl => x_csm_one_off_fee_tbl,
                             p_csm_periodic_expenses_tbl => x_csm_periodic_expenses_tbl,
                             p_csm_yields_tbl => x_csm_yields_tbl,
                             p_csm_stream_types_tbl => x_csm_stream_types_tbl,
                             x_trans_id => x_request_id,
                             x_trans_status => x_trans_status,
                             x_return_status => x_return_status,
                             x_msg_count => x_msg_count,
                             x_msg_data => x_msg_data);

        -- rabhupat BUG#4259056 start
        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
        -- rabhupat BUG#4259056 end
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_REPSTRMS_REQ_FLD');
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;
    ELSE
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;


    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    print( l_api_name, 'end', x_return_status);
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception
	when OKL_API.G_EXCEPTION_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OTHERS then
      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

  END generate_reporting_streams;

  Procedure generate_streams(
            p_api_version        IN  NUMBER,
            p_init_msg_list      IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id             IN  VARCHAR2,
            p_generation_context IN  VARCHAR2,
            p_skip_prc_engine    IN  VARCHAR2,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2,
            x_request_id         OUT NOCOPY NUMBER,
            x_trans_status       OUT NOCOPY VARCHAR2)  AS

    l_api_name		CONSTANT VARCHAR2(30) := 'MAP_AND_GEN_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1;
    l_return_status	VARCHAR2(1)           := OKC_API.G_RET_STS_SUCCESS;
    l_fnd_rec          fnd_lookups_csr%ROWTYPE;
    lv_stream	        VARCHAR2(200)           := null;

    l_isStrmGenAllowed BOOLEAN := TRUE;
    l_passStatus       VARCHAR2(256);
    l_failStatus       VARCHAR2(256);

    l_trxH_in_rec        Okl_Trx_Contracts_Pvt.tcnv_rec_type;
    l_trxH_out_rec       Okl_Trx_Contracts_Pvt.tcnv_rec_type;

    l_stmv_tbl okl_streams_pub.stmv_tbl_type;
    x_stmv_tbl okl_streams_pub.stmv_tbl_type;

    i NUMBER;
    l_lines_rec l_line_rec_csr%ROWTYPE;
    l_transaction_type VARCHAR2(256):= 'Miscellaneous';--'Generate Yields';

    cursor l_nullrl_csr( rgcode OKC_RULE_GROUPS_B.RGD_CODE%TYPE,
                     rlcat  OKC_RULES_B.RULE_INFORMATION_CATEGORY%TYPE,
                     chrId NUMBER ) IS
    select crl.id
    from   OKC_RULE_GROUPS_B crg,
           OKC_RULES_B crl
    where  crl.rgp_id = crg.id
           and crg.RGD_CODE = rgcode
           and crl.RULE_INFORMATION_CATEGORY = rlcat
           and nvl(crl.RULE_INFORMATION1, 'XXX' ) = 'XXX'
           and nvl(crl.RULE_INFORMATION2, 'XXX' ) = 'XXX'
           and nvl(crl.RULE_INFORMATION3, 'XXX' ) = 'XXX'
           and nvl(crl.RULE_INFORMATION6, 'XXX' ) = 'XXX'
           and crg.dnz_chr_id = chrId;



    l_nullrl_rec l_nullrl_csr%ROWTYPE;

    l_rulv_rec OKL_RULE_PUB.rulv_rec_type;

    l_Trx_Type_rec Transaction_Type_csr%ROWTYPE;
    l_hdr_rec l_hdr_csr%ROWTYPE;
    l_strms_orig_rec strms_csr%ROWTYPE;
    l_strms_rep_rec strms_csr%ROWTYPE;

    x_csm_lease_header          okl_create_streams_pub.csm_lease_rec_type;
    x_csm_one_off_fee_tbl       okl_create_streams_pub.csm_one_off_fee_tbl_type;
    x_csm_periodic_expenses_tbl okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    x_csm_yields_tbl            okl_create_streams_pub.csm_yields_tbl_type;
    x_csm_stream_types_tbl      okl_create_streams_pub.csm_stream_types_tbl_type;
    x_req_stream_types_tbl      okl_create_streams_pub.csm_stream_types_tbl_type;
    x_csm_line_details_tbl      okl_create_streams_pub.csm_line_details_tbl_type;
    x_rents_tbl                 okl_create_streams_pub.csm_periodic_expenses_tbl_type;

    x_csm_loan_header           okl_create_streams_pvt.csm_loan_rec_type;
    x_csm_lines_details_tbl     okl_create_streams_pvt.csm_loan_level_tbl_type;
    x_csm_loan_lines_tbl        okl_create_streams_pvt.csm_loan_line_tbl_type;
    x_csm_loan_levels_tbl       okl_create_streams_pvt.csm_loan_level_tbl_type;

    p_pdtv_rec                  pdtv_rec_type;
    x_pdt_parameter_rec         pdt_param_rec_type;
    x_no_data_found             BOOLEAN;

  BEGIN
    --Added by kthiruva for Debugging
    write_to_log('Inside the call to generate_streams');

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    x_return_status := OKL_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);
    -- check if activity started successfully
    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

--    2. type of contract lease/loan
    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr into l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
        CLOSE l_hdr_csr;
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;

    IF (l_hdr_rec.template_yn = 'Y') Then
      x_return_status := OKL_API.G_RET_STS_ERROR;
      OKL_API.set_message(
               p_app_name      => G_APP_NAME,
               p_msg_name      => 'OKL_LLA_NO_STRM_TMPLTC');
      return;
    END IF;
    okl_contract_status_pub.get_contract_status(l_api_version,
                                                p_init_msg_list,
                                                x_return_status,
                                                x_msg_count,
                                                x_msg_data,
                                                l_isStrmGenAllowed,
                                                l_passStatus,
                                                l_failStatus,
                                                OKL_CONTRACT_STATUS_PUB.G_K_STRMGEN,
                                                p_chr_id);
    If ( NOT (l_isStrmGenAllowed )) then
        x_return_status := OKL_API.G_RET_STS_ERROR;
        okl_api.set_message(
           p_app_name => G_APP_NAME,
           p_msg_name => OKL_CONTRACT_STATUS_PUB.G_CANNOT_GENSTRMS);
        return;
    ElsIf (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    print( l_api_name, 'Contract Status Check', x_return_status);
   FOR l_nullrl_rec in l_nullrl_csr ( 'LALEVL', 'LASLL', p_chr_id )
    LOOP

        l_rulv_rec.id := l_nullrl_rec.id;

        OKL_RULE_PUB.delete_rule(
               p_api_version   => l_api_version,
               p_init_msg_list => p_init_msg_list,
               x_return_status => x_return_status,
               x_msg_count => x_msg_count,
               x_msg_data  => x_msg_data,
               p_rulv_rec  => l_rulv_rec );


        -- check if activity started successfully
        If (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) then
           raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (x_return_status = OKC_API.G_RET_STS_ERROR) then
           raise OKC_API.G_EXCEPTION_ERROR;
        End If;

    END LOOP;

     delete_working_streams(
            p_api_version   => p_api_version,
            p_init_msg_list => p_init_msg_list,
            x_return_status => x_return_status,
            x_msg_count     => x_msg_count,
            x_msg_data      => x_msg_data,
	    p_chr_id        => p_chr_id);

     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
     END IF;

    -- Reporting stream generation call will be made first bug 8814790.
    -- Start
    If ( l_hdr_rec.report_pdt_id <> -1 ) Then

       --Added for Debugging
       write_to_log('Reporting Product is present');
       p_pdtv_rec.id := l_hdr_rec.report_pdt_id;

       OKL_SETUPPRODUCTS_PVT.Getpdt_parameters(
                    p_api_version       => p_api_version,
                    p_init_msg_list     => p_init_msg_list,
                    x_return_status     => x_return_status,
                    x_msg_count         => x_msg_count,
                    x_msg_data          => x_msg_data,
                    p_pdtv_rec          => p_pdtv_rec,
		    x_no_data_found     => x_no_data_found,
                    p_pdt_parameter_rec => x_pdt_parameter_rec);
       --Added by kthiruva for Debugging
       write_to_log('After the call to OKL_SETUPPRODUCTS_PVT.Getpdt_parameters, return status is :'||x_return_status);

       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;

       --Added by kthiruva for Debugging
       write_to_log('Prior to the call to generate_reporting_streams');

       generate_reporting_streams(
               p_api_version => p_api_version,
               p_init_msg_list => p_init_msg_list,
               p_chr_id => p_chr_id,
               p_report_deal_type => x_pdt_parameter_rec.deal_type,
               p_generation_context => p_generation_context,
               p_skip_prc_engine => p_skip_prc_engine,
               x_return_status => x_return_status,
               x_msg_count => x_msg_count,
               x_msg_data => x_msg_data,
               x_request_id =>  x_request_id,
               x_trans_status => x_trans_status,
               p_orp_code     => NULL );

       --Added by kthiruva for Debugging
       write_to_log('After the call to generate_reporting_streams, return status is :'||x_return_status);
       If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then

           okl_api.set_message(
                   p_app_name => G_APP_NAME,
                   p_msg_name => 'OKL_LLA_REPSTRMS_REQ_FAILED');
           raise OKL_API.G_EXCEPTION_ERROR;

       End If;


    End If;
    -- Reporting stream generation call will be made first bug 8814790.
    -- End


    IF (INSTR( l_hdr_rec.deal_type, 'LEASE') > 0) THEN
        --Added by kthiruva for Debugging
        write_to_log('Deal Type is Lease');
        write_to_log('Prior to the call to extract_params_lease');

        extract_params_lease(
                   p_api_version,
                   p_init_msg_list,
                   p_chr_id,
                   x_return_status,
                   x_msg_count,
                   x_msg_data,
                   x_csm_lease_header,
                   x_csm_one_off_fee_tbl,
                   x_csm_periodic_expenses_tbl,
                   x_csm_yields_tbl,
                   x_req_stream_types_tbl,
                   x_csm_line_details_tbl,
                   x_rents_tbl,
                   NULL ); -- p_orp_code

        --Added by kthiruva for Debugging
        write_to_log('After the call to extract_params_lease, the return status is :'||x_return_status);

        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then  -- Modified 06/14/2002. dedey
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;

--        FOR i in 1..x_req_stream_types_tbl.COUNT
--	LOOP
--	    print( l_api_name, ' req strm ' || to_char(x_req_stream_types_tbl(i).stream_type_id) ||
--	                   ' for fee ' || to_char(nvl( x_req_stream_types_tbl(i).kle_fee_id,-1)) );
--	END LOOP;


        okl_create_streams_pub.create_streams_lease_book(
                             p_api_version,
                             p_init_msg_list,
                             p_skip_prc_engine,
                             x_csm_lease_header,
                             x_csm_one_off_fee_tbl,
                             x_csm_periodic_expenses_tbl,
                             x_csm_yields_tbl,
                             x_req_stream_types_tbl,
                             x_csm_line_details_tbl,
                             x_rents_tbl,
                             x_request_id,
                             x_trans_status,
                             x_return_status,
                             x_msg_count,
                             x_msg_data);

       --Added by kthiruva for Debugging
       write_to_log('After the call to create_streams_lease_book, the return status is '||x_return_status);

        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => OKL_CONTRACT_STATUS_PUB.G_GENSTRMS_REQ_FAILED);
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;

    ELSIF (INSTR(l_hdr_rec.deal_type, 'LOAN') > 0) THEN

        --Added by kthiruva for Debugging
        write_to_log('Deal Type is Loan');
        write_to_log('Prior to the call to extract_params_loan');
        extract_params_loan(
                    p_api_version,
                    p_init_msg_list,
                    p_chr_id,
                    x_return_status,
                    x_msg_count,
                    x_msg_data,
                    x_csm_loan_header,
                    x_csm_loan_lines_tbl,
                    x_csm_loan_levels_tbl,
                    x_csm_one_off_fee_tbl,
                    x_csm_periodic_expenses_tbl,
                    x_csm_yields_tbl,
                    x_csm_stream_types_tbl,
                    NULL ); -- p_orp_code

        --Added by kthiruva for Debugging
        write_to_log('After the call to extract_params_loan, the return status is :'||x_return_status);
        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
            raise OKL_API.G_EXCEPTION_ERROR;
        End If;

        okl_create_streams_pub.create_streams_loan_book(
                             p_api_version => p_api_version,
                             p_init_msg_list => p_init_msg_list,
                             p_skip_prc_engine => p_skip_prc_engine,
                             p_csm_loan_header => x_csm_loan_header,
                             p_csm_loan_lines_tbl => x_csm_loan_lines_tbl,
                             p_csm_loan_levels_tbl  => x_csm_loan_levels_tbl,
                             p_csm_one_off_fee_tbl => x_csm_one_off_fee_tbl,
                             p_csm_periodic_expenses_tbl => x_csm_periodic_expenses_tbl,
                             p_csm_yields_tbl => x_csm_yields_tbl,
                             p_csm_stream_types_tbl => x_csm_stream_types_tbl,
                             x_trans_id => x_request_id,
                             x_trans_status => x_trans_status,
                             x_return_status => x_return_status,
                             x_msg_count => x_msg_count,
                             x_msg_data => x_msg_data);

       --Added by kthiruva for Debugging
       write_to_log('After the call to create_streams_loan_book, the return status is '||x_return_status);

        If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
            okl_api.set_message(
               p_app_name => G_APP_NAME,
               p_msg_name => OKL_CONTRACT_STATUS_PUB.G_GENSTRMS_REQ_FAILED);
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;
    ELSE
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
-- Reporting stream generation call will be made first Bug 8814790.
    -- Start
    -- Reporting stream call removed.
  -- End
--Reporting stream generation call will be made first Bug 8814790


    If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    print( l_api_name, 'end', x_return_status);
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception
	when OKL_API.G_EXCEPTION_ERROR then
--srsreeni bug6011651 starts
OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
     p_api_version         => p_api_version,
     p_init_msg_list       => p_init_msg_list,
     x_return_status       => x_return_status,
     x_msg_count           => x_msg_count,
     x_msg_data            => x_msg_data,
     p_khr_id              => p_chr_id,
     p_prog_short_name     => OKL_BOOK_CONTROLLER_PVT.G_PRICE_CONTRACT,
     p_progress_status     => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_ERROR);
--srsreeni bug6011651 ends
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
--srsreeni bug6011651 starts
OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
     p_api_version         => p_api_version,
     p_init_msg_list       => p_init_msg_list,
     x_return_status       => x_return_status,
     x_msg_count           => x_msg_count,
     x_msg_data            => x_msg_data,
     p_khr_id              => p_chr_id,
     p_prog_short_name     => OKL_BOOK_CONTROLLER_PVT.G_PRICE_CONTRACT,
     p_progress_status     => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_ERROR);
--srsreeni bug6011651 ends
		x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OTHERS then
--srsreeni bug6011651 starts
OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
     p_api_version         => p_api_version,
     p_init_msg_list       => p_init_msg_list,
     x_return_status       => x_return_status,
     x_msg_count           => x_msg_count,
     x_msg_data            => x_msg_data,
     p_khr_id              => p_chr_id,
     p_prog_short_name     => OKL_BOOK_CONTROLLER_PVT.G_PRICE_CONTRACT,
     p_progress_status     => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_ERROR);
--srsreeni bug6011651 ends
      	x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);


  END generate_streams;


  Procedure generate_internal_streams(
            p_api_version        IN  NUMBER,
            p_init_msg_list      IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
            p_chr_id             IN  NUMBER,
            p_line_id            IN  NUMBER,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2)  IS

    l_api_name		CONSTANT VARCHAR2(30) := 'GEN_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1.0;
    l_return_status	VARCHAR2(1)           := OKC_API.G_RET_STS_SUCCESS;

    l_stmv_rec Okl_Streams_pub.stmv_rec_type;
    l_selv_tbl Okl_Streams_pub.selv_tbl_type;
    x_stmv_rec Okl_Streams_pub.stmv_rec_type;
    x_selv_tbl Okl_Streams_pub.selv_tbl_type;

    cursor l_rl_csr( rgcode OKC_RULE_GROUPS_B.RGD_CODE%TYPE,
                     rlcat  OKC_RULES_B.RULE_INFORMATION_CATEGORY%TYPE,
                     chrId NUMBER,
                     cleId NUMBER ) IS
    select crl.object1_id1,
           crl.RULE_INFORMATION1,
           crl.RULE_INFORMATION2,
           crl.RULE_INFORMATION3,
           crl.RULE_INFORMATION5,
           crl.RULE_INFORMATION6,
           crl.RULE_INFORMATION10
    from   OKC_RULE_GROUPS_B crg,
           OKC_RULES_B crl
    where  crl.rgp_id = crg.id
           and crg.RGD_CODE = rgcode
           and crl.RULE_INFORMATION_CATEGORY = rlcat
           and crg.dnz_chr_id = chrId
           and crg.cle_id = cleId
    order by crl.RULE_INFORMATION1;

    l_rl_rec l_rl_csr%ROWTYPE;
    l_rl_rec1 l_rl_csr%ROWTYPE;
    number_of_periods NUMBER;
    start_date        DATE;
    amount  NUMBER;
    i NUMBER;
    j NUMBER;
    k NUMBER;
    temp NUMBER;

    cursor l_nullrl_csr( rgcode OKC_RULE_GROUPS_B.RGD_CODE%TYPE,
                     rlcat  OKC_RULES_B.RULE_INFORMATION_CATEGORY%TYPE,
                     chrId NUMBER,
                     cleId NUMBER ) IS
    select crl.id
    from   OKC_RULE_GROUPS_B crg,
           OKC_RULES_B crl
    where  crl.rgp_id = crg.id
           and crg.RGD_CODE = rgcode
           and crl.RULE_INFORMATION_CATEGORY = rlcat
           and nvl(crl.RULE_INFORMATION1, 'XXX' ) = 'XXX'
           and nvl(crl.RULE_INFORMATION2, 'XXX' ) = 'XXX'
           and nvl(crl.RULE_INFORMATION3, 'XXX' ) = 'XXX'
           and nvl(crl.RULE_INFORMATION6, 'XXX' ) = 'XXX'
           and crg.dnz_chr_id = chrId
           and nvl(crg.cle_id, -1) = cleId;

    l_nullrl_rec l_nullrl_csr%ROWTYPE;

    l_rulv_rec OKL_RULE_PUB.rulv_rec_type;

  BEGIN

    x_return_status := OKC_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => x_return_status);

    -- check if activity started successfully
    If (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) then
       raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKC_API.G_RET_STS_ERROR) then
       raise OKC_API.G_EXCEPTION_ERROR;
    End If;


    FOR l_nullrl_rec in l_nullrl_csr ( 'LALEVL', 'LASLL', p_chr_id, p_line_id )
    LOOP

        l_rulv_rec.id := l_nullrl_rec.id;

        OKL_RULE_PUB.delete_rule(
                   p_api_version   => l_api_version,
                   p_init_msg_list => p_init_msg_list,
                   x_return_status => x_return_status,
		   x_msg_count => x_msg_count,
		   x_msg_data  => x_msg_data,
                   p_rulv_rec  => l_rulv_rec );


        -- check if activity started successfully
        If (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) then
           raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (x_return_status = OKC_API.G_RET_STS_ERROR) then
           raise OKC_API.G_EXCEPTION_ERROR;
        End If;

    END LOOP;

    FOR l_nullrl_rec in l_nullrl_csr ( 'LALEVL', 'LASLL', p_chr_id, -1 )
    LOOP

        l_rulv_rec.id := l_nullrl_rec.id;

        OKL_RULE_PUB.delete_rule(
                   p_api_version   => l_api_version,
                   p_init_msg_list => p_init_msg_list,
                   x_return_status => x_return_status,
		   x_msg_count => x_msg_count,
		   x_msg_data  => x_msg_data,
                   p_rulv_rec  => l_rulv_rec );


        -- check if activity started successfully
        If (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) then
           raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (x_return_status = OKC_API.G_RET_STS_ERROR) then
           raise OKC_API.G_EXCEPTION_ERROR;
        End If;

    END LOOP;

    OPEN l_rl_csr ( 'LALEVL', 'LASLH', p_chr_id, p_line_id );
    FETCH l_rl_csr INTO l_rl_rec1;
    If ( l_rl_csr%NOTFOUND ) Then
        raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
    End If;
    CLOSE l_rl_csr;

    l_stmv_rec.sty_id := TO_NUMBER(l_rl_rec1.object1_id1);
    l_stmv_rec.khr_id := p_chr_id;
    l_stmv_rec.kle_id := p_line_id;
    l_stmv_rec.say_code := 'CURR';
    l_stmv_rec.active_yn := 'Y';
    l_stmv_rec.date_current := sysdate;

    Select max(transaction_number)+1  into temp
    From okl_streams;

    l_stmv_rec.transaction_number := temp;
    l_stmv_rec.sgn_code := 'MANL';

    j := 0;
    FOR l_rl_rec in l_rl_csr ( 'LALEVL', 'LASLL', p_chr_id, p_line_id )
    LOOP

        number_of_periods  := TO_NUMBER(l_rl_rec.RULE_INFORMATION3);
        amount := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
        start_date := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
        k := 0;
        FOR i in 1..number_of_periods
        LOOP
            k := i;
            l_selv_tbl(i+j).amount := amount;
            l_selv_tbl(i+j).accrued_yn := 'Y';
            l_selv_tbl(i+j).stream_element_date := add_months(start_date,i-1);
            l_selv_tbl(i+j).date_billed := l_selv_tbl(i+j).stream_element_date;
            l_selv_tbl(i+j).se_line_number := i+j;
            l_selv_tbl(i+j).comments := 'Streams';

        END LOOP;
        j := j + k;

    END LOOP;

    Okl_Streams_Pub.create_streams(
                       p_api_version   => l_api_version
                      ,p_init_msg_list => p_init_msg_list
                      ,x_return_status => l_return_status
                      ,x_msg_count     => x_msg_count
                      ,x_msg_data      => x_msg_data
                      ,p_stmv_rec      => l_stmv_rec
                      ,p_selv_tbl      => l_selv_tbl
                      ,x_stmv_rec      => x_stmv_rec
                      ,x_selv_tbl      => x_selv_tbl);

    If (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (l_return_status = OKL_API.G_RET_STS_ERROR) then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception
	when OKC_API.G_EXCEPTION_ERROR then
		x_return_status := OKC_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKC_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OKC_API.G_EXCEPTION_UNEXPECTED_ERROR then
		x_return_status := OKC_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKC_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OTHERS then
      	x_return_status := OKC_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);


  END generate_internal_streams;

  Procedure generate_internal_streams(
            p_api_version        IN  NUMBER,
            p_init_msg_list      IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
            p_chr_id             IN  NUMBER,
            x_return_status      OUT NOCOPY VARCHAR2,
            x_msg_count          OUT NOCOPY NUMBER,
            x_msg_data           OUT NOCOPY VARCHAR2)  IS

    l_api_name		CONSTANT VARCHAR2(30) := 'GEN_STREAMS';
    l_api_version	CONSTANT NUMBER	      := 1.0;
    l_return_status	VARCHAR2(1)           := OKC_API.G_RET_STS_SUCCESS;

    pl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    pl_khrv_rec okl_contract_pvt.khrv_rec_type;
    xl_chrv_rec okl_okc_migration_pvt.chrv_rec_type;
    xl_khrv_rec okl_contract_pub.khrv_rec_type;

    l_rents NUMBER;
    l_cap_amnt NUMBER;
    l_yield NUMBER;


  BEGIN

    l_return_status := OKC_API.START_ACTIVITY(
			p_api_name      => l_api_name,
			p_pkg_name      => g_pkg_name,
			p_init_msg_list => p_init_msg_list,
			l_api_version   => l_api_version,
			p_api_version   => p_api_version,
			p_api_type      => G_API_TYPE,
			x_return_status => l_return_status);

    -- check if activity started successfully
    If (l_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) then
       raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (l_return_status = OKC_API.G_RET_STS_ERROR) then
       raise OKC_API.G_EXCEPTION_ERROR;
    End If;
        okl_contract_status_pub.update_contract_status(
                                       l_api_version,
                                       p_init_msg_list,
                                       x_return_status,
                                       x_msg_count,
                                       x_msg_data,
                                       'COMPLETE',
                                       p_chr_id );

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

      OKL_CONTRACT_STATUS_PVT.cascade_lease_status
            (p_api_version     => p_api_version,
             p_init_msg_list   => p_init_msg_list,
             x_return_status   => x_return_status,
             x_msg_count       => x_msg_count,
             x_msg_data        => x_msg_data,
             p_chr_id          => p_chr_id);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        ---

    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data	 => x_msg_data);

    Exception
	when OKC_API.G_EXCEPTION_ERROR then
		x_return_status := OKC_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKC_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OKC_API.G_EXCEPTION_UNEXPECTED_ERROR then
		x_return_status := OKC_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKC_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

	when OTHERS then
      	x_return_status := OKC_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);


  END generate_internal_streams;

PROCEDURE GEN_INTR_EXTR_STREAM (
                                p_api_version         IN NUMBER,
                                p_init_msg_list       IN VARCHAR2 DEFAULT OKC_API.G_FALSE,
                                x_return_status       OUT NOCOPY VARCHAR2,
                                x_msg_count           OUT NOCOPY NUMBER,
                                x_msg_data            OUT NOCOPY VARCHAR2,
                                p_khr_id              IN  OKC_K_HEADERS_B.ID%TYPE,
                                p_generation_ctx_code IN  VARCHAR2,
                                x_trx_number          OUT NOCOPY NUMBER,
                                x_trx_status          OUT NOCOPY VARCHAR2
                               ) AS

  l_api_name    VARCHAR2(35)    := 'gen_intr_extr_stream';
  l_proc_name   VARCHAR2(35)    := 'GEN_INTR_EXTR_STREAM';
  l_api_version NUMBER          := 1.0;
  l_return_status	VARCHAR2(1)           := OKL_API.G_RET_STS_SUCCESS;

  l_pre_tax_irr NUMBER;

--  TYPE yields IS TABLE OF yields_rec_type INDEX BY BINARY_INTEGER;
-- Start modification 11i10 bakuchib
  p_chr_yields           yields_rec_type;
-- end modification 11i10 bakuchib
  lx_contract_rates      OKL_STREAM_GENERATOR_PVT.rate_rec_type;

  l_hdr_rec l_hdr_csr%ROWTYPE;
  p_pdtv_rec            pdtv_rec_type;
  x_pdt_parameter_rec   pdt_param_rec_type;
  x_no_data_found       BOOLEAN;

  l_stmv_tbl okl_streams_pub.stmv_tbl_type;
  x_stmv_tbl okl_streams_pub.stmv_tbl_type;
  l_selv_tbl Okl_Streams_pub.selv_tbl_type;
  x_selv_tbl Okl_Streams_pub.selv_tbl_type;
  l_strms_orig_rec strms_csr%ROWTYPE;
  l_strms_rep_rec strms_csr%ROWTYPE;
  -- Code for bulk update -02/28/2004 - HKPATEL
  l_id_tbl okl_streams_util.NumberTabTyp;
  -- Code for bulk update ends here -02/28/2004 - HKPATEL


  i NUMBER;
  l_strms_rec strms_csr%ROWTYPE;
  l_pricing_engine okl_st_gen_tmpt_sets.pricing_engine%TYPE;

  cursor get_rebook_type is
  select nvl(amort_inc_adj_rev_dt_yn, 'N')
    from okl_sys_acct_opts;

 l_PROSPECTIVE_REBOOK_YN  varchar2(1);

BEGIN
    --Added by kthiruva for Debugging
    L_DEBUG_ENABLED := OKL_DEBUG_PUB.CHECK_LOG_ENABLED;
    write_to_log('Start of Debug Logging for ESG');
    write_to_log ('=============================');
    print( l_api_name, 'begin');
    x_return_status := OKL_API.START_ACTIVITY(
                                               p_api_name      => l_api_name,
                                               p_pkg_name      => G_PKG_NAME,
                                               p_init_msg_list => p_init_msg_list,
                                               l_api_version   => l_api_version,
                                               p_api_version   => p_api_version,
                                               p_api_type      => G_API_TYPE,
                                               x_return_status => x_return_status);

     -- check if activity started successfully
     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
     END IF;

    print( l_api_name, 'deleting working streams');
    delete_working_streams(
            p_api_version   => p_api_version,
            p_init_msg_list => p_init_msg_list,
            x_return_status => x_return_status,
            x_msg_count     => x_msg_count,
            x_msg_data      => x_msg_data,
	    p_chr_id        => p_khr_id);

     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
     END IF;

     OPEN  l_hdr_csr(p_khr_id);
     FETCH l_hdr_csr into l_hdr_rec;
     IF l_hdr_csr%NOTFOUND THEN
         CLOSE l_hdr_csr;
         print( l_api_name, 'header curosr unexpected error');
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     END IF;
     CLOSE l_hdr_csr;

     IF ( l_hdr_rec.deal_type = 'LOAN-REVOLVING') Then

             --Added by kthiruva for Debugging
             write_to_log('The Deal Type is Loan Revolving');
             write_to_log('Prior to the call to OKL_STREAM_GENERATOR_PUB.GEN_VAR_INT_SCHEDULE');

             print( l_api_name, 'generating var int sched');
             OKL_STREAM_GENERATOR_PUB.GEN_VAR_INT_SCHEDULE(
                                   p_api_version         => p_api_version,
                                   p_init_msg_list       => p_init_msg_list,
                                   p_khr_id              => p_khr_id,
				   p_purpose_code        => NULL,
                                   x_return_status       => x_return_status,
                                   x_msg_count           => x_msg_count,
                                   x_msg_data            => x_msg_data);
             --Added by kthiruva for Debugging
             write_to_log('After the call to OKL_STREAM_GENERATOR_PUB.GEN_VAR_INT_SCHEDULE, return status is :'||x_return_status);

             IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
               raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
             ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
               raise OKL_API.G_EXCEPTION_ERROR;
             END IF;

             I := 0;
             FOR l_strms_rec in strms_csr ( p_khr_id, 'WORK', 'ORIGIN')
             LOOP

                 i := i + 1;
				 /* Commented code for Bulk update by HKPATEL -02/28/2005
                 l_stmv_tbl(i).id := l_strms_rec.STRM_ID;
                 l_stmv_tbl(i).say_code := 'CURR';
                 l_stmv_tbl(i).active_yn := 'Y';
                 l_stmv_tbl(i).date_current := sysdate;
				 */

				 l_id_tbl(i) := l_strms_rec.STRM_ID;

             END LOOP;

             If ( l_id_tbl.COUNT > 0 ) Then
	           BEGIN
                 --Added by kthiruva for Debugging
                 write_to_log('Updating the Work streams to CURR');

	             FORALL i IN l_id_tbl.FIRST..l_id_tbl.LAST
		         UPDATE OKL_STREAMS
		         SET 	say_code = 'CURR',
		         active_yn = 'Y',
		         date_current = sysdate
		         WHERE 	ID = l_id_tbl(i);

                 --Added by kthiruva for Debugging
                 write_to_log('Streams updated succesfully');
                 write_to_log('Prior to the call to OKL_BILLING_CONTROLLER_PVT.track_next_bill_date');
                        -- Added by mansrini for bug 4728636 (G bug 4520466 )
                        OKL_BILLING_CONTROLLER_PVT.track_next_bill_date(p_khr_id);
                        -- end changes
                  write_to_log('Aftter the call to OKL_BILLING_CONTROLLER_PVT.track_next_bill_date');


	           EXCEPTION
		         WHEN OTHERS THEN
		           okl_api.set_message (p_app_name     => G_APP_NAME,
                                        p_msg_name     => G_DB_ERROR,
                                        p_token1       => G_PROG_NAME_TOKEN,
                                        p_token1_value => l_api_name,
                                        p_token2       => G_SQLCODE_TOKEN,
                                        p_token2_value => sqlcode,
                                        p_token3       => G_SQLERRM_TOKEN,
                                        p_token3_value => sqlerrm);
		        l_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;
		        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
	          END;
			 /* Commented for Bulk update by HKPATEL -02/28/2004
             If ( l_stmv_tbl.COUNT > 0 ) Then
                 Okl_Streams_pub.update_streams(
                                  p_api_version => p_api_version,
                                  p_init_msg_list => p_init_msg_list,
                                  x_return_status => x_return_status,
                                  x_msg_count => x_msg_count,
                                  x_msg_data => x_msg_data,
                                  p_stmv_tbl => l_stmv_tbl,
                                  x_stmv_tbl => x_stmv_tbl);

                 IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                 END IF;
			*/

	      ENd If;
	      --Added by kthiruva on 09-Oct-2007 for Bug 6476425
	      --Updating the contract status to Complete
          okl_contract_status_pub.update_contract_status(
                                    l_api_version,
                                    p_init_msg_list,
                                    x_return_status,
                                    x_msg_count,
                                    x_msg_data,
                                    'COMPLETE',
                                    p_khr_id );
           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_ERROR;
           END IF;
           --Added by kthiruva for Debugging
           write_to_log('After the call to update_contract_status, return status is :'||x_return_status);

           --call to cascade status on to lines
           OKL_CONTRACT_STATUS_PVT.cascade_lease_status(
                                    p_api_version     => l_api_version,
                                    p_init_msg_list   => p_init_msg_list,
                                    x_return_status   => x_return_status,
                                    x_msg_count       => x_msg_count,
                                    x_msg_data        => x_msg_data,
                                    p_chr_id          => p_khr_id);
           --Added by kthiruva for Debugging
           write_to_log('After the call to cascade_lease_status, return status is :'||x_return_status);

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_ERROR;
           END IF;

           OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
                     p_api_version         => l_api_version,
                     p_init_msg_list       => p_init_msg_list,
                     x_return_status       => x_return_status,
                     x_msg_count           => x_msg_count,
                     x_msg_data            => x_msg_data,
                     p_khr_id              => p_khr_id,
                     p_prog_short_name     => OKL_BOOK_CONTROLLER_PVT.G_PRICE_CONTRACT,
                     p_progress_status     => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_COMPLETE);

		   IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
           END IF;
           --Bug 6476425 - End of Changes


	 return;

     End If;

	 OKL_STREAMS_UTIL.get_pricing_engine(
	                                     p_khr_id => p_khr_id,
	                                     x_pricing_engine => l_pricing_engine,
	                                     x_return_status => x_return_status);
     --Added by kthiruva for Debugging
     write_to_log('The pricing engine is :'||l_pricing_engine);
     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
     END IF;


     --IF ( fnd_profile.value('OKL_STREAMS_GEN_PATH') = 'EXTERNAL') THEN
     IF ( l_pricing_engine  = 'EXTERNAL') THEN

		-- populate orig_contract_line_id for the lines.
		-- orig_contract_line_id would be null for existing contracts and needing upgrade
		-- when using the prospective rebook feature.
		-- orig_contract_line_id could be null for new lines are added during rebook.
		open  get_rebook_type;
		fetch get_rebook_type into l_PROSPECTIVE_REBOOK_YN ;
		close get_rebook_type;

		if l_PROSPECTIVE_REBOOK_YN = 'Y' then -- prospective rebook enabled.
		  OKL_LLA_UTIL_PVT.update_external_id(p_chr_id        => p_khr_id,
		                                      x_return_status => x_return_status);
		end if;

        write_to_log('Done with populating orig_contract_line_id');
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
          raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
          raise OKL_API.G_EXCEPTION_ERROR;
        END IF;

        --
        -- Call EXTERNAL Stream genration process
        --
        OKL_GENERATE_STREAMS_PUB.GENERATE_STREAMS(
                                                  p_api_version         => p_api_version,
                                                  p_init_msg_list       => OKL_API.G_FALSE,
                                                  p_khr_id              => p_khr_id,
                                                  p_generation_ctx_code => p_generation_ctx_code,
                                                  x_trx_number          => x_trx_number,
                                                  x_trx_status          => x_trx_status,
                                                  x_return_status       => x_return_status,
                                                  x_msg_count           => x_msg_count,
                                                  x_msg_data            => x_msg_data
                                                 );

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
           raise OKL_API.G_EXCEPTION_ERROR;
        END IF;

     --ELSE -- fnd_profile = INTERNAL or NONE
     ELSIF ( l_pricing_engine  = 'INTERNAL') THEN
        --
        -- Call INTERNAL Stream genration process
        --
        print( l_api_name, 'generating streams');
        /*
        OKL_STREAM_GENERATOR_PUB.generate_streams(
                                                  p_api_version   => l_api_version,
                                                  p_init_msg_list => p_init_msg_list,
                                                  p_khr_id        => p_khr_id,
                                                  x_pre_tax_irr   => l_pre_tax_irr,
                                                  x_return_status => x_return_status,
                                                  x_msg_count     => x_msg_count,
                                                  x_msg_data      => x_msg_data
                                                 );
        */
        OKL_STREAM_GENERATOR_PUB.generate_streams(
                                 p_api_version    => l_api_version,
                                 p_init_msg_list  => p_init_msg_list,
                                 x_return_status  => x_return_status,
                                 x_msg_count      => x_msg_count,
                                 x_msg_data       => x_msg_data,
                                 p_khr_id         => p_khr_id,
                                 x_contract_rates => lx_contract_rates)                                                 ;
        -- check if activity started successfully
        If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;

        p_chr_yields.pre_tax_yield          := lx_contract_rates.pre_tax_yield;
        p_chr_yields.pre_tax_irr            := lx_contract_rates.pre_tax_irr;
        p_chr_yields.implicit_interest_rate := lx_contract_rates.implicit_interest_rate;
        p_chr_yields.sub_impl_interest_rate := lx_contract_rates.sub_impl_interest_rate;
        p_chr_yields.sub_pre_tax_irr        := lx_contract_rates.sub_pre_tax_irr;

        -- Added by kthiruva on 10-Aug-2004
        -- Bug 3817222 - Start of Changes
        If ( l_hdr_rec.report_pdt_id <> -1 ) Then
            p_pdtv_rec.id := l_hdr_rec.report_pdt_id;
            OKL_SETUPPRODUCTS_PVT.Getpdt_parameters(
                    p_api_version       => p_api_version,
                    p_init_msg_list     => p_init_msg_list,
                    x_return_status     => x_return_status,
                    x_msg_count         => x_msg_count,
                    x_msg_data          => x_msg_data,
                    p_pdtv_rec          => p_pdtv_rec,
                    x_no_data_found     => x_no_data_found,
                    p_pdt_parameter_rec => x_pdt_parameter_rec);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
            OKL_STREAM_GENERATOR_PUB.generate_streams(
                                     p_api_version          => l_api_version,
                                     p_init_msg_list        => p_init_msg_list,
                                     x_return_status        => x_return_status,
                                     x_msg_count            => x_msg_count,
                                     x_msg_data             => x_msg_data,
                                     p_khr_id               => p_khr_id,
                                     p_reporting_book_class => x_pdt_parameter_rec.deal_type,
                                     x_contract_rates       => lx_contract_rates)                                                 ;
            -- check if activity started successfully
            If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
               raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
               raise OKL_API.G_EXCEPTION_ERROR;
            End If;
--            p_chr_yields(1).PRE_TAX_IRR := l_pre_tax_irr; -- Not updated though !!! (ssiruvol - 06-FEB-2003)
-- Start modification 11i10 bakuchib
/* Commented by HKPATEL for bug 4040722 - 01-DEC-2004
            p_chr_yields.pre_tax_yield          := lx_contract_rates.pre_tax_yield;
            p_chr_yields.pre_tax_irr            := lx_contract_rates.pre_tax_irr;
            p_chr_yields.implicit_interest_rate := lx_contract_rates.implicit_interest_rate;
            p_chr_yields.sub_impl_interest_rate := lx_contract_rates.sub_impl_interest_rate;
            p_chr_yields.sub_pre_tax_irr        := lx_contract_rates.sub_pre_tax_irr;
Bug 4040722*/
-- End modification 11i10 bakuchib

            x_trx_number := -1;
            x_trx_status := NULL;
         End If;
         -- Bug 3817222 - End of Changes

        print( l_api_name, 'process streams');
        process_streams(
                p_api_version   => l_api_version,
                p_init_msg_list => OKL_API.G_FALSE,
                x_return_status => x_return_status,
                x_msg_count     => x_msg_count,
                x_msg_data      => x_msg_data,
                p_chr_id        => p_khr_id,
                p_process_yn    => OKL_API.G_TRUE,
                p_chr_yields    => p_chr_yields,
                p_source_call   => 'ISG');
        -- check if activity started successfully
        If (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
           raise OKL_API.G_EXCEPTION_ERROR;
        End If;

     END IF; -- fnd_profile
    print( l_api_name, 'end', x_return_status);
     OKL_API.END_ACTIVITY(x_msg_count   => x_msg_count,
                          x_msg_data    => x_msg_data);

     RETURN;

  EXCEPTION
      when OKL_API.G_EXCEPTION_ERROR then
         x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                        p_api_name  => l_api_name,
                        p_pkg_name  => G_PKG_NAME,
                        p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
                        x_msg_count => x_msg_count,
                        x_msg_data  => x_msg_data,
                        p_api_type  => G_API_TYPE);

      when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
         x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                        p_api_name  => l_api_name,
                        p_pkg_name  => G_PKG_NAME,
                        p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
                        x_msg_count => x_msg_count,
                        x_msg_data  => x_msg_data,
                        p_api_type  => G_API_TYPE);

      when OTHERS then
         x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                        p_api_name  => l_api_name,
                        p_pkg_name  => G_PKG_NAME,
                        p_exc_name  => 'OTHERS',
                        x_msg_count => x_msg_count,
                        x_msg_data  => x_msg_data,
                        p_api_type  => G_API_TYPE);

  END GEN_INTR_EXTR_STREAM;
-- Start modification 11i10 bakuchib
  -------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : validate_payments
-- Description          : validate sll payments
-- Business Rules       :
-- Parameters           : Standard Parameters with Payment table
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE validate_payments(p_api_version    IN  NUMBER,
                              p_init_msg_list  IN  VARCHAR2,
                              x_return_status  OUT NOCOPY VARCHAR2,
                              x_msg_count      OUT NOCOPY NUMBER,
                              x_msg_data       OUT NOCOPY VARCHAR2,
                              p_khr_id         IN OKC_K_HEADERS_B.ID%TYPE,
                              p_paym_tbl       IN OKL_STREAM_GENERATOR_PVT.payment_tbl_type)
    IS
    l_api_name      CONSTANT VARCHAR2(30) := 'VALIDATE_PAYMENTS';
    G_APP_NAME               VARCHAR2(30) := 'OKL';
    l_return_status          VARCHAR2(3)  := OKL_API.G_RET_STS_SUCCESS;
    G_RGD_CODE               okc_rule_groups_b.rgd_code%TYPE := 'LALEVL';
    G_RUL_SLH_CODE           okc_rules_b.rule_information_category%TYPE := 'LASLH';
    G_RUL_SLL_CODE           okc_rules_b.rule_information_category%TYPE := 'LASLL';
    G_FEE_TYPE               okl_k_lines.fee_type%TYPE := 'PASSTHROUGH';
    -- Messages
    G_PAYMENT_OVERLAP_ERROR  VARCHAR2(200) := 'OKL_PAYMENT_OVERLAP_ERROR';
    G_PAYMENT_GAP_ERROR      VARCHAR2(200) := 'OKL_PAYMENT_GAP_ERROR';
    G_PSTH_PAYMENT_ERROR     VARCHAR2(200) := 'OKL_PSTH_PAYMENT_ERROR';
    -- Messages
    ln_pasth_cnt             NUMBER := 0;
    ln_dummy                 NUMBER := 0;
    i                        NUMBER := 0;
    j                        NUMBER := 0;
    ln_cnt_amt_null          NUMBER := 0;
    ln_cnt_amt_not_null      NUMBER := 0;
    ln_cnt_rte_null          NUMBER := 0;
    ln_cnt_rte_not_null      NUMBER := 0;
    ln_tot_cnt               NUMBER := 0;
    l_freq                   VARCHAR2(1);
    -- Get Passthrough Fee Lines
    CURSOR c_get_psth_csr(p_khr_id okl_k_headers.id%TYPE)
    IS
    SELECT cle.id
    FROM okc_k_lines_b cle,
         okl_k_lines kle,
         okc_line_styles_b lse
    WHERE cle.dnz_chr_id = p_khr_id
    AND cle.lse_id = lse.id
    AND cle.sts_code NOT IN  ('HOLD', 'EXPIRED', 'CANCELLED')
    AND lse.lty_code = 'FEE'
    AND cle.id = kle.id
    AND kle.fee_type = G_FEE_TYPE;
    -- Get number of SLH payments for Passthrough fee type
    CURSOR c_get_pay_psth_csr(p_khr_id okl_k_headers.id%TYPE,
                              p_kle_id okl_k_headers.id%TYPE)
    IS
    SELECT COUNT(*)
    FROM okc_rules_b slh,
         okc_rule_groups_b rgp,
         okl_k_lines kle
    WHERE rgp.dnz_chr_id = p_khr_id
    AND kle.id = p_kle_id
    AND rgp.rgd_code= G_RGD_CODE
    AND rgp.id = slh.rgp_id
    AND kle.id = rgp.cle_id
    AND kle.fee_type = G_FEE_TYPE
    AND slh.rule_information_category = G_RUL_SLH_CODE;

    -- Get all the Top lines for p_khr_id
    CURSOR c_get_all_lines_csr(p_khr_id okl_k_headers.id%TYPE)
    IS
    SELECT cle.id line_id
    FROM okc_k_lines_b cle,
         okc_line_styles_b lse
    WHERE cle.dnz_chr_id = p_khr_id
    AND cle.lse_id = lse.id
    AND cle.sts_code NOT IN  ('HOLD', 'EXPIRED', 'CANCELLED')
    AND lse.lty_code IN ('FREE_FORM1','FEE','SOLD_SERVICE');

    -- Get all the SLH payment lines for Each Khr_id and Line Id
    CURSOR c_get_slh_lines_csr(p_khr_id okl_k_headers.id%TYPE,
                               p_cle_id okl_k_lines.id%TYPE)
    IS
    SELECT rul.id slh_id
    FROM okc_rule_groups_b rgp,
         okc_rules_b rul
    WHERE rul.rgp_id = rgp.id
    AND rgp.rgd_code = G_RGD_CODE
    AND rul.rule_information_category = G_RUL_SLH_CODE
    AND rgp.dnz_chr_id = p_khr_id
    AND rgp.cle_id = p_cle_id;

    -- Get all the SLL payment lines for Each Khr_id,SLH id and Line Id
    CURSOR c_get_sll_lines_csr(p_khr_id okl_k_headers.id%TYPE,
                               p_cle_id okl_k_lines.id%TYPE,
                               p_slh_id okc_rules_b.id%TYPE)
    IS
    SELECT FND_DATE.canonical_to_date(sll.rule_information2) start_date,
           /* DECODE(SLL.rule_information7,
           NULL,(ADD_MONTHS(FND_DATE.canonical_to_date(sll.rule_information2),to_number(SLL.rule_information3)*DECODE(sll.object1_id1, 'M', 1, 'Q', 3, 'S', 6, 'A', 12))-1),
           TO_NUMBER(SLL.rule_information7),FND_DATE.canonical_to_date(sll.rule_information2)+SLL.rule_information7-1,
           (ADD_MONTHS(FND_DATE.canonical_to_date(sll.rule_information2),to_number(SLL.rule_information3)*DECODE(sll.object1_id1, 'M', 1, 'Q', 3, 'S', 6, 'A', 12))-1)) end_date,
          */
          -- Bug 5362566: Start
          OKL_LA_PAYMENTS_PVT.get_display_end_date(
            sll.RULE_INFORMATION2, sll.RULE_INFORMATION7, sll.OBJECT1_ID1, sll.RULE_INFORMATION3,
              okl_la_payments_pvt.get_start_day( sll.id,sll.dnz_chr_id,sll.rgp_id,sll.object2_id1,sll.RULE_INFORMATION2)
			  ,(SELECT end_date FROM okc_k_headers_b WHERE id = rgp.dnz_chr_id )
			 )
             END_DATE,
          -- Bug 5362566: End
-- Start of BAKUCHIB modification bug#3121708
           FND_NUMBER.canonical_to_number(NVL(sll.rule_information6,sll.rule_information8)) amount,
-- End  of BAKUCHIB modification bug#3121708
           sll.rule_information13 rate,
           nvl(sll.rule_information10,'Y') arrears_yn,
           sll.rule_information5 structure
    FROM okc_rules_b sll,
         okc_rules_b slh,
         okc_rule_groups_b rgp
    WHERE rgp.dnz_chr_id = p_khr_id
    AND rgp.cle_id  = p_cle_id
    AND slh.id = p_slh_id
    AND rgp.rgd_code = G_RGD_CODE
    AND rgp.id = slh.rgp_id
    AND slh.rule_information_category = G_RUL_SLH_CODE
    AND TO_CHAR(slh.id) = sll.object2_id1
    AND sll.rule_information_category = G_RUL_SLL_CODE
    --Added by kthiruva for Bug 5130703
    AND slh.JTOT_OBJECT1_CODE = 'OKL_STRMTYP'
    ORDER BY FND_DATE.canonical_to_date(sll.rule_information2);

    CURSOR c_valid_khr_csr(p_khr_id OKC_K_HEADERS_B.ID%TYPE)
    IS
    SELECT 1
    FROM DUAL
    WHERE EXISTS (SELECT 1
                  FROM okc_k_headers_b
                  WHERE id = p_khr_id);
    TYPE sll_date_rec_type IS RECORD (
        start_date okc_rules_b.last_update_date%TYPE := okl_api.G_MISS_DATE,
        end_date   okc_rules_b.last_update_date%TYPE := okl_api.G_MISS_DATE);
    TYPE sll_date_tbl_type IS TABLE OF sll_date_rec_type
            INDEX BY BINARY_INTEGER;
    lt_sll_date_tbl_type sll_date_tbl_type;
    l_paym_tbl           OKL_STREAM_GENERATOR_PVT.payment_tbl_type := p_paym_tbl;
  BEGIN
    l_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,l_return_status);
    -- Check if activity started successfully
    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    IF (p_khr_id = OKL_API.G_MISS_NUM OR
       p_khr_id IS NULL) AND
       p_paym_tbl.COUNT = 0 THEN
       OKL_API.set_message(p_app_name      => G_APP_NAME,
                           p_msg_name      => G_REQUIRED_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'khr_id/Payment table');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    ELSIF p_khr_id <> OKL_API.G_MISS_NUM OR
          p_khr_id IS NOT NULL THEN
      -- Validating the khr_id
      OPEN  c_valid_khr_csr(p_khr_id => p_khr_id);
      FETCH c_valid_khr_csr INTO ln_dummy;
      IF c_valid_khr_csr%NOTFOUND THEN
        OKL_API.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'khr_id');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE c_valid_khr_csr;
      IF ln_dummy <> 1 THEN
        OKL_API.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_INVALID_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'khr_id');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Checking for Passthrough
      FOR r_get_psth_rec IN c_get_psth_csr (p_khr_id => p_khr_id) LOOP
        OPEN  c_get_pay_psth_csr(p_khr_id => p_khr_id,
                                 p_kle_id => r_get_psth_rec.id);
        FETCH c_get_pay_psth_csr INTO ln_pasth_cnt;
        CLOSE c_get_pay_psth_csr;
        IF ln_pasth_cnt > 1 THEN
          OKL_API.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_PSTH_PAYMENT_ERROR,
                              p_token1        => 'FEE_TYPE',
                              p_token1_value  => G_FEE_TYPE);
          l_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (l_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
      END LOOP;
      -- Check if activity started successfully
      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Get all the lines
      FOR r_get_all_lines_rec IN c_get_all_lines_csr(p_khr_id => p_khr_id) LOOP
        -- Get all the SLH payment lines for khr_id and each line_id
        FOR r_get_slh_lines_rec IN c_get_slh_lines_csr(p_khr_id => p_khr_id,
                                                       p_cle_id => r_get_all_lines_rec.line_id) LOOP
          -- Get all the SLL payment lines for Khr_id,line_id and each slh_id
          FOR r_get_sll_lines_rec IN c_get_sll_lines_csr(p_khr_id => p_khr_id,
                                                         p_cle_id => r_get_all_lines_rec.line_id,
                                                         p_slh_id => r_get_slh_lines_rec.slh_id) LOOP
            lt_sll_date_tbl_type(i).start_date := r_get_sll_lines_rec.start_date;

             --  lt_sll_date_tbl_type(i).end_date := r_get_sll_lines_rec.end_date; -- sechawla 8429670
            lt_sll_date_tbl_type(i).end_date := to_date(r_get_sll_lines_rec.end_date, fnd_profile.value('ICX_DATE_FORMAT_MASK')); -- sechawla 8429670

            IF r_get_sll_lines_rec.amount IS NULL THEN
              ln_cnt_amt_null := ln_cnt_amt_null + 1;
            ELSIF r_get_sll_lines_rec.amount IS NOT NULL THEN
              ln_cnt_amt_not_null := ln_cnt_amt_not_null + 1;
            END IF;
            -- Collecting amount and rate info to validate further
            IF r_get_sll_lines_rec.rate IS NULL THEN
              ln_cnt_rte_null := ln_cnt_rte_null + 1;
            ELSIF r_get_sll_lines_rec.rate IS NOT NULL THEN
              ln_cnt_rte_not_null := ln_cnt_rte_not_null + 1;
            END IF;
            IF r_get_sll_lines_rec.arrears_yn IS NULL OR
               r_get_sll_lines_rec.arrears_yn = OKL_API.G_MISS_CHAR THEN
              l_return_status := OKL_API.G_RET_STS_ERROR;
              IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                OKL_API.set_message(p_app_name      => G_APP_NAME,
                                    p_msg_name      => G_INVALID_VALUE,
                                    p_token1        => G_COL_NAME_TOKEN,
                                    p_token1_value  => 'Arrear');
                EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
              END IF;
            ELSIF (r_get_sll_lines_rec.arrears_yn IS NOT NULL OR
                  r_get_sll_lines_rec.arrears_yn <> OKL_API.G_MISS_CHAR) AND
                  r_get_sll_lines_rec.arrears_yn = 'N' THEN
              IF r_get_sll_lines_rec.STRUCTURE IS NULL OR
                 r_get_sll_lines_rec.STRUCTURE = OKL_API.G_MISS_CHAR THEN
                l_return_status := OKL_API.G_RET_STS_ERROR;
                IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                  OKL_API.set_message(p_app_name      => G_APP_NAME,
                                      p_msg_name      => G_INVALID_VALUE,
                                      p_token1        => G_COL_NAME_TOKEN,
                                      p_token1_value  => 'Structure');
                  EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
                END IF;
              END IF;
            END IF;
            i := i + 1;
            ln_tot_cnt := ln_tot_cnt + 1;
          END LOOP;
          IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
          END IF;
          -- Validating amounts and rates values
          IF ln_cnt_rte_not_null = ln_tot_cnt AND
             ln_cnt_amt_null < ln_tot_cnt AND
             ln_cnt_amt_null > 1 THEN
            l_return_status := OKL_API.G_RET_STS_ERROR;
            IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_INVALID_VALUE,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'payment amounts');
              EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
            END IF;
          END IF;
          IF ln_cnt_amt_not_null = ln_tot_cnt THEN
            IF ln_cnt_rte_not_null < ln_tot_cnt AND
               ln_cnt_rte_not_null > 0 THEN
              l_return_status := OKL_API.G_RET_STS_ERROR;
              IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                OKL_API.set_message(p_app_name      => G_APP_NAME,
                                    p_msg_name      => G_INVALID_VALUE,
                                    p_token1        => G_COL_NAME_TOKEN,
                                    p_token1_value  => 'payment rates');
                EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
              END IF;
            END IF;
          END IF;
          IF ln_cnt_rte_null = ln_tot_cnt AND
             ln_cnt_amt_null = ln_tot_cnt THEN
            l_return_status := OKL_API.G_RET_STS_ERROR;
            IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_REQUIRED_VALUE,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'payment rate and payment amount');
              EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
            END IF;
          END IF;
          IF ln_cnt_rte_not_null <> ln_tot_cnt AND
             ln_cnt_amt_not_null <> ln_tot_cnt THEN
            IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_INVALID_VALUE,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'payment rates and payment amounts');
              EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
            END IF;
          END IF;
          ln_cnt_amt_null := 0;
          ln_cnt_amt_not_null := 0;
          ln_cnt_rte_null := 0;
          ln_cnt_rte_not_null := 0;
          -- Validate dates either overlapping or having gap
          IF lt_sll_date_tbl_type.COUNT > 0 THEN
            IF lt_sll_date_tbl_type.LAST > 1 THEN
              FOR k IN lt_sll_date_tbl_type.FIRST..lt_sll_date_tbl_type.LAST LOOP
                EXIT WHEN(k = lt_sll_date_tbl_type.LAST);
                IF lt_sll_date_tbl_type(k+1).start_date >= lt_sll_date_tbl_type(k).start_date AND
                  lt_sll_date_tbl_type(k+1).start_date <= lt_sll_date_tbl_type(k).end_date THEN
                  OKL_API.set_message(p_app_name      => G_APP_NAME,
                                      p_msg_name      => G_PAYMENT_OVERLAP_ERROR);
                  l_return_status := OKL_API.G_RET_STS_ERROR;
                  IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                    EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
                  END IF;
                ELSIF lt_sll_date_tbl_type(k+1).start_date > lt_sll_date_tbl_type(k).end_date + 1 THEN
                  OKL_API.set_message(p_app_name      => G_APP_NAME,
                                      p_msg_name      => G_PAYMENT_GAP_ERROR);
                  l_return_status := OKL_API.G_RET_STS_ERROR;
                  IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                    EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
                  END IF;
                END IF;
              END LOOP;
            END IF;
          ELSE
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_REQUIRED_VALUE,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'Payment Line Record');
            l_return_status := OKL_API.G_RET_STS_ERROR;
            IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
              EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
            END IF;
          END IF;
          IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
          END IF;
          lt_sll_date_tbl_type.DELETE;
          i := 0;
        END LOOP;
        IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
          EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
        END IF;
      END LOOP;
      IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    ELSIF l_paym_tbl.COUNT > 0 THEN
      i := l_paym_tbl.FIRST;
      LOOP
        IF (l_paym_tbl(i).START_DATE IS NULL OR
            l_paym_tbl(i).START_DATE = OKL_API.G_MISS_DATE) OR
           (l_paym_tbl(i).frequency IS NULL OR
            l_paym_tbl(i).frequency = OKL_API.G_MISS_CHAR) OR
           l_paym_tbl(i).frequency NOT IN ('A','S','Q','M') THEN
          OKL_API.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_REQUIRED_VALUE,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Start date, Frequency');
          l_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (l_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        IF l_paym_tbl(i).frequency = 'A' THEN
          l_freq := 12;
        ELSIF l_paym_tbl(i).frequency = 'S' THEN
          l_freq := 6;
        ELSIF l_paym_tbl(i).frequency = 'Q' THEN
          l_freq := 3;
        ELSIF l_paym_tbl(i).frequency = 'M' THEN
          l_freq := 1;
        END IF;
        IF (l_paym_tbl(i).stub_days IS NULL OR
            l_paym_tbl(i).stub_days = OKL_API.G_MISS_NUM) AND
           (l_paym_tbl(i).periods IS NOT NULL OR
            l_paym_tbl(i).periods <> OKL_API.G_MISS_NUM) THEN
          lt_sll_date_tbl_type(j).START_DATE := l_paym_tbl(i).START_DATE;
          lt_sll_date_tbl_type(j).end_date := ADD_MONTHS(l_paym_tbl(i).START_DATE,(l_paym_tbl(i).periods*l_freq))-1;
        ELSIF (l_paym_tbl(i).stub_days IS NOT NULL OR
               l_paym_tbl(i).stub_days <> OKL_API.G_MISS_NUM) AND
              (l_paym_tbl(i).periods IS NULL OR
               l_paym_tbl(i).periods = OKL_API.G_MISS_NUM) THEN
          lt_sll_date_tbl_type(j).START_DATE := l_paym_tbl(i).START_DATE;
          lt_sll_date_tbl_type(j).end_date := (l_paym_tbl(i).START_DATE+l_paym_tbl(i).stub_days)-1;
        ELSIF (l_paym_tbl(i).periods IS NULL OR
               l_paym_tbl(i).periods = OKL_API.G_MISS_NUM) AND
              (l_paym_tbl(i).stub_days IS NULL OR
               l_paym_tbl(i).stub_days = OKL_API.G_MISS_NUM) THEN
          OKL_API.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_REQUIRED_VALUE,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'Stub days, Periods');
          l_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (l_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        j := j + 1;
        -- Collecting amount and rate info to validate further
        IF l_paym_tbl(i).amount IS NULL THEN
          ln_cnt_amt_null := ln_cnt_amt_null + 1;
        ELSIF l_paym_tbl(i).amount IS NOT NULL THEN
          ln_cnt_amt_not_null := ln_cnt_amt_not_null + 1;
        END IF;
        -- Collecting amount and rate info to validate further
        IF l_paym_tbl(i).rate IS NULL THEN
          ln_cnt_rte_null := ln_cnt_rte_null + 1;
        ELSIF l_paym_tbl(i).rate IS NOT NULL THEN
          ln_cnt_rte_not_null := ln_cnt_rte_not_null + 1;
        END IF;
        l_paym_tbl(i).arrears_yn := nvl(l_paym_tbl(i).arrears_yn,'Y');
        IF l_paym_tbl(i).arrears_yn IS NULL OR
          l_paym_tbl(i).arrears_yn = OKL_API.G_MISS_CHAR THEN
          l_return_status := OKL_API.G_RET_STS_ERROR;
          IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_INVALID_VALUE,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'Arrear');
            EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
          END IF;
        ELSIF (l_paym_tbl(i).arrears_yn IS NOT NULL OR
              l_paym_tbl(i).arrears_yn <> OKL_API.G_MISS_CHAR) AND
              l_paym_tbl(i).arrears_yn = 'N' THEN
          IF l_paym_tbl(i).STRUCTURE IS NULL OR
             l_paym_tbl(i).STRUCTURE = OKL_API.G_MISS_CHAR THEN
            l_return_status := OKL_API.G_RET_STS_ERROR;
            IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_INVALID_VALUE,
                                  p_token1        => G_COL_NAME_TOKEN,
                                  p_token1_value  => 'Structure');
              EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
            END IF;
          END IF;
        END IF;
        EXIT WHEN (i = l_paym_tbl.LAST);
        i := l_paym_tbl.NEXT(i);
      END LOOP;
      IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Validating amounts and rates values
      IF ln_cnt_rte_not_null = l_paym_tbl.COUNT AND
         ln_cnt_amt_null < l_paym_tbl.COUNT AND
         ln_cnt_amt_null > 1 THEN
        OKL_API.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_INVALID_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'payment amounts');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      IF ln_cnt_amt_not_null = l_paym_tbl.COUNT THEN
        IF ln_cnt_rte_not_null < l_paym_tbl.COUNT AND
           ln_cnt_rte_not_null > 0 THEN
          OKL_API.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_INVALID_VALUE,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'payment rates');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
      IF ln_cnt_rte_null = l_paym_tbl.COUNT AND
         ln_cnt_amt_null = l_paym_tbl.COUNT THEN
        OKL_API.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'payment rate and payment amount');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      IF ln_cnt_rte_not_null <> l_paym_tbl.COUNT AND
         ln_cnt_amt_not_null <> l_paym_tbl.COUNT THEN
        OKL_API.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_INVALID_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'payment rates and payment amounts');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      ln_cnt_amt_null := 0;
      ln_cnt_amt_not_null := 0;
      ln_cnt_rte_null := 0;
      ln_cnt_rte_not_null := 0;
      -- Validate dates either overlapping or having gap
      IF lt_sll_date_tbl_type.COUNT > 0 THEN
        IF lt_sll_date_tbl_type.LAST > 1 THEN
          FOR k IN lt_sll_date_tbl_type.FIRST..lt_sll_date_tbl_type.LAST LOOP
            EXIT WHEN(k = lt_sll_date_tbl_type.LAST);
            IF lt_sll_date_tbl_type(k+1).start_date >= lt_sll_date_tbl_type(k).start_date AND
               lt_sll_date_tbl_type(k+1).start_date <= lt_sll_date_tbl_type(k).end_date THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                  p_msg_name      => G_PAYMENT_OVERLAP_ERROR);
              l_return_status := OKL_API.G_RET_STS_ERROR;
              IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
              END IF;
            ELSIF lt_sll_date_tbl_type(k+1).start_date > lt_sll_date_tbl_type(k).end_date + 1 THEN
              OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_PAYMENT_GAP_ERROR);
              l_return_status := OKL_API.G_RET_STS_ERROR;
              IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
                EXIT WHEN(l_return_status <> OKL_API.G_RET_STS_SUCCESS);
              END IF;
            END IF;
          END LOOP;
        END IF;
      END IF;
    ELSE
      OKL_API.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_REQUIRED_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Payment Line Record');
      l_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
    IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_return_status := l_return_status;
    OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF c_get_sll_lines_csr%ISOPEN THEN
        CLOSE c_get_sll_lines_csr;
      END IF;
      IF c_get_slh_lines_csr%ISOPEN THEN
        CLOSE c_get_slh_lines_csr;
      END IF;
      IF c_get_all_lines_csr%ISOPEN THEN
        CLOSE c_get_all_lines_csr;
      END IF;
      IF c_get_pay_psth_csr%ISOPEN THEN
        CLOSE c_get_pay_psth_csr;
      END IF;
      IF c_valid_khr_csr%ISOPEN THEN
        CLOSE c_valid_khr_csr;
      END IF;
      IF c_get_psth_csr%ISOPEN THEN
        CLOSE c_get_psth_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF c_get_sll_lines_csr%ISOPEN THEN
        CLOSE c_get_sll_lines_csr;
      END IF;
      IF c_get_slh_lines_csr%ISOPEN THEN
        CLOSE c_get_slh_lines_csr;
      END IF;
      IF c_get_all_lines_csr%ISOPEN THEN
        CLOSE c_get_all_lines_csr;
      END IF;
      IF c_get_pay_psth_csr%ISOPEN THEN
        CLOSE c_get_pay_psth_csr;
      END IF;
      IF c_valid_khr_csr%ISOPEN THEN
        CLOSE c_valid_khr_csr;
      END IF;
      IF c_get_psth_csr%ISOPEN THEN
        CLOSE c_get_psth_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS THEN
      IF c_get_sll_lines_csr%ISOPEN THEN
        CLOSE c_get_sll_lines_csr;
      END IF;
      IF c_get_slh_lines_csr%ISOPEN THEN
        CLOSE c_get_slh_lines_csr;
      END IF;
      IF c_get_all_lines_csr%ISOPEN THEN
        CLOSE c_get_all_lines_csr;
      END IF;
      IF c_get_pay_psth_csr%ISOPEN THEN
        CLOSE c_get_pay_psth_csr;
      END IF;
      IF c_valid_khr_csr%ISOPEN THEN
        CLOSE c_valid_khr_csr;
      END IF;
      IF c_get_psth_csr%ISOPEN THEN
        CLOSE c_get_psth_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    END validate_payments;

-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : get_so_asset_oec1
-- Description          : get_so_asset_oec1
-- Business Rules       :
-- Parameters           : Standard Parameters with p_khr_id, p_kle_id and p_subside_yn
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE get_so_asset_oec1(p_khr_id        IN NUMBER,
                             p_kle_id        IN NUMBER,
                             p_subside_yn    IN VARCHAR2,
                             x_return_status OUT NOCOPY VARCHAR2,
                             x_asset_oec     OUT NOCOPY NUMBER,
                             x_start_date    OUT NOCOPY DATE)
  IS
    l_return_status           VARCHAR2(3):= OKL_API.G_RET_STS_SUCCESS;
    l_msg_count               NUMBER;
    l_msg_data                VARCHAR2(32767);
    G_FORMULA_DIS             OKL_FORMULAE_V.NAME%TYPE := 'LINE_DISCOUNT';
    G_AMT_TOKEN     CONSTANT  VARCHAR2(200) := 'AMOUNT';
    G_CALC_AMOUNT   CONSTANT  VARCHAR2(200) := 'OKL_SEC_INVALID_INV_AMOUNT';
    l_api_version             NUMBER := 0;
    l_dis_amt                 NUMBER := 0;
    l_tot_oec_amt             NUMBER := 0;
    CURSOR get_oec_csr (p_khr_id      NUMBER,
                        p_kle_id      NUMBER)
    IS
    SELECT kle_rv.id asset_line_id,
           kle_rv.oec oec,
           cle_so.START_DATE
    FROM okc_k_headers_b chr_rv,
         okc_line_styles_b lse_rv,
         okl_k_lines kle_rv,
         okc_k_lines_b cle_rv,
         okc_rules_b rul_rv,
         okc_rule_groups_b rgp_rv,
         okc_line_styles_b lse_so,
         okc_k_lines_b cle_so,
         okc_rules_b rul_so,
         okc_rule_groups_b rgp_so
    WHERE rgp_so.cle_id = p_kle_id
    AND rgp_so.dnz_chr_id = p_khr_id
    AND rgp_so.rgd_code = 'SOPYSC'
    AND rgp_so.dnz_chr_id = rul_so.dnz_chr_id
    AND rgp_so.id = rul_so.rgp_id
    AND rul_so.rule_information_category = 'SOPMSC'
    AND rgp_so.cle_id = cle_so.id
    AND cle_so.dnz_chr_id = rul_so.dnz_chr_id
    AND cle_so.lse_id = lse_so.id
    AND lse_so.lty_code = 'SO_PAYMENT'
    AND rul_rv.object1_id1 = to_char(rul_so.id)
    AND rul_rv.dnz_chr_id = rul_so.dnz_chr_id
    AND rul_rv.rgp_id = rgp_rv.id
    AND rgp_rv.rgd_code = 'SOPSAD'
    AND rgp_rv.dnz_chr_id = rul_so.dnz_chr_id
    AND rgp_rv.cle_id = cle_rv.id
    AND cle_rv.lse_id = lse_rv.id
    AND lse_rv.lty_code = 'FREE_FORM1'
    AND rgp_rv.dnz_chr_id = chr_rv.id
    AND chr_rv.START_DATE = cle_rv.START_DATE
    AND cle_rv.id = kle_rv.id;
  BEGIN
    IF p_subside_yn NOT IN ('Y','N') THEN
      OKL_API.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_INVALID_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'p_subside_yn');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    FOR get_oec_rec IN get_oec_csr(p_khr_id => p_khr_id,
                                   p_kle_id => p_kle_id) LOOP
      IF p_subside_yn = 'Y' THEN
        execute_formula(p_api_version   => l_api_version,
                        p_init_msg_list => OKL_API.G_TRUE,
                        x_return_status => l_return_status,
                        x_msg_count     => l_msg_count,
                        x_msg_data      => l_msg_data,
                        p_formula_name  => G_FORMULA_DIS,
                        p_contract_id   => p_khr_id,
                        p_line_id       => get_oec_rec.asset_line_id,
                        x_value         => l_dis_amt);
        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          OKL_API.set_message(p_app_name     => G_APP_NAME,
                              p_msg_name     => G_CALC_AMOUNT);
          EXIT WHEN(l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          OKL_API.set_message(p_app_name     => G_APP_NAME,
                              p_msg_name     => G_CALC_AMOUNT);
          EXIT WHEN(l_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        l_tot_oec_amt := l_tot_oec_amt + (get_oec_rec.oec - nvl(l_dis_amt,0));
      ELSE
        l_tot_oec_amt := l_tot_oec_amt + get_oec_rec.oec;
      END IF;
      x_start_date := get_oec_rec.START_DATE;
    END LOOP;
    IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_asset_oec := l_tot_oec_amt;
    IF NVL(x_asset_oec,0) = 0 THEN
      OKL_API.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_CALC_AMOUNT);
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_return_status := l_return_status;
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF get_oec_csr%ISOPEN THEN
        CLOSE get_oec_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OTHERS THEN
      IF get_oec_csr%ISOPEN THEN
        CLOSE get_oec_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
  END get_so_asset_oec1;
-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : get_so_residual_value1
-- Description          : get_so_residual_value1
-- Business Rules       :
-- Parameters           : Standard Parameters with p_khr_id, p_kle_id and p_subside_yn
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE get_so_residual_value1(p_khr_id         IN NUMBER,
                                  p_kle_id         IN NUMBER,
                                  p_subside_yn     IN VARCHAR2,
                                  x_return_status  OUT NOCOPY VARCHAR2,
                                  x_residual_value OUT NOCOPY NUMBER,
                                  x_start_date     OUT NOCOPY DATE)
  IS
    l_return_status           VARCHAR2(3):= OKL_API.G_RET_STS_SUCCESS;
    l_msg_count               NUMBER;
    l_msg_data                VARCHAR2(32767);
    G_FORMULA_DIS             OKL_FORMULAE_V.NAME%TYPE := 'LINE_DISCOUNT';
    G_AMT_TOKEN     CONSTANT  VARCHAR2(200) := 'AMOUNT';
    G_CALC_AMOUNT   CONSTANT  VARCHAR2(200) := 'OKL_SEC_INVALID_INV_AMOUNT';
    l_api_version             NUMBER := 0;
    l_dis_amt                 NUMBER := 0;
    l_res_val                 NUMBER := 0;
    l_tot_res_val             NUMBER := 0;
--start changed by abhsaxen for Bug#6174484
    CURSOR get_rvs_csr (p_khr_id     NUMBER,
                        p_kle_id     NUMBER)
    IS
	SELECT kle_rv.id asset_line_id,
	  kle_rv.oec oec,
	  kle_rv.residual_percentage residual_percent,
	  cle_so.start_date
	FROM okc_k_headers_b chr_rv,
	  okc_line_styles_b lse_rv,
	  okl_k_lines kle_rv,
	  okc_k_lines_b cle_rv,
	  okc_rules_b rul_rv,
	  okc_rule_groups_b rgp_rv,
	  okc_line_styles_b lse_so,
	  okc_k_lines_b cle_so,
	  okc_rules_b rul_so,
	  okc_rule_groups_b rgp_so
	WHERE rgp_so.cle_id = p_kle_id
	 AND rgp_so.dnz_chr_id = p_khr_id
	 AND rgp_so.rgd_code = 'SOPYSC'
	 AND rgp_so.dnz_chr_id = rul_so.dnz_chr_id
	 AND rgp_so.id = rul_so.rgp_id
	 AND rul_so.rule_information_category = 'SOPMSC'
	 AND rgp_so.cle_id = cle_so.id
	 AND cle_so.dnz_chr_id = rul_so.dnz_chr_id
	 AND cle_so.lse_id = lse_so.id
	 AND lse_so.lty_code = 'SO_PAYMENT'
	 AND rul_rv.object1_id1 = to_char(rul_so.id)
	 AND rul_rv.dnz_chr_id = rul_so.dnz_chr_id
	 AND rul_rv.rgp_id = rgp_rv.id
	 AND rgp_rv.rgd_code = 'SOPSAD'
	 AND rgp_rv.dnz_chr_id = cle_rv.dnz_chr_id
	 AND rgp_rv.cle_id = cle_rv.id
	 AND cle_rv.lse_id = lse_rv.id
	 AND lse_rv.lty_code = 'FREE_FORM1'
	 AND rgp_rv.dnz_chr_id = chr_rv.id
	 AND chr_rv.start_date = cle_rv.start_date
	 AND cle_rv.id = kle_rv.id;
--end changed by abhsaxen for Bug#6174484
  BEGIN
    IF p_subside_yn NOT IN ('Y','N') THEN
      OKL_API.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_INVALID_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'p_subside_yn');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    FOR get_rvs_rec IN get_rvs_csr(p_khr_id => p_khr_id,
                                   p_kle_id => p_kle_id) LOOP
      IF p_subside_yn = 'Y' THEN
        execute_formula(p_api_version   => l_api_version,
                        p_init_msg_list => OKL_API.G_TRUE,
                        x_return_status => l_return_status,
                        x_msg_count     => l_msg_count,
                        x_msg_data      => l_msg_data,
                        p_formula_name  => G_FORMULA_DIS,
                        p_contract_id   => p_khr_id,
                        p_line_id       => get_rvs_rec.asset_line_id,
                        x_value         => l_dis_amt);
        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          OKL_API.set_message(p_app_name     => G_APP_NAME,
                              p_msg_name     => G_CALC_AMOUNT);
          EXIT WHEN(l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          OKL_API.set_message(p_app_name     => G_APP_NAME,
                              p_msg_name     => G_CALC_AMOUNT);
          EXIT WHEN(l_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        IF get_rvs_rec.residual_percent IS NOT NULL THEN
          l_res_val := get_rvs_rec.residual_percent * (get_rvs_rec.oec - nvl(l_dis_amt,0)) /100;
          l_tot_res_val := l_tot_res_val + l_res_val;
        ELSE
          l_tot_res_val := 0;
          EXIT;
        END IF;
      ELSE
        IF get_rvs_rec.residual_percent IS NOT NULL THEN
          l_res_val := get_rvs_rec.residual_percent * get_rvs_rec.oec /100;
          l_tot_res_val := l_tot_res_val + l_res_val;
        ELSE
          l_tot_res_val := 0;
          EXIT;
        END IF;
      END IF;
      x_start_date := get_rvs_rec.START_DATE;
    END LOOP;
    IF l_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_residual_value := l_tot_res_val;
    IF (x_residual_value IS NULL) THEN -- bug# 3381546.
      OKL_API.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_INVALID_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Residual Value');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_return_status := l_return_status;
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF get_rvs_csr%ISOPEN THEN
        CLOSE get_rvs_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OTHERS THEN
      IF get_rvs_csr%ISOPEN THEN
        CLOSE get_rvs_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
  END get_so_residual_value1;

-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Santhosh Siruvole
-- Procedure Name       : get_so_asset_oec
-- Description          : get_so_asset_oec
-- Business Rules       :
-- Parameters           : Standard Parameters with p_khr_id, p_kle_id and p_subside_yn
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE get_so_residual_value(p_khr_id         IN NUMBER,
                                  p_kle_id         IN NUMBER,
                                  p_subside_yn     IN VARCHAR2,
                                  x_return_status  OUT NOCOPY VARCHAR2,
                                  x_residual_value OUT NOCOPY NUMBER,
                                  x_start_date     OUT NOCOPY DATE)
  IS
    l_return_status           VARCHAR2(3):= OKL_API.G_RET_STS_SUCCESS;
    l_msg_count               NUMBER;
    l_msg_data                VARCHAR2(32767);
    G_FORMULA_DIS             OKL_FORMULAE_V.NAME%TYPE := 'LINE_CAP_AMNT';
    G_AMT_TOKEN     CONSTANT  VARCHAR2(200) := 'AMOUNT';
    G_CALC_AMOUNT   CONSTANT  VARCHAR2(200) := 'OKL_SEC_INVALID_INV_AMOUNT';
    l_api_version             NUMBER := 0;

    Cursor khr_type_csr IS
    Select SCS_CODE,
           START_DATE
    From   okc_K_headers_b chr
    Where  chr.id = p_khr_id;

    khr_type_rec khr_type_csr%ROWTYPE;

  Begin

   OPEN khr_type_csr;
   FETCH khr_type_csr INTO khr_type_rec;
   CLOSE khr_type_csr;

   IF (INSTR( khr_type_rec.scs_code, 'LEASE') > 0) THEN
      execute_formula(p_api_version   => 1.0,
                      p_init_msg_list => OKL_API.G_TRUE,
                      x_return_status => l_return_status,
                      x_msg_count     => l_msg_count,
                      x_msg_data      => l_msg_data,
                      p_formula_name  => 'LINE_RESIDUAL_VALUE',
                      p_contract_id   => p_khr_id,
                      p_line_id       => p_kle_id,
                      x_value         => x_residual_value);
      IF l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF l_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE  OKL_API.G_EXCEPTION_ERROR;
      END IF;

      x_start_date := khr_type_rec.start_date;

   Else

      get_so_residual_value1(p_khr_id        => p_khr_id,
                            p_kle_id         => p_kle_id,
                            p_subside_yn     => p_subside_yn,
                            x_return_status  => x_return_status,
                            x_residual_value => x_residual_value,
                            x_start_date     => x_start_date);

   End If;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF khr_type_csr%ISOPEN THEN
        CLOSE khr_type_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OTHERS THEN
      IF khr_type_csr%ISOPEN THEN
        CLOSE khr_type_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;

  End get_so_residual_value;

-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Santhosh Siruvole
-- Procedure Name       : get_so_asset_oec
-- Description          : get_so_asset_oec
-- Business Rules       :
-- Parameters           : Standard Parameters with p_khr_id, p_kle_id and p_subside_yn
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE get_so_asset_oec(p_khr_id        IN NUMBER,
                             p_kle_id        IN NUMBER,
                             p_subside_yn    IN VARCHAR2,
                             x_return_status OUT NOCOPY VARCHAR2,
                             x_asset_oec     OUT NOCOPY NUMBER,
                             x_start_date    OUT NOCOPY DATE)
  IS
    l_return_status           VARCHAR2(3):= OKL_API.G_RET_STS_SUCCESS;
    l_msg_count               NUMBER;
    l_msg_data                VARCHAR2(32767);
    G_FORMULA_DIS             OKL_FORMULAE_V.NAME%TYPE := 'LINE_CAP_AMNT';
    G_AMT_TOKEN     CONSTANT  VARCHAR2(200) := 'AMOUNT';
    G_CALC_AMOUNT   CONSTANT  VARCHAR2(200) := 'OKL_SEC_INVALID_INV_AMOUNT';
    l_api_version             NUMBER := 0;

    Cursor khr_type_csr IS
    Select SCS_CODE,
           START_DATE
    From   okc_K_headers_b chr
    Where  chr.id = p_khr_id;

    khr_type_rec khr_type_csr%ROWTYPE;

  Begin

   OPEN khr_type_csr;
   FETCH khr_type_csr INTO khr_type_rec;
   CLOSE khr_type_csr;

   IF (INSTR( khr_type_rec.scs_code, 'LEASE') > 0) THEN
      execute_formula(p_api_version   => 1.0,
                      p_init_msg_list => OKL_API.G_TRUE,
                      x_return_status => l_return_status,
                      x_msg_count     => l_msg_count,
                      x_msg_data      => l_msg_data,
                      p_formula_name  => 'LINE_CAP_AMNT',
                      p_contract_id   => p_khr_id,
                      p_line_id       => p_kle_id,
                      x_value         => x_asset_oec);
      IF l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF l_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE  OKL_API.G_EXCEPTION_ERROR;
      END IF;

      x_start_date := khr_type_rec.start_date;

   Else

       get_so_asset_oec1(p_khr_id        => p_khr_id,
                         p_kle_id        => p_kle_id,
                         p_subside_yn    => p_subside_yn,
                         x_return_status => x_return_status,
                         x_asset_oec     => x_asset_oec,
                         x_start_date    => x_start_date);

   End If;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF khr_type_csr%ISOPEN THEN
        CLOSE khr_type_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OTHERS THEN
      IF khr_type_csr%ISOPEN THEN
        CLOSE khr_type_csr;
      END IF;
      x_return_status := OKL_API.G_RET_STS_ERROR;

  End get_so_asset_oec;

-------------------------------------------------------------------------------------------------
-- Start of Commnets
-- Badrinath Kuchibholta
-- Procedure Name       : extract_params_so
-- Description          : extract_params_so
-- Business Rules       :
-- Parameters           : Standard Parameters with p_khr_id, p_kle_id and p_subside_yn
-- Version              :
-- End of Commnets
-------------------------------------------------------------------------------------------------
  PROCEDURE extract_params_so(
            p_api_version                IN  NUMBER,
            p_init_msg_list              IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            p_chr_id                     IN  OKC_K_HEADERS_B.ID%TYPE,
            p_cle_id                     IN  OKC_K_LINES_B.ID%TYPE,
            x_return_status              OUT NOCOPY VARCHAR2,
            x_msg_count                  OUT NOCOPY NUMBER,
            x_msg_data                   OUT NOCOPY VARCHAR2,
            x_csm_lease_header           OUT NOCOPY okl_create_streams_pub.csm_lease_rec_type,
            x_csm_one_off_fee_tbl        OUT NOCOPY okl_create_streams_pub.csm_one_off_fee_tbl_type,
            x_csm_periodic_expenses_tbl  OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_yields_tbl             OUT NOCOPY okl_create_streams_pub.csm_yields_tbl_type,
            x_req_stream_types_tbl       OUT NOCOPY okl_create_streams_pub.csm_stream_types_tbl_type,
            x_csm_line_details_tbl       OUT NOCOPY okl_create_streams_pub.csm_line_details_tbl_type,
            x_rents_tbl                  OUT NOCOPY okl_create_streams_pub.csm_periodic_expenses_tbl_type,
            x_csm_loan_header            OUT NOCOPY okl_create_streams_pvt.csm_loan_rec_type,
            x_csm_loan_lines_tbl         OUT NOCOPY okl_create_streams_pvt.csm_loan_line_tbl_type,
            x_csm_loan_levels_tbl        OUT NOCOPY okl_create_streams_pvt.csm_loan_level_tbl_type)
  IS
    l_api_name               CONSTANT VARCHAR2(30) := 'EXTRACT_PARAMS_SO';
    lv_fed_only                       VARCHAR2(3) := 'N';
    ln_value                          NUMBER := 0;
-- Start of BAKUCHIB modification bug#3121708
    ln_diff_days                      NUMBER := 0;
    ld_last_start_date                okc_k_headers_b.start_date%TYPE;
    ld_last_end_date                  okc_k_headers_b.start_date%TYPE;
    ld_chr_end_date                   okc_k_headers_b.end_date%TYPE;
-- End of BAKUCHIB modification bug#3121708
    lv_fed_only_tax_book              OKL_TXD_ASSETS_B.TAX_BOOK%TYPE := NULL;
    ln_org_id                         okc_k_headers_b.authoring_org_id%TYPE;
    lv_currency_code                  okc_k_headers_b.currency_code%TYPE;
    l_rnd_basis_percent               NUMBER;
    l_level_type                      NUMBER;
    l_strm_name                       VARCHAR2(200);
    ln_fin_yn                         NUMBER := 0;
    i                                 BINARY_INTEGER := 0;
    j                                 BINARY_INTEGER := 0;
    k                                 BINARY_INTEGER := 0;
    l                                 BINARY_INTEGER := 0;
    m                                 BINARY_INTEGER := 0;
    idx                               BINARY_INTEGER := 0;
    l_basis_percent                   NUMBER;
    styid                             NUMBER;
	--l_sty_id                          NUMBER;
    l_sty_id                          strm_rec_type;
    l_salvage                         NUMBER;
    l_purchase_option                 VARCHAR2(256);
    l_deal_type                       VARCHAR2(256) := NULL;
    l_purchase_option_amount          NUMBER;
    l_value                           OKL_K_LINES.CAPITAL_AMOUNT%TYPE;
    ld_asset_start_date               DATE;
    l_tot_asset_oec                   NUMBER := 0;
    l_asset_oec                       NUMBER := 0;
    l_cap_fee_amt                     NUMBER := 0;
    l_total_lending                   NUMBER := 0;
    l_lending                         NUMBER := 0;
    l_lne_tot_lend                    NUMBER := 0;
    l_tradein                         OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_capreduc                        OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_feecap                          OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_capint                          OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_discount                        OKL_K_LINES.CAPITAL_AMOUNT%TYPE := 0;
    l_corp_dep_cost                   OKL_TXL_ASSETS_B.DEPRECIATION_COST%TYPE := 0;
    l_tax_dep_cost                    OKL_TXD_ASSETS_B.COST%TYPE := 0;
    l_lease_tax_owner                 okc_rules_b.rule_information1%TYPE := NULL;
    -- get the Contract Header info
    CURSOR l_hdr_csr(chrId  NUMBER)
    IS
    SELECT chr.orig_system_source_code,
           chr.start_date,
           chr.end_date,
           chr.template_yn,
           chr.authoring_org_id,
           chr.inv_organization_id,
           khr.deal_type,
           pdt.id  pid,
           NVL(pdt.reporting_pdt_id, -1) report_pdt_id,
           chr.currency_code currency_code,
           khr.term_duration term
    FROM okc_k_headers_v chr,
         okl_k_headers khr,
         okl_products_v pdt
    WHERE khr.id = chr.id
    AND chr.id = chrId
    AND khr.pdt_id = pdt.id(+);
    -- get the Header rule information
    CURSOR l_hdrrl_csr(rgcode okc_rule_groups_b.rgd_code%TYPE,
                       rlcat  okc_rules_b.rule_information_category%TYPE,
                       chrId NUMBER)
    IS
    SELECT crl.object1_id1,
           crl.rule_information1,
           crl.rule_information2,
           crl.rule_information3,
           crl.rule_information4,
           crl.rule_information5,
           crl.rule_information6,
           crl.rule_information10,
           crl.rule_information13,
           crl.rule_information11
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId;
    -- get the install based location
    CURSOR ib_csr (chrId NUMBER)
    IS
    SELECT DISTINCT hl.country country
    FROM hz_locations hl,
         hz_party_sites hps,
         hz_party_site_uses hpsu,
         okl_txl_itm_insts iti,
         okc_line_styles_b lse_ib,
         okc_k_lines_b cle_ib
    WHERE cle_ib.dnz_chr_id = chrId
    AND cle_ib.lse_id = lse_ib.id
    AND lse_ib.lty_code = 'INST_ITEM'
    AND iti.kle_id = cle_ib.id
    AND iti.object_id1_new = hpsu.party_site_use_id
    AND iti.object_id2_new = '#'
    AND hpsu.party_site_id = hps.party_site_id
    AND hps.location_id = hl.location_id;
    -- get the Contract line info
    CURSOR l_line_rec_csr(chrid NUMBER, lnetype VARCHAR2)
    IS
    SELECT kle.id,
           kle.oec,
           kle.residual_code,
           kle.capital_amount,
           kle.delivered_date,
           kle.date_funding_required,
           kle.residual_grnty_amount,
           kle.residual_code guarantee_type,
           kle.date_funding,
           kle.residual_value,
           kle.amount,
           kle.price_negotiated,
           kle.start_date,
           kle.end_date,
           kle.orig_system_id1,
           kle.fee_type,
           kle.initial_direct_cost,
           tl.item_description,
           tl.name
    FROM okl_k_lines_full_v kle,
         okc_line_styles_b lse,
         okc_k_lines_tl tl,
         okc_statuses_b sts
    WHERE kle.lse_id = lse.id
    AND lse.lty_code = lnetype
    AND tl.id = kle.id
    AND tl.language = userenv('LANG')
    AND kle.dnz_chr_id = chrid
    AND sts.code = kle.sts_code
--Start of bug#3121708 modification BAKUCHIB
    AND sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED');
--End of bug#3121708 modification BAKUCHIB

    -- get the Contract line info
    CURSOR l_so_line_rec_csr(p_chr_id NUMBER, p_cle_id NUMBER)
    IS
    SELECT kle.id,
           kle.oec,
           kle.residual_code,
           kle.capital_amount,
           kle.delivered_date,
           kle.date_funding_required,
           kle.residual_grnty_amount,
           kle.date_funding,
           kle.residual_value,
           kle.amount,
           kle.price_negotiated,
           kle.start_date,
           kle.end_date,
           kle.orig_system_id1,
           kle.fee_type,
           kle.initial_direct_cost,
           tl.item_description,
           tl.name
    FROM okl_k_lines_full_v kle,
         okc_line_styles_b lse,
         okc_k_lines_tl tl,
         okc_statuses_b sts
    WHERE kle.lse_id = lse.id
    AND lse.lty_code = 'SO_PAYMENT'
    AND kle.id = p_cle_id
    AND tl.id = kle.id
    AND tl.language = userenv('LANG')
    AND kle.dnz_chr_id = p_chr_id
    AND sts.code = kle.sts_code
--Start of bug#3121708 modification BAKUCHIB
    AND sts.ste_code not in ('HOLD', 'EXPIRED', 'CANCELLED');
--End of bug#3121708 modification BAKUCHIB

    -- get the txl transaction information
    CURSOR l_tx_csr(ass VARCHAR2)
    IS
    SELECT txl.life_in_months,
           txl.corporate_book,
           txl.deprn_method,
           txl.in_service_date,
           txl.salvage_value,
           txl.percent_salvage_value,
           txl.depreciation_cost,
           mth.id1,
           ct.prorate_convention_code
    FROM okl_txl_assets_b txl,
         okx_asst_dep_methods_v mth,
         okx_ast_ct_bk_dfs_v ct
    WHERE mth.method_code = txl.deprn_method
    AND mth.life_in_months = txl.life_in_months
    AND ct.category_id = txl.depreciation_id
    AND ct.book_type_code = txl.corporate_book
    AND txl.asset_number = ass
-- Start of Bug#3388812 Modification - BAKUCHIB
    AND txl.in_service_date BETWEEN ct.start_dpis AND NVL(ct.end_dpis,txl.in_service_date);
-- End of Bug#3388812  Modification - BAKUCHIB
    -- get the txd transaction information
    CURSOR l_txd_csr(ass VARCHAR2)
    IS
    SELECT txd.cost,
           txd.deprn_method_tax,
           txd.life_in_months_tax,
           txd.salvage_value,
           txd.tax_book,
           mth.id1
    FROM okl_txd_assets_v txd,
         okx_asst_dep_methods_v mth
    WHERE mth.method_code = txd.deprn_method_tax
    AND mth.life_in_months = txd.life_in_months_tax
    AND txd.asset_number = ass;
    -- get the setup values for tax book and coporate book
    CURSOR l_txtrans_csr (Book  Varchar2)
    IS
    SELECT trns.value,
           books.book_type_code
    FROM okl_sgn_translations trns,
         fa_book_controls books
    WHERE trns.jtot_object1_code = 'FA_BOOK_CONTROLS'
    AND trns.object1_id1 = books.book_type_code
    AND trns.sgn_code = 'STMP'
    AND books.book_type_code = Book;
    -- Get the stream type id
    CURSOR l_strmid_csr (strmName VARCHAR2)
    IS
    SELECT id styid
    FROM okl_strm_type_tl
    WHERE LANGUAGE = 'US'
    AND NAME = strmName;
    -- get Stream name
    CURSOR strm_name_csr (styid NUMBER)
    IS
    SELECT tl.name name,
           stm.stream_type_class stream_type_class,
		   stm.stream_type_purpose,
           tl.description alloc_basis,
           stm.capitalize_yn capitalize_yn,
           stm.periodic_yn  periodic_yn
    FROM okl_strm_type_b stm,
         okl_strm_type_tl tl
    WHERE tl.id = stm.id
    AND tl.language = 'US'
    AND stm.id = styid;
    -- get the LASLH self referencing Line based rule information
    CURSOR l_rl_csr1(rgcode okc_rule_groups_b.rgd_code%TYPE,
                     rlcat  okc_rules_b.rule_information_category%TYPE,
                     chrId  NUMBER,
                     cleId  NUMBER )
    IS
    SELECT crl.id slh_id,
           crl.object1_id1,
           crl.rule_information1,
           crl.rule_information2,
           crl.rule_information3,
           crl.rule_information5,
           crl.rule_information6,
           crl.rule_information7,
           crl.rule_information8,
           crl.rule_information13,
           crl.rule_information10
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    ORDER BY crl.rule_information1;
    -- get the LASLL self referencing Line based rule information
    CURSOR l_rl_csr(rlgpId NUMBER,
                    rgcode okc_rule_groups_b.rgd_code%TYPE,
                    rlcat  okc_rules_b.rule_information_category%TYPE,
                    chrId  NUMBER,
                    cleId  NUMBER )
    IS
    SELECT crl.object1_id1,
           crl.rule_information1,
           crl.rule_information2,
           crl.rule_information3,
           crl.rule_information5,
           crl.rule_information6,
           crl.rule_information7,
           crl.rule_information8,
           crl.rule_information13,
           crl.rule_information10
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crl.object2_id1 = rlgpId
    AND crg.rgd_code = rgcode
    AND crl.rule_information_category = rlcat
    AND crg.dnz_chr_id = chrId
    AND crg.cle_id = cleId
    ORDER BY FND_DATE.canonical_to_date(crl.rule_information2);
    -- Get Structure
    CURSOR l_struct_csr(chrId NUMBER)
    IS
    SELECT DISTINCT(nvl(crl.rule_information5,-1)) structure
    FROM okc_rule_groups_b crg,
         okc_rules_b crl
    WHERE crl.rgp_id = crg.id
    AND crg.rgd_code = 'LALEVL'
    AND crl.rule_information_category = 'LASLL'
    AND crg.dnz_chr_id = chrId;
    -- To check if the chr_id has Financed fee feetype defined
    CURSOR l_financed_type_csr (chrId NUMBER)
    IS
    SELECT 1
    FROM dual
    WHERE EXISTS (SELECT 1
                  FROM okc_k_lines_b cle,
                       okc_line_styles_b lse,
                       okl_k_lines kle
                  WHERE cle.dnz_chr_id = chrId
                  AND cle.lse_id = lse.id
                  AND lse.lty_code = 'FEE'
                  AND cle.id = kle.id
                  AND kle.fee_type  in ('ROLLOVER', 'FINANCED'));
    -- get the currency_code and Authoring_org_id
    -- from okc_k_headers_b
    CURSOR get_org_id(p_chr_id  okc_k_headers_b.id%TYPE)
    IS
    SELECT authoring_org_id,
           currency_code
    FROM okc_k_headers_b
    WHERE id = p_chr_id;
    -- Get Capitalized fees amount for a contract
    CURSOR get_cap_fee_amt(p_chr_id  okc_k_headers_b.id%TYPE)
    IS
    SELECT NVL(kle.amount, 0) total_cap_fee
    FROM okl_k_lines kle,
         okc_k_lines_b cle,
         okc_k_items cim,
         okl_strm_type_b sty
    WHERE cle.dnz_chr_id = p_chr_id
    AND cle.id = kle.id
    AND cle.id = cim.cle_id
    AND cim.jtot_object1_code = 'OKL_STRMTYP'
    AND cim.object1_id1 = to_char(sty.id)
    AND sty.capitalize_yn = 'Y';
    -- get line oec
  -- nikshah -- Bug # 5484903 Fixed,
  -- Removed CURSOR get_oec_csr

-- Start of BAKUCHIB modification bug#3121708
    -- Get diff in days between contract end_date
    -- and max payment leve(LASLL) end_date
    CURSOR c_diff_days_csr(p_chr_id  okc_k_headers_b.id%TYPE,
                           p_cle_id  okc_k_lines_b.id%TYPE,
                           p_slh_id  okc_rule_groups_b.id%TYPE)
    IS
    SELECT chrv.end_date chr_end_date,
           MAX(FND_DATE.canonical_to_date(sll.rule_information2)) pay_start_date,
           MAX(DECODE(SLL.rule_information7,
                      NULL,(ADD_MONTHS(FND_DATE.canonical_to_date(sll.rule_information2),to_number(SLL.rule_information3)*DECODE(sll.object1_id1, 'M', 1, 'Q', 3, 'S', 6, 'A', 12))-1),
                      TO_NUMBER(SLL.rule_information7),FND_DATE.canonical_to_date(sll.rule_information2)+SLL.rule_information7-1,
                      (ADD_MONTHS(FND_DATE.canonical_to_date(sll.rule_information2),to_number(SLL.rule_information3)*DECODE(sll.object1_id1, 'M', 1, 'Q', 3, 'S', 6, 'A', 12))-1))) pay_end_date
    FROM okc_rules_b sll,
         okc_rules_b slh,
         okc_rule_groups_b rgp,
         okc_k_headers_b chrv
    WHERE rgp.dnz_chr_id = p_chr_id
    AND rgp.cle_id  = p_cle_id
    AND slh.id = p_slh_id
    AND rgp.rgd_code =  'LALEVL'
    AND rgp.id = slh.rgp_id
    AND slh.rule_information_category = 'LASLH'
    AND TO_CHAR(slh.id) = sll.object2_id1
    AND sll.rule_information_category = 'LASLL'
    AND chrv.id = rgp.dnz_chr_id
    GROUP BY chrv.end_date;
-- End of BAKUCHIB modification bug#3121708
    l_line_rec                        l_line_rec_csr%ROWTYPE;
    l_hdr_rec                         l_hdr_csr%ROWTYPE;
    l_rl_rec                          l_rl_csr%ROWTYPE;
    l_hdrrl_rec                       l_hdrrl_csr%ROWTYPE;
    l_rl_rec1                         l_rl_csr1%ROWTYPE;
    l_tx_rec                          l_tx_csr%ROWTYPE;
    l_txd_rec                         l_txd_csr%ROWTYPE;
    l_txtrans_rec                     l_txtrans_csr%ROWTYPE;
    l_strm_name_rec                   strm_name_csr%ROWTYPE;
    l_ib_rec                          ib_csr%ROWTYPE;
    l_strmid_rec                      l_strmid_csr%ROWTYPE;
    l_csm_lease_header                okl_create_streams_pub.csm_lease_rec_type;
    l_csm_line_details_tbl            okl_create_streams_pub.csm_line_details_tbl_type;
    l_rents_tbl                       okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_csm_periodic_expenses_tbl       okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    l_csm_one_off_fee_tbl             okl_create_streams_pub.csm_one_off_fee_tbl_type;
    l_csm_stream_types_tbl            okl_create_streams_pub.csm_stream_types_tbl_type;
    l_req_stream_types_tbl            okl_create_streams_pub.csm_stream_types_tbl_type;
    l_csm_yields_tbl                  okl_create_streams_pub.csm_yields_tbl_type;
    l_csm_loan_header                 okl_create_streams_pvt.csm_loan_rec_type;
    l_csm_loan_details_tbl            okl_create_streams_pvt.csm_loan_line_tbl_type;
    l_csm_loan_levels_tbl             okl_create_streams_pvt.csm_loan_level_tbl_type;

	l_pdt_id_rec l_hdr_pdt_csr%ROWTYPE;

    --mansrini : Code for VR build
    CURSOR  get_day_conv_on_contrct
    IS
    SELECT
--Added by srsreeni for bug6076113
--            rate_params.days_in_a_year_code,
--            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code
            DECODE(rate_params.days_in_a_month_code,'30','360',rate_params.days_in_a_month_code) days_in_a_month_code,
            rate_params.days_in_a_year_code
--srsreeni bug6076113 ends
    FROM    okl_k_rate_params rate_params
    WHERE   khr_id = p_chr_id;

    CURSOR  get_day_conv_on_sgt
    IS
    SELECT  DECODE(gts.days_in_month_code,'30','360',gts.days_in_month_code) days_in_month_code,
            gts.days_in_yr_code
    FROM
            okl_k_headers khr,
            okl_products_v pdt,
            okl_ae_tmpt_sets_v aes,
            OKL_ST_GEN_TMPT_SETS gts
    WHERE
            khr.pdt_id = pdt.id AND
            pdt.aes_id = aes.id AND
            aes.gts_id = gts.id AND
            khr.id  = p_chr_id;

    l_days_in_month_code OKL_ST_GEN_TMPT_SETS.days_in_month_code%type;
    l_days_in_yr_code  OKL_ST_GEN_TMPT_SETS.days_in_yr_code%type;

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
	-- To get product id
    OPEN  l_hdr_pdt_csr(p_chr_id);
    FETCH l_hdr_pdt_csr INTO l_pdt_id_rec;
    CLOSE l_hdr_pdt_csr;

    -- get Header info
    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr INTO l_hdr_rec;
    IF l_hdr_csr%NOTFOUND THEN
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;

    --get day convention info : mansrini
    OPEN  get_day_conv_on_contrct;
    FETCH get_day_conv_on_contrct INTO l_days_in_month_code,l_days_in_yr_code;
    CLOSE get_day_conv_on_contrct;

--Added by srsreeni for bug6076113
--    IF l_days_in_month_code IS NULL OR l_days_in_month_code IS NULL
    IF l_days_in_month_code IS NULL OR l_days_in_yr_code IS NULL
--srsreeni bug6076113 ends
    THEN
      OPEN  get_day_conv_on_sgt;
      FETCH get_day_conv_on_sgt INTO l_days_in_month_code,l_days_in_yr_code;
      CLOSE get_day_conv_on_sgt;
    END IF;

    -- Validating the Deal type
    IF l_hdr_rec.deal_type IS NOT NULL OR
       l_hdr_rec.deal_type <> OKL_API.G_MISS_CHAR THEN
      l_deal_type := l_hdr_rec.deal_type;
    ELSE
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_REQUIRED_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Deal_type');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    IF l_deal_type IN ('LEASEDF','LEASEOP','LEASEST') THEN
      -- Get the Lease owner info
      OPEN  l_hdrrl_csr('LATOWN', 'LATOWN',p_chr_id);
      FETCH l_hdrrl_csr INTO l_hdrrl_rec;
      IF(l_hdrrl_csr%NOTFOUND) THEN
        okl_api.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Contract id');
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF l_hdrrl_csr%FOUND THEN
        l_csm_lease_header.irs_tax_treatment_method := l_hdrrl_rec.RULE_INFORMATION1;
        -- Start of Bug#3388812 modification - BAKUCHIB
        l_lease_tax_owner := l_hdrrl_rec.RULE_INFORMATION1;
        -- End of Bug#3388812 modification - BAKUCHIB
      END IF;
      CLOSE l_hdrrl_csr;
      -- Validating the Deal type
      IF l_hdr_rec.deal_type IS NOT NULL OR
         l_hdr_rec.deal_type <> OKL_API.G_MISS_CHAR THEN
        l_deal_type := l_hdr_rec.deal_type;
      ELSE
        l_csm_lease_header.irs_tax_treatment_method := 'LESSOR';
      END IF;
      l_csm_lease_header.khr_id                     := p_chr_id;
      l_csm_lease_header.date_payments_commencement := l_hdr_rec.start_date;
      l_csm_lease_header.fasb_acct_treatment_method := l_deal_type;
      l_csm_lease_header.date_delivery              := l_hdr_rec.start_date;
      l_csm_lease_header.term                       := l_hdr_rec.term;
      l_csm_lease_header.pdt_id                     := l_hdr_rec.pid;
      -- Checking if the chr_id is having a financed fee to set
      -- the sif_code accordingly
      OPEN  l_financed_type_csr (chrId => p_chr_id);
      FETCH l_financed_type_csr INTO ln_fin_yn;
      CLOSE l_financed_type_csr;
      IF ln_fin_yn = 1 THEN
        l_csm_lease_header.sif_mode  := OKL_CREATE_STREAMS_PUB.G_MODE_BOTH;
      ELSIF ln_fin_yn = 0 THEN
        l_csm_lease_header.sif_mode  := OKL_CREATE_STREAMS_PUB.G_MODE_LESSOR;
      END IF;
      -- Getting the install base location
      OPEN  ib_csr(p_chr_id);
      FETCH ib_csr INTO l_ib_rec;
      IF ib_csr%NOTFOUND THEN
        okl_api.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Contract id');
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      END IF;
      CLOSE ib_csr;
      l_csm_lease_header.country := l_ib_rec.country;
      l_csm_lease_header.orp_code := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
      l_csm_lease_header.rvi_yn := OKL_CREATE_STREAMS_PUB.G_FND_NO;
      -- Fetching the Header rule for Residual value insurance premium
      OPEN  l_hdrrl_csr('LARVIN', 'LARVAU', TO_NUMBER(p_chr_id));
      FETCH l_hdrrl_csr INTO l_hdrrl_rec;
      CLOSE l_hdrrl_csr;
      IF l_hdrrl_rec.rule_information1 = 'Y' THEN
	  -- Added and commented by HKPATEL
	    IF(g_rep_req_yn = 'Y') THEN

          get_primary_stream_type
          (
           p_khr_id =>p_chr_id,
           p_pdt_id =>l_pdt_id_rec.report_pdt_id,
           p_primary_sty_purpose =>'RESIDUAL_VALUE_INSURANCE_PREMIUM',
           x_return_status => x_return_status,
           x_primary_sty_id =>l_sty_id
          );

	    ELSE

	      get_primary_stream_type
	      (
 	      p_khr_id => p_chr_id,
 	      p_primary_sty_purpose => 'RESIDUAL_VALUE_INSURANCE_PREMIUM',
 	      x_return_status => x_return_status,
 	      x_primary_sty_id =>l_sty_id
	      );

	    END IF;
	  /*
        SELECT  nvl(id,-1)
        INTO styid
        FROM okl_strm_type_tl
        WHERE LANGUAGE = 'US'
        AND name = 'RESIDUAL VALUE INSURANCE PREMIUM';
        IF styid = -1 THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
		*/
        m := m + 1;
        l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
        l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
        l_csm_lease_header.rvi_yn := OKL_CREATE_STREAMS_PUB.G_FND_YES;
        OPEN  l_hdrrl_csr('LARVIN', 'LARVAM', p_chr_id);
        FETCH l_hdrrl_csr INTO l_hdrrl_rec;
        CLOSE l_hdrrl_csr;
        l_csm_lease_header.rvi_rate := TO_NUMBER(nvl(l_hdrrl_rec.RULE_INFORMATION4,'0'));
      END IF;
      -- Purchase option,
      OPEN  l_hdrrl_csr('AMTFOC', 'AMBPOC', p_chr_id);
      FETCH l_hdrrl_csr INTO l_hdrrl_rec;
      CLOSE l_hdrrl_csr;
      l_purchase_option := l_hdrrl_rec.rule_information11;
      IF l_hdrrl_rec.rule_information2 IS NOT NULL THEN
        l_purchase_option_amount := TO_NUMBER(nvl(l_hdrrl_rec.rule_information2,'0'));
      ELSE
        l_purchase_option := 'NONE';
      END IF;

      --Modified by kthiruva for Streams Performance
      --This cursor was moved outside the loop to increase performance
      --Bug 4346646 - Start of Changes
      --Fetching the org_id
      OPEN  get_org_id(p_chr_id => p_chr_id);
      FETCH get_org_id INTO ln_org_id,
                            lv_currency_code;
      IF get_org_id%NOTFOUND THEN
        okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Contract id');
        x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;
      CLOSE get_org_id;
      --Bug 4346646 - End of Changes

      -- now get record for a asset line
      FOR l_line_rec IN l_line_rec_csr (p_chr_id,'FREE_FORM1') LOOP
        i := i + 1;
        l_csm_line_details_tbl(i).kle_asset_id := l_line_rec.id;
        l_csm_line_details_tbl(i).state_depre_dmnshing_value_rt := 0;
        l_csm_line_details_tbl(i).book_depre_dmnshing_value_rt := 0;
        l_csm_line_details_tbl(i).residual_guarantee_method := l_line_rec.residual_code;
        l_csm_line_details_tbl(i).fed_depre_dmnshing_value_rate := 0;
        l_csm_line_details_tbl(i).purchase_option := l_purchase_option;
        l_csm_line_details_tbl(i).purchase_option_amount := l_purchase_option_amount;

        execute_formula(p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_formula_name  => 'LINE_CAP_AMNT',
                        p_contract_id   => p_chr_id,
                        p_line_id       => l_line_rec.id,
                        x_value         => l_value);
        IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        -- Get line Trade in
        execute_formula(p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_formula_name  => 'LINE_TRADEIN',
                        p_contract_id   => p_chr_id,
                        p_line_id       => l_line_rec.id,
                        x_value         => l_tradein);
        IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        -- Get line cap Reduction
        execute_formula(p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_formula_name  => 'LINE_CAPREDUCTION',
                        p_contract_id   => p_chr_id,
                        p_line_id       => l_line_rec.id,
                        x_value         => l_capreduc);
        IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        -- Get line Fee Capilitized
        execute_formula(p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_formula_name  => 'LINE_FEESCAPITALIZED',
                        p_contract_id   => p_chr_id,
                        p_line_id       => l_line_rec.id,
                        x_value         => l_feecap);
        IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        -- Get line Capitalized Interest
        execute_formula(p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_formula_name  => 'LINE_CAPITALIZED_INTEREST',
                        p_contract_id   => p_chr_id,
                        p_line_id       => l_line_rec.id,
                        x_value         => l_capint);
        IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        -- Get line Discount
        execute_formula(p_api_version   => p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count     => x_msg_count,
                        x_msg_data      => x_msg_data,
                        p_formula_name  => 'LINE_DISCOUNT',
                        p_contract_id   => p_chr_id,
                        p_line_id       => l_line_rec.id,
                        x_value         => l_discount);
        IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR);
        ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        IF l_line_rec.residual_value IS NULL THEN
          l_csm_line_details_tbl(i).residual_amount := 0;
        ELSE
          l_csm_line_details_tbl(i).residual_amount := l_line_rec.residual_value;
        END IF;
        IF l_line_rec.delivered_date IS NULL THEN
          l_csm_line_details_tbl(i).date_delivery := l_line_rec.start_date;
        ELSE
          l_csm_line_details_tbl(i).date_delivery := l_line_rec.delivered_date;
        END IF;
        l_csm_line_details_tbl(i).residual_guarantee_amount := l_line_rec.residual_grnty_amount;
        IF l_line_rec.residual_grnty_amount IS NOT NULL OR
           l_line_rec.residual_grnty_amount <> OKL_API.G_MISS_NUM THEN
          l_csm_line_details_tbl(i).guarantee_type := l_line_rec.guarantee_type;
        END IF;
        --smahapat changed 03/13/04
        --cannot support until field populated by authoring since field mandatory
        --l_csm_line_details_tbl(i).date_funding := l_line_rec.date_funding;
        l_csm_line_details_tbl(i).date_funding := NVL(l_line_rec.date_funding,l_line_rec.start_date);
        --smahapat end change 03/13/04
        l_csm_line_details_tbl(i).description := l_line_rec.item_description;
        -- we need to set the context since the records in
        -- OKL_SYS_ACCT_OPTS table are stored with regards to the context
        -- To calculate basis percent for Corp or tax book
        -- we need the Line capital amount.
        -- Now since new version of the pricing eng
        -- NET subsidies , amount of sudsidy is sent to
        -- pricing eng as percent so we exclude the discout as below
        ln_value := l_value + NVL(l_discount,0);
        l_csm_line_details_tbl(i).asset_cost := ln_value;
        -- Now we are dealing with corp book and building
        -- Book Depreciation Stream info
        OPEN l_tx_csr(l_line_rec.name );
        FETCH l_tx_csr into l_tx_rec;
        IF l_tx_csr%NOTFOUND THEN
          OKL_API.set_message(p_app_name      => G_APP_NAME,
                              p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                              p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => l_line_rec.name);
          x_return_status := OKL_API.G_RET_STS_ERROR;
          EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
        END IF;
        CLOSE l_tx_csr;
        -- Now we are determing the Basis percent for the corp book
        -- Basis percent = Depreciable Cost (for each asset defined corp book)
        --                / Total Asset Capital Cost
        IF (l_tx_rec.depreciation_cost IS NULL OR
            TO_NUMBER(l_tx_rec.depreciation_cost) = 0 ) THEN
          l_basis_percent := 0;
        ELSE
-- Start for bug#3388812  modification - BAKUCHIB
          -- Now since new version of the pricing eng
          -- NET subsidies , amount of sudsidy is sent to
          -- pricing eng as percent so we exclude the discout as below
          l_corp_dep_cost := l_tx_rec.depreciation_cost - NVL(l_tradein,0) - NVL(l_capreduc,0) +
                             NVL(l_feecap,0) + NVL(l_capint,0);
-- End for bug#3388812  modification - BAKUCHIB
          l_basis_percent := TO_NUMBER(nvl(l_corp_dep_cost,'0')) / TO_NUMBER(ln_value );
-- Start for bug#3388812  modification - BAKUCHIB
          l_basis_percent := l_basis_percent * 100;
-- End for bug#3388812  modification - BAKUCHIB
        END IF;
        IF l_basis_percent <> 0 THEN
          -- Now we round the Basis Percent
          l_rnd_basis_percent := OKL_ACCOUNTING_UTIL.round_amount(p_currency_code => lv_currency_code,
                                                                  p_amount  => l_basis_percent);
        END IF;
        -- Now we are determing the Salvage value
        l_salvage := nvl(l_tx_rec.salvage_value,0);
        IF l_salvage = 0 THEN
          l_salvage := (nvl(l_tx_rec.percent_salvage_value,0) * l_line_rec.oec)/100.00;
        END IF;
        l_csm_line_details_tbl(i).book_adr_convention  := l_tx_rec.prorate_convention_code;
        l_csm_line_details_tbl(i).book_term            := l_tx_rec.life_in_months;
        l_csm_line_details_tbl(i).book_method          := to_char(l_tx_rec.id1);
        l_csm_line_details_tbl(i).book_salvage         := l_salvage;
        l_csm_line_details_tbl(i).date_book            := l_tx_rec.in_service_date;
        l_csm_line_details_tbl(i).book_basis_percent   := l_rnd_basis_percent;

        -- Start of Bug#3388812 modification - BAKUCHIB
        IF l_lease_tax_owner = 'LESSOR' THEN
		  m := m + 1;
        -- End of Bug#3388812 modification - BAKUCHIB
		 -- Code added and commented by HKPATEL
          IF(g_rep_req_yn = 'Y') THEN
	         get_primary_stream_type
             (
               p_khr_id =>p_chr_id,
               p_pdt_id =>l_pdt_id_rec.report_pdt_id,
               p_primary_sty_purpose =>'BOOK_DEPRECIATION',
               x_return_status => x_return_status,
               x_primary_sty_id =>l_sty_id
             );

          ELSE

	        get_primary_stream_type
	        (
 	          p_khr_id => p_chr_id,
 	          p_primary_sty_purpose => 'BOOK_DEPRECIATION',
 	          x_return_status => x_return_status,
 	          x_primary_sty_id =>l_sty_id
	        );

           END IF;

         /*
          OPEN  l_strmid_csr('BOOK DEPRECIATION');
          FETCH l_strmid_csr into l_strmid_rec;
          IF l_strmid_csr%NOTFOUND THEN
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'BOOK DEPRECIATION');
            x_return_status := OKL_API.G_RET_STS_ERROR;
            EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          CLOSE l_strmid_csr;
		  */
		  -- Added code ends here - HKPATEL
          l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
          l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
          l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
        END IF;
-- Start modification Bug#3447917
        -- Now we are changing the approach for generating Tax book Depreciation streams
        -- by the virtue of Bug#3447917 so changes because of bug#3066346 is reverted.
-- Start modification Bug#3066346
        -- We need to validate tax book for a given asset number
        -- and also validate if there has been setups done for these
        -- tax books
        -- Now we are dealing with Tax book and building
        -- Federal/State Depreciation Stream info
        -- Since there could be more than one tax book we need to loop for each
        -- tax book
-- End modification Bug#3066346
-- End modification Bug#3447917
        FOR l_txd_rec IN l_txd_csr(l_line_rec.name) LOOP
          -- Now we are determing the Basis percent for the Tax book
          -- Basis percent = Depreciable Cost (for each asset defined tax book)
          --                / Total Asset Capital Cost
          -- Intialize the variable
          l_basis_percent     := 0;
          l_rnd_basis_percent := 0;
          IF (l_txd_rec.cost IS NULL OR
             TO_NUMBER(l_txd_rec.cost) = 0) THEN
            l_basis_percent := 0;
          ELSE
-- Start for bug#3388812  modification - BAKUCHIB
            -- Now since new version of the pricing eng
            -- NET subsidies , amount of sudsidy is sent to
            -- pricing eng as percent so we exclude the discout as below
            l_tax_dep_cost := l_txd_rec.cost - NVL(l_tradein,0) - NVL(l_capreduc,0) +
                             NVL(l_feecap,0) + NVL(l_capint,0);
-- End for bug#3388812  modification - BAKUCHIB
            l_basis_percent := TO_NUMBER(nvl(l_tax_dep_cost,'0')) / TO_NUMBER(ln_value );
            l_basis_percent := l_basis_percent * 100.00;
          END IF;
          IF l_basis_percent <> 0 THEN
            -- Now we round the Basis Percent
            l_rnd_basis_percent := OKL_ACCOUNTING_UTIL.round_amount(p_currency_code => lv_currency_code,
                                                                    p_amount    => l_basis_percent);
          END IF;
-- Start modification Bug#3447917
-- Start modification Bug#3066346
          -- If we find only setup for one tax book only then
          -- we build only federal Depreciation Stream
          -- we build both federal and state Depreciation Stream
          FOR l_txtrans_rec in l_txtrans_csr (l_txd_rec.tax_book) LOOP
            IF l_txtrans_rec.value IS NOT NULL AND
               l_txtrans_rec.value = 'FEDERAL' THEN
              l_csm_line_details_tbl(i).fed_depre_adr_conve     := l_tx_rec.prorate_convention_code;
              l_csm_line_details_tbl(i).fed_depre_term          := l_txd_rec.life_in_months_tax;
              l_csm_line_details_tbl(i).fed_depre_method        := to_char(l_txd_rec.id1);
              l_csm_line_details_tbl(i).fed_depre_salvage       := l_txd_rec.salvage_value;
              l_csm_line_details_tbl(i).date_fed_depre          := l_tx_rec.in_service_date;
              l_csm_line_details_tbl(i).fed_depre_basis_percent := l_rnd_basis_percent;

              -- Start of Bug#3388812 modification - BAKUCHIB
              IF l_lease_tax_owner = 'LESSOR' THEN
              -- End of Bug#3388812 modification - BAKUCHIB
                m := m + 1;
				-- Added code by HKPATEL
                IF(g_rep_req_yn = 'Y') THEN

                  get_primary_stream_type
                  (
                   p_khr_id =>p_chr_id,
                   p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                   p_primary_sty_purpose =>'FEDERAL_DEPRECIATION',
                   x_return_status => x_return_status,
                   x_primary_sty_id =>l_sty_id
                  );

                ELSE

	              get_primary_stream_type
	              (
 	               p_khr_id => p_chr_id,
 	               p_primary_sty_purpose => 'FEDERAL_DEPRECIATION',
 	               x_return_status => x_return_status,
 	               x_primary_sty_id =>l_sty_id
	              );

                END IF;
				/*
                OPEN  l_strmid_csr('FEDERAL DEPRECIATION');
                FETCH l_strmid_csr into l_strmid_rec;
                IF l_strmid_csr%NOTFOUND THEN
                  OKL_API.set_message(p_app_name      => G_APP_NAME,
                                      p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                      p_token1        => G_COL_NAME_TOKEN,
                                      p_token1_value  => 'FEDERAL DEPRECIATION');
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
                END IF;
                CLOSE l_strmid_csr;
				*/
                l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
                l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
                l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
              END IF;
            ELSIF l_txtrans_rec.value IS NOT NULL AND
                  l_txtrans_rec.value = 'STATE' THEN
              l_csm_line_details_tbl(i).state_depre_adr_convent   := l_tx_rec.prorate_convention_code;
              l_csm_line_details_tbl(i).state_depre_term          := l_txd_rec.life_in_months_tax;
              l_csm_line_details_tbl(i).state_depre_method        := to_char(l_txd_rec.id1);
              l_csm_line_details_tbl(i).state_depre_salvage       := l_txd_rec.salvage_value;
              l_csm_line_details_tbl(i).date_state_depre          := l_tx_rec.in_service_date;
              l_csm_line_details_tbl(i).state_depre_basis_percent := l_rnd_basis_percent;

              -- Start of Bug#3388812 modification - BAKUCHIB
              IF l_lease_tax_owner = 'LESSOR' THEN
              -- End of Bug#3388812 modification - BAKUCHIB
                m := m + 1;
				-- Added code by HKPATEL
                  IF(g_rep_req_yn = 'Y') THEN

                    get_primary_stream_type
                    (
                     p_khr_id =>p_chr_id,
                     p_pdt_id =>l_pdt_id_rec.report_pdt_id,
                     p_primary_sty_purpose =>'STATE_DEPRECIATION',
                     x_return_status => x_return_status,
                     x_primary_sty_id =>l_sty_id
                    );

                  ELSE

	                get_primary_stream_type
	                (
 	                 p_khr_id => p_chr_id,
 	                 p_primary_sty_purpose => 'STATE_DEPRECIATION',
 	                 x_return_status => x_return_status,
 	                 x_primary_sty_id =>l_sty_id
	                );

                  END IF;
				/*
                OPEN  l_strmid_csr('STATE DEPRECIATION');
                FETCH l_strmid_csr into l_strmid_rec;
                IF l_strmid_csr%NOTFOUND THEN
                  OKL_API.set_message(p_app_name      => G_APP_NAME,
                                      p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                      p_token1        => G_COL_NAME_TOKEN,
                                      p_token1_value  => 'STATE DEPRECIATION');
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
                END IF;
                CLOSE l_strmid_csr;
				*/
                l_csm_stream_types_tbl(m).stream_type_id := l_sty_id.id;
                l_csm_stream_types_tbl(m).pricing_name := l_sty_id.pricing_name;
                l_csm_stream_types_tbl(m).kle_asset_id   := l_line_rec.id;
              END IF;
            END IF;
          END LOOP;
          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            EXIT WHEN(x_return_status <> OKL_API.G_RET_STS_SUCCESS);
          END IF;
        END LOOP;
        IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
          EXIT WHEN(x_return_status <> OKL_API.G_RET_STS_SUCCESS);
        END IF;
      END LOOP;
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- WE should deal with so Payment line differently
      -- Getting the payment information of the asset
      FOR l_so_line_rec IN l_so_line_rec_csr (p_chr_id,p_cle_id) LOOP
        FOR l_rl_rec1 IN l_rl_csr1 ( 'LALEVL', 'LASLH',p_chr_id, l_so_line_rec.id ) LOOP
          l_level_type := l_rl_rec1.object1_id1;
          OPEN  strm_name_csr ( l_level_type );
          FETCH strm_name_csr into l_strm_name_rec;
          IF strm_name_csr%NOTFOUND THEN
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'Stream Id');
            x_return_status := OKL_API.G_RET_STS_ERROR;
            EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          CLOSE strm_name_csr;
          l_strm_name := l_strm_name_rec.stream_type_purpose;
          m := m + 1;
          l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
          l_csm_stream_types_tbl(m).kle_asset_id   := l_so_line_rec.id;
          idx := 0;
          IF( UPPER(TRIM(l_strm_name)) = 'RENT' ) THEN
            FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', p_chr_id, l_so_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                  l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                  l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                j := j + 1;
                idx := idx + 1;
                l_rents_tbl(j).level_index_number := idx;
                l_rents_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                l_rents_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                l_rents_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                l_rents_tbl(j).period             := g_stub_rec.period;
                l_rents_tbl(j).description        := l_strm_name;
  --              l_rents_tbl(j).kle_asset_id       := l_so_line_rec.id;
                l_rents_tbl(j).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                l_rents_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_rents_tbl(j).days_in_month := l_days_in_month_code;
                l_rents_tbl(j).days_in_year    := l_days_in_yr_code;
                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                  l_rents_tbl(j).structure          := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END If;
                l_rents_tbl(j).rate               := l_rl_rec.rule_information13;

                -- Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes

              ELSIF (l_rl_rec.rule_information7 IS NULL OR
                     l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                    (l_rl_rec.rule_information8 IS NULL OR
                     l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
                j := j + 1;
                idx := idx + 1;
                l_rents_tbl(j).level_index_number := idx;
                l_rents_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_rents_tbl(j).description        := l_strm_name;
                l_rents_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
                l_rents_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                l_rents_tbl(j).period             := l_rl_rec.object1_id1;
                l_rents_tbl(j).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
  --              l_rents_tbl(j).kle_asset_id       := l_so_line_rec.id;
                l_rents_tbl(j).days_in_month := l_days_in_month_code;
                l_rents_tbl(j).days_in_year    := l_days_in_yr_code;
                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_rents_tbl(j).structure          := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END If;
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) Then
                  l_rents_tbl(j).date_start  := l_hdr_rec.start_date;
                ELSE
                  l_rents_tbl(j).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
                END IF;
                l_rents_tbl(j).rate               := l_rl_rec.rule_information13;
              END IF;
              -- Now we get difference in days between contract end_date and last payment end_date
              -- Start of BAKUCHIB modification bug#3121708
              OPEN  c_diff_days_csr(p_chr_id => p_chr_id,
                                    p_cle_id => l_so_line_rec.id,
                                    p_slh_id => l_rl_rec1.slh_id);
              FETCH c_diff_days_csr INTO ld_chr_end_date,
                                         ld_last_start_date,
                                         ld_last_end_date;
              IF c_diff_days_csr%FOUND THEN
                ln_diff_days := ld_chr_end_date - ld_last_end_date;
              END IF;
              CLOSE c_diff_days_csr;
              IF SIGN(ln_diff_days) = -1 THEN
                OKL_API.set_message(p_app_name      => G_APP_NAME,
                                    p_msg_name      => G_INVALID_VALUE,
                                    p_token1        => G_COL_NAME_TOKEN,
                                    p_token1_value  => 'Diffrence End date');
                x_return_status := OKL_API.G_RET_STS_ERROR;
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              -- If there is diff in days then an empty stub will be appended
              IF ln_diff_days > 0 AND
                 ld_last_start_date = FND_DATE.canonical_to_date(l_rl_rec.rule_information2) THEN
                j := j + 1;
                idx := idx + 1;
                l_rents_tbl(j).level_index_number := idx;
                l_rents_tbl(j).amount             := 0;
                l_rents_tbl(j).date_start         := (ld_last_end_date + 1) + ln_diff_days;
                l_rents_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                l_rents_tbl(j).period             := g_stub_rec.period;
                l_rents_tbl(j).description        := l_strm_name;
                l_rents_tbl(j).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                l_rents_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_rents_tbl(j).days_in_month := l_days_in_month_code;
                l_rents_tbl(j).days_in_year    := l_days_in_yr_code;

                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) Then
                  l_rents_tbl(j).structure          := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END If;

                -- Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_rents_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes
              END IF;
              -- End of BAKUCHIB modification bug#3121708
            END LOOP;
          ELSIF (((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                  (UPPER(l_strm_name_rec.name) = 'FEE') AND
                  (l_strm_name_rec.capitalize_yn = 'N') ) OR
                 ((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                  (UPPER(l_strm_name_rec.name) <> 'FEE'))) THEN
            FOR l_rl_rec IN l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', p_chr_id, l_so_line_rec.id) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                  l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                  l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                l_csm_periodic_expenses_tbl(k).level_index_number := idx;
                l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
                l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
                l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
  --              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_so_line_rec.id;
                l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END If;

                -- Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes

              ELSIF (l_rl_rec.rule_information7 IS NULL OR
                     l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                    (l_rl_rec.rule_information8 IS NULL OR
                     l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                l_csm_periodic_expenses_tbl(k).level_index_number := idx;
                l_csm_periodic_expenses_tbl(k).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
                l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
  --              l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_so_line_rec.id;
                l_csm_periodic_expenses_tbl(k).income_or_expense  := OKL_CREATE_STREAMS_PUB.G_INCOME;
                l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                l_csm_periodic_expenses_tbl(k).days_in_year    := l_days_in_yr_code;

                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END If;
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                IF(l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                  l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                ELSE
                  l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
                END IF;
              END IF;
            END LOOP;
          ELSIF ((UPPER(TRIM(l_strm_name_rec.periodic_yn)) = 'N' )) THEN
            FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL',p_chr_id, l_so_line_rec.id ) LOOP
              l := l + 1;
              l_csm_one_off_fee_tbl(l).description       := l_strm_name_rec.name;
              l_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              IF (l_rl_rec.RULE_INFORMATION2 IS NULL OR l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                l_csm_one_off_fee_tbl(l).date_paid         := l_hdr_rec.start_date;
              ELSE
                l_csm_one_off_fee_tbl(l).date_paid         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
  --            l_csm_one_off_fee_tbl(l).kle_asset_id      := l_so_line_rec.id;
            END LOOP;
          END IF;
        END LOOP;
      END LOOP;
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Extracting the fee lines
      extract_fee_lines( p_api_version                => p_api_version,
                         p_chr_id                     => p_chr_id,
                         p_deal_type                  => l_deal_type,
                         p_init_msg_list              => p_init_msg_list,
                         x_return_status              => x_return_status,
                         x_msg_count                  => x_msg_count,
                         x_msg_data                   => x_msg_data,
                         px_csm_stream_types_tbl      => l_csm_stream_types_tbl,
                         px_csm_one_off_fee_tbl       => l_csm_one_off_fee_tbl,
                         px_csm_periodic_expenses_tbl => l_csm_periodic_expenses_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Check for Mandatory streams
      check_for_mandatory_streams(
              p_api_version        => p_api_version,
              p_init_msg_list      => p_init_msg_list,
              x_msg_count          => x_msg_count,
              x_msg_data           => x_msg_data,
              x_return_status      => x_return_status,
              p_chr_id             => p_chr_id,
              p_deal_type          => l_deal_type,
              p_stream_types_tbl   => l_csm_stream_types_tbl,
              x_stream_types_tbl   => l_req_stream_types_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Requesting for yields
      x_return_status := yield_request(x_csm_yields_tbl => l_csm_yields_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        okl_api.set_message(p_app_name => G_APP_NAME,
                            p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Call to extraction SUBSIDY line API
      extract_subsidized_lines(p_api_version          => p_api_version,
                               p_init_msg_list        => p_init_msg_list,
                               x_return_status        => x_return_status,
                               x_msg_count            => x_msg_count,
                               x_msg_data             => x_msg_data,
                               p_chr_id               => p_chr_id,
                               px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      x_csm_lease_header          := l_csm_lease_header;
      x_csm_one_off_fee_tbl       := l_csm_one_off_fee_tbl;
      x_csm_periodic_expenses_tbl := l_csm_periodic_expenses_tbl;
      x_csm_yields_tbl            := l_csm_yields_tbl;
      x_req_stream_types_tbl      := l_req_stream_types_tbl;
      x_csm_line_details_tbl      := l_csm_line_details_tbl;
      x_rents_tbl                 := l_rents_tbl;
      IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    ELSIF l_deal_type = 'LOAN' THEN
      FOR l_line_rec in l_line_rec_csr ( p_chr_id ,'FREE_FORM1')  LOOP
        l_tot_asset_oec := l_tot_asset_oec + l_line_rec.oec;
      END LOOP;
      OPEN  get_cap_fee_amt(p_chr_id => p_chr_id);
      FETCH get_cap_fee_amt INTO l_cap_fee_amt;
      CLOSE get_cap_fee_amt;
      l_total_lending :=  l_tot_asset_oec + l_cap_fee_amt;

      -- Getting the install base location
      OPEN  ib_csr(p_chr_id);
      FETCH ib_csr INTO l_ib_rec;
      IF ib_csr%NOTFOUND THEN
        okl_api.set_message(p_app_name      => G_APP_NAME,
                            p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Contract id');
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      END IF;
      CLOSE ib_csr;
      l_csm_loan_header.khr_id                     := p_chr_id;
      l_csm_loan_header.date_payments_commencement := l_hdr_rec.start_date;
      l_csm_loan_header.date_start                 := l_hdr_rec.start_date;
      l_csm_loan_header.pdt_id                     := l_hdr_rec.pid;
      l_csm_loan_header.country                    := l_ib_rec.country;
      l_csm_loan_header.orp_code                   := OKL_CREATE_STREAMS_PUB.G_ORP_CODE_BOOKING;
      l_csm_loan_header.total_lending              := l_total_lending;
      l_csm_loan_header.sif_mode                   := OKL_CREATE_STREAMS_PUB.G_MODE_LENDER;
      FOR l_line_rec in l_line_rec_csr ( p_chr_id , 'FREE_FORM1')  LOOP
        i := i + 1;
        l_csm_loan_details_tbl(i).kle_loan_id       := l_line_rec.id;
      END LOOP;
      FOR l_so_line_rec IN l_so_line_rec_csr (p_chr_id,p_cle_id) LOOP
        FOR l_rl_rec1 in l_rl_csr1 ( 'LALEVL', 'LASLH', p_chr_id, l_so_line_rec.id ) LOOP
          l_level_type := l_rl_rec1.object1_id1;
          OPEN  strm_name_csr ( l_level_type );
          FETCH strm_name_csr into l_strm_name_rec;
          IF strm_name_csr%NOTFOUND THEN
            OKL_API.set_message(p_app_name      => G_APP_NAME,
                                p_msg_name      => G_LLA_NO_MATCHING_RECORD,
                                p_token1        => G_COL_NAME_TOKEN,
                                p_token1_value  => 'Stream Id');
            x_return_status := OKL_API.G_RET_STS_ERROR;
            EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
          END IF;
          CLOSE strm_name_csr;
          l_strm_name := l_strm_name_rec.stream_type_purpose;
          IF(UPPER(TRIM(l_strm_name)) <> 'RENT') THEN
            m := m + 1;
            l_csm_stream_types_tbl(m).stream_type_id := l_level_type;
            l_csm_stream_types_tbl(m).kle_asset_id   := l_so_line_rec.id;
          END IF;
          idx := 0;
          IF( UPPER(TRIM(l_strm_name)) = 'RENT') THEN
            j := j + 1;
            idx := idx + 1;
            -- smahapat l_csm_loan_levels_tbl(j).kle_loan_id  := l_so_line_rec.id;
            l_csm_loan_levels_tbl(j).description  := 'Funding';
            l_csm_loan_levels_tbl(j).amount             := l_total_lending;
            l_csm_loan_levels_tbl(j).date_start         := l_hdr_rec.start_date;
            l_csm_loan_levels_tbl(j).level_index_number := idx;
            l_csm_loan_levels_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_FUNDING;
            l_csm_loan_levels_tbl(j).days_in_month := l_days_in_month_code;
            l_csm_loan_levels_tbl(j).days_in_year := l_days_in_yr_code;

            FOR l_rl_rec in l_rl_csr ( l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_so_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                  l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                  l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                j := j + 1;
                idx := idx + 1;
                l_csm_loan_levels_tbl(j).level_index_number := idx;
                l_csm_loan_levels_tbl(j).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                l_csm_loan_levels_tbl(j).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+TO_NUMBER(l_rl_rec.rule_information7);
                l_csm_loan_levels_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                l_csm_loan_levels_tbl(j).period             := g_stub_rec.period;
                l_csm_loan_levels_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_csm_loan_levels_tbl(j).days_in_month := l_days_in_month_code;
                l_csm_loan_levels_tbl(j).days_in_year := l_days_in_yr_code;

                --smahapat l_csm_loan_levels_tbl(j).kle_loan_id        := l_so_line_rec.id;
                l_csm_loan_levels_tbl(j).description        := l_strm_name;
                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                  l_csm_loan_levels_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                ELSE
                  l_csm_loan_levels_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                END IF;
                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_loan_levels_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END IF;

                -- Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_loan_levels_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_loan_levels_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes

              ELSIF (l_rl_rec.rule_information7 IS NULL OR
                     l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                    (l_rl_rec.rule_information8 IS NULL OR
                     l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
                j := j + 1;
                idx := idx + 1;
                --smahapat l_csm_loan_levels_tbl(j).kle_loan_id        := l_so_line_rec.id;
                l_csm_loan_levels_tbl(j).description        := l_strm_name;
                l_csm_loan_levels_tbl(j).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                l_csm_loan_levels_tbl(j).date_start         := l_hdr_rec.start_date;
                l_csm_loan_levels_tbl(j).level_index_number := idx;
                l_csm_loan_levels_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_csm_loan_levels_tbl(j).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
                l_csm_loan_levels_tbl(j).period             := l_rl_rec.object1_id1;
                l_csm_loan_levels_tbl(j).days_in_month := l_days_in_month_code;
                l_csm_loan_levels_tbl(j).days_in_year := l_days_in_yr_code;

                IF(l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_loan_levels_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END IF;
                IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_loan_levels_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_loan_levels_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                IF(l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                  l_csm_loan_levels_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                ELSE
                  l_csm_loan_levels_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                END IF;
              END IF;
              -- Now we get difference in days between contract end_date and last payment end_date
              -- Start of BAKUCHIB modification bug#3121708
              OPEN  c_diff_days_csr(p_chr_id => p_chr_id,
                                    p_cle_id => l_so_line_rec.id,
                                    p_slh_id => l_rl_rec1.slh_id);
              FETCH c_diff_days_csr INTO ld_chr_end_date,
                                         ld_last_start_date,
                                         ld_last_end_date;
              IF c_diff_days_csr%FOUND THEN
                ln_diff_days := ld_chr_end_date - ld_last_end_date;
              END IF;
              CLOSE c_diff_days_csr;
              IF SIGN(ln_diff_days) = -1 THEN
                OKL_API.set_message(p_app_name      => G_APP_NAME,
                                    p_msg_name      => G_INVALID_VALUE,
                                    p_token1        => G_COL_NAME_TOKEN,
                                    p_token1_value  => 'Diffrence End date');
                x_return_status := OKL_API.G_RET_STS_ERROR;
                EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
              END IF;
              -- If there is diff in days then an empty stub will be appended
              IF ln_diff_days > 0 AND
                 ld_last_start_date = FND_DATE.canonical_to_date(l_rl_rec.rule_information2) THEN
                j := j + 1;
                idx := idx + 1;
                l_csm_loan_levels_tbl(j).level_index_number := idx;
                l_csm_loan_levels_tbl(j).amount             := 0;
                l_csm_loan_levels_tbl(j).date_start         := (ld_last_end_date + 1) + ln_diff_days;
                l_csm_loan_levels_tbl(j).number_of_periods  := g_stub_rec.number_of_periods;
                l_csm_loan_levels_tbl(j).period             := g_stub_rec.period;
                l_csm_loan_levels_tbl(j).description        := l_strm_name;
                l_csm_loan_levels_tbl(j).level_type         := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                l_csm_loan_levels_tbl(j).days_in_month := l_days_in_month_code;
                l_csm_loan_levels_tbl(j).days_in_year := l_days_in_yr_code;

                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                  l_csm_loan_levels_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                ELSE
                  l_csm_loan_levels_tbl(j).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                END IF;
                IF( l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_loan_levels_tbl(j).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END IF;

                -- Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF ((l_rl_rec.rule_information10 IS NOT NULL) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_loan_levels_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_loan_levels_tbl(j).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes

              END IF;
              -- End of BAKUCHIB modification bug#3121708
            END LOOP;
          ELSIF (((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                  (UPPER(l_strm_name_rec.name) = 'FEE') AND
                  (l_strm_name_rec.capitalize_yn = 'N')) OR
                 ((l_strm_name_rec.periodic_yn = 'Y'  ) AND
                  (UPPER(l_strm_name_rec.name) <> 'FEE'))) THEN
            FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_so_line_rec.id ) LOOP
              IF (l_rl_rec.rule_information7 IS NOT NULL OR
                  l_rl_rec.rule_information7 <> OKL_API.G_MISS_CHAR) AND
                 (l_rl_rec.rule_information8 IS NOT NULL OR
                  l_rl_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                l_csm_periodic_expenses_tbl(k).level_index_number := idx;
                l_csm_periodic_expenses_tbl(k).amount             := TO_NUMBER(l_rl_rec.rule_information8);
                l_csm_periodic_expenses_tbl(k).date_start         := FND_DATE.canonical_to_date(l_rl_rec.rule_information2)+l_rl_rec.rule_information7;
                l_csm_periodic_expenses_tbl(k).number_of_periods  := g_stub_rec.number_of_periods;
                l_csm_periodic_expenses_tbl(k).period             := g_stub_rec.period;
--                l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_so_line_rec.id;
                l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                l_csm_periodic_expenses_tbl(k).days_in_year    := l_days_in_yr_code;

                IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END IF;
                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                  l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                ELSE
                  l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                END IF;
                IF (UPPER(l_strm_name_rec.name) = 'INTEREST_PAYMENT') THEN
                  l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
                ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL_PAYMENT' ) THEN
                  l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
                ELSE
                  l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                END If;

                --Added by kthiruva on 29-Dec-2005.
                -- The value of the Advance and Arrears flag needs to be obtained from the rule information
                -- Bug 4915938 - Start of Changes
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                -- Bug 4915938 - End of Changes

              ELSIF (l_rl_rec.rule_information7 IS NULL OR
                     l_rl_rec.rule_information7 = OKL_API.G_MISS_CHAR) AND
                    (l_rl_rec.rule_information8 IS NULL OR
                     l_rl_rec.rule_information8 = OKL_API.G_MISS_CHAR) THEN
                k := k + 1;
                idx := idx + 1;
                l_csm_periodic_expenses_tbl(k).level_index_number := idx;
                l_csm_periodic_expenses_tbl(k).description        := l_strm_name;
                l_csm_periodic_expenses_tbl(k).period             := l_rl_rec.object1_id1;
                l_csm_periodic_expenses_tbl(k).amount             := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
                l_csm_periodic_expenses_tbl(k).number_of_periods  := TO_NUMBER(nvl(l_rl_rec.RULE_INFORMATION3, l_hdr_rec.term));
--                l_csm_periodic_expenses_tbl(k).kle_asset_id       := l_so_line_rec.id;
                l_csm_periodic_expenses_tbl(k).days_in_month := l_days_in_month_code;
                l_csm_periodic_expenses_tbl(k).days_in_year := l_days_in_yr_code;

                IF (l_rl_rec.RULE_INFORMATION5 IS NOT NULL) THEN
                  l_csm_periodic_expenses_tbl(k).structure := TO_NUMBER(l_rl_rec.RULE_INFORMATION5);
                END IF;
                IF (( l_rl_rec.RULE_INFORMATION10 IS NOT NULL ) AND (l_rl_rec.RULE_INFORMATION10 = 'Y')) THEN
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ARREARS;
                ELSE
                  l_csm_periodic_expenses_tbl(k).advance_or_arrears := OKL_CREATE_STREAMS_PUB.G_ADVANCE;
                END IF;
                IF (l_rl_rec.RULE_INFORMATION2 IS NULL or l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                  l_csm_periodic_expenses_tbl(k).date_start  := l_hdr_rec.start_date;
                ELSE
                  l_csm_periodic_expenses_tbl(k).date_start  := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
                END IF;
                IF( l_strm_name_rec.stream_type_class = 'EXPENSE') THEN
                  l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_EXPENSE;
                ELSE
                  l_csm_periodic_expenses_tbl(k).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
                END IF;
                IF ( UPPER(l_strm_name_rec.name) = 'INTEREST_PAYMENT' ) THEN
                  l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_INTEREST;
                ELSIF ( UPPER(l_strm_name_rec.name) = 'PRINCIPAL_PAYMENT' ) Then
                  l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PRINCIPAL;
                ELSE
                  l_csm_periodic_expenses_tbl(k).level_type := OKL_CREATE_STREAMS_PUB.G_SFE_LEVEL_PAYMENT;
                END If;
              END IF;
            END LOOP;
          ELSIF ((UPPER(TRIM(l_strm_name_rec.periodic_yn)) = 'N' )) THEN
            FOR l_rl_rec in l_rl_csr (l_rl_rec1.slh_id, 'LALEVL', 'LASLL', TO_NUMBER(p_chr_id), l_so_line_rec.id ) LOOP
              l := l + 1;
              l_csm_one_off_fee_tbl(l).description       := l_strm_name_rec.name;
              l_csm_one_off_fee_tbl(l).income_or_expense := OKL_CREATE_STREAMS_PUB.G_INCOME;
              l_csm_one_off_fee_tbl(l).amount            := FND_NUMBER.canonical_to_number(nvl(l_rl_rec.RULE_INFORMATION6,'0'));
              IF (l_rl_rec.RULE_INFORMATION2 IS NULL OR
                  l_rl_rec.RULE_INFORMATION2 = OKL_API.G_MISS_CHAR) THEN
                l_csm_one_off_fee_tbl(l).date_paid         := l_hdr_rec.start_date;
              ELSE
                l_csm_one_off_fee_tbl(l).date_paid         := FND_DATE.canonical_to_date(l_rl_rec.RULE_INFORMATION2);
              END IF;
--              l_csm_one_off_fee_tbl(l).kle_asset_id      := l_so_line_rec.id;
            END LOOP;
          END IF;
        END LOOP;
      END LOOP;
      extract_fee_lines( p_api_version                => p_api_version,
                         p_chr_id                     => p_chr_id,
                         p_deal_type                  => l_deal_type,
                         p_init_msg_list              => p_init_msg_list,
                         x_msg_count                  => x_msg_count,
                         x_msg_data                   => x_msg_data,
                         x_return_status              => x_return_status,
                         px_csm_stream_types_tbl      => l_csm_stream_types_tbl,
                         px_csm_one_off_fee_tbl       => l_csm_one_off_fee_tbl,
                         px_csm_periodic_expenses_tbl => l_csm_periodic_expenses_tbl);
      IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      extract_subsidized_lines(p_api_version => p_api_version,
                               p_init_msg_list => p_init_msg_list,
                               x_return_status => x_return_status,
                               x_msg_count => x_msg_count,
                               x_msg_data => x_msg_data,
                               p_chr_id => TO_NUMBER(p_chr_id),
                               px_csm_one_off_fee_tbl => l_csm_one_off_fee_tbl);
      IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      check_for_mandatory_streams(
              p_api_version        => p_api_version,
              p_init_msg_list      => p_init_msg_list,
              x_msg_count          => x_msg_count,
              x_msg_data           => x_msg_data,
              x_return_status      => x_return_status,
              p_chr_id             => p_chr_id,
              p_deal_type          => l_deal_type,
              p_stream_types_tbl   => l_csm_stream_types_tbl,
              x_stream_types_tbl   => l_req_stream_types_tbl);
      IF x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF x_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- Requesting for yields
      x_return_status := yield_request(x_csm_yields_tbl => l_csm_yields_tbl);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) then
              okl_api.set_message(
                      p_app_name => G_APP_NAME,
                      p_msg_name => 'OKL_LLA_REPSTRMS_EXTR_FAILED');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      End If;
      x_csm_loan_header           := l_csm_loan_header;
      x_csm_loan_lines_tbl        := l_csm_loan_details_tbl;
      x_csm_loan_levels_tbl       := l_csm_loan_levels_tbl;
      x_csm_one_off_fee_tbl       := l_csm_one_off_fee_tbl;
      x_csm_periodic_expenses_tbl := l_csm_periodic_expenses_tbl;
      x_csm_yields_tbl            := l_csm_yields_tbl;
      x_req_stream_types_tbl      := l_req_stream_types_tbl;
    ELSE
      okl_api.set_message(p_app_name      => G_APP_NAME,
                          p_msg_name      => G_INVALID_VALUE,
                          p_token1        => G_COL_NAME_TOKEN,
                          p_token1_value  => 'Deal_type');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF l_hdrrl_csr%ISOPEN THEN
        CLOSE l_hdrrl_csr;
      END IF;
      IF l_financed_type_csr%ISOPEN THEN
        CLOSE l_financed_type_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF get_org_id%ISOPEN THEN
        CLOSE get_org_id;
      END IF;
      IF l_tx_csr%ISOPEN THEN
        CLOSE l_tx_csr;
      END IF;
      IF l_strmid_csr%ISOPEN THEN
        CLOSE l_strmid_csr;
      END IF;
      IF l_txd_csr%ISOPEN THEN
        CLOSE l_txd_csr;
      END IF;
      IF l_txtrans_csr%ISOPEN THEN
        CLOSE l_txtrans_csr;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF l_so_line_rec_csr%ISOPEN THEN
        CLOSE l_so_line_rec_csr;
      END IF;
      IF get_cap_fee_amt%ISOPEN THEN
        CLOSE get_cap_fee_amt;
      END IF;
      IF c_diff_days_csr%ISOPEN THEN
        CLOSE c_diff_days_csr;
      END IF;
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF l_hdrrl_csr%ISOPEN THEN
        CLOSE l_hdrrl_csr;
      END IF;
      IF l_financed_type_csr%ISOPEN THEN
        CLOSE l_financed_type_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF get_org_id%ISOPEN THEN
        CLOSE get_org_id;
      END IF;
      IF l_tx_csr%ISOPEN THEN
        CLOSE l_tx_csr;
      END IF;
      IF l_strmid_csr%ISOPEN THEN
        CLOSE l_strmid_csr;
      END IF;
      IF l_txd_csr%ISOPEN THEN
        CLOSE l_txd_csr;
      END IF;
      IF l_txtrans_csr%ISOPEN THEN
        CLOSE l_txtrans_csr;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF l_so_line_rec_csr%ISOPEN THEN
        CLOSE l_so_line_rec_csr;
      END IF;
      IF get_cap_fee_amt%ISOPEN THEN
        CLOSE get_cap_fee_amt;
      END IF;
      IF c_diff_days_csr%ISOPEN THEN
        CLOSE c_diff_days_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OKL_API.G_RET_STS_UNEXP_ERROR',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
    WHEN OTHERS THEN
      IF l_hdr_csr%ISOPEN THEN
        CLOSE l_hdr_csr;
      END IF;
      IF l_hdrrl_csr%ISOPEN THEN
        CLOSE l_hdrrl_csr;
      END IF;
      IF l_financed_type_csr%ISOPEN THEN
        CLOSE l_financed_type_csr;
      END IF;
      IF ib_csr%ISOPEN THEN
        CLOSE ib_csr;
      END IF;
      IF l_line_rec_csr%ISOPEN THEN
        CLOSE l_line_rec_csr;
      END IF;
      IF get_org_id%ISOPEN THEN
        CLOSE get_org_id;
      END IF;
      IF l_tx_csr%ISOPEN THEN
        CLOSE l_tx_csr;
      END IF;
      IF l_strmid_csr%ISOPEN THEN
        CLOSE l_strmid_csr;
      END IF;
      IF l_txd_csr%ISOPEN THEN
        CLOSE l_txd_csr;
      END IF;
      IF l_txtrans_csr%ISOPEN THEN
        CLOSE l_txtrans_csr;
      END IF;
      IF strm_name_csr%ISOPEN THEN
        CLOSE strm_name_csr;
      END IF;
      IF l_rl_csr%ISOPEN THEN
        CLOSE l_rl_csr;
      END IF;
      IF l_rl_csr1%ISOPEN THEN
        CLOSE l_rl_csr1;
      END IF;
      IF l_so_line_rec_csr%ISOPEN THEN
        CLOSE l_so_line_rec_csr;
      END IF;
      IF get_cap_fee_amt%ISOPEN THEN
        CLOSE get_cap_fee_amt;
      END IF;
      IF c_diff_days_csr%ISOPEN THEN
        CLOSE c_diff_days_csr;
      END IF;
      x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                l_api_name,
                                G_PKG_NAME,
                                'OTHERS',
                                x_msg_count,
                                x_msg_data,
                                '_PVT');
  END extract_params_so;

  /************************************************************************
  * API to upgrade the ESG Contracts to support the
  *  Prospective Rebooking
  *************************************************************************/
  PROCEDURE upgrade_esg_khr_for_prb(
             p_chr_id             IN         VARCHAR2
            ,x_return_status      OUT NOCOPY VARCHAR2
            ,x_msg_count          OUT NOCOPY NUMBER
            ,x_msg_data           OUT NOCOPY VARCHAR2
            ,x_request_id         OUT NOCOPY NUMBER
            ,x_trans_status       OUT NOCOPY VARCHAR2
            ,x_rep_request_id     OUT NOCOPY NUMBER
            ,x_rep_trans_status   OUT NOCOPY VARCHAR2 )
  AS
    l_api_name                  CONSTANT VARCHAR2(30)   := 'UPGRADE_ESG_KHR_FOR_PRB';
    l_api_version               CONSTANT NUMBER         := 1;
    l_return_status             VARCHAR2(1)             := OKC_API.G_RET_STS_SUCCESS;
    l_init_msg_list             VARCHAR2(1)             := OKL_API.G_TRUE;

    l_hdr_rec                   l_hdr_csr%ROWTYPE;
    -- Record Structures required for the Lease Contracts
    x_csm_lease_header          okl_create_streams_pub.csm_lease_rec_type;
    x_csm_one_off_fee_tbl       okl_create_streams_pub.csm_one_off_fee_tbl_type;
    x_csm_periodic_expenses_tbl okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    x_csm_yields_tbl            okl_create_streams_pub.csm_yields_tbl_type;
    x_csm_stream_types_tbl      okl_create_streams_pub.csm_stream_types_tbl_type;
    x_req_stream_types_tbl      okl_create_streams_pub.csm_stream_types_tbl_type;
    x_csm_line_details_tbl      okl_create_streams_pub.csm_line_details_tbl_type;
    x_rents_tbl                 okl_create_streams_pub.csm_periodic_expenses_tbl_type;
    -- Record Structures required for the Loan Contracts
    x_csm_loan_header           okl_create_streams_pvt.csm_loan_rec_type;
    x_csm_lines_details_tbl     okl_create_streams_pvt.csm_loan_level_tbl_type;
    x_csm_loan_lines_tbl        okl_create_streams_pvt.csm_loan_line_tbl_type;
    x_csm_loan_levels_tbl       okl_create_streams_pvt.csm_loan_level_tbl_type;

    p_pdtv_rec                  pdtv_rec_type;
    x_pdt_parameter_rec         pdt_param_rec_type;
    x_no_data_found             BOOLEAN;

  BEGIN
    print( l_api_name, 'Start');

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    x_return_status := OKL_API.START_ACTIVITY(
      p_api_name      => l_api_name,
      p_pkg_name      => g_pkg_name,
      p_init_msg_list => l_init_msg_list,
      l_api_version   => l_api_version,
      p_api_version   => l_api_version,
      p_api_type      => G_API_TYPE,
      x_return_status => x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Fetch preliminary details about the Contract: Deal Type etc
    print( l_api_name, 'Fetching Deal Type of the Contract' );
    OPEN  l_hdr_csr(p_chr_id);
    FETCH l_hdr_csr into l_hdr_rec;
    IF l_hdr_csr%NOTFOUND
    THEN
      CLOSE l_hdr_csr;
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
    CLOSE l_hdr_csr;

    print( l_api_name, 'Extraction phase. Deal Type = ' || l_hdr_rec.deal_type  );
    IF (INSTR( l_hdr_rec.deal_type, 'LEASE') > 0)
    THEN
      print( l_api_name, 'Handling Lease Type Contract ' );
      extract_params_lease(
             p_api_version               => l_api_version
            ,p_init_msg_list             => l_init_msg_list
            ,p_chr_id                    => p_chr_id
            ,x_return_status             => x_return_status
            ,x_msg_count                 => x_msg_count
            ,x_msg_data                  => x_msg_data
            ,x_csm_lease_header          => x_csm_lease_header
            ,x_csm_one_off_fee_tbl       => x_csm_one_off_fee_tbl
            ,x_csm_periodic_expenses_tbl => x_csm_periodic_expenses_tbl
            ,x_csm_yields_tbl            => x_csm_yields_tbl
            ,x_req_stream_types_tbl      => x_req_stream_types_tbl
            ,x_csm_line_details_tbl      => x_csm_line_details_tbl
            ,x_rents_tbl                 => x_rents_tbl
            ,p_orp_code                  => 'UPGRADE' );
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS)
      THEN
        OKL_API.set_message(
           p_app_name => G_APP_NAME
          ,p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      print( l_api_name, 'Before Calling the create_streams_lease_book' );
      OKL_CREATE_STREAMS_PUB.create_streams_lease_book(
        p_api_version               => l_api_version
       ,p_init_msg_list             => l_init_msg_list
       ,p_skip_prc_engine			        => OKL_API.G_FALSE
       ,p_csm_lease_header			       => x_csm_lease_header
       ,p_csm_one_off_fee_tbl			    => x_csm_one_off_fee_tbl
       ,p_csm_periodic_expenses_tbl	=> x_csm_periodic_expenses_tbl
       ,p_csm_yields_tbl				        => x_csm_yields_tbl
       ,p_csm_stream_types_tbl      => x_req_stream_types_tbl
       ,p_csm_line_details_tbl      => x_csm_line_details_tbl
       ,p_rents_tbl		     		        => x_rents_tbl
       ,x_trans_id	   			           => x_request_id
       ,x_trans_status		            => x_trans_status
       ,x_return_status             => x_return_status
       ,x_msg_count                 => x_msg_count
       ,x_msg_data                  => x_msg_data );
      print( l_api_name, 'After the call to create_streams_lease_book: ' ||x_return_status);
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        okl_api.set_message(
          p_app_name => G_APP_NAME
         ,p_msg_name => OKL_CONTRACT_STATUS_PUB.G_GENSTRMS_REQ_FAILED);
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    -- Handling the Loan Type Contracts
    ELSIF (INSTR(l_hdr_rec.deal_type, 'LOAN') > 0)
    THEN
      print( l_api_name, 'Handling Loan Type Contracts ' );
      print( l_api_name, 'Before Calling the Extract_params_loan ' );
      extract_params_loan(
         p_api_version               => l_api_version
        ,p_init_msg_list             => l_init_msg_list
        ,p_chr_id                    => p_chr_id
        ,x_return_status             => x_return_status
        ,x_msg_count                 => x_msg_count
        ,x_msg_data                  => x_msg_data
        ,x_csm_loan_header           => x_csm_loan_header
        ,x_csm_loan_lines_tbl        => x_csm_loan_lines_tbl
        ,x_csm_loan_levels_tbl       => x_csm_loan_levels_tbl
        ,x_csm_one_off_fee_tbl       => x_csm_one_off_fee_tbl
        ,x_csm_periodic_expenses_tbl => x_csm_periodic_expenses_tbl
        ,x_csm_yields_tbl            => x_csm_yields_tbl
        ,x_csm_stream_types_tbl      => x_csm_stream_types_tbl
        ,p_orp_code                  => 'UPGRADE' );
      print( l_api_name, 'After the call to extract_params_loan: '||x_return_status);
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          okl_api.set_message(
             p_app_name => G_APP_NAME,
             p_msg_name => 'OKL_LLA_GENSTRMS_EXTR_FAILED');
          RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      print( l_api_name, 'Before calling the Create_stream_loan_book API ' );
      OKL_CREATE_STREAMS_PUB.create_streams_loan_book(
         p_api_version               => l_api_version
        ,p_init_msg_list             => l_init_msg_list
        ,p_skip_prc_engine           => OKL_API.G_FALSE
        ,p_csm_loan_header           => x_csm_loan_header
        ,p_csm_loan_lines_tbl        => x_csm_loan_lines_tbl
        ,p_csm_loan_levels_tbl       => x_csm_loan_levels_tbl
        ,p_csm_one_off_fee_tbl       => x_csm_one_off_fee_tbl
        ,p_csm_periodic_expenses_tbl => x_csm_periodic_expenses_tbl
        ,p_csm_yields_tbl            => x_csm_yields_tbl
        ,p_csm_stream_types_tbl      => x_csm_stream_types_tbl
        ,x_trans_id                  => x_request_id
        ,x_trans_status              => x_trans_status
        ,x_return_status             => x_return_status
        ,x_msg_count                 => x_msg_count
        ,x_msg_data                  => x_msg_data);
      print( l_api_name, 'After the call to create_streams_loan_book: '||x_return_status);
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS)
      THEN
        okl_api.set_message(
           p_app_name => G_APP_NAME
          ,p_msg_name => OKL_CONTRACT_STATUS_PUB.G_GENSTRMS_REQ_FAILED);
        RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
    ELSE
      print( l_api_name, 'Error: Invalid deal Type ' );
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;

    print( l_api_name, 'Checking if the Reporting Product Exists or not ' );
    IF ( l_hdr_rec.report_pdt_id <> -1 )
    THEN
      print( l_api_name, 'Reporting Product exists for this contract ' );
      p_pdtv_rec.id := l_hdr_rec.report_pdt_id;
      OKL_SETUPPRODUCTS_PVT.Getpdt_parameters(
         p_api_version       => l_api_version
        ,p_init_msg_list     => l_init_msg_list
        ,x_return_status     => x_return_status
        ,x_msg_count         => x_msg_count
        ,x_msg_data          => x_msg_data
        ,p_pdtv_rec          => p_pdtv_rec
        ,x_no_data_found     => x_no_data_found
        ,p_pdt_parameter_rec => x_pdt_parameter_rec);
      print( l_api_name, 'After OKL_SETUPPRODUCTS_PVT.Getpdt_parameters: '||x_return_status);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      print( l_api_name, 'Prior to the call to generate_reporting_streams');
      generate_reporting_streams(
         p_api_version        => l_api_version
        ,p_init_msg_list      => l_init_msg_list
        ,p_chr_id             => p_chr_id
        ,p_report_deal_type   => x_pdt_parameter_rec.deal_type
        ,p_generation_context => 'FULL'
        ,p_skip_prc_engine    => OKL_API.G_FALSE
        ,x_return_status      => x_return_status
        ,x_msg_count          => x_msg_count
        ,x_msg_data           => x_msg_data
        ,x_request_id         => x_rep_request_id
        ,x_trans_status       => x_rep_trans_status
        ,p_orp_code           => 'UPGRADE' );
      print( l_api_name, 'After generate_reporting_streams: '||x_return_status);
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS)
      THEN
        okl_api.set_message(
           p_app_name => G_APP_NAME
          ,p_msg_name => 'OKL_LLA_REPSTRMS_REQ_FAILED');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ElSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    print( l_api_name, 'END: ' || x_return_status);
    OKL_API.END_ACTIVITY(x_msg_count => x_msg_count, x_msg_data   => x_msg_data);
    print( l_api_name, ': End' );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR
    THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
         p_api_name  => l_api_name
        ,p_pkg_name  => g_pkg_name
        ,p_exc_name  => 'OKL_API.G_RET_STS_ERROR'
        ,x_msg_count => x_msg_count
        ,x_msg_data  => x_msg_data
        ,p_api_type  => g_api_type);

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR
    THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
        p_api_name  => l_api_name
       ,p_pkg_name  => g_pkg_name
       ,p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR'
       ,x_msg_count => x_msg_count
       ,x_msg_data  => x_msg_data
       ,p_api_type  => g_api_type);

    WHEN OTHERS
    THEN
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
         p_api_name  => l_api_name
        ,p_pkg_name  => g_pkg_name
        ,p_exc_name  => 'OTHERS'
        ,x_msg_count => x_msg_count
        ,x_msg_data  => x_msg_data
        ,p_api_type  => g_api_type);
  END upgrade_esg_khr_for_prb;


-- End modification 11i10 bakuchib
End OKL_LA_STREAM_PVT;

/
