--------------------------------------------------------
--  DDL for Package Body XTR_XTRLIUTL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRLIUTL_XMLP_PKG" AS
/* $Header: XTRLIUTLB.pls 120.1 2007/12/28 12:53:25 npannamp noship $ */
  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      user
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR CHK_LANG IS
      SELECT
        1
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRLIUTL';
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRLIUTL';
  BEGIN

    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1AVAILABLE_HIGH_RANGE' THEN
        Z1AVAILABLE_HIGH_RANGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1AVAILABLE_LOW_RANGE' THEN
        Z1AVAILABLE_LOW_RANGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1EFFECTIVE_DATE_FROM' THEN
        Z1EFFECTIVE_DATE_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1EFFECTIVE_DATE_TO' THEN
        Z1EFFECTIVE_DATE_TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1LIMIT_CODE' THEN
        Z1LIMIT_CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1LIMIT_TYPE' THEN
        Z1LIMIT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AVAILABLE' THEN
        Z2AVAILABLE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2COMPANY' THEN
        Z2COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2COUNTRY' THEN
        Z2COUNTRY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CURRENCY' THEN
        Z2CURRENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2EFFECTIVE_DATE' THEN
        Z2EFFECTIVE_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2LIMIT_AMT' THEN
        Z2LIMIT_AMT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2LIMIT_GROUP' THEN
        Z2LIMIT_GROUP := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2LIMIT_PARTY' THEN
        Z2LIMIT_PARTY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2UTILISED' THEN
        Z2UTILISED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_FACTOR' THEN
        Z1P_FACTOR := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    TEMP NUMBER(15) := 1000;
  BEGIN
  P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    IF P_FACTOR IS NOT NULL THEN
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20),
        DECODE(SUBSTR(P_FACTOR
                     ,1
                     ,1)
              ,'U'
              ,1
              ,'T'
              ,1000
              ,'M'
              ,1000000
              ,'B'
              ,100000000)
      INTO
        LP_FACTOR_DESC
        ,TEMP
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = SUBSTR(P_FACTOR
            ,1
            ,1);
    ELSE
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20)
      INTO
        LP_FACTOR_DESC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = 'T';
      TEMP := 1000;
    END IF;
    SELECT
      MAX(DECODE(LOOKUP_CODE
                ,'CPARTY'
                ,MEANING)) CPARTY_DESC,
      MAX(DECODE(LOOKUP_CODE
                ,'CURR'
                ,MEANING)) CURR_DESC,
      MAX(DECODE(LOOKUP_CODE
                ,'GLOBAL'
                ,MEANING)) GLOBAL_DESC,
      MAX(DECODE(LOOKUP_CODE
                ,'GROUP'
                ,MEANING)) GROUP_DESC,
      MAX(DECODE(LOOKUP_CODE
                ,'NOT_APP'
                ,MEANING)) NA_DESC,
      MAX(DECODE(LOOKUP_CODE
                ,'SETTLE'
                ,MEANING)) SETTLE_DESC,
      MAX(DECODE(LOOKUP_CODE
                ,'SOVGN'
                ,MEANING)) SOVGN_DESC
    INTO
      Z3_CPARTY
      ,Z3_CURR
      ,Z3_GLOBAL
      ,Z3_GROUP
      ,Z3_NA
      ,Z3_SETTLE
      ,Z3_SOVGN
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'XTR_LIMIT_OVERVIEW';
    AMT_UNIT2 := TEMP;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME2
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));
    P_EFFECTIVE_DATE_FROM_1 := TO_CHAR(TO_DATE(P_EFFECTIVE_DATE_FROM
                                            ,'YYYY/MM/DD HH24:MI:SS')
                                    ,'DD-MON-YYYY');
    P_EFFECTIVE_DATE_TO_1 := TO_CHAR(TO_DATE(P_EFFECTIVE_DATE_TO
                                          ,'YYYY/MM/DD HH24:MI:SS')
                                  ,'DD-MON-YYYY');
    LIMIT_TYPE2 := P_LIMIT_TYPE;
    AVAILABLE_HIGH_RANGE2 := P_AVAILABLE_HIGH;
    AVAILABLE_LOW_RANGE2 := P_AVAILABLE_LOW;
    LIMIT_CODE2 := P_LIMIT_CODE;
    EFFECTIVE_DATE_FROM2 := P_EFFECTIVE_DATE_FROM_1;
    EFFECTIVE_DATE_TO2 := P_EFFECTIVE_DATE_TO_1;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION FC_GET_LIMIT_TYPE_DESCFORMULA(QRY_LIMIT_TYPE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF QRY_LIMIT_TYPE = 'COUNTERPARTY' THEN
      RETURN (Z3_CPARTY);
    ELSIF QRY_LIMIT_TYPE = 'CURRENCY' THEN
      RETURN (Z3_CURR);
    ELSIF QRY_LIMIT_TYPE = 'GLOBAL' THEN
      RETURN (Z3_GLOBAL);
    ELSIF QRY_LIMIT_TYPE = 'GROUP' THEN
      RETURN (Z3_GROUP);
    ELSIF QRY_LIMIT_TYPE = 'NOT_APP' THEN
      RETURN (Z3_NA);
    ELSIF QRY_LIMIT_TYPE = 'SETTLEMENT' THEN
      RETURN (Z3_SETTLE);
    ELSIF QRY_LIMIT_TYPE = 'SOVEREIGN' THEN
      RETURN (Z3_SOVGN);
    ELSE
      RETURN (QRY_LIMIT_TYPE);
    END IF;
  END FC_GET_LIMIT_TYPE_DESCFORMULA;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRLIUTL_XMLP_PKG;


/
