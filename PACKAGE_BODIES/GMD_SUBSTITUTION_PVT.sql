--------------------------------------------------------
--  DDL for Package Body GMD_SUBSTITUTION_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_SUBSTITUTION_PVT" AS
/* $Header: GMDVSUBB.pls 120.0.12000000.1 2007/01/31 16:17:23 appldev noship $ */

  -- common cursors
  CURSOR Cur_get_substitution(vSubstitution_id NUMBER) IS
     SELECT i.original_inventory_item_id, i.start_date, i.substitution_status, f.formula_id
     FROM   gmd_item_substitution_hdr_b i, gmd_formula_substitution f
     WHERE  i.substitution_id = vSubstitution_id
     AND    i.substitution_id = f.substitution_id;

   CURSOR Cur_check_substitute (V_formula_id      NUMBER
                              , V_item_id         NUMBER
                              , p_substitution_id NUMBER) IS
     SELECT MIN(i.start_date)
     FROM   gmd_item_substitution_hdr_b i, gmd_formula_substitution f
     WHERE  f.formula_id = V_formula_id
     AND    i.original_inventory_item_id = V_item_id
     AND    i.substitution_id <> p_substitution_id
     AND    i.substitution_id = f.substitution_id
     AND    i.substitution_status BETWEEN 700 AND 799;


  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Create_new_substitution_vers                                  */
  /*                                                                 */
  /* DESCRIPTION: Private function                                   */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Create_new_substitution_vers
  ( p_substitution_id       IN  NUMBER
  , x_message_count         OUT NOCOPY  NUMBER
  , x_message_list          OUT NOCOPY  VARCHAR2
  , x_return_status         OUT NOCOPY  VARCHAR2
  ) IS

    l_new_substitution_version   NUMBER;
    l_old_substitution_name      gmd_item_substitution_hdr_b.substitution_name%TYPE;
    l_old_substitution_version   NUMBER;

    CURSOR get_substitution_info(vSubstitution_id NUMBER) IS
      SELECT substitution_name, substitution_version
      FROM   gmd_item_substitution_hdr_b
      WHERE  substitution_id =  vSubstitution_id;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- If version control is turned ON - copy the existing formula substitution
    -- details and its association and create a new substitution header with
    -- these details.
    IF (GMD_COMMON_VAL.version_control_state('SUBSTITUTION'
                                             ,p_substitution_id) = 'Y') THEN

      OPEN  get_substitution_info(p_substitution_id);
      FETCH get_substitution_info INTO l_old_substitution_name,
                                       l_old_substitution_version;
      CLOSE get_substitution_info;

      Copy_substitution
      ( p_old_substitution_id      => p_substitution_id
      , x_new_substitution_version => l_new_substitution_version
      , x_message_count            => x_message_count
      , x_message_list             => x_message_list
      , x_return_status            => x_return_status
      );

      IF (x_return_status = 'S') THEN
        FND_MESSAGE.SET_NAME('GMD','GMD_CONC_NEW_OBJECT_VERSION');
        FND_MESSAGE.SET_TOKEN('REPLACE_TYPE','SUBSTITUTION');
  	FND_MESSAGE.SET_TOKEN('VERSION',l_new_substitution_version);
        FND_MESSAGE.SET_TOKEN('OBJECT_NAME',l_old_substitution_name);
        FND_MESSAGE.SET_TOKEN('OBJECT_TYPE','SUBSTITUTION');
        FND_MESSAGE.SET_TOKEN('NEW_ITEM',l_old_substitution_name||' - '||
                                         l_old_substitution_version);
        FND_MSG_PUB.ADD;
      END IF;
    END IF;

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  END Create_new_substitution_vers;

  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Create_substitution_header                                    */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Create_substitution_header
  ( p_substitution_id      IN  gmd_item_substitution_hdr.substitution_id%TYPE
  , p_substitution_hdr_rec IN  gmd_substitution_pub.gmd_substitution_hdr_rec_type
  , x_message_count        OUT NOCOPY  NUMBER
  , x_message_list         OUT NOCOPY  VARCHAR2
  , x_return_status        OUT NOCOPY  VARCHAR2
  ) IS

    l_api_name     CONSTANT   VARCHAR2(30) := 'Create_substitution_header';
    l_row_id                  ROWID;
    l_original_prim_item_um   VARCHAR2(3);

    Cursor get_item_info(vItem_id NUMBER) IS
      SELECT primary_uom_code
      FROM   mtl_system_items_b
      WHERE  inventory_item_id = vItem_id;

    /* Define Exceptions */
    substitution_creation_failure    EXCEPTION;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    OPEN get_item_info(p_substitution_hdr_rec.original_inventory_item_id);
    FETCH get_item_info INTO l_original_prim_item_um;
    CLOSE get_item_info;

    IF (l_original_prim_item_um IS NULL) THEN
      FND_MESSAGE.SET_NAME ('GMD', 'GMD_INVALID_ORIGINAL_ITEM');
      FND_MSG_PUB.ADD;
      RAISE substitution_creation_failure;
    END IF;

    -- Call the table handler for insert of substitution header
    GMD_ITEM_SUBSTITUTION_HDR_PKG.INSERT_ROW(
       X_ROWID                    => l_row_id,
       X_SUBSTITUTION_ID          => p_substitution_id,
       X_SUBSTITUTION_NAME        => p_substitution_hdr_rec.substitution_name,
       X_SUBSTITUTION_VERSION     => p_substitution_hdr_rec.substitution_version,
       X_SUBSTITUTION_STATUS      => 100,
       X_ORIGINAL_INVENTORY_ITEM_ID => p_substitution_hdr_rec.original_inventory_item_id,
       X_ORIGINAL_UOM             => l_original_prim_item_um,
       X_ORIGINAL_QTY             => p_substitution_hdr_rec.original_qty,
       X_PREFERENCE               => p_substitution_hdr_rec.preference,
       X_START_DATE               => p_substitution_hdr_rec.start_date,
       X_END_DATE                 => p_substitution_hdr_rec.end_date,
       X_OWNER_ORGANIZATION_ID    => p_substitution_hdr_rec.owner_organization_id,
       X_REPLACEMENT_UOM_TYPE     => p_substitution_hdr_rec.replacement_uom_type,
       X_ATTRIBUTE_CATEGORY       => p_substitution_hdr_rec.attribute_category,
       X_ATTRIBUTE1               => p_substitution_hdr_rec.attribute1,
       X_ATTRIBUTE2               => p_substitution_hdr_rec.attribute2,
       X_ATTRIBUTE3               => p_substitution_hdr_rec.attribute3,
       X_ATTRIBUTE4               => p_substitution_hdr_rec.attribute4,
       X_ATTRIBUTE5               => p_substitution_hdr_rec.attribute5,
       X_ATTRIBUTE6               => p_substitution_hdr_rec.attribute6,
       X_ATTRIBUTE7               => p_substitution_hdr_rec.attribute7,
       X_ATTRIBUTE8               => p_substitution_hdr_rec.attribute8,
       X_ATTRIBUTE9               => p_substitution_hdr_rec.attribute9,
       X_ATTRIBUTE10              => p_substitution_hdr_rec.attribute10,
       X_ATTRIBUTE11              => p_substitution_hdr_rec.attribute11,
       X_ATTRIBUTE12              => p_substitution_hdr_rec.attribute12,
       X_ATTRIBUTE13              => p_substitution_hdr_rec.attribute13,
       X_ATTRIBUTE14              => p_substitution_hdr_rec.attribute14,
       X_ATTRIBUTE15              => p_substitution_hdr_rec.attribute15,
       X_ATTRIBUTE16              => p_substitution_hdr_rec.attribute16,
       X_ATTRIBUTE17              => p_substitution_hdr_rec.attribute17,
       X_ATTRIBUTE18              => p_substitution_hdr_rec.attribute18,
       X_ATTRIBUTE19              => p_substitution_hdr_rec.attribute19,
       X_ATTRIBUTE20              => p_substitution_hdr_rec.attribute20,
       X_ATTRIBUTE21              => p_substitution_hdr_rec.attribute21,
       X_ATTRIBUTE22              => p_substitution_hdr_rec.attribute22,
       X_ATTRIBUTE23              => p_substitution_hdr_rec.attribute23,
       X_ATTRIBUTE24              => p_substitution_hdr_rec.attribute24,
       X_ATTRIBUTE25              => p_substitution_hdr_rec.attribute25,
       X_ATTRIBUTE26              => p_substitution_hdr_rec.attribute26,
       X_ATTRIBUTE27              => p_substitution_hdr_rec.attribute27,
       X_ATTRIBUTE28              => p_substitution_hdr_rec.attribute28,
       X_ATTRIBUTE29              => p_substitution_hdr_rec.attribute29,
       X_ATTRIBUTE30              => p_substitution_hdr_rec.attribute30,
       X_SUBSTITUTION_DESCRIPTION => p_substitution_hdr_rec.substitution_description,
       X_CREATION_DATE            => p_substitution_hdr_rec.creation_date,
       X_CREATED_BY               => p_substitution_hdr_rec.created_by,
       X_LAST_UPDATE_DATE         => p_substitution_hdr_rec.last_update_date,
       X_LAST_UPDATED_BY          => p_substitution_hdr_rec.last_updated_by,
       X_LAST_UPDATE_LOGIN        => p_substitution_hdr_rec.last_update_login);

    IF (l_row_id IS NULL) THEN
      Raise substitution_creation_failure;
    END IF;

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);

  EXCEPTION
    WHEN substitution_creation_failure THEN
         x_return_status := FND_API.G_RET_STS_ERROR;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
    WHEN OTHERS THEN
         fnd_msg_pub.add_exc_msg (GMD_SUBSTITUTION_PVT.m_pkg_name, l_api_name);
         x_return_status := FND_API.g_ret_sts_unexp_error;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
  END Create_substitution_header;

  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Create_substitution_detail                                    */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
    /* Rajender Nalla    09-OCT-06   Initial implementation.         */
  /* =============================================================== */
  PROCEDURE Create_substitution_detail
  ( p_substitution_line_id IN  gmd_item_substitution_dtl.substitution_line_id%TYPE
  , p_substitution_id      IN  gmd_item_substitution_dtl.substitution_id%TYPE
  , p_substitution_dtl_rec IN  gmd_substitution_pub.gmd_substitution_dtl_rec_type
  , x_message_count        OUT NOCOPY  NUMBER
  , x_message_list         OUT NOCOPY  VARCHAR2
  , x_return_status        OUT NOCOPY  VARCHAR2
  ) IS
    l_api_name    CONSTANT VARCHAR2(30) := 'Create_substitution_detail';
    l_row_id               ROWID;

    /* Define Exceptions */
    substitution_creation_failure    EXCEPTION;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Call the table handler for insert of substitution details
    GMD_ITEM_SUBSTITUTION_DTL_PKG.INSERT_ROW(
       X_ROWID                    => l_row_id,
       X_SUBSTITUTION_LINE_ID     => p_substitution_line_id,
       X_SUBSTITUTION_ID          => p_substitution_id,
       X_INVENTORY_ITEM_ID        => p_substitution_dtl_rec.inventory_item_id,
       X_UNIT_QTY                 => p_substitution_dtl_rec.unit_qty,
       X_DETAIL_UOM               => p_substitution_dtl_rec.detail_uom,
       X_CREATION_DATE            => p_substitution_dtl_rec.creation_date,
       X_CREATED_BY               => p_substitution_dtl_rec.created_by,
       X_LAST_UPDATE_DATE         => p_substitution_dtl_rec.last_update_date,
       X_LAST_UPDATED_BY          => p_substitution_dtl_rec.last_updated_by,
       X_LAST_UPDATE_LOGIN        => p_substitution_dtl_rec.last_update_login);

    IF (l_row_id IS NULL) THEN
      Raise substitution_creation_failure;
    END IF;

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  EXCEPTION
    WHEN substitution_creation_failure THEN
         x_return_status := FND_API.G_RET_STS_ERROR;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
    WHEN OTHERS THEN
         fnd_msg_pub.add_exc_msg (GMD_SUBSTITUTION_PVT.m_pkg_name, l_api_name);
         x_return_status := FND_API.g_ret_sts_unexp_error;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
  END Create_substitution_detail;


  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Create_formula_association                                    */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Create_formula_association
  ( p_substitution_id           IN  gmd_formula_substitution.substitution_id%TYPE
  , p_formula_substitution_tbl  IN  gmd_substitution_pub.gmd_formula_substitution_tab
  , x_message_count             OUT NOCOPY  NUMBER
  , x_message_list              OUT NOCOPY  VARCHAR2
  , x_return_status             OUT NOCOPY  VARCHAR2
  ) IS

    l_api_name    CONSTANT      VARCHAR2(30) := 'Create_formula_association';
    l_row_id                    ROWID;
    l_associated_flag           VARCHAR2(1) := 'N';
    l_original_item_id          NUMBER;
    l_status                    NUMBER;
    l_is_new_version_created    boolean := FALSE;
    l_subs_start_date           Date;
    l_start_date                Date;
    l_formula_substitution_id   NUMBER;

    CURSOR get_substitution_info(vSubstitution_id  NUMBER) IS
      Select substitution_status, start_date, original_inventory_item_id
      From   gmd_item_substitution_hdr_b
      Where  substitution_id = vSubstitution_id;

    /* Define Exceptions */
    substitution_creation_failure    EXCEPTION;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Calculation 1
    -- List status is Appr for Gen Use and formulas are associated to this list
    -- set the associated flag to 'Y'
    OPEN get_substitution_info(p_substitution_id);
    FETCH get_substitution_info INTO l_status, l_subs_start_date, l_original_item_id;
    CLOSE get_substitution_info;

    IF (l_status between 700 and 799) THEN
      l_associated_flag := 'Y';
    END IF;

    FOR i in 1 .. p_formula_substitution_tbl.count LOOP
      -- get the formula substitution id
      select gmd_formula_substitution_s.nextval
        into l_formula_substitution_id
        from dual;

      -- Call the table handler for insert of formula substitution
      GMD_FORMULA_SUBSTITUTION_PKG.insert_row
      (
         X_ROWID                     => l_row_id
       , X_FORMULA_SUBSTITUTION_ID   => l_formula_substitution_id
       , X_SUBSTITUTION_ID           => p_substitution_id
       , X_FORMULA_ID                => p_formula_substitution_tbl(i).formula_id
       , X_ASSOCIATED_FLAG           => l_associated_flag
       , X_CREATION_DATE             => p_formula_substitution_tbl(i).creation_date
       , X_CREATED_BY                => p_formula_substitution_tbl(i).created_by
       , X_LAST_UPDATE_DATE          => p_formula_substitution_tbl(i).last_update_date
       , X_LAST_UPDATED_BY           => p_formula_substitution_tbl(i).last_updated_by
       , X_LAST_UPDATE_LOGIN         => p_formula_substitution_tbl(i).last_update_login
       );

      IF (l_row_id IS NULL) THEN
        Raise substitution_creation_failure;
      END IF;

      IF (l_status between 700 and 799) THEN
        OPEN Cur_check_substitute (p_formula_substitution_tbl(i).formula_id
                                  ,l_original_item_id
                                  ,p_substitution_id);
        FETCH Cur_check_substitute INTO l_start_date;
        CLOSE Cur_check_substitute;

        IF (NVL(l_start_date,l_subs_start_date) >= l_subs_start_date) THEN
          UPDATE fm_matl_dtl
          SET    ingredient_end_date = l_subs_start_date
          WHERE  formula_id = p_formula_substitution_tbl(i).formula_id
          AND    line_type = -1
          AND    inventory_item_id = l_original_item_id;
        END IF;
      END IF;
    END LOOP;

    Create_new_substitution_vers
      ( p_substitution_id  => p_substitution_id
      , x_message_count    => x_message_count
      , x_message_list     => x_message_list
      , x_return_status    => x_return_status
      );

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  EXCEPTION
    WHEN substitution_creation_failure THEN
         x_return_status := FND_API.G_RET_STS_ERROR;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
    WHEN OTHERS THEN
         fnd_msg_pub.add_exc_msg (GMD_SUBSTITUTION_PVT.m_pkg_name, l_api_name);
         x_return_status := FND_API.g_ret_sts_unexp_error;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
  END Create_formula_association;

  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Update_substitution_header                                    */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Update_substitution_header
  ( p_substitution_hdr_rec IN          gmd_item_substitution_hdr%ROWTYPE
  , x_message_count        OUT NOCOPY  NUMBER
  , x_message_list         OUT NOCOPY  VARCHAR2
  , x_return_status        OUT NOCOPY  VARCHAR2
  ) IS

    /* Local variable section */
    l_api_name    CONSTANT     VARCHAR2(30) := 'Update_substitution_header';
    l_dummy                    NUMBER := 0;
    l_start_date               DATE;
    l_old_substitution_hdr_rec gmd_item_substitution_hdr_b%ROWTYPE;

    CURSOR get_old_subs_rec(vSubstitution_id NUMBER) IS
      Select *
      From   gmd_item_substitution_hdr_b
      Where  substitution_id = vSubstitution_id;

   CURSOR check_for_date_overlap(vSubstitution_id    NUMBER
                                 ,vOriginal_item_id  NUMBER
                                 ,vPreference        NUMBER
                                 ,vStart_date        DATE
                                 ,vEnd_date          DATE) IS
      SELECT 1
      FROM  gmd_item_substitution_hdr_b
      WHERE substitution_id      <> vSubstitution_id
      AND   original_inventory_item_id = vOriginal_item_id
      AND   preference           = vPreference
      AND   vStart_date          >= start_date
      AND   substitution_status  < 1000
      AND   (end_date IS NULL OR vEnd_date <= end_date);

    /* Define Exceptions */
    substitution_update_failure      EXCEPTION;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    OPEN  get_old_subs_rec(p_substitution_hdr_rec.substitution_id);
    FETCH get_old_subs_rec INTO l_old_substitution_hdr_rec;
    CLOSE get_old_subs_rec;

    -- Validation 2
    -- Combination of item, date range and preference would be considered for
    -- uniquess of a list.
    OPEN check_for_date_overlap(p_substitution_hdr_rec.substitution_id
                                ,p_substitution_hdr_rec.Original_inventory_item_id
                                ,p_substitution_hdr_rec.Preference
                                ,p_substitution_hdr_rec.Start_date
                                ,p_substitution_hdr_rec.End_date);
    FETCH check_for_date_overlap into l_dummy;
    CLOSE check_for_date_overlap;

    IF (l_dummy > 0) THEN
      FND_MESSAGE.SET_NAME('GMD','GMD_ITSUB_DATE_PRE_OVERLAP');
      FND_MSG_PUB.ADD;
      RAISE substitution_update_failure;
    END IF;

    -- Call the table handler for update of substitution header
    GMD_ITEM_SUBSTITUTION_HDR_PKG.UPDATE_ROW(
       X_SUBSTITUTION_ID           => p_substitution_hdr_rec.substitution_id,
       X_SUBSTITUTION_NAME         => p_substitution_hdr_rec.substitution_name,
       X_SUBSTITUTION_VERSION      => p_substitution_hdr_rec.substitution_version,
       X_SUBSTITUTION_STATUS       => p_substitution_hdr_rec.substitution_status,
       X_ORIGINAL_INVENTORY_ITEM_ID => p_substitution_hdr_rec.original_inventory_item_id,
       X_ORIGINAL_UOM              => p_substitution_hdr_rec.original_uom,
       X_ORIGINAL_QTY              => p_substitution_hdr_rec.original_qty,
       X_PREFERENCE                => p_substitution_hdr_rec.preference,
       X_START_DATE                => p_substitution_hdr_rec.start_date,
       X_END_DATE                  => p_substitution_hdr_rec.end_date,
       X_OWNER_ORGANIZATION_ID     => p_substitution_hdr_rec.owner_organization_id,
       X_REPLACEMENT_UOM_TYPE      => p_substitution_hdr_rec.replacement_uom_type,
       X_ATTRIBUTE_CATEGORY        => p_substitution_hdr_rec.attribute_category,
       X_ATTRIBUTE1                => p_substitution_hdr_rec.attribute1,
       X_ATTRIBUTE2                => p_substitution_hdr_rec.attribute2,
       X_ATTRIBUTE3                => p_substitution_hdr_rec.attribute3,
       X_ATTRIBUTE4                => p_substitution_hdr_rec.attribute4,
       X_ATTRIBUTE5                => p_substitution_hdr_rec.attribute5,
       X_ATTRIBUTE6                => p_substitution_hdr_rec.attribute6,
       X_ATTRIBUTE7                => p_substitution_hdr_rec.attribute7,
       X_ATTRIBUTE8                => p_substitution_hdr_rec.attribute8,
       X_ATTRIBUTE9                => p_substitution_hdr_rec.attribute9,
       X_ATTRIBUTE10               => p_substitution_hdr_rec.attribute10,
       X_ATTRIBUTE11               => p_substitution_hdr_rec.attribute11,
       X_ATTRIBUTE12               => p_substitution_hdr_rec.attribute12,
       X_ATTRIBUTE13               => p_substitution_hdr_rec.attribute13,
       X_ATTRIBUTE14               => p_substitution_hdr_rec.attribute14,
       X_ATTRIBUTE15               => p_substitution_hdr_rec.attribute15,
       X_ATTRIBUTE16               => p_substitution_hdr_rec.attribute16,
       X_ATTRIBUTE17               => p_substitution_hdr_rec.attribute17,
       X_ATTRIBUTE18               => p_substitution_hdr_rec.attribute18,
       X_ATTRIBUTE19               => p_substitution_hdr_rec.attribute19,
       X_ATTRIBUTE20               => p_substitution_hdr_rec.attribute20,
       X_ATTRIBUTE21               => p_substitution_hdr_rec.attribute21,
       X_ATTRIBUTE22               => p_substitution_hdr_rec.attribute22,
       X_ATTRIBUTE23               => p_substitution_hdr_rec.attribute23,
       X_ATTRIBUTE24               => p_substitution_hdr_rec.attribute24,
       X_ATTRIBUTE25               => p_substitution_hdr_rec.attribute25,
       X_ATTRIBUTE26               => p_substitution_hdr_rec.attribute26,
       X_ATTRIBUTE27               => p_substitution_hdr_rec.attribute27,
       X_ATTRIBUTE28               => p_substitution_hdr_rec.attribute28,
       X_ATTRIBUTE29               => p_substitution_hdr_rec.attribute29,
       X_ATTRIBUTE30               => p_substitution_hdr_rec.attribute30,
       X_SUBSTITUTION_DESCRIPTION  => p_substitution_hdr_rec.substitution_description,
       X_LAST_UPDATE_DATE          => p_substitution_hdr_rec.last_update_date,
       X_LAST_UPDATED_BY           => p_substitution_hdr_rec.last_updated_by,
       X_LAST_UPDATE_LOGIN         => p_substitution_hdr_rec.last_update_login);

    -- Calculation 1
    -- List status is Appr for Gen Use and formulas are associated to this list
    -- a) If Start Date is changed - Re-derive the ingredient effective end date
    --    and modify the effective substitute date for ingredient whose formulas
    --    are associated.
    IF (l_old_substitution_hdr_rec.start_date
                              <> p_substitution_hdr_rec.start_date) THEN
      FOR l_rec IN Cur_get_substitution(p_substitution_hdr_rec.substitution_id) LOOP
        OPEN Cur_check_substitute (l_rec.formula_id
                                 , l_rec.original_inventory_item_id
                                 , p_substitution_hdr_rec.substitution_id);
        FETCH Cur_check_substitute INTO l_start_date;
        CLOSE Cur_check_substitute;

        IF (NVL(l_start_date,p_substitution_hdr_rec.start_date) >=
                                         p_substitution_hdr_rec.start_date) THEN
          UPDATE fm_matl_dtl
          SET    ingredient_end_date = p_substitution_hdr_rec.start_date
          WHERE  formula_id = l_rec.formula_id
          AND    line_type = -1
          AND    inventory_item_id = l_rec.original_inventory_item_id;
        END IF;
      END LOOP;
    END IF;

    -- If version control is turned ON - copy the existing formula substitution
    -- details and its association and create a new substitution header with
    -- these details.
    Create_new_substitution_vers
    ( p_substitution_id       => p_substitution_hdr_rec.substitution_id
    , x_message_count         => x_message_count
    , x_message_list          => x_message_list
    , x_return_status         => x_return_status
    );

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  EXCEPTION
    WHEN substitution_update_failure THEN
         x_return_status := FND_API.G_RET_STS_ERROR;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
    WHEN OTHERS THEN
         fnd_msg_pub.add_exc_msg (GMD_SUBSTITUTION_PVT.m_pkg_name, l_api_name);
         x_return_status := FND_API.g_ret_sts_unexp_error;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
  END Update_substitution_header;

  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Update_substitution_detail                                    */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Update_substitution_detail
  ( p_substitution_dtl_rec  IN          gmd_item_substitution_dtl%ROWTYPE
  , x_message_count         OUT NOCOPY  NUMBER
  , x_message_list          OUT NOCOPY  VARCHAR2
  , x_return_status         OUT NOCOPY  VARCHAR2
  ) IS
    /* Local variable section */
    l_api_name    CONSTANT VARCHAR2(30) := 'Update_substitution_detail';
    l_substitution_dtl_rec gmd_item_substitution_dtl%ROWTYPE;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    -- Call the table handler for update of substitution details
    GMD_ITEM_SUBSTITUTION_DTL_PKG.UPDATE_ROW(
       X_SUBSTITUTION_LINE_ID      => p_substitution_dtl_rec.substitution_line_id,
       X_SUBSTITUTION_ID           => p_substitution_dtl_rec.substitution_id,
       X_INVENTORY_ITEM_ID         => p_substitution_dtl_rec.inventory_item_id,
       X_UNIT_QTY                  => p_substitution_dtl_rec.unit_qty,
       X_DETAIL_UOM                => p_substitution_dtl_rec.detail_uom,
       X_LAST_UPDATE_DATE          => p_substitution_dtl_rec.last_update_date,
       X_LAST_UPDATED_BY           => p_substitution_dtl_rec.last_updated_by,
       X_LAST_UPDATE_LOGIN         => p_substitution_dtl_rec.last_update_login);

    -- If version control is turned ON - copy the existing formula substitution
    -- details and its association and create a new substitution header with
    -- these details.
    Create_new_substitution_vers
    ( p_substitution_id       => p_substitution_dtl_rec.substitution_id
    , x_message_count         => x_message_count
    , x_message_list          => x_message_list
    , x_return_status         => x_return_status
    );

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  EXCEPTION
    WHEN OTHERS THEN
      fnd_msg_pub.add_exc_msg (gmd_substitution_pvt.m_pkg_name, l_api_name);
      x_return_status := FND_API.g_ret_sts_unexp_error;
      fnd_msg_pub.count_and_get (
         p_count   => x_message_count
        ,p_encoded => FND_API.g_false
        ,p_data    => x_message_list);
  END Update_substitution_detail;

  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Delete_formula_association                                    */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Delete_formula_association
  ( p_formula_substitution_id  IN          NUMBER
  , x_message_count            OUT NOCOPY  NUMBER
  , x_message_list             OUT NOCOPY  VARCHAR2
  , x_return_status            OUT NOCOPY  VARCHAR2
  ) IS
    l_api_name    CONSTANT VARCHAR2(30) := 'Delete_formula_association';
    l_end_date          DATE;
    l_formula_id        NUMBER;
    l_original_item_id  NUMBER;
    l_substitution_id   NUMBER;

    CURSOR get_fm_and_orig_item(vformula_substitution_id  NUMBER)  IS
      Select formula_id, original_inventory_item_id, i.substitution_id
      From   gmd_item_substitution_hdr_b i, gmd_formula_substitution f
      Where  f.formula_substitution_id = vformula_substitution_id
      AND    i.substitution_id = f.substitution_id;

    CURSOR Cur_get_sub_end_date(vformula_id  NUMBER,
                                vOriginal_item_id NUMBER,
                                vSubstitution_id NUMBER) IS
      SELECT MIN(z.start_date)
      FROM   gmd_item_substitution_hdr_b z,
             gmd_formula_substitution y
      WHERE  y.substitution_id <> vSubstitution_id
      AND    z.substitution_id  = y.substitution_id
      AND    z.original_inventory_item_id = vOriginal_item_id
      AND    y.formula_id = vformula_id
      AND    z.substitution_status BETWEEN 700 AND 799;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    OPEN  get_fm_and_orig_item(p_formula_substitution_id);
    FETCH get_fm_and_orig_item INTO l_formula_id
                                  , l_original_item_id
                                  , l_substitution_id;
    CLOSE get_fm_and_orig_item;

    -- Call the table handler for delete of formula substitution association
    GMD_FORMULA_SUBSTITUTION_PKG.DELETE_ROW
    (
      X_FORMULA_SUBSTITUTION_ID => p_formula_substitution_id
    );

    IF ((l_formula_id IS NOT NULL) AND (l_original_item_id IS NOT NULL)) THEN
      OPEN  cur_get_sub_end_date(l_formula_id,
                                 l_original_item_id,
                                 l_substitution_id);
      FETCH cur_get_sub_end_date into l_end_date;
      CLOSE cur_get_sub_end_date;

      UPDATE fm_matl_dtl
      SET    ingredient_end_date = l_end_date
      WHERE  formula_id = l_formula_id
      AND    inventory_item_id = l_original_item_id
      AND    line_type = -1;
    END IF;

    -- If version control is turned ON - copy the existing formula substitution
    -- details and its association and create a new substitution header with
    -- these details.
    Create_new_substitution_vers
    ( p_substitution_id       => l_substitution_id
    , x_message_count         => x_message_count
    , x_message_list          => x_message_list
    , x_return_status         => x_return_status
    );

    /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  EXCEPTION
    WHEN OTHERS THEN
      fnd_msg_pub.add_exc_msg (gmd_substitution_pvt.m_pkg_name, l_api_name);
      x_return_status := FND_API.g_ret_sts_unexp_error;
      fnd_msg_pub.count_and_get (
         p_count   => x_message_count
        ,p_encoded => FND_API.g_false
        ,p_data    => x_message_list);
  END Delete_formula_association;

  /* =============================================================== */
  /* Procedure:                                                      */
  /*   Copy_substitution                                             */
  /*                                                                 */
  /* DESCRIPTION:                                                    */
  /*                                                                 */
  /*                                                                 */
  /* History :                                                       */
  /* Rajender Nalla    09-OCT-06   Initial implementation.           */
  /* =============================================================== */
  PROCEDURE Copy_substitution
  ( p_old_substitution_id      IN          NUMBER
  , x_new_substitution_version OUT NOCOPY  NUMBER
  , x_message_count            OUT NOCOPY  NUMBER
  , x_message_list             OUT NOCOPY  VARCHAR2
  , x_return_status            OUT NOCOPY  VARCHAR2
  ) IS

    -- local record structure
    l_substitution_hdr_rec     gmd_substitution_pub.gmd_substitution_hdr_rec_type;
    l_substitution_dtl_rec     gmd_substitution_pub.gmd_substitution_dtl_rec_type;
    l_formula_substitution_tbl gmd_substitution_pub.gmd_formula_substitution_tab;

    -- local variables
    l_substitution_id               NUMBER;
    l_substitution_line_id          NUMBER;
    l_formula_substitution_id       NUMBER;
    l_row_count                     NUMBER := 0;

    l_api_name             CONSTANT VARCHAR2(30) := 'Copy_substitution';

    Cursor get_max_vers_plus_one(vSubstitution_name VARCHAR2) IS
      SELECT max(substitution_version) + 1
      FROM   gmd_item_substitution_hdr_b
      WHERE  substitution_name = vSubstitution_name;

    Cursor get_max_pref_plus_one(vOriginal_item_id NUMBER) IS
      SELECT max(preference) + 1
      FROM   gmd_item_substitution_hdr_b
      WHERE  original_inventory_item_id = vOriginal_item_id;

    Cursor get_substitution_hdr_rec(vSubstitution_id NUMBER) IS
      SELECT substitution_name
           , substitution_descriptiOn
           , substitution_version
           , original_inventory_item_id
           , ' ' original_item_no
           , original_qty
           , preference
           , start_date
           , end_date
           , owner_organization_id
           , replacement_uom_type
           , attribute_category
           , attribute1
           , attribute2
           , attribute3
           , attribute4
           , attribute5
           , attribute6
           , attribute7
           , attribute8
           , attribute9
           , attribute10
           , attribute11
           , attribute12
           , attribute13
           , attribute14
           , attribute15
           , attribute16
           , attribute17
           , attribute18
           , attribute19
           , attribute20
           , attribute21
           , attribute22
           , attribute23
           , attribute24
           , attribute25
           , attribute26
           , attribute27
           , attribute28
           , attribute29
           , attribute30
           , creation_date
           , created_by
           , last_update_date
           , last_updated_by
           , last_update_login
      From   gmd_item_substitution_hdr
      Where  substitution_id = vSubstitution_id;

    Cursor get_substitution_dtl_rec(vSubstitution_id NUMBER) IS
      SELECT inventory_item_id
           , ' ' item_no
           , unit_qty
           , detail_uom
           , creation_date
           , created_by
           , last_update_date
           , last_updated_by
           , last_update_login
      FROM   gmd_item_substitution_dtl
      WHERE  substitution_id = vSubstitution_id;

     Cursor get_fm_substitution_tbl(vSubstitution_id NUMBER) IS
      SELECT formula_id
           , ' ' formula_no
           , 1 formula_vers
           , creation_date
           , created_by
           , last_update_date
           , last_updated_by
           , last_update_login
      FROM   gmd_formula_substitution
      WHERE  substitution_id = vSubstitution_id;

    -- Exception declaration
    substitution_creation_failure   EXCEPTION;
  BEGIN
    /* Set the return status to success initially */
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    /* Populate the record */
    -- Populate header
    OPEN  get_substitution_hdr_rec(p_old_substitution_id);
    FETCH get_substitution_hdr_rec INTO l_substitution_hdr_rec;
    CLOSE get_substitution_hdr_rec;

    -- Populate detail
    OPEN  get_substitution_dtl_rec(p_old_substitution_id);
    FETCH get_substitution_dtl_rec INTO l_substitution_dtl_rec;
    CLOSE get_substitution_dtl_rec;

    -- Populate formula substitution table
    FOR get_fmsub_rec IN get_fm_substitution_tbl(p_old_substitution_id) LOOP
      l_row_count := l_row_count + 1;
      l_formula_substitution_tbl(l_row_count) := get_fmsub_rec;
    END LOOP;

    /* Rollback changes */
    ROLLBACK;

    /* call individual private APIs */
    -- Insert substitution header
    -- Get the substitution_id
    select  gmd_item_substitution_hdr_s.nextval
      into  l_substitution_id
     from   dual;

    -- Get the substitution max version
    OPEN get_max_vers_plus_one(l_substitution_hdr_rec.substitution_name);
    FETCH get_max_vers_plus_one INTO l_substitution_hdr_rec.substitution_version;
    CLOSE get_max_vers_plus_one;

    -- Get the substitution max priority
    OPEN get_max_pref_plus_one(l_substitution_hdr_rec.original_inventory_item_id);
    FETCH get_max_pref_plus_one INTO l_substitution_hdr_rec.preference;
    CLOSE get_max_pref_plus_one;

    Create_substitution_header
    ( p_substitution_id      => l_substitution_id
    , p_substitution_hdr_rec => l_substitution_hdr_rec
    , x_message_count        => x_message_count
    , x_message_list         => x_message_list
    , x_return_status        => x_return_status
    );

    IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
      RAISE substitution_creation_failure;
    END IF;

    -- Insert substitution detail
    -- set the primary key
    select  gmd_item_substitution_dtl_s.nextval
      into  l_substitution_line_id
      from  dual;

    Create_substitution_detail
    ( p_substitution_line_id => l_substitution_line_id
    , p_substitution_id      => l_substitution_id
    , p_substitution_dtl_rec => l_substitution_dtl_rec
    , x_message_count        => x_message_count
    , x_message_list         => x_message_list
    , x_return_status        => x_return_status
    );

    IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
      RAISE substitution_creation_failure;
    END IF;

    Create_formula_association
    ( p_substitution_id          => l_substitution_id
    , p_formula_substitution_tbl => l_formula_substitution_tbl
    , x_message_count            => x_message_count
    , x_message_list             => x_message_list
    , x_return_status            => x_return_status
    );

    IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
      RAISE substitution_creation_failure;
    END IF;

    -- Assign the new substitution version
    x_new_substitution_version := l_substitution_hdr_rec.substitution_version;

   /* Get the messgae list and count generated by this API */
    fnd_msg_pub.count_and_get (
       p_count   => x_message_count
      ,p_encoded => FND_API.g_false
      ,p_data    => x_message_list);
  EXCEPTION
    WHEN substitution_creation_failure THEN
         x_return_status := FND_API.G_RET_STS_ERROR;
         fnd_msg_pub.count_and_get (
            p_count   => x_message_count
           ,p_encoded => FND_API.g_false
           ,p_data    => x_message_list);
    WHEN OTHERS THEN
      fnd_msg_pub.add_exc_msg (gmd_substitution_pvt.m_pkg_name, l_api_name);
      x_return_status := FND_API.g_ret_sts_unexp_error;
      fnd_msg_pub.count_and_get (
         p_count   => x_message_count
        ,p_encoded => FND_API.g_false
        ,p_data    => x_message_list);
  END Copy_substitution;

END GMD_SUBSTITUTION_PVT;

/
