--------------------------------------------------------
--  DDL for Package Body HXC_HXCMISTC_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HXC_HXCMISTC_XMLP_PKG" AS
/* $Header: HXCMISTCB.pls 120.0 2007/12/04 05:40:50 amakrish noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    L_COL_1 VARCHAR2(80) := NULL;
    L_COL_2 VARCHAR2(80) := NULL;
    L_COL_3 VARCHAR2(80) := NULL;
    L_COL_4 VARCHAR2(80) := NULL;
    L_SORT1_LABEL VARCHAR2(80) := NULL;
    L_SORT2_LABEL VARCHAR2(80) := NULL;
    L_SORT3_LABEL VARCHAR2(80) := NULL;
    L_SORT4_LABEL VARCHAR2(80) := NULL;
    L_DEFINE_MEANING VARCHAR2(80) := NULL;
    L_APPLICATION_LABEL VARCHAR2(80) := NULL;
    L_ORG_LABEL VARCHAR2(240) := NULL;
    L_LOCATION_LABEL VARCHAR2(80) := NULL;
    L_PAYROLL_LABEL VARCHAR2(80) := NULL;
    L_SUPERVISOR_LABEL VARCHAR2(80) := NULL;
    L_EMPOYEE_NAME_LABEL VARCHAR2(80) := NULL;
    L_EMPLOYEE_NUMBER_LABEL VARCHAR2(80) := NULL;
    L_PERSON_TYPE VARCHAR2(200) := NULL;
    L_PERSON_TYPE3 VARCHAR2(200) := NULL;
    L_ASSIGNMENT_TYPE VARCHAR2(200) := NULL;
    L_PERSON_TYPE_LABEL VARCHAR2(80) := NULL;
    L_ASSIGNMENT_TYPE_LABEL VARCHAR2(80) := NULL;
    L_VENDOR_LABEL VARCHAR2(2000) := NULL;
    LV_DUMMY VARCHAR2(100);
    CURSOR C_PER_DTL(CP_PERSON_ID IN NUMBER,CP_EFFECTIVE_DATE IN DATE) IS
      SELECT
        PPF.FULL_NAME,
        NVL(PPF.EMPLOYEE_NUMBER
           ,PPF.NPW_NUMBER)
      FROM
        PER_PEOPLE_F PPF
      WHERE PPF.PERSON_ID = CP_PERSON_ID
        AND CP_EFFECTIVE_DATE between PPF.EFFECTIVE_START_DATE
        AND PPF.EFFECTIVE_END_DATE;
    CURSOR C_PAYROLL(CP_PAYROLL_ID IN NUMBER,CP_EFFECTIVE_DATE IN DATE) IS
      SELECT
        PAY.PAYROLL_NAME
      FROM
        PAY_PAYROLLS_F PAY
      WHERE PAY.PAYROLL_ID = CP_PAYROLL_ID
        AND CP_EFFECTIVE_DATE between PAY.EFFECTIVE_START_DATE
        AND PAY.EFFECTIVE_END_DATE;
    CURSOR C_VENDOR(P_VENDOR_ID IN NUMBER) IS
      SELECT
        VENDOR_NAME
      FROM
        PO_VENDORS
      WHERE VENDOR_ID = P_VENDOR_ID;
    CURSOR C_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2,P_LOOKUP_CODE IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        HR_LOOKUPS
      WHERE LOOKUP_TYPE = P_LOOKUP_TYPE
        AND LOOKUP_CODE = P_LOOKUP_CODE;
  BEGIN
    IF P_DEBUG = 'Y' THEN
      HR_UTILITY.TRACE_ON(NULL
                         ,'MH');
    END IF;
    COL_1 := NULL;
    COL_2 := NULL;
    COL_3 := NULL;
    COL_4 := NULL;
    P_SORT1_LABEL := NULL;
    P_SORT2_LABEL := NULL;
    P_SORT3_LABEL := NULL;
    P_SORT4_LABEL := NULL;
    SORT_OPTION(P_SORT_OPTION1
               ,L_COL_1
               ,L_SORT1_LABEL);
    SORT_OPTION(P_SORT_OPTION2
               ,L_COL_2
               ,L_SORT2_LABEL);
    SORT_OPTION(P_SORT_OPTION3
               ,L_COL_3
               ,L_SORT3_LABEL);
    SORT_OPTION(P_SORT_OPTION4
               ,L_COL_4
               ,L_SORT4_LABEL);
    COL_1 := L_COL_1;
    P_SORT1_LABEL := L_SORT1_LABEL;
    COL_2 := L_COL_2;
    P_SORT2_LABEL := L_SORT2_LABEL;
    COL_3 := L_COL_3;
    P_SORT3_LABEL := L_SORT3_LABEL;
    COL_4 := L_COL_4;
    P_SORT4_LABEL := L_SORT4_LABEL;
    IF COL_1 IS NULL THEN
      COL_1 := 'hou.name';
    END IF;
    IF COL_2 IS NULL THEN
      COL_2 := 'hl.location_code';
    END IF;
    IF COL_3 IS NULL THEN
      COL_3 := 'ppa.payroll_name';
    END IF;
    IF COL_4 IS NULL THEN
      COL_4 := 'ppf.full_name';
    END IF;
    IF P_DEFINE_MISSING IS NOT NULL THEN
      SELECT
        MEANING
      INTO
        L_DEFINE_MEANING
      FROM
        HXC_LOOKUPS
      WHERE LOOKUP_TYPE = 'HXC_DEFINE_MISSING'
        AND LOOKUP_CODE = P_DEFINE_MISSING;
      P_DEFINE_LABEL := L_DEFINE_MEANING;
    END IF;
    IF P_APPLICATION IS NOT NULL THEN
      SELECT
        NAME
      INTO
        P_APPLICATION_LABEL
      FROM
        HXC_TIME_RECIPIENTS
      WHERE TIME_RECIPIENT_ID = P_APPLICATION;
    END IF;
    IF P_PERSON_NAME IS NOT NULL THEN
      OPEN C_PER_DTL(P_PERSON_NAME,P_DATE_TO);
      FETCH C_PER_DTL
       INTO
         P_PERSON_NAME_LABEL
         ,LV_DUMMY;
      CLOSE C_PER_DTL;
    END IF;
    IF P_PERSON_NUMBER IS NOT NULL THEN
      OPEN C_PER_DTL(P_PERSON_NUMBER,P_DATE_TO);
      FETCH C_PER_DTL
       INTO
         LV_DUMMY
         ,P_PERSON_NUMBER_LABEL;
      CLOSE C_PER_DTL;
    END IF;
    IF P_LOCATION IS NOT NULL THEN
      SELECT
        LOCATION_CODE
      INTO
        P_LOCATION_LABEL
      FROM
        HR_LOCATIONS
      WHERE LOCATION_ID = P_LOCATION;
    END IF;
    IF P_ORGANIZATION IS NOT NULL THEN
      SELECT
        NAME
      INTO
        P_ORGANIZATION_LABEL
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_ORGANIZATION;
    END IF;
    IF P_PAYROLL IS NOT NULL THEN
      OPEN C_PAYROLL(P_PAYROLL,P_DATE_TO);
      FETCH C_PAYROLL
       INTO
         P_PAYROLL_LABEL;
      CLOSE C_PAYROLL;
    END IF;
    IF P_PAYROLL_ASSIGNMENT_SET IS NOT NULL THEN
      SELECT
        ASSIGNMENT_SET_NAME
      INTO
        P_ASSIGNMENT_SET_LABEL
      FROM
        HR_ASSIGNMENT_SETS
      WHERE ASSIGNMENT_SET_ID = P_PAYROLL_ASSIGNMENT_SET;
    END IF;
    IF P_SUPERVISOR IS NOT NULL THEN
      OPEN C_PER_DTL(P_SUPERVISOR,P_DATE_TO);
      FETCH C_PER_DTL
       INTO
         P_SUPERVISOR_LABEL
         ,LV_DUMMY;
      CLOSE C_PER_DTL;
    END IF;
    IF P_VENDOR_ID IS NOT NULL THEN
      OPEN C_VENDOR(P_VENDOR_ID);
      FETCH C_VENDOR
       INTO
         P_VENDOR_LABEL;
      CLOSE C_VENDOR;
    END IF;
    IF P_PERSON_TYPE IS NOT NULL THEN
      OPEN C_LOOKUP_MEANING('HXC_PERSON_TYPES',P_PERSON_TYPE);
      FETCH C_LOOKUP_MEANING
       INTO
         P_PERSON_TYPE_LABEL;
      CLOSE C_LOOKUP_MEANING;
    END IF;
    IF P_ASSIGNMENT_TYPE IS NOT NULL THEN
      OPEN C_LOOKUP_MEANING('HXC_ASSIGNMENT_TYPES',P_ASSIGNMENT_TYPE);
      FETCH C_LOOKUP_MEANING
       INTO
         P_ASSIGNMENT_TYPE_LABEL;
      CLOSE C_LOOKUP_MEANING;
    END IF;
    IF (P_PERSON_TYPE IS NULL) THEN
      L_PERSON_TYPE := '(''EMP'',''EX_EMP'',''EMP_APL'',''EX_EMP_APL'',''CWK'',''EX_CWK'')';
      L_PERSON_TYPE3 := '(''EMP_APL'',''EMP'',''CWK'')';
    ELSE
      IF (P_PERSON_TYPE = 'EMP') THEN
        L_PERSON_TYPE := '(''EMP'',''EMP_APL'',''EX_EMP'',''EX_EMP_APL'')';
        L_PERSON_TYPE3 := '(''EMP_APL'',''EMP'')';
      ELSIF (P_PERSON_TYPE = 'CWK') THEN
        L_PERSON_TYPE := '(''CWK'',''EX_CWK'')';
        L_PERSON_TYPE3 := '(''CWK'')';
      ELSIF (P_PERSON_TYPE = 'EMP_CWK') THEN
        L_PERSON_TYPE := '(''EMP'',''EMP_APL'',''EX_EMP'',''EX_EMP_APL'',''CWK'',''EX_CWK'')';
        L_PERSON_TYPE3 := '(''EMP_APL'',''EMP'',''CWK'')';
      END IF;
    END IF;
    PERSON_TYPE1 := 'and     ppf.effective_start_date = (select max(effective_start_date)
                                                        from   per_people_f
                                                        where  person_id = ppf.person_id
                                                        and effective_start_date <= :p_date_to
                    				    and effective_end_date >= :p_date_from
                    				    and ptu.person_id = person_id
                    				    and ptu.effective_start_date <= :p_date_to
                    				    and ptu.effective_end_date >= :p_date_from
                    				    and ppt.person_type_id = ptu.person_type_id
                                                        --and ppt.person_type_id   = person_type_id
                                                        and ppt.system_person_type in ' || L_PERSON_TYPE || ')';
    PERSON_TYPE2 := 'and ppt.system_person_type in ' || L_PERSON_TYPE;
    PERSON_TYPE3 := 'and ppt.system_person_type in ' || L_PERSON_TYPE3;
    IF (P_ASSIGNMENT_TYPE IS NULL) THEN
      L_ASSIGNMENT_TYPE := '(''ACTIVE_ASSIGN'',''ACTIVE_CWK'')';
    ELSE
      IF (P_ASSIGNMENT_TYPE = 'ACTIVE') THEN
        L_ASSIGNMENT_TYPE := '(''ACTIVE_ASSIGN'',''ACTIVE_CWK'')';
      ELSIF (P_ASSIGNMENT_TYPE = 'SUSP') THEN
        L_ASSIGNMENT_TYPE := '(''SUSP_ASSIGN'',''SUSP_CWK_ASG'')';
      ELSIF (P_ASSIGNMENT_TYPE = 'TERM') THEN
        L_ASSIGNMENT_TYPE := '(''TERM_ASSIGN'')';
      ELSIF (P_ASSIGNMENT_TYPE = 'ACTIVE_SUSP') THEN
        L_ASSIGNMENT_TYPE := '(''ACTIVE_ASSIGN'',''ACTIVE_CWK'',''SUSP_ASSIGN'',''SUSP_CWK_ASG'',''END'')';
      ELSIF (P_ASSIGNMENT_TYPE = 'ALL') THEN
        L_ASSIGNMENT_TYPE := '(''ACTIVE_ASSIGN'',''ACTIVE_CWK'',''SUSP_ASSIGN'',''SUSP_CWK_ASG'',''END'',''TERM_ASSIGN'')';
      END IF;
    END IF;
    ASSIGNMENT_TYPE1 := 'and ast1.per_system_status in ' || L_ASSIGNMENT_TYPE;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_APPLICATIONFORMULA RETURN CHAR IS
    L_ASG_STATUS_TYPE_ID PER_ASSIGNMENTS_F.ASSIGNMENT_STATUS_TYPE_ID%TYPE;
    L_PAYROLL_ID PER_ASSIGNMENTS_F.PAYROLL_ID%TYPE;
    L_SOFT_CODING_KEYFLEX_ID PER_ASSIGNMENTS_F.SOFT_CODING_KEYFLEX_ID%TYPE;
    L_PAY_SYSTEM_STATUS PER_ASSIGNMENT_STATUS_TYPES.PAY_SYSTEM_STATUS%TYPE;
    L_PAYROLL_NAME PAY_PAYROLLS_F.PAYROLL_NAME%TYPE;
    L_SCL_TCARD_REQ VARCHAR2(5);
  BEGIN
    RETURN L_PAYROLL_NAME;
  END CF_APPLICATIONFORMULA;

  PROCEDURE SORT_OPTION(L_SORT_OPTION IN VARCHAR2
                       ,L_SORT_BY OUT NOCOPY VARCHAR2
                       ,L_SORT_LABEL OUT NOCOPY VARCHAR2) IS
  BEGIN
    IF L_SORT_OPTION = 'APPLICATION' THEN
      L_SORT_BY := 'hasc.time_recipient_name';
      L_SORT_LABEL := 'Application';
    ELSIF L_SORT_OPTION = 'FULL_NAME' THEN
      L_SORT_BY := 'ppf.full_name';
      L_SORT_LABEL := 'Person Name';
    ELSIF L_SORT_OPTION = 'EMPLOYEE_NUMBER' THEN
      L_SORT_BY := 'lpad(nvl(ppf.employee_number,ppf.npw_number),30,''0'')';
      L_SORT_LABEL := 'Person Number';
    ELSIF L_SORT_OPTION = 'LOCATION' THEN
      L_SORT_BY := 'hl.location_code';
      L_SORT_LABEL := 'Location';
    ELSIF L_SORT_OPTION = 'ORGANIZATION' THEN
      L_SORT_BY := 'hou.name';
      L_SORT_LABEL := 'Organization';
    ELSIF L_SORT_OPTION = 'PAYROLL_NAME' THEN
      L_SORT_BY := 'ppa.payroll_name ';
      L_SORT_LABEL := 'Payroll Name';
    ELSIF L_SORT_OPTION = 'SUPERVISOR' THEN
      L_SORT_BY := 'hxc_tpd_end.get_supervisor_name(asm.supervisor_id,asm.effective_start_date)';
      L_SORT_LABEL := 'Supervisor Name';
    ELSIF L_SORT_OPTION = 'PERSON_TYPE' THEN
      L_SORT_BY := 'ppt.user_person_type';
      L_SORT_LABEL := 'Person Type';
    ELSIF L_SORT_OPTION = 'SUPPLIER_ID' THEN
      L_SORT_BY := 'hxc_missing_tcard_report.get_vendor_name(:p_date_from,:p_date_to,asm.person_id)';
      L_SORT_LABEL := 'Supplier';
    END IF;
  END SORT_OPTION;

  FUNCTION CF_RESOURCE_PREFFORMULA(PERSON_ID1 IN NUMBER) RETURN CHAR IS
    P_PREF_SPEC_LIST_OUT VARCHAR2(300);
    I NUMBER(5);
    L_TCARD_REQ_ATTRI VARCHAR2(20);
    P_MESSAGE VARCHAR2(30) := NULL;
  BEGIN
    P_PREF_SPEC_LIST_OUT := '|' || HXC_PREFERENCE_EVALUATION.RESOURCE_PREF_ERRCODE(PERSON_ID1
                                                                           ,'TS_PER_APPLICATION_SET|1|,TS_PER_TCARD_REQUIRED|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|'
                                                                           ,P_MESSAGE
                                                                           ,SYSDATE) || '|';
    IF P_MESSAGE IS NULL THEN
      FOR i IN 1 .. 31 LOOP
        SELECT
          DECODE(SUBSTR(P_PREF_SPEC_LIST_OUT
                       ,(INSTR(P_PREF_SPEC_LIST_OUT
                            ,'|'
                            ,1
                            ,I) + 1)
                       ,(INSTR(P_PREF_SPEC_LIST_OUT
                            ,'|'
                            ,1
                            ,I + 1) - 1) - (INSTR(P_PREF_SPEC_LIST_OUT
                            ,'|'
                            ,1
                            ,I)))
                ,'null'
                ,''
                ,SUBSTR(P_PREF_SPEC_LIST_OUT
                      ,(INSTR(P_PREF_SPEC_LIST_OUT
                           ,'|'
                           ,1
                           ,I) + 1)
                      ,(INSTR(P_PREF_SPEC_LIST_OUT
                           ,'|'
                           ,1
                           ,I + 1) - 1) - (INSTR(P_PREF_SPEC_LIST_OUT
                           ,'|'
                           ,1
                           ,I))))
        INTO
          L_TCARD_REQ_ATTRI
        FROM
          DUAL;
        IF I = 1 THEN
          CP_APPLICATION_SET_ID := L_TCARD_REQ_ATTRI;
        ELSIF I = 2 THEN
          CP_TCARD_REQ_ATTR1 := L_TCARD_REQ_ATTRI;
        ELSIF I = 3 THEN
          CP_TCARD_REQ_ATTR2 := L_TCARD_REQ_ATTRI;
        ELSIF I = 4 THEN
          CP_TCARD_REQ_ATTR3 := L_TCARD_REQ_ATTRI;
        ELSIF I = 5 THEN
          CP_TCARD_REQ_ATTR4 := L_TCARD_REQ_ATTRI;
        ELSIF I = 6 THEN
          CP_TCARD_REQ_ATTR5 := L_TCARD_REQ_ATTRI;
        ELSIF I = 7 THEN
          CP_TCARD_REQ_ATTR6 := L_TCARD_REQ_ATTRI;
        ELSIF I = 8 THEN
          CP_TCARD_REQ_ATTR7 := L_TCARD_REQ_ATTRI;
        ELSIF I = 9 THEN
          CP_TCARD_REQ_ATTR8 := L_TCARD_REQ_ATTRI;
        ELSIF I = 10 THEN
          CP_TCARD_REQ_ATTR9 := L_TCARD_REQ_ATTRI;
        ELSIF I = 11 THEN
          CP_TCARD_REQ_ATTR10 := L_TCARD_REQ_ATTRI;
        ELSIF I = 12 THEN
          CP_TCARD_REQ_ATTR11 := L_TCARD_REQ_ATTRI;
        ELSIF I = 13 THEN
          CP_TCARD_REQ_ATTR12 := L_TCARD_REQ_ATTRI;
        ELSIF I = 14 THEN
          CP_TCARD_REQ_ATTR13 := L_TCARD_REQ_ATTRI;
        ELSIF I = 15 THEN
          CP_TCARD_REQ_ATTR14 := L_TCARD_REQ_ATTRI;
        ELSIF I = 16 THEN
          CP_TCARD_REQ_ATTR15 := L_TCARD_REQ_ATTRI;
        ELSIF I = 17 THEN
          CP_TCARD_REQ_ATTR16 := L_TCARD_REQ_ATTRI;
        ELSIF I = 18 THEN
          CP_TCARD_REQ_ATTR17 := L_TCARD_REQ_ATTRI;
        ELSIF I = 19 THEN
          CP_TCARD_REQ_ATTR18 := L_TCARD_REQ_ATTRI;
        ELSIF I = 20 THEN
          CP_TCARD_REQ_ATTR19 := L_TCARD_REQ_ATTRI;
        ELSIF I = 21 THEN
          CP_TCARD_REQ_ATTR20 := L_TCARD_REQ_ATTRI;
        ELSIF I = 22 THEN
          CP_TCARD_REQ_ATTR21 := L_TCARD_REQ_ATTRI;
        ELSIF I = 23 THEN
          CP_TCARD_REQ_ATTR22 := L_TCARD_REQ_ATTRI;
        ELSIF I = 24 THEN
          CP_TCARD_REQ_ATTR23 := L_TCARD_REQ_ATTRI;
        ELSIF I = 25 THEN
          CP_TCARD_REQ_ATTR24 := L_TCARD_REQ_ATTRI;
        ELSIF I = 26 THEN
          CP_TCARD_REQ_ATTR25 := L_TCARD_REQ_ATTRI;
        ELSIF I = 27 THEN
          CP_TCARD_REQ_ATTR26 := L_TCARD_REQ_ATTRI;
        ELSIF I = 28 THEN
          CP_TCARD_REQ_ATTR27 := L_TCARD_REQ_ATTRI;
        ELSIF I = 29 THEN
          CP_TCARD_REQ_ATTR28 := L_TCARD_REQ_ATTRI;
        ELSIF I = 30 THEN
          CP_TCARD_REQ_ATTR29 := L_TCARD_REQ_ATTRI;
        ELSIF I = 31 THEN
          CP_TCARD_REQ_ATTR30 := L_TCARD_REQ_ATTRI;
        END IF;
      END LOOP;
    END IF;
    RETURN P_PREF_SPEC_LIST_OUT;
  END CF_RESOURCE_PREFFORMULA;

  FUNCTION G_START_TIMEGROUPFILTER(APPROVAL_STATUS IN VARCHAR2
                                  ,P_COUNT IN NUMBER
                                  ,RESOURCE_ID1 IN NUMBER) RETURN BOOLEAN IS
  BEGIN
    HR_UTILITY.TRACE('g_start_time group_filter');
    HR_UTILITY.TRACE('define_missing:' || P_DEFINE_MISSING);
    HR_UTILITY.TRACE('approval_status:' || APPROVAL_STATUS);
    HR_UTILITY.TRACE('count:' || P_COUNT);
    HR_UTILITY.TRACE('resource_id1:' || RESOURCE_ID1);
    IF P_COUNT > 0 AND APPROVAL_STATUS < 'NOT ENTERED' THEN
      HR_UTILITY.SET_LOCATION('g_start_time'
                             ,10);
      RETURN (TRUE);
    END IF;
    IF P_COUNT = 0 AND APPROVAL_STATUS = 'NOT ENTERED' THEN
      HR_UTILITY.SET_LOCATION('g_start_time'
                             ,11);
      RETURN (FALSE);
    END IF;
    IF P_DEFINE_MISSING = '01' AND APPROVAL_STATUS = 'NOT ENTERED' THEN
      HR_UTILITY.SET_LOCATION('g_start_time'
                             ,20);
      RETURN (TRUE);
    ELSIF P_DEFINE_MISSING = '02' AND APPROVAL_STATUS in ('NOT ENTERED','WORKING') THEN
      HR_UTILITY.SET_LOCATION('g_start_time'
                             ,30);
      RETURN (TRUE);
    ELSIF P_DEFINE_MISSING = '03' AND APPROVAL_STATUS in ('NOT ENTERED','WORKING','REJECTED') THEN
      HR_UTILITY.SET_LOCATION('g_start_time'
                             ,40);
      RETURN (TRUE);
    ELSIF P_DEFINE_MISSING = '04' AND APPROVAL_STATUS < 'APPROVED' THEN
      HR_UTILITY.SET_LOCATION('g_start_time'
                             ,50);
      RETURN (TRUE);
    END IF;
    RETURN (FALSE);
  END G_START_TIMEGROUPFILTER;

  FUNCTION G_ROWNUMGROUPFILTER(START_TIME1 IN DATE) RETURN BOOLEAN IS
  BEGIN
    IF START_TIME1 IS NULL THEN
      RETURN FALSE;
    END IF;
    RETURN (TRUE);
  END G_ROWNUMGROUPFILTER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_PAYROLL_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PAYROLL_NAME;
  END CP_PAYROLL_NAME_P;

  FUNCTION CP_SCL_TCARD_REQ_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SCL_TCARD_REQ;
  END CP_SCL_TCARD_REQ_P;

  FUNCTION CP_APPLICATION_SET_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_APPLICATION_SET_ID;
  END CP_APPLICATION_SET_ID_P;

  FUNCTION CP_TCARD_REQ_ATTR1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR1;
  END CP_TCARD_REQ_ATTR1_P;

  FUNCTION CP_TCARD_REQ_ATTR2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR2;
  END CP_TCARD_REQ_ATTR2_P;

  FUNCTION CP_TCARD_REQ_ATTR3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR3;
  END CP_TCARD_REQ_ATTR3_P;

  FUNCTION CP_TCARD_REQ_ATTR4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR4;
  END CP_TCARD_REQ_ATTR4_P;

  FUNCTION CP_TCARD_REQ_ATTR5_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR5;
  END CP_TCARD_REQ_ATTR5_P;

  FUNCTION CP_TCARD_REQ_ATTR6_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR6;
  END CP_TCARD_REQ_ATTR6_P;

  FUNCTION CP_TCARD_REQ_ATTR7_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR7;
  END CP_TCARD_REQ_ATTR7_P;

  FUNCTION CP_TCARD_REQ_ATTR8_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR8;
  END CP_TCARD_REQ_ATTR8_P;

  FUNCTION CP_TCARD_REQ_ATTR9_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR9;
  END CP_TCARD_REQ_ATTR9_P;

  FUNCTION CP_TCARD_REQ_ATTR10_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR10;
  END CP_TCARD_REQ_ATTR10_P;

  FUNCTION CP_TCARD_REQ_ATTR11_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR11;
  END CP_TCARD_REQ_ATTR11_P;

  FUNCTION CP_TCARD_REQ_ATTR12_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR12;
  END CP_TCARD_REQ_ATTR12_P;

  FUNCTION CP_TCARD_REQ_ATTR13_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR13;
  END CP_TCARD_REQ_ATTR13_P;

  FUNCTION CP_TCARD_REQ_ATTR14_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR14;
  END CP_TCARD_REQ_ATTR14_P;

  FUNCTION CP_TCARD_REQ_ATTR15_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR15;
  END CP_TCARD_REQ_ATTR15_P;

  FUNCTION CP_TCARD_REQ_ATTR16_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR16;
  END CP_TCARD_REQ_ATTR16_P;

  FUNCTION CP_TCARD_REQ_ATTR17_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR17;
  END CP_TCARD_REQ_ATTR17_P;

  FUNCTION CP_TCARD_REQ_ATTR18_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR18;
  END CP_TCARD_REQ_ATTR18_P;

  FUNCTION CP_TCARD_REQ_ATTR19_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR19;
  END CP_TCARD_REQ_ATTR19_P;

  FUNCTION CP_TCARD_REQ_ATTR20_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR20;
  END CP_TCARD_REQ_ATTR20_P;

  FUNCTION CP_TCARD_REQ_ATTR21_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR21;
  END CP_TCARD_REQ_ATTR21_P;

  FUNCTION CP_TCARD_REQ_ATTR22_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR22;
  END CP_TCARD_REQ_ATTR22_P;

  FUNCTION CP_TCARD_REQ_ATTR23_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR23;
  END CP_TCARD_REQ_ATTR23_P;

  FUNCTION CP_TCARD_REQ_ATTR24_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR24;
  END CP_TCARD_REQ_ATTR24_P;

  FUNCTION CP_TCARD_REQ_ATTR25_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR25;
  END CP_TCARD_REQ_ATTR25_P;

  FUNCTION CP_TCARD_REQ_ATTR26_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR26;
  END CP_TCARD_REQ_ATTR26_P;

  FUNCTION CP_TCARD_REQ_ATTR27_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR27;
  END CP_TCARD_REQ_ATTR27_P;

  FUNCTION CP_TCARD_REQ_ATTR28_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR28;
  END CP_TCARD_REQ_ATTR28_P;

  FUNCTION CP_TCARD_REQ_ATTR29_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR29;
  END CP_TCARD_REQ_ATTR29_P;

  FUNCTION CP_TCARD_REQ_ATTR30_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TCARD_REQ_ATTR30;
  END CP_TCARD_REQ_ATTR30_P;

END HXC_HXCMISTC_XMLP_PKG;

/
