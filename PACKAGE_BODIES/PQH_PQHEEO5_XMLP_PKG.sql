--------------------------------------------------------
--  DDL for Package Body PQH_PQHEEO5_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PQH_PQHEEO5_XMLP_PKG" AS
/* $Header: PQHEEO5B.pls 120.4 2008/04/23 07:39:35 amakrish noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_QUERY_TEXT VARCHAR2(2000);
    L_FR VARCHAR2(2000);
    L_FT VARCHAR2(2000);
    L_PR VARCHAR2(2000);
    L_PT VARCHAR2(2000);
  BEGIN
    --HR_STANDARD.EVENT('BEFORE REPORT');
    PQH_EMPLOYMENT_CATEGORY.FETCH_EMPL_CATEGORIES(P_BUSINESS_GROUP_ID
                                                 ,L_FR
                                                 ,L_FT
                                                 ,L_PR
                                                 ,L_PT);
    CP_FR := L_FR;
    CP_FT := L_FT;
    CP_PR := L_PR;
    CP_PT := L_PT;
    CP_REPORT_DATE := TO_DATE(P_REPORT_DAY_MONTH || '-' || P_REPORT_YEAR
                             ,'DD-MM-YYYY');
   LP_REPORT_DATE := to_char(CP_REPORT_DATE,'DD-MON-YYYY');
    RETURN TRUE;
  END BEFOREREPORT;

  FUNCTION CF_TOTAL_TITLEFORMULA0005(EMPLOYMENT_CATEGORY IN VARCHAR2) RETURN CHAR IS
    L_TOTAL_TITLE VARCHAR2(200) := 'TOTAL OTHERS';
    L_EMP_CATEGORY VARCHAR2(1) := SUBSTR(EMPLOYMENT_CATEGORY
          ,4
          ,1);
 BEGIN
     IF L_EMP_CATEGORY = 'F' THEN
      L_TOTAL_TITLE := '19.TOTAL';
    ELSIF L_EMP_CATEGORY = 'P' THEN
      L_TOTAL_TITLE := '22.TOTAL';
    ELSIF L_EMP_CATEGORY = 'N' THEN
      L_TOTAL_TITLE := '28.TOTAL';
    END IF;
--L_TOTAL_TITLE := EMPLOYMENT_CATEGORY || ' - ' || L_EMP_CATEGORY;

    RETURN L_TOTAL_TITLE;
  END CF_TOTAL_TITLEFORMULA0005;

  FUNCTION CF_NO_OF_ANNEXESFORMULA RETURN NUMBER IS
    L_NO_OF_ANNEXES NUMBER;
    L_NO_OF_SCHOOLS NUMBER;
  BEGIN
    SELECT
      COUNT(1)
    INTO
      L_NO_OF_ANNEXES
    FROM
      (   SELECT
          ASS.LOCATION_ID
        FROM
          PER_ALL_ASSIGNMENTS_F ASS,
          HR_ORGANIZATION_UNITS_V HOU,
          PER_ALL_PEOPLE_F PEO
        WHERE ASS.ORGANIZATION_ID = HOU.ORGANIZATION_ID
          AND ASS.PERSON_ID = PEO.PERSON_ID
          AND CP_REPORT_DATE between ASS.EFFECTIVE_START_DATE
          AND ASS.EFFECTIVE_END_DATE
          AND CP_REPORT_DATE between PEO.EFFECTIVE_START_DATE
          AND PEO.EFFECTIVE_END_DATE
          AND HOU.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        UNION
        SELECT
          LOCATION_ID
        FROM
          HR_ALL_ORGANIZATION_UNITS
        WHERE BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
          AND NVL(DATE_TO
           ,CP_REPORT_DATE + 1) >= CP_REPORT_DATE );
    SELECT
      COUNT(1)
    INTO
      L_NO_OF_SCHOOLS
    FROM
      HR_ORGANIZATION_UNITS_V HOU
    WHERE HOU.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID;
    CP_NO_OF_SCHOOLS := L_NO_OF_SCHOOLS;
    RETURN (L_NO_OF_ANNEXES);
  END CF_NO_OF_ANNEXESFORMULA;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_REPORT_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_REPORT_DATE;
  END CP_REPORT_DATE_P;

  FUNCTION CP_NO_OF_SCHOOLS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NO_OF_SCHOOLS;
  END CP_NO_OF_SCHOOLS_P;

  FUNCTION CP_FR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FR;
  END CP_FR_P;

  FUNCTION CP_FT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FT;
  END CP_FT_P;

  FUNCTION CP_PR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PR;
  END CP_PR_P;

  FUNCTION CP_PT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PT;
  END CP_PT_P;
/*
  PROCEDURE ASSERT_CONDITION(P_CONDITION IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare P_CONDITION BOOLEAN;
                begin P_CONDITION := sys.diutil.int_to_bool(:P_CONDITION);
                HR_GENERAL.ASSERT_CONDITION(P_CONDITION); end;');
    STPROC.BIND_I(P_CONDITION);
    STPROC.EXECUTE;
  END ASSERT_CONDITION;

  FUNCTION GET_BUSINESS_GROUP_ID RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.GET_BUSINESS_GROUP_ID; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_BUSINESS_GROUP_ID;

  FUNCTION CHK_APPLICATION_ID(P_APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.CHK_APPLICATION_ID(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END CHK_APPLICATION_ID;

  FUNCTION CORE_HR_APP_ID(P_APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.CORE_HR_APP_ID(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END CORE_HR_APP_ID;

  FUNCTION VERTICAL_APP_ID(P_APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.VERTICAL_APP_ID(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END VERTICAL_APP_ID;

  FUNCTION HRMS_OBJECT(P_OBJECT_NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.HRMS_OBJECT(:P_OBJECT_NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_OBJECT_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END HRMS_OBJECT;

  FUNCTION GET_APPLICATION_SHORT_NAME(P_APPLICATION_ID IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.GET_APPLICATION_SHORT_NAME(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_APPLICATION_SHORT_NAME;

  FUNCTION EFFECTIVE_DATE RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.EFFECTIVE_DATE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END EFFECTIVE_DATE;

  FUNCTION START_OF_TIME RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.START_OF_TIME; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END START_OF_TIME;

  FUNCTION END_OF_TIME RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.END_OF_TIME; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END END_OF_TIME;

  FUNCTION PAY_VALUE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.PAY_VALUE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END PAY_VALUE;

  FUNCTION MONEY_UNIT RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.MONEY_UNIT; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MONEY_UNIT;

  FUNCTION DEFAULT_CURRENCY_CODE(P_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DEFAULT_CURRENCY_CODE(:P_LEGISLATION_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LEGISLATION_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DEFAULT_CURRENCY_CODE;

  FUNCTION DEFAULT_CURRENCY_CODE(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DEFAULT_CURRENCY_CODE(:P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DEFAULT_CURRENCY_CODE;

  FUNCTION LOCATION_VALID(P_LOCATION_ID IN NUMBER
                         ,P_DATE IN DATE
                         ,P_ERROR_IF_INVALID IN BOOLEAN) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; X0P_ERROR_IF_INVALID BOOLEAN; begin X0P_ERROR_IF_INVALID := sys.diutil.int_to_bool(:P_ERROR_IF_INVALID);
    X0rv := HR_GENERAL.LOCATION_VALID(:P_LOCATION_ID, :P_DATE, X0P_ERROR_IF_INVALID); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_ERROR_IF_INVALID);
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_I(P_DATE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,X0);
    RETURN X0;
  END LOCATION_VALID;

  FUNCTION DECODE_LOOKUP(P_LOOKUP_TYPE IN VARCHAR2
                        ,P_LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_LOOKUP(:P_LOOKUP_TYPE, :P_LOOKUP_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOOKUP_TYPE);
    STPROC.BIND_I(P_LOOKUP_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_LOOKUP;

  FUNCTION DECODE_GRADE(P_GRADE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_GRADE(:P_GRADE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_GRADE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_GRADE;

  FUNCTION DECODE_PAYROLL(P_PAYROLL_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_PAYROLL(:P_PAYROLL_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAYROLL_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_PAYROLL;

  FUNCTION GET_SALARY(P_PAY_BASIS_ID IN NUMBER
                     ,P_ASSIGNMENT_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.GET_SALARY(:P_PAY_BASIS_ID, :P_ASSIGNMENT_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAY_BASIS_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_SALARY;

  FUNCTION DECODE_JOB(P_JOB_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_JOB(:P_JOB_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_JOB_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_JOB;

  FUNCTION DECODE_POSITION(P_POSITION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_POSITION(:P_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_POSITION;

  FUNCTION DECODE_LOCATION(P_LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_LOCATION(:P_LOCATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_LOCATION;

  FUNCTION DECODE_PAY_BASIS(P_PAY_BASIS_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_PAY_BASIS(:P_PAY_BASIS_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAY_BASIS_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_PAY_BASIS;

  FUNCTION DECODE_ASS_STATUS_TYPE(P_ASSIGNMENT_STATUS_TYPE_ID IN NUMBER
                                 ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_ASS_STATUS_TYPE(:P_ASSIGNMENT_STATUS_TYPE_ID, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ASSIGNMENT_STATUS_TYPE_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END DECODE_ASS_STATUS_TYPE;

  FUNCTION GET_WORK_PHONE(P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.GET_WORK_PHONE(:P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_WORK_PHONE;

  FUNCTION GET_HOME_PHONE(P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.GET_HOME_PHONE(:P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_HOME_PHONE;

  PROCEDURE INIT_FORMS(P_BUSINESS_GROUP_ID IN NUMBER
                      ,P_SHORT_NAME OUT NOCOPY VARCHAR2
                      ,P_BG_NAME OUT NOCOPY VARCHAR2
                      ,P_BG_CURRENCY_CODE OUT NOCOPY VARCHAR2
                      ,P_LEGISLATION_CODE OUT NOCOPY VARCHAR2
                      ,P_SESSION_DATE IN OUT NOCOPY DATE
                      ,P_SES_YESTERDAY OUT NOCOPY DATE
                      ,P_START_OF_TIME OUT NOCOPY DATE
                      ,P_END_OF_TIME OUT NOCOPY DATE
                      ,P_SYS_DATE OUT NOCOPY DATE
                      ,P_ENABLE_HR_TRACE IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare P_ENABLE_HR_TRACE BOOLEAN; begin P_ENABLE_HR_TRACE := sys.diutil.int_to_bool(:P_ENABLE_HR_TRACE); HR_GENERAL.INIT_FORMS(:P_BUSINESS_GROUP_ID, :P_SHORT_NAME, :P_BG_NAME, :P_BG_CURRENCY_CODE,
    :P_LEGISLATION_CODE, :P_SESSION_DATE, :P_SES_YESTERDAY, :P_START_OF_TIME, :P_END_OF_TIME, :P_SYS_DATE, P_ENABLE_HR_TRACE); end;');
    STPROC.BIND_I(P_ENABLE_HR_TRACE);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_O(P_SHORT_NAME);
    STPROC.BIND_O(P_BG_NAME);
    STPROC.BIND_O(P_BG_CURRENCY_CODE);
    STPROC.BIND_O(P_LEGISLATION_CODE);
    STPROC.BIND_IO(P_SESSION_DATE);
    STPROC.BIND_O(P_SES_YESTERDAY);
    STPROC.BIND_O(P_START_OF_TIME);
    STPROC.BIND_O(P_END_OF_TIME);
    STPROC.BIND_O(P_SYS_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SHORT_NAME);
    STPROC.RETRIEVE(4
                   ,P_BG_NAME);
    STPROC.RETRIEVE(5
                   ,P_BG_CURRENCY_CODE);
    STPROC.RETRIEVE(6
                   ,P_LEGISLATION_CODE);
    STPROC.RETRIEVE(7
                   ,P_SESSION_DATE);
    STPROC.RETRIEVE(8
                   ,P_SES_YESTERDAY);
    STPROC.RETRIEVE(9
                   ,P_START_OF_TIME);
    STPROC.RETRIEVE(10
                   ,P_END_OF_TIME);
    STPROC.RETRIEVE(11
                   ,P_SYS_DATE);
  END INIT_FORMS;

  FUNCTION CHK_GEOCODES_INSTALLED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_GENERAL.CHK_GEOCODES_INSTALLED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END CHK_GEOCODES_INSTALLED;

  FUNCTION GET_BUDGET(P_BUDGET_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUDGET(:P_BUDGET_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUDGET_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_BUDGET;

  FUNCTION GET_BUDGET_VERSION(P_BUDGET_ID IN NUMBER
                             ,P_BUDGET_VERSION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUDGET_VERSION(:P_BUDGET_ID, :P_BUDGET_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUDGET_ID);
    STPROC.BIND_I(P_BUDGET_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_BUDGET_VERSION;

  PROCEDURE GET_ORGANIZATION(P_ORGANIZATION_ID IN NUMBER
                            ,P_ORG_NAME OUT NOCOPY VARCHAR2
                            ,P_ORG_TYPE OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_ORGANIZATION(:P_ORGANIZATION_ID, :P_ORG_NAME, :P_ORG_TYPE); end;');
    STPROC.BIND_I(P_ORGANIZATION_ID);
    STPROC.BIND_O(P_ORG_NAME);
    STPROC.BIND_O(P_ORG_TYPE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ORG_NAME);
    STPROC.RETRIEVE(3
                   ,P_ORG_TYPE);
  END GET_ORGANIZATION;

  FUNCTION GET_JOB(P_JOB_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_JOB(:P_JOB_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_JOB_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_JOB;

  FUNCTION GET_POSITION(P_POSITION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_POSITION(:P_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_POSITION;

  FUNCTION GET_GRADE(P_GRADE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_GRADE(:P_GRADE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_GRADE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_GRADE;

  FUNCTION GET_STATUS(P_BUSINESS_GROUP_ID IN NUMBER
                     ,P_ASSIGNMENT_STATUS_TYPE_ID IN NUMBER
                     ,P_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_STATUS(:P_BUSINESS_GROUP_ID, :P_ASSIGNMENT_STATUS_TYPE_ID, :P_LEGISLATION_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_ASSIGNMENT_STATUS_TYPE_ID);
    STPROC.BIND_I(P_LEGISLATION_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STATUS;

  FUNCTION GET_ABS_TYPE(P_ABS_ATT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_ABS_TYPE(:P_ABS_ATT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ABS_ATT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ABS_TYPE;

  PROCEDURE GET_TIME_PERIOD(P_TIME_PERIOD_ID IN NUMBER
                           ,P_PERIOD_NAME OUT NOCOPY VARCHAR2
                           ,P_START_DATE OUT NOCOPY DATE
                           ,P_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_TIME_PERIOD(:P_TIME_PERIOD_ID, :P_PERIOD_NAME, :P_START_DATE, :P_END_DATE); end;');
    STPROC.BIND_I(P_TIME_PERIOD_ID);
    STPROC.BIND_O(P_PERIOD_NAME);
    STPROC.BIND_O(P_START_DATE);
    STPROC.BIND_O(P_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_PERIOD_NAME);
    STPROC.RETRIEVE(3
                   ,P_START_DATE);
    STPROC.RETRIEVE(4
                   ,P_END_DATE);
  END GET_TIME_PERIOD;

  FUNCTION GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUSINESS_GROUP(:P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_BUSINESS_GROUP;

  FUNCTION COUNT_ORG_SUBORDINATES(P_ORG_STRUCTURE_VERSION_ID IN NUMBER
                                 ,P_PARENT_ORGANIZATION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.COUNT_ORG_SUBORDINATES(:P_ORG_STRUCTURE_VERSION_ID, :P_PARENT_ORGANIZATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.BIND_I(P_PARENT_ORGANIZATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END COUNT_ORG_SUBORDINATES;

  FUNCTION COUNT_POS_SUBORDINATES(P_POS_STRUCTURE_VERSION_ID IN NUMBER
                                 ,P_PARENT_POSITION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.COUNT_POS_SUBORDINATES(:P_POS_STRUCTURE_VERSION_ID, :P_PARENT_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POS_STRUCTURE_VERSION_ID);
    STPROC.BIND_I(P_PARENT_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END COUNT_POS_SUBORDINATES;

  PROCEDURE GET_ORGANIZATION_HIERARCHY(P_ORGANIZATION_STRUCTURE_ID IN NUMBER
                                      ,P_ORG_STRUCTURE_VERSION_ID IN NUMBER
                                      ,P_ORG_STRUCTURE_NAME OUT NOCOPY VARCHAR2
                                      ,P_ORG_VERSION OUT NOCOPY NUMBER
                                      ,P_VERSION_START_DATE OUT NOCOPY DATE
                                      ,P_VERSION_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_ORGANIZATION_HIERARCHY(:P_ORGANIZATION_STRUCTURE_ID, :P_ORG_STRUCTURE_VERSION_ID,
    :P_ORG_STRUCTURE_NAME, :P_ORG_VERSION, :P_VERSION_START_DATE, :P_VERSION_END_DATE); end;');
    STPROC.BIND_I(P_ORGANIZATION_STRUCTURE_ID);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.BIND_O(P_ORG_STRUCTURE_NAME);
    STPROC.BIND_O(P_ORG_VERSION);
    STPROC.BIND_O(P_VERSION_START_DATE);
    STPROC.BIND_O(P_VERSION_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_ORG_STRUCTURE_NAME);
    STPROC.RETRIEVE(4
                   ,P_ORG_VERSION);
    STPROC.RETRIEVE(5
                   ,P_VERSION_START_DATE);
    STPROC.RETRIEVE(6
                   ,P_VERSION_END_DATE);
  END GET_ORGANIZATION_HIERARCHY;

  PROCEDURE GET_POSITION_HIERARCHY(P_POSITION_STRUCTURE_ID IN NUMBER
                                  ,P_POS_STRUCTURE_VERSION_ID IN NUMBER
                                  ,P_POS_STRUCTURE_NAME OUT NOCOPY VARCHAR2
                                  ,P_POS_VERSION OUT NOCOPY NUMBER
                                  ,P_VERSION_START_DATE OUT NOCOPY DATE
                                  ,P_VERSION_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_POSITION_HIERARCHY(:P_POSITION_STRUCTURE_ID, :P_POS_STRUCTURE_VERSION_ID, :P_POS_STRUCTURE_NAME,
    :P_POS_VERSION, :P_VERSION_START_DATE, :P_VERSION_END_DATE); end;');
    STPROC.BIND_I(P_POSITION_STRUCTURE_ID);
    STPROC.BIND_I(P_POS_STRUCTURE_VERSION_ID);
    STPROC.BIND_O(P_POS_STRUCTURE_NAME);
    STPROC.BIND_O(P_POS_VERSION);
    STPROC.BIND_O(P_VERSION_START_DATE);
    STPROC.BIND_O(P_VERSION_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_POS_STRUCTURE_NAME);
    STPROC.RETRIEVE(4
                   ,P_POS_VERSION);
    STPROC.RETRIEVE(5
                   ,P_VERSION_START_DATE);
    STPROC.RETRIEVE(6
                   ,P_VERSION_END_DATE);
  END GET_POSITION_HIERARCHY;

  FUNCTION GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                             ,P_LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_LOOKUP_MEANING(:P_LOOKUP_TYPE, :P_LOOKUP_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOOKUP_TYPE);
    STPROC.BIND_I(P_LOOKUP_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_LOOKUP_MEANING;

  FUNCTION PERSON_MATCHING_SKILLS(P_PERSON_ID IN NUMBER
                                 ,P_JOB_POSITION_ID IN NUMBER
                                 ,P_JOB_POSITION_TYPE IN VARCHAR2
                                 ,P_MATCHING_LEVEL IN VARCHAR2
                                 ,P_NO_OF_ESSENTIAL IN NUMBER
                                 ,P_NO_OF_DESIRABLE IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := HR_REPORTS.PERSON_MATCHING_SKILLS(:P_PERSON_ID, :P_JOB_POSITION_ID, :P_JOB_POSITION_TYPE,
    :P_MATCHING_LEVEL, :P_NO_OF_ESSENTIAL, :P_NO_OF_DESIRABLE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_JOB_POSITION_ID);
    STPROC.BIND_I(P_JOB_POSITION_TYPE);
    STPROC.BIND_I(P_MATCHING_LEVEL);
    STPROC.BIND_I(P_NO_OF_ESSENTIAL);
    STPROC.BIND_I(P_NO_OF_DESIRABLE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(7
                   ,X0);
    RETURN X0;
  END PERSON_MATCHING_SKILLS;

  FUNCTION GET_PAYROLL_NAME(P_SESSION_DATE IN DATE
                           ,P_PAYROLL_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_PAYROLL_NAME(:P_SESSION_DATE, :P_PAYROLL_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_PAYROLL_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_PAYROLL_NAME;

  FUNCTION GET_ELEMENT_NAME(P_SESSION_DATE IN DATE
                           ,P_ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_ELEMENT_NAME(:P_SESSION_DATE, :P_ELEMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_ELEMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ELEMENT_NAME;

  PROCEDURE GEN_PARTIAL_MATCHING_LEXICAL(P_CONCATENATED_SEGMENTS IN VARCHAR2
                                        ,P_ID_FLEX_NUM IN NUMBER
                                        ,P_MATCHING_LEXICAL IN OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GEN_PARTIAL_MATCHING_LEXICAL(:P_CONCATENATED_SEGMENTS, :P_ID_FLEX_NUM, :P_MATCHING_LEXICAL); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_ID_FLEX_NUM);
    STPROC.BIND_IO(P_MATCHING_LEXICAL);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_MATCHING_LEXICAL);
  END GEN_PARTIAL_MATCHING_LEXICAL;

  PROCEDURE GET_ATTRIBUTES(P_CONCATENATED_SEGMENTS IN VARCHAR2
                          ,P_NAME IN VARCHAR2
                          ,P_SEGMENTS_USED OUT NOCOPY NUMBER
                          ,P_VALUE1 OUT NOCOPY VARCHAR2
                          ,P_VALUE2 OUT NOCOPY VARCHAR2
                          ,P_VALUE3 OUT NOCOPY VARCHAR2
                          ,P_VALUE4 OUT NOCOPY VARCHAR2
                          ,P_VALUE5 OUT NOCOPY VARCHAR2
                          ,P_VALUE6 OUT NOCOPY VARCHAR2
                          ,P_VALUE7 OUT NOCOPY VARCHAR2
                          ,P_VALUE8 OUT NOCOPY VARCHAR2
                          ,P_VALUE9 OUT NOCOPY VARCHAR2
                          ,P_VALUE10 OUT NOCOPY VARCHAR2
                          ,P_VALUE11 OUT NOCOPY VARCHAR2
                          ,P_VALUE12 OUT NOCOPY VARCHAR2
                          ,P_VALUE13 OUT NOCOPY VARCHAR2
                          ,P_VALUE14 OUT NOCOPY VARCHAR2
                          ,P_VALUE15 OUT NOCOPY VARCHAR2
                          ,P_VALUE16 OUT NOCOPY VARCHAR2
                          ,P_VALUE17 OUT NOCOPY VARCHAR2
                          ,P_VALUE18 OUT NOCOPY VARCHAR2
                          ,P_VALUE19 OUT NOCOPY VARCHAR2
                          ,P_VALUE20 OUT NOCOPY VARCHAR2
                          ,P_VALUE21 OUT NOCOPY VARCHAR2
                          ,P_VALUE22 OUT NOCOPY VARCHAR2
                          ,P_VALUE23 OUT NOCOPY VARCHAR2
                          ,P_VALUE24 OUT NOCOPY VARCHAR2
                          ,P_VALUE25 OUT NOCOPY VARCHAR2
                          ,P_VALUE26 OUT NOCOPY VARCHAR2
                          ,P_VALUE27 OUT NOCOPY VARCHAR2
                          ,P_VALUE28 OUT NOCOPY VARCHAR2
                          ,P_VALUE29 OUT NOCOPY VARCHAR2
                          ,P_VALUE30 OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_ATTRIBUTES(:P_CONCATENATED_SEGMENTS, :P_NAME, :P_SEGMENTS_USED, :P_VALUE1, :P_VALUE2, :P_VALUE3, :P_VALUE4, :P_VALUE5, :P_VALUE6, :P_VALUE7, :P_VALUE8,
    :P_VALUE9, :P_VALUE10, :P_VALUE11, :P_VALUE12, :P_VALUE13, :P_VALUE14, :P_VALUE15, :P_VALUE16, :P_VALUE17, :P_VALUE18, :P_VALUE19, :P_VALUE20, :P_VALUE21, :P_VALUE22, :P_VALUE23, :P_VALUE24,
    :P_VALUE25, :P_VALUE26, :P_VALUE27, :P_VALUE28, :P_VALUE29, :P_VALUE30); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_NAME);
    STPROC.BIND_O(P_SEGMENTS_USED);
    STPROC.BIND_O(P_VALUE1);
    STPROC.BIND_O(P_VALUE2);
    STPROC.BIND_O(P_VALUE3);
    STPROC.BIND_O(P_VALUE4);
    STPROC.BIND_O(P_VALUE5);
    STPROC.BIND_O(P_VALUE6);
    STPROC.BIND_O(P_VALUE7);
    STPROC.BIND_O(P_VALUE8);
    STPROC.BIND_O(P_VALUE9);
    STPROC.BIND_O(P_VALUE10);
    STPROC.BIND_O(P_VALUE11);
    STPROC.BIND_O(P_VALUE12);
    STPROC.BIND_O(P_VALUE13);
    STPROC.BIND_O(P_VALUE14);
    STPROC.BIND_O(P_VALUE15);
    STPROC.BIND_O(P_VALUE16);
    STPROC.BIND_O(P_VALUE17);
    STPROC.BIND_O(P_VALUE18);
    STPROC.BIND_O(P_VALUE19);
    STPROC.BIND_O(P_VALUE20);
    STPROC.BIND_O(P_VALUE21);
    STPROC.BIND_O(P_VALUE22);
    STPROC.BIND_O(P_VALUE23);
    STPROC.BIND_O(P_VALUE24);
    STPROC.BIND_O(P_VALUE25);
    STPROC.BIND_O(P_VALUE26);
    STPROC.BIND_O(P_VALUE27);
    STPROC.BIND_O(P_VALUE28);
    STPROC.BIND_O(P_VALUE29);
    STPROC.BIND_O(P_VALUE30);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SEGMENTS_USED);
    STPROC.RETRIEVE(4
                   ,P_VALUE1);
    STPROC.RETRIEVE(5
                   ,P_VALUE2);
    STPROC.RETRIEVE(6
                   ,P_VALUE3);
    STPROC.RETRIEVE(7
                   ,P_VALUE4);
    STPROC.RETRIEVE(8
                   ,P_VALUE5);
    STPROC.RETRIEVE(9
                   ,P_VALUE6);
    STPROC.RETRIEVE(10
                   ,P_VALUE7);
    STPROC.RETRIEVE(11
                   ,P_VALUE8);
    STPROC.RETRIEVE(12
                   ,P_VALUE9);
    STPROC.RETRIEVE(13
                   ,P_VALUE10);
    STPROC.RETRIEVE(14
                   ,P_VALUE11);
    STPROC.RETRIEVE(15
                   ,P_VALUE12);
    STPROC.RETRIEVE(16
                   ,P_VALUE13);
    STPROC.RETRIEVE(17
                   ,P_VALUE14);
    STPROC.RETRIEVE(18
                   ,P_VALUE15);
    STPROC.RETRIEVE(19
                   ,P_VALUE16);
    STPROC.RETRIEVE(20
                   ,P_VALUE17);
    STPROC.RETRIEVE(21
                   ,P_VALUE18);
    STPROC.RETRIEVE(22
                   ,P_VALUE19);
    STPROC.RETRIEVE(23
                   ,P_VALUE20);
    STPROC.RETRIEVE(24
                   ,P_VALUE21);
    STPROC.RETRIEVE(25
                   ,P_VALUE22);
    STPROC.RETRIEVE(26
                   ,P_VALUE23);
    STPROC.RETRIEVE(27
                   ,P_VALUE24);
    STPROC.RETRIEVE(28
                   ,P_VALUE25);
    STPROC.RETRIEVE(29
                   ,P_VALUE26);
    STPROC.RETRIEVE(30
                   ,P_VALUE27);
    STPROC.RETRIEVE(31
                   ,P_VALUE28);
    STPROC.RETRIEVE(32
                   ,P_VALUE29);
    STPROC.RETRIEVE(33
                   ,P_VALUE30);
  END GET_ATTRIBUTES;

  PROCEDURE GET_SEGMENTS(P_CONCATENATED_SEGMENTS IN VARCHAR2
                        ,P_ID_FLEX_NUM IN NUMBER
                        ,P_SEGMENTS_USED OUT NOCOPY NUMBER
                        ,P_VALUE1 OUT NOCOPY VARCHAR2
                        ,P_VALUE2 OUT NOCOPY VARCHAR2
                        ,P_VALUE3 OUT NOCOPY VARCHAR2
                        ,P_VALUE4 OUT NOCOPY VARCHAR2
                        ,P_VALUE5 OUT NOCOPY VARCHAR2
                        ,P_VALUE6 OUT NOCOPY VARCHAR2
                        ,P_VALUE7 OUT NOCOPY VARCHAR2
                        ,P_VALUE8 OUT NOCOPY VARCHAR2
                        ,P_VALUE9 OUT NOCOPY VARCHAR2
                        ,P_VALUE10 OUT NOCOPY VARCHAR2
                        ,P_VALUE11 OUT NOCOPY VARCHAR2
                        ,P_VALUE12 OUT NOCOPY VARCHAR2
                        ,P_VALUE13 OUT NOCOPY VARCHAR2
                        ,P_VALUE14 OUT NOCOPY VARCHAR2
                        ,P_VALUE15 OUT NOCOPY VARCHAR2
                        ,P_VALUE16 OUT NOCOPY VARCHAR2
                        ,P_VALUE17 OUT NOCOPY VARCHAR2
                        ,P_VALUE18 OUT NOCOPY VARCHAR2
                        ,P_VALUE19 OUT NOCOPY VARCHAR2
                        ,P_VALUE20 OUT NOCOPY VARCHAR2
                        ,P_VALUE21 OUT NOCOPY VARCHAR2
                        ,P_VALUE22 OUT NOCOPY VARCHAR2
                        ,P_VALUE23 OUT NOCOPY VARCHAR2
                        ,P_VALUE24 OUT NOCOPY VARCHAR2
                        ,P_VALUE25 OUT NOCOPY VARCHAR2
                        ,P_VALUE26 OUT NOCOPY VARCHAR2
                        ,P_VALUE27 OUT NOCOPY VARCHAR2
                        ,P_VALUE28 OUT NOCOPY VARCHAR2
                        ,P_VALUE29 OUT NOCOPY VARCHAR2
                        ,P_VALUE30 OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_SEGMENTS(:P_CONCATENATED_SEGMENTS, :P_ID_FLEX_NUM, :P_SEGMENTS_USED, :P_VALUE1, :P_VALUE2, :P_VALUE3,
    \:P_VALUE4, :P_VALUE5, :P_VALUE6, :P_VALUE7, :P_VALUE8, :P_VALUE9, :P_VALUE10, :P_VALUE11, :P_VALUE12, :P_VALUE13, :P_VALUE14, :P_VALUE15,
    :P_VALUE16, :P_VALUE17, :P_VALUE18, :P_VALUE19, :P_VALUE20, :P_VALUE21, :P_VALUE22, :P_VALUE23, :P_VALUE24, :P_VALUE25, :P_VALUE26, :P_VALUE27,
    :P_VALUE28, :P_VALUE29, :P_VALUE30); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_ID_FLEX_NUM);
    STPROC.BIND_O(P_SEGMENTS_USED);
    STPROC.BIND_O(P_VALUE1);
    STPROC.BIND_O(P_VALUE2);
    STPROC.BIND_O(P_VALUE3);
    STPROC.BIND_O(P_VALUE4);
    STPROC.BIND_O(P_VALUE5);
    STPROC.BIND_O(P_VALUE6);
    STPROC.BIND_O(P_VALUE7);
    STPROC.BIND_O(P_VALUE8);
    STPROC.BIND_O(P_VALUE9);
    STPROC.BIND_O(P_VALUE10);
    STPROC.BIND_O(P_VALUE11);
    STPROC.BIND_O(P_VALUE12);
    STPROC.BIND_O(P_VALUE13);
    STPROC.BIND_O(P_VALUE14);
    STPROC.BIND_O(P_VALUE15);
    STPROC.BIND_O(P_VALUE16);
    STPROC.BIND_O(P_VALUE17);
    STPROC.BIND_O(P_VALUE18);
    STPROC.BIND_O(P_VALUE19);
    STPROC.BIND_O(P_VALUE20);
    STPROC.BIND_O(P_VALUE21);
    STPROC.BIND_O(P_VALUE22);
    STPROC.BIND_O(P_VALUE23);
    STPROC.BIND_O(P_VALUE24);
    STPROC.BIND_O(P_VALUE25);
    STPROC.BIND_O(P_VALUE26);
    STPROC.BIND_O(P_VALUE27);
    STPROC.BIND_O(P_VALUE28);
    STPROC.BIND_O(P_VALUE29);
    STPROC.BIND_O(P_VALUE30);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SEGMENTS_USED);
    STPROC.RETRIEVE(4
                   ,P_VALUE1);
    STPROC.RETRIEVE(5
                   ,P_VALUE2);
    STPROC.RETRIEVE(6
                   ,P_VALUE3);
    STPROC.RETRIEVE(7
                   ,P_VALUE4);
    STPROC.RETRIEVE(8
                   ,P_VALUE5);
    STPROC.RETRIEVE(9
                   ,P_VALUE6);
    STPROC.RETRIEVE(10
                   ,P_VALUE7);
    STPROC.RETRIEVE(11
                   ,P_VALUE8);
    STPROC.RETRIEVE(12
                   ,P_VALUE9);
    STPROC.RETRIEVE(13
                   ,P_VALUE10);
    STPROC.RETRIEVE(14
                   ,P_VALUE11);
    STPROC.RETRIEVE(15
                   ,P_VALUE12);
    STPROC.RETRIEVE(16
                   ,P_VALUE13);
    STPROC.RETRIEVE(17
                   ,P_VALUE14);
    STPROC.RETRIEVE(18
                   ,P_VALUE15);
    STPROC.RETRIEVE(19
                   ,P_VALUE16);
    STPROC.RETRIEVE(20
                   ,P_VALUE17);
    STPROC.RETRIEVE(21
                   ,P_VALUE18);
    STPROC.RETRIEVE(22
                   ,P_VALUE19);
    STPROC.RETRIEVE(23
                   ,P_VALUE20);
    STPROC.RETRIEVE(24
                   ,P_VALUE21);
    STPROC.RETRIEVE(25
                   ,P_VALUE22);
    STPROC.RETRIEVE(26
                   ,P_VALUE23);
    STPROC.RETRIEVE(27
                   ,P_VALUE24);
    STPROC.RETRIEVE(28
                   ,P_VALUE25);
    STPROC.RETRIEVE(29
                   ,P_VALUE26);
    STPROC.RETRIEVE(30
                   ,P_VALUE27);
    STPROC.RETRIEVE(31
                   ,P_VALUE28);
    STPROC.RETRIEVE(32
                   ,P_VALUE29);
    STPROC.RETRIEVE(33
                   ,P_VALUE30);
  END GET_SEGMENTS;

  PROCEDURE GET_DESC_FLEX(P_APPL_SHORT_NAME IN VARCHAR2
                         ,P_DESC_FLEX_NAME IN VARCHAR2
                         ,P_TABLE_ALIAS IN VARCHAR2
                         ,P_TITLE OUT NOCOPY VARCHAR2
                         ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                         ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_DESC_FLEX(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME, :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR,
    :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_TITLE);
    STPROC.RETRIEVE(5
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(6
                   ,P_COLUMN_EXPR);
  END GET_DESC_FLEX;

  PROCEDURE GET_DESC_FLEX_CONTEXT(P_APPL_SHORT_NAME IN VARCHAR2
                                 ,P_DESC_FLEX_NAME IN VARCHAR2
                                 ,P_TABLE_ALIAS IN VARCHAR2
                                 ,P_TITLE OUT NOCOPY VARCHAR2
                                 ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                                 ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_DESC_FLEX_CONTEXT(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME, :P_TABLE_ALIAS, :P_TITLE,
    :P_LABEL_EXPR, :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_TITLE);
    STPROC.RETRIEVE(5
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(6
                   ,P_COLUMN_EXPR);
  END GET_DESC_FLEX_CONTEXT;

  PROCEDURE GET_DVLPR_DESC_FLEX(P_APPL_SHORT_NAME IN VARCHAR2
                               ,P_DESC_FLEX_NAME IN VARCHAR2
                               ,P_DESC_FLEX_CONTEXT IN VARCHAR2
                               ,P_TABLE_ALIAS IN VARCHAR2
                               ,P_TITLE OUT NOCOPY VARCHAR2
                               ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                               ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_REPORTS.GET_DVLPR_DESC_FLEX(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME, :P_DESC_FLEX_CONTEXT,
    :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR, :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_DESC_FLEX_CONTEXT);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(5
                   ,P_TITLE);
    STPROC.RETRIEVE(6
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(7
                   ,P_COLUMN_EXPR);
  END GET_DVLPR_DESC_FLEX;

  FUNCTION GET_PERSON_NAME(P_SESSION_DATE IN DATE
                          ,P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_REPORTS.GET_PERSON_NAME(:P_SESSION_DATE, :P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_PERSON_NAME;

  FUNCTION GET_SALARY(P_BUSINESS_GROUP_ID IN NUMBER
                     ,P_ASSIGNMENT_ID IN NUMBER
                     ,P_REPORT_DATE IN DATE) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_SALARY(:P_BUSINESS_GROUP_ID, :P_ASSIGNMENT_ID,
                 :P_REPORT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_REPORT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_SALARY;

  PROCEDURE GET_NEW_HIRE_CONTACT(P_PERSON_ID IN NUMBER
                                ,P_BUSINESS_GROUP_ID IN NUMBER
                                ,P_REPORT_DATE IN DATE
                                ,P_CONTACT_NAME OUT NOCOPY VARCHAR2
                                ,P_CONTACT_TITLE OUT NOCOPY VARCHAR2
                                ,P_CONTACT_PHONE OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_NEW_HIRE_CONTACT(:P_PERSON_ID, :
                P_BUSINESS_GROUP_ID, :P_REPORT_DATE, :P_CONTACT_NAME, :P_CONTACT_TITLE,
                :P_CONTACT_PHONE); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_REPORT_DATE);
    STPROC.BIND_O(P_CONTACT_NAME);
    STPROC.BIND_O(P_CONTACT_TITLE);
    STPROC.BIND_O(P_CONTACT_PHONE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_CONTACT_NAME);
    STPROC.RETRIEVE(5
                   ,P_CONTACT_TITLE);
    STPROC.RETRIEVE(6
                   ,P_CONTACT_PHONE);
  END GET_NEW_HIRE_CONTACT;

  PROCEDURE GET_ADDRESS(P_LOCATION_ID IN NUMBER
                       ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_ADDRESS(:P_LOCATION_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);
  END GET_ADDRESS;

  PROCEDURE GET_EMPLOYEE_ADDRESS(P_PERSON_ID IN NUMBER
                                ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_EMPLOYEE_ADDRESS(:P_PERSON_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);
  END GET_EMPLOYEE_ADDRESS;

  PROCEDURE GET_COUNTY_ADDRESS(P_LOCATION_ID IN NUMBER
                              ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_COUNTY_ADDRESS(:P_LOCATION_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);
  END GET_COUNTY_ADDRESS;

  PROCEDURE GET_ACTIVITY(P_ESTABLISHMENT_ID IN NUMBER
                        ,P_ACTIVITY OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_ACTIVITY(:P_ESTABLISHMENT_ID, :P_ACTIVITY); end;');
    STPROC.BIND_I(P_ESTABLISHMENT_ID);
    STPROC.BIND_O(P_ACTIVITY);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ACTIVITY);
  END GET_ACTIVITY;

  FUNCTION GET_CONSOLIDATION_SET(P_CONSOLIDATION_SET_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_CONSOLIDATION_SET(:P_CONSOLIDATION_SET_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_CONSOLIDATION_SET_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_CONSOLIDATION_SET;

  FUNCTION GET_PAYMENT_TYPE_NAME(P_PAYMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_PAYMENT_TYPE_NAME(:P_PAYMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAYMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_PAYMENT_TYPE_NAME;

  FUNCTION GET_ELEMENT_TYPE_NAME(P_ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_ELEMENT_TYPE_NAME(:P_ELEMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ELEMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ELEMENT_TYPE_NAME;

  FUNCTION GET_TAX_UNIT(P_TAX_UNIT_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_TAX_UNIT(:P_TAX_UNIT_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_TAX_UNIT_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_TAX_UNIT;

  FUNCTION GET_PERSON_NAME(P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_PERSON_NAME(:P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_PERSON_NAME;

  FUNCTION GET_PAYROLL_ACTION(P_PAYROLL_ACTION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_PAYROLL_ACTION(:P_PAYROLL_ACTION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAYROLL_ACTION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_PAYROLL_ACTION;

  FUNCTION GET_LEGISLATION_CODE(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_LEGISLATION_CODE(:P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_LEGISLATION_CODE;

  FUNCTION GET_DEFINED_BALANCE_ID(P_BALANCE_NAME IN VARCHAR2
                                 ,P_DIMENSION_SUFFIX IN VARCHAR2
                                 ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_DEFINED_BALANCE_ID(:P_BALANCE_NAME, :P_DIMENSION_SUFFIX, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BALANCE_NAME);
    STPROC.BIND_I(P_DIMENSION_SUFFIX);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_DEFINED_BALANCE_ID;

  FUNCTION GET_STARTUP_DEFINED_BALANCE(P_REPORTING_NAME IN VARCHAR2
                                      ,P_DIMENSION_SUFFIX IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_STARTUP_DEFINED_BALANCE(:P_REPORTING_NAME, :P_DIMENSION_SUFFIX); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_REPORTING_NAME);
    STPROC.BIND_I(P_DIMENSION_SUFFIX);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STARTUP_DEFINED_BALANCE;

  FUNCTION GET_DEFINED_BALANCE_BY_TYPE(P_BOX_NUM IN VARCHAR2
                                      ,P_DIMENSION_SUFFIX IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_DEFINED_BALANCE_BY_TYPE(:P_BOX_NUM, :P_DIMENSION_SUFFIX); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BOX_NUM);
    STPROC.BIND_I(P_DIMENSION_SUFFIX);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_DEFINED_BALANCE_BY_TYPE;

  FUNCTION GET_BEN_CLASS_NAME(P_SESSION_DATE IN DATE
                             ,P_BENEFIT_CLASSIFICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_BEN_CLASS_NAME(:P_SESSION_DATE, :P_BENEFIT_CLASSIFICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_BENEFIT_CLASSIFICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_BEN_CLASS_NAME;

  FUNCTION GET_COBRA_QUALIFYING_EVENT(P_QUALIFYING_EVENT IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_COBRA_QUALIFYING_EVENT(:P_QUALIFYING_EVENT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_QUALIFYING_EVENT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_COBRA_QUALIFYING_EVENT;

  FUNCTION GET_COBRA_STATUS(P_COBRA_STATUS IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_COBRA_STATUS(:P_COBRA_STATUS); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_COBRA_STATUS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_COBRA_STATUS;

  FUNCTION GET_EST_TAX_UNIT(P_STARTING_ORG_ID IN NUMBER
                           ,P_ORG_STRUCTURE_VERSION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_EST_TAX_UNIT(:P_STARTING_ORG_ID, :P_ORG_STRUCTURE_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_STARTING_ORG_ID);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_EST_TAX_UNIT;

  FUNCTION GET_ORG_HIERARCHY_NAME(P_ORG_STRUCTURE_VERSION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_ORG_HIERARCHY_NAME(:P_ORG_STRUCTURE_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ORG_HIERARCHY_NAME;

  FUNCTION GET_STATE_NAME(P_STATE_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_STATE_NAME(:P_STATE_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_STATE_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STATE_NAME;

  FUNCTION GET_ORG_NAME(P_ORGANIZATION_ID IN NUMBER
                       ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_ORG_NAME(:P_ORGANIZATION_ID, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORGANIZATION_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ORG_NAME;

  FUNCTION GET_CAREER_PATH_NAME(P_CAREER_PATH_ID IN NUMBER
                               ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_CAREER_PATH_NAME(:P_CAREER_PATH_ID, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_CAREER_PATH_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_CAREER_PATH_NAME;

  FUNCTION GET_AAP_ORG_ID(P_AAP_NAME IN VARCHAR2
                         ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_AAP_ORG_ID(:P_AAP_NAME, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_AAP_NAME);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_AAP_ORG_ID;

  PROCEDURE GET_ADDRESS_31(P_LOCATION_ID IN NUMBER
                          ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_ADDRESS_31(:P_LOCATION_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);
  END GET_ADDRESS_31;

  FUNCTION GET_LOCATION_CODE(P_LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_LOCATION_CODE(:P_LOCATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_LOCATION_CODE;

  PROCEDURE GET_ADDRESS_3LINES(P_PERSON_ID IN NUMBER
                              ,P_EFFECTIVE_DATE IN DATE
                              ,P_ADDR_LINE1 OUT NOCOPY VARCHAR2
                              ,P_ADDR_LINE2 OUT NOCOPY VARCHAR2
                              ,P_CITY_STATE_ZIP OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin HR_US_REPORTS.GET_ADDRESS_3LINES(:P_PERSON_ID, :P_EFFECTIVE_DATE, :P_ADDR_LINE1, :P_ADDR_LINE2, :P_CITY_STATE_ZIP); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_EFFECTIVE_DATE);
    STPROC.BIND_O(P_ADDR_LINE1);
    STPROC.BIND_O(P_ADDR_LINE2);
    STPROC.BIND_O(P_CITY_STATE_ZIP);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_ADDR_LINE1);
    STPROC.RETRIEVE(4
                   ,P_ADDR_LINE2);
    STPROC.RETRIEVE(5
                   ,P_CITY_STATE_ZIP);
  END GET_ADDRESS_3LINES;
*/

  FUNCTION SALARY_RANGE(P_EMP_CATEGORY IN VARCHAR2
                       ,P_SALARY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF P_EMP_CATEGORY in ('FT','FR') THEN
      IF P_SALARY BETWEEN 0 AND 15999 THEN
        RETURN 1;
      ELSIF P_SALARY BETWEEN 16000 AND 19999 THEN
        RETURN 2;
      ELSIF P_SALARY BETWEEN 20000 AND 2499 THEN
        RETURN 3;
      ELSIF P_SALARY BETWEEN 25000 AND 32999 THEN
        RETURN 4;
      ELSIF P_SALARY BETWEEN 33000 AND 42999 THEN
        RETURN 5;
      ELSIF P_SALARY BETWEEN 43000 AND 54999 THEN
        RETURN 6;
      ELSIF P_SALARY BETWEEN 55000 AND 69999 THEN
        RETURN 7;
      ELSIF P_SALARY > 70000 THEN
        RETURN 8;
      END IF;
    ELSE
      RETURN 0;
    END IF;
  END SALARY_RANGE;

  FUNCTION EMPLOYMENT_CATEGORY(P_EMP_CATEGORY IN VARCHAR2
                              ,P_HIRE_DATE IN DATE) RETURN VARCHAR2 IS
    L_REPORT_DATE DATE := TO_DATE('01-10' || TO_CHAR(SYSDATE
                   ,'YYYY')
           ,'DD-MM-YYYY');
  BEGIN
    IF P_EMP_CATEGORY in ('FT','FR') THEN
      IF P_HIRE_DATE BETWEEN TRUNC(L_REPORT_DATE - 364
           ,'MON') + 1 AND L_REPORT_DATE THEN
        RETURN 'NEW HIRES DURING FISCAL YEAR - PERMANENT FULL TIME ONLY';
      ELSE
        RETURN 'FULL-TIME EMPLOYEES';
      END IF;
    ELSE
      RETURN 'OTHER THAN FULL-TIME EMPLOYEES';
    END IF;
  END EMPLOYMENT_CATEGORY;

END PQH_PQHEEO5_XMLP_PKG;

/
