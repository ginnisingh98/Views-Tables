--------------------------------------------------------
--  DDL for Package Body AP_APXVDLET_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXVDLET_XMLP_PKG" AS
/* $Header: APXVDLETB.pls 120.0 2007/12/27 08:47:25 vjaganat noship $ */
  DO_SQL_FAILURE EXCEPTION;
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO
      BASE_CURR
      ,PREC
      ,MIN_AU
      ,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;
  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END CUSTOM_INIT;
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;
  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD
    INTO
      NLS_YES
      ,NLS_NO
      ,NLS_ALL
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      FROM_ADDRESS_LINE1 HR_LOCATIONS.ADDRESS_LINE_1%TYPE;
      FROM_ADDRESS_LINE2 HR_LOCATIONS.ADDRESS_LINE_2%TYPE;
      FROM_ADDRESS_LINE3 HR_LOCATIONS.ADDRESS_LINE_3%TYPE;
      FROM_CITY HR_LOCATIONS.TOWN_OR_CITY%TYPE;
      FROM_STATE HR_LOCATIONS.REGION_3%TYPE;
      FROM_ZIP HR_LOCATIONS.POSTAL_CODE%TYPE;
      LOCATION_ID HR_LOCATIONS.LOCATION_ID%TYPE;
      DISP_RETURN_DATE VARCHAR2(30);
    BEGIN
      SELECT
        SUBSTR(L.ADDRESS_LINE_1
              ,1
              ,35),
        SUBSTR(L.ADDRESS_LINE_2
              ,1
              ,35),
        SUBSTR(L.ADDRESS_LINE_3
              ,1
              ,35),
        SUBSTR(L.TOWN_OR_CITY
              ,1
              ,30),
        SUBSTR(NVL(L.REGION_3
                  ,L.REGION_2)
              ,1
              ,30),
        SUBSTR(L.POSTAL_CODE
              ,1
              ,20)
      INTO
        FROM_ADDRESS_LINE1
        ,FROM_ADDRESS_LINE2
        ,FROM_ADDRESS_LINE3
        ,FROM_CITY
        ,FROM_STATE
        ,FROM_ZIP
      FROM
        HR_LOCATIONS L
      WHERE L.LOCATION_ID = P_LOCATION_ID;
      C_FROM_ADD_LINE_1 := FROM_ADDRESS_LINE1;
      C_FROM_ADD_LINE_2 := FROM_ADDRESS_LINE2;
      C_FROM_ADD_LINE_3 := FROM_ADDRESS_LINE3;
      C_FROM_CITY := FROM_CITY;
      C_FROM_STATE := FROM_STATE;
      C_FROM_ZIP := FROM_ZIP;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (POPULATE_MLS_LEXICALS = FALSE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_SOB_ID NUMBER;
    L_REPORT_START_DATE DATE;
    L_CURDATE VARCHAR2(25);
  BEGIN
    L_REPORT_START_DATE := SYSDATE;
    L_SOB_ID := P_SET_OF_BOOKS_ID;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID
    INTO
      L_NAME
      ,L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = L_SOB_ID;
    SELECT
      TO_CHAR(SYSDATE
             ,'fmMonth DD, YYYY')
    INTO
      L_CURDATE
    FROM
      DUAL;
    C_COMPANY_NAME_HEADER := L_NAME;
    C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    C_REPORT_START_DATE := L_REPORT_START_DATE;
    C_CURDATE := L_CURDATE;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;
  FUNCTION CALCULATE_RUN_TIME RETURN BOOLEAN IS
    END_DATE DATE;
    START_DATE DATE;
  BEGIN
    END_DATE := SYSDATE;
    START_DATE := C_REPORT_START_DATE;
    C_REPORT_RUN_TIME := TO_CHAR(TO_DATE('01/01/0001'
                                        ,'DD/MM/YYYY') + ((END_DATE - START_DATE))
                                ,'HH24:MI:SS');
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101
                             ,NULL);
  END CALCULATE_RUN_TIME;
  FUNCTION POPULATE_MLS_LEXICALS RETURN BOOLEAN IS
    SESSION_LANGUAGE FND_LANGUAGES.NLS_LANGUAGE%TYPE;
    BASE_LANGUAGE FND_LANGUAGES.NLS_LANGUAGE%TYPE;
  BEGIN
    SESSION_LANGUAGE := '';
    BASE_LANGUAGE := '';
    SELECT
      SUBSTR(USERENV('LANGUAGE')
            ,1
            ,INSTR(USERENV('LANGUAGE')
                 ,'_') - 1)
    INTO
      SESSION_LANGUAGE
    FROM
      DUAL;
    SELECT
      NLS_LANGUAGE
    INTO
      BASE_LANGUAGE
    FROM
      FND_LANGUAGES
    WHERE INSTALLED_FLAG = 'B';
    LP_LANGUAGE_WHERE := ' and nvl(pvs.language,' || '''' || BASE_LANGUAGE || ''')=' || '''' || SESSION_LANGUAGE || '''';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN DO_SQL_FAILURE THEN
      RETURN (TRUE);
    WHEN OTHERS THEN
      RETURN (FALSE);
  END POPULATE_MLS_LEXICALS;
  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;
  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;
  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;
  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;
  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;
  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;
  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;
  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;
  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;
  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;
  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;
  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;
  FUNCTION C_CURDATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CURDATE;
  END C_CURDATE_P;
  FUNCTION C_FROM_ADD_LINE_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FROM_ADD_LINE_1;
  END C_FROM_ADD_LINE_1_P;
  FUNCTION C_FROM_ADD_LINE_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FROM_ADD_LINE_2;
  END C_FROM_ADD_LINE_2_P;
  FUNCTION C_FROM_ADD_LINE_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FROM_ADD_LINE_3;
  END C_FROM_ADD_LINE_3_P;
  FUNCTION C_FROM_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FROM_CITY;
  END C_FROM_CITY_P;
  FUNCTION C_FROM_STATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FROM_STATE;
  END C_FROM_STATE_P;
  FUNCTION C_FROM_ZIP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FROM_ZIP;
  END C_FROM_ZIP_P;
END AP_APXVDLET_XMLP_PKG;


/
