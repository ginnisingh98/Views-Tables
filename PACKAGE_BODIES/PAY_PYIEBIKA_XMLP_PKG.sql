--------------------------------------------------------
--  DDL for Package Body PAY_PYIEBIKA_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PYIEBIKA_XMLP_PKG" AS
/* $Header: PYIEBIKAB.pls 120.3 2007/12/27 11:26:16 srikrish noship $ */


  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR GET_DEFINED_BALANCE_ID(L_BALANCE_NAME IN VARCHAR2) IS
      SELECT
        PDB.DEFINED_BALANCE_ID
      FROM
        PAY_BALANCE_DIMENSIONS PBD,
        PAY_BALANCE_TYPES PBT,
        PAY_DEFINED_BALANCES PDB
      WHERE PBT.BALANCE_TYPE_ID = PDB.BALANCE_TYPE_ID
        AND PBT.BALANCE_NAME = L_BALANCE_NAME
        AND PBD.BALANCE_DIMENSION_ID = PDB.BALANCE_DIMENSION_ID
        AND PBD.DATABASE_ITEM_SUFFIX = '_ASG_TWO_YTD'
        AND PBT.LEGISLATION_CODE = 'IE';
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

   -- HR_STANDARD.EVENT('BEFORE REPORT');
    SELECT
      NAME
    INTO
      CP_BUSINESS_GROUP_NAME
    FROM
      PER_BUSINESS_GROUPS
    WHERE BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID;
    OPEN GET_DEFINED_BALANCE_ID('IE BIK Arrearage');
    FETCH GET_DEFINED_BALANCE_ID
     INTO
       CP_IE_BIK_ARREARAGE;
    CLOSE GET_DEFINED_BALANCE_ID;
    OPEN GET_DEFINED_BALANCE_ID('IE BIK Odd Arrearage');
    FETCH GET_DEFINED_BALANCE_ID
     INTO
       CP_IE_BIK_ODD_ARREARAGE;
    CLOSE GET_DEFINED_BALANCE_ID;
    OPEN GET_DEFINED_BALANCE_ID('IE BIK Even Arrearage');
    FETCH GET_DEFINED_BALANCE_ID
     INTO
       CP_IE_BIK_EVEN_ARREARAGE;
    CLOSE GET_DEFINED_BALANCE_ID;
    OPEN GET_DEFINED_BALANCE_ID('IE BIK Arrearage Recovery');
    FETCH GET_DEFINED_BALANCE_ID
     INTO
       CP_IE_BIK_ARREARAGE_RECOVERY;
    CLOSE GET_DEFINED_BALANCE_ID;
    OPEN GET_DEFINED_BALANCE_ID('IE BIK Odd Arrearage Recovery');
    FETCH GET_DEFINED_BALANCE_ID
     INTO
       CP_IE_BIK_ODD_ARREARAGE_REC;
    CLOSE GET_DEFINED_BALANCE_ID;
    OPEN GET_DEFINED_BALANCE_ID('IE BIK Even Arrearage Recovery');
    FETCH GET_DEFINED_BALANCE_ID
     INTO
       CP_IE_BIK_EVEN_ARREARAGE_REC;
    CLOSE GET_DEFINED_BALANCE_ID;
    CP_EFFECTIVE_DATE := FND_DATE.CANONICAL_TO_DATE(P_EFFECTIVE_DATE);
    RETURN (TRUE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END BEFOREREPORT;

  FUNCTION CF_PAYROLL_NAMEFORMULA(PAYROLL_ID IN NUMBER) RETURN CHAR IS
    CURSOR CUR_PAYROLL(VP_PAYROLL_ID IN PAY_PAYROLLS_F.PAYROLL_ID%TYPE) IS
      SELECT
        PAYROLL_NAME
      FROM
        PAY_PAYROLLS_F
      WHERE PAYROLL_ID = VP_PAYROLL_ID;
    V_CUR_PAYROLL CUR_PAYROLL%ROWTYPE;
  BEGIN
    OPEN CUR_PAYROLL(PAYROLL_ID);
    FETCH CUR_PAYROLL
     INTO
       V_CUR_PAYROLL;
    CLOSE CUR_PAYROLL;
    RETURN (V_CUR_PAYROLL.PAYROLL_NAME);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_PAYROLL_NAMEFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    FUNCTION SET_ORDER_CLAUSE(P_SORT_ORDER IN VARCHAR2) RETURN VARCHAR2 IS
      L_SORT_ORDER VARCHAR2(80);
      L_SORT_CLAUSE VARCHAR2(80);
    BEGIN
      L_SORT_ORDER := RTRIM(P_SORT_ORDER);
      IF L_SORT_ORDER = 'FIRST_NAME' THEN
        L_SORT_CLAUSE := 'papf.' || L_SORT_ORDER;
      ELSIF L_SORT_ORDER = 'LAST_NAME' THEN
        L_SORT_CLAUSE := 'papf.' || L_SORT_ORDER;
      ELSIF L_SORT_ORDER = 'EMPLOYEE_NUMBER' THEN
        L_SORT_CLAUSE := 'papf.' || L_SORT_ORDER;
      ELSIF L_SORT_ORDER = 'NATIONAL_IDENTIFIER' THEN
        L_SORT_CLAUSE := 'papf.' || L_SORT_ORDER;
      END IF;
      RETURN L_SORT_CLAUSE;
    END SET_ORDER_CLAUSE;
  BEGIN
    IF P_SORT_ORDER IS NOT NULL THEN
      P_DERIVED_SORT_ORDER := SET_ORDER_CLAUSE(P_SORT_ORDER);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_1FORMULA(ASSIGNMENT_ID IN NUMBER) RETURN NUMBER IS
    L_VALUE NUMBER;

    -- Added by Atul
  pragma autonomous_transaction;
  BEGIN
    L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_ARREARAGE
                                        ,ASSIGNMENT_ID
                                        ,P_EFFECTIVE_DATE);

    --insert into log_msg VALUES('ATUL','PYIEBIKA','L_VALUE1',L_VALUE) ;
        -- Added by Atul
    COMMIT;

    RETURN NVL(L_VALUE,0);

    EXCEPTION
	WHEN OTHERS THEN

	  RETURN 0;
      END CF_1FORMULA;

  FUNCTION CF_2FORMULA(ASSIGNMENT_ID IN NUMBER) RETURN NUMBER IS
    L_VALUE NUMBER;
      -- Added by Atul
  pragma autonomous_transaction;
  BEGIN
    IF MOD(TO_NUMBER(TO_CHAR(P_EFFECTIVE_DATE
                         ,'YYYY'))
       ,2) = 0 THEN
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_ODD_ARREARAGE
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    ELSE
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_EVEN_ARREARAGE
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    END IF;
   -- insert into log_msg VALUES('ATUL','PYIEBIKA','L_VALUE2',L_VALUE) ;
       -- Added by Atul
   COMMIT;
    RETURN NVL(L_VALUE
              ,0);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END CF_2FORMULA;

  FUNCTION CF_3FORMULA(ASSIGNMENT_ID IN NUMBER) RETURN NUMBER IS
    L_VALUE NUMBER;
      -- Added by Atul
  pragma autonomous_transaction;
  BEGIN
    IF MOD(TO_NUMBER(TO_CHAR(P_EFFECTIVE_DATE
                         ,'YYYY'))
       ,2) = 0 THEN
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_EVEN_ARREARAGE
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    ELSE
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_ODD_ARREARAGE
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    END IF;
     --insert into log_msg VALUES('ATUL','PYIEBIKA','L_VALUE3',L_VALUE) ;
       -- Added by Atul
    COMMIT;
    RETURN NVL(L_VALUE
              ,0);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END CF_3FORMULA;

  FUNCTION CF_4FORMULA(ASSIGNMENT_ID IN NUMBER) RETURN NUMBER IS
    L_VALUE NUMBER;
      -- Added by Atul
  pragma autonomous_transaction;
  BEGIN
    IF MOD(TO_NUMBER(TO_CHAR(P_EFFECTIVE_DATE
                         ,'YYYY'))
       ,2) = 0 THEN
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_ODD_ARREARAGE_REC
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    ELSE
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_EVEN_ARREARAGE_REC
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    END IF;
    -- insert into log_msg VALUES('ATUL','PYIEBIKA','L_VALUE4',L_VALUE) ;
        -- Added by Atul
    COMMIT;
    RETURN NVL(L_VALUE
              ,0);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END CF_4FORMULA;

  FUNCTION CF_5FORMULA(ASSIGNMENT_ID IN NUMBER) RETURN NUMBER IS
    L_VALUE NUMBER;
     -- Added by Atul
  pragma autonomous_transaction;
    BEGIN
    IF MOD(TO_NUMBER(TO_CHAR(P_EFFECTIVE_DATE
                         ,'YYYY'))
       ,2) = 0 THEN
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_EVEN_ARREARAGE_REC
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    ELSE
      L_VALUE := PAY_BALANCE_PKG.GET_VALUE(CP_IE_BIK_ODD_ARREARAGE_REC
                                          ,ASSIGNMENT_ID
                                          ,P_EFFECTIVE_DATE);
    END IF;
    --insert into log_msg VALUES('ATUL','PYIEBIKA','L_VALUE5',L_VALUE) ;
        -- Added by Atul
    COMMIT;
    RETURN NVL(L_VALUE
              ,0);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END CF_5FORMULA;

  FUNCTION CF_1FORMULA0004 RETURN DATE IS
    V_DATE DATE;
  BEGIN
    V_DATE := P_EFFECTIVE_DATE;
    RETURN V_DATE;
  END CF_1FORMULA0004;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
   -- HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_IE_BIK_ARREARAGE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IE_BIK_ARREARAGE;
  END CP_IE_BIK_ARREARAGE_P;

  FUNCTION CP_IE_BIK_ODD_ARREARAGE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IE_BIK_ODD_ARREARAGE;
  END CP_IE_BIK_ODD_ARREARAGE_P;

  FUNCTION CP_IE_BIK_EVEN_ARREARAGE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IE_BIK_EVEN_ARREARAGE;
  END CP_IE_BIK_EVEN_ARREARAGE_P;

  FUNCTION CP_IE_BIK_ARREARAGE_RECOVERY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IE_BIK_ARREARAGE_RECOVERY;
  END CP_IE_BIK_ARREARAGE_RECOVERY_P;

  FUNCTION CP_IE_BIK_ODD_ARREARAGE_REC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IE_BIK_ODD_ARREARAGE_REC;
  END CP_IE_BIK_ODD_ARREARAGE_REC_P;

  FUNCTION CP_IE_BIK_EVEN_ARREARAGE_REC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IE_BIK_EVEN_ARREARAGE_REC;
  END CP_IE_BIK_EVEN_ARREARAGE_REC_P;

  FUNCTION CP_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BUSINESS_GROUP_NAME;
  END CP_BUSINESS_GROUP_NAME_P;

  FUNCTION CP_EFFECTIVE_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_EFFECTIVE_DATE;
  END CP_EFFECTIVE_DATE_P;

END PAY_PYIEBIKA_XMLP_PKG;

/
