--------------------------------------------------------
--  DDL for Package Body AP_APXHRUPD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXHRUPD_XMLP_PKG" AS
/* $Header: APXHRUPDB.pls 120.0 2007/12/27 07:42:04 vjaganat noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_VOID AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_NA AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      LY.MEANING,
      LN.MEANING,
      L1.DISPLAYED_FIELD,
      L2.DISPLAYED_FIELD,
      L3.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_VOID,NLS_NA
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES L1,
      AP_LOOKUP_CODES L2,
      AP_LOOKUP_CODES L3
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND L1.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L1.LOOKUP_CODE = 'ALL'
      AND L2.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND L2.LOOKUP_CODE = 'VOID'
      AND L3.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L3.LOOKUP_CODE = 'NA';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_VOID := NLS_VOID;
    C_NLS_NA := NLS_NA;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
   -- C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
   -- C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      C_REPORT_START_DATE := SYSDATE;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (GET_LAST_RUN_DATE <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_Last_Run_Date')*/NULL;
      END IF;
      IF (SET_SUPPLIER_WHERE <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('9'
                   ,'After Set_Supplier_Where')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('11'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('13'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      IF (AP_EMPLOYEE_UPDATE_PKG.UPDATE_EMPLOYEE(C_UPDATE_DATE
                                            ,P_FROM_SUPPLIER
                                            ,P_TO_SUPPLIER
                                            ,P_DEBUG_SWITCH
                                            ,'After Report Trigger') <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('21'
                   ,'AP_EMPLOYEE_UPDATE_PKG.Update_Employee')*/NULL;
      END IF;
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('22'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_SOB_ID NUMBER;
    L_REPORT_START_DATE DATE;
  BEGIN
    L_REPORT_START_DATE := SYSDATE;
    L_SOB_ID := P_SET_OF_BOOKS_ID;
    /*SRW.MESSAGE('10'
               ,'l_sob_id: ' || L_SOB_ID)*/NULL;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID
    INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = L_SOB_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    C_REPORT_START_DATE := L_REPORT_START_DATE;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION GET_LAST_RUN_DATE RETURN BOOLEAN IS
    L_REQUESTED_START_DATE FND_CONCURRENT_REQUESTS.REQUESTED_START_DATE%TYPE;
  BEGIN
    SELECT
      MAX(REQUESTED_START_DATE)
    INTO L_REQUESTED_START_DATE
    FROM
      FND_CONCURRENT_PROGRAMS FCONC,
      FND_CONCURRENT_REQUESTS FREQ
    WHERE FCONC.APPLICATION_ID = FREQ.PROGRAM_APPLICATION_ID
      AND FCONC.CONCURRENT_PROGRAM_ID = FREQ.CONCURRENT_PROGRAM_ID
      AND FCONC.CONCURRENT_PROGRAM_NAME = 'APXHRUPD'
      AND FREQ.STATUS_CODE = 'C';
    IF (P_FROM_SUPPLIER IS NOT NULL AND P_TO_SUPPLIER IS NOT NULL) THEN
      C_UPDATE_DATE := NULL;
    ELSE
      C_UPDATE_DATE := NVL(L_REQUESTED_START_DATE
                          ,TO_DATE('01/01/1951'
                                 ,'DD/MM/YYYY'));
    END IF;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('2'
                 ,'C_Update Date: ' || C_UPDATE_DATE)*/NULL;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_LAST_RUN_DATE;

  FUNCTION CALCULATE_RUN_TIME RETURN BOOLEAN IS
    END_DATE DATE;
    START_DATE DATE;
  BEGIN
    END_DATE := SYSDATE;
    START_DATE := C_REPORT_START_DATE;
    C_REPORT_RUN_TIME := TO_CHAR(TO_DATE('01/01/0001'
                                        ,'DD/MM/YYYY') + ((END_DATE - START_DATE))
                                ,'HH24:MI:SS');
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CALCULATE_RUN_TIME;

  FUNCTION C_DUPLICATE_YES_NOFORMULA(UPDATED_VALUE IN VARCHAR2
                                    ,UPDATED_TO IN VARCHAR2) RETURN VARCHAR2 IS
    L_DUPLICATES VARCHAR2(1);
    L_COUNT NUMBER;
  BEGIN
    /*SRW.REFERENCE(UPDATED_VALUE)*/NULL;
    IF UPDATED_VALUE = 'Name' THEN
      BEGIN
        SELECT
          'Y'
        INTO L_DUPLICATES
        FROM
          DUAL
        WHERE EXISTS (
          SELECT
            'Duplicates exist in Po_Vendors'
          FROM
            AP_SUPPLIERS
          WHERE VENDOR_NAME = UPDATED_TO );
        RETURN ('Y');
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          SELECT
            COUNT(PERSON_ID)
          INTO L_COUNT
          FROM
            PER_ALL_PEOPLE_F PPF
          WHERE TRUNC(SYSDATE) between PPF.EFFECTIVE_START_DATE
            AND PPF.EFFECTIVE_END_DATE
            AND DECODE(PPF.MIDDLE_NAMES
                ,NULL
                ,PPF.LAST_NAME || ', ' || PPF.FIRST_NAME
                ,PPF.LAST_NAME || ', ' || PPF.FIRST_NAME || ' ' || PPF.MIDDLE_NAMES) = UPDATED_TO;
          IF L_COUNT > 1 THEN
            RETURN ('Y');
          ELSE
            RETURN ('N');
          END IF;
      END;
    ELSE
      RETURN ('N');
    END IF;
  END C_DUPLICATE_YES_NOFORMULA;

  FUNCTION SET_SUPPLIER_WHERE RETURN BOOLEAN IS
  BEGIN
    IF (P_FROM_SUPPLIER IS NOT NULL AND P_TO_SUPPLIER IS NOT NULL) THEN
      C_SUPPLIER_PREDICATE := ' and pv1.vendor_name between ' || '''' || P_FROM_SUPPLIER || ''' and ''' || P_TO_SUPPLIER || '''';
      C_NAME_UPDATE_DATE := ' ';
      C_INACTIVE_UPDATE_DATE := ' ';
      C_HOME_UPDATE_DATE := ' ';
      C_OFFICE_UPDATE_DATE := ' ';
    ELSE
      C_SUPPLIER_PREDICATE := ' ';
      C_NAME_UPDATE_DATE := ' and ppf.last_update_date  > ' || '''' || C_UPDATE_DATE || '''';
      C_INACTIVE_UPDATE_DATE := ' and ppos.last_update_date > ' || '''' || C_UPDATE_DATE || '''';
      C_HOME_UPDATE_DATE := ' and pa1.last_update_date > ' || '''' || C_UPDATE_DATE || '''';
      C_OFFICE_UPDATE_DATE := ' and (trunc(paf.last_update_date) >= ' || '''' || C_UPDATE_DATE || '''' || ' OR ' || 'trunc(locs.last_update_date) >= ' || '''' || C_UPDATE_DATE || '''' || ')';
    END IF;
    /*SRW.MESSAGE('4'
               ,'C_supplier_predicate: ' || C_SUPPLIER_PREDICATE)*/NULL;
    /*SRW.MESSAGE('5'
               ,'C_name_update_date: ' || C_NAME_UPDATE_DATE)*/NULL;
    /*SRW.MESSAGE('6'
               ,'C_inactive_update_date: ' || C_INACTIVE_UPDATE_DATE)*/NULL;
    /*SRW.MESSAGE('7'
               ,'C_home_update_date: ' || C_HOME_UPDATE_DATE)*/NULL;
    /*SRW.MESSAGE('8'
               ,'C_office_update_date: ' || C_OFFICE_UPDATE_DATE)*/NULL;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END SET_SUPPLIER_WHERE;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_VOID;
  END C_NLS_VOID_P;

  FUNCTION C_NLS_NA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NA;
  END C_NLS_NA_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_SUPPLIER_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SUPPLIER_PREDICATE;
  END C_SUPPLIER_PREDICATE_P;

  FUNCTION C_NAME_UPDATE_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NAME_UPDATE_DATE;
  END C_NAME_UPDATE_DATE_P;

  FUNCTION C_INACTIVE_UPDATE_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INACTIVE_UPDATE_DATE;
  END C_INACTIVE_UPDATE_DATE_P;

  FUNCTION C_HOME_UPDATE_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HOME_UPDATE_DATE;
  END C_HOME_UPDATE_DATE_P;

  FUNCTION C_OFFICE_UPDATE_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OFFICE_UPDATE_DATE;
  END C_OFFICE_UPDATE_DATE_P;

END AP_APXHRUPD_XMLP_PKG;



/
