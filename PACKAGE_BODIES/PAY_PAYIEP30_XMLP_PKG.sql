--------------------------------------------------------
--  DDL for Package Body PAY_PAYIEP30_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PAYIEP30_XMLP_PKG" AS
/* $Header: PAYIEP30B.pls 120.2 2008/03/26 12:54:10 amakrish noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR CUR_ARCSTARTDATE(VP_PAYROLL_ACTION_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE) IS
      SELECT
        MIN(PPA_ARC.START_DATE) START_DATE
      FROM
        PAY_ASSIGNMENT_ACTIONS PAA_P30,
        PAY_ACTION_INTERLOCKS PAI_P30,
        PAY_ASSIGNMENT_ACTIONS PAA_ARC,
        PAY_PAYROLL_ACTIONS PPA_ARC
      WHERE PAA_P30.PAYROLL_ACTION_ID = VP_PAYROLL_ACTION_ID
        AND PAA_P30.ASSIGNMENT_ACTION_ID = PAI_P30.LOCKING_ACTION_ID
        AND PAA_ARC.ASSIGNMENT_ACTION_ID = PAI_P30.LOCKED_ACTION_ID
        AND PPA_ARC.PAYROLL_ACTION_ID = PAA_ARC.PAYROLL_ACTION_ID;
    CURSOR CUR_ENDDATE(VP_PAYROLL_ACTION_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE) IS
      SELECT
        SUBSTR(PPA_P30.LEGISLATIVE_PARAMETERS
              ,INSTR(PPA_P30.LEGISLATIVE_PARAMETERS
                   ,'END_DATE=') + 9
              ,10) END_DATE
      FROM
        PAY_PAYROLL_ACTIONS PPA_P30
      WHERE PPA_P30.PAYROLL_ACTION_ID = VP_PAYROLL_ACTION_ID;
    CURSOR CUR_GET_START_DATE(VP_REPORT_END_DATE IN DATE) IS
      SELECT
        TO_DATE(RULE_MODE || '/' || TO_CHAR(VP_REPORT_END_DATE
                       ,'YYYY')
               ,'dd/mm/yyyy')
      FROM
        PAY_LEGISLATION_RULES
      WHERE LEGISLATION_CODE = 'IE'
        AND RULE_TYPE = 'L';
    V_CUR_ARCSTARTDATE CUR_ARCSTARTDATE%ROWTYPE;
    V_CUR_ENDDATE CUR_ENDDATE%ROWTYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    -- commented by atul P_REPORT_MODE := NVL(P_REPORT_MODE,'DETAIL');
    LP_REPORT_MODE := NVL(P_REPORT_MODE,'DETAIL');
    --commented by atul P_SUPPLEMENTARY_RUN := NVL(P_SUPPLEMENTARY_RUN,'N');
    LP_SUPPLEMENTARY_RUN := NVL(P_SUPPLEMENTARY_RUN,'N');

    -- commented by atul IF P_REPORT_MODE = 'DETAIL' THEN
    IF LP_REPORT_MODE = 'DETAIL' THEN
      IF P_SORT_BY = 'PAYROLL' THEN
        CP_PAYROLL_ID := 'pact_er.ACTION_INFORMATION2';
        CP_ORDER_BY := ' Order By pact_er.ACTION_INFORMATION2,pact_ee.action_information1';
      ELSE
        CP_PAYROLL_ID := 'NULL';
        CP_ORDER_BY := ' Order By pact_ee.action_information1';
      END IF;
    END IF;
    OPEN CUR_ARCSTARTDATE(P_P30_ACTION_ID);
    FETCH CUR_ARCSTARTDATE
     INTO
       V_CUR_ARCSTARTDATE;
    CLOSE CUR_ARCSTARTDATE;
    OPEN CUR_ENDDATE(P_P30_ACTION_ID);
    FETCH CUR_ENDDATE
     INTO
       V_CUR_ENDDATE;
    CLOSE CUR_ENDDATE;
    -- commented by atul P_REPORT_DATE := TO_CHAR(FND_DATE.CANONICAL_TO_DATE(P_REPORT_DATE),'DD-MON-YYYY');
    LP_REPORT_DATE := TO_CHAR(FND_DATE.CANONICAL_TO_DATE(P_REPORT_DATE),format_mask);
    -- commented by atul CP_REPORT_DATE := TO_DATE(P_REPORT_DATE,'DD-MON-YYYY');
    CP_REPORT_DATE := TO_DATE(LP_REPORT_DATE,format_mask);
    P_START_DATE := V_CUR_ARCSTARTDATE.START_DATE;
    P_START_DATE1 := TO_CHAR(P_START_DATE,format_mask);
    P_END_DATE := TO_DATE(V_CUR_ENDDATE.END_DATE
                         ,'YYYY/MM/DD');
    P_END_DATE1 := TO_CHAR(P_END_DATE,format_mask);
    OPEN CUR_GET_START_DATE(P_END_DATE);
    FETCH CUR_GET_START_DATE
     INTO
       CP_TAX_START_DATE;
    CLOSE CUR_GET_START_DATE;
    --commented by atul CP_SUPPLEMENTARY_RUN := HR_REPORTS.GET_LOOKUP_MEANING('YES_NO',P_SUPPLEMENTARY_RUN);
    CP_SUPPLEMENTARY_RUN := HR_REPORTS.GET_LOOKUP_MEANING('YES_NO',LP_SUPPLEMENTARY_RUN);

    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_BUSINESS_GROUPFORMULA RETURN VARCHAR2 IS
    V_BUSINESS_GROUP HR_ALL_ORGANIZATION_UNITS.NAME%TYPE;
  BEGIN
    V_BUSINESS_GROUP := HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    RETURN V_BUSINESS_GROUP;
  END CF_BUSINESS_GROUPFORMULA;

  FUNCTION CF_LEGISLATION_CODEFORMULA RETURN VARCHAR2 IS
    V_LEGISLATION_CODE HR_ORGANIZATION_INFORMATION.ORG_INFORMATION9%TYPE := NULL;
    CURSOR LEGISLATION_CODE(C_BUSINESS_GROUP_ID IN HR_ORGANIZATION_INFORMATION.ORGANIZATION_ID%TYPE) IS
      SELECT
        ORG_INFORMATION9
      FROM
        HR_ORGANIZATION_INFORMATION
      WHERE ORGANIZATION_ID = C_BUSINESS_GROUP_ID
        AND ORG_INFORMATION9 is not null
        AND ORG_INFORMATION_CONTEXT = 'Business Group Information';
  BEGIN
    OPEN LEGISLATION_CODE(P_BUSINESS_GROUP_ID);
    FETCH LEGISLATION_CODE
     INTO
       V_LEGISLATION_CODE;
    CLOSE LEGISLATION_CODE;
    RETURN V_LEGISLATION_CODE;
  END CF_LEGISLATION_CODEFORMULA;

  FUNCTION CF_CURRENCY_FORMAT_MASKFORMULA(CF_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    V_CURRENCY_CODE FND_CURRENCIES.CURRENCY_CODE%TYPE;
    V_FORMAT_MASK VARCHAR2(100) := NULL;
    V_FIELD_LENGTH NUMBER(3) := 14;
    CURSOR CURRENCY_FORMAT_MASK(C_TERRITORY_CODE IN FND_CURRENCIES.ISSUING_TERRITORY_CODE%TYPE) IS
      SELECT
        CURRENCY_CODE
      FROM
        FND_CURRENCIES
      WHERE ISSUING_TERRITORY_CODE = C_TERRITORY_CODE;
  BEGIN
    OPEN CURRENCY_FORMAT_MASK(CF_LEGISLATION_CODE);
    FETCH CURRENCY_FORMAT_MASK
     INTO
       V_CURRENCY_CODE;
    CLOSE CURRENCY_FORMAT_MASK;
    V_FORMAT_MASK := FND_CURRENCY.GET_FORMAT_MASK(V_CURRENCY_CODE
                                                 ,V_FIELD_LENGTH);
    RETURN V_FORMAT_MASK;
  END CF_CURRENCY_FORMAT_MASKFORMULA;

  PROCEDURE SET_CURRENCY_FORMAT_MASK IS
  BEGIN
    NULL;
  END SET_CURRENCY_FORMAT_MASK;

  FUNCTION P_BUSINESS_GROUP_IDVALIDTRIGGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_BUSINESS_GROUP_IDVALIDTRIGGE;

  FUNCTION CF_CALCULATE_TOTAL_PRSIFORMULA(REPORT_ID IN NUMBER
                                         ,ASSIGNMENT_ID IN NUMBER) RETURN NUMBER IS
    CURSOR YTD_BALANCES(VP_PAYROLL_ACTION_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE,
    VP_ASSIGNMENT_ID IN PAY_ASSIGNMENT_ACTIONS.ASSIGNMENT_ID%TYPE,
    VP_BALANCE_NAME IN PAY_BALANCE_TYPES.BALANCE_NAME%TYPE,VP_DIMENSION_NAME IN VARCHAR2,
    VP_ACTION_CONTEXT_ID IN NUMBER,VP_EFFECTIVE_DATE IN DATE) IS
      SELECT
        PACT_YTDBAL.ACTION_INFORMATION4 BALANCE_VALUE
      FROM
        PAY_ASSIGNMENT_ACTIONS PAA_P30,
        PAY_ACTION_INTERLOCKS PAI_P30,
        PAY_ASSIGNMENT_ACTIONS PAA_ARC,
        PAY_ACTION_INFORMATION PACT_YTDBAL,
        PAY_DEFINED_BALANCES PDB_YTDBAL,
        PAY_BALANCE_TYPES PBT_YTDBAL,
        PAY_BALANCE_DIMENSIONS PBD_YTDBAL,
        PAY_ASSIGNMENT_ACTIONS PAA_SRC,
        PAY_PAYROLL_ACTIONS PPA_SRC
      WHERE PAA_P30.PAYROLL_ACTION_ID = VP_PAYROLL_ACTION_ID
        AND PAA_P30.ASSIGNMENT_ID = VP_ASSIGNMENT_ID
        AND PAA_P30.ASSIGNMENT_ACTION_ID = PAI_P30.LOCKING_ACTION_ID
        AND PAA_ARC.ASSIGNMENT_ACTION_ID = PAI_P30.LOCKED_ACTION_ID
        AND PACT_YTDBAL.ACTION_INFORMATION_CATEGORY = 'EMEA BALANCES'
        AND PACT_YTDBAL.ACTION_CONTEXT_ID = VP_ACTION_CONTEXT_ID
        AND PACT_YTDBAL.ACTION_CONTEXT_ID = PAA_ARC.ASSIGNMENT_ACTION_ID
        AND PACT_YTDBAL.ACTION_CONTEXT_TYPE = 'AAP'
        AND PDB_YTDBAL.DEFINED_BALANCE_ID = PACT_YTDBAL.ACTION_INFORMATION1
        AND PDB_YTDBAL.BALANCE_TYPE_ID = PBT_YTDBAL.BALANCE_TYPE_ID
        AND PBT_YTDBAL.BALANCE_NAME = VP_BALANCE_NAME
        AND PBD_YTDBAL.DIMENSION_NAME = VP_DIMENSION_NAME
        AND PBD_YTDBAL.BALANCE_DIMENSION_ID = PDB_YTDBAL.BALANCE_DIMENSION_ID
        AND PBT_YTDBAL.LEGISLATION_CODE = 'IE'
        AND PACT_YTDBAL.ACTION_CONTEXT_TYPE = 'AAP'
        AND PAA_SRC.ASSIGNMENT_ACTION_ID = PACT_YTDBAL.SOURCE_ID
        AND PAA_SRC.PAYROLL_ACTION_ID = PPA_SRC.PAYROLL_ACTION_ID
        AND PPA_SRC.EFFECTIVE_DATE <= VP_EFFECTIVE_DATE
      ORDER BY
        PACT_YTDBAL.EFFECTIVE_DATE,
        PACT_YTDBAL.ACTION_CONTEXT_ID,
        NVL(PACT_YTDBAL.ACTION_INFORMATION5
           ,0);
    CURSOR CUR_GET_PREV_P30_LOCK_ID(VP_PAYROLL_ACTION_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE,VP_ASSIGNMENT_ID IN PAY_ASSIGNMENT_ACTIONS.ASSIGNMENT_ACTION_ID%TYPE,VP_TAX_START_DATE IN DATE,VP_REPORT_END_DATE IN DATE) IS
      SELECT
        PPA.PAYROLL_ACTION_ID PREV_DATA_LOCK_ID,
        TO_DATE(SUBSTR(PPA.LEGISLATIVE_PARAMETERS
                      ,INSTR(PPA.LEGISLATIVE_PARAMETERS
                           ,'END_DATE=') + 9
                      ,10)
               ,'YYYY/MM/DD')
      FROM
        PAY_PAYROLL_ACTIONS PPA,
        PAY_ASSIGNMENT_ACTIONS PAA
      WHERE PPA.PAYROLL_ACTION_ID = PAA.PAYROLL_ACTION_ID
        AND PPA.REPORT_TYPE = 'IEP30_PRGLOCK'
        AND PAA.ASSIGNMENT_ID = VP_ASSIGNMENT_ID
        AND PAA.ASSIGNMENT_ACTION_ID = (
        SELECT
          TO_NUMBER(SUBSTR(MAX(LPAD(PAA2.ACTION_SEQUENCE
                                   ,15
                                   ,'0') || PAA2.ASSIGNMENT_ACTION_ID)
                          ,16))
        FROM
          PAY_PAYROLL_ACTIONS PPA2,
          PAY_ASSIGNMENT_ACTIONS PAA2
        WHERE PPA2.PAYROLL_ACTION_ID = PAA2.PAYROLL_ACTION_ID
          AND PPA2.REPORT_TYPE = 'IEP30_PRGLOCK'
          AND PAA2.ASSIGNMENT_ID = VP_ASSIGNMENT_ID
          AND PPA2.PAYROLL_ACTION_ID <> VP_PAYROLL_ACTION_ID
          AND TO_DATE(SUBSTR(PPA2.LEGISLATIVE_PARAMETERS
                      ,INSTR(PPA2.LEGISLATIVE_PARAMETERS
                           ,'END_DATE=') + 9
                      ,10)
               ,'YYYY/MM/DD') BETWEEN VP_TAX_START_DATE
          AND VP_REPORT_END_DATE )
      ORDER BY
        PPA.PAYROLL_ACTION_ID;
    CURSOR GET_ACTION_CONTEXT(VP_PAYROLL_ACTION_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE,VP_ASSIGNMENT_ID IN PAY_ASSIGNMENT_ACTIONS.ASSIGNMENT_ACTION_ID%TYPE) IS
      SELECT
        FND_NUMBER.CANONICAL_TO_NUMBER(SUBSTR(MAX(LPAD(PAA_RUN.ACTION_SEQUENCE
                                                      ,15
                                                      ,'0') || PACT_YTDBAL.ACTION_CONTEXT_ID)
                                             ,16))
      FROM
        PAY_ASSIGNMENT_ACTIONS PAA_P30,
        PAY_ACTION_INTERLOCKS PAI_P30,
        PAY_ASSIGNMENT_ACTIONS PAA_ARC,
        PAY_ACTION_INFORMATION PACT_YTDBAL,
        PAY_ACTION_INTERLOCKS PAI_ARC,
        PAY_ASSIGNMENT_ACTIONS PAA_RUN,
        PAY_PAYROLL_ACTIONS PPA_RUN
      WHERE PAA_P30.PAYROLL_ACTION_ID = VP_PAYROLL_ACTION_ID
        AND PAA_P30.ASSIGNMENT_ID = VP_ASSIGNMENT_ID
        AND PAA_P30.ASSIGNMENT_ACTION_ID = PAI_P30.LOCKING_ACTION_ID
        AND PAA_ARC.ASSIGNMENT_ACTION_ID = PAI_P30.LOCKED_ACTION_ID
        AND PAA_ARC.ASSIGNMENT_ACTION_ID = PAI_ARC.LOCKING_ACTION_ID
        AND PACT_YTDBAL.ACTION_CONTEXT_ID = PAA_ARC.ASSIGNMENT_ACTION_ID
        AND PAA_RUN.ASSIGNMENT_ACTION_ID = PAI_ARC.LOCKED_ACTION_ID
        AND PACT_YTDBAL.ACTION_CONTEXT_TYPE = 'AAP'
        AND PAA_RUN.SOURCE_ACTION_ID IS NULL
        AND PAA_RUN.PAYROLL_ACTION_ID = PPA_RUN.PAYROLL_ACTION_ID
        AND PPA_RUN.ACTION_TYPE in ( 'R' , 'Q' );
    V_PREV_DATA_LOCK_ID NUMBER;
    V_PRE_DATE_EFF_DATE DATE;
    V_CURR_YTD_BALANCES YTD_BALANCES%ROWTYPE;
    V_PREV_YTD_BALANCES YTD_BALANCES%ROWTYPE;
    V_ACTION_CONTEXT_ID NUMBER(15,0);
  pragma autonomous_transaction;
  BEGIN
    CP_PAYE_YTD := 0;
    CP_EE_PRSI_YTD := 0;
    CP_ER_PRSI_YTD := 0;
    CP_PAYE_PTD := 0;
    CP_EE_PRSI_PTD := 0;
    CP_ER_PRSI_PTD := 0;
    OPEN GET_ACTION_CONTEXT(REPORT_ID,ASSIGNMENT_ID);
    FETCH GET_ACTION_CONTEXT
     INTO
       V_ACTION_CONTEXT_ID;
    CLOSE GET_ACTION_CONTEXT;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE Net Tax','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_PAYE_YTD := NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                      ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE PRSI Employee','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_EE_PRSI_YTD := NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                         ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE PRSI K Employee Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_EE_PRSI_YTD := CP_EE_PRSI_YTD + NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                         ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE PRSI M Employee Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_EE_PRSI_YTD := CP_EE_PRSI_YTD + NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                         ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE PRSI Employer','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_ER_PRSI_YTD := NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                         ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE PRSI K Employer Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_ER_PRSI_YTD := CP_ER_PRSI_YTD + NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                         ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN YTD_BALANCES(REPORT_ID,ASSIGNMENT_ID,'IE PRSI M Employer Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,P_END_DATE);
    FETCH YTD_BALANCES
     INTO
       V_CURR_YTD_BALANCES;
    CLOSE YTD_BALANCES;
    CP_ER_PRSI_YTD := CP_ER_PRSI_YTD + NVL(V_CURR_YTD_BALANCES.BALANCE_VALUE
                         ,0);
    V_CURR_YTD_BALANCES.BALANCE_VALUE := NULL;
    OPEN CUR_GET_PREV_P30_LOCK_ID(REPORT_ID,ASSIGNMENT_ID,CP_TAX_START_DATE,P_END_DATE);
    FETCH CUR_GET_PREV_P30_LOCK_ID
     INTO
       V_PREV_DATA_LOCK_ID
       ,V_PRE_DATE_EFF_DATE;
    IF CUR_GET_PREV_P30_LOCK_ID%NOTFOUND THEN
      V_PREV_DATA_LOCK_ID := NULL;
      V_PRE_DATE_EFF_DATE := NULL;
      CP_PAYE_PTD := CP_PAYE_YTD;
      CP_EE_PRSI_PTD := CP_EE_PRSI_YTD;
      CP_ER_PRSI_PTD := CP_ER_PRSI_YTD;
    ELSE
      OPEN GET_ACTION_CONTEXT(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID);
      FETCH GET_ACTION_CONTEXT
       INTO
         V_ACTION_CONTEXT_ID;
      CLOSE GET_ACTION_CONTEXT;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE Net Tax','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_PAYE_PTD := CP_PAYE_YTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                        ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE PRSI Employee','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_EE_PRSI_PTD := CP_EE_PRSI_YTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                           ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE PRSI K Employee Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_EE_PRSI_PTD := CP_EE_PRSI_PTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                           ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE PRSI M Employee Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_EE_PRSI_PTD := CP_EE_PRSI_PTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                           ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE PRSI Employer','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_ER_PRSI_PTD := CP_ER_PRSI_YTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                           ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE PRSI K Employer Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_ER_PRSI_PTD := CP_ER_PRSI_PTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                           ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
      OPEN YTD_BALANCES(V_PREV_DATA_LOCK_ID,ASSIGNMENT_ID,'IE PRSI M Employer Lump Sum','_ASG_YTD',V_ACTION_CONTEXT_ID,V_PRE_DATE_EFF_DATE);
      FETCH YTD_BALANCES
       INTO
         V_PREV_YTD_BALANCES;
      CLOSE YTD_BALANCES;
      CP_ER_PRSI_PTD := CP_ER_PRSI_PTD - NVL(V_PREV_YTD_BALANCES.BALANCE_VALUE
                           ,0);
      V_PREV_YTD_BALANCES.BALANCE_VALUE := NULL;
    END IF;
    CLOSE CUR_GET_PREV_P30_LOCK_ID;
    CP_TOTAL_PRSI_REPORT := NVL(CP_EE_PRSI_PTD
                               ,0) + NVL(CP_ER_PRSI_PTD
                               ,0);
    CP_TOTAL_PRSI_YTD := NVL(CP_EE_PRSI_YTD
                            ,0) + NVL(CP_ER_PRSI_YTD
                            ,0);
    IF ((CP_PAYE_PTD < 0) OR (CP_EE_PRSI_PTD < 0) OR (CP_ER_PRSI_PTD < 0)) THEN
      RETURN (1);
    END IF;
   /* CP_PAYE_YTD := 0;
    CP_EE_PRSI_YTD := 0;
    CP_ER_PRSI_YTD := 0;
    CP_TOTAL_PRSI_YTD := 0; */

    RETURN (0);
  END CF_CALCULATE_TOTAL_PRSIFORMULA;

  FUNCTION CF_PAYROLL_NAMEFORMULA(PAYROLL_ID IN VARCHAR2) RETURN CHAR IS
    CURSOR CUR_PAYROLL(VP_PAYROLL_ID IN PAY_PAYROLLS_F.PAYROLL_ID%TYPE) IS
      SELECT
        PAYROLL_NAME
      FROM
        PAY_PAYROLLS_F
      WHERE PAYROLL_ID = VP_PAYROLL_ID;
    V_CUR_PAYROLL CUR_PAYROLL%ROWTYPE;
  BEGIN
    IF P_SORT_BY = 'PAYROLL' THEN
      OPEN CUR_PAYROLL(PAYROLL_ID);
      FETCH CUR_PAYROLL
       INTO
         V_CUR_PAYROLL;
      CLOSE CUR_PAYROLL;
    END IF;
    RETURN (V_CUR_PAYROLL.PAYROLL_NAME);
  END CF_PAYROLL_NAMEFORMULA;

  FUNCTION CP_PAYE_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PAYE_YTD;
  END CP_PAYE_YTD_P;

  FUNCTION CP_EE_PRSI_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EE_PRSI_YTD;
  END CP_EE_PRSI_YTD_P;

  FUNCTION CP_ER_PRSI_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ER_PRSI_YTD;
  END CP_ER_PRSI_YTD_P;

  FUNCTION CP_TOTAL_PRSI_REPORT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TOTAL_PRSI_REPORT;
  END CP_TOTAL_PRSI_REPORT_P;

  FUNCTION CP_TOTAL_PRSI_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TOTAL_PRSI_YTD;
  END CP_TOTAL_PRSI_YTD_P;

  FUNCTION CP_PAYE_PTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PAYE_PTD;
  END CP_PAYE_PTD_P;

  FUNCTION CP_EE_PRSI_PTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EE_PRSI_PTD;
  END CP_EE_PRSI_PTD_P;

  FUNCTION CP_ER_PRSI_PTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ER_PRSI_PTD;
  END CP_ER_PRSI_PTD_P;

  FUNCTION CP_PAYROLL_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PAYROLL_ID;
  END CP_PAYROLL_ID_P;

  FUNCTION CP_SUPPLEMENTARY_RUN_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SUPPLEMENTARY_RUN;
  END CP_SUPPLEMENTARY_RUN_P;

  FUNCTION CP_REPORT_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_REPORT_DATE;
  END CP_REPORT_DATE_P;

  FUNCTION CP_ORDER_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ORDER_BY;
  END CP_ORDER_BY_P;

  FUNCTION CP_TAX_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_TAX_START_DATE;
  END CP_TAX_START_DATE_P;

END PAY_PAYIEP30_XMLP_PKG;

/
