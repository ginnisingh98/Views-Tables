--------------------------------------------------------
--  DDL for Package Body JA_JAINITCP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINITCP_XMLP_PKG" AS
/* $Header: JAINITCPB.pls 120.1 2007/12/25 16:20:55 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    TEMP BOOLEAN;
  BEGIN
  TEMP:=P_SUPPLIER_ORG_TYPEVALIDTRIGGE;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.4 Last modified date is 15/12/2005')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      /*SRW.MESSAGE(1275
                 ,'suppl_or_type -> ' || P_SUPPLIER_ORG_TYPE)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    P_FROM_DATE_T:= P_FROM_DATE;
    P_TO_DATE_T :=P_TO_DATE;
    IF P_FROM_DATE IS NULL THEN
      SELECT
        MIN(API2.INVOICE_DATE)
      INTO P_FROM_DATE_T
      FROM
        JAI_AP_TDS_F16_HDRS_ALL AFRM,
        JAI_AP_TDS_F16_DTLS_ALL FRMD,
        HR_ORGANIZATION_UNITS HOU,
        HR_LOCATIONS LOC,
        JAI_CMN_INVENTORY_ORGS JHOU,
        AP_INVOICES_ALL API1,
        AP_INVOICES_ALL API2,
        AP_INVOICE_PAYMENTS_ALL APIP,
        PO_VENDORS POV1,
        PO_VENDORS POV2,
        PO_VENDORS POV3,
        PO_VENDOR_SITES_ALL POVS,
        AP_INVOICE_LINES_ALL APLA
      WHERE DECODE(AFRM.ORG_ID
            ,NULL
            ,0
            ,AFRM.ORG_ID) = NVL(P_ORGANIZATION_ID
         ,DECODE(AFRM.ORG_ID
               ,NULL
               ,0
               ,AFRM.ORG_ID))
        AND AFRM.TDS_TAX_SECTION = P_TDS_PAYMENT_TYPE
        AND AFRM.ORG_ID = hou.organization_id (+)
        AND FRMD.CERTIFICATE_NUM = AFRM.CERTIFICATE_NUM
        AND apla.invoice_id (+) = FRMD.TDS_INVOICE_ID
        AND ( ( POV1.ORGANIZATION_TYPE_LOOKUP_CODE = P_SUPPLIER_ORG_TYPE_T
        AND UPPER(P_SUPPLIER_ORG_TYPE_T) = 'COMPANY' )
      OR ( POV1.ORGANIZATION_TYPE_LOOKUP_CODE <> P_SUPPLIER_ORG_TYPE_T
        AND UPPER(P_SUPPLIER_ORG_TYPE_T) <> 'COMPANY' ) )
        AND pov1.vendor_id (+) = AFRM.VENDOR_ID
        AND povs.vendor_site_id (+) = AFRM.VENDOR_SITE_ID
        AND POVS.ORG_ID = P_ORGANIZATION_ID
        AND API2.INVOICE_ID = FRMD.TDS_INVOICE_ID
        AND pov3.vendor_id (+) = API2.VENDOR_ID
        AND api1.invoice_id (+) = FRMD.INVOICE_ID
        AND apip.invoice_payment_id (+) = FRMD.INVOICE_PAYMENT_ID
        AND jhou.organization_id (+) = HOU.ORGANIZATION_ID
        AND HOU.LOCATION_ID = loc.location_id (+)
        AND pov2.vendor_id (+) = AFRM.TAX_AUTHORITY_ID;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_GROSS_INV_AMTFORMULA(INVOICE_ID_V IN NUMBER
                                  ,INVOICE_AMOUNT IN NUMBER) RETURN NUMBER IS
    TMP NUMBER := 0;
    CURSOR FETCH_PREPAYMENT_AMT_CUR IS
      SELECT
        SUM(AMOUNT)
      FROM
        AP_INVOICE_LINES_ALL
      WHERE INVOICE_ID = INVOICE_ID_V
        AND LINE_TYPE_LOOKUP_CODE = 'PREPAY';
    V_PREPAYMENT_AMOUNT NUMBER;
  BEGIN
    OPEN FETCH_PREPAYMENT_AMT_CUR;
    FETCH FETCH_PREPAYMENT_AMT_CUR
     INTO V_PREPAYMENT_AMOUNT;
    CLOSE FETCH_PREPAYMENT_AMT_CUR;
    TMP := NVL(INVOICE_AMOUNT
              ,0) + NVL(V_PREPAYMENT_AMOUNT
              ,0);
    RETURN (TMP);
  END CF_GROSS_INV_AMTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR ORG_NAME_CUR(CP_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NAME
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = CP_ORGANIZATION_ID;
    CURSOR INTERNAL_ADD_CUR(CP_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NVL(INTERNAL_ADDRESS_LINE
           ,'NIL')
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = CP_ORGANIZATION_ID;
    CURSOR TOWN_OR_CITY_CUR(CP_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NVL(LOC.TOWN_OR_CITY
           ,'NIL') || '-' || NVL(LOC.POSTAL_CODE
           ,'NIL')
      FROM
        HR_LOCATIONS LOC,
        HR_ORGANIZATION_UNITS HR
      WHERE LOC.LOCATION_ID = HR.LOCATION_ID
        AND HR.ORGANIZATION_ID = CP_ORGANIZATION_ID;
    CURSOR COUNTRY_CUR(CP_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NVL(LOC.COUNTRY
           ,'NIL')
      FROM
        HR_LOCATIONS LOC,
        HR_ORGANIZATION_UNITS HR
      WHERE LOC.LOCATION_ID = HR.LOCATION_ID
        AND HR.ORGANIZATION_ID = CP_ORGANIZATION_ID;
    CURSOR PO_VENDOR_NAME_CUR(P_TDS_PAYMENT_TYPE IN VARCHAR2) IS
      SELECT
        DISTINCT
        ( NVL(PO.VENDOR_NAME
           ,'NULL') )
      FROM
        PO_VENDORS PO,
        JAI_AP_TDS_F16_HDRS_ALL AFRM,
        JAI_AP_TDS_VENDOR_HDRS TDS
      WHERE PO.VENDOR_ID = AFRM.TAX_AUTHORITY_ID
        AND TDS.TAX_ID = AFRM.TDS_TAX_ID
        AND AFRM.TDS_TAX_SECTION = P_TDS_PAYMENT_TYPE;
    CURSOR ATTRIBUTE14_CUR(CP_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NVL(ATTRIBUTE14
           ,'NA')
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = NVL(CP_ORGANIZATION_ID
         ,0);
    CURSOR ATTRIBUTE15_CUR(CP_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        NVL(ATTRIBUTE15
           ,'NA')
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = NVL(CP_ORGANIZATION_ID
         ,0);
    LV_REPORTING_LEVEL VARCHAR2(2000);
    LN_REPORTING_ENTITY_ID NUMBER;
    LV_PREDICATE_TYPE VARCHAR2(2000);
    LV_PREDICATE_WHERE VARCHAR2(2000);
  BEGIN
    OPEN ORG_NAME_CUR(P_ORGANIZATION_ID);
    FETCH ORG_NAME_CUR
     INTO F_NAME;
    CLOSE ORG_NAME_CUR;
    OPEN INTERNAL_ADD_CUR(P_ORGANIZATION_ID);
    FETCH INTERNAL_ADD_CUR
     INTO F_INTERNAL_ADDRS;
    CLOSE INTERNAL_ADD_CUR;
    OPEN TOWN_OR_CITY_CUR(P_ORGANIZATION_ID);
    FETCH TOWN_OR_CITY_CUR
     INTO F_ADDRS_LINE1;
    CLOSE TOWN_OR_CITY_CUR;
    OPEN COUNTRY_CUR(P_ORGANIZATION_ID);
    FETCH COUNTRY_CUR
     INTO F_COUNTRY;
    CLOSE COUNTRY_CUR;
    OPEN PO_VENDOR_NAME_CUR(P_TDS_PAYMENT_TYPE);
    FETCH PO_VENDOR_NAME_CUR
     INTO F_VENDOR_NAME;
    CLOSE PO_VENDOR_NAME_CUR;
    OPEN ATTRIBUTE14_CUR(P_ORGANIZATION_ID);
    FETCH ATTRIBUTE14_CUR
     INTO F_TDS_VENDOR;
    CLOSE ATTRIBUTE14_CUR;
    OPEN ATTRIBUTE15_CUR(P_ORGANIZATION_ID);
    FETCH ATTRIBUTE15_CUR
     INTO F_TDS_PREFIX;
    CLOSE ATTRIBUTE15_CUR;
    /*SRW.MESSAGE(1275
               ,'def where clause is ' || P_ORG_WHERE)*/NULL;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_VENDOR_SITE_ADDRESSFORMULA(VENDOR_SITE_ID_V IN NUMBER) RETURN CHAR IS
    CURSOR C_VEND_SITE_ADDR IS
      SELECT
        POVS.ADDRESS_LINE1 || ',' || POVS.ADDRESS_LINE2 || ',' || POVS.ADDRESS_LINE3 || ',' || POVS.CITY || ',' || POVS.STATE || ',' || POVS.ZIP || ',' || POVS.COUNTRY VENDOR_SITE_ADDRESS
      FROM
        PO_VENDOR_SITES_ALL POVS
      WHERE VENDOR_SITE_ID = VENDOR_SITE_ID_V;
    V_VENDOR_SITE_ADDR VARCHAR2(500);
  BEGIN
    OPEN C_VEND_SITE_ADDR;
    FETCH C_VEND_SITE_ADDR
     INTO V_VENDOR_SITE_ADDR;
    CLOSE C_VEND_SITE_ADDR;
    RETURN (V_VENDOR_SITE_ADDR);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ('NULL');
  END CF_VENDOR_SITE_ADDRESSFORMULA;

  FUNCTION CF_ACCOUNTING_DATEFORMULA(INVOICE_ID_V IN NUMBER) RETURN DATE IS
    CURSOR C_ACCTD_DATE IS
      SELECT
        ACCOUNTING_DATE
      FROM
        AP_INVOICE_LINES_ALL
      WHERE INVOICE_ID = INVOICE_ID_V
        AND LINE_NUMBER = 1;
    V_ACCTD_DATE DATE;
  BEGIN
    OPEN C_ACCTD_DATE;
    FETCH C_ACCTD_DATE
     INTO V_ACCTD_DATE;
    CLOSE C_ACCTD_DATE;
    RETURN (V_ACCTD_DATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ACCOUNTING_DATEFORMULA;

  FUNCTION CF_TDS_AMOUNTFORMULA(INVOICE_ID_V IN NUMBER
                               ,TAX_RATE IN NUMBER
                               ,SURCHARGE_RATE IN NUMBER
                               ,INVOICE_AMOUNT IN NUMBER) RETURN NUMBER IS
    TDS_TMP NUMBER := 0;
    CURSOR FETCH_PREPAYMENT_AMT_CUR IS
      SELECT
        SUM(AMOUNT)
      FROM
        AP_INVOICE_DISTRIBUTIONS_ALL APD1
      WHERE INVOICE_ID = INVOICE_ID_V
        AND LINE_TYPE_LOOKUP_CODE = 'PREPAY'
        AND PREPAY_DISTRIBUTION_ID IN (
        SELECT
          INVOICE_DISTRIBUTION_ID
        FROM
          AP_INVOICE_DISTRIBUTIONS_ALL APD2
        WHERE exists (
          SELECT
            1
          FROM
            JAI_AP_TDS_F16_DTLS_ALL JA
          WHERE JA.INVOICE_ID = APD2.INVOICE_ID ) );
    V_PREPAYMENT_AMOUNT NUMBER;
    V_TDS_TAX_RATE NUMBER;
    CURSOR C_RTN_AMOUNT(P_INVOICE_ID IN NUMBER) IS
      SELECT
        NVL(AMT_REVERSED
           ,0)
      FROM
        JAI_AP_TDS_INVOICES
      WHERE INVOICE_ID = P_INVOICE_ID;
    V_RTN_AMOUNT NUMBER;
  BEGIN
    V_TDS_TAX_RATE := TAX_RATE - SURCHARGE_RATE;
    OPEN C_RTN_AMOUNT(INVOICE_ID_v);
    FETCH C_RTN_AMOUNT
     INTO V_RTN_AMOUNT;
    CLOSE C_RTN_AMOUNT;
    TDS_TMP := (NVL(V_TDS_TAX_RATE
                  ,1) * NVL(INVOICE_AMOUNT
                  ,0) / 100) - NVL(V_RTN_AMOUNT
                  ,0);
    /*SRW.MESSAGE(1112
               ,'invid->' || INVOICE_AMOUNT || ', v_rtn_amount->' || V_RTN_AMOUNT || ', v_tds_tax_rate->' || V_TDS_TAX_RATE)*/NULL;
    RETURN (ROUND(TDS_TMP
                ,2));
  END CF_TDS_AMOUNTFORMULA;

  FUNCTION CF_INVOICE_AMOUNTFORMULA(INVOICE_ID_V IN NUMBER
                                   ,INVOICE_AMOUNT IN NUMBER) RETURN NUMBER IS
    CURSOR FETCH_PREPAYMENT_AMT_CUR IS
      SELECT
        SUM(AMOUNT)
      FROM
        AP_INVOICE_DISTRIBUTIONS_ALL APD1
      WHERE INVOICE_ID = INVOICE_ID_V
        AND LINE_TYPE_LOOKUP_CODE = 'PREPAY'
        AND PREPAY_DISTRIBUTION_ID IN (
        SELECT
          INVOICE_DISTRIBUTION_ID
        FROM
          AP_INVOICE_DISTRIBUTIONS_ALL APD2
        WHERE exists (
          SELECT
            1
          FROM
            JAI_AP_TDS_F16_DTLS_ALL JA
          WHERE JA.INVOICE_ID = APD2.INVOICE_ID ) );
    V_PREPAYMENT_AMOUNT NUMBER;
    V_INV_AMOUNT NUMBER;
    CURSOR C_RTN_BASE_AMOUNT(P_INVOICE_ID IN NUMBER) IS
      SELECT
        NVL(AMT_APPLIED
           ,0)
      FROM
        JAI_AP_TDS_INVOICES
      WHERE INVOICE_ID = P_INVOICE_ID;
    V_RTN_BASE_AMOUNT NUMBER;
  BEGIN
    OPEN C_RTN_BASE_AMOUNT(INVOICE_ID_v);
    FETCH C_RTN_BASE_AMOUNT
     INTO V_RTN_BASE_AMOUNT;
    CLOSE C_RTN_BASE_AMOUNT;
    V_INV_AMOUNT := NVL(INVOICE_AMOUNT
                       ,0) - NVL(V_RTN_BASE_AMOUNT
                       ,0);
    /*SRW.MESSAGE(1111
               ,'invid->' || INVOICE_ID || ', rtvnAmt->' || V_RTN_BASE_AMOUNT)*/NULL;
    RETURN (V_INV_AMOUNT);
  END CF_INVOICE_AMOUNTFORMULA;

  FUNCTION CF_TOT_TDS_TAX_AMOUNTFORMULA(TDS_INV_AMT IN NUMBER
                                       ,SUR_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(NVL(TDS_INV_AMT
                    ,0) + NVL(SUR_AMT
                    ,0)));
  END CF_TOT_TDS_TAX_AMOUNTFORMULA;

  FUNCTION P_SUPPLIER_ORG_TYPEVALIDTRIGGE RETURN BOOLEAN IS
  BEGIN
  P_SUPPLIER_ORG_TYPE_T := P_SUPPLIER_ORG_TYPE;
    IF UPPER(NVL(P_SUPPLIER_ORG_TYPE
             ,'XXX')) <> 'COMPANY' THEN
      P_SUPPLIER_ORG_TYPE_T := NULL;
    END IF;
    RETURN (TRUE);
  END P_SUPPLIER_ORG_TYPEVALIDTRIGGE;

  FUNCTION CF_PAN_NOFORMULA(VENDOR_ID IN NUMBER
                           ,VENDOR_SITE_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN GET_PAN_TAN(VENDOR_ID
                      ,VENDOR_SITE_ID
                      ,'PAN');
  END CF_PAN_NOFORMULA;

  FUNCTION GET_PAN_TAN(P_VENDOR_ID IN JAI_AP_TDS_VENDOR_HDRS.VENDOR_ID%TYPE
                      ,P_VENDOR_SITE_ID IN JAI_AP_TDS_VENDOR_HDRS.VENDOR_SITE_ID%TYPE
                      ,P_PAN_OR_TAN IN VARCHAR2) RETURN VARCHAR2 IS
    CURSOR CUR_PAN_TAN(CP_VENDOR_ID IN JAI_AP_TDS_VENDOR_HDRS.VENDOR_ID%TYPE,CP_VENDOR_SITE_ID IN JAI_AP_TDS_VENDOR_HDRS.VENDOR_SITE_ID%TYPE) IS
      SELECT
        PAN_NO,
        TAN_NO
      FROM
        JAI_AP_TDS_VENDOR_HDRS
      WHERE VENDOR_ID = CP_VENDOR_ID
        AND VENDOR_SITE_ID = CP_VENDOR_SITE_ID;
    LR_PAN_TAN CUR_PAN_TAN%ROWTYPE;
  BEGIN
    OPEN CUR_PAN_TAN(P_VENDOR_ID,P_VENDOR_SITE_ID);
    FETCH CUR_PAN_TAN
     INTO LR_PAN_TAN;
    CLOSE CUR_PAN_TAN;
    IF LR_PAN_TAN.PAN_NO IS NULL THEN
      OPEN CUR_PAN_TAN(P_VENDOR_ID,0);
      FETCH CUR_PAN_TAN
       INTO LR_PAN_TAN;
      CLOSE CUR_PAN_TAN;
    END IF;
    IF P_PAN_OR_TAN = 'PAN' THEN
      RETURN LR_PAN_TAN.PAN_NO;
    ELSIF P_PAN_OR_TAN = 'TAN' THEN
      RETURN LR_PAN_TAN.TAN_NO;
    ELSE
      RETURN NULL;
    END IF;
  END GET_PAN_TAN;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_AMOUNTSFORMULA(INVOICE_ID IN NUMBER
                            ,TAX_ID IN NUMBER
                            ,TOT_TAX_AMT IN NUMBER) RETURN NUMBER IS
    CURSOR C_GET_TDS_RATES(P_TAX_ID IN NUMBER) IS
      SELECT
        ( NVL(TAX_RATE
           ,0) - ( NVL(SURCHARGE_RATE
           ,0) + NVL(CESS_RATE
           ,0) ) ) TDS_RATE,
        NVL(SURCHARGE_RATE
           ,0) SURCHARGE_RATE,
        NVL(CESS_RATE
           ,0),
        NVL(SH_CESS_RATE
           ,0),
        NVL(TAX_RATE
           ,0)
      FROM
        JAI_CMN_TAXES_ALL JTC
      WHERE TAX_ID = P_TAX_ID;
    LN_TDS_RATE NUMBER;
    LN_TAX_RATE NUMBER;
    LN_SURCHARGE_RATE NUMBER;
    LN_CESS_RATE NUMBER;
    LN_SH_CESS_RATE NUMBER;
  BEGIN
    /*SRW.MESSAGE(1275
               ,INVOICE_ID || ' ' || TAX_ID)*/NULL;
    OPEN C_GET_TDS_RATES(TAX_ID);
    FETCH C_GET_TDS_RATES
     INTO LN_TDS_RATE,LN_SURCHARGE_RATE,LN_CESS_RATE,LN_SH_CESS_RATE,LN_TAX_RATE;
    CLOSE C_GET_TDS_RATES;
    /*SRW.MESSAGE(13
               ,':ln_tds_rate  : ' || LN_TDS_RATE || ':ln_surcharge_rate : ' || LN_SURCHARGE_RATE || ' ln_cess_rate : ' || LN_CESS_RATE || ':tot_tax_amt : ' || TOT_TAX_AMT)*/NULL;
    CP_SURCHARGE_AMOUNT := ROUND((TOT_TAX_AMT * LN_SURCHARGE_RATE / LN_TAX_RATE)
                                ,2);
    CP_CESS_AMOUNT := ROUND((TOT_TAX_AMT * LN_CESS_RATE / LN_TAX_RATE)
                           ,2);
    CP_SH_CESS_AMOUNT := ROUND((TOT_TAX_AMT * LN_CESS_RATE / LN_TAX_RATE)
                              ,2);
    CP_TDS_AMOUNT := TOT_TAX_AMT - NVL(CP_SURCHARGE_AMOUNT
                        ,0) - NVL(CP_CESS_AMOUNT
                        ,0) - NVL(CP_SH_CESS_AMOUNT
                        ,0);
    RETURN (1);
  END CF_AMOUNTSFORMULA;

  FUNCTION CP_CESS_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_AMOUNT;
  END CP_CESS_AMOUNT_P;

  FUNCTION CP_SURCHARGE_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SURCHARGE_AMOUNT;
  END CP_SURCHARGE_AMOUNT_P;

  FUNCTION CP_TDS_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TDS_AMOUNT;
  END CP_TDS_AMOUNT_P;

  FUNCTION CP_SH_CESS_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SH_CESS_AMOUNT;
  END CP_SH_CESS_AMOUNT_P;

END JA_JAINITCP_XMLP_PKG;


/
